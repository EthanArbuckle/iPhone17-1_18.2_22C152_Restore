void sub_1CC294A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(void *)a1 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 648) = 0;
  sub_1CC294BD0((void *)(a1 + 640), *(_DWORD *)(v4 + 44));
  *(_DWORD *)(a1 + 576) = 0;
  v6 = *(_DWORD *)(*(void *)(a1 + 8) + 44);
  *(_DWORD *)(a1 + 632) = v6;
  if ((v6 + 63) < 0x40)
  {
    v8 = 0;
  }
  else
  {
    v7 = (v6 + 63) >> 6;
    if (v7 > *(_DWORD *)(a1 + 580)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(*(void **)(a1 + 568), 8 * v7);
    v8 = v7;
    *(_DWORD *)(a1 + 576) = v7;
  }
  if ((v6 & 0x3F) != 0) {
    *(void *)(*(void *)(a1 + 568) + 8 * v8 - 8) &= ~(-1 << (v6 & 0x3F));
  }
}

void *sub_1CC294BD0(void *result, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)result + 14);
  if (v2 < a2 || v2 >> 2 > a2)
  {
    v5 = result;
    free(*((void **)result + 6));
    result = malloc_type_calloc(a2, 1uLL, 0x6D9A4F0CuLL);
    if (!result && (a2 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v5[6] = result;
    *((_DWORD *)v5 + 14) = a2;
  }
  return result;
}

uint64_t sub_1CC294C5C(void *a1, uint64_t a2, int a3)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  a1[4] = 0;
  v3 = (llvm::MachineBasicBlock **)(a1 + 4);
  a1[6] = 0;
  v4 = (llvm::MachineBasicBlock **)(a1 + 6);
  a1[5] = 0;
  v5 = (llvm::MachineBasicBlock **)(a1 + 5);
  a1[3] = a2;
  v6 = *(uint64_t **)(a2 + 88);
  if (((*(void *)(a2 + 96) - (void)v6) & 0x7FFFFFFF8) != 0x10) {
    return 0;
  }
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  uint64_t v9 = (*(void *)(v8 + 72) - *(void *)(v8 + 64)) & 0x7FFFFFFF8;
  v10 = (llvm::MachineBasicBlock *)(v9 == 8 ? v7 : v8);
  v11 = (llvm::MachineBasicBlock *)(v9 == 8 ? v8 : v7);
  if (((*((void *)v11 + 9) - *((void *)v11 + 8)) & 0x7FFFFFFF8) != 8) {
    return 0;
  }
  v12 = (llvm::MachineBasicBlock **)*((void *)v11 + 11);
  if (((*((void *)v11 + 12) - (void)v12) & 0x7FFFFFFF8) != 8) {
    return 0;
  }
  v15 = *v12;
  *v3 = v15;
  if (v15 != v10)
  {
    if (((*((void *)v10 + 9) - *((void *)v10 + 8)) & 0x7FFFFFFF8) != 8) {
      return 0;
    }
    v16 = (llvm::MachineBasicBlock **)*((void *)v10 + 11);
    if (((*((void *)v10 + 12) - (void)v16) & 0x7FFFFFFF8) != 8
      || *v16 != v15
      || *((void *)v15 + 19) != *((void *)v15 + 20))
    {
      return 0;
    }
  }
  if ((a3 & 1) == 0)
  {
    if ((llvm::MachineBasicBlock *)((char *)v15 + 48) == (llvm::MachineBasicBlock *)(*((void *)v15 + 6) & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    int v17 = **(unsigned __int16 **)(*((void *)v15 + 7) + 16);
    if (v17 != 69 && v17 != 0) {
      return 0;
    }
  }
  *((_DWORD *)a1 + 84) = 0;
  uint64_t v19 = 0;
  if ((*(uint64_t (**)(void))(*(void *)*a1 + 248))()) {
    return v19;
  }
  v20 = *v5;
  if (!*v5 || !*((_DWORD *)a1 + 84)) {
    return 0;
  }
  if (v20 == v11) {
    v11 = v10;
  }
  a1[6] = v11;
  *((_DWORD *)a1 + 16) = 0;
  v21 = (llvm::MachineBasicBlock *)a1[4];
  if (v20 == v21) {
    v20 = (llvm::MachineBasicBlock *)a1[3];
  }
  if (v11 == v21) {
    v11 = (llvm::MachineBasicBlock *)a1[3];
  }
  v22 = (void *)((char *)v21 + 48);
  unint64_t v23 = *((void *)v21 + 7);
  if ((llvm::MachineBasicBlock *)v23 != (llvm::MachineBasicBlock *)((char *)v21 + 48))
  {
    do
    {
      int v24 = **(unsigned __int16 **)(v23 + 16);
      if (v24 != 69 && v24 != 0) {
        break;
      }
      long long v101 = v23;
      *(void *)&v102[0] = 0;
      DWORD2(v102[0]) = 0;
      uint64_t v26 = *((unsigned int *)a1 + 16);
      unint64_t v27 = a1[7];
      if (v26 >= *((_DWORD *)a1 + 17))
      {
        BOOL v42 = v27 + 32 * v26 > (unint64_t)&v101;
        if (v27 > (unint64_t)&v101 || !v42) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v28 = (_OWORD *)(v27 + 32 * *((unsigned int *)a1 + 16));
      long long v29 = v102[0];
      _OWORD *v28 = v101;
      v28[1] = v29;
      uint64_t v30 = (*((_DWORD *)a1 + 16) + 1);
      *((_DWORD *)a1 + 16) = v30;
      uint64_t v31 = a1[7] + 32 * v30;
      uint64_t v32 = *(void *)(v31 - 32);
      int v33 = *(_DWORD *)(v32 + 40);
      uint64_t v34 = *(void *)(v32 + 32);
      int v35 = v33 - 1;
      if (v35)
      {
        int v36 = 0;
        v37 = (_DWORD *)(v34 + 36);
        do
        {
          uint64_t v38 = v34 + 32 * (v36 + 2);
          v41 = *(llvm::MachineBasicBlock **)(v38 + 16);
          v39 = (llvm::MachineBasicBlock **)(v38 + 16);
          v40 = v41;
          if (v41 == v20)
          {
            *(_DWORD *)(v31 - 24) = *v37;
            v40 = *v39;
          }
          if (v40 == v11) {
            *(_DWORD *)(v31 - 20) = *v37;
          }
          v36 += 2;
          v37 += 16;
        }
        while (v35 != v36);
      }
      if (((*(uint64_t (**)(void, void, void, void, void, void, void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 368))(*a1, a1[3], a1[41], *((unsigned int *)a1 + 84), *(unsigned int *)(v34 + 4), *(unsigned int *)(v31 - 24), *(unsigned int *)(v31 - 20), v31 - 16, v31 - 12, v31 - 8) & 1) == 0)return 0; {
      if (!v23 || (*(unsigned char *)v23 & 4) == 0)
      }
      {
        while ((*(_WORD *)(v23 + 44) & 8) != 0)
          unint64_t v23 = *(void *)(v23 + 8);
      }
      unint64_t v23 = *(void *)(v23 + 8);
    }
    while ((void *)v23 != v22);
  }
  v43 = (void *)a1[60];
  if (v43 == (void *)a1[59]) {
    goto LABEL_58;
  }
  uint64_t v99 = *((unsigned int *)a1 + 122);
  if (v99 < 0x21 || 4 * (*((_DWORD *)a1 + 123) - *((_DWORD *)a1 + 124)) >= v99)
  {
    memset(v43, 255, 8 * v99);
LABEL_58:
    *(void *)((char *)a1 + 492) = 0;
    goto LABEL_59;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)a1 + 59);
LABEL_59:
  uint64_t v44 = *((unsigned int *)a1 + 144);
  if (v44) {
    bzero((void *)a1[71], 8 * v44);
  }
  v45 = *v5;
  if (a3)
  {
    if (*v5 == *v3)
    {
LABEL_65:
      if (*v4 != v45 && (sub_1CC296260(a1, *v4) & 1) == 0) {
        return 0;
      }
      goto LABEL_73;
    }
    if (sub_1CC296260(a1, v45))
    {
      v45 = *v3;
      goto LABEL_65;
    }
    return 0;
  }
  if (*v5 != *v3)
  {
    if (!sub_1CC2963B0((uint64_t)a1, v45)) {
      return 0;
    }
    v45 = *v3;
  }
  if (*v4 != v45 && !sub_1CC2963B0((uint64_t)a1, *v4)) {
    return 0;
  }
LABEL_73:
  *((_DWORD *)a1 + 162) = 0;
  *(void *)&long long v101 = v102;
  *((void *)&v101 + 1) = 0x800000000;
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)a1[3]);
  uint64_t v47 = a1[3];
  unint64_t v48 = v47 + 48;
  uint64_t v49 = *(void *)(v47 + 56);
  if (v47 + 48 != v49)
  {
    do
    {
      unint64_t v48 = *(void *)v48 & 0xFFFFFFFFFFFFFFF8;
      if (!v48 || (*(unsigned char *)v48 & 4) == 0)
      {
        while ((*(_WORD *)(v48 + 44) & 4) != 0)
          unint64_t v48 = *(void *)v48 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v51 = a1[59];
      uint64_t v50 = a1[60];
      if (v50 == v51)
      {
        uint64_t v52 = *((unsigned int *)a1 + 123);
        v53 = (void *)(v50 + 8 * v52);
        if (v52)
        {
          uint64_t v54 = 0;
          uint64_t v55 = 8 * v52;
          while (*(void *)(v50 + v54) != v48)
          {
            v54 += 8;
            if (v55 == v54) {
              goto LABEL_97;
            }
          }
          v53 = (void *)(v50 + v54);
        }
LABEL_97:
        uint64_t v51 = a1[60];
      }
      else
      {
        uint64_t v56 = *((unsigned int *)a1 + 122);
        int v57 = v56 - 1;
        unsigned int v58 = (v56 - 1) & ((v48 >> 4) ^ (v48 >> 9));
        v53 = (void *)(v50 + 8 * v58);
        uint64_t v59 = *v53;
        if (*v53 == -1)
        {
          v60 = 0;
LABEL_156:
          if (v60) {
            v53 = v60;
          }
          if (*v53 != v48) {
            v53 = (void *)(v50 + 8 * v56);
          }
        }
        else
        {
          v60 = 0;
          int v61 = 1;
          while (v59 != v48)
          {
            if (v60) {
              BOOL v62 = 0;
            }
            else {
              BOOL v62 = v59 == -2;
            }
            if (v62) {
              v60 = v53;
            }
            unsigned int v63 = v58 + v61++;
            unsigned int v58 = v63 & v57;
            v53 = (void *)(v50 + 8 * (v63 & v57));
            uint64_t v59 = *v53;
            if (*v53 == -1) {
              goto LABEL_156;
            }
          }
        }
      }
      if (v50 == v51) {
        v64 = (unsigned int *)a1 + 123;
      }
      else {
        v64 = (unsigned int *)(a1 + 61);
      }
      if (v53 != (void *)(v50 + 8 * *v64)) {
        break;
      }
      uint64_t v65 = *(unsigned int *)(v48 + 40);
      if (v65)
      {
        v66 = *(int **)(v48 + 32);
        v67 = &v66[8 * v65];
        do
        {
          int v68 = *v66;
          if (!*v66)
          {
            unsigned int v69 = v66[1];
            if (v69 - 1 <= 0x3FFFFFFE)
            {
              if ((v68 & 0x1000000) != 0)
              {
                uint64_t v70 = a1[1];
                if (v70) {
                  v71 = (void *)(v70 + 8);
                }
                else {
                  v71 = 0;
                }
                unint64_t v72 = *(unsigned int *)(*v71 + 24 * v69 + 16);
                v73 = (_WORD *)(v71[6] + ((v72 >> 3) & 0x1FFFFFFE));
                unsigned __int16 v74 = *v73 + (v72 & 0xF) * v69;
                unsigned int v75 = *((_DWORD *)a1 + 162);
                do
                {
                  int v76 = v74;
                  uint64_t v77 = a1[86];
                  unsigned int v78 = *(unsigned __int8 *)(v77 + v74);
                  if (v75 > v78)
                  {
                    uint64_t v79 = a1[80];
                    while (1)
                    {
                      uint64_t v80 = v78;
                      if (*(_DWORD *)(v79 + 4 * v78) == v76) {
                        break;
                      }
                      v78 += 256;
                      if ((int)v80 + 256 >= v75) {
                        goto LABEL_120;
                      }
                    }
                    if (v75 != v78)
                    {
                      v81 = (_DWORD *)(v79 + 4 * v75 - 4);
                      if (v81 != (_DWORD *)(v79 + 4 * v80))
                      {
                        *(_DWORD *)(v79 + 4 * v80) = *v81;
                        *(unsigned char *)(v77 + *(unsigned int *)(v79 + 4 * *((unsigned int *)a1 + 162) - 4)) = v80;
                        unsigned int v75 = *((_DWORD *)a1 + 162);
                      }
                      *((_DWORD *)a1 + 162) = --v75;
                    }
                  }
LABEL_120:
                  int v82 = (unsigned __int16)v73[1];
                  ++v73;
                  unsigned __int16 v74 = v82 + v76;
                }
                while (v82);
                int v68 = *v66;
              }
              if ((v68 & 0x30000000) == 0 && (v68 & 0x10FFF00) != 0x1000000)
              {
                if (DWORD2(v101) >= (unint64_t)HIDWORD(v101)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(_DWORD *)(v101 + 4 * DWORD2(v101)) = v69;
                ++DWORD2(v101);
              }
            }
          }
          v66 += 8;
        }
        while (v66 != v67);
      }
      while (DWORD2(v101))
      {
        unsigned int v83 = *(_DWORD *)(v101 + 4 * DWORD2(v101) - 4);
        --DWORD2(v101);
        uint64_t v84 = a1[1];
        if (v84) {
          v85 = (void *)(v84 + 8);
        }
        else {
          v85 = 0;
        }
        unint64_t v86 = *(unsigned int *)(*v85 + 24 * v83 + 16);
        v87 = (_WORD *)(v85[6] + ((v86 >> 3) & 0x1FFFFFFE));
        unsigned __int16 v88 = *v87 + (v86 & 0xF) * v83;
        do
        {
          uint64_t v89 = v88;
          if ((*(void *)(a1[71] + 8 * (v88 >> 6)) >> v88))
          {
            uint64_t v90 = a1[86];
            unsigned int v91 = *(unsigned __int8 *)(v90 + v89);
            unsigned int v92 = *((_DWORD *)a1 + 162);
            if (v92 <= v91) {
              goto LABEL_137;
            }
            while (*(_DWORD *)(a1[80] + 4 * v91) != v89)
            {
              v91 += 256;
              if (v91 >= v92) {
                goto LABEL_137;
              }
            }
            if (v92 == v91)
            {
LABEL_137:
              *(unsigned char *)(v90 + v89) = v92;
              unint64_t v93 = *((unsigned int *)a1 + 162);
              if (v93 >= *((unsigned int *)a1 + 163)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(a1[80] + 4 * v93) = v89;
              ++*((_DWORD *)a1 + 162);
            }
          }
          int v94 = (unsigned __int16)v87[1];
          ++v87;
          unsigned __int16 v88 = v94 + v89;
        }
        while (v94);
      }
      if (v48 != FirstTerminator)
      {
        __int16 v95 = *(_WORD *)(v48 + 44);
        uint64_t v96 = *(void *)(*(void *)(v48 + 16) + 8);
        if ((v95 & 0xC) == 0 || (v95 & 4) != 0)
        {
          if ((v96 & 0x200) != 0) {
            continue;
          }
        }
        else
        {
          unint64_t v97 = v48;
          if ((v96 & 0x200) != 0) {
            continue;
          }
          while ((*(_WORD *)(v97 + 44) & 8) != 0)
          {
            unint64_t v97 = *(void *)(v97 + 8);
            if ((*(unsigned char *)(*(void *)(v97 + 16) + 9) & 2) != 0) {
              goto LABEL_153;
            }
          }
        }
      }
      if (!*((_DWORD *)a1 + 162))
      {
        a1[88] = v48;
        uint64_t v19 = 1;
        goto LABEL_163;
      }
LABEL_153:
      ;
    }
    while (v48 != v49);
  }
  uint64_t v19 = 0;
LABEL_163:
  if ((_OWORD *)v101 != v102) {
    free((void *)v101);
  }
  return v19;
}

void sub_1CC29557C(uint64_t *a1, uint64_t a2, int a3)
{
  v6 = (llvm::MachineBasicBlock *)a1[5];
  if (v6 != (llvm::MachineBasicBlock *)a1[4])
  {
    if (a3)
    {
      sub_1CC2969BC(a1, (llvm::MachineBasicBlock *)a1[5], 0);
      v6 = (llvm::MachineBasicBlock *)a1[5];
    }
    uint64_t v7 = (llvm::MachineBasicBlock *)a1[3];
    uint64_t v8 = (unint64_t *)a1[88];
    uint64_t v9 = (unint64_t *)*((void *)v6 + 7);
    unint64_t FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(v6);
    if (v9 != FirstTerminator && v8 != FirstTerminator)
    {
      if (v7 != v6)
      {
        unint64_t v118 = *((void *)v7 + 5);
        v119 = v9;
        do
        {
          v119[3] = v118;
          v119 = (unint64_t *)v119[1];
        }
        while (v119 != FirstTerminator);
      }
      unint64_t v12 = *FirstTerminator;
      unint64_t v13 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
      unint64_t v14 = *v9 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v14 + 8) = FirstTerminator;
      *unint64_t FirstTerminator = v14 | v12 & 7;
      unint64_t v15 = *v8 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v13 + 8) = v8;
      *uint64_t v9 = v15 | *v9 & 7;
      *(void *)(v15 + 8) = v9;
      *uint64_t v8 = v12 & 0xFFFFFFFFFFFFFFF8 | *v8 & 7;
    }
  }
  v16 = (llvm::MachineBasicBlock *)a1[6];
  if (v16 != (llvm::MachineBasicBlock *)a1[4])
  {
    if (a3)
    {
      sub_1CC2969BC(a1, (llvm::MachineBasicBlock *)a1[6], 1);
      v16 = (llvm::MachineBasicBlock *)a1[6];
    }
    int v17 = (llvm::MachineBasicBlock *)a1[3];
    v18 = (unint64_t *)a1[88];
    uint64_t v19 = (unint64_t *)*((void *)v16 + 7);
    v20 = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(v16);
    if (v19 != v20 && v18 != v20)
    {
      if (v17 != v16)
      {
        unint64_t v120 = *((void *)v17 + 5);
        v121 = v19;
        do
        {
          v121[3] = v120;
          v121 = (unint64_t *)v121[1];
        }
        while (v121 != v20);
      }
      unint64_t v22 = *v20;
      unint64_t v23 = *v20 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v24 = *v19 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v24 + 8) = v20;
      unint64_t *v20 = v24 | v22 & 7;
      unint64_t v25 = *v18 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v23 + 8) = v18;
      *uint64_t v19 = v25 | *v19 & 7;
      *(void *)(v25 + 8) = v19;
      unint64_t *v18 = v22 & 0xFFFFFFFFFFFFFFF8 | *v18 & 7;
    }
  }
  uint64_t v26 = (*(void *)(a1[4] + 72) - *(void *)(a1[4] + 64)) & 0x7FFFFFFF8;
  unint64_t v27 = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)a1[3]);
  v28 = (void *)v27;
  uint64_t v124 = v26;
  uint64_t v125 = a2;
  if (v26 != 16)
  {
    uint64_t v56 = *(unsigned __int8 **)(v27 + 56);
    v129 = v56;
    if (v56) {
      llvm::MetadataTracking::track((uint64_t)&v129, v56, 2);
    }
    uint64_t v57 = *((unsigned int *)a1 + 16);
    if (v57)
    {
      uint64_t v58 = 0;
      uint64_t v127 = *((unsigned int *)a1 + 16);
      do
      {
        uint64_t v59 = (char **)(a1[7] + 32 * v58);
        v60 = (unsigned int *)(v59 + 1);
        if (sub_1CC296B70(a1[2], *a1, *((_DWORD *)v59 + 2), *((_DWORD *)v59 + 3)))
        {
          unsigned int IncompleteVirtualRegister = *v60;
        }
        else
        {
          uint64_t v62 = a1[2];
          unint64_t v63 = *(void *)(*(void *)(v62 + 24) + 16 * (*(_DWORD *)(*((void *)*v59 + 4) + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v62, "", 0);
          *(void *)(*(void *)(v62 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v63;
          uint64_t v64 = *(void *)(v62 + 8);
          if (v64) {
            (*(void (**)(uint64_t, void))(*(void *)v64 + 24))(v64, IncompleteVirtualRegister);
          }
          (*(void (**)(uint64_t, uint64_t, void *, unsigned __int8 **, void, uint64_t, void, void, void))(*(void *)*a1 + 376))(*a1, a1[3], v28, &v129, IncompleteVirtualRegister, a1[41], *((unsigned int *)a1 + 84), *v60, *((unsigned int *)v59 + 3));
          uint64_t v57 = v127;
        }
        LODWORD(v65) = *((_DWORD *)*v59 + 10);
        while (v65 != 1)
        {
          uint64_t v66 = a1[4];
          uint64_t v67 = a1[5];
          if (v67 == v66) {
            uint64_t v67 = a1[3];
          }
          uint64_t v68 = (v65 - 1);
          uint64_t v69 = *((void *)*v59 + 4) + 32 * v68;
          uint64_t v72 = *(void *)(v69 + 16);
          v71 = (void *)(v69 + 16);
          uint64_t v70 = v72;
          if (v72 == v67)
          {
            void *v71 = a1[3];
            uint64_t v65 = (v65 - 2);
            llvm::MachineOperand::setReg(*((void *)*v59 + 4) + 32 * v65, IncompleteVirtualRegister);
          }
          else
          {
            uint64_t v73 = a1[6];
            if (v73 == v66) {
              uint64_t v73 = a1[3];
            }
            if (v70 == v73)
            {
              llvm::MachineInstr::removeOperand(*v59, v68);
              LODWORD(v65) = v65 - 2;
              llvm::MachineInstr::removeOperand(*v59, v65);
            }
            else
            {
              LODWORD(v65) = v65 - 2;
            }
          }
        }
        ++v58;
      }
      while (v58 != v57);
    }
    if (!v129) {
      goto LABEL_95;
    }
    int v78 = *v129;
    if ((v78 - 4) > 0x1E)
    {
      if ((v78 - 3) >= 0xFFFFFFFE) {
        v116 = v129;
      }
      else {
        v116 = 0;
      }
      if ((v78 - 3) < 0xFFFFFFFE)
      {
        if (v78 == 3) {
          *((void *)v129 + 1) = 0;
        }
        goto LABEL_95;
      }
      unint64_t v117 = (unint64_t)(v116 + 8);
    }
    else
    {
      if ((v129[1] & 0x7F) != 2 && !*((_DWORD *)v129 + 3)) {
        goto LABEL_95;
      }
      uint64_t v123 = *((void *)v129 + 2);
      if ((v123 & 4) == 0) {
        goto LABEL_95;
      }
      unint64_t v117 = v123 & 0xFFFFFFFFFFFFFFF8;
      if (!v117) {
        goto LABEL_95;
      }
    }
    v130 = &v129;
    sub_1CC5FA668(v117 + 16, &v130);
LABEL_95:
    uint64_t v74 = v125;
    goto LABEL_96;
  }
  long long v29 = *(unsigned __int8 **)(v27 + 56);
  v128 = v29;
  if (v29) {
    llvm::MetadataTracking::track((uint64_t)&v128, v29, 2);
  }
  uint64_t v30 = *((unsigned int *)a1 + 16);
  if (v30)
  {
    uint64_t v31 = 0;
    uint64_t v126 = *((unsigned int *)a1 + 16);
    while (1)
    {
      uint64_t v32 = (llvm::MachineInstr **)(a1[7] + 32 * v31);
      uint64_t v33 = *(unsigned int *)(*((void *)*v32 + 4) + 4);
      uint64_t v34 = (unsigned int *)(v32 + 1);
      if (sub_1CC296B70(a1[2], *a1, *((_DWORD *)v32 + 2), *((_DWORD *)v32 + 3))) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, void *, unsigned __int8 **, uint64_t, uint64_t, void, void, void))(*(void *)*a1 + 376))(*a1, a1[3], v28, &v128, v33, a1[41], *((unsigned int *)a1 + 84), *v34, *((unsigned int *)v32 + 3));
LABEL_33:
      llvm::MachineInstr::eraseFromParent(*v32);
      *uint64_t v32 = 0;
      if (++v31 == v30) {
        goto LABEL_84;
      }
    }
    uint64_t v35 = a1[3];
    uint64_t v36 = *(void *)(*a1 + 8);
    v37 = *(llvm::MachineFunction **)(v35 + 32);
    v129 = v128;
    if (v128) {
      llvm::MetadataTracking::track((uint64_t)&v129, v128, 2);
    }
    uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v37, v36 + 912, &v129, 0);
    if (v129)
    {
      int v52 = *v129;
      if ((v52 - 4) > 0x1E)
      {
        if ((v52 - 3) >= 0xFFFFFFFE) {
          uint64_t v55 = v129;
        }
        else {
          uint64_t v55 = 0;
        }
        if ((v52 - 3) < 0xFFFFFFFE)
        {
          if (v52 == 3) {
            *((void *)v129 + 1) = 0;
          }
          goto LABEL_28;
        }
        unint64_t v54 = (unint64_t)(v55 + 8);
      }
      else
      {
        if ((v129[1] & 0x7F) != 2 && !*((_DWORD *)v129 + 3)) {
          goto LABEL_28;
        }
        uint64_t v53 = *((void *)v129 + 2);
        if ((v53 & 4) == 0) {
          goto LABEL_28;
        }
        unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF8;
        if (!v54) {
          goto LABEL_28;
        }
      }
      v130 = &v129;
      sub_1CC5FA668(v54 + 16, &v130);
    }
LABEL_28:
    uint64_t v39 = *(void *)(v35 + 40);
    *((void *)v38 + 3) = v39;
    uint64_t v40 = *(void *)(v39 + 32);
    uint64_t v41 = *((unsigned int *)v38 + 10);
    if (v41)
    {
      uint64_t v45 = *((void *)v38 + 4);
      uint64_t v46 = *(void *)(v40 + 40);
      uint64_t v47 = 32 * v41;
      do
      {
        if (!*(unsigned char *)v45)
        {
          uint64_t v48 = *(unsigned int *)(v45 + 4);
          if ((int)v48 >= 0) {
            uint64_t v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v48);
          }
          else {
            uint64_t v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
          }
          uint64_t v50 = *v49;
          if (*v49)
          {
            uint64_t v51 = *(void *)(v50 + 16);
            *(void *)(v50 + 16) = v45;
            *(void *)(v45 + 16) = v51;
            if (*(unsigned char *)(v45 + 3))
            {
              *(void *)(v45 + 24) = v50;
            }
            else
            {
              *(void *)(v45 + 24) = 0;
              uint64_t v49 = (uint64_t *)(v51 + 24);
            }
          }
          else
          {
            *(void *)(v45 + 16) = v45;
            *(void *)(v45 + 24) = 0;
          }
          *uint64_t v49 = v45;
        }
        v45 += 32;
        v47 -= 32;
      }
      while (v47);
    }
    uint64_t v42 = *(void *)(v40 + 728);
    if (v42) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v42 + 24))(v42, v38);
    }
    unint64_t v43 = *v28 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v38 = v43 | *(void *)v38 & 7;
    *((void *)v38 + 1) = v28;
    *(void *)(v43 + 8) = v38;
    void *v28 = *v28 & 7 | (unint64_t)v38;
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    LODWORD(v130) = 0x1000000;
    HIDWORD(v130) = v33;
    llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v130);
    int v44 = *v34;
    uint64_t v131 = 0;
    LODWORD(v130) = 0;
    HIDWORD(v130) = v44;
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v130);
    uint64_t v30 = v126;
    goto LABEL_33;
  }
LABEL_84:
  uint64_t v74 = v125;
  if (v128)
  {
    int v75 = *v128;
    if ((v75 - 4) > 0x1E)
    {
      if ((v75 - 3) >= 0xFFFFFFFE) {
        v115 = v128;
      }
      else {
        v115 = 0;
      }
      if ((v75 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v77 = (unint64_t)(v115 + 8);
LABEL_135:
        v130 = &v128;
        sub_1CC5FA668(v77 + 16, &v130);
        goto LABEL_96;
      }
      if (v75 == 3) {
        *((void *)v128 + 1) = 0;
      }
    }
    else if ((v128[1] & 0x7F) == 2 || *((_DWORD *)v128 + 3))
    {
      uint64_t v76 = *((void *)v128 + 2);
      if ((v76 & 4) != 0)
      {
        unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFF8;
        if (v77) {
          goto LABEL_135;
        }
      }
    }
  }
LABEL_96:
  llvm::MachineBasicBlock::removeSuccessor((llvm::MachineBasicBlock *)a1[3], (llvm::MachineBasicBlock *)a1[5], 0);
  llvm::MachineBasicBlock::removeSuccessor((llvm::MachineBasicBlock *)a1[3], (llvm::MachineBasicBlock *)a1[6], 1);
  uint64_t v79 = (llvm::MachineBasicBlock *)a1[4];
  uint64_t v80 = (llvm::MachineBasicBlock *)a1[5];
  if (v80 != v79)
  {
    llvm::MachineBasicBlock::removeSuccessor((llvm::MachineBasicBlock *)a1[5], v79, 1);
    uint64_t v80 = (llvm::MachineBasicBlock *)a1[4];
  }
  v81 = (llvm::MachineBasicBlock *)a1[6];
  if (v81 != v80) {
    llvm::MachineBasicBlock::removeSuccessor(v81, v80, 1);
  }
  int v82 = *(unsigned __int8 **)(llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)a1[3]) + 56);
  v129 = v82;
  if (v82) {
    llvm::MetadataTracking::track((uint64_t)&v129, v82, 2);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 264))(*a1, a1[3], 0);
  unsigned int v83 = (unint64_t *)a1[5];
  if (v83 != (unint64_t *)a1[4])
  {
    unsigned int v84 = *(_DWORD *)(v74 + 8);
    if (v84 >= *(_DWORD *)(v74 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v74 + 8 * v84) = v83;
    ++*(_DWORD *)(v74 + 8);
    uint64_t v85 = a1[5];
    uint64_t v86 = *(void *)(v85 + 32);
    int v87 = v86 + 320;
    *(void *)(*(void *)(v86 + 104) + 8 * *(unsigned int *)(v85 + 24)) = 0;
    *(_DWORD *)(v85 + 24) = -1;
    uint64_t v88 = *(void *)v85;
    uint64_t v89 = *(void **)(v85 + 8);
    *uint64_t v89 = *(void *)v85;
    *(void *)(v88 + 8) = v89;
    *(void *)uint64_t v85 = 0;
    *(void *)(v85 + 8) = 0;
    llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v87, (llvm::MachineBasicBlock *)v85);
    unsigned int v83 = (unint64_t *)a1[4];
  }
  uint64_t v90 = (unint64_t *)a1[6];
  if (v90 != v83)
  {
    unsigned int v91 = *(_DWORD *)(v74 + 8);
    if (v91 >= *(_DWORD *)(v74 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v74 + 8 * v91) = v90;
    ++*(_DWORD *)(v74 + 8);
    uint64_t v92 = a1[6];
    uint64_t v93 = *(void *)(v92 + 32);
    int v94 = v93 + 320;
    *(void *)(*(void *)(v93 + 104) + 8 * *(unsigned int *)(v92 + 24)) = 0;
    *(_DWORD *)(v92 + 24) = -1;
    uint64_t v95 = *(void *)v92;
    uint64_t v96 = *(void **)(v92 + 8);
    *uint64_t v96 = *(void *)v92;
    *(void *)(v95 + 8) = v96;
    *(void *)uint64_t v92 = 0;
    *(void *)(v92 + 8) = 0;
    llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v94, (llvm::MachineBasicBlock *)v92);
    unsigned int v83 = (unint64_t *)a1[4];
  }
  uint64_t v97 = a1[3];
  if (v124 == 16 && *(unint64_t **)(v97 + 8) == v83)
  {
    if ((unint64_t *)v97 != v83)
    {
      v98 = v83 + 6;
      uint64_t v99 = (unint64_t *)v83[7];
      if (v99 != v83 + 6)
      {
        unint64_t v100 = *(void *)(v97 + 40);
        long long v101 = (unint64_t *)v83[7];
        do
        {
          v101[3] = v100;
          long long v101 = (unint64_t *)v101[1];
        }
        while (v101 != v98);
        unint64_t v102 = *v98;
        unint64_t v103 = *v98 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v104 = *v99 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v104 + 8) = v98;
        unint64_t *v98 = v104 | v102 & 7;
        unint64_t v105 = *(void *)(v97 + 48) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v103 + 8) = v97 + 48;
        *uint64_t v99 = v105 | *v99 & 7;
        *(void *)(v105 + 8) = v99;
        *(void *)(v97 + 48) = v102 & 0xFFFFFFFFFFFFFFF8 | *(void *)(v97 + 48) & 7;
      }
    }
    llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v97, (llvm::MachineBasicBlock *)v83);
    unsigned int v106 = *(_DWORD *)(v74 + 8);
    if (v106 >= *(_DWORD *)(v74 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v74 + 8 * v106) = a1[4];
    ++*(_DWORD *)(v74 + 8);
    uint64_t v107 = a1[4];
    uint64_t v108 = *(void *)(v107 + 32);
    int v109 = v108 + 320;
    *(void *)(*(void *)(v108 + 104) + 8 * *(unsigned int *)(v107 + 24)) = 0;
    *(_DWORD *)(v107 + 24) = -1;
    uint64_t v110 = *(void *)v107;
    v111 = *(void **)(v107 + 8);
    void *v111 = *(void *)v107;
    *(void *)(v110 + 8) = v111;
    *(void *)uint64_t v107 = 0;
    *(void *)(v107 + 8) = 0;
    llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v109, (llvm::MachineBasicBlock *)v107);
  }
  else
  {
    v130 = &v132;
    uint64_t v131 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, void, uint64_t *, void, unsigned __int8 **, void))(*(void *)*a1 + 272))(*a1, v97, v83, 0, &v132, 0, &v129, 0);
    llvm::MachineBasicBlock::addSuccessor((void *)a1[3], (void *)a1[4], -1);
    if (v130 != &v132) {
      free(v130);
    }
  }
  if (v129)
  {
    int v112 = *v129;
    if ((v112 - 4) > 0x1E)
    {
      if ((v112 - 3) >= 0xFFFFFFFE) {
        v113 = v129;
      }
      else {
        v113 = 0;
      }
      if ((v112 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v114 = (unint64_t)(v113 + 8);
LABEL_129:
        v130 = &v129;
        sub_1CC5FA668(v114 + 16, &v130);
        return;
      }
      if (v112 == 3) {
        *((void *)v129 + 1) = 0;
      }
    }
    else if ((v129[1] & 0x7F) == 2 || *((_DWORD *)v129 + 3))
    {
      uint64_t v122 = *((void *)v129 + 2);
      if ((v122 & 4) != 0)
      {
        unint64_t v114 = v122 & 0xFFFFFFFFFFFFFFF8;
        if (v114) {
          goto LABEL_129;
        }
      }
    }
  }
}

void ***sub_1CC2960C8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  result = llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
  uint64_t v9 = *(void *)(a1 + 1320);
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v11 = *(unsigned int *)(v9 + 40);
  if (v11)
  {
    LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v13 = (uint64_t *)(v10 + 16 * v12);
    uint64_t v14 = *v13;
    if (*v13 == a2) {
      goto LABEL_8;
    }
    int v15 = 1;
    while (v14 != -4096)
    {
      int v16 = v12 + v15++;
      uint64_t v12 = v16 & (v11 - 1);
      uint64_t v14 = *(void *)(v10 + 16 * v12);
      if (v14 == a2)
      {
        unint64_t v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_8;
      }
    }
  }
  unint64_t v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_8:
  if (v13 == (uint64_t *)(v10 + 16 * v11))
  {
    if (a4)
    {
LABEL_10:
      uint64_t v17 = *a3;
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
      uint64_t v18 = *(void *)(a1 + 1320);
      uint64_t v19 = *(void *)(v18 + 24);
      uint64_t v20 = *(unsigned int *)(v18 + 40);
      if (v20)
      {
        LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        unint64_t v22 = (uint64_t *)(v19 + 16 * v21);
        uint64_t v23 = *v22;
        if (*v22 != v17)
        {
          int v24 = 1;
          do
          {
            if (v23 == -4096) {
              goto LABEL_16;
            }
            int v25 = v21 + v24++;
            uint64_t v21 = v25 & (v20 - 1);
            uint64_t v23 = *(void *)(v19 + 16 * v21);
          }
          while (v23 != v17);
          unint64_t v22 = (uint64_t *)(v19 + 16 * v21);
        }
      }
      else
      {
LABEL_16:
        unint64_t v22 = (uint64_t *)(v19 + 16 * v20);
      }
      if (*(_DWORD *)(v22[1] + 32))
      {
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
        *(unsigned char *)(*(void *)(a1 + 1320) + 64) = 0;
        llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom();
      }
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::eraseNode();
    }
  }
  else if (a4)
  {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1CC296260(void *a1, llvm::MachineBasicBlock *this)
{
  if (*((void *)this + 19) != *((void *)this + 20)) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v4 == FirstTerminator) {
    return 1;
  }
  unint64_t v6 = FirstTerminator;
  int v7 = 0;
  while (1)
  {
    int v8 = **(unsigned __int16 **)(v4 + 16);
    if ((v8 - 13) >= 5)
    {
      if (++v7 > dword_1EBCCB330 && byte_1EBCCB3F0 == 0) {
        return 0;
      }
      uint64_t result = 0;
      if (!**(_WORD **)(v4 + 16)) {
        break;
      }
      if (v8 == 69) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 832))(*a1, v4);
      if (!result) {
        break;
      }
      if ((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 768))(*a1, v4)) {
        return 0;
      }
      uint64_t result = sub_1CC296514((uint64_t)a1, *(int **)(v4 + 32), *(_DWORD *)(v4 + 40));
      if (!result) {
        break;
      }
    }
    if ((*(unsigned char *)v4 & 4) == 0)
    {
      while ((*(_WORD *)(v4 + 44) & 8) != 0)
        uint64_t v4 = *(void *)(v4 + 8);
    }
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v6) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CC2963B0(uint64_t a1, llvm::MachineBasicBlock *this)
{
  if (*((void *)this + 19) != *((void *)this + 20)) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v4 == FirstTerminator) {
    return 1;
  }
  unint64_t v6 = FirstTerminator;
  int v7 = 0;
  while (1)
  {
    int v8 = *(unsigned __int16 **)(v4 + 16);
    int v9 = *v8;
    if ((v9 - 13) >= 5)
    {
      if (++v7 > dword_1EBCCB330 && byte_1EBCCB3F0 == 0) {
        return 0;
      }
      uint64_t result = 0;
      if (!*v8 || v9 == 69) {
        break;
      }
      if ((v9 - 1) <= 1 && (*(unsigned char *)(*(void *)(v4 + 32) + 48) & 8) != 0) {
        return 0;
      }
      __int16 v11 = *(_WORD *)(v4 + 44);
      uint64_t v12 = *((void *)v8 + 1);
      if ((v11 & 0xC) != 0 && (v11 & 4) == 0)
      {
        uint64_t v13 = v4;
        if ((v12 & 0x80000) != 0) {
          return 0;
        }
        while ((*(_WORD *)(v13 + 44) & 8) != 0)
        {
          uint64_t result = 0;
          uint64_t v13 = *(void *)(v13 + 8);
          if ((*(unsigned char *)(*(void *)(v13 + 16) + 10) & 8) != 0) {
            return result;
          }
        }
      }
      else if ((v12 & 0x80000) != 0)
      {
        return 0;
      }
      BOOL v14 = 1;
      if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v4, 0, &v14)) {
        return 0;
      }
      uint64_t result = sub_1CC296514(a1, *(int **)(v4 + 32), *(_DWORD *)(v4 + 40));
      if (!result) {
        break;
      }
    }
    if ((*(unsigned char *)v4 & 4) == 0)
    {
      while ((*(_WORD *)(v4 + 44) & 8) != 0)
        uint64_t v4 = *(void *)(v4 + 8);
    }
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v6) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CC296514(uint64_t a1, int *a2, int a3)
{
  if (!a3) {
    return 1;
  }
  v3 = a2;
  v5 = &a2[8 * a3];
  unint64_t v6 = (llvm::SmallPtrSetImplBase *)(a1 + 472);
  while (1)
  {
    int v7 = *v3;
    if (*v3)
    {
      if (*v3 == 12) {
        return 0;
      }
      goto LABEL_59;
    }
    unsigned int v8 = v3[1];
    if ((v7 & 0x1000000) != 0 && v8 - 1 <= 0x3FFFFFFE)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9) {
        uint64_t v10 = (void *)(v9 + 8);
      }
      else {
        uint64_t v10 = 0;
      }
      unint64_t v11 = *(unsigned int *)(*v10 + 24 * v8 + 16);
      uint64_t v12 = (unsigned __int16 *)(v10[6] + ((v11 >> 3) & 0x1FFFFFFE));
      int v14 = *v12;
      uint64_t v13 = v12 + 1;
      int v15 = v14 + (v11 & 0xF) * v8;
      uint64_t v16 = *(void *)(a1 + 568);
      do
      {
        *(void *)(v16 + 8 * ((unsigned __int16)v15 >> 6)) |= 1 << v15;
        int v17 = *v13++;
        v15 += v17;
      }
      while (v17);
      int v7 = *v3;
    }
    if ((v7 & 0x30000000) != 0 || (v7 & 0x1000000) != 0 && (v7 & 0xFFF00) == 0) {
      goto LABEL_59;
    }
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_59;
    }
    uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 16) + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
    if (!v18) {
      goto LABEL_59;
    }
    if ((*(unsigned char *)(v18 + 3) & 1) == 0)
    {
      uint64_t v18 = *(void *)(v18 + 24);
      if (!v18 || (*(unsigned char *)(v18 + 3) & 1) == 0) {
        goto LABEL_59;
      }
    }
    uint64_t v19 = *(void *)(v18 + 8);
    if (!v19 || *(void *)(v19 + 24) != *(void *)(a1 + 24)) {
      goto LABEL_59;
    }
    uint64_t v20 = *(void *)(a1 + 480);
    uint64_t v21 = *(unsigned int *)(a1 + 492);
    if (v20 != *(void *)(a1 + 472))
    {
      unsigned int v25 = *(_DWORD *)(a1 + 488);
      goto LABEL_33;
    }
    if (!v21)
    {
LABEL_30:
      unsigned int v25 = *(_DWORD *)(a1 + 488);
      if (v21 < v25)
      {
        *(_DWORD *)(a1 + 492) = v21 + 1;
        *(void *)(v20 + 8 * v21) = v19;
        goto LABEL_54;
      }
LABEL_33:
      if (3 * v25 <= 4 * ((int)v21 - *(_DWORD *)(a1 + 496)))
      {
        if (v25 >= 0x40) {
          v25 *= 2;
        }
        else {
          unsigned int v25 = 128;
        }
      }
      else if (v25 - v21 >= v25 >> 3)
      {
        goto LABEL_35;
      }
      llvm::SmallPtrSetImplBase::Grow(v6, v25);
      unsigned int v25 = *(_DWORD *)(a1 + 488);
      uint64_t v20 = *(void *)(a1 + 480);
LABEL_35:
      unsigned int v26 = v25 - 1;
      unsigned int v27 = (v25 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      v28 = (void *)(v20 + 8 * v27);
      uint64_t v29 = *v28;
      if (*v28 == -1)
      {
        uint64_t v30 = 0;
LABEL_47:
        if (v30) {
          uint64_t v34 = v30;
        }
        else {
          uint64_t v34 = v28;
        }
        if (*v34 != v19)
        {
          if (*v34 == -2) {
            --*(_DWORD *)(a1 + 496);
          }
          else {
            ++*(_DWORD *)(a1 + 492);
          }
          *uint64_t v34 = v19;
        }
      }
      else
      {
        uint64_t v30 = 0;
        int v31 = 1;
        while (v29 != v19)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -2;
          }
          if (v32) {
            uint64_t v30 = v28;
          }
          unsigned int v33 = v27 + v31++;
          unsigned int v27 = v33 & v26;
          v28 = (void *)(v20 + 8 * (v33 & v26));
          uint64_t v29 = *v28;
          if (*v28 == -1) {
            goto LABEL_47;
          }
        }
      }
      goto LABEL_54;
    }
    unint64_t v22 = 0;
    uint64_t v23 = 8 * v21;
    int v24 = *(void **)(a1 + 480);
    while (*v24 != v19)
    {
      if (*v24 == -2) {
        unint64_t v22 = v24;
      }
      ++v24;
      v23 -= 8;
      if (!v23)
      {
        if (!v22) {
          goto LABEL_30;
        }
        void *v22 = v19;
        --*(_DWORD *)(a1 + 496);
        break;
      }
    }
LABEL_54:
    uint64_t v35 = *(void *)(*(void *)(v19 + 16) + 8);
    if ((*(_WORD *)(v19 + 44) & 0xC) != 0 && (*(_WORD *)(v19 + 44) & 4) == 0) {
      break;
    }
    if ((v35 & 0x200) != 0) {
      return 0;
    }
LABEL_59:
    v3 += 8;
    if (v3 == v5) {
      return 1;
    }
  }
  if ((v35 & 0x200) == 0)
  {
    while ((*(_WORD *)(v19 + 44) & 8) != 0)
    {
      uint64_t result = 0;
      uint64_t v19 = *(void *)(v19 + 8);
      if ((*(unsigned char *)(*(void *)(v19 + 16) + 9) & 2) != 0) {
        return result;
      }
    }
    goto LABEL_59;
  }
  return 0;
}

uint64_t sub_1CC296830(uint64_t a1, char *__s, unsigned int a3)
{
  if (__s) {
    std::string::size_type v6 = strlen(__s);
  }
  else {
    std::string::size_type v6 = 0;
  }
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v13, __s, v6, a3);
  uint64_t v7 = sub_1CD3D6290(a1, (long long *)&v13);
  int32x2_t v8 = vdup_n_s32(a3 == 1);
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  int8x16_t v10 = (int8x16_t)vdupq_n_s64(7uLL);
  v10.i64[0] = (uint64_t)" cycles";
  int8x16_t v11 = (int8x16_t)vdupq_n_s64(6uLL);
  v11.i64[0] = (uint64_t)" cycle";
  int8x16_t v16 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v9, 0x3FuLL)), v11, v10);
  sub_1CC59ADEC((uint64_t *)(v7 + 80), (uint64_t)&v16);
  if (v15 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v7;
}

uint64_t sub_1CC296918(uint64_t a1)
{
  *(void *)a1 = &unk_1F2616800;
  unsigned int v2 = *(char **)(a1 + 80);
  uint64_t v3 = *(unsigned int *)(a1 + 88);
  if (v3)
  {
    uint64_t v4 = v3 << 6;
    do
    {
      v5 = (void **)&v2[v4];
      if (v2[v4 - 17] < 0) {
        operator delete(*(v5 - 5));
      }
      if (*((char *)v5 - 41) < 0) {
        operator delete(*(v5 - 8));
      }
      v4 -= 64;
    }
    while (v4);
    unsigned int v2 = *(char **)(a1 + 80);
  }
  if (v2 != (char *)(a1 + 96)) {
    free(v2);
  }
  return a1;
}

void sub_1CC2969BC(void *a1, llvm::MachineBasicBlock *this, int a3)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = v14;
  uint64_t v13 = 0x400000000;
  unsigned int v6 = *((_DWORD *)a1 + 84);
  uint64_t v7 = (void **)(a1 + 41);
  if (v6) {
    BOOL v8 = &v12 == v7;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (v6 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v14, *v7, 32 * v6);
    LODWORD(v13) = v6;
  }
  if (a3) {
    (*(void (**)(void, void **))(*(void *)*a1 + 728))(*a1, &v12);
  }
  uint64_t v9 = *((void *)this + 7);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v9 != FirstTerminator)
  {
    unint64_t v11 = FirstTerminator;
    do
    {
      if (**(unsigned __int16 **)(v9 + 16) - 13 >= 5) {
        (*(void (**)(void, uint64_t, void *, void))(*(void *)*a1 + 808))(*a1, v9, v12, v13);
      }
      if ((*(unsigned char *)v9 & 4) == 0)
      {
        while ((*(_WORD *)(v9 + 44) & 8) != 0)
          uint64_t v9 = *(void *)(v9 + 8);
      }
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9 != v11);
  }
  if (v12 != v14) {
    free(v12);
  }
}

uint64_t sub_1CC296B70(uint64_t a1, uint64_t a2, unsigned int a3, signed int a4)
{
  if (a3 == a4) {
    return 1;
  }
  if ((a3 & 0x80000000 & a4) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 272);
  if ((a3 & 0x80000000) != 0) {
    uint64_t v9 = (uint64_t *)(v7 + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v9 = (uint64_t *)(v8 + 8 * a3);
  }
  uint64_t v10 = *v9;
  if (v10 && ((*(unsigned char *)(v10 + 3) & 1) != 0 || (uint64_t v41 = *(void *)(v10 + 24)) != 0 && (*(unsigned char *)(v41 + 3) & 1) != 0))
  {
    if ((a3 & 0x80000000) != 0) {
      int8x16_t v16 = (uint64_t *)(v7 + 16 * (a3 & 0x7FFFFFFF) + 8);
    }
    else {
      int8x16_t v16 = (uint64_t *)(v8 + 8 * a3);
    }
    uint64_t v17 = *v16;
    if (v17)
    {
      if ((*(unsigned char *)(v17 + 3) & 1) == 0)
      {
        uint64_t v17 = *(void *)(v17 + 24);
        if (v17)
        {
          if ((*(unsigned char *)(v17 + 3) & 1) == 0) {
            uint64_t v17 = 0;
          }
        }
      }
    }
    uint64_t v18 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v17 = *(void *)(v17 + 24);
      if (!v17 || (*(unsigned char *)(v17 + 3) & 1) == 0) {
        break;
      }
      uint64_t v11 = 0;
      if (*(void *)(v17 + 8) != v18) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = v18;
  }
  else
  {
    uint64_t v11 = 0;
  }
LABEL_9:
  uint64_t v12 = (uint64_t *)(v7 + 16 * (a4 & 0x7FFFFFFF) + 8);
  uint64_t v13 = (uint64_t *)(v8 + 8 * a4);
  if (a4 < 0) {
    int v14 = v12;
  }
  else {
    int v14 = v13;
  }
  uint64_t v15 = *v14;
  if (!v15) {
    return 0;
  }
  if ((*(unsigned char *)(v15 + 3) & 1) == 0)
  {
    uint64_t v42 = *(void *)(v15 + 24);
    if (!v42 || (*(unsigned char *)(v42 + 3) & 1) == 0) {
      return 0;
    }
  }
  if (a4 >= 0) {
    uint64_t v12 = v13;
  }
  uint64_t v21 = *v12;
  if (v21)
  {
    if ((*(unsigned char *)(v21 + 3) & 1) == 0)
    {
      uint64_t v21 = *(void *)(v21 + 24);
      if (v21)
      {
        if ((*(unsigned char *)(v21 + 3) & 1) == 0) {
          uint64_t v21 = 0;
        }
      }
    }
  }
  uint64_t v22 = *(void *)(v21 + 8);
  while (1)
  {
    uint64_t v21 = *(void *)(v21 + 24);
    if (!v21 || (*(unsigned char *)(v21 + 3) & 1) == 0) {
      break;
    }
    uint64_t result = 0;
    if (*(void *)(v21 + 8) != v22) {
      return result;
    }
  }
  uint64_t result = 0;
  if (v11 && v22)
  {
    unsigned int v23 = *(unsigned __int16 *)(v11 + 44);
    BOOL v38 = (v23 & 0xC) == 0;
    int v24 = (v23 >> 2) & 1;
    if (v38) {
      char v25 = 1;
    }
    else {
      char v25 = v24;
    }
    unsigned int v26 = *(unsigned __int16 **)(v11 + 16);
    uint64_t v27 = *((void *)v26 + 1);
    if (v25)
    {
      if ((v27 & 0x1000000) != 0) {
        return 0;
      }
    }
    else
    {
      if ((v27 & 0x1000000) != 0) {
        return 0;
      }
      uint64_t v43 = v11;
      uint64_t result = 0;
      while ((*(_WORD *)(v43 + 44) & 8) != 0)
      {
        uint64_t v43 = *(void *)(v43 + 8);
        if (*(unsigned char *)(*(void *)(v43 + 16) + 11)) {
          return result;
        }
      }
    }
    unsigned int v28 = *v26 - 1;
    if (v28 > 1) {
      goto LABEL_46;
    }
    uint64_t v44 = *(void *)(*(void *)(v11 + 32) + 48);
    if ((v44 & 1) == 0)
    {
      if ((v44 & 8) != 0) {
        goto LABEL_51;
      }
LABEL_46:
      if (v25)
      {
        if ((v27 & 0x80000) != 0) {
          goto LABEL_51;
        }
      }
      else
      {
        if ((v27 & 0x80000) != 0) {
          goto LABEL_51;
        }
        uint64_t v45 = v11;
        while ((*(_WORD *)(v45 + 44) & 8) != 0)
        {
          uint64_t v45 = *(void *)(v45 + 8);
          if ((*(unsigned char *)(*(void *)(v45 + 16) + 10) & 8) != 0) {
            goto LABEL_51;
          }
        }
      }
      if (v28 > 1 || (*(unsigned char *)(*(void *)(v11 + 32) + 48) & 0x10) == 0)
      {
        if (v25)
        {
          if ((v27 & 0x100000) == 0) {
            goto LABEL_53;
          }
        }
        else if ((v27 & 0x100000) == 0)
        {
          uint64_t v46 = v11;
          while ((*(_WORD *)(v46 + 44) & 8) != 0)
          {
            uint64_t v46 = *(void *)(v46 + 8);
            if ((*(unsigned char *)(*(void *)(v46 + 16) + 10) & 0x10) != 0) {
              goto LABEL_51;
            }
          }
          goto LABEL_53;
        }
      }
LABEL_51:
      uint64_t result = llvm::MachineInstr::isDereferenceableInvariantLoad((llvm::MachineInstr *)v11, 0);
      if (!result) {
        return result;
      }
      unsigned int v26 = *(unsigned __int16 **)(v11 + 16);
      uint64_t v27 = *((void *)v26 + 1);
LABEL_53:
      uint64_t v29 = *(void *)(v11 + 32);
      unsigned int v30 = *((unsigned __int8 *)v26 + 4);
      uint64_t v31 = *(unsigned int *)(v11 + 40);
      if ((v27 & 2) != 0)
      {
        if (v31 == v30)
        {
LABEL_63:
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 216))(a2, v11, v22, a1);
          if (result)
          {
            int RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v11, a3, 0, 0, 0);
            int v37 = llvm::MachineInstr::findRegisterDefOperandIdx(v22, a4, 0, 0, 0);
            BOOL v38 = RegisterDefOperandIdx == -1 || v37 == -1;
            return !v38 && RegisterDefOperandIdx == v37;
          }
          return result;
        }
        unsigned int v32 = v30;
        do
        {
          int v40 = *(_DWORD *)(v29 + 32 * v30);
          if ((v40 & 0x10000FF) != 0x1000000) {
            break;
          }
          v32 += (v40 & 0x2000000) == 0;
          if (v31 - 1 == v30) {
            break;
          }
          ++v30;
        }
        while ((v40 & 0x2000000) == 0);
      }
      else
      {
        unsigned int v32 = v30;
      }
      if (v32 != v31)
      {
        uint64_t v33 = v29 + 32 * v31;
        uint64_t v34 = v29 + 32 * v32;
        while (*(unsigned char *)v34 || (*(_DWORD *)(v34 + 4) - 1) >= 0x3FFFFFFF)
        {
          v34 += 32;
          if (v34 == v33) {
            goto LABEL_63;
          }
        }
        return 0;
      }
      goto LABEL_63;
    }
    return 0;
  }
  return result;
}

void sub_1CC296F34()
{
}

void sub_1CC2970A0(uint64_t a1)
{
  *(void *)a1 = &unk_1F260B4A0;
  free(*(void **)(a1 + 1264));
  unsigned int v2 = *(void **)(a1 + 1216);
  if (v2 != (void *)(a1 + 1232)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1144);
  if (v3 != (void *)(a1 + 1160)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 1056);
  if (v4 != *(void **)(a1 + 1048)) {
    free(v4);
  }
  v5 = *(void **)(a1 + 904);
  if (v5 != (void *)(a1 + 920)) {
    free(v5);
  }
  unsigned int v6 = *(void **)(a1 + 632);
  if (v6 != (void *)(a1 + 648)) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a1 + 456);
  if (v7 != (void *)(a1 + 472)) {
    free(v7);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v8 = *(void **)(a1 + 176);
  if (v8 != (void *)(a1 + 192)) {
    free(v8);
  }
  uint64_t v9 = *(void **)(a1 + 104);
  if (v9 != (void *)(a1 + 120)) {
    free(v9);
  }
  uint64_t v10 = *(void **)(a1 + 32);
  if (v10 != (void *)(a1 + 48)) {
    free(v10);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC2971D4(uint64_t a1)
{
  sub_1CC2970A0(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC29720C()
{
  return "Early If-predicator";
}

void sub_1CC29721C(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC2972C4(uint64_t a1, uint64_t a2)
{
  v66[4] = *MEMORY[0x1E4F143B8];
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(llvm::LLVMContextImpl *****)a2))
  {
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  unsigned int v6 = *(const llvm::TargetSubtargetInfo **)(a2 + 16);
  *(void *)(a1 + 248) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)v6 + 104))(v6);
  *(void *)(a1 + 256) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)v6 + 176))(v6);
  *(void *)(a1 + 544) = *(void *)(a2 + 40);
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(a1 + 264), v6);
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_7:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::MachineDominatorTree::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_7;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  *(void *)(a1 + 552) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::MachineDominatorTree::ID);
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)v11[3], &llvm::MachineLoopInfo::ID, 1);
  if (AnalysisPass)
  {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineLoopInfo::ID);
    uint64_t v11 = *(uint64_t **)(a1 + 8);
  }
  *(void *)(a1 + 568) = AnalysisPass;
  uint64_t v13 = *v11;
  uint64_t v14 = v11[1];
  if (*v11 == v14)
  {
LABEL_14:
    uint64_t v15 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v13 != &llvm::MachineBranchProbabilityInfo::ID)
    {
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = *(void *)(v13 + 8);
  }
  *(void *)(a1 + 560) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::MachineBranchProbabilityInfo::ID);
  int8x16_t v16 = (uint64_t *)(a1 + 576);
  sub_1CC294A8C(a1 + 576, a2);
  sub_1CD512428((uint64_t)v62, *(void ****)(a1 + 552));
  sub_1CD4BAE30((const void **)&v57, (llvm::SmallPtrSetImplBase *)v62);
  sub_1CD4BAE30((const void **)&v52, (llvm::SmallPtrSetImplBase *)&v63);
  int v4 = 0;
  while (1)
  {
    if (v60 != v55) {
      goto LABEL_27;
    }
    if (!v60) {
      break;
    }
    uint64_t v17 = v54;
    uint64_t v18 = v59;
    while (*v18 == *v17 && v18[1] == v17[1])
    {
      v18 += 2;
      v17 += 2;
      if (v18 == (void *)((char *)v59 + 16 * v60)) {
        goto LABEL_84;
      }
    }
LABEL_27:
    int v48 = v4;
    uint64_t v50 = **((void **)v59 + 2 * v60 - 2);
    if (sub_1CC294C5C(v16, v50, 1))
    {
      int v51 = 0;
      while (1)
      {
        unsigned int EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 560), *(const llvm::MachineBasicBlock **)(a1 + 600), *(const llvm::MachineBasicBlock **)(a1 + 616));
        uint64_t v21 = *(void *)(a1 + 616);
        uint64_t v22 = *(void *)(a1 + 608);
        uint64_t v23 = *(void *)(a1 + 624);
        if (v21 != v22)
        {
          if (v23 != v22)
          {
            unsigned int v49 = EdgeProbability;
            uint64_t v24 = v21 + 48;
            uint64_t v25 = *(void *)(v21 + 56);
            if (v25 == v21 + 48)
            {
              uint64_t v27 = 0;
              uint64_t v26 = 0;
            }
            else
            {
              LODWORD(v26) = 0;
              LODWORD(v27) = 0;
              do
              {
                int v28 = llvm::TargetSchedModel::computeInstrLatency((llvm::TargetSchedModel *)(a1 + 264), (const llvm::MachineInstr *)v25, 0);
                if (v28) {
                  int v29 = v28 - 1;
                }
                else {
                  int v29 = 0;
                }
                int v30 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 968))();
                if (!v25 || (*(unsigned char *)v25 & 4) == 0)
                {
                  while ((*(_WORD *)(v25 + 44) & 8) != 0)
                    uint64_t v25 = *(void *)(v25 + 8);
                }
                uint64_t v26 = (v29 + v26);
                uint64_t v27 = (v30 + v27);
                uint64_t v25 = *(void *)(v25 + 8);
              }
              while (v25 != v24);
              uint64_t v23 = *(void *)(a1 + 624);
            }
            uint64_t v40 = v23 + 48;
            uint64_t v41 = *(void *)(v23 + 56);
            if (v41 == v23 + 48)
            {
              uint64_t v43 = 0;
              uint64_t v42 = 0;
            }
            else
            {
              LODWORD(v42) = 0;
              LODWORD(v43) = 0;
              do
              {
                int v44 = llvm::TargetSchedModel::computeInstrLatency((llvm::TargetSchedModel *)(a1 + 264), (const llvm::MachineInstr *)v41, 0);
                if (v44) {
                  int v45 = v44 - 1;
                }
                else {
                  int v45 = 0;
                }
                int v46 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 968))();
                if (!v41 || (*(unsigned char *)v41 & 4) == 0)
                {
                  while ((*(_WORD *)(v41 + 44) & 8) != 0)
                    uint64_t v41 = *(void *)(v41 + 8);
                }
                uint64_t v42 = (v45 + v42);
                uint64_t v43 = (v46 + v43);
                uint64_t v41 = *(void *)(v41 + 8);
              }
              while (v41 != v40);
              uint64_t v23 = *(void *)(a1 + 624);
            }
            int v47 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 248) + 328))(*(void *)(a1 + 248), *(void *)(a1 + 616), v26, v27, v23, v42, v43, v49);
            int8x16_t v16 = (uint64_t *)(a1 + 576);
            if (!v47) {
              goto LABEL_82;
            }
            goto LABEL_74;
          }
          uint64_t v23 = *(void *)(a1 + 616);
        }
        uint64_t v31 = v16;
        uint64_t v32 = *(void *)(v23 + 56);
        unsigned int v33 = EdgeProbability;
        if (v32 == v23 + 48)
        {
          uint64_t v35 = 0;
          uint64_t v34 = 0;
        }
        else
        {
          LODWORD(v34) = 0;
          LODWORD(v35) = 0;
          do
          {
            int v36 = llvm::TargetSchedModel::computeInstrLatency((llvm::TargetSchedModel *)(a1 + 264), (const llvm::MachineInstr *)v32, 0);
            if (v36) {
              int v37 = v36 - 1;
            }
            else {
              int v37 = 0;
            }
            int v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 968))();
            if (!v32 || (*(unsigned char *)v32 & 4) == 0)
            {
              while ((*(_WORD *)(v32 + 44) & 8) != 0)
                uint64_t v32 = *(void *)(v32 + 8);
            }
            uint64_t v35 = (v37 + v35);
            uint64_t v34 = (v38 + v34);
            uint64_t v32 = *(void *)(v32 + 8);
          }
          while (v32 != v23 + 48);
        }
        char v39 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 248) + 320))(*(void *)(a1 + 248), v23, v35, v34, v33);
        int8x16_t v16 = v31;
        if ((v39 & 1) == 0) {
          goto LABEL_82;
        }
LABEL_74:
        uint64_t v64 = v66;
        uint64_t v65 = 0x400000000;
        sub_1CC29557C(v16, (uint64_t)&v64, 1);
        sub_1CC2960C8(*(void *)(a1 + 552), *(void *)(a1 + 600), v64, v65);
        if (*(void *)(a1 + 568) && v65) {
          llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock();
        }
        if (v64 != v66) {
          free(v64);
        }
        int v51 = 1;
        if ((sub_1CC294C5C(v16, v50, 1) & 1) == 0) {
          goto LABEL_82;
        }
      }
    }
    int v51 = 0;
LABEL_82:
    int v4 = v51 | v48;
    if (--v60) {
      sub_1CD4BAD50(&v57);
    }
  }
LABEL_84:
  if (v54 != &v56) {
    free(v54);
  }
  if (v53 != v52) {
    free(v53);
  }
  if (v59 != &v61) {
    free(v59);
  }
  if (v58 != v57) {
    free(v58);
  }
  sub_1CD4B9AEC(v62);
  return v4 & 1;
}

uint64_t sub_1CC2979C4()
{
  uint64_t v3 = &v2;
  int v1 = 1;
  int v2 = 30;
  *(void *)&long long v4 = "Maximum number of instructions per speculated block.";
  *((void *)&v4 + 1) = 52;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCCB2B0, "early-ifcvt-limit", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCCB2B0, &dword_1CB82C000);
  LODWORD(v3) = 1;
  *(void *)&long long v4 = "Turn all knobs to 11";
  *((void *)&v4 + 1) = 20;
  sub_1CD4C1500((uint64_t)&unk_1EBCCB370, "stress-early-ifcvt", &v3, &v4);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCB370, &dword_1CB82C000);
}

void sub_1CC297AA8()
{
}

uint64_t llvm::EdgeBundles::runOnMachineFunction(llvm::EdgeBundles *this, llvm::MachineFunction *a2)
{
  unsigned int v3 = 0;
  *((void *)this + 31) = a2;
  long long v4 = (uint64_t *)((char *)this + 256);
  *((_DWORD *)this + 66) = 0;
  *((_DWORD *)this + 76) = 0;
  uint64_t v5 = ((*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2) & 0xFFFFFFFELL;
  if (*((_DWORD *)this + 67) < v5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  while (v3 < v5)
  {
    if (v3 >= *((_DWORD *)this + 67)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*((void *)this + 32) + 4 * v3) = v3;
    unsigned int v3 = *((_DWORD *)this + 66) + 1;
    *((_DWORD *)this + 66) = v3;
  }
  uint64_t v6 = *((void *)this + 31);
  uint64_t v7 = v6 + 320;
  for (uint64_t i = *(void *)(v6 + 328); i != v7; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v9 = *(void *)(i + 88);
    uint64_t v10 = *(void *)(i + 96);
    if (v9 != v10)
    {
      uint64_t v11 = (2 * *(_DWORD *)(i + 24)) | 1u;
      uint64_t v12 = *v4;
      do
      {
        unsigned int v13 = 2 * *(_DWORD *)(*(void *)v9 + 24);
        unsigned int v14 = *(_DWORD *)(v12 + 4 * v11);
        unsigned int v15 = *(_DWORD *)(v12 + 4 * v13);
        if (v14 != v15)
        {
          unsigned int v16 = v11;
          do
          {
            if (v14 < v15)
            {
              *(_DWORD *)(v12 + 4 * v13) = v14;
              unsigned int v13 = v15;
              unsigned int v15 = *(_DWORD *)(v12 + 4 * v15);
            }
            else
            {
              *(_DWORD *)(v12 + 4 * v16) = v15;
              unsigned int v16 = v14;
              unsigned int v14 = *(_DWORD *)(v12 + 4 * v14);
            }
          }
          while (v14 != v15);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
  }
  if (!*((_DWORD *)this + 76))
  {
    uint64_t v17 = *((unsigned int *)this + 66);
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = *v4;
      do
      {
        uint64_t v20 = *(unsigned int *)(v19 + 4 * v18);
        if (v18 == v20)
        {
          int v21 = *((_DWORD *)this + 76);
          *((_DWORD *)this + 76) = v21 + 1;
        }
        else
        {
          int v21 = *(_DWORD *)(v19 + 4 * v20);
        }
        *(_DWORD *)(v19 + 4 * v18++) = v21;
      }
      while (v17 != v18);
    }
  }
  if (byte_1EBCCB4B0)
  {
    uint64_t v41 = "EdgeBundles";
    __int16 v42 = 259;
    sub_1CD512C5C((uint64_t)this, (llvm::Twine *)&v41);
  }
  uint64_t v22 = *((unsigned int *)this + 80);
  if (v22)
  {
    uint64_t v23 = *((void *)this + 39);
    uint64_t v24 = 48 * v22;
    do
    {
      uint64_t v25 = *(void **)(v23 + v24 - 48);
      if ((void *)(v23 + v24 - 32) != v25) {
        free(v25);
      }
      v24 -= 48;
    }
    while (v24);
  }
  uint64_t v26 = (void *)((char *)this + 312);
  *((_DWORD *)this + 80) = 0;
  unsigned int v27 = *((_DWORD *)this + 76);
  if (v27)
  {
    if (*((_DWORD *)this + 81) < v27) {
      sub_1CD512EB4();
    }
    uint64_t v28 = 48 * v27;
    uint64_t v29 = *v26 + 16;
    do
    {
      *(void *)(v29 - 16) = v29;
      *(void *)(v29 - 8) = 0x800000000;
      v29 += 48;
      v28 -= 48;
    }
    while (v28);
    *((_DWORD *)this + 80) = v27;
  }
  unint64_t v30 = *(void *)(*((void *)this + 31) + 112) - *(void *)(*((void *)this + 31) + 104);
  if ((v30 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v31 = 0;
    uint64_t v32 = (v30 >> 3);
    unsigned int v33 = 1;
    do
    {
      unsigned int v34 = *(_DWORD *)(*v4 + 4 * (v33 - 1));
      unsigned int v35 = *(_DWORD *)(*v4 + 4 * v33);
      uint64_t v36 = *v26 + 48 * v34;
      unint64_t v37 = *(unsigned int *)(v36 + 8);
      if (v37 >= *(unsigned int *)(v36 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v36 + 4 * v37) = v31;
      ++*(_DWORD *)(v36 + 8);
      if (v35 != v34)
      {
        uint64_t v38 = *v26 + 48 * v35;
        unint64_t v39 = *(unsigned int *)(v38 + 8);
        if (v39 >= *(unsigned int *)(v38 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)v38 + 4 * v39) = v31;
        ++*(_DWORD *)(v38 + 8);
      }
      ++v31;
      v33 += 2;
    }
    while (v32 != v31);
  }
  return 0;
}

void llvm::EdgeBundles::view(llvm::EdgeBundles *this)
{
  int v1 = "EdgeBundles";
  __int16 v2 = 259;
  sub_1CD512C5C((uint64_t)this, (llvm::Twine *)&v1);
}

void sub_1CC297F0C(uint64_t a1, uint64_t a2, llvm::Twine *this, uint64_t a4)
{
  if (*(char *)(a4 + 23) < 0) {
    uint64_t v7 = *(void *)(a4 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(a4 + 23);
  }
  int v45 = 0;
  if (v7)
  {
    __int16 v40 = 260;
    uint64_t v38 = a4;
    *(void *)&long long v43 = llvm::sys::fs::openFile((unsigned __int8 *)&v38, &v45, 0, 2, 1, 438);
    *((void *)&v43 + 1) = v8;
    uint64_t v9 = std::generic_category();
    uint64_t v38 = 17;
    unint64_t v39 = v9;
    uint64_t v10 = (llvm *)(*(uint64_t (**)(void, void, uint64_t *))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1), v43, &v38);
    if (v10
      || (uint64_t v10 = (llvm *)((uint64_t (*)(const std::error_category *, long long *, void))v39->equivalent_0)(v39, &v43, v38), v10))
    {
      unsigned int v16 = (llvm::raw_ostream *)llvm::errs(v10);
      uint64_t v17 = (void *)*((void *)v16 + 4);
      if (*((void *)v16 + 3) - (void)v17 > 0x17uLL)
      {
        qmemcpy(v17, "file exists, overwriting", 24);
        uint64_t v18 = (unsigned char *)(*((void *)v16 + 4) + 24);
        *((void *)v16 + 4) = v18;
      }
      else
      {
        unsigned int v16 = llvm::raw_ostream::write(v16, "file exists, overwriting", 0x18uLL);
        uint64_t v18 = (unsigned char *)*((void *)v16 + 4);
      }
      uint64_t v19 = (unsigned char *)*((void *)v16 + 3);
    }
    else
    {
      int v11 = v43;
      uint64_t v12 = (llvm::raw_ostream *)llvm::errs(v10);
      unsigned int v13 = (char *)*((void *)v12 + 4);
      unint64_t v14 = *((void *)v12 + 3) - (void)v13;
      if (v11)
      {
        if (v14 > 0x16)
        {
          qmemcpy(v13, "error writing into file", 23);
          unsigned int v15 = (unsigned char *)(*((void *)v12 + 4) + 23);
          *((void *)v12 + 4) = v15;
        }
        else
        {
          uint64_t v12 = llvm::raw_ostream::write(v12, "error writing into file", 0x17uLL);
          unsigned int v15 = (unsigned char *)*((void *)v12 + 4);
        }
        if (*((unsigned char **)v12 + 3) == v15)
        {
          llvm::raw_ostream::write(v12, "\n", 1uLL);
        }
        else
        {
          unsigned char *v15 = 10;
          ++*((void *)v12 + 4);
        }
        *(unsigned char *)(a1 + 23) = 0;
        *(unsigned char *)a1 = 0;
        return;
      }
      if (v14 > 0x21)
      {
        qmemcpy(v13, "writing to the newly created file ", 34);
        *((void *)v12 + 4) += 34;
      }
      else
      {
        uint64_t v12 = llvm::raw_ostream::write(v12, "writing to the newly created file ", 0x22uLL);
      }
      char v20 = *(unsigned char *)(a4 + 23);
      BOOL v21 = v20 < 0;
      if (v20 >= 0) {
        uint64_t v22 = (const char *)a4;
      }
      else {
        uint64_t v22 = *(const char **)a4;
      }
      size_t v23 = v20 & 0x7F;
      if (v21) {
        size_t v24 = *(void *)(a4 + 8);
      }
      else {
        size_t v24 = v23;
      }
      unsigned int v16 = llvm::raw_ostream::write(v12, v22, v24);
      uint64_t v19 = (unsigned char *)*((void *)v16 + 3);
      uint64_t v18 = (unsigned char *)*((void *)v16 + 4);
    }
    if (v19 == v18)
    {
      llvm::raw_ostream::write(v16, "\n", 1uLL);
    }
    else
    {
      unsigned char *v18 = 10;
      ++*((void *)v16 + 4);
    }
  }
  else
  {
    llvm::Twine::str(this, v41);
    __int16 v40 = 260;
    uint64_t v38 = (uint64_t)v41;
    llvm::createGraphFilename((llvm *)&v38, (const llvm::Twine *)&v45, (uint64_t)&v43);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v43;
    *(void *)(a4 + 16) = v44;
    HIBYTE(v44) = 0;
    LOBYTE(v43) = 0;
    if (v42 < 0) {
      operator delete(v41[0]);
    }
  }
  uint64_t v25 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v38, v45, 1, 0, 0);
  if (v45 == -1)
  {
    uint64_t v26 = (llvm::raw_ostream *)llvm::errs(v25);
    uint64_t v27 = *((void *)v26 + 4);
    if ((unint64_t)(*((void *)v26 + 3) - v27) > 0x13)
    {
      *(_DWORD *)(v27 + 16) = 656434540;
      *(_OWORD *)uint64_t v27 = *(_OWORD *)"error opening file '";
      *((void *)v26 + 4) += 20;
    }
    else
    {
      uint64_t v26 = llvm::raw_ostream::write(v26, "error opening file '", 0x14uLL);
    }
    char v28 = *(unsigned char *)(a4 + 23);
    BOOL v29 = v28 < 0;
    if (v28 >= 0) {
      unint64_t v30 = (const char *)a4;
    }
    else {
      unint64_t v30 = *(const char **)a4;
    }
    size_t v31 = v28 & 0x7F;
    if (v29) {
      size_t v32 = *(void *)(a4 + 8);
    }
    else {
      size_t v32 = v31;
    }
    unsigned int v33 = llvm::raw_ostream::write(v26, v30, v32);
    unsigned int v34 = (void *)*((void *)v33 + 4);
    if (*((void *)v33 + 3) - (void)v34 > 0xEuLL)
    {
      qmemcpy(v34, "' for writing!\n", 15);
      *((void *)v33 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v33, "' for writing!\n", 0xFuLL);
    }
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    unsigned int v35 = llvm::WriteGraph<llvm::EdgeBundles>((llvm::raw_ostream *)&v38, a2);
    uint64_t v36 = (llvm::raw_ostream *)llvm::errs(v35);
    unint64_t v37 = (void *)*((void *)v36 + 4);
    if (*((void *)v36 + 3) - (void)v37 > 7uLL)
    {
      void *v37 = 0xA202E656E6F6420;
      *((void *)v36 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v36, " done. \n", 8uLL);
    }
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(void *)(a1 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v38);
}

uint64_t sub_1CC29834C()
{
  int v2 = 1;
  *(void *)&long long v1 = "Pop up a window to show edge bundle graphs";
  *((void *)&v1 + 1) = 42;
  sub_1CD4C1500((uint64_t)&unk_1EBCCB430, "view-edge-bundles", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCB430, &dword_1CB82C000);
}

void llvm::initializeEHContGuardCatchretPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCB500, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC298438;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCCB500, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC298438()
{
}

void llvm::createEHContGuardCatchretPass(llvm *this)
{
}

uint64_t sub_1CC298510(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCB4F8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F260B658;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCB500, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC298438;
    v5[1] = &PassRegistry;
    long long v4 = v5;
    std::__call_once(&qword_1EBCCB500, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC298608()
{
}

void sub_1CC298644(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    long long v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  unsigned int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC2986F8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  long long v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC2987A4()
{
  return "EH Cont Guard catchret targets";
}

uint64_t sub_1CC2987B4(uint64_t a1, uint64_t a2)
{
  v29[24] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(llvm::Module **)(*(void *)(a2 + 32) + 2064);
  uint64_t v27 = v29;
  uint64_t v28 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(v3, (uint64_t)&v27);
  if (v28)
  {
    long long v4 = (uint64_t *)((char *)v27 + 16);
    uint64_t v5 = 24 * v28;
    while (1)
    {
      uint64_t v6 = *(void **)(*(v4 - 1) + 8);
      if (*v6 == 11)
      {
        uint64_t v7 = v6[3];
        uint64_t v8 = *(void *)((char *)v6 + 27);
        if (v7 == 0x7567746E6F636865 && v8 == 0x6472617567746E6FLL) {
          break;
        }
      }
      v4 += 3;
      v5 -= 24;
      if (!v5) {
        goto LABEL_12;
      }
    }
    uint64_t v10 = *v4;
  }
  else
  {
LABEL_12:
    uint64_t v10 = 0;
  }
  if (v27 != v29) {
    free(v27);
  }
  char v11 = 0;
  if (v10 && *(unsigned char *)(a2 + 634))
  {
    uint64_t v12 = *(void *)(a2 + 328);
    if (v12 == a2 + 320)
    {
      char v11 = 0;
    }
    else
    {
      char v11 = 0;
      do
      {
        if (*(unsigned char *)(v12 + 188))
        {
          uint64_t EHCatchretSymbol = llvm::MachineBasicBlock::getEHCatchretSymbol((llvm::MachineBasicBlock *)v12);
          uint64_t v14 = EHCatchretSymbol;
          unsigned int v16 = *(uint64_t **)(a2 + 496);
          unint64_t v15 = *(void *)(a2 + 504);
          if ((unint64_t)v16 >= v15)
          {
            uint64_t v18 = *(void **)(a2 + 488);
            uint64_t v19 = v16 - v18;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61) {
              abort();
            }
            uint64_t v21 = v15 - (void)v18;
            if (v21 >> 2 > v20) {
              unint64_t v20 = v21 >> 2;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              if (v22 >> 61) {
                sub_1CB833614();
              }
              size_t v23 = (char *)operator new(8 * v22);
            }
            else
            {
              size_t v23 = 0;
            }
            size_t v24 = (uint64_t *)&v23[8 * v19];
            *size_t v24 = v14;
            uint64_t v17 = v24 + 1;
            if (v16 != v18)
            {
              do
              {
                uint64_t v25 = *--v16;
                *--size_t v24 = v25;
              }
              while (v16 != v18);
              unsigned int v16 = *(uint64_t **)(a2 + 488);
            }
            *(void *)(a2 + 488) = v24;
            *(void *)(a2 + 496) = v17;
            *(void *)(a2 + 504) = &v23[8 * v22];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            uint64_t *v16 = EHCatchretSymbol;
            uint64_t v17 = v16 + 1;
          }
          *(void *)(a2 + 496) = v17;
          char v11 = 1;
        }
        uint64_t v12 = *(void *)(v12 + 8);
      }
      while (v12 != a2 + 320);
    }
  }
  return v11 & 1;
}

uint64_t llvm::ExecutionDomainFix::regIndices(llvm::ExecutionDomainFix *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 65) + 24 * a2);
}

unint64_t llvm::ExecutionDomainFix::alloc(llvm::ExecutionDomainFix *this, int a2)
{
  uint64_t v4 = *((unsigned int *)this + 88);
  if (v4)
  {
    unint64_t v5 = *(void *)(*((void *)this + 43) + 8 * v4 - 8);
    *((_DWORD *)this + 88) = v4 - 1;
    if ((a2 & 0x80000000) == 0) {
LABEL_3:
    }
      *(_DWORD *)(v5 + 4) |= 1 << a2;
  }
  else
  {
    *((void *)this + 41) += 96;
    uint64_t v7 = *((void *)this + 31);
    if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 96 > *((void *)this + 32) - v7)
    {
      unsigned int v8 = *((_DWORD *)this + 68) >> 7;
      if (v8 >= 0x1E) {
        LOBYTE(v8) = 30;
      }
      uint64_t v9 = 4096 << v8;
      unint64_t v5 = (unint64_t)operator new(4096 << v8, (std::align_val_t)8uLL);
      unsigned int v10 = *((_DWORD *)this + 68);
      if (v10 >= *((_DWORD *)this + 69)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 33) + 8 * v10) = v5;
      ++*((_DWORD *)this + 68);
      *((void *)this + 32) = v5 + v9;
    }
    else
    {
      unint64_t v5 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 31) = v5 + 96;
    *(void *)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = v5 + 32;
    *(void *)(v5 + 24) = 0x800000000;
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  return v5;
}

uint64_t llvm::ExecutionDomainFix::release(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      if ((*(_DWORD *)v2)-- != 1) {
        break;
      }
      unsigned int v5 = *(_DWORD *)(v2 + 4);
      if (v5 && *(_DWORD *)(v2 + 24)) {
        uint64_t result = llvm::ExecutionDomainFix::collapse(v3, v2, __clz(__rbit32(v5)));
      }
      uint64_t v6 = *(void *)(v2 + 8);
      *(_DWORD *)(v2 + 4) = 0;
      *(void *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      unint64_t v7 = *(unsigned int *)(v3 + 352);
      if (v7 >= *(unsigned int *)(v3 + 356)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v3 + 344) + 8 * v7) = v2;
      ++*(_DWORD *)(v3 + 352);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::ExecutionDomainFix::collapse(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = this;
  for (unsigned int i = *(_DWORD *)(a2 + 24); i; unsigned int i = *(_DWORD *)(a2 + 24))
  {
    uint64_t v7 = *(void *)(v5 + 504);
    uint64_t v8 = *(void *)(*(void *)(a2 + 16) + 8 * i - 8);
    *(_DWORD *)(a2 + 24) = i - 1;
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 1024))(v7, v8, a3);
  }
  *(_DWORD *)(a2 + 4) = 1 << a3;
  if (*(void *)(v5 + 552) != *(void *)(v5 + 560) && *(_DWORD *)a2 >= 2u)
  {
    int v9 = *(_DWORD *)(v5 + 544);
    if (v9)
    {
      for (unsigned int j = 0; j != v9; ++j)
      {
        if (*(void *)(*(void *)(v5 + 552) + 8 * j) == a2)
        {
          char v11 = (_DWORD *)llvm::ExecutionDomainFix::alloc((llvm::ExecutionDomainFix *)v5, a3);
          this = llvm::ExecutionDomainFix::setLiveReg(v5, j, v11);
          int v9 = *(_DWORD *)(v5 + 544);
        }
      }
    }
  }
  return this;
}

_DWORD *llvm::ExecutionDomainFix::resolve(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return (_DWORD *)v3;
  }
  do
  {
    uint64_t v5 = (_DWORD *)v4;
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4);
  ++*v5;
  llvm::ExecutionDomainFix::release(a1, v3);
  *a2 = (uint64_t)v5;
  return v5;
}

uint64_t llvm::ExecutionDomainFix::setLiveReg(uint64_t result, int a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)(*(void *)(result + 552) + 8 * a2);
  if (v4 != a3)
  {
    uint64_t v6 = result;
    if (v4) {
      uint64_t result = llvm::ExecutionDomainFix::release(result);
    }
    if (a3) {
      ++*a3;
    }
    *(void *)(*(void *)(v6 + 552) + 8 * a2) = a3;
  }
  return result;
}

uint64_t llvm::ExecutionDomainFix::kill(uint64_t this, int a2)
{
  uint64_t v3 = *(void *)(*(void *)(this + 552) + 8 * a2);
  if (v3)
  {
    uint64_t v4 = this;
    uint64_t v5 = a2;
    this = llvm::ExecutionDomainFix::release(this, v3);
    *(void *)(*(void *)(v4 + 552) + 8 * v5) = 0;
  }
  return this;
}

void *llvm::ExecutionDomainFix::force(void *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(this[69] + 8 * a2);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24))
    {
      unsigned int v6 = *(_DWORD *)(v5 + 4);
      int v7 = 1 << a3;
      if ((v6 & (1 << a3)) != 0)
      {
        return (void *)llvm::ExecutionDomainFix::collapse((uint64_t)this, v5, a3);
      }
      else
      {
        this = (void *)llvm::ExecutionDomainFix::collapse((uint64_t)this, v5, __clz(__rbit32(v6)));
        uint64_t v10 = *(void *)(v3[69] + 8 * v4);
        *(_DWORD *)(v10 + 4) |= v7;
      }
    }
    else
    {
      *(_DWORD *)(v5 + 4) |= 1 << a3;
    }
  }
  else
  {
    this = (void *)llvm::ExecutionDomainFix::alloc((llvm::ExecutionDomainFix *)this, a3);
    uint64_t v8 = *(void *)(v3[69] + 8 * v4);
    if ((void *)v8 != this)
    {
      int v9 = this;
      if (v8) {
        this = (void *)llvm::ExecutionDomainFix::release((uint64_t)v3, v8);
      }
      if (v9) {
        ++*v9;
      }
      *(void *)(v3[69] + 8 * v4) = v9;
    }
  }
  return this;
}

uint64_t llvm::ExecutionDomainFix::merge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 1;
  }
  int v5 = *(_DWORD *)(a2 + 4) & *(_DWORD *)(a3 + 4);
  if (!v5) {
    return 0;
  }
  *(_DWORD *)(a2 + 4) = v5;
  uint64_t v7 = *(unsigned int *)(a3 + 24);
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 + v7 > (unint64_t)*(unsigned int *)(a2 + 28)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v7)
  {
    memcpy((void *)(*(void *)(a2 + 16) + 8 * v8), *(const void **)(a3 + 16), 8 * v7);
    LODWORD(v8) = *(_DWORD *)(a2 + 24);
  }
  *(_DWORD *)(a2 + 24) = v8 + v7;
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  int v9 = *(_DWORD *)a2 + 1;
  *(_DWORD *)a2 = v9;
  *(void *)(a3 + 8) = a2;
  int v10 = *(_DWORD *)(a1 + 544);
  if (v10)
  {
    for (unsigned int i = 0; i != v10; ++i)
    {
      uint64_t v12 = *(void *)(a1 + 552);
      if (*(void *)(v12 + 8 * i) == a3)
      {
        uint64_t v13 = *(void *)(v12 + 8 * (int)i);
        if (v13 != a2)
        {
          if (v13)
          {
            llvm::ExecutionDomainFix::release(a1, v13);
            int v9 = *(_DWORD *)a2;
            uint64_t v12 = *(void *)(a1 + 552);
            int v10 = *(_DWORD *)(a1 + 544);
          }
          *(_DWORD *)a2 = ++v9;
          *(void *)(v12 + 8 * (int)i) = a2;
        }
      }
    }
  }
  return 1;
}

void llvm::ExecutionDomainFix::enterBasicBlock(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 552);
  int v5 = *(char **)(a1 + 552);
  if (v5 == *(char **)(a1 + 560))
  {
    unint64_t v6 = *(unsigned int *)(a1 + 544);
    uint64_t v7 = *(void *)(a1 + 568);
    if (v6 <= (v7 - (uint64_t)v5) >> 3)
    {
      if (!v6)
      {
LABEL_15:
        *(void *)(a1 + 560) = &v5[8 * v6];
        goto LABEL_16;
      }
      size_t v11 = 8 * v6;
      int v10 = *(char **)(a1 + 552);
    }
    else
    {
      if (v5)
      {
        *(void *)(a1 + 560) = v5;
        operator delete(v5);
        uint64_t v7 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      uint64_t v8 = v7 >> 2;
      if (v7 >> 2 <= v6) {
        uint64_t v8 = v6;
      }
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9 >> 61) {
        abort();
      }
      int v10 = (char *)operator new(8 * v9);
      int v5 = v10;
      *(void *)(a1 + 552) = v10;
      *(void *)(a1 + 568) = &v10[8 * v9];
      size_t v11 = 8 * v6;
    }
    bzero(v10, v11);
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v12 = *(void *)(v3 + 64);
  for (uint64_t i = *(void *)(v3 + 72); v12 != i; v12 += 8)
  {
    uint64_t v14 = (void *)(*(void *)(a1 + 576) + 24 * *(int *)(*(void *)v12 + 24));
    if (*v14 != v14[1] && *(_DWORD *)(a1 + 544))
    {
      unsigned int v15 = 0;
      do
      {
        uint64_t v16 = v15;
        uint64_t v17 = llvm::ExecutionDomainFix::resolve(a1, (uint64_t *)(*v14 + 8 * v15));
        if (v17)
        {
          uint64_t v18 = v17;
          uint64_t v19 = *v4;
          uint64_t v20 = *(void *)(*v4 + 8 * v16);
          if (v20)
          {
            if (*(_DWORD *)(v20 + 24))
            {
              if (v17[6]) {
                llvm::ExecutionDomainFix::merge(a1, v20, (uint64_t)v17);
              }
              else {
                llvm::ExecutionDomainFix::force((void *)a1, v16, __clz(__rbit32(v17[1])));
              }
            }
            else if (v17[6])
            {
              uint64_t v22 = __clz(__rbit32(*(_DWORD *)(v20 + 4)));
              if ((v17[1] >> v22)) {
                llvm::ExecutionDomainFix::collapse(a1, (uint64_t)v17, v22);
              }
            }
          }
          else
          {
            uint64_t v21 = *(void *)(v19 + 8 * (int)v16);
            if ((_DWORD *)v21 != v17)
            {
              if (v21)
              {
                llvm::ExecutionDomainFix::release(a1, v21);
                uint64_t v19 = *(void *)(a1 + 552);
              }
              ++*v18;
              *(void *)(v19 + 8 * (int)v16) = v18;
            }
          }
        }
        unsigned int v15 = v16 + 1;
      }
      while (v16 + 1 != *(_DWORD *)(a1 + 544));
    }
  }
}

char *llvm::ExecutionDomainFix::leaveBasicBlock(char *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t)result;
  unsigned int v3 = *(_DWORD *)(*(void *)a2 + 24);
  uint64_t v4 = *((void *)result + 72);
  int v5 = (uint64_t **)(v4 + 24 * v3);
  unint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (*v5 != v7)
  {
    do
    {
      uint64_t v8 = *v6++;
      uint64_t result = (char *)llvm::ExecutionDomainFix::release(v2, v8);
    }
    while (v6 != v7);
    uint64_t v4 = *(void *)(v2 + 576);
  }
  unint64_t v9 = (const void **)(v2 + 552);
  int v10 = (void **)(v4 + 24 * v3);
  size_t v11 = *(char **)(v2 + 552);
  if (v10 != (void **)(v2 + 552))
  {
    uint64_t v12 = *(unsigned char **)(v2 + 560);
    uint64_t v13 = v12 - v11;
    unint64_t v14 = (v12 - v11) >> 3;
    uint64_t v15 = v4 + 24 * v3;
    uint64_t v18 = *(void *)(v15 + 16);
    uint64_t v17 = (void *)(v15 + 16);
    uint64_t v16 = v18;
    uint64_t v19 = (char *)*v10;
    if (v14 <= (v18 - (uint64_t)*v10) >> 3)
    {
      uint64_t v24 = v4 + 24 * v3;
      uint64_t v26 = *(char **)(v24 + 8);
      size_t v23 = (void **)(v24 + 8);
      uint64_t v25 = v26;
      size_t v27 = v26 - v19;
      unint64_t v28 = (v26 - v19) >> 3;
      if (v28 >= v14)
      {
        if (v12 != v11)
        {
          uint64_t result = (char *)memmove(*v10, *(const void **)(v2 + 552), v12 - v11);
          unint64_t v9 = (const void **)(v2 + 552);
        }
      }
      else
      {
        BOOL v29 = &v11[8 * v28];
        if (v25 != v19)
        {
          uint64_t result = (char *)memmove(*v10, *(const void **)(v2 + 552), v27);
          uint64_t v19 = (char *)*v23;
        }
        uint64_t v13 = v12 - v29;
        if (v12 != v29) {
          uint64_t result = (char *)memmove(v19, v29, v12 - v29);
        }
        unint64_t v9 = (const void **)(v2 + 552);
      }
    }
    else
    {
      if (v19)
      {
        *(void *)(v4 + 24 * v3 + 8) = v19;
        operator delete(v19);
        uint64_t v16 = 0;
        char *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
      }
      if (v13 < 0) {
        goto LABEL_28;
      }
      uint64_t v20 = v16 >> 2;
      if (v16 >> 2 <= v14) {
        uint64_t v20 = (v12 - v11) >> 3;
      }
      unint64_t v21 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v20;
      if (v21 >> 61) {
LABEL_28:
      }
        abort();
      uint64_t result = (char *)operator new(8 * v21);
      uint64_t v19 = result;
      char *v10 = result;
      uint64_t v22 = v4 + 24 * v3;
      *(void *)(v22 + 8) = result;
      size_t v23 = (void **)(v22 + 8);
      *uint64_t v17 = &result[8 * v21];
      if (v12 != v11) {
        uint64_t result = (char *)memcpy(result, v11, v12 - v11);
      }
      unint64_t v9 = (const void **)(v2 + 552);
    }
    *size_t v23 = &v19[v13];
    size_t v11 = (char *)*v9;
  }
  *(void *)(v2 + 560) = v11;
  return result;
}

BOOL llvm::ExecutionDomainFix::visitInstr(llvm::ExecutionDomainFix *this, llvm::MachineInstr *a2)
{
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 63) + 1016))(*((void *)this + 63));
  int v6 = (unsigned __int16)v4;
  if ((_WORD)v4)
  {
    if (v4 >= 0x10000) {
      llvm::ExecutionDomainFix::visitSoftInstr(this, a2, HIWORD(v4), v5);
    }
    else {
      llvm::ExecutionDomainFix::visitHardInstr(this, a2, (unsigned __int16)v4);
    }
  }
  return v6 == 0;
}

void llvm::ExecutionDomainFix::visitSoftInstr(llvm::ExecutionDomainFix *this, llvm::MachineInstr *a2, unsigned int a3, int8x8_t a4)
{
  v66[2] = *MEMORY[0x1E4F143B8];
  uint64_t v64 = v66;
  uint64_t v65 = 0x400000000;
  if (*((void *)this + 69) != *((void *)this + 70))
  {
    uint64_t v7 = *((void *)a2 + 2);
    unsigned int v8 = *(unsigned __int8 *)(v7 + 4);
    int v9 = *(unsigned __int16 *)(v7 + 2);
    if (v8 != v9)
    {
      do
      {
        uint64_t v27 = *((void *)a2 + 4);
        unsigned int v28 = v8;
        if (!*(unsigned char *)(v27 + 32 * v8))
        {
          uint64_t v29 = *((void *)this + 65) + 24 * *(unsigned int *)(v27 + 32 * v8 + 4);
          uint64_t v30 = *(unsigned int *)(v29 + 8);
          if (v30)
          {
            size_t v31 = *(int **)v29;
            uint64_t v32 = 4 * v30;
            do
            {
              int v33 = *v31;
              uint64_t v34 = *(void *)(*((void *)this + 69) + 8 * *v31);
              if (v34)
              {
                int v35 = *(_DWORD *)(v34 + 4) & a3;
                if (*(_DWORD *)(v34 + 24))
                {
                  if (v35)
                  {
                    if (v65 >= (unint64_t)HIDWORD(v65)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v64 + v65) = v33;
                    LODWORD(v65) = v65 + 1;
                  }
                  else
                  {
                    llvm::ExecutionDomainFix::release((uint64_t)this, v34);
                    *(void *)(*((void *)this + 69) + 8 * v33) = 0;
                  }
                }
                else if (v35)
                {
                  a3 &= *(_DWORD *)(v34 + 4);
                }
              }
              ++v31;
              v32 -= 4;
            }
            while (v32);
          }
        }
        unsigned int v8 = v28 + 1;
      }
      while (v28 + 1 != v9);
    }
  }
  a4.i32[0] = a3;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(a4);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.i32[0] == 1)
  {
    uint64_t v11 = __clz(__rbit32(a3));
    (*(void (**)(void, llvm::MachineInstr *, uint64_t))(**((void **)this + 63) + 1024))(*((void *)this + 63), a2, v11);
    llvm::ExecutionDomainFix::visitHardInstr(this, a2, v11);
    goto LABEL_83;
  }
  uint64_t v62 = 0x400000000;
  if (!v65) {
    goto LABEL_65;
  }
  uint64_t v12 = (char *)v64;
  uint64_t v61 = (char *)v64 + 4 * v65;
  unsigned int v60 = a3;
  do
  {
    uint64_t v13 = *(unsigned int *)v12;
    uint64_t v14 = *(void *)(*((void *)this + 69) + 8 * (int)v13);
    if ((*(_DWORD *)(v14 + 4) & a3) != 0)
    {
      int ReachingDef = llvm::ReachingDefAnalysis::getReachingDef(*((void *)this + 86), (uint64_t)a2, *(unsigned __int16 *)(***((void ***)this + 61) + 2 * v13));
      unint64_t v16 = v62;
      if (v62)
      {
        int v17 = ReachingDef;
        uint64_t v18 = v63;
        do
        {
          uint64_t v19 = &v18[v16 >> 1];
          unsigned int v21 = *v19;
          uint64_t v20 = v19 + 1;
          int v22 = llvm::ReachingDefAnalysis::getReachingDef(*((void *)this + 86), (uint64_t)a2, *(unsigned __int16 *)(***((void ***)this + 61) + 2 * v21));
          if (v22 <= v17) {
            v16 += ~(v16 >> 1);
          }
          else {
            v16 >>= 1;
          }
          if (v22 <= v17) {
            uint64_t v18 = v20;
          }
        }
        while (v16);
        unint64_t v23 = v62;
        a3 = v60;
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v18 = v63;
      }
      if (&v63[v23] == v18)
      {
        if (v23 >= HIDWORD(v62)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v63[v23] = v13;
        LODWORD(v62) = v62 + 1;
      }
      else
      {
        if (v23 >= HIDWORD(v62)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v24 = (char *)&v63[v18 - v63];
        v63[v23] = v63[v23 - 1];
        int v25 = v62;
        uint64_t v26 = (char *)&v63[v62 - 1];
        if (v26 != v24)
        {
          memmove(v24 + 4, v24, v26 - v24);
          int v25 = v62;
        }
        LODWORD(v62) = v25 + 1;
        *(_DWORD *)uint64_t v24 = v13;
      }
    }
    else
    {
      llvm::ExecutionDomainFix::release((uint64_t)this, v14);
      *(void *)(*((void *)this + 69) + 8 * (int)v13) = 0;
    }
    v12 += 4;
  }
  while (v12 != v61);
  uint64_t v36 = v62;
  if (v62)
  {
    unint64_t v37 = 0;
    do
    {
      int v38 = v36;
      while (v37)
      {
        uint64_t v39 = (int)v63[v38 - 1];
        LODWORD(v62) = v38 - 1;
        uint64_t v40 = *(void *)(*((void *)this + 69) + 8 * v39);
        if (v40 != v37
          && !*(void *)(v40 + 8)
          && (llvm::ExecutionDomainFix::merge((uint64_t)this, v37, *(void *)(*((void *)this + 69) + 8 * v39)) & 1) == 0
          && v65)
        {
          uint64_t v41 = (int *)v64;
          uint64_t v42 = 4 * v65;
          do
          {
            uint64_t v43 = *v41;
            uint64_t v44 = *(void *)(*((void *)this + 69) + 8 * v43);
            if (v44 == v40 && v44 != 0)
            {
              llvm::ExecutionDomainFix::release((uint64_t)this, v40);
              *(void *)(*((void *)this + 69) + 8 * v43) = 0;
            }
            ++v41;
            v42 -= 4;
          }
          while (v42);
        }
        int v38 = v62;
        if (!v62) {
          goto LABEL_66;
        }
      }
      uint64_t v46 = (int)v63[--v36];
      unint64_t v37 = *(void *)(*((void *)this + 69) + 8 * v46);
      *(_DWORD *)(v37 + 4) &= a3;
    }
    while (v36);
  }
  else
  {
LABEL_65:
    unint64_t v37 = llvm::ExecutionDomainFix::alloc(this, -1);
    *(_DWORD *)(v37 + 4) = a3;
  }
LABEL_66:
  unsigned int v47 = *(_DWORD *)(v37 + 24);
  if (v47 >= *(_DWORD *)(v37 + 28)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(v37 + 16) + 8 * v47) = a2;
  ++*(_DWORD *)(v37 + 24);
  uint64_t v48 = *((unsigned int *)a2 + 10);
  if (v48)
  {
    uint64_t v49 = *((void *)a2 + 4);
    uint64_t v50 = v49 + 32 * v48;
    while (1)
    {
      if (!*(unsigned char *)v49)
      {
        uint64_t v51 = *((void *)this + 65) + 24 * *(unsigned int *)(v49 + 4);
        uint64_t v52 = *(unsigned int *)(v51 + 8);
        if (v52) {
          break;
        }
      }
LABEL_82:
      v49 += 32;
      if (v49 == v50) {
        goto LABEL_83;
      }
    }
    uint64_t v53 = *(int **)v51;
    uint64_t v54 = 4 * v52;
    while (1)
    {
      uint64_t v55 = *v53;
      uint64_t v56 = *((void *)this + 69);
      uint64_t v57 = *(void *)(v56 + 8 * v55);
      if (v57)
      {
        if (v57 == v37 || (*(_DWORD *)v49 & 0x1000000) == 0) {
          goto LABEL_81;
        }
        llvm::ExecutionDomainFix::release((uint64_t)this, v57);
        *(void *)(*((void *)this + 69) + 8 * v55) = 0;
        uint64_t v56 = *((void *)this + 69);
        uint64_t v59 = *(void *)(v56 + 8 * v55);
        if (v59 == v37) {
          goto LABEL_81;
        }
        if (v59)
        {
          llvm::ExecutionDomainFix::release((uint64_t)this, v59);
          uint64_t v56 = *((void *)this + 69);
        }
      }
      ++*(_DWORD *)v37;
      *(void *)(v56 + 8 * v55) = v37;
LABEL_81:
      ++v53;
      v54 -= 4;
      if (!v54) {
        goto LABEL_82;
      }
    }
  }
LABEL_83:
  if (v64 != v66) {
    free(v64);
  }
}

void *llvm::ExecutionDomainFix::visitHardInstr(void *this, llvm::MachineInstr *a2, uint64_t a3)
{
  int8x8_t v5 = this;
  uint64_t v6 = *((void *)a2 + 2);
  unsigned int v7 = *(unsigned __int8 *)(v6 + 4);
  int v8 = *(unsigned __int16 *)(v6 + 2);
  if (v7 != v8)
  {
    do
    {
      uint64_t v9 = *((void *)a2 + 4);
      unsigned int v10 = v7;
      if (!*(unsigned char *)(v9 + 32 * v7))
      {
        uint64_t v11 = v5[65] + 24 * *(unsigned int *)(v9 + 32 * v7 + 4);
        uint64_t v12 = *(unsigned int *)(v11 + 8);
        if (v12)
        {
          uint64_t v13 = *(int **)v11;
          uint64_t v14 = 4 * v12;
          do
          {
            int v15 = *v13++;
            this = llvm::ExecutionDomainFix::force(v5, v15, a3);
            v14 -= 4;
          }
          while (v14);
        }
      }
      unsigned int v7 = v10 + 1;
    }
    while (v10 + 1 != v8);
    unsigned int v7 = *(unsigned __int8 *)(*((void *)a2 + 2) + 4);
  }
  if (v7)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v7;
    do
    {
      uint64_t v18 = *((void *)a2 + 4);
      if (!*(unsigned char *)(v18 + 32 * v16))
      {
        uint64_t v19 = v5[65] + 24 * *(unsigned int *)(v18 + 32 * v16 + 4);
        uint64_t v20 = *(unsigned int *)(v19 + 8);
        if (v20)
        {
          unsigned int v21 = *(int **)v19;
          uint64_t v22 = 4 * v20;
          do
          {
            uint64_t v23 = *v21;
            uint64_t v24 = *(void *)(v5[69] + 8 * v23);
            if (v24)
            {
              llvm::ExecutionDomainFix::release((uint64_t)v5, v24);
              *(void *)(v5[69] + 8 * v23) = 0;
            }
            this = llvm::ExecutionDomainFix::force(v5, v23, a3);
            ++v21;
            v22 -= 4;
          }
          while (v22);
        }
      }
      ++v16;
    }
    while (v16 != v17);
  }
  return this;
}

uint64_t llvm::ExecutionDomainFix::processDefs(uint64_t this, llvm::MachineInstr *a2, int a3)
{
  uint64_t v5 = this;
  uint64_t v6 = *((void *)a2 + 2);
  if ((*(unsigned char *)(v6 + 8) & 2) != 0)
  {
    unsigned int v7 = *((_DWORD *)a2 + 10);
    if (!v7) {
      return this;
    }
  }
  else
  {
    unsigned int v7 = *(unsigned __int8 *)(v6 + 4);
    if (!v7) {
      return this;
    }
  }
  uint64_t v8 = 0;
  uint64_t v9 = v7;
  do
  {
    uint64_t v10 = *((void *)a2 + 4);
    if ((*(_DWORD *)(v10 + 32 * v8) & 0x10000FF) == 0x1000000)
    {
      uint64_t v11 = *(void *)(v5 + 520) + 24 * *(unsigned int *)(v10 + 32 * v8 + 4);
      uint64_t v12 = *(unsigned int *)(v11 + 8);
      if (v12)
      {
        uint64_t v13 = *(int **)v11;
        uint64_t v14 = 4 * v12;
        do
        {
          if (a3)
          {
            uint64_t v15 = *v13;
            uint64_t v16 = *(void *)(*(void *)(v5 + 552) + 8 * v15);
            if (v16)
            {
              this = llvm::ExecutionDomainFix::release(v5, v16);
              *(void *)(*(void *)(v5 + 552) + 8 * v15) = 0;
            }
          }
          ++v13;
          v14 -= 4;
        }
        while (v14);
      }
    }
    ++v8;
  }
  while (v8 != v9);
  return this;
}

char *llvm::ExecutionDomainFix::processBasicBlock(llvm::ExecutionDomainFix *a1, uint64_t a2)
{
  llvm::ExecutionDomainFix::enterBasicBlock((uint64_t)a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)a2 + 48;
  for (uint64_t i = *(void *)(*(void *)a2 + 56); i != v4; uint64_t i = *(void *)(i + 8))
  {
    if (**(unsigned __int16 **)(i + 16) - 13 >= 5)
    {
      if (*(unsigned char *)(a2 + 8)) {
        BOOL v6 = llvm::ExecutionDomainFix::visitInstr(a1, (llvm::MachineInstr *)i);
      }
      else {
        BOOL v6 = 0;
      }
      llvm::ExecutionDomainFix::processDefs((uint64_t)a1, (llvm::MachineInstr *)i, v6);
    }
    if ((*(unsigned char *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
  }

  return llvm::ExecutionDomainFix::leaveBasicBlock((char *)a1, a2);
}

uint64_t llvm::ExecutionDomainFix::runOnMachineFunction(llvm::ExecutionDomainFix *this, llvm::MachineFunction *a2)
{
  v78[8] = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(this, *(llvm::LLVMContextImpl *****)a2) & 1) == 0)
  {
    *((void *)this + 62) = a2;
    *((void *)this + 63) = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 104))(*((void *)a2 + 2));
    *((void *)this + 64) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 62) + 16) + 176))(*(void *)(*((void *)this + 62) + 16));
    *((void *)this + 70) = *((void *)this + 69);
    uint64_t v4 = (unsigned __int16 **)**((void **)this + 61);
    if (*((_WORD *)v4 + 10))
    {
      uint64_t v5 = (void *)*((void *)a2 + 5);
      BOOL v6 = *v4;
      uint64_t v7 = 2 * *((unsigned __int16 *)v4 + 10);
      while (!llvm::MachineRegisterInfo::isPhysRegUsed(v5, *v6, 0))
      {
        ++v6;
        v7 -= 2;
        if (!v7) {
          return 0;
        }
      }
      uint64_t v8 = (uint64_t *)*((void *)this + 1);
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      uint64_t v73 = a2;
      if (v9 == v10)
      {
LABEL_10:
        uint64_t v11 = 0;
      }
      else
      {
        while (*(_UNKNOWN **)v9 != &llvm::ReachingDefAnalysis::ID)
        {
          v9 += 16;
          if (v9 == v10) {
            goto LABEL_10;
          }
        }
        uint64_t v11 = *(void *)(v9 + 8);
      }
      *((void *)this + 86) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::ReachingDefAnalysis::ID);
      uint64_t v12 = (char *)*((void *)this + 65);
      if (v12 == *((char **)this + 66))
      {
        unint64_t v20 = *(unsigned int *)(*((void *)this + 64) + 16);
        if (v20)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 67) - (void)v12) >> 3);
          if (v21 >= v20)
          {
            uint64_t v51 = 24 * v20;
            uint64_t v52 = v12 + 16;
            do
            {
              *((void *)v52 - 2) = v52;
              *((void *)v52 - 1) = 0x100000000;
              v52 += 24;
              v51 -= 24;
            }
            while (v51);
            *((void *)this + 66) = &v12[24 * v20];
          }
          else
          {
            unint64_t v22 = 0x5555555555555556 * ((uint64_t)(*((void *)this + 67) - (void)v12) >> 3);
            if (v22 <= v20) {
              unint64_t v22 = *(unsigned int *)(*((void *)this + 64) + 16);
            }
            if (v21 >= 0x555555555555555) {
              unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23 > 0xAAAAAAAAAAAAAAALL) {
              sub_1CB833614();
            }
            uint64_t v24 = (char *)operator new(24 * v23);
            uint64_t v25 = 0;
            do
            {
              uint64_t v26 = &v24[v25];
              *(void *)uint64_t v26 = &v24[v25 + 16];
              *((void *)v26 + 1) = 0x100000000;
              v25 += 24;
            }
            while (24 * v20 != v25);
            *((void *)this + 65) = v24;
            *((void *)this + 66) = &v24[24 * v20];
            *((void *)this + 67) = &v24[24 * v23];
            if (v12) {
              operator delete(v12);
            }
          }
        }
        uint64_t v53 = **((void **)this + 61);
        uint64_t v54 = *(unsigned __int16 *)(v53 + 20);
        if (*(_WORD *)(v53 + 20))
        {
          uint64_t v55 = 0;
          do
          {
            uint64_t v56 = *((void *)this + 64);
            if (v56) {
              uint64_t v57 = (void *)(v56 + 8);
            }
            else {
              uint64_t v57 = 0;
            }
            unint64_t v58 = ((unint64_t)*(unsigned int *)(*v57
                                                     + 24
                                                     * *(unsigned __int16 *)(***((void ***)this + 61) + 2 * v55)
                                                     + 16) >> 3) & 0x1FFFFFFE;
            uint64_t v60 = v57[5];
            uint64_t v59 = v57[6];
            uint64_t v61 = (_WORD *)(v59 + v58 + 2);
            int v62 = *(unsigned __int16 *)(v59 + v58)
                + (*(_DWORD *)(*v57 + 24 * *(unsigned __int16 *)(***((void ***)this + 61) + 2 * v55) + 16) & 0xF)
                * *(unsigned __int16 *)(***((void ***)this + 61) + 2 * v55);
            do
            {
              unsigned __int16 v63 = *(_WORD *)(v60 + 4 * (unsigned __int16)v62);
              if (v63) {
                BOOL v64 = v59 == 0;
              }
              else {
                BOOL v64 = 1;
              }
              if (!v64)
              {
                unsigned int v66 = *(unsigned __int16 *)(v60 + 4 * (unsigned __int16)v62 + 2) << 16;
                for (uint64_t i = (unsigned __int16 *)(v59
                                             + 2
                                             * *(unsigned int *)(*v57
                                                               + 24
                                                               * *(unsigned __int16 *)(v60 + 4 * (unsigned __int16)v62)
                                                               + 8));
                      ;
                      uint64_t i = (unsigned __int16 *)(v57[6] + 2 * *(unsigned int *)(*v57 + 24 * v71 + 8)))
                {
                  do
                  {
                    uint64_t v68 = *((void *)this + 65) + 24 * v63;
                    unint64_t v69 = *(unsigned int *)(v68 + 8);
                    if (v69 >= *(unsigned int *)(v68 + 12)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(_DWORD *)(*(void *)v68 + 4 * v69) = v55;
                    ++*(_DWORD *)(v68 + 8);
                    int v70 = *i++;
                    v63 += v70;
                  }
                  while (v70);
                  unsigned int v71 = HIWORD(v66);
                  if (HIWORD(v66))
                  {
                    v66 >>= 16;
                  }
                  else
                  {
                    if (!*v61) {
                      goto LABEL_90;
                    }
                    v62 += (unsigned __int16)*v61++;
                    uint64_t v72 = (unsigned __int16 *)(v57[5] + 4 * (unsigned __int16)v62);
                    unsigned int v71 = *v72;
                    unsigned int v66 = v72[1] << 16;
                  }
                  unsigned __int16 v63 = v71;
                }
              }
              int v65 = (unsigned __int16)*v61++;
              v62 += v65;
            }
            while (v65);
LABEL_90:
            ++v55;
          }
          while (v55 != v54);
        }
      }
      unint64_t v13 = *((void *)v73 + 14) - *((void *)v73 + 13);
      unint64_t v14 = (v13 >> 3);
      unint64_t v15 = *((unsigned int *)this + 146);
      if (v14 != v15)
      {
        if (v14 >= v15)
        {
          unint64_t v27 = *((unsigned int *)this + 147);
          if (v14 > v27)
          {
            if (v27 == -1) {
              sub_1CD0A89A8(0xFFFFFFFFuLL);
            }
            unint64_t v28 = (2 * v27) | 1;
            if (v28 <= v14) {
              unint64_t v28 = (v13 >> 3);
            }
            if (v28 >= 0xFFFFFFFF) {
              uint64_t v29 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v29 = v28;
            }
            uint64_t v30 = malloc_type_malloc(24 * v29, 0x4065EBACuLL);
            if (!v30) {
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            size_t v31 = v30;
            uint64_t v32 = (char *)*((void *)this + 72);
            uint64_t v33 = *((unsigned int *)this + 146);
            if (v33)
            {
              uint64_t v34 = &v32[24 * v33];
              int v35 = v31;
              do
              {
                *int v35 = 0;
                v35[1] = 0;
                v35[2] = 0;
                *(_OWORD *)int v35 = *(_OWORD *)v32;
                v35[2] = *((void *)v32 + 2);
                *(void *)uint64_t v32 = 0;
                *((void *)v32 + 1) = 0;
                *((void *)v32 + 2) = 0;
                v32 += 24;
                v35 += 3;
              }
              while (v32 != v34);
              uint64_t v36 = *((void *)this + 72);
              uint64_t v37 = 24 * v33;
              do
              {
                int v38 = *(void **)(v36 + v37 - 24);
                if (v38)
                {
                  *(void *)(v36 + v37 - 16) = v38;
                  operator delete(v38);
                }
                v37 -= 24;
              }
              while (v37);
              uint64_t v32 = (char *)*((void *)this + 72);
            }
            if (v32 != (char *)this + 592) {
              free(v32);
            }
            *((void *)this + 72) = v31;
            *((_DWORD *)this + 147) = v29;
            unint64_t v15 = *((unsigned int *)this + 146);
          }
          if (v14 != v15) {
            bzero((void *)(*((void *)this + 72) + 24 * v15), 24 * ((24 * (v14 - v15) - 24) / 0x18) + 24);
          }
        }
        else
        {
          uint64_t v16 = 3 * v15;
          uint64_t v17 = *((void *)this + 72) + 8 * v16 - 24;
          uint64_t v18 = 24 * v14 - 8 * v16;
          do
          {
            uint64_t v19 = *(void **)v17;
            if (*(void *)v17)
            {
              *(void *)(v17 + 8) = v19;
              operator delete(v19);
            }
            v17 -= 24;
            v18 += 24;
          }
          while (v18);
        }
        *((_DWORD *)this + 146) = v13 >> 3;
      }
      v77[0] = v78;
      v77[1] = (void *)0x400000000;
      llvm::LoopTraversal::traverse((llvm::LoopTraversal *)v77, v73, (uint64_t)&v74);
      if (v75)
      {
        uint64_t v39 = (char *)v74;
        uint64_t v40 = 16 * v75;
        do
        {
          llvm::ExecutionDomainFix::processBasicBlock(this, (uint64_t)v39);
          v39 += 16;
          v40 -= 16;
        }
        while (v40);
      }
      unsigned int v41 = *((_DWORD *)this + 146);
      if (v41)
      {
        uint64_t v42 = (uint64_t **)*((void *)this + 72);
        uint64_t v43 = &v42[3 * v41];
        do
        {
          uint64_t v44 = *v42;
          int v45 = v42[1];
          while (v44 != v45)
          {
            if (*v44) {
              llvm::ExecutionDomainFix::release((uint64_t)this, *v44);
            }
            ++v44;
          }
          v42 += 3;
        }
        while (v42 != v43);
        uint64_t v46 = *((unsigned int *)this + 146);
        if (v46)
        {
          uint64_t v47 = *((void *)this + 72);
          uint64_t v48 = 24 * v46;
          do
          {
            uint64_t v49 = *(void **)(v47 + v48 - 24);
            if (v49)
            {
              *(void *)(v47 + v48 - 16) = v49;
              operator delete(v49);
            }
            v48 -= 24;
          }
          while (v48);
        }
      }
      *((_DWORD *)this + 146) = 0;
      *((_DWORD *)this + 88) = 0;
      sub_1CC29A40C((uint64_t)this + 248);
      if (v74 != &v76) {
        free(v74);
      }
      if (v77[0] != v78) {
        free(v77[0]);
      }
    }
  }
  return 0;
}

void sub_1CC29A40C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    unsigned int v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      for (unint64_t i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 96; i <= v8; i += 96)
      {
        uint64_t v10 = *(void **)(i - 80);
        if ((void *)(i - 64) != v10) {
          free(v10);
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 72);
  if (v11)
  {
    uint64_t v12 = *(void **)(a1 + 64);
    unint64_t v13 = &v12[2 * v11];
    do
    {
      unint64_t v14 = *v12 + v12[1];
      for (unint64_t j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 96; j <= v14; j += 96)
      {
        uint64_t v16 = *(void **)(j - 80);
        if ((void *)(j - 64) != v16) {
          free(v16);
        }
      }
      v12 += 2;
    }
    while (v12 != v13);
    uint64_t v17 = *(unsigned int *)(a1 + 72);
    if (v17)
    {
      uint64_t v24 = *(uint64_t **)(a1 + 64);
      uint64_t v25 = 16 * v17;
      do
      {
        uint64_t v26 = *v24;
        v24 += 2;
        MEMORY[0x1D25D9CD0](v26, 8);
        v25 -= 16;
      }
      while (v25);
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 24);
  if (v18)
  {
    *(void *)(a1 + 80) = 0;
    uint64_t v19 = *(void **)(a1 + 16);
    uint64_t v20 = *v19 + 4096;
    *(void *)a1 = *v19;
    *(void *)(a1 + 8) = v20;
    if (v18 != 1)
    {
      unint64_t v21 = v19 + 1;
      uint64_t v22 = 8 * v18 - 8;
      do
      {
        uint64_t v23 = *v21++;
        MEMORY[0x1D25D9CD0](v23, 8);
        v22 -= 8;
      }
      while (v22);
    }
    *(_DWORD *)(a1 + 24) = 1;
  }
}

void sub_1CC29A5A8(uint64_t a1)
{
  sub_1CC29A65C(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC29A5E0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::ReachingDefAnalysis::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

double sub_1CC29A634@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 8;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

void sub_1CC29A65C(uint64_t a1)
{
  *(void *)a1 = &unk_1F260B718;
  uint64_t v2 = *(char **)(a1 + 576);
  uint64_t v3 = *(unsigned int *)(a1 + 584);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    do
    {
      uint64_t v5 = *(void **)&v2[v4 - 24];
      if (v5)
      {
        *(void *)&v2[v4 - 16] = v5;
        operator delete(v5);
      }
      v4 -= 24;
    }
    while (v4);
    uint64_t v2 = *(char **)(a1 + 576);
  }
  if (v2 != (char *)(a1 + 592)) {
    free(v2);
  }
  uint64_t v6 = *(void **)(a1 + 552);
  if (v6)
  {
    *(void *)(a1 + 560) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(char **)(a1 + 520);
  if (v7)
  {
    unint64_t v8 = *(char **)(a1 + 528);
    uint64_t v9 = *(void **)(a1 + 520);
    if (v8 != v7)
    {
      uint64_t v10 = v8 - 8;
      do
      {
        uint64_t v11 = (char *)*((void *)v10 - 2);
        if (v10 != v11) {
          free(v11);
        }
        uint64_t v12 = v10 - 16;
        v10 -= 24;
      }
      while (v12 != v7);
      uint64_t v9 = *(void **)(a1 + 520);
    }
    *(void *)(a1 + 528) = v7;
    operator delete(v9);
  }
  unint64_t v13 = *(void **)(a1 + 344);
  if (v13 != (void *)(a1 + 360)) {
    free(v13);
  }
  sub_1CC29A40C(a1 + 248);
  uint64_t v14 = *(unsigned int *)(a1 + 272);
  if (v14)
  {
    unint64_t v15 = *(uint64_t **)(a1 + 264);
    uint64_t v16 = 8 * v14;
    do
    {
      uint64_t v17 = *v15++;
      MEMORY[0x1D25D9CD0](v17, 8);
      v16 -= 8;
    }
    while (v16);
  }
  uint64_t v18 = *(uint64_t **)(a1 + 312);
  uint64_t v19 = *(unsigned int *)(a1 + 320);
  if (v19)
  {
    uint64_t v24 = 16 * v19;
    do
    {
      uint64_t v25 = *v18;
      v18 += 2;
      MEMORY[0x1D25D9CD0](v25, 8);
      v24 -= 16;
    }
    while (v24);
    uint64_t v18 = *(uint64_t **)(a1 + 312);
  }
  if (v18 != (uint64_t *)(a1 + 328)) {
    free(v18);
  }
  uint64_t v20 = *(void **)(a1 + 264);
  if (v20 != (void *)(a1 + 280)) {
    free(v20);
  }
  *(void *)a1 = &unk_1F260E110;
  unint64_t v21 = *(void **)(a1 + 176);
  if (v21 != (void *)(a1 + 192)) {
    free(v21);
  }
  uint64_t v22 = *(void **)(a1 + 104);
  if (v22 != (void *)(a1 + 120)) {
    free(v22);
  }
  uint64_t v23 = *(void **)(a1 + 32);
  if (v23 != (void *)(a1 + 48)) {
    free(v23);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC29A854(llvm *a1)
{
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLazyBlockFrequencyInfoPassPass(a1, v2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CC29A914(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCB508;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260B7D8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCB510, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC29A854;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCCB510, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC29A9C4()
{
}

void sub_1CC29AA04(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

llvm::AnalysisUsage *sub_1CC29AA3C(uint64_t a1, llvm::LazyBlockFrequencyInfoPass *a2)
{
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  return llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(a2, v3);
}

uint64_t sub_1CC29AABC(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((void *)a1 + 1) + 24), &llvm::TargetPassConfig::ID, 1);
    if (AnalysisPass)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID);
      if (v5)
      {
        uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 112) + 16))(*(void *)(v5 + 112), a2);
        (*(void (**)(uint64_t))(*(void *)v6 + 120))(v6);
        uint64_t v7 = (uint64_t *)*((void *)a1 + 1);
        uint64_t v8 = *v7;
        uint64_t v9 = v7[1];
        if (v8 == v9)
        {
LABEL_7:
          uint64_t v10 = 0;
        }
        else
        {
          while (*(char **)v8 != llvm::TargetLibraryInfoWrapperPass::ID)
          {
            v8 += 16;
            if (v8 == v9) {
              goto LABEL_7;
            }
          }
          uint64_t v10 = *(void *)(v8 + 8);
        }
        uint64_t v12 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v10 + 96))(v10, llvm::TargetLibraryInfoWrapperPass::ID);
        uint64_t v30 = 0;
        *(void *)uint64_t v29 = 0;
        LODWORD(v31) = 0;
        uint64_t v33 = 0;
        uint64_t v32 = 0;
        int v34 = 0;
        uint64_t v36 = 0;
        uint64_t v35 = 0;
        LODWORD(v37) = 0;
        uint64_t v13 = v12 + 32;
        if (!*(unsigned char *)(v12 + 232))
        {
          uint64_t v14 = (void *)(*(void *)(a2 + 40) + 216);
          __int16 v39 = 260;
          int v38 = v14;
          llvm::Triple::Triple((llvm::Triple *)&v40, (const llvm::Twine *)&v38);
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          int v25 = 0;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          *(void *)&long long v15 = -1;
          *((void *)&v15 + 1) = -1;
          *(_OWORD *)__src = v15;
          long long v17 = v15;
          long long v18 = v15;
          long long v19 = v15;
          long long v20 = v15;
          long long v21 = v15;
          *(_OWORD *)uint64_t v22 = v15;
          *(void *)&v22[13] = -1;
          sub_1CC153974((uint64_t)__src, (int *)&v40);
          sub_1CD4D04B8(v13, (uint64_t)__src);
          sub_1CD4CFA4C((uint64_t *)__src);
          if (SHIBYTE(v41) < 0) {
            operator delete(v40);
          }
        }
        sub_1CC1569E8(__src, v13);
      }
    }
  }
  return 0;
}

uint64_t sub_1CC29D588(uint64_t ****a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v2 = *((unsigned __int8 *)a1 + 104);
  uint64_t v3 = (uint64_t)a1[1];
  uint64_t v4 = v3 + 40;
  for (uint64_t i = *(void *)(v3 + 48); i != v4; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v6 = i - 24;
    if (!i) {
      uint64_t v6 = 0;
    }
    if (*(unsigned char *)(v6 + 16) != 83)
    {
      unsigned int v7 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v8 = v7 > 0x38;
      uint64_t v9 = (1 << v7) & 0x100060000000001;
      if (v8 || v9 == 0) {
        uint64_t v4 = i;
      }
      else {
        uint64_t v4 = *(void *)(i + 8);
      }
      break;
    }
  }
  sub_1CBF5385C((uint64_t)(a1 + 16), v3, v4);
  if (v2)
  {
    uint64_t v12 = ****a1;
    uint64_t v13 = *(llvm::ConstantInt **)(v12 + 1960);
    unint64_t v14 = *(unsigned int *)(v12 + 1968);
    LODWORD(v77) = v14 >> 8;
    if (v14 >> 8 > 0x40) {
      operator new[]();
    }
    if (v14 <= 0xFF) {
      LOBYTE(v15) = 0;
    }
    else {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v14) + 63);
    }
    uint64_t v76 = (uint64_t ***)(v15 & 1);
    Select = (uint64_t **)llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v76, v11);
    if (v77 >= 0x41 && v76) {
      MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
    }
    long long v17 = a1[12];
    long long v18 = a1[1];
    int v19 = *((_DWORD *)v17 + 5);
    uint64_t v20 = v19 & 0x7FFFFFF;
    if ((v19 & 0x7FFFFFF) == *((_DWORD *)v17 + 15))
    {
      unsigned int v21 = v20 + (v20 >> 1);
      if (v21 <= 2) {
        uint64_t v22 = 2;
      }
      else {
        uint64_t v22 = v21;
      }
      *((_DWORD *)v17 + 15) = v22;
      if ((v19 & 0x40000000) != 0) {
        uint64_t v23 = (uint64_t *)*(v17 - 1);
      }
      else {
        uint64_t v23 = (uint64_t *)&v17[-4 * v20];
      }
      __p = v23;
      uint64_t v24 = (uint64_t **)operator new(40 * v22);
      *(v17 - 1) = v24;
      int v25 = v24;
      do
      {
        *int v25 = 0;
        v25[1] = 0;
        v25[2] = 0;
        v25[3] = (uint64_t *)v17;
        v25 += 4;
      }
      while (v25 != &v24[4 * v22]);
      int v26 = *((_DWORD *)v17 + 5);
      if ((v26 & 0x40000000) != 0) {
        uint64_t v27 = (uint64_t)v24;
      }
      else {
        uint64_t v27 = (uint64_t)&v17[-4 * (v26 & 0x7FFFFFF)];
      }
      sub_1CC5E4108((uint64_t)&v76, __p, &__p[4 * v20], v27);
      if (v20)
      {
        memmove((void *)(v27 + 32 * v22), &__p[4 * v20], 8 * v20);
        uint64_t v28 = 4 * v20;
        do
        {
          uint64_t v29 = &__p[v28];
          if (__p[v28 - 4])
          {
            *(void *)*(v29 - 2) = *(v29 - 3);
            uint64_t v30 = *(v29 - 3);
            if (v30) {
              *(void *)(v30 + 16) = *(v29 - 2);
            }
          }
          v28 -= 4;
        }
        while (v28 * 8);
      }
LABEL_80:
      operator delete(__p);
      int v19 = *((_DWORD *)v17 + 5);
    }
  }
  else
  {
    uint64_t v31 = a1[2];
    uint64_t v32 = (uint64_t)a1[3];
    __int16 v78 = 257;
    int v34 = sub_1CB845F20((uint64_t)(a1 + 16), 36, v31, v32, (uint64_t)&v76);
    uint64_t v35 = (uint64_t)*a1[24];
    uint64_t v36 = *(llvm::ConstantInt **)(v35 + 1960);
    unint64_t v37 = *(unsigned int *)(v35 + 1968);
    LODWORD(v77) = v37 >> 8;
    if (v37 >> 8 > 0x40) {
      operator new[]();
    }
    if (v37 <= 0xFF) {
      unint64_t v38 = 0;
    }
    else {
      unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v37) + 63);
    }
    uint64_t v76 = (uint64_t ***)v38;
    uint64_t v40 = (llvm::Value *)llvm::ConstantInt::get(v36, (llvm::LLVMContext *)&v76, v33);
    if (v77 >= 0x41 && v76) {
      MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
    }
    uint64_t v41 = (uint64_t)*a1[24];
    uint64_t v42 = *(llvm::ConstantInt **)(v41 + 1960);
    unint64_t v43 = *(unsigned int *)(v41 + 1968);
    LODWORD(v77) = v43 >> 8;
    if (v43 >> 8 > 0x40) {
      operator new[]();
    }
    if (v43 <= 0xFF) {
      LOBYTE(v44) = 0;
    }
    else {
      unint64_t v44 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v43) + 63);
    }
    uint64_t v76 = (uint64_t ***)(v44 & 1);
    int v45 = (llvm::Value *)llvm::ConstantInt::get(v42, (llvm::LLVMContext *)&v76, v39);
    if (v77 >= 0x41 && v76) {
      MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
    }
    __int16 v78 = 257;
    Select = (uint64_t **)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)(a1 + 16), v34, v40, v45, (const llvm::Twine *)&v76, 0);
    long long v17 = a1[12];
    long long v18 = a1[1];
    int v19 = *((_DWORD *)v17 + 5);
    uint64_t v46 = v19 & 0x7FFFFFF;
    if ((v19 & 0x7FFFFFF) == *((_DWORD *)v17 + 15))
    {
      unsigned int v65 = v46 + (v46 >> 1);
      if (v65 <= 2) {
        uint64_t v66 = 2;
      }
      else {
        uint64_t v66 = v65;
      }
      *((_DWORD *)v17 + 15) = v66;
      if ((v19 & 0x40000000) != 0) {
        uint64_t v67 = (uint64_t *)*(v17 - 1);
      }
      else {
        uint64_t v67 = (uint64_t *)&v17[-4 * v46];
      }
      __p = v67;
      uint64_t v68 = (uint64_t **)operator new(40 * v66);
      *(v17 - 1) = v68;
      unint64_t v69 = v68;
      do
      {
        *unint64_t v69 = 0;
        v69[1] = 0;
        v69[2] = 0;
        v69[3] = (uint64_t *)v17;
        v69 += 4;
      }
      while (v69 != &v68[4 * v66]);
      int v70 = *((_DWORD *)v17 + 5);
      if ((v70 & 0x40000000) != 0) {
        uint64_t v71 = (uint64_t)v68;
      }
      else {
        uint64_t v71 = (uint64_t)&v17[-4 * (v70 & 0x7FFFFFF)];
      }
      sub_1CC5E4108((uint64_t)&v76, __p, &__p[4 * v46], v71);
      if (v46)
      {
        memmove((void *)(v71 + 32 * v66), &__p[4 * v46], 8 * v46);
        uint64_t v72 = 4 * v46;
        do
        {
          uint64_t v73 = &__p[v72];
          if (__p[v72 - 4])
          {
            *(void *)*(v73 - 2) = *(v73 - 3);
            uint64_t v74 = *(v73 - 3);
            if (v74) {
              *(void *)(v74 + 16) = *(v73 - 2);
            }
          }
          v72 -= 4;
        }
        while (v72 * 8);
      }
      goto LABEL_80;
    }
  }
  uint64_t v47 = (v19 + 1) & 0x7FFFFFF;
  *((_DWORD *)v17 + 5) = v19 & 0xF8000000 | (v19 + 1) & 0x7FFFFFF;
  uint64_t v48 = (v47 - 1);
  if ((v19 & 0x40000000) != 0) {
    uint64_t v49 = (uint64_t ***)*(v17 - 1);
  }
  else {
    uint64_t v49 = &v17[-4 * v47];
  }
  uint64_t v50 = &v49[4 * v48];
  if (*v50)
  {
    *v50[2] = (uint64_t *)v50[1];
    BOOL v64 = v50[1];
    if (v64) {
      v64[2] = (uint64_t *)v50[2];
    }
  }
  *uint64_t v50 = Select;
  if (Select)
  {
    uint64_t v53 = (uint64_t **)Select[1];
    uint64_t v52 = Select + 1;
    uint64_t v51 = v53;
    uint64_t v54 = &v49[4 * v48];
    v54[1] = v53;
    if (v53) {
      v51[2] = (uint64_t *)(v54 + 1);
    }
    v54[2] = v52;
    *uint64_t v52 = (uint64_t *)v50;
  }
  int v55 = *((_DWORD *)v17 + 5);
  uint64_t v56 = v55 & 0x7FFFFFF;
  if ((v55 & 0x40000000) != 0) {
    uint64_t v57 = (uint64_t ***)*(v17 - 1);
  }
  else {
    uint64_t v57 = &v17[-4 * v56];
  }
  (&v57[4 * *((unsigned int *)v17 + 15)])[(v56 - 1)] = (uint64_t **)v18;
  unint64_t v58 = a1[11];
  uint64_t v59 = (char *)operator new(0x60uLL);
  *((_DWORD *)v59 + 13) = *((_DWORD *)v59 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v59 = 0;
  *((void *)v59 + 2) = 0;
  *((void *)v59 + 1) = 0;
  *((void *)v59 + 4) = ***v58 + 1576;
  *((void *)v59 + 3) = v59 + 32;
  *((void *)v59 + 5) = 0;
  v59[48] = 30;
  v59[49] = 0;
  *((_WORD *)v59 + 25) = 0;
  *((_DWORD *)v59 + 13) = 1;
  *(_OWORD *)(v59 + 56) = 0u;
  *(_OWORD *)(v59 + 72) = 0u;
  *((_DWORD *)v59 + 22) = 0;
  uint64_t v60 = v58 + 1;
  uint64_t v61 = v58[1];
  *(void *)uint64_t v59 = v58;
  *((void *)v59 + 1) = v61;
  if (v61) {
    v61[2] = (uint64_t *)(v59 + 8);
  }
  *((void *)v59 + 2) = v60;
  void *v60 = v59;
  __int16 v78 = 257;
  sub_1CB844E0C((uint64_t *)a1 + 16, (llvm::Instruction *)(v59 + 32), (uint64_t)&v76);
  uint64_t result = (uint64_t)a1[15];
  if (result)
  {
    unint64_t v63 = (unint64_t)a1[11] & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v76 = a1[1];
    unint64_t v77 = v63;
    return llvm::DomTreeUpdater::applyUpdates(result, (unint64_t *)&v76, 1);
  }
  return result;
}

llvm::Instruction *sub_1CC29DCB8(llvm::IntegerType ****a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = a1[8];
  if ((unint64_t)a1[7] >= *((unsigned int *)a1 + 68) - (unint64_t)*a3) {
    LODWORD(v6) = *((_DWORD *)a1 + 68) - *a3;
  }
  else {
    uint64_t v6 = a1[7];
  }
  if (v5 != a1[9])
  {
    unsigned int v7 = (llvm::IntegerType ***)v5[a2];
    a1[22] = v7;
    a1[23] = v7 + 5;
    goto LABEL_9;
  }
  BOOL v8 = *a1;
  uint64_t v9 = (uint64_t)(*a1 + 3);
  a1[22] = (llvm::IntegerType ***)(*a1)[5];
  a1[23] = (llvm::IntegerType ***)v9;
  uint64_t v10 = (unsigned __int8 *)v8[6];
  v107[0] = v10;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)v107, v10, 2);
    uint64_t v11 = v107[0];
  }
  else
  {
    uint64_t v11 = 0;
  }
  sub_1CB8461A4((uint64_t)(v4 + 16), 0, v11);
  if (v107[0])
  {
    int v94 = *(unsigned __int8 *)v107[0];
    if ((v94 - 4) > 0x1E)
    {
      if ((v94 - 3) >= 0xFFFFFFFE) {
        uint64_t v97 = v107[0];
      }
      else {
        uint64_t v97 = 0;
      }
      if ((v94 - 3) < 0xFFFFFFFE)
      {
        if (v94 == 3) {
          *(void *)(v107[0] + 8) = 0;
        }
        goto LABEL_9;
      }
      unint64_t v96 = v97 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v107[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v107[0] + 12)) {
        goto LABEL_9;
      }
      uint64_t v95 = *(void *)(v107[0] + 16);
      if ((v95 & 4) == 0) {
        goto LABEL_9;
      }
      unint64_t v96 = v95 & 0xFFFFFFFFFFFFFFF8;
      if (!v96) {
        goto LABEL_9;
      }
    }
    v109[0] = (const char *)v107;
    sub_1CC5FA668(v96 + 16, v109);
  }
LABEL_9:
  uint64_t v99 = v4;
  if (v6 == 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v13 = llvm::IntegerType::get(***v4, (llvm::LLVMContext *)(8 * *((_DWORD *)v4 + 10)));
    if (!v6)
    {
      unint64_t v103 = 0;
      __int16 v39 = 0;
      unint64_t v15 = 0;
      goto LABEL_57;
    }
    uint64_t v12 = (llvm::Constant *)v13;
  }
  unint64_t v100 = 0;
  unint64_t v103 = 0;
  int v14 = 0;
  __p = 0;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = (uint64_t)(v4 + 16);
  unsigned int v18 = *a3;
  do
  {
    int v19 = &v4[33][2 * v18];
    uint64_t v20 = (llvm::Constant *)llvm::IntegerType::get(***v4, (llvm::LLVMContext *)(8 * *v19));
    uint64_t v22 = sub_1CC29E540((const llvm::DataLayout **)v4, v20, 0, v12, v19[2]);
    if (v6 == 1)
    {
      __int16 v110 = 257;
      unint64_t v100 = sub_1CB845F20(v17, 33, v22, v21, (uint64_t)v109);
    }
    else
    {
      __int16 v110 = 257;
      uint64_t v23 = sub_1CC2428C0(v17, (uint64_t)v22, v21, (uint64_t)v109);
      __int16 v108 = 257;
      if (*(llvm::Constant **)v23 != v12)
      {
        if (*((unsigned __int8 *)v23 + 16) <= 0x14u)
        {
          uint64_t v23 = (llvm::Instruction *)((uint64_t (*)(llvm::IntegerType ***, uint64_t, llvm::Instruction *, llvm::Constant *))(*v4[25])[28])(v4[25], 39, v23, v12);
          if (v23) {
            BOOL v26 = *((unsigned __int8 *)v23 + 16) >= 0x1Cu;
          }
          else {
            BOOL v26 = 0;
          }
          if (v26)
          {
            uint64_t v35 = v23;
            ((void (*)(llvm::IntegerType ***))(*v4[26])[2])(v4[26]);
            uint64_t v36 = *((unsigned int *)v4 + 34);
            if (v36)
            {
              unint64_t v37 = v99[16];
              unint64_t v38 = &v37[2 * v36];
              do
              {
                llvm::Instruction::setMetadata(v35, *(_DWORD *)v37, (llvm::MDNode *)v37[1]);
                v37 += 2;
              }
              while (v37 != v38);
            }
            uint64_t v4 = v99;
            uint64_t v23 = v35;
          }
        }
        else
        {
          __int16 v110 = 257;
          uint64_t v24 = llvm::CastInst::Create(39, (uint64_t)v23, (uint64_t)v12, v109, 0);
          ((void (*)(llvm::IntegerType ***))(*v4[26])[2])(v4[26]);
          uint64_t v25 = *((unsigned int *)v4 + 34);
          if (v25)
          {
            int v34 = v4[16];
            unint64_t v104 = &v34[2 * v25];
            do
            {
              llvm::Instruction::setMetadata(v24, *(_DWORD *)v34, (llvm::MDNode *)v34[1]);
              v34 += 2;
            }
            while (v34 != v104);
          }
          uint64_t v23 = v24;
        }
      }
      unint64_t v103 = (llvm::ConstantInt **)v23;
      if (v15 >= v16)
      {
        uint64_t v27 = v15 - __p;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_157;
        }
        if (((char *)v16 - (char *)__p) >> 2 > v28) {
          unint64_t v28 = ((char *)v16 - (char *)__p) >> 2;
        }
        if ((unint64_t)((char *)v16 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29)
        {
          if (v29 >> 61) {
            goto LABEL_158;
          }
          uint64_t v30 = (char *)operator new(8 * v29);
        }
        else
        {
          uint64_t v30 = 0;
        }
        uint64_t v31 = (llvm::ConstantInt ***)&v30[8 * v27];
        *uint64_t v31 = v103;
        uint64_t v32 = (llvm::Instruction **)(v31 + 1);
        while (v15 != __p)
        {
          uint64_t v33 = (llvm::ConstantInt **)*--v15;
          *--uint64_t v31 = v33;
        }
        uint64_t v16 = (llvm::Instruction **)&v30[8 * v29];
        if (__p) {
          operator delete(__p);
        }
        unint64_t v15 = v32;
        __p = (llvm::Instruction **)v31;
        uint64_t v4 = v99;
      }
      else
      {
        *v15++ = v23;
      }
    }
    ++v14;
    unsigned int v18 = *a3 + 1;
    *a3 = v18;
  }
  while (v14 != v6);
  __int16 v39 = __p;
  uint64_t v40 = v100;
  if (!v100)
  {
LABEL_57:
    __pa = v39;
    if ((char *)v15 - (char *)v39 == 8)
    {
      uint64_t v42 = 0;
      unint64_t v43 = 0;
      unint64_t v44 = 0;
      int v45 = v15 - 1;
LABEL_59:
      uint64_t v46 = ((char *)v43 - v44) >> 3;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61) {
LABEL_157:
      }
        abort();
      if (((char *)v42 - v44) >> 2 > v47) {
        unint64_t v47 = ((char *)v42 - v44) >> 2;
      }
      if ((unint64_t)((char *)v42 - v44) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v47)
      {
        if (v47 >> 61) {
LABEL_158:
        }
          sub_1CB833614();
        uint64_t v48 = (char *)operator new(8 * v47);
      }
      else
      {
        uint64_t v48 = 0;
      }
      unsigned int v65 = &v48[8 * v46];
      *(void *)unsigned int v65 = *v45;
      BOOL v64 = (llvm::Instruction **)(v65 + 8);
      if (v43 != (llvm::Instruction **)v44)
      {
        do
        {
          uint64_t v66 = (uint64_t)*--v43;
          *((void *)v65 - 1) = v66;
          v65 -= 8;
        }
        while (v43 != (llvm::Instruction **)v44);
        unint64_t v43 = (llvm::Instruction **)v44;
      }
      unint64_t v44 = v65;
      if (v43) {
        operator delete(v43);
      }
      goto LABEL_97;
    }
    unint64_t v44 = 0;
    unint64_t v43 = 0;
    uint64_t v42 = 0;
    uint64_t v49 = 0;
    unsigned int v50 = 0;
    uint64_t v51 = (uint64_t)(v4 + 16);
    char v101 = (_BYTE)v15 - (_BYTE)v39;
    unint64_t v52 = v15 - v39 - 1;
    do
    {
      uint64_t v53 = __pa[v49];
      uint64_t v54 = (uint64_t)__pa[v50 | 1];
      __int16 v110 = 257;
      int v55 = sub_1CB844AF4(v51, v53, v54, (uint64_t)v109);
      uint64_t v56 = v55;
      if (v43 >= v42)
      {
        uint64_t v57 = ((char *)v43 - v44) >> 3;
        unint64_t v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 61) {
          goto LABEL_157;
        }
        if (((char *)v42 - v44) >> 2 > v58) {
          unint64_t v58 = ((char *)v42 - v44) >> 2;
        }
        if ((unint64_t)((char *)v42 - v44) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v59)
        {
          if (v59 >> 61) {
            goto LABEL_158;
          }
          uint64_t v60 = (char *)operator new(8 * v59);
        }
        else
        {
          uint64_t v60 = 0;
        }
        uint64_t v61 = (llvm::Instruction **)&v60[8 * v57];
        *uint64_t v61 = v56;
        int v62 = v61 + 1;
        while (v43 != (llvm::Instruction **)v44)
        {
          unint64_t v63 = *--v43;
          *--uint64_t v61 = v63;
        }
        uint64_t v42 = (llvm::Instruction **)&v60[8 * v59];
        if (v44) {
          operator delete(v44);
        }
        unint64_t v44 = (char *)v61;
        unint64_t v43 = v62;
      }
      else
      {
        *v43++ = v55;
      }
      v50 += 2;
      uint64_t v49 = v50;
    }
    while (v52 > v50);
    if ((v101 & 8) != 0)
    {
      int v45 = v15 - 1;
      uint64_t v4 = v99;
      if (v43 >= v42) {
        goto LABEL_59;
      }
      void *v43 = *v45;
      BOOL v64 = v43 + 1;
    }
    else
    {
      BOOL v64 = v43;
      uint64_t v4 = v99;
    }
LABEL_97:
    uint64_t v67 = (char *)v64 - v44;
    if ((char *)v64 - v44 == 8)
    {
LABEL_140:
      uint64_t v92 = *(void **)v44;
      uint64_t v93 = llvm::ConstantInt::get(*v103, 0, 0);
      __int16 v110 = 257;
      uint64_t v40 = sub_1CB845F20((uint64_t)(v4 + 16), 33, v92, (uint64_t)v93, (uint64_t)v109);
      operator delete(v44);
      __int16 v39 = __pa;
      if (!__pa) {
        return v40;
      }
      goto LABEL_54;
    }
    uint64_t v68 = (uint64_t)(v4 + 16);
    while (1)
    {
      v98 = v64;
      unint64_t v69 = 0;
      int v70 = 0;
      uint64_t v71 = 0;
      unsigned int v72 = 0;
      uint64_t v73 = v44;
      char v102 = v67;
      unint64_t v74 = (v67 >> 3) - 1;
      unint64_t v44 = 0;
      do
      {
        unsigned int v75 = *(void **)&v73[8 * v71];
        uint64_t v76 = *(void *)&v73[8 * (v72 | 1)];
        __int16 v110 = 257;
        unint64_t v77 = sub_1CB844AF4(v68, v75, v76, (uint64_t)v109);
        __int16 v78 = v77;
        if (v69 >= v70)
        {
          uint64_t v79 = ((char *)v69 - v44) >> 3;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61) {
            goto LABEL_157;
          }
          if (((char *)v70 - v44) >> 2 > v80) {
            unint64_t v80 = ((char *)v70 - v44) >> 2;
          }
          if ((unint64_t)((char *)v70 - v44) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v80;
          }
          if (v81)
          {
            if (v81 >> 61) {
              goto LABEL_158;
            }
            int v82 = (char *)operator new(8 * v81);
          }
          else
          {
            int v82 = 0;
          }
          unsigned int v83 = (llvm::Instruction **)&v82[8 * v79];
          *unsigned int v83 = v78;
          unsigned int v84 = v83 + 1;
          while (v69 != (llvm::Instruction **)v44)
          {
            uint64_t v85 = *--v69;
            *--unsigned int v83 = v85;
          }
          int v70 = (llvm::Instruction **)&v82[8 * v81];
          if (v44) {
            operator delete(v44);
          }
          unint64_t v44 = (char *)v83;
          unint64_t v69 = v84;
        }
        else
        {
          *v69++ = v77;
        }
        v72 += 2;
        uint64_t v71 = v72;
      }
      while (v74 > v72);
      if ((v102 & 8) != 0)
      {
        if (v69 >= v70)
        {
          uint64_t v86 = ((char *)v69 - v44) >> 3;
          unint64_t v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 61) {
            goto LABEL_157;
          }
          if (((char *)v70 - v44) >> 2 > v87) {
            unint64_t v87 = ((char *)v70 - v44) >> 2;
          }
          if ((unint64_t)((char *)v70 - v44) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v87)
          {
            uint64_t v88 = v98;
            if (v87 >> 61) {
              goto LABEL_158;
            }
            uint64_t v89 = (char *)operator new(8 * v87);
          }
          else
          {
            uint64_t v89 = 0;
            uint64_t v88 = v98;
          }
          uint64_t v90 = &v89[8 * v86];
          *(void *)uint64_t v90 = *(v88 - 1);
          BOOL v64 = (llvm::Instruction **)(v90 + 8);
          if (v69 == (llvm::Instruction **)v44) {
            goto LABEL_135;
          }
          do
          {
            uint64_t v91 = (uint64_t)*--v69;
            *((void *)v90 - 1) = v91;
            v90 -= 8;
          }
          while (v69 != (llvm::Instruction **)v44);
          if (v44) {
LABEL_135:
          }
            operator delete(v44);
          unint64_t v44 = v90;
          goto LABEL_137;
        }
        *v69++ = *(v98 - 1);
      }
      BOOL v64 = v69;
LABEL_137:
      uint64_t v4 = v99;
      if (v73) {
        operator delete(v73);
      }
      uint64_t v67 = (char *)v64 - v44;
      if ((char *)v64 - v44 == 8) {
        goto LABEL_140;
      }
    }
  }
  if (__p) {
LABEL_54:
  }
    operator delete(v39);
  return v40;
}

unsigned __int8 *sub_1CC29E540(const llvm::DataLayout **a1, llvm::Constant *a2, int a3, llvm::Constant *a4, unsigned int a5)
{
  BOOL v8 = a2;
  char v101 = a2;
  uint64_t v10 = (uint64_t)*a1 - 32 * (*((_DWORD *)*a1 + 5) & 0x7FFFFFF);
  uint64_t v11 = *(llvm::Value **)v10;
  uint64_t v12 = *(unsigned __int8 **)(v10 + 32);
  char PointerAlignment = llvm::Value::getPointerAlignment(*(llvm::Value **)v10, a1[14]);
  char v14 = llvm::Value::getPointerAlignment((llvm::Value *)v12, a1[14]);
  char v15 = v14;
  if (a5)
  {
    uint64_t v93 = (llvm::PointerType *)(***(void ***)*a1 + 1912);
    uint64_t v95 = (uint64_t)(a1 + 16);
    unint64_t v60 = llvm::PointerType::get(v93, 0);
    __int16 v100 = 257;
    if (*(void *)v11 != v60)
    {
      if (*((unsigned __int8 *)v11 + 16) <= 0x14u)
      {
        uint64_t v11 = (llvm::Value *)(*(uint64_t (**)(const llvm::DataLayout *, uint64_t, llvm::Value *, unint64_t))(*(void *)a1[25] + 224))(a1[25], 49, v11, v60);
        if (v11) {
          BOOL v67 = *((unsigned __int8 *)v11 + 16) >= 0x1Cu;
        }
        else {
          BOOL v67 = 0;
        }
        if (v67)
        {
          (*(void (**)(const llvm::DataLayout *, llvm::Value *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v11, v99, a1[22], a1[23]);
          uint64_t v85 = *((unsigned int *)a1 + 34);
          if (v85)
          {
            uint64_t v86 = a1[16];
            uint64_t v92 = (const llvm::DataLayout *)((char *)v86 + 16 * v85);
            do
            {
              llvm::Instruction::setMetadata(v11, *(_DWORD *)v86, *((llvm::MDNode **)v86 + 1));
              uint64_t v86 = (const llvm::DataLayout *)((char *)v86 + 16);
            }
            while (v86 != v92);
          }
        }
      }
      else
      {
        __int16 v103 = 257;
        uint64_t v11 = llvm::CastInst::Create(49, (uint64_t)v11, v60, v102, 0);
        (*(void (**)(const llvm::DataLayout *, llvm::Value *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v11, v99, a1[22], a1[23]);
        uint64_t v61 = *((unsigned int *)a1 + 34);
        if (v61)
        {
          int v62 = a1[16];
          uint64_t v90 = (const llvm::DataLayout *)((char *)v62 + 16 * v61);
          do
          {
            llvm::Instruction::setMetadata(v11, *(_DWORD *)v62, *((llvm::MDNode **)v62 + 1));
            int v62 = (const llvm::DataLayout *)((char *)v62 + 16);
          }
          while (v62 != v90);
        }
      }
    }
    __int16 v103 = 257;
    unint64_t v91 = a5;
    uint64_t v11 = sub_1CD51311C(v95, v93, (uint64_t *)v11, a5, (uint64_t)v102);
    unint64_t v68 = llvm::PointerType::get(v93, 0);
    __int16 v100 = 257;
    if (*(void *)v12 != v68)
    {
      if (v12[16] <= 0x14u)
      {
        uint64_t v12 = (unsigned __int8 *)(*(uint64_t (**)(const llvm::DataLayout *, uint64_t, unsigned __int8 *, unint64_t))(*(void *)a1[25] + 224))(a1[25], 49, v12, v68);
        if (v12) {
          BOOL v72 = v12[16] >= 0x1Cu;
        }
        else {
          BOOL v72 = 0;
        }
        if (v72)
        {
          (*(void (**)(const llvm::DataLayout *, unsigned __int8 *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v12, v99, a1[22], a1[23]);
          uint64_t v87 = *((unsigned int *)a1 + 34);
          if (v87)
          {
            uint64_t v88 = a1[16];
            uint64_t v89 = (const llvm::DataLayout *)((char *)v88 + 16 * v87);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v88, *((llvm::MDNode **)v88 + 1));
              uint64_t v88 = (const llvm::DataLayout *)((char *)v88 + 16);
            }
            while (v88 != v89);
          }
        }
      }
      else
      {
        __int16 v103 = 257;
        uint64_t v12 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v12, v68, v102, 0);
        (*(void (**)(const llvm::DataLayout *, unsigned __int8 *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v12, v99, a1[22], a1[23]);
        uint64_t v69 = *((unsigned int *)a1 + 34);
        if (v69)
        {
          int v70 = a1[16];
          uint64_t v71 = (const llvm::DataLayout *)((char *)v70 + 16 * v69);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v70, *((llvm::MDNode **)v70 + 1));
            int v70 = (const llvm::DataLayout *)((char *)v70 + 16);
          }
          while (v70 != v71);
        }
      }
    }
    __int16 v103 = 257;
    unint64_t v73 = v91;
    uint64_t v12 = (unsigned __int8 *)sub_1CD51311C(v95, v93, (uint64_t *)v12, v91, (uint64_t)v102);
    char PointerAlignment = 63 - __clz(((1 << PointerAlignment) | v73) & -(uint64_t)((1 << PointerAlignment) | v73));
    char v16 = 63 - __clz(((1 << v15) | v73) & -(uint64_t)((1 << v15) | v73));
  }
  else
  {
    char v16 = v14;
  }
  unint64_t v17 = llvm::PointerType::get(v8, 0);
  __int16 v100 = 257;
  if (*(void *)v11 != v17)
  {
    if (*((unsigned __int8 *)v11 + 16) <= 0x14u)
    {
      uint64_t v11 = (llvm::Value *)(*(uint64_t (**)(const llvm::DataLayout *, uint64_t, llvm::Value *, unint64_t))(*(void *)a1[25] + 224))(a1[25], 49, v11, v17);
      if (v11) {
        BOOL v20 = *((unsigned __int8 *)v11 + 16) >= 0x1Cu;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20)
      {
        (*(void (**)(const llvm::DataLayout *, llvm::Value *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v11, v99, a1[22], a1[23]);
        uint64_t v74 = *((unsigned int *)a1 + 34);
        if (v74)
        {
          unsigned int v75 = a1[16];
          unint64_t v96 = (const llvm::DataLayout *)((char *)v75 + 16 * v74);
          do
          {
            llvm::Instruction::setMetadata(v11, *(_DWORD *)v75, *((llvm::MDNode **)v75 + 1));
            unsigned int v75 = (const llvm::DataLayout *)((char *)v75 + 16);
          }
          while (v75 != v96);
        }
      }
    }
    else
    {
      __int16 v103 = 257;
      uint64_t v11 = llvm::CastInst::Create(49, (uint64_t)v11, v17, v102, 0);
      (*(void (**)(const llvm::DataLayout *, llvm::Value *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v11, v99, a1[22], a1[23]);
      uint64_t v18 = *((unsigned int *)a1 + 34);
      if (v18)
      {
        int v19 = a1[16];
        int v94 = (const llvm::DataLayout *)((char *)v19 + 16 * v18);
        do
        {
          llvm::Instruction::setMetadata(v11, *(_DWORD *)v19, *((llvm::MDNode **)v19 + 1));
          int v19 = (const llvm::DataLayout *)((char *)v19 + 16);
        }
        while (v19 != v94);
      }
    }
  }
  unint64_t v21 = llvm::PointerType::get(v8, 0);
  __int16 v100 = 257;
  if (*(void *)v12 != v21)
  {
    if (v12[16] <= 0x14u)
    {
      uint64_t v12 = (unsigned __int8 *)(*(uint64_t (**)(const llvm::DataLayout *, uint64_t, unsigned __int8 *, unint64_t))(*(void *)a1[25] + 224))(a1[25], 49, v12, v21);
      if (v12) {
        BOOL v29 = v12[16] >= 0x1Cu;
      }
      else {
        BOOL v29 = 0;
      }
      if (v29)
      {
        (*(void (**)(const llvm::DataLayout *, unsigned __int8 *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v12, v99, a1[22], a1[23]);
        uint64_t v76 = *((unsigned int *)a1 + 34);
        if (v76)
        {
          unint64_t v77 = a1[16];
          __int16 v78 = (const llvm::DataLayout *)((char *)v77 + 16 * v76);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v77, *((llvm::MDNode **)v77 + 1));
            unint64_t v77 = (const llvm::DataLayout *)((char *)v77 + 16);
          }
          while (v77 != v78);
        }
      }
    }
    else
    {
      __int16 v103 = 257;
      uint64_t v12 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v12, v21, v102, 0);
      (*(void (**)(const llvm::DataLayout *, unsigned __int8 *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v12, v99, a1[22], a1[23]);
      uint64_t v26 = *((unsigned int *)a1 + 34);
      if (v26)
      {
        uint64_t v27 = a1[16];
        unint64_t v28 = (const llvm::DataLayout *)((char *)v27 + 16 * v26);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v27, *((llvm::MDNode **)v27 + 1));
          uint64_t v27 = (const llvm::DataLayout *)((char *)v27 + 16);
        }
        while (v27 != v28);
      }
    }
  }
  v98 = 0;
  if (*((unsigned __int8 *)v11 + 16) <= 0x14u && v11 != 0)
  {
    v98 = (unsigned __int8 *)llvm::ConstantFoldLoadFromConstPtr(v11, v8, a1[14], v22, v23, v24, v25);
    if (v98) {
      goto LABEL_31;
    }
    BOOL v8 = v101;
  }
  __int16 v100 = 257;
  uint64_t v35 = operator new(0x60uLL);
  v35[13] = v35[13] & 0x38000000 | 1;
  uint64_t v36 = (llvm::Instruction *)(v35 + 8);
  *(void *)uint64_t v35 = 0;
  *((void *)v35 + 1) = 0;
  *((void *)v35 + 2) = 0;
  *((void *)v35 + 3) = v35 + 8;
  __int16 v103 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v35 + 8), (uint64_t)v8, (uint64_t)v11, v102, 0, PointerAlignment, 0);
  (*(void (**)(const llvm::DataLayout *, llvm::Instruction *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v36, v99, a1[22], a1[23]);
  uint64_t v37 = *((unsigned int *)a1 + 34);
  if (v37)
  {
    unint64_t v63 = a1[16];
    BOOL v64 = (const llvm::DataLayout *)((char *)v63 + 16 * v37);
    do
    {
      llvm::Instruction::setMetadata(v36, *(_DWORD *)v63, *((llvm::MDNode **)v63 + 1));
      unint64_t v63 = (const llvm::DataLayout *)((char *)v63 + 16);
    }
    while (v63 != v64);
  }
  v98 = (unsigned __int8 *)v36;
LABEL_31:
  uint64_t v97 = 0;
  BOOL v38 = v12[16] > 0x14u || v12 == 0;
  if (v38 || (uint64_t v97 = (uint64_t)llvm::ConstantFoldLoadFromConstPtr((llvm *)v12, v101, a1[14], v31, v32, v33, v34)) == 0)
  {
    __int16 v39 = v101;
    __int16 v100 = 257;
    uint64_t v40 = operator new(0x60uLL);
    v40[13] = v40[13] & 0x38000000 | 1;
    uint64_t v41 = (llvm::Instruction *)(v40 + 8);
    *(void *)uint64_t v40 = 0;
    *((void *)v40 + 1) = 0;
    *((void *)v40 + 2) = 0;
    *((void *)v40 + 3) = v40 + 8;
    __int16 v103 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v40 + 8), (uint64_t)v39, (uint64_t)v12, v102, 0, v16, 0);
    (*(void (**)(const llvm::DataLayout *, llvm::Instruction *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v41, v99, a1[22], a1[23]);
    uint64_t v42 = *((unsigned int *)a1 + 34);
    if (v42)
    {
      unsigned int v65 = a1[16];
      uint64_t v66 = (const llvm::DataLayout *)((char *)v65 + 16 * v42);
      do
      {
        llvm::Instruction::setMetadata(v41, *(_DWORD *)v65, *((llvm::MDNode **)v65 + 1));
        unsigned int v65 = (const llvm::DataLayout *)((char *)v65 + 16);
      }
      while (v65 != v66);
    }
    uint64_t v97 = (uint64_t)v41;
  }
  if (a3)
  {
    uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*((void *)*a1 + 5) + 56) + 40), 9, (uint64_t)&v101, 1);
    uint64_t v44 = Declaration;
    if (Declaration)
    {
      int v45 = *(uint64_t ***)(Declaration + 24);
      __int16 v103 = 257;
      uint64_t v46 = (unsigned __int8 *)sub_1CB845BAC((uint64_t *)a1 + 16, v45, (uint64_t **)Declaration, (uint64_t *)&v98, 1, (uint64_t)v102, 0);
      unint64_t v47 = *(uint64_t ***)(v44 + 24);
    }
    else
    {
      __int16 v103 = 257;
      uint64_t v46 = (unsigned __int8 *)sub_1CB845BAC((uint64_t *)a1 + 16, 0, 0, (uint64_t *)&v98, 1, (uint64_t)v102, 0);
      unint64_t v47 = 0;
    }
    v98 = v46;
    __int16 v103 = 257;
    uint64_t v97 = sub_1CB845BAC((uint64_t *)a1 + 16, v47, (uint64_t **)v44, &v97, 1, (uint64_t)v102, 0);
  }
  uint64_t v48 = v98;
  if (a4 && v101 != a4)
  {
    __int16 v100 = 257;
    if (*(llvm::Constant **)v98 != a4)
    {
      if (v98[16] <= 0x14u)
      {
        uint64_t v48 = (unsigned __int8 *)(*(uint64_t (**)(const llvm::DataLayout *, uint64_t, unsigned __int8 *, llvm::Constant *))(*(void *)a1[25] + 224))(a1[25], 39, v98, a4);
        if (v48) {
          BOOL v52 = v48[16] >= 0x1Cu;
        }
        else {
          BOOL v52 = 0;
        }
        if (v52)
        {
          (*(void (**)(const llvm::DataLayout *, unsigned __int8 *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v48, v99, a1[22], a1[23]);
          uint64_t v79 = *((unsigned int *)a1 + 34);
          if (v79)
          {
            unint64_t v80 = a1[16];
            unint64_t v81 = (const llvm::DataLayout *)((char *)v80 + 16 * v79);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v48, *(_DWORD *)v80, *((llvm::MDNode **)v80 + 1));
              unint64_t v80 = (const llvm::DataLayout *)((char *)v80 + 16);
            }
            while (v80 != v81);
          }
        }
      }
      else
      {
        __int16 v103 = 257;
        uint64_t v48 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v98, (uint64_t)a4, v102, 0);
        (*(void (**)(const llvm::DataLayout *, unsigned __int8 *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v48, v99, a1[22], a1[23]);
        uint64_t v49 = *((unsigned int *)a1 + 34);
        if (v49)
        {
          unsigned int v50 = a1[16];
          uint64_t v51 = (const llvm::DataLayout *)((char *)v50 + 16 * v49);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v48, *(_DWORD *)v50, *((llvm::MDNode **)v50 + 1));
            unsigned int v50 = (const llvm::DataLayout *)((char *)v50 + 16);
          }
          while (v50 != v51);
        }
      }
    }
    v98 = v48;
    __int16 v100 = 257;
    if (*(llvm::Constant **)v97 != a4)
    {
      if (*(unsigned __int8 *)(v97 + 16) <= 0x14u)
      {
        uint64_t v57 = (unsigned __int8 *)(*(uint64_t (**)(const llvm::DataLayout *, uint64_t, uint64_t, llvm::Constant *))(*(void *)a1[25] + 224))(a1[25], 39, v97, a4);
        if (v57) {
          BOOL v58 = v57[16] >= 0x1Cu;
        }
        else {
          BOOL v58 = 0;
        }
        if (v58)
        {
          (*(void (**)(const llvm::DataLayout *, unsigned __int8 *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v57, v99, a1[22], a1[23]);
          uint64_t v82 = *((unsigned int *)a1 + 34);
          if (v82)
          {
            unsigned int v83 = a1[16];
            unsigned int v84 = (const llvm::DataLayout *)((char *)v83 + 16 * v82);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v57, *(_DWORD *)v83, *((llvm::MDNode **)v83 + 1));
              unsigned int v83 = (const llvm::DataLayout *)((char *)v83 + 16);
            }
            while (v83 != v84);
          }
        }
      }
      else
      {
        __int16 v103 = 257;
        uint64_t v53 = llvm::CastInst::Create(39, v97, (uint64_t)a4, v102, 0);
        (*(void (**)(const llvm::DataLayout *, llvm::Instruction *, unsigned char *, const llvm::DataLayout *, const llvm::DataLayout *))(*(void *)a1[26] + 16))(a1[26], v53, v99, a1[22], a1[23]);
        uint64_t v54 = *((unsigned int *)a1 + 34);
        if (v54)
        {
          int v55 = a1[16];
          uint64_t v56 = (const llvm::DataLayout *)((char *)v55 + 16 * v54);
          do
          {
            llvm::Instruction::setMetadata(v53, *(_DWORD *)v55, *((llvm::MDNode **)v55 + 1));
            int v55 = (const llvm::DataLayout *)((char *)v55 + 16);
          }
          while (v55 != v56);
        }
      }
    }
    return v98;
  }
  return v48;
}

uint64_t sub_1CC29F180()
{
  int v3 = 1;
  int v1 = 1;
  int v2 = &v1;
  *(void *)&long long v4 = "The number of loads per basic block for inline expansion of memcmp that is only being compared against zero.";
  *((void *)&v4 + 1) = 108;
  sub_1CD45A86C((uint64_t)&unk_1EBCCB518, "memcmp-num-loads-per-block", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCCB518, &dword_1CB82C000);
  LODWORD(v2) = 1;
  *(void *)&long long v4 = "Set maximum number of loads used in expanded memcmp";
  *((void *)&v4 + 1) = 51;
  sub_1CD513224((uint64_t)&unk_1EBCCB5D8, "max-loads-per-memcmp", &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCCB5D8, &dword_1CB82C000);
  LODWORD(v2) = 1;
  *(void *)&long long v4 = "Set maximum number of loads used in expanded memcmp for -Os/Oz";
  *((void *)&v4 + 1) = 62;
  sub_1CD51332C(&v2, &v4);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCCB698, &dword_1CB82C000);
}

void sub_1CC29F294()
{
}

void sub_1CC29F330()
{
}

void sub_1CC29F3D4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    long long v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC29F488(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  long long v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC29F534(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC29F5D8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 328);
  uint64_t v72 = a2 + 320;
  if (v4 != a2 + 320)
  {
    char v5 = 0;
    while (1)
    {
      uint64_t v6 = v4 + 48;
      uint64_t v73 = v4;
      uint64_t v7 = *(void *)(v4 + 56);
      if (v7 != v4 + 48) {
        break;
      }
LABEL_102:
      uint64_t v4 = *(void *)(v73 + 8);
      if (v4 == v72) {
        return v5 & 1;
      }
    }
    while (1)
    {
      if (!v7 || (uint64_t v8 = v7, (*(unsigned char *)v7 & 4) == 0))
      {
        uint64_t v8 = v7;
        if ((*(_WORD *)(v7 + 44) & 8) != 0)
        {
          uint64_t v8 = v7;
          do
            uint64_t v8 = *(void *)(v8 + 8);
          while ((*(_WORD *)(v8 + 44) & 8) != 0);
        }
      }
      uint64_t v9 = *(void *)(v8 + 8);
      if ((*(unsigned char *)(*(void *)(v7 + 16) + 8) & 8) == 0) {
        goto LABEL_12;
      }
      if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 256) + 480))(*(void *)(a1 + 256), v7)) {
        goto LABEL_11;
      }
      int v10 = **(unsigned __int16 **)(v7 + 16);
      if (v10 != 19)
      {
        if (v10 != 11) {
          goto LABEL_12;
        }
        uint64_t v11 = *(_DWORD **)(v7 + 32);
        unsigned int v12 = v11[1];
        uint64_t v13 = *(void **)(a1 + 248);
        uint64_t v14 = v13[1];
        uint64_t v15 = v13[7];
        uint64_t v16 = *(unsigned int *)(v14 + 24 * v12 + 4);
        if (*(_WORD *)(v15 + 2 * v16))
        {
          unsigned __int16 v17 = *(_WORD *)(v15 + 2 * v16) + v12;
          uint64_t v18 = (unsigned __int16 *)(v13[11] + 2 * *(unsigned int *)(v14 + 24 * v12 + 12));
          int v19 = (unsigned __int16 *)(v15 + 2 * v16 + 2);
          while (*v18 != v11[28])
          {
            int v20 = *v19++;
            v17 += v20;
            ++v18;
            if (!v20) {
              goto LABEL_20;
            }
          }
          int v21 = v17;
        }
        else
        {
LABEL_20:
          int v21 = 0;
        }
        uint64_t v30 = *(unsigned int *)(v7 + 40);
        if (!v30)
        {
LABEL_46:
          *(void *)(v7 + 16) = *(void *)(*(void *)(a1 + 256) + 8) + 336;
          llvm::MachineInstr::removeOperand((char *)v7, 3u);
          char v5 = 1;
          llvm::MachineInstr::removeOperand((char *)v7, 1u);
          goto LABEL_12;
        }
        uint64_t v31 = *(void *)(v7 + 24);
        int v32 = v11[17];
        uint64_t v33 = 32 * v30;
        uint64_t v34 = *(_DWORD **)(v7 + 32);
        while ((*v34 & 0x10000FF) != 0x1000000 || (*v34 & 0x5000000) == 83886080)
        {
          v34 += 8;
          v33 -= 32;
          if (!v33) {
            goto LABEL_46;
          }
        }
        if (v21 == v32)
        {
          if (v12 != v32) {
            goto LABEL_46;
          }
          goto LABEL_55;
        }
        uint64_t v36 = *(void *)(v7 + 24);
        (*(void (**)(void))(**(void **)(a1 + 256) + 400))(*(void *)(a1 + 256));
        unint64_t v37 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
        if (v37 && (*(unsigned char *)v37 & 4) != 0 || (*(_WORD *)(v37 + 44) & 4) == 0)
        {
          llvm::MachineInstr::addRegisterDefined(v37, v12, 0);
          uint64_t v31 = v36;
          goto LABEL_55;
        }
        do
          unint64_t v37 = *(void *)v37 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v37 + 44) & 4) != 0);
        llvm::MachineInstr::addRegisterDefined(v37, v12, 0);
        uint64_t v31 = v36;
        if (v7)
        {
LABEL_55:
          uint64_t v38 = v7;
          if ((*(unsigned char *)v7 & 4) == 0) {
            goto LABEL_56;
          }
        }
        else
        {
LABEL_56:
          uint64_t v38 = v7;
          if ((*(_WORD *)(v7 + 44) & 8) != 0)
          {
            uint64_t v38 = v7;
            do
              uint64_t v38 = *(void *)(v38 + 8);
            while ((*(_WORD *)(v38 + 44) & 8) != 0);
          }
        }
        uint64_t v39 = *(void *)(v38 + 8);
        if (v39 != v7)
        {
          do
          {
            uint64_t v40 = *(void *)(v7 + 8);
            uint64_t v41 = *(void *)(*(void *)(v7 + 24) + 32);
            if (v41)
            {
              uint64_t v42 = *(void *)(v41 + 728);
              if (v42)
              {
                uint64_t v43 = v31;
                (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 32))(v42, v7);
                uint64_t v31 = v43;
              }
              uint64_t v44 = *(unsigned int *)(v7 + 40);
              if (v44)
              {
                uint64_t v45 = *(void *)(v7 + 32);
                uint64_t v46 = *(void *)(v41 + 40);
                uint64_t v47 = 32 * v44;
                do
                {
                  if (!*(unsigned char *)v45)
                  {
                    uint64_t v48 = *(unsigned int *)(v45 + 4);
                    if ((v48 & 0x80000000) != 0) {
                      uint64_t v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v48);
                    }
                    uint64_t v50 = *v49;
                    uint64_t v52 = *(void *)(v45 + 16);
                    uint64_t v51 = *(void *)(v45 + 24);
                    if (v45 != *v49) {
                      uint64_t v49 = (uint64_t *)(v52 + 24);
                    }
                    *uint64_t v49 = v51;
                    if (v51) {
                      uint64_t v53 = v51;
                    }
                    else {
                      uint64_t v53 = v50;
                    }
                    *(void *)(v53 + 16) = v52;
                    *(void *)(v45 + 16) = 0;
                    *(void *)(v45 + 24) = 0;
                  }
                  v45 += 32;
                  v47 -= 32;
                }
                while (v47);
              }
            }
            *(void *)(v7 + 24) = 0;
            uint64_t v54 = *(unint64_t **)(v7 + 8);
            unint64_t v55 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
            *uint64_t v54 = v55 | *v54 & 7;
            *(void *)(v55 + 8) = v54;
            *(void *)v7 &= 7uLL;
            *(void *)(v7 + 8) = 0;
            uint64_t v56 = *(void *)(*(void *)(v31 + 40) + 32);
            uint64_t v57 = *(void **)(v7 + 32);
            if (v57)
            {
              uint64_t v58 = *(unsigned __int8 *)(v7 + 47);
              unint64_t v59 = (uint64_t *)(v56 + 232);
              if (*(_DWORD *)(v56 + 240) <= v58)
              {
                uint64_t v71 = v31;
                sub_1CC34BDE0(v56 + 232, v58 + 1);
                uint64_t v31 = v71;
              }
              uint64_t v60 = *v59;
              *uint64_t v57 = *(void *)(*v59 + 8 * v58);
              *(void *)(v60 + 8 * v58) = v57;
            }
            *(void *)uint64_t v7 = *(void *)(v56 + 224);
            *(void *)(v56 + 224) = v7;
            char v5 = 1;
            uint64_t v7 = v40;
          }
          while (v40 != v39);
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      uint64_t v22 = *(unsigned int *)(v7 + 40);
      if (!v22) {
        goto LABEL_48;
      }
      uint64_t v23 = *(_DWORD **)(v7 + 32);
      uint64_t v24 = 32 * v22;
      uint64_t v25 = v23;
      while ((*v25 & 0x10000FF) != 0x1000000 || (*v25 & 0x5000000) == 83886080)
      {
        v25 += 8;
        v24 -= 32;
        if (!v24) {
          goto LABEL_48;
        }
      }
      int v27 = v23[1];
      BOOL v29 = v23 + 8;
      int v28 = v23[8];
      if (v29[1] != v27) {
        break;
      }
      if (v22 > 2 || (v28 & 0x10000000) != 0) {
        goto LABEL_48;
      }
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v7);
LABEL_11:
      char v5 = 1;
LABEL_12:
      uint64_t v7 = v9;
      if (v9 == v6) {
        goto LABEL_102;
      }
    }
    if ((v28 & 0x10000000) == 0)
    {
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 400))(*(void *)(a1 + 256), *(void *)(v7 + 24), v7, v7 + 56);
      uint64_t v61 = *(unsigned int *)(v7 + 40);
      if (v61 >= 3)
      {
        unint64_t v62 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
        if (!v62 || (*(unsigned char *)v62 & 4) == 0)
        {
          while ((*(_WORD *)(v62 + 44) & 4) != 0)
            unint64_t v62 = *(void *)v62 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v63 = *(void *)(v7 + 32);
        unsigned int v64 = *(_DWORD *)(v63 + 4);
        unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v7);
        if (NumExplicitOperands != v61)
        {
          uint64_t v66 = (const llvm::MachineOperand *)(v63 + 32 * NumExplicitOperands);
          uint64_t v67 = 32 * v61 - 32 * NumExplicitOperands;
          do
          {
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, *(llvm::MachineFunction **)(*(void *)(v62 + 24) + 32), v66);
            if ((*(_DWORD *)v66 >> 26) & ~HIBYTE(*(_DWORD *)v66))
            {
              unsigned int v68 = *((_DWORD *)v66 + 1);
              if (v64 == v68
                || v64 - 1 <= 0x3FFFFFFE
                && v68 - 1 <= 0x3FFFFFFE
                && llvm::MCRegisterInfo::regsOverlap((void *)(*(void *)(a1 + 248) + 8), v64, v68))
              {
                uint64_t v69 = 32 * (*(_DWORD *)(v62 + 40) - 1);
                *(_DWORD *)(*(void *)(v62 + 32) + v69) &= ~0x4000000u;
              }
            }
            uint64_t v66 = (const llvm::MachineOperand *)((char *)v66 + 32);
            v67 -= 32;
          }
          while (v67);
        }
      }
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v7);
      char v5 = 1;
      goto LABEL_12;
    }
LABEL_48:
    *(void *)(v7 + 16) = *(void *)(*(void *)(a1 + 256) + 8) + 336;
    goto LABEL_11;
  }
  char v5 = 0;
  return v5 & 1;
}

void llvm::initializeExpandReductionsPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCB768, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC29FCE8;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCCB768, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC29FCE8(uint64_t a1)
{
}

uint64_t sub_1CC29FD88(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCB760;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260B938;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCB768, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC29FCE8;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCCB768, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::ExpandReductionsPass::run()
{
}

uint64_t sub_1CC29FF04(uint64_t a1, void *a2)
{
  v59[4] = *MEMORY[0x1E4F143B8];
  uint64_t v57 = v59;
  uint64_t v58 = 0x400000000;
  uint64_t v2 = a1 + 72;
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3 != a1 + 72)
  {
    while (1)
    {
      uint64_t v5 = v3 - 24;
      if (!v3) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void *)(v5 + 48);
      if (v6 != v5 + 40) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == v2) {
        return 0;
      }
    }
    while (1)
    {
      if (v6) {
        uint64_t v7 = v6 - 24;
      }
      else {
        uint64_t v7 = 0;
      }
      if (*(unsigned char *)(v7 + 16) == 84)
      {
        uint64_t v8 = *(void *)(v7 - 32);
        if (v8)
        {
          if (!*(unsigned char *)(v8 + 16)
            && *(void *)(v8 + 24) == *(void *)(v7 + 72)
            && (*(unsigned char *)(v8 + 33) & 0x20) != 0
            && (*(_DWORD *)(*(void *)(v6 - 56) + 36) - 317) <= 0xC
            && (*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 1152))(*a2, v6 - 24))
          {
            if (v58 >= (unint64_t)HIDWORD(v58)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v57[v58] = v6 - 24;
            LODWORD(v58) = v58 + 1;
          }
        }
      }
      uint64_t v6 = *(void *)(v6 + 8);
      uint64_t v9 = v3 - 24;
      if (!v3) {
        uint64_t v9 = 0;
      }
      if (v6 == v9 + 40) {
        break;
      }
LABEL_27:
      if (v3 == v2) {
        goto LABEL_28;
      }
    }
    while (1)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == v2) {
        break;
      }
      uint64_t v10 = v3 - 24;
      if (!v3) {
        uint64_t v10 = 0;
      }
      uint64_t v6 = *(void *)(v10 + 48);
      if (v6 != v10 + 40) {
        goto LABEL_27;
      }
    }
LABEL_28:
    uint64_t v11 = v57;
    if (v58)
    {
      uint64_t v12 = 8 * v58;
      while (1)
      {
        uint64_t v13 = (_DWORD *)*v11;
        if (sub_1CB845E74(*v11))
        {
          if (*((unsigned __int8 *)v13 + 17) >> 1 == 127) {
            int v14 = -1;
          }
          else {
            int v14 = *((unsigned __int8 *)v13 + 17) >> 1;
          }
        }
        else
        {
          int v14 = 0;
        }
        int v15 = *(_DWORD *)(*((void *)v13 - 4) + 36);
        if ((v15 - 320) > 8) {
          int v38 = 0;
        }
        else {
          int v38 = dword_1CFAC6DA0[v15 - 320];
        }
        uint64_t v16 = 0;
        uint64_t v17 = **(void **)v13;
        v42[0] = v43;
        v42[1] = (void *)0x200000000;
        uint64_t v46 = v17;
        uint64_t v47 = &v55;
        uint64_t v48 = &v56;
        uint64_t v49 = 0;
        int v50 = 0;
        __int16 v51 = 512;
        char v52 = 7;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        unint64_t v55 = &unk_1F2616E88;
        uint64_t v56 = &unk_1F2617008;
        uint64_t v44 = *((void *)v13 + 5);
        uint64_t v45 = v13 + 6;
        uint64_t v18 = (unsigned __int8 *)*((void *)v13 + 6);
        uint64_t v41 = v18;
        if (v18)
        {
          llvm::MetadataTracking::track((uint64_t)&v41, v18, 2);
          uint64_t v16 = (uint64_t)v41;
        }
        sub_1CB8461A4((uint64_t)v42, 0, v16);
        if (v41)
        {
          int v33 = *v41;
          if ((v33 - 4) > 0x1E)
          {
            if ((v33 - 3) >= 0xFFFFFFFE) {
              uint64_t v36 = v41;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v33 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v35 = (unint64_t)(v36 + 8);
LABEL_71:
              v39[0] = &v41;
              sub_1CC5FA668(v35 + 16, v39);
              goto LABEL_41;
            }
            if (v33 == 3) {
              *((void *)v41 + 1) = 0;
            }
          }
          else if ((v41[1] & 0x7F) == 2 || *((_DWORD *)v41 + 3))
          {
            uint64_t v34 = *((void *)v41 + 2);
            if ((v34 & 4) != 0)
            {
              unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
              if (v35) {
                goto LABEL_71;
              }
            }
          }
        }
LABEL_41:
        int v19 = v50;
        int v50 = v14;
        int v20 = 1 << (v15 - 61);
        if ((v20 & 0x1FC3) != 0)
        {
          int v21 = *(llvm::PoisonValue ***)&v13[-8 * (v13[5] & 0x7FFFFFF)];
          uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)*v21 + 8));
          v22.i16[0] = vaddlv_u8(v22);
          if (v22.i32[0] == 1)
          {
            uint64_t v25 = dword_1CFAC6DC4[v15 - 317];
LABEL_64:
            ShuffleReduction = llvm::getShuffleReduction((llvm::Value *)v42, v21, v25, v38);
LABEL_65:
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, ShuffleReduction, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
        }
        else if ((v20 & 0x18) != 0)
        {
          int v21 = *(llvm::PoisonValue ***)&v13[-8 * (v13[5] & 0x7FFFFFF)];
          int v23 = *((_DWORD *)*v21 + 8);
          if (v23)
          {
            if ((v23 & (v23 - 1)) == 0 && (v14 & 2) != 0)
            {
              uint64_t v25 = 54;
              goto LABEL_64;
            }
          }
        }
        else
        {
          uint64_t v26 = &v13[-8 * (v13[5] & 0x7FFFFFF)];
          int v27 = (unsigned __int8 *)*((void *)v26 + 4);
          if ((v14 & 1) == 0)
          {
            ShuffleReduction = llvm::getOrderedReduction((llvm::Value *)v42, *(llvm::Value **)v26, v27, dword_1CFAC6E00[v15 - 319], v38);
            goto LABEL_65;
          }
          uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(*(void *)v27 + 32));
          v28.i16[0] = vaddlv_u8(v28);
          if (v28.i32[0] == 1)
          {
            uint64_t v29 = dword_1CFAC6E00[v15 - 319];
            uint64_t v30 = *(llvm::Value **)v26;
            uint64_t v31 = llvm::getShuffleReduction((llvm::Value *)v42, (llvm::PoisonValue **)v27, v29, v38);
            v39[0] = "bin.rdx";
            __int16 v40 = 259;
            ShuffleReduction = sub_1CB844E98((uint64_t)v42, v29, (uint64_t)v30, (uint64_t)v31, (uint64_t)v39, 0);
            goto LABEL_65;
          }
        }
        int v50 = v19;
        if (v42[0] != v43) {
          free(v42[0]);
        }
        ++v11;
        v12 -= 8;
        if (!v12)
        {
          uint64_t v11 = v57;
          break;
        }
      }
    }
    if (v11 != v59) {
      free(v11);
    }
  }
  return 0;
}

void sub_1CC2A04E0()
{
}

void sub_1CC2A0520(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2A0558(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CC2A05C0(uint64_t a1, const Function *a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::TargetTransformInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v7, a2);

  return sub_1CC29FF04((uint64_t)a2, TTI);
}

void llvm::initializeExpandVectorPredicationPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCB778, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC2A06D8;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCCB778, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC2A06D8(uint64_t a1)
{
}

uint64_t sub_1CC2A0780(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCB770;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260B9D8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCB778, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC2A06D8;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCCB778, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::ExpandVectorPredicationPass::run()
{
}

BOOL sub_1CC2A0964(uint64_t a1)
{
  v163[2] = *MEMORY[0x1E4F143B8];
  unsigned int v125 = 0;
  uint64_t v1 = *(void *)a1 + 72;
  uint64_t v2 = *(void *)(*(void *)a1 + 80);
  if (v2 == v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = v2 - 24;
    if (!v2) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 48);
    if (v5 != v4 + 40) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == v1) {
      return 0;
    }
  }
  while (1)
  {
    if (v5) {
      uint64_t v7 = v5 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    if (*(unsigned char *)(v7 + 16) == 84)
    {
      uint64_t v8 = *(void *)(v7 - 32);
      if (v8)
      {
        if (!*(unsigned char *)(v8 + 16) && *(void *)(v8 + 24) == *(void *)(v7 + 72) && (*(unsigned char *)(v8 + 33) & 0x20) != 0)
        {
          BOOL isVPIntrinsic = llvm::VPIntrinsic::isVPIntrinsic((llvm::VPIntrinsic *)*(unsigned int *)(v8 + 36));
          uint64_t v12 = isVPIntrinsic ? v5 - 24 : 0;
          if (v5 && isVPIntrinsic)
          {
            uint64_t v124 = v12;
            unint64_t v13 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1200))(**(void **)(a1 + 8));
            if (*(unsigned char *)(a1 + 16))
            {
              int v14 = sub_1CC2A20CC((uint64_t)&qword_1EBCCB800);
              uint64_t v15 = sub_1CC2A20CC((uint64_t)&qword_1EBCCB8E8);
            }
            else
            {
              int v14 = v13;
              uint64_t v15 = HIDWORD(v13);
            }
            int isSafeToSpeculativelyExecute = llvm::isSafeToSpeculativelyExecute(v7, 0, 0, 0);
            BOOL v17 = v15 == 2 || v14 == 1;
            LODWORD(v18) = v17 ? 2 : v14;
            unsigned int v19 = v15 == 2 ? 1 : v14;
            uint64_t v18 = isSafeToSpeculativelyExecute ? v19 : v18;
            if (v18 | v15)
            {
              if (v125 >= 0x10) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v20 = (uint64_t *)&v126[v125];
              uint64_t *v20 = v124;
              v20[1] = (v15 << 32) | v18;
              ++v125;
            }
          }
        }
      }
    }
    uint64_t v5 = *(void *)(v5 + 8);
    uint64_t v9 = v2 - 24;
    if (!v2) {
      uint64_t v9 = 0;
    }
    if (v5 == v9 + 40) {
      break;
    }
LABEL_22:
    if (v2 == v1) {
      goto LABEL_48;
    }
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == v1) {
      break;
    }
    uint64_t v10 = v2 - 24;
    if (!v2) {
      uint64_t v10 = 0;
    }
    uint64_t v5 = *(void *)(v10 + 48);
    if (v5 != v10 + 40) {
      goto LABEL_22;
    }
  }
LABEL_48:
  BOOL v6 = v125 != 0;
  int v21 = v126;
  if (v125)
  {
    uint8x8_t v22 = &v144;
    do
    {
      int v23 = *(uint64_t ****)v21;
      int v24 = *((_DWORD *)v21 + 2);
      int v25 = *((_DWORD *)v21 + 3);
      if (v24 == 1)
      {
        sub_1CC2A1E4C(*(uint64_t ****)v21);
        goto LABEL_59;
      }
      if (v24 != 2) {
        goto LABEL_59;
      }
      uint64_t v26 = 0;
      int v27 = **v23;
      uint64_t v127 = &v129;
      uint64_t v128 = 0x200000000;
      v135 = v27;
      v136 = v22;
      v137 = &v145;
      uint64_t v138 = 0;
      int v139 = 0;
      __int16 v140 = 512;
      char v141 = 7;
      uint64_t v133 = 0;
      v134 = 0;
      uint64_t v142 = 0;
      uint64_t v143 = 0;
      v144 = &unk_1F2616E88;
      v145 = &unk_1F2617008;
      uint64_t v133 = v23[5];
      v134 = v23 + 3;
      uint8x8_t v28 = (unsigned __int8 *)v23[6];
      v146[0] = (uint64_t)v28;
      if (v28)
      {
        llvm::MetadataTracking::track((uint64_t)v146, v28, 2);
        uint64_t v26 = v146[0];
      }
      sub_1CB8461A4((uint64_t)&v127, 0, v26);
      if (v146[0])
      {
        int v72 = *(unsigned __int8 *)v146[0];
        if ((v72 - 4) > 0x1E)
        {
          if ((v72 - 3) >= 0xFFFFFFFE) {
            uint64_t v85 = v146[0];
          }
          else {
            uint64_t v85 = 0;
          }
          if ((v72 - 3) < 0xFFFFFFFE)
          {
            if (v72 == 3) {
              *(void *)(v146[0] + 8) = 0;
            }
            goto LABEL_55;
          }
          unint64_t v74 = v85 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v146[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v146[0] + 12)) {
            goto LABEL_55;
          }
          uint64_t v73 = *(void *)(v146[0] + 16);
          if ((v73 & 4) == 0) {
            goto LABEL_55;
          }
          unint64_t v74 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (!v74) {
            goto LABEL_55;
          }
        }
        v147 = v146;
        sub_1CC5FA668(v74 + 16, &v147);
      }
LABEL_55:
      if ((llvm::VPIntrinsic::canIgnoreVectorLengthParam((llvm::VPIntrinsic *)v23) & 1) == 0)
      {
        uint64_t v123 = v22;
        uint64_t MaskParam = llvm::VPIntrinsic::getMaskParam((llvm::VPIntrinsic *)v23);
        VectorLengthParam = (unsigned __int8 *)llvm::VPIntrinsic::getVectorLengthParam((llvm::VPIntrinsic *)v23);
        unint64_t StaticVectorLength = llvm::VPIntrinsic::getStaticVectorLength((llvm::VPIntrinsic *)v23);
        if (HIDWORD(StaticVectorLength) == 1)
        {
          unsigned int v64 = (uint64_t **)v133[7][5];
          llvm::ScalableVectorType::get((uint64_t **)(*v135 + 1888), (llvm::Type *)StaticVectorLength);
          v147 = v65;
          uint64_t v148 = *(void *)VectorLengthParam;
          uint64_t Declaration = llvm::Intrinsic::getDeclaration(v64, 153, (uint64_t)&v147, 2);
          unsigned int v68 = *(llvm::ConstantInt **)(*v135 + 1960);
          unsigned int v69 = *(_DWORD *)(*v135 + 1968);
          LODWORD(v148) = v69 >> 8;
          if (v69 >> 8 >= 0x41) {
            operator new[]();
          }
          v147 = 0;
          int v70 = llvm::ConstantInt::get(v68, (llvm::LLVMContext *)&v147, v66);
          if (v148 >= 0x41 && v147) {
            MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
          }
          if (Declaration) {
            uint64_t v71 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            uint64_t v71 = 0;
          }
          v146[0] = (uint64_t)v70;
          v146[1] = (uint64_t)VectorLengthParam;
          __int16 v150 = 257;
          uint64_t v86 = (void *)sub_1CB845BAC((uint64_t *)&v127, v71, (uint64_t **)Declaration, v146, 2, (uint64_t)&v147, 0);
          uint8x8_t v22 = v123;
        }
        else
        {
          uint64_t v76 = *(llvm::ConstantInt **)VectorLengthParam;
          __int16 v150 = 257;
          uint64_t v77 = StaticVectorLength;
          VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)&v127, (llvm::Type *)StaticVectorLength, VectorLengthParam, (uint64_t)&v147);
          __int16 v78 = (llvm::FixedVectorType ***)v149;
          v147 = (uint64_t *)v149;
          uint64_t v148 = 0x1000000000;
          if (v77)
          {
            for (unint64_t i = 0; i != v77; ++i)
            {
              uint64_t v88 = llvm::ConstantInt::get(v76, i, 0);
              if (v148 >= (unint64_t)HIDWORD(v148)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v147[v148] = (uint64_t)v88;
              uint64_t v79 = (llvm::Type *)(v148 + 1);
              LODWORD(v148) = v148 + 1;
            }
            __int16 v78 = (llvm::FixedVectorType ***)v147;
          }
          else
          {
            uint64_t v79 = 0;
          }
          Impl = llvm::ConstantVector::getImpl(v78, (llvm::Type *)v79);
          if (!Impl)
          {
            llvm::FixedVectorType::get(**v78, v79);
            Impl = (void *)sub_1CC56A4DC(**v90 + 1288, (uint64_t)v90, v78, v79);
          }
          if (v147 != (uint64_t *)v149) {
            free(v147);
          }
          __int16 v150 = 257;
          uint64_t v86 = sub_1CB845F20((uint64_t)&v127, 36, Impl, (uint64_t)VectorSplat, (uint64_t)&v147);
          uint8x8_t v22 = v123;
        }
        __int16 v150 = 257;
        unint64_t v91 = sub_1CBF52474((uint64_t)&v127, v86, MaskParam, (uint64_t)&v147);
        llvm::VPIntrinsic::setMaskParam((llvm::VPIntrinsic *)v23, v91);
        sub_1CC2A1E4C(v23);
      }
      if (v127 != &v129) {
        free(v127);
      }
LABEL_59:
      if (v25 == 2)
      {
        uint64_t v29 = 0;
        uint64_t v30 = **v23;
        v147 = (uint64_t *)v149;
        uint64_t v148 = 0x200000000;
        v153 = v30;
        v154 = &v162;
        v155 = v163;
        uint64_t v156 = 0;
        int v157 = 0;
        __int16 v158 = 512;
        char v159 = 7;
        v151 = 0;
        v152 = 0;
        uint64_t v160 = 0;
        uint64_t v161 = 0;
        v162 = &unk_1F2616E88;
        v163[0] = &unk_1F2617008;
        v151 = v23[5];
        v152 = v23 + 3;
        uint64_t v31 = (unsigned __int8 *)v23[6];
        v146[0] = (uint64_t)v31;
        if (v31)
        {
          llvm::MetadataTracking::track((uint64_t)v146, v31, 2);
          uint64_t v29 = v146[0];
        }
        sub_1CB8461A4((uint64_t)&v147, 0, v29);
        if (v146[0])
        {
          int v48 = *(unsigned __int8 *)v146[0];
          if ((v48 - 4) > 0x1E)
          {
            if ((v48 - 3) >= 0xFFFFFFFE) {
              uint64_t v75 = v146[0];
            }
            else {
              uint64_t v75 = 0;
            }
            if ((v48 - 3) < 0xFFFFFFFE)
            {
              if (v48 == 3) {
                *(void *)(v146[0] + 8) = 0;
              }
              goto LABEL_65;
            }
            unint64_t v50 = v75 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v146[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v146[0] + 12)) {
              goto LABEL_65;
            }
            uint64_t v49 = *(void *)(v146[0] + 16);
            if ((v49 & 4) == 0) {
              goto LABEL_65;
            }
            unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
            if (!v50) {
              goto LABEL_65;
            }
          }
          uint64_t v127 = v146;
          sub_1CC5FA668(v50 + 16, &v127);
        }
LABEL_65:
        unsigned int v32 = *((_DWORD *)*(v23 - 4) + 9);
        uint64_t FunctionalOpcodeForVP = llvm::VPIntrinsic::getFunctionalOpcodeForVP((llvm::VPIntrinsic *)v32);
        if ((FunctionalOpcodeForVP & 0xFF00000000) != 0)
        {
          uint64_t v34 = FunctionalOpcodeForVP;
          if ((FunctionalOpcodeForVP - 13) <= 0x11)
          {
            unint64_t v35 = (uint64_t *)&v23[-4 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF)];
            uint64_t v119 = *v35;
            Select = (llvm::Value *)v35[4];
            unint64_t v37 = (llvm::Value *)llvm::VPIntrinsic::getMaskParam((llvm::VPIntrinsic *)v23);
            if (v37)
            {
              int v38 = v37;
              if ((*((unsigned char *)v37 + 16) != 10 || !llvm::Constant::isAllOnesValue(v37))
                && v34 <= 0x17
                && ((1 << v34) & 0xD80000) != 0)
              {
                uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get((llvm::ConstantInt *)*v23, 1uLL, 0);
                __int16 v132 = 257;
                Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v147, v38, Select, v39, (const llvm::Twine *)&v127, 0);
              }
            }
            if ((*((unsigned char *)v23 + 23) & 0x10) != 0)
            {
              uint64_t v40 = ***v23;
              uint64_t v41 = *(void *)(v40 + 152);
              uint64_t v42 = *(unsigned int *)(v40 + 168);
              if (v42)
              {
                LODWORD(v43) = (v42 - 1) & ((v23 >> 4) ^ (v23 >> 9));
                uint64_t v44 = (uint64_t ****)(v41 + 16 * v43);
                uint64_t v45 = *v44;
                if (*v44 != v23)
                {
                  int v46 = 1;
                  do
                  {
                    if (v45 == (uint64_t ***)-4096) {
                      goto LABEL_115;
                    }
                    int v47 = v43 + v46++;
                    uint64_t v43 = v47 & (v42 - 1);
                    uint64_t v45 = *(uint64_t ****)(v41 + 16 * v43);
                  }
                  while (v45 != v23);
                  uint64_t v44 = (uint64_t ****)(v41 + 16 * v43);
                }
              }
              else
              {
LABEL_115:
                uint64_t v44 = (uint64_t ****)(v41 + 16 * v42);
              }
              unint64_t v80 = v44[1];
              uint64_t v83 = (uint64_t)*v80;
              uint64_t v82 = (char *)(v80 + 2);
              uint64_t v81 = v83;
            }
            else
            {
              uint64_t v81 = 0;
              uint64_t v82 = &byte_1CFBCE98E;
            }
            __int16 v132 = 261;
            uint64_t v127 = v82;
            uint64_t v128 = v81;
            uint64_t FAddReduce = (uint64_t)sub_1CB844E98((uint64_t)&v147, v34, v119, (uint64_t)Select, (uint64_t)&v127, 0);
LABEL_170:
            int v109 = (llvm::Value *)FAddReduce;
            sub_1CC2A2150(FAddReduce, (uint64_t)v23);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v23, v109, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
        }
        if (v32 - 354 > 0xC)
        {
          if (v147 != (uint64_t *)v149) {
            free(v147);
          }
          goto LABEL_60;
        }
        __int16 v51 = (llvm::Value *)llvm::VPIntrinsic::getMaskParam((llvm::VPIntrinsic *)v23);
        char v52 = (uint64_t *)v23[-4 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF) + 4];
        if (!v51 || (uint64_t v53 = v51, *((unsigned char *)v51 + 16) == 10) && llvm::Constant::isAllOnesValue(v51))
        {
LABEL_156:
          uint64_t v99 = (llvm::Value **)&v23[-4 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF)];
          __int16 v100 = *v99;
          switch(*((_DWORD *)*(v23 - 4) + 9))
          {
            case 0x163:
              __int16 v103 = (void *)sub_1CC5C0444((uint64_t *)&v147, 318, v52);
              __int16 v132 = 257;
              uint64_t FAddReduce = (uint64_t)sub_1CBF52474((uint64_t)&v147, v103, (uint64_t)v100, (uint64_t)&v127);
              goto LABEL_170;
            case 0x164:
              uint64_t FAddReduce = llvm::IRBuilderBase::CreateFAddReduce((llvm::IRBuilderBase *)&v147, *v99, (llvm::Value *)v52);
              goto LABEL_170;
            case 0x165:
              uint64_t v106 = sub_1CC5C0444((uint64_t *)&v147, 320, v52);
              sub_1CC2A2150(v106, (uint64_t)v23);
              __int16 v132 = 257;
              int v105 = 193;
              goto LABEL_166;
            case 0x166:
              uint64_t v106 = sub_1CC5C0444((uint64_t *)&v147, 321, v52);
              sub_1CC2A2150(v106, (uint64_t)v23);
              __int16 v132 = 257;
              int v105 = 202;
LABEL_166:
              unint64_t v104 = (llvm::Value *)v106;
              goto LABEL_169;
            case 0x167:
              uint64_t FAddReduce = llvm::IRBuilderBase::CreateFMulReduce((llvm::IRBuilderBase *)&v147, *v99, (llvm::Value *)v52);
              goto LABEL_170;
            case 0x168:
              uint64_t v107 = sub_1CC5C0444((uint64_t *)&v147, 323, v52);
              __int16 v132 = 257;
              uint64_t FAddReduce = (uint64_t)sub_1CC09A1EC((uint64_t)&v147, v107, (uint64_t)v100, (uint64_t)&v127, 0, 0);
              goto LABEL_170;
            case 0x169:
              char v102 = (void *)sub_1CC5C0444((uint64_t *)&v147, 324, v52);
              __int16 v132 = 257;
              uint64_t FAddReduce = (uint64_t)sub_1CB844AF4((uint64_t)&v147, v102, (uint64_t)v100, (uint64_t)&v127);
              goto LABEL_170;
            case 0x16A:
              unint64_t v104 = (llvm::Value *)sub_1CC5C0444((uint64_t *)&v147, 325, v52);
              __int16 v132 = 257;
              int v105 = 274;
              goto LABEL_169;
            case 0x16B:
              unint64_t v104 = (llvm::Value *)sub_1CC5C0444((uint64_t *)&v147, 326, v52);
              __int16 v132 = 257;
              int v105 = 275;
              goto LABEL_169;
            case 0x16C:
              unint64_t v104 = (llvm::Value *)sub_1CC5C0444((uint64_t *)&v147, 327, v52);
              __int16 v132 = 257;
              int v105 = 305;
              goto LABEL_169;
            case 0x16D:
              unint64_t v104 = (llvm::Value *)sub_1CC5C0444((uint64_t *)&v147, 328, v52);
              __int16 v132 = 257;
              int v105 = 306;
LABEL_169:
              uint64_t FAddReduce = llvm::IRBuilderBase::CreateBinaryIntrinsic((llvm::IRBuilderBase *)&v147, v105, v104, v100, 0, (const llvm::Twine *)&v127);
              break;
            case 0x16E:
              uint64_t v108 = sub_1CC5C0444((uint64_t *)&v147, 329, v52);
              __int16 v132 = 257;
              uint64_t FAddReduce = (uint64_t)sub_1CC2428C0((uint64_t)&v147, v108, (uint64_t)v100, (uint64_t)&v127);
              break;
            default:
              char v101 = (void *)sub_1CC5C0444((uint64_t *)&v147, 317, v52);
              __int16 v132 = 257;
              uint64_t FAddReduce = (uint64_t)sub_1CB844A3C((uint64_t)&v147, v101, (uint64_t)v100, (uint64_t)&v127, 0, 0);
              break;
          }
          goto LABEL_170;
        }
        uint64_t v54 = *v23;
        int v55 = *((_DWORD *)*v23 + 2);
        uint64_t v56 = (llvm::Type *)*v23;
        if ((v55 & 0xFE) == 0x12) {
          uint64_t v56 = (llvm::Type *)*v54[2];
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v56);
        uint64_t v60 = 0;
        switch(*((_DWORD *)*(v23 - 4) + 9))
        {
          case 0x163:
          case 0x16D:
            AllOnesValue = (unsigned __int8 *)llvm::Constant::getAllOnesValue((llvm::Constant *)v54, 0, v58);
            goto LABEL_154;
          case 0x164:
            AllOnesValue = (unsigned __int8 *)llvm::ConstantFP::getZero((llvm::ConstantFP *)v54, (llvm::Type *)1, v58);
            goto LABEL_154;
          case 0x165:
            uint64_t v60 = 1;
            goto LABEL_172;
          case 0x166:
LABEL_172:
            int v110 = *((unsigned __int8 *)v23 + 17) >> 1;
            if (v110 == 127) {
              LOBYTE(v110) = -1;
            }
            if (v55 == 2)
            {
              v111 = &unk_1CFB2E308;
            }
            else
            {
              v111 = &unk_1CFB2E2E0;
              switch((char)v55)
              {
                case 1:
                  v111 = &unk_1CFB2E2F4;
                  break;
                case 2:
                  __break(1u);
                  JUMPOUT(0x1CC2A1BECLL);
                case 3:
                  v111 = &unk_1CFB2E31C;
                  break;
                case 4:
                  unsigned int v122 = v60;
                  char v118 = v110;
                  v111 = llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)&unk_1CFB2E2E0);
                  goto LABEL_206;
                case 5:
                  unsigned int v122 = v60;
                  char v118 = v110;
                  v111 = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)&unk_1CFB2E2E0);
LABEL_206:
                  LOBYTE(v110) = v118;
                  uint64_t v60 = v122;
                  break;
                case 6:
                  v111 = &unk_1CFB2E344;
                  break;
                default:
                  break;
              }
            }
            if ((v110 & 2) != 0)
            {
              if ((v110 & 4) != 0)
              {
                if (v111 == (_DWORD *)&unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v128, (uint64_t)&unk_1CFB2E344);
                }
                uint64_t v128 = (uint64_t)v111;
                if ((v111[2] + 64) >= 0x80) {
                  operator new[]();
                }
                char v131 = v131 & 0xF0 | 3;
                int v130 = v111[1] - 1;
                int v112 = v111[2];
                if ((v112 - 64) < 0xFFFFFF80)
                {
                  v115 = v129;
                  void *v129 = 0;
                  int v121 = v60;
                  bzero(v115 + 1, 8 * (((v112 + 64) >> 6) - 2) + 8);
                  LODWORD(v60) = v121;
                }
                else
                {
                  v129 = 0;
                }
                sub_1CB87E774((uint64_t)&v127, v60);
                uint64_t v95 = (unsigned __int8 *)llvm::ConstantFP::get((llvm::ConstantFP **)v54, (llvm::Type *)&v127, v113);
                if ((_UNKNOWN *)v128 == &unk_1CFB2E344)
                {
                  sub_1CB845718((uint64_t *)&v129);
                }
                else if ((*(_DWORD *)(v128 + 8) - 64) <= 0xFFFFFF7F)
                {
                  unint64_t v96 = v129;
                  if (v129) {
LABEL_151:
                  }
                    MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
                }
                goto LABEL_155;
              }
              Infinity = llvm::ConstantFP::getInfinity((llvm::ConstantFP *)v54, (llvm::Type *)v60);
            }
            else
            {
              Infinity = llvm::ConstantFP::getQNaN((llvm::ConstantFP *)v54, (llvm::Type *)v60, 0, v59);
            }
            uint64_t v95 = (unsigned __int8 *)Infinity;
LABEL_155:
            uint64_t v97 = (llvm::Type *)(*(unsigned int *)(*v52 + 32) | ((unint64_t)(*(unsigned char *)(*v52 + 8) == 19) << 32));
            __int16 v132 = 257;
            v98 = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)&v147, v97, v95, (uint64_t)&v127);
            __int16 v132 = 257;
            char v52 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v147, v53, (llvm::Value *)v52, v98, (const llvm::Twine *)&v127, 0);
            goto LABEL_156;
          case 0x167:
            AllOnesValue = (unsigned __int8 *)llvm::ConstantFP::get((llvm::ConstantFP **)v54, 0, 1.0);
            goto LABEL_154;
          case 0x168:
            AllOnesValue = (unsigned __int8 *)llvm::ConstantInt::get((llvm::ConstantInt *)v54, 1uLL, 0);
            goto LABEL_154;
          case 0x16A:
            uint64_t v92 = (llvm::ConstantInt *)*v54;
            LODWORD(v128) = PrimitiveSizeInBits;
            if (PrimitiveSizeInBits > 0x40) {
              operator new[]();
            }
            uint64_t v127 = 0;
            uint64_t v93 = (void *)(1 << (PrimitiveSizeInBits - 1));
            goto LABEL_149;
          case 0x16B:
            uint64_t v92 = (llvm::ConstantInt *)*v54;
            LODWORD(v128) = PrimitiveSizeInBits;
            if (PrimitiveSizeInBits > 0x40) {
              operator new[]();
            }
            unint64_t v94 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
            if (!PrimitiveSizeInBits) {
              unint64_t v94 = 0;
            }
            uint64_t v127 = (void *)v94;
            uint64_t v93 = (void *)(v94 & ~(1 << (PrimitiveSizeInBits - 1)));
LABEL_149:
            uint64_t v127 = v93;
            uint64_t v95 = (unsigned __int8 *)llvm::ConstantInt::get(v92, (llvm::LLVMContext *)&v127, v58);
            if (v128 >= 0x41)
            {
              unint64_t v96 = v127;
              if (v127) {
                goto LABEL_151;
              }
            }
            goto LABEL_155;
          default:
            AllOnesValue = (unsigned __int8 *)llvm::Constant::getNullValue((llvm::Constant *)v54, 0, v58);
LABEL_154:
            uint64_t v95 = AllOnesValue;
            goto LABEL_155;
        }
      }
LABEL_60:
      ++v21;
    }
    while (v21 != &v126[v125]);
  }
  return v6;
}

void sub_1CC2A1C70()
{
}

void sub_1CC2A1CB0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2A1CE8(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

BOOL sub_1CC2A1D50(uint64_t a1, const Function *a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::TargetTransformInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::TargetTransformInfoWrapperPass::ID);
  v12[0] = a2;
  v12[1] = llvm::TargetTransformInfoWrapperPass::getTTI(v7, a2);
  uint64_t v8 = qword_1EBCCB808;
  if (byte_1EBCCB817 >= 0) {
    uint64_t v8 = byte_1EBCCB817 & 0x7F;
  }
  if (v8)
  {
    BOOL v9 = 1;
  }
  else
  {
    uint64_t v10 = qword_1EBCCB8F0;
    if (byte_1EBCCB8FF >= 0) {
      uint64_t v10 = byte_1EBCCB8FF & 0x7F;
    }
    BOOL v9 = v10 != 0;
  }
  BOOL v13 = v9;
  return sub_1CC2A0964((uint64_t)v12);
}

uint64_t sub_1CC2A1E4C(uint64_t ***a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::VPIntrinsic::canIgnoreVectorLengthParam((llvm::VPIntrinsic *)a1);
  if ((result & 1) == 0)
  {
    uint64_t result = llvm::VPIntrinsic::getVectorLengthParam((llvm::VPIntrinsic *)a1);
    if (result)
    {
      unint64_t StaticVectorLength = llvm::VPIntrinsic::getStaticVectorLength((llvm::VPIntrinsic *)a1);
      uint64_t v4 = (llvm::ConstantInt *)(***a1 + 1960);
      BOOL v17 = v4;
      if (HIDWORD(StaticVectorLength) == 1)
      {
        uint64_t Declaration = llvm::Intrinsic::getDeclaration((uint64_t **)a1[5][7][5], 382, (uint64_t)&v17, 1);
        sub_1CBF537B4((uint64_t)v18, a1[5], (uint64_t)(a1 + 3), 0, 0, 0);
        uint64_t v7 = *(llvm::ConstantInt **)(*(void *)v20 + 1960);
        unsigned int v8 = *(_DWORD *)(*(void *)v20 + 1968);
        unsigned int v15 = v8 >> 8;
        if (v8 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v8) + 63);
        if (v8 <= 0xFF) {
          LODWORD(v9) = 0;
        }
        int v14 = (const char *)(v9 & StaticVectorLength);
        uint64_t v10 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v14, v6);
        if (v15 >= 0x41 && v14) {
          MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
        }
        if (Declaration) {
          uint64_t v11 = *(uint64_t ***)(Declaration + 24);
        }
        else {
          uint64_t v11 = 0;
        }
        int v14 = "vscale";
        __int16 v16 = 259;
        uint64_t v13 = sub_1CB845BAC((uint64_t *)v18, v11, (uint64_t **)Declaration, 0, 0, (uint64_t)&v14, 0);
        int v14 = "scalable_size";
        __int16 v16 = 259;
        uint64_t v12 = sub_1CC09A1EC((uint64_t)v18, v13, (uint64_t)v10, (uint64_t)&v14, 1, 0);
        if (v18[0] != &v19) {
          free(v18[0]);
        }
      }
      else
      {
        uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get(v4, StaticVectorLength, 0);
      }
      return llvm::VPIntrinsic::setVectorLengthParam((llvm::VPIntrinsic *)a1, v12);
    }
  }
  return result;
}

uint64_t sub_1CC2A20CC(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 23);
  BOOL v2 = v1 < 0;
  uint64_t v3 = *(int **)a1;
  if (v1 >= 0) {
    uint64_t v3 = (int *)a1;
  }
  uint64_t v4 = v1 & 0x7F;
  if (v2) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4 != 7) {
    return 0;
  }
  if (*v3 == 1668507972 && *(int *)((char *)v3 + 3) == 1685217635) {
    return 1;
  }
  int v6 = *v3;
  int v7 = *(int *)((char *)v3 + 3);
  BOOL v9 = v6 == 1986948931 && v7 == 1953654134;
  return (2 * v9);
}

uint64_t sub_1CC2A2150(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 16) >= 0x1Cu)
  {
    uint64_t v3 = result;
    uint64_t result = sub_1CB845E74(result);
    if (result)
    {
      uint64_t result = sub_1CB845E74(a2);
      if (result) {
        *(unsigned char *)(v3 + 17) |= *(unsigned char *)(a2 + 17) & 0xFE;
      }
    }
  }
  return result;
}

uint64_t sub_1CC2A21A8()
{
  uint64_t v3 = "";
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Options: <empty>|Legal|Discard|Convert. If non-empty, ignore TargetTransformInfo an"
                                     "d always use this transformation for the %evl parameter (Used in testing).";
  v1.n128_u64[1] = 157;
  sub_1CD513524(&v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCCB780, &dword_1CB82C000);
  uint64_t v3 = "";
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Options: <empty>|Legal|Discard|Convert. If non-empty, Ignore TargetTransformInfo an"
                                     "d always use this transformation for the %mask parameter (Used in testing).";
  v1.n128_u64[1] = 158;
  sub_1CD513698(&v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCCB868, &dword_1CB82C000);
}

void *llvm::FaultMaps::FaultMaps(void *result, uint64_t a2)
{
  result[1] = 0;
  *uint64_t result = result + 1;
  result[2] = 0;
  result[3] = a2;
  return result;
}

{
  result[1] = 0;
  *uint64_t result = result + 1;
  result[2] = 0;
  result[3] = a2;
  return result;
}

void llvm::FaultMaps::recordFaultingOp(uint64_t **a1, int a2, size_t __sz, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1[3][34] + 8);
  *(void *)(v8 + 272) += 24;
  uint64_t v9 = *(void *)(v8 + 192);
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v9 + 24 > *(void *)(v8 + 200) - v9)
  {
    unsigned int v47 = *(_DWORD *)(v8 + 216) >> 7;
    if (v47 >= 0x1E) {
      LOBYTE(v47) = 30;
    }
    uint64_t v48 = 4096 << v47;
    unint64_t v10 = (unint64_t)operator new(4096 << v47, (std::align_val_t)8uLL);
    unsigned int v49 = *(_DWORD *)(v8 + 216);
    if (v49 >= *(_DWORD *)(v8 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v8 + 208) + 8 * v49) = v10;
    ++*(_DWORD *)(v8 + 216);
    *(void *)(v8 + 200) = v10 + v48;
  }
  else
  {
    unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v8 + 192) = v10 + 24;
  int v11 = *(unsigned __int8 *)(*(void *)(v8 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v10 = 2;
  *(_DWORD *)(v10 + 1) = v11 | (*(unsigned __int8 *)(v10 + 4) << 24);
  *(void *)(v10 + 8) = 0;
  *(void *)(v10 + 16) = __sz;
  uint64_t v12 = a1[3][43];
  *(void *)(v8 + 272) += 24;
  uint64_t v13 = *(void *)(v8 + 192);
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 24 > *(void *)(v8 + 200) - v13)
  {
    unsigned int v50 = *(_DWORD *)(v8 + 216) >> 7;
    if (v50 >= 0x1E) {
      LOBYTE(v50) = 30;
    }
    uint64_t v51 = 4096 << v50;
    unint64_t v14 = (unint64_t)operator new(4096 << v50, (std::align_val_t)8uLL);
    unsigned int v52 = *(_DWORD *)(v8 + 216);
    if (v52 >= *(_DWORD *)(v8 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v8 + 208) + 8 * v52) = v14;
    ++*(_DWORD *)(v8 + 216);
    *(void *)(v8 + 200) = v14 + v51;
  }
  else
  {
    unint64_t v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v8 + 192) = v14 + 24;
  int v15 = *(unsigned __int8 *)(*(void *)(v8 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v14 = 2;
  *(_DWORD *)(v14 + 1) = v15 | (*(unsigned __int8 *)(v14 + 4) << 24);
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = v12;
  *(void *)(v8 + 272) += 32;
  uint64_t v16 = *(void *)(v8 + 192);
  if (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) - v16 + 32 > *(void *)(v8 + 200) - v16)
  {
    unsigned int v53 = *(_DWORD *)(v8 + 216) >> 7;
    if (v53 >= 0x1E) {
      LOBYTE(v53) = 30;
    }
    uint64_t v54 = 4096 << v53;
    unint64_t v17 = (unint64_t)operator new(4096 << v53, (std::align_val_t)8uLL);
    unsigned int v55 = *(_DWORD *)(v8 + 216);
    if (v55 >= *(_DWORD *)(v8 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v8 + 208) + 8 * v55) = v17;
    ++*(_DWORD *)(v8 + 216);
    *(void *)(v8 + 200) = v17 + v54;
  }
  else
  {
    unint64_t v17 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v8 + 192) = v17 + 32;
  *(unsigned char *)unint64_t v17 = 0;
  *(_DWORD *)(v17 + 1) = (*(unsigned __int8 *)(v17 + 4) << 24) | 0x12;
  *(void *)(v17 + 8) = 0;
  *(void *)(v17 + 16) = v10;
  *(void *)(v17 + 24) = v14;
  *(void *)(v8 + 272) += 24;
  uint64_t v18 = *(void *)(v8 + 192);
  if (((v18 + 7) & 0xFFFFFFFFFFFFFFF8) - v18 + 24 > *(void *)(v8 + 200) - v18)
  {
    unsigned int v56 = *(_DWORD *)(v8 + 216) >> 7;
    if (v56 >= 0x1E) {
      LOBYTE(v56) = 30;
    }
    uint64_t v57 = 4096 << v56;
    unint64_t v19 = (unint64_t)operator new(4096 << v56, (std::align_val_t)8uLL);
    unsigned int v58 = *(_DWORD *)(v8 + 216);
    if (v58 >= *(_DWORD *)(v8 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v8 + 208) + 8 * v58) = v19;
    ++*(_DWORD *)(v8 + 216);
    *(void *)(v8 + 200) = v19 + v57;
  }
  else
  {
    unint64_t v19 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v8 + 192) = v19 + 24;
  int v20 = *(unsigned __int8 *)(*(void *)(v8 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v19 = 2;
  *(_DWORD *)(v19 + 1) = v20 | (*(unsigned __int8 *)(v19 + 4) << 24);
  *(void *)(v19 + 8) = 0;
  *(void *)(v19 + 16) = a4;
  uint64_t v21 = a1[3][43];
  *(void *)(v8 + 272) += 24;
  uint64_t v22 = *(void *)(v8 + 192);
  if (((v22 + 7) & 0xFFFFFFFFFFFFFFF8) - v22 + 24 > *(void *)(v8 + 200) - v22)
  {
    unsigned int v59 = *(_DWORD *)(v8 + 216) >> 7;
    if (v59 >= 0x1E) {
      LOBYTE(v59) = 30;
    }
    uint64_t v60 = 4096 << v59;
    unint64_t v23 = (unint64_t)operator new(4096 << v59, (std::align_val_t)8uLL);
    unsigned int v61 = *(_DWORD *)(v8 + 216);
    if (v61 >= *(_DWORD *)(v8 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v8 + 208) + 8 * v61) = v23;
    ++*(_DWORD *)(v8 + 216);
    *(void *)(v8 + 200) = v23 + v60;
  }
  else
  {
    unint64_t v23 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v8 + 192) = v23 + 24;
  int v24 = *(unsigned __int8 *)(*(void *)(v8 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v23 = 2;
  *(_DWORD *)(v23 + 1) = v24 | (*(unsigned __int8 *)(v23 + 4) << 24);
  *(void *)(v23 + 8) = 0;
  *(void *)(v23 + 16) = v21;
  *(void *)(v8 + 272) += 32;
  uint64_t v25 = *(void *)(v8 + 192);
  if (((v25 + 7) & 0xFFFFFFFFFFFFFFF8) - v25 + 32 > *(void *)(v8 + 200) - v25)
  {
    unsigned int v62 = *(_DWORD *)(v8 + 216) >> 7;
    if (v62 >= 0x1E) {
      LOBYTE(v62) = 30;
    }
    uint64_t v63 = 4096 << v62;
    unint64_t v26 = (unint64_t)operator new(4096 << v62, (std::align_val_t)8uLL);
    unsigned int v64 = *(_DWORD *)(v8 + 216);
    if (v64 >= *(_DWORD *)(v8 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v8 + 208) + 8 * v64) = v26;
    ++*(_DWORD *)(v8 + 216);
    *(void *)(v8 + 200) = v26 + v63;
  }
  else
  {
    unint64_t v26 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v8 + 192) = v26 + 32;
  *(unsigned char *)unint64_t v26 = 0;
  *(_DWORD *)(v26 + 1) = (*(unsigned __int8 *)(v26 + 4) << 24) | 0x12;
  *(void *)(v26 + 8) = 0;
  *(void *)(v26 + 16) = v19;
  *(void *)(v26 + 24) = v23;
  uint8x8_t v28 = a1 + 1;
  int v27 = a1[1];
  uint64_t v29 = (uint64_t *)a1[3][41];
  if (v27)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v30 = (uint64_t **)v27;
        uint64_t v31 = (unsigned char *)v27[4];
        if (!sub_1CC2A2D6C(v29, v31)) {
          break;
        }
        int v27 = *v30;
        uint8x8_t v28 = v30;
        if (!*v30) {
          goto LABEL_21;
        }
      }
      if (!sub_1CC2A2D6C(v31, v29)) {
        break;
      }
      int v27 = v30[1];
      if (!v27)
      {
        uint8x8_t v28 = v30 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
    uint64_t v30 = a1 + 1;
LABEL_21:
    unsigned int v32 = (uint64_t *)v30;
    uint64_t v30 = (uint64_t **)operator new(0x40uLL);
    v30[4] = v29;
    v30[5] = 0;
    v30[6] = 0;
    v30[7] = 0;
    *uint64_t v30 = 0;
    v30[1] = 0;
    v30[2] = v32;
    unsigned __int8 *v28 = (uint64_t *)v30;
    int v33 = (uint64_t *)**a1;
    uint64_t v34 = (uint64_t *)v30;
    if (v33)
    {
      *a1 = v33;
      uint64_t v34 = *v28;
    }
    sub_1CB8358B8(a1[1], v34);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  uint64_t v36 = (char *)v30[6];
  unint64_t v35 = (unint64_t)v30[7];
  if ((unint64_t)v36 >= v35)
  {
    int v38 = (char *)v30[5];
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v38) >> 3) + 1;
    if (v39 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v38) >> 3);
    if (2 * v40 > v39) {
      unint64_t v39 = 2 * v40;
    }
    if (v40 >= 0x555555555555555) {
      unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    uint64_t v42 = 3 * v41;
    uint64_t v43 = (char *)operator new(24 * v41);
    uint64_t v44 = &v43[8 * ((v36 - v38) >> 3)];
    *(_DWORD *)uint64_t v44 = a2;
    *((void *)v44 + 1) = v17;
    *((void *)v44 + 2) = v26;
    unint64_t v37 = v44 + 24;
    if (v36 == v38)
    {
      int v46 = &v43[8 * ((v36 - v38) >> 3)];
    }
    else
    {
      do
      {
        long long v45 = *(_OWORD *)(v36 - 24);
        int v46 = v44 - 24;
        *((void *)v44 - 1) = *((void *)v36 - 1);
        *(_OWORD *)(v44 - 24) = v45;
        v36 -= 24;
        v44 -= 24;
      }
      while (v36 != v38);
    }
    v30[5] = (uint64_t *)v46;
    v30[6] = (uint64_t *)v37;
    v30[7] = (uint64_t *)&v43[8 * v42];
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v36 = a2;
    unint64_t v37 = v36 + 24;
    *((void *)v36 + 1) = v17;
    *((void *)v36 + 2) = v26;
  }
  v30[6] = (uint64_t *)v37;
}

unsigned int ***llvm::FaultMaps::serializeToFaultMapSection(unsigned int ***this)
{
  if (this[2])
  {
    __n128 v1 = this;
    int v2 = this[3][34];
    uint64_t v3 = (llvm::MCContext *)*((void *)v2 + 1);
    (*(void (**)(unsigned int *, void, void))(*(void *)v2 + 168))(v2, *(void *)(*((void *)v3 + 21) + 440), 0);
    uint64_t v9 = (unsigned __int8 **)"__LLVM_FaultMaps";
    __int16 v10 = 259;
    uint64_t v4 = llvm::MCContext::getOrCreateSymbol(v3, &v9);
    (*(void (**)(unsigned int *, uint64_t, void))(*(void *)v2 + 192))(v2, v4, 0);
    (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(void *)v2 + 520))(v2, 1, 1);
    (*(void (**)(unsigned int *, void, uint64_t))(*(void *)v2 + 520))(v2, 0, 1);
    (*(void (**)(unsigned int *, void, uint64_t))(*(void *)v2 + 520))(v2, 0, 2);
    this = (unsigned int ***)(*(uint64_t (**)(unsigned int *, unsigned int **, uint64_t))(*(void *)v2 + 520))(v2, v1[2], 4);
    uint64_t v5 = *v1;
    if (*v1 != (unsigned int **)(v1 + 1))
    {
      do
      {
        this = (unsigned int ***)llvm::FaultMaps::emitFunctionInfo((uint64_t)v1, (const llvm::MCSymbol *)v5[4], v5 + 5);
        int v6 = v5[1];
        if (v6)
        {
          do
          {
            int v7 = (unsigned int ***)v6;
            int v6 = *(unsigned int **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            int v7 = (unsigned int ***)v5[2];
            BOOL v8 = *v7 == v5;
            uint64_t v5 = (unsigned int **)v7;
          }
          while (!v8);
        }
        uint64_t v5 = (unsigned int **)v7;
      }
      while (v7 != v1 + 1);
    }
  }
  return this;
}

uint64_t llvm::FaultMaps::emitFunctionInfo(uint64_t a1, const llvm::MCSymbol *a2, unsigned int **a3)
{
  uint64_t v4 = *(llvm::MCStreamer **)(*(void *)(a1 + 24) + 272);
  llvm::MCStreamer::emitSymbolValue(v4, a2, 8, 0);
  (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t))(*(void *)v4 + 520))(v4, 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3), 4);
  uint64_t result = (*(uint64_t (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v4 + 520))(v4, 0, 4);
  int v7 = *a3;
  int v6 = a3[1];
  while (v7 != v6)
  {
    (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v4 + 520))(v4, *v7, 4);
    (*(void (**)(llvm::MCStreamer *, void, uint64_t, void))(*(void *)v4 + 512))(v4, *((void *)v7 + 1), 4, 0);
    uint64_t result = (*(uint64_t (**)(llvm::MCStreamer *, void, uint64_t, void))(*(void *)v4 + 512))(v4, *((void *)v7 + 2), 4, 0);
    v7 += 6;
  }
  return result;
}

char *llvm::FaultMaps::faultTypeToString(int a1)
{
  return off_1E682F560[a1 - 1];
}

BOOL sub_1CC2A2D6C(unsigned char *a1, unsigned char *a2)
{
  if ((*a1 & 4) != 0)
  {
    uint64_t v4 = (size_t *)*((void *)a1 - 1);
    size_t v5 = *v4;
    int v2 = v4 + 2;
    size_t v3 = v5;
  }
  else
  {
    int v2 = 0;
    size_t v3 = 0;
  }
  if ((*a2 & 4) != 0)
  {
    BOOL v8 = (size_t *)*((void *)a2 - 1);
    size_t v9 = *v8;
    int v6 = v8 + 2;
    size_t v7 = v9;
  }
  else
  {
    int v6 = 0;
    size_t v7 = 0;
  }
  if (v7 >= v3) {
    size_t v10 = v3;
  }
  else {
    size_t v10 = v7;
  }
  if (v10 && (int v11 = memcmp(v2, v6, v10)) != 0)
  {
    int v12 = (v11 >> 31) | 1;
  }
  else
  {
    if (v3 < v7) {
      int v12 = -1;
    }
    else {
      int v12 = 1;
    }
    if (v3 == v7) {
      int v12 = 0;
    }
  }
  return v12 == -1;
}

void sub_1CC2A2DF8()
{
}

void sub_1CC2A2E94()
{
}

void sub_1CC2A2FA8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  __n128 v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    size_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  size_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC2A305C(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  size_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC2A3108(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 112);
  if (!v3) {
    goto LABEL_24;
  }
  if (!*(_DWORD *)(v3 + 8)) {
    goto LABEL_24;
  }
  uint64_t v4 = *(void *)(v3 + 40);
  if (!v4) {
    goto LABEL_24;
  }
  int v5 = *(_DWORD *)(v4 + 40);
  if (!v5) {
    goto LABEL_24;
  }
  uint64_t v6 = *(void *)(v4 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v45 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v45 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v45;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0x2CC0F4FE580BCA48)) ^ ((0x9DDFEA08EB382D69
                                                                            * (qword_1EBCBE580 ^ 0x2CC0F4FE580BCA48)) >> 47) ^ 0x4FED8D8C2C65AF2ELL);
  unsigned int v8 = (-348639895 * ((v7 >> 47) ^ v7)) ^ 0x2D797274;
  for (int i = 1; ; ++i)
  {
    unsigned int v10 = v8 & (v5 - 1);
    uint64_t v11 = v6 + 24 * v10;
    int v12 = *(void **)v11;
    if (*(void *)v11 == -1)
    {
      if ("fentry-call" == (char *)-1) {
        goto LABEL_20;
      }
      goto LABEL_9;
    }
    if (v12 != (void *)-2) {
      break;
    }
    if ("fentry-call" == (char *)-2) {
      goto LABEL_20;
    }
LABEL_9:
    if (v12 == (void *)-1) {
      goto LABEL_24;
    }
    unsigned int v8 = i + v10;
  }
  if (*(void *)(v11 + 8) != 11) {
    goto LABEL_9;
  }
  if (*v12 != 0x632D7972746E6566 || *(void *)((char *)v12 + 3) != 0x6C6C61632D797274) {
    goto LABEL_9;
  }
LABEL_20:
  uint64_t v14 = *(void *)(v11 + 16);
  if (!v14)
  {
LABEL_24:
    size_t v15 = 0;
    HIBYTE(v52) = 0;
    p_s1 = (void **)&__s1;
    goto LABEL_25;
  }
  uint64_t v16 = *(unsigned int *)(v14 + 12);
  size_t v15 = *(unsigned int *)(v14 + 16);
  if (v15 >= 0x17)
  {
    if ((v15 | 7) == 0x17) {
      uint64_t v44 = (v15 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v44 = v15 | 7;
    }
    p_s1 = (void **)operator new(v44 + 1);
    size_t v51 = v15;
    uint64_t v52 = v44 - 0x7FFFFFFFFFFFFFFFLL;
    __s1 = p_s1;
  }
  else
  {
    HIBYTE(v52) = *(_DWORD *)(v14 + 16);
    p_s1 = (void **)&__s1;
    if (!v15)
    {
      size_t v15 = 0;
      goto LABEL_25;
    }
  }
  memmove(p_s1, (const void *)(v14 + v16 + 25), v15);
LABEL_25:
  uint64_t v18 = 0;
  *((unsigned char *)p_s1 + v15) = 0;
  char v19 = HIBYTE(v52);
  unint64_t v20 = v51;
  if (v52 >= 0) {
    size_t v21 = HIBYTE(v52) & 0x7F;
  }
  else {
    size_t v21 = v51;
  }
  if (v21 == 4)
  {
    if (v52 < 0)
    {
      uint64_t v22 = __s1;
    }
    else
    {
      uint64_t v22 = (void **)&__s1;
      unint64_t v20 = HIBYTE(v52);
    }
    if (v20 >= 4) {
      size_t v23 = 4;
    }
    else {
      size_t v23 = v20;
    }
    if (memcmp(v22, "true", v23) || v20 != 4)
    {
      uint64_t v18 = 0;
      goto LABEL_39;
    }
    unint64_t v26 = *(void **)(a2 + 328);
    uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
    uint8x8_t v28 = (unint64_t *)v26[7];
    uint64_t v29 = *(void *)(v27 + 8) + 1248;
    uint64_t v30 = (llvm::MachineFunction *)v26[4];
    unsigned int v53 = 0;
    uint64_t v31 = llvm::MachineFunction::CreateMachineInstr(v30, v29, &v53, 0);
    if (v53)
    {
      int v46 = *v53;
      if ((v46 - 4) > 0x1E)
      {
        if ((v46 - 3) >= 0xFFFFFFFE) {
          unsigned int v49 = v53;
        }
        else {
          unsigned int v49 = 0;
        }
        if ((v46 - 3) < 0xFFFFFFFE)
        {
          if (v46 == 3) {
            *((void *)v53 + 1) = 0;
          }
          goto LABEL_43;
        }
        unint64_t v48 = (unint64_t)(v49 + 8);
      }
      else
      {
        if ((v53[1] & 0x7F) != 2 && !*((_DWORD *)v53 + 3)) {
          goto LABEL_43;
        }
        uint64_t v47 = *((void *)v53 + 2);
        if ((v47 & 4) == 0) {
          goto LABEL_43;
        }
        unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
        if (!v48) {
          goto LABEL_43;
        }
      }
      uint64_t v54 = &v53;
      sub_1CC5FA668(v48 + 16, &v54);
    }
LABEL_43:
    uint64_t v32 = v26[5];
    *((void *)v31 + 3) = v32;
    uint64_t v33 = *(void *)(v32 + 32);
    uint64_t v34 = *((unsigned int *)v31 + 10);
    if (v34)
    {
      uint64_t v37 = *((void *)v31 + 4);
      uint64_t v38 = *(void *)(v33 + 40);
      uint64_t v39 = 32 * v34;
      do
      {
        if (!*(unsigned char *)v37)
        {
          uint64_t v40 = *(unsigned int *)(v37 + 4);
          if ((int)v40 >= 0) {
            unint64_t v41 = (uint64_t *)(*(void *)(v38 + 272) + 8 * v40);
          }
          else {
            unint64_t v41 = (uint64_t *)(*(void *)(v38 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
          }
          uint64_t v42 = *v41;
          if (*v41)
          {
            uint64_t v43 = *(void *)(v42 + 16);
            *(void *)(v42 + 16) = v37;
            *(void *)(v37 + 16) = v43;
            if (*(unsigned char *)(v37 + 3))
            {
              *(void *)(v37 + 24) = v42;
            }
            else
            {
              *(void *)(v37 + 24) = 0;
              unint64_t v41 = (uint64_t *)(v43 + 24);
            }
          }
          else
          {
            *(void *)(v37 + 16) = v37;
            *(void *)(v37 + 24) = 0;
          }
          uint64_t *v41 = v37;
        }
        v37 += 32;
        v39 -= 32;
      }
      while (v39);
    }
    uint64_t v35 = *(void *)(v33 + 728);
    if (v35) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v35 + 24))(v35, v31);
    }
    unint64_t v36 = *v28 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v31 = v36 | *(void *)v31 & 7;
    *((void *)v31 + 1) = v28;
    *(void *)(v36 + 8) = v31;
    unint64_t *v28 = *v28 & 7 | (unint64_t)v31;
    uint64_t v18 = 1;
    if (v19 < 0) {
LABEL_40:
    }
      operator delete(__s1);
  }
  else
  {
LABEL_39:
    if (v19 < 0) {
      goto LABEL_40;
    }
  }
  return v18;
}

void sub_1CC2A357C()
{
}

void sub_1CC2A3618()
{
}

void sub_1CC2A36BC(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  __n128 v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC2A3770(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC2A3820(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 120))(*(void *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 328);
  if (v4 == a2 + 320)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      uint64_t v6 = v4 + 48;
      uint64_t v7 = *(void *)(v4 + 56);
      if (v7 != v4 + 48)
      {
        do
        {
          if (!v7 || (uint64_t v8 = v7, (*(unsigned char *)v7 & 4) == 0))
          {
            uint64_t v8 = v7;
            if ((*(_WORD *)(v7 + 44) & 8) != 0)
            {
              uint64_t v8 = v7;
              do
                uint64_t v8 = *(void *)(v8 + 8);
              while ((*(_WORD *)(v8 + 44) & 8) != 0);
            }
          }
          uint64_t v9 = *(void *)(v8 + 8);
          if ((*(unsigned char *)(*(void *)(v7 + 16) + 11) & 8) != 0)
          {
            uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 2144))(v3);
            if (v10 == v4)
            {
              char v5 = 1;
            }
            else
            {
              uint64_t v6 = v10 + 48;
              uint64_t v9 = *(void *)(v10 + 56);
              char v5 = 1;
              uint64_t v4 = v10;
            }
          }
          uint64_t v7 = v9;
        }
        while (v9 != v6);
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a2 + 320);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 1480))(v3, a2);
  return v5 & 1;
}

void sub_1CC2A3990()
{
}

void sub_1CC2A3A28()
{
}

void sub_1CC2A3B3C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  __n128 v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    char v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC2A3BF0(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC2A3C9C()
{
  return "Fixup Statepoint Caller Saved";
}

void sub_1CC2A3CAC(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC2A3D20(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v355 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2) & 1) != 0
    || (*(_WORD *)(*(void *)a2 + 18) & 0x4000) == 0)
  {
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  v321 = v323;
  uint64_t v322 = 0x1000000000;
  uint64_t v5 = *(void *)(a2 + 328);
  if (v5 != a2 + 320)
  {
    unsigned int v6 = 0;
    do
    {
      for (uint64_t i = *(void *)(v5 + 56); i != v5 + 48; uint64_t i = *(void *)(i + 8))
      {
        if (**(_WORD **)(i + 16) == 31)
        {
          if (v6 >= HIDWORD(v322)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v321 + v6) = i;
          unsigned int v6 = v322 + 1;
          LODWORD(v322) = v322 + 1;
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != a2 + 320);
    if (v6)
    {
      uint64_t v305 = a2;
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
      uint64_t v9 = *(void *)(a2 + 56);
      uint64_t v306 = v8;
      v307[0] = v9;
      v308 = 0;
      uint64_t v309 = 0;
      v307[1] = v8;
      unsigned int v310 = 0;
      v311 = v313;
      uint64_t v312 = 0x800000000;
      v314 = &v315;
      v315 = 0;
      v317[0] = 0;
      v317[1] = 0;
      uint64_t v316 = 0;
      unsigned int v318 = 0;
      v319[0] = 0;
      v319[1] = 0;
      unsigned int v320 = 0;
      if (!v322)
      {
        unsigned int v10 = 0;
        uint64_t v11 = 0;
        LOBYTE(v3) = 0;
LABEL_483:
        sub_1CD514B1C(v11, v10);
        MEMORY[0x1D25D9CD0](v319[0], 8);
        uint64_t v285 = v317[0];
        if (v318)
        {
          uint64_t v286 = 88 * v318;
          uint64_t v287 = v317[0] + 24;
          do
          {
            if ((*(void *)(v287 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v288 = *(void **)(v287 - 16);
              if ((void *)v287 != v288) {
                free(v288);
              }
            }
            v287 += 88;
            v286 -= 88;
          }
          while (v286);
          uint64_t v285 = v317[0];
        }
        MEMORY[0x1D25D9CD0](v285, 8);
        sub_1CD3C5048((uint64_t)&v314, v315);
        if (v311 != v313) {
          free(v311);
        }
        v289 = v308;
        if (v310)
        {
          unint64_t v290 = (unint64_t)v310 << 6;
          v291 = v308 + 6;
          do
          {
            if (*((_DWORD *)v291 - 6) <= 0xFFFFFFFD)
            {
              v292 = (void *)*(v291 - 2);
              if (v291 != v292) {
                free(v292);
              }
            }
            v291 += 8;
            v290 -= 64;
          }
          while (v290);
          v289 = v308;
        }
        MEMORY[0x1D25D9CD0](v289, 8);
        goto LABEL_20;
      }
      unsigned int v12 = 0;
      int v3 = 0;
      uint64_t v13 = (char *)v321;
      uint64_t v14 = (char *)v321 + 8 * v322;
      int v15 = byte_1EBCCBAA8 != 0;
      uint64_t v16 = &byte_1EBCCB000;
      v294 = v14;
      while (1)
      {
        ++v12;
        if (*((_WORD *)v16 + 1496)) {
          int v15 = (v12 < dword_1EBCCBC28) & v15;
        }
        uint64_t v17 = *(void *)v13;
        uint64_t v18 = *(void *)(*(void *)v13 + 16);
        unsigned int v19 = *(unsigned __int8 *)(v18 + 4);
        if ((*(unsigned char *)(v18 + 8) & 2) == 0 || (int v38 = *(_DWORD *)(v17 + 40), v38 == v19))
        {
          int v20 = *(unsigned __int8 *)(v18 + 4);
        }
        else
        {
          int v39 = v38 - 1;
          int v20 = *(unsigned __int8 *)(v18 + 4);
          do
          {
            int v40 = *(_DWORD *)(*(void *)(v17 + 32) + 32 * v19);
            if ((v40 & 0x10000FF) != 0x1000000) {
              break;
            }
            v20 += (v40 & 0x2000000) == 0;
            if (v39 == v19) {
              break;
            }
            ++v19;
          }
          while ((v40 & 0x2000000) == 0);
        }
        uint64_t v21 = *(void *)(v18 + 32);
        if (v21)
        {
          unsigned int v22 = -1;
          do
            ++v22;
          while (*(_WORD *)(v21 + 2 * v22));
        }
        else
        {
          unsigned int v22 = 0;
        }
        int v23 = v22 + v20;
        uint64_t v24 = v22 + v20 + 2;
        uint64_t v25 = *(void *)(v17 + 32);
        int v26 = v23 + *(_DWORD *)(v25 + 32 * v24 + 16);
        if ((*(unsigned char *)(v25 + 32 * (v26 + 7) + 16) & 2) == 0) {
          break;
        }
        BOOL v31 = 0;
LABEL_451:
        v3 |= v31;
        v13 += 8;
        if (v13 == v14)
        {
          uint64_t v11 = v319[0];
          unsigned int v10 = v320;
          goto LABEL_483;
        }
      }
      v298 = v13;
      unsigned int v299 = v12;
      int v300 = v3;
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v306 + 40))(v306, v305, *(unsigned int *)(v25 + 32 * (v26 + 5) + 16));
      uint8x8_t v28 = *(llvm::MachineFunction **)(*(void *)(v17 + 24) + 32);
      v324 = (llvm::MachineInstr *)v17;
      v325 = v28;
      uint64_t v327 = (*(uint64_t (**)(void *))(**((void **)v28 + 2) + 176))(*((void **)v28 + 2));
      uint64_t v29 = (*(uint64_t (**)(void))(**((void **)v325 + 2) + 104))(*((void *)v325 + 2));
      uint64_t v329 = *((void *)v325 + 7);
      uint64_t v330 = v27;
      v331 = v307;
      char v332 = v15 & 1;
      v333 = v335;
      uint64_t v334 = 0x800000000;
      v336 = v338;
      uint64_t v337 = 0x800000000;
      v339 = v341;
      uint64_t v340 = 0x800000000;
      v328 = (void *)v29;
      v326 = 0;
      v342 = 0;
      uint64_t v343 = 0;
      unsigned int v344 = 0;
      uint64_t v30 = *(void *)(v17 + 24);
      while (1)
      {
        uint64_t v17 = *(void *)(v17 + 8);
        if (v17 == v30 + 48) {
          break;
        }
        if (**(_WORD **)(v17 + 16) == 31) {
          goto LABEL_44;
        }
      }
      uint64_t v33 = *(uint64_t ***)(v30 + 88);
      uint64_t v32 = *(uint64_t ***)(v30 + 96);
      if (v33 == v32)
      {
LABEL_44:
        uint64_t v34 = 0;
        goto LABEL_45;
      }
      while (1)
      {
        uint64_t v34 = (unsigned __int8 **)*v33;
        if (*((unsigned char *)*v33 + 184)) {
          break;
        }
        if (++v33 == v32)
        {
          uint64_t v34 = 0;
          goto LABEL_45;
        }
      }
      v326 = *v33;
LABEL_45:
      v349 = v34;
      uint64_t v35 = &v308[16 * (unint64_t)v310];
      if (v309)
      {
        if (v310)
        {
          unint64_t v36 = (unint64_t)v310 << 6;
          uint64_t v37 = v308;
          while (*v37 >= 0xFFFFFFFE)
          {
            v37 += 16;
            v36 -= 64;
            if (!v36) {
              goto LABEL_50;
            }
          }
        }
        else
        {
          uint64_t v37 = v308;
        }
      }
      else
      {
LABEL_50:
        uint64_t v37 = &v308[16 * (unint64_t)v310];
      }
      unint64_t v41 = &v308[16 * (unint64_t)v310];
LABEL_59:
      while (v37 != v41)
      {
        v37[14] = 0;
        uint64_t v42 = v37 + 16;
        while (v42 != v35)
        {
          unsigned int v43 = *v42;
          v42 += 16;
          if (v43 <= 0xFFFFFFFD)
          {
            uint64_t v37 = v42 - 16;
            goto LABEL_59;
          }
        }
        uint64_t v37 = v35;
      }
      LODWORD(v312) = 0;
      sub_1CD3C5048((uint64_t)&v314, v315);
      v315 = 0;
      uint64_t v316 = 0;
      v314 = &v315;
      if (v34 && v318)
      {
        unsigned int v44 = (v318 - 1) & ((v34 >> 4) ^ (v34 >> 9));
        unint64_t v45 = *(unsigned __int8 ***)(v317[0] + 88 * v44);
        if (v34 == v45)
        {
LABEL_68:
          int v46 = sub_1CD513B14((uint64_t)v317, (uint64_t *)&v349);
          uint64_t v47 = *((unsigned int *)v46 + 4);
          if (v47)
          {
            uint64_t v48 = 8 * v47;
            unsigned int v49 = (int *)(v46[1] + 4);
            do
            {
              sub_1CD513968((uint64_t **)&v311, v49);
              v49 += 2;
              v48 -= 8;
            }
            while (v48);
          }
        }
        else
        {
          int v282 = 1;
          while (v45 != (unsigned __int8 **)-4096)
          {
            unsigned int v283 = v44 + v282++;
            unsigned int v44 = v283 & (v318 - 1);
            unint64_t v45 = *(unsigned __int8 ***)(v317[0] + 88 * v44);
            if (v34 == v45) {
              goto LABEL_68;
            }
          }
        }
      }
      v349 = (unsigned __int8 **)v351;
      uint64_t v350 = 0x800000000;
      v353 = 0;
      uint64_t v354 = 0;
      v352 = (unsigned __int8 **)&v353;
      unsigned int v50 = v324;
      uint64_t v51 = *((void *)v324 + 4);
      uint64_t v52 = *((void *)v324 + 2);
      unsigned int v53 = *(unsigned __int8 *)(v52 + 4);
      if ((*(unsigned char *)(v52 + 8) & 2) != 0)
      {
        int v223 = *((_DWORD *)v324 + 10);
        if (v223 == v53)
        {
          unsigned int v54 = v53;
        }
        else
        {
          int v224 = v223 - 1;
          unsigned int v54 = v53;
          do
          {
            int v225 = *(_DWORD *)(v51 + 32 * v53);
            if ((v225 & 0x10000FF) != 0x1000000) {
              break;
            }
            v54 += (v225 & 0x2000000) == 0;
            if (v224 == v53) {
              break;
            }
            ++v53;
          }
          while ((v225 & 0x2000000) == 0);
        }
      }
      else
      {
        unsigned int v54 = *(unsigned __int8 *)(v52 + 4);
      }
      if (v54)
      {
        uint64_t v55 = 32 * v54;
        unsigned int v56 = (int *)(v51 + 4);
        do
        {
          int v57 = *v56;
          v56 += 8;
          LODWORD(v345) = v57;
          sub_1CD513F60((uint64_t)&v349, (unsigned int *)&v345);
          v55 -= 32;
        }
        while (v55);
        unsigned int v50 = v324;
      }
      *(void *)&long long v345 = v346;
      *((void *)&v345 + 1) = 0x800000000;
      v348[0] = 0;
      v348[1] = 0;
      v347 = v348;
      uint64_t v58 = *((void *)v50 + 2);
      unsigned int v59 = *(unsigned __int8 *)(v58 + 4);
      if ((*(unsigned char *)(v58 + 8) & 2) == 0 || (int v226 = *((_DWORD *)v50 + 10), v226 == v59))
      {
        int v60 = *(unsigned __int8 *)(v58 + 4);
      }
      else
      {
        int v227 = v226 - 1;
        int v60 = *(unsigned __int8 *)(v58 + 4);
        do
        {
          int v228 = *(_DWORD *)(*((void *)v50 + 4) + 32 * v59);
          if ((v228 & 0x10000FF) != 0x1000000) {
            break;
          }
          v60 += (v228 & 0x2000000) == 0;
          if (v227 == v59) {
            break;
          }
          ++v59;
        }
        while ((v228 & 0x2000000) == 0);
      }
      uint64_t v61 = *(void *)(v58 + 32);
      if (v61)
      {
        unsigned int v62 = -1;
        do
          ++v62;
        while (*(_WORD *)(v61 + 2 * v62));
      }
      else
      {
        unsigned int v62 = 0;
      }
      uint64_t v63 = v62 + v60 + *(_DWORD *)(*((void *)v50 + 4) + 32 * (v62 + v60 + 2) + 16) + 4;
      uint64_t v64 = *((unsigned int *)v50 + 10);
      if (v63 < v64)
      {
        do
        {
          uint64_t v65 = *((void *)v324 + 4);
          if ((*(_DWORD *)(v65 + 32 * v63) & 0x120000FF) == 0)
          {
            unint64_t v66 = *(unsigned int *)(v65 + 32 * v63 + 4);
            LODWORD(v301[0]) = v66;
            if ((*(_DWORD *)(v330 + ((v66 >> 3) & 0x1FFFFFFC)) >> v66))
            {
              if (v332) {
                goto LABEL_111;
              }
              uint64_t v67 = v352;
              if (!v354) {
                uint64_t v67 = v349;
              }
              unsigned int v68 = (unsigned __int8 **)((char *)v349 + 4 * v350);
              if (v354) {
                unsigned int v68 = (unsigned __int8 **)&v353;
              }
              if (v67 == v68) {
                goto LABEL_111;
              }
              while (1)
              {
                unsigned int v69 = (unsigned __int8 **)((char *)v67 + 28);
                if (!v354) {
                  unsigned int v69 = v67;
                }
                if (*(_DWORD *)v69 == v66) {
                  break;
                }
                if (v354)
                {
                  int v70 = v67[1];
                  if (v70)
                  {
                    do
                    {
                      uint64_t v71 = (unsigned __int8 **)v70;
                      int v70 = *(unsigned __int8 **)v70;
                    }
                    while (v70);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v71 = (unsigned __int8 **)v67[2];
                      BOOL v80 = *v71 == (unsigned __int8 *)v67;
                      uint64_t v67 = v71;
                    }
                    while (!v80);
                  }
                }
                else
                {
                  uint64_t v71 = (unsigned __int8 **)((char *)v67 + 4);
                }
                uint64_t v67 = v71;
                if (v71 == v68) {
                  goto LABEL_111;
                }
              }
            }
            if ((sub_1CD513F60((uint64_t)&v345, (unsigned int *)v301) & 0x100000000) != 0)
            {
              if (v337 >= (unint64_t)HIDWORD(v337)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v336 + v337) = v301[0];
              LODWORD(v337) = v337 + 1;
            }
            if (v334 >= (unint64_t)HIDWORD(v334)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v333 + v334) = v63;
            LODWORD(v334) = v334 + 1;
          }
LABEL_111:
          ++v63;
        }
        while (v63 != v64);
      }
      if (byte_1EBCCB9E8)
      {
        v301[0] = (uint64_t)v331;
        unint64_t v72 = 126 - 2 * __clz(v337);
        if (v337) {
          uint64_t v73 = v72;
        }
        else {
          uint64_t v73 = 0;
        }
        sub_1CC2A5C34((unint64_t)v336, (unsigned int *)v336 + v337, v301, v73, 1);
      }
      int v297 = v15;
      int v74 = v337;
      sub_1CB833A08((uint64_t)&v347, v348[0]);
      if ((_OWORD *)v345 != v346) {
        free((void *)v345);
      }
      sub_1CB833A08((uint64_t)&v352, v353);
      if (v349 != (unsigned __int8 **)v351) {
        free(v349);
      }
      BOOL v296 = v74 != 0;
      if (!v74)
      {
LABEL_444:
        MEMORY[0x1D25D9CD0](v342, 4);
        if (v339 != v341) {
          free(v339);
        }
        int v3 = v300;
        int v15 = v297;
        if (v336 != v338) {
          free(v336);
        }
        if (v333 != v335) {
          free(v333);
        }
        unsigned int v12 = v299;
        uint64_t v13 = v298;
        uint64_t v14 = v294;
        uint64_t v16 = &byte_1EBCCB000;
        BOOL v31 = v296;
        goto LABEL_451;
      }
      if (v337)
      {
        uint64_t v75 = v336;
        v295 = (char *)v336 + 4 * v337;
        while (1)
        {
          unint64_t v76 = *v75;
          LODWORD(v301[0]) = *v75;
          uint64_t v77 = v331;
          __int16 v78 = v326;
          *(void *)&long long v345 = v326;
          uint64_t v79 = v331[14];
          v349 = 0;
          BOOL v80 = !sub_1CD513A78(v79, *((_DWORD *)v331 + 32), (uint64_t)v326, &v349)
             || v349 == (unsigned __int8 **)(v77[14] + 88 * *((unsigned int *)v77 + 32));
          if (v80) {
            break;
          }
          uint64_t v81 = *((unsigned int *)v349 + 4);
          if (!v81) {
            break;
          }
          uint64_t v82 = (unsigned int *)(v349[1] + 4);
          uint64_t v83 = 8 * v81;
          while (*(v82 - 1) != v76)
          {
            v82 += 2;
            v83 -= 8;
            if (!v83) {
              goto LABEL_135;
            }
          }
          uint64_t SpillStackObject = *v82;
LABEL_183:
          unint64_t v120 = LODWORD(v301[0]);
          int v121 = *(uint64_t ***)(v327 + 240);
          unsigned int v122 = *(uint64_t ***)(v327 + 248);
          if (v121 == v122)
          {
            uint64_t v123 = 0;
          }
          else
          {
            uint64_t v123 = 0;
            unint64_t v124 = (unint64_t)LODWORD(v301[0]) >> 3;
            do
            {
              if ((LODWORD(v301[0]) - 0x40000000) >= 0xC0000001)
              {
                uint64_t v125 = **v121;
                if (v124 < *(unsigned __int16 *)(v125 + 22)
                  && ((1 << (v301[0] & 7)) & *(unsigned __int8 *)(*(void *)(v125 + 8) + v124)) != 0
                  && (!v123
                   || *v121 != v123
                   && ((*(_DWORD *)(v123[1] + ((*(unsigned __int16 *)(v125 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v125 + 24)) & 1) != 0))
                {
                  uint64_t v123 = *v121;
                }
              }
              ++v121;
            }
            while (v121 != v122);
          }
          sub_1CD514074((uint64_t)&v342, (int *)v301)[1] = SpillStackObject;
          uint64_t v126 = v328;
          uint64_t v127 = v324;
          uint64_t v128 = v327;
          unsigned int RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx((uint64_t)v324, v120, 0, v327);
          if ((RegisterUseOperandIdx & 0x80000000) != 0) {
            goto LABEL_205;
          }
          uint64_t v130 = *((void *)v127 + 2);
          unsigned int v131 = *(unsigned __int8 *)(v130 + 4);
          if ((*(unsigned char *)(v130 + 8) & 2) == 0 || (int v143 = *((_DWORD *)v127 + 10), v143 == v131))
          {
            int v132 = *(unsigned __int8 *)(v130 + 4);
          }
          else
          {
            int v144 = v143 - 1;
            int v132 = *(unsigned __int8 *)(v130 + 4);
            do
            {
              int v145 = *(_DWORD *)(*((void *)v127 + 4) + 32 * v131);
              if ((v145 & 0x10000FF) != 0x1000000) {
                break;
              }
              v132 += (v145 & 0x2000000) == 0;
              if (v144 == v131) {
                break;
              }
              ++v131;
            }
            while ((v145 & 0x2000000) == 0);
          }
          uint64_t v133 = *(void *)(v130 + 32);
          if (v133)
          {
            unsigned int v134 = -1;
            do
              ++v134;
            while (*(_WORD *)(v133 + 2 * v134));
          }
          else
          {
            unsigned int v134 = 0;
          }
          if (RegisterUseOperandIdx >= v134
                                      + v132
                                      + *(_DWORD *)(*((void *)v127 + 4) + 32 * (v134 + v132 + 2) + 16)
                                      + 9)
          {
LABEL_205:
            if (byte_1EBCCBB68)
            {
              v293 = v126;
              unint64_t v136 = *(void *)v127 & 0xFFFFFFFFFFFFFFF8;
              if (!v136 || (*(unsigned char *)v136 & 4) == 0)
              {
                while ((*(_WORD *)(v136 + 44) & 4) != 0)
                  unint64_t v136 = *(void *)v136 & 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v137 = *((void *)v127 + 3) + 48;
              if (v136 != v137)
              {
                unint64_t v138 = 0;
                while (1)
                {
                  int v139 = llvm::MachineInstr::findRegisterUseOperandIdx(v136, v120, 0, v128);
                  if (v138) {
                    BOOL v140 = 1;
                  }
                  else {
                    BOOL v140 = v139 == -1;
                  }
                  if (!v140) {
                    unint64_t v138 = v136;
                  }
                  if (llvm::MachineInstr::findRegisterDefOperandIdx(v136, v120, 0, 1, v128) != -1) {
                    break;
                  }
                  unint64_t v136 = *(void *)v136 & 0xFFFFFFFFFFFFFFF8;
                  if (!v136 || (*(unsigned char *)v136 & 4) == 0)
                  {
                    while ((*(_WORD *)(v136 + 44) & 4) != 0)
                      unint64_t v136 = *(void *)v136 & 0xFFFFFFFFFFFFFFF8;
                  }
                  if (v136 == v137) {
                    goto LABEL_266;
                  }
                }
                if (**(_WORD **)(v136 + 16) == 19)
                {
                  uint64_t v142 = *(unsigned __int8 ***)(v136 + 32);
                  v349 = v142;
                  uint64_t v350 = (uint64_t)(v142 + 4);
                  v351[0] = 1;
                  goto LABEL_238;
                }
                (*(void (**)(unsigned __int8 ***__return_ptr))(*v293 + 416))(&v349);
                if (v351[0])
                {
                  uint64_t v142 = v349;
LABEL_238:
                  if (*((_DWORD *)v142 + 1) == v120)
                  {
                    v146 = 0;
                    unint64_t v141 = *(unsigned int *)(v350 + 4);
                    v147 = *(char **)(v128 + 240);
                    uint64_t v148 = *(char **)(v128 + 248);
                    unint64_t v149 = v120 >> 3;
                    __int16 v150 = v147;
                    do
                    {
                      if ((v120 - 0x40000000) >= 0xC0000001)
                      {
                        uint64_t v151 = **(void **)v150;
                        if (v149 < *(unsigned __int16 *)(v151 + 22)
                          && ((1 << (v120 & 7)) & *(unsigned __int8 *)(*(void *)(v151 + 8) + v149)) != 0
                          && (!v146
                           || *(uint64_t **)v150 != v146
                           && ((*(_DWORD *)(v146[1] + ((*(unsigned __int16 *)(v151 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v151 + 24)) & 1) != 0))
                        {
                          v146 = *(uint64_t **)v150;
                        }
                      }
                      v150 += 8;
                    }
                    while (v150 != v148);
                    v152 = 0;
                    uint64_t v153 = *(void *)(v128 + 264);
                    int v154 = *(_DWORD *)(v128 + 272) * ((unint64_t)(v148 - v147) >> 3);
                    unsigned int v155 = *(_DWORD *)(v153 + 24 * (v154 + *(unsigned __int16 *)(*v146 + 24)) + 4);
                    unint64_t v156 = v141 >> 3;
                    do
                    {
                      if ((v141 - 0x40000000) >= 0xC0000001)
                      {
                        uint64_t v157 = **(void **)v147;
                        if (v156 < *(unsigned __int16 *)(v157 + 22)
                          && ((1 << (v141 & 7)) & *(unsigned __int8 *)(*(void *)(v157 + 8) + v156)) != 0
                          && (!v152
                           || *(uint64_t **)v147 != v152
                           && ((*(_DWORD *)(v152[1] + ((*(unsigned __int16 *)(v157 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v157 + 24)) & 1) != 0))
                        {
                          v152 = *(uint64_t **)v147;
                        }
                      }
                      v147 += 8;
                    }
                    while (v147 != v148);
                    if ((*(_DWORD *)(v153 + 24 * (v154 + *(unsigned __int16 *)(*v152 + 24)) + 4) ^ v155) <= 7)
                    {
                      unint64_t v158 = v136;
                      if ((*(unsigned char *)v136 & 4) == 0)
                      {
                        unint64_t v158 = v136;
                        if ((*(_WORD *)(v136 + 44) & 8) != 0)
                        {
                          unint64_t v158 = v136;
                          do
                            unint64_t v158 = *(void *)(v158 + 8);
                          while ((*(_WORD *)(v158 + 44) & 8) != 0);
                        }
                      }
                      uint64_t v127 = *(llvm::MachineInstr **)(v158 + 8);
                      uint64_t v135 = (*(_DWORD *)v350 >> 26) & ~HIBYTE(*(_DWORD *)v350) & 1;
                      if (!v138) {
                        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v136);
                      }
                      unint64_t v120 = v141;
                      goto LABEL_267;
                    }
                  }
                }
              }
LABEL_266:
              uint64_t v135 = 1;
              LODWORD(v141) = v120;
              goto LABEL_267;
            }
            uint64_t v135 = 1;
          }
          else
          {
            uint64_t v135 = 0;
          }
          LODWORD(v141) = v120;
LABEL_267:
          LODWORD(v301[0]) = v141;
          (*(void (**)(void *, void, llvm::MachineInstr *, unint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*v328 + 448))(v328, *((void *)v324 + 3), v127, v120, v135, SpillStackObject, v123, v327);
          if (++v75 == (_DWORD *)v295) {
            goto LABEL_309;
          }
        }
LABEL_135:
        unsigned int v84 = 0;
        uint64_t v85 = v77[1];
        uint64_t v86 = *(uint64_t ***)(v85 + 248);
        unint64_t v87 = v76 >> 3;
        uint64_t v88 = *(uint64_t ***)(v85 + 240);
        do
        {
          if ((v76 - 0x40000000) >= 0xC0000001)
          {
            uint64_t v89 = **v88;
            if (v87 < *(unsigned __int16 *)(v89 + 22)
              && ((1 << (v76 & 7)) & *(unsigned __int8 *)(*(void *)(v89 + 8) + v87)) != 0
              && (!v84
               || *v88 != v84
               && ((*(_DWORD *)(v84[1] + ((*(unsigned __int16 *)(v89 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v89 + 24)) & 1) != 0))
            {
              unsigned int v84 = *v88;
            }
          }
          ++v88;
        }
        while (v88 != v86);
        int64_t v90 = (unint64_t)*(unsigned int *)(*(void *)(v85 + 264)
                                                + 24
                                                * (*(unsigned __int16 *)(*v84 + 24)
                                                 + *(_DWORD *)(v85 + 272)
                                                 * (((unint64_t)v86 - *(void *)(v85 + 240)) >> 3))
                                                + 4) >> 3;
        unint64_t v91 = v77 + 2;
        uint64_t v92 = v77[2];
        if (byte_1EBCCB9E8) {
          int v93 = 0;
        }
        else {
          int v93 = v90;
        }
        unsigned int v94 = *((_DWORD *)v77 + 8);
        if (v94)
        {
          uint64_t v97 = (37 * v93) & (v94 - 1);
          uint64_t v95 = (int *)(v92 + (v97 << 6));
          int v98 = *v95;
          if (v93 == *v95) {
            goto LABEL_156;
          }
          v168 = 0;
          int v169 = 1;
          while (v98 != -1)
          {
            if (v168) {
              BOOL v170 = 0;
            }
            else {
              BOOL v170 = v98 == -2;
            }
            if (v170) {
              v168 = v95;
            }
            int v171 = v97 + v169++;
            uint64_t v97 = v171 & (v94 - 1);
            uint64_t v95 = (int *)(v92 + (v97 << 6));
            int v98 = *v95;
            if (v93 == *v95) {
              goto LABEL_156;
            }
          }
          if (v168) {
            uint64_t v95 = v168;
          }
        }
        else
        {
          uint64_t v95 = 0;
        }
        int v96 = *((_DWORD *)v77 + 6);
        if (4 * v96 + 4 >= 3 * v94)
        {
          sub_1CC2A9D6C(v91, 2 * v94);
          int v159 = *((_DWORD *)v77 + 8);
          if (!v159) {
            goto LABEL_291;
          }
          uint64_t v160 = v77[2];
          unsigned int v161 = v159 - 1;
          uint64_t v162 = v161 & (37 * v93);
          uint64_t v95 = (int *)(v160 + (v162 << 6));
          int v163 = *v95;
          if (v93 == *v95) {
            goto LABEL_152;
          }
          v164 = 0;
          int v165 = 1;
          while (v163 != -1)
          {
            if (v164) {
              BOOL v166 = 0;
            }
            else {
              BOOL v166 = v163 == -2;
            }
            if (v166) {
              v164 = v95;
            }
            int v167 = v162 + v165++;
            uint64_t v162 = v167 & v161;
            uint64_t v95 = (int *)(v160 + (v162 << 6));
            int v163 = *v95;
            if (v93 == *v95) {
              goto LABEL_152;
            }
          }
        }
        else
        {
          if (v94 + ~v96 - *((_DWORD *)v77 + 7) > v94 >> 3)
          {
LABEL_152:
            ++*((_DWORD *)v77 + 6);
            if (*v95 != -1) {
              --*((_DWORD *)v77 + 7);
            }
            *uint64_t v95 = v93;
            *(_OWORD *)(v95 + 10) = 0u;
            *((void *)v95 + 7) = 0;
            *(_OWORD *)(v95 + 6) = 0u;
            *((void *)v95 + 1) = v95 + 6;
            *((void *)v95 + 2) = 0x800000000;
LABEL_156:
            unsigned int v99 = v95[4];
            uint64_t v100 = v95[14];
            if (v99 <= v100)
            {
LABEL_172:
              uint64_t SpillStackObject = llvm::MachineFrameInfo::CreateSpillStackObject((unsigned __int8 *)*v77, v90, 63 - __clz(v90));
              unint64_t v110 = v95[4];
              if (v110 >= v95[5]) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(*((void *)v95 + 1) + 4 * v110) = SpillStackObject;
              ++v95[4];
              ++v95[14];
              if (v78)
              {
                char v118 = sub_1CD513B14((uint64_t)(v77 + 14), (uint64_t *)&v345);
                unint64_t v119 = *((unsigned int *)v118 + 4);
                if (v119 >= *((unsigned int *)v118 + 5)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v118[1] + 8 * v119) = v76 | (SpillStackObject << 32);
                ++*((_DWORD *)v118 + 4);
              }
            }
            else
            {
              uint64_t v101 = *((void *)v95 + 1);
              uint64_t v102 = v77[13];
              while (1)
              {
                uint64_t v103 = v100 + 1;
                v95[14] = v100 + 1;
                uint64_t SpillStackObject = *(unsigned int *)(v101 + 4 * v100);
                if (v102) {
                  break;
                }
                uint64_t v107 = *((unsigned int *)v77 + 12);
                if (!v107) {
                  goto LABEL_175;
                }
                uint64_t v108 = (_DWORD *)v77[5];
                uint64_t v109 = 4 * v107;
                while (*v108 != SpillStackObject)
                {
                  ++v108;
                  v109 -= 4;
                  if (!v109) {
                    goto LABEL_175;
                  }
                }
                if (!v109) {
                  goto LABEL_175;
                }
LABEL_171:
                uint64_t v100 = v103;
                if (v99 == v103) {
                  goto LABEL_172;
                }
              }
              for (unint64_t j = (uint64_t *)v77[12]; j; unint64_t j = (uint64_t *)*j)
              {
                int v106 = *((_DWORD *)j + 7);
                if ((int)SpillStackObject >= v106)
                {
                  if (v106 >= (int)SpillStackObject) {
                    goto LABEL_171;
                  }
                  ++j;
                }
              }
LABEL_175:
              v111 = (unsigned __int8 *)*v77;
              unsigned int v112 = *(_DWORD *)(*v77 + 32) + SpillStackObject;
              uint64_t v113 = *(void *)(*v77 + 8);
              uint64_t v114 = v113 + 40 * v112;
              int64_t v116 = *(void *)(v114 + 8);
              v115 = (int64_t *)(v114 + 8);
              if (v116 < v90)
              {
                int64_t *v115 = v90;
                unsigned __int8 v117 = 63 - __clz(v90);
                *(unsigned char *)(v113 + 40 * v112 + 16) = v117;
                if (!*(unsigned char *)(*((void *)v111 + 1)
                               + 40 * (*((_DWORD *)v111 + 8) + SpillStackObject)
                               + 20)
                  && v111[60] < v117)
                {
                  v111[60] = v117;
                }
              }
            }
            goto LABEL_183;
          }
          sub_1CC2A9D6C(v91, v94);
          int v172 = *((_DWORD *)v77 + 8);
          if (!v172)
          {
LABEL_291:
            uint64_t v95 = 0;
            goto LABEL_152;
          }
          uint64_t v173 = v77[2];
          unsigned int v174 = v172 - 1;
          uint64_t v175 = v174 & (37 * v93);
          uint64_t v95 = (int *)(v173 + (v175 << 6));
          int v176 = *v95;
          if (v93 == *v95) {
            goto LABEL_152;
          }
          v164 = 0;
          int v177 = 1;
          while (v176 != -1)
          {
            if (v164) {
              BOOL v178 = 0;
            }
            else {
              BOOL v178 = v176 == -2;
            }
            if (v178) {
              v164 = v95;
            }
            int v179 = v175 + v177++;
            uint64_t v175 = v179 & v174;
            uint64_t v95 = (int *)(v173 + (v175 << 6));
            int v176 = *v95;
            if (v93 == *v95) {
              goto LABEL_152;
            }
          }
        }
        if (v164) {
          uint64_t v95 = v164;
        }
        goto LABEL_152;
      }
LABEL_309:
      v180 = v325;
      unsigned int v181 = **((unsigned __int16 **)v324 + 2);
      uint64_t v182 = v328[1];
      v183 = (unsigned __int8 *)*((void *)v324 + 7);
      v304 = v183;
      if (v183) {
        llvm::MetadataTracking::track((uint64_t)&v304, v183, 2);
      }
      uint64_t v184 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v180, v182 + 48 * v181, &v304, 1);
      if (v304)
      {
        int v185 = *v304;
        if ((v185 - 4) > 0x1E)
        {
          if ((v185 - 3) >= 0xFFFFFFFE) {
            v229 = v304;
          }
          else {
            v229 = 0;
          }
          if ((v185 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v230 = (unint64_t)(v229 + 8);
LABEL_388:
            v349 = &v304;
            sub_1CC5FA668(v230 + 16, &v349);
            goto LABEL_315;
          }
          if (v185 == 3) {
            *((void *)v304 + 1) = 0;
          }
        }
        else if ((v304[1] & 0x7F) == 2 || *((_DWORD *)v304 + 3))
        {
          uint64_t v284 = *((void *)v304 + 2);
          if ((v284 & 4) != 0)
          {
            unint64_t v230 = v284 & 0xFFFFFFFFFFFFFFF8;
            if (v230) {
              goto LABEL_388;
            }
          }
        }
      }
LABEL_315:
      v186 = v325;
      int v187 = *((_DWORD *)v324 + 10);
      v349 = (unsigned __int8 **)v351;
      uint64_t v350 = 0x800000000;
      uint64_t v188 = *((void *)v324 + 2);
      unsigned int v189 = *(unsigned __int8 *)(v188 + 4);
      if ((*(unsigned char *)(v188 + 8) & 2) != 0)
      {
        int v190 = v187;
        if (v187 != v189)
        {
          int v190 = *(unsigned __int8 *)(v188 + 4);
          do
          {
            int v274 = *(_DWORD *)(*((void *)v324 + 4) + 32 * v189);
            if ((v274 & 0x10000FF) != 0x1000000) {
              break;
            }
            v190 += (v274 & 0x2000000) == 0;
            if (v187 - 1 == v189) {
              break;
            }
            ++v189;
          }
          while ((v274 & 0x2000000) == 0);
        }
      }
      else
      {
        int v190 = *(unsigned __int8 *)(v188 + 4);
      }
      uint64_t v191 = *(void *)(v188 + 32);
      if (v191)
      {
        unsigned int v192 = -1;
        do
          ++v192;
        while (*(_WORD *)(v191 + 2 * v192));
      }
      else
      {
        unsigned int v192 = 0;
      }
      unint64_t v193 = v192 + v190;
      if (v192 + v190)
      {
        uint64_t v194 = 0;
        uint64_t v195 = 4;
        while (1)
        {
          v196 = v324;
          unint64_t v197 = *(unsigned int *)(*((void *)v324 + 4) + v195);
          if ((*(unsigned char *)(*((void *)v196 + 4)
                         + 32 * llvm::MachineInstr::findTiedOperandIdx(v324, v194)
                         + 3) & 0x10) != 0)
          {
            if (v332)
            {
LABEL_332:
              if (v350 >= (unint64_t)HIDWORD(v350)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v349 + v350) = *(_DWORD *)(v184 + 40);
              LODWORD(v350) = v350 + 1;
              *((void *)&v345 + 1) = 0;
              v346[0] = 0uLL;
              LODWORD(v345) = 0x1000000;
              DWORD1(v345) = v197;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v184, v186, (const llvm::MachineOperand *)&v345);
            }
          }
          else
          {
            if (v332)
            {
              if ((*(_DWORD *)(v330 + ((v197 >> 3) & 0x1FFFFFFC)) >> v197)) {
                goto LABEL_332;
              }
              if (v350 >= (unint64_t)HIDWORD(v350)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v349 + v350) = v187;
              LODWORD(v350) = v350 + 1;
            }
            if (v340 >= (unint64_t)HIDWORD(v340)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v339 + v340) = v197;
            LODWORD(v340) = v340 + 1;
          }
          ++v194;
          v195 += 32;
          if (v193 == v194)
          {
            int v187 = *((_DWORD *)v324 + 10);
            break;
          }
        }
      }
      if (v334 >= (unint64_t)HIDWORD(v334)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v333 + v334) = v187;
      LODWORD(v334) = v334 + 1;
      v198 = v324;
      if (v193 < *((_DWORD *)v324 + 10))
      {
        unsigned int v199 = 0;
        do
        {
          uint64_t v200 = *((void *)v198 + 4);
          if (v193 == *((_DWORD *)v333 + v199))
          {
            uint64_t v205 = v200 + 32 * v193;
            LODWORD(v345) = *(_DWORD *)(v205 + 4);
            int v206 = sub_1CD514074((uint64_t)&v342, (int *)&v345)[1];
            LODWORD(v345) = 1;
            *((void *)&v345 + 1) = 0;
            *(void *)&v346[0] = 1;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v184, v186, (const llvm::MachineOperand *)&v345);
            v207 = 0;
            unint64_t v208 = *(unsigned int *)(v205 + 4);
            v209 = *(uint64_t ***)(v327 + 248);
            unsigned int v210 = v208 - 0x40000000;
            unint64_t v211 = v208 >> 3;
            int v212 = 1 << (v208 & 7);
            v213 = *(uint64_t ***)(v327 + 240);
            do
            {
              if (v210 >= 0xC0000001)
              {
                uint64_t v214 = **v213;
                if (v211 < *(unsigned __int16 *)(v214 + 22)
                  && (v212 & *(unsigned char *)(*(void *)(v214 + 8) + v211)) != 0
                  && (!v207
                   || *v213 != v207
                   && ((*(_DWORD *)(v207[1] + ((*(unsigned __int16 *)(v214 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v214 + 24)) & 1) != 0))
                {
                  v207 = *v213;
                }
              }
              ++v213;
            }
            while (v213 != v209);
            unint64_t v215 = (unint64_t)*(unsigned int *)(*(void *)(v327 + 264)
                                                     + 24
                                                     * (*(unsigned __int16 *)(*v207 + 24)
                                                      + *(_DWORD *)(v327 + 272)
                                                      * (((unint64_t)v209 - *(void *)(v327 + 240)) >> 3))
                                                     + 4) >> 3;
            LODWORD(v345) = 1;
            *((void *)&v345 + 1) = 0;
            *(void *)&v346[0] = v215;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v184, v186, (const llvm::MachineOperand *)&v345);
            LODWORD(v345) = 5;
            *((void *)&v345 + 1) = 0;
            LODWORD(v346[0]) = v206;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v184, v186, (const llvm::MachineOperand *)&v345);
            LODWORD(v345) = 1;
            *((void *)&v345 + 1) = 0;
            *(void *)&v346[0] = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v184, v186, (const llvm::MachineOperand *)&v345);
            ++v199;
          }
          else
          {
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v184, v186, (const llvm::MachineOperand *)(v200 + 32 * v193));
            if (v332)
            {
              int v201 = *(_DWORD *)(*((void *)v324 + 4) + 32 * v193);
              int v202 = v201 & 0x10000FF;
              int v203 = v201 & 0xF00000;
              if (!v202 && v203 != 0)
              {
                unsigned int TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx(v324, v193);
                llvm::MachineInstr::tieOperands(v184, *((_DWORD *)v349 + TiedOperandIdx), *(_DWORD *)(v184 + 40) - 1);
              }
            }
          }
          ++v193;
          v198 = v324;
        }
        while (v193 < *((unsigned int *)v324 + 10));
      }
      v217 = (uint64_t *)v325;
      unint64_t v220 = *((void *)v198 + 6);
      v218 = (unint64_t *)((char *)v198 + 48);
      unint64_t v219 = v220;
      if (v220 >= 8)
      {
        if ((v219 & 7) == 0)
        {
          unint64_t *v218 = v219 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v231 = 1;
LABEL_389:
          llvm::MachineInstr::setMemRefs(v184, v217, v218, v231);
          v233 = &v342[2 * v344];
          if (v343)
          {
            if (v344)
            {
              uint64_t v234 = 8 * v344;
              v235 = v342;
              while (*v235 >= 0xFFFFFFFE)
              {
                v235 += 2;
                v234 -= 8;
                if (!v234) {
                  goto LABEL_394;
                }
              }
            }
            else
            {
              v235 = v342;
            }
          }
          else
          {
LABEL_394:
            v235 = &v342[2 * v344];
          }
          v236 = &v342[2 * v344];
LABEL_397:
          while (v235 != v236)
          {
            unint64_t v238 = *v235;
            int v237 = v235[1];
            FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*((uint64_t ***)v325 + 54), v237);
            if (FixedStack) {
              int v240 = *((_DWORD *)FixedStack + 3);
            }
            else {
              int v240 = 0;
            }
            if (v340)
            {
              uint64_t v241 = 4 * v340;
              v242 = (char *)v339;
              while (*(_DWORD *)v242 != v238)
              {
                v242 += 4;
                v241 -= 4;
                if (!v241)
                {
                  v242 = (char *)v339 + 4 * v340;
                  break;
                }
              }
            }
            else
            {
              v242 = (char *)v339;
            }
            v243 = 0;
            v301[0] = (unint64_t)FixedStack | 4;
            v301[1] = 0;
            int v302 = v240;
            char v303 = 0;
            v244 = *(uint64_t ***)(v327 + 248);
            unint64_t v245 = v238 >> 3;
            v246 = *(uint64_t ***)(v327 + 240);
            do
            {
              if ((v238 - 0x40000000) >= 0xC0000001)
              {
                uint64_t v247 = **v246;
                if (v245 < *(unsigned __int16 *)(v247 + 22)
                  && ((1 << (v238 & 7)) & *(unsigned __int8 *)(*(void *)(v247 + 8) + v245)) != 0
                  && (!v243
                   || *v246 != v243
                   && ((*(_DWORD *)(v243[1] + ((*(unsigned __int16 *)(v247 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v247 + 24)) & 1) != 0))
                {
                  v243 = *v246;
                }
              }
              ++v246;
            }
            while (v246 != v244);
            unint64_t v248 = (unint64_t)*(unsigned int *)(*(void *)(v327 + 264)
                                                     + 24
                                                     * (*(unsigned __int16 *)(*v243 + 24)
                                                      + *(_DWORD *)(v327 + 272)
                                                      * (((unint64_t)v244 - *(void *)(v327 + 240)) >> 3))
                                                     + 4) >> 3;
            char v249 = *(unsigned char *)(*(void *)(v329 + 8) + 40 * (*(_DWORD *)(v329 + 32) + v237) + 16);
            long long v345 = 0u;
            v346[0] = 0u;
            if ((v242 - (unsigned char *)v339) >> 2 == v340) {
              __int16 v250 = 1;
            }
            else {
              __int16 v250 = 3;
            }
            MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v325, (uint64_t)v301, v250, v248, v249, &v345, 0, 1, 0, 0, 0);
            llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v184, v325, MachineMemOperand);
            v252 = v235 + 2;
            while (v252 != v233)
            {
              unsigned int v253 = *v252;
              v252 += 2;
              if (v253 <= 0xFFFFFFFD)
              {
                v235 = v252 - 2;
                goto LABEL_397;
              }
            }
            v235 = v233;
          }
          v254 = v324;
          uint64_t v255 = *(void *)(*((void *)v324 + 3) + 40);
          *(void *)(v184 + 24) = v255;
          uint64_t v256 = *(void *)(v255 + 32);
          uint64_t v257 = *(unsigned int *)(v184 + 40);
          if (v257)
          {
            uint64_t v275 = *(void *)(v184 + 32);
            uint64_t v276 = *(void *)(v256 + 40);
            uint64_t v277 = 32 * v257;
            do
            {
              if (!*(unsigned char *)v275)
              {
                uint64_t v278 = *(unsigned int *)(v275 + 4);
                if ((int)v278 >= 0) {
                  v279 = (uint64_t *)(*(void *)(v276 + 272) + 8 * v278);
                }
                else {
                  v279 = (uint64_t *)(*(void *)(v276 + 24) + 16 * (v278 & 0x7FFFFFFF) + 8);
                }
                uint64_t v280 = *v279;
                if (*v279)
                {
                  uint64_t v281 = *(void *)(v280 + 16);
                  *(void *)(v280 + 16) = v275;
                  *(void *)(v275 + 16) = v281;
                  if (*(unsigned char *)(v275 + 3))
                  {
                    *(void *)(v275 + 24) = v280;
                  }
                  else
                  {
                    *(void *)(v275 + 24) = 0;
                    v279 = (uint64_t *)(v281 + 24);
                  }
                }
                else
                {
                  *(void *)(v275 + 16) = v275;
                  *(void *)(v275 + 24) = 0;
                }
                uint64_t *v279 = v275;
              }
              v275 += 32;
              v277 -= 32;
            }
            while (v277);
          }
          uint64_t v258 = *(void *)(v256 + 728);
          if (v258) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v258 + 24))(v258, v184);
          }
          unint64_t v259 = *(void *)v254 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v184 = v259 | *(void *)v184 & 7;
          *(void *)(v184 + 8) = v254;
          *(void *)(v259 + 8) = v184;
          *(void *)v254 = *(void *)v254 & 7 | v184;
          llvm::MachineInstr::eraseFromParent(v324);
          if (v349 != (unsigned __int8 **)v351) {
            free(v349);
          }
          if (v340)
          {
            uint64_t v260 = *(void *)(v184 + 24);
            v261 = v339;
            v262 = (char *)v339 + 4 * v340;
            v263 = *(void **)(v184 + 8);
            while (1)
            {
              LODWORD(v301[0]) = *v261;
              unsigned int v264 = v301[0];
              sub_1CC2A9F68((uint64_t)&v324, v301[0], v263, v260);
              if (v326)
              {
                int v265 = sub_1CD514074((uint64_t)&v342, (int *)v301)[1];
                v349 = (unsigned __int8 **)v326;
                if (v320)
                {
                  unsigned int v269 = (v320 - 1) & ((v326 >> 4) ^ (v326 >> 9));
                  v270 = *(uint64_t **)(v319[0] + 112 * v269);
                  if (v326 == v270)
                  {
LABEL_438:
                    v271 = sub_1CD514578((uint64_t)v319, (uint64_t *)&v349);
                    if (sub_1CD514448((uint64_t)(v271 + 1), v264, v265)) {
                      goto LABEL_433;
                    }
                  }
                  else
                  {
                    int v272 = 1;
                    while (v270 != (uint64_t *)-4096)
                    {
                      unsigned int v273 = v269 + v272++;
                      unsigned int v269 = v273 & (v320 - 1);
                      v270 = *(uint64_t **)(v319[0] + 112 * v269);
                      if (v326 == v270) {
                        goto LABEL_438;
                      }
                    }
                  }
                }
                unsigned int v266 = sub_1CD514074((uint64_t)&v342, (int *)v301)[1];
                v349 = (unsigned __int8 **)v326;
                *(void *)&long long v345 = __PAIR64__(v266, v264);
                v267 = sub_1CD514578((uint64_t)v319, (uint64_t *)&v349);
                sub_1CD5148FC((uint64_t)(v267 + 1), (uint64_t)&v345);
                v268 = (void *)llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug((uint64_t)v326, v326[7], 1);
                sub_1CC2A9F68((uint64_t)&v324, v264, v268, (uint64_t)v326);
              }
LABEL_433:
              if (++v261 == (_DWORD *)v262) {
                goto LABEL_444;
              }
            }
          }
          goto LABEL_444;
        }
        v221 = (int *)(v219 & 0xFFFFFFFFFFFFFFF8);
        if ((v219 & 7) == 3 && v221 != 0)
        {
          uint64_t v232 = *v221;
          v218 = (unint64_t *)(v221 + 2);
          uint64_t v231 = v232;
          goto LABEL_389;
        }
      }
      v218 = 0;
      uint64_t v231 = 0;
      goto LABEL_389;
    }
  }
  LOBYTE(v3) = 0;
LABEL_20:
  if (v321 != v323) {
    free(v321);
  }
  return v3 & 1;
}

unint64_t sub_1CC2A5C34(unint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v7 = (uint64_t)a3;
  v438 = (unsigned int *)result;
  while (2)
  {
    uint64_t v8 = v438;
    v430 = a2 - 1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (char *)a2 - (char *)v8;
          uint64_t v10 = a2 - v8;
          v438 = v8;
          if (v6 || !v5)
          {
            switch(v10)
            {
              case 0:
              case 1:
                return result;
              case 2:
                int v176 = 0;
                uint64_t v177 = *(void *)(*(void *)v7 + 8);
                unint64_t v178 = *(a2 - 1);
                int v179 = *(char **)(v177 + 240);
                v180 = *(char **)(v177 + 248);
                unint64_t v181 = v178 >> 3;
                uint64_t v182 = v179;
                do
                {
                  if ((v178 - 0x40000000) >= 0xC0000001)
                  {
                    uint64_t v183 = **(void **)v182;
                    if (v181 < *(unsigned __int16 *)(v183 + 22)
                      && ((1 << (v178 & 7)) & *(unsigned __int8 *)(*(void *)(v183 + 8) + v181)) != 0
                      && (!v176
                       || *(uint64_t **)v182 != v176
                       && ((*(_DWORD *)(v176[1] + ((*(unsigned __int16 *)(v183 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v183 + 24)) & 1) != 0))
                    {
                      int v176 = *(uint64_t **)v182;
                    }
                  }
                  v182 += 8;
                }
                while (v182 != v180);
                int v185 = 0;
                uint64_t v186 = *(void *)(v177 + 264);
                int v187 = *(_DWORD *)(v177 + 272) * ((unint64_t)(v180 - v179) >> 3);
                unsigned int v188 = *(_DWORD *)(v186 + 24 * (v187 + *(unsigned __int16 *)(*v176 + 24)) + 4);
                unint64_t v189 = *v8;
                unint64_t v190 = v189 >> 3;
                uint64_t result = (1 << (v189 & 7));
                do
                {
                  if ((v189 - 0x40000000) >= 0xC0000001)
                  {
                    uint64_t v191 = **(void **)v179;
                    if (v190 < *(unsigned __int16 *)(v191 + 22)
                      && (result & *(unsigned char *)(*(void *)(v191 + 8) + v190)) != 0
                      && (!v185
                       || *(uint64_t **)v179 != v185
                       && ((*(_DWORD *)(v185[1] + ((*(unsigned __int16 *)(v191 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v191 + 24)) & 1) != 0))
                    {
                      int v185 = *(uint64_t **)v179;
                    }
                  }
                  v179 += 8;
                }
                while (v179 != v180);
                if (v188 >> 3 > *(_DWORD *)(v186 + 24 * (v187 + *(unsigned __int16 *)(*v185 + 24)) + 4) >> 3)
                {
                  *uint64_t v8 = v178;
                  *(a2 - 1) = v189;
                }
                break;
              case 3:
                uint64_t v184 = *(void *)(*(void *)v7 + 8);
                uint64_t result = (unint64_t)sub_1CC2A8718((uint64_t *)v8, v8 + 1, v430, v184);
                break;
              case 4:
                uint64_t result = sub_1CC2A98B0((uint64_t *)v8, v8 + 1, v8 + 2, v430, v7);
                break;
              case 5:
                unsigned int v192 = v8 + 1;
                unint64_t v193 = v8 + 2;
                uint64_t v194 = v8 + 3;
                uint64_t v195 = v7;
                sub_1CC2A98B0((uint64_t *)v8, v8 + 1, v8 + 2, v8 + 3, v7);
                v196 = 0;
                uint64_t v197 = *(void *)(*(void *)v195 + 8);
                unint64_t v198 = *(a2 - 1);
                unsigned int v199 = *(char **)(v197 + 240);
                uint64_t v200 = *(char **)(v197 + 248);
                unint64_t v201 = v198 >> 3;
                int v202 = v199;
                do
                {
                  if ((v198 - 0x40000000) >= 0xC0000001)
                  {
                    uint64_t v203 = **(void **)v202;
                    if (v201 < *(unsigned __int16 *)(v203 + 22)
                      && ((1 << (v198 & 7)) & *(unsigned __int8 *)(*(void *)(v203 + 8) + v201)) != 0
                      && (!v196
                       || *(uint64_t **)v202 != v196
                       && ((*(_DWORD *)(v196[1] + ((*(unsigned __int16 *)(v203 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v203 + 24)) & 1) != 0))
                    {
                      v196 = *(uint64_t **)v202;
                    }
                  }
                  v202 += 8;
                }
                while (v202 != v200);
                v204 = 0;
                uint64_t v205 = *(void *)(v197 + 264);
                unint64_t v206 = (unint64_t)(v200 - v199) >> 3;
                int v207 = *(_DWORD *)(v197 + 272) * v206;
                unsigned int v208 = *(_DWORD *)(v205 + 24 * (v207 + *(unsigned __int16 *)(*v196 + 24)) + 4);
                unint64_t v209 = *v194;
                uint64_t result = (v209 - 0x40000000);
                unint64_t v210 = v209 >> 3;
                unint64_t v211 = *(char **)(v197 + 240);
                do
                {
                  if (result >= 0xC0000001)
                  {
                    uint64_t v212 = **(void **)v211;
                    if (v210 < *(unsigned __int16 *)(v212 + 22)
                      && ((1 << (v209 & 7)) & *(unsigned __int8 *)(*(void *)(v212 + 8) + v210)) != 0
                      && (!v204
                       || *(uint64_t **)v211 != v204
                       && ((*(_DWORD *)(v204[1] + ((*(unsigned __int16 *)(v212 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v212 + 24)) & 1) != 0))
                    {
                      v204 = *(uint64_t **)v211;
                    }
                  }
                  v211 += 8;
                }
                while (v211 != v200);
                if (v208 >> 3 > *(_DWORD *)(v205 + 24 * (v207 + *(unsigned __int16 *)(*v204 + 24)) + 4) >> 3)
                {
                  v213 = 0;
                  *uint64_t v194 = v198;
                  *(a2 - 1) = v209;
                  unint64_t v214 = *v194;
                  unsigned int v215 = v214 - 0x40000000;
                  unint64_t v216 = v214 >> 3;
                  int v217 = 1 << (v214 & 7);
                  v218 = v199;
                  do
                  {
                    if (v215 >= 0xC0000001)
                    {
                      uint64_t v219 = **(void **)v218;
                      if (v216 < *(unsigned __int16 *)(v219 + 22)
                        && (v217 & *(unsigned char *)(*(void *)(v219 + 8) + v216)) != 0
                        && (!v213
                         || *(uint64_t **)v218 != v213
                         && ((*(_DWORD *)(v213[1] + ((*(unsigned __int16 *)(v219 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v219 + 24)) & 1) != 0))
                      {
                        v213 = *(uint64_t **)v218;
                      }
                    }
                    v218 += 8;
                  }
                  while (v218 != v200);
                  v374 = 0;
                  int v375 = *(_DWORD *)(v197 + 272) * v206;
                  unsigned int v376 = *(_DWORD *)(v205 + 24 * (v375 + *(unsigned __int16 *)(*v213 + 24)) + 4);
                  unint64_t v377 = *v193;
                  unint64_t v378 = v377 >> 3;
                  v379 = v199;
                  do
                  {
                    if ((v377 - 0x40000000) >= 0xC0000001)
                    {
                      uint64_t v380 = **(void **)v379;
                      if (v378 < *(unsigned __int16 *)(v380 + 22)
                        && ((1 << (v377 & 7)) & *(unsigned __int8 *)(*(void *)(v380 + 8) + v378)) != 0
                        && (!v374
                         || *(uint64_t **)v379 != v374
                         && ((*(_DWORD *)(v374[1] + ((*(unsigned __int16 *)(v380 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v380 + 24)) & 1) != 0))
                      {
                        v374 = *(uint64_t **)v379;
                      }
                    }
                    v379 += 8;
                  }
                  while (v379 != v200);
                  uint64_t result = *(unsigned int *)(v205 + 24 * (v375 + *(unsigned __int16 *)(*v374 + 24)) + 4);
                  if (v376 >> 3 > result >> 3)
                  {
                    v381 = 0;
                    *unint64_t v193 = v214;
                    *uint64_t v194 = v377;
                    v382 = v199;
                    do
                    {
                      if (v215 >= 0xC0000001)
                      {
                        uint64_t v383 = **(void **)v382;
                        if (v216 < *(unsigned __int16 *)(v383 + 22)
                          && (v217 & *(unsigned char *)(*(void *)(v383 + 8) + v216)) != 0
                          && (!v381
                           || *(uint64_t **)v382 != v381
                           && ((*(_DWORD *)(v381[1] + ((*(unsigned __int16 *)(v383 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v383 + 24)) & 1) != 0))
                        {
                          v381 = *(uint64_t **)v382;
                        }
                      }
                      v382 += 8;
                    }
                    while (v382 != v200);
                    v414 = 0;
                    int v415 = *(_DWORD *)(v197 + 272) * v206;
                    unsigned int v416 = *(_DWORD *)(v205 + 24 * (v415 + *(unsigned __int16 *)(*v381 + 24)) + 4);
                    unint64_t v417 = *v192;
                    unint64_t v418 = v417 >> 3;
                    v419 = v199;
                    do
                    {
                      if ((v417 - 0x40000000) >= 0xC0000001)
                      {
                        uint64_t v420 = **(void **)v419;
                        if (v418 < *(unsigned __int16 *)(v420 + 22)
                          && ((1 << (v417 & 7)) & *(unsigned __int8 *)(*(void *)(v420 + 8) + v418)) != 0
                          && (!v414
                           || *(uint64_t **)v419 != v414
                           && ((*(_DWORD *)(v414[1] + ((*(unsigned __int16 *)(v420 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v420 + 24)) & 1) != 0))
                        {
                          v414 = *(uint64_t **)v419;
                        }
                      }
                      v419 += 8;
                    }
                    while (v419 != v200);
                    uint64_t result = *(unsigned int *)(v205 + 24 * (v415 + *(unsigned __int16 *)(*v414 + 24)) + 4);
                    if (v416 >> 3 > result >> 3)
                    {
                      v421 = 0;
                      *unsigned int v192 = v214;
                      *unint64_t v193 = v417;
                      v422 = v199;
                      do
                      {
                        if (v215 >= 0xC0000001)
                        {
                          uint64_t v423 = **(void **)v422;
                          if (v216 < *(unsigned __int16 *)(v423 + 22)
                            && (v217 & *(unsigned char *)(*(void *)(v423 + 8) + v216)) != 0
                            && (!v421
                             || *(uint64_t **)v422 != v421
                             && ((*(_DWORD *)(v421[1] + ((*(unsigned __int16 *)(v423 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v423 + 24)) & 1) != 0))
                          {
                            v421 = *(uint64_t **)v422;
                          }
                        }
                        v422 += 8;
                      }
                      while (v422 != v200);
                      v424 = 0;
                      int v425 = *(_DWORD *)(v197 + 272) * v206;
                      unsigned int v426 = *(_DWORD *)(v205 + 24 * (v425 + *(unsigned __int16 *)(*v421 + 24)) + 4);
                      unint64_t v427 = *v8;
                      unint64_t v428 = v427 >> 3;
                      uint64_t result = (1 << (v427 & 7));
                      do
                      {
                        if ((v427 - 0x40000000) >= 0xC0000001)
                        {
                          uint64_t v429 = **(void **)v199;
                          if (v428 < *(unsigned __int16 *)(v429 + 22)
                            && (result & *(unsigned char *)(*(void *)(v429 + 8) + v428)) != 0
                            && (!v424
                             || *(uint64_t **)v199 != v424
                             && ((*(_DWORD *)(v424[1] + ((*(unsigned __int16 *)(v429 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v429 + 24)) & 1) != 0))
                          {
                            v424 = *(uint64_t **)v199;
                          }
                        }
                        v199 += 8;
                      }
                      while (v199 != v200);
                      if (v426 >> 3 > *(_DWORD *)(v205
                                                 + 24 * (v425 + *(unsigned __int16 *)(*v424 + 24))
                                                 + 4) >> 3)
                      {
                        *uint64_t v8 = v214;
                        v8[1] = v427;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          uint64_t v11 = (uint64_t *)v8;
          if (v9 <= 95)
          {
            uint64_t result = (unint64_t)(v8 + 1);
            BOOL v221 = v8 == a2 || result == (void)a2;
            if (a5)
            {
              if (!v221)
              {
                uint64_t v222 = *(void *)(*(void *)v7 + 8);
                int v223 = *(char **)(v222 + 240);
                int v224 = *(char **)(v222 + 248);
                unint64_t v225 = (unint64_t)(v224 - v223) >> 3;
                uint64_t v226 = *(void *)(v222 + 264);
                int v227 = v8;
                do
                {
                  int v228 = 0;
                  v229 = v227;
                  int v227 = (unsigned int *)result;
                  unint64_t v230 = v229[1];
                  unsigned int v231 = v230 - 0x40000000;
                  unint64_t v232 = v230 >> 3;
                  int v233 = 1 << (v230 & 7);
                  uint64_t v234 = v223;
                  do
                  {
                    if (v231 >= 0xC0000001)
                    {
                      uint64_t v235 = **(void **)v234;
                      if (v232 < *(unsigned __int16 *)(v235 + 22)
                        && (v233 & *(unsigned char *)(*(void *)(v235 + 8) + v232)) != 0
                        && (!v228
                         || *(uint64_t **)v234 != v228
                         && ((*(_DWORD *)(v228[1] + ((*(unsigned __int16 *)(v235 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v235 + 24)) & 1) != 0))
                      {
                        int v228 = *(uint64_t **)v234;
                      }
                    }
                    v234 += 8;
                  }
                  while (v234 != v224);
                  v236 = 0;
                  int v237 = *(_DWORD *)(v222 + 272) * v225;
                  unsigned int v238 = *(_DWORD *)(v226 + 24 * (v237 + *(unsigned __int16 *)(*v228 + 24)) + 4);
                  unint64_t v239 = *v229;
                  unint64_t v240 = v239 >> 3;
                  uint64_t v241 = v223;
                  do
                  {
                    if ((v239 - 0x40000000) >= 0xC0000001)
                    {
                      uint64_t v242 = **(void **)v241;
                      if (v240 < *(unsigned __int16 *)(v242 + 22)
                        && ((1 << (v239 & 7)) & *(unsigned __int8 *)(*(void *)(v242 + 8) + v240)) != 0
                        && (!v236
                         || *(uint64_t **)v241 != v236
                         && ((*(_DWORD *)(v236[1] + ((*(unsigned __int16 *)(v242 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v242 + 24)) & 1) != 0))
                      {
                        v236 = *(uint64_t **)v241;
                      }
                    }
                    v241 += 8;
                  }
                  while (v241 != v224);
                  if (v238 >> 3 > *(_DWORD *)(v226 + 24 * (v237 + *(unsigned __int16 *)(*v236 + 24)) + 4) >> 3)
                  {
                    v243 = v227;
                    while (1)
                    {
                      unsigned int *v243 = v239;
                      v243 = v229;
                      if (v229 == v438) {
                        break;
                      }
                      v244 = 0;
                      unint64_t v245 = v223;
                      do
                      {
                        if (v231 >= 0xC0000001)
                        {
                          uint64_t v246 = **(void **)v245;
                          if (v232 < *(unsigned __int16 *)(v246 + 22)
                            && (v233 & *(unsigned char *)(*(void *)(v246 + 8) + v232)) != 0
                            && (!v244
                             || *(uint64_t **)v245 != v244
                             && ((*(_DWORD *)(v244[1] + ((*(unsigned __int16 *)(v246 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v246 + 24)) & 1) != 0))
                          {
                            v244 = *(uint64_t **)v245;
                          }
                        }
                        v245 += 8;
                      }
                      while (v245 != v224);
                      uint64_t v247 = 0;
                      v229 = v243 - 1;
                      unint64_t v239 = *(v243 - 1);
                      unint64_t v248 = v239 >> 3;
                      char v249 = v223;
                      do
                      {
                        if ((v239 - 0x40000000) >= 0xC0000001)
                        {
                          uint64_t v250 = **(void **)v249;
                          if (v248 < *(unsigned __int16 *)(v250 + 22)
                            && ((1 << (v239 & 7)) & *(unsigned __int8 *)(*(void *)(v250 + 8) + v248)) != 0
                            && (!v247
                             || *(uint64_t **)v249 != v247
                             && ((*(_DWORD *)(v247[1] + ((*(unsigned __int16 *)(v250 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v250 + 24)) & 1) != 0))
                          {
                            uint64_t v247 = *(uint64_t **)v249;
                          }
                        }
                        v249 += 8;
                      }
                      while (v249 != v224);
                      if (*(_DWORD *)(v226
                                     + 24
                                     * (*(_DWORD *)(v222 + 272) * v225
                                      + *(unsigned __int16 *)(*v244 + 24))
                                     + 4) >> 3 <= *(_DWORD *)(v226
                                                            + 24
                                                            * (*(_DWORD *)(v222 + 272) * v225
                                                             + *(unsigned __int16 *)(*v247 + 24))
                                                            + 4) >> 3)
                        goto LABEL_395;
                    }
                    v243 = v438;
LABEL_395:
                    unsigned int *v243 = v230;
                  }
                  uint64_t result = (unint64_t)(v227 + 1);
                }
                while (v227 + 1 != a2);
              }
            }
            else if (!v221)
            {
              uint64_t v384 = *(void *)(*(void *)v7 + 8);
              v385 = *(char **)(v384 + 240);
              v386 = *(char **)(v384 + 248);
              unint64_t v387 = (unint64_t)(v386 - v385) >> 3;
              uint64_t v388 = *(void *)(v384 + 264);
              do
              {
                v389 = 0;
                v390 = v438;
                v438 = (unsigned int *)result;
                unint64_t v391 = v390[1];
                unsigned int v392 = v391 - 0x40000000;
                unint64_t v393 = v391 >> 3;
                int v394 = 1 << (v391 & 7);
                v395 = v385;
                do
                {
                  if (v392 >= 0xC0000001)
                  {
                    uint64_t v396 = **(void **)v395;
                    if (v393 < *(unsigned __int16 *)(v396 + 22)
                      && (v394 & *(unsigned char *)(*(void *)(v396 + 8) + v393)) != 0
                      && (!v389
                       || *(uint64_t **)v395 != v389
                       && ((*(_DWORD *)(v389[1] + ((*(unsigned __int16 *)(v396 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v396 + 24)) & 1) != 0))
                    {
                      v389 = *(uint64_t **)v395;
                    }
                  }
                  v395 += 8;
                }
                while (v395 != v386);
                v397 = 0;
                int v398 = *(_DWORD *)(v384 + 272) * v387;
                unsigned int v399 = *(_DWORD *)(v388 + 24 * (v398 + *(unsigned __int16 *)(*v389 + 24)) + 4);
                unint64_t v400 = *v390;
                unint64_t v401 = v400 >> 3;
                v402 = v385;
                do
                {
                  if ((v400 - 0x40000000) >= 0xC0000001)
                  {
                    uint64_t v403 = **(void **)v402;
                    if (v401 < *(unsigned __int16 *)(v403 + 22)
                      && ((1 << (v400 & 7)) & *(unsigned __int8 *)(*(void *)(v403 + 8) + v401)) != 0
                      && (!v397
                       || *(uint64_t **)v402 != v397
                       && ((*(_DWORD *)(v397[1] + ((*(unsigned __int16 *)(v403 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v403 + 24)) & 1) != 0))
                    {
                      v397 = *(uint64_t **)v402;
                    }
                  }
                  v402 += 8;
                }
                while (v402 != v386);
                if (v399 >> 3 > *(_DWORD *)(v388 + 24 * (v398 + *(unsigned __int16 *)(*v397 + 24)) + 4) >> 3)
                {
                  v404 = v438;
                  do
                  {
                    v405 = 0;
                    unsigned int *v404 = v400;
                    v404 = v390;
                    v406 = v385;
                    do
                    {
                      if (v392 >= 0xC0000001)
                      {
                        uint64_t v407 = **(void **)v406;
                        if (v393 < *(unsigned __int16 *)(v407 + 22)
                          && (v394 & *(unsigned char *)(*(void *)(v407 + 8) + v393)) != 0
                          && (!v405
                           || *(uint64_t **)v406 != v405
                           && ((*(_DWORD *)(v405[1] + ((*(unsigned __int16 *)(v407 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v407 + 24)) & 1) != 0))
                        {
                          v405 = *(uint64_t **)v406;
                        }
                      }
                      v406 += 8;
                    }
                    while (v406 != v386);
                    v408 = 0;
                    v390 = v404 - 1;
                    unint64_t v400 = *(v404 - 1);
                    int v409 = *(_DWORD *)(v384 + 272) * v387;
                    unsigned int v410 = *(_DWORD *)(v388 + 24 * (v409 + *(unsigned __int16 *)(*v405 + 24)) + 4);
                    unint64_t v411 = v400 >> 3;
                    v412 = v385;
                    do
                    {
                      if ((v400 - 0x40000000) >= 0xC0000001)
                      {
                        uint64_t v413 = **(void **)v412;
                        if (v411 < *(unsigned __int16 *)(v413 + 22)
                          && ((1 << (v400 & 7)) & *(unsigned __int8 *)(*(void *)(v413 + 8) + v411)) != 0
                          && (!v408
                           || *(uint64_t **)v412 != v408
                           && ((*(_DWORD *)(v408[1] + ((*(unsigned __int16 *)(v413 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v413 + 24)) & 1) != 0))
                        {
                          v408 = *(uint64_t **)v412;
                        }
                      }
                      v412 += 8;
                    }
                    while (v412 != v386);
                  }
                  while (v410 >> 3 > *(_DWORD *)(v388
                                                + 24 * (v409 + *(unsigned __int16 *)(*v408 + 24))
                                                + 4) >> 3);
                  unsigned int *v404 = v391;
                }
                uint64_t result = (unint64_t)(v438 + 1);
              }
              while (v438 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v8 != a2)
            {
              int64_t v251 = (unint64_t)(v10 - 2) >> 1;
              uint64_t v252 = *(void *)v7;
              int64_t v253 = v251;
              do
              {
                int64_t v254 = v253;
                uint64_t v255 = v252;
                if (v251 >= v253)
                {
                  uint64_t v256 = (2 * v253) | 1;
                  uint64_t v257 = &v438[v256];
                  uint64_t v258 = 2 * v253 + 2;
                  uint64_t v259 = *(void *)(v252 + 8);
                  int64_t v436 = v253;
                  if (v258 < v10)
                  {
                    uint64_t v260 = 0;
                    unint64_t v261 = *v257;
                    unsigned int v266 = *(char **)(v259 + 240);
                    int v265 = *(char **)(v259 + 248);
                    unint64_t v262 = v261 >> 3;
                    v263 = v266;
                    do
                    {
                      if ((v261 - 0x40000000) >= 0xC0000001)
                      {
                        uint64_t v264 = **(void **)v263;
                        if (v262 < *(unsigned __int16 *)(v264 + 22)
                          && ((1 << (v261 & 7)) & *(unsigned __int8 *)(*(void *)(v264 + 8) + v262)) != 0
                          && (!v260
                           || *(uint64_t **)v263 != v260
                           && ((*(_DWORD *)(v260[1] + ((*(unsigned __int16 *)(v264 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v264 + 24)) & 1) != 0))
                        {
                          uint64_t v260 = *(uint64_t **)v263;
                        }
                      }
                      v263 += 8;
                    }
                    while (v263 != v265);
                    v267 = 0;
                    unint64_t v268 = v257[1];
                    uint64_t v269 = *(void *)(v259 + 264);
                    int v270 = *(_DWORD *)(v259 + 272) * ((unint64_t)(v265 - v266) >> 3);
                    unsigned int v271 = *(_DWORD *)(v269 + 24 * (v270 + *(unsigned __int16 *)(*v260 + 24)) + 4);
                    unint64_t v272 = v268 >> 3;
                    unsigned int v273 = *(char **)(v259 + 240);
                    do
                    {
                      if ((v268 - 0x40000000) >= 0xC0000001)
                      {
                        uint64_t v274 = **(void **)v273;
                        if (v272 < *(unsigned __int16 *)(v274 + 22)
                          && ((1 << (v268 & 7)) & *(unsigned __int8 *)(*(void *)(v274 + 8) + v272)) != 0
                          && (!v267
                           || *(uint64_t **)v273 != v267
                           && ((*(_DWORD *)(v267[1] + ((*(unsigned __int16 *)(v274 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v274 + 24)) & 1) != 0))
                        {
                          v267 = *(uint64_t **)v273;
                        }
                      }
                      v273 += 8;
                    }
                    while (v273 != v265);
                    if (v271 >> 3 > *(_DWORD *)(v269
                                               + 24 * (v270 + *(unsigned __int16 *)(*v267 + 24))
                                               + 4) >> 3)
                    {
                      ++v257;
                      uint64_t v256 = v258;
                    }
                    int64_t v254 = v436;
                  }
                  else
                  {
                    unsigned int v266 = *(char **)(v259 + 240);
                    int v265 = *(char **)(v259 + 248);
                  }
                  uint64_t v275 = 0;
                  uint64_t v276 = &v438[v254];
                  unint64_t v277 = *v257;
                  unint64_t v278 = v277 >> 3;
                  v279 = v266;
                  do
                  {
                    if ((v277 - 0x40000000) >= 0xC0000001)
                    {
                      uint64_t v280 = **(void **)v279;
                      if (v278 < *(unsigned __int16 *)(v280 + 22)
                        && ((1 << (v277 & 7)) & *(unsigned __int8 *)(*(void *)(v280 + 8) + v278)) != 0
                        && (!v275
                         || *(uint64_t **)v279 != v275
                         && ((*(_DWORD *)(v275[1] + ((*(unsigned __int16 *)(v280 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v280 + 24)) & 1) != 0))
                      {
                        uint64_t v275 = *(uint64_t **)v279;
                      }
                    }
                    v279 += 8;
                  }
                  while (v279 != v265);
                  uint64_t v281 = 0;
                  uint64_t v282 = *(void *)(v259 + 264);
                  unint64_t v283 = (unint64_t)(v265 - v266) >> 3;
                  int v284 = *(_DWORD *)(v259 + 272) * v283;
                  unsigned int v285 = *(_DWORD *)(v282 + 24 * (v284 + *(unsigned __int16 *)(*v275 + 24)) + 4);
                  unint64_t v286 = *v276;
                  unsigned int v287 = v286 - 0x40000000;
                  unint64_t v288 = v286 >> 3;
                  unsigned int v433 = *v276;
                  int v289 = 1 << (v286 & 7);
                  unint64_t v290 = v266;
                  do
                  {
                    if (v287 >= 0xC0000001)
                    {
                      uint64_t v291 = **(void **)v290;
                      if (v288 < *(unsigned __int16 *)(v291 + 22)
                        && (v289 & *(unsigned char *)(*(void *)(v291 + 8) + v288)) != 0
                        && (!v281
                         || *(uint64_t **)v290 != v281
                         && ((*(_DWORD *)(v281[1] + ((*(unsigned __int16 *)(v291 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v291 + 24)) & 1) != 0))
                      {
                        uint64_t v281 = *(uint64_t **)v290;
                      }
                    }
                    v290 += 8;
                  }
                  while (v290 != v265);
                  int64_t v254 = v436;
                  if (v285 >> 3 <= *(_DWORD *)(v282
                                              + 24 * (v284 + *(unsigned __int16 *)(*v281 + 24))
                                              + 4) >> 3)
                  {
                    do
                    {
                      v292 = v257;
                      *uint64_t v276 = v277;
                      if (v251 < v256) {
                        break;
                      }
                      uint64_t v293 = (2 * v256) | 1;
                      uint64_t v257 = &v438[v293];
                      uint64_t v256 = 2 * v256 + 2;
                      if (v256 < v10)
                      {
                        v294 = 0;
                        unint64_t v295 = *v257;
                        unint64_t v296 = v295 >> 3;
                        int v297 = v266;
                        do
                        {
                          if ((v295 - 0x40000000) >= 0xC0000001)
                          {
                            uint64_t v298 = **(void **)v297;
                            if (v296 < *(unsigned __int16 *)(v298 + 22)
                              && ((1 << (v295 & 7)) & *(unsigned __int8 *)(*(void *)(v298 + 8) + v296)) != 0
                              && (!v294
                               || *(uint64_t **)v297 != v294
                               && ((*(_DWORD *)(v294[1] + ((*(unsigned __int16 *)(v298 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v298 + 24)) & 1) != 0))
                            {
                              v294 = *(uint64_t **)v297;
                            }
                          }
                          v297 += 8;
                        }
                        while (v297 != v265);
                        unsigned int v299 = 0;
                        unint64_t v300 = v257[1];
                        int v301 = *(_DWORD *)(v259 + 272) * v283;
                        unsigned int v302 = *(_DWORD *)(v282 + 24 * (v301 + *(unsigned __int16 *)(*v294 + 24)) + 4);
                        unsigned int v303 = v300 - 0x40000000;
                        unint64_t v304 = v300 >> 3;
                        int v305 = 1 << (v300 & 7);
                        uint64_t v306 = v266;
                        do
                        {
                          if (v303 >= 0xC0000001)
                          {
                            uint64_t v307 = **(void **)v306;
                            if (v304 < *(unsigned __int16 *)(v307 + 22)
                              && (v305 & *(unsigned char *)(*(void *)(v307 + 8) + v304)) != 0
                              && (!v299
                               || *(uint64_t **)v306 != v299
                               && ((*(_DWORD *)(v299[1] + ((*(unsigned __int16 *)(v307 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v307 + 24)) & 1) != 0))
                            {
                              unsigned int v299 = *(uint64_t **)v306;
                            }
                          }
                          v306 += 8;
                        }
                        while (v306 != v265);
                        if (v302 >> 3 <= *(_DWORD *)(v282
                                                    + 24 * (v301 + *(unsigned __int16 *)(*v299 + 24))
                                                    + 4) >> 3)
                          uint64_t v256 = v293;
                        else {
                          ++v257;
                        }
                      }
                      else
                      {
                        uint64_t v256 = v293;
                      }
                      v308 = 0;
                      unint64_t v277 = *v257;
                      unint64_t v309 = v277 >> 3;
                      unsigned int v310 = v266;
                      do
                      {
                        if ((v277 - 0x40000000) >= 0xC0000001)
                        {
                          uint64_t v311 = **(void **)v310;
                          if (v309 < *(unsigned __int16 *)(v311 + 22)
                            && ((1 << (v277 & 7)) & *(unsigned __int8 *)(*(void *)(v311 + 8) + v309)) != 0
                            && (!v308
                             || *(uint64_t **)v310 != v308
                             && ((*(_DWORD *)(v308[1] + ((*(unsigned __int16 *)(v311 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v311 + 24)) & 1) != 0))
                          {
                            v308 = *(uint64_t **)v310;
                          }
                        }
                        v310 += 8;
                      }
                      while (v310 != v265);
                      uint64_t v312 = 0;
                      int v313 = *(_DWORD *)(v259 + 272) * v283;
                      unsigned int v314 = *(_DWORD *)(v282 + 24 * (v313 + *(unsigned __int16 *)(*v308 + 24)) + 4);
                      v315 = v266;
                      do
                      {
                        if (v287 >= 0xC0000001)
                        {
                          uint64_t v316 = **(void **)v315;
                          if (v288 < *(unsigned __int16 *)(v316 + 22)
                            && (v289 & *(unsigned char *)(*(void *)(v316 + 8) + v288)) != 0
                            && (!v312
                             || *(uint64_t **)v315 != v312
                             && ((*(_DWORD *)(v312[1] + ((*(unsigned __int16 *)(v316 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v316 + 24)) & 1) != 0))
                          {
                            uint64_t v312 = *(uint64_t **)v315;
                          }
                        }
                        v315 += 8;
                      }
                      while (v315 != v265);
                      uint64_t v276 = v292;
                    }
                    while (v314 >> 3 <= *(_DWORD *)(v282
                                                   + 24 * (v313 + *(unsigned __int16 *)(*v312 + 24))
                                                   + 4) >> 3);
                    unsigned int *v292 = v433;
                    int64_t v254 = v436;
                    uint64_t v252 = *a3;
                  }
                }
                int64_t v253 = v254 - 1;
              }
              while (v254);
              do
              {
                unint64_t v317 = 0;
                unsigned int v318 = v438;
                unsigned int v319 = *v438;
                do
                {
                  unsigned int v320 = &v318[v317 + 1];
                  uint64_t result = (2 * v317) | 1;
                  uint64_t v321 = 2 * v317 + 2;
                  if (v321 < v10)
                  {
                    uint64_t v322 = 0;
                    uint64_t v323 = *(void *)(v255 + 8);
                    unint64_t v324 = *v320;
                    v325 = *(char **)(v323 + 240);
                    v326 = *(char **)(v323 + 248);
                    unsigned int v327 = v324 - 0x40000000;
                    unint64_t v328 = v324 >> 3;
                    int v329 = 1 << (v324 & 7);
                    uint64_t v330 = v325;
                    do
                    {
                      if (v327 >= 0xC0000001)
                      {
                        uint64_t v331 = **(void **)v330;
                        if (v328 < *(unsigned __int16 *)(v331 + 22)
                          && (v329 & *(unsigned char *)(*(void *)(v331 + 8) + v328)) != 0
                          && (!v322
                           || *(uint64_t **)v330 != v322
                           && ((*(_DWORD *)(v322[1] + ((*(unsigned __int16 *)(v331 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v331 + 24)) & 1) != 0))
                        {
                          uint64_t v322 = *(uint64_t **)v330;
                        }
                      }
                      v330 += 8;
                    }
                    while (v330 != v326);
                    char v332 = 0;
                    unint64_t v333 = v320[1];
                    uint64_t v334 = *(void *)(v323 + 264);
                    int v335 = *(_DWORD *)(v323 + 272) * ((unint64_t)(v326 - v325) >> 3);
                    unsigned int v336 = *(_DWORD *)(v334 + 24 * (v335 + *(unsigned __int16 *)(*v322 + 24)) + 4);
                    unsigned int v337 = v333 - 0x40000000;
                    unint64_t v338 = v333 >> 3;
                    int v339 = 1 << (v333 & 7);
                    do
                    {
                      if (v337 >= 0xC0000001)
                      {
                        uint64_t v340 = **(void **)v325;
                        if (v338 < *(unsigned __int16 *)(v340 + 22)
                          && (v339 & *(unsigned char *)(*(void *)(v340 + 8) + v338)) != 0
                          && (!v332
                           || *(uint64_t **)v325 != v332
                           && ((*(_DWORD *)(v332[1] + ((*(unsigned __int16 *)(v340 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v340 + 24)) & 1) != 0))
                        {
                          char v332 = *(uint64_t **)v325;
                        }
                      }
                      v325 += 8;
                    }
                    while (v325 != v326);
                    if (v336 >> 3 > *(_DWORD *)(v334
                                               + 24 * (v335 + *(unsigned __int16 *)(*v332 + 24))
                                               + 4) >> 3)
                    {
                      ++v320;
                      uint64_t result = v321;
                    }
                  }
                  *unsigned int v318 = *v320;
                  unsigned int v318 = v320;
                  unint64_t v317 = result;
                }
                while ((uint64_t)result <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
                v341 = a2 - 1;
                BOOL v6 = v320 == --a2;
                if (v6)
                {
                  *unsigned int v320 = v319;
                }
                else
                {
                  *unsigned int v320 = *v341;
                  unsigned int *v341 = v319;
                  uint64_t v342 = (char *)v320 - (char *)v438 + 4;
                  if (v342 >= 5)
                  {
                    uint64_t v343 = 0;
                    unint64_t v344 = (((unint64_t)v342 >> 2) - 2) >> 1;
                    long long v345 = &v438[v344];
                    uint64_t v346 = *(void *)(v255 + 8);
                    unint64_t v347 = *v345;
                    unint64_t v348 = v347 >> 3;
                    uint64_t result = *(void *)(v346 + 240);
                    v349 = *(uint64_t ***)(v346 + 248);
                    uint64_t v350 = (uint64_t **)result;
                    do
                    {
                      if ((v347 - 0x40000000) >= 0xC0000001)
                      {
                        uint64_t v351 = **v350;
                        if (v348 < *(unsigned __int16 *)(v351 + 22)
                          && ((1 << (v347 & 7)) & *(unsigned __int8 *)(*(void *)(v351 + 8) + v348)) != 0
                          && (!v343
                           || *v350 != v343
                           && ((*(_DWORD *)(v343[1] + ((*(unsigned __int16 *)(v351 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v351 + 24)) & 1) != 0))
                        {
                          uint64_t v343 = *v350;
                        }
                      }
                      ++v350;
                    }
                    while (v350 != v349);
                    v352 = 0;
                    uint64_t v353 = *(void *)(v346 + 264);
                    unint64_t v354 = ((unint64_t)v349 - result) >> 3;
                    int v355 = *(_DWORD *)(v346 + 272) * v354;
                    unsigned int v356 = *(_DWORD *)(v353 + 24 * (v355 + *(unsigned __int16 *)(*v343 + 24)) + 4);
                    unint64_t v357 = *v320;
                    unsigned int v358 = v357 - 0x40000000;
                    unint64_t v359 = v357 >> 3;
                    int v360 = 1 << (v357 & 7);
                    v361 = *(uint64_t ***)(v346 + 240);
                    do
                    {
                      if (v358 >= 0xC0000001)
                      {
                        uint64_t v362 = **v361;
                        if (v359 < *(unsigned __int16 *)(v362 + 22)
                          && (v360 & *(unsigned char *)(*(void *)(v362 + 8) + v359)) != 0
                          && (!v352
                           || *v361 != v352
                           && ((*(_DWORD *)(v352[1] + ((*(unsigned __int16 *)(v362 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v362 + 24)) & 1) != 0))
                        {
                          v352 = *v361;
                        }
                      }
                      ++v361;
                    }
                    while (v361 != v349);
                    if (v356 >> 3 > *(_DWORD *)(v353
                                               + 24 * (v355 + *(unsigned __int16 *)(*v352 + 24))
                                               + 4) >> 3)
                    {
                      do
                      {
                        v363 = v345;
                        *unsigned int v320 = v347;
                        if (!v344) {
                          break;
                        }
                        v364 = 0;
                        unint64_t v344 = (v344 - 1) >> 1;
                        long long v345 = &v438[v344];
                        unint64_t v347 = *v345;
                        unint64_t v365 = v347 >> 3;
                        v366 = (uint64_t **)result;
                        do
                        {
                          if ((v347 - 0x40000000) >= 0xC0000001)
                          {
                            uint64_t v367 = **v366;
                            if (v365 < *(unsigned __int16 *)(v367 + 22)
                              && ((1 << (v347 & 7)) & *(unsigned __int8 *)(*(void *)(v367 + 8) + v365)) != 0
                              && (!v364
                               || *v366 != v364
                               && ((*(_DWORD *)(v364[1] + ((*(unsigned __int16 *)(v367 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v367 + 24)) & 1) != 0))
                            {
                              v364 = *v366;
                            }
                          }
                          ++v366;
                        }
                        while (v366 != v349);
                        v368 = 0;
                        int v369 = *(_DWORD *)(v346 + 272) * v354;
                        unsigned int v370 = *(_DWORD *)(v353 + 24 * (v369 + *(unsigned __int16 *)(*v364 + 24)) + 4);
                        v371 = (uint64_t **)result;
                        do
                        {
                          if (v358 >= 0xC0000001)
                          {
                            uint64_t v372 = **v371;
                            if (v359 < *(unsigned __int16 *)(v372 + 22)
                              && (v360 & *(unsigned char *)(*(void *)(v372 + 8) + v359)) != 0
                              && (!v368
                               || *v371 != v368
                               && ((*(_DWORD *)(v368[1] + ((*(unsigned __int16 *)(v372 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v372 + 24)) & 1) != 0))
                            {
                              v368 = *v371;
                            }
                          }
                          ++v371;
                        }
                        while (v371 != v349);
                        BOOL v373 = v370 >> 3 > *(_DWORD *)(v353
                                                     + 24 * (v369 + *(unsigned __int16 *)(*v368 + 24))
                                                     + 4) >> 3;
                        unsigned int v320 = v363;
                      }
                      while (v373);
                      unsigned int *v363 = v357;
                    }
                  }
                }
                BOOL v373 = v10-- <= 2;
              }
              while (!v373);
            }
            return result;
          }
          unint64_t v12 = (unint64_t)v10 >> 1;
          uint64_t v13 = &v8[(unint64_t)v10 >> 1];
          uint64_t v14 = *(void *)(*(void *)v7 + 8);
          uint64_t v15 = v7;
          if ((unint64_t)v9 >= 0x201)
          {
            sub_1CC2A8718(v11, (_DWORD *)v11 + ((unint64_t)v10 >> 1), v430, v14);
            sub_1CC2A8718((uint64_t *)(v438 + 1), v13 - 1, a2 - 2, *(void *)(*(void *)v15 + 8));
            uint64_t v16 = &v438[v12 + 1];
            sub_1CC2A8718((uint64_t *)v438 + 1, v16, a2 - 3, *(void *)(*(void *)v15 + 8));
            sub_1CC2A8718((uint64_t *)(v13 - 1), v13, v16, *(void *)(*(void *)v15 + 8));
            uint64_t v18 = v438;
            unsigned int v17 = *v438;
            unsigned int *v438 = *v13;
            *uint64_t v13 = v17;
          }
          else
          {
            sub_1CC2A8718((uint64_t *)((char *)v11 + 4 * ((unint64_t)v10 >> 1)), v11, v430, v14);
            uint64_t v18 = v438;
          }
          --a4;
          uint64_t v19 = *(void *)(*(void *)v15 + 8);
          if (a5) {
            break;
          }
          uint64_t v29 = 0;
          unint64_t v30 = *(v18 - 1);
          uint64_t v21 = *(char **)(v19 + 240);
          unsigned int v22 = *(char **)(v19 + 248);
          unsigned int v31 = v30 - 0x40000000;
          unint64_t v32 = v30 >> 3;
          int v33 = 1 << (v30 & 7);
          uint64_t v34 = v21;
          do
          {
            if (v31 >= 0xC0000001)
            {
              uint64_t v35 = **(void **)v34;
              if (v32 < *(unsigned __int16 *)(v35 + 22)
                && (v33 & *(unsigned char *)(*(void *)(v35 + 8) + v32)) != 0
                && (!v29
                 || *(uint64_t **)v34 != v29
                 && ((*(_DWORD *)(v29[1] + ((*(unsigned __int16 *)(v35 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v35 + 24)) & 1) != 0))
              {
                uint64_t v29 = *(uint64_t **)v34;
              }
            }
            v34 += 8;
          }
          while (v34 != v22);
          unint64_t v36 = 0;
          uint64_t v23 = *(void *)(v19 + 264);
          unint64_t v24 = (unint64_t)(v22 - v21) >> 3;
          int v25 = *(_DWORD *)(v19 + 272) * v24;
          unsigned int v37 = *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v29 + 24)) + 4);
          unint64_t v38 = *v438;
          unint64_t v27 = v38 >> 3;
          unsigned int v26 = v38 - 0x40000000;
          int v28 = 1 << (v38 & 7);
          int v39 = *(char **)(v19 + 240);
          do
          {
            if (v26 >= 0xC0000001)
            {
              uint64_t v40 = **(void **)v39;
              if (v27 < *(unsigned __int16 *)(v40 + 22)
                && (v28 & *(unsigned char *)(*(void *)(v40 + 8) + v27)) != 0
                && (!v36
                 || *(uint64_t **)v39 != v36
                 && ((*(_DWORD *)(v36[1] + ((*(unsigned __int16 *)(v40 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v40 + 24)) & 1) != 0))
              {
                unint64_t v36 = *(uint64_t **)v39;
              }
            }
            v39 += 8;
          }
          while (v39 != v22);
          if (v37 >> 3 > *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v36 + 24)) + 4) >> 3)
          {
            unsigned int v432 = *v438;
            uint64_t v18 = v438;
            goto LABEL_33;
          }
          int v105 = 0;
          int v106 = *(char **)(v19 + 240);
          do
          {
            if (v26 >= 0xC0000001)
            {
              uint64_t v107 = **(void **)v106;
              if (v27 < *(unsigned __int16 *)(v107 + 22)
                && (v28 & *(unsigned char *)(*(void *)(v107 + 8) + v27)) != 0
                && (!v105
                 || *(uint64_t **)v106 != v105
                 && ((*(_DWORD *)(v105[1] + ((*(unsigned __int16 *)(v107 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v107 + 24)) & 1) != 0))
              {
                int v105 = *(uint64_t **)v106;
              }
            }
            v106 += 8;
          }
          while (v106 != v22);
          unsigned int v108 = *v438;
          uint64_t v109 = 0;
          unsigned int v110 = *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v105 + 24)) + 4);
          unint64_t v111 = *v430;
          unsigned int v112 = v111 - 0x40000000;
          unint64_t v113 = v111 >> 3;
          int v114 = 1 << (v111 & 7);
          v115 = *(char **)(v19 + 240);
          do
          {
            if (v112 >= 0xC0000001)
            {
              uint64_t v116 = **(void **)v115;
              if (v113 < *(unsigned __int16 *)(v116 + 22)
                && (v114 & *(unsigned char *)(*(void *)(v116 + 8) + v113)) != 0
                && (!v109
                 || *(uint64_t **)v115 != v109
                 && ((*(_DWORD *)(v109[1] + ((*(unsigned __int16 *)(v116 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v116 + 24)) & 1) != 0))
              {
                uint64_t v109 = *(uint64_t **)v115;
              }
            }
            v115 += 8;
          }
          while (v115 != v22);
          uint64_t v8 = v438;
          if (v110 >> 3 <= *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v109 + 24)) + 4) >> 3)
          {
            do
            {
              if (++v8 >= a2) {
                break;
              }
              uint64_t v128 = 0;
              v129 = *(char **)(v19 + 240);
              do
              {
                if (v26 >= 0xC0000001)
                {
                  uint64_t v130 = **(void **)v129;
                  if (v27 < *(unsigned __int16 *)(v130 + 22)
                    && (v28 & *(unsigned char *)(*(void *)(v130 + 8) + v27)) != 0
                    && (!v128
                     || *(uint64_t **)v129 != v128
                     && ((*(_DWORD *)(v128[1] + ((*(unsigned __int16 *)(v130 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v130 + 24)) & 1) != 0))
                  {
                    uint64_t v128 = *(uint64_t **)v129;
                  }
                }
                v129 += 8;
              }
              while (v129 != v22);
              unsigned int v131 = 0;
              unsigned int v132 = *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v128 + 24)) + 4);
              unint64_t v133 = *v8;
              unsigned int v134 = v133 - 0x40000000;
              unint64_t v135 = v133 >> 3;
              int v136 = 1 << (v133 & 7);
              uint64_t v137 = *(char **)(v19 + 240);
              do
              {
                if (v134 >= 0xC0000001)
                {
                  uint64_t v138 = **(void **)v137;
                  if (v135 < *(unsigned __int16 *)(v138 + 22)
                    && (v136 & *(unsigned char *)(*(void *)(v138 + 8) + v135)) != 0
                    && (!v131
                     || *(uint64_t **)v137 != v131
                     && ((*(_DWORD *)(v131[1] + ((*(unsigned __int16 *)(v138 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v138 + 24)) & 1) != 0))
                  {
                    unsigned int v131 = *(uint64_t **)v137;
                  }
                }
                v137 += 8;
              }
              while (v137 != v22);
            }
            while (v132 >> 3 <= *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v131 + 24)) + 4) >> 3);
          }
          else
          {
            uint64_t v8 = v438;
            do
            {
              unsigned __int8 v117 = 0;
              char v118 = *(char **)(v19 + 240);
              do
              {
                if (v26 >= 0xC0000001)
                {
                  uint64_t v119 = **(void **)v118;
                  if (v27 < *(unsigned __int16 *)(v119 + 22)
                    && (v28 & *(unsigned char *)(*(void *)(v119 + 8) + v27)) != 0
                    && (!v117
                     || *(uint64_t **)v118 != v117
                     && ((*(_DWORD *)(v117[1] + ((*(unsigned __int16 *)(v119 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v119 + 24)) & 1) != 0))
                  {
                    unsigned __int8 v117 = *(uint64_t **)v118;
                  }
                }
                v118 += 8;
              }
              while (v118 != v22);
              unint64_t v120 = 0;
              unsigned int v121 = v8[1];
              ++v8;
              unsigned int v122 = *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v117 + 24)) + 4);
              unsigned int v123 = v121 - 0x40000000;
              unint64_t v124 = (unint64_t)v121 >> 3;
              int v125 = 1 << (v121 & 7);
              uint64_t v126 = *(char **)(v19 + 240);
              do
              {
                if (v123 >= 0xC0000001)
                {
                  uint64_t v127 = **(void **)v126;
                  if (v124 < *(unsigned __int16 *)(v127 + 22)
                    && (v125 & *(unsigned char *)(*(void *)(v127 + 8) + v124)) != 0
                    && (!v120
                     || *(uint64_t **)v126 != v120
                     && ((*(_DWORD *)(v120[1] + ((*(unsigned __int16 *)(v127 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v127 + 24)) & 1) != 0))
                  {
                    unint64_t v120 = *(uint64_t **)v126;
                  }
                }
                v126 += 8;
              }
              while (v126 != v22);
            }
            while (v122 >> 3 <= *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v120 + 24)) + 4) >> 3);
          }
          uint64_t result = (unint64_t)a2;
          if (v8 < a2)
          {
            uint64_t result = (unint64_t)a2;
            do
            {
              int v139 = 0;
              BOOL v140 = *(char **)(v19 + 240);
              do
              {
                if (v26 >= 0xC0000001)
                {
                  uint64_t v141 = **(void **)v140;
                  if (v27 < *(unsigned __int16 *)(v141 + 22)
                    && (v28 & *(unsigned char *)(*(void *)(v141 + 8) + v27)) != 0
                    && (!v139
                     || *(uint64_t **)v140 != v139
                     && ((*(_DWORD *)(v139[1] + ((*(unsigned __int16 *)(v141 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v141 + 24)) & 1) != 0))
                  {
                    int v139 = *(uint64_t **)v140;
                  }
                }
                v140 += 8;
              }
              while (v140 != v22);
              uint64_t v142 = 0;
              unsigned int v143 = *(_DWORD *)(result - 4);
              result -= 4;
              unsigned int v144 = *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v139 + 24)) + 4);
              unsigned int v145 = v143 - 0x40000000;
              unint64_t v146 = (unint64_t)v143 >> 3;
              int v147 = 1 << (v143 & 7);
              uint64_t v148 = *(char **)(v19 + 240);
              do
              {
                if (v145 >= 0xC0000001)
                {
                  uint64_t v149 = **(void **)v148;
                  if (v146 < *(unsigned __int16 *)(v149 + 22)
                    && (v147 & *(unsigned char *)(*(void *)(v149 + 8) + v146)) != 0
                    && (!v142
                     || *(uint64_t **)v148 != v142
                     && ((*(_DWORD *)(v142[1] + ((*(unsigned __int16 *)(v149 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v149 + 24)) & 1) != 0))
                  {
                    uint64_t v142 = *(uint64_t **)v148;
                  }
                }
                v148 += 8;
              }
              while (v148 != v22);
            }
            while (v144 >> 3 > *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v142 + 24)) + 4) >> 3);
          }
          if ((unint64_t)v8 < result)
          {
            unsigned int v150 = *v8;
            unsigned int v151 = *(_DWORD *)result;
            do
            {
              *uint64_t v8 = v151;
              *(_DWORD *)uint64_t result = v150;
              int v152 = *(_DWORD *)(v19 + 272) * v24;
              do
              {
                uint64_t v153 = 0;
                int v154 = v21;
                do
                {
                  if (v26 >= 0xC0000001)
                  {
                    uint64_t v155 = **(void **)v154;
                    if (v27 < *(unsigned __int16 *)(v155 + 22)
                      && (v28 & *(unsigned char *)(*(void *)(v155 + 8) + v27)) != 0
                      && (!v153
                       || *(uint64_t **)v154 != v153
                       && ((*(_DWORD *)(v153[1] + ((*(unsigned __int16 *)(v155 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v155 + 24)) & 1) != 0))
                    {
                      uint64_t v153 = *(uint64_t **)v154;
                    }
                  }
                  v154 += 8;
                }
                while (v154 != v22);
                unint64_t v156 = 0;
                unsigned int v157 = v8[1];
                ++v8;
                unsigned int v150 = v157;
                unsigned int v158 = *(_DWORD *)(v23 + 24 * (v152 + *(unsigned __int16 *)(*v153 + 24)) + 4);
                unsigned int v159 = v157 - 0x40000000;
                unint64_t v160 = (unint64_t)v157 >> 3;
                int v161 = 1 << (v157 & 7);
                uint64_t v162 = v21;
                do
                {
                  if (v159 >= 0xC0000001)
                  {
                    uint64_t v163 = **(void **)v162;
                    if (v160 < *(unsigned __int16 *)(v163 + 22)
                      && (v161 & *(unsigned char *)(*(void *)(v163 + 8) + v160)) != 0
                      && (!v156
                       || *(uint64_t **)v162 != v156
                       && ((*(_DWORD *)(v156[1] + ((*(unsigned __int16 *)(v163 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v163 + 24)) & 1) != 0))
                    {
                      unint64_t v156 = *(uint64_t **)v162;
                    }
                  }
                  v162 += 8;
                }
                while (v162 != v22);
              }
              while (v158 >> 3 <= *(_DWORD *)(v23 + 24 * (v152 + *(unsigned __int16 *)(*v156 + 24)) + 4) >> 3);
              do
              {
                v164 = 0;
                int v165 = v21;
                do
                {
                  if (v26 >= 0xC0000001)
                  {
                    uint64_t v166 = **(void **)v165;
                    if (v27 < *(unsigned __int16 *)(v166 + 22)
                      && (v28 & *(unsigned char *)(*(void *)(v166 + 8) + v27)) != 0
                      && (!v164
                       || *(uint64_t **)v165 != v164
                       && ((*(_DWORD *)(v164[1] + ((*(unsigned __int16 *)(v166 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v166 + 24)) & 1) != 0))
                    {
                      v164 = *(uint64_t **)v165;
                    }
                  }
                  v165 += 8;
                }
                while (v165 != v22);
                int v167 = 0;
                unsigned int v168 = *(_DWORD *)(result - 4);
                result -= 4;
                unsigned int v151 = v168;
                unsigned int v169 = *(_DWORD *)(v23 + 24 * (v152 + *(unsigned __int16 *)(*v164 + 24)) + 4);
                unsigned int v170 = v168 - 0x40000000;
                unint64_t v171 = (unint64_t)v168 >> 3;
                int v172 = 1 << (v168 & 7);
                uint64_t v173 = v21;
                do
                {
                  if (v170 >= 0xC0000001)
                  {
                    uint64_t v174 = **(void **)v173;
                    if (v171 < *(unsigned __int16 *)(v174 + 22)
                      && (v172 & *(unsigned char *)(*(void *)(v174 + 8) + v171)) != 0
                      && (!v167
                       || *(uint64_t **)v173 != v167
                       && ((*(_DWORD *)(v167[1] + ((*(unsigned __int16 *)(v174 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v174 + 24)) & 1) != 0))
                    {
                      int v167 = *(uint64_t **)v173;
                    }
                  }
                  v173 += 8;
                }
                while (v173 != v22);
              }
              while (v169 >> 3 > *(_DWORD *)(v23 + 24 * (v152 + *(unsigned __int16 *)(*v167 + 24)) + 4) >> 3);
            }
            while ((unint64_t)v8 < result);
          }
          uint64_t v175 = v8 - 1;
          BOOL v5 = v8 - 1 >= v438;
          BOOL v6 = v8 - 1 == v438;
          if (v8 - 1 != v438) {
            unsigned int *v438 = *v175;
          }
          a5 = 0;
          *uint64_t v175 = v108;
          uint64_t v7 = (uint64_t)a3;
        }
        unint64_t v20 = *v18;
        uint64_t v21 = *(char **)(v19 + 240);
        unsigned int v22 = *(char **)(v19 + 248);
        uint64_t v23 = *(void *)(v19 + 264);
        unint64_t v24 = (unint64_t)(v22 - v21) >> 3;
        int v25 = *(_DWORD *)(v19 + 272) * v24;
        unsigned int v26 = v20 - 0x40000000;
        unint64_t v27 = v20 >> 3;
        unsigned int v432 = *v18;
        int v28 = 1 << (v20 & 7);
LABEL_33:
        unint64_t v41 = v18;
        do
        {
          uint64_t v42 = 0;
          unsigned int v43 = v41;
          unsigned int v45 = v41[1];
          ++v41;
          unsigned int v44 = v45;
          unsigned int v46 = v45 - 0x40000000;
          unint64_t v47 = (unint64_t)v45 >> 3;
          int v48 = 1 << (v45 & 7);
          unsigned int v49 = v21;
          do
          {
            if (v46 >= 0xC0000001)
            {
              uint64_t v50 = **(void **)v49;
              if (v47 < *(unsigned __int16 *)(v50 + 22)
                && (v48 & *(unsigned char *)(*(void *)(v50 + 8) + v47)) != 0
                && (!v42
                 || *(uint64_t **)v49 != v42
                 && ((*(_DWORD *)(v42[1] + ((*(unsigned __int16 *)(v50 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v50 + 24)) & 1) != 0))
              {
                uint64_t v42 = *(uint64_t **)v49;
              }
            }
            v49 += 8;
          }
          while (v49 != v22);
          uint64_t v51 = 0;
          unsigned int v52 = *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v42 + 24)) + 4);
          unsigned int v53 = v21;
          do
          {
            if (v26 >= 0xC0000001)
            {
              uint64_t v54 = **(void **)v53;
              if (v27 < *(unsigned __int16 *)(v54 + 22)
                && (v28 & *(unsigned char *)(*(void *)(v54 + 8) + v27)) != 0
                && (!v51
                 || *(uint64_t **)v53 != v51
                 && ((*(_DWORD *)(v51[1] + ((*(unsigned __int16 *)(v54 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v54 + 24)) & 1) != 0))
              {
                uint64_t v51 = *(uint64_t **)v53;
              }
            }
            v53 += 8;
          }
          while (v53 != v22);
        }
        while (v52 >> 3 > *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v51 + 24)) + 4) >> 3);
        uint64_t v55 = a2;
        if (v43 == v438)
        {
          uint64_t v55 = a2;
          do
          {
            if (v41 >= v55) {
              break;
            }
            uint64_t v67 = 0;
            unsigned int v68 = *--v55;
            unsigned int v69 = v68 - 0x40000000;
            unint64_t v70 = (unint64_t)v68 >> 3;
            int v71 = 1 << (v68 & 7);
            unint64_t v72 = v21;
            do
            {
              if (v69 >= 0xC0000001)
              {
                uint64_t v73 = **(void **)v72;
                if (v70 < *(unsigned __int16 *)(v73 + 22)
                  && (v71 & *(unsigned char *)(*(void *)(v73 + 8) + v70)) != 0
                  && (!v67
                   || *(uint64_t **)v72 != v67
                   && ((*(_DWORD *)(v67[1] + ((*(unsigned __int16 *)(v73 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v73 + 24)) & 1) != 0))
                {
                  uint64_t v67 = *(uint64_t **)v72;
                }
              }
              v72 += 8;
            }
            while (v72 != v22);
            int v74 = 0;
            unsigned int v75 = *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v67 + 24)) + 4);
            unint64_t v76 = v21;
            do
            {
              if (v26 >= 0xC0000001)
              {
                uint64_t v77 = **(void **)v76;
                if (v27 < *(unsigned __int16 *)(v77 + 22)
                  && (v28 & *(unsigned char *)(*(void *)(v77 + 8) + v27)) != 0
                  && (!v74
                   || *(uint64_t **)v76 != v74
                   && ((*(_DWORD *)(v74[1] + ((*(unsigned __int16 *)(v77 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v77 + 24)) & 1) != 0))
                {
                  int v74 = *(uint64_t **)v76;
                }
              }
              v76 += 8;
            }
            while (v76 != v22);
          }
          while (v75 >> 3 <= *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v74 + 24)) + 4) >> 3);
        }
        else
        {
          do
          {
            unsigned int v56 = 0;
            unsigned int v57 = *--v55;
            unsigned int v58 = v57 - 0x40000000;
            unint64_t v59 = (unint64_t)v57 >> 3;
            int v60 = 1 << (v57 & 7);
            uint64_t v61 = v21;
            do
            {
              if (v58 >= 0xC0000001)
              {
                uint64_t v62 = **(void **)v61;
                if (v59 < *(unsigned __int16 *)(v62 + 22)
                  && (v60 & *(unsigned char *)(*(void *)(v62 + 8) + v59)) != 0
                  && (!v56
                   || *(uint64_t **)v61 != v56
                   && ((*(_DWORD *)(v56[1] + ((*(unsigned __int16 *)(v62 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v62 + 24)) & 1) != 0))
                {
                  unsigned int v56 = *(uint64_t **)v61;
                }
              }
              v61 += 8;
            }
            while (v61 != v22);
            uint64_t v63 = 0;
            unsigned int v64 = *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v56 + 24)) + 4);
            uint64_t v65 = v21;
            do
            {
              if (v26 >= 0xC0000001)
              {
                uint64_t v66 = **(void **)v65;
                if (v27 < *(unsigned __int16 *)(v66 + 22)
                  && (v28 & *(unsigned char *)(*(void *)(v66 + 8) + v27)) != 0
                  && (!v63
                   || *(uint64_t **)v65 != v63
                   && ((*(_DWORD *)(v63[1] + ((*(unsigned __int16 *)(v66 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v66 + 24)) & 1) != 0))
                {
                  uint64_t v63 = *(uint64_t **)v65;
                }
              }
              v65 += 8;
            }
            while (v65 != v22);
          }
          while (v64 >> 3 <= *(_DWORD *)(v23 + 24 * (v25 + *(unsigned __int16 *)(*v63 + 24)) + 4) >> 3);
        }
        if (v41 >= v55)
        {
          uint64_t v8 = v41;
        }
        else
        {
          unsigned int v78 = *v55;
          uint64_t v8 = v41;
          uint64_t v79 = v55;
          do
          {
            *uint64_t v8 = v78;
            *uint64_t v79 = v44;
            int v80 = *(_DWORD *)(v19 + 272) * v24;
            do
            {
              uint64_t v81 = 0;
              unsigned int v82 = v8[1];
              ++v8;
              unsigned int v44 = v82;
              unsigned int v83 = v82 - 0x40000000;
              unint64_t v84 = (unint64_t)v82 >> 3;
              int v85 = 1 << (v82 & 7);
              uint64_t v86 = v21;
              do
              {
                if (v83 >= 0xC0000001)
                {
                  uint64_t v87 = **(void **)v86;
                  if (v84 < *(unsigned __int16 *)(v87 + 22)
                    && (v85 & *(unsigned char *)(*(void *)(v87 + 8) + v84)) != 0
                    && (!v81
                     || *(uint64_t **)v86 != v81
                     && ((*(_DWORD *)(v81[1] + ((*(unsigned __int16 *)(v87 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v87 + 24)) & 1) != 0))
                  {
                    uint64_t v81 = *(uint64_t **)v86;
                  }
                }
                v86 += 8;
              }
              while (v86 != v22);
              uint64_t v88 = 0;
              unsigned int v89 = *(_DWORD *)(v23 + 24 * (v80 + *(unsigned __int16 *)(*v81 + 24)) + 4);
              int64_t v90 = v21;
              do
              {
                if (v26 >= 0xC0000001)
                {
                  uint64_t v91 = **(void **)v90;
                  if (v27 < *(unsigned __int16 *)(v91 + 22)
                    && (v28 & *(unsigned char *)(*(void *)(v91 + 8) + v27)) != 0
                    && (!v88
                     || *(uint64_t **)v90 != v88
                     && ((*(_DWORD *)(v88[1] + ((*(unsigned __int16 *)(v91 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v91 + 24)) & 1) != 0))
                  {
                    uint64_t v88 = *(uint64_t **)v90;
                  }
                }
                v90 += 8;
              }
              while (v90 != v22);
            }
            while (v89 >> 3 > *(_DWORD *)(v23 + 24 * (v80 + *(unsigned __int16 *)(*v88 + 24)) + 4) >> 3);
            do
            {
              uint64_t v92 = 0;
              unsigned int v93 = *--v79;
              unsigned int v78 = v93;
              unsigned int v94 = v93 - 0x40000000;
              unint64_t v95 = (unint64_t)v93 >> 3;
              int v96 = 1 << (v93 & 7);
              uint64_t v97 = v21;
              do
              {
                if (v94 >= 0xC0000001)
                {
                  uint64_t v98 = **(void **)v97;
                  if (v95 < *(unsigned __int16 *)(v98 + 22)
                    && (v96 & *(unsigned char *)(*(void *)(v98 + 8) + v95)) != 0
                    && (!v92
                     || *(uint64_t **)v97 != v92
                     && ((*(_DWORD *)(v92[1] + ((*(unsigned __int16 *)(v98 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v98 + 24)) & 1) != 0))
                  {
                    uint64_t v92 = *(uint64_t **)v97;
                  }
                }
                v97 += 8;
              }
              while (v97 != v22);
              unsigned int v99 = 0;
              unsigned int v100 = *(_DWORD *)(v23 + 24 * (v80 + *(unsigned __int16 *)(*v92 + 24)) + 4);
              uint64_t v101 = v21;
              do
              {
                if (v26 >= 0xC0000001)
                {
                  uint64_t v102 = **(void **)v101;
                  if (v27 < *(unsigned __int16 *)(v102 + 22)
                    && (v28 & *(unsigned char *)(*(void *)(v102 + 8) + v27)) != 0
                    && (!v99
                     || *(uint64_t **)v101 != v99
                     && ((*(_DWORD *)(v99[1] + ((*(unsigned __int16 *)(v102 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v102 + 24)) & 1) != 0))
                  {
                    unsigned int v99 = *(uint64_t **)v101;
                  }
                }
                v101 += 8;
              }
              while (v101 != v22);
            }
            while (v100 >> 3 <= *(_DWORD *)(v23 + 24 * (v80 + *(unsigned __int16 *)(*v99 + 24)) + 4) >> 3);
          }
          while (v8 < v79);
        }
        uint64_t v103 = v8 - 1;
        uint64_t result = (unint64_t)v438;
        if (v8 - 1 != v438) {
          unsigned int *v438 = *v103;
        }
        uint64_t v7 = (uint64_t)a3;
        *uint64_t v103 = v432;
        if (v41 >= v55) {
          break;
        }
LABEL_149:
        uint64_t result = sub_1CC2A5C34(result, v8 - 1, v7, a4, a5 & 1);
        uint64_t v7 = (uint64_t)a3;
        a5 = 0;
      }
      BOOL v104 = sub_1CC2A8D20(v438, v8 - 1, (uint64_t)a3);
      uint64_t result = sub_1CC2A8D20(v8, a2, (uint64_t)a3);
      if (result) {
        break;
      }
      uint64_t result = (unint64_t)v438;
      uint64_t v7 = (uint64_t)a3;
      if (!v104) {
        goto LABEL_149;
      }
    }
    a2 = v8 - 1;
    uint64_t v7 = (uint64_t)a3;
    if (!v104) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC2A8718(uint64_t *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = 0;
  unint64_t v5 = *a2;
  BOOL v6 = *(char **)(a4 + 240);
  uint64_t v7 = *(char **)(a4 + 248);
  unsigned int v8 = v5 - 0x40000000;
  unint64_t v9 = v5 >> 3;
  int v10 = 1 << (v5 & 7);
  uint64_t v11 = v6;
  do
  {
    if (v8 >= 0xC0000001)
    {
      uint64_t v12 = **(void **)v11;
      if (v9 < *(unsigned __int16 *)(v12 + 22)
        && (v10 & *(unsigned char *)(*(void *)(v12 + 8) + v9)) != 0
        && (!v4
         || *(uint64_t **)v11 != v4
         && ((*(_DWORD *)(v4[1] + ((*(unsigned __int16 *)(v12 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v12 + 24)) & 1) != 0))
      {
        uint64_t v4 = *(uint64_t **)v11;
      }
    }
    v11 += 8;
  }
  while (v11 != v7);
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)(a4 + 264);
  unint64_t v15 = (unint64_t)(v7 - v6) >> 3;
  int v16 = *(_DWORD *)(a4 + 272) * v15;
  unsigned int v17 = *(_DWORD *)(v14 + 24 * (v16 + *(unsigned __int16 *)(*v4 + 24)) + 4);
  unint64_t v18 = *(unsigned int *)result;
  unsigned int v19 = v18 - 0x40000000;
  unint64_t v20 = v18 >> 3;
  int v21 = 1 << (v18 & 7);
  unsigned int v22 = *(char **)(a4 + 240);
  do
  {
    if (v19 >= 0xC0000001)
    {
      uint64_t v23 = **(void **)v22;
      if (v20 < *(unsigned __int16 *)(v23 + 22)
        && (v21 & *(unsigned char *)(*(void *)(v23 + 8) + v20)) != 0
        && (!v13
         || *(uint64_t **)v22 != v13
         && ((*(_DWORD *)(v13[1] + ((*(unsigned __int16 *)(v23 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v23 + 24)) & 1) != 0))
      {
        uint64_t v13 = *(uint64_t **)v22;
      }
    }
    v22 += 8;
  }
  while (v22 != v7);
  unint64_t v24 = 0;
  unsigned int v25 = *(_DWORD *)(v14 + 24 * (v16 + *(unsigned __int16 *)(*v13 + 24)) + 4) >> 3;
  unint64_t v26 = *a3;
  unint64_t v27 = v26 >> 3;
  int v28 = *(char **)(a4 + 240);
  do
  {
    if ((v26 - 0x40000000) >= 0xC0000001)
    {
      uint64_t v29 = **(void **)v28;
      if (v27 < *(unsigned __int16 *)(v29 + 22)
        && ((1 << (v26 & 7)) & *(unsigned __int8 *)(*(void *)(v29 + 8) + v27)) != 0
        && (!v24
         || *(uint64_t **)v28 != v24
         && ((*(_DWORD *)(v24[1] + ((*(unsigned __int16 *)(v29 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v29 + 24)) & 1) != 0))
      {
        unint64_t v24 = *(uint64_t **)v28;
      }
    }
    v28 += 8;
  }
  while (v28 != v7);
  unint64_t v30 = 0;
  unsigned int v31 = v17 >> 3;
  unsigned int v32 = *(_DWORD *)(v14 + 24 * (v16 + *(unsigned __int16 *)(*v24 + 24)) + 4);
  int v33 = *(char **)(a4 + 240);
  do
  {
    if (v8 >= 0xC0000001)
    {
      uint64_t v34 = **(void **)v33;
      if (v9 < *(unsigned __int16 *)(v34 + 22)
        && (v10 & *(unsigned char *)(*(void *)(v34 + 8) + v9)) != 0
        && (!v30
         || *(uint64_t **)v33 != v30
         && ((*(_DWORD *)(v30[1] + ((*(unsigned __int16 *)(v34 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v34 + 24)) & 1) != 0))
      {
        unint64_t v30 = *(uint64_t **)v33;
      }
    }
    v33 += 8;
  }
  while (v33 != v7);
  unsigned int v35 = v32 >> 3;
  unsigned int v36 = *(_DWORD *)(v14 + 24 * (v16 + *(unsigned __int16 *)(*v30 + 24)) + 4) >> 3;
  if (v31 <= v25)
  {
    if (v35 > v36)
    {
      unsigned int v37 = 0;
      *a2 = v26;
      *a3 = v5;
      unint64_t v38 = *a2;
      unint64_t v39 = v38 >> 3;
      uint64_t v40 = v6;
      do
      {
        if ((v38 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v41 = **(void **)v40;
          if (v39 < *(unsigned __int16 *)(v41 + 22)
            && ((1 << (v38 & 7)) & *(unsigned __int8 *)(*(void *)(v41 + 8) + v39)) != 0
            && (!v37
             || *(uint64_t **)v40 != v37
             && ((*(_DWORD *)(v37[1] + ((*(unsigned __int16 *)(v41 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v41 + 24)) & 1) != 0))
          {
            unsigned int v37 = *(uint64_t **)v40;
          }
        }
        v40 += 8;
      }
      while (v40 != v7);
      unint64_t v47 = 0;
      int v48 = *(_DWORD *)(a4 + 272) * v15;
      unsigned int v49 = *(_DWORD *)(v14 + 24 * (v48 + *(unsigned __int16 *)(*v37 + 24)) + 4);
      unint64_t v50 = *(unsigned int *)result;
      unint64_t v51 = v50 >> 3;
      do
      {
        if ((v50 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v52 = **(void **)v6;
          if (v51 < *(unsigned __int16 *)(v52 + 22)
            && ((1 << (v50 & 7)) & *(unsigned __int8 *)(*(void *)(v52 + 8) + v51)) != 0
            && (!v47
             || *(uint64_t **)v6 != v47
             && ((*(_DWORD *)(v47[1] + ((*(unsigned __int16 *)(v52 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v52 + 24)) & 1) != 0))
          {
            unint64_t v47 = *(uint64_t **)v6;
          }
        }
        v6 += 8;
      }
      while (v6 != v7);
      if (v49 >> 3 > *(_DWORD *)(v14 + 24 * (v48 + *(unsigned __int16 *)(*v47 + 24)) + 4) >> 3)
      {
        *(_DWORD *)uint64_t result = v38;
        *a2 = v50;
      }
    }
  }
  else
  {
    if (v35 > v36)
    {
      *(_DWORD *)uint64_t result = v26;
LABEL_84:
      *a3 = v18;
      return result;
    }
    uint64_t v42 = 0;
    *(_DWORD *)uint64_t result = v5;
    *a2 = v18;
    unint64_t v43 = *a3;
    unint64_t v44 = v43 >> 3;
    unsigned int v45 = v6;
    do
    {
      if ((v43 - 0x40000000) >= 0xC0000001)
      {
        uint64_t v46 = **(void **)v45;
        if (v44 < *(unsigned __int16 *)(v46 + 22)
          && ((1 << (v43 & 7)) & *(unsigned __int8 *)(*(void *)(v46 + 8) + v44)) != 0
          && (!v42
           || *(uint64_t **)v45 != v42
           && ((*(_DWORD *)(v42[1] + ((*(unsigned __int16 *)(v46 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v46 + 24)) & 1) != 0))
        {
          uint64_t v42 = *(uint64_t **)v45;
        }
      }
      v45 += 8;
    }
    while (v45 != v7);
    uint64_t result = 0;
    int v53 = *(_DWORD *)(a4 + 272) * v15;
    unsigned int v54 = *(_DWORD *)(v14 + 24 * (v53 + *(unsigned __int16 *)(*v42 + 24)) + 4);
    do
    {
      if (v19 >= 0xC0000001)
      {
        uint64_t v55 = **(void **)v6;
        if (v20 < *(unsigned __int16 *)(v55 + 22)
          && (v21 & *(unsigned char *)(*(void *)(v55 + 8) + v20)) != 0
          && (!result
           || *(uint64_t **)v6 != result
           && ((*(_DWORD *)(result[1] + ((*(unsigned __int16 *)(v55 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v55 + 24)) & 1) != 0))
        {
          uint64_t result = *(uint64_t **)v6;
        }
      }
      v6 += 8;
    }
    while (v6 != v7);
    if (v54 >> 3 > *(_DWORD *)(v14 + 24 * (v53 + *(unsigned __int16 *)(*result + 24)) + 4) >> 3)
    {
      *a2 = v43;
      goto LABEL_84;
    }
  }
  return result;
}

BOOL sub_1CC2A8D20(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = 0;
      uint64_t v7 = *(void *)(*(void *)a3 + 8);
      unint64_t v8 = *(a2 - 1);
      unint64_t v9 = *(char **)(v7 + 240);
      int v10 = *(char **)(v7 + 248);
      unint64_t v11 = v8 >> 3;
      uint64_t v12 = v9;
      do
      {
        if ((v8 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v13 = **(void **)v12;
          if (v11 < *(unsigned __int16 *)(v13 + 22)
            && ((1 << (v8 & 7)) & *(unsigned __int8 *)(*(void *)(v13 + 8) + v11)) != 0
            && (!v6
             || *(uint64_t **)v12 != v6
             && ((*(_DWORD *)(v6[1] + ((*(unsigned __int16 *)(v13 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v13 + 24)) & 1) != 0))
          {
            BOOL v6 = *(uint64_t **)v12;
          }
        }
        v12 += 8;
      }
      while (v12 != v10);
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(v7 + 264);
      int v16 = *(_DWORD *)(v7 + 272) * ((unint64_t)(v10 - v9) >> 3);
      unsigned int v17 = *(_DWORD *)(v15 + 24 * (v16 + *(unsigned __int16 *)(*v6 + 24)) + 4);
      unint64_t v18 = *a1;
      unint64_t v19 = v18 >> 3;
      do
      {
        if ((v18 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v20 = **(void **)v9;
          if (v19 < *(unsigned __int16 *)(v20 + 22)
            && ((1 << (v18 & 7)) & *(unsigned __int8 *)(*(void *)(v20 + 8) + v19)) != 0
            && (!v14
             || *(uint64_t **)v9 != v14
             && ((*(_DWORD *)(v14[1] + ((*(unsigned __int16 *)(v20 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v20 + 24)) & 1) != 0))
          {
            uint64_t v14 = *(uint64_t **)v9;
          }
        }
        v9 += 8;
      }
      while (v9 != v10);
      if (v17 >> 3 > *(_DWORD *)(v15 + 24 * (v16 + *(unsigned __int16 *)(*v14 + 24)) + 4) >> 3)
      {
        *a1 = v8;
        *(a2 - 1) = v18;
      }
      return 1;
    case 3:
      sub_1CC2A8718((uint64_t *)a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 8));
      return 1;
    case 4:
      sub_1CC2A98B0((uint64_t *)a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      int v53 = a1 + 1;
      unsigned int v54 = a1 + 2;
      uint64_t v55 = a1 + 3;
      sub_1CC2A98B0((uint64_t *)a1, a1 + 1, a1 + 2, a1 + 3, a3);
      unsigned int v56 = 0;
      uint64_t v57 = *(void *)(*(void *)a3 + 8);
      unint64_t v58 = *(a2 - 1);
      unint64_t v59 = *(char **)(v57 + 240);
      int v60 = *(char **)(v57 + 248);
      unint64_t v61 = v58 >> 3;
      uint64_t v62 = v59;
      do
      {
        if ((v58 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v63 = **(void **)v62;
          if (v61 < *(unsigned __int16 *)(v63 + 22)
            && ((1 << (v58 & 7)) & *(unsigned __int8 *)(*(void *)(v63 + 8) + v61)) != 0
            && (!v56
             || *(uint64_t **)v62 != v56
             && ((*(_DWORD *)(v56[1] + ((*(unsigned __int16 *)(v63 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v63 + 24)) & 1) != 0))
          {
            unsigned int v56 = *(uint64_t **)v62;
          }
        }
        v62 += 8;
      }
      while (v62 != v60);
      unsigned int v64 = 0;
      uint64_t v65 = *(void *)(v57 + 264);
      unint64_t v66 = (unint64_t)(v60 - v59) >> 3;
      int v67 = *(_DWORD *)(v57 + 272) * v66;
      unsigned int v68 = *(_DWORD *)(v65 + 24 * (v67 + *(unsigned __int16 *)(*v56 + 24)) + 4);
      unint64_t v69 = *v55;
      unint64_t v70 = v69 >> 3;
      int v71 = *(char **)(v57 + 240);
      do
      {
        if ((v69 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v72 = **(void **)v71;
          if (v70 < *(unsigned __int16 *)(v72 + 22)
            && ((1 << (v69 & 7)) & *(unsigned __int8 *)(*(void *)(v72 + 8) + v70)) != 0
            && (!v64
             || *(uint64_t **)v71 != v64
             && ((*(_DWORD *)(v64[1] + ((*(unsigned __int16 *)(v72 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v72 + 24)) & 1) != 0))
          {
            unsigned int v64 = *(uint64_t **)v71;
          }
        }
        v71 += 8;
      }
      while (v71 != v60);
      BOOL result = 1;
      if (v68 >> 3 <= *(_DWORD *)(v65 + 24 * (v67 + *(unsigned __int16 *)(*v64 + 24)) + 4) >> 3) {
        return result;
      }
      uint64_t v73 = 0;
      *uint64_t v55 = v58;
      *(a2 - 1) = v69;
      unint64_t v74 = *v55;
      unsigned int v75 = v74 - 0x40000000;
      unint64_t v76 = v74 >> 3;
      int v77 = 1 << (v74 & 7);
      unsigned int v78 = v59;
      do
      {
        if (v75 >= 0xC0000001)
        {
          uint64_t v79 = **(void **)v78;
          if (v76 < *(unsigned __int16 *)(v79 + 22)
            && (v77 & *(unsigned char *)(*(void *)(v79 + 8) + v76)) != 0
            && (!v73
             || *(uint64_t **)v78 != v73
             && ((*(_DWORD *)(v73[1] + ((*(unsigned __int16 *)(v79 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v79 + 24)) & 1) != 0))
          {
            uint64_t v73 = *(uint64_t **)v78;
          }
        }
        v78 += 8;
      }
      while (v78 != v60);
      int v80 = 0;
      int v81 = *(_DWORD *)(v57 + 272) * v66;
      unsigned int v82 = *(_DWORD *)(v65 + 24 * (v81 + *(unsigned __int16 *)(*v73 + 24)) + 4);
      unint64_t v83 = *v54;
      unint64_t v84 = v83 >> 3;
      int v85 = v59;
      do
      {
        if ((v83 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v86 = **(void **)v85;
          if (v84 < *(unsigned __int16 *)(v86 + 22)
            && ((1 << (v83 & 7)) & *(unsigned __int8 *)(*(void *)(v86 + 8) + v84)) != 0
            && (!v80
             || *(uint64_t **)v85 != v80
             && ((*(_DWORD *)(v80[1] + ((*(unsigned __int16 *)(v86 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v86 + 24)) & 1) != 0))
          {
            int v80 = *(uint64_t **)v85;
          }
        }
        v85 += 8;
      }
      while (v85 != v60);
      if (v82 >> 3 > *(_DWORD *)(v65 + 24 * (v81 + *(unsigned __int16 *)(*v80 + 24)) + 4) >> 3)
      {
        uint64_t v87 = 0;
        *unsigned int v54 = v74;
        *uint64_t v55 = v83;
        uint64_t v88 = v59;
        do
        {
          if (v75 >= 0xC0000001)
          {
            uint64_t v89 = **(void **)v88;
            if (v76 < *(unsigned __int16 *)(v89 + 22)
              && (v77 & *(unsigned char *)(*(void *)(v89 + 8) + v76)) != 0
              && (!v87
               || *(uint64_t **)v88 != v87
               && ((*(_DWORD *)(v87[1] + ((*(unsigned __int16 *)(v89 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v89 + 24)) & 1) != 0))
            {
              uint64_t v87 = *(uint64_t **)v88;
            }
          }
          v88 += 8;
        }
        while (v88 != v60);
        int64_t v90 = 0;
        int v91 = *(_DWORD *)(v57 + 272) * v66;
        unsigned int v92 = *(_DWORD *)(v65 + 24 * (v91 + *(unsigned __int16 *)(*v87 + 24)) + 4);
        unint64_t v93 = *v53;
        unint64_t v94 = v93 >> 3;
        unint64_t v95 = v59;
        do
        {
          if ((v93 - 0x40000000) >= 0xC0000001)
          {
            uint64_t v96 = **(void **)v95;
            if (v94 < *(unsigned __int16 *)(v96 + 22)
              && ((1 << (v93 & 7)) & *(unsigned __int8 *)(*(void *)(v96 + 8) + v94)) != 0
              && (!v90
               || *(uint64_t **)v95 != v90
               && ((*(_DWORD *)(v90[1] + ((*(unsigned __int16 *)(v96 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v96 + 24)) & 1) != 0))
            {
              int64_t v90 = *(uint64_t **)v95;
            }
          }
          v95 += 8;
        }
        while (v95 != v60);
        if (v92 >> 3 > *(_DWORD *)(v65 + 24 * (v91 + *(unsigned __int16 *)(*v90 + 24)) + 4) >> 3)
        {
          uint64_t v97 = 0;
          _DWORD *v53 = v74;
          *unsigned int v54 = v93;
          uint64_t v98 = v59;
          do
          {
            if (v75 >= 0xC0000001)
            {
              uint64_t v99 = **(void **)v98;
              if (v76 < *(unsigned __int16 *)(v99 + 22)
                && (v77 & *(unsigned char *)(*(void *)(v99 + 8) + v76)) != 0
                && (!v97
                 || *(uint64_t **)v98 != v97
                 && ((*(_DWORD *)(v97[1] + ((*(unsigned __int16 *)(v99 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v99 + 24)) & 1) != 0))
              {
                uint64_t v97 = *(uint64_t **)v98;
              }
            }
            v98 += 8;
          }
          while (v98 != v60);
          unsigned int v100 = 0;
          int v101 = *(_DWORD *)(v57 + 272) * v66;
          unint64_t v102 = *a1;
          unint64_t v103 = v102 >> 3;
          do
          {
            if ((v102 - 0x40000000) >= 0xC0000001)
            {
              uint64_t v104 = **(void **)v59;
              if (v103 < *(unsigned __int16 *)(v104 + 22)
                && ((1 << (v102 & 7)) & *(unsigned __int8 *)(*(void *)(v104 + 8) + v103)) != 0
                && (!v100
                 || *(uint64_t **)v59 != v100
                 && ((*(_DWORD *)(v100[1] + ((*(unsigned __int16 *)(v104 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v104 + 24)) & 1) != 0))
              {
                unsigned int v100 = *(uint64_t **)v59;
              }
            }
            v59 += 8;
          }
          while (v59 != v60);
          if (*(_DWORD *)(v65 + 24 * (v101 + *(unsigned __int16 *)(*v97 + 24)) + 4) >> 3 > *(_DWORD *)(v65 + 24 * (v101 + *(unsigned __int16 *)(*v100 + 24)) + 4) >> 3)
          {
            *a1 = v74;
            a1[1] = v102;
          }
        }
      }
      return 1;
    default:
      int v21 = a1 + 2;
      sub_1CC2A8718((uint64_t *)a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 8));
      unsigned int v22 = a1 + 3;
      BOOL result = 1;
      if (a1 + 3 == a2) {
        return result;
      }
      int v23 = 0;
      uint64_t v24 = *(void *)(*(void *)a3 + 8);
      unsigned int v25 = *(char **)(v24 + 240);
      unint64_t v26 = *(char **)(v24 + 248);
      uint64_t v27 = *(void *)(v24 + 264);
      unint64_t v28 = (unint64_t)(v26 - v25) >> 3;
      break;
  }
  while (1)
  {
    uint64_t v29 = 0;
    unint64_t v30 = *v22;
    unsigned int v31 = v30 - 0x40000000;
    unint64_t v32 = v30 >> 3;
    int v33 = 1 << (v30 & 7);
    uint64_t v34 = v25;
    do
    {
      if (v31 >= 0xC0000001)
      {
        uint64_t v35 = **(void **)v34;
        if (v32 < *(unsigned __int16 *)(v35 + 22)
          && (v33 & *(unsigned char *)(*(void *)(v35 + 8) + v32)) != 0
          && (!v29
           || *(uint64_t **)v34 != v29
           && ((*(_DWORD *)(v29[1] + ((*(unsigned __int16 *)(v35 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v35 + 24)) & 1) != 0))
        {
          uint64_t v29 = *(uint64_t **)v34;
        }
      }
      v34 += 8;
    }
    while (v34 != v26);
    unsigned int v36 = 0;
    int v37 = *(_DWORD *)(v24 + 272) * v28;
    unsigned int v38 = *(_DWORD *)(v27 + 24 * (v37 + *(unsigned __int16 *)(*v29 + 24)) + 4);
    unint64_t v39 = *v21;
    unint64_t v40 = v39 >> 3;
    uint64_t v41 = v25;
    do
    {
      if ((v39 - 0x40000000) >= 0xC0000001)
      {
        uint64_t v42 = **(void **)v41;
        if (v40 < *(unsigned __int16 *)(v42 + 22)
          && ((1 << (v39 & 7)) & *(unsigned __int8 *)(*(void *)(v42 + 8) + v40)) != 0
          && (!v36
           || *(uint64_t **)v41 != v36
           && ((*(_DWORD *)(v36[1] + ((*(unsigned __int16 *)(v42 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v42 + 24)) & 1) != 0))
        {
          unsigned int v36 = *(uint64_t **)v41;
        }
      }
      v41 += 8;
    }
    while (v41 != v26);
    if (v38 >> 3 > *(_DWORD *)(v27 + 24 * (v37 + *(unsigned __int16 *)(*v36 + 24)) + 4) >> 3)
    {
      unint64_t v43 = v22;
      while (1)
      {
        unsigned int *v43 = v39;
        if (v21 == a1) {
          break;
        }
        unint64_t v43 = v21;
        unint64_t v44 = 0;
        unsigned int v45 = v25;
        do
        {
          if (v31 >= 0xC0000001)
          {
            uint64_t v46 = **(void **)v45;
            if (v32 < *(unsigned __int16 *)(v46 + 22)
              && (v33 & *(unsigned char *)(*(void *)(v46 + 8) + v32)) != 0
              && (!v44
               || *(uint64_t **)v45 != v44
               && ((*(_DWORD *)(v44[1] + ((*(unsigned __int16 *)(v46 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v46 + 24)) & 1) != 0))
            {
              unint64_t v44 = *(uint64_t **)v45;
            }
          }
          v45 += 8;
        }
        while (v45 != v26);
        unint64_t v47 = 0;
        int v21 = v43 - 1;
        unint64_t v39 = *(v43 - 1);
        int v48 = *(_DWORD *)(v24 + 272) * v28;
        unsigned int v49 = *(_DWORD *)(v27 + 24 * (v48 + *(unsigned __int16 *)(*v44 + 24)) + 4);
        unint64_t v50 = v39 >> 3;
        unint64_t v51 = v25;
        do
        {
          if ((v39 - 0x40000000) >= 0xC0000001)
          {
            uint64_t v52 = **(void **)v51;
            if (v50 < *(unsigned __int16 *)(v52 + 22)
              && ((1 << (v39 & 7)) & *(unsigned __int8 *)(*(void *)(v52 + 8) + v50)) != 0
              && (!v47
               || *(uint64_t **)v51 != v47
               && ((*(_DWORD *)(v47[1] + ((*(unsigned __int16 *)(v52 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v52 + 24)) & 1) != 0))
            {
              unint64_t v47 = *(uint64_t **)v51;
            }
          }
          v51 += 8;
        }
        while (v51 != v26);
        if (v49 >> 3 <= *(_DWORD *)(v27 + 24 * (v48 + *(unsigned __int16 *)(*v47 + 24)) + 4) >> 3) {
          goto LABEL_70;
        }
      }
      unint64_t v43 = a1;
LABEL_70:
      unsigned int *v43 = v30;
      if (++v23 == 8) {
        return v22 + 1 == a2;
      }
    }
    int v21 = v22++;
    if (v22 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CC2A98B0(uint64_t *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  sub_1CC2A8718(a1, a2, a3, *(void *)(*(void *)a5 + 8));
  int v10 = 0;
  uint64_t v11 = *(void *)(*(void *)a5 + 8);
  unint64_t v12 = *a4;
  uint64_t v13 = *(char **)(v11 + 240);
  uint64_t v14 = *(char **)(v11 + 248);
  unint64_t v15 = v12 >> 3;
  int v16 = v13;
  do
  {
    if ((v12 - 0x40000000) >= 0xC0000001)
    {
      uint64_t v17 = **(void **)v16;
      if (v15 < *(unsigned __int16 *)(v17 + 22)
        && ((1 << (v12 & 7)) & *(unsigned __int8 *)(*(void *)(v17 + 8) + v15)) != 0
        && (!v10
         || *(uint64_t **)v16 != v10
         && ((*(_DWORD *)(v10[1] + ((*(unsigned __int16 *)(v17 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v17 + 24)) & 1) != 0))
      {
        int v10 = *(uint64_t **)v16;
      }
    }
    v16 += 8;
  }
  while (v16 != v14);
  unint64_t v18 = 0;
  uint64_t v19 = *(void *)(v11 + 264);
  unint64_t v20 = (unint64_t)(v14 - v13) >> 3;
  int v21 = *(_DWORD *)(v11 + 272) * v20;
  unsigned int v22 = *(_DWORD *)(v19 + 24 * (v21 + *(unsigned __int16 *)(*v10 + 24)) + 4);
  unint64_t v23 = *a3;
  uint64_t result = (v23 - 0x40000000);
  unint64_t v25 = v23 >> 3;
  unint64_t v26 = *(char **)(v11 + 240);
  do
  {
    if (result >= 0xC0000001)
    {
      uint64_t v27 = **(void **)v26;
      if (v25 < *(unsigned __int16 *)(v27 + 22)
        && ((1 << (v23 & 7)) & *(unsigned __int8 *)(*(void *)(v27 + 8) + v25)) != 0
        && (!v18
         || *(uint64_t **)v26 != v18
         && ((*(_DWORD *)(v18[1] + ((*(unsigned __int16 *)(v27 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v27 + 24)) & 1) != 0))
      {
        unint64_t v18 = *(uint64_t **)v26;
      }
    }
    v26 += 8;
  }
  while (v26 != v14);
  if (v22 >> 3 > *(_DWORD *)(v19 + 24 * (v21 + *(unsigned __int16 *)(*v18 + 24)) + 4) >> 3)
  {
    unint64_t v28 = 0;
    *a3 = v12;
    *a4 = v23;
    unint64_t v29 = *a3;
    unint64_t v30 = v29 >> 3;
    unsigned int v31 = v13;
    do
    {
      if ((v29 - 0x40000000) >= 0xC0000001)
      {
        uint64_t v32 = **(void **)v31;
        if (v30 < *(unsigned __int16 *)(v32 + 22)
          && ((1 << (v29 & 7)) & *(unsigned __int8 *)(*(void *)(v32 + 8) + v30)) != 0
          && (!v28
           || *(uint64_t **)v31 != v28
           && ((*(_DWORD *)(v28[1] + ((*(unsigned __int16 *)(v32 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v32 + 24)) & 1) != 0))
        {
          unint64_t v28 = *(uint64_t **)v31;
        }
      }
      v31 += 8;
    }
    while (v31 != v14);
    int v33 = 0;
    int v34 = *(_DWORD *)(v11 + 272) * v20;
    unsigned int v35 = *(_DWORD *)(v19 + 24 * (v34 + *(unsigned __int16 *)(*v28 + 24)) + 4);
    unint64_t v36 = *a2;
    uint64_t result = (v36 - 0x40000000);
    unint64_t v37 = v36 >> 3;
    unsigned int v38 = v13;
    do
    {
      if (result >= 0xC0000001)
      {
        uint64_t v39 = **(void **)v38;
        if (v37 < *(unsigned __int16 *)(v39 + 22)
          && ((1 << (v36 & 7)) & *(unsigned __int8 *)(*(void *)(v39 + 8) + v37)) != 0
          && (!v33
           || *(uint64_t **)v38 != v33
           && ((*(_DWORD *)(v33[1] + ((*(unsigned __int16 *)(v39 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v39 + 24)) & 1) != 0))
        {
          int v33 = *(uint64_t **)v38;
        }
      }
      v38 += 8;
    }
    while (v38 != v14);
    if (v35 >> 3 > *(_DWORD *)(v19 + 24 * (v34 + *(unsigned __int16 *)(*v33 + 24)) + 4) >> 3)
    {
      unint64_t v40 = 0;
      *a2 = v29;
      *a3 = v36;
      unint64_t v41 = *a2;
      unint64_t v42 = v41 >> 3;
      unint64_t v43 = v13;
      do
      {
        if ((v41 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v44 = **(void **)v43;
          if (v42 < *(unsigned __int16 *)(v44 + 22)
            && ((1 << (v41 & 7)) & *(unsigned __int8 *)(*(void *)(v44 + 8) + v42)) != 0
            && (!v40
             || *(uint64_t **)v43 != v40
             && ((*(_DWORD *)(v40[1] + ((*(unsigned __int16 *)(v44 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v44 + 24)) & 1) != 0))
          {
            unint64_t v40 = *(uint64_t **)v43;
          }
        }
        v43 += 8;
      }
      while (v43 != v14);
      unsigned int v45 = 0;
      int v46 = *(_DWORD *)(v11 + 272) * v20;
      unsigned int v47 = *(_DWORD *)(v19 + 24 * (v46 + *(unsigned __int16 *)(*v40 + 24)) + 4);
      unint64_t v48 = *(unsigned int *)a1;
      unint64_t v49 = v48 >> 3;
      uint64_t result = (1 << (v48 & 7));
      do
      {
        if ((v48 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v50 = **(void **)v13;
          if (v49 < *(unsigned __int16 *)(v50 + 22)
            && (result & *(unsigned char *)(*(void *)(v50 + 8) + v49)) != 0
            && (!v45
             || *(uint64_t **)v13 != v45
             && ((*(_DWORD *)(v45[1] + ((*(unsigned __int16 *)(v50 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v50 + 24)) & 1) != 0))
          {
            unsigned int v45 = *(uint64_t **)v13;
          }
        }
        v13 += 8;
      }
      while (v13 != v14);
      if (v47 >> 3 > *(_DWORD *)(v19 + 24 * (v46 + *(unsigned __int16 *)(*v45 + 24)) + 4) >> 3)
      {
        *(_DWORD *)a1 = v41;
        *a2 = v48;
      }
    }
  }
  return result;
}

_DWORD *sub_1CC2A9D6C(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  uint64_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = v10 << 6;
      do
      {
        *uint64_t result = -1;
        result += 16;
        v11 -= 64;
      }
      while (v11);
    }
    if (v3)
    {
      unint64_t v12 = &v4[16 * v3];
      uint64_t v13 = v4;
      do
      {
        int v14 = *v13;
        if (*v13 <= 0xFFFFFFFD)
        {
          int v15 = *((_DWORD *)a1 + 4);
          if (v15)
          {
            unsigned int v16 = v15 - 1;
            uint64_t v17 = v16 & (37 * v14);
            unint64_t v18 = (int *)(*a1 + (v17 << 6));
            int v19 = *v18;
            if (v14 != *v18)
            {
              unint64_t v20 = 0;
              int v21 = 1;
              while (v19 != -1)
              {
                if (v20) {
                  BOOL v22 = 0;
                }
                else {
                  BOOL v22 = v19 == -2;
                }
                if (v22) {
                  unint64_t v20 = v18;
                }
                int v23 = v17 + v21++;
                uint64_t v17 = v23 & v16;
                unint64_t v18 = (int *)(*a1 + (v17 << 6));
                int v19 = *v18;
                if (v14 == *v18) {
                  goto LABEL_23;
                }
              }
              if (v20) {
                unint64_t v18 = v20;
              }
            }
          }
          else
          {
            unint64_t v18 = 0;
          }
LABEL_23:
          int *v18 = v14;
          *((void *)v18 + 1) = v18 + 6;
          *((void *)v18 + 2) = 0x800000000;
          if (v13[4]) {
            sub_1CD41B598((uint64_t)(v18 + 2), (uint64_t)(v13 + 2));
          }
          v18[14] = v13[14];
          ++*((_DWORD *)a1 + 2);
          uint64_t v24 = (int *)*((void *)v13 + 1);
          if (v24 != v13 + 6) {
            free(v24);
          }
        }
        v13 += 16;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v25 = *((unsigned int *)a1 + 4);
  if (v25)
  {
    uint64_t v26 = v25 << 6;
    do
    {
      *uint64_t result = -1;
      result += 16;
      v26 -= 64;
    }
    while (v26);
  }
  return result;
}

uint64_t sub_1CC2A9F68(uint64_t a1, unsigned int a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = a2;
  unint64_t v9 = *(uint64_t ***)(v7 + 240);
  uint64_t v10 = *(uint64_t ***)(v7 + 248);
  if (v9 == v10)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = (unint64_t)a2 >> 3;
    do
    {
      if (a2 - 0x40000000 >= 0xC0000001)
      {
        uint64_t v13 = **v9;
        if (v12 < *(unsigned __int16 *)(v13 + 22)
          && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(void *)(v13 + 8) + v12)) != 0
          && (!v11
           || *v9 != v11
           && ((*(_DWORD *)(v11[1] + ((*(unsigned __int16 *)(v13 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v13 + 24)) & 1) != 0))
        {
          uint64_t v11 = *v9;
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  unsigned int v34 = a2;
  uint64_t v14 = sub_1CD514074(a1 + 216, (int *)&v34)[1];
  if ((void *)(a4 + 48) == a3)
  {
    unint64_t v17 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if (!v17 || (*(unsigned char *)v17 & 4) == 0)
    {
      while ((*(_WORD *)(v17 + 44) & 4) != 0)
        unint64_t v17 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
    }
    (*(void (**)(void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t *, void))(**(void **)(a1 + 32) + 464))(*(void *)(a1 + 32), a4, v17, v8, v14, v11, *(void *)(a1 + 24));
    if (*(void *)(*(void *)(v17 + 24) + 56) == v17) {
      unint64_t v18 = 0;
    }
    else {
      unint64_t v18 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
    }
    int v19 = (uint64_t *)(a4 + 40);
    uint64_t v20 = *(void *)(*(void *)(v18 + 24) + 32);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 728);
      if (v21) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v21 + 32))(v21, v18);
      }
      uint64_t v22 = *(unsigned int *)(v18 + 40);
      if (v22)
      {
        uint64_t v23 = *(void *)(v18 + 32);
        uint64_t v24 = *(void *)(v20 + 40);
        uint64_t v25 = 32 * v22;
        do
        {
          if (!*(unsigned char *)v23)
          {
            uint64_t v26 = *(unsigned int *)(v23 + 4);
            if ((v26 & 0x80000000) != 0) {
              uint64_t v27 = (uint64_t *)(*(void *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v27 = (uint64_t *)(*(void *)(v24 + 272) + 8 * v26);
            }
            uint64_t v28 = *v27;
            uint64_t v30 = *(void *)(v23 + 16);
            uint64_t v29 = *(void *)(v23 + 24);
            if (v23 != *v27) {
              uint64_t v27 = (uint64_t *)(v30 + 24);
            }
            *uint64_t v27 = v29;
            if (v29) {
              uint64_t v31 = v29;
            }
            else {
              uint64_t v31 = v28;
            }
            *(void *)(v31 + 16) = v30;
            *(void *)(v23 + 16) = 0;
            *(void *)(v23 + 24) = 0;
          }
          v23 += 32;
          v25 -= 32;
        }
        while (v25);
      }
    }
    *(void *)(v18 + 24) = 0;
    uint64_t v32 = *(unint64_t **)(v18 + 8);
    unint64_t v33 = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
    *uint64_t v32 = v33 | *v32 & 7;
    *(void *)(v33 + 8) = v32;
    *(void *)v18 &= 7uLL;
    *(void *)(v18 + 8) = 0;
    return sub_1CBA959D4(v19, v17, v18);
  }
  else
  {
    int v15 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 464);
    return v15();
  }
}

uint64_t sub_1CC2AA254()
{
  int v4 = 1;
  char v2 = 0;
  uint64_t v3 = &v2;
  v5.n128_u64[0] = (unint64_t)"Allow spill in spill slot of greater size than register size";
  v5.n128_u64[1] = 60;
  int v1 = 1;
  sub_1CD514B8C(&v4, &v3, &v5, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCCB968, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  uint64_t v3 = (char *)&v1;
  v5.n128_u64[0] = (unint64_t)"Allow passing GC Pointer arguments in callee saved registers";
  v5.n128_u64[1] = 60;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCBA28, "fixup-allow-gcptr-in-csr", &v4, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCBA28, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 1;
  uint64_t v3 = (char *)&v1;
  v5.n128_u64[0] = (unint64_t)"Enable simple copy propagation during register reloading";
  v5.n128_u64[1] = 56;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCBAE8, "fixup-scs-enable-copy-propagation", &v4, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCBAE8, &dword_1CB82C000);
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Max number of statepoints allowed to pass GC Ptrs in registers";
  v5.n128_u64[1] = 62;
  sub_1CD514D28(&v3, (long long *)&v5);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCCBBA8, &dword_1CB82C000);
}

void sub_1CC2AA3C8()
{
}

void sub_1CC2AA464()
{
}

void sub_1CC2AA578(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  char v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    __n128 v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC2AA62C(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  char v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CC2AA6D8(int a1, llvm *this)
{
  llvm::getEHScopeMembership(this, (uint64_t)&v5);
  int v3 = v6;
  if (v6) {
    sub_1CC2AA760((uint64_t)this + 320, (uint64_t)&v5);
  }
  MEMORY[0x1D25D9CD0](v5, 8);
  return v3 != 0;
}

double sub_1CC2AA738@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 8;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1CC2AA760(uint64_t result, uint64_t a2)
{
  char v2 = *(void **)result;
  if (*(void *)result != result)
  {
    int v3 = (uint64_t *)result;
    int v4 = *(uint64_t **)(result + 8);
    if (v4[1] != result)
    {
      if (v4 == (uint64_t *)result)
      {
        uint64_t v23 = &v23;
        uint64_t v24 = (uint64_t *)&v23;
        BOOL v8 = &v23 == (void **)result;
      }
      else
      {
        uint64_t v6 = *(void *)(result + 8);
        do
        {
          uint64_t v7 = *(void *)(v6 + 8);
          if (v7 == result) {
            break;
          }
          int v4 = (uint64_t *)v4[1];
          uint64_t v6 = *(void *)(v7 + 8);
        }
        while (v6 != result);
        uint64_t v23 = &v23;
        uint64_t v24 = (uint64_t *)&v23;
        BOOL v8 = &v23 == (void **)result;
        if (&v23 != (void **)result && v4 != (uint64_t *)result)
        {
          BOOL v8 = 0;
          unint64_t v9 = (void *)*v4;
          v9[1] = result;
          *(void *)double result = v9;
          v2[1] = &v23;
          *int v4 = (uint64_t)&v23;
          uint64_t v23 = v2;
          uint64_t v24 = v4;
        }
      }
      sub_1CC2AA760(result, a2);
      double result = sub_1CC2AA760(&v23, a2);
      if (!v8 && v23 != &v23)
      {
        uint64_t v10 = v24;
        uint64_t v11 = (uint64_t *)v3[1];
        if (v11 != v3)
        {
          while (1)
          {
            uint64_t v25 = v10;
            uint64_t v26 = 0;
            if (sub_1CD3C8538((uint64_t *)a2, &v25, &v26)) {
              uint64_t v12 = v26;
            }
            else {
              uint64_t v12 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
            }
            uint64_t v25 = v11;
            uint64_t v26 = 0;
            double result = sub_1CD3C8538((uint64_t *)a2, &v25, &v26);
            if (result) {
              uint64_t v13 = v26;
            }
            else {
              uint64_t v13 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
            }
            if (*(_DWORD *)(v12 + 8) >= *(_DWORD *)(v13 + 8))
            {
              uint64_t v14 = v10;
            }
            else
            {
              uint64_t v14 = v10;
              do
              {
                int v15 = (uint64_t *)v14[1];
                uint64_t v14 = (uint64_t *)&v23;
                if (v15 == (uint64_t *)&v23) {
                  break;
                }
                uint64_t v14 = v15;
                uint64_t v25 = v15;
                uint64_t v26 = 0;
                uint64_t v16 = (sub_1CD3C8538((uint64_t *)a2, &v25, &v26) & 1) != 0
                    ? v26
                    : *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
                uint64_t v25 = v11;
                uint64_t v26 = 0;
                double result = sub_1CD3C8538((uint64_t *)a2, &v25, &v26);
                uint64_t v17 = (result & 1) != 0 ? v26 : *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
              }
              while (*(_DWORD *)(v16 + 8) < *(_DWORD *)(v17 + 8));
              if (v11 != v14 && v10 != v14)
              {
                uint64_t v18 = *v14;
                uint64_t v19 = *v10;
                *(void *)(v19 + 8) = v14;
                *uint64_t v14 = v19;
                uint64_t v20 = *v11;
                *(void *)(v18 + 8) = v11;
                uint64_t *v10 = v20;
                *(void *)(v20 + 8) = v10;
                uint64_t *v11 = v18;
              }
              if (v15 == (uint64_t *)&v23) {
                return result;
              }
            }
            uint64_t v11 = (uint64_t *)v11[1];
            uint64_t v10 = v14;
            if (v11 == v3) {
              goto LABEL_39;
            }
          }
        }
        uint64_t v14 = v24;
LABEL_39:
        if (v14 != (uint64_t *)&v23)
        {
          uint64_t v21 = v23;
          *(void *)(*v14 + 8) = &v23;
          uint64_t v22 = *v3;
          v21[1] = v3;
          *uint64_t v14 = v22;
          *(void *)(v22 + 8) = v14;
          uint64_t *v3 = (uint64_t)v21;
        }
      }
    }
  }
  return result;
}

void sub_1CC2AA9EC()
{
}

double llvm::GCFunctionInfo::GCFunctionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = -1;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

{
  double result;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = -1;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

void sub_1CC2AAAD4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC2AAB0C()
{
  return "Print Garbage Collector Information";
}

uint64_t sub_1CC2AAB1C(uint64_t a1)
{
  uint64_t AnalysisPass = (llvm::GCModuleInfo *)llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::GCModuleInfo::ID, 1);
  if (AnalysisPass) {
    uint64_t AnalysisPass = (llvm::GCModuleInfo *)(*(uint64_t (**)(llvm::GCModuleInfo *, void *))(*(void *)AnalysisPass
  }
                                                                                                 + 96))(AnalysisPass, &llvm::GCModuleInfo::ID);
  llvm::GCModuleInfo::clear(AnalysisPass);
  return 0;
}

void sub_1CC2AAB80(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::GCModuleInfo::ID);
}

uint64_t sub_1CC2AAB98(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 18) & 0x4000) != 0) {
    return 0;
  }
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::GCModuleInfo::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  unint64_t v9 = (llvm::GCModuleInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::GCModuleInfo::ID);
  FunctionInfo = (uint64_t ****)llvm::GCModuleInfo::getFunctionInfo(v9, (llvm::LLVMContext ***)a2);
  uint64_t v11 = *(llvm::raw_ostream **)(a1 + 32);
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (*((void *)v11 + 3) - (void)v12 > 0xCuLL)
  {
    qmemcpy(v12, "GC roots for ", 13);
    *((void *)v11 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), "GC roots for ", 0xDuLL);
  }
  uint64_t v13 = *FunctionInfo;
  if ((*((unsigned char *)*FunctionInfo + 23) & 0x10) == 0) {
    goto LABEL_20;
  }
  uint64_t v14 = ***v13;
  uint64_t v15 = *(void *)(v14 + 152);
  uint64_t v16 = *(unsigned int *)(v14 + 168);
  if (v16)
  {
    LODWORD(v17) = (v16 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    uint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
    uint64_t v19 = *v18;
    if (*v18 == v13) {
      goto LABEL_18;
    }
    int v20 = 1;
    while (v19 != (uint64_t ***)-4096)
    {
      int v21 = v17 + v20++;
      uint64_t v17 = v21 & (v16 - 1);
      uint64_t v19 = *(uint64_t ****)(v15 + 16 * v17);
      if (v19 == v13)
      {
        uint64_t v18 = (uint64_t ****)(v15 + 16 * v17);
        goto LABEL_18;
      }
    }
  }
  uint64_t v18 = (uint64_t ****)(v15 + 16 * v16);
LABEL_18:
  uint64_t v22 = v18[1];
  size_t v25 = (size_t)*v22;
  uint64_t v23 = (const char *)(v22 + 2);
  size_t v24 = v25;
  uint64_t v26 = (_WORD *)*((void *)v11 + 4);
  if (v25 > *((void *)v11 + 3) - (void)v26)
  {
    llvm::raw_ostream::write(v11, v23, v24);
LABEL_20:
    uint64_t v26 = (_WORD *)*((void *)v11 + 4);
    goto LABEL_23;
  }
  if (v24)
  {
    memcpy(v26, v23, v24);
    uint64_t v26 = (_WORD *)(*((void *)v11 + 4) + v24);
    *((void *)v11 + 4) = v26;
  }
LABEL_23:
  if (*((void *)v11 + 3) - (void)v26 > 1uLL)
  {
    *uint64_t v26 = 2618;
    *((void *)v11 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v11, ":\n", 2uLL);
  }
  uint64_t v27 = (int *)FunctionInfo[3];
  for (uint64_t i = (int *)FunctionInfo[4]; v27 != i; v27 += 4)
  {
    uint64_t v29 = *(llvm::raw_ostream **)(a1 + 32);
    uint64_t v30 = (unsigned char *)*((void *)v29 + 4);
    if (*((unsigned char **)v29 + 3) == v30)
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), "\t", 1uLL);
    }
    else
    {
      *uint64_t v30 = 9;
      ++*((void *)v29 + 4);
    }
    unint64_t v31 = *v27;
    if ((v31 & 0x80000000) != 0)
    {
      unint64_t v31 = -(uint64_t)v31;
      uint64_t v32 = v29;
      int v33 = 1;
    }
    else
    {
      uint64_t v32 = v29;
      int v33 = 0;
    }
    sub_1CD098D14(v32, v31, 0, 0, v33);
    unsigned int v34 = (unsigned char *)*((void *)v29 + 4);
    if (*((unsigned char **)v29 + 3) == v34)
    {
      llvm::raw_ostream::write(v29, "\t", 1uLL);
    }
    else
    {
      *unsigned int v34 = 9;
      ++*((void *)v29 + 4);
    }
    unint64_t v35 = v27[1];
    if ((v35 & 0x80000000) != 0)
    {
      unint64_t v35 = -(uint64_t)v35;
      unint64_t v36 = v29;
      int v37 = 1;
    }
    else
    {
      unint64_t v36 = v29;
      int v37 = 0;
    }
    sub_1CD098D14(v36, v35, 0, 0, v37);
    uint64_t v38 = *((void *)v29 + 4);
    if ((unint64_t)(*((void *)v29 + 3) - v38) > 4)
    {
      *(unsigned char *)(v38 + 4) = 10;
      *(_DWORD *)uint64_t v38 = 1567650651;
      *((void *)v29 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v29, "[sp]\n", 5uLL);
    }
  }
  uint64_t v39 = *(llvm::raw_ostream **)(a1 + 32);
  uint64_t v40 = *((void *)v39 + 4);
  if ((unint64_t)(*((void *)v39 + 3) - v40) > 0x12)
  {
    *(_DWORD *)(v40 + 15) = 544370534;
    *(_OWORD *)uint64_t v40 = *(_OWORD *)"GC safe points for ";
    *((void *)v39 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), "GC safe points for ", 0x13uLL);
  }
  unint64_t v41 = *FunctionInfo;
  if ((*((unsigned char *)*FunctionInfo + 23) & 0x10) == 0) {
    goto LABEL_55;
  }
  uint64_t v42 = ***v41;
  uint64_t v43 = *(void *)(v42 + 152);
  uint64_t v44 = *(unsigned int *)(v42 + 168);
  if (!v44) {
    goto LABEL_52;
  }
  LODWORD(v45) = (v44 - 1) & ((v41 >> 4) ^ (v41 >> 9));
  int v46 = (uint64_t ****)(v43 + 16 * v45);
  unsigned int v47 = *v46;
  if (*v46 != v41)
  {
    int v48 = 1;
    while (v47 != (uint64_t ***)-4096)
    {
      int v49 = v45 + v48++;
      uint64_t v45 = v49 & (v44 - 1);
      unsigned int v47 = *(uint64_t ****)(v43 + 16 * v45);
      if (v47 == v41)
      {
        int v46 = (uint64_t ****)(v43 + 16 * v45);
        goto LABEL_53;
      }
    }
LABEL_52:
    int v46 = (uint64_t ****)(v43 + 16 * v44);
  }
LABEL_53:
  uint64_t v50 = (size_t *)v46[1];
  size_t v53 = *v50;
  unint64_t v51 = v50 + 2;
  size_t v52 = v53;
  unsigned int v54 = (_WORD *)*((void *)v39 + 4);
  if (v53 <= *((void *)v39 + 3) - (void)v54)
  {
    if (v52)
    {
      memcpy(v54, v51, v52);
      unsigned int v54 = (_WORD *)(*((void *)v39 + 4) + v52);
      *((void *)v39 + 4) = v54;
    }
    goto LABEL_58;
  }
  llvm::raw_ostream::write(v39, (const char *)v51, v52);
LABEL_55:
  unsigned int v54 = (_WORD *)*((void *)v39 + 4);
LABEL_58:
  if (*((void *)v39 + 3) - (void)v54 > 1uLL)
  {
    *unsigned int v54 = 2618;
    *((void *)v39 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v39, ":\n", 2uLL);
  }
  uint64_t v55 = FunctionInfo[6];
  for (unint64_t j = FunctionInfo[7]; v55 != j; v55 += 2)
  {
    uint64_t v57 = *(llvm::raw_ostream **)(a1 + 32);
    unint64_t v58 = (unsigned char *)*((void *)v57 + 4);
    if (*((unsigned char **)v57 + 3) == v58)
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), "\t", 1uLL);
      unint64_t v59 = (_WORD *)*((void *)v57 + 4);
    }
    else
    {
      *unint64_t v58 = 9;
      unint64_t v59 = (_WORD *)(*((void *)v57 + 4) + 1);
      *((void *)v57 + 4) = v59;
    }
    if ((*(unsigned char *)*v55 & 4) != 0)
    {
      int v60 = (size_t *)*(*v55 - 1);
      size_t v63 = *v60;
      unint64_t v61 = v60 + 2;
      size_t v62 = v63;
      if (v63 <= *((void *)v57 + 3) - (void)v59)
      {
        if (v62)
        {
          memcpy(v59, v61, v62);
          unint64_t v59 = (_WORD *)(*((void *)v57 + 4) + v62);
          *((void *)v57 + 4) = v59;
        }
      }
      else
      {
        llvm::raw_ostream::write(v57, (const char *)v61, v62);
        unint64_t v59 = (_WORD *)*((void *)v57 + 4);
      }
    }
    if (*((void *)v57 + 3) - (void)v59 > 1uLL)
    {
      *unint64_t v59 = 8250;
      uint64_t v64 = *((void *)v57 + 4) + 2;
      *((void *)v57 + 4) = v64;
    }
    else
    {
      llvm::raw_ostream::write(v57, ": ", 2uLL);
      uint64_t v64 = *((void *)v57 + 4);
    }
    if ((unint64_t)(*((void *)v57 + 3) - v64) > 8)
    {
      *(unsigned char *)(v64 + 8) = 108;
      *(void *)uint64_t v64 = *(void *)"post-call";
      uint64_t v65 = *((void *)v57 + 4) + 9;
      *((void *)v57 + 4) = v65;
    }
    else
    {
      llvm::raw_ostream::write(v57, "post-call", 9uLL);
      uint64_t v65 = *((void *)v57 + 4);
    }
    if ((unint64_t)(*((void *)v57 + 3) - v65) > 9)
    {
      *(_WORD *)(v65 + 8) = 31520;
      *(void *)uint64_t v65 = *(void *)", live = {";
      *((void *)v57 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v57, ", live = {", 0xAuLL);
    }
    unint64_t v66 = (int *)FunctionInfo[3];
    int v67 = (int *)FunctionInfo[4];
    if (v66 != v67)
    {
      char v68 = 0;
      do
      {
        unint64_t v69 = *(llvm::raw_ostream **)(a1 + 32);
        size_t v70 = v68 & 1;
        int v71 = (unsigned char *)*((void *)v69 + 4);
        if (*((void *)v69 + 3) - (void)v71 >= v70)
        {
          if (v68)
          {
            memcpy(v71, ",", v70);
            int v71 = (unsigned char *)(*((void *)v69 + 4) + v70);
            *((void *)v69 + 4) = v71;
          }
        }
        else
        {
          if (v70) {
            uint64_t v72 = ",";
          }
          else {
            uint64_t v72 = 0;
          }
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), v72, v70);
          int v71 = (unsigned char *)*((void *)v69 + 4);
        }
        if (*((unsigned char **)v69 + 3) == v71)
        {
          llvm::raw_ostream::write(v69, " ", 1uLL);
        }
        else
        {
          unsigned char *v71 = 32;
          ++*((void *)v69 + 4);
        }
        unint64_t v73 = *v66;
        if ((v73 & 0x80000000) != 0)
        {
          unint64_t v73 = -(uint64_t)v73;
          unint64_t v74 = v69;
          int v75 = 1;
        }
        else
        {
          unint64_t v74 = v69;
          int v75 = 0;
        }
        sub_1CD098D14(v74, v73, 0, 0, v75);
        v66 += 4;
        char v68 = 1;
      }
      while (v66 != v67);
    }
    unint64_t v76 = *(llvm::raw_ostream **)(a1 + 32);
    uint64_t v77 = *((void *)v76 + 4);
    if ((unint64_t)(*((void *)v76 + 3) - v77) > 2)
    {
      *(unsigned char *)(v77 + 2) = 10;
      *(_WORD *)uint64_t v77 = 32032;
      *((void *)v76 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v76, " }\n", 3uLL);
    }
  }
  return 0;
}

void sub_1CC2AB2E8(void ***a1)
{
  int v1 = *a1;
  char v2 = (unsigned __int8 **)**a1;
  if (!v2) {
    return;
  }
  int v4 = (unsigned __int8 **)v1[1];
  uint64_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_21;
  }
  uint64_t v6 = v4 - 1;
  do
  {
    uint64_t v7 = *v6;
    if (!*v6) {
      goto LABEL_8;
    }
    int v8 = *v7;
    if ((v8 - 4) > 0x1E)
    {
      if ((v8 - 3) >= 0xFFFFFFFE) {
        uint64_t v10 = *v6;
      }
      else {
        uint64_t v10 = 0;
      }
      if ((v8 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v11 = (unint64_t)(v10 + 8);
LABEL_15:
        uint64_t v13 = v6;
        sub_1CC5FA668(v11 + 16, &v13);
        goto LABEL_8;
      }
      if (v8 == 3) {
        *((void *)v7 + 1) = 0;
      }
    }
    else if ((v7[1] & 0x7F) == 2 || *((_DWORD *)v7 + 3))
    {
      uint64_t v12 = *((void *)v7 + 2);
      if ((v12 & 4) != 0)
      {
        unint64_t v11 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v11) {
          goto LABEL_15;
        }
      }
    }
LABEL_8:
    unint64_t v9 = v6 - 1;
    v6 -= 2;
  }
  while (v9 != v2);
  uint64_t v5 = **a1;
LABEL_21:
  v1[1] = v2;

  operator delete(v5);
}

char *sub_1CC2AB3F8(char **a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    int v8 = (char *)operator new(8 * v7);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t v9 = &v8[8 * v2];
  uint64_t v10 = &v8[8 * v7];
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)unint64_t v9 = v11;
  uint64_t v12 = v9 + 8;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      uint64_t v15 = *((void *)v14 - 1);
      v14 -= 8;
      *(void *)uint64_t v14 = 0;
      *((void *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    uint64_t v14 = *a1;
    uint64_t v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      uint64_t v18 = (llvm::GCFunctionInfo *)*((void *)v16 - 1);
      v16 -= 8;
      uint64_t v17 = v18;
      *(void *)uint64_t v16 = 0;
      if (v18)
      {
        llvm::GCFunctionInfo::~GCFunctionInfo(v17);
        MEMORY[0x1D25D9CE0]();
      }
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

llvm::GCFunctionInfo *sub_1CC2AB510(llvm::GCFunctionInfo *result, void *a2)
{
  unint64_t v3 = result;
  int v4 = (void *)*((void *)result + 1);
  while (v4 != a2)
  {
    uint64_t v5 = (llvm::GCFunctionInfo *)*--v4;
    double result = v5;
    *int v4 = 0;
    if (v5)
    {
      llvm::GCFunctionInfo::~GCFunctionInfo(result);
      double result = (llvm::GCFunctionInfo *)MEMORY[0x1D25D9CE0]();
    }
  }
  *((void *)v3 + 1) = a2;
  return result;
}

uint64_t llvm::Registry<llvm::GCMetadataPrinter>::add_node(uint64_t result)
{
  int v1 = (uint64_t *)llvm::Registry<llvm::GCMetadataPrinter>::Tail;
  if (!llvm::Registry<llvm::GCMetadataPrinter>::Tail) {
    int v1 = &llvm::Registry<llvm::GCMetadataPrinter>::Head;
  }
  *int v1 = result;
  llvm::Registry<llvm::GCMetadataPrinter>::Tail = result;
  return result;
}

void *llvm::GCMetadataPrinter::GCMetadataPrinter(void *this)
{
  *this = &unk_1F260BEC0;
  return this;
}

{
  *this = &unk_1F260BEC0;
  return this;
}

void llvm::GCMetadataPrinter::~GCMetadataPrinter(llvm::GCMetadataPrinter *this)
{
}

uint64_t sub_1CC2AB60C()
{
  return 0;
}

void sub_1CC2AB614(llvm *a1, llvm::PassRegistry *a2)
{
}

void llvm::createGCLoweringPass(llvm *this)
{
}

uint64_t sub_1CC2AB6EC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61EEDB;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260BEF8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCBC78, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC2AB614;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCCBC78, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC2AB7A0()
{
}

void sub_1CC2AB83C()
{
}

void sub_1CC2AB87C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC2AB8B4()
{
  return "Lower Garbage Collection Instructions";
}

uint64_t sub_1CC2AB8C4(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::GCModuleInfo::ID, 1);
  if (AnalysisPass) {
    int v4 = (llvm::GCModuleInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::GCModuleInfo::ID);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = a2 + 24;
  for (uint64_t i = *(void *)(a2 + 32); i != v5; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v7 = i - 56;
    }
    else {
      uint64_t v7 = 0;
    }
    if (i && *(unsigned char *)(v7 + 16) == 3)
    {
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 0) {
        continue;
      }
LABEL_16:
      if ((*(_WORD *)(v7 + 18) & 0x4000) != 0) {
        llvm::GCModuleInfo::getFunctionInfo(v4, (llvm::LLVMContext ***)v7);
      }
      continue;
    }
    if (*(unsigned char *)(v7 + 16) || *(void *)(v7 + 72) != v7 + 72 || (*(unsigned char *)(v7 + 34) & 0x80) != 0) {
      goto LABEL_16;
    }
  }
  return 0;
}

void sub_1CC2AB9B8(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::GCModuleInfo::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CC2ABA08(uint64_t a1, uint64_t a2)
{
  v84[32] = *MEMORY[0x1E4F143B8];
  if ((*(_WORD *)(a2 + 18) & 0x4000) == 0) {
    goto LABEL_2;
  }
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_7:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::GCModuleInfo::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  unint64_t v9 = (llvm::GCModuleInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::GCModuleInfo::ID);
  llvm::GCModuleInfo::getFunctionInfo(v9, (llvm::LLVMContext ***)a2);
  unsigned int v82 = v84;
  uint64_t v83 = 0x2000000000;
  uint64_t v10 = *(void *)(a2 + 80);
  if (v10 == a2 + 72)
  {
LABEL_2:
    char v2 = 0;
    return v2 & 1;
  }
  char v2 = 0;
  do
  {
    uint64_t v11 = v10 - 24;
    if (!v10) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v11 + 40;
    uint64_t v13 = *(void *)(v11 + 48);
    if (v13 != v11 + 40)
    {
      do
      {
        uint64_t v14 = *(void *)(v13 + 8);
        uint64_t v15 = v13 - 24;
        if (v13) {
          uint64_t v16 = v13 - 24;
        }
        else {
          uint64_t v16 = 0;
        }
        if (*(unsigned char *)(v16 + 16) == 84)
        {
          uint64_t v17 = *(void *)(v16 - 32);
          if (v17)
          {
            if (!*(unsigned char *)(v17 + 16)
              && *(void *)(v17 + 24) == *(void *)(v16 + 72)
              && (*(unsigned char *)(v17 + 33) & 0x20) != 0)
            {
              int v18 = *(_DWORD *)(*(void *)(v13 - 56) + 36);
              switch(v18)
              {
                case 150:
                  uint64_t v22 = operator new(0x60uLL);
                  int v20 = (llvm::Value *)(v22 + 8);
                  v22[13] = v22[13] & 0x38000000 | 1;
                  *(void *)uint64_t v22 = 0;
                  *((void *)v22 + 1) = 0;
                  *((void *)v22 + 2) = 0;
                  *((void *)v22 + 3) = v22 + 8;
                  uint64_t v23 = *(llvm::Type **)(v13 - 24);
                  size_t v24 = *(llvm::Value **)(v15 - 32 * (*(_DWORD *)(v13 - 4) & 0x7FFFFFF) + 32);
                  v81[0] = 257;
                  Inst = (int32x2_t ****)llvm::LoadInst::LoadInst((llvm::LoadInst *)(v22 + 8), v23, v24, (const char **)&v77, 0, (llvm::Instruction *)(v13 - 24));
                  llvm::Value::takeName(Inst, (llvm::Value *)(v13 - 24));
LABEL_29:
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v13 - 24), v20, (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                case 151:
                  uint64_t v26 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v15 - 32 * (*(_DWORD *)(v13 - 4) & 0x7FFFFFF)));
                  if (v83 >= (unint64_t)HIDWORD(v83)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v82 + v83) = v26;
                  LODWORD(v83) = v83 + 1;
                  break;
                case 152:
                  uint64_t v19 = operator new(0x80uLL);
                  int v20 = (llvm::Value *)(v19 + 16);
                  v19[21] = v19[21] & 0x38000000 | 2;
                  *(void *)uint64_t v19 = 0;
                  *((void *)v19 + 1) = 0;
                  *((void *)v19 + 2) = 0;
                  *((void *)v19 + 3) = v19 + 16;
                  *((void *)v19 + 4) = 0;
                  *((void *)v19 + 5) = 0;
                  *((void *)v19 + 6) = 0;
                  *((void *)v19 + 7) = v19 + 16;
                  uint64_t v21 = v15 - 32 * (*(_DWORD *)(v13 - 4) & 0x7FFFFFF);
                  llvm::StoreInst::StoreInst((llvm::StoreInst *)(v19 + 16), *(llvm::Type ***)v21, *(llvm::Value **)(v21 + 64), 0, (llvm::Instruction *)(v13 - 24));
                  goto LABEL_29;
              }
            }
          }
        }
        uint64_t v13 = v14;
      }
      while (v14 != v12);
    }
    uint64_t v10 = *(void *)(v10 + 8);
  }
  while (v10 != a2 + 72);
  uint64_t v27 = v83;
  uint64_t v28 = (uint64_t *)v82;
  if (!v83) {
    goto LABEL_138;
  }
  uint64_t v29 = *(void *)(a2 + 80);
  if (v29) {
    uint64_t v30 = v29 - 24;
  }
  else {
    uint64_t v30 = 0;
  }
  unint64_t v31 = (uint64_t *)(v30 + 48);
  do
  {
    uint64_t v32 = *v31;
    uint64_t v33 = *v31 - 24;
    if (!v32) {
      uint64_t v33 = 0;
    }
    int v34 = *(unsigned __int8 *)(v33 + 16);
    unint64_t v31 = (uint64_t *)(v32 + 8);
  }
  while (v34 == 59);
  uint64_t v77 = (char *)v81;
  unsigned int v78 = (char *)v81;
  uint64_t v79 = 16;
  int v80 = 0;
  while (1)
  {
    uint64_t v35 = v32 - 24;
    if (!v32) {
      uint64_t v35 = 0;
    }
    int v36 = *(unsigned __int8 *)(v35 + 16);
    if ((v36 - 59) >= 4) {
      break;
    }
    if (!v32) {
      goto LABEL_66;
    }
    if (v36 != 61) {
      goto LABEL_66;
    }
    int v37 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v35 - 32));
    if (!v37) {
      goto LABEL_66;
    }
    uint64_t v38 = v37;
    if (*((unsigned char *)v37 + 16) != 59) {
      goto LABEL_66;
    }
    uint64_t v39 = v78;
    uint64_t v40 = HIDWORD(v79);
    if (v78 != v77)
    {
      unsigned int v44 = v79;
      goto LABEL_68;
    }
    if (!HIDWORD(v79))
    {
LABEL_58:
      unsigned int v44 = v79;
      if (HIDWORD(v79) < v79)
      {
        ++HIDWORD(v79);
        *(void *)&v78[8 * v40] = v37;
        goto LABEL_66;
      }
LABEL_68:
      if (3 * v44 <= 4 * (HIDWORD(v79) - v80))
      {
        if (v44 >= 0x40) {
          v44 *= 2;
        }
        else {
          unsigned int v44 = 128;
        }
      }
      else if (v44 - HIDWORD(v79) >= v44 >> 3)
      {
        goto LABEL_70;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v77, v44);
      unsigned int v44 = v79;
      uint64_t v39 = v78;
LABEL_70:
      unsigned int v46 = v44 - 1;
      unsigned int v47 = (v44 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      int v48 = &v39[8 * v47];
      int v49 = *(llvm::Value **)v48;
      if (*(void *)v48 == -1)
      {
        uint64_t v50 = 0;
LABEL_82:
        if (v50) {
          unsigned int v54 = (llvm::Value **)v50;
        }
        else {
          unsigned int v54 = (llvm::Value **)v48;
        }
        if (*v54 != v38)
        {
          if (*v54 == (llvm::Value *)-2) {
            --v80;
          }
          else {
            ++HIDWORD(v79);
          }
          *unsigned int v54 = v38;
        }
      }
      else
      {
        uint64_t v50 = 0;
        int v51 = 1;
        while (v49 != v38)
        {
          if (v50) {
            BOOL v52 = 0;
          }
          else {
            BOOL v52 = v49 == (llvm::Value *)-2;
          }
          if (v52) {
            uint64_t v50 = v48;
          }
          unsigned int v53 = v47 + v51++;
          unsigned int v47 = v53 & v46;
          int v48 = &v39[8 * (v53 & v46)];
          int v49 = *(llvm::Value **)v48;
          if (*(void *)v48 == -1) {
            goto LABEL_82;
          }
        }
      }
      goto LABEL_66;
    }
    unint64_t v41 = 0;
    uint64_t v42 = 8 * HIDWORD(v79);
    uint64_t v43 = v78;
    while (*(llvm::Value **)v43 != v37)
    {
      if (*(void *)v43 == -2) {
        unint64_t v41 = (llvm::Value **)v43;
      }
      v43 += 8;
      v42 -= 8;
      if (!v42)
      {
        if (!v41) {
          goto LABEL_58;
        }
        char *v41 = v37;
        --v80;
        break;
      }
    }
LABEL_66:
    uint64_t v32 = *(void *)(v32 + 8);
  }
  if (v32)
  {
    if (v36 == 84)
    {
      uint64_t v45 = *(void *)(v35 - 32);
      if (v45)
      {
        if (!*(unsigned char *)(v45 + 16) && *(void *)(v45 + 24) == *(void *)(v35 + 72) && *(_DWORD *)(v45 + 36) == 151) {
          goto LABEL_66;
        }
      }
    }
  }
  char v55 = 0;
  unsigned int v56 = &v28[v27];
  do
  {
    uint64_t v57 = *v28;
    unint64_t v58 = v77;
    if (v78 == v77)
    {
      int v59 = HIDWORD(v79);
      int v60 = &v78[8 * HIDWORD(v79)];
      if (HIDWORD(v79))
      {
        uint64_t v61 = 0;
        while (*(void *)&v78[v61] != v57)
        {
          v61 += 8;
          if (8 * HIDWORD(v79) == v61) {
            goto LABEL_115;
          }
        }
        int v60 = &v78[v61];
      }
LABEL_115:
      unint64_t v58 = v78;
    }
    else
    {
      int v62 = v79 - 1;
      unsigned int v63 = (v79 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      int v60 = &v78[8 * v63];
      uint64_t v64 = *(void *)v60;
      if (*(void *)v60 == -1)
      {
        uint64_t v65 = 0;
LABEL_130:
        if (v65) {
          int v60 = v65;
        }
        int v59 = HIDWORD(v79);
        if (*(void *)v60 != v57) {
          int v60 = &v78[8 * v79];
        }
      }
      else
      {
        uint64_t v65 = 0;
        int v66 = 1;
        while (v64 != v57)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == -2;
          }
          if (v67) {
            uint64_t v65 = v60;
          }
          unsigned int v68 = v63 + v66++;
          unsigned int v63 = v68 & v62;
          int v60 = &v78[8 * (v68 & v62)];
          uint64_t v64 = *(void *)v60;
          if (*(void *)v60 == -1) {
            goto LABEL_130;
          }
        }
        int v59 = HIDWORD(v79);
      }
    }
    if (v78 == v58) {
      int v69 = v59;
    }
    else {
      int v69 = v79;
    }
    if (v60 == &v78[8 * v69])
    {
      size_t v70 = operator new(0x80uLL);
      int v71 = (llvm::StoreInst *)(v70 + 16);
      v70[21] = v70[21] & 0x38000000 | 2;
      *(void *)size_t v70 = 0;
      *((void *)v70 + 1) = 0;
      *((void *)v70 + 2) = 0;
      *((void *)v70 + 3) = v70 + 16;
      *((void *)v70 + 4) = 0;
      *((void *)v70 + 5) = 0;
      *((void *)v70 + 6) = 0;
      *((void *)v70 + 7) = v70 + 16;
      unint64_t v73 = (llvm::Type **)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v57 + 64), v72);
      uint64_t v74 = *(void *)(v57 + 32);
      if (v74) {
        BOOL v75 = v74 == *(void *)(v57 + 40) + 40;
      }
      else {
        BOOL v75 = 1;
      }
      if (v75) {
        unint64_t v76 = 0;
      }
      else {
        unint64_t v76 = (llvm::Instruction *)(v74 - 24);
      }
      llvm::StoreInst::StoreInst(v71, v73, (llvm::Value *)v57, 0, v76);
      char v55 = 1;
    }
    ++v28;
  }
  while (v28 != v56);
  if (v78 != v77) {
    free(v78);
  }
  char v2 = v55;
  uint64_t v28 = (uint64_t *)v82;
LABEL_138:
  if (v28 != v84) {
    free(v28);
  }
  return v2 & 1;
}

void sub_1CC2AC0F0()
{
}

void sub_1CC2AC194(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  char v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  unint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC2AC248(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  char v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2AC2F4(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  *(unsigned char *)(a2 + 160) = 1;

  sub_1CB843600(a2, a2, (uint64_t)&llvm::GCModuleInfo::ID);
}

uint64_t sub_1CC2AC340(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(*(void *)a2 + 18) & 0x4000) == 0) {
    return 0;
  }
  uint64_t v4 = a1;
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::GCModuleInfo::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  unint64_t v9 = (llvm::GCModuleInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::GCModuleInfo::ID);
  *(void *)(v4 + 248) = llvm::GCModuleInfo::getFunctionInfo(v9, *(llvm::LLVMContext ****)a2);
  *(void *)(v4 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  if (!*(unsigned char *)(v10 + 36))
  {
    uint64_t v14 = v11;
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 440))(v11, a2))
    {
      char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 432))(v14, a2);
      uint64_t v12 = *(void *)(v4 + 248);
      if (v15) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v4 + 248);
    }
    uint64_t v13 = *(void *)(v10 + 48);
    goto LABEL_16;
  }
  uint64_t v12 = *(void *)(v4 + 248);
LABEL_10:
  uint64_t v13 = -1;
LABEL_16:
  *(void *)(v12 + 16) = v13;
  uint64_t v58 = v4;
  if (!*(unsigned char *)(*(void *)(v12 + 8) + 33)) {
    goto LABEL_77;
  }
  uint64_t v16 = *(void *)(a2 + 328);
  if (v16 == a2 + 320) {
    goto LABEL_77;
  }
  do
  {
    for (uint64_t i = *(void *)(v16 + 56); i != v16 + 48; uint64_t i = *(void *)(i + 8))
    {
      __int16 v18 = *(_WORD *)(i + 44);
      uint64_t v19 = *(void *)(*(void *)(i + 16) + 8);
      if ((v18 & 0xC) == 0 || (v18 & 4) != 0)
      {
        if ((*(void *)(*(void *)(i + 16) + 8) & 0x280) != 0x80) {
          goto LABEL_25;
        }
        goto LABEL_38;
      }
      uint64_t v21 = i;
      if ((v19 & 0x80) != 0)
      {
LABEL_33:
        if ((v19 & 0x200) != 0) {
          goto LABEL_25;
        }
        uint64_t v22 = i;
        while ((*(_WORD *)(v22 + 44) & 8) != 0)
        {
          uint64_t v22 = *(void *)(v22 + 8);
          if ((*(unsigned char *)(*(void *)(v22 + 16) + 9) & 2) != 0) {
            goto LABEL_25;
          }
        }
LABEL_38:
        uint64_t v23 = i;
        if ((v18 & 8) != 0)
        {
          uint64_t v23 = i;
          if ((*(void *)i & 4) == 0)
          {
            uint64_t v23 = i;
            do
              uint64_t v23 = *(void *)(v23 + 8);
            while ((*(_WORD *)(v23 + 44) & 8) != 0);
          }
        }
        size_t v24 = *(unint64_t **)(v23 + 8);
        uint64_t v25 = *(void *)(i + 24);
        uint64_t v26 = *(llvm::MCContext **)(*(void *)(v25 + 32) + 24);
        v60[0] = "tmp";
        __int16 v62 = 259;
        uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v26, (const llvm::Twine *)v60, 1);
        uint64_t v28 = *(void *)(*(void *)(v4 + 256) + 8);
        uint64_t v29 = *(llvm::MachineFunction **)(v25 + 32);
        uint64_t v30 = *(unsigned __int8 **)(i + 56);
        int v59 = v30;
        if (v30) {
          llvm::MetadataTracking::track((uint64_t)&v59, v30, 2);
        }
        unint64_t v31 = llvm::MachineFunction::CreateMachineInstr(v29, v28 + 240, &v59, 0);
        if (v59)
        {
          int v44 = *v59;
          if ((v44 - 4) > 0x1E)
          {
            if ((v44 - 3) >= 0xFFFFFFFE) {
              unsigned int v47 = v59;
            }
            else {
              unsigned int v47 = 0;
            }
            if ((v44 - 3) < 0xFFFFFFFE)
            {
              if (v44 == 3) {
                *((void *)v59 + 1) = 0;
              }
              goto LABEL_45;
            }
            unint64_t v46 = (unint64_t)(v47 + 8);
          }
          else
          {
            if ((v59[1] & 0x7F) != 2 && !*((_DWORD *)v59 + 3)) {
              goto LABEL_45;
            }
            uint64_t v45 = *((void *)v59 + 2);
            if ((v45 & 4) == 0) {
              goto LABEL_45;
            }
            unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
            if (!v46) {
              goto LABEL_45;
            }
          }
          v60[0] = &v59;
          sub_1CC5FA668(v46 + 16, v60);
        }
LABEL_45:
        uint64_t v32 = *(void *)(v25 + 40);
        *((void *)v31 + 3) = v32;
        uint64_t v33 = *(void *)(v32 + 32);
        uint64_t v34 = *((unsigned int *)v31 + 10);
        if (v34)
        {
          uint64_t v37 = *((void *)v31 + 4);
          uint64_t v38 = *(void *)(v33 + 40);
          uint64_t v39 = 32 * v34;
          do
          {
            if (!*(unsigned char *)v37)
            {
              uint64_t v40 = *(unsigned int *)(v37 + 4);
              if ((int)v40 >= 0) {
                unint64_t v41 = (uint64_t *)(*(void *)(v38 + 272) + 8 * v40);
              }
              else {
                unint64_t v41 = (uint64_t *)(*(void *)(v38 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
              }
              uint64_t v42 = *v41;
              if (*v41)
              {
                uint64_t v43 = *(void *)(v42 + 16);
                *(void *)(v42 + 16) = v37;
                *(void *)(v37 + 16) = v43;
                if (*(unsigned char *)(v37 + 3))
                {
                  *(void *)(v37 + 24) = v42;
                }
                else
                {
                  *(void *)(v37 + 24) = 0;
                  unint64_t v41 = (uint64_t *)(v43 + 24);
                }
              }
              else
              {
                *(void *)(v37 + 16) = v37;
                *(void *)(v37 + 24) = 0;
              }
              uint64_t *v41 = v37;
            }
            v37 += 32;
            v39 -= 32;
          }
          while (v39);
        }
        uint64_t v35 = *(void *)(v33 + 728);
        if (v35) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v35 + 24))(v35, v31);
        }
        unint64_t v36 = *v24 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v31 = v36 | *(void *)v31 & 7;
        *((void *)v31 + 1) = v24;
        *(void *)(v36 + 8) = v31;
        *size_t v24 = *v24 & 7 | (unint64_t)v31;
        v60[1] = 0;
        v60[2] = TempSymbol;
        int v61 = 0;
        v60[0] = 15;
        llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)v60);
        uint64_t v4 = v58;
        sub_1CD515B20((uint64_t *)(*(void *)(v58 + 248) + 48), TempSymbol, *(unsigned __int8 **)(i + 56));
        goto LABEL_25;
      }
      while ((*(_WORD *)(v21 + 44) & 8) != 0)
      {
        uint64_t v21 = *(void *)(v21 + 8);
        if ((*(unsigned char *)(*(void *)(v21 + 16) + 8) & 0x80) != 0) {
          goto LABEL_33;
        }
      }
LABEL_25:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    uint64_t v16 = *(void *)(v16 + 8);
  }
  while (v16 != a2 + 320);
LABEL_77:
  uint64_t v48 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 112))(*(void *)(a2 + 16));
  uint64_t v49 = *(void *)(v4 + 248);
  uint64_t v50 = *(char **)(v49 + 24);
  unsigned int v53 = *(char **)(v49 + 32);
  BOOL v52 = (void *)(v49 + 32);
  int v51 = v53;
  if (v50 != v53)
  {
    uint64_t v54 = v48;
    do
    {
      if (*(void *)(*(void *)(*(void *)(a2 + 56) + 8)
                     + 40 * (*(_DWORD *)(*(void *)(a2 + 56) + 32) + *(_DWORD *)v50)
                     + 8) == -1)
      {
        int64_t v55 = v51 - (v50 + 16);
        if (v51 != v50 + 16) {
          memmove(v50, v50 + 16, v51 - (v50 + 16));
        }
        *BOOL v52 = &v50[v55];
        uint64_t v4 = v58;
      }
      else
      {
        LODWORD(v60[0]) = 0;
        *((_DWORD *)v50 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v54 + 232))(v54, a2);
        v50 += 16;
      }
      uint64_t v56 = *(void *)(v4 + 248);
      uint64_t v57 = *(char **)(v56 + 32);
      BOOL v52 = (void *)(v56 + 32);
      int v51 = v57;
    }
    while (v50 != v57);
  }
  return 0;
}

uint64_t sub_1CC2AC904(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 3 > v4) {
    unint64_t v4 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v4;
  }
  uint64_t v17 = a1 + 2;
  if (v9)
  {
    if (v9 >> 60) {
      sub_1CB833614();
    }
    uint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[16 * v3];
  uint64_t v16 = &v10[16 * v9];
  sub_1CC2AC9F0(v14, a2, a3);
  char v15 = v14 + 16;
  sub_1CD515B68(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1CD515C24((uint64_t)&v13);
  return v11;
}

void *sub_1CC2AC9F0(void *result, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = result;
  uint64_t v7 = a3;
  if (a3)
  {
    double result = (void *)llvm::MetadataTracking::track((uint64_t)&v7, a3, 2);
    uint64_t v5 = v7;
    *unint64_t v4 = a2;
    v4[1] = v5;
    uint64_t v6 = (uint64_t)(v4 + 1);
    if (v5) {
      return (void *)llvm::MetadataTracking::retrack((uint64_t)&v7, v5, v6);
    }
  }
  else
  {
    *double result = a2;
    result[1] = 0;
  }
  return result;
}

void llvm::initializeGlobalMergePass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCBC90, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC2ACAC8;
    v3[1] = &v1;
    char v2 = v3;
    std::__call_once(&qword_1EBCCBC90, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC2ACAC8()
{
}

void llvm::createGlobalMergePass(llvm *this, const llvm::TargetMachine *a2)
{
}

void sub_1CC2ACC84()
{
}

void sub_1CC2ACD74(llvm::Pass *this)
{
  *(void *)this = &unk_1F260C058;
  char v2 = (void *)*((void *)this + 7);
  if (v2 != *((void **)this + 6)) {
    free(v2);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC2ACDD8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260C058;
  char v2 = (void *)*((void *)this + 7);
  if (v2 != *((void **)this + 6)) {
    free(v2);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC2ACE50()
{
  return "Merge internal globals";
}

uint64_t sub_1CC2ACE60(uint64_t a1, uint64_t a2)
{
  if (!byte_1EBCCBD18)
  {
    LOBYTE(v116) = 0;
    return v116 & 1;
  }
  __int16 v144 = 260;
  uint64_t v141 = a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)&v145, (const llvm::Twine *)&v141);
  *(unsigned char *)(a1 + 46) = v149 == 5;
  if (v148 < 0) {
    operator delete(v145);
  }
  unsigned int v145 = 0;
  uint64_t v146 = 0;
  unsigned int v147 = 0;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  unsigned int v143 = 0;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  unsigned int v140 = 0;
  sub_1CC2AE660(a1, *(uint64_t **)(a2 + 112), "llvm.used", 9uLL);
  sub_1CC2AE660(a1, *(uint64_t **)(a2 + 112), "llvm.compiler.used", 0x12uLL);
  unsigned int v131 = (void *)a2;
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v133 = a2 + 24;
  while (v4 != v133)
  {
    uint64_t v5 = v4 - 56;
    if (!v4) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = v5 + 72;
    for (uint64_t i = *(void *)(v5 + 80); i != v6; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v8 = i - 24;
      if (!i) {
        uint64_t v8 = 0;
      }
      for (uint64_t j = *(void *)(v8 + 48); ; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v10 = j - 24;
        if (!j) {
          uint64_t v10 = 0;
        }
        if (*(unsigned char *)(v10 + 16) != 83) {
          break;
        }
      }
      unsigned int v11 = *(unsigned __int8 *)(j - 8) - 38;
      BOOL v12 = v11 > 0x38;
      uint64_t v13 = (1 << v11) & 0x100060000000001;
      if (!v12 && v13 != 0)
      {
        int v15 = *(_DWORD *)(j - 4);
        if ((v15 & 0x40000000) != 0)
        {
          uint64_t v17 = *(llvm::Value ***)(j - 32);
          uint64_t v16 = v15 & 0x7FFFFFF;
          if (!v16) {
            continue;
          }
LABEL_24:
          __int16 v18 = &v17[4 * v16];
LABEL_25:
          uint64_t v19 = llvm::Value::stripPointerCasts(*v17);
          if (v19) {
            BOOL v20 = *((unsigned char *)v19 + 16) == 3;
          }
          else {
            BOOL v20 = 0;
          }
          if (!v20)
          {
LABEL_62:
            v17 += 4;
            if (v17 == v18) {
              continue;
            }
            goto LABEL_25;
          }
          uint64_t v21 = v19;
          uint64_t v22 = *(void *)(a1 + 56);
          uint64_t v23 = *(unsigned int *)(a1 + 68);
          if (v22 == *(void *)(a1 + 48))
          {
            if (v23)
            {
              size_t v24 = 0;
              uint64_t v25 = 8 * v23;
              uint64_t v26 = *(llvm::Value ***)(a1 + 56);
              while (*v26 != v19)
              {
                if (*v26 == (llvm::Value *)-2) {
                  size_t v24 = v26;
                }
                ++v26;
                v25 -= 8;
                if (!v25)
                {
                  if (!v24) {
                    goto LABEL_38;
                  }
                  *size_t v24 = v19;
                  --*(_DWORD *)(a1 + 72);
                  goto LABEL_62;
                }
              }
              goto LABEL_62;
            }
LABEL_38:
            unsigned int v27 = *(_DWORD *)(a1 + 64);
            if (v23 < v27)
            {
              *(_DWORD *)(a1 + 68) = v23 + 1;
              *(void *)(v22 + 8 * v23) = v19;
              goto LABEL_62;
            }
          }
          else
          {
            unsigned int v27 = *(_DWORD *)(a1 + 64);
          }
          if (3 * v27 <= 4 * ((int)v23 - *(_DWORD *)(a1 + 72)))
          {
            if (v27 >= 0x40) {
              v27 *= 2;
            }
            else {
              unsigned int v27 = 128;
            }
          }
          else if (v27 - v23 >= v27 >> 3)
          {
            goto LABEL_43;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 48), v27);
          unsigned int v27 = *(_DWORD *)(a1 + 64);
          uint64_t v22 = *(void *)(a1 + 56);
LABEL_43:
          unsigned int v28 = v27 - 1;
          unsigned int v29 = (v27 - 1) & ((v21 >> 4) ^ (v21 >> 9));
          uint64_t v30 = (llvm::Value **)(v22 + 8 * v29);
          unint64_t v31 = *v30;
          if (*v30 == (llvm::Value *)-1)
          {
            uint64_t v32 = 0;
LABEL_55:
            if (v32) {
              unint64_t v36 = v32;
            }
            else {
              unint64_t v36 = v30;
            }
            if (*v36 != v21)
            {
              if (*v36 == (llvm::Value *)-2) {
                --*(_DWORD *)(a1 + 72);
              }
              else {
                ++*(_DWORD *)(a1 + 68);
              }
              *unint64_t v36 = v21;
            }
          }
          else
          {
            uint64_t v32 = 0;
            int v33 = 1;
            while (v31 != v21)
            {
              if (v32) {
                BOOL v34 = 0;
              }
              else {
                BOOL v34 = v31 == (llvm::Value *)-2;
              }
              if (v34) {
                uint64_t v32 = v30;
              }
              unsigned int v35 = v29 + v33++;
              unsigned int v29 = v35 & v28;
              uint64_t v30 = (llvm::Value **)(v22 + 8 * (v35 & v28));
              unint64_t v31 = *v30;
              if (*v30 == (llvm::Value *)-1) {
                goto LABEL_55;
              }
            }
          }
          goto LABEL_62;
        }
        uint64_t v16 = v15 & 0x7FFFFFF;
        uint64_t v17 = (llvm::Value **)(j - 32 * v16 - 24);
        if (v16) {
          goto LABEL_24;
        }
      }
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  uint64_t v37 = (const llvm::Module *)v131;
  uint64_t v38 = (void *)v131[2];
  if (v38 == v131 + 1)
  {
    int v114 = 0;
    goto LABEL_187;
  }
  unsigned int v134 = (llvm::DataLayout *)(v131 + 34);
  do
  {
    if (v38) {
      uint64_t v39 = (uint64_t ***)(v38 - 7);
    }
    else {
      uint64_t v39 = 0;
    }
    if (v38 && *((unsigned char *)v39 + 16) == 3)
    {
      if ((*((_DWORD *)v39 + 5) & 0x7FFFFFF) == 0) {
        goto LABEL_175;
      }
    }
    else if (!*((unsigned char *)v39 + 16) && v39[9] == (uint64_t **)(v39 + 9) && (*((unsigned char *)v39 + 34) & 0x80) == 0)
    {
      goto LABEL_175;
    }
    if ((*((unsigned char *)v39 + 33) & 0x1C) == 0 && (sub_1CC2AD970((uint64_t)v39) & 1) == 0)
    {
      uint64_t v40 = *(llvm::TargetMachine **)(a1 + 32);
      if (!v40 || llvm::TargetMachine::shouldAssumeDSOLocal(v40, v37, (const llvm::GlobalValue *)v39))
      {
        int v41 = *((_DWORD *)v39 + 8);
        BOOL v42 = (v41 & 0xF) != 0 || *(unsigned char *)(a1 + 45) == 0;
        if (!v42 || (v39[4] & 0xF) == 7)
        {
          unsigned int v44 = *((_DWORD *)*v39 + 2);
          unsigned int v45 = v39 >> 4;
          if ((v41 & 0x400000) == 0)
          {
            unint64_t v46 = 0;
            unsigned int v47 = 0;
            goto LABEL_100;
          }
          uint64_t v48 = ***v39;
          v136.i64[0] = (uint64_t)v39;
          int v49 = *(_DWORD *)(v48 + 2520);
          if (v49)
          {
            uint64_t v50 = *(void *)(v48 + 2504);
            int v51 = v49 - 1;
            unsigned int v52 = v51 & (v45 ^ (v39 >> 9));
            unsigned int v53 = (uint64_t ****)(v50 + 24 * v52);
            uint64_t v54 = *v53;
            if (*v53 == v39)
            {
LABEL_99:
              unint64_t v46 = (llvm::SmallPtrSetImplBase *)v53[1];
              unsigned int v47 = v53[2];
LABEL_100:
              if ((*((unsigned char *)v39 + 23) & 0x10) == 0)
              {
LABEL_125:
                uint64_t v77 = *(void *)(a1 + 48);
                uint64_t v76 = *(void *)(a1 + 56);
                if (v76 == v77)
                {
                  uint64_t v78 = *(unsigned int *)(a1 + 68);
                  uint64_t v79 = (uint64_t ****)(v76 + 8 * v78);
                  if (v78)
                  {
                    uint64_t v80 = 0;
                    uint64_t v81 = 8 * v78;
                    while (*(uint64_t ****)(v76 + v80) != v39)
                    {
                      v80 += 8;
                      if (v81 == v80) {
                        goto LABEL_145;
                      }
                    }
                    uint64_t v79 = (uint64_t ****)(v76 + v80);
                  }
LABEL_145:
                  uint64_t v77 = *(void *)(a1 + 56);
                }
                else
                {
                  uint64_t v82 = *(unsigned int *)(a1 + 64);
                  int v83 = v82 - 1;
                  unsigned int v84 = (v82 - 1) & (v45 ^ (v39 >> 9));
                  uint64_t v79 = (uint64_t ****)(v76 + 8 * v84);
                  int v85 = *v79;
                  if (*v79 == (uint64_t ***)-1)
                  {
                    uint64_t v86 = 0;
LABEL_168:
                    if (v86) {
                      uint64_t v79 = v86;
                    }
                    if (*v79 != v39) {
                      uint64_t v79 = (uint64_t ****)(v76 + 8 * v82);
                    }
                  }
                  else
                  {
                    uint64_t v86 = 0;
                    int v87 = 1;
                    while (v85 != v39)
                    {
                      if (v86) {
                        BOOL v88 = 0;
                      }
                      else {
                        BOOL v88 = v85 == (uint64_t ***)-2;
                      }
                      if (v88) {
                        uint64_t v86 = v79;
                      }
                      unsigned int v89 = v84 + v87++;
                      unsigned int v84 = v89 & v83;
                      uint64_t v79 = (uint64_t ****)(v76 + 8 * (v89 & v83));
                      int v85 = *v79;
                      if (*v79 == (uint64_t ***)-1) {
                        goto LABEL_168;
                      }
                    }
                  }
                }
                if (v76 == v77) {
                  int64_t v90 = (unsigned int *)(a1 + 68);
                }
                else {
                  int64_t v90 = (unsigned int *)(a1 + 64);
                }
                if (v79 == (uint64_t ****)(v76 + 8 * *v90))
                {
                  uint64_t v130 = v47;
                  unsigned int v132 = v46;
                  unsigned int v129 = v44;
                  int v91 = (llvm::Type *)v39[3];
                  uint64_t v92 = sub_1CB83544C((uint64_t)v134, (uint64_t)v91);
                  BOOL v94 = v93 == 1;
                  char Alignment = llvm::DataLayout::getAlignment(v134, v91, 1);
                  if (v94)
                  {
                    char v113 = Alignment;
                    char Alignment = v113;
                  }
                  BOOL v98 = (((1 << Alignment) + ((unint64_t)(v92 + 7) >> 3) - 1) & -(1 << Alignment)) >= *(unsigned int *)(a1 + 40);
                  uint64_t v37 = (const llvm::Module *)v131;
                  uint64_t v99 = v132;
                  unsigned int v100 = v130;
                  if (!v98)
                  {
                    int v101 = *(const llvm::GlobalObject **)(a1 + 32);
                    if (v101
                      && (KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal((llvm::TargetLoweringObjectFile *)v39, v101, v97), uint64_t v99 = v132, v100 = v130, KindForGlobal - 15 <= 2))
                    {
                      v136.i32[0] = v129 >> 8;
                      v136.i64[1] = (uint64_t)v132;
                      uint64_t v137 = v130;
                      unint64_t v103 = &v138;
                    }
                    else if ((_BYTE)v39[10])
                    {
                      v136.i32[0] = v129 >> 8;
                      v136.i64[1] = (uint64_t)v99;
                      uint64_t v137 = v100;
                      unint64_t v103 = &v141;
                    }
                    else
                    {
                      v136.i32[0] = v129 >> 8;
                      v136.i64[1] = (uint64_t)v99;
                      uint64_t v137 = v100;
                      unint64_t v103 = (uint64_t *)&v145;
                    }
                    uint64_t v108 = sub_1CC2AE974((uint64_t)v103, (uint64_t)&v136);
                    unint64_t v109 = *(unsigned int *)(v108 + 32);
                    if (v109 >= *(unsigned int *)(v108 + 36)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*(void *)(v108 + 24) + 8 * v109) = v39;
                    ++*(_DWORD *)(v108 + 32);
                  }
                }
                goto LABEL_175;
              }
              uint64_t v55 = ***v39;
              uint64_t v56 = *(void *)(v55 + 152);
              uint64_t v57 = *(unsigned int *)(v55 + 168);
              if (v57)
              {
                LODWORD(v58) = (v57 - 1) & (v45 ^ (v39 >> 9));
                int v59 = (uint64_t ****)(v56 + 16 * v58);
                int v60 = *v59;
                if (*v59 == v39)
                {
LABEL_108:
                  unsigned int v63 = v59[1];
                  if ((unint64_t)*v63 >= 5)
                  {
                    int v64 = *((_DWORD *)v63 + 4);
                    int v65 = *((unsigned __int8 *)v63 + 20);
                    if (v64 == 1836477548 && v65 == 46) {
                      goto LABEL_175;
                    }
                  }
                  if (v57)
                  {
                    LODWORD(v67) = (v57 - 1) & (v45 ^ (v39 >> 9));
                    unsigned int v68 = (uint64_t ****)(v56 + 16 * v67);
                    int v69 = *v68;
                    if (*v68 == v39)
                    {
LABEL_120:
                      uint64_t v72 = v68[1];
                      if ((unint64_t)*v72 >= 6)
                      {
                        int v73 = *((_DWORD *)v72 + 4);
                        int v74 = *((unsigned __int16 *)v72 + 10);
                        if (v73 == 1986817070 && v74 == 11885) {
                          goto LABEL_175;
                        }
                      }
                      goto LABEL_125;
                    }
                    int v70 = 1;
                    while (v69 != (uint64_t ***)-4096)
                    {
                      int v71 = v67 + v70++;
                      uint64_t v67 = v71 & (v57 - 1);
                      int v69 = *(uint64_t ****)(v56 + 16 * v67);
                      if (v69 == v39)
                      {
                        unsigned int v68 = (uint64_t ****)(v56 + 16 * v67);
                        goto LABEL_120;
                      }
                    }
                  }
                  unsigned int v68 = (uint64_t ****)(v56 + 16 * v57);
                  goto LABEL_120;
                }
                int v61 = 1;
                while (v60 != (uint64_t ***)-4096)
                {
                  int v62 = v58 + v61++;
                  uint64_t v58 = v62 & (v57 - 1);
                  int v60 = *(uint64_t ****)(v56 + 16 * v58);
                  if (v60 == v39)
                  {
                    int v59 = (uint64_t ****)(v56 + 16 * v58);
                    goto LABEL_108;
                  }
                }
              }
              int v59 = (uint64_t ****)(v56 + 16 * v57);
              goto LABEL_108;
            }
            uint64_t v104 = 0;
            int v105 = 1;
            while (v54 != (uint64_t ***)-4096)
            {
              if (v104) {
                BOOL v106 = 0;
              }
              else {
                BOOL v106 = v54 == (uint64_t ***)-8192;
              }
              if (v106) {
                uint64_t v104 = v53;
              }
              unsigned int v107 = v52 + v105++;
              unsigned int v52 = v107 & v51;
              unsigned int v53 = (uint64_t ****)(v50 + 24 * v52);
              uint64_t v54 = *v53;
              if (*v53 == v39) {
                goto LABEL_99;
              }
            }
            unsigned int v110 = v44;
            if (v104) {
              unint64_t v111 = v104;
            }
            else {
              unint64_t v111 = v53;
            }
          }
          else
          {
            unsigned int v110 = v44;
            unint64_t v111 = 0;
          }
          unsigned int v53 = (uint64_t ****)sub_1CC5BF31C(v48 + 2504, (uint64_t)&v136, v136.i64, v111);
          uint64_t v112 = v136.i64[0];
          v53[1] = 0;
          v53[2] = 0;
          char *v53 = (uint64_t ***)v112;
          unsigned int v44 = v110;
          goto LABEL_99;
        }
      }
    }
LABEL_175:
    uint64_t v38 = (void *)v38[1];
  }
  while (v38 != v131 + 1);
  int v114 = &v145[168 * v147];
  if (v146)
  {
    v136.i64[0] = (uint64_t)v145;
    v136.i64[1] = (uint64_t)&v145[168 * v147];
    sub_1CC2AEE90(v136.i64);
    int64x2_t v115 = v136;
    goto LABEL_188;
  }
LABEL_187:
  int64x2_t v115 = vdupq_n_s64((unint64_t)v114);
LABEL_188:
  int64x2_t v135 = v115;
  unsigned __int8 v117 = (unsigned int *)v115.i64[0];
  if (v114 == (char *)v115.i64[0])
  {
    int v116 = 0;
  }
  else
  {
    int v116 = 0;
    do
    {
      if (v117[8] >= 2)
      {
        v116 |= sub_1CC2ADA64(a1, (uint64_t)(v117 + 6), (uint64_t **)v37, 0, *v117);
        unsigned __int8 v117 = (unsigned int *)v135.i64[0];
      }
      v135.i64[0] = (uint64_t)(v117 + 42);
      sub_1CC2AEE90(v135.i64);
      unsigned __int8 v117 = (unsigned int *)v135.i64[0];
    }
    while ((char *)v135.i64[0] != v114);
  }
  unint64_t v118 = v138 + 168 * v140;
  if (v139)
  {
    v136.i64[0] = v138;
    v136.i64[1] = v138 + 168 * v140;
    sub_1CC2AEE90(v136.i64);
    int64x2_t v119 = v136;
  }
  else
  {
    int64x2_t v119 = vdupq_n_s64(v118);
  }
  int64x2_t v136 = v119;
  for (k = (unsigned int *)v119.i64[0]; v136.i64[0] != v118; k = (unsigned int *)v136.i64[0])
  {
    if (k[8] >= 2)
    {
      v116 |= sub_1CC2ADA64(a1, (uint64_t)(k + 6), (uint64_t **)v37, 0, *k);
      k = (unsigned int *)v136.i64[0];
    }
    v136.i64[0] = (uint64_t)(k + 42);
    sub_1CC2AEE90(v136.i64);
  }
  uint64_t v121 = v141;
  unsigned int v122 = v143;
  if (byte_1EBCCC018)
  {
    unint64_t v123 = v141 + 168 * v143;
    if (v142)
    {
      v136.i64[0] = v141;
      v136.i64[1] = v141 + 168 * v143;
      sub_1CC2AEE90(v136.i64);
      int64x2_t v124 = v136;
    }
    else
    {
      int64x2_t v124 = vdupq_n_s64(v123);
    }
    int64x2_t v136 = v124;
    int v125 = (unsigned int *)v124.i64[0];
    if (v123 != v124.i64[0])
    {
      do
      {
        if (v125[8] >= 2)
        {
          v116 |= sub_1CC2ADA64(a1, (uint64_t)(v125 + 6), (uint64_t **)v37, 1, *v125);
          int v125 = (unsigned int *)v136.i64[0];
        }
        v136.i64[0] = (uint64_t)(v125 + 42);
        sub_1CC2AEE90(v136.i64);
        int v125 = (unsigned int *)v136.i64[0];
      }
      while (v136.i64[0] != v123);
      uint64_t v121 = v141;
      unsigned int v122 = v143;
    }
  }
  uint64_t v126 = v138;
  sub_1CC2B3D98(v138, v140);
  MEMORY[0x1D25D9CD0](v126, 8);
  sub_1CC2B3D98(v121, v122);
  MEMORY[0x1D25D9CD0](v121, 8);
  uint64_t v127 = v145;
  sub_1CC2B3D98((uint64_t)v145, v147);
  MEMORY[0x1D25D9CD0](v127, 8);
  return v116 & 1;
}

uint64_t sub_1CC2AD8AC(uint64_t a1)
{
  uint64_t v5 = *(void **)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 56);
  uint64_t v4 = (void **)(a1 + 48);
  if (v3 != v5)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    if (v7 >= 0x21 && 4 * (*(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72)) < v7)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear(v4);
      return 0;
    }
    memset(v3, 255, 8 * v7);
  }
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return 0;
}

void sub_1CC2AD91C(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC2AD968()
{
  return 0;
}

uint64_t sub_1CC2AD970(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (!v1) {
    return 0;
  }
  uint64_t v7 = "bss-section";
  uint64_t v8 = 11;
  uint64_t v9 = 0;
  if (sub_1CC5122C8((uint64_t *)(v1 + 24), (uint64_t)&v7, &v9)) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 72);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = "data-section";
  uint64_t v8 = 12;
  uint64_t v9 = 0;
  if (sub_1CC5122C8((uint64_t *)(v4 + 24), (uint64_t)&v7, &v9)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5)
  {
    uint64_t v7 = "relro-section";
    uint64_t v8 = 13;
    uint64_t v9 = 0;
    if (sub_1CC5122C8((uint64_t *)(v5 + 24), (uint64_t)&v7, &v9)) {
      return 1;
    }
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      uint64_t v7 = "rodata-section";
      uint64_t v8 = 14;
      uint64_t v9 = 0;
      return sub_1CC5122C8((uint64_t *)(v6 + 24), (uint64_t)&v7, &v9);
    }
  }
  return 0;
}

uint64_t sub_1CC2ADA64(uint64_t a1, uint64_t a2, uint64_t **a3, char a4, unsigned int a5)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(unsigned int *)(a2 + 8);
  unsigned int v147 = a3 + 34;
  if (v7 < 0x81)
  {
LABEL_5:
    sub_1CC2B00DC(v6, (uint64_t *)(v6 + 8 * v7), (uint64_t *)&v147, v7, 0, 0);
  }
  else
  {
    uint64_t v8 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v9 = v7;
    while (1)
    {
      uint64_t v10 = (uint64_t *)operator new(8 * v9, v8);
      if (v10) {
        break;
      }
      BOOL v11 = v9 > 1;
      v9 >>= 1;
      if (!v11) {
        goto LABEL_5;
      }
    }
    BOOL v12 = v10;
    sub_1CC2B00DC(v6, (uint64_t *)(v6 + 8 * v7), (uint64_t *)&v147, v7, v10, v9);
    operator delete(v12);
  }
  if (byte_1EBCCBE98)
  {
    __p = 0;
    unsigned int v145 = 0;
    uint64_t v146 = 0;
    v143[0] = &__p;
    v143[1] = a2;
    *(_DWORD *)(sub_1CC2AFDC4(v143) + 72) = 0;
    v141[0] = 0;
    v141[1] = 0;
    int v142 = 0;
    uint64_t v135 = *(unsigned int *)(a2 + 8);
    if (v135)
    {
      unsigned int v140 = 0;
      uint64_t v13 = 0;
      unsigned int v134 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        uint64_t v137 = v14;
        uint64_t v138 = v13;
        uint64_t v15 = *(void *)(*(void *)a2 + 8 * v14);
        uint64_t v16 = v13 - v140;
        uint64_t v17 = (v13 - v140) >> 3;
        if (v13 - v140 >= 1)
        {
          if (v17 <= 1) {
            uint64_t v18 = 1;
          }
          else {
            uint64_t v18 = (v13 - v140) >> 3;
          }
          bzero(v140, 8 * v18);
        }
        unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v145 - (unsigned char *)__p) >> 4);
        unint64_t v20 = v19 - v17;
        if (v19 <= v17)
        {
          uint64_t v26 = v138;
          if (v19 < v17) {
            uint64_t v26 = &v140[0x6666666666666668 * (((char *)v145 - (unsigned char *)__p) >> 4)];
          }
          uint64_t v139 = v26;
        }
        else if (v20 <= (v134 - v138) >> 3)
        {
          bzero(v138, 8 * v20);
          uint64_t v139 = &v138[8 * v20];
        }
        else
        {
          if (v19 >> 61) {
            abort();
          }
          if ((v134 - v140) >> 2 > v19) {
            unint64_t v19 = (v134 - v140) >> 2;
          }
          if ((unint64_t)(v134 - v140) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21 >> 61) {
            sub_1CB833614();
          }
          uint64_t v22 = (char *)operator new(8 * v21);
          uint64_t v23 = &v22[8 * v17];
          bzero(v23, 8 * v20);
          for (uint64_t i = v138; i != v140; i -= 8)
          {
            uint64_t v25 = *((void *)i - 1);
            *((void *)v23 - 1) = v25;
            v23 -= 8;
          }
          unsigned int v134 = &v22[8 * v21];
          uint64_t v139 = &v22[8 * v20 + v16];
          if (v140) {
            operator delete(v140);
          }
          unsigned int v140 = v23;
        }
        uint64_t v27 = *(void *)(v15 + 8);
        if (v27) {
          break;
        }
LABEL_81:
        uint64_t v13 = v139;
        uint64_t v14 = v137 + 1;
        if (v137 + 1 == v135) {
          goto LABEL_87;
        }
      }
      unint64_t v28 = 0;
      uint64_t v29 = 1 << v137;
      uint64_t v30 = v137 >> 6;
      while (1)
      {
        uint64_t v31 = *(void *)(v27 + 24);
        unsigned int v32 = *(unsigned __int8 *)(v31 + 16);
        if (v31) {
          BOOL v33 = v32 == 5;
        }
        else {
          BOOL v33 = 0;
        }
        if (v33)
        {
          uint64_t v35 = *(void *)(v31 + 8);
          if (v35)
          {
            uint64_t v34 = 0;
            do
            {
LABEL_62:
              uint64_t v52 = *(void *)(v35 + 24);
              if (v52) {
                BOOL v53 = *(unsigned __int8 *)(v52 + 16) >= 0x1Cu;
              }
              else {
                BOOL v53 = 0;
              }
              if (v53)
              {
                uint64_t v54 = *(void **)(*(void *)(v52 + 40) + 56);
                unsigned int v147 = v54;
                if (!*(unsigned char *)(a1 + 44) || (uint64_t v55 = v54[14]) != 0 && *(char *)(v55 + 13) < 0)
                {
                  uint64_t v56 = sub_1CC2B1148((uint64_t)v141, (uint64_t *)&v147)[1];
                  if (v56)
                  {
                    uint64_t v57 = (char *)__p;
                    uint64_t v58 = (char *)__p + 80 * v56;
                    int v61 = *((_DWORD *)v58 + 18);
                    int v59 = v58 + 72;
                    int v60 = v61;
                    if ((*(void *)(*((void *)__p + 10 * v56) + 8 * v30) & v29) != 0)
                    {
                      *int v59 = v60 + 1;
                    }
                    else
                    {
                      *int v59 = v60 - 1;
                      uint64_t v62 = *(void *)&v140[8 * v56];
                      if (v62)
                      {
                        ++*(_DWORD *)&v57[80 * v62 + 72];
                        sub_1CC2B1148((uint64_t)v141, (uint64_t *)&v147)[1] = v62;
                      }
                      else
                      {
                        unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v145 - v57) >> 4);
                        *(void *)&v140[8 * v56] = v36;
                        sub_1CC2B1148((uint64_t)v141, (uint64_t *)&v147)[1] = v36;
                        uint64_t v37 = sub_1CC2AFDC4(v143);
                        uint64_t v38 = v37;
                        uint64_t v39 = *(void *)v37;
                        *(void *)(*(void *)v37 + 8 * v30) |= v29;
                        uint64_t v40 = (char *)__p + 80 * v56;
                        unsigned int v41 = *((_DWORD *)v40 + 16);
                        if (*(_DWORD *)(v37 + 64) < v41)
                        {
                          int v46 = *(_DWORD *)(v37 + 64) & 0x3F;
                          uint64_t v47 = *(unsigned int *)(v37 + 8);
                          if (v46) {
                            *(void *)(v39 + 8 * v47 - 8) &= ~(-1 << v46);
                          }
                          unsigned int v48 = v47;
                          *(_DWORD *)(v37 + 64) = v41;
                          unsigned int v49 = v41 + 63;
                          if (v47 != (v41 + 63) >> 6)
                          {
                            uint64_t v50 = v49 >> 6;
                            if (v47 > v50)
                            {
                              *(_DWORD *)(v37 + 8) = v50;
                              unsigned int v48 = v49 >> 6;
                            }
                            else
                            {
                              if (v50 > *(_DWORD *)(v37 + 12)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              if (v50 != v47)
                              {
                                unsigned int v131 = v47;
                                int v132 = v47;
                                unsigned int v133 = v49 >> 6;
                                bzero((void *)(*(void *)v37 + 8 * v47), 8 * (v50 - v47));
                                LODWORD(v47) = v132;
                                LODWORD(v50) = v133;
                                unsigned int v48 = v131;
                              }
                              v48 += v50 - v47;
                              *(_DWORD *)(v38 + 8) = v48;
                              unsigned int v41 = *(_DWORD *)(v38 + 64);
                            }
                          }
                          int v51 = v41 & 0x3F;
                          if (v51) {
                            *(void *)(*(void *)v38 + 8 * v48 - 8) &= ~(-1 << v51);
                          }
                        }
                        uint64_t v42 = *((unsigned int *)v40 + 2);
                        if (v42)
                        {
                          uint64_t v43 = *(uint64_t **)v40;
                          unsigned int v44 = *(void **)v38;
                          do
                          {
                            uint64_t v45 = *v43++;
                            *v44++ |= v45;
                            --v42;
                          }
                          while (v42);
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v28)
                    {
                      ++*((_DWORD *)__p + 20 * v28 + 18);
                    }
                    else
                    {
                      unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v145 - (unsigned char *)__p) >> 4);
                      unsigned int v63 = (void *)sub_1CC2AFDC4(v143);
                      *(void *)(*v63 + 8 * v30) |= v29;
                    }
                    sub_1CC2B1148((uint64_t)v141, (uint64_t *)&v147)[1] = v28;
                  }
                }
              }
              uint64_t v35 = *(void *)(v35 + 8);
            }
            while (v35 != v34);
          }
        }
        else if (v32 > 0x1B)
        {
          uint64_t v34 = *(void *)(v27 + 8);
          uint64_t v35 = v27;
          if (v27 != v34) {
            goto LABEL_62;
          }
        }
        uint64_t v27 = *(void *)(v27 + 8);
        if (!v27) {
          goto LABEL_81;
        }
      }
    }
    unsigned int v140 = 0;
LABEL_87:
    int v66 = __p;
    uint64_t v67 = v145;
    unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v145 - (unsigned char *)__p) >> 4);
    if ((char *)v145 - (unsigned char *)__p < 1)
    {
LABEL_91:
      sub_1CC2B1360((uint64_t)v66, v67, v68, 0, 0);
    }
    else
    {
      int v69 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v145 - (unsigned char *)__p) >> 4);
      while (1)
      {
        int v71 = (void **)operator new(80 * v70, v69);
        if (v71) {
          break;
        }
        BOOL v11 = v70 > 1;
        v70 >>= 1;
        if (!v11) {
          goto LABEL_91;
        }
      }
      uint64_t v72 = v71;
      sub_1CC2B1360((uint64_t)v66, v67, v68, v71, v70);
      operator delete(v72);
    }
    if (byte_1EBCCBF58)
    {
      uint64_t v73 = *(unsigned int *)(a2 + 8);
      uint64_t v74 = (v73 + 63) >> 6;
      unsigned int v147 = v150;
      unsigned int v149 = 6;
      if ((v73 + 63) >= 0x1C0)
      {
        unsigned int v148 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v75 = v140;
      if ((v73 + 63) >= 0x40) {
        bzero(v150, 8 * v74);
      }
      unsigned int v148 = (v73 + 63) >> 6;
      unsigned int v151 = v73;
      uint64_t v78 = (int8x8_t **)__p;
      uint64_t v79 = v145;
      if (v145 != __p)
      {
        do
        {
          uint64_t v80 = v79;
          v79 -= 10;
          if (*((_DWORD *)v80 - 2))
          {
            uint64_t v81 = *((unsigned int *)v80 - 18);
            if (v81)
            {
              unsigned int v82 = 0;
              int v83 = *(v80 - 10);
              uint64_t v84 = 8 * v81;
              do
              {
                int8x8_t v85 = *v83++;
                uint8x8_t v86 = (uint8x8_t)vcnt_s8(v85);
                v86.i16[0] = vaddlv_u8(v86);
                v82 += v86.i32[0];
                v84 -= 8;
              }
              while (v84);
              if (v82 >= 2)
              {
                uint64_t v87 = *((unsigned int *)v80 - 4);
                if (v73 < v87)
                {
                  char v92 = v73 & 0x3F;
                  if ((v73 & 0x3F) != 0)
                  {
                    uint64_t v93 = v74;
                    *((void *)v147 + v74 - 1) &= ~(-1 << v92);
                  }
                  else
                  {
                    uint64_t v93 = v74;
                  }
                  unsigned int v151 = v87;
                  unsigned int v94 = v87 + 63;
                  if (v74 != (v87 + 63) >> 6)
                  {
                    uint64_t v95 = v94 >> 6;
                    if (v74 > v95)
                    {
                      unsigned int v148 = v94 >> 6;
                      LODWORD(v74) = v94 >> 6;
                    }
                    else
                    {
                      if (v95 > v149) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      if (v95 != v93) {
                        bzero((char *)v147 + 8 * v93, 8 * (v95 - v93));
                      }
                      LODWORD(v74) = v74 + v95 - v93;
                      unsigned int v148 = v74;
                      uint64_t v87 = v151;
                    }
                  }
                  if ((v87 & 0x3F) != 0) {
                    *((void *)v147 + v74 - 1) &= ~(-1 << (v87 & 0x3F));
                  }
                }
                else
                {
                  uint64_t v87 = v73;
                }
                uint64_t v88 = *((unsigned int *)v80 - 18);
                if (v88)
                {
                  unsigned int v89 = (uint64_t *)*v79;
                  int64_t v90 = v147;
                  do
                  {
                    uint64_t v91 = *v89++;
                    *v90++ |= v91;
                    --v88;
                  }
                  while (v88);
                }
                uint64_t v73 = v87;
              }
            }
          }
        }
        while (v79 != v78);
      }
      LOBYTE(v96) = sub_1CC2AEF24(a1, (void *)a2, (uint64_t)&v147, a3, a4, a5);
      if (v147 != v150) {
        free(v147);
      }
      if (!v140) {
        goto LABEL_133;
      }
    }
    else
    {
      unsigned int v76 = *(_DWORD *)(a2 + 8);
      unsigned int v147 = v150;
      unsigned int v149 = 6;
      if (v76 + 63 >= 0x1C0)
      {
        unsigned int v148 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v77 = v150;
      if (v76 + 63 >= 0x40)
      {
        bzero(v150, 8 * ((v76 + 63) >> 6));
        uint64_t v77 = v150;
      }
      unsigned int v148 = (v76 + 63) >> 6;
      unsigned int v151 = v76;
      uint64_t v104 = (int8x8_t **)__p;
      int v105 = v145;
      if (v145 == __p)
      {
        LOBYTE(v96) = 0;
      }
      else
      {
        int v96 = 0;
        do
        {
          BOOL v106 = v105;
          v105 -= 10;
          if (*((_DWORD *)v106 - 2))
          {
            uint64_t v107 = v148;
            LODWORD(v108) = *((_DWORD *)v106 - 18);
            if (v108 >= v148) {
              uint64_t v108 = v148;
            }
            else {
              uint64_t v108 = v108;
            }
            if (v108)
            {
              unint64_t v109 = (uint64_t *)v147;
              unsigned int v110 = (uint64_t *)*v105;
              while (1)
              {
                uint64_t v112 = *v109++;
                uint64_t v111 = v112;
                uint64_t v113 = *v110++;
                if ((v113 & v111) != 0) {
                  break;
                }
                if (!--v108) {
                  goto LABEL_161;
                }
              }
            }
            else
            {
LABEL_161:
              unsigned int v114 = *((_DWORD *)v106 - 4);
              if (v151 < v114)
              {
                if ((v151 & 0x3F) != 0) {
                  *((void *)v147 + v148 - 1) &= ~(-1 << (v151 & 0x3F));
                }
                unsigned int v151 = v114;
                unsigned int v125 = v114 + 63;
                if (v107 != (v114 + 63) >> 6)
                {
                  uint64_t v126 = v125 >> 6;
                  if (v107 > v126)
                  {
                    unsigned int v148 = v125 >> 6;
                    LODWORD(v107) = v125 >> 6;
                  }
                  else
                  {
                    if (v126 > v149) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v126 != v107) {
                      bzero((char *)v147 + 8 * v107, 8 * (v126 - v107));
                    }
                    LODWORD(v107) = v126;
                    unsigned int v148 = v126;
                    LOBYTE(v114) = v151;
                  }
                }
                int v127 = v114 & 0x3F;
                if (v127) {
                  *((void *)v147 + v107 - 1) &= ~(-1 << v127);
                }
              }
              uint64_t v115 = *((unsigned int *)v106 - 18);
              if (v115)
              {
                int v116 = *(v106 - 10);
                unsigned __int8 v117 = v147;
                unint64_t v118 = v116;
                uint64_t v119 = *((unsigned int *)v106 - 18);
                do
                {
                  uint64_t v120 = (uint64_t)*v118++;
                  *v117++ |= v120;
                  --v119;
                }
                while (v119);
                unsigned int v121 = 0;
                uint64_t v122 = 8 * v115;
                do
                {
                  int8x8_t v123 = *v116++;
                  uint8x8_t v124 = (uint8x8_t)vcnt_s8(v123);
                  v124.i16[0] = vaddlv_u8(v124);
                  v121 += v124.i32[0];
                  v122 -= 8;
                }
                while (v122);
                if (v121 >= 2) {
                  v96 |= sub_1CC2AEF24(a1, (void *)a2, (uint64_t)v105, a3, a4, a5);
                }
              }
            }
          }
        }
        while (v105 != v104);
        uint64_t v77 = v147;
      }
      if (v77 != v150) {
        free(v77);
      }
      BOOL v75 = v140;
      if (!v140) {
        goto LABEL_133;
      }
    }
    operator delete(v75);
LABEL_133:
    MEMORY[0x1D25D9CD0](v141[0], 8);
    uint64_t v97 = (int8x8_t **)__p;
    if (__p)
    {
      BOOL v98 = v145;
      uint64_t v99 = __p;
      if (v145 != __p)
      {
        do
        {
          int v101 = (char *)*(v98 - 10);
          v98 -= 10;
          unsigned int v100 = v101;
          if (v98 + 2 != (int8x8_t **)v101) {
            free(v100);
          }
        }
        while (v98 != v97);
        uint64_t v99 = __p;
      }
      unsigned int v145 = v97;
      operator delete(v99);
    }
    return v96 & 1;
  }
  unsigned int v64 = *(_DWORD *)(a2 + 8);
  uint64_t v65 = (v64 + 63) >> 6;
  unsigned int v147 = v150;
  unsigned int v149 = 6;
  if (v64 + 63 >= 0x1C0)
  {
    unsigned int v148 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v64 + 63 < 0x40)
  {
    unsigned int v148 = (v64 + 63) >> 6;
    unsigned int v151 = v64;
  }
  else
  {
    bzero(v150, 8 * v65);
    unsigned int v148 = (v64 + 63) >> 6;
    unsigned int v151 = v64;
    if (v148 <= 1uLL) {
      uint64_t v102 = 1;
    }
    else {
      uint64_t v102 = (v64 + 63) >> 6;
    }
    memset(v150, 255, 8 * v102);
  }
  if ((v64 & 0x3F) != 0) {
    v150[v65 - 1] &= ~(-1 << (v64 & 0x3F));
  }
  LOBYTE(v96) = sub_1CC2AEF24(a1, (void *)a2, (uint64_t)&v147, a3, a4, a5);
  if (v147 != v150) {
    free(v147);
  }
  return v96 & 1;
}

void sub_1CC2AE660(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t v4 = *((unsigned int *)a2 + 8);
  if (v4 <= 1) {
    unint64_t v5 = 1;
  }
  else {
    unint64_t v5 = v4;
  }
  if (a4 < v5) {
    unint64_t v5 = a4;
  }
  if (a4 <= v4) {
    unint64_t v5 = a4;
  }
  if ((v4 & 0x80000000) == 0) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = a4;
  }
  uint64_t v8 = *((unsigned int *)a2 + 2);
  if (v8)
  {
    int v10 = 0;
    if (v7)
    {
      size_t v11 = v7;
      BOOL v12 = a3;
      do
      {
        int v13 = *v12++;
        int v10 = 33 * v10 + v13;
        --v11;
      }
      while (v11);
    }
    uint64_t v14 = *a2;
    uint64_t v15 = *a2 + 8 * v8 + 8;
    int v16 = 1;
    int v17 = v10;
    while (1)
    {
      uint64_t v18 = v17 & (v8 - 1);
      unint64_t v19 = *(void **)(v14 + 8 * v18);
      if (v19 != (void *)-8)
      {
        if (!v19) {
          return;
        }
        if (*(_DWORD *)(v15 + 4 * v18) == v10
          && v7 == *v19
          && (!v7 || !memcmp(a3, (char *)v19 + *((unsigned int *)a2 + 5), v7)))
        {
          break;
        }
      }
      int v17 = v16 + v18;
      ++v16;
    }
    if (v18 != -1 && (int)v18 != v8)
    {
      uint64_t v20 = *(void *)(*(void *)(v14 + 8 * (int)v18) + 8);
      if (v20)
      {
        if (*(unsigned char *)(v20 + 16) == 3
          && (*(_DWORD *)(v20 + 32) & 0xFu) - 7 >= 2
          && (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) != 0)
        {
          uint64_t v21 = *(void *)(v20 - 32);
          int v22 = *(_DWORD *)(v21 + 20);
          uint64_t v23 = v22 & 0x7FFFFFF;
          if ((v22 & 0x7FFFFFF) != 0)
          {
            for (uint64_t i = 0; i != v23; ++i)
            {
              uint64_t v25 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v21
                                                                   - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF)
                                                                   + 32 * i));
              if (v25) {
                BOOL v26 = *((unsigned char *)v25 + 16) == 3;
              }
              else {
                BOOL v26 = 0;
              }
              if (v26)
              {
                uint64_t v27 = v25;
                uint64_t v28 = *(void *)(a1 + 56);
                uint64_t v29 = *(unsigned int *)(a1 + 68);
                if (v28 != *(void *)(a1 + 48))
                {
                  unsigned int v33 = *(_DWORD *)(a1 + 64);
LABEL_48:
                  if (3 * v33 <= 4 * ((int)v29 - *(_DWORD *)(a1 + 72)))
                  {
                    if (v33 >= 0x40) {
                      v33 *= 2;
                    }
                    else {
                      unsigned int v33 = 128;
                    }
                  }
                  else if (v33 - v29 >= v33 >> 3)
                  {
                    goto LABEL_50;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 48), v33);
                  unsigned int v33 = *(_DWORD *)(a1 + 64);
                  uint64_t v28 = *(void *)(a1 + 56);
LABEL_50:
                  unsigned int v34 = v33 - 1;
                  unsigned int v35 = (v33 - 1) & ((v27 >> 4) ^ (v27 >> 9));
                  unint64_t v36 = (llvm::Value **)(v28 + 8 * v35);
                  uint64_t v37 = *v36;
                  if (*v36 == (llvm::Value *)-1)
                  {
                    uint64_t v38 = 0;
LABEL_62:
                    if (v38) {
                      uint64_t v42 = v38;
                    }
                    else {
                      uint64_t v42 = v36;
                    }
                    if (*v42 != v27)
                    {
                      if (*v42 == (llvm::Value *)-2) {
                        --*(_DWORD *)(a1 + 72);
                      }
                      else {
                        ++*(_DWORD *)(a1 + 68);
                      }
                      *uint64_t v42 = v27;
                    }
                  }
                  else
                  {
                    uint64_t v38 = 0;
                    int v39 = 1;
                    while (v37 != v27)
                    {
                      if (v38) {
                        BOOL v40 = 0;
                      }
                      else {
                        BOOL v40 = v37 == (llvm::Value *)-2;
                      }
                      if (v40) {
                        uint64_t v38 = v36;
                      }
                      unsigned int v41 = v35 + v39++;
                      unsigned int v35 = v41 & v34;
                      unint64_t v36 = (llvm::Value **)(v28 + 8 * (v41 & v34));
                      uint64_t v37 = *v36;
                      if (*v36 == (llvm::Value *)-1) {
                        goto LABEL_62;
                      }
                    }
                  }
                  continue;
                }
                if (v29)
                {
                  uint64_t v30 = 0;
                  uint64_t v31 = 8 * v29;
                  unsigned int v32 = *(llvm::Value ***)(a1 + 56);
                  while (*v32 != v25)
                  {
                    if (*v32 == (llvm::Value *)-2) {
                      uint64_t v30 = v32;
                    }
                    ++v32;
                    v31 -= 8;
                    if (!v31)
                    {
                      if (!v30) {
                        goto LABEL_45;
                      }
                      *uint64_t v30 = v25;
                      --*(_DWORD *)(a1 + 72);
                      goto LABEL_69;
                    }
                  }
                  continue;
                }
LABEL_45:
                unsigned int v33 = *(_DWORD *)(a1 + 64);
                if (v29 >= v33) {
                  goto LABEL_48;
                }
                *(_DWORD *)(a1 + 68) = v29 + 1;
                *(void *)(v28 + 8 * v29) = v25;
              }
LABEL_69:
              ;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1CC2AE974(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CC2AEA8C(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
  uint64_t v5 = v9;
  if (v4) {
    return v5;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CC2AEC88(a1, v7);
    uint64_t v9 = 0;
    sub_1CC2AEA8C(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
    uint64_t v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  LODWORD(v9) = -1;
  long long v10 = xmmword_1CFAC4A20;
  if ((sub_1CC2AEC04(v5, (uint64_t)&v9) & 1) == 0) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)uint64_t v5 = *(_DWORD *)a2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(v5 + 24) = v5 + 40;
  *(void *)(v5 + 32) = 0x1000000000;
  return v5;
}

uint64_t sub_1CC2AEA8C(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  if (a2)
  {
    int v22 = -1;
    long long v23 = xmmword_1CFAC4A20;
    int v20 = -2;
    long long v21 = xmmword_1CFAC6E20;
    unsigned int v8 = 37 * *(_DWORD *)a3;
    unint64_t v9 = sub_1CD0B03C8(*(void **)(a3 + 8), *(void *)(a3 + 8) + *(void *)(a3 + 16));
    unint64_t v10 = (v9 | ((unint64_t)v8 << 32)) + ~(v9 << 32);
    unint64_t v11 = 9
        * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
    unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    int v13 = a2 - 1;
    unsigned int v14 = (a2 - 1) & ((v12 >> 31) ^ v12);
    uint64_t v15 = a1 + 168 * v14;
    if (sub_1CC2AEC04(a3, v15))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v17 = 0;
      int v18 = 1;
      while (!sub_1CC2AEC04(v15, (uint64_t)&v22))
      {
        if ((sub_1CC2AEC04(v15, (uint64_t)&v20) & (v17 == 0)) != 0) {
          uint64_t v17 = v15;
        }
        unsigned int v14 = (v14 + v18) & v13;
        uint64_t v15 = a1 + 168 * v14;
        int v19 = sub_1CC2AEC04(a3, v15);
        uint64_t result = 1;
        ++v18;
        if (v19) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v17) {
        uint64_t v15 = v17;
      }
    }
LABEL_4:
    *a4 = v15;
  }
  else
  {
    uint64_t result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t sub_1CC2AEC04(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  char v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(const void **)(a2 + 8);
  if (v5 != (const void *)-2)
  {
    if (v5 == (const void *)-1) {
      return v4 + 1 == 0;
    }
    size_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a1 + 16) == v7)
    {
      if (!v7) {
        return 1;
      }
      return memcmp(v4, v5, v7) == 0;
    }
    return 0;
  }
  return v4 + 2 == 0;
}

char *sub_1CC2AEC88(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(168 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      unint64_t v11 = &result[168 * v10];
      do
      {
        *(_DWORD *)uint64_t result = -1;
        *(_OWORD *)(result + 8) = xmmword_1CFAC4A20;
        result += 168;
      }
      while (result != v11);
    }
    int v22 = -1;
    long long v23 = xmmword_1CFAC4A20;
    int v20 = -2;
    long long v21 = xmmword_1CFAC6E20;
    if (v3)
    {
      uint64_t v12 = 168 * v3;
      uint64_t v13 = v4 + 24;
      do
      {
        if ((sub_1CC2AEC04(v13 - 24, (uint64_t)&v22) & 1) == 0 && (sub_1CC2AEC04(v13 - 24, (uint64_t)&v20) & 1) == 0)
        {
          size_t v24 = 0;
          sub_1CC2AEA8C(*(void *)a1, *(_DWORD *)(a1 + 16), v13 - 24, (uint64_t *)&v24);
          unsigned int v14 = v24;
          uint64_t v15 = v24;
          *size_t v24 = *(_DWORD *)(v13 - 24);
          long long v16 = *(_OWORD *)(v13 - 16);
          *((void *)v14 + 3) = v15 + 10;
          uint64_t v17 = (uint64_t)(v14 + 6);
          *(_OWORD *)(v17 - 16) = v16;
          *(void *)(v17 + 8) = 0x1000000000;
          if (*(_DWORD *)(v13 + 8)) {
            sub_1CD41C56C(v17, v13);
          }
          ++*(_DWORD *)(a1 + 8);
          if (v13 + 16 != *(void *)v13) {
            free(*(void **)v13);
          }
        }
        v13 += 168;
        v12 -= 168;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  int v18 = *(_DWORD *)(a1 + 16);
  if (v18)
  {
    int v19 = &result[168 * v18];
    do
    {
      *(_DWORD *)uint64_t result = -1;
      *(_OWORD *)(result + 8) = xmmword_1CFAC4A20;
      result += 168;
    }
    while (result != v19);
  }
  return result;
}

uint64_t *sub_1CC2AEE90(uint64_t *result)
{
  int v6 = -1;
  long long v7 = xmmword_1CFAC4A20;
  int v4 = -2;
  long long v5 = xmmword_1CFAC6E20;
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    unsigned int v3 = result;
    do
    {
      uint64_t result = (uint64_t *)sub_1CC2AEC04(v1, (uint64_t)&v6);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t *)sub_1CC2AEC04(v1, (uint64_t)&v4);
        if (!result) {
          break;
        }
      }
      v1 += 168;
      uint64_t *v3 = v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1CC2AEF24(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4, char a5, unsigned int a6)
{
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a3 + 64);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = 0;
  uint64_t v8 = **a4;
  v180 = (llvm::ArrayType *)(v8 + 1912);
  unint64_t v181 = (llvm::ConstantInt *)(v8 + 1960);
  uint64_t v182 = (llvm::DataLayout *)(a4 + 34);
  LODWORD(v8) = -v6;
  int v9 = v6 - 1;
  int v10 = *(uint64_t **)a3;
  unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> v8;
  uint64_t v12 = v9 & 0xFFFFFFC0;
  while (1)
  {
    uint64_t v14 = *v10++;
    uint64_t v13 = v14;
    uint64_t v15 = v12 + v7 ? -1 : v11;
    unint64_t v16 = v15 & v13;
    if (v16) {
      break;
    }
    v7 -= 64;
    if (v12 + v7 == -64) {
      goto LABEL_10;
    }
  }
  int v17 = __clz(__rbit64(v16));
  if (v17 + 1 == v7)
  {
LABEL_10:
    char v175 = 0;
    return v175 & 1;
  }
  char v175 = 0;
  uint64_t v19 = v17 - (int)v7;
  uint64_t v173 = (llvm::Type *)(a6 | 0x100000000);
  unint64_t v189 = a2;
  do
  {
    uint64_t v187 = 0;
    char v183 = 0;
    int v194 = 0;
    unint64_t v178 = 0;
    int v179 = 0;
    unsigned __int8 v188 = 0;
    unsigned int v192 = 0;
    unint64_t v193 = 0;
    int v20 = 0;
    long long v21 = 0;
    int v22 = 0;
    long long v23 = 0;
    size_t v24 = 0;
    uint64_t v25 = 0;
    BOOL v26 = 0;
    uint64_t v27 = *a2;
    uint64_t v176 = v19;
    while (1)
    {
      unint64_t v186 = (unint64_t)v24;
      uint64_t v196 = v19;
      __p = v22;
      uint64_t v28 = *(const llvm::GlobalVariable **)(v27 + 8 * v19);
      uint64_t v29 = (llvm::Type *)*((void *)v28 + 3);
      unsigned __int8 PreferredAlign = llvm::DataLayout::getPreferredAlign(v182, v28);
      uint64_t v31 = sub_1CB83544C((uint64_t)v182, (uint64_t)v29);
      BOOL v33 = v32 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v182, v29, 1);
      if (v33) {
      unint64_t v36 = (llvm::Type *)(((v187 + (1 << PreferredAlign) - 1) & -(int)(1 << PreferredAlign))
      }
                         - v187);
      unint64_t v37 = (unint64_t)v36
          + v187
          + (((1 << Alignment) + ((unint64_t)(v31 + 7) >> 3) - 1) & -(1 << Alignment));
      if (v37 > *(unsigned int *)(a1 + 40)) {
        break;
      }
      unsigned __int8 v190 = PreferredAlign;
      uint64_t v187 = v37;
      if (v36)
      {
        uint64_t v38 = llvm::ArrayType::get(v180, v36);
        BOOL v40 = v38;
        if (v20 >= (llvm::ArrayType **)v193)
        {
          uint64_t v43 = v20 - v21;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 61) {
            goto LABEL_224;
          }
          if ((v193 - (char *)v21) >> 2 > v44) {
            unint64_t v44 = (v193 - (char *)v21) >> 2;
          }
          if ((unint64_t)(v193 - (char *)v21) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45)
          {
            if (v45 >> 61) {
              goto LABEL_225;
            }
            int v46 = (char *)operator new(8 * v45);
          }
          else
          {
            int v46 = 0;
          }
          uint64_t v47 = (llvm::ArrayType **)&v46[8 * v43];
          *uint64_t v47 = v40;
          unsigned int v41 = v47 + 1;
          if (v20 != v21)
          {
            do
            {
              unsigned int v48 = *--v20;
              *--uint64_t v47 = v48;
            }
            while (v20 != v21);
            int v20 = v21;
          }
          long long v21 = v47;
          unint64_t v193 = &v46[8 * v45];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          llvm::Value *v20 = v38;
          unsigned int v41 = v20 + 1;
        }
        unsigned int v49 = llvm::ConstantAggregateZero::get(*(v41 - 1), v39);
        uint64_t v50 = v49;
        if (v26 >= v192)
        {
          uint64_t v51 = (v26 - v25) >> 3;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 61) {
            goto LABEL_224;
          }
          if ((v192 - v25) >> 2 > v52) {
            unint64_t v52 = (v192 - v25) >> 2;
          }
          if ((unint64_t)(v192 - v25) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53)
          {
            if (v53 >> 61) {
              goto LABEL_225;
            }
            uint64_t v54 = (char *)operator new(8 * v53);
          }
          else
          {
            uint64_t v54 = 0;
          }
          uint64_t v55 = &v54[8 * v51];
          *(void *)uint64_t v55 = v50;
          uint64_t v42 = v55 + 8;
          while (v26 != v25)
          {
            uint64_t v56 = *((void *)v26 - 1);
            v26 -= 8;
            *((void *)v55 - 1) = v56;
            v55 -= 8;
          }
          unsigned int v192 = &v54[8 * v53];
          if (v25) {
            operator delete(v25);
          }
          uint64_t v25 = v55;
          a2 = v189;
          unsigned __int8 PreferredAlign = v190;
          int v22 = __p;
        }
        else
        {
          *(void *)BOOL v26 = v49;
          uint64_t v42 = v26 + 8;
          int v22 = __p;
          a2 = v189;
          unsigned __int8 PreferredAlign = v190;
        }
        ++v194;
      }
      else
      {
        uint64_t v42 = v26;
        unsigned int v41 = v20;
        int v22 = __p;
        a2 = v189;
      }
      if (v41 >= (llvm::Type **)v193)
      {
        uint64_t v59 = v41 - v21;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61) {
          goto LABEL_224;
        }
        if ((v193 - (char *)v21) >> 2 > v60) {
          unint64_t v60 = (v193 - (char *)v21) >> 2;
        }
        if ((unint64_t)(v193 - (char *)v21) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61)
        {
          if (v61 >> 61) {
            goto LABEL_225;
          }
          uint64_t v62 = (char *)operator new(8 * v61);
          int v22 = __p;
        }
        else
        {
          uint64_t v62 = 0;
        }
        unsigned int v63 = (llvm::Type **)&v62[8 * v59];
        *unsigned int v63 = v29;
        int v20 = v63 + 1;
        if (v41 == v21)
        {
          uint64_t v58 = v196;
        }
        else
        {
          uint64_t v58 = v196;
          do
          {
            unsigned int v64 = *--v41;
            *--unsigned int v63 = v64;
          }
          while (v41 != v21);
        }
        unint64_t v193 = &v62[8 * v61];
        if (v21)
        {
          operator delete(v21);
          int v22 = __p;
        }
        long long v21 = v63;
        uint64_t v57 = a3;
        a2 = v189;
        unsigned __int8 PreferredAlign = v190;
      }
      else
      {
        uint64_t *v41 = v29;
        int v20 = v41 + 1;
        uint64_t v57 = a3;
        uint64_t v58 = v196;
      }
      uint64_t v65 = *(void *)(*(void *)(*a2 + 8 * v58) - 32);
      if (v42 >= v192)
      {
        uint64_t v67 = (v42 - v25) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          goto LABEL_224;
        }
        if ((v192 - v25) >> 2 > v68) {
          unint64_t v68 = (v192 - v25) >> 2;
        }
        if ((unint64_t)(v192 - v25) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v68;
        }
        if (v69)
        {
          if (v69 >> 61) {
            goto LABEL_225;
          }
          unint64_t v70 = (char *)operator new(8 * v69);
          int v22 = __p;
        }
        else
        {
          unint64_t v70 = 0;
        }
        int v71 = &v70[8 * v67];
        *(void *)int v71 = v65;
        BOOL v26 = v71 + 8;
        if (v42 == v25)
        {
          uint64_t v25 = &v70[8 * v67];
          a2 = v189;
          uint64_t v66 = v196;
        }
        else
        {
          a2 = v189;
          uint64_t v66 = v196;
          do
          {
            uint64_t v72 = *((void *)v42 - 1);
            v42 -= 8;
            *((void *)v71 - 1) = v72;
            v71 -= 8;
          }
          while (v42 != v25);
          uint64_t v42 = v25;
          uint64_t v25 = v71;
        }
        unsigned int v192 = &v70[8 * v69];
        if (v42)
        {
          uint64_t v73 = v42;
          uint64_t v74 = a2;
          operator delete(v73);
          a2 = v74;
          int v22 = __p;
        }
        unsigned __int8 PreferredAlign = v190;
      }
      else
      {
        *(void *)uint64_t v42 = v65;
        BOOL v26 = v42 + 8;
        uint64_t v66 = v196;
      }
      size_t v24 = (char *)v186;
      if ((unint64_t)v23 >= v186)
      {
        uint64_t v75 = (v23 - v22) >> 2;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62) {
          goto LABEL_224;
        }
        if ((uint64_t)(v186 - (void)v22) >> 1 > v76) {
          unint64_t v76 = (uint64_t)(v186 - (void)v22) >> 1;
        }
        if (v186 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v77 = v76;
        }
        if (v77)
        {
          if (v77 >> 62) {
LABEL_225:
          }
            sub_1CB833614();
          uint64_t v78 = a2;
          uint64_t v79 = (char *)operator new(4 * v77);
          int v22 = __p;
          a2 = v78;
        }
        else
        {
          uint64_t v79 = 0;
        }
        uint64_t v80 = &v79[4 * v75];
        *(_DWORD *)uint64_t v80 = v194;
        uint64_t v81 = v80 + 4;
        while (v23 != v22)
        {
          int v82 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v80 - 1) = v82;
          v80 -= 4;
        }
        size_t v24 = &v79[4 * v77];
        if (v22)
        {
          int v83 = a2;
          operator delete(v22);
          a2 = v83;
        }
        int v22 = v80;
        long long v23 = v81;
        uint64_t v66 = v196;
        unsigned __int8 PreferredAlign = v190;
      }
      else
      {
        *(_DWORD *)long long v23 = v194;
        v23 += 4;
      }
      unsigned __int8 v84 = PreferredAlign;
      if (v188 > PreferredAlign) {
        unsigned __int8 v84 = v188;
      }
      unsigned __int8 v188 = v84;
      uint64_t v27 = *a2;
      int8x8_t v85 = *(uint64_t ****)(*a2 + 8 * v66);
      if ((((_BYTE)v85[4] & 0xF) != 0) | v183 & 1) {
        goto LABEL_125;
      }
      if ((*((unsigned char *)v85 + 23) & 0x10) == 0)
      {
        char v183 = 1;
        unint64_t v178 = &byte_1CFBCE98E;
        int v179 = 0;
        goto LABEL_125;
      }
      uint64_t v86 = ***v85;
      uint64_t v87 = *(void *)(v86 + 152);
      uint64_t v88 = *(unsigned int *)(v86 + 168);
      if (!v88) {
        goto LABEL_123;
      }
      LODWORD(v89) = (v88 - 1) & ((v85 >> 4) ^ (v85 >> 9));
      int64_t v90 = (uint64_t ****)(v87 + 16 * v89);
      uint64_t v91 = *v90;
      if (*v90 != v85)
      {
        int v92 = 1;
        while (v91 != (uint64_t ***)-4096)
        {
          int v93 = v89 + v92++;
          uint64_t v89 = v93 & (v88 - 1);
          uint64_t v91 = *(uint64_t ****)(v87 + 16 * v89);
          if (v91 == v85)
          {
            int64_t v90 = (uint64_t ****)(v87 + 16 * v89);
            goto LABEL_124;
          }
        }
LABEL_123:
        int64_t v90 = (uint64_t ****)(v87 + 16 * v88);
      }
LABEL_124:
      unsigned int v94 = (const char **)v90[1];
      unint64_t v178 = (const char *)(v94 + 2);
      int v179 = *v94;
      char v183 = 1;
LABEL_125:
      unsigned int v95 = v66 + 1;
      int v96 = *(_DWORD *)(v57 + 64);
      if (v66 + 1 != v96)
      {
        unsigned int v97 = v95 >> 6;
        unsigned int v98 = v96 - 1;
        if (v95 >> 6 <= (v96 - 1) >> 6)
        {
          uint64_t v99 = 0;
          ++v194;
          uint64_t v100 = v98 >> 6;
          int v101 = v95 & 0x3F;
          BOOL v163 = v101 == 0;
          unint64_t v102 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v101;
          uint64_t v103 = v163 ? -1 : ~v102;
          unint64_t v104 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v98;
          int v105 = v97 << 6;
          uint64_t v106 = v100 - v97;
          uint64_t v107 = *(void *)v57 + 8 * v97;
          while (1)
          {
            uint64_t v108 = v99 ? -1 : v103;
            unint64_t v109 = v106 == v99 ? v104 : -1;
            unint64_t v110 = v108 & v109 & *(void *)(v107 + 8 * v99);
            if (v110) {
              break;
            }
            v105 += 64;
            if (v106 + 1 == ++v99) {
              goto LABEL_143;
            }
          }
          int v111 = __clz(__rbit64(v110)) + v105;
          uint64_t v19 = v111;
          if (v111 != -1) {
            continue;
          }
        }
      }
LABEL_143:
      uint64_t v19 = -1;
      goto LABEL_145;
    }
    uint64_t v19 = v196;
    int v22 = __p;
    a2 = v189;
LABEL_145:
    uint64_t v112 = (char *)v20 - (char *)v21;
    if ((unint64_t)((char *)v20 - (char *)v21) >= 0x10)
    {
      __pa = v22;
      if (v183) {
        char v113 = 0;
      }
      else {
        char v113 = 7;
      }
      char v114 = 1;
      uint64_t v195 = (llvm::PointerType *)llvm::StructType::get(*a4, (uint64_t)v21, v112 >> 3, 1);
      uint64_t v115 = llvm::ConstantStruct::get(v195, (llvm::Type *)v25, (v26 - v25) >> 3);
      int v116 = *(unsigned __int8 *)(a1 + 46);
      uint64_t v197 = v19;
      if ((v183 & 1 & (*(unsigned char *)(a1 + 46) != 0)) == 1)
      {
        v203[2] = v178;
        v203[3] = v179;
        char v114 = 5;
        unsigned __int8 v117 = "_MergedGlobals_";
      }
      else
      {
        unsigned __int8 v117 = "_MergedGlobals";
      }
      char v204 = 3;
      char v205 = v114;
      v203[0] = v117;
      unint64_t v118 = operator new(0x78uLL);
      uint64_t v119 = v118;
      v118[13] = v118[13] & 0x38000000 | 1;
      *(void *)unint64_t v118 = 0;
      *((void *)v118 + 1) = 0;
      *((void *)v118 + 2) = 0;
      *((void *)v118 + 3) = v118 + 8;
      BOOL v163 = v116 == 0;
      uint64_t v120 = (llvm::GlobalObject *)(v118 + 8);
      if (v163) {
        char v121 = 8;
      }
      else {
        char v121 = v113;
      }
      llvm::GlobalVariable::GlobalVariable((unint64_t *)v118 + 4, (uint64_t)a4, v195, a5, v121, (unint64_t)v115, v203, 0, 0, v173, 0);
      unsigned int v122 = v119[16] & 0xFFC0FFFF | ((v188 << 16) + 0x10000);
      v119[16] = v122;
      int8x8_t v123 = *(uint64_t ****)(*v189 + 8 * v176);
      if ((*((unsigned char *)v123 + 34) & 0x40) == 0)
      {
        uint8x8_t v124 = 0;
        size_t v125 = 0;
        if ((v122 & 0x400000) != 0)
        {
LABEL_162:
          if (v125)
          {
            uint8x8_t v124 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***(void ***)v120 + 2136, v124, v125);
            unsigned int v134 = v133;
          }
          else
          {
            unsigned int v134 = 0;
          }
          uint64_t v135 = ***(void ***)v120;
          v200[0] = (uint64_t)v120;
          int v136 = *(_DWORD *)(v135 + 2520);
          if (v136)
          {
            uint64_t v137 = *(void *)(v135 + 2504);
            int v138 = v136 - 1;
            unsigned int v139 = v138 & ((v120 >> 4) ^ (v120 >> 9));
            unsigned int v140 = (llvm::GlobalObject **)(v137 + 24 * v139);
            uint64_t v141 = *v140;
            if (*v140 == v120) {
              goto LABEL_166;
            }
            int v161 = 0;
            int v162 = 1;
            while (v141 != (llvm::GlobalObject *)-4096)
            {
              if (v161) {
                BOOL v163 = 0;
              }
              else {
                BOOL v163 = v141 == (llvm::GlobalObject *)-8192;
              }
              if (v163) {
                int v161 = v140;
              }
              unsigned int v164 = v139 + v162++;
              unsigned int v139 = v164 & v138;
              unsigned int v140 = (llvm::GlobalObject **)(v137 + 24 * v139);
              uint64_t v141 = *v140;
              if (*v140 == v120) {
                goto LABEL_166;
              }
            }
            if (v161) {
              unsigned int v169 = v161;
            }
            else {
              unsigned int v169 = v140;
            }
          }
          else
          {
            unsigned int v169 = 0;
          }
          unsigned int v140 = (llvm::GlobalObject **)sub_1CC5BF31C(v135 + 2504, (uint64_t)v200, v200, v169);
          uint64_t v170 = v200[0];
          v140[1] = 0;
          v140[2] = 0;
          *unsigned int v140 = (llvm::GlobalObject *)v170;
LABEL_166:
          v140[1] = v124;
          v140[2] = v134;
          v119[16] = v119[16] & 0xFFBFFFFF | ((v134 != 0) << 22);
LABEL_167:
          StructLayout = llvm::DataLayout::getStructLayout(v182, v195);
          uint64_t v19 = v197;
          int v22 = __pa;
          a2 = v189;
          if (v176 == v197)
          {
            char v175 = 1;
            goto LABEL_169;
          }
          uint64_t v191 = (char *)StructLayout + 16;
          __int16 v144 = *(uint64_t ****)(*v189 + 8 * v176);
          if ((*((unsigned char *)v144 + 23) & 0x10) != 0)
          {
            uint64_t v145 = ***v144;
            uint64_t v146 = *(void *)(v145 + 152);
            uint64_t v147 = *(unsigned int *)(v145 + 168);
            if (v147)
            {
              LODWORD(v148) = (v147 - 1) & ((v144 >> 4) ^ (v144 >> 9));
              unsigned int v149 = (uint64_t ****)(v146 + 16 * v148);
              unsigned int v150 = *v149;
              if (*v149 != v144)
              {
                int v151 = 1;
                do
                {
                  if (v150 == (uint64_t ***)-4096) {
                    goto LABEL_184;
                  }
                  int v152 = v148 + v151++;
                  uint64_t v148 = v152 & (v147 - 1);
                  unsigned int v150 = *(uint64_t ****)(v146 + 16 * v148);
                }
                while (v150 != v144);
                unsigned int v149 = (uint64_t ****)(v146 + 16 * v148);
              }
            }
            else
            {
LABEL_184:
              unsigned int v149 = (uint64_t ****)(v146 + 16 * v147);
            }
            uint64_t v153 = (unint64_t *)v149[1];
            unint64_t v156 = *v153;
            uint64_t v155 = v153 + 2;
            size_t v154 = v156;
            if (v156 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_224:
            }
              abort();
            if (v154 >= 0x17)
            {
              uint64_t v158 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v154 | 7) != 0x17) {
                uint64_t v158 = v154 | 7;
              }
              uint64_t v159 = v158 + 1;
              unsigned int v157 = operator new(v158 + 1);
              __dst[1] = v154;
              unint64_t v202 = v159 | 0x8000000000000000;
              __dst[0] = v157;
            }
            else
            {
              HIBYTE(v202) = v154;
              unsigned int v157 = __dst;
              if (!v154)
              {
LABEL_193:
                *((unsigned char *)v157 + v154) = 0;
                llvm::GlobalObject::copyMetadata(v120, *(const llvm::GlobalObject **)(*v189 + 8 * v176), *(void *)&v191[8 * *(unsigned int *)__pa]);
                unint64_t v206 = 0;
                int v207 = 0;
                unint64_t v206 = llvm::ConstantInt::get(v181, 0, 0);
                int v207 = llvm::ConstantInt::get(v181, *(unsigned int *)__pa, 0);
                ElementPtr = (llvm::Value *)llvm::ConstantExpr::getGetElementPtr((uint64_t)v195, (uint64_t *)v120, (uint64_t)&v206, 2, 1, 0, 0);
                llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(*v189 + 8 * v176), ElementPtr, (llvm::Value *)1);
                llvm::GlobalVariable::eraseFromParent(*(llvm::GlobalVariable **)(*v189 + 8 * v176));
              }
            }
            memmove(v157, v155, v154);
            goto LABEL_193;
          }
          size_t v154 = 0;
          HIBYTE(v202) = 0;
          unsigned int v157 = __dst;
          goto LABEL_193;
        }
LABEL_161:
        if (v125) {
          goto LABEL_162;
        }
        goto LABEL_167;
      }
      uint64_t v126 = ***v123;
      v200[0] = *(void *)(*v189 + 8 * v176);
      int v127 = *(_DWORD *)(v126 + 2520);
      if (v127)
      {
        uint64_t v128 = *(void *)(v126 + 2504);
        int v129 = v127 - 1;
        unsigned int v130 = v129 & ((v123 >> 4) ^ (v123 >> 9));
        unsigned int v131 = (uint64_t ****)(v128 + 24 * v130);
        int v132 = *v131;
        if (*v131 == v123) {
          goto LABEL_160;
        }
        int v165 = 0;
        int v166 = 1;
        while (v132 != (uint64_t ***)-4096)
        {
          if (v165) {
            BOOL v167 = 0;
          }
          else {
            BOOL v167 = v132 == (uint64_t ***)-8192;
          }
          if (v167) {
            int v165 = v131;
          }
          unsigned int v168 = v130 + v166++;
          unsigned int v130 = v168 & v129;
          unsigned int v131 = (uint64_t ****)(v128 + 24 * v130);
          int v132 = *v131;
          if (*v131 == v123) {
            goto LABEL_160;
          }
        }
        if (v165) {
          unint64_t v171 = v165;
        }
        else {
          unint64_t v171 = v131;
        }
      }
      else
      {
        unint64_t v171 = 0;
      }
      unsigned int v131 = (uint64_t ****)sub_1CC5BF31C(v126 + 2504, (uint64_t)v200, v200, v171);
      uint64_t v172 = v200[0];
      v131[1] = 0;
      v131[2] = 0;
      *unsigned int v131 = (uint64_t ***)v172;
      unsigned int v122 = v119[16];
LABEL_160:
      uint8x8_t v124 = (llvm::GlobalObject *)v131[1];
      size_t v125 = (size_t)v131[2];
      if ((v122 & 0x400000) != 0) {
        goto LABEL_162;
      }
      goto LABEL_161;
    }
LABEL_169:
    unsigned int v143 = a2;
    if (v22)
    {
      operator delete(v22);
      a2 = v143;
    }
    if (v25)
    {
      operator delete(v25);
      a2 = v143;
    }
    if (v21)
    {
      operator delete(v21);
      a2 = v143;
    }
  }
  while (v19 != -1);
  return v175 & 1;
}

uint64_t sub_1CC2AFDC4(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (char **)*a1;
  int v3 = *(_DWORD *)(a1[1] + 8);
  long long v5 = *(char **)(*a1 + 8);
  unint64_t v4 = *(void *)(*a1 + 16);
  if ((unint64_t)v5 < v4)
  {
    uint64_t v6 = (v3 + 63) >> 6;
    *(void *)long long v5 = v5 + 16;
    *((_DWORD *)v5 + 3) = 6;
    if (v6 >= 7)
    {
      *((_DWORD *)v5 + 2) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v3 + 63) >> 6) {
      bzero(v5 + 16, 8 * v6);
    }
    *((_DWORD *)v5 + 2) = v6;
    *((_DWORD *)v5 + 16) = v3;
    *((_DWORD *)v5 + 18) = 1;
    uint64_t v15 = v5 + 80;
    goto LABEL_41;
  }
  uint64_t v7 = *v2;
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *v2) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x333333333333333) {
    abort();
  }
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v7) >> 4);
  if (2 * v10 > v9) {
    unint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x199999999999999) {
    unint64_t v11 = 0x333333333333333;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 > 0x333333333333333) {
      sub_1CB833614();
    }
    uint64_t v12 = operator new(80 * v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (char *)&v12[20 * v8];
  uint64_t v14 = (v3 + 63) >> 6;
  *(void *)uint64_t v13 = v13 + 16;
  *((_DWORD *)v13 + 3) = 6;
  if (v14 >= 7)
  {
    *((_DWORD *)v13 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v3 + 63) >> 6) {
    bzero(v13 + 16, 8 * v14);
  }
  *((_DWORD *)v13 + 2) = v14;
  *((_DWORD *)v13 + 16) = v3;
  v12[20 * v8 + 18] = 1;
  uint64_t v15 = v13 + 80;
  if (v5 == v7)
  {
    *uint64_t v2 = v13;
    v2[1] = v15;
    v2[2] = (char *)&v12[20 * v11];
    goto LABEL_43;
  }
  uint64_t v29 = (char *)&v12[20 * v11];
  uint64_t v16 = 0;
  do
  {
    int v17 = &v5[v16];
    int v18 = &v13[v16];
    uint64_t v19 = &v13[v16 - 64];
    *(void *)&v13[v16 - 80] = v19;
    *(void *)&v13[v16 - 72] = 0x600000000;
    if (v13 != v5)
    {
      unsigned int v20 = *((_DWORD *)v17 - 18);
      if (v20)
      {
        long long v21 = (const void *)*((void *)v17 - 10);
        int v22 = &v5[v16];
        uint64_t v23 = (uint64_t)&v5[v16 - 64];
        if ((const void *)v23 == v21)
        {
          if (v20 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v19, v21, 8 * *((unsigned int *)v17 - 18));
          *((_DWORD *)v18 - 18) = v20;
        }
        else
        {
          *(void *)&v13[v16 - 80] = v21;
          int v24 = *((_DWORD *)v22 - 17);
          *((_DWORD *)v18 - 18) = v20;
          *((_DWORD *)v18 - 17) = v24;
          *((void *)v17 - 10) = v23;
          *((_DWORD *)v22 - 17) = 0;
        }
        *((_DWORD *)v17 - 18) = 0;
      }
    }
    *((_DWORD *)v18 - 4) = *((_DWORD *)v17 - 4);
    *((_DWORD *)v18 - 2) = *((_DWORD *)v17 - 2);
    v16 -= 80;
  }
  while (&v5[v16] != v7);
  uint64_t v7 = *v2;
  uint64_t v25 = v2[1];
  *uint64_t v2 = &v13[v16];
  v2[1] = v15;
  v2[2] = v29;
  if (v25 == v7)
  {
LABEL_43:
    uint64_t v1 = a1;
    if (!v7) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  uint64_t v1 = a1;
  do
  {
    uint64_t v27 = (char *)*((void *)v25 - 10);
    v25 -= 80;
    BOOL v26 = v27;
    if (v25 + 16 != v27) {
      free(v26);
    }
  }
  while (v25 != v7);
  if (v7) {
LABEL_40:
  }
    operator delete(v7);
LABEL_41:
  v2[1] = v15;
  return *(void *)(*v1 + 8) - 80;
}

uint64_t sub_1CC2B00DC(uint64_t result, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = a2;
    unint64_t v8 = (void *)result;
    if (a4 == 2)
    {
      uint64_t v9 = *(void *)result;
      unint64_t v10 = (llvm::DataLayout *)*a3;
      unint64_t v11 = *(llvm::Type **)(*(a2 - 1) + 24);
      unint64_t v12 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v11) + 7) >> 3;
      char Alignment = llvm::DataLayout::getAlignment(v10, v11, 1);
      unint64_t v14 = ((1 << Alignment) + v12 - 1) & -(1 << Alignment);
      uint64_t v15 = (llvm::DataLayout *)*a3;
      uint64_t v16 = *(llvm::Type **)(v9 + 24);
      unint64_t v17 = (unint64_t)(sub_1CB83544C((uint64_t)v15, (uint64_t)v16) + 7) >> 3;
      uint64_t result = llvm::DataLayout::getAlignment(v15, v16, 1);
      if (v14 < (((1 << result) + v17 - 1) & -(1 << result)))
      {
        uint64_t v18 = *v8;
        *unint64_t v8 = *(v7 - 1);
        *(v7 - 1) = v18;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v47 = a5;
      unint64_t v48 = a4 >> 1;
      unsigned int v49 = (void *)(result + 8 * (a4 >> 1));
      unint64_t v50 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1CC2B0580(result, v49, a3, v50, a5);
        uint64_t v51 = &v47[v48];
        uint64_t result = sub_1CC2B0580((uint64_t)&v8[a4 >> 1], v7, a3, a4 - (a4 >> 1), v51);
        unint64_t v52 = &v47[a4];
        unint64_t v53 = v51;
        uint64_t v75 = v51;
        while (v53 != v52)
        {
          uint64_t v54 = v53;
          uint64_t v55 = v8;
          uint64_t v56 = *v47;
          uint64_t v57 = (llvm::DataLayout *)*a3;
          uint64_t v58 = *(llvm::Type **)(*v53 + 24);
          uint64_t v59 = v52;
          unint64_t v60 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v58) + 7) >> 3;
          char v61 = llvm::DataLayout::getAlignment(v57, v58, 1);
          unint64_t v62 = ((1 << v61) + v60 - 1) & -(1 << v61);
          unsigned int v63 = (llvm::DataLayout *)*a3;
          unsigned int v64 = *(llvm::Type **)(v56 + 24);
          unint64_t v65 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v64) + 7) >> 3;
          uint64_t result = llvm::DataLayout::getAlignment(v63, v64, 1);
          unint64_t v66 = ((1 << result) + v65 - 1) & -(1 << result);
          if (v62 < v66) {
            uint64_t v67 = v54;
          }
          else {
            uint64_t v67 = v47;
          }
          v47 += v62 >= v66;
          unint64_t v53 = &v54[v62 < v66];
          uint64_t v68 = *v67;
          unint64_t v52 = v59;
          uint64_t v51 = v75;
          *uint64_t v55 = v68;
          unint64_t v8 = v55 + 1;
          if (v47 == v75)
          {
            if (v53 != v52)
            {
              uint64_t v69 = 0;
              if (v62 < v66) {
                char v70 = 1;
              }
              else {
                char v70 = 2;
              }
              int v71 = &v54[v70 & 1];
              do
              {
                v8[v69] = v71[v69];
                ++v69;
              }
              while (&v71[v69] != v52);
            }
            return result;
          }
        }
        if (v47 != v51)
        {
          uint64_t v72 = 0;
          do
          {
            v8[v72] = v47[v72];
            ++v72;
          }
          while (&v47[v72] != v51);
        }
      }
      else
      {
        sub_1CC2B00DC(result, v49, a3, v50, a5, a6);
        sub_1CC2B00DC(&v8[a4 >> 1], v7, a3, a4 - (a4 >> 1), v47, a6);
        return sub_1CC2B09B8((uint64_t)v8, &v8[a4 >> 1], v7, a3, a4 >> 1, a4 - (a4 >> 1), v47, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      unsigned int v20 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        uint64_t v74 = 0;
        long long v21 = (uint64_t *)result;
        do
        {
          uint64_t v23 = *v21;
          uint64_t v22 = v21[1];
          long long v21 = v20;
          int v24 = (llvm::DataLayout *)*a3;
          uint64_t v25 = *(llvm::Type **)(v22 + 24);
          unint64_t v26 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v25) + 7) >> 3;
          char v27 = llvm::DataLayout::getAlignment(v24, v25, 1);
          unint64_t v28 = ((1 << v27) + v26 - 1) & -(1 << v27);
          uint64_t v29 = (llvm::DataLayout *)*a3;
          uint64_t v30 = *(llvm::Type **)(v23 + 24);
          unint64_t v31 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v30) + 7) >> 3;
          uint64_t result = llvm::DataLayout::getAlignment(v29, v30, 1);
          if (v28 < (((1 << result) + v31 - 1) & -(1 << result)))
          {
            uint64_t v32 = *v21;
            uint64_t v33 = v74;
            while (1)
            {
              *(void *)((char *)v8 + v33 + 8) = *(void *)((char *)v8 + v33);
              if (!v33) {
                break;
              }
              uint64_t v34 = *(void *)((char *)v8 + v33 - 8);
              unsigned int v35 = (llvm::DataLayout *)*a3;
              unint64_t v36 = *(llvm::Type **)(v32 + 24);
              unint64_t v37 = v8;
              unint64_t v38 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v36) + 7) >> 3;
              char v39 = llvm::DataLayout::getAlignment(v35, v36, 1);
              unint64_t v40 = ((1 << v39) + v38 - 1) & -(1 << v39);
              unsigned int v41 = (llvm::DataLayout *)*a3;
              uint64_t v42 = *(llvm::Type **)(v34 + 24);
              unint64_t v43 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v42) + 7) >> 3;
              uint64_t result = llvm::DataLayout::getAlignment(v41, v42, 1);
              v33 -= 8;
              BOOL v44 = v40 >= (((1 << result) + v43 - 1) & -(1 << result));
              unint64_t v8 = v37;
              if (v44)
              {
                unint64_t v45 = (void *)((char *)v37 + v33 + 8);
                goto LABEL_16;
              }
            }
            unint64_t v45 = v8;
LABEL_16:
            uint64_t v7 = a2;
            void *v45 = v32;
          }
          unsigned int v20 = v21 + 1;
          v74 += 8;
        }
        while (v21 + 1 != v7);
      }
    }
  }
  return result;
}

uint64_t sub_1CC2B0580(uint64_t result, void *a2, uint64_t *a3, unint64_t a4, void *a5)
{
  if (a4)
  {
    long long v5 = a5;
    uint64_t v7 = (void *)result;
    if (a4 == 1)
    {
LABEL_10:
      void *v5 = *v7;
      return result;
    }
    uint64_t v9 = a2;
    if (a4 == 2)
    {
      unint64_t v10 = a2 - 1;
      uint64_t v11 = *(void *)result;
      unint64_t v12 = (llvm::DataLayout *)*a3;
      uint64_t v13 = *(llvm::Type **)(*(a2 - 1) + 24);
      unint64_t v14 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v13) + 7) >> 3;
      char Alignment = llvm::DataLayout::getAlignment(v12, v13, 1);
      unint64_t v16 = ((1 << Alignment) + v14 - 1) & -(1 << Alignment);
      unint64_t v17 = (llvm::DataLayout *)*a3;
      uint64_t v18 = *(llvm::Type **)(v11 + 24);
      unint64_t v19 = (unint64_t)(sub_1CB83544C((uint64_t)v17, (uint64_t)v18) + 7) >> 3;
      uint64_t result = llvm::DataLayout::getAlignment(v17, v18, 1);
      unint64_t v20 = ((1 << result) + v19 - 1) & -(1 << result);
      BOOL v21 = v16 >= v20;
      if (v16 >= v20) {
        uint64_t v22 = v7;
      }
      else {
        uint64_t v22 = v10;
      }
      *v5++ = *v22;
      if (v21) {
        uint64_t v7 = v10;
      }
      goto LABEL_10;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v47 = (void *)(result + 8 * (a4 >> 1));
      sub_1CC2B00DC(result, v47, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = sub_1CC2B00DC(&v7[a4 >> 1], v9, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v48 = &v7[a4 >> 1];
      while (v48 != v9)
      {
        unsigned int v49 = v48;
        uint64_t v50 = *v7;
        uint64_t v51 = (llvm::DataLayout *)*a3;
        unint64_t v52 = *(llvm::Type **)(*v48 + 24);
        unint64_t v53 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v52) + 7) >> 3;
        char v54 = llvm::DataLayout::getAlignment(v51, v52, 1);
        unint64_t v55 = ((1 << v54) + v53 - 1) & -(1 << v54);
        uint64_t v56 = (llvm::DataLayout *)*a3;
        uint64_t v57 = *(llvm::Type **)(v50 + 24);
        unint64_t v58 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v57) + 7) >> 3;
        uint64_t result = llvm::DataLayout::getAlignment(v56, v57, 1);
        unint64_t v59 = (1 << result) + v58;
        uint64_t v9 = a2;
        unint64_t v60 = (v59 - 1) & -(1 << result);
        if (v55 >= v60) {
          char v61 = v7;
        }
        else {
          char v61 = v49;
        }
        unint64_t v48 = &v49[v55 < v60];
        v7 += v55 >= v60;
        *v5++ = *v61;
        if (v7 == v47)
        {
          if (v48 != a2)
          {
            uint64_t v62 = 0;
            unsigned int v63 = &v49[v55 < v60];
            do
            {
              v5[v62] = v63[v62];
              ++v62;
            }
            while (&v63[v62] != a2);
          }
          return result;
        }
      }
      if (v7 != v47)
      {
        uint64_t v64 = 0;
        do
        {
          v5[v64] = v7[v64];
          ++v64;
        }
        while (&v7[v64] != v47);
      }
    }
    else if ((void *)result != a2)
    {
      uint64_t v23 = result + 8;
      *a5 = *(void *)result;
      if ((void *)(result + 8) != a2)
      {
        uint64_t v24 = 0;
        unint64_t v66 = a5;
        do
        {
          unint64_t v65 = v66;
          uint64_t v25 = *v66;
          unint64_t v26 = (llvm::DataLayout *)*a3;
          char v27 = *(llvm::Type **)(*(void *)v23 + 24);
          unint64_t v28 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v27) + 7) >> 3;
          char v29 = llvm::DataLayout::getAlignment(v26, v27, 1);
          unint64_t v30 = ((1 << v29) + v28 - 1) & -(1 << v29);
          unint64_t v31 = (llvm::DataLayout *)*a3;
          uint64_t v32 = *(llvm::Type **)(v25 + 24);
          unint64_t v33 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v32) + 7) >> 3;
          uint64_t result = llvm::DataLayout::getAlignment(v31, v32, 1);
          unint64_t v34 = ((1 << result) + v33 - 1) & -(1 << result);
          unsigned int v35 = ++v66;
          if (v30 < v34)
          {
            v65[1] = *v65;
            unsigned int v35 = v5;
            if (v65 != v5)
            {
              uint64_t v36 = v24;
              while (1)
              {
                unsigned int v35 = (void *)((char *)v5 + v36);
                uint64_t v37 = *(void *)((char *)v5 + v36 - 8);
                unint64_t v38 = (llvm::DataLayout *)*a3;
                char v39 = *(llvm::Type **)(*(void *)v23 + 24);
                unint64_t v40 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v39) + 7) >> 3;
                char v41 = llvm::DataLayout::getAlignment(v38, v39, 1);
                unint64_t v42 = ((1 << v41) + v40 - 1) & -(1 << v41);
                unint64_t v43 = (llvm::DataLayout *)*a3;
                BOOL v44 = *(llvm::Type **)(v37 + 24);
                unint64_t v45 = (unint64_t)(sub_1CB83544C(*a3, (uint64_t)v44) + 7) >> 3;
                uint64_t result = llvm::DataLayout::getAlignment(v43, v44, 1);
                if (v42 >= (((1 << result) + v45 - 1) & -(1 << result))) {
                  break;
                }
                *unsigned int v35 = *(v35 - 1);
                v36 -= 8;
                if (!v36)
                {
                  unsigned int v35 = v5;
                  break;
                }
              }
            }
          }
          uint64_t v46 = *(void *)v23;
          v23 += 8;
          *unsigned int v35 = v46;
          v24 += 8;
        }
        while ((void *)v23 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CC2B09B8(uint64_t result, void *a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v115 = a6;
  if (!a6) {
    return result;
  }
  uint64_t v11 = (void *)result;
  while (a5 > a8 && v115 > a8)
  {
    if (!a5) {
      return result;
    }
    while (1)
    {
      unint64_t v12 = a2;
      uint64_t v13 = *v11;
      unint64_t v14 = (llvm::DataLayout *)*a4;
      uint64_t v15 = *(llvm::Type **)(*a2 + 24);
      unint64_t v16 = (unint64_t)(sub_1CB83544C(*a4, (uint64_t)v15) + 7) >> 3;
      char Alignment = llvm::DataLayout::getAlignment(v14, v15, 1);
      unint64_t v18 = ((1 << Alignment) + v16 - 1) & -(1 << Alignment);
      unint64_t v19 = (llvm::DataLayout *)*a4;
      unint64_t v20 = *(llvm::Type **)(v13 + 24);
      unint64_t v21 = (unint64_t)(sub_1CB83544C(*a4, (uint64_t)v20) + 7) >> 3;
      uint64_t result = llvm::DataLayout::getAlignment(v19, v20, 1);
      if (v18 < (((1 << result) + v21 - 1) & -(1 << result))) {
        break;
      }
      ++v11;
      --a5;
      a2 = v12;
      if (!a5) {
        return result;
      }
    }
    uint64_t v112 = a8;
    uint64_t v22 = v115;
    if (a5 >= v115)
    {
      unint64_t v42 = v12;
      char v27 = a7;
      if (a5 == 1)
      {
        uint64_t v109 = *v11;
        void *v11 = *v12;
        *unint64_t v12 = v109;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v43 = a5;
      }
      else {
        uint64_t v43 = a5 + 1;
      }
      unint64_t v26 = v43 >> 1;
      uint64_t v25 = a3;
      unint64_t v28 = &v11[v43 >> 1];
      unint64_t v24 = a3 - v12;
      unint64_t v118 = a4;
      if (a3 != v12)
      {
        uint64_t v117 = v43 >> 1;
        char v121 = &v11[v43 >> 1];
        BOOL v44 = (llvm::DataLayout *)*a4;
        uint64_t v25 = v12;
        do
        {
          unint64_t v45 = &v25[v24 >> 1];
          uint64_t v47 = *v45;
          uint64_t v46 = v45 + 1;
          uint64_t v48 = *v28;
          unsigned int v49 = *(llvm::Type **)(v47 + 24);
          unint64_t v50 = (unint64_t)(sub_1CB83544C((uint64_t)v44, (uint64_t)v49) + 7) >> 3;
          char v51 = llvm::DataLayout::getAlignment(v44, v49, 1);
          unint64_t v52 = ((1 << v51) + v50 - 1) & -(1 << v51);
          unint64_t v53 = *(llvm::Type **)(v48 + 24);
          unint64_t v54 = (unint64_t)(sub_1CB83544C((uint64_t)v44, (uint64_t)v53) + 7) >> 3;
          char v55 = llvm::DataLayout::getAlignment(v44, v53, 1);
          unint64_t v28 = v121;
          unint64_t v56 = ((1 << v55) + v54 - 1) & -(1 << v55);
          if (v52 >= v56) {
            v24 >>= 1;
          }
          else {
            v24 += ~(v24 >> 1);
          }
          if (v52 < v56) {
            uint64_t v25 = v46;
          }
        }
        while (v24);
        unint64_t v42 = v12;
        unint64_t v24 = v25 - v12;
        char v27 = a7;
        uint64_t v22 = v115;
        unint64_t v26 = v117;
      }
    }
    else
    {
      if (v115 >= 0) {
        uint64_t v23 = v115;
      }
      else {
        uint64_t v23 = v115 + 1;
      }
      unint64_t v24 = v23 >> 1;
      uint64_t v25 = &v12[v23 >> 1];
      unint64_t v26 = v12 - v11;
      char v27 = a7;
      if (v12 == v11)
      {
        unint64_t v28 = v12;
        uint64_t v11 = v12;
        unint64_t v60 = &v12[v23 >> 1];
        goto LABEL_47;
      }
      uint64_t v111 = v23 >> 1;
      unint64_t v28 = v11;
      int v116 = &v12[v23 >> 1];
      unint64_t v118 = a4;
      do
      {
        unint64_t v119 = v26 >> 1;
        uint64_t v120 = v28;
        char v29 = &v28[v26 >> 1];
        uint64_t v31 = *v29;
        unint64_t v30 = v29 + 1;
        uint64_t v32 = (llvm::DataLayout *)*v118;
        unint64_t v33 = *(llvm::Type **)(*v116 + 24);
        unint64_t v34 = v26;
        unint64_t v35 = (unint64_t)(sub_1CB83544C(*v118, (uint64_t)v33) + 7) >> 3;
        char v36 = llvm::DataLayout::getAlignment(v32, v33, 1);
        unint64_t v37 = ((1 << v36) + v35 - 1) & -(1 << v36);
        unint64_t v38 = (llvm::DataLayout *)*v118;
        char v39 = *(llvm::Type **)(v31 + 24);
        unint64_t v40 = (unint64_t)(sub_1CB83544C(*v118, (uint64_t)v39) + 7) >> 3;
        char v41 = llvm::DataLayout::getAlignment(v38, v39, 1);
        unint64_t v28 = v120;
        if (v37 < (((1 << v41) + v40 - 1) & -(1 << v41)))
        {
          unint64_t v26 = v119;
        }
        else
        {
          unint64_t v28 = v30;
          unint64_t v26 = v34 + ~(v34 >> 1);
        }
      }
      while (v26);
      unint64_t v26 = v28 - v11;
      char v27 = a7;
      uint64_t v22 = v115;
      unint64_t v42 = v12;
      uint64_t v25 = v116;
      unint64_t v24 = v111;
    }
    if (v28 == v42)
    {
      unint64_t v28 = v42;
      unint64_t v60 = v25;
    }
    else if (v42 == v25)
    {
      uint64_t v25 = v42;
      unint64_t v60 = v28;
    }
    else
    {
      if (v28 + 1 != v42)
      {
        unint64_t v57 = v26;
        if (v42 + 1 == v25)
        {
          uint64_t v66 = *(v25 - 1);
          unint64_t v60 = v28 + 1;
          a4 = v118;
          if (v25 - 1 != v28)
          {
            uint64_t v67 = v28;
            memmove(v28 + 1, v28, (char *)(v25 - 1) - (char *)v28);
            unint64_t v28 = v67;
          }
          void *v28 = v66;
          uint64_t v22 = v115;
        }
        else
        {
          unint64_t v58 = v28;
          unint64_t v59 = sub_1CC057214(v28, v42, v25);
          unint64_t v28 = v58;
          unint64_t v60 = v59;
          a4 = v118;
        }
        unint64_t v26 = v57;
        goto LABEL_47;
      }
      unint64_t v61 = v24;
      uint64_t v62 = *v28;
      int64_t v63 = (char *)v25 - (char *)v42;
      unint64_t v64 = v26;
      unint64_t v65 = v28;
      memmove(v28, v42, (char *)v25 - (char *)v42);
      unint64_t v28 = v65;
      unint64_t v26 = v64;
      unint64_t v60 = (void *)((char *)v65 + v63);
      void *v60 = v62;
      unint64_t v24 = v61;
    }
    a4 = v118;
LABEL_47:
    a5 -= v26;
    unint64_t v68 = v22 - v24;
    if ((uint64_t)(v24 + v26) >= (uint64_t)(v68 + a5))
    {
      char v70 = v25;
      unint64_t v71 = v26;
      uint64_t v72 = v27;
      a8 = v112;
      uint64_t v25 = v28;
      uint64_t result = sub_1CC2B09B8(v60, v70, a3, a4, a5, v68, v72, v112);
      unint64_t v68 = v24;
      a5 = v71;
      a3 = v60;
    }
    else
    {
      uint64_t v69 = v27;
      a8 = v112;
      uint64_t result = sub_1CC2B09B8(v11, v28, v60, a4, v26, v24, v69, v112);
      uint64_t v11 = v60;
    }
    a2 = v25;
    uint64_t v115 = v68;
    if (!v68) {
      return result;
    }
  }
  if (a5 <= v115)
  {
    if (v11 != a2)
    {
      uint64_t v92 = 0;
      do
      {
        a7[v92] = v11[v92];
        ++v92;
      }
      while (&v11[v92] != a2);
      if (v92 * 8)
      {
        int v93 = a7;
        while (a2 != a3)
        {
          uint64_t v94 = *v93;
          unsigned int v95 = (llvm::DataLayout *)*a4;
          int v96 = *(llvm::Type **)(*a2 + 24);
          unsigned int v97 = a2;
          unsigned int v98 = a4;
          unint64_t v99 = (unint64_t)(sub_1CB83544C(*a4, (uint64_t)v96) + 7) >> 3;
          char v100 = llvm::DataLayout::getAlignment(v95, v96, 1);
          unint64_t v101 = ((1 << v100) + v99 - 1) & -(1 << v100);
          unint64_t v102 = (llvm::DataLayout *)*v98;
          uint64_t v103 = *(llvm::Type **)(v94 + 24);
          unint64_t v104 = (unint64_t)(sub_1CB83544C(*v98, (uint64_t)v103) + 7) >> 3;
          uint64_t result = llvm::DataLayout::getAlignment(v102, v103, 1);
          BOOL v105 = v101 >= (((1 << result) + v104 - 1) & -(1 << result));
          a4 = v98;
          unsigned int v106 = !v105;
          unsigned int v107 = v105;
          if (v105) {
            uint64_t v108 = v93;
          }
          else {
            uint64_t v108 = v97;
          }
          v93 += v107;
          a2 = &v97[v106];
          *v11++ = *v108;
          if (&a7[v92] == v93) {
            return result;
          }
        }
        return (uint64_t)memmove(v11, v93, (char *)a7 - (char *)v93 + v92 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v73 = 0;
    do
    {
      a7[v73] = a2[v73];
      ++v73;
    }
    while (&a2[v73] != a3);
    if (v73 * 8)
    {
      uint64_t v74 = &a7[v73];
      uint64_t v75 = a3 - 1;
      while (a2 != v11)
      {
        unint64_t v76 = a4;
        unint64_t v77 = a2 - 1;
        uint64_t v78 = *(a2 - 1);
        uint64_t v79 = (llvm::DataLayout *)*v76;
        uint64_t v80 = *(llvm::Type **)(*(v74 - 1) + 24);
        uint64_t v81 = a2;
        unint64_t v82 = (unint64_t)(sub_1CB83544C(*v76, (uint64_t)v80) + 7) >> 3;
        char v83 = llvm::DataLayout::getAlignment(v79, v80, 1);
        unint64_t v84 = ((1 << v83) + v82 - 1) & -(1 << v83);
        int8x8_t v85 = (llvm::DataLayout *)*v76;
        uint64_t v86 = *(llvm::Type **)(v78 + 24);
        unint64_t v87 = (unint64_t)(sub_1CB83544C(*v76, (uint64_t)v86) + 7) >> 3;
        uint64_t result = llvm::DataLayout::getAlignment(v85, v86, 1);
        unint64_t v88 = (1 << result) + v87;
        a4 = v76;
        unint64_t v89 = (v88 - 1) & -(1 << result);
        BOOL v90 = v84 >= v89;
        if (v84 >= v89) {
          uint64_t v91 = v74;
        }
        else {
          uint64_t v91 = v81;
        }
        if (v90) {
          a2 = v81;
        }
        else {
          a2 = v77;
        }
        if (v90) {
          --v74;
        }
        *v75-- = *(v91 - 1);
        if (v74 == a7) {
          return result;
        }
      }
      if (v74 != a7)
      {
        uint64_t v110 = 0;
        do
        {
          v75[v110] = v74[v110 - 1];
          --v110;
        }
        while (&v74[v110] != a7);
      }
    }
  }
  return result;
}

uint64_t *sub_1CC2B1148(uint64_t a1, uint64_t *a2)
{
  unint64_t v8 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CC2B1224(a1, v7);
    unint64_t v8 = 0;
    sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

void *sub_1CC2B1224(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v19 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          uint64_t v15 = v19;
          uint64_t v16 = v13[1];
          *unint64_t v19 = *v13;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 16 * v17;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

void sub_1CC2B1360(uint64_t a1, int8x8_t **a2, unint64_t a3, void **a4, uint64_t a5)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  if (a3 >= 2)
  {
    uint64_t v6 = a1;
    if (a3 == 2)
    {
      uint64_t v7 = (uint64_t)(a2 - 10);
      unsigned int v8 = *(a2 - 10);
      uint64_t v9 = *((unsigned int *)a2 - 18);
      if (v9)
      {
        int v10 = 0;
        uint64_t v11 = 8 * v9;
        do
        {
          int8x8_t v12 = *v8++;
          uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
          v13.i16[0] = vaddlv_u8(v13);
          v10 += v13.i32[0];
          v11 -= 8;
        }
        while (v11);
      }
      else
      {
        int v10 = 0;
      }
      uint64_t v20 = *(unsigned int *)(a1 + 8);
      if (v20)
      {
        int v21 = 0;
        uint64_t v22 = *(int8x8_t **)a1;
        uint64_t v23 = 8 * v20;
        do
        {
          int8x8_t v24 = *v22++;
          uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24);
          v25.i16[0] = vaddlv_u8(v25);
          v21 += v25.i32[0];
          v23 -= 8;
        }
        while (v23);
      }
      else
      {
        int v21 = 0;
      }
      if (*((_DWORD *)a2 - 2) * v10 < (*(_DWORD *)(a1 + 72) * v21))
      {
        sub_1CC2B1EF0(a1, v7);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((int8x8_t **)a1 != a2)
      {
        unint64_t v26 = (void **)(a1 + 80);
        if ((int8x8_t **)(a1 + 80) != a2)
        {
          uint64_t v27 = a1;
          do
          {
            unint64_t v28 = (const void **)v26;
            char v29 = (int8x8_t *)*v26;
            uint64_t v30 = *(unsigned int *)(v27 + 88);
            if (v30)
            {
              int v31 = 0;
              uint64_t v32 = 8 * v30;
              unint64_t v33 = v29;
              do
              {
                int8x8_t v34 = *v33++;
                uint8x8_t v35 = (uint8x8_t)vcnt_s8(v34);
                v35.i16[0] = vaddlv_u8(v35);
                v31 += v35.i32[0];
                v32 -= 8;
              }
              while (v32);
            }
            else
            {
              int v31 = 0;
            }
            uint64_t v36 = *(unsigned int *)(v27 + 8);
            if (v36)
            {
              int v37 = 0;
              unint64_t v38 = *(int8x8_t **)v27;
              uint64_t v39 = 8 * v36;
              do
              {
                int8x8_t v40 = *v38++;
                uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
                v41.i16[0] = vaddlv_u8(v41);
                v37 += v41.i32[0];
                v39 -= 8;
              }
              while (v39);
            }
            else
            {
              int v37 = 0;
            }
            int v42 = *(_DWORD *)(v27 + 152);
            if (v42 * v31 < (*(_DWORD *)(v27 + 72) * v37))
            {
              uint8x8_t v124 = v126;
              unint64_t v125 = 0x600000000;
              if (&v124 != (void **)v28 && v30)
              {
                if (v29 == (int8x8_t *)(v27 + 96))
                {
                  if (v30 >= 7) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v126, *v28, 8 * v30);
                  LODWORD(v125) = v30;
                  int v42 = *(_DWORD *)(v27 + 152);
                }
                else
                {
                  uint8x8_t v124 = v29;
                  unint64_t v125 = __PAIR64__(*(_DWORD *)(v27 + 92), v30);
                  void *v28 = (const void *)(v27 + 96);
                  *(_DWORD *)(v27 + 92) = 0;
                }
                *(_DWORD *)(v27 + 88) = 0;
              }
              int v127 = *(_DWORD *)(v27 + 144);
              int v128 = v42;
              uint64_t v43 = *(int8x8_t **)v27;
              BOOL v44 = v28;
              while (1)
              {
                uint64_t v45 = v27;
                uint64_t v46 = (int8x8_t *)(v27 + 16);
                if (v43 == v46)
                {
                  uint64_t v47 = *(unsigned int *)(v45 + 8);
                  uint64_t v48 = *((unsigned int *)v44 + 2);
                  if (v48 < v47)
                  {
                    if (*((_DWORD *)v44 + 3) < v47)
                    {
                      *((_DWORD *)v44 + 2) = 0;
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v48) {
                      memmove((void *)*v44, v43, 8 * v48);
                    }
                    else {
                      uint64_t v48 = 0;
                    }
                    uint64_t v61 = *(unsigned int *)(v45 + 8);
                    if (v48 != v61) {
                      memcpy((char *)*v44 + 8 * v48, (const void *)(*(void *)v45 + 8 * v48), *(void *)v45 + 8 * v61 - (*(void *)v45 + 8 * v48));
                    }
                  }
                  else if (v47)
                  {
                    memmove((void *)*v44, v43, 8 * v47);
                  }
                  *((_DWORD *)v44 + 2) = v47;
                }
                else
                {
                  if (*v44 != v44 + 2)
                  {
                    free((void *)*v44);
                    uint64_t v43 = *(int8x8_t **)v45;
                  }
                  *BOOL v44 = v43;
                  v44[1] = *(const void **)(v45 + 8);
                  *(void *)uint64_t v45 = v46;
                  *(_DWORD *)(v45 + 12) = 0;
                }
                *(_DWORD *)(v45 + 8) = 0;
                *((_DWORD *)v44 + 16) = *(_DWORD *)(v45 + 64);
                *((_DWORD *)v44 + 18) = *(_DWORD *)(v45 + 72);
                unsigned int v49 = v124;
                if (v45 == v6) {
                  break;
                }
                if (v125)
                {
                  int v50 = 0;
                  uint64_t v51 = 8 * v125;
                  unint64_t v52 = (int8x8_t *)v124;
                  do
                  {
                    int8x8_t v53 = *v52++;
                    uint8x8_t v54 = (uint8x8_t)vcnt_s8(v53);
                    v54.i16[0] = vaddlv_u8(v54);
                    v50 += v54.i32[0];
                    v51 -= 8;
                  }
                  while (v51);
                }
                else
                {
                  int v50 = 0;
                }
                uint64_t v43 = *(int8x8_t **)(v45 - 80);
                uint64_t v55 = *(unsigned int *)(v45 - 72);
                if (v55)
                {
                  int v56 = 0;
                  uint64_t v57 = 8 * v55;
                  unint64_t v58 = *(int8x8_t **)(v45 - 80);
                  do
                  {
                    int8x8_t v59 = *v58++;
                    uint8x8_t v60 = (uint8x8_t)vcnt_s8(v59);
                    v60.i16[0] = vaddlv_u8(v60);
                    v56 += v60.i32[0];
                    v57 -= 8;
                  }
                  while (v57);
                }
                else
                {
                  int v56 = 0;
                }
                uint64_t v27 = v45 - 80;
                BOOL v44 = (const void **)v45;
                if (v128 * v50 >= (*(_DWORD *)(v45 - 8) * v56)) {
                  goto LABEL_68;
                }
              }
              uint64_t v45 = v6;
LABEL_68:
              if ((void **)v45 != &v124)
              {
                if (v124 == v126)
                {
                  int v62 = v125;
                  uint64_t v63 = *(unsigned int *)(v45 + 8);
                  if (v63 < v125)
                  {
                    if (*(_DWORD *)(v45 + 12) < v125)
                    {
                      *(_DWORD *)(v45 + 8) = 0;
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v63) {
                      memmove(*(void **)v45, v126, 8 * v63);
                    }
                    else {
                      uint64_t v63 = 0;
                    }
                    if (v63 != v125) {
                      memcpy((void *)(*(void *)v45 + 8 * v63), (char *)v124 + 8 * v63, 8 * v125 - 8 * v63);
                    }
                  }
                  else if (v125)
                  {
                    memmove(*(void **)v45, v126, 8 * v125);
                  }
                  *(_DWORD *)(v45 + 8) = v62;
                }
                else
                {
                  if (*(void *)v45 != v45 + 16)
                  {
                    free(*(void **)v45);
                    unsigned int v49 = v124;
                  }
                  *(void *)uint64_t v45 = v49;
                  *(void *)(v45 + 8) = v125;
                  uint8x8_t v124 = v126;
                  HIDWORD(v125) = 0;
                }
                LODWORD(v125) = 0;
                unsigned int v49 = v124;
              }
              *(_DWORD *)(v45 + 64) = v127;
              *(_DWORD *)(v45 + 72) = v128;
              if (v49 != v126) {
                free(v49);
              }
            }
            unint64_t v26 = (void **)(v28 + 10);
            uint64_t v27 = (uint64_t)v28;
          }
          while (v28 + 10 != (const void **)a2);
        }
      }
    }
    else
    {
      unint64_t v17 = a3 >> 1;
      uint64_t v18 = (int8x8_t **)(a1 + 80 * (a3 >> 1));
      unint64_t v19 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CC2B2208(a1, v18, v19, (uint64_t)a4);
        uint64_t v64 = (uint64_t)&a4[10 * v17];
        sub_1CC2B2208(v6 + 80 * (a3 >> 1), a2, a3 - (a3 >> 1), v64);
        unint64_t v120 = a3;
        char v121 = a4;
        unint64_t v65 = &a4[10 * a3];
        uint64_t v66 = v64;
        uint64_t v67 = a4;
        while ((void **)v66 != v65)
        {
          unint64_t v68 = *(int8x8_t **)v66;
          uint64_t v69 = *(unsigned int *)(v66 + 8);
          int v70 = 0;
          if (v69)
          {
            uint64_t v71 = 8 * v69;
            uint64_t v72 = *(int8x8_t **)v66;
            do
            {
              int8x8_t v73 = *v72++;
              uint8x8_t v74 = (uint8x8_t)vcnt_s8(v73);
              v74.i16[0] = vaddlv_u8(v74);
              v70 += v74.i32[0];
              v71 -= 8;
            }
            while (v71);
          }
          uint64_t v75 = (int8x8_t *)*v67;
          uint64_t v76 = *((unsigned int *)v67 + 2);
          int v77 = 0;
          if (v76)
          {
            uint64_t v78 = 8 * v76;
            uint64_t v79 = (int8x8_t *)*v67;
            do
            {
              int8x8_t v80 = *v79++;
              uint8x8_t v81 = (uint8x8_t)vcnt_s8(v80);
              v81.i16[0] = vaddlv_u8(v81);
              v77 += v81.i32[0];
              v78 -= 8;
            }
            while (v78);
          }
          int v82 = *(_DWORD *)(v66 + 72);
          unsigned int v83 = v82 * v70;
          int v84 = *((_DWORD *)v67 + 18);
          if (v83 >= v84 * v77)
          {
            if ((void **)v6 != v67)
            {
              if (v75 == (int8x8_t *)(v67 + 2))
              {
                uint64_t v86 = *(unsigned int *)(v6 + 8);
                if (v86 < v76)
                {
                  if (*(_DWORD *)(v6 + 12) < v76)
                  {
                    *(_DWORD *)(v6 + 8) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v86) {
                    memmove(*(void **)v6, *v67, 8 * v86);
                  }
                  else {
                    uint64_t v86 = 0;
                  }
                  uint64_t v88 = *((unsigned int *)v67 + 2);
                  if (v86 != v88) {
                    memcpy((void *)(*(void *)v6 + 8 * v86), (char *)*v67 + 8 * v86, (unsigned char *)*v67 + 8 * v88 - ((unsigned char *)*v67 + 8 * v86));
                  }
                }
                else if (v76)
                {
                  memmove(*(void **)v6, *v67, 8 * v76);
                }
                *(_DWORD *)(v6 + 8) = v76;
              }
              else
              {
                if (*(void *)v6 != v6 + 16)
                {
                  free(*(void **)v6);
                  uint64_t v75 = (int8x8_t *)*v67;
                  LODWORD(v76) = *((_DWORD *)v67 + 2);
                }
                *(void *)uint64_t v6 = v75;
                *(_DWORD *)(v6 + 8) = v76;
                *(_DWORD *)(v6 + 12) = *((_DWORD *)v67 + 3);
                void *v67 = v67 + 2;
                *((_DWORD *)v67 + 3) = 0;
              }
              *((_DWORD *)v67 + 2) = 0;
              int v84 = *((_DWORD *)v67 + 18);
            }
            *(_DWORD *)(v6 + 64) = *((_DWORD *)v67 + 16);
            *(_DWORD *)(v6 + 72) = v84;
            v67 += 10;
          }
          else
          {
            if (v6 != v66)
            {
              if (v68 == (int8x8_t *)(v66 + 16))
              {
                uint64_t v85 = *(unsigned int *)(v6 + 8);
                if (v85 < v69)
                {
                  if (*(_DWORD *)(v6 + 12) < v69)
                  {
                    *(_DWORD *)(v6 + 8) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v85) {
                    memmove(*(void **)v6, v68, 8 * v85);
                  }
                  else {
                    uint64_t v85 = 0;
                  }
                  uint64_t v87 = *(unsigned int *)(v66 + 8);
                  if (v85 != v87) {
                    memcpy((void *)(*(void *)v6 + 8 * v85), (const void *)(*(void *)v66 + 8 * v85), *(void *)v66 + 8 * v87 - (*(void *)v66 + 8 * v85));
                  }
                }
                else if (v69)
                {
                  memmove(*(void **)v6, v68, 8 * v69);
                }
                *(_DWORD *)(v6 + 8) = v69;
              }
              else
              {
                if (*(void *)v6 != v6 + 16)
                {
                  free(*(void **)v6);
                  unint64_t v68 = *(int8x8_t **)v66;
                  LODWORD(v69) = *(_DWORD *)(v66 + 8);
                }
                *(void *)uint64_t v6 = v68;
                *(_DWORD *)(v6 + 8) = v69;
                *(_DWORD *)(v6 + 12) = *(_DWORD *)(v66 + 12);
                *(void *)uint64_t v66 = v66 + 16;
                *(_DWORD *)(v66 + 12) = 0;
              }
              *(_DWORD *)(v66 + 8) = 0;
              int v82 = *(_DWORD *)(v66 + 72);
            }
            *(_DWORD *)(v6 + 64) = *(_DWORD *)(v66 + 64);
            *(_DWORD *)(v6 + 72) = v82;
            v66 += 80;
          }
          v6 += 80;
          if (v67 == (void **)v64)
          {
            if ((void **)v66 != v65)
            {
              uint64_t v102 = 0;
              uint64_t v103 = v66;
              unsigned int v122 = v65;
              do
              {
                uint64_t v104 = v66 + v102;
                uint64_t v105 = v6 + v102;
                if (v6 != v66)
                {
                  unsigned int v106 = *(const void **)v104;
                  if (v104 + 16 == *(void *)v104)
                  {
                    unsigned int v107 = (_DWORD *)(v66 + v102 + 8);
                    uint64_t v108 = *v107;
                    uint64_t v109 = v6 + v102;
                    uint64_t v110 = *(unsigned int *)(v6 + v102 + 8);
                    if (v110 < v108)
                    {
                      if (*(_DWORD *)(v109 + 12) < v108)
                      {
                        *(_DWORD *)(v109 + 8) = 0;
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      if (v110) {
                        memmove(*(void **)(v6 + v102), v106, 8 * v110);
                      }
                      else {
                        uint64_t v110 = 0;
                      }
                      uint64_t v111 = *v107;
                      if (v110 != v111) {
                        memcpy((void *)(*(void *)(v6 + v102) + 8 * v110), (const void *)(*(void *)v104 + 8 * v110), *(void *)v104 + 8 * v111 - (*(void *)v104 + 8 * v110));
                      }
                    }
                    else if (v108)
                    {
                      memmove(*(void **)(v6 + v102), v106, 8 * v108);
                    }
                    *(_DWORD *)(v109 + 8) = v108;
                    unint64_t v65 = v122;
                  }
                  else
                  {
                    uint64_t v112 = (void *)(v6 + v102);
                    char v113 = *(void **)(v6 + v102);
                    if ((void *)(v6 + v102 + 16) != v113)
                    {
                      free(v113);
                      unsigned int v106 = *(const void **)v104;
                    }
                    *uint64_t v112 = v106;
                    unsigned int v107 = (_DWORD *)(v103 + 8);
                    uint64_t v114 = v66 + v102;
                    v112[1] = *(void *)(v66 + v102 + 8);
                    *(void *)uint64_t v114 = v104 + 16;
                    *(_DWORD *)(v114 + 12) = 0;
                  }
                  *unsigned int v107 = 0;
                }
                *(_DWORD *)(v105 + 64) = *(_DWORD *)(v104 + 64);
                *(_DWORD *)(v105 + 72) = *(_DWORD *)(v104 + 72);
                v103 += 80;
                v102 += 80;
              }
              while ((void **)(v66 + v102) != v65);
            }
            goto LABEL_185;
          }
        }
        if (v67 != (void **)v64)
        {
          uint64_t v89 = 0;
          BOOL v90 = v67;
          uint64_t v123 = v64;
          do
          {
            uint64_t v91 = &v67[v89];
            uint64_t v92 = v6 + v89 * 8;
            if ((void **)v6 != v67)
            {
              int v93 = *v91;
              if (v91 + 2 == *v91)
              {
                uint64_t v94 = &v67[v89 + 1];
                uint64_t v95 = *(unsigned int *)v94;
                uint64_t v96 = v6 + v89 * 8;
                uint64_t v97 = *(unsigned int *)(v6 + v89 * 8 + 8);
                if (v97 < v95)
                {
                  if (*(_DWORD *)(v96 + 12) < v95)
                  {
                    *(_DWORD *)(v96 + 8) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v97) {
                    memmove(*(void **)v92, v93, 8 * v97);
                  }
                  else {
                    uint64_t v97 = 0;
                  }
                  uint64_t v98 = *(unsigned int *)v94;
                  if (v97 != v98) {
                    memcpy((void *)(*(void *)v92 + 8 * v97), (char *)*v91 + 8 * v97, (unsigned char *)*v91 + 8 * v98 - ((unsigned char *)*v91 + 8 * v97));
                  }
                }
                else if (v95)
                {
                  memmove(*(void **)v92, v93, 8 * v95);
                }
                *(_DWORD *)(v96 + 8) = v95;
              }
              else
              {
                unint64_t v99 = (void *)(v6 + v89 * 8);
                char v100 = *(void **)(v6 + v89 * 8);
                if ((void *)(v6 + v89 * 8 + 16) != v100)
                {
                  free(v100);
                  int v93 = *v91;
                }
                *unint64_t v99 = v93;
                uint64_t v94 = v90 + 1;
                unint64_t v101 = &v67[v89];
                v99[1] = v67[v89 + 1];
                *unint64_t v101 = v91 + 2;
                *((_DWORD *)v101 + 3) = 0;
              }
              *(_DWORD *)uint64_t v94 = 0;
              uint64_t v64 = v123;
            }
            *(_DWORD *)(v92 + 64) = *((_DWORD *)v91 + 16);
            *(_DWORD *)(v92 + 72) = *((_DWORD *)v91 + 18);
            v90 += 10;
            v89 += 10;
          }
          while (&v67[v89] != (void **)v64);
        }
LABEL_185:
        uint64_t v115 = v121;
        if (v121)
        {
          unint64_t v116 = v120;
          do
          {
            unint64_t v119 = *v115;
            unint64_t v118 = v115 + 2;
            uint64_t v117 = v119;
            if (v119 != v118) {
              free(v117);
            }
            uint64_t v115 = (void **)(v118 + 8);
            --v116;
          }
          while (v116);
        }
      }
      else
      {
        sub_1CC2B1360(a1, v18, v19, a4, a5);
        sub_1CC2B1360(v6 + 80 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        sub_1CC2B2EF8(v6, v6 + 80 * (a3 >> 1), (void **)a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
      }
    }
  }
}

void sub_1CC2B1EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  unint64_t v15 = 0x600000000;
  LODWORD(v4) = *(_DWORD *)(a1 + 8);
  if (&v14 != (void **)a1 && v4)
  {
    if (*(void *)a1 == a1 + 16)
    {
      if (v4 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v16, *(const void **)a1, 8 * v4);
      LODWORD(v15) = v4;
    }
    else
    {
      uint64_t v14 = *(void **)a1;
      unint64_t v15 = __PAIR64__(*(_DWORD *)(a1 + 12), v4);
      *(void *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 12) = 0;
    }
    LODWORD(v4) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  int v5 = *(_DWORD *)(a1 + 72);
  int v17 = *(_DWORD *)(a1 + 64);
  int v18 = v5;
  if (a1 != a2)
  {
    uint64_t v6 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      unsigned int v8 = (_DWORD *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v4 < v7)
      {
        if (*(_DWORD *)(a1 + 12) < v7)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v4)
        {
          uint64_t v4 = v4;
          memmove(*(void **)a1, v6, 8 * v4);
        }
        else
        {
          uint64_t v4 = 0;
        }
        uint64_t v13 = *v8;
        if (v4 != v13) {
          memcpy((void *)(*(void *)a1 + 8 * v4), (const void *)(*(void *)a2 + 8 * v4), *(void *)a2 + 8 * v13 - (*(void *)a2 + 8 * v4));
        }
      }
      else if (v7)
      {
        memmove(*(void **)a1, v6, 8 * v7);
      }
      *(_DWORD *)(a1 + 8) = v7;
    }
    else
    {
      if (*(void *)a1 != a1 + 16)
      {
        free(*(void **)a1);
        uint64_t v6 = *(const void **)a2;
      }
      *(void *)a1 = v6;
      unsigned int v8 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *unsigned int v8 = 0;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v9 = v14;
  if (&v14 != (void **)a2)
  {
    if (v14 == v16)
    {
      int v10 = v15;
      uint64_t v11 = *(unsigned int *)(a2 + 8);
      if (v11 < v15)
      {
        if (*(_DWORD *)(a2 + 12) < v15)
        {
          *(_DWORD *)(a2 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v11) {
          memmove(*(void **)a2, v16, 8 * v11);
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11 != v15) {
          memcpy((void *)(*(void *)a2 + 8 * v11), (char *)v14 + 8 * v11, 8 * v15 - 8 * v11);
        }
      }
      else if (v15)
      {
        memmove(*(void **)a2, v16, 8 * v15);
      }
      *(_DWORD *)(a2 + 8) = v10;
    }
    else
    {
      if (*(void *)a2 != a2 + 16)
      {
        free(*(void **)a2);
        uint64_t v9 = v14;
      }
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v15;
      uint64_t v14 = v16;
      HIDWORD(v15) = 0;
    }
    LODWORD(v15) = 0;
    uint64_t v9 = v14;
  }
  int v12 = v18;
  *(_DWORD *)(a2 + 64) = v17;
  *(_DWORD *)(a2 + 72) = v12;
  if (v9 != v16) {
    free(v9);
  }
}

void sub_1CC2B2208(uint64_t a1, int8x8_t **a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v7 = (int8x8_t **)a1;
    if (a3 == 2)
    {
      uint64_t v13 = a2 - 10;
      int v12 = *(a2 - 10);
      uint64_t v14 = *((unsigned int *)a2 - 18);
      if (v14)
      {
        int v15 = 0;
        uint64_t v16 = 8 * v14;
        do
        {
          int8x8_t v17 = *v12++;
          uint8x8_t v18 = (uint8x8_t)vcnt_s8(v17);
          v18.i16[0] = vaddlv_u8(v18);
          v15 += v18.i32[0];
          v16 -= 8;
        }
        while (v16);
      }
      else
      {
        int v15 = 0;
      }
      uint64_t v92 = *(unsigned int *)(a1 + 8);
      if (v92)
      {
        int v93 = 0;
        uint64_t v94 = *(int8x8_t **)a1;
        uint64_t v95 = 8 * v92;
        do
        {
          int8x8_t v96 = *v94++;
          uint8x8_t v97 = (uint8x8_t)vcnt_s8(v96);
          v97.i16[0] = vaddlv_u8(v97);
          v93 += v97.i32[0];
          v95 -= 8;
        }
        while (v95);
      }
      else
      {
        int v93 = 0;
      }
      int v98 = *((_DWORD *)a2 - 2);
      unsigned int v99 = v98 * v15;
      uint64_t v11 = (int8x8_t **)(a1 + 72);
      int v100 = *(_DWORD *)(a1 + 72);
      unint64_t v101 = (void *)(a4 + 16);
      *(void *)a4 = a4 + 16;
      *(void *)(a4 + 8) = 0x600000000;
      if (v99 >= v100 * v93)
      {
        unsigned int v108 = *(_DWORD *)(a1 + 8);
        if (v108 && a1 != a4)
        {
          uint64_t v109 = *(int8x8_t **)a1;
          if (*(void *)a1 == a1 + 16)
          {
            if (v108 >= 7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v101, v109, 8 * *(unsigned int *)(a1 + 8));
            *(_DWORD *)(v4 + 8) = v108;
            int v100 = *(_DWORD *)v11;
          }
          else
          {
            *(void *)a4 = v109;
            int v134 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a4 + 8) = v108;
            *(_DWORD *)(a4 + 12) = v134;
            *(void *)a1 = a1 + 16;
            *(_DWORD *)(a1 + 12) = 0;
          }
          *((_DWORD *)v7 + 2) = 0;
        }
        int v110 = *((_DWORD *)v7 + 16);
        *(void *)(v4 + 80) = v4 + 96;
        *(_DWORD *)(v4 + 64) = v110;
        *(_DWORD *)(v4 + 72) = v100;
        *(void *)(v4 + 88) = 0x600000000;
        if ((int8x8_t **)(v4 + 80) != v13)
        {
          unsigned int v111 = *((_DWORD *)a2 - 18);
          if (v111)
          {
            uint64_t v112 = (int8x8_t **)*(a2 - 10);
            if (v112 == a2 - 8)
            {
              if (v111 >= 7) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v4 + 96), v112, 8 * *((unsigned int *)a2 - 18));
              *(_DWORD *)(v4 + 88) = v111;
            }
            else
            {
              *(void *)(v4 + 80) = v112;
              int v135 = *((_DWORD *)a2 - 17);
              *(_DWORD *)(v4 + 88) = v111;
              *(_DWORD *)(v4 + 92) = v135;
              *(a2 - 10) = (int8x8_t *)(a2 - 8);
              *((_DWORD *)a2 - 17) = 0;
            }
            *((_DWORD *)a2 - 18) = 0;
          }
        }
        *(_DWORD *)(v4 + 144) = *((_DWORD *)a2 - 4);
        int v10 = (_DWORD *)(v4 + 152);
        uint64_t v11 = a2 - 1;
      }
      else
      {
        if (v13 != (int8x8_t **)a4)
        {
          unsigned int v102 = *((_DWORD *)a2 - 18);
          if (v102)
          {
            uint64_t v103 = (int8x8_t **)*(a2 - 10);
            uint64_t v104 = (int8x8_t *)(a2 - 8);
            if (v103 == a2 - 8)
            {
              if (v102 >= 7) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v101, v104, 8 * *((unsigned int *)a2 - 18));
              *(_DWORD *)(v4 + 8) = v102;
              int v98 = *((_DWORD *)a2 - 2);
            }
            else
            {
              *(void *)a4 = v103;
              int v132 = *((_DWORD *)a2 - 17);
              *(_DWORD *)(a4 + 8) = v102;
              *(_DWORD *)(a4 + 12) = v132;
              *(a2 - 10) = v104;
              *((_DWORD *)a2 - 17) = 0;
            }
            *((_DWORD *)a2 - 18) = 0;
          }
        }
        int v105 = *((_DWORD *)a2 - 4);
        *(void *)(v4 + 80) = v4 + 96;
        *(_DWORD *)(v4 + 64) = v105;
        *(_DWORD *)(v4 + 72) = v98;
        *(void *)(v4 + 88) = 0x600000000;
        unsigned int v106 = *((_DWORD *)v7 + 2);
        if (v106 && (int8x8_t **)(v4 + 80) != v7)
        {
          unsigned int v107 = (int8x8_t *)(v7 + 2);
          if (*v7 == (int8x8_t *)(v7 + 2))
          {
            if (v106 >= 7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v4 + 96), v107, 8 * *((unsigned int *)v7 + 2));
            *(_DWORD *)(v4 + 88) = v106;
          }
          else
          {
            *(void *)(v4 + 80) = *v7;
            int v133 = *((_DWORD *)v7 + 3);
            *(_DWORD *)(v4 + 88) = v106;
            *(_DWORD *)(v4 + 92) = v133;
            *uint64_t v7 = v107;
            *((_DWORD *)v7 + 3) = 0;
          }
          *((_DWORD *)v7 + 2) = 0;
        }
        *(_DWORD *)(v4 + 144) = *((_DWORD *)v7 + 16);
        int v10 = (_DWORD *)(v4 + 152);
      }
      goto LABEL_166;
    }
    if (a3 == 1)
    {
      *(void *)a4 = a4 + 16;
      *(void *)(a4 + 8) = 0x600000000;
      unsigned int v8 = *(_DWORD *)(a1 + 8);
      if (v8 && a1 != a4)
      {
        uint64_t v9 = (const void *)(a1 + 16);
        if (*(void *)a1 == a1 + 16)
        {
          if (v8 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy((void *)(a4 + 16), v9, 8 * *(unsigned int *)(a1 + 8));
          *(_DWORD *)(v4 + 8) = v8;
        }
        else
        {
          *(void *)a4 = *(void *)a1;
          int v131 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a4 + 8) = v8;
          *(_DWORD *)(a4 + 12) = v131;
          *(void *)a1 = v9;
          *(_DWORD *)(a1 + 12) = 0;
        }
        *((_DWORD *)v7 + 2) = 0;
      }
      *(_DWORD *)(v4 + 64) = *((_DWORD *)v7 + 16);
      int v10 = (_DWORD *)(v4 + 72);
      uint64_t v11 = v7 + 9;
LABEL_166:
      _DWORD *v10 = *(_DWORD *)v11;
      return;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v68 = (int8x8_t **)(a1 + 80 * (a3 >> 1));
      sub_1CC2B1360(a1, v68, a3 >> 1, a4, a3 >> 1);
      sub_1CC2B1360(&v7[10 * (a3 >> 1)], a2, a3 - (a3 >> 1), v4 + 80 * (a3 >> 1), a3 - (a3 >> 1));
      uint64_t v69 = &v7[10 * (a3 >> 1)];
      while (v69 != a2)
      {
        uint64_t v70 = *((unsigned int *)v69 + 2);
        if (v70)
        {
          int v71 = 0;
          uint64_t v72 = *v69;
          uint64_t v73 = 8 * v70;
          do
          {
            int8x8_t v74 = *v72++;
            uint8x8_t v75 = (uint8x8_t)vcnt_s8(v74);
            v75.i16[0] = vaddlv_u8(v75);
            v71 += v75.i32[0];
            v73 -= 8;
          }
          while (v73);
        }
        else
        {
          int v71 = 0;
        }
        uint64_t v76 = *((unsigned int *)v7 + 2);
        if (v76)
        {
          int v77 = 0;
          uint64_t v78 = *v7;
          uint64_t v79 = 8 * v76;
          do
          {
            int8x8_t v80 = *v78++;
            uint8x8_t v81 = (uint8x8_t)vcnt_s8(v80);
            v81.i16[0] = vaddlv_u8(v81);
            v77 += v81.i32[0];
            v79 -= 8;
          }
          while (v79);
        }
        else
        {
          int v77 = 0;
        }
        int v82 = *((_DWORD *)v69 + 18);
        unsigned int v83 = v82 * v71;
        int v84 = *((_DWORD *)v7 + 18);
        uint64_t v85 = (void *)(v4 + 16);
        *(void *)uint64_t v4 = v4 + 16;
        *(void *)(v4 + 8) = 0x600000000;
        if (v83 >= v84 * v77)
        {
          unint64_t v88 = *((unsigned int *)v7 + 2);
          if (v88 && (int8x8_t **)v4 != v7)
          {
            uint64_t v89 = *v7;
            if (*v7 == (int8x8_t *)(v7 + 2))
            {
              if (v88 >= 7) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v85, v89, 8 * *((unsigned int *)v7 + 2));
              *(_DWORD *)(v4 + 8) = v88;
              int v84 = *((_DWORD *)v7 + 18);
            }
            else
            {
              *(void *)uint64_t v4 = v89;
              int v91 = *((_DWORD *)v7 + 3);
              *(_DWORD *)(v4 + 8) = v88;
              *(_DWORD *)(v4 + 12) = v91;
              *uint64_t v7 = (int8x8_t *)(v7 + 2);
              *((_DWORD *)v7 + 3) = 0;
            }
            *((_DWORD *)v7 + 2) = 0;
          }
          *(_DWORD *)(v4 + 64) = *((_DWORD *)v7 + 16);
          *(_DWORD *)(v4 + 72) = v84;
          v7 += 10;
        }
        else
        {
          unint64_t v86 = *((unsigned int *)v69 + 2);
          if (v86 && (int8x8_t **)v4 != v69)
          {
            uint64_t v87 = *v69;
            if (*v69 == (int8x8_t *)(v69 + 2))
            {
              if (v86 >= 7) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v85, v87, 8 * *((unsigned int *)v69 + 2));
              *(_DWORD *)(v4 + 8) = v86;
              int v82 = *((_DWORD *)v69 + 18);
            }
            else
            {
              *(void *)uint64_t v4 = v87;
              int v90 = *((_DWORD *)v69 + 3);
              *(_DWORD *)(v4 + 8) = v86;
              *(_DWORD *)(v4 + 12) = v90;
              *uint64_t v69 = (int8x8_t *)(v69 + 2);
              *((_DWORD *)v69 + 3) = 0;
            }
            *((_DWORD *)v69 + 2) = 0;
          }
          *(_DWORD *)(v4 + 64) = *((_DWORD *)v69 + 16);
          *(_DWORD *)(v4 + 72) = v82;
          v69 += 10;
        }
        v4 += 80;
        if (v7 == v68)
        {
          if (v69 != a2)
          {
            uint64_t v122 = 0;
            do
            {
              uint64_t v123 = (unsigned int *)&v69[v122];
              uint64_t v124 = v4 + v122 * 8;
              unint64_t v125 = (void *)(v4 + v122 * 8 + 16);
              *(void *)uint64_t v124 = v125;
              *(void *)(v124 + 8) = 0x600000000;
              if (v69 != (int8x8_t **)v4)
              {
                unint64_t v126 = v123[2];
                if (v123[2])
                {
                  int v127 = (uint64_t *)&v69[v122];
                  uint64_t v129 = (uint64_t)&v69[v122 + 2];
                  int v128 = v69[v122];
                  if ((int8x8_t *)v129 == v128)
                  {
                    if (v126 >= 7) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    memcpy(v125, v128, 8 * v123[2]);
                    *(_DWORD *)(v124 + 8) = v126;
                  }
                  else
                  {
                    *(void *)(v4 + v122 * 8) = v128;
                    int v130 = *((_DWORD *)v127 + 3);
                    *(_DWORD *)(v124 + 8) = v126;
                    *(_DWORD *)(v124 + 12) = v130;
                    *int v127 = v129;
                    *((_DWORD *)v127 + 3) = 0;
                  }
                  v123[2] = 0;
                }
              }
              *(_DWORD *)(v124 + 64) = v123[16];
              *(_DWORD *)(v124 + 72) = v123[18];
              v122 += 10;
            }
            while (&v69[v122] != a2);
          }
          return;
        }
      }
      if (v7 != v68)
      {
        uint64_t v113 = 0;
        do
        {
          uint64_t v114 = v4 + v113 * 8;
          uint64_t v115 = (unsigned int *)&v7[v113];
          unint64_t v116 = (void *)(v4 + v113 * 8 + 16);
          *(void *)uint64_t v114 = v116;
          *(void *)(v114 + 8) = 0x600000000;
          if (v7 != (int8x8_t **)v4)
          {
            unint64_t v117 = v115[2];
            if (v115[2])
            {
              unint64_t v118 = (uint64_t *)&v7[v113];
              uint64_t v120 = (uint64_t)&v7[v113 + 2];
              unint64_t v119 = v7[v113];
              if ((int8x8_t *)v120 == v119)
              {
                if (v117 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v116, v119, 8 * v115[2]);
                *(_DWORD *)(v114 + 8) = v117;
              }
              else
              {
                *(void *)uint64_t v114 = v119;
                int v121 = *((_DWORD *)v118 + 3);
                *(_DWORD *)(v114 + 8) = v117;
                *(_DWORD *)(v114 + 12) = v121;
                *unint64_t v118 = v120;
                *((_DWORD *)v118 + 3) = 0;
              }
              v115[2] = 0;
            }
          }
          *(_DWORD *)(v114 + 64) = v115[16];
          *(_DWORD *)(v114 + 72) = v115[18];
          v113 += 10;
        }
        while (&v7[v113] != v68);
      }
    }
    else if ((int8x8_t **)a1 != a2)
    {
      *(void *)a4 = a4 + 16;
      *(void *)(a4 + 8) = 0x600000000;
      unsigned int v19 = *(_DWORD *)(a1 + 8);
      if (v19 && a1 != a4)
      {
        uint64_t v20 = (const void *)(a1 + 16);
        if (*(void *)a1 == a1 + 16)
        {
          if (v19 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy((void *)(a4 + 16), v20, 8 * *(unsigned int *)(a1 + 8));
          *(_DWORD *)(v4 + 8) = v19;
        }
        else
        {
          *(void *)a4 = *(void *)a1;
          int v136 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a4 + 8) = v19;
          *(_DWORD *)(a4 + 12) = v136;
          *(void *)a1 = v20;
          *(_DWORD *)(a1 + 12) = 0;
        }
        *((_DWORD *)v7 + 2) = 0;
      }
      *(_DWORD *)(v4 + 64) = *((_DWORD *)v7 + 16);
      *(_DWORD *)(v4 + 72) = *((_DWORD *)v7 + 18);
      int v21 = v7 + 10;
      if (v7 + 10 != a2)
      {
        uint64_t v22 = v4;
        do
        {
          uint64_t v23 = v21;
          uint64_t v24 = *((unsigned int *)v7 + 22);
          if (v24)
          {
            int v25 = 0;
            unint64_t v26 = *v23;
            uint64_t v27 = 8 * v24;
            do
            {
              int8x8_t v28 = *v26++;
              uint8x8_t v29 = (uint8x8_t)vcnt_s8(v28);
              v29.i16[0] = vaddlv_u8(v29);
              v25 += v29.i32[0];
              v27 -= 8;
            }
            while (v27);
          }
          else
          {
            int v25 = 0;
          }
          uint64_t v30 = *(int8x8_t **)v22;
          uint64_t v31 = *(unsigned int *)(v22 + 8);
          if (v31)
          {
            int v32 = 0;
            uint64_t v33 = 8 * v31;
            int8x8_t v34 = *(int8x8_t **)v22;
            do
            {
              int8x8_t v35 = *v34++;
              uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
              v36.i16[0] = vaddlv_u8(v36);
              v32 += v36.i32[0];
              v33 -= 8;
            }
            while (v33);
          }
          else
          {
            int v32 = 0;
          }
          uint64_t v37 = v22 + 80;
          int v38 = *((_DWORD *)v7 + 38);
          int v39 = *(_DWORD *)(v22 + 72);
          *(void *)(v22 + 80) = v22 + 96;
          *(void *)(v22 + 88) = 0x600000000;
          if (v38 * v25 >= (v39 * v32))
          {
            unsigned int v58 = *((_DWORD *)v7 + 22);
            if (v58 && (int8x8_t **)v22 != v7)
            {
              int8x8_t v59 = *v23;
              if (*v23 == (int8x8_t *)(v7 + 12))
              {
                if (v58 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy((void *)(v22 + 96), v59, 8 * *((unsigned int *)v7 + 22));
                *(_DWORD *)(v22 + 88) = v58;
                int v38 = *((_DWORD *)v7 + 38);
              }
              else
              {
                *(void *)(v22 + 80) = v59;
                int v66 = *((_DWORD *)v7 + 23);
                *(_DWORD *)(v22 + 88) = v58;
                *(_DWORD *)(v22 + 92) = v66;
                *uint64_t v23 = (int8x8_t *)(v7 + 12);
                *((_DWORD *)v7 + 23) = 0;
              }
              *((_DWORD *)v7 + 22) = 0;
            }
            *(_DWORD *)(v22 + 144) = *((_DWORD *)v7 + 36);
            *(_DWORD *)(v22 + 152) = v38;
          }
          else
          {
            if (v31)
            {
              if (v30 == (int8x8_t *)(v22 + 16))
              {
                if (v31 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(*(void **)(v22 + 80), *(const void **)v22, 8 * v31);
                *(_DWORD *)(v22 + 88) = v31;
                int v39 = *(_DWORD *)(v22 + 72);
              }
              else
              {
                *(void *)(v22 + 80) = v30;
                int v65 = *(_DWORD *)(v22 + 12);
                *(_DWORD *)(v22 + 88) = v31;
                *(_DWORD *)(v22 + 92) = v65;
                *(void *)uint64_t v22 = v22 + 16;
                *(_DWORD *)(v22 + 12) = 0;
              }
              *(_DWORD *)(v22 + 8) = 0;
            }
            *(_DWORD *)(v22 + 144) = *(_DWORD *)(v22 + 64);
            *(_DWORD *)(v22 + 152) = v39;
            uint64_t v40 = v4;
            if (v22 != v4)
            {
              while (1)
              {
                uint64_t v41 = *((unsigned int *)v7 + 22);
                if (v41)
                {
                  int v42 = 0;
                  uint64_t v43 = *v23;
                  uint64_t v44 = 8 * v41;
                  do
                  {
                    int8x8_t v45 = *v43++;
                    uint8x8_t v46 = (uint8x8_t)vcnt_s8(v45);
                    v46.i16[0] = vaddlv_u8(v46);
                    v42 += v46.i32[0];
                    v44 -= 8;
                  }
                  while (v44);
                }
                else
                {
                  int v42 = 0;
                }
                uint64_t v47 = *(const void **)(v22 - 80);
                uint64_t v48 = *(unsigned int *)(v22 - 72);
                int v49 = 0;
                if (v48)
                {
                  uint64_t v50 = 8 * v48;
                  uint64_t v51 = *(int8x8_t **)(v22 - 80);
                  do
                  {
                    int8x8_t v52 = *v51++;
                    uint8x8_t v53 = (uint8x8_t)vcnt_s8(v52);
                    v53.i16[0] = vaddlv_u8(v53);
                    v49 += v53.i32[0];
                    v50 -= 8;
                  }
                  while (v50);
                }
                if (*((_DWORD *)v7 + 38) * v42 >= (*(_DWORD *)(v22 - 8) * v49)) {
                  break;
                }
                if (v47 == (const void *)(v22 - 64))
                {
                  uint64_t v54 = *(unsigned int *)(v22 + 8);
                  if (v54 < v48)
                  {
                    if (*(_DWORD *)(v22 + 12) < v48)
                    {
                      *(_DWORD *)(v22 + 8) = 0;
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v54) {
                      memmove(*(void **)v22, v47, 8 * v54);
                    }
                    else {
                      uint64_t v54 = 0;
                    }
                    uint64_t v56 = *(unsigned int *)(v22 - 72);
                    if (v54 != v56) {
                      memcpy((void *)(*(void *)v22 + 8 * v54), (const void *)(*(void *)(v22 - 80) + 8 * v54), 8 * v56 - 8 * v54);
                    }
                  }
                  else if (v48)
                  {
                    memmove(*(void **)v22, v47, 8 * v48);
                  }
                  *(_DWORD *)(v22 + 8) = v48;
                }
                else
                {
                  if (*(void *)v22 != v22 + 16)
                  {
                    free(*(void **)v22);
                    uint64_t v47 = *(const void **)(v22 - 80);
                    LODWORD(v48) = *(_DWORD *)(v22 - 72);
                  }
                  *(void *)uint64_t v22 = v47;
                  int v57 = *(_DWORD *)(v22 - 68);
                  *(_DWORD *)(v22 + 8) = v48;
                  *(_DWORD *)(v22 + 12) = v57;
                  *(void *)(v22 - 80) = v22 - 64;
                  *(_DWORD *)(v22 - 68) = 0;
                }
                *(_DWORD *)(v22 - 72) = 0;
                int v55 = *(_DWORD *)(v22 - 8);
                *(_DWORD *)(v22 + 64) = *(_DWORD *)(v22 - 16);
                *(_DWORD *)(v22 + 72) = v55;
                v22 -= 80;
                if (v22 == v4)
                {
                  uint64_t v40 = v4;
                  goto LABEL_76;
                }
              }
              uint64_t v40 = v22;
            }
LABEL_76:
            if ((int8x8_t **)v40 != v23)
            {
              uint8x8_t v60 = *v23;
              if (*v23 == (int8x8_t *)(v7 + 12))
              {
                uint64_t v61 = *((unsigned int *)v7 + 22);
                uint64_t v62 = *(unsigned int *)(v40 + 8);
                if (v62 < v61)
                {
                  if (*(_DWORD *)(v40 + 12) < v61)
                  {
                    *(_DWORD *)(v40 + 8) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v62)
                  {
                    uint64_t v67 = *(unsigned int *)(v40 + 8);
                    memmove(*(void **)v40, v7 + 12, 8 * v62);
                    uint64_t v63 = v67;
                  }
                  else
                  {
                    uint64_t v63 = 0;
                  }
                  uint64_t v64 = *((unsigned int *)v7 + 22);
                  if (v63 != v64) {
                    memcpy((void *)(*(void *)v40 + 8 * v63), &(*v23)[v63], (char *)&(*v23)[v64] - (char *)&(*v23)[v63]);
                  }
                }
                else if (v61)
                {
                  memmove(*(void **)v40, v7 + 12, 8 * v61);
                }
                *(_DWORD *)(v40 + 8) = v61;
              }
              else
              {
                if (*(void *)v40 != v40 + 16)
                {
                  free(*(void **)v40);
                  uint8x8_t v60 = *v23;
                }
                *(void *)uint64_t v40 = v60;
                *(void *)(v40 + 8) = v7[11];
                *uint64_t v23 = (int8x8_t *)(v7 + 12);
                *((_DWORD *)v7 + 23) = 0;
              }
              *((_DWORD *)v7 + 22) = 0;
            }
            *(_DWORD *)(v40 + 64) = *((_DWORD *)v7 + 36);
            *(_DWORD *)(v40 + 72) = *((_DWORD *)v7 + 38);
          }
          int v21 = v23 + 10;
          uint64_t v22 = v37;
          uint64_t v7 = v23;
        }
        while (v23 + 10 != a2);
      }
    }
  }
}

void sub_1CC2B2EF8(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  uint64_t v9 = a5;
  while (a4 > a7 && v9 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v14 = *(unsigned int *)(a2 + 8);
    while (1)
    {
      int v15 = 0;
      if (v14)
      {
        uint64_t v16 = 8 * v14;
        int8x8_t v17 = *(int8x8_t **)a2;
        do
        {
          int8x8_t v18 = *v17++;
          uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
          v19.i16[0] = vaddlv_u8(v19);
          v15 += v19.i32[0];
          v16 -= 8;
        }
        while (v16);
      }
      uint64_t v20 = *(unsigned int *)(a1 + 8);
      if (v20)
      {
        int v21 = 0;
        uint64_t v22 = *(int8x8_t **)a1;
        uint64_t v23 = 8 * v20;
        do
        {
          int8x8_t v24 = *v22++;
          uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24);
          v25.i16[0] = vaddlv_u8(v25);
          v21 += v25.i32[0];
          v23 -= 8;
        }
        while (v23);
      }
      else
      {
        int v21 = 0;
      }
      if (v15 * *(_DWORD *)(a2 + 72) < (*(_DWORD *)(a1 + 72) * v21)) {
        break;
      }
      a1 += 80;
      if (!--a4) {
        return;
      }
    }
    uint64_t v185 = a7;
    uint64_t v187 = a6;
    if (a4 >= v9)
    {
      if (a4 == 1)
      {
        sub_1CC2B1EF0(a1, a2);
        return;
      }
      if (a4 >= 0) {
        uint64_t v49 = a4;
      }
      else {
        uint64_t v49 = a4 + 1;
      }
      uint64_t v47 = v49 >> 1;
      uint64_t v30 = a1 + 80 * (v49 >> 1);
      uint64_t v48 = a2;
      uint64_t v28 = (uint64_t)a3;
      if (a3 != (void **)a2)
      {
        unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a3 - a2) >> 4);
        uint64_t v51 = *(unsigned int *)(v30 + 8);
        uint64_t v28 = a2;
        do
        {
          unint64_t v52 = v50 >> 1;
          unint64_t v53 = v28 + 80 * (v50 >> 1);
          uint64_t v54 = *(unsigned int *)(v53 + 8);
          if (v54)
          {
            int v55 = 0;
            uint64_t v56 = *(int8x8_t **)v53;
            uint64_t v57 = 8 * v54;
            do
            {
              int8x8_t v58 = *v56++;
              uint8x8_t v59 = (uint8x8_t)vcnt_s8(v58);
              v59.i16[0] = vaddlv_u8(v59);
              v55 += v59.i32[0];
              v57 -= 8;
            }
            while (v57);
          }
          else
          {
            int v55 = 0;
          }
          int v60 = 0;
          if (v51)
          {
            uint64_t v61 = 8 * v51;
            uint64_t v62 = *(int8x8_t **)v30;
            do
            {
              int8x8_t v63 = *v62++;
              uint8x8_t v64 = (uint8x8_t)vcnt_s8(v63);
              v64.i16[0] = vaddlv_u8(v64);
              v60 += v64.i32[0];
              v61 -= 8;
            }
            while (v61);
          }
          uint64_t v65 = v53 + 80;
          v50 += ~v52;
          if (*(_DWORD *)(v28 + 80 * v52 + 72) * v55 < (v60 * *(_DWORD *)(a1 + 80 * v47 + 72))) {
            uint64_t v28 = v65;
          }
          else {
            unint64_t v50 = v52;
          }
        }
        while (v50);
        uint64_t v48 = v28;
      }
      uint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((v48 - a2) >> 4);
      uint64_t v29 = a1 + 80 * (v49 >> 1);
    }
    else
    {
      if (v9 >= 0) {
        uint64_t v26 = v9;
      }
      else {
        uint64_t v26 = v9 + 1;
      }
      uint64_t v27 = v26 >> 1;
      uint64_t v28 = a2 + 80 * (v26 >> 1);
      uint64_t v29 = a2;
      uint64_t v30 = a1;
      if (a2 != a1)
      {
        unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
        uint64_t v32 = *(unsigned int *)(v28 + 8);
        uint64_t v30 = a1;
        do
        {
          int v33 = 0;
          if (v32)
          {
            uint64_t v34 = 8 * v32;
            int8x8_t v35 = *(int8x8_t **)v28;
            do
            {
              int8x8_t v36 = *v35++;
              uint8x8_t v37 = (uint8x8_t)vcnt_s8(v36);
              v37.i16[0] = vaddlv_u8(v37);
              v33 += v37.i32[0];
              v34 -= 8;
            }
            while (v34);
          }
          unint64_t v38 = v31 >> 1;
          unint64_t v39 = v30 + 80 * (v31 >> 1);
          uint64_t v40 = *(unsigned int *)(v39 + 8);
          if (v40)
          {
            int v41 = 0;
            int v42 = *(int8x8_t **)v39;
            uint64_t v43 = 8 * v40;
            do
            {
              int8x8_t v44 = *v42++;
              uint8x8_t v45 = (uint8x8_t)vcnt_s8(v44);
              v45.i16[0] = vaddlv_u8(v45);
              v41 += v45.i32[0];
              v43 -= 8;
            }
            while (v43);
          }
          else
          {
            int v41 = 0;
          }
          uint64_t v46 = v39 + 80;
          v31 += ~v38;
          if (v33 * *(_DWORD *)(a2 + 80 * v27 + 72) < (*(_DWORD *)(v30 + 80 * v38 + 72) * v41)) {
            unint64_t v31 = v38;
          }
          else {
            uint64_t v30 = v46;
          }
        }
        while (v31);
        uint64_t v29 = v30;
      }
      uint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - a1) >> 4);
      uint64_t v48 = a2 + 80 * (v26 >> 1);
    }
    uint64_t v66 = v48;
    if (v30 != a2)
    {
      uint64_t v66 = v29;
      if (v28 != a2)
      {
        uint64_t v181 = v9;
        uint64_t v182 = v27;
        uint64_t v183 = v47;
        sub_1CC2B1EF0(v30, a2);
        uint64_t v66 = v30 + 80;
        uint64_t v67 = a2 + 80;
        for (uint64_t i = a3; v67 != v28; v67 += 80)
        {
          if (v66 == a2) {
            a2 = v67;
          }
          sub_1CC2B1EF0(v66, v67);
          v66 += 80;
        }
        if (v66 != a2)
        {
          uint64_t v68 = v66;
          uint64_t v69 = a2;
          do
          {
            while (1)
            {
              sub_1CC2B1EF0(v68, a2);
              v68 += 80;
              a2 += 80;
              if (a2 == v28) {
                break;
              }
              if (v68 == v69) {
                uint64_t v69 = a2;
              }
            }
            a2 = v69;
          }
          while (v68 != v69);
        }
        uint64_t v47 = v183;
        a3 = i;
        uint64_t v9 = v181;
        uint64_t v27 = v182;
      }
    }
    a4 -= v47;
    uint64_t v70 = v9 - v27;
    if (v47 + v27 >= a4 + v70)
    {
      uint64_t v73 = a3;
      uint64_t v74 = v47;
      uint64_t v75 = v27;
      a7 = v185;
      a6 = v187;
      sub_1CC2B2EF8(v66, v48, v73, a4, v70, v187, v185);
      uint64_t v48 = v29;
      uint64_t v9 = v75;
      a4 = v74;
      a3 = (void **)v66;
    }
    else
    {
      uint64_t v71 = a1;
      a7 = v185;
      a6 = v187;
      uint64_t v72 = v70;
      sub_1CC2B2EF8(v71, v29, v66, v47, v27, v187, v185);
      uint64_t v9 = v72;
      a1 = v66;
    }
    a2 = v48;
    if (!v9) {
      return;
    }
  }
  if (a4 <= v9)
  {
    if (a1 == a2) {
      return;
    }
    uint64_t v87 = a3;
    unint64_t v88 = 0;
    uint64_t v78 = 0;
    do
    {
      uint64_t v89 = &a6[v88 / 8];
      int v90 = (unsigned int *)(a1 + v88);
      int v91 = &a6[v88 / 8 + 2];
      *uint64_t v89 = v91;
      v89[1] = (void *)0x600000000;
      if ((void **)a1 != a6)
      {
        unint64_t v92 = v90[2];
        if (v90[2])
        {
          unint64_t v93 = a1 + v88;
          uint64_t v95 = a1 + v88 + 16;
          uint64_t v94 = *(void **)(a1 + v88);
          if ((void *)v95 == v94)
          {
            if (v92 >= 7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v91, v94, 8 * v90[2]);
            *((_DWORD *)v89 + 2) = v92;
          }
          else
          {
            *uint64_t v89 = v94;
            int v96 = *(_DWORD *)(v93 + 12);
            *((_DWORD *)v89 + 2) = v92;
            *((_DWORD *)v89 + 3) = v96;
            *(void *)unint64_t v93 = v95;
            *(_DWORD *)(v93 + 12) = 0;
          }
          v90[2] = 0;
        }
      }
      *((_DWORD *)v89 + 16) = v90[16];
      *((_DWORD *)v89 + 18) = v90[18];
      ++v78;
      v88 += 80;
    }
    while (a1 + v88 != a2);
    if (!v88) {
      goto LABEL_247;
    }
    unint64_t v125 = &a6[v88 / 8];
    uint64_t v186 = (uint64_t)&a6[v88 / 8 - 10];
    unint64_t v126 = a6;
    int v127 = v87;
    while ((void **)a2 != v127)
    {
      int v128 = *(int8x8_t **)a2;
      uint64_t v129 = *(unsigned int *)(a2 + 8);
      int v130 = 0;
      if (v129)
      {
        uint64_t v131 = 8 * v129;
        int v132 = *(int8x8_t **)a2;
        do
        {
          int8x8_t v133 = *v132++;
          uint8x8_t v134 = (uint8x8_t)vcnt_s8(v133);
          v134.i16[0] = vaddlv_u8(v134);
          v130 += v134.i32[0];
          v131 -= 8;
        }
        while (v131);
      }
      int v135 = (int8x8_t *)*v126;
      uint64_t v136 = *((unsigned int *)v126 + 2);
      int v137 = 0;
      if (v136)
      {
        uint64_t v138 = 8 * v136;
        unsigned int v139 = (int8x8_t *)*v126;
        do
        {
          int8x8_t v140 = *v139++;
          uint8x8_t v141 = (uint8x8_t)vcnt_s8(v140);
          v141.i16[0] = vaddlv_u8(v141);
          v137 += v141.i32[0];
          v138 -= 8;
        }
        while (v138);
      }
      int v142 = *(_DWORD *)(a2 + 72);
      unsigned int v143 = v142 * v130;
      int v144 = *((_DWORD *)v126 + 18);
      if (v143 >= v144 * v137)
      {
        if ((void **)a1 == v126)
        {
          int v127 = v87;
        }
        else
        {
          if (v135 == (int8x8_t *)(v126 + 2))
          {
            uint64_t v146 = *(unsigned int *)(a1 + 8);
            if (v146 < v136)
            {
              if (*(_DWORD *)(a1 + 12) < v136)
              {
                *(_DWORD *)(a1 + 8) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v146) {
                memmove(*(void **)a1, *v126, 8 * v146);
              }
              else {
                uint64_t v146 = 0;
              }
              uint64_t v148 = *((unsigned int *)v126 + 2);
              if (v146 != v148) {
                memcpy((void *)(*(void *)a1 + 8 * v146), (char *)*v126 + 8 * v146, (unsigned char *)*v126 + 8 * v148 - ((unsigned char *)*v126 + 8 * v146));
              }
            }
            else if (v136)
            {
              memmove(*(void **)a1, *v126, 8 * v136);
            }
            *(_DWORD *)(a1 + 8) = v136;
          }
          else
          {
            if (*(void *)a1 != a1 + 16)
            {
              free(*(void **)a1);
              int v135 = (int8x8_t *)*v126;
              LODWORD(v136) = *((_DWORD *)v126 + 2);
            }
            *(void *)a1 = v135;
            int v150 = *((_DWORD *)v126 + 3);
            *(_DWORD *)(a1 + 8) = v136;
            *(_DWORD *)(a1 + 12) = v150;
            *unint64_t v126 = v126 + 2;
            *((_DWORD *)v126 + 3) = 0;
          }
          int v127 = v87;
          *((_DWORD *)v126 + 2) = 0;
          int v144 = *((_DWORD *)v126 + 18);
        }
        *(_DWORD *)(a1 + 64) = *((_DWORD *)v126 + 16);
        *(_DWORD *)(a1 + 72) = v144;
        v126 += 10;
      }
      else
      {
        if (a1 != a2)
        {
          if (v128 == (int8x8_t *)(a2 + 16))
          {
            uint64_t v145 = *(unsigned int *)(a1 + 8);
            if (v145 < v129)
            {
              if (*(_DWORD *)(a1 + 12) < v129)
              {
                *(_DWORD *)(a1 + 8) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v145) {
                memmove(*(void **)a1, v128, 8 * v145);
              }
              else {
                uint64_t v145 = 0;
              }
              uint64_t v147 = *(unsigned int *)(a2 + 8);
              if (v145 != v147) {
                memcpy((void *)(*(void *)a1 + 8 * v145), (const void *)(*(void *)a2 + 8 * v145), *(void *)a2 + 8 * v147 - (*(void *)a2 + 8 * v145));
              }
            }
            else if (v129)
            {
              memmove(*(void **)a1, v128, 8 * v129);
            }
            *(_DWORD *)(a1 + 8) = v129;
          }
          else
          {
            if (*(void *)a1 != a1 + 16)
            {
              free(*(void **)a1);
              int v128 = *(int8x8_t **)a2;
              LODWORD(v129) = *(_DWORD *)(a2 + 8);
            }
            *(void *)a1 = v128;
            int v149 = *(_DWORD *)(a2 + 12);
            *(_DWORD *)(a1 + 8) = v129;
            *(_DWORD *)(a1 + 12) = v149;
            *(void *)a2 = a2 + 16;
            *(_DWORD *)(a2 + 12) = 0;
          }
          *(_DWORD *)(a2 + 8) = 0;
          int v142 = *(_DWORD *)(a2 + 72);
        }
        int v127 = v87;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(_DWORD *)(a1 + 72) = v142;
        a2 += 80;
      }
      a1 += 80;
      if (v125 == v126) {
        goto LABEL_247;
      }
    }
    if (v125 == v126) {
      goto LABEL_247;
    }
    unint64_t v162 = 0;
    BOOL v163 = v126;
    unint64_t v189 = a6;
    while (1)
    {
      unsigned int v164 = &v126[v162 / 8];
      unint64_t v165 = a1 + v162;
      if (v126 != (void **)a1) {
        break;
      }
LABEL_235:
      *(_DWORD *)(v165 + 64) = *((_DWORD *)v164 + 16);
      *(_DWORD *)(v165 + 72) = *((_DWORD *)v164 + 18);
      v163 += 10;
      v162 += 80;
      if ((void **)v186 == &v126[v162 / 8 - 10]) {
        goto LABEL_247;
      }
    }
    int v166 = *v164;
    if (v164 + 2 != *v164)
    {
      char v175 = (void *)(a1 + v162);
      uint64_t v176 = *(void **)(a1 + v162);
      if ((void *)(a1 + v162 + 16) != v176)
      {
        free(v176);
        unint64_t v165 = a1 + v162;
        int v166 = *v164;
      }
      *char v175 = v166;
      unsigned int v168 = v163 + 1;
      uint64_t v177 = &v126[v162 / 8];
      v175[1] = v126[v162 / 8 + 1];
      *uint64_t v177 = v164 + 2;
      *((_DWORD *)v177 + 3) = 0;
      goto LABEL_234;
    }
    unsigned int v168 = &v126[v162 / 8 + 1];
    uint64_t v167 = *(unsigned int *)v168;
    unint64_t v169 = a1 + v162;
    uint64_t v170 = *(unsigned int *)(a1 + v162 + 8);
    if (v170 < v167)
    {
      if (*(_DWORD *)(v169 + 12) < v167)
      {
        *(_DWORD *)(v169 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v170)
      {
        memmove(*(void **)v165, v166, 8 * v170);
        unint64_t v165 = a1 + v162;
      }
      else
      {
        uint64_t v170 = 0;
      }
      uint64_t v172 = *(unsigned int *)v168;
      if (v170 == v172) {
        goto LABEL_233;
      }
      uint64_t v173 = (char *)*v164 + 8 * v170;
      uint64_t v174 = (void *)(*(void *)v165 + 8 * v170);
      unint64_t v171 = v165;
      memcpy(v174, v173, (unsigned char *)*v164 + 8 * v172 - v173);
    }
    else
    {
      if (!v167)
      {
LABEL_233:
        *(_DWORD *)(v169 + 8) = v167;
LABEL_234:
        *(_DWORD *)unsigned int v168 = 0;
        a6 = v189;
        goto LABEL_235;
      }
      unint64_t v171 = a1 + v162;
      memmove(*(void **)v165, v166, 8 * v167);
    }
    unint64_t v165 = v171;
    goto LABEL_233;
  }
  if (a3 == (void **)a2) {
    return;
  }
  uint64_t v76 = a3;
  unint64_t v77 = 0;
  uint64_t v78 = 0;
  do
  {
    uint64_t v79 = &a6[v77 / 8];
    int8x8_t v80 = (unsigned int *)(a2 + v77);
    uint8x8_t v81 = &a6[v77 / 8 + 2];
    *uint64_t v79 = v81;
    v79[1] = (void *)0x600000000;
    if ((void **)a2 != a6)
    {
      unint64_t v82 = v80[2];
      if (v80[2])
      {
        unint64_t v83 = a2 + v77;
        uint64_t v85 = a2 + v77 + 16;
        int v84 = *(void **)(a2 + v77);
        if ((void *)v85 == v84)
        {
          if (v82 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v81, v84, 8 * v80[2]);
          *((_DWORD *)v79 + 2) = v82;
        }
        else
        {
          *uint64_t v79 = v84;
          int v86 = *(_DWORD *)(v83 + 12);
          *((_DWORD *)v79 + 2) = v82;
          *((_DWORD *)v79 + 3) = v86;
          *(void *)unint64_t v83 = v85;
          *(_DWORD *)(v83 + 12) = 0;
        }
        v80[2] = 0;
      }
    }
    *((_DWORD *)v79 + 16) = v80[16];
    *((_DWORD *)v79 + 18) = v80[18];
    ++v78;
    v77 += 80;
  }
  while ((void **)(a2 + v77) != v76);
  if (v77)
  {
    uint8x8_t v97 = &a6[v77 / 8];
    do
    {
      int v98 = v76;
      if (a2 == a1)
      {
        if (v97 != a6)
        {
          uint64_t v151 = 0;
          int v152 = v97;
          unsigned __int8 v188 = a6;
          do
          {
            uint64_t v153 = &v97[v151];
            size_t v154 = &v98[v151];
            if (v98 != v97)
            {
              uint64_t v155 = v154 - 10;
              unint64_t v156 = (void **)*(v153 - 10);
              if (v153 - 8 == v156)
              {
                uint64_t v158 = &v97[v151 - 9];
                uint64_t v157 = *(unsigned int *)v158;
                uint64_t v159 = &v98[v151];
                uint64_t v160 = LODWORD(v98[v151 - 9]);
                if (v160 < v157)
                {
                  if (*((_DWORD *)v159 - 17) < v157)
                  {
                    *((_DWORD *)v159 - 18) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v160)
                  {
                    memmove(*v155, v156, 8 * v160);
                    uint64_t v155 = v154 - 10;
                  }
                  else
                  {
                    uint64_t v160 = 0;
                  }
                  uint64_t v161 = *(unsigned int *)v158;
                  if (v160 != v161) {
                    memcpy((char *)*v155 + 8 * v160, (char *)*(v153 - 10) + 8 * v160, 8 * v161 - 8 * v160);
                  }
                }
                else if (v157)
                {
                  memmove(*v155, v156, 8 * v157);
                }
                *((_DWORD *)v159 - 18) = v157;
              }
              else
              {
                if (&v98[v151 - 8] != *v155)
                {
                  free(*v155);
                  uint64_t v155 = v154 - 10;
                  unint64_t v156 = (void **)*(v153 - 10);
                }
                const void *v155 = v156;
                uint64_t v158 = v152 - 9;
                v98[v151 - 9] = v97[v151 - 9];
                *(v153 - 10) = v153 - 8;
                *((_DWORD *)&v97[v151 - 8] - 1) = 0;
              }
              *(_DWORD *)uint64_t v158 = 0;
              a6 = v188;
            }
            *((_DWORD *)v154 - 4) = *((_DWORD *)v153 - 4);
            *((_DWORD *)v154 - 2) = *((_DWORD *)v153 - 2);
            v151 -= 10;
            int v152 = v153 - 10;
          }
          while (v153 - 10 != a6);
        }
        break;
      }
      unsigned int v99 = (void **)*(v97 - 10);
      uint64_t v100 = *((unsigned int *)v97 - 18);
      int v101 = 0;
      if (v100)
      {
        uint64_t v102 = 8 * v100;
        uint64_t v103 = (int8x8_t *)*(v97 - 10);
        do
        {
          int8x8_t v104 = *v103++;
          uint8x8_t v105 = (uint8x8_t)vcnt_s8(v104);
          v105.i16[0] = vaddlv_u8(v105);
          v101 += v105.i32[0];
          v102 -= 8;
        }
        while (v102);
      }
      unsigned int v106 = *(void **)(a2 - 80);
      uint64_t v107 = *(unsigned int *)(a2 - 72);
      int v108 = 0;
      if (v107)
      {
        uint64_t v109 = 8 * v107;
        int v110 = *(int8x8_t **)(a2 - 80);
        do
        {
          int8x8_t v111 = *v110++;
          uint8x8_t v112 = (uint8x8_t)vcnt_s8(v111);
          v112.i16[0] = vaddlv_u8(v112);
          v108 += v112.i32[0];
          v109 -= 8;
        }
        while (v109);
      }
      unsigned int v113 = *((_DWORD *)v97 - 2) * v101;
      int v114 = *(_DWORD *)(a2 - 8);
      v76 -= 10;
      if (v113 >= v114 * v108)
      {
        if (v98 == v97)
        {
          uint64_t v117 = (uint64_t)v97;
          int v114 = *((_DWORD *)v97 - 2);
          uint64_t v115 = (void *)a2;
          v97 -= 10;
          goto LABEL_128;
        }
        if (v99 == v97 - 8)
        {
          uint64_t v118 = *((unsigned int *)v98 - 18);
          if (v118 < v100)
          {
            if (*((_DWORD *)v98 - 17) < v100)
            {
              *((_DWORD *)v98 - 18) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v118) {
              memmove(*v76, v99, 8 * v118);
            }
            else {
              uint64_t v118 = 0;
            }
            uint64_t v120 = *((unsigned int *)v97 - 18);
            if (v118 != v120) {
              memcpy((char *)*v76 + 8 * v118, (char *)*(v97 - 10) + 8 * v118, (unsigned char *)*(v97 - 10) + 8 * v120 - ((unsigned char *)*(v97 - 10) + 8 * v118));
            }
          }
          else if (v100)
          {
            memmove(*v76, v99, 8 * v100);
          }
          *((_DWORD *)v98 - 18) = v100;
        }
        else
        {
          uint64_t v123 = (void **)*(v98 - 10);
          if (v123 != v98 - 8)
          {
            free(v123);
            unsigned int v99 = (void **)*(v97 - 10);
            LODWORD(v100) = *((_DWORD *)v97 - 18);
          }
          *(v98 - 10) = v99;
          int v124 = *((_DWORD *)v97 - 17);
          *((_DWORD *)v98 - 18) = v100;
          *((_DWORD *)v98 - 17) = v124;
          *(v97 - 10) = v97 - 8;
          *((_DWORD *)v97 - 17) = 0;
        }
        uint64_t v117 = (uint64_t)v97;
        uint64_t v115 = (void *)a2;
        v97 -= 10;
      }
      else
      {
        uint64_t v115 = (void *)(a2 - 80);
        if (v98 == (void **)a2)
        {
          uint64_t v117 = a2;
          goto LABEL_128;
        }
        if (v106 == (void *)(a2 - 64))
        {
          uint64_t v116 = *((unsigned int *)v98 - 18);
          if (v116 < v107)
          {
            if (*((_DWORD *)v98 - 17) < v107)
            {
              *((_DWORD *)v98 - 18) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v116) {
              memmove(*v76, *(const void **)(a2 - 80), 8 * v116);
            }
            else {
              uint64_t v116 = 0;
            }
            uint64_t v119 = *(unsigned int *)(a2 - 72);
            if (v116 != v119) {
              memcpy((char *)*v76 + 8 * v116, (const void *)(*v115 + 8 * v116), *v115 + 8 * v119 - (*v115 + 8 * v116));
            }
          }
          else if (v107)
          {
            memmove(*v76, *(const void **)(a2 - 80), 8 * v107);
          }
          *((_DWORD *)v98 - 18) = v107;
        }
        else
        {
          int v121 = (void **)*(v98 - 10);
          if (v121 != v98 - 8)
          {
            free(v121);
            unsigned int v106 = *(void **)(a2 - 80);
            LODWORD(v107) = *(_DWORD *)(a2 - 72);
          }
          *(v98 - 10) = v106;
          int v122 = *(_DWORD *)(a2 - 68);
          *((_DWORD *)v98 - 18) = v107;
          *((_DWORD *)v98 - 17) = v122;
          *(void *)(a2 - 80) = a2 - 64;
          *(_DWORD *)(a2 - 68) = 0;
        }
        uint64_t v117 = a2;
      }
      *(_DWORD *)(v117 - 72) = 0;
      int v114 = *(_DWORD *)(v117 - 8);
LABEL_128:
      *((_DWORD *)v98 - 4) = *(_DWORD *)(v117 - 16);
      *((_DWORD *)v98 - 2) = v114;
      a2 = (uint64_t)v115;
    }
    while (v97 != a6);
  }
LABEL_247:
  if (a6 && v78)
  {
    do
    {
      v180 = *a6;
      int v179 = a6 + 2;
      unint64_t v178 = v180;
      if (v180 != v179) {
        free(v178);
      }
      a6 = (void **)(v179 + 8);
      --v78;
    }
    while (v78);
  }
}

void sub_1CC2B3D98(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    int v7 = -1;
    long long v8 = xmmword_1CFAC4A20;
    int v5 = -2;
    long long v6 = xmmword_1CFAC6E20;
    uint64_t v2 = 168 * a2;
    uint64_t v3 = (void *)(a1 + 40);
    do
    {
      if ((sub_1CC2AEC04((uint64_t)(v3 - 5), (uint64_t)&v7) & 1) == 0
        && (sub_1CC2AEC04((uint64_t)(v3 - 5), (uint64_t)&v5) & 1) == 0)
      {
        uint64_t v4 = (void *)*(v3 - 2);
        if (v3 != v4) {
          free(v4);
        }
      }
      v3 += 21;
      v2 -= 168;
    }
    while (v2);
  }
}

uint64_t sub_1CC2B3E40()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable the global merge pass";
  v3.n128_u64[1] = 28;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCCBC98, "enable-global-merge", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCBC98, &dword_1CB82C000);
  sub_1CB883A14((uint64_t)&qword_1EBCCBD58, 0, 0);
  dword_1EBCCBDD8 = 0;
  qword_1EBCCBDE0 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCCBDE8 = 0;
  qword_1EBCCBD58 = (uint64_t)&unk_1F2643F00;
  qword_1EBCCBDF0 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCCBDF8 = (uint64_t)&unk_1F25EA168;
  qword_1EBCCBE10 = (uint64_t)&qword_1EBCCBDF8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCCBD58, "global-merge-max-offset", 0x17uLL);
  word_1EBCCBD62 = word_1EBCCBD62 & 0xFF9F | 0x20;
  qword_1EBCCBD78 = (uint64_t)"Set maximum offset for global merge pass";
  unk_1EBCCBD80 = 40;
  dword_1EBCCBDD8 = 0;
  byte_1EBCCBDEC = 1;
  dword_1EBCCBDE8 = 0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCCBD58);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCCBD58, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Improve global merge pass to look at uses";
  v3.n128_u64[1] = 41;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCCBE18, "global-merge-group-by-use", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCBE18, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Improve global merge pass to ignore globals only used alone";
  v3.n128_u64[1] = 59;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCCBED8, "global-merge-ignore-single-use", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCBED8, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable global merge pass on constants";
  v3.n128_u64[1] = 37;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCCBF98, "global-merge-on-const", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCBF98, &dword_1CB82C000);
  sub_1CB883A14((uint64_t)&qword_1EBCCC058, 0, 0);
  dword_1EBCCC0D8 = 0;
  qword_1EBCCC0E8 = 0;
  qword_1EBCCC0E0 = (uint64_t)&unk_1F2643C00;
  qword_1EBCCC058 = (uint64_t)&unk_1F2609740;
  qword_1EBCCC0F0 = (uint64_t)&unk_1F2643CF0;
  qword_1EBCCC0F8 = (uint64_t)&unk_1F26097A8;
  qword_1EBCCC110 = (uint64_t)&qword_1EBCCC0F8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCCC058, "global-merge-on-external", 0x18uLL);
  word_1EBCCC062 = word_1EBCCC062 & 0xFF9F | 0x20;
  qword_1EBCCC078 = (uint64_t)"Enable global merge pass on external linkage";
  qword_1EBCCC080 = 44;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCCC058);
  return __cxa_atexit((void (*)(void *))sub_1CC243CA8, &qword_1EBCCC058, &dword_1CB82C000);
}

void sub_1CC2B41BC(llvm *a1)
{
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v3);
  operator new();
}

uint64_t sub_1CC2B4274(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCC118;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260C0F8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCC120, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC2B41BC;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCCC120, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC2B4340()
{
}

void sub_1CC2B4380(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2B43B8(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
}

BOOL sub_1CC2B448C(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, (llvm::LLVMContextImpl ****)a2)) {
    return 0;
  }
  int v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::LoopInfoWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  *(void *)(a1 + 40) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::LoopInfoWrapperPass::ID)+ 32;
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_11:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::ScalarEvolutionWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  *(void *)(a1 + 32) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  uint64_t v13 = *(uint64_t **)(a1 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_16:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_16;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  *(void *)(a1 + 72) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::DominatorTreeWrapperPass::ID)+ 32;
  int8x8_t v17 = *(uint64_t **)(a1 + 8);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  if (v18 == v19)
  {
LABEL_21:
    uint64_t v20 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v18 != &llvm::TargetTransformInfoWrapperPass::ID)
    {
      v18 += 16;
      if (v18 == v19) {
        goto LABEL_21;
      }
    }
    uint64_t v20 = *(void *)(v18 + 8);
  }
  int v21 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v20 + 96))(v20, &llvm::TargetTransformInfoWrapperPass::ID);
  *(void *)(a1 + 64) = llvm::TargetTransformInfoWrapperPass::getTTI(v21, (const Function *)a2);
  *(void *)(a1 + 48) = *(void *)(a2 + 40) + 272;
  uint64_t v22 = *(uint64_t **)(a1 + 8);
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  if (v23 == v24)
  {
LABEL_26:
    uint64_t v25 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v23 != &llvm::OptimizationRemarkEmitterWrapperPass::ID)
    {
      v23 += 16;
      if (v23 == v24) {
        goto LABEL_26;
      }
    }
    uint64_t v25 = *(void *)(v23 + 8);
  }
  *(void *)(a1 + 56) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v25 + 96))(v25, &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), llvm::TargetLibraryInfoWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    uint64_t v27 = (*(uint64_t (**)(uint64_t, char *))(*(void *)AnalysisPass + 96))(AnalysisPass, llvm::TargetLibraryInfoWrapperPass::ID);
    if (v27)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      int v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      int v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      int v46 = 0;
      uint64_t v28 = v27 + 32;
      if (!*(unsigned char *)(v27 + 232))
      {
        uint64_t v36 = *(void *)(a2 + 40) + 216;
        __int16 v48 = 260;
        v47[0] = v36;
        llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v47);
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        int v60 = 0;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        *(void *)&long long v37 = -1;
        *((void *)&v37 + 1) = -1;
        *(_OWORD *)__src = v37;
        long long v52 = v37;
        long long v53 = v37;
        long long v54 = v37;
        long long v55 = v37;
        long long v56 = v37;
        *(_OWORD *)uint64_t v57 = v37;
        *(void *)&v57[13] = -1;
        sub_1CC153974((uint64_t)__src, (int *)__p);
        sub_1CD4D04B8(v28, (uint64_t)__src);
        sub_1CD4CFA4C((uint64_t *)__src);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_1CC1569E8(__src, v28);
    }
  }
  *(void *)(a1 + 96) = 0;
  uint64_t v29 = *(uint64_t **)(a1 + 8);
  *(unsigned char *)(a1 + 80) = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)v29[3], &unk_1EA61F34B, 1) != 0;
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  if (*v29 == v31)
  {
LABEL_35:
    uint64_t v32 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v30 != &llvm::AssumptionCacheTracker::ID)
    {
      v30 += 16;
      if (v30 == v31) {
        goto LABEL_35;
      }
    }
    uint64_t v32 = *(void *)(v30 + 8);
  }
  int v33 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v32 + 96))(v32, &llvm::AssumptionCacheTracker::ID);
  *(void *)(a1 + 88) = llvm::AssumptionCacheTracker::getAssumptionCache(v33, (llvm::Function *)a2);
  *(void *)(a1 + 104) = *(void *)(a2 + 40);
  uint64_t v34 = *(void *)(a1 + 40);
  for (uint64_t i = *(llvm::Loop ***)(v34 + 24); i != *(llvm::Loop ***)(v34 + 32); ++i)
  {
    if (!*(void *)*i) {
      sub_1CC2B4AD4(a1, *i);
    }
  }
  return *(unsigned char *)(a1 + 112) != 0;
}

void sub_1CC2B4AD4(uint64_t a1, llvm::Loop *a2)
{
  int v4 = (uint64_t *)*((void *)a2 + 1);
  int v5 = (uint64_t *)*((void *)a2 + 2);
  if (v4 != v5)
  {
    int v6 = 0;
    do
    {
      uint64_t v7 = *v4++;
      v6 |= sub_1CC2B4AD4(a1, v7);
    }
    while (v4 != v5);
    if (v6) {
      sub_1CC2B4D78((int)"nested hardware-loops not supported", 35, (int)"HWLoopNested", 12, *(void *)(a1 + 56), a2);
    }
  }
  uint64_t v16 = a2;
  long long v17 = 0u;
  memset(v18, 0, 27);
  if (llvm::HardwareLoopInfo::canAnalyze((llvm::HardwareLoopInfo *)&v16, *(llvm::LoopInfo **)(a1 + 40)))
  {
    if (byte_1EBCCC1A8
      || ((*(uint64_t (**)(void, llvm::Loop *, void, void, void, llvm::Loop **))(***(void ***)(a1 + 64)
                                                                                                 + 200))(**(void **)(a1 + 64), a2, *(void *)(a1 + 32), *(void *)(a1 + 88), *(void *)(a1 + 96), &v16) & 1) != 0)
    {
      if (word_1EBCCC430) {
        *((void *)&v18[0] + 1) = llvm::IntegerType::get(**(llvm::IntegerType ***)(a1 + 104), (llvm::LLVMContext *)dword_1EBCCC4A8);
      }
      if (word_1EBCCC370)
      {
        uint64_t v9 = (llvm::ConstantInt *)**((void **)&v18[0] + 1);
        unsigned int v10 = *(_DWORD *)(*((void *)&v18[0] + 1) + 8);
        unsigned int v20 = v10 >> 8;
        if (v10 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v10) + 63);
        if (v10 <= 0xFF) {
          LODWORD(v11) = 0;
        }
        uint64_t v19 = v11 & dword_1EBCCC3E8;
        uint64_t v12 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v19, v8);
        if (v20 >= 0x41)
        {
          if (v19) {
            MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
          }
        }
        *(void *)&v18[1] = v12;
      }
      sub_1CC2B4FBC((llvm::ScalarEvolution **)a1, (llvm::HardwareLoopInfo *)&v16);
    }
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = "it's not profitable to create a hardware-loop";
    uint64_t v15 = "HWLoopNotProfitable";
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = "cannot analyze loop, irreducible control flow";
    uint64_t v15 = "HWLoopCannotAnalyze";
  }
  sub_1CC2B4D78((int)v14, 45, (int)v15, 19, v13, a2);
}

void sub_1CC2B4D78(int a1, int a2, int a3, int a4, int a5, llvm::Loop *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  llvm::Loop::getStartLoc(this);
}

void sub_1CC2B4FBC(llvm::ScalarEvolution **a1, llvm::HardwareLoopInfo *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  llvm::HardwareLoopInfo::isHardwareLoopCandidate(this, a1[4], a1[5], a1[9]);
}

uint64_t sub_1CC2B6C4C(uint64_t a1, uint64_t ***a2, uint64_t a3, uint64_t a4, char a5)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(unsigned char *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a1 + 136;
  *(void *)(a1 + 112) = a1 + 136;
  *(void *)(a1 + 120) = 16;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 264) = a1 + 280;
  *(void *)(a1 + 272) = 0x200000000;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = a1 + 384;
  *(void *)(a1 + 360) = a1 + 384;
  *(void *)(a1 + 368) = 2;
  *(_DWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 1;
  uint64_t v6 = ***a2;
  v8[0] = &unk_1F2604920;
  v8[1] = &unk_1F2602158;
  v8[2] = a3;
  v8[3] = a3;
  long long v9 = 0u;
  long long v10 = 0u;
  __int16 v11 = 257;
  v12[0] = &unk_1F260C198;
  v12[1] = a1;
  uint64_t v13 = v12;
  uint64_t v14 = &unk_1F2616B68;
  v15[3] = v15;
  v15[0] = &unk_1F260C198;
  v15[1] = a1;
  sub_1CC2B6EC8(a1 + 448, v6, (uint64_t)v8, (uint64_t)&v14, 0, 0, 0);
  llvm::IRBuilderCallbackInserter::~IRBuilderCallbackInserter((llvm::IRBuilderCallbackInserter *)&v14);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  *(void *)(a1 + 680) = a1 + 696;
  *(void *)(a1 + 688) = 0x800000000;
  *(void *)(a1 + 760) = "";
  return a1;
}

uint64_t sub_1CC2B6E94(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F260C198;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC2B6EBC(uint64_t a1, llvm::Value **a2)
{
  return llvm::SCEVExpander::rememberInstruction(*(llvm::SCEVExpander **)(a1 + 8), *a2);
}

uint64_t sub_1CC2B6EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a1 + 120;
  *(void *)(a1 + 80) = a1 + 192;
  *(void *)(a1 + 88) = a5;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(unsigned char *)(a1 + 102) = 7;
  *(void *)(a1 + 104) = a6;
  *(void *)(a1 + 112) = a7;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 120) = &unk_1F2604920;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a1 + 128) = &unk_1F2602158;
  *(void *)(a1 + 136) = v8;
  long long v9 = *(_OWORD *)(a3 + 24);
  long long v10 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 144) = v9;
  *(void *)(a1 + 192) = &unk_1F2616B68;
  sub_1CC2B6FA8(a1 + 200, a4 + 8);
  return a1;
}

uint64_t sub_1CC2B6FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC2B7040(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 680);
  if (v2 != (void *)(a1 + 696)) {
    free(v2);
  }
  llvm::IRBuilderCallbackInserter::~IRBuilderCallbackInserter((llvm::IRBuilderCallbackInserter *)(a1 + 640));
  uint64_t v3 = *(void **)(a1 + 448);
  if (v3 != (void *)(a1 + 464)) {
    free(v3);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 416), 8);
  int v4 = *(void **)(a1 + 360);
  if (v4 != *(void **)(a1 + 352)) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 328), 8);
  sub_1CC2B7110((void **)(a1 + 264));
  int v5 = *(void **)(a1 + 112);
  if (v5 != *(void **)(a1 + 104)) {
    free(v5);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 80), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  sub_1CC2B71A8(a1 + 32);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 32), 8);
  return a1;
}

void **sub_1CC2B7110(void **result)
{
  char v1 = (void **)*result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    uint64_t v7 = (char *)*result;
    uint64_t v8 = result;
    uint64_t v3 = 24 * v2;
    do
    {
      uint64_t v4 = *(void *)&v7[v3 - 8];
      if (v4 != -8192 && v4 != -4096 && v4 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList(&v7[v3 - 24]);
      }
      v3 -= 24;
    }
    while (v3);
    uint64_t result = v8;
    char v1 = (void **)*v8;
  }
  if (v1 != result + 2)
  {
    uint64_t v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

uint64_t sub_1CC2B71A8(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void **)result;
    uint64_t v3 = *(void *)result + 40 * v1;
    do
    {
      uint64_t v4 = v2[1];
      if ((*v2 != -4096 || v4 != -4096) && (*v2 != -8192 || v4 != -8192))
      {
        uint64_t v5 = v2[4];
        if (v5 != -8192 && v5 != -4096 && v5 != 0)
        {
          unint64_t v7 = v2[2] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v7 = v2[3];
          uint64_t v8 = (unint64_t *)v2[3];
          if (v8)
          {
            *uint64_t v8 = *v8 & 7 | v7;
          }
          else
          {
            uint64_t v9 = v2[4];
            long long v10 = ***(int32x2_t ****)v9;
            unint64_t v11 = (unint64_t)v10[303];
            if (v11 <= v7)
            {
              uint64_t v12 = v10[305].u32[0];
              if (v11 + 16 * v12 > v7)
              {
                unsigned int v13 = v12 - 1;
                LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                uint64_t v15 = (uint64_t *)(v11 + 16 * v14);
                uint64_t v16 = *v15;
                if (v9 == *v15)
                {
LABEL_22:
                  uint64_t *v15 = -8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v9 = v2[4];
                }
                else
                {
                  int v17 = 1;
                  while (v16 != -4096)
                  {
                    int v18 = v14 + v17++;
                    uint64_t v14 = v18 & v13;
                    uint64_t v16 = *(void *)(v11 + 16 * v14);
                    if (v9 == v16)
                    {
                      uint64_t v15 = (uint64_t *)(v11 + 16 * v14);
                      goto LABEL_22;
                    }
                  }
                }
                *(unsigned char *)(v9 + 17) &= ~1u;
              }
            }
          }
        }
      }
      v2 += 5;
    }
    while (v2 != (void *)v3);
  }
  return result;
}

uint64_t sub_1CC2B72DC()
{
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Force hardware loops intrinsics to be inserted";
  v2.n128_u64[1] = 46;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCC128, "force-hardware-loops", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCC128, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Force hardware loop counter to be updated through a phi";
  v2.n128_u64[1] = 55;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCC1E8, "force-hardware-loop-phi", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCC1E8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Force allowance of nested hardware loops";
  v2.n128_u64[1] = 40;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCC2A8, "force-nested-hardware-loop", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCC2A8, &dword_1CB82C000);
  int v4 = 1;
  int v1 = 1;
  v2.n128_u64[0] = (unint64_t)"Set the loop decrement value";
  v2.n128_u64[1] = 28;
  uint64_t v3 = &v1;
  sub_1CD45A86C((uint64_t)&unk_1EBCCC368, "hardware-loop-decrement", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCCC368, &dword_1CB82C000);
  int v4 = 1;
  int v1 = 32;
  v2.n128_u64[0] = (unint64_t)"Set the loop counter bitwidth";
  v2.n128_u64[1] = 29;
  uint64_t v3 = &v1;
  sub_1CD45A86C((uint64_t)&unk_1EBCCC428, "hardware-loop-counter-bitwidth", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCCC428, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[1] = 40;
  uint64_t v3 = &v1;
  v2.n128_u64[0] = (unint64_t)"Force generation of loop guard intrinsic";
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCC4E8, "force-hardware-loop-guard", &v4, (unsigned char **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCC4E8, &dword_1CB82C000);
}

void sub_1CC2B7514(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  operator new();
}

void llvm::createIfConverter()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC2B76F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCC5A8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F260C1E0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = xmmword_1CFB28DF0;
  *(_OWORD *)(a1 + 320) = unk_1CFB28E00;
  *(_OWORD *)(a1 + 272) = llvm::MCSchedModel::Default;
  *(_OWORD *)(a1 + 288) = unk_1CFB28DE0;
  *(_OWORD *)(a1 + 344) = llvm::MCSchedModel::Default;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = unk_1CFB28E00;
  *(_OWORD *)(a1 + 376) = xmmword_1CFB28DF0;
  *(_OWORD *)(a1 + 360) = unk_1CFB28DE0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 464) = a1 + 480;
  *(void *)(a1 + 472) = 0x1000000000;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = a1 + 624;
  *(_OWORD *)(a1 + 608) = xmmword_1CD96EEC0;
  *(void *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 660) = -1;
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 688) = a1 + 664;
      a1 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1 + 664);
    }
    else
    {
      *(void *)(a1 + 688) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 688) = 0;
  }
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCC5B0, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CC2B7514;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCCC5B0, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return v2;
}

void sub_1CC2B78D4()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC2B79B4(uint64_t a1)
{
  *(void *)a1 = &unk_1F260C1E0;
  uint64_t v2 = a1 + 664;
  uint64_t v3 = *(void *)(a1 + 688);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  free(*(void **)(a1 + 640));
  int v4 = *(void **)(a1 + 600);
  if (v4 != (void *)(a1 + 624)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 464);
  if (v5 != (void *)(a1 + 480)) {
    free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 248);
  if (v6)
  {
    sub_1CC2BADC0(a1 + 248, v6);
    operator delete(*(void **)(a1 + 248));
  }
  *(void *)a1 = &unk_1F260E110;
  unint64_t v7 = *(void **)(a1 + 176);
  if (v7 != (void *)(a1 + 192)) {
    free(v7);
  }
  uint64_t v8 = *(void **)(a1 + 104);
  if (v8 != (void *)(a1 + 120)) {
    free(v8);
  }
  uint64_t v9 = *(void **)(a1 + 32);
  if (v9 != (void *)(a1 + 48)) {
    free(v9);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC2B7B18(uint64_t a1)
{
  sub_1CC2B79B4(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2B7B50(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

BOOL sub_1CC2B7BC4(uint64_t a1, llvm *a2)
{
  v204[32] = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(llvm::LLVMContextImpl *****)a2) & 1) == 0)
  {
    uint64_t v169 = a1;
    uint64_t v3 = *(void *)(a1 + 688);
    if (!v3 || (*(unsigned int (**)(uint64_t, llvm *))(*(void *)v3 + 48))(v3, a2))
    {
      int v4 = (const llvm::TargetSubtargetInfo *)*((void *)a2 + 2);
      *(void *)(a1 + 552) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)v4 + 120))(v4);
      *(void *)(a1 + 560) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)v4 + 104))(v4);
      *(void *)(a1 + 568) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)v4 + 176))(v4);
      uint64_t v5 = *(uint64_t **)(a1 + 8);
      uint64_t v6 = *v5;
      uint64_t v7 = v5[1];
      if (v6 == v7)
      {
LABEL_7:
        uint64_t v8 = 0;
      }
      else
      {
        while (*(_UNKNOWN **)v6 != &llvm::MachineBlockFrequencyInfo::ID)
        {
          v6 += 16;
          if (v6 == v7) {
            goto LABEL_7;
          }
        }
        uint64_t v8 = *(void *)(v6 + 8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::MachineBlockFrequencyInfo::ID);
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      uint64_t v170 = v10;
      int v173 = 0;
      unint64_t v11 = *(uint64_t **)(a1 + 8);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      if (v12 == v13)
      {
LABEL_13:
        uint64_t v14 = 0;
      }
      else
      {
        while (*(_UNKNOWN **)v12 != &llvm::MachineBranchProbabilityInfo::ID)
        {
          v12 += 16;
          if (v12 == v13) {
            goto LABEL_13;
          }
        }
        uint64_t v14 = *(void *)(v12 + 8);
      }
      *(void *)(a1 + 576) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::MachineBranchProbabilityInfo::ID);
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      if (v16 == v17)
      {
LABEL_18:
        uint64_t v18 = 0;
      }
      else
      {
        while (*(_UNKNOWN **)v16 != &llvm::ProfileSummaryInfoWrapperPass::ID)
        {
          v16 += 16;
          if (v16 == v17) {
            goto LABEL_18;
          }
        }
        uint64_t v18 = *(void *)(v16 + 8);
      }
      uint64_t v159 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
      *(void *)(a1 + 584) = *((void *)a2 + 5);
      llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(a1 + 272), v4);
      if (!*(void *)(a1 + 560)) {
        goto LABEL_26;
      }
      uint64_t v19 = **(void **)(**(void **)(a1 + 584) + 360);
      *(unsigned char *)(a1 + 656) = **(unsigned char **)(**(void **)(a1 + 584) + 360) & 1;
      if (v19)
      {
        int v20 = 0;
      }
      else
      {
        sub_1CD509D24((uint64_t)v192, 1, 0, (uint64_t)&v170, *(void *)(a1 + 576), v159, 0);
        uint64_t v50 = *(void *)(a1 + 560);
        uint64_t v51 = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)v4 + 176))(v4);
        int v20 = sub_1CD509F30((uint64_t)v192, a2, v50, v51, 0, 0);
        sub_1CD50BA3C((uint64_t)v192);
      }
      int v21 = *(_DWORD *)(v169 + 660);
      if (v21 < dword_1EBCCC638 || dword_1EBCCC6F8 != -1 && v21 > dword_1EBCCC6F8)
      {
LABEL_26:
        BOOL v9 = 0;
LABEL_27:
        MEMORY[0x1D25D9CD0](v171, 8);
        return v9;
      }
      int v158 = v20;
      llvm::MachineFunction::RenumberBlocks(a2, 0);
      uint64_t v23 = *(char **)(v169 + 256);
      uint64_t v24 = (uint64_t *)(v169 + 248);
      unint64_t v25 = ((*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
      uint64_t v167 = *(char **)(v169 + 248);
      unint64_t v26 = 0x8F9C18F9C18F9C19 * ((v23 - v167) >> 3);
      unint64_t v27 = v25 - v26;
      if (v25 <= v26)
      {
        if (v25 < v26) {
          sub_1CC2BADC0(v169 + 248, (uint64_t)&v167[328 * v25]);
        }
      }
      else
      {
        uint64_t v28 = *(void *)(v169 + 264);
        if (0x8F9C18F9C18F9C19 * ((v28 - (uint64_t)v23) >> 3) >= v27)
        {
          uint64_t v49 = &v23[328 * v27];
          do
          {
            *(_WORD *)v23 &= 0xFC00u;
            *(_OWORD *)(v23 + 4) = 0uLL;
            *(_OWORD *)(v23 + 20) = 0uLL;
            *((_DWORD *)v23 + 9) = 0;
            *((void *)v23 + 5) = v23 + 56;
            *((void *)v23 + 6) = 0x400000000;
            *((void *)v23 + 23) = v23 + 200;
            *((void *)v23 + 24) = 0x400000000;
            v23 += 328;
          }
          while (v23 != v49);
          *(void *)(v169 + 256) = v49;
        }
        else
        {
          unint64_t v29 = 0x1F3831F3831F3832 * ((v28 - (uint64_t)v167) >> 3);
          if (v29 <= v25) {
            unint64_t v29 = ((*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
          }
          if (0x8F9C18F9C18F9C19 * ((v28 - (uint64_t)v167) >> 3) >= 0x63E7063E7063E7) {
            unint64_t v30 = 0xC7CE0C7CE0C7CELL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30 > 0xC7CE0C7CE0C7CELL) {
            sub_1CB833614();
          }
          uint64_t v31 = (char *)operator new(328 * v30);
          uint64_t v32 = &v31[328 * v25];
          __p = &v31[8 * ((v23 - v167) >> 3)];
          int v33 = __p;
          do
          {
            *(_WORD *)v33 &= 0xFC00u;
            *(_OWORD *)(v33 + 4) = 0uLL;
            *(_OWORD *)(v33 + 20) = 0uLL;
            *((_DWORD *)v33 + 9) = 0;
            *((void *)v33 + 5) = v33 + 56;
            *((void *)v33 + 6) = 0x400000000;
            *((void *)v33 + 23) = v33 + 200;
            *((void *)v33 + 24) = 0x400000000;
            v33 += 328;
          }
          while (v33 != v32);
          if (v23 == v167)
          {
            *(void *)(v169 + 248) = __p;
            *(void *)(v169 + 256) = v32;
            *(void *)(v169 + 264) = &v31[328 * v30];
          }
          else
          {
            unint64_t v165 = &v31[328 * v30];
            uint64_t v34 = 0;
            do
            {
              int8x8_t v35 = &v23[v34];
              uint64_t v36 = &__p[v34];
              uint64_t v37 = (uint64_t)&__p[v34 - 328];
              long long v38 = *(_OWORD *)&v23[v34 - 328];
              long long v39 = *(_OWORD *)&v23[v34 - 312];
              *(void *)(v37 + 32) = *(void *)&v23[v34 - 296];
              *(_OWORD *)uint64_t v37 = v38;
              *(_OWORD *)(v37 + 16) = v39;
              *((void *)v36 - 36) = v36 - 272;
              int v40 = (unsigned int *)&__p[v34 - 280];
              *((void *)v36 - 35) = 0x400000000;
              uint64_t v41 = (unsigned int *)&v23[v34 - 280];
              unsigned int v42 = *v41;
              if (*v41 && v36 != v35)
              {
                int v43 = (const void *)*((void *)v35 - 36);
                uint64_t v44 = (uint64_t)&v23[v34 - 272];
                if ((const void *)v44 == v43)
                {
                  if (v42 >= 5) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(&__p[v34 - 272], v43, 32 * *v41);
                  unsigned int *v40 = v42;
                }
                else
                {
                  *(void *)&__p[v34 - 288] = v43;
                  unsigned int *v40 = v42;
                  __int16 v48 = &v23[v34 - 276];
                  *((_DWORD *)v36 - 69) = *(_DWORD *)v48;
                  *((void *)v35 - 36) = v44;
                  *(_DWORD *)__int16 v48 = 0;
                }
                unsigned int *v41 = 0;
              }
              *((void *)v36 - 18) = v36 - 128;
              *((void *)v36 - 17) = 0x400000000;
              unsigned int v45 = *((_DWORD *)v35 - 34);
              if (v45 && v36 != v35)
              {
                int v46 = *(const void **)&v23[v34 - 144];
                uint64_t v47 = (uint64_t)&v23[v34 - 128];
                if ((const void *)v47 == v46)
                {
                  if (v45 >= 5) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v36 - 128, v46, 32 * *((unsigned int *)v35 - 34));
                  *((_DWORD *)v36 - 34) = v45;
                }
                else
                {
                  *((void *)v36 - 18) = v46;
                  *((_DWORD *)v36 - 34) = v45;
                  *((_DWORD *)v36 - 33) = *(_DWORD *)&v23[v34 - 132];
                  *(void *)&v23[v34 - 144] = v47;
                  *(_DWORD *)&v23[v34 - 132] = 0;
                }
                *((_DWORD *)v35 - 34) = 0;
              }
              v34 -= 328;
            }
            while (&v23[v34] != v167);
            uint64_t v23 = *(char **)(v169 + 248);
            long long v52 = *(char **)(v169 + 256);
            *(void *)(v169 + 248) = &__p[v34];
            *(void *)(v169 + 256) = v32;
            *(void *)(v169 + 264) = v165;
            if (v52 == v23)
            {
              uint64_t v24 = (uint64_t *)(v169 + 248);
            }
            else
            {
              uint64_t v24 = (uint64_t *)(v169 + 248);
              do
              {
                long long v53 = (char *)*((void *)v52 - 18);
                if (v52 - 128 != v53) {
                  free(v53);
                }
                long long v54 = (char *)*((void *)v52 - 36);
                if (v52 - 272 != v54) {
                  free(v54);
                }
                v52 -= 328;
              }
              while (v52 != v23);
            }
          }
          if (v23) {
            operator delete(v23);
          }
        }
      }
      *(unsigned char *)(v169 + 657) = 0;
      if (dword_1EBCCC7B8 == -1 || dword_1EBCCC7B8 >= 1)
      {
        for (uint64_t i = (void *)*((void *)a2 + 41); ; uint64_t i = (void *)v161[1])
        {
          if (i == (void *)((char *)a2 + 320))
          {
            *(void *)unsigned int v192 = sub_1CC2BAE34;
            sub_1CC2BC4D8(0, 0, (uint64_t (**)(uint64_t *, uint64_t *))v192, 0, 0, 0);
            break;
          }
          unint64_t v202 = v204;
          uint64_t v161 = i;
          v204[0] = i;
          v204[1] = 0;
          unsigned int v57 = 1;
          uint64_t v203 = 0x1000000001;
          do
          {
            while (1)
            {
              while (1)
              {
                uint64_t v58 = (char *)v202 + 16 * v57;
                int v179 = 0;
                uint64_t v59 = *((void *)v58 - 2);
                int v179 = (llvm::MachineBasicBlock *)v59;
                int v60 = *(_DWORD *)(v59 + 24);
                uint64_t v61 = *v24;
                unsigned int v168 = (__int16 *)(*v24 + 328 * v60);
                if (!*(v58 - 8)) {
                  break;
                }
                uint64_t v62 = v61 + 328 * v60;
                int v63 = *(_DWORD *)(*(void *)(v62 + 24) + 24);
                uint64_t v64 = (_WORD *)(v61 + 328 * v63);
                int v164 = *(_DWORD *)(*(void *)(v62 + 32) + 24);
                uint64_t v65 = (_WORD *)(v61 + 328 * v164);
                if (*v64 & 1) != 0 && (*v65)
                {
                  __int16 *v168 = *v168 & 0xFFF9 | 4;
                  unsigned int v57 = v203;
                  goto LABEL_143;
                }
                uint64_t v66 = v61 + 328 * v60;
                uint64_t v67 = *(unsigned char **)(v66 + 40);
                uint64_t v162 = v66 + 40;
                uint64_t v68 = &v67[32 * *(unsigned int *)(v66 + 48)];
                v200[0] = v201;
                v200[1] = (void *)0x400000000;
                sub_1CB84AE28((unsigned int *)v200, v67, v68);
                char v69 = (*(uint64_t (**)(void))(**(void **)(v169 + 560) + 728))();
                uint64_t v178 = 0;
                uint64_t v70 = v61 + 328 * v63;
                uint64_t v72 = *(const llvm::MachineBasicBlock **)(v70 + 16);
                uint64_t v71 = (void *)(v70 + 16);
                unsigned int EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v169 + 576), v179, v72);
                char v163 = v69;
                if (v69)
                {
                  uint64_t v73 = (__int16 *)(v61 + 328 * v164);
                  goto LABEL_108;
                }
                *(_WORD *)unsigned int v192 = 0;
                memset(&v192[4], 0, 32);
                int v193 = 0;
                int v194 = v196;
                uint64_t v195 = 0x400000000;
                uint64_t v197 = v199;
                uint64_t v198 = 0x400000000;
                *(_WORD *)uint64_t v184 = 0;
                memset(&v184[4], 0, 32);
                int v185 = 0;
                uint64_t v186 = v188;
                uint64_t v187 = 0x400000000;
                unint64_t v189 = v191;
                uint64_t v190 = 0x400000000;
                v174[0] = v169;
                v174[1] = v192;
                v174[2] = v184;
                v174[3] = &v179;
                v174[4] = (char *)&v178 + 4;
                v174[5] = &v178;
                v174[6] = &EdgeProbability;
                v174[7] = v61 + 328 * v63;
                v174[8] = v168;
                char v175 = (__int16 *)(v61 + 328 * v164);
                uint64_t v73 = v175;
                uint64_t v176 = v200;
                uint64_t v178 = 0;
                int v85 = (unsigned __int16)*v64;
                if ((v85 & 3) != 0) {
                  goto LABEL_98;
                }
                int v86 = (unsigned __int16)*v65;
                if ((v86 & 3) != 0) {
                  goto LABEL_98;
                }
                int v110 = (void *)*v71;
                uint64_t v111 = v61 + 328 * v164;
                int v114 = *(void **)(v111 + 16);
                unsigned int v113 = (void *)(v111 + 16);
                uint8x8_t v112 = v114;
                if ((void *)*v71 == v114) {
                  goto LABEL_98;
                }
                uint64_t v115 = *(void *)(v61 + 328 * v63 + 24);
                if (!v115)
                {
                  if ((v85 & 0x10) != 0)
                  {
                    if (v110[1] == v110[4] + 320) {
                      uint64_t v115 = 0;
                    }
                    else {
                      uint64_t v115 = v110[1];
                    }
                  }
                  else
                  {
                    uint64_t v115 = 0;
                  }
                }
                uint64_t v151 = *(void *)(v61 + 328 * v164 + 24);
                if (!v151)
                {
                  if ((v86 & 0x10) != 0)
                  {
                    if (v112[1] == v112[4] + 320) {
                      uint64_t v151 = 0;
                    }
                    else {
                      uint64_t v151 = v112[1];
                    }
                  }
                  else
                  {
                    uint64_t v151 = 0;
                  }
                }
                if (v115 != v151 || !v115 && ((v86 | v85) & 0x10) != 0) {
                  goto LABEL_98;
                }
                if (((v110[9] - v110[8]) & 0x7FFFFFFF0) != 0) {
                  goto LABEL_98;
                }
                if (((v112[9] - v112[8]) & 0x7FFFFFFF0) != 0) {
                  goto LABEL_98;
                }
                if (*(void *)(v61 + 328 * v63 + 32) | *(void *)(v61 + 328 * v164 + 32)) {
                  goto LABEL_98;
                }
                uint64_t v183 = v110[7];
                uint64_t v152 = v112[7];
                uint64_t v181 = v110 + 6;
                uint64_t v182 = v152;
                v180 = v112 + 6;
                if (!sub_1CC2BBCF4(v169, &v183, &v182, (uint64_t *)&v181, (uint64_t *)&v180, (_DWORD *)&v178 + 1, &v178, (uint64_t)v110, (uint64_t)v112, (v85 & v86 & 0x10) != 0)|| (*(void *)&v192[16] = *v71, *(void *)&v184[16] = *v113, *(_WORD *)v192 = *(_WORD *)v192 & 0xFFEF | *v64 & 0x10, *(_WORD *)uint64_t v184 = *(_WORD *)v184 & 0xFFEF | *v65 & 0x10, !sub_1CC2BC2A4(v169, &v183, &v182, (uint64_t *)&v181,
                         (uint64_t *)&v180,
                         (__int16 *)v192,
                         (__int16 *)v184)))
                {
LABEL_98:
                  uint64_t v178 = 0;
                  int v87 = (unsigned __int16)*v64;
                  if ((v87 & 3) != 0) {
                    goto LABEL_100;
                  }
                  int v88 = (unsigned __int16)*v65;
                  if ((v88 & 3) != 0) {
                    goto LABEL_100;
                  }
                  if ((v87 & v88 & 0x10) == 0) {
                    goto LABEL_100;
                  }
                  uint64_t v116 = (void *)*v71;
                  if (((*(void *)(*v71 + 72) - *(void *)(*v71 + 64)) & 0x7FFFFFFF0) != 0) {
                    goto LABEL_100;
                  }
                  uint64_t v117 = v61 + 328 * v164;
                  uint64_t v120 = *(void **)(v117 + 16);
                  uint64_t v119 = v117 + 16;
                  uint64_t v118 = v120;
                  BOOL v121 = ((v120[9] - v120[8]) & 0x7FFFFFFF0) != 0 || *(_DWORD *)(v61 + 328 * v63 + 48) == 0;
                  if (v121 || *(_DWORD *)(v119 + 32) == 0) {
                    goto LABEL_100;
                  }
                  uint64_t v123 = v61 + 328 * v63;
                  uint64_t v124 = *(void *)(v123 + 24);
                  if (!v124)
                  {
                    if (v116[1] == v116[4] + 320) {
                      uint64_t v124 = 0;
                    }
                    else {
                      uint64_t v124 = v116[1];
                    }
                  }
                  uint64_t v125 = *(void *)(v123 + 32);
                  if (!v125)
                  {
                    if (v116[1] == v116[4] + 320) {
                      uint64_t v125 = 0;
                    }
                    else {
                      uint64_t v125 = v116[1];
                    }
                  }
                  uint64_t v126 = v61 + 328 * v164;
                  uint64_t v127 = *(void *)(v126 + 24);
                  if (!v127)
                  {
                    if (v118[1] == v118[4] + 320) {
                      uint64_t v127 = 0;
                    }
                    else {
                      uint64_t v127 = v118[1];
                    }
                  }
                  uint64_t v128 = *(void *)(v126 + 32);
                  if (!v128)
                  {
                    if (v118[1] == v118[4] + 320) {
                      uint64_t v128 = 0;
                    }
                    else {
                      uint64_t v128 = v118[1];
                    }
                  }
                  if (!v124 || !v125 || (v124 != v127 || v125 != v128) && (v125 != v127 || v124 != v128)) {
                    goto LABEL_100;
                  }
                  BOOL v129 = v125 == v127 && v124 == v128;
                  char v130 = !v129;
                  if (!v129) {
                    goto LABEL_196;
                  }
                  if ((v88 & 0x20) != 0)
                  {
                    sub_1CC2BC34C(v169, (uint64_t)v73);
                    uint64_t v116 = (void *)*v71;
                    uint64_t v118 = *(void **)v119;
LABEL_196:
                    uint64_t v183 = v116[7];
                    uint64_t v131 = v118[7];
                    uint64_t v181 = v116 + 6;
                    uint64_t v182 = v131;
                    v180 = v118 + 6;
                    if (sub_1CC2BBCF4(v169, &v183, &v182, (uint64_t *)&v181, (uint64_t *)&v180, (_DWORD *)&v178 + 1, &v178, (uint64_t)v116, (uint64_t)v118, 1)&& (*(void *)&v192[16] = *v71, *(void *)&v184[16] = *(void *)v119, *(_WORD *)v192 = *(_WORD *)v192 & 0xFFEF | *v64 & 0x10, *(_WORD *)uint64_t v184 = *(_WORD *)v184 & 0xFFEF | *v73 & 0x10, sub_1CC2BC2A4(v169, &v183, &v182, (uint64_t *)&v181,
                            (uint64_t *)&v180,
                            (__int16 *)v192,
                            (__int16 *)v184)))
                    {
                      *(_DWORD *)&v192[4] = *(_DWORD *)(v61 + 328 * v63 + 4);
                      *(_DWORD *)&v184[4] = *(_DWORD *)(v61 + 328 * v164 + 4);
                      int v132 = 1;
                      if (v130) {
                        goto LABEL_255;
                      }
LABEL_254:
                      sub_1CC2BC34C(v169, (uint64_t)v73);
                    }
                    else
                    {
                      int v132 = 0;
                      if ((v130 & 1) == 0) {
                        goto LABEL_254;
                      }
                    }
LABEL_255:
                    if (v132 && sub_1CC2BB2B4((uint64_t)v174, 1)) {
                      operator new();
                    }
                  }
                }
                else
                {
                  *(_DWORD *)&v192[4] = *(_DWORD *)(v61 + 328 * v63 + 4);
                  *(_DWORD *)&v184[4] = *(_DWORD *)(v61 + 328 * v164 + 4);
                  if (sub_1CC2BB2B4((uint64_t)v174, 0)) {
                    operator new();
                  }
                }
LABEL_100:
                if (v189 != v191) {
                  free(v189);
                }
                if (v186 != v188) {
                  free(v186);
                }
                if (v197 != v199) {
                  free(v197);
                }
                if (v194 != v196) {
                  free(v194);
                }
LABEL_108:
                if (sub_1CC2BB8E0(v169, v61 + 328 * v63, (uint64_t)v73, 0, (_DWORD *)&v178 + 1))
                {
                  uint64_t v89 = v61 + 328 * v63;
                  int v91 = *(_DWORD *)(v89 + 4);
                  int v90 = *(_DWORD *)(v89 + 8);
                  if (v90 + v91)
                  {
                    if ((*(unsigned int (**)(void, void, void, void, void))(**(void **)(v169 + 560)
                                                                                                + 320))(*(void *)(v169 + 560), *v71, (v90 + v91), *(unsigned int *)(v61 + 328 * v63 + 12), EdgeProbability)&& sub_1CC2BBA14(v169, (__int16 *)(v61 + 328 * v63), v162, 1, 0, 0))
                    {
                      operator new();
                    }
                  }
                }
                if (sub_1CC2BB8E0(v169, v61 + 328 * v63, (uint64_t)v73, 1, (_DWORD *)&v178 + 1))
                {
                  uint64_t v92 = v61 + 328 * v63;
                  int v94 = *(_DWORD *)(v92 + 4);
                  int v93 = *(_DWORD *)(v92 + 8);
                  if (v93 + v94)
                  {
                    if ((*(unsigned int (**)(void, void, void, void, void))(**(void **)(v169 + 560)
                                                                                                + 320))(*(void *)(v169 + 560), *v71, (v93 + v94), *(unsigned int *)(v61 + 328 * v63 + 12), EdgeProbability)&& sub_1CC2BBA14(v169, (__int16 *)(v61 + 328 * v63), v162, 1, 1, 0))
                    {
                      operator new();
                    }
                  }
                }
                if (sub_1CC2BBC4C(v169, v61 + 328 * v63, (_DWORD *)&v178 + 1))
                {
                  uint64_t v95 = v61 + 328 * v63;
                  int v97 = *(_DWORD *)(v95 + 4);
                  int v96 = *(_DWORD *)(v95 + 8);
                  if (v96 + v97)
                  {
                    if ((*(unsigned int (**)(void, void, void, void, void))(**(void **)(v169 + 560)
                                                                                                + 320))(*(void *)(v169 + 560), *v71, (v96 + v97), *(unsigned int *)(v61 + 328 * v63 + 12), EdgeProbability)&& sub_1CC2BBA14(v169, (__int16 *)(v61 + 328 * v63), v162, 0, 0, 0))
                    {
                      operator new();
                    }
                  }
                }
                uint64_t v24 = (uint64_t *)(v169 + 248);
                if ((v163 & 1) == 0)
                {
                  if (sub_1CC2BB8E0(v169, (uint64_t)v73, (uint64_t)v64, 0, (_DWORD *)&v178 + 1))
                  {
                    uint64_t v98 = v61 + 328 * v164;
                    int v100 = *(_DWORD *)(v98 + 4);
                    int v99 = *(_DWORD *)(v98 + 8);
                    if (v99 + v100)
                    {
                      if ((*(unsigned int (**)(void, void, void, void, void))(**(void **)(v169 + 560)
                                                                                                  + 320))(*(void *)(v169 + 560), *(void *)(v61 + 328 * v164 + 16), (v99 + v100), *(unsigned int *)(v61 + 328 * v164 + 12), 0x80000000 - EdgeProbability)&& sub_1CC2BBA14(v169, v73, (uint64_t)v200, 1, 0, 0))
                      {
                        operator new();
                      }
                    }
                  }
                  if (sub_1CC2BB8E0(v169, (uint64_t)v73, (uint64_t)v64, 1, (_DWORD *)&v178 + 1))
                  {
                    uint64_t v101 = v61 + 328 * v164;
                    int v103 = *(_DWORD *)(v101 + 4);
                    int v102 = *(_DWORD *)(v101 + 8);
                    if (v102 + v103)
                    {
                      if ((*(unsigned int (**)(void, void, void, void, void))(**(void **)(v169 + 560)
                                                                                                  + 320))(*(void *)(v169 + 560), *(void *)(v61 + 328 * v164 + 16), (v102 + v103), *(unsigned int *)(v61 + 328 * v164 + 12), 0x80000000 - EdgeProbability)&& sub_1CC2BBA14(v169, v73, (uint64_t)v200, 1, 1, 0))
                      {
                        operator new();
                      }
                    }
                  }
                  if (sub_1CC2BBC4C(v169, (uint64_t)v73, (_DWORD *)&v178 + 1))
                  {
                    uint64_t v104 = v61 + 328 * v164;
                    int v106 = *(_DWORD *)(v104 + 4);
                    int v105 = *(_DWORD *)(v104 + 8);
                    if (v105 + v106)
                    {
                      if ((*(unsigned int (**)(void, void, void, void, void))(**(void **)(v169 + 560)
                                                                                                  + 320))(*(void *)(v169 + 560), *(void *)(v61 + 328 * v164 + 16), (v105 + v106), *(unsigned int *)(v61 + 328 * v164 + 12), 0x80000000 - EdgeProbability)&& sub_1CC2BBA14(v169, v73, (uint64_t)v200, 0, 0, 0))
                      {
                        operator new();
                      }
                    }
                  }
                }
                __int16 *v168 = *v168 & 0xFFF1 | 4;
                unsigned int v57 = v203 - 1;
                LODWORD(v203) = v203 - 1;
                if (v200[0] == v201) {
                  goto LABEL_144;
                }
                free(v200[0]);
                unsigned int v57 = v203;
                if (!v203) {
                  goto LABEL_260;
                }
              }
              __int16 v74 = *v168;
              if ((*v168 & 6) == 0) {
                break;
              }
LABEL_143:
              LODWORD(v203) = --v57;
LABEL_144:
              if (!v57) {
                goto LABEL_260;
              }
            }
            uint64_t v75 = v61 + 328 * v60;
            *(void *)(v75 + 16) = v59;
            uint64_t v76 = (uint64_t *)(v75 + 16);
            __int16 *v168 = v74 | 2;
            if ((v74 & 1) == 0)
            {
              uint64_t v77 = v61 + 328 * v60;
              *(void *)(v77 + 32) = 0;
              uint64_t v78 = (uint64_t *)(v77 + 32);
              *(v78 - 1) = 0;
              uint64_t v79 = v78 - 1;
              *((_DWORD *)v78 + 4) = 0;
              int8x8_t v80 = v78 + 2;
              uint8x8_t v81 = (unsigned char **)(v78 + 1);
              int v82 = (*(uint64_t (**)(void))(**(void **)(v169 + 560) + 248))(*(void *)(v169 + 560));
              if (v82) {
                __int16 v83 = 0;
              }
              else {
                __int16 v83 = 16;
              }
              __int16 *v168 = *v168 & 0xFFEF | v83;
              if (v82)
              {
                uint64_t v84 = 0;
                *int8x8_t v80 = 0;
                *uint64_t v79 = 0;
                *uint64_t v78 = 0;
              }
              else
              {
                uint64_t v84 = *v80;
              }
              uint64_t v107 = *v81;
              int v108 = &(*v81)[32 * v84];
              *(void *)unsigned int v192 = &v192[16];
              *(void *)&v192[8] = 0x400000000;
              sub_1CB84AE28((unsigned int *)v192, v107, v108);
              if (*(_DWORD *)&v192[8])
              {
                if ((*(unsigned int (**)(void, unsigned char *))(**(void **)(v169 + 560) + 728))(*(void *)(v169 + 560), v192))
                {
                  __int16 v109 = 0;
                }
                else
                {
                  __int16 v109 = 32;
                }
              }
              else
              {
                __int16 v109 = 32;
              }
              __int16 v133 = *v168 & 0xFF9F | v109;
              uint64_t v134 = *v78;
              if (*v78) {
                BOOL v135 = 1;
              }
              else {
                BOOL v135 = (*v168 & 0x10) == 0;
              }
              if (v135) {
                __int16 v136 = 0;
              }
              else {
                __int16 v136 = 64;
              }
              __int16 v137 = v133 | v136;
              __int16 *v168 = v137;
              if (*v80) {
                BOOL v138 = v134 == 0;
              }
              else {
                BOOL v138 = 0;
              }
              if (v138)
              {
                unsigned int v139 = *(uint64_t **)(*v76 + 88);
                int8x8_t v140 = *(uint64_t **)(*v76 + 96);
                if (v139 == v140)
                {
LABEL_215:
                  *uint64_t v78 = 0;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v141 = *v139;
                    if (*v139 != *v79) {
                      break;
                    }
                    if (++v139 == v140) {
                      goto LABEL_215;
                    }
                  }
                  *uint64_t v78 = v141;
                  if (v141) {
                    goto LABEL_217;
                  }
                }
                __int16 *v168 = v137 | 0x80;
              }
LABEL_217:
              if (*(unsigned char **)v192 != &v192[16]) {
                free(*(void **)v192);
              }
              uint64_t v59 = *v76;
            }
            *(void *)unsigned int v192 = *(void *)(v59 + 56);
            *(void *)uint64_t v184 = v59 + 48;
            sub_1CC2BAED0(v169, v168, (uint64_t *)v192, (uint64_t *)v184, 0);
            __int16 v142 = *v168;
            if ((*v168 & 0x10) == 0
              || (v142 & 1) != 0
              || !*(_DWORD *)(v61 + 328 * v60 + 48)
              || (uint64_t v144 = v61 + 328 * v60,
                  uint64_t v146 = *(llvm::MachineBasicBlock **)(v144 + 24),
                  uint64_t v145 = (void *)(v144 + 24),
                  v146 == v179)
              || (uint64_t v147 = *(llvm::MachineBasicBlock **)(v61 + 328 * v60 + 32), v147 == v179)
              || !v147)
            {
              __int16 *v168 = v142 & 0xFFF9 | 4;
              int v143 = -1;
            }
            else
            {
              *(v58 - 8) = 1;
              if (v203 >= (unint64_t)HIDWORD(v203)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v148 = (llvm::MachineBasicBlock **)((char *)v202 + 16 * v203);
              *uint64_t v148 = v147;
              v148[1] = 0;
              unsigned int v149 = v203 + 1;
              LODWORD(v203) = v149;
              if (v149 >= HIDWORD(v203)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v150 = (char *)v202 + 16 * v149;
              *int v150 = *v145;
              v150[1] = 0;
              int v143 = 1;
            }
            unsigned int v57 = v203 + v143;
            LODWORD(v203) = v57;
          }
          while (v57);
LABEL_260:
          if (v202 != v204) {
            free(v202);
          }
        }
      }
      sub_1CC2BADC0((uint64_t)v24, *(void *)(v169 + 248));
      int v153 = *(unsigned __int8 *)(v169 + 657);
      if (*(unsigned char *)(v169 + 657))
      {
        int v154 = v158;
        if (!byte_1EBCCCE78)
        {
LABEL_268:
          int v157 = v153 | v154;
          BOOL v9 = v157 != 0;
          *(unsigned char *)(v169 + 657) = v157;
          goto LABEL_27;
        }
        sub_1CD509D24((uint64_t)v192, 0, 0, (uint64_t)&v170, *(void *)(v169 + 576), v159, 0);
        uint64_t v155 = *(void *)(v169 + 560);
        uint64_t v156 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 176))(*((void *)a2 + 2));
        sub_1CD509F30((uint64_t)v192, a2, v155, v156, 0, 0);
        sub_1CD50BA3C((uint64_t)v192);
        int v153 = *(unsigned __int8 *)(v169 + 657);
      }
      int v154 = v158;
      goto LABEL_268;
    }
  }
  return 0;
}

double sub_1CC2BAD98@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 8;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

void sub_1CC2BADC0(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 328)
  {
    uint64_t v5 = *(void **)(i - 144);
    if ((void *)(i - 128) != v5) {
      free(v5);
    }
    uint64_t v6 = *(void **)(i - 288);
    if ((void *)(i - 272) != v6) {
      free(v6);
    }
  }
  *(void *)(a1 + 8) = a2;
}

BOOL sub_1CC2BAE34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *(_DWORD *)(*a1 + 8);
  int v4 = *(_DWORD *)(*a1 + 12);
  if (v3 == 7) {
    int v4 = -(v4 + *(_DWORD *)(v2 + 16));
  }
  uint64_t v5 = *a2;
  unsigned int v6 = *(_DWORD *)(*a2 + 8);
  int v7 = *(_DWORD *)(*a2 + 12);
  if (v6 == 7) {
    int v7 = -(v7 + *(_DWORD *)(v5 + 16));
  }
  if (v4 > v7) {
    return 1;
  }
  if (v4 != v7) {
    return 0;
  }
  int v9 = *(unsigned __int8 *)(v2 + 20);
  int v10 = *(unsigned __int8 *)(v5 + 20);
  if (v9 & 1) == 0 && (v10) {
    return 1;
  }
  if ((v10 ^ v9)) {
    return 0;
  }
  if (v3 < v6) {
    return 1;
  }
  if (v3 == v6) {
    return *(_DWORD *)(*(void *)(*(void *)v2 + 16) + 24) < *(_DWORD *)(*(void *)(*(void *)v5 + 16) + 24);
  }
  return 0;
}

void sub_1CC2BAED0(uint64_t a1, __int16 *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  __int16 v5 = *a2;
  if ((*a2 & 0x81) == 0)
  {
    int v7 = *((_DWORD *)a2 + 48);
    *((void *)a2 + 1) = 0;
    *((_DWORD *)a2 + 1) = 0;
    *a2 = v5 & 0xFDFF;
    uint64_t v8 = *a3;
    uint64_t v9 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v12 = (llvm::TargetSchedModel *)(a1 + 272);
      while (1)
      {
        uint64_t v13 = *(unsigned __int16 **)(v8 + 16);
        int v14 = *v13;
        if ((v14 - 13) < 5) {
          goto LABEL_50;
        }
        unsigned int v15 = *(unsigned __int16 *)(v8 + 44);
        BOOL v21 = (v15 & 0xC) == 0;
        int v16 = (v15 >> 2) & 1;
        if (v21) {
          LOBYTE(v16) = 1;
        }
        uint64_t v17 = *((void *)v13 + 1);
        if (v16)
        {
          if ((v17 & 0x800000) != 0) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v25 = v8;
          if ((v17 & 0x800000) != 0) {
            goto LABEL_14;
          }
          while ((*(_WORD *)(v25 + 44) & 8) != 0)
          {
            uint64_t v25 = *(void *)(v25 + 8);
            if ((*(unsigned char *)(*(void *)(v25 + 16) + 10) & 0x80) != 0) {
              goto LABEL_14;
            }
          }
        }
        if ((v14 - 1) <= 1 && (*(unsigned char *)(*(void *)(v8 + 32) + 48) & 0x20) != 0) {
          goto LABEL_14;
        }
        if (v16) {
          break;
        }
        uint64_t v31 = v8;
        if ((v17 & 0x1000000000) != 0) {
          goto LABEL_14;
        }
        while ((*(_WORD *)(v31 + 44) & 8) != 0)
        {
          uint64_t v31 = *(void *)(v31 + 8);
          if ((*(unsigned char *)(*(void *)(v31 + 16) + 12) & 0x10) != 0) {
            goto LABEL_14;
          }
        }
LABEL_15:
        char v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 768))(*(void *)(a1 + 560), v8);
        __int16 v19 = *a2;
        if ((*a2 & 0x10) == 0) {
          goto LABEL_21;
        }
        unint64_t v20 = *(void *)(*(void *)(v8 + 16) + 8);
        BOOL v21 = (*(_WORD *)(v8 + 44) & 0xC) != 0 && (*(_WORD *)(v8 + 44) & 4) == 0;
        if (v21)
        {
          uint64_t v32 = v8;
          if ((v20 & 0x400) == 0)
          {
            while ((*(_WORD *)(v32 + 44) & 8) != 0)
            {
              uint64_t v32 = *(void *)(v32 + 8);
              if ((*(unsigned char *)(*(void *)(v32 + 16) + 9) & 4) != 0) {
                goto LABEL_67;
              }
            }
LABEL_21:
            char v22 = 0;
            goto LABEL_22;
          }
LABEL_67:
          if ((v20 & 0x100) != 0) {
            goto LABEL_21;
          }
          uint64_t v33 = v8;
          while ((*(_WORD *)(v33 + 44) & 8) != 0)
          {
            char v22 = 0;
            uint64_t v33 = *(void *)(v33 + 8);
            if (*(unsigned char *)(*(void *)(v33 + 16) + 9)) {
              goto LABEL_22;
            }
          }
          uint64_t v34 = v8;
          if ((v20 & 0x800) != 0)
          {
            LOBYTE(v30) = 1;
          }
          else
          {
            do
            {
              unsigned int v35 = *(unsigned __int16 *)(v34 + 44);
              LODWORD(v30) = (v35 >> 3) & 1;
              if ((v35 & 8) == 0) {
                break;
              }
              uint64_t v34 = *(void *)(v34 + 8);
            }
            while ((*(unsigned char *)(*(void *)(v34 + 16) + 9) & 8) == 0);
          }
        }
        else
        {
          if ((*(void *)(*(void *)(v8 + 16) + 8) & 0x500) != 0x400) {
            goto LABEL_21;
          }
          uint64_t v30 = (v20 >> 11) & 1;
        }
        char v22 = v30 ^ 1;
LABEL_22:
        if (a5)
        {
          uint64_t v23 = *(void *)(*(void *)(v8 + 16) + 8);
          if ((*(_WORD *)(v8 + 44) & 0xC) != 0 && (*(_WORD *)(v8 + 44) & 4) == 0)
          {
            uint64_t v26 = v8;
            if ((v23 & 0x400) != 0) {
              goto LABEL_77;
            }
            while ((*(_WORD *)(v26 + 44) & 8) != 0)
            {
              uint64_t v26 = *(void *)(v26 + 8);
              if ((*(unsigned char *)(*(void *)(v26 + 16) + 9) & 4) != 0) {
                goto LABEL_77;
              }
            }
          }
          else if ((v23 & 0x400) != 0)
          {
            goto LABEL_77;
          }
        }
        if ((v22 & 1) == 0)
        {
          if (v18)
          {
            if (!v7) {
              goto LABEL_77;
            }
          }
          else
          {
            ++*((_DWORD *)a2 + 1);
            int v27 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 968))(*(void *)(a1 + 560), v8);
            unsigned int v28 = llvm::TargetSchedModel::computeInstrLatency(v12, (const llvm::MachineInstr *)v8, 0);
            if (v28 >= 2) {
              *((_DWORD *)a2 + 2) = v28 + *((_DWORD *)a2 + 2) - 1;
            }
            *((_DWORD *)a2 + 3) += v27;
            __int16 v19 = *a2;
            if ((*a2 & 0x200) != 0)
            {
LABEL_77:
              *a2 = v19 | 0x80;
              return;
            }
          }
          __p = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          if ((*(unsigned int (**)(void, uint64_t, void **, uint64_t))(**(void **)(a1 + 560) + 824))(*(void *)(a1 + 560), v8, &__p, 1))
          {
            *a2 |= 0x200u;
          }
          int v29 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 832))(*(void *)(a1 + 560), v8);
          if ((v29 & 1) == 0) {
            *a2 |= 0x80u;
          }
          if (__p)
          {
            uint64_t v37 = __p;
            operator delete(__p);
          }
          if (!v29) {
            return;
          }
        }
LABEL_50:
        if ((*(unsigned char *)v8 & 4) == 0)
        {
          while ((*(_WORD *)(v8 + 44) & 8) != 0)
            uint64_t v8 = *(void *)(v8 + 8);
        }
        uint64_t v8 = *(void *)(v8 + 8);
        if (v8 == v9) {
          return;
        }
      }
      if ((v17 & 0x1000000000) == 0) {
        goto LABEL_15;
      }
LABEL_14:
      *a2 |= 0x100u;
      goto LABEL_15;
    }
  }
}

uint64_t sub_1CC2BB2B4(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = *(void *)(**(void **)(v6 + 32) + 112);
  if (v7 && *(char *)(v7 + 13) < 0)
  {
    uint64_t v43 = *(void *)(v6 + 32);
    uint64_t v44 = **(llvm::MachineBasicBlock ***)(a1 + 24);
    uint64_t v51 = *(void *)(v6 + 56);
    uint64_t v13 = *(void *)(v5 + 16);
    uint64_t v14 = *(void *)(v13 + 56);
    uint64_t v49 = v6 + 48;
    uint64_t v50 = v14;
    uint64_t v47 = 0;
    uint64_t v48 = v13 + 48;
    sub_1CC2BBCF4(v3, &v51, &v50, &v49, &v48, (_DWORD *)&v47 + 1, &v47, v6, v13, 1);
    uint64_t v15 = *(void *)(*(void *)(v4 + 16) + 56);
    uint64_t v16 = v51;
    if (v15 == v51)
    {
      unsigned int v17 = 0;
    }
    else
    {
      unsigned int v17 = 0;
      do
      {
        int v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 560) + 144))(*(void *)(v3 + 560), v15);
        if (!v15 || (*(unsigned char *)v15 & 4) == 0)
        {
          while ((*(_WORD *)(v15 + 44) & 8) != 0)
            uint64_t v15 = *(void *)(v15 + 8);
        }
        v17 += v18;
        uint64_t v15 = *(void *)(v15 + 8);
      }
      while (v15 != v16);
    }
    uint64_t v19 = *(void *)(*(void *)(v5 + 16) + 56);
    uint64_t v20 = v50;
    while (v19 != v20)
    {
      int v21 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 560) + 144))(*(void *)(v3 + 560), v19);
      if (!v19 || (*(unsigned char *)v19 & 4) == 0)
      {
        while ((*(_WORD *)(v19 + 44) & 8) != 0)
          uint64_t v19 = *(void *)(v19 + 8);
      }
      v17 += v21;
      uint64_t v19 = *(void *)(v19 + 8);
    }
    uint64_t v22 = v49;
    uint64_t v23 = *(void *)(v4 + 16) + 48;
    if (v49 != v23)
    {
      int v45 = 0;
      uint64_t v24 = v49;
      while (1)
      {
        uint64_t v25 = *(void *)(*(void *)(v24 + 16) + 8);
        if ((*(_WORD *)(v24 + 44) & 0xC) != 0 && (*(_WORD *)(v24 + 44) & 4) == 0)
        {
          uint64_t v27 = v24;
          if ((v25 & 0x400) == 0)
          {
            while ((*(_WORD *)(v27 + 44) & 8) != 0)
            {
              uint64_t v27 = *(void *)(v27 + 8);
              if ((*(unsigned char *)(*(void *)(v27 + 16) + 9) & 4) != 0) {
                goto LABEL_42;
              }
            }
            goto LABEL_33;
          }
        }
        else if ((v25 & 0x400) == 0)
        {
          goto LABEL_33;
        }
LABEL_42:
        if ((*(_WORD *)v4 & 0x10) != 0 && (a2 & 1) == 0)
        {
          v45 += (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 560) + 352))(*(void *)(v3 + 560), v24);
          goto LABEL_34;
        }
LABEL_33:
        v17 += (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 560) + 144))(*(void *)(v3 + 560), v24);
LABEL_34:
        if ((*(unsigned char *)v24 & 4) == 0)
        {
          while ((*(_WORD *)(v24 + 44) & 8) != 0)
            uint64_t v24 = *(void *)(v24 + 8);
        }
        uint64_t v24 = *(void *)(v24 + 8);
        if (v24 == v23) {
          goto LABEL_46;
        }
      }
    }
    int v45 = 0;
LABEL_46:
    uint64_t v28 = v48;
    uint64_t v29 = *(void *)(v5 + 16) + 48;
    if (v48 != v29)
    {
      uint64_t v30 = v48;
      do
      {
        uint64_t v31 = *(void *)(*(void *)(v30 + 16) + 8);
        if ((*(_WORD *)(v30 + 44) & 0xC) != 0 && (*(_WORD *)(v30 + 44) & 4) == 0)
        {
          uint64_t v33 = v30;
          if ((v31 & 0x400) == 0)
          {
            while ((*(_WORD *)(v33 + 44) & 8) != 0)
            {
              uint64_t v33 = *(void *)(v33 + 8);
              if ((*(unsigned char *)(*(void *)(v33 + 16) + 9) & 4) != 0) {
                goto LABEL_62;
              }
            }
            goto LABEL_53;
          }
        }
        else if ((v31 & 0x400) == 0)
        {
          goto LABEL_53;
        }
LABEL_62:
        if ((*(_WORD *)v5 & 0x10) != 0 && (a2 & 1) == 0)
        {
          v45 += (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 560) + 352))(*(void *)(v3 + 560), v30);
          goto LABEL_54;
        }
LABEL_53:
        v17 += (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 560) + 144))(*(void *)(v3 + 560), v30);
LABEL_54:
        if ((*(unsigned char *)v30 & 4) == 0)
        {
          while ((*(_WORD *)(v30 + 44) & 8) != 0)
            uint64_t v30 = *(void *)(v30 + 8);
        }
        uint64_t v30 = *(void *)(v30 + 8);
      }
      while (v30 != v29);
    }
    unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v44);
    if ((llvm::MachineBasicBlock *)((char *)v44 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
    {
      int v36 = v45;
LABEL_83:
      if (v16 == v22)
      {
        unsigned int v40 = 0;
      }
      else
      {
        unsigned int v40 = 0;
        do
        {
          if (**(unsigned __int16 **)(v16 + 16) - 18 < 0xFFFFFFFB) {
            ++v40;
          }
          if ((*(unsigned char *)v16 & 4) == 0)
          {
            while ((*(_WORD *)(v16 + 44) & 8) != 0)
              uint64_t v16 = *(void *)(v16 + 8);
          }
          uint64_t v16 = *(void *)(v16 + 8);
        }
        while (v16 != v22);
      }
      while (v20 != v28)
      {
        if (**(unsigned __int16 **)(v20 + 16) - 18 < 0xFFFFFFFB) {
          ++v40;
        }
        if ((*(unsigned char *)v20 & 4) == 0)
        {
          while ((*(_WORD *)(v20 + 44) & 8) != 0)
            uint64_t v20 = *(void *)(v20 + 8);
        }
        uint64_t v20 = *(void *)(v20 + 8);
      }
      if (v40 <= 0xF)
      {
        int v12 = v36 + (v17 >> 1) > (*(unsigned int (**)(void, uint64_t))(**(void **)(v3 + 560) + 344))(*(void *)(v3 + 560), v43);
        goto LABEL_102;
      }
      goto LABEL_101;
    }
    unint64_t v35 = FirstTerminator;
    int v36 = v45;
    while (1)
    {
      uint64_t v37 = *(void *)(*(void *)(v35 + 16) + 8);
      if ((*(_WORD *)(v35 + 44) & 0xC) != 0 && (*(_WORD *)(v35 + 44) & 4) == 0) {
        break;
      }
      if ((v37 & 0x400) != 0) {
        goto LABEL_72;
      }
LABEL_73:
      if ((*(unsigned char *)v35 & 4) == 0)
      {
        while ((*(_WORD *)(v35 + 44) & 8) != 0)
          unint64_t v35 = *(void *)(v35 + 8);
      }
      unint64_t v35 = *(void *)(v35 + 8);
      if ((llvm::MachineBasicBlock *)v35 == (llvm::MachineBasicBlock *)((char *)v44 + 48)) {
        goto LABEL_83;
      }
    }
    unint64_t v39 = v35;
    if ((v37 & 0x400) == 0)
    {
      while ((*(_WORD *)(v39 + 44) & 8) != 0)
      {
        unint64_t v39 = *(void *)(v39 + 8);
        if ((*(unsigned char *)(*(void *)(v39 + 16) + 9) & 4) != 0) {
          goto LABEL_72;
        }
      }
      goto LABEL_73;
    }
LABEL_72:
    v36 += (*(uint64_t (**)(void, unint64_t))(**(void **)(v3 + 560) + 352))(*(void *)(v3 + 560), v35);
    goto LABEL_73;
  }
  int v8 = **(_DWORD **)(a1 + 40) + **(_DWORD **)(a1 + 32);
  int v9 = *(_DWORD *)(v4 + 8) + *(_DWORD *)(v4 + 4);
  int v10 = *(_DWORD *)(v5 + 8) + *(_DWORD *)(v5 + 4);
  if (v9 == v8 || v10 == v8)
  {
LABEL_101:
    int v12 = 0;
    goto LABEL_102;
  }
  int v12 = (*(uint64_t (**)(void, void, void, void, void, void, void, void))(**(void **)(v3 + 560)
                                                                                                  + 328))(*(void *)(v3 + 560), *(void *)(v4 + 16), (v9 - v8), *(unsigned int *)(v4 + 12), *(void *)(v5 + 16), (v10 - v8), *(unsigned int *)(v5 + 12), **(unsigned int **)(a1 + 48));
LABEL_102:
  int v41 = sub_1CC2BBA14(v3, *(__int16 **)(a1 + 56), *(void *)(a1 + 64) + 40, 0, 0, 1);
  return v12 & sub_1CC2BBA14(v3, *(__int16 **)(a1 + 72), *(void *)(a1 + 80), 0, 0, 1) & v41;
}

uint64_t sub_1CC2BB8E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  *a5 = 0;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6 == *(void *)(a3 + 16) || (*(_WORD *)a2 & 3) != 0) {
    return 0;
  }
  if (((*(void *)(v6 + 72) - *(void *)(v6 + 64)) & 0x7FFFFFFF0) == 0) {
    goto LABEL_17;
  }
  if ((*(_WORD *)a2 & 0x100) != 0) {
    return 0;
  }
  int v11 = *(_DWORD *)(a2 + 4);
  if ((*(_WORD *)a2 & 0x10) != 0)
  {
    uint64_t v12 = *(void *)(a2 + 24);
    if (!v12 || *(_DWORD *)(a2 + 48))
    {
      if (!a4) {
        uint64_t v12 = *(void *)(a2 + 32);
      }
      if (v12) {
        ++v11;
      }
    }
    else
    {
      --v11;
    }
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 560) + 336))(*(void *)(a1 + 560));
  if (result)
  {
    *a5 = v11;
LABEL_17:
    uint64_t v13 = *(void *)(a2 + 32);
    if (!a4) {
      uint64_t v13 = *(void *)(a2 + 24);
    }
    if (!v13 && (*(_WORD *)a2 & 0x10) != 0 && !*(void *)(a2 + 24))
    {
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(v15 + 8);
      if (v13 == *(void *)(v15 + 32) + 320) {
        return 0;
      }
    }
    return v13 && v13 == *(void *)(a3 + 16);
  }
  return result;
}

uint64_t sub_1CC2BBA14(uint64_t a1, __int16 *a2, uint64_t a3, int a4, int a5, int a6)
{
  v25[16] = *MEMORY[0x1E4F143B8];
  __int16 v6 = *a2;
  if (*a2) {
    return 0;
  }
  char v7 = a6;
  if ((v6 & 0x80) != 0 && !a6) {
    return 0;
  }
  int v13 = *((_DWORD *)a2 + 48);
  if ((v6 & 0x10) == 0)
  {
    if (v13) {
      return 0;
    }
  }
  if (!v13
    || (uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 560) + 816))(*(void *)(a1 + 560), *(void *)a3, *(unsigned int *)(a3 + 8), *((void *)a2 + 23)), result))
  {
    if ((v7 & 1) != 0 || !*((_DWORD *)a2 + 12)) {
      return 1;
    }
    if (a4)
    {
      uint64_t v15 = *(unsigned char **)a3;
      uint64_t v16 = (unsigned char *)(*(void *)a3 + 32 * *(unsigned int *)(a3 + 8));
      uint64_t v23 = v25;
      uint64_t v24 = 0x400000000;
      sub_1CB84AE28((unsigned int *)&v23, v15, v16);
      unsigned int v17 = (unsigned char *)*((void *)a2 + 5);
      int v18 = &v17[32 * *((unsigned int *)a2 + 12)];
      uint64_t v20 = v22;
      uint64_t v21 = 0x400000000;
      sub_1CB84AE28((unsigned int *)&v20, v17, v18);
      if (a5)
      {
        if ((*(uint64_t (**)(void, void **))(**(void **)(a1 + 560) + 728))(*(void *)(a1 + 560), &v20))goto LABEL_16; {
      }
        }
      if ((*(uint64_t (**)(void, void **))(**(void **)(a1 + 560) + 728))(*(void *)(a1 + 560), &v23)) {
LABEL_16:
      }
        int v19 = 0;
      else {
        int v19 = (*(uint64_t (**)(void, void *, void, void *, void))(**(void **)(a1 + 560) + 816))(*(void *)(a1 + 560), v20, v21, v23, v24);
      }
      if (v20 != v22) {
        free(v20);
      }
      if (v23 != v25) {
        free(v23);
      }
      if (v19) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CC2BBC4C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = 0;
  *a3 = 0;
  if ((*(_WORD *)a2 & 0x13) == 0)
  {
    if (((*(void *)(*(void *)(a2 + 16) + 72) - *(void *)(*(void *)(a2 + 16) + 64)) & 0x7FFFFFFF0) != 0)
    {
      if ((*(_WORD *)a2 & 0x100) != 0
        || !(*(unsigned int (**)(void))(**(void **)(a1 + 560) + 336))(*(void *)(a1 + 560)))
      {
        return 0;
      }
      *a3 = *(_DWORD *)(a2 + 4);
    }
    return 1;
  }
  return v3;
}

uint64_t sub_1CC2BBCF4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, char a10)
{
  while (1)
  {
    uint64_t v18 = *a2;
    int v19 = (void *)*a4;
    BOOL v20 = *a2 == *a4;
    if (*a2 == *a4) {
      return v20;
    }
    if (*a3 == *a5) {
      goto LABEL_46;
    }
    while (**(unsigned __int16 **)(v18 + 16) - 13 <= 4)
    {
      if ((*(unsigned char *)v18 & 4) == 0)
      {
        while ((*(_WORD *)(v18 + 44) & 8) != 0)
          uint64_t v18 = *(void *)(v18 + 8);
      }
      uint64_t v18 = *(void *)(v18 + 8);
      if ((void *)v18 == v19)
      {
        uint64_t v18 = *a4;
        break;
      }
    }
    *a2 = v18;
    uint64_t v21 = *a3;
    if (*a3 != *a5)
    {
      while (**(unsigned __int16 **)(v21 + 16) - 13 <= 4)
      {
        if ((*(unsigned char *)v21 & 4) == 0)
        {
          while ((*(_WORD *)(v21 + 44) & 8) != 0)
            uint64_t v21 = *(void *)(v21 + 8);
        }
        uint64_t v21 = *(void *)(v21 + 8);
        if (v21 == *a5)
        {
          uint64_t v21 = *a5;
          break;
        }
      }
    }
    *a3 = v21;
    uint64_t v18 = *a2;
    int v19 = (void *)*a4;
    if (*a2 == *a4 || v21 == *a5) {
      goto LABEL_46;
    }
    BOOL isIdenticalTo = llvm::MachineInstr::isIdenticalTo(*a2, v21, 0);
    uint64_t v18 = *a2;
    if (!isIdenticalTo) {
      break;
    }
    __p = 0;
    int v41 = 0;
    uint64_t v42 = 0;
    char v24 = (*(uint64_t (**)(void, uint64_t, void **, void))(**(void **)(a1 + 560) + 824))(*(void *)(a1 + 560), v18, &__p, 0);
    if ((v24 & 1) == 0)
    {
      uint64_t v25 = *a2;
      uint64_t v26 = *(void *)(*(void *)(*a2 + 16) + 8);
      if ((*(_WORD *)(*a2 + 44) & 0xC) != 0 && (*(_WORD *)(*a2 + 44) & 4) == 0)
      {
        uint64_t v29 = *a2;
        if ((v26 & 0x400) == 0)
        {
          while ((*(_WORD *)(v29 + 44) & 8) != 0)
          {
            uint64_t v29 = *(void *)(v29 + 8);
            if ((*(unsigned char *)(*(void *)(v29 + 16) + 9) & 4) != 0) {
              goto LABEL_28;
            }
          }
LABEL_27:
          ++*a6;
          uint64_t v25 = *a2;
        }
      }
      else if ((v26 & 0x400) == 0)
      {
        goto LABEL_27;
      }
LABEL_28:
      if ((*(unsigned char *)v25 & 4) == 0)
      {
        while ((*(_WORD *)(v25 + 44) & 8) != 0)
          uint64_t v25 = *(void *)(v25 + 8);
      }
      *a2 = *(void *)(v25 + 8);
      uint64_t v28 = *a3;
      if (!*a3 || (*(unsigned char *)v28 & 4) == 0)
      {
        while ((*(_WORD *)(v28 + 44) & 8) != 0)
          uint64_t v28 = *(void *)(v28 + 8);
      }
      *a3 = *(void *)(v28 + 8);
    }
    if (__p)
    {
      int v41 = __p;
      operator delete(__p);
    }
    if (v24) {
      return v20;
    }
  }
  int v19 = (void *)*a4;
LABEL_46:
  if ((void *)v18 == v19) {
    return 1;
  }
  uint64_t v30 = (void *)*a3;
  if (*a3 == *a5) {
    return 1;
  }
  unint64_t v31 = *v19 & 0xFFFFFFFFFFFFFFF8;
  if (!v31 || (*(unsigned char *)v31 & 4) == 0)
  {
    while ((*(_WORD *)(v31 + 44) & 4) != 0)
      unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v32 = *(void *)*a5 & 0xFFFFFFFFFFFFFFF8;
  if (!v32 || (*(unsigned char *)v32 & 4) == 0)
  {
    while ((*(_WORD *)(v32 + 44) & 4) != 0)
      unint64_t v32 = *(void *)v32 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v33 = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
  if (!v33 || (*(unsigned char *)v33 & 4) == 0)
  {
    while ((*(_WORD *)(v33 + 44) & 4) != 0)
      unint64_t v33 = *(void *)v33 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v34 = *v30 & 0xFFFFFFFFFFFFFFF8;
  if (!v34 || (*(unsigned char *)v34 & 4) == 0)
  {
    while ((*(_WORD *)(v34 + 44) & 4) != 0)
      unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
  }
  if (*(void *)(a8 + 88) != *(void *)(a8 + 96))
  {
    if (!a10) {
      goto LABEL_91;
    }
    goto LABEL_73;
  }
  if (*(void *)(a9 + 88) == *(void *)(a9 + 96) || (a10 & 1) == 0)
  {
    while (1)
    {
LABEL_91:
      if (v31 == v33 || v32 == v34) {
        goto LABEL_134;
      }
      while (**(unsigned __int16 **)(v31 + 16) - 13 <= 4)
      {
        unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
        if (!v31 || (*(unsigned char *)v31 & 4) == 0)
        {
          while ((*(_WORD *)(v31 + 44) & 4) != 0)
            unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
        }
        if (v31 == v33)
        {
          unint64_t v31 = v33;
          break;
        }
      }
      unint64_t v35 = (void *)v34;
      if (v32 != v34)
      {
        while (**(unsigned __int16 **)(v32 + 16) - 13 <= 4)
        {
          unint64_t v32 = *(void *)v32 & 0xFFFFFFFFFFFFFFF8;
          if (!v32 || (*(unsigned char *)v32 & 4) == 0)
          {
            while ((*(_WORD *)(v32 + 44) & 4) != 0)
              unint64_t v32 = *(void *)v32 & 0xFFFFFFFFFFFFFFF8;
          }
          if (v32 == v34)
          {
            unint64_t v35 = (void *)v34;
            goto LABEL_111;
          }
        }
        unint64_t v35 = (void *)v32;
      }
LABEL_111:
      if (v33 == v31 || (void *)v34 == v35 || !llvm::MachineInstr::isIdenticalTo(v31, (uint64_t)v35, 0))
      {
        unint64_t v32 = (unint64_t)v35;
        goto LABEL_134;
      }
      __int16 v36 = *(_WORD *)(v31 + 44);
      uint64_t v37 = *(void *)(*(void *)(v31 + 16) + 8);
      if ((v36 & 0xC) == 0 || (v36 & 4) != 0)
      {
        if ((v37 & 0x400) == 0) {
          goto LABEL_121;
        }
      }
      else
      {
        unint64_t v38 = v31;
        if ((v37 & 0x400) == 0)
        {
          while ((*(_WORD *)(v38 + 44) & 8) != 0)
          {
            unint64_t v38 = *(void *)(v38 + 8);
            if ((*(unsigned char *)(*(void *)(v38 + 16) + 9) & 4) != 0) {
              goto LABEL_122;
            }
          }
LABEL_121:
          ++*a7;
        }
      }
LABEL_122:
      unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v31 || (*(unsigned char *)v31 & 4) == 0)
      {
        while ((*(_WORD *)(v31 + 44) & 4) != 0)
          unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v32 = *v35 & 0xFFFFFFFFFFFFFFF8;
      if (!v32 || (*(unsigned char *)v32 & 4) == 0)
      {
        while ((*(_WORD *)(v32 + 44) & 4) != 0)
          unint64_t v32 = *(void *)v32 & 0xFFFFFFFFFFFFFFF8;
      }
    }
  }
LABEL_73:
  if (v31 != v33)
  {
    while (sub_1CD50C018(v31, 1))
    {
      unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v31 || (*(unsigned char *)v31 & 4) == 0)
      {
        while ((*(_WORD *)(v31 + 44) & 4) != 0)
          unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v31 == v33)
      {
        unint64_t v31 = v33;
        break;
      }
    }
  }
  if (v32 == v34) {
    goto LABEL_91;
  }
  do
  {
    if (!sub_1CD50C018(v32, 1)) {
      goto LABEL_91;
    }
    unint64_t v32 = *(void *)v32 & 0xFFFFFFFFFFFFFFF8;
    if (!v32 || (*(unsigned char *)v32 & 4) == 0)
    {
      while ((*(_WORD *)(v32 + 44) & 4) != 0)
        unint64_t v32 = *(void *)v32 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (v32 != v34);
  unint64_t v32 = v34;
LABEL_134:
  if (!v31 || (*(unsigned char *)v31 & 4) == 0)
  {
    while ((*(_WORD *)(v31 + 44) & 8) != 0)
      unint64_t v31 = *(void *)(v31 + 8);
  }
  *a4 = *(void *)(v31 + 8);
  if (!v32 || (*(unsigned char *)v32 & 4) == 0)
  {
    while ((*(_WORD *)(v32 + 44) & 8) != 0)
      unint64_t v32 = *(void *)(v32 + 8);
  }
  *a5 = *(void *)(v32 + 8);
  return 1;
}

BOOL sub_1CC2BC2A4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, __int16 *a6, __int16 *a7)
{
  *a7 &= ~0x80u;
  *a6 &= ~0x80u;
  sub_1CC2BAED0(a1, a6, a2, a4, 1);
  if ((*a6 & 0x80) != 0) {
    return 0;
  }
  sub_1CC2BAED0(a1, a7, a3, a5, 1);
  return (*a7 & 0x80) == 0 && ((unsigned __int16)*a7 & (unsigned __int16)*a6 & 0x200) == 0;
}

uint64_t sub_1CC2BC34C(uint64_t a1, uint64_t a2)
{
  int v10 = 0;
  int v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 728))(*(void *)(a1 + 560), a2 + 40);
  if ((v4 & 1) == 0)
  {
    (*(void (**)(void, void, void))(**(void **)(a1 + 560) + 264))(*(void *)(a1 + 560), *(void *)(a2 + 16), 0);
    (*(void (**)(void))(**(void **)(a1 + 560) + 272))();
    *(int8x16_t *)(a2 + 24) = vextq_s8(*(int8x16_t *)(a2 + 24), *(int8x16_t *)(a2 + 24), 8uLL);
    if (v10)
    {
      int v5 = *v10;
      if ((v5 - 4) > 0x1E)
      {
        if ((v5 - 3) >= 0xFFFFFFFE) {
          char v7 = v10;
        }
        else {
          char v7 = 0;
        }
        if ((v5 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v8 = (unint64_t)(v7 + 8);
LABEL_12:
          int v11 = &v10;
          sub_1CC5FA668(v8 + 16, &v11);
          return v4 ^ 1u;
        }
        if (v5 == 3) {
          *((void *)v10 + 1) = 0;
        }
      }
      else if ((v10[1] & 0x7F) == 2 || *((_DWORD *)v10 + 3))
      {
        uint64_t v9 = *((void *)v10 + 2);
        if ((v9 & 4) != 0)
        {
          unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFF8;
          if (v8) {
            goto LABEL_12;
          }
        }
      }
    }
  }
  return v4 ^ 1u;
}

uint64_t *sub_1CC2BC4D8(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    unint64_t v8 = result;
    if (a4 == 2)
    {
      uint64_t v9 = a2 - 1;
      uint64_t result = (uint64_t *)(*a3)(a2 - 1, result);
      if (result)
      {
        uint64_t v10 = *v8;
        *unint64_t v8 = *v9;
        *uint64_t v9 = v10;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (result != a2)
      {
        unsigned int v17 = result + 1;
        if (result + 1 != a2)
        {
          uint64_t v18 = 0;
          int v19 = result;
          do
          {
            BOOL v20 = v19;
            int v19 = v17;
            uint64_t result = (uint64_t *)(*a3)(v17, v20);
            if (result)
            {
              uint64_t v21 = 0;
              uint64_t v22 = (uint64_t *)*v19;
              *int v19 = 0;
              unsigned int v40 = v22;
              for (uint64_t i = v18; ; i -= 8)
              {
                char v24 = (uint64_t *)((char *)v8 + i);
                uint64_t v25 = *(uint64_t *)((char *)v8 + i);
                *char v24 = 0;
                v24[1] = v25;
                if (v21) {
                  MEMORY[0x1D25D9CE0](v21, 0x1020C400ADEC36ALL);
                }
                if (!i) {
                  break;
                }
                uint64_t v26 = (uint64_t *)((char *)v8 + i);
                if (((*a3)((uint64_t *)&v40, (uint64_t *)((char *)v8 + i - 8)) & 1) == 0) {
                  goto LABEL_22;
                }
                uint64_t v21 = *v24;
              }
              uint64_t v26 = v8;
LABEL_22:
              uint64_t v27 = v40;
              unsigned int v40 = 0;
              uint64_t v28 = *v26;
              *uint64_t v26 = (uint64_t)v27;
              if (v28) {
                MEMORY[0x1D25D9CE0](v28, 0x1020C400ADEC36ALL);
              }
              uint64_t result = v40;
              unsigned int v40 = 0;
              if (result) {
                uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
              }
            }
            unsigned int v17 = v19 + 1;
            v18 += 8;
          }
          while (v19 + 1 != a2);
        }
      }
    }
    else
    {
      int v13 = (char *)a5;
      unint64_t v14 = a4 >> 1;
      uint64_t v15 = &result[a4 >> 1];
      unint64_t v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1CC2BC878(result, v15, a3, v16, a5);
        uint64_t v29 = (uint64_t *)&v13[8 * v14];
        uint64_t result = sub_1CC2BC878(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v29);
        uint64_t v30 = &v13[8 * a4];
        unint64_t v31 = v29;
        unint64_t v32 = (uint64_t *)v13;
        while (v31 != (uint64_t *)v30)
        {
          if ((*a3)(v31, v32))
          {
            uint64_t v33 = *v31;
            *unint64_t v31 = 0;
            uint64_t result = (uint64_t *)*v8;
            *unint64_t v8 = v33;
            if (result) {
              uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
            }
            ++v31;
          }
          else
          {
            uint64_t v34 = *v32;
            *unint64_t v32 = 0;
            uint64_t result = (uint64_t *)*v8;
            *unint64_t v8 = v34;
            if (result) {
              uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
            }
            ++v32;
          }
          ++v8;
          if (v32 == v29)
          {
            if (v31 != (uint64_t *)v30)
            {
              uint64_t v35 = 0;
              do
              {
                uint64_t v36 = v31[v35];
                v31[v35] = 0;
                uint64_t result = (uint64_t *)v8[v35];
                v8[v35] = v36;
                if (result) {
                  uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
                }
                ++v35;
              }
              while (&v31[v35] != (uint64_t *)v30);
            }
            goto LABEL_49;
          }
        }
        if (v32 != v29)
        {
          uint64_t v37 = 0;
          do
          {
            uint64_t v38 = v32[v37];
            v32[v37] = 0;
            uint64_t result = (uint64_t *)v8[v37];
            v8[v37] = v38;
            if (result) {
              uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
            }
            ++v37;
          }
          while (&v32[v37] != v29);
        }
LABEL_49:
        if (v13)
        {
          unint64_t v39 = a4;
          do
          {
            uint64_t result = *(uint64_t **)v13;
            *(void *)int v13 = 0;
            if (result) {
              uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
            }
            v13 += 8;
            --v39;
          }
          while (v39);
        }
      }
      else
      {
        sub_1CC2BC4D8(result, v15, a3, v16, a5, a6);
        sub_1CC2BC4D8(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v13, a6);
        return (uint64_t *)sub_1CC2BCAEC((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, (unsigned int (**)(char *, uint64_t))a3, a4 >> 1, a4 - (a4 >> 1), v13, a6);
      }
    }
  }
  return result;
}

uint64_t *sub_1CC2BC878(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    int v5 = a5;
    char v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      uint64_t v13 = *v7;
      *char v7 = 0;
      uint64_t *v5 = v13;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = a2 - 1;
      uint64_t result = (uint64_t *)(*a3)(a2 - 1, result);
      if (result) {
        int v11 = v10;
      }
      else {
        int v11 = v7;
      }
      uint64_t v12 = *v11;
      uint64_t *v11 = 0;
      *v5++ = v12;
      if (!result) {
        char v7 = v10;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v27 = &result[a4 >> 1];
      sub_1CC2BC4D8(result, v27, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (uint64_t *)sub_1CC2BC4D8(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      uint64_t v28 = &v7[a4 >> 1];
      while (v28 != a2)
      {
        uint64_t result = (uint64_t *)(*a3)(v28, v7);
        if (result)
        {
          uint64_t v29 = *v28;
          *v28++ = 0;
        }
        else
        {
          uint64_t v29 = *v7;
          *v7++ = 0;
        }
        *v5++ = v29;
        if (v7 == v27)
        {
          if (v28 != a2)
          {
            uint64_t v30 = 0;
            do
            {
              uint64_t v31 = v28[v30];
              v28[v30] = 0;
              v5[v30++] = v31;
            }
            while (&v28[v30] != a2);
          }
          return result;
        }
      }
      if (v7 != v27)
      {
        uint64_t v32 = 0;
        do
        {
          uint64_t v33 = v7[v32];
          v7[v32] = 0;
          v5[v32++] = v33;
        }
        while (&v7[v32] != v27);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *result;
      *uint64_t result = 0;
      uint64_t v15 = result + 1;
      *a5 = v14;
      if (result + 1 != a2)
      {
        uint64_t v16 = 0;
        unsigned int v17 = a5;
        do
        {
          uint64_t v18 = v17++;
          uint64_t result = (uint64_t *)(*a3)(v15, v18);
          if (result)
          {
            uint64_t v19 = *v18;
            uint64_t *v18 = 0;
            v18[1] = v19;
            BOOL v20 = (uint64_t **)v5;
            if (v18 != v5)
            {
              uint64_t v21 = v16;
              while (1)
              {
                BOOL v20 = (uint64_t **)((char *)v5 + v21);
                uint64_t v22 = (uint64_t *)((char *)v5 + v21 - 8);
                if (!(*a3)(v15, v22)) {
                  break;
                }
                uint64_t v23 = *v22;
                uint64_t *v22 = 0;
                uint64_t v24 = *(uint64_t *)((char *)v5 + v21);
                *(uint64_t *)((char *)v5 + v21) = v23;
                if (v24) {
                  MEMORY[0x1D25D9CE0](v24, 0x1020C400ADEC36ALL);
                }
                v21 -= 8;
                if (!v21)
                {
                  BOOL v20 = (uint64_t **)v5;
                  break;
                }
              }
            }
            uint64_t v25 = (uint64_t *)*v15;
            uint64_t *v15 = 0;
            uint64_t result = *v20;
            uint64_t *v20 = v25;
            if (result) {
              uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
            }
          }
          else
          {
            uint64_t v26 = (void *)*v15;
            uint64_t *v15 = 0;
            *unsigned int v17 = (uint64_t)v26;
          }
          ++v15;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CC2BCAEC(uint64_t result, char *a2, char *a3, unsigned int (**a4)(char *, uint64_t), int64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v68 = a6;
  if (!a6) {
    return result;
  }
  uint64_t v14 = (char *)result;
  while (a5 > a8 && v68 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v15 = 0;
    uint64_t v16 = -a5;
    while (1)
    {
      unsigned int v17 = &v14[v15];
      uint64_t result = ((uint64_t (*)(char *, char *))*a4)(a2, &v14[v15]);
      if (result) {
        break;
      }
      v15 += 8;
      if (__CFADD__(v16++, 1)) {
        return result;
      }
    }
    uint64_t v19 = -v16;
    uint64_t v20 = v68;
    uint64_t v66 = a3;
    uint64_t v67 = a7;
    uint64_t v70 = a4;
    uint64_t v64 = v14;
    uint64_t v65 = a8;
    if (-v16 >= v68)
    {
      if (v16 == -1)
      {
        uint64_t v59 = *(void *)&v14[v15];
        *(void *)&v14[v15] = *(void *)a2;
        *(void *)a2 = v59;
        return result;
      }
      if (v16 > 0) {
        uint64_t v19 = 1 - v16;
      }
      unint64_t v24 = v19 >> 1;
      uint64_t v26 = a3;
      uint64_t v25 = &v14[8 * (v19 >> 1) + v15];
      unint64_t v22 = (v26 - a2) >> 3;
      if (v26 == a2)
      {
        uint64_t v23 = v26;
        goto LABEL_37;
      }
      char v69 = *a4;
      uint64_t v23 = a2;
      do
      {
        uint64_t v27 = &v23[8 * (v22 >> 1)];
        unsigned int v28 = v69(v27, (uint64_t)v25);
        if (v28) {
          v22 += ~(v22 >> 1);
        }
        else {
          v22 >>= 1;
        }
        if (v28) {
          uint64_t v23 = v27 + 8;
        }
      }
      while (v22);
      unint64_t v22 = (v23 - a2) >> 3;
    }
    else
    {
      if (v68 >= 0) {
        uint64_t v21 = v68;
      }
      else {
        uint64_t v21 = v68 + 1;
      }
      unint64_t v22 = v21 >> 1;
      uint64_t v23 = &a2[8 * (v21 >> 1)];
      unint64_t v24 = (a2 - v14 - v15) >> 3;
      if (v17 == a2)
      {
        uint64_t v25 = a2;
        goto LABEL_37;
      }
      uint64_t v25 = &v14[v15];
      do
      {
        if ((*v70)(v23, (uint64_t)&v25[8 * (v24 >> 1)]))
        {
          v24 >>= 1;
        }
        else
        {
          v25 += 8 * (v24 >> 1) + 8;
          v24 += ~(v24 >> 1);
        }
      }
      while (v24);
      unint64_t v24 = (v25 - v14 - v15) >> 3;
    }
    uint64_t v20 = v68;
LABEL_37:
    uint64_t v29 = v23;
    if (v25 != a2)
    {
      uint64_t v29 = v25;
      if (a2 != v23)
      {
        uint64_t v30 = *(void *)v25;
        *(void *)uint64_t v25 = *(void *)a2;
        uint64_t v29 = v25 + 8;
        uint64_t v31 = a2;
        while (1)
        {
          *(void *)uint64_t v31 = v30;
          v31 += 8;
          if (v31 == v23) {
            break;
          }
          if (v29 == a2) {
            a2 = v31;
          }
          uint64_t v30 = *(void *)v29;
          *(void *)uint64_t v29 = *(void *)v31;
          v29 += 8;
        }
        if (v29 != a2)
        {
          uint64_t v32 = v29;
          uint64_t v33 = a2;
          while (1)
          {
            uint64_t v34 = v32;
            while (1)
            {
              uint64_t v35 = *(void *)v32;
              *(void *)uint64_t v34 = *(void *)v33;
              v34 += 8;
              *(void *)uint64_t v33 = v35;
              v33 += 8;
              if (v33 != v23) {
                break;
              }
              uint64_t v32 = v34;
              uint64_t v33 = a2;
              if (v34 == a2) {
                goto LABEL_53;
              }
            }
            if (v34 == a2) {
              a2 = v33;
            }
            v32 += 8;
          }
        }
      }
    }
LABEL_53:
    a5 = -(uint64_t)(v24 + v16);
    if ((uint64_t)(v24 + v22) >= (uint64_t)(v20 - (v24 + v22) - v16))
    {
      uint64_t result = sub_1CC2BCAEC(v29, v23, v66, v70, a5, v20 - v22, v67, v65);
      uint64_t v23 = v25;
      unint64_t v40 = v22;
      a7 = v67;
      a5 = v24;
      a8 = v65;
      a3 = v29;
    }
    else
    {
      uint64_t v36 = v25;
      unint64_t v37 = v24;
      unint64_t v38 = v20 - v22;
      unint64_t v39 = v22;
      a7 = v67;
      a8 = v65;
      uint64_t result = sub_1CC2BCAEC(&v64[v15], v36, v29, v70, v37, v39, v67, v65);
      unint64_t v40 = v38;
      unsigned int v17 = v29;
      a3 = v66;
    }
    uint64_t v68 = v40;
    uint64_t v14 = v17;
    a2 = v23;
    a4 = v70;
    if (!v40) {
      return result;
    }
  }
  if (a5 <= v68)
  {
    if (v14 == a2) {
      return result;
    }
    uint64_t v51 = 0;
    uint64_t v42 = 0;
    do
    {
      uint64_t v52 = *(void *)&v14[v51];
      *(void *)&v14[v51] = 0;
      *(void *)&a7[v51] = v52;
      ++v42;
      v51 += 8;
    }
    while (&v14[v51] != a2);
    if (v51)
    {
      long long v53 = a3;
      long long v54 = (uint64_t *)&a7[v51];
      uint64_t v55 = (uint64_t)&a7[v51 - 8];
      long long v56 = (uint64_t *)a7;
      while (a2 != v53)
      {
        if ((*a4)(a2, (uint64_t)v56))
        {
          uint64_t v57 = *(void *)a2;
          *(void *)a2 = 0;
          uint64_t result = *(void *)v14;
          *(void *)uint64_t v14 = v57;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
          }
          a2 += 8;
        }
        else
        {
          uint64_t v58 = *v56;
          *long long v56 = 0;
          uint64_t result = *(void *)v14;
          *(void *)uint64_t v14 = v58;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
          }
          ++v56;
        }
        v14 += 8;
        if (v54 == v56) {
          goto LABEL_99;
        }
      }
      if (v54 != v56)
      {
        uint64_t v62 = 0;
        do
        {
          uint64_t v63 = v56[v62];
          v56[v62] = 0;
          uint64_t result = *(void *)&v14[v62 * 8];
          *(void *)&v14[v62 * 8] = v63;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
          }
          ++v62;
        }
        while ((uint64_t *)v55 != &v56[v62 - 1]);
      }
    }
  }
  else
  {
    if (a2 == a3) {
      return result;
    }
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    do
    {
      uint64_t v43 = *(void *)&a2[v41];
      *(void *)&a2[v41] = 0;
      *(void *)&a7[v41] = v43;
      ++v42;
      v41 += 8;
    }
    while (&a2[v41] != a3);
    if (v41)
    {
      uint64_t v44 = &a7[v41];
      int v45 = (uint64_t *)(a3 - 8);
      while (a2 != v14)
      {
        int v46 = v14;
        uint64_t v47 = (uint64_t *)(a2 - 8);
        uint64_t v48 = (uint64_t *)(v44 - 8);
        if ((*a4)(v44 - 8, (uint64_t)(a2 - 8)))
        {
          uint64_t v49 = *v47;
          *uint64_t v47 = 0;
          uint64_t result = *v45;
          uint64_t *v45 = v49;
          a2 -= 8;
        }
        else
        {
          uint64_t v50 = *v48;
          *uint64_t v48 = 0;
          uint64_t result = *v45;
          uint64_t *v45 = v50;
          v44 -= 8;
        }
        uint64_t v14 = v46;
        if (result) {
          uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
        }
        --v45;
        if (v44 == a7) {
          goto LABEL_99;
        }
      }
      if (v44 != a7)
      {
        uint64_t v60 = 0;
        do
        {
          uint64_t v61 = *(void *)&v44[v60 * 8 - 8];
          *(void *)&v44[v60 * 8 - 8] = 0;
          uint64_t result = v45[v60];
          v45[v60] = v61;
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
          }
          --v60;
        }
        while (&v44[v60 * 8] != a7);
      }
    }
  }
LABEL_99:
  if (a7)
  {
    do
    {
      uint64_t result = *(void *)a7;
      *(void *)a7 = 0;
      if (result) {
        uint64_t result = MEMORY[0x1D25D9CE0](result, 0x1020C400ADEC36ALL);
      }
      a7 += 8;
      --v42;
    }
    while (v42);
  }
  return result;
}

unsigned int *sub_1CC2BD07C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char **a4, int a5)
{
  char v7 = *(void **)(a3 + 16);
  unint64_t v8 = v7 + 6;
  uint64_t v47 = v7;
  uint64_t v9 = v7[7];
  if ((void *)v9 != v7 + 6)
  {
    int v11 = *(llvm::MachineFunction **)(*(void *)(a2 + 16) + 32);
    uint64_t v12 = (llvm::TargetSchedModel *)(a1 + 272);
    uint64_t v13 = (uint64_t *)(a1 + 592);
    do
    {
      if (a5)
      {
        uint64_t v14 = *(void *)(*(void *)(v9 + 16) + 8);
        if ((*(_WORD *)(v9 + 44) & 0xC) != 0 && (*(_WORD *)(v9 + 44) & 4) == 0)
        {
          uint64_t v26 = v9;
          if ((v14 & 0x400) != 0) {
            goto LABEL_66;
          }
          while ((*(_WORD *)(v26 + 44) & 8) != 0)
          {
            uint64_t v26 = *(void *)(v26 + 8);
            if ((*(unsigned char *)(*(void *)(v26 + 16) + 9) & 4) != 0) {
              goto LABEL_66;
            }
          }
        }
        else if ((v14 & 0x400) != 0)
        {
          goto LABEL_66;
        }
      }
      unint64_t v16 = llvm::MachineFunction::CloneMachineInstr(v11, (const llvm::MachineInstr *)v9);
      unsigned int v17 = *(unsigned __int16 **)(v9 + 16);
      if ((v17[4] & 0x80) != 0)
      {
        unsigned int v34 = *v17;
        BOOL v35 = v34 > 0x1F;
        unsigned int v36 = (1 << v34) & 0x8E000000;
        if (v35 || v36 == 0) {
          llvm::MachineFunction::copyCallSiteInfo(v11, (const llvm::MachineInstr *)v9, (const llvm::MachineInstr *)v16);
        }
      }
      uint64_t v18 = *(void *)(a2 + 16);
      uint64_t v19 = *(void *)(v18 + 40);
      *(void *)(v16 + 24) = v19;
      uint64_t v20 = *(void *)(v19 + 32);
      uint64_t v21 = *(unsigned int *)(v16 + 40);
      if (v21)
      {
        uint64_t v27 = *(void *)(v16 + 32);
        uint64_t v28 = *(void *)(v20 + 40);
        uint64_t v29 = 32 * v21;
        do
        {
          if (!*(unsigned char *)v27)
          {
            uint64_t v30 = *(unsigned int *)(v27 + 4);
            if ((int)v30 >= 0) {
              uint64_t v31 = (uint64_t *)(*(void *)(v28 + 272) + 8 * v30);
            }
            else {
              uint64_t v31 = (uint64_t *)(*(void *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
            }
            uint64_t v32 = *v31;
            if (*v31)
            {
              uint64_t v33 = *(void *)(v32 + 16);
              *(void *)(v32 + 16) = v27;
              *(void *)(v27 + 16) = v33;
              if (*(unsigned char *)(v27 + 3))
              {
                *(void *)(v27 + 24) = v32;
              }
              else
              {
                *(void *)(v27 + 24) = 0;
                uint64_t v31 = (uint64_t *)(v33 + 24);
              }
            }
            else
            {
              *(void *)(v27 + 16) = v27;
              *(void *)(v27 + 24) = 0;
            }
            *uint64_t v31 = v27;
          }
          v27 += 32;
          v29 -= 32;
        }
        while (v29);
      }
      uint64_t v22 = *(void *)(v20 + 728);
      if (v22) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v22 + 24))(v22, v16);
      }
      unint64_t v23 = *(void *)(v18 + 48) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v16 = v23 | *(void *)v16 & 7;
      *(void *)(v16 + 8) = v18 + 48;
      *(void *)(v23 + 8) = v16;
      *(void *)(v18 + 48) = *(void *)(v18 + 48) & 7 | v16;
      ++*(_DWORD *)(a2 + 4);
      int v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 560) + 968))();
      unsigned int v25 = llvm::TargetSchedModel::computeInstrLatency(v12, (const llvm::MachineInstr *)v9, 0);
      if (v25 >= 2) {
        *(_DWORD *)(a2 + 8) = v25 + *(_DWORD *)(a2 + 8) - 1;
      }
      *(_DWORD *)(a2 + 12) += v24;
      if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 768))(*(void *)(a1 + 560), v9) & 1) == 0
        && **(unsigned __int16 **)(v16 + 16) - 13 >= 5)
      {
        (*(void (**)(void, unint64_t, void, void))(**(void **)(a1 + 560) + 808))(*(void *)(a1 + 560), v16, *a4, *((unsigned int *)a4 + 2));
      }
      sub_1CC2BDDB4(v16, v13);
      if (!v9 || (*(unsigned char *)v9 & 4) == 0)
      {
        while ((*(_WORD *)(v9 + 44) & 8) != 0)
          uint64_t v9 = *(void *)(v9 + 8);
      }
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while ((void *)v9 != v8);
  }
  if ((a5 & 1) == 0)
  {
    unint64_t v39 = (unsigned char *)v47[11];
    unint64_t v38 = (unsigned char *)v47[12];
    int64_t v40 = v38 - v39;
    if (v38 == v39)
    {
      uint64_t v42 = 0;
      unint64_t v41 = 0;
    }
    else
    {
      if (v40 < 0) {
        abort();
      }
      unint64_t v41 = (char *)operator new(v38 - v39);
      memmove(v41, v39, v40);
      uint64_t v42 = &v41[8 * (v40 >> 3)];
    }
    if (v47[1] == v47[4] + 320 || (*(_WORD *)a3 & 0x40) == 0) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = (void *)v47[1];
    }
    if (v41 != v42)
    {
      int v45 = v41;
      do
      {
        if (*(void **)v45 != v44) {
          llvm::MachineBasicBlock::addSuccessor(*(void **)(a2 + 16), *(void **)v45, -1);
        }
        v45 += 8;
      }
      while (v45 != v42);
    }
    if (v41) {
      operator delete(v41);
    }
  }
LABEL_66:
  sub_1CB84AE28((unsigned int *)(a2 + 184), *(unsigned char **)(a3 + 184), (unsigned char *)(*(void *)(a3 + 184) + 32 * *(unsigned int *)(a3 + 192)));
  uint64_t result = sub_1CB84AE28((unsigned int *)(a2 + 184), *a4, &(*a4)[32 * *((unsigned int *)a4 + 2)]);
  *(_WORD *)a2 = *(_WORD *)a2 & 0xFFFB | *(_WORD *)a3 & 0x200;
  return result;
}

unsigned int *sub_1CC2BD4C4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char **a4, unsigned __int16 **a5)
{
  unint64_t v7 = *(void *)(*(void *)(a2 + 16) + 56);
  if (v7 == a3) {
    goto LABEL_35;
  }
  BOOL v11 = a5 != 0;
  uint64_t v12 = (uint64_t *)(a1 + 592);
  do
  {
    if (**(unsigned __int16 **)(v7 + 16) - 13 < 5
      || ((*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 560) + 768))(*(void *)(a1 + 560), v7) & 1) != 0)
    {
      goto LABEL_28;
    }
    if (!v11) {
      goto LABEL_27;
    }
    BOOL v23 = 1;
    if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v7, 0, &v23)) {
      goto LABEL_27;
    }
    uint64_t v13 = *(unsigned int *)(v7 + 40);
    if (!v13)
    {
LABEL_30:
      BOOL v11 = 1;
      if (v7) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
    uint64_t v14 = *(_DWORD **)(v7 + 32);
    uint64_t v15 = &v14[8 * v13];
    while (1)
    {
      if (*v14 || (*v14 & 0x1000000) == 0 || !v14[1]) {
        goto LABEL_10;
      }
      unsigned int v16 = (unsigned __int16)v14[1];
      if (a5[6]) {
        break;
      }
      uint64_t v19 = a5[1];
      if (!v19) {
        goto LABEL_27;
      }
      uint64_t v20 = *a5;
      uint64_t v21 = 2 * (void)v19;
      while (*v20 != v16)
      {
        ++v20;
        v21 -= 2;
        if (!v21) {
          goto LABEL_27;
        }
      }
      if (!v21) {
        goto LABEL_27;
      }
LABEL_10:
      v14 += 8;
      if (v14 == v15) {
        goto LABEL_30;
      }
    }
    for (uint64_t i = a5[5]; i; uint64_t i = *(unsigned __int16 **)i)
    {
      unsigned int v18 = i[13];
      if (v18 <= v16)
      {
        if (v18 >= v16) {
          goto LABEL_10;
        }
        i += 4;
      }
    }
LABEL_27:
    (*(void (**)(void, unint64_t, void, void))(**(void **)(a1 + 560) + 808))(*(void *)(a1 + 560), v7, *a4, *((unsigned int *)a4 + 2));
    sub_1CC2BDDB4(v7, v12);
    BOOL v11 = 0;
    if (v7)
    {
LABEL_28:
      if ((*(unsigned char *)v7 & 4) != 0) {
        goto LABEL_34;
      }
    }
LABEL_33:
    while ((*(_WORD *)(v7 + 44) & 8) != 0)
      unint64_t v7 = *(void *)(v7 + 8);
LABEL_34:
    unint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7 != a3);
LABEL_35:
  uint64_t result = sub_1CB84AE28((unsigned int *)(a2 + 184), *a4, &(*a4)[32 * *((unsigned int *)a4 + 2)]);
  *(_WORD *)a2 &= ~4u;
  *(_DWORD *)(a2 + 4) = 0;
  return result;
}

void sub_1CC2BD6E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v61[4] = *MEMORY[0x1E4F143B8];
  __int16 v6 = *(llvm::MachineBasicBlock **)(a3 + 16);
  unint64_t FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(v6);
  unint64_t v8 = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(*(llvm::MachineBasicBlock **)(a2 + 16));
  uint64_t v9 = v8;
  uint64_t v10 = (unint64_t *)*((void *)v6 + 7);
  if (v10 != FirstTerminator && v8 != FirstTerminator)
  {
    uint64_t v12 = *(llvm::MachineBasicBlock **)(a2 + 16);
    if (v12 != v6)
    {
      unint64_t v53 = *((void *)v12 + 5);
      long long v54 = (unint64_t *)*((void *)v6 + 7);
      do
      {
        v54[3] = v53;
        long long v54 = (unint64_t *)v54[1];
      }
      while (v54 != FirstTerminator);
    }
    unint64_t v13 = *FirstTerminator;
    unint64_t v14 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = *v10 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v15 + 8) = FirstTerminator;
    *unint64_t FirstTerminator = v15 | v13 & 7;
    unint64_t v16 = *v8 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v14 + 8) = v8;
    unint64_t *v10 = v16 | *v10 & 7;
    *(void *)(v16 + 8) = v10;
    *unint64_t v8 = v13 & 0xFFFFFFFFFFFFFFF8 | *v8 & 7;
  }
  unsigned int v17 = (unint64_t *)((char *)v6 + 48);
  if ((unint64_t *)((char *)v6 + 48) != FirstTerminator)
  {
    int v18 = (*(uint64_t (**)(void, unint64_t *))(**(void **)(a1 + 560) + 768))(*(void *)(a1 + 560), FirstTerminator);
    uint64_t v19 = *(llvm::MachineBasicBlock **)(a2 + 16);
    uint64_t v20 = (unint64_t *)((char *)v19 + 48);
    if (v18) {
      uint64_t v20 = v9;
    }
    if (v17 != v20)
    {
      if (v19 != v6)
      {
        unint64_t v55 = *((void *)v19 + 5);
        long long v56 = FirstTerminator;
        do
        {
          v56[3] = v55;
          long long v56 = (unint64_t *)v56[1];
        }
        while (v56 != v17);
      }
      unint64_t v21 = *v17;
      unint64_t v22 = *v17 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v23 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v23 + 8) = v17;
      *unsigned int v17 = v23 | v21 & 7;
      unint64_t v24 = *v20 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v22 + 8) = v20;
      *unint64_t FirstTerminator = v24 | *FirstTerminator & 7;
      *(void *)(v24 + 8) = FirstTerminator;
      unint64_t *v20 = v21 & 0xFFFFFFFFFFFFFFF8 | *v20 & 7;
    }
  }
  if ((*(_WORD *)a2 & 0x10) != 0) {
    sub_1CC2BE0A8(*(unsigned int **)(*(void *)(a2 + 16) + 112), *(unsigned int **)(*(void *)(a2 + 16) + 120));
  }
  unsigned int v25 = (char *)*((void *)v6 + 11);
  uint64_t v26 = (char *)*((void *)v6 + 12);
  unint64_t v27 = v26 - v25;
  if ((unint64_t)(v26 - v25) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v25 != v26)
  {
    uint64_t v28 = v61;
    do
    {
      uint64_t v29 = *(void *)v25;
      v25 += 8;
      *v28++ = v29;
    }
    while (v25 != v26);
  }
  int v30 = v27 >> 3;
  if (*((void *)v6 + 1) == *((void *)v6 + 4) + 320 || (*(_WORD *)a3 & 0x40) == 0) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = (llvm::MachineBasicBlock *)*((void *)v6 + 1);
  }
  uint64_t v57 = a3;
  uint64_t v58 = a2;
  if (!a4) {
    goto LABEL_33;
  }
  uint64_t v33 = *(const llvm::MachineBasicBlock **)(a2 + 16);
  unsigned int v34 = (llvm::MachineBasicBlock **)*((void *)v33 + 11);
  BOOL v35 = (llvm::MachineBasicBlock **)*((void *)v33 + 12);
  if (v34 != v35)
  {
    while (*v34 != v6)
    {
      if (++v34 == v35)
      {
        unsigned int v34 = (llvm::MachineBasicBlock **)*((void *)v33 + 12);
        break;
      }
    }
  }
  if (v34 == v35)
  {
LABEL_33:
    unsigned int EdgeProbability = 0;
    if (!v30) {
      goto LABEL_60;
    }
    goto LABEL_34;
  }
  unsigned int EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 576), v33, v6);
  llvm::MachineBasicBlock::removeSuccessor(*(llvm::MachineBasicBlock **)(a2 + 16), v6, 0);
  int v30 = v27 >> 3;
  if (v30)
  {
LABEL_34:
    unint64_t v37 = (const llvm::MachineBasicBlock **)v61;
    unint64_t v38 = (const llvm::MachineBasicBlock **)&v61[v30];
    do
    {
      unint64_t v39 = *v37;
      if (*v37 == v32)
      {
        uint64_t v49 = v6;
        uint64_t v50 = v32;
      }
      else
      {
        if (a4)
        {
          unsigned int v40 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 576), v6, *v37);
          if (EdgeProbability) {
            unsigned int v41 = (EdgeProbability * (unint64_t)v40 + 0x40000000) >> 31;
          }
          else {
            unsigned int v41 = v40;
          }
          llvm::MachineBasicBlock::removeSuccessor(v6, v39, 0);
          uint64_t v42 = *(void **)(v58 + 16);
          uint64_t v44 = (llvm::MachineBasicBlock **)v42[11];
          uint64_t v43 = (llvm::MachineBasicBlock **)v42[12];
          if (v44 == v43) {
            goto LABEL_59;
          }
          int v45 = (llvm::MachineBasicBlock **)v42[11];
          while (*v45 != v39)
          {
            if (++v45 == v43)
            {
              int v45 = (llvm::MachineBasicBlock **)v42[12];
              break;
            }
          }
          if (v45 == v43)
          {
LABEL_59:
            llvm::MachineBasicBlock::addSuccessor(*(void **)(v58 + 16), v39, v41);
          }
          else
          {
            while (*v44 != v39)
            {
              if (++v44 == v43)
              {
                uint64_t v44 = (llvm::MachineBasicBlock **)v42[12];
                break;
              }
            }
            unsigned int v46 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 576), *(const llvm::MachineBasicBlock **)(v58 + 16), v39);
            uint64_t v47 = v42[14];
            if (v47 != v42[15])
            {
              if (v46 + (unint64_t)v41 <= 0x80000000) {
                unsigned int v48 = v46 + v41;
              }
              else {
                unsigned int v48 = 0x80000000;
              }
              *(_DWORD *)(v47 + (((uint64_t)v44 - v42[11]) >> 1)) = v48;
            }
          }
          goto LABEL_57;
        }
        uint64_t v49 = v6;
        uint64_t v50 = *v37;
      }
      llvm::MachineBasicBlock::removeSuccessor(v49, v50, 0);
LABEL_57:
      ++v37;
    }
    while (v37 != v38);
  }
LABEL_60:
  uint64_t v51 = *(llvm::MachineBasicBlock **)(*((void *)v6 + 4) + 320);
  if (v51 != v6) {
    llvm::MachineBasicBlock::moveAfter((uint64_t *)v6, v51);
  }
  if ((*(_WORD *)v58 & 0x10) != 0 && (*(_WORD *)v57 & 0x10) != 0) {
    sub_1CC2BE0A8(*(unsigned int **)(*(void *)(v58 + 16) + 112), *(unsigned int **)(*(void *)(v58 + 16) + 120));
  }
  sub_1CB84AE28((unsigned int *)(v58 + 184), *(unsigned char **)(v57 + 184), (unsigned char *)(*(void *)(v57 + 184) + 32 * *(unsigned int *)(v57 + 192)));
  *(_DWORD *)(v57 + 192) = 0;
  *(int32x2_t *)(v58 + 4) = vadd_s32(*(int32x2_t *)(v58 + 4), *(int32x2_t *)(v57 + 4));
  *(_DWORD *)(v58 + 12) += *(_DWORD *)(v57 + 12);
  *(void *)(v57 + 8) = 0;
  *(_DWORD *)(v57 + 4) = 0;
  __int16 v52 = *(_WORD *)v57 & 0x200 | *(_WORD *)v58;
  *(_WORD *)uint64_t v58 = v52;
  *(_WORD *)uint64_t v58 = *(_WORD *)v57 & 0x40 | v52 & 0xFFBB;
  *(_WORD *)v57 &= ~4u;
}

BOOL sub_1CC2BDBEC(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[1];
  if (v2 == a2)
  {
    int v4 = a1;
LABEL_14:
    uint64_t v9 = (void *)v4[11];
    unint64_t v8 = (void *)v4[12];
    if (v9 != v8)
    {
      while ((void *)*v9 != a2)
      {
        if (++v9 == v8)
        {
          uint64_t v9 = v8;
          return v9 != v8;
        }
      }
    }
    return v9 != v8;
  }
  else
  {
    uint64_t v3 = a1[4] + 320;
    while (v2 != (void *)v3)
    {
      int v4 = v2;
      if (v2 + 6 != (void *)(v2[6] & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      int v5 = (void *)a1[11];
      __int16 v6 = (void *)a1[12];
      if (v5 != v6)
      {
        while ((void *)*v5 != v4)
        {
          if (++v5 == v6)
          {
            int v5 = (void *)a1[12];
            break;
          }
        }
      }
      if (v5 == v6) {
        break;
      }
      uint64_t v2 = (void *)v4[1];
      a1 = v4;
      if (v2 == a2) {
        goto LABEL_14;
      }
    }
    return 0;
  }
}

void sub_1CC2BDCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[1] = 0;
  unint64_t v8 = 0;
  v7[0] = &v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int8 **, void, unsigned __int8 **, void))(*(void *)a3 + 272))(a3, a1, a2, 0, &v8, 0, &v8, 0);
  if (v8)
  {
    int v3 = *v8;
    if ((v3 - 4) > 0x1E)
    {
      if ((v3 - 3) >= 0xFFFFFFFE) {
        int v4 = v8;
      }
      else {
        int v4 = 0;
      }
      if ((v3 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v5 = (unint64_t)(v4 + 8);
LABEL_11:
        v7[0] = &v8;
        sub_1CC5FA668(v5 + 16, v7);
        return;
      }
      if (v3 == 3) {
        *((void *)v8 + 1) = 0;
      }
    }
    else if ((v8[1] & 0x7F) == 2 || *((_DWORD *)v8 + 3))
    {
      uint64_t v6 = *((void *)v8 + 2);
      if ((v6 & 4) != 0)
      {
        unint64_t v5 = v6 & 0xFFFFFFFFFFFFFFF8;
        if (v5) {
          goto LABEL_11;
        }
      }
    }
  }
}

void sub_1CC2BDDB4(unint64_t a1, uint64_t *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 16);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v6 = v5;
  uint64_t v33 = v35;
  long long v34 = xmmword_1CD96EEC0;
  unsigned int v36 = 0;
  int v37 = 0;
  int v7 = *(_DWORD *)(v5 + 16);
  if (v7)
  {
    unint64_t v8 = malloc_type_calloc(*(unsigned int *)(v5 + 16), 1uLL, 0x6D9A4F0CuLL);
    if (!v8) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unsigned int v36 = v8;
    int v37 = v7;
  }
  uint64_t v9 = a2[2];
  if (v9)
  {
    uint64_t v10 = (__int16 *)a2[1];
    uint64_t v11 = 2 * v9;
    do
    {
      __int16 v12 = *v10++;
      LOWORD(v30) = v12;
      sub_1CD515E0C((uint64_t *)&v33, &v30);
      v11 -= 2;
    }
    while (v11);
  }
  int v30 = v32;
  uint64_t v31 = 0x400000000;
  llvm::LivePhysRegs::stepForward(a2, a1, (uint64_t)&v30);
  unint64_t v13 = (char *)v30;
  if (v31)
  {
    if (v6) {
      unint64_t v14 = (void *)(v6 + 8);
    }
    else {
      unint64_t v14 = 0;
    }
    unint64_t v15 = (char *)v30 + 16 * v31;
    do
    {
      uint64_t v16 = *(unsigned __int16 *)v13;
      uint64_t v17 = *((void *)v13 + 1);
      int v18 = *(llvm::MachineInstr **)(v17 + 8);
      uint64_t v19 = *(llvm::MachineFunction **)(*((void *)v18 + 3) + 32);
      unsigned int v20 = *((unsigned __int8 *)v36 + v16);
      if (*(unsigned char *)v17 == 12)
      {
        while (v20 < v34)
        {
          if (*((unsigned __int16 *)v33 + v20) == v16)
          {
            if ((void)v34 != v20)
            {
              uint64_t v27 = 0;
              uint64_t v28 = 0;
              uint64_t v29 = 0;
              int v25 = 0x2000000;
              int v26 = v16;
              llvm::MachineInstr::addOperand(v18, v19, (const llvm::MachineOperand *)&v25);
            }
            break;
          }
          v20 += 256;
        }
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        int v25 = 50331648;
        int v26 = v16;
LABEL_22:
        llvm::MachineInstr::addOperand(v18, v19, (const llvm::MachineOperand *)&v25);
      }
      else
      {
        while (v20 < v34)
        {
          if (*((unsigned __int16 *)v33 + v20) == v16)
          {
            if ((void)v34 != v20)
            {
LABEL_34:
              uint64_t v27 = 0;
              uint64_t v28 = 0;
              uint64_t v29 = 0;
              int v25 = 0x2000000;
              int v26 = v16;
              goto LABEL_22;
            }
            break;
          }
          v20 += 256;
        }
        unint64_t v21 = (_WORD *)(v14[6] + 2 * *(unsigned int *)(*v14 + 24 * *(unsigned __int16 *)v13 + 4));
        if (*v21)
        {
          unsigned __int16 v22 = *v21 + v16;
          do
          {
            for (unsigned int i = *((unsigned __int8 *)v36 + v22); i < v34; i += 256)
            {
              if (*((unsigned __int16 *)v33 + i) == v22)
              {
                if ((void)v34 != i) {
                  goto LABEL_34;
                }
                break;
              }
            }
            int v24 = (unsigned __int16)v21[1];
            ++v21;
            v22 += v24;
          }
          while (v24);
        }
      }
      v13 += 16;
    }
    while (v13 != v15);
    unint64_t v13 = (char *)v30;
  }
  if (v13 != v32) {
    free(v13);
  }
  free(v36);
  if (v33 != v35) {
    free(v33);
  }
}

unsigned int *sub_1CC2BE0A8(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    unint64_t v2 = 0;
    unsigned int v3 = 0;
    uint64_t v4 = result;
    do
    {
      unsigned int v5 = *v4++;
      BOOL v6 = v5 == -1;
      unint64_t v7 = v2 + v5;
      if (v5 == -1) {
        ++v3;
      }
      if (!v6) {
        unint64_t v2 = v7;
      }
    }
    while (v4 != a2);
    if (v3)
    {
      if (v2 >> 31) {
        unsigned int v8 = 0;
      }
      else {
        unsigned int v8 = (0x80000000 - v2) / v3;
      }
      uint64_t v9 = result;
      do
      {
        if (*v9 == -1) {
          *uint64_t v9 = v8;
        }
        ++v9;
      }
      while (v9 != a2);
      if (v2 > 0x80000000) {
        goto LABEL_10;
      }
    }
    else
    {
      if (v2)
      {
        do
        {
LABEL_10:
          *uint64_t result = ((v2 >> 1) + ((unint64_t)*result << 31)) / v2;
          ++result;
        }
        while (result != a2);
        return result;
      }
      uint64_t v10 = a2 - result;
      if (v10 == 0x80000000) {
        unsigned int v11 = 1;
      }
      else {
        unsigned int v11 = ((v10 >> 1) | 0x80000000) / v10;
      }
      if ((char *)a2 - (char *)result >= 1)
      {
        uint64_t v12 = v10 + 1;
        do
        {
          *result++ = v11;
          --v12;
        }
        while (v12 > 1);
      }
    }
  }
  return result;
}

uint64_t sub_1CC2BE190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v11 = a3;
  v162[16] = *MEMORY[0x1E4F143B8];
  if ((*(_WORD *)a3 & 1) != 0
    || (*(_WORD *)a4 & 1) != 0
    || (uint64_t v13 = *(void *)(a3 + 16), ((*(void *)(v13 + 72) - *(void *)(v13 + 64)) & 0x7FFFFFFF0) != 0)
    || (uint64_t v14 = *(void *)(a4 + 16), ((*(void *)(v14 + 72) - *(void *)(v14 + 64)) & 0x7FFFFFFF0) != 0))
  {
    uint64_t result = 0;
    *(_WORD *)a2 &= ~4u;
    *(_WORD *)a3 &= ~4u;
    *(_WORD *)a4 &= ~4u;
    return result;
  }
  if (*(unsigned char *)(v13 + 185) || *(unsigned char *)(v14 + 185)) {
    return 0;
  }
  unint64_t v21 = *(unsigned char **)(a2 + 40);
  unsigned int v139 = (void **)(a2 + 40);
  unsigned __int16 v22 = &v21[32 * *(unsigned int *)(a2 + 48)];
  v161[0] = v162;
  v161[1] = (void *)0x400000000;
  sub_1CB84AE28((unsigned int *)v161, v21, v22);
  (*(void (**)(void))(**(void **)(a1 + 560) + 728))();
  if ((!a7 || a8) && ((a7 & 1) != 0 || (a8 & 1) != 0 || *(_DWORD *)(v11 + 4) <= *(_DWORD *)(a4 + 4)))
  {
    BOOL v138 = v161;
    uint64_t v23 = a4;
  }
  else
  {
    BOOL v138 = (void **)(a2 + 40);
    unsigned int v139 = v161;
    uint64_t v23 = v11;
    uint64_t v11 = a4;
  }
  *(_DWORD *)(a2 + 4) -= (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 560) + 264))(*(void *)(a1 + 560), *(void *)(a2 + 16), 0);
  uint64_t v24 = *(void *)(v11 + 16);
  __int16 v142 = *(llvm::MachineBasicBlock **)(v23 + 16);
  uint64_t v25 = *(void *)(a1 + 568);
  *(void *)(a1 + 592) = v25;
  *(void *)(a1 + 608) = 0;
  sub_1CD50BAB8((void *)(a1 + 600), *(_DWORD *)(v25 + 16));
  if ((**(unsigned char **)(**(void **)(a1 + 584) + 360) & 4) != 0)
  {
    llvm::LivePhysRegs::addBlockLiveIns((llvm::LivePhysRegs *)(a1 + 592), (unsigned __int16 **)v24);
    llvm::LivePhysRegs::addBlockLiveIns((llvm::LivePhysRegs *)(a1 + 592), (unsigned __int16 **)v142);
  }
  uint64_t v26 = v24 + 48;
  uint64_t v141 = (llvm::MachineBasicBlock *)v24;
  unint64_t v27 = *(void *)(v24 + 56);
  unint64_t v28 = v27;
  if (v27 != v26)
  {
    unint64_t v28 = v27;
    while (**(unsigned __int16 **)(v28 + 16) - 13 <= 4)
    {
      if ((*(unsigned char *)v28 & 4) == 0)
      {
        while ((*(_WORD *)(v28 + 44) & 8) != 0)
          unint64_t v28 = *(void *)(v28 + 8);
      }
      unint64_t v28 = *(void *)(v28 + 8);
      if (v28 == v26)
      {
        unint64_t v28 = v26;
        break;
      }
    }
  }
  uint64_t v140 = v23;
  uint64_t v29 = (char *)*((void *)v142 + 7);
  uint64_t v146 = (void *)((char *)v142 + 48);
  if (v29 != (char *)v142 + 48)
  {
    while (**((unsigned __int16 **)v29 + 2) - 13 <= 4)
    {
      if ((*v29 & 4) == 0)
      {
        while ((*((_WORD *)v29 + 22) & 8) != 0)
          uint64_t v29 = (char *)*((void *)v29 + 1);
      }
      uint64_t v29 = (char *)*((void *)v29 + 1);
      if (v29 == (char *)v142 + 48)
      {
        uint64_t v29 = (char *)v142 + 48;
        break;
      }
    }
  }
  *(_DWORD *)(v11 + 4) -= a5;
  *(_DWORD *)(v140 + 4) -= a5;
  if (a5 && v26 != v28)
  {
    unsigned int v30 = 0;
    do
    {
      if (**(unsigned __int16 **)(v28 + 16) - 18 < 0xFFFFFFFB) {
        ++v30;
      }
      if ((*(unsigned char *)v28 & 4) == 0)
      {
        while ((*(_WORD *)(v28 + 44) & 8) != 0)
          unint64_t v28 = *(void *)(v28 + 8);
      }
      unint64_t v28 = *(void *)(v28 + 8);
    }
    while (v30 < a5 && v28 != v26);
  }
  if (!a5) {
    goto LABEL_61;
  }
  while (1)
  {
    if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v29))
    {
      llvm::MachineFunction::eraseCallSiteInfo(*((int32x2_t **)v142 + 4), (const llvm::MachineInstr *)v29);
      if (!v29) {
        goto LABEL_50;
      }
    }
    else if (!v29)
    {
      goto LABEL_50;
    }
    if ((*v29 & 4) != 0)
    {
      unsigned int i = (char *)v142 + 48;
      goto LABEL_54;
    }
LABEL_50:
    for (i = (char *)v142 + 48; (*((_WORD *)v29 + 22) & 8) != 0; uint64_t v29 = (char *)*((void *)v29 + 1))
      ;
LABEL_54:
    uint64_t v29 = (char *)*((void *)v29 + 1);
    if (v29 == i) {
      break;
    }
    a5 = (__PAIR64__(a5, **((unsigned __int16 **)v29 + 2) - 18) - 4294967291u) >> 32;
    if (!a5) {
      goto LABEL_60;
    }
  }
  uint64_t v29 = i;
LABEL_60:
  unint64_t v27 = *((void *)v141 + 7);
LABEL_61:
  if ((**(unsigned char **)(**(void **)(a1 + 584) + 360) & 4) != 0)
  {
    if (v27 != v28)
    {
      do
      {
        uint64_t v156 = (char *)&v157 + 8;
        *(void *)&long long v157 = 0x400000000;
        llvm::LivePhysRegs::stepForward((uint64_t *)(a1 + 592), v27, (uint64_t)&v156);
        if (v156 != (char *)&v157 + 8) {
          free(v156);
        }
        if ((*(unsigned char *)v27 & 4) == 0)
        {
          while ((*(_WORD *)(v27 + 44) & 8) != 0)
            unint64_t v27 = *(void *)(v27 + 8);
        }
        unint64_t v27 = *(void *)(v27 + 8);
      }
      while (v27 != v28);
      unint64_t v27 = *((void *)v141 + 7);
      goto LABEL_70;
    }
  }
  else
  {
LABEL_70:
    uint64_t v33 = *(llvm::MachineBasicBlock **)(a2 + 16);
    long long v34 = (unint64_t *)((char *)v33 + 48);
    if (v27 != v28 && v34 != (unint64_t *)v28)
    {
      if (v33 != v141)
      {
        uint64_t v136 = *((void *)v33 + 5);
        unint64_t v137 = v27;
        do
        {
          *(void *)(v137 + 24) = v136;
          unint64_t v137 = *(void *)(v137 + 8);
        }
        while (v137 != v28);
      }
      uint64_t v36 = *(void *)v28;
      unint64_t v37 = *(void *)v28 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v38 = *(void *)v27 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v38 + 8) = v28;
      *(void *)unint64_t v28 = v38 | v36 & 7;
      unint64_t v39 = *v34 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v37 + 8) = v34;
      *(void *)unint64_t v27 = v39 | *(void *)v27 & 7;
      *(void *)(v39 + 8) = v27;
      *long long v34 = v36 & 0xFFFFFFFFFFFFFFF8 | *v34 & 7;
    }
  }
  unsigned int v40 = v141;
  unsigned int v41 = (char *)*((void *)v142 + 7);
  uint64_t v143 = v26;
  if (v41 != v29)
  {
    do
    {
      uint64_t v42 = (char *)*((void *)v41 + 1);
      uint64_t v43 = *(void *)(*((void *)v41 + 3) + 32);
      if (v43)
      {
        uint64_t v44 = *(void *)(v43 + 728);
        if (v44)
        {
          int v45 = (char *)*((void *)v41 + 1);
          (*(void (**)(uint64_t, char *))(*(void *)v44 + 32))(v44, v41);
          uint64_t v42 = v45;
        }
        uint64_t v46 = *((unsigned int *)v41 + 10);
        if (v46)
        {
          uint64_t v47 = *((void *)v41 + 4);
          uint64_t v48 = *(void *)(v43 + 40);
          uint64_t v49 = 32 * v46;
          do
          {
            if (!*(unsigned char *)v47)
            {
              uint64_t v50 = *(unsigned int *)(v47 + 4);
              if ((v50 & 0x80000000) != 0) {
                uint64_t v51 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v51 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v50);
              }
              uint64_t v52 = *v51;
              uint64_t v54 = *(void *)(v47 + 16);
              uint64_t v53 = *(void *)(v47 + 24);
              if (v47 != *v51) {
                uint64_t v51 = (uint64_t *)(v54 + 24);
              }
              *uint64_t v51 = v53;
              if (v53) {
                uint64_t v55 = v53;
              }
              else {
                uint64_t v55 = v52;
              }
              *(void *)(v55 + 16) = v54;
              *(void *)(v47 + 16) = 0;
              *(void *)(v47 + 24) = 0;
            }
            v47 += 32;
            v49 -= 32;
          }
          while (v49);
        }
      }
      *((void *)v41 + 3) = 0;
      long long v56 = (unint64_t *)*((void *)v41 + 1);
      unint64_t v57 = *(void *)v41 & 0xFFFFFFFFFFFFFFF8;
      *long long v56 = v57 | *v56 & 7;
      *(void *)(v57 + 8) = v56;
      *(void *)v41 &= 7uLL;
      *((void *)v41 + 1) = 0;
      uint64_t v58 = *(void *)(*((void *)v142 + 5) + 32);
      uint64_t v59 = (void *)*((void *)v41 + 4);
      if (v59)
      {
        uint64_t v60 = v41[47];
        uint64_t v61 = (uint64_t *)(v58 + 232);
        if (*(_DWORD *)(v58 + 240) <= v60)
        {
          uint64_t v144 = v42;
          sub_1CC34BDE0(v58 + 232, v60 + 1);
          uint64_t v42 = v144;
        }
        uint64_t v62 = *v61;
        *uint64_t v59 = *(void *)(*v61 + 8 * v60);
        *(void *)(v62 + 8 * v60) = v59;
      }
      *(void *)unsigned int v41 = *(void *)(v58 + 224);
      *(void *)(v58 + 224) = v41;
      unsigned int v41 = v42;
      unsigned int v40 = v141;
      uint64_t v26 = v143;
    }
    while (v42 != v29);
  }
  uint64_t v63 = *((void *)v40 + 7);
  unint64_t v64 = v26;
  if (v26 != v63)
  {
    unint64_t v65 = v26;
    while (1)
    {
      unint64_t v64 = v65;
      unint64_t v65 = *(void *)v65 & 0xFFFFFFFFFFFFFFF8;
      if (v65 && (*(unsigned char *)v65 & 4) != 0)
      {
        __int16 v66 = *(_WORD *)(v65 + 44);
      }
      else
      {
        while (1)
        {
          __int16 v66 = *(_WORD *)(v65 + 44);
          if ((v66 & 4) == 0) {
            break;
          }
          unint64_t v65 = *(void *)v65 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      int v67 = v66 & 0xC;
      int v68 = v66 & 4;
      char v69 = *(unsigned __int16 **)(v65 + 16);
      uint64_t v70 = *((void *)v69 + 1);
      if (v67) {
        BOOL v71 = v68 == 0;
      }
      else {
        BOOL v71 = 0;
      }
      if (v71)
      {
        unint64_t v72 = v65;
        if ((v70 & 0x400) == 0)
        {
          while ((*(_WORD *)(v72 + 44) & 8) != 0)
          {
            unint64_t v72 = *(void *)(v72 + 8);
            if ((*(unsigned char *)(*(void *)(v72 + 16) + 9) & 4) != 0) {
              goto LABEL_112;
            }
          }
LABEL_111:
          if (*v69 - 13 > 4) {
            break;
          }
        }
      }
      else if ((v70 & 0x400) == 0)
      {
        goto LABEL_111;
      }
LABEL_112:
      if (v65 == v63)
      {
        unint64_t v64 = *((void *)v40 + 7);
        break;
      }
    }
  }
  if (a6)
  {
    int v96 = 0;
    do
    {
      unint64_t v64 = *(void *)v64 & 0xFFFFFFFFFFFFFFF8;
      if (!v64 || (*(unsigned char *)v64 & 4) == 0)
      {
        while ((*(_WORD *)(v64 + 44) & 4) != 0)
          unint64_t v64 = *(void *)v64 & 0xFFFFFFFFFFFFFFF8;
      }
      if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v64)) {
        llvm::MachineFunction::eraseCallSiteInfo(*((int32x2_t **)v40 + 4), (const llvm::MachineInstr *)v64);
      }
      if (**(unsigned __int16 **)(v64 + 16) - 18 < 0xFFFFFFFB) {
        ++v96;
      }
    }
    while (v96 != a6);
  }
  uint64_t v73 = a9;
  if (v64 != v26)
  {
    do
    {
      unint64_t v74 = *(void *)(v64 + 8);
      uint64_t v75 = *(void *)(*(void *)(v64 + 24) + 32);
      if (v75)
      {
        uint64_t v76 = *(void *)(v75 + 728);
        if (v76)
        {
          uint64_t v77 = v73;
          (*(void (**)(uint64_t, unint64_t))(*(void *)v76 + 32))(v76, v64);
          uint64_t v73 = v77;
        }
        uint64_t v78 = *(unsigned int *)(v64 + 40);
        if (v78)
        {
          uint64_t v79 = *(void *)(v64 + 32);
          uint64_t v80 = *(void *)(v75 + 40);
          uint64_t v81 = 32 * v78;
          do
          {
            if (!*(unsigned char *)v79)
            {
              uint64_t v82 = *(unsigned int *)(v79 + 4);
              if ((v82 & 0x80000000) != 0) {
                __int16 v83 = (uint64_t *)(*(void *)(v80 + 24) + 16 * (v82 & 0x7FFFFFFF) + 8);
              }
              else {
                __int16 v83 = (uint64_t *)(*(void *)(v80 + 272) + 8 * v82);
              }
              uint64_t v84 = *v83;
              uint64_t v86 = *(void *)(v79 + 16);
              uint64_t v85 = *(void *)(v79 + 24);
              if (v79 != *v83) {
                __int16 v83 = (uint64_t *)(v86 + 24);
              }
              *__int16 v83 = v85;
              if (v85) {
                uint64_t v87 = v85;
              }
              else {
                uint64_t v87 = v84;
              }
              *(void *)(v87 + 16) = v86;
              *(void *)(v79 + 16) = 0;
              *(void *)(v79 + 24) = 0;
            }
            v79 += 32;
            v81 -= 32;
          }
          while (v81);
        }
      }
      *(void *)(v64 + 24) = 0;
      int v88 = *(unint64_t **)(v64 + 8);
      unint64_t v89 = *(void *)v64 & 0xFFFFFFFFFFFFFFF8;
      *int v88 = v89 | *v88 & 7;
      *(void *)(v89 + 8) = v88;
      *(void *)v64 &= 7uLL;
      *(void *)(v64 + 8) = 0;
      uint64_t v90 = *(void *)(*((void *)v141 + 5) + 32);
      int v91 = *(void **)(v64 + 32);
      if (v91)
      {
        uint64_t v92 = *(unsigned __int8 *)(v64 + 47);
        int v93 = (uint64_t *)(v90 + 232);
        if (*(_DWORD *)(v90 + 240) <= v92)
        {
          unsigned int v145 = v73;
          sub_1CC34BDE0(v90 + 232, v92 + 1);
          uint64_t v73 = v145;
        }
        uint64_t v94 = *v93;
        *int v91 = *(void *)(*v93 + 8 * v92);
        *(void *)(v94 + 8 * v92) = v91;
      }
      *(void *)unint64_t v64 = *(void *)(v90 + 224);
      *(void *)(v90 + 224) = v64;
      unint64_t v64 = v74;
      uint64_t v26 = v143;
    }
    while (v74 != v143);
  }
  unint64_t v95 = *(void *)(v140 + 16) + 48;
  if ((v73 & 1) == 0)
  {
    uint64_t v97 = *((void *)v142 + 7);
    if (v95 == v97) {
      goto LABEL_157;
    }
    while (1)
    {
      unint64_t v98 = v95;
      unint64_t v95 = *(void *)v95 & 0xFFFFFFFFFFFFFFF8;
      if (v95 && (*(unsigned char *)v95 & 4) != 0)
      {
        __int16 v129 = *(_WORD *)(v95 + 44);
      }
      else
      {
        while (1)
        {
          __int16 v129 = *(_WORD *)(v95 + 44);
          if ((v129 & 4) == 0) {
            break;
          }
          unint64_t v95 = *(void *)v95 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      int v130 = v129 & 0xC;
      int v131 = v129 & 4;
      int v132 = *(unsigned __int16 **)(v95 + 16);
      uint64_t v133 = *((void *)v132 + 1);
      if (v130) {
        BOOL v134 = v131 == 0;
      }
      else {
        BOOL v134 = 0;
      }
      if (v134)
      {
        unint64_t v135 = v95;
        if ((v133 & 0x400) == 0)
        {
          while ((*(_WORD *)(v135 + 44) & 8) != 0)
          {
            unint64_t v135 = *(void *)(v135 + 8);
            if ((*(unsigned char *)(*(void *)(v135 + 16) + 9) & 4) != 0) {
              goto LABEL_244;
            }
          }
LABEL_243:
          if (*v132 - 13 > 4) {
            goto LABEL_158;
          }
        }
      }
      else if ((v133 & 0x400) == 0)
      {
        goto LABEL_243;
      }
LABEL_244:
      if (v95 == v97)
      {
        unint64_t v98 = *((void *)v142 + 7);
        goto LABEL_158;
      }
    }
  }
  *(_DWORD *)(v140 + 4) -= (*(uint64_t (**)(void))(**(void **)(a1 + 560) + 264))(*(void *)(a1 + 560));
LABEL_157:
  unint64_t v98 = v95;
LABEL_158:
  while (a6)
  {
    unint64_t v98 = *(void *)v98 & 0xFFFFFFFFFFFFFFF8;
    if (!v98 || (*(unsigned char *)v98 & 4) == 0)
    {
      while ((*(_WORD *)(v98 + 44) & 4) != 0)
        unint64_t v98 = *(void *)v98 & 0xFFFFFFFFFFFFFFF8;
    }
    a6 = (__PAIR64__(a6, **(unsigned __int16 **)(v98 + 16) - 18) - 4294967291u) >> 32;
  }
  uint64_t v155 = 0;
  uint64_t v156 = v158;
  long long v157 = xmmword_1CDB159A0;
  uint64_t v159 = 0;
  uint64_t v160 = 0;
  v158[1] = &v159;
  uint64_t v151 = v153;
  long long v152 = xmmword_1CDB159A0;
  v153[1] = &v154;
  int v154 = 0;
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 560) + 360))()) {
    goto LABEL_226;
  }
  uint64_t v99 = *((void *)v142 + 7);
  if (v99 == v98) {
    goto LABEL_226;
  }
  while (2)
  {
    if (**(unsigned __int16 **)(v99 + 16) - 13 < 5) {
      goto LABEL_221;
    }
    uint64_t v148 = &v150;
    long long v149 = xmmword_1CDB159A0;
    uint64_t v100 = *(unsigned int *)(v99 + 40);
    if (!v100) {
      goto LABEL_221;
    }
    uint64_t v101 = *(_DWORD **)(v99 + 32);
    int v102 = &v101[8 * v100];
    while (2)
    {
      if (!*v101)
      {
        unsigned int v103 = v101[1];
        if (v103)
        {
          if ((*v101 & 0x1000000) != 0)
          {
            if ((unint64_t)(v149 + 1) > *((void *)&v149 + 1)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *((_WORD *)v148 + v149) = v103;
            *(void *)&long long v149 = v149 + 1;
          }
          else
          {
            if (v160)
            {
              for (uint64_t j = v159; j; uint64_t j = (void *)*j)
              {
                unsigned int v105 = *((unsigned __int16 *)j + 13);
                if (v105 <= (unsigned __int16)v103)
                {
                  if (v105 >= (unsigned __int16)v103) {
                    goto LABEL_171;
                  }
                  ++j;
                }
              }
              goto LABEL_190;
            }
            if (!(void)v157) {
              goto LABEL_190;
            }
            int v106 = (unsigned __int16 *)v156;
            uint64_t v107 = 2 * v157;
            while (*v106 != (unsigned __int16)v103)
            {
              ++v106;
              v107 -= 2;
              if (!v107) {
                goto LABEL_190;
              }
            }
            if (!v107)
            {
LABEL_190:
              uint64_t v108 = *(void *)(a1 + 568);
              __int16 v109 = (void *)(v108 + 8);
              if (!v108) {
                __int16 v109 = 0;
              }
              uint64_t v110 = v109[6];
              if (v110)
              {
                uint64_t v111 = (unsigned __int16 *)(v110 + 2 * *(unsigned int *)(*v109 + 24 * v103 + 4));
                do
                {
                  unsigned __int16 v147 = v103;
                  sub_1CD515EC8((uint64_t **)&v151, &v147);
                  int v112 = *v111++;
                  v103 += v112;
                }
                while (v112);
              }
            }
          }
        }
      }
LABEL_171:
      v101 += 8;
      if (v101 != v102) {
        continue;
      }
      break;
    }
    unsigned int v113 = (unsigned __int16 *)v148;
    int v114 = (unsigned __int16 *)v148 + v149;
    if (!(void)v149) {
      goto LABEL_218;
    }
    while (2)
    {
      unsigned int v115 = *v113;
      if (v155)
      {
        for (k = v154; k; k = (void *)*k)
        {
          unsigned int v117 = *((unsigned __int16 *)k + 13);
          if (v115 >= v117)
          {
            if (v117 >= v115) {
              goto LABEL_216;
            }
            ++k;
          }
        }
        goto LABEL_211;
      }
      if (!(void)v152) {
        goto LABEL_211;
      }
      uint64_t v118 = (unsigned __int16 *)v151;
      uint64_t v119 = 2 * v152;
      while (*v118 != v115)
      {
        ++v118;
        v119 -= 2;
        if (!v119) {
          goto LABEL_211;
        }
      }
      if (!v119)
      {
LABEL_211:
        uint64_t v120 = *(void *)(a1 + 568);
        BOOL v121 = (void *)(v120 + 8);
        if (!v120) {
          BOOL v121 = 0;
        }
        uint64_t v122 = v121[6];
        if (v122)
        {
          uint64_t v123 = (unsigned __int16 *)(v122 + 2 * *(unsigned int *)(*v121 + 24 * *v113 + 4));
          do
          {
            unsigned __int16 v147 = v115;
            sub_1CD515EC8((uint64_t **)&v156, &v147);
            int v124 = *v123++;
            v115 += v124;
          }
          while (v124);
        }
      }
LABEL_216:
      if (++v113 != v114) {
        continue;
      }
      break;
    }
    unsigned int v113 = (unsigned __int16 *)v148;
LABEL_218:
    uint64_t v26 = v143;
    if (v113 != (unsigned __int16 *)&v150) {
      free(v113);
    }
    if (v99)
    {
LABEL_221:
      if ((*(unsigned char *)v99 & 4) != 0) {
        goto LABEL_225;
      }
    }
    while ((*(_WORD *)(v99 + 44) & 8) != 0)
      uint64_t v99 = *(void *)(v99 + 8);
LABEL_225:
    uint64_t v99 = *(void *)(v99 + 8);
    if (v99 != v98) {
      continue;
    }
    break;
  }
LABEL_226:
  sub_1CC2BD4C4(a1, v11, v26, (unsigned char **)v139, (unsigned __int16 **)&v156);
  if (v146 != (void *)(*v146 & 0xFFFFFFFFFFFFFFF8) && v98 == (void)v146)
  {
    unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v141);
    unint64_t v127 = llvm::MachineBasicBlock::getFirstTerminator(v142);
    if (v26 == FirstTerminator) {
      char v128 = 0;
    }
    else {
      char v128 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 560) + 768))(*(void *)(a1 + 560), FirstTerminator);
    }
    if (v146 == (void *)v127)
    {
      unint64_t v98 = (unint64_t)v142 + 48;
    }
    else if (((*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 560) + 768))(*(void *)(a1 + 560), v127) & 1) != 0|| (v128 & 1) == 0 && (*(_WORD *)v140 & 0x10) != 0)
    {
      unint64_t v98 = (unint64_t)v142 + 48;
    }
    else
    {
      unint64_t v98 = *v146 & 0xFFFFFFFFFFFFFFF8;
      if (!v98 || (*(unsigned char *)v98 & 4) == 0)
      {
        while ((*(_WORD *)(v98 + 44) & 4) != 0)
          unint64_t v98 = *(void *)v98 & 0xFFFFFFFFFFFFFFF8;
      }
    }
  }
  sub_1CC2BD4C4(a1, v140, v98, (unsigned char **)v138, 0);
  sub_1CC2BD6E4(a1, a2, v11, a10);
  sub_1CC2BD6E4(a1, a2, v140, a10);
  sub_1CD40B1BC(v154);
  if (v151 != v153) {
    free(v151);
  }
  sub_1CD40B1BC(v159);
  if (v156 != v158) {
    free(v156);
  }
  if (v161[0] != v162) {
    free(v161[0]);
  }
  return 1;
}

uint64_t sub_1CC2BF094()
{
  unsigned int v3 = &v2;
  int v1 = 1;
  int v2 = -1;
  sub_1CD51609C(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCCC5B8, &dword_1CB82C000);
  int v1 = 1;
  int v2 = -1;
  unsigned int v3 = &v2;
  sub_1CD5161BC((uint64_t)&unk_1EBCCC678, "ifcvt-fn-stop", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCCC678, &dword_1CB82C000);
  int v1 = 1;
  int v2 = -1;
  unsigned int v3 = &v2;
  sub_1CD5162D8(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCCC738, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  unsigned int v3 = &v1;
  int v2 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCCC7F8, "disable-ifcvt-simple", (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCC7F8, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  unsigned int v3 = &v1;
  int v2 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCCC8B8, "disable-ifcvt-simple-false", (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCC8B8, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  unsigned int v3 = &v1;
  int v2 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCCC978, "disable-ifcvt-triangle", (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCC978, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  unsigned int v3 = &v1;
  int v2 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCCCA38, "disable-ifcvt-triangle-rev", (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCCA38, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  unsigned int v3 = &v1;
  int v2 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCCCAF8, "disable-ifcvt-triangle-false", (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCCAF8, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  unsigned int v3 = &v1;
  int v2 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCCCBB8, "disable-ifcvt-triangle-false-rev", (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCCBB8, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  unsigned int v3 = &v1;
  int v2 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCCCC78, "disable-ifcvt-diamond", (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCCC78, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  unsigned int v3 = &v1;
  int v2 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCCCD38, "disable-ifcvt-forked-diamond", (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCCD38, &dword_1CB82C000);
  LOBYTE(v1) = 1;
  unsigned int v3 = &v1;
  int v2 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCCCDF8, "ifcvt-branch-fold", (unsigned char **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCCDF8, &dword_1CB82C000);
}

void sub_1CC2BF384(llvm *a1, llvm::PassRegistry *a2)
{
}

void sub_1CC2BF420()
{
}

void sub_1CC2BF544(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unsigned int v5 = a1;
    free(v2);
    a1 = v5;
  }
  unsigned int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    BOOL v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC2BF5F8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2BF6A4(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

BOOL sub_1CC2BF6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v324[8] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v4 = *(void *)(**(void **)(a2 + 40) + 16);
  *(void *)(v3 + 256) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  *(void *)(v3 + 272) = *(void *)(a2 + 56);
  unsigned int v5 = *(uint64_t **)(v3 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_4:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::AAResultsWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  *(void *)(v3 + 264) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::AAResultsWrapperPass::ID)+ 32);
  unsigned int v319 = v321;
  uint64_t v320 = 0x1000000000;
  uint64_t v9 = (void *)(a2 + 320);
  uint64_t v10 = *(void **)(a2 + 328);
  if (v10 == v9)
  {
    int v272 = 0;
    return v272 != 0;
  }
  uint64_t v11 = (unsigned __int8 *)v324;
  uint64_t v12 = v318;
  uint64_t v299 = v3;
  do
  {
    uint64_t v13 = v10[2];
    if (!v13) {
      goto LABEL_342;
    }
    uint64_t v14 = *(void *)(v13 + 40);
    if (v14 == v13 + 40)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v15 = v14 - 24;
      if (!v14) {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(unsigned __int8 *)(v15 + 16) - 29 >= 0xB ? 0 : (uint64_t ***)v15;
    }
    if ((*((unsigned char *)v16 + 23) & 0x20) == 0) {
      goto LABEL_342;
    }
    uint64_t v17 = ***v16;
    *(void *)&long long v300 = v16;
    int v18 = *(_DWORD *)(v17 + 2496);
    if (v18)
    {
      uint64_t v19 = *(void *)(v17 + 2480);
      int v20 = v18 - 1;
      unsigned int v21 = v20 & ((v16 >> 4) ^ (v16 >> 9));
      unsigned __int16 v22 = (uint64_t ****)(v19 + 40 * v21);
      uint64_t v23 = *v22;
      if (*v22 == v16) {
        goto LABEL_27;
      }
      uint64_t v24 = 0;
      int v25 = 1;
      while (v23 != (uint64_t ***)-4096)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == (uint64_t ***)-8192;
        }
        if (v26) {
          uint64_t v24 = v22;
        }
        unsigned int v27 = v21 + v25++;
        unsigned int v21 = v27 & v20;
        unsigned __int16 v22 = (uint64_t ****)(v19 + 40 * v21);
        uint64_t v23 = *v22;
        if (*v22 == v16) {
          goto LABEL_27;
        }
      }
      if (v24) {
        BOOL v35 = v24;
      }
      else {
        BOOL v35 = v22;
      }
    }
    else
    {
      BOOL v35 = 0;
    }
    unsigned __int16 v22 = (uint64_t ****)sub_1CC609054(v17 + 2480, (uint64_t)&v300, (uint64_t *)&v300, v35);
    uint64_t v36 = (uint64_t ***)v300;
    v22[4] = 0;
    v22[3] = 0;
    unsigned char *v22 = v36;
    v22[1] = (uint64_t ***)(v22 + 3);
    v22[2] = (uint64_t ***)0x100000000;
LABEL_27:
    uint64_t v28 = *((unsigned int *)v22 + 4);
    if (!v28) {
      goto LABEL_342;
    }
    uint64_t v29 = v22[1] + 1;
    uint64_t v30 = 16 * v28;
    while (*((_DWORD *)v29 - 2) != 14)
    {
      v29 += 2;
      v30 -= 16;
      if (!v30) {
        goto LABEL_342;
      }
    }
    if (!*v29) {
      goto LABEL_342;
    }
    LODWORD(v300) = 2;
    DWORD2(v300) = DWORD2(v300) & 0xFFF00000 | 1;
    long long v301 = 0uLL;
    unsigned int v302 = v302 & 0xFFF00000 | 1;
    uint64_t v303 = 0;
    uint64_t v304 = 0;
    uint64_t v306 = 0;
    uint64_t v307 = 0;
    uint64_t v305 = 0;
    char v308 = 0;
    if ((*(uint64_t (**)(void))(**(void **)(v3 + 248) + 256))()) {
      goto LABEL_341;
    }
    if (BYTE8(v300)) {
      goto LABEL_341;
    }
    if (v302 != 1) {
      goto LABEL_341;
    }
    if (v304) {
      goto LABEL_341;
    }
    if (v300 > 1) {
      goto LABEL_341;
    }
    uint64_t v31 = v307;
    if (v307)
    {
      if (!v308) {
        goto LABEL_341;
      }
    }
    uint64_t v32 = v300 == 1 ? v305 : v306;
    uint64_t v33 = v300 == 1 ? v306 : v305;
    uint64_t v295 = v33;
    uint64_t v296 = v32;
    if (((*(void *)(v32 + 72) - *(void *)(v32 + 64)) & 0x7FFFFFFF8) != 8) {
      goto LABEL_341;
    }
    uint64_t v297 = HIDWORD(v300);
    if (v307)
    {
      unint64_t v34 = v10[6] & 0xFFFFFFFFFFFFFFF8;
      if (!v34 || (*(unsigned char *)v34 & 4) == 0)
      {
        while ((*(_WORD *)(v34 + 44) & 4) != 0)
          unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
      }
      while (v31 != v34)
      {
        if (llvm::MachineInstr::findRegisterDefOperandIdx(v34, v297, 0, 1, *(void *)(v299 + 256)) != -1) {
          goto LABEL_341;
        }
        unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
        if (!v34 || (*(unsigned char *)v34 & 4) == 0)
        {
          while ((*(_WORD *)(v34 + 44) & 4) != 0)
            unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v31 = v307;
      }
    }
    uint64_t v293 = v11;
    v294 = v12;
    uint64_t v322 = v11;
    uint64_t v323 = 0x800000000;
    uint64_t v37 = *(void *)(v296 + 56);
    if (v37 == v296 + 48) {
      goto LABEL_338;
    }
    unsigned int v38 = 0;
    do
    {
      __int16 v39 = *(_WORD *)(v37 + 44);
      BOOL v40 = (v39 & 0xC) == 0 || (v39 & 4) != 0;
      unsigned int v41 = *(unsigned __int16 **)(v37 + 16);
      uint64_t v42 = *((void *)v41 + 1);
      if (v40)
      {
        if ((v42 & 0x80) != 0) {
          break;
        }
        if ((v42 & 0x200000) == 0)
        {
LABEL_85:
          if ((v42 & 0x1000000) != 0) {
            break;
          }
          goto LABEL_86;
        }
LABEL_83:
        if ((*(_WORD *)(v37 + 44) & 0x4000) == 0) {
          break;
        }
        goto LABEL_84;
      }
      uint64_t v43 = v37;
      if ((v42 & 0x80) != 0) {
        break;
      }
      while ((*(_WORD *)(v43 + 44) & 8) != 0)
      {
        uint64_t v43 = *(void *)(v43 + 8);
        if ((*(unsigned char *)(*(void *)(v43 + 16) + 8) & 0x80) != 0) {
          goto LABEL_338;
        }
      }
      uint64_t v44 = v37;
      if ((v42 & 0x200000) != 0) {
        goto LABEL_83;
      }
      while ((*(_WORD *)(v44 + 44) & 8) != 0)
      {
        uint64_t v44 = *(void *)(v44 + 8);
        if ((*(unsigned char *)(*(void *)(v44 + 16) + 10) & 0x20) != 0) {
          goto LABEL_83;
        }
      }
LABEL_84:
      if (v40) {
        goto LABEL_85;
      }
      uint64_t v138 = v37;
      if ((v42 & 0x1000000) != 0) {
        break;
      }
      while ((*(_WORD *)(v138 + 44) & 8) != 0)
      {
        uint64_t v138 = *(void *)(v138 + 8);
        if (*(unsigned char *)(*(void *)(v138 + 16) + 11)) {
          goto LABEL_338;
        }
      }
LABEL_86:
      if *v41 - 1 <= 1 && (*(unsigned char *)(*(void *)(v37 + 32) + 48)) {
        break;
      }
      uint64_t v46 = (unint64_t *)(v37 + 48);
      unint64_t v45 = *(void *)(v37 + 48);
      if (v45 < 8) {
        goto LABEL_99;
      }
      if ((v45 & 7) == 0)
      {
        *(void *)(v37 + 48) = v45 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v52 = v37 + 56;
        uint64_t v49 = (int *)(v37 + 48);
        goto LABEL_96;
      }
      uint64_t v47 = (int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      if ((*(void *)(v37 + 48) & 7) == 3 && v47 != 0)
      {
        uint64_t v51 = *v47;
        uint64_t v49 = v47 + 2;
        uint64_t v50 = v51;
        if (v51)
        {
          uint64_t v52 = (uint64_t)&v49[2 * v50];
          do
          {
LABEL_96:
            if ((*(_WORD *)(*(void *)v49 + 36) & 0xE00) != 0 || (*(_WORD *)(*(void *)v49 + 32) & 4) != 0) {
              goto LABEL_338;
            }
            v49 += 2;
          }
          while (v49 != (int *)v52);
        }
      }
LABEL_99:
      if (v38 >= dword_1EBCCD000) {
        break;
      }
      if (*((unsigned __int8 *)v41 + 4) > 1u) {
        goto LABEL_278;
      }
      unsigned int v53 = *v41 - 1;
      if (v53 <= 1 && (*(unsigned char *)(*(void *)(v37 + 32) + 48) & 8) != 0) {
        goto LABEL_304;
      }
      uint64_t v54 = *((void *)v41 + 1);
      if (v40)
      {
        if ((v54 & 0x80000) != 0) {
          goto LABEL_107;
        }
      }
      else
      {
        uint64_t v139 = v37;
        if ((v54 & 0x80000) != 0) {
          goto LABEL_305;
        }
        while ((*(_WORD *)(v139 + 44) & 8) != 0)
        {
          uint64_t v139 = *(void *)(v139 + 8);
          if ((*(unsigned char *)(*(void *)(v139 + 16) + 10) & 8) != 0) {
            goto LABEL_304;
          }
        }
      }
      if (v53 <= 1 && (*(unsigned char *)(*(void *)(v37 + 32) + 48) & 0x10) != 0) {
        goto LABEL_304;
      }
      if (v40)
      {
        if ((v54 & 0x100000) == 0) {
          goto LABEL_278;
        }
LABEL_107:
        if ((v41[5] & 0x40) != 0) {
          goto LABEL_278;
        }
        goto LABEL_108;
      }
      uint64_t v141 = v37;
      if ((v54 & 0x100000) == 0)
      {
        do
        {
          if ((*(_WORD *)(v141 + 44) & 8) == 0) {
            goto LABEL_278;
          }
          uint64_t v141 = *(void *)(v141 + 8);
        }
        while ((*(unsigned char *)(*(void *)(v141 + 16) + 10) & 0x10) == 0);
LABEL_304:
        if (v40) {
          goto LABEL_107;
        }
      }
LABEL_305:
      uint64_t v140 = v37;
      while ((v41[5] & 0x40) != 0 || *v41 == 20)
      {
        if ((*(_WORD *)(v140 + 44) & 8) == 0) {
          goto LABEL_278;
        }
        uint64_t v140 = *(void *)(v140 + 8);
        unsigned int v41 = *(unsigned __int16 **)(v140 + 16);
      }
LABEL_108:
      int v289 = v322;
      (*(void (**)(void *__return_ptr))(**(void **)(v299 + 248) + 696))(v311);
      if (!v312) {
        goto LABEL_278;
      }
      uint64_t v282 = v311[1];
      uint64_t v310 = v311[2];
      uint64_t v291 = HIDWORD(v311[0]);
      if (v297 != LODWORD(v311[0]) && v297 != HIDWORD(v311[0])) {
        goto LABEL_278;
      }
      uint64_t v283 = *(void *)(*(void *)(*(void *)(v37 + 24) + 32) + 40);
      unsigned int v287 = v311[0];
      int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(v299 + 256), v297, v283);
      unsigned int v57 = v287;
      int v280 = RegSizeInBits;
      if (v287)
      {
        int v58 = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(v299 + 256), v287, v283);
        unsigned int v57 = v287;
        if (v58 != v280) {
          goto LABEL_278;
        }
      }
      if (v291)
      {
        int v59 = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(v299 + 256), v291, v283);
        unsigned int v57 = v287;
        if (v59 != v280) {
          goto LABEL_278;
        }
      }
      v309[0] = v37;
      v309[1] = v299;
      v309[2] = v283;
      v309[3] = &v310;
      BOOL v284 = sub_1CC2C12B0((uint64_t)v309, v57, 1);
      BOOL v60 = sub_1CC2C12B0((uint64_t)v309, v291, v282);
      if (v287)
      {
        if (v297 != v287 && !v284) {
          goto LABEL_278;
        }
      }
      BOOL v61 = !v291 || v297 == v291;
      int v62 = v61 || v60;
      if (v62 != 1 || v310 <= -(uint64_t)dword_1EBCCCF40 || v310 >= dword_1EBCCCF40) {
        goto LABEL_278;
      }
      uint64_t v63 = v289;
      if (!v38)
      {
LABEL_226:
        uint64_t v101 = v322;
        sub_1CC2C16A4((BOOL)&v316, v299, v37, (uint64_t)v322, v323);
        if (!(_BYTE)v316) {
          goto LABEL_278;
        }
        if (LOBYTE(v318[0]))
        {
          uint64_t v102 = *(void *)v317;
          unsigned int v103 = *(unsigned __int16 **)(*(void *)v317 + 16);
          unsigned int v104 = *v103 - 1;
          if (v104 <= 1 && (*(unsigned char *)(*(void *)(v102 + 32) + 48) & 8) != 0) {
            goto LABEL_278;
          }
          unsigned int v105 = *(unsigned __int16 *)(v102 + 44);
          BOOL v26 = (v105 & 0xC) == 0;
          int v106 = (v105 >> 2) & 1;
          if (v26) {
            LOBYTE(v106) = 1;
          }
          uint64_t v107 = *((void *)v103 + 1);
          if (v106)
          {
            if ((v107 & 0x80000) != 0) {
              goto LABEL_278;
            }
          }
          else
          {
            uint64_t v142 = *(void *)v317;
            if ((v107 & 0x80000) != 0) {
              goto LABEL_278;
            }
            while ((*(_WORD *)(v142 + 44) & 8) != 0)
            {
              uint64_t v142 = *(void *)(v142 + 8);
              if ((*(unsigned char *)(*(void *)(v142 + 16) + 10) & 8) != 0) {
                goto LABEL_278;
              }
            }
          }
          if (v104 <= 1 && (*(unsigned char *)(*(void *)(v102 + 32) + 48) & 0x10) != 0) {
            goto LABEL_278;
          }
          if (v106)
          {
            if ((v107 & 0x100000) != 0) {
              goto LABEL_278;
            }
          }
          else
          {
            uint64_t v143 = *(void *)v317;
            if ((v107 & 0x100000) != 0) {
              goto LABEL_278;
            }
            while ((*(_WORD *)(v143 + 44) & 8) != 0)
            {
              uint64_t v143 = *(void *)(v143 + 8);
              if ((*(unsigned char *)(*(void *)(v143 + 16) + 10) & 0x10) != 0) {
                goto LABEL_278;
              }
            }
          }
          uint64_t v108 = *(unsigned int *)(v102 + 40);
          if (v108)
          {
            uint64_t v109 = *(void *)(v102 + 32);
            uint64_t v110 = v109 + 32 * v108;
            while (1)
            {
              if (!*(unsigned char *)v109)
              {
                unsigned int v111 = *(_DWORD *)(v109 + 4);
                if (v111) {
                  break;
                }
              }
LABEL_240:
              v109 += 32;
              if (v109 == v110) {
                goto LABEL_288;
              }
            }
            uint64_t v112 = *(void *)(v299 + 256);
            if (v112) {
              unsigned int v113 = (uint64_t *)(v112 + 8);
            }
            else {
              unsigned int v113 = 0;
            }
            uint64_t v114 = *v113;
            int v115 = *(_DWORD *)(*v113 + 24 * v111 + 16) & 0xF;
            unint64_t v116 = ((unint64_t)*(unsigned int *)(*v113 + 24 * v111 + 16) >> 3) & 0x1FFFFFFE;
            uint64_t v119 = v113 + 5;
            uint64_t v118 = v113[5];
            uint64_t v117 = v119[1];
            uint64_t v120 = (unsigned __int16 *)(v117 + v116);
            int v122 = *v120;
            BOOL v121 = v120 + 1;
            int v123 = v122 + v115 * v111;
            while (1)
            {
              uint64_t v124 = *(unsigned __int16 *)(v118 + 4 * (unsigned __int16)v123);
              if (*(_WORD *)(v118 + 4 * (unsigned __int16)v123) && v117 != 0) {
                break;
              }
              int v126 = (unsigned __int16)*v121++;
              v123 += v126;
              if (!v126) {
                goto LABEL_240;
              }
            }
            unsigned int v127 = *(unsigned __int16 *)(v118 + 4 * (unsigned __int16)v123 + 2) << 16;
            char v128 = *(unsigned __int16 **)(v295 + 160);
LABEL_254:
            __int16 v129 = (unsigned __int16 *)(v117 + 2 * *(unsigned int *)(v114 + 24 * v124 + 8));
            while (1)
            {
              if (*(unsigned __int16 **)(v295 + 152) != v128)
              {
                int v130 = *(unsigned __int16 **)(v295 + 152);
                while (*v130 != (unsigned __int16)v124)
                {
                  v130 += 8;
                  if (v130 == v128) {
                    goto LABEL_259;
                  }
                }
                if (*((void *)v130 + 1)) {
                  goto LABEL_278;
                }
              }
LABEL_259:
              int v131 = *v129++;
              LOWORD(v124) = v131 + v124;
              if (!v131)
              {
                uint64_t v124 = HIWORD(v127);
                if (v124)
                {
                  v127 >>= 16;
                }
                else
                {
                  if (!*v121) {
                    goto LABEL_240;
                  }
                  v123 += (unsigned __int16)*v121++;
                  int v132 = (unsigned __int16 *)(v118 + 4 * (unsigned __int16)v123);
                  uint64_t v124 = *v132;
                  unsigned int v127 = v132[1] << 16;
                }
                goto LABEL_254;
              }
            }
          }
LABEL_288:
          sub_1CC2C16A4((BOOL)v313, v299, *(void *)v317, (uint64_t)v101, (v317 - (uint64_t)v101) >> 3);
          if (!LOBYTE(v313[0]) || (_BYTE)v314) {
            goto LABEL_278;
          }
        }
        else
        {
          uint64_t v102 = 0;
        }
        int v144 = v320;
        if (v320 >= HIDWORD(v320))
        {
          uint64_t v316 = (unsigned __int8 *)v37;
          uint64_t v317 = v307;
          v318[0] = v10;
          v318[1] = v296;
          v318[2] = v295;
          v318[3] = v102;
          if (v319 > &v316 || (char *)v319 + 48 * v320 <= (char *)&v316) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v145 = v307;
        uint64_t v146 = (uint64_t *)((char *)v319 + 48 * v320);
        uint64_t *v146 = v37;
        v146[1] = v145;
        uint64_t v146[2] = (uint64_t)v10;
        v146[3] = v296;
        v146[4] = v295;
        v146[5] = v102;
        LODWORD(v320) = v144 + 1;
        break;
      }
      v279 = &v289[8 * v38];
      while (1)
      {
        unint64_t v290 = v63;
        uint64_t v64 = *(void *)v63;
        unint64_t v65 = *(unsigned __int16 **)(*(void *)v63 + 16);
        unsigned int v66 = *v65 - 1;
        if (v66 > 1 || (*(unsigned char *)(*(void *)(v64 + 32) + 48) & 0x10) == 0)
        {
          unsigned int v67 = *(unsigned __int16 *)(v64 + 44);
          BOOL v26 = (v67 & 0xC) == 0;
          int v68 = (v67 >> 2) & 1;
          if (v26) {
            char v69 = 1;
          }
          else {
            char v69 = v68;
          }
          uint64_t v70 = *((void *)v65 + 1);
          if (v69)
          {
            if ((v70 & 0x100000) != 0) {
              goto LABEL_141;
            }
          }
          else
          {
            uint64_t v97 = v64;
            if ((v70 & 0x100000) != 0) {
              goto LABEL_141;
            }
            while ((*(_WORD *)(v97 + 44) & 8) != 0)
            {
              uint64_t v97 = *(void *)(v97 + 8);
              if ((*(unsigned char *)(*(void *)(v97 + 16) + 10) & 0x10) != 0) {
                goto LABEL_141;
              }
            }
          }
          if (v66 > 1 || (*(unsigned char *)(*(void *)(v64 + 32) + 48) & 8) == 0)
          {
            if (v69)
            {
              if ((v70 & 0x80000) == 0) {
                goto LABEL_200;
              }
            }
            else
            {
              uint64_t v99 = v64;
              if ((v70 & 0x80000) == 0)
              {
                while ((*(_WORD *)(v99 + 44) & 8) != 0)
                {
                  uint64_t v99 = *(void *)(v99 + 8);
                  if ((*(unsigned char *)(*(void *)(v99 + 16) + 10) & 8) != 0) {
                    goto LABEL_141;
                  }
                }
                goto LABEL_200;
              }
            }
          }
        }
LABEL_141:
        BOOL v71 = *(unsigned __int16 **)(v37 + 16);
        unsigned int v72 = *v71 - 1;
        if (v72 > 1 || (*(unsigned char *)(*(void *)(v37 + 32) + 48) & 0x10) == 0)
        {
          uint64_t v73 = *((void *)v71 + 1);
          if ((*(_WORD *)(v37 + 44) & 0xC) != 0 && (*(_WORD *)(v37 + 44) & 4) == 0)
          {
            uint64_t v98 = v37;
            if ((v73 & 0x100000) != 0) {
              goto LABEL_153;
            }
            while ((*(_WORD *)(v98 + 44) & 8) != 0)
            {
              uint64_t v98 = *(void *)(v98 + 8);
              if ((*(unsigned char *)(*(void *)(v98 + 16) + 10) & 0x10) != 0) {
                goto LABEL_153;
              }
            }
          }
          else if ((v73 & 0x100000) != 0)
          {
            goto LABEL_153;
          }
          if (v66 > 1 || (*(unsigned char *)(*(void *)(v64 + 32) + 48) & 0x10) == 0)
          {
            uint64_t v75 = *((void *)v65 + 1);
            if ((*(_WORD *)(v64 + 44) & 0xC) != 0 && (*(_WORD *)(v64 + 44) & 4) == 0)
            {
              uint64_t v100 = v64;
              if ((v75 & 0x100000) == 0)
              {
                while ((*(_WORD *)(v100 + 44) & 8) != 0)
                {
                  uint64_t v100 = *(void *)(v100 + 8);
                  if ((*(unsigned char *)(*(void *)(v100 + 16) + 10) & 0x10) != 0) {
                    goto LABEL_153;
                  }
                }
                goto LABEL_200;
              }
            }
            else if ((v75 & 0x100000) == 0)
            {
              goto LABEL_200;
            }
          }
        }
LABEL_153:
        unint64_t v77 = *v46;
        if (*v46 < 8) {
          goto LABEL_267;
        }
        if ((v77 & 7) != 0)
        {
          uint64_t v78 = (_DWORD *)(v77 & 0xFFFFFFFFFFFFFFF8);
          BOOL v79 = (*v46 & 7) != 3 || v78 == 0;
          if (v79 || !*v78)
          {
LABEL_267:
            if (v72 <= 1 && (*(unsigned char *)(*(void *)(v37 + 32) + 48) & 0x10) != 0) {
              goto LABEL_338;
            }
            __int16 v133 = *(_WORD *)(v37 + 44);
            uint64_t v134 = *((void *)v71 + 1);
            if ((v133 & 0xC) != 0 && (v133 & 4) == 0)
            {
              uint64_t v135 = v37;
              if ((v134 & 0x100000) != 0) {
                goto LABEL_338;
              }
              while ((*(_WORD *)(v135 + 44) & 8) != 0)
              {
                uint64_t v135 = *(void *)(v135 + 8);
                if ((*(unsigned char *)(*(void *)(v135 + 16) + 10) & 0x10) != 0) {
                  goto LABEL_338;
                }
              }
              goto LABEL_278;
            }
LABEL_277:
            if ((v134 & 0x100000) != 0) {
              goto LABEL_338;
            }
            goto LABEL_278;
          }
        }
        else
        {
          v77 &= 0xFFFFFFFFFFFFFFF8;
          *uint64_t v46 = v77;
        }
        unint64_t v80 = *(void *)(v64 + 48);
        uint64_t v281 = (unint64_t *)(v64 + 48);
        if (v80 < 8) {
          break;
        }
        if ((v80 & 7) == 0)
        {
          *uint64_t v281 = v80 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v77 = *v46;
          goto LABEL_169;
        }
        if ((*(void *)(v64 + 48) & 7) != 3) {
          break;
        }
        uint64_t v81 = (_DWORD *)(v80 & 0xFFFFFFFFFFFFFFF8);
        if (!v81 || !*v81) {
          break;
        }
LABEL_169:
        if (v77 >= 8)
        {
          if ((v77 & 7) == 0)
          {
            *uint64_t v46 = v77 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v278 = (uint64_t *)(v37 + 56);
            unint64_t v286 = (uint64_t *)(v37 + 48);
            goto LABEL_176;
          }
          if ((v77 & 7) == 3)
          {
            unsigned int v285 = (int *)(v77 & 0xFFFFFFFFFFFFFFF8);
            if ((v77 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v82 = *v285;
              unint64_t v286 = (uint64_t *)(v285 + 2);
              if (v82)
              {
                unint64_t v278 = &v286[v82];
LABEL_176:
                unint64_t v277 = (unint64_t *)(v64 + 56);
                do
                {
                  unint64_t v83 = *v281;
                  if (*v281 >= 8)
                  {
                    uint64_t v288 = *v286;
                    if ((v83 & 7) == 0)
                    {
                      uint64_t v87 = v281;
                      *uint64_t v281 = v83 & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v89 = v277;
                      goto LABEL_186;
                    }
                    uint64_t v84 = (int *)(v83 & 0xFFFFFFFFFFFFFFF8);
                    if ((*v281 & 7) == 3 && v84 != 0)
                    {
                      uint64_t v88 = *v84;
                      uint64_t v87 = (unint64_t *)(v84 + 2);
                      uint64_t v86 = v88;
                      if (v88)
                      {
                        unint64_t v89 = &v87[v86];
LABEL_186:
                        v292 = v89;
                        do
                        {
                          uint64_t v90 = (void *)*v87;
                          uint64_t v91 = *(void *)*v87;
                          if ((v91 & 4) != 0 && (v91 & 0xFFFFFFFFFFFFFFF8) != 0)
                          {
                            if (((*(uint64_t (**)(unint64_t, void))(*(void *)(v91 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 40))(v91 & 0xFFFFFFFFFFFFFFF8, *(void *)(v299 + 272)) & 1) != 0)goto LABEL_278;
                          }
                          else
                          {
                            uint64_t v92 = *(void *)(v299 + 264);
                            if ((*(void *)v288 & 4) != 0) {
                              unint64_t v93 = 0;
                            }
                            else {
                              unint64_t v93 = *(void *)v288 & 0xFFFFFFFFFFFFFFF8;
                            }
                            uint64_t v316 = (unsigned __int8 *)v93;
                            uint64_t v317 = -2;
                            long long v94 = *(_OWORD *)(v288 + 56);
                            _OWORD *v294 = *(_OWORD *)(v288 + 40);
                            v294[1] = v94;
                            if ((*v90 & 4) != 0) {
                              unint64_t v95 = 0;
                            }
                            else {
                              unint64_t v95 = *v90 & 0xFFFFFFFFFFFFFFF8;
                            }
                            v313[0] = v95;
                            v313[1] = -2;
                            long long v96 = *(_OWORD *)(v90 + 7);
                            long long v314 = *(_OWORD *)(v90 + 5);
                            long long v315 = v96;
                            if (llvm::AAResults::alias(v92, (uint64_t)&v316, (uint64_t)v313)) {
                              goto LABEL_278;
                            }
                          }
                          ++v87;
                        }
                        while (v87 != v292);
                      }
                    }
                  }
                  ++v286;
                }
                while (v286 != v278);
              }
            }
          }
        }
LABEL_200:
        uint64_t v63 = v290 + 8;
        if (v290 + 8 == v279) {
          goto LABEL_226;
        }
      }
      uint64_t v136 = *(unsigned __int16 **)(v64 + 16);
      if (*v136 - 1 <= 1 && (*(unsigned char *)(*(void *)(v64 + 32) + 48) & 0x10) != 0) {
        break;
      }
      __int16 v137 = *(_WORD *)(v64 + 44);
      uint64_t v134 = *((void *)v136 + 1);
      if ((v137 & 0xC) == 0 || (v137 & 4) != 0) {
        goto LABEL_277;
      }
      if ((v134 & 0x100000) != 0) {
        break;
      }
      while ((*(_WORD *)(v64 + 44) & 8) != 0)
      {
        uint64_t v64 = *(void *)(v64 + 8);
        if ((*(unsigned char *)(*(void *)(v64 + 16) + 10) & 0x10) != 0) {
          goto LABEL_338;
        }
      }
LABEL_278:
      if (!(*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v299 + 248) + 704))(*(void *)(v299 + 248), v37, v297, *(void *)(v299 + 256)))break; {
      if (v323 >= (unint64_t)HIDWORD(v323))
      }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      *(void *)&v322[8 * v323] = v37;
      unsigned int v38 = v323 + 1;
      LODWORD(v323) = v323 + 1;
      if (!v37 || (*(unsigned char *)v37 & 4) == 0)
      {
        while ((*(_WORD *)(v37 + 44) & 8) != 0)
          uint64_t v37 = *(void *)(v37 + 8);
      }
      uint64_t v37 = *(void *)(v37 + 8);
    }
    while (v37 != v296 + 48);
LABEL_338:
    uint64_t v11 = v293;
    if (v322 != v293) {
      free(v322);
    }
    uint64_t v12 = v294;
LABEL_341:
    uint64_t v3 = v299;
LABEL_342:
    uint64_t v10 = (void *)v10[1];
  }
  while (v10 != v9);
  unsigned __int16 v147 = (char *)v319;
  if (!v320)
  {
    int v272 = 0;
    goto LABEL_560;
  }
  v313[0] = 0;
  uint64_t v298 = (char *)v319 + 48 * v320;
  while (2)
  {
    (*(void (**)(void, void, void))(**(void **)(v3 + 248) + 264))(*(void *)(v3 + 248), *((void *)v147 + 2), 0);
    uint64_t v148 = *((void *)v147 + 5);
    if (v148)
    {
      uint64_t v149 = *(void *)(*(void *)(v148 + 24) + 32);
      if (v149)
      {
        uint64_t v150 = *(void *)(v149 + 728);
        if (v150) {
          (*(void (**)(uint64_t, void))(*(void *)v150 + 32))(v150, *((void *)v147 + 5));
        }
        uint64_t v151 = *(unsigned int *)(v148 + 40);
        if (v151)
        {
          uint64_t v152 = *(void *)(v148 + 32);
          uint64_t v153 = *(void *)(v149 + 40);
          uint64_t v154 = 32 * v151;
          do
          {
            if (!*(unsigned char *)v152)
            {
              uint64_t v155 = *(unsigned int *)(v152 + 4);
              if ((v155 & 0x80000000) != 0) {
                uint64_t v156 = (uint64_t *)(*(void *)(v153 + 24) + 16 * (v155 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v156 = (uint64_t *)(*(void *)(v153 + 272) + 8 * v155);
              }
              uint64_t v157 = *v156;
              uint64_t v159 = *(void *)(v152 + 16);
              uint64_t v158 = *(void *)(v152 + 24);
              if (v152 != *v156) {
                uint64_t v156 = (uint64_t *)(v159 + 24);
              }
              *uint64_t v156 = v158;
              if (v158) {
                uint64_t v160 = v158;
              }
              else {
                uint64_t v160 = v157;
              }
              *(void *)(v160 + 16) = v159;
              *(void *)(v152 + 16) = 0;
              *(void *)(v152 + 24) = 0;
            }
            v152 += 32;
            v154 -= 32;
          }
          while (v154);
        }
      }
      uint64_t v161 = *(unint64_t **)(v148 + 8);
      unint64_t v162 = *(void *)v148 & 0xFFFFFFFFFFFFFFF8;
      *uint64_t v161 = v162 | *v161 & 7;
      *(void *)(v162 + 8) = v161;
      *(void *)v148 &= 7uLL;
      *(void *)(v148 + 8) = 0;
      uint64_t v163 = *((void *)v147 + 2);
      uint64_t v164 = *(void *)(v163 + 40);
      *(void *)(v148 + 24) = v164;
      uint64_t v165 = *(void *)(v164 + 32);
      uint64_t v166 = *(unsigned int *)(v148 + 40);
      if (v166)
      {
        uint64_t v180 = *(void *)(v148 + 32);
        uint64_t v181 = *(void *)(v165 + 40);
        uint64_t v182 = 32 * v166;
        do
        {
          if (!*(unsigned char *)v180)
          {
            uint64_t v183 = *(unsigned int *)(v180 + 4);
            if ((int)v183 >= 0) {
              uint64_t v184 = (uint64_t *)(*(void *)(v181 + 272) + 8 * v183);
            }
            else {
              uint64_t v184 = (uint64_t *)(*(void *)(v181 + 24) + 16 * (v183 & 0x7FFFFFFF) + 8);
            }
            uint64_t v185 = *v184;
            if (*v184)
            {
              uint64_t v186 = *(void *)(v185 + 16);
              *(void *)(v185 + 16) = v180;
              *(void *)(v180 + 16) = v186;
              if (*(unsigned char *)(v180 + 3))
              {
                *(void *)(v180 + 24) = v185;
              }
              else
              {
                *(void *)(v180 + 24) = 0;
                uint64_t v184 = (uint64_t *)(v186 + 24);
              }
            }
            else
            {
              *(void *)(v180 + 16) = v180;
              *(void *)(v180 + 24) = 0;
            }
            *uint64_t v184 = v180;
          }
          v180 += 32;
          v182 -= 32;
        }
        while (v182);
      }
      uint64_t v167 = *(void *)(v165 + 728);
      if (v167) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v167 + 24))(v167, v148);
      }
      unint64_t v168 = *(void *)(v163 + 48) & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v148 = v168 | *(void *)v148 & 7;
      *(void *)(v148 + 8) = v163 + 48;
      *(void *)(v168 + 8) = v148;
      *(void *)(v163 + 48) = *(void *)(v163 + 48) & 7 | v148;
    }
    uint64_t v169 = *(void *)v147;
    uint64_t v170 = (void *)*((void *)v147 + 2);
    uint64_t v171 = *((void *)v147 + 4);
    uint64_t v316 = 0;
    uint64_t v172 = *(unsigned __int16 **)(v169 + 16);
    if (*((unsigned char *)v172 + 4)) {
      int v173 = *(_DWORD *)(*(void *)(v169 + 32) + 4);
    }
    else {
      int v173 = 0;
    }
    unsigned int v174 = *v172 - 1;
    if (v174 > 1 || (uint64_t v187 = *(void *)(*(void *)(v169 + 32) + 48), (v187 & 8) == 0))
    {
      __int16 v175 = *(_WORD *)(v169 + 44);
      int v176 = v175 & 0xC;
      uint64_t v177 = *((void *)v172 + 1);
      if ((v175 & 0xC) != 0 && (v175 & 4) == 0)
      {
        uint64_t v188 = v169;
        if ((v177 & 0x80000) == 0)
        {
          while ((*(_WORD *)(v188 + 44) & 8) != 0)
          {
            uint64_t v188 = *(void *)(v188 + 8);
            uint64_t v3 = v299;
            if ((*(unsigned char *)(*(void *)(v188 + 16) + 10) & 8) != 0) {
              goto LABEL_400;
            }
          }
          uint64_t v179 = 3;
          goto LABEL_550;
        }
      }
      else if ((v177 & 0x80000) == 0)
      {
        uint64_t v179 = 3;
        goto LABEL_413;
      }
LABEL_400:
      if (v174 <= 1)
      {
        uint64_t v187 = *(void *)(*(void *)(v169 + 32) + 48);
        goto LABEL_407;
      }
LABEL_401:
      uint64_t v189 = *((void *)v172 + 1);
      if (!v176 || (v175 & 4) != 0)
      {
        if ((v189 & 0x100000) != 0) {
          goto LABEL_412;
        }
        uint64_t v179 = 1;
        goto LABEL_413;
      }
      uint64_t v190 = v169;
      if ((v189 & 0x100000) != 0) {
        goto LABEL_412;
      }
      while ((*(_WORD *)(v190 + 44) & 8) != 0)
      {
        uint64_t v190 = *(void *)(v190 + 8);
        uint64_t v3 = v299;
        if ((*(unsigned char *)(*(void *)(v190 + 16) + 10) & 0x10) != 0) {
          goto LABEL_412;
        }
      }
      uint64_t v179 = 1;
LABEL_550:
      uint64_t v3 = v299;
      goto LABEL_413;
    }
LABEL_407:
    if ((v187 & 0x10) == 0)
    {
      __int16 v175 = *(_WORD *)(v169 + 44);
      int v176 = v175 & 0xC;
      goto LABEL_401;
    }
LABEL_412:
    uint64_t v179 = 2;
LABEL_413:
    uint64_t v191 = *(void *)(*(void *)(v3 + 248) + 8) + 1584;
    unsigned int v192 = (llvm::MachineFunction *)v170[4];
    uint64_t v322 = 0;
    uint64_t v193 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v192, v191, &v322, 0);
    if (v322)
    {
      int v267 = *v322;
      if ((v267 - 4) > 0x1E)
      {
        if ((v267 - 3) >= 0xFFFFFFFE) {
          int v270 = v322;
        }
        else {
          int v270 = 0;
        }
        if ((v267 - 3) < 0xFFFFFFFE)
        {
          if (v267 == 3) {
            *((void *)v322 + 1) = 0;
          }
          goto LABEL_414;
        }
        unint64_t v269 = (unint64_t)(v270 + 8);
      }
      else
      {
        if ((v322[1] & 0x7F) != 2 && !*((_DWORD *)v322 + 3)) {
          goto LABEL_414;
        }
        uint64_t v268 = *((void *)v322 + 2);
        if ((v268 & 4) == 0) {
          goto LABEL_414;
        }
        unint64_t v269 = v268 & 0xFFFFFFFFFFFFFFF8;
        if (!v269) {
          goto LABEL_414;
        }
      }
      *(void *)&long long v300 = &v322;
      sub_1CC5FA668(v269 + 16, &v300);
    }
LABEL_414:
    uint64_t v194 = v170[5];
    *(void *)(v193 + 24) = v194;
    uint64_t v195 = *(void *)(v194 + 32);
    uint64_t v196 = *(unsigned int *)(v193 + 40);
    if (v196)
    {
      uint64_t v259 = *(void *)(v193 + 32);
      uint64_t v260 = *(void *)(v195 + 40);
      uint64_t v261 = 32 * v196;
      do
      {
        if (!*(unsigned char *)v259)
        {
          uint64_t v262 = *(unsigned int *)(v259 + 4);
          if ((int)v262 >= 0) {
            v263 = (uint64_t *)(*(void *)(v260 + 272) + 8 * v262);
          }
          else {
            v263 = (uint64_t *)(*(void *)(v260 + 24) + 16 * (v262 & 0x7FFFFFFF) + 8);
          }
          uint64_t v264 = *v263;
          if (*v263)
          {
            uint64_t v265 = *(void *)(v264 + 16);
            *(void *)(v264 + 16) = v259;
            *(void *)(v259 + 16) = v265;
            if (*(unsigned char *)(v259 + 3))
            {
              *(void *)(v259 + 24) = v264;
            }
            else
            {
              *(void *)(v259 + 24) = 0;
              v263 = (uint64_t *)(v265 + 24);
            }
          }
          else
          {
            *(void *)(v259 + 16) = v259;
            *(void *)(v259 + 24) = 0;
          }
          uint64_t *v263 = v259;
        }
        v259 += 32;
        v261 -= 32;
      }
      while (v261);
    }
    uint64_t v197 = *(void *)(v195 + 728);
    if (v197) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v197 + 24))(v197, v193);
    }
    unint64_t v198 = v170[6] & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v193 = v198 | *(void *)v193 & 7;
    *(void *)(v193 + 8) = v170 + 6;
    *(void *)(v198 + 8) = v193;
    v170[6] = v170[6] & 7 | v193;
    *((void *)&v300 + 1) = 0;
    long long v301 = 0uLL;
    LODWORD(v300) = 0x1000000;
    DWORD1(v300) = v173;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v193, v192, (const llvm::MachineOperand *)&v300);
    LODWORD(v300) = 1;
    *((void *)&v300 + 1) = 0;
    *(void *)&long long v301 = v179;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v193, v192, (const llvm::MachineOperand *)&v300);
    *((void *)&v300 + 1) = 0;
    *(void *)&long long v301 = v171;
    LODWORD(v300) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v193, v192, (const llvm::MachineOperand *)&v300);
    uint64_t v199 = **(unsigned __int16 **)(v169 + 16);
    LODWORD(v300) = 1;
    *((void *)&v300 + 1) = 0;
    *(void *)&long long v301 = v199;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v193, v192, (const llvm::MachineOperand *)&v300);
    uint64_t v200 = *(void *)(v169 + 32);
    uint64_t v201 = *(void *)(v169 + 16);
    unsigned int v202 = *(unsigned __int8 *)(v201 + 4);
    uint64_t v203 = *(unsigned int *)(v169 + 40);
    if ((*(unsigned char *)(v201 + 8) & 2) != 0)
    {
      if (v203 != v202)
      {
        unsigned int v204 = *(unsigned __int8 *)(v201 + 4);
        do
        {
          int v258 = *(_DWORD *)(v200 + 32 * v202);
          if ((v258 & 0x10000FF) != 0x1000000) {
            break;
          }
          v204 += (v258 & 0x2000000) == 0;
          if (v203 - 1 == v202) {
            break;
          }
          ++v202;
        }
        while ((v258 & 0x2000000) == 0);
        goto LABEL_419;
      }
    }
    else
    {
      unsigned int v204 = *(unsigned __int8 *)(v201 + 4);
LABEL_419:
      if (v204 != v203)
      {
        char v205 = (const llvm::MachineOperand *)(v200 + 32 * v204);
        uint64_t v206 = 32 * v203 - 32 * v204;
        do
        {
          if (*(unsigned char *)v205)
          {
            int v207 = (llvm::MachineInstr *)v193;
            uint64_t v208 = v192;
            unint64_t v209 = v205;
          }
          else
          {
            long long v210 = *((_OWORD *)v205 + 1);
            long long v300 = *(_OWORD *)v205;
            long long v301 = v210;
            LODWORD(v300) = v300 & 0xFBFFFFFF;
            unint64_t v209 = (const llvm::MachineOperand *)&v300;
            int v207 = (llvm::MachineInstr *)v193;
            uint64_t v208 = v192;
          }
          llvm::MachineInstr::addOperand(v207, v208, v209);
          char v205 = (const llvm::MachineOperand *)((char *)v205 + 32);
          v206 -= 32;
        }
        while (v206);
      }
    }
    unint64_t v213 = *(void *)(v169 + 48);
    uint64_t v212 = (unint64_t *)(v169 + 48);
    unint64_t v211 = v213;
    if (v213 < 8)
    {
      uint64_t v212 = 0;
      uint64_t v214 = 0;
    }
    else if ((v211 & 7) != 0)
    {
      uint64_t v212 = 0;
      uint64_t v214 = 0;
      if ((v211 & 7) == 3)
      {
        unsigned int v215 = (int *)(v211 & 0xFFFFFFFFFFFFFFF8);
        if (v215)
        {
          uint64_t v214 = *v215;
          uint64_t v212 = (unint64_t *)(v215 + 2);
        }
      }
    }
    else
    {
      *uint64_t v212 = v211 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v214 = 1;
    }
    llvm::MachineInstr::setMemRefs(v193, (uint64_t *)v192, v212, v214);
    if (v316)
    {
      int v216 = *v316;
      if ((v216 - 4) > 0x1E)
      {
        if ((v216 - 3) >= 0xFFFFFFFE) {
          uint64_t v256 = v316;
        }
        else {
          uint64_t v256 = 0;
        }
        if ((v216 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v257 = (unint64_t)(v256 + 8);
          goto LABEL_512;
        }
        if (v216 == 3) {
          *((void *)v316 + 1) = 0;
        }
      }
      else if ((v316[1] & 0x7F) == 2 || *((_DWORD *)v316 + 3))
      {
        uint64_t v266 = *((void *)v316 + 2);
        if ((v266 & 4) != 0)
        {
          unint64_t v257 = v266 & 0xFFFFFFFFFFFFFFF8;
          if (v257)
          {
LABEL_512:
            *(void *)&long long v300 = &v316;
            sub_1CC5FA668(v257 + 16, &v300);
          }
        }
      }
    }
    uint64_t v217 = *(unsigned int *)(v193 + 40);
    if (v217)
    {
      v218 = *(_DWORD **)(v193 + 32);
      uint64_t v219 = &v218[8 * v217];
      unint64_t v220 = *(void **)(*(void *)v147 + 24);
      do
      {
        if ((*v218 & 0x10000FF) == 0x1000000)
        {
          int v221 = v218[1];
          if (v221)
          {
            uint64_t v222 = (unsigned __int16 *)v220[19];
            int v223 = (unsigned __int16 *)v220[20];
            if (v222 == v223) {
              goto LABEL_444;
            }
            int v224 = (unsigned __int16 *)v220[19];
            while (*v224 != (unsigned __int16)v221)
            {
              v224 += 8;
              if (v224 == v223) {
                goto LABEL_444;
              }
            }
            if (!*((void *)v224 + 1))
            {
LABEL_444:
              unint64_t v225 = v220[21];
              if ((unint64_t)v223 >= v225)
              {
                uint64_t v227 = ((char *)v223 - (char *)v222) >> 4;
                unint64_t v228 = v227 + 1;
                if ((unint64_t)(v227 + 1) >> 60) {
LABEL_571:
                }
                  abort();
                uint64_t v229 = v225 - (void)v222;
                if (v229 >> 3 > v228) {
                  unint64_t v228 = v229 >> 3;
                }
                if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v230 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v230 = v228;
                }
                if (v230)
                {
                  if (v230 >> 60) {
LABEL_572:
                  }
                    sub_1CB833614();
                  unsigned int v231 = (char *)operator new(16 * v230);
                }
                else
                {
                  unsigned int v231 = 0;
                }
                unint64_t v232 = &v231[16 * v227];
                *(_WORD *)unint64_t v232 = v221;
                *((void *)v232 + 1) = -1;
                int v233 = v232;
                if (v222 != v223)
                {
                  do
                  {
                    *((_OWORD *)v233 - 1) = *((_OWORD *)v223 - 1);
                    v233 -= 16;
                    v223 -= 8;
                  }
                  while (v223 != v222);
                  uint64_t v222 = (unsigned __int16 *)v220[19];
                }
                uint64_t v226 = v232 + 16;
                v220[19] = v233;
                v220[20] = v232 + 16;
                v220[21] = &v231[16 * v230];
                if (v222) {
                  operator delete(v222);
                }
              }
              else
              {
                *int v223 = v221;
                *((void *)v223 + 1) = -1;
                uint64_t v226 = (char *)(v223 + 8);
              }
              v220[20] = v226;
            }
          }
        }
        v218 += 8;
      }
      while (v218 != v219);
    }
    uint64_t v234 = *((void *)v147 + 5);
    if (v234)
    {
      uint64_t v235 = *(unsigned int *)(v234 + 40);
      if (v235)
      {
        v236 = *(int **)(v234 + 32);
        int v237 = &v236[8 * v235];
        do
        {
          int v238 = *v236;
          if (!*v236)
          {
            int v239 = v236[1];
            BOOL v240 = (~v238 & 0x5000000) == 0 || (v238 & 0x1000000) == 0;
            if (!v240 && v239 != 0)
            {
              uint64_t v242 = (void *)*((void *)v147 + 3);
              v243 = (unsigned __int16 *)v242[19];
              v244 = (unsigned __int16 *)v242[20];
              if (v243 == v244) {
                goto LABEL_481;
              }
              unint64_t v245 = (unsigned __int16 *)v242[19];
              while (*v245 != (unsigned __int16)v239)
              {
                v245 += 8;
                if (v245 == v244) {
                  goto LABEL_481;
                }
              }
              if (!*((void *)v245 + 1))
              {
LABEL_481:
                unint64_t v246 = v242[21];
                if ((unint64_t)v244 >= v246)
                {
                  uint64_t v248 = ((char *)v244 - (char *)v243) >> 4;
                  unint64_t v249 = v248 + 1;
                  if ((unint64_t)(v248 + 1) >> 60) {
                    goto LABEL_571;
                  }
                  uint64_t v250 = v246 - (void)v243;
                  if (v250 >> 3 > v249) {
                    unint64_t v249 = v250 >> 3;
                  }
                  if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v251 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v251 = v249;
                  }
                  if (v251)
                  {
                    if (v251 >> 60) {
                      goto LABEL_572;
                    }
                    uint64_t v252 = (char *)operator new(16 * v251);
                  }
                  else
                  {
                    uint64_t v252 = 0;
                  }
                  int64_t v253 = &v252[16 * v248];
                  *(_WORD *)int64_t v253 = v239;
                  *((void *)v253 + 1) = -1;
                  int64_t v254 = v253;
                  if (v243 != v244)
                  {
                    do
                    {
                      *((_OWORD *)v254 - 1) = *((_OWORD *)v244 - 1);
                      v254 -= 16;
                      v244 -= 8;
                    }
                    while (v244 != v243);
                    v243 = (unsigned __int16 *)v242[19];
                  }
                  uint64_t v247 = v253 + 16;
                  v242[19] = v254;
                  v242[20] = v253 + 16;
                  v242[21] = &v252[16 * v251];
                  if (v243) {
                    operator delete(v243);
                  }
                }
                else
                {
                  unsigned __int16 *v244 = v239;
                  *((void *)v244 + 1) = -1;
                  uint64_t v247 = (char *)(v244 + 8);
                }
                v242[20] = v247;
              }
            }
          }
          v236 += 8;
        }
        while (v236 != v237);
      }
    }
    llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)v147);
    uint64_t v255 = (llvm::MachineInstr *)*((void *)v147 + 1);
    if (v255) {
      llvm::MachineInstr::eraseFromParent(v255);
    }
    uint64_t v3 = v299;
    (*(void (**)(void, void, void, void, void, void, void *, void))(**(void **)(v299 + 248)
                                                                                             + 272))(*(void *)(v299 + 248), *((void *)v147 + 2), *((void *)v147 + 3), 0, 0, 0, v313, 0);
    v147 += 48;
    if (v147 != v298) {
      continue;
    }
    break;
  }
  if (v313[0])
  {
    int v271 = *(unsigned __int8 *)v313[0];
    if ((v271 - 4) > 0x1E)
    {
      if ((v271 - 3) >= 0xFFFFFFFE) {
        uint64_t v274 = v313[0];
      }
      else {
        uint64_t v274 = 0;
      }
      if ((v271 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v275 = v274 + 8;
        goto LABEL_568;
      }
      if (v271 == 3) {
        *(void *)(v313[0] + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v313[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v313[0] + 12))
    {
      uint64_t v276 = *(void *)(v313[0] + 16);
      if ((v276 & 4) != 0)
      {
        unint64_t v275 = v276 & 0xFFFFFFFFFFFFFFF8;
        if (v275)
        {
LABEL_568:
          *(void *)&long long v300 = v313;
          sub_1CC5FA668(v275 + 16, &v300);
        }
      }
    }
  }
  int v272 = v320;
  unsigned __int16 v147 = (char *)v319;
LABEL_560:
  if (v147 != v321) {
    free(v147);
  }
  return v272 != 0;
}

double sub_1CC2C1288@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 8;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

BOOL sub_1CC2C12B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return 0;
  }
  unint64_t v6 = **(void **)a1 & 0xFFFFFFFFFFFFFFF8;
  if (!v6 || (*(unsigned char *)v6 & 4) == 0)
  {
    while ((*(_WORD *)(v6 + 44) & 4) != 0)
      unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v6 == *(void *)(*(void *)a1 + 24) + 48) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  while (llvm::MachineInstr::findRegisterDefOperandIdx(v6, v3, 0, 1, *(void *)(v7 + 256)) == -1)
  {
    unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
    if (!v6 || (*(unsigned char *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 4) != 0)
        unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v6 == *(void *)(*(void *)a1 + 24) + 48) {
      return 0;
    }
  }
  uint64_t v33 = 0;
  if (!(*(unsigned int (**)(void, unint64_t, uint64_t, uint64_t *))(**(void **)(v7 + 248) + 440))(*(void *)(v7 + 248), v6, v3, &v33))return 0; {
  unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(v7 + 256), v3, *(void *)(a1 + 16));
  }
  unsigned int v32 = RegSizeInBits;
  if (RegSizeInBits > 0x40) {
    operator new[]();
  }
  unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)RegSizeInBits;
  uint64_t v10 = (const void *)(v9 & v33);
  if (!RegSizeInBits)
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  uint64_t v31 = v10;
  unsigned int v30 = RegSizeInBits;
  unint64_t v29 = v9 & a3;
  BOOL v28 = 0;
  llvm::APInt::smul_ov(&v31, (const llvm::APInt *)&v29, &v28, (llvm::APInt *)&v26);
  BOOL v11 = 0;
  if (!v28)
  {
    uint64_t v12 = **(uint64_t ***)(a1 + 24);
    unsigned int v25 = 64;
    uint64_t v24 = v12;
    llvm::APInt::sadd_ov((llvm::APInt *)&v26, (const llvm::APInt *)&v24, &v28, (uint64_t)&v22);
    if (v25 >= 0x41 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    uint64_t v13 = v22;
    uint64_t v24 = v22;
    unsigned int v14 = v23;
    unsigned int v25 = v23;
    BOOL v11 = !v28;
    if (!v28)
    {
      if (v23 >= 0x41)
      {
        int v17 = 0;
        int64_t v18 = ((unint64_t)v23 + 63) >> 6;
        do
        {
          if (v18-- < 1) {
            break;
          }
          unint64_t v20 = v22[v18];
          v17 += __clz(v20);
        }
        while (!v20);
        unsigned int v21 = v23 | 0xFFFFFFC0;
        if ((v23 & 0x3F) == 0) {
          unsigned int v21 = 0;
        }
        if (v23 - v17 - v21 > 0x40)
        {
          BOOL v11 = 0;
          goto LABEL_41;
        }
        uint64_t v15 = *v22;
      }
      else
      {
        uint64_t v15 = (uint64_t)((void)v22 << -(char)v23) >> -(char)v23;
      }
      **(void **)(a1 + 24) = v15;
    }
    if (v14 >= 0x41)
    {
      uint64_t v13 = v24;
LABEL_41:
      if (v13) {
        MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
      }
    }
  }
  if (v27 >= 0x41 && v26) {
    MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
  }
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  if (v32 >= 0x41 && v31) {
    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
  }
  return v11;
}

BOOL sub_1CC2C16A4(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = result;
  if (a5)
  {
    uint64_t v5 = a4;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = a4 + 8 * a5;
    while (1)
    {
      uint64_t v8 = *(unsigned int *)(*(void *)v5 + 40);
      if (v8)
      {
        unint64_t v9 = *(int **)(*(void *)v5 + 32);
        uint64_t v10 = &v9[8 * v8];
        while (1)
        {
          int v11 = *v9;
          if (!*v9)
          {
            unsigned int v12 = v9[1];
            if (v12)
            {
              uint64_t v13 = *(unsigned int *)(a3 + 40);
              if (v13) {
                break;
              }
            }
          }
LABEL_6:
          v9 += 8;
          if (v9 == v10) {
            goto LABEL_21;
          }
        }
        uint64_t v14 = 32 * v13;
        uint64_t v15 = (unsigned int *)(*(void *)(a3 + 32) + 4);
        while (1)
        {
          int v16 = *(v15 - 1);
          if (!(_BYTE)v16)
          {
            unsigned int v17 = *v15;
            if (*v15)
            {
              if ((v12 == v17
                 || !((v17 | v12) >> 30)
                 && (double result = llvm::MCRegisterInfo::regsOverlap((void *)(*(void *)(a2 + 256) + 8), v12, v17)))
                && ((v16 | v11) & 0x1000000) != 0)
              {
                break;
              }
            }
          }
          v15 += 8;
          v14 -= 32;
          if (!v14) {
            goto LABEL_6;
          }
        }
        if ((_BYTE)v20)
        {
          *(unsigned char *)uint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
          *(void *)(v18 + 16) = 0;
          return result;
        }
        uint64_t v19 = v5;
        uint64_t v20 = 1;
      }
LABEL_21:
      v5 += 8;
      if (v5 == v21) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
LABEL_24:
  *(unsigned char *)uint64_t v18 = 1;
  *(void *)(v18 + 8) = v19;
  *(void *)(v18 + 16) = v20;
  return result;
}

uint64_t sub_1CC2C17F8()
{
  v4.n128_u64[0] = (unint64_t)"The page size of the target in bytes";
  v4.n128_u64[1] = 36;
  int v3 = 4096;
  int v2 = &v3;
  int v1 = 1;
  sub_1CD51646C(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCCCEC0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"The max number of instructions to consider hoisting loads over (the algorithm is qu"
                                     "adratic over this number)";
  v4.n128_u64[1] = 108;
  int v3 = 1;
  int v1 = 8;
  int v2 = &v1;
  sub_1CD5165E4((uint64_t)algn_1EBCCCF80, "imp-null-max-insts-to-consider", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, algn_1EBCCCF80, &dword_1CB82C000);
}

void sub_1CC2C18E8(uint64_t a1)
{
}

void llvm::createIndirectBrExpandPass(llvm *this)
{
}

uint64_t sub_1CC2C19C4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCD040;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260C360;
  *(void *)(a1 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCD048, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC2C18E8;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCCD048, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC2C1A78()
{
}

void sub_1CC2C1AB8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2C1AF0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1CC2C1B04(uint64_t a1, uint64_t a2)
{
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1);
  if (!AnalysisPass) {
    return 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 112) + 16))(*(void *)(v6 + 112), a2);
  if (!(*(unsigned int (**)(void))(*(void *)v7 + 288))()) {
    return 0;
  }
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7);
  v160[0] = 0;
  char v161 = 0;
  uint64_t v8 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::DominatorTreeWrapperPass::ID);
    if (v9)
    {
      LOBYTE(v142) = 1;
      sub_1CD516784((uint64_t)v160, v9 + 32, (char *)&v142);
    }
  }
  uint64_t v157 = &v159;
  uint64_t v158 = 0x100000000;
  uint64_t v134 = v138;
  uint64_t v135 = v138;
  uint64_t v136 = 4;
  int v137 = 0;
  uint64_t v10 = a2 + 72;
  uint64_t v11 = *(void *)(a2 + 80);
  if (v11 == a2 + 72)
  {
    uint64_t v40 = 0;
    goto LABEL_169;
  }
  do
  {
    if (v11) {
      uint64_t v12 = v11 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void *)(v12 + 40);
    if (v13 != v12 + 40)
    {
      uint64_t v14 = v13 ? v13 - 24 : 0;
      unsigned int v15 = *(unsigned __int8 *)(v14 + 16) - 40;
      uint64_t v16 = v15 >= 0xFFFFFFF5 ? v14 : 0;
      if (v13)
      {
        if (*(unsigned char *)(v16 + 16) == 32 && v15 >= 0xFFFFFFF5)
        {
          if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFF) == 1)
          {
            uint64_t v18 = (llvm::UnreachableInst *)operator new(0x40uLL);
            *((_DWORD *)v18 + 5) &= 0x38000000u;
            llvm::UnreachableInst::UnreachableInst(v18, **(llvm::LLVMContext ***)a2, (llvm::Instruction *)v16);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          if (v158 >= (unint64_t)HIDWORD(v158)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v157 + v158) = v16;
          LODWORD(v158) = v158 + 1;
          int v19 = *(_DWORD *)(v16 + 20);
          if ((v19 & 0x40000000) != 0)
          {
            uint64_t v21 = *(void *)(v16 - 8);
            uint64_t v20 = v19 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v20 = v19 & 0x7FFFFFF;
            uint64_t v21 = v16 - 32 * v20;
          }
          if (v20 != 1)
          {
            unsigned __int16 v22 = (uint64_t *)(v21 + 32 * v20);
            unsigned int v23 = (uint64_t *)(v21 + 32);
            uint64_t v24 = v135;
            while (1)
            {
              uint64_t v25 = *v23;
              uint64_t v26 = HIDWORD(v136);
              if (v24 != v134) {
                break;
              }
              if (HIDWORD(v136))
              {
                unsigned int v27 = 0;
                uint64_t v28 = 8 * HIDWORD(v136);
                unint64_t v29 = v24;
                while (*v29 != v25)
                {
                  if (*v29 == -2) {
                    unsigned int v27 = v29;
                  }
                  ++v29;
                  v28 -= 8;
                  if (!v28)
                  {
                    if (!v27) {
                      goto LABEL_42;
                    }
                    *unsigned int v27 = v25;
                    --v137;
                    goto LABEL_66;
                  }
                }
                goto LABEL_66;
              }
LABEL_42:
              unsigned int v30 = v136;
              if (HIDWORD(v136) >= v136) {
                goto LABEL_45;
              }
              ++HIDWORD(v136);
              *(void *)&v24[8 * v26] = v25;
LABEL_66:
              uint64_t v24 = v135;
              v23 += 4;
              if (v23 == v22) {
                goto LABEL_31;
              }
            }
            unsigned int v30 = v136;
LABEL_45:
            if (3 * v30 <= 4 * (HIDWORD(v136) - v137))
            {
              if (v30 >= 0x40) {
                v30 *= 2;
              }
              else {
                unsigned int v30 = 128;
              }
            }
            else if (v30 - HIDWORD(v136) >= v30 >> 3)
            {
              goto LABEL_47;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v134, v30);
            unsigned int v30 = v136;
            uint64_t v24 = v135;
LABEL_47:
            unsigned int v31 = v30 - 1;
            unsigned int v32 = (v30 - 1) & ((v25 >> 4) ^ (v25 >> 9));
            uint64_t v33 = &v24[8 * v32];
            uint64_t v34 = *(void *)v33;
            if (*(void *)v33 == -1)
            {
              BOOL v35 = 0;
LABEL_59:
              if (v35) {
                __int16 v39 = v35;
              }
              else {
                __int16 v39 = v33;
              }
              if (*(void *)v39 != v25)
              {
                if (*(void *)v39 == -2) {
                  --v137;
                }
                else {
                  ++HIDWORD(v136);
                }
                *(void *)__int16 v39 = v25;
              }
            }
            else
            {
              BOOL v35 = 0;
              int v36 = 1;
              while (v34 != v25)
              {
                if (v35) {
                  BOOL v37 = 0;
                }
                else {
                  BOOL v37 = v34 == -2;
                }
                if (v37) {
                  BOOL v35 = v33;
                }
                unsigned int v38 = v32 + v36++;
                unsigned int v32 = v38 & v31;
                uint64_t v33 = &v24[8 * (v38 & v31)];
                uint64_t v34 = *(void *)v33;
                if (*(void *)v33 == -1) {
                  goto LABEL_59;
                }
              }
            }
            goto LABEL_66;
          }
        }
      }
    }
LABEL_31:
    uint64_t v11 = *(void *)(v11 + 8);
  }
  while (v11 != v10);
  if (!v158)
  {
    uint64_t v40 = 0;
    goto LABEL_169;
  }
  uint64_t v154 = v156;
  uint64_t v155 = 0x400000000;
  uint64_t v42 = *(void *)(a2 + 80);
  uint64_t v43 = dword_1CD912700 + 30976;
  if (v42 != v10)
  {
    do
    {
      if (v42) {
        uint64_t v44 = v42 - 24;
      }
      else {
        uint64_t v44 = 0;
      }
      unint64_t v45 = v134;
      if (v135 == v134)
      {
        int v46 = HIDWORD(v136);
        uint64_t v47 = &v135[8 * HIDWORD(v136)];
        if (HIDWORD(v136))
        {
          uint64_t v48 = 0;
          while (*(void *)&v135[v48] != v44)
          {
            v48 += 8;
            if (8 * HIDWORD(v136) == v48) {
              goto LABEL_101;
            }
          }
          uint64_t v47 = &v135[v48];
        }
LABEL_101:
        unint64_t v45 = v135;
      }
      else
      {
        int v49 = v136 - 1;
        unsigned int v50 = (v136 - 1) & ((v44 >> 4) ^ (v44 >> 9));
        uint64_t v47 = &v135[8 * v50];
        uint64_t v51 = *(void *)v47;
        if (*(void *)v47 == -1)
        {
          uint64_t v52 = 0;
LABEL_135:
          if (v52) {
            uint64_t v47 = v52;
          }
          int v46 = HIDWORD(v136);
          if (*(void *)v47 != v44) {
            uint64_t v47 = &v135[8 * v136];
          }
        }
        else
        {
          uint64_t v52 = 0;
          int v53 = 1;
          while (v51 != v44)
          {
            if (v52) {
              BOOL v54 = 0;
            }
            else {
              BOOL v54 = v51 == -2;
            }
            if (v54) {
              uint64_t v52 = v47;
            }
            unsigned int v55 = v50 + v53++;
            unsigned int v50 = v55 & v49;
            uint64_t v47 = &v135[8 * (v55 & v49)];
            uint64_t v51 = *(void *)v47;
            if (*(void *)v47 == -1) {
              goto LABEL_135;
            }
          }
          int v46 = HIDWORD(v136);
        }
      }
      if (v135 == v45) {
        int v56 = v46;
      }
      else {
        int v56 = v136;
      }
      if (v47 != &v135[8 * v56])
      {
        uint64_t v57 = *(void *)(v44 + 8);
        if (v57)
        {
          while (1)
          {
            int v58 = *(llvm::Constant ***)(v57 + 24);
            if (*((unsigned char *)v58 + 16) == 4) {
              break;
            }
            uint64_t v57 = *(void *)(v57 + 8);
            if (!v57) {
              goto LABEL_132;
            }
          }
          if (llvm::Constant::isConstantUsed(*(llvm::Constant **)(v57 + 24)))
          {
            int v59 = v155;
            if (v155 >= HIDWORD(v155)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v154 + v155) = v44;
            LODWORD(v155) = v155 + 1;
            BOOL v60 = *v58;
            unsigned int v61 = *((_DWORD *)*v58 + 2);
            if ((v61 & 0xFE) == 0x12) {
              unsigned int v61 = *(_DWORD *)(**((void **)v60 + 2) + 8);
            }
            if (v61 < 0x100) {
              goto LABEL_123;
            }
            unsigned int v62 = v61 >> 8;
            uint64_t v63 = *(unsigned int *)(v4 + 512);
            uint64_t v64 = *(void *)(v4 + 504);
            if (v63)
            {
              uint64_t v64 = *(void *)(v4 + 504);
              unint64_t v65 = *(unsigned int *)(v4 + 512);
              do
              {
                unint64_t v66 = v65 >> 1;
                uint64_t v67 = v64 + 16 * (v65 >> 1);
                unsigned int v68 = *(_DWORD *)(v67 + 8);
                uint64_t v69 = v67 + 16;
                v65 += ~(v65 >> 1);
                if (v68 < v62) {
                  uint64_t v64 = v69;
                }
                else {
                  unint64_t v65 = v66;
                }
              }
              while (v65);
            }
            if (v64 == *(void *)(v4 + 504) + 16 * v63 || *(_DWORD *)(v64 + 8) != v62) {
LABEL_123:
            }
              uint64_t v64 = *(void *)(v4 + 504);
            uint64_t v70 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v60, (llvm::LLVMContext *)*(unsigned int *)(v64 + 4));
            if ((*((_DWORD *)v60 + 2) & 0xFE) == 0x12) {
              llvm::VectorType::get(v70, (llvm::Type *)(*((unsigned int *)v60 + 8) | ((unint64_t)(*((_DWORD *)v60 + 2) == 19) << 32)));
            }
            uint64_t v72 = v59 + 1;
            uint64_t v73 = *(llvm::ConstantInt **)v70;
            unsigned int v74 = *((_DWORD *)v70 + 2);
            LODWORD(v143) = v74 >> 8;
            if (v74 >> 8 > 0x40) {
              operator new[]();
            }
            if (v74 <= 0xFF) {
              unint64_t v75 = 0;
            }
            else {
              unint64_t v75 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v74) + 63);
            }
            uint64_t v142 = (void *)(v75 & v72);
            uint64_t v76 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(v73, (llvm::LLVMContext *)&v142, v71);
            if (v143 >= 0x41 && v142) {
              MEMORY[0x1D25D9CB0](v142, 0x1000C8000313F17);
            }
            unint64_t v77 = sub_1CC56C0C0((llvm *)0x30, v76, *v58, 0);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v58, v77, (llvm::Value *)1);
          }
        }
      }
LABEL_132:
      uint64_t v42 = *(void *)(v42 + 8);
    }
    while (v42 != v10);
    uint64_t v43 = &dword_1CD912700[7744];
    if (v155)
    {
      if (!v158)
      {
        unint64_t v89 = 0;
        uint64_t v90 = v4 + 272;
LABEL_177:
        LOWORD(v143) = 0;
        v144[2] = 0;
        uint64_t v145 = v147;
        long long v146 = xmmword_1CD96EEC0;
        v147[1] = v148;
        v147[2] = 0x1000000000;
        memset(&v148[128], 0, 24);
        uint64_t v149 = v151;
        uint64_t v150 = 0x800000000;
        v151[16] = 0;
        v151[17] = &v152;
        v151[18] = 0x800000000;
        sub_1CB94E404((uint64_t)&v142, v90);
        uint64_t v153 = v89;
        uint64_t v139 = &v141;
        uint64_t v140 = 0x800000000;
        if (v158 != 1)
        {
          v132[0] = "switch_bb";
          __int16 v133 = 259;
          operator new();
        }
        uint64_t v92 = *(void *)v157;
        int v93 = *(_DWORD *)(*(void *)v157 + 20);
        if ((v93 & 0x40000000) != 0) {
          long long v94 = *(llvm::CastInst ***)(v92 - 8);
        }
        else {
          long long v94 = (llvm::CastInst **)(v92 - 32 * (v93 & 0x7FFFFFF));
        }
        unsigned int v111 = *v94;
        if ((*((unsigned char *)*v94 + 23) & 0x10) != 0)
        {
          uint64_t v112 = ***(void ***)v111;
          uint64_t v113 = *(void *)(v112 + 152);
          uint64_t v114 = *(unsigned int *)(v112 + 168);
          if (v114)
          {
            LODWORD(v115) = (v114 - 1) & ((v111 >> 4) ^ (v111 >> 9));
            unint64_t v116 = (llvm::CastInst **)(v113 + 16 * v115);
            uint64_t v117 = *v116;
            if (*v116 != v111)
            {
              int v118 = 1;
              do
              {
                if (v117 == (llvm::CastInst *)-4096) {
                  goto LABEL_213;
                }
                int v119 = v115 + v118++;
                uint64_t v115 = v119 & (v114 - 1);
                uint64_t v117 = *(llvm::CastInst **)(v113 + 16 * v115);
              }
              while (v117 != v111);
              unint64_t v116 = (llvm::CastInst **)(v113 + 16 * v115);
            }
          }
          else
          {
LABEL_213:
            unint64_t v116 = (llvm::CastInst **)(v113 + 16 * v114);
          }
          uint64_t v120 = v116[1];
          int v123 = *(const char **)v120;
          BOOL v121 = (char *)v120 + 16;
          int v122 = v123;
        }
        else
        {
          int v122 = 0;
          BOOL v121 = &byte_1CFBCE98E;
        }
        v132[0] = v121;
        v132[1] = v122;
        v132[2] = ".switch_cast";
        __int16 v133 = 773;
        llvm::CastInst::CreatePointerCast(v111, v89, v132, (const llvm::Twine *)v92, v91);
        if (v161)
        {
          if (HIDWORD(v140) < HIDWORD(v136) - v137) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v124 = *(_DWORD *)(v92 + 20);
          if ((v124 & 0x40000000) != 0)
          {
            uint64_t v126 = *(void *)(v92 - 8);
            uint64_t v125 = v124 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v125 = v124 & 0x7FFFFFF;
            uint64_t v126 = v92 - 32 * v125;
          }
          if (v125 != 1)
          {
            unsigned int v127 = (uint64_t *)(v126 + 32);
            unsigned int v128 = v140;
            uint64_t v129 = 32 * v125 - 32;
            do
            {
              uint64_t v130 = *v127;
              if (v128 >= HIDWORD(v140)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v131 = (char *)v139 + 16 * v128;
              *int v131 = *(void *)(v92 + 40);
              v131[1] = v130 | 4;
              unsigned int v128 = v140 + 1;
              LODWORD(v140) = v140 + 1;
              v127 += 4;
              v129 -= 32;
            }
            while (v129);
          }
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      unint64_t v89 = 0;
      unint64_t v95 = (char *)v157;
      long long v96 = (char *)v157 + 8 * v158;
      uint64_t v90 = v4 + 272;
      while (1)
      {
        uint64_t v97 = *(void *)v95;
        int v98 = *(_DWORD *)(*(void *)v95 + 20);
        if ((v98 & 0x40000000) != 0) {
          uint64_t v99 = *(uint64_t ***)(v97 - 8);
        }
        else {
          uint64_t v99 = (uint64_t **)(v97 - 32 * (v98 & 0x7FFFFFF));
        }
        uint64_t v100 = **v99;
        unsigned int v101 = *(_DWORD *)(v100 + 8);
        if ((v101 & 0xFE) == 0x12) {
          unsigned int v101 = *(_DWORD *)(**(void **)(v100 + 16) + 8);
        }
        if (v101 < 0x100) {
          goto LABEL_195;
        }
        unsigned int v102 = v101 >> 8;
        uint64_t v103 = *(unsigned int *)(v4 + 512);
        uint64_t v104 = *(void *)(v4 + 504);
        if (v103)
        {
          uint64_t v104 = *(void *)(v4 + 504);
          unint64_t v105 = *(unsigned int *)(v4 + 512);
          do
          {
            unint64_t v106 = v105 >> 1;
            uint64_t v107 = v104 + 16 * (v105 >> 1);
            unsigned int v108 = *(_DWORD *)(v107 + 8);
            uint64_t v109 = v107 + 16;
            v105 += ~(v105 >> 1);
            if (v108 < v102) {
              uint64_t v104 = v109;
            }
            else {
              unint64_t v105 = v106;
            }
          }
          while (v105);
        }
        if (v104 == *(void *)(v4 + 504) + 16 * v103 || *(_DWORD *)(v104 + 8) != v102) {
LABEL_195:
        }
          uint64_t v104 = *(void *)(v4 + 504);
        uint64_t v110 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v100, (llvm::LLVMContext *)*(unsigned int *)(v104 + 4));
        if ((*(_DWORD *)(v100 + 8) & 0xFE) == 0x12)
        {
          llvm::VectorType::get(v110, (llvm::Type *)(*(unsigned int *)(v100 + 32) | ((unint64_t)(*(_DWORD *)(v100 + 8) == 19) << 32)));
          if (!v89)
          {
LABEL_199:
            unint64_t v89 = v110;
            goto LABEL_200;
          }
        }
        else if (!v89)
        {
          goto LABEL_199;
        }
        if (*((_DWORD *)v110 + 2) >> 8 > *((_DWORD *)v89 + 2) >> 8) {
          goto LABEL_199;
        }
LABEL_200:
        v95 += 8;
        if (v95 == v96) {
          goto LABEL_177;
        }
      }
    }
  }
  uint64_t v142 = v144;
  uint64_t v143 = *((void *)v43 + 123);
  if (v161 && (HIDWORD(v136) - v137) >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v158)
  {
    uint64_t v78 = *(void *)v157;
    if (v161)
    {
      int v79 = *(_DWORD *)(v78 + 20);
      if ((v79 & 0x40000000) != 0)
      {
        uint64_t v81 = *(void *)(v78 - 8);
        uint64_t v80 = v79 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v80 = v79 & 0x7FFFFFF;
        uint64_t v81 = v78 - 32 * v80;
      }
      if (v80 != 1)
      {
        unint64_t v83 = (uint64_t *)(v81 + 32);
        unsigned int v84 = v143;
        uint64_t v85 = 32 * v80 - 32;
        do
        {
          uint64_t v86 = *v83;
          if (v84 >= HIDWORD(v143)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v87 = (char *)v142 + 16 * v84;
          void *v87 = *(void *)(v78 + 40);
          v87[1] = v86 | 4;
          unsigned int v84 = v143 + 1;
          LODWORD(v143) = v143 + 1;
          v83 += 4;
          v85 -= 32;
        }
        while (v85);
      }
    }
    uint64_t v82 = (llvm::UnreachableInst *)operator new(0x40uLL);
    *((_DWORD *)v82 + 5) &= 0x38000000u;
    llvm::UnreachableInst::UnreachableInst(v82, **(llvm::LLVMContext ***)a2, (llvm::Instruction *)v78);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  uint64_t v88 = v142;
  if (v161)
  {
    llvm::DomTreeUpdater::applyUpdates((uint64_t)v160, (unint64_t *)v142, v143);
    uint64_t v88 = v142;
  }
  if (v88 != v144) {
    free(v88);
  }
  if (v154 != v156) {
    free(v154);
  }
  uint64_t v40 = 1;
LABEL_169:
  if (v135 != v134) {
    free(v135);
  }
  if (v157 != &v159) {
    free(v157);
  }
  if (v161) {
    sub_1CC2930C0((uint64_t)v160);
  }
  return v40;
}

void llvm::createInlineSpiller(llvm *this, llvm::MachineFunctionPass *a2, llvm::MachineFunction *a3, llvm::VirtRegMap *a4, llvm::VirtRegAuxInfo *a5)
{
}

void sub_1CC2C3910(llvm *a1, uint64_t a2, uint64_t a3, const char *a4, unsigned int a5)
{
  uint64_t v9 = (uint64_t)a1;
  if (!a1)
  {
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  uint64_t v10 = a1;
  if ((*(unsigned char *)a1 & 4) == 0)
  {
LABEL_6:
    while ((*((_WORD *)v10 + 22) & 8) != 0)
      uint64_t v10 = (llvm *)*((void *)v10 + 1);
  }
  if (*((void *)v10 + 1) == a2) {
    char v11 = 32;
  }
  else {
    char v11 = 9;
  }
  if (*((void *)v10 + 1) == a2) {
    char v12 = 32;
  }
  else {
    char v12 = 10;
  }
  int RegisterDefOperandIdx = llvm::dbgs(a1);
  uint64_t v14 = RegisterDefOperandIdx;
  unsigned int v15 = (unsigned char *)*((void *)RegisterDefOperandIdx + 4);
  if ((unint64_t)v15 >= *((void *)RegisterDefOperandIdx + 3))
  {
    int RegisterDefOperandIdx = llvm::raw_ostream::write(RegisterDefOperandIdx, 9);
  }
  else
  {
    *((void *)RegisterDefOperandIdx + 4) = v15 + 1;
    unsigned char *v15 = 9;
  }
  uint64_t v16 = (_WORD *)*((void *)v14 + 4);
  if (a4)
  {
    int RegisterDefOperandIdx = (llvm::raw_ostream *)strlen(a4);
    unsigned int v17 = RegisterDefOperandIdx;
    if ((unint64_t)RegisterDefOperandIdx <= *((void *)v14 + 3) - (void)v16)
    {
      if (RegisterDefOperandIdx)
      {
        int RegisterDefOperandIdx = (llvm::raw_ostream *)memcpy(v16, a4, (size_t)RegisterDefOperandIdx);
        uint64_t v16 = (_WORD *)((char *)v17 + *((void *)v14 + 4));
        *((void *)v14 + 4) = v16;
      }
    }
    else
    {
      int RegisterDefOperandIdx = llvm::raw_ostream::write(v14, a4, (size_t)RegisterDefOperandIdx);
      uint64_t v16 = (_WORD *)*((void *)v14 + 4);
    }
  }
  if (*((void *)v14 + 3) - (void)v16 > 1uLL)
  {
    _WORD *v16 = 8250;
    uint64_t v18 = (char *)(*((void *)v14 + 4) + 2);
    *((void *)v14 + 4) = v18;
  }
  else
  {
    int RegisterDefOperandIdx = llvm::raw_ostream::write(v14, ": ", 2uLL);
    uint64_t v18 = (char *)*((void *)v14 + 4);
  }
  if ((unint64_t)v18 >= *((void *)v14 + 3))
  {
    int RegisterDefOperandIdx = llvm::raw_ostream::write(v14, v12);
  }
  else
  {
    *((void *)v14 + 4) = v18 + 1;
    char *v18 = v12;
  }
  for (; v9 != a2; uint64_t v9 = *(void *)(v9 + 8))
  {
    __int16 v19 = *(_WORD *)(v9 + 44);
    unint64_t v20 = v9;
    if ((v19 & 4) != 0)
    {
      do
        unint64_t v20 = *(void *)v20 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v20 + 44) & 4) != 0);
    }
    uint64_t v21 = v9;
    if ((v19 & 8) != 0)
    {
      do
        uint64_t v21 = *(void *)(v21 + 8);
      while ((*(_WORD *)(v21 + 44) & 8) != 0);
    }
    unint64_t v22 = *(void *)(v21 + 8);
    if (v20 != v22)
    {
      while (1)
      {
        unsigned int v23 = **(unsigned __int16 **)(v20 + 16);
        BOOL v24 = v23 > 0x17;
        int v25 = (1 << v23) & 0x83E000;
        if (v24 || v25 == 0) {
          break;
        }
        unint64_t v20 = *(void *)(v20 + 8);
        if (v20 == v22)
        {
          unint64_t v20 = v22;
          break;
        }
      }
    }
    uint64_t v27 = *(void *)(a3 + 288);
    uint64_t v28 = *(void *)(v27 + 368);
    uint64_t v29 = *(unsigned int *)(v27 + 384);
    if (v29)
    {
      LODWORD(v30) = ((v20 >> 4) ^ (v20 >> 9)) & (v29 - 1);
      unsigned int v31 = (uint64_t *)(v28 + 16 * v30);
      uint64_t v32 = *v31;
      if (v20 == *v31) {
        goto LABEL_41;
      }
      int v33 = 1;
      while (v32 != -4096)
      {
        int v34 = v30 + v33++;
        uint64_t v30 = v34 & (v29 - 1);
        uint64_t v32 = *(void *)(v28 + 16 * v30);
        if (v20 == v32)
        {
          unsigned int v31 = (uint64_t *)(v28 + 16 * v30);
          goto LABEL_41;
        }
      }
    }
    unsigned int v31 = (uint64_t *)(v28 + 16 * v29);
LABEL_41:
    unint64_t v35 = v31[1] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = v35 | 4;
    if (a5)
    {
      int RegisterDefOperandIdx = (llvm::raw_ostream *)llvm::MachineInstr::findRegisterDefOperandIdx(v9, a5, 0, 0, 0);
      if (RegisterDefOperandIdx != -1)
      {
        uint64_t v37 = *(void *)(v9 + 32);
        if (v37)
        {
          if ((*(unsigned char *)(v37 + 32 * RegisterDefOperandIdx + 3) & 0x40) != 0) {
            uint64_t v36 = v35 | 2;
          }
        }
      }
    }
    unsigned int v38 = llvm::dbgs(RegisterDefOperandIdx);
    __int16 v39 = v38;
    uint64_t v40 = (char *)*((void *)v38 + 4);
    if ((unint64_t)v40 >= *((void *)v38 + 3))
    {
      llvm::raw_ostream::write(v38, v11);
    }
    else
    {
      *((void *)v38 + 4) = v40 + 1;
      char *v40 = v11;
    }
    uint64_t v42 = v36;
    llvm::SlotIndex::print((llvm::SlotIndex *)&v42, v39);
    unsigned int v41 = (unsigned char *)*((void *)v39 + 4);
    if ((unint64_t)v41 >= *((void *)v39 + 3))
    {
      llvm::raw_ostream::write(v39, 9);
    }
    else
    {
      *((void *)v39 + 4) = v41 + 1;
      unsigned char *v41 = 9;
    }
    llvm::MachineInstr::print((llvm::MachineInstr *)v9, v39, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
    if ((*(unsigned char *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 8) != 0)
        uint64_t v9 = *(void *)(v9 + 8);
    }
  }
}

uint64_t sub_1CC2C3C94(uint64_t a1)
{
  *(void *)a1 = &unk_1F260C438;
  *(void *)(a1 + 440) = &unk_1F260C470;
  sub_1CC2CA9F4(a1 + 760);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 760), 8);
  uint64_t v8 = (void **)(a1 + 736);
  sub_1CC2CAA6C(&v8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 712), 8);
  sub_1CC2CAAF8((uint64_t *)(a1 + 688));
  int v2 = *(void **)(a1 + 544);
  if (v2 != (void *)(a1 + 560)) {
    free(v2);
  }
  int v3 = *(void **)(a1 + 360);
  if (v3 != (void *)(a1 + 376)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 272);
  if (v4 != *(void **)(a1 + 264)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != *(void **)(a1 + 168)) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 120);
  if (v6 != (void *)(a1 + 136)) {
    free(v6);
  }
  return a1;
}

void sub_1CC2C3D90(uint64_t a1)
{
  sub_1CC2C3C94(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC2C3DC8(uint64_t a1, uint64_t a2)
{
  v590[16] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 96) = a2;
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(_DWORD *)(v4 + 112);
  if (*(_DWORD *)(*(void *)(v3 + 328) + 4 * (v5 & 0x7FFFFFFF))) {
    int v5 = *(_DWORD *)(*(void *)(v3 + 328) + 4 * (v5 & 0x7FFFFFFF));
  }
  *(_DWORD *)(a1 + 116) = v5;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)(v3 + 304) + 4 * (v5 & 0x7FFFFFFF));
  *(void *)(a1 + 104) = 0;
  uint64_t v6 = *(unsigned int *)(v4 + 112);
  uint64_t v7 = (void *)(a1 + 120);
  sub_1CBA0E058(a1 + 120, 1uLL, *(_DWORD *)(v4 + 112));
  uint64_t v8 = *(void **)(a1 + 176);
  v563 = (llvm::SmallPtrSetImplBase *)(a1 + 168);
  v567 = v7;
  if (v8 != *(void **)(a1 + 168))
  {
    uint64_t v225 = *(unsigned int *)(a1 + 184);
    if (v225 >= 0x21 && 4 * (*(_DWORD *)(a1 + 188) - *(_DWORD *)(a1 + 192)) < v225)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 168));
      goto LABEL_5;
    }
    memset(v8, 255, 8 * v225);
  }
  *(_DWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 192) = 0;
LABEL_5:
  uint64_t v579 = a1;
  if (*(_DWORD *)(a1 + 116) != v6)
  {
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = (uint64_t *)((v6 & 0x80000000) != 0
                    ? *(void *)(v9 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8
                    : *(void *)(v9 + 272) + 8 * v6);
    uint64_t v11 = *v10;
    if (*v10)
    {
      while (1)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        do
          uint64_t v11 = *(void *)(v11 + 24);
        while (v11 && *(void *)(v11 + 8) == v12);
        if (**(_WORD **)(v12 + 16) != 19) {
          goto LABEL_66;
        }
        uint64_t v13 = *(_DWORD **)(v12 + 32);
        if ((*v13 & 0xFFF00) != 0) {
          goto LABEL_66;
        }
        if ((v13[8] & 0xFFF00) != 0) {
          goto LABEL_66;
        }
        int v14 = v13[9];
        if (v13[1] != v6)
        {
          BOOL v34 = v14 == v6;
          int v14 = v13[1];
          if (!v34) {
            goto LABEL_66;
          }
        }
        if ((v14 & 0x80000000) == 0) {
          goto LABEL_66;
        }
        uint64_t v15 = v14 & 0x7FFFFFFF;
        int v16 = *(_DWORD *)(*(void *)(*(void *)(v579 + 56) + 328) + 4 * v15);
        if (!v16) {
          int v16 = v14;
        }
        if (v16 != *(_DWORD *)(v579 + 116)) {
          goto LABEL_66;
        }
        uint64_t v17 = *(void *)(v579 + 16);
        uint64_t v18 = (void *)(v17 + 408);
        uint64_t v19 = *(unsigned int *)(v17 + 416);
        if (v15 >= v19)
        {
          sub_1CB9153B8((uint64_t)v18, v15 - v19 + 1, *(void *)(v17 + 424));
LABEL_75:
          operator new();
        }
        uint64_t v20 = *(void *)(*v18 + 8 * v15);
        if (!v20) {
          goto LABEL_75;
        }
        if (!sub_1CC2CAD58(v579, v20)) {
          goto LABEL_66;
        }
        uint64_t v21 = v579;
        uint64_t v22 = *(void *)(v579 + 176);
        uint64_t v23 = *(unsigned int *)(v579 + 188);
        if (v22 != *(void *)(v579 + 168)) {
          break;
        }
        if (v23)
        {
          BOOL v24 = 0;
          uint64_t v25 = 8 * v23;
          uint64_t v26 = *(void **)(v579 + 176);
          while (*v26 != v12)
          {
            if (*v26 == -2) {
              BOOL v24 = v26;
            }
            ++v26;
            v25 -= 8;
            if (!v25)
            {
              if (!v24) {
                goto LABEL_34;
              }
              *BOOL v24 = v12;
              --*(_DWORD *)(v579 + 192);
              goto LABEL_58;
            }
          }
          goto LABEL_58;
        }
LABEL_34:
        uint64_t v21 = v579;
        unsigned int v27 = *(_DWORD *)(v579 + 184);
        if (v23 >= v27) {
          goto LABEL_37;
        }
        *(_DWORD *)(v579 + 188) = v23 + 1;
        *(void *)(v22 + 8 * v23) = v12;
LABEL_58:
        uint64_t v37 = *(_DWORD **)(v579 + 120);
        uint64_t v38 = *(unsigned int *)(v579 + 128);
        __int16 v39 = v37;
        if (v38)
        {
          uint64_t v40 = 4 * v38;
          __int16 v39 = *(_DWORD **)(v579 + 120);
          while (*v39 != v14)
          {
            ++v39;
            v40 -= 4;
            if (!v40)
            {
              __int16 v39 = &v37[v38];
              break;
            }
          }
        }
        if (v38 == v39 - v37)
        {
          if (v38 >= *(_DWORD *)(v579 + 132)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v37[v38] = v14;
          ++*(_DWORD *)(v579 + 128);
        }
LABEL_66:
        if (!v11) {
          goto LABEL_77;
        }
      }
      unsigned int v27 = *(_DWORD *)(v579 + 184);
LABEL_37:
      if (3 * v27 <= 4 * ((int)v23 - *(_DWORD *)(v21 + 192)))
      {
        if (v27 >= 0x40) {
          v27 *= 2;
        }
        else {
          unsigned int v27 = 128;
        }
      }
      else if (v27 - v23 >= v27 >> 3)
      {
        goto LABEL_39;
      }
      llvm::SmallPtrSetImplBase::Grow(v563, v27);
      unsigned int v27 = *(_DWORD *)(v579 + 184);
      uint64_t v22 = *(void *)(v579 + 176);
LABEL_39:
      unsigned int v28 = v27 - 1;
      unsigned int v29 = (v27 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      uint64_t v30 = (void *)(v22 + 8 * v29);
      uint64_t v31 = *v30;
      if (*v30 == -1)
      {
        uint64_t v32 = 0;
LABEL_51:
        if (v32) {
          uint64_t v36 = v32;
        }
        else {
          uint64_t v36 = v30;
        }
        if (*v36 != v12)
        {
          if (*v36 == -2) {
            --*(_DWORD *)(v579 + 192);
          }
          else {
            ++*(_DWORD *)(v579 + 188);
          }
          *uint64_t v36 = v12;
        }
      }
      else
      {
        uint64_t v32 = 0;
        int v33 = 1;
        while (v31 != v12)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 == -2;
          }
          if (v34) {
            uint64_t v32 = v30;
          }
          unsigned int v35 = v29 + v33++;
          unsigned int v29 = v35 & v28;
          uint64_t v30 = (void *)(v22 + 8 * (v35 & v28));
          uint64_t v31 = *v30;
          if (*v30 == -1) {
            goto LABEL_51;
          }
        }
      }
      goto LABEL_58;
    }
  }
LABEL_77:
  uint64_t v41 = v579;
  uint64_t v42 = *(void *)(v579 + 96);
  if (!*(unsigned char *)(v42 + 68)) {
    llvm::LiveRangeEdit::scanRemattable(*(void **)(v579 + 96), *(llvm::AAResults **)(v579 + 32));
  }
  if (*(_DWORD *)(v42 + 100) == *(_DWORD *)(v42 + 104)) {
    goto LABEL_387;
  }
  uint64_t v43 = *(void **)(v579 + 272);
  if (v43 != *(void **)(v579 + 264))
  {
    uint64_t v226 = *(unsigned int *)(v579 + 280);
    if (v226 >= 0x21 && 4 * (*(_DWORD *)(v579 + 284) - *(_DWORD *)(v579 + 288)) < v226)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v579 + 264));
      goto LABEL_82;
    }
    memset(v43, 255, 8 * v226);
  }
  *(void *)(v579 + 284) = 0;
LABEL_82:
  uint64_t v44 = *(unsigned int *)(v579 + 128);
  if (!v44) {
    goto LABEL_387;
  }
  uint64_t v45 = 0;
  uint64_t v573 = *(void *)(v579 + 120) + 4 * v44;
  int v46 = *(unsigned int **)(v579 + 120);
  do
  {
    uint64_t v47 = v45;
    v576 = v46;
    uint64_t v48 = *v46;
    uint64_t v49 = *(void *)(v579 + 16);
    unint64_t v50 = v48 & 0x7FFFFFFF;
    uint64_t v51 = (void *)(v49 + 408);
    unint64_t v52 = *(unsigned int *)(v49 + 416);
    BOOL v92 = v50 >= v52;
    unint64_t v53 = v50 - v52;
    if (v92)
    {
      sub_1CB9153B8((uint64_t)v51, v53 + 1, *(void *)(v49 + 424));
LABEL_309:
      operator new();
    }
    uint64_t v54 = *(void *)(*v51 + 8 * v50);
    if (!v54) {
      goto LABEL_309;
    }
    uint64_t v55 = *(void *)(v579 + 64);
    if ((v48 & 0x80000000) != 0) {
      int v56 = (uint64_t *)(*(void *)(v55 + 24) + 16 * v50 + 8);
    }
    else {
      int v56 = (uint64_t *)(*(void *)(v55 + 272) + 8 * v48);
    }
    uint64_t v45 = v47;
    uint64_t v57 = *v56;
    while (v57)
    {
      unint64_t v58 = *(void *)(v57 + 8);
      __int16 v59 = *(_WORD *)(v58 + 44);
      unint64_t v60 = v58;
      if ((v59 & 4) != 0)
      {
        do
          unint64_t v60 = *(void *)v60 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v60 + 44) & 4) != 0);
      }
      do
      {
        uint64_t v57 = *(void *)(v57 + 24);
        if (!v57) {
          break;
        }
        for (unint64_t i = *(void *)(v57 + 8); (*(_WORD *)(i + 44) & 4) != 0; unint64_t i = *(void *)i & 0xFFFFFFFFFFFFFFF8)
          ;
      }
      while (i == v60);
      if ((v59 & 4) != 0)
      {
        do
          unint64_t v58 = *(void *)v58 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v58 + 44) & 4) != 0);
      }
      if (**(unsigned __int16 **)(v58 + 16) - 13 >= 2)
      {
        v588 = v590;
        uint64_t v589 = 0x800000000;
        int v62 = llvm::AnalyzeVirtRegInBundle(v58, *(_DWORD *)(v54 + 112), (uint64_t)&v588);
        if ((v62 & 1) == 0) {
          goto LABEL_102;
        }
        int v64 = v62;
        __int16 v65 = *(_WORD *)(v58 + 44);
        unint64_t v66 = v58;
        if ((v65 & 4) != 0)
        {
          do
            unint64_t v66 = *(void *)v66 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v66 + 44) & 4) != 0);
        }
        unint64_t v67 = v58;
        if ((v65 & 8) != 0)
        {
          do
            unint64_t v67 = *(void *)(v67 + 8);
          while ((*(_WORD *)(v67 + 44) & 8) != 0);
        }
        unint64_t v68 = *(void *)(v67 + 8);
        if (v66 != v68)
        {
          while (1)
          {
            unsigned int v69 = **(unsigned __int16 **)(v66 + 16);
            BOOL v70 = v69 > 0x17;
            int v71 = (1 << v69) & 0x83E000;
            if (v70 || v71 == 0) {
              break;
            }
            unint64_t v66 = *(void *)(v66 + 8);
            if (v66 == v68)
            {
              unint64_t v66 = v68;
              break;
            }
          }
        }
        uint64_t v73 = *(void *)(v579 + 16);
        uint64_t v74 = *(void *)(v73 + 288);
        uint64_t v75 = *(void *)(v74 + 368);
        uint64_t v76 = *(unsigned int *)(v74 + 384);
        if (v76)
        {
          LODWORD(v77) = ((v66 >> 4) ^ (v66 >> 9)) & (v76 - 1);
          uint64_t v78 = (uint64_t *)(v75 + 16 * v77);
          uint64_t v79 = *v78;
          if (v66 == *v78) {
            goto LABEL_119;
          }
          int v80 = 1;
          while (v79 != -4096)
          {
            int v81 = v77 + v80++;
            uint64_t v77 = v81 & (v76 - 1);
            uint64_t v79 = *(void *)(v75 + 16 * v77);
            if (v66 == v79)
            {
              uint64_t v78 = (uint64_t *)(v75 + 16 * v77);
              goto LABEL_119;
            }
          }
        }
        uint64_t v78 = (uint64_t *)(v75 + 16 * v76);
LABEL_119:
        unint64_t v82 = v78[1] & 0xFFFFFFFFFFFFFFF8;
        unsigned int v83 = *(_DWORD *)(v54 + 8);
        unsigned int v84 = *(void **)v54;
        if (!v83)
        {
          unsigned int v83 = 0;
LABEL_129:
          uint64_t v88 = &v84[3 * v83];
          goto LABEL_130;
        }
        uint64_t v85 = v84[3 * v83 - 2];
        unsigned int v86 = *(_DWORD *)(v82 + 24);
        unsigned int v87 = (v85 >> 1) & 3 | *(_DWORD *)((v85 & 0xFFFFFFFFFFFFFFF8) + 24);
        uint64_t v88 = *(void **)v54;
        unint64_t v89 = *(unsigned int *)(v54 + 8);
        if (v86 >= v87) {
          goto LABEL_129;
        }
        do
        {
          unint64_t v90 = v89 >> 1;
          uint64_t v91 = v88[3 * (v89 >> 1) + 1];
          LODWORD(v91) = (v91 >> 1) & 3 | *(_DWORD *)((v91 & 0xFFFFFFFFFFFFFFF8) + 24);
          v89 -= (v89 >> 1) + 1;
          BOOL v92 = v86 >= v91;
          if (v86 >= v91) {
            unint64_t v93 = v90 + 1;
          }
          else {
            unint64_t v93 = 0;
          }
          v88 += 3 * v93;
          if (!v92) {
            unint64_t v89 = v90;
          }
        }
        while (v89);
LABEL_130:
        if (v88 != &v84[3 * v83]
          && ((*v88 >> 1) & 3 | *(_DWORD *)((*v88 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v82 + 24))
        {
          uint64_t v94 = v88[2];
          if (v94)
          {
            uint64_t v96 = *(void *)(v579 + 168);
            uint64_t v95 = *(void *)(v579 + 176);
            if (v95 == v96)
            {
              uint64_t v97 = *(unsigned int *)(v579 + 188);
              int v98 = (void *)(v95 + 8 * v97);
              if (v97)
              {
                uint64_t v99 = 0;
                uint64_t v100 = 8 * v97;
                while (*(void *)(v95 + v99) != v58)
                {
                  v99 += 8;
                  if (v100 == v99) {
                    goto LABEL_161;
                  }
                }
                int v98 = (void *)(v95 + v99);
              }
LABEL_161:
              uint64_t v96 = *(void *)(v579 + 176);
            }
            else
            {
              uint64_t v104 = *(unsigned int *)(v579 + 184);
              int v105 = v104 - 1;
              unsigned int v106 = (v104 - 1) & ((v58 >> 4) ^ (v58 >> 9));
              int v98 = (void *)(v95 + 8 * v106);
              uint64_t v107 = *v98;
              if (*v98 == -1)
              {
                unsigned int v108 = 0;
LABEL_177:
                if (v108) {
                  int v98 = v108;
                }
                if (*v98 != v58) {
                  int v98 = (void *)(v95 + 8 * v104);
                }
              }
              else
              {
                unsigned int v108 = 0;
                int v109 = 1;
                while (v107 != v58)
                {
                  if (v108) {
                    BOOL v110 = 0;
                  }
                  else {
                    BOOL v110 = v107 == -2;
                  }
                  if (v110) {
                    unsigned int v108 = v98;
                  }
                  unsigned int v111 = v106 + v109++;
                  unsigned int v106 = v111 & v105;
                  int v98 = (void *)(v95 + 8 * (v111 & v105));
                  uint64_t v107 = *v98;
                  if (*v98 == -1) {
                    goto LABEL_177;
                  }
                }
              }
            }
            BOOL v34 = v95 == v96;
            uint64_t v112 = (unsigned int *)(v579 + 188);
            if (!v34) {
              uint64_t v112 = (unsigned int *)(v579 + 184);
            }
            if (v98 != (void *)(v95 + 8 * *v112)) {
              goto LABEL_102;
            }
            int v569 = v45;
            int v113 = *(_DWORD *)(v579 + 116);
            uint64_t v114 = v113 & 0x7FFFFFFF;
            uint64_t v115 = (void *)(v73 + 408);
            uint64_t v116 = *(unsigned int *)(v73 + 416);
            if ((v113 & 0x7FFFFFFFu) >= v116)
            {
              sub_1CB9153B8((uint64_t)v115, v114 - v116 + 1, *(void *)(v73 + 424));
LABEL_290:
              operator new();
            }
            uint64_t v45 = *(void *)(*v115 + 8 * v114);
            if (!v45) {
              goto LABEL_290;
            }
            unsigned int v117 = *(_DWORD *)(v45 + 8);
            int v118 = *(void **)v45;
            if (v117)
            {
              uint64_t v119 = v118[3 * v117 - 2];
              unsigned int v120 = *(_DWORD *)(v82 + 24) | 1;
              unsigned int v121 = (v119 >> 1) & 3 | *(_DWORD *)((v119 & 0xFFFFFFFFFFFFFFF8) + 24);
              int v122 = *(void **)v45;
              unint64_t v123 = *(unsigned int *)(v45 + 8);
              LODWORD(v45) = v569;
              if (v120 < v121)
              {
                do
                {
                  unint64_t v124 = v123 >> 1;
                  uint64_t v125 = v122[3 * (v123 >> 1) + 1];
                  LODWORD(v125) = (v125 >> 1) & 3 | *(_DWORD *)((v125 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v123 -= (v123 >> 1) + 1;
                  BOOL v126 = v120 >= v125;
                  if (v120 >= v125) {
                    unint64_t v127 = v124 + 1;
                  }
                  else {
                    unint64_t v127 = 0;
                  }
                  v122 += 3 * v127;
                  if (!v126) {
                    unint64_t v123 = v124;
                  }
                }
                while (v123);
LABEL_183:
                if (v122 == &v118[3 * v117]
                  || ((*v122 >> 1) & 3 | *(_DWORD *)((*v122 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v82 + 24) | 1u))
                {
                  uint64_t v128 = 0;
                }
                else
                {
                  uint64_t v128 = v122[2];
                }
                v583 = (unsigned __int8 **)v94;
                unint64_t v129 = *(void *)(v128 + 8);
                uint64_t v130 = v94;
                if (v129 < 8) {
                  uint64_t v131 = 0;
                }
                else {
                  uint64_t v131 = *(void *)((v129 & 0xFFFFFFFFFFFFFFF8) + 16);
                }
                uint64_t v584 = v131;
                if ((llvm::LiveRangeEdit::canRematerializeAt(*(void *)(v579 + 96), (uint64_t)&v583, v128, v82 | 2, 0) & 1) == 0)
                {
                  uint64_t v140 = v579;
LABEL_236:
                  sub_1CC2CAF3C(v140, v54, v130);
LABEL_102:
                  int v63 = 0;
                  goto LABEL_146;
                }
                if ((v64 & 0x10000) != 0) {
                  goto LABEL_235;
                }
                if ((*(unsigned char *)(*(void *)(v584 + 16) + 10) & 4) != 0
                  && sub_1CC2CB754(v579, (uint64_t)v588, v589, v584))
                {
                  uint64_t v132 = *(void *)(v579 + 96);
                  uint64_t v133 = (uint64_t)v583;
                  uint64_t v134 = *(void *)(v132 + 152);
                  uint64_t v135 = *(unsigned int *)(v132 + 164);
                  if (v134 == *(void *)(v132 + 144))
                  {
                    if (v135)
                    {
                      uint64_t v136 = 0;
                      uint64_t v137 = 8 * v135;
                      uint64_t v138 = *(unsigned __int8 ****)(v132 + 152);
                      while (*v138 != v583)
                      {
                        if (*v138 == (unsigned __int8 **)-2) {
                          uint64_t v136 = v138;
                        }
                        ++v138;
                        v137 -= 8;
                        if (!v137)
                        {
                          if (!v136) {
                            goto LABEL_202;
                          }
                          *uint64_t v136 = v583;
                          --*(_DWORD *)(v132 + 168);
                          goto LABEL_250;
                        }
                      }
                      goto LABEL_250;
                    }
LABEL_202:
                    unsigned int v139 = *(_DWORD *)(v132 + 160);
                    if (v135 < v139)
                    {
                      *(_DWORD *)(v132 + 164) = v135 + 1;
                      *(void *)(v134 + 8 * v135) = v133;
LABEL_250:
                      int v63 = 1;
                      LODWORD(v45) = v569;
                      goto LABEL_146;
                    }
                  }
                  else
                  {
                    unsigned int v139 = *(_DWORD *)(v132 + 160);
                  }
                  if (3 * v139 <= 4 * ((int)v135 - *(_DWORD *)(v132 + 168)))
                  {
                    if (v139 >= 0x40) {
                      v139 *= 2;
                    }
                    else {
                      unsigned int v139 = 128;
                    }
                  }
                  else if (v139 - v135 >= v139 >> 3)
                  {
                    goto LABEL_216;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v132 + 144), v139);
                  unsigned int v139 = *(_DWORD *)(v132 + 160);
                  uint64_t v134 = *(void *)(v132 + 152);
LABEL_216:
                  unsigned int v146 = v139 - 1;
                  unsigned int v147 = (v139 - 1) & ((v133 >> 4) ^ (v133 >> 9));
                  uint64_t v148 = (uint64_t *)(v134 + 8 * v147);
                  uint64_t v149 = *v148;
                  if (*v148 == -1)
                  {
                    uint64_t v150 = 0;
LABEL_258:
                    if (v150) {
                      int v173 = v150;
                    }
                    else {
                      int v173 = v148;
                    }
                    if (*v173 != v133)
                    {
                      if (*v173 == -2) {
                        --*(_DWORD *)(v132 + 168);
                      }
                      else {
                        ++*(_DWORD *)(v132 + 164);
                      }
                      *int v173 = v133;
                    }
                  }
                  else
                  {
                    uint64_t v150 = 0;
                    int v151 = 1;
                    while (v149 != v133)
                    {
                      if (v150) {
                        BOOL v152 = 0;
                      }
                      else {
                        BOOL v152 = v149 == -2;
                      }
                      if (v152) {
                        uint64_t v150 = v148;
                      }
                      unsigned int v153 = v147 + v151++;
                      unsigned int v147 = v153 & v146;
                      uint64_t v148 = (uint64_t *)(v134 + 8 * (v153 & v146));
                      uint64_t v149 = *v148;
                      if (*v148 == -1) {
                        goto LABEL_258;
                      }
                    }
                  }
                  goto LABEL_250;
                }
                if (byte_1EBCCD190)
                {
                  uint64_t v141 = *(void *)(v58 + 16);
                  if (*(_WORD *)v141 == 31)
                  {
                    unsigned int v142 = *(unsigned __int8 *)(v141 + 4);
                    if ((*(unsigned char *)(v141 + 8) & 2) == 0 || (int v174 = *(_DWORD *)(v58 + 40), v174 == v142))
                    {
                      int v143 = *(unsigned __int8 *)(v141 + 4);
                    }
                    else
                    {
                      int v175 = v174 - 1;
                      int v143 = *(unsigned __int8 *)(v141 + 4);
                      do
                      {
                        int v176 = *(_DWORD *)(*(void *)(v58 + 32) + 32 * v142);
                        if ((v176 & 0x10000FF) != 0x1000000) {
                          break;
                        }
                        v143 += (v176 & 0x2000000) == 0;
                        if (v175 == v142) {
                          break;
                        }
                        ++v142;
                      }
                      while ((v176 & 0x2000000) == 0);
                    }
                    uint64_t v144 = *(void *)(v141 + 32);
                    if (v144)
                    {
                      unsigned int v145 = -1;
                      do
                        ++v145;
                      while (*(_WORD *)(v144 + 2 * v145));
                    }
                    else
                    {
                      unsigned int v145 = 0;
                    }
                    int v154 = v145 + v143;
                    uint64_t v155 = *(void *)(v58 + 32);
                    uint64_t v156 = (v154 + *(_DWORD *)(v155 + 32 * (v154 + 2) + 16) + 4);
                    uint64_t v157 = *(unsigned int *)(v58 + 40);
                    if (v156 < v157)
                    {
                      uint64_t v158 = v157 - v156;
                      uint64_t v159 = (_DWORD *)(v155 + 32 * v156 + 4);
                      while (*((unsigned char *)v159 - 4) || *v159 != *(_DWORD *)(v54 + 112))
                      {
                        v159 += 8;
                        if (!--v158) {
                          goto LABEL_233;
                        }
                      }
LABEL_235:
                      uint64_t v140 = v579;
                      goto LABEL_236;
                    }
                  }
                }
LABEL_233:
                unsigned int v160 = llvm::LiveRangeEdit::createFrom(*(void **)(v579 + 96), *(_DWORD *)(v579 + 116));
                unint64_t v161 = llvm::LiveRangeEdit::rematerializeAt(*(void *)(v579 + 96), *(void *)(v58 + 24), (void *)v58, v160, (uint64_t *)&v583, *(void *)(v579 + 80), 0);
                if (v161 < 8) {
                  uint64_t v162 = 0;
                }
                else {
                  uint64_t v162 = *(void *)((v161 & 0xFFFFFFFFFFFFFFF8) + 16);
                }
                uint64_t v163 = *(unsigned __int8 **)(v58 + 56);
                v587 = v163;
                if (v163) {
                  llvm::MetadataTracking::track((uint64_t)&v587, v163, 2);
                }
                uint64_t v164 = (unsigned __int8 **)(v162 + 56);
                if (&v587 != (unsigned __int8 **)(v162 + 56))
                {
                  uint64_t v165 = *v164;
                  if (!*v164) {
                    goto LABEL_242;
                  }
                  int v170 = *v165;
                  if ((v170 - 4) <= 0x1E)
                  {
                    if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
                      goto LABEL_242;
                    }
                    uint64_t v171 = *((void *)v165 + 2);
                    if ((v171 & 4) == 0) {
                      goto LABEL_242;
                    }
                    unint64_t v172 = v171 & 0xFFFFFFFFFFFFFFF8;
                    if (!v172) {
                      goto LABEL_242;
                    }
                    goto LABEL_276;
                  }
                  if ((v170 - 3) >= 0xFFFFFFFE) {
                    uint64_t v177 = *v164;
                  }
                  else {
                    uint64_t v177 = 0;
                  }
                  if ((v170 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v172 = (unint64_t)(v177 + 8);
LABEL_276:
                    v580[0] = v162 + 56;
                    sub_1CC5FA668(v172 + 16, v580);
                    goto LABEL_242;
                  }
                  if (v170 == 3) {
                    *((void *)v165 + 1) = 0;
                  }
LABEL_242:
                  uint64_t v166 = v587;
                  uint64_t *v164 = v587;
                  if (v166)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v587, v166, v162 + 56);
                    v587 = 0;
                  }
LABEL_244:
                  if (v589)
                  {
                    uint64_t v167 = (unsigned int *)v588;
                    unint64_t v168 = (unsigned int *)((char *)v588 + 16 * v589);
                    do
                    {
                      uint64_t v169 = (_DWORD *)(*(void *)(*(void *)v167 + 32) + 32 * v167[2]);
                      if ((*v169 & 0x10000FF) == 0 && v169[1] == *(_DWORD *)(v54 + 112))
                      {
                        llvm::MachineOperand::setReg(*(void *)(*(void *)v167 + 32) + 32 * v167[2], v160);
                        *v169 |= 0x4000000u;
                      }
                      v167 += 4;
                    }
                    while (v167 != v168);
                  }
                  goto LABEL_250;
                }
                if (!v587) {
                  goto LABEL_244;
                }
                int v178 = *v587;
                if ((v178 - 4) > 0x1E)
                {
                  if ((v178 - 3) >= 0xFFFFFFFE) {
                    uint64_t v181 = v587;
                  }
                  else {
                    uint64_t v181 = 0;
                  }
                  if ((v178 - 3) < 0xFFFFFFFE)
                  {
                    if (v178 == 3) {
                      *((void *)v587 + 1) = 0;
                    }
                    goto LABEL_244;
                  }
                  unint64_t v180 = (unint64_t)(v181 + 8);
                }
                else
                {
                  if ((v587[1] & 0x7F) != 2 && !*((_DWORD *)v587 + 3)) {
                    goto LABEL_244;
                  }
                  uint64_t v179 = *((void *)v587 + 2);
                  if ((v179 & 4) == 0) {
                    goto LABEL_244;
                  }
                  unint64_t v180 = v179 & 0xFFFFFFFFFFFFFFF8;
                  if (!v180) {
                    goto LABEL_244;
                  }
                }
                v580[0] = &v587;
                sub_1CC5FA668(v180 + 16, v580);
                goto LABEL_244;
              }
            }
            else
            {
              unsigned int v117 = 0;
              LODWORD(v45) = v569;
            }
            int v122 = &v118[3 * v117];
            goto LABEL_183;
          }
        }
        uint64_t v101 = *(unsigned int *)(v58 + 40);
        if (v101)
        {
          unsigned int v102 = *(_DWORD **)(v58 + 32);
          uint64_t v103 = 32 * v101;
          do
          {
            if ((*v102 & 0x10000FF) == 0 && v102[1] == *(_DWORD *)(v54 + 112)) {
              *v102 |= 0x10000000u;
            }
            v102 += 8;
            v103 -= 32;
          }
          while (v103);
        }
        int v63 = 1;
LABEL_146:
        if (v588 != v590) {
          free(v588);
        }
        uint64_t v45 = v45 | v63;
      }
    }
    int v46 = v576 + 1;
  }
  while (v576 + 1 != (unsigned int *)v573);
  uint64_t v41 = v579;
  if (v45)
  {
    uint64_t v182 = *(unsigned int *)(v579 + 128);
    if (v182)
    {
      uint64_t v183 = *(unsigned int **)(v579 + 120);
      v577 = &v183[v182];
      do
      {
        unsigned int v184 = *v183;
        uint64_t v185 = *(void *)(v579 + 16);
        uint64_t v186 = (void *)(v185 + 408);
        unint64_t v187 = *(unsigned int *)(v185 + 416);
        BOOL v92 = (*v183 & 0x7FFFFFFF) >= v187;
        unint64_t v188 = (*v183 & 0x7FFFFFFF) - v187;
        if (v92)
        {
          sub_1CB9153B8((uint64_t)v186, v188 + 1, *(void *)(v185 + 424));
LABEL_365:
          operator new();
        }
        uint64_t v189 = *(void *)(*v186 + 8 * (*v183 & 0x7FFFFFFF));
        if (!v189) {
          goto LABEL_365;
        }
        uint64_t v190 = *(unsigned int *)(v189 + 72);
        if (v190)
        {
          uint64_t v191 = *(uint64_t **)(v189 + 64);
          unsigned int v192 = &v191[v190];
          do
          {
            uint64_t v193 = *v191;
            unint64_t v194 = *(void *)(*v191 + 8);
            if (v194 >= 8 && (*(void *)(*v191 + 8) & 6) != 0)
            {
              uint64_t v197 = *(void *)(v579 + 264);
              uint64_t v196 = *(void *)(v579 + 272);
              if (v196 == v197)
              {
                uint64_t v198 = *(unsigned int *)(v579 + 284);
                uint64_t v199 = (void *)(v196 + 8 * v198);
                if (v198)
                {
                  uint64_t v200 = 0;
                  uint64_t v201 = 8 * v198;
                  while (*(void *)(v196 + v200) != v193)
                  {
                    v200 += 8;
                    if (v201 == v200) {
                      goto LABEL_339;
                    }
                  }
                  uint64_t v199 = (void *)(v196 + v200);
                }
LABEL_339:
                uint64_t v197 = *(void *)(v579 + 272);
              }
              else
              {
                uint64_t v202 = *(unsigned int *)(v579 + 280);
                int v203 = v202 - 1;
                unsigned int v204 = (v202 - 1) & ((v193 >> 4) ^ (v193 >> 9));
                uint64_t v199 = (void *)(v196 + 8 * v204);
                uint64_t v205 = *v199;
                if (*v199 == -1)
                {
                  uint64_t v206 = 0;
LABEL_357:
                  if (v206) {
                    uint64_t v199 = v206;
                  }
                  if (*v199 != v193) {
                    uint64_t v199 = (void *)(v196 + 8 * v202);
                  }
                }
                else
                {
                  uint64_t v206 = 0;
                  int v207 = 1;
                  while (v205 != v193)
                  {
                    if (v206) {
                      BOOL v208 = 0;
                    }
                    else {
                      BOOL v208 = v205 == -2;
                    }
                    if (v208) {
                      uint64_t v206 = v199;
                    }
                    unsigned int v209 = v204 + v207++;
                    unsigned int v204 = v209 & v203;
                    uint64_t v199 = (void *)(v196 + 8 * (v209 & v203));
                    uint64_t v205 = *v199;
                    if (*v199 == -1) {
                      goto LABEL_357;
                    }
                  }
                }
              }
              if (v196 == v197) {
                long long v210 = (unsigned int *)(v579 + 284);
              }
              else {
                long long v210 = (unsigned int *)(v579 + 280);
              }
              if (v199 == (void *)(v196 + 8 * *v210))
              {
                uint64_t v211 = *(void *)((v194 & 0xFFFFFFFFFFFFFFF8) + 16);
                llvm::MachineInstr::addRegisterDead((llvm::MachineInstr *)v211, v184, *(void *)(v579 + 80), 0);
                uint64_t v212 = *(unsigned int *)(v211 + 40);
                if (v212)
                {
                  unint64_t v213 = *(_DWORD **)(v211 + 32);
                  uint64_t v214 = 32 * v212;
                  while ((*v213 & 0x10000FF) != 0x1000000 || (*v213 & 0x5000000) == 83886080)
                  {
                    v213 += 8;
                    v214 -= 32;
                    if (!v214) {
                      goto LABEL_354;
                    }
                  }
                }
                else
                {
LABEL_354:
                  unint64_t v216 = *(unsigned int *)(v579 + 368);
                  if (v216 >= *(unsigned int *)(v579 + 372)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(v579 + 360) + 8 * v216) = v211;
                  ++*(_DWORD *)(v579 + 368);
                }
              }
            }
            ++v191;
          }
          while (v191 != v192);
        }
        ++v183;
      }
      while (v183 != v577);
    }
    uint64_t v41 = v579;
    if (*(_DWORD *)(v579 + 368))
    {
      llvm::LiveRangeEdit::eliminateDeadDefs(*(void **)(v579 + 96), v579 + 360, *(_DWORD **)(v579 + 120), *(unsigned int *)(v579 + 128), *(llvm::AAResults **)(v579 + 32));
      uint64_t v217 = *(unsigned int *)(v579 + 128);
      if (v217)
      {
        unsigned int v218 = 0;
        uint64_t v219 = *(unsigned int **)(v579 + 120);
        unint64_t v220 = &v219[v217];
        do
        {
          uint64_t v221 = *v219;
          uint64_t v222 = *(void *)(v579 + 64);
          if ((v221 & 0x80000000) != 0) {
            int v223 = (uint64_t *)(*(void *)(v222 + 24) + 16 * (v221 & 0x7FFFFFFF) + 8);
          }
          else {
            int v223 = (uint64_t *)(*(void *)(v222 + 272) + 8 * v221);
          }
          uint64_t v224 = *v223;
          if (v224)
          {
            while ((*(_DWORD *)v224 & 0x80000000) != 0)
            {
              uint64_t v224 = *(void *)(v224 + 24);
              if (!v224) {
                goto LABEL_375;
              }
            }
            *(_DWORD *)(*v567 + 4 * v218++) = v221;
          }
          else
          {
LABEL_375:
            llvm::LiveRangeEdit::eraseVirtReg(*(void *)(v579 + 96), v221);
          }
          ++v219;
        }
        while (v219 != v220);
      }
      else
      {
        unsigned int v218 = 0;
      }
      *(_DWORD *)(v579 + 128) = v218;
    }
  }
LABEL_387:
  uint64_t v227 = v41;
  if (*(_DWORD *)(v41 + 128))
  {
    if (*(_DWORD *)(v41 + 112) == 0x3FFFFFFF)
    {
      uint64_t v228 = *(void *)(v41 + 56);
      uint64_t v229 = *(_DWORD *)(v41 + 116) & 0x7FFFFFFF;
      unsigned int SpillSlot = llvm::VirtRegMap::createSpillSlot(v228, *(void *)(*(void *)(*(void *)(*(void *)(v228 + 272) + 40) + 24) + 16 * v229) & 0xFFFFFFFFFFFFFFF8);
      *(_DWORD *)(*(void *)(v228 + 304) + 4 * v229) = SpillSlot;
      *(_DWORD *)(v41 + 112) = SpillSlot;
      Interval = llvm::LiveStacks::getOrCreateInterval(*(void *)(v41 + 24), SpillSlot, *(void *)(*(void *)(*(void *)(v41 + 64) + 24) + 16 * (*(_DWORD *)(v41 + 116) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v41 + 104) = Interval;
      uint64_t v232 = *(void *)(v41 + 24);
      *(void *)(v232 + 336) += 16;
      uint64_t v233 = *(void *)(v232 + 256);
      if (((v233 + 7) & 0xFFFFFFFFFFFFFFF8) - v233 + 16 > *(void *)(v232 + 264) - v233)
      {
        unsigned int v557 = *(_DWORD *)(v232 + 280) >> 7;
        if (v557 >= 0x1E) {
          LOBYTE(v557) = 30;
        }
        uint64_t v558 = 4096 << v557;
        unint64_t v234 = (unint64_t)operator new(4096 << v557, (std::align_val_t)8uLL);
        unsigned int v559 = *(_DWORD *)(v232 + 280);
        if (v559 >= *(_DWORD *)(v232 + 284)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v232 + 272) + 8 * v559) = v234;
        ++*(_DWORD *)(v232 + 280);
        *(void *)(v232 + 264) = v234 + v558;
      }
      else
      {
        unint64_t v234 = (v233 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v232 + 256) = v234 + 16;
      unsigned int v235 = *((_DWORD *)Interval + 18);
      *(_DWORD *)unint64_t v234 = v235;
      *(void *)(v234 + 8) = 0;
      if (v235 >= *((_DWORD *)Interval + 19)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(Interval[8] + 8 * v235) = v234;
      ++*((_DWORD *)Interval + 18);
    }
    else
    {
      uint64_t v236 = *(void *)(v41 + 24);
      LODWORD(v588) = *(_DWORD *)(v41 + 112);
      *(void *)(v41 + 104) = sub_1CC2CD930((void *)(v236 + 352), (int *)&v588) + 3;
    }
    int v237 = *(_DWORD *)(*(void *)(*(void *)(v227 + 96) + 8) + 112);
    if (*(_DWORD *)(v227 + 116) != v237) {
      *(_DWORD *)(*(void *)(*(void *)(v227 + 56) + 304) + 4 * (v237 & 0x7FFFFFFF)) = *(_DWORD *)(v227 + 112);
    }
    int v238 = *(int **)(v227 + 120);
    uint64_t v239 = *(unsigned int *)(v227 + 128);
    if (v239)
    {
      uint64_t v240 = 4 * v239;
      do
      {
        uint64_t v241 = v238;
        int v242 = *v238;
        uint64_t v243 = *(void *)(v227 + 16);
        uint64_t v244 = *v238 & 0x7FFFFFFF;
        unint64_t v245 = (void *)(v243 + 408);
        uint64_t v246 = *(unsigned int *)(v243 + 416);
        if ((v242 & 0x7FFFFFFFu) >= v246)
        {
          sub_1CB9153B8((uint64_t)v245, v244 - v246 + 1, *(void *)(v243 + 424));
LABEL_403:
          operator new();
        }
        uint64_t v247 = *(void *)(*v245 + 8 * v244);
        if (!v247) {
          goto LABEL_403;
        }
        llvm::LiveRange::MergeSegmentsInAsValue(*(void *)(v227 + 104), v247, **(void **)(*(void *)(v227 + 104) + 64));
        int v238 = v241 + 1;
        v240 -= 4;
      }
      while (v240);
      int v238 = *(int **)(v227 + 120);
      uint64_t v239 = *(unsigned int *)(v227 + 128);
      if (!v239) {
        goto LABEL_879;
      }
      v578 = (unsigned int *)(v227 + 188);
      v574 = (unsigned int *)(v227 + 184);
      uint64_t v564 = v227 + 440;
      v565 = (unsigned int *)&v238[v239];
      while (1)
      {
        unint64_t v248 = *v238;
        uint64_t v249 = *(void *)(v227 + 16);
        unint64_t v250 = v248 & 0x7FFFFFFF;
        unint64_t v251 = (void *)(v249 + 408);
        unint64_t v252 = *(unsigned int *)(v249 + 416);
        BOOL v92 = v250 >= v252;
        unint64_t v253 = v250 - v252;
        if (v92)
        {
          sub_1CB9153B8((uint64_t)v251, v253 + 1, *(void *)(v249 + 424));
LABEL_878:
          operator new();
        }
        if (!*(void *)(*v251 + 8 * v250)) {
          goto LABEL_878;
        }
        v566 = v238;
        uint64_t v568 = *(void *)(*v251 + 8 * v250);
        uint64_t v254 = *(void *)(v227 + 64);
        uint64_t v255 = (uint64_t *)((v248 & 0x80000000) != 0
                         ? *(void *)(v254 + 24) + 16 * v250 + 8
                         : *(void *)(v254 + 272) + 8 * v248);
        uint64_t v256 = *v255;
        if (*v255) {
          break;
        }
LABEL_875:
        int v238 = v566 + 1;
        if (v566 + 1 == (int *)v565)
        {
          int v238 = *(int **)(v227 + 120);
          LODWORD(v239) = *(_DWORD *)(v227 + 128);
          goto LABEL_879;
        }
      }
      int v575 = *v238;
      while (2)
      {
        unint64_t v257 = *(void *)(v256 + 8);
        __int16 v258 = *(_WORD *)(v257 + 44);
        unint64_t v259 = v257;
        if ((v258 & 4) != 0)
        {
          do
            unint64_t v259 = *(void *)v259 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v259 + 44) & 4) != 0);
        }
        do
        {
          uint64_t v256 = *(void *)(v256 + 24);
          if (!v256) {
            break;
          }
          for (unint64_t j = *(void *)(v256 + 8); (*(_WORD *)(j + 44) & 4) != 0; unint64_t j = *(void *)j & 0xFFFFFFFFFFFFFFF8)
            ;
        }
        while (j == v259);
        if ((v258 & 4) != 0)
        {
          do
            unint64_t v257 = *(void *)v257 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v257 + 44) & 4) != 0);
        }
        if (**(unsigned __int16 **)(v257 + 16) - 13 <= 1)
        {
          uint64_t v261 = *(void *)(v257 + 24);
          llvm::buildDbgValueForSpill(v261, (unint64_t *)v257, v257, *(_DWORD *)(v227 + 112), v248);
          if (!v257)
          {
            unint64_t v262 = 0;
            goto LABEL_425;
          }
          unint64_t v262 = v257;
          if ((*(unsigned char *)v257 & 4) == 0)
          {
LABEL_425:
            while ((*(_WORD *)(v262 + 44) & 8) != 0)
              unint64_t v262 = *(void *)(v262 + 8);
          }
          uint64_t v269 = *(void *)(v262 + 8);
          if (v269 != v257)
          {
            do
            {
              unint64_t v248 = *(void *)(v257 + 8);
              uint64_t v270 = *(void *)(*(void *)(v257 + 24) + 32);
              if (v270)
              {
                uint64_t v271 = *(void *)(v270 + 728);
                if (v271) {
                  (*(void (**)(uint64_t, unint64_t))(*(void *)v271 + 32))(v271, v257);
                }
                uint64_t v272 = *(unsigned int *)(v257 + 40);
                if (v272)
                {
                  uint64_t v273 = *(void *)(v257 + 32);
                  uint64_t v274 = *(void *)(v270 + 40);
                  uint64_t v275 = 32 * v272;
                  do
                  {
                    if (!*(unsigned char *)v273)
                    {
                      uint64_t v276 = *(unsigned int *)(v273 + 4);
                      if ((v276 & 0x80000000) != 0) {
                        unint64_t v277 = (uint64_t *)(*(void *)(v274 + 24) + 16 * (v276 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        unint64_t v277 = (uint64_t *)(*(void *)(v274 + 272) + 8 * v276);
                      }
                      uint64_t v278 = *v277;
                      uint64_t v280 = *(void *)(v273 + 16);
                      uint64_t v279 = *(void *)(v273 + 24);
                      if (v273 != *v277) {
                        unint64_t v277 = (uint64_t *)(v280 + 24);
                      }
                      *unint64_t v277 = v279;
                      if (v279) {
                        uint64_t v281 = v279;
                      }
                      else {
                        uint64_t v281 = v278;
                      }
                      *(void *)(v281 + 16) = v280;
                      *(void *)(v273 + 16) = 0;
                      *(void *)(v273 + 24) = 0;
                    }
                    v273 += 32;
                    v275 -= 32;
                  }
                  while (v275);
                }
              }
              *(void *)(v257 + 24) = 0;
              uint64_t v282 = *(unint64_t **)(v257 + 8);
              unint64_t v283 = *(void *)v257 & 0xFFFFFFFFFFFFFFF8;
              *uint64_t v282 = v283 | *v282 & 7;
              *(void *)(v283 + 8) = v282;
              *(void *)v257 &= 7uLL;
              *(void *)(v257 + 8) = 0;
              uint64_t v284 = *(void *)(*(void *)(v261 + 40) + 32);
              unsigned int v285 = *(void **)(v257 + 32);
              if (v285)
              {
                uint64_t v286 = *(unsigned __int8 *)(v257 + 47);
                unsigned int v287 = (uint64_t *)(v284 + 232);
                if (*(_DWORD *)(v284 + 240) <= v286) {
                  sub_1CC34BDE0(v284 + 232, v286 + 1);
                }
                uint64_t v288 = *v287;
                *unsigned int v285 = *(void *)(*v287 + 8 * v286);
                *(void *)(v288 + 8 * v286) = v285;
              }
              *(void *)unint64_t v257 = *(void *)(v284 + 224);
              *(void *)(v284 + 224) = v257;
              unint64_t v257 = v248;
              BOOL v34 = v248 == v269;
              LODWORD(v248) = v575;
            }
            while (!v34);
          }
LABEL_688:
          if (!v256) {
            goto LABEL_875;
          }
          continue;
        }
        break;
      }
      uint64_t v264 = *(void *)(v227 + 168);
      uint64_t v263 = *(void *)(v227 + 176);
      if (v263 == v264)
      {
        uint64_t v265 = *v578;
        uint64_t v266 = (void *)(v263 + 8 * v265);
        if (v265)
        {
          uint64_t v267 = 0;
          uint64_t v268 = 8 * v265;
          while (*(void *)(v263 + v267) != v257)
          {
            v267 += 8;
            if (v268 == v267) {
              goto LABEL_470;
            }
          }
          uint64_t v266 = (void *)(v263 + v267);
        }
LABEL_470:
        uint64_t v264 = *(void *)(v227 + 176);
      }
      else
      {
        uint64_t v289 = *v574;
        int v290 = v289 - 1;
        unsigned int v291 = (v289 - 1) & ((v257 >> 4) ^ (v257 >> 9));
        uint64_t v266 = (void *)(v263 + 8 * v291);
        uint64_t v292 = *v266;
        if (*v266 == -1)
        {
          uint64_t v293 = 0;
LABEL_502:
          if (v293) {
            uint64_t v266 = v293;
          }
          if (*v266 != v257) {
            uint64_t v266 = (void *)(v263 + 8 * v289);
          }
        }
        else
        {
          uint64_t v293 = 0;
          int v294 = 1;
          while (v292 != v257)
          {
            if (v293) {
              BOOL v295 = 0;
            }
            else {
              BOOL v295 = v292 == -2;
            }
            if (v295) {
              uint64_t v293 = v266;
            }
            unsigned int v296 = v291 + v294++;
            unsigned int v291 = v296 & v290;
            uint64_t v266 = (void *)(v263 + 8 * (v296 & v290));
            uint64_t v292 = *v266;
            if (*v266 == -1) {
              goto LABEL_502;
            }
          }
        }
      }
      BOOL v34 = v263 == v264;
      uint64_t v297 = v578;
      if (!v34) {
        uint64_t v297 = v574;
      }
      if (v266 != (void *)(v263 + 8 * *v297)) {
        goto LABEL_688;
      }
      LODWORD(v588) = 0;
      int v298 = (*(uint64_t (**)(void, unint64_t, void **))(**(void **)(v227 + 72) + 64))(*(void *)(v227 + 72), v257, &v588);
      int v299 = v298;
      if (!v298) {
        int v298 = (*(uint64_t (**)(void, unint64_t, void **))(**(void **)(v227 + 72) + 96))(*(void *)(v227 + 72), v257, &v588);
      }
      if (v298 == v248 && v588 == *(_DWORD *)(v227 + 112))
      {
        if (!v299) {
          sub_1CC2CC204(v564, v257, v588);
        }
        long long v300 = *(int32x2_t **)(*(void *)(v227 + 16) + 288);
        int32x2_t v301 = v300[46];
        uint64_t v302 = v300[48].u32[0];
        if (!v302) {
          goto LABEL_538;
        }
        LODWORD(v303) = (v302 - 1) & ((v257 >> 4) ^ (v257 >> 9));
        uint64_t v304 = (uint64_t *)(*(void *)&v301 + 16 * v303);
        uint64_t v305 = *v304;
        if (*v304 != v257)
        {
          int v306 = 1;
          while (v305 != -4096)
          {
            int v307 = v303 + v306++;
            uint64_t v303 = v307 & (v302 - 1);
            uint64_t v305 = *(void *)(*(void *)&v301 + 16 * v303);
            if (v305 == v257)
            {
              uint64_t v304 = (uint64_t *)(*(void *)&v301 + 16 * v303);
              goto LABEL_539;
            }
          }
LABEL_538:
          uint64_t v304 = (uint64_t *)(*(void *)&v301 + 16 * v302);
        }
LABEL_539:
        if (v304 != (uint64_t *)(*(void *)&v301 + 16 * v302))
        {
          unint64_t v348 = v304[1] & 0xFFFFFFFFFFFFFFF8;
          uint64_t *v304 = -8192;
          v300[47] = vadd_s32(v300[47], (int32x2_t)0x1FFFFFFFFLL);
          *(void *)(v348 + 16) = 0;
        }
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v257);
        goto LABEL_688;
      }
      v588 = v590;
      uint64_t v589 = 0x800000000;
      __int16 v570 = llvm::AnalyzeVirtRegInBundle(v257, v248, (uint64_t)&v588);
      __int16 v308 = *(_WORD *)(v257 + 44);
      unint64_t v309 = v257;
      if ((v308 & 4) != 0)
      {
        do
          unint64_t v309 = *(void *)v309 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v309 + 44) & 4) != 0);
      }
      uint64_t v310 = *(void *)(v227 + 16);
      uint64_t v311 = *(void *)(v310 + 288);
      unint64_t v312 = v257;
      if ((v308 & 8) != 0)
      {
        do
          unint64_t v312 = *(void *)(v312 + 8);
        while ((*(_WORD *)(v312 + 44) & 8) != 0);
      }
      unint64_t v313 = *(void *)(v312 + 8);
      if (v309 != v313)
      {
        while (1)
        {
          unsigned int v314 = **(unsigned __int16 **)(v309 + 16);
          BOOL v70 = v314 > 0x17;
          int v315 = (1 << v314) & 0x83E000;
          if (v70 || v315 == 0) {
            break;
          }
          unint64_t v309 = *(void *)(v309 + 8);
          if (v309 == v313)
          {
            unint64_t v309 = v313;
            break;
          }
        }
      }
      uint64_t v317 = *(void *)(v311 + 368);
      uint64_t v318 = *(unsigned int *)(v311 + 384);
      if (v318)
      {
        LODWORD(v319) = ((v309 >> 4) ^ (v309 >> 9)) & (v318 - 1);
        uint64_t v320 = (uint64_t *)(v317 + 16 * v319);
        uint64_t v321 = *v320;
        if (v309 != *v320)
        {
          int v322 = 1;
          while (v321 != -4096)
          {
            int v323 = v319 + v322++;
            uint64_t v319 = v323 & (v318 - 1);
            uint64_t v321 = *(void *)(v317 + 16 * v319);
            if (v309 == v321)
            {
              uint64_t v320 = (uint64_t *)(v317 + 16 * v319);
              goto LABEL_507;
            }
          }
          goto LABEL_506;
        }
      }
      else
      {
LABEL_506:
        uint64_t v320 = (uint64_t *)(v317 + 16 * v318);
      }
LABEL_507:
      unint64_t v324 = v320[1] & 0xFFFFFFFFFFFFFFF8;
      unsigned int v325 = *(_DWORD *)(v568 + 8);
      v326 = *(void **)v568;
      if (v325)
      {
        uint64_t v327 = v326[3 * v325 - 2];
        unsigned int v328 = *(_DWORD *)(v324 + 24) | 1;
        unsigned int v329 = (v327 >> 1) & 3 | *(_DWORD *)((v327 & 0xFFFFFFFFFFFFFFF8) + 24);
        uint64_t v330 = *(void **)v568;
        unint64_t v331 = *(unsigned int *)(v568 + 8);
        if (v328 < v329)
        {
          do
          {
            unint64_t v332 = v331 >> 1;
            uint64_t v333 = v330[3 * (v331 >> 1) + 1];
            LODWORD(v333) = (v333 >> 1) & 3 | *(_DWORD *)((v333 & 0xFFFFFFFFFFFFFFF8) + 24);
            v331 -= (v331 >> 1) + 1;
            BOOL v334 = v328 >= v333;
            if (v328 >= v333) {
              unint64_t v335 = v332 + 1;
            }
            else {
              unint64_t v335 = 0;
            }
            v330 += 3 * v335;
            if (!v334) {
              unint64_t v331 = v332;
            }
          }
          while (v331);
LABEL_518:
          uint64_t v336 = v324 | 4;
          if (v330 != &v326[3 * v325]
            && ((*v330 >> 1) & 3 | *(_DWORD *)((*v330 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v324 + 24) | 1u))
          {
            uint64_t v337 = v330[2];
            if (v337)
            {
              uint64_t v338 = *(void *)(v337 + 8);
              if (v324 == (v338 & 0xFFFFFFFFFFFFFFF8)) {
                uint64_t v336 = v338;
              }
            }
          }
          if (**(_WORD **)(v257 + 16) != 19) {
            goto LABEL_622;
          }
          int v339 = *(_DWORD **)(v257 + 32);
          if ((*v339 & 0xFFF00) != 0) {
            goto LABEL_622;
          }
          if ((v339[8] & 0xFFF00) != 0) {
            goto LABEL_622;
          }
          unsigned int v340 = v339[9];
          unsigned int v341 = v340;
          if (v339[1] != v575)
          {
            unsigned int v341 = v339[1];
            BOOL v34 = v340 == v575;
            unsigned int v340 = v575;
            if (!v34) {
              goto LABEL_622;
            }
          }
          if ((v341 & 0x80000000) == 0) {
            goto LABEL_622;
          }
          uint64_t v342 = v341 & 0x7FFFFFFF;
          unsigned int v343 = *(_DWORD *)(*(void *)(*(void *)(v227 + 56) + 328) + 4 * v342);
          if (!v343) {
            unsigned int v343 = v341;
          }
          if (v343 != *(_DWORD *)(v227 + 116)) {
            goto LABEL_622;
          }
          uint64_t v344 = *(void *)(v227 + 120);
          uint64_t v345 = *(unsigned int *)(v227 + 128);
          if (v345)
          {
            uint64_t v346 = 4 * v345;
            unint64_t v347 = *(_DWORD **)(v227 + 120);
            while (*v347 != v341)
            {
              ++v347;
              v346 -= 4;
              if (!v346)
              {
                unint64_t v347 = (_DWORD *)(v344 + 4 * v345);
                break;
              }
            }
          }
          else
          {
            unint64_t v347 = *(_DWORD **)(v227 + 120);
          }
          if (v345 == ((uint64_t)v347 - v344) >> 2)
          {
            if ((v570 & 0x100) == 0)
            {
              v349 = (void *)(v310 + 408);
              uint64_t v350 = *(unsigned int *)(v310 + 416);
              if (v342 >= v350)
              {
                sub_1CB9153B8((uint64_t)v349, v342 - v350 + 1, *(void *)(v310 + 424));
LABEL_853:
                operator new();
              }
              uint64_t v351 = *(void *)(*v349 + 8 * v342);
              if (!v351) {
                goto LABEL_853;
              }
              unsigned int v352 = *(_DWORD *)(v351 + 8);
              uint64_t v353 = *(void **)v351;
              if (v352)
              {
                uint64_t v354 = v353[3 * v352 - 2];
                unsigned int v355 = *(_DWORD *)((v336 & 0xFFFFFFFFFFFFFFF8) + 24) | (v336 >> 1) & 3;
                unsigned int v356 = (v354 >> 1) & 3 | *(_DWORD *)((v354 & 0xFFFFFFFFFFFFFFF8) + 24);
                unint64_t v357 = *(void **)v351;
                unint64_t v358 = *(unsigned int *)(v351 + 8);
                if (v355 < v356)
                {
                  do
                  {
                    unint64_t v359 = v358 >> 1;
                    uint64_t v360 = v357[3 * (v358 >> 1) + 1];
                    LODWORD(v360) = (v360 >> 1) & 3 | *(_DWORD *)((v360 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v358 -= (v358 >> 1) + 1;
                    BOOL v361 = v355 >= v360;
                    if (v355 >= v360) {
                      unint64_t v362 = v359 + 1;
                    }
                    else {
                      unint64_t v362 = 0;
                    }
                    v357 += 3 * v362;
                    if (!v361) {
                      unint64_t v358 = v359;
                    }
                  }
                  while (v358);
LABEL_617:
                  if (v357 == &v353[3 * v352]
                    || ((*v357 >> 1) & 3 | *(_DWORD *)((*v357 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v336 & 0xFFFFFFFFFFFFFFF8) + 24) | (v336 >> 1) & 3))
                  {
                    uint64_t v407 = v336;
                    uint64_t v408 = 0;
                  }
                  else
                  {
                    uint64_t v407 = v336;
                    uint64_t v408 = v357[2];
                  }
                  sub_1CC2CD9F4(v227, v351, v408);
                  uint64_t v336 = v407;
LABEL_622:
                  uint64_t v409 = v336;
                  LODWORD(v248) = v575;
                  if (!sub_1CC2CB754(v227, (uint64_t)v588, v589, 0))
                  {
                    unsigned int v410 = llvm::LiveRangeEdit::createFrom(*(void **)(v227 + 96), v575);
                    if (v570)
                    {
                      uint64_t v411 = *(void *)(v257 + 24);
                      sub_1CC2CCBC4(&v583, v257, v411);
                      int v412 = sub_1CC2CAD58(v227, v568);
                      uint64_t v413 = *(void *)(v227 + 16);
                      if (v412)
                      {
                        uint64_t v414 = *(void *)(v227 + 64);
                        v580[0] = v409 & 0xFFFFFFFFFFFFFFF8;
                        uint64_t v415 = v568;
                      }
                      else
                      {
                        uint64_t v415 = *(void *)(*(void *)(v227 + 96) + 8);
                        uint64_t v414 = *(void *)(v227 + 64);
                        v580[0] = v409 & 0xFFFFFFFFFFFFFFF8;
                      }
                      llvm::LiveIntervals::getLiveSubranges(v413, v415, v414, v580);
                      (*(void (**)(void, uint64_t, unint64_t))(**(void **)(v227 + 72) + 472))(*(void *)(v227 + 72), v411, v257);
                      uint64_t v416 = v585;
                      if ((unsigned __int8 **)v585 == v583 + 6)
                      {
                        unint64_t v417 = (uint64_t *)(v583 + 7);
                      }
                      else
                      {
                        if (!v585 || (*(unsigned char *)v585 & 4) == 0)
                        {
                          while ((*(_WORD *)(v416 + 44) & 8) != 0)
                            uint64_t v416 = *(void *)(v416 + 8);
                        }
                        unint64_t v417 = (uint64_t *)(v416 + 8);
                      }
                      sub_1CC2CE134(*(void *)(v227 + 16), *v417, v257);
                    }
                    if (v589)
                    {
                      char v418 = 0;
                      uint64_t v419 = 16 * v589;
                      uint64_t v420 = (unsigned int *)((char *)v588 + 8);
                      do
                      {
                        v421 = (int *)(*(void *)(*((void *)v420 - 1) + 32) + 32 * *v420);
                        llvm::MachineOperand::setReg((uint64_t)v421, v410);
                        int v422 = *v421;
                        if ((*v421 & 0x1000000) != 0)
                        {
                          v418 |= (~v422 & 0x5000000) != 0;
                        }
                        else
                        {
                          int v423 = *(_DWORD *)(*(void *)(*((void *)v420 - 1) + 32) + 32 * *v420);
                          int v424 = v423 & 0x10000FF;
                          int v425 = v423 & 0xF00000;
                          if (v424) {
                            BOOL v426 = 1;
                          }
                          else {
                            BOOL v426 = v425 == 0;
                          }
                          if (v426) {
                            int *v421 = v422 | 0x4000000;
                          }
                        }
                        v420 += 4;
                        v419 -= 16;
                      }
                      while (v419);
                      LODWORD(v248) = v575;
                      if (*(_DWORD *)&v418 & ((unsigned __int16)(v570 & 0x100) >> 8))
                      {
                        uint64_t v582 = v409;
                        uint64_t v427 = *(void *)(v257 + 24);
                        sub_1CC2CCBC4(v580, v257, v427);
                        unint64_t v428 = v257;
                        if ((*(unsigned char *)v257 & 4) == 0)
                        {
                          unint64_t v428 = v257;
                          if ((*(_WORD *)(v257 + 44) & 8) != 0)
                          {
                            unint64_t v428 = v257;
                            do
                              unint64_t v428 = *(void *)(v428 + 8);
                            while ((*(_WORD *)(v428 + 44) & 8) != 0);
                          }
                        }
                        uint64_t v429 = *(unint64_t **)(v428 + 8);
                        if (**(_WORD **)(v257 + 16) != 10 || (**(_DWORD **)(v257 + 32) & 0xFFF00) != 0)
                        {
                          uint64_t LiveSubranges = llvm::LiveIntervals::getLiveSubranges(*(void *)(v227 + 16), *(void *)(*(void *)(v227 + 96) + 8), *(void *)(v227 + 64), &v582);
                          char v571 = 1;
                          (*(void (**)(void, uint64_t, unint64_t *, void, uint64_t, void, unint64_t, void, uint64_t))(**(void **)(v227 + 72) + 456))(*(void *)(v227 + 72), v427, v429, v410, 1, *(unsigned int *)(v227 + 112), *(void *)(*(void *)(*(void *)(v227 + 64) + 24) + 16 * (v410 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(v227 + 80), LiveSubranges);
                          goto LABEL_655;
                        }
                        uint64_t v444 = *(void *)(*(void *)(v227 + 72) + 8);
                        v445 = *(llvm::MachineFunction **)(v427 + 32);
                        v446 = *(unsigned __int8 **)(v257 + 56);
                        v587 = v446;
                        if (v446) {
                          llvm::MetadataTracking::track((uint64_t)&v587, v446, 2);
                        }
                        v447 = llvm::MachineFunction::CreateMachineInstr(v445, v444 + 336, &v587, 0);
                        if (v587)
                        {
                          int v534 = *v587;
                          if ((v534 - 4) > 0x1E)
                          {
                            if ((v534 - 3) >= 0xFFFFFFFE) {
                              v537 = v587;
                            }
                            else {
                              v537 = 0;
                            }
                            if ((v534 - 3) < 0xFFFFFFFE)
                            {
                              uint64_t v227 = v579;
                              if (v534 == 3) {
                                *((void *)v587 + 1) = 0;
                              }
                              goto LABEL_693;
                            }
                            unint64_t v536 = (unint64_t)(v537 + 8);
                          }
                          else
                          {
                            uint64_t v227 = v579;
                            if ((v587[1] & 0x7F) != 2 && !*((_DWORD *)v587 + 3)) {
                              goto LABEL_693;
                            }
                            uint64_t v535 = *((void *)v587 + 2);
                            if ((v535 & 4) == 0) {
                              goto LABEL_693;
                            }
                            unint64_t v536 = v535 & 0xFFFFFFFFFFFFFFF8;
                            if (!v536) {
                              goto LABEL_693;
                            }
                          }
                          v583 = &v587;
                          sub_1CC5FA668(v536 + 16, &v583);
                          uint64_t v227 = v579;
                        }
LABEL_693:
                        uint64_t v448 = *(void *)(v427 + 40);
                        *((void *)v447 + 3) = v448;
                        uint64_t v449 = *(void *)(v448 + 32);
                        uint64_t v450 = *((unsigned int *)v447 + 10);
                        if (v450)
                        {
                          uint64_t v453 = *((void *)v447 + 4);
                          uint64_t v454 = *(void *)(v449 + 40);
                          uint64_t v455 = 32 * v450;
                          do
                          {
                            if (!*(unsigned char *)v453)
                            {
                              uint64_t v456 = *(unsigned int *)(v453 + 4);
                              if ((int)v456 >= 0) {
                                v457 = (uint64_t *)(*(void *)(v454 + 272) + 8 * v456);
                              }
                              else {
                                v457 = (uint64_t *)(*(void *)(v454 + 24) + 16 * (v456 & 0x7FFFFFFF) + 8);
                              }
                              uint64_t v458 = *v457;
                              if (*v457)
                              {
                                uint64_t v459 = *(void *)(v458 + 16);
                                *(void *)(v458 + 16) = v453;
                                *(void *)(v453 + 16) = v459;
                                if (*(unsigned char *)(v453 + 3))
                                {
                                  *(void *)(v453 + 24) = v458;
                                }
                                else
                                {
                                  *(void *)(v453 + 24) = 0;
                                  v457 = (uint64_t *)(v459 + 24);
                                }
                              }
                              else
                              {
                                *(void *)(v453 + 16) = v453;
                                *(void *)(v453 + 24) = 0;
                              }
                              uint64_t *v457 = v453;
                            }
                            v453 += 32;
                            v455 -= 32;
                          }
                          while (v455);
                        }
                        uint64_t v451 = *(void *)(v449 + 728);
                        if (v451) {
                          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v451 + 24))(v451, v447);
                        }
                        unint64_t v452 = *v429 & 0xFFFFFFFFFFFFFFF8;
                        *(void *)v447 = v452 | *(void *)v447 & 7;
                        *((void *)v447 + 1) = v429;
                        *(void *)(v452 + 8) = v447;
                        *uint64_t v429 = *v429 & 7 | (unint64_t)v447;
                        uint64_t v584 = 0;
                        uint64_t v585 = 0;
                        uint64_t v586 = 0;
                        LODWORD(v583) = 0x4000000;
                        HIDWORD(v583) = v410;
                        llvm::MachineInstr::addOperand(v447, v445, (const llvm::MachineOperand *)&v583);
                        char v571 = 0;
LABEL_655:
                        if ((*(unsigned char *)v257 & 4) == 0)
                        {
                          while ((*(_WORD *)(v257 + 44) & 8) != 0)
                            unint64_t v257 = *(void *)(v257 + 8);
                        }
                        uint64_t v431 = *(void *)(v257 + 8);
                        sub_1CC2CE134(*(void *)(v227 + 16), v431, v581);
                        unint64_t v432 = v431;
                        for (uint64_t k = v431; k != v581; uint64_t k = *(void *)(k + 8))
                        {
                          uint64_t v434 = *(unsigned int *)(k + 40);
                          if (v434)
                          {
                            uint64_t v435 = *(void *)(v227 + 16);
                            uint64_t v436 = 32 * v434;
                            v437 = (int *)(*(void *)(k + 32) + 4);
                            do
                            {
                              if ((*(v437 - 1) & 0x10000FF) == 0x1000000)
                              {
                                int v438 = *v437;
                                if (*v437 < 0)
                                {
                                  uint64_t v439 = v438 & 0x7FFFFFFF;
                                  uint64_t v440 = *(unsigned int *)(v435 + 416);
                                  if ((v438 & 0x7FFFFFFFu) >= v440)
                                  {
                                    sub_1CB9153B8(v435 + 408, v439 - v440 + 1, *(void *)(v435 + 424));
LABEL_668:
                                    operator new();
                                  }
                                  if (!*(void *)(*(void *)(v435 + 408) + 8 * v439)) {
                                    goto LABEL_668;
                                  }
                                }
                              }
                              v437 += 8;
                              v436 -= 32;
                            }
                            while (v436);
                            uint64_t v227 = v579;
                            if (!k) {
                              goto LABEL_673;
                            }
                          }
                          if ((*(unsigned char *)k & 4) == 0)
                          {
LABEL_673:
                            while ((*(_WORD *)(k + 44) & 8) != 0)
                              uint64_t k = *(void *)(k + 8);
                          }
                        }
                        LODWORD(v248) = v575;
                        if (v571)
                        {
                          if (v432 == v581) {
                            goto LABEL_685;
                          }
                          uint64_t v441 = 0;
                          unint64_t v442 = v432;
                          do
                          {
                            uint64_t v443 = v441;
                            if (!v442 || (*(unsigned char *)v442 & 4) == 0)
                            {
                              while ((*(_WORD *)(v442 + 44) & 8) != 0)
                                unint64_t v442 = *(void *)(v442 + 8);
                            }
                            ++v441;
                            unint64_t v442 = *(void *)(v442 + 8);
                          }
                          while (v442 != v581);
                          if (!v443) {
LABEL_685:
                          }
                            sub_1CC2CC53C(v564, v432, *(_DWORD *)(v227 + 112), *(_DWORD *)(v227 + 116));
                        }
                      }
                    }
                  }
LABEL_686:
                  if (v588 != v590) {
                    free(v588);
                  }
                  goto LABEL_688;
                }
              }
              else
              {
                unsigned int v352 = 0;
              }
              unint64_t v357 = &v353[3 * v352];
              goto LABEL_617;
            }
            unint64_t v369 = v257;
            if ((v308 & 4) != 0)
            {
              do
                unint64_t v369 = *(void *)v369 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v369 + 44) & 4) != 0);
            }
            unint64_t v370 = v257;
            if ((v308 & 8) != 0)
            {
              do
                unint64_t v370 = *(void *)(v370 + 8);
              while ((*(_WORD *)(v370 + 44) & 8) != 0);
            }
            unint64_t v371 = *(void *)(v370 + 8);
            if (v369 != v371)
            {
              while (1)
              {
                unsigned int v372 = **(unsigned __int16 **)(v369 + 16);
                BOOL v70 = v372 > 0x17;
                int v373 = (1 << v372) & 0x83E000;
                if (v70 || v373 == 0) {
                  break;
                }
                unint64_t v369 = *(void *)(v369 + 8);
                if (v369 == v371)
                {
                  unint64_t v369 = v371;
                  break;
                }
              }
            }
            if (v318)
            {
              LODWORD(v375) = ((v369 >> 4) ^ (v369 >> 9)) & (v318 - 1);
              unsigned int v376 = (uint64_t *)(v317 + 16 * v375);
              uint64_t v377 = *v376;
              if (v369 != *v376)
              {
                int v378 = 1;
                while (v377 != -4096)
                {
                  int v379 = v375 + v378++;
                  uint64_t v375 = v379 & (v318 - 1);
                  uint64_t v377 = *(void *)(v317 + 16 * v375);
                  if (v369 == v377)
                  {
                    unsigned int v376 = (uint64_t *)(v317 + 16 * v375);
                    goto LABEL_604;
                  }
                }
                goto LABEL_603;
              }
            }
            else
            {
LABEL_603:
              unsigned int v376 = (uint64_t *)(v317 + 16 * v318);
            }
LABEL_604:
            uint64_t v389 = v376[1];
            unint64_t v390 = v340 & 0x7FFFFFFF;
            unint64_t v391 = (void *)(v310 + 408);
            unint64_t v392 = *(unsigned int *)(v310 + 416);
            BOOL v92 = v390 >= v392;
            unint64_t v393 = v390 - v392;
            if (v92)
            {
              sub_1CB9153B8((uint64_t)v391, v393 + 1, *(void *)(v310 + 424));
LABEL_855:
              operator new();
            }
            uint64_t v394 = *(void *)(*v391 + 8 * v390);
            if (!v394) {
              goto LABEL_855;
            }
            unsigned int v395 = *(_DWORD *)(v394 + 8);
            uint64_t v396 = *(void **)v394;
            if (v395)
            {
              uint64_t v397 = v396[3 * v395 - 2];
              unsigned int v398 = *(_DWORD *)((v389 & 0xFFFFFFFFFFFFFFF8) + 24) | (v389 >> 1) & 3;
              unsigned int v399 = (v397 >> 1) & 3 | *(_DWORD *)((v397 & 0xFFFFFFFFFFFFFFF8) + 24);
              unint64_t v400 = *(unsigned int *)(v394 + 8);
              unint64_t v401 = *(void **)v394;
              unint64_t v402 = v400;
              if (v398 < v399)
              {
                do
                {
                  unint64_t v403 = v402 >> 1;
                  uint64_t v404 = v401[3 * (v402 >> 1) + 1];
                  LODWORD(v404) = (v404 >> 1) & 3 | *(_DWORD *)((v404 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v402 -= (v402 >> 1) + 1;
                  BOOL v405 = v398 >= v404;
                  if (v398 >= v404) {
                    unint64_t v406 = v403 + 1;
                  }
                  else {
                    unint64_t v406 = 0;
                  }
                  v401 += 3 * v406;
                  if (!v405) {
                    unint64_t v402 = v403;
                  }
                }
                while (v402);
                unint64_t v400 = *(unsigned int *)(v394 + 8);
LABEL_712:
                v460 = &v396[3 * v400];
                if (v401 == v460)
                {
                  uint64_t v462 = 0;
                  unint64_t v461 = v389 & 0xFFFFFFFFFFFFFFF8;
                }
                else
                {
                  unint64_t v461 = v389 & 0xFFFFFFFFFFFFFFF8;
                  if (((*v401 >> 1) & 3 | *(_DWORD *)((*v401 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v389 & 0xFFFFFFFFFFFFFFF8) + 24) | (v389 >> 1) & 3)) {
                    uint64_t v462 = v401[2];
                  }
                  else {
                    uint64_t v462 = 0;
                  }
                }
                if (!v395) {
                  goto LABEL_728;
                }
                unsigned int v463 = *(_DWORD *)(v461 + 24);
                if (v463 >= ((*(v460 - 2) >> 1) & 3 | *(_DWORD *)((*(v460 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                               + 24)))
                  goto LABEL_728;
                do
                {
                  v464 = v396;
                  unint64_t v465 = v400 >> 1;
                  uint64_t v466 = v396[3 * (v400 >> 1) + 1];
                  LODWORD(v466) = (v466 >> 1) & 3 | *(_DWORD *)((v466 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v400 -= (v400 >> 1) + 1;
                  BOOL v467 = v463 >= v466;
                  if (v463 >= v466) {
                    unint64_t v468 = v465 + 1;
                  }
                  else {
                    unint64_t v468 = 0;
                  }
                  uint64_t v396 = &v464[3 * v468];
                  if (!v467) {
                    unint64_t v400 = v465;
                  }
                }
                while (v400);
                if (v396 != v460
                  && ((*v396 >> 1) & 3 | *(_DWORD *)((*v396 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v461 + 24)
                  && v461 == (v464[3 * v468 + 1] & 0xFFFFFFFFFFFFFFF8))
                {
                  int v469 = 1;
                }
                else
                {
LABEL_728:
                  int v469 = 0;
                }
                uint64_t v470 = *(void *)(v227 + 16);
                unint64_t v471 = *(void *)(v462 + 8);
                uint64_t v472 = *(void *)(v470 + 288);
                if (v471 >= 8 && (uint64_t v473 = *(void *)((v471 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
                {
                  v474 = (void *)(v473 + 24);
                  if (!v469) {
                    goto LABEL_622;
                  }
                }
                else
                {
                  v498 = *(void **)(v472 + 536);
                  unint64_t v499 = *(unsigned int *)(v472 + 544);
                  if (v499)
                  {
                    unsigned int v500 = *(_DWORD *)((v471 & 0xFFFFFFFFFFFFFFF8) + 24) | (v471 >> 1) & 3;
                    v501 = v498;
                    unint64_t v502 = v499;
                    do
                    {
                      unint64_t v503 = v502 >> 1;
                      v504 = &v501[2 * (v502 >> 1)];
                      uint64_t v506 = *v504;
                      v505 = v504 + 2;
                      v502 += ~(v502 >> 1);
                      if (((v506 >> 1) & 3 | *(_DWORD *)((v506 & 0xFFFFFFFFFFFFFFF8) + 24)) < v500) {
                        v501 = v505;
                      }
                      else {
                        unint64_t v502 = v503;
                      }
                    }
                    while (v502);
                    if (v501 == &v498[2 * v499]
                      || ((*v501 >> 1) & 3 | *(_DWORD *)((*v501 & 0xFFFFFFFFFFFFFFF8) + 24)) > v500)
                    {
                      v501 -= 2;
                    }
                  }
                  else
                  {
                    v501 = *(void **)(v472 + 536);
                  }
                  v474 = v501 + 1;
                  if (!v469) {
                    goto LABEL_622;
                  }
                }
                if (*v474 != *(void *)(v257 + 24)) {
                  goto LABEL_622;
                }
                uint64_t v560 = v462;
                v561 = (void *)(v462 + 8);
                uint64_t v562 = *(void *)(*v391 + 8 * v390);
                uint64_t v572 = v340;
                int v475 = *(_DWORD *)(v227 + 116);
                uint64_t v476 = v475 & 0x7FFFFFFF;
                v477 = (void *)(v470 + 408);
                uint64_t v478 = *(unsigned int *)(v470 + 416);
                if ((v475 & 0x7FFFFFFFu) >= v478)
                {
                  sub_1CB9153B8((uint64_t)v477, v476 - v478 + 1, *(void *)(v470 + 424));
LABEL_857:
                  operator new();
                }
                v479 = *(unsigned int **)(*v477 + 8 * v476);
                if (!v479) {
                  goto LABEL_857;
                }
                unsigned int v480 = v479[2];
                v481 = *(void **)v479;
                if (v480)
                {
                  uint64_t v482 = v481[3 * v480 - 2];
                  unsigned int v483 = *(_DWORD *)((v389 & 0xFFFFFFFFFFFFFFF8) + 24) | (v389 >> 1) & 3;
                  unsigned int v484 = (v482 >> 1) & 3 | *(_DWORD *)((v482 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v485 = *(void **)v479;
                  unint64_t v486 = v479[2];
                  unint64_t v487 = v390;
                  if (v483 < v484)
                  {
                    do
                    {
                      unint64_t v488 = v486 >> 1;
                      uint64_t v489 = v485[3 * (v486 >> 1) + 1];
                      LODWORD(v489) = (v489 >> 1) & 3 | *(_DWORD *)((v489 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v486 -= (v486 >> 1) + 1;
                      BOOL v490 = v483 >= v489;
                      if (v483 >= v489) {
                        unint64_t v491 = v488 + 1;
                      }
                      else {
                        unint64_t v491 = 0;
                      }
                      v485 += 3 * v491;
                      if (!v490) {
                        unint64_t v486 = v488;
                      }
                    }
                    while (v486);
                    uint64_t v492 = v572;
LABEL_750:
                    if (v485 == &v481[3 * v480]
                      || ((*v485 >> 1) & 3 | *(_DWORD *)((*v485 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v461 + 24) | (v389 >> 1) & 3))
                    {
                      uint64_t v493 = 0;
                    }
                    else
                    {
                      uint64_t v493 = v485[2];
                    }
                    llvm::LiveRange::MergeValueInAsValue(*(void *)(v227 + 104), v479, v493, **(void **)(*(void *)(v227 + 104) + 64));
                    sub_1CC2CD9F4(v227, v562, v560);
                    unint64_t v494 = *(void *)(v560 + 8);
                    uint64_t v495 = *(void *)(*(void *)(v227 + 16) + 288);
                    if (v494 >= 8)
                    {
                      uint64_t v496 = *(void *)((v494 & 0xFFFFFFFFFFFFFFF8) + 16);
                      if (v496)
                      {
                        uint64_t v497 = *(void *)(v496 + 24);
                        if ((v494 & 6) != 0) {
                          goto LABEL_757;
                        }
LABEL_790:
                        v516 = (void *)llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug(v497, *(void *)(v497 + 56), 1);
LABEL_795:
                        sub_1CC2CCBC4(&v583, (uint64_t)v516, v497);
                        uint64_t v517 = llvm::LiveIntervals::getLiveSubranges(*(void *)(v227 + 16), (uint64_t)v479, *(void *)(v227 + 64), v561);
                        (*(void (**)(void, uint64_t, void *, uint64_t, void, void, unint64_t, void, uint64_t))(**(void **)(v227 + 72) + 456))(*(void *)(v227 + 72), v497, v516, v492, 0, *(unsigned int *)(v227 + 112), *(void *)(*(void *)(*(void *)(v227 + 64) + 24) + 16 * v487) & 0xFFFFFFFFFFFFFFF8, *(void *)(v227 + 80), v517);
                        uint64_t v518 = v585;
                        if ((unsigned __int8 **)v585 == v583 + 6)
                        {
                          v519 = (uint64_t *)(v583 + 7);
                        }
                        else
                        {
                          if (!v585 || (*(unsigned char *)v585 & 4) == 0)
                          {
                            while ((*(_WORD *)(v518 + 44) & 8) != 0)
                              uint64_t v518 = *(void *)(v518 + 8);
                          }
                          v519 = (uint64_t *)(v518 + 8);
                        }
                        sub_1CC2CE134(*(void *)(v227 + 16), *v519, (uint64_t)v516);
                        uint64_t v520 = v585;
                        if ((unsigned __int8 **)v585 == v583 + 6)
                        {
                          v521 = (uint64_t *)(v583 + 7);
                        }
                        else
                        {
                          if ((!v585 || (*(unsigned char *)v585 & 4) == 0) && (*(_WORD *)(v585 + 44) & 8) != 0)
                          {
                            do
                              uint64_t v520 = *(void *)(v520 + 8);
                            while ((*(_WORD *)(v520 + 44) & 8) != 0);
                          }
                          v521 = (uint64_t *)(v520 + 8);
                        }
                        for (uint64_t m = *v521; (void *)m != v516; uint64_t m = *(void *)(m + 8))
                        {
                          uint64_t v523 = *(unsigned int *)(m + 40);
                          if (v523)
                          {
                            uint64_t v524 = *(void *)(v227 + 16);
                            uint64_t v525 = 32 * v523;
                            v526 = (int *)(*(void *)(m + 32) + 4);
                            do
                            {
                              if ((*(v526 - 1) & 0x10000FF) == 0x1000000)
                              {
                                int v527 = *v526;
                                if (*v526 < 0)
                                {
                                  uint64_t v528 = v527 & 0x7FFFFFFF;
                                  uint64_t v529 = *(unsigned int *)(v524 + 416);
                                  if ((v527 & 0x7FFFFFFFu) >= v529)
                                  {
                                    sub_1CB9153B8(v524 + 408, v528 - v529 + 1, *(void *)(v524 + 424));
LABEL_822:
                                    operator new();
                                  }
                                  if (!*(void *)(*(void *)(v524 + 408) + 8 * v528)) {
                                    goto LABEL_822;
                                  }
                                }
                              }
                              v526 += 8;
                              v525 -= 32;
                            }
                            while (v525);
                            uint64_t v227 = v579;
                            if (!m) {
                              goto LABEL_827;
                            }
                          }
                          if ((*(unsigned char *)m & 4) == 0)
                          {
LABEL_827:
                            while ((*(_WORD *)(m + 44) & 8) != 0)
                              uint64_t m = *(void *)(m + 8);
                          }
                        }
                        unint64_t v530 = *v516 & 0xFFFFFFFFFFFFFFF8;
                        if (v530)
                        {
                          LODWORD(v248) = v575;
                          if ((*(unsigned char *)v530 & 4) != 0)
                          {
LABEL_835:
                            uint64_t v531 = v585;
                            if ((unsigned __int8 **)v585 == v583 + 6)
                            {
                              v532 = v583 + 7;
                            }
                            else
                            {
                              if (!v585 || (*(unsigned char *)v585 & 4) == 0)
                              {
                                while ((*(_WORD *)(v531 + 44) & 8) != 0)
                                  uint64_t v531 = *(void *)(v531 + 8);
                              }
                              v532 = (void *)(v531 + 8);
                            }
                            if (*v532 == v530) {
                              sub_1CC2CC53C(v564, v530, *(_DWORD *)(v227 + 112), *(_DWORD *)(v227 + 116));
                            }
                            **(_DWORD **)(v257 + 32) |= 0x4000000u;
                            unint64_t v533 = *(unsigned int *)(v227 + 368);
                            if (v533 >= *(unsigned int *)(v227 + 372)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *(void *)(*(void *)(v227 + 360) + 8 * v533) = v257;
                            ++*(_DWORD *)(v227 + 368);
                            goto LABEL_686;
                          }
                        }
                        else
                        {
                          LODWORD(v248) = v575;
                        }
                        while ((*(_WORD *)(v530 + 44) & 4) != 0)
                          unint64_t v530 = *(void *)v530 & 0xFFFFFFFFFFFFFFF8;
                        goto LABEL_835;
                      }
                    }
                    v507 = *(void **)(v495 + 536);
                    unint64_t v508 = *(unsigned int *)(v495 + 544);
                    if (v508)
                    {
                      unsigned int v509 = *(_DWORD *)((v494 & 0xFFFFFFFFFFFFFFF8) + 24) | (v494 >> 1) & 3;
                      v510 = v507;
                      unint64_t v511 = v508;
                      do
                      {
                        unint64_t v512 = v511 >> 1;
                        v513 = &v510[2 * (v511 >> 1)];
                        uint64_t v515 = *v513;
                        v514 = v513 + 2;
                        v511 += ~(v511 >> 1);
                        if (((v515 >> 1) & 3 | *(_DWORD *)((v515 & 0xFFFFFFFFFFFFFFF8) + 24)) < v509) {
                          v510 = v514;
                        }
                        else {
                          unint64_t v511 = v512;
                        }
                      }
                      while (v511);
                      if (v510 == &v507[2 * v508]
                        || ((*v510 >> 1) & 3 | *(_DWORD *)((*v510 & 0xFFFFFFFFFFFFFFF8) + 24)) > v509)
                      {
                        v510 -= 2;
                      }
                    }
                    else
                    {
                      v510 = *(void **)(v495 + 536);
                    }
                    uint64_t v497 = v510[1];
                    if ((v494 & 6) == 0) {
                      goto LABEL_790;
                    }
                    if (v494 < 8)
                    {
                      uint64_t v496 = 0;
                    }
                    else
                    {
                      uint64_t v496 = *(void *)((v494 & 0xFFFFFFFFFFFFFFF8) + 16);
                      if (!v496) {
                        goto LABEL_793;
                      }
LABEL_757:
                      if ((*(unsigned char *)v496 & 4) != 0)
                      {
LABEL_794:
                        v516 = *(void **)(v496 + 8);
                        goto LABEL_795;
                      }
                    }
LABEL_793:
                    while ((*(_WORD *)(v496 + 44) & 8) != 0)
                      uint64_t v496 = *(void *)(v496 + 8);
                    goto LABEL_794;
                  }
                }
                else
                {
                  unsigned int v480 = 0;
                  unint64_t v487 = v390;
                }
                uint64_t v492 = v572;
                v485 = &v481[3 * v480];
                goto LABEL_750;
              }
            }
            else
            {
              unint64_t v400 = 0;
            }
            unint64_t v401 = &v396[3 * v400];
            goto LABEL_712;
          }
          uint64_t v363 = *(void *)(v227 + 176);
          uint64_t v364 = *(unsigned int *)(v227 + 188);
          if (v363 == *(void *)(v227 + 168))
          {
            LODWORD(v248) = v575;
            if (v364)
            {
              unint64_t v365 = 0;
              uint64_t v366 = 8 * v364;
              uint64_t v367 = *(unint64_t **)(v227 + 176);
              while (*v367 != v257)
              {
                if (*v367 == -2) {
                  unint64_t v365 = v367;
                }
                ++v367;
                v366 -= 8;
                if (!v366)
                {
                  if (!v365) {
                    goto LABEL_564;
                  }
                  *unint64_t v365 = v257;
                  --*(_DWORD *)(v227 + 192);
                  goto LABEL_686;
                }
              }
              goto LABEL_686;
            }
LABEL_564:
            unsigned int v368 = *v574;
            if (v364 < *v574)
            {
              unsigned int *v578 = v364 + 1;
              *(void *)(v363 + 8 * v364) = v257;
              goto LABEL_686;
            }
          }
          else
          {
            LODWORD(v248) = v575;
            unsigned int v368 = *v574;
          }
          if (3 * v368 <= 4 * ((int)v364 - *(_DWORD *)(v227 + 192)))
          {
            if (v368 >= 0x40) {
              v368 *= 2;
            }
            else {
              unsigned int v368 = 128;
            }
          }
          else if (v368 - v364 >= v368 >> 3)
          {
            goto LABEL_584;
          }
          llvm::SmallPtrSetImplBase::Grow(v563, v368);
          unsigned int v368 = *(_DWORD *)(v227 + 184);
          uint64_t v363 = *(void *)(v227 + 176);
LABEL_584:
          unsigned int v380 = v368 - 1;
          unsigned int v381 = (v368 - 1) & ((v257 >> 4) ^ (v257 >> 9));
          v382 = (unint64_t *)(v363 + 8 * v381);
          unint64_t v383 = *v382;
          if (*v382 == -1)
          {
            uint64_t v384 = 0;
LABEL_596:
            if (v384) {
              uint64_t v388 = v384;
            }
            else {
              uint64_t v388 = v382;
            }
            if (*v388 != v257)
            {
              if (*v388 == -2) {
                --*(_DWORD *)(v227 + 192);
              }
              else {
                ++*v578;
              }
              *uint64_t v388 = v257;
            }
          }
          else
          {
            uint64_t v384 = 0;
            int v385 = 1;
            while (v383 != v257)
            {
              if (v384) {
                BOOL v386 = 0;
              }
              else {
                BOOL v386 = v383 == -2;
              }
              if (v386) {
                uint64_t v384 = v382;
              }
              unsigned int v387 = v381 + v385++;
              unsigned int v381 = v387 & v380;
              v382 = (unint64_t *)(v363 + 8 * (v387 & v380));
              unint64_t v383 = *v382;
              if (*v382 == -1) {
                goto LABEL_596;
              }
            }
          }
          goto LABEL_686;
        }
      }
      else
      {
        unsigned int v325 = 0;
      }
      uint64_t v330 = &v326[3 * v325];
      goto LABEL_518;
    }
LABEL_879:
    if (*(_DWORD *)(v227 + 368))
    {
      llvm::LiveRangeEdit::eliminateDeadDefs(*(void **)(v227 + 96), v227 + 360, v238, v239, *(llvm::AAResults **)(v227 + 32));
      int v238 = *(int **)(v227 + 120);
      LODWORD(v239) = *(_DWORD *)(v227 + 128);
    }
    if (v239)
    {
      v538 = (unsigned int *)&v238[v239];
      do
      {
        uint64_t v539 = *v238;
        uint64_t v540 = *(void *)(v227 + 64);
        if ((v539 & 0x80000000) != 0) {
          v541 = (uint64_t *)(*(void *)(v540 + 24) + 16 * (v539 & 0x7FFFFFFF) + 8);
        }
        else {
          v541 = (uint64_t *)(*(void *)(v540 + 272) + 8 * v539);
        }
        uint64_t v542 = *v541;
        if (*v541)
        {
          while (1)
          {
            v543 = *(llvm::MachineInstr **)(v542 + 8);
            do
              uint64_t v542 = *(void *)(v542 + 24);
            while (v542 && *(llvm::MachineInstr **)(v542 + 8) == v543);
            v544 = *(int32x2_t **)(*(void *)(v227 + 16) + 288);
            int32x2_t v545 = v544[46];
            uint64_t v546 = v544[48].u32[0];
            if (!v546) {
              goto LABEL_896;
            }
            LODWORD(v547) = (v546 - 1) & ((v543 >> 4) ^ (v543 >> 9));
            v548 = (llvm::MachineInstr **)(*(void *)&v545 + 16 * v547);
            v549 = *v548;
            if (*v548 != v543) {
              break;
            }
LABEL_897:
            if (v548 != (llvm::MachineInstr **)(*(void *)&v545 + 16 * v546))
            {
              unint64_t v552 = (unint64_t)v548[1] & 0xFFFFFFFFFFFFFFF8;
              *v548 = (llvm::MachineInstr *)-8192;
              v544[47] = vadd_s32(v544[47], (int32x2_t)0x1FFFFFFFFLL);
              *(void *)(v552 + 16) = 0;
            }
            llvm::MachineInstr::eraseFromParent(v543);
            if (!v542) {
              goto LABEL_900;
            }
          }
          int v550 = 1;
          while (v549 != (llvm::MachineInstr *)-4096)
          {
            int v551 = v547 + v550++;
            uint64_t v547 = v551 & (v546 - 1);
            v549 = *(llvm::MachineInstr **)(*(void *)&v545 + 16 * v547);
            if (v549 == v543)
            {
              v548 = (llvm::MachineInstr **)(*(void *)&v545 + 16 * v547);
              goto LABEL_897;
            }
          }
LABEL_896:
          v548 = (llvm::MachineInstr **)(*(void *)&v545 + 16 * v546);
          goto LABEL_897;
        }
LABEL_900:
        ++v238;
      }
      while (v238 != (int *)v538);
      uint64_t v553 = *(unsigned int *)(v227 + 128);
      if (v553)
      {
        v554 = *(unsigned int **)(v227 + 120);
        uint64_t v555 = 4 * v553;
        do
        {
          unsigned int v556 = *v554++;
          llvm::LiveRangeEdit::eraseVirtReg(*(void *)(v227 + 96), v556);
          v555 -= 4;
        }
        while (v555);
      }
    }
  }
  llvm::LiveRangeEdit::calculateRegClassAndHint(*(llvm::LiveRangeEdit **)(v227 + 96), *(llvm::MachineFunction **)(v227 + 8), *(llvm::VirtRegAuxInfo **)(v227 + 784));
}

void sub_1CC2C76C4(void *a1)
{
  int v1 = a1;
  v658[32] = *MEMORY[0x1E4F143B8];
  int v2 = a1 + 55;
  v653 = v655;
  uint64_t v654 = 0x400000000;
  uint64_t v3 = a1[56];
  uint64_t v4 = a1[57];
  uint64_t v5 = a1[62];
  v617[0] = &unk_1F260CAB0;
  v617[1] = 0;
  uint64_t v6 = *(void *)(v3 + 40);
  v617[2] = &v653;
  uint64_t v618 = v6;
  uint64_t v619 = v4;
  uint64_t v620 = v5;
  uint64_t v621 = (*(uint64_t (**)(void))(**(void **)(v3 + 16) + 104))(*(void *)(v3 + 16));
  v622 = v2;
  int v623 = v654;
  char v624 = 0;
  uint64_t v625 = 0;
  v626 = v630;
  v627 = v630;
  uint64_t v628 = 4;
  int v629 = 0;
  v630[4] = v632;
  v630[5] = v632;
  v630[6] = 4;
  int v631 = 0;
  *(void *)(v618 + 8) = v617;
  int v7 = *(_DWORD *)(v1[63] + 32);
  v612 = v1;
  if (v7)
  {
    int v9 = 0;
    uint64_t v10 = (uint64_t)(v1 + 95);
    while (1)
    {
      LODWORD(v656) = v9 | 0x80000000;
      uint64_t v11 = v1[63];
      int v12 = *(_DWORD *)(*(void *)(v1[62] + 328) + 4 * (v9 & 0x7FFFFFFF));
      LODWORD(v650) = v12;
      uint64_t v13 = *(void *)(*(void *)(v11 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
      if (!v13) {
        goto LABEL_8;
      }
      if ((*(unsigned char *)(v13 + 3) & 1) == 0)
      {
        uint64_t v33 = *(void *)(v13 + 24);
        if (!v33 || (*(unsigned char *)(v33 + 3) & 1) == 0) {
          goto LABEL_8;
        }
      }
      int v14 = *((_DWORD *)v612 + 194);
      if (!v14) {
        break;
      }
      uint64_t v15 = v612[95];
      int v16 = v14 - 1;
      unsigned int v17 = v16 & (37 * v12);
      uint64_t v18 = (int *)(v15 + 160 * v17);
      int v19 = *v18;
      if (v12 != *v18)
      {
        BOOL v34 = 0;
        int v35 = 1;
        while (v19 != -1)
        {
          if (v34) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = v19 == -2;
          }
          if (v36) {
            BOOL v34 = v18;
          }
          unsigned int v37 = v17 + v35++;
          unsigned int v17 = v37 & v16;
          uint64_t v18 = (int *)(v15 + 160 * v17);
          int v19 = *v18;
          if (v12 == *v18) {
            goto LABEL_13;
          }
        }
        if (v34) {
          uint64_t v38 = v34;
        }
        else {
          uint64_t v38 = v18;
        }
        goto LABEL_49;
      }
LABEL_13:
      if (v18[2])
      {
        uint64_t v21 = v18 + 4;
        int v20 = 16;
      }
      else
      {
        int v20 = v18[6];
        if (!v20)
        {
          uint64_t v30 = 0;
LABEL_29:
          uint64_t v31 = sub_1CBB30820((uint64_t)(v18 + 2), (uint64_t)&v656, &v656, v30);
          *uint64_t v31 = v656;
          unint64_t v32 = v18[22];
          if (v32 >= v18[23]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*((void *)v18 + 10) + 4 * v32) = v656;
          ++v18[22];
          goto LABEL_8;
        }
        uint64_t v21 = (int *)*((void *)v18 + 2);
      }
      int v22 = v20 - 1;
      unsigned int v23 = (37 * v656) & v22;
      BOOL v24 = &v21[v23];
      int v25 = *v24;
      if (v656 != *v24)
      {
        uint64_t v26 = 0;
        int v27 = 1;
        while (v25 != -1)
        {
          if (v26) {
            BOOL v28 = 0;
          }
          else {
            BOOL v28 = v25 == -2;
          }
          if (v28) {
            uint64_t v26 = v24;
          }
          unsigned int v29 = v23 + v27++;
          unsigned int v23 = v29 & v22;
          BOOL v24 = &v21[v23];
          int v25 = *v24;
          if (v656 == *v24) {
            goto LABEL_8;
          }
        }
        if (v26) {
          uint64_t v30 = v26;
        }
        else {
          uint64_t v30 = v24;
        }
        goto LABEL_29;
      }
LABEL_8:
      ++v9;
      int v1 = v612;
      if (v9 == v7) {
        goto LABEL_2;
      }
    }
    uint64_t v38 = 0;
LABEL_49:
    uint64_t v18 = sub_1CC2CE228(v10, (int *)&v650, v38);
    int *v18 = v12;
    *((_OWORD *)v18 + 7) = 0u;
    *((_OWORD *)v18 + 8) = 0u;
    *((_OWORD *)v18 + 9) = 0u;
    *((_OWORD *)v18 + 6) = 0u;
    *((void *)v18 + 1) = 1;
    *(void *)&long long v39 = -1;
    *((void *)&v39 + 1) = -1;
    *((_OWORD *)v18 + 1) = v39;
    *((_OWORD *)v18 + 2) = v39;
    *((_OWORD *)v18 + 3) = v39;
    *((_OWORD *)v18 + 4) = v39;
    *((void *)v18 + 10) = v18 + 24;
    *((void *)v18 + 11) = 0x1000000000;
    goto LABEL_13;
  }
LABEL_2:
  uint64_t v8 = (int *)v1[92];
  v601 = (int *)v1[93];
  if (v8 == v601) {
    goto LABEL_3;
  }
  uint64_t v600 = (uint64_t)(v1 + 86);
  v611 = v1 + 67;
  uint64_t v598 = (uint64_t)(v1 + 95);
  do
  {
    unsigned int v616 = *v8;
    uint64_t v40 = sub_1CC2CD550(v600, &v616);
    LODWORD(v41) = v8[9];
    if (v41 == v8[10]) {
      goto LABEL_942;
    }
    v608 = *(unsigned int **)(v40 + 8);
    uint64_t v603 = *((void *)v8 + 1);
    v650 = v652;
    uint64_t v651 = 0x1000000000;
    uint64_t v613 = 0;
    uint64_t v614 = 0;
    unsigned int v615 = 0;
    v656 = v658;
    uint64_t v657 = 0x2000000000;
    uint64_t v635 = 0;
    int32x2_t v636 = 0;
    unsigned int v637 = 0;
    v633[0] = 0;
    v633[1] = 0;
    uint64_t v42 = (unint64_t *)*((void *)v8 + 3);
    if (v42 == *((unint64_t **)v8 + 2)) {
      uint64_t v41 = v41;
    }
    else {
      uint64_t v41 = v8[8];
    }
    int v634 = 0;
    if (v41)
    {
      uint64_t v43 = 8 * v41;
      uint64_t v44 = v42;
      while (*v44 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v44;
        v43 -= 8;
        if (!v43) {
          goto LABEL_180;
        }
      }
    }
    else
    {
      uint64_t v44 = v42;
    }
    uint64_t v45 = &v42[v41];
    if (v44 != v45)
    {
      int v46 = v8;
      unint64_t v47 = *v44;
LABEL_64:
      uint64_t v48 = *(void *)(v47 + 24);
      uint64_t v49 = v1[60];
      if (!*(void *)(v49 + 1320)) {
        operator new();
      }
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v49);
      uint64_t v50 = *(void *)(v49 + 1320);
      uint64_t v51 = *(unsigned int *)(v50 + 40);
      unsigned int v52 = v48 >> 4;
      if (v51)
      {
        uint64_t v53 = *(void *)(v50 + 24);
        LODWORD(v54) = (v51 - 1) & (v52 ^ (v48 >> 9));
        uint64_t v55 = (uint64_t *)(v53 + 16 * v54);
        uint64_t v56 = *v55;
        if (v48 == *v55)
        {
LABEL_71:
          if (v55 != (uint64_t *)(v53 + 16 * v51))
          {
            uint64_t v59 = v55[1];
            goto LABEL_74;
          }
        }
        else
        {
          int v57 = 1;
          while (v56 != -4096)
          {
            int v58 = v54 + v57++;
            uint64_t v54 = v58 & (v51 - 1);
            uint64_t v56 = *(void *)(v53 + 16 * v54);
            if (v48 == v56)
            {
              uint64_t v55 = (uint64_t *)(v53 + 16 * v54);
              goto LABEL_71;
            }
          }
        }
      }
      uint64_t v59 = 0;
LABEL_74:
      v645 = (void **)v59;
      unint64_t v60 = sub_1CC2CED4C((uint64_t)v633, (uint64_t *)&v645);
      uint64_t v61 = v60[1];
      if (!v61)
      {
        uint64_t v78 = v1[60];
        if (!*(void *)(v78 + 1320)) {
          operator new();
        }
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v78);
        uint64_t v79 = *(void *)(v78 + 1320);
        uint64_t v80 = *(unsigned int *)(v79 + 40);
        if (v80)
        {
          uint64_t v81 = *(void *)(v79 + 24);
          LODWORD(v82) = (v80 - 1) & (v52 ^ (v48 >> 9));
          unsigned int v83 = (uint64_t *)(v81 + 16 * v82);
          uint64_t v84 = *v83;
          uint64_t v8 = v46;
          if (v48 != *v83)
          {
            int v85 = 1;
            while (v84 != -4096)
            {
              int v86 = v82 + v85++;
              uint64_t v82 = v86 & (v80 - 1);
              uint64_t v84 = *(void *)(v81 + 16 * v82);
              if (v48 == v84)
              {
LABEL_126:
                unsigned int v83 = (uint64_t *)(v81 + 16 * v82);
                goto LABEL_127;
              }
            }
            goto LABEL_129;
          }
LABEL_127:
          if (v83 != (uint64_t *)(v81 + 16 * v80))
          {
            unsigned int v108 = (char *)v83[1];
            goto LABEL_131;
          }
          goto LABEL_129;
        }
LABEL_130:
        unsigned int v108 = 0;
        uint64_t v8 = v46;
LABEL_131:
        v640 = v108;
        sub_1CC2CE85C((uint64_t)v633, (uint64_t *)&v640)[1] = v47;
        int v109 = v44 + 1;
        while (v109 != v45)
        {
          unint64_t v110 = *v109++;
          unint64_t v47 = v110;
          if (v110 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v44 = v109 - 1;
            goto LABEL_64;
          }
        }
        if (v651)
        {
          unsigned int v111 = (char *)v650;
          uint64_t v112 = (char *)v650 + 8 * v651;
          do
          {
            uint64_t v113 = *(void *)v111;
            uint64_t v115 = *((void *)v8 + 2);
            uint64_t v114 = *((void *)v8 + 3);
            if (v114 == v115)
            {
              uint64_t v116 = v8[9];
              unsigned int v117 = (void *)(v114 + 8 * v116);
              if (v116)
              {
                uint64_t v118 = 0;
                uint64_t v119 = 8 * v116;
                while (*(void *)(v114 + v118) != v113)
                {
                  v118 += 8;
                  if (v119 == v118) {
                    goto LABEL_167;
                  }
                }
                unsigned int v117 = (void *)(v114 + v118);
              }
LABEL_167:
              uint64_t v115 = *((void *)v8 + 3);
            }
            else
            {
              uint64_t v120 = v8[8];
              int v121 = v120 - 1;
              unsigned int v122 = (v120 - 1) & ((v113 >> 4) ^ (v113 >> 9));
              unsigned int v117 = (void *)(v114 + 8 * v122);
              uint64_t v123 = *v117;
              if (*v117 == -1)
              {
                unint64_t v124 = 0;
LABEL_176:
                if (v124) {
                  unsigned int v117 = v124;
                }
                if (*v117 != v113) {
                  unsigned int v117 = (void *)(v114 + 8 * v120);
                }
              }
              else
              {
                unint64_t v124 = 0;
                int v125 = 1;
                while (v123 != v113)
                {
                  if (v124) {
                    BOOL v126 = 0;
                  }
                  else {
                    BOOL v126 = v123 == -2;
                  }
                  if (v126) {
                    unint64_t v124 = v117;
                  }
                  unsigned int v127 = v122 + v125++;
                  unsigned int v122 = v127 & v121;
                  unsigned int v117 = (void *)(v114 + 8 * (v127 & v121));
                  uint64_t v123 = *v117;
                  if (*v117 == -1) {
                    goto LABEL_176;
                  }
                }
              }
            }
            if (v114 == v115) {
              uint64_t v128 = (unsigned int *)(v8 + 9);
            }
            else {
              uint64_t v128 = (unsigned int *)(v8 + 8);
            }
            if (v117 != (void *)(v114 + 8 * *v128))
            {
              *unsigned int v117 = -2;
              ++v8[10];
            }
            v111 += 8;
          }
          while (v111 != v112);
        }
        goto LABEL_180;
      }
      unint64_t v62 = v60[1];
      __int16 v63 = *(_WORD *)(v61 + 44);
      unint64_t v64 = v62;
      if ((v63 & 4) != 0)
      {
        do
          unint64_t v64 = *(void *)v64 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v64 + 44) & 4) != 0);
      }
      if ((v63 & 8) != 0)
      {
        do
          unint64_t v62 = *(void *)(v62 + 8);
        while ((*(_WORD *)(v62 + 44) & 8) != 0);
      }
      unint64_t v65 = *(void *)(v62 + 8);
      if (v64 != v65)
      {
        while (1)
        {
          unsigned int v66 = **(unsigned __int16 **)(v64 + 16);
          BOOL v67 = v66 > 0x17;
          int v68 = (1 << v66) & 0x83E000;
          if (v67 || v68 == 0) {
            break;
          }
          unint64_t v64 = *(void *)(v64 + 8);
          if (v64 == v65)
          {
            unint64_t v64 = v65;
            break;
          }
        }
      }
      uint64_t v70 = *(void *)(v1[57] + 288);
      uint64_t v71 = *(void *)(v70 + 368);
      uint64_t v72 = *(unsigned int *)(v70 + 384);
      if (v72)
      {
        LODWORD(v73) = ((v64 >> 4) ^ (v64 >> 9)) & (v72 - 1);
        uint64_t v74 = (uint64_t *)(v71 + 16 * v73);
        uint64_t v75 = *v74;
        if (v64 == *v74) {
          goto LABEL_98;
        }
        int v76 = 1;
        while (v75 != -4096)
        {
          int v77 = v73 + v76++;
          uint64_t v73 = v77 & (v72 - 1);
          uint64_t v75 = *(void *)(v71 + 16 * v73);
          if (v64 == v75)
          {
            uint64_t v74 = (uint64_t *)(v71 + 16 * v73);
            goto LABEL_98;
          }
        }
      }
      uint64_t v74 = (uint64_t *)(v71 + 16 * v72);
LABEL_98:
      __int16 v87 = *(_WORD *)(v47 + 44);
      unint64_t v88 = v47;
      if ((v87 & 4) != 0)
      {
        do
          unint64_t v88 = *(void *)v88 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v88 + 44) & 4) != 0);
      }
      unint64_t v89 = v47;
      if ((v87 & 8) != 0)
      {
        do
          unint64_t v89 = *(void *)(v89 + 8);
        while ((*(_WORD *)(v89 + 44) & 8) != 0);
      }
      uint64_t v90 = v74[1];
      unint64_t v91 = *(void *)(v89 + 8);
      if (v88 != v91)
      {
        while (1)
        {
          unsigned int v92 = **(unsigned __int16 **)(v88 + 16);
          BOOL v67 = v92 > 0x17;
          int v93 = (1 << v92) & 0x83E000;
          if (v67 || v93 == 0) {
            break;
          }
          unint64_t v88 = *(void *)(v88 + 8);
          if (v88 == v91)
          {
            unint64_t v88 = v91;
            break;
          }
        }
      }
      if (v72)
      {
        LODWORD(v95) = ((v88 >> 4) ^ (v88 >> 9)) & (v72 - 1);
        uint64_t v96 = (uint64_t *)(v71 + 16 * v95);
        uint64_t v97 = *v96;
        if (v88 == *v96) {
          goto LABEL_114;
        }
        int v98 = 1;
        while (v97 != -4096)
        {
          int v99 = v95 + v98++;
          uint64_t v95 = v99 & (v72 - 1);
          uint64_t v97 = *(void *)(v71 + 16 * v95);
          if (v88 == v97)
          {
            uint64_t v96 = (uint64_t *)(v71 + 16 * v95);
            goto LABEL_114;
          }
        }
      }
      uint64_t v96 = (uint64_t *)(v71 + 16 * v72);
LABEL_114:
      unsigned int v100 = (v96[1] >> 1) & 3 | *(_DWORD *)((v96[1] & 0xFFFFFFFFFFFFFFF8) + 24);
      unsigned int v101 = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFFFF8) + 24) | (v90 >> 1) & 3;
      if (v100 <= v101) {
        unint64_t v102 = v60[1];
      }
      else {
        unint64_t v102 = v47;
      }
      if (v100 > v101) {
        unint64_t v47 = v60[1];
      }
      if (v651 >= (unint64_t)HIDWORD(v651)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v650 + v651) = v102;
      LODWORD(v651) = v651 + 1;
      uint64_t v103 = v1[60];
      if (!*(void *)(v103 + 1320)) {
        operator new();
      }
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v103);
      uint64_t v104 = *(void *)(v103 + 1320);
      uint64_t v80 = *(unsigned int *)(v104 + 40);
      if (v80)
      {
        uint64_t v81 = *(void *)(v104 + 24);
        LODWORD(v82) = (v80 - 1) & (v52 ^ (v48 >> 9));
        unsigned int v83 = (uint64_t *)(v81 + 16 * v82);
        uint64_t v105 = *v83;
        uint64_t v8 = v46;
        if (v48 != *v83)
        {
          int v106 = 1;
          while (v105 != -4096)
          {
            int v107 = v82 + v106++;
            uint64_t v82 = v107 & (v80 - 1);
            uint64_t v105 = *(void *)(v81 + 16 * v82);
            if (v48 == v105) {
              goto LABEL_126;
            }
          }
LABEL_129:
          unsigned int v108 = 0;
          goto LABEL_131;
        }
        goto LABEL_127;
      }
      goto LABEL_130;
    }
LABEL_180:
    unint64_t v129 = *(void *)(v603 + 8);
    uint64_t v130 = *(void *)(v1[57] + 288);
    if (v129 >= 8 && (uint64_t v131 = *(void *)((v129 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
    {
      uint64_t v132 = (uint64_t *)(v131 + 24);
    }
    else
    {
      uint64_t v589 = *(void **)(v130 + 536);
      unint64_t v590 = *(unsigned int *)(v130 + 544);
      if (v590)
      {
        unsigned int v591 = *(_DWORD *)((v129 & 0xFFFFFFFFFFFFFFF8) + 24) | (v129 >> 1) & 3;
        v592 = v589;
        unint64_t v593 = v590;
        do
        {
          unint64_t v594 = v593 >> 1;
          v595 = &v592[2 * (v593 >> 1)];
          uint64_t v597 = *v595;
          v596 = v595 + 2;
          v593 += ~(v593 >> 1);
          if (((v597 >> 1) & 3 | *(_DWORD *)((v597 & 0xFFFFFFFFFFFFFFF8) + 24)) < v591) {
            v592 = v596;
          }
          else {
            unint64_t v593 = v594;
          }
        }
        while (v593);
        if (v592 == &v589[2 * v590]
          || ((*v592 >> 1) & 3 | *(_DWORD *)((*v592 & 0xFFFFFFFFFFFFFFF8) + 24)) > v591)
        {
          v592 -= 2;
        }
      }
      else
      {
        v592 = *(void **)(v130 + 536);
      }
      uint64_t v132 = v592 + 1;
    }
    uint64_t v133 = *v132;
    v645 = (void **)v649;
    v646 = v649;
    uint64_t v647 = 8;
    int v648 = 0;
    v640 = v644;
    v641 = v644;
    uint64_t v642 = 8;
    int v643 = 0;
    uint64_t v134 = v1[60];
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v134);
    uint64_t v135 = *(void *)(v134 + 1320);
    uint64_t v136 = *(void *)(v135 + 24);
    uint64_t v137 = *(unsigned int *)(v135 + 40);
    unsigned int v138 = v133 >> 4;
    if (v137)
    {
      LODWORD(v139) = (v137 - 1) & (v138 ^ (v133 >> 9));
      uint64_t v140 = (uint64_t *)(v136 + 16 * v139);
      uint64_t v141 = *v140;
      if (*v140 == v133) {
        goto LABEL_190;
      }
      int v142 = 1;
      while (v141 != -4096)
      {
        int v143 = v139 + v142++;
        uint64_t v139 = v143 & (v137 - 1);
        uint64_t v141 = *(void *)(v136 + 16 * v139);
        if (v141 == v133)
        {
          uint64_t v140 = (uint64_t *)(v136 + 16 * v139);
          goto LABEL_190;
        }
      }
    }
    uint64_t v140 = (uint64_t *)(v136 + 16 * v137);
LABEL_190:
    uint64_t v144 = v8;
    uint64_t v145 = *(void *)(v140[1] + 8);
    unsigned int v147 = (unint64_t *)*((void *)v144 + 2);
    unsigned int v146 = (unint64_t *)*((void *)v144 + 3);
    uint64_t v148 = (unsigned int *)(v144 + 9);
    v599 = v144;
    uint64_t v149 = (unsigned int *)(v144 + 8);
    if (v146 == v147) {
      uint64_t v150 = v148;
    }
    else {
      uint64_t v150 = v149;
    }
    uint64_t v151 = *v150;
    if (v151)
    {
      uint64_t v152 = 8 * v151;
      unsigned int v153 = v146;
      while (*v153 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v153;
        v152 -= 8;
        if (!v152) {
          goto LABEL_356;
        }
      }
    }
    else
    {
      unsigned int v153 = v146;
    }
    int v154 = &v146[v151];
    if (v153 == v154) {
      goto LABEL_356;
    }
    unint64_t v155 = *v153;
LABEL_201:
    uint64_t v156 = *(void *)(v155 + 24);
    uint64_t v157 = v1[60];
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v157);
    uint64_t v158 = *(void *)(v157 + 1320);
    uint64_t v159 = *(void *)(v158 + 24);
    uint64_t v160 = *(unsigned int *)(v158 + 40);
    unsigned int v161 = v156 >> 4;
    if (!v160) {
      goto LABEL_207;
    }
    LODWORD(v162) = (v160 - 1) & (v161 ^ (v156 >> 9));
    uint64_t v163 = (uint64_t *)(v159 + 16 * v162);
    uint64_t v164 = *v163;
    if (*v163 != v156)
    {
      int v165 = 1;
      while (v164 != -4096)
      {
        int v166 = v162 + v165++;
        uint64_t v162 = v166 & (v160 - 1);
        uint64_t v164 = *(void *)(v159 + 16 * v162);
        if (v164 == v156)
        {
          uint64_t v163 = (uint64_t *)(v159 + 16 * v162);
          goto LABEL_208;
        }
      }
LABEL_207:
      uint64_t v163 = (uint64_t *)(v159 + 16 * v160);
    }
LABEL_208:
    if (v163 == (uint64_t *)(v159 + 16 * v160)) {
      uint64_t v167 = 0;
    }
    else {
      uint64_t v167 = v163[1];
    }
    uint64_t v639 = v167;
    if (v167 == v145) {
      goto LABEL_306;
    }
    unsigned int v168 = v161 ^ (v156 >> 9);
    while (1)
    {
      uint64_t v169 = v1[60];
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v169);
      uint64_t v170 = *(void *)(v169 + 1320);
      uint64_t v171 = *(void *)(v170 + 24);
      uint64_t v172 = *(unsigned int *)(v170 + 40);
      if (v172)
      {
        LODWORD(v173) = (v172 - 1) & v168;
        int v174 = (uint64_t *)(v171 + 16 * v173);
        uint64_t v175 = *v174;
        if (*v174 == v156) {
          goto LABEL_219;
        }
        int v176 = 1;
        while (v175 != -4096)
        {
          int v177 = v173 + v176++;
          uint64_t v173 = v177 & (v172 - 1);
          uint64_t v175 = *(void *)(v171 + 16 * v173);
          if (v175 == v156)
          {
            int v174 = (uint64_t *)(v171 + 16 * v173);
            goto LABEL_219;
          }
        }
      }
      int v174 = (uint64_t *)(v171 + 16 * v172);
LABEL_219:
      uint64_t v178 = v174 == (uint64_t *)(v171 + 16 * v172) ? 0 : v174[1];
      if (v167 != v178 && sub_1CC2CED4C((uint64_t)v633, &v639)[1]) {
        break;
      }
      uint64_t v179 = v645;
      if (v646 == v645)
      {
        unsigned int v180 = HIDWORD(v647);
        uint64_t v181 = (char *)v646 + 8 * HIDWORD(v647);
        if (HIDWORD(v647))
        {
          uint64_t v182 = 0;
          while (*(void *)((char *)v646 + v182) != v167)
          {
            v182 += 8;
            if (8 * HIDWORD(v647) == v182) {
              goto LABEL_242;
            }
          }
          uint64_t v181 = (char *)v646 + v182;
        }
LABEL_242:
        uint64_t v179 = v646;
      }
      else
      {
        int v183 = v647 - 1;
        unsigned int v184 = (v647 - 1) & ((v167 >> 4) ^ (v167 >> 9));
        uint64_t v181 = (char *)v646 + 8 * v184;
        uint64_t v185 = *(void *)v181;
        if (*(void *)v181 == -1)
        {
          uint64_t v186 = 0;
LABEL_282:
          if (v186) {
            uint64_t v181 = v186;
          }
          unsigned int v180 = HIDWORD(v647);
          if (*(void *)v181 != v167) {
            uint64_t v181 = (char *)v646 + 8 * v647;
          }
        }
        else
        {
          uint64_t v186 = 0;
          int v187 = 1;
          while (v185 != v167)
          {
            if (v186) {
              BOOL v188 = 0;
            }
            else {
              BOOL v188 = v185 == -2;
            }
            if (v188) {
              uint64_t v186 = v181;
            }
            unsigned int v189 = v184 + v187++;
            unsigned int v184 = v189 & v183;
            uint64_t v181 = (char *)v646 + 8 * (v189 & v183);
            uint64_t v185 = *(void *)v181;
            if (*(void *)v181 == -1) {
              goto LABEL_282;
            }
          }
          unsigned int v180 = HIDWORD(v647);
        }
      }
      if (v646 == v179) {
        unsigned int v190 = v180;
      }
      else {
        unsigned int v190 = v647;
      }
      if (v181 != (char *)v646 + 8 * v190) {
        goto LABEL_306;
      }
      uint64_t v191 = v641;
      uint64_t v192 = HIDWORD(v642);
      if (v641 != v640)
      {
        unsigned int v196 = v642;
LABEL_258:
        if (3 * v196 <= 4 * (HIDWORD(v642) - v643))
        {
          if (v196 >= 0x40) {
            v196 *= 2;
          }
          else {
            unsigned int v196 = 128;
          }
        }
        else if (v196 - HIDWORD(v642) >= v196 >> 3)
        {
          goto LABEL_260;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v640, v196);
        unsigned int v196 = v642;
        uint64_t v191 = v641;
LABEL_260:
        unsigned int v197 = v196 - 1;
        unsigned int v198 = (v196 - 1) & ((v167 >> 4) ^ (v167 >> 9));
        uint64_t v199 = &v191[8 * v198];
        uint64_t v200 = *(void *)v199;
        if (*(void *)v199 == -1)
        {
          uint64_t v201 = 0;
LABEL_272:
          if (v201) {
            uint64_t v205 = v201;
          }
          else {
            uint64_t v205 = (uint64_t *)v199;
          }
          if (*v205 != v167)
          {
            if (*v205 == -2) {
              --v643;
            }
            else {
              ++HIDWORD(v642);
            }
            *uint64_t v205 = v167;
          }
        }
        else
        {
          uint64_t v201 = 0;
          int v202 = 1;
          while (v200 != v167)
          {
            if (v201) {
              BOOL v203 = 0;
            }
            else {
              BOOL v203 = v200 == -2;
            }
            if (v203) {
              uint64_t v201 = (uint64_t *)v199;
            }
            unsigned int v204 = v198 + v202++;
            unsigned int v198 = v204 & v197;
            uint64_t v199 = &v191[8 * (v204 & v197)];
            uint64_t v200 = *(void *)v199;
            if (*(void *)v199 == -1) {
              goto LABEL_272;
            }
          }
        }
        goto LABEL_279;
      }
      if (HIDWORD(v642))
      {
        uint64_t v193 = 0;
        uint64_t v194 = 8 * HIDWORD(v642);
        uint64_t v195 = (uint64_t *)v641;
        while (*v195 != v167)
        {
          if (*v195 == -2) {
            uint64_t v193 = v195;
          }
          ++v195;
          v194 -= 8;
          if (!v194)
          {
            if (!v193) {
              goto LABEL_255;
            }
            *uint64_t v193 = v167;
            --v643;
            goto LABEL_279;
          }
        }
        goto LABEL_279;
      }
LABEL_255:
      unsigned int v196 = v642;
      if (HIDWORD(v642) >= v642) {
        goto LABEL_258;
      }
      ++HIDWORD(v642);
      *(void *)&v641[8 * v192] = v167;
LABEL_279:
      uint64_t v167 = *(void *)(v167 + 8);
      uint64_t v639 = v167;
      if (v167 == v145) {
        goto LABEL_306;
      }
    }
    uint64_t v206 = v1[60];
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v206);
    uint64_t v207 = *(void *)(v206 + 1320);
    uint64_t v208 = *(void *)(v207 + 24);
    uint64_t v209 = *(unsigned int *)(v207 + 40);
    if (!v209) {
      goto LABEL_300;
    }
    LODWORD(v210) = (v209 - 1) & v168;
    uint64_t v211 = (uint64_t *)(v208 + 16 * v210);
    uint64_t v212 = *v211;
    if (*v211 != v156)
    {
      int v213 = 1;
      while (v212 != -4096)
      {
        int v214 = v210 + v213++;
        uint64_t v210 = v214 & (v209 - 1);
        uint64_t v212 = *(void *)(v208 + 16 * v210);
        if (v212 == v156)
        {
          uint64_t v211 = (uint64_t *)(v208 + 16 * v210);
          goto LABEL_301;
        }
      }
LABEL_300:
      uint64_t v211 = (uint64_t *)(v208 + 16 * v209);
    }
LABEL_301:
    if (v211 == (uint64_t *)(v208 + 16 * v209)) {
      uint64_t v215 = 0;
    }
    else {
      uint64_t v215 = v211[1];
    }
    uint64_t v638 = v215;
    uint64_t v216 = sub_1CC2CE85C((uint64_t)v633, &v638)[1];
    if (v216)
    {
      if (v651 >= (unint64_t)HIDWORD(v651)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v138 = v133 >> 4;
      *((void *)v650 + v651) = v216;
      LODWORD(v651) = v651 + 1;
      goto LABEL_339;
    }
LABEL_306:
    uint64_t v217 = v1[60];
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v217);
    uint64_t v218 = *(void *)(v217 + 1320);
    uint64_t v219 = *(void *)(v218 + 24);
    uint64_t v220 = *(unsigned int *)(v218 + 40);
    if (v220)
    {
      LODWORD(v221) = (v220 - 1) & (v161 ^ (v156 >> 9));
      uint64_t v222 = (uint64_t *)(v219 + 16 * v221);
      uint64_t v223 = *v222;
      if (*v222 != v156)
      {
        int v224 = 1;
        while (v223 != -4096)
        {
          int v225 = v221 + v224++;
          uint64_t v221 = v225 & (v220 - 1);
          uint64_t v223 = *(void *)(v219 + 16 * v221);
          if (v223 == v156)
          {
            uint64_t v222 = (uint64_t *)(v219 + 16 * v221);
            goto LABEL_313;
          }
        }
        goto LABEL_312;
      }
    }
    else
    {
LABEL_312:
      uint64_t v222 = (uint64_t *)(v219 + 16 * v220);
    }
LABEL_313:
    if (v222 == (uint64_t *)(v219 + 16 * v220)) {
      uint64_t v226 = 0;
    }
    else {
      uint64_t v226 = v222[1];
    }
    unsigned int v138 = v133 >> 4;
    uint64_t v638 = v226;
    if (!v637)
    {
      unint64_t v234 = 0;
      goto LABEL_329;
    }
    unsigned int v227 = ((v226 >> 4) ^ (v226 >> 9)) & (v637 - 1);
    uint64_t v228 = (void *)(v635 + 16 * v227);
    uint64_t v229 = *v228;
    if (v226 != *v228)
    {
      unint64_t v230 = 0;
      int v231 = 1;
      while (v229 != -4096)
      {
        if (v230) {
          BOOL v232 = 0;
        }
        else {
          BOOL v232 = v229 == -8192;
        }
        if (v232) {
          unint64_t v230 = v228;
        }
        unsigned int v233 = v227 + v231++;
        unsigned int v227 = v233 & (v637 - 1);
        uint64_t v228 = (void *)(v635 + 16 * v227);
        uint64_t v229 = *v228;
        if (v226 == *v228) {
          goto LABEL_330;
        }
      }
      if (v230) {
        unint64_t v234 = v230;
      }
      else {
        unint64_t v234 = v228;
      }
LABEL_329:
      uint64_t v228 = sub_1CC2CE980((uint64_t)&v635, (uint64_t)&v638, &v638, v234);
      *uint64_t v228 = v638;
      *((_DWORD *)v228 + 2) = 0;
    }
LABEL_330:
    *((_DWORD *)v228 + 2) = 0;
    unsigned int v235 = (unint64_t *)v641;
    if (v641 == v640) {
      uint64_t v236 = (uint64_t *)((char *)&v642 + 4);
    }
    else {
      uint64_t v236 = &v642;
    }
    uint64_t v237 = *(unsigned int *)v236;
    int v238 = (unint64_t *)&v641[8 * v237];
    if (v237)
    {
      uint64_t v239 = 8 * v237;
      while (*v235 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v235;
        v239 -= 8;
        if (!v239)
        {
          unsigned int v235 = v238;
          break;
        }
      }
    }
    sub_1CC2CE678((llvm::SmallPtrSetImplBase *)&v645, v235, v238, v238);
LABEL_339:
    if (v641 == v640)
    {
LABEL_340:
      int v643 = 0;
      HIDWORD(v642) = 0;
    }
    else
    {
      BOOL v242 = v642 < 0x21 || 4 * (HIDWORD(v642) - v643) >= v642;
      if (v242)
      {
        memset(v641, 255, 8 * v642);
        goto LABEL_340;
      }
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v640);
    }
    uint64_t v240 = v153 + 1;
    while (v240 != v154)
    {
      unint64_t v241 = *v240++;
      unint64_t v155 = v241;
      if (v241 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        unsigned int v153 = v240 - 1;
        goto LABEL_201;
      }
    }
LABEL_356:
    uint64_t v243 = v1[60];
    if (!*(void *)(v243 + 1320)) {
      operator new();
    }
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v243);
    uint64_t v244 = *(void *)(v243 + 1320);
    uint64_t v245 = *(unsigned int *)(v244 + 40);
    if (v245)
    {
      uint64_t v246 = *(void *)(v244 + 24);
      LODWORD(v247) = (v245 - 1) & (v138 ^ (v133 >> 9));
      unint64_t v248 = (uint64_t *)(v246 + 16 * v247);
      uint64_t v249 = *v248;
      if (v133 != *v248)
      {
        int v250 = 1;
        while (v249 != -4096)
        {
          int v251 = v247 + v250++;
          uint64_t v247 = v251 & (v245 - 1);
          uint64_t v249 = *(void *)(v246 + 16 * v247);
          if (v133 == v249)
          {
            unint64_t v248 = (uint64_t *)(v246 + 16 * v247);
            goto LABEL_363;
          }
        }
        goto LABEL_365;
      }
LABEL_363:
      if (v248 == (uint64_t *)(v246 + 16 * v245)) {
        goto LABEL_365;
      }
      uint64_t v252 = v248[1];
    }
    else
    {
LABEL_365:
      uint64_t v252 = 0;
    }
    if (v657 >= (unint64_t)HIDWORD(v657)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v253 = 0;
    *((void *)v656 + v657) = v252;
    LODWORD(v657) = v657 + 1;
    uint64_t v254 = v657;
    uint64_t v255 = v657;
    do
    {
      uint64_t v256 = *((void *)v656 + v253);
      uint64_t v257 = *(unsigned int *)(v256 + 32);
      if (v257)
      {
        __int16 v258 = *(uint64_t **)(v256 + 24);
        unint64_t v259 = &v258[v257];
        do
        {
          uint64_t v260 = *v258;
          uint64_t v261 = v645;
          if (v646 == v645)
          {
            unsigned int v262 = HIDWORD(v647);
            uint64_t v263 = (char *)v646 + 8 * HIDWORD(v647);
            if (HIDWORD(v647))
            {
              uint64_t v264 = 0;
              while (*(void *)((char *)v646 + v264) != v260)
              {
                v264 += 8;
                if (8 * HIDWORD(v647) == v264) {
                  goto LABEL_389;
                }
              }
              uint64_t v263 = (char *)v646 + v264;
            }
LABEL_389:
            uint64_t v261 = v646;
          }
          else
          {
            int v265 = v647 - 1;
            unsigned int v266 = (v647 - 1) & ((v260 >> 4) ^ (v260 >> 9));
            uint64_t v263 = (char *)v646 + 8 * v266;
            uint64_t v267 = *(void *)v263;
            if (*(void *)v263 == -1)
            {
              uint64_t v268 = 0;
LABEL_399:
              if (v268) {
                uint64_t v263 = v268;
              }
              unsigned int v262 = HIDWORD(v647);
              if (*(void *)v263 != v260) {
                uint64_t v263 = (char *)v646 + 8 * v647;
              }
            }
            else
            {
              uint64_t v268 = 0;
              int v269 = 1;
              while (v267 != v260)
              {
                if (v268) {
                  BOOL v270 = 0;
                }
                else {
                  BOOL v270 = v267 == -2;
                }
                if (v270) {
                  uint64_t v268 = v263;
                }
                unsigned int v271 = v266 + v269++;
                unsigned int v266 = v271 & v265;
                uint64_t v263 = (char *)v646 + 8 * (v271 & v265);
                uint64_t v267 = *(void *)v263;
                if (*(void *)v263 == -1) {
                  goto LABEL_399;
                }
              }
              unsigned int v262 = HIDWORD(v647);
            }
          }
          if (v646 == v261) {
            unsigned int v272 = v262;
          }
          else {
            unsigned int v272 = v647;
          }
          if (v263 != (char *)v646 + 8 * v272)
          {
            if (v255 >= HIDWORD(v657)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v656 + v255) = v260;
            LODWORD(v657) = v657 + 1;
            uint64_t v254 = v657;
            LODWORD(v255) = v657;
          }
          ++v258;
          uint64_t v273 = v254;
        }
        while (v258 != v259);
      }
      else
      {
        uint64_t v273 = v255;
      }
      ++v253;
      uint64_t v255 = v273;
    }
    while (v273 != v253);
    if (v641 != v640) {
      free(v641);
    }
    if (v646 != v645) {
      free(v646);
    }
    v646 = 0;
    v645 = 0;
    LODWORD(v647) = 0;
    if (!v657) {
      goto LABEL_850;
    }
    uint64_t v274 = (uint64_t *)((char *)v656 + 8 * v657);
    while (2)
    {
      uint64_t v276 = (unsigned int **)*--v274;
      uint64_t v275 = (uint64_t)v276;
      unint64_t v277 = *v276;
      if (!v637) {
        goto LABEL_418;
      }
      unsigned int v278 = v637 - 1;
      unsigned int v279 = ((v275 >> 4) ^ (v275 >> 9)) & (v637 - 1);
      uint64_t v280 = (void *)(v635 + 16 * v279);
      uint64_t v281 = *v280;
      if (v275 != *v280)
      {
        int v533 = 1;
        uint64_t v534 = *v280;
        unsigned int v535 = ((v275 >> 4) ^ (v275 >> 9)) & v278;
        do
        {
          if (v534 == -4096) {
            goto LABEL_418;
          }
          unsigned int v536 = v535 + v533++;
          unsigned int v535 = v536 & v278;
          uint64_t v534 = *(void *)(v635 + 16 * v535);
        }
        while (v275 != v534);
        if (v535 == v637) {
          goto LABEL_418;
        }
        v537 = 0;
        int v538 = 1;
        while (v281 != -4096)
        {
          if (v537) {
            BOOL v539 = 0;
          }
          else {
            BOOL v539 = v281 == -8192;
          }
          if (v539) {
            v537 = v280;
          }
          unsigned int v540 = v279 + v538++;
          unsigned int v279 = v540 & v278;
          uint64_t v280 = (void *)(v635 + 16 * v279);
          uint64_t v281 = *v280;
          if (v275 == *v280) {
            goto LABEL_416;
          }
        }
        if (v537) {
          v541 = v537;
        }
        else {
          v541 = v280;
        }
        uint64_t v280 = sub_1CC2CE980((uint64_t)&v635, (uint64_t)v274, v274, v541);
        *uint64_t v280 = *v274;
        *((_DWORD *)v280 + 2) = 0;
LABEL_416:
        if (*((_DWORD *)v280 + 2))
        {
          uint64_t v275 = *v274;
          goto LABEL_418;
        }
        if (v647)
        {
          uint64_t v406 = *v274;
          unsigned int v407 = ((*v274 >> 4) ^ (*v274 >> 9)) & (v647 - 1);
          uint64_t v408 = (uint64_t *)&v645[22 * v407];
          uint64_t v409 = *v408;
          if (*v274 == *v408) {
            goto LABEL_607;
          }
          uint64_t v441 = 0;
          int v442 = 1;
          while (v409 != -4096)
          {
            if (v441) {
              BOOL v443 = 0;
            }
            else {
              BOOL v443 = v409 == -8192;
            }
            if (v443) {
              uint64_t v441 = v408;
            }
            unsigned int v444 = v407 + v442++;
            unsigned int v407 = v444 & (v647 - 1);
            uint64_t v408 = (uint64_t *)&v645[22 * v407];
            uint64_t v409 = *v408;
            if (v406 == *v408) {
              goto LABEL_607;
            }
          }
          if (v441) {
            v445 = v441;
          }
          else {
            v445 = v408;
          }
        }
        else
        {
          v445 = 0;
        }
        uint64_t v408 = sub_1CC2CEB38((uint64_t)&v645, v274, v445);
        uint64_t *v408 = *v274;
        v408[1] = (uint64_t)(v408 + 5);
        v408[2] = (uint64_t)(v408 + 5);
        v408[3] = 16;
        *((_DWORD *)v408 + 8) = 0;
        v408[21] = 0;
        uint64_t v406 = *v274;
LABEL_607:
        uint64_t v410 = v408[2];
        uint64_t v411 = *((unsigned int *)v408 + 7);
        if (v410 == v408[1])
        {
          if (v411)
          {
            int v412 = 0;
            uint64_t v413 = 8 * v411;
            uint64_t v414 = (uint64_t *)v408[2];
            do
            {
              if (*v414 == v406) {
                goto LABEL_671;
              }
              if (*v414 == -2) {
                int v412 = v414;
              }
              ++v414;
              v413 -= 8;
            }
            while (v413);
            if (v412)
            {
              uint64_t *v412 = v406;
              --*((_DWORD *)v408 + 8);
              goto LABEL_671;
            }
          }
          unsigned int v415 = *((_DWORD *)v408 + 6);
          if (v411 < v415)
          {
            *((_DWORD *)v408 + 7) = v411 + 1;
            *(void *)(v410 + 8 * v411) = v406;
            goto LABEL_671;
          }
        }
        else
        {
          unsigned int v415 = *((_DWORD *)v408 + 6);
        }
        if (3 * v415 <= 4 * ((int)v411 - *((_DWORD *)v408 + 8)))
        {
          if (v415 >= 0x40) {
            v415 *= 2;
          }
          else {
            unsigned int v415 = 128;
          }
        }
        else if (v415 - v411 >= v415 >> 3)
        {
          goto LABEL_620;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v408 + 1), v415);
        unsigned int v415 = *((_DWORD *)v408 + 6);
        uint64_t v410 = v408[2];
LABEL_620:
        unsigned int v416 = v415 - 1;
        unsigned int v417 = (v415 - 1) & ((v406 >> 4) ^ (v406 >> 9));
        char v418 = (uint64_t *)(v410 + 8 * v417);
        uint64_t v419 = *v418;
        if (*v418 == -1)
        {
          uint64_t v420 = 0;
LABEL_664:
          if (v420) {
            v446 = v420;
          }
          else {
            v446 = v418;
          }
          if (*v446 != v406)
          {
            if (*v446 == -2) {
              --*((_DWORD *)v408 + 8);
            }
            else {
              ++*((_DWORD *)v408 + 7);
            }
            uint64_t *v446 = v406;
          }
        }
        else
        {
          uint64_t v420 = 0;
          int v421 = 1;
          while (v419 != v406)
          {
            if (v420) {
              BOOL v422 = 0;
            }
            else {
              BOOL v422 = v419 == -2;
            }
            if (v422) {
              uint64_t v420 = v418;
            }
            unsigned int v423 = v417 + v421++;
            unsigned int v417 = v423 & v416;
            char v418 = (uint64_t *)(v410 + 8 * (v423 & v416));
            uint64_t v419 = *v418;
            if (*v418 == -1) {
              goto LABEL_664;
            }
          }
        }
LABEL_671:
        uint64_t v447 = *(void *)(v1[66] + 248);
        if (v447)
        {
          int v448 = *(_DWORD *)(v447 + 176);
          if (v448)
          {
            uint64_t v449 = *(void *)(v447 + 160);
            unsigned int v450 = v448 - 1;
            uint64_t v451 = (v448 - 1) & ((v277 >> 4) ^ (v277 >> 9));
            unint64_t v452 = *(unsigned int **)(v449 + 16 * v451);
            if (v452 == v277)
            {
LABEL_674:
              uint64_t v453 = *(unsigned int *)(v449 + 16 * v451 + 8);
              if (v453 != 0xFFFFFFFFLL)
              {
                uint64_t v454 = *(void *)(*(void *)(v447 + 8) + 24 * v453 + 16);
                goto LABEL_676;
              }
            }
            else
            {
              int v458 = 1;
              while (v452 != (unsigned int *)-4096)
              {
                int v459 = v451 + v458++;
                uint64_t v451 = v459 & v450;
                unint64_t v452 = *(unsigned int **)(v449 + 16 * v451);
                if (v452 == v277) {
                  goto LABEL_674;
                }
              }
            }
          }
        }
        uint64_t v454 = 0;
LABEL_676:
        if (v647)
        {
          unsigned int v455 = ((*v274 >> 4) ^ (*v274 >> 9)) & (v647 - 1);
          uint64_t v456 = (uint64_t *)&v645[22 * v455];
          uint64_t v457 = *v456;
          if (*v274 == *v456)
          {
LABEL_678:
            v456[21] = v454;
            goto LABEL_679;
          }
          v460 = 0;
          int v461 = 1;
          while (v457 != -4096)
          {
            if (v460) {
              BOOL v462 = 0;
            }
            else {
              BOOL v462 = v457 == -8192;
            }
            if (v462) {
              v460 = v456;
            }
            unsigned int v463 = v455 + v461++;
            unsigned int v455 = v463 & (v647 - 1);
            uint64_t v456 = (uint64_t *)&v645[22 * v455];
            uint64_t v457 = *v456;
            if (*v274 == *v456) {
              goto LABEL_678;
            }
          }
          if (v460) {
            v464 = v460;
          }
          else {
            v464 = v456;
          }
        }
        else
        {
          v464 = 0;
        }
        uint64_t v456 = sub_1CC2CEB38((uint64_t)&v645, v274, v464);
        *uint64_t v456 = *v274;
        v456[1] = (uint64_t)(v456 + 5);
        v456[2] = (uint64_t)(v456 + 5);
        v456[3] = 16;
        *((_DWORD *)v456 + 8) = 0;
        v456[21] = 0;
        goto LABEL_678;
      }
      if (v279 != v637) {
        goto LABEL_416;
      }
LABEL_418:
      v609 = v277;
      uint64_t v282 = *(unsigned int *)(v275 + 32);
      if (v282)
      {
        unint64_t v283 = *(char ***)(v275 + 24);
        uint64_t v284 = &v283[v282];
        unsigned int v285 = v647;
        uint64_t v286 = (uint64_t)v645;
        unsigned int v287 = v647;
        unsigned int v288 = v647;
        while (1)
        {
          uint64_t v289 = *v283;
          v640 = *v283;
          if (v288)
          {
            unsigned int v290 = (v289 >> 4) ^ (v289 >> 9);
            unsigned int v291 = v290 & (v288 - 1);
            uint64_t v292 = (void **)(v286 + 176 * v291);
            uint64_t v293 = *v292;
            if (*v292 != v289)
            {
              int v355 = 1;
              while (v293 != (unsigned char *)-4096)
              {
                unsigned int v356 = v291 + v355++;
                unsigned int v291 = v356 & (v288 - 1);
                uint64_t v292 = (void **)(v286 + 176 * v291);
                uint64_t v293 = *v292;
                if (*v292 == v289) {
                  goto LABEL_422;
                }
              }
              goto LABEL_454;
            }
LABEL_422:
            if (v292 != (void **)(v286 + 176 * v287))
            {
              if (v287)
              {
                uint64_t v294 = *v274;
                unsigned int v295 = v287 - 1;
                unsigned int v296 = ((*v274 >> 4) ^ (*v274 >> 9)) & (v287 - 1);
                uint64_t v297 = (uint64_t *)(v286 + 176 * v296);
                uint64_t v298 = *v297;
                if (*v274 == *v297)
                {
                  int v299 = (llvm::SmallPtrSetImplBase *)(v297 + 1);
                  goto LABEL_426;
                }
                uint64_t v338 = 0;
                int v339 = 1;
                while (v298 != -4096)
                {
                  if (v338) {
                    BOOL v340 = 0;
                  }
                  else {
                    BOOL v340 = v298 == -8192;
                  }
                  if (v340) {
                    uint64_t v338 = v297;
                  }
                  unsigned int v341 = v296 + v339++;
                  unsigned int v296 = v341 & v295;
                  uint64_t v297 = (uint64_t *)(v286 + 176 * v296);
                  uint64_t v298 = *v297;
                  if (v294 == *v297) {
                    goto LABEL_528;
                  }
                }
                if (v338) {
                  uint64_t v353 = v338;
                }
                else {
                  uint64_t v353 = v297;
                }
              }
              else
              {
                uint64_t v353 = 0;
              }
              uint64_t v297 = sub_1CC2CEB38((uint64_t)&v645, v274, v353);
              *uint64_t v297 = *v274;
              v297[1] = (uint64_t)(v297 + 5);
              v297[2] = (uint64_t)(v297 + 5);
              v297[3] = 16;
              *((_DWORD *)v297 + 8) = 0;
              v297[21] = 0;
              uint64_t v286 = (uint64_t)v645;
              unsigned int v287 = v647;
LABEL_528:
              int v299 = (llvm::SmallPtrSetImplBase *)(v297 + 1);
              if (v287)
              {
                uint64_t v294 = *v274;
                unsigned int v295 = v287 - 1;
                unsigned int v296 = ((*v274 >> 4) ^ (*v274 >> 9)) & (v287 - 1);
LABEL_426:
                long long v300 = (uint64_t *)(v286 + 176 * v296);
                uint64_t v301 = *v300;
                if (v294 == *v300)
                {
                  uint64_t v302 = v300 + 21;
                  goto LABEL_428;
                }
                BOOL v334 = 0;
                int v335 = 1;
                while (v301 != -4096)
                {
                  if (v334) {
                    BOOL v336 = 0;
                  }
                  else {
                    BOOL v336 = v301 == -8192;
                  }
                  if (v336) {
                    BOOL v334 = v300;
                  }
                  unsigned int v337 = v296 + v335++;
                  unsigned int v296 = v337 & v295;
                  long long v300 = (uint64_t *)(v286 + 176 * v296);
                  uint64_t v301 = *v300;
                  if (v294 == *v300) {
                    goto LABEL_522;
                  }
                }
                if (v334) {
                  unsigned int v352 = v334;
                }
                else {
                  unsigned int v352 = v300;
                }
              }
              else
              {
                unsigned int v352 = 0;
              }
              long long v300 = sub_1CC2CEB38((uint64_t)&v645, v274, v352);
              *long long v300 = *v274;
              v300[1] = (uint64_t)(v300 + 5);
              v300[2] = (uint64_t)(v300 + 5);
              v300[3] = 16;
              *((_DWORD *)v300 + 8) = 0;
              v300[21] = 0;
              uint64_t v286 = (uint64_t)v645;
              unsigned int v287 = v647;
LABEL_522:
              uint64_t v302 = v300 + 21;
              if (v287)
              {
                unsigned int v295 = v287 - 1;
LABEL_428:
                unsigned int v303 = v295 & v290;
                uint64_t v304 = (uint64_t *)(v286 + 176 * (v295 & v290));
                uint64_t v305 = *v304;
                if (v289 == (char *)*v304)
                {
                  uint64_t v306 = v304[21];
                  BOOL v242 = __CFADD__(v306, *v302);
                  uint64_t v307 = v306 + *v302;
                  if (v242) {
                    uint64_t v307 = -1;
                  }
                  *uint64_t v302 = v307;
                  goto LABEL_433;
                }
                uint64_t v330 = 0;
                int v331 = 1;
                while (v305 != -4096)
                {
                  if (v330) {
                    BOOL v332 = 0;
                  }
                  else {
                    BOOL v332 = v305 == -8192;
                  }
                  if (v332) {
                    uint64_t v330 = v304;
                  }
                  unsigned int v333 = v303 + v331++;
                  unsigned int v303 = v333 & v295;
                  uint64_t v304 = (uint64_t *)(v286 + 176 * v303);
                  uint64_t v305 = *v304;
                  if (v289 == (char *)*v304) {
                    goto LABEL_513;
                  }
                }
                if (v330) {
                  v349 = v330;
                }
                else {
                  v349 = v304;
                }
              }
              else
              {
                v349 = 0;
              }
              uint64_t v304 = sub_1CC2CEB38((uint64_t)&v645, (uint64_t *)&v640, v349);
              uint64_t *v304 = (uint64_t)v289;
              v304[1] = (uint64_t)(v304 + 5);
              v304[2] = (uint64_t)(v304 + 5);
              v304[3] = 16;
              *((_DWORD *)v304 + 8) = 0;
              v304[21] = 0;
              uint64_t v286 = (uint64_t)v645;
              unsigned int v287 = v647;
LABEL_513:
              uint64_t v350 = v304[21];
              BOOL v242 = __CFADD__(v350, *v302);
              uint64_t v351 = v350 + *v302;
              if (v242) {
                uint64_t v351 = -1;
              }
              *uint64_t v302 = v351;
              if (!v287)
              {
                unint64_t v348 = 0;
                goto LABEL_508;
              }
LABEL_433:
              unsigned int v308 = v287 - 1;
              unsigned int v309 = v308 & v290;
              uint64_t v310 = (uint64_t *)(v286 + 176 * (v308 & v290));
              uint64_t v311 = *v310;
              if (v289 != (char *)*v310)
              {
                v326 = 0;
                int v327 = 1;
                while (v311 != -4096)
                {
                  if (v326) {
                    BOOL v328 = 0;
                  }
                  else {
                    BOOL v328 = v311 == -8192;
                  }
                  if (v328) {
                    v326 = v310;
                  }
                  unsigned int v329 = v309 + v327++;
                  unsigned int v309 = v329 & v308;
                  uint64_t v310 = (uint64_t *)(v286 + 176 * v309);
                  uint64_t v311 = *v310;
                  if (v289 == (char *)*v310) {
                    goto LABEL_434;
                  }
                }
                if (v326) {
                  unint64_t v348 = v326;
                }
                else {
                  unint64_t v348 = v310;
                }
LABEL_508:
                uint64_t v310 = sub_1CC2CEB38((uint64_t)&v645, (uint64_t *)&v640, v348);
                *uint64_t v310 = (uint64_t)v289;
                v310[1] = (uint64_t)(v310 + 5);
                v310[2] = (uint64_t)(v310 + 5);
                v310[3] = 16;
                *((_DWORD *)v310 + 8) = 0;
                v310[21] = 0;
              }
LABEL_434:
              unint64_t v312 = (unint64_t *)v310[2];
              if (v312 == (unint64_t *)v310[1]) {
                unint64_t v313 = (unsigned int *)v310 + 7;
              }
              else {
                unint64_t v313 = (unsigned int *)(v310 + 3);
              }
              uint64_t v314 = *v313;
              int v315 = &v312[v314];
              if (v314)
              {
                uint64_t v316 = 8 * v314;
                while (*v312 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v312;
                  v316 -= 8;
                  if (!v316)
                  {
                    unint64_t v312 = v315;
                    break;
                  }
                }
              }
              if (v647)
              {
                unsigned int v317 = (v647 - 1) & v290;
                uint64_t v318 = (uint64_t *)&v645[22 * v317];
                uint64_t v319 = *v318;
                if (v289 == (char *)*v318) {
                  goto LABEL_444;
                }
                uint64_t v342 = 0;
                int v343 = 1;
                while (v319 != -4096)
                {
                  if (v342) {
                    BOOL v344 = 0;
                  }
                  else {
                    BOOL v344 = v319 == -8192;
                  }
                  if (v344) {
                    uint64_t v342 = v318;
                  }
                  unsigned int v345 = v317 + v343++;
                  unsigned int v317 = v345 & (v647 - 1);
                  uint64_t v318 = (uint64_t *)&v645[22 * v317];
                  uint64_t v319 = *v318;
                  if (v289 == (char *)*v318) {
                    goto LABEL_444;
                  }
                }
                if (v342) {
                  uint64_t v354 = v342;
                }
                else {
                  uint64_t v354 = v318;
                }
              }
              else
              {
                uint64_t v354 = 0;
              }
              uint64_t v318 = sub_1CC2CEB38((uint64_t)&v645, (uint64_t *)&v640, v354);
              *uint64_t v318 = (uint64_t)v289;
              v318[1] = (uint64_t)(v318 + 5);
              v318[2] = (uint64_t)(v318 + 5);
              v318[3] = 16;
              *((_DWORD *)v318 + 8) = 0;
              v318[21] = 0;
LABEL_444:
              uint64_t v320 = v318[2];
              if (v320 == v318[1]) {
                uint64_t v321 = (unsigned int *)v318 + 7;
              }
              else {
                uint64_t v321 = (unsigned int *)(v318 + 3);
              }
              sub_1CC2CE678(v299, v312, v315, (unint64_t *)(v320 + 8 * *v321));
              uint64_t v286 = (uint64_t)v645;
              unsigned int v285 = v647;
              if (v647)
              {
                unsigned int v322 = ((v640 >> 4) ^ (v640 >> 9)) & (v647 - 1);
                int v323 = &v645[22 * v322];
                unint64_t v324 = *v323;
                if (*v323 == v640)
                {
LABEL_449:
                  unsigned int v325 = v323[2];
                  if (v325 != v323[1]) {
                    free(v325);
                  }
                  *int v323 = (void *)-8192;
                  v646 = (void *)vadd_s32((int32x2_t)v646, (int32x2_t)0x1FFFFFFFFLL);
                }
                else
                {
                  int v346 = 1;
                  while (v324 != (unsigned char *)-4096)
                  {
                    unsigned int v347 = v322 + v346++;
                    unsigned int v322 = v347 & (v647 - 1);
                    int v323 = &v645[22 * v322];
                    unint64_t v324 = *v323;
                    if (*v323 == v640) {
                      goto LABEL_449;
                    }
                  }
                }
                unsigned int v287 = v285;
                unsigned int v288 = v285;
              }
              else
              {
                unsigned int v287 = 0;
                unsigned int v288 = 0;
              }
              goto LABEL_454;
            }
            unsigned int v288 = v287;
          }
LABEL_454:
          if (++v283 == v284) {
            goto LABEL_544;
          }
        }
      }
      uint64_t v286 = (uint64_t)v645;
      unsigned int v285 = v647;
LABEL_544:
      if (v285)
      {
        uint64_t v357 = *v274;
        unsigned int v358 = v285 - 1;
        unsigned int v359 = ((*v274 >> 4) ^ (*v274 >> 9)) & (v285 - 1);
        uint64_t v360 = (uint64_t *)(v286 + 176 * v359);
        uint64_t v361 = *v360;
        if (*v274 == *v360)
        {
          unint64_t v362 = v360 + 1;
          goto LABEL_547;
        }
        unint64_t v400 = 0;
        int v401 = 1;
        while (v361 != -4096)
        {
          if (v400) {
            BOOL v402 = 0;
          }
          else {
            BOOL v402 = v361 == -8192;
          }
          if (v402) {
            unint64_t v400 = v360;
          }
          unsigned int v403 = v359 + v401++;
          unsigned int v359 = v403 & v358;
          uint64_t v360 = (uint64_t *)(v286 + 176 * v359);
          uint64_t v361 = *v360;
          if (v357 == *v360) {
            goto LABEL_603;
          }
        }
        if (v400) {
          BOOL v405 = v400;
        }
        else {
          BOOL v405 = v360;
        }
      }
      else
      {
        BOOL v405 = 0;
      }
      uint64_t v360 = sub_1CC2CEB38((uint64_t)&v645, v274, v405);
      *uint64_t v360 = *v274;
      v360[1] = (uint64_t)(v360 + 5);
      v360[2] = (uint64_t)(v360 + 5);
      v360[3] = 16;
      *((_DWORD *)v360 + 8) = 0;
      v360[21] = 0;
      uint64_t v286 = (uint64_t)v645;
      unsigned int v285 = v647;
LABEL_603:
      unint64_t v362 = v360 + 1;
      if (!v285)
      {
        v604 = v360 + 1;
        uint64_t v404 = 0;
        goto LABEL_598;
      }
      uint64_t v357 = *v274;
      unsigned int v358 = v285 - 1;
      unsigned int v359 = ((*v274 >> 4) ^ (*v274 >> 9)) & (v285 - 1);
LABEL_547:
      uint64_t v363 = (uint64_t *)(v286 + 176 * v359);
      uint64_t v364 = *v363;
      v604 = v362;
      if (v357 != *v363)
      {
        uint64_t v396 = 0;
        int v397 = 1;
        while (v364 != -4096)
        {
          if (v396) {
            BOOL v398 = 0;
          }
          else {
            BOOL v398 = v364 == -8192;
          }
          if (v398) {
            uint64_t v396 = v363;
          }
          unsigned int v399 = v359 + v397++;
          unsigned int v359 = v399 & v358;
          uint64_t v363 = (uint64_t *)(v286 + 176 * v359);
          uint64_t v364 = *v363;
          if (v357 == *v363) {
            goto LABEL_549;
          }
        }
        if (v396) {
          uint64_t v404 = v396;
        }
        else {
          uint64_t v404 = v363;
        }
LABEL_598:
        uint64_t v363 = sub_1CC2CEB38((uint64_t)&v645, v274, v404);
        uint64_t *v363 = *v274;
        v363[1] = (uint64_t)(v363 + 5);
        v363[2] = (uint64_t)(v363 + 5);
        v363[3] = 16;
        *((_DWORD *)v363 + 8) = 0;
        v363[21] = 0;
      }
LABEL_549:
      v606 = v360;
      if (*((_DWORD *)v360 + 7) == *((_DWORD *)v360 + 8)) {
        goto LABEL_679;
      }
      uint64_t v365 = v609[6];
      uint64_t v366 = v1[68];
      unint64_t v367 = *(void *)(v366 + 16 * v365);
      if (v367 < 8 || *(void *)(v366 + 16 * v365 + 8) >= 8uLL) {
        unint64_t v367 = sub_1CC4754EC(v611, (uint64_t)v608, (llvm::MachineBasicBlock *)v609);
      }
      unint64_t v368 = v367 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v369 = (v367 >> 1) & 3;
      if ((v369 | *(_DWORD *)((v367 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*(void *)(v603 + 8) >> 1) & 3 | *(_DWORD *)((*(void *)(v603 + 8) & 0xFFFFFFFFFFFFFFF8) + 24))) {
        goto LABEL_679;
      }
      v602 = v363;
      int v370 = v608[28];
      LODWORD(v640) = v370;
      int v371 = *((_DWORD *)v1 + 194);
      if (v371)
      {
        uint64_t v372 = v1[95];
        int v373 = v371 - 1;
        unsigned int v374 = v373 & (37 * v370);
        uint64_t v375 = (int *)(v372 + 160 * v374);
        int v376 = *v375;
        if (v370 == *v375) {
          goto LABEL_556;
        }
        uint64_t v517 = 0;
        int v518 = 1;
        while (v376 != -1)
        {
          if (v517) {
            BOOL v519 = 0;
          }
          else {
            BOOL v519 = v376 == -2;
          }
          if (v519) {
            uint64_t v517 = v375;
          }
          unsigned int v520 = v374 + v518++;
          unsigned int v374 = v520 & v373;
          uint64_t v375 = (int *)(v372 + 160 * v374);
          int v376 = *v375;
          if (v370 == *v375) {
            goto LABEL_556;
          }
        }
        if (v517) {
          v521 = v517;
        }
        else {
          v521 = v375;
        }
      }
      else
      {
        v521 = 0;
      }
      uint64_t v375 = sub_1CC2CE228(v598, (int *)&v640, v521);
      *uint64_t v375 = v370;
      *((_OWORD *)v375 + 7) = 0u;
      *((_OWORD *)v375 + 8) = 0u;
      *((_OWORD *)v375 + 9) = 0u;
      *((_OWORD *)v375 + 6) = 0u;
      *((void *)v375 + 1) = 1;
      *(void *)&long long v532 = -1;
      *((void *)&v532 + 1) = -1;
      *((_OWORD *)v375 + 1) = v532;
      *((_OWORD *)v375 + 2) = v532;
      *((_OWORD *)v375 + 3) = v532;
      *((_OWORD *)v375 + 4) = v532;
      *((void *)v375 + 10) = v375 + 24;
      *((void *)v375 + 11) = 0x1000000000;
LABEL_556:
      uint64_t v377 = v375[22];
      if (!v377) {
        goto LABEL_679;
      }
      int v378 = (int *)*((void *)v375 + 10);
      int v379 = &v378[v377];
      while (2)
      {
        uint64_t v380 = v1[57];
        uint64_t v381 = *v378 & 0x7FFFFFFF;
        v382 = (void *)(v380 + 408);
        uint64_t v383 = *(unsigned int *)(v380 + 416);
        if ((*v378 & 0x7FFFFFFFu) >= v383)
        {
          sub_1CB9153B8((uint64_t)v382, v381 - v383 + 1, *(void *)(v380 + 424));
LABEL_577:
          operator new();
        }
        uint64_t v384 = *(void *)(*v382 + 8 * v381);
        if (!v384) {
          goto LABEL_577;
        }
        unsigned int v385 = *(_DWORD *)(v384 + 8);
        BOOL v386 = *(void **)v384;
        if (!v385)
        {
          unsigned int v385 = 0;
LABEL_570:
          unint64_t v390 = &v386[3 * v385];
          goto LABEL_571;
        }
        uint64_t v387 = v386[3 * v385 - 2];
        unsigned int v388 = *(_DWORD *)(v368 + 24) | v369;
        unsigned int v389 = (v387 >> 1) & 3 | *(_DWORD *)((v387 & 0xFFFFFFFFFFFFFFF8) + 24);
        unint64_t v390 = *(void **)v384;
        unint64_t v391 = *(unsigned int *)(v384 + 8);
        if (v388 >= v389) {
          goto LABEL_570;
        }
        do
        {
          unint64_t v392 = v391 >> 1;
          uint64_t v393 = v390[3 * (v391 >> 1) + 1];
          LODWORD(v393) = (v393 >> 1) & 3 | *(_DWORD *)((v393 & 0xFFFFFFFFFFFFFFF8) + 24);
          v391 -= (v391 >> 1) + 1;
          BOOL v394 = v388 >= v393;
          if (v388 >= v393) {
            unint64_t v395 = v392 + 1;
          }
          else {
            unint64_t v395 = 0;
          }
          v390 += 3 * v395;
          if (!v394) {
            unint64_t v391 = v392;
          }
        }
        while (v391);
LABEL_571:
        if (v390 == &v386[3 * v385]
          || ((*v390 >> 1) & 3 | *(_DWORD *)((*v390 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v368 + 24) | v369)
          || !v390[2])
        {
          if (++v378 == v379) {
            goto LABEL_679;
          }
          continue;
        }
        break;
      }
      if ((*((_DWORD *)v606 + 7) - *((_DWORD *)v606 + 8)) <= 1) {
        unsigned int v424 = 0x80000000;
      }
      else {
        unsigned int v424 = 1932735283;
      }
      uint64_t v425 = *(void *)(v1[66] + 248);
      if (v425)
      {
        int v426 = *(_DWORD *)(v425 + 176);
        uint64_t v427 = v602;
        if (v426)
        {
          uint64_t v428 = *(void *)(v425 + 160);
          unsigned int v429 = v426 - 1;
          uint64_t v430 = (v426 - 1) & ((v609 >> 4) ^ (v609 >> 9));
          uint64_t v431 = *(unsigned int **)(v428 + 16 * v430);
          if (v431 == v609)
          {
LABEL_637:
            uint64_t v432 = *(unsigned int *)(v428 + 16 * v430 + 8);
            if (v432 != 0xFFFFFFFFLL)
            {
              uint64_t v425 = *(void *)(*(void *)(v425 + 8) + 24 * v432 + 16);
              goto LABEL_639;
            }
          }
          else
          {
            int v465 = 1;
            while (v431 != (unsigned int *)-4096)
            {
              int v466 = v430 + v465++;
              uint64_t v430 = v466 & v429;
              uint64_t v431 = *(unsigned int **)(v428 + 16 * v430);
              if (v431 == v609) {
                goto LABEL_637;
              }
            }
          }
        }
        uint64_t v425 = 0;
      }
      else
      {
        uint64_t v427 = v602;
      }
LABEL_639:
      int v433 = *v378;
      v640 = (char *)v425;
      uint64_t v434 = v609;
      if (v427[21] <= llvm::BlockFrequency::operator*((unint64_t *)&v640, v424)) {
        goto LABEL_679;
      }
      uint64_t v435 = v604;
      uint64_t v436 = v606[2];
      if (v436 == *v604) {
        v437 = (unsigned int *)v606 + 7;
      }
      else {
        v437 = (unsigned int *)(v606 + 3);
      }
      uint64_t v438 = *v437;
      if (v438)
      {
        uint64_t v439 = 8 * v438;
        uint64_t v440 = (unint64_t *)v606[2];
        while (*v440 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v440;
          v439 -= 8;
          if (!v439) {
            goto LABEL_740;
          }
        }
      }
      else
      {
        uint64_t v440 = (unint64_t *)v606[2];
      }
      BOOL v467 = (unint64_t *)(v436 + 8 * v438);
      if (v440 != v467)
      {
LABEL_705:
        v640 = 0;
        unint64_t v468 = (unsigned char *)*v440;
        v640 = (char *)*v440;
        if (v637)
        {
          unsigned int v469 = v637 - 1;
          unsigned int v470 = ((v468 >> 4) ^ (v468 >> 9)) & (v637 - 1);
          unint64_t v471 = (void *)(v635 + 16 * v470);
          uint64_t v472 = *v471;
          if (v468 == (unsigned char *)*v471)
          {
            if (v470 != v637)
            {
LABEL_708:
              if (!*((_DWORD *)v471 + 2))
              {
                uint64_t v473 = sub_1CC2CED4C((uint64_t)v633, (uint64_t *)&v640)[1];
                if (v651 >= (unint64_t)HIDWORD(v651)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v650 + v651) = v473;
                LODWORD(v651) = v651 + 1;
                uint64_t v427 = v602;
                uint64_t v435 = v604;
              }
            }
          }
          else
          {
            int v479 = 1;
            unsigned int v480 = (unsigned char *)*v471;
            unsigned int v481 = ((v468 >> 4) ^ (v468 >> 9)) & v469;
            while (v480 != (unsigned char *)-4096)
            {
              unsigned int v482 = v481 + v479++;
              unsigned int v481 = v482 & v469;
              unsigned int v480 = *(unsigned char **)(v635 + 16 * v481);
              if (v468 == v480)
              {
                if (v481 == v637) {
                  break;
                }
                unsigned int v483 = 0;
                int v484 = 1;
                while (v472 != -4096)
                {
                  if (v483) {
                    BOOL v485 = 0;
                  }
                  else {
                    BOOL v485 = v472 == -8192;
                  }
                  if (v485) {
                    unsigned int v483 = v471;
                  }
                  unsigned int v486 = v470 + v484++;
                  unsigned int v470 = v486 & v469;
                  unint64_t v471 = (void *)(v635 + 16 * v470);
                  uint64_t v472 = *v471;
                  int v1 = v612;
                  uint64_t v434 = v609;
                  uint64_t v427 = v602;
                  uint64_t v435 = v604;
                  if (v468 == (unsigned char *)*v471) {
                    goto LABEL_708;
                  }
                }
                if (v483) {
                  uint64_t v489 = v483;
                }
                else {
                  uint64_t v489 = v471;
                }
                unint64_t v471 = sub_1CC2CE980((uint64_t)&v635, (uint64_t)&v640, (uint64_t *)&v640, v489);
                *unint64_t v471 = v640;
                *((_DWORD *)v471 + 2) = 0;
                int v1 = v612;
                uint64_t v434 = v609;
                uint64_t v427 = v602;
                uint64_t v435 = v604;
                goto LABEL_708;
              }
            }
          }
          if (v637)
          {
            LODWORD(v474) = ((v640 >> 4) ^ (v640 >> 9)) & (v637 - 1);
            int v475 = (void **)(v635 + 16 * v474);
            uint64_t v476 = (char *)*v475;
            if (v640 == *v475)
            {
LABEL_713:
              *int v475 = (void *)-8192;
              int32x2_t v636 = vadd_s32(v636, (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              int v487 = 1;
              while (v476 != (char *)-4096)
              {
                int v488 = v474 + v487++;
                uint64_t v474 = v488 & (v637 - 1);
                uint64_t v476 = *(char **)(v635 + 16 * v474);
                if (v640 == v476)
                {
                  int v475 = (void **)(v635 + 16 * v474);
                  goto LABEL_713;
                }
              }
            }
          }
        }
        v477 = v440 + 1;
        while (v477 != v467)
        {
          unint64_t v478 = *v477++;
          if (v478 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v440 = v477 - 1;
            goto LABEL_705;
          }
        }
      }
LABEL_740:
      if (!v637)
      {
        v498 = 0;
        uint64_t v493 = v606;
        goto LABEL_754;
      }
      unsigned int v490 = ((*v274 >> 4) ^ (*v274 >> 9)) & (v637 - 1);
      unint64_t v491 = (void *)(v635 + 16 * v490);
      uint64_t v492 = *v491;
      uint64_t v493 = v606;
      if (*v274 != *v491)
      {
        unint64_t v494 = 0;
        int v495 = 1;
        while (v492 != -4096)
        {
          if (v494) {
            BOOL v496 = 0;
          }
          else {
            BOOL v496 = v492 == -8192;
          }
          if (v496) {
            unint64_t v494 = v491;
          }
          unsigned int v497 = v490 + v495++;
          unsigned int v490 = v497 & (v637 - 1);
          unint64_t v491 = (void *)(v635 + 16 * v490);
          uint64_t v492 = *v491;
          if (*v274 == *v491) {
            goto LABEL_755;
          }
        }
        if (v494) {
          v498 = v494;
        }
        else {
          v498 = v491;
        }
LABEL_754:
        unint64_t v491 = sub_1CC2CE980((uint64_t)&v635, (uint64_t)v274, v274, v498);
        *unint64_t v491 = *v274;
        *((_DWORD *)v491 + 2) = 0;
        uint64_t v435 = v604;
      }
LABEL_755:
      *((_DWORD *)v491 + 2) = v433;
      unint64_t v499 = (void *)v493[2];
      if (v499 == (void *)*v435)
      {
LABEL_756:
        *((_DWORD *)v493 + 7) = 0;
        *((_DWORD *)v493 + 8) = 0;
      }
      else
      {
        uint64_t v531 = *((unsigned int *)v493 + 6);
        if (v531 < 0x21 || 4 * (*((_DWORD *)v493 + 7) - *((_DWORD *)v493 + 8)) >= v531)
        {
          memset(v499, 255, 8 * v531);
          uint64_t v435 = v604;
          goto LABEL_756;
        }
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)v435);
        uint64_t v435 = v604;
      }
      uint64_t v500 = *v274;
      uint64_t v501 = v493[2];
      if (v501 != *v435) {
        goto LABEL_767;
      }
      uint64_t v502 = *((unsigned int *)v493 + 7);
      if (!v502)
      {
LABEL_765:
        if (v502 < *((_DWORD *)v493 + 6))
        {
          *((_DWORD *)v493 + 7) = v502 + 1;
          *(void *)(v501 + 8 * v502) = v500;
          goto LABEL_802;
        }
LABEL_767:
        int v506 = *((_DWORD *)v435 + 5);
        unsigned int v507 = *((_DWORD *)v435 + 4);
        if (3 * v507 <= 4 * (v506 - *((_DWORD *)v435 + 6)))
        {
          if (v507 >= 0x40) {
            v507 *= 2;
          }
          else {
            unsigned int v507 = 128;
          }
        }
        else if (v507 - v506 >= v507 >> 3)
        {
          goto LABEL_769;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v435, v507);
        uint64_t v435 = v604;
        unsigned int v507 = *((_DWORD *)v604 + 4);
LABEL_769:
        unsigned int v508 = v507 - 1;
        uint64_t v509 = v435[1];
        unsigned int v510 = (v507 - 1) & ((v500 >> 4) ^ (v500 >> 9));
        unint64_t v511 = (uint64_t *)(v509 + 8 * v510);
        uint64_t v512 = *v511;
        if (*v511 == -1)
        {
          v513 = 0;
LABEL_796:
          if (v513) {
            unint64_t v511 = v513;
          }
          if (*v511 != v500)
          {
            if (*v511 == -2) {
              --*((_DWORD *)v435 + 6);
            }
            else {
              ++*((_DWORD *)v435 + 5);
            }
            *unint64_t v511 = v500;
          }
        }
        else
        {
          v513 = 0;
          int v514 = 1;
          while (v512 != v500)
          {
            if (v513) {
              BOOL v515 = 0;
            }
            else {
              BOOL v515 = v512 == -2;
            }
            if (v515) {
              v513 = v511;
            }
            unsigned int v516 = v510 + v514++;
            unsigned int v510 = v516 & v508;
            unint64_t v511 = (uint64_t *)(v509 + 8 * (v516 & v508));
            uint64_t v512 = *v511;
            if (*v511 == -1) {
              goto LABEL_796;
            }
          }
        }
        goto LABEL_802;
      }
      unint64_t v503 = 0;
      uint64_t v504 = 8 * v502;
      v505 = (uint64_t *)v493[2];
      while (*v505 != v500)
      {
        if (*v505 == -2) {
          unint64_t v503 = v505;
        }
        ++v505;
        v504 -= 8;
        if (!v504)
        {
          if (!v503) {
            goto LABEL_765;
          }
          *unint64_t v503 = v500;
          --*((_DWORD *)v493 + 8);
          break;
        }
      }
LABEL_802:
      uint64_t v522 = *(void *)(v1[66] + 248);
      if (v522)
      {
        int v523 = *(_DWORD *)(v522 + 176);
        if (v523)
        {
          uint64_t v524 = *(void *)(v522 + 160);
          unsigned int v525 = v523 - 1;
          uint64_t v526 = (v523 - 1) & ((v434 >> 4) ^ (v434 >> 9));
          int v527 = *(unsigned int **)(v524 + 16 * v526);
          if (v527 == v434)
          {
LABEL_805:
            uint64_t v528 = *(unsigned int *)(v524 + 16 * v526 + 8);
            if (v528 != 0xFFFFFFFFLL)
            {
              uint64_t v522 = *(void *)(*(void *)(v522 + 8) + 24 * v528 + 16);
              goto LABEL_807;
            }
          }
          else
          {
            int v529 = 1;
            while (v527 != (unsigned int *)-4096)
            {
              int v530 = v526 + v529++;
              uint64_t v526 = v530 & v525;
              int v527 = *(unsigned int **)(v524 + 16 * v526);
              if (v527 == v434) {
                goto LABEL_805;
              }
            }
          }
        }
        uint64_t v522 = 0;
      }
LABEL_807:
      v427[21] = v522;
LABEL_679:
      if (v274 != v656) {
        continue;
      }
      break;
    }
LABEL_850:
    uint64_t v542 = v635 + 16 * v637;
    if (v636.i32[0])
    {
      if (v637)
      {
        uint64_t v543 = 16 * v637;
        uint64_t v544 = v635;
        while ((*(void *)v544 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v544 += 16;
          v543 -= 16;
          if (!v543) {
            goto LABEL_855;
          }
        }
      }
      else
      {
        uint64_t v544 = v635;
      }
    }
    else
    {
LABEL_855:
      uint64_t v544 = v635 + 16 * v637;
    }
    uint64_t v545 = v635 + 16 * v637;
LABEL_858:
    while (v544 != v545)
    {
      int v546 = *(_DWORD *)(v544 + 8);
      if (v546)
      {
        v640 = **(char ***)v544;
        *((_DWORD *)sub_1CBAEE230((uint64_t)&v613, (uint64_t *)&v640) + 2) = v546;
      }
      uint64_t v547 = v544 + 16;
      uint64_t v544 = v542;
      if (v547 != v542)
      {
        uint64_t v544 = v547;
        while ((*(void *)v544 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v544 += 16;
          if (v544 == v542)
          {
            uint64_t v544 = v542;
            goto LABEL_858;
          }
        }
      }
    }
    uint64_t v548 = (uint64_t)v645;
    if (v647)
    {
      v549 = v645 + 2;
      uint64_t v550 = 176 * v647;
      do
      {
        uint64_t v551 = (uint64_t)*(v549 - 2);
        if (v551 != -4096 && v551 != -8192 && *v549 != *(v549 - 1)) {
          free(*v549);
        }
        v549 += 22;
        v550 -= 176;
      }
      while (v550);
    }
    MEMORY[0x1D25D9CD0](v548, 8);
    MEMORY[0x1D25D9CD0](v633[0], 8);
    MEMORY[0x1D25D9CD0](v635, 8);
    if (v656 != v658) {
      free(v656);
    }
    uint64_t v552 = v1[58];
    unsigned int v610 = v616;
    LODWORD(v656) = v616;
    uint64_t v553 = sub_1CC2CD930((void *)(v552 + 352), (int *)&v656);
    if (v614 | v651
      && (llvm::LiveRange::MergeValueInAsValue((uint64_t)(v553 + 3), v608, v603, *(void *)v553[11]), v614))
    {
      uint64_t v554 = v613;
      uint64_t v555 = v615;
      uint64_t v556 = v613 + 16 * v615;
      if (v615)
      {
        uint64_t v557 = 0;
        while ((*(void *)(v613 + v557) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v557 += 16;
          if (16 * v615 == v557)
          {
            uint64_t v558 = v613 + 16 * v615;
            goto LABEL_884;
          }
        }
        uint64_t v558 = v613 + v557;
      }
      else
      {
        uint64_t v555 = 0;
        uint64_t v558 = v613;
      }
    }
    else
    {
      uint64_t v554 = v613;
      uint64_t v555 = v615;
      uint64_t v558 = v613 + 16 * v615;
      uint64_t v556 = v558;
    }
LABEL_884:
    uint64_t v605 = v554 + 16 * v555;
    uint64_t v607 = v556;
    while (v558 != v605)
    {
      unsigned int v559 = *(unsigned int **)v558;
      uint64_t v560 = *(unsigned int *)(v558 + 8);
      v561 = sub_1CC475930(v611, (uint64_t)v608, *(unsigned int **)v558);
      sub_1CC2CCBC4(&v656, (uint64_t)v561, (uint64_t)v559);
      uint64_t v562 = v559[6];
      uint64_t v563 = v1[68];
      unint64_t v564 = *(void *)(v563 + 16 * v562);
      if (v564 < 8 || *(void *)(v563 + 16 * v562 + 8) >= 8uLL) {
        unint64_t v564 = sub_1CC4754EC(v611, (uint64_t)v608, (llvm::MachineBasicBlock *)v559);
      }
      v645 = (void **)v564;
      uint64_t LiveSubranges = llvm::LiveIntervals::getLiveSubranges(v1[57], (uint64_t)v608, v1[63], &v645);
      (*(void (**)(void, unsigned int *, unsigned int *, uint64_t, void, void, unint64_t, void, uint64_t))(*(void *)v1[64] + 456))(v1[64], v559, v561, v560, 0, v610, *(void *)(*(void *)(v1[63] + 24) + 16 * (v560 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v1[65], LiveSubranges);
      uint64_t v566 = v658[0];
      if ((void *)v658[0] == (char *)v656 + 48)
      {
        v567 = (uint64_t *)((char *)v656 + 56);
      }
      else
      {
        if (!v658[0] || (*(unsigned char *)v658[0] & 4) == 0)
        {
          while ((*(_WORD *)(v566 + 44) & 8) != 0)
            uint64_t v566 = *(void *)(v566 + 8);
        }
        v567 = (uint64_t *)(v566 + 8);
      }
      sub_1CC2CE134(v1[57], *v567, (uint64_t)v561);
      uint64_t v568 = v658[0];
      if ((void *)v658[0] == (char *)v656 + 48)
      {
        int v569 = (uint64_t *)((char *)v656 + 56);
      }
      else
      {
        if ((!v658[0] || (*(unsigned char *)v658[0] & 4) == 0) && (*(_WORD *)(v658[0] + 44) & 8) != 0)
        {
          do
            uint64_t v568 = *(void *)(v568 + 8);
          while ((*(_WORD *)(v568 + 44) & 8) != 0);
        }
        int v569 = (uint64_t *)(v568 + 8);
      }
      for (uint64_t i = *v569; (unsigned int *)i != v561; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v571 = *(unsigned int *)(i + 40);
        if (v571)
        {
          uint64_t v572 = v1[57];
          uint64_t v573 = 32 * v571;
          v574 = (int *)(*(void *)(i + 32) + 4);
          do
          {
            if ((*(v574 - 1) & 0x10000FF) == 0x1000000)
            {
              int v575 = *v574;
              if (*v574 < 0)
              {
                uint64_t v576 = v575 & 0x7FFFFFFF;
                uint64_t v577 = *(unsigned int *)(v572 + 416);
                if ((v575 & 0x7FFFFFFFu) >= v577)
                {
                  sub_1CB9153B8(v572 + 408, v576 - v577 + 1, *(void *)(v572 + 424));
LABEL_915:
                  operator new();
                }
                if (!*(void *)(*(void *)(v572 + 408) + 8 * v576)) {
                  goto LABEL_915;
                }
              }
            }
            v574 += 8;
            v573 -= 32;
          }
          while (v573);
          int v1 = v612;
          if (!i) {
            goto LABEL_920;
          }
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
LABEL_920:
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t v578 = v558 + 16;
      uint64_t v558 = v607;
      if (v578 != v607)
      {
        uint64_t v558 = v578;
        while ((*(void *)v558 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v558 += 16;
          if (v558 == v607)
          {
            uint64_t v558 = v607;
            break;
          }
        }
      }
    }
    if (v651)
    {
      uint64_t v579 = (char *)v650;
      v580 = (char *)v650 + 8 * v651;
      do
      {
        uint64_t v581 = *(void *)v579;
        *(void *)(v581 + 16) = *(void *)(v1[64] + 8) + 336;
        int v582 = *(_DWORD *)(v581 + 40);
        if (v582)
        {
          unsigned int v583 = v582 - 1;
          uint64_t v584 = 32 * (v582 - 1);
          do
          {
            int v585 = *(_DWORD *)(*(void *)(v581 + 32) + v584);
            int v586 = v585 & 0x30000FF;
            int v587 = v585 & 0x5000000;
            if (v586 == 50331648 && v587 != 83886080) {
              llvm::MachineInstr::removeOperand((char *)v581, v583);
            }
            --v583;
            v584 -= 32;
          }
          while (v583 != -1);
        }
        v579 += 8;
      }
      while (v579 != v580);
    }
    llvm::LiveRangeEdit::eliminateDeadDefs(v617, (uint64_t)&v650, 0, 0, (llvm::AAResults *)v1[59]);
    MEMORY[0x1D25D9CD0](v613, 8);
    if (v650 != v652) {
      free(v650);
    }
    uint64_t v8 = v599;
LABEL_942:
    v8 += 44;
  }
  while (v8 != v601);
LABEL_3:
  sub_1CD516CC4(v617);
  if (v653 != v655) {
    free(v653);
  }
}

uint64_t sub_1CC2CA7E8(uint64_t a1)
{
  *(void *)a1 = &unk_1F260C470;
  sub_1CC2CA9F4(a1 + 320);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 320), 8);
  uint64_t v4 = (void **)(a1 + 296);
  sub_1CC2CAA6C(&v4);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 272), 8);
  sub_1CC2CAAF8((uint64_t *)(a1 + 248));
  int v2 = *(void **)(a1 + 104);
  if (v2 != (void *)(a1 + 120)) {
    free(v2);
  }
  return a1;
}

void sub_1CC2CA87C(uint64_t a1)
{
  *(void *)a1 = &unk_1F260C470;
  sub_1CC2CA9F4(a1 + 320);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 320), 8);
  uint64_t v3 = (void **)(a1 + 296);
  sub_1CC2CAA6C(&v3);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 272), 8);
  sub_1CC2CAAF8((uint64_t *)(a1 + 248));
  int v2 = *(void **)(a1 + 104);
  if (v2 != (void *)(a1 + 120)) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC2CA934()
{
  return 1;
}

double sub_1CC2CA940(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(v5 + 280);
  if (*(_DWORD *)(v7 + 4 * (a3 & 0x7FFFFFFF)))
  {
    int v8 = (unsigned __int16)*(_DWORD *)(v7 + 4 * (a3 & 0x7FFFFFFF));
  }
  else
  {
    uint64_t v7 = *(void *)(v5 + 304);
    int v8 = *(_DWORD *)(v7 + 4 * (a3 & 0x7FFFFFFF));
  }
  *(_DWORD *)(v7 + 4 * (a2 & 0x7FFFFFFF)) = v8;
  *(void *)&double result = sub_1CC2CACD0(v5, a3, v15).n128_u64[0];
  if (v15[0]) {
    BOOL v10 = v15[1] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    sub_1CC2CACD0(v11, a3, v14);
    LODWORD(v15[0]) = a2;
    int v12 = sub_1CD516808((uint64_t *)(v11 + 352), v15);
    double result = *(double *)v14;
    long long v13 = v14[1];
    *(_OWORD *)(v12 + 2) = v14[0];
    *(_OWORD *)(v12 + 6) = v13;
  }
  return result;
}

void sub_1CC2CA9F4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)a1 + 96;
    uint64_t v3 = 160 * v1;
    do
    {
      if (*(_DWORD *)(v2 - 96) <= 0xFFFFFFFD)
      {
        uint64_t v4 = *(void **)(v2 - 16);
        if ((void *)v2 != v4) {
          free(v4);
        }
        if ((*(unsigned char *)(v2 - 88) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v2 - 80), 4);
        }
      }
      v2 += 160;
      v3 -= 160;
    }
    while (v3);
  }
}

void sub_1CC2CAA6C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 19);
        if (v6 != *((void **)v4 - 20)) {
          free(v6);
        }
        v4 -= 176;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1CC2CAAF8(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    uint64_t v6 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*((_DWORD *)v6 - 2) - 0x7FFFFFFF) >= 2) {
        sub_1CC2CAB7C(v6, 0);
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t *sub_1CC2CAB7C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    if (v3)
    {
      do
      {
        uint64_t v8 = *(void *)(v3 + 96);
        uint64_t v9 = *(void *)(v3 + 104);
        *(void *)(v3 + 96) = 0;
        if (v8)
        {
          uint64_t v11 = v3;
          uint64_t v6 = v8;
          sub_1CB833A08(v8, *(void **)(v8 + 8));
          uint64_t v7 = v6;
          uint64_t v3 = v11;
          MEMORY[0x1D25D9CE0](v7, 0x1020C4062D53EE8);
        }
        BOOL v10 = *(void **)(v3 + 64);
        if (v10 != (void *)(v3 + 80)) {
          free(v10);
        }
        if (*(void *)v3 != v3 + 16) {
          free(*(void **)v3);
        }
        uint64_t v3 = v9;
      }
      while (v9);
    }
    uint64_t v4 = *(void *)(v2 + 96);
    *(void *)(v2 + 96) = 0;
    *(void *)(v2 + 104) = 0;
    if (v4)
    {
      sub_1CB833A08(v4, *(void **)(v4 + 8));
      MEMORY[0x1D25D9CE0](v4, 0x1020C4062D53EE8);
    }
    uint64_t v5 = *(void **)(v2 + 64);
    if (v5 != (void *)(v2 + 80)) {
      free(v5);
    }
    if (*(void *)v2 != v2 + 16) {
      free(*(void **)v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

__n128 sub_1CC2CACD0@<Q0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 368);
  if (!v3)
  {
LABEL_2:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = -1;
    a3[3] = -1;
    return result;
  }
  uint64_t v4 = *(void *)(a1 + 352);
  int v5 = v3 - 1;
  unsigned int v6 = (v3 - 1) & (37 * a2);
  int v7 = *(_DWORD *)(v4 + 40 * v6);
  if (v7 != a2)
  {
    int v11 = 1;
    while (v7 != -1)
    {
      unsigned int v12 = v6 + v11++;
      unsigned int v6 = v12 & v5;
      int v7 = *(_DWORD *)(v4 + 40 * v6);
      if (v7 == a2) {
        goto LABEL_4;
      }
    }
    goto LABEL_2;
  }
LABEL_4:
  uint64_t v8 = v4 + 40 * v6;
  __n128 result = *(__n128 *)(v8 + 8);
  long long v10 = *(_OWORD *)(v8 + 24);
  *(__n128 *)a3 = result;
  *((_OWORD *)a3 + 1) = v10;
  return result;
}

uint64_t sub_1CC2CAD58(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 72) > 2u) {
    return 0;
  }
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 96) + 8) + 112);
  uint64_t result = llvm::LiveIntervals::intervalIsInOneMBB(*(void *)(a1 + 16), a2);
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(unsigned int *)(a2 + 112);
    if ((v7 & 0x80000000) != 0) {
      uint64_t v8 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v8 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v7);
    }
    uint64_t v9 = *v8;
    if (*v8)
    {
      while ((*(_DWORD *)v9 & 0x80000000) != 0)
      {
        uint64_t v9 = *(void *)(v9 + 24);
        if (!v9) {
          return 1;
        }
      }
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(void *)(v9 + 8);
        do
          uint64_t v9 = *(void *)(v9 + 24);
        while (v9 && ((*(_DWORD *)v9 & 0x80000000) != 0 || *(void *)(v9 + 8) == v11));
        if (**(_WORD **)(v11 + 16) != 19
          || (unsigned int v12 = *(_DWORD **)(v11 + 32), (*v12 & 0xFFF00) != 0)
          || (v12[8] & 0xFFF00) != 0
          || (v16 = v12[1], int v17 = v12[9], v16 != v5) && (v15 = v17 == v5, int v17 = v16, !v15)
          || !v17)
        {
          int v18 = 0;
          int v13 = *(_DWORD *)(a2 + 112);
          if (v13 != (*(unsigned int (**)(void, uint64_t, int *))(**(void **)(a1 + 72) + 64))(*(void *)(a1 + 72), v11, &v18)|| v18 != *(_DWORD *)(a1 + 112))
          {
            int v14 = *(_DWORD *)(a2 + 112);
            if (v14 != (*(unsigned int (**)(void, uint64_t, int *))(**(void **)(a1 + 72) + 96))(*(void *)(a1 + 72), v11, &v18)|| v18 != *(_DWORD *)(a1 + 112))
            {
              if (v10)
              {
                BOOL v15 = v11 == v10;
                uint64_t v10 = v11;
                if (!v15) {
                  return 0;
                }
              }
              else
              {
                uint64_t v10 = v11;
              }
            }
          }
        }
      }
      while (v9);
    }
    return 1;
  }
  return result;
}

void sub_1CC2CAF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v101[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v101;
  int v98 = v101;
  unsigned int v100 = 8;
  v101[0] = a2;
  v101[1] = a3;
  int v5 = (llvm::SmallPtrSetImplBase *)(a1 + 264);
  uint64_t v6 = (unsigned int *)(a1 + 188);
  uint64_t v7 = (unsigned int *)(a1 + 184);
  unsigned int v8 = 1;
  do
  {
    while (1)
    {
      uint64_t v9 = (char *)v98 + 16 * v8;
      uint64_t v10 = *((void *)v9 - 2);
      uint64_t v11 = *((void *)v9 - 1);
      unsigned int v99 = v8 - 1;
      uint64_t v12 = *(void *)(a1 + 272);
      uint64_t v13 = *(unsigned int *)(a1 + 284);
      if (v12 == *(void *)(a1 + 264))
      {
        if (v13)
        {
          int v14 = 0;
          uint64_t v15 = 8 * v13;
          int v16 = *(void **)(a1 + 272);
          do
          {
            if (*v16 == v11) {
              goto LABEL_98;
            }
            if (*v16 == -2) {
              int v14 = v16;
            }
            ++v16;
            v15 -= 8;
          }
          while (v15);
          if (v14)
          {
            *int v14 = v11;
            --*(_DWORD *)(a1 + 288);
            goto LABEL_34;
          }
        }
        unsigned int v17 = *(_DWORD *)(a1 + 280);
        if (v13 < v17)
        {
          *(_DWORD *)(a1 + 284) = v13 + 1;
          *(void *)(v12 + 8 * v13) = v11;
          goto LABEL_34;
        }
      }
      else
      {
        unsigned int v17 = *(_DWORD *)(a1 + 280);
      }
      if (3 * v17 <= 4 * ((int)v13 - *(_DWORD *)(a1 + 288)))
      {
        if (v17 >= 0x40) {
          v17 *= 2;
        }
        else {
          unsigned int v17 = 128;
        }
LABEL_119:
        __int16 v87 = v4;
        unint64_t v88 = v5;
        llvm::SmallPtrSetImplBase::Grow(v5, v17);
        int v5 = v88;
        uint64_t v4 = v87;
        unsigned int v17 = *(_DWORD *)(a1 + 280);
        uint64_t v12 = *(void *)(a1 + 272);
        goto LABEL_15;
      }
      if (v17 - v13 < v17 >> 3) {
        goto LABEL_119;
      }
LABEL_15:
      unsigned int v18 = v17 - 1;
      unsigned int v19 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      int v20 = (void *)(v12 + 8 * v19);
      uint64_t v21 = *v20;
      if (*v20 != -1)
      {
        int v22 = 0;
        int v23 = 1;
        while (v21 != v11)
        {
          if (v22) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v21 == -2;
          }
          if (v24) {
            int v22 = v20;
          }
          unsigned int v25 = v19 + v23++;
          unsigned int v19 = v25 & v18;
          int v20 = (void *)(v12 + 8 * (v25 & v18));
          uint64_t v21 = *v20;
          if (*v20 == -1) {
            goto LABEL_27;
          }
        }
        goto LABEL_98;
      }
      int v22 = 0;
LABEL_27:
      if (v22) {
        uint64_t v26 = v22;
      }
      else {
        uint64_t v26 = v20;
      }
      if (*v26 == v11) {
        goto LABEL_98;
      }
      if (*v26 == -2) {
        --*(_DWORD *)(a1 + 288);
      }
      else {
        ++*(_DWORD *)(a1 + 284);
      }
      *uint64_t v26 = v11;
LABEL_34:
      unint64_t v27 = *(void *)(v11 + 8);
      if ((v27 & 6) == 0)
      {
        uint64_t v29 = *(void *)(*(void *)(a1 + 16) + 288);
        if (v27 >= 8 && (uint64_t v30 = *(void *)((v27 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
        {
          uint64_t v31 = (uint64_t *)(v30 + 24);
        }
        else
        {
          unint64_t v89 = *(void **)(v29 + 536);
          unint64_t v90 = *(unsigned int *)(v29 + 544);
          if (v90)
          {
            unsigned int v91 = *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3;
            unsigned int v92 = v89;
            unint64_t v93 = v90;
            do
            {
              unint64_t v94 = v93 >> 1;
              uint64_t v95 = &v92[2 * (v93 >> 1)];
              uint64_t v97 = *v95;
              uint64_t v96 = v95 + 2;
              v93 += ~(v93 >> 1);
              if (((v97 >> 1) & 3 | *(_DWORD *)((v97 & 0xFFFFFFFFFFFFFFF8) + 24)) < v91) {
                unsigned int v92 = v96;
              }
              else {
                unint64_t v93 = v94;
              }
            }
            while (v93);
            if (v92 == &v89[2 * v90]
              || ((*v92 >> 1) & 3 | *(_DWORD *)((*v92 & 0xFFFFFFFFFFFFFFF8) + 24)) > v91)
            {
              v92 -= 2;
            }
          }
          else
          {
            unsigned int v92 = *(void **)(v29 + 536);
          }
          uint64_t v31 = v92 + 1;
        }
        uint64_t v32 = *v31;
        uint64_t v33 = *(void *)(v32 + 64);
        uint64_t v34 = *(void *)(v32 + 72);
        while (1)
        {
          if (v33 == v34) {
            goto LABEL_98;
          }
          uint64_t v35 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 288) + 392)
                          + 16 * *(unsigned int *)(*(void *)v33 + 24)
                          + 8);
          unsigned int v36 = (v35 >> 1) & 3;
          unint64_t v37 = v35 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v38 = v36 ? v37 | (2 * (v36 - 1)) : *(void *)v37 | 6;
          unsigned int v39 = *(_DWORD *)(v10 + 8);
          uint64_t v40 = *(void **)v10;
          if (!v39) {
            break;
          }
          uint64_t v41 = v40[3 * v39 - 2];
          unsigned int v42 = *(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24) | (v38 >> 1) & 3;
          unsigned int v43 = (v41 >> 1) & 3 | *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24);
          uint64_t v44 = *(void **)v10;
          unint64_t v45 = *(unsigned int *)(v10 + 8);
          if (v42 >= v43) {
            goto LABEL_54;
          }
          do
          {
            unint64_t v46 = v45 >> 1;
            uint64_t v47 = v44[3 * (v45 >> 1) + 1];
            LODWORD(v47) = (v47 >> 1) & 3 | *(_DWORD *)((v47 & 0xFFFFFFFFFFFFFFF8) + 24);
            v45 -= (v45 >> 1) + 1;
            BOOL v48 = v42 >= v47;
            if (v42 >= v47) {
              unint64_t v49 = v46 + 1;
            }
            else {
              unint64_t v49 = 0;
            }
            v44 += 3 * v49;
            if (!v48) {
              unint64_t v45 = v46;
            }
          }
          while (v45);
LABEL_55:
          if (v44 != &v40[3 * v39]
            && ((*v44 >> 1) & 3 | *(_DWORD *)((*v44 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24) | (v38 >> 1) & 3))
          {
            uint64_t v50 = v44[2];
            if (v50)
            {
              if (v99 >= (unint64_t)v100) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v51 = (char *)v98 + 16 * v99;
              *uint64_t v51 = v10;
              v51[1] = v50;
              ++v99;
            }
          }
          v33 += 8;
        }
        unsigned int v39 = 0;
LABEL_54:
        uint64_t v44 = &v40[3 * v39];
        goto LABEL_55;
      }
      uint64_t v28 = v27 < 8 ? 0 : *(void *)((v27 & 0xFFFFFFFFFFFFFFF8) + 16);
      uint64_t v53 = *(void *)(a1 + 168);
      uint64_t v52 = *(void *)(a1 + 176);
      if (v52 == v53)
      {
        uint64_t v54 = *v6;
        uint64_t v55 = (void *)(v52 + 8 * v54);
        if (v54)
        {
          uint64_t v56 = 0;
          uint64_t v57 = 8 * v54;
          while (*(void *)(v52 + v56) != v28)
          {
            v56 += 8;
            if (v57 == v56) {
              goto LABEL_82;
            }
          }
          uint64_t v55 = (void *)(v52 + v56);
        }
LABEL_82:
        uint64_t v53 = *(void *)(a1 + 176);
      }
      else
      {
        uint64_t v58 = *v7;
        int v59 = v58 - 1;
        unsigned int v60 = (v58 - 1) & ((v28 >> 4) ^ (v28 >> 9));
        uint64_t v55 = (void *)(v52 + 8 * v60);
        uint64_t v61 = *v55;
        if (*v55 == -1)
        {
          unint64_t v62 = 0;
LABEL_101:
          if (v62) {
            uint64_t v55 = v62;
          }
          if (*v55 != v28) {
            uint64_t v55 = (void *)(v52 + 8 * v58);
          }
        }
        else
        {
          unint64_t v62 = 0;
          int v63 = 1;
          while (v61 != v28)
          {
            if (v62) {
              BOOL v64 = 0;
            }
            else {
              BOOL v64 = v61 == -2;
            }
            if (v64) {
              unint64_t v62 = v55;
            }
            unsigned int v65 = v60 + v63++;
            unsigned int v60 = v65 & v59;
            uint64_t v55 = (void *)(v52 + 8 * (v65 & v59));
            uint64_t v61 = *v55;
            if (*v55 == -1) {
              goto LABEL_101;
            }
          }
        }
      }
      unsigned int v66 = v52 == v53 ? v6 : v7;
      if (v55 != (void *)(v52 + 8 * *v66)) {
        break;
      }
LABEL_98:
      unsigned int v8 = v99;
      if (!v99) {
        goto LABEL_134;
      }
    }
    uint64_t v67 = *(void *)(a1 + 16);
    int v68 = *(_DWORD *)(*(void *)(v28 + 32) + 36);
    uint64_t v69 = v68 & 0x7FFFFFFF;
    uint64_t v70 = (void *)(v67 + 408);
    uint64_t v71 = *(unsigned int *)(v67 + 416);
    if ((v68 & 0x7FFFFFFFu) >= v71)
    {
      sub_1CB9153B8((uint64_t)v70, v69 - v71 + 1, *(void *)(v67 + 424));
LABEL_133:
      operator new();
    }
    uint64_t v72 = *(void *)(*v70 + 8 * v69);
    if (!v72) {
      goto LABEL_133;
    }
    unint64_t v73 = v27 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v74 = *(_DWORD *)(v72 + 8);
    uint64_t v75 = *(void **)v72;
    if (!v74)
    {
      unsigned int v74 = 0;
LABEL_106:
      uint64_t v79 = &v75[3 * v74];
      goto LABEL_107;
    }
    uint64_t v76 = v75[3 * v74 - 2];
    unsigned int v77 = *(_DWORD *)(v73 + 24) | 1;
    unsigned int v78 = (v76 >> 1) & 3 | *(_DWORD *)((v76 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v79 = *(void **)v72;
    unint64_t v80 = *(unsigned int *)(v72 + 8);
    if (v77 >= v78) {
      goto LABEL_106;
    }
    do
    {
      unint64_t v81 = v80 >> 1;
      uint64_t v82 = v79[3 * (v80 >> 1) + 1];
      LODWORD(v82) = (v82 >> 1) & 3 | *(_DWORD *)((v82 & 0xFFFFFFFFFFFFFFF8) + 24);
      v80 -= (v80 >> 1) + 1;
      BOOL v83 = v77 >= v82;
      if (v77 >= v82) {
        unint64_t v84 = v81 + 1;
      }
      else {
        unint64_t v84 = 0;
      }
      v79 += 3 * v84;
      if (!v83) {
        unint64_t v80 = v81;
      }
    }
    while (v80);
LABEL_107:
    if (v79 == &v75[3 * v74]
      || ((*v79 >> 1) & 3 | *(_DWORD *)((*v79 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v73 + 24) | 1u))
    {
      uint64_t v85 = 0;
    }
    else
    {
      uint64_t v85 = v79[2];
    }
    if (v99 >= (unint64_t)v100) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v86 = (char *)v98 + 16 * v99;
    *int v86 = v72;
    v86[1] = v85;
    unsigned int v8 = v99 + 1;
    unsigned int v99 = v8;
  }
  while (v8);
LABEL_134:
  if (v98 != v4) {
    free(v98);
  }
}

BOOL sub_1CC2CB754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v113[4] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  unint64_t v6 = *(void *)a2;
  if (*(void *)(a2 + 16 * a3 - 16) != *(void *)a2 || (*(_WORD *)(v6 + 44) & 0xC) != 0) {
    return 0;
  }
  int v101 = **(unsigned __int16 **)(v6 + 16);
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 72) + 488))(*(void *)(a1 + 72)))
  {
    int v11 = 1;
  }
  else
  {
    unsigned int v12 = **(unsigned __int16 **)(v6 + 16);
    BOOL v13 = v12 > 0x1F;
    unsigned int v14 = (0x8A000000 >> v12) & 1;
    if (v13) {
      int v11 = 0;
    }
    else {
      int v11 = v14;
    }
  }
  unsigned int v15 = 0;
  int v102 = 0;
  unsigned int v111 = v113;
  uint64_t v112 = 0x800000000;
  uint64_t v16 = 16 * a3;
  unsigned int v17 = (unsigned int *)(a2 + 8);
  do
  {
    unsigned int v19 = *v17;
    v17 += 4;
    uint64_t v18 = v19;
    uint64_t v20 = *(void *)(v6 + 32);
    int v21 = *(_DWORD *)(v20 + 32 * v19);
    if ((v21 & 0x2000000) != 0)
    {
      int v102 = *(_DWORD *)(v20 + 32 * v18 + 4);
    }
    else
    {
      if ((((v21 & 0xFFF00) != 0) & ~v11) != 0 || a4 && (v21 & 0x1000000) != 0) {
        goto LABEL_43;
      }
      if (v101 == 31 || ((v22 = v21 & 0x10000FF, int v23 = v21 & 0xF00000, !v22) ? (v24 = v23 == 0) : (v24 = 1), v24))
      {
        if (v15 >= HIDWORD(v112)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v111 + v15) = v18;
        unsigned int v15 = v112 + 1;
        LODWORD(v112) = v112 + 1;
      }
    }
    v16 -= 16;
  }
  while (v16);
  if (!v15)
  {
LABEL_43:
    BOOL v7 = 0;
    goto LABEL_159;
  }
  sub_1CC2CCBC4(&v105, v6, *(void *)(v6 + 24));
  unsigned int v108 = v110;
  uint64_t v109 = 0x600000000;
  if (v101 == 31 && v112)
  {
    unsigned int v25 = (unsigned int *)v111;
    uint64_t v26 = 4 * v112;
    do
    {
      unsigned int v104 = *v25;
      uint64_t v27 = v104;
      uint64_t v28 = *(void *)(v6 + 32) + 32 * v104;
      if ((*(unsigned char *)(v28 + 2) & 0xF0) != 0)
      {
        unsigned int TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v6, v104);
        unsigned int v103 = TiedOperandIdx;
        if (*(unsigned char *)(v28 + 3))
        {
          uint64_t v31 = &v103;
          unsigned int v30 = v27;
        }
        else
        {
          unsigned int v30 = TiedOperandIdx;
          uint64_t v31 = &v104;
        }
        sub_1CC2CC1D0((uint64_t)&v108, v30, v31);
        uint64_t v32 = (_DWORD *)(*(void *)(v6 + 32) + 32 * v27);
        if (!*v32 && (*v32 & 0xF00000) != 0)
        {
          unsigned int v34 = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v6, v27);
          *(_DWORD *)(*(void *)(v6 + 32) + 32 * v34) &= 0xFF0FFFFF;
          *v32 &= 0xFF0FFFFF;
        }
      }
      ++v25;
      v26 -= 4;
    }
    while (v26);
  }
  uint64_t v35 = *(void *)(a1 + 16);
  int v36 = *(_DWORD *)(a1 + 116);
  uint64_t v37 = v36 & 0x7FFFFFFF;
  uint64_t v38 = (void *)(v35 + 408);
  uint64_t v39 = *(unsigned int *)(v35 + 416);
  if ((v36 & 0x7FFFFFFFu) >= v39)
  {
    sub_1CB9153B8((uint64_t)v38, v37 - v39 + 1, *(void *)(v35 + 424));
LABEL_164:
    operator new();
  }
  uint64_t v40 = *(void *)(*v38 + 8 * v37);
  if (!v40) {
    goto LABEL_164;
  }
  uint64_t v41 = *(void **)(a1 + 72);
  if (a4) {
    unint64_t v42 = llvm::TargetInstrInfo::foldMemoryOperand(v41, (uint64_t *)v6, (__int32 *)v111, v112, a4, *(void *)(a1 + 16));
  }
  else {
    unint64_t v42 = llvm::TargetInstrInfo::foldMemoryOperand(v41, v6, (__int32 *)v111, v112, *(_DWORD *)(a1 + 112), *(void *)(a1 + 16), *(void *)(a1 + 56), v40);
  }
  BOOL v7 = v42 != 0;
  if (!v42)
  {
    if (v109)
    {
      uint64_t v76 = (unsigned int *)v108;
      unsigned int v77 = (unsigned int *)((char *)v108 + 8 * v109);
      do
      {
        unsigned int v78 = *v76;
        unsigned int v79 = v76[1];
        v76 += 2;
        llvm::MachineInstr::tieOperands(v6, v78, v79);
      }
      while (v76 != v77);
    }
    goto LABEL_157;
  }
  unint64_t v100 = v42;
  unint64_t v43 = v6;
  if ((*(_WORD *)(v6 + 44) & 4) != 0)
  {
    unint64_t v43 = v6;
    do
      unint64_t v43 = *(void *)v43 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v43 + 44) & 4) != 0);
  }
  uint64_t v44 = *(void *)(v6 + 24) + 48;
  unint64_t v45 = *(_DWORD **)(v43 + 32);
  uint64_t v46 = *(unsigned int *)(v43 + 40);
  uint64_t v47 = &v45[8 * v46];
  if (!v46)
  {
    unint64_t v94 = *(void *)(v43 + 8);
    if (v94 == v44)
    {
      unint64_t v43 = *(void *)(v6 + 24) + 48;
      goto LABEL_52;
    }
    unint64_t v43 = *(void *)(v6 + 24) + 48;
    if ((*(_WORD *)(v94 + 44) & 4) != 0)
    {
      while (1)
      {
        unint64_t v98 = v94;
        uint64_t v99 = *(unsigned int *)(v94 + 40);
        if (v99) {
          break;
        }
        unint64_t v94 = *(void *)(v94 + 8);
        if (v94 == v44 || (*(_WORD *)(v94 + 44) & 4) == 0)
        {
          unint64_t v43 = *(void *)(v6 + 24) + 48;
          goto LABEL_180;
        }
      }
      unint64_t v43 = v94;
LABEL_180:
      unint64_t v45 = *(_DWORD **)(v98 + 32);
      uint64_t v47 = &v45[8 * v99];
    }
  }
LABEL_52:
  while (v45 != v47)
  {
    if (*v45) {
      goto LABEL_54;
    }
    unint64_t v51 = v45[1];
    if ((int)v51 < 1
      || (*v45 & 0x1000000) == 0
      || (*(void *)(*(void *)(*(void *)(a1 + 64) + 352) + ((v51 >> 3) & 0x1FFFFFF8)) & (1 << v51)) != 0
      || (llvm::AnalyzePhysRegInBundle(v100, v45[1], *(void *)(a1 + 80)) & 0x10000) != 0)
    {
      goto LABEL_54;
    }
    __int16 v52 = *(_WORD *)(v6 + 44);
    unint64_t v53 = v6;
    if ((v52 & 4) != 0)
    {
      do
        unint64_t v53 = *(void *)v53 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v53 + 44) & 4) != 0);
    }
    unint64_t v54 = v6;
    if ((v52 & 8) != 0)
    {
      do
        unint64_t v54 = *(void *)(v54 + 8);
      while ((*(_WORD *)(v54 + 44) & 8) != 0);
    }
    unint64_t v55 = *(void *)(v54 + 8);
    if (v53 != v55)
    {
      while (1)
      {
        unsigned int v56 = **(unsigned __int16 **)(v53 + 16);
        BOOL v13 = v56 > 0x17;
        int v57 = (1 << v56) & 0x83E000;
        if (v13 || v57 == 0) {
          break;
        }
        unint64_t v53 = *(void *)(v53 + 8);
        if (v53 == v55)
        {
          unint64_t v53 = v55;
          break;
        }
      }
    }
    int v59 = *(void **)(a1 + 16);
    uint64_t v60 = v59[36];
    uint64_t v61 = *(void *)(v60 + 368);
    uint64_t v62 = *(unsigned int *)(v60 + 384);
    if (!v62) {
      goto LABEL_82;
    }
    LODWORD(v63) = ((v53 >> 4) ^ (v53 >> 9)) & (v62 - 1);
    BOOL v64 = (uint64_t *)(v61 + 16 * v63);
    uint64_t v65 = *v64;
    if (v53 != *v64)
    {
      int v66 = 1;
      while (v65 != -4096)
      {
        int v67 = v63 + v66++;
        uint64_t v63 = v67 & (v62 - 1);
        uint64_t v65 = *(void *)(v61 + 16 * v63);
        if (v53 == v65)
        {
          BOOL v64 = (uint64_t *)(v61 + 16 * v63);
          goto LABEL_83;
        }
      }
LABEL_82:
      BOOL v64 = (uint64_t *)(v61 + 16 * v62);
    }
LABEL_83:
    llvm::LiveIntervals::removePhysRegDefAt(v59, v51, v64[1] & 0xFFFFFFFFFFFFFFF8 | 4);
LABEL_54:
    v45 += 8;
    if (v45 == v47)
    {
      unint64_t v48 = *(void *)(v43 + 8);
      if (v48 == v44) {
        break;
      }
      unint64_t v45 = v47;
      unint64_t v43 = v44;
      if ((*(_WORD *)(v48 + 44) & 4) != 0)
      {
        while (1)
        {
          unint64_t v49 = v48;
          uint64_t v50 = *(unsigned int *)(v48 + 40);
          if (v50) {
            break;
          }
          unint64_t v48 = *(void *)(v48 + 8);
          if (v48 == v44 || (*(_WORD *)(v48 + 44) & 4) == 0)
          {
            unint64_t v43 = v44;
            goto LABEL_81;
          }
        }
        unint64_t v43 = v48;
LABEL_81:
        unint64_t v45 = *(_DWORD **)(v49 + 32);
        uint64_t v47 = &v45[8 * v50];
      }
    }
  }
  unsigned int v104 = 0;
  if ((*(unsigned int (**)(void, unint64_t, unsigned int *))(**(void **)(a1 + 72) + 96))(*(void *)(a1 + 72), v6, &v104))
  {
    sub_1CC2CC204(a1 + 440, v6, v104);
  }
  unint64_t v68 = v100;
  sub_1CBB16C94(*(int32x2_t **)(*(void *)(a1 + 16) + 288), v6, v100);
  uint64_t v69 = *(unsigned __int16 **)(v6 + 16);
  if ((v69[4] & 0x80) != 0)
  {
    unsigned int v95 = *v69;
    BOOL v13 = v95 > 0x1F;
    unsigned int v96 = (1 << v95) & 0x8E000000;
    if (v13 || v96 == 0) {
      llvm::MachineFunction::moveCallSiteInfo(*(llvm::MachineFunction **)(*(void *)(v6 + 24) + 32), (const llvm::MachineInstr *)v6, (const llvm::MachineInstr *)v100);
    }
  }
  unsigned int v70 = *(_DWORD *)(v6 + 64);
  if (v70)
  {
    unsigned int v71 = *(_DWORD *)(a2 + 8);
    if (v71)
    {
      llvm::MachineFunction::substituteDebugValuesForInst(*(void *)(a1 + 8), (const llvm::MachineInstr *)v6, (llvm::MachineInstr *)v100, v71);
    }
    else
    {
      uint64_t v72 = *(void *)(v6 + 32);
      if (a3 == 2)
      {
        if ((*(unsigned char *)(v72 + 3) & 1) != 0
          && (*(unsigned char *)(v72 + 34) & 0xF0) != 0
          && *(_DWORD *)(v72 + 4) == *(_DWORD *)(v72 + 36))
        {
          unsigned int v73 = *(_DWORD *)(v100 + 64);
          if (!v73)
          {
            uint64_t v80 = *(void *)(*(void *)(v100 + 24) + 32);
            unsigned int v73 = *(_DWORD *)(v80 + 912) + 1;
            *(_DWORD *)(v80 + 912) = v73;
            *(_DWORD *)(v100 + 64) = v73;
            unsigned int v70 = *(_DWORD *)(v6 + 64);
            if (!v70)
            {
              uint64_t v81 = *(void *)(*(void *)(v6 + 24) + 32);
              unsigned int v70 = *(_DWORD *)(v81 + 912) + 1;
              *(_DWORD *)(v81 + 912) = v70;
              *(_DWORD *)(v6 + 64) = v70;
            }
            unint64_t v68 = v100;
          }
LABEL_110:
          llvm::MachineFunction::makeDebugValueSubstitution(*(void *)(a1 + 8), v70, v73 | 0xF424000000000, 0);
        }
      }
      else if (a3 == 1 && (*(unsigned char *)(v72 + 3) & 1) != 0)
      {
        unsigned int v73 = *(_DWORD *)(v100 + 64);
        if (!v73)
        {
          uint64_t v74 = *(void *)(*(void *)(v100 + 24) + 32);
          unsigned int v73 = *(_DWORD *)(v74 + 912) + 1;
          *(_DWORD *)(v74 + 912) = v73;
          *(_DWORD *)(v100 + 64) = v73;
          unsigned int v70 = *(_DWORD *)(v6 + 64);
          if (!v70)
          {
            uint64_t v75 = *(void *)(*(void *)(v6 + 24) + 32);
            unsigned int v70 = *(_DWORD *)(v75 + 912) + 1;
            *(_DWORD *)(v75 + 912) = v70;
            *(_DWORD *)(v6 + 64) = v70;
          }
        }
        goto LABEL_110;
      }
    }
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v6);
  uint64_t v82 = v106;
  if (v106 == (unsigned char *)(v105 + 48))
  {
    BOOL v83 = (uint64_t *)(v105 + 56);
  }
  else
  {
    if (!v106 || (*v106 & 4) == 0)
    {
      while ((*((_WORD *)v82 + 22) & 8) != 0)
        uint64_t v82 = (unsigned char *)*((void *)v82 + 1);
    }
    BOOL v83 = (uint64_t *)(v82 + 8);
  }
  uint64_t v84 = *v83;
  uint64_t v85 = v107;
  while (v84 != v85)
  {
    if (v84 != v68) {
      sub_1CB914C88(*(void *)(*(void *)(a1 + 16) + 288), v84, 0);
    }
    if (!v84 || (*(unsigned char *)v84 & 4) == 0)
    {
      while ((*(_WORD *)(v84 + 44) & 8) != 0)
        uint64_t v84 = *(void *)(v84 + 8);
    }
    uint64_t v84 = *(void *)(v84 + 8);
  }
  if (v102)
  {
    int v86 = *(_DWORD *)(v68 + 40);
    if (v86)
    {
      unsigned int v87 = v86 - 1;
      do
      {
        uint64_t v88 = *(void *)(v68 + 32);
        if ((*(_DWORD *)(v88 + 32 * v87) & 0x20000FF) != 0x2000000) {
          break;
        }
        if (*(_DWORD *)(v88 + 32 * v87 + 4) == v102) {
          llvm::MachineInstr::removeOperand((char *)v68, v87);
        }
        --v87;
      }
      while (v87 != -1);
    }
  }
  if (v101 == 19 && !*(_DWORD *)(a2 + 8))
  {
    unint64_t v89 = v106;
    if (v106 == (unsigned char *)(v105 + 48))
    {
      unint64_t v90 = (uint64_t *)(v105 + 56);
    }
    else
    {
      if (!v106 || (*v106 & 4) == 0)
      {
        while ((*((_WORD *)v89 + 22) & 8) != 0)
          unint64_t v89 = (unsigned char *)*((void *)v89 + 1);
      }
      unint64_t v90 = (uint64_t *)(v89 + 8);
    }
    uint64_t v91 = *v90;
    if (v91 == v107) {
      goto LABEL_156;
    }
    uint64_t v92 = 0;
    do
    {
      uint64_t v93 = v92;
      if (!v91 || (*(unsigned char *)v91 & 4) == 0)
      {
        while ((*(_WORD *)(v91 + 44) & 8) != 0)
          uint64_t v91 = *(void *)(v91 + 8);
      }
      ++v92;
      uint64_t v91 = *(void *)(v91 + 8);
    }
    while (v91 != v107);
    if (!v93) {
LABEL_156:
    }
      sub_1CC2CC53C(a1 + 440, v68, *(_DWORD *)(a1 + 112), *(_DWORD *)(a1 + 116));
  }
LABEL_157:
  if (v108 != v110) {
    free(v108);
  }
LABEL_159:
  if (v111 != v113) {
    free(v111);
  }
  return v7;
}

uint64_t sub_1CC2CC1D0(uint64_t result, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    return sub_1CD516B64(result, a2, *a3);
  }
  uint64_t v4 = (unsigned int *)(*(void *)result + 8 * v3);
  *uint64_t v4 = a2;
  v4[1] = *a3;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

uint64_t sub_1CC2CC204(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 248);
  uint64_t v7 = *(unsigned int *)(a1 + 264);
  uint64_t result = (uint64_t)sub_1CC2CCC30(v6, v7, a3);
  if (v6 + 16 * v7 == result) {
    return result;
  }
  __int16 v9 = *(_WORD *)(a2 + 44);
  unint64_t v10 = a2;
  if ((v9 & 4) != 0)
  {
    unint64_t v10 = a2;
    do
      unint64_t v10 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v10 + 44) & 4) != 0);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 288);
  unint64_t v12 = a2;
  if ((v9 & 8) != 0)
  {
    unint64_t v12 = a2;
    do
      unint64_t v12 = *(void *)(v12 + 8);
    while ((*(_WORD *)(v12 + 44) & 8) != 0);
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (v10 != v13)
  {
    while (1)
    {
      unsigned int v14 = **(unsigned __int16 **)(v10 + 16);
      BOOL v15 = v14 > 0x17;
      int v16 = (1 << v14) & 0x83E000;
      if (v15 || v16 == 0) {
        break;
      }
      unint64_t v10 = *(void *)(v10 + 8);
      if (v10 == v13)
      {
        unint64_t v10 = *(void *)(v12 + 8);
        break;
      }
    }
  }
  uint64_t v18 = *(void *)(v11 + 368);
  uint64_t v19 = *(unsigned int *)(v11 + 384);
  if (v19)
  {
    LODWORD(v20) = ((v10 >> 4) ^ (v10 >> 9)) & (v19 - 1);
    int v21 = (uint64_t *)(v18 + 16 * v20);
    uint64_t v22 = *v21;
    if (v10 == *v21) {
      goto LABEL_18;
    }
    int v23 = 1;
    while (v22 != -4096)
    {
      int v24 = v20 + v23++;
      uint64_t v20 = v24 & (v19 - 1);
      uint64_t v22 = *(void *)(v18 + 16 * v20);
      if (v10 == v22)
      {
        int v21 = (uint64_t *)(v18 + 16 * v20);
        goto LABEL_18;
      }
    }
  }
  int v21 = (uint64_t *)(v18 + 16 * v19);
LABEL_18:
  uint64_t v25 = *(void *)(result + 8);
  unint64_t v26 = v21[1] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = *(unsigned int *)(v25 + 8);
  uint64_t v28 = *(void **)v25;
  if (!v27)
  {
    LODWORD(v27) = 0;
    goto LABEL_29;
  }
  uint64_t v29 = v28[3 * v27 - 2];
  unsigned int v30 = *(_DWORD *)(v26 + 24) | 2;
  if (v30 >= ((v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_29:
    uint64_t v31 = &v28[3 * v27];
    goto LABEL_30;
  }
  uint64_t v31 = v28;
  unint64_t v32 = v27;
  do
  {
    unint64_t v33 = v32 >> 1;
    uint64_t v34 = v31[3 * (v32 >> 1) + 1];
    LODWORD(v34) = (v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24);
    v32 -= (v32 >> 1) + 1;
    BOOL v35 = v30 >= v34;
    if (v30 >= v34) {
      unint64_t v36 = v33 + 1;
    }
    else {
      unint64_t v36 = 0;
    }
    v31 += 3 * v36;
    if (!v35) {
      unint64_t v32 = v33;
    }
  }
  while (v32);
LABEL_30:
  if (v31 == &v28[3 * v27]
    || ((*v31 >> 1) & 3 | *(_DWORD *)((*v31 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v26 + 24) | 2u))
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = v31[2];
  }
  *(void *)&long long v52 = a3;
  *((void *)&v52 + 1) = v37;
  uint64_t result = sub_1CC2CCC94(a1 + 272, &v52);
  uint64_t v39 = *(void *)result;
  uint64_t v38 = *(void *)(result + 8);
  if (v38 == *(void *)result)
  {
    uint64_t v40 = *(unsigned int *)(result + 20);
    uint64_t v41 = (void *)(v38 + 8 * v40);
    if (v40)
    {
      uint64_t v42 = 0;
      while (*(void *)(v38 + v42) != a2)
      {
        v42 += 8;
        if (8 * v40 == v42) {
          goto LABEL_52;
        }
      }
      uint64_t v41 = (void *)(v38 + v42);
    }
LABEL_52:
    uint64_t v39 = *(void *)(result + 8);
    goto LABEL_59;
  }
  uint64_t v43 = *(unsigned int *)(result + 16);
  int v44 = v43 - 1;
  unsigned int v45 = (v43 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v41 = (void *)(v38 + 8 * v45);
  uint64_t v46 = *v41;
  if (*v41 != -1)
  {
    uint64_t v47 = 0;
    int v48 = 1;
    while (v46 != a2)
    {
      if (v47) {
        BOOL v49 = 0;
      }
      else {
        BOOL v49 = v46 == -2;
      }
      if (v49) {
        uint64_t v47 = v41;
      }
      unsigned int v50 = v45 + v48++;
      unsigned int v45 = v50 & v44;
      uint64_t v41 = (void *)(v38 + 8 * (v50 & v44));
      uint64_t v46 = *v41;
      if (*v41 == -1) {
        goto LABEL_54;
      }
    }
LABEL_58:
    LODWORD(v40) = *(_DWORD *)(result + 20);
    goto LABEL_59;
  }
  uint64_t v47 = 0;
LABEL_54:
  if (v47) {
    uint64_t v41 = v47;
  }
  if (*v41 == a2) {
    goto LABEL_58;
  }
  LODWORD(v40) = *(_DWORD *)(result + 20);
  uint64_t v41 = (void *)(v38 + 8 * v43);
LABEL_59:
  if (v38 == v39) {
    unsigned int v51 = v40;
  }
  else {
    unsigned int v51 = *(_DWORD *)(result + 16);
  }
  if (v41 != (void *)(v38 + 8 * v51))
  {
    void *v41 = -2;
    ++*(_DWORD *)(result + 24);
  }
  return result;
}

void sub_1CC2CC53C(uint64_t a1, unint64_t a2, unsigned int a3, int a4)
{
  unsigned int v61 = a3;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = a4 & 0x7FFFFFFF;
  __int16 v9 = (void *)(v7 + 408);
  uint64_t v10 = *(unsigned int *)(v7 + 416);
  if (v8 >= v10)
  {
    sub_1CB9153B8((uint64_t)v9, v8 - v10 + 1, *(void *)(v7 + 424));
LABEL_80:
    operator new();
  }
  if (!*(void *)(*v9 + 8 * v8)) {
    goto LABEL_80;
  }
  uint64_t v11 = *(void *)(a1 + 248);
  uint64_t v12 = *(unsigned int *)(a1 + 264);
  if ((int *)(v11 + 16 * v12) == sub_1CC2CCC30(v11, *(_DWORD *)(a1 + 264), a3)) {
    operator new();
  }
  __int16 v13 = *(_WORD *)(a2 + 44);
  unint64_t v14 = a2;
  if ((v13 & 4) != 0)
  {
    unint64_t v14 = a2;
    do
      unint64_t v14 = *(void *)v14 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v14 + 44) & 4) != 0);
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 16) + 288);
  unint64_t v16 = a2;
  if ((v13 & 8) != 0)
  {
    unint64_t v16 = a2;
    do
      unint64_t v16 = *(void *)(v16 + 8);
    while ((*(_WORD *)(v16 + 44) & 8) != 0);
  }
  uint64_t v17 = *(void *)(v16 + 8);
  if (v14 != v17)
  {
    while (1)
    {
      unsigned int v18 = **(unsigned __int16 **)(v14 + 16);
      BOOL v19 = v18 > 0x17;
      int v20 = (1 << v18) & 0x83E000;
      if (v19 || v20 == 0) {
        break;
      }
      unint64_t v14 = *(void *)(v14 + 8);
      if (v14 == v17)
      {
        unint64_t v14 = *(void *)(v16 + 8);
        break;
      }
    }
  }
  uint64_t v22 = *(void *)(v15 + 368);
  uint64_t v23 = *(unsigned int *)(v15 + 384);
  if (v23)
  {
    LODWORD(v24) = ((v14 >> 4) ^ (v14 >> 9)) & (v23 - 1);
    uint64_t v25 = (uint64_t *)(v22 + 16 * v24);
    uint64_t v26 = *v25;
    if (v14 == *v25) {
      goto LABEL_21;
    }
    int v27 = 1;
    while (v26 != -4096)
    {
      int v28 = v24 + v27++;
      uint64_t v24 = v28 & (v23 - 1);
      uint64_t v26 = *(void *)(v22 + 16 * v24);
      if (v14 == v26)
      {
        uint64_t v25 = (uint64_t *)(v22 + 16 * v24);
        goto LABEL_21;
      }
    }
  }
  uint64_t v25 = (uint64_t *)(v22 + 16 * v23);
LABEL_21:
  uint64_t v29 = v25[1];
  uint64_t v30 = *(void *)(sub_1CC2CD550(a1 + 248, &v61) + 8);
  unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = *(unsigned int *)(v30 + 8);
  unint64_t v33 = *(void **)v30;
  if (!v32)
  {
    LODWORD(v32) = 0;
    goto LABEL_32;
  }
  uint64_t v34 = v33[3 * v32 - 2];
  unsigned int v35 = *(_DWORD *)(v31 + 24) | 2;
  if (v35 >= ((v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_32:
    unint64_t v36 = &v33[3 * v32];
    goto LABEL_33;
  }
  unint64_t v36 = v33;
  unint64_t v37 = v32;
  do
  {
    unint64_t v38 = v37 >> 1;
    uint64_t v39 = v36[3 * (v37 >> 1) + 1];
    LODWORD(v39) = (v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24);
    v37 -= (v37 >> 1) + 1;
    BOOL v40 = v35 >= v39;
    if (v35 >= v39) {
      unint64_t v41 = v38 + 1;
    }
    else {
      unint64_t v41 = 0;
    }
    v36 += 3 * v41;
    if (!v40) {
      unint64_t v37 = v38;
    }
  }
  while (v37);
LABEL_33:
  if (v36 == &v33[3 * v32]
    || ((*v36 >> 1) & 3 | *(_DWORD *)((*v36 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v31 + 24) | 2u))
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = v36[2];
  }
  *(void *)&long long v60 = a3;
  *((void *)&v60 + 1) = v42;
  uint64_t v43 = sub_1CC2CCC94(a1 + 272, &v60);
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 + 8);
  uint64_t v46 = *(unsigned int *)(v43 + 20);
  if (v45 != *(void *)v43)
  {
    unsigned int v50 = *(_DWORD *)(v43 + 16);
    goto LABEL_48;
  }
  if (!v46)
  {
LABEL_45:
    unsigned int v50 = *(_DWORD *)(v43 + 16);
    if (v46 < v50)
    {
      *(_DWORD *)(v43 + 20) = v46 + 1;
      *(void *)(v45 + 8 * v46) = a2;
      return;
    }
LABEL_48:
    if (3 * v50 <= 4 * ((int)v46 - *(_DWORD *)(v43 + 24)))
    {
      if (v50 >= 0x40) {
        v50 *= 2;
      }
      else {
        unsigned int v50 = 128;
      }
    }
    else if (v50 - v46 >= v50 >> 3)
    {
      goto LABEL_50;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v43, v50);
    unsigned int v50 = *(_DWORD *)(v44 + 16);
    uint64_t v45 = *(void *)(v44 + 8);
LABEL_50:
    unsigned int v51 = v50 - 1;
    unsigned int v52 = (v50 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v53 = (unint64_t *)(v45 + 8 * v52);
    unint64_t v54 = *v53;
    if (*v53 == -1)
    {
      unint64_t v55 = 0;
LABEL_62:
      if (v55) {
        int v59 = v55;
      }
      else {
        int v59 = v53;
      }
      if (*v59 != a2)
      {
        if (*v59 == -2) {
          --*(_DWORD *)(v44 + 24);
        }
        else {
          ++*(_DWORD *)(v44 + 20);
        }
        *int v59 = a2;
      }
    }
    else
    {
      unint64_t v55 = 0;
      int v56 = 1;
      while (v54 != a2)
      {
        if (v55) {
          BOOL v57 = 0;
        }
        else {
          BOOL v57 = v54 == -2;
        }
        if (v57) {
          unint64_t v55 = v53;
        }
        unsigned int v58 = v52 + v56++;
        unsigned int v52 = v58 & v51;
        unint64_t v53 = (unint64_t *)(v45 + 8 * (v58 & v51));
        unint64_t v54 = *v53;
        if (*v53 == -1) {
          goto LABEL_62;
        }
      }
    }
    return;
  }
  uint64_t v47 = 0;
  uint64_t v48 = 8 * v46;
  BOOL v49 = *(unint64_t **)(v43 + 8);
  while (*v49 != a2)
  {
    if (*v49 == -2) {
      uint64_t v47 = v49;
    }
    ++v49;
    v48 -= 8;
    if (!v48)
    {
      if (!v47) {
        goto LABEL_45;
      }
      *uint64_t v47 = a2;
      --*(_DWORD *)(v43 + 24);
      return;
    }
  }
}

void *sub_1CC2CCBC4(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a3;
  result[1] = a2;
  if (*(void *)(a3 + 56) == a2)
  {
    unint64_t v3 = a3 + 48;
  }
  else
  {
    unint64_t v3 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (!v3 || (*(unsigned char *)v3 & 4) == 0)
    {
      while ((*(_WORD *)(v3 + 44) & 4) != 0)
        unint64_t v3 = *(void *)v3 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  result[2] = v3;
  if (!a2 || (*(unsigned char *)a2 & 4) == 0)
  {
    while ((*(_WORD *)(a2 + 44) & 8) != 0)
      a2 = *(void *)(a2 + 8);
  }
  result[3] = *(void *)(a2 + 8);
  return result;
}

int *sub_1CC2CCC30(uint64_t a1, unsigned int a2, int a3)
{
  if (!a2) {
    return (int *)(a1 + 16 * a2);
  }
  LODWORD(v3) = (37 * a3) & (a2 - 1);
  uint64_t v4 = (int *)(a1 + 16 * v3);
  int v5 = *v4;
  if (*v4 != a3)
  {
    int v6 = 1;
    while (v5 != 0x7FFFFFFF)
    {
      int v8 = v3 + v6++;
      uint64_t v3 = v8 & (a2 - 1);
      int v5 = *(_DWORD *)(a1 + 16 * v3);
      if (v5 == a3) {
        return (int *)(a1 + 16 * v3);
      }
    }
    return (int *)(a1 + 16 * a2);
  }
  return v4;
}

uint64_t sub_1CC2CCC94(uint64_t a1, long long *a2)
{
  int v4 = *(_DWORD *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)&long long v38 = 0;
  char v6 = sub_1CC2CD078(*(void *)a1, *(_DWORD *)(a1 + 16), v4, v5, &v38);
  uint64_t v7 = v38;
  if (v6)
  {
    unsigned int v17 = *(_DWORD *)(v38 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    return v16 + 176 * v17 + 16;
  }
  int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
    goto LABEL_4;
  }
  sub_1CC2CD168(a1, v9);
  *(void *)&long long v38 = 0;
  sub_1CC2CD078(*(void *)a1, *(_DWORD *)(a1 + 16), v4, v5, &v38);
  uint64_t v7 = v38;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)v7 != 0x7FFFFFFF || *(void *)(v7 + 8) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)uint64_t v7 = v4;
  *(void *)(v7 + 8) = v5;
  *(_DWORD *)(v7 + 16) = 0;
  long long v38 = *a2;
  uint64_t v39 = v43;
  __src = v43;
  uint64_t v41 = 16;
  int v42 = 0;
  uint64_t v11 = *(_OWORD **)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  if ((unint64_t)v11 >= v10)
  {
    BOOL v19 = *(_OWORD **)(a1 + 24);
    unint64_t v20 = 0x2E8BA2E8BA2E8BA3 * (v11 - v19) + 1;
    if (v20 > 0x1745D1745D1745DLL) {
      abort();
    }
    unint64_t v21 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - (void)v19) >> 4);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v22 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 > 0x1745D1745D1745DLL) {
        sub_1CB833614();
      }
      uint64_t v23 = (char *)operator new(176 * v22);
    }
    else
    {
      uint64_t v23 = 0;
    }
    long long v24 = *a2;
    uint64_t v25 = &v23[16 * (v11 - v19)];
    *(_OWORD *)uint64_t v25 = v24;
    *((void *)v25 + 2) = v25 + 48;
    *((void *)v25 + 3) = v25 + 48;
    *((void *)v25 + 4) = 16;
    *((_DWORD *)v25 + 10) = 0;
    uint64_t v41 = 16;
    int v42 = 0;
    if (v11 == v19)
    {
      uint64_t v15 = v25 + 176;
      *(void *)(a1 + 24) = v25;
      *(void *)(a1 + 32) = v25 + 176;
      *(void *)(a1 + 40) = &v23[176 * v22];
    }
    else
    {
      uint64_t v26 = 0;
      do
      {
        int v27 = &v25[v26 * 16];
        int v28 = (const void **)&v11[v26];
        *((_OWORD *)v27 - 11) = v11[v26 - 11];
        uint64_t v29 = &v25[v26 * 16 - 128];
        *((void *)v27 - 20) = v29;
        unint64_t v31 = *(const void **)&v11[v26 - 10];
        uint64_t v30 = (const void *)*((void *)&v11[v26 - 9] - 1);
        if (v30 == v31)
        {
          *((void *)v27 - 19) = v29;
          uint64_t v32 = *((unsigned int *)v28 - 35);
          if (v32) {
            memmove(v29, *(v28 - 19), 8 * v32);
          }
        }
        else
        {
          *((void *)v27 - 19) = v30;
          *(v28 - 19) = v31;
        }
        unint64_t v33 = &v11[v26];
        uint64_t v34 = &v25[v26 * 16];
        *((void *)v34 - 18) = *(void *)&v11[v26 - 9];
        *((_DWORD *)v34 - 34) = *((_DWORD *)&v11[v26 - 8] - 2);
        *((void *)v33 - 18) = 16;
        *((_DWORD *)v33 - 34) = 0;
        v26 -= 11;
      }
      while (&v11[v26] != v19);
      uint64_t v11 = *(_OWORD **)(a1 + 24);
      unsigned int v35 = *(_OWORD **)(a1 + 32);
      uint64_t v15 = v25 + 176;
      *(void *)(a1 + 24) = &v25[v26 * 16];
      *(void *)(a1 + 32) = v25 + 176;
      *(void *)(a1 + 40) = &v23[176 * v22];
      while (v35 != v11)
      {
        unint64_t v36 = (void *)*((void *)v35 - 19);
        if (v36 != *((void **)v35 - 20))
        {
          unint64_t v37 = v35;
          free(v36);
          unsigned int v35 = v37;
        }
        v35 -= 11;
      }
    }
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    _OWORD *v11 = *a2;
    uint64_t v12 = v11 + 3;
    *((void *)v11 + 2) = v11 + 3;
    __int16 v13 = v39;
    if (__src == v39)
    {
      *((void *)v11 + 3) = v12;
      int v14 = HIDWORD(v41);
      if (HIDWORD(v41)) {
        memmove(v12, __src, 8 * HIDWORD(v41));
      }
    }
    else
    {
      *((void *)v11 + 3) = __src;
      __src = v13;
      int v14 = HIDWORD(v41);
    }
    *((_DWORD *)v11 + 8) = v41;
    *((_DWORD *)v11 + 9) = v14;
    *((_DWORD *)v11 + 10) = v42;
    uint64_t v41 = 16;
    int v42 = 0;
    uint64_t v15 = v11 + 11;
  }
  *(void *)(a1 + 32) = v15;
  if (__src != v39) {
    free(__src);
  }
  uint64_t v16 = *(void *)(a1 + 24);
  unsigned int v17 = -1171354717 * ((unint64_t)(*(void *)(a1 + 32) - v16) >> 4) - 1;
  *(_DWORD *)(v7 + 16) = v17;
  return v16 + 176 * v17 + 16;
}

uint64_t sub_1CC2CD078(uint64_t a1, int a2, int a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    unint64_t v10 = (int *)(a1 + 24 * v9);
    int v11 = *v10;
    uint64_t v12 = *((void *)v10 + 1);
    if (*v10 == a3 && v12 == a4)
    {
LABEL_22:
      uint64_t result = 1;
    }
    else
    {
      int v14 = 0;
      int v15 = 1;
      while (v11 != 0x7FFFFFFF || v12 != -4096)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -8192;
        }
        if (v16 && v11 == 0x80000000) {
          int v14 = v10;
        }
        unsigned int v18 = v9 + v15++;
        unsigned int v9 = v18 & v8;
        unint64_t v10 = (int *)(a1 + 24 * (v18 & v8));
        int v11 = *v10;
        uint64_t v12 = *((void *)v10 + 1);
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_22;
        }
      }
      uint64_t result = 0;
      if (v14) {
        unint64_t v10 = v14;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t result = 0;
  }
  *a5 = v10;
  return result;
}

_OWORD *sub_1CC2CD168(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 24 * v12;
      do
      {
        *uint64_t result = xmmword_1CFAC6E30;
        uint64_t result = (_OWORD *)((char *)result + 24);
        v13 -= 24;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = 24 * v3;
      uint64_t v15 = v4 + 8;
      do
      {
        int v16 = *(_DWORD *)(v15 - 8);
        uint64_t v17 = *(void *)v15;
        if ((v16 != 0x7FFFFFFF || v17 != -4096) && (v16 != 0x80000000 || v17 != -8192))
        {
          BOOL v19 = 0;
          sub_1CC2CD078(*(void *)a1, *(_DWORD *)(a1 + 16), v16, v17, &v19);
          unsigned int v18 = v19;
          *BOOL v19 = *(_DWORD *)(v15 - 8);
          *((void *)v18 + 1) = *(void *)v15;
          v18[4] = *(_DWORD *)(v15 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v15 += 24;
        v14 -= 24;
      }
      while (v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = xmmword_1CFAC6E30;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1CC2CD2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v28 = v3;
    uint64_t v29 = v4;
    uint64_t v7 = *(unsigned int *)(a2 + 72);
    if (v7)
    {
      unsigned int v9 = *(uint64_t **)(a2 + 64);
      uint64_t v10 = 8 * v7;
      do
      {
        uint64_t v11 = *v9;
        *(void *)(a3 + 80) += 16;
        if (((*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3 + 16 > *(void *)(a3 + 8) - *(void *)a3)
        {
          unsigned int v23 = *(_DWORD *)(a3 + 24) >> 7;
          if (v23 >= 0x1E) {
            LOBYTE(v23) = 30;
          }
          uint64_t v25 = 4096 << v23;
          unint64_t v12 = (unint64_t)operator new(4096 << v23, (std::align_val_t)8uLL);
          unint64_t v24 = *(unsigned int *)(a3 + 24);
          if (v24 >= *(unsigned int *)(a3 + 28)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a3 + 16) + 8 * v24) = v12;
          ++*(_DWORD *)(a3 + 24);
          *(void *)(a3 + 8) = v12 + v25;
        }
        else
        {
          unint64_t v12 = (*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)a3 = v12 + 16;
        unint64_t v13 = *(unsigned int *)(a1 + 72);
        *(_DWORD *)unint64_t v12 = v13;
        *(void *)(v12 + 8) = *(void *)(v11 + 8);
        if (v13 >= *(unsigned int *)(a1 + 76)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 64) + 8 * v13) = v12;
        ++*(_DWORD *)(a1 + 72);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    uint64_t v14 = *(unsigned int *)(a2 + 8);
    if (v14)
    {
      unsigned int v15 = *(_DWORD *)(a1 + 8);
      int v16 = (__n128 *)(*(void *)a2 + 16);
      uint64_t v17 = 24 * v14;
      do
      {
        unint64_t v18 = *(void *)(*(void *)(a1 + 64) + 8 * *(unsigned int *)v16->n128_u64[0]);
        __n128 v26 = v16[-1];
        unint64_t v27 = v18;
        unint64_t v19 = *(void *)a1;
        if (v15 >= *(_DWORD *)(a1 + 12))
        {
          BOOL v22 = v19 + 24 * v15 > (unint64_t)&v26;
          if (v19 <= (unint64_t)&v26 && v22) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v20 = (__n128 *)(v19 + 24 * *(unsigned int *)(a1 + 8));
        __n128 result = v26;
        v20[1].n128_u64[0] = v27;
        __n128 *v20 = result;
        unsigned int v15 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v15;
        int v16 = (__n128 *)((char *)v16 + 24);
        v17 -= 24;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t sub_1CC2CD550(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    unsigned int v5 = (37 * *a2) & (v4 - 1);
    uint64_t result = *(void *)a1 + 16 * v5;
    int v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result) {
      return result;
    }
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != 0x7FFFFFFF)
    {
      if (v8) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v7 == 0x80000000;
      }
      if (v17) {
        uint64_t v8 = result;
      }
      unsigned int v18 = v5 + v9++;
      unsigned int v5 = v18 & (v4 - 1);
      uint64_t result = *(void *)a1 + 16 * v5;
      int v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result) {
        return result;
      }
    }
    if (v8) {
      uint64_t result = v8;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  int v10 = *(_DWORD *)(a1 + 8);
  if (4 * v10 + 4 >= 3 * v4)
  {
    sub_1CC2CD774((uint64_t *)a1, 2 * v4);
    int v11 = *(_DWORD *)(a1 + 16);
    if (v11)
    {
      int v12 = v11 - 1;
      unsigned int v13 = (37 * *a2) & v12;
      uint64_t result = *(void *)a1 + 16 * v13;
      int v14 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result) {
        goto LABEL_10;
      }
      uint64_t v15 = 0;
      int v16 = 1;
      while (v14 != 0x7FFFFFFF)
      {
        if (v15) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v14 == 0x80000000;
        }
        if (v26) {
          uint64_t v15 = result;
        }
        unsigned int v27 = v13 + v16++;
        unsigned int v13 = v27 & v12;
        uint64_t result = *(void *)a1 + 16 * v13;
        int v14 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result) {
          goto LABEL_10;
        }
      }
LABEL_17:
      if (v15) {
        uint64_t result = v15;
      }
      goto LABEL_10;
    }
LABEL_39:
    uint64_t result = 0;
    goto LABEL_10;
  }
  if (v4 + ~v10 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1CC2CD774((uint64_t *)a1, v4);
    int v19 = *(_DWORD *)(a1 + 16);
    if (v19)
    {
      int v20 = v19 - 1;
      unsigned int v21 = (37 * *a2) & v20;
      uint64_t result = *(void *)a1 + 16 * v21;
      int v22 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result) {
        goto LABEL_10;
      }
      uint64_t v15 = 0;
      int v23 = 1;
      while (v22 != 0x7FFFFFFF)
      {
        if (v15) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v22 == 0x80000000;
        }
        if (v24) {
          uint64_t v15 = result;
        }
        unsigned int v25 = v21 + v23++;
        unsigned int v21 = v25 & v20;
        uint64_t result = *(void *)a1 + 16 * v21;
        int v22 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result) {
          goto LABEL_10;
        }
      }
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_10:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)result != 0x7FFFFFFF) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)uint64_t result = *a2;
  *(void *)(result + 8) = 0;
  return result;
}

_DWORD *sub_1CC2CD774(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  unsigned int v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        *uint64_t result = 0x7FFFFFFF;
        result += 4;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = v4;
      uint64_t v15 = &v4[4 * v3];
      do
      {
        int v16 = *v14;
        if ((*v14 - 0x7FFFFFFF) >= 2)
        {
          int v17 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v18 = v17 & (37 * v16);
          uint64_t v19 = *a1 + 16 * v18;
          int v20 = *(_DWORD *)v19;
          if (v16 != *(_DWORD *)v19)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            while (v20 != 0x7FFFFFFF)
            {
              if (v21) {
                BOOL v24 = 0;
              }
              else {
                BOOL v24 = v20 == 0x80000000;
              }
              if (v24) {
                uint64_t v21 = v19;
              }
              unsigned int v25 = v18 + v22++;
              unsigned int v18 = v25 & v17;
              uint64_t v19 = *a1 + 16 * (v25 & v17);
              int v20 = *(_DWORD *)v19;
              if (v16 == *(_DWORD *)v19) {
                goto LABEL_20;
              }
            }
            if (v21) {
              uint64_t v19 = v21;
            }
          }
LABEL_20:
          uint64_t v23 = *((void *)v14 + 1);
          *(_DWORD *)uint64_t v19 = v16;
          *((void *)v14 + 1) = 0;
          *(void *)(v19 + 8) = v23;
          ++*((_DWORD *)a1 + 2);
          sub_1CC2CAB7C((uint64_t *)v14 + 1, 0);
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = 0x7FFFFFFF;
      result += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1CC2CD930(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    unint64_t v3 = *a2;
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] <= 1uLL)
    {
      uint64_t v5 = (*(void *)&v2 - 1) & v3;
    }
    else
    {
      uint64_t v5 = *a2;
      if (*(void *)&v2 <= v3) {
        uint64_t v5 = v3 % *(void *)&v2;
      }
    }
    unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
    if (v6)
    {
      int v7 = *v6;
      if (v7)
      {
        while (1)
        {
          unint64_t v8 = v7[1];
          if (v8 == v3)
          {
            if (*((_DWORD *)v7 + 4) == v3) {
              return v7;
            }
          }
          else
          {
            if (v4.u32[0] <= 1uLL)
            {
              v8 &= *(void *)&v2 - 1;
            }
            else if (v8 >= *(void *)&v2)
            {
              v8 %= *(void *)&v2;
            }
            if (v8 != v5) {
              return 0;
            }
          }
          uint64_t result = 0;
          int v7 = (uint64_t *)*v7;
          if (!v7) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

void sub_1CC2CD9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v79[16] = *MEMORY[0x1E4F143B8];
  uint64_t v76 = v79;
  unsigned int v78 = 8;
  v79[0] = a2;
  v79[1] = a3;
  uint64_t v74 = a1 + 440;
  unsigned int v4 = 1;
  do
  {
    uint64_t v5 = (char *)v76 + 16 * v4;
    unint64_t v6 = (unsigned int *)*((void *)v5 - 2);
    uint64_t v7 = *((void *)v5 - 1);
    unsigned int v77 = v4 - 1;
    uint64_t v8 = v6[28];
    uint64_t v9 = *(void *)(a1 + 120);
    uint64_t v10 = *(unsigned int *)(a1 + 128);
    if (v10)
    {
      uint64_t v11 = 4 * v10;
      uint64_t v12 = *(_DWORD **)(a1 + 120);
      while (*v12 != v8)
      {
        ++v12;
        v11 -= 4;
        if (!v11)
        {
          uint64_t v12 = (_DWORD *)(v9 + 4 * v10);
          break;
        }
      }
    }
    else
    {
      uint64_t v12 = *(_DWORD **)(a1 + 120);
    }
    if (v10 == ((uint64_t)v12 - v9) >> 2)
    {
      llvm::LiveRange::MergeValueInAsValue(*(void *)(a1 + 104), v6, v7, **(void **)(*(void *)(a1 + 104) + 64));
      uint64_t v13 = *(void *)(a1 + 64);
      int v14 = (uint64_t *)((v8 & 0x80000000) != 0
                      ? *(void *)(v13 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                      : *(void *)(v13 + 272) + 8 * v8);
      uint64_t v15 = *v14;
      if (*v14)
      {
        while ((*(_DWORD *)v15 & 0x81000000) != 0)
        {
          uint64_t v15 = *(void *)(v15 + 24);
          if (!v15) {
            goto LABEL_107;
          }
        }
        do
        {
          unint64_t v39 = *(void *)(v15 + 8);
          do
            uint64_t v15 = *(void *)(v15 + 24);
          while (v15 && ((*(_DWORD *)v15 & 0x81000000) != 0 || *(void *)(v15 + 8) == v39));
          BOOL v40 = *(unsigned __int16 **)(v39 + 16);
          int v41 = *v40;
          if (v41 != 19 && ((v41 - 1) > 1 || (*(unsigned char *)(*(void *)(v39 + 32) + 48) & 0x10) == 0))
          {
            uint64_t v42 = *((void *)v40 + 1);
            BOOL v43 = (*(_WORD *)(v39 + 44) & 0xC) != 0 && (*(_WORD *)(v39 + 44) & 4) == 0;
            if (v43)
            {
              unint64_t v38 = v39;
              if ((v42 & 0x100000) == 0)
              {
                while ((*(_WORD *)(v38 + 44) & 8) != 0)
                {
                  unint64_t v38 = *(void *)(v38 + 8);
                  if ((*(unsigned char *)(*(void *)(v38 + 16) + 10) & 0x10) != 0) {
                    goto LABEL_67;
                  }
                }
                continue;
              }
            }
            else if ((v42 & 0x100000) == 0)
            {
              continue;
            }
          }
LABEL_67:
          __int16 v44 = *(_WORD *)(v39 + 44);
          unint64_t v37 = v39;
          if ((v44 & 4) != 0)
          {
            do
              unint64_t v37 = *(void *)v37 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v37 + 44) & 4) != 0);
          }
          unint64_t v36 = v39;
          if ((v44 & 8) != 0)
          {
            do
              unint64_t v36 = *(void *)(v36 + 8);
            while ((*(_WORD *)(v36 + 44) & 8) != 0);
          }
          unint64_t v45 = *(void *)(v36 + 8);
          if (v37 != v45)
          {
            while (1)
            {
              unsigned int v46 = **(unsigned __int16 **)(v37 + 16);
              BOOL v47 = v46 > 0x17;
              int v48 = (1 << v46) & 0x83E000;
              if (v47 || v48 == 0) {
                break;
              }
              unint64_t v37 = *(void *)(v37 + 8);
              if (v37 == v45)
              {
                unint64_t v37 = v45;
                break;
              }
            }
          }
          uint64_t v50 = *(void *)(a1 + 16);
          uint64_t v51 = *(void *)(v50 + 288);
          uint64_t v52 = *(void *)(v51 + 368);
          uint64_t v53 = *(unsigned int *)(v51 + 384);
          if (v53)
          {
            LODWORD(v54) = ((v37 >> 4) ^ (v37 >> 9)) & (v53 - 1);
            unint64_t v55 = (uint64_t *)(v52 + 16 * v54);
            uint64_t v56 = *v55;
            if (v37 == *v55) {
              goto LABEL_83;
            }
            int v57 = 1;
            while (v56 != -4096)
            {
              int v58 = v54 + v57++;
              uint64_t v54 = v58 & (v53 - 1);
              uint64_t v56 = *(void *)(v52 + 16 * v54);
              if (v37 == v56)
              {
                unint64_t v55 = (uint64_t *)(v52 + 16 * v54);
                goto LABEL_83;
              }
            }
          }
          unint64_t v55 = (uint64_t *)(v52 + 16 * v53);
LABEL_83:
          uint64_t v59 = v55[1];
          unsigned int v60 = v6[2];
          unsigned int v61 = *(void **)v6;
          if (v60)
          {
            uint64_t v62 = v61[3 * v60 - 2];
            unsigned int v63 = *(_DWORD *)((v59 & 0xFFFFFFFFFFFFFFF8) + 24) | (v59 >> 1) & 3;
            unsigned int v64 = (v62 >> 1) & 3 | *(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24);
            uint64_t v65 = *(void **)v6;
            unint64_t v66 = v6[2];
            if (v63 < v64)
            {
              do
              {
                unint64_t v67 = v66 >> 1;
                uint64_t v68 = v65[3 * (v66 >> 1) + 1];
                LODWORD(v68) = (v68 >> 1) & 3 | *(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 24);
                v66 -= (v66 >> 1) + 1;
                BOOL v69 = v63 >= v68;
                if (v63 >= v68) {
                  unint64_t v70 = v67 + 1;
                }
                else {
                  unint64_t v70 = 0;
                }
                v65 += 3 * v70;
                if (!v69) {
                  unint64_t v66 = v67;
                }
              }
              while (v66);
              goto LABEL_94;
            }
          }
          else
          {
            unsigned int v60 = 0;
          }
          uint64_t v65 = &v61[3 * v60];
LABEL_94:
          if (v65 == &v61[3 * v60]
            || ((*v65 >> 1) & 3 | *(_DWORD *)((*v65 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v59 & 0xFFFFFFFFFFFFFFF8) + 24) | (v59 >> 1) & 3))
          {
            uint64_t v71 = 0;
          }
          else
          {
            uint64_t v71 = v65[2];
          }
          if (v71 == v7)
          {
            if (v41 != 19
              || (uint64_t v72 = *(_DWORD **)(v39 + 32), (*v72 & 0xFFF00) != 0)
              || (v72[8] & 0xFFF00) != 0
              || (v16 = v72[9], v72[1] != v8) && (BOOL v43 = v16 == v8, v16 = v72[1], !v43)
              || !v16)
            {
              int v75 = 0;
              if (v8 == (*(unsigned int (**)(void, unint64_t, int *))(**(void **)(a1 + 72)
                                                                                                 + 96))(*(void *)(a1 + 72), v39, &v75)&& v75 == *(_DWORD *)(a1 + 112))
              {
                *(void *)(v39 + 16) = *(void *)(*(void *)(a1 + 72) + 8) + 336;
                unint64_t v73 = *(unsigned int *)(a1 + 368);
                if (v73 >= *(unsigned int *)(a1 + 372)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(a1 + 360) + 8 * v73) = v39;
                ++*(_DWORD *)(a1 + 368);
                sub_1CC2CC204(v74, v39, *(_DWORD *)(a1 + 112));
              }
              continue;
            }
            if (v16 < 0)
            {
              uint64_t v17 = v16 & 0x7FFFFFFF;
              int v18 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 328) + 4 * v17);
              if (!v18) {
                int v18 = v16;
              }
              if (v18 == *(_DWORD *)(a1 + 116))
              {
                uint64_t v19 = (void *)(v50 + 408);
                uint64_t v20 = *(unsigned int *)(v50 + 416);
                if (v17 >= v20)
                {
                  sub_1CB9153B8((uint64_t)v19, v17 - v20 + 1, *(void *)(v50 + 424));
LABEL_49:
                  operator new();
                }
                uint64_t v21 = *(void *)(*v19 + 8 * v17);
                if (!v21) {
                  goto LABEL_49;
                }
                unint64_t v22 = v59 & 0xFFFFFFFFFFFFFFF8;
                unsigned int v23 = *(_DWORD *)(v21 + 8);
                BOOL v24 = *(void **)v21;
                if (v23)
                {
                  uint64_t v25 = v24[3 * v23 - 2];
                  unsigned int v26 = *(_DWORD *)(v22 + 24) | 2;
                  unsigned int v27 = (v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24);
                  uint64_t v28 = *(void **)v21;
                  unint64_t v29 = *(unsigned int *)(v21 + 8);
                  if (v26 < v27)
                  {
                    do
                    {
                      unint64_t v30 = v29 >> 1;
                      uint64_t v31 = v28[3 * (v29 >> 1) + 1];
                      LODWORD(v31) = (v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v29 -= (v29 >> 1) + 1;
                      BOOL v32 = v26 >= v31;
                      if (v26 >= v31) {
                        unint64_t v33 = v30 + 1;
                      }
                      else {
                        unint64_t v33 = 0;
                      }
                      v28 += 3 * v33;
                      if (!v32) {
                        unint64_t v29 = v30;
                      }
                    }
                    while (v29);
                    goto LABEL_36;
                  }
                }
                else
                {
                  unsigned int v23 = 0;
                }
                uint64_t v28 = &v24[3 * v23];
LABEL_36:
                if (v28 == &v24[3 * v23]
                  || ((*v28 >> 1) & 3 | *(_DWORD *)((*v28 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v22 + 24) | 2u))
                {
                  uint64_t v34 = 0;
                }
                else
                {
                  uint64_t v34 = v28[2];
                }
                if (v77 >= (unint64_t)v78) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v35 = (char *)v76 + 16 * v77;
                *unsigned int v35 = v21;
                v35[1] = v34;
                ++v77;
              }
            }
          }
        }
        while (v15);
      }
    }
LABEL_107:
    unsigned int v4 = v77;
  }
  while (v77);
  if (v76 != v79) {
    free(v76);
  }
}

unint64_t sub_1CC2CE134(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = result;
    do
    {
      uint64_t result = sub_1CB914C88(*(void *)(v5 + 288), v4, 0);
      if ((*(unsigned char *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 8) != 0)
          uint64_t v4 = *(void *)(v4 + 8);
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1CC2CE1A4(uint64_t result, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    unint64_t v6 = (_DWORD *)(result + 160 * v5);
    int v7 = *v6;
    if (*v6 != a3)
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -1)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -2;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (_DWORD *)(result + 160 * (v11 & v4));
        int v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_3;
        }
      }
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

int *sub_1CC2CE228(uint64_t a1, int *a2, int *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CC2CE368((uint64_t *)a1, v6);
      int v16 = 0;
      sub_1CC2CE1A4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
  }
  else
  {
    sub_1CC2CE368((uint64_t *)a1, 2 * v6);
    int v7 = *a2;
    int v8 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v9 = (37 * *a2) & v8;
    a3 = (int *)(*(void *)a1 + 160 * v9);
    int v10 = *a3;
    if (*a2 == *a3) {
      goto LABEL_3;
    }
    uint64_t v12 = 0;
    int v13 = 1;
    while (v10 != -1)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v10 == -2;
      }
      if (v14) {
        uint64_t v12 = a3;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      a3 = (int *)(*(void *)a1 + 160 * v9);
      int v10 = *a3;
      if (v7 == *a3) {
        goto LABEL_3;
      }
    }
    if (v12) {
      a3 = v12;
    }
  }
  int v7 = *a3;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_DWORD *sub_1CC2CE368(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  int v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(160 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 160 * v12;
      do
      {
        *uint64_t result = -1;
        result += 40;
        v13 -= 160;
      }
      while (v13);
    }
    if (!v3)
    {
LABEL_43:
      JUMPOUT(0x1D25D9CD0);
    }
    BOOL v14 = &v4[40 * v3];
    unsigned int v15 = v4;
    while (1)
    {
      unsigned int v16 = *v15;
      if (*v15 <= 0xFFFFFFFD) {
        break;
      }
LABEL_26:
      v15 += 40;
      if (v15 == v14) {
        goto LABEL_43;
      }
    }
    int v17 = *((_DWORD *)a1 + 4) - 1;
    unsigned int v18 = v17 & (37 * v16);
    uint64_t v19 = *a1 + 160 * v18;
    int v20 = *(_DWORD *)v19;
    if (v16 != *(_DWORD *)v19)
    {
      uint64_t v33 = 0;
      int v34 = 1;
      while (v20 != -1)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v20 == -2;
        }
        if (v35) {
          uint64_t v33 = v19;
        }
        unsigned int v36 = v18 + v34++;
        unsigned int v18 = v36 & v17;
        uint64_t v19 = *a1 + 160 * v18;
        int v20 = *(_DWORD *)v19;
        if (v16 == *(_DWORD *)v19) {
          goto LABEL_16;
        }
      }
      if (v33) {
        uint64_t v19 = v33;
      }
    }
LABEL_16:
    *(_DWORD *)uint64_t v19 = v16;
    *(void *)(v19 + 8) = 1;
    uint64_t v21 = v19 + 8;
    *(void *)&long long v22 = -1;
    *((void *)&v22 + 1) = -1;
    *(_OWORD *)(v19 + 16) = v22;
    *(_OWORD *)(v19 + 32) = v22;
    *(_OWORD *)(v19 + 48) = v22;
    *(_OWORD *)(v19 + 64) = v22;
    int v23 = v15[2];
    v15[2] = v23 & 1;
    *(_DWORD *)(v19 + 8) = v23 & 0xFFFFFFFE | *(_DWORD *)(v19 + 8) & 1;
    int v24 = *(_DWORD *)(v19 + 12);
    *(_DWORD *)(v19 + 12) = v15[3];
    v15[3] = v24;
    int v25 = *(_DWORD *)(v19 + 8);
    int v26 = v15[2];
    if (v25)
    {
      int v25 = v15[2];
      uint64_t v27 = (uint64_t)(v15 + 2);
      if (v26)
      {
        for (uint64_t i = 4; i != 20; ++i)
        {
          int v29 = *(_DWORD *)(v19 + i * 4);
          *(_DWORD *)(v19 + i * 4) = v15[i];
          v15[i] = v29;
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v27 = v19 + 8;
      uint64_t v21 = (uint64_t)(v15 + 2);
      if ((v26 & 1) == 0)
      {
        uint64_t v37 = *(void *)(v19 + 16);
        *(void *)(v19 + 16) = *((void *)v15 + 2);
        *((void *)v15 + 2) = v37;
        LODWORD(v37) = *(_DWORD *)(v19 + 24);
        *(_DWORD *)(v19 + 24) = v15[6];
        v15[6] = v37;
LABEL_20:
        *(void *)(v19 + 80) = v19 + 96;
        uint64_t v30 = v19 + 80;
        *(void *)(v30 + 8) = 0x1000000000;
        if (v15[22]) {
          sub_1CB927804(v30, (uint64_t)(v15 + 20));
        }
        ++*((_DWORD *)a1 + 2);
        uint64_t v31 = (int *)*((void *)v15 + 10);
        if (v31 != v15 + 24) {
          free(v31);
        }
        if ((v15[2] & 1) == 0) {
          MEMORY[0x1D25D9CD0](*((void *)v15 + 2), 4);
        }
        goto LABEL_26;
      }
    }
    long long v38 = *(_OWORD *)(v27 + 8);
    *(_DWORD *)uint64_t v27 = v25 | 1;
    for (uint64_t j = 8; j != 72; j += 4)
      *(_DWORD *)(v27 + j) = *(_DWORD *)(v21 + j);
    *(_DWORD *)v21 &= ~1u;
    *(_OWORD *)(v21 + 8) = v38;
    goto LABEL_20;
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 160 * v10;
    do
    {
      *uint64_t result = -1;
      result += 40;
      v11 -= 160;
    }
    while (v11);
  }
  return result;
}

void sub_1CC2CE678(llvm::SmallPtrSetImplBase *this, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (a2 != a4)
  {
    unint64_t v6 = a2;
    unsigned int v9 = *(unint64_t **)this;
    unsigned int v8 = (unint64_t *)*((void *)this + 1);
    while (1)
    {
      unint64_t v10 = *v6;
      uint64_t v11 = *((unsigned int *)this + 5);
      if (v8 != v9) {
        break;
      }
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v11;
        BOOL v14 = v9;
        while (*v14 != v10)
        {
          if (*v14 == -2) {
            uint64_t v12 = v14;
          }
          ++v14;
          v13 -= 8;
          if (!v13)
          {
            if (!v12) {
              goto LABEL_11;
            }
            *uint64_t v12 = v10;
            --*((_DWORD *)this + 6);
            goto LABEL_13;
          }
        }
        goto LABEL_13;
      }
LABEL_11:
      unsigned int v15 = *((_DWORD *)this + 4);
      if (v11 >= v15) {
        goto LABEL_21;
      }
      *((_DWORD *)this + 5) = v11 + 1;
      v9[v11] = v10;
LABEL_13:
      unsigned int v9 = *(unint64_t **)this;
      unsigned int v8 = (unint64_t *)*((void *)this + 1);
      unsigned int v16 = v6 + 1;
      while (v16 != a3)
      {
        unint64_t v17 = *v16++;
        if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v6 = v16 - 1;
          goto LABEL_18;
        }
      }
      unint64_t v6 = a3;
LABEL_18:
      if (v6 == a4) {
        return;
      }
    }
    unsigned int v15 = *((_DWORD *)this + 4);
LABEL_21:
    if (3 * v15 <= 4 * ((int)v11 - *((_DWORD *)this + 6)))
    {
      if (v15 >= 0x40) {
        v15 *= 2;
      }
      else {
        unsigned int v15 = 128;
      }
    }
    else if (v15 - v11 >= v15 >> 3)
    {
      goto LABEL_23;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v15);
    unsigned int v15 = *((_DWORD *)this + 4);
    unsigned int v8 = (unint64_t *)*((void *)this + 1);
LABEL_23:
    unsigned int v18 = v15 - 1;
    unsigned int v19 = (v15 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    int v20 = &v8[v19];
    unint64_t v21 = *v20;
    if (*v20 == -1)
    {
      long long v22 = 0;
LABEL_35:
      if (v22) {
        int v26 = v22;
      }
      else {
        int v26 = v20;
      }
      if (*v26 != v10)
      {
        if (*v26 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        *int v26 = v10;
      }
    }
    else
    {
      long long v22 = 0;
      int v23 = 1;
      while (v21 != v10)
      {
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v21 == -2;
        }
        if (v24) {
          long long v22 = v20;
        }
        unsigned int v25 = v19 + v23++;
        unsigned int v19 = v25 & v18;
        int v20 = &v8[v25 & v18];
        unint64_t v21 = *v20;
        if (*v20 == -1) {
          goto LABEL_35;
        }
      }
    }
    goto LABEL_13;
  }
}

void *sub_1CC2CE85C(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CC136E28(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC2CE8C8(a1, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC2CE8C8(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC136F74(a1, v6);
  unsigned int v8 = 0;
  sub_1CC136E28(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC2CE980(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBAEE424(a1, v7);
      unint64_t v17 = 0;
      sub_1CB834D78((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBAEE424(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CC2CEAB4(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(result + 176 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        int v6 = (void *)(result + 176 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_3;
        }
      }
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

uint64_t *sub_1CC2CEB38(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CC2CEC74(a1, v6);
      unsigned int v16 = 0;
      sub_1CC2CEAB4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    uint64_t v7 = *a3;
    goto LABEL_5;
  }
  sub_1CC2CEC74(a1, 2 * v6);
  uint64_t v7 = *a2;
  int v9 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(void *)a1 + 176 * v10);
  uint64_t v11 = *a3;
  if (*a2 != *a3)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        uint64_t v12 = a3;
      }
      unsigned int v15 = v10 + v13++;
      unsigned int v10 = v15 & v9;
      a3 = (uint64_t *)(*(void *)a1 + 176 * v10);
      uint64_t v11 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v12) {
      a3 = v12;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC2CEC74(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(176 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD516BE4(a1, v4, &v4[22 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 176 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 22;
      v11 -= 176;
    }
    while (v11);
  }
  return result;
}

void *sub_1CC2CED4C(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CC136E28(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC2CE8C8(a1, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CC2CEDB4()
{
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Disable inline spill hoisting";
  v1.n128_u64[1] = 29;
  sub_1CD4C1500((uint64_t)&unk_1EBCCD050, "disable-spill-hoist", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCD050, &dword_1CB82C000);
  char v3 = 0;
  char v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Restrict remat for statepoint operands";
  v1.n128_u64[1] = 38;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCCD110, "restrict-statepoint-remat", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCD110, &dword_1CB82C000);
}

void *sub_1CC2CEE90(void *result)
{
  if (*((void *)result + 4) != *(_DWORD *)(*(void *)result + 16))
  {
    __n128 v1 = result;
    free(*((void **)result + 3));
    size_t v2 = *(unsigned int *)(*v1 + 16);
    v1[4] = v2;
    uint64_t result = sub_1CC248524(v2, 1uLL);
    v1[3] = result;
  }
  return result;
}

unsigned int *sub_1CC2CEEEC(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int8 *)(*(void *)(a1 + 24) + a2) <= 0x1FuLL
    && (uint64_t v4 = a1 + 720 * *(unsigned __int8 *)(*(void *)(a1 + 24) + a2),
        int v5 = *(_DWORD *)(v4 + 48),
        size_t v2 = (unsigned int *)(v4 + 48),
        v5 == a2))
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    if ((sub_1CC2CEFDC(v2, v7, *(void *)a1) & 1) == 0) {
      sub_1CC2CF08C(v2, v7, v6);
    }
  }
  else
  {
    uint64_t v8 = a2;
    int v9 = *(_DWORD *)(a1 + 40);
    if (v9 == 31) {
      int v10 = 0;
    }
    else {
      int v10 = v9 + 1;
    }
    *(_DWORD *)(a1 + 40) = v10;
    int v11 = 32;
    while (*(_DWORD *)(a1 + 720 * v9 + 56))
    {
      if ((v9 + 1) == 32) {
        LOBYTE(v9) = 0;
      }
      else {
        LOBYTE(v9) = v9 + 1;
      }
      if (!--v11) {
        return v2;
      }
    }
    size_t v2 = (unsigned int *)(a1 + 720 * v9 + 48);
    sub_1CC2CF110((int *)v2, a2, *(void *)(a1 + 8), *(void *)a1, *(void *)(a1 + 16));
    *(unsigned char *)(*(void *)(a1 + 24) + v8) = v9;
  }
  return v2;
}

uint64_t sub_1CC2CEFDC(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[14];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (void *)(a3 + 8);
  if (!a3) {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *(unsigned int *)(*v4 + 24 * *a1 + 16);
  uint64_t v6 = (unsigned __int16 *)(v4[6] + ((v5 >> 3) & 0x1FFFFFFE));
  int v8 = *v6;
  uint64_t v7 = v6 + 1;
  int v9 = v8 + (v5 & 0xF) * *a1;
  int v10 = (int *)(*((void *)a1 + 6) + 88);
  uint64_t v11 = v3 - 1;
  while (1)
  {
    int v12 = *v10;
    v10 += 28;
    if (*(_DWORD *)(a2 + 216 * (unsigned __int16)v9) != v12) {
      break;
    }
    int v14 = *v7++;
    int v13 = v14;
    BOOL v15 = v14 == 0;
    if (!v14) {
      uint64_t v7 = 0;
    }
    BOOL v16 = v11 == 0;
    if (v11)
    {
      LOWORD(v9) = v13 + v9;
      --v11;
      if (v13) {
        continue;
      }
    }
    return v15 & v16;
  }
  BOOL v15 = 0;
  BOOL v16 = 0;
  return v15 & v16;
}

unsigned int *sub_1CC2CF08C(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = *result;
  ++result[1];
  *((void *)result + 5) = 0;
  unint64_t v5 = (void *)(a3 + 8);
  if (!a3) {
    unint64_t v5 = 0;
  }
  unint64_t v6 = *(unsigned int *)(*v5 + 24 * v4 + 16);
  uint64_t v7 = (unsigned __int16 *)(v5[6] + ((v6 >> 3) & 0x1FFFFFFE));
  int v9 = *v7;
  int v8 = v7 + 1;
  int v10 = v9 + (v6 & 0xF) * v4;
  uint64_t v11 = *((void *)result + 6);
  do
  {
    *(_DWORD *)(v11 + 112 * v3 + 88) = *(_DWORD *)(a2 + 216 * (unsigned __int16)v10);
    int v12 = v8[v3];
    v10 += v12;
    ++v3;
  }
  while (v12);
  return result;
}

void sub_1CC2CF110(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v7 = a1[1] + 1;
  *a1 = a2;
  a1[1] = v7;
  unint64_t v8 = *(void *)(a5 + 112) - *(void *)(a5 + 104);
  unint64_t v9 = (v8 >> 3);
  unint64_t v10 = a1[130];
  if (v9 != v10)
  {
    if (v9 >= v10)
    {
      if (v9 > a1[131]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v9 != v10)
      {
        uint64_t v34 = a3;
        bzero((void *)(*((void *)a1 + 64) + 24 * v10), 24 * ((24 * (v9 - v10) - 24) / 0x18) + 24);
        a3 = v34;
      }
    }
    a1[130] = v8 >> 3;
  }
  uint64_t v11 = (unint64_t *)(a1 + 12);
  unint64_t v12 = *((void *)a1 + 6);
  *((void *)a1 + 5) = 0;
  uint64_t v13 = a1[14];
  if (v13)
  {
    uint64_t v14 = 112 * v13;
    do
    {
      BOOL v15 = *(void **)(v12 + v14 - 104);
      if ((void *)(v12 + v14 - 88) != v15)
      {
        uint64_t v40 = a3;
        free(v15);
        a3 = v40;
      }
      v14 -= 112;
    }
    while (v14);
    unint64_t v12 = *v11;
  }
  unint64_t v16 = 0;
  a1[14] = 0;
  unsigned int v17 = *a1;
  unsigned int v18 = (void *)(a4 + 8);
  if (!a4) {
    unsigned int v18 = 0;
  }
  unint64_t v19 = *(unsigned int *)(*v18 + 24 * v17 + 16);
  int v20 = (_WORD *)(v18[6] + ((v19 >> 3) & 0x1FFFFFFE));
  __int16 v22 = *v20;
  unint64_t v21 = v20 + 1;
  unsigned __int16 v23 = v22 + (v19 & 0xF) * v17;
  BOOL v24 = &llvm::UseSegmentSetForPhysRegs;
  do
  {
    unsigned int v25 = (_DWORD *)(a3 + 216 * v23);
    uint64_t v45 = 0x400000000;
    v46[16] = *v25;
    uint64_t v47 = 0;
    BOOL v43 = v25 + 2;
    __int16 v44 = v46;
    int v26 = (char *)&v43;
    if (v16 >= a1[15])
    {
      uint64_t v35 = a3;
      unint64_t v36 = v16 + 1;
      BOOL v37 = v12 + 112 * v16 > (unint64_t)&v43;
      if (v12 <= (unint64_t)&v43 && v37)
      {
        int v41 = (char *)&v43 - v12;
        sub_1CC2D0024((char **)a1 + 6, v36);
        unint64_t v12 = *v11;
        int v26 = &v41[*v11];
      }
      else
      {
        sub_1CC2D0024((char **)a1 + 6, v36);
        unint64_t v12 = *v11;
        int v26 = (char *)&v43;
      }
      a3 = v35;
      BOOL v24 = &llvm::UseSegmentSetForPhysRegs;
    }
    unsigned int v27 = a1[14];
    uint64_t v28 = (void *)(v12 + 112 * v27);
    void *v28 = *(void *)v26;
    v28[2] = 0x400000000;
    v28[1] = v28 + 3;
    uint64_t v29 = (uint64_t)(v28 + 1);
    if (*((_DWORD *)v26 + 4))
    {
      uint64_t v42 = a3;
      sub_1CC2D01B8(v29, (uint64_t)(v26 + 8));
      BOOL v24 = &llvm::UseSegmentSetForPhysRegs;
      a3 = v42;
    }
    uint64_t v30 = v12 + 112 * v27;
    long long v31 = *(_OWORD *)(v26 + 88);
    *(void *)(v30 + 104) = *((void *)v26 + 13);
    *(_OWORD *)(v30 + 88) = v31;
    ++a1[14];
    if (v44 != v46)
    {
      uint64_t v38 = a3;
      unint64_t v39 = v24;
      free(v44);
      BOOL v24 = v39;
      a3 = v38;
    }
    uint64_t v32 = *(void *)(*(void *)(*((void *)a1 + 4) + 680) + 8 * v23);
    if (!v32) {
      operator new();
    }
    unint64_t v12 = *((void *)a1 + 6);
    unint64_t v16 = a1[14];
    *(void *)(v12 + 112 * v16 - 16) = v32;
    int v33 = *v21++;
    v23 += v33;
  }
  while (v33);
}

void sub_1CC2CF4E4(unsigned int *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  long long v4 = *(_OWORD *)(*(void *)(*((void *)a1 + 3) + 392) + 16 * a2);
  unint64_t v5 = *((void *)a1 + 5);
  uint64_t v6 = *(void *)(*(void *)(*((void *)a1 + 3) + 392) + 16 * a2);
  if (v5 == v6) {
    goto LABEL_56;
  }
  if (v5 >= 8)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v8 = (v6 >> 1) & 3;
    if ((*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24) | v8) >= (*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24) | (v5 >> 1) & 3))
    {
      uint64_t v9 = a1[14];
      if (v9)
      {
        uint64_t v10 = 0;
        long long v157 = *(_OWORD *)(*(void *)(*((void *)a1 + 3) + 392) + 16 * a2);
        do
        {
          uint64_t v11 = *((void *)a1 + 6);
          uint64_t v12 = v11 + 112 * v10;
          uint64_t v13 = *(unsigned int *)(v12 + 16);
          if (v13)
          {
            uint64_t v14 = *(void *)(v12 + 8);
            if (*(_DWORD *)(v14 + 12) < *(_DWORD *)(v14 + 8))
            {
              uint64_t v15 = *(void *)v12;
              if (*(_DWORD *)(*(void *)v12 + 192))
              {
                sub_1CC2D04B8(v12, v6);
                long long v4 = v157;
              }
              else
              {
                uint64_t v21 = v14 + 16 * v13;
                unsigned int v22 = *(_DWORD *)(v21 - 4);
                int v23 = *(_DWORD *)(v15 + 196);
                if (v22 != v23)
                {
                  while (1)
                  {
                    uint64_t v24 = *(void *)(v15 + 16 * v22 + 8);
                    if (((v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v7 + 24) | v8)) {
                      break;
                    }
                    if (v23 == ++v22)
                    {
                      unsigned int v22 = *(_DWORD *)(v15 + 196);
                      break;
                    }
                  }
                }
                *(_DWORD *)(v21 - 4) = v22;
              }
            }
          }
          uint64_t v16 = v11 + 112 * v10;
          uint64_t v19 = *(void *)(v16 + 104);
          unsigned int v17 = (uint64_t *)(v16 + 104);
          uint64_t v18 = v19;
          uint64_t v20 = *(void *)*(v17 - 1) + 24 * *(unsigned int *)(*(v17 - 1) + 8);
          if (v19 != v20)
          {
            unsigned int v25 = *(_DWORD *)(v7 + 24) | v8;
            if (v25 < ((*(void *)(v20 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v20 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                   + 24)))
            {
              uint64_t v20 = v18 - 24;
              do
              {
                unsigned int v26 = (*(void *)(v20 + 32) >> 1) & 3 | *(_DWORD *)((*(void *)(v20 + 32) & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 24);
                v20 += 24;
              }
              while (v26 <= v25);
            }
            *unsigned int v17 = v20;
          }
          ++v10;
        }
        while (v10 != v9);
      }
      goto LABEL_55;
    }
  }
  uint64_t v27 = a1[14];
  if (v27)
  {
    uint64_t v28 = 0;
    unint64_t v29 = v6 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = (v6 >> 1) & 3;
    long long v158 = *(_OWORD *)(*(void *)(*((void *)a1 + 3) + 392) + 16 * a2);
    do
    {
      uint64_t v31 = *((void *)a1 + 6);
      uint64_t v32 = (uint64_t *)(v31 + 112 * v28);
      uint64_t v33 = *v32;
      if (*(_DWORD *)(*v32 + 192))
      {
        uint64_t v48 = *(unsigned int *)(v33 + 196);
        if (v48)
        {
          uint64_t v49 = 0;
          while (((*(void *)(v33 + 96 + 8 * v49) >> 1) & 3 | *(_DWORD *)((*(void *)(v33 + 96 + 8 * v49) & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24)) <= (*(_DWORD *)(v29 + 24) | v30))
          {
            if (v48 == ++v49)
            {
              uint64_t v152 = *(unsigned int *)(v33 + 196);
              goto LABEL_49;
            }
          }
          uint64_t v152 = v49;
        }
        else
        {
          uint64_t v152 = 0;
        }
LABEL_49:
        *((_DWORD *)v32 + 4) = 0;
        if (!*((_DWORD *)v32 + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v50 = (void *)v32[1];
        *uint64_t v50 = v33 + 8;
        v50[1] = v48 | (v152 << 32);
        LODWORD(v50) = *((_DWORD *)v32 + 4);
        *((_DWORD *)v32 + 4) = v50 + 1;
        if (v50 != -1 && *(_DWORD *)(v32[1] + 12) < *(_DWORD *)(v32[1] + 8))
        {
          uint64_t v51 = v27;
          unint64_t v52 = v29;
          uint64_t v53 = v30;
          sub_1CC2D02F0(v31 + 112 * v28, v6);
          uint64_t v30 = v53;
          unint64_t v29 = v52;
          uint64_t v27 = v51;
          long long v4 = v158;
        }
      }
      else
      {
        uint64_t v34 = *(unsigned int *)(v33 + 196);
        if (v34)
        {
          uint64_t v35 = 0;
          unint64_t v36 = (uint64_t *)(v33 + 8);
          while (1)
          {
            uint64_t v37 = *v36;
            v36 += 2;
            if (((v37 >> 1) & 3 | *(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v29 + 24) | v30)) {
              break;
            }
            if (v34 == ++v35)
            {
              uint64_t v151 = *(unsigned int *)(v33 + 196);
              goto LABEL_31;
            }
          }
          uint64_t v151 = v35;
        }
        else
        {
          uint64_t v151 = 0;
        }
LABEL_31:
        *((_DWORD *)v32 + 4) = 0;
        if (!*((_DWORD *)v32 + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v38 = (void *)v32[1];
        *uint64_t v38 = v33;
        v38[1] = v34 | (v151 << 32);
        ++*((_DWORD *)v32 + 4);
      }
      unint64_t v39 = *(uint64_t **)(v31 + 112 * v28 + 96);
      unint64_t v40 = *((unsigned int *)v39 + 2);
      uint64_t v41 = *v39;
      if (v40)
      {
        uint64_t v42 = *(void *)(v41 + 24 * v40 - 16);
        unsigned int v43 = *(_DWORD *)(v29 + 24) | v30;
        if (v43 < ((v42 >> 1) & 3 | *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          do
          {
            unint64_t v44 = v40 >> 1;
            uint64_t v45 = *(void *)(v41 + 24 * (v40 >> 1) + 8);
            LODWORD(v45) = (v45 >> 1) & 3 | *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24);
            v40 -= (v40 >> 1) + 1;
            BOOL v46 = v43 >= v45;
            if (v43 >= v45) {
              unint64_t v47 = v44 + 1;
            }
            else {
              unint64_t v47 = 0;
            }
            v41 += 24 * v47;
            if (!v46) {
              unint64_t v40 = v44;
            }
          }
          while (v40);
          goto LABEL_41;
        }
      }
      else
      {
        LODWORD(v40) = 0;
      }
      v41 += 24 * v40;
LABEL_41:
      *(void *)(v31 + 112 * v28++ + 104) = v41;
    }
    while (v28 != v27);
  }
LABEL_55:
  *((void *)a1 + 5) = v6;
LABEL_56:
  uint64_t v54 = *((void *)a1 + 2);
  uint64_t v55 = *(void *)(*(void *)(v54 + 104) + 8 * v3);
  uint64_t v56 = *((void *)a1 + 64);
  uint64_t v57 = v56 + 24 * v3;
  unsigned int v58 = a1[1];
  uint64_t v59 = a1[14];
  unsigned int v60 = (void *)*((void *)a1 + 4);
  uint64_t v61 = v60[75];
  uint64_t v62 = v60[55];
  uint64_t v63 = v60[65];
  uint64_t v64 = v54 + 320;
  while (1)
  {
    *(_DWORD *)uint64_t v57 = v58;
    *(void *)(v57 + 8) = 0;
    uint64_t v65 = (unint64_t *)(v57 + 8);
    *(void *)(v57 + 16) = 0;
    uint64_t v66 = *((void *)&v4 + 1);
    unint64_t v67 = 0;
    if (v59)
    {
      uint64_t v68 = *((void *)a1 + 6);
      unint64_t v69 = *((void *)&v4 + 1) & 0xFFFFFFFFFFFFFFF8;
      int v70 = (DWORD2(v4) >> 1) & 3;
      uint64_t v71 = (unsigned int *)(v68 + 16);
      uint64_t v72 = v59;
      do
      {
        uint64_t v73 = *v71;
        if (v73)
        {
          uint64_t v74 = *((void *)v71 - 1);
          if (*(_DWORD *)(v74 + 12) < *(_DWORD *)(v74 + 8))
          {
            unint64_t v75 = *(void *)(*(void *)(v74 + 16 * v73 - 16) + 16 * *(unsigned int *)(v74 + 16 * v73 - 4));
            unsigned int v76 = (v75 >> 1) & 3 | *(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v76 < (*(_DWORD *)(v69 + 24) | v70)
              && (v67 < 8 || v76 < (*(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24) | (v67 >> 1) & 3)))
            {
              *uint64_t v65 = v75;
              unint64_t v67 = v75;
            }
          }
        }
        v71 += 28;
        --v72;
      }
      while (v72);
      unsigned int v77 = (unint64_t **)(v68 + 104);
      uint64_t v78 = v59;
      do
      {
        if (*v77 != (unint64_t *)(**(v77 - 1) + 24 * *((unsigned int *)*(v77 - 1) + 2)))
        {
          unint64_t v79 = **v77;
          unsigned int v80 = (v79 >> 1) & 3 | *(_DWORD *)((v79 & 0xFFFFFFFFFFFFFFF8) + 24);
          if (v80 < (*(_DWORD *)(v69 + 24) | v70)
            && (v67 < 8 || v80 < (*(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24) | (v67 >> 1) & 3)))
          {
            *uint64_t v65 = v79;
            unint64_t v67 = v79;
          }
        }
        v77 += 14;
        --v78;
      }
      while (v78);
    }
    uint64_t v81 = (unsigned int *)(v61 + 8 * v3);
    uint64_t v82 = *v81;
    uint64_t v83 = v81[1];
    if (v83)
    {
      uint64_t v135 = (unint64_t *)(v62 + 8 * v82);
      uint64_t v136 = (void *)(v63 + 8 * v82);
      if (v67 <= 7) {
        unint64_t v67 = *((void *)&v4 + 1);
      }
      unsigned int v137 = *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24) | (v67 >> 1) & 3;
      for (uint64_t i = v83; i; --i)
      {
        unint64_t v140 = *v135++;
        unint64_t v139 = v140;
        if (((v140 >> 1) & 3 | *(_DWORD *)((v140 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v137) {
          break;
        }
        if (((*(_DWORD *)(*v136 + (((unint64_t)*a1 >> 3) & 0x1FFFFFFC)) >> *a1) & 1) == 0)
        {
          *uint64_t v65 = v139;
          break;
        }
        ++v136;
      }
    }
    *((void *)a1 + 5) = *((void *)&v4 + 1);
    if (*v65 >= 8) {
      break;
    }
    uint64_t v55 = *(void *)(v55 + 8);
    if (v55 == v64) {
      return;
    }
    uint64_t v3 = *(unsigned int *)(v55 + 24);
    uint64_t v57 = v56 + 24 * v3;
    if (*(_DWORD *)v57 == v58) {
      return;
    }
    long long v4 = *(_OWORD *)(*(void *)(*((void *)a1 + 3) + 392) + 16 * v3);
  }
  if (v59)
  {
    uint64_t v154 = v63;
    uint64_t v155 = v62;
    uint64_t v84 = 0;
    unint64_t v85 = *((void *)&v4 + 1) & 0xFFFFFFFFFFFFFFF8;
    int v86 = (DWORD2(v4) >> 1) & 3;
    uint64_t v159 = v4;
    unint64_t v156 = *((void *)&v4 + 1) & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      unsigned int v87 = (unsigned int *)(*((void *)a1 + 6) + 112 * v84);
      uint64_t v88 = v87[4];
      if (!v88) {
        goto LABEL_95;
      }
      unint64_t v90 = (uint64_t *)(v87 + 2);
      uint64_t v89 = *((void *)v87 + 1);
      if (*(_DWORD *)(v89 + 12) >= *(_DWORD *)(v89 + 8)) {
        goto LABEL_95;
      }
      uint64_t v91 = v89 + 16 * v88;
      uint64_t v92 = *(unsigned int *)(v91 - 4);
      uint64_t v93 = *(void *)(*(void *)(v91 - 16) + 16 * v92);
      unsigned int v94 = (v93 >> 1) & 3 | *(_DWORD *)((v93 & 0xFFFFFFFFFFFFFFF8) + 24);
      unsigned int v95 = *(_DWORD *)(v85 + 24) | v86;
      if (v94 >= v95) {
        goto LABEL_95;
      }
      uint64_t v96 = *(void *)v87;
      if (*(_DWORD *)(*(void *)v87 + 192))
      {
        sub_1CC2D04B8((uint64_t)v87, v66);
        unint64_t v85 = v156;
        uint64_t v89 = *((void *)v87 + 1);
      }
      else
      {
        int v110 = *(_DWORD *)(v96 + 196);
        if (v92 != v110)
        {
          while (1)
          {
            uint64_t v111 = *(void *)(v96 + 16 * v92 + 8);
            if (((v111 >> 1) & 3 | *(_DWORD *)((v111 & 0xFFFFFFFFFFFFFFF8) + 24)) > v95) {
              break;
            }
            LODWORD(v92) = v92 + 1;
            if (v110 == v92)
            {
              LODWORD(v92) = *(_DWORD *)(v96 + 196);
              break;
            }
          }
        }
        *(_DWORD *)(v91 - 4) = v92;
      }
      uint64_t v97 = v87[4];
      if (!v97) {
        break;
      }
      uint64_t v98 = v89 + 16 * v97;
      *(void *)&long long v4 = v159;
      if (*(_DWORD *)(v89 + 12) >= *(_DWORD *)(v89 + 8))
      {
        unsigned int v112 = *(_DWORD *)(v98 - 4);
        uint64_t v99 = (_DWORD *)(v98 - 4);
        unsigned int v100 = v112;
        if (!v112) {
          goto LABEL_157;
        }
LABEL_106:
        unsigned int v113 = *(_DWORD *)(*(void *)v87 + 192);
        if (v113) {
          goto LABEL_107;
        }
LABEL_98:
        *uint64_t v99 = v100 - 1;
LABEL_99:
        int v103 = 1;
        goto LABEL_88;
      }
      unsigned int v101 = *(_DWORD *)(v98 - 4);
      uint64_t v99 = (_DWORD *)(v98 - 4);
      unsigned int v100 = v101;
      uint64_t v102 = *(void *)(*(void *)(v99 - 3) + 16 * v101);
      if (((v102 >> 1) & 3 | *(_DWORD *)((v102 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)(v85 + 24) | v86))
      {
        if (v100) {
          goto LABEL_98;
        }
LABEL_157:
        unsigned int v113 = *(_DWORD *)(*(void *)v87 + 192);
LABEL_107:
        llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(v87 + 2), v113);
        unint64_t v85 = v156;
        *(void *)&long long v4 = v159;
        uint64_t v89 = *v90;
        goto LABEL_99;
      }
      int v103 = 0;
LABEL_88:
      uint64_t v104 = *(void *)v87;
      uint64_t v105 = v89 + 16 * v87[4];
      uint64_t v106 = *(unsigned int *)(v105 - 4);
      uint64_t v107 = *(void *)(*(void *)(v105 - 16) + 16 * v106 + 8);
      unint64_t v108 = *(void *)(v57 + 16);
      if (v108 < 8
        || (*(_DWORD *)((v107 & 0xFFFFFFFFFFFFFFF8) + 24) | (v107 >> 1) & 3) > (*(_DWORD *)((v108 & 0xFFFFFFFFFFFFFFF8) + 24) | (v108 >> 1) & 3))
      {
        *(void *)(v57 + 16) = v107;
        if (v103)
        {
LABEL_91:
          *(_DWORD *)(v105 - 4) = v106 + 1;
          if (v106 + 1 == *(_DWORD *)(v89 + 16 * v87[4] - 8))
          {
            uint64_t v109 = *(unsigned int *)(v104 + 192);
            if (v109)
            {
              unsigned int v141 = 1;
              uint64_t v142 = v109 + 1;
              int v143 = (_DWORD *)(v89 + 16 * v109 - 8);
              while (1)
              {
                uint64_t v144 = v143;
                if (v142 == 2) {
                  break;
                }
                int v146 = *v143;
                int v145 = v143[1];
                int v147 = *v143 - 1;
                --v142;
                v143 -= 4;
                if (v145 != v147)
                {
                  unsigned int v141 = v142;
                  goto LABEL_147;
                }
              }
              int v146 = *(_DWORD *)(v89 + 8);
              int v145 = *(_DWORD *)(v89 + 12);
LABEL_147:
              unsigned int v148 = v145 + 1;
              v144[1] = v148;
              if (v148 != v146)
              {
                uint64_t v149 = *(void *)(*((void *)v144 - 1) + 8 * v148);
                if (v109 != v141)
                {
                  do
                  {
                    uint64_t v153 = *v90 + 16 * v141;
                    *(void *)uint64_t v153 = v149 & 0xFFFFFFFFFFFFFFC0;
                    *(_DWORD *)(v153 + 8) = (v149 & 0x3F) + 1;
                    *(_DWORD *)(v153 + 12) = 0;
                    ++v141;
                    uint64_t v149 = *(void *)(v149 & 0xFFFFFFFFFFFFFFC0);
                  }
                  while (v109 != v141);
                  uint64_t v89 = *v90;
                }
                uint64_t v150 = (unint64_t *)(v89 + 16 * v109);
                *uint64_t v150 = v149 & 0xFFFFFFFFFFFFFFC0;
                v150[1] = (v149 & 0x3F) + 1;
              }
            }
          }
        }
      }
      else if (v103)
      {
        goto LABEL_91;
      }
LABEL_95:
      if (++v84 == v59)
      {
        uint64_t v114 = a1[14];
        uint64_t v63 = v154;
        uint64_t v62 = v155;
        if (v114)
        {
          for (uint64_t j = 0; j != v114; ++j)
          {
            uint64_t v116 = *((void *)a1 + 6) + 112 * j;
            uint64_t v119 = *(void **)(v116 + 104);
            unsigned int v117 = (void *)(v116 + 104);
            uint64_t v118 = v119;
            uint64_t v120 = *(v117 - 1);
            unsigned int v121 = *(_DWORD *)(v120 + 8);
            unsigned int v122 = (void *)(*(void *)v120 + 24 * v121);
            if (v119 != v122)
            {
              unsigned int v123 = *(_DWORD *)(v85 + 24) | v86;
              if (((*v118 >> 1) & 3 | *(_DWORD *)((*v118 & 0xFFFFFFFFFFFFFFF8) + 24)) < v123)
              {
                if (v123 < ((*(v122 - 2) >> 1) & 3 | *(_DWORD *)((*(v122 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
                {
                  unsigned int v122 = v118 - 3;
                  do
                  {
                    uint64_t v124 = v122[4];
                    v122 += 3;
                  }
                  while (((v124 >> 1) & 3 | *(_DWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v123);
                }
                *unsigned int v117 = v122;
                if (v122 == (void *)(*(void *)v120 + 24 * v121)
                  || ((*v122 >> 1) & 3 | *(_DWORD *)((*v122 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v123)
                {
                  v122 -= 3;
                  *unsigned int v117 = v122;
                  int v125 = 1;
                }
                else
                {
                  int v125 = 0;
                }
                uint64_t v126 = v122[1];
                unint64_t v127 = *(void *)(v57 + 16);
                if (v127 < 8
                  || (*(_DWORD *)((v126 & 0xFFFFFFFFFFFFFFF8) + 24) | (v126 >> 1) & 3) > (*(_DWORD *)((v127 & 0xFFFFFFFFFFFFFFF8) + 24) | (v127 >> 1) & 3))
                {
                  *(void *)(v57 + 16) = v126;
                }
                if (v125) {
                  *unsigned int v117 = v122 + 3;
                }
              }
            }
          }
        }
        goto LABEL_123;
      }
    }
    uint64_t v99 = (_DWORD *)(v89 - 4);
    unsigned int v100 = *(_DWORD *)(v89 - 4);
    *(void *)&long long v4 = v159;
    if (!v100) {
      goto LABEL_157;
    }
    goto LABEL_106;
  }
LABEL_123:
  for (uint64_t k = 8 * v83; k; k -= 8)
  {
    unint64_t v129 = *(void *)(v57 + 16);
    if (v129 <= 7) {
      unint64_t v129 = v4;
    }
    unint64_t v130 = v129 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v131 = (v129 >> 1) & 3;
    unint64_t v132 = *(void *)(v62 + 8 * v82 - 8 + k) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_DWORD *)(v132 + 24) | 3u) <= (*(_DWORD *)(v130 + 24) | v131)) {
      break;
    }
    unint64_t v133 = *a1;
    unsigned int v134 = *(_DWORD *)(*(void *)(v63 + 8 * v82 - 8 + k) + ((v133 >> 3) & 0x1FFFFFFC));
    if (((v134 >> v133) & 1) == 0)
    {
      *(void *)(v57 + 16) = v132 | 6;
      return;
    }
  }
}

void sub_1CC2D0024(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(112 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v7 = v6;
  unsigned int v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = &v8[112 * v9];
    uint64_t v11 = (uint64_t)(v8 + 8);
    uint64_t v12 = 0x400000000;
    uint64_t v13 = v7;
    do
    {
      uint64_t v14 = v11 - 8;
      *(void *)uint64_t v13 = *(void *)(v11 - 8);
      *((void *)v13 + 1) = v13 + 24;
      *((void *)v13 + 2) = v12;
      if (*(_DWORD *)(v11 + 8))
      {
        unsigned int v22 = v13;
        uint64_t v24 = v11;
        uint64_t v21 = v10;
        uint64_t v20 = v12;
        uint64_t v19 = v11 - 8;
        sub_1CC2D01B8((uint64_t)(v13 + 8), v11);
        uint64_t v14 = v19;
        uint64_t v10 = v21;
        uint64_t v13 = v22;
        uint64_t v12 = v20;
        uint64_t v11 = v24;
      }
      long long v15 = *(_OWORD *)(v14 + 88);
      *((void *)v13 + 13) = *(void *)(v14 + 104);
      *(_OWORD *)(v13 + 88) = v15;
      v13 += 112;
      v11 += 112;
    }
    while ((char *)(v14 + 112) != v10);
    unsigned int v8 = *a1;
    uint64_t v16 = *((unsigned int *)a1 + 2);
    if (v16)
    {
      uint64_t v17 = 112 * v16;
      do
      {
        uint64_t v18 = *(char **)&v8[v17 - 104];
        if (&v8[v17 - 88] != v18)
        {
          uint64_t v23 = v17;
          unsigned int v25 = v8;
          free(v18);
          uint64_t v17 = v23;
          unsigned int v8 = v25;
        }
        v17 -= 112;
      }
      while (v17);
      unsigned int v8 = *a1;
    }
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

uint64_t sub_1CC2D01B8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2 + 16;
    uint64_t v3 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *(const void **)a2, 16 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          uint64_t v16 = a2;
          memmove(*(void **)a1, v3, 16 * v7);
          uint64_t v8 = v15;
          a2 = v16;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 16 * v8), (const void *)(*(void *)a2 + 16 * v8), *(void *)a2 + 16 * v9 - (*(void *)a2 + 16 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v12 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v12);
        uint64_t v3 = *(const void **)v11;
      }
      *(void *)a1 = v3;
      uint64_t v13 = v11;
      uint64_t v14 = *(void *)(v11 + 8);
      uint64_t v6 = (_DWORD *)(v11 + 8);
      *(void *)(a1 + 8) = v14;
      *(void *)uint64_t v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
    }
    _DWORD *v6 = 0;
  }
  return a1;
}

uint64_t sub_1CC2D02F0(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 16);
  uint64_t v3 = *(void *)(result + 8) + 16 * (v2 - 1);
  int v4 = *(_DWORD *)(*(void *)result + 192);
  uint64_t v5 = *(void *)(*(void *)v3 + 8 * *(unsigned int *)(v3 + 12));
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  int v7 = v4 - v2;
  if (v4 == v2)
  {
    unsigned int v8 = (a2 >> 1) & 3;
  }
  else
  {
    unsigned int v8 = (a2 >> 1) & 3;
    do
    {
      unsigned int v17 = 0;
      unint64_t v18 = v5 & 0xFFFFFFFFFFFFFFC0;
      do
      {
        unsigned int v19 = v17;
        uint64_t v20 = *(void *)((v5 & 0xFFFFFFFFFFFFFFC0) + 8 * v17 + 0x60);
        unsigned int v21 = (v20 >> 1) & 3 | *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v17 = v19 + 1;
      }
      while (v21 <= (*(_DWORD *)(v6 + 24) | v8));
      if (v2 >= *(_DWORD *)(result + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v22 = (unint64_t *)(*(void *)(result + 8) + 16 * v2);
      unint64_t *v22 = v18;
      v22[1] = (v5 & 0x3F | ((unint64_t)v19 << 32)) + 1;
      unsigned int v2 = *(_DWORD *)(result + 16) + 1;
      *(_DWORD *)(result + 16) = v2;
      uint64_t v5 = *(void *)(v18 + 8 * v19);
      --v7;
    }
    while (v7);
  }
  unsigned int v9 = 0;
  unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFC0;
  unsigned int v11 = *(_DWORD *)(v6 + 24) | v8;
  do
  {
    unsigned int v12 = v9;
    uint64_t v13 = *(void *)((v5 & 0xFFFFFFFFFFFFFFC0) + 16 * v9 + 8);
    unsigned int v14 = (v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
    unsigned int v9 = v12 + 1;
  }
  while (v14 <= v11);
  if (v2 >= *(_DWORD *)(result + 20)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v15 = (v5 & 0x3F | ((unint64_t)v12 << 32)) + 1;
  uint64_t v16 = (unint64_t *)(*(void *)(result + 8) + 16 * v2);
  unint64_t *v16 = v10;
  v16[1] = v15;
  ++*(_DWORD *)(result + 16);
  return result;
}

uint64_t sub_1CC2D04B8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(unsigned int *)(result + 16);
  uint64_t v4 = v2 + 16 * v3;
  uint64_t v5 = *(void *)(v4 - 16);
  uint64_t v6 = *(void *)(v5 + 16 * (*(_DWORD *)(v4 - 8) - 1) + 8);
  unsigned int v7 = (v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v8 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  if (v7 > v8)
  {
    unsigned int v9 = *(_DWORD *)(v4 - 4);
    do
      uint64_t v10 = *(void *)(v5 + 16 * v9++ + 8);
    while (((v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v8);
    *(_DWORD *)(v4 - 4) = v9 - 1;
    return result;
  }
  *(_DWORD *)(result + 16) = v3 - 1;
  unsigned int v11 = v3 - 2;
  if (v3 == 2)
  {
    uint64_t v12 = *(void *)result;
    uint64_t v13 = *(unsigned int *)(v2 + 12);
    goto LABEL_8;
  }
  uint64_t v21 = (v3 - 3);
  if (v3 != 3)
  {
    uint64_t v25 = *(void *)(*(void *)(v2 + 16 * v21)
                    + 8 * *(unsigned int *)(v2 + 16 * v21 + 12)
                    + 96);
    if (((v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24)) > v8)
    {
LABEL_29:
      unsigned int v26 = (uint64_t *)(v2 + 16 * v11);
      uint64_t v27 = *v26;
      unsigned int v30 = *((_DWORD *)v26 + 3);
      uint64_t v28 = (_DWORD *)v26 + 3;
      unsigned int v29 = v30;
      do
        uint64_t v31 = *(void *)(v27 + 8 * v29++ + 96);
      while (((v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v8);
      _DWORD *v28 = v29 - 1;
      goto LABEL_17;
    }
    uint64_t v32 = 16 * v21;
    while (1)
    {
      *(_DWORD *)(result + 16) = v11;
      uint64_t v33 = v32 - 16;
      if (v32 == 16) {
        break;
      }
      uint64_t v34 = *(void *)(*(void *)(v2 + v32 - 16) + 8 * *(unsigned int *)(v2 + v32 - 4) + 96);
      unsigned int v35 = (v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24);
      --v11;
      uint64_t v32 = v33;
      if (v35 > v8) {
        goto LABEL_29;
      }
    }
  }
  uint64_t v12 = *(void *)result;
  uint64_t v13 = *(unsigned int *)(v2 + 12);
  uint64_t v22 = *(void *)(*(void *)result + 8 * v13 + 96);
  if (((v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24)) > v8)
  {
    unsigned int v23 = *(_DWORD *)(v2 + 28);
    do
      uint64_t v24 = *(void *)(*(void *)(v2 + 16) + 8 * v23++ + 96);
    while (((v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v8);
    *(_DWORD *)(v2 + 28) = v23 - 1;
LABEL_17:
    return sub_1CC2D02F0(result, a2);
  }
LABEL_8:
  uint64_t v14 = v12 + 8;
  uint64_t v15 = *(unsigned int *)(v12 + 196);
  if (v13 != v15)
  {
    while (1)
    {
      uint64_t v16 = *(void *)(v14 + 8 * v13 + 88);
      if (((v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24)) > v8) {
        break;
      }
      uint64_t v13 = (v13 + 1);
      if (v15 == v13)
      {
        uint64_t v13 = *(unsigned int *)(v12 + 196);
        break;
      }
    }
  }
  int v17 = *(_DWORD *)(v12 + 192);
  *(_DWORD *)(result + 16) = 0;
  int v18 = *(_DWORD *)(result + 20);
  if (v17)
  {
    if (!v18) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v19 = v15 | (v13 << 32);
    *(void *)uint64_t v2 = v14;
  }
  else
  {
    if (!v18) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v19 = v15 | (v13 << 32);
    *(void *)uint64_t v2 = v12;
  }
  *(void *)(v2 + 8) = v19;
  int v20 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v20 + 1;
  if (v20 != -1 && *(_DWORD *)(*(void *)(result + 8) + 12) < *(_DWORD *)(*(void *)(result + 8) + 8)) {
    goto LABEL_17;
  }
  return result;
}

void sub_1CC2D07C4(uint64_t a1)
{
}

void llvm::createInterleavedAccessPass(llvm *this)
{
}

uint64_t sub_1CC2D08A0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCD290;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260C4B8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCD298, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC2D07C4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCCD298, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC2D0954()
{
}

void sub_1CC2D0994(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC2D09CC()
{
  return "Interleaved Access Pass";
}

void sub_1CC2D09DC(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CC2D0A44(uint64_t a1, uint64_t a2)
{
  v273[1] = *MEMORY[0x1E4F143B8];
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1);
  if (!AnalysisPass
    || ((v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID)) != 0? (BOOL v6 = byte_1EBCCD250 == 0): (BOOL v6 = 1), v6))
  {
LABEL_7:
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  uint64_t v9 = v5;
  uint64_t v10 = *(uint64_t **)(a1 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_12:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::DominatorTreeWrapperPass::ID)+ 32;
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v9 + 112) + 16))(*(void *)(v9 + 112), a2);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 120))(v14);
  *(void *)(a1 + 40) = v15;
  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(void))(*(void *)v15 + 1256))();
  uint64_t v16 = v238;
  uint64_t v236 = v238;
  uint64_t v237 = 0x2000000000;
  uint64_t v17 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v17) {
      goto LABEL_7;
    }
    uint64_t v19 = i - 24;
    if (!i) {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(void *)(v19 + 48);
    if (v20 != v19 + 40) {
      break;
    }
  }
  int v7 = 0;
  int64x2_t v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v228 = v21;
  while (2)
  {
    if (v20) {
      uint64_t v22 = v20 - 24;
    }
    else {
      uint64_t v22 = 0;
    }
    int v23 = *(unsigned __int8 *)(v22 + 16);
    if (v23 == 60) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = 0;
    }
    if (!v20 || v23 != 60) {
      goto LABEL_35;
    }
    int v25 = *(unsigned __int8 *)(v24 + 16);
    if (v25 == 60 || v25 == 61)
    {
      __int16 v26 = *(_WORD *)(v24 + 18);
      if (v26 & 0x380) != 0 || (v26) {
        goto LABEL_33;
      }
    }
    else if (v25 - 63) < 3 || (*(_WORD *)(v24 + 18))
    {
LABEL_33:
      BOOL v27 = 0;
      int v23 = 60;
      goto LABEL_34;
    }
    if (*(unsigned char *)(*(void *)v24 + 8) == 19) {
      goto LABEL_33;
    }
    int v251 = v253;
    uint64_t v252 = 0x400000000;
    unint64_t v248 = v250;
    uint64_t v249 = 0x400000000;
    uint64_t v242 = 1;
    v21.i32[1] = v228.i32[1];
    int64x2_t v243 = v228;
    int64x2_t v244 = v228;
    uint64_t v245 = v247;
    uint64_t v246 = 0x400000000;
    uint64_t v39 = *(void *)(v24 + 8);
    unsigned int v227 = v16;
    if (!v39)
    {
      uint64_t v49 = 0;
      uint64_t v48 = 0;
      goto LABEL_100;
    }
    do
    {
      uint64_t v40 = *(void *)(v39 + 24);
      unsigned int v41 = *(unsigned __int8 *)(v40 + 16);
      if (v40 && v41 == 89)
      {
        if (*(unsigned char *)(*(void *)(v40 - 32) + 16) != 16) {
          goto LABEL_105;
        }
        uint64_t v42 = v249;
        if (v249 >= (unint64_t)HIDWORD(v249)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v43 = &v248;
LABEL_89:
        *((void *)*v43 + v42) = v40;
        ++*((_DWORD *)v43 + 2);
        goto LABEL_90;
      }
      if (v40) {
        BOOL v44 = v41 >= 0x1C;
      }
      else {
        BOOL v44 = 0;
      }
      if (!v44 || v41 - 59 < 0xFFFFFFEE)
      {
LABEL_84:
        BOOL v27 = 0;
        if (!v40 || v41 != 91) {
          goto LABEL_106;
        }
        if (*(unsigned __int8 *)(*(void *)(v40 - 32) + 16) - 11 > 1) {
          goto LABEL_105;
        }
        uint64_t v42 = v252;
        if (v252 >= (unint64_t)HIDWORD(v252)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v43 = &v251;
        goto LABEL_89;
      }
      uint64_t v46 = *(void *)(v40 + 8);
      uint64_t v47 = v46;
      if (v46)
      {
        do
        {
          if (*(unsigned char *)(*(void *)(v47 + 24) + 16) != 91) {
            goto LABEL_84;
          }
          uint64_t v47 = *(void *)(v47 + 8);
        }
        while (v47);
        do
        {
          uint64_t v257 = *(void **)(v46 + 24);
          sub_1CD4B43C4((uint64_t)&v242, (uint64_t *)&v257);
          uint64_t v46 = *(void *)(v46 + 8);
        }
        while (v46);
      }
LABEL_90:
      uint64_t v39 = *(void *)(v39 + 8);
    }
    while (v39);
    uint64_t v48 = v252;
    uint64_t v49 = v246;
LABEL_100:
    if (!(v48 | v49)
      || ((uint64_t v50 = (char *)v251, v51 = v245, v48) ? (v52 = (uint64_t **)v251) : (v52 = (uint64_t **)v245),
          uint64_t v53 = *v52,
          uint64_t v54 = *((unsigned int *)v53 + 18),
          v54 < 2))
    {
LABEL_105:
      BOOL v27 = 0;
      goto LABEL_106;
    }
    BOOL v27 = 0;
    unsigned int v55 = *(_DWORD *)(a1 + 48);
    if (v55 >= 2)
    {
      unint64_t v56 = *(unsigned int *)(*(void *)v24 + 32);
      if (2 * v54 <= v56)
      {
        unsigned int v57 = 2;
        while (!v57)
        {
LABEL_126:
          BOOL v27 = 0;
          if (++v57 > v55 || v54 * (unint64_t)v57 > v56) {
            goto LABEL_106;
          }
        }
        int v58 = 0;
LABEL_120:
        uint64_t v59 = (int *)v53[8];
        int v60 = v58;
        uint64_t v61 = *((unsigned int *)v53 + 18);
        do
        {
          int v63 = *v59++;
          int v62 = v63;
          if ((v63 & 0x80000000) == 0 && v60 != v62)
          {
            if (++v58 != v57) {
              goto LABEL_120;
            }
            goto LABEL_126;
          }
          v60 += v57;
          --v61;
        }
        while (v61);
        uint64_t v239 = v241;
        uint64_t v240 = 0x400000000;
        uint64_t v64 = *v53;
        unsigned int v205 = v57;
        unsigned int v65 = 0;
        if (v48)
        {
          uint64_t v66 = (char *)v251 + 8 * v48;
          do
          {
            unint64_t v67 = *(void **)v50;
            if (**(void **)v50 != v64) {
              goto LABEL_265;
            }
            int v68 = 0;
            unint64_t v69 = (int *)v67[8];
            uint64_t v70 = *((unsigned int *)v67 + 18);
            while (v70)
            {
              uint64_t v71 = v69;
              int v72 = v68;
              uint64_t v73 = v70;
              while (1)
              {
                int v75 = *v71++;
                int v74 = v75;
                if ((v75 & 0x80000000) == 0 && v72 != v74) {
                  break;
                }
                v72 += v57;
                if (!--v73) {
                  goto LABEL_142;
                }
              }
              if (++v68 == v57) {
                goto LABEL_265;
              }
            }
            int v68 = 0;
LABEL_142:
            if (v65 >= HIDWORD(v240)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v239 + v65) = v68;
            unsigned int v65 = v240 + 1;
            LODWORD(v240) = v240 + 1;
            v50 += 8;
          }
          while (v50 != v66);
          uint64_t v51 = v245;
          uint64_t v49 = v246;
        }
        if (v49)
        {
          unsigned int v95 = &v51[v49];
          if (v57 <= 1) {
            int v96 = 1;
          }
          else {
            int v96 = v57;
          }
          while (1)
          {
            uint64_t v97 = (void *)*v51;
            if (*(void *)*v51 != v64) {
              break;
            }
            int v98 = 0;
            while (*((_DWORD *)v97 + 18))
            {
              uint64_t v99 = (int *)v97[8];
              int v100 = v98;
              uint64_t v101 = *((unsigned int *)v97 + 18);
              while (1)
              {
                int v103 = *v99++;
                int v102 = v103;
                if ((v103 & 0x80000000) == 0 && v100 != v102) {
                  break;
                }
                v100 += v57;
                if (!--v101) {
                  goto LABEL_202;
                }
              }
              if (++v98 == v96) {
                goto LABEL_265;
              }
            }
            int v98 = 0;
LABEL_202:
            uint64_t v104 = *(v97 - 8);
            int v105 = *(_DWORD *)(v104 + 20);
            if ((v105 & 0x40000000) != 0) {
              uint64_t v106 = *(void **)(v104 - 8);
            }
            else {
              uint64_t v106 = (void *)(v104 - 32 * (v105 & 0x7FFFFFF));
            }
            if (*v106 == v24)
            {
              if (v65 >= HIDWORD(v240)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v239 + v65) = v98;
              unsigned int v65 = v240 + 1;
              LODWORD(v240) = v240 + 1;
              uint64_t v104 = *(v97 - 8);
              int v105 = *(_DWORD *)(v104 + 20);
            }
            if ((v105 & 0x40000000) != 0) {
              uint64_t v107 = *(void *)(v104 - 8);
            }
            else {
              uint64_t v107 = v104 - 32 * (v105 & 0x7FFFFFF);
            }
            if (*(void *)(v107 + 32) == v24)
            {
              if (v65 >= HIDWORD(v240)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v239 + v65) = v98;
              unsigned int v65 = v240 + 1;
              LODWORD(v240) = v240 + 1;
            }
            if (++v51 == v95) {
              goto LABEL_218;
            }
          }
LABEL_265:
          BOOL v27 = 0;
LABEL_348:
          if (v239 != v241) {
            free(v239);
          }
          goto LABEL_106;
        }
LABEL_218:
        uint64_t v208 = v24;
        if (!v249) {
          goto LABEL_300;
        }
        unsigned int v108 = 0;
        uint64_t v216 = 0;
        uint64_t v109 = (const llvm::Instruction **)v248;
        uint64_t v211 = (char *)v248 + 8 * v249;
        int v212 = v252;
        uint64_t v206 = (const llvm::Value **)v251;
        uint64_t v229 = (const llvm::Value **)((char *)v251 + 8 * v252);
        int v231 = 0;
        uint64_t v232 = 0;
        unsigned int v233 = 0;
        unsigned int v204 = (uint64_t ***)v248;
        while (1)
        {
          uint64_t v218 = v109;
          int v110 = *v109;
          v254[0] = (uint64_t)v110;
          uint64_t v111 = *((void *)v110 - 4);
          unsigned int v112 = *(_DWORD *)(v111 + 32);
          uint64_t v113 = v112 > 0x40
               ? **(void **)(v111 + 24)
               : (uint64_t)(*(void *)(v111 + 24) << -(char)v112) >> -(char)v112;
          unsigned int v220 = v110 >> 4;
          if (v212) {
            break;
          }
LABEL_255:
          if (!v108)
          {
            unsigned int v134 = v216;
LABEL_264:
            MEMORY[0x1D25D9CD0](v134, 8);
            goto LABEL_265;
          }
          unsigned int v131 = (v108 - 1) & (v220 ^ (v110 >> 9));
          unint64_t v132 = (const llvm::Instruction *)*((void *)v216 + 3 * v131);
          if (v110 != v132)
          {
            int v133 = 1;
            do
            {
              unsigned int v134 = v216;
              if (v132 == (const llvm::Instruction *)-4096) {
                goto LABEL_264;
              }
              unsigned int v135 = v131 + v133++;
              unsigned int v131 = v135 & (v108 - 1);
              unint64_t v132 = (const llvm::Instruction *)*((void *)v216 + 3 * v131);
            }
            while (v110 != v132);
          }
          uint64_t v109 = v218 + 1;
          uint64_t v24 = v208;
          if (v218 + 1 == (const llvm::Instruction **)v211)
          {
            uint64_t v136 = ***v204;
            uint64_t v257 = v259;
            uint64_t v258 = 0x200000000;
            uint64_t v263 = v136;
            uint64_t v264 = &v272;
            int v265 = v273;
            uint64_t v266 = 0;
            int v267 = 0;
            __int16 v268 = 512;
            char v269 = 7;
            uint64_t v261 = 0;
            unsigned int v262 = 0;
            uint64_t v270 = 0;
            uint64_t v271 = 0;
            unsigned int v272 = &unk_1F2616E88;
            v273[0] = &unk_1F2617008;
            if (v232)
            {
              uint64_t v137 = 24 * v108;
              unsigned int v138 = v216;
              while ((*(void *)v138 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                unsigned int v138 = (llvm::Type *)((char *)v138 + 24);
                v137 -= 24;
                if (!v137) {
                  goto LABEL_270;
                }
              }
            }
            else
            {
LABEL_270:
              unsigned int v138 = (llvm::Type *)((char *)v216 + 24 * v108);
            }
            if (v138 != (llvm::Type *)((char *)v216 + 24 * v108))
            {
              unint64_t v139 = *(llvm::ValueAsMetadata **)v138;
              uint64_t v221 = *((int *)v138 + 4);
              int v225 = (unsigned __int8 *)*((void *)v138 + 1);
              uint64_t v261 = *(void *)(*(void *)v138 + 40);
              unsigned int v262 = (void *)((char *)v139 + 24);
              unint64_t v140 = (unsigned __int8 *)*((void *)v139 + 6);
              unint64_t v234 = v140;
              if (v140)
              {
                llvm::MetadataTracking::track((uint64_t)&v234, v140, 2);
                uint64_t v141 = (uint64_t)v234;
              }
              else
              {
                uint64_t v141 = 0;
              }
              sub_1CB8461A4((uint64_t)&v257, 0, v141);
              if (!v234) {
                goto LABEL_275;
              }
              int v148 = *v234;
              if ((v148 - 4) > 0x1E)
              {
                if ((v148 - 3) >= 0xFFFFFFFE) {
                  uint64_t v151 = v234;
                }
                else {
                  uint64_t v151 = 0;
                }
                if ((v148 - 3) < 0xFFFFFFFE)
                {
                  if (v148 == 3) {
                    *((void *)v234 + 1) = 0;
                  }
LABEL_275:
                  __int16 v256 = 257;
                  int v143 = *(llvm::ConstantInt **)(*(void *)v263 + 1984);
                  unsigned int v144 = *(_DWORD *)(*(void *)v263 + 1992);
                  unsigned int v235 = v144 >> 8;
                  if (v144 >> 8 <= 0x40)
                  {
                    if (v144 <= 0xFF) {
                      unint64_t v145 = 0;
                    }
                    else {
                      unint64_t v145 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v144) + 63);
                    }
                    unint64_t v234 = (unsigned __int8 *)(v145 & v221);
                    int v146 = (unsigned __int8 *)llvm::ConstantInt::get(v143, (llvm::LLVMContext *)&v234, v142);
                    if (v235 >= 0x41 && v234)
                    {
                      uint64_t v222 = v146;
                      MEMORY[0x1D25D9CB0](v234, 0x1000C8000313F17);
                      int v146 = v222;
                    }
                    int v147 = sub_1CB8445F4((uint64_t)&v257, v225, v146, (uint64_t)v254);
                    llvm::Value::doRAUW(v139, v147, (llvm::Value *)1);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                  }
                  operator new[]();
                }
                unint64_t v150 = (unint64_t)(v151 + 8);
              }
              else
              {
                if ((v234[1] & 0x7F) != 2 && !*((_DWORD *)v234 + 3)) {
                  goto LABEL_275;
                }
                uint64_t v149 = *((void *)v234 + 2);
                if ((v149 & 4) == 0) {
                  goto LABEL_275;
                }
                unint64_t v150 = v149 & 0xFFFFFFFFFFFFFFF8;
                if (!v150) {
                  goto LABEL_275;
                }
              }
              v254[0] = (uint64_t)&v234;
              sub_1CC5FA668(v150 + 16, v254);
              goto LABEL_275;
            }
            MEMORY[0x1D25D9CD0](v231, 8);
LABEL_300:
            int v207 = v246;
            if (!v246)
            {
LABEL_346:
              if ((*(uint64_t (**)(void, uint64_t, void *, void, void *, void, void))(**(void **)(a1 + 40) + 1264))(*(void *)(a1 + 40), v24, v251, v252, v239, v240, v205))
              {
                sub_1CD516E14((uint64_t)&v236, (uint64_t)v236 + 8 * v237, (char *)v251, (char *)v251 + 8 * v252);
                if (v237 >= (unint64_t)HIDWORD(v237)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v236 + v237) = v208;
                LODWORD(v237) = v237 + 1;
                BOOL v27 = 1;
              }
              else
              {
                BOOL v27 = (v249 | v207) != 0;
              }
              goto LABEL_348;
            }
            uint64_t v152 = (llvm::ValueAsMetadata **)v245;
            uint64_t v210 = (llvm::ValueAsMetadata **)((char *)v245 + 8 * v246);
            while (2)
            {
              uint64_t v215 = v152;
              uint64_t v153 = *v152;
              uint64_t v154 = *((void *)v153 - 8);
              uint64_t v155 = **(llvm::PoisonValue ***)(v154 - 64);
              uint64_t v217 = (llvm::Type *)*((unsigned int *)v153 + 18);
              uint64_t v219 = (void *)*((void *)v153 + 8);
              unint64_t v156 = (char *)operator new(0xA8uLL);
              *((_DWORD *)v156 + 21) = *((_DWORD *)v156 + 21) & 0x38000000 | 2;
              *(void *)unint64_t v156 = 0;
              *((void *)v156 + 1) = 0;
              *((void *)v156 + 2) = 0;
              *((void *)v156 + 3) = v156 + 64;
              *((void *)v156 + 4) = 0;
              *((void *)v156 + 5) = 0;
              *((void *)v156 + 6) = 0;
              *((void *)v156 + 7) = v156 + 64;
              uint64_t v226 = (uint64_t ***)(v156 + 64);
              int v213 = v156;
              uint64_t v230 = v154;
              long long v157 = *(uint64_t ***)(v154 - 64);
              uint64_t v159 = (uint64_t **)llvm::PoisonValue::get(v155, v158);
              if ((*((unsigned char *)v153 + 23) & 0x10) != 0)
              {
                uint64_t v160 = ***(void ***)v153;
                uint64_t v161 = *(void *)(v160 + 152);
                uint64_t v162 = *(unsigned int *)(v160 + 168);
                if (!v162) {
                  goto LABEL_309;
                }
                LODWORD(v163) = (v162 - 1) & ((v153 >> 4) ^ (v153 >> 9));
                uint64_t v164 = (llvm::ValueAsMetadata **)(v161 + 16 * v163);
                int v165 = *v164;
                if (*v164 != v153)
                {
                  int v166 = 1;
                  while (v165 != (llvm::ValueAsMetadata *)-4096)
                  {
                    int v167 = v163 + v166++;
                    uint64_t v163 = v167 & (v162 - 1);
                    int v165 = *(llvm::ValueAsMetadata **)(v161 + 16 * v163);
                    if (v165 == v153)
                    {
                      uint64_t v164 = (llvm::ValueAsMetadata **)(v161 + 16 * v163);
                      goto LABEL_310;
                    }
                  }
LABEL_309:
                  uint64_t v164 = (llvm::ValueAsMetadata **)(v161 + 16 * v162);
                }
LABEL_310:
                unsigned int v168 = v164[1];
                uint64_t v171 = *(void *)v168;
                uint64_t v170 = (char *)v168 + 16;
                uint64_t v169 = v171;
              }
              else
              {
                uint64_t v169 = 0;
                uint64_t v170 = &byte_1CFBCE98E;
              }
              __int16 v260 = 261;
              uint64_t v257 = v170;
              uint64_t v258 = v169;
              llvm::ShuffleVectorInst::ShuffleVectorInst(v226, v157, v159, v219, v217, (const char **)&v257, (uint64_t)v153);
              uint64_t v172 = (char *)operator new(0xA8uLL);
              *((_DWORD *)v172 + 21) = *((_DWORD *)v172 + 21) & 0x38000000 | 2;
              *(void *)uint64_t v172 = 0;
              *((void *)v172 + 1) = 0;
              *((void *)v172 + 2) = 0;
              *((void *)v172 + 3) = v172 + 64;
              *((void *)v172 + 4) = 0;
              *((void *)v172 + 5) = 0;
              *((void *)v172 + 6) = 0;
              *((void *)v172 + 7) = v172 + 64;
              uint64_t v223 = (uint64_t ***)(v172 + 64);
              uint64_t v173 = *(llvm::PoisonValue ***)(v230 - 32);
              uint64_t v175 = (uint64_t **)llvm::PoisonValue::get(*v173, v174);
              if ((*((unsigned char *)v153 + 23) & 0x10) != 0)
              {
                uint64_t v176 = ***(void ***)v153;
                uint64_t v177 = *(void *)(v176 + 152);
                uint64_t v178 = *(unsigned int *)(v176 + 168);
                if (!v178) {
                  goto LABEL_318;
                }
                LODWORD(v179) = (v178 - 1) & ((v153 >> 4) ^ (v153 >> 9));
                unsigned int v180 = (llvm::ValueAsMetadata **)(v177 + 16 * v179);
                uint64_t v181 = *v180;
                if (*v180 != v153)
                {
                  int v182 = 1;
                  while (v181 != (llvm::ValueAsMetadata *)-4096)
                  {
                    int v183 = v179 + v182++;
                    uint64_t v179 = v183 & (v178 - 1);
                    uint64_t v181 = *(llvm::ValueAsMetadata **)(v177 + 16 * v179);
                    if (v181 == v153)
                    {
                      unsigned int v180 = (llvm::ValueAsMetadata **)(v177 + 16 * v179);
                      goto LABEL_319;
                    }
                  }
LABEL_318:
                  unsigned int v180 = (llvm::ValueAsMetadata **)(v177 + 16 * v178);
                }
LABEL_319:
                unsigned int v184 = v180[1];
                uint64_t v187 = *(void *)v184;
                uint64_t v186 = (char *)v184 + 16;
                uint64_t v185 = v187;
              }
              else
              {
                uint64_t v185 = 0;
                uint64_t v186 = &byte_1CFBCE98E;
              }
              __int16 v260 = 261;
              uint64_t v257 = v186;
              uint64_t v258 = v185;
              llvm::ShuffleVectorInst::ShuffleVectorInst(v223, (uint64_t **)v173, v175, v219, v217, (const char **)&v257, (uint64_t)v153);
              char v188 = *(unsigned char *)(v230 + 16);
              if ((*(unsigned char *)(v230 + 23) & 0x10) != 0)
              {
                uint64_t v189 = ***(void ***)v230;
                uint64_t v190 = *(void *)(v189 + 152);
                uint64_t v191 = *(unsigned int *)(v189 + 168);
                if (!v191) {
                  goto LABEL_327;
                }
                LODWORD(v192) = (v191 - 1) & ((v230 >> 4) ^ (v230 >> 9));
                uint64_t v193 = (uint64_t *)(v190 + 16 * v192);
                uint64_t v194 = *v193;
                if (*v193 != v230)
                {
                  int v195 = 1;
                  while (v194 != -4096)
                  {
                    int v196 = v192 + v195++;
                    uint64_t v192 = v196 & (v191 - 1);
                    uint64_t v194 = *(void *)(v190 + 16 * v192);
                    if (v194 == v230)
                    {
                      uint64_t v193 = (uint64_t *)(v190 + 16 * v192);
                      goto LABEL_328;
                    }
                  }
LABEL_327:
                  uint64_t v193 = (uint64_t *)(v190 + 16 * v191);
                }
LABEL_328:
                unsigned int v197 = (void *)v193[1];
                uint64_t v200 = *v197;
                uint64_t v199 = (char *)(v197 + 2);
                uint64_t v198 = v200;
              }
              else
              {
                uint64_t v198 = 0;
                uint64_t v199 = &byte_1CFBCE98E;
              }
              __int16 v260 = 261;
              uint64_t v257 = v199;
              uint64_t v258 = v198;
              uint64_t v201 = llvm::BinaryOperator::Create(v188 - 28, v226, (uint64_t)v223, (const char **)&v257, (uint64_t)v153);
              llvm::Instruction::copyIRFlags((uint64_t)v201, v230, 1);
              llvm::Value::doRAUW(v153, v201, (llvm::Value *)1);
              uint64_t v255 = 0;
              llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v153, 0, 0, (uint64_t)v254);
              if (v255 == v254)
              {
                (*(void (**)(uint64_t *))(v254[0] + 32))(v254);
                BOOL v203 = v213;
                int v202 = v215;
              }
              else
              {
                BOOL v203 = v213;
                int v202 = v215;
                if (v255) {
                  (*(void (**)(void))(*v255 + 40))();
                }
              }
              if (*v203 == v24)
              {
                if (v252 >= (unint64_t)HIDWORD(v252)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v251 + v252) = v226;
                LODWORD(v252) = v252 + 1;
              }
              if (*(void *)v172 == v24)
              {
                if (v252 >= (unint64_t)HIDWORD(v252)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v251 + v252) = v223;
                LODWORD(v252) = v252 + 1;
              }
              uint64_t v152 = v202 + 1;
              if (v152 == v210) {
                goto LABEL_346;
              }
              continue;
            }
          }
        }
        uint64_t v214 = v113;
        unsigned int v209 = (v110 >> 4) ^ (v110 >> 9);
        uint64_t v114 = v206;
        while (2)
        {
          unsigned int v224 = v108;
          while (1)
          {
            uint64_t v115 = *v114;
            uint64_t v116 = v110;
            if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 32), *v114, v110)) {
              break;
            }
            ++v114;
            int v110 = v116;
            if (v114 == v229)
            {
              unsigned int v108 = v224;
              goto LABEL_255;
            }
          }
          uint64_t v257 = v259;
          unsigned int v117 = (const void *)*((void *)v115 + 8);
          uint64_t v118 = *((unsigned int *)v115 + 18);
          uint64_t v258 = 0x400000000;
          if (v118 >= 5) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v118)
          {
            int v119 = v118;
            memcpy(v259, v117, 4 * v118);
            int v120 = v258;
          }
          else
          {
            int v120 = 0;
            int v119 = 0;
          }
          uint64_t v121 = (v120 + v119);
          LODWORD(v258) = v121;
          unsigned int v108 = v224;
          int v110 = v116;
          if (v121)
          {
            uint64_t v122 = 0;
            while (v214 != *((_DWORD *)v257 + v122))
            {
              if (v121 == ++v122) {
                goto LABEL_236;
              }
            }
            uint64_t v126 = sub_1CD516DA4((uint64_t)&v231, v254);
            int v110 = v116;
            v126[1] = v115;
            *((_DWORD *)v126 + 4) = v122;
            uint64_t v216 = v231;
            unsigned int v108 = v233;
            if (!v233)
            {
LABEL_240:
              BOOL v125 = 0;
              goto LABEL_241;
            }
          }
          else
          {
LABEL_236:
            if (!v224) {
              goto LABEL_240;
            }
          }
          unsigned int v123 = (v108 - 1) & v209;
          uint64_t v124 = (const llvm::Instruction *)*((void *)v216 + 3 * v123);
          if (v110 == v124)
          {
            BOOL v125 = 1;
          }
          else
          {
            int v129 = 1;
            while (1)
            {
              BOOL v125 = v124 != (const llvm::Instruction *)-4096;
              if (v124 == (const llvm::Instruction *)-4096) {
                break;
              }
              unsigned int v130 = v123 + v129++;
              unsigned int v123 = v130 & (v108 - 1);
              uint64_t v124 = (const llvm::Instruction *)*((void *)v216 + 3 * v123);
              int v110 = v116;
              if (v116 == v124) {
                goto LABEL_241;
              }
            }
            int v110 = v116;
          }
LABEL_241:
          if (v257 != v259)
          {
            unsigned int v127 = v108;
            free(v257);
            int v110 = v116;
            unsigned int v108 = v127;
          }
          ++v114;
          char v128 = v114 == v229 || v125;
          if (v128) {
            goto LABEL_255;
          }
          continue;
        }
      }
    }
LABEL_106:
    if (v245 != v247) {
      free(v245);
    }
    uint64_t v16 = v227;
    if ((v242 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v243.i64[0], 8);
    }
    if (v248 != v250) {
      free(v248);
    }
    if (v251 != v253) {
      free(v251);
    }
    int v23 = *(unsigned __int8 *)(v22 + 16);
LABEL_34:
    v7 |= v27;
LABEL_35:
    if (v23 == 61) {
      uint64_t v28 = v22;
    }
    else {
      uint64_t v28 = 0;
    }
    if (v20 && v23 == 61)
    {
      int v29 = *(unsigned __int8 *)(v28 + 16);
      if (v29 == 60 || v29 == 61)
      {
        __int16 v30 = *(_WORD *)(v28 + 18);
        if (v30 & 0x380) != 0 || (v30) {
          goto LABEL_52;
        }
      }
      else if (v29 - 63) < 3 || (*(_WORD *)(v28 + 18))
      {
        goto LABEL_52;
      }
      int v31 = 0;
      uint64_t v32 = *(void *)(v28 - 64);
      if (v32 && *(unsigned char *)(v32 + 16) == 91)
      {
        uint64_t v33 = *(void *)(v32 + 8);
        if (!v33 || *(void *)(v33 + 8) || *(unsigned char *)(*(void *)v32 + 8) == 19) {
          goto LABEL_52;
        }
        unsigned int v34 = *(_DWORD *)(v32 + 72);
        unsigned int v35 = *(_DWORD *)(a1 + 48);
        if (v34 < 4 || v35 < 2) {
          goto LABEL_52;
        }
        uint64_t v76 = *(void *)(v32 + 64);
        unsigned int v77 = 2;
        do
        {
          int v78 = v34 / v77;
          v21.i32[0] = v34 / v77;
          *(int8x8_t *)v21.i8 = vcnt_s8(*(int8x8_t *)v21.i8);
          v21.i16[0] = vaddlv_u8(*(uint8x8_t *)v21.i8);
          BOOL v79 = v34 % v77 || v77 > v34;
          if (!v79 && v21.i32[0] <= 1u) {
            break;
          }
LABEL_155:
          int v31 = 0;
          ++v77;
        }
        while (v77 <= v35);
        uint64_t v81 = 0;
        unsigned int v82 = v77;
        while (v78 == 1)
        {
          int v84 = 0;
          int v83 = 0;
LABEL_171:
          int v90 = *(_DWORD *)(v76 + 4 * v81);
          if (v90 < 0)
          {
            int v91 = *(_DWORD *)(v76 + 4 * ((v78 - 1) * v77 + v81));
            int v92 = v84 - v78 + v83;
            if (v83) {
              int v93 = v92 + 1;
            }
            else {
              int v93 = 0;
            }
            if (v91 >= 0) {
              int v90 = v91 - (v78 - 1);
            }
            else {
              int v90 = v93;
            }
          }
          if (v90 < 0 || v90 + v78 > (2 * *(_DWORD *)(**(void **)(v32 - 64) + 32))) {
            goto LABEL_182;
          }
          ++v81;
          ++v82;
          if (v81 == v77) {
            goto LABEL_183;
          }
        }
        int v83 = 0;
        int v84 = 0;
        unsigned int v85 = v82;
        unsigned int v86 = v81;
        uint64_t v87 = (v78 - 1);
        while (1)
        {
          int v88 = *(_DWORD *)(v76 + 4 * v86);
          int v89 = *(_DWORD *)(v76 + 4 * v85);
          if ((v88 & 0x80000000) == 0 && (v89 & 0x80000000) == 0 && v88 + 1 != v89) {
            break;
          }
          if (v88 >= 0 && v89 < 0)
          {
            int v84 = *(_DWORD *)(v76 + 4 * v86);
            int v83 = 1;
          }
          if (v88 < 0)
          {
            if (v83)
            {
              ++v83;
              if ((v89 & 0x80000000) == 0 && v83 + v84 != v89) {
                break;
              }
            }
          }
          v86 += v77;
          v85 += v77;
          if (!--v87) {
            goto LABEL_171;
          }
        }
LABEL_182:
        if (v81 != v77) {
          goto LABEL_155;
        }
LABEL_183:
        if ((*(unsigned int (**)(void, uint64_t, void))(**(void **)(a1 + 40) + 1272))(*(void *)(a1 + 40), v28, *(void *)(v28 - 64)))
        {
          if (v237 >= (unint64_t)HIDWORD(v237)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v236 + v237) = v28;
          unsigned int v94 = v237 + 1;
          LODWORD(v237) = v94;
          if (v94 >= HIDWORD(v237)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v236 + v94) = v32;
          LODWORD(v237) = v237 + 1;
          int v31 = 1;
        }
        else
        {
LABEL_52:
          int v31 = 0;
        }
      }
      v7 |= v31;
    }
    uint64_t v20 = *(void *)(v20 + 8);
    uint64_t v37 = i - 24;
    if (!i) {
      uint64_t v37 = 0;
    }
    if (v20 != v37 + 40)
    {
LABEL_61:
      if (i == v17) {
        goto LABEL_355;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v17) {
      break;
    }
    uint64_t v38 = i - 24;
    if (!i) {
      uint64_t v38 = 0;
    }
    uint64_t v20 = *(void *)(v38 + 48);
    if (v20 != v38 + 40) {
      goto LABEL_61;
    }
  }
LABEL_355:
  if (v237) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v236 != v16) {
    free(v236);
  }
  return v7 & 1;
}

uint64_t sub_1CC2D2164()
{
  v4.n128_u64[0] = (unint64_t)"Enable lowering interleaved accesses to intrinsics";
  v4.n128_u64[1] = 50;
  char v2 = 1;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD4209D8((llvm::cl::Option *)&unk_1EBCCD1D0, "lower-interleaved-accesses", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCD1D0, &dword_1CB82C000);
}

void sub_1CC2D21F0(llvm *a1)
{
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeMemorySSAWrapperPassPass(a1, v2);
  operator new();
}

void llvm::createInterleavedLoadCombinePass(llvm *this)
{
}

uint64_t sub_1CC2D22D4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCD360;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260C558;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCD368, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC2D21F0;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCCD368, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC2D2384()
{
}

void sub_1CC2D23C4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC2D23FC()
{
  return "Interleaved Load Combine Pass";
}

void sub_1CC2D240C(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CC2D245C(uint64_t a1, const llvm::Function *a2)
{
  v294[34] = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCCD320
    && (AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1)) != 0&& (uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID)) != 0)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(uint64_t **)(a1 + 8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v10 == v11)
    {
LABEL_9:
      uint64_t v12 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v10 != &llvm::DominatorTreeWrapperPass::ID)
      {
        v10 += 16;
        if (v10 == v11) {
          goto LABEL_9;
        }
      }
      uint64_t v12 = *(void *)(v10 + 8);
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::DominatorTreeWrapperPass::ID)
        + 32;
    uint64_t v14 = *(uint64_t **)(a1 + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    if (v15 == v16)
    {
LABEL_14:
      uint64_t v17 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v15 != &llvm::MemorySSAWrapperPass::ID)
      {
        v15 += 16;
        if (v15 == v16) {
          goto LABEL_14;
        }
      }
      uint64_t v17 = *(void *)(v15 + 8);
    }
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::MemorySSAWrapperPass::ID);
    uint64_t v19 = *(void *)(v8 + 112);
    uint64_t v223 = (llvm::DominatorTree *)v13;
    uint64_t v224 = *(void *)(v18 + 32);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, const llvm::Function *))(*(void *)v19 + 16))(v19, a2);
    uint64_t v225 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 120))(v20);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(void *)v19 + 88))(&v226, v19, a2);
    llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v233, a2);
    unsigned int v21 = (*(uint64_t (**)(void))(*(void *)v225 + 1256))();
    if (v21 >= 2)
    {
      char v212 = 0;
      uint64_t v221 = (llvm::DataLayout *)(*((void *)a2 + 5) + 272);
      unint64_t v22 = v21;
      uint64_t v23 = 8 * v21;
      while (1)
      {
        uint64_t v218 = v23;
        unint64_t v216 = v22 - 1;
        unsigned int v217 = v21;
        unint64_t v222 = v22;
        if (v22 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v22;
        }
        uint64_t v215 = v24;
        uint64_t v230 = (uint64_t)&v230;
        int v231 = &v230;
        uint64_t v232 = 0;
        int v25 = (void *)*((void *)a2 + 10);
        if (v25 == (void *)((char *)a2 + 72))
        {
          unsigned int v227 = (uint64_t *)&v227;
          int64x2_t v228 = (uint64_t *)&v227;
          uint64_t v229 = 0;
        }
        else
        {
          do
          {
            __int16 v26 = v25 - 3;
            if (!v25) {
              __int16 v26 = 0;
            }
            BOOL v27 = v26 + 5;
            for (uint64_t i = (void *)v26[6]; i != v27; uint64_t i = (void *)i[1])
            {
              int v29 = i - 3;
              if (!i) {
                int v29 = 0;
              }
              int v30 = *((unsigned __int8 *)v29 + 16);
              if (v30 == 91) {
                int v31 = v29;
              }
              else {
                int v31 = 0;
              }
              if (i)
              {
                if (v30 == 91)
                {
                  uint64_t v32 = *v31;
                  if (*(unsigned char *)(*v31 + 8) != 19)
                  {
                    uint64_t v33 = operator new(0x70uLL);
                    *uint64_t v33 = 0;
                    v33[1] = 0;
                    sub_1CC2D46B4(v33 + 2, v32);
                  }
                }
              }
            }
            int v25 = (void *)v25[1];
          }
          while (v25 != (void *)((char *)a2 + 72));
          unsigned int v34 = v231;
          unsigned int v227 = (uint64_t *)&v227;
          int64x2_t v228 = (uint64_t *)&v227;
          uint64_t v229 = 0;
          if (v231 != &v230)
          {
            while (1)
            {
              unsigned int v35 = *(llvm::Type **)(v34[13] + 24);
              uint64_t v36 = sub_1CB83544C((uint64_t)v221, (uint64_t)v35);
              BOOL v38 = v37 == 1;
              char Alignment = llvm::DataLayout::getAlignment(v221, v35, 1);
              if (v38) {
              unint64_t v41 = ((1 << Alignment) + 0xFFFFFFFFLL + ((unint64_t)(v36 + 7) >> 3)) & -(1 << Alignment);
              }
              uint64_t v42 = (uint64_t **)operator new(8 * v222);
              unsigned int v43 = v42;
              unint64_t v44 = 0;
              do
              {
                v42[v44 / 8] = &v230;
                v44 += 8;
              }
              while (v218 != v44);
              for (uint64_t j = v231; j != &v230; uint64_t j = (uint64_t *)j[1])
              {
                if (j[13] == v34[13] && j[3] == v34[3] && j[4] == v34[4])
                {
                  uint64_t v46 = 1;
                  do
                  {
                    uint64_t v47 = (int *)j[12];
                    uint64_t v48 = v34[12];
                    long long v245 = *(_OWORD *)v48;
                    uint64_t v246 = v248;
                    uint64_t v247 = 0x400000000;
                    if (*(_DWORD *)(v48 + 24)) {
                      sub_1CC2D48F8((uint64_t)&v246, (uint64_t *)(v48 + 16));
                    }
                    unsigned int v250 = *(_DWORD *)(v48 + 136);
                    if (v250 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v249 = *(void *)(v48 + 128);
                    llvm::APInt::operator+=((uint64_t)&v249, (v46 * v41));
                    BOOL v49 = sub_1CC2D7378(v47, (int *)&v245);
                    BOOL v50 = v49;
                    if (v250 >= 0x41 && v249) {
                      MEMORY[0x1D25D9CB0](v249, 0x1000C8000313F17);
                    }
                    uint64_t v51 = (char *)v246;
                    if (v247)
                    {
                      uint64_t v52 = 24 * v247;
                      do
                      {
                        if (*(_DWORD *)&v51[v52 - 8] >= 0x41u)
                        {
                          uint64_t v53 = *(void *)&v51[v52 - 16];
                          if (v53) {
                            MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
                          }
                        }
                        v52 -= 24;
                      }
                      while (v52);
                      uint64_t v51 = (char *)v246;
                    }
                    if (v51 != (char *)v248) {
                      free(v51);
                    }
                    if (v50) {
                      v43[v46] = j;
                    }
                    ++v46;
                  }
                  while (v46 != v222);
                  uint64_t v54 = 1;
                  while (v43[v54] != &v230)
                  {
                    if (v222 == ++v54)
                    {
                      LODWORD(v54) = v222;
                      break;
                    }
                  }
                  if (v222 == v54)
                  {
                    _DWORD *v43 = v34;
                    break;
                  }
                }
              }
              if (*v43 != &v230) {
                break;
              }
              operator delete(v43);
              unsigned int v34 = (uint64_t *)v34[1];
LABEL_77:
              if (v34 == &v230) {
                goto LABEL_318;
              }
            }
            uint64_t v55 = 0;
            uint64_t v56 = v232;
            uint64_t v57 = v229;
            do
            {
              int v58 = v43[v55];
              if (v58 != (uint64_t *)&v227)
              {
                uint64_t v59 = (uint64_t *)v58[1];
                if (v59 != (uint64_t *)&v227)
                {
                  uint64_t v60 = *v58;
                  *(void *)(v60 + 8) = v59;
                  *(void *)v58[1] = v60;
                  uint64_t v61 = (uint64_t)v227;
                  v227[1] = (uint64_t)v58;
                  *int v58 = v61;
                  v58[1] = (uint64_t)&v227;
                  uint64_t v232 = --v56;
                  ++v57;
                  unsigned int v227 = v58;
                  uint64_t v229 = v57;
                }
              }
              ++v55;
            }
            while (v215 != v55);
            operator delete(v43);
            int v62 = v228;
            int v63 = *(llvm::Value **)(v228[12] + 144);
            if (!v63)
            {
LABEL_85:
              uint64_t v64 = (uint64_t *)v228[1];
              if (v64 != (uint64_t *)&v227)
              {
                uint64_t v65 = (uint64_t)v227;
                if (v64 == v227)
                {
                  uint64_t v66 = 0;
                }
                else
                {
                  uint64_t v66 = 0;
                  uint64_t v67 = v228[1];
                  do
                  {
                    ++v66;
                    uint64_t v67 = *(void *)(v67 + 8);
                  }
                  while ((uint64_t *)v67 != v227);
                }
                uint64_t v68 = v66 + 1;
                v229 -= v68;
                unint64_t v69 = v231;
                v232 += v68;
                uint64_t v70 = *v64;
                *(void *)(v70 + 8) = v227[1];
                **(void **)(v65 + 8) = v70;
                uint64_t v71 = *v69;
                *(void *)(v71 + 8) = v64;
                uint64_t *v64 = v71;
                *unint64_t v69 = v65;
                *(void *)(v65 + 8) = v69;
              }
              goto LABEL_92;
            }
            uint64_t v240 = 0;
            unint64_t v241 = 0;
            uint64_t v239 = &v240;
            v238[0] = 0;
            v238[1] = 0;
            uint64_t v237 = v238;
            v236[0] = 0;
            v236[1] = 0;
            unsigned int v235 = (uint64_t *)v236;
            if (v228 == (uint64_t *)&v227) {
              goto LABEL_111;
            }
            int v213 = v63;
            uint64_t v72 = v229;
            uint64_t v211 = v229;
            do
            {
              uint64_t v73 = (uint64_t *)v62[5];
              if (v73 != v62 + 6)
              {
                do
                {
                  sub_1CD4CA034(&v239, &v240, v73[4], v73 + 4);
                  int v74 = (uint64_t *)v73[1];
                  if (v74)
                  {
                    do
                    {
                      int v75 = v74;
                      int v74 = (uint64_t *)*v74;
                    }
                    while (v74);
                  }
                  else
                  {
                    do
                    {
                      int v75 = (uint64_t *)v73[2];
                      BOOL v76 = *v75 == (void)v73;
                      uint64_t v73 = v75;
                    }
                    while (!v76);
                  }
                  uint64_t v73 = v75;
                }
                while (v75 != v62 + 6);
              }
              unsigned int v77 = (uint64_t *)v62[8];
              if (v77 != v62 + 9)
              {
                do
                {
                  sub_1CD4CA034(&v237, v238, v77[4], v77 + 4);
                  int v78 = (uint64_t *)v77[1];
                  if (v78)
                  {
                    do
                    {
                      BOOL v79 = v78;
                      int v78 = (uint64_t *)*v78;
                    }
                    while (v78);
                  }
                  else
                  {
                    do
                    {
                      BOOL v79 = (uint64_t *)v77[2];
                      BOOL v76 = *v79 == (void)v77;
                      unsigned int v77 = v79;
                    }
                    while (!v76);
                  }
                  unsigned int v77 = v79;
                }
                while (v79 != v62 + 9);
              }
              *(void *)&long long v245 = v62[11];
              sub_1CD3CFB98(&v235, (unint64_t *)&v245, (uint64_t **)&v245);
              int v62 = (uint64_t *)v62[1];
            }
            while (v62 != (uint64_t *)&v227);
            unsigned int v80 = v213;
            if (v241 < 2)
            {
LABEL_111:
              sub_1CB833A08((uint64_t)&v235, v236[0]);
              sub_1CB833A08((uint64_t)&v237, v238[0]);
              sub_1CD40B1BC(v240);
              goto LABEL_85;
            }
            uint64_t v81 = v237;
            if (v237 != v238)
            {
              int v91 = 0;
              int64_t v82 = 0;
              do
              {
                int64_t v219 = v82;
                uint64_t v92 = v81[4];
                int v93 = *(_DWORD *)(v92 + 20);
                if ((v93 & 0x40000000) != 0)
                {
                  unsigned int v95 = *(void ***)(v92 - 8);
                  unint64_t v94 = v93 & 0x7FFFFFF;
                }
                else
                {
                  unint64_t v94 = v93 & 0x7FFFFFF;
                  unsigned int v95 = (void **)(v92 - 32 * v94);
                }
                *(void *)&long long v245 = &v246;
                *((void *)&v245 + 1) = 0x400000000;
                if (v94 >= 5) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v94)
                {
                  uint64_t v96 = 32 * v94;
                  uint64_t v97 = &v246;
                  do
                  {
                    int v98 = *v95;
                    v95 += 4;
                    *v97++ = v98;
                    v96 -= 32;
                  }
                  while (v96);
                  uint64_t v99 = (void **)v245;
                }
                else
                {
                  uint64_t v99 = &v246;
                }
                DWORD2(v245) = v94;
                uint64_t v100 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v226 + 72))(v226, v92, v99);
                int v102 = v101;
                unsigned int v80 = v213;
                if ((void **)v245 != &v246) {
                  free((void *)v245);
                }
                if (v102 == 1) {
                  int v91 = 1;
                }
                if (__OFADD__(v219, v100)) {
                  int64_t v82 = ((v219 + v100) >> 63) ^ 0x8000000000000000;
                }
                else {
                  int64_t v82 = v219 + v100;
                }
                int v103 = v236[0];
                unint64_t v104 = v81[4];
                if (!v236[0]) {
                  goto LABEL_330;
                }
                int v105 = v236;
                do
                {
                  uint64_t v106 = v105;
                  uint64_t v107 = v103;
                  unint64_t v108 = v103[4];
                  uint64_t v109 = v103 + 1;
                  if (v108 >= v104)
                  {
                    uint64_t v109 = v107;
                    int v105 = (void **)v107;
                  }
                  int v103 = (void *)*v109;
                }
                while (v103);
                if (v105 == v236) {
                  goto LABEL_330;
                }
                if (v108 >= v104) {
                  uint64_t v106 = (void **)v107;
                }
                if (v104 < (unint64_t)v106[4])
                {
LABEL_330:
                  uint64_t v110 = *(void *)(v104 + 8);
                  if (v110)
                  {
                    if (v238[0])
                    {
                      while (1)
                      {
                        unint64_t v111 = *(void *)(v110 + 24);
                        if (*(unsigned __int8 *)(v111 + 16) <= 0x1Bu) {
                          unint64_t v111 = 0;
                        }
                        unsigned int v112 = v238[0];
                        uint64_t v113 = v238;
                        do
                        {
                          uint64_t v114 = v113;
                          uint64_t v115 = v112;
                          unint64_t v116 = v112[4];
                          if (v116 >= v111) {
                            uint64_t v113 = (void **)v112;
                          }
                          else {
                            ++v112;
                          }
                          unsigned int v112 = (void *)*v112;
                        }
                        while (v112);
                        if (v113 == v238) {
                          break;
                        }
                        if (v116 >= v111) {
                          uint64_t v114 = (void **)v115;
                        }
                        if (v111 < (unint64_t)v114[4]) {
                          break;
                        }
                        uint64_t v110 = *(void *)(v110 + 8);
                        if (!v110) {
                          goto LABEL_167;
                        }
                      }
                    }
                    goto LABEL_111;
                  }
                }
LABEL_167:
                unsigned int v117 = (void *)v81[1];
                if (v117)
                {
                  do
                  {
                    uint64_t v118 = (void **)v117;
                    unsigned int v117 = (void *)*v117;
                  }
                  while (v117);
                }
                else
                {
                  do
                  {
                    uint64_t v118 = (void **)v81[2];
                    BOOL v76 = *v118 == v81;
                    uint64_t v81 = v118;
                  }
                  while (!v76);
                }
                uint64_t v81 = v118;
              }
              while (v118 != v238);
              if (!v91) {
                goto LABEL_114;
              }
              goto LABEL_111;
            }
            int64_t v82 = 0;
LABEL_114:
            int v83 = v239;
            uint64_t v84 = *(void *)(v239[4] + 40);
            uint64_t v85 = v84 + 40;
            for (uint64_t k = *(void *)(v84 + 48); k != v85; uint64_t k = *(void *)(k + 8))
            {
              uint64_t v87 = k - 24;
              if (!k) {
                uint64_t v87 = 0;
              }
              if (v239 != &v240)
              {
                int v88 = v239;
                while (v88[4] != v87)
                {
                  int v89 = (void *)v88[1];
                  if (v89)
                  {
                    do
                    {
                      int v90 = (void **)v89;
                      int v89 = (void *)*v89;
                    }
                    while (v89);
                  }
                  else
                  {
                    do
                    {
                      int v90 = (void **)v88[2];
                      BOOL v76 = *v90 == v88;
                      int v88 = v90;
                    }
                    while (!v76);
                  }
                  int v88 = v90;
                  if (v90 == &v240) {
                    goto LABEL_127;
                  }
                }
                uint64_t v85 = k;
                break;
              }
LABEL_127:
              ;
            }
            uint64_t v119 = v85 - 24;
            if (!v85) {
              uint64_t v119 = 0;
            }
            int v120 = *(_DWORD *)(v224 + 40);
            if (v120)
            {
              uint64_t v121 = *(void *)(v224 + 24);
              unsigned int v122 = v120 - 1;
              uint64_t v123 = ((v119 >> 4) ^ (v119 >> 9)) & (v120 - 1);
              uint64_t v124 = *(void *)(v121 + 16 * v123);
              if (v119 == v124)
              {
LABEL_184:
                uint64_t v127 = *(void *)(v121 + 16 * v123 + 8);
              }
              else
              {
                int v125 = 1;
                while (v124 != -4096)
                {
                  int v126 = v123 + v125++;
                  uint64_t v123 = v126 & v122;
                  uint64_t v124 = *(void *)(v121 + 16 * v123);
                  if (v119 == v124) {
                    goto LABEL_184;
                  }
                }
                uint64_t v127 = 0;
              }
            }
            else
            {
              uint64_t v127 = 0;
            }
            if (v239 != &v240)
            {
              while (2)
              {
                int v128 = *(_DWORD *)(v224 + 40);
                if (!v128) {
                  goto LABEL_193;
                }
                uint64_t v129 = v83[4];
                uint64_t v130 = *(void *)(v224 + 24);
                unsigned int v131 = v128 - 1;
                uint64_t v132 = ((v129 >> 4) ^ (v129 >> 9)) & (v128 - 1);
                uint64_t v133 = *(void *)(v130 + 16 * v132);
                if (v129 == v133)
                {
LABEL_192:
                  uint64_t v136 = *(void *)(v130 + 16 * v132 + 8);
                }
                else
                {
                  int v134 = 1;
                  while (v133 != -4096)
                  {
                    int v135 = v132 + v134++;
                    uint64_t v132 = v135 & v131;
                    uint64_t v133 = *(void *)(v130 + 16 * v132);
                    if (v129 == v133) {
                      goto LABEL_192;
                    }
                  }
LABEL_193:
                  uint64_t v136 = 0;
                }
                if (*(unsigned char *)(v136 + 16) == 25) {
                  uint64_t v137 = v136;
                }
                else {
                  uint64_t v137 = 0;
                }
                unsigned int v138 = (uint64_t *)(v136 - 64);
                if (v137) {
                  unsigned int v138 = (uint64_t *)(v137 - 32);
                }
                if (!llvm::MemorySSA::dominates((llvm::MemorySSA *)v224, *v138, v127)) {
                  goto LABEL_111;
                }
                unint64_t v139 = (void *)v83[1];
                if (v139)
                {
                  do
                  {
                    unint64_t v140 = (void **)v139;
                    unint64_t v139 = (void *)*v139;
                  }
                  while (v139);
                }
                else
                {
                  do
                  {
                    unint64_t v140 = (void **)v83[2];
                    BOOL v76 = *v140 == v83;
                    int v83 = v140;
                  }
                  while (!v76);
                }
                int v83 = v140;
                if (v140 == &v240) {
                  break;
                }
                continue;
              }
            }
            for (uint64_t m = v228; m != (uint64_t *)&v227; uint64_t m = (uint64_t *)m[1])
            {
              if ((llvm::DominatorTree::dominates(v223, v80, (const llvm::Instruction *)m[11]) & 1) == 0) {
                goto LABEL_111;
              }
            }
            uint64_t v142 = 0;
            uint64_t v143 = **(void **)v80;
            uint64_t v264 = v266;
            uint64_t v265 = 0x200000000;
            uint64_t v269 = v143;
            uint64_t v270 = &v278;
            uint64_t v271 = &v279;
            uint64_t v272 = 0;
            int v273 = 0;
            __int16 v274 = 512;
            char v275 = 7;
            int v267 = 0;
            __int16 v268 = 0;
            uint64_t v276 = 0;
            uint64_t v277 = 0;
            unsigned int v278 = &unk_1F2616E88;
            unsigned int v279 = &unk_1F2617008;
            int v267 = (void *)*((void *)v80 + 5);
            __int16 v268 = (void **)((char *)v80 + 24);
            unsigned int v144 = (unsigned __int8 *)*((void *)v80 + 6);
            v290[0] = v144;
            if (v144)
            {
              llvm::MetadataTracking::track((uint64_t)v290, v144, 2);
              uint64_t v142 = v290[0];
            }
            sub_1CB8461A4((uint64_t)&v264, 0, v142);
            if (v290[0])
            {
              int v201 = *(unsigned __int8 *)v290[0];
              if ((v201 - 4) > 0x1E)
              {
                if ((v201 - 3) >= 0xFFFFFFFE) {
                  uint64_t v206 = v290[0];
                }
                else {
                  uint64_t v206 = 0;
                }
                if ((v201 - 3) < 0xFFFFFFFE)
                {
                  unsigned int v80 = v213;
                  if (v201 == 3) {
                    *(void *)(v290[0] + 8) = 0;
                  }
                  goto LABEL_213;
                }
                unint64_t v203 = v206 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v290[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v290[0] + 12)) {
                  goto LABEL_213;
                }
                uint64_t v202 = *(void *)(v290[0] + 16);
                if ((v202 & 4) == 0) {
                  goto LABEL_213;
                }
                unint64_t v203 = v202 & 0xFFFFFFFFFFFFFFF8;
                if (!v203) {
                  goto LABEL_213;
                }
              }
              *(void *)&long long v245 = v290;
              sub_1CC5FA668(v203 + 16, &v245);
              unsigned int v80 = v213;
            }
LABEL_213:
            uint64_t v145 = *(void *)v228[11];
            int v220 = *(_DWORD *)(v145 + 32);
            llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(v145 + 24), (llvm::Type *)(v220 * v72));
            int v147 = v146;
            uint64_t v261 = v263;
            uint64_t v262 = 0x400000000;
            sub_1CC2D7744((uint64_t)&v261, 0, v211);
            uint64_t v148 = **((void **)v80 - 4);
            unsigned int v149 = *(_DWORD *)(v148 + 8);
            if ((v149 & 0xFE) == 0x12) {
              unsigned int v149 = *(_DWORD *)(**(void **)(v148 + 16) + 8);
            }
            WORD2(v210) = 0;
            LODWORD(v210) = 3;
            BOOL v151 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::PointerType *, uint64_t, void *, void, unint64_t, void, uint64_t))(*(void *)v226 + 920))(v226, 32, v147, v72, v261, v262, ((unint64_t)*((unsigned __int16 *)v80 + 9) >> 1) & 0x3F, v149 >> 8, v210) < v82;
            if (v150) {
              BOOL v152 = v150 < 0;
            }
            else {
              BOOL v152 = v151;
            }
            if (!v152)
            {
LABEL_290:
              if (v261 != v263) {
                free(v261);
              }
              if (v264 != v266) {
                free(v264);
              }
              sub_1CB833A08((uint64_t)&v235, v236[0]);
              sub_1CB833A08((uint64_t)&v237, v238[0]);
              sub_1CD40B1BC(v240);
              if (!v152) {
                goto LABEL_85;
              }
              char v212 = 1;
LABEL_92:
              sub_1CC2D77CC((uint64_t *)&v227);
              unsigned int v34 = v231;
              goto LABEL_77;
            }
            uint64_t v153 = (llvm::CastInst *)*((void *)v80 - 4);
            uint64_t v154 = (llvm::Value *)llvm::PointerType::get(v147, 0);
            *(void *)&long long v245 = "interleaved.wide.ptrcast";
            v248[0] = 259;
            unint64_t v156 = sub_1CC277FE0((uint64_t)&v264, v153, v154, (uint64_t)&v245, v155);
            unint64_t v157 = *((unsigned __int16 *)v80 + 9);
            v290[0] = "interleaved.wide.load";
            __int16 v291 = 259;
            uint64_t v158 = (v157 >> 1) & 0x3F;
            uint64_t v159 = operator new(0x60uLL);
            v159[13] = v159[13] & 0x38000000 | 1;
            uint64_t v160 = (llvm::Instruction *)(v159 + 8);
            *(void *)uint64_t v159 = 0;
            *((void *)v159 + 1) = 0;
            *((void *)v159 + 2) = 0;
            *((void *)v159 + 3) = v159 + 8;
            v248[0] = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v159 + 8), (uint64_t)v147, (uint64_t)v156, (const char **)&v245, 0, v158, 0);
            uint64_t v214 = v160;
            (*((void (**)(void **, llvm::Instruction *, void *, void *, void **))*v271 + 2))(v271, v160, v290, v267, v268);
            if (v265)
            {
              unsigned int v204 = (llvm::MDNode **)v264;
              unsigned int v205 = (llvm::MDNode **)((char *)v264 + 16 * v265);
              do
              {
                llvm::Instruction::setMetadata(v214, *(_DWORD *)v204, v204[1]);
                v204 += 2;
              }
              while (v204 != v205);
            }
            *(void *)&long long v245 = v224;
            *((void *)&v245 + 1) = &v247;
            uint64_t v246 = (void *)0x1000000000;
            int v251 = v255;
            uint64_t v252 = v255;
            uint64_t v253 = 8;
            int v254 = 0;
            __int16 v256 = v258;
            uint64_t v257 = 0x800000000;
            v260[0] = 0;
            v260[1] = 0;
            unint64_t v259 = v260;
            int v161 = *(_DWORD *)(v224 + 40);
            if (v161)
            {
              uint64_t v162 = *(void *)(v224 + 24);
              unsigned int v163 = v161 - 1;
              uint64_t v164 = (v161 - 1) & ((v80 >> 4) ^ (v80 >> 9));
              int v165 = *(llvm::Value **)(v162 + 16 * v164);
              if (v80 == v165)
              {
LABEL_225:
                uint64_t v168 = *(void *)(v162 + 16 * v164 + 8);
              }
              else
              {
                int v166 = 1;
                while (v165 != (llvm::Value *)-4096)
                {
                  int v167 = v164 + v166++;
                  uint64_t v164 = v167 & v163;
                  int v165 = *(llvm::Value **)(v162 + 16 * v164);
                  if (v80 == v165) {
                    goto LABEL_225;
                  }
                }
                uint64_t v168 = 0;
              }
            }
            else
            {
              uint64_t v168 = 0;
            }
            MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessBefore((uint64_t **)&v245, (uint64_t)v214, 0, v168);
            llvm::MemorySSAUpdater::insertUse((llvm::MemorySSAUpdater *)&v245, (llvm::MemoryUse *)MemoryAccessBefore, 1);
            uint64_t v170 = v228;
            if (v228 == (uint64_t *)&v227)
            {
LABEL_228:
              uint64_t v171 = ***(void ***)v233[0];
              LOBYTE(v152) = 1;
              if (*(void *)(v171 + 128)
                || (*(unsigned int (**)(void))(**(void **)(v171 + 72) + 48))(*(void *)(v171 + 72)))
              {
                llvm::OptimizationRemark::OptimizationRemark((uint64_t)v290, (uint64_t)"interleaved-load-combine", (uint64_t)"Combined Interleaved Load", 25, (uint64_t)v214);
                v242.__r_.__value_.__r.__words[0] = (std::string::size_type)"Load interleaved combined with factor ";
                v242.__r_.__value_.__l.__size_ = 38;
                sub_1CC59ADEC((uint64_t *)&v292, (uint64_t)&v242);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v242, "Factor", 6uLL, v72);
                uint64_t v172 = sub_1CD3D6290((uint64_t)v290, (long long *)&v242);
                uint64_t v173 = v172;
                int v174 = *(_DWORD *)(v172 + 8);
                BYTE4(v281) = *(unsigned char *)(v172 + 12);
                LODWORD(v281) = v174;
                long long v175 = *(_OWORD *)(v172 + 16);
                uint64_t v283 = *(void *)(v172 + 32);
                long long v282 = v175;
                uint64_t v176 = *(void *)(v172 + 72);
                long long v177 = *(_OWORD *)(v172 + 56);
                long long v284 = *(_OWORD *)(v172 + 40);
                long long v285 = v177;
                uint64_t v286 = v176;
                uint64_t v280 = &unk_1F2616800;
                unsigned int v287 = v289;
                uint64_t v288 = 0x400000000;
                if (*(_DWORD *)(v172 + 88)) {
                  sub_1CD494D68((uint64_t)&v287, v172 + 80);
                }
                uint64_t v178 = *(void *)(v173 + 360);
                v289[32] = *(void *)(v173 + 352);
                v289[33] = v178;
                uint64_t v280 = &unk_1F2616570;
                if (v244 < 0) {
                  operator delete(__p);
                }
                if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v242.__r_.__value_.__l.__data_);
                }
                v290[0] = &unk_1F2616800;
                uint64_t v179 = (char *)v292;
                if (v293)
                {
                  unint64_t v180 = (unint64_t)v293 << 6;
                  do
                  {
                    uint64_t v181 = (void **)&v179[v180];
                    if (v179[v180 - 17] < 0) {
                      operator delete(*(v181 - 5));
                    }
                    if (*((char *)v181 - 41) < 0) {
                      operator delete(*(v181 - 8));
                    }
                    v180 -= 64;
                  }
                  while (v180);
                  uint64_t v179 = (char *)v292;
                  LOBYTE(v152) = 1;
                }
                if (v179 != (char *)v294) {
                  free(v179);
                }
                llvm::OptimizationRemarkEmitter::emit(v233, (llvm::DiagnosticInfoOptimizationBase *)&v280);
                uint64_t v280 = &unk_1F2616800;
                uint64_t v198 = (char *)v287;
                if (v288)
                {
                  unint64_t v199 = (unint64_t)v288 << 6;
                  do
                  {
                    uint64_t v200 = (void **)&v198[v199];
                    if (v198[v199 - 17] < 0) {
                      operator delete(*(v200 - 5));
                    }
                    if (*((char *)v200 - 41) < 0) {
                      operator delete(*(v200 - 8));
                    }
                    v199 -= 64;
                  }
                  while (v199);
                  uint64_t v198 = (char *)v287;
                  LOBYTE(v152) = 1;
                }
                if (v198 != (char *)v289) {
                  free(v198);
                }
              }
              sub_1CD3C5048((uint64_t)&v259, v260[0]);
              if (v256 != v258) {
                free(v256);
              }
              if (v252 != v251) {
                free(v252);
              }
              sub_1CC0BD0FC((char **)&v245 + 1);
              goto LABEL_290;
            }
            int v182 = 0;
            while (2)
            {
              uint64_t v280 = &v282;
              uint64_t v281 = 0x400000000;
              if (v220)
              {
                unsigned int v183 = 0;
                int v184 = v182;
                int v185 = v220;
                do
                {
                  if (v183 >= HIDWORD(v281)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v280 + v183) = v184;
                  unsigned int v183 = v281 + 1;
                  LODWORD(v281) = v281 + 1;
                  v184 += v72;
                  --v185;
                }
                while (v185);
              }
              uint64_t v186 = v170[11];
              int v267 = *(void **)(v186 + 40);
              __int16 v268 = (void **)(v186 + 24);
              uint64_t v187 = *(unsigned __int8 **)(v186 + 48);
              v242.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
              if (v187)
              {
                llvm::MetadataTracking::track((uint64_t)&v242, v187, 2);
                uint64_t v188 = v242.__r_.__value_.__r.__words[0];
              }
              else
              {
                uint64_t v188 = 0;
              }
              sub_1CB8461A4((uint64_t)&v264, 0, v188);
              if (!v242.__r_.__value_.__r.__words[0])
              {
LABEL_254:
                uint64_t v190 = v280;
                uint64_t v191 = (llvm::Type *)v281;
                v290[0] = "interleaved.shuffle";
                __int16 v291 = 259;
                uint64_t v192 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v214, v189);
                uint64_t v193 = sub_1CB935A74((uint64_t)&v264, (uint64_t)v214, (uint64_t)v192, v190, v191, (uint64_t)v290);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v170[11], v193, (llvm::Value *)1);
                if (v280 != &v282) {
                  free(v280);
                }
                ++v182;
                uint64_t v170 = (uint64_t *)v170[1];
                if (v170 == (uint64_t *)&v227) {
                  goto LABEL_228;
                }
                continue;
              }
              break;
            }
            int v194 = *v242.__r_.__value_.__l.__data_;
            if ((v194 - 4) > 0x1E)
            {
              if ((v194 - 3) >= 0xFFFFFFFE) {
                std::string::size_type v197 = v242.__r_.__value_.__r.__words[0];
              }
              else {
                std::string::size_type v197 = 0;
              }
              if ((v194 - 3) < 0xFFFFFFFE)
              {
                if (v194 == 3) {
                  *(void *)(v242.__r_.__value_.__r.__words[0] + 8) = 0;
                }
                goto LABEL_254;
              }
              unint64_t v196 = v197 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v242.__r_.__value_.__r.__words[0] + 1) & 0x7F) != 2
                && !*(_DWORD *)(v242.__r_.__value_.__r.__words[0] + 12))
              {
                goto LABEL_254;
              }
              uint64_t v195 = *(void *)(v242.__r_.__value_.__r.__words[0] + 16);
              if ((v195 & 4) == 0) {
                goto LABEL_254;
              }
              unint64_t v196 = v195 & 0xFFFFFFFFFFFFFFF8;
              if (!v196) {
                goto LABEL_254;
              }
            }
            v290[0] = &v242;
            sub_1CC5FA668(v196 + 16, v290);
            goto LABEL_254;
          }
        }
LABEL_318:
        sub_1CC2D77CC((uint64_t *)&v227);
        sub_1CC2D77CC(&v230);
        unint64_t v22 = v216;
        unsigned int v21 = v217 - 1;
        uint64_t v23 = v218 - 8;
        if (v217 - 1 <= 1) {
          goto LABEL_321;
        }
      }
    }
    char v212 = 0;
LABEL_321:
    int v207 = v234;
    unint64_t v234 = 0;
    if (v207)
    {
      uint64_t v208 = *v207;
      uint64_t *v207 = 0;
      if (v208) {
        (*(void (**)(uint64_t))(*(void *)v208 + 8))(v208);
      }
      MEMORY[0x1D25D9CE0](v207, 0x20C4093837F09);
    }
    uint64_t v209 = v226;
    uint64_t v226 = 0;
    if (v209) {
      (*(void (**)(uint64_t))(*(void *)v209 + 8))(v209);
    }
    char v2 = v212;
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

void sub_1CC2D3E48(uint64_t a1)
{
  v1[86] = *(void **)MEMORY[0x1E4F143B8];
  sub_1CC2D46B4(v1, **(void **)(a1 - 64));
}

void sub_1CC2D46B4(void *a1, uint64_t a2)
{
  *a1 = &unk_1F260C5F8;
  a1[1] = 0;
  a1[4] = 0;
  a1[2] = 0;
  a1[3] = a1 + 4;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  a1[5] = 0;
  a1[6] = a1 + 7;
  a1[11] = a2;
  operator new[]();
}

uint64_t sub_1CC2D4794(uint64_t a1)
{
  *(void *)a1 = &unk_1F260C5F8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = v2 + 152 * v3;
      do
      {
        if (*(_DWORD *)(v4 - 16) >= 0x41u)
        {
          uint64_t v5 = *(void *)(v4 - 24);
          if (v5) {
            MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
          }
        }
        BOOL v6 = *(char **)(v4 - 136);
        uint64_t v7 = *(unsigned int *)(v4 - 128);
        if (v7)
        {
          uint64_t v8 = 24 * v7;
          do
          {
            if (*(_DWORD *)&v6[v8 - 8] >= 0x41u)
            {
              uint64_t v9 = *(void *)&v6[v8 - 16];
              if (v9) {
                MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
              }
            }
            v8 -= 24;
          }
          while (v8);
          BOOL v6 = *(char **)(v4 - 136);
        }
        if (v6 != (char *)(v4 - 120)) {
          free(v6);
        }
        v4 -= 152;
      }
      while (v4 != v2);
    }
    MEMORY[0x1D25D9CB0](v2 - 16, 0x10B2C805E89C145);
  }
  sub_1CB833A08(a1 + 48, *(void **)(a1 + 56));
  sub_1CD40B1BC(*(void **)(a1 + 32));
  return a1;
}

void sub_1CC2D48C0(uint64_t a1)
{
  sub_1CC2D4794(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC2D48F8(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unint64_t v4 = *((unsigned int *)a2 + 2);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *a2;
        uint64_t v5 = *(void *)a1;
        do
        {
          uint64_t v11 = v5 + v9;
          uint64_t v12 = v10 + v9;
          *(_DWORD *)(v5 + v9) = *(_DWORD *)(v10 + v9);
          if (*(_DWORD *)(v5 + v9 + 16) > 0x40u || *(_DWORD *)(v12 + 16) > 0x40u)
          {
            if (v12 != v11)
            {
              uint64_t v13 = (void **)(v11 + 8);
              llvm::APInt::reallocate(v11 + 8, *(_DWORD *)(v10 + v9 + 16));
              uint64_t v14 = *(unsigned int *)(v11 + 16);
              if (v14 <= 0x40) {
                *uint64_t v13 = *(void **)(v12 + 8);
              }
              else {
                memcpy(*v13, *(const void **)(v12 + 8), ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
          }
          else
          {
            *(void *)(v11 + 8) = *(void *)(v12 + 8);
            *(_DWORD *)(v11 + 16) = *(_DWORD *)(v12 + 16);
          }
          v9 += 24;
        }
        while (24 * v4 != v9);
        uint64_t v15 = v5 + v9;
        uint64_t v16 = *(void *)a1;
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        uint64_t v16 = *(void *)a1;
        uint64_t v15 = *(void *)a1;
      }
      for (uint64_t i = v16 + 24 * v5; i != v15; i -= 24)
      {
        if (*(_DWORD *)(i - 8) >= 0x41u)
        {
          uint64_t v32 = *(void *)(i - 16);
          if (v32) {
            MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
          }
        }
      }
      goto LABEL_40;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (v5)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *a2;
        uint64_t v19 = *(void *)a1;
        do
        {
          uint64_t v20 = v19 + v17;
          uint64_t v21 = v18 + v17;
          *(_DWORD *)(v19 + v17) = *(_DWORD *)(v18 + v17);
          if (*(_DWORD *)(v19 + v17 + 16) > 0x40u || *(_DWORD *)(v21 + 16) > 0x40u)
          {
            if (v21 != v20)
            {
              uint64_t v33 = (void **)(v20 + 8);
              llvm::APInt::reallocate(v20 + 8, *(_DWORD *)(v18 + v17 + 16));
              uint64_t v22 = *(unsigned int *)(v20 + 16);
              if (v22 <= 0x40) {
                *uint64_t v33 = *(void **)(v21 + 8);
              }
              else {
                memcpy(*v33, *(const void **)(v21 + 8), ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
          }
          else
          {
            *(void *)(v20 + 8) = *(void *)(v21 + 8);
            *(_DWORD *)(v20 + 16) = *(_DWORD *)(v21 + 16);
          }
          v17 += 24;
        }
        while (24 * v5 != v17);
        goto LABEL_34;
      }
    }
    else
    {
      if (v5)
      {
        uint64_t v6 = *(void *)a1;
        uint64_t v7 = 24 * v5;
        do
        {
          if (*(_DWORD *)(v6 + v7 - 8) >= 0x41u)
          {
            uint64_t v8 = *(void *)(v6 + v7 - 16);
            if (v8) {
              MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
            }
          }
          v7 -= 24;
        }
        while (v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1CC2D4C3C(a1, v4);
    }
    uint64_t v5 = 0;
LABEL_34:
    uint64_t v23 = *((unsigned int *)a2 + 2);
    if (v5 != v23)
    {
      uint64_t v24 = *a2;
      uint64_t v25 = *a2 + 24 * v23;
      uint64_t v26 = v24 + 24 * v5 + 8;
      BOOL v27 = (unsigned int *)(*(void *)a1 + 24 * v5 + 16);
      do
      {
        uint64_t v28 = v26 - 8;
        *(v27 - 4) = *(_DWORD *)(v26 - 8);
        unsigned int v29 = *(_DWORD *)(v26 + 8);
        *BOOL v27 = v29;
        if (v29 > 0x40) {
          operator new[]();
        }
        *((void *)v27 - 1) = *(void *)v26;
        v26 += 24;
        v27 += 6;
      }
      while (v28 + 24 != v25);
    }
LABEL_40:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1CC2D4C3C(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(24 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(char **)a1;
  int v9 = *(_DWORD *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = &v8[24 * v9];
    uint64_t v11 = v6;
    do
    {
      _DWORD *v11 = *(_DWORD *)v8;
      v11[4] = *((_DWORD *)v8 + 4);
      *((void *)v11 + 1) = *((void *)v8 + 1);
      *((_DWORD *)v8 + 4) = 0;
      v8 += 24;
      v11 += 6;
    }
    while (v8 != v10);
    uint64_t v8 = *(char **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12)
    {
      uint64_t v13 = 24 * v12;
      do
      {
        if (*(_DWORD *)&v8[v13 - 8] >= 0x41u)
        {
          uint64_t v14 = *(void *)&v8[v13 - 16];
          if (v14) {
            MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
          }
        }
        v13 -= 24;
      }
      while (v13);
      uint64_t v8 = *(char **)a1;
    }
  }
  if (v8 != (char *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t sub_1CC2D4D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a2;
  int v9 = (uint64_t ***)a1;
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  int v10 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || v10 != 91)
  {
    if (!a1 || v10 != 60)
    {
      uint64_t v15 = 0;
      if (a1)
      {
        if (v10 == 77)
        {
          uint64_t v15 = 0;
          uint64_t v16 = *(unsigned __int8 **)(a1 - 32);
          if (v16)
          {
            if (v16[16] >= 0x1Cu)
            {
              uint64_t v17 = *(void *)v16;
              if (*(void *)v16) {
                BOOL v18 = *(unsigned char *)(*(void *)v16 + 8) == 18;
              }
              else {
                BOOL v18 = 0;
              }
              if (v18)
              {
                uint64_t v19 = *(void *)(a2 + 88);
                unsigned int v20 = *(_DWORD *)(v19 + 32);
                unsigned int v21 = *(_DWORD *)(v17 + 32);
                if (!(v20 % v21))
                {
                  int v144 = v20 / v21;
                  uint64_t v22 = *(llvm::Type **)(v19 + 24);
                  unint64_t v23 = (unint64_t)(sub_1CB83544C(a3, (uint64_t)v22) + 7) >> 3;
                  BOOL v25 = v24 == 1;
                  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)a3, v22, 1);
                  uint64_t v147 = ((1 << Alignment) + v23 - 1) & -(1 << Alignment);
                  if (v25) {
                  uint64_t v28 = *(llvm::Type **)(v17 + 24);
                  }
                  unint64_t v29 = (unint64_t)(sub_1CB83544C(a3, (uint64_t)v28) + 7) >> 3;
                  BOOL v31 = v30 == 1;
                  char v32 = llvm::DataLayout::getAlignment((llvm::DataLayout *)a3, v28, 1);
                  uint64_t v34 = ((1 << v32) + 0xFFFFFFFFLL + v29) & -(1 << v32);
                  if (v31) {
                  if (v144 * v147 == v34)
                  }
                    sub_1CC2D46B4(v149, v17);
                }
              }
              return 0;
            }
          }
        }
      }
      return v15;
    }
    LODWORD(v155) = -1;
    *((void *)&v155 + 1) = 0;
    unint64_t v156 = v158;
    uint64_t v157 = 0x400000000;
    unsigned int v160 = 1;
    __src = 0;
    BOOL v146 = (*(_WORD *)(a1 + 18) & 0x381) == 0;
    if ((*(_WORD *)(a1 + 18) & 0x381) != 0)
    {
LABEL_9:
      if (v160 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      uint64_t v12 = (char *)v156;
      if (v157)
      {
        uint64_t v13 = 24 * v157;
        do
        {
          if (*(_DWORD *)&v12[v13 - 8] >= 0x41u)
          {
            uint64_t v14 = *(void *)&v12[v13 - 16];
            if (v14) {
              MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
            }
          }
          v13 -= 24;
        }
        while (v13);
        uint64_t v12 = (char *)v156;
      }
      if (v12 != v158) {
        free(v12);
      }
      return v146;
    }
    unsigned int v35 = *(uint64_t **)(a1 - 32);
    uint64_t v36 = *v35;
    unsigned int v37 = *(_DWORD *)(*v35 + 8);
    if (*v35) {
      BOOL v38 = *(_DWORD *)(*v35 + 8) == 15;
    }
    else {
      BOOL v38 = 0;
    }
    if (!v38)
    {
LABEL_67:
      LODWORD(v161[0]) = -1;
      v161[1] = 0;
      uint64_t v162 = v164;
      uint64_t v163 = 0x400000000;
      unsigned int v166 = 1;
      int v165 = 0;
      sub_1CC2D66AC((uint64_t)&v155, (uint64_t)v161);
      if (v166 >= 0x41 && v165) {
        MEMORY[0x1D25D9CB0](v165, 0x1000C8000313F17);
      }
      uint64_t v53 = (char *)v162;
      if (v163)
      {
        uint64_t v54 = v9;
        uint64_t v55 = v8;
        uint64_t v56 = 24 * v163;
        do
        {
          if (*(_DWORD *)&v53[v56 - 8] >= 0x41u)
          {
            uint64_t v57 = *(void *)&v53[v56 - 16];
            if (v57) {
              MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
            }
          }
          v56 -= 24;
        }
        while (v56);
        uint64_t v53 = (char *)v162;
        uint64_t v8 = v55;
        int v9 = v54;
      }
      if (v53 != v164) {
        free(v53);
      }
      unsigned int v35 = 0;
LABEL_80:
      *(void *)(v8 + 8) = v9[5];
      *(void *)(v8 + 16) = v35;
      sub_1CD4C9324((uint64_t *)(v8 + 24), (unint64_t)v9, (uint64_t)v9);
      v161[0] = v9;
      sub_1CD3CFB98((uint64_t **)(v8 + 48), (unint64_t *)v161, (uint64_t **)v161);
      if (*(_DWORD *)(*(void *)(v8 + 88) + 32))
      {
        unint64_t v59 = 0;
        do
        {
          uint64_t v168 = 0;
          uint64_t v169 = 0;
          uint64_t v60 = ***v9;
          uint64_t v61 = *(llvm::ConstantInt **)(v60 + 1960);
          unsigned int v62 = *(_DWORD *)(v60 + 1968);
          LODWORD(v161[1]) = v62 >> 8;
          if (v62 >> 8 >= 0x41) {
            operator new[]();
          }
          v161[0] = 0;
          uint64_t v64 = (const llvm::Value *)llvm::ConstantInt::get(v61, (llvm::LLVMContext *)v161, v58);
          if (LODWORD(v161[1]) >= 0x41 && v161[0]) {
            MEMORY[0x1D25D9CB0](v161[0], 0x1000C8000313F17);
          }
          uint64_t v168 = v64;
          uint64_t v65 = ***v9;
          uint64_t v66 = *(llvm::ConstantInt **)(v65 + 1960);
          unint64_t v67 = *(unsigned int *)(v65 + 1968);
          LODWORD(v161[1]) = v67 >> 8;
          if (v67 >> 8 > 0x40) {
            operator new[]();
          }
          if (v67 <= 0xFF) {
            unint64_t v68 = 0;
          }
          else {
            unint64_t v68 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v67) + 63);
          }
          v161[0] = (void *)(v68 & v59);
          unint64_t v69 = llvm::ConstantInt::get(v66, (llvm::LLVMContext *)v161, v63);
          if (LODWORD(v161[1]) >= 0x41 && v161[0]) {
            MEMORY[0x1D25D9CB0](v161[0], 0x1000C8000313F17);
          }
          uint64_t v169 = v69;
          unint64_t IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType((llvm::DataLayout *)a3, *(void *)(v8 + 88), &v168, 2);
          *(_OWORD *)unsigned int v149 = v155;
          int v150 = v152;
          uint64_t v151 = 0x400000000;
          if (v157) {
            sub_1CC2D48F8((uint64_t)&v150, (uint64_t *)&v156);
          }
          unsigned int v154 = v160;
          if (v160 > 0x40) {
            operator new[]();
          }
          uint64_t v153 = __src;
          llvm::APInt::operator+=((uint64_t)&v153, IndexedOffsetInType);
          if (v59) {
            uint64_t v71 = 0;
          }
          else {
            uint64_t v71 = v9;
          }
          *(_OWORD *)int v161 = *(_OWORD *)v149;
          uint64_t v162 = v164;
          uint64_t v163 = 0x400000000;
          if (v151) {
            sub_1CC2D48F8((uint64_t)&v162, (uint64_t *)&v150);
          }
          unsigned int v166 = v154;
          if (v154 > 0x40) {
            operator new[]();
          }
          int v165 = (const llvm::Value *)v153;
          int v167 = v71;
          uint64_t v72 = sub_1CC2D66AC(*(void *)(v8 + 80) + 152 * v59, (uint64_t)v161);
          *(void *)(v72 + 144) = v167;
          if (v166 >= 0x41 && v165) {
            MEMORY[0x1D25D9CB0](v165, 0x1000C8000313F17);
          }
          uint64_t v73 = (char *)v162;
          if (v163)
          {
            uint64_t v74 = 24 * v163;
            do
            {
              if (*(_DWORD *)&v73[v74 - 8] >= 0x41u)
              {
                uint64_t v75 = *(void *)&v73[v74 - 16];
                if (v75) {
                  MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
                }
              }
              v74 -= 24;
            }
            while (v74);
            uint64_t v73 = (char *)v162;
          }
          if (v73 != v164) {
            free(v73);
          }
          if (v154 >= 0x41 && v153) {
            MEMORY[0x1D25D9CB0](v153, 0x1000C8000313F17);
          }
          BOOL v76 = (char *)v150;
          if (v151)
          {
            uint64_t v77 = 24 * v151;
            do
            {
              if (*(_DWORD *)&v76[v77 - 8] >= 0x41u)
              {
                uint64_t v78 = *(void *)&v76[v77 - 16];
                if (v78) {
                  MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
                }
              }
              v77 -= 24;
            }
            while (v77);
            BOOL v76 = (char *)v150;
          }
          if (v76 != v152) {
            free(v76);
          }
          ++v59;
        }
        while (v59 < *(unsigned int *)(*(void *)(v8 + 88) + 32));
      }
      goto LABEL_9;
    }
    unint64_t v39 = *(unsigned int *)(a3 + 240);
    uint64_t v40 = *(void *)(a3 + 232) + 16 * v39;
    while (1)
    {
      uint64_t v41 = v36;
      if ((v37 & 0xFE) == 0x12) {
        uint64_t v41 = **(void **)(v36 + 16);
      }
      unsigned int v42 = *(_DWORD *)(v41 + 8);
      if (v42 < 0x100) {
        goto LABEL_57;
      }
      unsigned int v43 = v42 >> 8;
      uint64_t v44 = *(void *)(a3 + 232);
      if (v39)
      {
        uint64_t v44 = *(void *)(a3 + 232);
        unint64_t v45 = *(unsigned int *)(a3 + 240);
        do
        {
          unint64_t v46 = v45 >> 1;
          uint64_t v47 = v44 + 16 * (v45 >> 1);
          unsigned int v48 = *(_DWORD *)(v47 + 8);
          uint64_t v49 = v47 + 16;
          v45 += ~(v45 >> 1);
          if (v48 < v43) {
            uint64_t v44 = v49;
          }
          else {
            unint64_t v45 = v46;
          }
        }
        while (v45);
      }
      if (v44 == v40 || *(_DWORD *)(v44 + 8) != v43) {
LABEL_57:
      }
        uint64_t v44 = *(void *)(a3 + 232);
      unsigned int v50 = *((unsigned __int8 *)v35 + 16);
      if (v50 < 0x1C || v50 - 66 > 0xC) {
        break;
      }
      if (v50 != 77)
      {
        unsigned int v89 = *(_DWORD *)(v44 + 12);
        LODWORD(v161[0]) = 0;
        v161[1] = 0;
        uint64_t v162 = v164;
        uint64_t v163 = 0x400000000;
        unsigned int v166 = v89;
        if (v89 > 0x40) {
          operator new[]();
        }
        int v165 = 0;
        int v90 = v162;
LABEL_159:
        if (v90 != v164) {
          free(v90);
        }
        goto LABEL_80;
      }
      unsigned int v35 = (uint64_t *)*(v35 - 4);
      uint64_t v36 = *v35;
      unsigned int v37 = *(_DWORD *)(*v35 + 8);
      if (*v35) {
        BOOL v52 = *(_DWORD *)(*v35 + 8) == 15;
      }
      else {
        BOOL v52 = 0;
      }
      if (!v52) {
        goto LABEL_67;
      }
    }
    if (v50 != 62)
    {
      if ((v37 & 0xFE) == 0x12) {
        unsigned int v37 = *(_DWORD *)(**(void **)(v36 + 16) + 8);
      }
      if (v37 < 0x100) {
        goto LABEL_156;
      }
      unsigned int v91 = v37 >> 8;
      uint64_t v92 = *(void *)(a3 + 232);
      if (v39)
      {
        uint64_t v92 = *(void *)(a3 + 232);
        do
        {
          unint64_t v93 = v39 >> 1;
          uint64_t v94 = v92 + 16 * (v39 >> 1);
          unsigned int v95 = *(_DWORD *)(v94 + 8);
          uint64_t v96 = v94 + 16;
          v39 += ~(v39 >> 1);
          if (v95 < v91) {
            uint64_t v92 = v96;
          }
          else {
            unint64_t v39 = v93;
          }
        }
        while (v39);
      }
      if (v92 == v40 || *(_DWORD *)(v92 + 8) != v91) {
LABEL_156:
      }
        uint64_t v92 = *(void *)(a3 + 232);
      unsigned int v97 = *(_DWORD *)(v92 + 12);
      LODWORD(v161[0]) = 0;
      v161[1] = 0;
      uint64_t v162 = v164;
      uint64_t v163 = 0x400000000;
      unsigned int v166 = v97;
      if (v97 > 0x40) {
        operator new[]();
      }
      int v165 = 0;
      int v90 = v162;
      goto LABEL_159;
    }
    BOOL v79 = (void *)*(unsigned int *)(v44 + 12);
    LODWORD(v169) = v79;
    if (v79 > 0x40) {
      operator new[]();
    }
    uint64_t v168 = 0;
    uint64_t v145 = v9;
    uint64_t v148 = v8;
    int v80 = *((_DWORD *)v35 + 5);
    if ((v80 & 0x40000000) != 0)
    {
      int64_t v82 = (uint64_t *)*(v35 - 1);
      uint64_t v81 = v80 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v81 = v80 & 0x7FFFFFF;
      int64_t v82 = &v35[-4 * v81];
    }
    v161[0] = &v162;
    v161[1] = (void *)0x600000000;
    unint64_t v83 = 32 * v81 - 32;
    if (v83 >= 0xC1) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v84 = &v162;
    if (v81 == 1)
    {
      int v9 = v145;
    }
    else
    {
      uint64_t v85 = (void **)(v82 + 4);
      unsigned int v86 = &v162;
      uint64_t v87 = 32 * v81 - 32;
      int v9 = v145;
      do
      {
        int v88 = *v85;
        v85 += 4;
        *v86++ = v88;
        v87 -= 32;
      }
      while (v87);
      uint64_t v84 = (void **)v161[0];
    }
    LODWORD(v161[1]) = v83 >> 5;
    uint64_t v98 = 3;
    if (*((unsigned char *)v35 + 16) == 62) {
      uint64_t v98 = 8;
    }
    int v99 = llvm::GEPOperator::accumulateConstantOffset(v35[v98], (llvm::Constant **)v84, (v83 >> 5), (llvm::DataLayout *)a3, (llvm::APInt *)&v168, 0, a7);
    if (v161[0] == &v162)
    {
      if (v99)
      {
LABEL_166:
        LODWORD(v161[0]) = 0;
        v161[1] = 0;
        uint64_t v162 = v164;
        uint64_t v163 = 0x400000000;
        unsigned int v166 = v169;
        if (v169 > 0x40) {
          operator new[]();
        }
        int v165 = v168;
        sub_1CC2D66AC((uint64_t)&v155, (uint64_t)v161);
        if (v166 >= 0x41 && v165) {
          MEMORY[0x1D25D9CB0](v165, 0x1000C8000313F17);
        }
        uint64_t v100 = (char *)v162;
        if (v163)
        {
          uint64_t v101 = 24 * v163;
          do
          {
            if (*(_DWORD *)&v100[v101 - 8] >= 0x41u)
            {
              uint64_t v102 = *(void *)&v100[v101 - 16];
              if (v102) {
                MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
              }
            }
            v101 -= 24;
          }
          while (v101);
          uint64_t v100 = (char *)v162;
        }
        uint64_t v8 = v148;
        if (v100 != v164) {
          free(v100);
        }
        unsigned int v35 = (uint64_t *)v35[-4 * (*((_DWORD *)v35 + 5) & 0x7FFFFFF)];
LABEL_250:
        if (v169 >= 0x41 && v168) {
          MEMORY[0x1D25D9CB0](v168, 0x1000C8000313F17);
        }
        goto LABEL_80;
      }
    }
    else
    {
      free(v161[0]);
      if (v99) {
        goto LABEL_166;
      }
    }
    v149[0] = &v150;
    v149[1] = (void *)0x400000000;
    int v103 = *((_DWORD *)v35 + 5);
    uint64_t v104 = v103 & 0x7FFFFFF;
    if ((v103 & 0x7FFFFFFu) < 2)
    {
      LODWORD(v107) = 1;
    }
    else
    {
      unsigned int v105 = 0;
      uint64_t v106 = v35 + 4;
      uint64_t v107 = 1;
      while (1)
      {
        uint64_t v108 = v106[-4 * (*((_DWORD *)v35 + 5) & 0x7FFFFFF)];
        if (!v108 || *(unsigned char *)(v108 + 16) != 16) {
          break;
        }
        if (v105 >= HIDWORD(v149[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v149[0] + v105) = v108;
        unsigned int v105 = ++LODWORD(v149[1]);
        ++v107;
        v106 += 4;
        if (v104 == v107)
        {
          LODWORD(v107) = v104;
          break;
        }
      }
    }
    if (v107 + 1 == v104)
    {
      sub_1CC2D6A60(v35[4 * v107 + -4 * (*((_DWORD *)v35 + 5) & 0x7FFFFFF)], (uint64_t)&v155);
      uint64_t v110 = llvm::DataLayout::getIndexedOffsetInType((llvm::DataLayout *)a3, v35[8], (const llvm::Value **)v149[0], LODWORD(v149[1]));
      uint64_t v111 = v169;
      if (v169 > 0x40)
      {
        uint64_t v113 = v79;
        *(void *)uint64_t v168 = v110;
        bzero((char *)v168 + 8, (((unint64_t)(v111 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        if (v169) {
          unint64_t v112 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v169;
        }
        else {
          unint64_t v112 = 0;
        }
        uint64_t v113 = v79;
        uint64_t v168 = (const llvm::Value *)(v112 & v110);
      }
      unsigned int v117 = (llvm::Type *)v35[9];
      unint64_t v118 = (unint64_t)(sub_1CB83544C(a3, (uint64_t)v117) + 7) >> 3;
      BOOL v120 = v119 == 1;
      uint64_t v122 = 1 << llvm::DataLayout::getAlignment((llvm::DataLayout *)a3, v117, 1);
      if (v120) {
      int v123 = v122 - 1 + v118;
      }
      uint64_t v124 = -v122;
      unsigned int v125 = v160;
      unsigned int v126 = v160 - v113;
      int v9 = v145;
      if (v160 > v113)
      {
        if (v155 != -1)
        {
          BOOL v127 = v155 >= v126;
          int v128 = v155 - v126;
          if (!v127) {
            int v128 = 0;
          }
          LODWORD(v155) = v128;
        }
        p_src = (uint64_t *)&__src;
        if (v160 >= 0x41) {
          p_src = (uint64_t *)__src;
        }
        uint64_t v130 = *p_src;
        LODWORD(v161[1]) = v113;
        if (v113) {
          unint64_t v131 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v113;
        }
        else {
          unint64_t v131 = 0;
        }
        v161[0] = (void *)(v131 & v130);
        if (v160 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        __src = v161[0];
        unsigned int v160 = v161[1];
        LODWORD(v161[1]) = 32;
        v161[0] = v113;
        sub_1CC2D7224((uint64_t)&v155, 3, (uint64_t *)v161);
        unsigned int v125 = v160;
      }
      if (v113 > v125)
      {
        if (v155 != -1)
        {
          if (v113 - v125 + v155 < v125) {
            unsigned int v125 = v113 - v125 + v155;
          }
          LODWORD(v155) = v125;
        }
        llvm::APInt::sext((uint64_t)&__src, v113, (uint64_t)v161);
        if (v160 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        __src = v161[0];
        unsigned int v160 = v161[1];
        LODWORD(v161[1]) = 32;
        v161[0] = v113;
        sub_1CC2D7224((uint64_t)&v155, 2, (uint64_t *)v161);
      }
      uint64_t v132 = v124 & v123;
      LODWORD(v161[1]) = v113;
      uint64_t v8 = v148;
      if (v113) {
        unint64_t v133 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v113;
      }
      else {
        unint64_t v133 = 0;
      }
      v161[0] = (void *)(v133 & v132);
      sub_1CC2D6F5C((uint64_t)&v155, (llvm::APInt *)v161);
      char v134 = (char)v169;
      if (v169 == v160)
      {
        if (v169 >= 0x41)
        {
          uint64_t v136 = 0;
          uint64_t v137 = (unint64_t *)__src;
          unsigned int v138 = v168;
          unint64_t v139 = ((unint64_t)v169 + 63) >> 6;
          unint64_t v140 = v139;
          do
          {
            uint64_t v141 = *(void *)v138;
            unsigned int v138 = (const llvm::Value *)((char *)v138 + 8);
            unint64_t v142 = v141 + *v137;
            BOOL v143 = v142 + 1 <= *v137;
            if (v136)
            {
              ++v142;
              uint64_t v136 = v143;
            }
            else
            {
              uint64_t v136 = v142 < *v137;
            }
            *v137++ = v142;
            --v140;
          }
          while (v140);
          *((void *)__src + (v139 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v134;
          uint64_t v8 = v148;
          int v9 = v145;
        }
        else
        {
          if (v169) {
            unint64_t v135 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v169;
          }
          else {
            unint64_t v135 = 0;
          }
          __src = (void *)(v135 & ((unint64_t)v168 + (void)__src));
        }
      }
      else
      {
        LODWORD(v155) = -1;
      }
      unsigned int v35 = (uint64_t *)v35[-4 * (*((_DWORD *)v35 + 5) & 0x7FFFFFF)];
    }
    else
    {
      LODWORD(v161[0]) = -1;
      v161[1] = 0;
      uint64_t v162 = v164;
      uint64_t v163 = 0x400000000;
      unsigned int v166 = 1;
      int v165 = 0;
      sub_1CC2D66AC((uint64_t)&v155, (uint64_t)v161);
      if (v166 >= 0x41 && v165) {
        MEMORY[0x1D25D9CB0](v165, 0x1000C8000313F17);
      }
      uint64_t v114 = (char *)v162;
      int v9 = v145;
      if (v163)
      {
        uint64_t v115 = 24 * v163;
        do
        {
          if (*(_DWORD *)&v114[v115 - 8] >= 0x41u)
          {
            uint64_t v116 = *(void *)&v114[v115 - 16];
            if (v116) {
              MEMORY[0x1D25D9CB0](v116, 0x1000C8000313F17);
            }
          }
          v115 -= 24;
        }
        while (v115);
        uint64_t v114 = (char *)v162;
      }
      uint64_t v8 = v148;
      if (v114 != v164) {
        free(v114);
      }
      unsigned int v35 = 0;
    }
    if (v149[0] != &v150) {
      free(v149[0]);
    }
    goto LABEL_250;
  }

  return sub_1CC2D3E48();
}

uint64_t sub_1CC2D66AC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a1 != a2)
  {
    unint64_t v4 = (void **)(a1 + 16);
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5 != a2 + 32)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      uint64_t v7 = *(unsigned int *)(a1 + 24);
      if (v7)
      {
        uint64_t v8 = 24 * v7;
        do
        {
          if (*(_DWORD *)&v6[v8 - 8] >= 0x41u)
          {
            uint64_t v9 = *(void *)&v6[v8 - 16];
            if (v9) {
              MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
            }
          }
          v8 -= 24;
        }
        while (v8);
        uint64_t v6 = (char *)*v4;
      }
      if (v6 != (char *)(a1 + 32)) {
        free(v6);
      }
      int v10 = (_DWORD *)(a2 + 24);
      uint64_t v11 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v11;
      *(void *)(a2 + 16) = a2 + 32;
      *(_DWORD *)(a2 + 28) = 0;
LABEL_13:
      _DWORD *v10 = 0;
      goto LABEL_14;
    }
    int v10 = (_DWORD *)(a2 + 24);
    unint64_t v14 = *(unsigned int *)(a2 + 24);
    uint64_t v15 = *(unsigned int *)(a1 + 24);
    if (v15 >= v14)
    {
      uint64_t v19 = *v4;
      if (v14)
      {
        uint64_t v20 = v5 + 24 * v14;
        do
        {
          *(_DWORD *)uint64_t v19 = *(_DWORD *)v5;
          if (*((_DWORD *)v19 + 4) >= 0x41u)
          {
            uint64_t v21 = v19[1];
            if (v21) {
              MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
            }
          }
          v19[1] = *(void *)(v5 + 8);
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v5 + 16);
          *(_DWORD *)(v5 + 16) = 0;
          v19 += 3;
          v5 += 24;
        }
        while (v5 != v20);
        uint64_t v22 = *(void **)(a1 + 16);
        LODWORD(v15) = *(_DWORD *)(a1 + 24);
      }
      else
      {
        uint64_t v22 = v19;
      }
      for (uint64_t i = &v22[3 * v15]; i != v19; i -= 3)
      {
        if (*((_DWORD *)i - 2) >= 0x41u)
        {
          uint64_t v35 = *(i - 2);
          if (v35) {
            MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
          }
        }
      }
      *(_DWORD *)(a1 + 24) = v14;
      uint64_t v36 = *(unsigned int *)(a2 + 24);
      if (v36)
      {
        uint64_t v37 = *(void *)(a2 + 16);
        uint64_t v38 = 24 * v36;
        do
        {
          if (*(_DWORD *)(v37 + v38 - 8) >= 0x41u)
          {
            uint64_t v39 = *(void *)(v37 + v38 - 16);
            if (v39) {
              MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
            }
          }
          v38 -= 24;
        }
        while (v38);
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 28) >= v14)
    {
      if (v15)
      {
        uint64_t v23 = v5 + 24 * v15;
        int v24 = (char *)*v4 + 16;
        do
        {
          *(v24 - 4) = *(_DWORD *)v5;
          if (*v24 >= 0x41u)
          {
            uint64_t v25 = *((void *)v24 - 1);
            if (v25) {
              MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
            }
          }
          *((void *)v24 - 1) = *(void *)(v5 + 8);
          *int v24 = *(_DWORD *)(v5 + 16);
          v24 += 6;
          *(_DWORD *)(v5 + 16) = 0;
          v5 += 24;
        }
        while (v5 != v23);
        goto LABEL_42;
      }
    }
    else
    {
      if (v15)
      {
        uint64_t v16 = (char *)*v4;
        uint64_t v17 = 24 * v15;
        do
        {
          if (*(_DWORD *)&v16[v17 - 8] >= 0x41u)
          {
            uint64_t v18 = *(void *)&v16[v17 - 16];
            if (v18) {
              MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
            }
          }
          v17 -= 24;
        }
        while (v17);
      }
      *(_DWORD *)(a1 + 24) = 0;
      sub_1CC2D4C3C(a1 + 16, v14);
    }
    uint64_t v15 = 0;
LABEL_42:
    uint64_t v26 = *(void *)(a2 + 16);
    uint64_t v27 = *(unsigned int *)(a2 + 24);
    if (v15 != v27)
    {
      uint64_t v28 = v26 + 24 * v27;
      uint64_t v29 = (uint64_t)*v4 + 24 * v15;
      uint64_t v30 = v26 + 24 * v15;
      do
      {
        *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
        *(_DWORD *)(v29 + 16) = *(_DWORD *)(v30 + 16);
        *(void *)(v29 + 8) = *(void *)(v30 + 8);
        *(_DWORD *)(v30 + 16) = 0;
        v30 += 24;
        v29 += 24;
      }
      while (v30 != v28);
      uint64_t v26 = *(void *)(a2 + 16);
    }
    *(_DWORD *)(a1 + 24) = v14;
    uint64_t v31 = *v10;
    if (v31)
    {
      uint64_t v32 = 24 * v31;
      do
      {
        if (*(_DWORD *)(v26 + v32 - 8) >= 0x41u)
        {
          uint64_t v33 = *(void *)(v26 + v32 - 16);
          if (v33) {
            MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
          }
        }
        v32 -= 24;
      }
      while (v32);
    }
    goto LABEL_13;
  }
LABEL_14:
  if (*(_DWORD *)(a1 + 136) >= 0x41u)
  {
    uint64_t v12 = *(void *)(a1 + 128);
    if (v12) {
      MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
    }
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  return a1;
}

void sub_1CC2D6A60(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 < 0x1C || v4 - 59 < 0xFFFFFFEE)
  {
    sub_1CC2D710C((uint64_t)&v39, (uint64_t *)a1);
    sub_1CC2D66AC(a2, (uint64_t)&v39);
    if (v45 >= 0x41 && v44) {
      MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
    }
    uint64_t v6 = (char *)v41;
    if (!v42) {
      goto LABEL_56;
    }
    uint64_t v7 = 24 * v42;
    do
    {
      if (*(_DWORD *)&v6[v7 - 8] >= 0x41u)
      {
        uint64_t v8 = *(void *)&v6[v7 - 16];
        if (v8) {
          MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
        }
      }
      v7 -= 24;
    }
    while (v7);
LABEL_55:
    uint64_t v6 = (char *)v41;
LABEL_56:
    if (v6 != (char *)&v43) {
      free(v6);
    }
    return;
  }
  uint64_t v9 = *(void *)(a1 - 64);
  uint64_t v10 = *(void *)(a1 - 32);
  if (v10) {
    BOOL v11 = *(unsigned char *)(v10 + 16) == 16;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11)
  {
    if (llvm::Instruction::isCommutative((llvm::Instruction *)a1))
    {
      if (*(unsigned char *)(v9 + 16) == 16) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v12) {
        uint64_t v9 = v10;
      }
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  if (v4 != 54)
  {
    if (v4 == 41 && v10 != 0)
    {
      sub_1CC2D6A60(v9, a2);
      uint64_t v14 = *(unsigned int *)(v10 + 32);
      if (v14 == *(_DWORD *)(a2 + 136))
      {
        if (v14 >= 0x41)
        {
          uint64_t v31 = 0;
          uint64_t v32 = *(unint64_t **)(a2 + 128);
          uint64_t v33 = *(uint64_t **)(v10 + 24);
          unint64_t v34 = (unint64_t)(v14 + 63) >> 6;
          unint64_t v35 = v34;
          do
          {
            uint64_t v36 = *v33++;
            unint64_t v37 = v36 + *v32;
            BOOL v38 = v37 + 1 <= *v32;
            if (v31)
            {
              ++v37;
              uint64_t v31 = v38;
            }
            else
            {
              uint64_t v31 = v37 < *v32;
            }
            *v32++ = v37;
            --v35;
          }
          while (v35);
          *(void *)(*(void *)(a2 + 128) + 8 * (v34 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
        }
        else
        {
          if (v14) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
          }
          else {
            unint64_t v15 = 0;
          }
          *(void *)(a2 + 128) = v15 & (*(void *)(a2 + 128) + *(void *)(v10 + 24));
        }
        return;
      }
LABEL_59:
      *(_DWORD *)a2 = -1;
      return;
    }
LABEL_46:
    sub_1CC2D710C((uint64_t)&v39, (uint64_t *)a1);
    sub_1CC2D66AC(a2, (uint64_t)&v39);
    if (v45 >= 0x41 && v44) {
      MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
    }
    uint64_t v6 = (char *)v41;
    if (!v42) {
      goto LABEL_56;
    }
    uint64_t v22 = 24 * v42;
    do
    {
      if (*(_DWORD *)&v6[v22 - 8] >= 0x41u)
      {
        uint64_t v23 = *(void *)&v6[v22 - 16];
        if (v23) {
          MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
        }
      }
      v22 -= 24;
    }
    while (v22);
    goto LABEL_55;
  }
  if (!v10) {
    goto LABEL_46;
  }
  sub_1CC2D6A60(v9, a2);
  uint64_t v16 = *(unsigned int *)(v10 + 32);
  if (v16 != *(_DWORD *)(a2 + 136)) {
    goto LABEL_59;
  }
  uint64_t v17 = (uint64_t *)(v10 + 24);
  uint64_t v18 = (unint64_t *)(a2 + 128);
  if (v16 <= 0x40)
  {
    uint64_t v19 = *v17;
    if (!*v17) {
      return;
    }
    if (v16 <= v19)
    {
      unsigned int v40 = v16;
      uint64_t v39 = 0;
      sub_1CC2D6F5C(a2, (llvm::APInt *)&v39);
      return;
    }
    unsigned int v20 = __clz(__rbit64(*v18));
    if (v16 >= v20) {
      unsigned int v21 = v20;
    }
    else {
      unsigned int v21 = v16;
    }
LABEL_68:
    if (v21 >= v19)
    {
      if (*(_DWORD *)a2 == -1)
      {
LABEL_73:
        sub_1CC2D7224(a2, 0, v17);
        unsigned int v29 = *(_DWORD *)(a2 + 136);
        unsigned int v40 = v29;
        if (v29 > 0x40) {
          operator new[]();
        }
        if (v29 == v19)
        {
          unint64_t v30 = 0;
          if (v19 >= 0x41 && *v18) {
            MEMORY[0x1D25D9CB0](*v18, 0x1000C8000313F17);
          }
        }
        else
        {
          unint64_t v30 = *v18 >> v19;
        }
        *(void *)(a2 + 128) = v30;
        *(_DWORD *)(a2 + 136) = v29;
        return;
      }
      if (*(_DWORD *)a2 + (int)v19 < v16) {
        LODWORD(v16) = *(_DWORD *)a2 + v19;
      }
    }
    *(_DWORD *)a2 = v16;
    goto LABEL_73;
  }
  int v24 = 0;
  int64_t v25 = (unint64_t)(v16 + 63) >> 6;
  do
  {
    if (v25-- < 1) {
      break;
    }
    unint64_t v27 = *(void *)(*v17 + 8 * v25);
    v24 += __clz(v27);
  }
  while (!v27);
  int v28 = v16 | 0xFFFFFFC0;
  if ((v16 & 0x3F) == 0) {
    int v28 = 0;
  }
  if (v24 + v28 != v16)
  {
    LODWORD(v19) = *(_DWORD *)*v17;
    if (v16 <= v19)
    {
      unsigned int v40 = v16;
      operator new[]();
    }
    unsigned int v21 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(a2 + 128));
    goto LABEL_68;
  }
}

uint64_t sub_1CC2D6F5C(uint64_t a1, llvm::APInt *this)
{
  uint64_t v3 = *((unsigned int *)this + 2);
  if (v3 != *(_DWORD *)(a1 + 136))
  {
    *(_DWORD *)a1 = -1;
    return a1;
  }
  if (v3 <= 0x40)
  {
    unint64_t v5 = *(void *)this;
    if (*(void *)this)
    {
      if (v5 == 1) {
        return a1;
      }
      goto LABEL_23;
    }
LABEL_14:
    *(_DWORD *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 24);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = 24 * v12;
      do
      {
        if (*(_DWORD *)(v13 + v14 - 8) >= 0x41u)
        {
          uint64_t v15 = *(void *)(v13 + v14 - 16);
          if (v15) {
            MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
          }
        }
        v14 -= 24;
      }
      while (v14);
      LODWORD(v3) = *((_DWORD *)this + 2);
    }
    *(_DWORD *)(a1 + 24) = 0;
    if (v3 <= 0x40)
    {
      unint64_t v5 = *(void *)this;
LABEL_23:
      unsigned int v16 = __clz(__rbit64(v5));
      if (v3 >= v16) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v3;
      }
      goto LABEL_27;
    }
LABEL_26:
    unsigned int v17 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
LABEL_27:
    uint64_t v18 = (void *)(a1 + 128);
    unsigned int v19 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 != -1)
    {
      BOOL v20 = v19 >= v17;
      unsigned int v21 = v19 - v17;
      if (!v20) {
        unsigned int v21 = 0;
      }
      *(_DWORD *)a1 = v21;
    }
    llvm::APInt::operator*(a1 + 128, this, (uint64_t)&v23);
    if (*(_DWORD *)(a1 + 136) >= 0x41u && *v18) {
      MEMORY[0x1D25D9CB0](*v18, 0x1000C8000313F17);
    }
    *(void *)(a1 + 128) = v23;
    *(_DWORD *)(a1 + 136) = v24;
    sub_1CC2D7224(a1, 1, (uint64_t *)this);
    return a1;
  }
  int v6 = 0;
  int64_t v7 = (unint64_t)(v3 + 63) >> 6;
  do
  {
    if (v7-- < 1) {
      break;
    }
    unint64_t v9 = *(void *)(*(void *)this + 8 * v7);
    v6 += __clz(v9);
  }
  while (!v9);
  int v10 = v3 | 0xFFFFFFC0;
  if ((v3 & 0x3F) == 0) {
    int v10 = 0;
  }
  int v11 = v6 + v10;
  if (v11 != v3 - 1)
  {
    if (v11 != v3) {
      goto LABEL_26;
    }
    goto LABEL_14;
  }
  return a1;
}

uint64_t sub_1CC2D710C(uint64_t result, uint64_t *a2)
{
  *(_DWORD *)uint64_t result = -1;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = result + 32;
  *(void *)(result + 24) = 0x400000000;
  *(_DWORD *)(result + 136) = 1;
  *(void *)(result + 128) = 0;
  uint64_t v2 = *a2;
  if (*a2 && *(unsigned char *)(v2 + 8) == 13)
  {
    *(_DWORD *)uint64_t result = 0;
    *(void *)(result + 8) = a2;
    unint64_t v3 = *(unsigned int *)(v2 + 8);
    if (v3 >> 8 >= 0x41) {
      operator new[]();
    }
    *(void *)(result + 128) = 0;
    *(_DWORD *)(result + 136) = v3 >> 8;
  }
  return result;
}

void sub_1CC2D7224(uint64_t a1, int a2, uint64_t *a3)
{
  if (*(void *)(a1 + 8))
  {
    unsigned int v4 = *((_DWORD *)a3 + 2);
    int v13 = a2;
    unsigned int v15 = v4;
    if (v4 > 0x40) {
      operator new[]();
    }
    uint64_t v14 = *a3;
    uint64_t v5 = *(unsigned int *)(a1 + 24);
    unint64_t v6 = *(void *)(a1 + 16);
    int64_t v7 = (char *)&v13;
    if (v5 >= *(_DWORD *)(a1 + 28))
    {
      unint64_t v9 = (unint64_t *)(a1 + 16);
      unint64_t v10 = v5 + 1;
      BOOL v11 = v6 + 24 * v5 > (unint64_t)&v13;
      if (v6 <= (unint64_t)&v13 && v11)
      {
        uint64_t v12 = (char *)&v13 - v6;
        sub_1CC2D4C3C(a1 + 16, v10);
        unint64_t v6 = *v9;
        int64_t v7 = &v12[*v9];
      }
      else
      {
        sub_1CC2D4C3C(a1 + 16, v10);
        unint64_t v6 = *v9;
        int64_t v7 = (char *)&v13;
      }
    }
    uint64_t v8 = v6 + 24 * *(unsigned int *)(a1 + 24);
    *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
    *(_DWORD *)(v8 + 16) = *((_DWORD *)v7 + 4);
    *(void *)(v8 + 8) = *((void *)v7 + 1);
    *((_DWORD *)v7 + 4) = 0;
    ++*(_DWORD *)(a1 + 24);
    if (v15 >= 0x41)
    {
      if (v14) {
        MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
      }
    }
  }
}

BOOL sub_1CC2D7378(int *a1, int *a2)
{
  unsigned int v2 = a1[34];
  if (v2 != a2[34]) {
    return 0;
  }
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (!(v5 | v6)) {
    goto LABEL_13;
  }
  if (v5 != v6) {
    return 0;
  }
  unsigned int v7 = a1[6];
  if (v7 != a2[6]) {
    return 0;
  }
  if (v7)
  {
    uint64_t v8 = *((void *)a1 + 2);
    uint64_t v9 = v8 + 24 * v7;
    unint64_t v10 = (const void **)(*((void *)a2 + 2) + 8);
    uint64_t v11 = v8 + 8;
    do
    {
      uint64_t v12 = v11 - 8;
      if (*(_DWORD *)(v11 - 8) != *((_DWORD *)v10 - 2)) {
        return 0;
      }
      uint64_t v13 = *(unsigned int *)(v11 + 8);
      if (v13 > 0x40)
      {
        if (memcmp(*(const void **)v11, *v10, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8)) {
          return 0;
        }
      }
      else if (*(const void **)v11 != *v10)
      {
        return 0;
      }
      v10 += 3;
      v11 += 24;
    }
    while (v12 + 24 != v9);
  }
LABEL_13:
  if (v2 >= 0x41) {
    operator new[]();
  }
  unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  if (!v2) {
    unint64_t v14 = 0;
  }
  int v17 = *a1;
  if (*a1 <= *a2) {
    int v17 = *a2;
  }
  return !v17 && (v14 & (*((void *)a1 + 16) - *((void *)a2 + 16))) == 0;
}

uint64_t sub_1CC2D7744(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (a3 - a2 + v4 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3 != a2)
  {
    uint64_t v5 = (_DWORD *)(*(void *)result + 4 * v4);
    do
      *v5++ = v3++;
    while (a3 != v3);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 + a3 - a2;
  return result;
}

void sub_1CC2D77CC(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        (*(void (**)(void))v3[2])();
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_1CC2D7860()
{
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable combining of interleaved loads";
  v1.n128_u64[1] = 38;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCCD2A0, "disable-interleaved-load-combine", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCD2A0, &dword_1CB82C000);
}

void llvm::IntrinsicLowering::LowerIntrinsicCall(llvm::IntrinsicLowering *this, llvm::CallInst *a2)
{
  uint64_t v4 = 0;
  v233[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **(void **)a2;
  v203[0] = v204;
  v203[1] = 0x200000000;
  v204[6] = v5;
  v204[7] = &v210;
  v204[8] = &v211;
  v204[9] = 0;
  int v205 = 0;
  __int16 v206 = 512;
  char v207 = 7;
  uint64_t v208 = 0;
  uint64_t v209 = 0;
  uint64_t v210 = &unk_1F2616E88;
  uint64_t v6 = (char *)a2 + 24;
  uint64_t v8 = *((void *)a2 + 5);
  unsigned int v7 = (unsigned __int8 *)*((void *)a2 + 6);
  v204[4] = v8;
  v204[5] = v6;
  uint64_t v211 = &unk_1F2617008;
  v212[0] = (uint64_t)v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)v212, v7, 2);
    uint64_t v4 = v212[0];
  }
  sub_1CB8461A4((uint64_t)v203, 0, v4);
  if (!v212[0])
  {
LABEL_4:
    uint64_t v12 = *(llvm **)a2;
    uint64_t v13 = **(void ***)a2;
    uint64_t v14 = *((void *)a2 - 4);
    if (!v14 || *(unsigned char *)(v14 + 16) || *(void *)(v14 + 24) != *((void *)a2 + 9)) {
      uint64_t v14 = 0;
    }
    int v15 = *(_DWORD *)(v14 + 36);
    if (v15 > 162)
    {
      if (v15 > 236)
      {
        if (v15 <= 272)
        {
          switch(v15)
          {
            case 237:
            case 240:
              goto LABEL_162;
            case 238:
              uint64_t v23 = "powf";
              int v24 = "pow";
              int64_t v25 = "powl";
              goto LABEL_139;
            case 239:
            case 241:
            case 242:
            case 243:
            case 244:
              goto LABEL_100;
            case 245:
              goto LABEL_54;
            default:
              goto LABEL_223;
          }
        }
        if (v15 > 286)
        {
          if ((v15 - 287) >= 2)
          {
            if (v15 != 296)
            {
              if (v15 != 316) {
                goto LABEL_100;
              }
LABEL_162:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            uint64_t v23 = "truncf";
            int v24 = "trunc";
            int64_t v25 = "truncl";
LABEL_139:
            sub_1CC2D9B6C((uint64_t)a2, v23, v24, v25);
            goto LABEL_162;
          }
          if (!*((unsigned char *)this + 8))
          {
            int v58 = (llvm::raw_ostream *)llvm::errs(v12);
            unint64_t v59 = v58;
            uint64_t v60 = (void *)*((void *)v58 + 4);
            if (*((void *)v58 + 3) - (void)v60 > 0x33uLL)
            {
              qmemcpy(v60, "WARNING: this target does not support the llvm.stack", 52);
              uint64_t v61 = (void *)(*((void *)v58 + 4) + 52);
              *((void *)v59 + 4) = v61;
            }
            else
            {
              llvm::raw_ostream::write(v58, "WARNING: this target does not support the llvm.stack", 0x34uLL);
              uint64_t v61 = (void *)*((void *)v59 + 4);
            }
            int v62 = *(_DWORD *)(v14 + 36);
            if (v62 == 288) {
              int v63 = "save";
            }
            else {
              int v63 = "restore";
            }
            if (v62 == 288) {
              size_t v64 = 4;
            }
            else {
              size_t v64 = 7;
            }
            if (v64 <= *((void *)v59 + 3) - (void)v61)
            {
              memcpy(v61, v63, v64);
              size_t v65 = *((void *)v59 + 4) + v64;
              *((void *)v59 + 4) = v65;
            }
            else
            {
              llvm::raw_ostream::write(v59, v63, v64);
              size_t v65 = *((void *)v59 + 4);
            }
            if (*((void *)v59 + 3) - v65 > 0xB)
            {
              *(_DWORD *)(v65 + 8) = 170812265;
              *(void *)size_t v65 = *(void *)" intrinsic.\n";
              *((void *)v59 + 4) += 12;
            }
            else
            {
              llvm::raw_ostream::write(v59, " intrinsic.\n", 0xCuLL);
            }
          }
          *((unsigned char *)this + 8) = 1;
          if (*(_DWORD *)(v14 + 36) != 288) {
            goto LABEL_162;
          }
          NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v9, v10);
          goto LABEL_159;
        }
        if (v15 == 273)
        {
          uint64_t v23 = "sinf";
          int v24 = "sin";
          int64_t v25 = "sinl";
          goto LABEL_139;
        }
        if (v15 == 280)
        {
          uint64_t v23 = "sqrtf";
          int v24 = "sqrt";
          int64_t v25 = "sqrtl";
          goto LABEL_139;
        }
LABEL_100:
        Name = llvm::Value::getName((llvm::Value *)v14);
        __int16 v215 = 1283;
        BOOL v76 = "Code generator does not support intrinsic function '";
LABEL_218:
        v212[0] = (uint64_t)v76;
        int v213 = Name;
        uint64_t v214 = v75;
        v201[0] = (uint64_t)"'!";
        __int16 v202 = 259;
        sub_1CD3E3950(v212, v201, (uint64_t)&v216);
        llvm::report_fatal_error((llvm *)&v216, (const llvm::Twine *)1);
      }
      if (v15 <= 193)
      {
        switch(v15)
        {
          case 163:
          case 167:
            goto LABEL_162;
          case 164:
          case 168:
            NullValue = llvm::UndefValue::get(v12, v9);
            goto LABEL_159;
          case 175:
            uint64_t v23 = "logf";
            int v24 = "log";
            int64_t v25 = "logl";
            goto LABEL_139;
          case 176:
            uint64_t v23 = "log10f";
            int v24 = "log10";
            int64_t v25 = "log10l";
            goto LABEL_139;
          case 177:
            uint64_t v23 = "log2f";
            int v24 = "log2";
            int64_t v25 = "log2l";
            goto LABEL_139;
          default:
            goto LABEL_100;
        }
      }
      switch(v15)
      {
        case 194:
          uint64_t v102 = (llvm::Type ***)llvm::IntegerType::get(**(llvm::IntegerType ***)a2, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*(void *)this + 232) + 4));
          int v103 = (llvm::CastInst *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
          __int16 v220 = 257;
          unsigned int v105 = sub_1CBF56614((uint64_t)v203, v103, v102, 0, (uint64_t)&v216, v104);
          uint64_t v106 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
          uint64_t v107 = *(const char **)v106;
          uint64_t v108 = *((void *)v106 + 4);
          unint64_t v216 = (char *)v107;
          uint64_t v217 = v108;
          uint64_t v218 = (const char *)v105;
          unsigned int v48 = (uint64_t **)&v219;
          uint64_t v49 = *(uint64_t ***)v107;
          unsigned int v50 = "memcpy";
          break;
        case 197:
          uint64_t v109 = (llvm::Type ***)llvm::IntegerType::get(**(llvm::IntegerType ***)a2, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*(void *)this + 232) + 4));
          uint64_t v110 = (llvm::CastInst *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
          __int16 v220 = 257;
          unint64_t v112 = sub_1CBF56614((uint64_t)v203, v110, v109, 0, (uint64_t)&v216, v111);
          uint64_t v113 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
          uint64_t v114 = *(const char **)v113;
          uint64_t v115 = *((void *)v113 + 4);
          unint64_t v216 = (char *)v114;
          uint64_t v217 = v115;
          uint64_t v218 = (const char *)v112;
          unsigned int v48 = (uint64_t **)&v219;
          uint64_t v49 = *(uint64_t ***)v114;
          unsigned int v50 = "memmove";
          break;
        case 199:
          uint64_t v27 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
          uint64_t v28 = *(void *)this;
          uint64_t v29 = *(void *)v27;
          unsigned int v30 = *(_DWORD *)(*(void *)v27 + 8);
          if ((v30 & 0xFE) == 0x12) {
            unsigned int v30 = *(_DWORD *)(**(void **)(v29 + 16) + 8);
          }
          uint64_t v31 = *(void *)(v28 + 232);
          if (v30 < 0x100) {
            goto LABEL_51;
          }
          unsigned int v32 = v30 >> 8;
          unint64_t v33 = *(unsigned int *)(v28 + 240);
          uint64_t v34 = *(void *)(v28 + 232);
          if (v33)
          {
            uint64_t v34 = v31;
            unint64_t v35 = v33;
            do
            {
              unint64_t v36 = v35 >> 1;
              uint64_t v37 = v34 + 16 * (v35 >> 1);
              unsigned int v38 = *(_DWORD *)(v37 + 8);
              uint64_t v39 = v37 + 16;
              v35 += ~(v35 >> 1);
              if (v38 < v32) {
                uint64_t v34 = v39;
              }
              else {
                unint64_t v35 = v36;
              }
            }
            while (v35);
          }
          if (v34 == v31 + 16 * v33 || *(_DWORD *)(v34 + 8) != v32) {
LABEL_51:
          }
            uint64_t v34 = v31;
          unsigned int v40 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v29, (llvm::LLVMContext *)*(unsigned int *)(v34 + 4));
          unsigned int v42 = (llvm::Type ***)v40;
          if ((*(_DWORD *)(v29 + 8) & 0xFE) == 0x12)
          {
            uint64_t v195 = (llvm::Type *)*(unsigned int *)(v29 + 32);
            if (*(_DWORD *)(v29 + 8) == 19) {
              llvm::ScalableVectorType::get(v40, v195);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v40, v195);
            }
            unsigned int v42 = v196;
          }
          uint64_t v43 = (llvm::CastInst *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
          __int16 v220 = 257;
          uint64_t v44 = sub_1CBF56614((uint64_t)v203, v43, v42, 0, (uint64_t)&v216, v41);
          v212[0] = v27;
          unsigned int v45 = (llvm::CastInst *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
          uint64_t v46 = (llvm::Type ***)(*v13 + 1960);
          __int16 v220 = 257;
          v212[1] = (uint64_t)sub_1CBF56614((uint64_t)v203, v45, v46, 0, (uint64_t)&v216, v47);
          int v213 = v44;
          unsigned int v48 = (uint64_t **)&v214;
          uint64_t v49 = (uint64_t **)**((void **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
          unsigned int v50 = "memset";
          uint64_t v51 = (uint64_t **)v212;
LABEL_130:
          sub_1CC2D9764(v50, (uint64_t ***)a2, v51, v48, v49);
          goto LABEL_162;
        default:
          goto LABEL_100;
      }
      uint64_t v51 = (uint64_t **)&v216;
      goto LABEL_130;
    }
    if (v15 > 72)
    {
      if (v15 <= 139)
      {
        int v22 = v15 - 73;
        switch(v22)
        {
          case 0:
            goto LABEL_34;
          case 1:
            goto LABEL_100;
          case 2:
            uint64_t v23 = "expf";
            int v24 = "exp";
            int64_t v25 = "expl";
            goto LABEL_139;
          case 3:
            uint64_t v23 = "exp2f";
            int v24 = "exp2";
            int64_t v25 = "exp2l";
            goto LABEL_139;
          case 4:
LABEL_54:
            BOOL v52 = (llvm::Value *)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            goto LABEL_160;
          default:
            if (v22 != 126) {
              goto LABEL_100;
            }
            goto LABEL_162;
        }
      }
      if (v15 > 146)
      {
        if (v15 == 147)
        {
          uint64_t v66 = (llvm::raw_ostream *)llvm::errs(v12);
          unint64_t v67 = v66;
          unint64_t v68 = (void *)*((void *)v66 + 4);
          if (*((void *)v66 + 3) - (void)v68 > 0x2EuLL)
          {
            qmemcpy(v68, "WARNING: this target does not support the llvm.", 47);
            unint64_t v69 = (void *)(*((void *)v66 + 4) + 47);
            *((void *)v67 + 4) = v69;
          }
          else
          {
            llvm::raw_ostream::write(v66, "WARNING: this target does not support the llvm.", 0x2FuLL);
            unint64_t v69 = (void *)*((void *)v67 + 4);
          }
          int v70 = *(_DWORD *)(v14 + 36);
          if (v70 == 257) {
            uint64_t v71 = "return";
          }
          else {
            uint64_t v71 = "frame";
          }
          if (v70 == 257) {
            size_t v72 = 6;
          }
          else {
            size_t v72 = 5;
          }
          if (v72 <= *((void *)v67 + 3) - (void)v69)
          {
            memcpy(v69, v71, v72);
            size_t v73 = *((void *)v67 + 4) + v72;
            *((void *)v67 + 4) = v73;
          }
          else
          {
            llvm::raw_ostream::write(v67, v71, v72);
            size_t v73 = *((void *)v67 + 4);
          }
          if (*((void *)v67 + 3) - v73 > 0x12)
          {
            *(_DWORD *)(v73 + 15) = 170812265;
            *(_OWORD *)size_t v73 = *(_OWORD *)"address intrinsic.\n";
            *((void *)v67 + 4) += 19;
          }
          else
          {
            unsigned int v19 = "address intrinsic.\n";
            unsigned int v16 = v67;
            size_t v20 = 19;
LABEL_97:
            llvm::raw_ostream::write(v16, v19, v20);
          }
LABEL_98:
          NullValue = (llvm::Value *)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)a2, v17);
LABEL_159:
          BOOL v52 = NullValue;
LABEL_160:
          unsigned int v89 = a2;
          goto LABEL_161;
        }
        if (v15 != 154) {
          goto LABEL_100;
        }
        uint64_t v56 = (llvm::raw_ostream *)llvm::errs(v12);
        uint64_t v57 = (void *)*((void *)v56 + 4);
        if (*((void *)v56 + 3) - (void)v57 > 0x73uLL)
        {
          qmemcpy(v57, "WARNING: this target does not support the custom llvm.get.dynamic.area.offset.  It is being lowered to a constant 0\n", 116);
          *((void *)v56 + 4) += 116;
        }
        else
        {
          llvm::raw_ostream::write(v56, "WARNING: this target does not support the custom llvm.get.dynamic.area.offset.  It is being lowered to a constant 0\n", 0x74uLL);
        }
        uint64_t v12 = *(llvm **)a2;
        unint64_t v26 = 0;
      }
      else
      {
        if (v15 == 140)
        {
          uint64_t v23 = "floorf";
          int v24 = "floor";
          int64_t v25 = "floorl";
          goto LABEL_139;
        }
        if (v15 != 141) {
          goto LABEL_100;
        }
        if (*((unsigned char *)v12 + 8) == 7) {
          goto LABEL_162;
        }
LABEL_34:
        unint64_t v26 = 1;
      }
      NullValue = (llvm::Value *)llvm::ConstantInt::get(v12, v26, 0);
      goto LABEL_159;
    }
    if (v15 > 0x48)
    {
      switch(v15)
      {
        case 0:
          Name = llvm::Value::getName((llvm::Value *)v14);
          __int16 v215 = 1283;
          BOOL v76 = "Cannot lower a call to a non-intrinsic function '";
          goto LABEL_218;
        case 2:
          unsigned int v16 = (llvm::raw_ostream *)llvm::errs(v12);
          uint64_t v18 = (void *)*((void *)v16 + 4);
          if (*((void *)v16 + 3) - (void)v18 > 0x50uLL)
          {
            qmemcpy(v18, "WARNING: this target does not support the llvm.addressofreturnaddress intrinsic.\n", 81);
            *((void *)v16 + 4) += 81;
            goto LABEL_98;
          }
          unsigned int v19 = "WARNING: this target does not support the llvm.addressofreturnaddress intrinsic.\n";
          size_t v20 = 81;
          goto LABEL_97;
        case 4:
          goto LABEL_54;
        case 7:
          goto LABEL_162;
        case 9:
          uint64_t v116 = (llvm::ConstantInt **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
          unsigned int v117 = *v116;
          if ((*((_DWORD *)*v116 + 2) & 0xFE) == 0x12) {
            unsigned int v117 = (llvm::ConstantInt *)**((void **)v117 + 2);
          }
          int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v117);
          uint64_t v119 = 0;
          unint64_t v216 = (char *)&v218;
          uint64_t v217 = 0x200000000;
          uint64_t v223 = v13;
          uint64_t v224 = &v232;
          uint64_t v225 = v233;
          uint64_t v226 = 0;
          int v227 = 0;
          __int16 v228 = 512;
          char v229 = 7;
          uint64_t v230 = 0;
          uint64_t v231 = 0;
          uint64_t v232 = &unk_1F2616E88;
          v233[0] = &unk_1F2617008;
          BOOL v120 = (unsigned __int8 *)*((void *)a2 + 6);
          uint64_t v221 = *((void *)a2 + 5);
          unint64_t v222 = v6;
          v201[0] = (uint64_t)v120;
          if (v120)
          {
            llvm::MetadataTracking::track((uint64_t)v201, v120, 2);
            uint64_t v119 = v201[0];
          }
          sub_1CB8461A4((uint64_t)&v216, 0, v119);
          if (!v201[0]) {
            goto LABEL_136;
          }
          int v176 = *(unsigned __int8 *)v201[0];
          if ((v176 - 4) > 0x1E)
          {
            if ((v176 - 3) >= 0xFFFFFFFE) {
              uint64_t v180 = v201[0];
            }
            else {
              uint64_t v180 = 0;
            }
            if ((v176 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v178 = v180 + 8;
LABEL_192:
              v212[0] = (uint64_t)v201;
              sub_1CC5FA668(v178 + 16, v212);
              goto LABEL_136;
            }
            if (v176 == 3) {
              *(void *)(v201[0] + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v201[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v201[0] + 12))
          {
            uint64_t v177 = *(void *)(v201[0] + 16);
            if ((v177 & 4) != 0)
            {
              unint64_t v178 = v177 & 0xFFFFFFFFFFFFFFF8;
              if (v178) {
                goto LABEL_192;
              }
            }
          }
LABEL_136:
          if (PrimitiveSizeInBits == 16)
          {
            uint64_t v136 = llvm::ConstantInt::get(*v116, 8uLL, 0);
            v212[0] = (uint64_t)"bswap.2";
            __int16 v215 = 259;
            unint64_t v133 = sub_1CC242524((uint64_t)&v216, (uint64_t)v116, (uint64_t)v136, (uint64_t)v212, 0, 0);
            uint64_t v137 = llvm::ConstantInt::get(*v116, 8uLL, 0);
            v212[0] = (uint64_t)"bswap.1";
            __int16 v215 = 259;
            char v134 = sub_1CC2429AC((uint64_t)&v216, (uint64_t)v116, (uint64_t)v137, (uint64_t)v212, 0);
            unsigned int v138 = "bswap.i16";
          }
          else
          {
            if (PrimitiveSizeInBits == 32)
            {
              uint64_t v121 = llvm::ConstantInt::get(*v116, 0x18uLL, 0);
              v212[0] = (uint64_t)"bswap.4";
              __int16 v215 = 259;
              uint64_t v122 = sub_1CC242524((uint64_t)&v216, (uint64_t)v116, (uint64_t)v121, (uint64_t)v212, 0, 0);
              int v123 = llvm::ConstantInt::get(*v116, 8uLL, 0);
              v212[0] = (uint64_t)"bswap.3";
              __int16 v215 = 259;
              uint64_t v124 = sub_1CC242524((uint64_t)&v216, (uint64_t)v116, (uint64_t)v123, (uint64_t)v212, 0, 0);
              unsigned int v125 = llvm::ConstantInt::get(*v116, 8uLL, 0);
              v212[0] = (uint64_t)"bswap.2";
              __int16 v215 = 259;
              unsigned int v126 = sub_1CC2429AC((uint64_t)&v216, (uint64_t)v116, (uint64_t)v125, (uint64_t)v212, 0);
              BOOL v127 = llvm::ConstantInt::get(*v116, 0x18uLL, 0);
              v212[0] = (uint64_t)"bswap.1";
              __int16 v215 = 259;
              int v128 = sub_1CC2429AC((uint64_t)&v216, (uint64_t)v116, (uint64_t)v127, (uint64_t)v212, 0);
              uint64_t v129 = llvm::ConstantInt::get(*v116, 0xFF0000uLL, 0);
              v212[0] = (uint64_t)"bswap.and3";
              __int16 v215 = 259;
              uint64_t v130 = sub_1CBF52474((uint64_t)&v216, v124, (uint64_t)v129, (uint64_t)v212);
              unint64_t v131 = llvm::ConstantInt::get(*v116, 0xFF00uLL, 0);
              v212[0] = (uint64_t)"bswap.and2";
              __int16 v215 = 259;
              uint64_t v132 = sub_1CBF52474((uint64_t)&v216, v126, (uint64_t)v131, (uint64_t)v212);
              v212[0] = (uint64_t)"bswap.or1";
              __int16 v215 = 259;
              unint64_t v133 = sub_1CB844AF4((uint64_t)&v216, v122, (uint64_t)v130, (uint64_t)v212);
              v212[0] = (uint64_t)"bswap.or2";
              __int16 v215 = 259;
              char v134 = sub_1CB844AF4((uint64_t)&v216, v132, (uint64_t)v128, (uint64_t)v212);
              v212[0] = (uint64_t)"bswap.i32";
              __int16 v215 = 259;
              goto LABEL_151;
            }
            unint64_t v139 = llvm::ConstantInt::get(*v116, 0x38uLL, 0);
            v212[0] = (uint64_t)"bswap.8";
            __int16 v215 = 259;
            uint64_t v200 = sub_1CC242524((uint64_t)&v216, (uint64_t)v116, (uint64_t)v139, (uint64_t)v212, 0, 0);
            unint64_t v140 = llvm::ConstantInt::get(*v116, 0x28uLL, 0);
            v212[0] = (uint64_t)"bswap.7";
            __int16 v215 = 259;
            uint64_t v141 = sub_1CC242524((uint64_t)&v216, (uint64_t)v116, (uint64_t)v140, (uint64_t)v212, 0, 0);
            unint64_t v142 = llvm::ConstantInt::get(*v116, 0x18uLL, 0);
            v212[0] = (uint64_t)"bswap.6";
            __int16 v215 = 259;
            BOOL v143 = sub_1CC242524((uint64_t)&v216, (uint64_t)v116, (uint64_t)v142, (uint64_t)v212, 0, 0);
            int v144 = llvm::ConstantInt::get(*v116, 8uLL, 0);
            v212[0] = (uint64_t)"bswap.5";
            __int16 v215 = 259;
            uint64_t v145 = sub_1CC242524((uint64_t)&v216, (uint64_t)v116, (uint64_t)v144, (uint64_t)v212, 0, 0);
            BOOL v146 = llvm::ConstantInt::get(*v116, 8uLL, 0);
            v212[0] = (uint64_t)"bswap.4";
            __int16 v215 = 259;
            uint64_t v147 = sub_1CC2429AC((uint64_t)&v216, (uint64_t)v116, (uint64_t)v146, (uint64_t)v212, 0);
            uint64_t v148 = llvm::ConstantInt::get(*v116, 0x18uLL, 0);
            v212[0] = (uint64_t)"bswap.3";
            __int16 v215 = 259;
            unsigned int v149 = sub_1CC2429AC((uint64_t)&v216, (uint64_t)v116, (uint64_t)v148, (uint64_t)v212, 0);
            int v150 = llvm::ConstantInt::get(*v116, 0x28uLL, 0);
            v212[0] = (uint64_t)"bswap.2";
            __int16 v215 = 259;
            uint64_t v198 = sub_1CC2429AC((uint64_t)&v216, (uint64_t)v116, (uint64_t)v150, (uint64_t)v212, 0);
            uint64_t v151 = llvm::ConstantInt::get(*v116, 0x38uLL, 0);
            v212[0] = (uint64_t)"bswap.1";
            __int16 v215 = 259;
            unint64_t v199 = sub_1CC2429AC((uint64_t)&v216, (uint64_t)v116, (uint64_t)v151, (uint64_t)v212, 0);
            BOOL v152 = llvm::ConstantInt::get(*v116, 0xFF000000000000uLL, 0);
            v212[0] = (uint64_t)"bswap.and7";
            __int16 v215 = 259;
            std::string::size_type v197 = sub_1CBF52474((uint64_t)&v216, v141, (uint64_t)v152, (uint64_t)v212);
            uint64_t v153 = llvm::ConstantInt::get(*v116, 0xFF0000000000uLL, 0);
            v212[0] = (uint64_t)"bswap.and6";
            __int16 v215 = 259;
            unsigned int v154 = sub_1CBF52474((uint64_t)&v216, v143, (uint64_t)v153, (uint64_t)v212);
            long long v155 = llvm::ConstantInt::get(*v116, 0xFF00000000uLL, 0);
            v212[0] = (uint64_t)"bswap.and5";
            __int16 v215 = 259;
            unint64_t v156 = sub_1CBF52474((uint64_t)&v216, v145, (uint64_t)v155, (uint64_t)v212);
            uint64_t v157 = llvm::ConstantInt::get(*v116, 0xFF000000uLL, 0);
            v212[0] = (uint64_t)"bswap.and4";
            __int16 v215 = 259;
            uint64_t v158 = sub_1CBF52474((uint64_t)&v216, v147, (uint64_t)v157, (uint64_t)v212);
            uint64_t v159 = llvm::ConstantInt::get(*v116, 0xFF0000uLL, 0);
            v212[0] = (uint64_t)"bswap.and3";
            __int16 v215 = 259;
            unsigned int v160 = sub_1CBF52474((uint64_t)&v216, v149, (uint64_t)v159, (uint64_t)v212);
            int v161 = llvm::ConstantInt::get(*v116, 0xFF00uLL, 0);
            v212[0] = (uint64_t)"bswap.and2";
            __int16 v215 = 259;
            uint64_t v162 = sub_1CBF52474((uint64_t)&v216, v198, (uint64_t)v161, (uint64_t)v212);
            v212[0] = (uint64_t)"bswap.or1";
            __int16 v215 = 259;
            uint64_t v163 = sub_1CB844AF4((uint64_t)&v216, v200, (uint64_t)v197, (uint64_t)v212);
            v212[0] = (uint64_t)"bswap.or2";
            __int16 v215 = 259;
            uint64_t v164 = sub_1CB844AF4((uint64_t)&v216, v154, (uint64_t)v156, (uint64_t)v212);
            v212[0] = (uint64_t)"bswap.or3";
            __int16 v215 = 259;
            int v165 = sub_1CB844AF4((uint64_t)&v216, v158, (uint64_t)v160, (uint64_t)v212);
            v212[0] = (uint64_t)"bswap.or4";
            __int16 v215 = 259;
            unsigned int v166 = sub_1CB844AF4((uint64_t)&v216, v162, (uint64_t)v199, (uint64_t)v212);
            v212[0] = (uint64_t)"bswap.or5";
            __int16 v215 = 259;
            unint64_t v133 = sub_1CB844AF4((uint64_t)&v216, v163, (uint64_t)v164, (uint64_t)v212);
            v212[0] = (uint64_t)"bswap.or6";
            __int16 v215 = 259;
            char v134 = sub_1CB844AF4((uint64_t)&v216, v165, (uint64_t)v166, (uint64_t)v212);
            unsigned int v138 = "bswap.i64";
          }
          v212[0] = (uint64_t)v138;
          __int16 v215 = 259;
LABEL_151:
          uint64_t v87 = sub_1CB844AF4((uint64_t)&v216, v133, (uint64_t)v134, (uint64_t)v212);
          int v88 = v216;
          if (v216 == (char *)&v218)
          {
LABEL_110:
            unsigned int v89 = a2;
            BOOL v52 = v87;
LABEL_161:
            llvm::Value::doRAUW(v89, v52, (llvm::Value *)1);
            goto LABEL_162;
          }
LABEL_152:
          free(v88);
          goto LABEL_110;
        case 14:
          uint64_t v23 = "ceilf";
          int v24 = "ceil";
          int64_t v25 = "ceill";
          goto LABEL_139;
        default:
          goto LABEL_100;
      }
    }
    switch(v15)
    {
      case '3':
        uint64_t v23 = "cosf";
        int v24 = "cos";
        int64_t v25 = "cosl";
        goto LABEL_139;
      case '4':
        uint64_t v77 = 0;
        uint64_t v78 = (llvm::Type **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        unint64_t v216 = (char *)&v218;
        uint64_t v217 = 0x200000000;
        uint64_t v223 = v13;
        uint64_t v224 = &v232;
        uint64_t v225 = v233;
        uint64_t v226 = 0;
        int v227 = 0;
        __int16 v228 = 512;
        char v229 = 7;
        uint64_t v230 = 0;
        uint64_t v231 = 0;
        uint64_t v232 = &unk_1F2616E88;
        v233[0] = &unk_1F2617008;
        BOOL v79 = (unsigned __int8 *)*((void *)a2 + 6);
        uint64_t v221 = *((void *)a2 + 5);
        unint64_t v222 = v6;
        v201[0] = (uint64_t)v79;
        if (v79)
        {
          llvm::MetadataTracking::track((uint64_t)v201, v79, 2);
          uint64_t v77 = v201[0];
        }
        sub_1CB8461A4((uint64_t)&v216, 0, v77);
        if (!v201[0]) {
          goto LABEL_104;
        }
        int v173 = *(unsigned __int8 *)v201[0];
        if ((v173 - 4) > 0x1E)
        {
          if ((v173 - 3) >= 0xFFFFFFFE) {
            uint64_t v179 = v201[0];
          }
          else {
            uint64_t v179 = 0;
          }
          if ((v173 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v175 = v179 + 8;
LABEL_186:
            v212[0] = (uint64_t)v201;
            sub_1CC5FA668(v175 + 16, v212);
            goto LABEL_104;
          }
          if (v173 == 3) {
            *(void *)(v201[0] + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v201[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v201[0] + 12))
        {
          uint64_t v174 = *(void *)(v201[0] + 16);
          if ((v174 & 4) != 0)
          {
            unint64_t v175 = v174 & 0xFFFFFFFFFFFFFFF8;
            if (v175) {
              goto LABEL_186;
            }
          }
        }
LABEL_104:
        unsigned int v82 = llvm::Type::getPrimitiveSizeInBits(*v78);
        if (v80 == 1) {
        if (v82 >= 2)
        }
        {
          for (unsigned int i = 1; i < v82; i *= 2)
          {
            uint64_t v84 = llvm::ConstantInt::get(*v78, i, 0);
            v212[0] = (uint64_t)"ctlz.sh";
            __int16 v215 = 259;
            uint64_t v85 = sub_1CC2429AC((uint64_t)&v216, (uint64_t)v78, (uint64_t)v84, (uint64_t)v212, 0);
            v212[0] = (uint64_t)"ctlz.step";
            __int16 v215 = 259;
            uint64_t v78 = (llvm::Type **)sub_1CB844AF4((uint64_t)&v216, v78, (uint64_t)v85, (uint64_t)v212);
          }
        }
        __int16 v215 = 257;
        unsigned int v86 = (llvm::Type **)sub_1CC2427E8((uint64_t)&v216, (uint64_t)v78, (uint64_t)v212, v81);
        uint64_t v87 = (llvm::Value *)sub_1CC2D9374(v86, (uint64_t **)a2);
        int v88 = v216;
        if (v216 == (char *)&v218) {
          goto LABEL_110;
        }
        goto LABEL_152;
      case '5':
        int v90 = (llvm::Type **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        goto LABEL_158;
      case '6':
        unsigned int v91 = (llvm::ConstantInt **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        __int16 v220 = 257;
        uint64_t v92 = sub_1CC2427E8((uint64_t)v203, (uint64_t)v91, (uint64_t)&v216, v11);
        unint64_t v93 = v92;
        if ((*((unsigned char *)v91 + 23) & 0x10) != 0)
        {
          uint64_t v94 = **(void **)*v91;
          uint64_t v95 = *(void *)(v94 + 152);
          uint64_t v96 = *(unsigned int *)(v94 + 168);
          if (v96)
          {
            LODWORD(v97) = (v96 - 1) & ((v91 >> 4) ^ (v91 >> 9));
            uint64_t v98 = (llvm::ConstantInt ***)(v95 + 16 * v97);
            int v99 = *v98;
            if (*v98 != v91)
            {
              int v100 = 1;
              do
              {
                if (v99 == (llvm::ConstantInt **)-4096) {
                  goto LABEL_153;
                }
                int v101 = v97 + v100++;
                uint64_t v97 = v101 & (v96 - 1);
                int v99 = *(llvm::ConstantInt ***)(v95 + 16 * v97);
              }
              while (v99 != v91);
              uint64_t v98 = (llvm::ConstantInt ***)(v95 + 16 * v97);
            }
          }
          else
          {
LABEL_153:
            uint64_t v98 = (llvm::ConstantInt ***)(v95 + 16 * v96);
          }
          int v167 = v98[1];
          uint64_t v170 = (uint64_t)*v167;
          uint64_t v168 = (const char *)(v167 + 2);
          uint64_t v169 = v170;
        }
        else
        {
          uint64_t v169 = 0;
          uint64_t v168 = &byte_1CFBCE98E;
        }
        __int16 v220 = 773;
        unint64_t v216 = (char *)v168;
        uint64_t v217 = v169;
        uint64_t v218 = ".not";
        llvm::Value::setNameImpl(v92, (const char **)&v216);
        if (v93 && !*((unsigned char *)v93 + 16))
        {
          if ((*((unsigned char *)v93 + 23) & 0x10) == 0) {
            goto LABEL_215;
          }
          uint64_t v181 = ***(void ***)v93;
          uint64_t v182 = *(void *)(v181 + 152);
          uint64_t v183 = *(unsigned int *)(v181 + 168);
          if (v183)
          {
            LODWORD(v184) = (v183 - 1) & ((v93 >> 4) ^ (v93 >> 9));
            int v185 = (llvm::Instruction **)(v182 + 16 * v184);
            uint64_t v186 = *v185;
            if (*v185 != v93)
            {
              int v187 = 1;
              do
              {
                if (v186 == (llvm::Instruction *)-4096) {
                  goto LABEL_207;
                }
                int v188 = v184 + v187++;
                uint64_t v184 = v188 & (v183 - 1);
                uint64_t v186 = *(llvm::Instruction **)(v182 + 16 * v184);
              }
              while (v186 != v93);
              int v185 = (llvm::Instruction **)(v182 + 16 * v184);
            }
          }
          else
          {
LABEL_207:
            int v185 = (llvm::Instruction **)(v182 + 16 * v183);
          }
          uint64_t v189 = v185[1];
          unint64_t v192 = *(void *)v189;
          uint64_t v190 = (char *)v189 + 16;
          unint64_t v191 = v192;
          if (v192 >= 5 && (*(_DWORD *)v190 == *(_DWORD *)"llvm." ? (BOOL v193 = v190[4] == aLlvm_1[4]) : (BOOL v193 = 0), v193))
          {
            *((_DWORD *)v93 + 8) |= 0x2000u;
            int v194 = llvm::Function::lookupIntrinsicID(v190, v191);
          }
          else
          {
LABEL_215:
            int v194 = 0;
            *((_DWORD *)v93 + 8) &= ~0x2000u;
          }
          *((_DWORD *)v93 + 9) = v194;
        }
        uint64_t v171 = llvm::ConstantInt::get(*v91, 1uLL, 0);
        __int16 v220 = 257;
        uint64_t v172 = sub_1CB84494C((uint64_t)v203, (uint64_t)v91, (uint64_t)v171, (uint64_t)&v216, 0, 0);
        __int16 v220 = 257;
        int v90 = (llvm::Type **)sub_1CBF52474((uint64_t)v203, v93, (uint64_t)v172, (uint64_t)&v216);
LABEL_158:
        NullValue = (llvm::Value *)sub_1CC2D9374(v90, (uint64_t **)a2);
        goto LABEL_159;
      case '7':
        goto LABEL_100;
      case '8':
      case '9':
        goto LABEL_162;
      default:
LABEL_223:
        JUMPOUT(0);
    }
  }
  int v53 = *(unsigned __int8 *)v212[0];
  if ((v53 - 4) > 0x1E)
  {
    if ((v53 - 3) >= 0xFFFFFFFE) {
      uint64_t v135 = v212[0];
    }
    else {
      uint64_t v135 = 0;
    }
    if ((v53 - 3) < 0xFFFFFFFE)
    {
      if (v53 == 3) {
        *(void *)(v212[0] + 8) = 0;
      }
      goto LABEL_4;
    }
    unint64_t v55 = v135 + 8;
  }
  else
  {
    if ((*(unsigned char *)(v212[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v212[0] + 12)) {
      goto LABEL_4;
    }
    uint64_t v54 = *(void *)(v212[0] + 16);
    if ((v54 & 4) == 0) {
      goto LABEL_4;
    }
    unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFF8;
    if (!v55) {
      goto LABEL_4;
    }
  }
  unint64_t v216 = (char *)v212;
  sub_1CC5FA668(v55 + 16, &v216);
  goto LABEL_4;
}

void *sub_1CC2D9374(llvm::Type **a1, uint64_t **a2)
{
  uint64_t v3 = 0;
  v49[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **a2;
  v41[0] = v42;
  v41[1] = (void *)0x200000000;
  v42[6] = v4;
  v42[7] = &v48;
  v42[8] = v49;
  v42[9] = 0;
  int v43 = 0;
  __int16 v44 = 512;
  char v45 = 7;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unsigned int v48 = &unk_1F2616E88;
  v49[0] = &unk_1F2617008;
  uint64_t v5 = a2 + 3;
  unsigned int v7 = a2[5];
  uint64_t v6 = (unsigned __int8 *)a2[6];
  v42[4] = v7;
  v42[5] = v5;
  unsigned int v40 = v6;
  if (v6)
  {
    llvm::MetadataTracking::track((uint64_t)&v40, v6, 2);
    uint64_t v3 = (uint64_t)v40;
  }
  sub_1CB8461A4((uint64_t)v41, 0, v3);
  if (v40)
  {
    int v29 = *v40;
    if ((v29 - 4) > 0x1E)
    {
      if ((v29 - 3) >= 0xFFFFFFFE) {
        unsigned int v32 = v40;
      }
      else {
        unsigned int v32 = 0;
      }
      if ((v29 - 3) < 0xFFFFFFFE)
      {
        if (v29 == 3) {
          *((void *)v40 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v31 = (unint64_t)(v32 + 8);
    }
    else
    {
      if ((v40[1] & 0x7F) != 2 && !*((_DWORD *)v40 + 3)) {
        goto LABEL_4;
      }
      uint64_t v30 = *((void *)v40 + 2);
      if ((v30 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (!v31) {
        goto LABEL_4;
      }
    }
    v38[0] = &v40;
    sub_1CC5FA668(v31 + 16, v38);
  }
LABEL_4:
  uint64_t v8 = *a1;
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*a1);
  if (v9 == 1)
  {
    uint64_t v8 = *a1;
  }
  uint64_t v11 = llvm::ConstantInt::get(v8, 0, 0);
  if ((PrimitiveSizeInBits + 63) >= 0x40)
  {
    int v12 = 0;
    unsigned int v33 = (PrimitiveSizeInBits + 63) >> 6;
    uint64_t v13 = &unk_1CFAC6E58;
    uint64_t v14 = "cppop.and1";
    do
    {
      int v34 = v12;
      unint64_t v35 = PrimitiveSizeInBits;
      uint64_t v36 = (uint64_t)v11;
      if (PrimitiveSizeInBits >= 0x40) {
        unsigned int v15 = 64;
      }
      else {
        unsigned int v15 = PrimitiveSizeInBits;
      }
      unsigned int v16 = (llvm::Instruction *)a1;
      if (v15 >= 2)
      {
        int v17 = 0;
        unsigned int v18 = 1;
        unsigned int v16 = (llvm::Instruction *)a1;
        unsigned int v37 = v15;
        do
        {
          unsigned int v19 = llvm::ConstantInt::get(*a1, v13[v17], 0);
          v38[0] = v14;
          __int16 v39 = 259;
          size_t v20 = v14;
          unsigned int v21 = v13;
          int v22 = sub_1CBF52474((uint64_t)v41, v16, (uint64_t)v19, (uint64_t)v38);
          uint64_t v23 = llvm::ConstantInt::get(*a1, v18, 0);
          v38[0] = "ctpop.sh";
          __int16 v39 = 259;
          int v24 = sub_1CC2429AC((uint64_t)v41, (uint64_t)v16, (uint64_t)v23, (uint64_t)v38, 0);
          v38[0] = "cppop.and2";
          __int16 v39 = 259;
          int64_t v25 = sub_1CBF52474((uint64_t)v41, v24, (uint64_t)v19, (uint64_t)v38);
          v38[0] = "ctpop.step";
          __int16 v39 = 259;
          unint64_t v26 = v22;
          uint64_t v13 = v21;
          uint64_t v14 = v20;
          unsigned int v16 = sub_1CB844A3C((uint64_t)v41, v26, (uint64_t)v25, (uint64_t)v38, 0, 0);
          v18 *= 2;
          ++v17;
        }
        while (v18 < v37);
      }
      v38[0] = "ctpop.part";
      __int16 v39 = 259;
      uint64_t v11 = sub_1CB844A3C((uint64_t)v41, v16, v36, (uint64_t)v38, 0, 0);
      unint64_t PrimitiveSizeInBits = v35;
      if (v35 > 0x40)
      {
        uint64_t v27 = llvm::ConstantInt::get(*a1, 0x40uLL, 0);
        v38[0] = "ctpop.part.sh";
        __int16 v39 = 259;
        a1 = (llvm::Type **)sub_1CC2429AC((uint64_t)v41, (uint64_t)a1, (uint64_t)v27, (uint64_t)v38, 0);
        unint64_t PrimitiveSizeInBits = (v35 - 64);
      }
      int v12 = v34 + 1;
    }
    while (v34 + 1 != v33);
  }
  if (v41[0] != v42) {
    free(v41[0]);
  }
  return v11;
}

void sub_1CC2D9764(char *a1, uint64_t ***a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  v62[15] = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a2[5][7][5];
  if (a3 == a4)
  {
    uint64_t v11 = 0;
    unsigned int v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = **v9;
      if (v8 >= v6)
      {
        uint64_t v12 = (v8 - v7) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          abort();
        }
        if ((v6 - v7) >> 2 > v13) {
          unint64_t v13 = (v6 - v7) >> 2;
        }
        if ((unint64_t)(v6 - v7) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          if (v14 >> 61) {
            sub_1CB833614();
          }
          unsigned int v15 = (char *)operator new(8 * v14);
        }
        else
        {
          unsigned int v15 = 0;
        }
        unsigned int v16 = &v15[8 * v12];
        *(void *)unsigned int v16 = v10;
        uint64_t v11 = v16 + 8;
        while (v8 != v7)
        {
          uint64_t v17 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v16 - 1) = v17;
          v16 -= 8;
        }
        uint64_t v6 = &v15[8 * v14];
        if (v7) {
          operator delete(v7);
        }
        unsigned int v7 = v16;
      }
      else
      {
        *(void *)uint64_t v8 = v10;
        uint64_t v11 = v8 + 8;
      }
      ++v9;
      uint64_t v8 = v11;
    }
    while (v9 != a4);
  }
  if (a1) {
    unsigned int v18 = (const char *)strlen(a1);
  }
  else {
    unsigned int v18 = 0;
  }
  unsigned int v19 = (llvm::PointerType *)llvm::FunctionType::get(a5, (uint64_t)v7, (v11 - v7) >> 3, 0);
  inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v51, (unsigned __int8 *)a1, v18, v19, 0);
  int v22 = v21;
  sub_1CBF537B4((uint64_t)v61, a2[5], (uint64_t)(a2 + 3), 0, 0, 0);
  int v58 = v60;
  uint64_t v59 = 0x800000000;
  sub_1CB935BDC((unsigned int *)&v58, a3, a4);
  __int16 v57 = 257;
  uint64_t v23 = (llvm::Value *)sub_1CB845BAC((uint64_t *)v61, inserted, v22, (uint64_t *)v58, v59, (uint64_t)v56, 0);
  int v24 = v23;
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    unint64_t v35 = 0;
    int v34 = &byte_1CFBCE98E;
    goto LABEL_36;
  }
  uint64_t v25 = ***a2;
  uint64_t v26 = *(void *)(v25 + 152);
  uint64_t v27 = *(unsigned int *)(v25 + 168);
  if (!v27) {
    goto LABEL_34;
  }
  LODWORD(v28) = (v27 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v29 = (uint64_t ****)(v26 + 16 * v28);
  uint64_t v30 = *v29;
  if (*v29 != a2)
  {
    int v31 = 1;
    while (v30 != (uint64_t ***)-4096)
    {
      int v32 = v28 + v31++;
      uint64_t v28 = v32 & (v27 - 1);
      uint64_t v30 = *(uint64_t ****)(v26 + 16 * v28);
      if (v30 == a2)
      {
        int v29 = (uint64_t ****)(v26 + 16 * v28);
        goto LABEL_35;
      }
    }
LABEL_34:
    int v29 = (uint64_t ****)(v26 + 16 * v27);
  }
LABEL_35:
  unsigned int v33 = v29[1];
  uint64_t v36 = (const char *)*v33;
  int v34 = (const char *)(v33 + 2);
  unint64_t v35 = v36;
LABEL_36:
  __int16 v57 = 261;
  v56[0] = v34;
  v56[1] = v35;
  llvm::Value::setNameImpl(v23, v56);
  if (v24 && !*((unsigned char *)v24 + 16))
  {
    if ((*((unsigned char *)v24 + 23) & 0x10) == 0) {
      goto LABEL_62;
    }
    uint64_t v37 = ***(void ***)v24;
    uint64_t v38 = *(void *)(v37 + 152);
    uint64_t v39 = *(unsigned int *)(v37 + 168);
    if (v39)
    {
      LODWORD(v40) = (v39 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v41 = (llvm::Value **)(v38 + 16 * v40);
      unsigned int v42 = *v41;
      if (*v41 == v24)
      {
LABEL_55:
        char v45 = v41[1];
        unint64_t v48 = *(void *)v45;
        uint64_t v46 = (char *)v45 + 16;
        unint64_t v47 = v48;
        if (v48 >= 5 && *(_DWORD *)v46 == *(_DWORD *)"llvm." && v46[4] == aLlvm_1[4])
        {
          *((_DWORD *)v24 + 8) |= 0x2000u;
          int v50 = llvm::Function::lookupIntrinsicID(v46, v47);
LABEL_63:
          *((_DWORD *)v24 + 9) = v50;
          goto LABEL_38;
        }
LABEL_62:
        int v50 = 0;
        *((_DWORD *)v24 + 8) &= ~0x2000u;
        goto LABEL_63;
      }
      int v43 = 1;
      while (v42 != (llvm::Value *)-4096)
      {
        int v44 = v40 + v43++;
        uint64_t v40 = v44 & (v39 - 1);
        unsigned int v42 = *(llvm::Value **)(v38 + 16 * v40);
        if (v42 == v24)
        {
          uint64_t v41 = (llvm::Value **)(v38 + 16 * v40);
          goto LABEL_55;
        }
      }
    }
    uint64_t v41 = (llvm::Value **)(v38 + 16 * v39);
    goto LABEL_55;
  }
LABEL_38:
  if (a2[1]) {
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v24, (llvm::Value *)1);
  }
  if (v58 != v60) {
    free(v58);
  }
  if (v61[0] == v62)
  {
    if (!v7) {
      return;
    }
  }
  else
  {
    free(v61[0]);
    if (!v7) {
      return;
    }
  }
  operator delete(v7);
}

void sub_1CC2D9B6C(uint64_t a1, char *a2, char *a3, char *a4)
{
  int v6 = *(_DWORD *)(a1 + 20);
  unsigned int v7 = (char *)(a1 - 32 * (v6 & 0x7FFFFFF));
  uint64_t v8 = **(void **)v7;
  int v9 = *(unsigned __int8 *)(v8 + 8);
  if ((v9 - 4) >= 3)
  {
    if (v9 == 2)
    {
      int v17 = *(unsigned __int8 *)(a1 + 16);
      if (v17 == 84)
      {
        uint64_t v18 = 0;
      }
      else if (v17 == 39)
      {
        uint64_t v18 = (*(_DWORD *)(a1 + 80) + 1);
      }
      else
      {
        uint64_t v18 = 2;
      }
      if (v6 < 0 && (uint64_t v24 = *((void *)v7 - 1), (v24 & 0xFFFFFFFF0) != 0)) {
        uint64_t v19 = (*((_DWORD *)v7 - 3) - *(_DWORD *)&v7[-v24]);
      }
      else {
        uint64_t v19 = 0;
      }
      unsigned int v16 = (char *)(a1 - 32 * v18 - 32 * v19 - 32);
      uint64_t v8 = ***(void ***)a1 + 1672;
      a4 = a2;
    }
    else
    {
      int v20 = *(unsigned __int8 *)(a1 + 16);
      if (v20 == 84)
      {
        uint64_t v21 = 0;
      }
      else if (v20 == 39)
      {
        uint64_t v21 = (*(_DWORD *)(a1 + 80) + 1);
      }
      else
      {
        uint64_t v21 = 2;
      }
      if (v6 < 0 && (uint64_t v25 = *((void *)v7 - 1), (v25 & 0xFFFFFFFF0) != 0)) {
        uint64_t v22 = (*((_DWORD *)v7 - 3) - *(_DWORD *)&v7[-v25]);
      }
      else {
        uint64_t v22 = 0;
      }
      unsigned int v16 = (char *)(a1 - 32 * v21 - 32 * v22 - 32);
      uint64_t v8 = ***(void ***)a1 + 1696;
      a4 = a3;
    }
    unsigned int v15 = (uint64_t ***)a1;
  }
  else
  {
    int v10 = *(unsigned __int8 *)(a1 + 16);
    if (v10 == 84)
    {
      uint64_t v11 = 0;
    }
    else if (v10 == 39)
    {
      uint64_t v11 = (*(_DWORD *)(a1 + 80) + 1);
    }
    else
    {
      uint64_t v11 = 2;
    }
    if (v6 < 0 && (uint64_t v23 = *((void *)v7 - 1), (v23 & 0xFFFFFFFF0) != 0)) {
      uint64_t v12 = (*((_DWORD *)v7 - 3) - *(_DWORD *)&v7[-v23]);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = a1 - 32 * v11 - 32 * v12 - 32;
    unsigned int v15 = (uint64_t ***)a1;
    unsigned int v16 = (char *)v13;
  }
  sub_1CC2D9FFC(a4, v15, v7, v16, (uint64_t **)v8);
}

uint64_t llvm::IntrinsicLowering::LowerToByteSwap(llvm::IntrinsicLowering *this, llvm::CallInst *a2)
{
  int v3 = *((unsigned __int8 *)this + 16);
  if (v3 == 84)
  {
    uint64_t v4 = 0;
  }
  else if (v3 == 39)
  {
    uint64_t v4 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    uint64_t v4 = 2;
  }
  int v5 = 0;
  int v6 = *((_DWORD *)this + 5);
  uint64_t v7 = -(uint64_t)(v6 & 0x7FFFFFF);
  if (v6 < 0)
  {
    int v34 = (char *)this - 32 * (v6 & 0x7FFFFFF);
    uint64_t v35 = *((void *)v34 - 1);
    if ((v35 & 0xFFFFFFFF0) != 0) {
      int v5 = *((_DWORD *)v34 - 3) - *(_DWORD *)&v34[-v35];
    }
    else {
      int v5 = 0;
    }
  }
  uint64_t v8 = (llvm::IntrinsicLowering *)((char *)this + 32 * v7);
  if ((((llvm::IntrinsicLowering *)((char *)this + 32 * -v5 + -32 * v4) - v8 - 32) & 0x1FFFFFFFE0) == 0x20
    && *(void *)this == **(void **)v8
    && *(unsigned char *)(*(void *)this + 8) == 13)
  {
    int v9 = *(uint64_t ***)(*(void *)(*((void *)this + 5) + 56) + 40);
    v36[0] = *(const char **)this;
    uint64_t Declaration = llvm::Intrinsic::getDeclaration(v9, 9, (uint64_t)v36, 1);
    uint64_t v11 = (uint64_t **)Declaration;
    int v12 = *((_DWORD *)this + 5);
    uint64_t v38 = (char *)*((void *)this - 4 * (v12 & 0x7FFFFFF));
    if (Declaration)
    {
      uint64_t v13 = *(uint64_t ***)(Declaration + 24);
      if ((v12 & 0x10000000) != 0)
      {
LABEL_9:
        uint64_t v14 = ***(void ***)this;
        uint64_t v15 = *(void *)(v14 + 152);
        uint64_t v16 = *(unsigned int *)(v14 + 168);
        if (v16)
        {
          LODWORD(v17) = (v16 - 1) & ((this >> 4) ^ (this >> 9));
          uint64_t v18 = v15 + 16 * v17;
          uint64_t v19 = *(llvm::IntrinsicLowering **)v18;
          if (*(llvm::IntrinsicLowering **)v18 != this)
          {
            int v20 = 1;
            do
            {
              if (v19 == (llvm::IntrinsicLowering *)-4096) {
                goto LABEL_18;
              }
              int v21 = v17 + v20++;
              uint64_t v17 = v21 & (v16 - 1);
              uint64_t v19 = *(llvm::IntrinsicLowering **)(v15 + 16 * v17);
            }
            while (v19 != this);
            uint64_t v18 = v15 + 16 * v17;
          }
        }
        else
        {
LABEL_18:
          uint64_t v18 = v15 + 16 * v16;
        }
        uint64_t v25 = *(void **)(v18 + 8);
        uint64_t v26 = (const char *)*v25;
        uint64_t v24 = (const char *)(v25 + 2);
        uint64_t v23 = v26;
LABEL_20:
        __int16 v37 = 261;
        v36[0] = v24;
        v36[1] = v23;
        uint64_t v27 = (char *)operator new(0x90uLL);
        uint64_t v28 = (llvm::Value *)(v27 + 64);
        *((_DWORD *)v27 + 21) = *((_DWORD *)v27 + 21) & 0x38000000 | 2;
        *(void *)uint64_t v27 = 0;
        *((void *)v27 + 1) = 0;
        *((void *)v27 + 2) = 0;
        *((void *)v27 + 3) = v27 + 64;
        *((void *)v27 + 4) = 0;
        *((void *)v27 + 5) = 0;
        *((void *)v27 + 6) = 0;
        *((void *)v27 + 7) = v27 + 64;
        *((void *)v27 + 8) = *v13[2];
        *((void *)v27 + 9) = 0;
        v27[80] = 84;
        v27[81] = 0;
        *((_WORD *)v27 + 41) = 0;
        *((_DWORD *)v27 + 21) = 2;
        *(_OWORD *)(v27 + 88) = 0u;
        int v29 = v27 + 88;
        *(_OWORD *)(v27 + 104) = 0u;
        *((_DWORD *)v27 + 30) = 0;
        uint64_t v30 = *((void *)this + 5);
        *((void *)v27 + 13) = v30;
        *(_WORD *)(v30 + 18) &= ~0x8000u;
        if ((v27[87] & 0x10) != 0)
        {
          uint64_t v32 = *(void *)(v30 + 56);
          if (v32)
          {
            unsigned int v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
            if (v33) {
              llvm::ValueSymbolTable::reinsertValue(v33, v28);
            }
          }
        }
        uint64_t v31 = *((void *)this + 3);
        *((void *)v27 + 11) = v31;
        *((void *)v27 + 12) = (char *)this + 24;
        *(void *)(v31 + 8) = v29;
        *((void *)this + 3) = v29;
        *((void *)v27 + 16) = 0;
        llvm::CallInst::init((uint64_t ***)v28, v13, v11, (uint64_t *)&v38, 1, 0, 0, v36);
        uint64_t v38 = v27 + 64;
        llvm::Value::doRAUW(this, v28, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
    }
    else
    {
      uint64_t v13 = 0;
      if ((v12 & 0x10000000) != 0) {
        goto LABEL_9;
      }
    }
    uint64_t v23 = 0;
    uint64_t v24 = &byte_1CFBCE98E;
    goto LABEL_20;
  }
  return 0;
}

void sub_1CC2D9FFC(char *a1, uint64_t ***a2, char *a3, char *a4, uint64_t **a5)
{
  int v6 = a3;
  v66[15] = *MEMORY[0x1E4F143B8];
  uint64_t v56 = a2[5][7][5];
  if (a3 == a4)
  {
    int v12 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    int v9 = 0;
    int v10 = a3;
    do
    {
      uint64_t v11 = **(void **)v10;
      if (v9 >= v7)
      {
        uint64_t v13 = (v9 - v8) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          abort();
        }
        if ((v7 - v8) >> 2 > v14) {
          unint64_t v14 = (v7 - v8) >> 2;
        }
        if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          if (v15 >> 61) {
            sub_1CB833614();
          }
          uint64_t v16 = (char *)operator new(8 * v15);
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v16[8 * v13];
        *(void *)uint64_t v17 = v11;
        int v12 = v17 + 8;
        while (v9 != v8)
        {
          uint64_t v18 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v17 - 1) = v18;
          v17 -= 8;
        }
        uint64_t v7 = &v16[8 * v15];
        if (v8) {
          operator delete(v8);
        }
        uint64_t v8 = v17;
      }
      else
      {
        *(void *)int v9 = v11;
        int v12 = v9 + 8;
      }
      v10 += 32;
      int v9 = v12;
    }
    while (v10 != a4);
  }
  if (a1) {
    uint64_t v19 = (const char *)strlen(a1);
  }
  else {
    uint64_t v19 = 0;
  }
  int v20 = (llvm::PointerType *)llvm::FunctionType::get(a5, (uint64_t)v8, (v12 - v8) >> 3, 0);
  inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v56, (unsigned __int8 *)a1, v19, v20, 0);
  uint64_t v23 = v22;
  sub_1CBF537B4((uint64_t)v65, a2[5], (uint64_t)(a2 + 3), 0, 0, 0);
  int v62 = v64;
  uint64_t v63 = 0x800000000;
  unint64_t v24 = a4 - v6;
  if ((unint64_t)(a4 - v6) >= 0x101) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v25 = (uint64_t *)v64;
  if (v6 != a4)
  {
    uint64_t v26 = v64;
    do
    {
      uint64_t v27 = *(void *)v6;
      v6 += 32;
      *v26++ = v27;
    }
    while (v6 != a4);
    uint64_t v25 = (uint64_t *)v62;
  }
  LODWORD(v63) = v24 >> 5;
  __int16 v61 = 257;
  uint64_t v28 = (llvm::Value *)sub_1CB845BAC((uint64_t *)v65, inserted, v23, v25, v63, (uint64_t)v60, 0);
  int v29 = v28;
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    uint64_t v40 = 0;
    uint64_t v39 = &byte_1CFBCE98E;
    goto LABEL_41;
  }
  uint64_t v30 = ***a2;
  uint64_t v31 = *(void *)(v30 + 152);
  uint64_t v32 = *(unsigned int *)(v30 + 168);
  if (!v32) {
    goto LABEL_39;
  }
  LODWORD(v33) = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v34 = (uint64_t ****)(v31 + 16 * v33);
  uint64_t v35 = *v34;
  if (*v34 != a2)
  {
    int v36 = 1;
    while (v35 != (uint64_t ***)-4096)
    {
      int v37 = v33 + v36++;
      uint64_t v33 = v37 & (v32 - 1);
      uint64_t v35 = *(uint64_t ****)(v31 + 16 * v33);
      if (v35 == a2)
      {
        int v34 = (uint64_t ****)(v31 + 16 * v33);
        goto LABEL_40;
      }
    }
LABEL_39:
    int v34 = (uint64_t ****)(v31 + 16 * v32);
  }
LABEL_40:
  uint64_t v38 = v34[1];
  uint64_t v41 = (const char *)*v38;
  uint64_t v39 = (const char *)(v38 + 2);
  uint64_t v40 = v41;
LABEL_41:
  __int16 v61 = 261;
  v60[0] = v39;
  v60[1] = v40;
  llvm::Value::setNameImpl(v28, v60);
  if (v29 && !*((unsigned char *)v29 + 16))
  {
    if ((*((unsigned char *)v29 + 23) & 0x10) == 0) {
      goto LABEL_68;
    }
    uint64_t v42 = ***(void ***)v29;
    uint64_t v43 = *(void *)(v42 + 152);
    uint64_t v44 = *(unsigned int *)(v42 + 168);
    if (v44)
    {
      LODWORD(v45) = (v44 - 1) & ((v29 >> 4) ^ (v29 >> 9));
      uint64_t v46 = (llvm::Value **)(v43 + 16 * v45);
      unint64_t v47 = *v46;
      if (*v46 == v29)
      {
LABEL_61:
        int v50 = v46[1];
        unint64_t v53 = *(void *)v50;
        uint64_t v51 = (char *)v50 + 16;
        unint64_t v52 = v53;
        if (v53 >= 5 && *(_DWORD *)v51 == *(_DWORD *)"llvm." && v51[4] == aLlvm_1[4])
        {
          *((_DWORD *)v29 + 8) |= 0x2000u;
          int v55 = llvm::Function::lookupIntrinsicID(v51, v52);
LABEL_69:
          *((_DWORD *)v29 + 9) = v55;
          goto LABEL_43;
        }
LABEL_68:
        int v55 = 0;
        *((_DWORD *)v29 + 8) &= ~0x2000u;
        goto LABEL_69;
      }
      int v48 = 1;
      while (v47 != (llvm::Value *)-4096)
      {
        int v49 = v45 + v48++;
        uint64_t v45 = v49 & (v44 - 1);
        unint64_t v47 = *(llvm::Value **)(v43 + 16 * v45);
        if (v47 == v29)
        {
          uint64_t v46 = (llvm::Value **)(v43 + 16 * v45);
          goto LABEL_61;
        }
      }
    }
    uint64_t v46 = (llvm::Value **)(v43 + 16 * v44);
    goto LABEL_61;
  }
LABEL_43:
  if (a2[1]) {
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v29, (llvm::Value *)1);
  }
  if (v62 != v64) {
    free(v62);
  }
  if (v65[0] == v66)
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    free(v65[0]);
    if (!v8) {
      return;
    }
  }
  operator delete(v8);
}

void sub_1CC2DA458()
{
}

uint64_t sub_1CC2DA4F4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCD370;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F260C618;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCD378, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC2DA458;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCCD378, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC2DA5A4()
{
}

void sub_1CC2DA5E4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC2DA61C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  int v3 = *(uint64_t **)a2;
  LOWORD(v118) = 260;
  uint64_t v115 = a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)&v103, (const llvm::Twine *)&v115);
  BOOL v5 = v106 == 15 && v107 == 16 && v105 == 41;
  int v6 = ".msvcjmc";
  if (v108 == 3) {
    int v6 = ".just.my.code";
  }
  uint64_t v102 = v6;
  int v101 = 16;
  uint64_t v7 = (char *)operator new(0x100uLL, (std::align_val_t)8uLL);
  uint64_t v8 = 0;
  v100[0] = v7;
  v100[1] = 0;
  do
  {
    *(void *)&v7[v8] = -4096;
    v8 += 16;
  }
  while (v8 != 256);
  int v9 = (unsigned __int8 *)*((void *)a2 + 4);
  if (v9 != a2 + 24)
  {
    if (v5) {
      int v10 = "_";
    }
    else {
      int v10 = "__";
    }
    __s = (std::string::value_type *)v10;
    uint64_t v11 = "__JustMyCode_Default";
    if (v5) {
      uint64_t v11 = "_JustMyCode_Default";
    }
    uint64_t v95 = (unsigned __int8 *)v11;
    int v96 = *(unsigned __int8 *)v11;
    while (1)
    {
      if (v9) {
        int v12 = v9 - 56;
      }
      else {
        int v12 = 0;
      }
      if (v9 && v12[16] == 3)
      {
        if ((*((_DWORD *)v12 + 5) & 0x7FFFFFF) == 0) {
          goto LABEL_45;
        }
      }
      else if (!v12[16] && *((unsigned __int8 **)v12 + 9) == v12 + 72 && (v12[34] & 0x80) == 0)
      {
        goto LABEL_45;
      }
      int v99 = 0;
      if ((v12[23] & 0x20) != 0)
      {
        uint64_t v13 = ***(void ***)v12;
        uint64_t v115 = v12;
        int v14 = *(_DWORD *)(v13 + 2496);
        if (v14)
        {
          uint64_t v15 = *(void *)(v13 + 2480);
          int v16 = v14 - 1;
          unsigned int v17 = v16 & ((v12 >> 4) ^ (v12 >> 9));
          uint64_t v18 = (unsigned __int8 **)(v15 + 40 * v17);
          uint64_t v19 = *v18;
          if (*v18 != v12)
          {
            int v20 = 0;
            int v21 = 1;
            while (v19 != (unsigned __int8 *)-4096)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == (unsigned __int8 *)-8192;
              }
              if (v22) {
                int v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v16;
              uint64_t v18 = (unsigned __int8 **)(v15 + 40 * v17);
              uint64_t v19 = *v18;
              if (*v18 == v12) {
                goto LABEL_39;
              }
            }
            if (v20) {
              uint64_t v27 = v20;
            }
            else {
              uint64_t v27 = v18;
            }
LABEL_50:
            uint64_t v18 = (unsigned __int8 **)sub_1CC609054(v13 + 2480, (uint64_t)&v115, (uint64_t *)&v115, v27);
            uint64_t v28 = v115;
            v18[4] = 0;
            v18[3] = 0;
            const char *v18 = v28;
            v18[1] = (unsigned __int8 *)(v18 + 3);
            _OWORD v18[2] = (unsigned __int8 *)0x100000000;
          }
LABEL_39:
          uint64_t v24 = *((unsigned int *)v18 + 4);
          if (v24)
          {
            uint64_t v25 = (uint64_t *)(v18[1] + 8);
            uint64_t v26 = 16 * v24;
            while (*((_DWORD *)v25 - 2))
            {
              v25 += 2;
              v26 -= 16;
              if (!v26) {
                goto LABEL_45;
              }
            }
            int v99 = (unsigned __int8 *)*v25;
            if (v99)
            {
              uint64_t v92 = sub_1CD467E2C((uint64_t)v100, (uint64_t *)&v99);
              BOOL v93 = v5;
              if (v92[1]) {
                goto LABEL_130;
              }
              int v29 = v99;
              uint64_t v30 = (uint64_t)v99;
              if (*v99 == 15 || (uint64_t v30 = *(void *)&v99[-8 * *((unsigned int *)v99 + 2)]) != 0)
              {
                uint64_t v30 = *(void *)(v30 - 8 * *(unsigned int *)(v30 + 8) + 8);
                if (v30)
                {
                  uint64_t v31 = *(void **)(v30 + 8);
                  uint64_t v33 = *v31;
                  uint64_t v32 = (unsigned __int8 *)(v31 + 3);
                  uint64_t v30 = v33;
                }
                else
                {
                  uint64_t v32 = 0;
                }
              }
              else
              {
                uint64_t v32 = "";
              }
              LOWORD(v118) = 261;
              uint64_t v115 = v32;
              v116[0] = (void *)v30;
              unsigned int __src = 3;
              if (llvm::sys::path::has_root_name((const char **)&v115, (const llvm::Twine *)3)) {
                goto LABEL_80;
              }
              int v34 = *v29;
              uint64_t v35 = v29;
              if (v34 == 15 || (v36 = *((unsigned int *)v29 + 2), (uint64_t v35 = *(unsigned __int8 **)&v29[-8 * v36]) != 0))
              {
                uint64_t v37 = *(void *)&v35[-8 * *((unsigned int *)v35 + 2) + 8];
                if (v37)
                {
                  uint64_t v38 = *(size_t **)(v37 + 8);
                  if (*v38)
                  {
                    uint64_t v39 = v38 + 3;
                    uint64_t v40 = (char *)memchr(v38 + 3, 92, *v38);
                    if (v40 && v40 - (char *)v39 != -1)
                    {
LABEL_78:
                      int v49 = 3;
LABEL_79:
                      unsigned int __src = v49;
LABEL_80:
                      int v50 = *v29;
                      uint64_t v51 = v29;
                      if ((v50 == 15 || (uint64_t v51 = *(unsigned __int8 **)&v29[-8 * *((unsigned int *)v29 + 2)]) != 0)
                        && (uint64_t v52 = *(void *)&v51[-8 * *((unsigned int *)v51 + 2) + 8]) != 0)
                      {
                        unint64_t v53 = *(unint64_t **)(v52 + 8);
                        unint64_t v56 = *v53;
                        int v55 = v53 + 3;
                        size_t v54 = v56;
                        uint64_t v115 = (unsigned __int8 *)&v117;
                        *(_OWORD *)uint64_t v116 = xmmword_1CD96DBF0;
                        if (v56 >= 0x101) {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod();
                        }
                        size_t v57 = 0;
                        int v58 = 0;
                        if (v54)
                        {
                          memcpy(&v117, v55, v54);
                          int v58 = (char *)v116[0];
                          int v50 = *v29;
                          size_t v57 = v54;
                        }
                      }
                      else
                      {
                        size_t v57 = 0;
                        int v58 = 0;
                        uint64_t v115 = (unsigned __int8 *)&v117;
                        v116[1] = (void *)256;
                      }
                      v116[0] = &v58[v57];
                      if (v50 == 15 || (int v29 = *(unsigned __int8 **)&v29[-8 * *((unsigned int *)v29 + 2)]) != 0)
                      {
                        std::string::size_type v59 = *(void *)&v29[-8 * *((unsigned int *)v29 + 2)];
                        if (v59)
                        {
                          uint64_t v60 = *(void **)(v59 + 8);
                          std::string::size_type v62 = *v60;
                          __int16 v61 = (const char *)(v60 + 3);
                          std::string::size_type v59 = v62;
                        }
                        else
                        {
                          __int16 v61 = 0;
                        }
                      }
                      else
                      {
                        std::string::size_type v59 = 0;
                        __int16 v61 = "";
                      }
                      LOWORD(v121) = 261;
                      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
                      v119.__r_.__value_.__l.__size_ = v59;
                      __int16 v114 = 257;
                      __int16 v112 = 257;
                      __int16 v110 = 257;
                      llvm::sys::path::append(&v115, (llvm::Twine *)__src, (const char **)&v119.__r_.__value_.__l.__data_, &v113, (uint64_t)&v111, (uint64_t)&__dst);
                      llvm::sys::path::native((char **)&v115, __src);
                      llvm::sys::path::remove_dots(&v115, 1, __src);
                      memset(&v113, 0, sizeof(v113));
                      uint64_t v120 = 0;
                      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
                      *(_OWORD *)&v119.__r_.__value_.__r.__words[1] = (unint64_t)v116[0];
                      uint64_t v121 = v116[0];
                      unsigned int v122 = __src;
                      llvm::sys::path::reverse_iterator::operator++((uint64_t)&v119);
                      uint64_t v63 = v120;
                      if (v120)
                      {
                        size_t v64 = (unsigned __int8 *)v119.__r_.__value_.__r.__words[2];
                        do
                        {
                          int v66 = *v64++;
                          std::string::value_type v65 = v66;
                          if (v66 == 46) {
                            std::string::value_type v65 = 64;
                          }
                          std::string::push_back(&v113, v65);
                          --v63;
                        }
                        while (v63);
                      }
                      unint64_t v67 = sub_1CD0E3AC0(v115, (unint64_t)v116[0], __src);
                      if (v67 == -1) {
                        unint64_t v67 = (unint64_t)v116[0];
                      }
                      else {
                        v116[0] = (void *)v67;
                      }
                      if (!v67)
                      {
                        unint64_t v68 = 5381;
                        goto LABEL_103;
                      }
                      unint64_t v69 = v115;
                      LODWORD(v68) = 5381;
                      do
                      {
                        int v70 = *v69++;
                        unint64_t v68 = (33 * v68 + v70);
                        --v67;
                      }
                      while (v67);
                      if (v68)
                      {
LABEL_103:
                        uint64_t v71 = &v119.__r_.__value_.__s.__data_[17];
                      }
                      else
                      {
                        unint64_t v68 = 0;
                        v119.__r_.__value_.__s.__data_[16] = 48;
                        uint64_t v71 = &v119.__r_.__value_.__s.__data_[16];
                      }
                      uint64_t v72 = 17;
                      size_t v73 = v71;
                      do
                      {
                        *--size_t v73 = a0123456789abcd_6[v68 & 0xF];
                        v68 >>= 4;
                        ++v72;
                      }
                      while (v72 != 25);
                      sub_1CC028D80(&__dst, v73, &v119.__r_.__value_.__s.__data_[17], (char *)&v119 - v71 + v72);
                      uint64_t v74 = std::string::insert(&__dst, 0, __s);
                      std::string::size_type v75 = v74->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
                      v111.__r_.__value_.__r.__words[2] = v75;
                      v74->__r_.__value_.__l.__size_ = 0;
                      v74->__r_.__value_.__r.__words[2] = 0;
                      v74->__r_.__value_.__r.__words[0] = 0;
                      BOOL v76 = std::string::append(&v111, "_");
                      std::string::size_type v77 = v76->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
                      v119.__r_.__value_.__r.__words[2] = v77;
                      v76->__r_.__value_.__l.__size_ = 0;
                      v76->__r_.__value_.__r.__words[2] = 0;
                      v76->__r_.__value_.__r.__words[0] = 0;
                      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v78 = &v113;
                      }
                      else {
                        uint64_t v78 = (std::string *)v113.__r_.__value_.__r.__words[0];
                      }
                      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type size = *((unsigned char *)&v113.__r_.__value_.__s + 23) & 0x7F;
                      }
                      else {
                        std::string::size_type size = v113.__r_.__value_.__l.__size_;
                      }
                      int v80 = std::string::append(&v119, (const std::string::value_type *)v78, size);
                      std::string::size_type v81 = v80->__r_.__value_.__r.__words[2];
                      *(_OWORD *)__p = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
                      uint64_t v98 = v81;
                      v80->__r_.__value_.__l.__size_ = 0;
                      v80->__r_.__value_.__r.__words[2] = 0;
                      v80->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v119.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v111.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__dst.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v113.__r_.__value_.__l.__data_);
                      }
                      if (v115 != (unsigned __int8 *)&v117) {
                        free(v115);
                      }
                      unsigned int v82 = (llvm::PointerType *)(*v3 + 1912);
                      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
                      if (v98 >= 0) {
                        unint64_t v83 = (unsigned __int8 *)__p;
                      }
                      else {
                        unint64_t v83 = (unsigned __int8 *)__p[0];
                      }
                      if (v98 >= 0) {
                        unint64_t v84 = HIBYTE(v98) & 0x7F;
                      }
                      else {
                        unint64_t v84 = (unint64_t)__p[1];
                      }
                      uint64_t v115 = a2;
                      v116[0] = &v119;
                      v116[1] = __p;
                      unsigned int v117 = &v102;
                      unint64_t v118 = (uint64_t *)&v99;
                      v92[1] = llvm::Module::getOrInsertGlobal((uint64_t)a2, v83, v84, v82, (uint64_t (*)(uint64_t))sub_1CC2DB6E8, (uint64_t)&v115);
                      if (SHIBYTE(v98) < 0) {
                        operator delete(__p[0]);
                      }
LABEL_130:
                      uint64_t v85 = **(void **)a2;
                      unsigned int v86 = (uint64_t **)(v85 + 1576);
                      uint64_t v115 = (unsigned __int8 *)llvm::PointerType::get((llvm::PointerType *)(v85 + 1912), 0);
                      uint64_t v87 = (llvm::PointerType *)llvm::FunctionType::get(v86, (uint64_t)&v115, 1, 0);
                      char v88 = 1;
                      BYTE1(v118) = 1;
                      if (v96)
                      {
                        uint64_t v115 = v95;
                        char v88 = 3;
                      }
                      LOBYTE(v118) = v88;
                      unsigned int v89 = operator new(0x80uLL);
                      *((_DWORD *)v89 + 7) = *((_DWORD *)v89 + 7) & 0x38000000 | 0x40000000;
                      *(void *)unsigned int v89 = 0;
                      llvm::Function::Function((unint64_t *)v89 + 1, v87, 0, (llvm::Type *)0xFFFFFFFFLL, (const char **)&v115, (unint64_t)a2);
                      *((_DWORD *)v89 + 10) = *((_DWORD *)v89 + 10) & 0xFFFFFF3F | 0x80;
                      *((void *)v89 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v89 + 15, **((uint64_t ***)v89 + 1), 1, 36);
                      if (v93) {
                        *((void *)v89 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v89 + 15, **((uint64_t ***)v89 + 1), 1, 10);
                      }
                      LOWORD(v118) = 257;
                      operator new();
                    }
                  }
                }
                uint64_t v42 = v29;
                if (v34 != 15)
                {
                  uint64_t v43 = -(uint64_t)*((unsigned int *)v29 + 2);
                  goto LABEL_68;
                }
                goto LABEL_69;
              }
              uint64_t v43 = -v36;
LABEL_68:
              uint64_t v42 = *(unsigned __int8 **)&v29[8 * v43];
              if (v42)
              {
LABEL_69:
                uint64_t v44 = *(void *)&v42[-8 * *((unsigned int *)v42 + 2)];
                if (v44)
                {
                  uint64_t v45 = *(size_t **)(v44 + 8);
                  if (*v45)
                  {
                    uint64_t v46 = v45 + 3;
                    unint64_t v47 = (char *)memchr(v45 + 3, 92, *v45);
                    if (v47 && v47 - (char *)v46 != -1) {
                      goto LABEL_78;
                    }
                  }
                }
              }
              int v49 = 1;
              goto LABEL_79;
            }
          }
          goto LABEL_45;
        }
        uint64_t v27 = 0;
        goto LABEL_50;
      }
LABEL_45:
      int v9 = (unsigned __int8 *)*((void *)v9 + 1);
      if (v9 == a2 + 24)
      {
        uint64_t v7 = (char *)v100[0];
        break;
      }
    }
  }
  MEMORY[0x1D25D9CD0](v7, 8);
  if (v104 < 0) {
    operator delete(v103);
  }
  return 0;
}

char *sub_1CC2DB6E8(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int v3 = (char *)operator new(0x78uLL);
  uint64_t v4 = (unint64_t *)(v3 + 32);
  *((_DWORD *)v3 + 13) = *((_DWORD *)v3 + 13) & 0x38000000 | 1;
  *(void *)int v3 = 0;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = v3 + 32;
  uint64_t v5 = *(void *)a1;
  int v6 = **(llvm::PointerType ***)(a1 + 8);
  uint64_t v7 = *(llvm::ConstantInt **)v6;
  unsigned int v8 = *((_DWORD *)v6 + 2);
  unsigned int v50 = v8 >> 8;
  if (v8 >> 8 > 0x40) {
    operator new[]();
  }
  if (v8 <= 0xFF) {
    LOBYTE(v9) = 0;
  }
  else {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v8) + 63);
  }
  int v49 = (const char *)(v9 & 1);
  int v10 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v49, v2);
  if (v50 >= 0x41 && v49) {
    MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
  }
  uint64_t v11 = *(const char **)(a1 + 16);
  __int16 v51 = 260;
  int v49 = v11;
  llvm::GlobalVariable::GlobalVariable(v4, v5, v6, 0, 7, (unint64_t)v10, &v49, 0, 0, 0, 0);
  size_t v12 = 0;
  uint64_t v13 = *(const char ***)(a1 + 24);
  int v14 = (unint64_t *)*v13;
  if (*v13) {
    size_t v12 = strlen(*v13);
  }
  unsigned int v15 = *((_DWORD *)v3 + 16);
  unsigned int v16 = v4 >> 4;
  if ((v15 & 0x400000) != 0 || v12)
  {
    if (v12)
    {
      int v14 = (unint64_t *)llvm::UniqueStringSaver::save(**(void **)*v4 + 2136, v14, v12);
      uint64_t v18 = v17;
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = **(void **)*v4;
    int v49 = v3 + 32;
    int v20 = *(_DWORD *)(v19 + 2520);
    if (v20)
    {
      uint64_t v21 = *(void *)(v19 + 2504);
      int v22 = v20 - 1;
      unsigned int v23 = v22 & (v16 ^ (v4 >> 9));
      uint64_t v24 = (unint64_t **)(v21 + 24 * v23);
      uint64_t v25 = *v24;
      if (*v24 == v4)
      {
LABEL_14:
        v24[1] = v14;
        v24[2] = v18;
        unsigned int v15 = *((_DWORD *)v3 + 16) & 0xFFBFFFFF | ((v18 != 0) << 22);
        goto LABEL_15;
      }
      uint64_t v37 = 0;
      int v38 = 1;
      while (v25 != (unint64_t *)-4096)
      {
        if (v37) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v25 == (unint64_t *)-8192;
        }
        if (v39) {
          uint64_t v37 = v24;
        }
        unsigned int v40 = v23 + v38++;
        unsigned int v23 = v40 & v22;
        uint64_t v24 = (unint64_t **)(v21 + 24 * v23);
        uint64_t v25 = *v24;
        if (*v24 == v4) {
          goto LABEL_14;
        }
      }
      if (v37) {
        unint64_t v47 = v37;
      }
      else {
        unint64_t v47 = v24;
      }
    }
    else
    {
      unint64_t v47 = 0;
    }
    uint64_t v24 = (unint64_t **)sub_1CC5BF31C(v19 + 2504, (uint64_t)&v49, (uint64_t *)&v49, v47);
    int v48 = v49;
    v24[1] = 0;
    v24[2] = 0;
    *uint64_t v24 = (unint64_t *)v48;
    goto LABEL_14;
  }
LABEL_15:
  *((_DWORD *)v3 + 16) = v15 & 0xFFC0FF3F | 0x10080;
  uint64_t v26 = **(void **)(a1 + 32);
  uint64_t v27 = *(void *)(v26 - 8 * *(unsigned int *)(v26 + 8) + 40);
  llvm::DIBuilder::DIBuilder((uint64_t)&v49, *((void **)v3 + 9), 0, v27);
  BasicType = llvm::DIBuilder::createBasicType((uint64_t)&v49, "unsigned char", (void *)0xD, 8, 8, 64);
  if ((v3[55] & 0x10) != 0)
  {
    uint64_t v29 = **(void **)*v4;
    uint64_t v30 = *(void *)(v29 + 152);
    uint64_t v31 = *(unsigned int *)(v29 + 168);
    if (v31)
    {
      LODWORD(v32) = (v31 - 1) & (v16 ^ (v4 >> 9));
      uint64_t v33 = (unint64_t **)(v30 + 16 * v32);
      int v34 = *v33;
      if (*v33 == v4)
      {
LABEL_32:
        uint64_t v41 = v33[1];
        size_t v44 = *v41;
        uint64_t v42 = (unsigned __int8 *)(v41 + 2);
        size_t v43 = v44;
        goto LABEL_33;
      }
      int v35 = 1;
      while (v34 != (unint64_t *)-4096)
      {
        int v36 = v32 + v35++;
        uint64_t v32 = v36 & (v31 - 1);
        int v34 = *(unint64_t **)(v30 + 16 * v32);
        if (v34 == v4)
        {
          uint64_t v33 = (unint64_t **)(v30 + 16 * v32);
          goto LABEL_32;
        }
      }
    }
    uint64_t v33 = (unint64_t **)(v30 + 16 * v31);
    goto LABEL_32;
  }
  size_t v43 = 0;
  uint64_t v42 = (unsigned __int8 *)&byte_1CFBCE98E;
LABEL_33:
  if (*(unsigned char *)v26 != 15) {
    uint64_t v26 = *(void *)(v26 - 8 * *(unsigned int *)(v26 + 8));
  }
  GlobalVariableExpression = llvm::DIBuilder::createGlobalVariableExpression((uint64_t)&v49, v27, v42, v43, 0, 0, v26, 0, (uint64_t)BasicType, 1, 1, 0, 0, 0, 0, 0);
  llvm::Value::addMetadata((llvm::Value *)v4, 0, GlobalVariableExpression);
  llvm::DIBuilder::finalize((llvm::DIBuilder *)&v49);
  sub_1CC2DBB1C((uint64_t)&v49);
  return v3 + 32;
}

uint64_t sub_1CC2DBB1C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 440);
  uint64_t v3 = *(void *)(a1 + 424);
  if (v2)
  {
    uint64_t v25 = 32 * v2;
    uint64_t v26 = (char **)(v3 + 8);
    do
    {
      if (((unint64_t)*(v26 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t v26 = sub_1CD5170A4(v26);
      }
      v26 += 4;
      v25 -= 32;
    }
    while (v25);
    uint64_t v3 = *(void *)(a1 + 424);
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  uint64_t v4 = *(unsigned int *)(a1 + 416);
  uint64_t v5 = *(void *)(a1 + 400);
  if (v4)
  {
    uint64_t v27 = 32 * v4;
    uint64_t v28 = (char **)(v5 + 8);
    do
    {
      if (((unint64_t)*(v28 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t v28 = sub_1CD5170A4(v28);
      }
      v28 += 4;
      v27 -= 32;
    }
    while (v27);
    uint64_t v5 = *(void *)(a1 + 400);
  }
  MEMORY[0x1D25D9CD0](v5, 8);
  int v6 = *(char **)(a1 + 344);
  uint64_t v7 = *(unsigned int *)(a1 + 352);
  if (v7)
  {
    uint64_t v16 = 8 * v7;
    unsigned int v17 = v6 - 8;
    uint64_t v29 = v6 - 8;
    do
    {
      uint64_t v18 = *(unsigned __int8 **)&v17[v16];
      if (v18) {
        llvm::MetadataTracking::untrack((uint64_t)&v17[v16], v18);
      }
      v16 -= 8;
      unsigned int v17 = v29;
    }
    while (v16);
    int v6 = *(char **)(a1 + 344);
  }
  if (v6 != (char *)(a1 + 360)) {
    free(v6);
  }
  uint64_t v32 = (void **)(a1 + 320);
  sub_1CC2DBD34(&v32);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 296), 8);
  unsigned int v8 = *(char **)(a1 + 248);
  uint64_t v9 = *(unsigned int *)(a1 + 256);
  if (v9)
  {
    uint64_t v19 = 8 * v9;
    int v20 = v8 - 8;
    uint64_t v30 = v8 - 8;
    do
    {
      uint64_t v21 = *(unsigned __int8 **)&v20[v19];
      if (v21) {
        llvm::MetadataTracking::untrack((uint64_t)&v20[v19], v21);
      }
      v19 -= 8;
      int v20 = v30;
    }
    while (v19);
    unsigned int v8 = *(char **)(a1 + 248);
  }
  if (v8 != (char *)(a1 + 264)) {
    free(v8);
  }
  int v10 = *(void **)(a1 + 200);
  if (v10 != (void *)(a1 + 216)) {
    free(v10);
  }
  uint64_t v11 = *(void **)(a1 + 152);
  if (v11 != (void *)(a1 + 168)) {
    free(v11);
  }
  size_t v12 = *(char **)(a1 + 104);
  uint64_t v13 = *(unsigned int *)(a1 + 112);
  if (v13)
  {
    uint64_t v22 = 8 * v13;
    unsigned int v23 = v12 - 8;
    uint64_t v31 = v12 - 8;
    do
    {
      uint64_t v24 = *(unsigned __int8 **)&v23[v22];
      if (v24) {
        llvm::MetadataTracking::untrack((uint64_t)&v23[v22], v24);
      }
      v22 -= 8;
      unsigned int v23 = v31;
    }
    while (v22);
    size_t v12 = *(char **)(a1 + 104);
  }
  if (v12 != (char *)(a1 + 120)) {
    free(v12);
  }
  int v14 = *(void **)(a1 + 56);
  if (v14 != (void *)(a1 + 72)) {
    free(v14);
  }
  return a1;
}

void sub_1CC2DBD34(void ***a1)
{
  __n128 v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 56;
        sub_1CD456CB4((void *)v4 - 6);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t llvm::LatencyPriorityQueue::getSingleUnscheduledPred(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *(void **)(a2 + 32);
    uint64_t v5 = 16 * v2;
    while (1)
    {
      unint64_t result = *v4 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_WORD *)(result + 228) & 0x400) != 0)
      {
        unint64_t result = v3;
      }
      else if (v3 && v3 != result)
      {
        return 0;
      }
      v4 += 2;
      unint64_t v3 = result;
      v5 -= 16;
      if (!v5) {
        return result;
      }
    }
  }
  return 0;
}

void llvm::LatencyPriorityQueue::push(void *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 120);
  if (v4)
  {
    int v5 = 0;
    int v6 = *(void **)(a2 + 112);
    uint64_t v7 = &v6[2 * v4];
    do
    {
      unint64_t v8 = *v6 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v9 = *(unsigned int *)(v8 + 40);
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = *(void **)(v8 + 32);
        uint64_t v12 = 16 * v9;
        while (1)
        {
          unint64_t v13 = *v11 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_WORD *)(v13 + 228) & 0x400) != 0)
          {
            unint64_t v13 = v10;
          }
          else if (v10 && v10 != v13)
          {
            break;
          }
          v11 += 2;
          unint64_t v10 = v13;
          v12 -= 16;
          if (!v12) {
            goto LABEL_13;
          }
        }
      }
      unint64_t v13 = 0;
LABEL_13:
      if (v13 == a2) {
        ++v5;
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
  else
  {
    int v5 = 0;
  }
  *(_DWORD *)(a1[3] + 4 * *(unsigned int *)(a2 + 192)) = v5;
  unsigned int v15 = (void *)a1[7];
  unint64_t v14 = a1[8];
  if ((unint64_t)v15 >= v14)
  {
    unsigned int v17 = (void *)a1[6];
    uint64_t v18 = v15 - v17;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      abort();
    }
    uint64_t v20 = v14 - (void)v17;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        sub_1CB833614();
      }
      uint64_t v22 = (char *)operator new(8 * v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    unsigned int v23 = &v22[8 * v18];
    *(void *)unsigned int v23 = a2;
    uint64_t v16 = v23 + 8;
    if (v15 != v17)
    {
      do
      {
        uint64_t v24 = *--v15;
        *((void *)v23 - 1) = v24;
        v23 -= 8;
      }
      while (v15 != v17);
      unsigned int v15 = (void *)a1[6];
    }
    a1[6] = v23;
    a1[7] = v16;
    a1[8] = &v22[8 * v21];
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v15 = a2;
    uint64_t v16 = v15 + 1;
  }
  a1[7] = v16;
}

uint64_t llvm::LatencyPriorityQueue::AdjustPriorityOfUnscheduledPreds(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 228) & 0x200) == 0)
  {
    uint64_t v2 = *(unsigned int *)(a2 + 40);
    if (v2)
    {
      uint64_t v3 = result;
      unint64_t v4 = 0;
      int v5 = *(void **)(a2 + 32);
      uint64_t v6 = 16 * v2;
      do
      {
        unint64_t v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_WORD *)(v7 + 228) & 0x400) == 0)
        {
          if (v4)
          {
            BOOL v8 = v4 == v7;
            unint64_t v4 = *v5 & 0xFFFFFFFFFFFFFFF8;
            if (!v8) {
              return result;
            }
          }
          else
          {
            unint64_t v4 = *v5 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        v5 += 2;
        v6 -= 16;
      }
      while (v6);
      if (v4 && (*(_WORD *)(v4 + 228) & 0x200) != 0)
      {
        (*(void (**)(uint64_t, unint64_t))(*(void *)result + 104))(result, v4);
        uint64_t v9 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)v3 + 88);
        return v9(v3, v4);
      }
    }
  }
  return result;
}

void sub_1CC2DC07C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v7 = *(_DWORD **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (a2 <= (v6 - (uint64_t)v7) >> 2)
  {
    if (a2)
    {
      uint64_t v18 = 4 * a2;
      unint64_t v19 = &v7[a2];
      do
      {
        *v7++ = *a3;
        v18 -= 4;
      }
      while (v18);
      unint64_t v7 = v19;
    }
    *(void *)(a1 + 8) = v7;
  }
  else
  {
    BOOL v8 = *(_DWORD **)a1;
    uint64_t v9 = (uint64_t)v7 - *(void *)a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      abort();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_1CB833614();
      }
      unint64_t v13 = (char *)operator new(4 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[4 * (v9 >> 2)];
    unsigned int v15 = &v14[4 * a2];
    uint64_t v16 = 4 * a2;
    unsigned int v17 = v14;
    do
    {
      *(_DWORD *)unsigned int v17 = *a3;
      v17 += 4;
      v16 -= 4;
    }
    while (v16);
    while (v7 != v8)
    {
      int v20 = *--v7;
      *((_DWORD *)v14 - 1) = v20;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v13[4 * v12];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_1CC2DC1C0(llvm *a1, llvm::PassRegistry *a2)
{
}

void *llvm::LazyMachineBlockFrequencyInfoPass::releaseMemory(void *this)
{
  uint64_t v1 = this[31];
  this[31] = 0;
  if (v1)
  {
    int v5 = this;
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    this = v5;
  }
  uint64_t v2 = this[32];
  this[32] = 0;
  if (v2)
  {
    uint64_t v6 = this;
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    this = v6;
  }
  uint64_t v3 = this[33];
  this[33] = 0;
  if (v3)
  {
    unint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return (void *)v4(v3);
  }
  return this;
}

uint64_t sub_1CC2DC358(llvm::MachineDominatorTree *this)
{
  if (!*((void *)this + 165)) {
    operator new();
  }
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)this);
  return *((void *)this + 165);
}

uint64_t llvm::LazyMachineBlockFrequencyInfoPass::runOnMachineFunction(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 272) = a2;
  return 0;
}

void sub_1CC2DC400(uint64_t a1, uint64_t a2)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  sub_1CC0CEEC8((uint64_t *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v4;
  if (a2)
  {
    uint64_t v12 = *(void *)(a2 + 16);
    if (v12)
    {
      sub_1CD517C1C(*(void *)(a2 + 8), v12);
      uint64_t v4 = *(void *)(a1 + 56);
      uint64_t v13 = a2;
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = operator new(8uLL);
    __p = v14;
    *unint64_t v14 = 0;
    uint64_t v16 = v14 + 1;
    unsigned int v17 = v14 + 1;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = v13;
    uint64_t v22 = v24;
    v24[0] = *(void *)(v4 + 328);
    uint64_t v23 = 0x100000001;
    sub_1CBA6E388(a1, (const void **)&v22);
    if (v22 != v24) {
      free(v22);
    }
    sub_1CC2DD1E8((uint64_t)&__p, **(void **)a1, 0, (unsigned int (*)(uint64_t, uint64_t))sub_1CC2DC6BC, 0, 0);
    sub_1CC2DC6C4((uint64_t)&__p, a1, 0);
    *(unsigned char *)a2 = 1;
  }
  else
  {
    int v5 = operator new(8uLL);
    __p = v5;
    void *v5 = 0;
    uint64_t v16 = v5 + 1;
    unsigned int v17 = v5 + 1;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = v24;
    v24[0] = *(void *)(v4 + 328);
    uint64_t v23 = 0x100000001;
    if (&v22 != (void **)a1)
    {
      if (!*(_DWORD *)(a1 + 12))
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(*(void **)a1, v24, 8uLL);
      uint64_t v6 = v22;
      *(_DWORD *)(a1 + 8) = 1;
      LODWORD(v23) = 0;
      if (v6 != v24) {
        free(v6);
      }
    }
    sub_1CC2DD1E8((uint64_t)&__p, **(void **)a1, 0, (unsigned int (*)(uint64_t, uint64_t))sub_1CC2DC6BC, 0, 0);
    sub_1CC2DC6C4((uint64_t)&__p, a1, 0);
  }
  if (*(_DWORD *)(a1 + 8)) {
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createNode();
  }
  uint64_t v7 = v18;
  if (v20)
  {
    uint64_t v8 = 72 * v20;
    uint64_t v9 = (void *)(v18 + 56);
    do
    {
      uint64_t v10 = *(v9 - 7);
      if (v10 != -4096 && v10 != -8192)
      {
        uint64_t v11 = (void *)*(v9 - 2);
        if (v9 != v11) {
          free(v11);
        }
      }
      v9 += 9;
      v8 -= 72;
    }
    while (v8);
    uint64_t v7 = v18;
  }
  MEMORY[0x1D25D9CD0](v7, 8);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

uint64_t sub_1CC2DC6BC()
{
  return 1;
}

void sub_1CC2DC6C4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v122[32] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (*(void *)(a1 + 8) - *(void *)a1) >> 3;
  uint64_t v7 = v6;
  if (v6 >= 2)
  {
    uint64_t v8 = 1;
    while (1)
    {
      v121[0] = 0;
      uint64_t v9 = *(void **)(v5 + 8 * v8);
      v121[0] = v9;
      int v10 = *(_DWORD *)(a1 + 40);
      if (!v10) {
        break;
      }
      uint64_t v11 = *(void *)(a1 + 24);
      int v12 = v10 - 1;
      unsigned int v13 = ((v9 >> 4) ^ (v9 >> 9)) & v12;
      unint64_t v14 = (uint64_t *)(v11 + 72 * v13);
      unsigned int v15 = (void *)*v14;
      if (v9 != (void *)*v14)
      {
        uint64_t v16 = 0;
        int v17 = 1;
        while (v15 != (void *)-4096)
        {
          if (v16) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = v15 == (void *)-8192;
          }
          if (v18) {
            uint64_t v16 = v14;
          }
          unsigned int v19 = v13 + v17++;
          unsigned int v13 = v19 & v12;
          unint64_t v14 = (uint64_t *)(v11 + 72 * v13);
          unsigned int v15 = (void *)*v14;
          if (v9 == (void *)*v14) {
            goto LABEL_5;
          }
        }
        if (v16) {
          unsigned int v20 = v16;
        }
        else {
          unsigned int v20 = v14;
        }
        goto LABEL_19;
      }
LABEL_5:
      v14[4] = *(void *)(v5 + 8 * *((unsigned int *)v14 + 3));
      if (++v8 == v6) {
        goto LABEL_20;
      }
    }
    unsigned int v20 = 0;
LABEL_19:
    unint64_t v14 = sub_1CC2DD9E4(a1 + 24, (uint64_t)v121, (uint64_t *)v121, v20);
    *unint64_t v14 = (uint64_t)v121[0];
    *(_OWORD *)(v14 + 5) = 0u;
    *(_OWORD *)(v14 + 3) = 0u;
    *(_OWORD *)(v14 + 1) = 0u;
    *(_OWORD *)(v14 + 7) = 0u;
    v14[5] = (uint64_t)(v14 + 7);
    *((_DWORD *)v14 + 13) = 2;
    uint64_t v5 = *(void *)a1;
    goto LABEL_5;
  }
LABEL_20:
  v121[0] = v122;
  v121[1] = (void *)0x2000000000;
  uint64_t v21 = (v6 - 1);
  if (v21 < 2) {
    goto LABEL_141;
  }
  uint64_t v118 = a1 + 24;
  unsigned int v117 = v6;
  unsigned int v22 = v6;
  do
  {
    uint64_t v120 = 0;
    uint64_t v23 = *(void *)(*(void *)a1 + 8 * v21);
    uint64_t v120 = v23;
    int v24 = *(_DWORD *)(a1 + 40);
    if (v24)
    {
      uint64_t v25 = *(void *)(a1 + 24);
      int v26 = v24 - 1;
      unsigned int v27 = ((v23 >> 4) ^ (v23 >> 9)) & v26;
      uint64_t v28 = (uint64_t *)(v25 + 72 * v27);
      uint64_t v29 = *v28;
      if (v23 == *v28) {
        goto LABEL_24;
      }
      uint64_t v63 = 0;
      int v64 = 1;
      while (v29 != -4096)
      {
        if (v63) {
          BOOL v65 = 0;
        }
        else {
          BOOL v65 = v29 == -8192;
        }
        if (v65) {
          uint64_t v63 = v28;
        }
        unsigned int v66 = v27 + v64++;
        unsigned int v27 = v66 & v26;
        uint64_t v28 = (uint64_t *)(v25 + 72 * v27);
        uint64_t v29 = *v28;
        if (v23 == *v28) {
          goto LABEL_24;
        }
      }
      if (v63) {
        unint64_t v67 = v63;
      }
      else {
        unint64_t v67 = v28;
      }
    }
    else
    {
      unint64_t v67 = 0;
    }
    uint64_t v28 = sub_1CC2DD9E4(v118, (uint64_t)&v120, &v120, v67);
    uint64_t *v28 = v120;
    *(_OWORD *)(v28 + 5) = 0u;
    *(_OWORD *)(v28 + 1) = 0u;
    *(_OWORD *)(v28 + 3) = 0u;
    *(_OWORD *)(v28 + 7) = 0u;
    v28[5] = (uint64_t)(v28 + 7);
    *((_DWORD *)v28 + 13) = 2;
LABEL_24:
    *((_DWORD *)v28 + 4) = *((_DWORD *)v28 + 3);
    uint64_t v30 = *((unsigned int *)v28 + 12);
    if (v30)
    {
      uint64_t v31 = (uint64_t *)v28[5];
      uint64_t v32 = &v31[v30];
      do
      {
        int v33 = *(_DWORD *)(a1 + 40);
        if (v33)
        {
          uint64_t v34 = *v31;
          uint64_t v35 = *(void *)(a1 + 24);
          unsigned int v36 = (*v31 >> 4) ^ (*v31 >> 9);
          int v37 = v33 - 1;
          unsigned int v38 = v36 & v37;
          uint64_t v39 = *(void *)(v35 + 72 * (v36 & v37));
          if (*v31 != v39)
          {
            int v40 = 1;
            while (v39 != -4096)
            {
              unsigned int v41 = v38 + v40++;
              unsigned int v38 = v41 & v37;
              uint64_t v39 = *(void *)(v35 + 72 * v38);
              if (v34 == v39) {
                goto LABEL_31;
              }
            }
            goto LABEL_39;
          }
LABEL_31:
          uint64_t v42 = *(unsigned int *)(a2 + 40);
          if (!v42) {
            goto LABEL_35;
          }
          uint64_t v43 = *(void *)(a2 + 24);
          LODWORD(v44) = (v42 - 1) & v36;
          uint64_t v45 = (uint64_t *)(v43 + 16 * v44);
          uint64_t v46 = *v45;
          if (v34 != *v45)
          {
            int v60 = 1;
            while (v46 != -4096)
            {
              int v61 = v44 + v60++;
              uint64_t v44 = v61 & (v42 - 1);
              uint64_t v46 = *(void *)(v43 + 16 * v44);
              if (v34 == v46)
              {
                uint64_t v45 = (uint64_t *)(v43 + 16 * v44);
                goto LABEL_33;
              }
            }
LABEL_35:
            uint64_t v48 = sub_1CC2DEA54(a1, v34, v22, (uint64_t)v121);
            uint64_t v119 = v48;
            int v49 = *(_DWORD *)(a1 + 40);
            if (v49)
            {
              uint64_t v50 = *(void *)(a1 + 24);
              int v51 = v49 - 1;
              unsigned int v52 = ((v48 >> 4) ^ (v48 >> 9)) & (v49 - 1);
              unint64_t v53 = (uint64_t *)(v50 + 72 * v52);
              uint64_t v54 = *v53;
              if (v48 == *v53) {
                goto LABEL_37;
              }
              unint64_t v56 = 0;
              int v57 = 1;
              while (v54 != -4096)
              {
                if (v56) {
                  BOOL v58 = 0;
                }
                else {
                  BOOL v58 = v54 == -8192;
                }
                if (v58) {
                  unint64_t v56 = v53;
                }
                unsigned int v59 = v52 + v57++;
                unsigned int v52 = v59 & v51;
                unint64_t v53 = (uint64_t *)(v50 + 72 * (v59 & v51));
                uint64_t v54 = *v53;
                if (v48 == *v53) {
                  goto LABEL_37;
                }
              }
              if (v56) {
                std::string::size_type v62 = v56;
              }
              else {
                std::string::size_type v62 = v53;
              }
            }
            else
            {
              std::string::size_type v62 = 0;
            }
            unint64_t v53 = sub_1CC2DD9E4(v118, (uint64_t)&v119, &v119, v62);
            uint64_t *v53 = v119;
            *(_OWORD *)(v53 + 5) = 0u;
            *(_OWORD *)(v53 + 1) = 0u;
            *(_OWORD *)(v53 + 3) = 0u;
            *(_OWORD *)(v53 + 7) = 0u;
            v53[5] = (uint64_t)(v53 + 7);
            *((_DWORD *)v53 + 13) = 2;
LABEL_37:
            unsigned int v55 = *((_DWORD *)v53 + 4);
            if (v55 < *((_DWORD *)v28 + 4)) {
              *((_DWORD *)v28 + 4) = v55;
            }
            goto LABEL_39;
          }
LABEL_33:
          if (v45 == (uint64_t *)(v43 + 16 * v42)) {
            goto LABEL_35;
          }
          uint64_t v47 = v45[1];
          if (!v47 || *(_DWORD *)(v47 + 16) >= a3) {
            goto LABEL_35;
          }
        }
LABEL_39:
        ++v31;
      }
      while (v31 != v32);
    }
    unsigned int v22 = v21--;
  }
  while ((v21 & 0xFFFFFFFE) != 0);
  if (v117 < 3) {
    goto LABEL_141;
  }
  uint64_t v68 = 2;
  while (2)
  {
    uint64_t v120 = 0;
    uint64_t v69 = *(void *)a1;
    uint64_t v70 = *(void *)(*(void *)a1 + 8 * v68);
    uint64_t v120 = v70;
    int v71 = *(_DWORD *)(a1 + 40);
    if (v71)
    {
      uint64_t v72 = *(void *)(a1 + 24);
      int v73 = v71 - 1;
      unsigned int v74 = ((v70 >> 4) ^ (v70 >> 9)) & (v71 - 1);
      std::string::size_type v75 = (uint64_t *)(v72 + 72 * v74);
      uint64_t v76 = *v75;
      if (v70 == *v75)
      {
        std::string::size_type v77 = (uint64_t *)(v69 + 8 * *((unsigned int *)v75 + 4));
        goto LABEL_78;
      }
      uint64_t v109 = 0;
      int v110 = 1;
      while (v76 != -4096)
      {
        if (v109) {
          BOOL v111 = 0;
        }
        else {
          BOOL v111 = v76 == -8192;
        }
        if (v111) {
          uint64_t v109 = v75;
        }
        unsigned int v112 = v74 + v110++;
        unsigned int v74 = v112 & v73;
        std::string::size_type v75 = (uint64_t *)(v72 + 72 * v74);
        uint64_t v76 = *v75;
        if (v70 == *v75) {
          goto LABEL_126;
        }
      }
      if (v109) {
        __int16 v114 = v109;
      }
      else {
        __int16 v114 = v75;
      }
    }
    else
    {
      __int16 v114 = 0;
    }
    std::string::size_type v75 = sub_1CC2DD9E4(v118, (uint64_t)&v120, &v120, v114);
    *std::string::size_type v75 = v120;
    *(_OWORD *)(v75 + 5) = 0u;
    *(_OWORD *)(v75 + 3) = 0u;
    *(_OWORD *)(v75 + 7) = 0u;
    *(_OWORD *)(v75 + 1) = 0u;
    v75[5] = (uint64_t)(v75 + 7);
    *((_DWORD *)v75 + 13) = 2;
    uint64_t v69 = *(void *)a1;
    uint64_t v72 = *(void *)(a1 + 24);
    int v71 = *(_DWORD *)(a1 + 40);
LABEL_126:
    std::string::size_type v77 = (uint64_t *)(v69 + 8 * *((unsigned int *)v75 + 4));
    if (!v71)
    {
      std::string v113 = 0;
LABEL_132:
      BOOL v79 = sub_1CC2DD9E4(v118, (uint64_t)v77, v77, v113);
      *BOOL v79 = *v77;
      *(_OWORD *)(v79 + 5) = 0u;
      *(_OWORD *)(v79 + 3) = 0u;
      *(_OWORD *)(v79 + 1) = 0u;
      *(_OWORD *)(v79 + 7) = 0u;
      v79[5] = (uint64_t)(v79 + 7);
      *((_DWORD *)v79 + 13) = 2;
      goto LABEL_79;
    }
    int v73 = v71 - 1;
LABEL_78:
    unsigned int v78 = ((*v77 >> 4) ^ (*v77 >> 9)) & v73;
    BOOL v79 = (uint64_t *)(v72 + 72 * v78);
    uint64_t v80 = *v79;
    if (*v77 != *v79)
    {
      int v105 = 0;
      int v106 = 1;
      while (v80 != -4096)
      {
        if (v105) {
          BOOL v107 = 0;
        }
        else {
          BOOL v107 = v80 == -8192;
        }
        if (v107) {
          int v105 = v79;
        }
        unsigned int v108 = v78 + v106++;
        unsigned int v78 = v108 & v73;
        BOOL v79 = (uint64_t *)(v72 + 72 * v78);
        uint64_t v80 = *v79;
        if (*v77 == *v79) {
          goto LABEL_79;
        }
      }
      if (v105) {
        std::string v113 = v105;
      }
      else {
        std::string v113 = v79;
      }
      goto LABEL_132;
    }
LABEL_79:
    unsigned int v81 = *((_DWORD *)v79 + 2);
    for (unsigned int i = v75 + 4; ; unsigned int i = v94 + 4)
    {
      uint64_t v83 = *i;
      uint64_t v119 = v83;
      int v84 = *(_DWORD *)(a1 + 40);
      if (v84)
      {
        uint64_t v85 = *(void *)(a1 + 24);
        int v86 = v84 - 1;
        unsigned int v87 = ((v83 >> 4) ^ (v83 >> 9)) & v86;
        char v88 = (uint64_t *)(v85 + 72 * v87);
        uint64_t v89 = *v88;
        if (v83 == *v88) {
          goto LABEL_82;
        }
        int v96 = 0;
        int v97 = 1;
        while (v89 != -4096)
        {
          if (v96) {
            BOOL v98 = 0;
          }
          else {
            BOOL v98 = v89 == -8192;
          }
          if (v98) {
            int v96 = v88;
          }
          unsigned int v99 = v87 + v97++;
          unsigned int v87 = v99 & v86;
          char v88 = (uint64_t *)(v85 + 72 * v87);
          uint64_t v89 = *v88;
          if (v83 == *v88) {
            goto LABEL_82;
          }
        }
        char v104 = v96 ? v96 : v88;
      }
      else
      {
        char v104 = 0;
      }
      char v88 = sub_1CC2DD9E4(v118, (uint64_t)&v119, &v119, v104);
      *char v88 = v119;
      *(_OWORD *)(v88 + 5) = 0u;
      *(_OWORD *)(v88 + 1) = 0u;
      *(_OWORD *)(v88 + 3) = 0u;
      *(_OWORD *)(v88 + 7) = 0u;
      v88[5] = (uint64_t)(v88 + 7);
      *((_DWORD *)v88 + 13) = 2;
LABEL_82:
      if (*((_DWORD *)v88 + 2) <= v81) {
        break;
      }
      int v90 = *(_DWORD *)(a1 + 40);
      if (v90)
      {
        uint64_t v91 = *(void *)(a1 + 24);
        int v92 = v90 - 1;
        unsigned int v93 = ((v119 >> 4) ^ (v119 >> 9)) & v92;
        uint64_t v94 = (uint64_t *)(v91 + 72 * v93);
        uint64_t v95 = *v94;
        if (v119 == *v94) {
          continue;
        }
        int v101 = 0;
        int v103 = 1;
        while (v95 != -4096)
        {
          if (v101) {
            BOOL v100 = 0;
          }
          else {
            BOOL v100 = v95 == -8192;
          }
          if (v100) {
            int v101 = v94;
          }
          unsigned int v102 = v93 + v103++;
          unsigned int v93 = v102 & v92;
          uint64_t v94 = (uint64_t *)(v91 + 72 * v93);
          uint64_t v95 = *v94;
          if (v119 == *v94) {
            goto LABEL_85;
          }
        }
        if (v101) {
          uint64_t v115 = v101;
        }
        else {
          uint64_t v115 = v94;
        }
      }
      else
      {
        uint64_t v115 = 0;
      }
      uint64_t v94 = sub_1CC2DD9E4(v118, (uint64_t)&v119, &v119, v115);
      *uint64_t v94 = v119;
      *(_OWORD *)(v94 + 5) = 0u;
      *(_OWORD *)(v94 + 1) = 0u;
      *(_OWORD *)(v94 + 3) = 0u;
      *(_OWORD *)(v94 + 7) = 0u;
      v94[5] = (uint64_t)(v94 + 7);
      *((_DWORD *)v94 + 13) = 2;
LABEL_85:
      ;
    }
    v75[4] = v119;
    if (++v68 != v7) {
      continue;
    }
    break;
  }
LABEL_141:
  if (v121[0] != v122) {
    free(v121[0]);
  }
}

uint64_t *sub_1CC2DCEC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v7 = (uint64_t *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8);
  int v10 = *(_DWORD *)(a1 + 40);
  if (v10)
  {
    int v11 = v10 - 1;
    unsigned int v12 = ((*v9 >> 4) ^ (*v9 >> 9)) & v11;
    unint64_t result = (uint64_t *)(v6 + 72 * v12);
    uint64_t v14 = *result;
    if (*v9 == *result) {
      goto LABEL_16;
    }
    unsigned int v15 = 0;
    int v16 = 1;
    while (v14 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        unsigned int v15 = result;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      unint64_t result = (uint64_t *)(v6 + 72 * v12);
      uint64_t v14 = *result;
      if (*v9 == *result) {
        goto LABEL_16;
      }
    }
    if (v15) {
      unsigned int v19 = v15;
    }
    else {
      unsigned int v19 = result;
    }
  }
  else
  {
    unsigned int v19 = 0;
  }
  unint64_t result = sub_1CC2DD9E4((uint64_t)v7, (uint64_t)v9, v9, v19);
  *unint64_t result = *v9;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  result[5] = (uint64_t)(result + 7);
  *((_DWORD *)result + 13) = 2;
  uint64_t v8 = *(void *)a1;
LABEL_16:
  result[4] = v5;
  uint64_t v20 = *(void *)(a1 + 8) - v8;
  if (v20 != 8)
  {
    uint64_t v21 = v20 >> 3;
    uint64_t v22 = 1;
    while (1)
    {
      uint64_t v36 = 0;
      uint64_t v23 = *(void *)(*(void *)a1 + 8 * v22);
      uint64_t v36 = v23;
      int v24 = *(_DWORD *)(a2 + 40);
      if (!v24) {
        break;
      }
      uint64_t v25 = *(void *)(a2 + 24);
      int v26 = v24 - 1;
      unsigned int v27 = ((v23 >> 4) ^ (v23 >> 9)) & v26;
      unint64_t result = (uint64_t *)(v25 + 16 * v27);
      uint64_t v28 = *result;
      if (v23 != *result)
      {
        uint64_t v29 = 0;
        int v30 = 1;
        while (v28 != -4096)
        {
          if (v29) {
            BOOL v31 = 0;
          }
          else {
            BOOL v31 = v28 == -8192;
          }
          if (v31) {
            uint64_t v29 = result;
          }
          unsigned int v32 = v27 + v30++;
          unsigned int v27 = v32 & v26;
          unint64_t result = (uint64_t *)(v25 + 16 * v27);
          uint64_t v28 = *result;
          if (v23 == *result) {
            goto LABEL_33;
          }
        }
        if (v29) {
          int v33 = v29;
        }
        else {
          int v33 = result;
        }
        goto LABEL_32;
      }
LABEL_33:
      if (!result[1])
      {
        uint64_t v34 = sub_1CC2DD8D0(v7, v36);
        if ((uint64_t *)(*(void *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40)) == v34) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = v34[4];
        }
        sub_1CC2DF224(a1, v35, a2);
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createChild();
      }
      if (++v22 == v21) {
        return result;
      }
    }
    int v33 = 0;
LABEL_32:
    unint64_t result = sub_1CC2DEE88(a2 + 24, (uint64_t)&v36, &v36, v33);
    *unint64_t result = v36;
    result[1] = 0;
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_1CC2DD104(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v3);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = a2;
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
        uint64_t v5 = v8;
        a2 = v9;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CC2DD1E8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int (*a4)(uint64_t, uint64_t), int a5, uint64_t a6)
{
  v96[64] = *MEMORY[0x1E4F143B8];
  uint64_t v89 = a2;
  uint64_t v94 = v96;
  v96[0] = a2;
  uint64_t v95 = 0x4000000001;
  uint64_t v9 = (uint64_t *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 24);
  int v10 = *(_DWORD *)(a1 + 40);
  if (!v10) {
    goto LABEL_15;
  }
  int v12 = v10 - 1;
  unsigned int v13 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = (uint64_t *)(v8 + 72 * v13);
  uint64_t v15 = *v14;
  if (*v14 == a2)
  {
LABEL_14:
    *(_DWORD *)(v8 + 72 * v13 + 12) = a5;
LABEL_15:
    unsigned int v24 = 1;
    goto LABEL_16;
  }
  int v16 = 1;
  uint64_t v17 = *v14;
  unsigned int v18 = v12 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v17 == -4096) {
      goto LABEL_15;
    }
    unsigned int v19 = v18 + v16++;
    unsigned int v18 = v19 & v12;
    uint64_t v17 = *(void *)(v8 + 72 * v18);
  }
  while (v17 != a2);
  uint64_t v20 = 0;
  int v21 = 1;
  while (v15 != -4096)
  {
    if (v20) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v15 == -8192;
    }
    if (v22) {
      uint64_t v20 = v14;
    }
    unsigned int v23 = v13 + v21++;
    unsigned int v13 = v23 & v12;
    uint64_t v14 = (uint64_t *)(v8 + 72 * v13);
    uint64_t v15 = *v14;
    if (*v14 == a2) {
      goto LABEL_14;
    }
  }
  if (v20) {
    uint64_t v83 = v20;
  }
  else {
    uint64_t v83 = v14;
  }
  int v84 = sub_1CC2DD9E4(a1 + 24, (uint64_t)&v89, &v89, v83);
  *int v84 = v89;
  *(_OWORD *)(v84 + 5) = 0u;
  *(_OWORD *)(v84 + 3) = 0u;
  *(_OWORD *)(v84 + 7) = 0u;
  *(_OWORD *)(v84 + 1) = 0u;
  v84[5] = (uint64_t)(v84 + 7);
  *((_DWORD *)v84 + 13) = 2;
  unsigned int v24 = v95;
  *((_DWORD *)v84 + 3) = a5;
  if (v24)
  {
    do
    {
LABEL_16:
      uint64_t v88 = 0;
      uint64_t v25 = *((void *)v94 + v24 - 1);
      LODWORD(v95) = v24 - 1;
      uint64_t v88 = v25;
      int v26 = *(_DWORD *)(a1 + 40);
      if (v26)
      {
        uint64_t v27 = *(void *)(a1 + 24);
        int v28 = v26 - 1;
        unsigned int v29 = v28 & ((v25 >> 4) ^ (v25 >> 9));
        int v30 = (uint64_t *)(v27 + 72 * v29);
        uint64_t v31 = *v30;
        if (v25 == *v30) {
          goto LABEL_31;
        }
        unsigned int v32 = 0;
        int v33 = 1;
        while (v31 != -4096)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 == -8192;
          }
          if (v34) {
            unsigned int v32 = v30;
          }
          unsigned int v35 = v29 + v33++;
          unsigned int v29 = v35 & v28;
          int v30 = (uint64_t *)(v27 + 72 * v29);
          uint64_t v31 = *v30;
          if (v25 == *v30) {
            goto LABEL_31;
          }
        }
        if (v32) {
          uint64_t v36 = v32;
        }
        else {
          uint64_t v36 = v30;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      int v30 = sub_1CC2DD9E4((uint64_t)v9, (uint64_t)&v88, &v88, v36);
      *int v30 = v88;
      *(_OWORD *)(v30 + 5) = 0u;
      *(_OWORD *)(v30 + 1) = 0u;
      *(_OWORD *)(v30 + 3) = 0u;
      *(_OWORD *)(v30 + 7) = 0u;
      v30[5] = (uint64_t)(v30 + 7);
      *((_DWORD *)v30 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v30 + 2))
      {
        *((_DWORD *)v30 + 4) = ++a3;
        *((_DWORD *)v30 + 2) = a3;
        uint64_t v37 = v88;
        v30[3] = v88;
        uint64_t v39 = *(uint64_t **)(a1 + 8);
        unint64_t v38 = *(void *)(a1 + 16);
        if ((unint64_t)v39 >= v38)
        {
          unsigned int v41 = *(uint64_t **)a1;
          uint64_t v42 = ((uint64_t)v39 - *(void *)a1) >> 3;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61) {
            abort();
          }
          uint64_t v44 = v38 - (void)v41;
          if (v44 >> 2 > v43) {
            unint64_t v43 = v44 >> 2;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            if (v45 >> 61) {
              sub_1CB833614();
            }
            uint64_t v46 = (char *)operator new(8 * v45);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v47 = (uint64_t *)&v46[8 * v42];
          *uint64_t v47 = v37;
          int v40 = v47 + 1;
          if (v39 != v41)
          {
            do
            {
              uint64_t v48 = *--v39;
              *--uint64_t v47 = v48;
            }
            while (v39 != v41);
            uint64_t v39 = *(uint64_t **)a1;
          }
          *(void *)a1 = v47;
          *(void *)(a1 + 8) = v40;
          *(void *)(a1 + 16) = &v46[8 * v45];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *uint64_t v39 = v37;
          int v40 = v39 + 1;
        }
        *(void *)(a1 + 8) = v40;
        uint64_t v49 = *(void *)(a1 + 48);
        if (v49)
        {
          sub_1CD517F18(*(void *)(v49 + 8), v88, (uint64_t)&v91);
          unint64_t v61 = v92;
          unsigned int v52 = v91;
        }
        else
        {
          uint64_t v50 = *(void *)(v88 + 88);
          uint64_t v51 = *(void *)(v88 + 96);
          unsigned int v52 = (uint64_t *)v93;
          uint64_t v91 = (uint64_t *)v93;
          uint64_t v92 = 0x800000000;
          unint64_t v53 = v51 - v50;
          if ((unint64_t)(v51 - v50) >= 0x41) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v51 != v50)
          {
            uint64_t v54 = v93;
            do
            {
              uint64_t v55 = *(void *)(v51 - 8);
              v51 -= 8;
              *v54++ = v55;
            }
            while (v51 != v50);
            unsigned int v52 = v91;
          }
          unint64_t v56 = v52;
          uint64_t v57 = (v53 >> 3);
          if (v57)
          {
            uint64_t v58 = 8 * v57;
            unint64_t v56 = v52;
            while (*v56)
            {
              ++v56;
              v58 -= 8;
              if (!v58)
              {
                unint64_t v56 = &v52[v57];
                break;
              }
            }
          }
          uint64_t v59 = v56 - v52;
          if (v59 != v57)
          {
            unsigned int v81 = v56 + 1;
            if (v56 + 1 != &v52[v57])
            {
              uint64_t v82 = 8 * v57 - 8 * v59 - 8;
              do
              {
                if (*v81) {
                  *v56++ = *v81;
                }
                ++v81;
                v82 -= 8;
              }
              while (v82);
              unsigned int v52 = v91;
            }
          }
          unint64_t v60 = (unint64_t)((char *)v56 - (char *)v52) >> 3;
          unint64_t v61 = v60;
          LODWORD(v92) = v60;
        }
        if (a6 && v61 >= 2)
        {
          uint64_t v90 = a6;
          sub_1CD518254((uint64_t)v52, &v52[v61], &v90, 126 - 2 * __clz(v61), 1);
          unint64_t v61 = v92;
          unsigned int v52 = v91;
        }
        std::string::size_type v62 = &v52[v61];
        if (v61)
        {
          while (1)
          {
            uint64_t v90 = 0;
            uint64_t v90 = *v52;
            uint64_t v63 = sub_1CC2DD8D0(v9, v90);
            if ((uint64_t *)(*(void *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40)) == v63 || !*((_DWORD *)v63 + 2))
            {
              if (a4(v88, v90))
              {
                int v69 = *(_DWORD *)(a1 + 40);
                if (!v69)
                {
                  uint64_t v80 = 0;
                  goto LABEL_85;
                }
                uint64_t v70 = *(void *)(a1 + 24);
                uint64_t v71 = v90;
                int v72 = v69 - 1;
                unsigned int v73 = ((v90 >> 4) ^ (v90 >> 9)) & v72;
                unsigned int v74 = (uint64_t *)(v70 + 72 * v73);
                uint64_t v75 = *v74;
                if (v90 != *v74)
                {
                  uint64_t v76 = 0;
                  int v77 = 1;
                  while (v75 != -4096)
                  {
                    if (v76) {
                      BOOL v78 = 0;
                    }
                    else {
                      BOOL v78 = v75 == -8192;
                    }
                    if (v78) {
                      uint64_t v76 = v74;
                    }
                    unsigned int v79 = v73 + v77++;
                    unsigned int v73 = v79 & v72;
                    unsigned int v74 = (uint64_t *)(v70 + 72 * v73);
                    uint64_t v75 = *v74;
                    if (v90 == *v74) {
                      goto LABEL_86;
                    }
                  }
                  if (v76) {
                    uint64_t v80 = v76;
                  }
                  else {
                    uint64_t v80 = v74;
                  }
LABEL_85:
                  unsigned int v74 = sub_1CC2DD9E4((uint64_t)v9, (uint64_t)&v90, &v90, v80);
                  *unsigned int v74 = v90;
                  *(_OWORD *)(v74 + 5) = 0u;
                  *(_OWORD *)(v74 + 1) = 0u;
                  *(_OWORD *)(v74 + 3) = 0u;
                  *(_OWORD *)(v74 + 7) = 0u;
                  v74[5] = (uint64_t)(v74 + 7);
                  *((_DWORD *)v74 + 13) = 2;
                  uint64_t v71 = v90;
                }
LABEL_86:
                if (v95 >= (unint64_t)HIDWORD(v95)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v94 + v95) = v71;
                unint64_t v67 = v74 + 6;
                unint64_t v66 = *((unsigned int *)v74 + 12);
                LODWORD(v95) = v95 + 1;
                *((_DWORD *)v74 + 3) = a3;
                BOOL v65 = v74 + 5;
                uint64_t v64 = v88;
                unint64_t v68 = *((unsigned int *)v74 + 13);
LABEL_88:
                if (v66 >= v68) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*v65 + 8 * v66) = v64;
                ++*v67;
              }
            }
            else
            {
              uint64_t v64 = v88;
              if (v90 != v88)
              {
                BOOL v65 = v63 + 5;
                unint64_t v67 = v63 + 6;
                unint64_t v66 = *((unsigned int *)v63 + 12);
                unint64_t v68 = *((unsigned int *)v63 + 13);
                goto LABEL_88;
              }
            }
            if (++v52 == v62)
            {
              unsigned int v52 = v91;
              break;
            }
          }
        }
        if (v52 != (uint64_t *)v93) {
          free(v52);
        }
      }
      unsigned int v24 = v95;
    }
    while (v95);
  }
  if (v94 != v96) {
    free(v94);
  }
  return a3;
}

uint64_t *sub_1CC2DD8D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 4);
  if (!v3) {
    return (uint64_t *)(v2 + 72 * v3);
  }
  unsigned int v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t result = (uint64_t *)(v2 + 72 * v4);
  uint64_t v6 = *result;
  if (*result != a2)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & (v3 - 1);
      unint64_t result = (uint64_t *)(v2 + 72 * v4);
      uint64_t v6 = *result;
      if (*result == a2) {
        return result;
      }
    }
    return (uint64_t *)(v2 + 72 * v3);
  }
  return result;
}

uint64_t sub_1CC2DD944(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 72 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          int v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 72 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t *sub_1CC2DD9E4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    int v10 = *(uint64_t **)a1;
    unint64_t v11 = (2 * v7 - 1) | ((unint64_t)(2 * v7 - 1) >> 1);
    unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 64;
    }
    *(_DWORD *)(a1 + 16) = v14;
    uint64_t v15 = (uint64_t *)operator new(72 * v14, (std::align_val_t)8uLL);
    *(void *)a1 = v15;
    if (v10)
    {
      sub_1CC2DDC90(a1, v10, &v10[9 * v7]);
      MEMORY[0x1D25D9CD0](v10, 8);
      LODWORD(v17) = *(_DWORD *)(a1 + 16);
      uint64_t v15 = *(uint64_t **)a1;
    }
    else
    {
      uint64_t v16 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v17 = *(unsigned int *)(a1 + 16);
      do
      {
        v15[v16] = -4096;
        v16 += 9;
      }
      while (9 * v17 != v16);
    }
    uint64_t v8 = *a3;
    int v18 = v17 - 1;
    unsigned int v19 = ((*a3 >> 4) ^ (*a3 >> 9)) & v18;
    a4 = &v15[9 * v19];
    uint64_t v20 = *a4;
    if (*a3 == *a4) {
      goto LABEL_5;
    }
    int v21 = 0;
    int v22 = 1;
    while (v20 != -4096)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v20 == -8192;
      }
      if (v23) {
        int v21 = a4;
      }
      unsigned int v24 = v19 + v22++;
      unsigned int v19 = v24 & v18;
      a4 = &v15[9 * v19];
      uint64_t v20 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v21) {
      a4 = v21;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CC2DDBB8(a1, *(_DWORD *)(a1 + 16));
    uint64_t v25 = 0;
    sub_1CC2DD944((uint64_t *)a1, a3, &v25);
    a4 = v25;
  }
  uint64_t v8 = *a4;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC2DDBB8(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC2DDC90(a1, v4, &v4[9 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 72 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void sub_1CC2DDC90(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 72 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v10 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
        uint64_t v12 = *(void *)a1 + 72 * v11;
        uint64_t v13 = *(void *)v12;
        if (v9 != *(void *)v12)
        {
          uint64_t v19 = 0;
          int v20 = 1;
          while (v13 != -4096)
          {
            if (v19) {
              BOOL v21 = 0;
            }
            else {
              BOOL v21 = v13 == -8192;
            }
            if (v21) {
              uint64_t v19 = v12;
            }
            unsigned int v22 = v11 + v20++;
            unsigned int v11 = v22 & v10;
            uint64_t v12 = *(void *)a1 + 72 * v11;
            uint64_t v13 = *(void *)v12;
            if (v9 == *(void *)v12) {
              goto LABEL_7;
            }
          }
          if (v19) {
            uint64_t v12 = v19;
          }
        }
LABEL_7:
        *(void *)uint64_t v12 = v9;
        long long v14 = *(_OWORD *)(v4 + 1);
        long long v15 = *(_OWORD *)(v4 + 3);
        *(void *)(v12 + 40) = v12 + 56;
        *(_OWORD *)(v12 + 8) = v14;
        *(_OWORD *)(v12 + 24) = v15;
        *(void *)(v12 + 48) = 0x200000000;
        unsigned int v16 = *((_DWORD *)v4 + 12);
        if (v16 && (uint64_t *)v12 != v4)
        {
          uint64_t v17 = (uint64_t *)v4[5];
          if (v17 == v4 + 7)
          {
            if (v16 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v12 + 56), v17, 8 * *((unsigned int *)v4 + 12));
            *(_DWORD *)(v12 + 48) = v16;
          }
          else
          {
            *(void *)(v12 + 40) = v17;
            int v23 = *((_DWORD *)v4 + 13);
            *(_DWORD *)(v12 + 48) = v16;
            *(_DWORD *)(v12 + 52) = v23;
            v4[5] = (uint64_t)(v4 + 7);
            *((_DWORD *)v4 + 13) = 0;
          }
          *((_DWORD *)v4 + 12) = 0;
        }
        ++*(_DWORD *)(a1 + 8);
        int v18 = (uint64_t *)v4[5];
        if (v18 != v4 + 7) {
          free(v18);
        }
      }
      v4 += 9;
    }
    while (v4 != a3);
  }
}

uint64_t *sub_1CC2DDE90(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    unint64_t v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (uint64_t *)sub_1CD518604(a3, v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(uint64_t *)((char *)v4 + v12 + 8) = *(uint64_t *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (uint64_t *)sub_1CD518604(a3, v11, *(uint64_t *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        unint64_t v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t *sub_1CC2DDF58(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    for (unsigned int i = result + 1; v4 + 1 != a2; unsigned int i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      uint64_t result = (uint64_t *)sub_1CD518604(a3, v7, v8);
      if (result)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = *--v10;
          uint64_t *v11 = v12;
          uint64_t result = (uint64_t *)sub_1CD518604(a3, v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        uint64_t *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_1CC2DDFF4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8 = sub_1CD518604(a4, *a2, *a1);
  uint64_t result = sub_1CD518604(a4, *a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    if (!sub_1CD518604(a4, *a3, v10)) {
      return 1;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    return 2;
  }
  if (result)
  {
    uint64_t v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    if (!sub_1CD518604(a4, *a2, *a1)) {
      return 1;
    }
    uint64_t v13 = *a1;
    *a1 = *a2;
    *a2 = v13;
    return 2;
  }
  return result;
}

uint64_t *sub_1CC2DE0E4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if (sub_1CD518604(a3, *a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (!sub_1CD518604(a3, v6, v8));
  }
  else
  {
    long long v14 = a1 + 1;
    do
    {
      uint64_t v7 = v14;
      if (v14 >= v4) {
        break;
      }
      ++v14;
    }
    while (!sub_1CD518604(a3, v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v9 = *--v4;
    while (sub_1CD518604(a3, v6, v9));
  }
  while (v7 < v4)
  {
    uint64_t v10 = *v7;
    *uint64_t v7 = *v4;
    *uint64_t v4 = v10;
    do
    {
      uint64_t v11 = v7[1];
      ++v7;
    }
    while (!sub_1CD518604(a3, v6, v11));
    do
      uint64_t v12 = *--v4;
    while (sub_1CD518604(a3, v6, v12));
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_1CC2DE1F4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  while (sub_1CD518604(a3, a1[++v6], v7))
    ;
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (!sub_1CD518604(a3, v12, v7));
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!sub_1CD518604(a3, v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = &a1[v6];
    long long v14 = a2;
    do
    {
      uint64_t v15 = *v13;
      *uint64_t v13 = *v14;
      *long long v14 = v15;
      do
      {
        uint64_t v16 = v13[1];
        ++v13;
      }
      while (sub_1CD518604(a3, v16, v7));
      do
        uint64_t v17 = *--v14;
      while (!sub_1CD518604(a3, v17, v7));
    }
    while (v13 < v14);
    uint64_t v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  uint64_t *v10 = v7;
  return v10;
}

BOOL sub_1CC2DE310(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1CD518604(a3, *(a2 - 1), *a1))
      {
        uint64_t v16 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v16;
      }
      return 1;
    case 3:
      sub_1CC2DDFF4(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC2DE4DC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CC2DE594(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CC2DDFF4(a1, a1 + 1, a1 + 2, a3);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1CD518604(a3, *v9, *v8))
    {
      uint64_t v12 = *v9;
      uint64_t v13 = v10;
      while (1)
      {
        long long v14 = (char *)a1 + v13;
        *(uint64_t *)((char *)a1 + v13 + 24) = *(uint64_t *)((char *)a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        v13 -= 8;
        if (!sub_1CD518604(a3, v12, *((void *)v14 + 1)))
        {
          uint64_t v15 = (uint64_t *)((char *)a1 + v13 + 24);
          goto LABEL_11;
        }
      }
      uint64_t v15 = a1;
LABEL_11:
      uint64_t *v15 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    BOOL result = 1;
    if (++v9 == a2) {
      return result;
    }
  }
}

BOOL sub_1CC2DE4DC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1CC2DDFF4(a1, a2, a3, a5);
  BOOL result = sub_1CD518604(a5, *a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    BOOL result = sub_1CD518604(a5, *a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL result = sub_1CD518604(a5, *a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL sub_1CC2DE594(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  sub_1CC2DE4DC(a1, a2, a3, a4, a6);
  BOOL result = sub_1CD518604(a6, *a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    BOOL result = sub_1CD518604(a6, *a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      BOOL result = sub_1CD518604(a6, *a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        BOOL result = sub_1CD518604(a6, *a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CC2DE674(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        sub_1CC2DE7C8((BOOL)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (sub_1CD518604(a4, *v14, *a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v15;
          sub_1CC2DE7C8((BOOL)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = a2 - 1;
      do
      {
        uint64_t v17 = *a1;
        int v18 = sub_1CC2DE8F4(a1, a4, v9);
        if (v16 == v18)
        {
          uint64_t *v18 = v17;
        }
        else
        {
          uint64_t *v18 = *v16;
          uint64_t *v16 = v17;
          sub_1CC2DE9AC((BOOL)a1, (uint64_t)(v18 + 1), a4, v18 + 1 - a1);
        }
        --v16;
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

BOOL sub_1CC2DE7C8(BOOL result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    BOOL v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_1CD518604(a2, *v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      BOOL result = sub_1CD518604(a2, *v12, *v5);
      if (!result)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          uint64_t *v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (uint64_t *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3 && sub_1CD518604(a2, *v12, v12[1]))
          {
            ++v12;
            uint64_t v16 = 2 * v11 + 2;
          }
          BOOL result = sub_1CD518604(a2, *v12, v14);
          unint64_t v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        uint64_t *v15 = v14;
      }
    }
  }
  return result;
}

uint64_t *sub_1CC2DE8F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && sub_1CD518604(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL sub_1CC2DE9AC(BOOL result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    BOOL result = sub_1CD518604(a3, *v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        BOOL result = sub_1CD518604(a3, *v8, v10);
        uint64_t v9 = v11;
      }
      while (result);
      uint64_t *v11 = v10;
    }
  }
  return result;
}

uint64_t sub_1CC2DEA54(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v61 = a2;
  uint64_t v8 = a1 + 24;
  uint64_t v7 = *(void *)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 40);
  if (v9)
  {
    int v10 = v9 - 1;
    unsigned int v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v12 = (uint64_t *)(v7 + 72 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_3;
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v13 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v13 == -8192;
      }
      if (v18) {
        uint64_t v16 = v12;
      }
      unsigned int v19 = v11 + v17++;
      unsigned int v11 = v19 & v10;
      uint64_t v12 = (uint64_t *)(v7 + 72 * v11);
      uint64_t v13 = *v12;
      if (*v12 == a2) {
        goto LABEL_3;
      }
    }
    if (v16) {
      int v20 = v16;
    }
    else {
      int v20 = v12;
    }
  }
  else
  {
    int v20 = 0;
  }
  uint64_t v12 = sub_1CC2DD9E4(v8, (uint64_t)&v61, &v61, v20);
  *uint64_t v12 = v61;
  *(_OWORD *)(v12 + 5) = 0u;
  *(_OWORD *)(v12 + 1) = 0u;
  *(_OWORD *)(v12 + 3) = 0u;
  *(_OWORD *)(v12 + 7) = 0u;
  v12[5] = (uint64_t)(v12 + 7);
  *((_DWORD *)v12 + 13) = 2;
LABEL_3:
  if (*((_DWORD *)v12 + 3) >= a3)
  {
    BOOL v21 = v12 + 1;
    while (1)
    {
      unint64_t v22 = *(unsigned int *)(a4 + 8);
      if (v22 >= *(unsigned int *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a4 + 8 * v22) = v21;
      ++*(_DWORD *)(a4 + 8);
      int v23 = (uint64_t *)(*(void *)a1 + 8 * *((unsigned int *)v21 + 1));
      int v24 = *(_DWORD *)(a1 + 40);
      if (!v24) {
        break;
      }
      uint64_t v25 = *(void *)(a1 + 24);
      int v26 = v24 - 1;
      unsigned int v27 = ((*v23 >> 4) ^ (*v23 >> 9)) & v26;
      int v28 = (uint64_t *)(v25 + 72 * v27);
      uint64_t v29 = *v28;
      if (*v23 != *v28)
      {
        int v30 = 0;
        int v31 = 1;
        while (v29 != -4096)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -8192;
          }
          if (v32) {
            int v30 = v28;
          }
          unsigned int v33 = v27 + v31++;
          unsigned int v27 = v33 & v26;
          int v28 = (uint64_t *)(v25 + 72 * v27);
          uint64_t v29 = *v28;
          if (*v23 == *v28) {
            goto LABEL_23;
          }
        }
        if (v30) {
          BOOL v34 = v30;
        }
        else {
          BOOL v34 = v28;
        }
        goto LABEL_37;
      }
LABEL_23:
      BOOL v21 = v28 + 1;
      if (*((_DWORD *)v28 + 3) < a3)
      {
        unsigned int v35 = v28 + 3;
        int v36 = *(_DWORD *)(a1 + 40);
        if (v36)
        {
          uint64_t v37 = *(void *)(a1 + 24);
          int v38 = v36 - 1;
          unsigned int v39 = ((*v35 >> 4) ^ (*v35 >> 9)) & v38;
          int v40 = (uint64_t *)(v37 + 72 * v39);
          uint64_t v41 = *v40;
          if (*v35 == *v40) {
            goto LABEL_40;
          }
          unint64_t v56 = 0;
          int v57 = 1;
          while (v41 != -4096)
          {
            if (v56) {
              BOOL v58 = 0;
            }
            else {
              BOOL v58 = v41 == -8192;
            }
            if (v58) {
              unint64_t v56 = v40;
            }
            unsigned int v59 = v39 + v57++;
            unsigned int v39 = v59 & v38;
            int v40 = (uint64_t *)(v37 + 72 * v39);
            uint64_t v41 = *v40;
            if (*v35 == *v40) {
              goto LABEL_40;
            }
          }
          if (v56) {
            unint64_t v60 = v56;
          }
          else {
            unint64_t v60 = v40;
          }
        }
        else
        {
          unint64_t v60 = 0;
        }
        int v40 = sub_1CC2DD9E4(v8, (uint64_t)v35, v35, v60);
        uint64_t *v40 = *v35;
        *(_OWORD *)(v40 + 5) = 0u;
        *(_OWORD *)(v40 + 3) = 0u;
        *(_OWORD *)(v40 + 1) = 0u;
        *(_OWORD *)(v40 + 7) = 0u;
        v40[5] = (uint64_t)(v40 + 7);
        *((_DWORD *)v40 + 13) = 2;
LABEL_40:
        uint64_t v42 = v40 + 1;
        unsigned int v43 = *(_DWORD *)(a4 + 8);
        while (2)
        {
          uint64_t v44 = *(void *)(*(void *)a4 + 8 * v43 - 8);
          *(_DWORD *)(a4 + 8) = v43 - 1;
          *(_DWORD *)(v44 + 4) = *((_DWORD *)v21 + 1);
          uint64_t v14 = (uint64_t *)(v44 + 16);
          int v45 = *(_DWORD *)(a1 + 40);
          if (v45)
          {
            uint64_t v46 = *(void *)(a1 + 24);
            int v47 = v45 - 1;
            unsigned int v48 = ((*v14 >> 4) ^ (*v14 >> 9)) & v47;
            uint64_t v49 = (uint64_t *)(v46 + 72 * v48);
            uint64_t v50 = *v49;
            if (*v14 == *v49) {
              goto LABEL_43;
            }
            uint64_t v51 = 0;
            int v52 = 1;
            while (v50 != -4096)
            {
              if (v51) {
                BOOL v53 = 0;
              }
              else {
                BOOL v53 = v50 == -8192;
              }
              if (v53) {
                uint64_t v51 = v49;
              }
              unsigned int v54 = v48 + v52++;
              unsigned int v48 = v54 & v47;
              uint64_t v49 = (uint64_t *)(v46 + 72 * v48);
              uint64_t v50 = *v49;
              if (*v14 == *v49) {
                goto LABEL_43;
              }
            }
            if (v51) {
              uint64_t v55 = v51;
            }
            else {
              uint64_t v55 = v49;
            }
          }
          else
          {
            uint64_t v55 = 0;
          }
          uint64_t v49 = sub_1CC2DD9E4(v8, v44 + 16, (uint64_t *)(v44 + 16), v55);
          *uint64_t v49 = *v14;
          *(_OWORD *)(v49 + 5) = 0u;
          *(_OWORD *)(v49 + 3) = 0u;
          *(_OWORD *)(v49 + 1) = 0u;
          *(_OWORD *)(v49 + 7) = 0u;
          v49[5] = (uint64_t)(v49 + 7);
          *((_DWORD *)v49 + 13) = 2;
LABEL_43:
          if (*((_DWORD *)v42 + 2) >= *((_DWORD *)v49 + 4)) {
            uint64_t v42 = v49 + 1;
          }
          else {
            *uint64_t v14 = v21[2];
          }
          unsigned int v43 = *(_DWORD *)(a4 + 8);
          BOOL v21 = (uint64_t *)v44;
          if (!v43) {
            return *v14;
          }
          continue;
        }
      }
    }
    BOOL v34 = 0;
LABEL_37:
    int v28 = sub_1CC2DD9E4(v8, (uint64_t)v23, v23, v34);
    uint64_t *v28 = *v23;
    *(_OWORD *)(v28 + 5) = 0u;
    *(_OWORD *)(v28 + 3) = 0u;
    *(_OWORD *)(v28 + 1) = 0u;
    *(_OWORD *)(v28 + 7) = 0u;
    v28[5] = (uint64_t)(v28 + 7);
    *((_DWORD *)v28 + 13) = 2;
    goto LABEL_23;
  }
  uint64_t v14 = v12 + 3;
  return *v14;
}

uint64_t *sub_1CC2DEE88(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    int v10 = *(uint64_t **)a1;
    unint64_t v11 = (2 * v7 - 1) | ((unint64_t)(2 * v7 - 1) >> 1);
    unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 64;
    }
    *(_DWORD *)(a1 + 16) = v14;
    uint64_t v15 = (uint64_t *)operator new(16 * v14, (std::align_val_t)8uLL);
    *(void *)a1 = v15;
    if (v10)
    {
      sub_1CC2DF118((uint64_t *)a1, v10, &v10[2 * v7]);
      MEMORY[0x1D25D9CD0](v10, 8);
      LODWORD(v17) = *(_DWORD *)(a1 + 16);
      uint64_t v15 = *(uint64_t **)a1;
    }
    else
    {
      uint64_t v16 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v17 = *(unsigned int *)(a1 + 16);
      do
      {
        v15[v16] = -4096;
        v16 += 2;
      }
      while (2 * v17 != v16);
    }
    uint64_t v8 = *a3;
    int v18 = v17 - 1;
    unsigned int v19 = ((*a3 >> 4) ^ (*a3 >> 9)) & v18;
    a4 = &v15[2 * v19];
    uint64_t v20 = *a4;
    if (*a3 == *a4) {
      goto LABEL_5;
    }
    BOOL v21 = 0;
    int v22 = 1;
    while (v20 != -4096)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v20 == -8192;
      }
      if (v23) {
        BOOL v21 = a4;
      }
      unsigned int v24 = v19 + v22++;
      unsigned int v19 = v24 & v18;
      a4 = &v15[2 * v19];
      uint64_t v20 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v21) {
      a4 = v21;
    }
  }
  else if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CC2DF04C(a1, *(_DWORD *)(a1 + 16));
    uint64_t v25 = 0;
    sub_1CBA0E618(a1, a3, &v25);
    a4 = v25;
  }
  uint64_t v8 = *a4;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC2DF04C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC2DF118((uint64_t *)a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1CC2DF118(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = result;
  result[1] = 0;
  uint64_t v6 = *((unsigned int *)result + 4);
  if (v6)
  {
    int v7 = (void *)*result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v10 = *((_DWORD *)v5 + 4) - 1;
        unsigned int v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
        unint64_t v12 = (void *)(*v5 + 16 * v11);
        uint64_t v13 = *v12;
        if (v9 != *v12)
        {
          unsigned int v14 = 0;
          int v15 = 1;
          while (v13 != -4096)
          {
            if (v14) {
              BOOL v16 = 0;
            }
            else {
              BOOL v16 = v13 == -8192;
            }
            if (v16) {
              unsigned int v14 = v12;
            }
            unsigned int v17 = v11 + v15++;
            unsigned int v11 = v17 & v10;
            unint64_t v12 = (void *)(*v5 + 16 * (v17 & v10));
            uint64_t v13 = *v12;
            if (v9 == *v12) {
              goto LABEL_18;
            }
          }
          if (v14) {
            unint64_t v12 = v14;
          }
        }
LABEL_18:
        *unint64_t v12 = v9;
        uint64_t v18 = v4[1];
        v4[1] = 0;
        v12[1] = v18;
        ++*((_DWORD *)v5 + 2);
        BOOL result = sub_1CB9313C0(v4 + 1);
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1CC2DF224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a3 + 40);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a3 + 24);
  LODWORD(v7) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
  uint64_t v9 = *v8;
  if (*v8 != a2)
  {
    int v10 = 1;
    do
    {
      if (v9 == -4096) {
        goto LABEL_9;
      }
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(void *)(v6 + 16 * v7);
    }
    while (v9 != a2);
    uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
  }
  if (v8 == (uint64_t *)(v6 + 16 * v5) || (uint64_t result = v8[1]) == 0)
  {
LABEL_9:
    uint64_t v13 = sub_1CC2DD8D0((uint64_t *)(a1 + 24), a2);
    if ((uint64_t *)(*(void *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40)) == v13) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v13[4];
    }
    sub_1CC2DF224(a1, v14, a3);
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createChild();
  }
  return result;
}

void llvm::LexicalScopes::reset(llvm::LexicalScopes *this)
{
  *(void *)this = 0;
  *((void *)this + 22) = 0;
  if (*((void *)this + 4))
  {
    uint64_t v3 = (void *)((char *)this + 8);
    sub_1CC2E0FD8(this + 8, *((void **)this + 3));
    *((void *)this + 3) = 0;
    uint64_t v4 = *((void *)this + 2);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*v3 + 8 * i) = 0;
    }
    *((void *)this + 4) = 0;
  }
  if (*((void *)this + 14))
  {
    sub_1CC2E0FD8(this + 88, *((void **)this + 13));
    *((void *)this + 13) = 0;
    uint64_t v6 = *((void *)this + 12);
    if (v6)
    {
      for (uint64_t j = 0; j != v6; ++j)
        *(void *)(*((void *)this + 11) + 8 * j) = 0;
    }
    *((void *)this + 14) = 0;
  }
  if (*((void *)this + 9))
  {
    sub_1CC2E1048(this + 48, *((void **)this + 8));
    *((void *)this + 8) = 0;
    uint64_t v8 = *((void *)this + 7);
    if (v8)
    {
      for (uint64_t k = 0; k != v8; ++k)
        *(void *)(*((void *)this + 6) + 8 * k) = 0;
    }
    *((void *)this + 9) = 0;
  }
  *((_DWORD *)this + 34) = 0;
  int v2 = *((_DWORD *)this + 48);
  if (v2 || *((_DWORD *)this + 49))
  {
    int v10 = (void ***)((char *)this + 184);
    uint64_t v11 = *((unsigned int *)this + 50);
    if (v11 > 4 * v2 && v11 >= 0x41)
    {
      sub_1CD518834(v10);
    }
    else
    {
      if (v11)
      {
        unint64_t v12 = (void ***)(*v10 + 1);
        uint64_t v13 = 16 * v11;
        do
        {
          uint64_t v14 = (uint64_t)*(v12 - 1);
          if (v14 != -4096)
          {
            if (v14 != -8192) {
              sub_1CC2E18C8(v12, 0);
            }
            *(v12 - 1) = (void **)-4096;
          }
          v12 += 2;
          v13 -= 16;
        }
        while (v13);
      }
      *((void *)this + 24) = 0;
    }
  }
}

void llvm::LexicalScopes::initialize(llvm::LexicalScopes *this, uint64_t ****a2)
{
  v28[8] = *MEMORY[0x1E4F143B8];
  llvm::LexicalScopes::reset(this);
  uint64_t v4 = *a2;
  uint64_t v5 = ****a2;
  v27[0] = *a2;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 2480);
    int v8 = v6 - 1;
    unsigned int v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
    int v10 = (uint64_t ****)(v7 + 40 * v9);
    uint64_t v11 = *v10;
    if (*v10 == v4) {
      goto LABEL_3;
    }
    unsigned int v19 = 0;
    int v20 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v11 == (uint64_t ***)-8192;
      }
      if (v21) {
        unsigned int v19 = v10;
      }
      unsigned int v22 = v9 + v20++;
      unsigned int v9 = v22 & v8;
      int v10 = (uint64_t ****)(v7 + 40 * v9);
      uint64_t v11 = *v10;
      if (*v10 == v4) {
        goto LABEL_3;
      }
    }
    if (v19) {
      BOOL v23 = v19;
    }
    else {
      BOOL v23 = v10;
    }
  }
  else
  {
    BOOL v23 = 0;
  }
  int v10 = (uint64_t ****)sub_1CC609054(v5 + 2480, (uint64_t)v27, (uint64_t *)v27, v23);
  unsigned int v24 = (uint64_t ***)v27[0];
  v10[3] = 0;
  v10[4] = 0;
  uint64_t *v10 = v24;
  v10[1] = (uint64_t ***)(v10 + 3);
  v10[2] = (uint64_t ***)0x100000000;
LABEL_3:
  unint64_t v12 = v10[1];
  if (*(_DWORD *)v12)
  {
    uint64_t v13 = 16 * *((unsigned int *)v10 + 4) - 16;
    do
    {
      int v14 = *((_DWORD *)v12 + 4);
      v12 += 2;
      v13 -= 16;
    }
    while (v14);
  }
  if (*((_DWORD *)v12[1][-*((unsigned int *)v12[1] + 2) + 5] + 9))
  {
    *(void *)this = a2;
    v27[0] = v28;
    v27[1] = (void *)0x400000000;
    v25[0] = 0;
    v25[1] = 0;
    int v26 = 0;
    LexicalScopes = llvm::LexicalScopes::extractLexicalScopes((uint64_t *)this, (uint64_t)v27, (uint64_t)v25);
    uint64_t v17 = *((void *)this + 22);
    if (v17)
    {
      llvm::LexicalScopes::constructScopeNest((uint64_t)LexicalScopes, v17);
      int8x16_t v16 = llvm::LexicalScopes::assignInstructionRanges(v18, (uint64_t)v27, v25);
    }
    MEMORY[0x1D25D9CD0](v25[0], 8, (__n128)v16);
    if (v27[0] != v28) {
      free(v27[0]);
    }
  }
}

uint64_t *llvm::LexicalScopes::extractLexicalScopes(uint64_t *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*this + 328);
  uint64_t v52 = *this + 320;
  if (v3 == v52) {
    return this;
  }
  int v6 = (int8x8_t *)this;
  do
  {
    uint64_t v54 = 0;
    uint64_t v7 = v3 + 48;
    uint64_t v8 = *(void *)(v3 + 56);
    if (v8 == v3 + 48) {
      goto LABEL_68;
    }
    uint64_t v53 = v3;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      if ((*(unsigned char *)(*(void *)(v8 + 16) + 8) & 0x10) != 0)
      {
        uint64_t v13 = v11;
LABEL_40:
        if ((*(unsigned char *)v8 & 4) != 0) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      uint64_t v13 = *(void **)(v8 + 56);
      if (v13) {
        BOOL v14 = v13 == v11;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
        uint64_t v13 = v11;
LABEL_39:
        uint64_t v12 = v8;
        goto LABEL_40;
      }
      if (!v10)
      {
        uint64_t v54 = v8;
LABEL_38:
        uint64_t v9 = v8;
        uint64_t v10 = v8;
        goto LABEL_39;
      }
      if (v11)
      {
        uint64_t v15 = *((unsigned int *)v11 + 2);
        for (uint64_t i = &v11[-v15]; ; uint64_t i = (unint64_t *)&v18[-2 * v15])
        {
          uint64_t v17 = (const llvm::DILocalScope *)*i;
          if (v15 != 2) {
            break;
          }
          uint64_t v18 = (unsigned int *)i[1];
          if (!v18) {
            break;
          }
          unint64_t v19 = *i;
          if ((*(unsigned char *)v17 & 0xFE) == 0x12)
          {
            unint64_t v19 = (unint64_t)v17;
            do
              unint64_t v19 = *(void *)(v19 - 8 * *(unsigned int *)(v19 + 8) + 8);
            while ((*(unsigned char *)v19 & 0xFE) == 0x12);
          }
          if (*(_DWORD *)(*(void *)(v19 - 8 * *(unsigned int *)(v19 + 8) + 40) + 36))
          {
            llvm::LexicalScopes::getOrCreateAbstractScope(v6, (unint64_t)v17);
            InlinedScope = llvm::LexicalScopes::getOrCreateInlinedScope(v6, v17, (const llvm::DILocation *)v18);
            goto LABEL_20;
          }
          uint64_t v15 = v18[2];
        }
        InlinedScope = llvm::LexicalScopes::getOrCreateRegularScope(v6, *i);
LABEL_20:
        uint64_t v11 = InlinedScope;
      }
      int v21 = *(_DWORD *)(a3 + 16);
      if (v21)
      {
        int v22 = v21 - 1;
        unsigned int v23 = v22 & ((v10 >> 4) ^ (v10 >> 9));
        this = (uint64_t *)(*(void *)a3 + 16 * v23);
        uint64_t v24 = *this;
        if (v10 == *this) {
          goto LABEL_36;
        }
        uint64_t v25 = 0;
        int v26 = 1;
        while (v24 != -4096)
        {
          if (v25) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v24 == -8192;
          }
          if (v27) {
            uint64_t v25 = this;
          }
          unsigned int v28 = v23 + v26++;
          unsigned int v23 = v28 & v22;
          this = (uint64_t *)(*(void *)a3 + 16 * v23);
          uint64_t v24 = *this;
          if (v10 == *this) {
            goto LABEL_36;
          }
        }
        if (v25) {
          uint64_t v29 = v25;
        }
        else {
          uint64_t v29 = this;
        }
      }
      else
      {
        uint64_t v29 = 0;
      }
      this = sub_1CC2E10B8(a3, &v54, v29);
      *this = v10;
      this[1] = 0;
LABEL_36:
      this[1] = (uint64_t)v11;
      unint64_t v30 = *(unsigned int *)(a2 + 8);
      if (v30 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v31 = (uint64_t *)(*(void *)a2 + 16 * v30);
      *int v31 = v10;
      v31[1] = v12;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v54 = v8;
      if (v8) {
        goto LABEL_38;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v12 = 0;
LABEL_41:
      while ((*(_WORD *)(v8 + 44) & 8) != 0)
        uint64_t v8 = *(void *)(v8 + 8);
LABEL_42:
      uint64_t v11 = v13;
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != v7);
    uint64_t v3 = v53;
    if (v9 && v12 && v11)
    {
      unint64_t v32 = *(unsigned int *)(a2 + 8);
      if (v32 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v33 = (uint64_t *)(*(void *)a2 + 16 * v32);
      *unsigned int v33 = v9;
      v33[1] = v12;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v34 = *((unsigned int *)v11 + 2);
      unsigned int v35 = (const llvm::DILocalScope **)&v11[-v34];
      int v36 = *v35;
      if (v34 == 2)
      {
        unsigned int v48 = (unsigned int *)v35[1];
        if (v48)
        {
          while (1)
          {
            uint64_t v49 = v36;
            if ((*(unsigned char *)v36 & 0xFE) == 0x12)
            {
              uint64_t v49 = v36;
              do
                uint64_t v49 = (const llvm::DILocalScope *)((void *)v49 - *((unsigned int *)v49 + 2))[1];
              while ((*(unsigned char *)v49 & 0xFE) == 0x12);
            }
            if (*(_DWORD *)(((void *)v49 - *((unsigned int *)v49 + 2))[5] + 36))
            {
              llvm::LexicalScopes::getOrCreateAbstractScope(v6, (unint64_t)v36);
              RegularScope = llvm::LexicalScopes::getOrCreateInlinedScope(v6, v36, (const llvm::DILocation *)v48);
              goto LABEL_52;
            }
            uint64_t v50 = v48[2];
            uint64_t v51 = &v48[-2 * v50];
            int v36 = *(const llvm::DILocalScope **)v51;
            if (v50 != 2) {
              break;
            }
            unsigned int v48 = (unsigned int *)*((void *)v51 + 1);
            uint64_t v3 = v53;
            if (!v48) {
              goto LABEL_51;
            }
          }
          uint64_t v3 = v53;
        }
      }
LABEL_51:
      RegularScope = llvm::LexicalScopes::getOrCreateRegularScope(v6, (unint64_t)v36);
LABEL_52:
      int v38 = RegularScope;
      int v39 = *(_DWORD *)(a3 + 16);
      if (!v39)
      {
        int v47 = 0;
        goto LABEL_66;
      }
      int v40 = v39 - 1;
      unsigned int v41 = v40 & ((v9 >> 4) ^ (v9 >> 9));
      this = (uint64_t *)(*(void *)a3 + 16 * v41);
      uint64_t v42 = *this;
      if (v9 != *this)
      {
        unsigned int v43 = 0;
        int v44 = 1;
        while (v42 != -4096)
        {
          if (v43) {
            BOOL v45 = 0;
          }
          else {
            BOOL v45 = v42 == -8192;
          }
          if (v45) {
            unsigned int v43 = this;
          }
          unsigned int v46 = v41 + v44++;
          unsigned int v41 = v46 & v40;
          this = (uint64_t *)(*(void *)a3 + 16 * v41);
          uint64_t v42 = *this;
          if (v9 == *this) {
            goto LABEL_67;
          }
        }
        if (v43) {
          int v47 = v43;
        }
        else {
          int v47 = this;
        }
LABEL_66:
        this = sub_1CC2E10B8(a3, &v54, v47);
        *this = v9;
        this[1] = 0;
      }
LABEL_67:
      this[1] = (uint64_t)v38;
    }
LABEL_68:
    uint64_t v3 = *(void *)(v3 + 8);
  }
  while (v3 != v52);
  return this;
}

void llvm::LexicalScopes::constructScopeNest(uint64_t a1, uint64_t a2)
{
  int v2 = 0;
  v13[8] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  v13[0] = a2;
  v13[1] = 0;
  uint64_t v12 = 0x400000001;
  unsigned int v3 = 1;
  do
  {
    uint64_t v4 = (char *)v11;
    uint64_t v5 = v3;
    int v6 = (char *)v11 + 16 * v3;
    uint64_t v7 = *((void *)v6 - 2);
    unint64_t v8 = *((void *)v6 - 1);
    *((void *)v6 - 1) = v8 + 1;
    if (v8 < *(unsigned int *)(v7 + 40))
    {
      uint64_t v9 = *(void *)(v7 + 32);
      if (v5 >= HIDWORD(v12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v10 = &v4[16 * v5];
      *(void *)uint64_t v10 = *(void *)(v9 + 8 * v8);
      *((void *)v10 + 1) = 0;
      unsigned int v3 = v12 + 1;
      LODWORD(v12) = v12 + 1;
      *(_DWORD *)(*(void *)(v9 + 8 * v8) + 176) = ++v2;
    }
    else
    {
      unsigned int v3 = v5 - 1;
      LODWORD(v12) = v5 - 1;
      *(_DWORD *)(v7 + 180) = ++v2;
    }
  }
  while (v3);
  if (v11 != v13) {
    free(v11);
  }
}

int8x16_t llvm::LexicalScopes::assignInstructionRanges(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(uint64_t **)a2;
  uint64_t v6 = *(void *)a2 + 16 * v3;
  do
  {
    uint64_t v7 = *v5;
    int v8 = *((_DWORD *)a3 + 4);
    if (!v8) {
      goto LABEL_10;
    }
    uint64_t v9 = *a3;
    unsigned int v10 = v8 - 1;
    uint64_t v11 = ((v7 >> 4) ^ (v7 >> 9)) & (v8 - 1);
    uint64_t v12 = *(void *)(*a3 + 16 * v11);
    if (v7 != v12)
    {
      int v13 = 1;
      while (v12 != -4096)
      {
        int v14 = v11 + v13++;
        uint64_t v11 = v14 & v10;
        uint64_t v12 = *(void *)(v9 + 16 * v11);
        if (v7 == v12) {
          goto LABEL_8;
        }
      }
LABEL_10:
      uint64_t v15 = 0;
      if (!v4) {
        goto LABEL_20;
      }
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v15 = *(int8x16_t **)(v9 + 16 * v11 + 8);
    if (!v4) {
      goto LABEL_20;
    }
LABEL_11:
    if (v15 != v4
      && (v4[11].i32[0] >= (unsigned __int32)v15[11].i32[0] || v4[11].i32[1] <= (unsigned __int32)v15[11].i32[1]))
    {
      do
      {
        unint64_t v16 = v4[5].u32[2];
        if (v16 >= v4[5].u32[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int8x16_t result = vextq_s8(v4[10], v4[10], 8uLL);
        *(int8x16_t *)(v4[5].i64[0] + 16 * v16) = result;
        ++v4[5].i32[2];
        v4[10].i64[0] = 0;
        v4[10].i64[1] = 0;
        uint64_t v4 = (int8x16_t *)v4->i64[0];
      }
      while (v4
           && v4 != v15
           && (v4[11].i32[0] >= (unsigned __int32)v15[11].i32[0] || v4[11].i32[1] <= (unsigned __int32)v15[11].i32[1]));
      uint64_t v7 = *v5;
    }
LABEL_20:
    uint64_t v18 = (uint64_t *)v15;
    do
    {
      if (!v18[21]) {
        v18[21] = v7;
      }
      uint64_t v18 = (uint64_t *)*v18;
    }
    while (v18);
    uint64_t v19 = v5[1];
    int v20 = (uint64_t *)v15;
    do
    {
      v20[20] = v19;
      int v20 = (uint64_t *)*v20;
    }
    while (v20);
    v5 += 2;
    uint64_t v4 = v15;
  }
  while (v5 != (uint64_t *)v6);
  for (; v15; uint64_t v15 = (int8x16_t *)v15->i64[0])
  {
    unint64_t v21 = v15[5].u32[2];
    if (v21 >= v15[5].u32[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int8x16_t result = vextq_s8(v15[10], v15[10], 8uLL);
    *(int8x16_t *)(v15[5].i64[0] + 16 * v21) = result;
    ++v15[5].i32[2];
    v15[10].i64[0] = 0;
    v15[10].i64[1] = 0;
  }
  return result;
}

void *llvm::LexicalScopes::findLexicalScope(int8x8_t *this, const llvm::DILocation *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 2);
  unint64_t v3 = *((void *)a2 - v2);
  if (!v3) {
    return 0;
  }
  while (*(unsigned char *)v3 == 19)
    unint64_t v3 = *(void *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 8);
  if (v2 != 2 || (unint64_t v4 = *((void *)a2 - 1)) == 0)
  {
    unint64_t v21 = v3;
    int v20 = sub_1CC2E0EE8(&this[1], &v21);
    uint64_t v18 = v20 + 3;
    BOOL v19 = v20 == 0;
    goto LABEL_26;
  }
  int8x8_t v5 = this[7];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v3) + 8) ^ HIDWORD(v3));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v3) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x1E1D57147BCD7FB7 * (v7 ^ (v7 >> 47)) - 0x622015F714C7D297 * (v9 ^ (v9 >> 47));
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v5);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] <= 1uLL) {
    uint64_t v12 = (*(void *)&v5 - 1) & v10;
  }
  else {
    uint64_t v12 = v10 < *(void *)&v5 ? v10 : v10 % *(void *)&v5;
  }
  int v13 = *(void **)(*(void *)&this[6] + 8 * v12);
  if (!v13) {
    return 0;
  }
  int v14 = (void *)*v13;
  if (!v14) {
    return 0;
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 != v10) {
      break;
    }
    if (v14[2] == v3 && v14[3] == v4) {
      goto LABEL_25;
    }
LABEL_21:
    int v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_25;
    }
  }
  if (v11.u32[0] <= 1uLL)
  {
    v15 &= *(void *)&v5 - 1;
  }
  else if (v15 >= *(void *)&v5)
  {
    v15 %= *(void *)&v5;
  }
  if (v15 == v12) {
    goto LABEL_21;
  }
  int v14 = 0;
LABEL_25:
  uint64_t v18 = v14 + 4;
  BOOL v19 = v14 == 0;
LABEL_26:
  if (v19) {
    return 0;
  }
  else {
    return v18;
  }
}

void *llvm::LexicalScopes::getOrCreateLexicalScope(int8x8_t *this, const llvm::DILocalScope *a2, const llvm::DILocation *a3)
{
  if (a3)
  {
    unint64_t v6 = (unsigned int *)a3;
    while (1)
    {
      unint64_t v7 = a2;
      if ((*(unsigned char *)a2 & 0xFE) == 0x12)
      {
        unint64_t v7 = a2;
        do
          unint64_t v7 = (const llvm::DILocalScope *)((void *)v7 - *((unsigned int *)v7 + 2))[1];
        while ((*(unsigned char *)v7 & 0xFE) == 0x12);
      }
      if (*(_DWORD *)(((void *)v7 - *((unsigned int *)v7 + 2))[5] + 36)) {
        break;
      }
      uint64_t v8 = v6[2];
      unint64_t v9 = &v6[-2 * v8];
      a2 = *(const llvm::DILocalScope **)v9;
      if (v8 == 2)
      {
        unint64_t v6 = (unsigned int *)*((void *)v9 + 1);
        if (v6) {
          continue;
        }
      }
      goto LABEL_2;
    }
    llvm::LexicalScopes::getOrCreateAbstractScope(this, (unint64_t)a2);
    return llvm::LexicalScopes::getOrCreateInlinedScope(this, a2, (const llvm::DILocation *)v6);
  }
  else
  {
LABEL_2:
    return llvm::LexicalScopes::getOrCreateRegularScope(this, (unint64_t)a2);
  }
}

void *llvm::LexicalScopes::getOrCreateAbstractScope(int8x8_t *this, unint64_t a2)
{
  while (1)
  {
    int v3 = *(unsigned __int8 *)a2;
    if (v3 != 19) {
      break;
    }
    a2 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  }
  unint64_t v21 = (unsigned char *)a2;
  unint64_t v4 = (float *)&this[11];
  int8x8_t v5 = this[12];
  if (v5)
  {
    unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v5);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL) {
      uint64_t v10 = v8 < *(void *)&v5 ? v8 : v8 % *(void *)&v5;
    }
    else {
      uint64_t v10 = v8 & (*(void *)&v5 - 1);
    }
    uint8x8_t v11 = *(void **)(*(void *)v4 + 8 * v10);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12 + 3;
            }
          }
          else
          {
            if (v9.u32[0] <= 1uLL)
            {
              v13 &= *(void *)&v5 - 1;
            }
            else if (v13 >= *(void *)&v5)
            {
              v13 %= *(void *)&v5;
            }
            if (v13 != v10) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v20 = 0;
  if ((v3 & 0xFE) == 0x12)
  {
    uint64_t AbstractScope = llvm::LexicalScopes::getOrCreateAbstractScope((llvm::LexicalScopes *)this, *(const llvm::DILocalScope **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
    unint64_t v4 = (float *)&this[11];
    uint64_t v20 = AbstractScope;
  }
  char v17 = 1;
  uint64_t v18 = 0;
  v19[0] = &v20;
  v19[1] = &v21;
  v19[2] = &v18;
  v19[3] = &v17;
  uint64_t v12 = sub_1CC2E1378(v4, &v21, (uint64_t)v19);
  if (*v21 == 17)
  {
    unsigned __int32 v15 = this[17].u32[0];
    if (v15 >= this[17].i32[1]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)&this[16] + 8 * v15) = v12 + 3;
    ++this[17].i32[0];
  }
  return v12 + 3;
}

void *llvm::LexicalScopes::getOrCreateInlinedScope(int8x8_t *this, const llvm::DILocalScope *a2, const llvm::DILocation *a3)
{
  int v3 = a3;
  unint64_t v4 = (unint64_t)a2;
  int8x8_t v5 = this;
  for (int i = *(unsigned __int8 *)a2; i == 19; int i = *(unsigned __int8 *)v4)
    unint64_t v4 = *(void *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8);
  int8x8_t v7 = this[7];
  if (v7)
  {
    unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
    unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v8 >> 47) ^ v8);
    unint64_t v10 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ ((unint64_t)a3 >> 32));
    unint64_t v11 = 0x9DDFEA08EB382D69 * (((unint64_t)a3 >> 32) ^ (v10 >> 47) ^ v10);
    unint64_t v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47)) + 0x1E1D57147BCD7FB7 * (v9 ^ (v9 >> 47));
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v7);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] <= 1uLL) {
      uint64_t v14 = v12 & (*(void *)&v7 - 1);
    }
    else {
      uint64_t v14 = v12 < *(void *)&v7 ? v12 : v12 % *(void *)&v7;
    }
    unsigned __int32 v15 = *(void ***)(*(void *)&this[6] + 8 * v14);
    if (v15)
    {
      for (uint64_t j = *v15; j; uint64_t j = (void *)*j)
      {
        unint64_t v17 = j[1];
        if (v17 == v12)
        {
          if (j[2] == v4 && j[3] == (void)a3) {
            return j + 4;
          }
        }
        else
        {
          if (v13.u32[0] <= 1uLL)
          {
            v17 &= *(void *)&v7 - 1;
          }
          else if (v17 >= *(void *)&v7)
          {
            v17 %= *(void *)&v7;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  if ((i & 0xFE) == 0x12)
  {
    uint64_t v24 = *(const llvm::DILocalScope **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8);
LABEL_28:
    InlinedScope = (void *)llvm::LexicalScopes::getOrCreateInlinedScope((llvm::LexicalScopes *)this, v24, a3);
  }
  else
  {
    if (!a3)
    {
      uint64_t v26 = 0;
      goto LABEL_31;
    }
    uint64_t v19 = *((unsigned int *)a3 + 2);
    for (uint64_t k = (unint64_t *)((char *)a3 - 8 * v19); ; uint64_t k = (unint64_t *)&v22[-2 * v19])
    {
      unint64_t v21 = (const llvm::DILocalScope *)*k;
      if (v19 != 2) {
        break;
      }
      int v22 = (unsigned int *)k[1];
      if (!v22) {
        break;
      }
      unsigned int v23 = (const llvm::DILocalScope *)*k;
      if ((*(unsigned char *)v21 & 0xFE) == 0x12)
      {
        unsigned int v23 = v21;
        do
          unsigned int v23 = (const llvm::DILocalScope *)((void *)v23 - *((unsigned int *)v23 + 2))[1];
        while ((*(unsigned char *)v23 & 0xFE) == 0x12);
      }
      if (*(_DWORD *)(((void *)v23 - *((unsigned int *)v23 + 2))[5] + 36))
      {
        llvm::LexicalScopes::getOrCreateAbstractScope(this, (unint64_t)v21);
        this = v5;
        uint64_t v24 = v21;
        a3 = (const llvm::DILocation *)v22;
        goto LABEL_28;
      }
      uint64_t v19 = v22[2];
    }
    InlinedScope = llvm::LexicalScopes::getOrCreateRegularScope(this, *k);
  }
  uint64_t v26 = (uint64_t)InlinedScope;
LABEL_31:
  uint64_t j = operator new(0xD8uLL);
  *uint64_t j = 0;
  j[1] = 0;
  j[2] = v4;
  j[3] = v3;
  sub_1CC2E17C8((uint64_t)(j + 4), v26, v4, (uint64_t)v3, 0);
  unint64_t v27 = j[2];
  unint64_t v28 = j[3];
  unint64_t v29 = 0x9DDFEA08EB382D69 * (((8 * v27) + 8) ^ HIDWORD(v27));
  unint64_t v30 = 0x9DDFEA08EB382D69 * (HIDWORD(v27) ^ (v29 >> 47) ^ v29);
  unint64_t v31 = 0x9DDFEA08EB382D69 * (((8 * v28) + 8) ^ HIDWORD(v28));
  unint64_t v32 = 0x9DDFEA08EB382D69 * (HIDWORD(v28) ^ (v31 >> 47) ^ v31);
  unint64_t v33 = 0x1E1D57147BCD7FB7 * (v30 ^ (v30 >> 47)) - 0x622015F714C7D297 * (v32 ^ (v32 >> 47));
  j[1] = v33;
  unint64_t v34 = (unint64_t)v5[7];
  if (!v34) {
    goto LABEL_50;
  }
  uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
  v35.i16[0] = vaddlv_u8(v35);
  if (v35.u32[0] > 1uLL)
  {
    unint64_t v36 = v33;
    if (v34 <= v33) {
      unint64_t v36 = v33 % v34;
    }
  }
  else
  {
    unint64_t v36 = v33 & (v34 - 1);
  }
  uint64_t v37 = *(void **)(*(void *)&v5[6] + 8 * v36);
  if (!v37 || (int v38 = (void *)*v37) == 0)
  {
LABEL_50:
    float v41 = (float)(unint64_t)(*(void *)&v5[9] + 1);
    float v42 = *(float *)v5[10].i32;
    if (v34 && (float)(v42 * (float)v34) >= v41) {
      goto LABEL_52;
    }
    BOOL v48 = 1;
    if (v34 >= 3) {
      BOOL v48 = (v34 & (v34 - 1)) != 0;
    }
    unint64_t v49 = v48 | (2 * v34);
    unint64_t v50 = vcvtps_u32_f32(v41 / v42);
    if (v49 <= v50) {
      int8x8_t prime = (int8x8_t)v50;
    }
    else {
      int8x8_t prime = (int8x8_t)v49;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v34 = (unint64_t)v5[7];
    }
    if (*(void *)&prime <= v34)
    {
      if (*(void *)&prime >= v34) {
        goto LABEL_52;
      }
      unint64_t v62 = vcvtps_u32_f32((float)(unint64_t)v5[9] / *(float *)v5[10].i32);
      if (v34 < 3 || (uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)v34), v63.i16[0] = vaddlv_u8(v63), v63.u32[0] > 1uLL))
      {
        unint64_t v62 = std::__next_prime(v62);
      }
      else
      {
        uint64_t v64 = 1 << -(char)__clz(v62 - 1);
        if (v62 >= 2) {
          unint64_t v62 = v64;
        }
      }
      if (*(void *)&prime <= v62) {
        int8x8_t prime = (int8x8_t)v62;
      }
      if (*(void *)&prime >= v34)
      {
        unint64_t v34 = (unint64_t)v5[7];
        goto LABEL_52;
      }
      if (!*(void *)&prime)
      {
        unint64_t v67 = (void *)v5[6];
        v5[6] = 0;
        if (v67) {
          operator delete(v67);
        }
        unint64_t v34 = 0;
        v5[7] = 0;
LABEL_52:
        unint64_t v43 = j[1];
        uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] > 1uLL)
        {
          if (v43 >= v34) {
            v43 %= v34;
          }
        }
        else
        {
          v43 &= v34 - 1;
        }
        int8x8_t v45 = v5[6];
        unsigned int v46 = *(void **)(*(void *)&v45 + 8 * v43);
        if (v46)
        {
          *uint64_t j = *v46;
        }
        else
        {
          *uint64_t j = v5[8];
          v5[8] = (int8x8_t)j;
          *(void *)(*(void *)&v45 + 8 * v43) = v5 + 8;
          if (!*j) {
            goto LABEL_57;
          }
          unint64_t v61 = *(void *)(*j + 8);
          if (v44.u32[0] > 1uLL)
          {
            if (v61 >= v34) {
              v61 %= v34;
            }
          }
          else
          {
            v61 &= v34 - 1;
          }
          unsigned int v46 = (void *)(*(void *)&v5[6] + 8 * v61);
        }
        *unsigned int v46 = j;
LABEL_57:
        ++*(void *)&v5[9];
        return j + 4;
      }
    }
    if (*(void *)&prime >> 61) {
      sub_1CB833614();
    }
    uint64_t v52 = operator new(8 * *(void *)&prime);
    uint64_t v53 = (void *)v5[6];
    v5[6] = (int8x8_t)v52;
    if (v53) {
      operator delete(v53);
    }
    uint64_t v54 = 0;
    v5[7] = prime;
    do
      *(void *)(*(void *)&v5[6] + 8 * v54++) = 0;
    while (*(void *)&prime != v54);
    uint64_t v55 = (void *)v5[8];
    if (!v55) {
      goto LABEL_95;
    }
    unint64_t v56 = v55[1];
    uint8x8_t v57 = (uint8x8_t)vcnt_s8(prime);
    v57.i16[0] = vaddlv_u8(v57);
    if (v57.u32[0] <= 1uLL)
    {
      v56 &= *(void *)&prime - 1;
    }
    else if (v56 >= *(void *)&prime)
    {
      v56 %= *(void *)&prime;
    }
    *(void *)(*(void *)&v5[6] + 8 * v56) = v5 + 8;
    BOOL v58 = (void *)*v55;
    if (!*v55)
    {
LABEL_95:
      unint64_t v34 = (unint64_t)prime;
      goto LABEL_52;
    }
    while (1)
    {
      unint64_t v59 = v58[1];
      if (v57.u32[0] <= 1uLL)
      {
        v59 &= *(void *)&prime - 1;
      }
      else if (v59 >= *(void *)&prime)
      {
        v59 %= *(void *)&prime;
      }
      if (v59 == v56) {
        goto LABEL_86;
      }
      int8x8_t v60 = v5[6];
      if (*(void *)(*(void *)&v60 + 8 * v59)) {
        break;
      }
      *(void *)(*(void *)&v60 + 8 * v59) = v55;
LABEL_83:
      uint64_t v55 = v58;
      BOOL v58 = (void *)*v58;
      unint64_t v56 = v59;
      if (!v58) {
        goto LABEL_95;
      }
    }
    *uint64_t v55 = *v58;
    *BOOL v58 = **(void **)(*(void *)&v5[6] + 8 * v59);
    **(void **)(*(void *)&v5[6] + 8 * v59) = v58;
    BOOL v58 = v55;
LABEL_86:
    unint64_t v59 = v56;
    goto LABEL_83;
  }
  while (1)
  {
    unint64_t v39 = v38[1];
    if (v39 == v33) {
      break;
    }
    if (v35.u32[0] > 1uLL)
    {
      if (v39 >= v34) {
        v39 %= v34;
      }
    }
    else
    {
      v39 &= v34 - 1;
    }
    if (v39 != v36) {
      goto LABEL_50;
    }
LABEL_46:
    int v38 = (void *)*v38;
    if (!v38) {
      goto LABEL_50;
    }
  }
  if (v38[2] != v27 || v38[3] != v28) {
    goto LABEL_46;
  }
  BOOL v65 = (void *)j[14];
  if (v65 != j + 16) {
    free(v65);
  }
  unint64_t v66 = (void *)j[8];
  if (v66 != j + 10) {
    free(v66);
  }
  operator delete(j);
  uint64_t j = v38;
  return j + 4;
}

void *llvm::LexicalScopes::getOrCreateRegularScope(int8x8_t *this, unint64_t a2)
{
  while (1)
  {
    int v3 = *(unsigned __int8 *)a2;
    if (v3 != 19) {
      break;
    }
    a2 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  }
  unint64_t v20 = a2;
  unint64_t v4 = (float *)&this[1];
  int8x8_t v5 = this[2];
  if (v5)
  {
    unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v5);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL) {
      uint64_t v10 = v8 < *(void *)&v5 ? 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47)) : v8 % *(void *)&v5;
    }
    else {
      uint64_t v10 = v8 & (*(void *)&v5 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)v4 + 8 * v10);
    if (v11)
    {
      while (1)
      {
        unint64_t v11 = (void *)*v11;
        if (!v11) {
          break;
        }
        unint64_t v12 = v11[1];
        if (v12 == v8)
        {
          if (v11[2] == a2) {
            return v11 + 3;
          }
        }
        else
        {
          if (v9.u32[0] <= 1uLL)
          {
            v12 &= *(void *)&v5 - 1;
          }
          else if (v12 >= *(void *)&v5)
          {
            v12 %= *(void *)&v5;
          }
          if (v12 != v10) {
            break;
          }
        }
      }
    }
  }
  uint64_t v19 = 0;
  if ((v3 & 0xFE) == 0x12)
  {
    uint64_t RegularScope = llvm::LexicalScopes::getOrCreateRegularScope((llvm::LexicalScopes *)this, *(const llvm::DILocalScope **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
    unint64_t v4 = (float *)&this[1];
    uint64_t v19 = RegularScope;
  }
  char v16 = 0;
  uint64_t v17 = 0;
  v18[0] = &v19;
  v18[1] = &v20;
  _OWORD v18[2] = &v17;
  v18[3] = &v16;
  uint64_t v14 = sub_1CC2E1378(v4, &v20, (uint64_t)v18);
  unint64_t v11 = v14;
  if (!v19) {
    this[22] = (int8x8_t)(v14 + 3);
  }
  return v11 + 3;
}

void *llvm::LexicalScopes::getMachineBasicBlocks(int8x8_t *a1, uint64_t a2, llvm::SmallPtrSetImplBase *this)
{
  int8x16_t result = sub_1CBFF3560(this);
  if (a2)
  {
    uint64_t v7 = *(unsigned int *)(a2 + 8);
    unint64_t v8 = (const llvm::DILocalScope **)(a2 - 8 * v7);
    if (v7 == 2) {
      uint8x8_t v9 = v8[1];
    }
    else {
      uint8x8_t v9 = 0;
    }
    int8x16_t result = llvm::LexicalScopes::getOrCreateLexicalScope(a1, *v8, v9);
    if (result != *(void **)&a1[22])
    {
      uint64_t v10 = *((unsigned int *)result + 22);
      if (!v10) {
        return result;
      }
      unint64_t v11 = (void *)result[10];
      unint64_t v12 = &v11[2 * v10];
      while (1)
      {
        uint8x8_t v13 = *(void **)(*v11 + 24);
        uint64_t v14 = *(void **)(*(void *)(v11[1] + 24) + 8);
        while (v13 != v14)
        {
          uint64_t v15 = *((void *)this + 1);
          if (v15 != *(void *)this) {
            goto LABEL_20;
          }
          uint64_t v16 = *((unsigned int *)this + 5);
          if (!v16)
          {
LABEL_17:
            if (v16 < *((_DWORD *)this + 4))
            {
              *((_DWORD *)this + 5) = v16 + 1;
              *(void *)(v15 + 8 * v16) = v13;
              goto LABEL_19;
            }
LABEL_20:
            int8x16_t result = llvm::SmallPtrSetImplBase::insert_imp_big(this, v13);
            goto LABEL_19;
          }
          uint64_t v17 = 0;
          uint64_t v18 = 8 * v16;
          uint64_t v19 = (void *)*((void *)this + 1);
          while ((void *)*v19 != v13)
          {
            if (*v19 == -2) {
              uint64_t v17 = v19;
            }
            ++v19;
            v18 -= 8;
            if (!v18)
            {
              if (!v17) {
                goto LABEL_17;
              }
              *uint64_t v17 = v13;
              --*((_DWORD *)this + 6);
              break;
            }
          }
LABEL_19:
          uint8x8_t v13 = (void *)v13[1];
        }
        v11 += 2;
        if (v11 == v12) {
          return result;
        }
      }
    }
    uint64_t v20 = *(void *)a1 + 320;
    for (uint64_t i = *(void *)(*(void *)a1 + 328); i != v20; uint64_t i = *(void *)(i + 8))
      int8x16_t result = sub_1CB89694C(this, i);
  }
  return result;
}

BOOL llvm::LexicalScopes::dominates(int8x8_t *this, const llvm::DILocation *a2, llvm::MachineBasicBlock *a3)
{
  unint64_t v31 = a2;
  if (!a2) {
    return 0;
  }
  uint64_t v6 = *((unsigned int *)a2 + 2);
  for (uint64_t i = (unint64_t *)((char *)a2 - 8 * v6); ; uint64_t i = (unint64_t *)&v9[-2 * v6])
  {
    unint64_t v8 = (const llvm::DILocalScope *)*i;
    if (v6 != 2 || (uint8x8_t v9 = (unsigned int *)i[1]) == 0)
    {
      uint64_t RegularScope = llvm::LexicalScopes::getOrCreateRegularScope(this, *i);
      goto LABEL_14;
    }
    unint64_t v10 = *i;
    if ((*(unsigned char *)v8 & 0xFE) == 0x12)
    {
      unint64_t v10 = (unint64_t)v8;
      do
        unint64_t v10 = *(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8);
      while ((*(unsigned char *)v10 & 0xFE) == 0x12);
    }
    if (*(_DWORD *)(*(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 40) + 36)) {
      break;
    }
    uint64_t v6 = v9[2];
  }
  llvm::LexicalScopes::getOrCreateAbstractScope(this, (unint64_t)v8);
  uint64_t RegularScope = llvm::LexicalScopes::getOrCreateInlinedScope(this, v8, (const llvm::DILocation *)v9);
LABEL_14:
  if (RegularScope == *(void **)&this[22] && *((void *)a3 + 4) == *this) {
    return 1;
  }
  uint64_t v13 = (uint64_t)this[23];
  unint64_t v32 = 0;
  if ((sub_1CC152E2C(v13, this[25].i32[0], (uint64_t)a2, &v32) & 1) == 0)
  {
    uint64_t v15 = sub_1CD518934((uint64_t)&this[23], (uint64_t *)&v31, v32);
    void *v15 = a2;
    v15[1] = 0;
    goto LABEL_20;
  }
  uint64_t v14 = (uint64_t *)v32[1];
  if (!v14) {
LABEL_20:
  }
    operator new();
  uint64_t v17 = *v14;
  uint64_t v16 = v14[1];
  if (v16 == *v14)
  {
    uint64_t v18 = *((unsigned int *)v14 + 5);
    uint64_t v19 = (llvm::MachineBasicBlock **)(v16 + 8 * v18);
    if (v18)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 8 * v18;
      while (*(llvm::MachineBasicBlock **)(v16 + v20) != a3)
      {
        v20 += 8;
        if (v21 == v20) {
          goto LABEL_39;
        }
      }
      uint64_t v19 = (llvm::MachineBasicBlock **)(v16 + v20);
    }
LABEL_39:
    uint64_t v17 = v14[1];
  }
  else
  {
    uint64_t v22 = *((unsigned int *)v14 + 4);
    int v23 = v22 - 1;
    unsigned int v24 = (v22 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v19 = (llvm::MachineBasicBlock **)(v16 + 8 * v24);
    uint64_t v25 = *v19;
    if (*v19 == (llvm::MachineBasicBlock *)-1)
    {
      uint64_t v26 = 0;
LABEL_45:
      if (v26) {
        uint64_t v19 = v26;
      }
      if (*v19 != a3) {
        uint64_t v19 = (llvm::MachineBasicBlock **)(v16 + 8 * v22);
      }
    }
    else
    {
      uint64_t v26 = 0;
      int v27 = 1;
      while (v25 != a3)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == (llvm::MachineBasicBlock *)-2;
        }
        if (v28) {
          uint64_t v26 = v19;
        }
        unsigned int v29 = v24 + v27++;
        unsigned int v24 = v29 & v23;
        uint64_t v19 = (llvm::MachineBasicBlock **)(v16 + 8 * (v29 & v23));
        uint64_t v25 = *v19;
        if (*v19 == (llvm::MachineBasicBlock *)-1) {
          goto LABEL_45;
        }
      }
    }
  }
  BOOL v28 = v16 == v17;
  uint64_t v30 = 16;
  if (v28) {
    uint64_t v30 = 20;
  }
  return v19 != (llvm::MachineBasicBlock **)(v16 + 8 * *(unsigned int *)((char *)v14 + v30));
}

void *sub_1CC2E0EE8(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL) {
    uint64_t v7 = v5 < *(void *)&v2 ? v5 : v5 % *(void *)&v2;
  }
  else {
    uint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  int8x16_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] <= 1uLL)
        {
          v10 &= *(void *)&v2 - 1;
        }
        else if (v10 >= *(void *)&v2)
        {
          v10 %= *(void *)&v2;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      int8x16_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1CC2E0FD8(int a1, void *__p)
{
  if (__p)
  {
    int8x8_t v2 = __p;
    do
    {
      unint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[13];
      if (v4 != v2 + 15) {
        free(v4);
      }
      unint64_t v5 = (void *)v2[7];
      if (v5 != v2 + 9) {
        free(v5);
      }
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

void sub_1CC2E1048(int a1, void *__p)
{
  if (__p)
  {
    int8x8_t v2 = __p;
    do
    {
      unint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[14];
      if (v4 != v2 + 16) {
        free(v4);
      }
      unint64_t v5 = (void *)v2[8];
      if (v5 != v2 + 10) {
        free(v5);
      }
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_1CC2E10B8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CC2E11F0(a1, v6);
      uint64_t v16 = 0;
      sub_1CC0B17CC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    uint64_t v7 = *a3;
    goto LABEL_5;
  }
  sub_1CC2E11F0(a1, 2 * v6);
  uint64_t v7 = *a2;
  int v9 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(void *)a1 + 16 * v10);
  uint64_t v11 = *a3;
  if (*a2 != *a3)
  {
    unint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        unint64_t v12 = a3;
      }
      unsigned int v15 = v10 + v13++;
      unsigned int v10 = v15 & v9;
      a3 = (uint64_t *)(*(void *)a1 + 16 * v10);
      uint64_t v11 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v12) {
      a3 = v12;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC2E11F0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int8x16_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *int8x16_t result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      int v12 = 0;
      int v13 = v10 - 1;
      BOOL v14 = v4;
      do
      {
        uint64_t v15 = *v14;
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v16 = ((v15 >> 4) ^ (v15 >> 9)) & v13;
          uint64_t v17 = (void *)(*(void *)a1 + 16 * v16);
          uint64_t v18 = *v17;
          if (v15 != *v17)
          {
            uint64_t v19 = 0;
            int v20 = 1;
            while (v18 != -4096)
            {
              if (v19) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v18 == -8192;
              }
              if (v21) {
                uint64_t v19 = v17;
              }
              unsigned int v22 = v16 + v20++;
              unsigned int v16 = v22 & v13;
              uint64_t v17 = (void *)(*(void *)a1 + 16 * (v22 & v13));
              uint64_t v18 = *v17;
              if (v15 == *v17) {
                goto LABEL_23;
              }
            }
            if (v19) {
              uint64_t v17 = v19;
            }
          }
LABEL_23:
          *uint64_t v17 = v15;
          v17[1] = v14[1];
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 += 2;
      }
      while (v14 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v23 = *(unsigned int *)(a1 + 16);
  if (v23)
  {
    uint64_t v24 = 16 * v23;
    do
    {
      *int8x16_t result = -4096;
      result += 2;
      v24 -= 16;
    }
    while (v24);
  }
  return result;
}

void *sub_1CC2E1378(float *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = operator new(0xD0uLL);
  void *v6 = 0;
  v6[1] = 0;
  int v7 = *(uint64_t **)a3;
  unsigned int v8 = *(uint64_t **)(a3 + 8);
  int v9 = *(char **)(a3 + 24);
  void v6[2] = *a2;
  sub_1CC2E17C8((uint64_t)(v6 + 3), *v7, *v8, 0, *v9);
  unint64_t v10 = v6[2];
  unint64_t v11 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
  unint64_t v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v10) ^ (v11 >> 47) ^ v11);
  unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
  v6[1] = v13;
  unint64_t v14 = *((void *)a1 + 1);
  if (!v14) {
    goto LABEL_16;
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = v13;
    if (v14 <= v13) {
      unint64_t v16 = v13 % v14;
    }
  }
  else
  {
    unint64_t v16 = v13 & (v14 - 1);
  }
  uint64_t v17 = *(void **)(*(void *)a1 + 8 * v16);
  if (!v17 || (uint64_t v18 = (void *)*v17) == 0)
  {
LABEL_16:
    float v20 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
    float v21 = a1[8];
    if (v14 && (float)(v21 * (float)v14) >= v20) {
      goto LABEL_18;
    }
    BOOL v27 = 1;
    if (v14 >= 3) {
      BOOL v27 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v14);
    unint64_t v29 = vcvtps_u32_f32(v20 / v21);
    if (v28 <= v29) {
      int8x8_t prime = (int8x8_t)v29;
    }
    else {
      int8x8_t prime = (int8x8_t)v28;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v14 = *((void *)a1 + 1);
    }
    if (*(void *)&prime <= v14)
    {
      if (*(void *)&prime >= v14) {
        goto LABEL_18;
      }
      unint64_t v36 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v14 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (*(void *)&prime <= v36) {
        int8x8_t prime = (int8x8_t)v36;
      }
      if (*(void *)&prime >= v14)
      {
        unint64_t v14 = *((void *)a1 + 1);
        goto LABEL_18;
      }
      if (!*(void *)&prime)
      {
        unint64_t v43 = *(void **)a1;
        *(void *)a1 = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v14 = 0;
        *((void *)a1 + 1) = 0;
LABEL_18:
        unint64_t v22 = v6[1];
        uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          if (v22 >= v14) {
            v22 %= v14;
          }
        }
        else
        {
          v22 &= v14 - 1;
        }
        uint64_t v24 = *(void **)a1;
        uint64_t v25 = *(void **)(*(void *)a1 + 8 * v22);
        if (v25)
        {
          void *v6 = *v25;
        }
        else
        {
          void *v6 = *((void *)a1 + 2);
          *((void *)a1 + 2) = v6;
          v24[v22] = a1 + 4;
          if (!*v6) {
            goto LABEL_23;
          }
          unint64_t v35 = *(void *)(*v6 + 8);
          if (v23.u32[0] > 1uLL)
          {
            if (v35 >= v14) {
              v35 %= v14;
            }
          }
          else
          {
            v35 &= v14 - 1;
          }
          uint64_t v25 = (void *)(*(void *)a1 + 8 * v35);
        }
        *uint64_t v25 = v6;
LABEL_23:
        ++*((void *)a1 + 3);
        return v6;
      }
    }
    if (*(void *)&prime >> 61) {
      sub_1CB833614();
    }
    unint64_t v31 = operator new(8 * *(void *)&prime);
    unint64_t v32 = *(void **)a1;
    *(void *)a1 = v31;
    if (v32) {
      operator delete(v32);
    }
    uint64_t v33 = 0;
    *((int8x8_t *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v33++) = 0;
    while (*(void *)&prime != v33);
    unint64_t v34 = (void *)*((void *)a1 + 2);
    if (!v34) {
      goto LABEL_39;
    }
    unint64_t v39 = v34[1];
    uint8x8_t v40 = (uint8x8_t)vcnt_s8(prime);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] <= 1uLL)
    {
      v39 &= *(void *)&prime - 1;
    }
    else if (v39 >= *(void *)&prime)
    {
      v39 %= *(void *)&prime;
    }
    *(void *)(*(void *)a1 + 8 * v39) = a1 + 4;
    float v41 = (void *)*v34;
    if (!*v34)
    {
LABEL_39:
      unint64_t v14 = (unint64_t)prime;
      goto LABEL_18;
    }
    while (1)
    {
      unint64_t v42 = v41[1];
      if (v40.u32[0] <= 1uLL)
      {
        v42 &= *(void *)&prime - 1;
      }
      else if (v42 >= *(void *)&prime)
      {
        v42 %= *(void *)&prime;
      }
      if (v42 == v39) {
        goto LABEL_69;
      }
      if (*(void *)(*(void *)a1 + 8 * v42)) {
        break;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v34;
LABEL_66:
      unint64_t v34 = v41;
      float v41 = (void *)*v41;
      unint64_t v39 = v42;
      if (!v41) {
        goto LABEL_39;
      }
    }
    *unint64_t v34 = *v41;
    void *v41 = **(void **)(*(void *)a1 + 8 * v42);
    **(void **)(*(void *)a1 + 8 * v42) = v41;
    float v41 = v34;
LABEL_69:
    unint64_t v42 = v39;
    goto LABEL_66;
  }
  while (1)
  {
    unint64_t v19 = v18[1];
    if (v19 == v13) {
      break;
    }
    if (v15.u32[0] > 1uLL)
    {
      if (v19 >= v14) {
        v19 %= v14;
      }
    }
    else
    {
      v19 &= v14 - 1;
    }
    if (v19 != v16) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v18 = (void *)*v18;
    if (!v18) {
      goto LABEL_16;
    }
  }
  if (v18[2] != v10) {
    goto LABEL_12;
  }
  sub_1CC2E1864(1, v6);
  return v18;
}

uint64_t sub_1CC2E17C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)int8x16_t result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  *(unsigned char *)(result + 24) = a5;
  *(void *)(result + 32) = result + 48;
  *(void *)(result + 40) = 0x400000000;
  *(void *)(result + 80) = result + 96;
  *(void *)(result + 88) = 0x400000000;
  *(void *)(result + 168) = 0;
  *(void *)(result + 176) = 0;
  *(void *)(result + 160) = 0;
  if (a2)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 40);
    if (v5 >= *(_DWORD *)(a2 + 44)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a2 + 32) + 8 * v5) = result;
    ++*(_DWORD *)(a2 + 40);
  }
  return result;
}

void sub_1CC2E1864(char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (void *)__p[13];
    if (v3 != __p + 15) {
      free(v3);
    }
    unint64_t v4 = (void *)__p[7];
    if (v4 != __p + 9) {
      free(v4);
    }
  }

  operator delete(__p);
}

void ***sub_1CC2E18C8(void ***result, void **a2)
{
  int8x8_t v2 = *result;
  *int8x16_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2[1];
    if (v3 != *v2) {
      free(v3);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void sub_1CC2E1930(uint64_t a1)
{
}

uint64_t sub_1CC2E19D8(uint64_t a1, llvm::MachineFunction *this)
{
  uint64_t v566 = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCCD408)
  {
LABEL_57:
    char v46 = 0;
    return v46 & 1;
  }
  uint64_t v3 = *(uint64_t ****)this;
  if ((*(unsigned char *)(*(void *)this + 23) & 0x20) == 0)
  {
LABEL_17:
    unint64_t v19 = (char *)this + 320;
    float v20 = (char *)*((void *)this + 41);
    v513 = v19;
    while (v20 != v19)
    {
      float v21 = (char *)*((void *)v20 + 7);
      if (v21 != v20 + 48)
      {
        do
        {
          if (!v21 || (unint64_t v22 = v21, (*v21 & 4) == 0))
          {
            unint64_t v22 = v21;
            if ((*((_WORD *)v21 + 22) & 8) != 0)
            {
              unint64_t v22 = v21;
              do
                unint64_t v22 = (char *)*((void *)v22 + 1);
              while ((*((_WORD *)v22 + 22) & 8) != 0);
            }
          }
          uint8x8_t v23 = (char *)*((void *)v22 + 1);
          if (**((unsigned __int16 **)v21 + 2) - 13 <= 4)
          {
            uint64_t v24 = v21;
            if ((*v21 & 4) == 0)
            {
              uint64_t v24 = v21;
              if ((*((_WORD *)v21 + 22) & 8) != 0)
              {
                uint64_t v24 = v21;
                do
                  uint64_t v24 = (char *)*((void *)v24 + 1);
                while ((*((_WORD *)v24 + 22) & 8) != 0);
              }
            }
            uint64_t v25 = (char *)*((void *)v24 + 1);
            if (v25 != v21)
            {
              do
              {
                uint64_t v26 = (char *)*((void *)v21 + 1);
                uint64_t v27 = *(void *)(*((void *)v21 + 3) + 32);
                if (v27)
                {
                  uint64_t v28 = *(void *)(v27 + 728);
                  if (v28) {
                    (*(void (**)(uint64_t, char *))(*(void *)v28 + 32))(v28, v21);
                  }
                  uint64_t v29 = *((unsigned int *)v21 + 10);
                  if (v29)
                  {
                    uint64_t v30 = *((void *)v21 + 4);
                    uint64_t v31 = *(void *)(v27 + 40);
                    uint64_t v32 = 32 * v29;
                    do
                    {
                      if (!*(unsigned char *)v30)
                      {
                        uint64_t v33 = *(unsigned int *)(v30 + 4);
                        if ((v33 & 0x80000000) != 0) {
                          unint64_t v34 = (uint64_t *)(*(void *)(v31 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          unint64_t v34 = (uint64_t *)(*(void *)(v31 + 272) + 8 * v33);
                        }
                        uint64_t v35 = *v34;
                        uint64_t v37 = *(void *)(v30 + 16);
                        uint64_t v36 = *(void *)(v30 + 24);
                        if (v30 != *v34) {
                          unint64_t v34 = (uint64_t *)(v37 + 24);
                        }
                        *unint64_t v34 = v36;
                        if (v36) {
                          uint64_t v38 = v36;
                        }
                        else {
                          uint64_t v38 = v35;
                        }
                        *(void *)(v38 + 16) = v37;
                        *(void *)(v30 + 16) = 0;
                        *(void *)(v30 + 24) = 0;
                      }
                      v30 += 32;
                      v32 -= 32;
                    }
                    while (v32);
                  }
                }
                *((void *)v21 + 3) = 0;
                unint64_t v39 = (unint64_t *)*((void *)v21 + 1);
                unint64_t v40 = *(void *)v21 & 0xFFFFFFFFFFFFFFF8;
                *unint64_t v39 = v40 | *v39 & 7;
                *(void *)(v40 + 8) = v39;
                *(void *)v21 &= 7uLL;
                *((void *)v21 + 1) = 0;
                uint64_t v41 = *(void *)(*((void *)v20 + 5) + 32);
                unint64_t v42 = (void *)*((void *)v21 + 4);
                if (v42)
                {
                  uint64_t v43 = v21[47];
                  uint8x8_t v44 = (uint64_t *)(v41 + 232);
                  if (*(_DWORD *)(v41 + 240) <= v43) {
                    sub_1CC34BDE0(v41 + 232, v43 + 1);
                  }
                  uint64_t v45 = *v44;
                  *unint64_t v42 = *(void *)(*v44 + 8 * v43);
                  *(void *)(v45 + 8 * v43) = v42;
                }
                *(void *)float v21 = *(void *)(v41 + 224);
                *(void *)(v41 + 224) = v21;
                float v21 = v26;
              }
              while (v26 != v25);
            }
          }
          float v21 = v23;
        }
        while (v23 != v20 + 48);
      }
      float v20 = (char *)*((void *)v20 + 1);
      unint64_t v19 = v513;
    }
    goto LABEL_57;
  }
  uint64_t v5 = ***v3;
  *(void *)uint64_t v554 = *(void *)this;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    uint64_t v54 = 0;
LABEL_69:
    unint64_t v10 = sub_1CC609054(v5 + 2480, (uint64_t)v554, (uint64_t *)v554, v54);
    uint64_t v55 = *(void *)v554;
    v10[3] = 0;
    v10[4] = 0;
    void *v10 = v55;
    v10[1] = v10 + 3;
    v10[2] = 0x100000000;
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v5 + 2480);
  int v8 = v6 - 1;
  unsigned int v9 = v8 & ((v3 >> 4) ^ (v3 >> 9));
  unint64_t v10 = (void *)(v7 + 40 * v9);
  unint64_t v11 = (void ***)*v10;
  if ((uint64_t ***)*v10 != v3)
  {
    unint64_t v12 = 0;
    int v13 = 1;
    while (v11 != (void ***)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == (void ***)-8192;
      }
      if (v14) {
        unint64_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      unint64_t v10 = (void *)(v7 + 40 * v9);
      unint64_t v11 = (void ***)*v10;
      if ((uint64_t ***)*v10 == v3) {
        goto LABEL_13;
      }
    }
    if (v12) {
      uint64_t v54 = v12;
    }
    else {
      uint64_t v54 = v10;
    }
    goto LABEL_69;
  }
LABEL_13:
  uint64_t v16 = *((unsigned int *)v10 + 4);
  if (!v16) {
    goto LABEL_17;
  }
  uint64_t v17 = (void *)(v10[1] + 8);
  uint64_t v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2))
  {
    v17 += 2;
    v18 -= 16;
    if (!v18) {
      goto LABEL_17;
    }
  }
  if (!*v17) {
    goto LABEL_17;
  }
  BOOL v48 = llvm::MachineFunction::useDebugInstrRef(this);
  uint64_t v49 = *(void *)(a1 + 248);
  if (!v49) {
    operator new();
  }
  sub_1CC2E4D90(v49);
  *(void *)(v49 + 112) = this;
  unint64_t v50 = *(uint64_t **)(*(void *)v49 + 8);
  uint64_t v51 = *v50;
  uint64_t v52 = v50[1];
  if (v51 == v52)
  {
LABEL_65:
    uint64_t v53 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v51 != &llvm::LiveIntervals::ID)
    {
      v51 += 16;
      if (v51 == v52) {
        goto LABEL_65;
      }
    }
    uint64_t v53 = *(void *)(v51 + 8);
  }
  *(void *)(v49 + 120) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v53 + 96))(v53, &llvm::LiveIntervals::ID);
  *(void *)(v49 + 128) = (*(uint64_t (**)(void))(**((void **)this + 2) + 176))(*((void *)this + 2));
  uint64_t v57 = *((void *)this + 41);
  v505 = (char *)this + 320;
  uint64_t v502 = v49;
  char v58 = 0;
  if ((llvm::MachineFunction *)v57 != (llvm::MachineFunction *)((char *)this + 320))
  {
    while (1)
    {
      uint64_t v59 = v57 + 48;
      uint64_t v60 = *(void *)(v57 + 56);
      uint64_t v512 = v57;
      if (v60 != v57 + 48) {
        break;
      }
LABEL_284:
      uint64_t v57 = *(void *)(v57 + 8);
      if ((char *)v57 == v505) {
        goto LABEL_285;
      }
    }
LABEL_73:
    while (1)
    {
      unsigned int v61 = **(unsigned __int16 **)(v60 + 16);
      if (v61 <= 0x17 && ((1 << v61) & 0x83E000) != 0) {
        break;
      }
      if ((*(unsigned char *)v60 & 4) == 0)
      {
        while ((*(_WORD *)(v60 + 44) & 8) != 0)
          uint64_t v60 = *(void *)(v60 + 8);
      }
      uint64_t v60 = *(void *)(v60 + 8);
      if (v60 == v59) {
        goto LABEL_284;
      }
    }
    uint64_t v63 = *(void *)(v49 + 120);
    if (v60 == *(void *)(v57 + 56))
    {
      unint64_t v80 = *(void *)(*(void *)(*(void *)(v63 + 288) + 392) + 16 * *(unsigned int *)(v57 + 24));
      goto LABEL_111;
    }
    unint64_t v64 = *(void *)v60 & 0xFFFFFFFFFFFFFFF8;
    if (v64 && (*(unsigned char *)v64 & 4) != 0)
    {
      __int16 v65 = *(_WORD *)(v64 + 44);
      uint64_t v66 = *(void *)(v63 + 288);
      if ((v65 & 4) != 0)
      {
        unint64_t v67 = *(void *)v60 & 0xFFFFFFFFFFFFFFF8;
        do
          unint64_t v67 = *(void *)v67 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v67 + 44) & 4) != 0);
        uint64_t v49 = v502;
        uint64_t v57 = v512;
        goto LABEL_94;
      }
    }
    else
    {
      while (1)
      {
        __int16 v65 = *(_WORD *)(v64 + 44);
        if ((v65 & 4) == 0) {
          break;
        }
        unint64_t v64 = *(void *)v64 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v66 = *(void *)(v63 + 288);
    }
    unint64_t v67 = v64;
LABEL_94:
    if ((v65 & 8) != 0)
    {
      do
        unint64_t v64 = *(void *)(v64 + 8);
      while ((*(_WORD *)(v64 + 44) & 8) != 0);
    }
    unint64_t v68 = *(void *)(v64 + 8);
    if (v67 != v68)
    {
      do
      {
        unsigned int v69 = **(unsigned __int16 **)(v67 + 16);
        BOOL v70 = v69 > 0x17;
        int v71 = (1 << v69) & 0x83E000;
        if (v70 || v71 == 0) {
          goto LABEL_102;
        }
        unint64_t v67 = *(void *)(v67 + 8);
      }
      while (v67 != v68);
      unint64_t v67 = v68;
    }
LABEL_102:
    uint64_t v73 = *(void *)(v66 + 368);
    uint64_t v74 = *(unsigned int *)(v66 + 384);
    if (v74)
    {
      LODWORD(v75) = ((v67 >> 4) ^ (v67 >> 9)) & (v74 - 1);
      uint64_t v76 = (uint64_t *)(v73 + 16 * v75);
      uint64_t v77 = *v76;
      if (v67 != *v76)
      {
        int v78 = 1;
        do
        {
          if (v77 == -4096) {
            goto LABEL_109;
          }
          int v79 = v75 + v78++;
          uint64_t v75 = v79 & (v74 - 1);
          uint64_t v77 = *(void *)(v73 + 16 * v75);
        }
        while (v67 != v77);
        uint64_t v76 = (uint64_t *)(v73 + 16 * v75);
      }
    }
    else
    {
LABEL_109:
      uint64_t v76 = (uint64_t *)(v73 + 16 * v74);
    }
    unint64_t v80 = v76[1] & 0xFFFFFFFFFFFFFFF8 | 4;
LABEL_111:
    unint64_t v509 = v80 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v514 = v80;
    while (1)
    {
      if (v48 && v61 <= 0x10 && ((1 << v61) & 0x1A000) != 0)
      {
        uint64_t v81 = *(void *)(v60 + 8);
        uint64_t v82 = *(void *)(v60 + 24);
        uint64_t v83 = *(void *)(v82 + 32);
        if (v83)
        {
          uint64_t v84 = *(void *)(v83 + 728);
          if (v84)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v84 + 32))(v84, v60);
            unint64_t v80 = v514;
          }
          uint64_t v85 = *(unsigned int *)(v60 + 40);
          if (v85)
          {
            uint64_t v86 = *(void *)(v60 + 32);
            uint64_t v87 = *(void *)(v83 + 40);
            uint64_t v88 = 32 * v85;
            do
            {
              if (!*(unsigned char *)v86)
              {
                uint64_t v89 = *(unsigned int *)(v86 + 4);
                if ((v89 & 0x80000000) != 0) {
                  uint64_t v90 = (uint64_t *)(*(void *)(v87 + 24) + 16 * (v89 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v90 = (uint64_t *)(*(void *)(v87 + 272) + 8 * v89);
                }
                uint64_t v91 = *v90;
                uint64_t v93 = *(void *)(v86 + 16);
                uint64_t v92 = *(void *)(v86 + 24);
                if (v86 != *v90) {
                  uint64_t v90 = (uint64_t *)(v93 + 24);
                }
                *uint64_t v90 = v92;
                if (v92) {
                  uint64_t v94 = v92;
                }
                else {
                  uint64_t v94 = v91;
                }
                *(void *)(v94 + 16) = v93;
                *(void *)(v86 + 16) = 0;
                *(void *)(v86 + 24) = 0;
              }
              v86 += 32;
              v88 -= 32;
            }
            while (v88);
          }
        }
        *(void *)(v60 + 24) = 0;
        BOOL v107 = *(unint64_t **)(v60 + 8);
        unint64_t v108 = *(void *)v60 & 0xFFFFFFFFFFFFFFF8;
        *BOOL v107 = v108 | *v107 & 7;
        *(void *)(v108 + 8) = v107;
        *(void *)v60 &= 7uLL;
        *(void *)(v60 + 8) = 0;
        *(void *)uint64_t v554 = v60;
        *(void *)&v554[8] = v80;
        *(void *)&v554[16] = v82;
        unsigned int v109 = *(_DWORD *)(v49 + 192);
        unint64_t v110 = *(void *)(v49 + 184);
        if (v109 >= *(_DWORD *)(v49 + 196))
        {
          BOOL v174 = v110 + 24 * v109 > (unint64_t)v554;
          if (v110 > (unint64_t)v554 || !v174) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v111 = v110 + 24 * *(unsigned int *)(v49 + 192);
        long long v112 = *(_OWORD *)v554;
        *(void *)(v111 + 16) = *(void *)&v554[16];
        *(_OWORD *)uint64_t v111 = v112;
        ++*(_DWORD *)(v49 + 192);
        char v58 = 1;
        goto LABEL_160;
      }
      if (v61 - 13 > 1) {
        goto LABEL_138;
      }
      uint64_t v95 = *(void *)(v60 + 32);
      if (*(unsigned char *)(v95 + ((unint64_t)(v61 != 14) << 6)) != 14) {
        goto LABEL_137;
      }
      uint64_t v96 = *(unsigned int *)(v60 + 40);
      if (v61 == 13)
      {
        if (v96 != 4 || (*(unsigned char *)(v95 + 32) & 0xFE) != 0)
        {
LABEL_137:
          unsigned int v61 = **(unsigned __int16 **)(v60 + 16);
LABEL_138:
          if (v61 != 17 || *(_DWORD *)(v60 + 40) != 1 || (uint64_t v97 = *(void *)(v60 + 32), *(unsigned char *)v97 != 14))
          {
            if ((*(unsigned char *)v60 & 4) == 0)
            {
              while ((*(_WORD *)(v60 + 44) & 8) != 0)
                uint64_t v60 = *(void *)(v60 + 8);
            }
            uint64_t v60 = *(void *)(v60 + 8);
            goto LABEL_161;
          }
          uint64_t v98 = *(void *)(v97 + 16);
          uint64_t v99 = *(unsigned int *)(v49 + 1064);
          if (!v99) {
LABEL_153:
          }
            operator new();
          BOOL v100 = *(void **)(v49 + 1056);
          uint64_t v101 = *(void *)(v60 + 56);
          uint64_t v102 = 8 * v99;
          while (1)
          {
            uint64_t v103 = *(_DWORD *)(v101 + 8) == 2 ? *(void *)(v101 - 8) : 0;
            char v104 = (void *)*v100;
            if (*(void *)*v100 == v98)
            {
              uint64_t v105 = v104[1];
              uint64_t v106 = *(_DWORD *)(v105 + 8) == 2 ? *(void *)(v105 - 8) : 0;
              if (v106 == v103 && v104[2] == v80) {
                goto LABEL_227;
              }
            }
            ++v100;
            v102 -= 8;
            if (!v102) {
              goto LABEL_153;
            }
          }
        }
        uint64_t v96 = 4;
      }
      if (v61 != 14) {
        uint64_t v96 = 1;
      }
      char v114 = 0;
      if (2 * (v61 == 14) != v96) {
        break;
      }
LABEL_198:
      int v510 = v61 == 13 && *(unsigned __int8 *)(v95 + 32) == 1;
      uint64_t v136 = *(void *)(v95 + ((unint64_t)(v61 != 14) << 6) + 16);
      uint64_t v137 = 96;
      if (v61 == 14) {
        uint64_t v137 = 32;
      }
      uint64_t v138 = *(void *)(v95 + v137 + 16);
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v138 + 24), *(uint64_t **)(v138 + 32), &v528);
      uint64_t v139 = *(void *)(v60 + 56);
      if (*(_DWORD *)(v139 + 8) == 2) {
        uint64_t v140 = *(void *)(v139 - 8);
      }
      else {
        uint64_t v140 = 0;
      }
      *(int8x16_t *)&v554[8] = v528;
      *(void *)&v554[24] = v529;
      *(void *)uint64_t v554 = v136;
      uint64_t v555 = v140;
      uint64_t v559 = 0;
      uint64_t v141 = v502;
      char v142 = sub_1CC2E9354(*(void *)(v502 + 1112), *(_DWORD *)(v502 + 1128), (uint64_t *)v554, &v559);
      uint64_t v143 = v559;
      if ((v142 & 1) == 0)
      {
        uint64_t v550 = v559;
        int v145 = *(_DWORD *)(v502 + 1120);
        uint64_t v146 = *(unsigned int *)(v502 + 1128);
        if (4 * v145 + 4 >= (3 * v146))
        {
          int v147 = 2 * v146;
        }
        else
        {
          int v147 = *(_DWORD *)(v502 + 1128);
          if ((int)v146 + ~v145 - *(_DWORD *)(v502 + 1124) > v146 >> 3)
          {
LABEL_211:
            *(_DWORD *)(v141 + 1120) = v145 + 1;
            if (*(void *)v143 || *(unsigned char *)(v143 + 24) || *(void *)(v143 + 32)) {
              --*(_DWORD *)(v502 + 1124);
            }
            long long v148 = *(_OWORD *)&v554[16];
            uint64_t v149 = v555;
            *(_OWORD *)uint64_t v143 = *(_OWORD *)v554;
            *(_OWORD *)(v143 + 16) = v148;
            *(void *)(v143 + 32) = v149;
            *(void *)(v143 + 40) = 0;
LABEL_216:
            operator new();
          }
        }
        uint64_t v175 = *(void *)(v502 + 1112);
        unint64_t v176 = (v147 - 1) | ((unint64_t)(v147 - 1) >> 1);
        unint64_t v177 = v176 | (v176 >> 2) | ((v176 | (v176 >> 2)) >> 4);
        int v178 = ((v177 | (v177 >> 8)) >> 16) | v177 | (v177 >> 8);
        if ((v178 + 1) > 0x40) {
          unsigned int v179 = v178 + 1;
        }
        else {
          unsigned int v179 = 64;
        }
        *(_DWORD *)(v502 + 1128) = v179;
        uint64_t v180 = (char *)operator new(48 * v179, (std::align_val_t)8uLL);
        *(void *)(v502 + 1112) = v180;
        uint64_t v499 = v175;
        __n128 v181 = 0uLL;
        if (v175)
        {
          *(void *)(v502 + 1120) = 0;
          int v182 = *(_DWORD *)(v502 + 1128);
          if (v182)
          {
            uint64_t v183 = &v180[48 * v182];
            do
            {
              *(void *)uint64_t v180 = 0;
              v180[8] = 0;
              v180[24] = 0;
              *((void *)v180 + 4) = 0;
              v180 += 48;
            }
            while (v180 != v183);
          }
          if (v146)
          {
            uint64_t v184 = 48 * v146;
            do
            {
              if (*(void *)v175 || *(unsigned char *)(v175 + 24) && *(_OWORD *)(v175 + 8) != 0 || *(void *)(v175 + 32))
              {
                *(void *)&long long v564 = 0;
                sub_1CC2E9354(*(void *)(v502 + 1112), *(_DWORD *)(v502 + 1128), (uint64_t *)v175, (uint64_t *)&v564);
                uint64_t v185 = v564;
                __n128 v181 = *(__n128 *)v175;
                long long v186 = *(_OWORD *)(v175 + 16);
                *(void *)(v564 + 32) = *(void *)(v175 + 32);
                *(__n128 *)uint64_t v185 = v181;
                *(_OWORD *)(v185 + 16) = v186;
                *(void *)(v185 + 40) = *(void *)(v175 + 40);
                ++*(_DWORD *)(v502 + 1120);
              }
              v175 += 48;
              v184 -= 48;
            }
            while (v184);
          }
          MEMORY[0x1D25D9CD0](v499, 8, v181);
        }
        else
        {
          *(void *)(v502 + 1120) = 0;
          int v187 = *(_DWORD *)(v502 + 1128);
          if (v187)
          {
            int v188 = &v180[48 * v187];
            do
            {
              *(void *)uint64_t v180 = 0;
              v180[8] = 0;
              v180[24] = 0;
              *((void *)v180 + 4) = 0;
              v180 += 48;
            }
            while (v180 != v188);
          }
        }
        uint64_t v141 = v502;
        sub_1CC2E9354(*(void *)(v502 + 1112), *(_DWORD *)(v502 + 1128), (uint64_t *)v554, &v550);
        int v145 = *(_DWORD *)(v502 + 1120);
        uint64_t v143 = v550;
        goto LABEL_211;
      }
      uint64_t v144 = *(void *)(v559 + 40);
      uint64_t v57 = v512;
      if (!v144) {
        goto LABEL_216;
      }
      if (v114)
      {
        long long v564 = 0u;
        *(_OWORD *)v565 = 0u;
        LODWORD(v564) = 0x80000000;
        if (**(_WORD **)(v60 + 16) == 14) {
          unint64_t v150 = (*(_DWORD *)(v60 + 40) - 2);
        }
        else {
          unint64_t v150 = 1;
        }
        *(void *)uint64_t v554 = &v554[16];
        *(void *)&v554[8] = 0x400000000;
        sub_1CC2ECE00((uint64_t)v554, v150, &v564);
        sub_1CC2E8D3C(v144, v514, *(llvm::MachineOperand **)v554, *(unsigned int *)&v554[8], 0, v61 == 14, v138);
        if (*(unsigned char **)v554 != &v554[16]) {
          free(*(void **)v554);
        }
        uint64_t v49 = v502;
        unint64_t v80 = v514;
      }
      else
      {
        uint64_t v152 = 32 * *(unsigned int *)(v60 + 40);
        if (**(_WORD **)(v60 + 16) != 14) {
          uint64_t v152 = 32;
        }
        uint64_t v151 = **(unsigned __int16 **)(v60 + 16) == 14;
        sub_1CC2E8D3C(v144, v514, (llvm::MachineOperand *)(*(void *)(v60 + 32) + (v151 << 6)), (v152 - (v151 << 6)) >> 5, v510, v61 == 14, v138);
        unint64_t v80 = v514;
        uint64_t v49 = v502;
      }
LABEL_227:
      uint64_t v153 = v60;
      if ((*(unsigned char *)v60 & 4) == 0)
      {
        uint64_t v153 = v60;
        if ((*(_WORD *)(v60 + 44) & 8) != 0)
        {
          uint64_t v153 = v60;
          do
            uint64_t v153 = *(void *)(v153 + 8);
          while ((*(_WORD *)(v153 + 44) & 8) != 0);
        }
      }
      uint64_t v81 = *(void *)(v153 + 8);
      if (v81 == v60)
      {
        char v58 = 1;
        goto LABEL_161;
      }
      do
      {
        uint64_t v154 = *(void *)(v60 + 8);
        uint64_t v155 = *(void *)(*(void *)(v60 + 24) + 32);
        if (v155)
        {
          uint64_t v156 = *(void *)(v155 + 728);
          if (v156)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v156 + 32))(v156, v60, v56);
            unint64_t v80 = v514;
          }
          uint64_t v157 = *(unsigned int *)(v60 + 40);
          if (v157)
          {
            uint64_t v158 = *(void *)(v60 + 32);
            uint64_t v159 = *(void *)(v155 + 40);
            uint64_t v160 = 32 * v157;
            do
            {
              if (!*(unsigned char *)v158)
              {
                uint64_t v161 = *(unsigned int *)(v158 + 4);
                if ((v161 & 0x80000000) != 0) {
                  uint64_t v162 = (uint64_t *)(*(void *)(v159 + 24) + 16 * (v161 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v162 = (uint64_t *)(*(void *)(v159 + 272) + 8 * v161);
                }
                uint64_t v163 = *v162;
                uint64_t v165 = *(void *)(v158 + 16);
                uint64_t v164 = *(void *)(v158 + 24);
                if (v158 != *v162) {
                  uint64_t v162 = (uint64_t *)(v165 + 24);
                }
                uint64_t *v162 = v164;
                if (v164) {
                  uint64_t v166 = v164;
                }
                else {
                  uint64_t v166 = v163;
                }
                *(void *)(v166 + 16) = v165;
                *(void *)(v158 + 16) = 0;
                *(void *)(v158 + 24) = 0;
              }
              v158 += 32;
              v160 -= 32;
            }
            while (v160);
          }
        }
        *(void *)(v60 + 24) = 0;
        int v167 = *(unint64_t **)(v60 + 8);
        unint64_t v168 = *(void *)v60 & 0xFFFFFFFFFFFFFFF8;
        *int v167 = v168 | *v167 & 7;
        *(void *)(v168 + 8) = v167;
        *(void *)v60 &= 7uLL;
        *(void *)(v60 + 8) = 0;
        uint64_t v169 = *(void *)(*(void *)(v57 + 40) + 32);
        uint64_t v170 = *(void **)(v60 + 32);
        if (v170)
        {
          uint64_t v171 = *(unsigned __int8 *)(v60 + 47);
          uint64_t v172 = (uint64_t *)(v169 + 232);
          if (*(_DWORD *)(v169 + 240) <= v171)
          {
            sub_1CC34BDE0(v169 + 232, v171 + 1);
            unint64_t v80 = v514;
          }
          uint64_t v173 = *v172;
          *uint64_t v170 = *(void *)(*v172 + 8 * v171);
          *(void *)(v173 + 8 * v171) = v170;
        }
        *(void *)uint64_t v60 = *(void *)(v169 + 224);
        *(void *)(v169 + 224) = v60;
        char v58 = 1;
        uint64_t v60 = v154;
        uint64_t v49 = v502;
      }
      while (v154 != v81);
LABEL_160:
      uint64_t v60 = v81;
LABEL_161:
      if (v60 == v59) {
        goto LABEL_284;
      }
      unsigned int v61 = **(unsigned __int16 **)(v60 + 16);
      if (v61 - 13 >= 5 && v61 != 23) {
        goto LABEL_73;
      }
    }
    uint64_t v115 = v95 + 32 * v96;
    uint64_t v116 = v95 + ((unint64_t)(v61 == 14) << 6);
    while (1)
    {
      if (*(unsigned char *)v116) {
        goto LABEL_197;
      }
      int v117 = *(_DWORD *)(v116 + 4);
      if ((v117 & 0x80000000) == 0) {
        goto LABEL_197;
      }
      uint64_t v118 = *(void *)(v502 + 120);
      uint64_t v119 = v117 & 0x7FFFFFFF;
      if (v119 < *(_DWORD *)(v118 + 416))
      {
        uint64_t v120 = *(void *)(*(void *)(v118 + 408) + 8 * v119);
        if (v120) {
          break;
        }
      }
      char v114 = 1;
LABEL_197:
      v116 += 32;
      if (v116 == v115) {
        goto LABEL_198;
      }
    }
    unint64_t v121 = *(unsigned int *)(v120 + 8);
    unsigned int v122 = *(void **)v120;
    if (v121)
    {
      uint64_t v123 = v122[3 * v121 - 2];
      unsigned int v124 = *(_DWORD *)(v509 + 24);
      unsigned int v125 = (v123 >> 1) & 3 | *(_DWORD *)((v123 & 0xFFFFFFFFFFFFFFF8) + 24);
      unsigned int v126 = v122;
      unint64_t v127 = v121;
      if (v124 < v125)
      {
        do
        {
          unint64_t v128 = v127 >> 1;
          uint64_t v129 = v126[3 * (v127 >> 1) + 1];
          LODWORD(v129) = (v129 >> 1) & 3 | *(_DWORD *)((v129 & 0xFFFFFFFFFFFFFFF8) + 24);
          v127 -= (v127 >> 1) + 1;
          BOOL v130 = v124 >= v129;
          if (v124 >= v129) {
            unint64_t v131 = v128 + 1;
          }
          else {
            unint64_t v131 = 0;
          }
          v126 += 3 * v131;
          if (!v130) {
            unint64_t v127 = v128;
          }
        }
        while (v127);
LABEL_188:
        uint64_t v132 = &v122[3 * v121];
        if (v126 != v132)
        {
          unsigned int v133 = *(_DWORD *)((*v126 & 0xFFFFFFFFFFFFFFF8) + 24);
          unsigned int v134 = *(_DWORD *)(v509 + 24);
          if (((*v126 >> 1) & 3 | v133) <= v134 && v509 == (v126[1] & 0xFFFFFFFFFFFFFFF8))
          {
            v126 += 3;
            if (v126 == v132) {
              goto LABEL_195;
            }
            unsigned int v133 = *(_DWORD *)((*v126 & 0xFFFFFFFFFFFFFFF8) + 24);
          }
          if (v134 >= v133)
          {
            uint64_t v135 = v126[2];
LABEL_196:
            v114 |= v135 == 0;
            goto LABEL_197;
          }
        }
LABEL_195:
        uint64_t v135 = 0;
        goto LABEL_196;
      }
    }
    else
    {
      LODWORD(v121) = 0;
    }
    unsigned int v126 = &v122[3 * v121];
    goto LABEL_188;
  }
LABEL_285:
  char v496 = v58;
  uint64_t v530 = 0;
  int8x16_t v528 = 0u;
  long long v529 = 0u;
  long long v532 = 0u;
  long long v533 = 0u;
  int v531 = 1065353216;
  int v534 = 1065353216;
  long long v536 = 0u;
  long long v535 = 0u;
  int v537 = 1065353216;
  int v538 = v540;
  uint64_t v539 = 0x400000000;
  memset(&v540[32], 0, 24);
  int v541 = 0;
  llvm::LexicalScopes::initialize((llvm::LexicalScopes *)&v528, *(uint64_t *****)(v49 + 112));
  uint64_t v497 = *(unsigned int *)(v49 + 984);
  if (!v497) {
    goto LABEL_717;
  }
  uint64_t v189 = 0;
  do
  {
    uint64_t v190 = v49;
    uint64_t v191 = *(void *)(*(void *)(v49 + 976) + 8 * v189);
    uint64_t v508 = *(void *)(v190 + 120);
    uint64_t v192 = *(void *)(*(void *)(v190 + 112) + 40);
    *(void *)uint64_t v554 = &v554[16];
    *(void *)&v554[8] = 0x1000000000;
    uint64_t v501 = v192;
    sub_1CC2ECFB4((uint64_t)&v550, v191 + 200);
    *(void *)&long long v564 = v550;
    *((void *)&v564 + 1) = &v565[2];
    *(void *)v565 = 0x400000000;
    if (v552) {
      sub_1CC2D01B8((uint64_t)&v564 + 8, (uint64_t)&v551);
    }
    uint64_t v498 = v189;
    if (v551 != &v553) {
      free(v551);
    }
    while (v565[0] && *(_DWORD *)(*((void *)&v564 + 1) + 12) < *(_DWORD *)(*((void *)&v564 + 1) + 8))
    {
      uint64_t v193 = *((void *)&v564 + 1) + 16 * v565[0];
      uint64_t v194 = *(void *)(v193 - 16);
      unsigned int v195 = *(_DWORD *)(v193 - 4);
      char v196 = *(unsigned char *)(v194 + 24 * v195 + 72);
      uint64_t v197 = v196 & 0x3F;
      if ((v196 & 0x3F) != 0)
      {
        uint64_t v198 = *(__int32 **)(v194 + 24 * v195 + 64);
        unint64_t v199 = wmemchr(v198, -1, v196 & 0x3F);
        uint64_t v200 = v199 ? v199 : &v198[v197];
        if (v197 == v200 - v198)
        {
          uint64_t v201 = *((void *)&v564 + 1) + 16 * v565[0];
          uint64_t v202 = *(void *)(v201 - 16);
          uint64_t v203 = *(unsigned int *)(v201 - 4);
          uint64_t v550 = *(void *)(v202 + 16 * v203);
          sub_1CC2EA3E8((uint64_t)&v551, v202 + 24 * v203 + 64);
          sub_1CC2ED09C((char **)v554, (unint64_t)&v550);
          unsigned int v204 = v551;
          uint64_t v551 = 0;
          if (v204) {
            MEMORY[0x1D25D9CB0](v204, 0x1000C8052888210);
          }
        }
      }
      sub_1CC2ED240((uint64_t)&v564);
    }
    if (*((unsigned int **)&v564 + 1) != &v565[2]) {
      free(*((void **)&v564 + 1));
    }
    if (!*(_DWORD *)&v554[8]) {
      goto LABEL_604;
    }
    unsigned int v205 = 0;
    unint64_t v511 = (void *)(v508 + 408);
    do
    {
      unsigned int v506 = v205;
      __int16 v206 = (unint64_t *)(*(void *)v554 + 32 * v205);
      unint64_t v207 = *v206;
      sub_1CC2EA3E8((uint64_t)&v522, (uint64_t)(v206 + 1));
      uint64_t v550 = 1;
      for (uint64_t i = 8; i != 104; i += 24)
        *(_DWORD *)((char *)&v550 + i) = -1;
      uint64_t v209 = v508;
      uint64_t v547 = v549;
      uint64_t v548 = 0x400000000;
      if ((v523 & 0x3F) == 0) {
        goto LABEL_579;
      }
      int v210 = 0;
      uint64_t v211 = v522;
      char v212 = &v522[v523 & 0x3F];
      unint64_t v213 = v207 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v214 = (v207 >> 1) & 3;
      do
      {
        uint64_t v215 = *v211;
        uint64_t v216 = *(void *)(v191 + 56);
        int v217 = *(unsigned __int8 *)(v216 + 32 * v215);
        if (*(unsigned char *)(v216 + 32 * v215) || (int v218 = *(_DWORD *)(v216 + 32 * v215 + 4), (v218 & 0x80000000) == 0))
        {
          v210 |= v217 != 0;
          goto LABEL_312;
        }
        if ((v218 & 0x7FFFFFFFu) >= *(_DWORD *)(v209 + 416))
        {
          int v210 = 1;
          goto LABEL_312;
        }
        uint64_t v219 = *(void *)(*v511 + 8 * (v218 & 0x7FFFFFFF));
        if (v219)
        {
          unsigned int v220 = *(_DWORD *)(v219 + 8);
          uint64_t v221 = *(void **)v219;
          if (v220)
          {
            uint64_t v222 = v221[3 * v220 - 2];
            unsigned int v223 = *(_DWORD *)(v213 + 24) | v214;
            unsigned int v224 = (v222 >> 1) & 3 | *(_DWORD *)((v222 & 0xFFFFFFFFFFFFFFF8) + 24);
            uint64_t v225 = *(void **)v219;
            unint64_t v226 = *(unsigned int *)(v219 + 8);
            if (v223 < v224)
            {
              do
              {
                unint64_t v227 = v226 >> 1;
                uint64_t v228 = v225[3 * (v226 >> 1) + 1];
                LODWORD(v228) = (v228 >> 1) & 3 | *(_DWORD *)((v228 & 0xFFFFFFFFFFFFFFF8) + 24);
                v226 -= (v226 >> 1) + 1;
                BOOL v229 = v223 >= v228;
                if (v223 >= v228) {
                  unint64_t v230 = v227 + 1;
                }
                else {
                  unint64_t v230 = 0;
                }
                v225 += 3 * v230;
                if (!v229) {
                  unint64_t v226 = v227;
                }
              }
              while (v226);
LABEL_328:
              if (v225 == &v221[3 * v220]
                || ((*v225 >> 1) & 3 | *(_DWORD *)((*v225 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v213 + 24) | v214)
                || !v225[2])
              {
                goto LABEL_340;
              }
              uint64_t v500 = v225[2];
              *(void *)&long long v564 = 0;
              char v231 = sub_1CC2ED628((uint64_t)&v550, v215, &v564);
              uint64_t v232 = v564;
              if ((v231 & 1) == 0)
              {
                if (v550) {
                  unsigned int v233 = 4;
                }
                else {
                  unsigned int v233 = v552;
                }
                if (4 * (v550 >> 1) + 4 >= 3 * v233)
                {
                  v233 *= 2;
                }
                else if (v233 + ~(v550 >> 1) - HIDWORD(v550) > v233 >> 3)
                {
                  goto LABEL_336;
                }
                sub_1CD518D84((uint64_t)&v550, v233);
                *(void *)&long long v564 = 0;
                sub_1CC2ED628((uint64_t)&v550, v215, &v564);
                uint64_t v232 = v564;
LABEL_336:
                LODWORD(v550) = v550 + 2;
                if (*(_DWORD *)v232 != -1) {
                  --HIDWORD(v550);
                }
                *(_DWORD *)uint64_t v232 = v215;
                *(void *)(v232 + 8) = 0;
                *(void *)(v232 + 16) = 0;
              }
              uint64_t v209 = v508;
              *(void *)(v232 + 8) = v219;
              *(void *)(v232 + 16) = v500;
              goto LABEL_340;
            }
          }
          else
          {
            unsigned int v220 = 0;
          }
          uint64_t v225 = &v221[3 * v220];
          goto LABEL_328;
        }
LABEL_340:
        int v210 = 1;
LABEL_312:
        ++v211;
      }
      while (v211 != v212);
      if ((v210 & 1) == 0) {
        goto LABEL_579;
      }
      LOBYTE(v542) = 0;
      char v546 = 0;
      sub_1CC2EA3E8((uint64_t)&v519, (uint64_t)&v522);
      uint64_t v234 = *(void *)(v508 + 288);
      uint64_t v503 = v207;
      if (v207 >= 8 && (uint64_t v235 = *(void *)(v213 + 16)) != 0)
      {
        uint64_t v236 = (void *)(v235 + 24);
      }
      else
      {
        uint64_t v381 = *(unsigned int *)(v234 + 544);
        if (v381)
        {
          unsigned int v382 = *(_DWORD *)(v213 + 24) | v214;
          uint64_t v383 = *(void **)(v234 + 536);
          unint64_t v384 = *(unsigned int *)(v234 + 544);
          do
          {
            unint64_t v385 = v384 >> 1;
            BOOL v386 = &v383[2 * (v384 >> 1)];
            uint64_t v388 = *v386;
            uint64_t v387 = v386 + 2;
            v384 += ~(v384 >> 1);
            if (((v388 >> 1) & 3 | *(_DWORD *)((v388 & 0xFFFFFFFFFFFFFFF8) + 24)) < v382) {
              uint64_t v383 = v387;
            }
            else {
              unint64_t v384 = v385;
            }
          }
          while (v384);
          if (v383 == (void *)(*(void *)(v234 + 536) + 16 * v381)
            || ((*v383 >> 1) & 3 | *(_DWORD *)((*v383 & 0xFFFFFFFFFFFFFFF8) + 24)) > v382)
          {
            v383 -= 2;
          }
        }
        else
        {
          uint64_t v383 = *(void **)(v234 + 536);
        }
        uint64_t v236 = v383 + 1;
      }
      uint64_t v237 = *(void *)(*(void *)(v234 + 392) + 16 * *(unsigned int *)(*v236 + 24) + 8);
      *(void *)&long long v564 = v191 + 200;
      *((void *)&v564 + 1) = &v565[2];
      *(void *)v565 = 0x400000000;
      sub_1CC2EA918((uint64_t)&v564, v503);
      int v238 = v550;
      if (v550 > 1)
      {
        std::string v242 = (unsigned int *)v554;
        unint64_t v241 = (unsigned int *)&v551;
        if ((v550 & 1) == 0)
        {
          unint64_t v241 = (unsigned int *)v551;
          if (!v552)
          {
            int v238 = 0;
            goto LABEL_352;
          }
          std::string v242 = (unsigned int *)((char *)v551 + 24 * v552);
        }
        int v238 = v550 & 1;
        while (*v241 >= 0xFFFFFFFE)
        {
          v241 += 6;
          if (v241 == v242)
          {
            unint64_t v241 = v242;
            break;
          }
        }
      }
      else
      {
        if (v550)
        {
          uint64_t v239 = (char *)&v551;
          unsigned int v240 = 4;
        }
        else
        {
          uint64_t v239 = (char *)v551;
          unsigned int v240 = v552;
        }
        unint64_t v241 = (unsigned int *)&v239[24 * v240];
LABEL_352:
        std::string v242 = v241;
      }
      BOOL v243 = v238 == 0;
      char v244 = (char *)&v551;
      if (v243) {
        char v244 = (char *)v551;
      }
      unsigned int v245 = v552;
      if (!v243) {
        unsigned int v245 = 4;
      }
      uint64_t v246 = &v244[24 * v245];
LABEL_358:
      while (2)
      {
        if (v241 != (unsigned int *)v246)
        {
          uint64_t v247 = *((void *)v241 + 1);
          unint64_t v248 = *(unsigned int *)(v247 + 8);
          uint64_t v249 = *(void **)v247;
          if (v248)
          {
            uint64_t v250 = v249[3 * v248 - 2];
            unsigned int v251 = *(_DWORD *)(v213 + 24) | v214;
            unsigned int v252 = (v250 >> 1) & 3 | *(_DWORD *)((v250 & 0xFFFFFFFFFFFFFFF8) + 24);
            uint64_t v253 = v249;
            unint64_t v254 = v248;
            if (v251 < v252)
            {
              do
              {
                unint64_t v255 = v254 >> 1;
                uint64_t v256 = v253[3 * (v254 >> 1) + 1];
                LODWORD(v256) = (v256 >> 1) & 3 | *(_DWORD *)((v256 & 0xFFFFFFFFFFFFFFF8) + 24);
                v254 -= (v254 >> 1) + 1;
                BOOL v257 = v251 >= v256;
                if (v251 >= v256) {
                  unint64_t v258 = v255 + 1;
                }
                else {
                  unint64_t v258 = 0;
                }
                v253 += 3 * v258;
                if (!v257) {
                  unint64_t v254 = v255;
                }
              }
              while (v254);
LABEL_370:
              unint64_t v259 = &v249[3 * v248];
              if (v253 == v259
                || ((*v253 >> 1) & 3 | *(_DWORD *)((*v253 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v213 + 24) | v214))
              {
                uint64_t v253 = v259;
              }
              if (v253 == v259) {
                __int16 v260 = 0;
              }
              else {
                __int16 v260 = v253;
              }
              uint64_t v261 = v260[1];
              if (((v261 >> 1) & 3 | *(_DWORD *)((v261 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v237 & 0xFFFFFFFFFFFFFFF8) + 24) | (v237 >> 1) & 3))
              {
                if (v261 == v237 && v546 != 0)
                {
                  if (v544 >= (unint64_t)HIDWORD(v544)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)__dst + v544) = *v241;
                  LODWORD(v544) = v544 + 1;
                }
              }
              else
              {
                unsigned int v262 = *v241;
                uint64_t v556 = v558;
                v558[0] = v262;
                uint64_t v557 = 0xC00000001;
                uint64_t v559 = v261;
                unsigned int __src = v562;
                v562[0] = v262;
                uint64_t v561 = 0xC00000001;
                uint64_t v542 = v261;
                if (v546)
                {
                  if (v544)
                  {
                    *(_DWORD *)std::string __dst = v562[0];
                  }
                  else
                  {
                    if (!HIDWORD(v544))
                    {
                      LODWORD(v544) = 0;
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    memcpy(__dst, __src, 4 * v561);
                  }
                  LODWORD(v544) = 1;
                  LODWORD(v561) = 0;
                  if (__src != v562) {
                    free(__src);
                  }
                }
                else
                {
                  std::string __dst = v545;
                  v545[0] = v262;
                  uint64_t v544 = 0xC00000001;
                  LODWORD(v561) = 0;
                  char v546 = 1;
                }
                if (v556 != v558) {
                  free(v556);
                }
                uint64_t v237 = v261;
              }
              uint64_t v264 = v241 + 6;
              while (v264 != v242)
              {
                unsigned int v265 = *v264;
                v264 += 6;
                if (v265 <= 0xFFFFFFFD)
                {
                  unint64_t v241 = v264 - 6;
                  goto LABEL_358;
                }
              }
              unint64_t v241 = v242;
              continue;
            }
          }
          else
          {
            LODWORD(v248) = 0;
          }
          uint64_t v253 = &v249[3 * v248];
          goto LABEL_370;
        }
        break;
      }
      uint64_t v266 = v565[0];
      if (!v565[0]) {
        goto LABEL_410;
      }
      uint64_t v267 = *((void *)&v564 + 1);
      unsigned int v269 = *(_DWORD *)(*((void *)&v564 + 1) + 8);
      unsigned int v268 = *(_DWORD *)(*((void *)&v564 + 1) + 12);
      if (v268 >= v269) {
        goto LABEL_404;
      }
      uint64_t v270 = *((void *)&v564 + 1) + 16 * v565[0];
      uint64_t v271 = *(void *)(v270 - 16);
      uint64_t v272 = *(unsigned int *)(v270 - 4);
      if (((*(void *)(v271 + 16 * v272) >> 1) & 3 | *(_DWORD *)((*(void *)(v271 + 16 * v272) & 0xFFFFFFFFFFFFFFF8)
                                                                               + 24)) > (*(_DWORD *)(v213 + 24) | v214))
        goto LABEL_404;
      if (v214 == 3) {
        unint64_t v367 = *(void *)(v213 + 8) & 0xFFFFFFFFFFFFFFF9;
      }
      else {
        unint64_t v367 = v213 | (2 * v214 + 2);
      }
      uint64_t v503 = v367;
      uint64_t v368 = v271 + 24 * v272;
      int v369 = *(unsigned __int8 *)(v368 + 72);
      if (v369 == v520
        && *(void *)(v271 + 24 * v272 + 80) == v521
        && !memcmp(*(const void **)(v368 + 64), v519, 4 * (v369 & 0x3F))
        && *(void *)(v271 + 16 * v272 + 8) == v503)
      {
        sub_1CC2ED240((uint64_t)&v564);
        uint64_t v266 = v565[0];
        if (v565[0])
        {
          uint64_t v267 = *((void *)&v564 + 1);
          unsigned int v269 = *(_DWORD *)(*((void *)&v564 + 1) + 8);
          unsigned int v268 = *(_DWORD *)(*((void *)&v564 + 1) + 12);
LABEL_404:
          if (v268 < v269)
          {
            uint64_t v273 = *(void *)(*(void *)(v267 + 16 * v266 - 16) + 16 * *(unsigned int *)(v267 + 16 * v266 - 4));
            if (((v273 >> 1) & 3 | *(_DWORD *)((v273 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v237 & 0xFFFFFFFFFFFFFFF8) + 24) | (v237 >> 1) & 3))
            {
              LOBYTE(v559) = 0;
              char v563 = 0;
              sub_1CC2ED6D4((uint64_t)&v542, (uint64_t)&v559);
              if (v563 && __src != v562) {
                free(__src);
              }
              uint64_t v237 = v273;
            }
          }
        }
LABEL_410:
        if (((v503 >> 1) & 3 | *(_DWORD *)((v503 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((v237 >> 1) & 3 | *(_DWORD *)((v237 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          sub_1CC2EA3E8((uint64_t)&v559, (uint64_t)&v519);
          sub_1CC2EA3E8((uint64_t)&v556, (uint64_t)&v559);
          sub_1CC2E9FA4((uint64_t)&v564, v503, v237, (uint64_t)&v556);
          __int16 v274 = v556;
          uint64_t v556 = 0;
          if (v274) {
            MEMORY[0x1D25D9CB0](v274, 0x1000C8052888210);
          }
          uint64_t v275 = v559;
          uint64_t v559 = 0;
          if (v275) {
            MEMORY[0x1D25D9CB0](v275, 0x1000C8052888210);
          }
        }
      }
      else
      {
        LOBYTE(v559) = 0;
        char v563 = 0;
        sub_1CC2ED6D4((uint64_t)&v542, (uint64_t)&v559);
        if (v563 && __src != v562) {
          free(__src);
        }
      }
      if (*((unsigned int **)&v564 + 1) != &v565[2]) {
        free(*((void **)&v564 + 1));
      }
      uint64_t v276 = v519;
      BOOL v519 = 0;
      if (v276) {
        MEMORY[0x1D25D9CB0](v276, 0x1000C8052888210);
      }
      if (!v546) {
        goto LABEL_579;
      }
      uint64_t v556 = v558;
      uint64_t v557 = 0x200000000;
      if (v544)
      {
        unsigned int v277 = 0;
        unsigned int v278 = (unsigned int *)__dst;
        uint64_t v279 = 4 * v544;
        do
        {
          uint64_t v280 = *v278;
          uint64_t v281 = *(void *)(v191 + 56);
          if ((*(_DWORD *)(v281 + 32 * v280) & 0xFFF00) != 0) {
            goto LABEL_574;
          }
          int v282 = *(_DWORD *)(v281 + 32 * v280 + 4);
          uint64_t v283 = v282 & 0x7FFFFFFF;
          uint64_t v284 = *(unsigned int *)(v508 + 416);
          if ((v282 & 0x7FFFFFFFu) >= v284)
          {
            sub_1CB9153B8((uint64_t)v511, v283 - v284 + 1, *(void *)(v508 + 424));
LABEL_430:
            operator new();
          }
          uint64_t v285 = *(void *)(*v511 + 8 * v283);
          if (!v285) {
            goto LABEL_430;
          }
          if (v277 >= HIDWORD(v557)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v286 = (char *)v556 + 16 * v277;
          *uint64_t v286 = v280;
          v286[1] = v285;
          unsigned int v277 = v557 + 1;
          LODWORD(v557) = v557 + 1;
          ++v278;
          v279 -= 4;
        }
        while (v279);
      }
      sub_1CC2EA3E8((uint64_t)&__s2, (uint64_t)&v522);
      uint64_t v287 = v508;
      uint64_t v288 = v542;
      uint64_t v289 = (char *)v556;
      int v290 = v557;
      if (v557)
      {
        __int16 v291 = (uint64_t *)((char *)v556 + 8);
        uint64_t v292 = 16 * v557;
        do
        {
          uint64_t v293 = *v291;
          v291 += 2;
          if ((*(_DWORD *)(v293 + 112) & 0x80000000) == 0) {
            goto LABEL_572;
          }
          v292 -= 16;
        }
        while (v292);
      }
      uint64_t v294 = (char *)v556 + 16 * v557;
      *(void *)&long long v564 = 1;
      for (uint64_t j = 2; j != 90; j += 22)
        v565[j - 4] = -1;
      uint64_t v296 = v501;
      if (v290)
      {
        while (2)
        {
          LODWORD(v524) = *(_DWORD *)v289;
          uint64_t v297 = *(unsigned int *)(*((void *)v289 + 1) + 112);
          if ((v297 & 0x80000000) != 0) {
            uint64_t v298 = (int **)(*(void *)(v296 + 24) + 16 * (v297 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v298 = (int **)(*(void *)(v296 + 272) + 8 * v297);
          }
          int v299 = *v298;
          if (!*v298) {
            goto LABEL_448;
          }
          while (1)
          {
            int v300 = *v299;
            if ((*v299 & 0x81000000) == 0) {
              break;
            }
            int v299 = (int *)*((void *)v299 + 3);
            if (!v299) {
              goto LABEL_448;
            }
          }
LABEL_450:
          if ((v300 & 0xFFF00) != 0) {
            goto LABEL_478;
          }
          uint64_t v301 = *((void *)v299 + 1);
          if (**(_WORD **)(v301 + 16) != 19) {
            goto LABEL_478;
          }
          int v302 = *(_DWORD *)(*(void *)(v301 + 32) + 4);
          if ((v302 & 0x80000000) == 0) {
            goto LABEL_478;
          }
          __int16 v303 = *(_WORD *)(v301 + 44);
          unint64_t v304 = *((void *)v299 + 1);
          if ((v303 & 4) != 0)
          {
            do
              unint64_t v304 = *(void *)v304 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v304 + 44) & 4) != 0);
          }
          if ((v303 & 8) != 0)
          {
            do
              uint64_t v301 = *(void *)(v301 + 8);
            while ((*(_WORD *)(v301 + 44) & 8) != 0);
          }
          unint64_t v305 = *(void *)(v301 + 8);
          if (v304 != v305)
          {
            while (1)
            {
              unsigned int v306 = **(unsigned __int16 **)(v304 + 16);
              BOOL v70 = v306 > 0x17;
              int v307 = (1 << v306) & 0x83E000;
              if (v70 || v307 == 0) {
                break;
              }
              unint64_t v304 = *(void *)(v304 + 8);
              if (v304 == v305)
              {
                unint64_t v304 = v305;
                break;
              }
            }
          }
          uint64_t v309 = *(void *)(v287 + 288);
          uint64_t v310 = *(void *)(v309 + 368);
          uint64_t v311 = *(unsigned int *)(v309 + 384);
          if (v311)
          {
            LODWORD(v312) = ((v304 >> 4) ^ (v304 >> 9)) & (v311 - 1);
            unint64_t v313 = (uint64_t *)(v310 + 16 * v312);
            uint64_t v314 = *v313;
            if (v304 != *v313)
            {
              int v315 = 1;
              while (v314 != -4096)
              {
                int v316 = v312 + v315++;
                uint64_t v312 = v316 & (v311 - 1);
                uint64_t v314 = *(void *)(v310 + 16 * v312);
                if (v304 == v314)
                {
                  unint64_t v313 = (uint64_t *)(v310 + 16 * v312);
                  goto LABEL_469;
                }
              }
              goto LABEL_468;
            }
          }
          else
          {
LABEL_468:
            unint64_t v313 = (uint64_t *)(v310 + 16 * v311);
          }
LABEL_469:
          unint64_t v317 = v313[1] & 0xFFFFFFFFFFFFFFF8;
          uint64_t v559 = v191 + 200;
          unsigned int __src = v562;
          uint64_t v561 = 0x400000000;
          sub_1CC2EA918((uint64_t)&v559, v317 | 2);
          uint64_t v318 = __src;
          if (v561)
          {
            uint64_t v287 = v508;
            if (*((_DWORD *)__src + 3) < *((_DWORD *)__src + 2))
            {
              uint64_t v319 = (char *)__src + 16 * v561;
              uint64_t v320 = *((void *)v319 - 2);
              unsigned int v321 = *((_DWORD *)v319 - 1);
              uint64_t v322 = v320 + 24 * v321;
              int v323 = *(unsigned __int8 *)(v322 + 72);
              if (v323 == v517 && *(void *)(v320 + 24 * v321 + 80) == v518)
              {
                if (memcmp(*(const void **)(v322 + 64), __s2, 4 * (v323 & 0x3F))) {
                  goto LABEL_474;
                }
                uint64_t v287 = v508;
                uint64_t v296 = v501;
                if ((v302 & 0x7FFFFFFFu) >= *(_DWORD *)(v508 + 416)) {
                  goto LABEL_476;
                }
                uint64_t v324 = *(void *)(*v511 + 8 * (v302 & 0x7FFFFFFF));
                if (!v324) {
                  goto LABEL_476;
                }
                unsigned int v325 = *(_DWORD *)(v324 + 8);
                v326 = *(void **)v324;
                if (v325)
                {
                  uint64_t v327 = v326[3 * v325 - 2];
                  unsigned int v328 = *(_DWORD *)(v317 + 24) | 2;
                  unsigned int v329 = (v327 >> 1) & 3 | *(_DWORD *)((v327 & 0xFFFFFFFFFFFFFFF8) + 24);
                  uint64_t v330 = *(void **)v324;
                  unint64_t v331 = *(unsigned int *)(v324 + 8);
                  if (v328 < v329)
                  {
                    do
                    {
                      unint64_t v332 = v331 >> 1;
                      uint64_t v333 = v330[3 * (v331 >> 1) + 1];
                      LODWORD(v333) = (v333 >> 1) & 3 | *(_DWORD *)((v333 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v331 -= (v331 >> 1) + 1;
                      BOOL v334 = v328 >= v333;
                      if (v328 >= v333) {
                        unint64_t v335 = v332 + 1;
                      }
                      else {
                        unint64_t v335 = 0;
                      }
                      v330 += 3 * v335;
                      if (!v334) {
                        unint64_t v331 = v332;
                      }
                    }
                    while (v331);
LABEL_498:
                    uint64_t v504 = v288;
                    if (v330 == &v326[3 * v325]
                      || ((*v330 >> 1) & 3 | *(_DWORD *)((*v330 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v317 + 24) | 2u))
                    {
                      uint64_t v336 = 0;
                    }
                    else
                    {
                      uint64_t v336 = v330[2];
                    }
                    unsigned int v337 = sub_1CD518FE8(&v564, (int *)&v524);
                    unint64_t v338 = v337[4];
                    if (v338 >= v337[5]) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    uint64_t v287 = v508;
                    uint64_t v296 = v501;
                    int v339 = (void *)(*((void *)v337 + 1) + 16 * v338);
                    void *v339 = v324;
                    v339[1] = v336;
                    ++v337[4];
                    uint64_t v318 = __src;
                    uint64_t v288 = v504;
LABEL_476:
                    if (v318 != v562)
                    {
                      free(v318);
                      uint64_t v296 = v501;
                      uint64_t v287 = v508;
                    }
LABEL_478:
                    while (1)
                    {
                      int v299 = (int *)*((void *)v299 + 3);
                      if (!v299) {
                        break;
                      }
                      int v300 = *v299;
                      if ((*v299 & 0x81000000) == 0) {
                        goto LABEL_450;
                      }
                    }
LABEL_448:
                    v289 += 16;
                    if (v289 == v294) {
                      goto LABEL_506;
                    }
                    continue;
                  }
                }
                else
                {
                  unsigned int v325 = 0;
                }
                uint64_t v330 = &v326[3 * v325];
                goto LABEL_498;
              }
            }
          }
          else
          {
LABEL_474:
            uint64_t v287 = v508;
          }
          break;
        }
        uint64_t v296 = v501;
        goto LABEL_476;
      }
LABEL_506:
      char v340 = v564;
      if (v564 < 2) {
        goto LABEL_562;
      }
      uint64_t v559 = v191 + 200;
      unsigned int __src = v562;
      uint64_t v561 = 0x400000000;
      sub_1CC2EA918((uint64_t)&v559, v288);
      if (v561)
      {
        unsigned int v341 = __src;
        if (*((_DWORD *)__src + 3) < *((_DWORD *)__src + 2))
        {
          uint64_t v342 = *(void *)(*((void *)__src + 2 * v561 - 2)
                           + 16 * *((unsigned int *)__src + 4 * v561 - 1));
          if (((v342 >> 1) & 3 | *(_DWORD *)((v342 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v288 & 0xFFFFFFFFFFFFFFF8) + 24) | (v288 >> 1) & 3)) {
            goto LABEL_559;
          }
        }
      }
      sub_1CC2EA3E8((uint64_t)v527, (uint64_t)&__s2);
      if (!v557)
      {
        unsigned int v346 = (v288 >> 1) & 3;
        unint64_t v345 = v288 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_549;
      }
      int v343 = (__int32 *)v556;
      BOOL v344 = (__int32 *)((char *)v556 + 16 * v557);
      unint64_t v345 = v288 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v346 = (v288 >> 1) & 3;
      while (2)
      {
        __int32 v347 = *v343;
        v526[0] = *v343;
        unint64_t v348 = sub_1CD518FE8(&v564, v526);
        uint64_t v349 = v348[4];
        if (!v349) {
          goto LABEL_556;
        }
        uint64_t v350 = (uint64_t **)*((void *)v348 + 1);
        uint64_t v351 = &v350[2 * v349];
        while (2)
        {
          unsigned int v352 = *((_DWORD *)*v350 + 2);
          uint64_t v353 = **v350;
          if (!v352)
          {
            unsigned int v352 = 0;
LABEL_524:
            uint64_t v357 = (void *)(v353 + 24 * v352);
            goto LABEL_525;
          }
          uint64_t v354 = *(void *)(v353 + 24 * v352 - 16);
          unsigned int v355 = *(_DWORD *)(v345 + 24) | v346;
          unsigned int v356 = (v354 >> 1) & 3 | *(_DWORD *)((v354 & 0xFFFFFFFFFFFFFFF8) + 24);
          uint64_t v357 = (void *)**v350;
          unint64_t v358 = *((unsigned int *)*v350 + 2);
          if (v355 >= v356) {
            goto LABEL_524;
          }
          do
          {
            unint64_t v359 = v358 >> 1;
            uint64_t v360 = v357[3 * (v358 >> 1) + 1];
            LODWORD(v360) = (v360 >> 1) & 3 | *(_DWORD *)((v360 & 0xFFFFFFFFFFFFFFF8) + 24);
            v358 -= (v358 >> 1) + 1;
            BOOL v361 = v355 >= v360;
            if (v355 >= v360) {
              unint64_t v362 = v359 + 1;
            }
            else {
              unint64_t v362 = 0;
            }
            v357 += 3 * v362;
            if (!v361) {
              unint64_t v358 = v359;
            }
          }
          while (v358);
LABEL_525:
          if (v357 == (void *)(v353 + 24 * v352)
            || ((*v357 >> 1) & 3 | *(_DWORD *)((*v357 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v345 + 24) | v346))
          {
            uint64_t v363 = 0;
          }
          else
          {
            uint64_t v363 = (uint64_t *)v357[2];
          }
          uint64_t v364 = v350[1];
          if (v363 != v364)
          {
            v350 += 2;
            if (v350 == v351) {
              goto LABEL_556;
            }
            continue;
          }
          break;
        }
        __int32 v365 = sub_1CC2E9B2C(v191, *(llvm::MachineOperand **)(*(void *)((v364[1] & 0xFFFFFFFFFFFFFFF8) + 16) + 32));
        sub_1CC2ED794((uint64_t)&v524, (uint64_t)v527, v347, v365);
        sub_1CC2EBE18((uint64_t)v527, (uint64_t)&v524);
        uint64_t v366 = v524;
        uint64_t v524 = 0;
        if (v366) {
          MEMORY[0x1D25D9CB0](v366, 0x1000C8052888210);
        }
        v343 += 4;
        if (v343 != v344) {
          continue;
        }
        break;
      }
LABEL_549:
      if (v346 == 3) {
        unint64_t v370 = *(void *)(v345 + 8) & 0xFFFFFFFFFFFFFFF9;
      }
      else {
        unint64_t v370 = v345 | (2 * v346 + 2);
      }
      sub_1CC2EA3E8((uint64_t)v526, (uint64_t)v527);
      sub_1CC2E9FA4((uint64_t)&v559, v288, v370, (uint64_t)v526);
      uint64_t v371 = *(void *)v526;
      *(void *)uint64_t v526 = 0;
      if (v371) {
        MEMORY[0x1D25D9CB0](v371, 0x1000C8052888210);
      }
      uint64_t v524 = v288;
      sub_1CC2EA3E8((uint64_t)v525, (uint64_t)v527);
      sub_1CC2ED09C((char **)v554, (unint64_t)&v524);
      uint64_t v372 = v525[0];
      v525[0] = 0;
      if (v372) {
        MEMORY[0x1D25D9CB0](v372, 0x1000C8052888210);
      }
LABEL_556:
      uint64_t v373 = v527[0];
      v527[0] = 0;
      if (v373) {
        MEMORY[0x1D25D9CB0](v373, 0x1000C8052888210);
      }
      unsigned int v341 = __src;
LABEL_559:
      if (v341 != v562) {
        free(v341);
      }
      char v340 = v564;
LABEL_562:
      if (v340)
      {
        unsigned int v374 = (char *)&v564 + 8;
        unsigned int v375 = 4;
LABEL_564:
        uint64_t v376 = 88 * v375;
        uint64_t v377 = v374 + 24;
        do
        {
          if (*((_DWORD *)v377 - 6) <= 0xFFFFFFFD)
          {
            int v378 = (char *)*((void *)v377 - 2);
            if (v377 != v378) {
              free(v378);
            }
          }
          v377 += 88;
          v376 -= 88;
        }
        while (v376);
        char v340 = v564;
      }
      else
      {
        unsigned int v375 = v565[0];
        if (v565[0])
        {
          unsigned int v374 = (char *)*((void *)&v564 + 1);
          goto LABEL_564;
        }
      }
      if ((v340 & 1) == 0) {
        MEMORY[0x1D25D9CD0](*((void *)&v564 + 1), 8);
      }
LABEL_572:
      int v379 = __s2;
      __s2 = 0;
      if (v379) {
        MEMORY[0x1D25D9CB0](v379, 0x1000C8052888210);
      }
LABEL_574:
      if (v556 != v558) {
        free(v556);
      }
      if (v546 && __dst != v545) {
        free(__dst);
      }
LABEL_579:
      if (v547 != v549) {
        free(v547);
      }
      if ((v550 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v551, 8);
      }
      uint64_t v380 = v522;
      uint64_t v522 = 0;
      if (v380) {
        MEMORY[0x1D25D9CB0](v380, 0x1000C8052888210);
      }
      unsigned int v205 = v506 + 1;
    }
    while (*(_DWORD *)&v554[8] != v506 + 1);
LABEL_604:
    unsigned int v389 = *(_DWORD **)(v191 + 32);
    if (v389[2] != 2) {
      goto LABEL_605;
    }
    if (!*((void *)v389 - 1)) {
      goto LABEL_605;
    }
    LexicalScope = llvm::LexicalScopes::findLexicalScope((int8x8_t *)&v528, (const llvm::DILocation *)v389);
    if (!LexicalScope) {
      goto LABEL_605;
    }
    int v401 = LexicalScope;
    sub_1CC2ECFB4((uint64_t)&v564, v191 + 200);
    uint64_t v402 = *((unsigned int *)v401 + 22);
    if (!v402) {
      goto LABEL_715;
    }
    unint64_t v403 = 0;
    uint64_t v404 = (unint64_t *)v401[10];
    BOOL v405 = &v404[2 * v402];
    uint64_t v507 = v191 + 408;
    while (2)
    {
      unint64_t v406 = *v404;
      __int16 v407 = *(_WORD *)(*v404 + 44);
      unint64_t v408 = *v404;
      if ((v407 & 4) != 0)
      {
        do
          unint64_t v408 = *(void *)v408 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v408 + 44) & 4) != 0);
      }
      if ((v407 & 8) != 0)
      {
        do
          unint64_t v406 = *(void *)(v406 + 8);
        while ((*(_WORD *)(v406 + 44) & 8) != 0);
      }
      unint64_t v409 = *(void *)(v406 + 8);
      if (v408 != v409)
      {
        while (1)
        {
          unsigned int v410 = **(unsigned __int16 **)(v408 + 16);
          BOOL v70 = v410 > 0x17;
          int v411 = (1 << v410) & 0x83E000;
          if (v70 || v411 == 0) {
            break;
          }
          unint64_t v408 = *(void *)(v408 + 8);
          if (v408 == v409)
          {
            unint64_t v408 = v409;
            break;
          }
        }
      }
      uint64_t v413 = *(void *)(v508 + 288);
      uint64_t v414 = *(void *)(v413 + 368);
      uint64_t v415 = *(unsigned int *)(v413 + 384);
      if (v415)
      {
        LODWORD(v416) = ((v408 >> 4) ^ (v408 >> 9)) & (v415 - 1);
        unsigned int v417 = (uint64_t *)(v414 + 16 * v416);
        uint64_t v418 = *v417;
        if (v408 != *v417)
        {
          int v419 = 1;
          while (v418 != -4096)
          {
            int v420 = v416 + v419++;
            uint64_t v416 = v420 & (v415 - 1);
            uint64_t v418 = *(void *)(v414 + 16 * v416);
            if (v408 == v418)
            {
              unsigned int v417 = (uint64_t *)(v414 + 16 * v416);
              goto LABEL_642;
            }
          }
          goto LABEL_641;
        }
      }
      else
      {
LABEL_641:
        unsigned int v417 = (uint64_t *)(v414 + 16 * v415);
      }
LABEL_642:
      uint64_t v421 = v417[1];
      uint64_t v542 = v421;
      unint64_t v422 = v404[1];
      __int16 v423 = *(_WORD *)(v422 + 44);
      unint64_t v424 = v422;
      if ((v423 & 4) != 0)
      {
        do
          unint64_t v424 = *(void *)v424 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v424 + 44) & 4) != 0);
      }
      if ((v423 & 8) != 0)
      {
        do
          unint64_t v422 = *(void *)(v422 + 8);
        while ((*(_WORD *)(v422 + 44) & 8) != 0);
      }
      unint64_t v425 = *(void *)(v422 + 8);
      if (v424 != v425)
      {
        while (1)
        {
          unsigned int v426 = **(unsigned __int16 **)(v424 + 16);
          BOOL v70 = v426 > 0x17;
          int v427 = (1 << v426) & 0x83E000;
          if (v70 || v427 == 0) {
            break;
          }
          unint64_t v424 = *(void *)(v424 + 8);
          if (v424 == v425)
          {
            unint64_t v424 = v425;
            break;
          }
        }
      }
      if (v415)
      {
        LODWORD(v429) = ((v424 >> 4) ^ (v424 >> 9)) & (v415 - 1);
        uint64_t v430 = (uint64_t *)(v414 + 16 * v429);
        uint64_t v431 = *v430;
        if (v424 != *v430)
        {
          int v432 = 1;
          while (v431 != -4096)
          {
            int v433 = v429 + v432++;
            uint64_t v429 = v433 & (v415 - 1);
            uint64_t v431 = *(void *)(v414 + 16 * v429);
            if (v424 == v431)
            {
              uint64_t v430 = (uint64_t *)(v414 + 16 * v429);
              goto LABEL_658;
            }
          }
          goto LABEL_657;
        }
      }
      else
      {
LABEL_657:
        uint64_t v430 = (uint64_t *)(v414 + 16 * v415);
      }
LABEL_658:
      uint64_t v434 = v430[1];
      uint64_t v435 = *(void *)(*v404 + 24);
      if (*(void *)(v435 + 56) == *v404)
      {
        unsigned int v436 = v415 - 1;
        unint64_t v437 = *v404;
        while (v437 != *v404)
        {
          unint64_t v437 = *(void *)v437 & 0xFFFFFFFFFFFFFFF8;
          if (!v437 || (*(unsigned char *)v437 & 4) == 0)
          {
            while ((*(_WORD *)(v437 + 44) & 4) != 0)
              unint64_t v437 = *(void *)v437 & 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v438 = (uint64_t *)(v414 + 16 * v415);
          if (v415)
          {
            LODWORD(v439) = ((v437 >> 4) ^ (v437 >> 9)) & v436;
            uint64_t v438 = (uint64_t *)(v414 + 16 * v439);
            uint64_t v440 = *v438;
            if (v437 != *v438)
            {
              int v441 = 1;
              while (v440 != -4096)
              {
                int v442 = v439 + v441++;
                uint64_t v439 = v442 & v436;
                uint64_t v440 = *(void *)(v414 + 16 * v439);
                if (v437 == v440)
                {
                  uint64_t v438 = (uint64_t *)(v414 + 16 * v439);
                  goto LABEL_672;
                }
              }
              uint64_t v438 = (uint64_t *)(v414 + 16 * v415);
            }
          }
LABEL_672:
          if (v438 != (uint64_t *)(v414 + 16 * v415))
          {
            BOOL v443 = v438 + 1;
            goto LABEL_674;
          }
        }
        BOOL v443 = (uint64_t *)(*(void *)(v413 + 392) + 16 * *(unsigned int *)(v435 + 24));
LABEL_674:
        uint64_t v421 = *v443;
        uint64_t v542 = *v443;
      }
      if (v403 >= 8)
      {
        uint64_t v444 = *((void *)&v564 + 1) + 16 * v565[0];
        uint64_t v445 = *(void *)(v444 - 16);
        uint64_t v446 = *(unsigned int *)(v444 - 4);
        if (((*(void *)(v445 + 16 * v446) >> 1) & 3 | *(_DWORD *)((*(void *)(v445 + 16 * v446) & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 24)) < (*(_DWORD *)((v403 & 0xFFFFFFFFFFFFFFF8) + 24) | (v403 >> 1) & 3))
        {
          uint64_t v447 = *(void *)(v445 + 16 * v446 + 8);
          sub_1CC2EA3E8((uint64_t)&v550, v445 + 24 * v446 + 64);
          sub_1CC2ED32C((uint64_t)&v564, v403);
          sub_1CC2ED240((uint64_t)&v564);
          uint64_t v448 = v542;
          if (((v542 >> 1) & 3 | *(_DWORD *)((v542 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v447 & 0xFFFFFFFFFFFFFFF8) + 24) | (v447 >> 1) & 3))
          {
            sub_1CC2EA3E8((uint64_t)&v559, (uint64_t)&v550);
            sub_1CC2E9FA4((uint64_t)&v564, v448, v447, (uint64_t)&v559);
            uint64_t v449 = v559;
            uint64_t v559 = 0;
            if (v449) {
              MEMORY[0x1D25D9CB0](v449, 0x1000C8052888210);
            }
          }
          uint64_t v450 = v550;
          uint64_t v550 = 0;
          if (v450) {
            MEMORY[0x1D25D9CB0](v450, 0x1000C8052888210);
          }
          uint64_t v421 = v542;
        }
      }
      sub_1CC2ED36C(&v564, v421);
      if (!v565[0] || *(_DWORD *)(*((void *)&v564 + 1) + 12) >= *(_DWORD *)(*((void *)&v564 + 1) + 8)) {
        goto LABEL_715;
      }
      uint64_t v451 = (void *)(*(void *)(*((void *)&v564 + 1) + 16 * v565[0] - 16)
                      + 16 * *(unsigned int *)(*((void *)&v564 + 1) + 16 * v565[0] - 4));
      if (((*v451 >> 1) & 3 | *(_DWORD *)((*v451 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v542 & 0xFFFFFFFFFFFFFFF8) + 24) | (v542 >> 1) & 3))
      {
        *uint64_t v451 = v542;
        if (!*(void *)(v191 + 424))
        {
          uint64_t v452 = *(unsigned int *)(v191 + 384);
          if (!v452)
          {
LABEL_688:
            if (v452 >= *(_DWORD *)(v191 + 388)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v191 + 376) + 8 * v452) = v542;
            ++*(_DWORD *)(v191 + 384);
            goto LABEL_690;
          }
          uint64_t v454 = 8 * v452;
          unsigned int v455 = *(void **)(v191 + 376);
          while (*v455 != v542)
          {
            ++v455;
            v454 -= 8;
            if (!v454) {
              goto LABEL_706;
            }
          }
          if (v454) {
            goto LABEL_690;
          }
LABEL_706:
          if (v452 < 2) {
            goto LABEL_688;
          }
          do
          {
            uint64_t v456 = (uint64_t *)(*(void *)(v191 + 376) + 8 * v452 - 8);
            sub_1CBB26A0C(v507, v456, v456);
            LODWORD(v452) = *(_DWORD *)(v191 + 384) - 1;
            *(_DWORD *)(v191 + 384) = v452;
          }
          while (v452);
        }
        sub_1CBB26A0C(v507, &v542, &v542);
      }
LABEL_690:
      uint64_t v453 = *(void *)((v434 & 0xFFFFFFFFFFFFFFF8) + 8);
      unint64_t v403 = v453 & 0xFFFFFFFFFFFFFFF9 | v434 & 6;
      sub_1CC2ED36C(&v564, v403);
      if (!v565[0] || *(_DWORD *)(*((void *)&v564 + 1) + 12) >= *(_DWORD *)(*((void *)&v564 + 1) + 8)) {
        goto LABEL_715;
      }
      v404 += 2;
      if (v404 != v405) {
        continue;
      }
      break;
    }
    if (v403 >= 8)
    {
      uint64_t v457 = *(void *)(*(void *)(*((void *)&v564 + 1) + 16 * v565[0] - 16)
                       + 16 * *(unsigned int *)(*((void *)&v564 + 1) + 16 * v565[0] - 4));
      if (((v457 >> 1) & 3 | *(_DWORD *)((v457 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v453 & 0xFFFFFFFFFFFFFFF8) + 24) | ((v434 & 6) >> 1))) {
        sub_1CC2ED32C((uint64_t)&v564, v453 & 0xFFFFFFFFFFFFFFF9 | v434 & 6);
      }
    }
LABEL_715:
    if (*((unsigned int **)&v564 + 1) != &v565[2]) {
      free(*((void **)&v564 + 1));
    }
LABEL_605:
    unint64_t v390 = *(unsigned char **)v554;
    if (*(_DWORD *)&v554[8])
    {
      uint64_t v391 = *(void *)v554 - 24;
      uint64_t v392 = 32 * *(unsigned int *)&v554[8];
      uint64_t v49 = v502;
      do
      {
        uint64_t v393 = *(void *)(v391 + v392);
        *(void *)(v391 + v392) = 0;
        if (v393) {
          MEMORY[0x1D25D9CB0](v393, 0x1000C8052888210);
        }
        v392 -= 32;
      }
      while (v392);
      unint64_t v390 = *(unsigned char **)v554;
    }
    else
    {
      uint64_t v49 = v502;
    }
    if (v390 != &v554[16]) {
      free(v390);
    }
    uint64_t v394 = *(void *)(*(void *)(v49 + 976) + 8 * v498);
    uint64_t v395 = *(unsigned int *)(v394 + 64);
    if (v395)
    {
      uint64_t v396 = 0;
      uint64_t v397 = 32 * v395;
      do
      {
        uint64_t v398 = *(void *)(v394 + 56);
        if (!*(unsigned char *)(v398 + v396))
        {
          int v399 = *(_DWORD *)(v398 + v396 + 4);
          if (v399 < 0) {
            sub_1CC2ED8DC((_DWORD *)v49, v399, v394);
          }
        }
        v396 += 32;
      }
      while (v397 != v396);
    }
    uint64_t v189 = v498 + 1;
  }
  while (v498 + 1 != v497);
LABEL_717:
  sub_1CC2EDB5C((uint64_t)&v528);
  uint64_t v458 = *(void *)(v49 + 112);
  uint64_t v459 = *(void *)(v458 + 1096);
  uint64_t v460 = *(unsigned int *)(v458 + 1112);
  int v461 = (unsigned int *)(v459 + 24 * v460);
  if (*(_DWORD *)(v458 + 1104))
  {
    char v46 = v496;
    if (v460)
    {
      uint64_t v462 = 24 * v460;
      unsigned int v463 = *(unsigned int **)(v458 + 1096);
      while (*v463 >= 0xFFFFFFFE)
      {
        v463 += 6;
        v462 -= 24;
        if (!v462)
        {
          unsigned int v463 = (unsigned int *)(v459 + 24 * v460);
          break;
        }
      }
    }
    else
    {
      unsigned int v463 = *(unsigned int **)(v458 + 1096);
    }
  }
  else
  {
    unsigned int v463 = (unsigned int *)(v459 + 24 * v460);
    char v46 = v496;
  }
  v464 = (unsigned int *)(v459 + 24 * v460);
  if (v463 != v464)
  {
    uint64_t v465 = *(void *)(*(void *)(v502 + 120) + 288);
    int v466 = (void *)(v502 + 144);
    uint64_t v467 = v502 + 160;
    do
    {
      uint64_t v468 = *((void *)v463 + 1);
      uint64_t v469 = *((void *)v463 + 2);
      *(_DWORD *)uint64_t v554 = v469;
      uint64_t v470 = *(void *)(*(void *)(v465 + 392) + 16 * *(unsigned int *)(v468 + 24));
      unsigned int v471 = *v463;
      uint64_t v472 = *v466;
      uint64_t v473 = v466;
      uint64_t v474 = v466;
      if (*v466)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v474 = (void *)v472;
            unsigned int v475 = *(_DWORD *)(v472 + 32);
            if (v471 >= v475) {
              break;
            }
            uint64_t v472 = *v474;
            uint64_t v473 = v474;
            if (!*v474) {
              goto LABEL_734;
            }
          }
          if (v475 >= v471) {
            break;
          }
          uint64_t v472 = v474[1];
          if (!v472)
          {
            uint64_t v473 = v474 + 1;
            goto LABEL_734;
          }
        }
      }
      else
      {
LABEL_734:
        uint64_t v515 = v469;
        uint64_t v476 = operator new(0x38uLL);
        v476[8] = v471;
        *((void *)v476 + 5) = v470;
        *((void *)v476 + 6) = v515;
        *(void *)uint64_t v476 = 0;
        *((void *)v476 + 1) = 0;
        *((void *)v476 + 2) = v474;
        *uint64_t v473 = v476;
        uint64_t v477 = **(void **)(v502 + 136);
        if (v477)
        {
          *(void *)(v502 + 136) = v477;
          uint64_t v476 = (_DWORD *)*v473;
        }
        sub_1CB8358B8(*(uint64_t **)(v502 + 144), (uint64_t *)v476);
        ++*(void *)(v502 + 152);
      }
      unint64_t v478 = sub_1CD5194D8(v467, (int *)v554);
      int v479 = v478;
      unsigned int v481 = (char *)v478[2];
      unint64_t v480 = v478[3];
      if ((unint64_t)v481 >= v480)
      {
        unsigned int v483 = (char *)v478[1];
        uint64_t v484 = (v481 - v483) >> 2;
        unint64_t v485 = v484 + 1;
        if ((unint64_t)(v484 + 1) >> 62) {
          abort();
        }
        unsigned int v486 = v464;
        uint64_t v487 = v467;
        uint64_t v488 = v465;
        uint64_t v489 = v480 - (void)v483;
        if (v489 >> 1 > v485) {
          unint64_t v485 = v489 >> 1;
        }
        if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v490 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v490 = v485;
        }
        if (v490)
        {
          if (v490 >> 62) {
            sub_1CB833614();
          }
          unint64_t v491 = (char *)operator new(4 * v490);
        }
        else
        {
          unint64_t v491 = 0;
        }
        uint64_t v492 = &v491[4 * v484];
        *(_DWORD *)uint64_t v492 = *v463;
        unsigned int v482 = v492 + 4;
        while (v481 != v483)
        {
          int v493 = *((_DWORD *)v481 - 1);
          v481 -= 4;
          *((_DWORD *)v492 - 1) = v493;
          v492 -= 4;
        }
        v479[1] = v492;
        v479[2] = v482;
        v479[3] = &v491[4 * v490];
        if (v483) {
          operator delete(v483);
        }
        uint64_t v465 = v488;
        uint64_t v467 = v487;
        v464 = v486;
        int v466 = (void *)(v502 + 144);
      }
      else
      {
        *(_DWORD *)unsigned int v481 = *v463;
        unsigned int v482 = v481 + 4;
      }
      v479[2] = v482;
      unint64_t v494 = v463 + 6;
      char v46 = v496;
      while (v494 != v461)
      {
        unsigned int v495 = *v494;
        v494 += 6;
        if (v495 <= 0xFFFFFFFD)
        {
          unsigned int v463 = v494 - 6;
          goto LABEL_760;
        }
      }
      unsigned int v463 = v461;
LABEL_760:
      ;
    }
    while (v463 != v464);
  }
  *(unsigned char *)(v502 + 969) = v46 & 1;
  return v46 & 1;
}

void sub_1CC2E4D80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 248);
  if (v1) {
    sub_1CC2E4D90(v1);
  }
}

void sub_1CC2E4D90(uint64_t a1)
{
  uint64_t v3 = a1 + 144;
  int8x8_t v2 = *(void **)(a1 + 144);
  *(void *)(v3 - 32) = 0;
  sub_1CBB0D544(v2);
  *(void *)(v3 - 8) = v3;
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  int v4 = *(_DWORD *)(v3 + 24);
  if (v4 || *(_DWORD *)(a1 + 172))
  {
    uint64_t v36 = (unsigned int *)(v3 + 16);
    uint64_t v37 = *(unsigned int *)(a1 + 176);
    if (v37 > 4 * v4 && v37 >= 0x41)
    {
      sub_1CD5198CC(v36);
      goto LABEL_3;
    }
    if (!v37)
    {
LABEL_60:
      *(void *)(a1 + 168) = 0;
      goto LABEL_3;
    }
    uint64_t v38 = *(void *)v36;
    uint64_t v39 = 32 * v37;
    while (1)
    {
      if (*(_DWORD *)v38 == -2) {
        goto LABEL_58;
      }
      if (*(_DWORD *)v38 != -1) {
        break;
      }
LABEL_59:
      v38 += 32;
      v39 -= 32;
      if (!v39) {
        goto LABEL_60;
      }
    }
    unint64_t v40 = *(void **)(v38 + 8);
    if (v40)
    {
      *(void *)(v38 + 16) = v40;
      operator delete(v40);
    }
LABEL_58:
    *(_DWORD *)uint64_t v38 = -1;
    goto LABEL_59;
  }
LABEL_3:
  *(_DWORD *)(a1 + 192) = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 984);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    uint64_t v7 = *(void *)(a1 + 976) - 8;
    do
    {
      sub_1CC2E8F90((uint64_t *)(v7 + v6));
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 984) = 0;
  uint64_t v8 = *(unsigned int *)(a1 + 1064);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = *(void *)(a1 + 1056) - 8;
    do
    {
      sub_1CC2ECEE4((uint64_t *)(v10 + v9));
      v9 -= 8;
    }
    while (v9);
  }
  *(_DWORD *)(a1 + 1064) = 0;
  unint64_t v11 = (void *)(a1 + 1088);
  int v12 = *(_DWORD *)(a1 + 1096);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 1104);
    if (v13 > 4 * v12 && v13 >= 0x41)
    {
      BOOL v14 = (_DWORD *)*v11;
      int v15 = 1 << (33 - __clz(v12 - 1));
      if (v15 <= 64) {
        int v16 = 64;
      }
      else {
        int v16 = v15;
      }
      if (v16 == v13)
      {
        *(void *)(a1 + 1096) = 0;
        uint64_t v17 = 16 * v13;
        do
        {
          *BOOL v14 = -1;
          v14 += 4;
          v17 -= 16;
        }
        while (v17);
      }
      else
      {
        MEMORY[0x1D25D9CD0](v14, 8);
        unint64_t v26 = (4 * v16 / 3u + 1) | ((unint64_t)(4 * v16 / 3u + 1) >> 1);
        unint64_t v27 = v26 | (v26 >> 2) | ((v26 | (v26 >> 2)) >> 4);
        LODWORD(v27) = (((v27 | (v27 >> 8)) >> 16) | v27 | (v27 >> 8)) + 1;
        *(_DWORD *)(a1 + 1104) = v27;
        uint64_t v28 = operator new(16 * v27, (std::align_val_t)8uLL);
        *(void *)(a1 + 1088) = v28;
        *(void *)(a1 + 1096) = 0;
        uint64_t v29 = *(unsigned int *)(a1 + 1104);
        if (v29)
        {
          uint64_t v30 = 16 * v29;
          do
          {
            _DWORD *v28 = -1;
            v28 += 4;
            v30 -= 16;
          }
          while (v30);
        }
      }
      goto LABEL_26;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1100)) {
      goto LABEL_26;
    }
    LODWORD(v13) = *(_DWORD *)(a1 + 1104);
    if (v13 > 0x40)
    {
      MEMORY[0x1D25D9CD0](*v11, 8);
      void *v11 = 0;
      *(void *)(a1 + 1096) = 0;
      *(_DWORD *)(a1 + 1104) = 0;
      goto LABEL_26;
    }
  }
  if (v13)
  {
    uint64_t v18 = (_DWORD *)*v11;
    uint64_t v19 = 16 * v13;
    do
    {
      _DWORD *v18 = -1;
      v18 += 4;
      v19 -= 16;
    }
    while (v19);
  }
  *(void *)(a1 + 1096) = 0;
LABEL_26:
  int v20 = *(_DWORD *)(a1 + 1120);
  if (v20 || *(_DWORD *)(a1 + 1124))
  {
    unsigned int v21 = *(_DWORD *)(a1 + 1128);
    uint64_t v22 = *(void *)(a1 + 1112);
    uint64_t v23 = v22 + 48 * v21;
    if (v21 <= 4 * v20 || v21 < 0x41)
    {
      if (v21)
      {
        do
        {
          *(void *)uint64_t v22 = 0;
          *(unsigned char *)(v22 + 8) = 0;
          *(unsigned char *)(v22 + 24) = 0;
          *(void *)(v22 + 32) = 0;
          v22 += 48;
        }
        while (v22 != v23);
      }
      *(void *)(a1 + 1120) = 0;
    }
    else if (v20)
    {
      int v24 = 1 << (33 - __clz(v20 - 1));
      if (v24 <= 64) {
        int v25 = 64;
      }
      else {
        int v25 = v24;
      }
      if (v25 == v21)
      {
        *(void *)(a1 + 1120) = 0;
        do
        {
          *(void *)uint64_t v22 = 0;
          *(unsigned char *)(v22 + 8) = 0;
          *(unsigned char *)(v22 + 24) = 0;
          *(void *)(v22 + 32) = 0;
          v22 += 48;
        }
        while (v22 != v23);
      }
      else
      {
        MEMORY[0x1D25D9CD0]();
        unint64_t v31 = (4 * v25 / 3u + 1) | ((unint64_t)(4 * v25 / 3u + 1) >> 1);
        unint64_t v32 = v31 | (v31 >> 2) | ((v31 | (v31 >> 2)) >> 4);
        LODWORD(v32) = (((v32 | (v32 >> 8)) >> 16) | v32 | (v32 >> 8)) + 1;
        *(_DWORD *)(a1 + 1128) = v32;
        uint64_t v33 = (char *)operator new(48 * v32, (std::align_val_t)8uLL);
        *(void *)(a1 + 1112) = v33;
        *(void *)(a1 + 1120) = 0;
        int v34 = *(_DWORD *)(a1 + 1128);
        if (v34)
        {
          uint64_t v35 = &v33[48 * v34];
          do
          {
            *(void *)uint64_t v33 = 0;
            v33[8] = 0;
            v33[24] = 0;
            *((void *)v33 + 4) = 0;
            v33 += 48;
          }
          while (v33 != v35);
        }
      }
    }
    else
    {
      MEMORY[0x1D25D9CD0]();
      *(void *)(a1 + 1112) = 0;
      *(void *)(a1 + 1120) = 0;
      *(_DWORD *)(a1 + 1128) = 0;
    }
  }
  *(_WORD *)(a1 + 968) = 0;
}

void sub_1CC2E5130(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260C810;
  uint64_t v2 = *((void *)a1 + 31);
  if (v2)
  {
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 1112), 8);
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 1088), 8);
    uint64_t v3 = *(char **)(v2 + 1056);
    uint64_t v4 = *(unsigned int *)(v2 + 1064);
    if (v4)
    {
      uint64_t v8 = 8 * v4;
      uint64_t v9 = v3 - 8;
      do
      {
        sub_1CC2ECEE4((uint64_t *)&v9[v8]);
        v8 -= 8;
      }
      while (v8);
      uint64_t v3 = *(char **)(v2 + 1056);
    }
    if (v3 != (char *)(v2 + 1072)) {
      free(v3);
    }
    uint64_t v5 = *(char **)(v2 + 976);
    uint64_t v6 = *(unsigned int *)(v2 + 984);
    if (v6)
    {
      uint64_t v10 = 8 * v6;
      unint64_t v11 = v5 - 8;
      do
      {
        sub_1CC2E8F90((uint64_t *)&v11[v10]);
        v10 -= 8;
      }
      while (v10);
      uint64_t v5 = *(char **)(v2 + 976);
    }
    if (v5 != (char *)(v2 + 992)) {
      free(v5);
    }
    uint64_t v7 = *(void **)(v2 + 184);
    if (v7 != (void *)(v2 + 200)) {
      free(v7);
    }
    sub_1CD519988((unsigned int *)(v2 + 160));
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 160), 8);
    sub_1CBB0D544(*(void **)(v2 + 144));
    *(void *)(v2 + 8) = 0;
    sub_1CBFFBA64(v2 + 16);
    MEMORY[0x1D25D9CE0](v2, 0x10F0C403A5B8018);
  }

  sub_1CBA0E6AC(a1);
}

void sub_1CC2E527C(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  v195[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 248);
  if (!v4) {
    return;
  }
  uint64_t v5 = a3;
  uint64_t v166 = *(void *)(a1 + 248);
  uint64_t v8 = *(void *)(v4 + 160);
  uint64_t v7 = v4 + 160;
  uint64_t v6 = v8;
  uint64_t v9 = *(unsigned int *)(v7 + 16);
  if (v9)
  {
    uint64_t v157 = (v9 - 1) & (37 * a2);
    uint64_t v10 = (int *)(v6 + 32 * v157);
    int v158 = *v10;
    if (*v10 == a2) {
      goto LABEL_4;
    }
    uint64_t v159 = v7;
    int v160 = 1;
    uint64_t v5 = a3;
    while (1)
    {
      uint64_t v7 = v159;
      if (v158 == -1) {
        break;
      }
      int v161 = v157 + v160++;
      uint64_t v157 = v161 & (v9 - 1);
      int v158 = *(_DWORD *)(v6 + 32 * v157);
      if (v158 == a2)
      {
        uint64_t v10 = (int *)(v6 + 32 * v157);
        uint64_t v5 = a3;
        uint64_t v7 = v159;
        goto LABEL_4;
      }
    }
  }
  uint64_t v10 = (int *)(v6 + 32 * v9);
LABEL_4:
  if ((int *)(v6 + 32 * v9) != v10)
  {
    unint64_t v11 = (unsigned int *)*((void *)v10 + 1);
    int v12 = (unsigned int *)*((void *)v10 + 2);
    if (v11 != v12)
    {
      *(void *)__c = v10;
      uint64_t v175 = v7;
      uint64_t v13 = 0;
      BOOL v14 = 0;
      int v15 = 0;
      uint64_t v16 = *(void *)(a1 + 248);
      uint64_t v17 = (void *)(v166 + 144);
      uint64_t v18 = (unsigned int *)&v5[a4];
      int v178 = (unsigned int *)*((void *)v10 + 2);
      while (1)
      {
        uint64_t v19 = *v11;
        uint64_t v20 = *v17;
        if (!*v17) {
          goto LABEL_18;
        }
        unsigned int v21 = v17;
        do
        {
          unsigned int v22 = *(_DWORD *)(v20 + 32);
          BOOL v23 = v22 >= v19;
          if (v22 >= v19) {
            int v24 = (uint64_t *)v20;
          }
          else {
            int v24 = (uint64_t *)(v20 + 8);
          }
          if (v23) {
            unsigned int v21 = (void *)v20;
          }
          uint64_t v20 = *v24;
        }
        while (*v24);
        if (v21 == v17 || v19 < *((_DWORD *)v21 + 8)) {
LABEL_18:
        }
          unsigned int v21 = v17;
        if (!a4) {
          goto LABEL_59;
        }
        int v25 = a3;
        while (1)
        {
          uint64_t v26 = *v25;
          uint64_t v27 = *(void *)(v16 + 120);
          uint64_t v28 = (void *)(v27 + 408);
          unint64_t v29 = *(unsigned int *)(v27 + 416);
          BOOL v23 = (v26 & 0x7FFFFFFF) >= v29;
          unint64_t v30 = (v26 & 0x7FFFFFFF) - v29;
          if (v23)
          {
            sub_1CB9153B8((uint64_t)v28, v30 + 1, *(void *)(v27 + 424));
LABEL_39:
            operator new();
          }
          uint64_t v31 = *(void *)(*v28 + 8 * (v26 & 0x7FFFFFFF));
          if (!v31) {
            goto LABEL_39;
          }
          uint64_t v32 = v21[5];
          unsigned int v33 = *(_DWORD *)(v31 + 8);
          int v34 = *(void **)v31;
          if (!v33)
          {
            unsigned int v33 = 0;
            uint64_t v16 = v166;
LABEL_33:
            uint64_t v38 = &v34[3 * v33];
            goto LABEL_34;
          }
          uint64_t v35 = v34[3 * v33 - 2];
          unsigned int v36 = *(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24) | (v32 >> 1) & 3;
          unsigned int v37 = (v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24);
          uint64_t v38 = *(void **)v31;
          unint64_t v39 = *(unsigned int *)(v31 + 8);
          uint64_t v16 = v166;
          if (v36 >= v37) {
            goto LABEL_33;
          }
          do
          {
            unint64_t v40 = v39 >> 1;
            uint64_t v41 = v38[3 * (v39 >> 1) + 1];
            LODWORD(v41) = (v41 >> 1) & 3 | *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24);
            v39 -= (v39 >> 1) + 1;
            BOOL v42 = v36 >= v41;
            if (v36 >= v41) {
              unint64_t v43 = v40 + 1;
            }
            else {
              unint64_t v43 = 0;
            }
            v38 += 3 * v43;
            if (!v42) {
              unint64_t v39 = v40;
            }
          }
          while (v39);
LABEL_34:
          if (v38 != &v34[3 * v33]
            && ((*v38 >> 1) & 3 | *(_DWORD *)((*v38 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24) | (v32 >> 1) & 3))
          {
            break;
          }
          if (++v25 == (int *)v18) {
            goto LABEL_59;
          }
        }
        uint64_t v44 = v26 | (v19 << 32);
        if (v15 >= v13)
        {
          uint64_t v46 = ((char *)v15 - (char *)v14) >> 3;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61) {
LABEL_207:
          }
            abort();
          if (v13 - v14 > v47) {
            unint64_t v47 = v13 - v14;
          }
          if ((unint64_t)((char *)v13 - (char *)v14) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48)
          {
            if (v48 >> 61) {
LABEL_208:
            }
              sub_1CB833614();
            uint64_t v49 = v11;
            unint64_t v50 = v14;
            uint64_t v51 = (char *)operator new(8 * v48);
            BOOL v14 = v50;
            unint64_t v11 = v49;
            uint64_t v17 = (void *)(v166 + 144);
            int v12 = v178;
          }
          else
          {
            uint64_t v51 = 0;
          }
          uint64_t v52 = &v51[8 * v46];
          *(void *)uint64_t v52 = v44;
          uint64_t v45 = (int *)(v52 + 8);
          while (v15 != v14)
          {
            uint64_t v53 = *((void *)v15 - 1);
            v15 -= 2;
            *((void *)v52 - 1) = v53;
            v52 -= 8;
          }
          uint64_t v13 = (int *)&v51[8 * v48];
          if (v14)
          {
            uint64_t v54 = v11;
            uint64_t v55 = &v51[8 * v48];
            operator delete(v14);
            uint64_t v13 = (int *)v55;
            uint64_t v17 = (void *)(v166 + 144);
            int v12 = v178;
            unint64_t v11 = v54;
          }
          BOOL v14 = (int *)v52;
        }
        else
        {
          *(void *)int v15 = v44;
          uint64_t v45 = v15 + 2;
        }
        *((_DWORD *)v21 + 12) = v26;
        int v15 = v45;
        uint64_t v16 = v166;
LABEL_59:
        if (++v11 == v12)
        {
          uint64_t v10 = *(int **)__c;
          uint64_t v7 = v175;
          unint64_t v11 = *(unsigned int **)(*(void *)__c + 8);
          uint64_t v5 = a3;
          goto LABEL_62;
        }
      }
    }
    int v15 = 0;
    BOOL v14 = 0;
LABEL_62:
    uint64_t v56 = v14;
    if (v11)
    {
      *((void *)v10 + 2) = v11;
      operator delete(v11);
      BOOL v14 = v56;
    }
    int *v10 = -2;
    *(int32x2_t *)(v166 + 168) = vadd_s32(*(int32x2_t *)(v166 + 168), (int32x2_t)0x1FFFFFFFFLL);
    if (v14 != v15)
    {
      uint64_t v57 = v14;
      do
      {
        char v58 = sub_1CD5194D8(v7, v57);
        uint64_t v59 = v58;
        unsigned int v61 = (char *)v58[2];
        unint64_t v60 = v58[3];
        if ((unint64_t)v61 >= v60)
        {
          uint64_t v63 = (char *)v58[1];
          uint64_t v64 = (v61 - v63) >> 2;
          unint64_t v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 62) {
            goto LABEL_207;
          }
          uint64_t v66 = v7;
          uint64_t v67 = v60 - (void)v63;
          if (v67 >> 1 > v65) {
            unint64_t v65 = v67 >> 1;
          }
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v68 = v65;
          }
          if (v68)
          {
            if (v68 >> 62) {
              goto LABEL_208;
            }
            unsigned int v69 = (char *)operator new(4 * v68);
          }
          else
          {
            unsigned int v69 = 0;
          }
          BOOL v70 = &v69[4 * v64];
          *(_DWORD *)BOOL v70 = v57[1];
          unint64_t v62 = v70 + 4;
          while (v61 != v63)
          {
            int v71 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *((_DWORD *)v70 - 1) = v71;
            v70 -= 4;
          }
          v59[1] = v70;
          v59[2] = v62;
          v59[3] = &v69[4 * v68];
          if (v63) {
            operator delete(v63);
          }
          uint64_t v5 = a3;
          uint64_t v7 = v66;
        }
        else
        {
          *(_DWORD *)unsigned int v61 = v57[1];
          unint64_t v62 = v61 + 4;
          uint64_t v5 = a3;
        }
        v59[2] = v62;
        v57 += 2;
        BOOL v14 = v56;
      }
      while (v57 != v15);
    }
    if (v14) {
      operator delete(v14);
    }
  }
  uint64_t v72 = sub_1CC2EDC78(*(void *)(v166 + 1088), *(_DWORD *)(v166 + 1104), a2);
  if (v72)
  {
    uint64_t v73 = v72;
    char v162 = 0;
    uint64_t v74 = &v5[a4];
    uint64_t v171 = v74;
    do
    {
      LODWORD(v75) = *(_DWORD *)(v73 + 64);
      if (v75)
      {
        char v167 = 0;
        uint64_t v76 = *(void *)(v166 + 120);
        uint64_t v168 = v73 + 200;
        unint64_t v177 = (void *)(v76 + 408);
        uint64_t v172 = v76;
        uint64_t v170 = v73;
        do
        {
          uint64_t v75 = (v75 - 1);
          uint64_t v77 = *(void *)(v73 + 56);
          if (!*(unsigned char *)(v77 + 32 * v75) && *(_DWORD *)(v77 + 32 * v75 + 4) == a2)
          {
            uint64_t v186 = 0x400000000;
            uint64_t v184 = v168;
            uint64_t v185 = v187;
            if (a4)
            {
              char v169 = 0;
              int v78 = v5;
              *(void *)__ca = v75;
              do
              {
                uint64_t v79 = *v78 & 0x7FFFFFFF;
                uint64_t v80 = *(unsigned int *)(v76 + 416);
                if ((*v78 & 0x7FFFFFFFu) >= v80)
                {
                  sub_1CB9153B8((uint64_t)v177, v79 - v80 + 1, *(void *)(v76 + 424));
LABEL_147:
                  operator new();
                }
                uint64_t v81 = *(void *)(*v177 + 8 * v79);
                if (!v81) {
                  goto LABEL_147;
                }
                if (*(_DWORD *)(v81 + 8))
                {
                  sub_1CC2EA918((uint64_t)&v184, **(void **)v81);
                  uint64_t v82 = v186;
                  if (v186)
                  {
                    if (*((_DWORD *)v185 + 3) < *((_DWORD *)v185 + 2))
                    {
                      uint64_t v83 = *(void *)(*((void *)v185 + 2 * v186 - 2)
                                      + 16 * *((unsigned int *)v185 + 4 * v186 - 1));
                      uint64_t v179 = *(void *)v81 + 24 * *(unsigned int *)(v81 + 8);
                      unsigned int v84 = *(_DWORD *)((v83 & 0xFFFFFFFFFFFFFFF8) + 24) | (v83 >> 1) & 3;
                      if (v84 >= ((*(void *)(v179 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v179 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 24)))
                      {
                        uint64_t v85 = (uint64_t *)(*(void *)v81 + 24 * *(unsigned int *)(v81 + 8));
                      }
                      else
                      {
                        uint64_t v85 = (uint64_t *)(*(void *)v81 - 24);
                        do
                        {
                          unsigned int v86 = (v85[4] >> 1) & 3 | *(_DWORD *)((v85[4] & 0xFFFFFFFFFFFFFFF8) + 24);
                          v85 += 3;
                        }
                        while (v86 <= v84);
                      }
                      int v176 = -1;
                      do
                      {
                        if (v85 == (uint64_t *)v179 || *((_DWORD *)v185 + 3) >= *((_DWORD *)v185 + 2)) {
                          break;
                        }
                        uint64_t v87 = (char *)v185 + 16 * v82;
                        uint64_t v88 = *((void *)v87 - 2);
                        uint64_t v89 = *((unsigned int *)v87 - 1);
                        uint64_t v90 = (uint64_t *)(*(void *)v81 + 24 * *(unsigned int *)(v81 + 8));
                        unsigned int v91 = *(_DWORD *)((*(void *)(v88 + 16 * v89) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(void *)(v88 + 16 * v89) >> 1) & 3;
                        if (v91 < ((*(v90 - 2) >> 1) & 3 | *(_DWORD *)((*(v90 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                    + 24)))
                        {
                          uint64_t v90 = v85 - 3;
                          do
                          {
                            unsigned int v92 = (v90[4] >> 1) & 3 | *(_DWORD *)((v90[4] & 0xFFFFFFFFFFFFFFF8) + 24);
                            v90 += 3;
                          }
                          while (v92 <= v91);
                        }
                        if (v90 == (uint64_t *)v179) {
                          break;
                        }
                        uint64_t v93 = v88 + 24 * v89;
                        uint64_t v94 = *(__int32 **)(v93 + 64);
                        size_t v95 = *(unsigned char *)(v93 + 72) & 0x3F;
                        uint64_t v96 = wmemchr(v94, v75, v95);
                        if (v96) {
                          uint64_t v97 = v96;
                        }
                        else {
                          uint64_t v97 = &v94[v95];
                        }
                        uint64_t v98 = v185;
                        uint64_t v99 = v186;
                        if (v95 != v97 - v94)
                        {
                          BOOL v100 = (char *)v185 + 16 * v186;
                          uint64_t v101 = *((void *)v100 - 2);
                          uint64_t v102 = *((unsigned int *)v100 - 1);
                          uint64_t v103 = *(void *)(v101 + 16 * v102 + 8);
                          if (((*v90 >> 1) & 3 | *(_DWORD *)((*v90 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 24) | (v103 >> 1) & 3))
                          {
                            __int32 v104 = v176;
                            if (v176 == -1)
                            {
                              int v105 = *(_DWORD *)(v81 + 112);
                              uint64_t v193 = 0;
                              LODWORD(v192) = 0;
                              HIDWORD(v192) = v105;
                              uint64_t v194 = 0;
                              v195[0] = 0;
                              LODWORD(v192) = *(_DWORD *)(*(void *)(v170 + 56) + 32 * v75) & 0xFFF00;
                              __int32 v104 = sub_1CC2E9B2C(v170, (llvm::MachineOperand *)&v192);
                              uint64_t v106 = (char *)v185 + 16 * v186;
                              uint64_t v101 = *((void *)v106 - 2);
                              uint64_t v102 = *((unsigned int *)v106 - 1);
                              uint64_t v103 = *(void *)(v101 + 16 * v102 + 8);
                              char v169 = 1;
                            }
                            uint64_t v107 = *(void *)(v101 + 16 * v102);
                            sub_1CC2EA3E8((uint64_t)&v192, v101 + 24 * v102 + 64);
                            unsigned int v108 = (v107 >> 1) & 3;
                            if ((*(_DWORD *)((v107 & 0xFFFFFFFFFFFFFFF8) + 24) | v108) < ((*v90 >> 1) & 3 | *(_DWORD *)((*v90 & 0xFFFFFFFFFFFFFFF8) + 24))) {
                              *(void *)(*((void *)v185 + 2 * v186 - 2)
                            }
                                        + 16 * *((unsigned int *)v185 + 4 * v186 - 1)) = *v90;
                            uint64_t v109 = v90[1];
                            unsigned int v110 = (v103 >> 1) & 3;
                            if ((*(_DWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 24) | v110) > ((v109 >> 1) & 3 | *(_DWORD *)((v109 & 0xFFFFFFFFFFFFFFF8) + 24))) {
                              sub_1CC2ED32C((uint64_t)&v184, v109);
                            }
                            int v176 = v104;
                            sub_1CC2ED794((uint64_t)v182, (uint64_t)&v192, __ca[0], v104);
                            sub_1CC2EA4B8((uint64_t)&v184, (uint64_t)v182);
                            uint64_t v111 = v182[0];
                            v182[0] = 0;
                            if (v111) {
                              MEMORY[0x1D25D9CB0](v111, 0x1000C8052888210);
                            }
                            long long v112 = (char *)v185 + 16 * v186;
                            uint64_t v113 = *((void *)v112 - 2);
                            uint64_t v114 = *((unsigned int *)v112 - 1);
                            uint64_t v115 = *(void *)(v113 + 16 * v114);
                            uint64_t v75 = *(void *)__ca;
                            if ((*(_DWORD *)((v107 & 0xFFFFFFFFFFFFFFF8) + 24) | v108) < ((v115 >> 1) & 3 | *(_DWORD *)((v115 & 0xFFFFFFFFFFFFFFF8) + 24)))
                            {
                              sub_1CC2EA3E8((uint64_t)v181, (uint64_t)&v192);
                              sub_1CC2E9FA4((uint64_t)&v184, v107, v115, (uint64_t)v181);
                              uint64_t v116 = v181[0];
                              v181[0] = 0;
                              if (v116) {
                                MEMORY[0x1D25D9CB0](v116, 0x1000C8052888210);
                              }
                              sub_1CC2ED240((uint64_t)&v184);
                              int v117 = (char *)v185 + 16 * v186;
                              uint64_t v113 = *((void *)v117 - 2);
                              uint64_t v114 = *((unsigned int *)v117 - 1);
                            }
                            uint64_t v74 = v171;
                            uint64_t v76 = v172;
                            if ((*(_DWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 24) | v110) > ((*(void *)(v113 + 16 * v114 + 8) >> 1) & 3 | *(_DWORD *)((*(void *)(v113 + 16 * v114 + 8) & 0xFFFFFFFFFFFFFFF8) + 24)))
                            {
                              sub_1CC2ED240((uint64_t)&v184);
                              uint64_t v118 = v90[1];
                              sub_1CC2EA3E8((uint64_t)v180, (uint64_t)&v192);
                              sub_1CC2E9FA4((uint64_t)&v184, v118, v103, (uint64_t)v180);
                              uint64_t v119 = v180[0];
                              v180[0] = 0;
                              if (v119) {
                                MEMORY[0x1D25D9CB0](v119, 0x1000C8052888210);
                              }
                              sub_1CC2ECD94((unsigned int *)&v184);
                            }
                            uint64_t v120 = v192;
                            uint64_t v192 = 0;
                            if (v120) {
                              MEMORY[0x1D25D9CB0](v120, 0x1000C8052888210);
                            }
                            uint64_t v98 = v185;
                            uint64_t v99 = v186;
                          }
                        }
                        uint64_t v121 = *(void *)(v98[2 * v99 - 2] + 16 * HIDWORD(v98[2 * v99 - 1]) + 8);
                        if (((v90[1] >> 1) & 3 | *(_DWORD *)((v90[1] & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v121 & 0xFFFFFFFFFFFFFFF8) + 24) | (v121 >> 1) & 3))
                        {
                          sub_1CC2ED240((uint64_t)&v184);
                          uint64_t v82 = v186;
                          if (!v186 || *((_DWORD *)v185 + 3) >= *((_DWORD *)v185 + 2)) {
                            break;
                          }
                          uint64_t v122 = *(void *)(*((void *)v185 + 2 * v186 - 2)
                                           + 16 * *((unsigned int *)v185 + 4 * v186 - 1));
                          uint64_t v85 = (uint64_t *)(*(void *)v81 + 24 * *(unsigned int *)(v81 + 8));
                          unsigned int v123 = *(_DWORD *)((v122 & 0xFFFFFFFFFFFFFFF8) + 24) | (v122 >> 1) & 3;
                          if (v123 < ((*(v85 - 2) >> 1) & 3 | *(_DWORD *)((*(v85 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24)))
                          {
                            uint64_t v85 = v90 - 3;
                            do
                            {
                              unsigned int v124 = (v85[4] >> 1) & 3 | *(_DWORD *)((v85[4] & 0xFFFFFFFFFFFFFFF8) + 24);
                              v85 += 3;
                            }
                            while (v124 <= v123);
                          }
                        }
                        else
                        {
                          uint64_t v85 = v90 + 3;
                          if (v90 + 3 == (uint64_t *)v179) {
                            break;
                          }
                          sub_1CC2ED36C(&v184, *v85);
                          uint64_t v82 = v186;
                        }
                      }
                      while (v82);
                    }
                  }
                }
                ++v78;
              }
              while (v78 != v74);
            }
            else
            {
              char v169 = 0;
            }
            sub_1CC2ECFB4((uint64_t)&v188, v168);
            uint64_t v192 = v188;
            uint64_t v193 = v195;
            uint64_t v194 = 0x400000000;
            if (v190) {
              sub_1CC2D01B8((uint64_t)&v193, (uint64_t)&v189);
            }
            uint64_t v5 = a3;
            uint64_t v73 = v170;
            if (v189 != &v191) {
              free(v189);
            }
            while (1)
            {
              if (!v194 || v193[3] >= v193[2])
              {
                int v130 = 1;
                goto LABEL_162;
              }
              uint64_t v125 = *(void *)&v193[4 * v194 - 4]
                   + 24 * v193[4 * v194 - 1];
              unsigned int v126 = *(__int32 **)(v125 + 64);
              size_t v127 = *(unsigned char *)(v125 + 72) & 0x3F;
              unint64_t v128 = wmemchr(v126, v75, v127);
              uint64_t v129 = v128 ? v128 : &v126[v127];
              if (v127 != v129 - v126) {
                break;
              }
              sub_1CC2ED240((uint64_t)&v192);
            }
            int v130 = 0;
LABEL_162:
            if (v193 != (_DWORD *)v195) {
              free(v193);
            }
            if (v130)
            {
              uint64_t v131 = *(void *)(v170 + 56);
              uint64_t v132 = v131 + 32 * v75;
              uint64_t v133 = *(unsigned int *)(v170 + 64);
              uint64_t v134 = v131 + 32 * v133;
              if (v134 != v132 + 32)
              {
                memmove((void *)v132, (const void *)(v132 + 32), v134 - (v132 + 32));
                LODWORD(v133) = *(_DWORD *)(v170 + 64);
              }
              *(_DWORD *)(v170 + 64) = v133 - 1;
              sub_1CC2ECFB4((uint64_t)&v192, v168);
              while (v194 && v193[3] < v193[2])
              {
                uint64_t v135 = (char *)&v193[4 * v194];
                uint64_t v136 = *((void *)v135 - 2);
                unsigned int v137 = *((_DWORD *)v135 - 1);
                uint64_t v138 = v136 + 24 * v137;
                uint64_t v141 = *(_DWORD **)(v138 + 64);
                uint64_t v140 = v138 + 64;
                uint64_t v139 = v141;
                char v142 = (unsigned __int8 *)(v140 + 8);
                if ((*(unsigned char *)(v140 + 8) & 0x3F) != 0)
                {
                  uint64_t v143 = 4 * (*(unsigned char *)(v140 + 8) & 0x3F);
                  while (*v139 <= v75)
                  {
                    ++v139;
                    v143 -= 4;
                    if (!v143) {
                      goto LABEL_192;
                    }
                  }
                  int v188 = &v190;
                  uint64_t v189 = (void *)0x400000000;
                  unsigned int v144 = *v142;
                  unsigned int v145 = 0;
                  if ((v144 & 0x3F) != 0)
                  {
                    uint64_t v146 = *(unsigned int **)v140;
                    uint64_t v147 = 4 * (v144 & 0x3F);
                    do
                    {
                      unsigned int v148 = *v146;
                      BOOL v150 = *v146 != -1 && v148 > v75;
                      if (v145 >= HIDWORD(v189)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v188 + v145) = v148 - v150;
                      unsigned int v145 = v189 + 1;
                      LODWORD(v189) = v189 + 1;
                      ++v146;
                      v147 -= 4;
                    }
                    while (v147);
                    uint64_t v151 = (__int32 *)v188;
                    unsigned int v144 = *v142;
                    uint64_t v5 = a3;
                    uint64_t v73 = v170;
                    uint64_t v76 = v172;
                  }
                  else
                  {
                    uint64_t v151 = &v190;
                  }
                  sub_1CC2E9CCC((uint64_t)v183, v151, v145, (v144 >> 6) & 1, v144 >> 7, *(void *)(v136 + 24 * v137 + 80));
                  if (v188 != &v190) {
                    free(v188);
                  }
                  sub_1CC2EBE18(*(void *)&v193[4 * v194 - 4]+ 24 * v193[4 * v194 - 1]+ 64, (uint64_t)v183);
                  uint64_t v152 = v183[0];
                  v183[0] = 0;
                  if (v152) {
                    MEMORY[0x1D25D9CB0](v152, 0x1000C8052888210);
                  }
                }
LABEL_192:
                sub_1CC2ED240((uint64_t)&v192);
              }
              if (v193 != (_DWORD *)v195) {
                free(v193);
              }
            }
            if (v185 != v187) {
              free(v185);
            }
            v167 |= v169;
          }
        }
        while (v75);
      }
      else
      {
        char v167 = 0;
      }
      v162 |= v167;
      uint64_t v73 = *(void *)(v73 + 48);
    }
    while (v73);
    if (v162)
    {
      uint64_t v153 = sub_1CC2EDC78(*(void *)(v166 + 1088), *(_DWORD *)(v166 + 1104), a2);
      if (a4)
      {
        uint64_t v154 = v153;
        uint64_t v155 = 4 * a4;
        do
        {
          int v156 = *v5++;
          sub_1CC2ED8DC((_DWORD *)v166, v156, v154);
          v155 -= 4;
        }
        while (v155);
      }
    }
  }
}

uint64_t sub_1CC2E6324(uint64_t result, void *a2)
{
  uint64_t v415 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(result + 248);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 112);
    if (v3)
    {
      uint64_t v391 = 0;
      uint64_t v392 = 0;
      unsigned int v393 = 0;
      BOOL v386 = (void *)(*(uint64_t (**)(void))(**(void **)(v3 + 16) + 104))(*(void *)(v3 + 16));
      uint64_t v388 = 0;
      uint64_t v389 = 0;
      unsigned int v390 = 0;
      uint64_t v5 = *(unsigned int *)(v2 + 984);
      uint64_t v381 = v2;
      if (!v5) {
        goto LABEL_195;
      }
      uint64_t v6 = *(uint64_t **)(v2 + 976);
      uint64_t v376 = &v6[v5];
      do
      {
        int v378 = v6;
        uint64_t v7 = *v6;
        uint64_t v379 = *(void *)(v2 + 112);
        uint64_t v383 = *(void *)(v2 + 128);
        unint64_t v403 = 0;
        uint64_t v404 = 0;
        int v405 = 0;
        __int16 v407 = 0;
        unint64_t v408 = 0;
        unint64_t v406 = 0;
        uint64_t v8 = *(unsigned int *)(v7 + 64);
        int v399 = v402;
        int v401 = 4;
        if (v8 >= 5)
        {
          int v400 = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8) {
          bzero(v402, 4 * v8);
        }
        int v400 = v8;
        uint64_t v9 = *(unsigned int *)(v7 + 64);
        if (v9)
        {
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          while (1)
          {
            unsigned int v398 = 0;
            int v12 = (long long *)(*(void *)(v7 + 56) + 32 * v11);
            long long v13 = v12[1];
            long long v396 = *v12;
            long long v397 = v13;
            if ((_BYTE)v396 || (DWORD1(v396) & 0x80000000) == 0) {
              goto LABEL_12;
            }
            uint64_t v37 = DWORD1(v396) & 0x7FFFFFFF;
            if (*(_DWORD *)(a2[38] + 4 * v37) == 0x3FFFFFFF)
            {
              uint64_t v38 = *(unsigned int *)(a2[35] + 4 * v37);
              if ((unint64_t)(v38 - 1) <= 0x3FFFFFFE) {
                goto LABEL_47;
              }
              llvm::MachineOperand::setReg((uint64_t)&v396, 0);
              uint64_t v14 = 0;
              LODWORD(v396) = v396 & 0xFFF000FF;
            }
            else
            {
              if (*(_DWORD *)(a2[41] + 4 * v37))
              {
                uint64_t v38 = *(unsigned int *)(a2[35] + 4 * v37);
                if ((unint64_t)(v38 - 1) < 0x3FFFFFFF)
                {
LABEL_47:
                  llvm::MachineOperand::substPhysReg((unsigned int *)&v396, v38, v383);
LABEL_12:
                  uint64_t v14 = 0;
                  goto LABEL_13;
                }
              }
              LODWORD(v412) = 0;
              (*(void (**)(void *, unint64_t, void, long long *, unsigned int *))(*v386 + 136))(v386, *(void *)(*(void *)(*(void *)(v379 + 40) + 24) + 16 * v37) & 0xFFFFFFFFFFFFFFF8, (v396 >> 8) & 0xFFF, &v412, &v398);
              int v39 = *(_DWORD *)(a2[38] + 4 * v37);
              unsigned int v377 = v377 & 0xFFF00000 | 5;
              LODWORD(v396) = v377;
              *((void *)&v396 + 1) = 0;
              LODWORD(v397) = v39;
              uint64_t v14 = 1;
            }
LABEL_13:
            long long v394 = v396;
            long long v395 = v397;
            uint64_t v15 = v398;
            long long v412 = v396;
            long long v413 = v397;
            int v414 = 0;
            unint64_t v409 = 0;
            unsigned int v16 = v405;
            char v17 = sub_1CC2EDEAC((uint64_t)v10, (const llvm::MachineOperand *)v405, (llvm *)&v412, (int **)&v409);
            uint64_t v18 = v409;
            if ((v17 & 1) == 0)
            {
              if (4 * (int)v404 + 4 >= 3 * v16)
              {
                int v19 = 2 * v16;
LABEL_18:
                sub_1CC2EE008((uint64_t)&v403, v19);
                unint64_t v409 = 0;
                uint64_t v10 = v403;
                sub_1CC2EDEAC((uint64_t)v403, (const llvm::MachineOperand *)v405, (llvm *)&v412, (int **)&v409);
                uint64_t v18 = v409;
              }
              else if (v16 + ~v404 - HIDWORD(v404) <= v16 >> 3)
              {
                int v19 = v16;
                goto LABEL_18;
              }
              LODWORD(v404) = v404 + 1;
              LODWORD(v409) = 20;
              *(void *)&long long v410 = 0;
              if ((*(_DWORD *)v18 & 0xFE) == 0x14)
              {
                if (*(_DWORD *)v18 == 20)
                {
LABEL_21:
                  uint64_t v20 = v14 | (v15 << 32);
                  long long v21 = v413;
                  *(_OWORD *)uint64_t v18 = v412;
                  *((_OWORD *)v18 + 1) = v21;
                  BOOL v23 = v406;
                  unsigned int v22 = v407;
                  uint64_t v24 = (v407 - v406) / 40;
                  *((_DWORD *)v18 + 8) = v24;
                  if (v22 < v408)
                  {
                    *(_OWORD *)unsigned int v22 = v394;
                    *((_OWORD *)v22 + 1) = v395;
                    *((void *)v22 + 4) = v20;
                    uint64_t v35 = v22 + 40;
                  }
                  else
                  {
                    unint64_t v25 = v24 + 1;
                    if ((unint64_t)(v24 + 1) > 0x666666666666666) {
                      abort();
                    }
                    if (0x999999999999999ALL * ((v408 - v23) >> 3) > v25) {
                      unint64_t v25 = 0x999999999999999ALL * ((v408 - v23) >> 3);
                    }
                    if (0xCCCCCCCCCCCCCCCDLL * ((v408 - v23) >> 3) >= 0x333333333333333) {
                      unint64_t v26 = 0x666666666666666;
                    }
                    else {
                      unint64_t v26 = v25;
                    }
                    if (v26 > 0x666666666666666) {
                      sub_1CB833614();
                    }
                    uint64_t v27 = 5 * v26;
                    uint64_t v28 = (char *)operator new(40 * v26);
                    long long v29 = v395;
                    unint64_t v30 = &v28[40 * v24];
                    *(_OWORD *)unint64_t v30 = v394;
                    *((_OWORD *)v30 + 1) = v29;
                    *((void *)v30 + 4) = v20;
                    if (v22 == v23)
                    {
                      uint64_t v32 = &v28[40 * v24];
                    }
                    else
                    {
                      uint64_t v31 = &v28[40 * v24];
                      do
                      {
                        uint64_t v32 = v31 - 40;
                        long long v33 = *(_OWORD *)(v22 - 40);
                        long long v34 = *(_OWORD *)(v22 - 24);
                        *((void *)v31 - 1) = *((void *)v22 - 1);
                        *(_OWORD *)(v31 - 24) = v34;
                        *(_OWORD *)(v31 - 40) = v33;
                        v22 -= 40;
                        v31 -= 40;
                      }
                      while (v22 != v23);
                    }
                    uint64_t v35 = v30 + 40;
                    unint64_t v406 = v32;
                    unint64_t v408 = &v28[8 * v27];
                    if (v23) {
                      operator delete(v23);
                    }
                    BOOL v23 = v32;
                  }
                  __int16 v407 = v35;
                  unsigned int v36 = v35 - 40;
                  goto LABEL_39;
                }
              }
              else if (llvm::MachineOperand::isIdenticalTo(v18, (const llvm::MachineOperand *)&v409))
              {
                goto LABEL_21;
              }
              --HIDWORD(v404);
              goto LABEL_21;
            }
            BOOL v23 = v406;
            unsigned int v36 = &v406[40 * *((unsigned int *)v409 + 8)];
LABEL_39:
            *((_DWORD *)v399 + v11++) = -858993459 * ((unint64_t)(v36 - v23) >> 3);
            if (v11 == v9) {
              goto LABEL_52;
            }
          }
        }
        BOOL v23 = 0;
LABEL_52:
        *(_DWORD *)(v7 + 64) = 0;
        if (v389)
        {
          if (v390 <= 4 * (int)v389 || v390 < 0x41)
          {
            if (v390)
            {
              unint64_t v40 = v388;
              uint64_t v41 = 8 * v390;
              do
              {
                _DWORD *v40 = -1;
                v40 += 2;
                v41 -= 8;
              }
              while (v41);
            }
            uint64_t v389 = 0;
          }
          else
          {
            sub_1CB83872C(&v388);
          }
        }
        BOOL v42 = v407;
        if (v23 != v407)
        {
          unint64_t v43 = 0;
          do
          {
            uint64_t v44 = &v23[v43];
            int v45 = v23[v43 + 32];
            int v46 = *(_DWORD *)&v23[v43 + 36];
            uint64_t v47 = *(unsigned int *)(v7 + 64);
            unint64_t v48 = *(void *)(v7 + 56);
            if (v47 >= *(_DWORD *)(v7 + 68))
            {
              unint64_t v51 = v48 + 32 * v47;
              if (v48 > (unint64_t)v44 || v51 <= (unint64_t)v44) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v49 = (_OWORD *)(v48 + 32 * *(unsigned int *)(v7 + 64));
            long long v50 = *((_OWORD *)v44 + 1);
            *uint64_t v49 = *(_OWORD *)v44;
            v49[1] = v50;
            ++*(_DWORD *)(v7 + 64);
            if (v45)
            {
              LODWORD(v412) = -858993459 * (v43 >> 3);
              sub_1CB8387D8((uint64_t)&v388, &v412)[1] = v46;
            }
            v43 += 40;
          }
          while (&v23[v43] != v42);
        }
        sub_1CC2ECFB4((uint64_t)&v412, v7 + 200);
        for (uint64_t i = v413; v413; uint64_t i = v413)
        {
          if (*(_DWORD *)(*((void *)&v412 + 1) + 12) >= *(_DWORD *)(*((void *)&v412 + 1) + 8)) {
            break;
          }
          uint64_t v54 = *((void *)&v412 + 1) + 16 * i;
          uint64_t v55 = *(void *)(v54 - 16);
          unsigned int v56 = *(_DWORD *)(v54 - 4);
          uint64_t v57 = v55 + 24 * v56;
          char v58 = v399;
          unint64_t v409 = (llvm::MachineOperand *)((char *)&v410 + 8);
          *(void *)&long long v410 = 0xC00000000;
          unsigned int v61 = *(unsigned __int8 *)(v57 + 72);
          unint64_t v60 = (unsigned __int8 *)(v57 + 72);
          unsigned int v59 = v61;
          unsigned int v62 = 0;
          uint64_t v63 = v61 & 0x3F;
          if ((v61 & 0x3F) != 0)
          {
            uint64_t v64 = (unsigned int *)*((void *)v60 - 1);
            uint64_t v65 = 4 * v63;
            do
            {
              uint64_t v66 = *v64;
              if (v66 == -1) {
                int v67 = -1;
              }
              else {
                int v67 = v58[v66];
              }
              if (v62 >= DWORD1(v410)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v409 + v62) = v67;
              unsigned int v62 = v410 + 1;
              LODWORD(v410) = v410 + 1;
              ++v64;
              v65 -= 4;
            }
            while (v65);
            unint64_t v68 = (__int32 *)v409;
            unsigned int v59 = *v60;
          }
          else
          {
            unint64_t v68 = (__int32 *)&v410 + 2;
          }
          sub_1CC2E9CCC((uint64_t)&v396, v68, v62, (v59 >> 6) & 1, v59 >> 7, *(void *)(v55 + 24 * v56 + 80));
          if (v409 != (llvm::MachineOperand *)((char *)&v410 + 8)) {
            free(v409);
          }
          sub_1CC2EBE18(*(void *)(*((void *)&v412 + 1) + 16 * v413 - 16)+ 24 * *(unsigned int *)(*((void *)&v412 + 1) + 16 * v413 - 4)+ 64, (uint64_t)&v396);
          uint64_t v69 = v396;
          *(void *)&long long v396 = 0;
          if (v69) {
            MEMORY[0x1D25D9CB0](v69, 0x1000C8052888210);
          }
          sub_1CC2ED240((uint64_t)&v412);
        }
        if (*((long long **)&v412 + 1) != (long long *)((char *)&v413 + 8)) {
          free(*((void **)&v412 + 1));
        }
        if (v399 != v402) {
          free(v399);
        }
        if (v23)
        {
          __int16 v407 = v23;
          operator delete(v23);
        }
        BOOL v70 = v403;
        if (v405)
        {
          LODWORD(v412) = 20;
          *((void *)&v412 + 1) = 0;
          LODWORD(v409) = 21;
          *(void *)&long long v410 = 0;
          uint64_t v129 = 40 * v405;
          int v130 = v403;
          do
          {
            if ((*(_DWORD *)v130 & 0xFE) != 0x14
              && !llvm::MachineOperand::isIdenticalTo(v130, (const llvm::MachineOperand *)&v412)
              && (*(_DWORD *)v130 & 0xFE) != 0x14)
            {
              llvm::MachineOperand::isIdenticalTo(v130, (const llvm::MachineOperand *)&v409);
            }
            int v130 = (llvm::MachineOperand *)((char *)v130 + 40);
            v129 -= 40;
          }
          while (v129);
        }
        MEMORY[0x1D25D9CD0](v70, 8);
        uint64_t v71 = *v378;
        uint64_t v72 = *(void *)(v381 + 120);
        uint64_t v384 = *(void *)(v381 + 128);
        uint64_t v73 = a2[34];
        sub_1CC2ECFB4((uint64_t)&v409, *v378 + 200);
        *(void *)&long long v412 = v409;
        *((void *)&v412 + 1) = (char *)&v413 + 8;
        *(void *)&long long v413 = 0x400000000;
        if (DWORD2(v410)) {
          sub_1CC2D01B8((uint64_t)&v412 + 8, (uint64_t)&v410);
        }
        if ((unsigned char *)v410 != v411) {
          free((void *)v410);
        }
        uint64_t v74 = v413;
        if (!v413) {
          goto LABEL_183;
        }
        uint64_t v75 = v73 + 320;
        do
        {
          if (*(_DWORD *)(*((void *)&v412 + 1) + 12) >= *(_DWORD *)(*((void *)&v412 + 1) + 8)) {
            break;
          }
          uint64_t v76 = *((void *)&v412 + 1) + 16 * v74;
          uint64_t v77 = *(void *)(v76 - 16);
          uint64_t v78 = *(unsigned int *)(v76 - 4);
          uint64_t v79 = (unint64_t *)(v77 + 16 * v78);
          uint64_t v80 = v79[1];
          unint64_t v380 = *v79;
          sub_1CC2EA3E8((uint64_t)&v399, v77 + 24 * v78 + 64);
          unint64_t v409 = (llvm::MachineOperand *)v411;
          long long v410 = xmmword_1CDB15B30;
          unint64_t v403 = (llvm::MachineOperand *)&v405;
          uint64_t v404 = 0xC00000000;
          if ((v400 & 0x3F) != 0)
          {
            uint64_t v81 = (char *)v399;
            uint64_t v82 = (char *)v399 + 4 * (v400 & 0x3F);
            do
            {
              uint64_t v83 = v400 & 0x3F;
              if ((v400 & 0x3F) != 0
                && ((int v84 = *(_DWORD *)v81,
                     uint64_t v85 = v399,
                     unsigned int v86 = (__int32 *)((char *)v399 + 4 * v83),
                     (uint64_t v87 = wmemchr((__int32 *)v399, -1, v400 & 0x3F)) != 0)
                  ? (uint64_t v88 = v87)
                  : (uint64_t v88 = v86),
                    v83 == ((char *)v88 - v85) >> 2))
              {
                uint64_t v89 = v388;
                unsigned int v90 = v390;
                if (!v390) {
                  goto LABEL_127;
                }
                LODWORD(v91) = (v390 - 1) & (37 * v84);
                unsigned int v92 = &v388[2 * v91];
                int v93 = *v92;
                if (v84 != *v92)
                {
                  int v94 = 1;
                  while (v93 != -1)
                  {
                    int v95 = v91 + v94++;
                    uint64_t v91 = v95 & (v390 - 1);
                    int v93 = v388[2 * v91];
                    if (v84 == v93)
                    {
                      unsigned int v92 = &v388[2 * v91];
                      goto LABEL_118;
                    }
                  }
LABEL_127:
                  unsigned int v92 = &v388[2 * v390];
                }
              }
              else
              {
                uint64_t v89 = v388;
                unsigned int v90 = v390;
                unsigned int v92 = &v388[2 * v390];
              }
LABEL_118:
              if ((unint64_t)(v410 + 1) > *((void *)&v410 + 1)) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              uint64_t v96 = &v89[2 * v90];
              *((unsigned char *)v409 + v410) = v92 != v96;
              *(void *)&long long v410 = v410 + 1;
              if (v92 == v96) {
                int v97 = 0;
              }
              else {
                int v97 = v92[1];
              }
              if (v404 >= (unint64_t)HIDWORD(v404)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v403 + v404) = v97;
              LODWORD(v404) = v404 + 1;
              v81 += 4;
            }
            while (v81 != v82);
          }
          if (!*(void *)(v71 + 424))
          {
            uint64_t v98 = *(unsigned int *)(v71 + 384);
            if (v98)
            {
              uint64_t v114 = *(void **)(v71 + 376);
              uint64_t v115 = 8 * v98;
              unint64_t v99 = v380;
              while (*v114 != v380)
              {
                ++v114;
                v115 -= 8;
                if (!v115) {
                  goto LABEL_131;
                }
              }
              if (v115)
              {
                uint64_t v116 = (void *)(v380 & 0xFFFFFFFFFFFFFFF8);
                goto LABEL_157;
              }
              goto LABEL_131;
            }
LABEL_130:
            unint64_t v99 = v380;
            goto LABEL_131;
          }
          uint64_t v125 = *(void **)(v71 + 416);
          if (!v125) {
            goto LABEL_130;
          }
          uint64_t v116 = (void *)(v380 & 0xFFFFFFFFFFFFFFF8);
          unsigned int v126 = *(_DWORD *)((v380 & 0xFFFFFFFFFFFFFFF8) + 24) | (v380 >> 1) & 3;
          while (1)
          {
            unsigned int v127 = (v125[4] >> 1) & 3 | *(_DWORD *)((v125[4] & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v126 >= v127) {
              break;
            }
LABEL_174:
            uint64_t v125 = (void *)*v125;
            if (!v125) {
              goto LABEL_130;
            }
          }
          if (v127 < v126)
          {
            ++v125;
            goto LABEL_174;
          }
          unint64_t v99 = v380;
LABEL_157:
          unint64_t v99 = *v116 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v99 >> 1) & 3));
LABEL_131:
          uint64_t v100 = *(void *)(v72 + 288);
          if (v99 >= 8 && (uint64_t v101 = *(void *)((v99 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
          {
            uint64_t v102 = (void *)(v101 + 24);
          }
          else
          {
            uint64_t v117 = *(unsigned int *)(v100 + 544);
            if (v117)
            {
              unsigned int v118 = *(_DWORD *)((v99 & 0xFFFFFFFFFFFFFFF8) + 24) | (v99 >> 1) & 3;
              uint64_t v119 = *(void **)(v100 + 536);
              unint64_t v120 = *(unsigned int *)(v100 + 544);
              do
              {
                unint64_t v121 = v120 >> 1;
                uint64_t v122 = &v119[2 * (v120 >> 1)];
                uint64_t v124 = *v122;
                unsigned int v123 = v122 + 2;
                v120 += ~(v120 >> 1);
                if (((v124 >> 1) & 3 | *(_DWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 24)) < v118) {
                  uint64_t v119 = v123;
                }
                else {
                  unint64_t v120 = v121;
                }
              }
              while (v120);
              if (v119 == (void *)(*(void *)(v100 + 536) + 16 * v117)
                || ((*v119 >> 1) & 3 | *(_DWORD *)((*v119 & 0xFFFFFFFFFFFFFFF8) + 24)) > v118)
              {
                v119 -= 2;
              }
            }
            else
            {
              uint64_t v119 = *(void **)(v100 + 536);
            }
            uint64_t v102 = v119 + 1;
          }
          uint64_t v103 = *v102;
          uint64_t v104 = *(void *)(*(void *)(v100 + 392) + 16 * *(unsigned int *)(*v102 + 24) + 8);
          sub_1CC2EA3E8((uint64_t)&v396, (uint64_t)&v399);
          sub_1CC2EE210(v71, (llvm::MachineBasicBlock *)v103, v99, v80, (uint64_t)&v396, (uint64_t)v409, v410, v105, (uint64_t)v403, v404, v72, (uint64_t)v386, v384, (uint64_t)&v391);
          uint64_t v106 = v396;
          *(void *)&long long v396 = 0;
          if (v106) {
            MEMORY[0x1D25D9CB0](v106, 0x1000C8052888210);
          }
          unsigned int v107 = (v80 >> 1) & 3;
          unsigned int v108 = *(_DWORD *)((v80 & 0xFFFFFFFFFFFFFFF8) + 24) | v107;
          unsigned int v109 = *(_DWORD *)((v104 & 0xFFFFFFFFFFFFFFF8) + 24) | (v104 >> 1) & 3;
          while (v108 > v109)
          {
            uint64_t v103 = *(void *)(v103 + 8);
            if (v103 == v75) {
              goto LABEL_177;
            }
            uint64_t v110 = *(void *)(*(void *)(*(void *)(v72 + 288) + 392) + 16 * *(unsigned int *)(v103 + 24) + 8);
            sub_1CC2EA3E8((uint64_t)&v394, (uint64_t)&v399);
            sub_1CC2EE210(v71, (llvm::MachineBasicBlock *)v103, v104, v80, (uint64_t)&v394, (uint64_t)v409, v410, v111, (uint64_t)v403, v404, v72, (uint64_t)v386, v384, (uint64_t)&v391);
            uint64_t v112 = v394;
            *(void *)&long long v394 = 0;
            if (v112) {
              MEMORY[0x1D25D9CB0](v112, 0x1000C8052888210);
            }
            unsigned int v108 = *(_DWORD *)((v80 & 0xFFFFFFFFFFFFFFF8) + 24) | v107;
            unsigned int v109 = *(_DWORD *)((v110 & 0xFFFFFFFFFFFFFFF8) + 24) | (v110 >> 1) & 3;
            uint64_t v104 = v110;
          }
          if (v103 == v75)
          {
LABEL_177:
            if (v403 != (llvm::MachineOperand *)&v405) {
              free(v403);
            }
            if (v409 != (llvm::MachineOperand *)v411) {
              free(v409);
            }
            unint64_t v128 = v399;
            int v399 = 0;
            if (v128) {
              MEMORY[0x1D25D9CB0](v128, 0x1000C8052888210);
            }
            break;
          }
          sub_1CC2ED240((uint64_t)&v412);
          if (v403 != (llvm::MachineOperand *)&v405) {
            free(v403);
          }
          if (v409 != (llvm::MachineOperand *)v411) {
            free(v409);
          }
          uint64_t v113 = v399;
          int v399 = 0;
          if (v113) {
            MEMORY[0x1D25D9CB0](v113, 0x1000C8052888210);
          }
          uint64_t v74 = v413;
        }
        while (v413);
LABEL_183:
        if (*((long long **)&v412 + 1) != (long long *)((char *)&v413 + 8)) {
          free(*((void **)&v412 + 1));
        }
        uint64_t v6 = v378 + 1;
        uint64_t v2 = v381;
      }
      while (v378 + 1 != v376);
LABEL_195:
      uint64_t v131 = *(unsigned int *)(v2 + 1064);
      if (v131)
      {
        uint64_t v132 = *(uint64_t ***)(v381 + 1056);
        uint64_t v133 = &v132[v131];
        do
        {
          uint64_t v134 = *v132;
          unint64_t v135 = (*v132)[2];
          uint64_t v136 = *(void *)(*(void *)(v381 + 120) + 288);
          if (v135 >= 8 && (uint64_t v137 = *(void *)((v135 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
          {
            uint64_t v138 = (llvm::MachineBasicBlock **)(v137 + 24);
          }
          else
          {
            uint64_t v158 = *(unsigned int *)(v136 + 544);
            if (v158)
            {
              unsigned int v159 = *(_DWORD *)((v135 & 0xFFFFFFFFFFFFFFF8) + 24) | (v135 >> 1) & 3;
              int v160 = *(void **)(v136 + 536);
              unint64_t v161 = *(unsigned int *)(v136 + 544);
              do
              {
                unint64_t v162 = v161 >> 1;
                uint64_t v163 = &v160[2 * (v161 >> 1)];
                uint64_t v165 = *v163;
                uint64_t v164 = v163 + 2;
                v161 += ~(v161 >> 1);
                if (((v165 >> 1) & 3 | *(_DWORD *)((v165 & 0xFFFFFFFFFFFFFFF8) + 24)) < v159) {
                  int v160 = v164;
                }
                else {
                  unint64_t v161 = v162;
                }
              }
              while (v161);
              if (v160 == (void *)(*(void *)(v136 + 536) + 16 * v158)
                || ((*v160 >> 1) & 3 | *(_DWORD *)((*v160 & 0xFFFFFFFFFFFFFFF8) + 24)) > v159)
              {
                v160 -= 2;
              }
            }
            else
            {
              int v160 = *(void **)(v136 + 536);
            }
            uint64_t v138 = (llvm::MachineBasicBlock **)(v160 + 1);
          }
          uint64_t v139 = *v138;
          uint64_t v140 = (void *)sub_1CC2EDCF8(*v138, v135, *(void *)(v136 + 392), (uint64_t)&v391);
          uint64_t v141 = v386[1];
          char v142 = (llvm::MachineFunction *)*((void *)v139 + 4);
          uint64_t v143 = (llvm::MachineOperand *)v134[1];
          unint64_t v409 = v143;
          if (v143) {
            llvm::MetadataTracking::track((uint64_t)&v409, (unsigned __int8 *)v143, 2);
          }
          MachineInstr = llvm::MachineFunction::CreateMachineInstr(v142, v141 + 816, (unsigned __int8 **)&v409, 0);
          if (!v409) {
            goto LABEL_203;
          }
          int v166 = *(unsigned __int8 *)v409;
          if ((v166 - 4) > 0x1E)
          {
            if ((v166 - 3) >= 0xFFFFFFFE) {
              char v169 = v409;
            }
            else {
              char v169 = 0;
            }
            if ((v166 - 3) < 0xFFFFFFFE)
            {
              if (v166 == 3) {
                *((void *)v409 + 1) = 0;
              }
              goto LABEL_203;
            }
            unint64_t v168 = (unint64_t)v169 + 8;
          }
          else
          {
            if ((*((unsigned char *)v409 + 1) & 0x7F) != 2 && !*((_DWORD *)v409 + 3)) {
              goto LABEL_203;
            }
            uint64_t v167 = *((void *)v409 + 2);
            if ((v167 & 4) == 0) {
              goto LABEL_203;
            }
            unint64_t v168 = v167 & 0xFFFFFFFFFFFFFFF8;
            if (!v168) {
              goto LABEL_203;
            }
          }
          *(void *)&long long v412 = &v409;
          sub_1CC5FA668(v168 + 16, &v412);
LABEL_203:
          uint64_t v145 = *((void *)v139 + 5);
          *((void *)MachineInstr + 3) = v145;
          uint64_t v146 = *(void *)(v145 + 32);
          uint64_t v147 = *((unsigned int *)MachineInstr + 10);
          if (v147)
          {
            uint64_t v151 = *((void *)MachineInstr + 4);
            uint64_t v152 = *(void *)(v146 + 40);
            uint64_t v153 = 32 * v147;
            do
            {
              if (!*(unsigned char *)v151)
              {
                uint64_t v154 = *(unsigned int *)(v151 + 4);
                if ((int)v154 >= 0) {
                  uint64_t v155 = (uint64_t *)(*(void *)(v152 + 272) + 8 * v154);
                }
                else {
                  uint64_t v155 = (uint64_t *)(*(void *)(v152 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8);
                }
                uint64_t v156 = *v155;
                if (*v155)
                {
                  uint64_t v157 = *(void *)(v156 + 16);
                  *(void *)(v156 + 16) = v151;
                  *(void *)(v151 + 16) = v157;
                  if (*(unsigned char *)(v151 + 3))
                  {
                    *(void *)(v151 + 24) = v156;
                  }
                  else
                  {
                    *(void *)(v151 + 24) = 0;
                    uint64_t v155 = (uint64_t *)(v157 + 24);
                  }
                }
                else
                {
                  *(void *)(v151 + 16) = v151;
                  *(void *)(v151 + 24) = 0;
                }
                uint64_t *v155 = v151;
              }
              v151 += 32;
              v153 -= 32;
            }
            while (v153);
          }
          uint64_t v148 = *(void *)(v146 + 728);
          if (v148) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v148 + 24))(v148, MachineInstr);
          }
          unint64_t v149 = *v140 & 0xFFFFFFFFFFFFFFF8;
          *(void *)MachineInstr = v149 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v140;
          *(void *)(v149 + 8) = MachineInstr;
          *uint64_t v140 = *v140 & 7 | (unint64_t)MachineInstr;
          uint64_t v150 = *v134;
          LODWORD(v412) = 14;
          *((void *)&v412 + 1) = 0;
          *(void *)&long long v413 = v150;
          llvm::MachineInstr::addOperand(MachineInstr, v142, (const llvm::MachineOperand *)&v412);
          ++v132;
        }
        while (v132 != v133);
      }
      uint64_t v170 = *(void *)(*(void *)(v381 + 120) + 288);
      uint64_t v171 = *(void **)(v381 + 136);
      uint64_t v172 = a2;
      uint64_t v385 = v170;
      if (v171 != (void *)(v381 + 144))
      {
        do
        {
          unint64_t v173 = v171[5];
          if (v173 >= 8 && (uint64_t v174 = *(void *)((v173 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
          {
            uint64_t v175 = (void *)(v174 + 24);
          }
          else
          {
            uint64_t v227 = *(unsigned int *)(v170 + 544);
            if (v227)
            {
              unsigned int v228 = *(_DWORD *)((v173 & 0xFFFFFFFFFFFFFFF8) + 24) | (v173 >> 1) & 3;
              BOOL v229 = *(void **)(v170 + 536);
              unint64_t v230 = *(unsigned int *)(v170 + 544);
              do
              {
                unint64_t v231 = v230 >> 1;
                uint64_t v232 = &v229[2 * (v230 >> 1)];
                uint64_t v234 = *v232;
                unsigned int v233 = v232 + 2;
                v230 += ~(v230 >> 1);
                if (((v234 >> 1) & 3 | *(_DWORD *)((v234 & 0xFFFFFFFFFFFFFFF8) + 24)) < v228) {
                  BOOL v229 = v233;
                }
                else {
                  unint64_t v230 = v231;
                }
              }
              while (v230);
              if (v229 == (void *)(*(void *)(v170 + 536) + 16 * v227)
                || ((*v229 >> 1) & 3 | *(_DWORD *)((*v229 & 0xFFFFFFFFFFFFFFF8) + 24)) > v228)
              {
                v229 -= 2;
              }
            }
            else
            {
              BOOL v229 = *(void **)(v170 + 536);
            }
            uint64_t v175 = v229 + 1;
          }
          uint64_t v176 = *((unsigned int *)v171 + 8);
          uint64_t v4 = *((unsigned int *)v171 + 13);
          unint64_t v177 = (void *)*v175;
          uint64_t v178 = v171[6] & 0x7FFFFFFF;
          if (*(_DWORD *)(v172[38] + 4 * v178) == 0x3FFFFFFF)
          {
            unsigned int v179 = *(_DWORD *)(v172[35] + 4 * v178);
            if (v179 - 1 > 0x3FFFFFFE) {
              goto LABEL_289;
            }
          }
          else if (!*(_DWORD *)(v172[41] + 4 * v178) {
                 || (unsigned int v179 = *(_DWORD *)(v172[35] + 4 * v178), v179 - 1 >= 0x3FFFFFFF))
          }
          {
            unint64_t v188 = *(void *)(*(void *)(*(void *)(*(void *)(v381 + 112) + 40) + 24) + 16 * v178) & 0xFFFFFFFFFFFFFFF8;
            LODWORD(v399) = 0;
            LODWORD(v396) = 0;
            uint64_t v189 = *(void *)(v381 + 128);
            if (v4) {
              uint64_t v190 = *(unsigned __int16 *)(*(void *)(v189 + 96) + 4 * v4 + 2);
            }
            else {
              uint64_t v190 = *(unsigned int *)(*(void *)(v189 + 264)
            }
                                     + 24
                                     * (*(unsigned __int16 *)(*(void *)v188 + 24)
                                      + *(_DWORD *)(v189 + 272)
                                      * ((*(void *)(v189 + 248) - *(void *)(v189 + 240)) >> 3)));
            if ((*(unsigned int (**)(void *, unint64_t))(*v386 + 136))(v386, v188)) {
              BOOL v201 = v396 == 0;
            }
            else {
              BOOL v201 = 0;
            }
            if (!v201) {
              goto LABEL_288;
            }
            uint64_t v202 = (unint64_t *)v177[7];
            unint64_t v403 = 0;
            uint64_t v203 = v386[1] + 768;
            unsigned int v204 = (llvm::MachineFunction *)v177[4];
            unint64_t v409 = 0;
            unsigned int v205 = llvm::MachineFunction::CreateMachineInstr(v204, v203, (unsigned __int8 **)&v409, 0);
            if (v409)
            {
              int v247 = *(unsigned __int8 *)v409;
              if ((v247 - 4) > 0x1E)
              {
                if ((v247 - 3) >= 0xFFFFFFFE) {
                  unsigned int v251 = v409;
                }
                else {
                  unsigned int v251 = 0;
                }
                if ((v247 - 3) < 0xFFFFFFFE)
                {
                  if (v247 == 3) {
                    *((void *)v409 + 1) = 0;
                  }
                  goto LABEL_280;
                }
                unint64_t v249 = (unint64_t)v251 + 8;
              }
              else
              {
                if ((*((unsigned char *)v409 + 1) & 0x7F) != 2 && !*((_DWORD *)v409 + 3)) {
                  goto LABEL_280;
                }
                uint64_t v248 = *((void *)v409 + 2);
                if ((v248 & 4) == 0) {
                  goto LABEL_280;
                }
                unint64_t v249 = v248 & 0xFFFFFFFFFFFFFFF8;
                if (!v249) {
                  goto LABEL_280;
                }
              }
              *(void *)&long long v412 = &v409;
              sub_1CC5FA668(v249 + 16, &v412);
            }
LABEL_280:
            uint64_t v206 = v177[5];
            *((void *)v205 + 3) = v206;
            uint64_t v207 = *(void *)(v206 + 32);
            uint64_t v208 = *((unsigned int *)v205 + 10);
            if (v208)
            {
              uint64_t v235 = *((void *)v205 + 4);
              uint64_t v236 = *(void *)(v207 + 40);
              uint64_t v237 = 32 * v208;
              do
              {
                if (!*(unsigned char *)v235)
                {
                  uint64_t v238 = *(unsigned int *)(v235 + 4);
                  if ((int)v238 >= 0) {
                    uint64_t v239 = (uint64_t *)(*(void *)(v236 + 272) + 8 * v238);
                  }
                  else {
                    uint64_t v239 = (uint64_t *)(*(void *)(v236 + 24) + 16 * (v238 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v240 = *v239;
                  if (*v239)
                  {
                    uint64_t v241 = *(void *)(v240 + 16);
                    *(void *)(v240 + 16) = v235;
                    *(void *)(v235 + 16) = v241;
                    if (*(unsigned char *)(v235 + 3))
                    {
                      *(void *)(v235 + 24) = v240;
                    }
                    else
                    {
                      *(void *)(v235 + 24) = 0;
                      uint64_t v239 = (uint64_t *)(v241 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v235 + 16) = v235;
                    *(void *)(v235 + 24) = 0;
                  }
                  *uint64_t v239 = v235;
                }
                v235 += 32;
                v237 -= 32;
              }
              while (v237);
            }
            uint64_t v209 = *(void *)(v207 + 728);
            if (v209) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v209 + 24))(v209, v205);
            }
            unint64_t v210 = *v202 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unsigned int v205 = v210 | *(void *)v205 & 7;
            *((void *)v205 + 1) = v202;
            *(void *)(v210 + 8) = v205;
            *uint64_t v202 = *v202 & 7 | (unint64_t)v205;
            uint64_t v211 = a2;
            uint64_t v170 = v385;
            if (v403)
            {
              int v212 = *(unsigned __int8 *)v403;
              if ((v212 - 4) > 0x1E)
              {
                if ((v212 - 3) >= 0xFFFFFFFE) {
                  int v218 = v403;
                }
                else {
                  int v218 = 0;
                }
                if ((v212 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v219 = (unint64_t)v218 + 8;
                  goto LABEL_309;
                }
                if (v212 == 3) {
                  *((void *)v403 + 1) = 0;
                }
              }
              else if ((*((unsigned char *)v403 + 1) & 0x7F) == 2 || *((_DWORD *)v403 + 3))
              {
                uint64_t v243 = *((void *)v403 + 2);
                if ((v243 & 4) != 0)
                {
                  unint64_t v219 = v243 & 0xFFFFFFFFFFFFFFF8;
                  if (v219)
                  {
LABEL_309:
                    *(void *)&long long v412 = &v403;
                    sub_1CC5FA668(v219 + 16, &v412);
                    uint64_t v211 = a2;
                  }
                }
              }
            }
            int v213 = *(_DWORD *)(v211[38] + 4 * v178);
            LODWORD(v412) = 5;
            *((void *)&v412 + 1) = 0;
            LODWORD(v413) = v213;
            llvm::MachineInstr::addOperand(v205, v204, (const llvm::MachineOperand *)&v412);
            LODWORD(v412) = 1;
            *((void *)&v412 + 1) = 0;
            *(void *)&long long v413 = v176;
            llvm::MachineInstr::addOperand(v205, v204, (const llvm::MachineOperand *)&v412);
            LODWORD(v412) = 1;
            *((void *)&v412 + 1) = 0;
            *(void *)&long long v413 = v190;
            llvm::MachineInstr::addOperand(v205, v204, (const llvm::MachineOperand *)&v412);
LABEL_288:
            uint64_t v172 = a2;
            goto LABEL_289;
          }
          if (v4)
          {
            uint64_t v180 = *(void **)(v381 + 128);
            uint64_t v181 = v180[1];
            uint64_t v182 = v180[7];
            uint64_t v183 = *(unsigned int *)(v181 + 24 * v179 + 4);
            if (*(_WORD *)(v182 + 2 * v183))
            {
              unsigned __int16 v184 = *(_WORD *)(v182 + 2 * v183) + v179;
              uint64_t v185 = (unsigned __int16 *)(v180[11] + 2 * *(unsigned int *)(v181 + 24 * v179 + 12));
              uint64_t v186 = (unsigned __int16 *)(v182 + 2 * v183 + 2);
              while (v4 != *v185)
              {
                unsigned int v179 = 0;
                int v187 = *v186++;
                v184 += v187;
                ++v185;
                if (!v187) {
                  goto LABEL_264;
                }
              }
              unsigned int v179 = v184;
            }
            else
            {
              unsigned int v179 = 0;
            }
          }
LABEL_264:
          uint64_t v191 = (unint64_t *)v177[7];
          unint64_t v403 = 0;
          uint64_t v192 = v386[1] + 768;
          uint64_t v193 = (llvm::MachineFunction *)v177[4];
          unint64_t v409 = 0;
          uint64_t v194 = llvm::MachineFunction::CreateMachineInstr(v193, v192, (unsigned __int8 **)&v409, 0);
          if (v409)
          {
            int v244 = *(unsigned __int8 *)v409;
            if ((v244 - 4) > 0x1E)
            {
              if ((v244 - 3) >= 0xFFFFFFFE) {
                uint64_t v250 = v409;
              }
              else {
                uint64_t v250 = 0;
              }
              if ((v244 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v246 = (unint64_t)v250 + 8;
LABEL_373:
                *(void *)&long long v412 = &v409;
                sub_1CC5FA668(v246 + 16, &v412);
                uint64_t v170 = v385;
                goto LABEL_265;
              }
              uint64_t v170 = v385;
              if (v244 == 3) {
                *((void *)v409 + 1) = 0;
              }
            }
            else
            {
              uint64_t v170 = v385;
              if ((*((unsigned char *)v409 + 1) & 0x7F) == 2 || *((_DWORD *)v409 + 3))
              {
                uint64_t v245 = *((void *)v409 + 2);
                if ((v245 & 4) != 0)
                {
                  unint64_t v246 = v245 & 0xFFFFFFFFFFFFFFF8;
                  if (v246) {
                    goto LABEL_373;
                  }
                }
              }
            }
          }
LABEL_265:
          uint64_t v195 = v177[5];
          *((void *)v194 + 3) = v195;
          uint64_t v196 = *(void *)(v195 + 32);
          uint64_t v197 = *((unsigned int *)v194 + 10);
          if (v197)
          {
            uint64_t v220 = *((void *)v194 + 4);
            uint64_t v221 = *(void *)(v196 + 40);
            uint64_t v222 = 32 * v197;
            do
            {
              if (!*(unsigned char *)v220)
              {
                uint64_t v223 = *(unsigned int *)(v220 + 4);
                if ((int)v223 >= 0) {
                  unsigned int v224 = (uint64_t *)(*(void *)(v221 + 272) + 8 * v223);
                }
                else {
                  unsigned int v224 = (uint64_t *)(*(void *)(v221 + 24) + 16 * (v223 & 0x7FFFFFFF) + 8);
                }
                uint64_t v225 = *v224;
                if (*v224)
                {
                  uint64_t v226 = *(void *)(v225 + 16);
                  *(void *)(v225 + 16) = v220;
                  *(void *)(v220 + 16) = v226;
                  if (*(unsigned char *)(v220 + 3))
                  {
                    *(void *)(v220 + 24) = v225;
                  }
                  else
                  {
                    *(void *)(v220 + 24) = 0;
                    unsigned int v224 = (uint64_t *)(v226 + 24);
                  }
                }
                else
                {
                  *(void *)(v220 + 16) = v220;
                  *(void *)(v220 + 24) = 0;
                }
                *unsigned int v224 = v220;
              }
              v220 += 32;
              v222 -= 32;
            }
            while (v222);
          }
          uint64_t v198 = *(void *)(v196 + 728);
          if (v198) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v198 + 24))(v198, v194);
          }
          unint64_t v199 = *v191 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v194 = v199 | *(void *)v194 & 7;
          *((void *)v194 + 1) = v191;
          *(void *)(v199 + 8) = v194;
          *uint64_t v191 = *v191 & 7 | (unint64_t)v194;
          if (!v403) {
            goto LABEL_272;
          }
          int v200 = *(unsigned __int8 *)v403;
          if ((v200 - 4) > 0x1E)
          {
            if ((v200 - 3) >= 0xFFFFFFFE) {
              uint64_t v216 = v403;
            }
            else {
              uint64_t v216 = 0;
            }
            if ((v200 - 3) < 0xFFFFFFFE)
            {
              if (v200 == 3) {
                *((void *)v403 + 1) = 0;
              }
              goto LABEL_272;
            }
            unint64_t v217 = (unint64_t)v216 + 8;
          }
          else
          {
            if ((*((unsigned char *)v403 + 1) & 0x7F) != 2 && !*((_DWORD *)v403 + 3)) {
              goto LABEL_272;
            }
            uint64_t v242 = *((void *)v403 + 2);
            if ((v242 & 4) == 0) {
              goto LABEL_272;
            }
            unint64_t v217 = v242 & 0xFFFFFFFFFFFFFFF8;
            if (!v217) {
              goto LABEL_272;
            }
          }
          *(void *)&long long v412 = &v403;
          sub_1CC5FA668(v217 + 16, &v412);
LABEL_272:
          *((void *)&v412 + 1) = 0;
          LODWORD(v412) = 0;
          DWORD1(v412) = v179;
          long long v413 = 0uLL;
          llvm::MachineInstr::addOperand(v194, v193, (const llvm::MachineOperand *)&v412);
          LODWORD(v412) = 1;
          *((void *)&v412 + 1) = 0;
          *(void *)&long long v413 = v176;
          llvm::MachineInstr::addOperand(v194, v193, (const llvm::MachineOperand *)&v412);
          uint64_t v172 = a2;
LABEL_289:
          unsigned int v214 = (void *)v171[1];
          if (v214)
          {
            do
            {
              uint64_t v215 = v214;
              unsigned int v214 = (void *)*v214;
            }
            while (v214);
          }
          else
          {
            do
            {
              uint64_t v215 = (void *)v171[2];
              BOOL v201 = *v215 == (void)v171;
              uint64_t v171 = v215;
            }
            while (!v201);
          }
          uint64_t v171 = v215;
        }
        while (v215 != (void *)(v381 + 144));
      }
      uint64_t v252 = v381;
      uint64_t v253 = *(_DWORD **)(v381 + 112);
      int v254 = v253[276];
      if (v254 || v253[277])
      {
        uint64_t v372 = v253 + 274;
        uint64_t v373 = v253[278];
        if (v373 > 4 * v254 && v373 >= 0x41)
        {
          sub_1CD5199E4(v372);
        }
        else
        {
          if (v373)
          {
            unsigned int v374 = *(_DWORD **)v372;
            uint64_t v375 = 24 * v373;
            do
            {
              _DWORD *v374 = -1;
              v374 += 6;
              v375 -= 24;
            }
            while (v375);
          }
          *((void *)v253 + 138) = 0;
        }
        uint64_t v252 = v381;
        uint64_t v170 = v385;
      }
      uint64_t v255 = *(unsigned int *)(v252 + 192);
      if (v255)
      {
        uint64_t v256 = *(uint64_t **)(v252 + 184);
        BOOL v257 = (void *)(v170 + 344);
        unint64_t v258 = v256;
        do
        {
          unint64_t v260 = v258[1];
          uint64_t v259 = v258[2];
          uint64_t v261 = *v258;
          uint64_t v262 = *(unsigned int *)(v259 + 24);
          uint64_t v263 = *(void *)(v170 + 392);
          if (v260 == *(void *)(v263 + 16 * v262))
          {
            uint64_t v264 = (void *)sub_1CC2EDCF8((llvm::MachineBasicBlock *)v258[2], v258[1], *(void *)(*(void *)(*(void *)(v252 + 120) + 288) + 392), (uint64_t)&v391);
            uint64_t v265 = *(void *)(v259 + 40);
            *(void *)(v261 + 24) = v265;
            uint64_t v266 = *(void *)(v265 + 32);
            uint64_t v267 = *(unsigned int *)(v261 + 40);
            if (v267)
            {
              uint64_t v342 = *(void *)(v261 + 32);
              uint64_t v343 = *(void *)(v266 + 40);
              uint64_t v344 = 32 * v267;
              do
              {
                if (!*(unsigned char *)v342)
                {
                  uint64_t v345 = *(unsigned int *)(v342 + 4);
                  if ((int)v345 >= 0) {
                    unsigned int v346 = (uint64_t *)(*(void *)(v343 + 272) + 8 * v345);
                  }
                  else {
                    unsigned int v346 = (uint64_t *)(*(void *)(v343 + 24) + 16 * (v345 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v347 = *v346;
                  if (*v346)
                  {
                    uint64_t v348 = *(void *)(v347 + 16);
                    *(void *)(v347 + 16) = v342;
                    *(void *)(v342 + 16) = v348;
                    if (*(unsigned char *)(v342 + 3))
                    {
                      *(void *)(v342 + 24) = v347;
                    }
                    else
                    {
                      *(void *)(v342 + 24) = 0;
                      unsigned int v346 = (uint64_t *)(v348 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v342 + 16) = v342;
                    *(void *)(v342 + 24) = 0;
                  }
                  *unsigned int v346 = v342;
                }
                v342 += 32;
                v344 -= 32;
              }
              while (v344);
            }
            while (1)
            {
              uint64_t v268 = *(void *)(v266 + 728);
              if (v268) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v268 + 24))(v268, v261);
              }
              unint64_t v269 = *v264 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v261 = v269 | *(void *)v261 & 7;
              *(void *)(v261 + 8) = v264;
              *(void *)(v269 + 8) = v261;
              *uint64_t v264 = *v264 & 7 | v261;
              uint64_t v270 = v258 + 3;
              uint64_t v256 = *(uint64_t **)(v252 + 184);
              uint64_t v255 = *(unsigned int *)(v252 + 192);
              if (v258 + 3 == &v256[3 * v255] || v258[4] != v260) {
                break;
              }
              v258 += 3;
              uint64_t v261 = *v270;
              uint64_t v271 = *(void *)(v259 + 40);
              *(void *)(v261 + 24) = v271;
              uint64_t v266 = *(void *)(v271 + 32);
              uint64_t v272 = *(unsigned int *)(v261 + 40);
              if (v272)
              {
                uint64_t v273 = *(void *)(v261 + 32);
                uint64_t v274 = *(void *)(v266 + 40);
                uint64_t v275 = 32 * v272;
                do
                {
                  if (!*(unsigned char *)v273)
                  {
                    uint64_t v276 = *(unsigned int *)(v273 + 4);
                    if ((int)v276 >= 0) {
                      unsigned int v277 = (uint64_t *)(*(void *)(v274 + 272) + 8 * v276);
                    }
                    else {
                      unsigned int v277 = (uint64_t *)(*(void *)(v274 + 24) + 16 * (v276 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v278 = *v277;
                    if (*v277)
                    {
                      uint64_t v279 = *(void *)(v278 + 16);
                      *(void *)(v278 + 16) = v273;
                      *(void *)(v273 + 16) = v279;
                      if (*(unsigned char *)(v273 + 3))
                      {
                        *(void *)(v273 + 24) = v278;
                      }
                      else
                      {
                        *(void *)(v273 + 24) = 0;
                        unsigned int v277 = (uint64_t *)(v279 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v273 + 16) = v273;
                      *(void *)(v273 + 24) = 0;
                    }
                    *unsigned int v277 = v273;
                  }
                  v273 += 32;
                  v275 -= 32;
                }
                while (v275);
              }
            }
          }
          else
          {
            unint64_t v280 = v260 & 0xFFFFFFFFFFFFFFF8;
            if (v260 >= 8 && (uint64_t v281 = *(void *)(v280 + 16)) != 0)
            {
              uint64_t v282 = *(void *)(v281 + 8);
              if (v282 == v259 + 48)
              {
                uint64_t v252 = v381;
              }
              else
              {
                uint64_t v252 = v381;
                while (1)
                {
                  int v283 = **(unsigned __int16 **)(v282 + 16);
                  if ((v283 - 13) >= 5 && v283 != 23) {
                    break;
                  }
                  uint64_t v282 = *(void *)(v282 + 8);
                  if (v282 == v259 + 48)
                  {
                    uint64_t v282 = v259 + 48;
                    break;
                  }
                }
              }
              uint64_t v292 = *(void *)(v259 + 40);
              *(void *)(v261 + 24) = v292;
              uint64_t v293 = *(void *)(v292 + 32);
              uint64_t v294 = *(unsigned int *)(v261 + 40);
              if (v294)
              {
                uint64_t v356 = *(void *)(v261 + 32);
                uint64_t v357 = *(void *)(v293 + 40);
                uint64_t v358 = 32 * v294;
                do
                {
                  if (!*(unsigned char *)v356)
                  {
                    uint64_t v359 = *(unsigned int *)(v356 + 4);
                    if ((int)v359 >= 0) {
                      uint64_t v360 = (uint64_t *)(*(void *)(v357 + 272) + 8 * v359);
                    }
                    else {
                      uint64_t v360 = (uint64_t *)(*(void *)(v357 + 24) + 16 * (v359 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v361 = *v360;
                    if (*v360)
                    {
                      uint64_t v362 = *(void *)(v361 + 16);
                      *(void *)(v361 + 16) = v356;
                      *(void *)(v356 + 16) = v362;
                      if (*(unsigned char *)(v356 + 3))
                      {
                        *(void *)(v356 + 24) = v361;
                      }
                      else
                      {
                        *(void *)(v356 + 24) = 0;
                        uint64_t v360 = (uint64_t *)(v362 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v356 + 16) = v356;
                      *(void *)(v356 + 24) = 0;
                    }
                    *uint64_t v360 = v356;
                  }
                  v356 += 32;
                  v358 -= 32;
                }
                while (v358);
              }
              while (1)
              {
                uint64_t v295 = *(void *)(v293 + 728);
                if (v295) {
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v295 + 24))(v295, v261, v4);
                }
                unint64_t v296 = *(void *)v282 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v261 = v296 | *(void *)v261 & 7;
                *(void *)(v261 + 8) = v282;
                *(void *)(v296 + 8) = v261;
                *(void *)uint64_t v282 = *(void *)v282 & 7 | v261;
                uint64_t v297 = v258 + 3;
                uint64_t v256 = *(uint64_t **)(v252 + 184);
                uint64_t v255 = *(unsigned int *)(v252 + 192);
                if (v258 + 3 == &v256[3 * v255] || v258[4] != v260) {
                  break;
                }
                v258 += 3;
                uint64_t v261 = *v297;
                uint64_t v298 = *(void *)(v259 + 40);
                *(void *)(v261 + 24) = v298;
                uint64_t v293 = *(void *)(v298 + 32);
                uint64_t v299 = *(unsigned int *)(v261 + 40);
                if (v299)
                {
                  uint64_t v300 = *(void *)(v261 + 32);
                  uint64_t v301 = *(void *)(v293 + 40);
                  uint64_t v302 = 32 * v299;
                  do
                  {
                    if (!*(unsigned char *)v300)
                    {
                      uint64_t v303 = *(unsigned int *)(v300 + 4);
                      if ((int)v303 >= 0) {
                        unint64_t v304 = (uint64_t *)(*(void *)(v301 + 272) + 8 * v303);
                      }
                      else {
                        unint64_t v304 = (uint64_t *)(*(void *)(v301 + 24) + 16 * (v303 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v305 = *v304;
                      if (*v304)
                      {
                        uint64_t v306 = *(void *)(v305 + 16);
                        *(void *)(v305 + 16) = v300;
                        *(void *)(v300 + 16) = v306;
                        if (*(unsigned char *)(v300 + 3))
                        {
                          *(void *)(v300 + 24) = v305;
                        }
                        else
                        {
                          *(void *)(v300 + 24) = 0;
                          unint64_t v304 = (uint64_t *)(v306 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v300 + 16) = v300;
                        *(void *)(v300 + 24) = 0;
                      }
                      uint64_t *v304 = v300;
                    }
                    v300 += 32;
                    v302 -= 32;
                  }
                  while (v302);
                }
              }
            }
            else
            {
              uint64_t v285 = *(void *)(v263 + 16 * v262 + 8);
              unint64_t v286 = v285 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v287 = (v285 >> 1) & 3;
              unsigned int v288 = v287 | *(_DWORD *)((v285 & 0xFFFFFFFFFFFFFFF8) + 24);
              unsigned int v289 = (v260 >> 1) & 3;
              if ((*(_DWORD *)(v280 + 24) | v289) < v288)
              {
                unint64_t v290 = v258[1];
                while (1)
                {
                  if (v290 > 7)
                  {
                    __int16 v291 = *(uint64_t **)(v280 + 16);
                    if (v291) {
                      break;
                    }
                  }
                  while (1)
                  {
                    unint64_t v280 = *(void *)(v280 + 8);
                    if ((void *)v280 == v257) {
                      break;
                    }
                    if (*(void *)(v280 + 16))
                    {
                      unint64_t v290 = v280 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v290 >> 1) & 3));
                      goto LABEL_427;
                    }
                  }
                  unint64_t v290 = *v257 & 0xFFFFFFFFFFFFFFF9;
LABEL_427:
                  unint64_t v280 = v290 & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v289 = (v290 >> 1) & 3;
                  if ((v289 | *(_DWORD *)((v290 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v288) {
                    goto LABEL_474;
                  }
                }
                uint64_t v307 = *(void *)(v259 + 40);
                *(void *)(v261 + 24) = v307;
                uint64_t v308 = *(void *)(v307 + 32);
                uint64_t v309 = *(unsigned int *)(v261 + 40);
                if (v309)
                {
                  uint64_t v363 = *(void *)(v261 + 32);
                  uint64_t v364 = *(void *)(v308 + 40);
                  uint64_t v365 = 32 * v309;
                  do
                  {
                    if (!*(unsigned char *)v363)
                    {
                      uint64_t v366 = *(unsigned int *)(v363 + 4);
                      if ((int)v366 >= 0) {
                        unint64_t v367 = (uint64_t *)(*(void *)(v364 + 272) + 8 * v366);
                      }
                      else {
                        unint64_t v367 = (uint64_t *)(*(void *)(v364 + 24) + 16 * (v366 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v368 = *v367;
                      if (*v367)
                      {
                        uint64_t v369 = *(void *)(v368 + 16);
                        *(void *)(v368 + 16) = v363;
                        *(void *)(v363 + 16) = v369;
                        if (*(unsigned char *)(v363 + 3))
                        {
                          *(void *)(v363 + 24) = v368;
                        }
                        else
                        {
                          *(void *)(v363 + 24) = 0;
                          unint64_t v367 = (uint64_t *)(v369 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v363 + 16) = v363;
                        *(void *)(v363 + 24) = 0;
                      }
                      *unint64_t v367 = v363;
                    }
                    v363 += 32;
                    v365 -= 32;
                  }
                  while (v365);
                }
                uint64_t v310 = *(void *)(v308 + 728);
                if (v310) {
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v310 + 24))(v310, v261, v4);
                }
                unint64_t v311 = *v291 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v261 = v311 | *(void *)v261 & 7;
                *(void *)(v261 + 8) = v291;
                *(void *)(v311 + 8) = v261;
                uint64_t *v291 = *v291 & 7 | v261;
                uint64_t v312 = v258 + 3;
                uint64_t v256 = *(uint64_t **)(v381 + 184);
                uint64_t v255 = *(unsigned int *)(v381 + 192);
                if (v258 + 3 != &v256[3 * v255])
                {
                  unint64_t v387 = v286;
                  do
                  {
                    if (v258[4] != v260) {
                      break;
                    }
                    unint64_t v258 = v312;
                    uint64_t v313 = *v312;
                    uint64_t v314 = *(void *)(v259 + 40);
                    *(void *)(v313 + 24) = v314;
                    uint64_t v315 = *(void *)(v314 + 32);
                    uint64_t v316 = *(unsigned int *)(v313 + 40);
                    if (v316)
                    {
                      uint64_t v319 = *(void *)(v313 + 32);
                      uint64_t v320 = *(void *)(v315 + 40);
                      uint64_t v321 = 32 * v316;
                      do
                      {
                        if (!*(unsigned char *)v319)
                        {
                          uint64_t v322 = *(unsigned int *)(v319 + 4);
                          if ((int)v322 >= 0) {
                            int v323 = (uint64_t *)(*(void *)(v320 + 272) + 8 * v322);
                          }
                          else {
                            int v323 = (uint64_t *)(*(void *)(v320 + 24) + 16 * (v322 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v324 = *v323;
                          if (*v323)
                          {
                            uint64_t v325 = *(void *)(v324 + 16);
                            *(void *)(v324 + 16) = v319;
                            *(void *)(v319 + 16) = v325;
                            if (*(unsigned char *)(v319 + 3))
                            {
                              *(void *)(v319 + 24) = v324;
                            }
                            else
                            {
                              *(void *)(v319 + 24) = 0;
                              int v323 = (uint64_t *)(v325 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v319 + 16) = v319;
                            *(void *)(v319 + 24) = 0;
                          }
                          *int v323 = v319;
                        }
                        v319 += 32;
                        v321 -= 32;
                      }
                      while (v321);
                    }
                    uint64_t v317 = *(void *)(v315 + 728);
                    if (v317) {
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v317 + 24))(v317, v313, v4);
                    }
                    unint64_t v318 = *v291 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)uint64_t v313 = v318 | *(void *)v313 & 7;
                    *(void *)(v313 + 8) = v291;
                    *(void *)(v318 + 8) = v313;
                    uint64_t *v291 = *v291 & 7 | v313;
                    uint64_t v312 = v258 + 3;
                    uint64_t v256 = *(uint64_t **)(v381 + 184);
                    uint64_t v255 = *(unsigned int *)(v381 + 192);
                  }
                  while (v258 + 3 != &v256[3 * v255]);
                  unint64_t v286 = v387;
                }
              }
LABEL_474:
              if ((*(_DWORD *)(v280 + 24) | v289) >= (*(_DWORD *)(v286 + 24) | v287))
              {
                unint64_t FirstTerminator = (void *)llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v259);
                uint64_t v327 = *(void *)(v259 + 40);
                *(void *)(v261 + 24) = v327;
                uint64_t v328 = *(void *)(v327 + 32);
                uint64_t v329 = *(unsigned int *)(v261 + 40);
                uint64_t v252 = v381;
                uint64_t v170 = v385;
                if (v329)
                {
                  uint64_t v349 = *(void *)(v261 + 32);
                  uint64_t v350 = *(void *)(v328 + 40);
                  uint64_t v351 = 32 * v329;
                  do
                  {
                    if (!*(unsigned char *)v349)
                    {
                      uint64_t v352 = *(unsigned int *)(v349 + 4);
                      if ((int)v352 >= 0) {
                        uint64_t v353 = (uint64_t *)(*(void *)(v350 + 272) + 8 * v352);
                      }
                      else {
                        uint64_t v353 = (uint64_t *)(*(void *)(v350 + 24) + 16 * (v352 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v354 = *v353;
                      if (*v353)
                      {
                        uint64_t v355 = *(void *)(v354 + 16);
                        *(void *)(v354 + 16) = v349;
                        *(void *)(v349 + 16) = v355;
                        if (*(unsigned char *)(v349 + 3))
                        {
                          *(void *)(v349 + 24) = v354;
                        }
                        else
                        {
                          *(void *)(v349 + 24) = 0;
                          uint64_t v353 = (uint64_t *)(v355 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v349 + 16) = v349;
                        *(void *)(v349 + 24) = 0;
                      }
                      uint64_t *v353 = v349;
                    }
                    v349 += 32;
                    v351 -= 32;
                  }
                  while (v351);
                }
                while (1)
                {
                  uint64_t v330 = *(void *)(v328 + 728);
                  if (v330) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v330 + 24))(v330, v261);
                  }
                  unint64_t v331 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
                  *(void *)uint64_t v261 = v331 | *(void *)v261 & 7;
                  *(void *)(v261 + 8) = FirstTerminator;
                  *(void *)(v331 + 8) = v261;
                  *unint64_t FirstTerminator = *FirstTerminator & 7 | v261;
                  unint64_t v332 = v258 + 3;
                  uint64_t v256 = *(uint64_t **)(v381 + 184);
                  uint64_t v255 = *(unsigned int *)(v381 + 192);
                  if (v258 + 3 == &v256[3 * v255] || v258[4] != v260) {
                    break;
                  }
                  v258 += 3;
                  uint64_t v261 = *v332;
                  uint64_t v333 = *(void *)(v259 + 40);
                  *(void *)(v261 + 24) = v333;
                  uint64_t v328 = *(void *)(v333 + 32);
                  uint64_t v334 = *(unsigned int *)(v261 + 40);
                  if (v334)
                  {
                    uint64_t v335 = *(void *)(v261 + 32);
                    uint64_t v336 = *(void *)(v328 + 40);
                    uint64_t v337 = 32 * v334;
                    do
                    {
                      if (!*(unsigned char *)v335)
                      {
                        uint64_t v338 = *(unsigned int *)(v335 + 4);
                        if ((int)v338 >= 0) {
                          int v339 = (uint64_t *)(*(void *)(v336 + 272) + 8 * v338);
                        }
                        else {
                          int v339 = (uint64_t *)(*(void *)(v336 + 24) + 16 * (v338 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v340 = *v339;
                        if (*v339)
                        {
                          uint64_t v341 = *(void *)(v340 + 16);
                          *(void *)(v340 + 16) = v335;
                          *(void *)(v335 + 16) = v341;
                          if (*(unsigned char *)(v335 + 3))
                          {
                            *(void *)(v335 + 24) = v340;
                          }
                          else
                          {
                            *(void *)(v335 + 24) = 0;
                            int v339 = (uint64_t *)(v341 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v335 + 16) = v335;
                          *(void *)(v335 + 24) = 0;
                        }
                        uint64_t *v339 = v335;
                      }
                      v335 += 32;
                      v337 -= 32;
                    }
                    while (v337);
                  }
                }
              }
              else
              {
                uint64_t v252 = v381;
                uint64_t v170 = v385;
              }
            }
          }
          v258 += 3;
        }
        while (v258 != &v256[3 * v255]);
      }
      *(unsigned char *)(v252 + 968) = 1;
      if (v392)
      {
        if (v393 > 4 * (int)v392 && v393 >= 0x41)
        {
          sub_1CD3C8060(&v391);
        }
        else if (v393)
        {
          unint64_t v370 = v391;
          uint64_t v371 = 16 * v393;
          do
          {
            *unint64_t v370 = -4096;
            v370 += 2;
            v371 -= 16;
          }
          while (v371);
        }
      }
      MEMORY[0x1D25D9CD0](v388, 4, v4);
      return MEMORY[0x1D25D9CD0](v391, 8);
    }
  }
  return result;
}

void sub_1CC2E85AC(llvm *a1)
{
  v62[8] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 31);
  if (!v1) {
    return;
  }
  uint64_t v2 = llvm::dbgs(a1);
  uint64_t v3 = v2;
  uint64_t v4 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v4 > 0x25uLL)
  {
    qmemcpy(v4, "********** DEBUG VARIABLES **********\n", 38);
    *((void *)v2 + 4) += 38;
  }
  else
  {
    llvm::raw_ostream::write(v2, "********** DEBUG VARIABLES **********\n", 0x26uLL);
  }
  uint64_t v5 = *(unsigned int *)(v1 + 984);
  if (!v5) {
    goto LABEL_78;
  }
  uint64_t v6 = *(uint64_t **)(v1 + 976);
  uint64_t v53 = &v6[v5];
  uint64_t v52 = v1;
  do
  {
    uint64_t v7 = *v6;
    uint64_t v54 = *(void *)(v1 + 128);
    uint64_t v8 = (_WORD *)*((void *)v3 + 4);
    if (*((void *)v3 + 3) - (void)v8 > 1uLL)
    {
      *uint64_t v8 = 8737;
      *((void *)v3 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v3, "!\"", 2uLL);
    }
    sub_1CC2EE894(v3, *(unsigned __int8 **)v7, *(void *)(v7 + 32));
    uint64_t v9 = (_WORD *)*((void *)v3 + 4);
    if (*((void *)v3 + 3) - (void)v9 > 1uLL)
    {
      *uint64_t v9 = 2338;
      *((void *)v3 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v3, "\"\t", 2uLL);
    }
    sub_1CC2ECFB4((uint64_t)&v55, v7 + 200);
    uint64_t v59 = v55;
    unint64_t v60 = v62;
    uint64_t v61 = 0x400000000;
    if (v57) {
      sub_1CC2D01B8((uint64_t)&v60, (uint64_t)&v56);
    }
    if (v56 != &v58) {
      free(v56);
    }
    while (v61 && *((_DWORD *)v60 + 3) < *((_DWORD *)v60 + 2))
    {
      uint64_t v10 = (_WORD *)*((void *)v3 + 4);
      if (*((void *)v3 + 3) - (void)v10 > 1uLL)
      {
        _WORD *v10 = 23328;
        *((void *)v3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v3, " [", 2uLL);
      }
      uint64_t v55 = *(void *)(*((void *)v60 + 2 * v61 - 2)
                      + 16 * *((unsigned int *)v60 + 4 * v61 - 1));
      llvm::SlotIndex::print((llvm::SlotIndex *)&v55, v3);
      uint64_t v11 = (unsigned char *)*((void *)v3 + 4);
      if ((unint64_t)v11 >= *((void *)v3 + 3))
      {
        llvm::raw_ostream::write(v3, 59);
      }
      else
      {
        *((void *)v3 + 4) = v11 + 1;
        unsigned char *v11 = 59;
      }
      uint64_t v55 = *(void *)(*((void *)v60 + 2 * v61 - 2)
                      + 16 * *((unsigned int *)v60 + 4 * v61 - 1)
                      + 8);
      llvm::SlotIndex::print((llvm::SlotIndex *)&v55, v3);
      int v12 = (_WORD *)*((void *)v3 + 4);
      if (*((void *)v3 + 3) - (void)v12 > 1uLL)
      {
        *int v12 = 14889;
        *((void *)v3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v3, "):", 2uLL);
      }
      long long v13 = (char *)v60 + 16 * v61;
      uint64_t v14 = *((void *)v13 - 2);
      unsigned int v15 = *((_DWORD *)v13 - 1);
      char v16 = *(unsigned char *)(v14 + 24 * v15 + 72);
      uint64_t v17 = v16 & 0x3F;
      if ((v16 & 0x3F) == 0
        || ((v18 = *(__int32 **)(v14 + 24 * v15 + 64), (int v19 = wmemchr(v18, -1, v16 & 0x3F)) != 0)
          ? (uint64_t v20 = v19)
          : (uint64_t v20 = &v18[v17]),
            v17 != v20 - v18))
      {
        uint64_t v31 = *((void *)v3 + 4);
        if ((unint64_t)(*((void *)v3 + 3) - v31) <= 5)
        {
          uint64_t v32 = v3;
          long long v33 = " undef";
          size_t v34 = 6;
LABEL_44:
          llvm::raw_ostream::write(v32, v33, v34);
          goto LABEL_45;
        }
        *(_WORD *)(v31 + 4) = 26213;
        *(_DWORD *)uint64_t v31 = 1684960544;
        uint64_t v37 = *((void *)v3 + 4) + 6;
        goto LABEL_56;
      }
      uint64_t v21 = *((void *)v60 + 2 * v61 - 2) + 24 * *((unsigned int *)v60 + 4 * v61 - 1);
      uint64_t v24 = *(unsigned int **)(v21 + 64);
      uint64_t v22 = v21 + 64;
      BOOL v23 = v24;
      char v25 = *(unsigned char *)(v22 + 8);
      if ((v25 & 0x3F) != 0)
      {
        uint64_t v26 = 4 * (v25 & 0x3F);
        do
        {
          if (v23 == *(unsigned int **)v22) {
            uint64_t v27 = " ";
          }
          else {
            uint64_t v27 = ", ";
          }
          if (v23 == *(unsigned int **)v22) {
            size_t v28 = 1;
          }
          else {
            size_t v28 = 2;
          }
          long long v29 = (void *)*((void *)v3 + 4);
          if (v28 <= *((void *)v3 + 3) - (void)v29)
          {
            memcpy(v29, v27, v28);
            *((void *)v3 + 4) += v28;
          }
          else
          {
            llvm::raw_ostream::write(v3, v27, v28);
          }
          unsigned int v30 = *v23++;
          sub_1CD098D14(v3, v30, 0, 0, 0);
          v26 -= 4;
        }
        while (v26);
        char v25 = *(unsigned char *)(*((void *)v60 + 2 * v61 - 2)
                       + 24 * *((unsigned int *)v60 + 4 * v61 - 1)
                       + 72);
        uint64_t v1 = v52;
        if ((v25 & 0x40) != 0)
        {
LABEL_51:
          unsigned int v36 = (_DWORD *)*((void *)v3 + 4);
          if (*((void *)v3 + 3) - (void)v36 <= 3uLL)
          {
            uint64_t v32 = v3;
            long long v33 = " ind";
            size_t v34 = 4;
            goto LABEL_44;
          }
          *unsigned int v36 = 1684957472;
          uint64_t v37 = *((void *)v3 + 4) + 4;
          goto LABEL_56;
        }
      }
      else if ((*(unsigned char *)(v22 + 8) & 0x40) != 0)
      {
        goto LABEL_51;
      }
      if ((v25 & 0x80) == 0) {
        goto LABEL_45;
      }
      uint64_t v35 = *((void *)v3 + 4);
      if ((unint64_t)(*((void *)v3 + 3) - v35) <= 4)
      {
        uint64_t v32 = v3;
        long long v33 = " list";
        size_t v34 = 5;
        goto LABEL_44;
      }
      *(unsigned char *)(v35 + 4) = 116;
      *(_DWORD *)uint64_t v35 = 1936288800;
      uint64_t v37 = *((void *)v3 + 4) + 5;
LABEL_56:
      *((void *)v3 + 4) = v37;
LABEL_45:
      sub_1CC2ED240((uint64_t)&v59);
    }
    if (v60 != v62) {
      free(v60);
    }
    uint64_t v38 = *(unsigned int *)(v7 + 64);
    if (v38)
    {
      uint64_t v39 = 0;
      for (unint64_t i = 0; i != v38; ++i)
      {
        uint64_t v41 = (_DWORD *)*((void *)v3 + 4);
        if (*((void *)v3 + 3) - (void)v41 > 3uLL)
        {
          _DWORD *v41 = 1668238368;
          *((void *)v3 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v3, " Loc", 4uLL);
        }
        sub_1CD098D14(v3, i, 0, 0, 0);
        BOOL v42 = (unsigned char *)*((void *)v3 + 4);
        if ((unint64_t)v42 >= *((void *)v3 + 3))
        {
          llvm::raw_ostream::write(v3, 61);
        }
        else
        {
          *((void *)v3 + 4) = v42 + 1;
          *BOOL v42 = 61;
        }
        llvm::MachineOperand::print((llvm::raw_ostream *)(*(void *)(v7 + 56) + v39), v3, 0, v54, 0);
        v39 += 32;
      }
    }
    unint64_t v43 = (unsigned char *)*((void *)v3 + 4);
    if ((unint64_t)v43 >= *((void *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((void *)v3 + 4) = v43 + 1;
      unsigned char *v43 = 10;
    }
    ++v6;
  }
  while (v6 != v53);
LABEL_78:
  uint64_t v44 = (void *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v44 > 0x22uLL)
  {
    qmemcpy(v44, "********** DEBUG LABELS **********\n", 35);
    *((void *)v3 + 4) += 35;
  }
  else
  {
    llvm::raw_ostream::write(v3, "********** DEBUG LABELS **********\n", 0x23uLL);
  }
  uint64_t v45 = *(unsigned int *)(v1 + 1064);
  if (v45)
  {
    int v46 = *(uint64_t **)(v1 + 1056);
    uint64_t v47 = 8 * v45;
    do
    {
      uint64_t v48 = *v46;
      uint64_t v49 = (_WORD *)*((void *)v3 + 4);
      if (*((void *)v3 + 3) - (void)v49 > 1uLL)
      {
        *uint64_t v49 = 8737;
        *((void *)v3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v3, "!\"", 2uLL);
      }
      sub_1CC2EE894(v3, *(unsigned __int8 **)v48, *(void *)(v48 + 8));
      long long v50 = (_WORD *)*((void *)v3 + 4);
      if (*((void *)v3 + 3) - (void)v50 > 1uLL)
      {
        *long long v50 = 2338;
        *((void *)v3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v3, "\"\t", 2uLL);
      }
      uint64_t v59 = *(void *)(v48 + 16);
      llvm::SlotIndex::print((llvm::SlotIndex *)&v59, v3);
      unint64_t v51 = (unsigned char *)*((void *)v3 + 4);
      if ((unint64_t)v51 >= *((void *)v3 + 3))
      {
        llvm::raw_ostream::write(v3, 10);
      }
      else
      {
        *((void *)v3 + 4) = v51 + 1;
        *unint64_t v51 = 10;
      }
      ++v46;
      v47 -= 8;
    }
    while (v47);
  }
}

double sub_1CC2E8D14@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 1024;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

void sub_1CC2E8D3C(uint64_t a1, uint64_t a2, llvm::MachineOperand *this, uint64_t a4, int a5, int a6, uint64_t a7)
{
  v31[6] = *MEMORY[0x1E4F143B8];
  long long v29 = (__int32 *)v31;
  uint64_t v30 = 0xC00000000;
  if (a4)
  {
    uint64_t v13 = 32 * a4;
    do
    {
      __int32 v14 = sub_1CC2E9B2C(a1, this);
      if (v30 >= (unint64_t)HIDWORD(v30)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v29[v30] = v14;
      uint64_t v15 = (v30 + 1);
      LODWORD(v30) = v30 + 1;
      this = (llvm::MachineOperand *)((char *)this + 32);
      v13 -= 32;
    }
    while (v13);
    char v16 = v29;
  }
  else
  {
    uint64_t v15 = 0;
    char v16 = (__int32 *)v31;
  }
  sub_1CC2E9CCC((uint64_t)v24, v16, v15, a5, a6, a7);
  uint64_t v25 = a1 + 200;
  uint64_t v26 = v28;
  uint64_t v27 = 0x400000000;
  sub_1CC2EA918((uint64_t)&v25, a2);
  if (v27
    && *((_DWORD *)v26 + 3) < *((_DWORD *)v26 + 2)
    && *(void *)(*((void *)v26 + 2 * v27 - 2)
                 + 16 * *((unsigned int *)v26 + 4 * v27 - 1)) == a2)
  {
    sub_1CC2EA3E8((uint64_t)v22, (uint64_t)v24);
    sub_1CC2EA4B8((uint64_t)&v25, (uint64_t)v22);
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (!v17) {
      goto LABEL_18;
    }
LABEL_17:
    MEMORY[0x1D25D9CB0](v17, 0x1000C8052888210);
    goto LABEL_18;
  }
  unsigned int v18 = (a2 >> 1) & 3;
  unint64_t v19 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v18 == 3) {
    unint64_t v20 = *(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF9;
  }
  else {
    unint64_t v20 = v19 | (2 * v18 + 2);
  }
  sub_1CC2EA3E8((uint64_t)v23, (uint64_t)v24);
  sub_1CC2E9FA4((uint64_t)&v25, a2, v20, (uint64_t)v23);
  uint64_t v17 = v23[0];
  v23[0] = 0;
  if (v17) {
    goto LABEL_17;
  }
LABEL_18:
  if (v26 != v28) {
    free(v26);
  }
  uint64_t v21 = v24[0];
  v24[0] = 0;
  if (v21) {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8052888210);
  }
  if (v29 != (__int32 *)v31) {
    free(v29);
  }
}

uint64_t *sub_1CC2E8F90(uint64_t *a1)
{
  void v38[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1CB833A08(v2 + 408, *(void **)(v2 + 416));
    uint64_t v3 = *(void **)(v2 + 376);
    if (v3 != (void *)(v2 + 392)) {
      free(v3);
    }
    int v4 = *(_DWORD *)(v2 + 360);
    if (v4)
    {
      uint64_t v5 = (int *)(v2 + 360);
      unsigned int v36 = v38;
      uint64_t v37 = 0x400000000;
      long long v33 = v35;
      uint64_t v34 = 0x400000000;
      unsigned int v6 = *(_DWORD *)(v2 + 364);
      if (v6)
      {
        unsigned int v6 = 0;
        unsigned int v7 = 0;
        do
        {
          if (v6 >= HIDWORD(v37)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v36 + v6) = *(void *)(v2 + 208 + 8 * v7);
          unsigned int v6 = v37 + 1;
          LODWORD(v37) = v37 + 1;
          ++v7;
        }
        while (v7 != *(_DWORD *)(v2 + 364));
        int v4 = *v5;
      }
      int v8 = v4 - 1;
      if (v4 != 1)
      {
        do
        {
          uint64_t v9 = v37;
          if (v37)
          {
            uint64_t v10 = 0;
            uint64_t v11 = v36;
            unsigned int v12 = v34;
            do
            {
              uint64_t v13 = 0;
              uint64_t v14 = 8 * (v11[v10] & 0x3FLL) + 8;
              do
              {
                if (v12 >= HIDWORD(v34)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v33 + v12) = *(void *)((*((void *)v36 + v10) & 0xFFFFFFFFFFFFFFC0) + v13);
                unsigned int v12 = v34 + 1;
                LODWORD(v34) = v34 + 1;
                v13 += 8;
              }
              while (v14 != v13);
              uint64_t v11 = v36;
              uint64_t v15 = (void *)(*((void *)v36 + v10) & 0xFFFFFFFFFFFFFFC0);
              char v16 = *(void **)(v2 + 368);
              void *v15 = *v16;
              void *v16 = v15;
              ++v10;
            }
            while (v10 != v9);
          }
          LODWORD(v37) = 0;
          sub_1CC2E99B4(&v36, &v33);
          --v8;
        }
        while (v8);
        unsigned int v6 = v37;
      }
      if (v6)
      {
        uint64_t v17 = 0;
        uint64_t v18 = v6;
        do
        {
          unint64_t v19 = (void *)(*((void *)v36 + v17) & 0xFFFFFFFFFFFFFFC0);
          for (uint64_t i = 17; i != 5; i -= 3)
          {
            uint64_t v21 = v19[i];
            v19[i] = 0;
            if (v21) {
              MEMORY[0x1D25D9CB0](v21, 0x1000C8052888210);
            }
          }
          uint64_t v22 = *(void **)(v2 + 368);
          *unint64_t v19 = *v22;
          void *v22 = v19;
          ++v17;
        }
        while (v17 != v18);
      }
      if (v33 != v35) {
        free(v33);
      }
      if (v36 != v38) {
        free(v36);
      }
      uint64_t v23 = v2 + 264;
      *(_DWORD *)(v2 + 360) = 0;
      *(_OWORD *)(v2 + 328) = 0u;
      *(_OWORD *)(v2 + 344) = 0u;
      *(_OWORD *)(v2 + 296) = 0u;
      *(_OWORD *)(v2 + 312) = 0u;
      *(_OWORD *)(v2 + 264) = 0u;
      *(_OWORD *)(v2 + 280) = 0u;
      *(_OWORD *)(v2 + 232) = 0u;
      *(_OWORD *)(v2 + 248) = 0u;
      *(_OWORD *)(v2 + 200) = 0u;
      *(_OWORD *)(v2 + 216) = 0u;
      do
      {
        *(void *)uint64_t v23 = 0;
        *(unsigned char *)(v23 + 8) = 0;
        *(void *)(v23 + 16) = 0;
        v23 += 24;
      }
      while ((int *)v23 != v5);
    }
    *(_DWORD *)(v2 + 364) = 0;
    for (uint64_t j = 336; j != 240; j -= 24)
    {
      uint64_t v25 = *(void *)(v2 + j);
      *(void *)(v2 + j) = 0;
      if (v25) {
        MEMORY[0x1D25D9CB0](v25, 0x1000C8052888210);
      }
    }
    uint64_t v26 = *(void **)(v2 + 56);
    if (v26 != (void *)(v2 + 72)) {
      free(v26);
    }
    uint64_t v27 = *(unsigned __int8 **)(v2 + 32);
    if (!v27) {
      goto LABEL_45;
    }
    int v28 = *v27;
    if ((v28 - 4) > 0x1E)
    {
      if ((v28 - 3) >= 0xFFFFFFFE) {
        uint64_t v30 = *(void *)(v2 + 32);
      }
      else {
        uint64_t v30 = 0;
      }
      if ((v28 - 3) < 0xFFFFFFFE)
      {
        if (v28 == 3) {
          *((void *)v27 + 1) = 0;
        }
        goto LABEL_45;
      }
      unint64_t v31 = v30 + 8;
    }
    else
    {
      if ((v27[1] & 0x7F) != 2 && !*((_DWORD *)v27 + 3)) {
        goto LABEL_45;
      }
      uint64_t v32 = *((void *)v27 + 2);
      if ((v32 & 4) == 0) {
        goto LABEL_45;
      }
      unint64_t v31 = v32 & 0xFFFFFFFFFFFFFFF8;
      if (!v31) {
        goto LABEL_45;
      }
    }
    unsigned int v36 = (void *)(v2 + 32);
    sub_1CC5FA668(v31 + 16, &v36);
LABEL_45:
    MEMORY[0x1D25D9CE0](v2, 0x10F2C40C1165021);
  }
  return a1;
}

uint64_t sub_1CC2E9354(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  if (!a2)
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    goto LABEL_5;
  }
  int v7 = a2 - 1;
  unsigned int v8 = sub_1CC2E9470(a3) & (a2 - 1);
  uint64_t v9 = a1 + 48 * v8;
  if (sub_1CC2E9944((uint64_t)a3, v9))
  {
    uint64_t result = 1;
    goto LABEL_5;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    if (*(void *)v9) {
      goto LABEL_8;
    }
    if (!*(unsigned char *)(v9 + 24)) {
      break;
    }
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      BOOL v13 = *(void *)(v9 + 32) == 0;
      goto LABEL_9;
    }
LABEL_8:
    BOOL v13 = 0;
LABEL_9:
    if (v13 && v11 == 0) {
      uint64_t v11 = v9;
    }
    int v14 = v12 + 1;
    unsigned int v8 = (v8 + v12) & v7;
    uint64_t v9 = a1 + 48 * v8;
    BOOL v15 = sub_1CC2E9944((uint64_t)a3, v9);
    uint64_t result = 1;
    int v12 = v14;
    if (v15) {
      goto LABEL_5;
    }
  }
  if (*(void *)(v9 + 32)) {
    goto LABEL_8;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v9 = v11;
  }
LABEL_5:
  *a4 = v9;
  return result;
}

unint64_t sub_1CC2E9470(uint64_t *a1)
{
  int v5 = 0;
  if (*((unsigned char *)a1 + 24)) {
    int v5 = *((unsigned __int16 *)a1 + 8) | (*((_DWORD *)a1 + 2) << 16);
  }
  uint64_t v1 = *a1;
  uint64_t v3 = a1[4];
  uint64_t v4 = v1;
  return sub_1CC2E94C8(&v4, &v5, &v3);
}

unint64_t sub_1CC2E94C8(void *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  int v5 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    BOOL v13 = a1;
    int v8 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v5 = &unk_1EBCBE000;
    uint64_t v4 = a2;
    uint64_t v3 = a3;
    int v9 = v8;
    a1 = v13;
    if (v9)
    {
      unint64_t v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v10 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v10;
      __cxa_guard_release(&qword_1EBCBE588);
      int v5 = (void *)&unk_1EBCBE000;
      uint64_t v3 = a3;
      a1 = v13;
      uint64_t v4 = a2;
    }
  }
  uint64_t v6 = *a1;
  uint64_t v17 = v5[176];
  *(void *)&v14[0] = v6;
  return sub_1CC2E95DC((char *)v14, 0, (_DWORD *)v14 + 2, (char *)v15, v4, v3);
}

unint64_t sub_1CC2E95DC(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6)
{
  uint64_t v15 = a2;
  int v9 = sub_1CC0AC9D0(a1, &v15, a3, (unint64_t)a4, *a5);
  uint64_t v16 = v15;
  unint64_t v10 = (char *)sub_1CC2E96A4(a1, &v16, v9, (unint64_t)a4, *a6);
  uint64_t v11 = v16;
  if (!v16) {
    return sub_1CBAE06B8(a1, v10 - a1, *((void *)a1 + 15));
  }
  int v14 = v10;
  if (v10 != a1 && v10 != a4) {
    sub_1CBFFD1E8(a1, v10, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v14[v11 - (void)a1]);
}

void *sub_1CC2E96A4(void *a1, uint64_t *a2, void *__dst, unint64_t a4, uint64_t a5)
{
  uint64_t __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *std::string __dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = a1[5];
      uint64_t v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      uint64_t v21 = __ROR8__(v14 + a1[10], 33);
      uint64_t v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v23 = v14 + v22;
      uint64_t v25 = a1[2];
      uint64_t v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      uint64_t v26 = v21 + v17 + a1[4];
      uint64_t v27 = v22 + v12 + v25;
      uint64_t v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      uint64_t v29 = v9 + 64;
    }
    else
    {
      unint64_t v30 = a1[15];
      uint64_t v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      unint64_t v32 = v30 ^ (v30 >> 47);
      uint64_t v33 = a1[1];
      uint64_t v34 = v33 + v30 + v31;
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      uint64_t v37 = a1[5];
      uint64_t v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      unint64_t v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      unint64_t v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      unint64_t v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      uint64_t v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      uint64_t v45 = a1[2];
      uint64_t v44 = a1[3];
      uint64_t v46 = v43 + v33 + v45;
      unint64_t v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      unint64_t v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v37 + v35 + v48, 44) + v48 + __ROR8__(v38 + v45 + v36 + v48, 21);
      uint64_t v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 8 - v8 <= a4)
    {
      memcpy(a1, (char *)&__src + v8, 8 - v8);
      return (void *)((char *)a1 + 8 - v8);
    }
  }
  return a1;
}

BOOL sub_1CC2E9944(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if ((*(unsigned char *)(a1 + 24) == 0) == (v3 != 0)) {
      return 0;
    }
  }
  else if (*(void *)(a1 + 8) != *(void *)(a2 + 8) || *(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
    return 0;
  }
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

_DWORD *sub_1CC2E99B4(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = *(void *)result;
    if (*(_DWORD **)result == result + 4 || *(_DWORD **)a2 == a2 + 4)
    {
      if (result[3] < a2[2]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v5 = result[2];
      if (a2[3] < v5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v6 = a2[2];
      if (v5 >= v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = v5;
      }
      if (v7)
      {
        uint64_t v11 = *(uint64_t **)result;
        uint64_t v12 = *(uint64_t **)a2;
        uint64_t v13 = v7;
        do
        {
          uint64_t v14 = *v11;
          *v11++ = *v12;
          *v12++ = v14;
          --v13;
        }
        while (v13);
      }
      if (v6 < v5)
      {
        int v15 = v5 - v6;
        uint64_t result = memcpy((void *)(*(void *)a2 + 8 * v6), (const void *)(*(void *)result + 8 * v7), *(void *)result + 8 * v5 - (*(void *)result + 8 * v7));
        a2[2] += v15;
        void v3[2] = v7;
      }
      else if (v6 > v5)
      {
        int v8 = v6 - v5;
        uint64_t result = memcpy((void *)(*(void *)result + 8 * v5), (const void *)(*(void *)a2 + 8 * v7), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v7));
        v3[2] += v8;
        a2[2] = v7;
      }
    }
    else
    {
      *(void *)uint64_t result = *(void *)a2;
      *(void *)a2 = v4;
      int v9 = result[2];
      result[2] = a2[2];
      a2[2] = v9;
      int v10 = result[3];
      result[3] = a2[3];
      a2[3] = v10;
    }
  }
  return result;
}

uint64_t sub_1CC2E9B2C(uint64_t a1, llvm::MachineOperand *this)
{
  if (*(_DWORD *)this)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 64);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      while (!llvm::MachineOperand::isIdenticalTo(this, (const llvm::MachineOperand *)(*(void *)(a1 + 56) + v5)))
      {
        ++v6;
        v5 += 32;
        if (v4 == v6)
        {
          LODWORD(v7) = *(_DWORD *)(a1 + 64);
          goto LABEL_18;
        }
      }
      return v6;
    }
    LODWORD(v7) = 0;
LABEL_18:
    unint64_t v12 = *(void *)(a1 + 56);
    if (v7 >= *(_DWORD *)(a1 + 68))
    {
      unint64_t v19 = v12 + 32 * v7;
      if (v12 > (unint64_t)this || v19 <= (unint64_t)this) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v13 = (_OWORD *)(v12 + 32 * *(unsigned int *)(a1 + 64));
    long long v14 = *((_OWORD *)this + 1);
    *uint64_t v13 = *(_OWORD *)this;
    v13[1] = v14;
    uint64_t result = *(unsigned int *)(a1 + 64);
    uint64_t v15 = (result + 1);
    *(_DWORD *)(a1 + 64) = v15;
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = v16 + 32 * v15;
    *(void *)(v17 - 24) = 0;
    int v18 = *(_DWORD *)(v17 - 32);
    if (!(_BYTE)v18)
    {
      if ((v18 & 0x1000000) != 0)
      {
        *(_DWORD *)(v17 - 32) = v18 & 0xFBFFFFFF;
        uint64_t v16 = *(void *)(a1 + 56);
        uint64_t v15 = *(unsigned int *)(a1 + 64);
      }
      llvm::MachineOperand::setIsDef(v16 + 32 * v15 - 32, 0);
      return (*(_DWORD *)(a1 + 64) - 1);
    }
    return result;
  }
  int v8 = *((_DWORD *)this + 1);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 64);
  if (!v7) {
    goto LABEL_18;
  }
  uint64_t result = 0;
  int v10 = (_DWORD *)(*(void *)(a1 + 56) + 4);
  while (*(v10 - 1) || *v10 != v8 || ((*(v10 - 1) ^ *(_DWORD *)this) & 0xFFF00) != 0)
  {
    ++result;
    v10 += 8;
    if (v7 == result) {
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t sub_1CC2E9CCC(uint64_t a1, __int32 *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  v25[6] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  if (a4) {
    char v7 = 64;
  }
  else {
    char v7 = 0;
  }
  if (a5) {
    char v8 = 0x80;
  }
  else {
    char v8 = 0;
  }
  char v9 = v8 | v7;
  *(unsigned char *)(a1 + 8) = v9 & 0xC0 | *(unsigned char *)(a1 + 8) & 0x3F;
  *(void *)(a1 + 16) = a6;
  __s = (__int32 *)v25;
  size_t __n = 0xC00000000;
  if (a3)
  {
    uint64_t v12 = 4 * a3;
    do
    {
      __int32 v13 = *a2;
      long long v14 = wmemchr(__s, *a2, __n);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = &__s[__n];
      }
      if (v15 == &__s[__n])
      {
        if (__n >= HIDWORD(__n)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        __s[__n] = v13;
        LODWORD(__n) = __n + 1;
      }
      else
      {
        *(void *)(a1 + 16) = llvm::DIExpression::replaceArg(*(llvm::DIExpression **)(a1 + 16), (const llvm::DIExpression *)__n, ((unint64_t)((char *)v15 - (char *)__s) >> 2));
      }
      ++a2;
      v12 -= 4;
    }
    while (v12);
    char v16 = __n;
    if (__n >= 0x40)
    {
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) & 0xC0 | 1;
      uint64_t v17 = *(void *)(a6 + 16);
      int v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0) {
        int v18 = (void *)*v18;
      }
      *(_OWORD *)uint64_t v21 = xmmword_1CFAC6EA8;
      uint64_t v22 = 159;
      Impl = llvm::DIExpression::getImpl(v18, v21, 3, 0, 1);
      *(void *)(a1 + 16) = Impl;
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a6 + 24), *(uint64_t **)(a6 + 32), (int8x16_t *)v21);
      if ((_BYTE)v22) {
        *(void *)(a1 + 16) = llvm::DIExpression::createFragmentExpression(Impl, (const llvm::DIExpression *)LODWORD(v21[1]), v21[0]);
      }
      operator new[]();
    }
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) & 0xC0 | __n;
    if (v16) {
      operator new[]();
    }
  }
  else
  {
    *(unsigned char *)(a1 + 8) = v9;
  }
  if (__s != (__int32 *)v25) {
    free(__s);
  }
  return a1;
}

uint64_t sub_1CC2E9FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v59[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)a1;
  if (*(_DWORD *)(*(void *)a1 + 160))
  {
    sub_1CC2EA3E8((uint64_t)v58, a4);
    sub_1CC2EAD0C((_DWORD *)a1, a2, a3, (uint64_t)v58);
    uint64_t result = v58[0];
    v58[0] = 0;
    if (!result) {
      return result;
    }
    return MEMORY[0x1D25D9CB0](result, 0x1000C8052888210);
  }
  uint64_t v10 = a1 + 8;
  uint64_t v11 = (_DWORD *)(*(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4);
  uint64_t v12 = *(unsigned int *)(v8 + 164);
  sub_1CC2EA3E8((uint64_t)v57, a4);
  unsigned int v13 = sub_1CC2EB660(v8, v11, v12, a2, a3, (uint64_t)v57);
  uint64_t result = v57[0];
  v57[0] = 0;
  if (result) {
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8052888210);
  }
  if (v13 <= 4)
  {
    *(_DWORD *)(v8 + 164) = v13;
    *(_DWORD *)(*(void *)v10 + 8) = v13;
    return result;
  }
  uint64_t v52 = a4;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  unint64_t v14 = 0;
  unsigned int v15 = 0;
  LODWORD(v16) = 0;
  unsigned int v17 = *(_DWORD *)(v8 + 164) + 1;
  unsigned int v18 = *(_DWORD *)(*(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4);
  unsigned int v19 = v17 >> 1;
  unint64_t v20 = v17 & 1;
  unsigned int v21 = 2;
  do
  {
    if (v14 >= v20) {
      unsigned int v22 = v19;
    }
    else {
      unsigned int v22 = v19 + 1;
    }
    *((_DWORD *)&v59[2] + v14) = v22;
    unsigned int v23 = v18 - v15;
    v15 += v22;
    if (v21 == 2 && v15 > v18)
    {
      unsigned int v21 = v14;
      uint64_t v16 = v23;
    }
    else
    {
      uint64_t v16 = v16;
    }
    ++v14;
  }
  while (v14 != 2);
  uint64_t v51 = v16;
  char v24 = 0;
  uint64_t v25 = 0;
  unsigned int v26 = 0;
  unsigned int v50 = v21;
  --*((_DWORD *)&v59[2] + v21);
  v59[0] = 0;
  v59[1] = 0;
  do
  {
    char v27 = v24;
    unint64_t v28 = sub_1CC2EBEF4(*(void *)(v8 + 168));
    unint64_t v29 = v28;
    int v30 = *((_DWORD *)&v59[2] + v25);
    if (v30)
    {
      uint64_t v31 = v28 + 64;
      unint64_t v32 = (void *)(v29 + 8);
      int v33 = *((_DWORD *)&v59[2] + v25);
      unsigned int v34 = v26;
      do
      {
        uint64_t v35 = (void *)(v8 + 16 * v34);
        *(v32 - 1) = *v35;
        *unint64_t v32 = v35[1];
        v32 += 2;
        uint64_t v36 = sub_1CC2EBE18(v31, v8 + 24 * v34++ + 64);
        uint64_t v31 = v36 + 24;
        --v33;
      }
      while (v33);
    }
    v26 += v30;
    v59[v25] = v29 & 0xFFFFFFFFFFFFFFC0 | (v30 - 1);
    char v24 = 1;
    uint64_t v25 = 1;
  }
  while ((v27 & 1) == 0);
  for (uint64_t i = 136; i != 40; i -= 24)
  {
    uint64_t v38 = *(void *)(v8 + i);
    *(void *)(v8 + i) = 0;
    if (v38) {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8052888210);
    }
  }
  uint64_t v39 = 0;
  *(_DWORD *)(v8 + 160) = 1;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(void *)(v8 + 144) = 0;
  do
  {
    uint64_t v40 = v59[v39];
    uint64_t v41 = v8 + 8 * v39;
    *(void *)(v41 + 80) = *(void *)((v40 & 0xFFFFFFFFFFFFFFC0)
                                      + 16 * (*((_DWORD *)&v59[2] + v39) - 1)
                                      + 8);
    *(void *)(v41 + 8) = v40;
    ++v39;
  }
  while (v39 != 2);
  *(void *)uint64_t v8 = *(void *)(v59[0] & 0xFFFFFFFFFFFFFFC0);
  *(_DWORD *)(v8 + 164) = 2;
  uint64_t v42 = *(void *)(v53 + 8);
  *(void *)uint64_t v42 = v8 + 8;
  *(_DWORD *)(v42 + 8) = 2;
  *(_DWORD *)(v42 + 12) = v50;
  uint64_t v43 = *(void *)(v53 + 8);
  unint64_t v44 = *(void *)(*(void *)v43 + 8 * *(unsigned int *)(v43 + 12)) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v45 = (*(void *)(*(void *)v43 + 8 * *(unsigned int *)(v43 + 12)) & 0x3FLL | (v51 << 32)) + 1;
  uint64_t v46 = *(unsigned int *)(v53 + 16);
  unsigned int v47 = *(_DWORD *)(v53 + 20);
  if (v46 == 1)
  {
    if (v47 <= 1) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(v43 + 16) = v44;
    *(void *)(v43 + 24) = v45;
    ++*(_DWORD *)(v53 + 16);
  }
  else
  {
    if (v46 >= v47) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(v43 + 16 * v46) = *(_OWORD *)(v43 + 16 * v46 - 16);
    uint64_t v48 = *(unsigned int *)(v53 + 16);
    uint64_t v49 = *(void *)(v53 + 8) + 16 * v48 - 16;
    if (v49 != v43 + 16)
    {
      memmove((void *)(v43 + 32), (const void *)(v43 + 16), v49 - (v43 + 16));
      LODWORD(v48) = *(_DWORD *)(v53 + 16);
    }
    *(_DWORD *)(v53 + 16) = v48 + 1;
    *(void *)(v43 + 16) = v44;
    *(void *)(v43 + 24) = v45;
  }
  sub_1CC2EA3E8((uint64_t)v56, v52);
  sub_1CC2EAD0C((_DWORD *)v53, v54, v55, (uint64_t)v56);
  uint64_t result = v56[0];
  v56[0] = 0;
  if (result) {
    return MEMORY[0x1D25D9CB0](result, 0x1000C8052888210);
  }
  return result;
}

uint64_t sub_1CC2EA3E8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = 0;
  char v2 = *(unsigned char *)(a2 + 8);
  char v3 = *(unsigned char *)(result + 8) & 0xC0 | v2 & 0x3F;
  *(unsigned char *)(result + 8) = v3;
  char v4 = *(unsigned char *)(a2 + 8) & 0x40;
  *(unsigned char *)(result + 8) = v3 & 0xBF | v4;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8) & 0x80 | v2 & 0x3F | v4;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  if ((*(unsigned char *)(a2 + 8) & 0x3F) != 0) {
    operator new[]();
  }
  return result;
}

uint64_t sub_1CC2EA4B8(uint64_t a1, uint64_t a2)
{
  sub_1CC2EA3E8((uint64_t)v62, a2);
  uint64_t v4 = *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
  sub_1CC2EBE18(*(void *)(v4 - 16) + 24 * *(unsigned int *)(v4 - 4) + 64, (uint64_t)v62);
  uint64_t v5 = v62[0];
  v62[0] = 0;
  if (v5) {
    MEMORY[0x1D25D9CB0](v5, 0x1000C8052888210);
  }
  uint64_t v6 = *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
  uint64_t v7 = *(void *)(*(void *)(v6 - 16) + 16 * *(unsigned int *)(v6 - 4) + 8);
  sub_1CC2EA3E8((uint64_t)&__s2, a2);
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = v9 + 16 * v8;
  unsigned int v11 = *(_DWORD *)(v10 - 8);
  uint64_t v12 = (*(_DWORD *)(v10 - 4) + 1);
  if (!*(_DWORD *)(*(void *)a1 + 160))
  {
    if (v12 >= v11) {
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  if (v12 < v11)
  {
LABEL_11:
    uint64_t v18 = *(void *)(v10 - 16);
    uint64_t v19 = v18 + 24 * v12;
    int v20 = *(unsigned __int8 *)(v19 + 72);
    if (v20 == v60 && *(void *)(v18 + 24 * v12 + 80) == v61)
    {
      unsigned int v21 = __s2;
      if (memcmp(*(const void **)(v19 + 64), __s2, 4 * (v20 & 0x3F))) {
        goto LABEL_57;
      }
      uint64_t v22 = *(void *)(v18 + 16 * v12);
LABEL_59:
      BOOL v26 = v22 == v7;
      goto LABEL_22;
    }
LABEL_21:
    BOOL v26 = 0;
LABEL_22:
    unsigned int v21 = __s2;
    goto LABEL_23;
  }
  if (v8 == 1) {
    goto LABEL_21;
  }
  unsigned int v13 = v8 - 2;
  int v14 = *(_DWORD *)(a1 + 16);
  while (1)
  {
    uint64_t v15 = v13;
    if (!v13) {
      break;
    }
    int v16 = *(_DWORD *)(v9 + 16 * v13 + 12);
    int v17 = *(_DWORD *)(v9 + 16 * v13 + 8) - 1;
    --v14;
    --v13;
    if (v16 != v17) {
      goto LABEL_16;
    }
  }
  int v16 = *(_DWORD *)(v9 + 12);
  int v17 = *(_DWORD *)(v9 + 8) - 1;
  int v14 = 1;
LABEL_16:
  if (v16 == v17) {
    goto LABEL_21;
  }
  uint64_t v23 = *(void *)(*(void *)(v9 + 16 * v15) + 8 * (v16 + 1));
  if (v14 != v8 - 1)
  {
    int v54 = ~v14 + v8;
    do
    {
      uint64_t v23 = *(void *)(v23 & 0xFFFFFFFFFFFFFFC0);
      --v54;
    }
    while (v54);
  }
  if (!v23) {
    goto LABEL_21;
  }
  char v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFC0);
  int v25 = *(unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFFC0) + 0x48);
  if (v25 != v60 || *(void *)((v23 & 0xFFFFFFFFFFFFFFC0) + 0x50) != v61) {
    goto LABEL_21;
  }
  unsigned int v21 = __s2;
  if (!memcmp(*(const void **)((v23 & 0xFFFFFFFFFFFFFFC0) + 0x40), __s2, 4 * (v25 & 0x3F)))
  {
    uint64_t v22 = *v24;
    goto LABEL_59;
  }
LABEL_57:
  BOOL v26 = 0;
LABEL_23:
  __s2 = 0;
  if (v21)
  {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8052888210);
    uint64_t v9 = *(void *)(a1 + 8);
    LODWORD(v8) = *(_DWORD *)(a1 + 16);
  }
  uint64_t v27 = *(void *)(*(void *)(v9 + 16 * v8 - 16)
                  + 16 * *(unsigned int *)(v9 + 16 * v8 - 4));
  if (v26)
  {
    sub_1CC2ECCC8(a1);
    uint64_t v28 = *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
    *(void *)(*(void *)(v28 - 16) + 16 * *(unsigned int *)(v28 - 4)) = v27;
  }
  uint64_t result = sub_1CC2EA3E8((uint64_t)&v56, a2);
  uint64_t v30 = *(void *)(a1 + 8);
  uint64_t v31 = *(unsigned int *)(a1 + 16);
  uint64_t v32 = v30 + 16 * v31;
  int v33 = *(_DWORD *)(v32 - 4);
  if (*(_DWORD *)(*(void *)a1 + 160))
  {
    if (!v33)
    {
      if (v31 != 1)
      {
        unsigned int v34 = v31 - 2;
        int v35 = *(_DWORD *)(a1 + 16);
        while (1)
        {
          uint64_t v36 = v34;
          if (!v34) {
            break;
          }
          int v37 = *(_DWORD *)(v30 + 16 * v34 + 12);
          --v35;
          --v34;
          if (v37) {
            goto LABEL_48;
          }
        }
        int v37 = *(_DWORD *)(v30 + 12);
        if (!v37) {
          goto LABEL_40;
        }
        int v35 = 1;
LABEL_48:
        uint64_t v48 = *(void *)(*(void *)(v30 + 16 * v36) + 8 * (v37 - 1));
        if (v35 != v31 - 1)
        {
          int v55 = ~v35 + v31;
          do
          {
            uint64_t v48 = *(void *)((v48 & 0xFFFFFFFFFFFFFFC0) + 8 * (v48 & 0x3F));
            --v55;
          }
          while (v55);
        }
        if (v48)
        {
          uint64_t v49 = v48 & 0x3F;
          unint64_t v50 = v48 & 0xFFFFFFFFFFFFFFC0;
          unint64_t v51 = (v48 & 0xFFFFFFFFFFFFFFC0) + 24 * v49;
          int v52 = *(unsigned __int8 *)(v51 + 72);
          if (v52 == v57 && *(void *)(v50 + 24 * v49 + 80) == v58)
          {
            uint64_t v42 = v56;
            uint64_t result = memcmp(*(const void **)(v51 + 64), v56, 4 * (v52 & 0x3F));
            if (!result)
            {
              unint64_t v53 = v50 + 16 * v49;
LABEL_55:
              BOOL v43 = *(void *)(v53 + 8) == v27;
              goto LABEL_41;
            }
            goto LABEL_38;
          }
        }
      }
      goto LABEL_40;
    }
  }
  else if (!v33)
  {
    goto LABEL_40;
  }
  uint64_t v38 = *(void *)(v32 - 16);
  uint64_t v39 = (v33 - 1);
  uint64_t v40 = v38 + 24 * v39;
  int v41 = *(unsigned __int8 *)(v40 + 72);
  if (v41 == v57 && *(void *)(v38 + 24 * v39 + 80) == v58)
  {
    uint64_t v42 = v56;
    uint64_t result = memcmp(*(const void **)(v40 + 64), v56, 4 * (v41 & 0x3F));
    if (!result)
    {
      unint64_t v53 = v38 + 16 * v39;
      goto LABEL_55;
    }
LABEL_38:
    BOOL v43 = 0;
    goto LABEL_42;
  }
LABEL_40:
  BOOL v43 = 0;
LABEL_41:
  uint64_t v42 = v56;
LABEL_42:
  unsigned int v56 = 0;
  if (v42) {
    uint64_t result = MEMORY[0x1D25D9CB0](v42, 0x1000C8052888210);
  }
  if (v43)
  {
    unint64_t v44 = sub_1CC2ECD94((unsigned int *)a1);
    uint64_t v45 = *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
    uint64_t v46 = *(void *)(*(void *)(v45 - 16) + 16 * *(unsigned int *)(v45 - 4));
    uint64_t result = sub_1CC2ECCC8((uint64_t)v44);
    uint64_t v47 = *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
    *(void *)(*(void *)(v47 - 16) + 16 * *(unsigned int *)(v47 - 4)) = v46;
  }
  return result;
}

_DWORD *sub_1CC2EA918(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(_DWORD *)(*(void *)a1 + 160))
  {
    uint64_t v5 = *(unsigned int *)(v4 + 164);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v4 + 80;
      while (((*(void *)(v7 + 8 * v6) >> 1) & 3 | *(_DWORD *)((*(void *)(v7 + 8 * v6) & 0xFFFFFFFFFFFFFFF8)
                                                                             + 24)) <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 24) | (a2 >> 1) & 3))
      {
        if (v5 == ++v6)
        {
          uint64_t v6 = v5;
          break;
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t result = sub_1CC2EAA54((_DWORD *)a1, v6);
    if (*(_DWORD *)(a1 + 16) && *(_DWORD *)(*(void *)(a1 + 8) + 12) < *(_DWORD *)(*(void *)(a1 + 8) + 8))
    {
      return (_DWORD *)sub_1CC2EAB38(a1, a2);
    }
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(v4 + 164);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (uint64_t *)(v4 + 8);
      while (1)
      {
        uint64_t v11 = *v10;
        v10 += 2;
        if (((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3)) {
          break;
        }
        if (v8 == ++v9)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    return sub_1CC2EAA54((_DWORD *)a1, v9);
  }
  return result;
}

_DWORD *sub_1CC2EAA54(_DWORD *result, uint64_t a2)
{
  char v2 = result + 2;
  uint64_t v3 = *(void *)result;
  if (*(_DWORD *)(*(void *)result + 160))
  {
    uint64_t v4 = v3 + 8;
    uint64_t v5 = *(unsigned int *)(v3 + 164);
    result[4] = 0;
    uint64_t v6 = result + 4;
    if (!result[5]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = v5 | (a2 << 32);
    uint64_t v8 = (void *)*v2;
    *(void *)*char v2 = v4;
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(v3 + 164);
    result[4] = 0;
    uint64_t v6 = result + 4;
    if (!result[5]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = v9 | (a2 << 32);
    uint64_t v8 = (void *)*v2;
    *(void *)*char v2 = v3;
  }
  v8[1] = v7;
  ++*v6;
  return result;
}

uint64_t sub_1CC2EAB38(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 16);
  uint64_t v3 = *(void *)(result + 8) + 16 * (v2 - 1);
  int v4 = *(_DWORD *)(*(void *)result + 160);
  uint64_t v5 = *(void *)(*(void *)v3 + 8 * *(unsigned int *)(v3 + 12));
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  int v7 = v4 - v2;
  if (v4 == v2)
  {
    unsigned int v8 = (a2 >> 1) & 3;
  }
  else
  {
    unsigned int v8 = (a2 >> 1) & 3;
    do
    {
      unsigned int v9 = 0;
      unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFC0;
      do
      {
        unsigned int v11 = v9;
        uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFFC0) + 8 * v9 + 0x60);
        unsigned int v13 = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v9 = v11 + 1;
      }
      while (v13 <= (*(_DWORD *)(v6 + 24) | v8));
      if (v2 >= *(_DWORD *)(result + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v14 = (unint64_t *)(*(void *)(result + 8) + 16 * v2);
      *int v14 = v10;
      v14[1] = (v5 & 0x3F | ((unint64_t)v11 << 32)) + 1;
      unsigned int v2 = *(_DWORD *)(result + 16) + 1;
      *(_DWORD *)(result + 16) = v2;
      uint64_t v5 = *(void *)(v10 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  unsigned int v15 = 0;
  unsigned int v16 = *(_DWORD *)(v6 + 24) | v8;
  do
  {
    unsigned int v17 = v15;
    uint64_t v18 = *(void *)((v5 & 0xFFFFFFFFFFFFFFC0) + 16 * v15 + 8);
    unsigned int v19 = (v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24);
    unsigned int v15 = v17 + 1;
  }
  while (v19 <= v16);
  if (v2 >= *(_DWORD *)(result + 20)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v20 = (unint64_t *)(*(void *)(result + 8) + 16 * v2);
  unint64_t *v20 = v5 & 0xFFFFFFFFFFFFFFC0;
  v20[1] = (v5 & 0x3F | ((unint64_t)v17 << 32)) + 1;
  ++*(_DWORD *)(result + 16);
  return result;
}

uint64_t sub_1CC2EAD0C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = a1;
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  unsigned int v9 = v7[4];
  uint64_t v116 = v8;
  if (!v9 || (uint64_t v10 = *(void *)v8, *(_DWORD *)(*(void *)v8 + 12) >= *(_DWORD *)(*(void *)v8 + 8)))
  {
    uint64_t v11 = *(unsigned int *)(*(void *)v7 + 160);
    llvm::IntervalMapImpl::Path::moveLeft(v8, *(_DWORD *)(*(void *)v7 + 160));
    uint64_t v10 = *((void *)v7 + 1);
    ++*(_DWORD *)(v10 + 16 * v11 + 12);
    unsigned int v9 = v7[4];
  }
  uint64_t v12 = v9;
  uint64_t v13 = v10 + 16 * v9;
  int v14 = *(_DWORD *)(v13 - 4);
  if (v14)
  {
LABEL_20:
    uint64_t v25 = v10 + 16 * v12;
    uint64_t v26 = *(unsigned int *)(v25 - 8);
    uint64_t v27 = (_DWORD *)(v25 - 4);
    BOOL v28 = v14 == v26;
    uint64_t v29 = *(void *)(v25 - 16);
    sub_1CC2EA3E8((uint64_t)v122, a4);
    unsigned int v30 = sub_1CC2EB660(v29, v27, v26, a2, a3, (uint64_t)v122);
    uint64_t result = v122[0];
    v122[0] = 0;
    if (result) {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8052888210);
    }
    if (v30 < 5)
    {
LABEL_99:
      int v96 = v7[4];
      uint64_t v97 = *((void *)v7 + 1);
      unsigned int v98 = v96 - 1;
      *(_DWORD *)(v97 + 16 * (v96 - 1) + 8) = v30;
      if (v96 != 1)
      {
        uint64_t v99 = v97 + 16 * (v96 - 2);
        *(void *)(*(void *)v99 + 8 * *(unsigned int *)(v99 + 12)) = *(void *)(*(void *)v99
                                                                                    + 8 * *(unsigned int *)(v99 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v30 - 1);
      }
      if (v28) {
        return sub_1CC2EB8B8((uint64_t)v7, v98, a3);
      }
      return result;
    }
    int v32 = v7[4];
    long long v123 = 0u;
    long long v124 = 0u;
    uint64_t v33 = *((void *)v7 + 1);
    uint64_t v34 = (v32 - 1);
    unsigned int v35 = *(_DWORD *)(v33 + 16 * v34 + 12);
    uint64_t v112 = a2;
    if (v32 == 1)
    {
      int v39 = 0;
      LODWORD(v40) = 0;
    }
    else
    {
      unsigned int v36 = v32 - 2;
      int v37 = v32;
      while (1)
      {
        uint64_t v38 = v36;
        if (!v36) {
          break;
        }
        int v39 = *(_DWORD *)(v33 + 16 * v36 + 12);
        --v37;
        --v36;
        if (v39) {
          goto LABEL_30;
        }
      }
      int v39 = *(_DWORD *)(v33 + 12);
      int v37 = 1;
      if (!v39)
      {
        LODWORD(v40) = 0;
        goto LABEL_35;
      }
LABEL_30:
      uint64_t v40 = *(void *)(*(void *)(v33 + 16 * v38) + 8 * (v39 - 1));
      if (v37 != v34)
      {
        int v105 = ~v37 + v32;
        do
        {
          uint64_t v40 = *(void *)((v40 & 0xFFFFFFFFFFFFFFC0) + 8 * (v40 & 0x3F));
          --v105;
        }
        while (v105);
      }
      if (v40)
      {
        LOBYTE(v37) = 0;
        int v39 = (v40 & 0x3F) + 1;
        v125[0] = v39;
        v35 += v39;
        *(void *)&long long v123 = v40 & 0xFFFFFFFFFFFFFFC0;
        LODWORD(v40) = 1;
LABEL_35:
        uint64_t v41 = v33 + 16 * v34;
        int v42 = *(_DWORD *)(v41 + 8);
        v125[v40] = v42;
        int v43 = v42 + v39;
        unsigned int v44 = v40 + 1;
        *(void *)((unint64_t)&v123 | (8 * v40)) = *(void *)v41;
        char v111 = v37;
        if (v32 != 1)
        {
          unsigned int v45 = v32 - 2;
          int v46 = v32;
          while (1)
          {
            uint64_t v47 = v45;
            if (!v45) {
              break;
            }
            int v48 = *(_DWORD *)(v33 + 16 * v45 + 12);
            int v49 = *(_DWORD *)(v33 + 16 * v45 + 8) - 1;
            --v46;
            --v45;
            if (v48 != v49) {
              goto LABEL_41;
            }
          }
          int v48 = *(_DWORD *)(v33 + 12);
          int v49 = *(_DWORD *)(v33 + 8) - 1;
          int v46 = 1;
LABEL_41:
          if (v48 != v49)
          {
            uint64_t v50 = *(void *)(*(void *)(v33 + 16 * v47) + 8 * (v48 + 1));
            if (v46 != v34)
            {
              int v100 = ~v46 + v32;
              do
              {
                uint64_t v50 = *(void *)(v50 & 0xFFFFFFFFFFFFFFC0);
                --v100;
              }
              while (v100);
            }
            if (v50)
            {
              int v51 = (v50 & 0x3F) + 1;
              v125[v44] = v51;
              v43 += v51;
              *((void *)&v123 + v44) = v50 & 0xFFFFFFFFFFFFFFC0;
              unsigned int v44 = v40 | 2;
            }
          }
        }
        unsigned int v52 = v43 + 1;
        if (v43 + 1 <= 4 * v44)
        {
          unsigned int v110 = 0;
        }
        else
        {
          if (v44 == 1) {
            unsigned int v53 = 1;
          }
          else {
            unsigned int v53 = v44 - 1;
          }
          v125[v44] = v125[v53];
          *((void *)&v123 + v44) = *((void *)&v123 + v53);
          v125[v53] = 0;
          unsigned int v110 = v53;
          *((void *)&v123 + v53) = sub_1CC2EBEF4(*(void *)(*(void *)v7 + 168));
          ++v44;
        }
        uint64_t v113 = a4;
        uint64_t v114 = a3;
        uint64_t v117 = v7;
        unint64_t v54 = 0;
        unsigned int v55 = 0;
        unsigned int v56 = 0;
        uint64_t v57 = v44;
        unsigned int v58 = v44;
        do
        {
          if (v54 >= v52 % v44) {
            int v59 = v52 / v44;
          }
          else {
            int v59 = v52 / v44 + 1;
          }
          *((_DWORD *)&v122[3] + v54) = v59;
          unsigned int v60 = v35 - v55;
          v55 += v59;
          if (v58 == v44 && v55 > v35)
          {
            unsigned int v58 = v54;
            unsigned int v56 = v60;
          }
          ++v54;
        }
        while (v44 != v54);
        unsigned int v109 = v56;
        unsigned int v115 = v58;
        --*((_DWORD *)&v122[3] + v58);
        uint64_t v119 = v44 - 1;
        uint64_t v120 = v44;
        if (v44 != 1)
        {
          uint64_t v61 = v44 - 1;
          do
          {
            unsigned int v62 = v125[v61];
            unsigned int v63 = *((_DWORD *)&v122[3] + v61);
            if (v62 != v63)
            {
              uint64_t v64 = v57;
              do
              {
                if (v64 == 1) {
                  break;
                }
                unsigned int v65 = v125[v64 - 2];
                int v66 = sub_1CC2EC908(*((void *)&v123 + v61), v62, v122[v64 + 3], v65, v63 - v62);
                v125[v64 - 2] = v65 - v66;
                unsigned int v62 = v125[v61] + v66;
                v125[v61] = v62;
                --v64;
              }
              while (v62 < v63);
            }
            --v57;
            --v61;
          }
          while (v61);
          int v67 = 1;
          do
          {
            unsigned int v68 = v125[v61];
            unsigned int v69 = *((_DWORD *)&v122[3] + v61);
            if (v68 != v69)
            {
              unsigned int v70 = v67;
              do
              {
                if (v120 == v70) {
                  break;
                }
                unsigned int v71 = v125[v70];
                int v72 = sub_1CC2EC908(*((void *)&v123 + v70), v71, *((void *)&v123 + v61), v68, v68 - v69);
                v125[v70] = v72 + v71;
                unsigned int v68 = v125[v61] - v72;
                v125[v61] = v68;
                ++v70;
              }
              while (v68 < v69);
            }
            ++v61;
            ++v67;
          }
          while (v61 != v119);
        }
        if ((v111 & 1) == 0) {
          llvm::IntervalMapImpl::Path::moveLeft(v116, v34);
        }
        uint64_t v73 = 0;
        unsigned int v74 = v115;
        a3 = v114;
        while (1)
        {
          uint64_t v75 = *((void *)&v123 + v73);
          int v76 = *((_DWORD *)&v122[3] + v73);
          uint64_t v77 = (v76 - 1);
          uint64_t v78 = *(void *)(v75 + 16 * v77 + 8);
          if (v110 && v73 == v110)
          {
            LODWORD(v34) = v34 + sub_1CC2EC028((uint64_t *)v7, v34, v75 & 0xFFFFFFFFFFFFFFC0 | v77, v78);
          }
          else
          {
            uint64_t v79 = *(void *)v116;
            *(_DWORD *)(*(void *)v116 + 16 * v34 + 8) = v76;
            if (v34) {
              *(void *)(*(void *)(v79 + 16 * (v34 - 1))
            }
                        + 8 * *(unsigned int *)(v79 + 16 * (v34 - 1) + 12)) = *(void *)(*(void *)(v79 + 16 * (v34 - 1)) + 8 * *(unsigned int *)(v79 + 16 * (v34 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v77;
            sub_1CC2EB8B8((uint64_t)v7, v34, v78);
          }
          if (v73 + 1 == v120) {
            break;
          }
          int v80 = 0;
          ++v73;
          uint64_t v81 = *(void *)v116;
          while (1)
          {
            int v82 = v80;
            if (v34 + v80 == 1) {
              break;
            }
            uint64_t v83 = (v34 - 1 + v80);
            int v85 = *(_DWORD *)(v81 + 16 * v83 + 8);
            int v84 = *(_DWORD *)(v81 + 16 * v83 + 12);
            --v80;
            if (v84 != v85 - 1) {
              goto LABEL_86;
            }
          }
          uint64_t v83 = 0;
          int v85 = *(_DWORD *)(v81 + 8);
          int v84 = *(_DWORD *)(v81 + 12);
LABEL_86:
          unsigned int v86 = v84 + 1;
          *(_DWORD *)(v81 + 16 * v83 + 12) = v86;
          if (v86 != v85)
          {
            uint64_t v87 = *(void *)(*(void *)(v81 + 16 * v83) + 8 * v86);
            if (v82)
            {
              do
              {
                uint64_t v89 = *(void *)v116 + 16 * (v34 + v82);
                *(void *)uint64_t v89 = v87 & 0xFFFFFFFFFFFFFFC0;
                *(_DWORD *)(v89 + 8) = (v87 & 0x3F) + 1;
                *(_DWORD *)(v89 + 12) = 0;
                uint64_t v87 = *(void *)(v87 & 0xFFFFFFFFFFFFFFC0);
                BOOL v90 = __CFADD__(v82++, 1);
              }
              while (!v90);
              uint64_t v81 = *(void *)v116;
            }
            uint64_t v88 = (unint64_t *)(v81 + 16 * v34);
            *uint64_t v88 = v87 & 0xFFFFFFFFFFFFFFC0;
            v88[1] = (v87 & 0x3F) + 1;
          }
          --v74;
        }
        if (v115 != v73)
        {
          do
          {
            llvm::IntervalMapImpl::Path::moveLeft(v116, v34);
            BOOL v90 = __CFADD__(v74++, 1);
          }
          while (!v90);
        }
        uint64_t v91 = *((void *)v7 + 1);
        *(_DWORD *)(v91 + 16 * v34 + 12) = v109;
        unsigned int v92 = (_DWORD *)(v91 + 16 * v7[4]);
        int v93 = *--v92;
        uint64_t v94 = *(v92 - 1);
        BOOL v28 = v93 == v94;
        uint64_t v95 = *(void *)(v92 - 3);
        sub_1CC2EA3E8((uint64_t)v121, v113);
        unsigned int v30 = sub_1CC2EB660(v95, v92, v94, v112, v114, (uint64_t)v121);
        uint64_t result = v121[0];
        v121[0] = 0;
        if (result) {
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8052888210);
        }
        int v7 = v117;
        goto LABEL_99;
      }
      int v39 = 0;
    }
    LOBYTE(v37) = 1;
    goto LABEL_35;
  }
  unsigned int v15 = *(uint64_t **)(v13 - 16);
  if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3) >= ((*v15 >> 1) & 3 | *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 24))) {
    goto LABEL_19;
  }
  unsigned int v16 = v9 - 1;
  if (v9 == 1) {
    goto LABEL_12;
  }
  unsigned int v17 = v9 - 2;
  int v18 = v9;
  while (1)
  {
    uint64_t v19 = v17;
    if (!v17) {
      break;
    }
    int v20 = *(_DWORD *)(v10 + 16 * v17 + 12);
    --v18;
    --v17;
    if (v20) {
      goto LABEL_14;
    }
  }
  int v20 = *(_DWORD *)(v10 + 12);
  if (!v20) {
    goto LABEL_12;
  }
  int v18 = 1;
LABEL_14:
  uint64_t v21 = *(void *)(*(void *)(v10 + 16 * v19) + 8 * (v20 - 1));
  if (v18 != v16)
  {
    unsigned int v106 = ~v18 + v9;
    do
    {
      uint64_t v21 = *(void *)((v21 & 0xFFFFFFFFFFFFFFC0) + 8 * (v21 & 0x3F));
      --v106;
    }
    while (v106);
  }
  if (!v21)
  {
LABEL_12:
    int v14 = 0;
    **(void **)int v7 = a2;
    goto LABEL_20;
  }
  unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFC0;
  uint64_t v23 = v21 & 0x3F;
  int v24 = *(unsigned __int8 *)((v21 & 0xFFFFFFFFFFFFFFC0) + 24 * v23 + 0x48);
  if (v24 != *(unsigned __int8 *)(a4 + 8)
    || *(void *)((v21 & 0xFFFFFFFFFFFFFFC0) + 24 * v23 + 0x50) != *(void *)(a4 + 16)
    || memcmp(*(const void **)((v21 & 0xFFFFFFFFFFFFFFC0) + 24 * (v21 & 0x3F) + 0x40), *(const void **)a4, 4 * (v24 & 0x3F)))
  {
LABEL_19:
    int v14 = 0;
    goto LABEL_20;
  }
  uint64_t v118 = (uint64_t)v7;
  unint64_t v101 = v22 + 16 * v23;
  uint64_t v103 = *(void *)(v101 + 8);
  uint64_t v102 = (uint64_t *)(v101 + 8);
  if (v103 != a2)
  {
    int v14 = 0;
    int v7 = (_DWORD *)v118;
    goto LABEL_20;
  }
  llvm::IntervalMapImpl::Path::moveLeft(v116, v16);
  uint64_t v104 = *v15;
  if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3) > ((*v15 >> 1) & 3 | *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 24))
    || (int v107 = *(unsigned __int8 *)(a4 + 8), v107 == *((unsigned __int8 *)v15 + 72))
    && *(void *)(a4 + 16) == v15[10]
    && !memcmp(*(const void **)a4, (const void *)v15[8], 4 * (v107 & 0x3F))
    && v104 == a3)
  {
    a2 = *(void *)(v22 + 16 * v23);
    int v7 = (_DWORD *)v118;
    sub_1CC2EB908(v118, 0);
    uint64_t v10 = *(void *)(v118 + 8);
    uint64_t v12 = *(unsigned int *)(v118 + 16);
    int v14 = *(_DWORD *)(v10 + 16 * v12 - 4);
    goto LABEL_20;
  }
  int v108 = *(_DWORD *)(v118 + 16);
  *uint64_t v102 = a3;

  return sub_1CC2EB8B8(v118, v108 - 1, a3);
}

uint64_t sub_1CC2EB660(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a2;
  if (!v11)
  {
LABEL_15:
    if (v11 == a3)
    {
      uint64_t v25 = (void *)(a1 + 16 * a3);
      *uint64_t v25 = a4;
      v25[1] = a5;
      uint64_t v26 = a1 + 24 * a3 + 64;
LABEL_27:
      sub_1CC2EBE18(v26, a6);
      return (a3 + 1);
    }
    uint64_t v27 = a1 + 24 * v11;
    BOOL v28 = (const void **)(v27 + 64);
    int v29 = *(unsigned __int8 *)(v27 + 72);
    if (v29 == *(unsigned __int8 *)(a6 + 8)
      && *(void *)(a1 + 24 * v11 + 80) == *(void *)(a6 + 16)
      && !memcmp(*v28, *(const void **)a6, 4 * (v29 & 0x3F)))
    {
      unsigned int v30 = (void *)(a1 + 16 * v11);
      if (*v30 == a5)
      {
        *unsigned int v30 = a4;
        return a3;
      }
    }
    if (a3 != 4)
    {
      unsigned int v31 = a3;
      do
      {
        unsigned int v32 = v31 - 1;
        *(_OWORD *)(a1 + 16 * v31) = *(_OWORD *)(a1 + 16 * (v31 - 1));
        sub_1CC2EBE18(a1 + 64 + 24 * v31, a1 + 64 + 24 * (v31 - 1));
        unsigned int v31 = v32;
      }
      while (v11 != v32);
      uint64_t v33 = (void *)(a1 + 16 * v11);
      *uint64_t v33 = a4;
      v33[1] = a5;
      uint64_t v26 = (uint64_t)v28;
      goto LABEL_27;
    }
    return 5;
  }
  uint64_t v12 = (v11 - 1);
  uint64_t v13 = a1 + 24 * v12;
  int v14 = *(unsigned __int8 *)(v13 + 72);
  if (v14 != *(unsigned __int8 *)(a6 + 8)
    || (uint64_t v15 = *(void *)(a1 + 24 * v12 + 80), v15 != *(void *)(a6 + 16))
    || (unsigned int v17 = *(const void **)a6, memcmp(*(const void **)(v13 + 64), *(const void **)a6, 4 * (v14 & 0x3F)))
    || (v18 = a1 + 16 * v12, v20 = *(void *)(v18 + 8), uint64_t v19 = (void *)(v18 + 8), v20 != a4))
  {
    if (v11 == 4) {
      return 5;
    }
    goto LABEL_15;
  }
  *a2 = v12;
  if (v11 != a3
    && (v21 = a1 + 24 * v11, int v22 = *(unsigned __int8 *)(v21 + 72), v22 == *(unsigned __int8 *)(a6 + 8))
    && *(void *)(a1 + 24 * v11 + 80) == v15
    && (v23 = v19, v24 = memcmp(*(const void **)(v21 + 64), v17, 4 * (v22 & 0x3F)), uint64_t v19 = v23, !v24)
    && *(void *)(a1 + 16 * v11) == a5)
  {
    *uint64_t v23 = *(void *)(a1 + 16 * v11 + 8);
    if (v11 + 1 != a3)
    {
      do
      {
        *(_OWORD *)(a1 + 16 * v11) = *(_OWORD *)(a1 + 16 * (v11 + 1));
        sub_1CC2EBE18(a1 + 64 + 24 * v11, a1 + 64 + 24 * (v11 + 1));
        LODWORD(v11) = v11 + 1;
      }
      while (a3 - 1 != v11);
    }
    return (a3 - 1);
  }
  else
  {
    *uint64_t v19 = a5;
  }
  return a3;
}

uint64_t sub_1CC2EB8B8(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = 16 * a2;
    while (1)
    {
      uint64_t v5 = v4 - 16;
      if (v4 == 16) {
        break;
      }
      uint64_t v6 = v3 + v4;
      uint64_t v7 = *(void *)(v6 - 16);
      uint64_t v9 = v6 - 8;
      LODWORD(v6) = *(_DWORD *)(v6 - 8);
      uint64_t v8 = *(unsigned int *)(v9 + 4);
      *(void *)(v7 + 8 * v8 + 96) = a3;
      LODWORD(v7) = v6 - 1;
      uint64_t v4 = v5;
      if (v8 != v7) {
        return result;
      }
    }
    *(void *)(*(void *)v3 + 8 * *(unsigned int *)(v3 + 12) + 72) = a3;
  }
  return result;
}

uint64_t sub_1CC2EB908(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v6 = *(unsigned int *)(result + 16);
  uint64_t v7 = v4 + 16 * v6;
  uint64_t v8 = *(void **)(v7 - 16);
  int v9 = *(_DWORD *)(v7 - 8);
  int v10 = v9 - 1;
  if (v9 == 1)
  {
    for (uint64_t i = 17; i != 5; i -= 3)
    {
      uint64_t v12 = v8[i];
      v8[i] = 0;
      if (v12) {
        MEMORY[0x1D25D9CB0](v12, 0x1000C8052888210);
      }
    }
    uint64_t v13 = *(void **)(v5 + 168);
    *uint64_t v8 = *v13;
    *uint64_t v13 = v8;
    uint64_t result = (uint64_t)sub_1CC2EBB7C((_DWORD *)v3, *(_DWORD *)(v5 + 160));
    if (a2)
    {
      if (*(_DWORD *)(v5 + 160))
      {
        uint64_t v14 = *(unsigned int *)(v3 + 16);
        if (v14)
        {
          uint64_t v15 = *(void *)(v3 + 8);
          if (*(_DWORD *)(v15 + 12) < *(_DWORD *)(v15 + 8))
          {
            unsigned int v16 = (int *)(v15 + 12);
            uint64_t v17 = *(unsigned int *)(v3 + 16);
            while (1)
            {
              int v18 = *v16;
              v16 += 4;
              if (v18) {
                break;
              }
              if (!--v17)
              {
                uint64_t v19 = *(void **)(v15 + 16 * v14 - 16);
                goto LABEL_30;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int v20 = *(_DWORD *)(v7 - 4);
    if (v20 + 1 != v9)
    {
      do
      {
        unsigned int v21 = v20 + 1;
        *(_OWORD *)&v8[2 * v20] = *(_OWORD *)&v8[2 * v20 + 2];
        uint64_t result = sub_1CC2EBE18((uint64_t)&v8[3 * v20 + 8], (uint64_t)&v8[3 * v20 + 11]);
        unsigned int v20 = v21;
      }
      while (v10 != v21);
      uint64_t v4 = *(void *)(v3 + 8);
      uint64_t v6 = *(unsigned int *)(v3 + 16);
      int v9 = *(_DWORD *)(v4 + 16 * v6 - 8);
    }
    uint64_t v22 = v4 + 16 * v6;
    uint64_t v23 = *(unsigned int *)(v5 + 160);
    *(_DWORD *)(v4 + 16 * v23 + 8) = v9 - 1;
    if (v23)
    {
      uint64_t v24 = v4 + 16 * (v23 - 1);
      *(void *)(*(void *)v24 + 8 * *(unsigned int *)(v24 + 12)) = *(void *)(*(void *)v24
                                                                                  + 8 * *(unsigned int *)(v24 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v9 - 2);
    }
    if (*(_DWORD *)(v22 - 4) == v9 - 1)
    {
      uint64_t result = sub_1CC2EB8B8(v3, v23, v8[2 * (v9 - 2) + 1]);
      int v25 = 0;
      uint64_t v26 = *(unsigned int *)(v5 + 160);
      uint64_t v27 = *(void *)(v3 + 8);
      int v28 = v26 - 1;
      while (1)
      {
        int v29 = v25;
        uint64_t v30 = (v28 + v25);
        if (!(v28 + v25)) {
          break;
        }
        int v32 = *(_DWORD *)(v27 + 16 * v30 + 8);
        int v31 = *(_DWORD *)(v27 + 16 * v30 + 12);
        --v25;
        if (v31 != v32 - 1) {
          goto LABEL_32;
        }
      }
      uint64_t v30 = 0;
      int v32 = *(_DWORD *)(v27 + 8);
      int v31 = *(_DWORD *)(v27 + 12);
LABEL_32:
      unsigned int v35 = v31 + 1;
      *(_DWORD *)(v27 + 16 * v30 + 12) = v35;
      if (v35 != v32)
      {
        uint64_t v36 = *(void *)(*(void *)(v27 + 16 * v30) + 8 * v35);
        if (v29)
        {
          do
          {
            uint64_t v38 = *(void *)(v3 + 8) + 16 * (v26 + v29);
            *(void *)uint64_t v38 = v36 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v38 + 8) = (v36 & 0x3F) + 1;
            *(_DWORD *)(v38 + 12) = 0;
            uint64_t v36 = *(void *)(v36 & 0xFFFFFFFFFFFFFFC0);
          }
          while (!__CFADD__(v29++, 1));
          uint64_t v27 = *(void *)(v3 + 8);
        }
        int v37 = (unint64_t *)(v27 + 16 * v26);
        unint64_t *v37 = v36 & 0xFFFFFFFFFFFFFFC0;
        v37[1] = (v36 & 0x3F) + 1;
      }
    }
    else if (a2)
    {
      if (v6)
      {
        uint64_t v6 = v6;
        uint64_t v33 = (int *)(v4 + 12);
        while (1)
        {
          int v34 = *v33;
          v33 += 4;
          if (v34) {
            break;
          }
          if (!--v6) {
            goto LABEL_29;
          }
        }
      }
      else
      {
LABEL_29:
        uint64_t v19 = *(void **)(v22 - 16);
LABEL_30:
        *(void *)uint64_t v5 = *v19;
      }
    }
  }
  return result;
}

_DWORD *sub_1CC2EBB7C(_DWORD *result, unsigned int a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  uint64_t v6 = a2 - 1;
  if (a2 != 1)
  {
    uint64_t v7 = v4 + 16 * v6;
    uint64_t v8 = *(void **)(v4 + 16 * (a2 - 1));
    int v11 = *(_DWORD *)(v7 + 8);
    int v10 = (_DWORD *)(v7 + 8);
    int v9 = v11;
    int v12 = v11 - 1;
    if (v11 == 1)
    {
      uint64_t v13 = *(void **)(v5 + 168);
      *uint64_t v8 = *v13;
      *uint64_t v13 = v8;
      uint64_t result = (_DWORD *)sub_1CC2EBB7C(result, a2 - 1);
    }
    else
    {
      int v18 = *(_DWORD *)(v4 + 16 * v6 + 12);
      if (v18 + 1 != v9)
      {
        unsigned int v19 = *(_DWORD *)(v4 + 16 * v6 + 12);
        do
        {
          v8[v19] = v8[v19 + 1];
          v8[v19 + 12] = v8[v19 + 13];
          ++v19;
        }
        while (v12 != v19);
      }
      _DWORD *v10 = v12;
      unsigned int v20 = a2 - 2;
      unsigned int v21 = (uint64_t *)(v4 + 16 * (a2 - 2));
      uint64_t v22 = *((unsigned int *)v21 + 3);
      uint64_t v23 = *v21;
      uint64_t v24 = *(void *)(*v21 + 8 * v22);
      uint64_t v25 = (v9 - 2);
      *(void *)(v23 + 8 * v22) = v24 & 0xFFFFFFFFFFFFFFC0 | v25;
      if (v18 == v12)
      {
        uint64_t result = (_DWORD *)sub_1CC2EB8B8((uint64_t)result, a2 - 1, v8[v25 + 12]);
        int v26 = 0;
        uint64_t v27 = *((void *)v3 + 1);
        while (1)
        {
          int v28 = v26;
          uint64_t v29 = v20 + v26;
          if (!(v20 + v26)) {
            break;
          }
          int v31 = *(_DWORD *)(v27 + 16 * v29 + 8);
          int v30 = *(_DWORD *)(v27 + 16 * v29 + 12);
          --v26;
          if (v30 != v31 - 1) {
            goto LABEL_21;
          }
        }
        uint64_t v29 = 0;
        int v31 = *(_DWORD *)(v27 + 8);
        int v30 = *(_DWORD *)(v27 + 12);
LABEL_21:
        unsigned int v32 = v30 + 1;
        *(_DWORD *)(v27 + 16 * v29 + 12) = v32;
        if (v32 != v31)
        {
          uint64_t v33 = *(void *)(*(void *)(v27 + 16 * v29) + 8 * v32);
          if (v28)
          {
            do
            {
              uint64_t v38 = *((void *)v3 + 1) + 16 * (v6 + v28);
              *(void *)uint64_t v38 = v33 & 0xFFFFFFFFFFFFFFC0;
              *(_DWORD *)(v38 + 8) = (v33 & 0x3F) + 1;
              *(_DWORD *)(v38 + 12) = 0;
              uint64_t v33 = *(void *)(v33 & 0xFFFFFFFFFFFFFFC0);
            }
            while (!__CFADD__(v28++, 1));
            uint64_t v27 = *((void *)v3 + 1);
          }
          int v34 = (unint64_t *)(v27 + 16 * v6);
          *int v34 = v33 & 0xFFFFFFFFFFFFFFC0;
          v34[1] = (v33 & 0x3F) + 1;
        }
      }
    }
    goto LABEL_24;
  }
  unsigned int v14 = *(_DWORD *)(v4 + 12);
  int v15 = *(_DWORD *)(v5 + 164);
  if (v14 + 1 != v15)
  {
    do
    {
      *(void *)(v5 + 8 + 8 * v14) = *(void *)(v5 + 8 + 8 * (v14 + 1));
      *(void *)(v5 + 80 + 8 * v14) = *(void *)(v5 + 80 + 8 * (v14 + 1));
      ++v14;
    }
    while (v15 - 1 != v14);
  }
  int v16 = v15 - 1;
  *(_DWORD *)(v5 + 164) = v16;
  *(_DWORD *)(v4 + 8) = v16;
  if (v16)
  {
LABEL_24:
    if (v3[4])
    {
      uint64_t v35 = *((void *)v3 + 1);
      if (*(_DWORD *)(v35 + 12) < *(_DWORD *)(v35 + 8))
      {
        uint64_t v36 = *(void *)(*(void *)(v35 + 16 * v6)
                        + 8 * *(unsigned int *)(v35 + 16 * v6 + 12));
        uint64_t v37 = v35 + 16 * a2;
        *(void *)uint64_t v37 = v36 & 0xFFFFFFFFFFFFFFC0;
        *(_DWORD *)(v37 + 8) = (v36 & 0x3F) + 1;
        *(_DWORD *)(*((void *)v3 + 1) + 16 * a2 + 12) = 0;
      }
    }
    return result;
  }
  *(_DWORD *)(v5 + 160) = 0;
  *(_OWORD *)(v5 + 64) = 0u;
  uint64_t v17 = v5 + 64;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  do
  {
    *(void *)uint64_t v17 = 0;
    *(unsigned char *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0;
    v17 += 24;
  }
  while (v17 != v5 + 160);

  return sub_1CC2EAA54(result, 0);
}

uint64_t sub_1CC2EBE18(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    if ((*(unsigned char *)(a2 + 8) & 0x3F) != 0) {
      operator new[]();
    }
    *(void *)uint64_t result = 0;
    char v2 = *(unsigned char *)(a2 + 8);
    char v3 = *(unsigned char *)(result + 8) & 0xC0 | v2 & 0x3F;
    *(unsigned char *)(result + 8) = v3;
    char v4 = *(unsigned char *)(a2 + 8) & 0x40;
    *(unsigned char *)(result + 8) = v3 & 0xBF | v4;
    *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8) & 0x80 | v2 & 0x3F | v4;
    *(void *)(result + 16) = *(void *)(a2 + 16);
  }
  return result;
}

unint64_t sub_1CC2EBEF4(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (result)
  {
    *(void *)a1 = *(void *)result;
  }
  else
  {
    *(void *)(a1 + 88) += 192;
    uint64_t v3 = *(void *)(a1 + 8);
    if (((v3 + 63) & 0xFFFFFFFFFFFFFFC0) - v3 + 192 > *(void *)(a1 + 16) - v3)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 32) >> 7;
      if (v6 >= 0x1E) {
        LOBYTE(v6) = 30;
      }
      uint64_t v7 = 4096 << v6;
      uint64_t v8 = (char *)operator new(4096 << v6, (std::align_val_t)8uLL);
      unsigned int v9 = *(_DWORD *)(a1 + 32);
      if (v9 >= *(_DWORD *)(a1 + 36)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 24) + 8 * v9) = v8;
      ++*(_DWORD *)(a1 + 32);
      unint64_t result = (unint64_t)(v8 + 63) & 0xFFFFFFFFFFFFFFC0;
      *(void *)(a1 + 8) = result + 192;
      *(void *)(a1 + 16) = &v8[v7];
    }
    else
    {
      unint64_t result = (v3 + 63) & 0xFFFFFFFFFFFFFFC0;
      *(void *)(a1 + 8) = result + 192;
    }
  }
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  uint64_t v4 = 64;
  *(_OWORD *)unint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  do
  {
    unint64_t v5 = result + v4;
    *(void *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    v4 += 24;
  }
  while (v5 + 24 != result + 160);
  return result;
}

BOOL sub_1CC2EC028(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  int v6 = a2;
  uint64_t v7 = (uint64_t)a1;
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = (llvm::IntervalMapImpl::Path *)(a1 + 1);
  uint64_t v8 = *a1;
  BOOL v10 = a2 == 1;
  if (a2 == 1)
  {
    uint64_t v11 = *(unsigned int *)(v8 + 164);
    if (v11 <= 8)
    {
      uint64_t v12 = v8 + 8;
      uint64_t v13 = *(void *)v9;
      uint64_t v14 = *(unsigned int *)(*(void *)v9 + 12);
      if (v11 != v14)
      {
        unsigned int v15 = *(_DWORD *)(v8 + 164);
        do
        {
          *(void *)(v12 + 8 * v15) = *(void *)(v12 + 8 * (v15 - 1));
          *(void *)(v8 + 80 + 8 * v15) = *(void *)(v8 + 80 + 8 * (v15 - 1));
          --v15;
        }
        while (v14 != v15);
      }
      BOOL v10 = 0;
      int v16 = (void *)(v12 + 8 * v14);
      void *v16 = a3;
      v16[9] = a4;
      *(_DWORD *)(v8 + 164) = v11 + 1;
      *(_DWORD *)(v13 + 8) = v11 + 1;
      uint64_t v17 = *(void *)(*(void *)v13 + 8 * v14);
      *(void *)(v13 + 16) = v17 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v13 + 24) = (v17 & 0x3F) + 1;
      return v10;
    }
    int v18 = (llvm::IntervalMapImpl::Path *)(a1 + 1);
    uint64_t v19 = *(unsigned int *)(*(void *)v9 + 12);
    sub_1CC2ECAA8(*(void *)(v8 + 168));
    unsigned int v21 = (uint64_t *)(v8 + 80);
    uint64_t v22 = (void *)v20;
    uint64_t v23 = v11;
    do
    {
      void *v22 = *(v21 - 9);
      uint64_t v24 = *v21++;
      v22[12] = v24;
      ++v22;
      --v23;
    }
    while (v23);
    uint64_t v25 = (v11 - 1);
    *(void *)(v8 + 80) = *(void *)((v20 & 0xFFFFFFFFFFFFFFC0 | v25 & 0xFFFFFFFFFFFFFFC0)
                                     + 8 * v25
                                     + 0x60);
    *(void *)(v8 + 8) = v20 & 0xFFFFFFFFFFFFFFC0 | v25;
    ++*(_DWORD *)(v8 + 160);
    *(_DWORD *)(v8 + 164) = 1;
    int v26 = *(void **)(v7 + 8);
    *int v26 = v8 + 8;
    v26[1] = 1;
    uint64_t v27 = *(void *)(v7 + 8);
    unint64_t v28 = *(void *)(*(void *)v27 + 8 * *(unsigned int *)(v27 + 12)) & 0xFFFFFFFFFFFFFFC0;
    uint64_t v29 = (*(void *)(*(void *)v27 + 8 * *(unsigned int *)(v27 + 12)) & 0x3FLL | (v19 << 32)) + 1;
    uint64_t v30 = *(unsigned int *)(v7 + 16);
    unsigned int v31 = *(_DWORD *)(v7 + 20);
    if (v30 == 1)
    {
      if (v31 <= 1) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v27 + 16) = v28;
      *(void *)(v27 + 24) = v29;
      ++*(_DWORD *)(v7 + 16);
    }
    else
    {
      if (v30 >= v31) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(v27 + 16 * v30) = *(_OWORD *)(v27 + 16 * v30 - 16);
      uint64_t v105 = *(unsigned int *)(v7 + 16);
      uint64_t v106 = *(void *)(v7 + 8) + 16 * v105 - 16;
      if (v106 != v27 + 16)
      {
        memmove((void *)(v27 + 32), (const void *)(v27 + 16), v106 - (v27 + 16));
        LODWORD(v105) = *(_DWORD *)(v7 + 16);
      }
      *(_DWORD *)(v7 + 16) = v105 + 1;
      *(void *)(v27 + 16) = v28;
      *(void *)(v27 + 24) = v29;
    }
    int v6 = 2;
    unsigned int v9 = v18;
  }
  uint64_t v32 = (v6 - 1);
  if (!*(_DWORD *)(v7 + 16)
    || (uint64_t v33 = *(void *)v9, *(_DWORD *)(*(void *)v9 + 12) >= *(_DWORD *)(*(void *)v9 + 8)))
  {
    llvm::IntervalMapImpl::Path::moveLeft(v9, v6 - 1);
    uint64_t v33 = *(void *)v9;
    ++*(_DWORD *)(*(void *)v9 + 16 * v32 + 12);
  }
  uint64_t v34 = v33 + 16 * v32;
  unsigned int v35 = *(_DWORD *)(v34 + 8);
  if (v35 == 12)
  {
    uint64_t v113 = v5;
    long long v120 = 0u;
    long long v121 = 0u;
    unsigned int v36 = *(_DWORD *)(v34 + 12);
    unsigned int v37 = v6 - 2;
    unsigned int v38 = v6 - 2;
    int v39 = v6;
    while (1)
    {
      uint64_t v40 = v38;
      if (!v38) {
        break;
      }
      int v41 = *(_DWORD *)(v33 + 16 * v38 + 12);
      --v39;
      --v38;
      if (v41) {
        goto LABEL_23;
      }
    }
    int v41 = *(_DWORD *)(v33 + 12);
    int v39 = 1;
    if (!v41)
    {
      char v110 = 1;
      LODWORD(v42) = 0;
      goto LABEL_27;
    }
LABEL_23:
    uint64_t v42 = *(void *)(*(void *)(v33 + 16 * v40) + 8 * (v41 - 1));
    if (v39 != v32)
    {
      int v108 = ~v39 + v6;
      do
      {
        uint64_t v42 = *(void *)((v42 & 0xFFFFFFFFFFFFFFC0) + 8 * (v42 & 0x3F));
        --v108;
      }
      while (v108);
    }
    if (v42)
    {
      char v110 = 0;
      int v41 = (v42 & 0x3F) + 1;
      v122[0] = v41;
      v36 += v41;
      *(void *)&long long v120 = v42 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v42) = 1;
    }
    else
    {
      int v41 = 0;
      char v110 = 1;
    }
LABEL_27:
    v122[v42] = 12;
    unsigned int v43 = v41 + 12;
    unsigned int v44 = v42 + 1;
    *(void *)((unint64_t)&v120 | (8 * v42)) = *(void *)(v33 + 16 * v32);
    int v45 = v6;
    while (1)
    {
      uint64_t v46 = v37;
      if (!v37) {
        break;
      }
      int v47 = *(_DWORD *)(v33 + 16 * v37 + 12);
      int v48 = *(_DWORD *)(v33 + 16 * v37 + 8) - 1;
      --v45;
      --v37;
      if (v47 != v48) {
        goto LABEL_32;
      }
    }
    int v47 = *(_DWORD *)(v33 + 12);
    int v48 = *(_DWORD *)(v33 + 8) - 1;
    int v45 = 1;
LABEL_32:
    if (v47 != v48)
    {
      uint64_t v49 = *(void *)(*(void *)(v33 + 16 * v46) + 8 * (v47 + 1));
      if (v45 != v32)
      {
        int v107 = ~v45 + v6;
        do
        {
          uint64_t v49 = *(void *)(v49 & 0xFFFFFFFFFFFFFFC0);
          --v107;
        }
        while (v107);
      }
      if (v49)
      {
        int v50 = (v49 & 0x3F) + 1;
        v122[v44] = v50;
        v43 += v50;
        *((void *)&v120 + v44) = v49 & 0xFFFFFFFFFFFFFFC0;
        unsigned int v44 = v42 | 2;
      }
    }
    unsigned int v51 = v43 + 1;
    *(void *)char v111 = (v6 - 1);
    if (v43 >= 12 * v44)
    {
      if (v44 == 1) {
        unsigned int v52 = 1;
      }
      else {
        unsigned int v52 = v44 - 1;
      }
      v122[v44] = v122[v52];
      *((void *)&v120 + v44) = *((void *)&v120 + v52);
      v122[v52] = 0;
      sub_1CC2ECAA8(*(void *)(*(void *)v7 + 168));
      unsigned int v117 = v52;
      *((void *)&v120 + v52) = v53;
      ++v44;
    }
    else
    {
      unsigned int v117 = 0;
    }
    uint64_t v112 = (llvm::IntervalMapImpl::Path *)v7;
    unint64_t v54 = 0;
    unsigned int v55 = 0;
    unsigned int v56 = 0;
    uint64_t v57 = v44;
    int v58 = v44;
    do
    {
      if (v54 >= v51 % v44) {
        int v59 = v51 / v44;
      }
      else {
        int v59 = v51 / v44 + 1;
      }
      v119[v54] = v59;
      unsigned int v60 = v36 - v55;
      v55 += v59;
      if (v58 == v44 && v55 > v36)
      {
        int v58 = v54;
        unsigned int v56 = v60;
      }
      ++v54;
    }
    while (v44 != v54);
    unsigned int v109 = v56;
    int v115 = v58;
    --v119[v58];
    uint64_t v116 = v44 - 1;
    uint64_t v118 = v44;
    uint64_t v114 = v4;
    if (v44 != 1)
    {
      uint64_t v61 = v44 - 1;
      uint64_t v62 = v57;
      do
      {
        unsigned int v63 = v122[v61];
        unsigned int v64 = v119[v61];
        if (v63 != v64)
        {
          uint64_t v65 = v62;
          do
          {
            if (v65 == 1) {
              break;
            }
            unsigned int v66 = v122[v65 - 2];
            int v67 = sub_1CC2ECBB8(*((void **)&v120 + v61), v63, *(void *)&v119[2 * v65], v66, v64 - v63);
            v122[v65 - 2] = v66 - v67;
            unsigned int v63 = v122[v61] + v67;
            v122[v61] = v63;
            --v65;
          }
          while (v63 < v64);
        }
        --v62;
        --v61;
      }
      while (v61);
      int v68 = 1;
      int v69 = v118;
      do
      {
        unsigned int v70 = v122[v61];
        unsigned int v71 = v119[v61];
        if (v70 != v71)
        {
          unsigned int v72 = v68;
          do
          {
            if (v69 == v72) {
              break;
            }
            unsigned int v73 = v122[v72];
            int v74 = sub_1CC2ECBB8(*((void **)&v120 + v72), v73, *((void *)&v120 + v61), v70, v70 - v71);
            int v69 = v118;
            v122[v72] = v74 + v73;
            unsigned int v70 = v122[v61] - v74;
            v122[v61] = v70;
            ++v72;
          }
          while (v70 < v71);
        }
        ++v61;
        ++v68;
      }
      while (v61 != v116);
    }
    if ((v110 & 1) == 0) {
      llvm::IntervalMapImpl::Path::moveLeft(v9, v111[0]);
    }
    uint64_t v75 = 0;
    BOOL v10 = 0;
    int v76 = v115;
    uint64_t v77 = *(void *)v111;
    uint64_t v7 = (uint64_t)v112;
    while (1)
    {
      uint64_t v78 = *((void *)&v120 + v75);
      int v79 = v119[v75];
      uint64_t v80 = (v79 - 1);
      uint64_t v81 = *(void *)(v78 + 8 * v80 + 96);
      if (v117 && v75 == v117)
      {
        int v82 = sub_1CC2EC028(v112, v77, v78 & 0xFFFFFFFFFFFFFFC0 | v80, v81);
        BOOL v10 = v82;
        uint64_t v77 = (v77 + v82);
      }
      else
      {
        uint64_t v83 = *(void *)v9;
        *(_DWORD *)(*(void *)v9 + 16 * v77 + 8) = v79;
        if (v77) {
          *(void *)(*(void *)(v83 + 16 * (v77 - 1))
        }
                    + 8 * *(unsigned int *)(v83 + 16 * (v77 - 1) + 12)) = *(void *)(*(void *)(v83 + 16 * (v77 - 1)) + 8 * *(unsigned int *)(v83 + 16 * (v77 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v80;
        sub_1CC2EB8B8((uint64_t)v112, v77, v81);
      }
      if (v75 + 1 == v118) {
        break;
      }
      int v84 = 0;
      ++v75;
      uint64_t v85 = *(void *)v9;
      while (1)
      {
        int v86 = v84;
        if (v77 + v84 == 1) {
          break;
        }
        uint64_t v87 = (v77 - 1 + v84);
        int v89 = *(_DWORD *)(v85 + 16 * v87 + 8);
        int v88 = *(_DWORD *)(v85 + 16 * v87 + 12);
        --v84;
        if (v88 != v89 - 1) {
          goto LABEL_77;
        }
      }
      uint64_t v87 = 0;
      int v89 = *(_DWORD *)(v85 + 8);
      int v88 = *(_DWORD *)(v85 + 12);
LABEL_77:
      unsigned int v90 = v88 + 1;
      *(_DWORD *)(v85 + 16 * v87 + 12) = v90;
      if (v90 != v89)
      {
        uint64_t v91 = *(void *)(*(void *)(v85 + 16 * v87) + 8 * v90);
        if (v86)
        {
          do
          {
            uint64_t v93 = *(void *)v9 + 16 * (v77 + v86);
            *(void *)uint64_t v93 = v91 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v93 + 8) = (v91 & 0x3F) + 1;
            *(_DWORD *)(v93 + 12) = 0;
            uint64_t v91 = *(void *)(v91 & 0xFFFFFFFFFFFFFFC0);
            BOOL v94 = __CFADD__(v86++, 1);
          }
          while (!v94);
          uint64_t v85 = *(void *)v9;
        }
        unsigned int v92 = (unint64_t *)(v85 + 16 * v77);
        *unsigned int v92 = v91 & 0xFFFFFFFFFFFFFFC0;
        v92[1] = (v91 & 0x3F) + 1;
      }
      --v76;
    }
    if (v115 != v75)
    {
      do
      {
        llvm::IntervalMapImpl::Path::moveLeft(v9, v77);
        BOOL v94 = __CFADD__(v76++, 1);
      }
      while (!v94);
    }
    uint64_t v33 = *(void *)v9;
    *(_DWORD *)(*(void *)v9 + 16 * v77 + 12) = v109;
    uint64_t v32 = v111[0] + v10;
    unsigned int v35 = *(_DWORD *)(v33 + 16 * v32 + 8);
    uint64_t v5 = v113;
    uint64_t v4 = v114;
  }
  uint64_t v95 = (uint64_t *)(v33 + 16 * v32);
  uint64_t v96 = *v95;
  uint64_t v97 = *((unsigned int *)v95 + 3);
  unsigned int v98 = v95 + 1;
  if (v35 != v97)
  {
    unsigned int v99 = v35;
    do
    {
      *(void *)(v96 + 8 * v99) = *(void *)(v96 + 8 * (v99 - 1));
      *(void *)(v96 + 96 + 8 * v99) = *(void *)(v96 + 96 + 8 * (v99 - 1));
      --v99;
    }
    while (v97 != v99);
  }
  int v100 = (void *)(v96 + 8 * v97);
  *int v100 = v5;
  v100[12] = v4;
  _DWORD *v98 = v35 + 1;
  if (v32)
  {
    uint64_t v101 = v33 + 16 * (v32 - 1);
    *(void *)(*(void *)v101 + 8 * *(unsigned int *)(v101 + 12)) = *(void *)(*(void *)v101
                                                                                  + 8 * *(unsigned int *)(v101 + 12)) & 0xFFFFFFFFFFFFFFC0 | v35;
  }
  if (v35 == v97)
  {
    sub_1CC2EB8B8(v7, v32, v4);
    uint64_t v33 = *(void *)(v7 + 8);
    uint64_t v96 = *(void *)(v33 + 16 * v32);
  }
  uint64_t v102 = *(void *)(v96 + 8 * *(unsigned int *)(v33 + 16 * v32 + 12));
  uint64_t v103 = v33 + 16 * (v32 + 1);
  *(void *)uint64_t v103 = v102 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v103 + 8) = (v102 & 0x3F) + 1;
  return v10;
}

uint64_t sub_1CC2EC908(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5)
{
  unsigned int v5 = a4;
  unsigned int v7 = a2;
  if (a5 < 1)
  {
    unsigned int v21 = 4 - a4;
    if (-a5 < a2) {
      unsigned int v22 = -a5;
    }
    else {
      unsigned int v22 = a2;
    }
    if (v21 >= v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = v21;
    }
    if (v23)
    {
      uint64_t v24 = a1 + 64;
      uint64_t v25 = (uint64_t *)(a1 + 8);
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = (void *)(a3 + 16 * v5);
        *uint64_t v27 = *(v25 - 1);
        uint64_t v28 = *v25;
        v25 += 2;
        v27[1] = v28;
        sub_1CC2EBE18(a3 + 24 * v5++ + 64, v24);
        v24 += 24;
        --v26;
      }
      while (v26);
    }
    if (v23 != v7)
    {
      uint64_t v29 = a1 + 64;
      uint64_t v30 = (_OWORD *)a1;
      unsigned int v31 = v23;
      do
      {
        *v30++ = *(_OWORD *)(a1 + 16 * v31);
        uint64_t v32 = sub_1CC2EBE18(v29, a1 + 24 * v31++ + 64);
        uint64_t v29 = v32 + 24;
      }
      while (v7 != v31);
    }
    return -(int)v23;
  }
  else
  {
    unsigned int v9 = 4 - a2;
    if (a4 >= a5) {
      unsigned int v10 = a5;
    }
    else {
      unsigned int v10 = a4;
    }
    if (v9 >= v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = v9;
    }
    if (a2)
    {
      uint64_t v12 = a1 + 24 * (a2 - 1) + 64;
      uint64_t v13 = (long long *)(a1 + 16 * (a2 - 1));
      int v14 = v11 - 1;
      do
      {
        long long v15 = *v13--;
        *(_OWORD *)(a1 + 16 * (v14 + v7)) = v15;
        sub_1CC2EBE18(a1 + 24 * (v14 + v7) + 64, v12);
        v12 -= 24;
        --v7;
      }
      while (v7);
    }
    if (v11)
    {
      uint64_t v16 = a1 + 64;
      uint64_t v17 = (void *)(a1 + 8);
      int v18 = -(int)v11;
      do
      {
        uint64_t v19 = (void *)(a3 + 16 * (v5 + v18));
        *(v17 - 1) = *v19;
        *uint64_t v17 = v19[1];
        v17 += 2;
        uint64_t v16 = sub_1CC2EBE18(v16, a3 + 24 * (v5 + v18) + 64) + 24;
      }
      while (!__CFADD__(v18++, 1));
    }
  }
  return v11;
}

double sub_1CC2ECAA8(uint64_t a1)
{
  unint64_t v2 = *(void *)a1;
  if (v2)
  {
    *(void *)a1 = *(void *)v2;
  }
  else
  {
    *(void *)(a1 + 88) += 192;
    uint64_t v3 = *(void *)(a1 + 8);
    if (((v3 + 63) & 0xFFFFFFFFFFFFFFC0) - v3 + 192 > *(void *)(a1 + 16) - v3)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 32) >> 7;
      if (v5 >= 0x1E) {
        LOBYTE(v5) = 30;
      }
      uint64_t v6 = 4096 << v5;
      unsigned int v7 = (char *)operator new(4096 << v5, (std::align_val_t)8uLL);
      unsigned int v8 = *(_DWORD *)(a1 + 32);
      if (v8 >= *(_DWORD *)(a1 + 36)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 24) + 8 * v8) = v7;
      ++*(_DWORD *)(a1 + 32);
      unint64_t v2 = (unint64_t)(v7 + 63) & 0xFFFFFFFFFFFFFFC0;
      *(void *)(a1 + 8) = v2 + 192;
      *(void *)(a1 + 16) = &v7[v6];
    }
    else
    {
      unint64_t v2 = (v3 + 63) & 0xFFFFFFFFFFFFFFC0;
      *(void *)(a1 + 8) = v2 + 192;
    }
  }
  double result = 0.0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)unint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  return result;
}

uint64_t sub_1CC2ECBB8(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5)
{
  if (a5 < 1)
  {
    unsigned int v13 = 12 - a4;
    if (-a5 < a2) {
      LODWORD(v14) = -a5;
    }
    else {
      LODWORD(v14) = a2;
    }
    if (v13 >= v14) {
      uint64_t v14 = v14;
    }
    else {
      uint64_t v14 = v13;
    }
    if (v14)
    {
      long long v15 = a1;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = (void *)(a3 + 8 * a4);
        *uint64_t v17 = *v15;
        v17[12] = v15[12];
        ++a4;
        ++v15;
        --v16;
      }
      while (v16);
    }
    if (v14 != a2)
    {
      int v18 = a1;
      int v19 = v14;
      do
      {
        unint64_t v20 = &a1[v19];
        void *v18 = *v20;
        v18[12] = v20[12];
        ++v19;
        ++v18;
      }
      while (a2 != v19);
    }
    return -(int)v14;
  }
  else
  {
    LODWORD(v5) = 12 - a2;
    if (a4 >= a5) {
      unsigned int v6 = a5;
    }
    else {
      unsigned int v6 = a4;
    }
    if (v5 >= v6) {
      uint64_t v5 = v6;
    }
    else {
      uint64_t v5 = v5;
    }
    if (a2)
    {
      unsigned int v7 = &a1[a2 - 1];
      do
      {
        unsigned int v8 = &a1[v5 - 1 + a2];
        *unsigned int v8 = *v7;
        v8[12] = v7[12];
        --v7;
        --a2;
      }
      while (a2);
    }
    if (v5)
    {
      int v9 = -(int)v5;
      do
      {
        unsigned int v10 = (void *)(a3 + 8 * (a4 + v9));
        *a1 = *v10;
        a1[12] = v10[12];
        ++a1;
      }
      while (!__CFADD__(v9++, 1));
    }
  }
  return v5;
}

uint64_t sub_1CC2ECCC8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  if (*(_DWORD *)(*(void *)result + 160))
  {
    return sub_1CC2EB908(result, 1);
  }
  else
  {
    uint64_t v3 = *(void *)(result + 8);
    unsigned int v4 = *(_DWORD *)(v3 + 16 * *(unsigned int *)(result + 16) - 4);
    int v5 = *(_DWORD *)(v2 + 164);
    if (v4 + 1 != v5)
    {
      int v6 = v5 - 1;
      do
      {
        unsigned int v7 = v4 + 1;
        *(_OWORD *)(v2 + 16 * v4) = *(_OWORD *)(v2 + 16 * (v4 + 1));
        double result = sub_1CC2EBE18(v2 + 64 + 24 * v4, v2 + 64 + 24 * (v4 + 1));
        unsigned int v4 = v7;
      }
      while (v6 != v7);
      int v5 = *(_DWORD *)(v2 + 164);
      uint64_t v3 = *(void *)(v1 + 8);
    }
    int v8 = v5 - 1;
    *(_DWORD *)(v2 + 164) = v8;
    *(_DWORD *)(v3 + 8) = v8;
  }
  return result;
}

unsigned int *sub_1CC2ECD94(unsigned int *a1)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v2 = a1 + 2;
  uint64_t v3 = v4;
  uint64_t v5 = v2[2];
  uint64_t v6 = v4 + 16 * v5;
  int v7 = *(_DWORD *)(v6 - 4);
  if (!v7)
  {
    unsigned int v8 = *(_DWORD *)(*(void *)a1 + 160);
LABEL_7:
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)v2, v8);
    return a1;
  }
  if (!v5 || *(_DWORD *)(v3 + 12) >= *(_DWORD *)(v3 + 8))
  {
    unsigned int v8 = *(_DWORD *)(*(void *)a1 + 160);
    if (v8) {
      goto LABEL_7;
    }
  }
  *(_DWORD *)(v6 - 4) = v7 - 1;
  return a1;
}

uint64_t sub_1CC2ECE00(uint64_t result, unint64_t a2, _OWORD *a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v3 = (_DWORD *)(result + 8);
  unint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(unsigned int *)(result + 8);
  }
  if (v5)
  {
    unsigned int v10 = *(_OWORD **)result;
    do
    {
      long long v11 = a3[1];
      _OWORD *v10 = *a3;
      v10[1] = v11;
      v10 += 2;
      --v5;
    }
    while (v5);
    unint64_t v4 = *v3;
  }
  unint64_t v6 = v4 - a2;
  if (v4 < a2)
  {
    int v7 = (_OWORD *)(*(void *)result + 32 * v4);
    do
    {
      long long v8 = a3[1];
      *int v7 = *a3;
      v7[1] = v8;
      v7 += 2;
    }
    while (!__CFADD__(v6++, 1));
  }
  _DWORD *v3 = a2;
  return result;
}

uint64_t *sub_1CC2ECEE4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 **)(v2 + 8);
    if (v3)
    {
      int v4 = *v3;
      if ((v4 - 4) > 0x1E)
      {
        if ((v4 - 3) >= 0xFFFFFFFE) {
          uint64_t v6 = *(void *)(v2 + 8);
        }
        else {
          uint64_t v6 = 0;
        }
        if ((v4 - 3) < 0xFFFFFFFE)
        {
          if (v4 == 3) {
            *((void *)v3 + 1) = 0;
          }
          goto LABEL_6;
        }
        unint64_t v7 = v6 + 8;
      }
      else
      {
        if ((v3[1] & 0x7F) != 2 && !*((_DWORD *)v3 + 3)) {
          goto LABEL_6;
        }
        uint64_t v8 = *((void *)v3 + 2);
        if ((v8 & 4) == 0) {
          goto LABEL_6;
        }
        unint64_t v7 = v8 & 0xFFFFFFFFFFFFFFF8;
        if (!v7) {
          goto LABEL_6;
        }
      }
      uint64_t v9 = v2 + 8;
      sub_1CC5FA668(v7 + 16, &v9);
    }
LABEL_6:
    MEMORY[0x1D25D9CE0](v2, 0x1060C4078230D8ELL);
  }
  return a1;
}

_DWORD *sub_1CC2ECFB4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x400000000;
  double result = sub_1CC2EAA54((_DWORD *)a1, 0);
  unsigned int v4 = *(_DWORD *)(*(void *)a1 + 160);
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 16);
    for (unsigned int i = v5 - 1; i < v4; *(_DWORD *)(a1 + 16) = i + 1)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(*(void *)(v7 + 16 * i) + 8 * *(unsigned int *)(v7 + 16 * i + 12));
      if (v5 >= *(_DWORD *)(a1 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v9 = (unint64_t *)(v7 + 16 * v5);
      *uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFC0;
      v9[1] = (v8 & 0x3F) + 1;
      unsigned int i = *(_DWORD *)(a1 + 16);
      unsigned int v5 = i + 1;
    }
  }
  return result;
}

uint64_t sub_1CC2ED09C(char **a1, unint64_t a2)
{
  uint64_t v2 = (char *)a2;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  uint64_t v5 = *((unsigned int *)a1 + 3);
  uint64_t v6 = *a1;
  if (v4 >= v5)
  {
    unint64_t v9 = v4 + 1;
    BOOL v11 = (unint64_t)v6 <= a2 && (unint64_t)&v6[32 * v4] > a2;
    if (v11) {
      uint64_t v12 = (uint64_t)(a2 - (void)v6) >> 5;
    }
    else {
      uint64_t v12 = -1;
    }
    if (v4 == -1) {
      sub_1CD0A88F0(v9);
    }
    if (v5 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v13 = (2 * v5) | 1;
    if (v13 <= v9) {
      unint64_t v13 = v9;
    }
    if (v13 >= 0xFFFFFFFF) {
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v13;
    }
    long long v15 = (char *)malloc_type_malloc(32 * v14, 0x4065EBACuLL);
    if (!v15) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v6 = v15;
    uint64_t v16 = *a1;
    uint64_t v17 = *((unsigned int *)a1 + 2);
    if (v17)
    {
      uint64_t v18 = (uint64_t)(v6 + 8);
      uint64_t v19 = 32 * v17;
      uint64_t v20 = (uint64_t)(v16 + 8);
      do
      {
        *(void *)(v18 - 8) = *(void *)(v20 - 8);
        sub_1CC2EA3E8(v18, v20);
        v18 += 32;
        v20 += 32;
        v19 -= 32;
      }
      while (v19);
      uint64_t v16 = *a1;
      uint64_t v21 = *((unsigned int *)a1 + 2);
      if (v21)
      {
        unsigned int v22 = v16 - 24;
        uint64_t v23 = 32 * v21;
        do
        {
          uint64_t v24 = *(void *)&v22[v23];
          *(void *)&v22[v23] = 0;
          if (v24) {
            MEMORY[0x1D25D9CB0](v24, 0x1000C8052888210);
          }
          v23 -= 32;
        }
        while (v23);
        uint64_t v16 = *a1;
      }
    }
    if (v16 != (char *)(a1 + 2)) {
      free(v16);
    }
    *a1 = v6;
    *((_DWORD *)a1 + 3) = v14;
    if (v11) {
      uint64_t v2 = &v6[32 * v12];
    }
    uint64_t v4 = *((unsigned int *)a1 + 2);
  }
  uint64_t v7 = &v6[32 * v4];
  *(void *)uint64_t v7 = *(void *)v2;
  uint64_t result = sub_1CC2EA3E8((uint64_t)(v7 + 8), (uint64_t)(v2 + 8));
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1CC2ED240(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = v1 + 16 * *(unsigned int *)(result + 16);
  int v3 = *(_DWORD *)(v2 - 4) + 1;
  *(_DWORD *)(v2 - 4) = v3;
  if (v3 == *(_DWORD *)(v1 + 16 * *(unsigned int *)(result + 16) - 8))
  {
    uint64_t v4 = *(unsigned int *)(*(void *)result + 160);
    if (v4)
    {
      unsigned int v5 = 1;
      uint64_t v6 = v4 + 1;
      uint64_t v7 = (_DWORD *)(v1 + 16 * v4 - 8);
      while (1)
      {
        uint64_t v8 = v7;
        if (v6 == 2) {
          break;
        }
        int v10 = *v7;
        int v9 = v7[1];
        int v11 = *v7 - 1;
        --v6;
        v7 -= 4;
        if (v9 != v11)
        {
          unsigned int v5 = v6;
          goto LABEL_8;
        }
      }
      int v10 = *(_DWORD *)(v1 + 8);
      int v9 = *(_DWORD *)(v1 + 12);
LABEL_8:
      unsigned int v12 = v9 + 1;
      v8[1] = v12;
      if (v12 != v10)
      {
        uint64_t v13 = *(void *)(*((void *)v8 - 1) + 8 * v12);
        if (v4 != v5)
        {
          do
          {
            uint64_t v15 = *(void *)(result + 8) + 16 * v5;
            *(void *)uint64_t v15 = v13 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v15 + 8) = (v13 & 0x3F) + 1;
            *(_DWORD *)(v15 + 12) = 0;
            ++v5;
            uint64_t v13 = *(void *)(v13 & 0xFFFFFFFFFFFFFFC0);
          }
          while (v4 != v5);
          uint64_t v1 = *(void *)(result + 8);
        }
        uint64_t v14 = (unint64_t *)(v1 + 16 * v4);
        *uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFC0;
        v14[1] = (v13 & 0x3F) + 1;
      }
    }
  }
  return result;
}

uint64_t sub_1CC2ED32C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(unsigned int *)(result + 16);
  *(void *)(*(void *)(v2 + 16 * v3 - 16) + 16 * *(unsigned int *)(v2 + 16 * v3 - 4) + 8) = a2;
  if (*(_DWORD *)(v2 + 16 * (v3 - 1) + 12) == *(_DWORD *)(v2 + 16 * (v3 - 1) + 8) - 1) {
    return sub_1CC2EB8B8(result, (int)v3 - 1, a2);
  }
  return result;
}

_DWORD *sub_1CC2ED36C(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result[4];
  if (!v2) {
    return result;
  }
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = *((void *)result + 1);
  if (*(_DWORD *)(v4 + 12) >= *(_DWORD *)(v4 + 8)) {
    return result;
  }
  uint64_t v6 = *(void *)result;
  uint64_t v7 = v4 + 16 * v2;
  if (!*(_DWORD *)(*(void *)result + 160))
  {
    unsigned int v14 = *(_DWORD *)(v7 - 4);
    int v15 = *(_DWORD *)(v6 + 164);
    if (v14 != v15)
    {
      while (1)
      {
        uint64_t v16 = *(void *)(v6 + 16 * v14 + 8);
        if (((v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3)) {
          break;
        }
        if (v15 == ++v14)
        {
          unsigned int v14 = *(_DWORD *)(v6 + 164);
          goto LABEL_12;
        }
      }
    }
    goto LABEL_12;
  }
  uint64_t v8 = *(void *)(v7 - 16);
  uint64_t v9 = *(void *)(v8 + 16 * (*(_DWORD *)(v7 - 8) - 1) + 8);
  unsigned int v10 = (v9 >> 1) & 3 | *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v11 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  if (v10 > v11)
  {
    unsigned int v12 = *(_DWORD *)(v7 - 4);
    do
      uint64_t v13 = *(void *)(v8 + 16 * v12++ + 8);
    while (((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11);
    unsigned int v14 = v12 - 1;
LABEL_12:
    *(_DWORD *)(v7 - 4) = v14;
    return result;
  }
  result[4] = v2 - 1;
  unsigned int v17 = v2 - 2;
  if (v2 == 2)
  {
    uint64_t v30 = *(unsigned int *)(v4 + 12);
  }
  else
  {
    uint64_t v18 = (v2 - 3);
    if (v18)
    {
      uint64_t v19 = *(void *)(*(void *)(v4 + 16 * v18)
                      + 8 * *(unsigned int *)(v4 + 16 * v18 + 12)
                      + 96);
      if (((v19 >> 1) & 3 | *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24)) > v11)
      {
LABEL_20:
        uint64_t v24 = (uint64_t *)(v4 + 16 * v17);
        uint64_t v25 = *v24;
        unsigned int v28 = *((_DWORD *)v24 + 3);
        uint64_t v26 = (_DWORD *)v24 + 3;
        unsigned int v27 = v28;
        do
          uint64_t v29 = *(void *)(v25 + 8 * v27++ + 96);
        while (((v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11);
        *uint64_t v26 = v27 - 1;
LABEL_35:
        return (_DWORD *)sub_1CC2EAB38(v3, a2);
      }
      uint64_t v20 = 16 * v18;
      while (1)
      {
        result[4] = v17;
        uint64_t v21 = v20 - 16;
        if (v20 == 16) {
          break;
        }
        uint64_t v22 = *(void *)(*(void *)(v4 + v20 - 16) + 8 * *(unsigned int *)(v4 + v20 - 4) + 96);
        unsigned int v23 = (v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24);
        --v17;
        uint64_t v20 = v21;
        if (v23 > v11) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v30 = *(unsigned int *)(v4 + 12);
    if (((*(void *)(v6 + 8 * v30 + 80) >> 1) & 3 | *(_DWORD *)((*(void *)(v6 + 8 * v30 + 80) & 0xFFFFFFFFFFFFFFF8)
                                                                              + 24)) > v11)
    {
      unsigned int v31 = *(_DWORD *)(v4 + 28);
      do
        uint64_t v32 = *(void *)(*(void *)(v4 + 16) + 8 * v31++ + 96);
      while (((v32 >> 1) & 3 | *(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11);
      *(_DWORD *)(v4 + 28) = v31 - 1;
      goto LABEL_35;
    }
  }
  uint64_t v33 = *(unsigned int *)(v6 + 164);
  if (v30 != v33)
  {
    uint64_t v34 = v6 + 8;
    while (1)
    {
      uint64_t v35 = *(void *)(v34 + 8 * v30 + 72);
      if (((v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24)) > v11) {
        break;
      }
      uint64_t v30 = (v30 + 1);
      if (v33 == v30)
      {
        uint64_t v30 = v33;
        break;
      }
    }
  }
  uint64_t result = sub_1CC2EAA54(result, v30);
  if (*(_DWORD *)(v3 + 16) && *(_DWORD *)(*(void *)(v3 + 8) + 12) < *(_DWORD *)(*(void *)(v3 + 8) + 8)) {
    goto LABEL_35;
  }
  return result;
}

uint64_t sub_1CC2ED628(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (_DWORD *)(v3 + 24 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 24 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC2ED6D4(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 72);
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v5 = result;
    *(void *)uint64_t result = *(void *)a2;
    if (v2)
    {
      sub_1CC0778D4(result + 8, a2 + 8);
      return v5;
    }
    else
    {
      *(void *)(result + 8) = result + 24;
      uint64_t v4 = result + 8;
      *(void *)(v5 + 16) = 0xC00000000;
      if (*(_DWORD *)(a2 + 16)) {
        sub_1CC0778D4(v4, a2 + 8);
      }
      uint64_t result = v5;
      *(unsigned char *)(v5 + 72) = 1;
    }
  }
  else if (*(unsigned char *)(result + 72))
  {
    uint64_t v3 = *(void **)(result + 8);
    if (v3 != (void *)(result + 24))
    {
      uint64_t v6 = result;
      free(v3);
      uint64_t result = v6;
    }
    *(unsigned char *)(result + 72) = 0;
  }
  return result;
}

void sub_1CC2ED794(uint64_t a1, uint64_t a2, __int32 __c, __int32 a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  char v8 = *(unsigned char *)(a2 + 8);
  if ((4 * v8) >= 0x31u) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  size_t v9 = (4 * v8);
  if ((*(unsigned char *)(a2 + 8) & 0x3F) != 0) {
    memcpy(v15, *(const void **)a2, v9);
  }
  size_t v10 = (v9 >> 2);
  unsigned int v14 = v10;
  unsigned int v11 = &v15[v10];
  BOOL v12 = wmemchr(v15, __c, v10);
  if (v12) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v11;
  }
  *unsigned int v13 = a4;
  sub_1CC2E9CCC(a1, v15, v14, (*(unsigned __int8 *)(a2 + 8) >> 6) & 1, *(unsigned __int8 *)(a2 + 8) >> 7, *(void *)(a2 + 16));
}

_DWORD *sub_1CC2ED8DC(_DWORD *result, int a2, uint64_t a3)
{
  uint64_t v5 = result;
  unsigned int v6 = result[276];
  if (v6)
  {
    uint64_t v7 = *((void *)result + 136);
    unsigned int v8 = v6 - 1;
    unsigned int v9 = (v6 - 1) & (37 * a2);
    size_t v10 = (int *)(v7 + 16 * v9);
    int v11 = *v10;
    if (*v10 == a2) {
      goto LABEL_18;
    }
    BOOL v12 = 0;
    int v13 = 1;
    while (v11 != -1)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -2;
      }
      if (v14) {
        BOOL v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      size_t v10 = (int *)(v7 + 16 * (v15 & v8));
      int v11 = *v10;
      if (*v10 == a2) {
        goto LABEL_18;
      }
    }
    if (v12) {
      size_t v10 = v12;
    }
  }
  else
  {
    size_t v10 = 0;
  }
  result += 272;
  int v16 = v5[274];
  if (4 * v16 + 4 >= 3 * v6)
  {
    uint64_t result = sub_1CBB0E4B4((uint64_t *)result, 2 * v6);
    int v26 = v5[276];
    if (v26)
    {
      uint64_t v27 = *((void *)v5 + 136);
      int v28 = v26 - 1;
      unsigned int v29 = (v26 - 1) & (37 * a2);
      size_t v10 = (int *)(v27 + 16 * v29);
      int v30 = *v10;
      if (*v10 == a2) {
        goto LABEL_15;
      }
      unsigned int v31 = 0;
      int v32 = 1;
      while (v30 != -1)
      {
        if (v31) {
          BOOL v33 = 0;
        }
        else {
          BOOL v33 = v30 == -2;
        }
        if (v33) {
          unsigned int v31 = v10;
        }
        unsigned int v34 = v29 + v32++;
        unsigned int v29 = v34 & v28;
        size_t v10 = (int *)(v27 + 16 * (v34 & v28));
        int v30 = *v10;
        if (*v10 == a2) {
          goto LABEL_15;
        }
      }
LABEL_56:
      if (v31) {
        size_t v10 = v31;
      }
      goto LABEL_15;
    }
LABEL_55:
    size_t v10 = 0;
    goto LABEL_15;
  }
  if (v6 + ~v16 - v5[275] <= v6 >> 3)
  {
    uint64_t result = sub_1CBB0E4B4((uint64_t *)result, v6);
    int v35 = v5[276];
    if (v35)
    {
      uint64_t v36 = *((void *)v5 + 136);
      int v37 = v35 - 1;
      unsigned int v38 = (v35 - 1) & (37 * a2);
      size_t v10 = (int *)(v36 + 16 * v38);
      int v39 = *v10;
      if (*v10 == a2) {
        goto LABEL_15;
      }
      unsigned int v31 = 0;
      int v40 = 1;
      while (v39 != -1)
      {
        if (v31) {
          BOOL v41 = 0;
        }
        else {
          BOOL v41 = v39 == -2;
        }
        if (v41) {
          unsigned int v31 = v10;
        }
        unsigned int v42 = v38 + v40++;
        unsigned int v38 = v42 & v37;
        size_t v10 = (int *)(v36 + 16 * (v42 & v37));
        int v39 = *v10;
        if (*v10 == a2) {
          goto LABEL_15;
        }
      }
      goto LABEL_56;
    }
    goto LABEL_55;
  }
LABEL_15:
  ++v5[274];
  if (*v10 != -1) {
    --v5[275];
  }
  int *v10 = a2;
  *((void *)v10 + 1) = 0;
LABEL_18:
  uint64_t v17 = *((void *)v10 + 1);
  uint64_t v18 = *(void *)(a3 + 40);
  do
  {
    uint64_t v19 = v18;
    uint64_t v18 = *(void *)(v18 + 40);
  }
  while (v19 != v18);
  *(void *)(a3 + 40) = v19;
  if (!v17) {
    goto LABEL_28;
  }
  uint64_t v20 = *(void *)(v17 + 40);
  do
  {
    uint64_t v21 = v20;
    uint64_t v20 = *(void *)(v20 + 40);
  }
  while (v21 != v20);
  *(void *)(v17 + 40) = v21;
  if (v21 == v19)
  {
LABEL_28:
    uint64_t v21 = v19;
  }
  else
  {
    uint64_t v22 = *(void *)(v19 + 48);
    uint64_t v23 = v19;
    if (v22)
    {
      uint64_t v24 = v19;
      do
      {
        uint64_t v23 = v22;
        *(void *)(v24 + 40) = v21;
        uint64_t v22 = *(void *)(v22 + 48);
        uint64_t v24 = v23;
      }
      while (v22);
    }
    uint64_t v25 = *(void *)(v21 + 48);
    *(void *)(v23 + 40) = v21;
    *(void *)(v23 + 48) = v25;
    *(void *)(v21 + 48) = v19;
  }
  *((void *)v10 + 1) = v21;
  return result;
}

uint64_t sub_1CC2EDB5C(uint64_t a1)
{
  sub_1CC2EDBF0((uint64_t *)(a1 + 184));
  int v2 = *(void **)(a1 + 128);
  if (v2 != (void *)(a1 + 144)) {
    free(v2);
  }
  sub_1CC2E0FD8(a1 + 88, *(void **)(a1 + 104));
  uint64_t v3 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v3) {
    operator delete(v3);
  }
  sub_1CC2E1048(a1 + 48, *(void **)(a1 + 64));
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4) {
    operator delete(v4);
  }
  sub_1CC2E0FD8(a1 + 8, *(void **)(a1 + 24));
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t *sub_1CC2EDBF0(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    unsigned int v6 = (void ***)(v3 + 8);
    do
    {
      uint64_t v7 = (uint64_t)*(v6 - 1);
      if (v7 != -4096 && v7 != -8192)
      {
        uint64_t v8 = v5;
        unsigned int v9 = v6;
        sub_1CC2E18C8(v6, 0);
        uint64_t v5 = v8;
        unsigned int v6 = v9;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t sub_1CC2EDC78(uint64_t a1, int a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = (37 * a3) & (a2 - 1);
  int v4 = *(_DWORD *)(a1 + 16 * v3);
  if (v4 != a3)
  {
    int v8 = 1;
    while (v4 != -1)
    {
      int v9 = v3 + v8++;
      uint64_t v3 = v9 & (a2 - 1);
      int v4 = *(_DWORD *)(a1 + 16 * v3);
      if (v4 == a3) {
        goto LABEL_3;
      }
    }
    return 0;
  }
LABEL_3:
  uint64_t v5 = *(void *)(a1 + 16 * v3 + 8);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(v5 + 40);
  do
  {
    uint64_t result = v6;
    uint64_t v6 = *(void *)(v6 + 40);
  }
  while (result != v6);
  *(void *)(v5 + 40) = result;
  return result;
}

unint64_t sub_1CC2EDCF8(llvm::MachineBasicBlock *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = this;
  for (unint64_t i = a2 & 0xFFFFFFFFFFFFFFF8;
        ;
        unint64_t i = *(void *)(i & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF9 | (2 * ((i >> 1) & 3)))
  {
    if (i >= 8)
    {
      uint64_t v7 = *(void *)((i & 0xFFFFFFFFFFFFFFF8) + 16);
      if (v7) {
        break;
      }
    }
    if (i == *(void *)(a3 + 16 * *((unsigned int *)this + 6)))
    {
      uint64_t v21 = 0;
      if (sub_1CD519A94(*(void *)a4, *(_DWORD *)(a4 + 16), (uint64_t)this, &v21)) {
        BOOL v13 = v21 == *(void *)a4 + 16 * *(unsigned int *)(a4 + 16);
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        BOOL v14 = (uint64_t *)((char *)this + 56);
      }
      else
      {
        uint64_t v15 = *(void *)(v21 + 8);
        if (!v15 || (*(unsigned char *)v15 & 4) == 0)
        {
          while ((*(_WORD *)(v15 + 44) & 8) != 0)
            uint64_t v15 = *(void *)(v15 + 8);
        }
        BOOL v14 = (uint64_t *)(v15 + 8);
      }
      uint64_t v11 = *v14;
      int v16 = (void *)llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug((uint64_t)this, *v14, 1);
      if ((void *)v11 != v16)
      {
        uint64_t v18 = v16;
        unint64_t v19 = *v16 & 0xFFFFFFFFFFFFFFF8;
        if (!v19 || (*(unsigned char *)v19 & 4) == 0)
        {
          while ((*(_WORD *)(v19 + 44) & 4) != 0)
            unint64_t v19 = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
        }
        sub_1CD519B28(a4, (uint64_t *)&v20)[1] = v19;
        return (unint64_t)v18;
      }
      return v11;
    }
  }
  __int16 v8 = *(_WORD *)(v7 + 44);
  uint64_t v9 = *(void *)(*(void *)(v7 + 16) + 8);
  if ((v8 & 0xC) != 0 && (v8 & 4) == 0)
  {
    if ((v9 & 0x200) == 0)
    {
      uint64_t v12 = v7;
      while ((*(_WORD *)(v12 + 44) & 8) != 0)
      {
        uint64_t v12 = *(void *)(v12 + 8);
        if ((*(unsigned char *)(*(void *)(v12 + 16) + 9) & 2) != 0) {
          return llvm::MachineBasicBlock::getFirstTerminator(this);
        }
      }
      goto LABEL_11;
    }
    return llvm::MachineBasicBlock::getFirstTerminator(this);
  }
  if ((v9 & 0x200) != 0) {
    return llvm::MachineBasicBlock::getFirstTerminator(this);
  }
LABEL_11:
  if ((v8 & 8) != 0 && (*(void *)v7 & 4) == 0)
  {
    do
      uint64_t v7 = *(void *)(v7 + 8);
    while ((*(_WORD *)(v7 + 44) & 8) != 0);
  }
  return *(void *)(v7 + 8);
}

uint64_t sub_1CC2EDEAC(uint64_t a1, const llvm::MachineOperand *a2, llvm *this, int **a4)
{
  if (!a2)
  {
    uint64_t result = 0;
    *a4 = 0;
    return result;
  }
  int v18 = 20;
  uint64_t v19 = 0;
  int v16 = 21;
  uint64_t v17 = 0;
  uint64_t v7 = 0;
  int v8 = a2 - 1;
  unsigned int v9 = (a2 - 1) & llvm::hash_value(this, a2);
  for (int i = 1; ; ++i)
  {
    uint64_t v11 = (int *)(a1 + 40 * v9);
    if ((*(_DWORD *)this & 0xFE) == 0x14)
    {
      int v12 = *v11;
      if (*(_DWORD *)this == *v11)
      {
LABEL_21:
        uint64_t result = 1;
        goto LABEL_10;
      }
    }
    else
    {
      if (llvm::MachineOperand::isIdenticalTo(this, (const llvm::MachineOperand *)(a1 + 40 * v9))) {
        goto LABEL_21;
      }
      int v12 = *v11;
    }
    if ((v12 & 0xFE) != 0x14) {
      break;
    }
    if (v18 == v12) {
      goto LABEL_8;
    }
LABEL_15:
    if ((v12 & 0xFE) == 0x14) {
      BOOL isIdenticalTo = v16 == v12;
    }
    else {
      BOOL isIdenticalTo = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(a1 + 40 * v9), (const llvm::MachineOperand *)&v16);
    }
    if (isIdenticalTo && v7 == 0) {
      uint64_t v7 = (int *)(a1 + 40 * v9);
    }
    unsigned int v15 = v9 + i;
    unsigned int v9 = v15 & v8;
  }
  if (!llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(a1 + 40 * v9), (const llvm::MachineOperand *)&v18))
  {
    int v12 = *v11;
    goto LABEL_15;
  }
LABEL_8:
  uint64_t result = 0;
  if (v7) {
    uint64_t v11 = v7;
  }
LABEL_10:
  *a4 = v11;
  return result;
}

char *sub_1CC2EE008(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(llvm::MachineOperand **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC2EE0E8(a1, v4, (llvm::MachineOperand *)((char *)v4 + 40 * v3));
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = &result[40 * v10];
    do
    {
      *(_DWORD *)uint64_t result = 20;
      *((void *)result + 1) = 0;
      result += 40;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1CC2EE0E8(uint64_t result, llvm::MachineOperand *this, llvm::MachineOperand *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)result + 40 * v6;
    do
    {
      *(_DWORD *)uint64_t v7 = 20;
      *(void *)(v7 + 8) = 0;
      v7 += 40;
    }
    while (v7 != v8);
  }
  int v14 = 20;
  uint64_t v15 = 0;
  int v12 = 21;
  uint64_t v13 = 0;
  while (this != a3)
  {
    int v9 = *(_DWORD *)this;
    if ((*(_DWORD *)this & 0xFE) == 0x14)
    {
      if (v14 == v9) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t result = llvm::MachineOperand::isIdenticalTo(this, (const llvm::MachineOperand *)&v14);
      if (result) {
        goto LABEL_12;
      }
      int v9 = *(_DWORD *)this;
    }
    if ((v9 & 0xFE) != 0x14)
    {
      uint64_t result = llvm::MachineOperand::isIdenticalTo(this, (const llvm::MachineOperand *)&v12);
      if (result) {
        goto LABEL_12;
      }
LABEL_11:
      int v16 = 0;
      uint64_t result = sub_1CC2EDEAC(*(void *)v5, (const llvm::MachineOperand *)*(unsigned int *)(v5 + 16), this, &v16);
      int v10 = v16;
      long long v11 = *((_OWORD *)this + 1);
      *(_OWORD *)int v16 = *(_OWORD *)this;
      *((_OWORD *)v10 + 1) = v11;
      v10[8] = *((_DWORD *)this + 8);
      ++*(_DWORD *)(v5 + 8);
      goto LABEL_12;
    }
    if (v12 != v9) {
      goto LABEL_11;
    }
LABEL_12:
    this = (llvm::MachineOperand *)((char *)this + 40);
  }
  return result;
}

void sub_1CC2EE210(uint64_t a1, llvm::MachineBasicBlock *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v86[32] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = *(void *)(*(void *)(a11 + 288) + 392);
  uint64_t v19 = *(void *)(v18 + 16 * *((unsigned int *)this + 6) + 8);
  if (((v19 >> 1) & 3 | *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3)) {
    uint64_t v20 = a4;
  }
  else {
    uint64_t v20 = *(void *)(v18 + 16 * *((unsigned int *)this + 6) + 8);
  }
  unint64_t v21 = sub_1CC2EDCF8(this, a3, v18, a14);
  int v84 = v86;
  uint64_t v85 = 0x800000000;
  char v22 = *(unsigned char *)(a5 + 8);
  uint64_t v23 = v22 & 0x3F;
  if ((v22 & 0x3F) != 0)
  {
    uint64_t v24 = v20;
    uint64_t v25 = *(__int32 **)a5;
    uint64_t v26 = *(void *)a5 + 4 * v23;
    uint64_t v27 = wmemchr(*(__int32 **)a5, -1, v22 & 0x3F);
    if (v27) {
      uint64_t v28 = (uint64_t)v27;
    }
    else {
      uint64_t v28 = v26;
    }
    uint64_t v29 = v28 - (void)v25;
    char v30 = *(unsigned char *)(a5 + 8);
    if (v23 == v29 >> 2)
    {
      uint64_t v31 = v30 & 0x3F;
      uint64_t v20 = v24;
      if ((*(unsigned char *)(a5 + 8) & 0x3F) != 0)
      {
        int v32 = *(__int32 **)a5;
        unsigned int v33 = v85;
        uint64_t v34 = 4 * v31;
        do
        {
          int v35 = (char *)(*(void *)(a1 + 56) + 32 * *v32);
          if (v33 >= HIDWORD(v85))
          {
            unsigned int v38 = (char *)v84 + 32 * v33;
            BOOL v39 = v84 <= v35 && v38 > v35;
            if (!v39) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v36 = (char *)v84 + 32 * v85;
          long long v37 = *((_OWORD *)v35 + 1);
          *uint64_t v36 = *(_OWORD *)v35;
          v36[1] = v37;
          unsigned int v33 = v85 + 1;
          LODWORD(v85) = v85 + 1;
          ++v32;
          v34 -= 4;
        }
        while (v34);
      }
      goto LABEL_23;
    }
    unint64_t v40 = v30 & 0x3F;
    uint64_t v20 = v24;
  }
  else
  {
    unint64_t v40 = 0;
  }
  *(_OWORD *)&v81[4] = 0uLL;
  int v83 = 0;
  uint64_t v82 = 0;
  *(_DWORD *)uint64_t v81 = 0x80000000;
  sub_1CC2ECE00((uint64_t)&v84, v40, v81);
LABEL_23:
  appended = *(llvm::DIExpression **)(a5 + 16);
  unsigned int v41 = *(unsigned __int8 *)(a5 + 8);
  int v42 = (v41 >> 6) & 1;
  uint64_t v43 = a7;
  if (a7)
  {
    uint64_t v44 = 0;
    do
    {
      if (*(unsigned char *)(a6 + v44))
      {
        if ((v41 & 0x80) != 0)
        {
          *(void *)uint64_t v81 = &v81[16];
          *(void *)&v81[8] = 0x400000000;
          llvm::DIExpression::appendOffset((uint64_t)v81, *(unsigned int *)(a9 + 4 * v44));
          if (*(unsigned int *)&v81[8] >= (unint64_t)*(unsigned int *)&v81[12]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v81 + 8 * *(unsigned int *)&v81[8]) = 6;
          ++*(_DWORD *)&v81[8];
          appended = llvm::DIExpression::appendOpsToArg(appended, *(uint64_t **)v81, *(unsigned int *)&v81[8], v44, 0);
          if (*(unsigned char **)v81 != &v81[16]) {
            free(*(void **)v81);
          }
        }
        else
        {
          if (v42) {
            uint64_t v45 = 2;
          }
          else {
            uint64_t v45 = 0;
          }
          appended = llvm::DIExpression::prepend(appended, (const llvm::DIExpression *)v45, *(unsigned int *)(a9 + 4 * v44));
          LOBYTE(v42) = 1;
        }
      }
      ++v44;
    }
    while (v43 != v44);
  }
  if ((v41 & 0x80u) == 0) {
    uint64_t v46 = 13;
  }
  else {
    uint64_t v46 = 14;
  }
  int v47 = (char *)this + 48;
  int v48 = v42 & 1;
  do
  {
    llvm::BuildMI((uint64_t)this, (unint64_t *)v21, (unsigned __int8 **)(a1 + 32), (_WORD *)(*(void *)(a12 + 8) + 48 * v46), v48, (const llvm::MachineOperand *)v84, v85, *(void *)a1, (uint64_t)appended);
    *(void *)uint64_t v81 = &v81[16];
    uint64_t v49 = (char *)this + 48;
    *(void *)&v81[8] = 0x400000000;
    if (v85)
    {
      unsigned int v50 = 0;
      uint64_t v51 = 32 * v85;
      unsigned int v52 = (char *)v84 + 4;
      do
      {
        if (!*((unsigned char *)v52 - 4))
        {
          if (v50 >= *(_DWORD *)&v81[12]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)v81 + 4 * v50) = *v52;
          unsigned int v50 = ++*(_DWORD *)&v81[8];
        }
        v52 += 8;
        v51 -= 32;
      }
      while (v51);
      uint64_t v49 = (char *)this + 48;
      if (v50)
      {
        uint64_t v49 = (char *)this + 48;
        if ((char *)v21 != v47)
        {
          while (1)
          {
            __int16 v53 = *(_WORD *)(v21 + 44);
            uint64_t v54 = *(void *)(*(void *)(v21 + 16) + 8);
            if ((v53 & 0xC) != 0 && (v53 & 4) == 0)
            {
              unint64_t v75 = v21;
              if ((v54 & 0x200) != 0) {
                goto LABEL_106;
              }
              while ((*(_WORD *)(v75 + 44) & 8) != 0)
              {
                unint64_t v75 = *(void *)(v75 + 8);
                if ((*(unsigned char *)(*(void *)(v75 + 16) + 9) & 2) != 0) {
                  goto LABEL_106;
                }
              }
            }
            else if ((v54 & 0x200) != 0)
            {
              goto LABEL_106;
            }
            uint64_t v56 = *(void *)(a11 + 288);
            uint64_t v57 = *(unsigned int *)(v56 + 384);
            if (v57)
            {
              uint64_t v58 = *(void *)(v56 + 368);
              unsigned int v59 = v57 - 1;
              unsigned int v60 = (v57 - 1) & ((v21 >> 4) ^ (v21 >> 9));
              uint64_t v61 = *(void *)(v58 + 16 * v60);
              if (v21 == v61)
              {
LABEL_61:
                unint64_t v64 = v21;
                if ((v53 & 4) != 0)
                {
                  do
                    unint64_t v64 = *(void *)v64 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v64 + 44) & 4) != 0);
                }
                unint64_t v65 = v21;
                if ((v53 & 8) != 0)
                {
                  do
                    unint64_t v65 = *(void *)(v65 + 8);
                  while ((*(_WORD *)(v65 + 44) & 8) != 0);
                }
                unint64_t v66 = *(void *)(v65 + 8);
                if (v64 != v66)
                {
                  while (1)
                  {
                    unsigned int v67 = **(unsigned __int16 **)(v64 + 16);
                    BOOL v39 = v67 > 0x17;
                    int v68 = (1 << v67) & 0x83E000;
                    if (v39 || v68 == 0) {
                      break;
                    }
                    unint64_t v64 = *(void *)(v64 + 8);
                    if (v64 == v66)
                    {
                      unint64_t v64 = v66;
                      break;
                    }
                  }
                }
                LODWORD(v70) = ((v64 >> 4) ^ (v64 >> 9)) & v59;
                unsigned int v71 = (uint64_t *)(v58 + 16 * v70);
                uint64_t v72 = *v71;
                if (v64 != *v71)
                {
                  int v73 = 1;
                  while (v72 != -4096)
                  {
                    int v74 = v70 + v73++;
                    uint64_t v70 = v74 & v59;
                    uint64_t v72 = *(void *)(v58 + 16 * v70);
                    if (v64 == v72)
                    {
                      unsigned int v71 = (uint64_t *)(v58 + 16 * v70);
                      goto LABEL_80;
                    }
                  }
                  unsigned int v71 = (uint64_t *)(v58 + 16 * v57);
                }
LABEL_80:
                if (*(_DWORD *)((v71[1] & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24))
                {
LABEL_106:
                  uint64_t v49 = (char *)this + 48;
                  goto LABEL_102;
                }
              }
              else
              {
                int v62 = 1;
                while (v61 != -4096)
                {
                  unsigned int v63 = v60 + v62++;
                  unsigned int v60 = v63 & v59;
                  uint64_t v61 = *(void *)(v58 + 16 * v60);
                  if (v21 == v61) {
                    goto LABEL_61;
                  }
                }
              }
            }
            if (*(_DWORD *)&v81[8]) {
              break;
            }
LABEL_85:
            if (!v21 || (*(unsigned char *)v21 & 4) == 0)
            {
              while ((*(_WORD *)(v21 + 44) & 8) != 0)
                unint64_t v21 = *(void *)(v21 + 8);
            }
            unint64_t v21 = *(void *)(v21 + 8);
            if ((char *)v21 == v47) {
              goto LABEL_106;
            }
          }
          int v76 = *(unsigned int **)v81;
          uint64_t v77 = 4 * *(unsigned int *)&v81[8];
          while (llvm::MachineInstr::findRegisterDefOperandIdx(v21, *v76, 0, 0, a13) == -1)
          {
            ++v76;
            v77 -= 4;
            if (!v77) {
              goto LABEL_85;
            }
          }
          if (!v21 || (*(unsigned char *)v21 & 4) == 0)
          {
            while ((*(_WORD *)(v21 + 44) & 8) != 0)
              unint64_t v21 = *(void *)(v21 + 8);
          }
          uint64_t v49 = *(char **)(v21 + 8);
        }
      }
    }
LABEL_102:
    if (*(unsigned char **)v81 != &v81[16]) {
      free(*(void **)v81);
    }
    unint64_t v21 = (unint64_t)v49;
  }
  while (v49 != v47);
  if (v84 != v86) {
    free(v84);
  }
}

llvm::raw_ostream *sub_1CC2EE894(llvm::raw_ostream *this, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = this;
  int v5 = *a2;
  if (v5 == 26 || v5 == 25)
  {
    uint64_t v6 = *(void *)&a2[-8 * *((unsigned int *)a2 + 2) + 8];
    if (v6)
    {
      uint64_t v7 = *(size_t **)(v6 + 8);
      size_t v10 = *v7;
      uint64_t v8 = v7 + 3;
      size_t v9 = v10;
      if (v10)
      {
        unint64_t v11 = *((unsigned int *)a2 + 6);
        int v12 = (void *)*((void *)this + 4);
        if (v9 <= *((void *)v4 + 3) - (void)v12)
        {
          memcpy(v12, v8, v9);
          uint64_t v13 = (unsigned char *)(*((void *)v4 + 4) + v9);
          *((void *)v4 + 4) = v13;
        }
        else
        {
          llvm::raw_ostream::write(v4, (const char *)v8, v9);
          uint64_t v13 = (unsigned char *)*((void *)v4 + 4);
        }
        if (*((unsigned char **)v4 + 3) == v13)
        {
          llvm::raw_ostream::write(v4, ",", 1uLL);
        }
        else
        {
          *uint64_t v13 = 44;
          ++*((void *)v4 + 4);
        }
        this = sub_1CD098D14(v4, v11, 0, 0, 0);
      }
    }
  }
  if (a3)
  {
    if (*(_DWORD *)(a3 + 8) == 2)
    {
      int v14 = *(unsigned __int8 **)(a3 - 8);
      if (v14)
      {
        unint64_t v21 = *(unsigned __int8 **)(a3 - 8);
        this = (llvm::raw_ostream *)llvm::MetadataTracking::track((uint64_t)&v21, v14, 2);
        if (v21)
        {
          uint64_t v15 = *((void *)v4 + 4);
          if ((unint64_t)(*((void *)v4 + 3) - v15) > 2)
          {
            *(unsigned char *)(v15 + 2) = 91;
            *(_WORD *)uint64_t v15 = 16416;
            *((void *)v4 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v4, " @[", 3uLL);
          }
          this = (llvm::raw_ostream *)sub_1CC2EEAD0((uint64_t)&v21, v4);
          int v16 = (unsigned char *)*((void *)v4 + 4);
          if (*((unsigned char **)v4 + 3) == v16)
          {
            this = llvm::raw_ostream::write(v4, "]", 1uLL);
          }
          else
          {
            unsigned char *v16 = 93;
            ++*((void *)v4 + 4);
          }
          if (v21)
          {
            int v17 = *v21;
            if ((v17 - 4) > 0x1E)
            {
              if ((v17 - 3) >= 0xFFFFFFFE) {
                uint64_t v18 = v21;
              }
              else {
                uint64_t v18 = 0;
              }
              if ((v17 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v19 = (unint64_t)(v18 + 8);
LABEL_31:
                char v22 = &v21;
                return (llvm::raw_ostream *)sub_1CC5FA668(v19 + 16, &v22);
              }
              if (v17 == 3) {
                *((void *)v21 + 1) = 0;
              }
            }
            else if ((v21[1] & 0x7F) == 2 || *((_DWORD *)v21 + 3))
            {
              uint64_t v20 = *((void *)v21 + 2);
              if ((v20 & 4) != 0)
              {
                unint64_t v19 = v20 & 0xFFFFFFFFFFFFFFF8;
                if (v19) {
                  goto LABEL_31;
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t sub_1CC2EEAD0(uint64_t result, void *a2)
{
  if (*(void *)result)
  {
    if (((uint64_t v3 = result,
           uint64_t v4 = *(void *)(*(void *)result - 8 * *(unsigned int *)(*(void *)result + 8)),
           *(unsigned char *)v4 == 15)
       || (uint64_t v4 = *(void *)(v4 - 8 * *(unsigned int *)(v4 + 8))) != 0)
      && (uint64_t v5 = *(void *)(v4 - 8 * *(unsigned int *)(v4 + 8))) != 0)
    {
      uint64_t v6 = *(size_t **)(v5 + 8);
      size_t v9 = *v6;
      uint64_t v7 = v6 + 3;
      size_t v8 = v9;
      size_t v10 = a2 + 3;
      int v12 = a2 + 4;
      unint64_t v11 = (void *)a2[4];
      if (v9 <= a2[3] - (void)v11)
      {
        if (v8)
        {
          memcpy(v11, v7, v8);
          *v12 += v8;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v7, v8);
      }
    }
    else
    {
      size_t v10 = a2 + 3;
      int v12 = a2 + 4;
    }
    uint64_t v13 = (unsigned char *)*v12;
    if (*v12 >= *v10)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, 58);
    }
    else
    {
      *int v12 = v13 + 1;
      *uint64_t v13 = 58;
    }
    uint64_t result = (uint64_t)sub_1CD098D14((llvm::raw_ostream *)a2, *(unsigned int *)(*(void *)v3 + 4), 0, 0, 0);
    uint64_t v14 = *(void *)v3;
    if (*(_WORD *)(*(void *)v3 + 2))
    {
      uint64_t v15 = (unsigned char *)*v12;
      if (*v12 >= *v10)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, 58);
      }
      else
      {
        *int v12 = v15 + 1;
        unsigned char *v15 = 58;
      }
      uint64_t result = (uint64_t)sub_1CD098D14((llvm::raw_ostream *)a2, *(unsigned __int16 *)(*(void *)v3 + 2), 0, 0, 0);
      uint64_t v14 = *(void *)v3;
    }
    if (*(_DWORD *)(v14 + 8) == 2)
    {
      int v16 = *(unsigned __int8 **)(v14 - 8);
      char v22 = v16;
      if (v16)
      {
        uint64_t result = llvm::MetadataTracking::track((uint64_t)&v22, v16, 2);
        if (v22)
        {
          if (*v10 - *v12 > 3uLL)
          {
            *(_DWORD *)*int v12 = 542851104;
            *v12 += 4;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a2, " @[ ", 4uLL);
          }
          uint64_t result = sub_1CC2EEAD0(&v22, a2);
          int v17 = (_WORD *)a2[4];
          if (a2[3] - (void)v17 > 1uLL)
          {
            *int v17 = 23840;
            *v12 += 2;
          }
          else
          {
            uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)a2, " ]", 2uLL);
          }
          if (v22)
          {
            int v18 = *v22;
            if ((v18 - 4) > 0x1E)
            {
              if ((v18 - 3) >= 0xFFFFFFFE) {
                unint64_t v19 = v22;
              }
              else {
                unint64_t v19 = 0;
              }
              if ((v18 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v20 = (unint64_t)(v19 + 8);
LABEL_34:
                uint64_t v23 = &v22;
                return sub_1CC5FA668(v20 + 16, &v23);
              }
              if (v18 == 3) {
                *((void *)v22 + 1) = 0;
              }
            }
            else if ((v22[1] & 0x7F) == 2 || *((_DWORD *)v22 + 3))
            {
              uint64_t v21 = *((void *)v22 + 2);
              if ((v21 & 4) != 0)
              {
                unint64_t v20 = v21 & 0xFFFFFFFFFFFFFFF8;
                if (v20) {
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC2EED84()
{
  char v3 = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Enable the live debug variables pass";
  v2.n128_u64[1] = 36;
  int v1 = 1;
  sub_1CD519E60(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCCD388, &dword_1CB82C000);
}

void llvm::initializeLiveIntervalsPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCD450, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC2EEE6C;
    v3[1] = &v1;
    __n128 v2 = v3;
    std::__call_once(&qword_1EBCCD450, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC2EEE6C(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t llvm::LiveIntervals::releaseMemory(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(unsigned int *)(this + 416);
  if (v2)
  {
    int v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(v1 + 408) + 8 * (v3 & 0x7FFFFFFF));
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 104);
        if (v5)
        {
          do
          {
            uint64_t v8 = *(void *)(v5 + 96);
            uint64_t v9 = *(void *)(v5 + 104);
            *(void *)(v5 + 96) = 0;
            if (v8)
            {
              unsigned int v35 = v2;
              uint64_t v27 = v8;
              sub_1CB833A08(v8, *(void **)(v8 + 8));
              uint64_t v28 = v27;
              uint64_t v2 = v35;
              MEMORY[0x1D25D9CE0](v28, 0x1020C4062D53EE8);
            }
            size_t v10 = *(void **)(v5 + 64);
            if (v10 != (void *)(v5 + 80)) {
              free(v10);
            }
            if (*(void *)v5 != v5 + 16) {
              free(*(void **)v5);
            }
            uint64_t v5 = v9;
          }
          while (v9);
        }
        uint64_t v6 = *(void *)(v4 + 96);
        *(void *)(v4 + 96) = 0;
        *(void *)(v4 + 104) = 0;
        if (v6)
        {
          uint64_t v24 = v2;
          uint64_t v25 = v6;
          sub_1CB833A08(v6, *(void **)(v6 + 8));
          uint64_t v26 = v25;
          uint64_t v2 = v24;
          MEMORY[0x1D25D9CE0](v26, 0x1020C4062D53EE8);
        }
        uint64_t v7 = *(void **)(v4 + 64);
        if (v7 != (void *)(v4 + 80)) {
          free(v7);
        }
        if (*(void *)v4 != v4 + 16) {
          free(*(void **)v4);
        }
        this = MEMORY[0x1D25D9CE0](v4, 0x10A0C408DA535C6);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  *(_DWORD *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 448) = 0;
  *(_DWORD *)(v1 + 528) = 0;
  *(_DWORD *)(v1 + 608) = 0;
  uint64_t v11 = *(unsigned int *)(v1 + 688);
  if (v11)
  {
    int v12 = *(uint64_t **)(v1 + 680);
    uint64_t v13 = 8 * v11;
    do
    {
      uint64_t v14 = *v12;
      if (*v12)
      {
        uint64_t v15 = *(void *)(v14 + 96);
        *(void *)(v14 + 96) = 0;
        if (v15)
        {
          uint64_t v32 = v13;
          uint64_t v33 = v15;
          sub_1CB833A08(v15, *(void **)(v15 + 8));
          uint64_t v34 = v33;
          uint64_t v13 = v32;
          MEMORY[0x1D25D9CE0](v34, 0x1020C4062D53EE8);
        }
        int v16 = *(void **)(v14 + 64);
        if (v16 != (void *)(v14 + 80)) {
          free(v16);
        }
        if (*(void *)v14 != v14 + 16) {
          free(*(void **)v14);
        }
        this = MEMORY[0x1D25D9CE0](v14, 0x10A0C40E42201FCLL);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  *(_DWORD *)(v1 + 688) = 0;
  uint64_t v17 = *(unsigned int *)(v1 + 384);
  if (v17)
  {
    uint64_t v29 = *(uint64_t **)(v1 + 376);
    uint64_t v30 = 16 * v17;
    do
    {
      uint64_t v31 = *v29;
      v29 += 2;
      this = MEMORY[0x1D25D9CD0](v31, 8);
      v30 -= 16;
    }
    while (v30);
  }
  *(_DWORD *)(v1 + 384) = 0;
  uint64_t v18 = *(unsigned int *)(v1 + 336);
  if (v18)
  {
    *(void *)(v1 + 392) = 0;
    unint64_t v19 = *(void **)(v1 + 328);
    uint64_t v20 = *v19 + 4096;
    *(void *)(v1 + 312) = *v19;
    *(void *)(v1 + 320) = v20;
    if (v18 != 1)
    {
      uint64_t v21 = v19 + 1;
      uint64_t v22 = 8 * v18 - 8;
      do
      {
        uint64_t v23 = *v21++;
        this = MEMORY[0x1D25D9CD0](v23, 8);
        v22 -= 8;
      }
      while (v22);
    }
    *(_DWORD *)(v1 + 336) = 1;
  }
  return this;
}

uint64_t llvm::LiveIntervals::runOnMachineFunction(llvm::LiveIntervals *this, llvm::MachineFunction *a2)
{
  uint64_t v3 = *((void *)a2 + 5);
  *((void *)this + 31) = a2;
  *((void *)this + 32) = v3;
  *((void *)this + 33) = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 176))(*((void *)a2 + 2));
  *((void *)this + 34) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 31) + 16) + 104))(*(void *)(*((void *)this + 31) + 16));
  uint64_t v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_21:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::AAResultsWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_21;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  *((void *)this + 35) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::AAResultsWrapperPass::ID)+ 32);
  uint64_t v8 = (uint64_t *)*((void *)this + 1);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_7:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::SlotIndexes::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_7;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  *((void *)this + 36) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::SlotIndexes::ID);
  int v12 = (uint64_t *)*((void *)this + 1);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (v13 == v14)
  {
LABEL_12:
    uint64_t v15 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v13 != &llvm::MachineDominatorTree::ID)
    {
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_12;
      }
    }
    uint64_t v15 = *(void *)(v13 + 8);
  }
  *((void *)this + 37) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::MachineDominatorTree::ID);
  if (!*((void *)this + 38)) {
    operator new();
  }
  uint64_t v16 = *(unsigned int *)(*((void *)this + 32) + 32);
  uint64_t v17 = *((unsigned int *)this + 104);
  if (v17 != v16)
  {
    if (v17 > v16) {
      *((_DWORD *)this + 104) = v16;
    }
    else {
      sub_1CB9153B8((uint64_t)this + 408, v16 - v17, *((void *)this + 53));
    }
  }
  llvm::LiveIntervals::computeVirtRegs((uint64_t)this);
  llvm::LiveIntervals::computeRegMasks(this);
  llvm::LiveIntervals::computeLiveInRegUnits(this);
  return 0;
}

uint64_t llvm::LiveIntervals::computeVirtRegs(uint64_t this)
{
  int v1 = *(_DWORD *)(*(void *)(this + 256) + 32);
  if (v1)
  {
    for (int i = 0; i != v1; ++i)
    {
      for (uint64_t j = *(void *)(*(void *)(*(void *)(this + 256) + 24) + 16 * (i & 0x7FFFFFFF) + 8);
            j;
            uint64_t j = *(void *)(j + 24))
      {
        if ((*(_DWORD *)j & 0x80000000) == 0) {
          sub_1CBB2C8B4(this, i | 0x80000000);
        }
      }
    }
  }
  return this;
}

void llvm::LiveIntervals::computeRegMasks(llvm::LiveIntervals *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 600);
  uint64_t v3 = (void *)*((void *)this + 31);
  unint64_t v4 = v3[14] - v3[13];
  unint64_t v5 = (v4 >> 3);
  unint64_t v6 = *((unsigned int *)this + 152);
  if (v5 != v6)
  {
    if (v5 >= v6)
    {
      if (v5 > *((unsigned int *)this + 153)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5 != v6) {
        bzero((void *)(*v2 + 8 * v6), 8 * (v5 - v6));
      }
    }
    *((_DWORD *)this + 152) = v4 >> 3;
    uint64_t v3 = (void *)*((void *)this + 31);
  }
  uint64_t v7 = v3 + 40;
  uint64_t v8 = v3[41];
  if ((void *)v8 == v3 + 40) {
    return;
  }
  int v9 = *((_DWORD *)this + 112);
  do
  {
    uint64_t v10 = *(int *)(v8 + 24);
    uint64_t v11 = *v2;
    int v12 = (_DWORD *)(*v2 + 8 * v10);
    *int v12 = v9;
    if (*(unsigned char *)(v8 + 189))
    {
      int v48 = v7;
      uint64_t v69 = v10;
      uint64_t v73 = v11;
      uint64_t v77 = v12;
      uint64_t v49 = (*(uint64_t (**)(void))(**((void **)this + 33) + 56))(*((void *)this + 33));
      int v12 = v77;
      uint64_t v10 = v69;
      uint64_t v11 = v73;
      uint64_t v7 = v48;
      if (v49)
      {
        uint64_t v63 = v8;
        uint64_t v50 = *(void *)(*(void *)(*((void *)this + 36) + 392) + 16 * *(unsigned int *)(v8 + 24));
        unint64_t v51 = *((unsigned int *)this + 112);
        if (v51 >= *((unsigned int *)this + 113)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 55) + 8 * v51) = v50;
        ++*((_DWORD *)this + 112);
        unint64_t v52 = *((unsigned int *)this + 132);
        if (v52 >= *((unsigned int *)this + 133)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 65) + 8 * v52) = v49;
        ++*((_DWORD *)this + 132);
        uint64_t v7 = v48;
        uint64_t v10 = v69;
        uint64_t v8 = v63;
        uint64_t v11 = v73;
        int v12 = v77;
      }
    }
    if (*(unsigned char *)(v8 + 184))
    {
      __int16 v53 = v7;
      uint64_t v70 = v10;
      uint64_t v74 = v11;
      uint64_t v78 = v12;
      uint64_t v54 = (*(uint64_t (**)(void, void))(**((void **)this + 33) + 48))(*((void *)this + 33), *(void *)(v8 + 32));
      int v12 = v78;
      uint64_t v10 = v70;
      uint64_t v11 = v74;
      uint64_t v7 = v53;
      if (v54)
      {
        uint64_t v64 = v8;
        uint64_t v55 = *(void *)(*(void *)(*((void *)this + 36) + 392) + 16 * *(unsigned int *)(v8 + 24));
        unint64_t v56 = *((unsigned int *)this + 112);
        if (v56 >= *((unsigned int *)this + 113)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 55) + 8 * v56) = v55;
        ++*((_DWORD *)this + 112);
        unint64_t v57 = *((unsigned int *)this + 132);
        if (v57 >= *((unsigned int *)this + 133)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 65) + 8 * v57) = v54;
        ++*((_DWORD *)this + 132);
        uint64_t v7 = v53;
        uint64_t v10 = v70;
        uint64_t v8 = v64;
        uint64_t v11 = v74;
        int v12 = v78;
      }
    }
    uint64_t v13 = (void *)(v8 + 48);
    for (unint64_t i = *(void *)(v8 + 56); (void *)i != v13; unint64_t i = *(void *)(i + 8))
    {
      uint64_t v15 = *(unsigned int *)(i + 40);
      if (!v15) {
        goto LABEL_18;
      }
      uint64_t v16 = *(void *)(i + 32);
      uint64_t v17 = v16 + 32 * v15;
      do
      {
        if (*(unsigned char *)v16 != 12) {
          goto LABEL_16;
        }
        __int16 v30 = *(_WORD *)(i + 44);
        unint64_t v31 = i;
        if ((v30 & 4) != 0)
        {
          do
            unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v31 + 44) & 4) != 0);
        }
        unint64_t v32 = i;
        if ((v30 & 8) != 0)
        {
          do
            unint64_t v32 = *(void *)(v32 + 8);
          while ((*(_WORD *)(v32 + 44) & 8) != 0);
        }
        unint64_t v33 = *(void *)(v32 + 8);
        if (v31 != v33)
        {
          while (1)
          {
            unsigned int v34 = **(unsigned __int16 **)(v31 + 16);
            BOOL v35 = v34 > 0x17;
            int v36 = (1 << v34) & 0x83E000;
            if (v35 || v36 == 0) {
              break;
            }
            unint64_t v31 = *(void *)(v31 + 8);
            if (v31 == v33)
            {
              unint64_t v31 = v33;
              break;
            }
          }
        }
        uint64_t v38 = *((void *)this + 36);
        uint64_t v39 = *(void *)(v38 + 368);
        uint64_t v40 = *(unsigned int *)(v38 + 384);
        if (!v40) {
          goto LABEL_56;
        }
        LODWORD(v41) = ((v31 >> 4) ^ (v31 >> 9)) & (v40 - 1);
        int v42 = (uint64_t *)(v39 + 16 * v41);
        uint64_t v43 = *v42;
        if (v31 != *v42)
        {
          int v46 = 1;
          while (v43 != -4096)
          {
            int v47 = v41 + v46++;
            uint64_t v41 = v47 & (v40 - 1);
            uint64_t v43 = *(void *)(v39 + 16 * v41);
            if (v31 == v43)
            {
              int v42 = (uint64_t *)(v39 + 16 * v41);
              goto LABEL_49;
            }
          }
LABEL_56:
          int v42 = (uint64_t *)(v39 + 16 * v40);
        }
LABEL_49:
        unint64_t v44 = *((unsigned int *)this + 112);
        if (v44 >= *((unsigned int *)this + 113)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 55) + 8 * v44) = v42[1] & 0xFFFFFFFFFFFFFFF8 | 4;
        ++*((_DWORD *)this + 112);
        unint64_t v45 = *((unsigned int *)this + 132);
        if (v45 >= *((unsigned int *)this + 133)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 65) + 8 * v45) = *(void *)(v16 + 16);
        ++*((_DWORD *)this + 132);
LABEL_16:
        v16 += 32;
      }
      while (v16 != v17);
      if (i)
      {
LABEL_18:
        if ((*(unsigned char *)i & 4) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
LABEL_19:
        while ((*(_WORD *)(i + 44) & 8) != 0)
          unint64_t i = *(void *)(i + 8);
      }
    }
    unint64_t v18 = *v13 & 0xFFFFFFFFFFFFFFF8;
    if (v13 == (void *)v18) {
      goto LABEL_30;
    }
    if (v18 && (*(unsigned char *)v18 & 4) != 0)
    {
      __int16 v19 = *(_WORD *)(v18 + 44);
    }
    else
    {
      while (1)
      {
        __int16 v19 = *(_WORD *)(v18 + 44);
        if ((v19 & 4) == 0) {
          break;
        }
        unint64_t v18 = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    uint64_t v20 = *((void *)this + 33);
    int v21 = v19 & 0xC;
    int v22 = v19 & 4;
    if (v21) {
      BOOL v23 = v22 == 0;
    }
    else {
      BOOL v23 = 0;
    }
    if (v23)
    {
      unsigned int v67 = v7;
      uint64_t v71 = v10;
      uint64_t v75 = v11;
      int v79 = v12;
      BOOL hasPropertyInBundle = llvm::MachineInstr::hasPropertyInBundle(v18, 32, 1);
      uint64_t v13 = (void *)(v8 + 48);
      uint64_t v7 = v67;
      int v12 = v79;
      uint64_t v10 = v71;
      uint64_t v11 = v75;
      if (hasPropertyInBundle) {
        goto LABEL_32;
      }
    }
    else
    {
      if ((*(unsigned char *)(*(void *)(v18 + 16) + 8) & 0x20) == 0) {
        goto LABEL_30;
      }
LABEL_32:
      if (*(void *)(v8 + 88) != *(void *)(v8 + 96))
      {
        uint64_t v24 = *(uint64_t (**)(uint64_t))(*(void *)v20 + 56);
        uint64_t v25 = v20;
        uint64_t v26 = v7;
        uint64_t v68 = v10;
        uint64_t v72 = v11;
        int v76 = v12;
        unint64_t v65 = v13;
        uint64_t v27 = v24(v25);
        int v12 = v76;
        uint64_t v10 = v68;
        uint64_t v11 = v72;
        uint64_t v7 = v26;
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v62 = v8;
          unint64_t v66 = v7;
          unint64_t v29 = *v65 & 0xFFFFFFFFFFFFFFF8;
          if (!v29 || (*(unsigned char *)v29 & 4) == 0)
          {
            while ((*(_WORD *)(v29 + 44) & 4) != 0)
              unint64_t v29 = *(void *)v29 & 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v59 = sub_1CBB24CA0(*((void *)this + 36), v29, 0);
          unint64_t v60 = *((unsigned int *)this + 112);
          if (v60 >= *((unsigned int *)this + 113)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*((void *)this + 55) + 8 * v60) = v59 & 0xFFFFFFFFFFFFFFF8 | 4;
          ++*((_DWORD *)this + 112);
          unint64_t v61 = *((unsigned int *)this + 132);
          if (v61 >= *((unsigned int *)this + 133)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*((void *)this + 65) + 8 * v61) = v28;
          ++*((_DWORD *)this + 132);
          uint64_t v7 = v66;
          uint64_t v10 = v68;
          uint64_t v8 = v62;
          uint64_t v11 = v72;
          int v12 = v76;
        }
      }
    }
LABEL_30:
    int v9 = *((_DWORD *)this + 112);
    *(_DWORD *)(v11 + 8 * v10 + 4) = v9 - *v12;
    uint64_t v8 = *(void *)(v8 + 8);
  }
  while ((void *)v8 != v7);
}

void llvm::LiveIntervals::computeLiveInRegUnits(llvm::LiveIntervals *this)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)((char *)this + 680);
  uint64_t v3 = *(unsigned int *)(*((void *)this + 33) + 44);
  unsigned int v4 = *((_DWORD *)this + 172);
  if (v4 != v3)
  {
    if (v4 <= v3)
    {
      if (*((_DWORD *)this + 173) < v3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4 != v3) {
        bzero((void *)(*v2 + 8 * v4), 8 * (v3 - v4));
      }
    }
    *((_DWORD *)this + 172) = v3;
  }
  unint64_t v5 = (unsigned int *)v30;
  uint64_t v28 = v30;
  uint64_t v29 = 0x800000000;
  uint64_t v6 = *((void *)this + 31);
  uint64_t v7 = v6 + 320;
  uint64_t v8 = *(void *)(v6 + 328);
  if (v8 != v6 + 320)
  {
    do
    {
      if (v8 == *(void *)(*((void *)this + 31) + 328) || *(unsigned char *)(v8 + 184))
      {
        int v9 = *(_WORD **)(v8 + 152);
        uint64_t v10 = *(_WORD **)(v8 + 160);
        if (v9 != v10)
        {
          uint64_t v25 = *(void *)(*(void *)(*((void *)this + 36) + 392) + 16 * *(unsigned int *)(v8 + 24));
          uint64_t v26 = (char *)this + 312;
          uint64_t v24 = v5;
          do
          {
            uint64_t v11 = *((void *)this + 33);
            if (v11) {
              int v12 = (void *)(v11 + 8);
            }
            else {
              int v12 = 0;
            }
            unint64_t v13 = *(unsigned int *)(*v12 + 24 * (unsigned __int16)*v9 + 16);
            uint64_t v14 = (_WORD *)(v12[6] + ((v13 >> 3) & 0x1FFFFFFE));
            __int16 v16 = *v14;
            uint64_t v15 = v14 + 1;
            unsigned __int16 v17 = v16 + (v13 & 0xF) * *v9;
            do
            {
              unsigned __int16 v18 = v17;
              uint64_t v19 = *(void *)(*v2 + 8 * v17);
              if (!v19) {
                operator new();
              }
              if (*(void *)(v19 + 96))
              {
                uint64_t v27 = *(unint64_t **)(*v2 + 8 * v17);
                sub_1CC2F6AE4((uint64_t *)&v27, v25, (uint64_t)v26, 0);
              }
              else
              {
                uint64_t v27 = *(unint64_t **)(*v2 + 8 * v17);
                sub_1CC2F6F18(&v27, v25, (uint64_t)v26, 0);
              }
              int v20 = *v15++;
              unsigned __int16 v17 = v20 + v18;
            }
            while (v20);
            v9 += 8;
            unint64_t v5 = v24;
          }
          while (v9 != v10);
        }
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != v7);
    int v21 = (unsigned int *)v28;
    if (v29)
    {
      uint64_t v22 = 4 * v29;
      do
      {
        unsigned int v23 = *v21++;
        llvm::LiveIntervals::computeRegUnitRange(this, *(llvm::LiveRange **)(*((void *)this + 85) + 8 * v23), v23);
        v22 -= 4;
      }
      while (v22);
      int v21 = (unsigned int *)v28;
    }
    if (v21 != v5) {
      free(v21);
    }
  }
}

void llvm::LiveIntervals::printInstrs(llvm::LiveIntervals *this, llvm::raw_ostream *a2)
{
  unsigned int v4 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 0x23uLL)
  {
    qmemcpy(v4, "********** MACHINEINSTRS **********\n", 36);
    *((void *)a2 + 4) += 36;
  }
  else
  {
    llvm::raw_ostream::write(a2, "********** MACHINEINSTRS **********\n", 0x24uLL);
  }
  unint64_t v5 = (llvm::Value **)*((void *)this + 31);
  uint64_t v6 = (const llvm::SlotIndexes *)*((void *)this + 36);

  llvm::MachineFunction::print(v5, a2, v6);
}

void llvm::LiveIntervals::createInterval()
{
}

uint64_t llvm::LiveIntervals::computeVirtRegInterval(llvm::LiveIntervals *this, llvm::LiveInterval *a2)
{
  uint64_t v4 = *((void *)this + 38);
  uint64_t v5 = *((void *)this + 31);
  uint64_t v6 = *(void *)(v5 + 40);
  *(void *)uint64_t v4 = v5;
  *(void *)(v4 + 8) = v6;
  *(_OWORD *)(v4 + 16) = *((_OWORD *)this + 18);
  *(void *)(v4 + 32) = (char *)this + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v4);
  *(_DWORD *)(v4 + 184) = 0;
  uint64_t v7 = *((void *)this + 32);
  BOOL v9 = *(unsigned char *)(v7 + 16) == 0;
  int v8 = *(unsigned __int8 *)((*(void *)(*(void *)(v7 + 24) + 16 * (*((_DWORD *)a2 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                          + 34);
  BOOL v9 = v9 || v8 == 0;
  char v10 = !v9;
  llvm::LiveIntervalCalc::calculate(*((llvm::LiveIntervalCalc **)this + 38), a2, v10);

  return llvm::LiveIntervals::computeDeadValues((uint64_t)this, (uint64_t)a2, 0);
}

uint64_t llvm::LiveIntervals::computeDeadValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 72);
  if (v3)
  {
    char v7 = 0;
    char v8 = 0;
    BOOL v9 = *(uint64_t **)(a2 + 64);
    char v10 = &v9[v3];
    while (1)
    {
      uint64_t v11 = *v9;
      unint64_t v12 = *(void *)(*v9 + 8);
      if (v12 >= 8) {
        break;
      }
LABEL_33:
      if (++v9 == v10) {
        return v7 & 1;
      }
    }
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    uint64_t v14 = *(void **)a2;
    if (v13)
    {
      uint64_t v15 = v14[3 * v13 - 2];
      unsigned int v16 = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3;
      unsigned int v17 = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
      unsigned __int16 v18 = *(void **)a2;
      unint64_t v19 = *(unsigned int *)(a2 + 8);
      if (v16 < v17)
      {
        do
        {
          unint64_t v20 = v19 >> 1;
          uint64_t v21 = v18[3 * (v19 >> 1) + 1];
          LODWORD(v21) = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
          v19 -= (v19 >> 1) + 1;
          BOOL v22 = v16 >= v21;
          if (v16 >= v21) {
            unint64_t v23 = v20 + 1;
          }
          else {
            unint64_t v23 = 0;
          }
          v18 += 3 * v23;
          if (!v22) {
            unint64_t v19 = v20;
          }
        }
        while (v19);
LABEL_12:
        uint64_t v24 = &v14[3 * v13];
        if (v18 == v24
          || ((*v18 >> 1) & 3 | *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3))
        {
          unsigned __int16 v18 = v24;
        }
        uint64_t v25 = *(void *)(a1 + 256);
        if (*(unsigned char *)(v25 + 16))
        {
          int v26 = *(_DWORD *)(a2 + 112);
          if (*(unsigned char *)((*(void *)(*(void *)(v25 + 24) + 16 * (v26 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 34))
          {
            if (v18 == v14)
            {
              if ((v12 & 6) == 0) {
                goto LABEL_32;
              }
              unint64_t v27 = v12 & 0xFFFFFFFFFFFFFFF8;
            }
            else
            {
              if ((v12 & 6) == 0) {
                goto LABEL_32;
              }
              unint64_t v27 = v12 & 0xFFFFFFFFFFFFFFF8;
              if (((*(v18 - 2) >> 1) & 3 | *(_DWORD *)((*(v18 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3)) {
                goto LABEL_32;
              }
            }
            uint64_t v28 = *(void *)(v27 + 16);
            uint64_t v29 = *(unsigned int *)(v28 + 40);
            if (v29)
            {
              __int16 v30 = *(int **)(v28 + 32);
              uint64_t v31 = 32 * v29;
              do
              {
                int v32 = *v30;
                if ((*v30 & 0x10000FF) == 0x1000000 && (v32 & 0xFFF00) != 0 && v30[1] == v26) {
                  *__int16 v30 = v32 | 0x10000000;
                }
                v30 += 8;
                v31 -= 32;
              }
              while (v31);
            }
          }
        }
LABEL_32:
        unint64_t v34 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v18[1] == (v34 | 6))
        {
          if ((*(unsigned char *)(v11 + 8) & 6) != 0)
          {
            uint64_t v43 = *(void *)(v34 + 16);
            llvm::MachineInstr::addRegisterDead((llvm::MachineInstr *)v43, *(_DWORD *)(a2 + 112), *(void *)(a1 + 264), 0);
            v7 |= v8;
            if (a3)
            {
              uint64_t v36 = *(unsigned int *)(v43 + 40);
              if (v36)
              {
                long long v37 = *(_DWORD **)(v43 + 32);
                uint64_t v38 = 32 * v36;
                while ((*v37 & 0x10000FF) != 0x1000000 || (*v37 & 0x5000000) == 83886080)
                {
                  v37 += 8;
                  v38 -= 32;
                  if (!v38) {
                    goto LABEL_50;
                  }
                }
              }
              else
              {
LABEL_50:
                unint64_t v40 = *(unsigned int *)(a3 + 8);
                if (v40 >= *(unsigned int *)(a3 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)a3 + 8 * v40) = v43;
                ++*(_DWORD *)(a3 + 8);
              }
            }
            char v8 = 1;
          }
          else
          {
            *(void *)(v11 + 8) = 0;
            unsigned int v41 = *(_DWORD *)(a2 + 8);
            uint64_t v42 = *(void *)a2 + 24 * v41;
            if ((void *)v42 != v18 + 3)
            {
              memmove(v18, v18 + 3, v42 - (void)(v18 + 3));
              unsigned int v41 = *(_DWORD *)(a2 + 8);
            }
            *(_DWORD *)(a2 + 8) = v41 - 1;
            char v7 = 1;
          }
        }
        goto LABEL_33;
      }
    }
    else
    {
      unsigned int v13 = 0;
    }
    unsigned __int16 v18 = &v14[3 * v13];
    goto LABEL_12;
  }
  char v7 = 0;
  return v7 & 1;
}

void llvm::LiveIntervals::splitSeparateComponents(uint64_t a1, const llvm::LiveRange *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1;
  BOOL v9 = v11;
  uint64_t v10 = 0x800000000;
  v11[8] = 0;
  if (llvm::ConnectedVNInfoEqClasses::Classify((llvm::ConnectedVNInfoEqClasses *)&v8, a2) >= 2)
  {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 256) + 24) + 16 * (*((_DWORD *)a2 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v5 = *(void *)(a1 + 256);
    uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
    *(void *)(*(void *)(v5 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v4;
    uint64_t v7 = *(void *)(v5 + 8);
    if (v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, IncompleteVirtualRegister);
    }
    sub_1CBB2C8B4(a1, IncompleteVirtualRegister);
  }
  if (v9 != v11) {
    free(v9);
  }
}

void llvm::LiveIntervals::computeRegUnitRange(llvm::LiveIntervals *this, llvm::LiveRange *a2, unsigned int a3)
{
  uint64_t v6 = *((void *)this + 38);
  uint64_t v7 = *((void *)this + 31);
  uint64_t v8 = *(void *)(v7 + 40);
  *(void *)uint64_t v6 = v7;
  *(void *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 16) = *((_OWORD *)this + 18);
  *(void *)(v6 + 32) = (char *)this + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v6);
  *(_DWORD *)(v6 + 184) = 0;
  uint64_t v9 = *((void *)this + 33);
  uint64_t v10 = v9 + 8;
  if (!v9) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v10 + 40);
  uint64_t v12 = a3;
  unsigned __int16 v13 = *(_WORD *)(v11 + 4 * a3);
  if (!v13) {
    goto LABEL_15;
  }
  char v14 = 0;
  unsigned __int16 v15 = *(_WORD *)(v11 + 4 * a3 + 2);
  do
  {
    unsigned __int16 v16 = v15;
    uint64_t v17 = *((void *)this + 33);
    unsigned __int16 v18 = (void *)(v17 + 8);
    if (!v17) {
      unsigned __int16 v18 = 0;
    }
    uint64_t v19 = v18[6];
    if (v19)
    {
      unint64_t v20 = (unsigned __int16 *)(v19 + 2 * *(unsigned int *)(*v18 + 24 * v13 + 8));
      uint64_t v21 = *((void *)this + 32);
      char v22 = 1;
      do
      {
        unint64_t v23 = v13;
        if (*(void *)(*(void *)(v21 + 272) + 8 * v13))
        {
          llvm::LiveIntervalCalc::createDeadDefs(*((void **)this + 38), (unint64_t *)a2, v13);
          uint64_t v21 = *((void *)this + 32);
        }
        v22 &= *(void *)(*(void *)(v21 + 352) + ((v23 >> 3) & 0x1FF8)) >> v23;
        int v24 = *v20++;
        unsigned __int16 v13 = v24 + v23;
      }
      while (v24);
    }
    else
    {
      char v22 = 1;
    }
    unsigned __int16 v15 = 0;
    v14 |= v22;
    unsigned __int16 v13 = v16;
  }
  while (v16);
  if ((v14 & 1) == 0)
  {
    uint64_t v9 = *((void *)this + 33);
LABEL_15:
    uint64_t v25 = v9 + 8;
    if (!v9) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(void *)(v25 + 40);
    unsigned __int16 v27 = *(_WORD *)(v26 + 4 * v12);
    if (v27)
    {
      unsigned __int16 v28 = *(_WORD *)(v26 + 4 * v12 + 2);
      do
      {
        uint64_t v29 = *((void *)this + 33);
        __int16 v30 = (void *)(v29 + 8);
        if (!v29) {
          __int16 v30 = 0;
        }
        uint64_t v31 = v30[6];
        if (v31)
        {
          int v32 = (unsigned __int16 *)(v31 + 2 * *(unsigned int *)(*v30 + 24 * v27 + 8));
          do
          {
            unsigned __int16 v33 = v27;
            if (*(void *)(*(void *)(*((void *)this + 32) + 272) + 8 * v27)) {
              llvm::LiveIntervalCalc::extendToUses(*((llvm::LiveRangeCalc **)this + 38), (uint64_t)a2, v27, -1, 0);
            }
            int v34 = *v32++;
            unsigned __int16 v27 = v34 + v33;
          }
          while (v34);
        }
        unsigned __int16 v27 = v28;
        BOOL v35 = v28 == 0;
        unsigned __int16 v28 = 0;
      }
      while (!v35);
    }
  }
  if (byte_1EBD04FE0)
  {
    llvm::LiveRange::flushSegmentSet((uint64_t)a2);
  }
}

void llvm::LiveIntervals::extendSegmentsToUses(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v123 = v127;
  long long v124 = v127;
  uint64_t v125 = 8;
  int v126 = 0;
  uint64_t v118 = v122;
  uint64_t v119 = v122;
  uint64_t v120 = 16;
  int v121 = 0;
  if ((a4 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a1 + 416)
    || (uint64_t v8 = *(void *)(*(void *)(a1 + 408) + 8 * (a4 & 0x7FFFFFFF))) == 0)
  {
    sub_1CBB2C8B4(a1, a4);
  }
  if (a5)
  {
    for (uint64_t i = *(void *)(v8 + 104); i; uint64_t i = *(void *)(i + 104))
    {
      uint64_t v8 = i;
      if ((*(void *)(i + 112) & a5) != 0) {
        break;
      }
    }
  }
  unsigned int v10 = *(_DWORD *)(a3 + 8);
  if (v10)
  {
    while (1)
    {
      uint64_t v11 = *(void *)a3 + 16 * v10;
      uint64_t v12 = *(void *)(v11 - 16);
      uint64_t v13 = *(void *)(v11 - 8);
      *(_DWORD *)(a3 + 8) = v10 - 1;
      unsigned int v14 = (v12 >> 1) & 3;
      unint64_t v15 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (v14) {
        unint64_t v16 = v15 | (2 * (v14 - 1));
      }
      else {
        unint64_t v16 = *(void *)v15 | 6;
      }
      uint64_t v17 = *(void *)(a1 + 288);
      if (v16 >= 8 && (uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
      {
        uint64_t v19 = (void *)(v18 + 24);
      }
      else
      {
        uint64_t v100 = *(unsigned int *)(v17 + 544);
        if (v100)
        {
          unsigned int v101 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3;
          uint64_t v102 = *(void **)(v17 + 536);
          unint64_t v103 = *(unsigned int *)(v17 + 544);
          do
          {
            unint64_t v104 = v103 >> 1;
            uint64_t v105 = &v102[2 * (v103 >> 1)];
            uint64_t v107 = *v105;
            uint64_t v106 = v105 + 2;
            v103 += ~(v103 >> 1);
            if (((v107 >> 1) & 3 | *(_DWORD *)((v107 & 0xFFFFFFFFFFFFFFF8) + 24)) < v101) {
              uint64_t v102 = v106;
            }
            else {
              unint64_t v103 = v104;
            }
          }
          while (v103);
          if (v102 == (void *)(*(void *)(v17 + 536) + 16 * v100)
            || ((*v102 >> 1) & 3 | *(_DWORD *)((*v102 & 0xFFFFFFFFFFFFFFF8) + 24)) > v101)
          {
            v102 -= 2;
          }
        }
        else
        {
          uint64_t v102 = *(void **)(v17 + 536);
        }
        uint64_t v19 = v102 + 1;
      }
      uint64_t v20 = *v19;
      uint64_t v21 = *(void *)(*(void *)(v17 + 392) + 16 * *(unsigned int *)(*v19 + 24));
      if (!llvm::LiveRange::extendInBlock(a2, v21, v12))
      {
        v117[0] = v21;
        v117[1] = v12;
        v117[2] = v13;
        llvm::LiveRange::addSegment(a2, (uint64_t)v117);
        char v22 = *(uint64_t **)(v20 + 64);
        unint64_t v23 = *(uint64_t **)(v20 + 72);
        while (1)
        {
          if (v22 == v23) {
            goto LABEL_69;
          }
          uint64_t v24 = *v22;
          uint64_t v25 = v119;
          uint64_t v26 = HIDWORD(v120);
          if (v119 == v118)
          {
            if (HIDWORD(v120))
            {
              unsigned __int16 v27 = 0;
              uint64_t v28 = 8 * HIDWORD(v120);
              uint64_t v29 = v119;
              while (*(void *)v29 != v24)
              {
                if (*(void *)v29 == -2) {
                  unsigned __int16 v27 = v29;
                }
                v29 += 8;
                v28 -= 8;
                if (!v28)
                {
                  if (!v27) {
                    goto LABEL_26;
                  }
                  *(void *)unsigned __int16 v27 = v24;
                  --v121;
                  goto LABEL_28;
                }
              }
              goto LABEL_43;
            }
LABEL_26:
            unsigned int v30 = v120;
            if (HIDWORD(v120) < v120)
            {
              ++HIDWORD(v120);
              *(void *)&v119[8 * v26] = v24;
              goto LABEL_28;
            }
          }
          else
          {
            unsigned int v30 = v120;
          }
          if (3 * v30 <= 4 * (HIDWORD(v120) - v121))
          {
            if (v30 >= 0x40) {
              v30 *= 2;
            }
            else {
              unsigned int v30 = 128;
            }
          }
          else if (v30 - HIDWORD(v120) >= v30 >> 3)
          {
            goto LABEL_47;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v118, v30);
          unsigned int v30 = v120;
          uint64_t v25 = v119;
LABEL_47:
          unsigned int v48 = v30 - 1;
          unsigned int v49 = (v30 - 1) & ((v24 >> 4) ^ (v24 >> 9));
          uint64_t v50 = &v25[8 * v49];
          uint64_t v51 = *(void *)v50;
          if (*(void *)v50 == -1)
          {
            unint64_t v52 = 0;
LABEL_60:
            if (v52) {
              unint64_t v56 = v52;
            }
            else {
              unint64_t v56 = v50;
            }
            if (*(void *)v56 != v24)
            {
              if (*(void *)v56 == -2) {
                --v121;
              }
              else {
                ++HIDWORD(v120);
              }
              *(void *)unint64_t v56 = v24;
LABEL_28:
              uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 288) + 392) + 16 * *(unsigned int *)(v24 + 24) + 8);
              unsigned int v32 = (v31 >> 1) & 3;
              unint64_t v33 = v31 & 0xFFFFFFFFFFFFFFF8;
              if (v32) {
                uint64_t v34 = v33 | (2 * (v32 - 1));
              }
              else {
                uint64_t v34 = *(void *)v33 | 6;
              }
              unsigned int v35 = *(_DWORD *)(v8 + 8);
              uint64_t v36 = *(void **)v8;
              if (v35)
              {
                uint64_t v37 = v36[3 * v35 - 2];
                unsigned int v38 = *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24) | (v34 >> 1) & 3;
                unsigned int v39 = (v37 >> 1) & 3 | *(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24);
                unint64_t v40 = *(void **)v8;
                unint64_t v41 = *(unsigned int *)(v8 + 8);
                if (v38 < v39)
                {
                  do
                  {
                    unint64_t v42 = v41 >> 1;
                    uint64_t v43 = v40[3 * (v41 >> 1) + 1];
                    LODWORD(v43) = (v43 >> 1) & 3 | *(_DWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v41 -= (v41 >> 1) + 1;
                    BOOL v44 = v38 >= v43;
                    if (v38 >= v43) {
                      unint64_t v45 = v42 + 1;
                    }
                    else {
                      unint64_t v45 = 0;
                    }
                    v40 += 3 * v45;
                    if (!v44) {
                      unint64_t v41 = v42;
                    }
                  }
                  while (v41);
                  goto LABEL_38;
                }
              }
              else
              {
                unsigned int v35 = 0;
              }
              unint64_t v40 = &v36[3 * v35];
LABEL_38:
              if (v40 != &v36[3 * v35]
                && ((*v40 >> 1) & 3 | *(_DWORD *)((*v40 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24) | (v34 >> 1) & 3)
                && v40[2])
              {
                unint64_t v46 = *(unsigned int *)(a3 + 8);
                if (v46 >= *(unsigned int *)(a3 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v47 = (void *)(*(void *)a3 + 16 * v46);
                *int v47 = v31;
                v47[1] = v13;
                ++*(_DWORD *)(a3 + 8);
              }
            }
          }
          else
          {
            unint64_t v52 = 0;
            int v53 = 1;
            while (v51 != v24)
            {
              if (v52) {
                BOOL v54 = 0;
              }
              else {
                BOOL v54 = v51 == -2;
              }
              if (v54) {
                unint64_t v52 = v50;
              }
              unsigned int v55 = v49 + v53++;
              unsigned int v49 = v55 & v48;
              uint64_t v50 = &v25[8 * (v55 & v48)];
              uint64_t v51 = *(void *)v50;
              if (*(void *)v50 == -1) {
                goto LABEL_60;
              }
            }
          }
LABEL_43:
          ++v22;
        }
      }
      uint64_t v57 = *(void *)(v13 + 8);
      if ((v57 & 6) == 0 && v57 == v21) {
        break;
      }
LABEL_69:
      unsigned int v10 = *(_DWORD *)(a3 + 8);
      if (!v10) {
        goto LABEL_174;
      }
    }
    uint64_t v58 = v124;
    uint64_t v59 = HIDWORD(v125);
    if (v124 == v123)
    {
      if (HIDWORD(v125))
      {
        unint64_t v60 = 0;
        uint64_t v61 = 8 * HIDWORD(v125);
        uint64_t v62 = v124;
        do
        {
          if (*(void *)v62 == v13) {
            goto LABEL_69;
          }
          if (*(void *)v62 == -2) {
            unint64_t v60 = v62;
          }
          v62 += 8;
          v61 -= 8;
        }
        while (v61);
        if (v60)
        {
          *(void *)unint64_t v60 = v13;
          --v126;
          goto LABEL_84;
        }
      }
      unsigned int v63 = v125;
      if (HIDWORD(v125) < v125)
      {
        ++HIDWORD(v125);
        *(void *)&v124[8 * v59] = v13;
        goto LABEL_84;
      }
    }
    else
    {
      unsigned int v63 = v125;
    }
    if (3 * v63 <= 4 * (HIDWORD(v125) - v126))
    {
      if (v63 >= 0x40) {
        v63 *= 2;
      }
      else {
        unsigned int v63 = 128;
      }
    }
    else if (v63 - HIDWORD(v125) >= v63 >> 3)
    {
      goto LABEL_150;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v123, v63);
    unsigned int v63 = v125;
    uint64_t v58 = v124;
LABEL_150:
    unsigned int v108 = v63 - 1;
    unsigned int v109 = (v63 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    char v110 = &v58[8 * v109];
    uint64_t v111 = *(void *)v110;
    if (*(void *)v110 == -1)
    {
      uint64_t v112 = 0;
LABEL_167:
      if (v112) {
        uint64_t v116 = v112;
      }
      else {
        uint64_t v116 = v110;
      }
      if (*(void *)v116 != v13)
      {
        if (*(void *)v116 == -2) {
          --v126;
        }
        else {
          ++HIDWORD(v125);
        }
        *(void *)uint64_t v116 = v13;
LABEL_84:
        uint64_t v64 = *(uint64_t **)(v20 + 64);
        unint64_t v65 = *(uint64_t **)(v20 + 72);
        while (2)
        {
          if (v64 == v65) {
            goto LABEL_69;
          }
          uint64_t v66 = *v64;
          unsigned int v67 = v119;
          uint64_t v68 = HIDWORD(v120);
          if (v119 == v118)
          {
            if (HIDWORD(v120))
            {
              uint64_t v69 = 0;
              uint64_t v70 = 8 * HIDWORD(v120);
              uint64_t v71 = v119;
              while (*(void *)v71 != v66)
              {
                if (*(void *)v71 == -2) {
                  uint64_t v69 = v71;
                }
                v71 += 8;
                v70 -= 8;
                if (!v70)
                {
                  if (!v69) {
                    goto LABEL_94;
                  }
                  *(void *)uint64_t v69 = v66;
                  --v121;
                  goto LABEL_96;
                }
              }
              goto LABEL_111;
            }
LABEL_94:
            unsigned int v72 = v120;
            if (HIDWORD(v120) < v120)
            {
              ++HIDWORD(v120);
              *(void *)&v119[8 * v68] = v66;
              goto LABEL_96;
            }
          }
          else
          {
            unsigned int v72 = v120;
          }
          if (3 * v72 <= 4 * (HIDWORD(v120) - v121))
          {
            if (v72 >= 0x40) {
              v72 *= 2;
            }
            else {
              unsigned int v72 = 128;
            }
          }
          else if (v72 - HIDWORD(v120) >= v72 >> 3)
          {
            goto LABEL_115;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v118, v72);
          unsigned int v72 = v120;
          unsigned int v67 = v119;
LABEL_115:
          unsigned int v91 = v72 - 1;
          unsigned int v92 = (v72 - 1) & ((v66 >> 4) ^ (v66 >> 9));
          uint64_t v93 = &v67[8 * v92];
          uint64_t v94 = *(void *)v93;
          if (*(void *)v93 != -1)
          {
            uint64_t v95 = 0;
            int v96 = 1;
            while (v94 != v66)
            {
              if (v95) {
                BOOL v97 = 0;
              }
              else {
                BOOL v97 = v94 == -2;
              }
              if (v97) {
                uint64_t v95 = v93;
              }
              unsigned int v98 = v92 + v96++;
              unsigned int v92 = v98 & v91;
              uint64_t v93 = &v67[8 * (v98 & v91)];
              uint64_t v94 = *(void *)v93;
              if (*(void *)v93 == -1) {
                goto LABEL_127;
              }
            }
            goto LABEL_111;
          }
          uint64_t v95 = 0;
LABEL_127:
          if (v95) {
            unsigned int v99 = v95;
          }
          else {
            unsigned int v99 = v93;
          }
          if (*(void *)v99 == v66) {
            goto LABEL_111;
          }
          if (*(void *)v99 == -2) {
            --v121;
          }
          else {
            ++HIDWORD(v120);
          }
          *(void *)unsigned int v99 = v66;
LABEL_96:
          uint64_t v73 = *(void *)(*(void *)(*(void *)(a1 + 288) + 392) + 16 * *(unsigned int *)(v66 + 24) + 8);
          unsigned int v74 = (v73 >> 1) & 3;
          unint64_t v75 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v74) {
            uint64_t v76 = v75 | (2 * (v74 - 1));
          }
          else {
            uint64_t v76 = *(void *)v75 | 6;
          }
          unsigned int v77 = *(_DWORD *)(v8 + 8);
          uint64_t v78 = *(void **)v8;
          if (v77)
          {
            uint64_t v79 = v78[3 * v77 - 2];
            unsigned int v80 = *(_DWORD *)((v76 & 0xFFFFFFFFFFFFFFF8) + 24) | (v76 >> 1) & 3;
            unsigned int v81 = (v79 >> 1) & 3 | *(_DWORD *)((v79 & 0xFFFFFFFFFFFFFFF8) + 24);
            uint64_t v82 = *(void **)v8;
            unint64_t v83 = *(unsigned int *)(v8 + 8);
            if (v80 < v81)
            {
              do
              {
                unint64_t v84 = v83 >> 1;
                uint64_t v85 = v82[3 * (v83 >> 1) + 1];
                LODWORD(v85) = (v85 >> 1) & 3 | *(_DWORD *)((v85 & 0xFFFFFFFFFFFFFFF8) + 24);
                v83 -= (v83 >> 1) + 1;
                BOOL v86 = v80 >= v85;
                if (v80 >= v85) {
                  unint64_t v87 = v84 + 1;
                }
                else {
                  unint64_t v87 = 0;
                }
                v82 += 3 * v87;
                if (!v86) {
                  unint64_t v83 = v84;
                }
              }
              while (v83);
              goto LABEL_106;
            }
          }
          else
          {
            unsigned int v77 = 0;
          }
          uint64_t v82 = &v78[3 * v77];
LABEL_106:
          if (v82 != &v78[3 * v77]
            && ((*v82 >> 1) & 3 | *(_DWORD *)((*v82 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v76 & 0xFFFFFFFFFFFFFFF8) + 24) | (v76 >> 1) & 3))
          {
            uint64_t v88 = v82[2];
            if (v88)
            {
              unint64_t v89 = *(unsigned int *)(a3 + 8);
              if (v89 >= *(unsigned int *)(a3 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v90 = (void *)(*(void *)a3 + 16 * v89);
              *unsigned int v90 = v73;
              v90[1] = v88;
              ++*(_DWORD *)(a3 + 8);
            }
          }
LABEL_111:
          ++v64;
          continue;
        }
      }
    }
    else
    {
      uint64_t v112 = 0;
      int v113 = 1;
      while (v111 != v13)
      {
        if (v112) {
          BOOL v114 = 0;
        }
        else {
          BOOL v114 = v111 == -2;
        }
        if (v114) {
          uint64_t v112 = v110;
        }
        unsigned int v115 = v109 + v113++;
        unsigned int v109 = v115 & v108;
        char v110 = &v58[8 * (v115 & v108)];
        uint64_t v111 = *(void *)v110;
        if (*(void *)v110 == -1) {
          goto LABEL_167;
        }
      }
    }
    goto LABEL_69;
  }
LABEL_174:
  if (v119 != v118) {
    free(v119);
  }
  if (v124 != v123) {
    free(v124);
  }
}

uint64_t sub_1CC2F12AC(uint64_t a1, int a2)
{
  if ((a2 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a1 + 416)
    || !*(void *)(*(void *)(a1 + 408) + 8 * (a2 & 0x7FFFFFFF)))
  {
    sub_1CBB2C8B4(a1, a2);
  }
  return *(void *)(*(void *)(a1 + 408) + 8 * (a2 & 0x7FFFFFFF));
}

uint64_t sub_1CC2F137C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 8 && (uint64_t v2 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
  {
    uint64_t v3 = (void *)(v2 + 24);
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(a1 + 544);
    if (v5)
    {
      unsigned int v6 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
      uint64_t v7 = *(void **)(a1 + 536);
      unint64_t v8 = *(unsigned int *)(a1 + 544);
      do
      {
        unint64_t v9 = v8 >> 1;
        unsigned int v10 = &v7[2 * (v8 >> 1)];
        uint64_t v12 = *v10;
        uint64_t v11 = v10 + 2;
        v8 += ~(v8 >> 1);
        if (((v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24)) < v6) {
          uint64_t v7 = v11;
        }
        else {
          unint64_t v8 = v9;
        }
      }
      while (v8);
      if (v7 == (void *)(*(void *)(a1 + 536) + 16 * v5)
        || ((*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24)) > v6)
      {
        v7 -= 2;
      }
    }
    else
    {
      uint64_t v7 = *(void **)(a1 + 536);
    }
    uint64_t v3 = v7 + 1;
  }
  return *v3;
}

uint64_t llvm::LiveIntervals::shrinkToUses(void *a1, uint64_t a2, uint64_t a3)
{
  v77[32] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 104);
  if (v6)
  {
    char v66 = 0;
    do
    {
      llvm::LiveIntervals::shrinkToUses(a1, v6, *(_DWORD *)(a2 + 112));
      v66 |= *(_DWORD *)(v6 + 8) == 0;
      uint64_t v6 = *(void *)(v6 + 104);
    }
    while (v6);
    if (v66) {
      llvm::LiveInterval::removeEmptySubRanges((llvm::LiveInterval *)a2);
    }
  }
  unint64_t v75 = v77;
  uint64_t v76 = 0x1000000000;
  uint64_t v7 = *(unsigned int *)(a2 + 112);
  uint64_t v8 = a1[32];
  uint64_t v67 = a3;
  if ((v7 & 0x80000000) != 0) {
    unint64_t v9 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v9 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v7);
  }
  uint64_t v10 = *v9;
  if (!*v9) {
    goto LABEL_69;
  }
  unsigned int v11 = 0;
  unint64_t v12 = *(void *)(v10 + 8);
LABEL_6:
  if (**(unsigned __int16 **)(v12 + 16) - 13 < 5) {
    goto LABEL_62;
  }
  uint64_t v13 = *(unsigned int *)(v12 + 40);
  if (!v13) {
    goto LABEL_62;
  }
  int v14 = 0;
  char v15 = 0;
  int v16 = 0;
  uint64_t v17 = (_DWORD *)(*(void *)(v12 + 32) + 4);
  do
  {
    unsigned int v18 = *(v17 - 1);
    if (!(_BYTE)v18 && *v17 == v7)
    {
      int v19 = (v18 >> 28) & 1;
      if ((v18 & 0xFFF00) == 0) {
        int v19 = 1;
      }
      int v20 = v19 | v16;
      int v21 = v19 ^ 1 | v14;
      if ((v18 & 0x1000000) != 0) {
        int v16 = v20;
      }
      else {
        v15 |= (v18 & 0x10000000) == 0;
      }
      if ((v18 & 0x1000000) != 0) {
        int v14 = v21;
      }
    }
    v17 += 8;
    --v13;
  }
  while (v13);
  if (v15 & 1) == 0 && ((v14 ^ 1 | v16))
  {
LABEL_62:
    unint64_t v55 = v12;
    goto LABEL_54;
  }
  __int16 v22 = *(_WORD *)(v12 + 44);
  unint64_t v23 = v12;
  if ((v22 & 4) != 0)
  {
    do
      unint64_t v23 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v23 + 44) & 4) != 0);
  }
  unint64_t v24 = v12;
  if ((v22 & 8) != 0)
  {
    do
      unint64_t v24 = *(void *)(v24 + 8);
    while ((*(_WORD *)(v24 + 44) & 8) != 0);
  }
  unint64_t v25 = *(void *)(v24 + 8);
  if (v23 != v25)
  {
    while (1)
    {
      unsigned int v26 = **(unsigned __int16 **)(v23 + 16);
      BOOL v27 = v26 > 0x17;
      int v28 = (1 << v26) & 0x83E000;
      if (v27 || v28 == 0) {
        break;
      }
      unint64_t v23 = *(void *)(v23 + 8);
      if (v23 == v25)
      {
        unint64_t v23 = v25;
        break;
      }
    }
  }
  uint64_t v30 = a1[36];
  uint64_t v31 = *(void *)(v30 + 368);
  uint64_t v32 = *(unsigned int *)(v30 + 384);
  if (v32)
  {
    LODWORD(v33) = ((v23 >> 4) ^ (v23 >> 9)) & (v32 - 1);
    uint64_t v34 = (uint64_t *)(v31 + 16 * v33);
    uint64_t v35 = *v34;
    if (v23 == *v34) {
      goto LABEL_33;
    }
    int v56 = 1;
    while (v35 != -4096)
    {
      int v57 = v33 + v56++;
      uint64_t v33 = v57 & (v32 - 1);
      uint64_t v35 = *(void *)(v31 + 16 * v33);
      if (v23 == v35)
      {
        uint64_t v34 = (uint64_t *)(v31 + 16 * v33);
        goto LABEL_33;
      }
    }
  }
  uint64_t v34 = (uint64_t *)(v31 + 16 * v32);
LABEL_33:
  unint64_t v36 = v34[1] & 0xFFFFFFFFFFFFFFF8;
  unsigned int v37 = *(_DWORD *)(a2 + 8);
  unsigned int v38 = *(void **)a2;
  if (!v37)
  {
    unsigned int v37 = 0;
    goto LABEL_68;
  }
  uint64_t v39 = v38[3 * v37 - 2];
  unsigned int v40 = *(_DWORD *)(v36 + 24);
  unsigned int v41 = (v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v42 = *(void **)a2;
  unint64_t v43 = *(unsigned int *)(a2 + 8);
  if (v40 >= v41)
  {
LABEL_68:
    unint64_t v42 = &v38[3 * v37];
    goto LABEL_41;
  }
  do
  {
    unint64_t v44 = v43 >> 1;
    uint64_t v45 = v42[3 * (v43 >> 1) + 1];
    LODWORD(v45) = (v45 >> 1) & 3 | *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24);
    v43 -= (v43 >> 1) + 1;
    BOOL v46 = v40 >= v45;
    if (v40 >= v45) {
      unint64_t v47 = v44 + 1;
    }
    else {
      unint64_t v47 = 0;
    }
    v42 += 3 * v47;
    if (!v46) {
      unint64_t v43 = v44;
    }
  }
  while (v43);
LABEL_41:
  unsigned int v48 = &v38[3 * v37];
  if (v42 == v48) {
    goto LABEL_62;
  }
  unsigned int v49 = *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v50 = *(_DWORD *)(v36 + 24);
  if (((*v42 >> 1) & 3 | v49) > v50)
  {
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = v42[2];
    if (v36 == (v42[1] & 0xFFFFFFFFFFFFFFF8))
    {
      v42 += 3;
      if (v42 == v48) {
        goto LABEL_64;
      }
      unsigned int v49 = *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFFFF8) + 24);
    }
    if (*(void *)(v51 + 8) == v36) {
      uint64_t v51 = 0;
    }
  }
  if (v50 >= v49)
  {
    uint64_t v52 = v42[2];
    goto LABEL_48;
  }
LABEL_64:
  uint64_t v52 = 0;
LABEL_48:
  if (!v51) {
    goto LABEL_62;
  }
  uint64_t v53 = v36 | 4;
  if (v52 && v51 != v52) {
    uint64_t v53 = *(void *)(v52 + 8);
  }
  if (v11 >= HIDWORD(v76)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  BOOL v54 = (uint64_t *)((char *)v75 + 16 * v11);
  *BOOL v54 = v53;
  v54[1] = v51;
  unsigned int v11 = v76 + 1;
  LODWORD(v76) = v76 + 1;
  unint64_t v55 = *(void *)(v10 + 8);
LABEL_54:
  while (1)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10) {
      break;
    }
    unint64_t v12 = *(void *)(v10 + 8);
    if (v12 != v55) {
      goto LABEL_6;
    }
  }
LABEL_69:
  v69[0] = v70;
  v69[1] = (void *)0x200000000;
  uint64_t v71 = v73;
  uint64_t v72 = 0x200000000;
  uint64_t v74 = 0;
  uint64_t v58 = *(unsigned int *)(a2 + 72);
  if (v58)
  {
    uint64_t v59 = *(uint64_t **)(a2 + 64);
    uint64_t v60 = 8 * v58;
    do
    {
      uint64_t v61 = *v59;
      unint64_t v62 = *(void *)(*v59 + 8);
      if (v62 >= 8)
      {
        v68[0] = *(void *)(*v59 + 8);
        v68[1] = v62 & 0xFFFFFFFFFFFFFFF8 | 6;
        v68[2] = v61;
        llvm::LiveRange::addSegment((uint64_t)v69, (uint64_t)v68);
      }
      ++v59;
      v60 -= 8;
    }
    while (v60);
  }
  llvm::LiveIntervals::extendSegmentsToUses((uint64_t)a1, (uint64_t)v69, (uint64_t)&v75, v7, 0);
  sub_1CC2F2050((_DWORD *)a2, v69);
  uint64_t v63 = llvm::LiveIntervals::computeDeadValues((uint64_t)a1, a2, v67);
  uint64_t v64 = v74;
  uint64_t v74 = 0;
  if (v64)
  {
    sub_1CB833A08(v64, *(void **)(v64 + 8));
    MEMORY[0x1D25D9CE0](v64, 0x1020C4062D53EE8);
  }
  if (v71 != v73) {
    free(v71);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  if (v75 != v77) {
    free(v75);
  }
  return v63;
}

void llvm::LiveIntervals::shrinkToUses(void *a1, uint64_t a2, unsigned int a3)
{
  v94[32] = *MEMORY[0x1E4F143B8];
  unsigned int v92 = v94;
  uint64_t v93 = 0x1000000000;
  uint64_t v5 = a1[32];
  if ((a3 & 0x80000000) != 0) {
    uint64_t v7 = (int **)(*(void *)(v5 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v7 = (int **)(*(void *)(v5 + 272) + 8 * a3);
  }
  uint64_t v8 = *v7;
  if (v8)
  {
    while (1)
    {
      unsigned int v9 = *v8;
      if ((*v8 & 0x81000000) == 0) {
        break;
      }
      uint64_t v8 = (int *)*((void *)v8 + 3);
      if (!v8) {
        goto LABEL_6;
      }
    }
    unsigned int v44 = 0;
    for (uint64_t i = 0; ; uint64_t i = v64)
    {
      if ((v9 & 0x30000000) != 0) {
        goto LABEL_85;
      }
      if ((v9 & 0x10FFF00) == 0x1000000) {
        goto LABEL_85;
      }
      unsigned int v46 = (v9 >> 8) & 0xFFF;
      if (v46)
      {
        if ((*(void *)(a2 + 112) & *(void *)(*(void *)(a1[33] + 232) + 8 * v46)) == 0) {
          goto LABEL_85;
        }
      }
      unint64_t v47 = *((void *)v8 + 1);
      __int16 v48 = *(_WORD *)(v47 + 44);
      unint64_t v49 = v47;
      if ((v48 & 4) != 0)
      {
        do
          unint64_t v49 = *(void *)v49 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v49 + 44) & 4) != 0);
      }
      if ((v48 & 8) != 0)
      {
        do
          unint64_t v47 = *(void *)(v47 + 8);
        while ((*(_WORD *)(v47 + 44) & 8) != 0);
      }
      unint64_t v50 = *(void *)(v47 + 8);
      if (v49 != v50)
      {
        do
        {
          unsigned int v51 = **(unsigned __int16 **)(v49 + 16);
          BOOL v52 = v51 > 0x17;
          int v53 = (1 << v51) & 0x83E000;
          if (v52 || v53 == 0) {
            goto LABEL_77;
          }
          unint64_t v49 = *(void *)(v49 + 8);
        }
        while (v49 != v50);
        unint64_t v49 = v50;
      }
LABEL_77:
      uint64_t v55 = a1[36];
      uint64_t v56 = *(void *)(v55 + 368);
      uint64_t v57 = *(unsigned int *)(v55 + 384);
      if (v57)
      {
        LODWORD(v58) = ((v49 >> 4) ^ (v49 >> 9)) & (v57 - 1);
        uint64_t v59 = (uint64_t *)(v56 + 16 * v58);
        uint64_t v60 = *v59;
        if (v49 != *v59)
        {
          int v61 = 1;
          do
          {
            if (v60 == -4096) {
              goto LABEL_83;
            }
            int v62 = v58 + v61++;
            uint64_t v58 = v62 & (v57 - 1);
            uint64_t v60 = *(void *)(v56 + 16 * v58);
          }
          while (v49 != v60);
          uint64_t v59 = (uint64_t *)(v56 + 16 * v58);
        }
      }
      else
      {
LABEL_83:
        uint64_t v59 = (uint64_t *)(v56 + 16 * v57);
      }
      unint64_t v63 = v59[1] & 0xFFFFFFFFFFFFFFF8;
      uint64_t v64 = v63 | 4;
      if ((v63 | 4) == i)
      {
LABEL_85:
        uint64_t v64 = i;
        goto LABEL_86;
      }
      unsigned int v65 = *(_DWORD *)(a2 + 8);
      char v66 = *(void **)a2;
      if (!v65) {
        break;
      }
      uint64_t v67 = v66[3 * v65 - 2];
      unsigned int v68 = *(_DWORD *)(v63 + 24);
      unsigned int v69 = (v67 >> 1) & 3 | *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v70 = *(void **)a2;
      unint64_t v71 = *(unsigned int *)(a2 + 8);
      if (v68 >= v69) {
        goto LABEL_99;
      }
      do
      {
        unint64_t v72 = v71 >> 1;
        uint64_t v73 = v70[3 * (v71 >> 1) + 1];
        LODWORD(v73) = (v73 >> 1) & 3 | *(_DWORD *)((v73 & 0xFFFFFFFFFFFFFFF8) + 24);
        v71 -= (v71 >> 1) + 1;
        BOOL v74 = v68 >= v73;
        if (v68 >= v73) {
          unint64_t v75 = v72 + 1;
        }
        else {
          unint64_t v75 = 0;
        }
        v70 += 3 * v75;
        if (!v74) {
          unint64_t v71 = v72;
        }
      }
      while (v71);
LABEL_100:
      uint64_t v76 = &v66[3 * v65];
      if (v70 == v76) {
        goto LABEL_86;
      }
      unsigned int v77 = *(_DWORD *)((*v70 & 0xFFFFFFFFFFFFFFF8) + 24);
      unsigned int v78 = *(_DWORD *)(v63 + 24);
      if (((*v70 >> 1) & 3 | v77) > v78)
      {
        uint64_t v79 = 0;
      }
      else
      {
        uint64_t v79 = v70[2];
        if (v63 == (v70[1] & 0xFFFFFFFFFFFFFFF8))
        {
          v70 += 3;
          if (v70 == v76) {
            goto LABEL_112;
          }
          unsigned int v77 = *(_DWORD *)((*v70 & 0xFFFFFFFFFFFFFFF8) + 24);
        }
        if (*(void *)(v79 + 8) == v63) {
          uint64_t v79 = 0;
        }
      }
      if (v78 >= v77)
      {
        uint64_t v80 = v70[2];
        if (!v79) {
          goto LABEL_86;
        }
        goto LABEL_113;
      }
LABEL_112:
      uint64_t v80 = 0;
      if (!v79) {
        goto LABEL_86;
      }
LABEL_113:
      uint64_t v81 = v63 | 4;
      if (v80)
      {
        uint64_t v81 = v63 | 4;
        if (v79 != v80) {
          uint64_t v81 = *(void *)(v80 + 8);
        }
      }
      if (v44 >= HIDWORD(v93)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v82 = (uint64_t *)((char *)v92 + 16 * v44);
      *uint64_t v82 = v81;
      v82[1] = v79;
      unsigned int v44 = v93 + 1;
      LODWORD(v93) = v93 + 1;
      do
      {
LABEL_86:
        uint64_t v8 = (int *)*((void *)v8 + 3);
        if (!v8) {
          goto LABEL_6;
        }
        unsigned int v9 = *v8;
      }
      while ((*v8 & 0x81000000) != 0);
    }
    unsigned int v65 = 0;
LABEL_99:
    uint64_t v70 = &v66[3 * v65];
    goto LABEL_100;
  }
LABEL_6:
  v86[0] = v87;
  v86[1] = (void *)0x200000000;
  uint64_t v88 = v90;
  uint64_t v89 = 0x200000000;
  uint64_t v91 = 0;
  uint64_t v10 = *(unsigned int *)(a2 + 72);
  if (v10)
  {
    unsigned int v11 = *(uint64_t **)(a2 + 64);
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v11;
      unint64_t v14 = *(void *)(*v11 + 8);
      if (v14 >= 8)
      {
        uint64_t v83 = *(void *)(*v11 + 8);
        unint64_t v84 = v14 & 0xFFFFFFFFFFFFFFF8 | 6;
        uint64_t v85 = v13;
        llvm::LiveRange::addSegment((uint64_t)v86, (uint64_t)&v83);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  llvm::LiveIntervals::extendSegmentsToUses((uint64_t)a1, (uint64_t)v86, (uint64_t)&v92, a3, *(void *)(a2 + 112));
  sub_1CC2F2050((_DWORD *)a2, v86);
  uint64_t v15 = *(unsigned int *)(a2 + 72);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 64);
    uint64_t v17 = v16 + 8 * v15;
    while (1)
    {
      unint64_t v18 = *(void *)(*(void *)v16 + 8);
      if (v18 >= 8) {
        break;
      }
LABEL_14:
      v16 += 8;
      if (v16 == v17) {
        goto LABEL_54;
      }
    }
    unsigned int v19 = *(_DWORD *)(a2 + 8);
    int v20 = *(void **)a2;
    if (v19)
    {
      uint64_t v21 = v20[3 * v19 - 2];
      unsigned int v22 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3;
      unsigned int v23 = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
      unint64_t v24 = *(char **)a2;
      unint64_t v25 = *(unsigned int *)(a2 + 8);
      if (v22 < v23)
      {
        do
        {
          unint64_t v26 = v25 >> 1;
          uint64_t v27 = *(void *)&v24[24 * (v25 >> 1) + 8];
          LODWORD(v27) = (v27 >> 1) & 3 | *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24);
          v25 -= (v25 >> 1) + 1;
          BOOL v28 = v22 >= v27;
          if (v22 >= v27) {
            unint64_t v29 = v26 + 1;
          }
          else {
            unint64_t v29 = 0;
          }
          v24 += 24 * v29;
          if (!v28) {
            unint64_t v25 = v26;
          }
        }
        while (v25);
        unint64_t v30 = *(unsigned int *)(a2 + 8);
LABEL_28:
        uint64_t v31 = (char *)&v20[3 * v30];
        if (v24 == v31)
        {
          unint64_t v32 = v18 & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          unint64_t v32 = v18 & 0xFFFFFFFFFFFFFFF8;
          if (((*(void *)v24 >> 1) & 3 | *(_DWORD *)((*(void *)v24 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3))
          {
LABEL_30:
            if (v24 == v31) {
              unint64_t v24 = 0;
            }
            if ((v18 & 6) == 0 && *((void *)v24 + 1) == (v32 | 6))
            {
              *(void *)(*(void *)v16 + 8) = 0;
              uint64_t v33 = *(void *)v24;
              if (v19)
              {
                unsigned int v34 = *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24) | (v33 >> 1) & 3;
                uint64_t v35 = &v20[3 * v30];
                if (v34 < ((*((void *)v31 - 2) >> 1) & 3 | *(_DWORD *)((*((void *)v31 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24)))
                {
                  uint64_t v35 = v20;
                  do
                  {
                    unint64_t v36 = v30 >> 1;
                    uint64_t v37 = v35[3 * (v30 >> 1) + 1];
                    LODWORD(v37) = (v37 >> 1) & 3 | *(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v30 -= (v30 >> 1) + 1;
                    BOOL v38 = v34 >= v37;
                    if (v34 >= v37) {
                      unint64_t v39 = v36 + 1;
                    }
                    else {
                      unint64_t v39 = 0;
                    }
                    v35 += 3 * v39;
                    if (!v38) {
                      unint64_t v30 = v36;
                    }
                  }
                  while (v30);
                }
              }
              else
              {
                uint64_t v35 = &v20[3 * v30];
              }
              uint64_t v40 = *((void *)v24 + 1);
              unint64_t v41 = v35[1];
              if (*v35 == v33)
              {
                if (v41 == v40)
                {
                  if (v31 != (char *)(v35 + 3))
                  {
                    memmove(v35, v35 + 3, v31 - (char *)(v35 + 3));
                    unsigned int v19 = *(_DWORD *)(a2 + 8);
                  }
                  *(_DWORD *)(a2 + 8) = v19 - 1;
                }
                else
                {
                  *uint64_t v35 = v40;
                }
              }
              else
              {
                uint64_t v42 = v35[2];
                v35[1] = v33;
                if (v41 != v40)
                {
                  uint64_t v83 = v40;
                  unint64_t v84 = v41;
                  uint64_t v85 = v42;
                  sub_1CC2FC960((uint64_t *)a2, (unint64_t)(v35 + 3), (unint64_t)&v83);
                }
              }
            }
            goto LABEL_14;
          }
        }
        unint64_t v24 = (char *)&v20[3 * v30];
        goto LABEL_30;
      }
      unint64_t v30 = *(unsigned int *)(a2 + 8);
    }
    else
    {
      unint64_t v30 = 0;
    }
    unint64_t v24 = (char *)&v20[3 * v30];
    goto LABEL_28;
  }
LABEL_54:
  uint64_t v43 = v91;
  uint64_t v91 = 0;
  if (v43)
  {
    sub_1CB833A08(v43, *(void **)(v43 + 8));
    MEMORY[0x1D25D9CE0](v43, 0x1020C4062D53EE8);
  }
  if (v88 != v90) {
    free(v88);
  }
  if (v86[0] != v87) {
    free(v86[0]);
  }
  if (v92 != v94) {
    free(v92);
  }
}

_DWORD *sub_1CC2F2050(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)result;
    if (*(_DWORD **)result == result + 4 || *(_DWORD **)a2 == a2 + 4)
    {
      if (result[3] < a2[2]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v7 = result[2];
      if (a2[3] < v7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v8 = a2[2];
      if (v7 >= v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = v7;
      }
      if (v9)
      {
        uint64_t v10 = 0;
        do
        {
          unsigned int v11 = (long long *)(*(void *)result + v10);
          uint64_t v12 = (long long *)(*(void *)a2 + v10);
          uint64_t v13 = *((void *)v11 + 2);
          long long v14 = *v11;
          uint64_t v15 = *((void *)v12 + 2);
          long long *v11 = *v12;
          *((void *)v11 + 2) = v15;
          *uint64_t v12 = v14;
          *((void *)v12 + 2) = v13;
          v10 += 24;
        }
        while (24 * v9 != v10);
        unsigned int v7 = result[2];
        unsigned int v8 = a2[2];
      }
      unsigned int v16 = v7 - v8;
      if (v7 > v8)
      {
        if (v9 != v7)
        {
          uint64_t result = memcpy((void *)(*(void *)a2 + 24 * v8), (const void *)(*(void *)result + 24 * v9), *(void *)result + 24 * v7 - (*(void *)result + 24 * v9));
          unsigned int v8 = a2[2];
        }
        a2[2] = v16 + v8;
        void v3[2] = v9;
      }
      else
      {
        unsigned int v17 = v8 - v7;
        if (v8 > v7)
        {
          if (v9 != v8)
          {
            uint64_t result = memcpy((void *)(*(void *)result + 24 * v7), (const void *)(*(void *)a2 + 24 * v9), *(void *)a2 + 24 * v8 - (*(void *)a2 + 24 * v9));
            unsigned int v7 = v3[2];
          }
          void v3[2] = v17 + v7;
          a2[2] = v9;
        }
      }
    }
    else
    {
      *(void *)uint64_t result = *(void *)a2;
      *(void *)a2 = v4;
      int v5 = result[2];
      result[2] = a2[2];
      a2[2] = v5;
      int v6 = result[3];
      result[3] = a2[3];
      a2[3] = v6;
    }
  }
  return result;
}

void llvm::LiveIntervals::extendToIndices(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a1 + 304);
  uint64_t v13 = *(void *)(a1 + 248);
  uint64_t v14 = *(void *)(v13 + 40);
  *(void *)uint64_t v12 = v13;
  *(void *)(v12 + 8) = v14;
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(a1 + 288);
  *(void *)(v12 + 32) = a1 + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v12);
  *(_DWORD *)(v12 + 184) = 0;
  if (a4)
  {
    uint64_t v15 = 8 * a4;
    do
    {
      unint64_t v16 = *a3++;
      llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(a1 + 304), a2, v16, 0, a5, a6);
      v15 -= 8;
    }
    while (v15);
  }
}

void llvm::LiveIntervals::extendToUses(llvm::LiveIntervals *this, llvm::LiveInterval *a2)
{
  uint64_t v4 = *((void *)this + 38);
  uint64_t v5 = *((void *)this + 31);
  uint64_t v6 = *(void *)(v5 + 40);
  *(void *)uint64_t v4 = v5;
  *(void *)(v4 + 8) = v6;
  *(_OWORD *)(v4 + 16) = *((_OWORD *)this + 18);
  *(void *)(v4 + 32) = (char *)this + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v4);
  *(_DWORD *)(v4 + 184) = 0;
  unsigned int v7 = (llvm::LiveRangeCalc *)*((void *)this + 38);
  uint64_t v8 = *((unsigned int *)a2 + 28);

  llvm::LiveIntervalCalc::extendToUses(v7, (uint64_t)a2, v8, -1, 0);
}

void llvm::LiveIntervals::pruneValue(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  unint64_t v7 = a3 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)a2;
  if (v8)
  {
    uint64_t v10 = *(void *)(v9 + 24 * v8 - 16);
    unsigned int v11 = *(_DWORD *)(v7 + 24);
    if (v11 < ((v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      uint64_t v12 = *(char **)a2;
      unint64_t v13 = *(unsigned int *)(a2 + 8);
      do
      {
        unint64_t v14 = v13 >> 1;
        uint64_t v15 = *(void *)&v12[24 * (v13 >> 1) + 8];
        LODWORD(v15) = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
        v13 -= (v13 >> 1) + 1;
        BOOL v16 = v11 >= v15;
        if (v11 >= v15) {
          unint64_t v17 = v14 + 1;
        }
        else {
          unint64_t v17 = 0;
        }
        v12 += 24 * v17;
        if (!v16) {
          unint64_t v13 = v14;
        }
      }
      while (v13);
      unint64_t v18 = *(unsigned int *)(a2 + 8);
      goto LABEL_11;
    }
    unint64_t v18 = *(unsigned int *)(a2 + 8);
  }
  else
  {
    unint64_t v18 = 0;
  }
  uint64_t v12 = (char *)(v9 + 24 * v18);
LABEL_11:
  unsigned int v19 = (char *)(v9 + 24 * v18);
  if (v12 == v19) {
    return;
  }
  unsigned int v20 = *(_DWORD *)((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v21 = *(_DWORD *)(v7 + 24);
  if (((*(void *)v12 >> 1) & 3 | v20) <= v21 && v7 == (*((void *)v12 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    v12 += 24;
    if (v12 == v19) {
      return;
    }
    unsigned int v20 = *(_DWORD *)((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) + 24);
  }
  if (v21 >= v20)
  {
    uint64_t v22 = *((void *)v12 + 2);
    if (v22)
    {
      unint64_t v23 = *((void *)v12 + 1);
      uint64_t v24 = *(void *)(a1 + 288);
      if (a3 >= 8 && (uint64_t v25 = *(void *)(v7 + 16)) != 0)
      {
        unint64_t v26 = (void *)(v25 + 24);
      }
      else
      {
        uint64_t v141 = *(unsigned int *)(v24 + 544);
        if (v141)
        {
          unsigned int v142 = v21 | (a3 >> 1) & 3;
          uint64_t v143 = *(void **)(v24 + 536);
          unint64_t v144 = *(unsigned int *)(v24 + 544);
          do
          {
            unint64_t v145 = v144 >> 1;
            uint64_t v146 = &v143[2 * (v144 >> 1)];
            uint64_t v148 = *v146;
            uint64_t v147 = v146 + 2;
            v144 += ~(v144 >> 1);
            if (((v148 >> 1) & 3 | *(_DWORD *)((v148 & 0xFFFFFFFFFFFFFFF8) + 24)) < v142) {
              uint64_t v143 = v147;
            }
            else {
              unint64_t v144 = v145;
            }
          }
          while (v144);
          if (v143 == (void *)(*(void *)(v24 + 536) + 16 * v141)
            || ((*v143 >> 1) & 3 | *(_DWORD *)((*v143 & 0xFFFFFFFFFFFFFFF8) + 24)) > v142)
          {
            v143 -= 2;
          }
        }
        else
        {
          uint64_t v143 = *(void **)(v24 + 536);
        }
        unint64_t v26 = v143 + 1;
      }
      uint64_t v27 = *v26;
      unint64_t v28 = *(void *)(*(void *)(v24 + 392) + 16 * *(unsigned int *)(*v26 + 24) + 8);
      if ((*(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24) | (v23 >> 1) & 3) < ((v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        if (v8)
        {
          unsigned int v29 = v21 | (a3 >> 1) & 3;
          unint64_t v30 = (void *)(v9 + 24 * v18);
          if (v29 < ((*((void *)v19 - 2) >> 1) & 3 | *(_DWORD *)((*((void *)v19 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                + 24)))
          {
            unint64_t v30 = (void *)v9;
            do
            {
              unint64_t v31 = v18 >> 1;
              uint64_t v32 = v30[3 * (v18 >> 1) + 1];
              LODWORD(v32) = (v32 >> 1) & 3 | *(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24);
              v18 -= (v18 >> 1) + 1;
              BOOL v33 = v29 >= v32;
              if (v29 >= v32) {
                unint64_t v34 = v31 + 1;
              }
              else {
                unint64_t v34 = 0;
              }
              v30 += 3 * v34;
              if (!v33) {
                unint64_t v18 = v31;
              }
            }
            while (v18);
          }
        }
        else
        {
          unint64_t v30 = (void *)(v9 + 24 * v18);
        }
        uint64_t v35 = (char *)v30[1];
        if (*v30 == a3)
        {
          if (v35 == (char *)v23)
          {
            if (v19 != (char *)(v30 + 3))
            {
              memmove(v30, v30 + 3, v19 - (char *)(v30 + 3));
              unsigned int v8 = *(_DWORD *)(a2 + 8);
            }
            *(_DWORD *)(a2 + 8) = v8 - 1;
          }
          else
          {
            *unint64_t v30 = v23;
          }
        }
        else
        {
          uint64_t v37 = v30[2];
          v30[1] = a3;
          if (v35 != (char *)v23)
          {
            uint64_t v154 = (char *)v23;
            uint64_t v155 = v35;
            uint64_t v156 = v37;
            sub_1CC2FC960((uint64_t *)a2, (unint64_t)(v30 + 3), (unint64_t)&v154);
          }
        }
        if (a4)
        {
          unsigned int v36 = *(_DWORD *)(a4 + 8);
          if (v36 >= *(_DWORD *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a4 + 8 * v36) = v23;
          ++*(_DWORD *)(a4 + 8);
        }
        return;
      }
      if (v8)
      {
        unsigned int v38 = v21 | (a3 >> 1) & 3;
        unint64_t v39 = (void *)(v9 + 24 * v18);
        if (v38 < ((*((void *)v19 - 2) >> 1) & 3 | *(_DWORD *)((*((void *)v19 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                              + 24)))
        {
          unint64_t v39 = (void *)v9;
          do
          {
            unint64_t v40 = v18 >> 1;
            uint64_t v41 = v39[3 * (v18 >> 1) + 1];
            LODWORD(v41) = (v41 >> 1) & 3 | *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24);
            v18 -= (v18 >> 1) + 1;
            BOOL v42 = v38 >= v41;
            if (v38 >= v41) {
              unint64_t v43 = v40 + 1;
            }
            else {
              unint64_t v43 = 0;
            }
            v39 += 3 * v43;
            if (!v42) {
              unint64_t v18 = v40;
            }
          }
          while (v18);
        }
      }
      else
      {
        unint64_t v39 = (void *)(v9 + 24 * v18);
      }
      unsigned int v44 = (char *)v39[1];
      if (*v39 == a3)
      {
        if (v44 == (char *)v28)
        {
          if (v19 != (char *)(v39 + 3))
          {
            memmove(v39, v39 + 3, v19 - (char *)(v39 + 3));
            unsigned int v8 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(a2 + 8) = v8 - 1;
        }
        else
        {
          *unint64_t v39 = v28;
        }
      }
      else
      {
        uint64_t v139 = v39[2];
        v39[1] = a3;
        if (v44 != (char *)v28)
        {
          uint64_t v154 = (char *)v28;
          uint64_t v155 = v44;
          uint64_t v156 = v139;
          sub_1CC2FC960((uint64_t *)a2, (unint64_t)(v39 + 3), (unint64_t)&v154);
        }
      }
      if (a4)
      {
        unsigned int v45 = *(_DWORD *)(a4 + 8);
        if (v45 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a4 + 8 * v45) = v28;
        ++*(_DWORD *)(a4 + 8);
      }
      uint64_t v154 = v158;
      uint64_t v155 = v158;
      uint64_t v156 = 16;
      int v157 = 0;
      unsigned int v46 = *(void **)(v27 + 88);
      unint64_t v149 = *(void **)(v27 + 96);
      if (v46 != v149)
      {
        while (1)
        {
          uint64_t v150 = v46;
          uint64_t v47 = *v46;
          __int16 v48 = v155;
          uint64_t v49 = HIDWORD(v156);
          if (v155 == v154)
          {
            if (HIDWORD(v156))
            {
              unint64_t v50 = 0;
              uint64_t v51 = 8 * HIDWORD(v156);
              BOOL v52 = v155;
              do
              {
                if (*(void *)v52 == v47) {
                  goto LABEL_222;
                }
                if (*(void *)v52 == -2) {
                  unint64_t v50 = v52;
                }
                v52 += 8;
                v51 -= 8;
              }
              while (v51);
              if (v50)
              {
                *(void *)unint64_t v50 = v47;
                --v157;
                goto LABEL_68;
              }
            }
            unsigned int v53 = v156;
            if (HIDWORD(v156) < v156)
            {
              ++HIDWORD(v156);
              *(void *)&v155[8 * v49] = v47;
LABEL_68:
              BOOL v54 = operator new(0x18uLL);
              *(void *)BOOL v54 = v47;
              v54[8] = 0;
              v54[16] = 0;
              uint64_t v55 = v54 + 24;
              goto LABEL_69;
            }
          }
          else
          {
            unsigned int v53 = v156;
          }
          if (3 * v53 <= 4 * (HIDWORD(v156) - v157))
          {
            if (v53 >= 0x40) {
              v53 *= 2;
            }
            else {
              unsigned int v53 = 128;
            }
          }
          else if (v53 - HIDWORD(v156) >= v53 >> 3)
          {
            goto LABEL_203;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v154, v53);
          unsigned int v53 = v156;
          __int16 v48 = v155;
LABEL_203:
          unsigned int v130 = v53 - 1;
          unsigned int v131 = (v53 - 1) & ((v47 >> 4) ^ (v47 >> 9));
          uint64_t v132 = &v48[8 * v131];
          uint64_t v133 = *(void *)v132;
          if (*(void *)v132 == -1)
          {
            uint64_t v134 = 0;
LABEL_215:
            if (v134) {
              uint64_t v138 = v134;
            }
            else {
              uint64_t v138 = v132;
            }
            if (*(void *)v138 != v47)
            {
              if (*(void *)v138 == -2) {
                --v157;
              }
              else {
                ++HIDWORD(v156);
              }
              *(void *)uint64_t v138 = v47;
              goto LABEL_68;
            }
          }
          else
          {
            uint64_t v134 = 0;
            int v135 = 1;
            while (v133 != v47)
            {
              if (v134) {
                BOOL v136 = 0;
              }
              else {
                BOOL v136 = v133 == -2;
              }
              if (v136) {
                uint64_t v134 = v132;
              }
              unsigned int v137 = v131 + v135++;
              unsigned int v131 = v137 & v130;
              uint64_t v132 = &v48[8 * (v137 & v130)];
              uint64_t v133 = *(void *)v132;
              if (*(void *)v132 == -1) {
                goto LABEL_215;
              }
            }
          }
LABEL_222:
          uint64_t v55 = 0;
          BOOL v54 = 0;
LABEL_69:
          uint64_t v152 = 0;
          unint64_t v153 = 0;
          uint64_t v151 = 0;
          sub_1CBF340A8(&v151, v54, v55, 0xAAAAAAAAAAAAAAABLL * ((v55 - v54) >> 3));
          if (v54) {
            operator delete(v54);
          }
          uint64_t v56 = v151;
          uint64_t v57 = v152;
          uint64_t v58 = v152;
          if (v152 == v151) {
            goto LABEL_196;
          }
          while (2)
          {
            uint64_t v60 = *((void *)v58 - 3);
            uint64_t v59 = v58 - 24;
            int v61 = (uint64_t *)(*(void *)(*(void *)(v6 + 288) + 392) + 16 * *(unsigned int *)(v60 + 24));
            uint64_t v62 = *v61;
            unint64_t v63 = *v61 & 0xFFFFFFFFFFFFFFF8;
            unsigned int v64 = *(_DWORD *)(a2 + 8);
            uint64_t v65 = *(void *)a2;
            if (!v64)
            {
              unint64_t v75 = 0;
              goto LABEL_158;
            }
            uint64_t v66 = *(void *)(v65 + 24 * v64 - 16);
            unsigned int v67 = *(_DWORD *)(v63 + 24);
            unsigned int v68 = (v66 >> 1) & 3 | *(_DWORD *)((v66 & 0xFFFFFFFFFFFFFFF8) + 24);
            unsigned int v69 = *(char **)a2;
            unint64_t v70 = *(unsigned int *)(a2 + 8);
            if (v67 >= v68)
            {
              unint64_t v75 = *(unsigned int *)(a2 + 8);
LABEL_158:
              unsigned int v69 = (char *)(v65 + 24 * v75);
              goto LABEL_81;
            }
            do
            {
              unint64_t v71 = v70 >> 1;
              uint64_t v72 = *(void *)&v69[24 * (v70 >> 1) + 8];
              LODWORD(v72) = (v72 >> 1) & 3 | *(_DWORD *)((v72 & 0xFFFFFFFFFFFFFFF8) + 24);
              v70 -= (v70 >> 1) + 1;
              BOOL v73 = v67 >= v72;
              if (v67 >= v72) {
                unint64_t v74 = v71 + 1;
              }
              else {
                unint64_t v74 = 0;
              }
              v69 += 24 * v74;
              if (!v73) {
                unint64_t v70 = v71;
              }
            }
            while (v70);
            unint64_t v75 = *(unsigned int *)(a2 + 8);
LABEL_81:
            uint64_t v76 = (char *)(v65 + 24 * v75);
            if (v69 == v76)
            {
              uint64_t v79 = 0;
              uint64_t v80 = 0;
            }
            else
            {
              unsigned int v77 = *(_DWORD *)((*(void *)v69 & 0xFFFFFFFFFFFFFFF8) + 24);
              unsigned int v78 = *(_DWORD *)(v63 + 24);
              if (((*(void *)v69 >> 1) & 3 | v77) > v78)
              {
                uint64_t v80 = 0;
                uint64_t v79 = 0;
                goto LABEL_86;
              }
              uint64_t v80 = *((void *)v69 + 1);
              uint64_t v79 = *((void *)v69 + 2);
              if (v63 != (v80 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_84;
              }
              v69 += 24;
              if (v69 != v76)
              {
                unsigned int v77 = *(_DWORD *)((*(void *)v69 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_84:
                if (*(void *)(v79 + 8) == v63) {
                  uint64_t v79 = 0;
                }
LABEL_86:
                if (v78 >= v77) {
                  uint64_t v80 = *((void *)v69 + 1);
                }
              }
            }
            if (v79 == v22)
            {
              uint64_t v81 = v61[1];
              if ((*(_DWORD *)((v80 & 0xFFFFFFFFFFFFFFF8) + 24) | (v80 >> 1) & 3) < (*(_DWORD *)((v81 & 0xFFFFFFFFFFFFFFF8) + 24) | (v81 >> 1) & 3))
              {
                if (v64)
                {
                  unsigned int v129 = *(_DWORD *)(v63 + 24) | (v62 >> 1) & 3;
                  int v126 = (void *)(v65 + 24 * v75);
                  if (v129 < ((*((void *)v76 - 2) >> 1) & 3 | *(_DWORD *)((*((void *)v76 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 24)))
                  {
                    int v126 = *(void **)a2;
                    do
                    {
                      unint64_t v122 = v75 >> 1;
                      uint64_t v123 = v126[3 * (v75 >> 1) + 1];
                      LODWORD(v123) = (v123 >> 1) & 3 | *(_DWORD *)((v123 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v75 -= (v75 >> 1) + 1;
                      BOOL v124 = v129 >= v123;
                      if (v129 >= v123) {
                        unint64_t v125 = v122 + 1;
                      }
                      else {
                        unint64_t v125 = 0;
                      }
                      v126 += 3 * v125;
                      if (!v124) {
                        unint64_t v75 = v122;
                      }
                    }
                    while (v75);
                  }
                }
                else
                {
                  int v126 = (void *)(v65 + 24 * v75);
                }
                uint64_t v127 = v126[1];
                if (*v126 == v62)
                {
                  if (v127 == v80)
                  {
                    if (v76 != (char *)(v126 + 3))
                    {
                      memmove(v126, v126 + 3, v76 - (char *)(v126 + 3));
                      unsigned int v64 = *(_DWORD *)(a2 + 8);
                    }
                    *(_DWORD *)(a2 + 8) = v64 - 1;
                  }
                  else
                  {
                    *int v126 = v80;
                  }
                }
                else
                {
                  uint64_t v140 = v126[2];
                  v126[1] = v62;
                  if (v127 != v80)
                  {
                    uint64_t v159 = v80;
                    uint64_t v160 = v127;
                    uint64_t v161 = v140;
                    sub_1CC2FC960((uint64_t *)a2, (unint64_t)(v126 + 3), (unint64_t)&v159);
                  }
                }
                if (a4)
                {
                  unint64_t v128 = *(unsigned int *)(a4 + 8);
                  if (v128 >= *(unsigned int *)(a4 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)a4 + 8 * v128) = v80;
                  ++*(_DWORD *)(a4 + 8);
                }
                uint64_t v57 = v152 - 24;
                uint64_t v152 = v57;
                if (v151 == v57) {
                  goto LABEL_197;
                }
              }
              else
              {
                if (v64)
                {
                  unsigned int v82 = *(_DWORD *)(v63 + 24) | (v62 >> 1) & 3;
                  uint64_t v83 = (void *)(v65 + 24 * v75);
                  if (v82 < ((*((void *)v76 - 2) >> 1) & 3 | *(_DWORD *)((*((void *)v76 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24)))
                  {
                    uint64_t v83 = *(void **)a2;
                    do
                    {
                      unint64_t v84 = v75 >> 1;
                      uint64_t v85 = v83[3 * (v75 >> 1) + 1];
                      LODWORD(v85) = (v85 >> 1) & 3 | *(_DWORD *)((v85 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v75 -= (v75 >> 1) + 1;
                      BOOL v86 = v82 >= v85;
                      if (v82 >= v85) {
                        unint64_t v87 = v84 + 1;
                      }
                      else {
                        unint64_t v87 = 0;
                      }
                      v83 += 3 * v87;
                      if (!v86) {
                        unint64_t v75 = v84;
                      }
                    }
                    while (v75);
                  }
                }
                else
                {
                  uint64_t v83 = (void *)(v65 + 24 * v75);
                }
                uint64_t v88 = v83[1];
                if (*v83 == v62)
                {
                  if (v88 == v81)
                  {
                    if (v76 != (char *)(v83 + 3))
                    {
                      memmove(v83, v83 + 3, v76 - (char *)(v83 + 3));
                      unsigned int v64 = *(_DWORD *)(a2 + 8);
                    }
                    *(_DWORD *)(a2 + 8) = v64 - 1;
                  }
                  else
                  {
                    *uint64_t v83 = v81;
                  }
                }
                else
                {
                  uint64_t v110 = v83[2];
                  v83[1] = v62;
                  if (v88 != v81)
                  {
                    uint64_t v159 = v81;
                    uint64_t v160 = v88;
                    uint64_t v161 = v110;
                    sub_1CC2FC960((uint64_t *)a2, (unint64_t)(v83 + 3), (unint64_t)&v159);
                  }
                }
                if (a4)
                {
                  unint64_t v89 = *(unsigned int *)(a4 + 8);
                  if (v89 >= *(unsigned int *)(a4 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)a4 + 8 * v89) = v81;
                  ++*(_DWORD *)(a4 + 8);
                }
              }
            }
            else
            {
              uint64_t v152 = v59;
              uint64_t v57 = v56;
              if (v56 == v59) {
                break;
              }
            }
            uint64_t v57 = v152;
LABEL_106:
            uint64_t v90 = *((void *)v57 - 3);
            if (*(v57 - 8))
            {
              uint64_t v91 = (uint64_t *)*((void *)v57 - 2);
            }
            else
            {
              uint64_t v91 = *(uint64_t **)(v90 + 88);
              *((void *)v57 - 2) = v91;
              *(v57 - 8) = 1;
            }
            unsigned int v92 = *(uint64_t **)(v90 + 96);
            while (1)
            {
              if (v91 == v92)
              {
                uint64_t v57 = v152 - 24;
                uint64_t v152 = v57;
                if (v151 != v57) {
                  goto LABEL_106;
                }
                goto LABEL_197;
              }
              *((void *)v57 - 2) = v91 + 1;
              uint64_t v93 = *v91;
              uint64_t v94 = v155;
              uint64_t v95 = HIDWORD(v156);
              if (v155 == v154)
              {
                if (HIDWORD(v156))
                {
                  int v96 = 0;
                  uint64_t v97 = 8 * HIDWORD(v156);
                  unsigned int v98 = v155;
                  while (*(void *)v98 != v93)
                  {
                    if (*(void *)v98 == -2) {
                      int v96 = v98;
                    }
                    v98 += 8;
                    v97 -= 8;
                    if (!v97)
                    {
                      if (!v96) {
                        goto LABEL_119;
                      }
                      *(void *)int v96 = v93;
                      --v157;
                      goto LABEL_143;
                    }
                  }
                  goto LABEL_141;
                }
LABEL_119:
                unsigned int v99 = v156;
                if (HIDWORD(v156) < v156)
                {
                  ++HIDWORD(v156);
                  *(void *)&v155[8 * v95] = v93;
                  goto LABEL_143;
                }
              }
              else
              {
                unsigned int v99 = v156;
              }
              if (3 * v99 <= 4 * (HIDWORD(v156) - v157))
              {
                if (v99 >= 0x40) {
                  v99 *= 2;
                }
                else {
                  unsigned int v99 = 128;
                }
              }
              else if (v99 - HIDWORD(v156) >= v99 >> 3)
              {
                goto LABEL_137;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v154, v99);
              unsigned int v99 = v156;
              uint64_t v94 = v155;
LABEL_137:
              unsigned int v108 = v99 - 1;
              unsigned int v104 = (v99 - 1) & ((v93 >> 4) ^ (v93 >> 9));
              uint64_t v105 = &v94[8 * v104];
              uint64_t v106 = *(void *)v105;
              if (*(void *)v105 != -1)
              {
                unsigned int v101 = 0;
                int v103 = 1;
                while (v106 != v93)
                {
                  if (v101) {
                    BOOL v100 = 0;
                  }
                  else {
                    BOOL v100 = v106 == -2;
                  }
                  if (v100) {
                    unsigned int v101 = v105;
                  }
                  unsigned int v102 = v104 + v103++;
                  unsigned int v104 = v102 & v108;
                  uint64_t v105 = &v94[8 * (v102 & v108)];
                  uint64_t v106 = *(void *)v105;
                  if (*(void *)v105 == -1) {
                    goto LABEL_129;
                  }
                }
                goto LABEL_141;
              }
              unsigned int v101 = 0;
LABEL_129:
              uint64_t v107 = v101 ? v101 : v105;
              if (*(void *)v107 != v93) {
                break;
              }
LABEL_141:
              unsigned int v92 = *(uint64_t **)(v90 + 96);
              uint64_t v91 = (uint64_t *)*((void *)v57 - 2);
            }
            if (*(void *)v107 == -2) {
              --v157;
            }
            else {
              ++HIDWORD(v156);
            }
            *(void *)uint64_t v107 = v93;
LABEL_143:
            unsigned int v109 = v152;
            if ((unint64_t)v152 >= v153)
            {
              uint64_t v111 = v6;
              uint64_t v112 = v22;
              int v113 = v151;
              unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((v152 - v151) >> 3);
              unint64_t v115 = v114 + 1;
              if (v114 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              if (0x5555555555555556 * ((uint64_t)(v153 - (void)v151) >> 3) > v115) {
                unint64_t v115 = 0x5555555555555556 * ((uint64_t)(v153 - (void)v151) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153 - (void)v151) >> 3) >= 0x555555555555555) {
                unint64_t v116 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v116 = v115;
              }
              if (v116)
              {
                if (v116 > 0xAAAAAAAAAAAAAAALL) {
                  sub_1CB833614();
                }
                unsigned int v117 = (char *)operator new(24 * v116);
              }
              else
              {
                unsigned int v117 = 0;
              }
              uint64_t v118 = &v117[24 * v114];
              *(void *)uint64_t v118 = v93;
              v118[8] = 0;
              v118[16] = 0;
              uint64_t v119 = v118;
              uint64_t v22 = v112;
              if (v109 != v113)
              {
                do
                {
                  long long v120 = *(_OWORD *)(v109 - 24);
                  *((void *)v119 - 1) = *((void *)v109 - 1);
                  *(_OWORD *)(v119 - 24) = v120;
                  v119 -= 24;
                  v109 -= 24;
                }
                while (v109 != v113);
                unsigned int v109 = v151;
              }
              uint64_t v6 = v111;
              int v121 = &v117[24 * v116];
              uint64_t v58 = v118 + 24;
              uint64_t v151 = v119;
              uint64_t v152 = v118 + 24;
              unint64_t v153 = (unint64_t)v121;
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *(void *)uint64_t v152 = v93;
              v109[8] = 0;
              uint64_t v58 = v109 + 24;
              v109[16] = 0;
            }
            uint64_t v152 = v58;
            uint64_t v57 = v151;
            uint64_t v56 = v151;
            if (v58 != v151) {
              continue;
            }
            break;
          }
LABEL_196:
          if (v57) {
LABEL_197:
          }
            operator delete(v57);
          unsigned int v46 = v150 + 1;
          if (v150 + 1 == v149)
          {
            if (v155 != v154) {
              free(v155);
            }
            return;
          }
        }
      }
    }
  }
}

void llvm::LiveIntervals::addKillFlags(llvm::LiveIntervals *this, const llvm::VirtRegMap *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(*((void *)this + 32) + 32);
  if (v2)
  {
    int v4 = 0;
    while (1)
    {
      unint64_t v5 = v4 & 0x7FFFFFFF;
      uint64_t v6 = *(void *)(*(void *)(*((void *)this + 32) + 24) + 16 * v5 + 8);
      if (v6)
      {
        while ((*(_DWORD *)v6 & 0x80000000) != 0)
        {
          uint64_t v6 = *(void *)(v6 + 24);
          if (!v6) {
            goto LABEL_4;
          }
        }
        if (v5 >= *((unsigned int *)this + 104) || (unint64_t v7 = *(unsigned int **)(*((void *)this + 51) + 8 * v5)) == 0) {
          sub_1CBB2C8B4((uint64_t)this, v4 | 0x80000000);
        }
        if (v7[2])
        {
          unsigned int v8 = *(_DWORD *)(*((void *)a2 + 35) + 4 * v5);
          if (v8)
          {
            unsigned int v54 = 0;
            uint64_t v9 = *((void *)this + 33);
            uint64_t v10 = v9 ? (void *)(v9 + 8) : 0;
            unint64_t v11 = *(unsigned int *)(*v10 + 24 * v8 + 16);
            uint64_t v12 = (_WORD *)(v10[6] + ((v11 >> 3) & 0x1FFFFFFE));
            unsigned __int16 v13 = *v12 + (v11 & 0xF) * v8;
            do
            {
              unsigned __int16 v14 = v13;
              uint64_t v15 = *(void *)(*((void *)this + 85) + 8 * v13);
              if (!v15) {
                operator new();
              }
              unint64_t v16 = *(unsigned int *)(v15 + 8);
              if (v16)
              {
                uint64_t v22 = *(void *)v15 + 24 * v16;
                unsigned int v24 = *(_DWORD *)((*(void *)(*(void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(void *)(*(void *)v7 + 8) >> 1) & 3;
                if (v24 < ((*(void *)(v22 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v22 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24)))
                {
                  uint64_t v22 = *(void *)v15;
                  do
                  {
                    unint64_t v18 = v16 >> 1;
                    uint64_t v19 = *(void *)(v22 + 24 * (v16 >> 1) + 8);
                    LODWORD(v19) = (v19 >> 1) & 3 | *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v16 -= (v16 >> 1) + 1;
                    BOOL v20 = v24 >= v19;
                    if (v24 >= v19) {
                      unint64_t v21 = v18 + 1;
                    }
                    else {
                      unint64_t v21 = 0;
                    }
                    v22 += 24 * v21;
                    if (!v20) {
                      unint64_t v16 = v18;
                    }
                  }
                  while (v16);
                }
                if (v54 >= 8uLL) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unint64_t v23 = &v55[v54];
                *unint64_t v23 = v15;
                v23[1] = v22;
                ++v54;
              }
              int v17 = (unsigned __int16)v12[1];
              ++v12;
              unsigned __int16 v13 = v17 + v14;
            }
            while (v17);
            unsigned int v25 = v7[2];
            if (v25) {
              break;
            }
          }
        }
      }
LABEL_4:
      if (++v4 == v2) {
        return;
      }
    }
    uint64_t v26 = *(void *)v7;
    uint64_t v27 = *(void *)v7 + 24 * v25;
    while (1)
    {
      unint64_t v28 = *(void *)(v26 + 8);
      if (v28 < 8 || (*(void *)(v26 + 8) & 6) == 0) {
        goto LABEL_54;
      }
      unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v31 = *(void *)((v28 & 0xFFFFFFFFFFFFFFF8) + 16);
      if (!v31) {
        goto LABEL_54;
      }
      if (v54) {
        break;
      }
LABEL_37:
      uint64_t v32 = *((void *)this + 32);
      if (*(unsigned char *)(v32 + 16))
      {
        uint64_t v33 = *((void *)v7 + 13);
        if (v33)
        {
          uint64_t v34 = 0;
          do
          {
            unsigned int v43 = *(_DWORD *)(v33 + 8);
            if (v43)
            {
              unsigned int v44 = *(void **)v33;
              uint64_t v45 = *(void *)v33 + 24 * v43;
              while (((*v44 >> 1) & 3 | *(_DWORD *)((*v44 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)(v30 + 24) | (v28 >> 1) & 3))
              {
                if (v44[1] == v28)
                {
                  v34 |= *(void *)(v33 + 112);
                  break;
                }
                v44 += 3;
                if (v44 == (void *)v45) {
                  break;
                }
              }
            }
            uint64_t v33 = *(void *)(v33 + 104);
          }
          while (v33);
        }
        else
        {
          uint64_t v34 = -1;
        }
        uint64_t v35 = *(unsigned int *)(v31 + 40);
        if (!v35) {
          goto LABEL_77;
        }
        char v36 = 0;
        uint64_t v37 = ~v34;
        uint64_t v38 = 32 * v35;
        unint64_t v39 = (_DWORD *)(*(void *)(v31 + 32) + 4);
        do
        {
          unint64_t v40 = *(v39 - 1);
          if (!*(v39 - 1) && *v39 == (v4 | 0x80000000))
          {
            if ((v40 & 0x1000000) != 0)
            {
              v36 |= (v40 & 0xFFF00) == 0;
            }
            else
            {
              uint64_t v41 = (v40 >> 8) & 0xFFF;
              if (v41) {
                BOOL v42 = (void *)(*(void *)(*((void *)this + 33) + 232) + 8 * v41);
              }
              else {
                BOOL v42 = (void *)((*(void *)(*(void *)(v32 + 24) + 16 * v5) & 0xFFFFFFFFFFFFFFF8) + 24);
              }
              if ((*v42 & v37) != 0) {
                goto LABEL_78;
              }
            }
          }
          v39 += 8;
          v38 -= 32;
        }
        while (v38);
        if ((v36 & 1) == 0)
        {
LABEL_77:
          if (v26 + 24 != *(void *)v7 + 24 * v7[2] && *(void *)(v26 + 24) == v28) {
            goto LABEL_78;
          }
        }
      }
      llvm::MachineInstr::addRegisterKilled((llvm::MachineInstr *)v31, v4 | 0x80000000, 0, 0);
LABEL_54:
      v26 += 24;
      if (v26 == v27) {
        goto LABEL_4;
      }
    }
    unsigned int v46 = v55;
    while (1)
    {
      uint64_t v47 = (void *)*v46;
      __int16 v48 = (void *)v46[1];
      unsigned int v49 = *(_DWORD *)(*v46 + 8);
      unint64_t v50 = (void *)(*(void *)*v46 + 24 * v49);
      if (v48 != v50)
      {
        unsigned int v52 = *(_DWORD *)(v30 + 24) | (v28 >> 1) & 3;
        if (v52 < ((*(v50 - 2) >> 1) & 3 | *(_DWORD *)((*(v50 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          unint64_t v50 = v48 - 3;
          do
          {
            unsigned int v51 = (v50[4] >> 1) & 3 | *(_DWORD *)((v50[4] & 0xFFFFFFFFFFFFFFF8) + 24);
            v50 += 3;
          }
          while (v51 <= v52);
        }
        v46[1] = v50;
        if (v50 != (void *)(*v47 + 24 * v49)
          && ((*v50 >> 1) & 3 | *(_DWORD *)((*v50 & 0xFFFFFFFFFFFFFFF8) + 24)) < v52)
        {
          break;
        }
      }
      v46 += 2;
      if (v46 == (void *)&v55[v54]) {
        goto LABEL_37;
      }
    }
LABEL_78:
    llvm::MachineInstr::clearRegisterKills(v31, v4 | 0x80000000, 0);
    goto LABEL_54;
  }
}

uint64_t llvm::LiveIntervals::intervalIsInOneMBB(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)a2;
  if ((v2 & 6) == 0) {
    return 0;
  }
  unint64_t v3 = *(void *)(*(void *)a2 + 24 * *(unsigned int *)(a2 + 8) - 16);
  if ((v3 & 6) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 288);
  if (v2 >= 8 && (uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
  {
    uint64_t v6 = (uint64_t *)(v5 + 24);
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(v4 + 544);
    if (v11)
    {
      unsigned int v12 = *(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 24) | (v2 >> 1) & 3;
      unsigned __int16 v13 = *(void **)(v4 + 536);
      unint64_t v14 = *(unsigned int *)(v4 + 544);
      do
      {
        unint64_t v15 = v14 >> 1;
        unint64_t v16 = &v13[2 * (v14 >> 1)];
        uint64_t v18 = *v16;
        int v17 = v16 + 2;
        v14 += ~(v14 >> 1);
        if (((v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24)) < v12) {
          unsigned __int16 v13 = v17;
        }
        else {
          unint64_t v14 = v15;
        }
      }
      while (v14);
      if (v13 == (void *)(*(void *)(v4 + 536) + 16 * v11)
        || ((*v13 >> 1) & 3 | *(_DWORD *)((*v13 & 0xFFFFFFFFFFFFFFF8) + 24)) > v12)
      {
        v13 -= 2;
      }
    }
    else
    {
      unsigned __int16 v13 = *(void **)(v4 + 536);
    }
    uint64_t v6 = v13 + 1;
  }
  uint64_t v7 = *v6;
  if (v3 >= 8 && (uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
  {
    uint64_t v9 = (void *)(v8 + 24);
  }
  else
  {
    uint64_t v19 = *(void **)(v4 + 536);
    unint64_t v20 = *(unsigned int *)(v4 + 544);
    if (v20)
    {
      unsigned int v21 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24) | (v3 >> 1) & 3;
      uint64_t v22 = v19;
      unint64_t v23 = v20;
      do
      {
        unint64_t v24 = v23 >> 1;
        unsigned int v25 = &v22[2 * (v23 >> 1)];
        uint64_t v27 = *v25;
        uint64_t v26 = v25 + 2;
        v23 += ~(v23 >> 1);
        if (((v27 >> 1) & 3 | *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24)) < v21) {
          uint64_t v22 = v26;
        }
        else {
          unint64_t v23 = v24;
        }
      }
      while (v23);
      if (v22 == &v19[2 * v20]
        || ((*v22 >> 1) & 3 | *(_DWORD *)((*v22 & 0xFFFFFFFFFFFFFFF8) + 24)) > v21)
      {
        v22 -= 2;
      }
    }
    else
    {
      uint64_t v22 = *(void **)(v4 + 536);
    }
    uint64_t v9 = v22 + 1;
  }
  if (v7 == *v9) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t llvm::LiveIntervals::hasPHIKill(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 72);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = v4 + 8 * v3;
  unint64_t v6 = *(unsigned int *)(a2 + 8);
  uint64_t v7 = *(void **)a2;
  uint64_t v8 = *(void *)a2 + 24 * v6;
  while (1)
  {
    unint64_t v9 = *(void *)(*(void *)v4 + 8);
    if (v9 >= 8 && (*(void *)(*(void *)v4 + 8) & 6) == 0)
    {
      uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
      if (v11)
      {
        unsigned int v12 = (void *)(v11 + 24);
      }
      else
      {
        uint64_t v27 = *(void *)(a1 + 288);
        unint64_t v28 = *(void **)(v27 + 536);
        unint64_t v29 = *(unsigned int *)(v27 + 544);
        if (v29)
        {
          unsigned int v30 = *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24) | (v9 >> 1) & 3;
          uint64_t v31 = v28;
          unint64_t v32 = v29;
          do
          {
            unint64_t v33 = v32 >> 1;
            uint64_t v34 = &v31[2 * (v32 >> 1)];
            uint64_t v36 = *v34;
            uint64_t v35 = v34 + 2;
            v32 += ~(v32 >> 1);
            if (((v36 >> 1) & 3 | *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24)) < v30) {
              uint64_t v31 = v35;
            }
            else {
              unint64_t v32 = v33;
            }
          }
          while (v32);
          if (v31 == &v28[2 * v29]
            || ((*v31 >> 1) & 3 | *(_DWORD *)((*v31 & 0xFFFFFFFFFFFFFFF8) + 24)) > v30)
          {
            v31 -= 2;
          }
        }
        else
        {
          uint64_t v31 = v28;
        }
        unsigned int v12 = v31 + 1;
      }
      uint64_t v14 = *(void *)(*v12 + 64);
      uint64_t v13 = *(void *)(*v12 + 72);
      if (((unint64_t)(v13 - v14) >> 3) > 0x64) {
        return 1;
      }
      if (v14 != v13) {
        break;
      }
    }
LABEL_31:
    v4 += 8;
    if (v4 == v5) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 288) + 392) + 16 * *(unsigned int *)(*(void *)v14 + 24) + 8);
    unsigned int v16 = (v15 >> 1) & 3;
    unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
    if (v16) {
      uint64_t v18 = v17 | (2 * (v16 - 1));
    }
    else {
      uint64_t v18 = *(void *)v17 | 6;
    }
    uint64_t v19 = (void *)v8;
    if (v6)
    {
      unsigned int v20 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3;
      uint64_t v19 = (void *)v8;
      if (v20 < ((*(void *)(v8 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v8 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 24)))
      {
        uint64_t v19 = v7;
        unint64_t v21 = v6;
        do
        {
          unint64_t v22 = v21 >> 1;
          uint64_t v23 = v19[3 * (v21 >> 1) + 1];
          LODWORD(v23) = (v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24);
          v21 -= (v21 >> 1) + 1;
          BOOL v24 = v20 >= v23;
          if (v20 >= v23) {
            unint64_t v25 = v22 + 1;
          }
          else {
            unint64_t v25 = 0;
          }
          v19 += 3 * v25;
          if (!v24) {
            unint64_t v21 = v22;
          }
        }
        while (v21);
      }
    }
    uint64_t v26 = v19 == (void *)v8
       || ((*v19 >> 1) & 3 | *(_DWORD *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3)
        ? 0
        : v19[2];
    if (v26 == a3) {
      return 1;
    }
    v14 += 8;
    if (v14 == v13) {
      goto LABEL_31;
    }
  }
}

float llvm::LiveIntervals::getSpillWeight(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a4 + 24) + 32) + 16);
  uint64_t v9 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8);
  (*(void (**)(void))(v9 + 336))();
  uint64_t v11 = *(void *)(a3 + 248);
  if (v11)
  {
    int v12 = *(_DWORD *)(v11 + 176);
    float v13 = 0.0;
    if (v12)
    {
      uint64_t v14 = *(void *)(a4 + 24);
      uint64_t v15 = *(void *)(v11 + 160);
      unsigned int v16 = v12 - 1;
      uint64_t v17 = (v12 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      uint64_t v18 = *(void *)(v15 + 16 * v17);
      if (v18 == v14)
      {
LABEL_4:
        uint64_t v19 = *(unsigned int *)(v15 + 16 * v17 + 8);
        if (v19 != 0xFFFFFFFFLL) {
          float v13 = (float)*(unint64_t *)(*(void *)(v11 + 8) + 24 * v19 + 16);
        }
      }
      else
      {
        int v22 = 1;
        while (v18 != -4096)
        {
          int v23 = v17 + v22++;
          uint64_t v17 = v23 & v16;
          uint64_t v18 = *(void *)(v15 + 16 * v17);
          if (v18 == v14) {
            goto LABEL_4;
          }
        }
      }
    }
    float v20 = (float)*(unint64_t *)(*(void *)(v11 + 8) + 16);
  }
  else
  {
    float v13 = 0.0;
    float v20 = 0.0;
  }
  return (float)((float)a2 + (float)((float)a1 * v10)) * (float)(v13 * (float)(1.0 / v20));
}

unint64_t sub_1CC2F3BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 80) += 16;
  if (((*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3 + 16 > *(void *)(a3 + 8) - *(void *)a3)
  {
    unsigned int v10 = *(_DWORD *)(a3 + 24) >> 7;
    if (v10 >= 0x1E) {
      LOBYTE(v10) = 30;
    }
    uint64_t v11 = 4096 << v10;
    unint64_t v6 = (unint64_t)operator new(4096 << v10, (std::align_val_t)8uLL);
    unsigned int v12 = *(_DWORD *)(a3 + 24);
    if (v12 >= *(_DWORD *)(a3 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a3 + 16) + 8 * v12) = v6;
    ++*(_DWORD *)(a3 + 24);
    *(void *)(a3 + 8) = v6 + v11;
  }
  else
  {
    unint64_t v6 = (*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a3 = v6 + 16;
  unsigned int v7 = *(_DWORD *)(a1 + 72);
  unsigned int v8 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)unint64_t v6 = v7;
  *(void *)(v6 + 8) = a2;
  if (v7 >= v8) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v7) = v6;
  ++*(_DWORD *)(a1 + 72);
  return v6;
}

BOOL llvm::LiveIntervals::checkRegMaskInterference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (!v3) {
    return 0;
  }
  unsigned int v7 = *(void **)a2;
  uint64_t v8 = llvm::LiveIntervals::intervalIsInOneMBB(a1, a2);
  if (v8)
  {
    uint64_t v9 = (unsigned int *)(*(void *)(a1 + 600) + 8 * *(unsigned int *)(v8 + 24));
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    uint64_t v12 = *(void *)(a1 + 440) + 8 * v10;
    uint64_t v13 = *(void *)(a1 + 520) + 8 * v10;
    unint64_t v14 = v11;
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 440);
    unint64_t v14 = *(unsigned int *)(a1 + 448);
    uint64_t v13 = *(void *)(a1 + 520);
    unint64_t v11 = *(unsigned int *)(a1 + 528);
  }
  v49[0] = v13;
  v49[1] = v11;
  uint64_t v15 = (void *)v12;
  if (v14)
  {
    uint64_t v15 = (void *)v12;
    unint64_t v18 = v14;
    do
    {
      unint64_t v19 = v18 >> 1;
      float v20 = &v15[v18 >> 1];
      uint64_t v22 = *v20;
      unint64_t v21 = v20 + 1;
      v18 += ~(v18 >> 1);
      if (((v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24))) {
        uint64_t v15 = v21;
      }
      else {
        unint64_t v18 = v19;
      }
    }
    while (v18);
  }
  unsigned int v16 = (void *)(v12 + 8 * v14);
  if (v15 == v16) {
    return 0;
  }
  char v48 = 0;
  unsigned int v46 = &v7[3 * v3];
  v47[0] = &v48;
  v47[1] = a3;
  v47[2] = a1;
  uint64_t v23 = -v12;
  v47[3] = v49;
  for (i = v23; ; uint64_t v23 = i)
  {
    for (unint64_t j = (unint64_t)v15 + v23; ; j += 8)
    {
      unint64_t v25 = v7[1];
      unint64_t v26 = *v15 & 0xFFFFFFFFFFFFFFF8;
      if (((*v15 >> 1) & 3 | *(_DWORD *)(v26 + 24)) >= (*(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24) | (v25 >> 1) & 3)) {
        break;
      }
      if (!v48)
      {
        *(_DWORD *)(a3 + 8) = 0;
        int v27 = *(_DWORD *)(*(void *)(a1 + 264) + 16);
        *(_DWORD *)(a3 + 64) = v27;
        if ((v27 + 63) < 0x40)
        {
          uint64_t v29 = 0;
        }
        else
        {
          uint64_t v28 = (v27 + 63) >> 6;
          if (v28 > *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memset(*(void **)a3, 255, 8 * v28);
          uint64_t v29 = v28;
          *(_DWORD *)(a3 + 8) = v28;
        }
        if ((v27 & 0x3F) != 0) {
          *(void *)(*(void *)a3 + 8 * v29 - 8) &= ~(-1 << (v27 & 0x3F));
        }
        char v48 = 1;
      }
      sub_1CC2F5880(a3, *(unsigned int **)(v49[0] + (j & 0x7FFFFFFF8)), 0xFFFFFFFF);
      if (++v15 == v16) {
        return v48 != 0;
      }
    }
    if (*v15 == v25 && v25 >= 8)
    {
      uint64_t v34 = *(llvm::MachineInstr **)(v26 + 16);
      if (v34)
      {
        if (**((_WORD **)v34 + 2) == 31)
        {
          int v35 = *(_DWORD *)(a2 + 112);
          uint64_t v50 = *(void *)(v26 + 16);
          int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(v34);
          uint64_t v37 = *(void *)(*((void *)v34 + 2) + 32);
          if (v37)
          {
            unsigned int v38 = -1;
            do
              ++v38;
            while (*(_WORD *)(v37 + 2 * v38));
          }
          else
          {
            unsigned int v38 = 0;
          }
          int v51 = v38 + NumExplicitDefs;
          uint64_t v39 = *(void *)(v50 + 32);
          int v40 = v51 + *(_DWORD *)(v39 + 32 * (v51 + 2) + 16);
          if ((*(unsigned char *)(v39 + 32 * (v40 + 7) + 16) & 2) == 0)
          {
            uint64_t v41 = (v40 + 9);
            unsigned int NumGCPtrIdx = llvm::StatepointOpers::getNumGCPtrIdx((llvm::StatepointOpers *)&v50);
            if (v41 < NumGCPtrIdx)
            {
              unint64_t v43 = NumGCPtrIdx - (unint64_t)v41;
              unsigned int v44 = (_DWORD *)(*((void *)v34 + 4) + 32 * v41 + 4);
              while (*((unsigned char *)v44 - 4) || *v44 != v35)
              {
                v44 += 8;
                if (!--v43) {
                  goto LABEL_30;
                }
              }
              ++v15;
              sub_1CC2F412C((uint64_t)v47, j >> 3);
            }
          }
        }
      }
    }
LABEL_30:
    if (v7 + 3 == v46) {
      break;
    }
    if (v15 == v16) {
      break;
    }
    uint64_t v31 = *(void *)(*(void *)a2 + 24 * *(unsigned int *)(a2 + 8) - 16);
    unsigned int v32 = (*v15 >> 1) & 3 | *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v32 > (*(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24) | (v31 >> 1) & 3)) {
      break;
    }
    do
    {
      unsigned int v33 = (v7[4] >> 1) & 3 | *(_DWORD *)((v7[4] & 0xFFFFFFFFFFFFFFF8) + 24);
      v7 += 3;
    }
    while (v33 < v32);
    while (((*v15 >> 1) & 3 | *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      if (++v15 == v16) {
        return v48 != 0;
      }
    }
  }
  return v48 != 0;
}

uint64_t sub_1CC2F412C(uint64_t a1, unsigned int a2)
{
  if (!**(unsigned char **)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    *(_DWORD *)(v5 + 8) = 0;
    int v6 = *(_DWORD *)(*(void *)(v4 + 264) + 16);
    *(_DWORD *)(v5 + 64) = v6;
    if ((v6 + 63) < 0x40)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v7 = (v6 + 63) >> 6;
      if (v7 > *(_DWORD *)(v5 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memset(*(void **)v5, 255, 8 * v7);
      uint64_t v8 = v7;
      *(_DWORD *)(v5 + 8) = v7;
    }
    if ((v6 & 0x3F) != 0) {
      *(void *)(*(void *)v5 + 8 * v8 - 8) &= ~(-1 << (v6 & 0x3F));
    }
    **(unsigned char **)a1 = 1;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(unsigned int **)(**(void **)(a1 + 24) + 8 * a2);

  return sub_1CC2F5880(v9, v10, 0xFFFFFFFF);
}

void llvm::LiveIntervals::handleMove(llvm::LiveIntervals *this, llvm::MachineInstr *a2, char a3)
{
  int v6 = (int32x2_t *)*((void *)this + 36);
  __int16 v7 = *((_WORD *)a2 + 22);
  uint64_t v8 = a2;
  uint64_t v9 = a2;
  if ((v7 & 0xC) != 0)
  {
    uint64_t v8 = a2;
    if ((v7 & 4) != 0)
    {
      uint64_t v8 = a2;
      do
        uint64_t v8 = (llvm::MachineInstr *)(*(void *)v8 & 0xFFFFFFFFFFFFFFF8);
      while ((*((_WORD *)v8 + 22) & 4) != 0);
    }
    uint64_t v9 = a2;
    if ((v7 & 8) != 0)
    {
      do
        uint64_t v9 = (llvm::MachineInstr *)*((void *)v9 + 1);
      while ((*((_WORD *)v9 + 22) & 8) != 0);
    }
  }
  uint64_t v10 = (llvm::MachineInstr *)*((void *)v9 + 1);
  if (v8 != v10)
  {
    while (1)
    {
      unsigned int v11 = **((unsigned __int16 **)v8 + 2);
      BOOL v12 = v11 > 0x17;
      int v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0) {
        break;
      }
      uint64_t v8 = (llvm::MachineInstr *)*((void *)v8 + 1);
      if (v8 == v10)
      {
        uint64_t v8 = (llvm::MachineInstr *)*((void *)v9 + 1);
        break;
      }
    }
  }
  int32x2_t v15 = v6[46];
  uint64_t v16 = v6[48].u32[0];
  if (!v16)
  {
LABEL_26:
    uint64_t v17 = v6[48].u32[0];
LABEL_24:
    float v20 = *(llvm::MachineInstr **)(*(void *)&v15 + 16 * v17 + 8);
    if (!v16) {
      goto LABEL_25;
    }
    goto LABEL_11;
  }
  LODWORD(v17) = ((v8 >> 4) ^ (v8 >> 9)) & (v16 - 1);
  unint64_t v18 = (llvm::MachineInstr **)(*(void *)&v15 + 16 * v17);
  unint64_t v19 = *v18;
  if (v8 != *v18)
  {
    int v28 = 1;
    while (v19 != (llvm::MachineInstr *)-4096)
    {
      int v29 = v17 + v28++;
      uint64_t v17 = v29 & (v16 - 1);
      unint64_t v19 = *(llvm::MachineInstr **)(*(void *)&v15 + 16 * v17);
      if (v8 == v19) {
        goto LABEL_24;
      }
    }
    goto LABEL_26;
  }
  float v20 = v18[1];
LABEL_11:
  LODWORD(v21) = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v22 = *(void *)&v15 + 16 * v21;
  uint64_t v23 = *(llvm::MachineInstr **)v22;
  if (*(llvm::MachineInstr **)v22 == a2) {
    goto LABEL_12;
  }
  int v26 = 1;
  while (v23 != (llvm::MachineInstr *)-4096)
  {
    int v27 = v21 + v26++;
    uint64_t v21 = v27 & (v16 - 1);
    uint64_t v23 = *(llvm::MachineInstr **)(*(void *)&v15 + 16 * v21);
    if (v23 == a2)
    {
      uint64_t v22 = *(void *)&v15 + 16 * v21;
      goto LABEL_12;
    }
  }
LABEL_25:
  uint64_t v22 = *(void *)&v15 + 16 * v16;
LABEL_12:
  if (v22 != *(void *)&v15 + 16 * v16)
  {
    unint64_t v24 = *(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v22 = -8192;
    v6[47] = vadd_s32(v6[47], (int32x2_t)0x1FFFFFFFFLL);
    *(void *)(v24 + 16) = 0;
    int v6 = (int32x2_t *)*((void *)this + 36);
  }
  unint64_t v25 = sub_1CB914C88((uint64_t)v6, (uint64_t)a2, 0);
  unsigned int v30 = this;
  long long v31 = *((_OWORD *)this + 16);
  unsigned int v32 = v20;
  unint64_t v33 = v25;
  uint64_t v34 = v38;
  int v35 = v38;
  uint64_t v36 = 8;
  int v37 = 0;
  v38[64] = a3;
  sub_1CC2F4468((uint64_t)&v30, (uint64_t)a2);
  if (v35 != v34) {
    free(v35);
  }
}

void sub_1CC2F4468(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 40);
  if (!v2) {
    return;
  }
  char v4 = 0;
  uint64_t v5 = *(unsigned int **)(a2 + 32);
  int v6 = &v5[8 * v2];
  unint64_t v89 = (llvm::SmallPtrSetImplBase *)(a1 + 40);
  do
  {
    unsigned int v7 = *v5;
    BOOL v8 = *v5 == 12;
    if (*v5) {
      goto LABEL_4;
    }
    if ((v7 & 0x1000000) == 0)
    {
      if ((v7 & 0x30000000) != 0) {
        goto LABEL_4;
      }
      unsigned int *v5 = v7 & 0xFBFFFFFF;
    }
    unsigned int v9 = v5[1];
    if (v9)
    {
      if ((v9 & 0x80000000) != 0)
      {
        unint64_t v10 = v9 & 0x7FFFFFFF;
        if (v10 >= *(unsigned int *)(*(void *)a1 + 416)
          || (uint64_t v11 = *(void *)(*(void *)(*(void *)a1 + 408) + 8 * v10)) == 0)
        {
          sub_1CBB2C8B4(*(void *)a1, v5[1]);
        }
        uint64_t v12 = *(void *)(v11 + 104);
        if (!v12)
        {
LABEL_14:
          uint64_t v13 = *(void *)(a1 + 48);
          uint64_t v14 = *(unsigned int *)(a1 + 60);
          if (v13 == *(void *)(a1 + 40))
          {
            if (v14)
            {
              int32x2_t v15 = 0;
              uint64_t v16 = 8 * v14;
              uint64_t v17 = *(uint64_t **)(a1 + 48);
              do
              {
                if (*v17 == v11) {
                  goto LABEL_26;
                }
                if (*v17 == -2) {
                  int32x2_t v15 = v17;
                }
                ++v17;
                v16 -= 8;
              }
              while (v16);
              if (v15)
              {
                uint64_t *v15 = v11;
                --*(_DWORD *)(a1 + 64);
LABEL_24:
                if (*(_DWORD *)((*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 24))
                  sub_1CC2F5FFC((uint64_t *)a1, v11, v9, 0);
                else {
                  sub_1CC2F5AA8((uint64_t *)a1, v11);
                }
                goto LABEL_26;
              }
            }
            unsigned int v18 = *(_DWORD *)(a1 + 56);
            if (v14 < v18)
            {
              *(_DWORD *)(a1 + 60) = v14 + 1;
              *(void *)(v13 + 8 * v14) = v11;
              goto LABEL_24;
            }
          }
          else
          {
            unsigned int v18 = *(_DWORD *)(a1 + 56);
          }
          if (3 * v18 <= 4 * ((int)v14 - *(_DWORD *)(a1 + 64)))
          {
            if (v18 >= 0x40) {
              v18 *= 2;
            }
            else {
              unsigned int v18 = 128;
            }
          }
          else if (v18 - v14 >= v18 >> 3)
          {
            goto LABEL_46;
          }
          llvm::SmallPtrSetImplBase::Grow(v89, v18);
          unsigned int v18 = *(_DWORD *)(a1 + 56);
          uint64_t v13 = *(void *)(a1 + 48);
LABEL_46:
          unsigned int v33 = v18 - 1;
          unsigned int v34 = (v18 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          int v35 = (uint64_t *)(v13 + 8 * v34);
          uint64_t v36 = *v35;
          if (*v35 == -1)
          {
            int v37 = 0;
LABEL_99:
            if (v37) {
              uint64_t v65 = v37;
            }
            else {
              uint64_t v65 = v35;
            }
            if (*v65 != v11)
            {
              if (*v65 == -2) {
                --*(_DWORD *)(a1 + 64);
              }
              else {
                ++*(_DWORD *)(a1 + 60);
              }
              *uint64_t v65 = v11;
              goto LABEL_24;
            }
          }
          else
          {
            int v37 = 0;
            int v38 = 1;
            while (v36 != v11)
            {
              if (v37) {
                BOOL v39 = 0;
              }
              else {
                BOOL v39 = v36 == -2;
              }
              if (v39) {
                int v37 = v35;
              }
              unsigned int v40 = v34 + v38++;
              unsigned int v34 = v40 & v33;
              int v35 = (uint64_t *)(v13 + 8 * (v40 & v33));
              uint64_t v36 = *v35;
              if (*v35 == -1) {
                goto LABEL_99;
              }
            }
          }
LABEL_26:
          uint64_t v19 = *(void *)(v11 + 104);
          if (!v19) {
            goto LABEL_4;
          }
          unsigned int v20 = *(_DWORD *)(v11 + 8);
          while (1)
          {
            if (v20)
            {
              unsigned int v21 = *(_DWORD *)(v19 + 8);
              if (v21)
              {
                uint64_t v22 = *(void **)v19;
                uint64_t v23 = *(void *)v19 + 24 * v21;
                unint64_t v24 = *(uint64_t **)v11;
                uint64_t v25 = *(void *)v11 + 24 * v20;
                while (1)
                {
                  unsigned int v26 = (*v22 >> 1) & 3 | *(_DWORD *)((*v22 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (v26 >= ((*(void *)(v25 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v25 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 24)))
                    break;
                  int v27 = v24 - 3;
                  int v28 = v24 + 3;
                  do
                  {
                    int v29 = v28;
                    unsigned int v30 = (v27[4] >> 1) & 3 | *(_DWORD *)((v27[4] & 0xFFFFFFFFFFFFFFF8) + 24);
                    v27 += 3;
                    v28 += 3;
                  }
                  while (v30 <= v26);
                  if (v27 == (uint64_t *)v25
                    || ((*v27 >> 1) & 3 | *(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 24)) > v26)
                  {
                    break;
                  }
                  while (1)
                  {
                    uint64_t v31 = *(v29 - 2);
                    if (((v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24)) >= ((v22[1] >> 1) & 3 | *(_DWORD *)((v22[1] & 0xFFFFFFFFFFFFFFF8) + 24))) {
                      break;
                    }
                    if (v29 != (uint64_t *)v25)
                    {
                      uint64_t v32 = *v29;
                      v29 += 3;
                      if (v31 == v32) {
                        continue;
                      }
                    }
                    goto LABEL_57;
                  }
                  v22 += 3;
                  unint64_t v24 = v29 - 3;
                  if (v22 == (void *)v23) {
                    goto LABEL_41;
                  }
                }
LABEL_57:
                *(_DWORD *)(v11 + 72) = 0;
                *(_DWORD *)(v11 + 8) = 0;
                uint64_t v41 = *(void *)a1;
                uint64_t v42 = *(void *)(*(void *)a1 + 304);
                uint64_t v43 = *(void *)(*(void *)a1 + 248);
                uint64_t v44 = *(void *)a1 + 312;
                uint64_t v45 = *(void *)(v43 + 40);
                *(void *)uint64_t v42 = v43;
                *(void *)(v42 + 8) = v45;
                *(_OWORD *)(v42 + 16) = *(_OWORD *)(v41 + 288);
                *(void *)(v42 + 32) = v44;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v42);
                *(_DWORD *)(v42 + 184) = 0;
                llvm::LiveIntervalCalc::constructMainRangeFromSubranges(*(llvm::LiveIntervalCalc **)(v41 + 304), (llvm::LiveInterval *)v11);
                goto LABEL_4;
              }
            }
            else if (*(_DWORD *)(v19 + 8))
            {
              goto LABEL_57;
            }
LABEL_41:
            uint64_t v19 = *(void *)(v19 + 104);
            if (!v19) {
              goto LABEL_4;
            }
          }
        }
        unint64_t v46 = ((unint64_t)*v5 >> 8) & 0xFFF;
        if (v46) {
          uint64_t v47 = (uint64_t *)(*(void *)(*(void *)(a1 + 16) + 232) + 8 * v46);
        }
        else {
          uint64_t v47 = (uint64_t *)((*(void *)(*(void *)(*(void *)(a1 + 8) + 24) + 16 * v10) & 0xFFFFFFFFFFFFFFF8) + 24);
        }
        uint64_t v48 = *v47;
        while (1)
        {
          uint64_t v49 = *(void *)(v12 + 112);
          if ((v49 & v48) != 0) {
            break;
          }
LABEL_62:
          uint64_t v12 = *(void *)(v12 + 104);
          if (!v12) {
            goto LABEL_14;
          }
        }
        uint64_t v50 = *(void *)(a1 + 48);
        uint64_t v51 = *(unsigned int *)(a1 + 60);
        if (v50 == *(void *)(a1 + 40))
        {
          if (v51)
          {
            unsigned int v52 = 0;
            uint64_t v53 = 8 * v51;
            unsigned int v54 = *(uint64_t **)(a1 + 48);
            do
            {
              if (*v54 == v12) {
                goto LABEL_62;
              }
              if (*v54 == -2) {
                unsigned int v52 = v54;
              }
              ++v54;
              v53 -= 8;
            }
            while (v53);
            if (v52)
            {
              *unsigned int v52 = v12;
              --*(_DWORD *)(a1 + 64);
LABEL_74:
              if (*(_DWORD *)((*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 24))
                sub_1CC2F5FFC((uint64_t *)a1, v12, v9, v49);
              else {
                sub_1CC2F5AA8((uint64_t *)a1, v12);
              }
              goto LABEL_62;
            }
          }
          unsigned int v55 = *(_DWORD *)(a1 + 56);
          if (v51 < v55)
          {
            *(_DWORD *)(a1 + 60) = v51 + 1;
            *(void *)(v50 + 8 * v51) = v12;
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v55 = *(_DWORD *)(a1 + 56);
        }
        if (3 * v55 <= 4 * ((int)v51 - *(_DWORD *)(a1 + 64)))
        {
          if (v55 >= 0x40) {
            v55 *= 2;
          }
          else {
            unsigned int v55 = 128;
          }
        }
        else if (v55 - v51 >= v55 >> 3)
        {
LABEL_79:
          unsigned int v56 = v55 - 1;
          unsigned int v57 = (v55 - 1) & ((v12 >> 4) ^ (v12 >> 9));
          uint64_t v58 = (uint64_t *)(v50 + 8 * v57);
          uint64_t v59 = *v58;
          if (*v58 != -1)
          {
            uint64_t v60 = 0;
            int v61 = 1;
            while (v59 != v12)
            {
              if (v60) {
                BOOL v62 = 0;
              }
              else {
                BOOL v62 = v59 == -2;
              }
              if (v62) {
                uint64_t v60 = v58;
              }
              unsigned int v63 = v57 + v61++;
              unsigned int v57 = v63 & v56;
              uint64_t v58 = (uint64_t *)(v50 + 8 * (v63 & v56));
              uint64_t v59 = *v58;
              if (*v58 == -1) {
                goto LABEL_91;
              }
            }
            goto LABEL_62;
          }
          uint64_t v60 = 0;
LABEL_91:
          if (v60) {
            unsigned int v64 = v60;
          }
          else {
            unsigned int v64 = v58;
          }
          if (*v64 == v12) {
            goto LABEL_62;
          }
          if (*v64 == -2) {
            --*(_DWORD *)(a1 + 64);
          }
          else {
            ++*(_DWORD *)(a1 + 60);
          }
          uint64_t *v64 = v12;
          goto LABEL_74;
        }
        llvm::SmallPtrSetImplBase::Grow(v89, v55);
        unsigned int v55 = *(_DWORD *)(a1 + 56);
        uint64_t v50 = *(void *)(a1 + 48);
        goto LABEL_79;
      }
      uint64_t v66 = *(void *)(a1 + 16);
      if (v66) {
        unsigned int v67 = (void *)(v66 + 8);
      }
      else {
        unsigned int v67 = 0;
      }
      unint64_t v68 = *(unsigned int *)(*v67 + 24 * v9 + 16);
      unsigned int v69 = (_WORD *)(v67[6] + ((v68 >> 3) & 0x1FFFFFFE));
      unsigned __int16 v70 = *v69 + (v68 & 0xF) * v9;
      do
      {
        uint64_t v71 = sub_1CC2F5900(a1, v70);
        if (!v71) {
          goto LABEL_116;
        }
        uint64_t v73 = v71;
        uint64_t v74 = *(void *)(a1 + 48);
        uint64_t v75 = *(unsigned int *)(a1 + 60);
        if (v74 == *(void *)(a1 + 40))
        {
          if (v75)
          {
            uint64_t v76 = 0;
            uint64_t v77 = 8 * v75;
            unsigned int v78 = *(uint64_t **)(a1 + 48);
            do
            {
              if (*v78 == v71) {
                goto LABEL_116;
              }
              if (*v78 == -2) {
                uint64_t v76 = v78;
              }
              ++v78;
              v77 -= 8;
            }
            while (v77);
            if (v76)
            {
              *uint64_t v76 = v71;
              --*(_DWORD *)(a1 + 64);
LABEL_128:
              if (*(_DWORD *)((*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 24))
                sub_1CC2F5FFC((uint64_t *)a1, v73, v70, 0);
              else {
                sub_1CC2F5AA8((uint64_t *)a1, v73);
              }
              goto LABEL_116;
            }
          }
          unsigned int v79 = *(_DWORD *)(a1 + 56);
          if (v75 < v79)
          {
            *(_DWORD *)(a1 + 60) = v75 + 1;
            *(void *)(v74 + 8 * v75) = v71;
            goto LABEL_128;
          }
        }
        else
        {
          unsigned int v79 = *(_DWORD *)(a1 + 56);
        }
        if (3 * v79 <= 4 * ((int)v75 - *(_DWORD *)(a1 + 64)))
        {
          if (v79 >= 0x40) {
            v79 *= 2;
          }
          else {
            unsigned int v79 = 128;
          }
        }
        else if (v79 - v75 >= v79 >> 3)
        {
          goto LABEL_142;
        }
        llvm::SmallPtrSetImplBase::Grow(v89, v79);
        unsigned int v79 = *(_DWORD *)(a1 + 56);
        uint64_t v74 = *(void *)(a1 + 48);
LABEL_142:
        unsigned int v87 = v79 - 1;
        unsigned int v84 = (v79 - 1) & ((v73 >> 4) ^ (v73 >> 9));
        uint64_t v85 = (uint64_t *)(v74 + 8 * v84);
        uint64_t v86 = *v85;
        if (*v85 == -1)
        {
          uint64_t v81 = 0;
LABEL_156:
          if (v81) {
            uint64_t v88 = v81;
          }
          else {
            uint64_t v88 = v85;
          }
          if (*v88 != v73)
          {
            if (*v88 == -2) {
              --*(_DWORD *)(a1 + 64);
            }
            else {
              ++*(_DWORD *)(a1 + 60);
            }
            *uint64_t v88 = v73;
            goto LABEL_128;
          }
        }
        else
        {
          uint64_t v81 = 0;
          int v83 = 1;
          while (v86 != v73)
          {
            if (v81) {
              BOOL v80 = 0;
            }
            else {
              BOOL v80 = v86 == -2;
            }
            if (v80) {
              uint64_t v81 = v85;
            }
            unsigned int v82 = v84 + v83++;
            unsigned int v84 = v82 & v87;
            uint64_t v85 = (uint64_t *)(v74 + 8 * (v82 & v87));
            uint64_t v86 = *v85;
            if (*v85 == -1) {
              goto LABEL_156;
            }
          }
        }
LABEL_116:
        int v72 = (unsigned __int16)v69[1];
        ++v69;
        v70 += v72;
      }
      while (v72);
    }
LABEL_4:
    v4 |= v8;
    v5 += 8;
  }
  while (v5 != v6);
  if (v4)
  {
    sub_1CD51AFF0((void *)a1);
  }
}

void llvm::LiveIntervals::handleMoveIntoNewBundle(llvm::LiveIntervals *this, llvm::MachineInstr *a2, char a3)
{
  v87[16] = *MEMORY[0x1E4F143B8];
  uint64_t v85 = v87;
  uint64_t v86 = 0x1000000000;
  unint64_t v6 = sub_1CB914C88(*((void *)this + 36), (uint64_t)a2, 0);
  unsigned int v7 = a2;
  if ((*((_WORD *)a2 + 22) & 8) != 0)
  {
    unsigned int v7 = a2;
    do
      unsigned int v7 = (llvm::MachineInstr *)*((void *)v7 + 1);
    while ((*((_WORD *)v7 + 22) & 8) != 0);
  }
  uint64_t v8 = *((void *)v7 + 1);
  uint64_t v9 = *((void *)a2 + 1);
  if (v9 != v8)
  {
    while (1)
    {
      uint64_t v10 = *((void *)this + 36);
      uint64_t v11 = *(void *)(v10 + 368);
      uint64_t v12 = *(unsigned int *)(v10 + 384);
      unsigned int v13 = (v9 >> 4) ^ (v9 >> 9);
      unsigned int v14 = v12 - 1;
      LODWORD(v15) = (v12 - 1) & v13;
      uint64_t v16 = (uint64_t *)(v11 + 16 * v15);
      while (1)
      {
        while (!v12)
          ;
        uint64_t v17 = *v16;
        if (v9 == *v16) {
          break;
        }
        int v18 = 1;
        uint64_t v19 = *v16;
        unsigned int v20 = v14 & v13;
        while (v19 != -4096)
        {
          unsigned int v21 = v20 + v18++;
          unsigned int v20 = v21 & v14;
          uint64_t v19 = *(void *)(v11 + 16 * v20);
          if (v9 == v19)
          {
            int v22 = 1;
            while (v17 != -4096)
            {
              int v23 = v15 + v22++;
              uint64_t v15 = v23 & v14;
              uint64_t v17 = *(void *)(v11 + 16 * v15);
              if (v9 == v17)
              {
                uint64_t v16 = (uint64_t *)(v11 + 16 * v15);
                goto LABEL_16;
              }
            }
            uint64_t v16 = (uint64_t *)(v11 + 16 * v12);
            goto LABEL_16;
          }
        }
      }
LABEL_16:
      if (v86 >= (unint64_t)HIDWORD(v86)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v85 + v86) = v16[1];
      unsigned int v24 = v86 + 1;
      LODWORD(v86) = v86 + 1;
      uint64_t v25 = (int32x2_t *)*((void *)this + 36);
      int32x2_t v26 = v25[46];
      uint64_t v27 = v25[48].u32[0];
      if (!v27) {
        goto LABEL_23;
      }
      LODWORD(v28) = (v27 - 1) & v13;
      int v29 = (uint64_t *)(*(void *)&v26 + 16 * v28);
      uint64_t v30 = *v29;
      if (*v29 != v9) {
        break;
      }
LABEL_24:
      if (v29 != (uint64_t *)(*(void *)&v26 + 16 * v27))
      {
        unint64_t v33 = v29[1] & 0xFFFFFFFFFFFFFFF8;
        *int v29 = -8192;
        v25[47] = vadd_s32(v25[47], (int32x2_t)0x1FFFFFFFFLL);
        *(void *)(v33 + 16) = 0;
      }
      uint64_t v9 = *(void *)(v9 + 8);
      if (v9 == v8) {
        goto LABEL_30;
      }
    }
    int v31 = 1;
    while (v30 != -4096)
    {
      int v32 = v28 + v31++;
      uint64_t v28 = v32 & (v27 - 1);
      uint64_t v30 = *(void *)(*(void *)&v26 + 16 * v28);
      if (v30 == v9)
      {
        int v29 = (uint64_t *)(*(void *)&v26 + 16 * v28);
        goto LABEL_24;
      }
    }
LABEL_23:
    int v29 = (uint64_t *)(*(void *)&v26 + 16 * v27);
    goto LABEL_24;
  }
  unsigned int v24 = v86;
LABEL_30:
  if (v24)
  {
    unsigned int v34 = (uint64_t *)v85;
    uint64_t v35 = 8 * v24;
    do
    {
      uint64_t v36 = *v34;
      uint64_t v76 = this;
      long long v77 = *((_OWORD *)this + 16);
      uint64_t v78 = v36;
      unint64_t v79 = v6;
      BOOL v80 = v84;
      uint64_t v81 = v84;
      uint64_t v82 = 8;
      int v83 = 0;
      v84[64] = a3;
      sub_1CC2F4468((uint64_t)&v76, (uint64_t)a2);
      if (v81 != v80) {
        free(v81);
      }
      ++v34;
      v35 -= 8;
    }
    while (v35);
  }
  __int16 v37 = *((_WORD *)a2 + 22);
  int v38 = a2;
  if ((v37 & 4) != 0)
  {
    int v38 = a2;
    do
      int v38 = (llvm::MachineInstr *)(*(void *)v38 & 0xFFFFFFFFFFFFFFF8);
    while ((*((_WORD *)v38 + 22) & 4) != 0);
  }
  uint64_t v39 = *((void *)this + 36);
  unsigned int v40 = a2;
  if ((v37 & 8) != 0)
  {
    unsigned int v40 = a2;
    do
      unsigned int v40 = (llvm::MachineInstr *)*((void *)v40 + 1);
    while ((*((_WORD *)v40 + 22) & 8) != 0);
  }
  uint64_t v41 = (llvm::MachineInstr *)*((void *)v40 + 1);
  if (v38 != v41)
  {
    while (1)
    {
      unsigned int v42 = **((unsigned __int16 **)v38 + 2);
      BOOL v43 = v42 > 0x17;
      int v44 = (1 << v42) & 0x83E000;
      if (v43 || v44 == 0) {
        break;
      }
      int v38 = (llvm::MachineInstr *)*((void *)v38 + 1);
      if (v38 == v41)
      {
        int v38 = (llvm::MachineInstr *)*((void *)v40 + 1);
        break;
      }
    }
  }
  uint64_t v46 = *(void *)(v39 + 368);
  uint64_t v47 = *(unsigned int *)(v39 + 384);
  if (v47)
  {
    LODWORD(v48) = ((v38 >> 4) ^ (v38 >> 9)) & (v47 - 1);
    uint64_t v49 = (llvm::MachineInstr **)(v46 + 16 * v48);
    uint64_t v50 = *v49;
    if (v38 == *v49) {
      goto LABEL_51;
    }
    int v51 = 1;
    while (v50 != (llvm::MachineInstr *)-4096)
    {
      int v52 = v48 + v51++;
      uint64_t v48 = v52 & (v47 - 1);
      uint64_t v50 = *(llvm::MachineInstr **)(v46 + 16 * v48);
      if (v38 == v50)
      {
        uint64_t v49 = (llvm::MachineInstr **)(v46 + 16 * v48);
        goto LABEL_51;
      }
    }
  }
  uint64_t v49 = (llvm::MachineInstr **)(v46 + 16 * v47);
LABEL_51:
  uint64_t v53 = *((unsigned int *)a2 + 10);
  if (v53)
  {
    uint64_t v54 = 0;
    unint64_t v55 = (unint64_t)v49[1] & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      unsigned int v56 = (int *)(*((void *)a2 + 4) + 32 * v54);
      int v57 = *v56;
      if (*v56) {
        goto LABEL_79;
      }
      int v58 = v56[1];
      if ((v58 & 0x80000000) == 0) {
        goto LABEL_79;
      }
      uint64_t v59 = v58 & 0x7FFFFFFF;
      if (v59 >= *((_DWORD *)this + 104)) {
        goto LABEL_79;
      }
      if ((v57 & 0x10000000) != 0) {
        goto LABEL_79;
      }
      uint64_t v60 = *(void *)(*((void *)this + 51) + 8 * v59);
      if (!v60) {
        goto LABEL_79;
      }
      unint64_t v61 = *(unsigned int *)(v60 + 8);
      BOOL v62 = *(void **)v60;
      if (!v61) {
        break;
      }
      uint64_t v63 = v62[3 * v61 - 2];
      unsigned int v64 = *(_DWORD *)(v55 + 24);
      unsigned int v65 = (v63 >> 1) & 3 | *(_DWORD *)((v63 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v66 = v62;
      unint64_t v67 = v61;
      if (v64 >= v65) {
        goto LABEL_68;
      }
      do
      {
        unint64_t v68 = v67 >> 1;
        uint64_t v69 = v66[3 * (v67 >> 1) + 1];
        LODWORD(v69) = (v69 >> 1) & 3 | *(_DWORD *)((v69 & 0xFFFFFFFFFFFFFFF8) + 24);
        v67 -= (v67 >> 1) + 1;
        BOOL v70 = v64 >= v69;
        if (v64 >= v69) {
          unint64_t v71 = v68 + 1;
        }
        else {
          unint64_t v71 = 0;
        }
        v66 += 3 * v71;
        if (!v70) {
          unint64_t v67 = v68;
        }
      }
      while (v67);
LABEL_69:
      int v72 = &v62[3 * v61];
      if (v66 != v72)
      {
        unsigned int v73 = *(_DWORD *)((*v66 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v74 = *(_DWORD *)(v55 + 24);
        if (((*v66 >> 1) & 3 | v73) > v74)
        {
          LOBYTE(v75) = 0;
          goto LABEL_75;
        }
        uint64_t v75 = v66[1];
        if (v55 == (v75 & 0xFFFFFFFFFFFFFFF8))
        {
          v66 += 3;
          if (v66 != v72)
          {
            unsigned int v73 = *(_DWORD *)((*v66 & 0xFFFFFFFFFFFFFFF8) + 24);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_75:
          if (v74 >= v73) {
            uint64_t v75 = v66[1];
          }
        }
        if ((~(_BYTE)v75 & 6) == 0) {
          *unsigned int v56 = v57 | 0x4000000;
        }
      }
LABEL_79:
      if (++v54 == v53) {
        goto LABEL_80;
      }
    }
    LODWORD(v61) = 0;
LABEL_68:
    uint64_t v66 = &v62[3 * v61];
    goto LABEL_69;
  }
LABEL_80:
  if (v85 != v87) {
    free(v85);
  }
}

void llvm::LiveIntervals::removeVRegDefAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)a2;
  if (v5)
  {
    uint64_t v7 = *(void *)(v6 + 24 * v5 - 16);
    unsigned int v8 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
    if (v8 < ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      uint64_t v9 = *(void **)a2;
      unint64_t v10 = *(unsigned int *)(a2 + 8);
      do
      {
        unint64_t v11 = v10 >> 1;
        uint64_t v12 = v9[3 * (v10 >> 1) + 1];
        LODWORD(v12) = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
        v10 -= (v10 >> 1) + 1;
        BOOL v13 = v8 >= v12;
        if (v8 >= v12) {
          unint64_t v14 = v11 + 1;
        }
        else {
          unint64_t v14 = 0;
        }
        v9 += 3 * v14;
        if (!v13) {
          unint64_t v10 = v11;
        }
      }
      while (v10);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v9 = (void *)(v6 + 24 * v5);
LABEL_10:
  if (v9 != (void *)(v6 + 24 * v5)
    && ((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3))
  {
    uint64_t v15 = v9[2];
    if (v15) {
      llvm::LiveRange::removeValNo((uint64_t *)a2, v15);
    }
  }
  uint64_t v18 = *(void *)(a2 + 104);
  uint64_t v16 = (uint64_t *)(a2 + 104);
  uint64_t v17 = v18;
  if (!v18) {
    return;
  }
  unint64_t v19 = a3 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v20 = (a3 >> 1) & 3;
  do
  {
    unsigned int v21 = *(_DWORD *)(v17 + 8);
    uint64_t v22 = *(void *)v17;
    if (!v21)
    {
      unsigned int v21 = 0;
LABEL_32:
      int32x2_t v26 = (void *)(v22 + 24 * v21);
      goto LABEL_25;
    }
    uint64_t v23 = *(void *)(v22 + 24 * v21 - 16);
    unsigned int v24 = *(_DWORD *)(v19 + 24) | v20;
    unsigned int v25 = (v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24);
    int32x2_t v26 = *(void **)v17;
    unint64_t v27 = *(unsigned int *)(v17 + 8);
    if (v24 >= v25) {
      goto LABEL_32;
    }
    do
    {
      unint64_t v28 = v27 >> 1;
      uint64_t v29 = v26[3 * (v27 >> 1) + 1];
      LODWORD(v29) = (v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24);
      v27 -= (v27 >> 1) + 1;
      BOOL v30 = v24 >= v29;
      if (v24 >= v29) {
        unint64_t v31 = v28 + 1;
      }
      else {
        unint64_t v31 = 0;
      }
      v26 += 3 * v31;
      if (!v30) {
        unint64_t v27 = v28;
      }
    }
    while (v27);
LABEL_25:
    if (v26 != (void *)(v22 + 24 * v21)
      && ((*v26 >> 1) & 3 | *(_DWORD *)((*v26 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v19 + 24) | v20))
    {
      uint64_t v32 = v26[2];
      if (v32)
      {
        if ((*(void *)(v32 + 8) ^ a3) <= 7) {
          llvm::LiveRange::removeValNo((uint64_t *)v17, v32);
        }
      }
    }
    uint64_t v17 = *(void *)(v17 + 104);
  }
  while (v17);
  uint64_t v33 = *v16;
  if (*v16)
  {
    while (1)
    {
      uint64_t v34 = v33;
      if (!*(_DWORD *)(v33 + 8)) {
        break;
      }
LABEL_35:
      uint64_t v16 = (uint64_t *)(v33 + 104);
      uint64_t v33 = *(void *)(v33 + 104);
      if (!v33) {
        return;
      }
    }
    while (1)
    {
      uint64_t v35 = *(void *)(v34 + 96);
      uint64_t v33 = *(void *)(v34 + 104);
      *(void *)(v34 + 96) = 0;
      if (v35)
      {
        sub_1CB833A08(v35, *(void **)(v35 + 8));
        MEMORY[0x1D25D9CE0](v35, 0x1020C4062D53EE8);
      }
      uint64_t v36 = *(void **)(v34 + 64);
      if (v36 != (void *)(v34 + 80)) {
        free(v36);
      }
      if (*(void *)v34 != v34 + 16) {
        free(*(void **)v34);
      }
      if (!v33) {
        break;
      }
      uint64_t v34 = v33;
      if (*(_DWORD *)(v33 + 8))
      {
        uint64_t *v16 = v33;
        goto LABEL_35;
      }
    }
    uint64_t *v16 = 0;
  }
}

void llvm::LiveIntervals::constructMainRangeFromSubranges(llvm::LiveIntervals *this, llvm::LiveInterval *a2)
{
  uint64_t v4 = *((void *)this + 38);
  uint64_t v5 = *((void *)this + 31);
  *(void *)uint64_t v4 = v5;
  *(void *)(v4 + 8) = *(void *)(v5 + 40);
  *(_OWORD *)(v4 + 16) = *((_OWORD *)this + 18);
  *(void *)(v4 + 32) = (char *)this + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v4);
  *(_DWORD *)(v4 + 184) = 0;
  uint64_t v6 = (llvm::LiveRangeCalc *)*((void *)this + 38);
  uint64_t v7 = *((void *)a2 + 13);
  if (v7)
  {
    uint64_t v8 = *((void *)v6 + 4);
    do
    {
      uint64_t v9 = *(unsigned int *)(v7 + 72);
      if (v9)
      {
        uint64_t v10 = *(void *)(v7 + 64);
        uint64_t v11 = 8 * v9;
        do
        {
          unint64_t v12 = *(void *)(*(void *)v10 + 8);
          if (v12 >= 8 && (*(void *)(*(void *)v10 + 8) & 6) != 0)
          {
            if (*((void *)a2 + 12))
            {
              uint64_t v15 = (unint64_t *)a2;
              sub_1CC2F6AE4((uint64_t *)&v15, v12, v8, 0);
            }
            else
            {
              uint64_t v15 = (unint64_t *)a2;
              sub_1CC2F6F18(&v15, v12, v8, 0);
            }
          }
          v10 += 8;
          v11 -= 8;
        }
        while (v11);
      }
      uint64_t v7 = *(void *)(v7 + 104);
    }
    while (v7);
  }
  llvm::LiveRangeCalc::resetLiveOutMap(v6);
  uint64_t v14 = *((unsigned int *)a2 + 28);

  llvm::LiveIntervalCalc::extendToUses(v6, (uint64_t)a2, v14, -1, (uint64_t)a2);
}

uint64_t llvm::LiveIntervals::getLiveSubranges(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a2 + 104);
  if (v4)
  {
    uint64_t result = 0;
    unint64_t v6 = *a4 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v7 = (*a4 >> 1) & 3;
    while (1)
    {
      unsigned int v8 = *(_DWORD *)(v4 + 8);
      uint64_t v9 = *(void **)v4;
      if (v8)
      {
        uint64_t v10 = v9[3 * v8 - 2];
        unsigned int v11 = *(_DWORD *)(v6 + 24) | v7;
        unsigned int v12 = (v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24);
        BOOL v13 = *(void **)v4;
        unint64_t v14 = *(unsigned int *)(v4 + 8);
        if (v11 < v12)
        {
          do
          {
            unint64_t v15 = v14 >> 1;
            uint64_t v16 = v13[3 * (v14 >> 1) + 1];
            LODWORD(v16) = (v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24);
            v14 -= (v14 >> 1) + 1;
            BOOL v17 = v11 >= v16;
            if (v11 >= v16) {
              unint64_t v18 = v15 + 1;
            }
            else {
              unint64_t v18 = 0;
            }
            v13 += 3 * v18;
            if (!v17) {
              unint64_t v14 = v15;
            }
          }
          while (v14);
          goto LABEL_12;
        }
      }
      else
      {
        unsigned int v8 = 0;
      }
      BOOL v13 = &v9[3 * v8];
LABEL_12:
      if (v13 != &v9[3 * v8]
        && ((*v13 >> 1) & 3 | *(_DWORD *)((*v13 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v6 + 24) | v7))
      {
        result |= *(void *)(v4 + 112);
      }
      uint64_t v4 = *(void *)(v4 + 104);
      if (!v4) {
        return result;
      }
    }
  }
  return *(void *)((*(void *)(*(void *)(a3 + 24) + 16 * (*(_DWORD *)(a2 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                   + 24);
}

uint64_t sub_1CC2F56BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2 != (void *)(a1 + 192)) {
    free(v2);
  }
  unsigned int v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 152)) {
    free(v3);
  }
  unsigned int v4 = *(_DWORD *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 112);
  if (v4)
  {
    uint64_t v8 = 152 * v4;
    uint64_t v9 = (void *)(v5 + 96);
    do
    {
      uint64_t v10 = *(v9 - 12);
      if (v10 != -4096 && v10 != -8192)
      {
        unsigned int v11 = (void *)*(v9 - 2);
        if (v9 != v11) {
          free(v11);
        }
        unsigned int v12 = (char *)*(v9 - 11);
        if (v9 - 9 != (void *)v12) {
          free(v12);
        }
      }
      v9 += 19;
      v8 -= 152;
    }
    while (v8);
    uint64_t v5 = *(void *)(a1 + 112);
  }
  MEMORY[0x1D25D9CD0](v5, 8);
  unint64_t v6 = *(void **)(a1 + 40);
  if (v6 != (void *)(a1 + 56)) {
    free(v6);
  }
  return a1;
}

void *sub_1CC2F57A4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v3 = *(void **)a1;
  if (!v2)
  {
    LODWORD(v2) = 0;
    goto LABEL_14;
  }
  uint64_t v4 = v3[3 * v2 - 2];
  unsigned int v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  if (v5 >= ((v4 >> 1) & 3 | *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_14:
    uint64_t result = &v3[3 * v2];
    goto LABEL_10;
  }
  uint64_t result = *(void **)a1;
  unint64_t v7 = v2;
  do
  {
    unint64_t v8 = v7 >> 1;
    uint64_t v9 = result[3 * (v7 >> 1) + 1];
    LODWORD(v9) = (v9 >> 1) & 3 | *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24);
    v7 -= (v7 >> 1) + 1;
    BOOL v10 = v5 >= v9;
    if (v5 >= v9) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = 0;
    }
    result += 3 * v11;
    if (!v10) {
      unint64_t v7 = v8;
    }
  }
  while (v7);
LABEL_10:
  unsigned int v12 = &v3[3 * v2];
  if (result == v12
    || ((*result >> 1) & 3 | *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
  {
    return v12;
  }
  return result;
}

uint64_t sub_1CC2F5880(uint64_t result, unsigned int *a2, unsigned int a3)
{
  unsigned int v3 = (*(_DWORD *)(result + 64) + 31) >> 5;
  if (v3 >= a3) {
    unsigned int v3 = a3;
  }
  if (v3 < 2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = ((v3 - 2) >> 1) + 1;
    uint64_t v6 = v5;
    do
    {
      int v7 = *a2;
      unsigned int v8 = a2[1];
      a2 += 2;
      *v4++ &= (*(void *)&v7 | 0xFFFFFFFF00000000) & ~((unint64_t)~v8 << 32);
      --v6;
    }
    while (v6);
    v3 &= 1u;
  }
  if (v3) {
    *(void *)(*(void *)result + 8 * v5) &= *a2 | 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t sub_1CC2F5900(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 136))
  {
    uint64_t v8 = a2;
    return *(void *)(*(void *)(*(void *)a1 + 680) + 8 * v8);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*v4 + 16) + 176))(*(void *)(*v4 + 16));
  if (v5) {
    uint64_t v6 = (uint64_t *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v6[5];
  uint64_t v8 = a2;
  uint64_t v9 = 4 * a2;
  unsigned int v10 = *(unsigned __int16 *)(v7 + v9);
  if (*(_WORD *)(v7 + v9))
  {
    uint64_t v11 = v6[6];
    if (v11)
    {
      uint64_t v12 = *v6;
      unsigned int v13 = *(unsigned __int16 *)(v7 + 4 * a2 + 2);
      do
      {
        unsigned int v14 = v10;
        unsigned int v15 = (unsigned __int16)v10;
        unsigned int v10 = v13;
        uint64_t v16 = (unsigned __int16 *)(v11 + 2 * *(unsigned int *)(v12 + 24 * v15 + 8));
        while (((*(void *)(v4[44] + ((v14 >> 3) & 0x1FF8)) >> v14) & 1) != 0)
        {
          int v17 = *v16++;
          v14 += v17;
          if (!v17) {
            return *(void *)(*(void *)(*(void *)a1 + 680) + 8 * v8);
          }
        }
        unsigned int v13 = 0;
      }
      while ((_WORD)v10);
      goto LABEL_13;
    }
    return *(void *)(*(void *)(*(void *)a1 + 680) + 8 * v8);
  }
LABEL_13:
  uint64_t v18 = *(void *)(*(void *)(*(void *)a1 + 680) + 8 * a2);
  if (!v18) {
    operator new();
  }
  return v18;
}

uint64_t *sub_1CC2F5AA8(uint64_t *result, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 8);
  if (v2)
  {
    unsigned int v3 = result;
    uint64_t result = *(uint64_t **)a2;
    uint64_t v4 = *(void *)a2 + 24 * v2;
    unint64_t v5 = v3[3] & 0xFFFFFFFFFFFFFFF8;
    unsigned int v6 = *(_DWORD *)(v5 + 24);
    if (v6 < ((*(void *)(v4 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v4 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 24)))
    {
      do
      {
        uint64_t v7 = result;
        unint64_t v8 = v2 >> 1;
        uint64_t v9 = result[3 * (v2 >> 1) + 1];
        LODWORD(v9) = (v9 >> 1) & 3 | *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24);
        v2 -= (v2 >> 1) + 1;
        BOOL v10 = v6 >= v9;
        if (v6 >= v9) {
          unint64_t v11 = v8 + 1;
        }
        else {
          unint64_t v11 = 0;
        }
        result += 3 * v11;
        if (!v10) {
          unint64_t v2 = v8;
        }
      }
      while (v2);
      if (result != (uint64_t *)v4)
      {
        uint64_t v12 = *result;
        unsigned int v13 = *(_DWORD *)(v5 + 24);
        unsigned int v14 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v13 >= v14)
        {
          if (v14 >= v13)
          {
LABEL_22:
            unint64_t v24 = v3[4] & 0xFFFFFFFFFFFFFFF8;
            uint64_t v25 = 4;
            if ((v12 & 6) == 2) {
              uint64_t v25 = 2;
            }
            unint64_t v26 = v24 | v25;
            uint64_t v27 = result[1];
            uint64_t v28 = result[2];
            unsigned int v29 = *(_DWORD *)(v24 + 24);
            unsigned int v30 = *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v29 >= v30)
            {
              int v44 = (uint64_t *)(*(void *)a2 + 24 * *(unsigned int *)(a2 + 8));
              if ((v29 | 2) < ((*(v44 - 2) >> 1) & 3 | *(_DWORD *)((*(v44 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                + 24)))
              {
                int v44 = result - 3;
                do
                {
                  unsigned int v45 = (v44[4] >> 1) & 3 | *(_DWORD *)((v44[4] & 0xFFFFFFFFFFFFFFF8) + 24);
                  v44 += 3;
                }
                while (v45 <= (v29 | 2));
              }
              if ((~(_BYTE)v27 & 6) != 0 && v30 < v29)
              {
                if (result == *(uint64_t **)a2
                  || (uint64_t v46 = result - 2,
                      *(_DWORD *)((*(result - 2) & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24)))
                {
                  result[3] = v27;
                  uint64_t v46 = (uint64_t *)(result[5] + 8);
                }
                *uint64_t v46 = v27;
                if (v44 == (uint64_t *)v4)
                {
                  uint64_t v52 = v4;
                  if ((uint64_t *)v4 != result + 3) {
                    uint64_t result = (uint64_t *)memmove(result, result + 3, v4 - (void)(result + 3));
                  }
                  *(void *)(v52 - 24) = v26;
                  *(void *)(v52 - 16) = v24 | 6;
                  *(void *)(v52 - 8) = v28;
                  *(void *)(v28 + 8) = v26;
                  *(void *)(v52 - 40) = v26;
                }
                else
                {
                  if (v44 != result)
                  {
                    uint64_t result = (uint64_t *)memmove(result, result + 3, (char *)v44 - (char *)result);
                    unsigned int v29 = *(_DWORD *)(v24 + 24);
                  }
                  if (*(_DWORD *)((*(v44 - 3) & 0xFFFFFFFFFFFFFFF8) + 24) >= v29)
                  {
                    uint64_t v53 = *v44;
                    *(v44 - 3) = v26;
                    *(v44 - 2) = v53;
                    *(v44 - 1) = v28;
                    *(void *)(v28 + 8) = v26;
                  }
                  else
                  {
                    uint64_t v47 = *(v44 - 2);
                    uint64_t v48 = *(v44 - 1);
                    *int v44 = v26;
                    v44[1] = v47;
                    v44[2] = v48;
                    *(void *)(v48 + 8) = v26;
                    *(v44 - 2) = v26;
                    *(v44 - 1) = v28;
                    *(void *)(v28 + 8) = *(v44 - 3);
                  }
                }
              }
              else if (v44 == (uint64_t *)v4 || (*v44 & 0xFFFFFFFFFFFFFFF8) != v24)
              {
                if (v44 != result + 3) {
                  uint64_t result = (uint64_t *)memmove(result, result + 3, (char *)v44 - (char *)(result + 3));
                }
                *(void *)(v28 + 8) = v26;
                *(v44 - 3) = v26;
                *(v44 - 2) = v24 | 6;
                *(v44 - 1) = v28;
              }
              else
              {
                return llvm::LiveRange::removeValNo((uint64_t *)a2, v28);
              }
            }
            else
            {
              *(void *)(v28 + 8) = v26;
              *uint64_t result = v26;
            }
            return result;
          }
          unsigned int v15 = &v7[3 * v11];
          unint64_t v18 = v15[1];
          uint64_t v16 = (unint64_t *)(v15 + 1);
          unint64_t v17 = v18;
          unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((v3[4] & 0xFFFFFFFFFFFFFFF8) + 24)) {
            return result;
          }
          if (v17 >= 8)
          {
            unint64_t v20 = *(void *)(v19 + 16);
            if (v20)
            {
              unint64_t v31 = *(void *)(v19 + 16);
              if ((*(_WORD *)(v20 + 44) & 4) != 0)
              {
                unint64_t v31 = v20;
                do
                  unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v31 + 44) & 4) != 0);
              }
              uint64_t v32 = *(void *)(v20 + 24);
              unint64_t v33 = v32 + 48;
              uint64_t v34 = *(_DWORD **)(v31 + 32);
              uint64_t v35 = *(unsigned int *)(v31 + 40);
              uint64_t v36 = &v34[8 * v35];
              if (!v35)
              {
                unint64_t v49 = *(void *)(v31 + 8);
                if (v49 == v33)
                {
                  unint64_t v31 = v32 + 48;
                }
                else
                {
                  unint64_t v31 = v32 + 48;
                  if ((*(_WORD *)(v49 + 44) & 4) != 0)
                  {
                    do
                    {
                      unint64_t v54 = v49;
                      uint64_t v55 = *(unsigned int *)(v49 + 40);
                      if (v55)
                      {
                        unint64_t v31 = v49;
                        goto LABEL_92;
                      }
                      unint64_t v49 = *(void *)(v49 + 8);
                    }
                    while (v49 != v33 && (*(_WORD *)(v49 + 44) & 4) != 0);
                    unint64_t v31 = v32 + 48;
LABEL_92:
                    uint64_t v34 = *(_DWORD **)(v54 + 32);
                    uint64_t v36 = &v34[8 * v55];
                  }
                }
              }
              uint64_t v37 = *(void *)(*(void *)(v32 + 56) + 32) + 32 * *(unsigned int *)(*(void *)(v32 + 56) + 40);
              while (v31 != v33 || v34 != (_DWORD *)v37 && v34 != v36)
              {
                if ((*v34 & 0x10000FF) == 0) {
                  *v34 &= ~0x4000000u;
                }
                v34 += 8;
                if (v34 == v36)
                {
                  unint64_t v38 = *(void *)(v31 + 8);
                  unint64_t v31 = v33;
                  uint64_t v34 = v36;
                  if (v38 != v33)
                  {
                    unint64_t v31 = v33;
                    uint64_t v34 = v36;
                    if ((*(_WORD *)(v38 + 44) & 4) != 0)
                    {
                      while (1)
                      {
                        unint64_t v50 = v38;
                        uint64_t v51 = *(unsigned int *)(v38 + 40);
                        if (v51) {
                          break;
                        }
                        unint64_t v38 = *(void *)(v38 + 8);
                        if (v38 == v33 || (*(_WORD *)(v38 + 44) & 4) == 0)
                        {
                          unint64_t v31 = v33;
                          goto LABEL_83;
                        }
                      }
                      unint64_t v31 = v38;
LABEL_83:
                      uint64_t v34 = *(_DWORD **)(v50 + 32);
                      uint64_t v36 = &v34[8 * v51];
                    }
                  }
                }
              }
              unint64_t v5 = v3[3] & 0xFFFFFFFFFFFFFFF8;
            }
          }
          result += 3;
          if (result == (uint64_t *)v4)
          {
            uint64_t v21 = v3[4];
          }
          else
          {
            uint64_t v39 = *result;
            unint64_t v40 = *result & 0xFFFFFFFFFFFFFFF8;
            uint64_t v21 = v3[4];
            if (v5 != v40)
            {
              unsigned int v41 = *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
              if (*(_DWORD *)(v40 + 24) < v41)
              {
                unsigned int v42 = (uint64_t *)(*(void *)a2 + 24 * *(unsigned int *)(a2 + 8));
                if (v41 < ((*(v42 - 2) >> 1) & 3 | *(_DWORD *)((*(v42 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
                {
                  unsigned int v42 = &v7[3 * v11];
                  do
                  {
                    unsigned int v43 = (v42[4] >> 1) & 3 | *(_DWORD *)((v42[4] & 0xFFFFFFFFFFFFFFF8) + 24);
                    v42 += 3;
                  }
                  while (v43 <= v41);
                }
                if (v42 == (uint64_t *)v4 || *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFFFF8) + 24) >= v41)
                {
                  *(v42 - 2) = v21 & 0xFFFFFFFFFFFFFFF8 | 4;
                  uint64_t v39 = *result;
                }
                unint64_t *v16 = v39;
                return result;
              }
            }
          }
          unint64_t v22 = *v16;
          uint64_t v23 = *v16 & 6;
          if (v23 != 2) {
            uint64_t v23 = 4;
          }
          unint64_t *v16 = v23 | v21 & 0xFFFFFFFFFFFFFFF8;
          if (result != (uint64_t *)v4 && v5 == (v22 & 0xFFFFFFFFFFFFFFF8))
          {
            uint64_t v12 = *result;
            if ((v3[3] & 0xFFFFFFFFFFFFFFF8) == (*result & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_22;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CC2F5FFC(uint64_t *result, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  if (!v4) {
    return result;
  }
  unint64_t v5 = *(char **)a2;
  uint64_t v6 = *(void *)a2 + 24 * v4;
  unint64_t v7 = result[3];
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v9 = *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v9 >= ((*(void *)(v6 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v6 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 24)))
    return result;
  BOOL v10 = *(char **)a2;
  unint64_t v11 = *(unsigned int *)(a2 + 8);
  do
  {
    uint64_t v12 = v10;
    unint64_t v13 = v11 >> 1;
    uint64_t v14 = *(void *)&v10[24 * (v11 >> 1) + 8];
    LODWORD(v14) = (v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
    v11 -= (v11 >> 1) + 1;
    BOOL v15 = v9 >= v14;
    if (v9 >= v14) {
      unint64_t v16 = v13 + 1;
    }
    else {
      unint64_t v16 = 0;
    }
    BOOL v10 = &v12[24 * v16];
    if (!v15) {
      unint64_t v11 = v13;
    }
  }
  while (v11);
  if (v10 == (char *)v6) {
    return result;
  }
  uint64_t v17 = *(void *)v10;
  unsigned int v18 = *(_DWORD *)(v8 + 24);
  unint64_t v19 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v20 = *(_DWORD *)(v19 + 24);
  if (v18 < v20) {
    return result;
  }
  if (v20 >= v18)
  {
    uint64_t v21 = &v12[24 * v16];
    if (v10 == v5) {
      BOOL v10 = (char *)(*(void *)a2 + 24 * v4);
    }
    else {
      v10 -= 24;
    }
LABEL_16:
    uint64_t v22 = *((void *)v21 + 2);
    uint64_t v23 = v17 & 6;
    unint64_t v24 = result[4] & 0xFFFFFFFFFFFFFFF8;
    if (v23 != 2) {
      uint64_t v23 = 4;
    }
    if (v4)
    {
      unint64_t v25 = v4;
      uint64_t v26 = *(void *)&v5[24 * v4 - 16];
      unsigned int v27 = *(_DWORD *)(v24 + 24) | 2;
      if (v27 < ((v26 >> 1) & 3 | *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        uint64_t v28 = v5;
        do
        {
          unint64_t v29 = v25 >> 1;
          uint64_t v30 = *(void *)&v28[24 * (v25 >> 1) + 8];
          LODWORD(v30) = (v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24);
          v25 -= (v25 >> 1) + 1;
          BOOL v31 = v27 >= v30;
          if (v27 >= v30) {
            unint64_t v32 = v29 + 1;
          }
          else {
            unint64_t v32 = 0;
          }
          v28 += 24 * v32;
          if (!v31) {
            unint64_t v25 = v29;
          }
        }
        while (v25);
        goto LABEL_27;
      }
    }
    else
    {
      LODWORD(v25) = 0;
    }
    uint64_t v28 = &v5[24 * v25];
LABEL_27:
    uint64_t v33 = *((void *)v21 + 1) & 6;
    unint64_t v34 = v24 | v23;
    unint64_t v35 = *(void *)v28 & 0xFFFFFFFFFFFFFFF8;
    if (v24 == v35)
    {
      BOOL v70 = (uint64_t *)a2;
      if (v33 == 6)
      {
        uint64_t v71 = *((void *)v21 + 2);
      }
      else
      {
        *(void *)(v22 + 8) = v34;
        *(void *)uint64_t v21 = v34;
        uint64_t v71 = *((void *)v28 + 2);
      }
      return llvm::LiveRange::removeValNo(v70, v71);
    }
    if (v33 != 6)
    {
      if (v10 != (char *)v6)
      {
        uint64_t v36 = *(void *)v10;
        unsigned int v37 = *(_DWORD *)(v24 + 24);
        unsigned int v38 = *(_DWORD *)((*(void *)v10 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v37 < v38)
        {
          int v72 = result;
          uint64_t v73 = *((void *)v28 + 4);
          if (v10 != v5 && v37 < *(_DWORD *)((*((void *)v10 - 2) & 0xFFFFFFFFFFFFFFF8) + 24))
          {
            if (((*((void *)v28 + 3) >> 1) & 3 | *(_DWORD *)((*((void *)v28 + 3) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 24)) >= ((v36 >> 1) & 3 | v38))
              uint64_t v73 = *(void *)v10;
            else {
              uint64_t v73 = *((void *)v28 + 3);
            }
          }
          uint64_t v74 = *((void *)v10 + 2);
          *(void *)(v22 + 8) = v36;
          *(void *)uint64_t v21 = *(void *)v10;
          if (v10 != v28) {
            uint64_t result = (uint64_t *)memmove(&v21[-(v10 - v28)], v28, v10 - v28);
          }
          uint64_t v75 = *((void *)v28 + 3);
          if (*(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((v72[4] & 0xFFFFFFFFFFFFFFF8) + 24))
          {
            *(void *)uint64_t v28 = v34;
            *((void *)v28 + 1) = v75;
            *((void *)v28 + 2) = v74;
          }
          else
          {
            uint64_t v76 = *((void *)v28 + 5);
            *(void *)uint64_t v28 = v75;
            *((void *)v28 + 1) = v34;
            *((void *)v28 + 2) = v76;
            *((void *)v28 + 3) = v34;
            *((void *)v28 + 4) = v73;
            *((void *)v28 + 5) = v74;
          }
          *(void *)(v74 + 8) = v34;
        }
        else
        {
          *(void *)uint64_t v21 = v34;
          *(void *)(v22 + 8) = v34;
          if (*(_DWORD *)((result[4] & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*((void *)v10 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                                + 24))
            *((void *)v10 + 1) = v34;
        }
        return result;
      }
      *(void *)uint64_t v21 = v34;
LABEL_31:
      *(void *)(v22 + 8) = v34;
      return result;
    }
    if (v10 == (char *)v6
      || (unsigned int v104 = *(_DWORD *)(v24 + 24), *(_DWORD *)(v35 + 24) >= v104)
      || v104 >= *(_DWORD *)((*((void *)v28 + 1) & 0xFFFFFFFFFFFFFFF8) + 24))
    {
      if (v21 != v28) {
        uint64_t result = (uint64_t *)memmove(v28 + 24, v28, v21 - v28);
      }
      *(void *)uint64_t v28 = v34;
      *((void *)v28 + 1) = v24 | 6;
      *((void *)v28 + 2) = v22;
      goto LABEL_31;
    }
    uint64_t v105 = result;
    uint64_t v106 = v24 | 4;
    if (v21 != v28) {
      uint64_t result = (uint64_t *)memmove(v28 + 24, v28, v21 - v28);
    }
    *((void *)v28 + 1) = v106;
    *((void *)v28 + 3) = v106;
    *((void *)v28 + 5) = v22;
    *(void *)(v22 + 8) = v34;
    for (uint64_t i = v28 + 48; i <= v21; i += 24)
      *((void *)i + 2) = v22;
    unint64_t v108 = v105[4];
    if (v108 < 8) {
      return result;
    }
    unint64_t v109 = *(void *)((v108 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (!v109) {
      return result;
    }
    uint64_t result = sub_1CC2F68F8(&v119, v109);
    uint64_t v111 = v121;
    uint64_t v110 = v122;
    if (v121 == v122) {
      return result;
    }
    while (1)
    {
      if ((*v111 & 0x10000FF) == 0x1000000)
      {
        *v111 &= ~0x4000000u;
        uint64_t v111 = v121;
        uint64_t v110 = v122;
      }
      v111 += 8;
      int v121 = v111;
      if (v111 == v110)
      {
        uint64_t v112 = *(void *)(v119 + 8);
        if (v112 == v120)
        {
          uint64_t v111 = v110;
        }
        else
        {
          uint64_t v111 = v110;
          if ((*(_WORD *)(v112 + 44) & 4) != 0)
          {
            while (1)
            {
              uint64_t v111 = *(_DWORD **)(v112 + 32);
              uint64_t v113 = *(unsigned int *)(v112 + 40);
              uint64_t v110 = &v111[8 * v113];
              if (v113) {
                break;
              }
              uint64_t v112 = *(void *)(v112 + 8);
              if (v112 == v120 || (*(_WORD *)(v112 + 44) & 4) == 0)
              {
                int v121 = v111;
                unint64_t v122 = &v111[8 * v113];
                uint64_t v110 = v122;
                goto LABEL_180;
              }
            }
            int v121 = *(_DWORD **)(v112 + 32);
            unint64_t v122 = &v111[8 * v113];
            uint64_t v119 = v112;
            goto LABEL_171;
          }
        }
LABEL_180:
        uint64_t v119 = v120;
      }
LABEL_171:
      if (v111 == v110) {
        return result;
      }
    }
  }
  uint64_t v39 = &v12[24 * v16];
  uint64_t v42 = *((void *)v39 + 1);
  unint64_t v40 = (unint64_t *)(v39 + 8);
  char v41 = v42;
  if (v8 != (v42 & 0xFFFFFFFFFFFFFFF8)) {
    return result;
  }
  uint64_t v43 = v41 & 6;
  unint64_t v44 = result[4] & 0xFFFFFFFFFFFFFFF8;
  if (v43 != 2) {
    uint64_t v43 = 4;
  }
  if ((v20 | 3) >= (*(_DWORD *)(v44 + 24) | (v43 >> 1))) {
    unint64_t v45 = v19 | 6;
  }
  else {
    unint64_t v45 = v44 | v43;
  }
  if (a3 < 0)
  {
    uint64_t v46 = *(int **)(*(void *)(result[1] + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
    if (!v46) {
      goto LABEL_48;
    }
    while (1)
    {
      unsigned int v47 = *v46;
      if ((*v46 & 0x81000000) == 0) {
        break;
      }
      uint64_t v46 = (int *)*((void *)v46 + 3);
      if (!v46) {
        goto LABEL_48;
      }
    }
    unsigned int v48 = v18 | (v7 >> 1) & 3;
LABEL_52:
    if ((v47 & 0x10000000) != 0) {
      goto LABEL_69;
    }
    unsigned int v49 = (v47 >> 8) & 0xFFF;
    if (v49)
    {
      if (a4 && (*(void *)(*(void *)(result[2] + 232) + 8 * v49) & a4) == 0) {
        goto LABEL_69;
      }
    }
    unint64_t v50 = *((void *)v46 + 1);
    __int16 v51 = *(_WORD *)(v50 + 44);
    unint64_t v52 = v50;
    if ((v51 & 4) != 0)
    {
      do
        unint64_t v52 = *(void *)v52 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v52 + 44) & 4) != 0);
    }
    if ((v51 & 8) != 0)
    {
      do
        unint64_t v50 = *(void *)(v50 + 8);
      while ((*(_WORD *)(v50 + 44) & 8) != 0);
    }
    unint64_t v53 = *(void *)(v50 + 8);
    if (v52 != v53)
    {
      while (1)
      {
        unsigned int v54 = **(unsigned __int16 **)(v52 + 16);
        BOOL v55 = v54 > 0x17;
        int v56 = (1 << v54) & 0x83E000;
        if (v55 || v56 == 0) {
          break;
        }
        unint64_t v52 = *(void *)(v52 + 8);
        if (v52 == v53)
        {
          unint64_t v52 = v53;
          break;
        }
      }
    }
    uint64_t v58 = *(void *)(*result + 288);
    uint64_t v59 = *(void *)(v58 + 368);
    uint64_t v60 = *(unsigned int *)(v58 + 384);
    if (v60)
    {
      LODWORD(v61) = ((v52 >> 4) ^ (v52 >> 9)) & (v60 - 1);
      BOOL v62 = (uint64_t *)(v59 + 16 * v61);
      uint64_t v63 = *v62;
      if (v52 == *v62) {
        goto LABEL_65;
      }
      int v68 = 1;
      while (v63 != -4096)
      {
        int v69 = v61 + v68++;
        uint64_t v61 = v69 & (v60 - 1);
        uint64_t v63 = *(void *)(v59 + 16 * v61);
        if (v52 == v63)
        {
          BOOL v62 = (uint64_t *)(v59 + 16 * v61);
          goto LABEL_65;
        }
      }
    }
    BOOL v62 = (uint64_t *)(v59 + 16 * v60);
LABEL_65:
    uint64_t v64 = v62[1];
    unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v66 = (v64 >> 1) & 3 | *(_DWORD *)((v64 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v67 = v65 | 4;
    if (v66 >= v48) {
      uint64_t v67 = v45;
    }
    if (v66 > (*(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24) | (v45 >> 1) & 3)) {
      unint64_t v45 = v67;
    }
LABEL_69:
    while (1)
    {
      uint64_t v46 = (int *)*((void *)v46 + 3);
      if (!v46) {
        goto LABEL_48;
      }
      unsigned int v47 = *v46;
      if ((*v46 & 0x81000000) == 0) {
        goto LABEL_52;
      }
    }
  }
  uint64_t v115 = v6;
  unint64_t v116 = v40;
  unsigned int v117 = v10;
  unint64_t v118 = v45;
  uint64_t v114 = a2;
  uint64_t v78 = result;
  uint64_t v79 = *(void *)(*result + 288);
  uint64_t v80 = sub_1CC2F137C(v79, v45);
  unint64_t v81 = v80 + 48;
  uint64_t v82 = (void *)(v79 + 344);
  while (1)
  {
    unint64_t v8 = *(void *)(v8 + 8);
    if ((void *)v8 == v82) {
      break;
    }
    if (*(void *)(v8 + 16))
    {
      unint64_t v83 = v8 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v7 >> 1) & 3));
      goto LABEL_111;
    }
  }
  unint64_t v83 = *v82 & 0xFFFFFFFFFFFFFFF9;
LABEL_111:
  if (v83 >= 8)
  {
    uint64_t v84 = *(void *)((v83 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v84)
    {
      if (*(void *)(v84 + 24) == v80) {
        unint64_t v81 = *(void *)((v83 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
    }
  }
  uint64_t v85 = *(void *)(v80 + 56);
  if (v81 == v85)
  {
LABEL_155:
    uint64_t result = v78;
    a2 = v114;
    unint64_t v45 = v118;
    goto LABEL_156;
  }
  while (1)
  {
    unint64_t v81 = *(void *)v81 & 0xFFFFFFFFFFFFFFF8;
    if (!v81 || (*(unsigned char *)v81 & 4) == 0)
    {
      while ((*(_WORD *)(v81 + 44) & 4) != 0)
        unint64_t v81 = *(void *)v81 & 0xFFFFFFFFFFFFFFF8;
    }
    int v86 = **(unsigned __int16 **)(v81 + 16);
    if ((v86 - 13) >= 5 && v86 != 23)
    {
      uint64_t v88 = sub_1CBB24CA0(v79, v81, 0);
      unint64_t v89 = v88 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)((v118 & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((v88 & 0xFFFFFFFFFFFFFFF8) + 24)) {
        goto LABEL_155;
      }
      sub_1CC2F68F8(&v119, v81);
      uint64_t v91 = v121;
      uint64_t v90 = v122;
      if (v121 != v122) {
        break;
      }
    }
LABEL_126:
    if (v81 == v85) {
      goto LABEL_155;
    }
  }
  while (1)
  {
    if ((*v91 & 0x100000FF) == 0)
    {
      unsigned int v92 = v91[1];
      if (v92 - 1 <= 0x3FFFFFFE)
      {
        uint64_t v93 = v78[2];
        unint64_t v94 = *(unsigned int *)(*(void *)(v93 + 8) + 24 * v92 + 16);
        uint64_t v95 = (_WORD *)(*(void *)(v93 + 56) + ((v94 >> 3) & 0x1FFFFFFE));
        unsigned __int16 v96 = *v95 + (v94 & 0xF) * v92;
        if (a3 == v96) {
          break;
        }
        uint64_t v97 = v95 + 1;
        do
        {
          int v99 = *v97++;
          int v98 = v99;
          v96 += v99;
          if (!v99) {
            uint64_t v97 = 0;
          }
          if (v98) {
            BOOL v100 = v96 == a3;
          }
          else {
            BOOL v100 = 1;
          }
        }
        while (!v100);
        if (v98) {
          break;
        }
      }
    }
    v91 += 8;
    int v121 = v91;
    if (v91 == v90)
    {
      uint64_t v101 = *(void *)(v119 + 8);
      if (v101 == v120)
      {
        uint64_t v91 = v90;
      }
      else
      {
        uint64_t v91 = v90;
        if ((*(_WORD *)(v101 + 44) & 4) != 0)
        {
          while (1)
          {
            uint64_t v102 = v101;
            uint64_t v103 = *(unsigned int *)(v101 + 40);
            if (v103) {
              break;
            }
            uint64_t v101 = *(void *)(v101 + 8);
            if (v101 == v120 || (*(_WORD *)(v101 + 44) & 4) == 0)
            {
              uint64_t v91 = *(_DWORD **)(v102 + 32);
              uint64_t v90 = &v91[8 * v103];
              int v121 = v91;
              unint64_t v122 = v90;
              goto LABEL_153;
            }
          }
          uint64_t v91 = *(_DWORD **)(v101 + 32);
          uint64_t v90 = &v91[8 * v103];
          int v121 = v91;
          unint64_t v122 = v90;
          uint64_t v119 = v101;
          goto LABEL_132;
        }
      }
LABEL_153:
      uint64_t v119 = v120;
    }
LABEL_132:
    if (v91 == v90) {
      goto LABEL_126;
    }
  }
  unint64_t v45 = v89 | 4;
  uint64_t result = v78;
  a2 = v114;
LABEL_156:
  unint64_t v40 = v116;
  BOOL v10 = v117;
  uint64_t v6 = v115;
LABEL_48:
  unint64_t *v40 = v45;
  uint64_t v21 = v10 + 24;
  if (v10 + 24 != (char *)v6)
  {
    uint64_t v17 = *(void *)v21;
    if ((result[3] & 0xFFFFFFFFFFFFFFF8) == (*(void *)v21 & 0xFFFFFFFFFFFFFFF8))
    {
      unsigned int v4 = *(_DWORD *)(a2 + 8);
      unint64_t v5 = *(char **)a2;
      goto LABEL_16;
    }
  }
  return result;
}

void *sub_1CC2F68F8(void *result, unint64_t a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v2 = a2;
  if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    unint64_t v2 = a2;
    do
      unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v2 + 44) & 4) != 0);
  }
  *uint64_t result = v2;
  uint64_t v3 = *(void *)(a2 + 24) + 48;
  result[1] = v3;
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = *(unsigned int *)(v2 + 40);
  result[2] = v4;
  result[3] = v4 + 32 * v5;
  if (!v5)
  {
    do
    {
      unint64_t v2 = *(void *)(v2 + 8);
      if (v2 == v3 || (*(_WORD *)(v2 + 44) & 4) == 0)
      {
        *uint64_t result = v3;
        return result;
      }
      uint64_t v6 = *(void *)(v2 + 32);
      uint64_t v7 = *(unsigned int *)(v2 + 40);
      result[2] = v6;
      result[3] = v6 + 32 * v7;
    }
    while (!v7);
    *uint64_t result = v2;
  }
  return result;
}

uint64_t sub_1CC2F6980()
{
  int v4 = 1;
  char v2 = 1;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Use segment set for the computation of the live ranges of physregs.";
  v1.n128_u64[1] = 67;
  sub_1CC025F34((llvm::cl::Option *)&llvm::UseSegmentSetForPhysRegs, "use-segment-set-for-physregs", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::UseSegmentSetForPhysRegs, &dword_1CB82C000);
}

uint64_t llvm::LiveRange::find(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *((unsigned int *)a1 + 2);
  uint64_t result = *a1;
  if (!v2)
  {
    LODWORD(v2) = 0;
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(result + 24 * v2 - 16);
  unsigned int v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  if (v5 >= ((v4 >> 1) & 3 | *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_11:
    result += 24 * v2;
    return result;
  }
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = *(void *)(result + 24 * (v2 >> 1) + 8);
    LODWORD(v7) = (v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24);
    v2 -= (v2 >> 1) + 1;
    BOOL v8 = v5 >= v7;
    if (v5 >= v7) {
      unint64_t v9 = v6 + 1;
    }
    else {
      unint64_t v9 = 0;
    }
    result += 24 * v9;
    if (!v8) {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  return result;
}

unint64_t llvm::LiveRange::createDeadDef(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a1[12])
  {
    uint64_t v4 = a1;
    return sub_1CC2F6AE4((uint64_t *)&v4, a2, a3, 0);
  }
  else
  {
    uint64_t v4 = a1;
    return sub_1CC2F6F18(&v4, a2, a3, 0);
  }
}

unint64_t sub_1CC2F6AE4(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *a1;
  unint64_t v9 = *(void ***)(*a1 + 96);
  unsigned int v10 = (a2 >> 1) & 3;
  unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v10 == 3) {
    unint64_t v12 = *(void *)(v11 + 8) & 0xFFFFFFFFFFFFFFF9;
  }
  else {
    unint64_t v12 = v11 | (2 * v10 + 2);
  }
  *(void *)&long long v40 = a2;
  *((void *)&v40 + 1) = v12;
  unint64_t v41 = 0;
  unint64_t v13 = v9 + 1;
  uint64_t v14 = v9[1];
  if (v14)
  {
    do
    {
      v43[0] = &v40;
      v43[1] = (void *)&v40 + 1;
      v42[0] = v14 + 4;
      v42[1] = v14 + 5;
      BOOL v15 = sub_1CC2FC17C((uint64_t)&v44, v43, v42);
      unint64_t v16 = v14 + 1;
      if (v15)
      {
        unint64_t v16 = v14;
        unint64_t v13 = v14;
      }
      uint64_t v14 = (void *)*v16;
    }
    while (*v16);
    uint64_t v8 = *a1;
    unint64_t v9 = *(void ***)(*a1 + 96);
  }
  if (v13 != *v9)
  {
    uint64_t v17 = (void *)*v13;
    if (*v13)
    {
      do
      {
        unsigned int v18 = v17;
        uint64_t v17 = (void *)v17[1];
      }
      while (v17);
    }
    else
    {
      unint64_t v19 = v13;
      do
      {
        unsigned int v18 = (void *)v19[2];
        BOOL v20 = *v18 == (void)v19;
        unint64_t v19 = v18;
      }
      while (v20);
    }
    if ((*(_DWORD *)(v11 + 24) | v10) < ((v18[5] >> 1) & 3 | *(_DWORD *)((v18[5] & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24)))
      unint64_t v13 = v18;
  }
  if (v13 == v9 + 1)
  {
    if (!a4)
    {
      *(void *)(a3 + 80) += 16;
      if (((*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3 + 16 > *(void *)(a3 + 8) - *(void *)a3)
      {
        unsigned int v37 = *(_DWORD *)(a3 + 24) >> 7;
        if (v37 >= 0x1E) {
          LOBYTE(v37) = 30;
        }
        uint64_t v38 = 4096 << v37;
        a4 = (unint64_t)operator new(4096 << v37, (std::align_val_t)8uLL);
        unsigned int v39 = *(_DWORD *)(a3 + 24);
        if (v39 >= *(_DWORD *)(a3 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a3 + 16) + 8 * v39) = a4;
        ++*(_DWORD *)(a3 + 24);
        *(void *)(a3 + 8) = a4 + v38;
      }
      else
      {
        a4 = (*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)a3 = a4 + 16;
      unsigned int v28 = *(_DWORD *)(v8 + 72);
      *(_DWORD *)a4 = v28;
      *(void *)(a4 + 8) = a2;
      if (v28 >= *(_DWORD *)(v8 + 76)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v8 + 64) + 8 * v28) = a4;
      ++*(_DWORD *)(v8 + 72);
      unint64_t v9 = *(void ***)(*a1 + 96);
    }
    *(void *)&long long v40 = a2;
    *((void *)&v40 + 1) = v11 | 6;
    unint64_t v41 = a4;
    sub_1CC2FC208(v9, v9 + 1, &v40, (uint64_t)&v40);
  }
  else
  {
    uint64_t v21 = v13[4];
    if (v11 == (v21 & 0xFFFFFFFFFFFFFFF8))
    {
      int v29 = *(_DWORD *)(v11 + 24);
      unsigned int v30 = v29 | (v21 >> 1) & 3;
      unsigned int v31 = v29 | v10;
      a4 = v13[6];
      if (v21 != a2 && v30 >= v31)
      {
        *(void *)(a4 + 8) = a2;
        v13[4] = a2;
      }
    }
    else
    {
      if (!a4)
      {
        *(void *)(a3 + 80) += 16;
        if (((*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3 + 16 > *(void *)(a3 + 8) - *(void *)a3)
        {
          unsigned int v34 = *(_DWORD *)(a3 + 24) >> 7;
          if (v34 >= 0x1E) {
            LOBYTE(v34) = 30;
          }
          uint64_t v35 = 4096 << v34;
          a4 = (unint64_t)operator new(4096 << v34, (std::align_val_t)8uLL);
          unsigned int v36 = *(_DWORD *)(a3 + 24);
          if (v36 >= *(_DWORD *)(a3 + 28)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a3 + 16) + 8 * v36) = a4;
          ++*(_DWORD *)(a3 + 24);
          *(void *)(a3 + 8) = a4 + v35;
        }
        else
        {
          a4 = (*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)a3 = a4 + 16;
        unsigned int v22 = *(_DWORD *)(v8 + 72);
        *(_DWORD *)a4 = v22;
        *(void *)(a4 + 8) = a2;
        if (v22 >= *(_DWORD *)(v8 + 76)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v8 + 64) + 8 * v22) = a4;
        ++*(_DWORD *)(v8 + 72);
        unint64_t v9 = *(void ***)(*a1 + 96);
      }
      *(void *)&long long v40 = a2;
      *((void *)&v40 + 1) = v11 | 6;
      unint64_t v41 = a4;
      uint64_t v23 = sub_1CC2FC2B0(v9, v13, v43, (uint64_t *)v42, &v40);
      if (!*v23)
      {
        unint64_t v24 = v23;
        unint64_t v25 = operator new(0x38uLL);
        uint64_t v25[2] = v40;
        *((void *)v25 + 6) = v41;
        uint64_t v26 = v43[0];
        *(void *)unint64_t v25 = 0;
        *((void *)v25 + 1) = 0;
        *((void *)v25 + 2) = v26;
        *unint64_t v24 = (uint64_t)v25;
        unsigned int v27 = (void *)**v9;
        if (v27)
        {
          *unint64_t v9 = v27;
          unint64_t v25 = (_OWORD *)*v24;
        }
        sub_1CB8358B8(v9[1], (uint64_t *)v25);
        v9[2] = (void *)((char *)v9[2] + 1);
      }
    }
  }
  return a4;
}

unint64_t sub_1CC2F6F18(unint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v8 = *a1;
  unsigned int v9 = *((_DWORD *)*a1 + 2);
  unint64_t v10 = **a1;
  if (!v9)
  {
    unsigned int v19 = 0;
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v10 + 24 * v9 - 16);
  unsigned int v12 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  if (v12 >= ((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
    unsigned int v19 = *((_DWORD *)*a1 + 2);
LABEL_13:
    unint64_t v13 = (uint64_t *)(v10 + 24 * v19);
    goto LABEL_14;
  }
  unint64_t v13 = (uint64_t *)**a1;
  unint64_t v14 = *((unsigned int *)*a1 + 2);
  do
  {
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = v13[3 * (v14 >> 1) + 1];
    LODWORD(v16) = (v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24);
    v14 -= (v14 >> 1) + 1;
    BOOL v17 = v12 >= v16;
    if (v12 >= v16) {
      unint64_t v18 = v15 + 1;
    }
    else {
      unint64_t v18 = 0;
    }
    v13 += 3 * v18;
    if (!v17) {
      unint64_t v14 = v15;
    }
  }
  while (v14);
  unsigned int v19 = *((_DWORD *)*a1 + 2);
LABEL_14:
  if (v13 == (uint64_t *)(v10 + 24 * v19))
  {
    if (!a4)
    {
      *(void *)(a3 + 80) += 16;
      if (((*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3 + 16 > *(void *)(a3 + 8) - *(void *)a3)
      {
        unsigned int v31 = *(_DWORD *)(a3 + 24) >> 7;
        if (v31 >= 0x1E) {
          LOBYTE(v31) = 30;
        }
        uint64_t v32 = 4096 << v31;
        unint64_t v4 = (unint64_t)operator new(4096 << v31, (std::align_val_t)8uLL);
        unsigned int v33 = *(_DWORD *)(a3 + 24);
        if (v33 >= *(_DWORD *)(a3 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a3 + 16) + 8 * v33) = v4;
        ++*(_DWORD *)(a3 + 24);
        *(void *)(a3 + 8) = v4 + v32;
      }
      else
      {
        unint64_t v4 = (*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)a3 = v4 + 16;
      unsigned int v23 = *((_DWORD *)v8 + 18);
      *(_DWORD *)unint64_t v4 = v23;
      *(void *)(v4 + 8) = a2;
      if (v23 >= *((_DWORD *)v8 + 19)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v8[8] + 8 * v23) = v4;
      ++*((_DWORD *)v8 + 18);
      uint64_t v8 = *a1;
      unsigned int v19 = *((_DWORD *)*a1 + 2);
      unint64_t v10 = **a1;
      unsigned int v9 = v19;
    }
    *(void *)&long long v34 = a2;
    *((void *)&v34 + 1) = a2 & 0xFFFFFFFFFFFFFFF8 | 6;
    unint64_t v35 = v4;
    if (v9 >= *((_DWORD *)v8 + 3))
    {
      if (v10 > (unint64_t)&v34 || v10 + 24 * v19 <= (unint64_t)&v34) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v24 = v10 + 24 * *((unsigned int *)v8 + 2);
    long long v25 = v34;
    *(void *)(v24 + 16) = v35;
    *(_OWORD *)uint64_t v24 = v25;
    ++*((_DWORD *)v8 + 2);
  }
  else
  {
    uint64_t v20 = *v13;
    unint64_t v21 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((a2 & 0xFFFFFFFFFFFFFFF8) == (*v13 & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v4 = v13[2];
      if ((*(_DWORD *)(v21 + 24) | (v20 >> 1) & 3) >= (*(_DWORD *)(v21 + 24) | (a2 >> 1) & 3)
        && v20 != a2)
      {
        *(void *)(v4 + 8) = a2;
        *unint64_t v13 = a2;
      }
    }
    else
    {
      if (!a4)
      {
        *(void *)(a3 + 80) += 16;
        if (((*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3 + 16 > *(void *)(a3 + 8) - *(void *)a3)
        {
          unsigned int v28 = *(_DWORD *)(a3 + 24) >> 7;
          if (v28 >= 0x1E) {
            LOBYTE(v28) = 30;
          }
          uint64_t v29 = 4096 << v28;
          unint64_t v4 = (unint64_t)operator new(4096 << v28, (std::align_val_t)8uLL);
          unsigned int v30 = *(_DWORD *)(a3 + 24);
          if (v30 >= *(_DWORD *)(a3 + 28)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a3 + 16) + 8 * v30) = v4;
          ++*(_DWORD *)(a3 + 24);
          *(void *)(a3 + 8) = v4 + v29;
        }
        else
        {
          unint64_t v4 = (*(void *)a3 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)a3 = v4 + 16;
        unsigned int v22 = *((_DWORD *)v8 + 18);
        *(_DWORD *)unint64_t v4 = v22;
        *(void *)(v4 + 8) = a2;
        if (v22 >= *((_DWORD *)v8 + 19)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v8[8] + 8 * v22) = v4;
        ++*((_DWORD *)v8 + 18);
        uint64_t v8 = *a1;
      }
      *(void *)&long long v34 = a2;
      *((void *)&v34 + 1) = v21 | 6;
      unint64_t v35 = v4;
      sub_1CC2FC960((uint64_t *)v8, (unint64_t)v13, (unint64_t)&v34);
    }
  }
  return v4;
}

unint64_t llvm::LiveRange::createDeadDef(unint64_t *a1, unint64_t a2)
{
  if (a1[12])
  {
    uint64_t v3 = a1;
    return sub_1CC2F6AE4((uint64_t *)&v3, *(void *)(a2 + 8), 0, a2);
  }
  else
  {
    uint64_t v3 = a1;
    return sub_1CC2F6F18(&v3, *(void *)(a2 + 8), 0, a2);
  }
}

BOOL llvm::LiveRange::overlapsFrom(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)a1;
  unint64_t v4 = *(void **)a1;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  unint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)a2 + 24 * *(unsigned int *)(a2 + 8);
  unsigned int v8 = (**(void **)a1 >> 1) & 3 | *(_DWORD *)((**(void **)a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v9 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3;
  if (v8 >= v9)
  {
    if (v9 >= v8) {
      return 1;
    }
    if (a3 + 3 != (void *)v7
      && ((a3[3] >> 1) & 3 | *(_DWORD *)((a3[3] & 0xFFFFFFFFFFFFFFF8) + 24)) <= v8)
    {
      if ((void *)v7 != a3)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)a3) >> 3);
        do
        {
          unint64_t v25 = v24 >> 1;
          uint64_t v26 = &a3[3 * (v24 >> 1)];
          uint64_t v28 = *v26;
          unsigned int v27 = v26 + 3;
          v24 += ~(v24 >> 1);
          if (v8 < ((v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24))) {
            unint64_t v24 = v25;
          }
          else {
            a3 = v27;
          }
        }
        while (v24);
      }
      if (a3 == v6) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = -1;
      }
      a3 += 3 * v29;
    }
  }
  else
  {
    if (v5)
    {
      unint64_t v10 = *(unsigned int *)(a1 + 8);
      do
      {
        unint64_t v11 = v10 >> 1;
        unsigned int v12 = &v4[3 * (v10 >> 1)];
        uint64_t v14 = *v12;
        unint64_t v13 = v12 + 3;
        v10 += ~(v10 >> 1);
        if (v9 < ((v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24))) {
          unint64_t v10 = v11;
        }
        else {
          unint64_t v4 = v13;
        }
      }
      while (v10);
    }
    if (v4 == v3) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = -1;
    }
    v4 += 3 * v15;
  }
  uint64_t v16 = &v3[3 * v5];
  if (a3 == (void *)v7 || v4 == v16) {
    return 0;
  }
  uint64_t v18 = *a3;
  do
  {
    unsigned int v19 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3;
    if (((*v4 >> 1) & 3 | *(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24)) > v19)
    {
      unsigned int v19 = (*v4 >> 1) & 3 | *(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v18 = *v4;
      uint64_t v20 = a3;
      unint64_t v21 = (void *)v7;
      uint64_t v7 = (uint64_t)v16;
      a3 = v4;
      uint64_t v16 = v21;
    }
    else
    {
      uint64_t v20 = v4;
      unint64_t v21 = v16;
    }
    BOOL result = ((v20[1] >> 1) & 3 | *(_DWORD *)((v20[1] & 0xFFFFFFFFFFFFFFF8) + 24)) > v19;
    unint64_t v4 = v20 + 3;
  }
  while (((v20[1] >> 1) & 3 | *(_DWORD *)((v20[1] & 0xFFFFFFFFFFFFFFF8) + 24)) <= v19 && v4 != v21);
  return result;
}

uint64_t llvm::LiveRange::overlaps(llvm::LiveRange *this, const llvm::LiveRange *a2, const llvm::CoalescerPair *a3, const llvm::SlotIndexes *a4)
{
  unint64_t v4 = *((unsigned int *)a2 + 2);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = *(void **)a2;
  unsigned int v8 = *((_DWORD *)this + 2);
  uint64_t v9 = *(void *)this;
  if (!v8)
  {
    unsigned int v8 = 0;
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(v9 + 24 * v8 - 16);
  unsigned int v11 = (*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v11 >= ((v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_23:
    unsigned int v12 = (void *)(v9 + 24 * v8);
    goto LABEL_12;
  }
  unsigned int v12 = *(void **)this;
  unint64_t v13 = *((unsigned int *)this + 2);
  do
  {
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v12[3 * (v13 >> 1) + 1];
    LODWORD(v15) = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
    v13 -= (v13 >> 1) + 1;
    BOOL v16 = v11 >= v15;
    if (v11 >= v15) {
      unint64_t v17 = v14 + 1;
    }
    else {
      unint64_t v17 = 0;
    }
    v12 += 3 * v17;
    if (!v16) {
      unint64_t v13 = v14;
    }
  }
  while (v13);
LABEL_12:
  uint64_t v18 = (void *)(v9 + 24 * v8);
  if (v12 == v18) {
    return 0;
  }
  uint64_t v19 = *v12;
  uint64_t v20 = &v7[3 * v4];
  unsigned int v21 = (*v12 >> 1) & 3 | *(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v21 >= ((*(v20 - 2) >> 1) & 3 | *(_DWORD *)((*(v20 - 2) & 0xFFFFFFFFFFFFFFF8) + 24))) {
    return 0;
  }
  do
  {
    unint64_t v22 = v4 >> 1;
    uint64_t v23 = v7[3 * (v4 >> 1) + 1];
    LODWORD(v23) = (v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24);
    v4 -= (v4 >> 1) + 1;
    BOOL v24 = v21 >= v23;
    if (v21 >= v23) {
      unint64_t v25 = v22 + 1;
    }
    else {
      unint64_t v25 = 0;
    }
    v7 += 3 * v25;
    if (!v24) {
      unint64_t v4 = v22;
    }
  }
  while (v4);
  if (v7 == v20) {
    return 0;
  }
LABEL_37:
  unsigned int v33 = (*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v34 = *(_DWORD *)((v12[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v12[1] >> 1) & 3;
  if (v33 >= v34)
  {
LABEL_38:
    if (((v7[1] >> 1) & 3 | *(_DWORD *)((v7[1] & 0xFFFFFFFFFFFFFFF8) + 24)) > v34)
    {
      uint64_t v26 = v20;
      unsigned int v27 = v12;
      uint64_t v20 = v18;
      unsigned int v12 = v7;
    }
    else
    {
      uint64_t v26 = v18;
      unsigned int v27 = v7;
    }
    uint64_t v28 = v27 + 3;
    while (v28 != v20)
    {
      uint64_t v19 = *v12;
      unsigned int v29 = (v28[1] >> 1) & 3 | *(_DWORD *)((v28[1] & 0xFFFFFFFFFFFFFFF8) + 24);
      v28 += 3;
      if (v29 >= (*(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v12 >> 1) & 3))
      {
        uint64_t v7 = v28 - 3;
        uint64_t v18 = v26;
        goto LABEL_37;
      }
    }
    return 0;
  }
  if ((*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3) >= v33) {
    unsigned int v30 = v12;
  }
  else {
    unsigned int v30 = v7;
  }
  unint64_t v31 = *v30;
  if ((v31 & 6) != 0)
  {
    uint64_t v32 = v31 < 8 ? 0 : *(const llvm::MachineInstr **)((v31 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (llvm::CoalescerPair::isCoalescable(a3, v32))
    {
      unsigned int v34 = *(_DWORD *)((v12[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v12[1] >> 1) & 3;
      goto LABEL_38;
    }
  }
  return 1;
}

BOOL llvm::LiveRange::overlaps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = *(void **)a1;
  do
  {
    unint64_t v5 = v3 >> 1;
    unint64_t v6 = &v4[3 * (v3 >> 1)];
    uint64_t v8 = *v6;
    uint64_t v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (((v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3)) {
      unint64_t v4 = v7;
    }
    else {
      unint64_t v3 = v5;
    }
  }
  while (v3);
  return v4 != *(void **)a1
      && ((*(v4 - 2) >> 1) & 3 | *(_DWORD *)((*(v4 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3);
}

BOOL llvm::LiveRange::covers(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (!v2) {
    return *(_DWORD *)(a2 + 8) == 0;
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (!v3) {
    return 1;
  }
  unint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)a2 + 24 * v3;
  unint64_t v6 = *(uint64_t **)a1;
  uint64_t v7 = *(void *)a1 + 24 * v2;
  while (1)
  {
    unsigned int v8 = (*v4 >> 1) & 3 | *(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v8 >= ((*(void *)(v7 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v7 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 24)))
      break;
    uint64_t v9 = v6 - 3;
    uint64_t v10 = v6 + 3;
    do
    {
      unsigned int v11 = v10;
      unsigned int v12 = (v9[4] >> 1) & 3 | *(_DWORD *)((v9[4] & 0xFFFFFFFFFFFFFFF8) + 24);
      v9 += 3;
      v10 += 3;
    }
    while (v12 <= v8);
    if (v9 == (uint64_t *)v7 || ((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24)) > v8) {
      break;
    }
    while (1)
    {
      uint64_t v13 = *(v11 - 2);
      if (((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)) >= ((v4[1] >> 1) & 3 | *(_DWORD *)((v4[1] & 0xFFFFFFFFFFFFFFF8) + 24))) {
        break;
      }
      if (v11 == (uint64_t *)v7) {
        return 0;
      }
      BOOL result = 0;
      uint64_t v15 = *v11;
      v11 += 3;
      if (v13 != v15) {
        return result;
      }
    }
    v4 += 3;
    unint64_t v6 = v11 - 3;
    if (v4 == (void *)v5) {
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::LiveRange::markValNoForDeletion(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 72) - 1;
  if (*(_DWORD *)a2 == v2)
  {
    do
    {
      unsigned int v3 = v2;
      if (!v2) {
        break;
      }
      unint64_t v4 = *(void *)(*(void *)(*(void *)(result + 64) + 8 * v2-- - 8) + 8);
    }
    while (v4 < 8);
    *(_DWORD *)(result + 72) = v3;
  }
  else
  {
    *(void *)(a2 + 8) = 0;
  }
  return result;
}

void llvm::LiveRange::RenumberValues(llvm::LiveRange *this)
{
  unint64_t v22 = v26;
  uint64_t v23 = v26;
  uint64_t v24 = 8;
  int v25 = 0;
  *((_DWORD *)this + 18) = 0;
  unsigned int v1 = *((_DWORD *)this + 2);
  if (v1)
  {
    uint64_t v3 = *(void *)this;
    uint64_t v4 = *(void *)this + 24 * v1;
    while (1)
    {
      uint64_t v5 = *(_DWORD **)(v3 + 16);
      unint64_t v6 = v23;
      uint64_t v7 = HIDWORD(v24);
      if (v23 == v22)
      {
        if (HIDWORD(v24))
        {
          unsigned int v8 = 0;
          uint64_t v9 = 8 * HIDWORD(v24);
          uint64_t v10 = v23;
          while (*(_DWORD **)v10 != v5)
          {
            if (*(void *)v10 == -2) {
              unsigned int v8 = v10;
            }
            v10 += 8;
            v9 -= 8;
            if (!v9)
            {
              if (!v8) {
                goto LABEL_11;
              }
              *(void *)unsigned int v8 = v5;
              --v25;
              goto LABEL_13;
            }
          }
          goto LABEL_15;
        }
LABEL_11:
        unsigned int v11 = v24;
        if (HIDWORD(v24) < v24)
        {
          ++HIDWORD(v24);
          *(void *)&v23[8 * v7] = v5;
          goto LABEL_13;
        }
      }
      else
      {
        unsigned int v11 = v24;
      }
      if (3 * v11 <= 4 * (HIDWORD(v24) - v25)) {
        break;
      }
      if (v11 - HIDWORD(v24) < v11 >> 3) {
        goto LABEL_47;
      }
LABEL_20:
      unsigned int v13 = v11 - 1;
      unsigned int v14 = (v11 - 1) & ((v5 >> 4) ^ (v5 >> 9));
      uint64_t v15 = &v6[8 * v14];
      BOOL v16 = *(_DWORD **)v15;
      if (*(void *)v15 != -1)
      {
        unint64_t v17 = 0;
        int v18 = 1;
        while (v16 != v5)
        {
          if (v17) {
            BOOL v19 = 0;
          }
          else {
            BOOL v19 = v16 == (_DWORD *)-2;
          }
          if (v19) {
            unint64_t v17 = v15;
          }
          unsigned int v20 = v14 + v18++;
          unsigned int v14 = v20 & v13;
          uint64_t v15 = &v6[8 * (v20 & v13)];
          BOOL v16 = *(_DWORD **)v15;
          if (*(void *)v15 == -1) {
            goto LABEL_32;
          }
        }
        goto LABEL_15;
      }
      unint64_t v17 = 0;
LABEL_32:
      if (v17) {
        unsigned int v21 = v17;
      }
      else {
        unsigned int v21 = v15;
      }
      if (*(_DWORD **)v21 == v5) {
        goto LABEL_15;
      }
      if (*(void *)v21 == -2) {
        --v25;
      }
      else {
        ++HIDWORD(v24);
      }
      *(void *)unsigned int v21 = v5;
LABEL_13:
      unint64_t v12 = *((unsigned int *)this + 18);
      _DWORD *v5 = v12;
      if (v12 >= *((unsigned int *)this + 19)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 8) + 8 * v12) = v5;
      ++*((_DWORD *)this + 18);
LABEL_15:
      v3 += 24;
      if (v3 == v4)
      {
        if (v23 != v22) {
          free(v23);
        }
        return;
      }
    }
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
LABEL_47:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v22, v11);
    unsigned int v11 = v24;
    unint64_t v6 = v23;
    goto LABEL_20;
  }
}

void llvm::LiveRange::addSegmentToSet(uint64_t a1, long long *a2)
{
  long long v33 = *a2;
  uint64_t v34 = *((void *)a2 + 2);
  uint64_t v35 = a1;
  uint64_t v3 = *((void *)&v33 + 1);
  long long v36 = *a2;
  uint64_t v37 = *((void *)a2 + 2);
  uint64_t v4 = sub_1CC2FC488((uint64_t)&v35, &v36);
  uint64_t v5 = *(uint64_t ***)(a1 + 96);
  unint64_t v6 = *v5;
  if (*v5 != v4)
  {
    uint64_t v7 = (uint64_t *)*v4;
    if (*v4)
    {
      do
      {
        uint64_t v9 = v7;
        uint64_t v7 = (uint64_t *)v7[1];
      }
      while (v7);
    }
    else
    {
      unsigned int v8 = v4;
      do
      {
        uint64_t v9 = (uint64_t *)v8[2];
        BOOL v10 = *v9 == (void)v8;
        unsigned int v8 = v9;
      }
      while (v10);
    }
    if (v34 == v9[6])
    {
      unsigned int v11 = *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24) | (v33 >> 1) & 3;
      if (((v9[4] >> 1) & 3 | *(_DWORD *)((v9[4] & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11
        && ((v9[5] >> 1) & 3 | *(_DWORD *)((v9[5] & 0xFFFFFFFFFFFFFFF8) + 24)) >= v11)
      {
LABEL_8:
        sub_1CC2FC58C((uint64_t)&v35, v9, v3);
        return;
      }
    }
  }
  if (v5 + 1 == (uint64_t **)v4
    || v34 != v4[6]
    || (unint64_t v12 = *((void *)&v33 + 1) & 0xFFFFFFFFFFFFFFF8,
        int v13 = (DWORD2(v33) >> 1) & 3,
        ((v4[4] >> 1) & 3 | *(_DWORD *)((v4[4] & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((*((void *)&v33 + 1) & 0xFFFFFFFFFFFFFFF8) + 24) | v13)))
  {
    sub_1CC2FC208(v5, v4, &v33, (uint64_t)&v33);
    return;
  }
  uint64_t v9 = v4;
  do
  {
    if (v9 == v6)
    {
      unsigned int v32 = (DWORD2(v33) >> 1) & 3;
      unsigned int v29 = *(uint64_t ***)(a1 + 96);
      unint64_t v31 = *((void *)&v33 + 1) & 0xFFFFFFFFFFFFFFF8;
      v4[4] = v33;
      uint64_t v28 = v4;
      if (v6 != v4)
      {
        uint64_t v24 = v6;
        do
        {
          int v25 = sub_1CC2FC7A4(v29, v24);
          operator delete(v24);
          int v13 = v32;
          unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v9 = v28;
          uint64_t v24 = v25;
        }
        while (v25 != v28);
        goto LABEL_33;
      }
LABEL_51:
      uint64_t v9 = v28;
      unint64_t v12 = v31;
      int v13 = v32;
      goto LABEL_33;
    }
    uint64_t v14 = *v9;
    uint64_t v15 = v9;
    if (*v9)
    {
      do
      {
        uint64_t v9 = (uint64_t *)v14;
        uint64_t v14 = *(void *)(v14 + 8);
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t v9 = (uint64_t *)v15[2];
        BOOL v10 = *v9 == (void)v15;
        uint64_t v15 = v9;
      }
      while (v10);
    }
    unsigned int v16 = *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24) | (v33 >> 1) & 3;
  }
  while (v16 <= ((v9[4] >> 1) & 3 | *(_DWORD *)((v9[4] & 0xFFFFFFFFFFFFFFF8) + 24)));
  if (((v9[5] >> 1) & 3 | *(_DWORD *)((v9[5] & 0xFFFFFFFFFFFFFFF8) + 24)) < v16 || v9[6] != v34)
  {
    unint64_t v17 = (uint64_t *)v9[1];
    if (v17)
    {
      do
      {
        int v18 = v17;
        unint64_t v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        int v18 = (uint64_t *)v9[2];
        BOOL v10 = *v18 == (void)v9;
        uint64_t v9 = v18;
      }
      while (!v10);
    }
    void v18[4] = v33;
    uint64_t v9 = v18;
  }
  v9[5] = v4[5];
  BOOL v19 = (uint64_t *)v9[1];
  if (v19)
  {
    do
    {
      unsigned int v21 = v19;
      BOOL v19 = (uint64_t *)*v19;
    }
    while (v19);
  }
  else
  {
    unsigned int v20 = v9;
    do
    {
      unsigned int v21 = (uint64_t *)v20[2];
      BOOL v10 = *v21 == (void)v20;
      unsigned int v20 = v21;
    }
    while (!v10);
  }
  unint64_t v22 = (uint64_t *)v4[1];
  if (v22)
  {
    do
    {
      uint64_t v23 = v22;
      unint64_t v22 = (uint64_t *)*v22;
    }
    while (v22);
  }
  else
  {
    do
    {
      uint64_t v23 = (uint64_t *)v4[2];
      BOOL v10 = *v23 == (void)v4;
      uint64_t v4 = v23;
    }
    while (!v10);
  }
  if (v23 != v21)
  {
    unsigned int v27 = v23;
    uint64_t v28 = v9;
    unsigned int v32 = (v3 >> 1) & 3;
    unsigned int v30 = v5;
    unint64_t v31 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      uint64_t v26 = sub_1CC2FC7A4(v30, v21);
      operator delete(v21);
      unsigned int v21 = v26;
    }
    while (v27 != v26);
    goto LABEL_51;
  }
LABEL_33:
  if ((*(_DWORD *)(v12 + 24) | v13) > ((v9[5] >> 1) & 3 | *(_DWORD *)((v9[5] & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 24)))
    goto LABEL_8;
}

uint64_t llvm::LiveRange::addSegment(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 96))
  {
    long long v34 = *(_OWORD *)a2;
    uint64_t v35 = *(void *)(a2 + 16);
    llvm::LiveRange::addSegmentToSet(a1, &v34);
    return *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
  }
  long long v31 = *(_OWORD *)a2;
  uint64_t v32 = *(void *)(a2 + 16);
  long long v33 = (uint64_t *)a1;
  uint64_t v3 = *((void *)&v31 + 1);
  uint64_t v4 = *(char **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  unint64_t v6 = *(char **)a1;
  if (v5)
  {
    unsigned int v7 = *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24) | (v31 >> 1) & 3;
    unint64_t v8 = *(unsigned int *)(a1 + 8);
    uint64_t v9 = *(void *)a1;
    do
    {
      unint64_t v10 = v8 >> 1;
      unsigned int v11 = (uint64_t *)(v9 + 24 * (v8 >> 1));
      uint64_t v13 = *v11;
      unint64_t v12 = v11 + 3;
      v8 += ~(v8 >> 1);
      if (v7 < ((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24))) {
        unint64_t v8 = v10;
      }
      else {
        uint64_t v9 = (uint64_t)v12;
      }
    }
    while (v8);
    unint64_t v6 = *(char **)a1;
    if ((char *)v9 != v4)
    {
      if (v32 == *(void *)(v9 - 8)
        && (uint64_t v14 = (void *)(v9 - 24),
            ((*(void *)(v9 - 24) >> 1) & 3 | *(_DWORD *)((*(void *)(v9 - 24) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 24)) <= v7))
      {
        unint64_t v6 = (char *)v9;
        if (((*(void *)(v9 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v9 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 24)) >= v7)
        {
LABEL_24:
          sub_1CC2FC81C(&v33, v14, v3);
          return (uint64_t)v14;
        }
      }
      else
      {
        unint64_t v6 = (char *)v9;
      }
    }
  }
  uint64_t v15 = &v4[24 * v5];
  if (v6 == v15) {
    return sub_1CC2FC960((uint64_t *)a1, (unint64_t)v6, (unint64_t)&v31);
  }
  if (v32 != *((void *)v6 + 2)) {
    return sub_1CC2FC960((uint64_t *)a1, (unint64_t)v6, (unint64_t)&v31);
  }
  int v16 = (DWORD2(v31) >> 1) & 3;
  if (((*(void *)v6 >> 1) & 3 | *(_DWORD *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((*((void *)&v31 + 1) & 0xFFFFFFFFFFFFFFF8) + 24) | v16)) {
    return sub_1CC2FC960((uint64_t *)a1, (unint64_t)v6, (unint64_t)&v31);
  }
  uint64_t v17 = 0;
  do
  {
    if (&v6[v17] == v4)
    {
      *(void *)unint64_t v6 = v31;
      int64_t v28 = v15 - v6;
      unsigned int v29 = v4;
      unsigned int v30 = v6;
      memmove(v4, v6, v15 - v6);
      uint64_t v26 = (char *)v29 + v28;
      uint64_t v4 = *(char **)a1;
      uint64_t v14 = v30;
      goto LABEL_23;
    }
    unsigned int v18 = *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24) | (v31 >> 1) & 3;
    unsigned int v19 = (*(void *)&v6[v17 - 24] >> 1) & 3 | *(_DWORD *)((*(void *)&v6[v17 - 24] & 0xFFFFFFFFFFFFFFF8)
                                                                        + 24);
    v17 -= 24;
  }
  while (v18 <= v19);
  unsigned int v20 = &v6[v17];
  unsigned int v21 = &v6[v17];
  uint64_t v23 = *((void *)v21 + 1);
  unint64_t v22 = v21 + 8;
  if (((v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v18
    && *((void *)v20 + 2) == v32)
  {
    uint64_t v14 = v20;
  }
  else
  {
    uint64_t v14 = v20 + 24;
    *((void *)v20 + 3) = v31;
    unint64_t v22 = v20 + 32;
  }
  void *v22 = *((void *)v6 + 1);
  uint64_t v24 = v6 + 24;
  int64_t v25 = v15 - v24;
  if (v15 != v24)
  {
    memmove(v14 + 3, v24, v15 - v24);
    uint64_t v4 = *(char **)a1;
  }
  uint64_t v26 = (char *)v14 + v25 + 24;
LABEL_23:
  *(_DWORD *)(a1 + 8) = -1431655765 * ((unint64_t)(v26 - v4) >> 3);
  if ((*(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24) | v16) > ((v14[1] >> 1) & 3 | *(_DWORD *)((v14[1] & 0xFFFFFFFFFFFFFFF8) + 24))) {
    goto LABEL_24;
  }
  return (uint64_t)v14;
}

__n128 llvm::LiveRange::append(uint64_t a1, __n128 *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  unint64_t v3 = *(void *)a1;
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v6 = v3 + 24 * v2;
    if (v3 > (unint64_t)a2 || v6 <= (unint64_t)a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = (__n128 *)(v3 + 24 * *(unsigned int *)(a1 + 8));
  __n128 result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  *uint64_t v4 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::LiveRange::extendInBlock(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 96);
  if (!v10)
  {
    v49[0] = (uint64_t *)a1;
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    if (v14)
    {
      unsigned int v15 = (a5 >> 1) & 3;
      unint64_t v16 = a5 & 0xFFFFFFFFFFFFFFF8;
      if (v15) {
        uint64_t v17 = v16 | (2 * (v15 - 1));
      }
      else {
        uint64_t v17 = *(void *)v16 | 6;
      }
      unsigned int v31 = (v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v32 = *(void *)a1;
      do
      {
        unint64_t v33 = v14 >> 1;
        long long v34 = (uint64_t *)(v32 + 24 * (v14 >> 1));
        uint64_t v36 = *v34;
        uint64_t v35 = v34 + 3;
        v14 += ~(v14 >> 1);
        if (v31 < ((v36 >> 1) & 3 | *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24))) {
          unint64_t v14 = v33;
        }
        else {
          uint64_t v32 = (uint64_t)v35;
        }
      }
      while (v14);
      if (v32 == *(void *)a1)
      {
        if (a3)
        {
          uint64_t v42 = 8 * a3;
          while (1)
          {
            unsigned int v43 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
            if ((*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3) <= v43 && v43 < v31) {
              break;
            }
            ++a2;
            v42 -= 8;
            if (!v42) {
              return 0;
            }
          }
          return 0;
        }
      }
      else
      {
        unsigned int v37 = (*(void *)(v32 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v32 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 24);
        unsigned int v38 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
        if (v37 > v38)
        {
          if (v37 < (*(_DWORD *)(v16 + 24) | v15))
          {
            if (a3)
            {
              uint64_t v39 = 8 * a3;
              do
              {
                unsigned int v40 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
                if (v37 <= v40 && v40 < v31) {
                  return 0;
                }
                ++a2;
                v39 -= 8;
              }
              while (v39);
            }
            sub_1CC2FC81C(v49, (void *)(v32 - 24), a5);
          }
          return *(void *)(v32 - 8);
        }
        if (a3)
        {
          uint64_t v45 = 8 * a3;
          while (1)
          {
            unsigned int v46 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v38 <= v46 && v46 < v31) {
              break;
            }
            ++a2;
            v45 -= 8;
            if (!v45) {
              return 0;
            }
          }
          return 0;
        }
      }
    }
    return 0;
  }
  uint64_t v48 = a1;
  if (!*(void *)(v10 + 16)) {
    return 0;
  }
  unsigned int v11 = (a5 >> 1) & 3;
  unint64_t v12 = a5 & 0xFFFFFFFFFFFFFFF8;
  if (v11) {
    uint64_t v13 = v12 | (2 * (v11 - 1));
  }
  else {
    uint64_t v13 = *(void *)v12 | 6;
  }
  v49[0] = (uint64_t *)v13;
  v49[1] = (uint64_t *)a5;
  void v49[2] = 0;
  unsigned int v18 = (uint64_t **)sub_1CC2FC488((uint64_t)&v48, v49);
  if (**(uint64_t ****)(a1 + 96) == v18)
  {
    if (a3)
    {
      uint64_t v27 = 8 * a3;
      while (1)
      {
        unsigned int v28 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
        if ((*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3) <= v28
          && v28 < (*(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) | (v13 >> 1) & 3))
        {
          break;
        }
        ++a2;
        v27 -= 8;
        if (!v27) {
          return 0;
        }
      }
      return 0;
    }
    return 0;
  }
  unsigned int v19 = *v18;
  if (*v18)
  {
    do
    {
      unsigned int v20 = v19;
      unsigned int v19 = (uint64_t *)v19[1];
    }
    while (v19);
  }
  else
  {
    do
    {
      unsigned int v20 = v18[2];
      BOOL v21 = *v20 == (void)v18;
      unsigned int v18 = (uint64_t **)v20;
    }
    while (v21);
  }
  unsigned int v22 = (v20[5] >> 1) & 3 | *(_DWORD *)((v20[5] & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v23 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
  if (v22 <= v23)
  {
    if (a3)
    {
      uint64_t v29 = 8 * a3;
      while (1)
      {
        unsigned int v30 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v23 <= v30 && v30 < (*(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) | (v13 >> 1) & 3)) {
          break;
        }
        ++a2;
        v29 -= 8;
        if (!v29) {
          return 0;
        }
      }
      return 0;
    }
    return 0;
  }
  if (v22 >= (*(_DWORD *)(v12 + 24) | v11)) {
    return v20[6];
  }
  if (!a3)
  {
LABEL_21:
    sub_1CC2FC58C((uint64_t)&v48, v20, a5);
    return v20[6];
  }
  uint64_t v24 = 8 * a3;
  while (1)
  {
    unsigned int v25 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v22 <= v25 && v25 < (*(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) | (v13 >> 1) & 3)) {
      return 0;
    }
    ++a2;
    v24 -= 8;
    if (!v24) {
      goto LABEL_21;
    }
  }
}

uint64_t llvm::LiveRange::extendInBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    uint64_t v27 = a1;
    if (!*(void *)(v3 + 16)) {
      return 0;
    }
    unsigned int v17 = (a3 >> 1) & 3;
    unint64_t v18 = a3 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v19 = (uint64_t *)(v17 ? v18 | (2 * (v17 - 1)) : *(void *)v18 | 6);
    v28[0] = v19;
    v28[1] = (uint64_t *)a3;
    v28[2] = 0;
    unsigned int v20 = (uint64_t **)sub_1CC2FC488((uint64_t)&v27, v28);
    if (**(uint64_t ****)(a1 + 96) == v20) {
      return 0;
    }
    BOOL v21 = *v20;
    if (*v20)
    {
      do
      {
        unsigned int v22 = v21;
        BOOL v21 = (uint64_t *)v21[1];
      }
      while (v21);
    }
    else
    {
      do
      {
        unsigned int v22 = v20[2];
        BOOL v23 = *v22 == (void)v20;
        unsigned int v20 = (uint64_t **)v22;
      }
      while (v23);
    }
    unsigned int v24 = (v22[5] >> 1) & 3 | *(_DWORD *)((v22[5] & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v24 <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3)) {
      return 0;
    }
    if (v24 < (*(_DWORD *)(v18 + 24) | v17)) {
      sub_1CC2FC58C((uint64_t)&v27, v22, a3);
    }
    return v22[6];
  }
  else
  {
    v28[0] = (uint64_t *)a1;
    unint64_t v4 = *(unsigned int *)(a1 + 8);
    if (!v4) {
      return 0;
    }
    unsigned int v5 = (a3 >> 1) & 3;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v7 = v5 ? v6 | (2 * (v5 - 1)) : *(void *)v6 | 6;
    unsigned int v8 = (v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v9 = *(void *)a1;
    do
    {
      unint64_t v10 = v4 >> 1;
      unsigned int v11 = (uint64_t *)(v9 + 24 * (v4 >> 1));
      uint64_t v13 = *v11;
      unint64_t v12 = v11 + 3;
      v4 += ~(v4 >> 1);
      if (v8 < ((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24))) {
        unint64_t v4 = v10;
      }
      else {
        uint64_t v9 = (uint64_t)v12;
      }
    }
    while (v4);
    if (v9 == *(void *)a1) {
      return 0;
    }
    unsigned int v14 = (*(void *)(v9 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v9 - 16) & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v14 <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3)) {
      return 0;
    }
    if (v14 < (*(_DWORD *)(v6 + 24) | v5)) {
      sub_1CC2FC81C(v28, (void *)(v9 - 24), a3);
    }
    return *(void *)(v9 - 8);
  }
}

void *llvm::LiveRange::removeSegment(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(void *)a1;
  if (!v6)
  {
    unsigned int v11 = 0;
    goto LABEL_23;
  }
  uint64_t v8 = *(void *)(v7 + 24 * v6 - 16);
  unsigned int v9 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  unsigned int v10 = (v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  if (v9 >= v10)
  {
LABEL_23:
    __n128 result = (void *)(v7 + 24 * v11);
    goto LABEL_10;
  }
  __n128 result = *(void **)a1;
  unint64_t v13 = v6;
  do
  {
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = result[3 * (v13 >> 1) + 1];
    LODWORD(v15) = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
    v13 -= (v13 >> 1) + 1;
    BOOL v16 = v9 >= v15;
    if (v9 >= v15) {
      unint64_t v17 = v14 + 1;
    }
    else {
      unint64_t v17 = 0;
    }
    result += 3 * v17;
    if (!v16) {
      unint64_t v13 = v14;
    }
  }
  while (v13);
LABEL_10:
  uint64_t v18 = result[1];
  uint64_t v19 = result[2];
  if (*result == a2)
  {
    if (v18 == a3)
    {
      unsigned int v20 = (char *)(v7 + 24 * v6);
      if (v20 != (char *)(result + 3))
      {
        __n128 result = memmove(result, result + 3, v20 - (char *)(result + 3));
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v6 - 1;
      if (a4)
      {
        return (void *)llvm::LiveRange::removeValNoIfDead(a1, v19);
      }
    }
    else
    {
      *__n128 result = a3;
    }
  }
  else
  {
    result[1] = a2;
    if (v18 != a3)
    {
      v21[0] = a3;
      v21[1] = v18;
      v21[2] = v19;
      return (void *)sub_1CC2FC960((uint64_t *)a1, (unint64_t)(result + 3), (unint64_t)v21);
    }
  }
  return result;
}

uint64_t llvm::LiveRange::removeValNoIfDead(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v3 = (void *)(*(void *)result + 16);
    uint64_t v4 = 24 * v2;
    while (*v3 != a2)
    {
      v3 += 3;
      v4 -= 24;
      if (!v4) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    unsigned int v5 = *(_DWORD *)(result + 72) - 1;
    if (*(_DWORD *)a2 == v5)
    {
      do
      {
        unsigned int v6 = v5;
        if (!v5) {
          break;
        }
        unint64_t v7 = *(void *)(*(void *)(*(void *)(result + 64) + 8 * v5-- - 8) + 8);
      }
      while (v7 < 8);
      *(_DWORD *)(result + 72) = v6;
    }
    else
    {
      *(void *)(a2 + 8) = 0;
    }
  }
  return result;
}

char *llvm::LiveRange::removeSegment(uint64_t a1, char *__dst, int a3)
{
  uint64_t v6 = *((void *)__dst + 2);
  unint64_t v7 = __dst + 24;
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)a1 + 24 * v8;
  if ((char *)v9 != v7)
  {
    memmove(__dst, v7, v9 - (void)v7);
    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v8 - 1;
  if (a3) {
    llvm::LiveRange::removeValNoIfDead(a1, v6);
  }
  return __dst;
}

uint64_t *llvm::LiveRange::removeValNo(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *result;
    uint64_t v5 = 3 * v2;
    uint64_t v6 = *result + 8 * v5;
    uint64_t v7 = 8 * v5;
    uint64_t v8 = 8 * v5 - 24;
    while (1)
    {
      uint64_t v9 = v4 + v3;
      if (*(void *)(v4 + v3 + 16) == a2) {
        break;
      }
      v3 += 24;
      if (v7 == v3)
      {
        uint64_t v9 = v6;
        goto LABEL_12;
      }
    }
    if (v8 != v3)
    {
      unsigned int v10 = (void *)(v9 + 40);
      uint64_t v11 = v7 - v3 - 24;
      do
      {
        if (*v10 != a2)
        {
          long long v12 = *((_OWORD *)v10 - 1);
          *(void *)(v9 + 16) = *v10;
          *(_OWORD *)uint64_t v9 = v12;
          v9 += 24;
        }
        v10 += 3;
        v11 -= 24;
      }
      while (v11);
      uint64_t v4 = *result;
    }
LABEL_12:
    *((_DWORD *)result + 2) = -1431655765 * ((unint64_t)(v9 - v4) >> 3);
    unsigned int v13 = *((_DWORD *)result + 18) - 1;
    if (*(_DWORD *)a2 == v13)
    {
      do
      {
        unsigned int v15 = v13;
        if (!v13) {
          break;
        }
        unint64_t v14 = *(void *)(*(void *)(result[8] + 8 * v13-- - 8) + 8);
      }
      while (v14 < 8);
      *((_DWORD *)result + 18) = v15;
    }
    else
    {
      *(void *)(a2 + 8) = 0;
    }
  }
  return result;
}

void llvm::LiveRange::join(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v37[48] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(unsigned int *)(a1 + 72);
  unint64_t v8 = *((unsigned int *)a5 + 2);
  if (v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *a5;
    while (v9 == *(_DWORD *)(a3 + 4 * v9))
    {
      uint64_t v11 = *(void *)(v10 + 8 * v9);
      if (v11)
      {
        if (v11 != *(void *)(*(void *)(a1 + 64) + 8 * v9)) {
          break;
        }
      }
      if (v7 == ++v9) {
        goto LABEL_19;
      }
    }
    unsigned int v12 = *(_DWORD *)(a1 + 8);
    if (v12)
    {
      unsigned int v13 = *(void **)a1;
      *(void *)(*(void *)a1 + 16) = *(void *)(v10
                                                    + 8
                                                    * *(int *)(a3 + 4 * **(unsigned int **)(*(void *)a1 + 16)));
      if (v12 != 1)
      {
        uint64_t v14 = 24 * v12 - 24;
        unsigned int v15 = v13;
        BOOL v16 = v13;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * *(int *)(a3 + 4 * *(unsigned int *)v15[5]));
          if (v16[2] == v17)
          {
            uint64_t v19 = v16 + 1;
            if (v16[1] == v15[3]) {
              break;
            }
          }
          uint64_t v18 = v16 + 3;
          v16[5] = v17;
          if (v15 != v16)
          {
            v16[3] = v15[3];
            uint64_t v19 = v16 + 4;
            goto LABEL_42;
          }
LABEL_13:
          v15 += 3;
          BOOL v16 = v18;
          v14 -= 24;
          if (!v14) {
            goto LABEL_18;
          }
        }
        uint64_t v18 = v16;
LABEL_42:
        *uint64_t v19 = v15[4];
        goto LABEL_13;
      }
      uint64_t v18 = v13;
LABEL_18:
      *(_DWORD *)(a1 + 8) = -1431655765 * ((unint64_t)((char *)v18 - (char *)v13 + 24) >> 3);
    }
  }
LABEL_19:
  uint64_t v20 = a2[2];
  if (v20)
  {
    uint64_t v21 = *a5;
    uint64_t v22 = 24 * v20;
    BOOL v23 = (void *)(*(void *)a2 + 16);
    do
    {
      *BOOL v23 = *(void *)(v21 + 8 * *(int *)(a4 + 4 * *(unsigned int *)*v23));
      v23 += 3;
      v22 -= 24;
    }
    while (v22);
  }
  if (v8)
  {
    uint64_t v24 = 0;
    unsigned int v25 = 0;
    unsigned int v26 = v7;
    do
    {
      uint64_t v27 = *(_DWORD **)(*a5 + v24);
      if (v27)
      {
        if (v25 >= v7)
        {
          if (v26 >= *(_DWORD *)(a1 + 76)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 64) + 8 * v26) = v27;
          unsigned int v26 = *(_DWORD *)(a1 + 72) + 1;
          *(_DWORD *)(a1 + 72) = v26;
        }
        else
        {
          *(void *)(*(void *)(a1 + 64) + 8 * v25) = v27;
        }
        *uint64_t v27 = v25++;
      }
      v24 += 8;
    }
    while (8 * v8 != v24);
  }
  if (v7 > v8) {
    sub_1CBFC9AD0(a1 + 64, v8);
  }
  v34[0] = a1;
  v34[1] = 0;
  uint64_t v35 = v37;
  uint64_t v36 = 0x1000000000;
  uint64_t v28 = a2[2];
  if (v28)
  {
    uint64_t v29 = *(long long **)a2;
    uint64_t v30 = 24 * v28;
    do
    {
      long long v31 = *v29;
      uint64_t v33 = *((void *)v29 + 2);
      long long v32 = v31;
      llvm::LiveRangeUpdater::add((llvm::LiveRangeUpdater *)v34, (uint64_t *)&v32);
      uint64_t v29 = (long long *)((char *)v29 + 24);
      v30 -= 24;
    }
    while (v30);
  }
  llvm::LiveRangeUpdater::flush((char *)v34);
  if (v35 != v37) {
    free(v35);
  }
}

void llvm::LiveRangeUpdater::add(llvm::LiveRangeUpdater *this, uint64_t *a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(v4 + 96))
  {
    long long v51 = *(_OWORD *)a2;
    uint64_t v52 = a2[2];
    llvm::LiveRange::addSegmentToSet(v4, &v51);
    return;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5 < 8) {
    goto LABEL_57;
  }
  uint64_t v6 = *a2;
  if ((*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24) | (v5 >> 1) & 3) > ((*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
    llvm::LiveRangeUpdater::flush((char *)this);
    uint64_t v4 = *(void *)this;
LABEL_57:
    unint64_t v8 = *(long long **)v4;
    *((void *)this + 2) = *(void *)v4;
    *((void *)this + 3) = v8;
    uint64_t v6 = *a2;
    uint64_t v7 = v8;
    goto LABEL_5;
  }
  uint64_t v7 = *(long long **)v4;
  unint64_t v8 = (long long *)*((void *)this + 3);
LABEL_5:
  *((void *)this + 1) = v6;
  uint64_t v9 = (long long *)((char *)v7 + 24 * *(unsigned int *)(v4 + 8));
  if (v8 != v9
    && ((*((void *)v8 + 1) >> 1) & 3 | *(_DWORD *)((*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3))
  {
    uint64_t v19 = (long long *)*((void *)this + 2);
    if (v8 != v19)
    {
      unint64_t v41 = *((unsigned int *)this + 10);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v19) >> 3) >= v41) {
        unint64_t v42 = *((unsigned int *)this + 10);
      }
      else {
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v19) >> 3);
      }
      unsigned int v43 = (long long *)((char *)v19 + 24 * v42);
      uint64_t v44 = *((void *)this + 4);
      uint64_t v45 = v44 + 24 * v41;
      *((void *)this + 2) = v43;
      if (v42)
      {
        do
        {
          if (v19 == v7
            || ((*((void *)v19 - 3) >> 1) & 3 | *(_DWORD *)((*((void *)v19 - 3) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 24)) <= (*(_DWORD *)((*(void *)(v45 - 24) & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 24) | (*(void *)(v45 - 24) >> 1) & 3))
          {
            long long v46 = *(_OWORD *)(v45 - 24);
            uint64_t v47 = *(void *)(v45 - 8);
            v45 -= 24;
            *((void *)v43 - 1) = v47;
            *(long long *)((char *)v43 - 24) = v46;
            unsigned int v43 = (long long *)((char *)v43 - 24);
          }
          else
          {
            long long v48 = *(long long *)((char *)v19 - 24);
            *((void *)v43 - 1) = *((void *)v19 - 1);
            *(long long *)((char *)v43 - 24) = v48;
            unsigned int v43 = (long long *)((char *)v43 - 24);
            uint64_t v19 = (long long *)((char *)v19 - 24);
          }
        }
        while (v19 != v43);
        unint64_t v8 = (long long *)*((void *)this + 3);
        uint64_t v44 = *((void *)this + 4);
        unsigned int v43 = (long long *)*((void *)this + 2);
      }
      *((_DWORD *)this + 10) = -1431655765 * ((unint64_t)(v45 - v44) >> 3);
      if (v8 != v43)
      {
        while (v8 != v9)
        {
          if (((*((void *)v8 + 1) >> 1) & 3 | *(_DWORD *)((*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 24)) > (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 24) | (*a2 >> 1) & 3))
            goto LABEL_6;
          uint64_t v49 = *((void *)this + 2);
          *((void *)this + 2) = v49 + 24;
          *((void *)this + 3) = (char *)v8 + 24;
          long long v50 = *v8;
          *(void *)(v49 + 16) = *((void *)v8 + 2);
          *(_OWORD *)uint64_t v49 = v50;
          unint64_t v8 = (long long *)*((void *)this + 3);
        }
        goto LABEL_7;
      }
    }
    unint64_t v20 = *(unsigned int *)(*(void *)this + 8);
    unint64_t v8 = **(long long ***)this;
    if (v20)
    {
      uint64_t v21 = *((void *)v8 + 3 * v20 - 2);
      unsigned int v22 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v22 < ((v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        do
        {
          unint64_t v23 = v20 >> 1;
          uint64_t v24 = *((void *)v8 + 3 * (v20 >> 1) + 1);
          LODWORD(v24) = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
          v20 -= (v20 >> 1) + 1;
          BOOL v25 = v22 >= v24;
          if (v22 >= v24) {
            unint64_t v26 = v23 + 1;
          }
          else {
            unint64_t v26 = 0;
          }
          unint64_t v8 = (long long *)((char *)v8 + 24 * v26);
          if (!v25) {
            unint64_t v20 = v23;
          }
        }
        while (v20);
        goto LABEL_28;
      }
    }
    else
    {
      LODWORD(v20) = 0;
    }
    unint64_t v8 = (long long *)((char *)v8 + 24 * v20);
LABEL_28:
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v8;
  }
LABEL_6:
  if (v8 == v9)
  {
LABEL_7:
    uint64_t v10 = a2 + 2;
    goto LABEL_8;
  }
  if (((*(void *)v8 >> 1) & 3 | *(_DWORD *)((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3))
  {
    if (((*((void *)v8 + 1) >> 1) & 3 | *(_DWORD *)((*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((a2[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (a2[1] >> 1) & 3)) {
      return;
    }
    *a2 = *(void *)v8;
    unint64_t v8 = (long long *)((char *)v8 + 24);
    *((void *)this + 3) = v8;
  }
  uint64_t v10 = a2 + 2;
  while (v8 != v9)
  {
    uint64_t v27 = *(void *)v8;
    uint64_t v28 = a2[1];
    if (v28 == *(void *)v8)
    {
      if (*v10 != *((void *)v8 + 2)) {
        goto LABEL_9;
      }
      unsigned int v29 = *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3;
    }
    else
    {
      unsigned int v29 = *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24) | (v28 >> 1) & 3;
      if (v29 < (*(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3)) {
        goto LABEL_9;
      }
    }
    if (v29 < ((*((void *)v8 + 1) >> 1) & 3 | *(_DWORD *)((*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 24)))
      uint64_t v28 = *((void *)v8 + 1);
    a2[1] = v28;
    unint64_t v8 = (long long *)((char *)v8 + 24);
    *((void *)this + 3) = v8;
  }
LABEL_8:
  unint64_t v8 = v9;
LABEL_9:
  unsigned int v11 = *((_DWORD *)this + 10);
  if (v11)
  {
    uint64_t v30 = *((void *)this + 4) + 24 * v11;
    uint64_t v31 = *(void *)(v30 - 16);
    if (v31 == *a2)
    {
      if (*(void *)(v30 - 8) != *v10) {
        goto LABEL_10;
      }
    }
    else if ((*(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24) | (v31 >> 1) & 3) < (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3))
    {
      goto LABEL_10;
    }
    *a2 = *(void *)(v30 - 24);
    uint64_t v40 = *(void *)(v30 - 16);
    if (((v40 >> 1) & 3 | *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((a2[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (a2[1] >> 1) & 3)) {
      uint64_t v40 = a2[1];
    }
    a2[1] = v40;
    *((_DWORD *)this + 10) = --v11;
  }
LABEL_10:
  uint64_t v12 = *((void *)this + 2);
  uint64_t v13 = *(void *)this;
  unint64_t v14 = **(void **)this;
  if (v12 != v14)
  {
    uint64_t v15 = *a2;
    uint64_t v16 = *(void *)(v12 - 16);
    if (v16 == *a2)
    {
      if (*(void *)(v12 - 8) == *v10)
      {
        unsigned int v17 = *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24) | (v15 >> 1) & 3;
LABEL_14:
        uint64_t v18 = a2[1];
        if (v17 >= ((v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24))) {
          uint64_t v18 = *(void *)(v12 - 16);
        }
        *(void *)(v12 - 16) = v18;
        return;
      }
    }
    else
    {
      unsigned int v17 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3;
      if (v17 >= (*(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24) | (v15 >> 1) & 3)) {
        goto LABEL_14;
      }
    }
  }
  if ((long long *)v12 == v8)
  {
    if (v8 == v9)
    {
      unsigned int v36 = *(_DWORD *)(v13 + 8);
      if (v36 >= *(_DWORD *)(v13 + 12))
      {
        if (v14 > (unint64_t)a2 || v14 + 24 * v36 <= (unint64_t)a2) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v37 = v14 + 24 * *(unsigned int *)(v13 + 8);
      long long v38 = *(_OWORD *)a2;
      *(void *)(v37 + 16) = a2[2];
      *(_OWORD *)unint64_t v37 = v38;
      ++*(_DWORD *)(v13 + 8);
      uint64_t v39 = **(void **)this + 24 * *(unsigned int *)(*(void *)this + 8);
      *((void *)this + 2) = v39;
      *((void *)this + 3) = v39;
    }
    else
    {
      unint64_t v32 = *((void *)this + 4);
      if (v11 >= *((_DWORD *)this + 11))
      {
        if (v32 > (unint64_t)a2 || v32 + 24 * v11 <= (unint64_t)a2) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v33 = v32 + 24 * *((unsigned int *)this + 10);
      long long v34 = *(_OWORD *)a2;
      *(void *)(v33 + 16) = a2[2];
      *(_OWORD *)unint64_t v33 = v34;
      ++*((_DWORD *)this + 10);
    }
  }
  else
  {
    *((void *)this + 2) = v12 + 24;
    long long v35 = *(_OWORD *)a2;
    *(void *)(v12 + 16) = a2[2];
    *(_OWORD *)uint64_t v12 = v35;
  }
}

void llvm::LiveRange::MergeSegmentsInAsValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[48] = *MEMORY[0x1E4F143B8];
  v10[0] = a1;
  v10[1] = 0;
  unsigned int v11 = v13;
  uint64_t v12 = 0x1000000000;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    unint64_t v5 = *(long long **)a2;
    uint64_t v6 = 24 * v3;
    do
    {
      long long v7 = *v5;
      unint64_t v5 = (long long *)((char *)v5 + 24);
      long long v8 = v7;
      uint64_t v9 = a3;
      llvm::LiveRangeUpdater::add((llvm::LiveRangeUpdater *)v10, (uint64_t *)&v8);
      v6 -= 24;
    }
    while (v6);
  }
  llvm::LiveRangeUpdater::flush((char *)v10);
  if (v11 != v13) {
    free(v11);
  }
}

void llvm::LiveRange::MergeValueInAsValue(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  v14[48] = *MEMORY[0x1E4F143B8];
  v11[0] = a1;
  v11[1] = 0;
  uint64_t v12 = v14;
  uint64_t v13 = 0x1000000000;
  uint64_t v4 = a2[2];
  if (v4)
  {
    long long v7 = (void *)(*(void *)a2 + 16);
    uint64_t v8 = 24 * v4;
    do
    {
      if (*v7 == a3)
      {
        long long v9 = *((_OWORD *)v7 - 1);
        uint64_t v10 = a4;
        llvm::LiveRangeUpdater::add((llvm::LiveRangeUpdater *)v11, (uint64_t *)&v9);
      }
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  llvm::LiveRangeUpdater::flush((char *)v11);
  if (v12 != v14) {
    free(v12);
  }
}

uint64_t llvm::LiveRange::MergeValueNumberInto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (*(_DWORD *)a2 >= *(_DWORD *)a3)
  {
    uint64_t v5 = a2;
    uint64_t v3 = a3;
  }
  else
  {
    *(void *)(a2 + 8) = *(void *)(a3 + 8);
    uint64_t v5 = a3;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    long long v7 = *(char **)a1;
    uint64_t v8 = *(void *)a1 + 24 * v6;
    long long v9 = *(char **)a1;
    while (1)
    {
      uint64_t v10 = v9 + 24;
      if (*((void *)v9 + 2) == v5) {
        break;
      }
LABEL_6:
      uint64_t v8 = (uint64_t)&v7[24 * v6];
      long long v9 = v10;
      if (v10 == (char *)v8) {
        goto LABEL_18;
      }
    }
    if (v9 == v7)
    {
      unsigned int v11 = v7;
    }
    else
    {
      if (*((void *)v9 - 1) == v3 && *((void *)v9 - 2) == *(void *)v9)
      {
        *((void *)v9 - 2) = *((void *)v9 + 1);
        if ((char *)v8 != v10)
        {
          memmove(v9, v10, v8 - (void)v10);
          unsigned int v6 = *(_DWORD *)(a1 + 8);
          long long v7 = *(char **)a1;
        }
        unsigned int v11 = v9 - 24;
        *(_DWORD *)(a1 + 8) = --v6;
        goto LABEL_12;
      }
      unsigned int v11 = v9;
    }
    v9 += 24;
LABEL_12:
    *((void *)v11 + 2) = v3;
    uint64_t v12 = &v7[24 * v6];
    if (v9 != v12 && *(void *)v9 == *((void *)v11 + 1) && *((void *)v9 + 2) == v3)
    {
      *((void *)v11 + 1) = *((void *)v9 + 1);
      if (v12 != v9 + 24)
      {
        memmove(v9, v9 + 24, v12 - (v9 + 24));
        unsigned int v6 = *(_DWORD *)(a1 + 8);
        long long v7 = *(char **)a1;
      }
      *(_DWORD *)(a1 + 8) = --v6;
      uint64_t v10 = v11 + 24;
    }
    else
    {
      uint64_t v10 = v9;
    }
    goto LABEL_6;
  }
LABEL_18:
  unsigned int v13 = *(_DWORD *)(a1 + 72) - 1;
  if (*(_DWORD *)v5 == v13)
  {
    do
    {
      unsigned int v14 = v13;
      if (!v13) {
        break;
      }
      unint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8 * v13-- - 8) + 8);
    }
    while (v15 < 8);
    *(_DWORD *)(a1 + 72) = v14;
  }
  else
  {
    *(void *)(v5 + 8) = 0;
  }
  return v3;
}

uint64_t llvm::LiveRange::flushSegmentSet(uint64_t this)
{
  unsigned int v1 = *(void **)(this + 96);
  uint64_t v4 = (void *)*v1;
  uint64_t v2 = v1 + 1;
  uint64_t v3 = v4;
  if (v4 == v2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v8 = v3;
    do
    {
      long long v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          long long v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          uint64_t v8 = v10;
        }
        while (!v11);
      }
      ++v5;
      uint64_t v8 = v10;
    }
    while (v10 != v2);
  }
  uint64_t v6 = *(unsigned int *)(this + 8);
  if (v5 + v6 > (unint64_t)*(unsigned int *)(this + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v3 != v2)
  {
    uint64_t v12 = *(void *)this + 24 * v6;
    do
    {
      long long v13 = *((_OWORD *)v3 + 2);
      *(void *)(v12 + 16) = v3[6];
      *(_OWORD *)uint64_t v12 = v13;
      unsigned int v14 = (void *)v3[1];
      if (v14)
      {
        do
        {
          unint64_t v15 = v14;
          unsigned int v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v15 = (void *)v3[2];
          BOOL v11 = *v15 == (void)v3;
          uint64_t v3 = v15;
        }
        while (!v11);
      }
      v12 += 24;
      uint64_t v3 = v15;
    }
    while (v15 != v2);
    LODWORD(v6) = *(_DWORD *)(this + 8);
  }
  *(_DWORD *)(this + 8) = v6 + v5;
  uint64_t v7 = *(void *)(this + 96);
  *(void *)(this + 96) = 0;
  if (v7)
  {
    sub_1CB833A08(v7, *(void **)(v7 + 8));
    JUMPOUT(0x1D25D9CE0);
  }
  return this;
}

uint64_t llvm::LiveRange::isLiveAtIndexes(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (!v4)
  {
    unsigned int v4 = 0;
    goto LABEL_22;
  }
  uint64_t v6 = v5[3 * v4 - 2];
  unsigned int v7 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v7 >= ((v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_22:
    uint64_t v8 = &v5[3 * v4];
    goto LABEL_12;
  }
  uint64_t v8 = *(void **)a1;
  unint64_t v9 = *(unsigned int *)(a1 + 8);
  do
  {
    unint64_t v10 = v9 >> 1;
    uint64_t v11 = v8[3 * (v9 >> 1) + 1];
    LODWORD(v11) = (v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24);
    v9 -= (v9 >> 1) + 1;
    BOOL v12 = v7 >= v11;
    if (v7 >= v11) {
      unint64_t v13 = v10 + 1;
    }
    else {
      unint64_t v13 = 0;
    }
    v8 += 3 * v13;
    if (!v12) {
      unint64_t v9 = v10;
    }
  }
  while (v9);
LABEL_12:
  unsigned int v14 = &v5[3 * v4];
  if (v8 != v14)
  {
    unint64_t v15 = &a2[a3];
    while (1)
    {
      unsigned int v16 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v16 >= ((*(v14 - 2) >> 1) & 3 | *(_DWORD *)((*(v14 - 2) & 0xFFFFFFFFFFFFFFF8) + 24))) {
        break;
      }
      v8 -= 3;
      do
      {
        unsigned int v17 = (v8[4] >> 1) & 3 | *(_DWORD *)((v8[4] & 0xFFFFFFFFFFFFFFF8) + 24);
        v8 += 3;
      }
      while (v17 <= v16);
      if (v8 == v14) {
        break;
      }
      if (((*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v16) {
        return 1;
      }
      uint64_t result = 0;
      if (++a2 == v15) {
        return result;
      }
    }
  }
  return 0;
}

void llvm::LiveInterval::freeSubRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  if (v3)
  {
    sub_1CB833A08(v3, *(void **)(v3 + 8));
    MEMORY[0x1D25D9CE0](v3, 0x1020C4062D53EE8);
  }
  unsigned int v4 = *(void **)(a2 + 64);
  if (v4 != (void *)(a2 + 80)) {
    free(v4);
  }
  uint64_t v5 = *(void **)a2;
  if (*(void *)a2 != a2 + 16)
  {
    free(v5);
  }
}

void llvm::LiveInterval::removeEmptySubRanges(llvm::LiveInterval *this)
{
  unsigned int v1 = (void *)((char *)this + 104);
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = v2;
      if (!*(_DWORD *)(v2 + 8)) {
        break;
      }
LABEL_4:
      unsigned int v1 = (void *)(v2 + 104);
      uint64_t v2 = *(void *)(v2 + 104);
      if (!v2) {
        return;
      }
    }
    while (1)
    {
      uint64_t v4 = *(void *)(v3 + 96);
      uint64_t v2 = *(void *)(v3 + 104);
      *(void *)(v3 + 96) = 0;
      if (v4)
      {
        uint64_t v8 = v2;
        uint64_t v6 = v4;
        sub_1CB833A08(v4, *(void **)(v4 + 8));
        uint64_t v7 = v6;
        uint64_t v2 = v8;
        MEMORY[0x1D25D9CE0](v7, 0x1020C4062D53EE8);
      }
      uint64_t v5 = *(void **)(v3 + 64);
      if (v5 != (void *)(v3 + 80)) {
        free(v5);
      }
      if (*(void *)v3 != v3 + 16) {
        free(*(void **)v3);
      }
      if (!v2) {
        break;
      }
      uint64_t v3 = v2;
      if (*(_DWORD *)(v2 + 8))
      {
        *unsigned int v1 = v2;
        goto LABEL_4;
      }
    }
    *unsigned int v1 = 0;
  }
}

void llvm::LiveInterval::clearSubRanges(llvm::LiveInterval *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 96);
      uint64_t v4 = *(void *)(v2 + 104);
      *(void *)(v2 + 96) = 0;
      if (v3)
      {
        uint64_t v8 = v2;
        uint64_t v6 = v3;
        sub_1CB833A08(v3, *(void **)(v3 + 8));
        uint64_t v7 = v6;
        uint64_t v2 = v8;
        MEMORY[0x1D25D9CE0](v7, 0x1020C4062D53EE8);
      }
      uint64_t v5 = *(void **)(v2 + 64);
      if (v5 != (void *)(v2 + 80)) {
        free(v5);
      }
      if (*(void *)v2 != v2 + 16) {
        free(*(void **)v2);
      }
      uint64_t v2 = v4;
    }
    while (v4);
  }
  *((void *)this + 13) = 0;
}

void llvm::LiveInterval::refineSubRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *__sz, uint64_t a7)
{
  uint64_t v11 = *(void *)(a1 + 104);
  if (v11)
  {
    uint64_t v14 = a3;
    while (1)
    {
      uint64_t v15 = *(void *)(v11 + 112);
      uint64_t v16 = v15 & a3;
      if ((v15 & a3) != 0)
      {
        unsigned int v17 = (void *)v11;
        if (v15 != v16)
        {
          *(void *)(v11 + 112) = v16 ^ v15;
          *(void *)(a2 + 80) += 120;
          if (((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 120 > *(void *)(a2 + 8)
                                                                                    - *(void *)a2)
          {
            unsigned int v22 = *(_DWORD *)(a2 + 24) >> 7;
            if (v22 >= 0x1E) {
              LOBYTE(v22) = 30;
            }
            uint64_t v32 = 4096 << v22;
            unsigned int v17 = operator new(4096 << v22, (std::align_val_t)8uLL);
            unint64_t v23 = *(unsigned int *)(a2 + 24);
            if (v23 >= *(unsigned int *)(a2 + 28)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a2 + 16) + 8 * v23) = v17;
            ++*(_DWORD *)(a2 + 24);
            *(void *)(a2 + 8) = (char *)v17 + v32;
          }
          else
          {
            unsigned int v17 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
          *(void *)a2 = v17 + 15;
          *unsigned int v17 = v17 + 2;
          v17[1] = 0x200000000;
          v17[8] = v17 + 10;
          v17[9] = 0x200000000;
          v17[12] = 0;
          sub_1CC2CD2F8((uint64_t)v17, v11, a2);
          v17[13] = *(void *)(a1 + 104);
          v17[14] = v16;
          *(void *)(a1 + 104) = v17;
          sub_1CC2FA11C(*(_DWORD *)(a1 + 112), (uint64_t)v17, v16, __sz, a7);
          sub_1CC2FA11C(*(_DWORD *)(a1 + 112), v11, *(void *)(v11 + 112), __sz, a7);
        }
        uint64_t v18 = *(void *)(a4 + 24);
        if (!v18) {
          goto LABEL_30;
        }
        (*(void (**)(uint64_t, void *))(*(void *)v18 + 48))(v18, v17);
        v14 &= ~v16;
      }
      uint64_t v11 = *(void *)(v11 + 104);
      if (!v11) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v14 = a3;
LABEL_13:
  if (v14)
  {
    *(void *)(a2 + 80) += 120;
    if (((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 120 > *(void *)(a2 + 8) - *(void *)a2)
    {
      unsigned int v24 = *(_DWORD *)(a2 + 24) >> 7;
      if (v24 >= 0x1E) {
        LOBYTE(v24) = 30;
      }
      uint64_t v25 = 4096 << v24;
      uint64_t v19 = operator new(4096 << v24, (std::align_val_t)8uLL);
      unsigned int v26 = *(_DWORD *)(a2 + 24);
      if (v26 >= *(_DWORD *)(a2 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a2 + 16) + 8 * v26) = v19;
      ++*(_DWORD *)(a2 + 24);
      *(void *)(a2 + 8) = (char *)v19 + v25;
    }
    else
    {
      uint64_t v19 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *(void *)a2 = v19 + 15;
    *uint64_t v19 = v19 + 2;
    v19[1] = 0x200000000;
    v19[8] = v19 + 10;
    v19[9] = 0x200000000;
    v19[12] = 0;
    v19[13] = 0;
    v19[13] = *(void *)(a1 + 104);
    v19[14] = v14;
    *(void *)(a1 + 104) = v19;
    uint64_t v20 = *(void *)(a4 + 24);
    if (v20)
    {
      uint64_t v21 = *(void (**)(void))(*(void *)v20 + 48);
      v21();
    }
    else
    {
LABEL_30:
      sub_1CB920400();
      sub_1CC2FA11C(v27, v28, v29, v30, v31);
    }
  }
}

void sub_1CC2FA11C(int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v36[8] = *MEMORY[0x1E4F143B8];
  if (a1 < 0)
  {
    unsigned int v35 = 0;
    uint64_t v5 = *(unsigned int *)(a2 + 72);
    if (v5)
    {
      unint64_t v10 = *(uint64_t **)(a2 + 64);
      unint64_t v33 = &v10[v5];
      do
      {
        uint64_t v34 = *v10;
        unint64_t v11 = *(void *)(*v10 + 8);
        if (v11 >= 8 && (*(void *)(*v10 + 8) & 6) != 0)
        {
          unint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
          unint64_t v14 = v13;
          if ((*(_WORD *)(v13 + 44) & 4) != 0)
          {
            unint64_t v14 = v13;
            do
              unint64_t v14 = *(void *)v14 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v14 + 44) & 4) != 0);
          }
          uint64_t v15 = *(void *)(v13 + 24) + 48;
          uint64_t v16 = *(unsigned int **)(v14 + 32);
          uint64_t v17 = *(unsigned int *)(v14 + 40);
          uint64_t v18 = &v16[8 * v17];
          if (!v17)
          {
            unint64_t v26 = *(void *)(v14 + 8);
            if (v26 == v15)
            {
              unint64_t v14 = v15;
              goto LABEL_11;
            }
            unint64_t v14 = v15;
            if ((*(_WORD *)(v26 + 44) & 4) == 0) {
              goto LABEL_11;
            }
            while (1)
            {
              unint64_t v27 = v26;
              uint64_t v28 = *(unsigned int *)(v26 + 40);
              if (v28) {
                break;
              }
              unint64_t v26 = *(void *)(v26 + 8);
              if (v26 == v15 || (*(_WORD *)(v26 + 44) & 4) == 0)
              {
                unint64_t v14 = v15;
LABEL_42:
                uint64_t v16 = *(unsigned int **)(v27 + 32);
                uint64_t v18 = &v16[8 * v28];
                goto LABEL_11;
              }
            }
            unint64_t v14 = v26;
            goto LABEL_42;
          }
LABEL_11:
          while (v16 != v18)
          {
            unint64_t v19 = *v16;
            if ((v19 & 0x10000FF) == 0x1000000 && v16[1] == a1)
            {
              uint64_t v20 = *(void *)(a4[29] + 8 * ((v19 >> 8) & 0xFFF));
              if (a5)
              {
                uint64_t v21 = a3;
                uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a4 + 216))(a4, a5, v20);
                a3 = v21;
                uint64_t v20 = v22;
              }
              if ((v20 & a3) != 0) {
                goto LABEL_28;
              }
            }
            v16 += 8;
            if (v16 == v18)
            {
              unint64_t v23 = *(void *)(v14 + 8);
              if (v23 == v15) {
                break;
              }
              uint64_t v16 = v18;
              unint64_t v14 = v15;
              if ((*(_WORD *)(v23 + 44) & 4) != 0)
              {
                while (1)
                {
                  unint64_t v24 = v23;
                  uint64_t v25 = *(unsigned int *)(v23 + 40);
                  if (v25) {
                    break;
                  }
                  unint64_t v23 = *(void *)(v23 + 8);
                  if (v23 == v15 || (*(_WORD *)(v23 + 44) & 4) == 0)
                  {
                    unint64_t v14 = v15;
                    goto LABEL_25;
                  }
                }
                unint64_t v14 = v23;
LABEL_25:
                uint64_t v16 = *(unsigned int **)(v24 + 32);
                uint64_t v18 = &v16[8 * v25];
              }
            }
          }
          if (v35 >= 8uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v36[v35++] = v34;
        }
LABEL_28:
        ++v10;
      }
      while (v10 != v33);
      uint64_t v29 = v36;
      if (v35)
      {
        uint64_t v30 = 8 * v35;
        do
        {
          uint64_t v31 = *v29++;
          llvm::LiveRange::removeValNo((uint64_t *)a2, v31);
          v30 -= 8;
        }
        while (v30);
      }
    }
  }
}

uint64_t llvm::LiveInterval::getSize(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)this;
  LODWORD(this) = 0;
  uint64_t v3 = *v2;
  uint64_t v4 = 24 * v1;
  uint64_t v5 = (void *)(v3 + 8);
  do
  {
    this = ((*v5 >> 1) & 3 | *(_DWORD *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 24))
         + this
         - ((*(v5 - 1) >> 1) & 3 | *(_DWORD *)((*(v5 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
    v5 += 3;
    v4 -= 24;
  }
  while (v4);
  return this;
}

uint64_t llvm::LiveInterval::computeSubRangeUndefs(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)((*(void *)(a4[3] + 16 * (*(_DWORD *)(a1 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*a4 + 16) + 176))(*(void *)(*a4 + 16));
  uint64_t v12 = *(unsigned int *)(a1 + 112);
  if ((v12 & 0x80000000) != 0) {
    unint64_t v13 = (int **)(a4[3] + 16 * (v12 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v13 = (int **)(a4[34] + 8 * v12);
  }
  unint64_t v14 = *v13;
  if (*v13)
  {
    unsigned int v15 = *v14;
    if ((*v14 & 0x1000000) != 0 || (unint64_t v14 = (int *)*((void *)v14 + 3)) != 0 && (v15 = *v14, (*v14 & 0x1000000) != 0))
    {
      uint64_t v16 = v10 & a3;
      while ((v15 & 0x10000000) == 0
           || (v16 & ~*(void *)(*(void *)(result + 232) + 8 * ((v15 >> 8) & 0xFFF))) == 0)
      {
LABEL_8:
        unint64_t v14 = (int *)*((void *)v14 + 3);
        if (v14)
        {
          unsigned int v15 = *v14;
          if ((*v14 & 0x1000000) != 0) {
            continue;
          }
        }
        return result;
      }
      unint64_t v17 = *((void *)v14 + 1);
      __int16 v18 = *(_WORD *)(v17 + 44);
      unint64_t v19 = v17;
      if ((v18 & 0xC) != 0)
      {
        if ((v18 & 4) != 0)
        {
          unint64_t v19 = *((void *)v14 + 1);
          do
            unint64_t v19 = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v19 + 44) & 4) != 0);
        }
        if ((v18 & 8) != 0)
        {
          do
            unint64_t v17 = *(void *)(v17 + 8);
          while ((*(_WORD *)(v17 + 44) & 8) != 0);
        }
      }
      unint64_t v20 = *(void *)(v17 + 8);
      if (v19 != v20)
      {
        while (1)
        {
          unsigned int v21 = **(unsigned __int16 **)(v19 + 16);
          BOOL v22 = v21 > 0x17;
          int v23 = (1 << v21) & 0x83E000;
          if (v22 || v23 == 0) {
            break;
          }
          unint64_t v19 = *(void *)(v19 + 8);
          if (v19 == v20)
          {
            unint64_t v19 = v20;
            break;
          }
        }
      }
      uint64_t v25 = *(void *)(a5 + 368);
      uint64_t v26 = *(unsigned int *)(a5 + 384);
      if (v26)
      {
        LODWORD(v27) = ((v19 >> 4) ^ (v19 >> 9)) & (v26 - 1);
        uint64_t v28 = (uint64_t *)(v25 + 16 * v27);
        uint64_t v29 = *v28;
        if (v19 == *v28)
        {
LABEL_21:
          if ((v15 & 0x40000000) != 0) {
            uint64_t v30 = 2;
          }
          else {
            uint64_t v30 = 4;
          }
          unint64_t v31 = *(unsigned int *)(a2 + 8);
          if (v31 >= *(unsigned int *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a2 + 8 * v31) = v28[1] & 0xFFFFFFFFFFFFFFF8 | v30;
          ++*(_DWORD *)(a2 + 8);
          goto LABEL_8;
        }
        int v33 = 1;
        while (v29 != -4096)
        {
          int v32 = v27 + v33++;
          uint64_t v27 = v32 & (v26 - 1);
          uint64_t v29 = *(void *)(v25 + 16 * v27);
          if (v19 == v29)
          {
            uint64_t v28 = (uint64_t *)(v25 + 16 * v27);
            goto LABEL_21;
          }
        }
      }
      uint64_t v28 = (uint64_t *)(v25 + 16 * v26);
      goto LABEL_21;
    }
  }
  return result;
}

char *llvm::LiveRangeUpdater::flush(char *this)
{
  if (*((void *)this + 1) >= 8uLL)
  {
    uint64_t v1 = (uint64_t)this;
    uint64_t v3 = this + 40;
    unint64_t v2 = *((unsigned int *)this + 10);
    *((void *)this + 1) = 0;
    if (v2)
    {
      uint64_t v12 = *((void *)this + 2);
      unint64_t v11 = (const void *)*((void *)this + 3);
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - v12) >> 3);
      unint64_t v14 = *(void **)this;
      if (v2 <= v13)
      {
        BOOL v22 = (void *)(v12 + 24 * v2);
        uint64_t v16 = *v14;
        uint64_t v23 = *v14 + 24 * *((unsigned int *)v14 + 2);
        uint64_t v24 = v23 - (void)v11;
        if ((const void *)v23 == v11)
        {
          uint64_t v25 = *v14;
        }
        else
        {
          this = (char *)memmove(v22, v11, v23 - (void)v11);
          uint64_t v25 = *v14;
          uint64_t v12 = *(void *)(v1 + 16);
          uint64_t v16 = **(void **)v1;
        }
        *((_DWORD *)v14 + 2) = -1431655765 * (((unint64_t)v22 + v24 - v25) >> 3);
      }
      else
      {
        uint64_t v15 = v12 - *v14;
        memset(v26, 0, sizeof(v26));
        this = sub_1CC2FA9D8((uint64_t)v14, (unint64_t)v11, v2 - v13, (unint64_t)v26);
        uint64_t v16 = **(void **)v1;
        uint64_t v12 = v16 + v15;
      }
      uint64_t v17 = *(unsigned int *)(v1 + 40);
      uint64_t v18 = v12 + 24 * v17;
      uint64_t v7 = *(void *)(v1 + 32);
      uint64_t v10 = (char *)(v7 + 24 * v17);
      *(void *)(v1 + 16) = v18;
      *(void *)(v1 + 24) = v18;
      if (v17)
      {
        do
        {
          if (v12 == v16
            || ((*(void *)(v12 - 24) >> 1) & 3 | *(_DWORD *)((*(void *)(v12 - 24) & 0xFFFFFFFFFFFFFFF8)
                                                                           + 24)) <= (*(_DWORD *)((*((void *)v10 - 3) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 24) | (*((void *)v10 - 3) >> 1) & 3))
          {
            long long v19 = *(_OWORD *)(v10 - 24);
            uint64_t v20 = *((void *)v10 - 1);
            v10 -= 24;
            *(void *)(v18 - 8) = v20;
            *(_OWORD *)(v18 - 24) = v19;
            v18 -= 24;
          }
          else
          {
            long long v21 = *(_OWORD *)(v12 - 24);
            *(void *)(v18 - 8) = *(void *)(v12 - 8);
            *(_OWORD *)(v18 - 24) = v21;
            v18 -= 24;
            v12 -= 24;
          }
        }
        while (v12 != v18);
        uint64_t v7 = *(void *)(v1 + 32);
      }
    }
    else
    {
      uint64_t v4 = *(uint64_t **)this;
      uint64_t v6 = (char *)*((void *)this + 2);
      uint64_t v5 = (unsigned char *)*((void *)this + 3);
      uint64_t v7 = **(void **)this;
      uint64_t v3 = (_DWORD *)(*(void *)this + 8);
      uint64_t v8 = (unsigned char *)(v7 + 24 * *v3);
      int64_t v9 = v8 - v5;
      if (v8 != v5)
      {
        this = (char *)memmove(v6, v5, v8 - v5);
        uint64_t v7 = *v4;
      }
      uint64_t v10 = &v6[v9];
    }
    _DWORD *v3 = -1431655765 * ((unint64_t)&v10[-v7] >> 3);
  }
  return this;
}

uint64_t **llvm::LiveRangeUpdater::mergeSpills(uint64_t **this)
{
  uint64_t v1 = this[2];
  unint64_t v2 = *((unsigned int *)this + 10);
  if (0xAAAAAAAAAAAAAAABLL * (this[3] - v1) >= v2) {
    unint64_t v3 = *((unsigned int *)this + 10);
  }
  else {
    unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (this[3] - v1);
  }
  uint64_t v4 = &v1[3 * v3];
  uint64_t v5 = this[4];
  uint64_t v6 = &v5[3 * v2];
  uint64_t v7 = (uint64_t *)**this;
  this[2] = v4;
  if (v3)
  {
    do
    {
      if (v1 == v7
        || ((*(v1 - 3) >> 1) & 3 | *(_DWORD *)((*(v1 - 3) & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((*(v6 - 3) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(v6 - 3) >> 1) & 3))
      {
        long long v8 = *(_OWORD *)(v6 - 3);
        uint64_t v9 = *(v6 - 1);
        v6 -= 3;
        *(v4 - 1) = v9;
        *(_OWORD *)(v4 - 3) = v8;
        v4 -= 3;
      }
      else
      {
        long long v10 = *(_OWORD *)(v1 - 3);
        *(v4 - 1) = *(v1 - 1);
        *(_OWORD *)(v4 - 3) = v10;
        v4 -= 3;
        v1 -= 3;
      }
    }
    while (v1 != v4);
    uint64_t v5 = this[4];
  }
  *((_DWORD *)this + 10) = -1431655765 * ((unint64_t)((char *)v6 - (char *)v5) >> 3);
  return this;
}

char *sub_1CC2FA9D8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  unint64_t v5 = a3;
  unint64_t v7 = *(void *)a1;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - *(void *)a1) >> 3);
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  unint64_t v9 = *(unsigned int *)(a1 + 12);
  unint64_t v11 = *(void *)a1 + 24 * v10;
  unint64_t v12 = v10 + a3;
  if (v11 == a2)
  {
    if (v12 > v9)
    {
      if (a2 <= a4 || v7 > a4) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v24 = *(_DWORD *)(a1 + 8);
    if (v5)
    {
      unint64_t v25 = v7 + 24 * v24;
      unint64_t v26 = v5;
      do
      {
        long long v27 = *(_OWORD *)a4;
        *(void *)(v25 + 16) = *(void *)(a4 + 16);
        *(_OWORD *)unint64_t v25 = v27;
        v25 += 24;
        --v26;
      }
      while (v26);
      unsigned int v24 = *(_DWORD *)(a1 + 8);
      unint64_t v7 = *(void *)a1;
    }
    *(_DWORD *)(a1 + 8) = v24 + v5;
    return (char *)(v7 + 24 * v8);
  }
  else
  {
    if (v12 > v9)
    {
      if (v7 > a4 || v11 <= a4) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v13 = (char *)(v7 + 8 * ((uint64_t)(a2 - *(void *)a1) >> 3));
    uint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v7 + 24 * v14;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v13) >> 3);
    uint64_t v17 = v16 - v5;
    if (v16 < v5)
    {
      *(_DWORD *)(a1 + 8) = v14 + v5;
      if (v8 != v14) {
        memcpy((void *)(v7 + 24 * (v14 + v5) - 8 * ((uint64_t)(v15 - (void)v13) >> 3)), v13, v15 - (void)v13);
      }
      if ((unint64_t)v13 <= v4)
      {
        if (v4 >= *(void *)a1 + 24 * (unint64_t)*(unsigned int *)(a1 + 8)) {
          unint64_t v29 = 0;
        }
        else {
          unint64_t v29 = v5;
        }
        v4 += 24 * v29;
      }
      if (v8 != v14)
      {
        uint64_t v30 = v13;
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v13) >> 3);
        do
        {
          long long v32 = *(_OWORD *)v4;
          *((void *)v30 + 2) = *(void *)(v4 + 16);
          *(_OWORD *)uint64_t v30 = v32;
          v30 += 24;
          --v31;
        }
        while (v31);
      }
      if (v5 != v16)
      {
        do
        {
          long long v33 = *(_OWORD *)v4;
          *(void *)(v15 + 16) = *(void *)(v4 + 16);
          *(_OWORD *)unint64_t v15 = v33;
          v15 += 24;
        }
        while (!__CFADD__(v17++, 1));
      }
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(24 * v5) >> 3) + v14 > *(unsigned int *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v18 = -24 * v5;
      if (-24 * v5)
      {
        uint64_t v19 = *(void *)a1 + 24 * v14;
        do
        {
          long long v20 = *(_OWORD *)(v15 + v18);
          *(void *)(v19 + 16) = *(void *)(v15 + v18 + 16);
          *(_OWORD *)uint64_t v19 = v20;
          v19 += 24;
          v18 += 24;
        }
        while (v18);
        LODWORD(v14) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v14 - 1431655765 * ((uint64_t)(24 * v5) >> 3);
      if ((char *)(v15 - 24 * v5) != v13) {
        memmove(&v13[24 * v5], v13, v15 - 24 * v5 - (void)v13);
      }
      if ((unint64_t)v13 <= v4)
      {
        if (v4 >= *(void *)a1 + 24 * (unint64_t)*(unsigned int *)(a1 + 8)) {
          unint64_t v21 = 0;
        }
        else {
          unint64_t v21 = v5;
        }
        v4 += 24 * v21;
      }
      if (v5)
      {
        BOOL v22 = v13;
        do
        {
          long long v23 = *(_OWORD *)v4;
          *((void *)v22 + 2) = *(void *)(v4 + 16);
          *(_OWORD *)BOOL v22 = v23;
          v22 += 24;
          --v5;
        }
        while (v5);
      }
    }
  }
  return v13;
}

uint64_t llvm::ConnectedVNInfoEqClasses::Classify(llvm::ConnectedVNInfoEqClasses *this, const llvm::LiveRange *a2)
{
  unsigned int v4 = 0;
  unint64_t v5 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 14) = 0;
  unsigned int v6 = *((_DWORD *)a2 + 18);
  if (*((_DWORD *)this + 5) < v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  while (v4 < v6)
  {
    if (v4 >= *((_DWORD *)this + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*((void *)this + 1) + 4 * v4) = v4;
    unsigned int v4 = *((_DWORD *)this + 4) + 1;
    *((_DWORD *)this + 4) = v4;
  }
  uint64_t v7 = *((unsigned int *)a2 + 18);
  if (v7)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = (unsigned int **)*((void *)a2 + 8);
    unint64_t v11 = &v10[v7];
    unint64_t v12 = *(void **)a2;
    uint64_t v13 = *(void *)a2 - 16;
    while (1)
    {
      uint64_t v14 = v9;
      unint64_t v15 = *v10;
      unint64_t v16 = *((void *)*v10 + 1);
      if (v16 > 7) {
        break;
      }
      unint64_t v65 = v9;
      unint64_t v29 = *v10;
      unint64_t v9 = *v10;
      if (v14) {
        goto LABEL_78;
      }
LABEL_26:
      if (++v10 == v11)
      {
        if (v8 && v9)
        {
          unint64_t v67 = *v8;
          unint64_t v68 = *v9;
          uint64_t v69 = *v5;
          unint64_t v70 = *(unsigned int *)(*v5 + 4 * v67);
          unint64_t v71 = *(unsigned int *)(*v5 + 4 * v68);
          while (v70 != v71)
          {
            if (v70 < v71)
            {
              *(_DWORD *)(v69 + 4 * v68) = v70;
              unint64_t v68 = v71;
              unint64_t v71 = *(unsigned int *)(v69 + 4 * v71);
            }
            else
            {
              *(_DWORD *)(v69 + 4 * v67) = v71;
              unint64_t v67 = v70;
              unint64_t v70 = *(unsigned int *)(v69 + 4 * v70);
            }
          }
        }
        goto LABEL_67;
      }
    }
    if ((v16 & 6) != 0)
    {
      unsigned int v17 = (v16 >> 1) & 3;
      unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (v17) {
        uint64_t v19 = v18 | (2 * (v17 - 1));
      }
      else {
        uint64_t v19 = *(void *)v18 | 6;
      }
      unsigned int v20 = *((_DWORD *)a2 + 2);
      if (v20)
      {
        unsigned int v21 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3;
        unsigned int v22 = *((_DWORD *)a2 + 2);
        long long v23 = v12;
        unint64_t v24 = v22;
        if (v21 < ((*(void *)(v13 + 24 * v20) >> 1) & 3 | *(_DWORD *)((*(void *)(v13 + 24 * v20) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24)))
        {
          do
          {
            unint64_t v25 = v24 >> 1;
            uint64_t v26 = v23[3 * (v24 >> 1) + 1];
            LODWORD(v26) = (v26 >> 1) & 3 | *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24);
            v24 -= (v24 >> 1) + 1;
            BOOL v27 = v21 >= v26;
            if (v21 >= v26) {
              unint64_t v28 = v25 + 1;
            }
            else {
              unint64_t v28 = 0;
            }
            v23 += 3 * v28;
            if (!v27) {
              unint64_t v24 = v25;
            }
          }
          while (v24);
          unsigned int v22 = *((_DWORD *)a2 + 2);
LABEL_20:
          if (v23 == &v12[3 * v22]
            || ((*v23 >> 1) & 3 | *(_DWORD *)((*v23 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3))
          {
            long long v23 = &v12[3 * v22];
          }
          if (v23 != &v12[3 * v20])
          {
            unint64_t v29 = (unsigned int *)v23[2];
            if (v29)
            {
              unint64_t v65 = *v10;
              unint64_t v9 = v14;
              unint64_t v8 = *v10;
LABEL_78:
              unint64_t v55 = *v65;
              unint64_t v57 = *v29;
              uint64_t v66 = *v5;
              unint64_t v56 = *(unsigned int *)(*v5 + 4 * v55);
              unint64_t v58 = *(unsigned int *)(*v5 + 4 * v57);
              while (v56 != v58)
              {
                if (v56 < v58)
                {
                  *(_DWORD *)(v66 + 4 * v57) = v56;
                  unint64_t v57 = v58;
                  unint64_t v58 = *(unsigned int *)(v66 + 4 * v58);
                }
                else
                {
                  *(_DWORD *)(v66 + 4 * v55) = v58;
                  unint64_t v55 = v56;
                  unint64_t v56 = *(unsigned int *)(v66 + 4 * v56);
                }
              }
              goto LABEL_26;
            }
          }
          goto LABEL_25;
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      long long v23 = &v12[3 * v22];
      goto LABEL_20;
    }
    uint64_t v30 = *(void *)((v16 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v30)
    {
      unint64_t v31 = (void *)(v30 + 24);
    }
    else
    {
      uint64_t v72 = *(void *)(*(void *)this + 288);
      uint64_t v73 = *(void **)(v72 + 536);
      unint64_t v74 = *(unsigned int *)(v72 + 544);
      if (v74)
      {
        unsigned int v75 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3;
        uint64_t v76 = v73;
        unint64_t v77 = v74;
        do
        {
          unint64_t v78 = v77 >> 1;
          uint64_t v79 = &v76[2 * (v77 >> 1)];
          uint64_t v81 = *v79;
          uint64_t v80 = v79 + 2;
          v77 += ~(v77 >> 1);
          if (((v81 >> 1) & 3 | *(_DWORD *)((v81 & 0xFFFFFFFFFFFFFFF8) + 24)) < v75) {
            uint64_t v76 = v80;
          }
          else {
            unint64_t v77 = v78;
          }
        }
        while (v77);
        if (v76 == &v73[2 * v74]
          || ((*v76 >> 1) & 3 | *(_DWORD *)((*v76 & 0xFFFFFFFFFFFFFFF8) + 24)) > v75)
        {
          v76 -= 2;
        }
      }
      else
      {
        uint64_t v76 = v73;
      }
      unint64_t v31 = v76 + 1;
    }
    uint64_t v32 = *v31;
    uint64_t v33 = *(void *)(*v31 + 64);
    uint64_t v34 = *(void *)(v32 + 72);
    if (v33 == v34)
    {
LABEL_25:
      unint64_t v9 = v14;
      unint64_t v8 = v15;
      goto LABEL_26;
    }
    uint64_t v35 = *(void *)(*(void *)(*(void *)this + 288) + 392);
    while (1)
    {
      uint64_t v36 = *(void *)(v35 + 16 * *(unsigned int *)(*(void *)v33 + 24) + 8);
      unsigned int v37 = (v36 >> 1) & 3;
      unint64_t v38 = v36 & 0xFFFFFFFFFFFFFFF8;
      if (v37) {
        uint64_t v39 = v38 | (2 * (v37 - 1));
      }
      else {
        uint64_t v39 = *(void *)v38 | 6;
      }
      unsigned int v40 = *((_DWORD *)a2 + 2);
      if (v40)
      {
        unsigned int v41 = *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24) | (v39 >> 1) & 3;
        unsigned int v42 = *((_DWORD *)a2 + 2);
        unsigned int v43 = v12;
        unint64_t v44 = v42;
        if (v41 < ((*(void *)(v13 + 24 * v40) >> 1) & 3 | *(_DWORD *)((*(void *)(v13 + 24 * v40) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24)))
        {
          do
          {
            unint64_t v45 = v44 >> 1;
            uint64_t v46 = v43[3 * (v44 >> 1) + 1];
            LODWORD(v46) = (v46 >> 1) & 3 | *(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 24);
            v44 -= (v44 >> 1) + 1;
            BOOL v47 = v41 >= v46;
            if (v41 >= v46) {
              unint64_t v48 = v45 + 1;
            }
            else {
              unint64_t v48 = 0;
            }
            v43 += 3 * v48;
            if (!v47) {
              unint64_t v44 = v45;
            }
          }
          while (v44);
          unsigned int v42 = *((_DWORD *)a2 + 2);
          goto LABEL_43;
        }
      }
      else
      {
        unsigned int v42 = 0;
      }
      unsigned int v43 = &v12[3 * v42];
LABEL_43:
      if (v43 == &v12[3 * v42]
        || ((*v43 >> 1) & 3 | *(_DWORD *)((*v43 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24) | (v39 >> 1) & 3))
      {
        unsigned int v43 = &v12[3 * v42];
      }
      if (v43 != &v12[3 * v40])
      {
        uint64_t v49 = (unsigned int *)v43[2];
        if (v49)
        {
          unint64_t v50 = *v15;
          unint64_t v51 = *v49;
          uint64_t v52 = *v5;
          unint64_t v53 = *(unsigned int *)(*v5 + 4 * v50);
          unint64_t v54 = *(unsigned int *)(*v5 + 4 * v51);
          while (v53 != v54)
          {
            if (v53 < v54)
            {
              *(_DWORD *)(v52 + 4 * v51) = v53;
              unint64_t v51 = v54;
              unint64_t v54 = *(unsigned int *)(v52 + 4 * v54);
            }
            else
            {
              *(_DWORD *)(v52 + 4 * v50) = v54;
              unint64_t v50 = v53;
              unint64_t v53 = *(unsigned int *)(v52 + 4 * v53);
            }
          }
        }
      }
      v33 += 8;
      if (v33 == v34) {
        goto LABEL_25;
      }
    }
  }
LABEL_67:
  uint64_t result = *((unsigned int *)this + 14);
  if (!result)
  {
    uint64_t v60 = *((unsigned int *)this + 4);
    if (v60)
    {
      uint64_t v61 = 0;
      uint64_t v62 = *v5;
      do
      {
        uint64_t v63 = *(unsigned int *)(v62 + 4 * v61);
        if (v61 == v63)
        {
          int v64 = *((_DWORD *)this + 14);
          *((_DWORD *)this + 14) = v64 + 1;
        }
        else
        {
          int v64 = *(_DWORD *)(v62 + 4 * v63);
        }
        *(_DWORD *)(v62 + 4 * v61++) = v64;
      }
      while (v60 != v61);
      return *((unsigned int *)this + 14);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::ConnectedVNInfoEqClasses::Distribute(llvm::ConnectedVNInfoEqClasses *this, llvm::LiveInterval *a2, llvm::LiveInterval **a3, llvm::MachineRegisterInfo *a4)
{
  v154[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((unsigned int *)a2 + 28);
  if ((v6 & 0x80000000) != 0) {
    uint64_t v7 = (uint64_t *)(*((void *)a4 + 3) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(*((void *)a4 + 34) + 8 * v6);
  }
  uint64_t v8 = *v7;
  if (*v7)
  {
    while (1)
    {
      uint64_t v9 = v8;
      uint64_t v8 = *(void *)(v8 + 24);
      unint64_t v10 = *(void *)(v9 + 8);
      uint64_t v11 = *(void *)(*(void *)this + 288);
      if (**(unsigned __int16 **)(v10 + 16) - 13 > 1) {
        break;
      }
      uint64_t v123 = sub_1CC2FBF64(v11, v10);
      sub_1CC2FC02C((uint64_t)a2, v123, (uint64_t)&v148);
      if ((~v150[0] & 6) != 0)
      {
        uint64_t v39 = (unsigned int *)v149;
        goto LABEL_33;
      }
LABEL_36:
      if (!v8) {
        goto LABEL_52;
      }
    }
    __int16 v12 = *(_WORD *)(v10 + 44);
    unint64_t v13 = *(void *)(v9 + 8);
    if ((v12 & 4) != 0)
    {
      do
        unint64_t v13 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v13 + 44) & 4) != 0);
    }
    if ((v12 & 8) != 0)
    {
      do
        unint64_t v10 = *(void *)(v10 + 8);
      while ((*(_WORD *)(v10 + 44) & 8) != 0);
    }
    uint64_t v14 = *(void *)(v10 + 8);
    if (v13 != v14)
    {
      while (1)
      {
        unsigned int v15 = **(unsigned __int16 **)(v13 + 16);
        BOOL v61 = v15 > 0x17;
        int v16 = (1 << v15) & 0x83E000;
        if (v61 || v16 == 0) {
          break;
        }
        unint64_t v13 = *(void *)(v13 + 8);
        if (v13 == v14)
        {
          unint64_t v13 = *(void *)(v10 + 8);
          break;
        }
      }
    }
    uint64_t v18 = *(void *)(v11 + 368);
    uint64_t v19 = *(unsigned int *)(v11 + 384);
    if (v19)
    {
      LODWORD(v20) = ((v13 >> 4) ^ (v13 >> 9)) & (v19 - 1);
      unsigned int v21 = (uint64_t *)(v18 + 16 * v20);
      uint64_t v22 = *v21;
      if (v13 == *v21) {
        goto LABEL_15;
      }
      int v41 = 1;
      while (v22 != -4096)
      {
        int v42 = v20 + v41++;
        uint64_t v20 = v42 & (v19 - 1);
        uint64_t v22 = *(void *)(v18 + 16 * v20);
        if (v13 == v22)
        {
          unsigned int v21 = (uint64_t *)(v18 + 16 * v20);
          goto LABEL_15;
        }
      }
    }
    unsigned int v21 = (uint64_t *)(v18 + 16 * v19);
LABEL_15:
    unint64_t v23 = v21[1] & 0xFFFFFFFFFFFFFFF8;
    unsigned int v24 = *((_DWORD *)a2 + 2);
    uint64_t v25 = *(void *)a2;
    if (v24)
    {
      uint64_t v26 = *(void *)(v25 + 24 * v24 - 16);
      unsigned int v27 = *(_DWORD *)(v23 + 24);
      unsigned int v28 = (v26 >> 1) & 3 | *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24);
      unint64_t v29 = *(void **)a2;
      unint64_t v30 = *((unsigned int *)a2 + 2);
      if (v27 < v28)
      {
        do
        {
          unint64_t v31 = v30 >> 1;
          uint64_t v32 = v29[3 * (v30 >> 1) + 1];
          LODWORD(v32) = (v32 >> 1) & 3 | *(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24);
          v30 -= (v30 >> 1) + 1;
          BOOL v33 = v27 >= v32;
          if (v27 >= v32) {
            unint64_t v34 = v31 + 1;
          }
          else {
            unint64_t v34 = 0;
          }
          v29 += 3 * v34;
          if (!v33) {
            unint64_t v30 = v31;
          }
        }
        while (v30);
LABEL_23:
        uint64_t v35 = (void *)(v25 + 24 * v24);
        if (v29 == v35)
        {
          uint64_t v39 = 0;
          unint64_t v38 = 0;
LABEL_30:
          if ((*(_DWORD *)v9 & 0x30000000) == 0 && (*(_DWORD *)v9 & 0x10FFF00) != 0x1000000)
          {
            uint64_t v39 = v38;
LABEL_33:
            if (v39)
            {
              int v40 = *(_DWORD *)(*((void *)this + 1) + 4 * *v39);
              if (v40) {
                llvm::MachineOperand::setReg(v9, *((_DWORD *)a3[v40 - 1] + 28));
              }
            }
            goto LABEL_36;
          }
          if (v38 != v39) {
            goto LABEL_33;
          }
          goto LABEL_36;
        }
        unsigned int v36 = *(_DWORD *)((*v29 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v37 = *(_DWORD *)(v23 + 24);
        if (((*v29 >> 1) & 3 | v36) > v37)
        {
          unint64_t v38 = 0;
        }
        else
        {
          unint64_t v38 = (unsigned int *)v29[2];
          if (v23 == (v29[1] & 0xFFFFFFFFFFFFFFF8))
          {
            v29 += 3;
            if (v29 == v35)
            {
LABEL_46:
              uint64_t v39 = 0;
              goto LABEL_30;
            }
            unsigned int v36 = *(_DWORD *)((*v29 & 0xFFFFFFFFFFFFFFF8) + 24);
          }
          if (*((void *)v38 + 1) == v23) {
            unint64_t v38 = 0;
          }
        }
        if (v37 >= v36)
        {
          uint64_t v39 = (unsigned int *)v29[2];
          goto LABEL_30;
        }
        goto LABEL_46;
      }
    }
    else
    {
      unsigned int v24 = 0;
    }
    unint64_t v29 = (void *)(v25 + 24 * v24);
    goto LABEL_23;
  }
LABEL_52:
  uint64_t v43 = *((void *)a2 + 13);
  unint64_t v44 = &dword_1CD912700[7744];
  if (!v43) {
    goto LABEL_53;
  }
  BOOL v136 = (uint64_t *)((char *)a2 + 104);
  int v66 = *((_DWORD *)this + 14);
  uint64_t v151 = v154;
  unsigned int v153 = 8;
  uint64_t v148 = v150;
  uint64_t v149 = 0x800000000;
  uint64_t v67 = (v66 - 1);
  uint64_t v140 = *(void *)this;
  uint64_t v137 = v67;
  do
  {
    uint64_t v68 = *(unsigned int *)(v43 + 72);
    unsigned int v152 = 0;
    if (v153 < v68) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    LODWORD(v149) = 0;
    if (v67) {
      sub_1CC2FCB18((uint64_t)&v148, v67, 0);
    }
    uint64_t v69 = (void *)(v43 + 64);
    if (v68)
    {
      uint64_t v70 = 0;
      while (1)
      {
        unint64_t v71 = *(void *)(*(void *)(*v69 + 8 * v70) + 8);
        if (v71 >= 8) {
          break;
        }
        int v84 = 0;
LABEL_105:
        if (v152 >= (unint64_t)v153) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v151[v152] = v84;
        unsigned int v90 = ++v152;
        if (++v70 == v68) {
          goto LABEL_112;
        }
      }
      unsigned int v72 = *((_DWORD *)a2 + 2);
      uint64_t v73 = *(void *)a2;
      if (v72)
      {
        uint64_t v74 = *(void *)(v73 + 24 * v72 - 16);
        unsigned int v75 = *(_DWORD *)((v71 & 0xFFFFFFFFFFFFFFF8) + 24) | (v71 >> 1) & 3;
        unsigned int v76 = (v74 >> 1) & 3 | *(_DWORD *)((v74 & 0xFFFFFFFFFFFFFFF8) + 24);
        uint64_t v77 = *(void *)a2;
        unint64_t v78 = *((unsigned int *)a2 + 2);
        if (v75 < v76)
        {
          do
          {
            unint64_t v79 = v78 >> 1;
            uint64_t v80 = *(void *)(v77 + 24 * (v78 >> 1) + 8);
            LODWORD(v80) = (v80 >> 1) & 3 | *(_DWORD *)((v80 & 0xFFFFFFFFFFFFFFF8) + 24);
            v78 -= (v78 >> 1) + 1;
            BOOL v81 = v75 >= v80;
            if (v75 >= v80) {
              unint64_t v82 = v79 + 1;
            }
            else {
              unint64_t v82 = 0;
            }
            v77 += 24 * v82;
            if (!v81) {
              unint64_t v78 = v79;
            }
          }
          while (v78);
          goto LABEL_97;
        }
      }
      else
      {
        unsigned int v72 = 0;
      }
      uint64_t v77 = v73 + 24 * v72;
LABEL_97:
      uint64_t v83 = v73 + 24 * v72;
      if (v77 == v83
        || ((*(void *)v77 >> 1) & 3 | *(_DWORD *)((*(void *)v77 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v71 & 0xFFFFFFFFFFFFFFF8) + 24) | (v71 >> 1) & 3))
      {
        uint64_t v77 = v83;
      }
      int v84 = *(_DWORD *)(*((void *)this + 1) + 4 * **(unsigned int **)(v77 + 16));
      if (v84)
      {
        uint64_t v85 = (v84 - 1);
        if (!*((void *)v148 + v85))
        {
          int v86 = a3[v85];
          uint64_t v87 = *(void *)(v43 + 112);
          *(void *)(v140 + 392) += 120;
          uint64_t v88 = *(void *)(v140 + 312);
          if (((v88 + 7) & 0xFFFFFFFFFFFFFFF8) - v88 + 120 > *(void *)(v140 + 320) - v88)
          {
            unsigned int v121 = *(_DWORD *)(v140 + 336) >> 7;
            if (v121 >= 0x1E) {
              LOBYTE(v121) = 30;
            }
            uint64_t v139 = 4096 << v121;
            unint64_t v89 = operator new(4096 << v121, (std::align_val_t)8uLL);
            unint64_t v122 = *(unsigned int *)(v140 + 336);
            if (v122 >= *(unsigned int *)(v140 + 340)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v69 = (void *)(v43 + 64);
            *(void *)(*(void *)(v140 + 328) + 8 * v122) = v89;
            ++*(_DWORD *)(v140 + 336);
            *(void *)(v140 + 320) = (char *)v89 + v139;
          }
          else
          {
            unint64_t v89 = (void *)((v88 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
          *(void *)(v140 + 312) = v89 + 15;
          *unint64_t v89 = v89 + 2;
          v89[1] = 0x200000000;
          v89[8] = v89 + 10;
          v89[9] = 0x200000000;
          v89[12] = 0;
          v89[13] = 0;
          v89[14] = v87;
          v89[13] = *((void *)v86 + 13);
          *((void *)v86 + 13) = v89;
          *((void *)v148 + v85) = v89;
        }
      }
      goto LABEL_105;
    }
    unsigned int v90 = v152;
LABEL_112:
    uint64_t v138 = v148;
    unint64_t v145 = v147;
    uint64_t v146 = 0x800000000;
    if (v90)
    {
      if (v90 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v147, v151, 4 * v90);
      LODWORD(v146) = v90;
    }
    uint64_t v91 = *(unsigned int ***)v43;
    uint64_t v92 = *(unsigned int *)(v43 + 8);
    uint64_t v93 = (unsigned int **)(*(void *)v43 + 24 * v92);
    unint64_t v94 = *(unsigned int ***)v43;
    uint64_t v95 = (uint64_t *)(v43 + 64);
    if (v92)
    {
      uint64_t v96 = 0;
      while (1)
      {
        unint64_t v94 = &v91[v96];
        if (*((_DWORD *)v145 + *v91[v96 + 2])) {
          break;
        }
        v96 += 3;
        if (3 * v92 == v96)
        {
          uint64_t v97 = (unsigned int **)(*(void *)v43 + 24 * v92);
          int v98 = v138;
          goto LABEL_127;
        }
      }
    }
    uint64_t v97 = (unsigned int **)(*(void *)v43 + 24 * v92);
    int v98 = v138;
    if (v94 != v93)
    {
      int v99 = v94;
      uint64_t v97 = v94;
      do
      {
        int v100 = *((_DWORD *)v145 + *v94[2]);
        if (v100)
        {
          uint64_t v101 = v138[v100 - 1];
          unsigned int v102 = *(_DWORD *)(v101 + 8);
          unint64_t v103 = *(void *)v101;
          if (v102 >= *(_DWORD *)(v101 + 12))
          {
            if (v103 > (unint64_t)v94 || v103 + 24 * v102 <= (unint64_t)v94) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v104 = v103 + 24 * *(unsigned int *)(v101 + 8);
          long long v105 = *(_OWORD *)v94;
          *(void *)(v104 + 16) = v94[2];
          *(_OWORD *)unint64_t v104 = v105;
          ++*(_DWORD *)(v101 + 8);
        }
        else
        {
          long long v117 = *(_OWORD *)v94;
          v97[2] = v94[2];
          *(_OWORD *)uint64_t v97 = v117;
          v97 += 3;
        }
        v94 += 3;
        v99 += 3;
      }
      while (v94 != v93);
      uint64_t v91 = *(unsigned int ***)v43;
      LODWORD(v92) = *(_DWORD *)(v43 + 8);
    }
LABEL_127:
    uint64_t v106 = &v91[3 * v92];
    int64_t v107 = (char *)v106 - (char *)v93;
    if (v106 != v93)
    {
      memmove(v97, v93, (char *)v106 - (char *)v93);
      int v98 = v138;
      uint64_t v95 = (uint64_t *)(v43 + 64);
      uint64_t v91 = *(unsigned int ***)v43;
    }
    *(_DWORD *)(v43 + 8) = -1431655765 * ((unint64_t)((char *)v97 + v107 - (char *)v91) >> 3);
    uint64_t v108 = *(unsigned int *)(v43 + 72);
    if (v108)
    {
      uint64_t v109 = 0;
      while (!*((_DWORD *)v145 + v109))
      {
        if (v108 == ++v109) {
          goto LABEL_149;
        }
      }
    }
    else
    {
      LODWORD(v109) = 0;
    }
    if (v109 == v108)
    {
LABEL_149:
      unsigned int v111 = *(_DWORD *)(v43 + 72);
    }
    else
    {
      unsigned int v111 = v109;
      do
      {
        uint64_t v112 = *v95;
        uint64_t v113 = *(unsigned int **)(*v95 + 8 * v109);
        int v114 = *((_DWORD *)v145 + v109);
        if (v114)
        {
          uint64_t v115 = v98[v114 - 1];
          unint64_t v116 = *(unsigned int *)(v115 + 72);
          unsigned int *v113 = v116;
          if (v116 >= *(unsigned int *)(v115 + 76)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v115 + 64) + 8 * v116) = v113;
          ++*(_DWORD *)(v115 + 72);
        }
        else
        {
          unsigned int *v113 = v111;
          *(void *)(v112 + 8 * v111++) = v113;
        }
        LODWORD(v109) = v109 + 1;
      }
      while (v108 != v109);
    }
    sub_1CBFC9AD0((uint64_t)v95, v111);
    if (v145 != v147) {
      free(v145);
    }
    uint64_t v43 = *(void *)(v43 + 104);
    unint64_t v44 = dword_1CD912700 + 30976;
    uint64_t v67 = v137;
  }
  while (v43);
  unint64_t v118 = (void *)((char *)a2 + 104);
  uint64_t v119 = *v136;
  if (*v136)
  {
    while (1)
    {
      uint64_t v120 = v119;
      if (!*(_DWORD *)(v119 + 8)) {
        break;
      }
LABEL_157:
      unint64_t v118 = (void *)(v119 + 104);
      uint64_t v119 = *(void *)(v119 + 104);
      if (!v119) {
        goto LABEL_158;
      }
    }
    while (1)
    {
      uint64_t v130 = *(void *)(v120 + 96);
      uint64_t v119 = *(void *)(v120 + 104);
      *(void *)(v120 + 96) = 0;
      if (v130)
      {
        int v135 = v118;
        sub_1CB833A08(v130, *(void **)(v130 + 8));
        MEMORY[0x1D25D9CE0](v130, 0x1020C4062D53EE8);
        unint64_t v118 = v135;
        unint64_t v44 = dword_1CD912700 + 30976;
      }
      unsigned int v131 = *(void **)(v120 + 64);
      if (v131 != (void *)(v120 + 80))
      {
        uint64_t v134 = v118;
        free(v131);
        unint64_t v118 = v134;
        unint64_t v44 = dword_1CD912700 + 30976;
      }
      uint64_t v132 = *(void **)v120;
      if (*(void *)v120 != v120 + 16)
      {
        uint64_t v133 = v118;
        free(v132);
        unint64_t v118 = v133;
        unint64_t v44 = dword_1CD912700 + 30976;
      }
      if (!v119) {
        break;
      }
      uint64_t v120 = v119;
      if (*(_DWORD *)(v119 + 8))
      {
        *unint64_t v118 = v119;
        goto LABEL_157;
      }
    }
    *unint64_t v118 = 0;
  }
LABEL_158:
  if (v148 != v150)
  {
    free(v148);
    unint64_t v44 = dword_1CD912700 + 30976;
  }
  if (v151 != (_DWORD *)v154)
  {
    free(v151);
    unint64_t v44 = dword_1CD912700 + 30976;
  }
LABEL_53:
  unsigned int v142 = v144;
  uint64_t v143 = *((void *)v44 + 123);
  unsigned int v45 = *((_DWORD *)this + 4);
  if (v45 && &v142 != (void **)((char *)this + 8))
  {
    if (v45 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v144, *((const void **)this + 1), 4 * *((unsigned int *)this + 4));
    LODWORD(v143) = v45;
  }
  _WORD v144[8] = *((_DWORD *)this + 14);
  uint64_t v46 = *(void *)a2;
  uint64_t v47 = *((unsigned int *)a2 + 2);
  unint64_t v48 = (unsigned int **)(*(void *)a2 + 24 * v47);
  uint64_t v49 = *(unsigned int ***)a2;
  if (v47)
  {
    uint64_t v50 = 0;
    while (1)
    {
      uint64_t v49 = (unsigned int **)(v46 + v50);
      if (*((_DWORD *)v142 + **(unsigned int **)(v46 + v50 + 16))) {
        break;
      }
      v50 += 24;
      if (24 * v47 == v50)
      {
        unint64_t v51 = (unsigned int **)(*(void *)a2 + 24 * v47);
        goto LABEL_75;
      }
    }
  }
  unint64_t v51 = (unsigned int **)(*(void *)a2 + 24 * v47);
  if (v49 != v48)
  {
    uint64_t v52 = v49;
    unint64_t v51 = v49;
    do
    {
      int v53 = *((_DWORD *)v142 + *v49[2]);
      if (v53)
      {
        unint64_t v54 = a3[v53 - 1];
        unsigned int v55 = *((_DWORD *)v54 + 2);
        unint64_t v56 = *(void *)v54;
        if (v55 >= *((_DWORD *)v54 + 3))
        {
          unint64_t v60 = v56 + 24 * v55;
          BOOL v61 = v56 <= (unint64_t)v49 && v60 > (unint64_t)v49;
          if (!v61) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v57 = v56 + 24 * *((unsigned int *)v54 + 2);
        long long v58 = *(_OWORD *)v49;
        *(void *)(v57 + 16) = v49[2];
        *(_OWORD *)unint64_t v57 = v58;
        ++*((_DWORD *)v54 + 2);
      }
      else
      {
        long long v59 = *(_OWORD *)v49;
        v51[2] = v49[2];
        *(_OWORD *)unint64_t v51 = v59;
        v51 += 3;
      }
      v49 += 3;
      v52 += 3;
    }
    while (v49 != v48);
    uint64_t v46 = *(void *)a2;
    LODWORD(v47) = *((_DWORD *)a2 + 2);
  }
LABEL_75:
  uint64_t v62 = (unsigned int **)(v46 + 24 * v47);
  int64_t v63 = (char *)v62 - (char *)v48;
  if (v62 != v48)
  {
    memmove(v51, v48, (char *)v62 - (char *)v48);
    uint64_t v46 = *(void *)a2;
  }
  *((_DWORD *)a2 + 2) = -1431655765 * (((unint64_t)v51 + v63 - v46) >> 3);
  uint64_t v64 = *((unsigned int *)a2 + 18);
  if (v64)
  {
    uint64_t v65 = 0;
    while (!*((_DWORD *)v142 + v65))
    {
      if (v64 == ++v65) {
        goto LABEL_189;
      }
    }
  }
  else
  {
    LODWORD(v65) = 0;
  }
  if (v65 == v64)
  {
LABEL_189:
    unsigned int v124 = *((_DWORD *)a2 + 18);
  }
  else
  {
    unsigned int v124 = v65;
    do
    {
      uint64_t v125 = *((void *)a2 + 8);
      int v126 = *(unsigned int **)(v125 + 8 * v65);
      int v127 = *((_DWORD *)v142 + v65);
      if (v127)
      {
        unint64_t v128 = a3[v127 - 1];
        unint64_t v129 = *((unsigned int *)v128 + 18);
        *int v126 = v129;
        if (v129 >= *((unsigned int *)v128 + 19)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)v128 + 8) + 8 * v129) = v126;
        ++*((_DWORD *)v128 + 18);
      }
      else
      {
        *int v126 = v124;
        *(void *)(v125 + 8 * v124++) = v126;
      }
      LODWORD(v65) = v65 + 1;
    }
    while (v64 != v65);
  }
  sub_1CBFC9AD0((uint64_t)a2 + 64, v124);
  if (v142 != v144) {
    free(v142);
  }
}

uint64_t sub_1CC2FBF64(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  while (a2 != *(void *)(v2 + 56))
  {
    a2 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (!a2 || (*(unsigned char *)a2 & 4) == 0)
    {
      while ((*(_WORD *)(a2 + 44) & 4) != 0)
        a2 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v3 = *(void *)(a1 + 368);
    uint64_t v4 = *(unsigned int *)(a1 + 384);
    if (!v4) {
      goto LABEL_16;
    }
    LODWORD(v5) = ((a2 >> 4) ^ (a2 >> 9)) & (v4 - 1);
    uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (a2 != *v6)
    {
      int v8 = 1;
      while (v7 != -4096)
      {
        int v9 = v5 + v8++;
        uint64_t v5 = v9 & (v4 - 1);
        uint64_t v7 = *(void *)(v3 + 16 * v5);
        if (a2 == v7)
        {
          uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
          goto LABEL_8;
        }
      }
LABEL_16:
      uint64_t v6 = (uint64_t *)(v3 + 16 * v4);
    }
LABEL_8:
    if (v6 != (uint64_t *)(v3 + 16 * v4))
    {
      uint64_t v10 = (uint64_t)(v6 + 1);
      return *(void *)v10;
    }
  }
  uint64_t v10 = *(void *)(a1 + 392) + 16 * *(unsigned int *)(v2 + 24);
  return *(void *)v10;
}

uint64_t sub_1CC2FC02C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v4 = *(_DWORD *)(result + 8);
  uint64_t v5 = *(void **)result;
  if (!v4)
  {
    unsigned int v4 = 0;
    goto LABEL_25;
  }
  uint64_t v6 = v5[3 * v4 - 2];
  unsigned int v7 = *(_DWORD *)(v3 + 24);
  if (v7 >= ((v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_25:
    int v8 = &v5[3 * v4];
    goto LABEL_10;
  }
  int v8 = *(void **)result;
  unint64_t v9 = *(unsigned int *)(result + 8);
  do
  {
    unint64_t v10 = v9 >> 1;
    uint64_t v11 = v8[3 * (v9 >> 1) + 1];
    LODWORD(v11) = (v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t result = (v9 >> 1) + 1;
    v9 -= result;
    BOOL v12 = v7 >= v11;
    if (v7 >= v11) {
      unint64_t v13 = v10 + 1;
    }
    else {
      unint64_t v13 = 0;
    }
    v8 += 3 * v13;
    if (!v12) {
      unint64_t v9 = v10;
    }
  }
  while (v9);
LABEL_10:
  uint64_t v14 = &v5[3 * v4];
  if (v8 == v14)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 24) = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    unsigned int v15 = *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24);
    unsigned int v16 = *(_DWORD *)(v3 + 24);
    if (((*v8 >> 1) & 3 | v15) > v16)
    {
      uint64_t v17 = 0;
      BOOL v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v17 = v8[1];
      uint64_t v18 = v8[2];
      BOOL v19 = v3 == (v17 & 0xFFFFFFFFFFFFFFF8);
      if (v3 == (v17 & 0xFFFFFFFFFFFFFFF8))
      {
        v8 += 3;
        if (v8 == v14)
        {
          *(void *)a3 = v18;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = v17;
          *(unsigned char *)(a3 + 24) = 1;
          return result;
        }
        unsigned int v15 = *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24);
      }
      if (*(void *)(v18 + 8) == v3) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v18;
      }
    }
    if (v16 < v15)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v17 = v8[1];
      uint64_t v21 = v8[2];
    }
    *(void *)a3 = v20;
    *(void *)(a3 + 8) = v21;
    *(void *)(a3 + 16) = v17;
    *(unsigned char *)(a3 + 24) = v19;
  }
  return result;
}

BOOL sub_1CC2FC17C(uint64_t a1, void **a2, void **a3)
{
  unsigned int v3 = (**a2 >> 1) & 3 | *(_DWORD *)((**a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v4 = *(_DWORD *)((**a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (**a3 >> 1) & 3;
  if (v3 < v4) {
    return 1;
  }
  if (v4 >= v3) {
    return ((*a2[1] >> 1) & 3 | *(_DWORD *)((*a2[1] & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a3[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3[1] >> 1) & 3);
  }
  return 0;
}

uint64_t *sub_1CC2FC208(void **a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t result = sub_1CC2FC2B0(a1, a2, &v13, &v12, a3);
  if (!*result)
  {
    unsigned int v7 = result;
    int v8 = operator new(0x38uLL);
    v8[2] = *(_OWORD *)a4;
    *((void *)v8 + 6) = *(void *)(a4 + 16);
    uint64_t v9 = v13;
    *(void *)int v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v9;
    *unsigned int v7 = (uint64_t)v8;
    unint64_t v10 = (void *)**a1;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = (uint64_t *)*v7;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v8;
    }
    uint64_t result = sub_1CB8358B8(a1[1], v11);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t *sub_1CC2FC2B0(void *a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 == a2
    || (v11 = a4, v22 = a5, unint64_t v23 = a5 + 1, v20 = a2 + 4, v21 = a2 + 5, sub_1CC2FC17C((uint64_t)&v24, &v22, &v20)))
  {
    unint64_t v10 = a2;
    if ((void *)*a1 == a2) {
      goto LABEL_34;
    }
    unsigned int v16 = (void *)*a2;
    if (*a2)
    {
      do
      {
        unint64_t v10 = v16;
        unsigned int v16 = (void *)v16[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a2;
      do
      {
        unint64_t v10 = (void *)v17[2];
        BOOL v18 = *v10 == (void)v17;
        uint64_t v17 = v10;
      }
      while (v18);
    }
    uint64_t v22 = v10 + 4;
    unint64_t v23 = v10 + 5;
    uint64_t v20 = a5;
    uint64_t v21 = a5 + 1;
    if (sub_1CC2FC17C((uint64_t)&v24, &v22, &v20))
    {
LABEL_34:
      if (*a2)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    return sub_1CD51BBA4((uint64_t)a1, a3, a5);
  }
  uint64_t v22 = a2 + 4;
  unint64_t v23 = a2 + 5;
  uint64_t v20 = a5;
  uint64_t v21 = a5 + 1;
  if (!sub_1CC2FC17C((uint64_t)&v24, &v22, &v20))
  {
    *a3 = a2;
    uint64_t *v11 = (uint64_t)a2;
    return v11;
  }
  uint64_t v11 = a2 + 1;
  uint64_t v13 = a2[1];
  if (v13)
  {
    uint64_t v14 = (void *)a2[1];
    do
    {
      unsigned int v15 = v14;
      uint64_t v14 = (void *)*v14;
    }
    while (v14);
  }
  else
  {
    BOOL v19 = a2;
    do
    {
      unsigned int v15 = (void *)v19[2];
      BOOL v18 = *v15 == (void)v19;
      BOOL v19 = v15;
    }
    while (!v18);
  }
  if (v15 == v9) {
    goto LABEL_28;
  }
  uint64_t v22 = a5;
  unint64_t v23 = a5 + 1;
  uint64_t v20 = v15 + 4;
  uint64_t v21 = v15 + 5;
  if (!sub_1CC2FC17C((uint64_t)&v24, &v22, &v20)) {
    return sub_1CD51BBA4((uint64_t)a1, a3, a5);
  }
  uint64_t v13 = *v11;
LABEL_28:
  if (v13)
  {
    *a3 = v15;
    return v15;
  }
  else
  {
    *a3 = a2;
  }
  return v11;
}

void *sub_1CC2FC488(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 96);
  unsigned int v4 = (void *)(v3 + 8);
  uint64_t v5 = *(void **)(v3 + 8);
  if (v5)
  {
    do
    {
      v13[0] = a2;
      v13[1] = a2 + 1;
      v12[0] = v5 + 4;
      v12[1] = v5 + 5;
      BOOL v7 = sub_1CC2FC17C((uint64_t)&v14, v13, v12);
      int v8 = v5 + 1;
      if (v7)
      {
        int v8 = v5;
        unsigned int v4 = v5;
      }
      uint64_t v5 = (void *)*v8;
    }
    while (*v8);
    uint64_t v3 = *(void *)(*(void *)a1 + 96);
  }
  if (v4 == (void *)(v3 + 8)
    || ((*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((v4[4] >> 1) & 3 | *(_DWORD *)((v4[4] & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
    return v4;
  }
  unint64_t v10 = (void *)v4[1];
  if (v10)
  {
    do
    {
      uint64_t result = v10;
      unint64_t v10 = (void *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      uint64_t result = (void *)v4[2];
      BOOL v11 = *result == (void)v4;
      unsigned int v4 = result;
    }
    while (!v11);
  }
  return result;
}

void sub_1CC2FC58C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)a2[1];
  if (v3)
  {
    unsigned int v4 = (uint64_t *)a2[1];
    do
    {
      uint64_t v5 = (uint64_t **)v4;
      unsigned int v4 = (uint64_t *)*v4;
    }
    while (v4);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = (uint64_t **)a2;
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = (uint64_t **)v5[2];
    }
    while (*v5 != (uint64_t *)v6);
  }
  BOOL v7 = *(uint64_t ***)(*(void *)a1 + 96);
  if (v5 == v7 + 1)
  {
    BOOL v9 = 1;
    if (!v6)
    {
LABEL_22:
      char v14 = v5;
      do
      {
        uint64_t v13 = (uint64_t **)v14[2];
        BOOL v12 = *v13 == (uint64_t *)v14;
        char v14 = v13;
      }
      while (v12);
      goto LABEL_24;
    }
  }
  else
  {
    unsigned int v8 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
    while (1)
    {
      BOOL v9 = v8 >= ((v5[5] >> 1) & 3 | *(_DWORD *)(((unint64_t)v5[5] & 0xFFFFFFFFFFFFFFF8) + 24));
      if (v8 < ((v5[5] >> 1) & 3 | *(_DWORD *)(((unint64_t)v5[5] & 0xFFFFFFFFFFFFFFF8) + 24))) {
        break;
      }
      unint64_t v10 = v5[1];
      if (v10)
      {
        do
        {
          BOOL v11 = (uint64_t **)v10;
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (uint64_t **)v5[2];
          BOOL v12 = *v11 == (uint64_t *)v5;
          uint64_t v5 = v11;
        }
        while (!v12);
      }
      uint64_t v5 = v11;
      if (v11 == v7 + 1)
      {
        uint64_t v5 = v7 + 1;
        break;
      }
    }
    uint64_t v6 = (uint64_t **)*v5;
    if (!*v5) {
      goto LABEL_22;
    }
  }
  do
  {
    uint64_t v13 = v6;
    uint64_t v6 = (uint64_t **)v6[1];
  }
  while (v6);
LABEL_24:
  unsigned int v15 = (uint64_t *)a2[6];
  uint64_t v16 = (uint64_t)v13[5];
  if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3) >= ((v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24))) {
    uint64_t v16 = a3;
  }
  a2[5] = v16;
  if (!v9
    && ((v5[4] >> 1) & 3 | *(_DWORD *)(((unint64_t)v5[4] & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3)
    && v5[6] == v15)
  {
    a2[5] = (uint64_t)v5[5];
    uint64_t v20 = v5[1];
    if (v20)
    {
      do
      {
        uint64_t v17 = v20;
        uint64_t v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        uint64_t v17 = v5[2];
        BOOL v12 = *v17 == (void)v5;
        uint64_t v5 = (uint64_t **)v17;
      }
      while (!v12);
    }
  }
  else
  {
    uint64_t v17 = (uint64_t *)v5;
  }
  if (v3)
  {
    do
    {
      BOOL v18 = v3;
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    do
    {
      BOOL v18 = (uint64_t *)a2[2];
      BOOL v12 = *v18 == (void)a2;
      a2 = v18;
    }
    while (!v12);
  }
  if (v17 != v18)
  {
    do
    {
      BOOL v19 = sub_1CC2FC7A4(v7, v18);
      operator delete(v18);
      BOOL v18 = v19;
    }
    while (v17 != v19);
  }
}

uint64_t *sub_1CC2FC7A4(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unsigned int v4 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = a2;
    do
    {
      unsigned int v4 = (uint64_t *)v3[2];
      BOOL v5 = *v4 == (void)v3;
      uint64_t v3 = v4;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1CB91F7C8(v6, a2);
  return v4;
}

uint64_t **sub_1CC2FC81C(uint64_t **result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2 + 3;
  unsigned int v4 = *result;
  uint64_t v5 = **result;
  uint64_t v6 = (char *)(v5 + 24 * *((unsigned int *)*result + 2));
  unint64_t v7 = a3 & 0xFFFFFFFFFFFFFFF8;
  if (a2 + 3 == (void *)v6)
  {
    unsigned int v8 = *(_DWORD *)(v7 + 24) | (a3 >> 1) & 3;
    BOOL v10 = 1;
    BOOL v9 = (char *)(a2 + 3);
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(v7 + 24) | (a3 >> 1) & 3;
    BOOL v9 = (char *)(a2 + 3);
    while (1)
    {
      BOOL v10 = v8 >= ((*((void *)v9 + 1) >> 1) & 3 | *(_DWORD *)((*((void *)v9 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 24));
      if (v8 < ((*((void *)v9 + 1) >> 1) & 3 | *(_DWORD *)((*((void *)v9 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 24)))
        break;
      v9 += 24;
      if (v9 == v6)
      {
        BOOL v9 = (char *)(v5 + 24 * *((unsigned int *)*result + 2));
        break;
      }
    }
  }
  uint64_t v11 = a2[2];
  if (v8 >= ((*((void *)v9 - 2) >> 1) & 3 | *(_DWORD *)((*((void *)v9 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 24)))
    uint64_t v12 = a3;
  else {
    uint64_t v12 = *((void *)v9 - 2);
  }
  a2[1] = v12;
  if (!v10
    && ((*(void *)v9 >> 1) & 3 | *(_DWORD *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3)
    && *((void *)v9 + 2) == v11)
  {
    a2[1] = *((void *)v9 + 1);
    v9 += 24;
  }
  int64_t v13 = v6 - v9;
  if (v6 != v9)
  {
    uint64_t result = (uint64_t **)memmove(a2 + 3, v9, v6 - v9);
    uint64_t v5 = *v4;
  }
  *((_DWORD *)v4 + 2) = -1431655765 * (((unint64_t)v3 + v13 - v5) >> 3);
  return result;
}

uint64_t sub_1CC2FC960(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = *a1;
  unsigned int v6 = *((_DWORD *)a1 + 2);
  unint64_t v7 = *a1 + 24 * v6;
  if (v7 == a2)
  {
    if (v6 >= *((_DWORD *)a1 + 3))
    {
      if (a2 <= a3 || v5 > a3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v20 = v5 + 24 * *((unsigned int *)a1 + 2);
    long long v21 = *(_OWORD *)a3;
    *(void *)(v20 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)unint64_t v20 = v21;
    LODWORD(v20) = *((_DWORD *)a1 + 2) + 1;
    *((_DWORD *)a1 + 2) = v20;
    return *a1 + 24 * v20 - 24;
  }
  else
  {
    if (v6 >= *((_DWORD *)a1 + 3))
    {
      if (v5 > a3 || v7 <= a3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v8 = (void *)(v5 + 8 * ((uint64_t)(a2 - v5) >> 3));
    unint64_t v9 = v5 + 24 * *((unsigned int *)a1 + 2);
    *(_OWORD *)unint64_t v9 = *(_OWORD *)(v9 - 24);
    *(void *)(v9 + 16) = *(void *)(v9 - 8);
    unint64_t v10 = *a1;
    unsigned int v11 = *((_DWORD *)a1 + 2);
    uint64_t v12 = *a1 + 24 * v11 - 24;
    if ((void *)v12 != v8)
    {
      memmove(v8 + 3, v8, v12 - (void)v8);
      unsigned int v11 = *((_DWORD *)a1 + 2);
      unint64_t v10 = *a1;
    }
    unsigned int v13 = v11 + 1;
    *((_DWORD *)a1 + 2) = v13;
    unint64_t v14 = v10 + 24 * v13;
    BOOL v16 = a3 >= (unint64_t)v8 && a3 < v14;
    unint64_t v17 = a3 + 24 * v16;
    long long v18 = *(_OWORD *)v17;
    v8[2] = *(void *)(v17 + 16);
    *(_OWORD *)unsigned int v8 = v18;
  }
  return (uint64_t)v8;
}

uint64_t sub_1CC2FCB18(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 + a2 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    unsigned int v4 = (void *)(*(void *)result + 8 * v3);
    uint64_t v5 = a2;
    do
    {
      *v4++ = a3;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(result + 8) = v3 + a2;
  return result;
}

void llvm::LiveIntervalUnion::unify(llvm::LiveIntervalUnion *this, const llvm::LiveInterval *a2, uint64_t **a3)
{
  v81[8] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *((_DWORD *)a3 + 2);
  if (!v3) {
    return;
  }
  ++*(_DWORD *)this;
  uint64_t v5 = *a3;
  uint64_t v6 = (uint64_t)&(*a3)[3 * v3];
  uint64_t v7 = **a3;
  uint64_t v78 = (uint64_t)this + 8;
  unint64_t v79 = v81;
  uint64_t v80 = 0x400000000;
  sub_1CC2FDE4C((uint64_t)&v78, v7);
  while (1)
  {
    uint64_t v8 = v80;
    if (!v80)
    {
LABEL_27:
      uint64_t v8 = 0;
LABEL_28:
      uint64_t v28 = *(void *)(v6 - 24);
      uint64_t v29 = *(void *)(v6 - 16);
      unint64_t v30 = (uint64_t *)(v6 - 24);
      uint64_t v31 = v78;
      if (!*(_DWORD *)(v78 + 192))
      {
        unsigned int v32 = sub_1CC2FE7E4(v78, (_DWORD *)v79 + 4 * v8 - 1, *(unsigned int *)(v78 + 196), v28, v29, (uint64_t)a2);
        if (v32 <= 8)
        {
          *(_DWORD *)(v31 + 196) = v32;
          *((_DWORD *)v79 + 2) = v32;
          goto LABEL_31;
        }
        uint64_t v51 = sub_1CC2FE92C(v31, *((_DWORD *)v79 + 4 * v80 - 1));
        int v52 = *(_DWORD *)(v31 + 196);
        int v53 = v79;
        *(void *)unint64_t v79 = v31 + 8;
        v53[2] = v52;
        v53[3] = v51;
        unint64_t v54 = v79;
        unint64_t v55 = *(void *)(*(void *)v79 + 8 * *((unsigned int *)v79 + 3)) & 0xFFFFFFFFFFFFFFC0;
        unint64_t v56 = (v51 & 0xFFFFFFFF00000000 | *(void *)(*(void *)v79 + 8 * *((unsigned int *)v79 + 3)) & 0x3FLL) + 1;
        if (v80 == 1)
        {
          if (HIDWORD(v80) <= 1) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v57 = (char *)v79 + 16;
          *((void *)v79 + 2) = v55;
          *((void *)v57 + 1) = v56;
          LODWORD(v80) = v80 + 1;
        }
        else
        {
          if (v80 >= HIDWORD(v80)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v65 = (char *)v79 + 16;
          *((_OWORD *)v79 + v80) = *((_OWORD *)v79 + v80 - 1);
          int v66 = v80;
          uint64_t v67 = (char *)v79 + 16 * v80 - 16;
          if (v67 != (char *)(v54 + 2))
          {
            uint64_t v73 = v54;
            unint64_t v76 = v56;
            memmove(v54 + 4, v65, v67 - (char *)(v54 + 2));
            unint64_t v54 = v73;
            unint64_t v56 = v76;
            int v66 = v80;
          }
          LODWORD(v80) = v66 + 1;
          v54[2] = v55;
          v54[3] = v56;
        }
      }
      sub_1CC2FE4A4(&v78, v28, v29, (uint64_t)a2);
      while (1)
      {
LABEL_31:
        if (v5 == v30) {
          goto LABEL_38;
        }
        uint64_t v33 = *v5;
        uint64_t v34 = v5[1];
        uint64_t v35 = v78;
        if (*(_DWORD *)(v78 + 192)) {
          goto LABEL_37;
        }
        unsigned int v36 = sub_1CC2FE7E4(v78, (_DWORD *)v79 + 4 * v80 - 1, *(unsigned int *)(v78 + 196), *v5, v5[1], (uint64_t)a2);
        if (v36 > 8) {
          break;
        }
        *(_DWORD *)(v35 + 196) = v36;
        *((_DWORD *)v79 + 2) = v36;
LABEL_35:
        unsigned int v37 = v79;
        unint64_t v38 = (char *)v79 + 16 * v80;
        int v39 = *((_DWORD *)v38 - 1) + 1;
        *((_DWORD *)v38 - 1) = v39;
        if (v39 == v37[4 * v80 - 2])
        {
          uint64_t v40 = *(unsigned int *)(v78 + 192);
          if (v40)
          {
            unsigned int v41 = 1;
            uint64_t v42 = v40 + 1;
            uint64_t v43 = &v37[4 * v40 - 2];
            while (1)
            {
              unint64_t v44 = v43;
              if (v42 == 2) {
                break;
              }
              int v46 = *v43;
              int v45 = v43[1];
              int v47 = *v43 - 1;
              --v42;
              v43 -= 4;
              if (v45 != v47)
              {
                unsigned int v41 = v42;
                goto LABEL_47;
              }
            }
            int v46 = v37[2];
            int v45 = v37[3];
LABEL_47:
            unsigned int v48 = v45 + 1;
            v44[1] = v48;
            if (v48 != v46)
            {
              uint64_t v49 = *(void *)(*((void *)v44 - 1) + 8 * v48);
              if (v40 != v41)
              {
                do
                {
                  unint64_t v71 = (char *)v79 + 16 * v41;
                  *(void *)unint64_t v71 = v49 & 0xFFFFFFFFFFFFFFC0;
                  *((_DWORD *)v71 + 2) = (v49 & 0x3F) + 1;
                  *((_DWORD *)v71 + 3) = 0;
                  ++v41;
                  uint64_t v49 = *(void *)(v49 & 0xFFFFFFFFFFFFFFC0);
                }
                while (v40 != v41);
                unsigned int v37 = v79;
              }
              uint64_t v50 = (unint64_t *)&v37[4 * v40];
              *uint64_t v50 = v49 & 0xFFFFFFFFFFFFFFC0;
              v50[1] = (v49 & 0x3F) + 1;
            }
          }
        }
        v5 += 3;
      }
      uint64_t v58 = sub_1CC2FE92C(v35, *((_DWORD *)v79 + 4 * v80 - 1));
      int v59 = *(_DWORD *)(v35 + 196);
      unint64_t v60 = v79;
      *(void *)unint64_t v79 = v35 + 8;
      v60[2] = v59;
      void v60[3] = v58;
      BOOL v61 = v79;
      unint64_t v62 = *(void *)(*(void *)v79 + 8 * *((unsigned int *)v79 + 3)) & 0xFFFFFFFFFFFFFFC0;
      unint64_t v63 = (v58 & 0xFFFFFFFF00000000 | *(void *)(*(void *)v79 + 8 * *((unsigned int *)v79 + 3)) & 0x3FLL) + 1;
      if (v80 == 1)
      {
        if (HIDWORD(v80) <= 1) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v64 = (char *)v79 + 16;
        *((void *)v79 + 2) = v62;
        *((void *)v64 + 1) = v63;
        LODWORD(v80) = v80 + 1;
      }
      else
      {
        if (v80 >= HIDWORD(v80)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v68 = (char *)v79 + 16;
        *((_OWORD *)v79 + v80) = *((_OWORD *)v79 + v80 - 1);
        int v69 = v80;
        uint64_t v70 = (char *)v79 + 16 * v80 - 16;
        if (v70 != (char *)(v61 + 2))
        {
          uint64_t v74 = v61;
          unint64_t v77 = v63;
          memmove(v61 + 4, v68, v70 - (char *)(v61 + 2));
          BOOL v61 = v74;
          unint64_t v63 = v77;
          int v69 = v80;
        }
        LODWORD(v80) = v69 + 1;
        v61[2] = v62;
        v61[3] = v63;
      }
LABEL_37:
      sub_1CC2FE4A4(&v78, v33, v34, (uint64_t)a2);
      goto LABEL_35;
    }
    if (*((_DWORD *)v79 + 3) >= *((_DWORD *)v79 + 2)) {
      goto LABEL_28;
    }
    uint64_t v9 = *v5;
    uint64_t v10 = v5[1];
    uint64_t v11 = v78;
    if (!*(_DWORD *)(v78 + 192))
    {
      unsigned int v12 = sub_1CC2FE7E4(v78, (_DWORD *)v79 + 4 * v80 - 1, *(unsigned int *)(v78 + 196), *v5, v5[1], (uint64_t)a2);
      if (v12 <= 8)
      {
        *(_DWORD *)(v11 + 196) = v12;
        *((_DWORD *)v79 + 2) = v12;
        goto LABEL_8;
      }
      uint64_t v18 = sub_1CC2FE92C(v11, *((_DWORD *)v79 + 4 * v80 - 1));
      int v19 = *(_DWORD *)(v11 + 196);
      unint64_t v20 = v79;
      *(void *)unint64_t v79 = v11 + 8;
      v20[2] = v19;
      v20[3] = v18;
      long long v21 = v79;
      unint64_t v22 = *(void *)(*(void *)v79 + 8 * *((unsigned int *)v79 + 3)) & 0xFFFFFFFFFFFFFFC0;
      unint64_t v23 = (v18 & 0xFFFFFFFF00000000 | *(void *)(*(void *)v79 + 8 * *((unsigned int *)v79 + 3)) & 0x3FLL) + 1;
      if (v80 == 1)
      {
        if (HIDWORD(v80) <= 1) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        char v24 = (char *)v79 + 16;
        *((void *)v79 + 2) = v22;
        *((void *)v24 + 1) = v23;
        LODWORD(v80) = v80 + 1;
      }
      else
      {
        if (v80 >= HIDWORD(v80)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v25 = (char *)v79 + 16;
        *((_OWORD *)v79 + v80) = *((_OWORD *)v79 + v80 - 1);
        int v26 = v80;
        unsigned int v27 = (char *)v79 + 16 * v80 - 16;
        if (v27 != (char *)(v21 + 2))
        {
          unsigned int v72 = v21;
          unint64_t v75 = v23;
          memmove(v21 + 4, v25, v27 - (char *)(v21 + 2));
          long long v21 = v72;
          unint64_t v23 = v75;
          int v26 = v80;
        }
        LODWORD(v80) = v26 + 1;
        v21[2] = v22;
        void v21[3] = v23;
      }
    }
    sub_1CC2FE4A4(&v78, v9, v10, (uint64_t)a2);
LABEL_8:
    v5 += 3;
    if (v5 == (uint64_t *)v6) {
      break;
    }
    if (!v80) {
      goto LABEL_27;
    }
    if (*((_DWORD *)v79 + 3) < *((_DWORD *)v79 + 2))
    {
      uint64_t v13 = *v5;
      if (*(_DWORD *)(v78 + 192))
      {
        sub_1CC2D04B8((uint64_t)&v78, v13);
      }
      else
      {
        unint64_t v14 = (char *)v79 + 16 * v80;
        unsigned int v15 = *((_DWORD *)v14 - 1);
        int v16 = *(_DWORD *)(v78 + 196);
        if (v15 != v16)
        {
          while (1)
          {
            uint64_t v17 = *(void *)(v78 + 16 * v15 + 8);
            if (((v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) | (v13 >> 1) & 3)) {
              break;
            }
            if (v16 == ++v15)
            {
              unsigned int v15 = *(_DWORD *)(v78 + 196);
              break;
            }
          }
        }
        *((_DWORD *)v14 - 1) = v15;
      }
    }
  }
LABEL_38:
  if (v79 != v81) {
    free(v79);
  }
}

void llvm::LiveIntervalUnion::extract(llvm::LiveIntervalUnion *this, const llvm::LiveInterval *a2, uint64_t **a3)
{
  v26[8] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *((_DWORD *)a3 + 2);
  if (v3)
  {
    ++*(_DWORD *)this;
    uint64_t v5 = *a3;
    uint64_t v6 = (uint64_t)&(*a3)[3 * v3];
    uint64_t v7 = **a3;
    uint64_t v23 = (uint64_t)this + 8;
    char v24 = v26;
    uint64_t v25 = 0x400000000;
    sub_1CC2FDE4C((uint64_t)&v23, v7);
    while (1)
    {
      uint64_t v8 = v23;
      if (*(_DWORD *)(v23 + 192))
      {
        sub_1CC2FEC58(&v23, 1);
        uint64_t v10 = v25;
        uint64_t v9 = v24;
      }
      else
      {
        uint64_t v9 = v24;
        uint64_t v10 = v25;
        unsigned int v11 = *((_DWORD *)v24 + 4 * v25 - 1);
        int v12 = *(_DWORD *)(v23 + 196);
        if (v11 + 1 != v12)
        {
          do
          {
            *(_OWORD *)(v8 + 16 * v11) = *(_OWORD *)(v8 + 16 * (v11 + 1));
            *(void *)(v8 + 128 + 8 * v11) = *(void *)(v8 + 128 + 8 * (v11 + 1));
            ++v11;
          }
          while (v12 - 1 != v11);
          uint64_t v9 = v24;
        }
        int v13 = v12 - 1;
        *(_DWORD *)(v8 + 196) = v13;
        v9[2] = v13;
      }
      if (!v10 || v9[3] >= v9[2]) {
        break;
      }
      unint64_t v14 = &v9[4 * v10];
      uint64_t v15 = *(v14 - 1);
      uint64_t v16 = *(void *)(*((void *)v14 - 2) + 16 * v15);
      uint64_t v17 = &(*a3)[3 * *((unsigned int *)a3 + 2)];
      unsigned int v18 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3;
      if (v18 < ((*(v17 - 2) >> 1) & 3 | *(_DWORD *)((*(v17 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        uint64_t v17 = v5 - 3;
        do
        {
          unsigned int v19 = (v17[4] >> 1) & 3 | *(_DWORD *)((v17[4] & 0xFFFFFFFFFFFFFFF8) + 24);
          v17 += 3;
        }
        while (v19 <= v18);
      }
      if (v17 == (uint64_t *)v6) {
        break;
      }
      uint64_t v20 = *v17;
      if (*(_DWORD *)(v23 + 192))
      {
        sub_1CC2D04B8((uint64_t)&v23, v20);
        uint64_t v5 = v17;
      }
      else
      {
        int v21 = *(_DWORD *)(v23 + 196);
        if (v15 != v21)
        {
          while (1)
          {
            uint64_t v22 = *(void *)(v23 + 16 * v15 + 8);
            if (((v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24) | (v20 >> 1) & 3)) {
              break;
            }
            LODWORD(v15) = v15 + 1;
            if (v21 == v15)
            {
              LODWORD(v15) = *(_DWORD *)(v23 + 196);
              break;
            }
          }
        }
        *(v14 - 1) = v15;
        uint64_t v5 = v17;
      }
    }
    if (v9 != (_DWORD *)v26) {
      free(v9);
    }
  }
}

void llvm::LiveIntervalUnion::print(llvm::LiveIntervalUnion *this, llvm::raw_ostream *a2, const llvm::TargetRegisterInfo *a3)
{
  v34[8] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 51))
  {
    uint64_t v31 = (uint64_t)this + 8;
    unsigned int v32 = v34;
    uint64_t v33 = 0x400000000;
    sub_1CBB2468C(&v31);
    if (v33)
    {
      uint64_t v5 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
      do
      {
        if (*((_DWORD *)v32 + 3) >= *((_DWORD *)v32 + 2)) {
          break;
        }
        uint64_t v6 = (_WORD *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v6 > 1uLL)
        {
          _WORD *v6 = 23328;
          *((void *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, " [", 2uLL);
        }
        v29[0] = *(void *)(*((void *)v32 + 2 * v33 - 2)
                           + 16 * *((unsigned int *)v32 + 4 * v33 - 1));
        llvm::SlotIndex::print((llvm::SlotIndex *)v29, a2);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v7 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 32);
        }
        else
        {
          *((void *)a2 + 4) = v7 + 1;
          *uint64_t v7 = 32;
        }
        v29[0] = *(void *)(*((void *)v32 + 2 * v33 - 2)
                           + 16 * *((unsigned int *)v32 + 4 * v33 - 1)
                           + 8);
        llvm::SlotIndex::print((llvm::SlotIndex *)v29, a2);
        uint64_t v8 = (_WORD *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v8 > 1uLL)
        {
          *uint64_t v8 = 14889;
          *((void *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, "):", 2uLL);
        }
        int v9 = *(_DWORD *)(*(void *)(*((void *)v32 + 2 * v33 - 2)
                                   + 8 * *((unsigned int *)v32 + 4 * v33 - 1)
                                   + 128)
                       + 112);
        uint64_t v10 = operator new(0x28uLL);
        *(void *)uint64_t v10 = &unk_1F26154E0;
        v10[2] = v9;
        *((void *)v10 + 2) = a3;
        v10[6] = 0;
        *((void *)v10 + 4) = 0;
        unint64_t v30 = v10;
        v5((llvm::raw_ostream *)v10, a2);
        if (v30 == v29)
        {
          (*(void (**)(void *))(v29[0] + 32))(v29);
        }
        else if (v30)
        {
          (*(void (**)(void))(*v30 + 40))();
        }
        unsigned int v11 = v32;
        int v12 = (char *)v32 + 16 * v33;
        int v13 = *((_DWORD *)v12 - 1) + 1;
        *((_DWORD *)v12 - 1) = v13;
        int v14 = v33;
        if (v13 == v11[4 * v33 - 2])
        {
          uint64_t v15 = *(unsigned int *)(v31 + 192);
          if (v15)
          {
            unsigned int v16 = 1;
            uint64_t v17 = v15 + 1;
            unsigned int v18 = &v11[4 * v15 - 2];
            while (1)
            {
              unsigned int v19 = v18;
              if (v17 == 2) {
                break;
              }
              int v21 = *v18;
              int v20 = v18[1];
              int v22 = *v18 - 1;
              --v17;
              v18 -= 4;
              if (v20 != v22)
              {
                unsigned int v16 = v17;
                goto LABEL_25;
              }
            }
            int v21 = v11[2];
            int v20 = v11[3];
LABEL_25:
            unsigned int v23 = v20 + 1;
            v19[1] = v23;
            if (v23 != v21)
            {
              uint64_t v24 = *(void *)(*((void *)v19 - 1) + 8 * v23);
              if (v15 != v16)
              {
                do
                {
                  int v26 = (char *)v32 + 16 * v16;
                  *(void *)int v26 = v24 & 0xFFFFFFFFFFFFFFC0;
                  *((_DWORD *)v26 + 2) = (v24 & 0x3F) + 1;
                  *((_DWORD *)v26 + 3) = 0;
                  ++v16;
                  uint64_t v24 = *(void *)(v24 & 0xFFFFFFFFFFFFFFC0);
                }
                while (v15 != v16);
                unsigned int v11 = v32;
              }
              uint64_t v25 = (char *)&v11[4 * v15];
              *(void *)uint64_t v25 = v24 & 0xFFFFFFFFFFFFFFC0;
              *((_DWORD *)v25 + 2) = (v24 & 0x3F) + 1;
              *((_DWORD *)v25 + 3) = 0;
              int v14 = v33;
            }
          }
        }
      }
      while (v14);
    }
    if (v32 != v34) {
      free(v32);
    }
    unsigned int v27 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v27 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((void *)a2 + 4) = v27 + 1;
      *unsigned int v27 = 10;
    }
  }
  else
  {
    uint64_t v28 = (_DWORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v28 > 6uLL)
    {
      *(_DWORD *)((char *)v28 + 3) = 175731824;
      _DWORD *v28 = 1886217504;
      *((void *)a2 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(a2, " empty\n", 7uLL);
    }
  }
}

uint64_t llvm::LiveIntervalUnion::getOneVReg(llvm::LiveIntervalUnion *this)
{
  v6[8] = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 51)) {
    return 0;
  }
  uint64_t v3 = (uint64_t)this + 8;
  unsigned int v4 = v6;
  uint64_t v5 = 0x400000000;
  sub_1CBB2468C(&v3);
  if (v5 && *((_DWORD *)v4 + 3) < *((_DWORD *)v4 + 2)) {
    uint64_t v1 = *(void *)(*((void *)v4 + 2 * v5 - 2)
  }
                   + 8 * *((unsigned int *)v4 + 4 * v5 - 1)
                   + 128);
  else {
    uint64_t v1 = 0;
  }
  if (v4 != v6) {
    free(v4);
  }
  return v1;
}

BOOL llvm::LiveIntervalUnion::Query::isSeenInterference(llvm::LiveIntervalUnion::Query *this, const llvm::LiveInterval *a2)
{
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = *((unsigned int *)this + 30);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = (const llvm::LiveInterval **)*((void *)this + 14);
    while (*v5 != a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        uint64_t v5 = (const llvm::LiveInterval **)(v2 + 8 * v3);
        return v3 != ((uint64_t)v5 - v2) >> 3;
      }
    }
  }
  else
  {
    uint64_t v5 = (const llvm::LiveInterval **)*((void *)this + 14);
  }
  return v3 != ((uint64_t)v5 - v2) >> 3;
}

uint64_t llvm::LiveIntervalUnion::Query::collectInterferingVRegs(llvm::LiveIntervalUnion::Query *this, unsigned int a2)
{
  if (!*((unsigned char *)this + 161))
  {
    uint64_t result = *((unsigned int *)this + 30);
    if (result >= a2) {
      return result;
    }
    if (!*((unsigned char *)this + 160))
    {
      *((unsigned char *)this + 160) = 1;
      uint64_t v5 = *((void *)this + 1);
      if (!*(_DWORD *)(v5 + 8) || !*(_DWORD *)(*(void *)this + 204))
      {
        uint64_t result = 0;
        *((unsigned char *)this + 161) = 1;
        return result;
      }
      uint64_t v6 = *(uint64_t **)v5;
      *((void *)this + 3) = *(void *)this + 8;
      *((void *)this + 2) = v6;
      sub_1CC2FDE4C((uint64_t)this + 24, *v6);
    }
    uint64_t v7 = *((unsigned int *)this + 10);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = **((void **)this + 1) + 24 * *(unsigned int *)(*((void *)this + 1) + 8);
      do
      {
        while (1)
        {
          uint64_t v10 = *((void *)this + 4);
          unsigned int v12 = *(_DWORD *)(v10 + 8);
          unsigned int v11 = *(_DWORD *)(v10 + 12);
          if (v11 >= v12) {
            goto LABEL_44;
          }
          int v14 = (void *)*((void *)this + 2);
          uint64_t v13 = *((void *)this + 3);
          int v15 = *(_DWORD *)(v13 + 192);
          uint64_t v16 = v10 + 16 * v7;
          uint64_t v17 = *(void *)(v16 - 16);
          uint64_t v18 = *(unsigned int *)(v16 - 4);
          unsigned int v19 = (uint64_t *)(v17 + 16 * v18);
          uint64_t v20 = *v19;
          unsigned int v21 = *(_DWORD *)((v19[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v19[1] >> 1) & 3;
          if (((*v14 >> 1) & 3 | *(_DWORD *)((*v14 & 0xFFFFFFFFFFFFFFF8) + 24)) < v21) {
            break;
          }
          unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v24 = (v20 >> 1) & 3;
LABEL_41:
          uint64_t v31 = (uint64_t *)(**((void **)this + 1) + 24 * *(unsigned int *)(*((void *)this + 1) + 8));
          unsigned int v45 = *(_DWORD *)(v22 + 24) | v24;
          if (v45 < ((*(v31 - 2) >> 1) & 3 | *(_DWORD *)((*(v31 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
          {
            uint64_t v31 = v14 - 3;
            do
            {
              unsigned int v30 = (v31[4] >> 1) & 3 | *(_DWORD *)((v31[4] & 0xFFFFFFFFFFFFFFF8) + 24);
              v31 += 3;
            }
            while (v30 <= v45);
          }
          *((void *)this + 2) = v31;
          if (v31 != (uint64_t *)v9)
          {
            if (v11 < v12)
            {
              uint64_t v46 = *v31;
              unsigned int v47 = (*v31 >> 1) & 3 | *(_DWORD *)((*v31 & 0xFFFFFFFFFFFFFFF8) + 24);
              if (v47 >= v21)
              {
                if (v15)
                {
                  sub_1CC2D04B8((uint64_t)this + 24, v46);
                }
                else
                {
                  int v48 = *(_DWORD *)(v13 + 196);
                  if (v18 != v48)
                  {
                    while (1)
                    {
                      uint64_t v49 = *(void *)(v13 + 16 * v18 + 8);
                      if (((v49 >> 1) & 3 | *(_DWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 24)) > v47) {
                        break;
                      }
                      LODWORD(v18) = v18 + 1;
                      if (v48 == v18)
                      {
                        LODWORD(v18) = *(_DWORD *)(v13 + 196);
                        break;
                      }
                    }
                  }
                  *(_DWORD *)(v16 - 4) = v18;
                }
              }
            }
            uint64_t v7 = *((unsigned int *)this + 10);
            if (v7) {
              continue;
            }
          }
          goto LABEL_44;
        }
        unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFF8;
        int v23 = *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v24 = (v20 >> 1) & 3;
        if (((v14[1] >> 1) & 3 | *(_DWORD *)((v14[1] & 0xFFFFFFFFFFFFFFF8) + 24)) <= (v23 | v24)) {
          goto LABEL_41;
        }
        uint64_t v25 = *(void *)(v17 + 8 * v18 + 128);
        if (v25 != v8)
        {
          int v26 = (void *)*((void *)this + 14);
          uint64_t v27 = *((unsigned int *)this + 30);
          uint64_t v28 = v26;
          if (v27)
          {
            uint64_t v29 = 8 * v27;
            uint64_t v28 = (void *)*((void *)this + 14);
            while (*v28 != v25)
            {
              ++v28;
              v29 -= 8;
              if (!v29)
              {
                uint64_t v28 = &v26[v27];
                break;
              }
            }
          }
          if (v27 == v28 - v26)
          {
            if (v27 >= *((_DWORD *)this + 31)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v26[v27] = v25;
            uint64_t result = (*((_DWORD *)this + 30) + 1);
            *((_DWORD *)this + 30) = result;
            if (result >= a2) {
              return result;
            }
            uint64_t v10 = *((void *)this + 4);
            uint64_t v7 = *((unsigned int *)this + 10);
            LODWORD(v18) = *(_DWORD *)(v10 + 16 * v7 - 4);
            uint64_t v8 = v25;
          }
        }
        int v32 = v18 + 1;
        *(_DWORD *)(v10 + 16 * v7 - 4) = v32;
        uint64_t v7 = *((unsigned int *)this + 10);
        if (v32 == *(_DWORD *)(v10 + 16 * v7 - 8))
        {
          uint64_t v33 = *(unsigned int *)(*((void *)this + 3) + 192);
          if (v33)
          {
            unsigned int v34 = 1;
            uint64_t v35 = v33 + 1;
            unsigned int v36 = (_DWORD *)(v10 + 16 * v33 - 8);
            while (1)
            {
              unsigned int v37 = v36;
              if (v35 == 2) {
                break;
              }
              int v39 = *v36;
              int v38 = v36[1];
              int v40 = *v36 - 1;
              --v35;
              v36 -= 4;
              if (v38 != v40)
              {
                unsigned int v34 = v35;
                goto LABEL_34;
              }
            }
            int v39 = *(_DWORD *)(v10 + 8);
            int v38 = *(_DWORD *)(v10 + 12);
LABEL_34:
            unsigned int v41 = v38 + 1;
            v37[1] = v41;
            if (v41 != v39)
            {
              uint64_t v42 = *(void *)(*((void *)v37 - 1) + 8 * v41);
              if (v33 != v34)
              {
                do
                {
                  uint64_t v44 = *((void *)this + 4) + 16 * v34;
                  *(void *)uint64_t v44 = v42 & 0xFFFFFFFFFFFFFFC0;
                  *(_DWORD *)(v44 + 8) = (v42 & 0x3F) + 1;
                  *(_DWORD *)(v44 + 12) = 0;
                  ++v34;
                  uint64_t v42 = *(void *)(v42 & 0xFFFFFFFFFFFFFFC0);
                }
                while (v33 != v34);
                uint64_t v10 = *((void *)this + 4);
              }
              uint64_t v43 = v10 + 16 * v33;
              *(void *)uint64_t v43 = v42 & 0xFFFFFFFFFFFFFFC0;
              *(_DWORD *)(v43 + 8) = (v42 & 0x3F) + 1;
              *(_DWORD *)(v43 + 12) = 0;
              uint64_t v7 = *((unsigned int *)this + 10);
            }
          }
        }
      }
      while (v7);
    }
LABEL_44:
    *((unsigned char *)this + 161) = 1;
  }
  return *((unsigned int *)this + 30);
}

uint64_t sub_1CC2FDE4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result;
  if (*(_DWORD *)(*(void *)result + 192))
  {
    uint64_t v9 = v2 + 8;
    uint64_t v10 = *(unsigned int *)(v2 + 196);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v2 + 96;
      while (((*(void *)(v12 + 8 * v11) >> 1) & 3 | *(_DWORD *)((*(void *)(v12 + 8 * v11) & 0xFFFFFFFFFFFFFFF8)
                                                                               + 24)) <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
      {
        if (v10 == ++v11)
        {
          uint64_t v11 = v10;
          break;
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    *(_DWORD *)(result + 16) = 0;
    if (!*(_DWORD *)(result + 20)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v13 = v10 | (v11 << 32);
    int v14 = *(void **)(result + 8);
    *int v14 = v9;
    v14[1] = v13;
    int v15 = *(_DWORD *)(result + 16);
    *(_DWORD *)(result + 16) = v15 + 1;
    if (v15 != -1 && *(_DWORD *)(*(void *)(result + 8) + 12) < *(_DWORD *)(*(void *)(result + 8) + 8))
    {
      return sub_1CC2D02F0(result, a2);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(v2 + 196);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = (uint64_t *)(v2 + 8);
      while (1)
      {
        uint64_t v6 = *v5;
        v5 += 2;
        if (((v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3)) {
          break;
        }
        if (v3 == ++v4)
        {
          uint64_t v4 = *(unsigned int *)(v2 + 196);
          break;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    *(_DWORD *)(result + 16) = 0;
    if (!*(_DWORD *)(result + 20)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = v3 | (v4 << 32);
    uint64_t v8 = *(void **)(result + 8);
    *uint64_t v8 = v2;
    v8[1] = v7;
    ++*(_DWORD *)(result + 16);
  }
  return result;
}

llvm::LiveIntervalUnion::Array *llvm::LiveIntervalUnion::Array::init(llvm::LiveIntervalUnion::Array *result, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)result != a3)
  {
    uint64_t v5 = result;
    llvm::LiveIntervalUnion::Array::clear(result);
    *(_DWORD *)uint64_t v5 = a3;
    uint64_t result = (llvm::LiveIntervalUnion::Array *)malloc_type_malloc(216 * a3, 0x4065EBACuLL);
    if (!result && (a3 || (uint64_t result = (llvm::LiveIntervalUnion::Array *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    *((void *)v5 + 1) = result;
    if (*(_DWORD *)v5)
    {
      unsigned int v6 = 0;
      do
      {
        uint64_t v7 = *((void *)v5 + 1) + 216 * v6;
        *(_DWORD *)uint64_t v7 = 0;
        *(void *)(v7 + 200) = 0;
        *(void *)(v7 + 208) = a2;
        ++v6;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(_OWORD *)(v7 + 24) = 0uLL;
        *(_OWORD *)(v7 + 40) = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_OWORD *)(v7 + 72) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(_OWORD *)(v7 + 120) = 0uLL;
        *(_OWORD *)(v7 + 136) = 0uLL;
        *(_OWORD *)(v7 + 152) = 0uLL;
        *(_OWORD *)(v7 + 168) = 0uLL;
        *(_OWORD *)(v7 + 184) = 0uLL;
      }
      while (v6 != *(_DWORD *)v5);
    }
  }
  return result;
}

void llvm::LiveIntervalUnion::Array::clear(llvm::LiveIntervalUnion::Array *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    int v3 = *(_DWORD *)this;
    if (*(_DWORD *)this)
    {
      unsigned int v4 = 0;
      do
      {
        uint64_t v5 = *((void *)this + 1);
        unsigned int v6 = v4;
        if (*(_DWORD *)(v5 + 216 * v4 + 200))
        {
          uint64_t v7 = v5 + 216 * v4;
          sub_1CC2FE1FC(v7 + 8, (void (*)(void *, void, uint64_t))llvm::IntervalMap<llvm::SlotIndex,llvm::LiveInterval const*,8u,llvm::IntervalMapInfo<llvm::SlotIndex>>::deleteNode, 0);
          *(_DWORD *)(v7 + 200) = 0;
          *(_OWORD *)(v7 + 184) = 0u;
          *(_OWORD *)(v7 + 168) = 0u;
          *(_OWORD *)(v7 + 152) = 0u;
          *(_OWORD *)(v7 + 136) = 0u;
          *(_OWORD *)(v7 + 120) = 0u;
          *(_OWORD *)(v7 + 104) = 0u;
          *(_OWORD *)(v7 + 88) = 0u;
          *(_OWORD *)(v7 + 72) = 0u;
          *(_OWORD *)(v7 + 56) = 0u;
          *(_OWORD *)(v7 + 40) = 0u;
          *(_OWORD *)(v7 + 24) = 0u;
          *(_OWORD *)(v7 + 8) = 0u;
          int v3 = *(_DWORD *)this;
        }
        *(_DWORD *)(v5 + 216 * v6 + 204) = 0;
        unsigned int v4 = v6 + 1;
      }
      while (v6 + 1 != v3);
      uint64_t v2 = (void *)*((void *)this + 1);
    }
    free(v2);
    *(_DWORD *)this = 0;
    *((void *)this + 1) = 0;
  }
}

void sub_1CC2FE1FC(uint64_t a1, void (*a2)(void *, void, uint64_t), uint64_t a3)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3)
  {
    unint64_t v22 = v24;
    uint64_t v23 = 0x400000000;
    unsigned int v19 = v21;
    uint64_t v20 = 0x400000000;
    unsigned int v7 = *(_DWORD *)(a1 + 196);
    if (v7)
    {
      unsigned int v7 = 0;
      unsigned int v8 = 0;
      do
      {
        if (v7 >= HIDWORD(v23)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v22 + v7) = *(void *)(a1 + 8 + 8 * v8);
        unsigned int v7 = v23 + 1;
        LODWORD(v23) = v23 + 1;
        ++v8;
      }
      while (v8 != *(_DWORD *)(a1 + 196));
      int v3 = *(_DWORD *)(a1 + 192);
    }
    uint64_t v9 = (v3 - 1);
    if (v3 != 1)
    {
      do
      {
        uint64_t v18 = v23;
        if (v23)
        {
          uint64_t v13 = 0;
          uint64_t v17 = (void *)(a1 + (a3 >> 1));
          do
          {
            uint64_t v14 = 0;
            unsigned int v15 = v20;
            uint64_t v16 = 8 * (*((void *)v22 + v13) & 0x3FLL) + 8;
            do
            {
              if (v15 >= HIDWORD(v20)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v19 + v15) = *(void *)((*((void *)v22 + v13) & 0xFFFFFFFFFFFFFFC0) + v14);
              unsigned int v15 = v20 + 1;
              LODWORD(v20) = v20 + 1;
              v14 += 8;
            }
            while (v16 != v14);
            if (a3) {
              (*(void (**)(void *, void, uint64_t))(*v17 + a2))(v17, *((void *)v22 + v13), v9);
            }
            else {
              a2(v17, *((void *)v22 + v13), v9);
            }
            ++v13;
          }
          while (v13 != v18);
        }
        LODWORD(v23) = 0;
        sub_1CC2E99B4(&v22, &v19);
        uint64_t v9 = (v9 - 1);
      }
      while (v9);
      unsigned int v7 = v23;
    }
    if (v7)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 8 * v7;
      uint64_t v12 = (void *)(a1 + (a3 >> 1));
      do
      {
        if (a3) {
          (*(void (**)(void *, void, void))(*v12 + a2))(v12, *(void *)((char *)v22 + v10), 0);
        }
        else {
          a2(v12, *(void *)((char *)v22 + v10), 0);
        }
        v10 += 8;
      }
      while (v11 != v10);
    }
    if (v19 != v21) {
      free(v19);
    }
    if (v22 != v24) {
      free(v22);
    }
  }
}

uint64_t llvm::IntervalMap<llvm::SlotIndex,llvm::LiveInterval const*,8u,llvm::IntervalMapInfo<llvm::SlotIndex>>::deleteNode(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unint64_t **)(result + 200);
  *(void *)(a2 & 0xFFFFFFFFFFFFFFC0) = *v2;
  *uint64_t v2 = a2 & 0xFFFFFFFFFFFFFFC0;
  return result;
}

void sub_1CC2FE4A4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  unsigned int v9 = a1[4];
  if (!v9 || (uint64_t v10 = *(void *)v8, *(_DWORD *)(*(void *)v8 + 12) >= *(_DWORD *)(*(void *)v8 + 8)))
  {
    uint64_t v40 = *(unsigned int *)(*(void *)a1 + 192);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(void *)a1 + 192));
    uint64_t v10 = *((void *)a1 + 1);
    ++*(_DWORD *)(v10 + 16 * v40 + 12);
    unsigned int v9 = a1[4];
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10 + 16 * v9;
  int v13 = *(_DWORD *)(v12 - 4);
  if (!v13)
  {
    uint64_t v25 = *(void **)(v12 - 16);
    if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3) >= ((*v25 >> 1) & 3 | *(_DWORD *)((*v25 & 0xFFFFFFFFFFFFFFF8) + 24))) {
      goto LABEL_21;
    }
    unsigned int v26 = v9 - 1;
    if (v9 == 1) {
      goto LABEL_16;
    }
    unsigned int v27 = v9 - 2;
    int v28 = v9;
    while (1)
    {
      uint64_t v29 = v27;
      if (!v27) {
        break;
      }
      int v30 = *(_DWORD *)(v10 + 16 * v27 + 12);
      --v28;
      --v27;
      if (v30) {
        goto LABEL_18;
      }
    }
    int v30 = *(_DWORD *)(v10 + 12);
    if (!v30) {
      goto LABEL_16;
    }
    int v28 = 1;
LABEL_18:
    uint64_t v31 = *(void *)(*(void *)(v10 + 16 * v29) + 8 * (v30 - 1));
    if (v28 != v26)
    {
      unsigned int v52 = ~v28 + v9;
      do
      {
        uint64_t v31 = *(void *)((v31 & 0xFFFFFFFFFFFFFFC0) + 8 * (v31 & 0x3F));
        --v52;
      }
      while (v52);
    }
    if (!v31)
    {
LABEL_16:
      int v13 = 0;
      **(void **)a1 = a2;
      goto LABEL_4;
    }
    unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFC0;
    uint64_t v33 = v31 & 0x3F;
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFFC0) + 8 * v33 + 0x80) == a4
      && (v41 = v32 + 16 * v33, v43 = *(void *)(v41 + 8), uint64_t v42 = (uint64_t *)(v41 + 8), v43 == a2))
    {
      llvm::IntervalMapImpl::Path::moveLeft(v8, v26);
      if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3) <= ((*v25 >> 1) & 3 | *(_DWORD *)((*v25 & 0xFFFFFFFFFFFFFFF8) + 24))
        && (v25[16] != a4 || *v25 != a3))
      {
        int v44 = a1[4];
        *uint64_t v42 = a3;
        unsigned int v45 = v44 - 1;
        if (v44 == 1) {
          return;
        }
        uint64_t v22 = *(void *)v8;
        uint64_t v46 = 16 * v45;
        while (1)
        {
          uint64_t v47 = v46 - 16;
          if (v46 == 16) {
            break;
          }
          uint64_t v48 = v22 + v46;
          uint64_t v49 = *(void *)(v48 - 16);
          uint64_t v51 = v48 - 8;
          LODWORD(v48) = *(_DWORD *)(v48 - 8);
          uint64_t v50 = *(unsigned int *)(v51 + 4);
          *(void *)(v49 + 8 * v50 + 96) = a3;
          LODWORD(v49) = v48 - 1;
          uint64_t v46 = v47;
          if (v50 != v49) {
            return;
          }
        }
LABEL_36:
        *(void *)(*(void *)v22 + 8 * *(unsigned int *)(v22 + 12) + 88) = a3;
        return;
      }
      a2 = *(void *)(v32 + 16 * v33);
      sub_1CC2FEC58((uint64_t *)a1, 0);
      uint64_t v10 = *((void *)a1 + 1);
      uint64_t v11 = a1[4];
      int v13 = *(_DWORD *)(v10 + 16 * v11 - 4);
    }
    else
    {
LABEL_21:
      int v13 = 0;
    }
  }
LABEL_4:
  uint64_t v14 = v10 + 16 * v11;
  uint64_t v15 = *(unsigned int *)(v14 - 8);
  BOOL v16 = v13 == v15;
  unsigned int v17 = sub_1CC2FE7E4(*(void *)(v14 - 16), (_DWORD *)(v14 - 4), v15, a2, a3, a4);
  if (v17 >= 9)
  {
    sub_1CC2FEEBC(a1, a1[4] - 1);
    uint64_t v18 = (_DWORD *)(*((void *)a1 + 1) + 16 * a1[4]);
    int v19 = *--v18;
    uint64_t v20 = *(v18 - 1);
    BOOL v16 = v19 == v20;
    unsigned int v17 = sub_1CC2FE7E4(*(void *)(v18 - 3), v18, v20, a2, a3, a4);
  }
  int v21 = a1[4];
  uint64_t v22 = *((void *)a1 + 1);
  uint64_t v23 = (v21 - 1);
  *(_DWORD *)(v22 + 16 * v23 + 8) = v17;
  if (v21 != 1)
  {
    uint64_t v24 = v22 + 16 * (v21 - 2);
    *(void *)(*(void *)v24 + 8 * *(unsigned int *)(v24 + 12)) = *(void *)(*(void *)v24
                                                                                + 8 * *(unsigned int *)(v24 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v17 - 1);
    if (v16)
    {
      uint64_t v34 = 16 * v23;
      while (1)
      {
        uint64_t v35 = v34 - 16;
        if (v34 == 16) {
          break;
        }
        uint64_t v36 = v22 + v34;
        uint64_t v37 = *(void *)(v36 - 16);
        uint64_t v39 = v36 - 8;
        LODWORD(v36) = *(_DWORD *)(v36 - 8);
        uint64_t v38 = *(unsigned int *)(v39 + 4);
        *(void *)(v37 + 8 * v38 + 96) = a3;
        LODWORD(v37) = v36 - 1;
        uint64_t v34 = v35;
        if (v38 != v37) {
          return;
        }
      }
      goto LABEL_36;
    }
  }
}

uint64_t sub_1CC2FE7E4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  if (!v6)
  {
LABEL_4:
    if (v6 == a3)
    {
      uint64_t v14 = (void *)(a1 + 16 * a3);
      *uint64_t v14 = a4;
      v14[1] = a5;
      *(void *)(a1 + 8 * a3 + 128) = a6;
      return (a3 + 1);
    }
    uint64_t v8 = a1 + 8 * v6;
    uint64_t v10 = *(void *)(v8 + 128);
    unsigned int v9 = (void *)(v8 + 128);
    if (v10 == a6)
    {
      uint64_t v18 = (void *)(a1 + 16 * v6);
      if (*v18 == a5)
      {
        void *v18 = a4;
        return a3;
      }
    }
    if (a3 != 8)
    {
      unsigned int v11 = a3;
      do
      {
        *(_OWORD *)(a1 + 16 * v11) = *(_OWORD *)(a1 + 16 * (v11 - 1));
        *(void *)(a1 + 128 + 8 * v11) = *(void *)(a1 + 128 + 8 * (v11 - 1));
        --v11;
      }
      while (v6 != v11);
      uint64_t v12 = (void *)(a1 + 16 * v6);
      *uint64_t v12 = a4;
      v12[1] = a5;
      *unsigned int v9 = a6;
      return (a3 + 1);
    }
    return 9;
  }
  uint64_t v7 = (v6 - 1);
  if (*(void *)(a1 + 8 * v7 + 128) != a6
    || (v15 = a1 + 16 * v7, uint64_t v17 = *(void *)(v15 + 8), v16 = (void *)(v15 + 8), v17 != a4))
  {
    if (v6 == 8) {
      return 9;
    }
    goto LABEL_4;
  }
  *a2 = v7;
  if (v6 != a3 && *(void *)(a1 + 8 * v6 + 128) == a6 && *(void *)(a1 + 16 * v6) == a5)
  {
    void *v16 = *(void *)(a1 + 16 * v6 + 8);
    if (v6 + 1 != a3)
    {
      do
      {
        *(_OWORD *)(a1 + 16 * v6) = *(_OWORD *)(a1 + 16 * (v6 + 1));
        *(void *)(a1 + 128 + 8 * v6) = *(void *)(a1 + 128 + 8 * (v6 + 1));
        LODWORD(v6) = v6 + 1;
      }
      while (a3 - 1 != v6);
    }
    return (a3 - 1);
  }
  else
  {
    void *v16 = a5;
  }
  return a3;
}

uint64_t sub_1CC2FE92C(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = 0;
  unsigned int v3 = 0;
  LODWORD(v4) = 0;
  v41[3] = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a1 + 196) + 1;
  unsigned int v6 = v5 >> 1;
  unint64_t v7 = v5 & 1;
  LODWORD(v8) = 2;
  do
  {
    if (v2 >= v7) {
      unsigned int v9 = v6;
    }
    else {
      unsigned int v9 = v6 + 1;
    }
    *((_DWORD *)&v41[2] + v2) = v9;
    unsigned int v10 = a2 - v3;
    v3 += v9;
    BOOL v11 = v8 == 2;
    BOOL v12 = v3 > a2;
    if (v11 && v12) {
      uint64_t v8 = v2;
    }
    else {
      uint64_t v8 = v8;
    }
    if (v11 && v12) {
      uint64_t v4 = v10;
    }
    else {
      uint64_t v4 = v4;
    }
    ++v2;
  }
  while (v2 != 2);
  char v13 = 0;
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  --*((_DWORD *)&v41[2] + v8);
  v41[0] = 0;
  v41[1] = 0;
  long long v16 = 0uLL;
  do
  {
    char v17 = v13;
    uint64_t v18 = *(void *)(a1 + 200);
    unint64_t v19 = *(void *)v18;
    if (*(void *)v18)
    {
      *(void *)uint64_t v18 = *(void *)v19;
    }
    else
    {
      *(void *)(v18 + 88) += 192;
      uint64_t v30 = *(void *)(v18 + 8);
      if (((v30 + 63) & 0xFFFFFFFFFFFFFFC0) - v30 + 192 > *(void *)(v18 + 16) - v30)
      {
        char v40 = v17;
        uint64_t v39 = v14;
        unsigned int v38 = v15;
        uint64_t v36 = v4;
        uint64_t v37 = v8;
        uint64_t v35 = a1;
        unsigned int v31 = *(_DWORD *)(v18 + 32) >> 7;
        if (v31 >= 0x1E) {
          LOBYTE(v31) = 30;
        }
        uint64_t v32 = 4096 << v31;
        uint64_t v33 = (char *)operator new(4096 << v31, (std::align_val_t)8uLL);
        unint64_t v34 = *(unsigned int *)(v18 + 32);
        if (v34 >= *(unsigned int *)(v18 + 36)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v18 + 24) + 8 * v34) = v33;
        ++*(_DWORD *)(v18 + 32);
        unint64_t v19 = (unint64_t)(v33 + 63) & 0xFFFFFFFFFFFFFFC0;
        *(void *)(v18 + 8) = v19 + 192;
        *(void *)(v18 + 16) = &v33[v32];
        a1 = v35;
        uint64_t v4 = v36;
        uint64_t v8 = v37;
        unsigned int v15 = v38;
        uint64_t v14 = v39;
        char v17 = v40;
        long long v16 = 0uLL;
      }
      else
      {
        unint64_t v19 = (v30 + 63) & 0xFFFFFFFFFFFFFFC0;
        *(void *)(v18 + 8) = v19 + 192;
      }
    }
    *(_OWORD *)(v19 + 160) = v16;
    *(_OWORD *)(v19 + 176) = v16;
    *(_OWORD *)(v19 + 128) = v16;
    *(_OWORD *)(v19 + 144) = v16;
    *(_OWORD *)(v19 + 96) = v16;
    *(_OWORD *)(v19 + 112) = v16;
    *(_OWORD *)(v19 + 64) = v16;
    *(_OWORD *)(v19 + 80) = v16;
    *(_OWORD *)(v19 + 32) = v16;
    *(_OWORD *)(v19 + 48) = v16;
    *(_OWORD *)unint64_t v19 = v16;
    *(_OWORD *)(v19 + 16) = v16;
    int v20 = *((_DWORD *)&v41[2] + v14);
    if (v20)
    {
      int v21 = (void *)(v19 + 128);
      uint64_t v22 = (void *)(v19 + 8);
      int v23 = *((_DWORD *)&v41[2] + v14);
      unsigned int v24 = v15;
      do
      {
        uint64_t v25 = (void *)(a1 + 16 * v24);
        *(v22 - 1) = *v25;
        void *v22 = v25[1];
        v22 += 2;
        *v21++ = *(void *)(a1 + 8 * v24++ + 128);
        --v23;
      }
      while (v23);
    }
    v15 += v20;
    v41[v14] = v19 & 0xFFFFFFFFFFFFFFC0 | (v20 - 1);
    char v13 = 1;
    uint64_t v14 = 1;
  }
  while ((v17 & 1) == 0);
  uint64_t v26 = 0;
  *(_DWORD *)(a1 + 192) = 1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  do
  {
    uint64_t v27 = v41[v26];
    uint64_t v28 = a1 + 8 * v26;
    *(void *)(v28 + 96) = *(void *)((v27 & 0xFFFFFFFFFFFFFFC0)
                                      + 16 * (*((_DWORD *)&v41[2] + v26) - 1)
                                      + 8);
    *(void *)(v28 + 8) = v27;
    ++v26;
  }
  while (v26 != 2);
  *(void *)a1 = *(void *)(v41[0] & 0xFFFFFFFFFFFFFFC0);
  *(_DWORD *)(a1 + 196) = 2;
  return v8 | (v4 << 32);
}

uint64_t sub_1CC2FEC0C(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(result + 8);
  unsigned int v5 = (_DWORD *)(v4 + 16 * a2 - 8);
  while (--v3)
  {
    uint64_t v6 = *((void *)v5 - 1);
    int v8 = *v5;
    uint64_t v7 = v5[1];
    v5 -= 4;
    *(void *)(v6 + 8 * v7 + 96) = a3;
    if (v7 != v8 - 1) {
      return result;
    }
  }
  *(void *)(*(void *)v4 + 8 * *(unsigned int *)(v4 + 12) + 88) = a3;
  return result;
}

uint64_t *sub_1CC2FEC58(uint64_t *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = *((unsigned int *)result + 4);
  uint64_t v7 = v4 + 16 * v6;
  int v8 = *(void **)(v7 - 16);
  int v9 = *(_DWORD *)(v7 - 8);
  if (v9 != 1)
  {
    unsigned int v10 = *(_DWORD *)(v7 - 4);
    if (v10 + 1 != v9)
    {
      do
      {
        *(_OWORD *)&v8[2 * v10] = *(_OWORD *)&v8[2 * v10 + 2];
        v8[v10 + 16] = v8[v10 + 17];
        ++v10;
      }
      while (v9 - 1 != v10);
      uint64_t v4 = result[1];
      int v9 = *(_DWORD *)(v4 + 16 * v6 - 8);
    }
    uint64_t v11 = v4 + 16 * v6;
    int v12 = v9 - 1;
    uint64_t v13 = *(unsigned int *)(v5 + 192);
    *(_DWORD *)(v4 + 16 * v13 + 8) = v9 - 1;
    if (v13)
    {
      uint64_t v14 = (v9 - 2);
      *(void *)(*(void *)(v4 + 16 * (v13 - 1))
                + 8 * *(unsigned int *)(v4 + 16 * (v13 - 1) + 12)) = *(void *)(*(void *)(v4 + 16 * (v13 - 1))
                                                                                                 + 8
                                                                                                 * *(unsigned int *)(v4 + 16 * (v13 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v14;
      if (*(_DWORD *)(v11 - 4) != v12) {
        goto LABEL_7;
      }
      uint64_t v18 = v8[2 * v14 + 1];
      uint64_t v19 = 16 * v13;
      while (1)
      {
        uint64_t v20 = v19 - 16;
        if (v19 == 16) {
          break;
        }
        uint64_t v21 = v4 + v19;
        uint64_t v22 = *(void *)(v21 - 16);
        uint64_t v24 = v21 - 8;
        LODWORD(v21) = *(_DWORD *)(v21 - 8);
        uint64_t v23 = *(unsigned int *)(v24 + 4);
        *(void *)(v22 + 8 * v23 + 96) = v18;
        LODWORD(v22) = v21 - 1;
        uint64_t v19 = v20;
        if (v23 != v22) {
          goto LABEL_20;
        }
      }
      *(void *)(*(void *)v4 + 8 * *(unsigned int *)(v4 + 12) + 88) = v18;
    }
    else if (*(_DWORD *)(v11 - 4) != v12)
    {
LABEL_7:
      if (a2)
      {
        if (v6)
        {
          unsigned int v15 = (int *)(v4 + 12);
          while (1)
          {
            int v16 = *v15;
            v15 += 4;
            if (v16) {
              break;
            }
            if (!--v6) {
              goto LABEL_12;
            }
          }
        }
        else
        {
LABEL_12:
          char v17 = *(void **)(v11 - 16);
LABEL_13:
          *(void *)uint64_t v5 = *v17;
        }
      }
      return result;
    }
LABEL_20:
    int v25 = 0;
    int v26 = v13 - 1;
    while (1)
    {
      int v27 = v25;
      uint64_t v28 = (v26 + v25);
      if (!(v26 + v25)) {
        break;
      }
      int v30 = *(_DWORD *)(v4 + 16 * v28 + 8);
      int v29 = *(_DWORD *)(v4 + 16 * v28 + 12);
      --v25;
      if (v29 != v30 - 1) {
        goto LABEL_25;
      }
    }
    uint64_t v28 = 0;
    int v30 = *(_DWORD *)(v4 + 8);
    int v29 = *(_DWORD *)(v4 + 12);
LABEL_25:
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v4 + 16 * v28 + 12) = v31;
    if (v31 != v30)
    {
      uint64_t v32 = *(void *)(*(void *)(v4 + 16 * v28) + 8 * v31);
      if (v27)
      {
        do
        {
          uint64_t v40 = result[1] + 16 * (v13 + v27);
          *(void *)uint64_t v40 = v32 & 0xFFFFFFFFFFFFFFC0;
          *(_DWORD *)(v40 + 8) = (v32 & 0x3F) + 1;
          *(_DWORD *)(v40 + 12) = 0;
          uint64_t v32 = *(void *)(v32 & 0xFFFFFFFFFFFFFFC0);
        }
        while (!__CFADD__(v27++, 1));
        uint64_t v4 = result[1];
      }
      uint64_t v33 = (unint64_t *)(v4 + 16 * v13);
      *uint64_t v33 = v32 & 0xFFFFFFFFFFFFFFC0;
      v33[1] = (v32 & 0x3F) + 1;
    }
    return result;
  }
  unint64_t v34 = *(void **)(v5 + 200);
  *int v8 = *v34;
  *unint64_t v34 = v8;
  uint64_t result = sub_1CC2FF49C(result, *(_DWORD *)(v5 + 192));
  if (a2)
  {
    if (*(_DWORD *)(v5 + 192))
    {
      uint64_t v35 = *((unsigned int *)v3 + 4);
      if (v35)
      {
        uint64_t v36 = v3[1];
        if (*(_DWORD *)(v36 + 12) < *(_DWORD *)(v36 + 8))
        {
          uint64_t v37 = (int *)(v36 + 12);
          uint64_t v38 = *((unsigned int *)v3 + 4);
          while (1)
          {
            int v39 = *v37;
            v37 += 4;
            if (v39) {
              break;
            }
            if (!--v38)
            {
              char v17 = *(void **)(v36 + 16 * v35 - 16);
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  return result;
}