uint64_t sub_1CC91B7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC91B890(void *a1)
{
  *a1 = &unk_1F26283B0;
  v2 = a1 + 1;
  v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void sub_1CC91B934(void *a1)
{
  *a1 = &unk_1F26283B0;
  v1 = a1 + 1;
  v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC91B9F8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  void *v2 = &unk_1F26283B0;
  sub_1CC91B7F8((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CC91BA4C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26283B0;
  return sub_1CC91B7F8((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1CC91BA78()
{
  LOBYTE(v1) = 0;
  v4 = &v1;
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Force function specialization for every call site with a constant argument";
  v2.n128_u64[1] = 74;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDF490, "force-function-specialization", (unsigned char **)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDF490, &dword_1CB82C000);
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"The maximum number of iterations function specialization is run";
  v2.n128_u64[1] = 63;
  int v1 = 1;
  v4 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCDF550, "func-specialization-max-iters", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDF550, &dword_1CB82C000);
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"The maximum number of clones allowed for a single function specialization";
  v2.n128_u64[1] = 73;
  int v1 = 3;
  v4 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCDF610, "func-specialization-max-clones", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDF610, &dword_1CB82C000);
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Don't specialize functions that have less than this theshold number of instructions";
  v2.n128_u64[1] = 83;
  int v1 = 100;
  v4 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCDF6D0, "func-specialization-size-threshold", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDF6D0, &dword_1CB82C000);
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Average loop iteration count cost";
  v2.n128_u64[1] = 33;
  int v1 = 10;
  v4 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCDF790, "func-specialization-avg-iters-cost", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDF790, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  v4 = &v1;
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Enable function specialization on the address of global values";
  v2.n128_u64[1] = 62;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDF850, "func-specialization-on-address", (unsigned char **)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDF850, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  v4 = &v1;
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Enable specialization of functions that take a literal constant as an argument.";
  v2.n128_u64[1] = 79;
  sub_1CD664CCC((char **)&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCDF910, &dword_1CB82C000);
}

void llvm::initializeGlobalDCELegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  __n128 v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDFA98, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC91BD68;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCDFA98, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC91BD68()
{
}

uint64_t sub_1CC91BE04(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDFA90;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F26283F8;
  *(void *)(a1 + 32) = a1 + 64;
  *(void *)(a1 + 40) = a1 + 64;
  *(void *)(a1 + 48) = 32;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_DWORD *)(a1 + 440) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDFA98, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC91BD68;
    v5[1] = &PassRegistry;
    v4 = v5;
    std::__call_once(&qword_1EBCDFA98, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::GlobalDCEPass::ComputeDependencies(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2;
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v7 >= 0x1C)
  {
    unint64_t v5 = *(void *)(*(void *)(a2 + 40) + 56);
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = *(unsigned int *)(a3 + 20);
    if (v8 == *(void *)a3)
    {
      if (v9)
      {
        v10 = 0;
        uint64_t v11 = 8 * v9;
        v12 = *(unint64_t **)(a3 + 8);
        while (*v12 != v5)
        {
          if (*v12 == -2) {
            v10 = v12;
          }
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            if (v10) {
              goto LABEL_116;
            }
            goto LABEL_11;
          }
        }
        return;
      }
LABEL_11:
      unsigned int v13 = *(_DWORD *)(a3 + 16);
      if (v9 < v13)
      {
LABEL_12:
        *(_DWORD *)(a3 + 20) = v9 + 1;
        *(void *)(v8 + 8 * v9) = v5;
        return;
      }
    }
    else
    {
      unsigned int v13 = *(_DWORD *)(a3 + 16);
    }
    if (3 * v13 <= 4 * ((int)v9 - *(_DWORD *)(a3 + 24)))
    {
      if (v13 >= 0x40) {
        v13 *= 2;
      }
      else {
        unsigned int v13 = 128;
      }
    }
    else if (v13 - v9 >= v13 >> 3)
    {
      goto LABEL_17;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v13);
    unsigned int v13 = *(_DWORD *)(a3 + 16);
    uint64_t v8 = *(void *)(a3 + 8);
LABEL_17:
    unsigned int v14 = v13 - 1;
    unsigned int v15 = (v13 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    v16 = (unint64_t *)(v8 + 8 * v15);
    unint64_t v17 = *v16;
    if (*v16 != -1)
    {
      v18 = 0;
      int v19 = 1;
      while (v17 != v5)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        v16 = (unint64_t *)(v8 + 8 * (v21 & v14));
        unint64_t v17 = *v16;
        if (*v16 == -1) {
          goto LABEL_202;
        }
      }
      return;
    }
    goto LABEL_201;
  }
  if (a2 && v7 <= 3)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = *(unsigned int *)(a3 + 20);
    if (v8 == *(void *)a3)
    {
      if (v9)
      {
        v10 = 0;
        uint64_t v58 = 8 * v9;
        v59 = *(unint64_t **)(a3 + 8);
        do
        {
          if (*v59 == a2) {
            return;
          }
          if (*v59 == -2) {
            v10 = v59;
          }
          ++v59;
          v58 -= 8;
        }
        while (v58);
        if (v10)
        {
LABEL_116:
          unint64_t *v10 = v5;
          --*(_DWORD *)(a3 + 24);
          return;
        }
      }
      unsigned int v60 = *(_DWORD *)(a3 + 16);
      if (v9 < v60) {
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int v60 = *(_DWORD *)(a3 + 16);
    }
    if (3 * v60 <= 4 * ((int)v9 - *(_DWORD *)(a3 + 24)))
    {
      if (v60 >= 0x40) {
        v60 *= 2;
      }
      else {
        unsigned int v60 = 128;
      }
    }
    else if (v60 - v9 >= v60 >> 3)
    {
      goto LABEL_190;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v60);
    unsigned int v60 = *(_DWORD *)(a3 + 16);
    uint64_t v8 = *(void *)(a3 + 8);
LABEL_190:
    unsigned int v87 = v60 - 1;
    unsigned int v88 = (v60 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    v16 = (unint64_t *)(v8 + 8 * v88);
    unint64_t v89 = *v16;
    if (*v16 != -1)
    {
      v18 = 0;
      int v90 = 1;
      do
      {
        if (v89 == v5) {
          return;
        }
        if (v18) {
          BOOL v91 = 0;
        }
        else {
          BOOL v91 = v89 == -2;
        }
        if (v91) {
          v18 = v16;
        }
        unsigned int v92 = v88 + v90++;
        unsigned int v88 = v92 & v87;
        v16 = (unint64_t *)(v8 + 8 * (v92 & v87));
        unint64_t v89 = *v16;
      }
      while (*v16 != -1);
      goto LABEL_202;
    }
LABEL_201:
    v18 = 0;
LABEL_202:
    if (v18) {
      v93 = v18;
    }
    else {
      v93 = v16;
    }
    if (*v93 != v5)
    {
      if (*v93 == -2) {
        --*(_DWORD *)(a3 + 24);
      }
      else {
        ++*(_DWORD *)(a3 + 20);
      }
      unint64_t *v93 = v5;
    }
    return;
  }
  if (!a2 || v7 > 0x14) {
    return;
  }
  unint64_t v22 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v23 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v22 >> 47) ^ v22);
  unint64_t v24 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
  unint64_t v25 = *(void *)(a1 + 320);
  if (!v25)
  {
LABEL_118:
    v33 = operator new(0x78uLL);
    void *v33 = 0;
    v33[1] = v24;
    v33[2] = v5;
    v33[3] = v33 + 7;
    v33[4] = v33 + 7;
    v33[5] = 8;
    *((_DWORD *)v33 + 12) = 0;
    float v61 = (float)(unint64_t)(*(void *)(a1 + 336) + 1);
    float v62 = *(float *)(a1 + 344);
    if (v25 && (float)(v62 * (float)v25) >= v61)
    {
LABEL_120:
      uint64_t v63 = *(void *)(a1 + 312);
      v64 = *(void **)(v63 + 8 * v3);
      if (v64)
      {
        void *v33 = *v64;
      }
      else
      {
        void *v33 = *(void *)(a1 + 328);
        *(void *)(a1 + 328) = v33;
        *(void *)(v63 + 8 * v3) = a1 + 328;
        if (!*v33)
        {
LABEL_123:
          ++*(void *)(a1 + 336);
LABEL_124:
          for (uint64_t i = *(void *)(v5 + 8); i; uint64_t i = *(void *)(i + 8))
            llvm::GlobalDCEPass::ComputeDependencies(a1, *(void *)(i + 24), v33 + 3);
          v35 = (unint64_t *)v33[4];
          uint64_t v66 = 40;
          if (v35 == (unint64_t *)v33[3]) {
            uint64_t v66 = 44;
          }
          uint64_t v67 = *(unsigned int *)((char *)v33 + v66);
          v38 = &v35[v67];
          if (v67)
          {
            uint64_t v68 = 8 * v67;
            while (*v35 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v35;
              v68 -= 8;
              if (!v68) {
                return;
              }
            }
          }
          goto LABEL_63;
        }
        unint64_t v82 = *(void *)(*v33 + 8);
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v82 >= v25) {
            v82 %= v25;
          }
        }
        else
        {
          v82 &= v25 - 1;
        }
        v64 = (void *)(*(void *)(a1 + 312) + 8 * v82);
      }
      void *v64 = v33;
      goto LABEL_123;
    }
    BOOL v69 = 1;
    if (v25 >= 3) {
      BOOL v69 = (v25 & (v25 - 1)) != 0;
    }
    unint64_t v70 = v69 | (2 * v25);
    unint64_t v71 = vcvtps_u32_f32(v61 / v62);
    if (v70 <= v71) {
      int8x8_t prime = (int8x8_t)v71;
    }
    else {
      int8x8_t prime = (int8x8_t)v70;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v25 = *(void *)(a1 + 320);
    }
    if (*(void *)&prime <= v25)
    {
      if (*(void *)&prime >= v25) {
        goto LABEL_166;
      }
      unint64_t v83 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 336) / *(float *)(a1 + 344));
      if (v25 < 3 || (uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
      {
        unint64_t v83 = std::__next_prime(v83);
      }
      else
      {
        uint64_t v85 = 1 << -(char)__clz(v83 - 1);
        if (v83 >= 2) {
          unint64_t v83 = v85;
        }
      }
      if (*(void *)&prime <= v83) {
        int8x8_t prime = (int8x8_t)v83;
      }
      if (*(void *)&prime >= v25)
      {
        unint64_t v25 = *(void *)(a1 + 320);
        goto LABEL_166;
      }
      if (!*(void *)&prime)
      {
        v94 = *(void **)(a1 + 312);
        *(void *)(a1 + 312) = 0;
        if (v94) {
          operator delete(v94);
        }
        unint64_t v25 = 0;
        *(void *)(a1 + 320) = 0;
        goto LABEL_166;
      }
    }
    if (*(void *)&prime >> 61) {
      sub_1CB833614();
    }
    v73 = operator new(8 * *(void *)&prime);
    v74 = *(void **)(a1 + 312);
    *(void *)(a1 + 312) = v73;
    if (v74) {
      operator delete(v74);
    }
    uint64_t v75 = 0;
    *(int8x8_t *)(a1 + 320) = prime;
    do
      *(void *)(*(void *)(a1 + 312) + 8 * v75++) = 0;
    while (*(void *)&prime != v75);
    v76 = *(void **)(a1 + 328);
    if (v76)
    {
      unint64_t v77 = v76[1];
      uint8x8_t v78 = (uint8x8_t)vcnt_s8(prime);
      v78.i16[0] = vaddlv_u8(v78);
      if (v78.u32[0] <= 1uLL)
      {
        v77 &= *(void *)&prime - 1;
      }
      else if (v77 >= *(void *)&prime)
      {
        v77 %= *(void *)&prime;
      }
      *(void *)(*(void *)(a1 + 312) + 8 * v77) = a1 + 328;
      v79 = (void *)*v76;
      if (*v76)
      {
        while (1)
        {
          unint64_t v80 = v79[1];
          if (v78.u32[0] <= 1uLL)
          {
            v80 &= *(void *)&prime - 1;
          }
          else if (v80 >= *(void *)&prime)
          {
            v80 %= *(void *)&prime;
          }
          if (v80 == v77) {
            goto LABEL_160;
          }
          uint64_t v81 = *(void *)(a1 + 312);
          if (*(void *)(v81 + 8 * v80)) {
            break;
          }
          *(void *)(v81 + 8 * v80) = v76;
LABEL_157:
          v76 = v79;
          v79 = (void *)*v79;
          unint64_t v77 = v80;
          if (!v79) {
            goto LABEL_165;
          }
        }
        void *v76 = *v79;
        void *v79 = **(void **)(*(void *)(a1 + 312) + 8 * v80);
        **(void **)(*(void *)(a1 + 312) + 8 * v80) = v79;
        v79 = v76;
LABEL_160:
        unint64_t v80 = v77;
        goto LABEL_157;
      }
    }
LABEL_165:
    unint64_t v25 = (unint64_t)prime;
LABEL_166:
    if ((v25 & (v25 - 1)) != 0)
    {
      if (v24 >= v25) {
        unint64_t v3 = v24 % v25;
      }
      else {
        unint64_t v3 = v24;
      }
    }
    else
    {
      unint64_t v3 = (v25 - 1) & v24;
    }
    goto LABEL_120;
  }
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] <= 1uLL)
  {
    uint64_t v27 = (v25 - 1) & v24;
  }
  else
  {
    uint64_t v27 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
    if (v24 >= v25) {
      uint64_t v27 = v24 % v25;
    }
  }
  uint64_t v28 = *(void *)(a1 + 312);
  v29 = *(void **)(v28 + 8 * v27);
  if (!v29 || (v30 = (void *)*v29) == 0)
  {
LABEL_46:
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
      if (v24 >= v25) {
        unint64_t v3 = v24 % v25;
      }
    }
    else
    {
      unint64_t v3 = (v25 - 1) & v24;
    }
    v32 = *(void ***)(v28 + 8 * v3);
    if (v32)
    {
      v33 = *v32;
      if (*v32)
      {
        while (1)
        {
          unint64_t v34 = v33[1];
          if (v34 == v24)
          {
            if (v33[2] == a2) {
              goto LABEL_124;
            }
          }
          else
          {
            if (v26.u32[0] > 1uLL)
            {
              if (v34 >= v25) {
                v34 %= v25;
              }
            }
            else
            {
              v34 &= v25 - 1;
            }
            if (v34 != v3) {
              goto LABEL_118;
            }
          }
          v33 = (void *)*v33;
          if (!v33) {
            goto LABEL_118;
          }
        }
      }
    }
    goto LABEL_118;
  }
  while (1)
  {
    unint64_t v31 = v30[1];
    if (v31 == v24) {
      break;
    }
    if (v26.u32[0] <= 1uLL)
    {
      v31 &= v25 - 1;
    }
    else if (v31 >= v25)
    {
      v31 %= v25;
    }
    if (v31 != v27) {
      goto LABEL_46;
    }
LABEL_45:
    v30 = (void *)*v30;
    if (!v30) {
      goto LABEL_46;
    }
  }
  if (v30[2] != a2) {
    goto LABEL_45;
  }
  v35 = (unint64_t *)v30[4];
  uint64_t v36 = 40;
  if (v35 == (unint64_t *)v30[3]) {
    uint64_t v36 = 44;
  }
  uint64_t v37 = *(unsigned int *)((char *)v30 + v36);
  v38 = &v35[v37];
  if (v37)
  {
    uint64_t v57 = 8 * v37;
    while (*v35 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v35;
      v57 -= 8;
      if (!v57) {
        return;
      }
    }
  }
LABEL_63:
  if (v35 == v38) {
    return;
  }
  v40 = *(unint64_t **)a3;
  v39 = *(unint64_t **)(a3 + 8);
  unint64_t v41 = *v35;
LABEL_65:
  uint64_t v42 = *(unsigned int *)(a3 + 20);
  if (v39 != v40)
  {
    unsigned int v46 = *(_DWORD *)(a3 + 16);
    goto LABEL_79;
  }
  if (!v42)
  {
LABEL_73:
    unsigned int v46 = *(_DWORD *)(a3 + 16);
    if (v42 < v46)
    {
      *(_DWORD *)(a3 + 20) = v42 + 1;
      v40[v42] = v41;
      goto LABEL_75;
    }
LABEL_79:
    if (3 * v46 <= 4 * ((int)v42 - *(_DWORD *)(a3 + 24)))
    {
      if (v46 >= 0x40) {
        v46 *= 2;
      }
      else {
        unsigned int v46 = 128;
      }
    }
    else if (v46 - v42 >= v46 >> 3)
    {
      goto LABEL_81;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v46);
    unsigned int v46 = *(_DWORD *)(a3 + 16);
    v39 = *(unint64_t **)(a3 + 8);
LABEL_81:
    unsigned int v48 = v46 - 1;
    unsigned int v49 = (v46 - 1) & ((v41 >> 4) ^ (v41 >> 9));
    v50 = &v39[v49];
    unint64_t v51 = *v50;
    if (*v50 == -1)
    {
      v52 = 0;
LABEL_91:
      if (v52) {
        v56 = v52;
      }
      else {
        v56 = v50;
      }
      if (*v56 != v41)
      {
        if (*v56 == -2) {
          --*(_DWORD *)(a3 + 24);
        }
        else {
          ++*(_DWORD *)(a3 + 20);
        }
        unint64_t *v56 = v41;
      }
    }
    else
    {
      v52 = 0;
      int v53 = 1;
      while (v51 != v41)
      {
        if (v52) {
          BOOL v54 = 0;
        }
        else {
          BOOL v54 = v51 == -2;
        }
        if (v54) {
          v52 = v50;
        }
        unsigned int v55 = v49 + v53++;
        unsigned int v49 = v55 & v48;
        v50 = &v39[v55 & v48];
        unint64_t v51 = *v50;
        if (*v50 == -1) {
          goto LABEL_91;
        }
      }
    }
    goto LABEL_75;
  }
  v43 = 0;
  uint64_t v44 = 8 * v42;
  v45 = v40;
  while (*v45 != v41)
  {
    if (*v45 == -2) {
      v43 = v45;
    }
    ++v45;
    v44 -= 8;
    if (!v44)
    {
      if (!v43) {
        goto LABEL_73;
      }
      unint64_t *v43 = v41;
      --*(_DWORD *)(a3 + 24);
      break;
    }
  }
LABEL_75:
  v40 = *(unint64_t **)a3;
  v39 = *(unint64_t **)(a3 + 8);
  v47 = v35 + 1;
  while (v47 != v38)
  {
    unint64_t v86 = *v47++;
    unint64_t v41 = v86;
    if (v86 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v35 = v47 - 1;
      goto LABEL_65;
    }
  }
}

void llvm::GlobalDCEPass::UpdateGVDependencies(llvm::GlobalDCEPass *this, llvm::GlobalValue *a2)
{
  v4 = (uint64_t *)v60;
  v56 = (uint64_t *)v60;
  uint64_t v57 = (uint64_t *)v60;
  uint64_t v58 = 8;
  int v59 = 0;
  uint64_t v5 = *((void *)a2 + 1);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    do
    {
      llvm::GlobalDCEPass::ComputeDependencies((uint64_t)this, *(void *)(v5 + 24), (uint64_t)&v56);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5);
    v4 = v56;
    unsigned int v7 = v57;
    if (v57 == v56)
    {
      unsigned int v8 = HIDWORD(v58);
      uint64_t v9 = (llvm::GlobalValue **)&v57[HIDWORD(v58)];
      if (HIDWORD(v58))
      {
        uint64_t v10 = 0;
        while ((llvm::GlobalValue *)v57[v10] != a2)
        {
          if (HIDWORD(v58) == ++v10) {
            goto LABEL_8;
          }
        }
        uint64_t v9 = (llvm::GlobalValue **)&v57[v10];
      }
LABEL_8:
      v4 = v57;
    }
    else
    {
      int v38 = v58 - 1;
      unsigned int v39 = (v58 - 1) & (v6 ^ (a2 >> 9));
      uint64_t v9 = (llvm::GlobalValue **)&v57[v39];
      v40 = *v9;
      if (*v9 == (llvm::GlobalValue *)-1)
      {
        unint64_t v41 = 0;
LABEL_81:
        if (v41) {
          uint64_t v9 = v41;
        }
        unsigned int v8 = HIDWORD(v58);
        if (*v9 != a2) {
          uint64_t v9 = (llvm::GlobalValue **)&v57[v58];
        }
      }
      else
      {
        unint64_t v41 = 0;
        int v42 = 1;
        while (v40 != a2)
        {
          if (v41) {
            BOOL v43 = 0;
          }
          else {
            BOOL v43 = v40 == (llvm::GlobalValue *)-2;
          }
          if (v43) {
            unint64_t v41 = v9;
          }
          unsigned int v44 = v39 + v42++;
          unsigned int v39 = v44 & v38;
          uint64_t v9 = (llvm::GlobalValue **)&v57[v44 & v38];
          v40 = *v9;
          if (*v9 == (llvm::GlobalValue *)-1) {
            goto LABEL_81;
          }
        }
        unsigned int v8 = HIDWORD(v58);
      }
    }
  }
  else
  {
    unsigned int v8 = 0;
    unsigned int v7 = (uint64_t *)v60;
    uint64_t v9 = (llvm::GlobalValue **)v60;
  }
  unsigned int v11 = v58;
  if (v7 == v4) {
    int v12 = v8;
  }
  else {
    int v12 = v58;
  }
  if (v9 != (llvm::GlobalValue **)&v7[v12])
  {
    *uint64_t v9 = (llvm::GlobalValue *)-2;
    unsigned int v8 = HIDWORD(v58);
    ++v59;
    v4 = v56;
    unsigned int v7 = v57;
    unsigned int v11 = v58;
  }
  if (v7 == v4) {
    uint64_t v13 = v8;
  }
  else {
    uint64_t v13 = v11;
  }
  unsigned int v14 = v7;
  if (v13)
  {
    uint64_t v15 = 0;
    while ((unint64_t)v7[v15] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v13 == ++v15) {
        goto LABEL_61;
      }
    }
    unsigned int v14 = &v7[v15];
  }
  v16 = &v7[v13];
  if (v14 != v16)
  {
    unsigned int v17 = v6 ^ (a2 >> 9);
LABEL_23:
    uint64_t v55 = 0;
    uint64_t v18 = *v14;
    uint64_t v55 = *v14;
    int v19 = *((_DWORD *)this + 108);
    if (v19)
    {
      uint64_t v45 = *((void *)this + 52);
      int v46 = v19 - 1;
      unsigned int v47 = ((v18 >> 4) ^ (v18 >> 9)) & v46;
      uint64_t v48 = *(void *)(v45 + 104 * v47);
      if (v48 == v18)
      {
LABEL_93:
        unsigned int v49 = sub_1CD6658A4((uint64_t)this + 416, &v55);
        v50 = sub_1CB896AE8((uint64_t)(v49 + 1), (uint64_t)a2);
        uint64_t v51 = v49[2];
        if (v51 == v49[1]) {
          v52 = (unsigned int *)v49 + 7;
        }
        else {
          v52 = (unsigned int *)(v49 + 3);
        }
        if (v50 != (void *)(v51 + 8 * *v52))
        {
LABEL_34:
          uint64_t v27 = (unint64_t *)(v14 + 1);
          while (v27 != (unint64_t *)v16)
          {
            unint64_t v28 = *v27++;
            if (v28 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              unsigned int v14 = (uint64_t *)(v27 - 1);
              goto LABEL_23;
            }
          }
          v4 = v56;
          unsigned int v7 = v57;
          goto LABEL_61;
        }
      }
      else
      {
        int v53 = 1;
        while (v48 != -4096)
        {
          unsigned int v54 = v47 + v53++;
          unsigned int v47 = v54 & v46;
          uint64_t v48 = *(void *)(v45 + 104 * v47);
          if (v48 == v18) {
            goto LABEL_93;
          }
        }
      }
    }
    BOOL v20 = sub_1CC92027C((uint64_t)this + 288, &v55);
    uint64_t v21 = v20[2];
    uint64_t v22 = *((unsigned int *)v20 + 7);
    if (v21 == v20[1])
    {
      if (v22)
      {
        unint64_t v23 = 0;
        uint64_t v24 = 8 * v22;
        unint64_t v25 = (void *)v20[2];
        while ((llvm::GlobalValue *)*v25 != a2)
        {
          if (*v25 == -2) {
            unint64_t v23 = v25;
          }
          ++v25;
          v24 -= 8;
          if (!v24)
          {
            if (!v23) {
              goto LABEL_32;
            }
            *unint64_t v23 = a2;
            --*((_DWORD *)v20 + 8);
            goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
LABEL_32:
      unsigned int v26 = *((_DWORD *)v20 + 6);
      if (v22 < v26)
      {
        *((_DWORD *)v20 + 7) = v22 + 1;
        *(void *)(v21 + 8 * v22) = a2;
        goto LABEL_34;
      }
    }
    else
    {
      unsigned int v26 = *((_DWORD *)v20 + 6);
    }
    if (3 * v26 <= 4 * ((int)v22 - *((_DWORD *)v20 + 8)))
    {
      if (v26 >= 0x40) {
        v26 *= 2;
      }
      else {
        unsigned int v26 = 128;
      }
    }
    else if (v26 - v22 >= v26 >> 3)
    {
      goto LABEL_41;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v20 + 1), v26);
    unsigned int v26 = *((_DWORD *)v20 + 6);
    uint64_t v21 = v20[2];
LABEL_41:
    unsigned int v29 = v26 - 1;
    unsigned int v30 = (v26 - 1) & v17;
    unint64_t v31 = (llvm::GlobalValue **)(v21 + 8 * v30);
    v32 = *v31;
    if (*v31 == (llvm::GlobalValue *)-1)
    {
      v33 = 0;
LABEL_53:
      if (v33) {
        uint64_t v37 = v33;
      }
      else {
        uint64_t v37 = v31;
      }
      if (*v37 != a2)
      {
        if (*v37 == (llvm::GlobalValue *)-2) {
          --*((_DWORD *)v20 + 8);
        }
        else {
          ++*((_DWORD *)v20 + 7);
        }
        *uint64_t v37 = a2;
      }
    }
    else
    {
      v33 = 0;
      int v34 = 1;
      while (v32 != a2)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v32 == (llvm::GlobalValue *)-2;
        }
        if (v35) {
          v33 = v31;
        }
        unsigned int v36 = v30 + v34++;
        unsigned int v30 = v36 & v29;
        unint64_t v31 = (llvm::GlobalValue **)(v21 + 8 * (v36 & v29));
        v32 = *v31;
        if (*v31 == (llvm::GlobalValue *)-1) {
          goto LABEL_53;
        }
      }
    }
    goto LABEL_34;
  }
LABEL_61:
  if (v7 != v4) {
    free(v7);
  }
}

void llvm::GlobalDCEPass::MarkLive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AliaseeObject = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 20);
  if (v6 == *(void *)a1)
  {
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = *(uint64_t **)(a1 + 8);
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          unsigned int v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *unsigned int v8 = a2;
          --*(_DWORD *)(a1 + 24);
          goto LABEL_11;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *(_DWORD *)(a1 + 16);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 20) = v7 + 1;
      *(void *)(v6 + 8 * v7) = AliaseeObject;
LABEL_11:
      if (a3)
      {
        unsigned int v12 = *(_DWORD *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v12) = AliaseeObject;
        ++*(_DWORD *)(a3 + 8);
      }
      int v13 = *(unsigned __int8 *)(AliaseeObject + 16);
      if (v13 != 2
        && (v13 != 1 || (uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)AliaseeObject)) != 0))
      {
        uint64_t v26 = *(void *)(AliaseeObject + 48);
        if (v26)
        {
          unint64_t v23 = sub_1CD665C24((void *)(a1 + 352), &v26);
          if (v23)
          {
            uint64_t v24 = v23;
            unint64_t v25 = v23;
            do
              unint64_t v25 = (void *)*v25;
            while (v25 && v25[2] == v26);
            if (v25 != v23)
            {
              do
              {
                llvm::GlobalDCEPass::MarkLive(a1, v24[3], a3);
                uint64_t v24 = (void *)*v24;
              }
              while (v24 != v25);
            }
          }
        }
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 16);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 24)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_21;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a1, v11);
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
LABEL_21:
  unsigned int v14 = v11 - 1;
  unsigned int v15 = (v11 - 1) & ((AliaseeObject >> 4) ^ (AliaseeObject >> 9));
  v16 = (uint64_t *)(v6 + 8 * v15);
  uint64_t v17 = *v16;
  if (*v16 != -1)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v17 != AliaseeObject)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -2;
      }
      if (v20) {
        uint64_t v18 = v16;
      }
      unsigned int v21 = v15 + v19++;
      unsigned int v15 = v21 & v14;
      v16 = (uint64_t *)(v6 + 8 * (v21 & v14));
      uint64_t v17 = *v16;
      if (*v16 == -1) {
        goto LABEL_33;
      }
    }
    return;
  }
  uint64_t v18 = 0;
LABEL_33:
  if (v18) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v22 = v16;
  }
  if (*v22 != AliaseeObject)
  {
    if (*v22 == -2) {
      --*(_DWORD *)(a1 + 24);
    }
    else {
      ++*(_DWORD *)(a1 + 20);
    }
    *uint64_t v22 = AliaseeObject;
    goto LABEL_11;
  }
}

void llvm::GlobalDCEPass::PropagateLivenessInGlobalValues(llvm::GlobalDCEPass *this)
{
  v32[8] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = 16;
  if (v2 == *(void *)this) {
    uint64_t v3 = 20;
  }
  uint64_t v4 = *(unsigned int *)((char *)this + v3);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    uint64_t v6 = (unint64_t *)*((void *)this + 1);
    while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        unsigned int v10 = 0;
        unsigned int v30 = v32;
        HIDWORD(v31) = 8;
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v6 = (unint64_t *)*((void *)this + 1);
  }
  uint64_t v7 = (unint64_t *)(v2 + 8 * v4);
  unsigned int v30 = v32;
  uint64_t v31 = 0x800000000;
  if (v6 == v7)
  {
    unsigned int v10 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = v6;
LABEL_8:
    unsigned int v10 = v8 + 1;
    unsigned int v11 = v9 + 1;
    while (v11 != v7)
    {
      unint64_t v12 = *v11++;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v9 = v11 - 1;
        ++v8;
        goto LABEL_8;
      }
    }
    if (v8 >= 8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v13 = v32;
    unint64_t v14 = *v6;
LABEL_14:
    *int v13 = v14;
    unsigned int v15 = v6 + 1;
    while (v15 != v7)
    {
      unint64_t v16 = *v15++;
      unint64_t v14 = v16;
      if (v16 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        ++v13;
        uint64_t v6 = v15 - 1;
        goto LABEL_14;
      }
    }
  }
LABEL_19:
  unsigned int v17 = v10;
  LODWORD(v31) = v10;
  if (v10)
  {
    do
    {
      uint64_t v18 = *((void *)v30 + v17 - 1);
      LODWORD(v31) = v17 - 1;
      uint64_t v29 = v18;
      int v19 = sub_1CC92027C((uint64_t)this + 288, &v29);
      uint64_t v20 = v19[2];
      if (v20 == v19[1]) {
        unsigned int v21 = (unsigned int *)v19 + 7;
      }
      else {
        unsigned int v21 = (unsigned int *)(v19 + 3);
      }
      uint64_t v22 = *v21;
      if (v22)
      {
        uint64_t v23 = 8 * v22;
        uint64_t v24 = (uint64_t *)v19[2];
        while ((unint64_t)*v24 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v24;
          v23 -= 8;
          if (!v23) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        uint64_t v24 = (uint64_t *)v19[2];
      }
      unint64_t v25 = (void *)(v20 + 8 * v22);
      if (v24 != v25)
      {
        uint64_t v26 = *v24;
LABEL_32:
        llvm::GlobalDCEPass::MarkLive((uint64_t)this, v26, (uint64_t)&v30);
        uint64_t v27 = (unint64_t *)(v24 + 1);
        while (v27 != v25)
        {
          unint64_t v28 = *v27++;
          uint64_t v26 = v28;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v24 = (uint64_t *)(v27 - 1);
            goto LABEL_32;
          }
        }
      }
LABEL_27:
      unsigned int v17 = v31;
    }
    while (v31);
  }
  if (v30 != v32) {
    free(v30);
  }
}

void llvm::GlobalDCEPass::ScanVTables(llvm::GlobalDCEPass *this, llvm::Module *a2)
{
  v38[22] = *MEMORY[0x1E4F143B8];
  uint64_t v31 = v33;
  uint64_t v32 = 0x200000000;
  int v34 = &v36;
  uint64_t v35 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a2, (uint64_t)&v34);
  if (v35)
  {
    uint64_t v4 = (uint64_t *)((char *)v34 + 16);
    uint64_t v5 = 24 * v35;
    while (1)
    {
      uint64_t v6 = *(void **)(*(v4 - 1) + 8);
      if (*v6 == 11)
      {
        uint64_t v7 = v6[3];
        uint64_t v8 = *(void *)((char *)v6 + 27);
        if (v7 == 0x4C74736F504F544CLL && v8 == 0x6B6E694C74736F50) {
          break;
        }
      }
      v4 += 3;
      v5 -= 24;
      if (!v5) {
        goto LABEL_12;
      }
    }
    uint64_t v10 = *v4;
  }
  else
  {
LABEL_12:
    uint64_t v10 = 0;
  }
  if (v34 != &v36)
  {
    free(v34);
    if (v10) {
      goto LABEL_15;
    }
LABEL_19:
    BOOL v29 = 0;
    goto LABEL_20;
  }
  if (!v10) {
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v11 = *(void *)(v10 + 128);
  unint64_t v12 = (void *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    unint64_t v12 = (void *)*v12;
  }
  BOOL v29 = *v12 != 0;
LABEL_20:
  int v13 = (void *)*((void *)a2 + 2);
  if (v13 != (void *)((char *)a2 + 8))
  {
    unint64_t v14 = (char *)this + 392;
    unint64_t v28 = (char *)this + 416;
    do
    {
      if (v13) {
        unsigned int v15 = (unsigned int *)(v13 - 7);
      }
      else {
        unsigned int v15 = 0;
      }
      LODWORD(v32) = 0;
      llvm::Value::getMetadata(v15, 19, (uint64_t)&v31);
      if (v13 && *((unsigned char *)v15 + 16) == 3)
      {
        if ((v15[5] & 0x7FFFFFF) != 0) {
          goto LABEL_32;
        }
      }
      else if (*((unsigned char *)v15 + 16) || *((unsigned int **)v15 + 9) != v15 + 18 || (*((unsigned char *)v15 + 34) & 0x80) != 0)
      {
LABEL_32:
        if (v32)
        {
          unint64_t v16 = (char *)v31;
          uint64_t v17 = 8 * v32;
          do
          {
            uint64_t v18 = *(void *)(*(void *)v16 - 8 * *(unsigned int *)(*(void *)v16 + 8));
            unsigned int v30 = *(void **)(*(void *)v16 - 8 * *(unsigned int *)(*(void *)v16 + 8) + 8);
            uint64_t v19 = *(void *)(v18 + 128);
            uint64_t v20 = (void *)(v19 + 24);
            if (*(_DWORD *)(v19 + 32) >= 0x41u) {
              uint64_t v20 = (void *)*v20;
            }
            unsigned int v21 = (void *)*v20;
            uint64_t v22 = sub_1CD665D14((uint64_t)v14, (uint64_t *)&v30);
            int v34 = v15;
            uint64_t v35 = (uint64_t)v21;
            sub_1CD664FCC((uint64_t)(v22 + 1), (unint64_t *)&v34);
            v16 += 8;
            v17 -= 8;
          }
          while (v17);
          if (v13)
          {
            int VCallVisibility = llvm::GlobalObject::getVCallVisibility((llvm::GlobalObject *)(v13 - 7));
            BOOL v24 = v29;
            if (VCallVisibility != 1) {
              BOOL v24 = 0;
            }
            if (VCallVisibility == 2 || v24)
            {
              VTableOffsetRange = llvm::GlobalObject::getVTableOffsetRange((llvm::GlobalObject *)(v13 - 7));
              int v34 = v38;
              uint64_t v35 = (uint64_t)v38;
              uint64_t v36 = 8;
              int v37 = 0;
              sub_1CC91D484((uint64_t)a2, *(v13 - 11), (unint64_t)VTableOffsetRange, v26, (uint64_t)&v34, 0);
              unsigned int v30 = v13 - 7;
              uint64_t v27 = (llvm::SmallPtrSetImplBase *)(sub_1CD6658A4((uint64_t)v28, (uint64_t *)&v30) + 1);
              if (&v34 != (void **)v27) {
                llvm::SmallPtrSetImplBase::CopyFrom(v27, (const llvm::SmallPtrSetImplBase *)&v34);
              }
              if ((void *)v35 != v34) {
                free((void *)v35);
              }
            }
          }
        }
      }
      int v13 = (void *)v13[1];
    }
    while (v13 != (void *)((char *)a2 + 8));
  }
  if (v31 != v33) {
    free(v31);
  }
}

void sub_1CC91D484(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unsigned int v9 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v9 > 3)
  {
    if (a2 && v9 == 9)
    {
      unsigned int v21 = *(llvm::StructType **)a2;
      StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)(a1 + 272), *(llvm::StructType **)a2);
      uint64_t v23 = *((unsigned int *)v21 + 3);
      if (v23)
      {
        BOOL v24 = StructLayout;
        uint64_t v25 = 0;
        uint64_t v26 = *((void *)v21 + 2);
        uint64_t v27 = v26 + 8 * v23;
        unint64_t v28 = (char *)StructLayout + 16;
        do
        {
          unint64_t v29 = *(void *)&v28[8 * v25];
          unsigned int v30 = v28;
          unint64_t v31 = *((_DWORD *)v24 + 3) & 0x7FFFFFFF;
          if (v31)
          {
            unsigned int v30 = v28;
            do
            {
              unint64_t v32 = v31 >> 1;
              v33 = (unint64_t *)&v30[8 * (v31 >> 1)];
              unint64_t v35 = *v33;
              int v34 = (char *)(v33 + 1);
              v31 += ~(v31 >> 1);
              if (v35 > v29) {
                unint64_t v31 = v32;
              }
              else {
                unsigned int v30 = v34;
              }
            }
            while (v31);
          }
          sub_1CC91D484(a1, *(void *)(a2- 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)+ 32 * ((unint64_t)(v30 - v28 - 8) >> 3)), a3, a4, a5, v29 + v6);
          v26 += 8;
          ++v25;
        }
        while (v26 != v27);
      }
    }
    else if (a2 && v9 == 8)
    {
      int v37 = *(llvm::StructType **)a2;
      int v38 = *(llvm::Type **)(*(void *)a2 + 24);
      uint64_t v39 = sub_1CB83544C(a1 + 272, (uint64_t)v38);
      BOOL v41 = v40 == 1;
      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(a1 + 272), v38, 1);
      uint64_t v44 = *((unsigned int *)v37 + 8);
      if (v44)
      {
        BOOL v45 = v41;
        unint64_t v46 = ((1 << Alignment) + ((unint64_t)(v39 + 7) >> 3) - 1) & -(1 << Alignment);
        uint64_t v47 = a2;
        do
        {
          uint64_t v48 = *(void *)(v47 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          if (v45) {
          sub_1CC91D484(a1, v48, a3, a4, a5, v6);
          }
          v6 += v46;
          v47 += 32;
          --v44;
        }
        while (v44);
      }
    }
    else
    {
      int v49 = *(_DWORD *)(a2 + 20);
      if ((v49 & 0x40000000) != 0)
      {
        uint64_t v50 = a5;
        v52 = *(uint64_t **)(a2 - 8);
        uint64_t v51 = v49 & 0x7FFFFFF;
        if (!v51) {
          return;
        }
      }
      else
      {
        uint64_t v50 = a5;
        uint64_t v51 = v49 & 0x7FFFFFF;
        v52 = (uint64_t *)(a2 - 32 * v51);
        if (!v51) {
          return;
        }
      }
      uint64_t v56 = 32 * v51;
      do
      {
        uint64_t v57 = *v52;
        v52 += 4;
        sub_1CC91D484(a1, v57, a3, a4, v50, v6);
        v56 -= 32;
      }
      while (v56);
    }
    return;
  }
  if (a3 > a6 || a6 >= a4) {
    return;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unint64_t v11 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)a2, (const llvm::Value *)a2);
    if (!v12
      || *((unsigned char *)llvm::Value::stripPointerCasts(*(llvm::Value **)(*(void *)(v11 - 32)
                                                                   - 32
                                                                   * (*(_DWORD *)(*(void *)(v11 - 32) + 20) & 0x7FFFFFF)))
         + 16))
    {
      return;
    }
    uint64_t v13 = a5;
    uint64_t v14 = *(void *)(a5 + 8);
    uint64_t v15 = *(unsigned int *)(a5 + 20);
    if (v14 != *(void *)a5)
    {
      unsigned int v19 = *(_DWORD *)(a5 + 16);
      goto LABEL_70;
    }
    if (v15)
    {
      unint64_t v16 = 0;
      uint64_t v17 = 8 * v15;
      uint64_t v18 = *(void **)(a5 + 8);
      while (*v18 != a2)
      {
        if (*v18 == -2) {
          unint64_t v16 = v18;
        }
        ++v18;
        v17 -= 8;
        if (!v17)
        {
          uint64_t v13 = a5;
          if (v16) {
            goto LABEL_92;
          }
          goto LABEL_16;
        }
      }
      return;
    }
LABEL_16:
    unsigned int v19 = *(_DWORD *)(v13 + 16);
    if (v15 >= v19)
    {
LABEL_70:
      if (3 * v19 <= 4 * ((int)v15 - *(_DWORD *)(v13 + 24)))
      {
        if (v19 >= 0x40) {
          v19 *= 2;
        }
        else {
          unsigned int v19 = 128;
        }
      }
      else if (v19 - v15 >= v19 >> 3)
      {
        goto LABEL_72;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v13, v19);
      unsigned int v19 = *(_DWORD *)(v13 + 16);
      uint64_t v14 = *(void *)(v13 + 8);
LABEL_72:
      uint64_t v58 = a2;
      unsigned int v67 = v19 - 1;
      unsigned int v68 = (v19 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      float v61 = (void *)(v14 + 8 * v68);
      uint64_t v69 = *v61;
      if (*v61 != -1)
      {
        uint64_t v63 = 0;
        int v70 = 1;
        while (v69 != v58)
        {
          if (v63) {
            BOOL v71 = 0;
          }
          else {
            BOOL v71 = v69 == -2;
          }
          if (v71) {
            uint64_t v63 = v61;
          }
          unsigned int v72 = v68 + v70++;
          unsigned int v68 = v72 & v67;
          float v61 = (void *)(v14 + 8 * (v72 & v67));
          uint64_t v69 = *v61;
          uint64_t v58 = a2;
          if (*v61 == -1) {
            goto LABEL_84;
          }
        }
        return;
      }
      goto LABEL_83;
    }
LABEL_50:
    *(_DWORD *)(v13 + 20) = v15 + 1;
    *(void *)(v14 + 8 * v15) = a2;
    return;
  }
  uint64_t v13 = a5;
  uint64_t v14 = *(void *)(a5 + 8);
  uint64_t v15 = *(unsigned int *)(a5 + 20);
  if (v14 == *(void *)a5)
  {
    if (v15)
    {
      unint64_t v16 = 0;
      uint64_t v53 = 8 * v15;
      unsigned int v54 = *(void **)(a5 + 8);
      while (*v54 != a2)
      {
        if (*v54 == -2) {
          unint64_t v16 = v54;
        }
        ++v54;
        v53 -= 8;
        if (!v53)
        {
          uint64_t v13 = a5;
          if (!v16) {
            goto LABEL_49;
          }
LABEL_92:
          void *v16 = a2;
          --*(_DWORD *)(v13 + 24);
          return;
        }
      }
      return;
    }
LABEL_49:
    unsigned int v55 = *(_DWORD *)(v13 + 16);
    if (v15 < v55) {
      goto LABEL_50;
    }
  }
  else
  {
    unsigned int v55 = *(_DWORD *)(a5 + 16);
  }
  if (3 * v55 <= 4 * ((int)v15 - *(_DWORD *)(v13 + 24)))
  {
    if (v55 >= 0x40) {
      v55 *= 2;
    }
    else {
      unsigned int v55 = 128;
    }
    goto LABEL_97;
  }
  if (v55 - v15 < v55 >> 3)
  {
LABEL_97:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v13, v55);
    unsigned int v55 = *(_DWORD *)(v13 + 16);
    uint64_t v14 = *(void *)(v13 + 8);
  }
  uint64_t v58 = a2;
  unsigned int v59 = v55 - 1;
  unsigned int v60 = (v55 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  float v61 = (void *)(v14 + 8 * v60);
  uint64_t v62 = *v61;
  if (*v61 == -1)
  {
LABEL_83:
    uint64_t v63 = 0;
LABEL_84:
    if (v63) {
      v73 = v63;
    }
    else {
      v73 = v61;
    }
    if (*v73 != v58)
    {
      if (*v73 == -2) {
        --*(_DWORD *)(a5 + 24);
      }
      else {
        ++*(_DWORD *)(a5 + 20);
      }
      void *v73 = a2;
    }
    return;
  }
  uint64_t v63 = 0;
  int v64 = 1;
  while (v62 != v58)
  {
    if (v63) {
      BOOL v65 = 0;
    }
    else {
      BOOL v65 = v62 == -2;
    }
    if (v65) {
      uint64_t v63 = v61;
    }
    unsigned int v66 = v60 + v64++;
    unsigned int v60 = v66 & v59;
    float v61 = (void *)(v14 + 8 * (v66 & v59));
    uint64_t v62 = *v61;
    uint64_t v58 = a2;
    if (*v61 == -1) {
      goto LABEL_84;
    }
  }
}

void sub_1CC91D9B0(llvm::GlobalDCEPass *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 + 8);
    if (v2)
    {
      uint64_t v4 = (uint64_t)a1 + 392;
      uint64_t v5 = (uint64_t)a1 + 416;
      do
      {
        uint64_t v6 = *(void *)(v2 + 24);
        if (v6 && *(unsigned char *)(v6 + 16) == 84)
        {
          uint64_t v7 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
          uint64_t v8 = *(void *)(v7 + 32);
          int v9 = *(unsigned __int8 *)(v8 + 16);
          uint64_t v10 = *(llvm::Metadata **)(*(void *)(v7 + 64) + 24);
          unsigned int v21 = v10;
          if (v8) {
            BOOL v11 = v9 == 16;
          }
          else {
            BOOL v11 = 0;
          }
          if (v11)
          {
            uint64_t v20 = (uint64_t *)(v8 + 24);
            if (*(_DWORD *)(v8 + 32) >= 0x41u) {
              uint64_t v20 = (uint64_t *)*v20;
            }
            llvm::GlobalDCEPass::ScanVTableLoad(a1, *(llvm::Function **)(*(void *)(v6 + 40) + 56), v10, *v20);
          }
          else
          {
            char v12 = sub_1CD665D14(v4, (uint64_t *)&v21);
            uint64_t v13 = v12[13];
            if (v13) {
              uint64_t v14 = (uint64_t *)v12[11];
            }
            else {
              uint64_t v14 = (uint64_t *)v12[1];
            }
            uint64_t v15 = v12[1] + 16 * *((unsigned int *)v12 + 4);
            unint64_t v16 = v12 + 12;
            while (1)
            {
              while (v13)
              {
                if (v14 == v16) {
                  goto LABEL_6;
                }
                sub_1CD665254(v5, v14[4]);
                uint64_t v17 = (uint64_t *)v14[1];
                uint64_t v18 = v14;
                if (v17)
                {
                  do
                  {
                    uint64_t v14 = v17;
                    uint64_t v17 = (uint64_t *)*v17;
                  }
                  while (v17);
                }
                else
                {
                  do
                  {
                    uint64_t v14 = (uint64_t *)v18[2];
                    BOOL v11 = *v14 == (void)v18;
                    uint64_t v18 = v14;
                  }
                  while (!v11);
                }
              }
              if (v14 == (uint64_t *)v15) {
                break;
              }
              uint64_t v19 = *v14;
              v14 += 2;
              sub_1CD665254(v5, v19);
            }
          }
        }
LABEL_6:
        uint64_t v2 = *(void *)(v2 + 8);
      }
      while (v2);
    }
  }
}

void llvm::GlobalDCEPass::AddVirtualFunctionDependencies(llvm::GlobalDCEPass *this, llvm::Module *a2)
{
  v17[24] = *MEMORY[0x1E4F143B8];
  if (byte_1EBCDFA50)
  {
    uint64_t v15 = v17;
    uint64_t v16 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(a2, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v4 = (uint64_t *)((char *)v15 + 16);
      uint64_t v5 = 24 * v16;
      while (1)
      {
        uint64_t v6 = *(void **)(*(v4 - 1) + 8);
        if (*v6 == 21)
        {
          uint64_t v8 = v6[3];
          uint64_t v9 = v6[4];
          uint64_t v10 = *(void *)((char *)v6 + 37);
          BOOL v11 = v8 == 0x206C617574726956 && v9 == 0x6E6F6974636E7546;
          if (v11 && v10 == 0x6D696C45206E6F69) {
            break;
          }
        }
        v4 += 3;
        v5 -= 24;
        if (!v5) {
          goto LABEL_6;
        }
      }
      uint64_t v7 = *v4;
    }
    else
    {
LABEL_6:
      uint64_t v7 = 0;
    }
    if (v15 != v17) {
      free(v15);
    }
    if (v7)
    {
      if (*(unsigned char *)v7 == 1)
      {
        uint64_t v13 = *(void *)(v7 + 128);
        if (*(unsigned char *)(v13 + 16) == 16)
        {
          uint64_t v14 = (void *)(v13 + 24);
          if (*(_DWORD *)(v13 + 32) >= 0x41u) {
            uint64_t v14 = (void *)*v14;
          }
          if (*v14)
          {
            llvm::GlobalDCEPass::ScanVTables(this, a2);
            if (*((_DWORD *)this + 106))
            {
              llvm::GlobalDCEPass::ScanTypeCheckedLoadIntrinsics(this, a2);
            }
          }
        }
      }
    }
  }
}

uint64_t llvm::GlobalDCEPass::TargetFromConditionalUsedIfLive(llvm::GlobalDCEPass *this, llvm::MDNode *a2)
{
  uint64_t v2 = (void *)((char *)a2 - 8 * *((unsigned int *)a2 + 2));
  if (!*v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(*v2 + 128);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = (unsigned __int8 *)v2[2];
  if (v6 && *v6 - 4 < 0x1F)
  {
    uint64_t v7 = v70;
    unsigned int v66 = v70;
    unsigned int v67 = v70;
    uint64_t v68 = 8;
    int v69 = 0;
    uint64_t v8 = *((unsigned int *)v6 + 2);
    if (v8)
    {
      uint64_t v9 = &v6[-8 * v8];
      while (1)
      {
        if (*(void *)v9)
        {
          uint64_t v10 = llvm::Value::stripPointerCasts(*(llvm::Value **)(*(void *)v9 + 128));
          if (!v10 || *((unsigned __int8 *)v10 + 16) - 13 <= 0xFFFFFFFD)
          {
            char v12 = v10;
            uint64_t v13 = v67;
            uint64_t v14 = HIDWORD(v68);
            if (v67 != v66)
            {
              unsigned int v18 = v68;
LABEL_23:
              if (3 * v18 <= 4 * (HIDWORD(v68) - v69))
              {
                if (v18 >= 0x40) {
                  v18 *= 2;
                }
                else {
                  unsigned int v18 = 128;
                }
              }
              else if (v18 - HIDWORD(v68) >= v18 >> 3)
              {
                goto LABEL_25;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v66, v18);
              unsigned int v18 = v68;
              uint64_t v13 = v67;
LABEL_25:
              unsigned int v19 = v18 - 1;
              unsigned int v20 = (v18 - 1) & ((v12 >> 4) ^ (v12 >> 9));
              unsigned int v21 = (llvm::Value **)&v13[v20];
              uint64_t v22 = *v21;
              if (*v21 == (llvm::Value *)-1)
              {
                uint64_t v23 = 0;
LABEL_37:
                if (v23) {
                  uint64_t v27 = v23;
                }
                else {
                  uint64_t v27 = v21;
                }
                if (*v27 != v12)
                {
                  if (*v27 == (llvm::Value *)-2) {
                    --v69;
                  }
                  else {
                    ++HIDWORD(v68);
                  }
                  *uint64_t v27 = v12;
                }
              }
              else
              {
                uint64_t v23 = 0;
                int v24 = 1;
                while (v22 != v12)
                {
                  if (v23) {
                    BOOL v25 = 0;
                  }
                  else {
                    BOOL v25 = v22 == (llvm::Value *)-2;
                  }
                  if (v25) {
                    uint64_t v23 = v21;
                  }
                  unsigned int v26 = v20 + v24++;
                  unsigned int v20 = v26 & v19;
                  unsigned int v21 = (llvm::Value **)&v13[v26 & v19];
                  uint64_t v22 = *v21;
                  if (*v21 == (llvm::Value *)-1) {
                    goto LABEL_37;
                  }
                }
              }
              goto LABEL_44;
            }
            if (HIDWORD(v68))
            {
              uint64_t v15 = 0;
              uint64_t v16 = 8 * HIDWORD(v68);
              uint64_t v17 = (llvm::Value **)v67;
              while (*v17 != v10)
              {
                if (*v17 == (llvm::Value *)-2) {
                  uint64_t v15 = v17;
                }
                ++v17;
                v16 -= 8;
                if (!v16)
                {
                  if (!v15) {
                    goto LABEL_20;
                  }
                  *uint64_t v15 = v10;
                  --v69;
                  goto LABEL_44;
                }
              }
              goto LABEL_44;
            }
LABEL_20:
            unsigned int v18 = v68;
            if (HIDWORD(v68) >= v68) {
              goto LABEL_23;
            }
            ++HIDWORD(v68);
            v67[v14] = (unint64_t)v10;
          }
        }
LABEL_44:
        v9 += 8;
        if (v9 == v6)
        {
          LODWORD(v30) = HIDWORD(v68);
          int v29 = v69;
          unint64_t v31 = v66;
          uint64_t v7 = v67;
          unsigned int v32 = v68;
          goto LABEL_56;
        }
      }
    }
    int v29 = 0;
    LODWORD(v30) = 0;
  }
  else
  {
    int v29 = 0;
    uint64_t v7 = v70;
    unsigned int v66 = v70;
    unsigned int v67 = v70;
    int v69 = 0;
    uint64_t v68 = 0x100000008;
    v70[0] = 0;
    LODWORD(v30) = 1;
  }
  unsigned int v32 = 8;
  unint64_t v31 = v70;
LABEL_56:
  int v33 = v30 != v29;
  if (v7 == v31) {
    uint64_t v30 = v30;
  }
  else {
    uint64_t v30 = v32;
  }
  int v34 = v7;
  if (v30)
  {
    uint64_t v35 = 8 * v30;
    int v34 = v7;
    while (*v34 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v34;
      v35 -= 8;
      if (!v35) {
        goto LABEL_101;
      }
    }
  }
  uint64_t v36 = &v7[v30];
  if (v34 == v36)
  {
LABEL_101:
    char v37 = 0;
  }
  else
  {
    char v37 = 0;
    int v38 = (unsigned int *)((char *)this + 20);
    uint64_t v39 = (unsigned int *)((char *)this + 16);
    uint64_t v41 = *(void *)this;
    uint64_t v40 = *((void *)this + 1);
    if (v40 == *(void *)this) {
      int v42 = (char *)this + 20;
    }
    else {
      int v42 = (char *)this + 16;
    }
    unint64_t v43 = *v34;
    uint64_t v44 = *((void *)this + 1);
LABEL_69:
    if (v44 == v41)
    {
      uint64_t v45 = *v38;
      unint64_t v46 = (void *)(v41 + 8 * v45);
      if (v45)
      {
        uint64_t v47 = 0;
        uint64_t v48 = 8 * v45;
        while (*(void *)(v41 + v47) != v43)
        {
          v47 += 8;
          if (v48 == v47) {
            goto LABEL_87;
          }
        }
        unint64_t v46 = (void *)(v41 + v47);
      }
LABEL_87:
      uint64_t v44 = v41;
    }
    else
    {
      int v49 = *v39 - 1;
      unsigned int v50 = v49 & ((v43 >> 4) ^ (v43 >> 9));
      unint64_t v46 = (void *)(v40 + 8 * v50);
      uint64_t v51 = *v46;
      if (*v46 == -1)
      {
        v52 = 0;
LABEL_89:
        if (v52) {
          unint64_t v46 = v52;
        }
        if (*v46 != v43) {
          unint64_t v46 = (void *)(v40 + 8 * *(unsigned int *)v42);
        }
      }
      else
      {
        v52 = 0;
        int v53 = 1;
        while (v51 != v43)
        {
          if (v52) {
            BOOL v54 = 0;
          }
          else {
            BOOL v54 = v51 == -2;
          }
          if (v54) {
            v52 = v46;
          }
          unsigned int v55 = v50 + v53++;
          unsigned int v50 = v55 & v49;
          unint64_t v46 = (void *)(v40 + 8 * (v55 & v49));
          uint64_t v51 = *v46;
          if (*v46 == -1) {
            goto LABEL_89;
          }
        }
      }
      uint64_t v44 = v40;
    }
    if (v44 == v41) {
      uint64_t v56 = v38;
    }
    else {
      uint64_t v56 = v39;
    }
    BOOL v57 = v46 != (void *)(v44 + 8 * *v56);
    v33 &= v57;
    v37 |= v57;
    uint64_t v58 = v34 + 1;
    while (v58 != v36)
    {
      unint64_t v59 = *v58++;
      unint64_t v43 = v59;
      if (v59 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v34 = v58 - 1;
        goto LABEL_69;
      }
    }
  }
  uint64_t v60 = *(void *)(((void *)a2 - *((unsigned int *)a2 + 2))[1] + 128);
  unsigned int v61 = *(_DWORD *)(v60 + 32);
  if (v61 > 0x40) {
    uint64_t v62 = **(void **)(v60 + 24);
  }
  else {
    uint64_t v62 = (uint64_t)(*(void *)(v60 + 24) << -(char)v61) >> -(char)v61;
  }
  if (v33) {
    uint64_t v63 = v3;
  }
  else {
    uint64_t v63 = 0;
  }
  if (v37) {
    uint64_t v64 = v3;
  }
  else {
    uint64_t v64 = 0;
  }
  if (v62) {
    uint64_t v28 = v63;
  }
  else {
    uint64_t v28 = v64;
  }
  if (v7 != v31) {
    free(v7);
  }
  return v28;
}

void llvm::GlobalDCEPass::run(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = llvm::optimizeGlobalCtorsList(a2, (uint64_t (*)(uint64_t))sub_1CD66609C, (uint64_t)sub_1CC91F83C);
  uint64_t v6 = a2 + 24;
  v288 = (llvm::Module *)a2;
  for (uint64_t i = *(void *)(a2 + 32); i != v6; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v8 = i - 56;
    if (!i) {
      uint64_t v8 = 0;
    }
    if (*(void *)(v8 + 48))
    {
      *(void *)&long long v299 = *(void *)(v8 + 48);
      *((void *)&v299 + 1) = v8;
      sub_1CD6660A8((void *)(a1 + 352), &v299);
    }
  }
  uint64_t v9 = (char *)v288 + 8;
  uint64_t v10 = (char *)*((void *)v288 + 2);
  if (v10 != (char *)v288 + 8)
  {
    do
    {
      BOOL v11 = v10 - 56;
      if (!v10) {
        BOOL v11 = 0;
      }
      if (*((void *)v11 + 6))
      {
        *(void *)&long long v299 = *((void *)v11 + 6);
        *((void *)&v299 + 1) = v11;
        sub_1CD6660A8((void *)(a1 + 352), &v299);
      }
      uint64_t v10 = (char *)*((void *)v10 + 1);
    }
    while (v10 != v9);
  }
  int v281 = v5;
  for (j = (void *)*((void *)v288 + 6); j != (void *)((char *)v288 + 40); j = (void *)j[1])
  {
    uint64_t AliaseeObject = (uint64_t)(j - 6);
    if (j) {
      uint64_t v14 = (unsigned __int8 *)(j - 6);
    }
    else {
      uint64_t v14 = 0;
    }
    int v15 = v14[16];
    if (j && v15 == 1)
    {
      uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v14);
      if (AliaseeObject)
      {
LABEL_20:
        if (*(void *)(AliaseeObject + 48))
        {
          *(void *)&long long v299 = *(void *)(AliaseeObject + 48);
          *((void *)&v299 + 1) = v14;
          sub_1CD6660A8((void *)(a1 + 352), &v299);
        }
      }
    }
    else if (v15 != 2)
    {
      goto LABEL_20;
    }
  }
  llvm::GlobalDCEPass::AddVirtualFunctionDependencies((llvm::GlobalDCEPass *)a1, v288);
  uint64_t v16 = *((void *)v288 + 14);
  unsigned int v17 = *(_DWORD *)(v16 + 32);
  if (v17 <= 1) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v17;
  }
  if (v17 <= 8) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = 9;
  }
  v292 = (uint64_t *)*((void *)v288 + 14);
  uint64_t v20 = *(unsigned int *)(v16 + 8);
  v287 = (char *)v288 + 40;
  if (!v20) {
    goto LABEL_45;
  }
  uint64_t v290 = v6;
  uint64_t v21 = 0;
  int v22 = 0;
  do
    int v22 = 33 * v22 + aLlvmUsed[v21++];
  while (v19 != v21);
  unsigned int v23 = v20 - 1;
  uint64_t v24 = *v292;
  uint64_t v285 = *(unsigned int *)(v16 + 8);
  uint64_t v25 = *v292 + 8 * v20 + 8;
  int v26 = 1;
  int v27 = v22;
  while (1)
  {
    uint64_t v28 = v27 & v23;
    int v29 = *(void **)(v24 + 8 * v28);
    if (v29 != (void *)-8)
    {
      if (!v29) {
        goto LABEL_46;
      }
      if (*(_DWORD *)(v25 + 4 * v28) == v22
        && v19 == *v29
        && !memcmp("llvm.used", (char *)v29 + *((unsigned int *)v292 + 5), v19))
      {
        break;
      }
    }
    int v27 = v26 + v28;
    ++v26;
  }
  if (v28 == -1 || (int)v28 == v285)
  {
LABEL_46:
    LOBYTE(v31) = 0;
    uint64_t v6 = v290;
    goto LABEL_47;
  }
  uint64_t v30 = *(void *)(*(void *)(v24 + 8 * (int)v28) + 8);
  uint64_t v6 = v290;
  if (!v30
    || *(unsigned char *)(v30 + 16) != 3
    || (*(_DWORD *)(v30 + 32) & 0xFu) - 7 < 2
    || (*(void *)&long long v299 = "llvm.used.conditional",
        v302[0] = 259,
        (uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v288, (const char **)&v299)) == 0))
  {
LABEL_45:
    LOBYTE(v31) = 0;
    goto LABEL_47;
  }
  uint64_t v211 = NamedMetadata;
  uint64_t v31 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
  if (!v31) {
    goto LABEL_47;
  }
  uint64_t v212 = 0;
  *(void *)&long long v299 = v302;
  *((void *)&v299 + 1) = v302;
  uint64_t v300 = 8;
  LODWORD(v301) = 0;
  unsigned int v213 = 8;
  do
  {
    uint64_t v214 = *(void *)(**(void **)(v211 + 48) + 8 * v212);
    uint64_t v215 = *(void *)(v214 - 8 * *(unsigned int *)(v214 + 8));
    if (!v215) {
      goto LABEL_447;
    }
    uint64_t v216 = *(void *)(v215 + 128);
    if (!v216) {
      goto LABEL_447;
    }
    uint64_t v217 = *((void *)&v299 + 1);
    uint64_t v218 = HIDWORD(v300);
    if (*((void *)&v299 + 1) != (void)v299) {
      goto LABEL_426;
    }
    if (!HIDWORD(v300))
    {
LABEL_424:
      if (HIDWORD(v300) < v213)
      {
        ++HIDWORD(v300);
        *(void *)(*((void *)&v299 + 1) + 8 * v218) = v216;
        goto LABEL_447;
      }
LABEL_426:
      if (3 * v213 <= 4 * (HIDWORD(v300) - (int)v301))
      {
        if (v213 >= 0x40) {
          v213 *= 2;
        }
        else {
          unsigned int v213 = 128;
        }
      }
      else if (v213 - HIDWORD(v300) >= v213 >> 3)
      {
        goto LABEL_428;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v299, v213);
      unsigned int v213 = v300;
      uint64_t v217 = *((void *)&v299 + 1);
LABEL_428:
      unsigned int v222 = v213 - 1;
      unsigned int v223 = (v213 - 1) & ((v216 >> 4) ^ (v216 >> 9));
      v224 = (void *)(v217 + 8 * v223);
      uint64_t v225 = *v224;
      if (*v224 == -1)
      {
        v226 = 0;
LABEL_440:
        if (v226) {
          v230 = v226;
        }
        else {
          v230 = v224;
        }
        if (*v230 != v216)
        {
          if (*v230 == -2) {
            LODWORD(v301) = v301 - 1;
          }
          else {
            ++HIDWORD(v300);
          }
          void *v230 = v216;
        }
      }
      else
      {
        v226 = 0;
        int v227 = 1;
        while (v225 != v216)
        {
          if (v226) {
            BOOL v228 = 0;
          }
          else {
            BOOL v228 = v225 == -2;
          }
          if (v228) {
            v226 = v224;
          }
          unsigned int v229 = v223 + v227++;
          unsigned int v223 = v229 & v222;
          v224 = (void *)(v217 + 8 * (v229 & v222));
          uint64_t v225 = *v224;
          if (*v224 == -1) {
            goto LABEL_440;
          }
        }
      }
      goto LABEL_447;
    }
    v219 = 0;
    uint64_t v220 = 8 * HIDWORD(v300);
    v221 = (void *)*((void *)&v299 + 1);
    while (*v221 != v216)
    {
      if (*v221 == -2) {
        v219 = v221;
      }
      ++v221;
      v220 -= 8;
      if (!v220)
      {
        if (!v219) {
          goto LABEL_424;
        }
        void *v219 = v216;
        LODWORD(v301) = v301 - 1;
        break;
      }
    }
LABEL_447:
    ++v212;
  }
  while (v212 != v31);
  LOBYTE(v31) = HIDWORD(v300) != v301;
  if (HIDWORD(v300) != v301)
  {
    v294 = v298;
    v295 = v298;
    uint64_t v296 = 8;
    int v297 = 0;
    uint64_t v231 = *(void *)(v30 - 32);
    int v232 = *(_DWORD *)(v231 + 20);
    if ((v232 & 0x40000000) != 0)
    {
      v234 = *(llvm::Value ***)(v231 - 8);
      uint64_t v233 = v232 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v233 = v232 & 0x7FFFFFF;
      v234 = (llvm::Value **)(v231 - 32 * v233);
    }
    if (!v233) {
LABEL_531:
    }
      llvm::setUsedInitializer((llvm::GlobalVariable *)v30, (uint64_t)&v294);
    v235 = &v234[4 * v233];
    while (2)
    {
      v236 = llvm::Value::stripPointerCasts(*v234);
      v237 = v236;
      uint64_t v238 = v299;
      if (*((void *)&v299 + 1) == (void)v299)
      {
        unsigned int v239 = HIDWORD(v300);
        v240 = (llvm::Value **)(*((void *)&v299 + 1) + 8 * HIDWORD(v300));
        if (HIDWORD(v300))
        {
          uint64_t v241 = 0;
          while (*(llvm::Value **)(*((void *)&v299 + 1) + v241) != v236)
          {
            v241 += 8;
            if (8 * HIDWORD(v300) == v241) {
              goto LABEL_480;
            }
          }
          v240 = (llvm::Value **)(*((void *)&v299 + 1) + v241);
        }
LABEL_480:
        uint64_t v238 = *((void *)&v299 + 1);
      }
      else
      {
        int v242 = v300 - 1;
        unsigned int v243 = (v300 - 1) & ((v236 >> 4) ^ (v236 >> 9));
        v240 = (llvm::Value **)(*((void *)&v299 + 1) + 8 * v243);
        v244 = *v240;
        if (*v240 == (llvm::Value *)-1)
        {
          v245 = 0;
LABEL_510:
          if (v245) {
            v240 = v245;
          }
          unsigned int v239 = HIDWORD(v300);
          if (*v240 != v236) {
            v240 = (llvm::Value **)(*((void *)&v299 + 1) + 8 * v300);
          }
        }
        else
        {
          v245 = 0;
          int v246 = 1;
          while (v244 != v236)
          {
            if (v245) {
              BOOL v247 = 0;
            }
            else {
              BOOL v247 = v244 == (llvm::Value *)-2;
            }
            if (v247) {
              v245 = v240;
            }
            unsigned int v248 = v243 + v246++;
            unsigned int v243 = v248 & v242;
            v240 = (llvm::Value **)(*((void *)&v299 + 1) + 8 * (v248 & v242));
            v244 = *v240;
            if (*v240 == (llvm::Value *)-1) {
              goto LABEL_510;
            }
          }
          unsigned int v239 = HIDWORD(v300);
        }
      }
      if (*((void *)&v299 + 1) == v238) {
        unsigned int v249 = v239;
      }
      else {
        unsigned int v249 = v300;
      }
      if (v240 == (llvm::Value **)(*((void *)&v299 + 1) + 8 * v249))
      {
        v250 = v295;
        uint64_t v251 = HIDWORD(v296);
        if (v295 != v294)
        {
          unsigned int v255 = v296;
          goto LABEL_496;
        }
        if (HIDWORD(v296))
        {
          v252 = 0;
          uint64_t v253 = 8 * HIDWORD(v296);
          v254 = (llvm::Value **)v295;
          do
          {
            if (*v254 == v236) {
              goto LABEL_523;
            }
            if (*v254 == (llvm::Value *)-2) {
              v252 = v254;
            }
            ++v254;
            v253 -= 8;
          }
          while (v253);
          if (v252)
          {
            *v252 = v236;
            --v297;
            goto LABEL_523;
          }
        }
        unsigned int v255 = v296;
        if (HIDWORD(v296) < v296)
        {
          ++HIDWORD(v296);
          *(void *)&v295[8 * v251] = v236;
          goto LABEL_523;
        }
LABEL_496:
        if (3 * v255 <= 4 * (HIDWORD(v296) - v297))
        {
          if (v255 >= 0x40) {
            v255 *= 2;
          }
          else {
            unsigned int v255 = 128;
          }
        }
        else if (v255 - HIDWORD(v296) >= v255 >> 3)
        {
LABEL_498:
          unsigned int v256 = v255 - 1;
          unsigned int v257 = (v255 - 1) & ((v237 >> 4) ^ (v237 >> 9));
          v258 = (llvm::Value **)&v250[8 * v257];
          v259 = *v258;
          if (*v258 == (llvm::Value *)-1)
          {
            v260 = 0;
LABEL_516:
            if (v260) {
              v264 = v260;
            }
            else {
              v264 = v258;
            }
            if (*v264 != v237)
            {
              if (*v264 == (llvm::Value *)-2) {
                --v297;
              }
              else {
                ++HIDWORD(v296);
              }
              *v264 = v237;
            }
          }
          else
          {
            v260 = 0;
            int v261 = 1;
            while (v259 != v237)
            {
              if (v260) {
                BOOL v262 = 0;
              }
              else {
                BOOL v262 = v259 == (llvm::Value *)-2;
              }
              if (v262) {
                v260 = v258;
              }
              unsigned int v263 = v257 + v261++;
              unsigned int v257 = v263 & v256;
              v258 = (llvm::Value **)&v250[8 * (v263 & v256)];
              v259 = *v258;
              if (*v258 == (llvm::Value *)-1) {
                goto LABEL_516;
              }
            }
          }
          goto LABEL_523;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v294, v255);
        unsigned int v255 = v296;
        v250 = v295;
        goto LABEL_498;
      }
LABEL_523:
      v234 += 4;
      if (v234 == v235) {
        goto LABEL_531;
      }
      continue;
    }
  }
  if (*((void *)&v299 + 1) != (void)v299) {
    free(*((void **)&v299 + 1));
  }
LABEL_47:
  uint64_t v32 = *((void *)v288 + 4);
  int v33 = (char *)*((void *)v288 + 2);
  *(void *)&long long v299 = v32;
  *((void *)&v299 + 1) = v33;
  uint64_t v300 = v6;
  v301 = (char *)v288 + 8;
  while (2)
  {
    if (v32 != v6 || v33 != v9 || (v300 == v6 ? (BOOL v34 = v301 == v9) : (BOOL v34 = 0), !v34))
    {
      uint64_t v35 = 0;
      do
      {
        uint64_t v36 = (*(uint64_t (**)(long long *))((char *)&off_1F2628500 + v35))(&v299);
        if (v36) {
          BOOL v37 = 1;
        }
        else {
          BOOL v37 = v35 == 16;
        }
        v35 += 16;
      }
      while (!v37);
      uint64_t v38 = v36;
      llvm::Constant::removeDeadConstantUsers(v36);
      if (*(unsigned char *)(v38 + 16))
      {
        if (*(unsigned char *)(v38 + 16) == 3 && (*(_DWORD *)(v38 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_71;
        }
      }
      else if (*(void *)(v38 + 72) == v38 + 72 && (*(unsigned char *)(v38 + 34) & 0x80) == 0)
      {
LABEL_71:
        llvm::GlobalDCEPass::UpdateGVDependencies((llvm::GlobalDCEPass *)a1, (llvm::GlobalValue *)v38);
        uint64_t v43 = 0;
        do
        {
          if ((*(uint64_t (**)(long long *))((char *)&off_1F26284E0 + v43))(&v299)) {
            break;
          }
          BOOL v34 = v43 == 16;
          v43 += 16;
        }
        while (!v34);
        int v33 = (char *)*((void *)&v299 + 1);
        uint64_t v32 = v299;
        continue;
      }
      unsigned int v39 = *(_DWORD *)(v38 + 32) & 0xF;
      BOOL v40 = v39 > 8;
      int v41 = (1 << v39) & 0x18E;
      if (v40 || v41 == 0) {
        llvm::GlobalDCEPass::MarkLive(a1, v38, 0);
      }
      goto LABEL_71;
    }
    break;
  }
  for (uint64_t k = *((void *)v288 + 6); (char *)k != v287; uint64_t k = *(void *)(k + 8))
  {
    if (k) {
      uint64_t v45 = (llvm::GlobalValue *)(k - 48);
    }
    else {
      uint64_t v45 = 0;
    }
    llvm::Constant::removeDeadConstantUsers((uint64_t)v45);
    unsigned int v46 = *((_DWORD *)v45 + 8) & 0xF;
    BOOL v40 = v46 > 8;
    int v47 = (1 << v46) & 0x18E;
    if (v40 || v47 == 0) {
      llvm::GlobalDCEPass::MarkLive(a1, (uint64_t)v45, 0);
    }
    llvm::GlobalDCEPass::UpdateGVDependencies((llvm::GlobalDCEPass *)a1, v45);
  }
  uint64_t v49 = *((void *)v288 + 8);
  v293 = (char *)v288 + 56;
  if ((llvm::Module *)v49 != (llvm::Module *)((char *)v288 + 56))
  {
    do
    {
      if (v49) {
        unsigned int v50 = (llvm::GlobalValue *)(v49 - 56);
      }
      else {
        unsigned int v50 = 0;
      }
      llvm::Constant::removeDeadConstantUsers((uint64_t)v50);
      unsigned int v51 = *((_DWORD *)v50 + 8) & 0xF;
      BOOL v40 = v51 > 8;
      int v52 = (1 << v51) & 0x18E;
      if (v40 || v52 == 0) {
        llvm::GlobalDCEPass::MarkLive(a1, (uint64_t)v50, 0);
      }
      llvm::GlobalDCEPass::UpdateGVDependencies((llvm::GlobalDCEPass *)a1, v50);
      uint64_t v49 = *(void *)(v49 + 8);
    }
    while ((char *)v49 != v293);
  }
  if (v31) {
    llvm::GlobalDCEPass::PropagateLivenessToConditionallyUsed((llvm::GlobalDCEPass *)a1, v288);
  }
  llvm::GlobalDCEPass::PropagateLivenessInGlobalValues((llvm::GlobalDCEPass *)a1);
  uint64_t v54 = *((void *)v288 + 2);
  v286 = (void *)a1;
  if ((char *)v54 != v9)
  {
    unsigned int v55 = 0;
    uint64_t v56 = 0;
    BOOL v57 = 0;
    uint64_t v58 = (unsigned int *)(a1 + 20);
    unint64_t v59 = (unsigned int *)(a1 + 16);
    while (1)
    {
      uint64_t v60 = v54 ? v54 - 56 : 0;
      uint64_t v62 = *(void *)a1;
      uint64_t v61 = *(void *)(a1 + 8);
      if (v61 == *(void *)a1)
      {
        uint64_t v63 = *v58;
        uint64_t v64 = (void *)(v61 + 8 * v63);
        if (v63)
        {
          uint64_t v65 = 0;
          uint64_t v66 = 8 * v63;
          while (*(void *)(v61 + v65) != v60)
          {
            v65 += 8;
            if (v66 == v65) {
              goto LABEL_121;
            }
          }
          uint64_t v64 = (void *)(v61 + v65);
        }
LABEL_121:
        uint64_t v62 = *(void *)(a1 + 8);
      }
      else
      {
        uint64_t v67 = *v59;
        int v68 = v67 - 1;
        unsigned int v69 = (v67 - 1) & ((v60 >> 4) ^ (v60 >> 9));
        uint64_t v64 = (void *)(v61 + 8 * v69);
        uint64_t v70 = *v64;
        if (*v64 == -1)
        {
          BOOL v71 = 0;
LABEL_139:
          if (v71) {
            uint64_t v64 = v71;
          }
          if (*v64 != v60) {
            uint64_t v64 = (void *)(v61 + 8 * v67);
          }
        }
        else
        {
          BOOL v71 = 0;
          int v72 = 1;
          while (v70 != v60)
          {
            if (v71) {
              BOOL v73 = 0;
            }
            else {
              BOOL v73 = v70 == -2;
            }
            if (v73) {
              BOOL v71 = v64;
            }
            unsigned int v74 = v69 + v72++;
            unsigned int v69 = v74 & v68;
            uint64_t v64 = (void *)(v61 + 8 * (v74 & v68));
            uint64_t v70 = *v64;
            if (*v64 == -1) {
              goto LABEL_139;
            }
          }
        }
      }
      uint64_t v75 = v61 == v62 ? v58 : v59;
      if (v64 == (void *)(v61 + 8 * *v75)) {
        break;
      }
      v76 = v56;
LABEL_159:
      uint64_t v54 = *(void *)(v54 + 8);
      uint64_t v56 = v76;
      if ((char *)v54 == v9) {
        goto LABEL_162;
      }
    }
    if (v56 >= v55)
    {
      uint8x8_t v78 = v57;
      uint64_t v79 = v6;
      uint64_t v80 = v56 - v78;
      unint64_t v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 61) {
LABEL_536:
      }
        abort();
      unint64_t v82 = v78;
      unint64_t v83 = (char *)v55 - (char *)v78;
      unint64_t v84 = ((char *)v55 - (char *)v78) >> 2;
      if (v84 > v81) {
        unint64_t v81 = v84;
      }
      if (v83 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v85 = v81;
      }
      if (v85)
      {
        if (v85 >> 61) {
LABEL_537:
        }
          sub_1CB833614();
        unint64_t v86 = (char *)operator new(8 * v85);
      }
      else
      {
        unint64_t v86 = 0;
      }
      unsigned int v87 = (uint64_t *)&v86[8 * v80];
      *unsigned int v87 = v60;
      unint64_t v77 = v87 + 1;
      uint64_t v6 = v79;
      if (v56 != v82)
      {
        do
        {
          uint64_t v88 = *--v56;
          *--unsigned int v87 = v88;
        }
        while (v56 != v82);
        uint64_t v56 = v82;
      }
      BOOL v57 = v87;
      a1 = (uint64_t)v286;
      unsigned int v55 = (uint64_t *)&v86[8 * v85];
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      uint64_t *v56 = v60;
      unint64_t v77 = v56 + 1;
    }
    if (v54 && *(unsigned char *)(v60 + 16) == 3)
    {
      if ((*(_DWORD *)(v60 + 20) & 0x7FFFFFF) == 0)
      {
LABEL_158:
        v76 = v77;
        uint64_t v9 = (char *)v288 + 8;
        goto LABEL_159;
      }
    }
    else if (!*(unsigned char *)(v60 + 16) && *(void *)(v60 + 72) == v60 + 72 && (*(unsigned char *)(v60 + 34) & 0x80) == 0)
    {
      goto LABEL_158;
    }
    unint64_t v89 = *(int32x2_t *****)(v60 - 32);
    llvm::GlobalVariable::setInitializer(v60, 0);
    if (llvm::isSafeToDestroyConstant((llvm *)v89, v90)) {
      llvm::Constant::destroyConstant(v89, v91);
    }
    goto LABEL_158;
  }
  BOOL v57 = 0;
  v76 = 0;
LABEL_162:
  v280 = v76;
  v284 = v57;
  uint64_t v92 = *((void *)v288 + 4);
  if (v92 != v6)
  {
    v93 = 0;
    v94 = 0;
    v95 = 0;
    while (1)
    {
      if (v92) {
        uint64_t v96 = v92 - 56;
      }
      else {
        uint64_t v96 = 0;
      }
      uint64_t v98 = *(void *)a1;
      uint64_t v97 = *(void *)(a1 + 8);
      if (v97 == *(void *)a1)
      {
        uint64_t v99 = *(unsigned int *)(a1 + 20);
        v100 = (void *)(v97 + 8 * v99);
        if (v99)
        {
          uint64_t v101 = 0;
          uint64_t v102 = 8 * v99;
          while (*(void *)(v97 + v101) != v96)
          {
            v101 += 8;
            if (v102 == v101) {
              goto LABEL_185;
            }
          }
          v100 = (void *)(v97 + v101);
        }
LABEL_185:
        uint64_t v98 = *(void *)(a1 + 8);
      }
      else
      {
        uint64_t v103 = *(unsigned int *)(a1 + 16);
        int v104 = v103 - 1;
        unsigned int v105 = (v103 - 1) & ((v96 >> 4) ^ (v96 >> 9));
        v100 = (void *)(v97 + 8 * v105);
        uint64_t v106 = *v100;
        if (*v100 == -1)
        {
          v107 = 0;
LABEL_203:
          if (v107) {
            v100 = v107;
          }
          if (*v100 != v96) {
            v100 = (void *)(v97 + 8 * v103);
          }
        }
        else
        {
          v107 = 0;
          int v108 = 1;
          while (v106 != v96)
          {
            if (v107) {
              BOOL v109 = 0;
            }
            else {
              BOOL v109 = v106 == -2;
            }
            if (v109) {
              v107 = v100;
            }
            unsigned int v110 = v105 + v108++;
            unsigned int v105 = v110 & v104;
            v100 = (void *)(v97 + 8 * (v110 & v104));
            uint64_t v106 = *v100;
            if (*v100 == -1) {
              goto LABEL_203;
            }
          }
        }
      }
      if (v97 == v98) {
        v111 = (unsigned int *)(a1 + 20);
      }
      else {
        v111 = (unsigned int *)(a1 + 16);
      }
      if (v100 == (void *)(v97 + 8 * *v111))
      {
        if (v94 >= v95)
        {
          uint64_t v113 = (v94 - v93) >> 3;
          unint64_t v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 61) {
            goto LABEL_536;
          }
          if ((v95 - v93) >> 2 > v114) {
            unint64_t v114 = (v95 - v93) >> 2;
          }
          if ((unint64_t)(v95 - v93) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v115 = v114;
          }
          if (v115)
          {
            if (v115 >> 61) {
              goto LABEL_537;
            }
            v116 = (char *)operator new(8 * v115);
          }
          else
          {
            v116 = 0;
          }
          v117 = &v116[8 * v113];
          *(void *)v117 = v96;
          v112 = v117 + 8;
          while (v94 != v93)
          {
            uint64_t v118 = *((void *)v94 - 1);
            v94 -= 8;
            *((void *)v117 - 1) = v118;
            v117 -= 8;
          }
          v95 = &v116[8 * v115];
          if (v93)
          {
            v119 = v112;
            operator delete(v93);
            v112 = v119;
          }
          v93 = v117;
        }
        else
        {
          *(void *)v94 = v96;
          v112 = v94 + 8;
        }
        if (v92 && *(unsigned char *)(v96 + 16) == 3)
        {
          if ((*(_DWORD *)(v96 + 20) & 0x7FFFFFF) == 0) {
            goto LABEL_221;
          }
        }
        else if (!*(unsigned char *)(v96 + 16) && *(void *)(v96 + 72) == v96 + 72 && (*(unsigned char *)(v96 + 34) & 0x80) == 0)
        {
          goto LABEL_221;
        }
        v94 = v112;
        sub_1CD660DD8((llvm::GlobalValue *)v96);
      }
      v112 = v94;
LABEL_221:
      uint64_t v92 = *(void *)(v92 + 8);
      v94 = v112;
      if (v92 == v6) {
        goto LABEL_225;
      }
    }
  }
  v112 = 0;
  v93 = 0;
LABEL_225:
  v291 = (llvm **)v112;
  v120 = (char *)v288 + 40;
  uint64_t v121 = *((void *)v288 + 6);
  if ((char *)v121 == v287)
  {
    v141 = 0;
    v122 = 0;
  }
  else
  {
    v122 = 0;
    v123 = 0;
    v124 = 0;
    do
    {
      if (v121) {
        uint64_t v125 = v121 - 48;
      }
      else {
        uint64_t v125 = 0;
      }
      uint64_t v127 = *(void *)a1;
      uint64_t v126 = *(void *)(a1 + 8);
      if (v126 == *(void *)a1)
      {
        uint64_t v128 = *(unsigned int *)(a1 + 20);
        v129 = (void *)(v126 + 8 * v128);
        if (v128)
        {
          uint64_t v130 = 0;
          uint64_t v131 = 8 * v128;
          while (*(void *)(v126 + v130) != v125)
          {
            v130 += 8;
            if (v131 == v130) {
              goto LABEL_248;
            }
          }
          v129 = (void *)(v126 + v130);
        }
LABEL_248:
        uint64_t v127 = *(void *)(a1 + 8);
      }
      else
      {
        uint64_t v132 = *(unsigned int *)(a1 + 16);
        int v133 = v132 - 1;
        unsigned int v134 = (v132 - 1) & ((v125 >> 4) ^ (v125 >> 9));
        v129 = (void *)(v126 + 8 * v134);
        uint64_t v135 = *v129;
        if (*v129 == -1)
        {
          v136 = 0;
LABEL_266:
          if (v136) {
            v129 = v136;
          }
          if (*v129 != v125) {
            v129 = (void *)(v126 + 8 * v132);
          }
        }
        else
        {
          v136 = 0;
          int v137 = 1;
          while (v135 != v125)
          {
            if (v136) {
              BOOL v138 = 0;
            }
            else {
              BOOL v138 = v135 == -2;
            }
            if (v138) {
              v136 = v129;
            }
            unsigned int v139 = v134 + v137++;
            unsigned int v134 = v139 & v133;
            v129 = (void *)(v126 + 8 * (v139 & v133));
            uint64_t v135 = *v129;
            if (*v129 == -1) {
              goto LABEL_266;
            }
          }
        }
      }
      if (v126 == v127) {
        v140 = (unsigned int *)(a1 + 20);
      }
      else {
        v140 = (unsigned int *)(a1 + 16);
      }
      if (v129 == (void *)(v126 + 8 * *v140))
      {
        if (v123 >= v124)
        {
          uint64_t v142 = (v123 - (char *)v122) >> 3;
          unint64_t v143 = v142 + 1;
          if ((unint64_t)(v142 + 1) >> 61) {
            goto LABEL_536;
          }
          if ((v124 - (char *)v122) >> 2 > v143) {
            unint64_t v143 = (v124 - (char *)v122) >> 2;
          }
          if ((unint64_t)(v124 - (char *)v122) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v144 = v143;
          }
          if (v144)
          {
            if (v144 >> 61) {
              goto LABEL_537;
            }
            v145 = v122;
            v146 = (char *)operator new(8 * v144);
            v122 = v145;
          }
          else
          {
            v146 = 0;
          }
          v147 = &v146[8 * v142];
          *(void *)v147 = v125;
          v141 = v147 + 8;
          while (v123 != (char *)v122)
          {
            uint64_t v148 = *((void *)v123 - 1);
            v123 -= 8;
            *((void *)v147 - 1) = v148;
            v147 -= 8;
          }
          v124 = &v146[8 * v144];
          if (v122) {
            operator delete(v122);
          }
          v122 = (llvm::Module *)v147;
          v120 = (char *)v288 + 40;
        }
        else
        {
          *(void *)v123 = v125;
          v141 = v123 + 8;
        }
        if (*(void *)(v125 - 32))
        {
          **(void **)(v125 - 16) = *(void *)(v125 - 24);
          uint64_t v149 = *(void *)(v125 - 24);
          if (v149) {
            *(void *)(v149 + 16) = *(void *)(v125 - 16);
          }
        }
        *(void *)(v125 - 32) = 0;
        v123 = v141;
      }
      else
      {
        v141 = v123;
      }
      uint64_t v121 = *(void *)(v121 + 8);
    }
    while ((char *)v121 != v120);
  }
  __p = (llvm **)v93;
  uint64_t v150 = *((void *)v288 + 8);
  v289 = v122;
  if ((char *)v150 == v293)
  {
    v171 = 0;
    v151 = 0;
  }
  else
  {
    v151 = 0;
    v152 = 0;
    v153 = 0;
    v154 = (unsigned int *)(a1 + 16);
    do
    {
      if (v150) {
        uint64_t v155 = v150 - 56;
      }
      else {
        uint64_t v155 = 0;
      }
      uint64_t v157 = *(void *)a1;
      uint64_t v156 = *(void *)(a1 + 8);
      if (v156 == *(void *)a1)
      {
        uint64_t v158 = *(unsigned int *)(a1 + 20);
        v159 = (void *)(v156 + 8 * v158);
        if (v158)
        {
          uint64_t v160 = 0;
          uint64_t v161 = 8 * v158;
          while (*(void *)(v156 + v160) != v155)
          {
            v160 += 8;
            if (v161 == v160) {
              goto LABEL_307;
            }
          }
          v159 = (void *)(v156 + v160);
        }
LABEL_307:
        uint64_t v157 = *(void *)(a1 + 8);
      }
      else
      {
        uint64_t v162 = *v154;
        int v163 = v162 - 1;
        unsigned int v164 = (v162 - 1) & ((v155 >> 4) ^ (v155 >> 9));
        v159 = (void *)(v156 + 8 * v164);
        uint64_t v165 = *v159;
        if (*v159 == -1)
        {
          v166 = 0;
LABEL_325:
          if (v166) {
            v159 = v166;
          }
          if (*v159 != v155) {
            v159 = (void *)(v156 + 8 * v162);
          }
        }
        else
        {
          v166 = 0;
          int v167 = 1;
          while (v165 != v155)
          {
            if (v166) {
              BOOL v168 = 0;
            }
            else {
              BOOL v168 = v165 == -2;
            }
            if (v168) {
              v166 = v159;
            }
            unsigned int v169 = v164 + v167++;
            unsigned int v164 = v169 & v163;
            v159 = (void *)(v156 + 8 * (v169 & v163));
            uint64_t v165 = *v159;
            if (*v159 == -1) {
              goto LABEL_325;
            }
          }
        }
      }
      if (v156 == v157) {
        v170 = (unsigned int *)(a1 + 20);
      }
      else {
        v170 = v154;
      }
      if (v159 == (void *)(v156 + 8 * *v170))
      {
        if (v152 >= v153)
        {
          uint64_t v172 = (v152 - v151) >> 3;
          unint64_t v173 = v172 + 1;
          if ((unint64_t)(v172 + 1) >> 61) {
            goto LABEL_536;
          }
          if ((v153 - v151) >> 2 > v173) {
            unint64_t v173 = (v153 - v151) >> 2;
          }
          if ((unint64_t)(v153 - v151) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v174 = v173;
          }
          if (v174)
          {
            if (v174 >> 61) {
              goto LABEL_537;
            }
            v175 = (char *)operator new(8 * v174);
            v122 = v289;
          }
          else
          {
            v175 = 0;
          }
          v176 = &v175[8 * v172];
          *(void *)v176 = v155;
          v171 = v176 + 8;
          while (v152 != v151)
          {
            uint64_t v177 = *((void *)v152 - 1);
            v152 -= 8;
            *((void *)v176 - 1) = v177;
            v176 -= 8;
          }
          v153 = &v175[8 * v174];
          if (v151)
          {
            operator delete(v151);
            v122 = v289;
          }
          v151 = v176;
          v154 = (unsigned int *)(a1 + 16);
        }
        else
        {
          *(void *)v152 = v155;
          v171 = v152 + 8;
        }
        if (*(void *)(v155 - 32))
        {
          **(void **)(v155 - 16) = *(void *)(v155 - 24);
          uint64_t v178 = *(void *)(v155 - 24);
          if (v178) {
            *(void *)(v178 + 16) = *(void *)(v155 - 16);
          }
        }
        *(void *)(v155 - 32) = 0;
        v152 = v171;
      }
      else
      {
        v171 = v152;
      }
      uint64_t v150 = *(void *)(v150 + 8);
    }
    while ((char *)v150 != v293);
  }
  int v179 = v281;
  if (__p != v291)
  {
    v180 = __p;
    do
    {
      v181 = *v180;
      if (*((void *)*v180 + 1))
      {
        llvm::replaceRelativePointerUsersWithZero(*v180, v122);
        v183 = (llvm::Value *)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)v181, v182);
        llvm::Value::doRAUW(v181, v183, 0);
      }
      llvm::Constant::removeDeadConstantUsers((uint64_t)v181);
      llvm::GlobalValue::eraseFromParent(v181);
      ++v180;
    }
    while (v180 != v291);
    int v179 = 1;
    v122 = v289;
  }
  if (v284 != v280)
  {
    v184 = (llvm::ConstantPointerNull ***)v284;
    do
    {
      v185 = *v184;
      if ((*v184)[1])
      {
        v186 = (llvm::Value *)llvm::ConstantPointerNull::get(*v185, v122);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v185, v186, 0);
      }
      llvm::Constant::removeDeadConstantUsers((uint64_t)v185);
      llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)v185);
      ++v184;
    }
    while (v184 != (llvm::ConstantPointerNull ***)v280);
    int v179 = 1;
    v122 = v289;
  }
  if (v122 != (llvm::Module *)v141)
  {
    v187 = (llvm::GlobalValue **)v122;
    do
    {
      v188 = *v187++;
      llvm::Constant::removeDeadConstantUsers((uint64_t)v188);
      llvm::GlobalValue::eraseFromParent(v188);
    }
    while (v187 != (llvm::GlobalValue **)v141);
    int v179 = 1;
    v122 = v289;
  }
  if (v151 != v171)
  {
    v189 = (llvm::GlobalValue **)v151;
    do
    {
      v190 = *v189++;
      llvm::Constant::removeDeadConstantUsers((uint64_t)v190);
      llvm::GlobalValue::eraseFromParent(v190);
    }
    while (v189 != (llvm::GlobalValue **)v171);
    int v179 = 1;
    v122 = v289;
  }
  v191 = *(void **)(a1 + 8);
  if (v191 == *(void **)a1)
  {
LABEL_364:
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    uint64_t v208 = *(unsigned int *)(a1 + 16);
    if (v208 < 0x21 || 4 * (*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24)) >= v208)
    {
      memset(v191, 255, 8 * v208);
      v122 = v289;
      goto LABEL_364;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)a1);
    v122 = v289;
  }
  if (*(void *)(a1 + 336))
  {
    v192 = *(void **)(a1 + 328);
    if (v192)
    {
      do
      {
        v193 = (void *)*v192;
        v194 = (void *)v192[4];
        if (v194 != (void *)v192[3]) {
          free(v194);
        }
        operator delete(v192);
        v192 = v193;
      }
      while (v193);
    }
    *(void *)(a1 + 328) = 0;
    uint64_t v195 = *(void *)(a1 + 320);
    if (v195)
    {
      for (uint64_t m = 0; m != v195; ++m)
        *(void *)(*(void *)(a1 + 312) + 8 * m) = 0;
    }
    *(void *)(a1 + 336) = 0;
    v122 = v289;
  }
  int v197 = *(_DWORD *)(a1 + 296);
  if (v197 || *(_DWORD *)(a1 + 300))
  {
    v198 = (unsigned int *)(a1 + 288);
    uint64_t v199 = *(unsigned int *)(a1 + 304);
    if (v199 > 4 * v197 && v199 >= 0x41)
    {
      sub_1CD4C1C7C(v198);
      v122 = v289;
    }
    else
    {
      if (v199)
      {
        v200 = *(void **)v198;
        uint64_t v201 = 72 * v199;
        do
        {
          if (*v200 != -4096)
          {
            if (*v200 != -8192)
            {
              v202 = (void *)v200[2];
              if (v202 != (void *)v200[1])
              {
                free(v202);
                v122 = v289;
              }
            }
            void *v200 = -4096;
          }
          v200 += 9;
          v201 -= 72;
        }
        while (v201);
      }
      *(void *)(a1 + 296) = 0;
    }
  }
  if (*(void *)(a1 + 376))
  {
    v276 = *(void **)(a1 + 368);
    if (v276)
    {
      do
      {
        v277 = (void *)*v276;
        operator delete(v276);
        v276 = v277;
      }
      while (v277);
    }
    v286[46] = 0;
    uint64_t v278 = v286[45];
    if (v278)
    {
      for (uint64_t n = 0; n != v278; ++n)
        *(void *)(v286[44] + 8 * n) = 0;
    }
    a1 = (uint64_t)v286;
    v286[47] = 0;
    v122 = v289;
  }
  int v203 = *(_DWORD *)(a1 + 400);
  if (v203 || *(_DWORD *)(a1 + 404))
  {
    v265 = (_DWORD *)(a1 + 392);
    uint64_t v266 = *(unsigned int *)(a1 + 408);
    if (v266 > 4 * v203 && v266 >= 0x41)
    {
      sub_1CD666410(v265);
      v122 = v289;
      a1 = (uint64_t)v286;
      goto LABEL_389;
    }
    if (!v266)
    {
LABEL_548:
      a1 = (uint64_t)v286;
      v286[50] = 0;
      v122 = v289;
      goto LABEL_389;
    }
    uint64_t v267 = *(void *)v265 + 88;
    uint64_t v268 = 112 * v266;
    while (1)
    {
      uint64_t v269 = *(void *)(v267 - 88);
      if (v269 == -8192) {
        goto LABEL_546;
      }
      if (v269 != -4096) {
        break;
      }
LABEL_547:
      v267 += 112;
      v268 -= 112;
      if (!v268) {
        goto LABEL_548;
      }
    }
    sub_1CB833A08(v267, *(void **)(v267 + 8));
    v270 = *(void **)(v267 - 80);
    if ((void *)(v267 - 64) != v270) {
      free(v270);
    }
LABEL_546:
    *(void *)(v267 - 88) = -4096;
    goto LABEL_547;
  }
LABEL_389:
  int v204 = *(_DWORD *)(a1 + 424);
  if (!v204 && !*(_DWORD *)(a1 + 428)) {
    goto LABEL_391;
  }
  v271 = (_DWORD *)(a1 + 416);
  unsigned int v272 = *(_DWORD *)(a1 + 432);
  if (v272 > 4 * v204 && v272 >= 0x41)
  {
    sub_1CD6664C4(v271);
  }
  else
  {
    if (v272)
    {
      v273 = *(void **)v271;
      uint64_t v274 = 104 * v272;
      while (1)
      {
        if (*v273 == -8192) {
          goto LABEL_557;
        }
        if (*v273 != -4096) {
          break;
        }
LABEL_558:
        v273 += 13;
        v274 -= 104;
        if (!v274) {
          goto LABEL_559;
        }
      }
      v275 = (void *)v273[2];
      if (v275 != (void *)v273[1]) {
        free(v275);
      }
LABEL_557:
      void *v273 = -4096;
      goto LABEL_558;
    }
LABEL_559:
    v286[53] = 0;
  }
  v122 = v289;
LABEL_391:
  uint64_t v205 = a3 + 80;
  if (v179)
  {
    int v206 = 0;
    *(void *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    uint64_t v207 = a3 + 32;
  }
  else
  {
    *(void *)(a3 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
    uint64_t v207 = a3 + 32;
    *(_DWORD *)(a3 + 24) = 0;
    int v206 = 1;
  }
  *(void *)a3 = v207;
  *(void *)(a3 + 8) = v207;
  *(void *)(a3 + 48) = v205;
  *(void *)(a3 + 56) = v205;
  *(void *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 20) = v206;
  if (v151)
  {
    operator delete(v151);
    v122 = v289;
  }
  if (v122) {
    operator delete(v122);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v284) {
    operator delete(v284);
  }
}

BOOL sub_1CC91F83C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1) {
    uint64_t v2 = v1 - 24;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 + 40;
  for (uint64_t i = *(void *)(v2 + 48); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v3) {
      return 0;
    }
    uint64_t v5 = i ? i - 24 : 0;
    if (!sub_1CBF63B28(v5) && !sub_1CC27D470(v5)) {
      break;
    }
  }
  BOOL result = 0;
  int v7 = *(unsigned __int8 *)(v5 + 16);
  if (v7 == 29) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 0;
  }
  if (i && v7 == 29)
  {
    uint64_t v9 = *(_DWORD *)(v8 + 20) & 0x7FFFFFF;
    return !v9 || *(void *)(v8 - 32 * v9) == 0;
  }
  return result;
}

void sub_1CC91F8F4()
{
}

void sub_1CC91F930(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F26283F8;
  sub_1CC91FD7C((uint64_t)a1 + 32);

  llvm::Pass::~Pass(a1);
}

void sub_1CC91F984(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F26283F8;
  sub_1CC91FD7C((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CC91F9EC(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }
  v37[0] = 0;
  v37[1] = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unsigned int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v44 = 0;
  v30[0] = 0;
  v30[1] = 0;
  int v31 = 0;
  v32[0] = 0;
  v32[1] = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v36 = 0;
  int v22 = (char *)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key;
  if (!sub_1CC91FFC0(v30, &v22)[1]) {
    operator new();
  }
  llvm::GlobalDCEPass::run((uint64_t)a1 + 32, (uint64_t)a2, (uint64_t)&v22);
  if (v28 == v29)
  {
    uint64_t v5 = v22;
    if (v23 == v22)
    {
      unsigned int v6 = v25;
      int v7 = (void **)&v23[8 * v25];
      if (v25)
      {
        uint64_t v8 = 0;
        while (*(_UNKNOWN **)&v23[v8] != &llvm::PreservedAnalyses::AllAnalysesKey)
        {
          v8 += 8;
          if (8 * v25 == v8) {
            goto LABEL_25;
          }
        }
        int v7 = (void **)&v23[v8];
      }
LABEL_25:
      uint64_t v5 = v23;
      goto LABEL_32;
    }
    unsigned int v9 = v24 - 1;
    unsigned int v10 = (v24 - 1) & ((&llvm::PreservedAnalyses::AllAnalysesKey >> 4) ^ (&llvm::PreservedAnalyses::AllAnalysesKey >> 9));
    int v7 = (void **)&v23[8 * v10];
    BOOL v11 = *v7;
    if (*v7 == (void *)-1)
    {
      char v12 = 0;
LABEL_27:
      if (v12) {
        int v7 = v12;
      }
      if (*v7 != &llvm::PreservedAnalyses::AllAnalysesKey)
      {
        unsigned int v6 = v25;
        int v7 = (void **)&v23[8 * v24];
LABEL_32:
        if (v23 == v5) {
          unsigned int v16 = v6;
        }
        else {
          unsigned int v16 = v24;
        }
        BOOL v4 = v7 == (void **)&v23[8 * v16];
        goto LABEL_36;
      }
    }
    else
    {
      char v12 = 0;
      int v13 = 1;
      while (v11 != &llvm::PreservedAnalyses::AllAnalysesKey)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == (void *)-2;
        }
        if (v14) {
          char v12 = v7;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        int v7 = (void **)&v23[8 * (v15 & v9)];
        BOOL v11 = *v7;
        if (*v7 == (void *)-1) {
          goto LABEL_27;
        }
      }
    }
    unsigned int v6 = v25;
    goto LABEL_32;
  }
  BOOL v4 = 1;
LABEL_36:
  if (v27 != v26) {
    free(v27);
  }
  if (v23 != v22) {
    free(v23);
  }
  MEMORY[0x1D25D9CD0](v34, 8);
  sub_1CC5C4BBC(v32);
  sub_1CC5C4C3C((unsigned int *)v30);
  MEMORY[0x1D25D9CD0](v30[0], 8);
  MEMORY[0x1D25D9CD0](v42, 8);
  uint64_t v17 = v39;
  if (v41)
  {
    uint64_t v19 = 32 * v41;
    uint64_t v20 = (uint64_t *)(v39 + 8);
    do
    {
      uint64_t v21 = *(v20 - 1);
      if (v21 != -4096 && v21 != -8192) {
        sub_1CBF5408C(v20);
      }
      v20 += 4;
      v19 -= 32;
    }
    while (v19);
    uint64_t v17 = v39;
  }
  MEMORY[0x1D25D9CD0](v17, 8);
  sub_1CBF54128((unsigned int *)v37);
  MEMORY[0x1D25D9CD0](v37[0], 8);
  return v4;
}

_DWORD *sub_1CC91FCE0(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    BOOL result = operator new(104 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    unsigned int v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 104 * v5;
      do
      {
        *(void *)BOOL result = -4096;
        result += 26;
        v6 -= 104;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)BOOL result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1CC91FD7C(uint64_t a1)
{
  sub_1CC91FE00((_DWORD *)(a1 + 416));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 416), 8);
  sub_1CC91FE68(a1 + 392);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 392), 8);
  sub_1CC91FEE0(a1 + 352);
  sub_1CC91FF4C(a1 + 312);
  sub_1CC13D1A0((unsigned int *)(a1 + 288));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 288), 8);
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != *(void **)a1) {
    free(v2);
  }
  return a1;
}

void sub_1CC91FE00(_DWORD *a1)
{
  unsigned int v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 104 * v1;
    unint64_t v3 = (void **)(*(void *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1)) {
        free(*v3);
      }
      v3 += 13;
      v2 -= 104;
    }
    while (v2);
  }
}

void sub_1CC91FE68(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 112 * v1;
    uint64_t v3 = *(void *)a1 + 88;
    do
    {
      if ((*(void *)(v3 - 88) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        sub_1CB833A08(v3, *(void **)(v3 + 8));
        unint64_t v4 = *(void **)(v3 - 80);
        if ((void *)(v3 - 64) != v4) {
          free(v4);
        }
      }
      v3 += 112;
      v2 -= 112;
    }
    while (v2);
  }
}

uint64_t sub_1CC91FEE0(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 16);
  if (v1)
  {
    do
    {
      uint64_t v4 = result;
      uint64_t v3 = (void *)*v1;
      operator delete(v1);
      BOOL result = v4;
      uint64_t v1 = v3;
    }
    while (v3);
  }
  uint64_t v2 = *(void **)result;
  *(void *)BOOL result = 0;
  if (v2)
  {
    uint64_t v5 = result;
    operator delete(v2);
    return v5;
  }
  return result;
}

uint64_t sub_1CC91FF4C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      __p = v2;
      uint64_t v6 = (void *)v2[4];
      if (v6 != (void *)v2[3]) {
        free(v6);
      }
      operator delete(__p);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *sub_1CC91FFC0(_DWORD *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CB87DF68((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC920020(a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC920020(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC9200D4((uint64_t)a1, v7);
  unsigned int v9 = 0;
  sub_1CB87DF68((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CC9200D4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD6654F4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC9201A0()
{
}

void sub_1CC9201FC(void *a1)
{
  *a1 = &unk_1F26284C8;
  uint64_t v1 = a1[1];
  if (v1)
  {
    sub_1CBF9BC38((_DWORD *)(v1 + 48));
    sub_1CC6168A0((_DWORD *)(v1 + 24));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC920274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::invalidate((uint64_t *)(a1 + 8), a2, a3);
}

void *sub_1CC92027C(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CC34574C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC9202FC(a1, a2, v7);
    *unint64_t v5 = *a2;
    v5[1] = v5 + 5;
    void v5[2] = v5 + 5;
    v5[3] = 4;
    *((_DWORD *)v5 + 8) = 0;
  }
  return v5;
}

void *sub_1CC9202FC(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC9203B4(a1, v6);
  unsigned int v8 = 0;
  sub_1CC34574C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC9203B4(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC92048C(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 72 * v10;
    do
    {
      *BOOL result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void sub_1CC92048C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 72 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v15 = 0;
        sub_1CC34574C(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
        uint64_t v10 = v15;
        uint64_t v11 = v15 + 5;
        *unsigned int v15 = *(void *)v4;
        v10[1] = v11;
        char v12 = *(void **)(v4 + 8);
        int v13 = *(void **)(v4 + 16);
        if (v13 == v12)
        {
          v10[2] = v11;
          uint64_t v14 = *(unsigned int *)(v4 + 28);
          char v12 = *(void **)(v4 + 16);
          if (v14)
          {
            memmove(v11, v12, 8 * v14);
            int v13 = *(void **)(v4 + 8);
            char v12 = *(void **)(v4 + 16);
          }
        }
        else
        {
          v10[2] = v13;
          *(void *)(v4 + 16) = v12;
          int v13 = v12;
        }
        v10[3] = *(void *)(v4 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v4 + 32);
        *(void *)(v4 + 24) = 4;
        *(_DWORD *)(v4 + 32) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v12 != v13) {
          free(v12);
        }
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

void *sub_1CC9205B8(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_1CC920714(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  BOOL result = *(void **)(*(void *)a1 + 8 * v15);
  if (result)
  {
    uint64_t v17 = (void *)*result;
    if (*result)
    {
      int v18 = 0;
      do
      {
        uint64_t v19 = v17;
        unint64_t v20 = v17[1];
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v21 = v20;
          if (v20 >= v6) {
            unint64_t v21 = v20 % v6;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v6 - 1);
        }
        if (v21 != v15) {
          break;
        }
        BOOL v22 = v20 == a2 && v19[2] == *a3;
        if ((v18 & !v22) == 1) {
          break;
        }
        v18 |= v22;
        uint64_t v17 = (void *)*v19;
        BOOL result = v19;
      }
      while (*v19);
    }
  }
  return result;
}

void sub_1CC920714(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_17;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_17:
      sub_1CD66629C(a1, prime);
    }
  }
}

uint64_t sub_1CC920804()
{
  int v5 = 1;
  char v3 = 1;
  int8x8_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable virtual function elimination";
  v1.n128_u64[1] = 35;
  sub_1CD66570C(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCDF9D0, &dword_1CB82C000);
}

void llvm::GlobalOptPass::run()
{
}

uint64_t sub_1CC920998(void *a1, void *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t (*a7)(uint64_t, void *), uint64_t a8, uint64_t (*a9)(uint64_t), uint64_t a10)
{
  char v374 = 0;
  v424[4] = *MEMORY[0x1E4F143B8];
  size_t v11 = v397;
  v398 = a3;
  uint64_t v399 = a4;
  unint64_t v12 = a1 + 3;
  v391 = a1 + 1;
  v392 = a1 + 5;
  v393 = v397;
  v394 = v397;
  uint64_t v395 = 8;
  int v396 = 0;
  v379 = (llvm::DataLayout *)(a1 + 34);
  v385 = a1 + 3;
  v376 = a1;
  while (2)
  {
    if (v11 != v393)
    {
      if (v395 >= 0x21 && 4 * (HIDWORD(v395) - v396) < v395)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v393);
        goto LABEL_4;
      }
      memset(v11, 255, 8 * v395);
    }
    int v396 = 0;
    HIDWORD(v395) = 0;
LABEL_4:
    for (uint64_t i = (void *)a1[2]; i != v391; uint64_t i = (void *)i[1])
    {
      uint8x8_t v14 = i - 7;
      if (!i) {
        uint8x8_t v14 = 0;
      }
      uint64_t v15 = v14[6];
      if (v15)
      {
        unsigned int v16 = v14[4] & 0xF;
        BOOL v209 = v16 > 8;
        int v17 = (1 << v16) & 0x18E;
        BOOL v18 = v209 || v17 == 0;
        if (v18 || v14[1])
        {
          uint64_t v19 = v394;
          uint64_t v20 = HIDWORD(v395);
          if (v394 != v393)
          {
            unsigned int v24 = v395;
LABEL_24:
            if (3 * v24 <= 4 * (HIDWORD(v395) - v396))
            {
              if (v24 >= 0x40) {
                v24 *= 2;
              }
              else {
                unsigned int v24 = 128;
              }
            }
            else if (v24 - HIDWORD(v395) >= v24 >> 3)
            {
              goto LABEL_26;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v393, v24);
            unsigned int v24 = v395;
            uint64_t v19 = v394;
LABEL_26:
            unsigned int v25 = v24 - 1;
            unsigned int v26 = (v24 - 1) & ((v15 >> 4) ^ (v15 >> 9));
            int v27 = &v19[8 * v26];
            uint64_t v28 = *(void *)v27;
            if (*(void *)v27 == -1)
            {
              int v29 = 0;
LABEL_38:
              if (v29) {
                int v33 = v29;
              }
              else {
                int v33 = v27;
              }
              if (*(void *)v33 != v15)
              {
                if (*(void *)v33 == -2) {
                  --v396;
                }
                else {
                  ++HIDWORD(v395);
                }
                *(void *)int v33 = v15;
              }
            }
            else
            {
              int v29 = 0;
              int v30 = 1;
              while (v28 != v15)
              {
                if (v29) {
                  BOOL v31 = 0;
                }
                else {
                  BOOL v31 = v28 == -2;
                }
                if (v31) {
                  int v29 = v27;
                }
                unsigned int v32 = v26 + v30++;
                unsigned int v26 = v32 & v25;
                int v27 = &v19[8 * (v32 & v25)];
                uint64_t v28 = *(void *)v27;
                if (*(void *)v27 == -1) {
                  goto LABEL_38;
                }
              }
            }
            continue;
          }
          if (HIDWORD(v395))
          {
            unint64_t v21 = 0;
            uint64_t v22 = 8 * HIDWORD(v395);
            unsigned int v23 = v394;
            while (*(void *)v23 != v15)
            {
              if (*(void *)v23 == -2) {
                unint64_t v21 = v23;
              }
              v23 += 8;
              v22 -= 8;
              if (!v22)
              {
                if (!v21) {
                  goto LABEL_21;
                }
                *(void *)unint64_t v21 = v15;
                --v396;
                goto LABEL_45;
              }
            }
            continue;
          }
LABEL_21:
          unsigned int v24 = v395;
          if (HIDWORD(v395) >= v395) {
            goto LABEL_24;
          }
          ++HIDWORD(v395);
          *(void *)&v394[8 * v20] = v15;
        }
      }
LABEL_45:
      ;
    }
    for (j = (void *)a1[4]; j != v12; j = (void *)j[1])
    {
      uint64_t v35 = j - 7;
      if (!j) {
        uint64_t v35 = 0;
      }
      uint64_t v36 = v35[6];
      if (!v36) {
        continue;
      }
      int v37 = *((_DWORD *)v35 + 8);
      if ((v37 & 0xE) != 2
        && ((unsigned int v38 = v37 & 0xF, v209 = v38 > 8, v39 = (1 << v38) & 0x182, !v209) ? (v40 = v39 == 0) : (v40 = 1), v40))
      {
LABEL_64:
        unsigned int v41 = v394;
        uint64_t v42 = HIDWORD(v395);
        if (v394 != v393)
        {
          unsigned int v46 = v395;
          goto LABEL_75;
        }
        if (!HIDWORD(v395))
        {
LABEL_72:
          unsigned int v46 = v395;
          if (HIDWORD(v395) < v395)
          {
            ++HIDWORD(v395);
            *(void *)&v394[8 * v42] = v36;
            continue;
          }
LABEL_75:
          if (3 * v46 <= 4 * (HIDWORD(v395) - v396))
          {
            if (v46 >= 0x40) {
              v46 *= 2;
            }
            else {
              unsigned int v46 = 128;
            }
          }
          else if (v46 - HIDWORD(v395) >= v46 >> 3)
          {
            goto LABEL_77;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v393, v46);
          unsigned int v46 = v395;
          unsigned int v41 = v394;
LABEL_77:
          unsigned int v47 = v46 - 1;
          unsigned int v48 = (v46 - 1) & ((v36 >> 4) ^ (v36 >> 9));
          uint64_t v49 = &v41[8 * v48];
          uint64_t v50 = *(void *)v49;
          if (*(void *)v49 == -1)
          {
            unsigned int v51 = 0;
LABEL_89:
            if (v51) {
              unsigned int v55 = v51;
            }
            else {
              unsigned int v55 = v49;
            }
            if (*(void *)v55 != v36)
            {
              if (*(void *)v55 == -2) {
                --v396;
              }
              else {
                ++HIDWORD(v395);
              }
              *(void *)unsigned int v55 = v36;
            }
          }
          else
          {
            unsigned int v51 = 0;
            int v52 = 1;
            while (v50 != v36)
            {
              if (v51) {
                BOOL v53 = 0;
              }
              else {
                BOOL v53 = v50 == -2;
              }
              if (v53) {
                unsigned int v51 = v49;
              }
              unsigned int v54 = v48 + v52++;
              unsigned int v48 = v54 & v47;
              uint64_t v49 = &v41[8 * (v54 & v47)];
              uint64_t v50 = *(void *)v49;
              if (*(void *)v49 == -1) {
                goto LABEL_89;
              }
            }
          }
          continue;
        }
        uint64_t v43 = 0;
        uint64_t v44 = 8 * HIDWORD(v395);
        uint64_t v45 = v394;
        while (*(void *)v45 != v36)
        {
          if (*(void *)v45 == -2) {
            uint64_t v43 = v45;
          }
          v45 += 8;
          v44 -= 8;
          if (!v44)
          {
            if (!v43) {
              goto LABEL_72;
            }
            *(void *)uint64_t v43 = v36;
            --v396;
            break;
          }
        }
      }
      else
      {
        while (1)
        {
          uint64_t v35 = (void *)v35[1];
          if (!v35) {
            break;
          }
          if (*(unsigned char *)(v35[3] + 16) != 4) {
            goto LABEL_64;
          }
        }
      }
    }
    uint64_t v56 = (void *)a1[6];
    uint64_t v57 = a10;
    while (v56 != v392)
    {
      uint64_t AliaseeObject = (uint64_t)(v56 - 6);
      if (v56) {
        unint64_t v59 = (llvm::GlobalAlias *)(v56 - 6);
      }
      else {
        unint64_t v59 = 0;
      }
      int v60 = *((unsigned __int8 *)v59 + 16);
      if (v56 && v60 == 1)
      {
        uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject(v59);
        if (!AliaseeObject) {
          goto LABEL_151;
        }
      }
      else if (v60 == 2)
      {
        goto LABEL_151;
      }
      uint64_t v61 = *(void *)(AliaseeObject + 48);
      if (v61)
      {
        unsigned int v62 = *((_DWORD *)v59 + 8) & 0xF;
        BOOL v209 = v62 > 8;
        int v63 = (1 << v62) & 0x18E;
        BOOL v64 = v209 || v63 == 0;
        if (v64 || *((void *)v59 + 1))
        {
          uint64_t v65 = v394;
          uint64_t v66 = HIDWORD(v395);
          if (v394 != v393)
          {
            unsigned int v70 = v395;
LABEL_130:
            if (3 * v70 <= 4 * (HIDWORD(v395) - v396))
            {
              if (v70 >= 0x40) {
                v70 *= 2;
              }
              else {
                unsigned int v70 = 128;
              }
            }
            else if (v70 - HIDWORD(v395) >= v70 >> 3)
            {
              goto LABEL_132;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v393, v70);
            unsigned int v70 = v395;
            uint64_t v65 = v394;
LABEL_132:
            unsigned int v71 = v70 - 1;
            unsigned int v72 = (v70 - 1) & ((v61 >> 4) ^ (v61 >> 9));
            BOOL v73 = &v65[8 * v72];
            uint64_t v74 = *(void *)v73;
            if (*(void *)v73 == -1)
            {
              uint64_t v75 = 0;
LABEL_144:
              if (v75) {
                uint64_t v79 = v75;
              }
              else {
                uint64_t v79 = v73;
              }
              if (*(void *)v79 != v61)
              {
                if (*(void *)v79 == -2) {
                  --v396;
                }
                else {
                  ++HIDWORD(v395);
                }
                *(void *)uint64_t v79 = v61;
              }
            }
            else
            {
              uint64_t v75 = 0;
              int v76 = 1;
              while (v74 != v61)
              {
                if (v75) {
                  BOOL v77 = 0;
                }
                else {
                  BOOL v77 = v74 == -2;
                }
                if (v77) {
                  uint64_t v75 = v73;
                }
                unsigned int v78 = v72 + v76++;
                unsigned int v72 = v78 & v71;
                BOOL v73 = &v65[8 * (v78 & v71)];
                uint64_t v74 = *(void *)v73;
                if (*(void *)v73 == -1) {
                  goto LABEL_144;
                }
              }
            }
            goto LABEL_151;
          }
          if (HIDWORD(v395))
          {
            uint64_t v67 = 0;
            uint64_t v68 = 8 * HIDWORD(v395);
            unsigned int v69 = v394;
            while (*(void *)v69 != v61)
            {
              if (*(void *)v69 == -2) {
                uint64_t v67 = v69;
              }
              v69 += 8;
              v68 -= 8;
              if (!v68)
              {
                if (!v67) {
                  goto LABEL_127;
                }
                *(void *)uint64_t v67 = v61;
                --v396;
                goto LABEL_151;
              }
            }
            goto LABEL_151;
          }
LABEL_127:
          unsigned int v70 = v395;
          if (HIDWORD(v395) >= v395) {
            goto LABEL_130;
          }
          ++HIDWORD(v395);
          *(void *)&v394[8 * v66] = v61;
        }
      }
LABEL_151:
      uint64_t v56 = (void *)v56[1];
    }
    uint64_t v80 = (uint64_t)v376;
    unint64_t v81 = (void *)v376[4];
    if (v81 == v12)
    {
      LOBYTE(v103) = 0;
    }
    else
    {
      v382 = 0;
      unint64_t v82 = 0;
      unint64_t v83 = 0;
      v375 = v398;
      uint64_t v377 = v399;
      do
      {
        __p = v82;
        unint64_t v84 = v81 - 7;
        BOOL v18 = v81 == 0;
        unint64_t v81 = (void *)v81[1];
        if (v18) {
          unint64_t v85 = 0;
        }
        else {
          unint64_t v85 = v84;
        }
        for (uint64_t k = (void *)v85[10]; k != v85 + 9; uint64_t k = (void *)k[1])
        {
          unsigned int v87 = k - 3;
          if (!k) {
            unsigned int v87 = 0;
          }
          uint64_t v88 = v87 + 5;
          for (uint64_t m = (void *)v87[6]; m != v88; uint64_t m = (void *)m[1])
          {
            uint64_t v90 = (uint64_t)(m - 3);
            if (!m) {
              uint64_t v90 = 0;
            }
            int v91 = *(unsigned __int8 *)(v90 + 16);
            if (v91 == 84) {
              uint64_t v92 = v90;
            }
            else {
              uint64_t v92 = 0;
            }
            if (m)
            {
              if (v91 == 84)
              {
                uint64_t v93 = *(void *)(v92 - 32);
                if (*(unsigned char *)(v93 + 16) != 24)
                {
                  if (*(unsigned char *)(v93 + 16)) {
                    goto LABEL_192;
                  }
                  uint64_t v94 = *(void *)(v93 + 24);
                  if (v94 != *(void *)(v92 + 72)) {
                    goto LABEL_192;
                  }
                  if ((*(_DWORD *)(v93 + 32) & 0xFu) - 7 > 1) {
                    goto LABEL_192;
                  }
                  if (!*(_DWORD *)(v93 + 36))
                  {
                    if (!sub_1CC928C8C(*(void *)(v92 - 32))) {
                      goto LABEL_192;
                    }
                    if (*(_DWORD *)(v94 + 8) > 0xFFu) {
                      goto LABEL_192;
                    }
                    if (llvm::Function::hasAddressTaken((llvm::Function *)v93, 0, 0, 1, 0, 0)) {
                      goto LABEL_192;
                    }
                    v95 = (unint64_t *)a7(a8, v85);
                    if (!sub_1CC928D38(v92, v95)) {
                      goto LABEL_192;
                    }
                  }
                }
              }
            }
          }
        }
        if (v83 >= (char *)v382)
        {
          uint64_t v96 = (v83 - __p) >> 3;
          unint64_t v97 = v96 + 1;
          unint64_t v12 = v385;
          if ((unint64_t)(v96 + 1) >> 61) {
            abort();
          }
          if ((v382 - (llvm::Instruction *)__p) >> 2 > v97) {
            unint64_t v97 = (v382 - (llvm::Instruction *)__p) >> 2;
          }
          if ((unint64_t)(v382 - (llvm::Instruction *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v98 = v97;
          }
          if (v98)
          {
            if (v98 >> 61) {
              sub_1CB833614();
            }
            uint64_t v99 = (char *)operator new(8 * v98);
          }
          else
          {
            uint64_t v99 = 0;
          }
          unint64_t v82 = &v99[8 * v96];
          *(void *)unint64_t v82 = v85;
          v100 = v82 + 8;
          while (v83 != __p)
          {
            uint64_t v101 = *((void *)v83 - 1);
            v83 -= 8;
            *((void *)v82 - 1) = v101;
            v82 -= 8;
          }
          v382 = (llvm::Instruction *)&v99[8 * v98];
          if (__p) {
            operator delete(__p);
          }
          unint64_t v83 = v100;
        }
        else
        {
          *(void *)unint64_t v83 = v85;
          v83 += 8;
LABEL_192:
          unint64_t v12 = v385;
          unint64_t v82 = __p;
        }
      }
      while (v81 != v12);
      uint64_t v80 = (uint64_t)v376;
      uint64_t v102 = (void *)v376[4];
      if (v102 != v12)
      {
        int v103 = 0;
        int v104 = v375;
        while (1)
        {
          unsigned int v105 = (void *)v102[1];
          if (v102) {
            uint64_t v106 = (uint64_t)(v102 - 7);
          }
          else {
            uint64_t v106 = 0;
          }
          uint64_t v107 = *(void *)(v106 + 112);
          if (v107 && (*(unsigned char *)(v107 + 14) & 2) != 0) {
            goto LABEL_339;
          }
          int v108 = *(_DWORD *)(v106 + 20);
          if ((v108 & 0x10000000) == 0)
          {
            if (v102 && *(unsigned char *)(v106 + 16) == 3)
            {
              if ((v108 & 0x7FFFFFF) == 0) {
                goto LABEL_227;
              }
            }
            else if (!*(unsigned char *)(v106 + 16) {
                   && *(void *)(v106 + 72) == v106 + 72
            }
                   && (*(unsigned char *)(v106 + 34) & 0x80) == 0)
            {
              goto LABEL_227;
            }
            if ((*(_DWORD *)(v106 + 32) & 0xFu) - 7 >= 2) {
              *(_DWORD *)(v106 + 32) = *(_DWORD *)(v106 + 32) & 0xFFFFBFC0 | 0x4007;
            }
          }
LABEL_227:
          if (sub_1CC923914(v106, (uint64_t *)&v393)) {
            goto LABEL_228;
          }
          if (v102 && *(unsigned char *)(v106 + 16) == 3)
          {
            if ((*(_DWORD *)(v106 + 20) & 0x7FFFFFF) != 0) {
              goto LABEL_236;
            }
          }
          else if (*(unsigned char *)(v106 + 16) || *(void *)(v106 + 72) != v106 + 72 || (*(unsigned char *)(v106 + 34) & 0x80) != 0)
          {
LABEL_236:
            uint64_t v111 = a10;
            if (llvm::removeUnreachableBlocks((llvm *)v106, 0, 0, v109, v110))
            {
              uint64_t v112 = ((uint64_t (*)(uint64_t, uint64_t))a9)(a10, v106);
              *(void *)(v112 + 56) = v106;
              sub_1CC5A43B0(v112, 0);
              int v103 = 1;
            }
            goto LABEL_238;
          }
          uint64_t v111 = a10;
LABEL_238:
          v103 |= sub_1CC923B7C((uint64_t ***)v106, a5, a6, v104, v377, a9, v111);
          if ((*(_DWORD *)(v106 + 32) & 0xFu) - 7 > 1) {
            goto LABEL_339;
          }
          uint64_t v113 = *(void *)(v106 + 112);
          if (!v113) {
            goto LABEL_251;
          }
          if (*(char *)(v113 + 32) < 0
            && (llvm::Function::hasAddressTaken((llvm::Function *)v106, 0, 0, 1, 0, 0) & 1) == 0)
          {
            uint64_t v114 = *(void *)(v106 + 8);
            if (v114)
            {
              while (1)
              {
                uint64_t v115 = *(void *)(v114 + 24);
                if (*(unsigned char *)(v115 + 16) == 84 && (*(_WORD *)(v115 + 18) & 3) == 2) {
                  break;
                }
                uint64_t v114 = *(void *)(v114 + 8);
                if (!v114) {
                  goto LABEL_246;
                }
              }
            }
            else
            {
LABEL_246:
              sub_1CC928C10(v106, 71);
              int v103 = 1;
            }
          }
          uint64_t v116 = *(void *)(v106 + 112);
          if (v116 && (*(unsigned char *)(v116 + 33) & 1) != 0)
          {
            if (llvm::Function::hasAddressTaken((llvm::Function *)v106, 0, 0, 1, 0, 0)) {
              goto LABEL_339;
            }
            uint64_t v121 = *(void *)(v106 + 8);
            if (v121)
            {
              uint64_t v122 = *(void *)(v106 + 8);
              while (1)
              {
                uint64_t v123 = *(void *)(v122 + 24);
                if (*(unsigned char *)(v123 + 16) == 84 && (*(_WORD *)(v123 + 18) & 3) == 2) {
                  goto LABEL_339;
                }
                uint64_t v122 = *(void *)(v122 + 8);
                if (!v122)
                {
                  while (v121)
                  {
                    if (*(unsigned char *)(*(void *)(v121 + 24) + 16) == 33) {
                      goto LABEL_339;
                    }
                    uint64_t v121 = *(void *)(v121 + 8);
                  }
                  break;
                }
              }
            }
            sub_1CC928C10(v106, 72);
            v124 = **(void ***)(v106 + 40);
            __dst = &v403;
            v402 = (void *)0x200000000;
            v406 = v124;
            v407 = &v415;
            uint64_t v408 = (uint64_t)&v416;
            uint64_t v409 = 0;
            int v410 = 0;
            __int16 v411 = 512;
            char v412 = 7;
            v405[2] = 0;
            v405[3] = 0;
            uint64_t v413 = 0;
            uint64_t v414 = 0;
            v415 = &unk_1F2616E88;
            v416 = (llvm::GlobalVariable *)&unk_1F2617008;
            uint64_t v125 = *(void *)(v106 + 8);
            uint64_t v126 = (llvm::Instruction **)v424;
            v422 = (llvm::Instruction **)v424;
            uint64_t v423 = 0x400000000;
            if (v125)
            {
              unint64_t v127 = -1;
              uint64_t v128 = v125;
              do
              {
                uint64_t v128 = *(void *)(v128 + 8);
                ++v127;
              }
              while (v128);
              int v129 = v127 + 1;
              if (v127 >= 4) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v130 = v424;
              do
              {
                *v130++ = *(void *)(v125 + 24);
                uint64_t v125 = *(void *)(v125 + 8);
              }
              while (v125);
              uint64_t v126 = v422;
            }
            else
            {
              int v129 = 0;
            }
            LODWORD(v423) = v129;
            if (v129)
            {
              uint64_t v131 = &v126[v129];
              do
              {
                uint64_t v132 = *v126;
                unsigned int v133 = *((unsigned __int8 *)*v126 + 16);
                if (v133 >= 0x1C)
                {
                  unsigned int v134 = v133 - 33;
                  BOOL v209 = v134 > 0x33;
                  uint64_t v135 = (1 << v134) & 0x8000000000041;
                  if (!v209 && v135 != 0)
                  {
                    v418 = &v420;
                    uint64_t v419 = 0x100000000;
                    int v137 = *((_DWORD *)v132 + 5);
                    if (v137 < 0)
                    {
                      unint64_t v139 = *((void *)v132 - 4 * (v137 & 0x7FFFFFF) - 1);
                      if ((v139 & 0xFFFFFFFF0) != 0)
                      {
                        uint64_t v140 = (v139 >> 4);
                        v141 = v132;
                        do
                        {
                          uint64_t v142 = *((_DWORD *)v132 + 5) & 0x7FFFFFF;
                          unint64_t v143 = (_DWORD *)((char *)v132 - 32 * v142);
                          unint64_t v144 = (unsigned int *)((char *)v141 - *((void *)v143 - 1) + -32 * v142);
                          uint64_t v145 = *v144;
                          uint64_t v146 = v144[1];
                          uint64_t v147 = *((void *)v144 - 1);
                          v400[0] = &v143[8 * v145];
                          v400[1] = v146 - v145;
                          v400[2] = v147;
                          sub_1CD5C74F0((uint64_t)&v418, (uint64_t)v400);
                          v141 = (llvm::Instruction *)((char *)v141 + 16);
                          --v140;
                        }
                        while (v140);
                        if (v419)
                        {
                          uint64_t v148 = (uint64_t)v418;
                          uint64_t v149 = 48 * v419;
                          while (1)
                          {
                            char v150 = *(unsigned char *)(v148 + 23);
                            int v151 = v150;
                            uint64_t v152 = v150 & 0x7F;
                            if (v151 < 0) {
                              uint64_t v152 = *(void *)(v148 + 8);
                            }
                            if (v152 == 12)
                            {
                              uint64_t v153 = v151 >= 0 ? v148 : *(void *)v148;
                              uint64_t v154 = *(void *)v153;
                              int v155 = *(_DWORD *)(v153 + 8);
                              if (v154 == 0x636F6C6C61657270 && v155 == 1684370529) {
                                break;
                              }
                            }
                            v148 += 48;
                            v149 -= 48;
                            if (!v149) {
                              goto LABEL_289;
                            }
                          }
                          sub_1CC535AC8((uint64_t)v400, (long long *)(v148 + 48), (long long *)&v418[6 * v419], v148);
                          LODWORD(v419) = v419 - 1;
                          sub_1CD4AF9B4((uint64_t)&v418[6 * v419]);
                        }
                      }
                    }
LABEL_289:
                    BOOL v138 = llvm::CallBase::Create((uint64_t)v132, (uint64_t)v418, v419, v132);
                    llvm::Value::doRAUW(v132, (llvm::Value *)v138, (llvm::Value *)1);
                    llvm::Value::takeName((int32x2_t ****)v138, v132);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                  }
                }
                ++v126;
              }
              while (v126 != v131);
              uint64_t v126 = v422;
              uint64_t v80 = (uint64_t)v376;
            }
            if (v126 != v424) {
              free(v126);
            }
            if (__dst != &v403) {
              free(__dst);
            }
          }
          else
          {
LABEL_251:
            if (sub_1CC928C8C(v106)
              && *(_DWORD *)(*(void *)(v106 + 24) + 8) <= 0xFFu
              && (llvm::Function::hasAddressTaken((llvm::Function *)v106, 0, 0, 1, 0, 0) & 1) == 0)
            {
              int v117 = v103;
              uint64_t v118 = (void *)a5(a6, v106);
              if (byte_1EBCDFB30)
              {
LABEL_253:
                *(_WORD *)(v106 + 18) = *(_WORD *)(v106 + 18) & 0xC00F | 0x90;
                uint64_t v119 = *(void *)(v106 + 8);
                int v104 = v375;
                if (v119)
                {
                  uint64_t v80 = (uint64_t)v376;
                  do
                  {
                    uint64_t v120 = *(void *)(v119 + 24);
                    if (*(unsigned char *)(v120 + 16) != 4) {
                      *(_WORD *)(v120 + 18) = *(_WORD *)(v120 + 18) & 0xF003 | 0x24;
                    }
                    uint64_t v119 = *(void *)(v119 + 8);
                  }
                  while (v119);
                  int v103 = 1;
                }
                else
                {
                  int v103 = 1;
                  uint64_t v80 = (uint64_t)v376;
                }
              }
              else
              {
                if ((*(unsigned int (**)(void, uint64_t))(*(void *)*v118 + 520))(*v118, v106)
                  && (uint64_t v157 = *(void *)(v106 + 8)) != 0)
                {
                  while (1)
                  {
                    uint64_t v158 = *(void *)(v157 + 24);
                    if (*(unsigned char *)(v158 + 16) != 4)
                    {
                      uint64_t v159 = *(void *)(*(void *)(v158 + 40) + 56);
                      uint64_t v160 = (unint64_t *)a7(a8, v159);
                      if (!sub_1CC928D38(v158, v160)) {
                        break;
                      }
                      uint64_t v161 = v83;
                      if (v82 != v83)
                      {
                        uint64_t v161 = v82;
                        while (*(void *)v161 != v159)
                        {
                          v161 += 8;
                          if (v161 == v83)
                          {
                            uint64_t v161 = v83;
                            break;
                          }
                        }
                      }
                      if (v161 == v83) {
                        break;
                      }
                    }
                    uint64_t v157 = *(void *)(v157 + 8);
                    if (!v157) {
                      goto LABEL_253;
                    }
                  }
                  uint64_t v80 = (uint64_t)v376;
                  int v103 = v117;
                }
                else
                {
                  uint64_t v80 = (uint64_t)v376;
                }
                int v104 = v375;
              }
            }
            if (sub_1CC928C8C(v106)
              && *(_DWORD *)(*(void *)(v106 + 24) + 8) <= 0xFFu
              && (llvm::Function::hasAddressTaken((llvm::Function *)v106, 0, 0, 1, 0, 0) & 1) == 0)
            {
              *(_WORD *)(v106 + 18) = *(_WORD *)(v106 + 18) & 0xC00F | 0x80;
              for (uint64_t n = *(void *)(v106 + 8); n; uint64_t n = *(void *)(n + 8))
              {
                uint64_t v163 = *(void *)(n + 24);
                if (*(unsigned char *)(v163 + 16) != 4) {
                  *(_WORD *)(v163 + 18) = *(_WORD *)(v163 + 18) & 0xF003 | 0x20;
                }
              }
              int v103 = 1;
            }
            uint64_t v164 = *(void *)(v106 + 112);
            if (!v164
              || (*(unsigned char *)(v164 + 26) & 4) == 0
              || (llvm::Function::hasAddressTaken((llvm::Function *)v106, 0, 0, 1, 0, 0) & 1) != 0)
            {
              goto LABEL_339;
            }
            sub_1CC928C10(v106, 18);
          }
LABEL_228:
          int v103 = 1;
LABEL_339:
          uint64_t v102 = v105;
          if (v105 == v12) {
            goto LABEL_346;
          }
        }
      }
      LOBYTE(v103) = 0;
LABEL_346:
      if (v82) {
        operator delete(v82);
      }
      uint64_t v57 = a10;
    }
    char __pa = v103;
    __dst = a2;
    v402 = &v398;
    char v383 = llvm::optimizeGlobalCtorsList(v80, (uint64_t (*)(uint64_t))sub_1CC92BA48, (uint64_t)&__dst);
    uint64_t v165 = *(void **)(v80 + 16);
    if (v165 != v391)
    {
      int v166 = 0;
      int v167 = v398;
      uint64_t v168 = v399;
      while (1)
      {
        unsigned int v169 = (void *)v165[1];
        if (v165) {
          uint64_t v170 = (uint64_t)(v165 - 7);
        }
        else {
          uint64_t v170 = 0;
        }
        int v171 = *(_DWORD *)(v170 + 20);
        int v172 = *(unsigned __int8 *)(v170 + 16);
        if ((v171 & 0x10000000) == 0)
        {
          if (!v165 || v172 != 3)
          {
            if (!*(unsigned char *)(v170 + 16) && *(void *)(v170 + 72) == v170 + 72 && (*(unsigned char *)(v170 + 34) & 0x80) == 0) {
              goto LABEL_369;
            }
LABEL_362:
            if ((*(_DWORD *)(v170 + 32) & 0xFu) - 7 >= 2) {
              *(_DWORD *)(v170 + 32) = *(_DWORD *)(v170 + 32) & 0xFFFFBFC0 | 0x4007;
            }
            goto LABEL_364;
          }
          if ((v171 & 0x7FFFFFF) != 0) {
            goto LABEL_362;
          }
          int v172 = 3;
        }
LABEL_364:
        if (v165 && v172 == 3)
        {
          if ((v171 & 0x7FFFFFF) != 0) {
            goto LABEL_371;
          }
          goto LABEL_378;
        }
        if (v172) {
          goto LABEL_371;
        }
LABEL_369:
        if (*(void *)(v170 + 72) != v170 + 72 || (*(unsigned char *)(v170 + 34) & 0x80) != 0)
        {
LABEL_371:
          uint64_t v173 = *(void *)(v170 - 32);
          if (v173)
          {
            __dst = (void *)1;
            for (iuint64_t i = 8; ii != 72; ii += 16)
              *(void **)((char *)&__dst + ii) = (void *)-4096;
            v175 = sub_1CBFB8694(v173, v379, 0, (uint64_t)&__dst);
            if ((__dst & 1) == 0) {
              MEMORY[0x1D25D9CD0](v402, 8);
            }
            if (v175 != (llvm::Constant *)v173) {
              llvm::GlobalVariable::setInitializer(v170, v175);
            }
          }
        }
LABEL_378:
        if (sub_1CC923914(v170, (uint64_t *)&v393)) {
          int v166 = 1;
        }
        else {
          v166 |= sub_1CC923B7C((uint64_t ***)v170, a5, a6, v167, v168, a9, v57);
        }
        uint64_t v165 = v169;
        if (v169 == v391) {
          goto LABEL_384;
        }
      }
    }
    LOBYTE(v166) = 0;
LABEL_384:
    __dst = v405;
    v402 = v405;
    uint64_t v403 = 4;
    int v404 = 0;
    v406 = &v410;
    v407 = &v410;
    uint64_t v408 = 4;
    LODWORD(v409) = 0;
    v422 = (llvm::Instruction **)v424;
    uint64_t v423 = 0x400000000;
    v416 = (llvm::GlobalVariable *)llvm::collectUsedGlobalVariables((uint64_t)v376, (uint64_t)&v422, 0);
    sub_1CC92C6E4((uint64_t)&v418, v422, &v422[v423]);
    if (v402 != __dst) {
      free(v402);
    }
    v176 = v418;
    uint64_t v177 = v419;
    if ((uint64_t *)v419 == v418)
    {
      v402 = __dst;
      if (HIDWORD(v420))
      {
        memmove(__dst, (const void *)v419, 8 * HIDWORD(v420));
        uint64_t v177 = (uint64_t)v418;
        v176 = (void *)v419;
      }
      else
      {
        v176 = (void *)v419;
      }
    }
    else
    {
      v402 = (void *)v419;
      uint64_t v419 = (uint64_t)v418;
      uint64_t v177 = (uint64_t)v418;
    }
    uint64_t v403 = v420;
    int v404 = v421;
    uint64_t v420 = 4;
    int v421 = 0;
    if (v176 != (void *)v177) {
      free(v176);
    }
    LODWORD(v423) = 0;
    v417 = (llvm::GlobalVariable *)llvm::collectUsedGlobalVariables((uint64_t)v376, (uint64_t)&v422, 1);
    sub_1CC92C6E4((uint64_t)&v418, v422, &v422[v423]);
    if (v407 != v406) {
      free(v407);
    }
    uint64_t v178 = v418;
    uint64_t v179 = v419;
    if ((uint64_t *)v419 == v418)
    {
      v407 = v406;
      if (HIDWORD(v420))
      {
        memmove(v406, (const void *)v419, 8 * HIDWORD(v420));
        uint64_t v179 = (uint64_t)v418;
        uint64_t v178 = (void *)v419;
      }
      else
      {
        uint64_t v178 = (void *)v419;
      }
    }
    else
    {
      v407 = (void *)v419;
      uint64_t v419 = (uint64_t)v418;
      uint64_t v179 = (uint64_t)v418;
    }
    uint64_t v408 = v420;
    LODWORD(v409) = v421;
    uint64_t v420 = 4;
    int v421 = 0;
    if (v178 != (void *)v179) {
      free(v178);
    }
    if (v422 != v424) {
      free(v422);
    }
    if (v402 == __dst) {
      v180 = (uint64_t *)((char *)&v403 + 4);
    }
    else {
      v180 = &v403;
    }
    uint64_t v181 = *(unsigned int *)v180;
    if (v181)
    {
      uint64_t v182 = 8 * v181;
      v183 = (unint64_t *)v402;
      while (*v183 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v183;
        v182 -= 8;
        if (!v182) {
          goto LABEL_446;
        }
      }
    }
    else
    {
      v183 = (unint64_t *)v402;
    }
    v184 = (unint64_t *)((char *)v402 + 8 * v181);
    if (v183 != v184)
    {
      int v185 = v409;
      int v186 = v408 - 1;
      unint64_t v187 = *v183;
LABEL_413:
      v188 = v406;
      if (v407 == v406)
      {
        unsigned int v189 = HIDWORD(v408);
        v190 = (char *)v407 + 8 * HIDWORD(v408);
        if (HIDWORD(v408))
        {
          uint64_t v191 = 0;
          while (*(void *)((char *)v407 + v191) != v187)
          {
            v191 += 8;
            if (8 * HIDWORD(v408) == v191) {
              goto LABEL_432;
            }
          }
          v190 = (char *)v407 + v191;
        }
LABEL_432:
        v188 = v407;
      }
      else
      {
        unsigned int v192 = v186 & ((v187 >> 4) ^ (v187 >> 9));
        v190 = (char *)v407 + 8 * v192;
        uint64_t v193 = *(void *)v190;
        if (*(void *)v190 == -1)
        {
          v194 = 0;
LABEL_442:
          if (v194) {
            v190 = v194;
          }
          unsigned int v189 = HIDWORD(v408);
          if (*(void *)v190 != v187) {
            v190 = (char *)v407 + 8 * v408;
          }
        }
        else
        {
          v194 = 0;
          int v195 = 1;
          while (v193 != v187)
          {
            if (v194) {
              BOOL v196 = 0;
            }
            else {
              BOOL v196 = v193 == -2;
            }
            if (v196) {
              v194 = v190;
            }
            unsigned int v197 = v192 + v195++;
            unsigned int v192 = v197 & v186;
            v190 = (char *)v407 + 8 * (v197 & v186);
            uint64_t v193 = *(void *)v190;
            if (*(void *)v190 == -1) {
              goto LABEL_442;
            }
          }
          unsigned int v189 = HIDWORD(v408);
        }
      }
      unsigned int v198 = v408;
      if (v407 == v188) {
        unsigned int v198 = v189;
      }
      if (v190 != (char *)v407 + 8 * v198)
      {
        *(void *)v190 = -2;
        LODWORD(v409) = ++v185;
      }
      uint64_t v199 = v183 + 1;
      while (v199 != v184)
      {
        unint64_t v200 = *v199++;
        unint64_t v187 = v200;
        if (v200 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v183 = v199 - 1;
          goto LABEL_413;
        }
      }
    }
LABEL_446:
    uint64_t v201 = (void *)v376[6];
    if (v201 != v392)
    {
      char v202 = 0;
      while (1)
      {
        int v203 = (void *)v201[1];
        if (v201) {
          uint64_t v204 = (uint64_t)(v201 - 6);
        }
        else {
          uint64_t v204 = 0;
        }
        int v205 = *(_DWORD *)(v204 + 20);
        if ((v205 & 0x10000000) == 0)
        {
          if (v201 && *(unsigned char *)(v204 + 16) == 3)
          {
            if ((v205 & 0x7FFFFFF) == 0) {
              goto LABEL_461;
            }
          }
          else if (!*(unsigned char *)(v204 + 16) && *(void *)(v204 + 72) == v204 + 72 && (*(unsigned char *)(v204 + 34) & 0x80) == 0)
          {
            goto LABEL_461;
          }
          if ((*(_DWORD *)(v204 + 32) & 0xFu) - 7 >= 2) {
            *(_DWORD *)(v204 + 32) = *(_DWORD *)(v204 + 32) & 0xFFFFBFC0 | 0x4007;
          }
        }
LABEL_461:
        if (sub_1CC923914(v204, (uint64_t *)&v393)) {
          goto LABEL_462;
        }
        int v206 = *(_DWORD *)(v204 + 32);
        if (((1 << (v206 & 0xF)) & 0x1EB) == 0
          || (v206 & 0x4000) == 0
          && (*(_DWORD *)(v204 + 32) & 0xFu) - 7 >= 2
          && ((v206 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v204) & 1) != 0))
        {
          goto LABEL_598;
        }
        uint64_t v207 = *(llvm::Value **)(v204 - 32);
        uint64_t v208 = llvm::Value::stripPointerCasts(v207);
        BOOL v209 = !v208 || *((unsigned __int8 *)v208 + 16) > 3u;
        if (v209) {
          goto LABEL_598;
        }
        uint64_t v210 = (uint64_t)v208;
        int v211 = *((_DWORD *)v208 + 8);
        if (((1 << (v211 & 0xF)) & 0x1EB) == 0
          || (v211 & 0x4000) == 0
          && (*((_DWORD *)v208 + 8) & 0xFu) - 7 >= 2
          && ((v211 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v208) & 1) != 0))
        {
          goto LABEL_598;
        }
        llvm::Constant::removeDeadConstantUsers(v210);
        uint64_t v212 = *(void *)(v204 + 8);
        if (v212)
        {
          if (*(void *)(v212 + 8))
          {
            BOOL v213 = 1;
            goto LABEL_505;
          }
          uint64_t v214 = __dst;
          if (v402 == __dst)
          {
            unsigned int v215 = HIDWORD(v403);
            uint64_t v216 = (char *)v402 + 8 * HIDWORD(v403);
            if (HIDWORD(v403))
            {
              uint64_t v217 = 0;
              while (*(void *)((char *)v402 + v217) != v204)
              {
                v217 += 8;
                if (8 * HIDWORD(v403) == v217) {
                  goto LABEL_499;
                }
              }
              uint64_t v216 = (char *)v402 + v217;
            }
LABEL_499:
            uint64_t v214 = v402;
          }
          else
          {
            int v218 = v403 - 1;
            unsigned int v219 = (v403 - 1) & ((v204 >> 4) ^ (v204 >> 9));
            uint64_t v216 = (char *)v402 + 8 * v219;
            uint64_t v220 = *(void *)v216;
            if (*(void *)v216 == -1)
            {
              v221 = 0;
LABEL_576:
              if (v221) {
                uint64_t v216 = v221;
              }
              unsigned int v215 = HIDWORD(v403);
              if (*(void *)v216 != v204) {
                uint64_t v216 = (char *)v402 + 8 * v403;
              }
            }
            else
            {
              v221 = 0;
              int v222 = 1;
              while (v220 != v204)
              {
                if (v221) {
                  BOOL v223 = 0;
                }
                else {
                  BOOL v223 = v220 == -2;
                }
                if (v223) {
                  v221 = v216;
                }
                unsigned int v224 = v219 + v222++;
                unsigned int v219 = v224 & v218;
                uint64_t v216 = (char *)v402 + 8 * (v224 & v218);
                uint64_t v220 = *(void *)v216;
                if (*(void *)v216 == -1) {
                  goto LABEL_576;
                }
              }
              unsigned int v215 = HIDWORD(v403);
            }
          }
          if (v402 == v214) {
            unsigned int v225 = v215;
          }
          else {
            unsigned int v225 = v403;
          }
          if (v216 == (char *)v402 + 8 * v225)
          {
            uint64_t v231 = v406;
            if (v407 == v406)
            {
              unsigned int v232 = HIDWORD(v408);
              uint64_t v233 = (char *)v407 + 8 * HIDWORD(v408);
              if (HIDWORD(v408))
              {
                uint64_t v234 = 0;
                while (*(void *)((char *)v407 + v234) != v204)
                {
                  v234 += 8;
                  if (8 * HIDWORD(v408) == v234) {
                    goto LABEL_608;
                  }
                }
                uint64_t v233 = (char *)v407 + v234;
              }
LABEL_608:
              uint64_t v231 = v407;
            }
            else
            {
              int v254 = v408 - 1;
              unsigned int v255 = (v408 - 1) & ((v204 >> 4) ^ (v204 >> 9));
              uint64_t v233 = (char *)v407 + 8 * v255;
              uint64_t v256 = *(void *)v233;
              if (*(void *)v233 == -1)
              {
                unsigned int v257 = 0;
LABEL_634:
                if (v257) {
                  uint64_t v233 = v257;
                }
                unsigned int v232 = HIDWORD(v408);
                if (*(void *)v233 != v204) {
                  uint64_t v233 = (char *)v407 + 8 * v408;
                }
              }
              else
              {
                unsigned int v257 = 0;
                int v258 = 1;
                while (v256 != v204)
                {
                  if (v257) {
                    BOOL v259 = 0;
                  }
                  else {
                    BOOL v259 = v256 == -2;
                  }
                  if (v259) {
                    unsigned int v257 = v233;
                  }
                  unsigned int v260 = v255 + v258++;
                  unsigned int v255 = v260 & v254;
                  uint64_t v233 = (char *)v407 + 8 * (v260 & v254);
                  uint64_t v256 = *(void *)v233;
                  if (*(void *)v233 == -1) {
                    goto LABEL_634;
                  }
                }
                unsigned int v232 = HIDWORD(v408);
              }
            }
            if (v407 == v231) {
              unsigned int v268 = v232;
            }
            else {
              unsigned int v268 = v408;
            }
            BOOL v213 = v233 == (char *)v407 + 8 * v268;
            goto LABEL_505;
          }
        }
        BOOL v213 = 0;
LABEL_505:
        if (sub_1CC92C4EC(v204, (uint64_t *)&__dst)
          && (v226 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v204 - 32)),
              (*((_DWORD *)v226 + 8) & 0xFu) - 7 <= 1))
        {
          int v227 = __dst;
          if (v402 == __dst)
          {
            unsigned int v228 = HIDWORD(v403);
            unsigned int v229 = (char *)v402 + 8 * HIDWORD(v403);
            if (HIDWORD(v403))
            {
              uint64_t v230 = 0;
              while (*(llvm::Value **)((char *)v402 + v230) != v226)
              {
                v230 += 8;
                if (8 * HIDWORD(v403) == v230) {
                  goto LABEL_536;
                }
              }
              unsigned int v229 = (char *)v402 + v230;
            }
LABEL_536:
            int v227 = v402;
          }
          else
          {
            int v235 = v403 - 1;
            unsigned int v236 = (v403 - 1) & ((v226 >> 4) ^ (v226 >> 9));
            unsigned int v229 = (char *)v402 + 8 * v236;
            v237 = *(llvm::Value **)v229;
            if (*(void *)v229 == -1)
            {
              uint64_t v238 = 0;
LABEL_570:
              if (v238) {
                unsigned int v229 = v238;
              }
              unsigned int v228 = HIDWORD(v403);
              if (*(llvm::Value **)v229 != v226) {
                unsigned int v229 = (char *)v402 + 8 * v403;
              }
            }
            else
            {
              uint64_t v238 = 0;
              int v239 = 1;
              while (v237 != v226)
              {
                if (v238) {
                  BOOL v240 = 0;
                }
                else {
                  BOOL v240 = v237 == (llvm::Value *)-2;
                }
                if (v240) {
                  uint64_t v238 = v229;
                }
                unsigned int v241 = v236 + v239++;
                unsigned int v236 = v241 & v235;
                unsigned int v229 = (char *)v402 + 8 * (v241 & v235);
                v237 = *(llvm::Value **)v229;
                if (*(void *)v229 == -1) {
                  goto LABEL_570;
                }
              }
              unsigned int v228 = HIDWORD(v403);
            }
          }
          if (v402 == v227) {
            unsigned int v242 = v228;
          }
          else {
            unsigned int v242 = v403;
          }
          if (v229 != (char *)v402 + 8 * v242) {
            goto LABEL_589;
          }
          unsigned int v243 = v406;
          if (v407 == v406)
          {
            int v244 = HIDWORD(v408);
            v245 = (char *)v407 + 8 * HIDWORD(v408);
            if (HIDWORD(v408))
            {
              uint64_t v246 = 0;
              while (*(llvm::Value **)((char *)v407 + v246) != v226)
              {
                v246 += 8;
                if (8 * HIDWORD(v408) == v246) {
                  goto LABEL_584;
                }
              }
              v245 = (char *)v407 + v246;
            }
LABEL_584:
            unsigned int v243 = v407;
          }
          else
          {
            int v247 = v408 - 1;
            unsigned int v248 = (v408 - 1) & ((v226 >> 4) ^ (v226 >> 9));
            v245 = (char *)v407 + 8 * v248;
            unsigned int v249 = *(llvm::Value **)v245;
            if (*(void *)v245 == -1)
            {
              v250 = 0;
LABEL_628:
              if (v250) {
                v245 = v250;
              }
              int v244 = HIDWORD(v408);
              if (*(llvm::Value **)v245 != v226) {
                v245 = (char *)v407 + 8 * v408;
              }
            }
            else
            {
              v250 = 0;
              int v251 = 1;
              while (v249 != v226)
              {
                if (v250) {
                  BOOL v252 = 0;
                }
                else {
                  BOOL v252 = v249 == (llvm::Value *)-2;
                }
                if (v252) {
                  v250 = v245;
                }
                unsigned int v253 = v248 + v251++;
                unsigned int v248 = v253 & v247;
                v245 = (char *)v407 + 8 * (v253 & v247);
                unsigned int v249 = *(llvm::Value **)v245;
                if (*(void *)v245 == -1) {
                  goto LABEL_628;
                }
              }
              int v244 = HIDWORD(v408);
            }
          }
          unsigned int v261 = v407 == v243 ? v244 : v408;
          if (v245 == (char *)v407 + 8 * v261) {
            int v262 = 2;
          }
          else {
LABEL_589:
          }
            int v262 = 3;
          uint64_t v263 = *((void *)v226 + 1);
          if (v263)
          {
            int v264 = v262 - 1;
            do
            {
              int v265 = v264;
              BOOL v266 = v264 == 0;
              if (!v264) {
                break;
              }
              uint64_t v263 = *(void *)(v263 + 8);
              --v264;
            }
            while (v263);
            if (v265) {
              char v267 = 1;
            }
            else {
              char v267 = v213;
            }
            if ((v267 & 1) == 0) {
              goto LABEL_598;
            }
          }
          else
          {
            BOOL v266 = 0;
          }
          if (*(void *)v207 != *(void *)v204) {
            uint64_t v207 = sub_1CC56C0C0((llvm *)0x31, v207, *(llvm::Constant **)v204, 0);
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v204, v207, (llvm::Value *)1);
          if (!v266)
          {
            llvm::Value::takeName((int32x2_t ****)v210, (llvm::Value *)v204);
            int v269 = *(_DWORD *)(v204 + 32);
            unsigned int v270 = (v269 & 0xF) - 7;
            int v271 = *(_DWORD *)(v210 + 32);
            BOOL v272 = v270 >= 2;
            if (v270 >= 2) {
              unsigned int v273 = *(_DWORD *)(v210 + 32);
            }
            else {
              unsigned int v273 = v271 & 0xFFFFFFC0;
            }
            unsigned int v274 = v273 & 0xFFFFFFF0 | v269 & 0xF;
            *(_DWORD *)(v210 + 32) = v274;
            if (!v272
              || (v271 & 0x30) != 0
              && (char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v210),
                  unsigned int v274 = *(_DWORD *)(v210 + 32),
                  (hasExternalWeakLinkage & 1) == 0))
            {
              v274 |= 0x4000u;
              *(_DWORD *)(v210 + 32) = v274;
            }
            int v275 = v274 & 0xF;
            unsigned int v276 = v274 & 0xFFFFBFFF | (((*(_DWORD *)(v204 + 32) >> 14) & 1) << 14);
            *(_DWORD *)(v210 + 32) = v276;
            int v277 = *(_DWORD *)(v204 + 32) & 0x30;
            unsigned int v278 = v276 & 0xFFFFFFCF | v277;
            *(_DWORD *)(v210 + 32) = v278;
            if ((v275 - 7) < 2
              || v277
              && (char v336 = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v210),
                  unsigned int v278 = *(_DWORD *)(v210 + 32),
                  (v336 & 1) == 0))
            {
              v278 |= 0x4000u;
              *(_DWORD *)(v210 + 32) = v278;
            }
            *(_DWORD *)(v210 + 32) = v278 & 0xFFFFFCFF | (((*(_DWORD *)(v204 + 32) >> 8) & 3) << 8);
            v279 = __dst;
            if (v402 == __dst)
            {
              unsigned int v280 = HIDWORD(v403);
              int v281 = (char *)v402 + 8 * HIDWORD(v403);
              if (HIDWORD(v403))
              {
                uint64_t v282 = 0;
                while (*(void *)((char *)v402 + v282) != v204)
                {
                  v282 += 8;
                  if (8 * HIDWORD(v403) == v282) {
                    goto LABEL_652;
                  }
                }
                int v281 = (char *)v402 + v282;
              }
LABEL_652:
              v279 = v402;
            }
            else
            {
              int v283 = v403 - 1;
              unsigned int v284 = (v403 - 1) & ((v204 >> 4) ^ (v204 >> 9));
              int v281 = (char *)v402 + 8 * v284;
              uint64_t v285 = *(void *)v281;
              if (*(void *)v281 == -1)
              {
                v286 = 0;
LABEL_681:
                if (v286) {
                  int v281 = v286;
                }
                unsigned int v280 = HIDWORD(v403);
                if (*(void *)v281 != v204) {
                  int v281 = (char *)v402 + 8 * v403;
                }
              }
              else
              {
                v286 = 0;
                int v287 = 1;
                while (v285 != v204)
                {
                  if (v286) {
                    BOOL v288 = 0;
                  }
                  else {
                    BOOL v288 = v285 == -2;
                  }
                  if (v288) {
                    v286 = v281;
                  }
                  unsigned int v289 = v284 + v287++;
                  unsigned int v284 = v289 & v283;
                  int v281 = (char *)v402 + 8 * (v289 & v283);
                  uint64_t v285 = *(void *)v281;
                  if (*(void *)v281 == -1) {
                    goto LABEL_681;
                  }
                }
                unsigned int v280 = HIDWORD(v403);
              }
            }
            unsigned int v290 = v403;
            if (v402 == v279) {
              unsigned int v291 = v280;
            }
            else {
              unsigned int v291 = v403;
            }
            if (v281 != (char *)v402 + 8 * v291)
            {
              *(void *)int v281 = -2;
              int v292 = v404;
              int v293 = ++v404;
              v294 = (char *)v402;
              if (v402 != __dst) {
                goto LABEL_667;
              }
              if (v280)
              {
                v295 = 0;
                uint64_t v296 = 8 * v280;
                int v297 = (uint64_t *)v402;
                do
                {
                  if (*v297 == v210) {
                    goto LABEL_694;
                  }
                  if (*v297 == -2) {
                    v295 = v297;
                  }
                  ++v297;
                  v296 -= 8;
                }
                while (v296);
                if (v295)
                {
                  uint64_t *v295 = v210;
                  int v404 = v292;
                  goto LABEL_694;
                }
              }
              if (v280 < v290)
              {
                HIDWORD(v403) = v280 + 1;
                *((void *)v402 + v280) = v210;
                goto LABEL_694;
              }
LABEL_667:
              if (3 * v290 <= 4 * (HIDWORD(v403) - v293))
              {
                if (v290 >= 0x40) {
                  v290 *= 2;
                }
                else {
                  unsigned int v290 = 128;
                }
              }
              else if (v290 - HIDWORD(v403) >= v290 >> 3)
              {
LABEL_669:
                unsigned int v298 = v290 - 1;
                unsigned int v299 = (v290 - 1) & ((v210 >> 4) ^ (v210 >> 9));
                uint64_t v300 = &v294[8 * v299];
                uint64_t v301 = *(void *)v300;
                if (*(void *)v300 == -1)
                {
                  v302 = 0;
LABEL_687:
                  if (v302) {
                    v306 = v302;
                  }
                  else {
                    v306 = (uint64_t *)v300;
                  }
                  if (*v306 != v210)
                  {
                    if (*v306 == -2) {
                      --v404;
                    }
                    else {
                      ++HIDWORD(v403);
                    }
                    uint64_t *v306 = v210;
                  }
                }
                else
                {
                  v302 = 0;
                  int v303 = 1;
                  while (v301 != v210)
                  {
                    if (v302) {
                      BOOL v304 = 0;
                    }
                    else {
                      BOOL v304 = v301 == -2;
                    }
                    if (v304) {
                      v302 = (uint64_t *)v300;
                    }
                    unsigned int v305 = v299 + v303++;
                    unsigned int v299 = v305 & v298;
                    uint64_t v300 = &v294[8 * (v305 & v298)];
                    uint64_t v301 = *(void *)v300;
                    if (*(void *)v300 == -1) {
                      goto LABEL_687;
                    }
                  }
                }
                goto LABEL_694;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__dst, v290);
              unsigned int v290 = v403;
              v294 = (char *)v402;
              goto LABEL_669;
            }
LABEL_694:
            v307 = v406;
            if (v407 == v406)
            {
              unint64_t v308 = HIDWORD(v408);
              v309 = (char *)v407 + 8 * HIDWORD(v408);
              if (HIDWORD(v408))
              {
                uint64_t v310 = 0;
                while (*(void *)((char *)v407 + v310) != v204)
                {
                  v310 += 8;
                  if (8 * HIDWORD(v408) == v310) {
                    goto LABEL_714;
                  }
                }
                v309 = (char *)v407 + v310;
              }
              else
              {
                unint64_t v308 = 0;
              }
LABEL_714:
              v307 = v407;
            }
            else
            {
              int v311 = v408 - 1;
              unsigned int v312 = (v408 - 1) & ((v204 >> 4) ^ (v204 >> 9));
              v309 = (char *)v407 + 8 * v312;
              uint64_t v313 = *(void *)v309;
              if (*(void *)v309 == -1)
              {
                v314 = 0;
LABEL_743:
                if (v314) {
                  v309 = v314;
                }
                unint64_t v308 = HIDWORD(v408);
                if (*(void *)v309 != v204) {
                  v309 = (char *)v407 + 8 * v408;
                }
              }
              else
              {
                v314 = 0;
                int v315 = 1;
                while (v313 != v204)
                {
                  if (v314) {
                    BOOL v316 = 0;
                  }
                  else {
                    BOOL v316 = v313 == -2;
                  }
                  if (v316) {
                    v314 = v309;
                  }
                  unsigned int v317 = v312 + v315++;
                  unsigned int v312 = v317 & v311;
                  v309 = (char *)v407 + 8 * (v317 & v311);
                  uint64_t v313 = *(void *)v309;
                  if (*(void *)v309 == -1) {
                    goto LABEL_743;
                  }
                }
                unint64_t v308 = HIDWORD(v408);
              }
            }
            unint64_t v318 = v408;
            if (v407 == v307) {
              unint64_t v319 = v308;
            }
            else {
              unint64_t v319 = v408;
            }
            if (v309 != (char *)v407 + 8 * v319)
            {
              *(void *)v309 = -2;
              int v320 = v409;
              int v321 = v409 + 1;
              LODWORD(v409) = v409 + 1;
              v322 = (char *)v407;
              if (v407 != v406) {
                goto LABEL_729;
              }
              if (v308)
              {
                v323 = 0;
                uint64_t v324 = 8 * v308;
                v325 = (uint64_t *)v407;
                do
                {
                  if (*v325 == v210) {
                    goto LABEL_605;
                  }
                  if (*v325 == -2) {
                    v323 = v325;
                  }
                  ++v325;
                  v324 -= 8;
                }
                while (v324);
                if (v323)
                {
                  uint64_t *v323 = v210;
                  LODWORD(v409) = v320;
                  goto LABEL_605;
                }
              }
              if (v308 < v318)
              {
                HIDWORD(v408) = v308 + 1;
                *((void *)v407 + v308) = v210;
                goto LABEL_605;
              }
LABEL_729:
              unsigned int v326 = v408;
              if (3 * (int)v408 <= (4 * (HIDWORD(v408) - v321)))
              {
                if (v408 >= 0x40) {
                  unsigned int v326 = 2 * v408;
                }
                else {
                  unsigned int v326 = 128;
                }
              }
              else if ((int)v408 - HIDWORD(v408) >= v408 >> 3)
              {
LABEL_731:
                unsigned int v327 = v326 - 1;
                unsigned int v328 = (v326 - 1) & ((v210 >> 4) ^ (v210 >> 9));
                v329 = &v322[8 * v328];
                uint64_t v330 = *(void *)v329;
                if (*(void *)v329 == -1)
                {
                  v331 = 0;
LABEL_749:
                  if (v331) {
                    v335 = v331;
                  }
                  else {
                    v335 = (uint64_t *)v329;
                  }
                  if (*v335 != v210)
                  {
                    if (*v335 == -2) {
                      LODWORD(v409) = v409 - 1;
                    }
                    else {
                      ++HIDWORD(v408);
                    }
                    uint64_t *v335 = v210;
                  }
                }
                else
                {
                  v331 = 0;
                  int v332 = 1;
                  while (v330 != v210)
                  {
                    if (v331) {
                      BOOL v333 = 0;
                    }
                    else {
                      BOOL v333 = v330 == -2;
                    }
                    if (v333) {
                      v331 = (uint64_t *)v329;
                    }
                    unsigned int v334 = v328 + v332++;
                    unsigned int v328 = v334 & v327;
                    v329 = &v322[8 * (v334 & v327)];
                    uint64_t v330 = *(void *)v329;
                    if (*(void *)v329 == -1) {
                      goto LABEL_749;
                    }
                  }
                }
                goto LABEL_605;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v406, v326);
              unsigned int v326 = v408;
              v322 = (char *)v407;
              goto LABEL_731;
            }
LABEL_605:
            llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList();
          }
        }
        else
        {
          if (!v213) {
            goto LABEL_598;
          }
          if (*(void *)v207 != *(void *)v204) {
            uint64_t v207 = sub_1CC56C0C0((llvm *)0x31, v207, *(llvm::Constant **)v204, 0);
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v204, v207, (llvm::Value *)1);
        }
        if (!sub_1CC92C4EC(v204, (uint64_t *)&__dst)) {
          goto LABEL_605;
        }
LABEL_462:
        char v202 = 1;
LABEL_598:
        uint64_t v201 = v203;
        if (v203 == v392) {
          goto LABEL_773;
        }
      }
    }
    char v202 = 0;
LABEL_773:
    if (v416) {
      sub_1CC92C8AC(v416, (uint64_t)&__dst);
    }
    if (v417) {
      sub_1CC92C8AC(v417, (uint64_t)&v406);
    }
    a1 = v376;
    if (v407 != v406) {
      free(v407);
    }
    if (v402 != __dst) {
      free(v402);
    }
    if ((void *)v376[4] == v12)
    {
      if (((__pa | v383 | v166) | v202)) {
        goto LABEL_812;
      }
    }
    else
    {
      char __pb = __pa | v383 | v166 | v202;
      uint64_t v378 = v399;
      v384 = (llvm::Instruction *)v398;
      v338 = (void *)v398();
      LODWORD(__dst) = 76;
      if ((*(unsigned char *)(v338[1] + 9) & 0x10) != 0 || (*(unsigned char *)(*v338 + 19) & 3) == 0) {
        goto LABEL_811;
      }
      v339 = sub_1CC92CEDC(v338, 0x4Cu);
      v341 = v339;
      size_t v342 = v340;
      v343 = (uint64_t *)v376[14];
      unint64_t v344 = *((unsigned int *)v343 + 8);
      if ((v344 & 0x80000000) == 0 && v340 > v344)
      {
        unint64_t v344 = v344 <= 1 ? 1 : v344;
        if (v340 >= v344) {
          size_t v342 = v344;
        }
      }
      uint64_t v345 = *((unsigned int *)v343 + 2);
      if (!v345) {
        goto LABEL_811;
      }
      int v346 = 0;
      if (v342)
      {
        size_t v347 = v342;
        v348 = v339;
        do
        {
          int v349 = *v348++;
          int v346 = 33 * v346 + v349;
          --v347;
        }
        while (v347);
      }
      uint64_t v350 = *v343;
      uint64_t v351 = *v343 + 8 * v345 + 8;
      int v352 = 1;
      int v353 = v346;
      while (1)
      {
        uint64_t v354 = v353 & (v345 - 1);
        v355 = *(void **)(v350 + 8 * v354);
        if (v355 != (void *)-8)
        {
          if (!v355) {
            goto LABEL_811;
          }
          if (*(_DWORD *)(v351 + 4 * v354) == v346
            && v342 == *v355
            && (!v342 || !memcmp(v341, (char *)v355 + *((unsigned int *)v343 + 5), v342)))
          {
            break;
          }
        }
        int v353 = v352 + v354;
        ++v352;
      }
      if (v354 != -1
        && (int)v354 != v345
        && (uint64_t v357 = *(void *)(*(void *)(v350 + 8 * (int)v354) + 8)) != 0
        && !*(unsigned char *)(v357 + 16)
        && (v358 = (uint64_t *)((uint64_t (*)(uint64_t, void))v384)(v378, *(void *)(*(void *)(v350 + 8 * (int)v354) + 8)), llvm::TargetLibraryInfoImpl::getLibFunc(*v358, (uint64_t ***)v357, &__dst))&& __dst == 76)
      {
        uint64_t v359 = *(void *)(v357 + 8);
        if (v359)
        {
          a1 = v376;
          unint64_t v12 = v385;
          char v360 = __pb;
          do
          {
            uint64_t v361 = *(void *)(v359 + 24);
            uint64_t v359 = *(void *)(v359 + 8);
            if (v361 && *(unsigned char *)(v361 + 16) == 84)
            {
              v362 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v361 - 32 * (*(_DWORD *)(v361 + 20) & 0x7FFFFFF)));
              BOOL v363 = v362 && *((unsigned char *)v362 + 16) == 0;
              if (v363
                && (*((llvm::Value **)v362 + 9) != (llvm::Value *)((char *)v362 + 72)
                 || (*((unsigned char *)v362 + 34) & 0x80) != 0))
              {
                uint64_t v364 = *((void *)v362 + 10);
                if (v364) {
                  uint64_t v365 = v364 - 24;
                }
                else {
                  uint64_t v365 = 0;
                }
                uint64_t v366 = v365 + 40;
                for (uint64_t jj = *(void *)(v365 + 48); ; uint64_t jj = *(void *)(jj + 8))
                {
                  if (jj == v366)
                  {
                    a1 = v376;
                    goto LABEL_839;
                  }
                  uint64_t v368 = jj ? jj - 24 : 0;
                  if (!sub_1CBF63B28(v368) && !sub_1CC27D470(v368)) {
                    break;
                  }
                }
                a1 = v376;
                if (*(unsigned char *)(v368 + 16) == 29)
                {
                  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v361, v369, v370);
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v361, NullValue, (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
              }
            }
LABEL_839:
            ;
          }
          while (v359);
        }
        else
        {
          a1 = v376;
          unint64_t v12 = v385;
          char v360 = __pb;
        }
        if (v360)
        {
LABEL_812:
          char v374 = 1;
          size_t v11 = v394;
          continue;
        }
      }
      else
      {
LABEL_811:
        a1 = v376;
        unint64_t v12 = v385;
        if (__pb) {
          goto LABEL_812;
        }
      }
    }
    break;
  }
  if (v394 != v393) {
    free(v394);
  }
  return v374 & 1;
}

void llvm::initializeGlobalOptLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDFAA8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC9237AC;
    v4[1] = &v2;
    char v3 = v4;
    std::__call_once(&qword_1EBCDFAA8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC9237AC(llvm *a1)
{
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CC923864(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDFAA0;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2628530;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDFAA8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC9237AC;
    v5[1] = &PassRegistry;
    int8x8_t v4 = v5;
    std::__call_once(&qword_1EBCDFAA8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC923914(uint64_t a1, uint64_t *a2)
{
  llvm::Constant::removeDeadConstantUsers(a1);
  int v4 = *(_DWORD *)(a1 + 32);
  if ((v4 & 0xFu) > 8 || ((1 << (v4 & 0xF)) & 0x18E) == 0)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      if (*(unsigned char *)(a1 + 16) != 3 || (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((v4 & 0x800000) != 0 || *(void *)(a1 + 72) != a1 + 72) {
        return result;
      }
    }
  }
  int v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 == 2) {
    goto LABEL_46;
  }
  uint64_t AliaseeObject = a1;
  if (v6 != 1 || (uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)a1)) != 0)
  {
    uint64_t v8 = *(void *)(AliaseeObject + 48);
    if (v8)
    {
      if ((*(_DWORD *)(a1 + 32) & 0xFu) - 7 >= 2)
      {
        uint64_t v10 = *a2;
        uint64_t v9 = a2[1];
        if (v9 == *a2)
        {
          uint64_t v11 = *((unsigned int *)a2 + 5);
          unint64_t v12 = (void *)(v9 + 8 * v11);
          if (v11)
          {
            uint64_t v13 = 0;
            while (*(void *)(v9 + v13) != v8)
            {
              v13 += 8;
              if (8 * v11 == v13) {
                goto LABEL_34;
              }
            }
            unint64_t v12 = (void *)(v9 + v13);
          }
LABEL_34:
          uint64_t v10 = a2[1];
        }
        else
        {
          uint64_t v14 = *((unsigned int *)a2 + 4);
          int v15 = v14 - 1;
          unsigned int v16 = (v14 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          unint64_t v12 = (void *)(v9 + 8 * v16);
          uint64_t v17 = *v12;
          if (*v12 == -1)
          {
            BOOL v18 = 0;
LABEL_36:
            if (v18) {
              unint64_t v12 = v18;
            }
            if (*v12 != v8)
            {
              LODWORD(v11) = *((_DWORD *)a2 + 5);
              unint64_t v12 = (void *)(v9 + 8 * v14);
              goto LABEL_41;
            }
          }
          else
          {
            BOOL v18 = 0;
            int v19 = 1;
            while (v17 != v8)
            {
              if (v18) {
                BOOL v20 = 0;
              }
              else {
                BOOL v20 = v17 == -2;
              }
              if (v20) {
                BOOL v18 = v12;
              }
              unsigned int v21 = v16 + v19++;
              unsigned int v16 = v21 & v15;
              unint64_t v12 = (void *)(v9 + 8 * (v21 & v15));
              uint64_t v17 = *v12;
              if (*v12 == -1) {
                goto LABEL_36;
              }
            }
          }
          LODWORD(v11) = *((_DWORD *)a2 + 5);
        }
LABEL_41:
        if (v9 == v10) {
          unsigned int v23 = v11;
        }
        else {
          unsigned int v23 = *((_DWORD *)a2 + 4);
        }
        if (v12 != (void *)(v9 + 8 * v23)) {
          return 0;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
LABEL_46:
    if (*(void *)(a1 + 8)) {
      return 0;
    }
    goto LABEL_57;
  }
  if (*(void *)(a1 + 72) == a1 + 72)
  {
    int v26 = *(_DWORD *)(a1 + 32);
    uint64_t v24 = *(void *)(a1 + 8);
    BOOL v25 = v24 == 0;
    if ((v26 & 0x800000) == 0 && !v24)
    {
LABEL_57:
      llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)a1);
      return 1;
    }
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 8);
    BOOL v25 = v24 == 0;
    int v26 = *(_DWORD *)(a1 + 32);
  }
  if ((v26 & 0xE) == 2 || (result = 0, unsigned int v27 = v26 & 0xF, v27 <= 8) && ((1 << v27) & 0x182) != 0)
  {
    if (!v25)
    {
      while (*(unsigned char *)(*(void *)(v24 + 24) + 16) == 4)
      {
        uint64_t v24 = *(void *)(v24 + 8);
        if (!v24) {
          goto LABEL_57;
        }
      }
      return 0;
    }
    goto LABEL_57;
  }
  return result;
}

uint64_t sub_1CC923B7C(uint64_t ***a1, uint64_t (*a2)(uint64_t, void), uint64_t a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  v843[32] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
    goto LABEL_14;
  }
  uint64_t v14 = ***a1;
  uint64_t v15 = *(void *)(v14 + 152);
  uint64_t v16 = *(unsigned int *)(v14 + 168);
  if (!v16) {
    goto LABEL_8;
  }
  LODWORD(v17) = (v16 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  BOOL v18 = (uint64_t ****)(v15 + 16 * v17);
  int v19 = *v18;
  if (*v18 != a1)
  {
    int v20 = 1;
    while (v19 != (uint64_t ***)-4096)
    {
      int v21 = v17 + v20++;
      uint64_t v17 = v21 & (v16 - 1);
      int v19 = *(uint64_t ****)(v15 + 16 * v17);
      if (v19 == a1)
      {
        BOOL v18 = (uint64_t ****)(v15 + 16 * v17);
        goto LABEL_9;
      }
    }
LABEL_8:
    BOOL v18 = (uint64_t ****)(v15 + 16 * v16);
  }
LABEL_9:
  uint64_t v22 = v18[1];
  if ((unint64_t)*v22 >= 5)
  {
    int v23 = *((_DWORD *)v22 + 4);
    int v24 = *((unsigned __int8 *)v22 + 20);
    if (v23 == 1836477548 && v24 == 46) {
      return 0;
    }
  }
LABEL_14:
  LOWORD(v801[0]) = 0;
  int v802 = 0;
  memset(&v801[1], 0, 21);
  v821 = v825;
  v822 = v825;
  uint64_t v823 = 16;
  LODWORD(v824) = 0;
  char v29 = sub_1CD16D330((uint64_t)a1, (const llvm::Constant *)v801, (uint64_t)&v821);
  if (v822 == v821)
  {
    if (v29) {
      return 0;
    }
  }
  else
  {
    free(v822);
    if (v29) {
      return 0;
    }
  }
  uint64_t v30 = 0;
  unsigned int v31 = *((_DWORD *)a1 + 8);
  if (!LOBYTE(v801[0]) && (a1[4] & 0xC0) != 0x80)
  {
    if ((a1[4] & 0xFu) - 7 >= 2) {
      int v32 = 1;
    }
    else {
      int v32 = 2;
    }
    if (v32 == v31 >> 6)
    {
      uint64_t v30 = 0;
    }
    else
    {
      unsigned int v31 = v31 & 0xFFFFFF3F | (v32 << 6);
      *((_DWORD *)a1 + 8) = v31;
      uint64_t v30 = 1;
    }
  }
  if ((v31 & 0xF) - 7 > 1) {
    return v30;
  }
  int v33 = *((unsigned __int8 *)a1 + 16);
  uint64_t v34 = v33 == 3 ? (llvm::Value *)a1 : 0;
  if (v33 != 3 || ((_BYTE)a1[10] & 1) != 0 || (*((_DWORD *)a1 + 5) & 0x7FFFFFF) == 0) {
    return v30;
  }
  __p = a4;
  uint64_t v35 = (llvm::DataLayout *)(a1[5] + 34);
  if (!LOBYTE(v801[6]))
  {
    int v26 = *(const llvm::Constant **)&v801[4];
    if (*(void *)&v801[4])
    {
      if ((a1[3][1] & 0xFE) == 0x12
        || (unsigned int v37 = *((_DWORD *)a1[3] + 2), v37 <= 0x15) && ((1 << v37) & 0x20AC7F) != 0)
      {
        if (((_BYTE)a1[10] & 2) == 0 && *((_DWORD *)*a1 + 2) <= 0xFFu)
        {
          unsigned int v38 = a1[1];
          if (v38)
          {
            int v39 = a1[1];
            do
            {
              BOOL v40 = v39[3];
              unsigned int v41 = *((unsigned __int8 *)v40 + 16);
              if (v41 <= 0x1B)
              {
                if (v41 != 5) {
                  goto LABEL_34;
                }
                while (1)
                {
                  BOOL v40 = (uint64_t *)v40[1];
                  if (!v40) {
                    break;
                  }
                  if (*(unsigned __int8 *)(v40[3] + 16) <= 0x1Bu) {
                    goto LABEL_34;
                  }
                }
              }
              int v39 = (uint64_t **)v39[1];
            }
            while (v39);
          }
          uint64_t v95 = *(void *)(*(void *)&v801[4] + 112);
          if (v95)
          {
            if ((*(unsigned char *)(v95 + 15) & 0x40) != 0)
            {
              uint64_t v793 = a5;
              v821 = &v823;
              v822 = (void *)0x400000000;
              v841 = v843;
              uint64_t v842 = 0x400000000;
              v790 = v34;
              if (v38)
              {
                while (1)
                {
                  uint64_t v96 = v38[3];
                  unsigned int v97 = *((unsigned __int8 *)v96 + 16);
                  BOOL v98 = v96 && v97 > 0x1B;
                  if (!v98) {
                    break;
                  }
                  switch(v97)
                  {
                    case '<':
                      uint64_t v107 = v822;
                      if (v822 >= (unint64_t)HIDWORD(v822)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      int v108 = &v821;
                      break;
                    case '=':
                      uint64_t v107 = v842;
                      if (v842 >= (unint64_t)HIDWORD(v842)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      int v108 = &v841;
                      break;
                    case 'M':
LABEL_129:
                      uint64_t v100 = v96[1];
                      if (v100)
                      {
                        while (1)
                        {
                          uint64_t v101 = *(void *)(v100 + 24);
                          int v102 = *(unsigned __int8 *)(v101 + 16);
                          if (v101 && v102 == 60)
                          {
                            int v103 = v35;
                            uint64_t v104 = v822;
                            if (v822 >= (unint64_t)HIDWORD(v822)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            unsigned int v105 = &v821;
                          }
                          else
                          {
                            int v106 = 0;
                            if (!v101 || v102 != 61) {
                              goto LABEL_422;
                            }
                            int v103 = v35;
                            uint64_t v104 = v842;
                            if (v842 >= (unint64_t)HIDWORD(v842)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            unsigned int v105 = &v841;
                          }
                          *((void *)*v105 + v104) = v101;
                          ++*((_DWORD *)v105 + 2);
                          uint64_t v100 = *(void *)(v100 + 8);
                          uint64_t v35 = v103;
                          if (!v100) {
                            goto LABEL_147;
                          }
                        }
                      }
                      goto LABEL_147;
                    default:
                      goto LABEL_420;
                  }
                  *((void *)*v108 + v107) = v96;
                  ++*((_DWORD *)v108 + 2);
LABEL_147:
                  unsigned int v38 = (uint64_t **)v38[1];
                  if (!v38) {
                    goto LABEL_373;
                  }
                }
                if (v96) {
                  BOOL v99 = v97 == 5;
                }
                else {
                  BOOL v99 = 0;
                }
                if (!v99 || *((_WORD *)v96 + 9) != 49)
                {
LABEL_420:
                  int v106 = 0;
                  goto LABEL_422;
                }
                goto LABEL_129;
              }
LABEL_373:
              v784 = (llvm::DominatorTree *)a6(a7);
              if (v842 * (unint64_t)v822 <= 0x64)
              {
                if (v822)
                {
                  v767 = (llvm::APInt ***)v821;
                  v761 = (llvm::Value *)((char *)v821 + 8 * v822);
                  v788 = v35;
                  uint64_t v234 = (uint64_t)v35;
                  while (1)
                  {
                    BOOL v764 = v842 != 0;
                    if (!v842) {
                      break;
                    }
                    int v235 = *v767;
                    v780 = **v767;
                    unsigned int v236 = (const llvm::Value **)v841;
                    uint64_t v237 = 8 * v842;
                    while (1)
                    {
                      uint64_t v238 = **((void **)*v236 - 8);
                      if (llvm::DominatorTree::dominates(v784, *v236, (const llvm::Instruction *)v235))
                      {
                        unint64_t v239 = (unint64_t)(sub_1CB83544C(v234, (uint64_t)v780) + 7) >> 3;
                        if (v239 <= (unint64_t)(sub_1CB83544C(v234, v238) + 7) >> 3) {
                          break;
                        }
                      }
                      ++v236;
                      v237 -= 8;
                      if (!v237) {
                        goto LABEL_419;
                      }
                    }
                    ++v767;
                    uint64_t v35 = v788;
                    int v106 = v764;
                    if (v767 == (llvm::APInt ***)v761) {
                      goto LABEL_422;
                    }
                  }
LABEL_419:
                  int v106 = 0;
                  uint64_t v35 = v788;
                }
                else
                {
                  int v106 = 1;
                }
              }
              else
              {
                int v106 = 0;
              }
LABEL_422:
              if (v841 != v843) {
                free(v841);
              }
              uint64_t v34 = v790;
              a5 = v793;
              if (v821 != &v823) {
                free(v821);
              }
              if (v106)
              {
                unsigned int v241 = a1[5];
                uint64_t v242 = *(void *)(*(void *)&v801[4] + 80);
                if (v242) {
                  uint64_t v243 = v242 - 24;
                }
                else {
                  uint64_t v243 = 0;
                }
                uint64_t v244 = *(void *)(v243 + 48);
                v245 = (llvm::Type *)a1[3];
                uint64_t v246 = operator new(0x68uLL);
                int v247 = v790;
                unsigned int v248 = (llvm::Value *)(v246 + 8);
                v246[13] = v246[13] & 0x38000000 | 1;
                *(void *)uint64_t v246 = 0;
                *((void *)v246 + 1) = 0;
                *((void *)v246 + 2) = 0;
                *((void *)v246 + 3) = v246 + 8;
                if (v244) {
                  unsigned int v249 = (llvm::Instruction *)(v244 - 24);
                }
                else {
                  unsigned int v249 = 0;
                }
                v250 = (llvm::Type *)*((unsigned int *)v241 + 69);
                if ((*((unsigned char *)v790 + 23) & 0x10) != 0)
                {
                  uint64_t v251 = ***(void ***)v790;
                  uint64_t v252 = *(void *)(v251 + 152);
                  uint64_t v253 = *(unsigned int *)(v251 + 168);
                  if (v253)
                  {
                    LODWORD(v254) = (v253 - 1) & ((v790 >> 4) ^ (v790 >> 9));
                    unsigned int v255 = (llvm::Value **)(v252 + 16 * v254);
                    uint64_t v256 = *v255;
                    if (*v255 != v790)
                    {
                      int v257 = 1;
                      do
                      {
                        int v247 = v790;
                        if (v256 == (llvm::Value *)-4096) {
                          goto LABEL_440;
                        }
                        int v258 = v254 + v257++;
                        uint64_t v254 = v258 & (v253 - 1);
                        uint64_t v256 = *(llvm::Value **)(v252 + 16 * v254);
                      }
                      while (v256 != v790);
                      unsigned int v255 = (llvm::Value **)(v252 + 16 * v254);
                    }
                  }
                  else
                  {
LABEL_440:
                    uint64_t v34 = v247;
                    unsigned int v255 = (llvm::Value **)(v252 + 16 * v253);
                  }
                  BOOL v259 = v255[1];
                  int v262 = *(void **)v259;
                  unsigned int v260 = (char *)v259 + 16;
                  unsigned int v261 = v262;
                }
                else
                {
                  unsigned int v261 = 0;
                  unsigned int v260 = &byte_1CFBCE98E;
                }
                LOWORD(v825[0]) = 261;
                v821 = v260;
                v822 = v261;
                llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v246 + 8), v245, v250, 0, (const char **)&v821, v249);
                if (*(unsigned __int8 *)(*((void *)v34 - 4) + 16) - 11 >= 2)
                {
                  uint64_t v263 = operator new(0x80uLL);
                  v263[21] = v263[21] & 0x38000000 | 2;
                  *(void *)uint64_t v263 = 0;
                  *((void *)v263 + 1) = 0;
                  *((void *)v263 + 2) = 0;
                  *((void *)v263 + 3) = v263 + 16;
                  *((void *)v263 + 4) = 0;
                  *((void *)v263 + 5) = 0;
                  *((void *)v263 + 6) = 0;
                  *((void *)v263 + 7) = v263 + 16;
                  llvm::StoreInst::StoreInst((llvm::StoreInst *)(v263 + 16), *((llvm::Type ***)v34 - 4), v248, 0, v249);
                }
                v821 = &v823;
                v822 = (void *)0x400000000;
                int v264 = a1[1];
                if (v264)
                {
                  unsigned int v265 = 0;
                  do
                  {
                    BOOL v266 = v264[3];
                    if (*((unsigned char *)v266 + 16) == 5)
                    {
                      if (v265 >= HIDWORD(v822)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v821 + v265) = v266;
                      unsigned int v265 = v822 + 1;
                      LODWORD(v822) = v822 + 1;
                    }
                    int v264 = (uint64_t **)v264[1];
                  }
                  while (v264);
                  char v267 = (uint64_t **)v821;
                  v841 = v843;
                  HIDWORD(v842) = 4;
                  if (v265)
                  {
                    char __pb = v248;
                    unsigned int v268 = (uint64_t **)((char *)v821 + 8 * v265);
                    do
                    {
                      int v269 = *v267;
                      LODWORD(v842) = 0;
                      sub_1CC8A6F48((uint64_t)&v841, (uint64_t)v841, v269[1], 0);
                      if (v842)
                      {
                        int v271 = (llvm::Instruction **)v841;
                        uint64_t v272 = 8 * v842;
                        do
                        {
                          unsigned int v273 = *v271++;
                          AsInstructiouint64_t n = (llvm::Value *)llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)v269, v273);
                          llvm::User::replaceUsesOfWith(v273, (llvm::Value *)v269, AsInstruction);
                          v272 -= 8;
                        }
                        while (v272);
                      }
                      llvm::Constant::destroyConstant((int32x2_t ****)v269, v270);
                      ++v267;
                    }
                    while (v267 != v268);
                    unsigned int v248 = __pb;
                    if (v841 != v843) {
                      free(v841);
                    }
                  }
                }
                if (v821 != &v823) {
                  free(v821);
                }
                llvm::Value::doRAUW(v34, v248, (llvm::Value *)1);
                llvm::GlobalVariable::eraseFromParent(v34);
              }
            }
          }
        }
      }
    }
  }
LABEL_34:
  if (!BYTE1(v801[0]))
  {
    if (sub_1CC928E24((uint64_t)v34)) {
      int v43 = sub_1CC929034((uint64_t)v34, (uint64_t)__p, a5);
    }
    else {
      int v43 = sub_1CC9294EC(v34, (uint64_t)v35, v42);
    }
    BOOL v44 = v43;
    if (*((void *)v34 + 1)) {
      return v30 | v44;
    }
    goto LABEL_84;
  }
  uint64_t v792 = a5;
  if (v801[1] > 1)
  {
    BOOL v44 = 0;
    goto LABEL_62;
  }
  if (v802)
  {
    int v36 = 0;
  }
  else
  {
    *((unsigned char *)a1 + 80) |= 1u;
    int v36 = 1;
  }
  BOOL v45 = sub_1CC9294EC(v34, (uint64_t)v35, v27);
  if (!*((void *)v34 + 1))
  {
LABEL_84:
    uint64_t v79 = v34;
    goto LABEL_85;
  }
  BOOL v44 = (v36 | v45) != 0;
LABEL_62:
  if ((*(_DWORD *)(**((void **)v34 - 4) + 8) & 0xFE) == 0x12) {
    goto LABEL_67;
  }
  unsigned int v46 = *(_DWORD *)(**((void **)v34 - 4) + 8);
  BOOL v98 = v46 > 0x15;
  int v47 = (1 << v46) & 0x20AC7F;
  if (!v98 && v47 != 0) {
    goto LABEL_67;
  }
  v783 = (llvm::DominatorTree *)a1[5];
  v816 = 0;
  uint64_t v817 = 0;
  unsigned int v818 = 0;
  unint64_t v773 = (unint64_t)v843;
  v779 = (llvm::DominatorTree *)((char *)v783 + 272);
  v841 = v843;
  uint64_t v842 = 0x1000000000;
  v821 = v825;
  v822 = v825;
  uint64_t v823 = 16;
  LODWORD(v824) = 0;
  v791 = v34;
  uint64_t v109 = *((void *)v34 + 1);
  if (v109)
  {
    while (1)
    {
      unsigned int v110 = (char *)v822;
      uint64_t v111 = HIDWORD(v823);
      if (v822 == v821)
      {
        if (HIDWORD(v823))
        {
          uint64_t v112 = 0;
          uint64_t v113 = 8 * HIDWORD(v823);
          uint64_t v114 = v822;
          while (*v114 != v109)
          {
            if (*v114 == -2) {
              uint64_t v112 = v114;
            }
            ++v114;
            v113 -= 8;
            if (!v113)
            {
              if (!v112) {
                goto LABEL_160;
              }
              void *v112 = v109;
              LODWORD(v824) = v824 - 1;
              goto LABEL_184;
            }
          }
          goto LABEL_186;
        }
LABEL_160:
        int v26 = (const llvm::Constant *)v823;
        if (HIDWORD(v823) < v823)
        {
          ++HIDWORD(v823);
          *((void *)v822 + v111) = v109;
          goto LABEL_184;
        }
      }
      else
      {
        int v26 = (const llvm::Constant *)v823;
      }
      if (3 * (int)v26 <= (4 * (HIDWORD(v823) - v824))) {
        break;
      }
      if ((int)v26 - HIDWORD(v823) < v26 >> 3) {
        goto LABEL_193;
      }
LABEL_165:
      int v115 = v26 - 1;
      unsigned int v116 = (v26 - 1) & ((v109 >> 4) ^ (v109 >> 9));
      int v117 = &v110[8 * v116];
      uint64_t v118 = *(void *)v117;
      if (*(void *)v117 != -1)
      {
        uint64_t v119 = 0;
        int v120 = 1;
        while (v118 != v109)
        {
          if (v119) {
            BOOL v121 = 0;
          }
          else {
            BOOL v121 = v118 == -2;
          }
          if (v121) {
            uint64_t v119 = v117;
          }
          unsigned int v122 = v116 + v120++;
          unsigned int v116 = v122 & v115;
          int v117 = &v110[8 * (v122 & v115)];
          uint64_t v118 = *(void *)v117;
          if (*(void *)v117 == -1) {
            goto LABEL_177;
          }
        }
        goto LABEL_186;
      }
      uint64_t v119 = 0;
LABEL_177:
      if (v119) {
        uint64_t v123 = v119;
      }
      else {
        uint64_t v123 = v117;
      }
      if (*(void *)v123 == v109) {
        goto LABEL_186;
      }
      if (*(void *)v123 == -2) {
        LODWORD(v824) = v824 - 1;
      }
      else {
        ++HIDWORD(v823);
      }
      *(void *)uint64_t v123 = v109;
LABEL_184:
      if (v842 >= (unint64_t)HIDWORD(v842)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v841 + v842) = v109;
      LODWORD(v842) = v842 + 1;
LABEL_186:
      uint64_t v109 = *(void *)(v109 + 8);
      if (!v109) {
        goto LABEL_195;
      }
    }
    if (v26 >= 0x40) {
      LODWORD(v26) = 2 * v26;
    }
    else {
      LODWORD(v26) = 128;
    }
LABEL_193:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v821, v26);
    int v26 = (const llvm::Constant *)v823;
    unsigned int v110 = (char *)v822;
    goto LABEL_165;
  }
LABEL_195:
  LODWORD(v763) = 0;
  int v769 = 0;
  size_t v766 = 0;
  do
  {
    int v124 = v842;
    if (!v842) {
      break;
    }
    uint64_t v125 = *((void *)v841 + v842 - 1);
    LODWORD(v842) = v842 - 1;
    uint64_t v126 = *(uint64_t **)(v125 + 24);
    unsigned int v127 = *((unsigned __int8 *)v126 + 16);
    if (v127 - 77 < 2) {
      goto LABEL_201;
    }
    if (v127 == 62) {
      goto LABEL_246;
    }
    if (v127 != 5)
    {
LABEL_252:
      BOOL v150 = v126 == 0;
      if (v126 && v127 == 60)
      {
        int v151 = (llvm::GlobalValue *)*(v126 - 4);
        if (!v151) {
          break;
        }
        goto LABEL_262;
      }
      if (v126 && v127 == 61)
      {
        int v151 = (llvm::GlobalValue *)*(v126 - 4);
        if (!v151) {
          break;
        }
        int v152 = *((_DWORD *)v126 + 5);
        uint64_t v153 = (v152 & 0x40000000) != 0 ? (uint64_t *)*(v126 - 1) : &v126[-4 * (v152 & 0x7FFFFFF)];
        if (((v125 - (void)v153) & 0x1FFFFFFFE0) == 0) {
          break;
        }
LABEL_262:
        unsigned int v154 = *(_DWORD *)(*(void *)v151 + 8);
        if ((v154 & 0xFE) == 0x12) {
          unsigned int v154 = *(_DWORD *)(**(void **)(*(void *)v151 + 16) + 8);
        }
        if (v154 < 0x100) {
          goto LABEL_273;
        }
        unsigned int v155 = v154 >> 8;
        uint64_t v156 = *((unsigned int *)v783 + 128);
        uint64_t v157 = *((void *)v783 + 63);
        if (v156)
        {
          uint64_t v157 = *((void *)v783 + 63);
          unint64_t v158 = *((unsigned int *)v783 + 128);
          do
          {
            unint64_t v159 = v158 >> 1;
            uint64_t v160 = v157 + 16 * (v158 >> 1);
            unsigned int v161 = *(_DWORD *)(v160 + 8);
            uint64_t v162 = v160 + 16;
            v158 += ~(v158 >> 1);
            if (v161 < v155) {
              uint64_t v157 = v162;
            }
            else {
              unint64_t v158 = v159;
            }
          }
          while (v158);
        }
        if (v157 == *((void *)v783 + 63) + 16 * v156 || *(_DWORD *)(v157 + 8) != v155) {
LABEL_273:
        }
          uint64_t v157 = *((void *)v783 + 63);
        LODWORD(v808) = *(_DWORD *)(v157 + 12);
        if (v808 > 0x40) {
          operator new[]();
        }
        uint64_t v807 = 0;
        int v163 = 1;
        uint64_t v164 = llvm::Value::stripAndAccumulateConstantOffsets(v151, v779, (llvm::APInt *)&v807, 1, 0, 0, v28);
        unsigned int v165 = v808;
        if (v164 == v791)
        {
          if (v808 > 0x40)
          {
            int v168 = 0;
            int64_t v169 = ((unint64_t)v808 + 63) >> 6;
            int v167 = (uint64_t *)v807;
            do
            {
              BOOL v98 = v169-- < 1;
              if (v98) {
                break;
              }
              unint64_t v170 = *(void *)(v807 + 8 * v169);
              v168 += __clz(v170);
            }
            while (!v170);
            unsigned int v171 = v808 | 0xFFFFFFC0;
            if ((v808 & 0x3F) == 0) {
              unsigned int v171 = 0;
            }
            int v166 = v168 + v171;
          }
          else
          {
            int v166 = v808 + __clz(v807) - 64;
            int v167 = &v807;
          }
          if ((v808 - v166) > 0x3F)
          {
            int v163 = 1;
            goto LABEL_344;
          }
          if (*((unsigned char *)v126 + 16) != 60) {
            uint64_t v126 = (uint64_t *)*(v126 - 8);
          }
          uint64_t v172 = *v126;
          uint64_t v173 = *v167;
          unsigned int v174 = v769;
          if (!v769)
          {
            uint64_t v177 = 0;
            goto LABEL_310;
          }
          int v175 = v769 - 1;
          unsigned int v176 = (v769 - 1) & (37 * v173);
          uint64_t v177 = (void *)(v766 + 16 * v176);
          uint64_t v178 = *v177;
          if (v173 != *v177)
          {
            uint64_t v179 = 0;
            int v180 = 1;
            while (v178 != -1)
            {
              if (v179) {
                BOOL v181 = 0;
              }
              else {
                BOOL v181 = v178 == -2;
              }
              if (v181) {
                uint64_t v179 = v177;
              }
              unsigned int v182 = v176 + v180++;
              unsigned int v176 = v182 & v175;
              uint64_t v177 = (void *)(v766 + 16 * (v182 & v175));
              uint64_t v178 = *v177;
              if (v173 == *v177) {
                goto LABEL_341;
              }
            }
            if (v179) {
              uint64_t v177 = v179;
            }
            unsigned int v174 = v769;
LABEL_310:
            if (4 * (int)v763 + 4 >= 3 * v174)
            {
              sub_1CD5E3DDC((uint64_t)&v816, 2 * v174);
              int v769 = v818;
              unsigned int v187 = v818 - 1;
              unsigned int v188 = (v818 - 1) & (37 * v173);
              size_t v766 = (size_t)v816;
              uint64_t v177 = &v816[2 * v188];
              uint64_t v189 = *v177;
              if (v173 != *v177)
              {
                v190 = 0;
                int v191 = 1;
                while (v189 != -1)
                {
                  if (v190) {
                    BOOL v192 = 0;
                  }
                  else {
                    BOOL v192 = v189 == -2;
                  }
                  if (v192) {
                    v190 = v177;
                  }
                  unsigned int v193 = v188 + v191++;
                  unsigned int v188 = v193 & v187;
                  uint64_t v177 = &v816[2 * (v193 & v187)];
                  uint64_t v189 = *v177;
                  if (v173 == *v177) {
                    goto LABEL_313;
                  }
                }
                goto LABEL_335;
              }
LABEL_313:
              uint64_t v186 = v173;
            }
            else
            {
              if (v174 + ~v763 - HIDWORD(v817) <= v174 >> 3)
              {
                sub_1CD5E3DDC((uint64_t)&v816, v769);
                int v769 = v818;
                unsigned int v183 = v818 - 1;
                unsigned int v184 = (v818 - 1) & (37 * v173);
                size_t v766 = (size_t)v816;
                uint64_t v177 = &v816[2 * v184];
                uint64_t v185 = *v177;
                if (v173 == *v177) {
                  goto LABEL_313;
                }
                v190 = 0;
                int v194 = 1;
                while (v185 != -1)
                {
                  if (v190) {
                    BOOL v195 = 0;
                  }
                  else {
                    BOOL v195 = v185 == -2;
                  }
                  if (v195) {
                    v190 = v177;
                  }
                  unsigned int v196 = v184 + v194++;
                  unsigned int v184 = v196 & v183;
                  uint64_t v177 = &v816[2 * (v196 & v183)];
                  uint64_t v185 = *v177;
                  if (v173 == *v177) {
                    goto LABEL_313;
                  }
                }
LABEL_335:
                if (v190) {
                  uint64_t v177 = v190;
                }
              }
              uint64_t v186 = *v177;
            }
            LODWORD(v763) = v817 + 1;
            LODWORD(v817) = v817 + 1;
            if (v186 != -1) {
              --HIDWORD(v817);
            }
            *uint64_t v177 = v173;
            v177[1] = v172;
            unsigned int v165 = v808;
          }
LABEL_341:
          if (v172 == v177[1]) {
            int v163 = 2;
          }
          else {
            int v163 = 1;
          }
        }
LABEL_344:
        if (v165 >= 0x41 && v807) {
          MEMORY[0x1D25D9CB0](v807, 0x1000C8000313F17);
        }
        continue;
      }
      goto LABEL_279;
    }
    int v128 = *((unsigned __int16 *)v126 + 9);
    if ((v128 - 49) >= 2)
    {
      if (v128 != 34)
      {
        BOOL v150 = 0;
LABEL_279:
        if (v127 > 0x14 || v150 || !llvm::isSafeToDestroyConstant(*(llvm **)(v125 + 24), v26)) {
          break;
        }
        goto LABEL_282;
      }
LABEL_246:
      int v144 = *((_DWORD *)v126 + 5);
      if ((v144 & 0x40000000) != 0)
      {
        uint64_t v146 = (uint64_t *)*(v126 - 1);
        uint64_t v145 = v144 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v145 = v144 & 0x7FFFFFF;
        uint64_t v146 = &v126[-4 * v145];
      }
      uint64_t v147 = v146 + 4;
      uint64_t v148 = 32 * v145 - 32;
      while (v148)
      {
        uint64_t v149 = *v147;
        v147 += 4;
        v148 -= 32;
        if (*(unsigned char *)(v149 + 16) != 16) {
          goto LABEL_252;
        }
      }
    }
LABEL_201:
    uint64_t v129 = v126[1];
    if (v129)
    {
      while (1)
      {
        uint64_t v130 = (char *)v822;
        uint64_t v131 = HIDWORD(v823);
        if (v822 == v821)
        {
          if (HIDWORD(v823))
          {
            uint64_t v132 = 0;
            uint64_t v133 = 8 * HIDWORD(v823);
            unsigned int v134 = v822;
            while (*v134 != v129)
            {
              if (*v134 == -2) {
                uint64_t v132 = v134;
              }
              ++v134;
              v133 -= 8;
              if (!v133)
              {
                if (!v132) {
                  goto LABEL_210;
                }
                *uint64_t v132 = v129;
                LODWORD(v824) = v824 - 1;
                goto LABEL_234;
              }
            }
            goto LABEL_236;
          }
LABEL_210:
          int v26 = (const llvm::Constant *)v823;
          if (HIDWORD(v823) < v823)
          {
            ++HIDWORD(v823);
            *((void *)v822 + v131) = v129;
            goto LABEL_234;
          }
        }
        else
        {
          int v26 = (const llvm::Constant *)v823;
        }
        if (3 * (int)v26 <= (4 * (HIDWORD(v823) - v824))) {
          break;
        }
        if ((int)v26 - HIDWORD(v823) < v26 >> 3) {
          goto LABEL_243;
        }
LABEL_215:
        int v135 = v26 - 1;
        unsigned int v136 = (v26 - 1) & ((v129 >> 4) ^ (v129 >> 9));
        int v137 = &v130[8 * v136];
        uint64_t v138 = *(void *)v137;
        if (*(void *)v137 != -1)
        {
          unint64_t v139 = 0;
          int v140 = 1;
          while (v138 != v129)
          {
            if (v139) {
              BOOL v141 = 0;
            }
            else {
              BOOL v141 = v138 == -2;
            }
            if (v141) {
              unint64_t v139 = v137;
            }
            unsigned int v142 = v136 + v140++;
            unsigned int v136 = v142 & v135;
            int v137 = &v130[8 * (v142 & v135)];
            uint64_t v138 = *(void *)v137;
            if (*(void *)v137 == -1) {
              goto LABEL_227;
            }
          }
          goto LABEL_236;
        }
        unint64_t v139 = 0;
LABEL_227:
        if (v139) {
          unint64_t v143 = v139;
        }
        else {
          unint64_t v143 = v137;
        }
        if (*(void *)v143 == v129) {
          goto LABEL_236;
        }
        if (*(void *)v143 == -2) {
          LODWORD(v824) = v824 - 1;
        }
        else {
          ++HIDWORD(v823);
        }
        *(void *)unint64_t v143 = v129;
LABEL_234:
        if (v842 >= (unint64_t)HIDWORD(v842)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v841 + v842) = v129;
        LODWORD(v842) = v842 + 1;
LABEL_236:
        uint64_t v129 = *(void *)(v129 + 8);
        if (!v129) {
          goto LABEL_282;
        }
      }
      if (v26 >= 0x40) {
        LODWORD(v26) = 2 * v26;
      }
      else {
        LODWORD(v26) = 128;
      }
LABEL_243:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v821, v26);
      int v26 = (const llvm::Constant *)v823;
      uint64_t v130 = (char *)v822;
      goto LABEL_215;
    }
LABEL_282:
    int v163 = 2;
  }
  while (v163 == 2);
  if (v822 != v821) {
    free(v822);
  }
  uint64_t v34 = v791;
  if (v841 != v843) {
    free(v841);
  }
  if (!v124 && v817)
  {
    if (v817 != 1) {
      goto LABEL_362;
    }
    unsigned int v197 = v816;
    if (v818)
    {
      uint64_t v198 = 16 * v818;
      while (*v197 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v197 += 2;
        v198 -= 16;
        if (!v198)
        {
          unsigned int v197 = &v816[2 * v818];
          break;
        }
      }
    }
    uint64_t v34 = v791;
    if (v197[1] != *((void *)v791 + 3))
    {
LABEL_362:
      if (v817 < 0x11 || *(unsigned char *)(**((void **)v34 - 4) + 8) == 16)
      {
        v770 = (llvm::Type **)*((void *)v34 - 4);
        BOOL v756 = v44;
        v787 = v35;
        v841 = v843;
        uint64_t v842 = 0x1000000000;
        sub_1CC92A528((uint64_t)&v841, (uint64_t)&v816);
        unint64_t v199 = 126 - 2 * __clz(v842);
        if (v842) {
          uint64_t v200 = v199;
        }
        else {
          uint64_t v200 = 0;
        }
        sub_1CC92A674((unint64_t)v841, (unint64_t *)v841 + 2 * v842, v200, 1);
        if (v842)
        {
          unint64_t v201 = 0;
          char v202 = (unint64_t *)v841;
          unint64_t v773 = (unint64_t)v841 + 16 * v842;
          while (1)
          {
            unint64_t v203 = *v202;
            if (*v202 < v201) {
              break;
            }
            uint64_t v204 = (llvm::Type *)v202[1];
            uint64_t v205 = sub_1CB83544C((uint64_t)v779, (uint64_t)v204);
            BOOL v207 = v206 == 1;
            char Alignment = llvm::DataLayout::getAlignment(v779, v204, 1);
            if (v207) {
            unint64_t v201 = (((1 << Alignment) + ((unint64_t)(v205 + 7) >> 3) - 1) & -(1 << Alignment)) + v203;
            }
            v202 += 2;
            if (v202 == (unint64_t *)v773) {
              goto LABEL_473;
            }
          }
LABEL_811:
          if (v841 != v843) {
            free(v841);
          }
          MEMORY[0x1D25D9CD0](v816, 8);
          uint64_t v35 = v787;
          uint64_t v34 = v791;
          BOOL v44 = v756;
          goto LABEL_67;
        }
        unint64_t v201 = 0;
LABEL_473:
        unsigned int v276 = (llvm::Type *)*((void *)v791 + 3);
        unint64_t v277 = (unint64_t)(sub_1CB83544C((uint64_t)v779, (uint64_t)v276) + 7) >> 3;
        BOOL v279 = v278 == 1;
        char v280 = llvm::DataLayout::getAlignment(v779, v276, 1);
        unint64_t v283 = ((1 << v280) + v277 - 1) & -(1 << v280);
        if (v279) {
        if (v201 > v283)
        }
          goto LABEL_811;
        v814[0] = 0;
        v814[1] = 0;
        int v815 = 0;
        unsigned int v284 = &v816[2 * v818];
        if (v818)
        {
          uint64_t v285 = 16 * v818;
          v286 = v816;
          do
          {
            if (*v286 < 0xFFFFFFFFFFFFFFFELL) {
              goto LABEL_519;
            }
            v286 += 2;
            v285 -= 16;
          }
          while (v285);
          v286 = &v816[2 * v818];
        }
        else
        {
          v286 = v816;
        }
LABEL_519:
        unsigned int v298 = &v816[2 * v818];
        unsigned int v299 = v770;
        if (v286 != v298)
        {
          while (2)
          {
            uint64_t v301 = (void *)*v286;
            uint64_t v300 = (llvm::Constant *)v286[1];
            LODWORD(v822) = 64;
            v821 = v301;
            v302 = llvm::ConstantFoldLoadFromConst(v299, v300, (llvm::Type *)&v821, v779, v282);
            if (v822 >= 0x41 && v821) {
              MEMORY[0x1D25D9CB0](v821, 0x1000C8000313F17);
            }
            if (!v302)
            {
              MEMORY[0x1D25D9CD0](v814[0], 8);
              goto LABEL_811;
            }
            int v303 = (void *)*v286;
            v821 = (void *)*v286;
            v822 = v302;
            if (!v815)
            {
              BOOL v304 = 0;
              goto LABEL_526;
            }
            unsigned int v308 = (v815 - 1) & (37 * v303);
            v309 = (void *)(v814[0] + 16 * v308);
            uint64_t v310 = *v309;
            if (v303 != (void *)*v309)
            {
              int v311 = 0;
              int v312 = 1;
              while (v310 != -1)
              {
                if (v311) {
                  BOOL v313 = 0;
                }
                else {
                  BOOL v313 = v310 == -2;
                }
                if (v313) {
                  int v311 = v309;
                }
                unsigned int v314 = v308 + v312++;
                unsigned int v308 = v314 & (v815 - 1);
                v309 = (void *)(v814[0] + 16 * v308);
                uint64_t v310 = *v309;
                unsigned int v299 = v770;
                if (v303 == (void *)*v309) {
                  goto LABEL_527;
                }
              }
              if (v311) {
                BOOL v304 = v311;
              }
              else {
                BOOL v304 = v309;
              }
              unsigned int v299 = v770;
LABEL_526:
              unsigned int v305 = sub_1CC92B0D4((uint64_t)v814, (uint64_t *)&v821, v304);
              *unsigned int v305 = v303;
              v305[1] = v302;
            }
LABEL_527:
            v306 = v286 + 2;
            while (v306 != v284)
            {
              unint64_t v307 = *v306;
              v306 += 2;
              if (v307 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v286 = v306 - 2;
                goto LABEL_532;
              }
            }
            v286 = v284;
LABEL_532:
            if (v286 == v298) {
              break;
            }
            continue;
          }
        }
        if ((*((_WORD *)v791 + 17) & 0x3F) != 0) {
          char v315 = (*((_WORD *)v791 + 17) & 0x3F) - 1;
        }
        else {
          char v315 = llvm::DataLayout::getAlignment(v779, *((llvm::Type **)v791 + 3), 1);
        }
        unint64_t v754 = sub_1CB83544C((uint64_t)v779, *((void *)v791 + 3));
        if (v316 == 1) {
        v812[0] = 0;
        }
        v812[1] = 0;
        int v813 = 0;
        if (v842)
        {
          uint64_t v318 = 0;
          unint64_t v319 = v841;
          uint64_t v757 = 1 << v315;
          v758 = (char *)v841 + 16 * v842;
          do
          {
            unint64_t v320 = *(void *)v319;
            size_t v768 = (size_t)v319;
            v775 = (llvm::PointerType *)*((void *)v319 + 1);
            v838 = *(void **)v319;
            int v321 = (char *)operator new(0x78uLL);
            v322 = (unint64_t *)(v321 + 32);
            *((_DWORD *)v321 + 13) = *((_DWORD *)v321 + 13) & 0x38000000 | 1;
            *(void *)int v321 = 0;
            *((void *)v321 + 1) = 0;
            *((void *)v321 + 2) = 0;
            *((void *)v321 + 3) = v321 + 32;
            uint64_t v323 = (uint64_t)a1[5];
            v762 = (llvm::Value *)(v321 + 32);
            if (v815)
            {
              unsigned int v324 = (v815 - 1) & (37 * v320);
              v325 = (void *)(v814[0] + 16 * v324);
              unsigned int v326 = (void *)*v325;
              if (v320 == *v325) {
                goto LABEL_558;
              }
              v372 = 0;
              int v373 = 1;
              while (1)
              {
                uint64_t v370 = (uint64_t)a1[5];
                if (v326 == (void *)-1) {
                  break;
                }
                if (v372) {
                  BOOL v374 = 0;
                }
                else {
                  BOOL v374 = v326 == (void *)-2;
                }
                if (v374) {
                  v372 = v325;
                }
                unsigned int v375 = v324 + v373++;
                unsigned int v324 = v375 & (v815 - 1);
                v325 = (void *)(v814[0] + 16 * v324);
                unsigned int v326 = (void *)*v325;
                v322 = (unint64_t *)(v321 + 32);
                if (v320 == *v325) {
                  goto LABEL_558;
                }
              }
              if (v372) {
                v371 = v372;
              }
              else {
                v371 = v325;
              }
            }
            else
            {
              uint64_t v370 = (uint64_t)a1[5];
              v371 = 0;
            }
            v325 = sub_1CC92B0D4((uint64_t)v814, (uint64_t *)&v838, v371);
            void *v325 = v320;
            v325[1] = 0;
            v322 = (unint64_t *)(v321 + 32);
            uint64_t v323 = v370;
LABEL_558:
            unint64_t v327 = v325[1];
            unsigned int v328 = *(uint64_t ***)v791;
            if ((*((unsigned char *)v791 + 23) & 0x10) != 0)
            {
              uint64_t v329 = **v328;
              uint64_t v330 = *(void *)(v329 + 152);
              uint64_t v331 = *(unsigned int *)(v329 + 168);
              unint64_t v332 = v763;
              if (v331)
              {
                LODWORD(v333) = (v331 - 1) & ((v791 >> 4) ^ (v791 >> 9));
                unsigned int v334 = (llvm::Value **)(v330 + 16 * v333);
                v335 = *v334;
                if (*v334 != v791)
                {
                  int v336 = 1;
                  do
                  {
                    if (v335 == (llvm::Value *)-4096) {
                      goto LABEL_565;
                    }
                    int v337 = v333 + v336++;
                    uint64_t v333 = v337 & (v331 - 1);
                    v335 = *(llvm::Value **)(v330 + 16 * v333);
                  }
                  while (v335 != v791);
                  unsigned int v334 = (llvm::Value **)(v330 + 16 * v333);
                }
              }
              else
              {
LABEL_565:
                unsigned int v334 = (llvm::Value **)(v330 + 16 * v331);
              }
              v338 = v334[1];
              v341 = *(void **)v338;
              size_t v340 = (char *)v338 + 16;
              v339 = v341;
            }
            else
            {
              v339 = 0;
              size_t v340 = &byte_1CFBCE98E;
              unint64_t v332 = v763;
            }
            LOWORD(v811[0]) = 773;
            uint64_t v807 = (uint64_t)v340;
            v808 = v339;
            uint64_t v809 = (uint64_t)".";
            v821 = &v807;
            unint64_t v763 = v332 & 0xFFFFFFFF00000000 | v318;
            uint64_t v823 = v763;
            LOWORD(v825[0]) = 2050;
            size_t v342 = llvm::GlobalVariable::GlobalVariable(v322, v323, v775, 0, 7, v327, (const char **)&v821, (uint64_t)v791, (*((_DWORD *)v791 + 8) >> 10) & 7, (llvm::Type *)(((unint64_t)*((unsigned int *)v328 + 2) >> 8) | 0x100000000), 0);
            llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)v342, v791);
            v321[112] = v321[112] & 0xFD | *((unsigned char *)v791 + 80) & 2;
            *((void *)v321 + 13) = *((void *)v791 + 9);
            v821 = (void *)v320;
            v822 = v322;
            if (!v813)
            {
              v343 = 0;
LABEL_569:
              unint64_t v344 = sub_1CC92B0D4((uint64_t)v812, (uint64_t *)&v821, v343);
              *unint64_t v344 = v320;
              v344[1] = v322;
              goto LABEL_570;
            }
            unsigned int v363 = (v813 - 1) & (37 * v320);
            uint64_t v364 = (void *)(v812[0] + 16 * v363);
            uint64_t v365 = (void *)*v364;
            if (v320 != *v364)
            {
              uint64_t v366 = 0;
              int v367 = 1;
              while (v365 != (void *)-1)
              {
                if (v366) {
                  BOOL v368 = 0;
                }
                else {
                  BOOL v368 = v365 == (void *)-2;
                }
                if (v368) {
                  uint64_t v366 = v364;
                }
                unsigned int v369 = v363 + v367++;
                unsigned int v363 = v369 & (v813 - 1);
                uint64_t v364 = (void *)(v812[0] + 16 * v363);
                uint64_t v365 = (void *)*v364;
                if (v320 == *v364) {
                  goto LABEL_570;
                }
              }
              if (v366) {
                v343 = v366;
              }
              else {
                v343 = v364;
              }
              v322 = (unint64_t *)(v321 + 32);
              goto LABEL_569;
            }
LABEL_570:
            unsigned int v345 = (63 - __clz((v320 | v757) & -(uint64_t)(v320 | v757)));
            if (v345 > llvm::DataLayout::getAlignment(v779, v775, 1)) {
              *((_DWORD *)v321 + 16) = *((_DWORD *)v321 + 16) & 0xFFC0FFFF | ((v345 << 16) + 0x10000);
            }
            unint64_t v773 = sub_1CC5CA218(v779, v775);
            if (v346 == 1) {
            v821 = &v823;
            }
            v822 = (void *)0x100000000;
            llvm::GlobalVariable::getDebugInfo((unsigned int *)v791, (uint64_t)&v821);
            if (v822)
            {
              size_t v347 = (char *)v821;
              v759 = (llvm::DIExpression *)(8 * v320);
              unint64_t v760 = v773 + 8 * v320;
              uint64_t v348 = 8 * v822;
              while (1)
              {
                uint64_t v349 = *(void *)v347;
                uint64_t v350 = (uint64_t *)(*(void *)v347 - 8 * *(unsigned int *)(*(void *)v347 + 8));
                uint64_t v351 = *v350;
                int v352 = (llvm::DIExpression *)v350[1];
                uint64_t v807 = 0;
                if (llvm::DIExpression::extractIfOffset(v352, &v807))
                {
                  if ((v807 & 0x8000000000000000) == 0)
                  {
                    uint64_t v353 = 8 * v807;
                    if (8 * v807 < v760)
                    {
                      uint64_t v354 = *(void *)(*(void *)(v351 - 8 * *(unsigned int *)(v351 + 8) + 24) + 32);
                      if (!v354 || v354 + v353 > (unint64_t)v759) {
                        break;
                      }
                    }
                  }
                }
LABEL_595:
                v347 += 8;
                v348 -= 8;
                if (!v348) {
                  goto LABEL_596;
                }
              }
              if ((llvm::DIExpression *)v353 == v759 && v354 == v773)
              {
                uint64_t v356 = *((void *)v352 + 2);
                uint64_t v357 = (void *)(v356 & 0xFFFFFFFFFFFFFFF8);
                if ((v356 & 4) != 0) {
                  uint64_t v357 = (void *)*v357;
                }
                Impl = llvm::DIExpression::getImpl(v357, 0, 0, 0, 1);
                goto LABEL_591;
              }
              if (v773 < v754)
              {
                Impl = llvm::DIExpression::createFragmentExpression(v352, v759, v773);
                if (!v359) {
                  goto LABEL_596;
                }
LABEL_591:
                int v352 = Impl;
              }
              uint64_t v360 = *(void *)(v349 + 16);
              uint64_t v361 = (void *)(v360 & 0xFFFFFFFFFFFFFFF8);
              if ((v360 & 4) != 0) {
                uint64_t v361 = (void *)*v361;
              }
              v362 = llvm::DIGlobalVariableExpression::getImpl(v361, v351, (uint64_t)v352, 0, 1);
              llvm::Value::addMetadata(v762, 0, v362);
              goto LABEL_595;
            }
LABEL_596:
            if (v821 != &v823) {
              free(v821);
            }
            ++v318;
            unint64_t v319 = (void *)(v768 + 16);
          }
          while ((char *)(v768 + 16) != v758);
        }
        v838 = &v840;
        uint64_t v839 = 0x1000000000;
        uint64_t v807 = (uint64_t)v811;
        v808 = v811;
        uint64_t v809 = 16;
        int v810 = 0;
        v821 = &v823;
        v822 = (void *)0x1000000000;
        uint64_t v376 = *((void *)v791 + 1);
        if (!v376) {
          goto LABEL_806;
        }
        while (1)
        {
          uint64_t v377 = *(void *)(v376 + 24);
          uint64_t v378 = v808;
          uint64_t v379 = HIDWORD(v809);
          if (v808 == (void *)v807)
          {
            if (HIDWORD(v809))
            {
              v380 = 0;
              uint64_t v381 = 8 * HIDWORD(v809);
              v382 = v808;
              do
              {
                if (*v382 == v377) {
                  goto LABEL_664;
                }
                if (*v382 == -2) {
                  v380 = v382;
                }
                ++v382;
                v381 -= 8;
              }
              while (v381);
              if (v380)
              {
                void *v380 = v377;
                --v810;
                goto LABEL_662;
              }
            }
            unsigned int v383 = v809;
            if (HIDWORD(v809) < v809)
            {
              ++HIDWORD(v809);
              v808[v379] = v377;
              goto LABEL_662;
            }
          }
          else
          {
            unsigned int v383 = v809;
          }
          if (3 * v383 <= 4 * (HIDWORD(v809) - v810)) {
            break;
          }
          if (v383 - HIDWORD(v809) < v383 >> 3) {
            goto LABEL_671;
          }
LABEL_643:
          unsigned int v384 = v383 - 1;
          unsigned int v385 = (v383 - 1) & ((v377 >> 4) ^ (v377 >> 9));
          v386 = &v378[v385];
          uint64_t v387 = *v386;
          if (*v386 != -1)
          {
            v388 = 0;
            int v389 = 1;
            while (v387 != v377)
            {
              if (v388) {
                BOOL v390 = 0;
              }
              else {
                BOOL v390 = v387 == -2;
              }
              if (v390) {
                v388 = v386;
              }
              unsigned int v391 = v385 + v389++;
              unsigned int v385 = v391 & v384;
              v386 = &v378[v391 & v384];
              uint64_t v387 = *v386;
              if (*v386 == -1) {
                goto LABEL_655;
              }
            }
            goto LABEL_664;
          }
          v388 = 0;
LABEL_655:
          if (v388) {
            v392 = v388;
          }
          else {
            v392 = v386;
          }
          if (*v392 == v377) {
            goto LABEL_664;
          }
          if (*v392 == -2) {
            --v810;
          }
          else {
            ++HIDWORD(v809);
          }
          void *v392 = v377;
LABEL_662:
          if (v839 >= (unint64_t)HIDWORD(v839)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v838 + v839) = v377;
          LODWORD(v839) = v839 + 1;
LABEL_664:
          uint64_t v376 = *(void *)(v376 + 8);
          if (!v376)
          {
            unsigned int v393 = v839;
            if (!v839) {
              goto LABEL_806;
            }
            while (1)
            {
              uint64_t v394 = *((void *)v838 + --v393);
              LODWORD(v839) = v393;
              unsigned int v395 = *(unsigned __int8 *)(v394 + 16);
              if (v395 - 60 > 0x12) {
                goto LABEL_776;
              }
              int v396 = 1 << (v395 - 60);
              if ((v396 & 0x60004) == 0) {
                break;
              }
LABEL_676:
              uint64_t v397 = *(void *)(v394 + 8);
              if (!v397) {
                goto LABEL_751;
              }
              do
              {
                uint64_t v398 = *(void *)(v397 + 24);
                uint64_t v399 = v808;
                uint64_t v400 = HIDWORD(v809);
                if (v808 == (void *)v807)
                {
                  if (HIDWORD(v809))
                  {
                    v401 = 0;
                    uint64_t v402 = 8 * HIDWORD(v809);
                    uint64_t v403 = v808;
                    do
                    {
                      if (*v403 == v398) {
                        goto LABEL_711;
                      }
                      if (*v403 == -2) {
                        v401 = v403;
                      }
                      ++v403;
                      v402 -= 8;
                    }
                    while (v402);
                    if (v401)
                    {
                      void *v401 = v398;
                      --v810;
                      goto LABEL_709;
                    }
                  }
                  unsigned int v404 = v809;
                  if (HIDWORD(v809) < v809)
                  {
                    ++HIDWORD(v809);
                    v808[v400] = v398;
LABEL_709:
                    if (v839 >= (unint64_t)HIDWORD(v839)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v838 + v839) = v398;
                    LODWORD(v839) = v839 + 1;
                    goto LABEL_711;
                  }
                }
                else
                {
                  unsigned int v404 = v809;
                }
                if (3 * v404 <= 4 * (HIDWORD(v809) - v810))
                {
                  if (v404 >= 0x40) {
                    v404 *= 2;
                  }
                  else {
                    unsigned int v404 = 128;
                  }
                }
                else if (v404 - HIDWORD(v809) >= v404 >> 3)
                {
                  goto LABEL_690;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v807, v404);
                unsigned int v404 = v809;
                uint64_t v399 = v808;
LABEL_690:
                unsigned int v405 = v404 - 1;
                unsigned int v406 = (v404 - 1) & ((v398 >> 4) ^ (v398 >> 9));
                v407 = &v399[v406];
                uint64_t v408 = *v407;
                if (*v407 == -1)
                {
                  uint64_t v409 = 0;
LABEL_702:
                  if (v409) {
                    uint64_t v413 = v409;
                  }
                  else {
                    uint64_t v413 = v407;
                  }
                  if (*v413 != v398)
                  {
                    if (*v413 == -2) {
                      --v810;
                    }
                    else {
                      ++HIDWORD(v809);
                    }
                    *uint64_t v413 = v398;
                    goto LABEL_709;
                  }
                }
                else
                {
                  uint64_t v409 = 0;
                  int v410 = 1;
                  while (v408 != v398)
                  {
                    if (v409) {
                      BOOL v411 = 0;
                    }
                    else {
                      BOOL v411 = v408 == -2;
                    }
                    if (v411) {
                      uint64_t v409 = v407;
                    }
                    unsigned int v412 = v406 + v410++;
                    unsigned int v406 = v412 & v405;
                    v407 = &v399[v412 & v405];
                    uint64_t v408 = *v407;
                    if (*v407 == -1) {
                      goto LABEL_702;
                    }
                  }
                }
LABEL_711:
                uint64_t v397 = *(void *)(v397 + 8);
              }
              while (v397);
              unsigned int v395 = *(unsigned __int8 *)(v394 + 16);
LABEL_751:
              if (v395 >= 0x1C)
              {
                uint64_t v804 = 6;
                v805 = 0;
                v806 = (int32x2_t ****)v394;
                if (v394 != -8192 && v394 != -4096 && v394) {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v804);
                }
                v438 = (char *)v821;
                if (v822 >= HIDWORD(v822))
                {
                  unint64_t v459 = v822 + 1;
                  if (v821 <= &v804 && (char *)v821 + 24 * v822 > (char *)&v804)
                  {
                    int64_t v465 = (char *)&v804 - (unsigned char *)v821;
                    sub_1CC261F80((unsigned int *)&v821, v459);
                    v438 = (char *)v821;
                    v439 = (uint64_t *)((char *)v821 + v465);
                  }
                  else
                  {
                    sub_1CC261F80((unsigned int *)&v821, v459);
                    v439 = &v804;
                    v438 = (char *)v821;
                  }
                }
                else
                {
                  v439 = &v804;
                }
                int v440 = (int)v822;
                v441 = (unint64_t *)&v438[24 * v822];
                unint64_t *v441 = 6;
                v441[1] = 0;
                uint64_t v442 = v439[2];
                v441[2] = v442;
                if (v442 != -8192 && v442 != -4096)
                {
                  if (v442)
                  {
                    unint64_t v443 = *v439 & 0xFFFFFFFFFFFFFFF8;
                    v441[1] = *(void *)v443;
                    *(void *)unint64_t v443 = v441;
                    unint64_t *v441 = v443 | 6;
                    v444 = (unint64_t *)v441[1];
                    if (v444) {
                      unint64_t *v444 = *v444 & 7 | (unint64_t)(v441 + 1);
                    }
                  }
                }
                LODWORD(v822) = v440 + 1;
                if (v806 != (int32x2_t ****)-8192 && v806 != (int32x2_t ****)-4096 && v806)
                {
                  unint64_t v445 = v804 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v804 & 0xFFFFFFFFFFFFFFF8) = v805;
                  if (v805)
                  {
                    unint64_t *v805 = *v805 & 7 | v445;
                  }
                  else
                  {
                    v446 = v806;
                    v447 = ***v806;
                    unint64_t v448 = (unint64_t)v447[303];
                    if (v448 <= v445)
                    {
                      uint64_t v449 = v447[305].u32[0];
                      if (v448 + 16 * v449 > v445)
                      {
                        unsigned int v450 = v449 - 1;
                        LODWORD(v451) = v450 & ((v806 >> 4) ^ (v806 >> 9));
                        v452 = (int32x2_t *****)(v448 + 16 * v451);
                        v453 = *v452;
                        if (v806 != *v452)
                        {
                          int v454 = 1;
                          do
                          {
                            if (v453 == (int32x2_t ****)-4096) {
                              goto LABEL_775;
                            }
                            int v455 = v451 + v454++;
                            uint64_t v451 = v455 & v450;
                            v453 = *(int32x2_t *****)(v448 + 16 * v451);
                          }
                          while (v806 != v453);
                          v452 = (int32x2_t *****)(v448 + 16 * v451);
                        }
                        *v452 = (int32x2_t ****)-8192;
                        v447[304] = vadd_s32(v447[304], (int32x2_t)0x1FFFFFFFFLL);
                        v446 = v806;
LABEL_775:
                        *((unsigned char *)v446 + 17) &= ~1u;
                      }
                    }
                  }
                }
              }
LABEL_784:
              unsigned int v393 = v839;
LABEL_785:
              if (!v393)
              {
LABEL_806:
                v820 = 0;
                llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v821, 0, 0, (uint64_t)v819);
                if (v820 == v819)
                {
                  (*(void (**)(void *))(v819[0] + 32))(v819);
                }
                else if (v820)
                {
                  (*(void (**)(void))(*v820 + 40))();
                }
                llvm::Constant::removeDeadConstantUsers((uint64_t)v791);
                llvm::GlobalVariable::eraseFromParent(v791);
              }
            }
            if ((v396 & 3) != 0)
            {
              v415 = (uint64_t *)(v394 - 32);
              uint64_t v414 = *(llvm::GlobalValue **)(v394 - 32);
              if (!v414) {
                goto LABEL_784;
              }
              unsigned int v416 = *(_DWORD *)(*(void *)v414 + 8);
              if ((v416 & 0xFE) == 0x12) {
                unsigned int v416 = *(_DWORD *)(**(void **)(*(void *)v414 + 16) + 8);
              }
              if (v416 < 0x100) {
                goto LABEL_733;
              }
              unsigned int v417 = v416 >> 8;
              uint64_t v418 = *((unsigned int *)v783 + 128);
              uint64_t v419 = *((void *)v783 + 63);
              if (v418)
              {
                uint64_t v419 = *((void *)v783 + 63);
                unint64_t v420 = *((unsigned int *)v783 + 128);
                do
                {
                  unint64_t v421 = v420 >> 1;
                  uint64_t v422 = v419 + 16 * (v420 >> 1);
                  unsigned int v423 = *(_DWORD *)(v422 + 8);
                  uint64_t v424 = v422 + 16;
                  v420 += ~(v420 >> 1);
                  if (v423 < v417) {
                    uint64_t v419 = v424;
                  }
                  else {
                    unint64_t v420 = v421;
                  }
                }
                while (v420);
              }
              if (v419 == *((void *)v783 + 63) + 16 * v418 || *(_DWORD *)(v419 + 8) != v417) {
LABEL_733:
              }
                uint64_t v419 = *((void *)v783 + 63);
              LODWORD(v805) = *(_DWORD *)(v419 + 12);
              if (v805 > 0x40) {
                operator new[]();
              }
              uint64_t v804 = 0;
              llvm::Value::stripAndAccumulateConstantOffsets(v414, v779, (llvm::APInt *)&v804, 1, 0, 0, v317);
              v425 = &v804;
              if (v805 >= 0x41) {
                v425 = (uint64_t *)v804;
              }
              uint64_t v426 = *v425;
              uint64_t v803 = *v425;
              if (v813)
              {
                unsigned int v427 = (v813 - 1) & (37 * v426);
                v428 = (void *)(v812[0] + 16 * v427);
                uint64_t v429 = *v428;
                if (v426 == *v428)
                {
LABEL_739:
                  uint64_t v430 = v428[1];
                  v431 = (llvm::Type **)v394;
                  if (*(unsigned char *)(v394 + 16) != 60) {
                    v431 = *(llvm::Type ***)(v394 - 64);
                  }
                  unsigned __int8 v432 = llvm::DataLayout::getAlignment(v779, *v431, 0);
                  unint64_t v773 = v773 & 0xFFFFFFFFFFFF0000 | v432 | 0x100;
                  unsigned __int8 v433 = llvm::getOrEnforceKnownAlignment(v430, v432 | 0x100u, (unsigned __int8 *)v779, (const llvm::DataLayout *)v394, 0, 0);
                  if (*(void *)(v394 - 32))
                  {
                    **(void **)(v394 - 16) = *(void *)(v394 - 24);
                    uint64_t v434 = *(void *)(v394 - 24);
                    if (v434) {
                      *(void *)(v434 + 16) = *(void *)(v394 - 16);
                    }
                  }
                  uint64_t *v415 = v430;
                  if (v430)
                  {
                    uint64_t v437 = *(void *)(v430 + 8);
                    v436 = (uint64_t **)(v430 + 8);
                    uint64_t v435 = v437;
                    *(void *)(v394 - 24) = v437;
                    if (v437) {
                      *(void *)(v435 + 16) = v394 - 24;
                    }
                    *(void *)(v394 - 16) = v436;
                    *v436 = v415;
                  }
                  *(_WORD *)(v394 + 18) = *(_WORD *)(v394 + 18) & 0xFF81 | (2 * v433);
                  if (v805 >= 0x41 && v804) {
                    MEMORY[0x1D25D9CB0](v804, 0x1000C8000313F17);
                  }
                  goto LABEL_784;
                }
                v461 = 0;
                int v462 = 1;
                while (v429 != -1)
                {
                  if (v461) {
                    BOOL v463 = 0;
                  }
                  else {
                    BOOL v463 = v429 == -2;
                  }
                  if (v463) {
                    v461 = v428;
                  }
                  unsigned int v464 = v427 + v462++;
                  unsigned int v427 = v464 & (v813 - 1);
                  v428 = (void *)(v812[0] + 16 * v427);
                  uint64_t v429 = *v428;
                  if (v426 == *v428) {
                    goto LABEL_739;
                  }
                }
                if (v461) {
                  v460 = v461;
                }
                else {
                  v460 = v428;
                }
              }
              else
              {
                v460 = 0;
              }
              v428 = sub_1CC92B0D4((uint64_t)v812, &v803, v460);
              void *v428 = v426;
              v428[1] = 0;
              goto LABEL_739;
            }
LABEL_776:
            if (v395 != 5) {
              goto LABEL_785;
            }
            unsigned int v456 = *(unsigned __int16 *)(v394 + 18);
            BOOL v98 = v456 > 0x32;
            uint64_t v457 = (1 << v456) & 0x6000400000000;
            if (v98 || v457 == 0) {
              goto LABEL_784;
            }
            goto LABEL_676;
          }
        }
        if (v383 >= 0x40) {
          v383 *= 2;
        }
        else {
          unsigned int v383 = 128;
        }
LABEL_671:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v807, v383);
        unsigned int v383 = v809;
        uint64_t v378 = v808;
        goto LABEL_643;
      }
    }
  }
  MEMORY[0x1D25D9CD0](v816, 8);
LABEL_67:
  if (v801[1] != 2) {
    return v30 | v44;
  }
  uint64_t v49 = *(void *)&v801[2];
  if (!*(void *)&v801[2]) {
    return v30 | v44;
  }
  v789 = v34;
  unint64_t v50 = *(void *)(*(void *)&v801[2] - 64);
  if (!v50) {
    return v30 | v44;
  }
  unsigned int v51 = *(unsigned __int8 *)(v50 + 16);
  if (v51 >= 0x15) {
    int v52 = 0;
  }
  else {
    int v52 = *(llvm::DominatorTree **)(*(void *)&v801[2] - 64);
  }
  v782 = v52;
  uint64_t v53 = v792;
  if (v51 <= 0x14)
  {
    unsigned int v54 = *(unsigned __int8 *)(v50 + 16);
    v821 = v825;
    v822 = v825;
    uint64_t v823 = 4;
    LODWORD(v824) = 0;
    BOOL v55 = sub_1CC565AD0(v50, (uint64_t)&v821);
    if (v822 == v821)
    {
      if (v55) {
        return v30 | v44;
      }
    }
    else
    {
      free(v822);
      if (v55) {
        return v30 | v44;
      }
    }
    uint64_t v49 = *(void *)&v801[2];
    unsigned int v51 = v54;
  }
  uint64_t v56 = (void *)a2(a3, *(void *)(*(void *)(v49 + 40) + 56));
  uint64_t v57 = v789;
  int v58 = (*(uint64_t (**)(void, void))(*(void *)*v56 + 144))(*v56, *(_DWORD *)(*(void *)v789 + 8) >> 8);
  v786 = v35;
  if (v51 <= 0x14 && *(unsigned __int8 *)(*((void *)v789 - 4) + 16) - 11 <= 1)
  {
    unint64_t v59 = *(llvm::Type **)v50;
    unint64_t v60 = (unint64_t)(sub_1CB83544C((uint64_t)v35, *(void *)v50) + 7) >> 3;
    int v777 = v58;
    BOOL v62 = v61 == 1;
    char v63 = llvm::DataLayout::getAlignment(v35, v59, 1);
    v772 = (llvm::PointerType *)(((1 << v63) + v60 - 1) & -(1 << v63));
    BOOL v64 = (llvm::Type *)*((void *)v789 + 3);
    uint64_t v65 = sub_1CB83544C((uint64_t)v35, (uint64_t)v64);
    int v67 = v62 ^ (v66 == 1);
    LODWORD(v60) = v51;
    unint64_t v68 = (unint64_t)(v65 + 7) >> 3;
    char v69 = llvm::DataLayout::getAlignment(v35, v64, 1);
    unint64_t v70 = (1 << v69) + v68;
    unsigned int v51 = v60;
    uint64_t v53 = v792;
    int v71 = (v772 == (llvm::PointerType *)((v70 - 1) & -(1 << v69))) & ~v67;
    int v58 = v777;
    if ((v71 & v777) == 1)
    {
      if (*(void *)v50 != *((void *)v789 + 3))
      {
        unsigned int v72 = (char *)operator new(0x78uLL);
        *((_DWORD *)v72 + 13) = *((_DWORD *)v72 + 13) & 0x38000000 | 1;
        *(void *)unsigned int v72 = 0;
        *((void *)v72 + 1) = 0;
        *((void *)v72 + 2) = 0;
        *((void *)v72 + 3) = v72 + 32;
        uint64_t v73 = (uint64_t)a1[5];
        uint64_t v74 = *(llvm::PointerType **)v50;
        char v75 = (_BYTE)a1[10] & 1;
        unsigned int v76 = *((_DWORD *)v789 + 8);
        LOWORD(v825[0]) = 257;
        BOOL v77 = llvm::GlobalVariable::GlobalVariable((unint64_t *)v72 + 4, v73, v74, v75, v76 & 0xF, v50, (const char **)&v821, (uint64_t)v789, (v76 >> 10) & 7, (llvm::Type *)(((unint64_t)*(unsigned int *)(*(void *)v789 + 8) >> 8) | 0x100000000), 0);
        llvm::Value::takeName((int32x2_t ****)v77, v789);
        llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)(v72 + 32), v789);
        v72[112] = v72[112] & 0xFD | *((unsigned char *)v789 + 80) & 2;
        *((void *)v72 + 13) = *((void *)v789 + 9);
        unsigned int v78 = (llvm::Value *)(v72 + 32);
        if (*((void *)v72 + 4) != *(void *)v789) {
          unsigned int v78 = sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)(v72 + 32), *(llvm::Constant **)v789, 0);
        }
        llvm::Value::doRAUW(v789, v78, (llvm::Value *)1);
        llvm::GlobalVariable::eraseFromParent(v789);
      }
      llvm::GlobalVariable::setInitializer((uint64_t)v789, (llvm::Constant *)v50);
      sub_1CC9294EC((llvm *)a1, (uint64_t)v35, v240);
      if (!a1[1])
      {
        uint64_t v79 = (llvm::GlobalVariable *)a1;
        goto LABEL_85;
      }
LABEL_86:
      BOOL v44 = 1;
      return v30 | v44;
    }
  }
  v838 = __p;
  uint64_t v839 = v53;
  unint64_t v81 = llvm::Value::stripPointerCasts((llvm::Value *)v50);
  uint64_t v82 = *((void *)v789 - 4);
  if (*(unsigned char *)(*(void *)v82 + 8) != 15) {
    goto LABEL_378;
  }
  int v83 = *(unsigned __int8 *)(v82 + 16);
  if (v83 == 16)
  {
    uint64_t v84 = *(unsigned int *)(v82 + 32);
    if (v84 >= 0x41)
    {
      int v486 = 0;
      int64_t v487 = (unint64_t)(v84 + 63) >> 6;
      do
      {
        BOOL v98 = v487-- < 1;
        if (v98) {
          break;
        }
        unint64_t v488 = *(void *)(*(void *)(v82 + 24) + 8 * v487);
        v486 += __clz(v488);
      }
      while (!v488);
      int v489 = v84 | 0xFFFFFFC0;
      if ((v84 & 0x3F) == 0) {
        int v489 = 0;
      }
      uint64_t v57 = v789;
      if (v486 + v489 != v84) {
        goto LABEL_378;
      }
    }
    else if (*(void *)(v82 + 24))
    {
      goto LABEL_378;
    }
  }
  else if (v83 == 17)
  {
    if ((sub_1CB844168(v82, 0.0) & 1) == 0) {
      goto LABEL_378;
    }
  }
  else if ((v83 - 18) >= 3 && v83 != 13)
  {
    goto LABEL_378;
  }
  if (*(unsigned char *)(*(void *)v81 + 8) != 15) {
    goto LABEL_378;
  }
  uint64_t v85 = **((void **)v57 - 4);
  unsigned int v86 = *(_DWORD *)(v85 + 8);
  if ((v86 & 0xFE) == 0x12) {
    unsigned int v86 = *(_DWORD *)(**(void **)(v85 + 16) + 8);
  }
  if (v86 > 0xFF) {
    goto LABEL_378;
  }
  int v778 = v58;
  unsigned int __pa = v51;
  BOOL v755 = v44;
  if (*((unsigned __int8 *)v81 + 16) <= 0x14u)
  {
    if (v85 != *(void *)v81) {
      unint64_t v81 = sub_1CC56C0C0((llvm *)0x31, v81, (llvm::Constant *)v85, 0);
    }
    unsigned int v87 = v838;
    uint64_t v88 = v839;
    uint64_t v89 = *((void *)v789 + 1);
    if (v89)
    {
      char v90 = 0;
      char v91 = 1;
      do
      {
        while (1)
        {
          uint64_t v92 = *(void *)(v89 + 24);
          uint64_t v89 = *(void *)(v89 + 8);
          int v93 = *(unsigned __int8 *)(v92 + 16);
          if (!v92 || v93 != 60) {
            break;
          }
          char v94 = sub_1CC92B24C(v92, v81);
          if (!*(void *)(v92 + 8)) {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          char v91 = 0;
          v90 |= v94;
          if (!v89) {
            goto LABEL_470;
          }
        }
        v91 &= v93 == 61;
      }
      while (v89);
      if ((v91 & 1) == 0)
      {
LABEL_470:
        uint64_t v57 = v789;
        BOOL v44 = v755;
        unsigned int v51 = __pa;
        int v58 = v778;
        if ((v90 & 1) == 0) {
          goto LABEL_378;
        }
        goto LABEL_86;
      }
    }
    else
    {
      char v90 = 0;
    }
    if (sub_1CC928E24((uint64_t)v789))
    {
      v90 |= sub_1CC929034((uint64_t)v789, (uint64_t)v87, v88);
    }
    else
    {
      sub_1CC9294EC(v789, (uint64_t)v786, v275);
      char v90 = 1;
    }
    if (!*((void *)v789 + 1))
    {
      uint64_t v79 = v789;
LABEL_85:
      llvm::GlobalVariable::eraseFromParent(v79);
    }
    goto LABEL_470;
  }
  uint64_t v57 = v789;
  if (!llvm::isAllocationFn((uint64_t)v81, (uint64_t (*)(uint64_t, unint64_t))sub_1CD6665B4, (uint64_t)&v838)|| *((unsigned char *)v81 + 16) != 84)
  {
    goto LABEL_378;
  }
  int v287 = (uint64_t *)((uint64_t (*)(uint64_t, void))v838)(v839, *(void *)(*((void *)v81 + 5) + 56));
  int v288 = byte_1EBD04470 ? 43 : 47;
  v794 = v287;
  sub_1CC095244((uint64_t)v81, v288, v287, &v821);
  if (!(_BYTE)v824) {
    goto LABEL_378;
  }
  InitialValueOfAllocatiouint64_t n = llvm::getInitialValueOfAllocation((uint64_t)v81, v794, (llvm::UndefValue *)(****(void ****)(*((void *)v81 + 5) + 56) + 1912));
  if (!InitialValueOfAllocation) {
    goto LABEL_378;
  }
  v819[0] = 0;
  if (!llvm::getObjectSize(v81, v819, (uint64_t)v786, (uint64_t)v794, 0, 0, v289)) {
    goto LABEL_1090;
  }
  v771 = (llvm::Type *)v819[0];
  if (v819[0] > 0x7FFuLL) {
    goto LABEL_1090;
  }
  v841 = v843;
  HIDWORD(v842) = 4;
  v843[0] = v789;
  unsigned int v290 = 1;
  while (1)
  {
    uint64_t v291 = *((void *)v841 + --v290);
    LODWORD(v842) = v290;
    uint64_t v292 = *(void *)(v291 + 8);
    if (v292) {
      break;
    }
LABEL_516:
    if (!v290)
    {
      int v297 = 1;
      goto LABEL_1015;
    }
  }
  while (1)
  {
    uint64_t v293 = *(void *)(v292 + 24);
    int v294 = *(unsigned __int8 *)(v293 + 16);
    if (v293)
    {
      if (v294 == 60) {
        break;
      }
    }
    if (v293 && v294 == 61)
    {
      if (*(void *)(v293 - 32) != v291) {
        goto LABEL_1014;
      }
    }
    else
    {
      if (v293) {
        BOOL v296 = v294 == 5;
      }
      else {
        BOOL v296 = 0;
      }
      if (!v296 || llvm::Value::stripPointerCasts(*(llvm::Value **)(v292 + 24)) != v789) {
        goto LABEL_1014;
      }
      if (v842 >= (unint64_t)HIDWORD(v842)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v841 + v842) = v293;
      LODWORD(v842) = v842 + 1;
    }
LABEL_513:
    uint64_t v292 = *(void *)(v292 + 8);
    if (!v292)
    {
      unsigned int v290 = v842;
      goto LABEL_516;
    }
  }
  v821 = v825;
  v822 = v825;
  uint64_t v823 = 8;
  LODWORD(v824) = 0;
  char v295 = sub_1CC92B6E0(v293, (uint64_t)&v821);
  if (v822 != v821) {
    free(v822);
  }
  if (v295) {
    goto LABEL_513;
  }
LABEL_1014:
  int v297 = 0;
LABEL_1015:
  if (v841 != v843) {
    free(v841);
  }
  if (!v297) {
    goto LABEL_1090;
  }
  v821 = v825;
  v822 = v825;
  uint64_t v823 = 4;
  LODWORD(v824) = 0;
  v841 = v843;
  HIDWORD(v842) = 4;
  v843[0] = v81;
  unsigned int v592 = 1;
  while (2)
  {
    uint64_t v593 = *((void *)v841 + v592 - 1);
    LODWORD(v842) = v592 - 1;
    v594 = (char *)v822;
    uint64_t v595 = HIDWORD(v823);
    if (v822 == v821)
    {
      if (HIDWORD(v823))
      {
        v596 = 0;
        uint64_t v597 = 8 * HIDWORD(v823);
        v598 = v822;
        while (*v598 != v593)
        {
          if (*v598 == -2) {
            v596 = v598;
          }
          ++v598;
          v597 -= 8;
          if (!v597)
          {
            if (!v596) {
              goto LABEL_1027;
            }
            void *v596 = v593;
            LODWORD(v824) = v824 - 1;
            goto LABEL_1051;
          }
        }
        goto LABEL_1069;
      }
LABEL_1027:
      unsigned int v599 = v823;
      if (HIDWORD(v823) < v823)
      {
        ++HIDWORD(v823);
        *((void *)v822 + v595) = v593;
        goto LABEL_1051;
      }
    }
    else
    {
      unsigned int v599 = v823;
    }
    if (3 * v599 <= 4 * (HIDWORD(v823) - (int)v824))
    {
      if (v599 >= 0x40) {
        v599 *= 2;
      }
      else {
        unsigned int v599 = 128;
      }
    }
    else if (v599 - HIDWORD(v823) >= v599 >> 3)
    {
      goto LABEL_1032;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v821, v599);
    unsigned int v599 = v823;
    v594 = (char *)v822;
LABEL_1032:
    unsigned int v600 = v599 - 1;
    unsigned int v601 = (v599 - 1) & ((v593 >> 4) ^ (v593 >> 9));
    v602 = &v594[8 * v601];
    uint64_t v603 = *(void *)v602;
    if (*(void *)v602 != -1)
    {
      v604 = 0;
      int v605 = 1;
      while (v603 != v593)
      {
        if (v604) {
          BOOL v606 = 0;
        }
        else {
          BOOL v606 = v603 == -2;
        }
        if (v606) {
          v604 = v602;
        }
        unsigned int v607 = v601 + v605++;
        unsigned int v601 = v607 & v600;
        v602 = &v594[8 * (v607 & v600)];
        uint64_t v603 = *(void *)v602;
        if (*(void *)v602 == -1) {
          goto LABEL_1044;
        }
      }
      goto LABEL_1069;
    }
    v604 = 0;
LABEL_1044:
    if (v604) {
      v608 = v604;
    }
    else {
      v608 = v602;
    }
    if (*(void *)v608 == v593) {
      goto LABEL_1069;
    }
    if (*(void *)v608 == -2) {
      LODWORD(v824) = v824 - 1;
    }
    else {
      ++HIDWORD(v823);
    }
    *(void *)v608 = v593;
LABEL_1051:
    uint64_t v609 = *(void *)(v593 + 8);
    if (!v609)
    {
LABEL_1069:
      unsigned int v592 = v842;
      if (!v842)
      {
        int v613 = 1;
        goto LABEL_1078;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    uint64_t v610 = *(void *)(v609 + 24);
    unsigned int v611 = *(unsigned __int8 *)(v610 + 16);
    if (v611 == 60) {
      goto LABEL_1066;
    }
    if (v611 >= 0x1C && v611 - 81 < 2) {
      goto LABEL_1066;
    }
    if (v611 != 77 && v611 != 62) {
      break;
    }
    if (v842 >= (unint64_t)HIDWORD(v842)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v841 + v842) = v610;
    LODWORD(v842) = v842 + 1;
LABEL_1066:
    uint64_t v609 = *(void *)(v609 + 8);
    if (!v609) {
      goto LABEL_1069;
    }
  }
  if (v611 == 61
    && (*(void *)(v610 - 64) != v593 || llvm::Value::stripPointerCasts(*(llvm::Value **)(v610 - 32)) == v789))
  {
    goto LABEL_1066;
  }
  int v613 = 0;
LABEL_1078:
  if (v841 != v843) {
    free(v841);
  }
  if (v822 != v821) {
    free(v822);
  }
  if (v613)
  {
    v614 = llvm::ArrayType::get((llvm::ArrayType *)(***(void ***)v789 + 1912), v771);
    v615 = (char *)operator new(0x78uLL);
    *((_DWORD *)v615 + 13) = *((_DWORD *)v615 + 13) & 0x38000000 | 1;
    *(void *)v615 = 0;
    *((void *)v615 + 1) = 0;
    *((void *)v615 + 2) = 0;
    *((void *)v615 + 3) = v615 + 32;
    v785 = (unint64_t *)(v615 + 32);
    uint64_t v616 = (uint64_t)a1[5];
    v618 = llvm::UndefValue::get(v614, v617);
    if ((*((unsigned char *)v789 + 23) & 0x10) != 0)
    {
      uint64_t v619 = ***(void ***)v789;
      uint64_t v620 = *(void *)(v619 + 152);
      uint64_t v621 = *(unsigned int *)(v619 + 168);
      if (v621)
      {
        LODWORD(v622) = (v621 - 1) & ((v789 >> 4) ^ (v789 >> 9));
        v623 = (llvm::Value **)(v620 + 16 * v622);
        v624 = *v623;
        if (*v623 != v789)
        {
          int v625 = 1;
          do
          {
            if (v624 == (llvm::Value *)-4096) {
              goto LABEL_1091;
            }
            int v626 = v622 + v625++;
            uint64_t v622 = v626 & (v621 - 1);
            v624 = *(llvm::Value **)(v620 + 16 * v622);
          }
          while (v624 != v789);
          v623 = (llvm::Value **)(v620 + 16 * v622);
        }
      }
      else
      {
LABEL_1091:
        v623 = (llvm::Value **)(v620 + 16 * v621);
      }
      v627 = v623[1];
      v630 = *(void **)v627;
      v628 = (char *)v627 + 16;
      v629 = v630;
    }
    else
    {
      v629 = 0;
      v628 = &byte_1CFBCE98E;
    }
    LOWORD(v825[0]) = 773;
    v821 = v628;
    v822 = v629;
    uint64_t v823 = (uint64_t)".body";
    llvm::GlobalVariable::GlobalVariable(v785, v616, v614, 0, 7, (unint64_t)v618, (const char **)&v821, 0, (*((_DWORD *)v789 + 8) >> 10) & 7, 0, 0);
    if (*((unsigned __int8 *)InitialValueOfAllocation + 16) - 11 >= 2)
    {
      uint64_t v631 = 0;
      uint64_t v632 = *((void *)v81 + 4);
      if (v632) {
        BOOL v633 = v632 == *((void *)v81 + 5) + 40;
      }
      else {
        BOOL v633 = 1;
      }
      if (v633) {
        uint64_t v634 = 0;
      }
      else {
        uint64_t v634 = v632 - 24;
      }
      v635 = **(llvm::APInt ***)v634;
      v821 = &v823;
      v822 = (void *)0x200000000;
      v827 = v635;
      uint64_t v828 = (uint64_t)&v836;
      v829 = &v837;
      uint64_t v830 = 0;
      int v831 = 0;
      __int16 v832 = 512;
      char v833 = 7;
      long long v826 = 0uLL;
      uint64_t v835 = 0;
      uint64_t v834 = 0;
      v836 = &unk_1F2616E88;
      v837 = &unk_1F2617008;
      *(void *)&long long v826 = *(void *)(v634 + 40);
      *((void *)&v826 + 1) = v634 + 24;
      v636 = *(unsigned __int8 **)(v634 + 48);
      uint64_t v807 = (uint64_t)v636;
      if (v636)
      {
        llvm::MetadataTracking::track((uint64_t)&v807, v636, 2);
        uint64_t v631 = v807;
      }
      sub_1CB8461A4((uint64_t)&v821, 0, v631);
      if (v807)
      {
        int v746 = *(unsigned __int8 *)v807;
        if ((v746 - 4) > 0x1E)
        {
          if ((v746 - 3) >= 0xFFFFFFFE) {
            uint64_t v753 = v807;
          }
          else {
            uint64_t v753 = 0;
          }
          if ((v746 - 3) < 0xFFFFFFFE)
          {
            if (v746 == 3) {
              *(void *)(v807 + 8) = 0;
            }
            goto LABEL_1103;
          }
          unint64_t v748 = v753 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v807 + 1) & 0x7F) != 2 && !*(_DWORD *)(v807 + 12)) {
            goto LABEL_1103;
          }
          uint64_t v747 = *(void *)(v807 + 16);
          if ((v747 & 4) == 0) {
            goto LABEL_1103;
          }
          unint64_t v748 = v747 & 0xFFFFFFFFFFFFFFF8;
          if (!v748) {
            goto LABEL_1103;
          }
        }
        v841 = &v807;
        sub_1CC5FA668(v748 + 16, &v841);
      }
LABEL_1103:
      v638 = *(llvm::ConstantInt **)(*(void *)v827 + 1984);
      unsigned int v639 = *(_DWORD *)(*(void *)v827 + 1992);
      LODWORD(v842) = v639 >> 8;
      if (v639 >> 8 > 0x40) {
        operator new[]();
      }
      if (v639 <= 0xFF) {
        unint64_t v640 = 0;
      }
      else {
        unint64_t v640 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v639) + 63);
      }
      v841 = (void *)(v640 & (unint64_t)v771);
      v641 = llvm::ConstantInt::get(v638, (llvm::LLVMContext *)&v841, v637);
      if (v842 >= 0x41 && v841) {
        MEMORY[0x1D25D9CB0](v841, 0x1000C8000313F17);
      }
      llvm::IRBuilderBase::CreateMemSet((uint64_t)&v821, (llvm::Value *)v785, (uint64_t)InitialValueOfAllocation, v641, 0, 0, 0, 0, 0);
      if (v821 != &v823) {
        free(v821);
      }
    }
    uint64_t v642 = *((void *)v81 + 1);
    if (v642)
    {
      v643 = 0;
      v644 = (uint64_t *)(v615 + 40);
      do
      {
        v645 = *(llvm::ValueAsMetadata **)(v642 + 24);
        if (v645 && *((unsigned char *)v645 + 16) == 77)
        {
          if (*(void *)v645 == *v785)
          {
            llvm::Value::doRAUW(v645, (llvm::Value *)v785, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          if (*((void *)v645 - 4))
          {
            **((void **)v645 - 2) = *((void *)v645 - 3);
            uint64_t v646 = *((void *)v645 - 3);
            if (v646) {
              *(void *)(v646 + 16) = *((void *)v645 - 2);
            }
          }
          *((void *)v645 - 4) = v785;
          uint64_t v647 = *v644;
          *((void *)v645 - 3) = *v644;
          if (v647) {
            *(void *)(v647 + 16) = (char *)v645 - 24;
          }
          *((void *)v645 - 2) = v644;
          uint64_t *v644 = (uint64_t)v645 - 32;
        }
        else
        {
          if (!v643)
          {
            v648 = operator new(0x60uLL);
            v643 = (llvm::Value *)(v648 + 8);
            v648[13] = v648[13] & 0x38000000 | 1;
            *(void *)v648 = 0;
            *((void *)v648 + 1) = 0;
            *((void *)v648 + 2) = 0;
            *((void *)v648 + 3) = v648 + 8;
            v649 = *(llvm::Type **)v81;
            v821 = "newgv";
            LOWORD(v825[0]) = 259;
            llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v648 + 8), (llvm::Value *)v785, v649, (const char **)&v821, v81);
          }
          llvm::User::replaceUsesOfWith(v645, v81, v643);
        }
        uint64_t v642 = *((void *)v81 + 1);
      }
      while (v642);
    }
    uint64_t v807 = (uint64_t)v811;
    v808 = v811;
    int v810 = 0;
    uint64_t v809 = 0x100000001;
    v811[0] = v785;
    v650 = (char *)operator new(0x78uLL);
    v652 = (unint64_t *)(v650 + 32);
    *((_DWORD *)v650 + 13) = *((_DWORD *)v650 + 13) & 0x38000000 | 1;
    *((void *)v650 + 3) = v650 + 32;
    v765 = (unint64_t **)(v650 + 24);
    *((void *)v650 + 1) = 0;
    *((void *)v650 + 2) = 0;
    *(void *)v650 = 0;
    __pd = v650;
    v653 = **(uint64_t ***)v789;
    uint64_t v654 = *v653;
    v655 = (llvm::PointerType *)(*v653 + 1888);
    v656 = *(void **)(*v653 + 1568);
    if (!v656)
    {
      v751 = *(llvm::ConstantInt **)(v654 + 1888);
      unsigned int v752 = *(_DWORD *)(v654 + 1896);
      LODWORD(v822) = v752 >> 8;
      if (v752 >> 8 > 0x40) {
        operator new[]();
      }
      v821 = 0;
      v656 = llvm::ConstantInt::get(v751, (llvm::LLVMContext *)&v821, v651);
      if (v822 >= 0x41 && v821) {
        MEMORY[0x1D25D9CB0](v821, 0x1000C8000313F17);
      }
      *(void *)(v654 + 1568) = v656;
    }
    if ((*((unsigned char *)v789 + 23) & 0x10) != 0)
    {
      uint64_t v657 = ***(void ***)v789;
      uint64_t v658 = *(void *)(v657 + 152);
      uint64_t v659 = *(unsigned int *)(v657 + 168);
      if (v659)
      {
        LODWORD(v660) = (v659 - 1) & ((v789 >> 4) ^ (v789 >> 9));
        v661 = (llvm::Value **)(v658 + 16 * v660);
        v662 = *v661;
        if (*v661 != v789)
        {
          int v663 = 1;
          do
          {
            if (v662 == (llvm::Value *)-4096) {
              goto LABEL_1134;
            }
            int v664 = v660 + v663++;
            uint64_t v660 = v664 & (v659 - 1);
            v662 = *(llvm::Value **)(v658 + 16 * v660);
          }
          while (v662 != v789);
          v661 = (llvm::Value **)(v658 + 16 * v660);
        }
      }
      else
      {
LABEL_1134:
        v661 = (llvm::Value **)(v658 + 16 * v659);
      }
      v665 = v661[1];
      v668 = *(void **)v665;
      v666 = (char *)v665 + 16;
      v667 = v668;
    }
    else
    {
      v667 = 0;
      v666 = &byte_1CFBCE98E;
    }
    LOWORD(v825[0]) = 773;
    v821 = v666;
    v822 = v667;
    uint64_t v823 = (uint64_t)".init";
    llvm::GlobalVariable::GlobalVariable(v652, v655, 0, 7, (unint64_t)v656, (const char **)&v821, (*((_DWORD *)v789 + 8) >> 10) & 7, 0, 0);
    v841 = v843;
    uint64_t v842 = 0x400000000;
    v821 = &v823;
    HIDWORD(v822) = 4;
    uint64_t v823 = (uint64_t)v789;
    unsigned int v669 = 1;
    do
    {
      uint64_t v670 = *((void *)v821 + --v669);
      LODWORD(v822) = v669;
      uint64_t v671 = *(void *)(v670 + 8);
      if (v671)
      {
        do
        {
          uint64_t v672 = *(void *)(v671 + 24);
          if (v672) {
            BOOL v673 = *(unsigned char *)(v672 + 16) == 5;
          }
          else {
            BOOL v673 = 0;
          }
          if (v673)
          {
            uint64_t v674 = v822;
            if (v822 >= (unint64_t)HIDWORD(v822)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v675 = &v821;
          }
          else
          {
            uint64_t v674 = v842;
            if (v842 >= (unint64_t)HIDWORD(v842)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v675 = &v841;
          }
          *((void *)*v675 + v674) = v672;
          ++*((_DWORD *)v675 + 2);
          uint64_t v671 = *(void *)(v671 + 8);
        }
        while (v671);
        unsigned int v669 = v822;
      }
    }
    while (v669);
    if (v821 != &v823) {
      free(v821);
    }
    if (v842)
    {
      uint64_t v676 = *(void *)v841;
      if (*(void *)v841 && *(unsigned char *)(v676 + 16) == 61)
      {
        v677 = operator new(0x80uLL);
        v678 = (llvm::Value *)(v677 + 16);
        v677[21] = v677[21] & 0x38000000 | 2;
        *(void *)v677 = 0;
        *((void *)v677 + 1) = 0;
        *((void *)v677 + 2) = 0;
        *((void *)v677 + 3) = v677 + 16;
        *((void *)v677 + 4) = 0;
        *((void *)v677 + 5) = 0;
        *((void *)v677 + 6) = 0;
        *((void *)v677 + 7) = v677 + 16;
        Bool = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v789, (llvm::LLVMContext *)(*(unsigned char *)(*(void *)(v676 - 64) + 16) != 19), v679);
        llvm::StoreInst::StoreInst(v678, (uint64_t)Bool, (uint64_t)v652, 0, 0, (*(_WORD *)(v676 + 18) >> 7) & 7, *(unsigned char *)(v676 + 60), v676);
LABEL_1237:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      while (2)
      {
        uint64_t v728 = *(void *)(v676 + 8);
        if (!v728) {
          goto LABEL_1237;
        }
        uint64_t v681 = *(void *)(v728 + 24);
        if (v681 && *(unsigned char *)(v681 + 16) == 81)
        {
          v682 = (char *)operator new(0x60uLL);
          Not = (llvm::Constant **)(v682 + 32);
          *((_DWORD *)v682 + 13) = *((_DWORD *)v682 + 13) & 0x38000000 | 1;
          *(void *)v682 = 0;
          *((void *)v682 + 1) = 0;
          *((void *)v682 + 2) = 0;
          *((void *)v682 + 3) = v682 + 32;
          if ((__pd[55] & 0x10) != 0)
          {
            uint64_t v684 = **(void **)*v652;
            uint64_t v685 = *(void *)(v684 + 152);
            uint64_t v686 = *(unsigned int *)(v684 + 168);
            if (v686)
            {
              LODWORD(v687) = (v686 - 1) & ((v652 >> 4) ^ (v652 >> 9));
              v688 = (unint64_t **)(v685 + 16 * v687);
              v689 = *v688;
              if (*v688 != v652)
              {
                int v690 = 1;
                do
                {
                  if (v689 == (unint64_t *)-4096) {
                    goto LABEL_1192;
                  }
                  int v691 = v687 + v690++;
                  uint64_t v687 = v691 & (v686 - 1);
                  v689 = *(unint64_t **)(v685 + 16 * v687);
                }
                while (v689 != v652);
                v688 = (unint64_t **)(v685 + 16 * v687);
              }
            }
            else
            {
LABEL_1192:
              v688 = (unint64_t **)(v685 + 16 * v686);
            }
            v707 = v688[1];
            v710 = (void *)*v707;
            v709 = (char *)(v707 + 2);
            v708 = v710;
          }
          else
          {
            v708 = 0;
            v709 = &byte_1CFBCE98E;
          }
          uint64_t v711 = *((void *)__pd + 7);
          LOWORD(v825[0]) = 773;
          v821 = v709;
          v822 = v708;
          uint64_t v823 = (uint64_t)".val";
          llvm::LoadInst::LoadInst((llvm::Value *)(v682 + 32), v711, (uint64_t)v652, (const char **)&v821, 0, 0, (*(_WORD *)(v676 + 18) >> 7) & 7, *(unsigned char *)(v676 + 60), v676);
          switch(*(_WORD *)(v681 + 18) & 0x3F)
          {
            case '!':
            case '""':
              break;
            case '#':
              v718 = **(uint64_t ***)v789;
              uint64_t v719 = *v718;
              Not = *(llvm::Constant ***)(*v718 + 1560);
              if (!Not)
              {
                v725 = *(llvm::ConstantInt **)(v719 + 1888);
                unsigned int v726 = *(_DWORD *)(v719 + 1896);
                LODWORD(v822) = v726 >> 8;
                if (v726 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v726 <= 0xFF) {
                  char v727 = 0;
                }
                else {
                  char v727 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v726) + 63);
                }
                v821 = (void *)(v727 & 1);
                Not = (llvm::Constant **)llvm::ConstantInt::get(v725, (llvm::LLVMContext *)&v821, v712);
                if (v822 >= 0x41 && v821) {
                  MEMORY[0x1D25D9CB0](v821, 0x1000C8000313F17);
                }
                *(void *)(v719 + 1560) = Not;
              }
              break;
            case '$':
              v714 = **(uint64_t ***)v789;
              uint64_t v715 = *v714;
              Not = *(llvm::Constant ***)(*v714 + 1568);
              if (!Not)
              {
                v716 = *(llvm::ConstantInt **)(v715 + 1888);
                unsigned int v717 = *(_DWORD *)(v715 + 1896);
                LODWORD(v822) = v717 >> 8;
                if (v717 >> 8 > 0x40) {
                  operator new[]();
                }
                v821 = 0;
                Not = (llvm::Constant **)llvm::ConstantInt::get(v716, (llvm::LLVMContext *)&v821, v712);
                if (v822 >= 0x41 && v821) {
                  MEMORY[0x1D25D9CB0](v821, 0x1000C8000313F17);
                }
                *(void *)(v715 + 1568) = Not;
              }
              break;
            default:
              v821 = "notinit";
              LOWORD(v825[0]) = 259;
              Not = (llvm::Constant **)llvm::BinaryOperator::CreateNot(Not, (llvm::Value *)&v821, (const llvm::Twine *)v681, v713);
              break;
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v681, (llvm::Value *)Not, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        v692 = (llvm::detail::IEEEFloat *)v785;
        if (*v785 != *(void *)v676) {
          v692 = sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v785, *(llvm::Constant **)v676, 0);
        }
        v693 = v808;
        uint64_t v694 = HIDWORD(v809);
        if (v808 == (void *)v807)
        {
          if (HIDWORD(v809))
          {
            v695 = 0;
            uint64_t v696 = 8 * HIDWORD(v809);
            v697 = (llvm::detail::IEEEFloat **)v808;
            do
            {
              if (*v697 == v692) {
                goto LABEL_1210;
              }
              if (*v697 == (llvm::detail::IEEEFloat *)-2) {
                v695 = v697;
              }
              ++v697;
              v696 -= 8;
            }
            while (v696);
            if (v695)
            {
              *v695 = v692;
              --v810;
LABEL_1210:
              if (*(void *)v728)
              {
                **(void **)(v728 + 16) = *(void *)(v728 + 8);
                uint64_t v721 = *(void *)(v728 + 8);
                if (v721) {
                  *(void *)(v721 + 16) = *(void *)(v728 + 16);
                }
              }
              *(void *)uint64_t v728 = v692;
              if (v692)
              {
                uint64_t v724 = *((void *)v692 + 1);
                v723 = (void *)((char *)v692 + 8);
                uint64_t v722 = v724;
                *(void *)(v728 + 8) = v724;
                if (v724) {
                  *(void *)(v722 + 16) = v728 + 8;
                }
                *(void *)(v728 + 16) = v723;
                void *v723 = v728;
              }
              continue;
            }
          }
          unsigned int v698 = v809;
          if (HIDWORD(v809) < v809)
          {
            ++HIDWORD(v809);
            v808[v694] = v692;
            goto LABEL_1210;
          }
        }
        else
        {
          unsigned int v698 = v809;
        }
        break;
      }
      if (3 * v698 <= 4 * (HIDWORD(v809) - v810))
      {
        if (v698 >= 0x40) {
          v698 *= 2;
        }
        else {
          unsigned int v698 = 128;
        }
      }
      else if (v698 - HIDWORD(v809) >= v698 >> 3)
      {
        goto LABEL_1181;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v807, v698);
      unsigned int v698 = v809;
      v693 = v808;
LABEL_1181:
      unsigned int v699 = v698 - 1;
      unsigned int v700 = (v698 - 1) & ((v692 >> 4) ^ (v692 >> 9));
      v701 = (llvm::detail::IEEEFloat **)&v693[v700];
      v702 = *v701;
      if (*v701 == (llvm::detail::IEEEFloat *)-1)
      {
        v703 = 0;
LABEL_1203:
        if (v703) {
          v720 = v703;
        }
        else {
          v720 = v701;
        }
        if (*v720 != v692)
        {
          if (*v720 == (llvm::detail::IEEEFloat *)-2) {
            --v810;
          }
          else {
            ++HIDWORD(v809);
          }
          *v720 = v692;
        }
      }
      else
      {
        v703 = 0;
        int v704 = 1;
        while (v702 != v692)
        {
          if (v703) {
            BOOL v705 = 0;
          }
          else {
            BOOL v705 = v702 == (llvm::detail::IEEEFloat *)-2;
          }
          if (v705) {
            v703 = v701;
          }
          unsigned int v706 = v700 + v704++;
          unsigned int v700 = v706 & v699;
          v701 = (llvm::detail::IEEEFloat **)&v693[v706 & v699];
          v702 = *v701;
          if (*v701 == (llvm::detail::IEEEFloat *)-1) {
            goto LABEL_1203;
          }
        }
      }
      goto LABEL_1210;
    }
    if (*((void *)__pd + 5)) {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int v729 = *((_DWORD *)__pd + 13);
    if ((v729 & 0x40000000) != 0)
    {
      v731 = *v765;
      uint64_t v730 = v729 & 0x7FFFFFF;
      if ((*((_DWORD *)__pd + 13) & 0x7FFFFFF) != 0) {
        goto LABEL_1242;
      }
    }
    else
    {
      uint64_t v730 = v729 & 0x7FFFFFF;
      v731 = &v652[-4 * v730];
      if ((*((_DWORD *)__pd + 13) & 0x7FFFFFF) != 0)
      {
LABEL_1242:
        uint64_t v732 = 32 * v730;
        v733 = (void **)(v731 + 2);
        do
        {
          if (*(v733 - 2))
          {
            void **v733 = *(v733 - 1);
            uint64_t v734 = (uint64_t)*(v733 - 1);
            if (v734) {
              *(void *)(v734 + 16) = *v733;
            }
          }
          *(v733 - 2) = 0;
          v733 += 4;
          v732 -= 32;
        }
        while (v732);
        int v729 = *((_DWORD *)__pd + 13);
      }
    }
    if ((v729 & 0x20000000) != 0)
    {
      v735 = (int32x2_t *)(***((void ***)__pd + 4) + 2480);
      v821 = v652;
      sub_1CC6035CC(v735, &v821);
      *((_DWORD *)__pd + 13) &= ~0x20000000u;
    }
    uint64_t v736 = *((void *)__pd + 10);
    if (v736) {
      llvm::Comdat::removeUser(v736, (uint64_t)v652);
    }
    *((void *)__pd + 10) = 0;
    llvm::Constant::removeDeadConstantUsers((uint64_t)v652);
    llvm::Value::~Value((llvm::Value *)v652, v737);
    int v738 = *((_DWORD *)__pd + 13);
    unsigned int v739 = v738 & 0xF8000000 | 1;
    *((_DWORD *)__pd + 13) = v739;
    if ((v738 & 0x40000000) != 0)
    {
      v749 = *v765;
      if (**v765)
      {
        *(void *)v749[2] = v749[1];
        unint64_t v750 = v749[1];
        if (v750) {
          *(void *)(v750 + 16) = v749[2];
        }
      }
      operator delete(v749);
      v741 = (char *)v765;
    }
    else
    {
      if (*(void *)__pd)
      {
        **((void **)__pd + 2) = *((void *)__pd + 1);
        uint64_t v740 = *((void *)__pd + 1);
        if (v740) {
          *(void *)(v740 + 16) = *((void *)__pd + 2);
        }
      }
      if ((v739 & 0x80000000) != 0) {
        v741 = &__pd[-*((void *)__pd - 1) - 8];
      }
      else {
        v741 = __pd;
      }
    }
    operator delete(v741);
    llvm::GlobalVariable::eraseFromParent(v789);
  }
LABEL_1090:
  uint64_t v57 = v789;
  BOOL v44 = v755;
  int v58 = v778;
LABEL_378:
  if (v51 <= 0x14 && !v802)
  {
    int v210 = *(unsigned __int8 *)(*((void *)v57 - 4) + 16) - 13 < 0xFFFFFFFE ? 1 : v58;
    if (v210 == 1)
    {
      uint64_t v211 = *((void *)v57 + 3);
      if (v211 != ***(void ***)v57 + 1888)
      {
        unsigned int v212 = *(_DWORD *)(v211 + 8);
        BOOL v213 = (*(_DWORD *)(v211 + 8) & 0xFE) != 0x12 && v212 >= 7;
        if (v213 && v212 != 15)
        {
          uint64_t v215 = *((void *)v57 + 1);
          if (v215)
          {
            uint64_t v57 = v789;
            while (1)
            {
              uint64_t v216 = *(void *)(v215 + 24);
              int v217 = *(unsigned __int8 *)(v216 + 16);
              if ((v217 & 0xFE) != 0x3C) {
                break;
              }
              if (v217 != 60) {
                uint64_t v216 = *(void *)(v216 - 64);
              }
              if (*(void *)v216 != v211) {
                break;
              }
              uint64_t v215 = *(void *)(v215 + 8);
              if (!v215) {
                goto LABEL_399;
              }
            }
            return v30 | v44;
          }
LABEL_399:
          unsigned int v219 = (char *)operator new(0x78uLL);
          uint64_t v220 = (unint64_t *)(v219 + 32);
          *((_DWORD *)v219 + 13) = *((_DWORD *)v219 + 13) & 0x38000000 | 1;
          *(void *)unsigned int v219 = 0;
          *((void *)v219 + 1) = 0;
          *((void *)v219 + 2) = 0;
          *((void *)v219 + 3) = v219 + 32;
          v221 = *(llvm::Constant **)v57;
          int v222 = **(uint64_t ***)v57;
          uint64_t v223 = *v222;
          unsigned int v224 = (llvm::PointerType *)(*v222 + 1888);
          unsigned int v225 = *(void **)(*v222 + 1568);
          if (!v225)
          {
            v484 = *(llvm::ConstantInt **)(v223 + 1888);
            unsigned int v485 = *(_DWORD *)(v223 + 1896);
            LODWORD(v822) = v485 >> 8;
            if (v485 >> 8 > 0x40) {
              operator new[]();
            }
            v821 = 0;
            unsigned int v225 = llvm::ConstantInt::get(v484, (llvm::LLVMContext *)&v821, v218);
            if (v822 >= 0x41 && v821) {
              MEMORY[0x1D25D9CB0](v821, 0x1000C8000313F17);
            }
            *(void *)(v223 + 1568) = v225;
            v221 = *(llvm::Constant **)v789;
          }
          if ((*((unsigned char *)v789 + 23) & 0x10) != 0)
          {
            uint64_t v226 = **(void **)v221;
            uint64_t v227 = *(void *)(v226 + 152);
            uint64_t v228 = *(unsigned int *)(v226 + 168);
            if (v228)
            {
              LODWORD(v229) = (v228 - 1) & ((v789 >> 4) ^ (v789 >> 9));
              uint64_t v230 = (llvm::Value **)(v227 + 16 * v229);
              uint64_t v231 = *v230;
              if (*v230 != v789)
              {
                int v232 = 1;
                do
                {
                  if (v231 == (llvm::Value *)-4096) {
                    goto LABEL_814;
                  }
                  int v233 = v229 + v232++;
                  uint64_t v229 = v233 & (v228 - 1);
                  uint64_t v231 = *(llvm::Value **)(v227 + 16 * v229);
                }
                while (v231 != v789);
                uint64_t v230 = (llvm::Value **)(v227 + 16 * v229);
              }
            }
            else
            {
LABEL_814:
              uint64_t v230 = (llvm::Value **)(v227 + 16 * v228);
            }
            v466 = v230[1];
            v469 = *(void **)v466;
            v467 = (char *)v466 + 16;
            v468 = v469;
          }
          else
          {
            v468 = 0;
            v467 = &byte_1CFBCE98E;
          }
          LOWORD(v825[0]) = 773;
          v821 = v467;
          v822 = v468;
          uint64_t v823 = (uint64_t)".b";
          v470 = llvm::GlobalVariable::GlobalVariable(v220, v224, 0, 7, (unint64_t)v225, (const char **)&v821, (*((_DWORD *)v789 + 8) >> 10) & 7, (llvm::Type *)(*((_DWORD *)v221 + 2) >> 8), 0);
          llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)v470, v789);
          v219[112] = v219[112] & 0xFD | *((unsigned char *)v789 + 80) & 2;
          *((void *)v219 + 13) = *((void *)v789 + 9);
          v471 = a1[5];
          *((void *)v219 + 9) = v471;
          if ((v219[55] & 0x10) != 0)
          {
            v472 = (llvm::ValueSymbolTable *)v471[14];
            if (v472) {
              llvm::ValueSymbolTable::reinsertValue(v472, (llvm::Value *)v220);
            }
          }
          uint64_t v473 = *((void *)v789 + 7);
          *((void *)v219 + 11) = v473;
          *((void *)v219 + 12) = (char *)v789 + 56;
          *(void *)(v473 + 8) = v219 + 88;
          *((void *)v789 + 7) = v219 + 88;
          __pc = (void *)*((void *)v789 - 4);
          v841 = v843;
          uint64_t v842 = 0x100000000;
          llvm::GlobalVariable::getDebugInfo((unsigned int *)v789, (uint64_t)&v841);
          BOOL v795 = 0;
          if (!v782 || *((unsigned char *)v782 + 16) != 16) {
            goto LABEL_870;
          }
          v475 = (unint64_t *)((char *)v782 + 24);
          uint64_t v476 = *((unsigned int *)v782 + 8);
          if (v476 > 0x40)
          {
            int v478 = 0;
            int64_t v479 = (unint64_t)(v476 + 63) >> 6;
            do
            {
              BOOL v98 = v479-- < 1;
              if (v98) {
                break;
              }
              unint64_t v480 = *(void *)(*v475 + 8 * v479);
              v478 += __clz(v480);
            }
            while (!v480);
            int v481 = v476 | 0xFFFFFFC0;
            if ((v476 & 0x3F) == 0) {
              int v481 = 0;
            }
            int v477 = v478 + v481;
          }
          else
          {
            int v477 = v476 + __clz(*v475) - 64;
          }
          if ((v476 - v477) > 0x40)
          {
            BOOL v795 = 0;
            goto LABEL_870;
          }
          unsigned int v482 = *((unsigned __int8 *)__pc + 16);
          if (__pc && v482 == 16)
          {
            uint64_t v483 = *((unsigned int *)__pc + 8);
            if (v483 >= 0x41)
            {
              int v742 = 0;
              int64_t v743 = (unint64_t)(v483 + 63) >> 6;
              do
              {
                BOOL v98 = v743-- < 1;
                if (v98) {
                  break;
                }
                unint64_t v744 = *(void *)(__pc[3] + 8 * v743);
                v742 += __clz(v744);
              }
              while (!v744);
              BOOL v795 = 0;
              int v745 = v483 | 0xFFFFFFC0;
              if ((v483 & 0x3F) == 0) {
                int v745 = 0;
              }
              if (v742 + v745 == v483) {
                goto LABEL_854;
              }
            }
            else
            {
              if (__pc[3]) {
                goto LABEL_834;
              }
LABEL_854:
              if (v476 > 0x40)
              {
                int v491 = 0;
                int64_t v492 = ((unint64_t)v476 + 63) >> 6;
                do
                {
                  BOOL v98 = v492-- < 1;
                  if (v98) {
                    break;
                  }
                  unint64_t v493 = *(void *)(*v475 + 8 * v492);
                  v491 += __clz(v493);
                }
                while (!v493);
                int v494 = v476 | 0xFFFFFFC0;
                if ((v476 & 0x3F) == 0) {
                  int v494 = 0;
                }
                BOOL v490 = v491 + v494 == v476 - 1;
              }
              else
              {
                BOOL v490 = *v475 == 1;
              }
              BOOL v495 = v490;
              BOOL v795 = v495;
            }
          }
          else if (__pc && v482 == 17)
          {
            if (sub_1CB844168((uint64_t)__pc, 0.0))
            {
              LODWORD(v476) = *((_DWORD *)v782 + 8);
              goto LABEL_854;
            }
LABEL_834:
            BOOL v795 = 0;
          }
          else
          {
            BOOL v795 = 0;
            if (v482 <= 0x14 && ((1 << v482) & 0x1C2000) != 0) {
              goto LABEL_854;
            }
          }
          uint64_t v496 = *((void *)v789 - 4);
          if (v496 && *(unsigned char *)(v496 + 16) == 16)
          {
            v501 = (llvm::APInt **)(v496 + 24);
            uint64_t v502 = *(unsigned int *)(v496 + 32);
            if (v502 >= 0x41)
            {
              int v503 = 0;
              int64_t v504 = (unint64_t)(v502 + 63) >> 6;
              do
              {
                BOOL v98 = v504-- < 1;
                if (v98) {
                  break;
                }
                unint64_t v505 = *((void *)*v501 + v504);
                v503 += __clz(v505);
              }
              while (!v505);
              int v506 = v502 | 0xFFFFFFC0;
              if ((v502 & 0x3F) == 0) {
                int v506 = 0;
              }
              if ((v502 - v503 - v506) > 0x40) {
                goto LABEL_870;
              }
              v501 = (llvm::APInt **)*v501;
            }
            if (*((_DWORD *)v782 + 8) >= 0x41u) {
              v475 = (unint64_t *)*v475;
            }
            if (v842)
            {
              v776 = (llvm::PointerType *)(*v475 - (void)*v501);
              v781 = *v501;
              v507 = (char *)v841;
              uint64_t v508 = 8 * v842;
              do
              {
                v509 = (uint64_t *)(*(void *)v507 - 8 * *(unsigned int *)(*(void *)v507 + 8));
                uint64_t v510 = *v509;
                v511 = (void *)v509[1];
                unint64_t v513 = sub_1CC5CA218((llvm::DataLayout *)(a1[5] + 34), *((llvm::Type **)v219 + 7));
                if (v512 == 1) {
                v821 = &v823;
                }
                uint64_t v823 = 148;
                uint64_t v824 = (v513 >> 3);
                v825[0] = 16;
                v825[1] = v776;
                long long v826 = xmmword_1CFB27450;
                v827 = v781;
                uint64_t v828 = 34;
                v822 = (void *)0xC00000008;
                v514 = llvm::DIExpression::prependOpcodes(v511, (unsigned int *)&v821, 1, 0);
                v515 = llvm::DIGlobalVariableExpression::getImpl(*(void **)*v220, v510, (uint64_t)v514, 0, 1);
                llvm::Value::addMetadata((llvm::Value *)v220, 0, v515);
                if (v821 != &v823) {
                  free(v821);
                }
                v507 += 8;
                v508 -= 8;
              }
              while (v508);
            }
          }
          else
          {
LABEL_870:
            if (v842)
            {
              v498 = (llvm::MDNode **)v841;
              uint64_t v499 = 8 * v842;
              do
              {
                v500 = *v498++;
                llvm::Value::addMetadata((llvm::Value *)v220, 0, v500);
                v499 -= 8;
              }
              while (v499);
            }
          }
          uint64_t v591 = *((void *)v789 + 1);
          if (!v591)
          {
            llvm::Value::takeName((int32x2_t ****)v220, v789);
            llvm::GlobalVariable::eraseFromParent(v789);
          }
          v516 = *(uint64_t ****)(v591 + 24);
          if (v516 && *((unsigned char *)v516 + 16) == 61)
          {
            uint64_t v517 = (uint64_t)*(v516 - 8);
            if ((llvm::DominatorTree *)v517 == v782 || v517 == (void)__pc)
            {
              BOOL v519 = v517 == (void)v782;
              uint64_t v520 = ***(void ***)v789;
              v521 = *(llvm::ConstantInt **)(v520 + 1888);
              unint64_t v522 = *(unsigned int *)(v520 + 1896);
              LODWORD(v822) = v522 >> 8;
              if (v522 >> 8 > 0x40) {
                operator new[]();
              }
              if (v522 <= 0xFF) {
                unint64_t v523 = 0;
              }
              else {
                unint64_t v523 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v522) + 63);
              }
              v821 = (void *)(v523 & v519);
              v524 = llvm::ConstantInt::get(v521, (llvm::LLVMContext *)&v821, v474);
              if (v822 >= 0x41 && v821) {
                MEMORY[0x1D25D9CB0](v821, 0x1000C8000313F17);
              }
            }
            else if (v517 && *(unsigned char *)(v517 + 16) == 60)
            {
              v536 = (char *)operator new(0x60uLL);
              v524 = v536 + 32;
              *((_DWORD *)v536 + 13) = *((_DWORD *)v536 + 13) & 0x38000000 | 1;
              *(void *)v536 = 0;
              *((void *)v536 + 1) = 0;
              *((void *)v536 + 2) = 0;
              *((void *)v536 + 3) = v536 + 32;
              if ((*(unsigned char *)(v517 + 23) & 0x10) != 0)
              {
                uint64_t v537 = ***(void ***)v517;
                uint64_t v538 = *(void *)(v537 + 152);
                uint64_t v539 = *(unsigned int *)(v537 + 168);
                if (v539)
                {
                  LODWORD(v540) = (v539 - 1) & ((v517 >> 4) ^ (v517 >> 9));
                  v541 = (uint64_t *)(v538 + 16 * v540);
                  uint64_t v542 = *v541;
                  if (*v541 != v517)
                  {
                    int v543 = 1;
                    do
                    {
                      if (v542 == -4096) {
                        goto LABEL_955;
                      }
                      int v544 = v540 + v543++;
                      uint64_t v540 = v544 & (v539 - 1);
                      uint64_t v542 = *(void *)(v538 + 16 * v540);
                    }
                    while (v542 != v517);
                    v541 = (uint64_t *)(v538 + 16 * v540);
                  }
                }
                else
                {
LABEL_955:
                  v541 = (uint64_t *)(v538 + 16 * v539);
                }
                v570 = (void *)v541[1];
                v573 = (void *)*v570;
                v572 = (char *)(v570 + 2);
                v571 = v573;
              }
              else
              {
                v571 = 0;
                v572 = &byte_1CFBCE98E;
              }
              uint64_t v574 = *((void *)v219 + 7);
              LOWORD(v825[0]) = 773;
              v821 = v572;
              v822 = v571;
              uint64_t v823 = (uint64_t)".b";
              llvm::LoadInst::LoadInst((llvm::Value *)(v536 + 32), v574, (uint64_t)v220, (const char **)&v821, 0, 0, (*(_WORD *)(v517 + 18) >> 7) & 7, *(unsigned char *)(v517 + 60), v517);
            }
            else
            {
              int v545 = *(_DWORD *)(v517 + 20);
              if ((v545 & 0x40000000) != 0) {
                v546 = *(void ***)(v517 - 8);
              }
              else {
                v546 = (void **)(v517 - 32 * (v545 & 0x7FFFFFF));
              }
              v524 = *v546;
            }
            v575 = (char *)operator new(0x80uLL);
            *((_DWORD *)v575 + 21) = *((_DWORD *)v575 + 21) & 0x38000000 | 2;
            *(void *)v575 = 0;
            *((void *)v575 + 1) = 0;
            *((void *)v575 + 2) = 0;
            *((void *)v575 + 3) = v575 + 64;
            *((void *)v575 + 4) = 0;
            *((void *)v575 + 5) = 0;
            *((void *)v575 + 6) = 0;
            *((void *)v575 + 7) = v575 + 64;
            llvm::StoreInst::StoreInst((llvm::Value *)(v575 + 64), (uint64_t)v524, (uint64_t)v220, 0, 0, (*((_WORD *)v516 + 9) >> 7) & 7, *((unsigned char *)v516 + 60), (uint64_t)v516);
            v576 = (unsigned __int8 *)v516[6];
            uint64_t v807 = (uint64_t)v576;
            if (v576) {
              llvm::MetadataTracking::track((uint64_t)&v807, v576, 2);
            }
            v579 = (unsigned __int8 *)*((void *)v575 + 14);
            v578 = (uint64_t *)(v575 + 112);
            v577 = v579;
            if (v579)
            {
              int v581 = *v577;
              if ((v581 - 4) > 0x1E)
              {
                if ((v581 - 3) >= 0xFFFFFFFE) {
                  v586 = v577;
                }
                else {
                  v586 = 0;
                }
                if ((v581 - 3) < 0xFFFFFFFE)
                {
                  if (v581 == 3) {
                    *((void *)v577 + 1) = 0;
                  }
                  goto LABEL_961;
                }
                unint64_t v583 = (unint64_t)(v586 + 8);
              }
              else
              {
                if ((v577[1] & 0x7F) != 2 && !*((_DWORD *)v577 + 3)) {
                  goto LABEL_961;
                }
                uint64_t v582 = *((void *)v577 + 2);
                if ((v582 & 4) == 0) {
                  goto LABEL_961;
                }
                unint64_t v583 = v582 & 0xFFFFFFFFFFFFFFF8;
                if (!v583) {
                  goto LABEL_961;
                }
              }
              v821 = v578;
              sub_1CC5FA668(v583 + 16, &v821);
            }
LABEL_961:
            v580 = (unsigned __int8 *)v807;
            uint64_t *v578 = v807;
            if (v580)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v807, v580, (uint64_t)v578);
              uint64_t v807 = 0;
            }
LABEL_963:
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          v525 = operator new(0x60uLL);
          v526 = v525;
          v527 = (llvm::Value *)(v525 + 8);
          v525[13] = v525[13] & 0x38000000 | 1;
          *(void *)v525 = 0;
          *((void *)v525 + 1) = 0;
          *((void *)v525 + 2) = 0;
          *((void *)v525 + 3) = v525 + 8;
          if ((*((unsigned char *)v516 + 23) & 0x10) != 0)
          {
            uint64_t v528 = ***v516;
            uint64_t v529 = *(void *)(v528 + 152);
            uint64_t v530 = *(unsigned int *)(v528 + 168);
            if (v530)
            {
              LODWORD(v531) = (v530 - 1) & ((v516 >> 4) ^ (v516 >> 9));
              v532 = (uint64_t ****)(v529 + 16 * v531);
              v533 = *v532;
              if (*v532 != v516)
              {
                int v534 = 1;
                do
                {
                  if (v533 == (uint64_t ***)-4096) {
                    goto LABEL_924;
                  }
                  int v535 = v531 + v534++;
                  uint64_t v531 = v535 & (v530 - 1);
                  v533 = *(uint64_t ****)(v529 + 16 * v531);
                }
                while (v533 != v516);
                v532 = (uint64_t ****)(v529 + 16 * v531);
              }
            }
            else
            {
LABEL_924:
              v532 = (uint64_t ****)(v529 + 16 * v530);
            }
            v547 = v532[1];
            v550 = *v547;
            v549 = (char *)(v547 + 2);
            v548 = v550;
          }
          else
          {
            v548 = 0;
            v549 = &byte_1CFBCE98E;
          }
          uint64_t v551 = *((void *)v219 + 7);
          LOWORD(v825[0]) = 773;
          v821 = v549;
          v822 = v548;
          uint64_t v823 = (uint64_t)".b";
          llvm::LoadInst::LoadInst((llvm::Value *)(v525 + 8), v551, (uint64_t)v220, (const char **)&v821, 0, 0, (*((_WORD *)v516 + 9) >> 7) & 7, *((unsigned char *)v516 + 60), (uint64_t)v516);
          if (v795)
          {
            v552 = (char *)operator new(0x60uLL);
            v553 = (int32x2_t ****)(v552 + 32);
            *((_DWORD *)v552 + 13) = *((_DWORD *)v552 + 13) & 0x38000000 | 1;
            *(void *)v552 = 0;
            *((void *)v552 + 1) = 0;
            *((void *)v552 + 2) = 0;
            *((void *)v552 + 3) = v552 + 32;
            v554 = (llvm::Type *)*v516;
            LOWORD(v825[0]) = 257;
            llvm::ZExtInst::ZExtInst((llvm::ZExtInst *)(v552 + 32), v527, v554, (const char **)&v821, (llvm::Instruction *)v516);
          }
          else
          {
            LOWORD(v825[0]) = 257;
            v553 = (int32x2_t ****)sub_1CC199EFC((uint64_t)v527, (uint64_t *)v782, (uint64_t)__pc, (const char **)&v821, (uint64_t)v516, 0);
          }
          llvm::Value::takeName(v553, (llvm::Value *)v516);
          v555 = v516[6];
          v838 = v555;
          if (v555) {
            llvm::MetadataTracking::track((uint64_t)&v838, (unsigned __int8 *)v555, 2);
          }
          v558 = (unsigned __int8 *)*((void *)v526 + 10);
          v557 = (void **)(v526 + 20);
          v556 = v558;
          if (v558)
          {
            int v564 = *v556;
            if ((v564 - 4) > 0x1E)
            {
              if ((v564 - 3) >= 0xFFFFFFFE) {
                v584 = v556;
              }
              else {
                v584 = 0;
              }
              if ((v564 - 3) < 0xFFFFFFFE)
              {
                if (v564 == 3) {
                  *((void *)v556 + 1) = 0;
                }
                goto LABEL_932;
              }
              unint64_t v566 = (unint64_t)(v584 + 8);
            }
            else
            {
              if ((v556[1] & 0x7F) != 2 && !*((_DWORD *)v556 + 3)) {
                goto LABEL_932;
              }
              uint64_t v565 = *((void *)v556 + 2);
              if ((v565 & 4) == 0) {
                goto LABEL_932;
              }
              unint64_t v566 = v565 & 0xFFFFFFFFFFFFFFF8;
              if (!v566) {
                goto LABEL_932;
              }
            }
            v821 = v557;
            sub_1CC5FA668(v566 + 16, &v821);
          }
LABEL_932:
          v559 = (unsigned __int8 *)v838;
          *v557 = v838;
          if (v559)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v838, v559, (uint64_t)v557);
            v838 = 0;
          }
          v560 = (unsigned __int8 *)v516[6];
          v819[0] = v560;
          if (v560) {
            llvm::MetadataTracking::track((uint64_t)v819, v560, 2);
          }
          v561 = (unsigned __int8 **)(v553 + 6);
          if (v819 == v553 + 6)
          {
            if (v819[0])
            {
              int v587 = *(unsigned __int8 *)v819[0];
              if ((v587 - 4) > 0x1E)
              {
                if ((v587 - 3) >= 0xFFFFFFFE) {
                  uint64_t v590 = v819[0];
                }
                else {
                  uint64_t v590 = 0;
                }
                if ((v587 - 3) < 0xFFFFFFFE)
                {
                  if (v587 == 3) {
                    *(void *)(v819[0] + 8) = 0;
                  }
                  goto LABEL_940;
                }
                unint64_t v589 = v590 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v819[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v819[0] + 12)) {
                  goto LABEL_940;
                }
                uint64_t v588 = *(void *)(v819[0] + 16);
                if ((v588 & 4) == 0) {
                  goto LABEL_940;
                }
                unint64_t v589 = v588 & 0xFFFFFFFFFFFFFFF8;
                if (!v589) {
                  goto LABEL_940;
                }
              }
              v821 = v819;
              sub_1CC5FA668(v589 + 16, &v821);
            }
          }
          else
          {
            v562 = *v561;
            if (!*v561) {
              goto LABEL_938;
            }
            int v567 = *v562;
            if ((v567 - 4) <= 0x1E)
            {
              if ((v562[1] & 0x7F) != 2 && !*((_DWORD *)v562 + 3)) {
                goto LABEL_938;
              }
              uint64_t v568 = *((void *)v562 + 2);
              if ((v568 & 4) == 0) {
                goto LABEL_938;
              }
              unint64_t v569 = v568 & 0xFFFFFFFFFFFFFFF8;
              if (!v569) {
                goto LABEL_938;
              }
              goto LABEL_982;
            }
            if ((v567 - 3) >= 0xFFFFFFFE) {
              v585 = *v561;
            }
            else {
              v585 = 0;
            }
            if ((v567 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v569 = (unint64_t)(v585 + 8);
LABEL_982:
              v821 = v553 + 6;
              sub_1CC5FA668(v569 + 16, &v821);
              goto LABEL_938;
            }
            if (v567 == 3) {
              *((void *)v562 + 1) = 0;
            }
LABEL_938:
            v563 = (unsigned __int8 *)v819[0];
            *v561 = (unsigned __int8 *)v819[0];
            if (v563)
            {
              llvm::MetadataTracking::retrack((uint64_t)v819, v563, (uint64_t)(v553 + 6));
              v819[0] = 0;
            }
          }
LABEL_940:
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v516, (llvm::Value *)v553, (llvm::Value *)1);
          goto LABEL_963;
        }
      }
    }
  }
  return v30 | v44;
}

uint64_t sub_1CC928C10(uint64_t a1, int a2)
{
  uint64_t result = sub_1CC92B998(**(uint64_t ***)a1, *(void *)(a1 + 112), a2);
  *(void *)(a1 + 112) = result;
  for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v6 = *(void *)(i + 24);
    if (*(unsigned char *)(v6 + 16) != 4)
    {
      uint64_t result = sub_1CC92B998(**(uint64_t ***)a1, *(void *)(v6 + 64), a2);
      *(void *)(v6 + 64) = result;
    }
  }
  return result;
}

BOOL sub_1CC928C8C(uint64_t a1)
{
  int v1 = (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
  if (v1 != 70 && v1 != 0) {
    return 0;
  }
  for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 24);
    if (*(unsigned char *)(v4 + 16) == 84 && (*(_WORD *)(v4 + 18) & 3) == 2) {
      return 0;
    }
  }
  uint64_t v5 = a1 + 72;
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6 == a1 + 72) {
    return 1;
  }
  do
  {
    if (v6) {
      uint64_t v7 = (llvm::BasicBlock *)(v6 - 24);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = llvm::BasicBlock::getTerminatingMustTailCall(v7);
    BOOL result = v8 == 0;
    if (v8) {
      break;
    }
    uint64_t v6 = *(void *)(v6 + 8);
  }
  while (v6 != v5);
  return result;
}

BOOL sub_1CC928D38(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = dword_1EBCDFBF0;
  unint64_t v3 = *a2;
  if (*a2
    && ((unsigned int v6 = sub_1CBF7A45C(v3, *(void *)(a1 + 40)), v6 == -1)
      ? (unint64_t v3 = 0)
      : (unint64_t v3 = *(void *)(*(void *)(v3 + 8) + 24 * v6 + 16)),
        (uint64_t v7 = *a2) != 0
     && ((uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 56) + 80)) != 0 ? (v9 = v8 - 24) : (v9 = 0),
         unsigned int v10 = sub_1CBF7A45C(v7, v9),
         v10 != -1)))
  {
    unint64_t v11 = *(void *)(*(void *)(v7 + 8) + 24 * v10 + 16);
  }
  else
  {
    unint64_t v11 = 0;
  }
  unint64_t v13 = v11;
  return v3 < llvm::BlockFrequency::operator*(&v13, (unint64_t)((((v2 << 31) | 0x30uLL) * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6);
}

BOOL sub_1CC928E24(uint64_t a1)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 32) & 0xF) == 8) {
    return 0;
  }
  unsigned int v13 = 4;
  v14[0] = *(void *)(a1 + 24);
  int v2 = 20;
  unsigned int v3 = 1;
  while (2)
  {
    uint64_t v4 = v14[--v3];
    unsigned int v12 = v3;
    int v5 = *(_DWORD *)(v4 + 8);
    BOOL v6 = 0;
    switch((char)v5)
    {
      case 15:
        goto LABEL_25;
      case 16:
        if ((v5 & 0x100) == 0) {
          goto LABEL_24;
        }
        uint64_t v7 = *(unsigned int *)(v4 + 12);
        if (!v7) {
          goto LABEL_20;
        }
        uint64_t v8 = *(void *)(v4 + 16);
        uint64_t v9 = 8 * v7;
        do
        {
          int v10 = *(_DWORD *)(*(void *)v8 + 8);
          if (v10 - 16 < 2) {
            goto LABEL_13;
          }
          if (v10 == 15) {
            goto LABEL_24;
          }
          if ((v10 & 0xFE) == 0x12)
          {
LABEL_13:
            if (v3 >= v13) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v14[v3] = *(void *)v8;
            unsigned int v3 = ++v12;
          }
          v8 += 8;
          v9 -= 8;
        }
        while (v9);
        goto LABEL_20;
      case 17:
        if (v3 >= v13) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v14[v3] = *(void *)(v4 + 24);
        unsigned int v3 = ++v12;
        goto LABEL_20;
      case 18:
      case 19:
        if (*(unsigned char *)(*(void *)(v4 + 24) + 8) != 15) {
          goto LABEL_20;
        }
LABEL_24:
        BOOL v6 = 0;
        goto LABEL_25;
      default:
LABEL_20:
        BOOL v6 = --v2 != 0;
        if (v2 && v3) {
          continue;
        }
LABEL_25:
        BOOL v1 = !v6;
        break;
    }
    return v1;
  }
}

uint64_t sub_1CC929034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v36[64] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v32 = a2;
  *((void *)&v32 + 1) = a3;
  uint64_t v34 = v36;
  uint64_t v35 = 0x2000000000;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    char v7 = 0;
    goto LABEL_67;
  }
  char v7 = 0;
  do
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t v3 = *(void *)(v3 + 8);
    if (v8 && *(unsigned char *)(v8 + 16) == 61)
    {
      uint64_t v9 = *(void *)(v8 - 64);
      goto LABEL_8;
    }
    if (sub_1CC5818F8(v8))
    {
      uint64_t v9 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
LABEL_8:
      unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 <= 0x14) {
        goto LABEL_9;
      }
      if (v10 >= 0x1C)
      {
        uint64_t v11 = *(void *)(v9 + 8);
        if (v11)
        {
          if (!*(void *)(v11 + 8))
          {
            if (v35 >= (unint64_t)HIDWORD(v35)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v12 = (llvm::Value **)((char *)v34 + 16 * v35);
            void *v12 = (llvm::Value *)v9;
LABEL_31:
            v12[1] = (llvm::Value *)v8;
            LODWORD(v35) = v35 + 1;
            continue;
          }
        }
      }
      continue;
    }
    if (sub_1CC92A430(v8))
    {
      uint64_t v14 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      if (v14) {
        BOOL v15 = *((unsigned char *)v14 + 16) == 3;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15 && (*((unsigned char *)v14 + 80) & 1) != 0) {
LABEL_9:
      }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      uint64_t v16 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      if (v16) {
        BOOL v17 = *((unsigned __int8 *)v16 + 16) >= 0x1Cu;
      }
      else {
        BOOL v17 = 0;
      }
      if (v17)
      {
        uint64_t v18 = *((void *)v16 + 1);
        if (v18)
        {
          if (!*(void *)(v18 + 8))
          {
            if (v35 >= (unint64_t)HIDWORD(v35)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v12 = (llvm::Value **)((char *)v34 + 16 * v35);
            void *v12 = v16;
            goto LABEL_31;
          }
        }
      }
    }
    else
    {
      unsigned int v19 = *(unsigned __int8 *)(v8 + 16);
      if (v8 && v19 == 5)
      {
        if (!*(void *)(v8 + 8))
        {
          llvm::Constant::destroyConstant((int32x2_t ****)v8, v13);
          char v7 = 1;
        }
      }
      else if (v8 && v19 <= 0x14 && (llvm::isSafeToDestroyConstant((llvm *)v8, v13) & 1) != 0)
      {
        llvm::Constant::destroyConstant((int32x2_t ****)v8, v20);
        LODWORD(v35) = 0;
        sub_1CC929034(a1, a2, a3);
        char v7 = 1;
        goto LABEL_67;
      }
    }
  }
  while (v3);
  uint64_t v21 = v35;
  if (v35)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *((void *)v34 + 2 * v22);
      long long v33 = v32;
      BOOL v25 = (unsigned char *)(v23 + 16);
      unsigned int v24 = *(unsigned __int8 *)(v23 + 16);
      if (v24 < 0x15) {
LABEL_63:
      }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      while (1)
      {
        uint64_t v26 = *(void *)(v23 + 8);
        if (!v26 || *(void *)(v26 + 8) || v24 <= 0x3C && ((1 << v24) & 0x1000000200200000) != 0) {
          break;
        }
        if (llvm::isAllocationFn(v23, (uint64_t (*)(uint64_t, unint64_t))sub_1CD6665B4, (uint64_t)&v33)) {
          goto LABEL_63;
        }
        if (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v23)) {
          break;
        }
        int v27 = *(_DWORD *)(v23 + 20);
        uint64_t v28 = v27 & 0x7FFFFFF;
        if (*v25 == 62)
        {
          if (v28 != 1)
          {
            unsigned int v29 = 1;
            while (*(unsigned char *)(*(void *)(v23 - 32 * v28 + 32 * v29) + 16) == 16)
            {
              if (v28 == ++v29) {
                goto LABEL_59;
              }
            }
            break;
          }
        }
        else if (v28 != 1)
        {
          break;
        }
LABEL_59:
        if ((v27 & 0x40000000) != 0) {
          uint64_t v30 = *(uint64_t **)(v23 - 8);
        }
        else {
          uint64_t v30 = (uint64_t *)(v23 - 32 * v28);
        }
        uint64_t v23 = *v30;
        BOOL v25 = (unsigned char *)(*v30 + 16);
        unsigned int v24 = *v25;
        if (v24 <= 0x14) {
          goto LABEL_63;
        }
      }
      ++v22;
    }
    while (v22 != v21);
  }
LABEL_67:
  if (v34 != v36) {
    free(v34);
  }
  return v7 & 1;
}

BOOL sub_1CC9294EC(llvm *a1, uint64_t a2, llvm::Type *a3)
{
  v175[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm *)*((void *)a1 - 4);
  uint64_t v5 = *((void *)a1 + 1);
  BOOL v6 = v175;
  uint64_t v173 = v175;
  uint64_t v174 = 0x800000000;
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v5;
    do
    {
      ++v7;
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8);
    if ((unint64_t)(v7 - 1) >= 8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v9 = v175;
    do
    {
      *v9++ = *(void *)(v5 + 24);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5);
    unsigned int v10 = v7;
  }
  else
  {
    unsigned int v10 = 0;
  }
  LODWORD(v174) = v10;
  uint64_t v160 = v164;
  unsigned int v161 = v164;
  uint64_t v162 = 8;
  int v163 = 0;
  unint64_t v170 = (char *)&v172;
  uint64_t v171 = 0x200000000;
  if (v10)
  {
    while (1)
    {
      uint64_t v11 = v173[v10 - 1];
      LODWORD(v174) = v10 - 1;
      unsigned int v12 = v161;
      uint64_t v13 = HIDWORD(v162);
      if (v161 == v160)
      {
        if (HIDWORD(v162))
        {
          uint64_t v14 = 0;
          uint64_t v15 = 8 * HIDWORD(v162);
          uint64_t v16 = (uint64_t *)v161;
          do
          {
            if (*v16 == v11) {
              goto LABEL_191;
            }
            if (*v16 == -2) {
              uint64_t v14 = v16;
            }
            ++v16;
            v15 -= 8;
          }
          while (v15);
          if (v14)
          {
            *uint64_t v14 = v11;
            --v163;
            goto LABEL_42;
          }
        }
        unsigned int v17 = v162;
        if (HIDWORD(v162) < v162)
        {
          ++HIDWORD(v162);
          *(void *)&v161[8 * v13] = v11;
          goto LABEL_42;
        }
      }
      else
      {
        unsigned int v17 = v162;
      }
      if (3 * v17 <= 4 * (HIDWORD(v162) - v163)) {
        break;
      }
      if (v17 - HIDWORD(v162) < v17 >> 3) {
        goto LABEL_201;
      }
LABEL_23:
      unsigned int v18 = v17 - 1;
      unsigned int v19 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      int v20 = &v12[8 * v19];
      uint64_t v21 = *(void *)v20;
      if (*(void *)v20 != -1)
      {
        uint64_t v22 = 0;
        int v23 = 1;
        while (v21 != v11)
        {
          if (v22) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v21 == -2;
          }
          if (v24) {
            uint64_t v22 = (uint64_t *)v20;
          }
          unsigned int v25 = v19 + v23++;
          unsigned int v19 = v25 & v18;
          int v20 = &v12[8 * (v25 & v18)];
          uint64_t v21 = *(void *)v20;
          if (*(void *)v20 == -1) {
            goto LABEL_35;
          }
        }
        goto LABEL_191;
      }
      uint64_t v22 = 0;
LABEL_35:
      if (v22) {
        uint64_t v26 = v22;
      }
      else {
        uint64_t v26 = (uint64_t *)v20;
      }
      if (*v26 == v11) {
        goto LABEL_191;
      }
      if (*v26 == -2) {
        --v163;
      }
      else {
        ++HIDWORD(v162);
      }
      *uint64_t v26 = v11;
LABEL_42:
      int v27 = *(unsigned __int8 *)(v11 + 16);
      if (v27 != 77)
      {
        if (v27 != 5) {
          goto LABEL_46;
        }
        int v28 = *(unsigned __int16 *)(v11 + 18);
        if (v28 != 49) {
          goto LABEL_61;
        }
      }
      sub_1CC13E4CC((uint64_t)&v173, (uint64_t)&v173[v174], *(void *)(v11 + 8), 0);
      int v27 = *(unsigned __int8 *)(v11 + 16);
LABEL_46:
      if (v27 > 60)
      {
        if (v27 == 61)
        {
          int v35 = *(_DWORD *)(v11 + 20);
          if ((v35 & 0x40000000) != 0)
          {
            uint64_t v37 = *(void *)(v11 - 8);
            uint64_t v36 = v35 & 0x7FFFFFF;
            if (!v36) {
              goto LABEL_190;
            }
          }
          else
          {
            uint64_t v36 = v35 & 0x7FFFFFF;
            uint64_t v37 = v11 - 32 * v36;
            if (!v36) {
              goto LABEL_190;
            }
          }
          uint64_t v41 = v37 + 32 * v36;
          do
          {
            uint64_t v42 = *(int32x2_t *****)v37;
            if (*(void *)v37) {
              BOOL v43 = *(unsigned __int8 *)(*(void *)v37 + 16) >= 0x1Cu;
            }
            else {
              BOOL v43 = 0;
            }
            if (v43)
            {
              uint64_t v165 = 6;
              int v166 = 0;
              int v167 = v42;
              if (((unint64_t)v42 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v165);
              }
              BOOL v44 = v170;
              if (v171 >= HIDWORD(v171))
              {
                unint64_t v62 = v171 + 1;
                if (v170 <= (char *)&v165 && &v170[24 * v171] > (char *)&v165)
                {
                  char v63 = v4;
                  BOOL v64 = v6;
                  uint64_t v65 = (char *)&v165 - v170;
                  sub_1CC261F80((unsigned int *)&v170, v62);
                  BOOL v44 = v170;
                  BOOL v45 = (uint64_t *)&v170[v65];
                  BOOL v6 = v64;
                  uint64_t v4 = v63;
                }
                else
                {
                  sub_1CC261F80((unsigned int *)&v170, v62);
                  BOOL v45 = &v165;
                  BOOL v44 = v170;
                }
              }
              else
              {
                BOOL v45 = &v165;
              }
              int v46 = v171;
              int v47 = (unint64_t *)&v44[24 * v171];
              unint64_t *v47 = 6;
              v47[1] = 0;
              uint64_t v48 = v45[2];
              v47[2] = v48;
              if (v48 != -8192 && v48 != -4096)
              {
                if (v48)
                {
                  unint64_t v49 = *v45 & 0xFFFFFFFFFFFFFFF8;
                  v47[1] = *(void *)v49;
                  *(void *)unint64_t v49 = v47;
                  unint64_t *v47 = v49 | 6;
                  unint64_t v50 = (unint64_t *)v47[1];
                  if (v50) {
                    unint64_t *v50 = *v50 & 7 | (unint64_t)(v47 + 1);
                  }
                }
              }
              LODWORD(v171) = v46 + 1;
              if (v167 != (int32x2_t ****)-8192 && v167 != (int32x2_t ****)-4096 && v167)
              {
                unint64_t v51 = v165 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v165 & 0xFFFFFFFFFFFFFFF8) = v166;
                if (v166)
                {
                  unint64_t *v166 = *v166 & 7 | v51;
                }
                else
                {
                  int v52 = v167;
                  uint64_t v53 = ***v167;
                  unint64_t v54 = (unint64_t)v53[303];
                  if (v54 <= v51)
                  {
                    uint64_t v55 = v53[305].u32[0];
                    if (v54 + 16 * v55 > v51)
                    {
                      unsigned int v56 = v55 - 1;
                      LODWORD(v57) = v56 & ((v167 >> 4) ^ (v167 >> 9));
                      int v58 = (int32x2_t *****)(v54 + 16 * v57);
                      unint64_t v59 = *v58;
                      if (v167 != *v58)
                      {
                        int v60 = 1;
                        do
                        {
                          if (v59 == (int32x2_t ****)-4096) {
                            goto LABEL_98;
                          }
                          int v61 = v57 + v60++;
                          uint64_t v57 = v61 & v56;
                          unint64_t v59 = *(int32x2_t *****)(v54 + 16 * v57);
                        }
                        while (v167 != v59);
                        int v58 = (int32x2_t *****)(v54 + 16 * v57);
                      }
                      *int v58 = (int32x2_t ****)-8192;
                      v53[304] = vadd_s32(v53[304], (int32x2_t)0x1FFFFFFFFLL);
                      int v52 = v167;
LABEL_98:
                      *((unsigned char *)v52 + 17) &= ~1u;
                    }
                  }
                }
              }
            }
            v37 += 32;
          }
          while (v37 != v41);
          goto LABEL_190;
        }
        if (v27 == 62 || v27 == 78)
        {
LABEL_63:
          sub_1CC13E4CC((uint64_t)&v173, (uint64_t)&v173[v174], *(void *)(v11 + 8), 0);
          goto LABEL_191;
        }
        goto LABEL_64;
      }
      if (v27 == 5)
      {
        int v28 = *(unsigned __int16 *)(v11 + 18);
LABEL_61:
        if (v28 == 34 || v28 == 50) {
          goto LABEL_63;
        }
LABEL_64:
        if (sub_1CBFB3AB0(v11)
          && llvm::getUnderlyingObject(*(llvm **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)), (const llvm::Value *)6) == a1)
        {
          int v38 = *(_DWORD *)(v11 + 20);
          if ((v38 & 0x40000000) != 0)
          {
            uint64_t v40 = *(void *)(v11 - 8);
            uint64_t v39 = v38 & 0x7FFFFFF;
            if (!v39) {
              goto LABEL_190;
            }
          }
          else
          {
            uint64_t v39 = v38 & 0x7FFFFFF;
            uint64_t v40 = v11 - 32 * v39;
            if (!v39) {
              goto LABEL_190;
            }
          }
          uint64_t v103 = v40 + 32 * v39;
          do
          {
            uint64_t v104 = *(int32x2_t *****)v40;
            if (*(void *)v40) {
              BOOL v105 = *(unsigned __int8 *)(*(void *)v40 + 16) >= 0x1Cu;
            }
            else {
              BOOL v105 = 0;
            }
            if (v105)
            {
              uint64_t v165 = 6;
              int v166 = 0;
              int v167 = v104;
              if (((unint64_t)v104 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v165);
              }
              int v106 = v170;
              if (v171 >= HIDWORD(v171))
              {
                unint64_t v124 = v171 + 1;
                if (v170 <= (char *)&v165 && &v170[24 * v171] > (char *)&v165)
                {
                  uint64_t v125 = v4;
                  uint64_t v126 = v6;
                  uint64_t v127 = (char *)&v165 - v170;
                  sub_1CC261F80((unsigned int *)&v170, v124);
                  int v106 = v170;
                  uint64_t v107 = (uint64_t *)&v170[v127];
                  BOOL v6 = v126;
                  uint64_t v4 = v125;
                }
                else
                {
                  sub_1CC261F80((unsigned int *)&v170, v124);
                  uint64_t v107 = &v165;
                  int v106 = v170;
                }
              }
              else
              {
                uint64_t v107 = &v165;
              }
              int v108 = v171;
              uint64_t v109 = (unint64_t *)&v106[24 * v171];
              *uint64_t v109 = 6;
              v109[1] = 0;
              uint64_t v110 = v107[2];
              v109[2] = v110;
              if (v110 != -8192 && v110 != -4096)
              {
                if (v110)
                {
                  unint64_t v111 = *v107 & 0xFFFFFFFFFFFFFFF8;
                  v109[1] = *(void *)v111;
                  *(void *)unint64_t v111 = v109;
                  *uint64_t v109 = v111 | 6;
                  uint64_t v112 = (unint64_t *)v109[1];
                  if (v112) {
                    unint64_t *v112 = *v112 & 7 | (unint64_t)(v109 + 1);
                  }
                }
              }
              LODWORD(v171) = v108 + 1;
              if (v167 != (int32x2_t ****)-8192 && v167 != (int32x2_t ****)-4096 && v167)
              {
                unint64_t v113 = v165 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v165 & 0xFFFFFFFFFFFFFFF8) = v166;
                if (v166)
                {
                  unint64_t *v166 = *v166 & 7 | v113;
                }
                else
                {
                  uint64_t v114 = v167;
                  int v115 = ***v167;
                  unint64_t v116 = (unint64_t)v115[303];
                  if (v116 <= v113)
                  {
                    uint64_t v117 = v115[305].u32[0];
                    if (v116 + 16 * v117 > v113)
                    {
                      unsigned int v118 = v117 - 1;
                      LODWORD(v119) = v118 & ((v167 >> 4) ^ (v167 >> 9));
                      int v120 = (int32x2_t *****)(v116 + 16 * v119);
                      BOOL v121 = *v120;
                      if (v167 != *v120)
                      {
                        int v122 = 1;
                        do
                        {
                          if (v121 == (int32x2_t ****)-4096) {
                            goto LABEL_184;
                          }
                          int v123 = v119 + v122++;
                          uint64_t v119 = v123 & v118;
                          BOOL v121 = *(int32x2_t *****)(v116 + 16 * v119);
                        }
                        while (v167 != v121);
                        int v120 = (int32x2_t *****)(v116 + 16 * v119);
                      }
                      char *v120 = (int32x2_t ****)-8192;
                      v115[304] = vadd_s32(v115[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v114 = v167;
LABEL_184:
                      *((unsigned char *)v114 + 17) &= ~1u;
                    }
                  }
                }
              }
            }
            v40 += 32;
          }
          while (v40 != v103);
LABEL_190:
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        goto LABEL_191;
      }
      if (v27 != 60) {
        goto LABEL_64;
      }
      unsigned int v29 = *(llvm::Constant **)v11;
      uint64_t v30 = llvm::ConstantFoldLoadFromUniformValue(v4, *(llvm::Constant **)v11, a3);
      if (v30)
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, v30, (llvm::Value *)1);
        int v32 = *(_DWORD *)(v11 + 20);
        if ((v32 & 0x40000000) != 0)
        {
          uint64_t v34 = *(void *)(v11 - 8);
          uint64_t v33 = v32 & 0x7FFFFFF;
          if (!v33) {
            goto LABEL_190;
          }
        }
        else
        {
          uint64_t v33 = v32 & 0x7FFFFFF;
          uint64_t v34 = v11 - 32 * v33;
          if (!v33) {
            goto LABEL_190;
          }
        }
        uint64_t v78 = v34 + 32 * v33;
        do
        {
          uint64_t v79 = *(int32x2_t *****)v34;
          if (*(void *)v34) {
            BOOL v80 = *(unsigned __int8 *)(*(void *)v34 + 16) >= 0x1Cu;
          }
          else {
            BOOL v80 = 0;
          }
          if (v80)
          {
            uint64_t v165 = 6;
            int v166 = 0;
            int v167 = v79;
            if (((unint64_t)v79 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v165);
            }
            unint64_t v81 = v170;
            if (v171 >= HIDWORD(v171))
            {
              unint64_t v99 = v171 + 1;
              if (v170 <= (char *)&v165 && &v170[24 * v171] > (char *)&v165)
              {
                uint64_t v100 = v4;
                uint64_t v101 = v6;
                uint64_t v102 = (char *)&v165 - v170;
                sub_1CC261F80((unsigned int *)&v170, v99);
                unint64_t v81 = v170;
                uint64_t v82 = (uint64_t *)&v170[v102];
                BOOL v6 = v101;
                uint64_t v4 = v100;
              }
              else
              {
                sub_1CC261F80((unsigned int *)&v170, v99);
                uint64_t v82 = &v165;
                unint64_t v81 = v170;
              }
            }
            else
            {
              uint64_t v82 = &v165;
            }
            int v83 = v171;
            uint64_t v84 = (unint64_t *)&v81[24 * v171];
            *uint64_t v84 = 6;
            v84[1] = 0;
            uint64_t v85 = v82[2];
            v84[2] = v85;
            if (v85 != -8192 && v85 != -4096)
            {
              if (v85)
              {
                unint64_t v86 = *v82 & 0xFFFFFFFFFFFFFFF8;
                v84[1] = *(void *)v86;
                *(void *)unint64_t v86 = v84;
                *uint64_t v84 = v86 | 6;
                unsigned int v87 = (unint64_t *)v84[1];
                if (v87) {
                  *unsigned int v87 = *v87 & 7 | (unint64_t)(v84 + 1);
                }
              }
            }
            LODWORD(v171) = v83 + 1;
            if (v167 != (int32x2_t ****)-8192 && v167 != (int32x2_t ****)-4096 && v167)
            {
              unint64_t v88 = v165 & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v165 & 0xFFFFFFFFFFFFFFF8) = v166;
              if (v166)
              {
                unint64_t *v166 = *v166 & 7 | v88;
              }
              else
              {
                uint64_t v89 = v167;
                char v90 = ***v167;
                unint64_t v91 = (unint64_t)v90[303];
                if (v91 <= v88)
                {
                  uint64_t v92 = v90[305].u32[0];
                  if (v91 + 16 * v92 > v88)
                  {
                    unsigned int v93 = v92 - 1;
                    LODWORD(v94) = v93 & ((v167 >> 4) ^ (v167 >> 9));
                    uint64_t v95 = (int32x2_t *****)(v91 + 16 * v94);
                    uint64_t v96 = *v95;
                    if (v167 != *v95)
                    {
                      int v97 = 1;
                      do
                      {
                        if (v96 == (int32x2_t ****)-4096) {
                          goto LABEL_148;
                        }
                        int v98 = v94 + v97++;
                        uint64_t v94 = v98 & v93;
                        uint64_t v96 = *(int32x2_t *****)(v91 + 16 * v94);
                      }
                      while (v167 != v96);
                      uint64_t v95 = (int32x2_t *****)(v91 + 16 * v94);
                    }
                    unint64_t *v95 = (int32x2_t ****)-8192;
                    v90[304] = vadd_s32(v90[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v89 = v167;
LABEL_148:
                    *((unsigned char *)v89 + 17) &= ~1u;
                  }
                }
              }
            }
          }
          v34 += 32;
        }
        while (v34 != v78);
        goto LABEL_190;
      }
      int v66 = v6;
      int v67 = *(llvm::GlobalValue **)(v11 - 32);
      unsigned int v68 = *(_DWORD *)(*(void *)v67 + 8);
      if ((v68 & 0xFE) == 0x12) {
        unsigned int v68 = *(_DWORD *)(**(void **)(*(void *)v67 + 16) + 8);
      }
      if (v68 < 0x100) {
        goto LABEL_115;
      }
      unsigned int v69 = v68 >> 8;
      uint64_t v70 = *(unsigned int *)(a2 + 240);
      uint64_t v71 = *(void *)(a2 + 232);
      if (v70)
      {
        uint64_t v71 = *(void *)(a2 + 232);
        unint64_t v72 = *(unsigned int *)(a2 + 240);
        do
        {
          unint64_t v73 = v72 >> 1;
          uint64_t v74 = v71 + 16 * (v72 >> 1);
          unsigned int v75 = *(_DWORD *)(v74 + 8);
          uint64_t v76 = v74 + 16;
          v72 += ~(v72 >> 1);
          if (v75 < v69) {
            uint64_t v71 = v76;
          }
          else {
            unint64_t v72 = v73;
          }
        }
        while (v72);
      }
      if (v71 == *(void *)(a2 + 232) + 16 * v70 || *(_DWORD *)(v71 + 8) != v69) {
LABEL_115:
      }
        uint64_t v71 = *(void *)(a2 + 232);
      unsigned int v159 = *(_DWORD *)(v71 + 12);
      if (v159 > 0x40) {
        operator new[]();
      }
      uint64_t v158 = 0;
      if (llvm::Value::stripAndAccumulateConstantOffsets(v67, (llvm::DataLayout *)a2, (llvm::APInt *)&v158, 1, 0, 0, v31) == a1)
      {
        int v128 = llvm::ConstantFoldLoadFromConst((llvm::Type **)v4, v29, (llvm::Type *)&v158, (const llvm::APInt *)a2, v77);
        BOOL v6 = v66;
        if (v128)
        {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, v128, (llvm::Value *)1);
          int v129 = *(_DWORD *)(v11 + 20);
          if ((v129 & 0x40000000) != 0)
          {
            uint64_t v131 = *(void *)(v11 - 8);
            uint64_t v130 = v129 & 0x7FFFFFF;
            if (!v130) {
              goto LABEL_237;
            }
          }
          else
          {
            uint64_t v130 = v129 & 0x7FFFFFF;
            uint64_t v131 = v11 - 32 * v130;
            if (!v130) {
              goto LABEL_237;
            }
          }
          uint64_t v132 = v131 + 32 * v130;
          do
          {
            uint64_t v133 = *(int32x2_t *****)v131;
            if (*(void *)v131) {
              BOOL v134 = *(unsigned __int8 *)(*(void *)v131 + 16) >= 0x1Cu;
            }
            else {
              BOOL v134 = 0;
            }
            if (v134)
            {
              uint64_t v165 = 6;
              int v166 = 0;
              int v167 = v133;
              if (((unint64_t)v133 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v165);
              }
              int v135 = v170;
              if (v171 >= HIDWORD(v171))
              {
                unint64_t v153 = v171 + 1;
                if (v170 <= (char *)&v165 && &v170[24 * v171] > (char *)&v165)
                {
                  uint64_t v154 = (char *)&v165 - v170;
                  sub_1CC261F80((unsigned int *)&v170, v153);
                  int v135 = v170;
                  unsigned int v136 = (uint64_t *)&v170[v154];
                }
                else
                {
                  sub_1CC261F80((unsigned int *)&v170, v153);
                  unsigned int v136 = &v165;
                  int v135 = v170;
                }
              }
              else
              {
                unsigned int v136 = &v165;
              }
              int v137 = v171;
              uint64_t v138 = (unint64_t *)&v135[24 * v171];
              *uint64_t v138 = 6;
              v138[1] = 0;
              uint64_t v139 = v136[2];
              v138[2] = v139;
              if (v139 != -8192 && v139 != -4096)
              {
                if (v139)
                {
                  unint64_t v140 = *v136 & 0xFFFFFFFFFFFFFFF8;
                  v138[1] = *(void *)v140;
                  *(void *)unint64_t v140 = v138;
                  *uint64_t v138 = v140 | 6;
                  BOOL v141 = (unint64_t *)v138[1];
                  if (v141) {
                    unint64_t *v141 = *v141 & 7 | (unint64_t)(v138 + 1);
                  }
                }
              }
              LODWORD(v171) = v137 + 1;
              if (v167 != (int32x2_t ****)-8192 && v167 != (int32x2_t ****)-4096 && v167)
              {
                unint64_t v142 = v165 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v165 & 0xFFFFFFFFFFFFFFF8) = v166;
                if (v166)
                {
                  unint64_t *v166 = *v166 & 7 | v142;
                }
                else
                {
                  unint64_t v143 = v167;
                  int v144 = ***v167;
                  unint64_t v145 = (unint64_t)v144[303];
                  if (v145 <= v142)
                  {
                    uint64_t v146 = v144[305].u32[0];
                    if (v145 + 16 * v146 > v142)
                    {
                      unsigned int v147 = v146 - 1;
                      LODWORD(v148) = v147 & ((v167 >> 4) ^ (v167 >> 9));
                      uint64_t v149 = (int32x2_t *****)(v145 + 16 * v148);
                      BOOL v150 = *v149;
                      if (v167 != *v149)
                      {
                        int v151 = 1;
                        do
                        {
                          if (v150 == (int32x2_t ****)-4096) {
                            goto LABEL_231;
                          }
                          int v152 = v148 + v151++;
                          uint64_t v148 = v152 & v147;
                          BOOL v150 = *(int32x2_t *****)(v145 + 16 * v148);
                        }
                        while (v167 != v150);
                        uint64_t v149 = (int32x2_t *****)(v145 + 16 * v148);
                      }
                      *uint64_t v149 = (int32x2_t ****)-8192;
                      v144[304] = vadd_s32(v144[304], (int32x2_t)0x1FFFFFFFFLL);
                      unint64_t v143 = v167;
LABEL_231:
                      *((unsigned char *)v143 + 17) &= ~1u;
                    }
                  }
                }
              }
            }
            v131 += 32;
          }
          while (v131 != v132);
LABEL_237:
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
      else
      {
        BOOL v6 = v66;
      }
      if (v159 >= 0x41 && v158) {
        MEMORY[0x1D25D9CB0](v158, 0x1000C8000313F17);
      }
LABEL_191:
      unsigned int v10 = v174;
      if (!v174) {
        goto LABEL_243;
      }
    }
    if (v17 >= 0x40) {
      v17 *= 2;
    }
    else {
      unsigned int v17 = 128;
    }
LABEL_201:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v160, v17);
    unsigned int v17 = v162;
    unsigned int v12 = v161;
    goto LABEL_23;
  }
LABEL_243:
  int64_t v169 = 0;
  BOOL v155 = llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive((unsigned int *)&v170, 0, 0, (uint64_t)v168);
  if (v169 == v168)
  {
    (*(void (**)(void *))(v168[0] + 32))(v168);
  }
  else if (v169)
  {
    (*(void (**)(void))(*v169 + 40))();
  }
  llvm::Constant::removeDeadConstantUsers((uint64_t)a1);
  sub_1CC92A490(&v170);
  if (v161 != v160) {
    free(v161);
  }
  if (v173 != v6) {
    free(v173);
  }
  return v155;
}

uint64_t sub_1CC92A430(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 84
    && (uint64_t v1 = *(void *)(a1 - 32)) != 0
    && !*(unsigned char *)(v1 + 16)
    && *(void *)(v1 + 24) == *(void *)(a1 + 72)
    && (*(unsigned char *)(v1 + 33) & 0x20) != 0
    && (unsigned int v2 = *(_DWORD *)(v1 + 36) - 194, v2 <= 3))
  {
    return (0xDu >> (v2 & 0xF)) & 1;
  }
  else
  {
    return 0;
  }
}

char **sub_1CC92A490(char **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 24 * v3;
    do
    {
      uint64_t v6 = *(void *)&v2[v5 - 8];
      if (v6 && v6 != -8192 && v6 != -4096)
      {
        uint64_t v7 = v2;
        uint64_t v8 = v5;
        llvm::ValueHandleBase::RemoveFromUseList(&v2[v5 - 24]);
        unsigned int v2 = v7;
        uint64_t v5 = v8;
      }
      v5 -= 24;
    }
    while (v5);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC92A528(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unint64_t **)a2;
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  uint64_t v4 = (unint64_t *)(*(void *)a2 + 16 * v3);
  if (*(_DWORD *)(a2 + 8))
  {
    if (v3)
    {
      uint64_t v5 = 16 * v3;
      while (*v2 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v2 += 2;
        v5 -= 16;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
LABEL_6:
    unsigned int v2 = v4;
  }
  return sub_1CD6665BC(a1, *(void *)a1 + 16 * *(unsigned int *)(a1 + 8), v2, v4, v4);
}

uint64_t sub_1CC92A578(uint64_t result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (a2 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      ++v4;
      uint64_t v6 = v5 + 2;
      while (v6 != a3)
      {
        unint64_t v7 = *v6;
        v6 += 2;
        if (v7 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v5 = v6 - 2;
          goto LABEL_8;
        }
      }
      uint64_t v5 = a3;
LABEL_8:
      ;
    }
    while (v5 != a4);
  }
  uint64_t v8 = *(unsigned int *)(result + 8);
  if (v4 + v8 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a4)
  {
    uint64_t v9 = (_OWORD *)(*(void *)result + 16 * v8);
    do
    {
      *uint64_t v9 = *(_OWORD *)a2;
      unsigned int v10 = a2 + 2;
      while (v10 != a3)
      {
        unint64_t v11 = *v10;
        v10 += 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          a2 = v10 - 2;
          goto LABEL_17;
        }
      }
      a2 = a3;
LABEL_17:
      ++v9;
    }
    while (a2 != a4);
    LODWORD(v8) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v8 + v4;
  return result;
}

unint64_t sub_1CC92A674(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (unint64_t *)result;
  while (2)
  {
    unsigned int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unint64_t v46 = *(a2 - 2);
                unint64_t v47 = *v10;
                if (v46 < *v10)
                {
                  unint64_t v48 = v10[1];
                  unint64_t v49 = *(a2 - 1);
                  unint64_t *v10 = v46;
                  v10[1] = v49;
                  *(a2 - 2) = v47;
                  *(a2 - 1) = v48;
                }
                break;
              case 3:
                BOOL result = (unint64_t)sub_1CC92AD94(v10, v10 + 2, a2 - 2);
                break;
              case 4:
                BOOL result = (unint64_t)sub_1CC92B034(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5:
                BOOL result = (unint64_t)sub_1CC92B034(v10, v10 + 2, v10 + 4, v10 + 6);
                unint64_t v50 = *(a2 - 2);
                unint64_t v51 = v10[6];
                if (v50 < v51)
                {
                  v10[6] = v50;
                  *(a2 - 2) = v51;
                  unint64_t v52 = v10[6];
                  unint64_t v53 = v10[7];
                  v10[7] = *(a2 - 1);
                  *(a2 - 1) = v53;
                  unint64_t v54 = v10[4];
                  if (v52 < v54)
                  {
                    unint64_t v55 = v10[5];
                    unint64_t v56 = v10[7];
                    v10[4] = v52;
                    v10[5] = v56;
                    v10[6] = v54;
                    v10[7] = v55;
                    unint64_t v57 = v10[2];
                    if (v52 < v57)
                    {
                      unint64_t v58 = v10[3];
                      v10[2] = v52;
                      v10[3] = v56;
                      v10[4] = v57;
                      v10[5] = v58;
                      unint64_t v59 = *v10;
                      if (v52 < *v10)
                      {
                        unint64_t v60 = v10[1];
                        unint64_t *v10 = v52;
                        v10[1] = v56;
                        v10[2] = v59;
                        v10[3] = v60;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            int v61 = v10 + 2;
            BOOL v63 = v10 == a2 || v61 == a2;
            if (a4)
            {
              if (!v63)
              {
                uint64_t v64 = 0;
                uint64_t v65 = v10;
                do
                {
                  int v66 = v61;
                  unint64_t v67 = v65[2];
                  unint64_t v68 = *v65;
                  if (v67 < *v65)
                  {
                    unint64_t v69 = v65[3];
                    uint64_t v70 = v64;
                    while (1)
                    {
                      uint64_t v71 = (char *)v10 + v70;
                      uint64_t v72 = *(unint64_t *)((char *)v10 + v70 + 8);
                      *((void *)v71 + 2) = v68;
                      *((void *)v71 + 3) = v72;
                      if (!v70) {
                        break;
                      }
                      unint64_t v68 = *((void *)v71 - 2);
                      v70 -= 16;
                      if (v67 >= v68)
                      {
                        unint64_t v73 = (unint64_t *)((char *)v10 + v70 + 16);
                        goto LABEL_84;
                      }
                    }
                    unint64_t v73 = v10;
LABEL_84:
                    unint64_t *v73 = v67;
                    v73[1] = v69;
                  }
                  int v61 = v66 + 2;
                  v64 += 16;
                  uint64_t v65 = v66;
                }
                while (v66 + 2 != a2);
              }
            }
            else if (!v63)
            {
              int v108 = v10 + 3;
              do
              {
                uint64_t v109 = v61;
                unint64_t v110 = v9[2];
                unint64_t v111 = *v9;
                if (v110 < *v9)
                {
                  unint64_t v112 = v9[3];
                  unint64_t v113 = v108;
                  do
                  {
                    uint64_t v114 = v113;
                    *(v113 - 1) = v111;
                    unint64_t v115 = *(v113 - 2);
                    v113 -= 2;
                    *uint64_t v114 = v115;
                    unint64_t v111 = *(v114 - 5);
                  }
                  while (v110 < v111);
                  *(v113 - 1) = v110;
                  *unint64_t v113 = v112;
                }
                int v61 = v109 + 2;
                v108 += 2;
                uint64_t v9 = v109;
              }
              while (v109 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v74 = (unint64_t)(v12 - 2) >> 1;
              int64_t v75 = v74;
              do
              {
                int64_t v76 = v75;
                if (v74 >= v75)
                {
                  uint64_t v77 = (2 * v75) | 1;
                  uint64_t v78 = &v10[2 * v77];
                  if (2 * v76 + 2 < v12)
                  {
                    unint64_t v80 = v78[2];
                    BOOL v79 = *v78 >= v80;
                    if (*v78 > v80) {
                      unint64_t v80 = *v78;
                    }
                    if (!v79)
                    {
                      v78 += 2;
                      uint64_t v77 = 2 * v76 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v80 = *v78;
                  }
                  unint64_t v81 = &v10[2 * v76];
                  unint64_t v82 = *v81;
                  if (v80 >= *v81)
                  {
                    unint64_t v83 = v81[1];
                    do
                    {
                      uint64_t v84 = v81;
                      unint64_t v81 = v78;
                      unint64_t v85 = v78[1];
                      *uint64_t v84 = v80;
                      v84[1] = v85;
                      if (v74 < v77) {
                        break;
                      }
                      uint64_t v86 = (2 * v77) | 1;
                      uint64_t v78 = &v10[2 * v86];
                      uint64_t v77 = 2 * v77 + 2;
                      if (v77 < v12)
                      {
                        unint64_t v80 = *v78;
                        BOOL result = (unint64_t)(v78 + 2);
                        unint64_t v87 = v78[2];
                        BOOL v88 = *v78 >= v87;
                        if (*v78 <= v87) {
                          unint64_t v80 = v78[2];
                        }
                        if (*v78 < v87) {
                          v78 += 2;
                        }
                        if (v88) {
                          uint64_t v77 = v86;
                        }
                      }
                      else
                      {
                        unint64_t v80 = *v78;
                        uint64_t v77 = v86;
                      }
                    }
                    while (v80 >= v82);
                    *unint64_t v81 = v82;
                    v81[1] = v83;
                  }
                }
                int64_t v75 = v76 - 1;
              }
              while (v76);
              do
              {
                uint64_t v89 = 0;
                unint64_t v90 = *v10;
                unint64_t v91 = v10[1];
                uint64_t v92 = v10;
                do
                {
                  unsigned int v93 = &v92[2 * v89 + 2];
                  uint64_t v94 = (2 * v89) | 1;
                  uint64_t v89 = 2 * v89 + 2;
                  if (v89 < v12)
                  {
                    unint64_t v96 = *v93;
                    BOOL result = v93[2];
                    BOOL v95 = *v93 >= result;
                    if (*v93 <= result) {
                      unint64_t v96 = v93[2];
                    }
                    if (*v93 < result) {
                      v93 += 2;
                    }
                    if (v95) {
                      uint64_t v89 = v94;
                    }
                  }
                  else
                  {
                    unint64_t v96 = *v93;
                    uint64_t v89 = v94;
                  }
                  unint64_t v97 = v93[1];
                  *uint64_t v92 = v96;
                  v92[1] = v97;
                  uint64_t v92 = v93;
                }
                while (v89 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v93 == a2 - 2)
                {
                  unint64_t *v93 = v90;
                  v93[1] = v91;
                }
                else
                {
                  unint64_t v98 = *(a2 - 1);
                  unint64_t *v93 = *(a2 - 2);
                  v93[1] = v98;
                  *(a2 - 2) = v90;
                  *(a2 - 1) = v91;
                  uint64_t v99 = (char *)v93 - (char *)v10 + 16;
                  if (v99 >= 17)
                  {
                    unint64_t v100 = (((unint64_t)v99 >> 4) - 2) >> 1;
                    uint64_t v101 = &v10[2 * v100];
                    unint64_t v102 = *v101;
                    unint64_t v103 = *v93;
                    if (*v101 < *v93)
                    {
                      unint64_t v104 = v93[1];
                      do
                      {
                        BOOL v105 = v93;
                        unsigned int v93 = v101;
                        unint64_t v106 = v101[1];
                        *BOOL v105 = v102;
                        v105[1] = v106;
                        if (!v100) {
                          break;
                        }
                        unint64_t v100 = (v100 - 1) >> 1;
                        uint64_t v101 = &v10[2 * v100];
                        unint64_t v102 = *v101;
                      }
                      while (*v101 < v103);
                      unint64_t *v93 = v103;
                      v93[1] = v104;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            sub_1CC92AD94(v9, &v9[2 * ((unint64_t)v12 >> 1)], a2 - 2);
            sub_1CC92AD94(v9 + 2, v14 - 2, a2 - 4);
            sub_1CC92AD94(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            BOOL result = (unint64_t)sub_1CC92AD94(v14 - 2, v14, &v9[2 * v13 + 2]);
            unint64_t v15 = *v9;
            unint64_t v16 = v9[1];
            unint64_t v17 = v14[1];
            *uint64_t v9 = *v14;
            v9[1] = v17;
            *uint64_t v14 = v15;
            v14[1] = v16;
          }
          else
          {
            BOOL result = (unint64_t)sub_1CC92AD94(&v9[2 * ((unint64_t)v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          unint64_t v18 = *v9;
          if ((a4 & 1) != 0 || *(v9 - 2) < v18) {
            break;
          }
          if (v18 >= *(a2 - 2))
          {
            int v35 = v9 + 2;
            do
            {
              unsigned int v10 = v35;
              if (v35 >= a2) {
                break;
              }
              v35 += 2;
            }
            while (v18 >= *v10);
          }
          else
          {
            unsigned int v10 = v9;
            do
            {
              unint64_t v34 = v10[2];
              v10 += 2;
            }
            while (v18 >= v34);
          }
          uint64_t v36 = a2;
          if (v10 < a2)
          {
            uint64_t v36 = a2;
            do
            {
              unint64_t v37 = *(v36 - 2);
              v36 -= 2;
            }
            while (v18 < v37);
          }
          unint64_t v38 = v9[1];
          if (v10 < v36)
          {
            unint64_t v39 = *v10;
            unint64_t v40 = *v36;
            do
            {
              unint64_t v41 = v10[1];
              unint64_t v42 = v36[1];
              unint64_t *v10 = v40;
              v10[1] = v42;
              *uint64_t v36 = v39;
              v36[1] = v41;
              do
              {
                unint64_t v43 = v10[2];
                v10 += 2;
                unint64_t v39 = v43;
              }
              while (v18 >= v43);
              do
              {
                unint64_t v44 = *(v36 - 2);
                v36 -= 2;
                unint64_t v40 = v44;
              }
              while (v18 < v44);
            }
            while (v10 < v36);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            unint64_t v45 = *(v10 - 1);
            *uint64_t v9 = *(v10 - 2);
            v9[1] = v45;
          }
          a4 = 0;
          *(v10 - 2) = v18;
          *(v10 - 1) = v38;
        }
        uint64_t v19 = 0;
        unint64_t v20 = v9[1];
        do
        {
          unint64_t v21 = v9[v19 + 2];
          v19 += 2;
        }
        while (v21 < v18);
        uint64_t v22 = &v9[v19];
        int v23 = a2;
        if (v19 == 2)
        {
          int v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            unint64_t v25 = *(v23 - 2);
            v23 -= 2;
          }
          while (v25 >= v18);
        }
        else
        {
          do
          {
            unint64_t v24 = *(v23 - 2);
            v23 -= 2;
          }
          while (v24 >= v18);
        }
        if (v22 >= v23)
        {
          unsigned int v10 = &v9[v19];
        }
        else
        {
          unint64_t v26 = *v23;
          unsigned int v10 = &v9[v19];
          int v27 = v23;
          do
          {
            unint64_t v28 = v10[1];
            unint64_t v29 = v27[1];
            unint64_t *v10 = v26;
            v10[1] = v29;
            *int v27 = v21;
            v27[1] = v28;
            do
            {
              unint64_t v30 = v10[2];
              v10 += 2;
              unint64_t v21 = v30;
            }
            while (v30 < v18);
            do
            {
              unint64_t v31 = *(v27 - 2);
              v27 -= 2;
              unint64_t v26 = v31;
            }
            while (v31 >= v18);
          }
          while (v10 < v27);
        }
        if (v10 - 2 != v9)
        {
          unint64_t v32 = *(v10 - 1);
          *uint64_t v9 = *(v10 - 2);
          v9[1] = v32;
        }
        *(v10 - 2) = v18;
        *(v10 - 1) = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        BOOL result = sub_1CC92A674(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v33 = sub_1CC92AE30(v9, v10 - 2);
      BOOL result = sub_1CC92AE30(v10, a2);
      if (result) {
        break;
      }
      if (!v33) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 2;
    if (!v33) {
      continue;
    }
    return result;
  }
}

unint64_t *sub_1CC92AD94(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      unint64_t v8 = *a2;
      unint64_t v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      unint64_t v10 = *result;
      if (v8 < *result)
      {
        unint64_t v11 = result[1];
        unint64_t v12 = a2[1];
        *BOOL result = v8;
        result[1] = v12;
        *a2 = v10;
        a2[1] = v11;
      }
    }
  }
  else if (v5 >= v3)
  {
    unint64_t v13 = result[1];
    unint64_t v14 = a2[1];
    *BOOL result = v3;
    result[1] = v14;
    *a2 = v4;
    a2[1] = v13;
    if (*a3 < v4)
    {
      unint64_t v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      *a3 = v4;
      a3[1] = v13;
    }
  }
  else
  {
    unint64_t v6 = result[1];
    unint64_t v7 = a3[1];
    *BOOL result = v5;
    result[1] = v7;
    *a3 = v4;
    a3[1] = v6;
  }
  return result;
}

BOOL sub_1CC92AE30(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        unint64_t v8 = a1[1];
        unint64_t v9 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1CC92AD94(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CC92B034(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CC92B034(a1, a1 + 2, a1 + 4, a1 + 6);
      unint64_t v21 = *(a2 - 2);
      unint64_t v22 = a1[6];
      if (v21 < v22)
      {
        a1[6] = v21;
        *(a2 - 2) = v22;
        unint64_t v23 = a1[6];
        unint64_t v24 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v24;
        unint64_t v25 = a1[4];
        if (v23 < v25)
        {
          unint64_t v26 = a1[5];
          unint64_t v27 = a1[7];
          a1[4] = v23;
          a1[5] = v27;
          a1[6] = v25;
          a1[7] = v26;
          unint64_t v28 = a1[2];
          if (v23 < v28)
          {
            unint64_t v29 = a1[3];
            a1[2] = v23;
            a1[3] = v27;
            a1[4] = v28;
            a1[5] = v29;
            unint64_t v30 = *a1;
            if (v23 < *a1)
            {
              unint64_t v31 = a1[1];
              *a1 = v23;
              a1[1] = v27;
              a1[2] = v30;
              a1[3] = v31;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = a1 + 4;
      sub_1CC92AD94(a1, a1 + 2, a1 + 4);
      unint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *v11;
    unint64_t v15 = *v10;
    if (*v11 < *v10)
    {
      unint64_t v16 = v11[1];
      uint64_t v17 = v12;
      while (1)
      {
        unint64_t v18 = (unint64_t *)((char *)a1 + v17);
        uint64_t v19 = *(unint64_t *)((char *)a1 + v17 + 40);
        v18[6] = v15;
        v18[7] = v19;
        if (v17 == -32) {
          break;
        }
        unint64_t v15 = v18[2];
        v17 -= 16;
        if (v14 >= v15)
        {
          unint64_t v20 = (unint64_t *)((char *)a1 + v17 + 48);
          goto LABEL_13;
        }
      }
      unint64_t v20 = a1;
LABEL_13:
      *unint64_t v20 = v14;
      v20[1] = v16;
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    unint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

unint64_t *sub_1CC92B034(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  BOOL result = sub_1CC92AD94(a1, a2, a3);
  unint64_t v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unint64_t v10 = *a3;
    unint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unint64_t v12 = *a2;
    if (v10 < *a2)
    {
      *a2 = v10;
      *a3 = v12;
      unint64_t v13 = *a2;
      unint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unint64_t v15 = *a1;
      if (v13 < *a1)
      {
        unint64_t v16 = a1[1];
        unint64_t v17 = a2[1];
        *a1 = v13;
        a1[1] = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

void *sub_1CC92B0D4(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CD5E3DDC(a1, 2 * v6);
    uint64_t v7 = *a2;
    int v8 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v9 = (37 * *a2) & v8;
    a3 = (void *)(*(void *)a1 + 16 * v9);
    uint64_t v10 = *a3;
    if (*a2 == *a3) {
      goto LABEL_8;
    }
    unint64_t v11 = 0;
    int v12 = 1;
    while (v10 != -1)
    {
      if (v11) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v10 == -2;
      }
      if (v20) {
        unint64_t v11 = a3;
      }
      unsigned int v21 = v9 + v12++;
      unsigned int v9 = v21 & v8;
      a3 = (void *)(*(void *)a1 + 16 * v9);
      uint64_t v10 = *a3;
      if (v7 == *a3) {
        goto LABEL_8;
      }
    }
    goto LABEL_5;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
LABEL_7:
    uint64_t v7 = *a3;
    goto LABEL_8;
  }
  sub_1CD5E3DDC(a1, v6);
  uint64_t v7 = *a2;
  int v14 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v15 = (37 * *a2) & v14;
  a3 = (void *)(*(void *)a1 + 16 * v15);
  uint64_t v16 = *a3;
  if (*a2 != *a3)
  {
    unint64_t v11 = 0;
    int v17 = 1;
    while (v16 != -1)
    {
      if (v11) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v16 == -2;
      }
      if (v18) {
        unint64_t v11 = a3;
      }
      unsigned int v19 = v15 + v17++;
      unsigned int v15 = v19 & v14;
      a3 = (void *)(*(void *)a1 + 16 * v15);
      uint64_t v16 = *a3;
      if (v7 == *a3) {
        goto LABEL_8;
      }
    }
LABEL_5:
    if (v11) {
      a3 = v11;
    }
    goto LABEL_7;
  }
LABEL_8:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CC92B24C(uint64_t a1, llvm::ConstantExpr *a2)
{
  v45[8] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    int v5 = 0;
    unsigned int v6 = (llvm::ConstantExpr ***)((char *)a2 + 8);
    while (1)
    {
      uint64_t v7 = *(void *)(v2 + 24);
      uint64_t v2 = *(void *)(v2 + 8);
      uint64_t v8 = *(void *)(*(void *)(v7 + 40) + 56);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 112);
        if (v9)
        {
          if (*(unsigned char *)(v9 + 17)) {
            goto LABEL_78;
          }
        }
      }
      unsigned int v10 = *(unsigned __int8 *)(v7 + 16);
      if (v10 <= 0x3C) {
        break;
      }
      if (v10 != 61)
      {
        if (v10 != 84)
        {
LABEL_42:
          if (v10 - 79 >= 0xFFFFFFF3)
          {
            Cast = llvm::ConstantExpr::getCast((llvm::ConstantExpr *)(v10 - 28), a2, *(llvm::Constant ****)v7, 0);
            int v39 = sub_1CC92B24C(v7, Cast);
            if (!*(void *)(v7 + 8)) {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            v5 |= v39;
          }
          else if (v10 == 62)
          {
            unsigned int v44 = 0;
            unsigned int v31 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
            if (v31 - 1 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v7 - 32 * v31 + 32 != v7)
            {
              uint64_t v32 = 32 - 32 * v31;
              do
              {
                uint64_t v33 = *(void *)(v7 + v32);
                if (v33) {
                  BOOL v34 = *(unsigned __int8 *)(v33 + 16) > 0x14u;
                }
                else {
                  BOOL v34 = 1;
                }
                if (v34) {
                  break;
                }
                if (v44 >= 8uLL) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v45[v44++] = v33;
                v32 += 32;
              }
              while (v32);
              unsigned int v31 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
            }
            if (v44 == v31 - 1)
            {
              uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(void *)(v7 + 64), (uint64_t *)a2, (uint64_t)v45, v44, 0, 0, 0);
              v5 |= sub_1CC92B24C(v7, ElementPtr);
            }
            if (!*(void *)(v7 + 8)) {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
          }
          goto LABEL_64;
        }
LABEL_17:
        int v14 = (llvm::ConstantExpr **)(v7 - 32);
        if (*(void *)(v7 - 32) == a1)
        {
          unsigned int v15 = (llvm::ConstantExpr ***)(v7 - 24);
          **(void **)(v7 - 16) = *(void *)(v7 - 24);
          uint64_t v16 = *(void *)(v7 - 24);
          if (v16) {
            *(void *)(v16 + 16) = *(void *)(v7 - 16);
          }
          *int v14 = a2;
          if (a2)
          {
            int v17 = *v6;
            *unsigned int v15 = *v6;
            if (v17) {
              v17[2] = (llvm::ConstantExpr *)v15;
            }
            *(void *)(v7 - 16) = v6;
            *unsigned int v6 = v14;
          }
          if (v10 == 84) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = 2;
          }
          int v19 = *(_DWORD *)(v7 + 20);
          if (v19 < 0 && (uint64_t v41 = v7 - 32 * (v19 & 0x7FFFFFF), v42 = *(void *)(v41 - 8), (v42 & 0xFFFFFFFF0) != 0))
          {
            uint64_t v21 = -(uint64_t)(v19 & 0x7FFFFFF);
            uint64_t v20 = (*(_DWORD *)(v41 - 12) - *(_DWORD *)(v41 - v42));
          }
          else
          {
            uint64_t v20 = 0;
            uint64_t v21 = -(uint64_t)(v19 & 0x7FFFFFF);
          }
          unint64_t v22 = -32 * v18 - 32 * v20 - 32 * v21 - 32;
          if ((v22 & 0x1FFFFFFFE0) != 0)
          {
            char v23 = 0;
            uint64_t v24 = -(uint64_t)(v22 >> 5);
            uint64_t v25 = v7;
            do
            {
              uint64_t v26 = v25 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
              if (*(void *)v26 == a1)
              {
                unint64_t v27 = (llvm::ConstantExpr ***)(v26 + 8);
                **(void **)(v26 + 16) = *(void *)(v26 + 8);
                uint64_t v28 = *(void *)(v26 + 8);
                if (v28) {
                  *(void *)(v28 + 16) = *(void *)(v26 + 16);
                }
                *(void *)uint64_t v26 = a2;
                if (a2)
                {
                  unint64_t v29 = *v6;
                  *unint64_t v27 = *v6;
                  if (v29) {
                    v29[2] = (llvm::ConstantExpr *)v27;
                  }
                  *(void *)(v26 + 16) = v6;
                  *unsigned int v6 = (llvm::ConstantExpr **)v26;
                }
                char v23 = 1;
              }
              v25 += 32;
            }
            while (!__CFADD__(v24++, 1));
            if (v23) {
              uint64_t v2 = *(void *)(a1 + 8);
            }
          }
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      unint64_t v11 = (llvm::ConstantExpr **)(v7 - 32);
      if (*(void *)(v7 - 32) == a1)
      {
        int v35 = (llvm::ConstantExpr ***)(v7 - 24);
        **(void **)(v7 - 16) = *(void *)(v7 - 24);
        uint64_t v36 = *(void *)(v7 - 24);
        if (v36) {
          *(void *)(v36 + 16) = *(void *)(v7 - 16);
        }
        *unint64_t v11 = a2;
        if (a2)
        {
          unint64_t v37 = *v6;
          unint64_t *v35 = *v6;
          if (v37) {
            void v37[2] = (llvm::ConstantExpr *)v35;
          }
LABEL_62:
          *(void *)(v7 - 16) = v6;
          *unsigned int v6 = v11;
        }
LABEL_63:
        int v5 = 1;
      }
LABEL_64:
      if (!v2) {
        return v5 & 1;
      }
    }
    if (v10 != 33)
    {
      if (v10 != 60) {
        goto LABEL_42;
      }
      unint64_t v11 = (llvm::ConstantExpr **)(v7 - 32);
      if (*(void *)(v7 - 32))
      {
        **(void **)(v7 - 16) = *(void *)(v7 - 24);
        uint64_t v12 = *(void *)(v7 - 24);
        if (v12) {
          *(void *)(v12 + 16) = *(void *)(v7 - 16);
        }
      }
      *unint64_t v11 = a2;
      if (a2)
      {
        unint64_t v13 = *v6;
        *(void *)(v7 - 24) = *v6;
        if (v13) {
          v13[2] = (llvm::ConstantExpr *)(v7 - 24);
        }
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    goto LABEL_17;
  }
LABEL_78:
  LOBYTE(v5) = 0;
  return v5 & 1;
}

uint64_t sub_1CC92B6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 1;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(v2 + 24);
    unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
    if (v5 && v6 >= 0x1C)
    {
      uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 56);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 112);
        if (v9)
        {
          if (*(unsigned char *)(v9 + 17)) {
            return 0;
          }
        }
      }
    }
    if (v6 == 60) {
      goto LABEL_68;
    }
    if (v5 && v6 == 61)
    {
      if (*(void *)(v5 - 64) == a1) {
        return 0;
      }
      goto LABEL_68;
    }
    if (v5 && v6 == 84 || v5 && v6 == 33)
    {
      if (*(void *)(v5 - 32) != a1) {
        return 0;
      }
      goto LABEL_68;
    }
    if (v5 && v6 == 77 || v5 && v6 == 62) {
      goto LABEL_67;
    }
    if (v5 && v6 == 83)
    {
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = *(unsigned int *)(a2 + 20);
      if (v10 == *(void *)a2)
      {
        if (v11)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 8 * v11;
          int v14 = *(void **)(a2 + 8);
          while (*v14 != v5)
          {
            if (*v14 == -2) {
              uint64_t v12 = v14;
            }
            ++v14;
            v13 -= 8;
            if (!v13)
            {
              if (!v12) {
                goto LABEL_35;
              }
              void *v12 = v5;
              --*(_DWORD *)(a2 + 24);
              goto LABEL_67;
            }
          }
          goto LABEL_68;
        }
LABEL_35:
        unsigned int v15 = *(_DWORD *)(a2 + 16);
        if (v11 < v15)
        {
          *(_DWORD *)(a2 + 20) = v11 + 1;
          *(void *)(v10 + 8 * v11) = v5;
LABEL_67:
          if ((sub_1CC92B6E0(v5, a2) & 1) == 0) {
            return 0;
          }
          goto LABEL_68;
        }
      }
      else
      {
        unsigned int v15 = *(_DWORD *)(a2 + 16);
      }
      if (3 * v15 <= 4 * ((int)v11 - *(_DWORD *)(a2 + 24)))
      {
        if (v15 >= 0x40) {
          v15 *= 2;
        }
        else {
          unsigned int v15 = 128;
        }
      }
      else if (v15 - v11 >= v15 >> 3)
      {
LABEL_48:
        unsigned int v18 = v15 - 1;
        unsigned int v19 = (v15 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        uint64_t v20 = (void *)(v10 + 8 * v19);
        uint64_t v21 = *v20;
        if (*v20 != -1)
        {
          unint64_t v22 = 0;
          int v23 = 1;
          while (v21 != v5)
          {
            if (v22) {
              BOOL v24 = 0;
            }
            else {
              BOOL v24 = v21 == -2;
            }
            if (v24) {
              unint64_t v22 = v20;
            }
            unsigned int v25 = v19 + v23++;
            unsigned int v19 = v25 & v18;
            uint64_t v20 = (void *)(v10 + 8 * (v25 & v18));
            uint64_t v21 = *v20;
            if (*v20 == -1) {
              goto LABEL_60;
            }
          }
          goto LABEL_68;
        }
        unint64_t v22 = 0;
LABEL_60:
        if (v22) {
          uint64_t v26 = v22;
        }
        else {
          uint64_t v26 = v20;
        }
        if (*v26 == v5) {
          goto LABEL_68;
        }
        if (*v26 == -2) {
          --*(_DWORD *)(a2 + 24);
        }
        else {
          ++*(_DWORD *)(a2 + 20);
        }
        *uint64_t v26 = v5;
        goto LABEL_67;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v15);
      unsigned int v15 = *(_DWORD *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 8);
      goto LABEL_48;
    }
    if (v6 != 81 || (*(_WORD *)(v5 + 18) & 0x3Eu) - 38 < 4) {
      return 0;
    }
    int v16 = *(_DWORD *)(v5 + 20);
    int v17 = (v16 & 0x40000000) != 0 ? *(void **)(v5 - 8) : (void *)(v5 - 32 * (v16 & 0x7FFFFFF));
    if (*(unsigned char *)(*v17 + 16) != 60 || *(unsigned char *)(v17[4] + 16) != 19) {
      return 0;
    }
LABEL_68:
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 1;
    }
  }
}

uint64_t sub_1CC92B998(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2;
  uint64_t v12 = a2;
  if (a2)
  {
    int v5 = a3 >= 0 ? a3 : a3 + 7;
    int v6 = 1 << (a3 & 7);
    if ((v6 & *(unsigned char *)(a2 + (v5 >> 3) + 24)) != 0)
    {
      uint64_t v8 = *(unsigned int *)(a2 + 8);
      if (v8)
      {
        uint64_t v9 = (uint64_t)v5 >> 3;
        uint64_t v10 = (void *)(a2 + 40);
        int v11 = -1;
        while (!*v10 || (v6 & *(unsigned char *)(*v10 + v9 + 12)) == 0)
        {
          ++v11;
          ++v10;
          if (!--v8) {
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        int v11 = 0;
      }
      return llvm::AttributeList::removeAttributeAtIndex(&v12, a1, v11, a3);
    }
  }
  return v3;
}

uint64_t sub_1CC92BA48(uint64_t a1, llvm::Function *a2)
{
  *(void *)&v40[192] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = (**(uint64_t (***)(void))(a1 + 8))(*(void *)(*(void *)(a1 + 8) + 8));
  sub_1CC92BD28((uint64_t)v34, v3, v4);
  uint64_t v33 = 0;
  unint64_t v30 = &v32;
  uint64_t v31 = 0;
  uint64_t v7 = llvm::Evaluator::EvaluateFunction((uint64_t)v34, a2, &v33, &v30);
  if (v30 != &v32) {
    free(v30);
  }
  if (v7)
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    unsigned int v32 = 0;
    if (v36)
    {
      if (v37)
      {
        uint64_t v24 = 16 * v37;
        uint64_t v8 = v35;
        while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 2;
          v24 -= 16;
          if (!v24) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        uint64_t v8 = v35;
      }
    }
    else
    {
LABEL_5:
      uint64_t v8 = &v35[2 * v37];
    }
    if (v8 == &v35[2 * v37])
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v29 = &v35[2 * v37];
      do
      {
        uint64_t v25 = v8[1];
        unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0 || !v26) {
          unint64_t v26 = (unint64_t)llvm::Evaluator::MutableAggregate::toConstant((llvm::Evaluator::MutableAggregate *)(v25 & 0xFFFFFFFFFFFFFFF8));
        }
        sub_1CD467E2C((uint64_t)&v30, v8)[1] = v26;
        unint64_t v27 = v8 + 2;
        uint64_t v8 = v29;
        if (v27 != v29)
        {
          uint64_t v8 = v27;
          while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v8 += 2;
            if (v8 == v29)
            {
              uint64_t v8 = v29;
              break;
            }
          }
        }
      }
      while (v8 != v29);
      uint64_t v10 = (char *)v30;
      unsigned int v11 = v32;
      uint64_t v9 = (char *)v30 + 16 * v32;
      if (v31)
      {
        if (v32)
        {
          uint64_t v28 = 0;
          while ((*(void *)((char *)v30 + v28) | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v28 += 16;
            if (16 * v32 == v28) {
              goto LABEL_52;
            }
          }
          uint64_t v12 = (llvm::Constant **)((char *)v30 + v28);
        }
        else
        {
          uint64_t v12 = (llvm::Constant **)v30;
        }
      }
      else
      {
LABEL_52:
        uint64_t v12 = (llvm::Constant **)((char *)v30 + 16 * v32);
      }
    }
    uint64_t v13 = &v10[16 * v11];
LABEL_9:
    while (v12 != (llvm::Constant **)v13)
    {
      llvm::GlobalVariable::setInitializer((uint64_t)*v12, v12[1]);
      int v14 = (char *)(v12 + 2);
      uint64_t v12 = (llvm::Constant **)v9;
      if (v14 != v9)
      {
        uint64_t v12 = (llvm::Constant **)v14;
        while (((unint64_t)*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v12 += 2;
          if (v12 == (llvm::Constant **)v9)
          {
            uint64_t v12 = (llvm::Constant **)v9;
            goto LABEL_9;
          }
        }
      }
    }
    if (v39 == v38) {
      unsigned int v15 = &v40[4];
    }
    else {
      unsigned int v15 = v40;
    }
    uint64_t v16 = *(unsigned int *)v15;
    if (v16)
    {
      uint64_t v17 = 8 * v16;
      unsigned int v18 = v39;
      while (*v18 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v18;
        v17 -= 8;
        if (!v17) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      unsigned int v18 = v39;
    }
    unsigned int v19 = &v39[v16];
    if (v18 != v19)
    {
      unint64_t v20 = *v18;
LABEL_26:
      *(unsigned char *)(v20 + 80) |= 1u;
      uint64_t v21 = v18 + 1;
      while (v21 != v19)
      {
        unint64_t v22 = *v21++;
        unint64_t v20 = v22;
        if (v22 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v18 = v21 - 1;
          goto LABEL_26;
        }
      }
    }
LABEL_30:
    MEMORY[0x1D25D9CD0](v10, 8);
  }
  sub_1CC92C014((uint64_t)v34, v5, v6);
  return v7;
}

uint64_t sub_1CC92BD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 48) = a1 + 64;
  *(void *)(a1 + 56) = 0x400000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 136;
  *(void *)(a1 + 128) = 0x2000000000;
  *(void *)(a1 + 392) = a1 + 424;
  *(void *)(a1 + 400) = a1 + 424;
  *(void *)(a1 + 408) = 8;
  *(_DWORD *)(a1 + 416) = 0;
  *(void *)(a1 + 488) = a1 + 520;
  *(void *)(a1 + 496) = a1 + 520;
  *(void *)(a1 + 504) = 8;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 584) = a2;
  *(void *)(a1 + 592) = a3;
  sub_1CC92BDBC((void *)a1);
  return a1;
}

uint64_t sub_1CC92BDBC(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  unint64_t v7 = v6 + v5;
  if (v4 == v6 + v5)
  {
    sub_1CC92BE8C((uint64_t)a1);
    uint64_t v3 = a1[1];
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    unint64_t v7 = v5 + v6;
  }
  unint64_t v8 = *(void *)(v3 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  uint64_t v9 = v6 + 1;
  *(void *)unint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 0;
  a1[5] = v9;
  unint64_t v10 = v9 + v5;
  unsigned int v11 = (void *)(v3 + 8 * (v10 / 0xAA));
  unint64_t v12 = v10 % 0xAA;
  if (v12) {
    uint64_t v13 = *v11 + 24 * v12;
  }
  else {
    uint64_t v13 = *(v11 - 1) + 4080;
  }
  return v13 - 24;
}

void sub_1CC92BE8C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5 - *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = v7 - *(void *)a1;
  if (v6 < v8)
  {
    if (v7 != v5)
    {
      *(void *)&long long v19 = operator new(0xFF0uLL);
      sub_1CD3F23B4(a1, &v19);
      return;
    }
    *(void *)&long long v19 = operator new(0xFF0uLL);
    sub_1CD3F24DC((void **)a1, &v19);
LABEL_15:
    uint64_t v16 = *(void **)(a1 + 8);
    *(void *)&long long v19 = *v16;
    *(void *)(a1 + 8) = v16 + 1;
    sub_1CB904CD8(a1, &v19);
    return;
  }
  if (v7 == *(void *)a1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v8 >> 2;
  }
  uint64_t v21 = a1 + 24;
  if (v9 >> 61) {
    sub_1CB833614();
  }
  *(void *)&long long v19 = operator new(8 * v9);
  *((void *)&v19 + 1) = v19 + v6;
  *(void *)&long long v20 = v19 + v6;
  *((void *)&v20 + 1) = v19 + 8 * v9;
  unsigned int v18 = operator new(0xFF0uLL);
  sub_1CD4A54E0((uint64_t)&v19, &v18);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a1 + 8))
  {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  else
  {
    do
    {
      uint64_t v17 = v10 - 8;
      sub_1CD3F24DC((void **)&v19, (void *)(v10 - 8));
      uint64_t v10 = v17;
    }
    while (v17 != *(void *)(a1 + 8));
    uint64_t v11 = *(void *)(a1 + 16);
  }
  unint64_t v12 = *(void **)a1;
  long long v13 = v19;
  long long v14 = v20;
  *(void *)&long long v19 = *(void *)a1;
  *((void *)&v19 + 1) = v10;
  uint64_t v15 = *(void *)(a1 + 24);
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = v14;
  *(void *)&long long v20 = v11;
  *((void *)&v20 + 1) = v15;
  if (v11 != v10) {
    *(void *)&long long v20 = v11 + ((v10 - v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v12) {
    operator delete(v12);
  }
}

uint64_t sub_1CC92C014(uint64_t a1, llvm::Type *a2, const llvm::APFloat *a3)
{
  unint64_t v6 = *(llvm::Constant ****)(a1 + 120);
  uint64_t v4 = a1 + 120;
  uint64_t v5 = v6;
  uint64_t v7 = *(unsigned int *)(v4 + 8);
  if (v7)
  {
    uint64_t v10 = 8 * v7;
    do
    {
      uint64_t v15 = v5;
      uint64_t v16 = v4;
      uint64_t v11 = *v5;
      if ((*v5)[1])
      {
        NullValue = llvm::Constant::getNullValue(*v11, a2, a3);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, NullValue, (llvm::Value *)1);
      }
      uint64_t v4 = v16;
      uint64_t v5 = v15 + 1;
      v10 -= 8;
    }
    while (v10);
  }
  if (*(void *)(a1 + 496) != *(void *)(a1 + 488))
  {
    uint64_t v13 = v4;
    free(*(void **)(a1 + 496));
    uint64_t v4 = v13;
  }
  if (*(void *)(a1 + 400) != *(void *)(a1 + 392))
  {
    uint64_t v14 = v4;
    free(*(void **)(a1 + 400));
    uint64_t v4 = v14;
  }
  sub_1CC92C108((void **)v4);
  sub_1CC92C300((uint64_t *)(a1 + 96));
  uint64_t v8 = *(void **)(a1 + 48);
  if (v8 != (void *)(a1 + 64)) {
    free(v8);
  }

  return sub_1CC92C374(a1);
}

void **sub_1CC92C108(void **result)
{
  uint64_t v1 = (void **)*result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    unint64_t v6 = result;
    uint64_t v3 = 8 * v2;
    uint64_t v4 = (char *)(v1 - 1);
    do
    {
      sub_1CC92C184((uint64_t *)&v4[v3], 0);
      v3 -= 8;
    }
    while (v3);
    BOOL result = v6;
    uint64_t v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    uint64_t v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

void sub_1CC92C184(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (!v2) {
    return;
  }
  int v3 = *(_DWORD *)(v2 + 20);
  if ((v3 & 0x40000000) != 0)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    uint64_t v4 = v3 & 0x7FFFFFF;
    if ((*(_DWORD *)(v2 + 20) & 0x7FFFFFF) != 0)
    {
LABEL_4:
      uint64_t v6 = 32 * v4;
      uint64_t v7 = (void **)(v5 + 16);
      do
      {
        if (*(v7 - 2))
        {
          **uint64_t v7 = *(v7 - 1);
          uint64_t v8 = (uint64_t)*(v7 - 1);
          if (v8) {
            *(void *)(v8 + 16) = *v7;
          }
        }
        *(v7 - 2) = 0;
        v7 += 4;
        v6 -= 32;
      }
      while (v6);
      int v3 = *(_DWORD *)(v2 + 20);
    }
  }
  else
  {
    uint64_t v4 = v3 & 0x7FFFFFF;
    uint64_t v5 = v2 - 32 * v4;
    if ((*(_DWORD *)(v2 + 20) & 0x7FFFFFF) != 0) {
      goto LABEL_4;
    }
  }
  if ((v3 & 0x20000000) != 0)
  {
    unint64_t v9 = (int32x2_t *)(***(void ***)v2 + 2480);
    uint64_t v20 = v2;
    sub_1CC6035CC(v9, &v20);
    *(_DWORD *)(v2 + 20) &= ~0x20000000u;
  }
  uint64_t v10 = *(void *)(v2 + 48);
  if (v10) {
    llvm::Comdat::removeUser(v10, v2);
  }
  *(void *)(v2 + 48) = 0;
  llvm::Constant::removeDeadConstantUsers(v2);
  llvm::Value::~Value((llvm::Value *)v2, v11);
  int v12 = *(_DWORD *)(v2 + 20);
  unsigned int v13 = v12 & 0xF8000000 | 1;
  *(_DWORD *)(v2 + 20) = v13;
  if ((v12 & 0x40000000) != 0)
  {
    unsigned int v18 = *(void **)(v2 - 8);
    uint64_t v17 = (void *)(v2 - 8);
    uint64_t v16 = v18;
    if (*v18)
    {
      *(void *)v16[2] = v16[1];
      uint64_t v19 = v16[1];
      if (v19) {
        *(void *)(v19 + 16) = v16[2];
      }
    }
    operator delete(v16);
    uint64_t v14 = v17;
  }
  else
  {
    uint64_t v14 = (void *)(v2 - 32);
    if (*(void *)(v2 - 32))
    {
      **(void **)(v2 - 16) = *(void *)(v2 - 24);
      uint64_t v15 = *(void *)(v2 - 24);
      if (v15) {
        *(void *)(v15 + 16) = *(void *)(v2 - 16);
      }
    }
    if ((v13 & 0x80000000) != 0) {
      uint64_t v14 = (void *)(v2 - 40 - *(void *)(v2 - 40));
    }
  }

  operator delete(v14);
}

uint64_t *sub_1CC92C300(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    uint64_t v6 = (void *)(v3 + 8);
    do
    {
      if ((*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        llvm::Evaluator::MutableValue::clear(v6);
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t sub_1CC92C374(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0xAA];
    uint64_t v7 = (char *)*v6 + 24 * (v5 % 0xAA);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v5) % 0xAA);
    if (v7 != (char *)v8)
    {
      do
      {
        uint64_t v9 = *(void *)v7;
        v7 += 24;
        MEMORY[0x1D25D9CD0](v9, 8);
        if (v7 - (unsigned char *)*v6 == 4080)
        {
          uint64_t v10 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_11;
    }
    uint64_t v13 = 170;
  }
  *(void *)(a1 + 32) = v13;
LABEL_11:
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_1CC92C4EC(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(a1 + 32) & 0xFu) - 7 > 1) {
    return 1;
  }
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 == *a2)
  {
    uint64_t v4 = *((unsigned int *)a2 + 5);
    unint64_t v5 = (void *)(v2 + 8 * v4);
    if (v4)
    {
      uint64_t v6 = 0;
      while (*(void *)(v2 + v6) != a1)
      {
        v6 += 8;
        if (8 * v4 == v6) {
          goto LABEL_20;
        }
      }
      unint64_t v5 = (void *)(v2 + v6);
    }
LABEL_20:
    uint64_t v3 = a2[1];
  }
  else
  {
    uint64_t v7 = *((unsigned int *)a2 + 4);
    int v8 = v7 - 1;
    unsigned int v9 = (v7 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    unint64_t v5 = (void *)(v2 + 8 * v9);
    uint64_t v10 = *v5;
    if (*v5 == -1)
    {
      unint64_t v11 = 0;
LABEL_22:
      if (v11) {
        unint64_t v5 = v11;
      }
      if (*v5 != a1)
      {
        LODWORD(v4) = *((_DWORD *)a2 + 5);
        unint64_t v5 = (void *)(v2 + 8 * v7);
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v11 = 0;
      int v12 = 1;
      while (v10 != a1)
      {
        if (v11) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = v10 == -2;
        }
        if (v13) {
          unint64_t v11 = v5;
        }
        unsigned int v14 = v9 + v12++;
        unsigned int v9 = v14 & v8;
        unint64_t v5 = (void *)(v2 + 8 * (v14 & v8));
        uint64_t v10 = *v5;
        if (*v5 == -1) {
          goto LABEL_22;
        }
      }
    }
    LODWORD(v4) = *((_DWORD *)a2 + 5);
  }
LABEL_27:
  if (v2 == v3) {
    unsigned int v15 = v4;
  }
  else {
    unsigned int v15 = *((_DWORD *)a2 + 4);
  }
  if (v5 != (void *)(v2 + 8 * v15)) {
    return 1;
  }
  uint64_t v18 = a2[8];
  uint64_t v17 = a2[9];
  if (v17 == v18)
  {
    uint64_t v19 = *((unsigned int *)a2 + 21);
    uint64_t v20 = (void *)(v17 + 8 * v19);
    if (v19)
    {
      uint64_t v21 = 0;
      while (*(void *)(v17 + v21) != a1)
      {
        v21 += 8;
        if (8 * v19 == v21) {
          goto LABEL_50;
        }
      }
      uint64_t v20 = (void *)(v17 + v21);
    }
LABEL_50:
    uint64_t v18 = a2[9];
    goto LABEL_57;
  }
  uint64_t v22 = *((unsigned int *)a2 + 20);
  int v23 = v22 - 1;
  unsigned int v24 = (v22 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v20 = (void *)(v17 + 8 * v24);
  uint64_t v25 = *v20;
  if (*v20 != -1)
  {
    unint64_t v26 = 0;
    int v27 = 1;
    while (v25 != a1)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -2;
      }
      if (v28) {
        unint64_t v26 = v20;
      }
      unsigned int v29 = v24 + v27++;
      unsigned int v24 = v29 & v23;
      uint64_t v20 = (void *)(v17 + 8 * (v29 & v23));
      uint64_t v25 = *v20;
      if (*v20 == -1) {
        goto LABEL_52;
      }
    }
LABEL_56:
    LODWORD(v19) = *((_DWORD *)a2 + 21);
    goto LABEL_57;
  }
  unint64_t v26 = 0;
LABEL_52:
  if (v26) {
    uint64_t v20 = v26;
  }
  if (*v20 == a1) {
    goto LABEL_56;
  }
  LODWORD(v19) = *((_DWORD *)a2 + 21);
  uint64_t v20 = (void *)(v17 + 8 * v22);
LABEL_57:
  if (v17 == v18) {
    unsigned int v30 = v19;
  }
  else {
    unsigned int v30 = *((_DWORD *)a2 + 20);
  }
  return v20 != (void *)(v17 + 8 * v30);
}

uint64_t sub_1CC92C6E4(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = (void *)(result + 32);
  *(void *)BOOL result = result + 32;
  *(void *)(result + 8) = result + 32;
  *(void *)(result + 16) = 4;
  *(_DWORD *)(result + 24) = 0;
  if (a2 != a3)
  {
    unsigned int v4 = 4;
    unint64_t v5 = (void *)(result + 32);
    while (1)
    {
      uint64_t v6 = *a2;
      uint64_t v7 = *(unsigned int *)(result + 20);
      if (v5 != v3) {
        break;
      }
      if (v7)
      {
        int v8 = 0;
        uint64_t v9 = 8 * v7;
        uint64_t v10 = v3;
        while (*v10 != v6)
        {
          if (*v10 == -2) {
            int v8 = v10;
          }
          ++v10;
          v9 -= 8;
          if (!v9)
          {
            if (!v8) {
              goto LABEL_12;
            }
            *int v8 = v6;
            --*(_DWORD *)(result + 24);
            goto LABEL_14;
          }
        }
        goto LABEL_14;
      }
LABEL_12:
      if (v7 >= v4) {
        break;
      }
      *(_DWORD *)(result + 20) = v7 + 1;
      v3[v7] = v6;
LABEL_14:
      uint64_t v3 = *(void **)result;
      unint64_t v5 = *(void **)(result + 8);
      if (++a2 == a3) {
        return result;
      }
    }
    if (3 * v4 <= 4 * ((int)v7 - *(_DWORD *)(result + 24)))
    {
      if (v4 >= 0x40) {
        v4 *= 2;
      }
      else {
        unsigned int v4 = 128;
      }
    }
    else if (v4 - v7 >= v4 >> 3)
    {
      goto LABEL_18;
    }
    uint64_t v23 = result;
    uint64_t v21 = *a2;
    uint64_t v22 = a2;
    uint64_t v20 = a3;
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)result, v4);
    uint64_t v6 = v21;
    a2 = v22;
    BOOL result = v23;
    a3 = v20;
    unsigned int v4 = *(_DWORD *)(v23 + 16);
    unint64_t v5 = *(void **)(v23 + 8);
LABEL_18:
    unsigned int v11 = v4 - 1;
    unsigned int v12 = (v4 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    BOOL v13 = &v5[v12];
    uint64_t v14 = *v13;
    if (*v13 == -1)
    {
      unsigned int v15 = 0;
LABEL_28:
      if (v15) {
        uint64_t v19 = v15;
      }
      else {
        uint64_t v19 = v13;
      }
      if (*v19 != v6)
      {
        if (*v19 == -2) {
          --*(_DWORD *)(result + 24);
        }
        else {
          ++*(_DWORD *)(result + 20);
        }
        *uint64_t v19 = v6;
      }
    }
    else
    {
      unsigned int v15 = 0;
      int v16 = 1;
      while (v14 != v6)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          unsigned int v15 = v13;
        }
        unsigned int v18 = v12 + v16++;
        unsigned int v12 = v18 & v11;
        BOOL v13 = &v5[v18 & v11];
        uint64_t v14 = *v13;
        if (*v13 == -1) {
          goto LABEL_28;
        }
      }
    }
    goto LABEL_14;
  }
  return result;
}

void sub_1CC92C8AC(llvm::GlobalVariable *this, uint64_t a2)
{
  v17[8] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 20) == *(_DWORD *)(a2 + 24))
  {
    llvm::GlobalVariable::eraseFromParent(this);
  }
  unsigned int v4 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)this + 1912), 0);
  unsigned int v16 = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 == *(void *)a2) {
    uint64_t v6 = (unsigned int *)(a2 + 20);
  }
  else {
    uint64_t v6 = (unsigned int *)(a2 + 16);
  }
  uint64_t v7 = *v6;
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    uint64_t v9 = *(unint64_t **)(a2 + 8);
    while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v9;
      v8 -= 8;
      if (!v8) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v9 = *(unint64_t **)(a2 + 8);
  }
  uint64_t v10 = (unint64_t *)(v5 + 8 * v7);
  if (v9 != v10)
  {
    unsigned int v11 = (llvm::ConstantExpr *)*v9;
    while (1)
    {
      PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(v11, v4, v3);
      if (v16 >= 8uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v17[v16] = PointerBitCastOrAddrSpaceCast;
      size_t v13 = ++v16;
      uint64_t v14 = v9 + 1;
      do
      {
        if (v14 == v10)
        {
          if (v13 >= 2)
          {
            qsort(v17, v13, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CC92CD5C);
            LODWORD(v13) = v16;
          }
LABEL_25:
          llvm::ArrayType::get(v4, (llvm::Type *)v13);
          llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList();
        }
        unint64_t v15 = *v14++;
        unsigned int v11 = (llvm::ConstantExpr *)v15;
      }
      while (v15 > 0xFFFFFFFFFFFFFFFDLL);
      uint64_t v9 = v14 - 1;
    }
  }
LABEL_22:
  LODWORD(v13) = 0;
  goto LABEL_25;
}

uint64_t sub_1CC92CD5C(llvm::Value **a1, llvm::Value **a2)
{
  uint64_t v3 = llvm::Value::stripPointerCasts(*a1);
  unsigned int v4 = llvm::Value::stripPointerCasts(*a2);
  if ((*((unsigned char *)v3 + 23) & 0x10) != 0)
  {
    uint64_t v5 = ***(void ***)v3;
    uint64_t v6 = *(void *)(v5 + 152);
    uint64_t v7 = *(unsigned int *)(v5 + 168);
    if (v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v9 = (llvm::Value **)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 == v3)
      {
LABEL_9:
        size_t v13 = v9[1];
        size_t v16 = *(void *)v13;
        uint64_t v14 = (char *)v13 + 16;
        size_t v15 = v16;
        goto LABEL_10;
      }
      int v11 = 1;
      while (v10 != (llvm::Value *)-4096)
      {
        int v12 = v8 + v11++;
        uint64_t v8 = v12 & (v7 - 1);
        uint64_t v10 = *(llvm::Value **)(v6 + 16 * v8);
        if (v10 == v3)
        {
          uint64_t v9 = (llvm::Value **)(v6 + 16 * v8);
          goto LABEL_9;
        }
      }
    }
    uint64_t v9 = (llvm::Value **)(v6 + 16 * v7);
    goto LABEL_9;
  }
  size_t v15 = 0;
  uint64_t v14 = &byte_1CFBCE98E;
LABEL_10:
  if ((*((unsigned char *)v4 + 23) & 0x10) != 0)
  {
    uint64_t v17 = ***(void ***)v4;
    uint64_t v18 = *(void *)(v17 + 152);
    uint64_t v19 = *(unsigned int *)(v17 + 168);
    if (v19)
    {
      LODWORD(v20) = (v19 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v21 = (llvm::Value **)(v18 + 16 * v20);
      uint64_t v22 = *v21;
      if (*v21 == v4)
      {
LABEL_18:
        uint64_t v25 = v21[1];
        size_t v28 = *(void *)v25;
        unint64_t v26 = (char *)v25 + 16;
        size_t v27 = v28;
        goto LABEL_19;
      }
      int v23 = 1;
      while (v22 != (llvm::Value *)-4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v19 - 1);
        uint64_t v22 = *(llvm::Value **)(v18 + 16 * v20);
        if (v22 == v4)
        {
          uint64_t v21 = (llvm::Value **)(v18 + 16 * v20);
          goto LABEL_18;
        }
      }
    }
    uint64_t v21 = (llvm::Value **)(v18 + 16 * v19);
    goto LABEL_18;
  }
  size_t v27 = 0;
  unint64_t v26 = &byte_1CFBCE98E;
LABEL_19:
  if (v27 >= v15) {
    size_t v29 = v15;
  }
  else {
    size_t v29 = v27;
  }
  if (v29)
  {
    int v30 = memcmp(v14, v26, v29);
    if (v30) {
      return (v30 >> 31) | 1u;
    }
  }
  if (v15 < v27) {
    unsigned int v32 = -1;
  }
  else {
    unsigned int v32 = 1;
  }
  if (v15 == v27) {
    return 0;
  }
  else {
    return v32;
  }
}

char *sub_1CC92CEDC(void *a1, unsigned int a2)
{
  if (((*(void *)(a1[1] + 8 * (a2 >> 6)) >> a2) & 1) != 0
    || ((*(unsigned __int8 *)(*a1 + ((unint64_t)a2 >> 2)) >> (2 * (a2 & 3))) & 3) == 0)
  {
    return 0;
  }
  if (((*(unsigned __int8 *)(*a1 + ((unint64_t)a2 >> 2)) >> (2 * (a2 & 3))) & 3) == 3) {
    return (&llvm::TargetLibraryInfoImpl::StandardNames)[2 * a2];
  }
  uint64_t v3 = (uint64_t *)(*a1 + 120);
  unsigned int v5 = a2;
  unsigned int v4 = sub_1CD666828(v3, &v5);
  if (*((char *)v4 + 31) >= 0) {
    return (char *)(v4 + 2);
  }
  else {
    return (char *)*((void *)v4 + 1);
  }
}

void sub_1CC92CF90()
{
}

void sub_1CC92CFD0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC92D008(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
}

uint64_t sub_1CC92D080(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }
  uint64_t v8 = a1;
  uint64_t v6 = a1;
  uint64_t v7 = a1;
  unsigned int v5 = a1;
  return sub_1CC920998(a2, a2 + 34, (uint64_t (*)(void))sub_1CC92D124, (uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t))sub_1CC92D44C, (uint64_t)&v6, (uint64_t (*)(uint64_t, void *))sub_1CC92D4EC, (uint64_t)&v5, sub_1CC92D574, (uint64_t)&v8);
}

void sub_1CC92D124(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)int v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

uint64_t *sub_1CC92D44C(uint64_t a1, const Function *a2)
{
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetTransformInfoWrapperPass::ID);

  return llvm::TargetTransformInfoWrapperPass::getTTI(v7, a2);
}

uint64_t sub_1CC92D4EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

uint64_t sub_1CC92D574(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::DominatorTreeWrapperPass::ID)
       + 32;
}

void sub_1CC92D5FC()
{
}

void sub_1CC92D628()
{
}

void sub_1CC92D654()
{
}

void sub_1CC92D680()
{
}

uint64_t sub_1CC92D6AC()
{
  v1.n128_u64[0] = (unint64_t)"Enable stress test of coldcc by adding calling conv to all internal functions.";
  v1.n128_u64[1] = 78;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  int v5 = 1;
  sub_1CD66689C(&v1, (char **)&v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCDFAB0, &dword_1CB82C000);
  int v5 = 1;
  int v2 = 1;
  int v3 = 2;
  uint64_t v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Maximum block frequency, expressed as a percentage of caller's entry frequency, for"
                                     " a call site to be considered cold for enablingcoldcc";
  v1.n128_u64[1] = 136;
  sub_1CD666A14(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCDFB70, &dword_1CB82C000);
}

void llvm::initializeGlobalSplitPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDFC38, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC92D7F8;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCDFC38, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC92D7F8()
{
}

void llvm::createGlobalSplitPass(llvm *this)
{
}

uint64_t sub_1CC92D8D0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDFC30;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F26285D0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDFC38, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC92D7F8;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDFC38, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC92D980(uint64_t a1)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  __n128 v1 = *(uint64_t **)(a1 + 112);
  unsigned int v2 = *((_DWORD *)v1 + 8);
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  if (v2 <= 0xD) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = 14;
  }
  uint64_t v5 = *((unsigned int *)v1 + 2);
  uint64_t v151 = v5;
  if (!v5) {
    goto LABEL_20;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aLlvmTypeTest[v6++];
  while (v4 != v6);
  unsigned int v8 = v5 - 1;
  uint64_t v9 = *v1;
  uint64_t v10 = *v1 + 8 * v5 + 8;
  int v11 = 1;
  int v12 = v7;
  while (1)
  {
    uint64_t v13 = v12 & v8;
    uint64_t v14 = *(void **)(v9 + 8 * v13);
    if (v14 != (void *)-8)
    {
      if (!v14) {
        goto LABEL_21;
      }
      if (*(_DWORD *)(v10 + 4 * v13) == v7
        && v4 == *v14
        && !memcmp("llvm.type.test", (char *)v14 + *((unsigned int *)v1 + 5), v4))
      {
        break;
      }
    }
    int v12 = v11 + v13;
    ++v11;
  }
  if (v13 == -1)
  {
LABEL_21:
    uint64_t v149 = 0;
    uint64_t v5 = v151;
    goto LABEL_22;
  }
  uint64_t v5 = v151;
  if ((int)v13 != v151 && (uint64_t v15 = *(void *)(*(void *)(v9 + 8 * (int)v13) + 8)) != 0)
  {
    if (*(unsigned char *)(v15 + 16)) {
      uint64_t v15 = 0;
    }
    uint64_t v149 = v15;
  }
  else
  {
LABEL_20:
    uint64_t v149 = 0;
  }
LABEL_22:
  if (v2 <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = v2;
  }
  if (v2 <= 0x15) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = 22;
  }
  if (!v5) {
    goto LABEL_41;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  do
    int v19 = 33 * v19 + aLlvmTypeChecke[v18++];
  while (v17 != v18);
  unsigned int v20 = v5 - 1;
  uint64_t v21 = *v1;
  uint64_t v22 = *v1 + 8 * v5 + 8;
  int v23 = 1;
  int v24 = v19;
  while (1)
  {
    uint64_t v25 = v24 & v20;
    long long v26 = *(void **)(v21 + 8 * v25);
    if (v26 != (void *)-8)
    {
      if (!v26) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v22 + 4 * v25) == v19
        && v17 == *v26
        && !memcmp("llvm.type.checked.load", (char *)v26 + *((unsigned int *)v1 + 5), v17))
      {
        break;
      }
    }
    int v24 = v23 + v25;
    ++v23;
  }
  if (v25 == -1)
  {
LABEL_42:
    uint64_t v28 = 0;
    uint64_t v5 = v151;
    goto LABEL_43;
  }
  uint64_t v5 = v151;
  if ((int)v25 != v151 && (uint64_t v27 = *(void *)(*(void *)(v21 + 8 * (int)v25) + 8)) != 0)
  {
    if (*(unsigned char *)(v27 + 16)) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *(void *)(*(void *)(v21 + 8 * (int)v25) + 8);
    }
  }
  else
  {
LABEL_41:
    uint64_t v28 = 0;
  }
LABEL_43:
  if (v2 <= 1) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v2;
  }
  if (v2 <= 0x1E) {
    size_t v30 = v29;
  }
  else {
    size_t v30 = 31;
  }
  if (!v5) {
    goto LABEL_72;
  }
  uint64_t v31 = 0;
  int v32 = 0;
  do
    int v32 = 33 * v32 + aLlvmTypeChecke_0[v31++];
  while (v30 != v31);
  unsigned int v33 = v5 - 1;
  uint64_t v34 = *v1;
  uint64_t v35 = *v1 + 8 * v5 + 8;
  int v36 = 1;
  int v37 = v32;
  while (1)
  {
    uint64_t v38 = v37 & v33;
    uint64_t v39 = *(void *)(v34 + 8 * v38);
    if (v39 != -8)
    {
      if (!v39) {
        goto LABEL_73;
      }
      if (*(_DWORD *)(v35 + 4 * v38) == v32
        && v30 == *(void *)v39
        && !memcmp("llvm.type.checked.load.relative", (const void *)(v39 + *((unsigned int *)v1 + 5)), v30))
      {
        break;
      }
    }
    int v37 = v36 + v38;
    ++v36;
  }
  if (v38 == -1)
  {
LABEL_72:
    uint64_t v39 = 0;
LABEL_73:
    uint64_t v40 = v149;
    goto LABEL_74;
  }
  uint64_t v40 = v149;
  if ((int)v38 == v151)
  {
    uint64_t v39 = 0;
    if (!v149) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  uint64_t v39 = *(void *)(*(void *)(v34 + 8 * (int)v38) + 8);
  if (!v39)
  {
LABEL_74:
    if (!v40) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (*(unsigned char *)(v39 + 16)) {
    uint64_t v39 = 0;
  }
  if (!v149)
  {
LABEL_76:
    if ((!v28 || !*(void *)(v28 + 8)) && (!v39 || !*(void *)(v39 + 8))) {
      return 0;
    }
    goto LABEL_80;
  }
LABEL_75:
  if (!*(void *)(v40 + 8)) {
    goto LABEL_76;
  }
LABEL_80:
  uint64_t v41 = *(void *)(a1 + 16);
  while (v41 != a1 + 8)
  {
    uint64_t v42 = (uint64_t **)(v41 - 56);
    BOOL v114 = v41 == 0;
    uint64_t v41 = *(void *)(v41 + 8);
    if (v114) {
      unint64_t v43 = 0;
    }
    else {
      unint64_t v43 = v42;
    }
    if ((v43[4] & 0xFu) - 7 <= 1)
    {
      uint64_t v44 = (uint64_t)*(v43 - 4);
      if (v44)
      {
        if (*(unsigned char *)(v44 + 16) == 9)
        {
          unint64_t v45 = v43[1];
          if (!v45)
          {
LABEL_109:
            int v167 = v169;
            uint64_t v168 = 0x200000000;
            llvm::Value::getMetadata((unsigned int *)v43, 19, (uint64_t)&v167);
            StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)(v43[5] + 34), *(llvm::StructType **)v44);
            uint64_t v152 = *(void *)**v43;
            int v59 = *(_DWORD *)(v44 + 20);
            unint64_t v60 = v59 & 0x7FFFFFF;
            if ((v59 & 0x7FFFFFF) == 0)
            {
              unint64_t v62 = 0;
              int v61 = 0;
LABEL_188:
              int v122 = v43[1];
              if (v122)
              {
                unint64_t v123 = (v62 - v61) >> 3;
                do
                {
                  uint64_t v124 = v122[3];
                  int v125 = *(_DWORD *)(v124 + 20);
                  if ((v125 & 0x40000000) != 0) {
                    uint64_t v126 = *(void *)(v124 - 8);
                  }
                  else {
                    uint64_t v126 = v124 - 32 * (v125 & 0x7FFFFFF);
                  }
                  uint64_t v127 = *(void *)(v126 + 64);
                  int v128 = (unsigned int *)(v127 + 24);
                  if (*(_DWORD *)(v127 + 32) >= 0x41u) {
                    int v128 = *(unsigned int **)v128;
                  }
                  unint64_t v129 = *v128;
                  if (v129 < v123)
                  {
                    uint64_t v157 = &v159;
                    uint64_t v158 = 0x400000000;
                    uint64_t v130 = *(llvm::ConstantInt **)(v152 + 1960);
                    unsigned int v131 = *(_DWORD *)(v152 + 1968);
                    LODWORD(v164) = v131 >> 8;
                    if (v131 >> 8 >= 0x41) {
                      operator new[]();
                    }
                    uint64_t v163 = 0;
                    uint64_t v132 = llvm::ConstantInt::get(v130, (llvm::LLVMContext *)&v163, v58);
                    if (v164 >= 0x41 && v163) {
                      MEMORY[0x1D25D9CB0](v163, 0x1000C8000313F17);
                    }
                    if (v158 >= (unint64_t)HIDWORD(v158)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v157 + v158) = v132;
                    unsigned int v133 = v158 + 1;
                    LODWORD(v158) = v158 + 1;
                    int v134 = *(_DWORD *)(v124 + 20);
                    unsigned int v135 = v134 & 0x7FFFFFF;
                    if ((v134 & 0x7FFFFFF) != 3)
                    {
                      unsigned int v137 = 3;
                      do
                      {
                        if ((v134 & 0x40000000) != 0) {
                          uint64_t v138 = *(void *)(v124 - 8);
                        }
                        else {
                          uint64_t v138 = v124 - 32 * v135;
                        }
                        if (v133 >= HIDWORD(v158)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v157 + v133) = *(void *)(v138 + 32 * v137);
                        unsigned int v133 = v158 + 1;
                        LODWORD(v158) = v158 + 1;
                        ++v137;
                        int v134 = *(_DWORD *)(v124 + 20);
                        unsigned int v135 = v134 & 0x7FFFFFF;
                      }
                      while (v137 != (v134 & 0x7FFFFFF));
                    }
                    uint64_t ElementPtr = (llvm::Value *)llvm::ConstantExpr::getGetElementPtr(**(void **)(*(void *)&v61[8 * v129] - 32), *(uint64_t **)&v61[8 * v129], (uint64_t)v157, v133, (*(unsigned char *)(v124 + 17) & 2) != 0, 0, 0);
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v124, ElementPtr, (llvm::Value *)1);
                    if (v157 != &v159) {
                      free(v157);
                    }
                  }
                  int v122 = (uint64_t *)v122[1];
                }
                while (v122);
                if (v43[1])
                {
                  uint64_t v139 = llvm::UndefValue::get((llvm::UndefValue *)*v43, v57);
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v43, v139, (llvm::Value *)1);
                }
              }
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v43);
            }
            int v61 = (char *)operator new(8 * v60);
            bzero(v61, 8 * v60);
            unint64_t v62 = &v61[8 * v60];
            if ((*(_DWORD *)(v44 + 20) & 0x7FFFFFF) == 0) {
              goto LABEL_188;
            }
            BOOL v141 = &v61[8 * v60];
            LODWORD(v60) = 0;
            unint64_t v142 = (char *)StructLayout + 16;
            unsigned int v144 = (v43 >> 4) ^ (v43 >> 9);
            uint64_t v145 = v44;
            uint64_t v146 = v61;
            while (2)
            {
              BOOL v63 = (char *)operator new(0x78uLL);
              uint64_t v64 = (unint64_t *)(v63 + 32);
              *((_DWORD *)v63 + 13) = *((_DWORD *)v63 + 13) & 0x38000000 | 1;
              *(void *)BOOL v63 = 0;
              *((void *)v63 + 1) = 0;
              *((void *)v63 + 2) = 0;
              *((void *)v63 + 3) = v63 + 32;
              if ((*((unsigned char *)v43 + 23) & 0x10) != 0)
              {
                uint64_t v65 = *(void *)**v43;
                uint64_t v66 = *(void *)(v65 + 152);
                uint64_t v67 = *(unsigned int *)(v65 + 168);
                if (v67)
                {
                  LODWORD(v68) = (v67 - 1) & v144;
                  unint64_t v69 = (uint64_t ***)(v66 + 16 * v68);
                  uint64_t v70 = *v69;
                  if (*v69 != v43)
                  {
                    int v71 = 1;
                    do
                    {
                      if (v70 == (uint64_t **)-4096) {
                        goto LABEL_119;
                      }
                      int v72 = v68 + v71++;
                      uint64_t v68 = v72 & (v67 - 1);
                      uint64_t v70 = *(uint64_t ***)(v66 + 16 * v68);
                    }
                    while (v70 != v43);
                    unint64_t v69 = (uint64_t ***)(v66 + 16 * v68);
                  }
                }
                else
                {
LABEL_119:
                  unint64_t v69 = (uint64_t ***)(v66 + 16 * v67);
                }
                unint64_t v73 = v69[1];
                int64_t v76 = *v73;
                int64_t v75 = (char *)(v73 + 2);
                uint64_t v74 = (uint64_t)v76;
              }
              else
              {
                uint64_t v74 = 0;
                int64_t v75 = &byte_1CFBCE98E;
              }
              uint64_t v77 = (uint64_t)v43[5];
              uint64_t v78 = *(llvm::PointerType ***)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF) + 32 * v60);
              BOOL v79 = *v78;
              char v80 = *((unsigned char *)v43 + 80);
              __int16 v166 = 773;
              unint64_t v60 = v60;
              uint64_t v163 = (uint64_t)v75;
              uint64_t v164 = v74;
              uint64_t v165 = ".";
              unint64_t v81 = v171;
              unint64_t v82 = v60;
              if (v60)
              {
                do
                {
                  *--unint64_t v81 = (v82 % 0xA) | 0x30;
                  BOOL v53 = v82 > 9;
                  v82 /= 0xAuLL;
                }
                while (v53);
              }
              else
              {
                char v170 = 48;
                unint64_t v81 = &v170;
              }
              sub_1CC028D80(__p, v81, v171, v171 - v81);
              char v83 = v166;
              if (v166 == 1)
              {
                uint64_t v157 = __p;
                long long v159 = v169[1];
                __int16 v160 = 260;
                int v161 = v155;
                __int16 v162 = v156;
              }
              else if ((_BYTE)v166)
              {
                if (HIBYTE(v166) != 1) {
                  char v83 = 2;
                }
                uint64_t v84 = &v163;
                if (HIBYTE(v166) == 1) {
                  uint64_t v84 = (uint64_t *)v163;
                }
                uint64_t v157 = v84;
                uint64_t v158 = v164;
                *(void *)&long long v159 = __p;
                LOBYTE(v160) = v83;
                HIBYTE(v160) = 4;
              }
              else
              {
                __int16 v160 = 256;
              }
              llvm::GlobalVariable::GlobalVariable(v64, v77, v79, v80 & 1, 8, (unint64_t)v78, (const char **)&v157, 0, 0, 0, 0);
              if (v154 < 0) {
                operator delete(__p[0]);
              }
              *(void *)&v61[8 * v60] = v64;
              int v148 = v60 + 1;
              if (v168)
              {
                unint64_t v85 = v167;
                uint64_t v86 = StructLayout;
                if (v60 != (*(_DWORD *)(v145 + 20) & 0x7FFFFFF) - 1) {
                  uint64_t v86 = (llvm::StructLayout *)&v142[8 * v148];
                }
                unint64_t v87 = *(unsigned int *)v86;
                unint64_t v88 = *(unsigned int *)&v142[8 * v60];
                uint64_t v89 = 8 * v168;
                unint64_t v150 = v87;
                do
                {
                  uint64_t v90 = *(void *)v85;
                  uint64_t v91 = *(void *)(*(void *)(*(void *)v85 - 8 * *(unsigned int *)(*(void *)v85 + 8)) + 128);
                  uint64_t v92 = (void *)(v91 + 24);
                  if (*(_DWORD *)(v91 + 32) >= 0x41u) {
                    uint64_t v92 = (void *)*v92;
                  }
                  unsigned int v93 = (void *)*v92;
                  uint64_t v94 = (char *)v93 - 1;
                  if (!v93) {
                    uint64_t v94 = 0;
                  }
                  if ((unint64_t)v94 >= v88 && (unint64_t)v94 < v87)
                  {
                    unint64_t v96 = v43;
                    uint64_t v97 = **v43;
                    unint64_t v98 = (unint64_t)v93 - v88;
                    uint64_t v99 = *(llvm::ConstantInt **)(v152 + 1960);
                    unsigned int v100 = *(_DWORD *)(v152 + 1968);
                    LODWORD(v158) = v100 >> 8;
                    if (v100 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v100 <= 0xFF) {
                      unint64_t v101 = 0;
                    }
                    else {
                      unint64_t v101 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v100) + 63);
                    }
                    uint64_t v157 = (void *)(v101 & v98);
                    unint64_t v103 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v99, (llvm::LLVMContext *)&v157, v58);
                    unint64_t v43 = v96;
                    if (v158 >= 0x41 && v157) {
                      MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
                    }
                    uint64_t v163 = llvm::ValueAsMetadata::get(v103, v102);
                    uint64_t v164 = *(void *)(v90 - 8 * *(unsigned int *)(v90 + 8) + 8);
                    Impl = llvm::MDTuple::getImpl(v97, &v163, 2, 0, 1);
                    llvm::Value::addMetadata((llvm::Value *)v64, 19, Impl);
                    unint64_t v87 = v150;
                  }
                  unint64_t v85 = (_OWORD *)((char *)v85 + 8);
                  v89 -= 8;
                }
                while (v89);
              }
              uint64_t v44 = v145;
              LODWORD(v60) = v148;
              if ((*((unsigned char *)v43 + 23) & 0x20) != 0)
              {
                uint64_t v105 = *(void *)**v43;
                uint64_t v157 = v43;
                int v106 = *(_DWORD *)(v105 + 2496);
                if (!v106)
                {
                  uint64_t v119 = 0;
                  goto LABEL_182;
                }
                uint64_t v107 = *(void *)(v105 + 2480);
                int v108 = v106 - 1;
                unsigned int v109 = v108 & v144;
                unint64_t v110 = (uint64_t ***)(v107 + 40 * (v108 & v144));
                unint64_t v111 = *v110;
                if (*v110 != v43)
                {
                  unint64_t v112 = 0;
                  int v113 = 1;
                  while (v111 != (uint64_t **)-4096)
                  {
                    if (v112) {
                      BOOL v114 = 0;
                    }
                    else {
                      BOOL v114 = v111 == (uint64_t **)-8192;
                    }
                    if (v114) {
                      unint64_t v112 = v110;
                    }
                    unsigned int v115 = v109 + v113++;
                    unsigned int v109 = v115 & v108;
                    unint64_t v110 = (uint64_t ***)(v107 + 40 * v109);
                    unint64_t v111 = *v110;
                    if (*v110 == v43) {
                      goto LABEL_170;
                    }
                  }
                  if (v112) {
                    uint64_t v119 = v112;
                  }
                  else {
                    uint64_t v119 = v110;
                  }
LABEL_182:
                  unint64_t v110 = (uint64_t ***)sub_1CC609054(v105 + 2480, (uint64_t)&v157, (uint64_t *)&v157, v119);
                  int v120 = (uint64_t **)v157;
                  v110[4] = 0;
                  v110[3] = 0;
                  *unint64_t v110 = v120;
                  v110[1] = (uint64_t **)(v110 + 3);
                  v110[2] = (uint64_t **)0x100000000;
                }
LABEL_170:
                uint64_t v116 = *((unsigned int *)v110 + 4);
                if (v116)
                {
                  uint64_t v117 = v110[1] + 1;
                  uint64_t v118 = 16 * v116;
                  while (*((_DWORD *)v117 - 2) != 28)
                  {
                    v117 += 2;
                    v118 -= 16;
                    if (!v118) {
                      goto LABEL_177;
                    }
                  }
                  if (*v117)
                  {
                    unsigned int VCallVisibility = llvm::GlobalObject::getVCallVisibility((llvm::GlobalObject *)v43);
                    llvm::GlobalObject::setVCallVisibilityMetadata((llvm::Value *)v64, VCallVisibility);
                  }
                }
              }
LABEL_177:
              int v61 = v146;
              if (v148 == (*(_DWORD *)(v145 + 20) & 0x7FFFFFF))
              {
                unint64_t v62 = v141;
                goto LABEL_188;
              }
              continue;
            }
          }
          while (1)
          {
            uint64_t v46 = v45[3];
            if (*(unsigned char *)(v46 + 16) != 5 || *(_WORD *)(v46 + 18) != 34 || (*(unsigned char *)(v46 + 17) & 0xFC) != 8) {
              break;
            }
            int v47 = *(_DWORD *)(v46 + 20);
            uint64_t v48 = (v47 & 0x40000000) != 0 ? *(void *)(v46 - 8) : v46 - 32 * (v47 & 0x7FFFFFF);
            uint64_t v49 = *(void *)(v48 + 32);
            if (*(unsigned char *)(v49 + 16) != 16) {
              break;
            }
            uint64_t v50 = *(unsigned int *)(v49 + 32);
            if (v50 > 0x40)
            {
              int v51 = 0;
              int64_t v52 = (unint64_t)(v50 + 63) >> 6;
              do
              {
                BOOL v53 = v52-- < 1;
                if (v53) {
                  break;
                }
                unint64_t v54 = *(void *)(*(void *)(v49 + 24) + 8 * v52);
                v51 += __clz(v54);
              }
              while (!v54);
              int v55 = v50 | 0xFFFFFFC0;
              if ((v50 & 0x3F) == 0) {
                int v55 = 0;
              }
              if (v51 + v55 != v50) {
                break;
              }
            }
            else if (*(void *)(v49 + 24))
            {
              break;
            }
            if ((v47 & 0x40000000) != 0) {
              uint64_t v56 = *(void *)(v46 - 8);
            }
            else {
              uint64_t v56 = v46 - 32 * (v47 & 0x7FFFFFF);
            }
            if (*(unsigned char *)(*(void *)(v56 + 64) + 16) != 16) {
              break;
            }
            unint64_t v45 = (uint64_t *)v45[1];
            if (!v45) {
              goto LABEL_109;
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_1CC92E724()
{
}

void sub_1CC92E764(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC92E79C(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }

  return sub_1CC92D980((uint64_t)a2);
}

BOOL llvm::HotColdSplitting::isFunctionCold(llvm::ProfileSummaryInfo **this, const llvm::Function *a2)
{
  uint64_t v2 = *((void *)a2 + 14);
  return v2 && (*(unsigned char *)(v2 + 12) & 0x20) != 0
      || (*((_WORD *)a2 + 9) & 0x3FF0) == 0x90
      || llvm::ProfileSummaryInfo::isFunctionEntryCold(*this, a2);
}

BOOL llvm::HotColdSplitting::shouldOutlineFrom(llvm::HotColdSplitting *this, const llvm::Function *a2)
{
  uint64_t v2 = (unsigned char *)*((void *)a2 + 14);
  if (!v2) {
    return 1;
  }
  if ((v2[12] & 4) != 0) {
    return 0;
  }
  if ((v2[15] & 8) != 0) {
    return 0;
  }
  if (v2[16]) {
    return 0;
  }
  char v4 = v2[18];
  if ((v4 & 0x4C) != 0) {
    return 0;
  }
  return (v4 & 0x20) == 0;
}

llvm::BasicBlock **llvm::HotColdSplitting::extractColdRegion(int a1, uint64_t a2, const llvm::CodeExtractorAnalysisCache *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t ***a7, uint64_t a8, unsigned int __val)
{
  uint64_t v13 = (unsigned __int8 ***)a2;
  v231[35] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(char ***)a2;
  uint64_t v15 = *(unsigned int *)(a2 + 8);
  std::to_string(&v223, __val);
  uint64_t v16 = std::string::insert(&v223, 0, "cold.");
  std::string __p = *v16;
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  llvm::CodeExtractor::CodeExtractor((uint64_t)v203, v14, v15, a4, 0, 0, 0, a8, 0, 0, 0, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  v197[0] = 0;
  v197[1] = 0;
  int v198 = 0;
  uint64_t v200 = 0;
  uint64_t v201 = 0;
  unint64_t v199 = 0;
  v192[0] = 0;
  v192[1] = 0;
  int v193 = 0;
  BOOL v195 = 0;
  uint64_t v196 = 0;
  int v194 = 0;
  v187[0] = 0;
  v187[1] = 0;
  int v188 = 0;
  v190 = 0;
  uint64_t v191 = 0;
  uint64_t v189 = 0;
  llvm::CodeExtractor::findInputsOutputs((uint64_t)v203, v197, v192, v187);
  size_t v17 = (llvm::BasicBlock **)*v13;
  uint64_t v18 = *((unsigned int *)v13 + 2);
  if (v18)
  {
    int v20 = 0;
    int64_t v19 = 0;
    uint64_t v15 = (uint64_t)&v223.__r_.__value_.__r.__words[2];
    unsigned int v182 = &v17[v18];
    do
    {
      uint64_t v21 = *v17;
      llvm::BasicBlock::instructionsWithoutDebug(*v17, 1, (uint64_t)&v223);
      *(_OWORD *)unsigned int v219 = *(_OWORD *)&v223.__r_.__value_.__l.__data_;
      if (v226)
      {
        if (v226 == (std::string *)&v223.__r_.__value_.__r.__words[2])
        {
          int v222 = &v220;
          (*(void (**)(std::string::size_type *, uint64_t *))(v223.__r_.__value_.__r.__words[2] + 24))(&v223.__r_.__value_.__r.__words[2], &v220);
        }
        else
        {
          int v222 = (uint64_t *)(*(uint64_t (**)(void))(v226->__r_.__value_.__r.__words[0] + 16))();
        }
      }
      else
      {
        int v222 = 0;
      }
      *(_OWORD *)uint64_t v204 = v227;
      if (v230)
      {
        if (v230 == v228)
        {
          int v206 = v205;
          (*(void (**)(void *, void *))(v228[0] + 24))(v228, v205);
        }
        else
        {
          int v206 = (void *)(*(uint64_t (**)(void))(*v230 + 16))();
        }
      }
      else
      {
        int v206 = 0;
      }
      uint64_t v22 = v219[0];
      if (v219[0] != v204[0])
      {
        int v23 = (void *)((char *)v21 + 40);
        do
        {
          if (v22) {
            int v24 = v22 - 3;
          }
          else {
            int v24 = 0;
          }
          uint64_t v25 = (void *)*v23;
          if ((void *)*v23 == v23)
          {
            long long v26 = 0;
          }
          else
          {
            if (v25) {
              long long v26 = v25 - 3;
            }
            else {
              long long v26 = 0;
            }
            if (*((unsigned __int8 *)v26 + 16) - 29 >= 0xB) {
              long long v26 = 0;
            }
          }
          if (v24 != v26)
          {
            int v27 = *((_DWORD *)v24 + 5);
            if ((v27 & 0x40000000) != 0)
            {
              uint64_t v29 = (uint64_t *)*(v24 - 1);
              unint64_t v28 = v27 & 0x7FFFFFF;
            }
            else
            {
              unint64_t v28 = v27 & 0x7FFFFFF;
              uint64_t v29 = &v24[-4 * v28];
            }
            BOOL v207 = &v209;
            uint64_t v208 = 0x400000000;
            if (v28 >= 5) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v28)
            {
              uint64_t v30 = 32 * v28;
              uint64_t v31 = &v209;
              do
              {
                uint64_t v32 = *v29;
                v29 += 4;
                *(void *)uint64_t v31 = v32;
                uint64_t v31 = (long long *)((char *)v31 + 8);
                v30 -= 32;
              }
              while (v30);
              unsigned int v33 = (long long *)v207;
            }
            else
            {
              unsigned int v33 = &v209;
            }
            LODWORD(v208) = v28;
            uint64_t v34 = (*(uint64_t (**)(void, void *, long long *))(*(void *)*a6 + 72))(*a6, v24, v33);
            int v36 = v35;
            if (v207 != &v209) {
              free(v207);
            }
            if (v36 == 1) {
              int v20 = 1;
            }
            if (__OFADD__(v19, v34)) {
              int64_t v19 = ((v19 + v34) >> 63) ^ 0x8000000000000000;
            }
            else {
              v19 += v34;
            }
            uint64_t v22 = v219[0];
          }
          do
          {
            uint64_t v22 = (void *)v22[1];
            v219[0] = v22;
            if (v22 == v219[1]) {
              break;
            }
            if (!v222) {
              sub_1CB920400();
            }
            char v37 = (*(uint64_t (**)(void))(*v222 + 48))();
            uint64_t v22 = v219[0];
          }
          while ((v37 & 1) == 0);
        }
        while (v22 != v204[0]);
      }
      uint64_t v9 = (llvm::BasicBlock **)v205;
      if (v206 == v205)
      {
        (*(void (**)(void *))(v205[0] + 32))(v205);
      }
      else if (v206)
      {
        (*(void (**)(void))(*v206 + 40))();
      }
      if (v222 == &v220)
      {
        (*(void (**)(uint64_t *))(v220 + 32))(&v220);
      }
      else if (v222)
      {
        (*(void (**)(void))(*v222 + 40))();
      }
      if (v230 == v228)
      {
        (*(void (**)(void *))(v228[0] + 32))(v228);
      }
      else if (v230)
      {
        (*(void (**)(void))(*v230 + 40))();
      }
      if (v226 == (std::string *)&v223.__r_.__value_.__r.__words[2])
      {
        (*(void (**)(std::string::size_type *))(v223.__r_.__value_.__r.__words[2] + 32))(&v223.__r_.__value_.__r.__words[2]);
      }
      else if (v226)
      {
        (*(void (**)(void))(v226->__r_.__value_.__r.__words[0] + 40))();
      }
      ++v17;
    }
    while (v17 != v182);
    size_t v17 = (llvm::BasicBlock **)*v13;
    LODWORD(v18) = *((_DWORD *)v13 + 2);
  }
  else
  {
    int64_t v19 = 0;
    int v20 = 0;
  }
  int v38 = dword_1EBCDFD90;
  if (dword_1EBCDFD90 < 1) {
    goto LABEL_227;
  }
  int v177 = dword_1EBCDFD90;
  uint64_t v39 = v18;
  uint64_t v41 = v199;
  uint64_t v40 = v200;
  unint64_t v43 = v194;
  uint64_t v42 = v195;
  uint64_t v44 = (unint64_t *)&v225;
  v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
  v223.__r_.__value_.__l.__size_ = (std::string::size_type)&v225;
  v223.__r_.__value_.__r.__words[2] = 2;
  int v224 = 0;
  unint64_t v45 = &v17[v18];
  if (!v18)
  {
    unsigned int v46 = 0;
    LODWORD(v47) = 2;
    uint64_t v48 = (unint64_t *)&v225;
    char v49 = 1;
    goto LABEL_178;
  }
  uint64_t v173 = v199;
  uint64_t v174 = v194;
  int v175 = v200;
  unsigned int v176 = v195;
  uint64_t v179 = v13;
  int v180 = a7;
  unsigned int v50 = 2;
  char v49 = 1;
  int v51 = v17;
  do
  {
    uint64_t v52 = *((void *)*v51 + 5);
    if ((llvm::BasicBlock *)v52 == (llvm::BasicBlock *)((char *)*v51 + 40))
    {
      uint64_t v52 = (uint64_t)*v51 + 40;
LABEL_156:
      if (v52) {
        uint64_t v82 = v52 - 24;
      }
      else {
        uint64_t v82 = 0;
      }
      if (*(unsigned __int8 *)(v82 + 16) - 29 >= 0xB) {
        uint64_t v82 = 0;
      }
      v49 &= *(unsigned char *)(v82 + 16) == 35;
      goto LABEL_162;
    }
    if (v52) {
      uint64_t v13 = (unsigned __int8 ***)(v52 - 24);
    }
    else {
      uint64_t v13 = 0;
    }
    int v53 = *((unsigned __int8 *)v13 + 16);
    if (v53 == 30)
    {
      if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 3) {
        unsigned int v81 = 2;
      }
      else {
        unsigned int v81 = 1;
      }
LABEL_87:
      a7 = 0;
      unint64_t v54 = v13 + 4;
      int v55 = v13 - 4;
      uint64_t v56 = v13 - 8;
      uint64_t v9 = (llvm::BasicBlock **)v81;
      while (2)
      {
        int v57 = *((unsigned __int8 *)v13 + 16);
        if (v57 == 30)
        {
          int64_t v75 = (uint64_t *)&v55[-4 * (void)a7];
        }
        else
        {
          uint64_t v74 = (v57 - 31);
          int64_t v75 = (uint64_t *)(v13 - 4);
          switch(v74)
          {
            case 1:
            case 7:
              int v78 = *((_DWORD *)v13 + 5);
              if ((v78 & 0x40000000) != 0) {
                BOOL v79 = (unsigned __int8 ***)*(v13 - 1);
              }
              else {
                BOOL v79 = &v13[-4 * (v78 & 0x7FFFFFF)];
              }
              int64_t v75 = (uint64_t *)&v79[4 * (void)a7 + 4];
              goto LABEL_154;
            case 2:
              uint64_t v80 = 0x1FFFFFFFFFFFFFF8;
              if (!a7) {
                uint64_t v80 = 0x1FFFFFFFFFFFFFF4;
              }
              int64_t v75 = (uint64_t *)&v13[v80];
              break;
            case 3:
            case 4:
              goto LABEL_353;
            case 5:
              if ((*((_WORD *)v13 + 9) & 1) == 0)
              {
                uint64_t v15 = 0;
                unint64_t v45 = &v17[v39];
                goto LABEL_92;
              }
              int64_t v75 = (uint64_t *)&v54[-4 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF)];
LABEL_154:
              unint64_t v45 = &v17[v39];
              break;
            case 6:
              break;
            case 8:
              if (a7) {
                int64_t v75 = (uint64_t *)&(&v55[4 * (void)a7])[-4 * *((unsigned int *)v13 + 20) - 4];
              }
              else {
                int64_t v75 = (uint64_t *)&v56[-4 * *((unsigned int *)v13 + 20)];
              }
              goto LABEL_154;
            default:
              int v76 = *((_DWORD *)v13 + 5);
              if ((v76 & 0x40000000) != 0) {
                uint64_t v77 = (unsigned __int8 ***)*(v13 - 1);
              }
              else {
                uint64_t v77 = &v13[-4 * (v76 & 0x7FFFFFF)];
              }
              int64_t v75 = (uint64_t *)&v77[4 * (2 * a7) + 4];
              break;
          }
        }
        uint64_t v15 = *v75;
LABEL_92:
        uint64_t v58 = 8 * v39;
        int v59 = v17;
        while (*v59 != (llvm::BasicBlock *)v15)
        {
          ++v59;
          v58 -= 8;
          if (!v58)
          {
            int v59 = v45;
            break;
          }
        }
        if (v39 != v59 - v17) {
          goto LABEL_129;
        }
        std::string::size_type size = v223.__r_.__value_.__l.__size_;
        uint64_t v61 = HIDWORD(v223.__r_.__value_.__r.__words[2]);
        if (v223.__r_.__value_.__l.__size_ == v223.__r_.__value_.__r.__words[0])
        {
          if (HIDWORD(v223.__r_.__value_.__r.__words[2]))
          {
            unint64_t v62 = 0;
            uint64_t v63 = 8 * HIDWORD(v223.__r_.__value_.__r.__words[2]);
            uint64_t v64 = (uint64_t *)v223.__r_.__value_.__l.__size_;
            while (*v64 != v15)
            {
              if (*v64 == -2) {
                unint64_t v62 = v64;
              }
              ++v64;
              v63 -= 8;
              if (!v63)
              {
                if (!v62) {
                  goto LABEL_105;
                }
                char v49 = 0;
                *unint64_t v62 = v15;
                --v224;
                goto LABEL_129;
              }
            }
LABEL_128:
            char v49 = 0;
            goto LABEL_129;
          }
LABEL_105:
          if (HIDWORD(v223.__r_.__value_.__r.__words[2]) < v50)
          {
            char v49 = 0;
            ++HIDWORD(v223.__r_.__value_.__r.__words[2]);
            *(void *)(v223.__r_.__value_.__l.__size_ + 8 * v61) = v15;
            goto LABEL_129;
          }
        }
        if (3 * v50 <= 4 * (HIDWORD(v223.__r_.__value_.__r.__words[2]) - v224))
        {
          if (v50 >= 0x40) {
            v50 *= 2;
          }
          else {
            unsigned int v50 = 128;
          }
        }
        else if (v50 - HIDWORD(v223.__r_.__value_.__r.__words[2]) >= v50 >> 3)
        {
LABEL_109:
          unsigned int v65 = v50 - 1;
          unsigned int v66 = (v50 - 1) & ((v15 >> 4) ^ (v15 >> 9));
          uint64_t v67 = (uint64_t *)(size + 8 * v66);
          uint64_t v68 = *v67;
          if (*v67 != -1)
          {
            int v72 = 0;
            int v69 = 1;
            while (v68 != v15)
            {
              if (v72) {
                BOOL v70 = 0;
              }
              else {
                BOOL v70 = v68 == -2;
              }
              if (v70) {
                int v72 = v67;
              }
              unsigned int v71 = v66 + v69++;
              unsigned int v66 = v71 & v65;
              uint64_t v67 = (uint64_t *)(size + 8 * (v71 & v65));
              uint64_t v68 = *v67;
              if (*v67 == -1) {
                goto LABEL_120;
              }
            }
            goto LABEL_128;
          }
          int v72 = 0;
LABEL_120:
          if (v72) {
            unint64_t v73 = v72;
          }
          else {
            unint64_t v73 = v67;
          }
          if (*v73 == v15) {
            goto LABEL_128;
          }
          if (*v73 == -2) {
            --v224;
          }
          else {
            ++HIDWORD(v223.__r_.__value_.__r.__words[2]);
          }
          char v49 = 0;
          uint64_t *v73 = v15;
LABEL_129:
          a7 = (uint64_t ***)((char *)a7 + 1);
          if (a7 == (uint64_t ***)v9) {
            goto LABEL_162;
          }
          continue;
        }
        break;
      }
      unsigned int v184 = v54;
      uint64_t v185 = v51;
      unsigned int v183 = v56;
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v223, v50);
      uint64_t v56 = v183;
      unint64_t v54 = v184;
      int v51 = v185;
      unint64_t v45 = &v17[v39];
      unsigned int v50 = v223.__r_.__value_.__r.__words[2];
      std::string::size_type size = v223.__r_.__value_.__l.__size_;
      goto LABEL_109;
    }
    unsigned int v81 = 2;
    switch(*((unsigned char *)v13 + 16))
    {
      case 0x1E:
LABEL_353:
        __break(1u);
        goto LABEL_354;
      case 0x1F:
        int v83 = (*((_DWORD *)v13 + 5) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
        int v83 = (*((_DWORD *)v13 + 5) & 0x7FFFFFF) - 1;
        break;
      case 0x21:
        goto LABEL_87;
      case 0x24:
        int v83 = *((_WORD *)v13 + 9) & 1;
        break;
      case 0x25:
LABEL_172:
        unsigned int v81 = 1;
        goto LABEL_87;
      case 0x27:
        int v83 = *((_DWORD *)v13 + 20) + 1;
        break;
      default:
        goto LABEL_156;
    }
    if (!v83) {
      goto LABEL_156;
    }
    if (v53 == 31)
    {
      unsigned int v81 = (*((_DWORD *)v13 + 5) >> 1) & 0x3FFFFFF;
LABEL_168:
      if (v81) {
        goto LABEL_87;
      }
    }
    else
    {
      unsigned int v81 = 2;
      switch(*((unsigned char *)v13 + 16))
      {
        case '!':
          goto LABEL_87;
        case '""':
        case '#':
          break;
        case '$':
          unsigned int v81 = *((_WORD *)v13 + 9) & 1;
          goto LABEL_168;
        case '%':
          goto LABEL_172;
        case '\'':
          unsigned int v81 = *((_DWORD *)v13 + 20) + 1;
          goto LABEL_168;
        default:
          unsigned int v81 = (*((_DWORD *)v13 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_168;
      }
    }
LABEL_162:
    ++v51;
  }
  while (v51 != v45);
  uint64_t v48 = (unint64_t *)v223.__r_.__value_.__l.__size_;
  uint64_t v44 = (unint64_t *)v223.__r_.__value_.__r.__words[0];
  unsigned int v46 = HIDWORD(v223.__r_.__value_.__r.__words[2]);
  LODWORD(v47) = v223.__r_.__value_.__r.__words[2];
  uint64_t v13 = v179;
  a7 = v180;
  uint64_t v40 = v175;
  uint64_t v42 = v176;
  uint64_t v41 = v173;
  unint64_t v43 = v174;
LABEL_178:
  unint64_t v84 = (unint64_t)(v40 - v41) >> 3;
  unint64_t v85 = (unint64_t)(v42 - v43) >> 3;
  if (v48 == v44) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = v47;
  }
  uint64_t v86 = v48;
  if (v47)
  {
    uint64_t v87 = 8 * v47;
    uint64_t v86 = v48;
    while (*v86 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v86;
      v87 -= 8;
      if (!v87) {
        goto LABEL_216;
      }
    }
  }
  unint64_t v88 = &v48[v47];
  if (v86 == v88)
  {
LABEL_216:
    int v89 = 0;
  }
  else
  {
    int v89 = 0;
    unint64_t v90 = *v86;
LABEL_188:
    if (*(void *)(v90 + 40) != v90 + 40)
    {
      for (uint64_t i = *(void *)(v90 + 48); ; uint64_t i = *(void *)(v92 + 32))
      {
        uint64_t v92 = i - 24;
        if (i) {
          uint64_t v93 = i - 24;
        }
        else {
          uint64_t v93 = 0;
        }
        if (!i || *(unsigned char *)(v93 + 16) != 83) {
          break;
        }
        int v94 = *(_DWORD *)(i - 4);
        uint64_t v95 = v94 & 0x7FFFFFF;
        if ((v94 & 0x7FFFFFF) == 0) {
          continue;
        }
        uint64_t v96 = 0;
        int v97 = 0;
        while (1)
        {
          uint64_t v98 = v92 - 32 * v95;
          if ((v94 & 0x40000000) != 0) {
            uint64_t v98 = *(void *)(v92 - 8);
          }
          if (v39)
          {
            uint64_t v99 = *(llvm::BasicBlock **)(v98 + 32 * *(unsigned int *)(v92 + 60) + 8 * v96);
            uint64_t v100 = 8 * v39;
            unint64_t v101 = v17;
            while (*v101 != v99)
            {
              ++v101;
              v100 -= 8;
              if (!v100)
              {
                unint64_t v101 = v45;
                break;
              }
            }
          }
          else
          {
            unint64_t v101 = v17;
          }
          if (v39 == v101 - v17) {
            goto LABEL_208;
          }
          if (v97 >= 1) {
            break;
          }
          int v97 = 1;
LABEL_208:
          if (++v96 == v95) {
            goto LABEL_211;
          }
        }
        ++v89;
LABEL_211:
        ;
      }
    }
    unint64_t v102 = v86 + 1;
    while (v102 != v88)
    {
      unint64_t v103 = *v102++;
      unint64_t v90 = v103;
      if (v103 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v86 = v102 - 1;
        goto LABEL_188;
      }
    }
  }
  int v104 = v89 + v85;
  int v105 = v104 + v84;
  if (v105 <= dword_1EBCDFF10)
  {
    int v106 = 3 * v104;
    if (v49) {
      int v107 = v39;
    }
    else {
      int v107 = 0;
    }
    int v108 = v177 - v107 + v106 + 2 * v105;
    unsigned int v109 = v46 - v224;
    if (v109 >= 2) {
      int v38 = v108 + v109 - 1;
    }
    else {
      int v38 = v108;
    }
  }
  else
  {
    int v38 = 0x7FFFFFFF;
  }
  if (v48 != v44) {
    free(v48);
  }
LABEL_227:
  size_t v17 = 0;
  if (!v20 && v19 > v38)
  {
    int64_t v19 = (int64_t)&v207;
    uint64_t v15 = *((void *)**v13 + 7);
    CodeRegiouint64_t n = llvm::CodeExtractor::extractCodeRegion((llvm::CodeExtractor *)v203, a3);
    if (!CodeRegion)
    {
      uint64_t v111 = *(void *)***a7;
      if (*(void *)(v111 + 128)
        || (*(unsigned int (**)(void))(**(void **)(v111 + 72) + 48))(*(void *)(v111 + 72)))
      {
        uint64_t v112 = *((void *)**v13 + 6);
        if (v112) {
          uint64_t v113 = v112 - 24;
        }
        else {
          uint64_t v113 = 0;
        }
        llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v223, (uint64_t)"hotcoldsplit", (uint64_t)"ExtractFailed", 13, v113);
        BOOL v207 = "Failed to extract region at block ";
        uint64_t v208 = 34;
        sub_1CC59ADEC((uint64_t *)&v229, (uint64_t)&v207);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v219, "Block", 5uLL, **v13);
        uint64_t v114 = sub_1CD3D6290((uint64_t)&v223, (long long *)v219);
        int v115 = *(_DWORD *)(v114 + 8);
        BYTE4(v208) = *(unsigned char *)(v114 + 12);
        LODWORD(v208) = v115;
        long long v116 = *(_OWORD *)(v114 + 16);
        uint64_t v210 = *(void *)(v114 + 32);
        long long v209 = v116;
        uint64_t v117 = *(void *)(v114 + 72);
        long long v118 = *(_OWORD *)(v114 + 56);
        long long v211 = *(_OWORD *)(v114 + 40);
        long long v212 = v118;
        BOOL v207 = &unk_1F2616800;
        uint64_t v213 = v117;
        uint64_t v214 = v216;
        uint64_t v215 = 0x400000000;
        if (*(_DWORD *)(v114 + 88)) {
          sub_1CD494D68((uint64_t)&v214, v114 + 80);
        }
        uint64_t v119 = *(void *)(v114 + 360);
        uint64_t v217 = *(void *)(v114 + 352);
        uint64_t v218 = v119;
        BOOL v207 = &unk_1F26165A8;
        if (SHIBYTE(v222) < 0) {
          operator delete(v221);
        }
        if (SHIBYTE(v220) < 0) {
          operator delete(v219[0]);
        }
        v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2616800;
        int v120 = (char *)v229;
        if (v230)
        {
          unint64_t v121 = (unint64_t)v230 << 6;
          do
          {
            int v122 = (void **)&v120[v121];
            if (v120[v121 - 17] < 0) {
              operator delete(*(v122 - 5));
            }
            if (*((char *)v122 - 41) < 0) {
              operator delete(*(v122 - 8));
            }
            v121 -= 64;
          }
          while (v121);
          int v120 = (char *)v229;
        }
        if (v120 != (char *)v231) {
          free(v120);
        }
        llvm::OptimizationRemarkEmitter::emit(a7, (llvm::DiagnosticInfoOptimizationBase *)&v207);
        BOOL v207 = &unk_1F2616800;
        char v154 = (char *)v214;
        if (v215)
        {
          unint64_t v155 = (unint64_t)v215 << 6;
          do
          {
            __int16 v156 = (void **)&v154[v155];
            if (v154[v155 - 17] < 0) {
              operator delete(*(v156 - 5));
            }
            if (*((char *)v156 - 41) < 0) {
              operator delete(*(v156 - 8));
            }
            v155 -= 64;
          }
          while (v155);
          char v154 = (char *)v214;
        }
        if (v154 != v216) {
          free(v154);
        }
      }
      size_t v17 = 0;
      goto LABEL_317;
    }
    size_t v17 = (llvm::BasicBlock **)CodeRegion;
    uint64_t v123 = *(void *)(*(void *)(CodeRegion + 8) + 24);
    if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a6 + 520))(*a6, CodeRegion))
    {
      *((_WORD *)v17 + 9) = *((_WORD *)v17 + 9) & 0xC00F | 0x90;
      *(_WORD *)(v123 + 18) = *(_WORD *)(v123 + 18) & 0xF003 | 0x24;
    }
    *(void *)(v123 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v123 + 64), **(uint64_t ***)v123, -1, 27);
    if (byte_1EBCDFE50)
    {
      if (byte_1EBCDFFE7 >= 0) {
        size_t v131 = byte_1EBCDFFE7 & 0x7F;
      }
      else {
        size_t v131 = unk_1EBCDFFD8;
      }
      if (byte_1EBCDFFE7 >= 0) {
        uint64_t v9 = (llvm::BasicBlock **)&qword_1EBCDFFD0;
      }
      else {
        uint64_t v9 = (llvm::BasicBlock **)qword_1EBCDFFD0;
      }
      goto LABEL_262;
    }
    if ((*(unsigned char *)(v15 + 34) & 0x40) != 0)
    {
      uint64_t v124 = ***(void ***)v15;
      v223.__r_.__value_.__r.__words[0] = v15;
      int v125 = *(_DWORD *)(v124 + 2520);
      if (v125)
      {
        uint64_t v126 = *(void *)(v124 + 2504);
        int v127 = v125 - 1;
        unsigned int v128 = v127 & ((v15 >> 4) ^ (v15 >> 9));
        unint64_t v129 = (void *)(v126 + 24 * v128);
        uint64_t v130 = *v129;
        if (*v129 == v15) {
          goto LABEL_255;
        }
        uint64_t v165 = 0;
        int v166 = 1;
        while (v130 != -4096)
        {
          if (v165) {
            BOOL v167 = 0;
          }
          else {
            BOOL v167 = v130 == -8192;
          }
          if (v167) {
            uint64_t v165 = v129;
          }
          unsigned int v168 = v128 + v166++;
          unsigned int v128 = v168 & v127;
          unint64_t v129 = (void *)(v126 + 24 * v128);
          uint64_t v130 = *v129;
          if (*v129 == v15) {
            goto LABEL_255;
          }
        }
        uint64_t v171 = v165 ? v165 : v129;
      }
      else
      {
        uint64_t v171 = 0;
      }
      unint64_t v129 = sub_1CC5BF31C(v124 + 2504, (uint64_t)&v223, (uint64_t *)&v223, v171);
      std::string::size_type v172 = v223.__r_.__value_.__r.__words[0];
      v129[1] = 0;
      v129[2] = 0;
      void *v129 = v172;
LABEL_255:
      uint64_t v9 = (llvm::BasicBlock **)v129[1];
      size_t v131 = v129[2];
LABEL_262:
      if ((*((unsigned char *)v17 + 34) & 0x40) != 0 || v131)
      {
        if (v131)
        {
          uint64_t v9 = (llvm::BasicBlock **)llvm::UniqueStringSaver::save(**(void **)*v17 + 2136, v9, v131);
          unsigned int v133 = v132;
        }
        else
        {
LABEL_354:
          unsigned int v133 = 0;
        }
        uint64_t v134 = **(void **)*v17;
        v223.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        int v135 = *(_DWORD *)(v134 + 2520);
        if (v135)
        {
          uint64_t v136 = *(void *)(v134 + 2504);
          int v137 = v135 - 1;
          unsigned int v138 = v137 & ((v17 >> 4) ^ (v17 >> 9));
          uint64_t v139 = (llvm::BasicBlock ***)(v136 + 24 * v138);
          unint64_t v140 = *v139;
          if (*v139 == v17) {
            goto LABEL_268;
          }
          int v161 = 0;
          int v162 = 1;
          while (v140 != (llvm::BasicBlock **)-4096)
          {
            if (v161) {
              BOOL v163 = 0;
            }
            else {
              BOOL v163 = v140 == (llvm::BasicBlock **)-8192;
            }
            if (v163) {
              int v161 = v139;
            }
            unsigned int v164 = v138 + v162++;
            unsigned int v138 = v164 & v137;
            uint64_t v139 = (llvm::BasicBlock ***)(v136 + 24 * v138);
            unint64_t v140 = *v139;
            if (*v139 == v17) {
              goto LABEL_268;
            }
          }
          if (v161) {
            int64_t v169 = v161;
          }
          else {
            int64_t v169 = v139;
          }
        }
        else
        {
          int64_t v169 = 0;
        }
        uint64_t v139 = (llvm::BasicBlock ***)sub_1CC5BF31C(v134 + 2504, (uint64_t)&v223, (uint64_t *)&v223, v169);
        std::string::size_type v170 = v223.__r_.__value_.__r.__words[0];
        v139[1] = 0;
        v139[2] = 0;
        *uint64_t v139 = (llvm::BasicBlock **)v170;
LABEL_268:
        v139[1] = v9;
        v139[2] = v133;
        *((_DWORD *)v17 + 8) = v17[4] & 0xFFBFFFFF | ((v133 != 0) << 22);
      }
    }
    sub_1CC92FDDC((uint64_t)v17, a5 != 0);
    uint64_t v141 = *(void *)***a7;
    if (*(void *)(v141 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v141 + 72) + 48))(*(void *)(v141 + 72)))
    {
      uint64_t v142 = *((void *)**v13 + 6);
      if (v142) {
        uint64_t v143 = v142 - 24;
      }
      else {
        uint64_t v143 = 0;
      }
      llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v223, (uint64_t)"hotcoldsplit", (uint64_t)"HotColdSplit", 12, v143);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v219, "Original", 8uLL, (unsigned __int8 *)v15);
      uint64_t v144 = sub_1CD3D6290((uint64_t)&v223, (long long *)v219);
      BOOL v207 = " split cold code into ";
      uint64_t v208 = 22;
      sub_1CC59ADEC((uint64_t *)(v144 + 80), (uint64_t)&v207);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v204, "Split", 5uLL, (unsigned __int8 *)v17);
      uint64_t v145 = sub_1CD3D6290(v144, (long long *)v204);
      int v146 = *(_DWORD *)(v145 + 8);
      BYTE4(v208) = *(unsigned char *)(v145 + 12);
      LODWORD(v208) = v146;
      long long v147 = *(_OWORD *)(v145 + 16);
      uint64_t v210 = *(void *)(v145 + 32);
      long long v209 = v147;
      uint64_t v148 = *(void *)(v145 + 72);
      long long v149 = *(_OWORD *)(v145 + 56);
      *(_OWORD *)(v19 + 40) = *(_OWORD *)(v145 + 40);
      *(_OWORD *)(v19 + 56) = v149;
      BOOL v207 = &unk_1F2616800;
      uint64_t v213 = v148;
      uint64_t v214 = v216;
      uint64_t v215 = 0x400000000;
      if (*(_DWORD *)(v145 + 88)) {
        sub_1CD494D68((uint64_t)&v214, v145 + 80);
      }
      uint64_t v150 = *(void *)(v145 + 360);
      uint64_t v217 = *(void *)(v145 + 352);
      uint64_t v218 = v150;
      BOOL v207 = &unk_1F2616570;
      if (SHIBYTE(v206) < 0) {
        operator delete((void *)v205[1]);
      }
      if (SHIBYTE(v205[0]) < 0) {
        operator delete(v204[0]);
      }
      if (SHIBYTE(v222) < 0) {
        operator delete(v221);
      }
      if (SHIBYTE(v220) < 0) {
        operator delete(v219[0]);
      }
      v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2616800;
      uint64_t v151 = (char *)v229;
      if (v230)
      {
        unint64_t v152 = (unint64_t)v230 << 6;
        do
        {
          unint64_t v153 = (void **)&v151[v152];
          if (v151[v152 - 17] < 0) {
            operator delete(*(v153 - 5));
          }
          if (*((char *)v153 - 41) < 0) {
            operator delete(*(v153 - 8));
          }
          v152 -= 64;
        }
        while (v152);
        uint64_t v151 = (char *)v229;
      }
      if (v151 != (char *)v231) {
        free(v151);
      }
      llvm::OptimizationRemarkEmitter::emit(a7, (llvm::DiagnosticInfoOptimizationBase *)&v207);
      BOOL v207 = &unk_1F2616800;
      uint64_t v157 = (char *)v214;
      if (v215)
      {
        unint64_t v158 = (unint64_t)v215 << 6;
        do
        {
          long long v159 = (void **)&v157[v158];
          if (v157[v158 - 17] < 0) {
            operator delete(*(v159 - 5));
          }
          if (*((char *)v159 - 41) < 0) {
            operator delete(*(v159 - 8));
          }
          v158 -= 64;
        }
        while (v158);
        uint64_t v157 = (char *)v214;
      }
      if (v157 != v216) {
        free(v157);
      }
    }
  }
LABEL_317:
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  MEMORY[0x1D25D9CD0](v187[0], 8);
  if (v194)
  {
    BOOL v195 = v194;
    operator delete(v194);
  }
  MEMORY[0x1D25D9CD0](v192[0], 8);
  if (v199)
  {
    uint64_t v200 = v199;
    operator delete(v199);
  }
  MEMORY[0x1D25D9CD0](v197[0], 8);
  sub_1CD6110E0((uint64_t)v203);
  return v17;
}

uint64_t sub_1CC92FDDC(uint64_t a1, int a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4 && (*(unsigned char *)(v4 + 12) & 0x20) != 0)
  {
    uint64_t result = 0;
LABEL_6:
    if (*(char *)(v4 + 13) < 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v6 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, -1, 5);
  *(void *)(a1 + 112) = v6;
  if (v6)
  {
    uint64_t v4 = v6;
    uint64_t result = 1;
    goto LABEL_6;
  }
LABEL_7:
  *(void *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)a1, -1, 15);
  uint64_t result = 1;
LABEL_8:
  if (a2)
  {
    llvm::Function::setEntryCount((llvm::Function *)a1, 0, 0, 0);
    return 1;
  }
  return result;
}

uint64_t llvm::HotColdSplitting::outlineColdRegions(llvm::HotColdSplitting *this, llvm::Function *a2, int a3)
{
  uint64_t v4 = a2;
  v211[8] = *MEMORY[0x1E4F143B8];
  std::string::size_type v170 = v174;
  uint64_t v171 = v174;
  uint64_t v172 = 4;
  int v173 = 0;
  long long v209 = (char *)v211;
  uint64_t v210 = 0x200000000;
  uint64_t v200 = a2;
  unsigned int v168 = 0;
  uint64_t v169 = 0;
  BOOL v167 = 0;
  sub_1CC86D39C((char **)&v167, (uint64_t)&v200);
  unint64_t v158 = 0;
  uint64_t v165 = 0;
  *(void *)int v166 = 0;
  if (a3) {
    unint64_t v158 = (llvm::BlockFrequencyInfoImplBase **)(*((uint64_t (**)(void, llvm::Function *))this + 1))(*((void *)this + 2), v4);
  }
  (*((void (**)(void, llvm::Function *))this + 3))(*((void *)this + 4), v4);
  uint64_t v6 = *(void *)(*((void *)this + 5) + 24);
  if (!v6) {
    sub_1CB920400();
  }
  (*(void (**)(uint64_t, llvm::Function *))(*(void *)v6 + 48))(v6, v4);
  (*((void (**)(void, llvm::Function *))this + 6))(*((void *)this + 7), v4);
  int v7 = (char *)v167;
  unsigned int v8 = v168;
  if (v168 == v167) {
    goto LABEL_328;
  }
  uint64_t v9 = &unk_1EBCDF000;
  uint64_t v157 = (char *)v167;
LABEL_6:
  int v11 = (void *)*((void *)v8 - 1);
  v8 -= 8;
  uint64_t v10 = v11;
  int v12 = v170;
  if (v171 == v170)
  {
    int v13 = HIDWORD(v172);
    uint64_t v14 = &v171[8 * HIDWORD(v172)];
    if (HIDWORD(v172))
    {
      uint64_t v15 = 0;
      while (*(void **)&v171[v15] != v10)
      {
        v15 += 8;
        if (8 * HIDWORD(v172) == v15) {
          goto LABEL_26;
        }
      }
      uint64_t v14 = &v171[v15];
    }
LABEL_26:
    int v12 = v171;
  }
  else
  {
    int v16 = v172 - 1;
    unsigned int v17 = (v172 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v14 = &v171[8 * v17];
    uint64_t v18 = *(void **)v14;
    if (*(void *)v14 == -1)
    {
      uint64_t v63 = 0;
LABEL_123:
      if (v63) {
        uint64_t v14 = v63;
      }
      int v13 = HIDWORD(v172);
      if (*(void **)v14 != v10) {
        uint64_t v14 = &v171[8 * v172];
      }
    }
    else
    {
      uint64_t v63 = 0;
      int v19 = 1;
      while (v18 != v10)
      {
        if (v63) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == (void *)-2;
        }
        if (v20) {
          uint64_t v63 = v14;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        uint64_t v14 = &v171[8 * (v21 & v16)];
        uint64_t v18 = *(void **)v14;
        if (*(void *)v14 == -1) {
          goto LABEL_123;
        }
      }
      int v13 = HIDWORD(v172);
    }
  }
  if (v171 == v12) {
    int v22 = v13;
  }
  else {
    int v22 = v172;
  }
  if (v14 != &v171[8 * v22]) {
    goto LABEL_31;
  }
  if (!v158
    || (int v23 = *(uint64_t (**)(void, llvm::Function *))this,
        unint64_t BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(v158, (const llvm::BasicBlock *)v10, 0),
        !v25)
    || !*((unsigned char *)v23 + 40)
    || *((void *)v23 + 4) < BlockProfileCount)
  {
    if (!v9[3280]) {
      goto LABEL_31;
    }
    long long v26 = (void *)v10[6];
    int v27 = v26 - 3;
    if (!v26) {
      int v27 = 0;
    }
    int v28 = *((unsigned __int8 *)v27 + 16);
    uint64_t v29 = v10[6];
    if (v28 == 83)
    {
      uint64_t v29 = v10[6];
      do
      {
        uint64_t v29 = *(void *)(v29 + 8);
        uint64_t v30 = v29 - 24;
        if (!v29) {
          uint64_t v30 = 0;
        }
      }
      while (*(unsigned char *)(v30 + 16) == 83);
    }
    unsigned int v31 = *(unsigned __int8 *)(v29 - 8) - 38;
    BOOL v32 = v31 > 0x38;
    uint64_t v33 = (1 << v31) & 0x100060000000001;
    if (v32 || v33 == 0)
    {
      int v35 = v10 + 5;
      uint64_t v36 = v10[5];
      if (v36) {
        uint64_t v37 = v36 - 24;
      }
      else {
        uint64_t v37 = 0;
      }
      if (*(unsigned __int8 *)(v37 + 16) - 29 >= 0xB) {
        uint64_t v37 = 0;
      }
      if (*(unsigned char *)(v37 + 16) != 34)
      {
        while (1)
        {
          uint64_t v38 = v26 ? (uint64_t)(v26 - 3) : 0;
          unsigned int v39 = *(unsigned __int8 *)(v38 + 16) - 33;
          BOOL v32 = v39 > 0x33;
          uint64_t v40 = (1 << v39) & 0x8000000000041;
          if (!v32
            && v40 != 0
            && ((uint64_t v42 = v26[5]) != 0 && (*(unsigned char *)(v42 + 12) & 0x20) != 0
             || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v26 - 3), 5))
            && (!v26[3] && (*((unsigned char *)v26 - 1) & 0x20) == 0
             || !llvm::Instruction::getMetadataImpl((uint64_t ***)v26 - 3, "nosanitize", 0xAuLL)))
          {
            break;
          }
          long long v26 = (void *)v26[1];
          if (v26 == v35)
          {
            unint64_t v43 = (void *)*v35;
            if ((void *)*v35 != v35)
            {
              uint64_t v44 = v43 - 3;
              if (!v43) {
                uint64_t v44 = 0;
              }
              if (*((unsigned char *)v44 + 16) != 30)
              {
                switch(*((unsigned char *)v44 + 16))
                {
                  case 0x1E:
                    __break(1u);
                    goto LABEL_354;
                  case 0x1F:
                    int v78 = (*((_DWORD *)v44 + 5) >> 1) & 0x3FFFFFF;
                    goto LABEL_156;
                  case 0x20:
                  case 0x26:
                    int v78 = (*((_DWORD *)v44 + 5) & 0x7FFFFFF) - 1;
                    goto LABEL_156;
                  case 0x21:
                  case 0x25:
                    goto LABEL_31;
                  case 0x24:
                    int v78 = *((_WORD *)v44 + 9) & 1;
                    goto LABEL_156;
                  case 0x27:
                    int v78 = *((_DWORD *)v44 + 20) + 1;
LABEL_156:
                    if (!v78) {
                      goto LABEL_75;
                    }
                    goto LABEL_31;
                  default:
LABEL_75:
                    if (*((unsigned __int8 *)v44 + 16) - 29 >= 0xB) {
                      uint64_t v44 = 0;
                    }
                    int v45 = *((unsigned __int8 *)v44 + 16);
                    if (v45 != 29)
                    {
                      int v35 = (void *)*v35;
                      if (v45 != 32) {
                        goto LABEL_79;
                      }
                    }
                    goto LABEL_31;
                }
              }
              goto LABEL_31;
            }
LABEL_79:
            unsigned int v46 = v35 - 3;
            if (!v35) {
              unsigned int v46 = 0;
            }
            if (*((unsigned __int8 *)v46 + 16) - 29 >= 0xB) {
              uint64_t v47 = 0;
            }
            else {
              uint64_t v47 = v46;
            }
            if (*(void **)(v47[5] + 48) != v47 + 3)
            {
              uint64_t v48 = v47[3];
              if (v48)
              {
                if (*(unsigned char *)(v48 - 8) == 84)
                {
                  uint64_t v49 = *(void *)(v48 + 40);
                  if (v49)
                  {
                    if (*(unsigned char *)(v49 + 16)) {
                      goto LABEL_31;
                    }
                  }
                  if (llvm::CallBase::hasFnAttrOnCalledFunction(v48 - 24, 32)) {
                    goto LABEL_31;
                  }
                }
              }
            }
            break;
          }
        }
      }
    }
  }
  if (!*(void *)v166) {
    operator new();
  }
  if (!v165) {
    operator new();
  }
  int v162 = 0;
  BOOL v163 = 0;
  uint64_t v164 = 0;
  BOOL v195 = v199;
  uint64_t v196 = v199;
  uint64_t v197 = 4;
  int v198 = 0;
  sub_1CC931B34((char **)&v162);
  unsigned int v50 = v163;
  BOOL v51 = sub_1CC931CBC((uint64_t)v10);
  if (v51) {
    uint64_t v52 = v10;
  }
  else {
    uint64_t v52 = 0;
  }
  *(v50 - 2) = v52;
  sub_1CD666EEC((uint64_t)&v189, (uint64_t)v10);
  sub_1CC931D4C((llvm::SmallPtrSetImplBase *)&v189);
  int v53 = v205;
  uint64_t v200 = (llvm::Function *)v205;
  unint64_t v54 = __src;
  if (__src == v189)
  {
    uint64_t v201 = v205;
    int v55 = __src;
  }
  else
  {
    BOOL v140 = v51;
    int v141 = v191;
    int v53 = malloc_type_malloc(8 * v191, 0x4065EBACuLL);
    if (!v53)
    {
      if (v141) {
        goto LABEL_327;
      }
      int v53 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      uint64_t v9 = (unsigned char *)&unk_1EBCDF000;
      if (!v53) {
        goto LABEL_327;
      }
    }
    uint64_t v201 = v53;
    int v55 = v189;
    unint64_t v54 = __src;
    BOOL v51 = v140;
  }
  int v56 = HIDWORD(v191);
  int v202 = v191;
  if (v54 == v55) {
    unsigned int v57 = HIDWORD(v191);
  }
  else {
    unsigned int v57 = v191;
  }
  if (v57)
  {
    memmove(v53, v54, 8 * v57);
    int v56 = HIDWORD(v191);
  }
  int v203 = v56;
  int v204 = v192;
  BOOL v207 = 0;
  uint64_t v208 = 0;
  int v206 = 0;
  sub_1CBF340A8(&v206, __p, v194, 0xAAAAAAAAAAAAAAABLL * ((v194 - (unsigned char *)__p) >> 3));
  if (__p)
  {
    int v194 = __p;
    operator delete(__p);
  }
  if (__src != v189) {
    free(__src);
  }
  sub_1CD666F78((const void **)&v189);
  if (v207 - (unsigned char *)v206 != v194 - (unsigned char *)__p) {
    goto LABEL_122;
  }
  if (v206 != v207)
  {
    uint64_t v58 = (char *)__p + 8;
    int v59 = (char *)v206 + 8;
    while (1)
    {
      unint64_t v60 = v59 - 8;
      if (*((void *)v59 - 1) != *((void *)v58 - 1)) {
        break;
      }
      int v61 = v58[8];
      if (v59[8]) {
        BOOL v62 = v61 == 0;
      }
      else {
        BOOL v62 = 1;
      }
      if (v62)
      {
        if ((v59[8] == 0) == (v61 != 0)) {
          break;
        }
      }
      else if (*(void *)v59 != *(void *)v58)
      {
        break;
      }
      v58 += 24;
      v59 += 24;
      if (v60 + 24 == v207) {
        goto LABEL_129;
      }
    }
LABEL_122:
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates();
  }
LABEL_129:
  if (!sub_1CC931CBC((uint64_t)v10))
  {
    sub_1CC931B34((char **)&v162);
    unsigned int v50 = v163;
LABEL_177:
    int v175 = &v178[1];
    unsigned int v176 = &v178[1];
    LODWORD(v178[0]) = 0;
    uint64_t v177 = 0x100000008;
    v178[1] = v10;
    unint64_t v85 = (char *)operator new(0x20uLL);
    *(void *)unint64_t v85 = v10;
    v85[8] = 0;
    v85[24] = 0;
    int v180 = v85 + 32;
    BOOL v181 = v85 + 32;
    uint64_t v179 = v85;
    sub_1CC0D3E0C((uint64_t)&v175);
    uint64_t v86 = v185;
    unsigned int v182 = v185;
    uint64_t v87 = v176;
    if (v176 == v175)
    {
      unsigned int v183 = v185;
      unint64_t v88 = v176;
LABEL_179:
      int v89 = HIDWORD(v177);
      v184[0] = v177;
      if (v87 == v88) {
        unsigned int v90 = HIDWORD(v177);
      }
      else {
        unsigned int v90 = v177;
      }
      if (v90)
      {
        memmove(v86, v87, 8 * v90);
        int v89 = HIDWORD(v177);
      }
      v184[1] = v89;
      v184[2] = v178[0];
      unsigned int v187 = 0;
      uint64_t v188 = 0;
      uint64_t v186 = 0;
      sub_1CBFE1720(&v186, v179, v180, (v180 - (unsigned char *)v179) >> 5);
      if (v179)
      {
        int v180 = v179;
        operator delete(v179);
      }
      if (v176 != v175) {
        free(v176);
      }
      memset(v178, 0, sizeof(v178));
      int v175 = &v178[1];
      unsigned int v176 = &v178[1];
      uint64_t v177 = 8;
      int v180 = 0;
      BOOL v181 = 0;
      uint64_t v179 = 0;
      if (v187 != v186) {
        goto LABEL_202;
      }
      if (v186 != v187)
      {
        uint64_t v91 = 16;
        uint64_t v92 = (char *)v186 + 16;
        while (1)
        {
          uint64_t v93 = v92 - 16;
          if (*((void *)v92 - 2) != *(void *)(v91 - 16)) {
            break;
          }
          int v94 = *(unsigned __int8 *)(v91 + 8);
          if (v92[8]) {
            BOOL v95 = v94 == 0;
          }
          else {
            BOOL v95 = 1;
          }
          if (v95)
          {
            if ((v92[8] == 0) == (v94 != 0)) {
              break;
            }
          }
          else if (*(_DWORD *)v92 != *(_DWORD *)v91)
          {
            break;
          }
          v91 += 32;
          v92 += 32;
          if (v93 + 32 == v187) {
            goto LABEL_203;
          }
        }
LABEL_202:
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
LABEL_203:
      if (v176 != v175) {
        free(v176);
      }
      if (v186)
      {
        unsigned int v187 = (char *)v186;
        operator delete(v186);
      }
      if (v183 != v182) {
        free(v183);
      }
      goto LABEL_209;
    }
    int v142 = v177;
    uint64_t v86 = malloc_type_malloc(8 * v177, 0x4065EBACuLL);
    if (v86 || !v142 && (v86 = malloc_type_malloc(1uLL, 0x4065EBACuLL), uint64_t v9 = (unsigned char *)&unk_1EBCDF000, v86))
    {
      unsigned int v183 = v86;
      unint64_t v88 = v175;
      uint64_t v87 = v176;
      goto LABEL_179;
    }
LABEL_327:
    uint64_t v143 = "Allocation failed";
    goto LABEL_356;
  }
  uint64_t v64 = (char *)v196;
  uint64_t v65 = HIDWORD(v197);
  if (v196 != v195)
  {
    unsigned int v69 = v197;
    goto LABEL_142;
  }
  if (!HIDWORD(v197))
  {
LABEL_138:
    unsigned int v69 = v197;
    if (HIDWORD(v197) < v197)
    {
      ++HIDWORD(v197);
      *((void *)v196 + v65) = v10;
      goto LABEL_166;
    }
LABEL_142:
    if (3 * v69 <= 4 * (HIDWORD(v197) - v198))
    {
      if (v69 >= 0x40) {
        v69 *= 2;
      }
      else {
        unsigned int v69 = 128;
      }
    }
    else if (v69 - HIDWORD(v197) >= v69 >> 3)
    {
      goto LABEL_144;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v195, v69);
    unsigned int v69 = v197;
    uint64_t v64 = (char *)v196;
LABEL_144:
    unsigned int v70 = v69 - 1;
    unsigned int v71 = (v69 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    int v72 = &v64[8 * v71];
    unint64_t v73 = *(void **)v72;
    if (*(void *)v72 == -1)
    {
      uint64_t v74 = 0;
LABEL_159:
      if (v74) {
        BOOL v79 = v74;
      }
      else {
        BOOL v79 = v72;
      }
      if (*(void **)v79 != v10)
      {
        if (*(void *)v79 == -2) {
          --v198;
        }
        else {
          ++HIDWORD(v197);
        }
        *(void *)BOOL v79 = v10;
      }
    }
    else
    {
      uint64_t v74 = 0;
      int v75 = 1;
      while (v73 != v10)
      {
        if (v74) {
          BOOL v76 = 0;
        }
        else {
          BOOL v76 = v73 == (void *)-2;
        }
        if (v76) {
          uint64_t v74 = v72;
        }
        unsigned int v77 = v71 + v75++;
        unsigned int v71 = v77 & v70;
        int v72 = &v64[8 * (v77 & v70)];
        unint64_t v73 = *(void **)v72;
        if (*(void *)v72 == -1) {
          goto LABEL_159;
        }
      }
    }
    goto LABEL_166;
  }
  unsigned int v66 = 0;
  uint64_t v67 = 8 * HIDWORD(v197);
  uint64_t v68 = v196;
  while ((void *)*v68 != v10)
  {
    if (*v68 == -2) {
      unsigned int v66 = v68;
    }
    ++v68;
    v67 -= 8;
    if (!v67)
    {
      if (!v66) {
        goto LABEL_138;
      }
      *unsigned int v66 = v10;
      --v198;
      break;
    }
  }
LABEL_166:
  sub_1CC4CB3DC((uint64_t)(v50 - 4), (uint64_t)v10, v51);
  for (uint64_t i = v10[1]; i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v81 = *(void *)(i + 24);
    unsigned int v82 = *(unsigned __int8 *)(v81 + 16);
    BOOL v83 = v81 && v82 >= 0x1C;
    if (v83 && v82 - 29 < 0xB) {
      goto LABEL_177;
    }
  }
  *((unsigned char *)v50 - 8) = 1;
LABEL_209:
  if (__p)
  {
    int v194 = __p;
    operator delete(__p);
  }
  if (__src != v189) {
    free(__src);
  }
  if (v206)
  {
    BOOL v207 = (char *)v206;
    operator delete(v206);
  }
  if (v201 != v200) {
    free(v201);
  }
  if (v196 != v195) {
    free(v196);
  }
  uint64_t v96 = (char *)v162;
  if (v162 == v50)
  {
    if (v50) {
      operator delete(v50);
    }
    int v7 = v157;
    goto LABEL_31;
  }
  int v97 = this;
  uint64_t v98 = v162;
  while (1)
  {
    uint64_t v99 = v98 + 2;
    if (!v98[2]) {
      goto LABEL_270;
    }
    if (*((unsigned char *)v98 + 24)) {
      break;
    }
    uint64_t v100 = *((unsigned int *)v98 + 2);
    if (!v100)
    {
LABEL_265:
      if (v210 < HIDWORD(v210))
      {
        uint64_t v119 = (uint64_t)&v209[32 * v210];
        *(void *)uint64_t v119 = v119 + 16;
        *(void *)(v119 + 8) = 0;
        if (*((_DWORD *)v98 + 2)) {
          uint64_t v119 = sub_1CD667018(v119, v98);
        }
        uint64_t v120 = *v99;
        *(unsigned char *)(v119 + 24) = *((unsigned char *)v98 + 24);
        *(void *)(v119 + 16) = v120;
LABEL_269:
        LODWORD(v210) = v210 + 1;
        goto LABEL_270;
      }
      if (HIDWORD(v210) == -1) {
LABEL_354:
      }
        sub_1CD0A89A8(0xFFFFFFFFuLL);
      if (((2 * HIDWORD(v210)) | 1uLL) >= 0xFFFFFFFF) {
        uint64_t v121 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v121 = (2 * HIDWORD(v210)) | 1;
      }
      int v122 = malloc_type_malloc(32 * v121, 0x4065EBACuLL);
      if (v122)
      {
        uint64_t v123 = v122;
        uint64_t v124 = (uint64_t)&v122[4 * v210];
        *(void *)uint64_t v124 = v124 + 16;
        *(void *)(v124 + 8) = 0;
        int v125 = v123;
        if (*((_DWORD *)v98 + 2))
        {
          uint64_t v124 = sub_1CD667018(v124, v98);
          uint64_t v123 = v125;
        }
        uint64_t v126 = *v99;
        *(unsigned char *)(v124 + 24) = *((unsigned char *)v98 + 24);
        *(void *)(v124 + 16) = v126;
        int v127 = v209;
        if (v210)
        {
          int v156 = v121;
          __int16 v160 = v4;
          int v161 = v50;
          unint64_t v128 = 0;
          uint64_t v129 = 32 * v210;
          do
          {
            uint64_t v130 = &v123[v128 / 8];
            size_t v131 = &v127[v128];
            uint64_t v132 = (uint64_t)&v123[v128 / 8 + 2];
            *uint64_t v130 = v132;
            v130[1] = 0;
            if (*(_DWORD *)&v127[v128 + 8])
            {
              sub_1CD667018((uint64_t)v130, &v127[v128]);
              uint64_t v123 = v125;
            }
            uint64_t v133 = *((void *)v131 + 2);
            *(unsigned char *)(v132 + 8) = v131[24];
            *(void *)uint64_t v132 = v133;
            v128 += 32;
          }
          while (v129 != v128);
          int v127 = v209;
          LODWORD(v121) = v156;
          if (v210)
          {
            uint64_t v134 = 32 * v210;
            uint64_t v4 = v160;
            do
            {
              int v135 = *(char **)&v127[v134 - 32];
              if (&v127[v134 - 16] != v135)
              {
                free(v135);
                uint64_t v123 = v125;
              }
              v134 -= 32;
            }
            while (v134);
            int v127 = v209;
          }
          else
          {
            uint64_t v4 = v160;
          }
          unsigned int v50 = v161;
        }
        if (v127 != (char *)v211)
        {
          free(v127);
          uint64_t v123 = v125;
        }
        long long v209 = (char *)v123;
        HIDWORD(v210) = v121;
        goto LABEL_269;
      }
      uint64_t v143 = "Allocation failed";
LABEL_356:
      llvm::report_bad_alloc_error((llvm *)v143, (const char *)1);
    }
    unint64_t v101 = (uint64_t *)*v98;
    uint64_t v102 = *v98 + 16 * v100;
    unint64_t v103 = v171;
    while (1)
    {
      uint64_t v104 = *v101;
      uint64_t v105 = HIDWORD(v172);
      if (v103 == v170)
      {
        if (HIDWORD(v172))
        {
          int v106 = 0;
          uint64_t v107 = 8 * HIDWORD(v172);
          int v108 = v103;
          do
          {
            if (*v108 == v104) {
              goto LABEL_270;
            }
            if (*v108 == -2) {
              int v106 = v108;
            }
            ++v108;
            v107 -= 8;
          }
          while (v107);
          if (v106)
          {
            *int v106 = v104;
            --v173;
            goto LABEL_257;
          }
        }
        unsigned int v109 = v172;
        if (HIDWORD(v172) < v172)
        {
          ++HIDWORD(v172);
          *(void *)&v103[8 * v105] = v104;
          goto LABEL_257;
        }
      }
      else
      {
        unsigned int v109 = v172;
      }
      if (3 * v109 <= 4 * (HIDWORD(v172) - v173))
      {
        if (v109 >= 0x40) {
          v109 *= 2;
        }
        else {
          unsigned int v109 = 128;
        }
      }
      else if (v109 - HIDWORD(v172) >= v109 >> 3)
      {
        goto LABEL_238;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v170, v109);
      unsigned int v109 = v172;
      unint64_t v103 = v171;
LABEL_238:
      unsigned int v110 = v109 - 1;
      unsigned int v111 = (v109 - 1) & ((v104 >> 4) ^ (v104 >> 9));
      uint64_t v112 = &v103[8 * v111];
      uint64_t v113 = *(void *)v112;
      if (*(void *)v112 != -1) {
        break;
      }
      uint64_t v114 = 0;
LABEL_250:
      if (v114) {
        long long v118 = v114;
      }
      else {
        long long v118 = v112;
      }
      if (*(void *)v118 == v104) {
        goto LABEL_270;
      }
      if (*(void *)v118 == -2) {
        --v173;
      }
      else {
        ++HIDWORD(v172);
      }
      *(void *)long long v118 = v104;
LABEL_257:
      unint64_t v103 = v171;
      v101 += 2;
      if (v101 == (uint64_t *)v102) {
        goto LABEL_265;
      }
    }
    uint64_t v114 = 0;
    int v115 = 1;
    while (v113 != v104)
    {
      if (v114) {
        BOOL v116 = 0;
      }
      else {
        BOOL v116 = v113 == -2;
      }
      if (v116) {
        uint64_t v114 = v112;
      }
      unsigned int v117 = v111 + v115++;
      unsigned int v111 = v117 & v110;
      uint64_t v112 = &v103[8 * (v117 & v110)];
      uint64_t v113 = *(void *)v112;
      if (*(void *)v112 == -1) {
        goto LABEL_250;
      }
    }
LABEL_270:
    v98 += 4;
    if (v98 == v50)
    {
      if (v96)
      {
        char v136 = 1;
LABEL_302:
        this = v97;
        int v7 = v157;
        uint64_t v9 = (unsigned char *)&unk_1EBCDF000;
        int v137 = (char *)(v50 - 2);
        do
        {
          unsigned int v138 = (char *)*((void *)v137 - 2);
          if (v137 != v138) {
            free(v138);
          }
          uint64_t v139 = v137 - 16;
          v137 -= 32;
        }
        while (v139 != v96);
        operator delete(v96);
        if ((v136 & 1) == 0) {
          goto LABEL_330;
        }
      }
      else
      {
        this = v97;
        int v7 = v157;
        uint64_t v9 = (unsigned char *)&unk_1EBCDF000;
      }
LABEL_31:
      if (v8 == v7)
      {
LABEL_328:
        if (v210)
        {
          llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)&v200, v4);
          int v150 = v210;
          uint64_t v151 = v209;
          unint64_t v152 = &v209[32 * v210];
          uint64_t v189 = &v191;
          __src = 0;
          if (*((_DWORD *)v152 - 6))
          {
            sub_1CD667018((uint64_t)&v189, (void *)v152 - 4);
            int v150 = v210;
            uint64_t v151 = v209;
          }
          uint64_t v153 = *((void *)v152 - 2);
          LOBYTE(v192) = *(v152 - 8);
          uint64_t v191 = v153;
          uint64_t v154 = (v150 - 1);
          LODWORD(v210) = v154;
          unint64_t v155 = (void **)&v151[32 * v154];
          if (*v155 != v155 + 2) {
            free(*v155);
          }
          unsigned int v182 = v184;
          unsigned int v183 = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        char v159 = 0;
        goto LABEL_330;
      }
      goto LABEL_6;
    }
  }
  char v159 = sub_1CC92FDDC((uint64_t)v4, 0);
  if (v96)
  {
    char v136 = 0;
    goto LABEL_302;
  }
LABEL_330:
  uint64_t v144 = v165;
  uint64_t v165 = 0;
  if (v144) {
    sub_1CBF8FFEC((uint64_t)&v165, v144);
  }
  uint64_t v145 = *(void *)v166;
  *(void *)int v166 = 0;
  if (v145) {
    sub_1CBF8FF20((uint64_t)v166, v145);
  }
  if (v167)
  {
    unsigned int v168 = (char *)v167;
    operator delete(v167);
  }
  int v146 = v209;
  if (v210)
  {
    uint64_t v147 = 32 * v210;
    do
    {
      uint64_t v148 = *(char **)&v146[v147 - 32];
      if (&v146[v147 - 16] != v148) {
        free(v148);
      }
      v147 -= 32;
    }
    while (v147);
    int v146 = v209;
  }
  if (v146 != (char *)v211) {
    free(v146);
  }
  if (v171 != v170) {
    free(v171);
  }
  return v159 & 1;
}

uint64_t llvm::HotColdSplitting::run(llvm::ProfileSummaryInfo **this, llvm::Module *a2)
{
  uint64_t ProfileSummary = llvm::Module::getProfileSummary(a2, 0);
  uint64_t v5 = (char *)a2 + 24;
  uint64_t v6 = (char *)*((void *)a2 + 4);
  if (v6 != (char *)a2 + 24)
  {
    uint64_t v7 = ProfileSummary;
    char v8 = 0;
    while (1)
    {
      if (v6) {
        uint64_t v9 = (uint64_t)(v6 - 56);
      }
      else {
        uint64_t v9 = 0;
      }
      if (v6 && *(unsigned char *)(v9 + 16) == 3)
      {
        if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_17;
        }
      }
      else if (!*(unsigned char *)(v9 + 16) && *(void *)(v9 + 72) == v9 + 72 && (*(unsigned char *)(v9 + 34) & 0x80) == 0)
      {
        goto LABEL_17;
      }
      uint64_t v10 = *(void *)(v9 + 112);
      if (v10)
      {
        if ((*(unsigned char *)(v10 + 17) & 8) != 0) {
          goto LABEL_17;
        }
        if ((*(unsigned char *)(v10 + 12) & 0x20) != 0) {
          goto LABEL_26;
        }
      }
      if ((*(_WORD *)(v9 + 18) & 0x3FF0) == 0x90
        || (BOOL isFunctionEntryCold = llvm::ProfileSummaryInfo::isFunctionEntryCold(*this, (const llvm::Function *)v9)))
      {
LABEL_26:
        char v12 = sub_1CC92FDDC(v9, 0);
        goto LABEL_20;
      }
      if (llvm::HotColdSplitting::shouldOutlineFrom((llvm::HotColdSplitting *)isFunctionEntryCold, (const llvm::Function *)v9))
      {
        char v12 = llvm::HotColdSplitting::outlineColdRegions((llvm::HotColdSplitting *)this, (llvm::Function *)v9, v7 != 0);
LABEL_20:
        v8 |= v12;
      }
LABEL_17:
      uint64_t v6 = (char *)*((void *)v6 + 1);
      if (v6 == v5) {
        return v8 & 1;
      }
    }
  }
  char v8 = 0;
  return v8 & 1;
}

void llvm::initializeHotColdSplittingLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDFC48, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC9319DC;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCDFC48, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC9319DC(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, a2);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, v3);
  operator new();
}

uint64_t sub_1CC931A84(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDFC40;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2628670;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDFC48, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC9319DC;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDFC48, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC931B34(char **a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 < v2)
  {
    *((void *)v3 + 2) = 0;
    uint64_t v4 = v3 + 32;
    *((void *)v3 + 3) = 0;
    *(void *)uint64_t v3 = v3 + 16;
    *((void *)v3 + 1) = 0;
    v3[24] = 0;
    goto LABEL_22;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = (v3 - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    abort();
  }
  uint64_t v8 = v2 - (void)v5;
  if (v8 >> 4 > v7) {
    unint64_t v7 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9 >> 59) {
    sub_1CB833614();
  }
  uint64_t v10 = (char *)operator new(32 * v9);
  int v11 = &v10[32 * v6];
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 2) = 0;
  char v12 = &v10[32 * v9];
  uint64_t v4 = v11 + 32;
  *(void *)int v11 = v11 + 16;
  *((void *)v11 + 1) = 0;
  v11[24] = 0;
  if (v3 == v5)
  {
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (!v3) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  unint64_t v13 = 0;
  do
  {
    uint64_t v14 = &v11[v13];
    uint64_t v15 = &v11[v13 - 16];
    *((void *)v14 - 4) = v15;
    *((void *)v14 - 3) = 0;
    int v16 = &v3[v13];
    if (*(_DWORD *)&v3[v13 - 24]) {
      sub_1CD667018((uint64_t)&v11[v13 - 32], (void *)v16 - 4);
    }
    uint64_t v17 = *((void *)v16 - 2);
    v11[v13 - 8] = *(v16 - 8);
    *(void *)uint64_t v15 = v17;
    v13 -= 32;
  }
  while (&v3[v13] != v5);
  uint64_t v3 = *a1;
  uint64_t v18 = a1[1];
  *a1 = &v11[v13];
  a1[1] = v4;
  a1[2] = v12;
  if (v18 != v3)
  {
    int v19 = v18 - 16;
    do
    {
      BOOL v20 = (char *)*((void *)v19 - 2);
      if (v19 != v20) {
        free(v20);
      }
      unsigned int v21 = v19 - 16;
      v19 -= 32;
    }
    while (v21 != v3);
  }
  if (v3) {
LABEL_21:
  }
    operator delete(v3);
LABEL_22:
  a1[1] = v4;
}

BOOL sub_1CC931CBC(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 18) & 0x7FFF) != 0) {
    return 0;
  }
  for (uint64_t i = *(void *)(a1 + 48); ; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = i - 24;
    if (!i) {
      uint64_t v3 = 0;
    }
    if (*(unsigned char *)(v3 + 16) != 83) {
      break;
    }
  }
  unsigned int v4 = *(unsigned __int8 *)(i - 8) - 38;
  if (v4 < 0x39 && ((0x100060000000001uLL >> v4) & 1) != 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = v5 - 24;
  }
  else {
    uint64_t v6 = 0;
  }
  if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB) {
    uint64_t v6 = 0;
  }
  return *(unsigned __int8 *)(v6 + 16) - 35 < 0xFFFFFFFE;
}

void sub_1CC931D4C(llvm::SmallPtrSetImplBase *this)
{
  uint64_t v2 = *((void *)this + 13);
  while (2)
  {
    if (!*(unsigned char *)(v2 - 8))
    {
      uint64_t v3 = *(void *)(v2 - 24);
      do
      {
        uint64_t v3 = *(void *)(v3 + 8);
        if (!v3) {
          break;
        }
        uint64_t v4 = *(void *)(v3 + 24);
        unsigned int v5 = *(unsigned __int8 *)(v4 + 16);
        BOOL v6 = v4 && v5 >= 0x1C;
      }
      while (!v6 || v5 - 29 >= 0xB);
      *(void *)(v2 - 16) = v3;
      *(unsigned char *)(v2 - 8) = 1;
    }
    while (1)
    {
      uint64_t v8 = *(void *)(v2 - 16);
      if (!v8) {
        break;
      }
      uint64_t v9 = *(void *)(v2 - 16);
      do
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if (!v9) {
          break;
        }
        uint64_t v10 = *(void *)(v9 + 24);
        unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
        BOOL v12 = v10 && v11 >= 0x1C;
      }
      while (!v12 || v11 - 29 > 0xA);
      *(void *)(v2 - 16) = v9;
      uint64_t v14 = *(void *)(*(void *)(v8 + 24) + 40);
      uint64_t v15 = *((void *)this + 1);
      uint64_t v16 = *((unsigned int *)this + 5);
      if (v15 != *(void *)this)
      {
        unsigned int v20 = *((_DWORD *)this + 4);
        goto LABEL_34;
      }
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 8 * v16;
        int v19 = (void *)*((void *)this + 1);
        while (*v19 != v14)
        {
          if (*v19 == -2) {
            uint64_t v17 = v19;
          }
          ++v19;
          v18 -= 8;
          if (!v18)
          {
            if (!v17) {
              goto LABEL_31;
            }
            *uint64_t v17 = v14;
            --*((_DWORD *)this + 6);
            goto LABEL_63;
          }
        }
      }
      else
      {
LABEL_31:
        unsigned int v20 = *((_DWORD *)this + 4);
        if (v16 < v20)
        {
          *((_DWORD *)this + 5) = v16 + 1;
          *(void *)(v15 + 8 * v16) = v14;
LABEL_63:
          BOOL v32 = (unsigned char *)*((void *)this + 13);
          unint64_t v31 = *((void *)this + 14);
          if ((unint64_t)v32 >= v31)
          {
            uint64_t v34 = (unsigned char *)*((void *)this + 12);
            unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v34) >> 3) + 1;
            if (v35 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v34) >> 3);
            if (2 * v36 > v35) {
              unint64_t v35 = 2 * v36;
            }
            if (v36 >= 0x555555555555555) {
              unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37)
            {
              if (v37 > 0xAAAAAAAAAAAAAAALL) {
                sub_1CB833614();
              }
              uint64_t v38 = (char *)operator new(24 * v37);
            }
            else
            {
              uint64_t v38 = 0;
            }
            unsigned int v39 = &v38[8 * ((v32 - v34) >> 3)];
            *(void *)unsigned int v39 = v14;
            v39[8] = 0;
            v39[16] = 0;
            uint64_t v33 = v39 + 24;
            if (v32 != v34)
            {
              do
              {
                long long v40 = *(_OWORD *)(v32 - 24);
                *((void *)v39 - 1) = *((void *)v32 - 1);
                *(_OWORD *)(v39 - 24) = v40;
                v39 -= 24;
                v32 -= 24;
              }
              while (v32 != v34);
              BOOL v32 = (unsigned char *)*((void *)this + 12);
            }
            *((void *)this + 12) = v39;
            *((void *)this + 13) = v33;
            *((void *)this + 14) = &v38[24 * v37];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(void *)BOOL v32 = v14;
            v32[8] = 0;
            uint64_t v33 = v32 + 24;
            v32[16] = 0;
          }
          *((void *)this + 13) = v33;
          return;
        }
LABEL_34:
        if (3 * v20 <= 4 * ((int)v16 - *((_DWORD *)this + 6)))
        {
          if (v20 >= 0x40) {
            v20 *= 2;
          }
          else {
            unsigned int v20 = 128;
          }
LABEL_56:
          llvm::SmallPtrSetImplBase::Grow(this, v20);
          unsigned int v20 = *((_DWORD *)this + 4);
          uint64_t v15 = *((void *)this + 1);
          goto LABEL_36;
        }
        if (v20 - v16 < v20 >> 3) {
          goto LABEL_56;
        }
LABEL_36:
        unsigned int v21 = v20 - 1;
        unsigned int v22 = (v20 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        int v23 = (void *)(v15 + 8 * v22);
        uint64_t v24 = *v23;
        if (*v23 == -1)
        {
          char v25 = 0;
LABEL_48:
          if (v25) {
            uint64_t v29 = v25;
          }
          else {
            uint64_t v29 = v23;
          }
          if (*v29 != v14)
          {
            if (*v29 == -2) {
              --*((_DWORD *)this + 6);
            }
            else {
              ++*((_DWORD *)this + 5);
            }
            void *v29 = v14;
            goto LABEL_63;
          }
        }
        else
        {
          char v25 = 0;
          int v26 = 1;
          while (v24 != v14)
          {
            if (v25) {
              BOOL v27 = 0;
            }
            else {
              BOOL v27 = v24 == -2;
            }
            if (v27) {
              char v25 = v23;
            }
            unsigned int v28 = v22 + v26++;
            unsigned int v22 = v28 & v21;
            int v23 = (void *)(v15 + 8 * (v28 & v21));
            uint64_t v24 = *v23;
            if (*v23 == -1) {
              goto LABEL_48;
            }
          }
        }
      }
    }
    uint64_t v30 = *((void *)this + 12);
    uint64_t v2 = *((void *)this + 13) - 24;
    *((void *)this + 13) = v2;
    if (v30 != v2) {
      continue;
    }
    break;
  }
}

void sub_1CC932074()
{
}

void sub_1CC9320B4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC9320EC(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 144, (uint64_t)llvm::AssumptionCacheTracker::ID);
}

uint64_t sub_1CC932164(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }
  unsigned int v5 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(char **)v6 != llvm::ProfileSummaryInfoWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = *(llvm::ProfileSummaryInfo **)((*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  uint64_t v14 = 0;
  uint64_t v15 = a1;
  uint64_t v16 = a1;
  v17[0] = &unk_1F2628710;
  v17[1] = &v14;
  uint64_t v18 = v17;
  v12[0] = v9;
  v12[1] = (llvm::ProfileSummaryInfo *)sub_1CC932434;
  v12[2] = (llvm::ProfileSummaryInfo *)&v15;
  v12[3] = (llvm::ProfileSummaryInfo *)sub_1CC9324BC;
  v12[4] = (llvm::ProfileSummaryInfo *)&v16;
  v12[5] = (llvm::ProfileSummaryInfo *)v17;
  v12[6] = (llvm::ProfileSummaryInfo *)sub_1CC93255C;
  v12[7] = (llvm::ProfileSummaryInfo *)&v13;
  unint64_t v13 = a1;
  uint64_t v4 = llvm::HotColdSplitting::run(v12, (llvm::Module *)a2);
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void *))(*v18 + 40))(v18);
  }
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10) {
    sub_1CC0CC1D8((uint64_t)&v14, v10);
  }
  return v4;
}

void sub_1CC932340()
{
}

void *sub_1CC932354(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2628710;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC93239C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2628710;
  a2[1] = v2;
  return result;
}

void sub_1CC9323C8()
{
}

uint64_t sub_1CC932434(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

uint64_t *sub_1CC9324BC(uint64_t a1, const Function *a2)
{
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetTransformInfoWrapperPass::ID);

  return llvm::TargetTransformInfoWrapperPass::getTTI(v7, a2);
}

uint64_t sub_1CC93255C(uint64_t a1, llvm::Function *a2)
{
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(*(void *)a1 + 8) + 24), llvm::AssumptionCacheTracker::ID, 1);
  if (!AnalysisPass) {
    return 0;
  }
  uint64_t v4 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)AnalysisPass + 96))(AnalysisPass, llvm::AssumptionCacheTracker::ID);
  if (!v4) {
    return 0;
  }

  return llvm::AssumptionCacheTracker::lookupAssumptionCache(v4, a2);
}

void sub_1CC9325F4()
{
}

void *sub_1CC932608(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2628758;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC932650(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2628758;
  a2[1] = v2;
  return result;
}

void sub_1CC93267C()
{
}

void sub_1CC9326AC()
{
}

void *sub_1CC9326C0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F26287A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC932708(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26287A0;
  a2[1] = v2;
  return result;
}

void sub_1CC932734()
{
}

void sub_1CC9327A0()
{
}

uint64_t sub_1CC9327CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    sub_1CB920400();
    return sub_1CC93281C();
  }
}

void sub_1CC93281C()
{
}

uint64_t sub_1CC932850()
{
  LOBYTE(v3) = 1;
  v1.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCDFC50, "hot-cold-static-analysis", &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDFC50, &dword_1CB82C000);
  int v2 = 1;
  int v3 = 2;
  uint64_t v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Base penalty for splitting cold code (as a multiple of TCC_Basic)";
  v1.n128_u64[1] = 65;
  sub_1CD667238(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCDFD10, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  int v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable placement of extracted cold functions into a separate section after hot-cold splitting.";
  v1.n128_u64[1] = 94;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDFDD0, "enable-cold-section", (unsigned char **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDFDD0, &dword_1CB82C000);
  uint64_t v4 = (int *)"__llvm_cold";
  int v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Name for the section containing cold functions extracted by hot-cold splitting.";
  v1.n128_u64[1] = 79;
  sub_1CD6673B0((const char **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCDFF50, &dword_1CB82C000);
  int v2 = 1;
  int v3 = 4;
  uint64_t v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Maximum number of parameters for a split function";
  v1.n128_u64[1] = 49;
  sub_1CD667524(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCDFE90, &dword_1CB82C000);
}

void llvm::initializeIPO(llvm *this, llvm::PassRegistry *a2)
{
  llvm::initializeOpenMPOptCGSCCLegacyPassPass(this, a2);
  llvm::initializeArgPromotionPass(this, v3);
  llvm::initializeAnnotation2MetadataLegacyPass(this, v4);
  llvm::initializeCalledValuePropagationLegacyPassPass(this, v5);
  llvm::initializeConstantMergeLegacyPassPass(this, v6);
  llvm::initializeCrossDSOCFIPass(this, v7);
  llvm::initializeDAEPass(this, v8);
  llvm::initializeDAHPass(this, v9);
  llvm::initializeForceFunctionAttrsLegacyPassPass(this, v10);
  llvm::initializeFunctionSpecializationLegacyPassPass(this, v11);
  llvm::initializeGlobalDCELegacyPassPass(this, v12);
  llvm::initializeGlobalOptLegacyPassPass(this, v13);
  llvm::initializeGlobalSplitPass(this, v14);
  llvm::initializeHotColdSplittingLegacyPassPass(this, v15);
  llvm::initializeIROutlinerLegacyPassPass(this, v16);
  llvm::initializeAlwaysInlinerLegacyPassPass(this, v17);
  llvm::initializeSimpleInlinerPass(this, v18);
  llvm::initializeInferFunctionAttrsLegacyPassPass(this, v19);
  llvm::initializeInternalizeLegacyPassPass(this, v20);
  llvm::initializeLoopExtractorLegacyPassPass(this, v21);
  llvm::initializeBlockExtractorLegacyPassPass(this, v22);
  llvm::initializeSingleLoopExtractorPass(this, v23);
  llvm::initializeLowerTypeTestsPass(this, v24);
  llvm::initializeMergeFunctionsLegacyPassPass(this, v25);
  llvm::initializePartialInlinerLegacyPassPass(this, v26);
  llvm::initializeAttributorLegacyPassPass(this, v27);
  llvm::initializeAttributorCGSCCLegacyPassPass(this, v28);
  llvm::initializePostOrderFunctionAttrsLegacyPassPass(this, v29);
  llvm::initializeReversePostOrderFunctionAttrsLegacyPassPass(this, v30);
  llvm::initializePruneEHPass(this, v31);
  llvm::initializeIPSCCPLegacyPassPass(this, v32);
  llvm::initializeStripDeadPrototypesLegacyPassPass(this, v33);
  llvm::initializeStripSymbolsPass(this, v34);
  llvm::initializeStripDebugDeclarePass(this, v35);
  llvm::initializeStripDeadDebugInfoPass(this, v36);
  llvm::initializeStripNonDebugSymbolsPass(this, v37);
  llvm::initializeBarrierNoopPass(this, v38);
  llvm::initializeEliminateAvailableExternallyLegacyPassPass(this, v39);
  llvm::initializeSampleProfileLoaderLegacyPassPass(this, v40);
  llvm::initializeFunctionImportLegacyPassPass(this, v41);

  llvm::initializeWholeProgramDevirtPass(this, v42);
}

void LLVMAddArgumentPromotionPass()
{
}

void LLVMAddCalledValuePropagationPass(llvm *a1)
{
}

void LLVMAddConstantMergePass(llvm *a1)
{
}

void LLVMAddDeadArgEliminationPass(llvm *a1)
{
}

void LLVMAddFunctionAttrsPass(llvm *a1)
{
}

void LLVMAddFunctionInliningPass(llvm *a1)
{
}

void LLVMAddAlwaysInlinerPass()
{
}

void LLVMAddGlobalDCEPass(llvm *a1)
{
}

void LLVMAddGlobalOptimizerPass(llvm *a1)
{
}

void LLVMAddPruneEHPass(llvm *a1)
{
}

void LLVMAddIPSCCPPass(llvm *a1)
{
}

void LLVMAddMergeFunctionsPass(llvm *a1)
{
}

void LLVMAddInternalizePass(uint64_t a1, int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = &unk_1F26287E8;
  int v3 = a2;
  uint64_t v4 = &v2;
  llvm::createInternalizePass();
}

void LLVMAddInternalizePassWithMustPreservePredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F2628830;
  v3[1] = a3;
  v3[2] = a2;
  v3[3] = v3;
  llvm::createInternalizePass();
}

void LLVMAddStripDeadPrototypesPass(llvm *a1)
{
}

void LLVMAddStripSymbolsPass()
{
}

void sub_1CC9332B4()
{
}

_DWORD *sub_1CC9332C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F26287E8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC933314(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F26287E8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CC933344(uint64_t a1, uint64_t ***a2)
{
  if (!*(_DWORD *)(a1 + 8) || (*((unsigned char *)a2 + 23) & 0x10) == 0) {
    return 0;
  }
  uint64_t v2 = ***a2;
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(unsigned int *)(v2 + 168);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t ****)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_10;
    }
    int v8 = 1;
    while (v7 != (uint64_t ***)-4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(uint64_t ****)(v3 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (uint64_t ****)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  uint64_t v6 = (uint64_t ****)(v3 + 16 * v4);
LABEL_10:
  uint64_t v10 = v6[1];
  if (*v10 == (uint64_t **)4) {
    return *((_DWORD *)v10 + 4) == 1852399981;
  }
  return 0;
}

void sub_1CC9333F4()
{
}

__n128 sub_1CC933408(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2628830;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC933454(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2628830;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CC933484(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, void))(a1 + 8))(a2, *(void *)(a1 + 16)) != 0;
}

uint64_t llvm::OutlinableRegion::findCorrespondingValueIn(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = sub_1CBFFA82C(*a1, a3);
  uint64_t v6 = *(void *)(*a1 + 72);
  uint64_t v7 = *(unsigned int *)(*a1 + 88);
  if (v7)
  {
    LODWORD(v8) = (v7 - 1) & (37 * v5);
    int v9 = (int *)(v6 + 8 * v8);
    int v10 = *v9;
    if (*v9 == v5) {
      goto LABEL_3;
    }
    int v21 = 1;
    while (v10 != -1)
    {
      int v22 = v8 + v21++;
      uint64_t v8 = v22 & (v7 - 1);
      int v10 = *(_DWORD *)(v6 + 8 * v8);
      if (v10 == v5)
      {
        int v9 = (int *)(v6 + 8 * v8);
        goto LABEL_3;
      }
    }
  }
  int v9 = (int *)(v6 + 8 * v7);
LABEL_3:
  if ((int *)(v6 + 8 * v7) == v9) {
    int v11 = 0;
  }
  else {
    int v11 = v9[1];
  }
  uint64_t v12 = *a2;
  uint64_t v13 = *(void *)(v12 + 96);
  uint64_t v14 = *(unsigned int *)(v12 + 112);
  if (v14)
  {
    LODWORD(v15) = (v14 - 1) & (37 * v11);
    uint64_t v16 = (int *)(v13 + 8 * v15);
    int v17 = *v16;
    if (v11 == *v16) {
      goto LABEL_8;
    }
    int v23 = 1;
    while (v17 != -1)
    {
      int v24 = v15 + v23++;
      uint64_t v15 = v24 & (v14 - 1);
      int v17 = *(_DWORD *)(v13 + 8 * v15);
      if (v11 == v17)
      {
        uint64_t v16 = (int *)(v13 + 8 * v15);
        goto LABEL_8;
      }
    }
  }
  uint64_t v16 = (int *)(v13 + 8 * v14);
LABEL_8:
  if ((int *)(v13 + 8 * v14) == v16) {
    int v18 = 0;
  }
  else {
    int v18 = v16[1];
  }
  int v25 = v18;
  uint64_t v19 = sub_1CD48A634((uint64_t *)(v12 + 48), &v25);
  if ((int *)(*(void *)(v12 + 48) + 16 * *(unsigned int *)(v12 + 64)) == v19) {
    return 0;
  }
  else {
    return *((void *)v19 + 1);
  }
}

uint64_t llvm::OutlinableRegion::findCorrespondingBlockIn(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a3 + 40;
  for (uint64_t i = *(void *)(a3 + 48); i != v3; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = i - 24;
    if (i) {
      uint64_t v6 = i - 24;
    }
    else {
      uint64_t v6 = 0;
    }
    if (*(unsigned char *)(v6 + 16) != 83) {
      goto LABEL_9;
    }
  }
  uint64_t v5 = 0;
LABEL_9:
  uint64_t result = llvm::OutlinableRegion::findCorrespondingValueIn(a1, a2, v5);
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t llvm::OutlinableRegion::splitCandidate(llvm::OutlinableRegion *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (*(unsigned __int8 *)(v4 + 16) - 29 <= 0xA) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(*(void *)(v3 + 8) + 16);
  uint64_t result = llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v4, 0);
  if (v5 == result)
  {
    uint64_t v2 = *(void *)this;
LABEL_6:
    uint64_t v7 = *(void *)(*(void *)(v2 + 8) + 16);
    uint64_t v8 = *(void *)(v7 + 40);
    *((void *)this + 28) = v8;
    *((void *)this + 29) = v8;
    v70[0] = 0;
    v70[1] = 0;
    int v71 = 0;
    sub_1CD4894A8(v2, (uint64_t)v70);
    uint64_t v9 = v7 + 24;
    uint64_t v10 = *(void *)(v4 + 40);
    *((void *)this + 30) = v10;
    int v11 = (uint64_t *)(v10 + 40);
    uint64_t v12 = *(void *)(v10 + 40);
    if (v12 == v10 + 40)
    {
      uint64_t v13 = 0;
    }
    else
    {
      if (v12) {
        uint64_t v13 = v12 - 24;
      }
      else {
        uint64_t v13 = 0;
      }
      if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB) {
        uint64_t v13 = 0;
      }
    }
    if (*(unsigned char *)(v7 + 16) != 83) {
      goto LABEL_49;
    }
    int v14 = v71 - 1;
    uint64_t v15 = v7;
    uint64_t v16 = v7 + 24;
    while (1)
    {
      int v17 = *(_DWORD *)(v15 + 20);
      uint64_t v18 = v17 & 0x7FFFFFF;
      if ((v17 & 0x7FFFFFF) == 0) {
        goto LABEL_39;
      }
      uint64_t v19 = 0;
      unsigned int v20 = 0;
      uint64_t v21 = *(unsigned int *)(v15 + 60);
      do
      {
        uint64_t v22 = v15 - 32 * v18;
        if ((v17 & 0x40000000) != 0) {
          uint64_t v22 = *(void *)(v15 - 8);
        }
        if (!v71) {
          goto LABEL_23;
        }
        uint64_t v23 = *(void *)(v22 + 32 * v21 + 8 * v19);
        unsigned int v24 = ((v23 >> 4) ^ (v23 >> 9)) & v14;
        uint64_t v25 = *(void *)(v70[0] + 8 * v24);
        if (v23 != v25)
        {
          int v29 = 1;
          while (v25 != -4096)
          {
            unsigned int v30 = v24 + v29++;
            unsigned int v24 = v30 & v14;
            uint64_t v25 = *(void *)(v70[0] + 8 * v24);
            if (v23 == v25) {
              goto LABEL_22;
            }
          }
LABEL_23:
          int v26 = 1;
          goto LABEL_32;
        }
LABEL_22:
        if (v24 == v71) {
          goto LABEL_23;
        }
        uint64_t v27 = v15 - 32 * v18;
        if ((v17 & 0x40000000) != 0) {
          uint64_t v27 = *(void *)(v15 - 8);
        }
        int v26 = *(void *)(v27 + 32 * v21 + 8 * v19) == v10 && v13 != v4;
LABEL_32:
        v20 += v26;
        ++v19;
      }
      while (v19 != v18);
      if (v20 > 1) {
        return MEMORY[0x1D25D9CD0](v70[0], 8);
      }
LABEL_39:
      uint64_t v16 = *(void *)(v16 + 8);
      uint64_t v15 = v16 - 24;
      if (!v16) {
        uint64_t v15 = 0;
      }
      int v31 = *(unsigned __int8 *)(v15 + 16);
      if (v31 != 83) {
        uint64_t v15 = 0;
      }
      if (!v16 || v31 != 83)
      {
        uint64_t v32 = *(void *)(*((void *)this + 29) + 48);
        if (v32) {
          uint64_t v33 = v32 - 24;
        }
        else {
          uint64_t v33 = 0;
        }
        if (v7 != v33) {
          return MEMORY[0x1D25D9CD0](v70[0], 8);
        }
LABEL_49:
        if (*(unsigned char *)(v4 + 16) == 83)
        {
          for (uint64_t i = *(uint64_t **)(v10 + 48); i != v11; uint64_t i = (uint64_t *)i[1])
          {
            unint64_t v35 = i - 3;
            if (!i) {
              unint64_t v35 = 0;
            }
            if (*((unsigned char *)v35 + 16) != 83)
            {
              unsigned int v36 = *((unsigned __int8 *)i - 8) - 38;
              BOOL v37 = v36 > 0x38;
              uint64_t v38 = (1 << v36) & 0x100060000000001;
              if (v37 || v38 == 0) {
                int v11 = i;
              }
              else {
                int v11 = (uint64_t *)i[1];
              }
              break;
            }
          }
          uint64_t v40 = *v11;
          uint64_t v41 = v40 ? v40 - 24 : 0;
          if (v4 != v41) {
            return MEMORY[0x1D25D9CD0](v70[0], 8);
          }
        }
        uint64_t v42 = (uint64_t ***)*((void *)this + 28);
        if ((*((unsigned char *)v42 + 23) & 0x10) != 0)
        {
          uint64_t v43 = ***v42;
          uint64_t v44 = *(void *)(v43 + 152);
          uint64_t v45 = *(unsigned int *)(v43 + 168);
          if (v45)
          {
            LODWORD(v46) = (v45 - 1) & ((v42 >> 4) ^ (v42 >> 9));
            uint64_t v47 = (uint64_t ****)(v44 + 16 * v46);
            uint64_t v48 = *v47;
            if (*v47 != v42)
            {
              int v49 = 1;
              do
              {
                if (v48 == (uint64_t ***)-4096) {
                  goto LABEL_74;
                }
                int v50 = v46 + v49++;
                uint64_t v46 = v50 & (v45 - 1);
                uint64_t v48 = *(uint64_t ****)(v44 + 16 * v46);
              }
              while (v48 != v42);
              uint64_t v47 = (uint64_t ****)(v44 + 16 * v46);
            }
          }
          else
          {
LABEL_74:
            uint64_t v47 = (uint64_t ****)(v44 + 16 * v45);
          }
          BOOL v51 = (unint64_t *)v47[1];
          unint64_t v54 = *v51;
          int v53 = v51 + 2;
          size_t v52 = v54;
          if (v54 >= 0x7FFFFFFFFFFFFFF8) {
            abort();
          }
          if (v52 >= 0x17)
          {
            uint64_t v56 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v52 | 7) != 0x17) {
              uint64_t v56 = v52 | 7;
            }
            uint64_t v57 = v56 + 1;
            p_dst = operator new(v56 + 1);
            size_t v68 = v52;
            int64_t v69 = v57 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v69) = v52;
            p_dst = &__dst;
            if (!v52)
            {
LABEL_83:
              *((unsigned char *)p_dst + v52) = 0;
              int v58 = SHIBYTE(v69);
              uint64_t v59 = *((void *)this + 28);
              if (v69 >= 0) {
                size_t v60 = HIBYTE(v69) & 0x7F;
              }
              else {
                size_t v60 = v68;
              }
              sub_1CB907098((uint64_t)__p, v60 + 11);
              if (v64 >= 0) {
                int v61 = __p;
              }
              else {
                int v61 = (void **)__p[0];
              }
              if (v60)
              {
                if (v58 >= 0) {
                  BOOL v62 = &__dst;
                }
                else {
                  BOOL v62 = __dst;
                }
                memmove(v61, v62, v60);
              }
              strcpy((char *)v61 + v60, "_to_outline");
              __int16 v66 = 260;
              uint64_t v65 = __p;
              llvm::BasicBlock::splitBasicBlock(v59, v9, (uint64_t)&v65, 0);
            }
          }
          memmove(p_dst, v53, v52);
          goto LABEL_83;
        }
        size_t v52 = 0;
        HIBYTE(v69) = 0;
        p_dst = &__dst;
        goto LABEL_83;
      }
    }
  }
  return result;
}

uint64_t sub_1CC933C3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(result + 40) != result + 40)
  {
    uint64_t v4 = *(void *)(result + 48);
    uint64_t v5 = v4 - 24;
    uint64_t v6 = v4 ? v4 - 24 : 0;
    if (v4 && *(unsigned char *)(v6 + 16) == 83)
    {
      do
      {
        int v10 = *(_DWORD *)(v5 + 20);
        uint64_t v11 = v10 & 0x7FFFFFF;
        if ((v10 & 0x7FFFFFF) != 0)
        {
          uint64_t v12 = 0;
          do
          {
            int v13 = *(_DWORD *)(v5 + 20);
            if ((v13 & 0x40000000) != 0) {
              uint64_t v14 = *(void *)(v5 - 8);
            }
            else {
              uint64_t v14 = v5 - 32 * (v13 & 0x7FFFFFF);
            }
            uint64_t v15 = *(void *)(v14 + 32 * *(unsigned int *)(v5 + 60) + 8 * v12);
            uint64_t v24 = 0;
            uint64_t v25 = v15;
            uint64_t result = sub_1CBFFBBB4((uint64_t *)a4, &v25, &v24);
            if (result && v24 != *(void *)a4 + 8 * *(unsigned int *)(a4 + 16))
            {
              uint64_t v16 = *(void *)(v15 + 40);
              if (v16 == v15 + 40)
              {
                uint64_t v17 = 0;
              }
              else
              {
                if (v16) {
                  uint64_t v17 = v16 - 24;
                }
                else {
                  uint64_t v17 = 0;
                }
                if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB) {
                  uint64_t v17 = 0;
                }
              }
              unsigned int v18 = 0;
              if (*(unsigned char *)(v17 + 16) == 30) {
                uint64_t v19 = v17;
              }
              else {
                uint64_t v19 = 0;
              }
              if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 3) {
                int v20 = 2;
              }
              else {
                int v20 = 1;
              }
              uint64_t v21 = -32;
              do
              {
                if (*(void *)(v19 + v21) == a2) {
                  uint64_t result = sub_1CC5C92A0(v19, v18, a3);
                }
                ++v18;
                v21 -= 32;
              }
              while (v20 != v18);
            }
            ++v12;
          }
          while (v12 != v11);
        }
        uint64_t v22 = *(void *)(v5 + 32);
        uint64_t v5 = v22 - 24;
        if (v22) {
          uint64_t v23 = v22 - 24;
        }
        else {
          uint64_t v23 = 0;
        }
      }
      while (v22 && *(unsigned char *)(v23 + 16) == 83);
    }
  }
  return result;
}

uint64_t OutlinableGroup::findSameConstants(uint64_t ***a1, uint64_t a2)
{
  v28[0] = 0;
  v28[1] = 0;
  unsigned int v29 = 0;
  uint64_t v2 = *a1;
  uint64_t v27 = a1[1];
  if (*a1 == v27)
  {
    uint64_t v25 = 0;
    return MEMORY[0x1D25D9CD0](v25, 8);
  }
  do
  {
    uint64_t v4 = **v2;
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *(void *)(*(void *)(v4 + 16) + 8);
    while (v5 != v6)
    {
      uint64_t v7 = *(unsigned int *)(v5 + 32);
      if (v7)
      {
        uint64_t v8 = *(uint64_t **)(v5 + 24);
        uint64_t v9 = &v8[v7];
        do
        {
          uint64_t v10 = *v8;
          unsigned int v30 = sub_1CBFFA82C(v4, *v8);
          uint64_t v11 = sub_1CD48C650((uint64_t *)a2, &v30);
          uint64_t v12 = *(void *)a2;
          uint64_t v13 = *(unsigned int *)(a2 + 16);
          if ((int *)(*(void *)a2 + 4 * v13) == v11)
          {
            if (v10) {
              BOOL v14 = *(unsigned __int8 *)(v10 + 16) > 0x14u;
            }
            else {
              BOOL v14 = 1;
            }
            if (!v14)
            {
              uint64_t v31 = v30;
              uint64_t v32 = v10;
              sub_1CD4893B8((uint64_t)&v33, (uint64_t)v28, &v31, &v32);
              if (v34 || *(void *)(v33 + 8) == v10) {
                goto LABEL_7;
              }
              uint64_t v12 = *(void *)a2;
              LODWORD(v13) = *(_DWORD *)(a2 + 16);
            }
            unsigned int v15 = v30;
            sub_1CD57516C(v28[0], v29, v30);
            if (!v13)
            {
              uint64_t v23 = 0;
LABEL_32:
              uint64_t v24 = sub_1CBB29C30(a2, (uint64_t)&v30, &v30, v23);
              *uint64_t v24 = v30;
              goto LABEL_7;
            }
            unsigned int v16 = (v13 - 1) & (37 * v15);
            uint64_t v17 = (int *)(v12 + 4 * v16);
            int v18 = *v17;
            if (v15 != *v17)
            {
              uint64_t v19 = 0;
              int v20 = 1;
              while (v18 != -1)
              {
                if (v19) {
                  BOOL v21 = 0;
                }
                else {
                  BOOL v21 = v18 == -2;
                }
                if (v21) {
                  uint64_t v19 = v17;
                }
                unsigned int v22 = v16 + v20++;
                unsigned int v16 = v22 & (v13 - 1);
                uint64_t v17 = (int *)(v12 + 4 * v16);
                int v18 = *v17;
                if (v15 == *v17) {
                  goto LABEL_7;
                }
              }
              if (v19) {
                uint64_t v23 = v19;
              }
              else {
                uint64_t v23 = v17;
              }
              goto LABEL_32;
            }
          }
LABEL_7:
          ++v8;
        }
        while (v8 != v9);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    ++v2;
  }
  while (v2 != v27);
  uint64_t v25 = v28[0];
  return MEMORY[0x1D25D9CD0](v25, 8);
}

void llvm::IROutliner::findAddInputsOutputs(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  v542[2] = *MEMORY[0x1E4F143B8];
  v496[0] = 0;
  v496[1] = 0;
  int v497 = 0;
  uint64_t v499 = 0;
  uint64_t v500 = 0;
  v498 = 0;
  v491[0] = 0;
  v491[1] = 0;
  int v492 = 0;
  int v494 = 0;
  uint64_t v495 = 0;
  unint64_t v493 = 0;
  uint64_t v7 = *a3;
  unint64_t v538 = 0;
  uint64_t v539 = 0;
  LODWORD(v540) = 0;
  v542[0] = 0;
  v542[1] = 0;
  uint64_t v541 = 0;
  v507 = 0;
  uint64_t v508 = 0;
  LODWORD(v509) = 0;
  v511[0] = 0;
  v511[1] = 0;
  uint64_t v510 = 0;
  v532 = 0;
  uint64_t v533 = 0;
  LODWORD(v534) = 0;
  v536 = 0;
  uint64_t v537 = 0;
  int v535 = 0;
  v526 = 0;
  uint64_t v527 = 0;
  int v528 = 0;
  uint64_t v530 = 0;
  uint64_t v531 = 0;
  uint64_t v529 = 0;
  unint64_t v501 = 0;
  uint64_t v502 = 0;
  int v503 = 0;
  unint64_t v505 = 0;
  uint64_t v506 = 0;
  int64_t v504 = 0;
  uint64_t v8 = (llvm::CodeExtractor *)a3[24];
  llvm::CodeExtractor::findInputsOutputs((uint64_t)v8, &v538, &v501, (uint64_t *)&v532);
  llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)&v523, *(llvm::Function **)(v5[29] + 56));
  v512[0] = 0;
  if ((llvm::CodeExtractor::isEligible(v8) & 1) == 0
    || (llvm::CodeExtractor::findAllocas((uint64_t)v8, (unsigned int *)&v523, &v532, &v526, v512),
        llvm::CodeExtractor::findInputsOutputs((uint64_t)v8, &v507, v491, (uint64_t *)&v532),
        v542[0] - v541 != v511[0] - (void)v510))
  {
    unint64_t v488 = 0;
    std::string __p = 0;
    *((unsigned char *)v5 + 217) = 1;
    goto LABEL_51;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v521 = 0;
  uint64_t v519 = 0;
  uint64_t v520 = 0;
  uint64_t v12 = *(void *)(v7 + 8);
  uint64_t v487 = *(void *)(*(void *)(v7 + 16) + 8);
  std::string __p = 0;
  v475 = v5;
  if (v12 == v487) {
    goto LABEL_48;
  }
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  do
  {
    uint64_t v13 = *(unsigned int *)(v12 + 32);
    if (v13)
    {
      BOOL v14 = *(uint64_t **)(v12 + 24);
      unsigned int v15 = &v14[v13];
      unsigned int v16 = v10;
      do
      {
        uint64_t v17 = *v14;
        LODWORD(v516) = 0;
        LODWORD(v516) = sub_1CBFFA82C(v7, v17);
        if (*(unsigned __int8 *)(v17 + 16) > 0x14u
          || (int *)(*(void *)a4 + 4 * *(unsigned int *)(a4 + 16)) == sub_1CD48C650((uint64_t *)a4, &v516)
          || (v18 = sub_1CD48C650(&v519, &v516), uint64_t v19 = v519, (int *)(v519 + 4 * v521) != v18))
        {
          uint64_t v10 = v16;
        }
        else
        {
          if (v16 >= (unsigned int *)v11)
          {
            BOOL v21 = __p;
            uint64_t v22 = v16 - __p;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62) {
LABEL_729:
            }
              abort();
            if ((v11 - (char *)__p) >> 1 > v23) {
              unint64_t v23 = (v11 - (char *)__p) >> 1;
            }
            if ((unint64_t)(v11 - (char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v23;
            }
            if (v24)
            {
              if (v24 >> 62) {
LABEL_730:
              }
                sub_1CB833614();
              uint64_t v25 = v519;
              int v26 = (char *)operator new(4 * v24);
              BOOL v21 = __p;
              uint64_t v19 = v25;
            }
            else
            {
              int v26 = 0;
            }
            int v20 = (unsigned int *)&v26[4 * v22];
            *int v20 = v516;
            uint64_t v10 = v20 + 1;
            while (v16 != v21)
            {
              unsigned int v27 = *--v16;
              *--int v20 = v27;
            }
            uint64_t v11 = &v26[4 * v24];
            if (v21)
            {
              operator delete(v21);
              uint64_t v19 = v519;
            }
          }
          else
          {
            unsigned int *v16 = v516;
            uint64_t v10 = v16 + 1;
            int v20 = __p;
          }
          std::string __p = v20;
          if (!v521)
          {
            unint64_t v35 = 0;
LABEL_45:
            unsigned int v36 = sub_1CBB29C30((uint64_t)&v519, (uint64_t)&v516, &v516, v35);
            *unsigned int v36 = v516;
            goto LABEL_9;
          }
          unsigned int v28 = (37 * v516) & (v521 - 1);
          unsigned int v29 = (int *)(v19 + 4 * v28);
          int v30 = *v29;
          if (v516 != *v29)
          {
            uint64_t v31 = 0;
            int v32 = 1;
            while (v30 != -1)
            {
              if (v31) {
                BOOL v33 = 0;
              }
              else {
                BOOL v33 = v30 == -2;
              }
              if (v33) {
                uint64_t v31 = v29;
              }
              unsigned int v34 = v28 + v32++;
              unsigned int v28 = v34 & (v521 - 1);
              unsigned int v29 = (int *)(v19 + 4 * v28);
              int v30 = *v29;
              if (v516 == *v29) {
                goto LABEL_9;
              }
            }
            if (v31) {
              unint64_t v35 = v31;
            }
            else {
              unint64_t v35 = v29;
            }
            goto LABEL_45;
          }
        }
LABEL_9:
        ++v14;
        unsigned int v16 = v10;
      }
      while (v14 != v15);
    }
    uint64_t v12 = *(void *)(v12 + 8);
  }
  while (v12 != v487);
  uint64_t v9 = v519;
LABEL_48:
  MEMORY[0x1D25D9CD0](v9, 4);
  BOOL v37 = (uint64_t *)v541;
  uint64_t v38 = (uint64_t *)v542[0];
  if (v541 == v542[0])
  {
    unsigned int v39 = v10;
  }
  else
  {
    do
    {
      uint64_t v40 = *v37;
      uint64_t v519 = *v37;
      uint64_t v516 = 0;
      if (sub_1CBA0E618(a1 + 48, &v519, &v516)
        && v516 != *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
      {
        uint64_t v519 = v40;
        uint64_t v516 = 0;
        int v41 = sub_1CBA0E618(a1 + 48, &v519, &v516);
        uint64_t v42 = v516;
        if (!v41) {
          uint64_t v42 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
        }
        uint64_t v40 = *(void *)(v42 + 8);
      }
      unsigned int v43 = sub_1CBFFA82C(v7, v40);
      unsigned int v44 = v43;
      if (v10 >= (unsigned int *)v11)
      {
        uint64_t v45 = __p;
        uint64_t v46 = v10 - __p;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62) {
          goto LABEL_729;
        }
        if ((v11 - (char *)__p) >> 1 > v47) {
          unint64_t v47 = (v11 - (char *)__p) >> 1;
        }
        if ((unint64_t)(v11 - (char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48)
        {
          if (v48 >> 62) {
            goto LABEL_730;
          }
          int v49 = (char *)operator new(4 * v48);
          uint64_t v45 = __p;
        }
        else
        {
          int v49 = 0;
        }
        int v50 = (unsigned int *)&v49[4 * v46];
        unsigned int *v50 = v44;
        unsigned int v39 = v50 + 1;
        while (v10 != v45)
        {
          unsigned int v51 = *--v10;
          *--int v50 = v51;
        }
        uint64_t v11 = &v49[4 * v48];
        if (v45)
        {
          size_t v52 = v39;
          operator delete(v45);
          unsigned int v39 = v52;
        }
        std::string __p = v50;
      }
      else
      {
        unsigned int *v10 = v43;
        unsigned int v39 = v10 + 1;
      }
      ++v37;
      uint64_t v10 = v39;
    }
    while (v37 != v38);
  }
  unint64_t v488 = v39;
  int v53 = v510;
  uint64_t v5 = v475;
  if ((void *)v511[0] != v510)
  {
    uint64_t v54 = 8 * ((uint64_t)(v511[0] - (void)v510) >> 3);
    do
    {
      v514[0] = 0;
      v514[0] = *v53;
      uint64_t v519 = v514[0];
      uint64_t v516 = 0;
      if (sub_1CBA0E618(a1 + 48, &v519, &v516)
        && v516 != *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
      {
        uint64_t v519 = v514[0];
        uint64_t v516 = 0;
        int v55 = sub_1CBA0E618(a1 + 48, &v519, &v516);
        uint64_t v56 = v516;
        if (!v55) {
          uint64_t v56 = *(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
        }
        v514[0] = *(void *)(v56 + 8);
      }
      sub_1CBF5F714(v496, v514);
      ++v53;
      v54 -= 8;
    }
    while (v54);
  }
  unint64_t v57 = v488 - __p;
  if ((char *)v488 - (char *)__p < 513)
  {
LABEL_105:
    sub_1CD6692E8(__p, v488, v57, 0, 0);
  }
  else
  {
    int v58 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v59 = v488 - __p;
    while (1)
    {
      size_t v60 = (unsigned int *)operator new(4 * v59, v58);
      if (v60) {
        break;
      }
      BOOL v61 = v59 > 1;
      v59 >>= 1;
      if (!v61) {
        goto LABEL_105;
      }
    }
    BOOL v62 = v60;
    sub_1CD6692E8(__p, v488, v57, v60, v59);
    operator delete(v62);
  }
LABEL_51:
  sub_1CD611140((uint64_t)&v523);
  if (v504)
  {
    unint64_t v505 = v504;
    operator delete(v504);
  }
  MEMORY[0x1D25D9CD0](v501, 8);
  if (v529)
  {
    uint64_t v530 = v529;
    operator delete(v529);
  }
  MEMORY[0x1D25D9CD0](v526, 8);
  if (v535)
  {
    v536 = v535;
    operator delete(v535);
  }
  MEMORY[0x1D25D9CD0](v532, 8);
  if (v510)
  {
    v511[0] = v510;
    operator delete(v510);
  }
  MEMORY[0x1D25D9CD0](v507, 8);
  if (v541)
  {
    v542[0] = v541;
    operator delete((void *)v541);
  }
  MEMORY[0x1D25D9CD0](v538, 8);
  if (!*((unsigned char *)v5 + 217))
  {
    uint64_t v63 = (void *)v5[32];
    uint64_t v476 = v5;
    if (__p == v488)
    {
      unsigned int v64 = 0;
      LODWORD(v65) = 0;
LABEL_109:
      if (!*((unsigned char *)v63 + 144))
      {
        *((_DWORD *)v63 + 37) = v65;
        *((unsigned char *)v63 + 144) = 1;
      }
      *((_DWORD *)v5 + 6) = v64;
      __int16 v66 = (void *)v5[32];
      uint64_t v67 = *v5;
      unint64_t v523 = v525;
      uint64_t v524 = 0x600000000;
      uint64_t v519 = 0;
      uint64_t v520 = 0;
      unsigned int v521 = 0;
      uint64_t v477 = v67;
      sub_1CD668D28(*(void *)(v67 + 8), *(void *)(*(void *)(v67 + 16) + 8), (uint64_t)&v519, (uint64_t)&v523);
      size_t v68 = v511;
      v507 = v511;
      uint64_t v508 = v511;
      uint64_t v509 = 1;
      LODWORD(v510) = 0;
      unsigned int v69 = 1;
      int v489 = v66;
      if (v524)
      {
        unsigned int v70 = v5;
        int v71 = (char *)v523;
        int v72 = (char *)v523 + 8 * v524;
        while (1)
        {
          uint64_t v73 = *(void *)(*(void *)v71 + 40);
          if (v73 != *(void *)v71 + 40) {
            break;
          }
LABEL_171:
          v71 += 8;
          if (v71 == v72)
          {
            size_t v68 = v507;
            uint64_t v98 = v508;
            unsigned int v99 = HIDWORD(v509);
            unsigned int v69 = v509;
            uint64_t v5 = v70;
            __int16 v66 = v489;
            goto LABEL_341;
          }
        }
        if (v73) {
          uint64_t v74 = v73 - 24;
        }
        else {
          uint64_t v74 = 0;
        }
        if (*(unsigned char *)(v74 + 16) != 30)
        {
          int v97 = 2;
          switch(*(unsigned char *)(v74 + 16))
          {
            case 0x1E:
              __break(1u);
              JUMPOUT(0x1CC9365D4);
            case 0x1F:
              int v97 = (*(_DWORD *)(v74 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_174;
            case 0x20:
            case 0x26:
              int v97 = (*(_DWORD *)(v74 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_174;
            case 0x21:
              goto LABEL_122;
            case 0x24:
              int v97 = *(_WORD *)(v74 + 18) & 1;
              goto LABEL_174;
            case 0x25:
              int v97 = 1;
              goto LABEL_122;
            case 0x27:
              int v97 = *(_DWORD *)(v74 + 80) + 1;
LABEL_174:
              if (!v97) {
                goto LABEL_171;
              }
              goto LABEL_122;
            default:
              goto LABEL_171;
          }
        }
        if ((*(_DWORD *)(v74 + 20) & 0x7FFFFFF) == 3) {
          int v97 = 2;
        }
        else {
          int v97 = 1;
        }
LABEL_122:
        unsigned int v75 = 0;
        while (1)
        {
          uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v74, v75);
          uint64_t v77 = Successor;
          if (v521)
          {
            unsigned int v78 = ((Successor >> 4) ^ (Successor >> 9)) & (v521 - 1);
            uint64_t v79 = *(void *)(v519 + 8 * v78);
            if (Successor == v79)
            {
LABEL_125:
              if (v78 != v521) {
                goto LABEL_158;
              }
            }
            else
            {
              int v95 = 1;
              while (v79 != -4096)
              {
                unsigned int v96 = v78 + v95++;
                unsigned int v78 = v96 & (v521 - 1);
                uint64_t v79 = *(void *)(v519 + 8 * v78);
                if (Successor == v79) {
                  goto LABEL_125;
                }
              }
            }
          }
          uint64_t v80 = (char *)v508;
          uint64_t v81 = HIDWORD(v509);
          if (v508 != v507)
          {
            unsigned int v85 = v509;
LABEL_137:
            if (3 * v85 <= 4 * (HIDWORD(v509) - (int)v510))
            {
              if (v85 >= 0x40) {
                v85 *= 2;
              }
              else {
                unsigned int v85 = 128;
              }
            }
            else if (v85 - HIDWORD(v509) >= v85 >> 3)
            {
              goto LABEL_139;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v507, v85);
            unsigned int v85 = v509;
            uint64_t v80 = (char *)v508;
LABEL_139:
            unsigned int v86 = v85 - 1;
            unsigned int v87 = (v85 - 1) & ((v77 >> 4) ^ (v77 >> 9));
            unint64_t v88 = &v80[8 * v87];
            uint64_t v89 = *(void *)v88;
            if (*(void *)v88 == -1)
            {
              unsigned int v90 = 0;
LABEL_151:
              if (v90) {
                int v94 = v90;
              }
              else {
                int v94 = (uint64_t *)v88;
              }
              if (*v94 != v77)
              {
                if (*v94 == -2) {
                  LODWORD(v510) = v510 - 1;
                }
                else {
                  ++HIDWORD(v509);
                }
                uint64_t *v94 = v77;
              }
            }
            else
            {
              unsigned int v90 = 0;
              int v91 = 1;
              while (v89 != v77)
              {
                if (v90) {
                  BOOL v92 = 0;
                }
                else {
                  BOOL v92 = v89 == -2;
                }
                if (v92) {
                  unsigned int v90 = (uint64_t *)v88;
                }
                unsigned int v93 = v87 + v91++;
                unsigned int v87 = v93 & v86;
                unint64_t v88 = &v80[8 * (v93 & v86)];
                uint64_t v89 = *(void *)v88;
                if (*(void *)v88 == -1) {
                  goto LABEL_151;
                }
              }
            }
            goto LABEL_158;
          }
          if (HIDWORD(v509))
          {
            unsigned int v82 = 0;
            uint64_t v83 = 8 * HIDWORD(v509);
            unint64_t v84 = (uint64_t *)v508;
            while (*v84 != Successor)
            {
              if (*v84 == -2) {
                unsigned int v82 = v84;
              }
              ++v84;
              v83 -= 8;
              if (!v83)
              {
                if (!v82) {
                  goto LABEL_134;
                }
                *unsigned int v82 = Successor;
                LODWORD(v510) = v510 - 1;
                goto LABEL_158;
              }
            }
            goto LABEL_158;
          }
LABEL_134:
          unsigned int v85 = v509;
          if (HIDWORD(v509) >= v509) {
            goto LABEL_137;
          }
          ++HIDWORD(v509);
          v508[v81] = Successor;
LABEL_158:
          if (v97 == ++v75) {
            goto LABEL_171;
          }
        }
      }
      unsigned int v99 = 0;
      uint64_t v98 = v511;
LABEL_341:
      uint64_t v516 = 0;
      int32x2_t v517 = 0;
      int v518 = 0;
      if (v98 == v68) {
        uint64_t v215 = v99;
      }
      else {
        uint64_t v215 = v69;
      }
      v514[0] = 0;
      v514[1] = 0;
      uint64_t v216 = v98;
      int v515 = 0;
      if (v215)
      {
        uint64_t v217 = 8 * v215;
        uint64_t v216 = v98;
        while (*v216 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v216;
          v217 -= 8;
          if (!v217) {
            goto LABEL_481;
          }
        }
      }
      uint64_t v218 = &v98[v215];
      if (v216 != v218)
      {
        unint64_t v219 = *v216;
        while (*(void *)(v219 + 40) == v219 + 40)
        {
LABEL_477:
          uint64_t v289 = v216 + 1;
          uint64_t v5 = v476;
          __int16 v66 = v489;
          do
          {
            if (v289 == v218) {
              goto LABEL_481;
            }
            unint64_t v290 = *v289++;
            unint64_t v219 = v290;
          }
          while (v290 > 0xFFFFFFFFFFFFFFFDLL);
          uint64_t v216 = v289 - 1;
        }
        for (uint64_t i = *(void *)(v219 + 48); ; uint64_t i = *(void *)(v221 + 32))
        {
          uint64_t v221 = i - 24;
          if (i) {
            uint64_t v222 = i - 24;
          }
          else {
            uint64_t v222 = 0;
          }
          if (!i || *(unsigned char *)(v222 + 16) != 83) {
            goto LABEL_477;
          }
          v532 = &v534;
          uint64_t v533 = 0x200000000;
          int v223 = *(_DWORD *)(i - 4);
          uint64_t v224 = v223 & 0x7FFFFFF;
          if ((v223 & 0x7FFFFFF) != 0)
          {
            unsigned int v225 = 0;
            uint64_t v226 = 0;
            do
            {
              int v227 = *(_DWORD *)(v221 + 20);
              if ((v227 & 0x40000000) != 0) {
                uint64_t v228 = *(void *)(v221 - 8);
              }
              else {
                uint64_t v228 = v221 - 32 * (v227 & 0x7FFFFFF);
              }
              if (v521)
              {
                uint64_t v229 = *(void *)(v228 + 32 * *(unsigned int *)(v221 + 60) + 8 * v226);
                unsigned int v230 = ((v229 >> 4) ^ (v229 >> 9)) & (v521 - 1);
                uint64_t v231 = *(void *)(v519 + 8 * v230);
                if (v229 == v231)
                {
LABEL_365:
                  if (v230 != v521)
                  {
                    if (v225 >= HIDWORD(v533)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v532 + v225) = v226;
                    unsigned int v225 = v533 + 1;
                    LODWORD(v533) = v533 + 1;
                  }
                }
                else
                {
                  int v232 = 1;
                  while (v231 != -4096)
                  {
                    unsigned int v233 = v230 + v232++;
                    unsigned int v230 = v233 & (v521 - 1);
                    uint64_t v231 = *(void *)(v519 + 8 * v230);
                    if (v229 == v231) {
                      goto LABEL_365;
                    }
                  }
                }
              }
              ++v226;
            }
            while (v226 != v224);
            if (v225)
            {
              if (v225 == 1)
              {
                v526 = 0;
                int v234 = *(_DWORD *)(v221 + 20);
                if ((v234 & 0x40000000) != 0) {
                  uint64_t v235 = *(void *)(v221 - 8);
                }
                else {
                  uint64_t v235 = v221 - 32 * (v234 & 0x7FFFFFF);
                }
                v526 = *(int **)(v235 + 32 * *(unsigned int *)v532);
                sub_1CBF5FAF4((uint64_t)v514, &v526, (uint64_t)&v538);
                if (v518)
                {
                  LODWORD(v284) = ((v526 >> 4) ^ (v526 >> 9)) & (v518 - 1);
                  uint64_t v285 = (void **)(v516 + 8 * v284);
                  v286 = (int *)*v285;
                  if (v526 == *v285)
                  {
LABEL_469:
                    *uint64_t v285 = (void *)-8192;
                    int32x2_t v517 = vadd_s32(v517, (int32x2_t)0x1FFFFFFFFLL);
                  }
                  else
                  {
                    int v287 = 1;
                    while (v286 != (int *)-4096)
                    {
                      int v288 = v284 + v287++;
                      uint64_t v284 = v288 & (v518 - 1);
                      v286 = *(int **)(v516 + 8 * v284);
                      if (v526 == v286)
                      {
                        uint64_t v285 = (void **)(v516 + 8 * v284);
                        goto LABEL_469;
                      }
                    }
                  }
                }
              }
              else
              {
                unint64_t v538 = v221;
                sub_1CBF5F714(v491, &v538);
                if (v533)
                {
                  unsigned int v236 = v532;
                  uint64_t v237 = (unsigned int *)v532 + v533;
                  while (1)
                  {
                    uint64_t v238 = *(unsigned int *)v236;
                    v526 = 0;
                    int v239 = *(_DWORD *)(v221 + 20);
                    if ((v239 & 0x40000000) != 0)
                    {
                      uint64_t v241 = *(void *)(v221 - 8);
                      uint64_t v240 = v239 & 0x7FFFFFF;
                    }
                    else
                    {
                      uint64_t v240 = v239 & 0x7FFFFFF;
                      uint64_t v241 = v221 - 32 * v240;
                    }
                    uint64_t v242 = *(int **)(v241 + 32 * v238);
                    v526 = v242;
                    if (v240)
                    {
                      uint64_t v243 = 0;
                      unsigned int v244 = v521 - 1;
                      do
                      {
                        if (v243 != v238)
                        {
                          if ((v239 & 0x40000000) != 0)
                          {
                            uint64_t v246 = *(void *)(v221 - 8);
                            v245 = *(int **)(v246 + 32 * v243);
                          }
                          else
                          {
                            v245 = *(int **)(v221 - 32 * v240 + 32 * v243);
                            uint64_t v246 = v221 - 32 * v240;
                          }
                          if (v245 == v242)
                          {
                            if (!v521) {
                              goto LABEL_453;
                            }
                            uint64_t v247 = *(void *)(v246 + 32 * *(unsigned int *)(v221 + 60) + 8 * v243);
                            unsigned int v248 = ((v247 >> 4) ^ (v247 >> 9)) & v244;
                            uint64_t v249 = *(void *)(v519 + 8 * v248);
                            if (v247 != v249)
                            {
                              int v250 = 1;
                              while (v249 != -4096)
                              {
                                unsigned int v251 = v248 + v250++;
                                unsigned int v248 = v251 & v244;
                                uint64_t v249 = *(void *)(v519 + 8 * v248);
                                if (v247 == v249) {
                                  goto LABEL_393;
                                }
                              }
LABEL_453:
                              sub_1CBF5FAF4((uint64_t)v514, &v526, (uint64_t)&v538);
                              if (v518)
                              {
                                LODWORD(v277) = ((v526 >> 4) ^ (v526 >> 9)) & (v518 - 1);
                                int v278 = (void **)(v516 + 8 * v277);
                                BOOL v279 = (int *)*v278;
                                if (v526 == *v278)
                                {
LABEL_455:
                                  *int v278 = (void *)-8192;
                                  int32x2_t v517 = vadd_s32(v517, (int32x2_t)0x1FFFFFFFFLL);
                                }
                                else
                                {
                                  int v282 = 1;
                                  while (v279 != (int *)-4096)
                                  {
                                    int v283 = v277 + v282++;
                                    uint64_t v277 = v283 & (v518 - 1);
                                    BOOL v279 = *(int **)(v516 + 8 * v277);
                                    if (v526 == v279)
                                    {
                                      int v278 = (void **)(v516 + 8 * v277);
                                      goto LABEL_455;
                                    }
                                  }
                                }
                              }
                              goto LABEL_456;
                            }
LABEL_393:
                            if (v248 == v521) {
                              goto LABEL_453;
                            }
                          }
                        }
                        ++v243;
                      }
                      while (v243 != v240);
                    }
                    uint64_t v252 = *((void *)v242 + 1);
                    if (v252) {
                      break;
                    }
LABEL_449:
                    if (v515)
                    {
                      unsigned int v275 = (v515 - 1) & ((v242 >> 4) ^ (v242 >> 9));
                      unsigned int v276 = *(int **)(v514[0] + 8 * v275);
                      if (v242 == v276)
                      {
LABEL_451:
                        if (v275 != v515) {
                          goto LABEL_456;
                        }
                      }
                      else
                      {
                        int v280 = 1;
                        while (v276 != (int *)-4096)
                        {
                          unsigned int v281 = v275 + v280++;
                          unsigned int v275 = v281 & (v515 - 1);
                          unsigned int v276 = *(int **)(v514[0] + 8 * v275);
                          if (v242 == v276) {
                            goto LABEL_451;
                          }
                        }
                      }
                    }
                    sub_1CBF5FAF4((uint64_t)&v516, &v526, (uint64_t)&v538);
LABEL_456:
                    unsigned int v236 = (uint64_t *)((char *)v236 + 4);
                    if (v236 == (uint64_t *)v237) {
                      goto LABEL_470;
                    }
                  }
                  unsigned int v253 = v521 - 1;
                  int v254 = v509 - 1;
                  while (2)
                  {
                    uint64_t v255 = *(void *)(v252 + 24);
                    unsigned int v256 = *(unsigned __int8 *)(v255 + 16);
                    if (v255) {
                      BOOL v257 = v256 >= 0x1C;
                    }
                    else {
                      BOOL v257 = 0;
                    }
                    if (!v257)
                    {
LABEL_443:
                      uint64_t v252 = *(void *)(v252 + 8);
                      if (!v252) {
                        goto LABEL_449;
                      }
                      continue;
                    }
                    break;
                  }
                  uint64_t v258 = *(void *)(v255 + 40);
                  if (v521)
                  {
                    unsigned int v259 = ((v258 >> 4) ^ (v258 >> 9)) & v253;
                    uint64_t v260 = *(void *)(v519 + 8 * v259);
                    if (v258 == v260)
                    {
LABEL_409:
                      if (v259 != v521) {
                        goto LABEL_443;
                      }
                    }
                    else
                    {
                      int v273 = 1;
                      while (v260 != -4096)
                      {
                        unsigned int v274 = v259 + v273++;
                        unsigned int v259 = v274 & v253;
                        uint64_t v260 = *(void *)(v519 + 8 * v259);
                        if (v258 == v260) {
                          goto LABEL_409;
                        }
                      }
                    }
                  }
                  if (v256 != 83) {
                    goto LABEL_453;
                  }
                  if (v508 == v507)
                  {
                    if (HIDWORD(v509))
                    {
                      uint64_t v261 = 0;
                      while (v508[v261] != v258)
                      {
                        if (HIDWORD(v509) == ++v261)
                        {
                          int v262 = HIDWORD(v509);
                          goto LABEL_431;
                        }
                      }
                      int v271 = (char *)&v508[v261];
                      int v262 = HIDWORD(v509);
                      uint64_t v272 = v508;
                    }
                    else
                    {
                      int v262 = 0;
LABEL_431:
                      uint64_t v272 = v508;
                      int v271 = (char *)&v508[HIDWORD(v509)];
                    }
                  }
                  else
                  {
                    unsigned int v263 = v254 & ((v258 >> 4) ^ (v258 >> 9));
                    int v264 = (char *)&v508[v263];
                    uint64_t v265 = *(void *)v264;
                    if (*(void *)v264 == -1)
                    {
                      BOOL v266 = 0;
LABEL_433:
                      if (v266) {
                        int v264 = v266;
                      }
                      uint64_t v270 = *(void *)v264;
                    }
                    else
                    {
                      BOOL v266 = 0;
                      int v267 = 1;
                      while (v265 != v258)
                      {
                        if (v266) {
                          BOOL v268 = 0;
                        }
                        else {
                          BOOL v268 = v265 == -2;
                        }
                        if (v268) {
                          BOOL v266 = v264;
                        }
                        unsigned int v269 = v263 + v267++;
                        unsigned int v263 = v269 & v254;
                        int v264 = (char *)&v508[v269 & v254];
                        uint64_t v265 = *(void *)v264;
                        if (*(void *)v264 == -1) {
                          goto LABEL_433;
                        }
                      }
                      uint64_t v270 = v258;
                    }
                    int v271 = v270 == v258 ? v264 : (char *)&v508[v509];
                    int v262 = HIDWORD(v509);
                    uint64_t v272 = v507;
                  }
                  if (v508 != v272) {
                    int v262 = v509;
                  }
                  if (v271 == (char *)&v508[v262]) {
                    goto LABEL_453;
                  }
                  goto LABEL_443;
                }
              }
            }
          }
LABEL_470:
          if (v532 != &v534) {
            free(v532);
          }
        }
      }
LABEL_481:
      unsigned int v291 = *((_DWORD *)v5 + 6);
      unsigned int v292 = *((_DWORD *)v66 + 37);
      v512[0] = 0;
      v512[1] = 0;
      unsigned int v513 = 0;
      uint64_t v293 = (uint64_t *)v493;
      int v486 = v494;
      if (v493 == v494)
      {
LABEL_719:
        unsigned int v464 = (unsigned int *)v5[20];
        unint64_t v465 = *((unsigned int *)v5 + 42);
        if (v465 < 0x81)
        {
LABEL_723:
          sub_1CD669ED0(v464, &v464[v465], v465, 0, 0);
        }
        else
        {
          v466 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          unint64_t v467 = *((unsigned int *)v5 + 42);
          while (1)
          {
            v468 = (unsigned int *)operator new(4 * v467, v466);
            if (v468) {
              break;
            }
            BOOL v61 = v467 > 1;
            v467 >>= 1;
            if (!v61) {
              goto LABEL_723;
            }
          }
          v469 = v468;
          sub_1CD669ED0(v464, &v464[v465], v465, v468, v467);
          operator delete(v469);
        }
LABEL_725:
        MEMORY[0x1D25D9CD0](v512[0], 4);
        MEMORY[0x1D25D9CD0](v514[0], 8);
        MEMORY[0x1D25D9CD0](v516, 8);
        if (v508 != v507) {
          free(v508);
        }
        MEMORY[0x1D25D9CD0](v519, 8);
        if (v523 != v525) {
          free(v523);
        }
        goto LABEL_62;
      }
      uint64_t v482 = (uint64_t)(v5 + 7);
      uint64_t v484 = (uint64_t)(v5 + 4);
      while (1)
      {
        uint64_t v294 = *v293;
        if (!v518) {
          goto LABEL_486;
        }
        unsigned int v295 = (v518 - 1) & ((v294 >> 4) ^ (v294 >> 9));
        uint64_t v296 = *(void *)(v516 + 8 * v295);
        if (v294 != v296) {
          break;
        }
LABEL_485:
        if (v295 == v518) {
          goto LABEL_486;
        }
LABEL_679:
        if (++v293 == v486) {
          goto LABEL_719;
        }
      }
      int v452 = 1;
      while (v296 != -4096)
      {
        unsigned int v453 = v295 + v452++;
        unsigned int v295 = v453 & (v518 - 1);
        uint64_t v296 = *(void *)(v516 + 8 * v295);
        if (v294 == v296) {
          goto LABEL_485;
        }
      }
LABEL_486:
      uint64_t v297 = (v66[4] - v66[3]) >> 3;
      LODWORD(v532) = v292;
      unsigned int v298 = v292;
      if (v292 < v297)
      {
        while (1)
        {
          uint64_t v299 = *(void *)(v66[3] + 8 * v298);
          if (v299 == llvm::PointerType::get(*(llvm::PointerType **)v294, 0))
          {
            uint64_t v300 = sub_1CD48C650((uint64_t *)v512, &v532);
            if ((int *)v512[0] + v513 == v300) {
              break;
            }
          }
          unsigned int v298 = v532 + 1;
          LODWORD(v532) = v298;
          if (v298 >= v297) {
            goto LABEL_502;
          }
        }
        if (v513)
        {
          uint64_t v301 = v532;
          unsigned int v302 = (37 * v532) & (v513 - 1);
          int v303 = (int *)((char *)v512[0] + 4 * v302);
          int v304 = *v303;
          if (v532 == *v303) {
            goto LABEL_568;
          }
          unsigned int v305 = 0;
          int v306 = 1;
          while (v304 != -1)
          {
            if (v305) {
              BOOL v307 = 0;
            }
            else {
              BOOL v307 = v304 == -2;
            }
            if (v307) {
              unsigned int v305 = v303;
            }
            unsigned int v308 = v302 + v306++;
            unsigned int v302 = v308 & (v513 - 1);
            int v303 = (int *)((char *)v512[0] + 4 * v302);
            int v304 = *v303;
            if (v532 == *v303) {
              goto LABEL_568;
            }
          }
          if (v305) {
            uint64_t v360 = v305;
          }
          else {
            uint64_t v360 = v303;
          }
        }
        else
        {
          uint64_t v360 = 0;
        }
        uint64_t v361 = sub_1CBB29C30((uint64_t)v512, (uint64_t)&v532, &v532, v360);
        *uint64_t v361 = (int)v532;
        uint64_t v301 = v532;
LABEL_568:
        uint64_t v362 = v301;
        unint64_t v538 = v291 | ((unint64_t)v301 << 32);
        int v363 = *((_DWORD *)v5 + 12);
        if (v363)
        {
          uint64_t v364 = v5[4];
          int v365 = v363 - 1;
          unsigned int v366 = v365 & (37 * v291);
          int v367 = (_DWORD *)(v364 + 8 * v366);
          int v368 = *v367;
          if (v291 == *v367) {
            goto LABEL_583;
          }
          unsigned int v369 = 0;
          int v370 = 1;
          while (v368 != -1)
          {
            if (v369) {
              BOOL v371 = 0;
            }
            else {
              BOOL v371 = v368 == -2;
            }
            if (v371) {
              unsigned int v369 = v367;
            }
            unsigned int v372 = v366 + v370++;
            unsigned int v366 = v372 & v365;
            int v367 = (_DWORD *)(v364 + 8 * v366);
            int v368 = *v367;
            if (v291 == *v367) {
              goto LABEL_583;
            }
          }
          if (v369) {
            int v373 = v369;
          }
          else {
            int v373 = v367;
          }
        }
        else
        {
          int v373 = 0;
        }
        BOOL v374 = sub_1CB83889C(v484, (uint64_t)&v538, &v538, v373);
        *(void *)BOOL v374 = v538;
        uint64_t v362 = v532;
        uint64_t v301 = v532;
LABEL_583:
        unint64_t v538 = v362 | ((unint64_t)v291 << 32);
        int v375 = *((_DWORD *)v5 + 18);
        if (v375)
        {
          uint64_t v376 = v5[7];
          int v377 = v375 - 1;
          unsigned int v378 = v377 & (37 * v362);
          uint64_t v354 = (_DWORD *)(v376 + 8 * v378);
          int v379 = *v354;
          if (*v354 == v362) {
            goto LABEL_598;
          }
          uint64_t v356 = 0;
          int v380 = 1;
          while (v379 != -1)
          {
            if (v356) {
              BOOL v381 = 0;
            }
            else {
              BOOL v381 = v379 == -2;
            }
            if (v381) {
              uint64_t v356 = v354;
            }
            unsigned int v382 = v378 + v380++;
            unsigned int v378 = v382 & v377;
            uint64_t v354 = (_DWORD *)(v376 + 8 * v378);
            int v379 = *v354;
            if (*v354 == v362) {
              goto LABEL_598;
            }
          }
          goto LABEL_594;
        }
        goto LABEL_681;
      }
LABEL_502:
      v309 = v293;
      unsigned int v310 = v292;
      int v311 = v5;
      unsigned int v312 = v291;
      unint64_t v313 = llvm::PointerType::get(*(llvm::PointerType **)v294, 0);
      unint64_t v314 = v313;
      BOOL v316 = (unint64_t *)v66[4];
      unint64_t v315 = v66[5];
      if ((unint64_t)v316 >= v315)
      {
        uint64_t v318 = (void *)v66[3];
        uint64_t v319 = v316 - v318;
        unint64_t v320 = v319 + 1;
        if ((unint64_t)(v319 + 1) >> 61) {
          goto LABEL_729;
        }
        uint64_t v321 = v315 - (void)v318;
        if (v321 >> 2 > v320) {
          unint64_t v320 = v321 >> 2;
        }
        if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v322 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v322 = v320;
        }
        if (v322)
        {
          if (v322 >> 61) {
            goto LABEL_730;
          }
          uint64_t v323 = (char *)operator new(8 * v322);
        }
        else
        {
          uint64_t v323 = 0;
        }
        unsigned int v324 = (unint64_t *)&v323[8 * v319];
        *unsigned int v324 = v314;
        uint64_t v317 = v324 + 1;
        unsigned int v291 = v312;
        if (v316 == v318)
        {
          uint64_t v5 = v311;
          unsigned int v326 = v489;
        }
        else
        {
          do
          {
            unint64_t v325 = *--v316;
            *--unsigned int v324 = v325;
          }
          while (v316 != v318);
          unsigned int v326 = v489;
          BOOL v316 = (unint64_t *)v489[3];
          uint64_t v5 = v311;
        }
        v326[3] = v324;
        v326[4] = v317;
        v326[5] = &v323[8 * v322];
        unsigned int v292 = v310;
        if (v316) {
          operator delete(v316);
        }
      }
      else
      {
        *BOOL v316 = v313;
        uint64_t v317 = v316 + 1;
        unsigned int v291 = v312;
        uint64_t v5 = v311;
        unsigned int v292 = v310;
      }
      uint64_t v293 = v309;
      v489[4] = v317;
      unint64_t v327 = ((unint64_t)v317 - v489[3]) >> 3;
      uint64_t v301 = (v327 - 1);
      LODWORD(v532) = v327 - 1;
      if (v513)
      {
        unsigned int v328 = (37 * v301) & (v513 - 1);
        uint64_t v329 = (int *)((char *)v512[0] + 4 * v328);
        int v330 = *v329;
        if (v301 == *v329) {
          goto LABEL_536;
        }
        uint64_t v331 = 0;
        int v332 = 1;
        while (v330 != -1)
        {
          if (v331) {
            BOOL v333 = 0;
          }
          else {
            BOOL v333 = v330 == -2;
          }
          if (v333) {
            uint64_t v331 = v329;
          }
          unsigned int v334 = v328 + v332++;
          unsigned int v328 = v334 & (v513 - 1);
          uint64_t v329 = (int *)((char *)v512[0] + 4 * v328);
          int v330 = *v329;
          if (v301 == *v329) {
            goto LABEL_536;
          }
        }
        if (v331) {
          v335 = v331;
        }
        else {
          v335 = v329;
        }
      }
      else
      {
        v335 = 0;
      }
      int v336 = sub_1CBB29C30((uint64_t)v512, (uint64_t)&v532, &v532, v335);
      *int v336 = (int)v532;
      uint64_t v301 = v532;
LABEL_536:
      uint64_t v337 = v301;
      unint64_t v538 = v291 | ((unint64_t)v301 << 32);
      int v338 = *((_DWORD *)v5 + 12);
      if (v338)
      {
        uint64_t v339 = v5[4];
        int v340 = v338 - 1;
        unsigned int v341 = v340 & (37 * v291);
        size_t v342 = (_DWORD *)(v339 + 8 * v341);
        int v343 = *v342;
        if (v291 == *v342) {
          goto LABEL_551;
        }
        unint64_t v344 = 0;
        int v345 = 1;
        while (v343 != -1)
        {
          if (v344) {
            BOOL v346 = 0;
          }
          else {
            BOOL v346 = v343 == -2;
          }
          if (v346) {
            unint64_t v344 = v342;
          }
          unsigned int v347 = v341 + v345++;
          unsigned int v341 = v347 & v340;
          size_t v342 = (_DWORD *)(v339 + 8 * v341);
          int v343 = *v342;
          if (v291 == *v342) {
            goto LABEL_551;
          }
        }
        if (v344) {
          uint64_t v348 = v344;
        }
        else {
          uint64_t v348 = v342;
        }
      }
      else
      {
        uint64_t v348 = 0;
      }
      uint64_t v349 = sub_1CB83889C(v484, (uint64_t)&v538, &v538, v348);
      *(void *)uint64_t v349 = v538;
      uint64_t v337 = v532;
      uint64_t v301 = v532;
LABEL_551:
      unint64_t v538 = v337 | ((unint64_t)v291 << 32);
      int v350 = *((_DWORD *)v5 + 18);
      if (v350)
      {
        uint64_t v351 = v5[7];
        int v352 = v350 - 1;
        unsigned int v353 = v352 & (37 * v337);
        uint64_t v354 = (_DWORD *)(v351 + 8 * v353);
        int v355 = *v354;
        if (*v354 == v337) {
          goto LABEL_598;
        }
        uint64_t v356 = 0;
        int v357 = 1;
        while (v355 != -1)
        {
          if (v356) {
            BOOL v358 = 0;
          }
          else {
            BOOL v358 = v355 == -2;
          }
          if (v358) {
            uint64_t v356 = v354;
          }
          unsigned int v359 = v353 + v357++;
          unsigned int v353 = v359 & v352;
          uint64_t v354 = (_DWORD *)(v351 + 8 * v353);
          int v355 = *v354;
          if (*v354 == v337) {
            goto LABEL_598;
          }
        }
LABEL_594:
        if (v356) {
          unsigned int v383 = v356;
        }
        else {
          unsigned int v383 = v354;
        }
        goto LABEL_597;
      }
LABEL_681:
      unsigned int v383 = 0;
LABEL_597:
      unsigned int v384 = sub_1CB83889C(v482, (uint64_t)&v538, &v538, v383);
      *(void *)unsigned int v384 = v538;
      uint64_t v301 = v532;
LABEL_598:
      if (*(unsigned char *)(v294 + 16) == 83 && v294 != 0)
      {
        uint64_t v386 = *(void *)(v294 + 40);
        if (!v521) {
          goto LABEL_605;
        }
        unsigned int v387 = ((v386 >> 4) ^ (v386 >> 9)) & (v521 - 1);
        uint64_t v388 = *(void *)(v519 + 8 * v387);
        if (v386 != v388)
        {
          int v454 = 1;
          while (v388 != -4096)
          {
            unsigned int v455 = v387 + v454++;
            unsigned int v387 = v455 & (v521 - 1);
            uint64_t v388 = *(void *)(v519 + 8 * v387);
            if (v386 == v388) {
              goto LABEL_604;
            }
          }
LABEL_605:
          unsigned int v479 = v291;
          uint64_t v472 = *(void *)(v294 + 40);
          uint64_t v474 = v5[32];
          uint64_t v389 = *v5;
          v526 = &v528;
          uint64_t v527 = 0x200000000;
          int v390 = *(_DWORD *)(v294 + 20);
          unint64_t v391 = v390 & 0x7FFFFFF;
          if ((v390 & 0x7FFFFFF) != 0)
          {
            uint64_t v392 = 0;
            BOOL v393 = 1;
            do
            {
              int v394 = *(_DWORD *)(v294 + 20);
              if ((v394 & 0x40000000) != 0) {
                uint64_t v395 = *(void *)(v294 - 8);
              }
              else {
                uint64_t v395 = v294 - 32 * (v394 & 0x7FFFFFF);
              }
              int v396 = *(llvm::BasicBlock **)(v395 + 32 * *(unsigned int *)(v294 + 60) + 8 * v392);
              uint64_t v397 = sub_1CBFFA82C(v389, *(void *)(v395 + 32 * v392));
              if ((v397 & 0xFF00000000) == 0)
              {
                if (!v521) {
                  goto LABEL_632;
                }
                unsigned int v398 = ((v396 >> 4) ^ (v396 >> 9)) & (v521 - 1);
                uint64_t v399 = *(llvm::BasicBlock **)(v519 + 8 * v398);
                if (v396 == v399)
                {
LABEL_613:
                  if (v398 != v521)
                  {
                    LOBYTE(v431) = 0;
                    unsigned int v430 = 0;
                    uint64_t v5 = v476;
                    *((unsigned char *)v476 + 217) = 1;
                    goto LABEL_674;
                  }
                }
                else
                {
                  int v418 = 1;
                  while (v399 != (llvm::BasicBlock *)-4096)
                  {
                    unsigned int v419 = v398 + v418++;
                    unsigned int v398 = v419 & (v521 - 1);
                    uint64_t v399 = *(llvm::BasicBlock **)(v519 + 8 * v398);
                    if (v396 == v399) {
                      goto LABEL_613;
                    }
                  }
                }
              }
              if (v521)
              {
                unsigned int v400 = ((v396 >> 4) ^ (v396 >> 9)) & (v521 - 1);
                v401 = *(llvm::BasicBlock **)(v519 + 8 * v400);
                if (v396 != v401)
                {
                  int v416 = 1;
                  while (v401 != (llvm::BasicBlock *)-4096)
                  {
                    unsigned int v417 = v400 + v416++;
                    unsigned int v400 = v417 & (v521 - 1);
                    v401 = *(llvm::BasicBlock **)(v519 + 8 * v400);
                    if (v396 == v401) {
                      goto LABEL_616;
                    }
                  }
                  goto LABEL_632;
                }
LABEL_616:
                if (v400 != v521)
                {
                  uint64_t v402 = *(void *)(v389 + 72);
                  uint64_t v403 = *(unsigned int *)(v389 + 88);
                  if (v403)
                  {
                    LODWORD(v404) = (v403 - 1) & (37 * v397);
                    unsigned int v405 = (int *)(v402 + 8 * v404);
                    int v406 = *v405;
                    if (*v405 == v397) {
                      goto LABEL_619;
                    }
                    int v420 = 1;
                    while (v406 != -1)
                    {
                      int v421 = v404 + v420++;
                      uint64_t v404 = v421 & (v403 - 1);
                      int v406 = *(_DWORD *)(v402 + 8 * v404);
                      if (v406 == v397)
                      {
                        unsigned int v405 = (int *)(v402 + 8 * v404);
                        goto LABEL_619;
                      }
                    }
                  }
                  unsigned int v405 = (int *)(v402 + 8 * v403);
LABEL_619:
                  if ((int *)(v402 + 8 * v403) == v405) {
                    int v407 = 0;
                  }
                  else {
                    int v407 = v405[1];
                  }
                  if (v527 >= (unint64_t)HIDWORD(v527)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v526[v527] = v407;
                  LODWORD(v527) = v527 + 1;
                  uint64_t v408 = sub_1CBFFA82C(v389, (uint64_t)v396);
                  if ((v408 & 0xFF00000000) == 0)
                  {
                    uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v396);
                    LODWORD(v408) = sub_1CBFFA82C(v389, SinglePredecessor);
                  }
                  uint64_t v410 = *(void *)(v389 + 72);
                  uint64_t v411 = *(unsigned int *)(v389 + 88);
                  if (v411)
                  {
                    LODWORD(v412) = (v411 - 1) & (37 * v408);
                    uint64_t v413 = (int *)(v410 + 8 * v412);
                    int v414 = *v413;
                    if (*v413 == v408)
                    {
LABEL_627:
                      if ((int *)(v410 + 8 * v411) == v413) {
                        int v415 = 0;
                      }
                      else {
                        int v415 = v413[1];
                      }
                      if (v527 >= (unint64_t)HIDWORD(v527)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v526[v527] = v415;
                      LODWORD(v527) = v527 + 1;
                      goto LABEL_632;
                    }
                    int v422 = 1;
                    while (v414 != -1)
                    {
                      int v423 = v412 + v422++;
                      uint64_t v412 = v423 & (v411 - 1);
                      int v414 = *(_DWORD *)(v410 + 8 * v412);
                      if (v414 == v408)
                      {
                        uint64_t v413 = (int *)(v410 + 8 * v412);
                        goto LABEL_627;
                      }
                    }
                  }
                  uint64_t v413 = (int *)(v410 + 8 * v411);
                  goto LABEL_627;
                }
              }
LABEL_632:
              BOOL v393 = ++v392 < v391;
            }
            while (v392 != v391);
          }
          int v432 = sub_1CBFFA82C(v389, v472);
          uint64_t v433 = *(void *)(v389 + 72);
          uint64_t v434 = *(unsigned int *)(v389 + 88);
          if (v434)
          {
            LODWORD(v435) = (v434 - 1) & (37 * v432);
            v436 = (int *)(v433 + 8 * v435);
            int v437 = *v436;
            v438 = &unk_1EBCBE000;
            if (*v436 == v432)
            {
LABEL_662:
              if ((int *)(v433 + 8 * v434) == v436) {
                uint64_t v439 = 0;
              }
              else {
                uint64_t v439 = v436[1];
              }
              v532 = (uint64_t *)(v439 | (v301 << 32));
              uint64_t v533 = (uint64_t)&v535;
              uint64_t v534 = 0x200000000;
              int v440 = v527;
              if (v527)
              {
                if (v527 >= 3) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(&v535, v526, 4 * v527);
                LODWORD(v534) = v440;
                uint64_t v439 = v532;
              }
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v462 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v462 = 0xFF51AFD7ED558CCDLL;
                }
                v438[176] = v462;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              unint64_t v441 = 0x9DDFEA08EB382D69 * (v438[176] + 8 * v439);
              unint64_t v538 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (v441 ^ (v441 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v441 ^ (v441 >> 47))) >> 47));
              uint64_t v442 = HIDWORD(v532);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v463 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v463 = 0xFF51AFD7ED558CCDLL;
                }
                v438[176] = v463;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              unint64_t v443 = 0x9DDFEA08EB382D69 * (v438[176] + 8 * v442);
              unint64_t v501 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (v443 ^ (v443 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v443 ^ (v443 >> 47))) >> 47));
              unint64_t v522 = sub_1CD48BB60((void *)v533, v533 + 4 * v534);
              unint64_t v444 = sub_1CD48BA0C((uint64_t *)&v538, (uint64_t *)&v501, (uint64_t *)&v522);
              uint64_t v445 = *(void *)(v474 + 208);
              uint64_t v446 = *(unsigned int *)(v474 + 224);
              v447 = sub_1CD6696FC(v445, *(_DWORD *)(v474 + 224), v444);
              unint64_t v448 = (uint64_t *)(v445 + 16 * v446);
              uint64_t v5 = v476;
              if (v448 == v447)
              {
                LODWORD(v538) = *(_DWORD *)(v474 + 180);
                uint64_t v539 = v532;
                uint64_t v540 = v542;
                uint64_t v541 = 0x200000000;
                int v450 = v534;
                if (v534)
                {
                  if (v534 >= 3) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v542, (const void *)v533, 4 * v534);
                  LODWORD(v541) = v450;
                }
                sub_1CD669758((uint64_t)&v501, v474 + 184, (int *)&v538, (uint64_t)&v539);
                if (v540 != v542) {
                  free(v540);
                }
                uint64_t v451 = *(unsigned int *)(v474 + 180);
                *(_DWORD *)(v474 + 180) = v451 - 1;
                unint64_t v501 = v444;
                uint64_t v502 = v451;
                sub_1CD669AE8((uint64_t)&v538, v474 + 208, (uint64_t *)&v501, &v502);
                v447 = (uint64_t *)v538;
              }
              int v431 = *((_DWORD *)v447 + 2);
              if ((void **)v533 != &v535) {
                free((void *)v533);
              }
              BOOL v393 = 0;
              unsigned int v430 = v431 & 0xFFFFFF00;
LABEL_674:
              unsigned int v291 = v479;
              if (v526 != &v528) {
                free(v526);
              }
              if (v393) {
                goto LABEL_725;
              }
              goto LABEL_677;
            }
            v458 = v293;
            unsigned int v459 = v292;
            int v460 = 1;
            while (1)
            {
              unsigned int v292 = v459;
              uint64_t v293 = v458;
              if (v437 == -1) {
                break;
              }
              int v461 = v435 + v460++;
              uint64_t v435 = v461 & (v434 - 1);
              int v437 = *(_DWORD *)(v433 + 8 * v435);
              if (v437 == v432)
              {
                v436 = (int *)(v433 + 8 * v435);
                unsigned int v292 = v459;
                uint64_t v293 = v458;
                goto LABEL_710;
              }
            }
          }
          v436 = (int *)(v433 + 8 * v434);
LABEL_710:
          v438 = (void *)&unk_1EBCBE000;
          goto LABEL_662;
        }
LABEL_604:
        if (v387 == v521) {
          goto LABEL_605;
        }
      }
      int v424 = sub_1CBFFA82C(v477, v294);
      uint64_t v425 = *(void *)(v477 + 72);
      uint64_t v426 = *(unsigned int *)(v477 + 88);
      if (v426)
      {
        LODWORD(v427) = (v426 - 1) & (37 * v424);
        v428 = (int *)(v425 + 8 * v427);
        int v429 = *v428;
        if (*v428 == v424) {
          goto LABEL_656;
        }
        int v456 = 1;
        while (v429 != -1)
        {
          int v457 = v427 + v456++;
          uint64_t v427 = v457 & (v426 - 1);
          int v429 = *(_DWORD *)(v425 + 8 * v427);
          if (v429 == v424)
          {
            v428 = (int *)(v425 + 8 * v427);
            goto LABEL_656;
          }
        }
      }
      v428 = (int *)(v425 + 8 * v426);
LABEL_656:
      if ((int *)(v425 + 8 * v426) == v428)
      {
        unsigned int v430 = 0;
        LOBYTE(v431) = 0;
      }
      else
      {
        unsigned int v430 = v428[1];
        LOBYTE(v431) = v430;
      }
LABEL_677:
      unint64_t v449 = *((unsigned int *)v5 + 42);
      if (v449 >= *((unsigned int *)v5 + 43)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(v5[20] + 4 * v449) = v430 & 0xFFFFFF00 | v431;
      ++*((_DWORD *)v5 + 42);
      ++v291;
      ++v292;
      __int16 v66 = v489;
      goto LABEL_679;
    }
    uint64_t v65 = 0;
    unsigned int v64 = 0;
    uint64_t v100 = *v5;
    uint64_t v483 = (uint64_t)(v5 + 7);
    unint64_t v101 = (uint64_t *)(*v5 + 48);
    uint64_t v480 = (uint64_t)(v5 + 17);
    uint64_t v481 = (uint64_t)(v63 + 19);
    uint64_t v478 = (uint64_t)(v5 + 4);
    uint64_t v102 = __p;
    uint64_t v473 = v101;
    while (1)
    {
      unsigned int v103 = *v102;
      uint64_t v104 = *(void *)(v100 + 72);
      uint64_t v105 = *(unsigned int *)(v100 + 88);
      if (v105)
      {
        LODWORD(v106) = (v105 - 1) & (37 * v103);
        uint64_t v107 = (int *)(v104 + 8 * v106);
        int v108 = *v107;
        if (v103 == *v107) {
          goto LABEL_183;
        }
        int v211 = 1;
        while (v108 != -1)
        {
          int v212 = v106 + v211++;
          uint64_t v106 = v212 & (v105 - 1);
          int v108 = *(_DWORD *)(v104 + 8 * v106);
          if (v103 == v108)
          {
            uint64_t v107 = (int *)(v104 + 8 * v106);
            goto LABEL_183;
          }
        }
      }
      uint64_t v107 = (int *)(v104 + 8 * v105);
LABEL_183:
      if ((int *)(v104 + 8 * v105) == v107) {
        unsigned int v109 = 0;
      }
      else {
        unsigned int v109 = v107[1];
      }
      unsigned int v485 = v64;
      LODWORD(v523) = *v102;
      unsigned int v110 = sub_1CD48A634(v101, &v523);
      if ((int *)(*(void *)(v100 + 48) + 16 * *(unsigned int *)(v100 + 64)) == v110) {
        unsigned int v111 = 0;
      }
      else {
        unsigned int v111 = (_WORD *)*((void *)v110 + 1);
      }
      uint64_t v112 = v63[19];
      uint64_t v113 = *((unsigned int *)v63 + 42);
      if (v113)
      {
        LODWORD(v114) = (v113 - 1) & (37 * v109);
        int v115 = (int *)(v112 + 8 * v114);
        int v116 = *v115;
        if (v109 == *v115) {
          goto LABEL_191;
        }
        int v213 = 1;
        while (v116 != -1)
        {
          int v214 = v114 + v213++;
          uint64_t v114 = v214 & (v113 - 1);
          int v116 = *(_DWORD *)(v112 + 8 * v114);
          if (v109 == v116)
          {
            int v115 = (int *)(v112 + 8 * v114);
            goto LABEL_191;
          }
        }
      }
      int v115 = (int *)(v112 + 8 * v113);
LABEL_191:
      if (*((unsigned char *)v63 + 144)) {
        goto LABEL_212;
      }
      uint64_t v117 = v100;
      uint64_t v118 = *(void *)v111;
      uint64_t v120 = (void *)v63[4];
      unint64_t v119 = v63[5];
      if ((unint64_t)v120 >= v119)
      {
        __dst = v102;
        uint64_t v471 = v65;
        int v122 = (void *)v63[3];
        uint64_t v123 = v120 - v122;
        unint64_t v124 = v123 + 1;
        if ((unint64_t)(v123 + 1) >> 61) {
          goto LABEL_729;
        }
        int v125 = v63;
        uint64_t v126 = v119 - (void)v122;
        if (v126 >> 2 > v124) {
          unint64_t v124 = v126 >> 2;
        }
        if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v124;
        }
        if (v127)
        {
          if (v127 >> 61) {
            goto LABEL_730;
          }
          unint64_t v128 = (char *)operator new(8 * v127);
        }
        else
        {
          unint64_t v128 = 0;
        }
        uint64_t v129 = &v128[8 * v123];
        *(void *)uint64_t v129 = v118;
        uint64_t v121 = v129 + 8;
        uint64_t v100 = v117;
        if (v120 != v122)
        {
          do
          {
            uint64_t v130 = *--v120;
            *((void *)v129 - 1) = v130;
            v129 -= 8;
          }
          while (v120 != v122);
          uint64_t v120 = (void *)v125[3];
        }
        v125[3] = v129;
        v125[4] = v121;
        v125[5] = &v128[8 * v127];
        uint64_t v63 = v125;
        uint64_t v102 = __dst;
        if (v120) {
          operator delete(v120);
        }
        uint64_t v5 = v476;
        uint64_t v65 = v471;
      }
      else
      {
        void *v120 = v118;
        uint64_t v121 = v120 + 1;
        uint64_t v5 = v476;
        uint64_t v100 = v117;
      }
      v63[4] = v121;
      int v131 = *((unsigned __int8 *)v111 + 16);
      if (v131 == 59)
      {
        unint64_t v101 = v473;
        if ((v111[9] & 0x80) == 0) {
          goto LABEL_212;
        }
      }
      else
      {
        unint64_t v101 = v473;
        if (v131 != 21) {
          goto LABEL_212;
        }
        uint64_t v208 = *(void *)(*((void *)v111 + 3) + 112);
        if (!v208) {
          goto LABEL_212;
        }
        unsigned int v209 = *((_DWORD *)v111 + 8) + 2;
        if (v209 >= *(_DWORD *)(v208 + 8)) {
          goto LABEL_212;
        }
        uint64_t v210 = *(void *)(v208 + 8 * v209 + 40);
        if (!v210 || (*(char *)(v210 + 19) & 0x80000000) == 0) {
          goto LABEL_212;
        }
      }
      int v207 = *((unsigned __int8 *)v63 + 268);
      *((_DWORD *)v63 + 66) = v65;
      if (!v207) {
        *((unsigned char *)v63 + 268) = 1;
      }
LABEL_212:
      uint64_t v132 = v63[19];
      uint64_t v133 = *((unsigned int *)v63 + 42);
      uint64_t v134 = (int *)(v132 + 8 * v133);
      if (*((unsigned __int8 *)v111 + 16) > 0x14u || v111 == 0)
      {
        if (v134 == v115)
        {
          unint64_t v523 = (void *)(v109 | ((unint64_t)v65 << 32));
          unsigned int v136 = v485;
          if (!v133)
          {
            int v166 = 0;
            goto LABEL_258;
          }
          int v137 = v133 - 1;
          unsigned int v138 = v137 & (37 * v109);
          uint64_t v139 = (_DWORD *)(v132 + 8 * v138);
          int v140 = *v139;
          if (v109 != *v139)
          {
            int v141 = 0;
            int v142 = 1;
            while (v140 != -1)
            {
              if (v141) {
                BOOL v143 = 0;
              }
              else {
                BOOL v143 = v140 == -2;
              }
              if (v143) {
                int v141 = v139;
              }
              unsigned int v144 = v138 + v142++;
              unsigned int v138 = v144 & v137;
              uint64_t v139 = (_DWORD *)(v132 + 8 * v138);
              int v140 = *v139;
              if (v109 == *v139) {
                goto LABEL_259;
              }
            }
            if (v141) {
              int v166 = v141;
            }
            else {
              int v166 = v139;
            }
LABEL_258:
            BOOL v167 = sub_1CB83889C(v481, (uint64_t)&v523, &v523, v166);
            *(void *)BOOL v167 = v523;
          }
LABEL_259:
          unint64_t v523 = (void *)((v65 << 32) | v485);
          int v168 = *((_DWORD *)v5 + 12);
          if (!v168)
          {
            int v193 = 0;
            goto LABEL_294;
          }
          uint64_t v169 = v5[4];
          int v170 = v168 - 1;
          unsigned int v171 = v170 & (37 * v485);
          uint64_t v172 = (_DWORD *)(v169 + 8 * v171);
          int v173 = *v172;
          if (v485 != *v172)
          {
            uint64_t v174 = 0;
            int v175 = 1;
            while (v173 != -1)
            {
              if (v174) {
                BOOL v176 = 0;
              }
              else {
                BOOL v176 = v173 == -2;
              }
              if (v176) {
                uint64_t v174 = v172;
              }
              unsigned int v177 = v171 + v175++;
              unsigned int v171 = v177 & v170;
              uint64_t v172 = (_DWORD *)(v169 + 8 * v171);
              int v173 = *v172;
              if (v485 == *v172) {
                goto LABEL_295;
              }
            }
            if (v174) {
              int v193 = v174;
            }
            else {
              int v193 = v172;
            }
LABEL_294:
            int v194 = sub_1CB83889C(v478, (uint64_t)&v523, &v523, v193);
            *(void *)int v194 = v523;
          }
LABEL_295:
          unint64_t v523 = (void *)(v65 | ((unint64_t)v485 << 32));
          int v195 = *((_DWORD *)v5 + 18);
          if (!v195)
          {
            uint64_t v205 = 0;
            goto LABEL_312;
          }
          uint64_t v196 = v5[7];
          int v197 = v195 - 1;
          unsigned int v198 = v197 & (37 * v65);
          unint64_t v199 = (_DWORD *)(v196 + 8 * v198);
          int v200 = *v199;
          if (v65 != *v199)
          {
            uint64_t v201 = 0;
            int v202 = 1;
            while (v200 != -1)
            {
              if (v201) {
                BOOL v203 = 0;
              }
              else {
                BOOL v203 = v200 == -2;
              }
              if (v203) {
                uint64_t v201 = v199;
              }
              unsigned int v204 = v198 + v202++;
              unsigned int v198 = v204 & v197;
              unint64_t v199 = (_DWORD *)(v196 + 8 * v198);
              int v200 = *v199;
              if (v65 == *v199) {
                goto LABEL_313;
              }
            }
            if (v201) {
              uint64_t v205 = v201;
            }
            else {
              uint64_t v205 = v199;
            }
            goto LABEL_312;
          }
          goto LABEL_313;
        }
        uint64_t v153 = v115[1];
        unsigned int v136 = v485;
        uint64_t v154 = v485;
        if (v485 != v153)
        {
          *((unsigned char *)v5 + 104) = 1;
          uint64_t v154 = v153;
        }
        unint64_t v523 = (void *)(v485 | (unint64_t)(v154 << 32));
        int v155 = *((_DWORD *)v5 + 12);
        if (v155)
        {
          uint64_t v156 = v5[4];
          int v157 = v155 - 1;
          unsigned int v158 = v157 & (37 * v485);
          char v159 = (_DWORD *)(v156 + 8 * v158);
          int v160 = *v159;
          if (v485 != *v159)
          {
            int v161 = 0;
            int v162 = 1;
            while (v160 != -1)
            {
              if (v161) {
                BOOL v163 = 0;
              }
              else {
                BOOL v163 = v160 == -2;
              }
              if (v163) {
                int v161 = v159;
              }
              unsigned int v164 = v158 + v162++;
              unsigned int v158 = v164 & v157;
              char v159 = (_DWORD *)(v156 + 8 * v158);
              int v160 = *v159;
              if (v485 == *v159) {
                goto LABEL_280;
              }
            }
            if (v161) {
              int v180 = v161;
            }
            else {
              int v180 = v159;
            }
LABEL_279:
            BOOL v181 = sub_1CB83889C(v478, (uint64_t)&v523, &v523, v180);
            *(void *)BOOL v181 = v523;
          }
LABEL_280:
          uint64_t v182 = v115[1];
          unint64_t v523 = (void *)(v182 | ((unint64_t)v485 << 32));
          int v183 = *((_DWORD *)v5 + 18);
          if (!v183)
          {
            uint64_t v205 = 0;
            goto LABEL_312;
          }
          uint64_t v184 = v5[7];
          int v185 = v183 - 1;
          unsigned int v186 = v185 & (37 * v182);
          unsigned int v187 = (_DWORD *)(v184 + 8 * v186);
          int v188 = *v187;
          if (v182 != *v187)
          {
            uint64_t v189 = 0;
            int v190 = 1;
            while (v188 != -1)
            {
              if (v189) {
                BOOL v191 = 0;
              }
              else {
                BOOL v191 = v188 == -2;
              }
              if (v191) {
                uint64_t v189 = v187;
              }
              unsigned int v192 = v186 + v190++;
              unsigned int v186 = v192 & v185;
              unsigned int v187 = (_DWORD *)(v184 + 8 * v186);
              int v188 = *v187;
              if (v182 == *v187) {
                goto LABEL_313;
              }
            }
            if (v189) {
              uint64_t v205 = v189;
            }
            else {
              uint64_t v205 = v187;
            }
LABEL_312:
            int v206 = sub_1CB83889C(v483, (uint64_t)&v523, &v523, v205);
            *(void *)int v206 = v523;
          }
LABEL_313:
          unsigned int v64 = v136 + 1;
          uint64_t v165 = v488;
          goto LABEL_314;
        }
        int v180 = 0;
        goto LABEL_279;
      }
      if (v134 == v115)
      {
        unint64_t v523 = (void *)(v109 | ((unint64_t)v65 << 32));
        if (v133)
        {
          int v145 = v133 - 1;
          unsigned int v146 = v145 & (37 * v109);
          uint64_t v147 = (_DWORD *)(v132 + 8 * v146);
          int v148 = *v147;
          if (v109 != *v147)
          {
            long long v149 = 0;
            int v150 = 1;
            while (v148 != -1)
            {
              if (v149) {
                BOOL v151 = 0;
              }
              else {
                BOOL v151 = v148 == -2;
              }
              if (v151) {
                long long v149 = v147;
              }
              unsigned int v152 = v146 + v150++;
              unsigned int v146 = v152 & v145;
              uint64_t v147 = (_DWORD *)(v132 + 8 * v146);
              int v148 = *v147;
              if (v109 == *v147) {
                goto LABEL_274;
              }
            }
            if (v149) {
              uint64_t v178 = v149;
            }
            else {
              uint64_t v178 = v147;
            }
LABEL_273:
            uint64_t v179 = sub_1CB83889C(v481, (uint64_t)&v523, &v523, v178);
            *(void *)uint64_t v179 = v523;
          }
LABEL_274:
          unint64_t v538 = v65;
          uint64_t v539 = (uint64_t *)v111;
          sub_1CD4893B8((uint64_t)&v523, v480, &v538, &v539);
          uint64_t v165 = v488;
          goto LABEL_275;
        }
        uint64_t v178 = 0;
        goto LABEL_273;
      }
      unint64_t v538 = v115[1];
      uint64_t v539 = (uint64_t *)v111;
      sub_1CD4893B8((uint64_t)&v523, v480, &v538, &v539);
      uint64_t v165 = v488;
LABEL_275:
      unsigned int v64 = v485;
LABEL_314:
      uint64_t v65 = (v65 + 1);
      if (++v102 == v165) {
        goto LABEL_109;
      }
    }
  }
LABEL_62:
  if (v493)
  {
    int v494 = (uint64_t *)v493;
    operator delete(v493);
  }
  MEMORY[0x1D25D9CD0](v491[0], 8);
  if (v498)
  {
    uint64_t v499 = v498;
    operator delete(v498);
  }
  MEMORY[0x1D25D9CD0](v496[0], 8);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1CC936600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = *(void *)a1 + 16 * v5;
  if (*(_DWORD *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = 16 * v5;
      uint64_t v8 = *(void **)a1;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v8 = *(void **)a1;
    }
  }
  else
  {
LABEL_6:
    uint64_t v8 = (void *)(*(void *)a1 + 16 * v5);
  }
  uint64_t v9 = *(void *)a1 + 16 * v5;
  if (v8 == (void *)v9)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v4 = 0x7FFFFFFFFFFFFFF8;
    do
    {
      if (v11 >= v12)
      {
        uint64_t v13 = (v11 - v10) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          abort();
        }
        if ((v12 - v10) >> 2 > v14) {
          unint64_t v14 = (v12 - v10) >> 2;
        }
        if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          if (v15 >> 61) {
            sub_1CB833614();
          }
          unsigned int v16 = (char *)operator new(8 * v15);
        }
        else
        {
          unsigned int v16 = 0;
        }
        uint64_t v17 = &v16[8 * v13];
        *(void *)uint64_t v17 = *v8;
        int v18 = v17 + 8;
        while (v11 != v10)
        {
          uint64_t v19 = *((void *)v11 - 1);
          v11 -= 8;
          *((void *)v17 - 1) = v19;
          v17 -= 8;
        }
        uint64_t v12 = &v16[8 * v15];
        if (v10) {
          operator delete(v10);
        }
        uint64_t v10 = v17;
        uint64_t v11 = v18;
      }
      else
      {
        *(void *)uint64_t v11 = *v8;
        v11 += 8;
      }
      int v20 = v8 + 2;
      uint64_t v8 = (void *)v6;
      if (v20 != (void *)v6)
      {
        uint64_t v8 = v20;
        while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 2;
          if (v8 == (void *)v6)
          {
            uint64_t v8 = (void *)v6;
            break;
          }
        }
      }
    }
    while (v8 != (void *)v9);
  }
  if (v11 - v10 < 1025)
  {
LABEL_40:
    sub_1CC93B940((unint64_t)v10, v11, (v11 - v10) >> 3, 0, 0);
  }
  else
  {
    BOOL v21 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v22 = (v11 - v10) >> 3;
    while (1)
    {
      unint64_t v23 = (uint64_t *)operator new(8 * v22, v21);
      if (v23) {
        break;
      }
      BOOL v24 = v22 > 1;
      v22 >>= 1;
      if (!v24) {
        goto LABEL_40;
      }
    }
    uint64_t v4 = (uint64_t)v23;
    sub_1CC93B940((unint64_t)v10, v11, (v11 - v10) >> 3, v23, v22);
    operator delete((void *)v4);
  }
  if (v10 != v11)
  {
    __int16 v35 = *(_WORD *)(a4 + 32);
    long long v25 = *(_OWORD *)(a4 + 16);
    v34[0] = *(_OWORD *)a4;
    v34[1] = v25;
    char v26 = v35;
    if (v35 == 1)
    {
      unsigned int v36 = "_";
      __int16 v39 = 259;
      unint64_t v29 = v4 & 0xFFFFFFFF00000000;
      char v27 = 3;
      unint64_t v30 = v37;
      uint64_t v31 = (const char **)"_";
    }
    else
    {
      if (!(_BYTE)v35)
      {
        char v27 = 0;
        __int16 v39 = 256;
        char v28 = 1;
        goto LABEL_51;
      }
      int v32 = *(const char **)&v34[0];
      char v27 = 2;
      if (HIBYTE(v35) != 1)
      {
        char v26 = 2;
        int v32 = (const char *)v34;
      }
      unsigned int v36 = v32;
      unint64_t v37 = *((void *)&v34[0] + 1);
      uint64_t v38 = "_";
      LOBYTE(v39) = v26;
      HIBYTE(v39) = 3;
      unint64_t v30 = v4 & 0xFFFFFFFF00000000;
      unint64_t v29 = v4 & 0xFFFFFFFF00000000;
      uint64_t v31 = &v36;
    }
    uint64_t v40 = v31;
    unint64_t v41 = v30;
    char v28 = 8;
    unint64_t v42 = v29;
LABEL_51:
    char v43 = v27;
    char v44 = v28;
    operator new();
  }
  if (v10) {
    operator delete(v10);
  }
}

void llvm::IROutliner::deduplicateExtractedSections(llvm::IROutliner *a1, llvm::Module *a2, OutlinableGroup *a3, char **a4, unsigned int *a5)
{
  unint64_t v5 = (unint64_t)a3;
  uint64_t v6 = a1;
  llvm::IROutliner::createFunction(a1, a2, a3, *a5);
  std::string __p = 0;
  unsigned int v158 = 0;
  unint64_t v159 = 0;
  int v145 = **(llvm::OutlinableRegion ***)v5;
  uint64_t v7 = *((void *)v145 + 26);
  uint64_t v148 = v5 + 72;
  unint64_t v149 = v5;
  uint64_t v8 = *(void *)(v7 + 80);
  uint64_t v151 = v7 + 72;
  if (v8 != v7 + 72)
  {
    BOOL v143 = v6;
    uint64_t v9 = *(uint64_t ****)(v5 + 56);
    int v150 = (uint64_t *)(v9 + 9);
    unsigned int v153 = (v9 >> 4) ^ (v9 >> 9);
    while (1)
    {
      uint64_t v10 = (llvm::BasicBlock *)(v8 - 24);
      BOOL v34 = v8 == 0;
      uint64_t v8 = *(void *)(v8 + 8);
      if (v34) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v10;
      }
      llvm::BasicBlock::removeFromParent(v11);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v150, v11);
      uint64_t v12 = *v150;
      *((void *)v11 + 4) = v150;
      *((void *)v11 + 3) = v12;
      *(void *)(v12 + 8) = (char *)v11 + 24;
      *int v150 = (uint64_t)v11 + 24;
      unint64_t v14 = (void *)((char *)v11 + 40);
      uint64_t v13 = (void *)*((void *)v11 + 5);
      if (v13 != (void *)((char *)v11 + 40))
      {
        unint64_t v15 = v13 - 3;
        if (!v13) {
          unint64_t v15 = 0;
        }
        unsigned int v16 = *((unsigned __int8 *)v15 + 16) - 40;
        if (v16 < 0xFFFFFFF5) {
          unint64_t v15 = 0;
        }
        if (v13)
        {
          if (*((unsigned char *)v15 + 16) == 29 && v16 >= 0xFFFFFFF5)
          {
            uint64_t v65 = *((_DWORD *)v15 + 5) & 0x7FFFFFF;
            if (v65) {
              uint64_t v66 = v15[-4 * v65];
            }
            else {
              uint64_t v66 = 0;
            }
            int v166 = (uint64_t *)v66;
            BOOL v167 = v11;
            sub_1CD4729F8((uint64_t)v163, v148, (uint64_t *)&v166, &v167);
          }
        }
      }
      int v18 = (void *)*((void *)v11 + 6);
      if (v18 != v14) {
        break;
      }
LABEL_124:
      if (v8 == v151)
      {
        uint64_t v7 = *((void *)v145 + 26);
        unint64_t v5 = v149;
        uint64_t v6 = v143;
        goto LABEL_130;
      }
    }
    uint64_t v152 = v8;
    uint64_t v19 = 0;
    int v20 = 0;
    BOOL v21 = 0;
    while (1)
    {
      if (v18) {
        uint64_t v22 = (uint64_t)(v18 - 3);
      }
      else {
        uint64_t v22 = 0;
      }
      if (*(unsigned char *)(v22 + 16) != 84)
      {
        int v160 = 0;
        unint64_t v23 = (unsigned __int8 **)(v22 + 48);
        if (&v160 != (unsigned __int8 **)(v22 + 48))
        {
          BOOL v24 = *v23;
          if (!*v23) {
            goto LABEL_27;
          }
          int v50 = *v24;
          if ((v50 - 4) > 0x1E)
          {
            if ((v50 - 3) >= 0xFFFFFFFE) {
              int v53 = *v23;
            }
            else {
              int v53 = 0;
            }
            if ((v50 - 3) <= 0xFFFFFFFD)
            {
              if (v50 == 3) {
                *((void *)v24 + 1) = 0;
              }
              goto LABEL_27;
            }
            unint64_t v52 = (unint64_t)(v53 + 8);
LABEL_82:
            v163[0] = v22 + 48;
            sub_1CC5FA668(v52 + 16, v163);
            uint64_t v54 = v160;
            *unint64_t v23 = v160;
            if (v54)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v160, v54, v22 + 48);
              int v160 = 0;
            }
          }
          else
          {
            if ((v24[1] & 0x7F) == 2 || *((_DWORD *)v24 + 3))
            {
              uint64_t v51 = *((void *)v24 + 2);
              if ((v51 & 4) != 0)
              {
                unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
                if (v52) {
                  goto LABEL_82;
                }
              }
            }
LABEL_27:
            *unint64_t v23 = 0;
          }
        }
        v163[0] = (uint64_t)v9;
        llvm::updateLoopMetadataDebugLocations((llvm::Instruction *)v22, (uint64_t (*)(uint64_t))sub_1CC93CF78, (uint64_t)v163);
        goto LABEL_29;
      }
      if (sub_1CBF63B28(v22))
      {
        if (v21 >= v19)
        {
          uint64_t v39 = v21 - v20;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61) {
            goto LABEL_235;
          }
          if (((char *)v19 - (char *)v20) >> 2 > v40) {
            unint64_t v40 = ((char *)v19 - (char *)v20) >> 2;
          }
          if ((unint64_t)((char *)v19 - (char *)v20) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v40;
          }
          if (v41)
          {
            if (v41 >> 61) {
              goto LABEL_236;
            }
            unint64_t v42 = (char *)operator new(8 * v41);
          }
          else
          {
            unint64_t v42 = 0;
          }
          char v43 = (uint64_t *)&v42[8 * v39];
          uint64_t *v43 = v22;
          char v44 = v43 + 1;
          while (v21 != v20)
          {
            uint64_t v45 = *--v21;
            *--char v43 = v45;
          }
          uint64_t v19 = (uint64_t *)&v42[8 * v41];
          if (v20) {
            operator delete(v20);
          }
          BOOL v21 = v44;
          int v20 = v43;
        }
        else
        {
          *v21++ = v22;
        }
        goto LABEL_29;
      }
      if ((*((unsigned char *)v9 + 23) & 0x20) != 0) {
        break;
      }
LABEL_29:
      int v18 = (void *)v18[1];
      if (v18 == v14)
      {
        if (v20 != v21) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        uint64_t v8 = v152;
        if (v20) {
          operator delete(v20);
        }
        goto LABEL_124;
      }
    }
    uint64_t v25 = ***v9;
    v163[0] = (uint64_t)v9;
    int v26 = *(_DWORD *)(v25 + 2496);
    if (v26)
    {
      uint64_t v27 = *(void *)(v25 + 2480);
      int v28 = v26 - 1;
      unsigned int v29 = v28 & v153;
      unint64_t v30 = (uint64_t ****)(v27 + 40 * (v28 & v153));
      uint64_t v31 = *v30;
      if (*v30 == v9)
      {
LABEL_42:
        uint64_t v36 = *((unsigned int *)v30 + 4);
        if (!v36) {
          goto LABEL_29;
        }
        unint64_t v37 = (uint64_t *)(v30[1] + 1);
        uint64_t v38 = 16 * v36;
        while (*((_DWORD *)v37 - 2))
        {
          v37 += 2;
          v38 -= 16;
          if (!v38) {
            goto LABEL_29;
          }
        }
        if (!*v37) {
          goto LABEL_29;
        }
        Impl = (unsigned __int8 *)llvm::DILocation::getImpl(**v9, 0, 0, *v37, 0, 0, 0, 1);
        v169[0] = Impl;
        if (Impl) {
          llvm::MetadataTracking::track((uint64_t)v169, Impl, 2);
        }
        unint64_t v47 = (unsigned __int8 **)(v22 + 48);
        if (v169 != (void *)(v22 + 48))
        {
          unint64_t v48 = *v47;
          if (!*v47) {
            goto LABEL_69;
          }
          int v57 = *v48;
          if ((v57 - 4) > 0x1E)
          {
            if ((v57 - 3) >= 0xFFFFFFFE) {
              size_t v60 = *v47;
            }
            else {
              size_t v60 = 0;
            }
            if ((v57 - 3) < 0xFFFFFFFE)
            {
              if (v57 == 3) {
                *((void *)v48 + 1) = 0;
              }
              goto LABEL_69;
            }
            unint64_t v59 = (unint64_t)(v60 + 8);
LABEL_101:
            v163[0] = v22 + 48;
            sub_1CC5FA668(v59 + 16, v163);
          }
          else if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
          {
            uint64_t v58 = *((void *)v48 + 2);
            if ((v58 & 4) != 0)
            {
              unint64_t v59 = v58 & 0xFFFFFFFFFFFFFFF8;
              if (v59) {
                goto LABEL_101;
              }
            }
          }
LABEL_69:
          int v49 = (unsigned __int8 *)v169[0];
          void *v47 = (unsigned __int8 *)v169[0];
          if (v49)
          {
            llvm::MetadataTracking::retrack((uint64_t)v169, v49, v22 + 48);
            v169[0] = 0;
          }
          goto LABEL_29;
        }
        if (v169[0])
        {
          int v61 = *(unsigned __int8 *)v169[0];
          if ((v61 - 4) > 0x1E)
          {
            if ((v61 - 3) >= 0xFFFFFFFE) {
              uint64_t v64 = v169[0];
            }
            else {
              uint64_t v64 = 0;
            }
            if ((v61 - 3) < 0xFFFFFFFE)
            {
              if (v61 == 3) {
                *(void *)(v169[0] + 8) = 0;
              }
              goto LABEL_29;
            }
            unint64_t v63 = v64 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v169[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v169[0] + 12)) {
              goto LABEL_29;
            }
            uint64_t v62 = *(void *)(v169[0] + 16);
            if ((v62 & 4) == 0) {
              goto LABEL_29;
            }
            unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
            if (!v63) {
              goto LABEL_29;
            }
          }
          v163[0] = (uint64_t)v169;
          sub_1CC5FA668(v63 + 16, v163);
        }
        goto LABEL_29;
      }
      int v32 = 0;
      int v33 = 1;
      while (v31 != (uint64_t ***)-4096)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == (uint64_t ***)-8192;
        }
        if (v34) {
          int v32 = v30;
        }
        unsigned int v35 = v29 + v33++;
        unsigned int v29 = v35 & v28;
        unint64_t v30 = (uint64_t ****)(v27 + 40 * v29);
        uint64_t v31 = *v30;
        if (*v30 == v9) {
          goto LABEL_42;
        }
      }
      if (v32) {
        int v55 = v32;
      }
      else {
        int v55 = v30;
      }
    }
    else
    {
      int v55 = 0;
    }
    unint64_t v30 = (uint64_t ****)sub_1CC609054(v25 + 2480, (uint64_t)v163, v163, v55);
    uint64_t v56 = v163[0];
    v30[4] = 0;
    v30[3] = 0;
    llvm::PassRegistry *v30 = (uint64_t ***)v56;
    v30[1] = (uint64_t ***)(v30 + 3);
    void v30[2] = (uint64_t ***)0x100000000;
    goto LABEL_42;
  }
LABEL_130:
  uint64_t v154 = (uint64_t)v6 + 48;
  uint64_t v67 = *(void *)(v7 + 112);
  if (v67)
  {
    if (*(_DWORD *)(v67 + 8))
    {
      uint64_t v68 = *(void *)(v67 + 40);
      if (v68)
      {
        uint64_t v69 = *(unsigned int *)(v68 + 8);
        if (v69)
        {
          unsigned int v70 = (uint64_t *)(v68 + 48);
          uint64_t v71 = 8 * v69;
          do
          {
            uint64_t v72 = *v70++;
            uint64_t v73 = *(llvm::LLVMContext ****)(v5 + 56);
            v73[14] = (llvm::LLVMContext **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v73 + 14), **v73, -1, v72);
            v71 -= 8;
          }
          while (v71);
        }
      }
    }
  }
  int v166 = 0;
  BOOL v167 = 0;
  unsigned int v168 = 0;
  uint64_t v74 = *(void *)(v5 + 56);
  v163[0] = (uint64_t)"output_block_0";
  __int16 v165 = 259;
  sub_1CC936600(v148, (uint64_t)&v166, v74, (uint64_t)v163);
  *((_DWORD *)v145 + 7) = 0;
  sub_1CC93769C((uint64_t)v145, (uint64_t)&v166, v154, 1);
  replaceConstants(v145);
  if ((sub_1CC93CD5C((uint64_t)&v166, (uint64_t)v145) & 1) == 0)
  {
    int v160 = 0;
    int v161 = 0;
    int v162 = 0;
    uint64_t v79 = v158;
    if ((unint64_t)v158 >= v159)
    {
      uint64_t v81 = sub_1CC93D0F8((uint64_t *)&__p, (uint64_t)&v160);
      uint64_t v80 = (uint64_t)v160;
    }
    else
    {
      uint64_t v80 = 0;
      *(void *)unsigned int v158 = 0;
      *((void *)v79 + 1) = 0;
      uint64_t v81 = (uint64_t)(v79 + 24);
      *((_DWORD *)v79 + 4) = 0;
    }
    unsigned int v158 = (char *)v81;
    MEMORY[0x1D25D9CD0](v80, 8);
    unint64_t v88 = &v166[2 * v168];
    if (v167)
    {
      if (v168)
      {
        uint64_t v134 = 16 * v168;
        uint64_t v89 = v166;
        while ((*v89 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v89 += 2;
          v134 -= 16;
          if (!v134) {
            goto LABEL_225;
          }
        }
      }
      else
      {
        uint64_t v89 = v166;
      }
    }
    else
    {
LABEL_225:
      uint64_t v89 = &v166[2 * v168];
    }
    int v135 = &v166[2 * v168];
LABEL_227:
    while (v89 != v135)
    {
      int v137 = v89 + 2;
      uint64_t v136 = *v89;
      int v160 = 0;
      int v138 = sub_1CD40EA84(*(void *)(v5 + 72), *(_DWORD *)(v5 + 88), v136, &v160);
      uint64_t v139 = (uint64_t)v160;
      if (!v138) {
        uint64_t v139 = *(void *)(v5 + 72) + 16 * *(unsigned int *)(v5 + 88);
      }
      int v140 = *(llvm::BasicBlock **)(v139 + 8);
      int v141 = (llvm::BasicBlock *)v89[1];
      int v142 = operator new(0x60uLL);
      v142[13] = v142[13] & 0x38000000 | 1;
      *(void *)int v142 = 0;
      *((void *)v142 + 1) = 0;
      *((void *)v142 + 2) = 0;
      *((void *)v142 + 3) = v142 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v142 + 8), v140, v141);
      sub_1CD4729F8((uint64_t)&v160, (uint64_t)(v158 - 24), v89, v89 + 1);
      uint64_t v89 = v88;
      if (v137 != v88)
      {
        uint64_t v89 = v137;
        while ((*v89 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v89 += 2;
          if (v89 == v88)
          {
            uint64_t v89 = v88;
            goto LABEL_227;
          }
        }
      }
    }
  }
  *((void *)v145 + 25) = replaceCalledFunction(a2, v145);
  unsigned int v75 = a4;
  uint64_t v77 = a4[1];
  unint64_t v76 = (unint64_t)a4[2];
  if ((unint64_t)v77 >= v76)
  {
    unsigned int v82 = *a4;
    uint64_t v83 = (v77 - *a4) >> 3;
    unint64_t v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 61) {
LABEL_235:
    }
      abort();
    uint64_t v85 = v76 - (void)v82;
    if (v85 >> 2 > v84) {
      unint64_t v84 = v85 >> 2;
    }
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v86 = v84;
    }
    if (v86)
    {
      if (v86 >> 61) {
LABEL_236:
      }
        sub_1CB833614();
      unsigned int v87 = (char *)operator new(8 * v86);
      unsigned int v75 = a4;
    }
    else
    {
      unsigned int v87 = 0;
    }
    unsigned int v90 = &v87[8 * v83];
    *(void *)unsigned int v90 = *((void *)v145 + 26);
    unsigned int v78 = v90 + 8;
    if (v77 != v82)
    {
      do
      {
        uint64_t v91 = *((void *)v77 - 1);
        v77 -= 8;
        *((void *)v90 - 1) = v91;
        v90 -= 8;
      }
      while (v77 != v82);
      uint64_t v77 = *v75;
    }
    *unsigned int v75 = v90;
    v75[1] = v78;
    v75[2] = &v87[8 * v86];
    if (v77)
    {
      operator delete(v77);
      unsigned int v75 = a4;
    }
  }
  else
  {
    *(void *)uint64_t v77 = *((void *)v145 + 26);
    unsigned int v78 = v77 + 8;
  }
  v75[1] = v78;
  MEMORY[0x1D25D9CD0](v166, 8);
  unsigned int v93 = *(llvm::OutlinableRegion ***)v5;
  uint64_t v94 = v5;
  if (*(void *)(v5 + 8) - *(void *)v5 >= 9uLL)
  {
    unint64_t v95 = 1;
    do
    {
      uint64_t v96 = (uint64_t)v93[v95];
      llvm::AttributeFuncs::mergeAttributesForOutlining(*(llvm::AttributeFuncs **)(v94 + 56), *(llvm::Function **)(v96 + 208), v92);
      int v166 = 0;
      BOOL v167 = 0;
      unsigned int v168 = 0;
      uint64_t v97 = *(void *)(v94 + 56);
      unint64_t v5 = v5 & 0xFFFFFFFF00000000 | v95;
      v155[0] = "output_block_";
      v155[2] = v5;
      __int16 v156 = 2051;
      sub_1CC936600(v148, (uint64_t)&v166, v97, (uint64_t)v155);
      sub_1CC93769C(v96, (uint64_t)&v166, v154, 0);
      if ((sub_1CC93CD5C((uint64_t)&v166, v96) & 1) == 0)
      {
        DuplicateOutputBlocuint64_t k = findDuplicateOutputBlock((uint64_t)&v166, (uint64_t *)&__p);
        if ((DuplicateOutputBlock & 0xFF00000000) != 0)
        {
          *(_DWORD *)(v96 + 28) = DuplicateOutputBlock;
          uint64_t v112 = (uint64_t)&v166[2 * v168];
          if (v167)
          {
            if (v168)
            {
              uint64_t v118 = 16 * v168;
              uint64_t v113 = (uint64_t)v166;
              while ((*(void *)v113 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v113 += 16;
                v118 -= 16;
                if (!v118) {
                  goto LABEL_195;
                }
              }
            }
            else
            {
              uint64_t v113 = (uint64_t)v166;
            }
          }
          else
          {
LABEL_195:
            uint64_t v113 = (uint64_t)&v166[2 * v168];
          }
          unint64_t v119 = &v166[2 * v168];
LABEL_197:
          while ((uint64_t *)v113 != v119)
          {
            llvm::BasicBlock::eraseFromParent(*(llvm::BasicBlock **)(v113 + 8));
            uint64_t v120 = v113 + 16;
            uint64_t v113 = v112;
            if (v120 != v112)
            {
              uint64_t v113 = v120;
              while ((*(void *)v113 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v113 += 16;
                if (v113 == v112)
                {
                  uint64_t v113 = v112;
                  goto LABEL_197;
                }
              }
            }
          }
        }
        else
        {
          unsigned int v103 = v158;
          *(_DWORD *)(v96 + 28) = -1431655765 * ((unint64_t)(v158 - (unsigned char *)__p) >> 3);
          v163[0] = 0;
          v163[1] = 0;
          int v164 = 0;
          if ((unint64_t)v103 >= v159)
          {
            uint64_t v105 = sub_1CC93D0F8((uint64_t *)&__p, (uint64_t)v163);
            uint64_t v104 = v163[0];
          }
          else
          {
            uint64_t v104 = 0;
            *(void *)unsigned int v103 = 0;
            *((void *)v103 + 1) = 0;
            uint64_t v105 = (uint64_t)(v103 + 24);
            *((_DWORD *)v103 + 4) = 0;
          }
          unsigned int v158 = (char *)v105;
          MEMORY[0x1D25D9CD0](v104, 8);
          int v116 = &v166[2 * v168];
          if (v167)
          {
            if (v168)
            {
              uint64_t v121 = 16 * v168;
              uint64_t v117 = v166;
              while ((*v117 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v117 += 2;
                v121 -= 16;
                if (!v121) {
                  goto LABEL_206;
                }
              }
            }
            else
            {
              uint64_t v117 = v166;
            }
          }
          else
          {
LABEL_206:
            uint64_t v117 = &v166[2 * v168];
          }
          int v122 = &v166[2 * v168];
LABEL_208:
          while (v117 != v122)
          {
            uint64_t v123 = *v117;
            unint64_t v124 = (llvm::BasicBlock *)v117[1];
            v163[0] = 0;
            int v125 = sub_1CD40EA84(*(void *)(v149 + 72), *(_DWORD *)(v149 + 88), v123, v163);
            uint64_t v126 = v163[0];
            if (!v125) {
              uint64_t v126 = *(void *)(v149 + 72) + 16 * *(unsigned int *)(v149 + 88);
            }
            unint64_t v127 = *(llvm::BasicBlock **)(v126 + 8);
            unint64_t v128 = operator new(0x60uLL);
            v128[13] = v128[13] & 0x38000000 | 1;
            *(void *)unint64_t v128 = 0;
            *((void *)v128 + 1) = 0;
            *((void *)v128 + 2) = 0;
            *((void *)v128 + 3) = v128 + 8;
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v128 + 8), v127, v124);
            int v160 = (unsigned __int8 *)v123;
            int v161 = v124;
            sub_1CD4729F8((uint64_t)v163, (uint64_t)(v158 - 24), (uint64_t *)&v160, &v161);
            uint64_t v129 = v117 + 2;
            uint64_t v117 = v116;
            if (v129 != v116)
            {
              uint64_t v117 = v129;
              while ((*v117 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v117 += 2;
                if (v117 == v116)
                {
                  uint64_t v117 = v116;
                  goto LABEL_208;
                }
              }
            }
          }
        }
      }
      *(void *)(v96 + 200) = replaceCalledFunction(a2, (llvm::OutlinableRegion *)v96);
      uint64_t v98 = a4;
      uint64_t v100 = a4[1];
      unint64_t v99 = (unint64_t)a4[2];
      if ((unint64_t)v100 >= v99)
      {
        uint64_t v106 = *a4;
        uint64_t v107 = (v100 - *a4) >> 3;
        unint64_t v108 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 61) {
          goto LABEL_235;
        }
        uint64_t v109 = v99 - (void)v106;
        if (v109 >> 2 > v108) {
          unint64_t v108 = v109 >> 2;
        }
        if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v110 = v108;
        }
        if (v110)
        {
          if (v110 >> 61) {
            goto LABEL_236;
          }
          unsigned int v111 = (char *)operator new(8 * v110);
          uint64_t v98 = a4;
        }
        else
        {
          unsigned int v111 = 0;
        }
        uint64_t v114 = &v111[8 * v107];
        *(void *)uint64_t v114 = *(void *)(v96 + 208);
        unint64_t v101 = v114 + 8;
        if (v100 != v106)
        {
          do
          {
            uint64_t v115 = *((void *)v100 - 1);
            v100 -= 8;
            *((void *)v114 - 1) = v115;
            v114 -= 8;
          }
          while (v100 != v106);
          uint64_t v100 = *v98;
        }
        *uint64_t v98 = v114;
        v98[1] = v101;
        v98[2] = &v111[8 * v110];
        if (v100)
        {
          operator delete(v100);
          uint64_t v98 = a4;
        }
      }
      else
      {
        *(void *)uint64_t v100 = *(void *)(v96 + 208);
        unint64_t v101 = v100 + 8;
      }
      v98[1] = v101;
      MEMORY[0x1D25D9CD0](v166, 8);
      unint64_t v95 = (v95 + 1);
      uint64_t v94 = v149;
      unsigned int v93 = *(llvm::OutlinableRegion ***)v149;
    }
    while (v95 < (uint64_t)(*(void *)(v149 + 8) - *(void *)v149) >> 3);
  }
  createSwitchStatement((uint64_t)a2, v94, v148, (uint64_t *)&__p);
  ++*a5;
  uint64_t v130 = (char *)__p;
  if (__p)
  {
    int v131 = v158;
    uint64_t v132 = __p;
    if (v158 != __p)
    {
      do
      {
        uint64_t v133 = *((void *)v131 - 3);
        v131 -= 24;
        MEMORY[0x1D25D9CD0](v133, 8);
      }
      while (v131 != v130);
      uint64_t v132 = __p;
    }
    unsigned int v158 = v130;
    operator delete(v132);
  }
}

void sub_1CC93769C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v33[8] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 256);
  uint64_t v6 = (uint64_t *)(a1 + 208);
  uint64_t v7 = (llvm::Function **)(v5 + 56);
  if (a4) {
    uint64_t v8 = (uint64_t *)(v5 + 56);
  }
  else {
    uint64_t v8 = (uint64_t *)(a1 + 208);
  }
  uint64_t v9 = *v8;
  v23[0] = &v24;
  v23[1] = (void *)0x100000000;
  int v30 = 0;
  v25[0] = 0;
  v25[1] = 0;
  int v26 = 0;
  char v29 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = v9;
  sub_1CC5A43B0((uint64_t)v23, 0);
  uint64_t v10 = *(void *)(a1 + 208);
  if (*(void *)(v10 + 96))
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    while (1)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(unsigned int *)(a1 + 48);
      if (!v14) {
        goto LABEL_20;
      }
      LODWORD(v15) = (v14 - 1) & (37 * v12);
      unsigned int v16 = (int *)(v13 + 8 * v15);
      int v17 = *v16;
      if (v12 != *v16) {
        break;
      }
LABEL_8:
      unsigned int v18 = v16[1];
      uint64_t v19 = *v7;
      if (*((_WORD *)*v7 + 9))
      {
        llvm::Function::BuildLazyArguments(*v7);
        uint64_t v10 = *v6;
      }
      uint64_t v20 = *((void *)v19 + 11);
      if (*(_WORD *)(v10 + 18)) {
        llvm::Function::BuildLazyArguments((llvm::Function *)v10);
      }
      if (v12 >= *(_DWORD *)(a1 + 24)) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::getDescendants();
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)(*(void *)(v10 + 88) + 40 * v11), (llvm::Value *)(v20 + 40 * v18), (llvm::Value *)1);
      uint64_t v31 = *(void *)(*(void *)(a1 + 200) - 32 * (*(_DWORD *)(*(void *)(a1 + 200) + 20) & 0x7FFFFFF) + 32 * v11);
      v32[0] = v20 + 40 * v18;
      sub_1CC27B388(a1 + 80, &v31, v32, (uint64_t)v33);
      uint64_t v10 = *v6;
      uint64_t v11 = ++v12;
      if (*(void *)(*v6 + 96) <= (unint64_t)v12) {
        goto LABEL_21;
      }
    }
    int v21 = 1;
    while (v17 != -1)
    {
      int v22 = v15 + v21++;
      uint64_t v15 = v22 & (v14 - 1);
      int v17 = *(_DWORD *)(v13 + 8 * v15);
      if (v12 == v17)
      {
        unsigned int v16 = (int *)(v13 + 8 * v15);
        goto LABEL_8;
      }
    }
LABEL_20:
    unsigned int v16 = (int *)(v13 + 8 * v14);
    goto LABEL_8;
  }
LABEL_21:
  MEMORY[0x1D25D9CD0](0, 8);
  sub_1CBF8FF88(v25);
  if (v23[0] != &v24) {
    free(v23[0]);
  }
}

void llvm::IROutliner::pruneIncompatibleRegions(uint64_t a1, __n128 **a2, uint64_t **a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = (char *)v6 - (char *)*a2;
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * (v7 >> 3);
  if (v7 < 1)
  {
LABEL_5:
    sub_1CC93DED4(v5, v6, v8, 0, 0);
  }
  else
  {
    uint64_t v9 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * (v7 >> 3);
    while (1)
    {
      uint64_t v11 = (__n128 *)operator new(120 * v10, v9);
      if (v11) {
        break;
      }
      BOOL v12 = v10 > 1;
      v10 >>= 1;
      if (!v12) {
        goto LABEL_5;
      }
    }
    uint64_t v13 = v11;
    sub_1CC93DED4(v5, v6, v8, v11, v10);
    operator delete(v13);
  }
  uint64_t v14 = (uint64_t)*a2;
  if ((*a2)->n128_u32[1] != 2
    || *(unsigned char *)(*(void *)(*(void *)(v14 + 8) + 16) + 16) != 84
    || *(unsigned char *)(*(void *)(*(void *)(v14 + 16) + 16) + 16) != 30)
  {
    uint64_t v15 = a2[1];
    if ((__n128 *)v14 != v15)
    {
      unsigned int v16 = 0;
      do
      {
        unsigned int v18 = *(_DWORD *)v14 + *(_DWORD *)(v14 + 4) - 1;
        unsigned int v42 = *(_DWORD *)v14;
        unsigned int v17 = v42;
        if (v42 > v18)
        {
LABEL_15:
          uint64_t v19 = *(void *)(v14 + 8);
          uint64_t v20 = *(void *)(*(void *)(v14 + 16) + 8);
          if (v19 == v20)
          {
LABEL_19:
            uint64_t v22 = *(void *)(*(void *)(*(void *)(v19 + 16) + 40) + 56);
            uint64_t v23 = *(void *)(v22 + 112);
            if ((!v23 || (*(unsigned char *)(v23 + 17) & 8) == 0)
              && ((*(_DWORD *)(v22 + 32) & 0xF) != 3 || *(unsigned char *)a1)
              && (!v16 || v17 > v16))
            {
              while (v19 != v20)
              {
                if (!sub_1CC93DC54(*(void *)(*(void *)(v19 + 8) + 16), *(llvm::Instruction **)(v19 + 16))
                  || !sub_1CD6689A4((unsigned __int8 *)(a1 + 392), *(void *)(v19 + 16)))
                {
                  goto LABEL_25;
                }
                uint64_t v19 = *(void *)(v19 + 8);
              }
              *(void *)(a1 + 280) += 264;
              uint64_t v24 = *(void *)(a1 + 200);
              if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) - v24 + 264 > *(void *)(a1 + 208) - v24)
              {
                unsigned int v37 = *(_DWORD *)(a1 + 224) >> 7;
                if (v37 >= 0x1E) {
                  LOBYTE(v37) = 30;
                }
                uint64_t v38 = 4096 << v37;
                uint64_t v25 = (uint64_t)operator new(4096 << v37, (std::align_val_t)8uLL);
                unint64_t v39 = *(unsigned int *)(a1 + 224);
                if (v39 >= *(unsigned int *)(a1 + 228)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(a1 + 216) + 8 * v39) = v25;
                ++*(_DWORD *)(a1 + 224);
                *(void *)(a1 + 208) = v25 + v38;
              }
              else
              {
                uint64_t v25 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              *(void *)(a1 + 200) = v25 + 264;
              sub_1CD66A4A8(v25, v14, (uint64_t)a3);
              uint64_t v27 = a3[1];
              unint64_t v26 = (unint64_t)a3[2];
              if ((unint64_t)v27 >= v26)
              {
                int v30 = *a3;
                uint64_t v31 = v27 - *a3;
                unint64_t v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 61) {
                  abort();
                }
                uint64_t v33 = v26 - (void)v30;
                if (v33 >> 2 > v32) {
                  unint64_t v32 = v33 >> 2;
                }
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
                }
                unint64_t v40 = v32;
                if (v32)
                {
                  if (v32 >> 61) {
                    sub_1CB833614();
                  }
                  BOOL v34 = (char *)operator new(8 * v32);
                }
                else
                {
                  BOOL v34 = 0;
                }
                unsigned int v35 = (uint64_t *)&v34[8 * v31];
                uint64_t *v35 = v25;
                uint64_t v28 = v35 + 1;
                if (v27 == v30)
                {
                  char v29 = a3;
                }
                else
                {
                  char v29 = a3;
                  do
                  {
                    uint64_t v36 = *--v27;
                    *--unsigned int v35 = v36;
                  }
                  while (v27 != v30);
                  uint64_t v27 = *a3;
                }
                int *v29 = v35;
                v29[1] = v28;
                v29[2] = (uint64_t *)&v34[8 * v40];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *uint64_t v27 = v25;
                uint64_t v28 = v27 + 1;
                char v29 = a3;
              }
              v29[1] = v28;
              unsigned int v16 = v18;
            }
          }
          else
          {
            uint64_t v21 = *(void *)(v14 + 8);
            while ((*(_WORD *)(*(void *)(*(void *)(v21 + 16) + 40) + 18) & 0x7FFF) == 0)
            {
              uint64_t v21 = *(void *)(v21 + 8);
              if (v21 == v20) {
                goto LABEL_19;
              }
            }
          }
        }
        else
        {
          while ((int *)(*(void *)(a1 + 8) + 4 * *(unsigned int *)(a1 + 24)) == sub_1CD48C650((uint64_t *)(a1 + 8), &v42))
          {
            if (++v42 > v18) {
              goto LABEL_15;
            }
          }
        }
LABEL_25:
        v14 += 120;
      }
      while ((__n128 *)v14 != v15);
    }
  }
}

uint64_t sub_1CC938A30(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 180) < a3)
  {
    uint64_t v4 = *(void *)(a2 + 184);
    int v5 = *(_DWORD *)(a2 + 200);
    if (v5)
    {
      unsigned int v6 = (v5 - 1) & (37 * a3);
      int v7 = *(_DWORD *)(v4 + 40 * v6);
      if (v7 == a3) {
        goto LABEL_5;
      }
      int v16 = 1;
      while (v7 != -1)
      {
        unsigned int v17 = v6 + v16++;
        unsigned int v6 = v17 & (v5 - 1);
        int v7 = *(_DWORD *)(v4 + 40 * v6);
        if (v7 == a3) {
          goto LABEL_5;
        }
      }
    }
    unsigned int v6 = *(_DWORD *)(a2 + 200);
LABEL_5:
    a3 = **(_DWORD **)(v4 + 40 * v6 + 16);
  }
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(unsigned int *)(a1 + 112);
  if (v9)
  {
    LODWORD(v10) = (v9 - 1) & (37 * a3);
    uint64_t v11 = (int *)(v8 + 8 * v10);
    int v12 = *v11;
    if (a3 == *v11) {
      goto LABEL_8;
    }
    int v18 = 1;
    while (v12 != -1)
    {
      int v19 = v10 + v18++;
      uint64_t v10 = v19 & (v9 - 1);
      int v12 = *(_DWORD *)(v8 + 8 * v10);
      if (a3 == v12)
      {
        uint64_t v11 = (int *)(v8 + 8 * v10);
        goto LABEL_8;
      }
    }
  }
  uint64_t v11 = (int *)(v8 + 8 * v9);
LABEL_8:
  if ((int *)(v8 + 8 * v9) == v11) {
    int v13 = 0;
  }
  else {
    int v13 = v11[1];
  }
  int v20 = v13;
  uint64_t v14 = sub_1CD48A634((uint64_t *)(a1 + 48), &v20);
  if ((int *)(*(void *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)) == v14) {
    return 0;
  }
  else {
    return *((void *)v14 + 1);
  }
}

uint64_t llvm::IROutliner::findCostBenefit(uint64_t a1, void **a2, uint64_t ***a3)
{
  unint64_t BenefitFromAllRegions = llvm::IROutliner::findBenefitFromAllRegions(a1, (llvm::OutlinableRegion ***)a3);
  int64_t v6 = BenefitFromAllRegions;
  uint64_t v8 = v7;
  if (v7 == 1) {
    *((_DWORD *)a3 + 60) = 1;
  }
  uint64_t v9 = a3[29];
  BOOL v10 = __OFADD__(v9, BenefitFromAllRegions);
  int64_t v11 = (int64_t)v9 + BenefitFromAllRegions;
  if (v10) {
    int64_t v11 = (v11 >> 63) ^ 0x8000000000000000;
  }
  a3[29] = (uint64_t **)v11;
  unint64_t CostOutputReloads = llvm::IROutliner::findCostOutputReloads(a1, (uint64_t **)a3);
  if (v13 == 1) {
    *((_DWORD *)a3 + 64) = 1;
  }
  uint64_t v14 = a3[31];
  BOOL v10 = __OFADD__(v14, CostOutputReloads);
  int64_t v15 = (int64_t)v14 + CostOutputReloads;
  if (v10) {
    int64_t v15 = (v15 >> 63) ^ 0x8000000000000000;
  }
  a3[31] = (uint64_t **)v15;
  uint64_t v16 = a3[1] - *a3;
  uint64_t v17 = v6 / v16;
  unint64_t v18 = (char *)a3[4] - (char *)a3[3];
  int v19 = (void *)(*(uint64_t (**)(void, void))(a1 + 32))(*(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(*(void *)(***a3 + 8) + 16) + 40) + 56));
  if (v8 == 1) {
    *((_DWORD *)a3 + 64) = 1;
  }
  unint64_t v20 = v18 >> 3;
  uint64_t v21 = a3[31];
  BOOL v10 = __OFADD__(v21, v17);
  int64_t v22 = (int64_t)v21 + v17;
  if (v10) {
    int64_t v22 = (v22 >> 63) ^ 0x8000000000000000;
  }
  BOOL v10 = __OFADD__(v22, v20);
  uint64_t v23 = v22 + v20;
  if (v10) {
    uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v24 = ((v18 >> 2) * v16) & 0xFFFFFFFE;
  BOOL v10 = __OFADD__(v23, v24);
  uint64_t v25 = v23 + v24;
  if (v10) {
    uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
  }
  a3[31] = (uint64_t **)v25;
  unint64_t v26 = **a3;
  uint64_t v27 = *v26;
  v81[0] = 0;
  v81[1] = 0;
  int v82 = 0;
  sub_1CD4894A8(v27, (uint64_t)v81);
  int v80 = 0;
  v79[0] = 0;
  v79[1] = 0;
  uint64_t v28 = *(void *)(v27 + 8);
  uint64_t v29 = *(void *)(*(void *)(v27 + 16) + 8);
  if (v28 != v29)
  {
    unsigned int v30 = 0;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v28 + 16) + 16) == 30)
      {
        uint64_t v31 = *(unsigned int *)(v28 + 32);
        if (v31) {
          break;
        }
      }
LABEL_39:
      uint64_t v28 = *(void *)(v28 + 8);
      if (v28 == v29) {
        goto LABEL_42;
      }
    }
    unint64_t v32 = *(uint64_t **)(v28 + 24);
    uint64_t v33 = &v32[v31];
    while (1)
    {
      uint64_t v34 = *v32;
      uint64_t v77 = v34;
      unsigned int v35 = v34 >> 4;
      if (v82)
      {
        unsigned int v36 = (v82 - 1) & (v35 ^ (v34 >> 9));
        uint64_t v37 = *(void *)(v81[0] + 8 * v36);
        if (v34 == v37)
        {
LABEL_24:
          if (v36 != v82) {
            goto LABEL_28;
          }
        }
        else
        {
          int v42 = 1;
          while (v37 != -4096)
          {
            unsigned int v43 = v36 + v42++;
            unsigned int v36 = v43 & (v82 - 1);
            uint64_t v37 = *(void *)(v81[0] + 8 * v36);
            if (v34 == v37) {
              goto LABEL_24;
            }
          }
        }
      }
      if (!v80) {
        goto LABEL_34;
      }
      unsigned int v38 = (v80 - 1) & (v35 ^ (v34 >> 9));
      uint64_t v39 = *(void *)(v79[0] + 8 * v38);
      if (v34 != v39)
      {
        int v40 = 1;
        while (v39 != -4096)
        {
          unsigned int v41 = v38 + v40++;
          unsigned int v38 = v41 & (v80 - 1);
          uint64_t v39 = *(void *)(v79[0] + 8 * v38);
          if (v34 == v39) {
            goto LABEL_27;
          }
        }
LABEL_34:
        sub_1CBB23C3C(v79, &v77, (uint64_t)&v83);
        ++v30;
        goto LABEL_28;
      }
LABEL_27:
      if (v38 == v80) {
        goto LABEL_34;
      }
LABEL_28:
      if (++v32 == v33) {
        goto LABEL_39;
      }
    }
  }
  unsigned int v30 = 0;
LABEL_42:
  *((_DWORD *)a3 + 44) = v30;
  unsigned int v44 = *((_DWORD *)a3 + 32);
  uint64_t v45 = a3[15];
  uint64_t v46 = *((unsigned int *)a3 + 34);
  unint64_t v47 = &v45[2 * v46];
  uint64_t v73 = a3;
  unsigned int v74 = v30;
  if (v44)
  {
    if (v46)
    {
      uint64_t v48 = 16 * v46;
      int v49 = a3[15];
      while ((unint64_t)*v49 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v49 += 2;
        v48 -= 16;
        if (!v48) {
          goto LABEL_47;
        }
      }
    }
    else
    {
      int v49 = a3[15];
    }
  }
  else
  {
LABEL_47:
    int v49 = &v45[2 * v46];
  }
  int v50 = &v45[2 * v46];
  if (v49 == v50)
  {
    unint64_t v52 = 0;
    int v51 = 0;
    unint64_t v63 = v73;
  }
  else
  {
    int v51 = 0;
    unint64_t v52 = 0;
    do
    {
      int v53 = v49[1];
      if (v53)
      {
        uint64_t v54 = (unsigned int *)*v49;
        uint64_t v55 = 4 * (void)v53;
        do
        {
          unsigned int v56 = *v54++;
          sub_1CC938A30(*v26, v26[32], v56);
          uint64_t v57 = (*(uint64_t (**)(void))(*(void *)*v19 + 888))();
          uint64_t v77 = v74;
          LODWORD(v78) = 0;
          uint64_t v83 = v57;
          uint64_t v84 = v58;
          sub_1CB90C9D4((uint64_t)&v83, (uint64_t)&v77);
          if (v84 == 1) {
            int v51 = 1;
          }
          if (__OFADD__(v52, v83)) {
            unint64_t v52 = ((uint64_t)(v52 + v83) >> 63) ^ 0x8000000000000000;
          }
          else {
            v52 += v83;
          }
          v55 -= 4;
        }
        while (v55);
      }
      uint64_t v59 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(*(void *)*v19 + 856))(*v19, 2, 2, 0);
      uint64_t v77 = v74;
      LODWORD(v78) = 0;
      uint64_t v83 = v59;
      uint64_t v84 = v60;
      sub_1CB90C9D4((uint64_t)&v83, (uint64_t)&v77);
      if (v84 == 1) {
        int v51 = 1;
      }
      if (__OFADD__(v52, v83)) {
        unint64_t v52 = ((uint64_t)(v52 + v83) >> 63) ^ 0x8000000000000000;
      }
      else {
        v52 += v83;
      }
      int v61 = (unint64_t *)(v49 + 2);
      while (v61 != (unint64_t *)v47)
      {
        unint64_t v62 = *v61;
        v61 += 2;
        if (v62 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v49 = (uint64_t **)(v61 - 2);
          goto LABEL_69;
        }
      }
      int v49 = v47;
LABEL_69:
      ;
    }
    while (v49 != v50);
    unint64_t v63 = v73;
    unsigned int v44 = *((_DWORD *)v73 + 32);
  }
  if (v44 > 1)
  {
    uint64_t v64 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)*v19
                                                                                                 + 864))(*v19, 53, **a2 + 1960, **a2 + 1960, 42, 2, 0);
    uint64_t v66 = v65;
    uint64_t v77 = (*(uint64_t (**)(void))(*(void *)*v19 + 856))();
    uint64_t v78 = v67;
    uint64_t v68 = *((unsigned int *)v63 + 32);
    uint64_t v83 = v64;
    uint64_t v84 = v66;
    sub_1CB90C9D4((uint64_t)&v83, (uint64_t)&v77);
    uint64_t v75 = v68;
    int v76 = 0;
    sub_1CB90C9D4((uint64_t)&v83, (uint64_t)&v75);
    uint64_t v75 = v74;
    int v76 = 0;
    sub_1CB90C9D4((uint64_t)&v83, (uint64_t)&v75);
    if (__OFADD__(v52, v83)) {
      unint64_t v52 = ((uint64_t)(v52 + v83) >> 63) ^ 0x8000000000000000;
    }
    else {
      v52 += v83;
    }
    if (v84 == 1) {
      int v51 = 1;
    }
  }
  MEMORY[0x1D25D9CD0](v79[0], 8);
  uint64_t result = MEMORY[0x1D25D9CD0](v81[0], 8);
  if (v51 == 1) {
    *((_DWORD *)v63 + 64) = 1;
  }
  unsigned int v70 = v63[31];
  BOOL v10 = __OFADD__(v70, v52);
  int64_t v71 = (int64_t)v70 + v52;
  if (v10) {
    int64_t v71 = (v71 >> 63) ^ 0x8000000000000000;
  }
  v63[31] = (uint64_t **)v71;
  return result;
}

void llvm::IROutliner::extractSection(llvm::IROutliner *this, llvm::OutlinableRegion *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::Function **)*((void *)a2 + 29);
  llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)v38, v4[7]);
  CodeRegiouint64_t n = llvm::CodeExtractor::extractCodeRegion(*((void *)a2 + 24));
  *((void *)a2 + 26) = CodeRegion;
  if (CodeRegion)
  {
    int64_t v6 = *(llvm::BasicBlock **)(*(void *)(*(void *)(CodeRegion + 8) + 24) + 40);
    uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v6);
    *((void *)a2 + 28) = SinglePredecessor;
    if ((llvm::Function **)SinglePredecessor == v4)
    {
      llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v4);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    *((void *)a2 + 29) = v6;
    *((void *)a2 + 30) = v6;
    uint64_t v8 = *(void *)(*(void *)(*(void *)a2 + 8) + 152);
    uint64_t v9 = *((void *)v6 + 6);
    if (v9) {
      uint64_t v10 = v9 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    *((void *)this + 47) += 160;
    uint64_t v11 = *((void *)this + 37);
    if (((v11 + 7) & 0xFFFFFFFFFFFFFFF8) - v11 + 160 > *((void *)this + 38) - v11)
    {
      unsigned int v32 = *((_DWORD *)this + 80) >> 7;
      if (v32 >= 0x1E) {
        LOBYTE(v32) = 30;
      }
      uint64_t v33 = 4096 << v32;
      uint64_t v12 = (uint64_t)operator new(4096 << v32, (std::align_val_t)8uLL);
      unsigned int v34 = *((_DWORD *)this + 80);
      if (v34 >= *((_DWORD *)this + 81)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 39) + 8 * v34) = v12;
      ++*((_DWORD *)this + 80);
      *((void *)this + 38) = v12 + v33;
    }
    else
    {
      uint64_t v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 37) = v12 + 160;
    char v13 = sub_1CD6689A4((unsigned __int8 *)this + 392, v10);
    llvm::IRSimilarity::IRInstructionData::IRInstructionData(v12, v10, v13, v8);
    *((void *)a2 + 1) = v12;
    *((void *)this + 47) += 160;
    uint64_t v14 = *((void *)this + 37);
    if (((v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v14 + 160 > *((void *)this + 38) - v14)
    {
      unsigned int v35 = *((_DWORD *)this + 80) >> 7;
      if (v35 >= 0x1E) {
        LOBYTE(v35) = 30;
      }
      uint64_t v36 = 4096 << v35;
      uint64_t v15 = (uint64_t)operator new(4096 << v35, (std::align_val_t)8uLL);
      unsigned int v37 = *((_DWORD *)this + 80);
      if (v37 >= *((_DWORD *)this + 81)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 39) + 8 * v37) = v15;
      ++*((_DWORD *)this + 80);
      *((void *)this + 38) = v15 + v36;
    }
    else
    {
      uint64_t v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 37) = v15 + 160;
    char v16 = sub_1CD6689A4((unsigned __int8 *)this + 392, v10);
    llvm::IRSimilarity::IRInstructionData::IRInstructionData(v15, v10, v16, v8);
    *((void *)a2 + 2) = v15;
    uint64_t v17 = *(void *)a2;
    unint64_t v18 = (unint64_t *)*((void *)a2 + 1);
    int v19 = *(unint64_t **)(*(void *)a2 + 8);
    unint64_t v20 = *v19 & 0xFFFFFFFFFFFFFFF8;
    unint64_t *v18 = v20 | *v18 & 7;
    v18[1] = (unint64_t)v19;
    *(void *)(v20 + 8) = v18;
    *int v19 = *v19 & 7 | (unint64_t)v18;
    uint64_t v21 = *(uint64_t **)(*(void *)(v17 + 16) + 8);
    unint64_t v22 = *v21 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v15 = v22 | *(void *)v15 & 7;
    *(void *)(v15 + 8) = v21;
    *(void *)(v22 + 8) = v15;
    *uint64_t v21 = *v21 & 7 | v15;
    uint64_t v23 = (void *)(**(void **)(*(void *)(v17 + 16) + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v24 = *v19 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = *v23 & 0xFFFFFFFFFFFFFFF8;
    *uint64_t v23 = v24 | *v23 & 7;
    *(void *)(v24 + 8) = v23;
    *v19 &= 7uLL;
    *(void *)(v25 + 8) = 0;
    unint64_t v26 = (void *)((char *)v6 + 40);
    for (uint64_t i = (void *)*((void *)v6 + 6); i != v26; uint64_t i = (void *)i[1])
    {
      if (i) {
        uint64_t v28 = (uint64_t)(i - 3);
      }
      else {
        uint64_t v28 = 0;
      }
      int v29 = *(unsigned __int8 *)(v28 + 16);
      if (v29 == 84) {
        uint64_t v30 = v28;
      }
      else {
        uint64_t v30 = 0;
      }
      if (i && v29 == 84)
      {
        uint64_t v31 = *(void *)(v30 - 32);
        if (!v31 || *(unsigned char *)(v31 + 16) || *(void *)(v31 + 24) != *(void *)(v30 + 72)) {
          uint64_t v31 = 0;
        }
        if (*((void *)a2 + 26) == v31) {
          *((void *)a2 + 25) = v30;
        }
      }
      else if (i && v29 == 60)
      {
        llvm::IROutliner::updateOutputMapping((uint64_t)this, (uint64_t)a2, 0, 0, v28);
      }
    }
  }
  llvm::OutlinableRegion::reattachCandidate(a2);
}

uint64_t llvm::IROutliner::doOutline(llvm::IROutliner *this, llvm::Module *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 392) = byte_1EBD03208 ^ 1;
  *((unsigned char *)this + 393) = byte_1EBD032C8 ^ 1;
  *((unsigned char *)this + 394) = byte_1EBD03448 ^ 1;
  uint64_t v2 = (*((uint64_t (**)(void))this + 9))(*((void *)this + 10));
  unsigned int v42 = 0;
  int v5 = *(char **)(v2 + 296);
  uint64_t v4 = *(char **)(v2 + 304);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
  if (v6 >= 2)
  {
    if (v4 - v5 < 1)
    {
LABEL_6:
      sub_1CC93E978(v5, v4, 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3), 0, 0, v3);
    }
    else
    {
      unsigned int v7 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
      while (1)
      {
        uint64_t v9 = (__n128 *)operator new(24 * v8, v7);
        if (v9) {
          break;
        }
        BOOL v10 = v8 > 1;
        v8 >>= 1;
        if (!v10) {
          goto LABEL_6;
        }
      }
      uint64_t v11 = v9;
      sub_1CC93E978(v5, v4, 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3), v9, v8, v3);
      operator delete(v11);
    }
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 304) - *(void *)(v2 + 296)) >> 3);
  }
  sub_1CD66AC74(&v40, v6);
  v38[0] = 0;
  v38[1] = 0;
  int v39 = 0;
  char v13 = *(__n128 ***)(v2 + 296);
  uint64_t v12 = *(__n128 ***)(v2 + 304);
  if (v13 != v12)
  {
    unsigned int v14 = 0;
    uint64_t v31 = *(__n128 ***)(v2 + 304);
    do
    {
      uint64_t v15 = v40;
      char v16 = (uint64_t **)((char *)v40 + 272 * v14);
      llvm::IROutliner::pruneIncompatibleRegions((uint64_t)this, v13, v16);
      if ((unint64_t)((char *)v16[1] - (char *)*v16) < 0x10) {
        goto LABEL_31;
      }
      sub_1CBB2A024(v38);
      OutlinableGroup::findSameConstants((uint64_t ***)v16, (uint64_t)v38);
      if (v15[272 * v14 + 64]) {
        goto LABEL_31;
      }
      unint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      if (*v16 == v17)
      {
        if (!v18) {
          goto LABEL_30;
        }
      }
      else
      {
        do
        {
          int v19 = (llvm::OutlinableRegion *)*v18;
          llvm::OutlinableRegion::splitCandidate((llvm::OutlinableRegion *)*v18);
          if (*((unsigned char *)v19 + 216))
          {
            unsigned int v44 = &v46;
            uint64_t v45 = 0x600000000;
            memset(&v43, 0, 20);
            sub_1CD668D28(*(void *)(*(void *)v19 + 8), *(void *)(*(void *)(*(void *)v19 + 16) + 8), (uint64_t)&v43, (uint64_t)&v44);
            *((void *)this + 23) += 240;
            uint64_t v20 = *((void *)this + 13);
            if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8) - v20 + 240 > *((void *)this + 14) - v20)
            {
              unsigned int v23 = *((_DWORD *)this + 32) >> 7;
              if (v23 >= 0x1E) {
                LOBYTE(v23) = 30;
              }
              uint64_t v30 = 4096 << v23;
              uint64_t v21 = (uint64_t)operator new(4096 << v23, (std::align_val_t)8uLL);
              unint64_t v24 = *((unsigned int *)this + 32);
              if (v24 >= *((unsigned int *)this + 33)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*((void *)this + 15) + 8 * v24) = v21;
              ++*((_DWORD *)this + 32);
              *((void *)this + 14) = v21 + v30;
            }
            else
            {
              uint64_t v21 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *((void *)this + 13) = v21 + 240;
            char v37 = 8;
            strcpy((char *)&v36, "outlined");
            llvm::CodeExtractor::CodeExtractor(v21, (char **)v44, v45, 0, 0, 0, 0, 0, 0, 0, 0, &v36);
            *((void *)v19 + 24) = v21;
            llvm::IROutliner::findAddInputsOutputs((uint64_t)this, v22, (uint64_t *)v19, (uint64_t)v38);
            if (!*((unsigned char *)v19 + 217)) {
              *(void *)operator new(8uLL) = v19;
            }
            llvm::OutlinableRegion::reattachCandidate(v19);
          }
          ++v18;
        }
        while (v18 != v17);
        unint64_t v18 = *v16;
        if (!*v16) {
          goto LABEL_30;
        }
      }
      v16[1] = v18;
      operator delete(v18);
LABEL_30:
      int *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      uint64_t v12 = v31;
LABEL_31:
      ++v14;
      v13 += 3;
    }
    while (v13 != v12);
  }
  sub_1CD668E1C((uint64_t)this + 104);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v29 = v42;
  MEMORY[0x1D25D9CD0](v38[0], 4);
  unint64_t v25 = v40;
  if (v40)
  {
    uint64_t v26 = (uint64_t)v41;
    uint64_t v27 = v40;
    if (v41 != v40)
    {
      do
        uint64_t v26 = sub_1CD66AD8C(v26 - 272);
      while ((void *)v26 != v25);
      uint64_t v27 = v40;
    }
    unsigned int v41 = v25;
    operator delete(v27);
  }
  return v29;
}

BOOL llvm::IROutliner::run(llvm::IROutliner *this, llvm::Module *a2)
{
  *((unsigned char *)this + 1) = byte_1EBCE0188 ^ 1;
  *(unsigned char *)this = byte_1EBCE00C8;
  return llvm::IROutliner::doOutline(this, a2) != 0;
}

void llvm::initializeIROutlinerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE0040, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC93ACF0;
    v4[1] = &v2;
    __n128 v3 = v4;
    std::__call_once(&qword_1EBCE0040, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC93ACF0(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeIRSimilarityIdentifierWrapperPassPass(a1, a2);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v3);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CC93ADA0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE0038;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2628878;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE0040, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC93ACF0;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCE0040, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

char *sub_1CC93AE50(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v7 = a5;
    BOOL v10 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v11 = 0;
      unsigned int v12 = *(_DWORD *)a2;
      uint64_t v13 = -a4;
      while (1)
      {
        unsigned int v14 = *(_DWORD *)&v10[v11];
        if (v12 < v14) {
          break;
        }
        v11 += 4;
        BOOL v75 = __CFADD__(v13++, 1);
        if (v75) {
          return result;
        }
      }
      uint64_t v15 = &v10[v11];
      if (-v13 >= v7)
      {
        if (v13 == -1)
        {
          *(_DWORD *)&v10[v11] = v12;
          *(_DWORD *)a2 = v14;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v25 = -v13;
        }
        else {
          uint64_t v25 = 1 - v13;
        }
        uint64_t v26 = v25 >> 1;
        uint64_t v20 = &v10[4 * (v25 >> 1) + v11];
        unint64_t v18 = a3;
        if (a3 != a2)
        {
          unint64_t v27 = (a3 - a2) >> 2;
          unint64_t v18 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v18[4 * (v27 >> 1)];
            unsigned int v31 = *(_DWORD *)v29;
            uint64_t v30 = v29 + 4;
            v27 += ~(v27 >> 1);
            if (v31 < *(_DWORD *)v20) {
              unint64_t v18 = v30;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v17 = (v18 - a2) >> 2;
      }
      else
      {
        if (v7 >= 0) {
          uint64_t v16 = v7;
        }
        else {
          uint64_t v16 = v7 + 1;
        }
        uint64_t v17 = v16 >> 1;
        unint64_t v18 = &a2[4 * (v16 >> 1)];
        if (v15 == a2)
        {
          uint64_t v20 = a2;
        }
        else
        {
          unint64_t v19 = (a2 - v10 - v11) >> 2;
          uint64_t v20 = &v10[v11];
          do
          {
            unint64_t v21 = v19 >> 1;
            uint64_t v22 = &v20[4 * (v19 >> 1)];
            unsigned int v24 = *(_DWORD *)v22;
            unsigned int v23 = v22 + 4;
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)v18 < v24) {
              unint64_t v19 = v21;
            }
            else {
              uint64_t v20 = v23;
            }
          }
          while (v19);
        }
        uint64_t v26 = (v20 - v10 - v11) >> 2;
      }
      unsigned int v32 = v18;
      if (v20 != a2)
      {
        unsigned int v32 = v20;
        if (a2 != v18)
        {
          if (v20 + 4 == a2)
          {
            int v81 = *(_DWORD *)v20;
            int64_t v38 = v18 - a2;
            uint64_t v85 = a6;
            uint64_t v87 = a7;
            int v39 = a3;
            uint64_t v83 = v17;
            uint64_t v40 = v26;
            memmove(v20, a2, v18 - a2);
            uint64_t v26 = v40;
            uint64_t v17 = v83;
            a6 = v85;
            uint64_t v15 = &v10[v11];
            a7 = v87;
            a3 = v39;
            unsigned int v32 = &v20[v38];
            *(_DWORD *)unsigned int v32 = v81;
          }
          else if (a2 + 4 == v18)
          {
            int v41 = *((_DWORD *)v18 - 1);
            unsigned int v32 = v20 + 4;
            if (v18 - 4 != v20)
            {
              unint64_t v86 = a6;
              uint64_t v88 = a7;
              unsigned int v42 = a3;
              uint64_t v84 = v17;
              uint64_t v43 = v26;
              int v82 = *((_DWORD *)v18 - 1);
              memmove(v20 + 4, v20, v18 - 4 - v20);
              int v41 = v82;
              uint64_t v26 = v43;
              uint64_t v17 = v84;
              a6 = v86;
              uint64_t v15 = &v10[v11];
              a7 = v88;
              a3 = v42;
            }
            *(_DWORD *)uint64_t v20 = v41;
          }
          else
          {
            uint64_t v33 = (a2 - v20) >> 2;
            if (v33 == (v18 - a2) >> 2)
            {
              if (a2 != v18 && v20 != a2)
              {
                uint64_t v34 = v20 + 4;
                uint64_t v35 = a2 + 4;
                do
                {
                  int v36 = *((_DWORD *)v34 - 1);
                  *((_DWORD *)v34 - 1) = *((_DWORD *)v35 - 1);
                  *((_DWORD *)v35 - 1) = v36;
                  if (v34 == a2) {
                    break;
                  }
                  v34 += 4;
                  BOOL v37 = v35 == v18;
                  v35 += 4;
                }
                while (!v37);
              }
              unsigned int v32 = a2;
            }
            else
            {
              uint64_t v44 = (v18 - a2) >> 2;
              uint64_t v45 = (a2 - v20) >> 2;
              do
              {
                uint64_t v46 = v45;
                uint64_t v45 = v44;
                uint64_t v44 = v46 % v44;
              }
              while (v44);
              if (v45)
              {
                uint64_t v47 = &v20[4 * v45];
                do
                {
                  int v49 = *((_DWORD *)v47 - 1);
                  v47 -= 4;
                  int v48 = v49;
                  int v50 = &v47[4 * v33];
                  int v51 = v47;
                  do
                  {
                    unint64_t v52 = v50;
                    *(_DWORD *)int v51 = *(_DWORD *)v50;
                    int v53 = &v50[4 * v33];
                    BOOL v54 = __OFSUB__(v33, (v18 - v50) >> 2);
                    uint64_t v56 = v33 - ((v18 - v50) >> 2);
                    char v55 = (v56 < 0) ^ v54;
                    int v50 = &v20[4 * v56];
                    if (v55) {
                      int v50 = v53;
                    }
                    int v51 = v52;
                  }
                  while (v50 != v47);
                  *(_DWORD *)unint64_t v52 = v48;
                }
                while (v47 != v20);
              }
              unsigned int v32 = &v20[4 * ((v18 - a2) >> 2)];
            }
          }
        }
      }
      a4 = -(v26 + v13);
      uint64_t v57 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v13)
      {
        uint64_t v63 = v26;
        uint64_t v64 = -(v26 + v13);
        uint64_t v65 = v17;
        uint64_t v66 = v7 - v17;
        uint64_t v67 = a6;
        uint64_t v68 = a7;
        uint64_t v69 = v15;
        uint64_t result = (char *)sub_1CC93AE50(v32, v18, a3, v64, v66);
        unint64_t v62 = v69;
        a7 = v68;
        a6 = v67;
        unint64_t v18 = v20;
        uint64_t v57 = v65;
        a4 = v63;
        a3 = v32;
      }
      else
      {
        uint64_t v58 = &v10[v11];
        uint64_t v59 = a6;
        uint64_t v60 = a7;
        int v61 = a3;
        uint64_t result = (char *)sub_1CC93AE50(v58, v20, v32, v26, v17);
        a7 = v60;
        a3 = v61;
        a6 = v59;
        unint64_t v62 = v32;
      }
      uint64_t v7 = v57;
      BOOL v10 = v62;
      a2 = v18;
      if (!v57) {
        return result;
      }
    }
    if (a4 <= v7)
    {
      if (v10 != a2)
      {
        unint64_t v76 = 0;
        do
        {
          a6[v76 / 4] = *(_DWORD *)&v10[v76];
          v76 += 4;
        }
        while (&v10[v76] != a2);
        if (v76)
        {
          uint64_t v77 = a6;
          while (a2 != a3)
          {
            unsigned int v78 = *(_DWORD *)a2;
            BOOL v79 = *(_DWORD *)a2 >= *v77;
            if (*(_DWORD *)a2 >= *v77) {
              unsigned int v78 = *v77;
            }
            a2 += 4 * (*(_DWORD *)a2 < *v77);
            v77 += v79;
            *(_DWORD *)BOOL v10 = v78;
            v10 += 4;
            if (&a6[v76 / 4] == v77) {
              return result;
            }
          }
          return (char *)memmove(v10, v77, (char *)a6 - (char *)v77 + v76);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v70 = 0;
      do
      {
        a6[v70] = *(_DWORD *)&a2[v70 * 4];
        ++v70;
      }
      while (&a2[v70 * 4] != a3);
      if (v70 * 4)
      {
        int64_t v71 = &a6[v70];
        uint64_t v72 = a3 - 4;
        while (a2 != v10)
        {
          unsigned int v73 = *(v71 - 1);
          unsigned int v74 = *((_DWORD *)a2 - 1);
          BOOL v75 = v73 >= v74;
          if (v73 <= v74) {
            unsigned int v73 = *((_DWORD *)a2 - 1);
          }
          if (v75) {
            --v71;
          }
          else {
            a2 -= 4;
          }
          *(_DWORD *)uint64_t v72 = v73;
          v72 -= 4;
          if (v71 == a6) {
            return result;
          }
        }
        if (v71 != a6)
        {
          uint64_t v80 = 0;
          do
          {
            *(_DWORD *)&v72[v80 * 4] = v71[v80 - 1];
            --v80;
          }
          while (&v71[v80] != a6);
        }
      }
    }
  }
  return result;
}

unsigned int *sub_1CC93B370(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return result;
      }
      unsigned int v12 = *a2;
      while (1)
      {
        unsigned int v13 = *v11;
        if (v12 < *v11) {
          break;
        }
        ++v11;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *uint64_t v11 = v12;
          *a2 = v13;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v24 = a4;
        }
        else {
          uint64_t v24 = a4 + 1;
        }
        uint64_t v23 = v24 >> 1;
        uint64_t v17 = &v11[v24 >> 1];
        uint64_t v16 = a3;
        if (a3 != a2)
        {
          unint64_t v25 = a3 - a2;
          uint64_t v16 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            unint64_t v27 = &v16[v25 >> 1];
            unsigned int v29 = *v27;
            unint64_t v28 = v27 + 1;
            v25 += ~(v25 >> 1);
            if (v29 < *v17) {
              uint64_t v16 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v15 = v16 - a2;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v14 = v8;
        }
        else {
          uint64_t v14 = v8 + 1;
        }
        uint64_t v15 = v14 >> 1;
        uint64_t v16 = &a2[v14 >> 1];
        uint64_t v17 = a2;
        if (v11 != a2)
        {
          unint64_t v18 = a2 - v11;
          uint64_t v17 = v11;
          do
          {
            unint64_t v19 = v18 >> 1;
            uint64_t v20 = &v17[v18 >> 1];
            unsigned int v22 = *v20;
            unint64_t v21 = v20 + 1;
            v18 += ~(v18 >> 1);
            if (*v16 < v22) {
              unint64_t v18 = v19;
            }
            else {
              uint64_t v17 = v21;
            }
          }
          while (v18);
        }
        uint64_t v23 = v17 - v11;
      }
      uint64_t v30 = v16;
      if (v17 != a2)
      {
        uint64_t v30 = v17;
        if (a2 != v16)
        {
          if (v17 + 1 == a2)
          {
            unsigned int v68 = *v17;
            int64_t v37 = (char *)v16 - (char *)a2;
            uint64_t v70 = a3;
            uint64_t v72 = a6;
            memmove(v17, a2, (char *)v16 - (char *)a2);
            a3 = v70;
            a6 = v72;
            uint64_t v30 = (unsigned int *)((char *)v17 + v37);
            unsigned int *v30 = v68;
          }
          else if (a2 + 1 == v16)
          {
            unsigned int v38 = *(v16 - 1);
            uint64_t v30 = v17 + 1;
            if (v16 - 1 != v17)
            {
              int64_t v71 = a3;
              unsigned int v73 = a6;
              unsigned int v69 = *(v16 - 1);
              memmove(v17 + 1, v17, (char *)(v16 - 1) - (char *)v17);
              unsigned int v38 = v69;
              a3 = v71;
              a6 = v73;
            }
            *uint64_t v17 = v38;
          }
          else
          {
            uint64_t v31 = a2 - v17;
            if (v31 == v16 - a2)
            {
              uint64_t v32 = 0;
              do
              {
                unsigned int v33 = v17[v32];
                v17[v32] = a2[v32];
                uint64_t v34 = (uint64_t)&v17[v32 + 1];
                a2[v32] = v33;
                uint64_t v35 = (uint64_t)&a2[++v32];
              }
              while ((unsigned int *)v34 != a2 && v35 != (void)v16);
              uint64_t v30 = a2;
            }
            else
            {
              uint64_t v39 = v16 - a2;
              uint64_t v40 = a2 - v17;
              do
              {
                uint64_t v41 = v40;
                uint64_t v40 = v39;
                uint64_t v39 = v41 % v39;
              }
              while (v39);
              if (v40)
              {
                unsigned int v42 = &v17[v40];
                do
                {
                  unsigned int v44 = *--v42;
                  unsigned int v43 = v44;
                  uint64_t v45 = &v42[v31];
                  uint64_t v46 = v42;
                  do
                  {
                    uint64_t v47 = v46;
                    uint64_t v46 = v45;
                    unsigned int *v47 = *v45;
                    BOOL v48 = __OFSUB__(v31, v16 - v45);
                    uint64_t v50 = v31 - (v16 - v45);
                    char v49 = (v50 < 0) ^ v48;
                    uint64_t v45 = &v17[v50];
                    if (v49) {
                      uint64_t v45 = &v46[v31];
                    }
                  }
                  while (v45 != v42);
                  *uint64_t v46 = v43;
                }
                while (v42 != v17);
              }
              uint64_t v30 = &v17[v16 - a2];
            }
          }
        }
      }
      a4 -= v23;
      v8 -= v15;
      if (v23 + v15 >= a4 + v8)
      {
        uint64_t v55 = v8;
        uint64_t v56 = a6;
        uint64_t result = (unsigned int *)sub_1CC93B370(v30, v16, a3, a4, v55, a6, a7);
        a6 = v56;
        uint64_t v16 = v17;
        uint64_t v8 = v15;
        a4 = v23;
        a3 = v30;
      }
      else
      {
        int v51 = v11;
        unint64_t v52 = v17;
        int v53 = a6;
        BOOL v54 = a3;
        uint64_t result = (unsigned int *)sub_1CC93B370(v51, v52, v30, v23, v15, a6, a7);
        a3 = v54;
        a6 = v53;
        uint64_t v11 = v30;
      }
      a2 = v16;
      if (!v8) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        uint64_t v63 = 0;
        do
        {
          a6[v63] = v11[v63];
          ++v63;
        }
        while (&v11[v63] != a2);
        if (v63 * 4)
        {
          uint64_t v64 = a6;
          while (a2 != a3)
          {
            unsigned int v65 = *a2;
            BOOL v66 = *a2 < *v64;
            if (*a2 >= *v64) {
              unsigned int v65 = *v64;
            }
            v64 += *a2 >= *v64;
            a2 += v66;
            *v11++ = v65;
            if (&a6[v63] == v64) {
              return result;
            }
          }
          return (unsigned int *)memmove(v11, v64, (char *)a6 - (char *)v64 + v63 * 4);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v57 = 0;
      do
      {
        a6[v57] = a2[v57];
        ++v57;
      }
      while (&a2[v57] != a3);
      if (v57 * 4)
      {
        uint64_t v58 = &a6[v57];
        uint64_t v59 = a3 - 1;
        while (a2 != v11)
        {
          unsigned int v60 = *(v58 - 1);
          unsigned int v61 = *(a2 - 1);
          BOOL v62 = v60 >= v61;
          if (v60 <= v61) {
            unsigned int v60 = *(a2 - 1);
          }
          if (v62) {
            --v58;
          }
          else {
            --a2;
          }
          *v59-- = v60;
          if (v58 == a6) {
            return result;
          }
        }
        if (v58 != a6)
        {
          uint64_t v67 = 0;
          do
          {
            v59[v67] = v58[v67 - 1];
            --v67;
          }
          while (&v58[v67] != a6);
        }
      }
    }
  }
  return result;
}

llvm::Value *sub_1CC93B7F0(llvm::Value *a1, uint64_t **a2, uint64_t **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, const char **a8, uint64_t a9)
{
  int v17 = 0;
  if (a7)
  {
    uint64_t v26 = 48 * a7;
    unint64_t v27 = (void *)(a6 + 32);
    do
    {
      v17 += (*v27 - *(v27 - 1)) >> 3;
      v27 += 6;
      v26 -= 48;
    }
    while (v26);
  }
  *(void *)a1 = *a2[2];
  *((void *)a1 + 1) = 0;
  int v18 = *((_DWORD *)a1 + 5) & 0xC0000000 | (a5 + v17 + 1) & 0x7FFFFFF;
  *((_DWORD *)a1 + 4) = 84;
  *((_DWORD *)a1 + 5) = v18;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  unint64_t v19 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a9)
  {
    uint64_t v21 = *(void *)(a9 + 40);
    unsigned int v22 = (uint64_t *)(a9 + 24);
    *((void *)a1 + 5) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v24 = *(void *)(v21 + 56);
      if (v24)
      {
        unint64_t v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
        if (v25) {
          llvm::ValueSymbolTable::reinsertValue(v25, a1);
        }
      }
    }
    uint64_t v23 = *v22;
    *((void *)a1 + 3) = *v22;
    *((void *)a1 + 4) = v22;
    *(void *)(v23 + 8) = v19;
    *unsigned int v22 = (uint64_t)v19;
  }
  *((void *)a1 + 8) = 0;
  llvm::CallInst::init((uint64_t ***)a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

unint64_t sub_1CC93B940(unint64_t result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 < 2) {
    return result;
  }
  unint64_t v6 = (uint64_t *)result;
  if (a3 == 2)
  {
    uint64_t v7 = *((void *)a2 - 1);
    uint64_t v8 = *(void *)result;
    if (*(unsigned char *)(v7 + 16) == 16) {
      uint64_t v9 = *((void *)a2 - 1);
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(unsigned char *)(v8 + 16) == 16) {
      uint64_t v10 = *(void *)result;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (unint64_t *)(v9 + 24);
    uint64_t v12 = *(unsigned int *)(v9 + 32);
    if (v12 >= 0x41)
    {
      int v13 = 0;
      int64_t v14 = (unint64_t)(v12 + 63) >> 6;
      do
      {
        BOOL v15 = v14-- < 1;
        if (v15) {
          break;
        }
        unint64_t v16 = *(void *)(*v11 + 8 * v14);
        v13 += __clz(v16);
      }
      while (!v16);
      int v17 = v12 | 0xFFFFFFC0;
      if ((v12 & 0x3F) == 0) {
        int v17 = 0;
      }
      if ((v12 - v13 - v17) > 0x40)
      {
        unint64_t v18 = -1;
        goto LABEL_86;
      }
      uint64_t v11 = (unint64_t *)*v11;
    }
    unint64_t v18 = *v11;
LABEL_86:
    BOOL v62 = (unint64_t *)(v10 + 24);
    uint64_t v63 = *(unsigned int *)(v10 + 32);
    if (v63 >= 0x41)
    {
      int v64 = 0;
      int64_t v65 = (unint64_t)(v63 + 63) >> 6;
      do
      {
        BOOL v15 = v65-- < 1;
        if (v15) {
          break;
        }
        unint64_t v66 = *(void *)(*v62 + 8 * v65);
        v64 += __clz(v66);
      }
      while (!v66);
      int v67 = v63 | 0xFFFFFFC0;
      if ((v63 & 0x3F) == 0) {
        int v67 = 0;
      }
      if ((v63 - v64 - v67) > 0x40)
      {
        unint64_t v68 = -1;
        goto LABEL_134;
      }
      BOOL v62 = (unint64_t *)*v62;
    }
    unint64_t v68 = *v62;
LABEL_134:
    if (v18 < v68)
    {
      *(void *)uint64_t result = v7;
      *((void *)a2 - 1) = v8;
    }
    return result;
  }
  if ((uint64_t)a3 > 128)
  {
    uint64_t v58 = (char *)a4;
    unint64_t v59 = a3 >> 1;
    unsigned int v60 = (uint64_t *)(result + 8 * (a3 >> 1));
    unint64_t v61 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1CC93B940(result, v60, v61, a4, a5);
      sub_1CC93B940(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v58, a5);
      return sub_1CC93C440((unint64_t)v6, (char *)&v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v58, a5);
    }
    sub_1CC93BEE0(result, v60, v61, a4);
    unsigned int v69 = (uint64_t *)&v58[8 * v59];
    uint64_t result = sub_1CC93BEE0((uint64_t)&v6[a3 >> 1], (uint64_t *)a2, a3 - (a3 >> 1), v69);
    uint64_t v70 = &v58[8 * a3];
    int64_t v71 = v69;
    while (1)
    {
      if (v71 == (uint64_t *)v70)
      {
        if (v58 != (char *)v69)
        {
          uint64_t v94 = 0;
          do
          {
            v6[v94] = *(void *)&v58[v94 * 8];
            ++v94;
          }
          while (&v58[v94 * 8] != (char *)v69);
        }
        return result;
      }
      uint64_t v72 = v71;
      uint64_t v73 = *v71;
      uint64_t v74 = *(void *)v58;
      if (*(unsigned char *)(v73 + 16) == 16) {
        uint64_t v75 = v73;
      }
      else {
        uint64_t v75 = 0;
      }
      if (*(unsigned char *)(v74 + 16) == 16) {
        uint64_t v76 = *(void *)v58;
      }
      else {
        uint64_t v76 = 0;
      }
      uint64_t v77 = (unint64_t *)(v75 + 24);
      uint64_t v78 = *(unsigned int *)(v75 + 32);
      if (v78 >= 0x41)
      {
        int v79 = 0;
        int64_t v80 = (unint64_t)(v78 + 63) >> 6;
        do
        {
          BOOL v15 = v80-- < 1;
          if (v15) {
            break;
          }
          unint64_t v81 = *(void *)(*v77 + 8 * v80);
          uint64_t result = __clz(v81);
          v79 += result;
        }
        while (!v81);
        int v82 = v78 | 0xFFFFFFC0;
        if ((v78 & 0x3F) == 0) {
          int v82 = 0;
        }
        if ((v78 - v79 - v82) > 0x40)
        {
          unint64_t v83 = -1;
          goto LABEL_112;
        }
        uint64_t v77 = (unint64_t *)*v77;
      }
      unint64_t v83 = *v77;
LABEL_112:
      uint64_t v84 = (unint64_t *)(v76 + 24);
      uint64_t v85 = *(unsigned int *)(v76 + 32);
      if (v85 < 0x41) {
        goto LABEL_121;
      }
      int v86 = 0;
      int64_t v87 = (unint64_t)(v85 + 63) >> 6;
      do
      {
        BOOL v15 = v87-- < 1;
        if (v15) {
          break;
        }
        unint64_t v88 = *(void *)(*v84 + 8 * v87);
        uint64_t result = __clz(v88);
        v86 += result;
      }
      while (!v88);
      int v89 = v85 | 0xFFFFFFC0;
      if ((v85 & 0x3F) == 0) {
        int v89 = 0;
      }
      if ((v85 - v86 - v89) <= 0x40)
      {
        uint64_t v84 = (unint64_t *)*v84;
LABEL_121:
        unint64_t v90 = *v84;
        goto LABEL_122;
      }
      unint64_t v90 = -1;
LABEL_122:
      if (v83 < v90) {
        uint64_t v74 = v73;
      }
      v58 += 8 * (v83 >= v90);
      int64_t v71 = &v72[v83 < v90];
      *v6++ = v74;
      if (v58 == (char *)v69)
      {
        if (v71 != (uint64_t *)v70)
        {
          uint64_t v91 = 0;
          if (v83 < v90) {
            char v92 = 1;
          }
          else {
            char v92 = 2;
          }
          unsigned int v93 = &v72[v92 & 1];
          do
          {
            v6[v91] = v93[v91];
            ++v91;
          }
          while (&v93[v91] != (uint64_t *)v70);
        }
        return result;
      }
    }
  }
  if ((char *)result == a2) {
    return result;
  }
  uint64_t v20 = (uint64_t *)(result + 8);
  if ((char *)(result + 8) == a2) {
    return result;
  }
  uint64_t v21 = (uint64_t *)result;
  do
  {
    unsigned int v22 = v20;
    uint64_t v23 = *v20;
    uint64_t v24 = *v21;
    if (*(unsigned char *)(v23 + 16) == 16) {
      uint64_t v25 = v23;
    }
    else {
      uint64_t v25 = 0;
    }
    if (*(unsigned char *)(v24 + 16) == 16) {
      uint64_t v26 = *v21;
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = (unint64_t *)(v25 + 24);
    uint64_t v28 = *(unsigned int *)(v25 + 32);
    unsigned int v29 = v27;
    if (v28 >= 0x41)
    {
      int v30 = 0;
      int64_t v31 = (unint64_t)(v28 + 63) >> 6;
      do
      {
        BOOL v15 = v31-- < 1;
        if (v15) {
          break;
        }
        unint64_t v32 = *(void *)(*v27 + 8 * v31);
        uint64_t result = __clz(v32);
        v30 += result;
      }
      while (!v32);
      int v33 = v28 | 0xFFFFFFC0;
      if ((v28 & 0x3F) == 0) {
        int v33 = 0;
      }
      if ((v28 - v30 - v33) > 0x40)
      {
        unint64_t v34 = -1;
        goto LABEL_37;
      }
      unsigned int v29 = (unint64_t *)*v27;
    }
    unint64_t v34 = *v29;
LABEL_37:
    uint64_t v35 = (unint64_t *)(v26 + 24);
    uint64_t v36 = *(unsigned int *)(v26 + 32);
    if (v36 < 0x41) {
      goto LABEL_47;
    }
    int v37 = 0;
    int64_t v38 = (unint64_t)(v36 + 63) >> 6;
    do
    {
      BOOL v15 = v38-- < 1;
      if (v15) {
        break;
      }
      unint64_t v39 = *(void *)(*v35 + 8 * v38);
      v37 += __clz(v39);
    }
    while (!v39);
    LODWORD(result) = v36 | 0xFFFFFFC0;
    if ((v36 & 0x3F) != 0) {
      uint64_t result = result;
    }
    else {
      uint64_t result = 0;
    }
    if ((v36 - v37 - result) <= 0x40)
    {
      uint64_t v35 = (unint64_t *)*v35;
LABEL_47:
      unint64_t v40 = *v35;
      goto LABEL_48;
    }
    unint64_t v40 = -1;
LABEL_48:
    if (v34 >= v40) {
      goto LABEL_78;
    }
    int v41 = v28 | 0xFFFFFFC0;
    if ((v28 & 0x3F) == 0) {
      int v41 = 0;
    }
    unsigned int v42 = v22;
    while (1)
    {
      *unsigned int v42 = v24;
      if (v21 == v6) {
        break;
      }
      unsigned int v43 = v21;
      uint64_t v44 = *--v21;
      uint64_t v24 = v44;
      if (*(unsigned char *)(v44 + 16) == 16) {
        uint64_t v45 = v24;
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v46 = v27;
      if (v28 >= 0x41)
      {
        int v47 = 0;
        int64_t v48 = (unint64_t)(v28 + 63) >> 6;
        do
        {
          BOOL v15 = v48-- < 1;
          if (v15) {
            break;
          }
          unint64_t v49 = *(void *)(*v27 + 8 * v48);
          v47 += __clz(v49);
        }
        while (!v49);
        if ((v28 - (v41 + v47)) > 0x40)
        {
          unint64_t v50 = -1;
          goto LABEL_64;
        }
        uint64_t v46 = (unint64_t *)*v27;
      }
      unint64_t v50 = *v46;
LABEL_64:
      int v51 = (unint64_t *)(v45 + 24);
      uint64_t v52 = *(unsigned int *)(v45 + 32);
      if (v52 < 0x41) {
        goto LABEL_73;
      }
      int v53 = 0;
      int64_t v54 = (unint64_t)(v52 + 63) >> 6;
      do
      {
        BOOL v15 = v54-- < 1;
        if (v15) {
          break;
        }
        unint64_t v55 = *(void *)(*v51 + 8 * v54);
        v53 += __clz(v55);
      }
      while (!v55);
      int v56 = v52 | 0xFFFFFFC0;
      if ((v52 & 0x3F) == 0) {
        int v56 = 0;
      }
      if ((v52 - v53 - v56) <= 0x40)
      {
        int v51 = (unint64_t *)*v51;
LABEL_73:
        uint64_t result = *v51;
        goto LABEL_74;
      }
      uint64_t result = -1;
LABEL_74:
      unsigned int v42 = v43;
      if (v50 >= result) {
        goto LABEL_77;
      }
    }
    unsigned int v43 = v6;
LABEL_77:
    uint64_t *v43 = v23;
LABEL_78:
    uint64_t v20 = v22 + 1;
    uint64_t v21 = v22;
  }
  while (v22 + 1 != (uint64_t *)a2);
  return result;
}

uint64_t sub_1CC93BEE0(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = a4;
  unint64_t v6 = (uint64_t *)result;
  if (a3 == 1)
  {
LABEL_140:
    uint64_t *v4 = *v6;
    return result;
  }
  if (a3 == 2)
  {
    uint64_t v8 = *(a2 - 1);
    if (*(unsigned char *)(v8 + 16) == 16) {
      uint64_t v9 = *(a2 - 1);
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(unsigned char *)(*(void *)result + 16) == 16) {
      uint64_t v10 = *(void *)result;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (unint64_t *)(v9 + 24);
    uint64_t v12 = *(unsigned int *)(v9 + 32);
    if (v12 >= 0x41)
    {
      int v13 = 0;
      int64_t v14 = (unint64_t)(v12 + 63) >> 6;
      do
      {
        BOOL v15 = v14-- < 1;
        if (v15) {
          break;
        }
        unint64_t v16 = *(void *)(*v11 + 8 * v14);
        v13 += __clz(v16);
      }
      while (!v16);
      int v17 = v12 | 0xFFFFFFC0;
      if ((v12 & 0x3F) == 0) {
        int v17 = 0;
      }
      if ((v12 - v13 - v17) > 0x40)
      {
        unint64_t v18 = -1;
        goto LABEL_122;
      }
      uint64_t v11 = (unint64_t *)*v11;
    }
    unint64_t v18 = *v11;
LABEL_122:
    unint64_t v83 = (unint64_t *)(v10 + 24);
    uint64_t v84 = *(unsigned int *)(v10 + 32);
    if (v84 >= 0x41)
    {
      int v85 = 0;
      int64_t v86 = (unint64_t)(v84 + 63) >> 6;
      do
      {
        BOOL v15 = v86-- < 1;
        if (v15) {
          break;
        }
        unint64_t v87 = *(void *)(*v83 + 8 * v86);
        v85 += __clz(v87);
      }
      while (!v87);
      int v88 = v84 | 0xFFFFFFC0;
      if ((v84 & 0x3F) == 0) {
        int v88 = 0;
      }
      if ((v84 - v85 - v88) > 0x40)
      {
        unint64_t v89 = -1;
LABEL_136:
        if (v18 >= v89) {
          uint64_t v8 = *(void *)result;
        }
        *a4 = v8;
        uint64_t v4 = a4 + 1;
        if (v18 >= v89) {
          unint64_t v6 = a2 - 1;
        }
        goto LABEL_140;
      }
      unint64_t v83 = (unint64_t *)*v83;
    }
    unint64_t v89 = *v83;
    goto LABEL_136;
  }
  if ((uint64_t)a3 > 8)
  {
    unsigned int v60 = (uint64_t *)(result + 8 * (a3 >> 1));
    sub_1CC93B940(result, v60, a3 >> 1, a4, a3 >> 1);
    uint64_t result = sub_1CC93B940(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
    unint64_t v61 = &v6[a3 >> 1];
    while (1)
    {
      if (v61 == a2)
      {
        if (v6 != v60)
        {
          uint64_t v90 = 0;
          do
          {
            v4[v90] = v6[v90];
            ++v90;
          }
          while (&v6[v90] != v60);
        }
        return result;
      }
      BOOL v62 = v61;
      uint64_t v63 = *v61;
      uint64_t v64 = *v6;
      if (*(unsigned char *)(v63 + 16) == 16) {
        uint64_t v65 = v63;
      }
      else {
        uint64_t v65 = 0;
      }
      if (*(unsigned char *)(v64 + 16) == 16) {
        uint64_t v66 = *v6;
      }
      else {
        uint64_t v66 = 0;
      }
      int v67 = (unint64_t *)(v65 + 24);
      uint64_t v68 = *(unsigned int *)(v65 + 32);
      if (v68 >= 0x41)
      {
        int v69 = 0;
        int64_t v70 = (unint64_t)(v68 + 63) >> 6;
        do
        {
          BOOL v15 = v70-- < 1;
          if (v15) {
            break;
          }
          unint64_t v71 = *(void *)(*v67 + 8 * v70);
          v69 += __clz(v71);
        }
        while (!v71);
        int v72 = v68 | 0xFFFFFFC0;
        if ((v68 & 0x3F) == 0) {
          int v72 = 0;
        }
        if ((v68 - v69 - v72) > 0x40)
        {
          unint64_t v73 = -1;
          goto LABEL_103;
        }
        int v67 = (unint64_t *)*v67;
      }
      unint64_t v73 = *v67;
LABEL_103:
      uint64_t v74 = (unint64_t *)(v66 + 24);
      uint64_t v75 = *(unsigned int *)(v66 + 32);
      if (v75 < 0x41) {
        goto LABEL_112;
      }
      int v76 = 0;
      int64_t v77 = (unint64_t)(v75 + 63) >> 6;
      do
      {
        BOOL v15 = v77-- < 1;
        if (v15) {
          break;
        }
        unint64_t v78 = *(void *)(*v74 + 8 * v77);
        v76 += __clz(v78);
      }
      while (!v78);
      int v79 = v75 | 0xFFFFFFC0;
      if ((v75 & 0x3F) == 0) {
        int v79 = 0;
      }
      if ((v75 - v76 - v79) <= 0x40)
      {
        uint64_t v74 = (unint64_t *)*v74;
LABEL_112:
        unint64_t v80 = *v74;
        goto LABEL_113;
      }
      unint64_t v80 = -1;
LABEL_113:
      if (v73 < v80) {
        uint64_t v64 = v63;
      }
      unint64_t v61 = &v62[v73 < v80];
      v6 += v73 >= v80;
      *v4++ = v64;
      if (v6 == v60)
      {
        if (v61 != a2)
        {
          uint64_t v81 = 0;
          int v82 = &v62[v73 < v80];
          do
          {
            v4[v81] = v82[v81];
            ++v81;
          }
          while (&v82[v81] != a2);
        }
        return result;
      }
    }
  }
  if ((uint64_t *)result == a2) {
    return result;
  }
  uint64_t v19 = result + 8;
  *a4 = *(void *)result;
  if ((uint64_t *)(result + 8) == a2) {
    return result;
  }
  uint64_t v20 = a4;
  uint64_t v21 = a4;
  do
  {
    uint64_t v23 = *v21++;
    uint64_t v22 = v23;
    if (*(unsigned char *)(*(void *)v19 + 16) == 16) {
      uint64_t v24 = *(void *)v19;
    }
    else {
      uint64_t v24 = 0;
    }
    if (*(unsigned char *)(v22 + 16) == 16) {
      uint64_t v25 = v22;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (unint64_t *)(v24 + 24);
    uint64_t v27 = *(unsigned int *)(v24 + 32);
    if (v27 >= 0x41)
    {
      int v28 = 0;
      int64_t v29 = (unint64_t)(v27 + 63) >> 6;
      do
      {
        BOOL v15 = v29-- < 1;
        if (v15) {
          break;
        }
        unint64_t v30 = *(void *)(*v26 + 8 * v29);
        uint64_t result = __clz(v30);
        v28 += result;
      }
      while (!v30);
      int v31 = v27 | 0xFFFFFFC0;
      if ((v27 & 0x3F) == 0) {
        int v31 = 0;
      }
      if ((v27 - v28 - v31) > 0x40)
      {
        unint64_t v32 = -1;
        goto LABEL_38;
      }
      uint64_t v26 = (unint64_t *)*v26;
    }
    unint64_t v32 = *v26;
LABEL_38:
    int v33 = (unint64_t *)(v25 + 24);
    uint64_t v34 = *(unsigned int *)(v25 + 32);
    if (v34 < 0x41) {
      goto LABEL_47;
    }
    int v35 = 0;
    int64_t v36 = (unint64_t)(v34 + 63) >> 6;
    do
    {
      BOOL v15 = v36-- < 1;
      if (v15) {
        break;
      }
      unint64_t v37 = *(void *)(*v33 + 8 * v36);
      uint64_t result = __clz(v37);
      v35 += result;
    }
    while (!v37);
    int v38 = v34 | 0xFFFFFFC0;
    if ((v34 & 0x3F) == 0) {
      int v38 = 0;
    }
    if ((v34 - v35 - v38) <= 0x40)
    {
      int v33 = (unint64_t *)*v33;
LABEL_47:
      unint64_t v39 = *v33;
      goto LABEL_48;
    }
    unint64_t v39 = -1;
LABEL_48:
    if (v32 >= v39)
    {
      *uint64_t v21 = *(void *)v19;
      goto LABEL_83;
    }
    v20[1] = v22;
    unint64_t v40 = a4;
    if (v20 == a4) {
      goto LABEL_82;
    }
    int v41 = v20;
    while (1)
    {
      uint64_t v43 = *--v41;
      uint64_t v42 = v43;
      if (*(unsigned char *)(*(void *)v19 + 16) == 16) {
        uint64_t v44 = *(void *)v19;
      }
      else {
        uint64_t v44 = 0;
      }
      if (*(unsigned char *)(v42 + 16) == 16) {
        uint64_t v45 = v42;
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v46 = (unint64_t *)(v44 + 24);
      uint64_t v47 = *(unsigned int *)(v44 + 32);
      if (v47 >= 0x41)
      {
        int v48 = 0;
        int64_t v49 = (unint64_t)(v47 + 63) >> 6;
        do
        {
          BOOL v15 = v49-- < 1;
          if (v15) {
            break;
          }
          unint64_t v50 = *(void *)(*v46 + 8 * v49);
          uint64_t result = __clz(v50);
          v48 += result;
        }
        while (!v50);
        int v51 = v47 | 0xFFFFFFC0;
        if ((v47 & 0x3F) == 0) {
          int v51 = 0;
        }
        if ((v47 - v48 - v51) > 0x40)
        {
          unint64_t v52 = -1;
          goto LABEL_67;
        }
        uint64_t v46 = (unint64_t *)*v46;
      }
      unint64_t v52 = *v46;
LABEL_67:
      int v53 = (unint64_t *)(v45 + 24);
      uint64_t v54 = *(unsigned int *)(v45 + 32);
      if (v54 >= 0x41)
      {
        int v55 = 0;
        int64_t v56 = (unint64_t)(v54 + 63) >> 6;
        do
        {
          BOOL v15 = v56-- < 1;
          if (v15) {
            break;
          }
          unint64_t v57 = *(void *)(*v53 + 8 * v56);
          uint64_t result = __clz(v57);
          v55 += result;
        }
        while (!v57);
        int v58 = v54 | 0xFFFFFFC0;
        if ((v54 & 0x3F) == 0) {
          int v58 = 0;
        }
        if ((v54 - v55 - v58) > 0x40)
        {
          unint64_t v59 = -1;
          goto LABEL_77;
        }
        int v53 = (unint64_t *)*v53;
      }
      unint64_t v59 = *v53;
LABEL_77:
      if (v52 >= v59) {
        break;
      }
      *uint64_t v20 = v42;
      uint64_t v20 = v41;
      if (v41 == a4)
      {
        unint64_t v40 = a4;
        goto LABEL_82;
      }
    }
    unint64_t v40 = v20;
LABEL_82:
    uint64_t *v40 = *(void *)v19;
LABEL_83:
    v19 += 8;
    uint64_t v20 = v21;
  }
  while ((uint64_t *)v19 != a2);
  return result;
}

unint64_t sub_1CC93C440(unint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v8 = a5;
  uint64_t v11 = (char *)result;
  while (a4 > a7 && v8 > a7)
  {
    if (!a4) {
      return result;
    }
    if (*(unsigned char *)(*(void *)a2 + 16) == 16) {
      uint64_t v12 = *(void *)a2;
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = (unint64_t *)(v12 + 24);
    uint64_t v14 = *(unsigned int *)(v12 + 32);
    int v15 = v14 | 0xFFFFFFC0;
    if ((v14 & 0x3F) == 0) {
      int v15 = 0;
    }
    while (1)
    {
      uint64_t v16 = *(void *)v11;
      if (*(unsigned char *)(*(void *)v11 + 16) == 16) {
        uint64_t v17 = *(void *)v11;
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = v13;
      if (v14 >= 0x41)
      {
        int v19 = 0;
        int64_t v20 = (unint64_t)(v14 + 63) >> 6;
        do
        {
          char v21 = v20-- < 1;
          if (v21) {
            break;
          }
          unint64_t v22 = *(void *)(*v13 + 8 * v20);
          uint64_t result = __clz(v22);
          v19 += result;
        }
        while (!v22);
        if ((v14 - (v15 + v19)) > 0x40)
        {
          unint64_t v23 = -1;
          goto LABEL_22;
        }
        unint64_t v18 = (unint64_t *)*v13;
      }
      unint64_t v23 = *v18;
LABEL_22:
      uint64_t v24 = (unint64_t *)(v17 + 24);
      uint64_t v25 = *(unsigned int *)(v17 + 32);
      if (v25 >= 0x41)
      {
        int v26 = 0;
        int64_t v27 = (unint64_t)(v25 + 63) >> 6;
        do
        {
          char v21 = v27-- < 1;
          if (v21) {
            break;
          }
          unint64_t v28 = *(void *)(*v24 + 8 * v27);
          v26 += __clz(v28);
        }
        while (!v28);
        LODWORD(result) = v25 | 0xFFFFFFC0;
        if ((v25 & 0x3F) != 0) {
          uint64_t result = result;
        }
        else {
          uint64_t result = 0;
        }
        if ((v25 - v26 - result) > 0x40)
        {
          unint64_t v29 = -1;
          goto LABEL_33;
        }
        uint64_t v24 = (unint64_t *)*v24;
      }
      unint64_t v29 = *v24;
LABEL_33:
      if (v23 < v29) {
        break;
      }
      v11 += 8;
      if (!--a4) {
        return result;
      }
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        *(void *)uint64_t v11 = *(void *)a2;
        *(void *)a2 = v16;
        return result;
      }
      if (a4 >= 0) {
        uint64_t v55 = a4;
      }
      else {
        uint64_t v55 = a4 + 1;
      }
      uint64_t v56 = v55 >> 1;
      int v38 = &v11[8 * (v55 >> 1)];
      unint64_t v32 = a3;
      if (a3 == a2)
      {
LABEL_109:
        uint64_t v31 = (v32 - a2) >> 3;
        goto LABEL_112;
      }
      unint64_t v57 = (a3 - a2) >> 3;
      if (*(unsigned char *)(*(void *)v38 + 16) == 16) {
        uint64_t v58 = *(void *)v38;
      }
      else {
        uint64_t v58 = 0;
      }
      unint64_t v59 = (unint64_t *)(v58 + 24);
      uint64_t v60 = *(unsigned int *)(v58 + 32);
      int v61 = v60 | 0xFFFFFFC0;
      if ((v60 & 0x3F) == 0) {
        int v61 = 0;
      }
      unint64_t v32 = a2;
      while (2)
      {
        unint64_t v62 = v57 >> 1;
        uint64_t v63 = &v32[8 * (v57 >> 1)];
        if (*(unsigned char *)(*(void *)v63 + 16) == 16) {
          uint64_t v64 = *(void *)v63;
        }
        else {
          uint64_t v64 = 0;
        }
        uint64_t v65 = (unint64_t *)(v64 + 24);
        uint64_t v66 = *(unsigned int *)(v64 + 32);
        if (v66 >= 0x41)
        {
          int v67 = 0;
          int64_t v68 = (unint64_t)(v66 + 63) >> 6;
          do
          {
            char v21 = v68-- < 1;
            if (v21) {
              break;
            }
            unint64_t v69 = *(void *)(*v65 + 8 * v68);
            v67 += __clz(v69);
          }
          while (!v69);
          int v70 = v66 | 0xFFFFFFC0;
          if ((v66 & 0x3F) == 0) {
            int v70 = 0;
          }
          if ((v66 - v67 - v70) > 0x40)
          {
            unint64_t v71 = -1;
            goto LABEL_97;
          }
          uint64_t v65 = (unint64_t *)*v65;
        }
        unint64_t v71 = *v65;
LABEL_97:
        int v72 = v59;
        if (v60 >= 0x41)
        {
          int v73 = 0;
          int64_t v74 = (unint64_t)(v60 + 63) >> 6;
          do
          {
            char v21 = v74-- < 1;
            if (v21) {
              break;
            }
            unint64_t v75 = *(void *)(*v59 + 8 * v74);
            v73 += __clz(v75);
          }
          while (!v75);
          if ((v60 - (v61 + v73)) > 0x40)
          {
            unint64_t v76 = -1;
            goto LABEL_105;
          }
          int v72 = (unint64_t *)*v59;
        }
        unint64_t v76 = *v72;
LABEL_105:
        int64_t v77 = v63 + 8;
        v57 += ~v62;
        if (v71 < v76) {
          unint64_t v32 = v77;
        }
        else {
          unint64_t v57 = v62;
        }
        if (!v57) {
          goto LABEL_109;
        }
        continue;
      }
    }
    if (v8 >= 0) {
      uint64_t v30 = v8;
    }
    else {
      uint64_t v30 = v8 + 1;
    }
    uint64_t v31 = v30 >> 1;
    unint64_t v32 = &a2[8 * (v30 >> 1)];
    if (a2 != v11)
    {
      unint64_t v33 = (a2 - v11) >> 3;
      if (*(unsigned char *)(*(void *)v32 + 16) == 16) {
        uint64_t v34 = *(void *)v32;
      }
      else {
        uint64_t v34 = 0;
      }
      int v35 = (unint64_t *)(v34 + 24);
      uint64_t v36 = *(unsigned int *)(v34 + 32);
      int v37 = v36 | 0xFFFFFFC0;
      if ((v36 & 0x3F) == 0) {
        int v37 = 0;
      }
      int v38 = v11;
      while (1)
      {
        unint64_t v39 = v33 >> 1;
        unint64_t v40 = &v38[8 * (v33 >> 1)];
        if (*(unsigned char *)(*(void *)v40 + 16) == 16) {
          uint64_t v41 = *(void *)v40;
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v42 = v35;
        if (v36 >= 0x41)
        {
          int v43 = 0;
          int64_t v44 = (unint64_t)(v36 + 63) >> 6;
          do
          {
            char v21 = v44-- < 1;
            if (v21) {
              break;
            }
            unint64_t v45 = *(void *)(*v35 + 8 * v44);
            v43 += __clz(v45);
          }
          while (!v45);
          if ((v36 - (v37 + v43)) > 0x40)
          {
            unint64_t v46 = -1;
            goto LABEL_58;
          }
          uint64_t v42 = (unint64_t *)*v35;
        }
        unint64_t v46 = *v42;
LABEL_58:
        uint64_t v47 = (unint64_t *)(v41 + 24);
        uint64_t v48 = *(unsigned int *)(v41 + 32);
        if (v48 < 0x41) {
          goto LABEL_67;
        }
        int v49 = 0;
        int64_t v50 = (unint64_t)(v48 + 63) >> 6;
        do
        {
          char v21 = v50-- < 1;
          if (v21) {
            break;
          }
          unint64_t v51 = *(void *)(*v47 + 8 * v50);
          v49 += __clz(v51);
        }
        while (!v51);
        int v52 = v48 | 0xFFFFFFC0;
        if ((v48 & 0x3F) == 0) {
          int v52 = 0;
        }
        if ((v48 - v49 - v52) <= 0x40)
        {
          uint64_t v47 = (unint64_t *)*v47;
LABEL_67:
          unint64_t v53 = *v47;
          goto LABEL_68;
        }
        unint64_t v53 = -1;
LABEL_68:
        uint64_t v54 = v40 + 8;
        v33 += ~v39;
        if (v46 < v53) {
          unint64_t v33 = v39;
        }
        else {
          int v38 = v54;
        }
        if (!v33) {
          goto LABEL_111;
        }
      }
    }
    int v38 = a2;
LABEL_111:
    uint64_t v56 = (v38 - v11) >> 3;
LABEL_112:
    unint64_t v78 = v32;
    if (v38 != a2)
    {
      unint64_t v78 = v38;
      if (a2 != v32)
      {
        if (v38 + 8 == a2)
        {
          uint64_t v137 = *(void *)v38;
          int64_t v84 = v32 - a2;
          memmove(v38, a2, v32 - a2);
          unint64_t v78 = &v38[v84];
          *(void *)unint64_t v78 = v137;
        }
        else if (a2 + 8 == v32)
        {
          uint64_t v85 = *((void *)v32 - 1);
          unint64_t v78 = v38 + 8;
          if (v32 - 8 != v38)
          {
            int v138 = a3;
            uint64_t v86 = *((void *)v32 - 1);
            memmove(v38 + 8, v38, v32 - 8 - v38);
            uint64_t v85 = v86;
            a3 = v138;
          }
          *(void *)int v38 = v85;
        }
        else
        {
          uint64_t v79 = (a2 - v38) >> 3;
          if (v79 == (v32 - a2) >> 3)
          {
            if (a2 != v32 && v38 != a2)
            {
              unint64_t v80 = v38 + 8;
              uint64_t v81 = a2 + 8;
              do
              {
                uint64_t v82 = *((void *)v80 - 1);
                *((void *)v80 - 1) = *((void *)v81 - 1);
                *((void *)v81 - 1) = v82;
                if (v80 == a2) {
                  break;
                }
                v80 += 8;
                BOOL v83 = v81 == v32;
                v81 += 8;
              }
              while (!v83);
            }
            unint64_t v78 = a2;
          }
          else
          {
            uint64_t v87 = (v32 - a2) >> 3;
            uint64_t v88 = (a2 - v38) >> 3;
            do
            {
              uint64_t v89 = v88;
              uint64_t v88 = v87;
              uint64_t v87 = v89 % v87;
            }
            while (v87);
            if (v88)
            {
              uint64_t v90 = &v38[8 * v88];
              do
              {
                uint64_t v92 = *((void *)v90 - 1);
                v90 -= 8;
                uint64_t v91 = v92;
                unsigned int v93 = &v90[8 * v79];
                uint64_t v94 = v90;
                do
                {
                  unint64_t v95 = v93;
                  *(void *)uint64_t v94 = *(void *)v93;
                  uint64_t v96 = &v93[8 * v79];
                  BOOL v97 = __OFSUB__(v79, (v32 - v93) >> 3);
                  uint64_t v98 = v79 - ((v32 - v93) >> 3);
                  char v21 = (v98 < 0) ^ v97;
                  unsigned int v93 = &v38[8 * v98];
                  if (v21) {
                    unsigned int v93 = v96;
                  }
                  uint64_t v94 = v95;
                }
                while (v93 != v90);
                *(void *)unint64_t v95 = v91;
              }
              while (v90 != v38);
            }
            unint64_t v78 = &v38[8 * ((v32 - a2) >> 3)];
          }
        }
      }
    }
    a4 -= v56;
    v8 -= v31;
    if (v56 + v31 >= a4 + v8)
    {
      uint64_t result = sub_1CC93C440(v78, v32, a3, a4, v8, a6, a7);
      unint64_t v32 = v38;
      uint64_t v8 = v31;
      a4 = v56;
      a3 = v78;
    }
    else
    {
      uint64_t result = sub_1CC93C440(v11, v38, v78, v56, v31, a6, a7);
      uint64_t v11 = v78;
    }
    a2 = v32;
    if (!v8) {
      return result;
    }
  }
  if (a4 > v8)
  {
    if (a2 == a3) {
      return result;
    }
    uint64_t v99 = 0;
    do
    {
      *(void *)&a6[v99] = *(void *)&a2[v99];
      v99 += 8;
    }
    while (&a2[v99] != a3);
    if (!v99) {
      return result;
    }
    uint64_t v100 = &a6[v99];
    while (2)
    {
      if (a2 == v11)
      {
        if (v100 != a6)
        {
          uint64_t v136 = 0;
          do
          {
            *(void *)&a3[v136 - 8] = *(void *)&v100[v136 - 8];
            v136 -= 8;
          }
          while (&v100[v136] != a6);
        }
        return result;
      }
      uint64_t v101 = *((void *)a2 - 1);
      if (*(unsigned char *)(*((void *)v100 - 1) + 16) == 16) {
        uint64_t v102 = *((void *)v100 - 1);
      }
      else {
        uint64_t v102 = 0;
      }
      if (*(unsigned char *)(v101 + 16) == 16) {
        uint64_t v103 = *((void *)a2 - 1);
      }
      else {
        uint64_t v103 = 0;
      }
      uint64_t v104 = (unint64_t *)(v102 + 24);
      uint64_t v105 = *(unsigned int *)(v102 + 32);
      if (v105 >= 0x41)
      {
        int v106 = 0;
        int64_t v107 = (unint64_t)(v105 + 63) >> 6;
        do
        {
          char v21 = v107-- < 1;
          if (v21) {
            break;
          }
          uint64_t result = *(void *)(*v104 + 8 * v107);
          v106 += __clz(result);
        }
        while (!result);
        int v108 = v105 | 0xFFFFFFC0;
        if ((v105 & 0x3F) == 0) {
          int v108 = 0;
        }
        if ((v105 - v106 - v108) > 0x40)
        {
          unint64_t v109 = -1;
          goto LABEL_166;
        }
        uint64_t v104 = (unint64_t *)*v104;
      }
      unint64_t v109 = *v104;
LABEL_166:
      unint64_t v110 = (unint64_t *)(v103 + 24);
      uint64_t v111 = *(unsigned int *)(v103 + 32);
      if (v111 >= 0x41)
      {
        int v112 = 0;
        int64_t v113 = (unint64_t)(v111 + 63) >> 6;
        do
        {
          char v21 = v113-- < 1;
          if (v21) {
            break;
          }
          uint64_t result = *(void *)(*v110 + 8 * v113);
          v112 += __clz(result);
        }
        while (!result);
        int v114 = v111 | 0xFFFFFFC0;
        if ((v111 & 0x3F) == 0) {
          int v114 = 0;
        }
        if ((v111 - v112 - v114) > 0x40)
        {
          unint64_t v115 = -1;
          goto LABEL_176;
        }
        unint64_t v110 = (unint64_t *)*v110;
      }
      unint64_t v115 = *v110;
LABEL_176:
      if (v109 < v115) {
        a2 -= 8;
      }
      else {
        uint64_t v101 = *((void *)v100 - 1);
      }
      if (v109 >= v115) {
        v100 -= 8;
      }
      *((void *)a3 - 1) = v101;
      a3 -= 8;
      if (v100 == a6) {
        return result;
      }
      continue;
    }
  }
  if (v11 == a2) {
    return result;
  }
  uint64_t v116 = 0;
  do
  {
    *(void *)&a6[v116] = *(void *)&v11[v116];
    v116 += 8;
  }
  while (&v11[v116] != a2);
  if (!v116) {
    return result;
  }
  uint64_t v117 = a6;
  while (2)
  {
    if (a2 != a3)
    {
      uint64_t v118 = *(void *)a2;
      if (*(unsigned char *)(*(void *)a2 + 16) == 16) {
        uint64_t v119 = *(void *)a2;
      }
      else {
        uint64_t v119 = 0;
      }
      if (*(unsigned char *)(*(void *)v117 + 16) == 16) {
        uint64_t v120 = *(void *)v117;
      }
      else {
        uint64_t v120 = 0;
      }
      uint64_t v121 = (unint64_t *)(v119 + 24);
      uint64_t v122 = *(unsigned int *)(v119 + 32);
      if (v122 >= 0x41)
      {
        int v123 = 0;
        int64_t v124 = (unint64_t)(v122 + 63) >> 6;
        do
        {
          char v21 = v124-- < 1;
          if (v21) {
            break;
          }
          uint64_t result = *(void *)(*v121 + 8 * v124);
          v123 += __clz(result);
        }
        while (!result);
        int v125 = v122 | 0xFFFFFFC0;
        if ((v122 & 0x3F) == 0) {
          int v125 = 0;
        }
        if ((v122 - v123 - v125) > 0x40)
        {
          unint64_t v126 = -1;
          goto LABEL_205;
        }
        uint64_t v121 = (unint64_t *)*v121;
      }
      unint64_t v126 = *v121;
LABEL_205:
      unint64_t v127 = (unint64_t *)(v120 + 24);
      uint64_t v128 = *(unsigned int *)(v120 + 32);
      if (v128 >= 0x41)
      {
        int v129 = 0;
        int64_t v130 = (unint64_t)(v128 + 63) >> 6;
        do
        {
          char v21 = v130-- < 1;
          if (v21) {
            break;
          }
          uint64_t result = *(void *)(*v127 + 8 * v130);
          v129 += __clz(result);
        }
        while (!result);
        int v131 = v128 | 0xFFFFFFC0;
        if ((v128 & 0x3F) == 0) {
          int v131 = 0;
        }
        if ((v128 - v129 - v131) > 0x40)
        {
          unint64_t v132 = -1;
          goto LABEL_215;
        }
        unint64_t v127 = (unint64_t *)*v127;
      }
      unint64_t v132 = *v127;
LABEL_215:
      BOOL v133 = v126 >= v132;
      BOOL v134 = v126 >= v132;
      unsigned int v135 = !v133;
      if (v133) {
        uint64_t v118 = *(void *)v117;
      }
      a2 += 8 * v135;
      v117 += 8 * v134;
      *(void *)uint64_t v11 = v118;
      v11 += 8;
      if (&a6[v116] == v117) {
        return result;
      }
      continue;
    }
    break;
  }

  return (unint64_t)memmove(v11, v117, a6 - v117 + v116);
}

uint64_t sub_1CC93CD5C(uint64_t a1, uint64_t a2)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  unint64_t v22 = v24;
  uint64_t v23 = 0x400000000;
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = *(void *)a1 + 16 * v4;
  if (*(_DWORD *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v6 = 16 * v4;
      uint64_t v7 = *(uint64_t **)a1;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v7 = *(uint64_t **)a1;
    }
  }
  else
  {
LABEL_6:
    uint64_t v7 = (uint64_t *)(*(void *)a1 + 16 * v4);
  }
  uint64_t v8 = *(void *)a1 + 16 * v4;
  if (v7 == (uint64_t *)v8) {
    goto LABEL_30;
  }
  unsigned int v9 = 0;
  char v10 = 1;
  do
  {
    uint64_t v12 = *v7;
    uint64_t v11 = (llvm::BasicBlock *)v7[1];
    uint64_t v13 = 1;
    uint64_t v14 = (void *)((char *)v11 + 40);
    do
    {
      uint64_t v14 = (void *)v14[1];
      --v13;
    }
    while (v14 != (void *)((char *)v11 + 40));
    if (v13)
    {
      char v10 = 0;
    }
    else
    {
      llvm::BasicBlock::eraseFromParent(v11);
      if (v23 >= (unint64_t)HIDWORD(v23)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v22 + v23) = v12;
      unsigned int v9 = v23 + 1;
      LODWORD(v23) = v23 + 1;
    }
    int v15 = v7 + 2;
    uint64_t v7 = (uint64_t *)v5;
    if (v15 != (uint64_t *)v5)
    {
      uint64_t v7 = v15;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        if (v7 == (uint64_t *)v5)
        {
          uint64_t v7 = (uint64_t *)v5;
          break;
        }
      }
    }
  }
  while (v7 != (uint64_t *)v8);
  if (v9)
  {
    uint64_t v16 = (uint64_t *)v22;
    uint64_t v17 = 8 * v9;
    do
    {
      uint64_t v18 = *v16;
      char v21 = 0;
      if (sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), v18, &v21))
      {
        *char v21 = -8192;
        *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  if (v10)
  {
LABEL_30:
    *(_DWORD *)(a2 + 28) = -1;
    uint64_t v19 = 1;
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (v22 != v24) {
    free(v22);
  }
  return v19;
}

uint64_t sub_1CC93CF78(uint64_t ****a1, uint64_t a2)
{
  __n128 v3 = *a1;
  if ((*((unsigned char *)*a1 + 23) & 0x20) == 0) {
    return a2;
  }
  uint64_t v5 = ***v3;
  int v26 = *a1;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    uint64_t v24 = 0;
LABEL_26:
    char v10 = sub_1CC609054(v5 + 2480, (uint64_t)&v26, (uint64_t *)&v26, v24);
    uint64_t v25 = (uint64_t)v26;
    v10[3] = 0;
    v10[4] = 0;
    void *v10 = v25;
    v10[1] = v10 + 3;
    v10[2] = 0x100000000;
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(v5 + 2480);
  int v8 = v6 - 1;
  unsigned int v9 = v8 & ((v3 >> 4) ^ (v3 >> 9));
  char v10 = (void *)(v7 + 40 * v9);
  uint64_t v11 = (void ***)*v10;
  if ((uint64_t ***)*v10 != v3)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != (void ***)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == (void ***)-8192;
      }
      if (v14) {
        uint64_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      char v10 = (void *)(v7 + 40 * v9);
      uint64_t v11 = (void ***)*v10;
      if ((uint64_t ***)*v10 == v3) {
        goto LABEL_12;
      }
    }
    if (v12) {
      uint64_t v24 = v12;
    }
    else {
      uint64_t v24 = v10;
    }
    goto LABEL_26;
  }
LABEL_12:
  uint64_t v16 = *((unsigned int *)v10 + 4);
  if (!v16) {
    return a2;
  }
  uint64_t v17 = (uint64_t *)(v10[1] + 8);
  uint64_t v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2))
  {
    v17 += 2;
    v18 -= 16;
    if (!v18) {
      return a2;
    }
  }
  uint64_t v20 = *v17;
  if (!*v17 || !a2 || *(unsigned char *)a2 != 5) {
    return a2;
  }
  char v21 = ***a1;
  unsigned int v22 = *(_DWORD *)(a2 + 4);
  unsigned int v23 = *(unsigned __int16 *)(a2 + 2);

  return llvm::DILocation::getImpl(v21, v22, v23, v20, 0, 0, 0, 1);
}

uint64_t sub_1CC93D0F8(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v3;
  }
  uint64_t v19 = a1 + 2;
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_1CB833614();
  }
  uint64_t v7 = 3 * v5;
  int v8 = (char *)operator new(24 * v5);
  unsigned int v9 = &v8[24 * v2];
  std::string __p = v8;
  uint64_t v16 = v9;
  *(void *)unsigned int v9 = *(void *)a2;
  *((void *)v9 + 1) = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((_DWORD *)v9 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  uint64_t v17 = v9 + 24;
  uint64_t v18 = &v8[8 * v7];
  sub_1CD66A2E0(a1, &__p);
  uint64_t v10 = a1[1];
  uint64_t v11 = v16;
  for (uint64_t i = v17; i != v11; i -= 24)
  {
    uint64_t v13 = *((void *)i - 3);
    MEMORY[0x1D25D9CD0](v13, 8);
  }
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

uint64_t sub_1CC93D21C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = *(_DWORD *)(result + 20);
  uint64_t v6 = v5 & 0x7FFFFFF;
  if ((v5 & 0x7FFFFFF) != 0)
  {
    uint64_t v11 = result;
    uint64_t v12 = 0;
    while (1)
    {
      int v13 = *(_DWORD *)(v11 + 20);
      uint64_t v14 = (v13 & 0x40000000) != 0 ? *(void *)(v11 - 8) : v11 - 32 * (v13 & 0x7FFFFFF);
      uint64_t v15 = *(void *)(v14 + 32 * v12);
      uint64_t v16 = *(void *)(v14 + 32 * *(unsigned int *)(v11 + 60) + 8 * v12);
      if (v15 && *(unsigned char *)(v15 + 16) == 21) {
        break;
      }
LABEL_24:
      v47[0] = 0;
      v47[1] = 0;
      int v48 = 0;
      sub_1CBFCBCC4((uint64_t)v47, a3);
      if (v48)
      {
        uint64_t v31 = (v48 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        uint64_t v32 = *(void *)(v47[0] + 16 * v31);
        if (v15 == v32)
        {
LABEL_26:
          if (v31 != v48) {
            uint64_t v15 = *(void *)(v47[0] + 16 * v31 + 8);
          }
        }
        else
        {
          int v41 = 1;
          while (v32 != -4096)
          {
            int v42 = v31 + v41++;
            uint64_t v31 = v42 & (v48 - 1);
            uint64_t v32 = *(void *)(v47[0] + 16 * v31);
            if (v15 == v32) {
              goto LABEL_26;
            }
          }
        }
      }
      MEMORY[0x1D25D9CD0](v47[0], 8);
      uint64_t result = sub_1CBFFA82C(*(void *)a2, v15);
      uint64_t v33 = *(void *)(*(void *)a2 + 72);
      uint64_t v34 = *(unsigned int *)(*(void *)a2 + 88);
      if (!v34) {
        goto LABEL_45;
      }
      LODWORD(v35) = (v34 - 1) & (37 * result);
      uint64_t v36 = (int *)(v33 + 8 * v35);
      int v37 = *v36;
      if (*v36 != result)
      {
        int v43 = 1;
        while (v37 != -1)
        {
          int v44 = v35 + v43++;
          uint64_t v35 = v44 & (v34 - 1);
          int v37 = *(_DWORD *)(v33 + 8 * v35);
          if (v37 == result)
          {
            uint64_t v36 = (int *)(v33 + 8 * v35);
            goto LABEL_30;
          }
        }
LABEL_45:
        uint64_t v36 = (int *)(v33 + 8 * v34);
      }
LABEL_30:
      if ((int *)(v33 + 8 * v34) == v36) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = v36[1];
      }
      unint64_t v39 = *(unsigned int *)(a4 + 8);
      if (v39 >= *(unsigned int *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v40 = (void *)(*(void *)a4 + 16 * v39);
      void *v40 = v38;
      v40[1] = v16;
      ++*(_DWORD *)(a4 + 8);
      if (++v12 == v6) {
        return result;
      }
    }
    if (a5)
    {
      uint64_t v18 = (uint64_t *)(*(void *)(a2 + 200)
                      - 32 * (*(_DWORD *)(*(void *)(a2 + 200) + 20) & 0x7FFFFFF)
                      + 32 * *(unsigned int *)(v15 + 32));
LABEL_23:
      uint64_t v15 = *v18;
      goto LABEL_24;
    }
    int v19 = *(_DWORD *)(v15 + 32);
    unsigned int v20 = *(_DWORD *)(a2 + 152);
    if (v20)
    {
      uint64_t v21 = *(void *)(a2 + 136);
      unsigned int v22 = (v20 - 1) & (37 * v19);
      int v23 = *(_DWORD *)(v21 + 16 * v22);
      if (v19 == v23)
      {
LABEL_15:
        uint64_t v18 = (uint64_t *)(sub_1CD57516C(v21, v20, v19) + 2);
        goto LABEL_23;
      }
      int v24 = 1;
      while (v23 != -1)
      {
        unsigned int v25 = v22 + v24++;
        unsigned int v22 = v25 & (v20 - 1);
        int v23 = *(_DWORD *)(v21 + 16 * v22);
        if (v19 == v23) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v26 = *(void *)(a2 + 56);
    uint64_t v27 = *(unsigned int *)(a2 + 72);
    if (v27)
    {
      LODWORD(v28) = (v27 - 1) & (37 * v19);
      unint64_t v29 = (int *)(v26 + 8 * v28);
      int v30 = *v29;
      if (v19 == *v29)
      {
LABEL_22:
        uint64_t v18 = (uint64_t *)(*(void *)(a2 + 200)
                        - 32 * (*(_DWORD *)(*(void *)(a2 + 200) + 20) & 0x7FFFFFF)
                        + 32 * v29[1]);
        goto LABEL_23;
      }
      int v45 = 1;
      while (v30 != -1)
      {
        int v46 = v28 + v45++;
        uint64_t v28 = v46 & (v27 - 1);
        int v30 = *(_DWORD *)(v26 + 8 * v28);
        if (v19 == v30)
        {
          unint64_t v29 = (int *)(v26 + 8 * v28);
          goto LABEL_22;
        }
      }
    }
    unint64_t v29 = (int *)(v26 + 8 * v27);
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_1CC93D528(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unsigned int v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unsigned int v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CC93D5C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1CC93D678(a1, v7);
    unsigned int v9 = 0;
    sub_1CC93D528((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC93D678(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD66A400(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void sub_1CC93D744()
{
}

void sub_1CC93D784(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC93D7BC(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::IRSimilarityIdentifierWrapperPass::ID);
}

BOOL sub_1CC93D820(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }
  unsigned int v9 = &v10;
  uint64_t v10 = 0;
  int v7 = a1;
  unsigned int v8 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v15 = sub_1CC93D9B8;
  uint64_t v16 = &v8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  unsigned int v20 = sub_1CC93DA58;
  uint64_t v21 = &v7;
  unsigned int v22 = sub_1CC93DADC;
  int v23 = &v9;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = v28;
  uint64_t v27 = 0x400000000;
  v28[4] = &v28[6];
  memset(&v28[5], 0, 40);
  v28[10] = v29;
  v28[11] = 0x400000000;
  v29[4] = &v29[6];
  memset(&v29[5], 0, 40);
  v29[10] = v30;
  v29[11] = 0x400000000;
  v30[4] = v31;
  v30[5] = 0;
  v31[0] = 0;
  v31[1] = 0;
  char v32 = 0;
  __int16 v33 = 1;
  char v34 = 0;
  v11[1] = byte_1EBCE0188 ^ 1;
  v11[0] = byte_1EBCE00C8;
  BOOL v4 = llvm::IROutliner::doOutline((llvm::IROutliner *)v11, (llvm::Module *)a2) != 0;
  sub_1CD66A528((uint64_t)v11);
  uint64_t v6 = v10;
  uint64_t v10 = 0;
  if (v6) {
    sub_1CC0CC1D8((uint64_t)&v10, v6);
  }
  return v4;
}

uint64_t *sub_1CC93D9B8(uint64_t a1, const Function *a2)
{
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  int v7 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetTransformInfoWrapperPass::ID);

  return llvm::TargetTransformInfoWrapperPass::getTTI(v7, a2);
}

uint64_t sub_1CC93DA58(uint64_t a1)
{
  __n128 v1 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if (v2 == v3)
  {
LABEL_4:
    uint64_t v4 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v2 != &llvm::IRSimilarityIdentifierWrapperPass::ID)
    {
      v2 += 16;
      if (v2 == v3) {
        goto LABEL_4;
      }
    }
    uint64_t v4 = *(void *)(v2 + 8);
  }
  return *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 96))(v4, &llvm::IRSimilarityIdentifierWrapperPass::ID)+ 32);
}

void sub_1CC93DADC()
{
}

BOOL sub_1CC93DB48(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v3 = 0;
  }
  return v3 && *(void *)(*(void *)(v2 + 40) + 56) == *a1;
}

uint64_t sub_1CC93DB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 32);
  if (!v4)
  {
    unsigned int v5 = MEMORY[0x10];
LABEL_6:
    BOOL v6 = v5 < 0x15 || v5 == 24;
    if (!v6 && *(unsigned char *)(a1 + 1)) {
      goto LABEL_11;
    }
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(unsigned char *)(v4 + 16)) {
    goto LABEL_6;
  }
  if (*(void *)(v4 + 24) != *(void *)(a2 + 72)) {
    return 0;
  }
LABEL_11:
  uint64_t v7 = *(void *)(a2 + 64);
  if (v7 && *(char *)(v7 + 17) < 0 || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 47) & 1) != 0) {
    return 0;
  }
  unsigned int v9 = *(unsigned __int16 *)(a2 + 18);
  int v10 = (v9 >> 2) & 0x3FF;
  BOOL v11 = v10 == 20;
  if (v10 == 18) {
    BOOL v11 = 1;
  }
  if ((v10 == 20 || v10 == 18) && !*(unsigned char *)(a1 + 3)) {
    return 0;
  }
  int v12 = v9 & 3;
  if (v12 == 2 && !*(unsigned char *)(a1 + 3)) {
    return 0;
  }
  return v12 != 2 || v11;
}

BOOL sub_1CC93DC54(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 16) - 29 >= 0xB)
  {
    NextNonDebugInstructiouint64_t n = llvm::Instruction::getNextNonDebugInstruction(this, 0);
  }
  else if (a1)
  {
    llvm::BasicBlock::instructionsWithoutDebug(*(llvm::BasicBlock **)(a1 + 40), 1, (uint64_t)&v7);
    long long v12 = v7;
    if (v9)
    {
      if (v9 == v8)
      {
        int v14 = v13;
        (*(void (**)(void))(*v9 + 24))();
        BOOL v3 = v14;
      }
      else
      {
        BOOL v3 = (void *)(*(uint64_t (**)(void))(*v9 + 16))();
        int v14 = v3;
      }
      if ((void)v12) {
        NextNonDebugInstructiouint64_t n = v12 - 24;
      }
      else {
        NextNonDebugInstructiouint64_t n = 0;
      }
      if (v3 == v13)
      {
        (*(void (**)(void *))(v13[0] + 32))(v13);
      }
      else if (v3)
      {
        (*(void (**)(void *))(*v3 + 40))(v3);
      }
    }
    else
    {
      int v14 = 0;
      if ((void)v7) {
        NextNonDebugInstructiouint64_t n = v7 - 24;
      }
      else {
        NextNonDebugInstructiouint64_t n = 0;
      }
    }
    if (v11 == v10)
    {
      (*(void (**)(void *))(v10[0] + 32))(v10);
    }
    else if (v11)
    {
      (*(void (**)(void))(*v11 + 40))();
    }
    if (v9 == v8)
    {
      (*(void (**)(void *))(v8[0] + 32))(v8);
    }
    else if (v9)
    {
      (*(void (**)(void))(*v9 + 40))();
    }
  }
  else
  {
    NextNonDebugInstructiouint64_t n = 0;
  }
  return !a1 || NextNonDebugInstruction == a1;
}

void sub_1CC93DED4(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (uint64_t)a1;
    if (a3 == 2)
    {
      long long v7 = (long long *)&a2[-8].n128_i8[8];
      if (a2[-8].n128_u32[2] < a1->n128_u32[0])
      {
        sub_1CD48A754(v28, a1);
        sub_1CD66AB3C(v6, v7);
        sub_1CD66AB3C((uint64_t)v7, (long long *)v28);
        sub_1CD48A868(v28);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        int v14 = (__n128 *)((char *)a1 + 120);
        if (&a1[7].n128_i8[8] != (__int8 *)a2)
        {
          uint64_t v15 = 0;
          uint64_t v16 = a1;
          do
          {
            unsigned __int32 v17 = v16->n128_u32[0];
            uint64_t v16 = v14;
            if (v14->n128_u32[0] < v17)
            {
              sub_1CD48A754(v28, v14);
              uint64_t v18 = v15;
              while (1)
              {
                sub_1CD66AB3C(v6 + v18 + 120, (long long *)(v6 + v18));
                if (!v18) {
                  break;
                }
                unsigned __int32 v19 = *(_DWORD *)(v6 + v18 - 120);
                v18 -= 120;
                if (v28[0].n128_u32[0] >= v19)
                {
                  uint64_t v20 = v6 + v18 + 120;
                  goto LABEL_22;
                }
              }
              uint64_t v20 = v6;
LABEL_22:
              sub_1CD66AB3C(v20, (long long *)v28);
              sub_1CD48A868(v28);
            }
            int v14 = (__n128 *)((char *)v16 + 120);
            v15 += 120;
          }
          while (&v16[7].n128_i8[8] != (__int8 *)a2);
        }
      }
    }
    else
    {
      int v10 = a4;
      unint64_t v11 = a3 >> 1;
      long long v12 = (__n128 *)((char *)a1 + 120 * (a3 >> 1));
      unint64_t v13 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CC93E198(a1, v12, v13, a4);
        uint64_t v21 = (__n128 *)((char *)v10 + 120 * v11);
        sub_1CC93E198((__n128 *)(v6 + 120 * (a3 >> 1)), a2, a3 - (a3 >> 1), v21);
        unsigned int v22 = (long long *)((char *)v10 + 120 * a3);
        int v23 = (long long *)v21;
        uint64_t v24 = (long long *)v10;
        while (v23 != v22)
        {
          if (*(_DWORD *)v23 >= *(_DWORD *)v24)
          {
            sub_1CD66AB3C(v6, v24);
            uint64_t v24 = (long long *)((char *)v24 + 120);
          }
          else
          {
            sub_1CD66AB3C(v6, v23);
            int v23 = (long long *)((char *)v23 + 120);
          }
          v6 += 120;
          if (v24 == (long long *)v21)
          {
            if (v23 != v22)
            {
              uint64_t v25 = 0;
              do
              {
                sub_1CD66AB3C(v6 + v25, (long long *)((char *)v23 + v25));
                v25 += 120;
              }
              while ((long long *)((char *)v23 + v25) != v22);
            }
            goto LABEL_36;
          }
        }
        if (v24 != (long long *)v21)
        {
          uint64_t v26 = 0;
          do
          {
            sub_1CD66AB3C(v6 + v26, (long long *)((char *)v24 + v26));
            v26 += 120;
          }
          while ((__n128 *)((char *)v24 + v26) != v21);
        }
LABEL_36:
        if (v10)
        {
          unint64_t v27 = a3;
          do
          {
            sub_1CD48A868(v10);
            int v10 = (__n128 *)((char *)v10 + 120);
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        sub_1CC93DED4(a1, v12, v13, a4, a5);
        sub_1CC93DED4(v6 + 120 * (a3 >> 1), a2, a3 - (a3 >> 1), v10, a5);
        sub_1CC93E3DC(v6, (long long *)(v6 + 120 * (a3 >> 1)), (long long *)a2, a3 >> 1, a3 - (a3 >> 1), v10, a5);
      }
    }
  }
}

double sub_1CC93E198(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = a4;
  long long v7 = a1;
  if (a3 == 2)
  {
    uint64_t v21 = (__n128 *)((char *)a2 - 120);
    if (a2[-8].n128_u32[2] >= a1->n128_u32[0])
    {
      sub_1CD48A754(a4, a1);
      unsigned int v22 = (__n128 *)((char *)v4 + 120);
      int v23 = v21;
      goto LABEL_37;
    }
    sub_1CD48A754(a4, v21);
    unsigned int v22 = (__n128 *)((char *)v4 + 120);
LABEL_35:
    int v23 = v7;
LABEL_37:
    *(void *)&double result = sub_1CD48A754(v22, v23).n128_u64[0];
    return result;
  }
  if (a3 == 1)
  {
    unsigned int v22 = a4;
    goto LABEL_35;
  }
  if ((uint64_t)a3 > 8)
  {
    uint64_t v16 = 120 * (a3 >> 1);
    unsigned __int32 v17 = (__n128 *)((char *)a1 + v16);
    sub_1CC93DED4(a1, (char *)a1 + v16, a3 >> 1, a4, a3 >> 1);
    sub_1CC93DED4((char *)v7 + v16, a2, a3 - (a3 >> 1), (char *)v4 + v16, a3 - (a3 >> 1));
    uint64_t v18 = (__n128 *)((char *)v7 + v16);
    while (v18 != a2)
    {
      if (v18->n128_u32[0] >= v7->n128_u32[0])
      {
        *(void *)&double result = sub_1CD48A754(v4, v7).n128_u64[0];
        long long v7 = (__n128 *)((char *)v7 + 120);
      }
      else
      {
        *(void *)&double result = sub_1CD48A754(v4, v18).n128_u64[0];
        uint64_t v18 = (__n128 *)((char *)v18 + 120);
      }
      uint64_t v4 = (__n128 *)((char *)v4 + 120);
      if (v7 == v17)
      {
        if (v18 != a2)
        {
          uint64_t v19 = 0;
          do
          {
            *(void *)&double result = sub_1CD48A754((__n128 *)((char *)v4 + v19), (__n128 *)((char *)v18 + v19)).n128_u64[0];
            v19 += 120;
          }
          while ((__n128 *)((char *)v18 + v19) != a2);
        }
        return result;
      }
    }
    if (v7 != v17)
    {
      uint64_t v20 = 0;
      do
      {
        *(void *)&double result = sub_1CD48A754((__n128 *)((char *)v4 + v20), (__n128 *)((char *)v7 + v20)).n128_u64[0];
        v20 += 120;
      }
      while ((__n128 *)((char *)v7 + v20) != v17);
    }
  }
  else if (a1 != a2)
  {
    *(void *)&double result = sub_1CD48A754(a4, a1).n128_u64[0];
    unsigned int v9 = (__n128 *)((char *)v7 + 120);
    if (v9 != a2)
    {
      uint64_t v10 = 0;
      unint64_t v11 = v4;
      long long v12 = v4;
      do
      {
        unsigned __int32 v13 = v12->n128_u32[0];
        long long v12 = (__n128 *)((char *)v12 + 120);
        if (v9->n128_u32[0] >= v13)
        {
          *(void *)&double result = sub_1CD48A754(v12, v9).n128_u64[0];
        }
        else
        {
          sub_1CD48A754(v12, v11);
          uint64_t v14 = (uint64_t)v4;
          if (v11 != v4)
          {
            uint64_t v15 = v10;
            while (1)
            {
              uint64_t v14 = (uint64_t)v4 + v15;
              if (v9->n128_u32[0] >= *(_DWORD *)((char *)&v4[-7] + v15 - 8)) {
                break;
              }
              sub_1CD66AB3C(v14, (long long *)((char *)&v4[-7] + v15 - 8));
              v15 -= 120;
              if (!v15)
              {
                uint64_t v14 = (uint64_t)v4;
                break;
              }
            }
          }
          sub_1CD66AB3C(v14, (long long *)v9);
        }
        unsigned int v9 = (__n128 *)((char *)v9 + 120);
        v10 += 120;
        unint64_t v11 = v12;
      }
      while (v9 != a2);
    }
  }
  return result;
}

void sub_1CC93E3DC(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v7 = a5;
    unint64_t v78 = a6;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4) {
        return;
      }
      uint64_t v11 = 0;
      uint64_t v12 = -a4;
      while (*(_DWORD *)a2 >= *(_DWORD *)(a1 + v11))
      {
        v11 += 120;
        if (__CFADD__(v12++, 1)) {
          return;
        }
      }
      uint64_t v14 = -v12;
      uint64_t v15 = (long long *)(a1 + v11);
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          uint64_t v68 = a1 + v11;
          unint64_t v69 = (__n128 *)(a1 + v11);
          int v70 = a2;
          sub_1CD48A754(v79, v69);
          sub_1CD66AB3C(v68, v70);
          sub_1CD66AB3C((uint64_t)v70, (long long *)v79);
          sub_1CD48A868(v79);
          return;
        }
        if (v12 > 0) {
          uint64_t v14 = 1 - v12;
        }
        uint64_t v26 = v14 >> 1;
        uint64_t v20 = (long long *)(a1 + 120 * (v14 >> 1) + v11);
        uint64_t v18 = a3;
        if (a3 != a2)
        {
          unint64_t v27 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a3 - (char *)a2) >> 3);
          uint64_t v18 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            unint64_t v29 = (_DWORD *)v18 + 30 * (v27 >> 1);
            unsigned int v31 = *v29;
            int v30 = (long long *)(v29 + 30);
            v27 += ~(v27 >> 1);
            if (v31 < *(_DWORD *)v20) {
              uint64_t v18 = v30;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v17 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v18 - (char *)a2) >> 3);
        uint64_t v25 = (__n128 *)(a1 + 120 * v26 + v11);
      }
      else
      {
        if (v7 >= 0) {
          uint64_t v16 = v7;
        }
        else {
          uint64_t v16 = v7 + 1;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = (long long *)((char *)a2 + 120 * (v16 >> 1));
        if (v15 == a2)
        {
          uint64_t v25 = (__n128 *)a2;
          uint64_t v20 = a2;
        }
        else
        {
          unint64_t v19 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)a2 - a1 - v11) >> 3);
          uint64_t v20 = (long long *)(a1 + v11);
          do
          {
            unint64_t v21 = v19 >> 1;
            unsigned int v22 = (_DWORD *)v20 + 30 * (v19 >> 1);
            unsigned int v24 = *v22;
            int v23 = (long long *)(v22 + 30);
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)v18 < v24) {
              unint64_t v19 = v21;
            }
            else {
              uint64_t v20 = v23;
            }
          }
          while (v19);
          uint64_t v25 = (__n128 *)v20;
        }
        uint64_t v26 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v25 - a1 - v11) >> 3);
      }
      char v32 = (__n128 *)v18;
      if (v20 != a2)
      {
        char v32 = v25;
        if (a2 != v18)
        {
          uint64_t v72 = v26;
          uint64_t v73 = v17;
          uint64_t v74 = a7;
          unint64_t v75 = a3;
          unint64_t v40 = v25;
          int v41 = a2;
          sub_1CD48A754(v79, v25);
          sub_1CD66AB3C((uint64_t)v40, v41);
          sub_1CD66AB3C((uint64_t)v41, (long long *)v79);
          sub_1CD48A868(v79);
          int v42 = v41;
          unint64_t v71 = v40;
          while (1)
          {
            char v32 = (__n128 *)((char *)v40 + 120);
            int v41 = (long long *)((char *)v41 + 120);
            if (v41 == v18) {
              break;
            }
            if (v32 == (__n128 *)v42) {
              int v42 = v41;
            }
            unint64_t v76 = v42;
            unint64_t v40 = (__n128 *)((char *)v40 + 120);
            sub_1CD48A754(v79, v40);
            sub_1CD66AB3C((uint64_t)v40, v41);
            sub_1CD66AB3C((uint64_t)v41, (long long *)v79);
            sub_1CD48A868(v79);
            int v42 = v76;
          }
          if (v32 != (__n128 *)v42)
          {
            int v43 = (__n128 *)((char *)v40 + 120);
            int v44 = v42;
            while (1)
            {
              int64_t v77 = v42;
              while (1)
              {
                int v45 = v32;
                sub_1CD48A754(v79, v43);
                sub_1CD66AB3C((uint64_t)v43, v44);
                sub_1CD66AB3C((uint64_t)v44, (long long *)v79);
                sub_1CD48A868(v79);
                int v43 = (__n128 *)((char *)v43 + 120);
                int v44 = (long long *)((char *)v44 + 120);
                if (v44 != v18) {
                  break;
                }
                int v44 = v77;
                char v32 = v45;
                if (v43 == (__n128 *)v77) {
                  goto LABEL_55;
                }
              }
              int v42 = v77;
              if (v43 == (__n128 *)v77) {
                int v42 = v44;
              }
              char v32 = v45;
            }
          }
LABEL_55:
          a7 = v74;
          a3 = v75;
          uint64_t v17 = v73;
          uint64_t v15 = (long long *)(a1 + v11);
          uint64_t v25 = v71;
          uint64_t v26 = v72;
        }
      }
      a4 = -(v26 + v12);
      uint64_t v33 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v12)
      {
        uint64_t v37 = v26;
        uint64_t v38 = v17;
        uint64_t v36 = a7;
        a1 = (uint64_t)v15;
        unint64_t v39 = v32;
        sub_1CC93E3DC(v32, v18);
        uint64_t v18 = v20;
        uint64_t v33 = v38;
        a4 = v37;
        a3 = (long long *)v39;
      }
      else
      {
        uint64_t v34 = a1 + v11;
        uint64_t v35 = a3;
        uint64_t v36 = a7;
        a1 = (uint64_t)v32;
        sub_1CC93E3DC(v34, v25);
        a3 = v35;
      }
      uint64_t v7 = v33;
      a2 = v18;
      a6 = v78;
      a7 = v36;
      if (!v33) {
        return;
      }
    }
    if (a4 <= v7)
    {
      if ((long long *)a1 == a2) {
        return;
      }
      uint64_t v56 = a3;
      uint64_t v57 = 0;
      uint64_t v47 = 0;
      do
      {
        uint64_t v58 = a2;
        sub_1CD48A754((__n128 *)&a6[v57], (__n128 *)(a1 + v57 * 8));
        a2 = v58;
        a6 = v78;
        ++v47;
        v57 += 15;
      }
      while ((long long *)(a1 + v57 * 8) != v58);
      if (v57 * 8)
      {
        unint64_t v59 = (long long *)&v78[v57];
        uint64_t v60 = (uint64_t)&v78[v57 - 15];
        int v61 = (long long *)v78;
        unint64_t v62 = v56;
        while (a2 != v62)
        {
          uint64_t v63 = a2;
          if (*(_DWORD *)a2 >= *(_DWORD *)v61)
          {
            sub_1CD66AB3C(a1, v61);
            a2 = v63;
            int v61 = (long long *)((char *)v61 + 120);
          }
          else
          {
            sub_1CD66AB3C(a1, a2);
            a2 = (long long *)((char *)v63 + 120);
          }
          a1 += 120;
          a6 = v78;
          unint64_t v62 = v56;
          if (v59 == v61) {
            goto LABEL_92;
          }
        }
        if (v59 != v61)
        {
          uint64_t v66 = 0;
          do
          {
            sub_1CD66AB3C(a1 + v66, (long long *)((char *)v61 + v66));
            v66 += 120;
          }
          while ((long long *)v60 != (long long *)((char *)v61 + v66 - 120));
          a6 = v78;
        }
      }
    }
    else
    {
      if (a2 == a3) {
        return;
      }
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      do
      {
        int v48 = a3;
        int v49 = a2;
        sub_1CD48A754((__n128 *)&a6[v46], (__n128 *)((char *)a2 + v46 * 8));
        a2 = v49;
        a3 = v48;
        a6 = v78;
        ++v47;
        v46 += 15;
      }
      while ((long long *)((char *)v49 + v46 * 8) != v48);
      if (v46 * 8)
      {
        int64_t v50 = &v78[v46];
        uint64_t v51 = (uint64_t)a3 - 120;
        while (a2 != (long long *)a1)
        {
          unsigned int v52 = *((_DWORD *)v50 - 30);
          unsigned int v53 = *((_DWORD *)a2 - 30);
          if (v52 >= v53) {
            uint64_t v54 = (long long *)(v50 - 15);
          }
          else {
            uint64_t v54 = (long long *)((char *)a2 - 120);
          }
          if (v52 >= v53) {
            uint64_t v55 = a2;
          }
          else {
            uint64_t v55 = (long long *)((char *)a2 - 120);
          }
          if (v52 >= v53) {
            v50 -= 15;
          }
          sub_1CD66AB3C(v51, v54);
          a2 = v55;
          a6 = v78;
          v51 -= 120;
          if (v50 == v78) {
            goto LABEL_92;
          }
        }
        if (v50 != a6)
        {
          uint64_t v64 = 0;
          do
          {
            uint64_t v65 = v51 + v64 * 8;
            v64 -= 15;
            sub_1CD66AB3C(v65, (long long *)&v50[v64]);
            a6 = v78;
          }
          while (&v50[v64] != v78);
        }
      }
    }
LABEL_92:
    if (a6 && v47)
    {
      do
      {
        int v67 = a6;
        sub_1CD48A868(a6);
        a6 = v67 + 15;
        --v47;
      }
      while (v47);
    }
  }
}

void sub_1CC93E978(char *a1, char *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    uint64_t v7 = (void **)a1;
    if (a3 == 2)
    {
      uint64_t v8 = *((void *)a2 - 3);
      uint64_t v9 = *(void *)a1;
      if (0xEEEEEEEEEEEEEEEFLL * ((*((void *)a2 - 2) - v8) >> 3) * *(unsigned int *)(v8 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                                                                * ((uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 3)
                                                                                                * *(unsigned int *)(*(void *)a1 + 4))
      {
        *(void *)a1 = v8;
        *((void *)a2 - 3) = v9;
        uint64_t v10 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)a2 - 2);
        *((void *)a2 - 2) = v10;
        uint64_t v11 = *((void *)a1 + 2);
        *((void *)a1 + 2) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v11;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        uint64_t v18 = a1 + 24;
        if (a1 + 24 != a2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = a1;
          do
          {
            unint64_t v21 = v18;
            uint64_t v22 = *((void *)v20 + 4);
            if (0xEEEEEEEEEEEEEEEFLL * ((v22 - *v18) >> 3) * *(unsigned int *)(*v18 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                                                            * ((uint64_t)(*((void *)v20 + 1) - *(void *)v20) >> 3)
                                                                                            * *(unsigned int *)(*(void *)v20 + 4))
            {
              *(void *)&long long v44 = *v18;
              *((void *)&v44 + 1) = v22;
              uint64_t v45 = *((void *)v20 + 5);
              *((void *)v20 + 4) = 0;
              *((void *)v20 + 5) = 0;
              void *v18 = 0;
              uint64_t v23 = v19;
              while (1)
              {
                unsigned int v24 = (char *)v7 + v23;
                sub_1CD66AC14((void **)((char *)v7 + v23 + 24));
                *(_OWORD *)(v24 + 24) = *(_OWORD *)v24;
                *((void *)v24 + 5) = *((void *)v24 + 2);
                *((void *)v24 + 1) = 0;
                *((void *)v24 + 2) = 0;
                *(void *)unsigned int v24 = 0;
                if (!v23) {
                  break;
                }
                v23 -= 24;
                if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)&v44 + 1) - v44) >> 3) * *(unsigned int *)(v44 + 4) <= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)v24 - 2) - *((void *)v24 - 3)) >> 3) * *(unsigned int *)(*((void *)v24 - 3) + 4))
                {
                  uint64_t v25 = (uint64_t)v7 + v23 + 24;
                  goto LABEL_21;
                }
              }
              uint64_t v25 = (uint64_t)v7;
LABEL_21:
              sub_1CD66AC14((void **)v25);
              *(_OWORD *)uint64_t v25 = v44;
              *(void *)(v25 + 16) = v45;
              long long v44 = 0uLL;
              uint64_t v45 = 0;
              uint64_t v46 = (void **)&v44;
              sub_1CBFFD868(&v46);
            }
            uint64_t v18 = v21 + 3;
            v19 += 24;
            uint64_t v20 = (char *)v21;
          }
          while (v21 + 3 != (void *)a2);
        }
      }
    }
    else
    {
      uint64_t v14 = (void **)a4;
      unint64_t v15 = a3 >> 1;
      uint64_t v16 = &a1[24 * (a3 >> 1)];
      unint64_t v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v26 = sub_1CC93ED7C(a1, v16, v17, a4, a6);
        unint64_t v27 = (__n128 *)&v14[3 * v15];
        sub_1CC93ED7C(&v7[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v27, v26);
        unint64_t v28 = &v14[3 * a3];
        unint64_t v29 = v27;
        int v30 = v14;
        while (v29 != (__n128 *)v28)
        {
          unint64_t v31 = 0xEEEEEEEEEEEEEEEFLL
              * ((uint64_t)(v29->n128_u64[1] - v29->n128_u64[0]) >> 3)
              * *(unsigned int *)(v29->n128_u64[0] + 4);
          unint64_t v32 = 0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)v30[1] - (unsigned char *)*v30) >> 3) * *((unsigned int *)*v30 + 1);
          sub_1CD66AC14(v7);
          if (v31 <= v32)
          {
            n128_u64 = v30;
            __n128 v36 = *(__n128 *)v30;
            v30 += 3;
            __n128 v35 = v36;
          }
          else
          {
            n128_u64 = v29->n128_u64;
            __n128 v34 = *v29;
            unint64_t v29 = (__n128 *)((char *)v29 + 24);
            __n128 v35 = v34;
          }
          *(__n128 *)uint64_t v7 = v35;
          v7[2] = (void *)n128_u64[2];
          void *n128_u64 = 0;
          n128_u64[1] = 0;
          n128_u64[2] = 0;
          v7 += 3;
          if (v30 == (void **)v27)
          {
            if (v29 != (__n128 *)v28)
            {
              uint64_t v37 = 0;
              do
              {
                uint64_t v38 = &v29->n128_u64[v37];
                unint64_t v39 = (__n128 *)&v7[v37];
                sub_1CD66AC14(&v7[v37]);
                __n128 *v39 = *(__n128 *)((char *)v29 + v37 * 8);
                v39[1].n128_u64[0] = v29[1].n128_u64[v37];
                unint64_t *v38 = 0;
                v38[1] = 0;
                void v38[2] = 0;
                v37 += 3;
              }
              while (v38 + 3 != (unint64_t *)v28);
            }
            goto LABEL_35;
          }
        }
        if (v30 != (void **)v27)
        {
          uint64_t v40 = 0;
          do
          {
            int v41 = &v30[v40];
            int v42 = &v7[v40];
            sub_1CD66AC14(&v7[v40]);
            *(_OWORD *)int v42 = *(_OWORD *)&v30[v40];
            v42[2] = v30[v40 + 2];
            *int v41 = 0;
            v41[1] = 0;
            v41[2] = 0;
            v40 += 3;
          }
          while (v41 + 3 != (void **)v27);
        }
LABEL_35:
        if (v14)
        {
          unint64_t v43 = a3;
          do
          {
            *(void *)&long long v44 = v14;
            sub_1CBFFD868((void ***)&v44);
            v14 += 3;
            --v43;
          }
          while (v43);
        }
      }
      else
      {
        sub_1CC93E978(a1, v16, v17, a4, a5);
        sub_1CC93E978(&v7[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v14, a5);
        sub_1CC93F18C((char *)v7, (char *)&v7[3 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v14, a5);
      }
    }
  }
}

__n128 sub_1CC93ED7C(void *a1, void *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  if (a3)
  {
    unsigned int v5 = a4;
    uint64_t v8 = a1;
    if (a3 == 2)
    {
      uint64_t v11 = a2 - 3;
      unint64_t v12 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 3) * *(unsigned int *)(*(a2 - 3) + 4);
      unint64_t v13 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3) * *(unsigned int *)(*a1 + 4);
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      uint64_t v14 = &a4[1].n128_u64[1];
      uint64_t v9 = (__n128 *)((char *)a4 + 40);
      if (v12 <= v13)
      {
        *a4 = *(__n128 *)a1;
        a4[1].n128_u64[0] = a1[2];
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        *uint64_t v14 = 0;
        a4[2].n128_u64[0] = 0;
        a4[2].n128_u64[1] = 0;
        double result = *(__n128 *)(a2 - 3);
        *(__n128 *)((char *)a4 + 24) = result;
        uint64_t v10 = a2 - 1;
        goto LABEL_23;
      }
      *a4 = *(__n128 *)(a2 - 3);
      a4[1].n128_u64[0] = *(a2 - 1);
      *uint64_t v11 = 0;
      *(a2 - 2) = 0;
      *(a2 - 1) = 0;
      *uint64_t v14 = 0;
      a4[2].n128_u64[0] = 0;
      a4[2].n128_u64[1] = 0;
      uint64_t v10 = a1 + 2;
      double result = *(__n128 *)a1;
      *(__n128 *)((char *)a4 + 24) = *(__n128 *)a1;
LABEL_7:
      uint64_t v11 = a1;
LABEL_23:
      v9->n128_u64[0] = *v10;
      *uint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      return result;
    }
    if (a3 == 1)
    {
      a4[1].n128_u64[0] = 0;
      uint64_t v9 = a4 + 1;
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      uint64_t v10 = a1 + 2;
      double result = *(__n128 *)a1;
      *a4 = *(__n128 *)a1;
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      __n128 v26 = &a1[3 * (a3 >> 1)];
      sub_1CC93E978(a1, v26, a3 >> 1, a4, a3 >> 1);
      sub_1CC93E978(&v8[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      unint64_t v27 = &v8[3 * (a3 >> 1)];
      while (v27 != a2)
      {
        unint64_t v28 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v27[1] - *v27) >> 3) * *(unsigned int *)(*v27 + 4);
        unint64_t v29 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v8[1] - *v8) >> 3) * *(unsigned int *)(*v8 + 4);
        v5->n128_u64[0] = 0;
        v5->n128_u64[1] = 0;
        v5[1].n128_u64[0] = 0;
        if (v28 <= v29)
        {
          int v30 = v8;
          __n128 v32 = *(__n128 *)v8;
          v8 += 3;
          double result = v32;
        }
        else
        {
          int v30 = v27;
          __n128 v31 = *(__n128 *)v27;
          v27 += 3;
          double result = v31;
        }
        *unsigned int v5 = result;
        v5[1].n128_u64[0] = v30[2];
        void *v30 = 0;
        v30[1] = 0;
        void v30[2] = 0;
        unsigned int v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v26)
        {
          if (v27 != a2)
          {
            uint64_t v33 = 0;
            do
            {
              __n128 v34 = &v27[v33];
              __n128 v35 = (__n128 *)((char *)v5 + v33 * 8);
              v35->n128_u64[0] = 0;
              v35->n128_u64[1] = 0;
              v35[1].n128_u64[0] = 0;
              double result = *(__n128 *)&v27[v33];
              __n128 *v35 = result;
              v35[1].n128_u64[0] = v27[v33 + 2];
              *__n128 v34 = 0;
              v34[1] = 0;
              _OWORD v34[2] = 0;
              v33 += 3;
            }
            while (v34 + 3 != a2);
          }
          return result;
        }
      }
      if (v8 != v26)
      {
        uint64_t v36 = 0;
        do
        {
          uint64_t v37 = (__n128 *)((char *)v5 + v36 * 8);
          uint64_t v38 = &v8[v36];
          v37->n128_u64[0] = 0;
          v37->n128_u64[1] = 0;
          v37[1].n128_u64[0] = 0;
          double result = *(__n128 *)&v8[v36];
          *uint64_t v37 = result;
          v37[1].n128_u64[0] = v8[v36 + 2];
          void *v38 = 0;
          v38[1] = 0;
          void v38[2] = 0;
          v36 += 3;
        }
        while (v38 + 3 != v26);
      }
    }
    else if (a1 != a2)
    {
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      double result = *(__n128 *)a1;
      *a4 = *(__n128 *)a1;
      a4[1].n128_u64[0] = a1[2];
      unint64_t v15 = a1 + 3;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      if (a1 + 3 != a2)
      {
        uint64_t v16 = 0;
        unint64_t v17 = a4;
        do
        {
          uint64_t v18 = v15;
          uint64_t v19 = (__n128 *)((char *)v17 + 24);
          unint64_t v20 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v8[4] - *v15) >> 3) * *(unsigned int *)(*v15 + 4);
          unint64_t v21 = v17->n128_u64[0];
          unint64_t v22 = v17->n128_u64[1];
          if (v20 > 0xEEEEEEEEEEEEEEEFLL
                   * ((uint64_t)(v22 - v17->n128_u64[0]) >> 3)
                   * *(unsigned int *)(v17->n128_u64[0] + 4))
          {
            unint64_t v23 = v17[1].n128_u64[0];
            v17[2].n128_u64[0] = v22;
            v17[2].n128_u64[1] = v23;
            v17->n128_u64[0] = 0;
            v17->n128_u64[1] = 0;
            v17[1].n128_u64[0] = 0;
            v17[1].n128_u64[1] = v21;
            unsigned int v24 = v5;
            if (v17 != v5)
            {
              uint64_t v25 = v16;
              while (1)
              {
                unsigned int v24 = (__n128 *)((char *)v5 + v25);
                if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v8[4] - *v18) >> 3) * *(unsigned int *)(*v18 + 4) <= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(unint64_t *)((char *)v5[-1].n128_u64 + v25) - *(void *)((char *)&v5[-1] + v25 - 8)) >> 3) * *(unsigned int *)(*(void *)((char *)&v5[-1] + v25 - 8) + 4)) {
                  break;
                }
                sub_1CD66AC14((void **)((char *)v5 + v25));
                *unsigned int v24 = *(__n128 *)((char *)v24 - 24);
                v24[1].n128_u64[0] = v24[-1].n128_u64[1];
                *(unint64_t *)((char *)v5[-1].n128_u64 + v25) = 0;
                *(unint64_t *)((char *)&v5->n128_u64[-1] + v25) = 0;
                *(void *)((char *)&v5[-1] + v25 - 8) = 0;
                v25 -= 24;
                if (!v25)
                {
                  unsigned int v24 = v5;
                  break;
                }
              }
            }
            sub_1CD66AC14((void **)v24);
            double result = *(__n128 *)v18;
            *unsigned int v24 = *(__n128 *)v18;
            v24[1].n128_u64[0] = v8[5];
          }
          else
          {
            v19->n128_u64[0] = 0;
            v17[2].n128_u64[0] = 0;
            v17[2].n128_u64[1] = 0;
            double result = *(__n128 *)v18;
            *(__n128 *)((char *)v17 + 24) = *(__n128 *)v18;
            v17[2].n128_u64[1] = v8[5];
          }
          v8[4] = 0;
          v8[5] = 0;
          void *v18 = 0;
          unint64_t v15 = v18 + 3;
          v16 += 24;
          unint64_t v17 = v19;
          uint64_t v8 = v18;
        }
        while (v18 + 3 != a2);
      }
    }
  }
  return result;
}

void sub_1CC93F18C(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return;
      }
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)a2;
      uint64_t v13 = -a4;
      while (1)
      {
        uint64_t v14 = &a1[v11];
        uint64_t v15 = *(void *)&a1[v11];
        if (0xEEEEEEEEEEEEEEEFLL
           * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3)
           * *(unsigned int *)(*(void *)a2 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                    * ((*(void *)&a1[v11 + 8] - v15) >> 3)
                                                    * *(unsigned int *)(v15 + 4))
          break;
        v11 += 24;
        if (__CFADD__(v13++, 1)) {
          return;
        }
      }
      uint64_t v17 = -v13;
      if (-v13 >= a5)
      {
        if (v13 == -1)
        {
          uint64_t v79 = &a1[v11];
          *(void *)uint64_t v79 = v12;
          *(void *)a2 = v15;
          uint64_t v80 = *((void *)v79 + 1);
          *((void *)v79 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v80;
          uint64_t v81 = *((void *)v79 + 2);
          *((void *)v79 + 2) = *((void *)a2 + 2);
          *((void *)a2 + 2) = v81;
          return;
        }
        uint64_t v18 = a6;
        if (v13 > 0) {
          uint64_t v17 = 1 - v13;
        }
        uint64_t v30 = v17 >> 1;
        unint64_t v23 = &a1[24 * (v17 >> 1) + v11];
        unint64_t v21 = a3;
        if (a3 != a2)
        {
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
          unint64_t v21 = a2;
          do
          {
            unint64_t v32 = v31 >> 1;
            uint64_t v33 = (uint64_t *)&v21[24 * (v31 >> 1)];
            uint64_t v35 = *v33;
            uint64_t v36 = v33[1];
            __n128 v34 = (char *)(v33 + 3);
            v31 += ~(v31 >> 1);
            if (0xEEEEEEEEEEEEEEEFLL * ((v36 - v35) >> 3) * *(unsigned int *)(v35 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                                                        * ((uint64_t)(*(void *)&a1[24 * v30 + 8 + v11] - *(void *)v23) >> 3)
                                                                                        * *(unsigned int *)(*(void *)v23 + 4))
              unint64_t v21 = v34;
            else {
              unint64_t v31 = v32;
            }
          }
          while (v31);
        }
        uint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v21 - a2) >> 3);
        unint64_t v29 = &a1[24 * v30 + v11];
      }
      else
      {
        uint64_t v18 = a6;
        if (a5 >= 0) {
          uint64_t v19 = a5;
        }
        else {
          uint64_t v19 = a5 + 1;
        }
        uint64_t v20 = v19 >> 1;
        unint64_t v21 = &a2[24 * (v19 >> 1)];
        if (v14 == a2)
        {
          unint64_t v29 = a2;
          unint64_t v23 = a2;
        }
        else
        {
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1 - v11) >> 3);
          unint64_t v23 = &a1[v11];
          do
          {
            unint64_t v24 = v22 >> 1;
            uint64_t v25 = (uint64_t *)&v23[24 * (v22 >> 1)];
            uint64_t v27 = *v25;
            uint64_t v28 = v25[1];
            __n128 v26 = (char *)(v25 + 3);
            v22 += ~(v22 >> 1);
            if (0xEEEEEEEEEEEEEEEFLL
               * ((uint64_t)(*(void *)&a2[24 * v20 + 8] - *(void *)v21) >> 3)
               * *(unsigned int *)(*(void *)v21 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                         * ((v28 - v27) >> 3)
                                                         * *(unsigned int *)(v27 + 4))
              unint64_t v22 = v24;
            else {
              unint64_t v23 = v26;
            }
          }
          while (v22);
          unint64_t v29 = v23;
        }
        uint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v29 - a1 - v11) >> 3);
      }
      uint64_t v37 = v21;
      if (v23 != a2)
      {
        uint64_t v37 = v29;
        if (a2 != v21)
        {
          uint64_t v38 = *(void *)v29;
          *(void *)unint64_t v29 = v12;
          *(void *)a2 = v38;
          uint64_t v39 = *((void *)v29 + 1);
          *((void *)v29 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v39;
          uint64_t v40 = *((void *)v29 + 2);
          *((void *)v29 + 2) = *((void *)a2 + 2);
          *((void *)a2 + 2) = v40;
          uint64_t v37 = v29 + 24;
          for (uint64_t i = a2 + 24; i != v21; i += 24)
          {
            if (v37 == a2) {
              a2 = i;
            }
            uint64_t v42 = *(void *)v37;
            *(void *)uint64_t v37 = *(void *)i;
            *(void *)uint64_t i = v42;
            uint64_t v43 = *((void *)v37 + 1);
            *((void *)v37 + 1) = *((void *)i + 1);
            *((void *)i + 1) = v43;
            uint64_t v44 = *((void *)v37 + 2);
            *((void *)v37 + 2) = *((void *)i + 2);
            *((void *)i + 2) = v44;
            v37 += 24;
          }
          if (v37 != a2)
          {
            uint64_t v45 = v37;
            uint64_t v46 = a2;
            do
            {
              while (1)
              {
                uint64_t v47 = *(void *)v45;
                *(void *)uint64_t v45 = *(void *)v46;
                *(void *)uint64_t v46 = v47;
                uint64_t v48 = *((void *)v45 + 1);
                *((void *)v45 + 1) = *((void *)v46 + 1);
                *((void *)v46 + 1) = v48;
                uint64_t v49 = *((void *)v45 + 2);
                *((void *)v45 + 2) = *((void *)v46 + 2);
                *((void *)v46 + 2) = v49;
                v45 += 24;
                v46 += 24;
                if (v46 == v21) {
                  break;
                }
                if (v45 == a2) {
                  a2 = v46;
                }
              }
              uint64_t v46 = a2;
            }
            while (v45 != a2);
          }
        }
      }
      a4 = -(v30 + v13);
      uint64_t v50 = a5 - v20;
      if (v30 + v20 >= a5 - (v30 + v20) - v13)
      {
        unsigned int v53 = v18;
        a4 = v30;
        uint64_t v52 = a7;
        uint64_t v50 = v20;
        sub_1CC93F18C(v37, v21);
        unint64_t v21 = v23;
        a6 = v53;
        a3 = v37;
      }
      else
      {
        uint64_t v51 = a3;
        a6 = v18;
        uint64_t v52 = a7;
        sub_1CC93F18C(&a1[v11], v29);
        a3 = v51;
        uint64_t v14 = v37;
      }
      a5 = v50;
      a1 = v14;
      a2 = v21;
      a7 = v52;
      if (!v50) {
        return;
      }
    }
    if (a4 <= a5)
    {
      if (a1 == a2) {
        return;
      }
      unint64_t v66 = 0;
      uint64_t v55 = 0;
      do
      {
        int v67 = &a6[v66 / 8];
        uint64_t v68 = &a1[v66];
        *int v67 = 0;
        v67[1] = 0;
        v67[2] = 0;
        *(_OWORD *)int v67 = *(_OWORD *)&a1[v66];
        v67[2] = *(void **)&a1[v66 + 16];
        ++v55;
        *(void *)uint64_t v68 = 0;
        *((void *)v68 + 1) = 0;
        *((void *)v68 + 2) = 0;
        v66 += 24;
      }
      while (v68 + 24 != a2);
      if (v66)
      {
        unint64_t v69 = a6;
        int v70 = &a6[v66 / 8];
        unint64_t v71 = v70 - 3;
        uint64_t v89 = v69;
        while (a2 != a3)
        {
          uint64_t v72 = a3;
          unint64_t v73 = 0xEEEEEEEEEEEEEEEFLL
              * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3)
              * *(unsigned int *)(*(void *)a2 + 4);
          unint64_t v74 = 0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)v69[1] - (unsigned char *)*v69) >> 3) * *((unsigned int *)*v69 + 1);
          sub_1CD66AC14((void **)a1);
          if (v73 <= v74)
          {
            unint64_t v75 = v69;
            long long v78 = *(_OWORD *)v69;
            v69 += 3;
            long long v77 = v78;
          }
          else
          {
            unint64_t v75 = (void **)a2;
            long long v76 = *(_OWORD *)a2;
            a2 += 24;
            long long v77 = v76;
          }
          *(_OWORD *)a1 = v77;
          *((void *)a1 + 2) = v75[2];
          *unint64_t v75 = 0;
          v75[1] = 0;
          v75[2] = 0;
          a1 += 24;
          a3 = v72;
          if (v70 == v69) {
            goto LABEL_90;
          }
        }
        if (v70 != v69)
        {
          uint64_t v86 = 0;
          do
          {
            uint64_t v87 = &a1[v86 * 8];
            uint64_t v88 = &v69[v86];
            sub_1CD66AC14((void **)&a1[v86 * 8]);
            *(_OWORD *)uint64_t v87 = *(_OWORD *)&v69[v86];
            *((void *)v87 + 2) = v69[v86 + 2];
            *uint64_t v88 = 0;
            v88[1] = 0;
            v88[2] = 0;
            v86 += 3;
          }
          while (v71 != v88);
        }
LABEL_90:
        a6 = v89;
      }
    }
    else
    {
      if (a2 == a3) {
        return;
      }
      unint64_t v54 = 0;
      uint64_t v55 = 0;
      do
      {
        uint64_t v56 = &a6[v54 / 8];
        uint64_t v57 = &a2[v54];
        long long *v56 = 0;
        v56[1] = 0;
        v56[2] = 0;
        *(_OWORD *)uint64_t v56 = *(_OWORD *)&a2[v54];
        v56[2] = *(void **)&a2[v54 + 16];
        ++v55;
        *(void *)uint64_t v57 = 0;
        *((void *)v57 + 1) = 0;
        *((void *)v57 + 2) = 0;
        v54 += 24;
      }
      while (v57 + 24 != a3);
      if (v54)
      {
        uint64_t v58 = a6;
        unint64_t v59 = &a6[v54 / 8];
        uint64_t v60 = (void **)(a3 - 24);
        while (a2 != a1)
        {
          unint64_t v61 = 0xEEEEEEEEEEEEEEEFLL
              * (((unsigned char *)*(v59 - 2) - (unsigned char *)*(v59 - 3)) >> 3)
              * *((unsigned int *)*(v59 - 3) + 1);
          unint64_t v62 = 0xEEEEEEEEEEEEEEEFLL
              * ((uint64_t)(*((void *)a2 - 2) - *((void *)a2 - 3)) >> 3)
              * *(unsigned int *)(*((void *)a2 - 3) + 4);
          sub_1CD66AC14(v60);
          if (v61 <= v62) {
            uint64_t v63 = v59;
          }
          else {
            uint64_t v63 = (void **)a2;
          }
          if (v61 <= v62) {
            uint64_t v64 = v59 - 3;
          }
          else {
            uint64_t v64 = (void **)(a2 - 24);
          }
          if (v61 <= v62) {
            v59 -= 3;
          }
          else {
            a2 -= 24;
          }
          uint64_t v65 = *(v63 - 2);
          *uint64_t v60 = *(v63 - 3);
          v60[1] = v65;
          v60[2] = *(v63 - 1);
          int *v64 = 0;
          v64[1] = 0;
          v64[2] = 0;
          v60 -= 3;
          if (v59 == v58) {
            goto LABEL_91;
          }
        }
        if (v59 == v58)
        {
LABEL_91:
          a6 = v58;
          goto LABEL_92;
        }
        uint64_t v82 = 0;
        BOOL v83 = v58;
        do
        {
          int64_t v84 = &v59[v82];
          uint64_t v85 = &v60[v82];
          sub_1CD66AC14(&v60[v82]);
          *(_OWORD *)uint64_t v85 = *(_OWORD *)&v59[v82 - 3];
          v85[2] = v59[v82 - 1];
          *(v84 - 3) = 0;
          *(v84 - 2) = 0;
          *(v84 - 1) = 0;
          v82 -= 3;
        }
        while (&v59[v82] != v83);
        a6 = v83;
      }
    }
LABEL_92:
    if (a6)
    {
      do
      {
        uint64_t v90 = a6;
        sub_1CBFFD868(&v90);
        a6 += 3;
        --v55;
      }
      while (v55);
    }
  }
}

unint64_t sub_1CC93F840(unint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      uint64_t v7 = *(a2 - 1);
      uint64_t v8 = *(void *)result;
      uint64_t v9 = *(void *)(v7 + 232);
      int v10 = *(_DWORD *)(v7 + 240);
      uint64_t v11 = *(void *)(v7 + 248);
      BOOL v12 = __OFSUB__(v9, v11);
      int64_t v13 = v9 - v11;
      if (v12) {
        int64_t v13 = (v13 >> 63) ^ 0x8000000000000000;
      }
      uint64_t v14 = *(void *)(v8 + 232);
      int v15 = *(_DWORD *)(v8 + 240);
      uint64_t v16 = *(void *)(v8 + 248);
      BOOL v12 = __OFSUB__(v14, v16);
      int64_t v17 = v14 - v16;
      if (v12) {
        int64_t v17 = (v17 >> 63) ^ 0x8000000000000000;
      }
      if (*(_DWORD *)(v8 + 256) == 1) {
        int v15 = 1;
      }
      if (*(_DWORD *)(v7 + 256) == 1) {
        int v10 = 1;
      }
      BOOL v18 = v17 < v13;
      BOOL v19 = v15 == v10;
      BOOL v20 = v15 < v10;
      if (!v19) {
        BOOL v18 = v20;
      }
      if (v18)
      {
        *(void *)double result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v48 = a4;
      unint64_t v49 = a3 >> 1;
      uint64_t v50 = (uint64_t *)(result + 8 * (a3 >> 1));
      unint64_t v51 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CC93FBC4(result, v50, v51, a4);
        uint64_t v52 = &v48[v49];
        double result = sub_1CC93FBC4((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v52);
        unsigned int v53 = &v48[a3];
        unint64_t v54 = v52;
        while (v54 != v53)
        {
          uint64_t v55 = *v54;
          uint64_t v56 = *v48;
          uint64_t v57 = *(void *)(*v54 + 232);
          int v58 = *(_DWORD *)(*v54 + 240);
          uint64_t v59 = *(void *)(*v54 + 248);
          BOOL v12 = __OFSUB__(v57, v59);
          int64_t v60 = v57 - v59;
          if (v12) {
            int64_t v60 = (v60 >> 63) ^ 0x8000000000000000;
          }
          uint64_t v61 = *(void *)(v56 + 232);
          int v62 = *(_DWORD *)(v56 + 240);
          uint64_t v63 = *(void *)(v56 + 248);
          BOOL v12 = __OFSUB__(v61, v63);
          int64_t v64 = v61 - v63;
          double result = (v64 >> 63) ^ 0x8000000000000000;
          if (v12) {
            int64_t v64 = (v64 >> 63) ^ 0x8000000000000000;
          }
          if (*(_DWORD *)(v56 + 256) == 1) {
            int v62 = 1;
          }
          if (*(_DWORD *)(*v54 + 256) == 1) {
            int v58 = 1;
          }
          BOOL v65 = v64 < v60;
          BOOL v19 = v62 == v58;
          BOOL v66 = v62 < v58;
          if (!v19) {
            BOOL v65 = v66;
          }
          if (!v65) {
            uint64_t v55 = *v48;
          }
          v48 += !v65;
          v54 += v65;
          *v6++ = v55;
          if (v48 == v52)
          {
            if (v54 != v53)
            {
              uint64_t v67 = 0;
              do
              {
                v6[v67] = v54[v67];
                ++v67;
              }
              while (&v54[v67] != v53);
            }
            return result;
          }
        }
        if (v48 != v52)
        {
          uint64_t v68 = 0;
          do
          {
            v6[v68] = v48[v68];
            ++v68;
          }
          while (&v48[v68] != v52);
        }
      }
      else
      {
        sub_1CC93F840(result, v50, v51, a4, a5);
        sub_1CC93F840(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v48, a5);
        return sub_1CC93FF20((uint64_t)v6, (char *)&v6[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v48, a5);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      unint64_t v22 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        uint64_t v23 = 0;
        unint64_t v24 = (uint64_t *)result;
        do
        {
          uint64_t v25 = *v24;
          unint64_t v24 = v22;
          uint64_t v26 = *v22;
          uint64_t v27 = *(void *)(v26 + 232);
          int v28 = *(_DWORD *)(v26 + 240);
          int v29 = *(_DWORD *)(v26 + 256);
          uint64_t v30 = *(void *)(v26 + 248);
          BOOL v12 = __OFSUB__(v27, v30);
          int64_t v31 = v27 - v30;
          if (v12) {
            int64_t v31 = (v31 >> 63) ^ 0x8000000000000000;
          }
          uint64_t v32 = *(void *)(v25 + 232);
          int v33 = *(_DWORD *)(v25 + 240);
          uint64_t v34 = *(void *)(v25 + 248);
          BOOL v12 = __OFSUB__(v32, v34);
          int64_t v35 = v32 - v34;
          double result = (v35 >> 63) ^ 0x8000000000000000;
          if (v12) {
            int64_t v35 = (v35 >> 63) ^ 0x8000000000000000;
          }
          if (*(_DWORD *)(v25 + 256) == 1) {
            int v33 = 1;
          }
          if (v29 == 1) {
            int v28 = 1;
          }
          BOOL v36 = v35 < v31;
          BOOL v19 = v33 == v28;
          BOOL v37 = v33 < v28;
          if (v19) {
            BOOL v37 = v36;
          }
          if (v37)
          {
            uint64_t v38 = v23;
            while (1)
            {
              *(uint64_t *)((char *)v6 + v38 + 8) = v25;
              if (!v38) {
                break;
              }
              uint64_t v25 = *(uint64_t *)((char *)v6 + v38 - 8);
              int v39 = *(_DWORD *)(v26 + 240);
              uint64_t v40 = *(void *)(v25 + 232);
              int v41 = *(_DWORD *)(v25 + 240);
              double result = *(unsigned int *)(v25 + 256);
              uint64_t v42 = *(void *)(v25 + 248);
              BOOL v12 = __OFSUB__(v40, v42);
              int64_t v43 = v40 - v42;
              if (v12) {
                int64_t v43 = (v43 >> 63) ^ 0x8000000000000000;
              }
              if (result == 1) {
                int v41 = 1;
              }
              if (v29 == 1) {
                int v39 = 1;
              }
              BOOL v44 = v43 < v31;
              BOOL v19 = v41 == v39;
              BOOL v45 = v41 < v39;
              if (v19) {
                BOOL v45 = v44;
              }
              v38 -= 8;
              if (!v45)
              {
                uint64_t v46 = (uint64_t *)((char *)v6 + v38 + 8);
                goto LABEL_43;
              }
            }
            uint64_t v46 = v6;
LABEL_43:
            *uint64_t v46 = v26;
          }
          unint64_t v22 = v24 + 1;
          v23 += 8;
        }
        while (v24 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CC93FBC4(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = (uint64_t *)result;
    if (a3 == 1)
    {
LABEL_18:
      uint64_t *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *(void *)result;
      uint64_t v10 = *(void *)(v8 + 232);
      int v11 = *(_DWORD *)(v8 + 240);
      uint64_t v12 = *(void *)(v8 + 248);
      BOOL v13 = __OFSUB__(v10, v12);
      int64_t v14 = v10 - v12;
      if (v13) {
        int64_t v14 = (v14 >> 63) ^ 0x8000000000000000;
      }
      uint64_t v15 = *(void *)(v9 + 232);
      int v16 = *(_DWORD *)(v9 + 240);
      uint64_t v17 = *(void *)(v9 + 248);
      BOOL v13 = __OFSUB__(v15, v17);
      int64_t v18 = v15 - v17;
      if (v13) {
        int64_t v18 = (v18 >> 63) ^ 0x8000000000000000;
      }
      if (*(_DWORD *)(v9 + 256) == 1) {
        int v16 = 1;
      }
      if (*(_DWORD *)(v8 + 256) == 1) {
        int v11 = 1;
      }
      BOOL v19 = v18 < v14;
      BOOL v20 = v16 == v11;
      BOOL v21 = v16 < v11;
      if (!v20) {
        BOOL v19 = v21;
      }
      if (!v19) {
        uint64_t v8 = *(void *)result;
      }
      *a4 = v8;
      uint64_t v4 = a4 + 1;
      if (!v19) {
        uint64_t v6 = a2 - 1;
      }
      goto LABEL_18;
    }
    if ((uint64_t)a3 > 8)
    {
      uint64_t v50 = (uint64_t *)(result + 8 * (a3 >> 1));
      sub_1CC93F840(result, v50, a3 >> 1, a4, a3 >> 1);
      double result = sub_1CC93F840(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v51 = &v6[a3 >> 1];
      while (v51 != a2)
      {
        uint64_t v52 = *v51;
        uint64_t v53 = *v6;
        uint64_t v54 = *(void *)(*v51 + 232);
        int v55 = *(_DWORD *)(*v51 + 240);
        uint64_t v56 = *(void *)(*v51 + 248);
        BOOL v13 = __OFSUB__(v54, v56);
        int64_t v57 = v54 - v56;
        if (v13) {
          int64_t v57 = (v57 >> 63) ^ 0x8000000000000000;
        }
        uint64_t v58 = *(void *)(v53 + 232);
        int v59 = *(_DWORD *)(v53 + 240);
        uint64_t v60 = *(void *)(v53 + 248);
        BOOL v13 = __OFSUB__(v58, v60);
        int64_t v61 = v58 - v60;
        if (v13) {
          int64_t v61 = (v61 >> 63) ^ 0x8000000000000000;
        }
        if (*(_DWORD *)(v53 + 256) == 1) {
          int v59 = 1;
        }
        if (*(_DWORD *)(*v51 + 256) == 1) {
          int v55 = 1;
        }
        BOOL v62 = v61 < v57;
        BOOL v20 = v59 == v55;
        BOOL v63 = v59 < v55;
        if (!v20) {
          BOOL v62 = v63;
        }
        if (!v62) {
          uint64_t v52 = *v6;
        }
        v51 += v62;
        v6 += !v62;
        *v4++ = v52;
        if (v6 == v50)
        {
          if (v51 != a2)
          {
            uint64_t v64 = 0;
            do
            {
              v4[v64] = v51[v64];
              ++v64;
            }
            while (&v51[v64] != a2);
          }
          return result;
        }
      }
      if (v6 != v50)
      {
        uint64_t v65 = 0;
        do
        {
          v4[v65] = v6[v65];
          ++v65;
        }
        while (&v6[v65] != v50);
      }
    }
    else if ((void *)result != a2)
    {
      uint64_t v22 = result + 8;
      *a4 = *(void *)result;
      if ((void *)(result + 8) != a2)
      {
        uint64_t v23 = 0;
        unint64_t v24 = a4;
        uint64_t v25 = a4;
        do
        {
          uint64_t v27 = *v25++;
          uint64_t v26 = v27;
          uint64_t v28 = *(void *)(*(void *)v22 + 232);
          int v29 = *(_DWORD *)(*(void *)v22 + 240);
          uint64_t v30 = *(void *)(*(void *)v22 + 248);
          BOOL v13 = __OFSUB__(v28, v30);
          int64_t v31 = v28 - v30;
          if (v13) {
            int64_t v31 = (v31 >> 63) ^ 0x8000000000000000;
          }
          uint64_t v32 = *(void *)(v26 + 232);
          int v33 = *(_DWORD *)(v26 + 240);
          double result = *(unsigned int *)(v26 + 256);
          uint64_t v34 = *(void *)(v26 + 248);
          BOOL v13 = __OFSUB__(v32, v34);
          int64_t v35 = v32 - v34;
          if (v13) {
            int64_t v35 = (v35 >> 63) ^ 0x8000000000000000;
          }
          if (result == 1) {
            int v33 = 1;
          }
          if (*(_DWORD *)(*(void *)v22 + 256) == 1) {
            int v29 = 1;
          }
          BOOL v36 = v35 < v31;
          BOOL v20 = v33 == v29;
          BOOL v37 = v33 < v29;
          if (!v20) {
            BOOL v36 = v37;
          }
          if (v36)
          {
            v24[1] = v26;
            uint64_t v38 = a4;
            if (v24 != a4)
            {
              uint64_t v39 = v23;
              while (1)
              {
                uint64_t v38 = (uint64_t *)((char *)a4 + v39);
                uint64_t v40 = *(uint64_t *)((char *)a4 + v39 - 8);
                uint64_t v41 = *(void *)(*(void *)v22 + 232);
                int v42 = *(_DWORD *)(*(void *)v22 + 240);
                uint64_t v43 = *(void *)(*(void *)v22 + 248);
                BOOL v13 = __OFSUB__(v41, v43);
                int64_t v44 = v41 - v43;
                if (v13) {
                  int64_t v44 = (v44 >> 63) ^ 0x8000000000000000;
                }
                uint64_t v45 = *(void *)(v40 + 232);
                int v46 = *(_DWORD *)(v40 + 240);
                double result = *(unsigned int *)(v40 + 256);
                uint64_t v47 = *(void *)(v40 + 248);
                BOOL v13 = __OFSUB__(v45, v47);
                int64_t v48 = v45 - v47;
                if (v13) {
                  int64_t v48 = (v48 >> 63) ^ 0x8000000000000000;
                }
                if (result == 1) {
                  int v46 = 1;
                }
                if (*(_DWORD *)(*(void *)v22 + 256) == 1) {
                  int v42 = 1;
                }
                BOOL v49 = v48 < v44;
                if (v46 != v42) {
                  BOOL v49 = v46 < v42;
                }
                if (!v49) {
                  break;
                }
                uint64_t *v38 = v40;
                v39 -= 8;
                if (!v39)
                {
                  uint64_t v38 = a4;
                  break;
                }
              }
            }
            uint64_t *v38 = *(void *)v22;
          }
          else
          {
            *uint64_t v25 = *(void *)v22;
          }
          v22 += 8;
          v23 += 8;
          unint64_t v24 = v25;
        }
        while ((void *)v22 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CC93FF20(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v7 = a5;
    uint64_t v10 = (char *)result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(*(void *)a2 + 232);
      int v13 = *(_DWORD *)(*(void *)a2 + 240);
      uint64_t v14 = *(void *)(*(void *)a2 + 248);
      BOOL v15 = __OFSUB__(v12, v14);
      int64_t v16 = v12 - v14;
      if (v15) {
        int64_t v16 = (v16 >> 63) ^ 0x8000000000000000;
      }
      if (*(_DWORD *)(*(void *)a2 + 256) == 1) {
        int v13 = 1;
      }
      uint64_t v17 = -a4;
      while (1)
      {
        uint64_t v18 = *(void *)&v10[v11];
        uint64_t v19 = *(void *)(v18 + 232);
        int v20 = *(_DWORD *)(v18 + 240);
        uint64_t v21 = *(void *)(v18 + 248);
        BOOL v15 = __OFSUB__(v19, v21);
        int64_t v22 = v19 - v21;
        if (v15) {
          int64_t v22 = (v22 >> 63) ^ 0x8000000000000000;
        }
        if (*(_DWORD *)(v18 + 256) == 1) {
          int v20 = 1;
        }
        BOOL v23 = v22 < v16;
        BOOL v69 = v20 == v13;
        BOOL v24 = v20 < v13;
        if (!v69) {
          BOOL v23 = v24;
        }
        if (v23) {
          break;
        }
        v11 += 8;
        if (__CFADD__(v17++, 1)) {
          return result;
        }
      }
      uint64_t v26 = &v10[v11];
      if (-v17 >= v7)
      {
        if (v17 == -1)
        {
          *(void *)&v10[v11] = *(void *)a2;
          *(void *)a2 = v18;
          return result;
        }
        if (v17 <= 0) {
          uint64_t v48 = -v17;
        }
        else {
          uint64_t v48 = 1 - v17;
        }
        uint64_t v49 = v48 >> 1;
        int64_t v35 = &v10[8 * (v48 >> 1) + v11];
        int v29 = a3;
        if (a3 != a2)
        {
          unint64_t v50 = (a3 - a2) >> 3;
          uint64_t v51 = *(void *)(*(void *)v35 + 232);
          uint64_t v52 = *(void *)(*(void *)v35 + 248);
          BOOL v15 = __OFSUB__(v51, v52);
          int64_t v53 = v51 - v52;
          if (v15) {
            int64_t v53 = (v53 >> 63) ^ 0x8000000000000000;
          }
          if (*(_DWORD *)(*(void *)v35 + 256) == 1) {
            int v54 = 1;
          }
          else {
            int v54 = *(_DWORD *)(*(void *)v35 + 240);
          }
          int v29 = a2;
          do
          {
            unint64_t v55 = v50 >> 1;
            uint64_t v56 = &v29[8 * (v50 >> 1)];
            uint64_t v58 = *(void *)v56;
            int64_t v57 = v56 + 8;
            uint64_t v59 = *(void *)(v58 + 232);
            int v60 = *(_DWORD *)(v58 + 240);
            int v61 = *(_DWORD *)(v58 + 256);
            uint64_t v62 = *(void *)(v58 + 248);
            BOOL v15 = __OFSUB__(v59, v62);
            int64_t v63 = v59 - v62;
            if (v15) {
              int64_t v63 = (v63 >> 63) ^ 0x8000000000000000;
            }
            if (v61 == 1) {
              int v64 = 1;
            }
            else {
              int v64 = v60;
            }
            BOOL v65 = v53 < v63;
            BOOL v69 = v54 == v64;
            BOOL v66 = v54 < v64;
            if (!v69) {
              BOOL v65 = v66;
            }
            v50 += ~(v50 >> 1);
            if (v65) {
              int v29 = v57;
            }
            else {
              unint64_t v50 = v55;
            }
          }
          while (v50);
        }
        uint64_t v28 = (v29 - a2) >> 3;
      }
      else
      {
        if (v7 >= 0) {
          uint64_t v27 = v7;
        }
        else {
          uint64_t v27 = v7 + 1;
        }
        uint64_t v28 = v27 >> 1;
        int v29 = &a2[8 * (v27 >> 1)];
        if (v26 == a2)
        {
          int64_t v35 = a2;
        }
        else
        {
          unint64_t v30 = (a2 - v10 - v11) >> 3;
          uint64_t v31 = *(void *)(*(void *)v29 + 232);
          uint64_t v32 = *(void *)(*(void *)v29 + 248);
          BOOL v15 = __OFSUB__(v31, v32);
          int64_t v33 = v31 - v32;
          if (v15) {
            int64_t v33 = (v33 >> 63) ^ 0x8000000000000000;
          }
          if (*(_DWORD *)(*(void *)v29 + 256) == 1) {
            int v34 = 1;
          }
          else {
            int v34 = *(_DWORD *)(*(void *)v29 + 240);
          }
          int64_t v35 = &v10[v11];
          do
          {
            unint64_t v36 = v30 >> 1;
            BOOL v37 = &v35[8 * (v30 >> 1)];
            uint64_t v39 = *(void *)v37;
            uint64_t v38 = v37 + 8;
            uint64_t v40 = *(void *)(v39 + 232);
            int v41 = *(_DWORD *)(v39 + 240);
            int v42 = *(_DWORD *)(v39 + 256);
            uint64_t v43 = *(void *)(v39 + 248);
            BOOL v15 = __OFSUB__(v40, v43);
            int64_t v44 = v40 - v43;
            if (v15) {
              int64_t v44 = (v44 >> 63) ^ 0x8000000000000000;
            }
            if (v42 == 1) {
              int v45 = 1;
            }
            else {
              int v45 = v41;
            }
            BOOL v46 = v44 < v33;
            BOOL v69 = v45 == v34;
            BOOL v47 = v45 < v34;
            if (!v69) {
              BOOL v46 = v47;
            }
            v30 += ~(v30 >> 1);
            if (v46) {
              unint64_t v30 = v36;
            }
            else {
              int64_t v35 = v38;
            }
          }
          while (v30);
        }
        uint64_t v49 = (v35 - v10 - v11) >> 3;
      }
      uint64_t v67 = v29;
      if (v35 != a2)
      {
        uint64_t v67 = v35;
        if (a2 != v29)
        {
          if (v35 + 8 == a2)
          {
            uint64_t v130 = *(void *)v35;
            uint64_t v132 = v49;
            int64_t v73 = v29 - a2;
            uint64_t v136 = a6;
            uint64_t v138 = a7;
            unint64_t v74 = a3;
            uint64_t v134 = v28;
            memmove(v35, a2, v29 - a2);
            uint64_t v49 = v132;
            uint64_t v28 = v134;
            uint64_t v26 = &v10[v11];
            a6 = v136;
            a7 = v138;
            a3 = v74;
            uint64_t v67 = &v35[v73];
            *(void *)uint64_t v67 = v130;
          }
          else if (a2 + 8 == v29)
          {
            uint64_t v75 = *((void *)v29 - 1);
            uint64_t v67 = v35 + 8;
            if (v29 - 8 != v35)
            {
              uint64_t v137 = a6;
              uint64_t v139 = a7;
              long long v76 = a3;
              uint64_t v133 = v49;
              uint64_t v135 = v28;
              uint64_t v131 = *((void *)v29 - 1);
              memmove(v35 + 8, v35, v29 - 8 - v35);
              uint64_t v75 = v131;
              uint64_t v49 = v133;
              uint64_t v28 = v135;
              a6 = v137;
              uint64_t v26 = &v10[v11];
              a7 = v139;
              a3 = v76;
            }
            *(void *)int64_t v35 = v75;
          }
          else
          {
            uint64_t v68 = (a2 - v35) >> 3;
            if (v68 == (v29 - a2) >> 3)
            {
              BOOL v69 = a2 == v29 || v35 == a2;
              if (!v69)
              {
                int v70 = v35 + 8;
                unint64_t v71 = a2 + 8;
                do
                {
                  uint64_t v72 = *((void *)v70 - 1);
                  *((void *)v70 - 1) = *((void *)v71 - 1);
                  *((void *)v71 - 1) = v72;
                  if (v70 == a2) {
                    break;
                  }
                  v70 += 8;
                  BOOL v69 = v71 == v29;
                  v71 += 8;
                }
                while (!v69);
              }
              uint64_t v67 = a2;
            }
            else
            {
              uint64_t v77 = (v29 - a2) >> 3;
              uint64_t v78 = (a2 - v35) >> 3;
              do
              {
                uint64_t v79 = v78;
                uint64_t v78 = v77;
                uint64_t v77 = v79 % v77;
              }
              while (v77);
              if (v78)
              {
                uint64_t v80 = &v35[8 * v78];
                do
                {
                  uint64_t v82 = *((void *)v80 - 1);
                  v80 -= 8;
                  uint64_t v81 = v82;
                  BOOL v83 = &v80[8 * v68];
                  int64_t v84 = v80;
                  do
                  {
                    uint64_t v85 = v83;
                    *(void *)int64_t v84 = *(void *)v83;
                    uint64_t v86 = &v83[8 * v68];
                    BOOL v15 = __OFSUB__(v68, (v29 - v83) >> 3);
                    uint64_t v88 = v68 - ((v29 - v83) >> 3);
                    char v87 = (v88 < 0) ^ v15;
                    BOOL v83 = &v35[8 * v88];
                    if (v87) {
                      BOOL v83 = v86;
                    }
                    int64_t v84 = v85;
                  }
                  while (v83 != v80);
                  *(void *)uint64_t v85 = v81;
                }
                while (v80 != v35);
              }
              uint64_t v67 = &v35[8 * ((v29 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v49 + v17);
      uint64_t v89 = v7 - v28;
      if (v49 + v28 >= v7 - (v49 + v28) - v17)
      {
        uint64_t v96 = v28;
        uint64_t v97 = v7 - v28;
        uint64_t v98 = a6;
        uint64_t v99 = a7;
        uint64_t v100 = v26;
        a4 = v49;
        double result = sub_1CC93FF20(v67, v29, a3, -(v49 + v17), v97);
        unint64_t v95 = v100;
        a7 = v99;
        a6 = v98;
        int v29 = v35;
        uint64_t v89 = v96;
        a3 = v67;
      }
      else
      {
        uint64_t v90 = &v10[v11];
        uint64_t v91 = v35;
        uint64_t v92 = a3;
        unsigned int v93 = a6;
        uint64_t v94 = a7;
        double result = sub_1CC93FF20(v90, v91, v67, v49, v28);
        a7 = v94;
        a3 = v92;
        a6 = v93;
        unint64_t v95 = v67;
      }
      uint64_t v7 = v89;
      uint64_t v10 = v95;
      a2 = v29;
      if (!v89) {
        return result;
      }
    }
    if (a4 <= v7)
    {
      if (v10 != a2)
      {
        unint64_t v115 = 0;
        do
        {
          a6[v115 / 8] = *(void *)&v10[v115];
          v115 += 8;
        }
        while (&v10[v115] != a2);
        if (v115)
        {
          uint64_t v116 = a6;
          while (a2 != a3)
          {
            uint64_t v117 = *(void *)a2;
            uint64_t v118 = *v116;
            uint64_t v119 = *(void *)(*(void *)a2 + 232);
            int v120 = *(_DWORD *)(*(void *)a2 + 240);
            uint64_t v121 = *(void *)(*(void *)a2 + 248);
            BOOL v15 = __OFSUB__(v119, v121);
            int64_t v122 = v119 - v121;
            if (v15) {
              int64_t v122 = (v122 >> 63) ^ 0x8000000000000000;
            }
            uint64_t v123 = *(void *)(v118 + 232);
            int v124 = *(_DWORD *)(v118 + 240);
            double result = *(unsigned int *)(v118 + 256);
            uint64_t v125 = *(void *)(v118 + 248);
            BOOL v15 = __OFSUB__(v123, v125);
            int64_t v126 = v123 - v125;
            if (v15) {
              int64_t v126 = (v126 >> 63) ^ 0x8000000000000000;
            }
            if (result == 1) {
              int v124 = 1;
            }
            if (*(_DWORD *)(*(void *)a2 + 256) == 1) {
              int v120 = 1;
            }
            BOOL v127 = v126 < v122;
            BOOL v69 = v124 == v120;
            BOOL v128 = v124 < v120;
            if (!v69) {
              BOOL v127 = v128;
            }
            if (!v127) {
              uint64_t v117 = *v116;
            }
            a2 += 8 * v127;
            v116 += !v127;
            *(void *)uint64_t v10 = v117;
            v10 += 8;
            if (&a6[v115 / 8] == v116) {
              return result;
            }
          }
          return (uint64_t)memmove(v10, v116, (char *)a6 - (char *)v116 + v115);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v101 = 0;
      do
      {
        a6[v101] = *(void *)&a2[v101 * 8];
        ++v101;
      }
      while (&a2[v101 * 8] != a3);
      if (v101 * 8)
      {
        uint64_t v102 = &a6[v101];
        uint64_t v103 = a3 - 8;
        while (a2 != v10)
        {
          uint64_t v104 = *(v102 - 1);
          uint64_t v105 = *((void *)a2 - 1);
          uint64_t v106 = *(void *)(v104 + 232);
          int v107 = *(_DWORD *)(v104 + 240);
          uint64_t v108 = *(void *)(v104 + 248);
          BOOL v15 = __OFSUB__(v106, v108);
          int64_t v109 = v106 - v108;
          if (v15) {
            int64_t v109 = (v109 >> 63) ^ 0x8000000000000000;
          }
          uint64_t v110 = *(void *)(v105 + 232);
          LODWORD(result) = *(_DWORD *)(v105 + 240);
          uint64_t v111 = *(void *)(v105 + 248);
          BOOL v15 = __OFSUB__(v110, v111);
          int64_t v112 = v110 - v111;
          if (v15) {
            int64_t v112 = (v112 >> 63) ^ 0x8000000000000000;
          }
          if (*(_DWORD *)(v105 + 256) == 1) {
            double result = 1;
          }
          else {
            double result = result;
          }
          if (*(_DWORD *)(v104 + 256) == 1) {
            int v107 = 1;
          }
          BOOL v113 = v112 < v109;
          BOOL v69 = result == v107;
          BOOL v114 = (int)result < v107;
          if (!v69) {
            BOOL v113 = v114;
          }
          if (v113)
          {
            uint64_t v104 = *((void *)a2 - 1);
            a2 -= 8;
          }
          else
          {
            --v102;
          }
          *(void *)uint64_t v103 = v104;
          v103 -= 8;
          if (v102 == a6) {
            return result;
          }
        }
        if (v102 != a6)
        {
          uint64_t v129 = 0;
          do
          {
            *(void *)&v103[v129 * 8] = v102[v129 - 1];
            --v129;
          }
          while (&v102[v129] != a6);
        }
      }
    }
  }
  return result;
}

void sub_1CC940610()
{
}

void *sub_1CC940624(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F2628918;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC94066C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2628918;
  a2[1] = v2;
  return result;
}

void sub_1CC940698()
{
}

void sub_1CC9406C8()
{
}

void *sub_1CC9406DC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F2628960;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC940724(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2628960;
  a2[1] = v2;
  return result;
}

void sub_1CC940750()
{
}

void sub_1CC940780()
{
}

void *sub_1CC940794(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F26289A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC9407DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26289A8;
  a2[1] = v2;
  return result;
}

void sub_1CC940808()
{
}

uint64_t sub_1CC940874()
{
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable the IR outliner on linkonceodr functions";
  v1.n128_u64[1] = 47;
  char v3 = 0;
  uint64_t v4 = &v3;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCE0048, "enable-linkonceodr-ir-outlining", &v2, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE0048, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 2;
  v1.n128_u64[0] = (unint64_t)"Debug option to outline greedily, without restriction that calculated benefit outweighs cost";
  v1.n128_u64[1] = 92;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE0108, "ir-outlining-no-cost", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE0108, &dword_1CB82C000);
}

uint64_t sub_1CC940960(uint64_t a1, llvm::Function *a2, uint64_t a3)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 != a1 + 24)
  {
    int v7 = 0;
    while (1)
    {
      if (v4) {
        uint64_t v8 = v4 - 56;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v4 && *(unsigned char *)(v8 + 16) == 3)
      {
        if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 0) {
          goto LABEL_17;
        }
      }
      else if (*(unsigned char *)(v8 + 16) || *(void *)(v8 + 72) != v8 + 72 || (*(unsigned char *)(v8 + 34) & 0x80) != 0)
      {
        goto LABEL_17;
      }
      uint64_t v9 = *(void *)(v8 + 112);
      if (!v9) {
        goto LABEL_12;
      }
      if ((*(unsigned char *)(v9 + 17) & 8) == 0)
      {
        if ((*(unsigned char *)(v9 + 14) & 0x10) == 0)
        {
LABEL_12:
          uint64_t v10 = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t))a2)(a3, v8);
          v7 |= llvm::inferLibFuncAttributes((uint64_t ***)v8, v10);
        }
        v7 |= llvm::inferAttributesFromOthers((llvm *)v8, a2);
      }
LABEL_17:
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v3) {
        return v7 & 1;
      }
    }
  }
  LOBYTE(v7) = 0;
  return v7 & 1;
}

void llvm::initializeInferFunctionAttrsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE01D0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC940AB8;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE01D0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC940AB8(uint64_t a1)
{
}

uint64_t sub_1CC940B58(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE01C8;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F26289F0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE01D0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC940AB8;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCE01D0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC940C08()
{
}

void sub_1CC940C48(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC940C80(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1CC940C90(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }
  unsigned int v5 = a1;
  return sub_1CC940960((uint64_t)a2, (llvm::Function *)sub_1CC940CEC, (uint64_t)&v5);
}

void sub_1CC940CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)unint64_t v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

void sub_1CC941014()
{
}

void llvm::initializeSimpleInlinerPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE01E0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC9410B0;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE01E0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC9410B0(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeCallGraphWrapperPassPass(a1, v2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CC941170(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE01D8;
  *(_DWORD *)(a1 + 24) = 3;
  *(unsigned char *)(a1 + 28) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0x1000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)a1 = &unk_1F2628A90;
  InlineParams = (llvm::PassRegistry *)llvm::getInlineParams(dword_1EBD039A0, a1 + 160);
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(InlineParams);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE01E0, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC9410B0;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCE01E0, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::createFunctionInliningPass(llvm *this)
{
}

{
  operator new();
}

uint64_t sub_1CC9412AC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE01D8;
  *(_DWORD *)(a1 + 24) = 3;
  *(unsigned char *)(a1 + 28) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0x1000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)a1 = &unk_1F2628A90;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 192) = v4;
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 176) = v3;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE01E0, memory_order_acquire) != -1)
  {
    v9[0] = sub_1CC9410B0;
    v9[1] = &PassRegistry;
    uint64_t v8 = v9;
    std::__call_once(&qword_1EBCE01E0, &v8, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::createFunctionInliningPass()
{
}

void sub_1CC9413FC()
{
}

void sub_1CC94143C(llvm::Pass *a1)
{
  sub_1CD63B9CC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC941474(llvm::LegacyInlinerBase *a1, llvm::AnalysisUsage *a2)
{
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  llvm::LegacyInlinerBase::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC9414C0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  *(void *)(a1 + 232) = (*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::TargetTransformInfoWrapperPass::ID);

  return llvm::LegacyInlinerBase::runOnSCC(a1, a2);
}

uint64_t sub_1CC941568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v30[34] = *MEMORY[0x1E4F143B8];
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(*(llvm::TargetTransformInfoWrapperPass **)(a1 + 232), *(const Function **)(a2 - 32));
  uint64_t v7 = *(const llvm::Function **)(*(void *)(a2 + 40) + 56);
  if (*((const llvm::Function **)v7 + 9) == (const llvm::Function *)((char *)v7 + 72))
  {
    uint64_t v8 = 0;
    goto LABEL_3;
  }
  BOOL v24 = 0;
  uint64_t v8 = &v22;
  llvm::DiagnosticLocation::DiagnosticLocation(&v22, (const llvm::DebugLoc *)&v24);
  uint64_t v12 = *((void *)v7 + 10);
  if (v12) {
    uint64_t v13 = v12 - 24;
  }
  else {
    uint64_t v13 = 0;
  }
  llvm::OptimizationRemark::OptimizationRemark((uint64_t)v26, (uint64_t)"inline", (uint64_t)"", 0, &v22, v13);
  if (v24)
  {
    int v14 = *v24;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        uint64_t v18 = v24;
      }
      else {
        uint64_t v18 = 0;
      }
      if ((v14 - 3) < 0xFFFFFFFE)
      {
        if (v14 == 3) {
          *((void *)v24 + 1) = 0;
        }
        goto LABEL_19;
      }
      unint64_t v19 = (unint64_t)(v18 + 8);
    }
    else
    {
      if ((v24[1] & 0x7F) != 2 && !*((_DWORD *)v24 + 3)) {
        goto LABEL_19;
      }
      uint64_t v20 = *((void *)v24 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_19;
      }
      unint64_t v19 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v19) {
        goto LABEL_19;
      }
    }
    long long v25 = &v24;
    sub_1CC5FA668(v19 + 16, &v25);
  }
LABEL_19:
  if (!llvm::OptimizationRemark::isEnabled(v26)) {
    uint64_t v8 = 0;
  }
  v26[0] = (llvm::Function *)&unk_1F2616800;
  uint64_t v15 = (char *)v28;
  if (v29)
  {
    unint64_t v16 = (unint64_t)v29 << 6;
    do
    {
      uint64_t v17 = (void **)&v15[v16];
      if (v15[v16 - 17] < 0) {
        operator delete(*(v17 - 5));
      }
      if (*((char *)v17 - 41) < 0) {
        operator delete(*(v17 - 8));
      }
      v16 -= 64;
    }
    while (v16);
    uint64_t v15 = (char *)v28;
  }
  if (v15 != (char *)v30) {
    free(v15);
  }
  uint64_t v7 = *(const llvm::Function **)(*(void *)(a2 + 40) + 56);
LABEL_3:
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(&v22, v7);
  v26[0] = (llvm::Function *)&unk_1F2628B48;
  v26[1] = (llvm::Function *)a1;
  long long v27 = v26;
  llvm::getInlineCost(a2, a1 + 160, (llvm::BasicBlock *)TTI, (uint64_t)sub_1CC026170, (uint64_t)v26, (uint64_t (*)(uint64_t, const llvm::Function *))sub_1CC792608, a1 + 48, a3, 0, v21, *(void *)(a1 + 40), (uint64_t)v8);
  uint64_t result = (uint64_t)v27;
  if (v27 == v26)
  {
    uint64_t result = (*((uint64_t (**)(llvm::Function **))v26[0] + 4))(v26);
  }
  else if (v27)
  {
    uint64_t result = (*((uint64_t (**)(void))*v27 + 5))();
  }
  long long v10 = v23;
  char v23 = 0;
  if (v10)
  {
    uint64_t v11 = *v10;
    uint64_t *v10 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    return MEMORY[0x1D25D9CE0](v10, 0x20C4093837F09);
  }
  return result;
}

void sub_1CC9418A4()
{
}

void *sub_1CC9418B8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2628B48;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC941900(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2628B48;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC94192C(uint64_t a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(*(llvm::AssumptionCacheTracker **)(*(void *)(a1 + 8) + 32), a2);
}

uint64_t llvm::LegacyInlinerBase::doInitialization(llvm::LegacyInlinerBase *this, const llvm::Module **a2)
{
  if (dword_1EBD03508) {
    llvm::ImportedFunctionsInliningStatistics::setModuleInfo((uint64_t)this + 80, *a2);
  }
  return 0;
}

uint64_t llvm::LegacyInlinerBase::inlineCalls(uint64_t a1, uint64_t a2)
{
  v184[34] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::CallGraphWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  BOOL v114 = *(void **)((*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::CallGraphWrapperPass::ID)+ 32);
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(char **)v8 != llvm::AssumptionCacheTracker::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t, char *))(*(void *)v10 + 96))(v10, llvm::AssumptionCacheTracker::ID);
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_14:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(char **)v12 != llvm::ProfileSummaryInfoWrapperPass::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_14;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  *(void *)(a1 + 40) = *(void *)((*(uint64_t (**)(uint64_t, char *))(*(void *)v14 + 96))(v14, llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  uint64_t v15 = (llvm **)(a1 + 48);
  unint64_t v16 = (llvm *)&unk_1F2629008;
  uint64_t v137 = (llvm *)&unk_1F2629008;
  uint64_t v138 = a1;
  uint64_t v139 = &v137;
  if ((llvm **)(a1 + 48) != &v137)
  {
    uint64_t v17 = *(llvm ***)(a1 + 72);
    if (v17 == v15)
    {
      uint64_t v151 = (void (**)(void **, uint64_t))&unk_1F2629008;
      uint64_t v152 = (uint64_t (*)(uint64_t))a1;
      uint64_t v139 = 0;
      (*(void (**)(uint64_t, llvm **))(*(void *)(a1 + 48) + 24))(a1 + 48, &v137);
      (*(void (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
      *(void *)(a1 + 72) = 0;
      uint64_t v139 = &v137;
      v151[3]((void **)&v151, a1 + 48);
      ((void (*)(void (***)(void **, uint64_t)))v151[4])(&v151);
      uint64_t v17 = v139;
    }
    else
    {
      *(void *)(a1 + 48) = &unk_1F2629008;
      *(void *)(a1 + 56) = a1;
      uint64_t v139 = v17;
    }
    *(void *)(a1 + 72) = v15;
    if (v17 != &v137)
    {
      if (v17) {
        (*((void (**)(llvm **))*v17 + 5))(v17);
      }
      goto LABEL_25;
    }
    unint64_t v16 = v137;
  }
  (*((void (**)(llvm **))v16 + 4))(&v137);
LABEL_25:
  v149[0] = &unk_1F2629050;
  v149[1] = a1;
  int v150 = v149;
  uint64_t v18 = *(void *)(a1 + 40);
  sub_1CBFF6D30((uint64_t)v147, a1 + 48);
  uint64_t v117 = a1;
  uint64_t v137 = (llvm *)a1;
  LOBYTE(v138) = 0;
  char v144 = 0;
  v145[0] = 0;
  char v146 = 0;
  unint64_t v19 = v129;
  uint64_t v125 = v129;
  int64_t v126 = v129;
  uint64_t v127 = 8;
  int v128 = 0;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v20 = *(void *)(a2 + 24);
  if (v21 != v20)
  {
    unsigned int v22 = 0;
    unsigned int v23 = 8;
    BOOL v24 = v129;
    while (1)
    {
      uint64_t v25 = *(void *)(*(void *)v21 + 8);
      if (v25) {
        break;
      }
LABEL_60:
      v21 += 8;
      if (v21 == v20)
      {
        uint64_t v38 = *(void *)(a2 + 16);
        uint64_t v21 = *(void *)(a2 + 24);
        goto LABEL_69;
      }
    }
    if (v24 == v19)
    {
      if (v22)
      {
        long long v26 = 0;
        uint64_t v27 = 8 * v22;
        long long v28 = v19;
        while (*(void *)v28 != v25)
        {
          if (*(void *)v28 == -2) {
            long long v26 = v28;
          }
          v28 += 8;
          v27 -= 8;
          if (!v27)
          {
            if (!v26) {
              goto LABEL_36;
            }
            *(void *)long long v26 = v25;
            --v128;
            goto LABEL_59;
          }
        }
        goto LABEL_59;
      }
LABEL_36:
      if (v23 > v22)
      {
        HIDWORD(v127) = v22 + 1;
        *(void *)&v19[8 * v22] = v25;
LABEL_59:
        unint64_t v19 = v125;
        BOOL v24 = v126;
        unsigned int v22 = HIDWORD(v127);
        unsigned int v23 = v127;
        goto LABEL_60;
      }
    }
    if (3 * v23 <= 4 * (v22 - v128))
    {
      if (v23 >= 0x40) {
        v23 *= 2;
      }
      else {
        unsigned int v23 = 128;
      }
    }
    else if (v23 - v22 >= v23 >> 3)
    {
      goto LABEL_40;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v125, v23);
    unsigned int v23 = v127;
    BOOL v24 = v126;
LABEL_40:
    unsigned int v29 = v23 - 1;
    unsigned int v30 = (v23 - 1) & ((v25 >> 4) ^ (v25 >> 9));
    uint64_t v31 = &v24[8 * v30];
    uint64_t v32 = *(void *)v31;
    if (*(void *)v31 == -1)
    {
      int v33 = 0;
LABEL_52:
      if (v33) {
        uint64_t v37 = v33;
      }
      else {
        uint64_t v37 = v31;
      }
      if (*(void *)v37 != v25)
      {
        if (*(void *)v37 == -2) {
          --v128;
        }
        else {
          ++HIDWORD(v127);
        }
        *(void *)uint64_t v37 = v25;
      }
    }
    else
    {
      int v33 = 0;
      int v34 = 1;
      while (v32 != v25)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v32 == -2;
        }
        if (v35) {
          int v33 = v31;
        }
        unsigned int v36 = v30 + v34++;
        unsigned int v30 = v36 & v29;
        uint64_t v31 = &v24[8 * (v36 & v29)];
        uint64_t v32 = *(void *)v31;
        if (*(void *)v31 == -1) {
          goto LABEL_52;
        }
      }
    }
    goto LABEL_59;
  }
  uint64_t v38 = *(void *)(a2 + 16);
LABEL_69:
  int v170 = v172;
  uint64_t v171 = 0x1000000000;
  BOOL v167 = v169;
  uint64_t v168 = 0x800000000;
  if (v38 == v21) {
    goto LABEL_229;
  }
  uint64_t v113 = v18;
  do
  {
    uint64_t v39 = *(void *)(*(void *)v38 + 8);
    if (!v39) {
      goto LABEL_140;
    }
    if (*(unsigned char *)(v39 + 16))
    {
      if (*(unsigned char *)(v39 + 16) == 3 && (*(_DWORD *)(v39 + 20) & 0x7FFFFFF) == 0) {
        goto LABEL_140;
      }
    }
    else if (*(void *)(v39 + 72) == v39 + 72 && (*(unsigned char *)(v39 + 34) & 0x80) == 0)
    {
      goto LABEL_140;
    }
    llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(&v131, *(const llvm::Function **)(*(void *)v38 + 8));
    uint64_t v40 = v39 + 72;
    for (uint64_t i = *(void *)(v39 + 80); i != v40; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v42 = i - 24;
      if (!i) {
        uint64_t v42 = 0;
      }
      uint64_t v43 = (void *)(v42 + 40);
      for (j = *(void **)(v42 + 48); j != v43; j = (void *)j[1])
      {
        if (j) {
          uint64_t v45 = (uint64_t)(j - 3);
        }
        else {
          uint64_t v45 = 0;
        }
        int v46 = *(unsigned __int8 *)(v45 + 16);
        if (v46 != 33 && v46 != 39)
        {
          if (v46 != 84) {
            continue;
          }
          uint64_t v47 = *(void *)(v45 - 32);
          if (v47)
          {
            if (!*(unsigned char *)(v47 + 16)
              && *(void *)(v47 + 24) == *(void *)(v45 + 72)
              && (*(unsigned char *)(v47 + 33) & 0x20) != 0)
            {
              continue;
            }
          }
        }
        uint64_t v48 = *(j - 7);
        if (v48
          && !*(unsigned char *)(v48 + 16)
          && *(void *)(v48 + 24) == j[6]
          && *(void *)(v48 + 72) == v48 + 72
          && (*(unsigned char *)(v48 + 34) & 0x80) == 0)
        {
          llvm::setInlineRemark((llvm::Value *)(j - 3), "unavailable definition", 0x16uLL);
          uint64_t v49 = ***(void ***)v131;
          if (*(void *)(v49 + 128)
            || (*(unsigned int (**)(void))(**(void **)(v49 + 72) + 48))(*(void *)(v49 + 72)))
          {
            llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v151, (uint64_t)"inline", (uint64_t)"NoDefinition", 12, v45);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v173, "Callee", 6uLL, (unsigned __int8 *)v48);
            uint64_t v50 = sub_1CD3D6290((uint64_t)&v151, (long long *)&v173);
            __dst[0] = " will not be inlined into ";
            __dst[1] = (void *)26;
            sub_1CC59ADEC((uint64_t *)(v50 + 80), (uint64_t)__dst);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)__dst, "Caller", 6uLL, *(unsigned __int8 **)(j[2] + 56));
            uint64_t v51 = sub_1CD3D6290(v50, (long long *)__dst);
            v130[0] = " because its definition is unavailable";
            v130[1] = (void *)38;
            sub_1CC59ADEC((uint64_t *)(v51 + 80), (uint64_t)v130);
            *(unsigned char *)(v51 + 352) = 1;
            int v52 = *(_DWORD *)(v51 + 8);
            BYTE4(v176[1]) = *(unsigned char *)(v51 + 12);
            LODWORD(v176[1]) = v52;
            long long v53 = *(_OWORD *)(v51 + 16);
            uint64_t v178 = *(void *)(v51 + 32);
            long long v177 = v53;
            uint64_t v54 = *(void *)(v51 + 72);
            long long v55 = *(_OWORD *)(v51 + 56);
            long long v179 = *(_OWORD *)(v51 + 40);
            long long v180 = v55;
            uint64_t v181 = v54;
            v176[0] = &unk_1F2616800;
            uint64_t v182 = v184;
            uint64_t v183 = 0x400000000;
            if (*(_DWORD *)(v51 + 88)) {
              sub_1CD494D68((uint64_t)&v182, v51 + 80);
            }
            uint64_t v56 = *(void *)(v51 + 360);
            v184[32] = *(void *)(v51 + 352);
            v184[33] = v56;
            v176[0] = &unk_1F26165A8;
            if (v136 < 0) {
              operator delete(__p);
            }
            if (v134 < 0) {
              operator delete(__dst[0]);
            }
            if (v175 < 0) {
              operator delete(v174);
            }
            if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v173.__r_.__value_.__l.__data_);
            }
            uint64_t v151 = (void (**)(void **, uint64_t))&unk_1F2616800;
            int64_t v57 = (char **)v160;
            if (v161)
            {
              unint64_t v58 = (unint64_t)v161 << 6;
              do
              {
                uint64_t v59 = (void **)((char *)v57 + v58);
                if (*((char *)v57 + v58 - 17) < 0) {
                  operator delete(*(v59 - 5));
                }
                if (*((char *)v59 - 41) < 0) {
                  operator delete(*(v59 - 8));
                }
                v58 -= 64;
              }
              while (v58);
              int64_t v57 = (char **)v160;
            }
            if (v57 != v162) {
              free(v57);
            }
            llvm::OptimizationRemarkEmitter::emit((uint64_t ***)&v131, (llvm::DiagnosticInfoOptimizationBase *)v176);
            v176[0] = &unk_1F2616800;
            int v61 = (char *)v182;
            if (v183)
            {
              unint64_t v62 = (unint64_t)v183 << 6;
              do
              {
                int64_t v63 = (void **)&v61[v62];
                if (v61[v62 - 17] < 0) {
                  operator delete(*(v63 - 5));
                }
                if (*((char *)v63 - 41) < 0) {
                  operator delete(*(v63 - 8));
                }
                v62 -= 64;
              }
              while (v62);
              int v61 = (char *)v182;
            }
            if (v61 != (char *)v184) {
              free(v61);
            }
          }
        }
        else
        {
          if (v171 >= (unint64_t)HIDWORD(v171)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v60 = (char *)v170 + 16 * v171;
          *int v60 = j - 3;
          v60[1] = 0xFFFFFFFFLL;
          LODWORD(v171) = v171 + 1;
        }
      }
    }
    int v64 = v132;
    uint64_t v132 = 0;
    if (v64)
    {
      uint64_t v65 = *v64;
      uint64_t *v64 = 0;
      if (v65) {
        (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
      }
      MEMORY[0x1D25D9CE0](v64, 0x20C4093837F09);
    }
LABEL_140:
    v38 += 8;
  }
  while (v38 != v21);
  unsigned int v66 = v171;
  if (v171)
  {
    unsigned int v67 = 0;
    do
    {
      uint64_t v68 = (char *)v170;
      BOOL v69 = (uint64_t *)((char *)v170 + 16 * v67);
      uint64_t v70 = *v69;
      uint64_t v71 = *(void *)(*v69 - 32);
      if (v71 && !*(unsigned char *)(v71 + 16) && *(void *)(v71 + 24) == *(void *)(v70 + 72))
      {
        uint64_t v72 = v125;
        if (v126 == v125)
        {
          int v73 = HIDWORD(v127);
          unint64_t v74 = &v126[8 * HIDWORD(v127)];
          if (HIDWORD(v127))
          {
            uint64_t v75 = 0;
            while (*(void *)&v126[v75] != v71)
            {
              v75 += 8;
              if (8 * HIDWORD(v127) == v75) {
                goto LABEL_165;
              }
            }
            unint64_t v74 = &v126[v75];
          }
LABEL_165:
          uint64_t v72 = v126;
        }
        else
        {
          int v76 = v127 - 1;
          unsigned int v77 = (v127 - 1) & ((v71 >> 4) ^ (v71 >> 9));
          unint64_t v74 = &v126[8 * v77];
          uint64_t v78 = *(void *)v74;
          if (*(void *)v74 == -1)
          {
            uint64_t v79 = 0;
LABEL_173:
            if (v79) {
              unint64_t v74 = v79;
            }
            int v73 = HIDWORD(v127);
            if (*(void *)v74 != v71) {
              unint64_t v74 = &v126[8 * v127];
            }
          }
          else
          {
            uint64_t v79 = 0;
            int v80 = 1;
            while (v78 != v71)
            {
              if (v79) {
                BOOL v81 = 0;
              }
              else {
                BOOL v81 = v78 == -2;
              }
              if (v81) {
                uint64_t v79 = v74;
              }
              unsigned int v82 = v77 + v80++;
              unsigned int v77 = v82 & v76;
              unint64_t v74 = &v126[8 * (v82 & v76)];
              uint64_t v78 = *(void *)v74;
              if (*(void *)v74 == -1) {
                goto LABEL_173;
              }
            }
            int v73 = HIDWORD(v127);
          }
        }
        int v83 = v127;
        if (v126 == v72) {
          int v83 = v73;
        }
        if (v74 != &v126[8 * v83])
        {
          int64_t v84 = (char *)v170 + 16 * --v66;
          *BOOL v69 = *(void *)v84;
          *(void *)int64_t v84 = v70;
          uint64_t v85 = &v68[16 * v67];
          int v86 = *((_DWORD *)v85 + 2);
          --v67;
          *((_DWORD *)v85 + 2) = *((_DWORD *)v84 + 2);
          *((_DWORD *)v84 + 2) = v86;
        }
      }
      ++v67;
    }
    while (v67 < v66);
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    unsigned int v124 = 0;
    uint64_t v151 = (void (**)(void **, uint64_t))v114;
    uint64_t v152 = sub_1CC026170;
    unsigned int v153 = v149;
    uint64_t v154 = v113;
    uint64_t v155 = 0;
    char v87 = v114 + 2;
    uint64_t v156 = 0;
    int v157 = v159;
    uint64_t v158 = 0x400000000;
    v162[0] = (char *)&v163;
    v162[1] = (char *)0x800000000;
    int v164 = v166;
    uint64_t v165 = 0x800000000;
    v166[64] = 1;
    if (v171)
    {
      uint64_t v88 = 0;
      LODWORD(v89) = 0;
      while (1)
      {
        uint64_t v90 = (char *)v170 + 16 * v88;
        uint64_t v91 = *(llvm::Value **)v90;
        uint64_t v92 = *(void *)(*(void *)v90 - 32);
        if (v92)
        {
          if (!*(unsigned char *)(v92 + 16) && *(void *)(v92 + 24) == *((void *)v91 + 9))
          {
            int v116 = *((_DWORD *)v90 + 2);
            unsigned int v93 = *(const llvm::Function **)(*((void *)v91 + 5) + 56);
            if (*(void *)(v92 + 72) != v92 + 72 || (*(unsigned char *)(v92 + 34) & 0x80) != 0) {
              break;
            }
          }
        }
LABEL_183:
        uint64_t v89 = (v89 + 1);
        uint64_t v88 = v89;
        if (v171 == v89) {
          goto LABEL_223;
        }
      }
      if (!v148)
      {
        sub_1CB920400();
        abort();
      }
      uint64_t v94 = (uint64_t *)(*(uint64_t (**)(void *, void))(*v148 + 48))(v148, *(void *)(*((void *)v91 + 5) + 56));
      if (*((void *)v91 + 1))
      {
        int wouldInstructionBeTriviallyDead = 0;
LABEL_190:
        if (v116 != -1)
        {
          int v96 = v116;
          while (*((void *)v167 + 2 * v96) != v92)
          {
            int v96 = *((_DWORD *)v167 + 4 * v96 + 2);
            if (v96 == -1) {
              goto LABEL_194;
            }
          }
          llvm::setInlineRemark(v91, "recursive", 9uLL);
          goto LABEL_183;
        }
      }
      else
      {
        int wouldInstructionBeTriviallyDead = llvm::wouldInstructionBeTriviallyDead((uint64_t)v91, v94);
        if ((wouldInstructionBeTriviallyDead & 1) == 0) {
          goto LABEL_190;
        }
      }
LABEL_194:
      llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v120, v93);
      llvm::shouldInline(v91, (void (*)(long long *__return_ptr, uint64_t, llvm::Value *))sub_1CC9469C4, (uint64_t)&v117, v120, 1, (uint64_t)v119);
      if (v119[56])
      {
        if (wouldInstructionBeTriviallyDead)
        {
          llvm::setInlineRemark(v91, "trivially dead", 0xEuLL);
          uint64_t v98 = (void *)*v87;
          if (!*v87) {
            goto LABEL_207;
          }
          uint64_t v99 = v114 + 2;
          do
          {
            unint64_t v100 = v98[4];
            BOOL v101 = v100 >= (unint64_t)v93;
            if (v100 >= (unint64_t)v93) {
              uint64_t v102 = v98;
            }
            else {
              uint64_t v102 = v98 + 1;
            }
            if (v101) {
              uint64_t v99 = v98;
            }
            uint64_t v98 = (void *)*v102;
          }
          while (*v102);
          if (v99 == v87 || v99[4] > (unint64_t)v93) {
LABEL_207:
          }
            uint64_t v99 = v114 + 2;
          llvm::CallGraphNode::removeCallEdgeFor((llvm::CallGraphNode *)v99[5], (uint64_t ****)v91);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        uint64_t v103 = (unsigned __int8 *)*((void *)v91 + 6);
        uint64_t v118 = v103;
        if (v103) {
          llvm::MetadataTracking::track((uint64_t)&v118, v103, 2);
        }
        uint64_t v104 = *((void *)v91 - 4);
        if (!v104 || *(unsigned char *)(v104 + 16) || *(void *)(v104 + 24) != *((void *)v91 + 9)) {
          uint64_t v104 = 0;
        }
        sub_1CC8A987C(&v137, (llvm::Pass *)v104, v97);
      }
      uint64_t v105 = v121;
      uint64_t v121 = 0;
      if (v105)
      {
        uint64_t v106 = *v105;
        *uint64_t v105 = 0;
        if (v106) {
          (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
        }
        MEMORY[0x1D25D9CE0](v105, 0x20C4093837F09);
      }
      goto LABEL_183;
    }
LABEL_223:
    if (v164 != v166) {
      free(v164);
    }
    sub_1CC45E8E8(v162);
    if (v157 != v159) {
      free(v157);
    }
    uint64_t v107 = v122;
    if (v124)
    {
      int64_t v109 = (void *)(v122 + 16);
      uint64_t v110 = 32 * v124;
      do
      {
        uint64_t v111 = *(v109 - 2);
        if (v111 != -4096 && v111 != -8192)
        {
          int64_t v112 = (void *)*(v109 - 1);
          if (v112)
          {
            *int64_t v109 = v112;
            operator delete(v112);
          }
        }
        v109 += 4;
        v110 -= 32;
      }
      while (v110);
    }
    MEMORY[0x1D25D9CD0](v107, 8);
  }
LABEL_229:
  if (v167 != v169) {
    free(v167);
  }
  if (v170 != v172) {
    free(v170);
  }
  if (v126 != v125) {
    free(v126);
  }
  if (v146)
  {
    llvm::AAResults::~AAResults((llvm::AAResults *)v145);
    char v146 = 0;
  }
  if (v144)
  {
    if (v143 != v142) {
      free(v143);
    }
    if (v141 != v140) {
      free(v141);
    }
  }
  if (v148 == v147)
  {
    (*(void (**)(void *))(v147[0] + 32))(v147);
  }
  else if (v148)
  {
    (*(void (**)(void))(*v148 + 40))();
  }
  if (v150 == v149)
  {
    (*(void (**)(void *))(v149[0] + 32))(v149);
  }
  else if (v150)
  {
    (*(void (**)(void))(*v150 + 40))();
  }
  return 0;
}

BOOL llvm::LegacyInlinerBase::doFinalization(size_t *this, llvm::CallGraph *a2)
{
  if (dword_1EBD03508)
  {
    uint64_t v3 = a2;
    llvm::ImportedFunctionsInliningStatistics::dump(this + 10, dword_1EBD03508 == 2);
    a2 = v3;
  }

  return llvm::LegacyInlinerBase::removeDeadFunctions((llvm::LegacyInlinerBase *)this, a2, 0);
}

BOOL llvm::LegacyInlinerBase::removeDeadFunctions(llvm::LegacyInlinerBase *this, llvm::CallGraph *a2, int a3)
{
  v66[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v66;
  __base = v66;
  uint64_t v65 = 0x1000000000;
  int v61 = v63;
  uint64_t v62 = 0x1000000000;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  uint64_t v6 = (void *)((char *)a2 + 16);
  if (v5 == (void *)((char *)a2 + 16)) {
    goto LABEL_63;
  }
  do
  {
    uint64_t v8 = (uint64_t *)v5[5];
    uint64_t v9 = (uint64_t *)v8[1];
    if (v9)
    {
      if (*((unsigned char *)v9 + 16))
      {
        if (*((unsigned char *)v9 + 16) == 3 && (*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 0) {
          goto LABEL_18;
        }
      }
      else if ((uint64_t *)v9[9] == v9 + 9 && (*((unsigned char *)v9 + 34) & 0x80) == 0)
      {
        goto LABEL_18;
      }
      if (!a3 || (uint64_t v10 = v9[14]) != 0 && (*(unsigned char *)(v10 + 12) & 4) != 0)
      {
        llvm::Constant::removeDeadConstantUsers(v8[1]);
        int v11 = *((_DWORD *)v9 + 8);
        if ((v11 & 0xE) == 2 || ((v11 & 0xFu) <= 8 ? (BOOL v12 = ((1 << (v11 & 0xF)) & 0x182) == 0) : (BOOL v12 = 1), !v12))
        {
          uint64_t v15 = v9[1];
          if (v15)
          {
            while (*(unsigned char *)(*(void *)(v15 + 24) + 16) == 4)
            {
              uint64_t v15 = *(void *)(v15 + 8);
              if (!v15) {
                goto LABEL_26;
              }
            }
          }
          else
          {
LABEL_26:
            int v60 = v4;
            if ((v11 & 0xFu) - 7 >= 2 && v9[6])
            {
              uint64_t v16 = v62;
              if (v62 >= (unint64_t)HIDWORD(v62)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              p_base = &v61;
            }
            else
            {
              uint64_t v19 = v8[2];
              for (uint64_t i = v8[3]; v19 != i; uint64_t i = v8[3])
              {
                --*(_DWORD *)(*(void *)(i - 8) + 40);
                sub_1CBFA986C((uint64_t)(v8 + 2), i - 40);
                uint64_t v19 = v8[2];
              }
              llvm::CallGraphNode::removeAnyCallEdgeTo(*((void *)a2 + 10), (uint64_t)v8);
              uint64_t v16 = v65;
              if (v65 >= (unint64_t)HIDWORD(v65)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              p_base = &__base;
              uint64_t v9 = v8;
            }
            *((void *)*p_base + v16) = v9;
            ++*((_DWORD *)p_base + 2);
            uint64_t v4 = v60;
          }
        }
      }
    }
LABEL_18:
    uint64_t v13 = (void *)v5[1];
    if (v13)
    {
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        uint64_t v14 = (void *)v5[2];
        BOOL v12 = *v14 == (void)v5;
        uint64_t v5 = v14;
      }
      while (!v12);
    }
    uint64_t v5 = v14;
  }
  while (v14 != v6);
  if (!v62 || (llvm::filterDeadComdatFunctions((uint64_t)&v61), !v62))
  {
LABEL_63:
    unsigned int v31 = v65;
    goto LABEL_64;
  }
  uint64_t v20 = (char *)v61;
  uint64_t v21 = (char *)v61 + 8 * v62;
  do
  {
    unsigned int v22 = (void *)*v6;
    if (!*v6) {
      goto LABEL_55;
    }
    unint64_t v23 = *(void *)v20;
    BOOL v24 = v6;
    do
    {
      unint64_t v25 = v22[4];
      BOOL v26 = v25 >= v23;
      if (v25 >= v23) {
        uint64_t v27 = v22;
      }
      else {
        uint64_t v27 = v22 + 1;
      }
      if (v26) {
        BOOL v24 = v22;
      }
      unsigned int v22 = (void *)*v27;
    }
    while (*v27);
    if (v24 == v6 || v24[4] > v23) {
LABEL_55:
    }
      BOOL v24 = v6;
    uint64_t v28 = v24[5];
    for (uint64_t j = *(void *)(v28 + 16); ; uint64_t j = *(void *)(v28 + 16))
    {
      uint64_t v30 = *(void *)(v28 + 24);
      if (j == v30) {
        break;
      }
      --*(_DWORD *)(*(void *)(v30 - 8) + 40);
      sub_1CBFA986C(v28 + 16, v30 - 40);
    }
    llvm::CallGraphNode::removeAnyCallEdgeTo(*((void *)a2 + 10), v28);
    if (v65 >= (unint64_t)HIDWORD(v65)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)__base + v65) = v28;
    unsigned int v31 = v65 + 1;
    LODWORD(v65) = v65 + 1;
    v20 += 8;
  }
  while (v20 != v21);
LABEL_64:
  if (v31)
  {
    uint64_t v32 = (uint64_t *)__base;
    if (v31 == 1)
    {
      int v33 = (char *)__base + 8;
LABEL_68:
      BOOL v35 = (char *)(v32 + 1);
      while (v35 != v33)
      {
        uint64_t v36 = *((void *)v35 - 1);
        uint64_t v37 = *(void *)v35;
        v35 += 8;
        if (v36 == v37)
        {
          int v34 = v35 - 16;
          goto LABEL_72;
        }
      }
    }
    else
    {
      qsort(__base, v31, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CD66D600);
      uint64_t v32 = (uint64_t *)__base;
      int v33 = (char *)__base + 8 * v65;
      int v34 = (char *)__base;
      if (v65) {
        goto LABEL_68;
      }
LABEL_72:
      if (v34 != v33)
      {
        uint64_t v38 = v34 + 16;
        if (v34 + 16 != v33)
        {
          uint64_t v39 = *(void *)v34;
          do
          {
            uint64_t v40 = v39;
            uint64_t v39 = *(void *)v38;
            if (v40 != *(void *)v38)
            {
              *((void *)v34 + 1) = v39;
              v34 += 8;
            }
            v38 += 8;
          }
          while (v38 != v33);
        }
        int v33 = v34 + 8;
      }
    }
    unint64_t v41 = v33 - (char *)v32;
    unint64_t v42 = (unint64_t)(v33 - (char *)v32) >> 3;
    LODWORD(v65) = v42;
    if ((v41 >> 3))
    {
      uint64_t v43 = &v32[v42];
      do
      {
        int64_t v44 = (int32x2_t ****)llvm::CallGraph::removeFunctionFromModule((uint64_t)a2, *v32);
        if (v44)
        {
          uint64_t v45 = v44;
          llvm::Function::~Function(v44);
          int v47 = *(_DWORD *)(v46 + 20);
          if ((v47 & 0x40000000) != 0)
          {
            uint64_t v54 = (char *)*(v45 - 1);
            int v52 = v45 - 1;
            long long v53 = v54;
            uint64_t v55 = v47 & 0x7FFFFFF;
            if (v55)
            {
              uint64_t v56 = 32 * v55;
              do
              {
                int64_t v57 = &v53[v56];
                if (*(void *)&v53[v56 - 32])
                {
                  **((void **)v57 - 2) = *((void *)v57 - 3);
                  uint64_t v58 = *((void *)v57 - 3);
                  if (v58) {
                    *(void *)(v58 + 16) = *((void *)v57 - 2);
                  }
                }
                v56 -= 32;
              }
              while (v56);
            }
            operator delete(v53);
          }
          else
          {
            uint64_t v48 = v47 & 0x7FFFFFF;
            if (v48)
            {
              uint64_t v49 = v45 - 2;
              uint64_t v50 = -32 * v48;
              do
              {
                if (*(v49 - 2))
                {
                  **uint64_t v49 = (int32x2_t **)*(v49 - 1);
                  uint64_t v51 = (uint64_t)*(v49 - 1);
                  if (v51) {
                    *(void *)(v51 + 16) = *v49;
                  }
                }
                v49 -= 4;
                v50 += 32;
              }
              while (v50);
            }
            int v52 = &v45[-4 * v48];
            if (v47 < 0) {
              int v52 = (int32x2_t ****)((char *)(v52 - 1) - (char *)*(v52 - 1));
            }
          }
          operator delete(v52);
        }
        ++v32;
      }
      while (v32 != v43);
    }
  }
  if (v61 != v63) {
    free(v61);
  }
  if (__base != v4) {
    free(__base);
  }
  return v31 != 0;
}

uint64_t llvm::InlinerPass::getAdvisor(uint64_t *a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t result = *a1;
  if (!result) {
    llvm::AnalysisManager<llvm::Module>::getCachedResultImpl();
  }
  return result;
}

void llvm::InlinerPass::run()
{
}

llvm::raw_ostream *sub_1CC945F34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v4 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  int v11 = a2;
  int v10 = 0;
  uint64_t v3 = &unk_1F2646F30;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t result = sub_1CC050A50((llvm::raw_ostream *)&v3, a1);
  if (v7 != v5) {
    uint64_t result = (llvm::raw_ostream *)llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v3);
  }
  uint64_t v3 = &unk_1F2646B98;
  if (v10 == 1)
  {
    uint64_t result = v5;
    if (v5) {
      return (llvm::raw_ostream *)MEMORY[0x1D25D9CB0](v5, 0x1000C8077774924);
    }
  }
  return result;
}

uint64_t sub_1CC94600C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      int v8 = 1;
      while (v6 != -4096)
      {
        if (v7) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v7 = v5;
        }
        int v12 = v4 + v8++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v9 = 1;
        if (*v5 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v9 = 0;
      if (v7) {
        uint64_t v5 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

void *sub_1CC9460A0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD66C658(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1CC94616C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 40 * v2;
    uint64_t v5 = a2 + 152;
    do
    {
      sub_1CD66CD78(v5, *(unsigned __int8 **)v3, *(void *)(v3 + 8), (int *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1CC9461C8(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 40 * v2;
    uint64_t v5 = a2 + 152;
    do
    {
      sub_1CC946224(v5, *(unsigned __int8 **)v3, *(void *)(v3 + 8), (int *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1CC946224(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1F2628DF8;
  char v16 = 1;
  int v15 = v9;
  unint64_t v10 = sub_1CC946328(a1 + 16, (unint64_t)v14, 1);
  uint64_t v11 = *(void *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 32) = &unk_1F2628E18;
  char v13 = *(unsigned char *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(unsigned char *)(v11 + 44) = v13;
  *(void *)(v11 + 32) = &unk_1F2628DF8;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(void *)(a1 + 8), a2, a3);
}

unint64_t sub_1CC946328(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 48 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD66D208();
    }
    sub_1CD66D208();
  }
  return a2;
}

void sub_1CC9463A0(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 40 * v2;
    uint64_t v5 = a2 + 152;
    do
    {
      sub_1CC9463FC(v5, *(unsigned __int8 **)v3, *(void *)(v3 + 8), (int *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1CC9463FC(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1F2628EF0;
  char v16 = 1;
  int v15 = v9;
  unint64_t v10 = sub_1CC946500(a1 + 16, (unint64_t)v14, 1);
  uint64_t v11 = *(void *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 32) = &unk_1F2628F10;
  char v13 = *(unsigned char *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(unsigned char *)(v11 + 44) = v13;
  *(void *)(v11 + 32) = &unk_1F2628EF0;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(void *)(a1 + 8), a2, a3);
}

unint64_t sub_1CC946500(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 48 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD66D51C();
    }
    sub_1CD66D51C();
  }
  return a2;
}

void sub_1CC94657C()
{
}

void *sub_1CC946590(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2629008;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC9465D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2629008;
  a2[1] = v2;
  return result;
}

void sub_1CC946604(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)uint64_t v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

void sub_1CC946930()
{
}

void *sub_1CC946944(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2629050;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC94698C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2629050;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC9469B8(uint64_t a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(*(llvm::AssumptionCacheTracker **)(*(void *)(a1 + 8) + 32), a2);
}

uint64_t sub_1CC9469C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 160))();
}

uint64_t sub_1CC9469EC(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = result + 16 * (v6 >> 1);
    uint64_t v11 = (long long *)(a2 - 16);
    uint64_t result = (*a3)(v10, a2 - 16);
    if (result)
    {
      long long v13 = *v11;
      do
      {
        uint64_t v12 = v10;
        *(void *)uint64_t v11 = *(void *)v10;
        *((_DWORD *)v11 + 2) = *(_DWORD *)(v10 + 8);
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = v8 + 16 * v9;
        uint64_t result = (*a3)(v10, (uint64_t)&v13);
        uint64_t v11 = (long long *)v12;
      }
      while ((result & 1) != 0);
      *(void *)uint64_t v12 = v13;
      *(_DWORD *)(v12 + 8) = DWORD2(v13);
    }
  }
  return result;
}

uint64_t sub_1CC946AA8(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    uint64_t v8 = 0;
    uint64_t v15 = *(void *)result;
    int v14 = *(_DWORD *)(result + 8);
    int64_t v9 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v10 = result;
    do
    {
      uint64_t v11 = v10 + 16 * v8 + 16;
      uint64_t v12 = (2 * v8) | 1;
      uint64_t v13 = 2 * v8 + 2;
      if (v13 < a4)
      {
        uint64_t result = (*a3)(v10 + 16 * v8 + 16, v10 + 16 * v8 + 32);
        if (result)
        {
          v11 += 16;
          uint64_t v12 = v13;
        }
      }
      *(void *)uint64_t v10 = *(void *)v11;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      uint64_t v10 = v11;
      uint64_t v8 = v12;
    }
    while (v12 <= v9);
    if (v11 == a2 - 16)
    {
      *(void *)uint64_t v11 = v15;
      *(_DWORD *)(v11 + 8) = v14;
    }
    else
    {
      *(void *)uint64_t v11 = *(void *)(a2 - 16);
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 8);
      *(void *)(a2 - 16) = v15;
      *(_DWORD *)(a2 - 8) = v14;
      return sub_1CC9469EC(v7, v11 + 16, a3, (v11 + 16 - v7) >> 4);
    }
  }
  return result;
}

uint64_t sub_1CC946C00(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    uint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v12 = ((uint64_t)a4 - result) >> 3;
      uint64_t v13 = v12 + 1;
      uint64_t v14 = result + 16 * (v12 + 1);
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 16))
      {
        v14 += 16;
        uint64_t v13 = v15;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        long long v19 = *v7;
        do
        {
          uint64_t v16 = v14;
          *(void *)uint64_t v7 = *(void *)v14;
          *((_DWORD *)v7 + 2) = *(_DWORD *)(v14 + 8);
          if (v9 < v13) {
            break;
          }
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v14 = v8 + 16 * v17;
          uint64_t v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 16))
            {
              v14 += 16;
              uint64_t v17 = v18;
            }
          }
          uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v14, &v19);
          uint64_t v7 = (long long *)v16;
          uint64_t v13 = v17;
        }
        while (!result);
        *(void *)uint64_t v16 = v19;
        *(_DWORD *)(v16 + 8) = DWORD2(v19);
      }
    }
  }
  return result;
}

void sub_1CC946D48(void *a1)
{
  *a1 = &unk_1F26290E0;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC946DC0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16) - *(void *)(a1 + 280);
}

uint64_t sub_1CC946DD0(uint64_t result, _OWORD *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 16);
  if (v2 >= *(_DWORD *)(result + 20)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)(result + 8) + 16 * v2) = *a2;
  ++*(_DWORD *)(result + 16);
  return result;
}

uint64_t sub_1CC946E40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v1 + 1;
  return *(void *)(*(void *)(a1 + 8) + 16 * v1);
}

uint64_t sub_1CC946E5C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16 * *(void *)(a1 + 280);
}

void *sub_1CC946E6C(uint64_t a1, unsigned int (*a2)(uint64_t, void, void), uint64_t a3)
{
  uint64_t result = sub_1CC946EBC((void *)(*(void *)(a1 + 8) + 16 * *(void *)(a1 + 280)), (void *)(*(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16)), a2, a3);
  *(_DWORD *)(a1 + 16) = ((unint64_t)result - *(void *)(a1 + 8)) >> 4;
  return result;
}

void *sub_1CC946EBC(void *a1, void *a2, unsigned int (*a3)(uint64_t, void, void), uint64_t a4)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      uint64_t v8 = v4 + 2;
      if (a3(a4, *v4, v4[1])) {
        break;
      }
      v4 += 2;
      if (v8 == a2) {
        return a2;
      }
    }
    while (v8 != a2)
    {
      if ((((uint64_t (*)(uint64_t, void, void))a3)(a4, *v8, v8[1]) & 1) == 0)
      {
        void *v4 = *v8;
        *((_DWORD *)v4 + 2) = *((_DWORD *)v8 + 2);
        v4 += 2;
      }
      v8 += 2;
    }
  }
  return v4;
}

void sub_1CC946F5C()
{
}

BOOL sub_1CC946F88(void *a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 40) + 56) == *a1;
}

char *sub_1CC946FA0(char **a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v21 = a1 + 2;
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  int64_t v9 = &v8[8 * v2];
  uint64_t v10 = &v8[8 * v7];
  *(void *)int64_t v9 = *a2;
  uint64_t v11 = v9 + 8;
  *a2 = 0;
  v19.i64[1] = (uint64_t)(v9 + 8);
  uint64_t v20 = v10;
  uint64_t v13 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      uint64_t v14 = *((void *)v12 - 1);
      v12 -= 8;
      *(void *)uint64_t v12 = 0;
      *((void *)v9 - 1) = v14;
      v9 -= 8;
    }
    while (v12 != v13);
    int64x2_t v15 = *(int64x2_t *)a1;
    uint64_t v11 = (char *)v19.i64[1];
    uint64_t v10 = v20;
  }
  *a1 = v9;
  a1[1] = v11;
  int64x2_t v19 = v15;
  uint64_t v16 = a1[2];
  a1[2] = v10;
  uint64_t v20 = v16;
  uint64_t v18 = v15.i64[0];
  sub_1CC9470AC((uint64_t)&v18);
  return v11;
}

uint64_t sub_1CC9470AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CC947128()
{
}

uint64_t sub_1CC947134()
{
  return 0;
}

char *sub_1CC94713C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlinerPass]";
  v10[1] = 67;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43) {
    uint64_t v1 = 67;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_9[v1];
  unint64_t v3 = 67 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CC9471F8()
{
}

uint64_t sub_1CC947200()
{
  return 1;
}

void sub_1CC947208(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1CC9472B0(char **a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v21 = a1 + 2;
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  int64_t v9 = &v8[8 * v2];
  uint64_t v10 = &v8[8 * v7];
  *(void *)int64_t v9 = *a2;
  uint64_t v11 = v9 + 8;
  *a2 = 0;
  v19.i64[1] = (uint64_t)(v9 + 8);
  uint64_t v20 = v10;
  uint64_t v13 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      uint64_t v14 = *((void *)v12 - 1);
      v12 -= 8;
      *(void *)uint64_t v12 = 0;
      *((void *)v9 - 1) = v14;
      v9 -= 8;
    }
    while (v12 != v13);
    int64x2_t v15 = *(int64x2_t *)a1;
    uint64_t v11 = (char *)v19.i64[1];
    uint64_t v10 = v20;
  }
  *a1 = v9;
  a1[1] = v11;
  int64x2_t v19 = v15;
  uint64_t v16 = a1[2];
  a1[2] = v10;
  uint64_t v20 = v16;
  uint64_t v18 = v15.i64[0];
  sub_1CC9473BC((uint64_t)&v18);
  return v11;
}

uint64_t sub_1CC9473BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CC947438(uint64_t a1@<X8>)
{
}

uint64_t sub_1CC947444()
{
  return 0;
}

char *sub_1CC94744C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DevirtSCCRepeatedPass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_12[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

uint64_t sub_1CC947508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = a10;
  *(void *)(v10 + 8) = a1;
  return result;
}

uint64_t sub_1CC94751C()
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  LOBYTE(v4) = 0;
  v5.n128_u64[0] = (unint64_t)&v4;
  v2.n128_u32[0] = 1;
  sub_1CD66C71C((char **)&v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE01E8, &dword_1CB82C000);
  int v3 = 1;
  LODWORD(v4) = 2;
  v2.n128_u64[0] = (unint64_t)&v4;
  v5.n128_u64[0] = (unint64_t)"Cost multiplier to multiply onto inlined call sites where the new call was previous"
                                     "ly an intra-SCC call (not relevant when the original call was already intra-SCC). T"
                                     "his can accumulate over multiple inlinings (e.g. if a call site already had a cost "
                                     "multiplier and one of its inlined calls was also subject to this, the inlined call "
                                     "would have the original multiplier multiplied by intra-scc-cost-multiplier). This i"
                                     "s to prevent tons of inlining through a child SCC which can cause terrible compile times";
  v5.n128_u64[1] = 503;
  sub_1CD66C83C((int **)&v2, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCE02A8, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  v5.n128_u64[0] = (unint64_t)&v4;
  v2.n128_u32[0] = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCE0368, "keep-inline-advisor-for-printing", &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE0368, &dword_1CB82C000);
  uint64_t v4 = (int *)"";
  v5.n128_u64[0] = (unint64_t)"filename";
  v5.n128_u64[1] = 8;
  v2.n128_u64[0] = (unint64_t)"Optimization remarks file containing inline remarks to be replayed by cgscc inlining.";
  v2.n128_u64[1] = 85;
  int v3 = 1;
  sub_1CD66C9B4((llvm::cl::Option *)&unk_1EBCE04E8, "cgscc-inline-replay", (const char **)&v4, &v5, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCE04E8, &dword_1CB82C000);
  int v3 = 0;
  uint64_t v4 = &v3;
  v5.n128_u64[0] = (unint64_t)&v6;
  unint64_t v6 = "Function";
  uint64_t v7 = 8;
  int v8 = 0;
  int64_t v9 = "Replay on functions that have remarks associated with them (default)";
  uint64_t v10 = 68;
  uint64_t v11 = "Module";
  uint64_t v12 = 6;
  int v13 = 1;
  uint64_t v14 = "Replay on the entire module";
  uint64_t v15 = 27;
  v5.n128_u64[1] = 0x400000002;
  v2.n128_u64[0] = (unint64_t)"Whether inline replay should be applied to the entire Module or just the Functions "
                                     "(default) that are present as callers in remarks during cgscc inlining.";
  v2.n128_u64[1] = 154;
  int v1 = 1;
  sub_1CD66CB48(&v4, (uint64_t *)&v5, &v2, &v1);
  if ((const char **)v5.n128_u64[0] != &v6) {
    free((void *)v5.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD66B0F4, &qword_1EBCE05D0, &dword_1CB82C000);
  int v3 = 0;
  uint64_t v4 = &v3;
  v5.n128_u64[0] = (unint64_t)&v6;
  unint64_t v6 = "Original";
  uint64_t v7 = 8;
  int v8 = 0;
  int64_t v9 = "All decisions not in replay send to original advisor (default)";
  uint64_t v10 = 62;
  uint64_t v11 = "AlwaysInline";
  uint64_t v12 = 12;
  int v13 = 1;
  uint64_t v14 = "All decisions not in replay are inlined";
  uint64_t v15 = 39;
  uint64_t v16 = "NeverInline";
  uint64_t v17 = 11;
  int v18 = 2;
  int64x2_t v19 = "All decisions not in replay are not inlined";
  uint64_t v20 = 43;
  v5.n128_u64[1] = 0x400000003;
  v2.n128_u64[0] = (unint64_t)"How cgscc inline replay treats sites that don't come from the replay. Original: def"
                                     "ers to original advisor, AlwaysInline: inline all sites not in replay, NeverInline:"
                                     " inline no sites not in replay";
  v2.n128_u64[1] = 196;
  int v1 = 1;
  sub_1CD66CFD8(&v4, (uint64_t *)&v5, &v2, &v1);
  if ((const char **)v5.n128_u64[0] != &v6) {
    free((void *)v5.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD66B0F8, &qword_1EBCE0828, &dword_1CB82C000);
  int v3 = 3;
  uint64_t v4 = &v3;
  v5.n128_u64[0] = (unint64_t)&v6;
  unint64_t v6 = "Line";
  uint64_t v7 = 4;
  int v8 = 0;
  int64_t v9 = "<Line Number>";
  uint64_t v10 = 13;
  uint64_t v11 = "LineColumn";
  uint64_t v12 = 10;
  int v13 = 1;
  uint64_t v14 = "<Line Number>:<Column Number>";
  uint64_t v15 = 29;
  uint64_t v16 = "LineDiscriminator";
  uint64_t v17 = 17;
  int64x2_t v19 = "<Line Number>.<Discriminator>";
  uint64_t v20 = 29;
  uint64_t v21 = "LineColumnDiscriminator";
  uint64_t v22 = 23;
  int v18 = 2;
  int v23 = 3;
  BOOL v24 = "<Line Number>:<Column Number>.<Discriminator> (default)";
  uint64_t v25 = 55;
  v5.n128_u64[1] = 0x400000004;
  v2.n128_u64[0] = (unint64_t)"How cgscc inline replay file is formatted";
  v2.n128_u64[1] = 41;
  int v1 = 1;
  sub_1CD66D2EC(&v4, (uint64_t *)&v5, &v2, &v1);
  if ((const char **)v5.n128_u64[0] != &v6) {
    free((void *)v5.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD66B0FC, &qword_1EBCE0A80, &dword_1CB82C000);
  LODWORD(v4) = 1;
  LOBYTE(v3) = 0;
  v2.n128_u64[0] = (unint64_t)&v3;
  v5.n128_u64[0] = (unint64_t)"Enable the priority inline order for the inliner";
  v5.n128_u64[1] = 48;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCE0428, "inline-enable-priority-order", &v4, &v2, &v5);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE0428, &dword_1CB82C000);
}

uint64_t llvm::InternalizePass::shouldPreserveGV(llvm::InternalizePass *this, const llvm::GlobalValue *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      return 1;
    }
  }
  else if (!*((unsigned char *)a2 + 16) {
         && *((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72)
  }
         && (*((unsigned char *)a2 + 34) & 0x80) == 0)
  {
    return 1;
  }
  int v6 = *((_DWORD *)a2 + 8);
  int v7 = v6 & 0xF;
  uint64_t result = 1;
  if (v7 != 1 && (v6 & 0x300) != 0x200)
  {
    if (v4 == 3 && (*((unsigned char *)a2 + 80) & 2) != 0)
    {
      uint64_t v30 = *((void *)a2 + 5) + 216;
      __int16 v38 = 260;
      v37[0] = v30;
      llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v37);
      unsigned int v31 = v41 & 0xFFFFFFFE;
      if (v40 < 0) {
        operator delete(__p);
      }
      if (v31 != 48) {
        return 1;
      }
      int v7 = *((_DWORD *)a2 + 8) & 0xF;
    }
    if ((v7 - 7) < 2) {
      return 0;
    }
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      unsigned int v16 = *((_DWORD *)this + 12);
      if (v16)
      {
        size_t v18 = 0;
        int v22 = 0;
        char v36 = 1;
        int64x2_t v19 = &byte_1CFBCE98E;
LABEL_24:
        unsigned int v23 = v16 - 1;
        uint64_t v24 = *((void *)this + 5);
        uint64_t v35 = v16;
        uint64_t v25 = v24 + 8 * v16 + 8;
        int v26 = 1;
        int v27 = v22;
        while (1)
        {
          uint64_t v28 = v27 & v23;
          long long v29 = *(void **)(v24 + 8 * v28);
          if (v29 != (void *)-8)
          {
            if (!v29) {
              goto LABEL_40;
            }
            if (*(_DWORD *)(v25 + 4 * v28) == v22
              && v18 == *v29
              && ((v36 & 1) != 0 || !memcmp(v19, (char *)v29 + *((unsigned int *)this + 15), v18)))
            {
              break;
            }
          }
          int v27 = v26 + v28;
          ++v26;
        }
        if (v28 != -1 && (int)v28 != v35) {
          return 1;
        }
      }
LABEL_40:
      uint64_t v32 = *((void *)this + 4);
      if (v32) {
        return (*(uint64_t (**)(uint64_t, const llvm::GlobalValue *))(*(void *)v32 + 48))(v32, a2);
      }
      sub_1CB920400();
      return llvm::InternalizePass::maybeInternalize(v33, v34);
    }
    uint64_t v8 = ***(void ***)a2;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v12 = v9 + 16 * v11;
      int v13 = *(const llvm::GlobalValue **)v12;
      if (*(const llvm::GlobalValue **)v12 == a2) {
        goto LABEL_19;
      }
      int v14 = 1;
      while (v13 != (const llvm::GlobalValue *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        int v13 = *(const llvm::GlobalValue **)(v9 + 16 * v11);
        if (v13 == a2)
        {
          uint64_t v12 = v9 + 16 * v11;
          goto LABEL_19;
        }
      }
    }
    uint64_t v12 = v9 + 16 * v10;
LABEL_19:
    unsigned int v16 = *((_DWORD *)this + 12);
    if (v16)
    {
      uint64_t v17 = *(void **)(v12 + 8);
      size_t v20 = *v17;
      int64x2_t v19 = (char *)(v17 + 2);
      size_t v18 = v20;
      if (v20)
      {
        uint64_t v21 = 0;
        int v22 = 0;
        do
          int v22 = 33 * v22 + v19[v21++];
        while (v18 != v21);
        char v36 = 0;
      }
      else
      {
        int v22 = 0;
        char v36 = 1;
      }
      goto LABEL_24;
    }
    goto LABEL_40;
  }
  return result;
}

uint64_t llvm::InternalizePass::maybeInternalize(llvm::InternalizePass *this, llvm::GlobalValue *a2, uint64_t a3)
{
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 != 2)
  {
    uint64_t AliaseeObject = a2;
    if (v5 != 1 || (uint64_t AliaseeObject = (llvm::GlobalValue *)llvm::GlobalAlias::getAliaseeObject(a2)) != 0)
    {
      uint64_t v8 = *((void *)AliaseeObject + 6);
      if (v8)
      {
        uint64_t v16 = 0;
        if (sub_1CD45B528(*(void *)a3, *(_DWORD *)(a3 + 16), v8, &v16) & 1) != 0 && (*(void *)(v16 + 16)) {
          return 0;
        }
        unsigned int v12 = *((unsigned __int8 *)a2 + 16);
        if (v12 <= 3 && v12 != 1)
        {
          uint64_t v16 = 0;
          int v13 = sub_1CD45B528(*(void *)a3, *(_DWORD *)(a3 + 16), v8, &v16);
          uint64_t v14 = v16;
          if (!v13) {
            uint64_t v14 = *(void *)a3 + 24 * *(unsigned int *)(a3 + 16);
          }
          if (*(void *)(v14 + 8) == 1)
          {
            uint64_t v15 = *((void *)a2 + 6);
            if (v15) {
              llvm::Comdat::removeUser(v15, (uint64_t)a2);
            }
            *((void *)a2 + 6) = 0;
          }
          else if (!*(unsigned char *)this)
          {
            *(_DWORD *)(v8 + 8) = 3;
          }
        }
        int v10 = *((_DWORD *)a2 + 8);
        if ((v10 & 0xFu) - 7 < 2) {
          return 0;
        }
LABEL_8:
        *((_DWORD *)a2 + 8) = v10 & 0xFFFFBFC0 | 0x4007;
        return 1;
      }
    }
  }
  if ((*((_DWORD *)a2 + 8) & 0xFu) - 7 >= 2 && (llvm::InternalizePass::shouldPreserveGV(this, a2) & 1) == 0)
  {
    int v10 = *((_DWORD *)a2 + 8);
    goto LABEL_8;
  }
  return 0;
}

uint64_t llvm::InternalizePass::internalizeModule(llvm::InternalizePass *this, llvm::Module *a2, llvm::CallGraph *a3)
{
  v46[4] = *MEMORY[0x1E4F143B8];
  if (a3) {
    uint64_t v6 = *((void *)a3 + 10);
  }
  else {
    uint64_t v6 = 0;
  }
  int64_t v44 = v46;
  uint64_t v45 = 0x400000000;
  llvm::collectUsedGlobalVariables((uint64_t)a2, (uint64_t)&v44, 0);
  v42[0] = 0;
  v42[1] = 0;
  int v43 = 0;
  if (*((_DWORD *)a2 + 33))
  {
    for (uint64_t i = (void *)*((void *)a2 + 4); i != (void *)((char *)a2 + 24); uint64_t i = (void *)i[1])
    {
      if (i) {
        uint64_t v25 = (llvm::GlobalAlias *)(i - 7);
      }
      else {
        uint64_t v25 = 0;
      }
      llvm::InternalizePass::checkComdat(this, v25, (uint64_t)v42);
    }
    for (uint64_t j = (void *)*((void *)a2 + 2); j != (void *)((char *)a2 + 8); uint64_t j = (void *)j[1])
    {
      if (j) {
        int v33 = (llvm::GlobalAlias *)(j - 7);
      }
      else {
        int v33 = 0;
      }
      llvm::InternalizePass::checkComdat(this, v33, (uint64_t)v42);
    }
    for (uint64_t k = (void *)*((void *)a2 + 6); k != (void *)((char *)a2 + 40); uint64_t k = (void *)k[1])
    {
      if (k) {
        uint64_t v35 = (llvm::GlobalAlias *)(k - 6);
      }
      else {
        uint64_t v35 = 0;
      }
      llvm::InternalizePass::checkComdat(this, v35, (uint64_t)v42);
    }
  }
  if (v45)
  {
    int v26 = (llvm::Value **)v44;
    uint64_t v27 = 8 * v45;
    do
    {
      uint64_t v28 = *v26++;
      Name = (unsigned __int8 *)llvm::Value::getName(v28);
      sub_1CC0D7F54((llvm::InternalizePass *)((char *)this + 40), Name, v30);
      v27 -= 8;
    }
    while (v27);
  }
  sub_1CC0D7F54((llvm::InternalizePass *)((char *)this + 40), "llvm.used", 9uLL);
  sub_1CC0D7F54((llvm::InternalizePass *)((char *)this + 40), "llvm.compiler.used", 0x12uLL);
  sub_1CC0D7F54((llvm::InternalizePass *)((char *)this + 40), "llvm.global_ctors", 0x11uLL);
  sub_1CC0D7F54((llvm::InternalizePass *)((char *)this + 40), "llvm.global_dtors", 0x11uLL);
  sub_1CC0D7F54((llvm::InternalizePass *)((char *)this + 40), "llvm.global.annotations", 0x17uLL);
  sub_1CC0D7F54((llvm::InternalizePass *)((char *)this + 40), "__stack_chk_fail", 0x10uLL);
  __int16 v37 = 260;
  v36[0] = (char *)a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v36);
  int v7 = v40;
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if (v7 == 21) {
    uint64_t v8 = "__ssp_canary_word";
  }
  else {
    uint64_t v8 = "__stack_chk_guard";
  }
  sub_1CC0D7F54((llvm::InternalizePass *)((char *)this + 40), (unsigned __int8 *)v8, 0x11uLL);
  __int16 v37 = 260;
  v36[0] = (char *)a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v36);
  *(unsigned char *)this = v41 == 7;
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = (void *)*((void *)a2 + 4);
  if (v9 == (void *)((char *)a2 + 24))
  {
    int v10 = 0;
  }
  else
  {
    int v10 = 0;
    do
    {
      if (v9) {
        uint64_t v11 = (llvm::GlobalValue *)(v9 - 7);
      }
      else {
        uint64_t v11 = 0;
      }
      int v12 = llvm::InternalizePass::maybeInternalize(this, v11, (uint64_t)v42);
      if (v12) {
        BOOL v13 = v6 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        v10 |= v12;
      }
      else
      {
        int64x2_t v19 = (void *)*((void *)a3 + 2);
        if (!v19) {
          goto LABEL_49;
        }
        size_t v20 = (void *)((char *)a3 + 16);
        do
        {
          unint64_t v21 = v19[4];
          BOOL v22 = v21 >= (unint64_t)v11;
          if (v21 >= (unint64_t)v11) {
            unsigned int v23 = v19;
          }
          else {
            unsigned int v23 = v19 + 1;
          }
          if (v22) {
            size_t v20 = v19;
          }
          int64x2_t v19 = (void *)*v23;
        }
        while (*v23);
        if (v20 == (void *)((char *)a3 + 16) || v20[4] > (unint64_t)v11) {
LABEL_49:
        }
          size_t v20 = (void *)((char *)a3 + 16);
        llvm::CallGraphNode::removeOneAbstractEdgeTo(v6, v20[5]);
        int v10 = 1;
      }
      uint64_t v9 = (void *)v9[1];
    }
    while (v9 != (void *)((char *)a2 + 24));
  }
  for (uint64_t m = (void *)*((void *)a2 + 2); m != (void *)((char *)a2 + 8); uint64_t m = (void *)m[1])
  {
    if (m) {
      uint64_t v15 = (llvm::GlobalValue *)(m - 7);
    }
    else {
      uint64_t v15 = 0;
    }
    v10 |= llvm::InternalizePass::maybeInternalize(this, v15, (uint64_t)v42);
  }
  uint64_t v16 = (char *)a2 + 40;
  for (uint64_t n = *((void *)a2 + 6); (char *)n != v16; uint64_t n = *(void *)(n + 8))
  {
    if (n) {
      unsigned int v31 = (llvm::GlobalValue *)(n - 48);
    }
    else {
      unsigned int v31 = 0;
    }
    v10 |= llvm::InternalizePass::maybeInternalize(this, v31, (uint64_t)v42);
  }
  MEMORY[0x1D25D9CD0](v42[0], 8);
  if (v44 != v46) {
    free(v44);
  }
  return v10 & 1;
}

llvm::StringMapImpl *sub_1CC94820C(llvm::StringMapImpl *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0x800000000;
  if (byte_1EBCE0E57 >= 0) {
    size_t v2 = byte_1EBCE0E57 & 0x7F;
  }
  else {
    size_t v2 = qword_1EBCE0E48;
  }
  if (v2)
  {
    __int16 v22 = 261;
    if (byte_1EBCE0E57 >= 0) {
      int v3 = &qword_1EBCE0E40;
    }
    else {
      int v3 = (uint64_t *)qword_1EBCE0E40;
    }
    v21[0] = v3;
    v21[1] = v2;
    int v4 = sub_1CD096690((unsigned __int8 *)v21, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v25);
    char v5 = v26;
    if (v26)
    {
      uint64_t v6 = (llvm::raw_ostream *)llvm::errs((llvm *)v4);
      int v7 = v6;
      uint64_t v8 = (void *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v8 > 0x28uLL)
      {
        qmemcpy(v8, "WARNING: Internalize couldn't load file '", 41);
        uint64_t v9 = (void *)(*((void *)v6 + 4) + 41);
        *((void *)v7 + 4) = v9;
      }
      else
      {
        int v7 = llvm::raw_ostream::write(v6, "WARNING: Internalize couldn't load file '", 0x29uLL);
        uint64_t v9 = (void *)*((void *)v7 + 4);
      }
      if (v2 <= *((void *)v7 + 3) - (void)v9)
      {
        memcpy(v9, v3, v2);
        int v10 = (void *)(*((void *)v7 + 4) + v2);
        *((void *)v7 + 4) = v10;
      }
      else
      {
        int v7 = llvm::raw_ostream::write(v7, (const char *)v3, v2);
        int v10 = (void *)*((void *)v7 + 4);
      }
      if (*((void *)v7 + 3) - (void)v10 > 0x1FuLL)
      {
        qmemcpy(v10, "'! Continuing as if it's empty.\n", 32);
        *((void *)v7 + 4) += 32;
      }
      else
      {
        llvm::raw_ostream::write(v7, "'! Continuing as if it's empty.\n", 0x20uLL);
        char v5 = v26;
      }
    }
    else
    {
      llvm::line_iterator::line_iterator((llvm::line_iterator *)v21, v25, 1, 0);
      int64x2_t v19 = *(unsigned __int8 **)v23;
      if ((_BYTE)v22 || *(void *)v23)
      {
        do
        {
          sub_1CC0D7F54(a1, v19, __n);
          llvm::line_iterator::advance((uint64_t)v21);
          int64x2_t v19 = *(unsigned __int8 **)v23;
          if ((_BYTE)v22) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = *(void *)v23 == 0;
          }
        }
        while (!v20);
      }
    }
    if ((v5 & 1) == 0 && v25) {
      (*(void (**)(llvm::MemoryBuffer *))(*(void *)v25 + 8))(v25);
    }
  }
  uint64_t v11 = qword_1EBCE0D68;
  uint64_t v12 = unk_1EBCE0D70;
  while (v11 != v12)
  {
    char v13 = *(unsigned char *)(v11 + 23);
    BOOL v14 = v13 < 0;
    if (v13 >= 0) {
      uint64_t v15 = (unsigned __int8 *)v11;
    }
    else {
      uint64_t v15 = *(unsigned __int8 **)v11;
    }
    size_t v16 = v13 & 0x7F;
    if (v14) {
      size_t v17 = *(void *)(v11 + 8);
    }
    else {
      size_t v17 = v16;
    }
    sub_1CC0D7F54(a1, v15, v17);
    v11 += 24;
  }
  return a1;
}

void llvm::InternalizePass::run()
{
}

void llvm::initializeInternalizeLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  size_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE0CE0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC9485EC;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCE0CE0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC9485EC()
{
}

uint64_t sub_1CC948688(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE0CD8;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2629228;
  sub_1CC94820C((llvm::StringMapImpl *)&v5);
  size_t v2 = operator new(0x28uLL);
  uint64_t v3 = v5;
  void *v2 = &unk_1F26292C8;
  v2[1] = v3;
  *((_OWORD *)v2 + 1) = v6;
  uint64_t v5 = 0;
  *(void *)&long long v6 = 0;
  DWORD2(v6) = 0;
  *(void *)(a1 + 56) = v2;
  sub_1CC0D7CD8((uint64_t)&v5);
  return a1;
}

void sub_1CC948730()
{
}

void sub_1CC94876C(llvm::Pass *this)
{
  *(void *)this = &unk_1F2629228;
  size_t v2 = (char *)this + 32;
  uint64_t v3 = (char *)*((void *)this + 7);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC948820(llvm::Pass *this)
{
  *(void *)this = &unk_1F2629228;
  size_t v2 = (char *)this + 32;
  uint64_t v3 = (char *)*((void *)this + 7);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC9488E8(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  sub_1CB843600(a2, v3, (uint64_t)&llvm::CallGraphWrapperPass::ID);
}

uint64_t sub_1CC948960(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((void *)a1 + 1) + 24), &llvm::CallGraphWrapperPass::ID, 1);
  if (AnalysisPass
    && (uint64_t v6 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::CallGraphWrapperPass::ID)) != 0)
  {
    int v7 = *(llvm::CallGraph **)(v6 + 32);
  }
  else
  {
    int v7 = 0;
  }
  sub_1CC948AB0((uint64_t)v9, (uint64_t)a1 + 32);
  uint64_t v4 = sub_1CC9144B8((llvm::Module *)a2, v9, v7);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v4;
}

uint64_t sub_1CC948AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC948B48(void *a1)
{
  *a1 = &unk_1F26292C8;
  sub_1CC0D7CD8((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CC948B8C(void *a1)
{
  *a1 = &unk_1F26292C8;
  sub_1CC0D7CD8((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC948BF0(uint64_t a1)
{
  int v1 = (uint64_t *)(a1 + 8);
  size_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F26292C8;
  sub_1CD66EDC0((llvm::StringMapImpl *)(v2 + 1), v1);
  return v2;
}

llvm::StringMapImpl *sub_1CC948C44(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26292C8;
  return sub_1CD66EDC0((llvm::StringMapImpl *)(a2 + 1), (uint64_t *)(a1 + 8));
}

uint64_t sub_1CC948C70(uint64_t a1)
{
  return sub_1CC0D7CD8(a1 + 8);
}

void sub_1CC948C78(void *a1)
{
  sub_1CC0D7CD8((uint64_t)a1 + 8);

  operator delete(a1);
}

BOOL sub_1CC948CB4(uint64_t a1, uint64_t ***a2)
{
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    unsigned int v16 = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      size_t v13 = 0;
      uint64_t v12 = &byte_1CFBCE98E;
      goto LABEL_33;
    }
LABEL_35:
    LODWORD(v21) = -1;
    return v21 != -1 && (int)v21 != (unint64_t)v16;
  }
  uint64_t v2 = ***a2;
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(unsigned int *)(v2 + 168);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t ****)(v3 + 16 * v5);
    int v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_9;
    }
    int v8 = 1;
    while (v7 != (uint64_t ***)-4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      int v7 = *(uint64_t ****)(v3 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (uint64_t ****)(v3 + 16 * v5);
        goto LABEL_9;
      }
    }
  }
  uint64_t v6 = (uint64_t ****)(v3 + 16 * v4);
LABEL_9:
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (!v10)
  {
    unsigned int v16 = 0;
    goto LABEL_35;
  }
  uint64_t v11 = v6[1];
  size_t v14 = (size_t)*v11;
  uint64_t v12 = (char *)(v11 + 2);
  size_t v13 = v14;
  if (v14)
  {
    uint64_t v15 = 0;
    unsigned int v16 = 0;
    do
      unsigned int v16 = 33 * v16 + v12[v15++];
    while (v13 != v15);
    char v17 = 0;
    goto LABEL_14;
  }
  unsigned int v16 = 0;
LABEL_33:
  char v17 = 1;
LABEL_14:
  uint64_t v18 = *(void *)(a1 + 8);
  int v19 = 1;
  unsigned int v20 = v16;
  while (1)
  {
    uint64_t v21 = v20 & (v10 - 1);
    __int16 v22 = *(void **)(v18 + 8 * v21);
    if (v22 == (void *)-8) {
      goto LABEL_21;
    }
    if (!v22) {
      break;
    }
    if (*(_DWORD *)(v18 + 8 * v10 + 8 + 4 * v21) == v16
      && v13 == *v22
      && ((v17 & 1) != 0 || !memcmp(v12, (char *)v22 + *(unsigned int *)(a1 + 28), v13)))
    {
      goto LABEL_23;
    }
LABEL_21:
    unsigned int v20 = v19 + v21;
    ++v19;
  }
  LODWORD(v21) = -1;
LABEL_23:
  unsigned int v16 = v10;
  return v21 != -1 && (int)v21 != (unint64_t)v16;
}

uint64_t sub_1CC948E74()
{
  *(void *)&long long v3 = "filename";
  *((void *)&v3 + 1) = 8;
  *(void *)&long long v2 = "A file containing list of symbol names to preserve";
  *((void *)&v2 + 1) = 50;
  sub_1CD66EBBC(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCE0DC0, &dword_1CB82C000);
  *(void *)&long long v3 = "list";
  *((void *)&v3 + 1) = 4;
  *(void *)&long long v2 = "A list of symbol names to preserve";
  *((void *)&v2 + 1) = 34;
  int v1 = 1;
  sub_1CD66ECC4(&v3, &v2, &v1);

  return __cxa_atexit((void (*)(void *))sub_1CD510A20, &qword_1EBCE0CE8, &dword_1CB82C000);
}

void llvm::initializeLoopExtractorLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  long long v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE0EB8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC948FC0;
    v4[1] = &v2;
    long long v3 = v4;
    std::__call_once(&qword_1EBCE0EB8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC948FC0(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeBreakCriticalEdgesPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopSimplifyPass(a1, v3);
  operator new();
}

void llvm::initializeSingleLoopExtractorPass(llvm *this, llvm::PassRegistry *a2)
{
  long long v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE0EA8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC9490E8;
    v4[1] = &v2;
    long long v3 = v4;
    std::__call_once(&qword_1EBCE0EA8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC9490E8()
{
}

uint64_t sub_1CC949184(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2 == a2 + 24 || !*(_DWORD *)a1)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    uint64_t v5 = (uint64_t *)(a2 + 32);
    do
    {
      uint64_t v6 = *v5;
      uint64_t v7 = *v5 - 56;
      if (v6) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void *)(v8 + 112);
      if (v9) {
        LODWORD(v9) = (*(unsigned __int8 *)(v9 + 17) >> 3) & 1;
      }
      char v10 = 0;
      if ((v9 & 1) == 0 && *(void *)(v8 + 72) != v8 + 72)
      {
        uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(a1 + 24))(*(void *)(a1 + 32), v8);
        if (*(void *)(v11 + 24) == *(void *)(v11 + 32))
        {
          char v10 = 0;
        }
        else
        {
          uint64_t v12 = v11;
          (*(void (**)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 16), v8);
          size_t v13 = *(llvm::Loop ***)(v12 + 24);
          size_t v14 = *(char **)(v12 + 32);
          if (v13 + 1 == (llvm::Loop **)v14) {
            llvm::Loop::isLoopSimplifyForm(*v13);
          }
          char v10 = sub_1CC9498B8(a1, (char *)v13, v14);
        }
      }
      v4 |= v10;
      uint64_t v5 = (uint64_t *)(v6 + 8);
    }
    while (v6 != v2 && *(_DWORD *)a1 != 0);
  }
  return v4 & 1;
}

void sub_1CC949400()
{
}

void sub_1CC949440()
{
}

uint64_t sub_1CC949490(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE0EB0;
  *(_DWORD *)(a1 + 24) = 4;
  *(_DWORD *)(a1 + 28) = a2;
  *(void *)a1 = &unk_1F2629310;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE0EB8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC948FC0;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCE0EB8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC949544(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC94957C(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61F348);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61F34C);

  sub_1CB843600(a2, a2 + 144, (uint64_t)llvm::AssumptionCacheTracker::ID);
}

uint64_t sub_1CC94961C(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }
  char v15 = 0;
  v13[0] = a1;
  v13[1] = &v15;
  size_t v14 = a1;
  int v5 = *((_DWORD *)a1 + 7);
  uint64_t v6 = sub_1CC9496C8;
  uint64_t v7 = &v14;
  uint64_t v8 = sub_1CC949750;
  uint64_t v9 = v13;
  char v10 = sub_1CC9497E8;
  uint64_t v11 = &v12;
  uint64_t v12 = a1;
  LODWORD(result) = sub_1CC949184((uint64_t)&v5, (uint64_t)a2);
  if (v15) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t sub_1CC9496C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::DominatorTreeWrapperPass::ID)
       + 32;
}

uint64_t sub_1CC949750(void *a1)
{
  uint64_t v1 = (unsigned char *)a1[1];
  uint64_t v2 = *(void *)(*(void *)(*a1 + 8) + 24);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  if (v1) {
    *v1 |= v4;
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 96))(v3, &llvm::LoopInfoWrapperPass::ID) + 32;
}

uint64_t sub_1CC9497E8(uint64_t a1, llvm::Function *a2)
{
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(*(void *)a1 + 8) + 24), llvm::AssumptionCacheTracker::ID, 1);
  if (!AnalysisPass) {
    return 0;
  }
  char v4 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)AnalysisPass + 96))(AnalysisPass, llvm::AssumptionCacheTracker::ID);
  if (!v4) {
    return 0;
  }

  return llvm::AssumptionCacheTracker::lookupAssumptionCache(v4, a2);
}

void sub_1CC949880(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC9498B8(uint64_t a1, char *a2, char *a3)
{
  v6[8] = *MEMORY[0x1E4F143B8];
  char v4 = v6;
  uint64_t v5 = 0x800000000;
  sub_1CBAACC38((uint64_t)&v4, a2, a3);
  if (v5) {
    llvm::Loop::isLoopSimplifyForm(*(llvm::Loop **)v4);
  }
  if (v4 != v6) {
    free(v4);
  }
  return 0;
}

uint64_t sub_1CC9499BC(uint64_t a1, llvm::Loop *a2, int32x2_t *a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(llvm::Function **)(**((void **)a2 + 4) + 56);
  uint64_t v8 = (*(uint64_t (**)(void, llvm::Function *))(a1 + 40))(*(void *)(a1 + 48), v7);
  llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)v13, v7);
  char v11 = 0;
  LOBYTE(v10) = 0;
  llvm::CodeExtractor::CodeExtractor((uint64_t)v12, a4, (uint64_t)a2, 0, 0, 0, v8, &v10);
  if (llvm::CodeExtractor::extractCodeRegion((llvm::CodeExtractor *)v12, (const llvm::CodeExtractorAnalysisCache *)v13)) {
    llvm::LoopInfo::erase(a3, a2);
  }
  sub_1CD6110E0((uint64_t)v12);
  sub_1CD611140((uint64_t)v13);
  return 0;
}

void sub_1CC949AD0()
{
}

void sub_1CC949AFC()
{
}

void sub_1CC949B28()
{
}

uint64_t llvm::lowertypetests::BitSetInfo::containsGlobalOffset(llvm::lowertypetests::BitSetInfo *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (!v3) {
    return 0;
  }
  int v5 = *((_DWORD *)this + 10);
  if ((v4 & ~(-1 << v5)) != 0) {
    return 0;
  }
  unint64_t v6 = v4 >> v5;
  if (v6 >= *((void *)this + 4)) {
    return 0;
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if (!v7) {
    return 0;
  }
  while (1)
  {
    unint64_t v8 = v7[4];
    if (v6 >= v8) {
      break;
    }
LABEL_9:
    uint64_t v7 = (void *)*v7;
    if (!v7) {
      return 0;
    }
  }
  if (v8 < v6)
  {
    ++v7;
    goto LABEL_9;
  }
  return 1;
}

llvm::raw_ostream *llvm::lowertypetests::BitSetInfo::print(llvm::lowertypetests::BitSetInfo *this, llvm::raw_ostream *a2)
{
  unint64_t v4 = (_DWORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 6uLL)
  {
    *(_DWORD *)((char *)v4 + 3) = 544499059;
    _DWORD *v4 = 1936090735;
    *((void *)a2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a2, "offset ", 7uLL);
  }
  sub_1CD098D14(a2, *((void *)this + 3), 0, 0, 0);
  uint64_t v5 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v5) > 5)
  {
    *(_WORD *)(v5 + 4) = 8293;
    *(_DWORD *)uint64_t v5 = 2053731104;
    *((void *)a2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(a2, " size ", 6uLL);
  }
  sub_1CD098D14(a2, *((void *)this + 4), 0, 0, 0);
  unint64_t v6 = (_DWORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v6 > 6uLL)
  {
    *(_DWORD *)((char *)v6 + 3) = 544106345;
    *unint64_t v6 = 1768710432;
    *((void *)a2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a2, " align ", 7uLL);
  }
  int v7 = *((_DWORD *)this + 10);
  unint64_t v8 = 1 << v7;
  if (v7 == 31)
  {
    unint64_t v8 = -(uint64_t)v8;
    uint64_t v9 = a2;
    int v10 = 1;
  }
  else
  {
    uint64_t v9 = a2;
    int v10 = 0;
  }
  uint64_t result = sub_1CD098D14(v9, v8, 0, 0, v10);
  uint64_t v12 = *((void *)a2 + 4);
  unint64_t v13 = *((void *)a2 + 3) - v12;
  if (*((void *)this + 2) != *((void *)this + 4))
  {
    if (v13 > 2)
    {
      *(unsigned char *)(v12 + 2) = 32;
      *(_WORD *)uint64_t v12 = 31520;
      *((void *)a2 + 4) += 3;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(a2, " { ", 3uLL);
    }
    int v19 = *(char **)this;
    char v17 = (char *)this + 8;
    uint64_t v18 = v19;
    if (v19 != v17)
    {
      do
      {
        uint64_t result = sub_1CD098D14(a2, *((void *)v18 + 4), 0, 0, 0);
        unsigned int v20 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v20 >= *((void *)a2 + 3))
        {
          uint64_t result = llvm::raw_ostream::write(a2, 32);
        }
        else
        {
          *((void *)a2 + 4) = v20 + 1;
          *unsigned int v20 = 32;
        }
        uint64_t v21 = (char *)*((void *)v18 + 1);
        if (v21)
        {
          do
          {
            __int16 v22 = v21;
            uint64_t v21 = *(char **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            __int16 v22 = (char *)*((void *)v18 + 2);
            BOOL v23 = *(void *)v22 == (void)v18;
            uint64_t v18 = v22;
          }
          while (!v23);
        }
        uint64_t v18 = v22;
      }
      while (v22 != v17);
    }
    uint64_t v24 = (_WORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v24 <= 1uLL)
    {
      uint64_t v14 = "}\n";
      char v15 = a2;
      size_t v16 = 2;
      goto LABEL_26;
    }
    *uint64_t v24 = 2685;
    uint64_t v25 = *((void *)a2 + 4) + 2;
LABEL_35:
    *((void *)a2 + 4) = v25;
    return result;
  }
  if (v13 > 9)
  {
    *(_WORD *)(v12 + 8) = 2675;
    *(void *)uint64_t v12 = *(void *)" all-ones\n";
    uint64_t v25 = *((void *)a2 + 4) + 10;
    goto LABEL_35;
  }
  uint64_t v14 = " all-ones\n";
  char v15 = a2;
  size_t v16 = 10;
LABEL_26:

  return llvm::raw_ostream::write(v15, v14, v16);
}

void llvm::lowertypetests::GlobalLayoutBuilder::addFragment(int64x2_t *a1, void *a2)
{
  BOOL v3 = a1;
  unint64_t v4 = a1[1].u64[0];
  uint64_t v5 = (void *)a1->i64[1];
  if ((unint64_t)v5 >= v4)
  {
    int v64 = (void *)a1->i64[0];
    unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - a1->i64[0]) >> 3);
    unint64_t v66 = v65 + 1;
    if (v65 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_83:
    }
      abort();
    if (0x5555555555555556 * ((uint64_t)(v4 - (void)v64) >> 3) > v66) {
      unint64_t v66 = 0x5555555555555556 * ((uint64_t)(v4 - (void)v64) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v64) >> 3) >= 0x555555555555555) {
      unint64_t v67 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v67 = v66;
    }
    int v83 = a1 + 1;
    if (v67 > 0xAAAAAAAAAAAAAAALL) {
LABEL_84:
    }
      sub_1CB833614();
    uint64_t v68 = (char *)operator new(24 * v67);
    BOOL v69 = &v68[24 * v65];
    *((void *)v69 + 1) = 0;
    *((void *)v69 + 2) = 0;
    *(void *)BOOL v69 = 0;
    if (v5 == v64)
    {
      int64x2_t v70 = vdupq_n_s64((unint64_t)v5);
      uint64_t v71 = &v68[24 * v65];
    }
    else
    {
      uint64_t v71 = &v68[24 * v65];
      do
      {
        long long v72 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v71 - 24) = v72;
        v71 -= 24;
        *((void *)v71 + 2) = v5[2];
        *uint64_t v5 = 0;
        v5[1] = 0;
        void v5[2] = 0;
      }
      while (v5 != v64);
      int64x2_t v70 = *v3;
      unint64_t v4 = v3[1].u64[0];
    }
    int v73 = v69 + 24;
    v3->i64[0] = (uint64_t)v71;
    v3->i64[1] = (uint64_t)(v69 + 24);
    int64x2_t v81 = v70;
    v3[1].i64[0] = (uint64_t)&v68[24 * v67];
    unint64_t v82 = v4;
    uint64_t v80 = v70.i64[0];
    sub_1CD4CB4EC((uint64_t)&v80);
    unint64_t v6 = v73;
  }
  else
  {
    unint64_t v6 = v5 + 3;
    *uint64_t v5 = 0;
    v5[1] = 0;
    void v5[2] = 0;
  }
  v3->i64[1] = (uint64_t)v6;
  uint64_t v74 = v3->i64[0];
  uint64_t v9 = (void *)*a2;
  int v7 = a2 + 1;
  unint64_t v8 = v9;
  if (v9 != v7)
  {
    uint64_t v75 = v3;
    int v76 = v7;
    uint64_t v79 = v6;
    do
    {
      uint64_t v10 = v8[4];
      uint64_t v11 = *(void *)(v3[1].i64[1] + 8 * v10);
      if (!v11)
      {
        long long v29 = (char *)*(v6 - 2);
        unint64_t v28 = *(v6 - 1);
        if ((unint64_t)v29 >= v28)
        {
          char v36 = (char *)*(v6 - 3);
          uint64_t v37 = (v29 - v36) >> 3;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61) {
            goto LABEL_83;
          }
          uint64_t v39 = v28 - (void)v36;
          if (v39 >> 2 > v38) {
            unint64_t v38 = v39 >> 2;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            if (v40 >> 61) {
              goto LABEL_84;
            }
            int v41 = (char *)operator new(8 * v40);
            unint64_t v6 = v79;
          }
          else
          {
            int v41 = 0;
          }
          uint64_t v55 = &v41[8 * v37];
          *(void *)uint64_t v55 = v10;
          size_t v30 = v55 + 8;
          while (v29 != v36)
          {
            uint64_t v56 = *((void *)v29 - 1);
            v29 -= 8;
            *((void *)v55 - 1) = v56;
            v55 -= 8;
          }
          *(v6 - 3) = v55;
          *(v6 - 2) = v30;
          *(v6 - 1) = &v41[8 * v40];
          if (v36)
          {
            operator delete(v36);
            unint64_t v6 = v79;
          }
        }
        else
        {
          *(void *)long long v29 = v10;
          size_t v30 = v29 + 8;
        }
        *(v6 - 2) = v30;
        goto LABEL_60;
      }
      uint64_t v12 = v3->i64[0] + 24 * v11;
      unint64_t v13 = *(char **)v12;
      uint64_t v14 = *(char **)(v12 + 8);
      uint64_t v15 = (uint64_t)&v14[-*(void *)v12];
      if (v15 >= 1)
      {
        uint64_t v16 = v15 >> 3;
        uint64_t v18 = (char *)*(v6 - 3);
        char v17 = (char *)*(v6 - 2);
        uint64_t v19 = v17 - v18;
        unsigned int v20 = &v18[(v17 - v18) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v21 = *(v6 - 1);
        if (v16 > (v21 - (uint64_t)v17) >> 3)
        {
          uint64_t v22 = v19 >> 3;
          unint64_t v23 = (v19 >> 3) + v16;
          if (v23 >> 61) {
            goto LABEL_83;
          }
          uint64_t v24 = v21 - (void)v18;
          if (v24 >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          BOOL v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v25) {
            unint64_t v26 = v23;
          }
          unint64_t v77 = v26;
          if (v26)
          {
            if (v26 >> 61) {
              goto LABEL_84;
            }
            uint64_t v27 = (char *)operator new(8 * v26);
            unint64_t v6 = v79;
            unsigned int v20 = &v18[(v17 - v18) & 0xFFFFFFFFFFFFFFF8];
          }
          else
          {
            uint64_t v27 = 0;
          }
          int v47 = &v27[8 * v22];
          uint64_t v48 = &v47[8 * v16];
          uint64_t v49 = 8 * v16;
          uint64_t v50 = v47;
          do
          {
            uint64_t v51 = *(void *)v13;
            v13 += 8;
            *(void *)uint64_t v50 = v51;
            v50 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v18 != v17)
          {
            uint64_t v52 = 8 * v22;
            do
            {
              *(void *)&v27[v52 - 8] = *(void *)&v18[v52 - 8];
              v52 -= 8;
            }
            while (v52);
            int v47 = v27;
          }
          uint64_t v53 = v17 - v20;
          if (v17 != v20)
          {
            uint64_t v54 = v48;
            memmove(v48, v20, v17 - v20);
            uint64_t v48 = v54;
            unint64_t v6 = v79;
          }
          *(v6 - 3) = v47;
          *(v6 - 2) = &v48[v53];
          *(v6 - 1) = &v27[8 * v77];
          BOOL v3 = v75;
          int v7 = v76;
          if (!v18) {
            goto LABEL_52;
          }
          operator delete(v18);
          goto LABEL_51;
        }
        uint64_t v31 = v17 - v20;
        uint64_t v32 = (v17 - v20) >> 3;
        if (v32 >= v16)
        {
          int v33 = &v13[8 * v16];
          uint64_t v35 = (char *)*(v6 - 2);
        }
        else
        {
          int v33 = &v13[8 * v32];
          int64_t v34 = v14 - v33;
          if (v14 != v33)
          {
            uint64_t v78 = v20;
            memmove((void *)*(v6 - 2), &v13[8 * v32], v14 - v33);
            unsigned int v20 = v78;
            unint64_t v6 = v79;
          }
          uint64_t v35 = &v17[v34];
          *(v6 - 2) = &v17[v34];
          int v7 = v76;
          if (v31 < 1) {
            goto LABEL_52;
          }
        }
        unint64_t v42 = &v35[-8 * v16];
        int v43 = v35;
        while (v42 < v17)
        {
          uint64_t v44 = *(void *)v42;
          v42 += 8;
          *(void *)int v43 = v44;
          v43 += 8;
        }
        uint64_t v45 = &v20[8 * v16];
        *(v6 - 2) = v43;
        if (v35 != v45)
        {
          uint64_t v46 = v20;
          memmove(&v35[-8 * ((v35 - v45) >> 3)], v20, v35 - v45);
          unsigned int v20 = v46;
          unint64_t v6 = v79;
        }
        if (v33 != v13)
        {
          memmove(v20, v13, v33 - v13);
LABEL_51:
          unint64_t v6 = v79;
        }
      }
LABEL_52:
      *(void *)(v12 + 8) = *(void *)v12;
LABEL_60:
      int64_t v57 = (void *)v8[1];
      if (v57)
      {
        do
        {
          uint64_t v58 = v57;
          int64_t v57 = (void *)*v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          uint64_t v58 = (void *)v8[2];
          BOOL v59 = *v58 == (void)v8;
          unint64_t v8 = v58;
        }
        while (!v59);
      }
      unint64_t v8 = v58;
    }
    while (v58 != v7);
  }
  int v60 = (uint64_t *)*(v6 - 3);
  int v61 = (uint64_t *)*(v6 - 2);
  if (v60 != v61)
  {
    uint64_t v62 = v3[1].i64[1];
    do
    {
      uint64_t v63 = *v60++;
      *(void *)(v62 + 8 * v63) = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v74) >> 3) - 1;
    }
    while (v60 != v61);
  }
}

void llvm::initializeLowerTypeTestsPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE0EC8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC94A3D0;
    v4[1] = &v2;
    BOOL v3 = v4;
    std::__call_once(&qword_1EBCE0EC8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC94A3D0()
{
}

uint64_t sub_1CC94A46C(llvm::IntegerType **a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  memset(v55, 0, 32);
  uint64_t v54 = v55;
  v55[4] = 0x2800000000;
  v56[0] = 0;
  v55[6] = v56;
  v57[1] = 0;
  v57[0] = 0;
  v56[1] = 0;
  v56[2] = v57;
  memset(v58, 0, sizeof(v58));
  v57[2] = v58;
  char v59 = 0;
  v61[0] = 0;
  int v60 = v61;
  v62[0] = 0;
  v62[1] = 0;
  v61[1] = 0;
  v61[2] = v62;
  v62[2] = v63;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = v64;
  v63[3] = 0x400000000;
  v64[4] = &v65;
  v64[5] = 0;
  uint64_t v65 = 0;
  uint64_t v1 = qword_1EBCE10D8;
  if (byte_1EBCE10E7 >= 0) {
    uint64_t v1 = byte_1EBCE10E7 & 0x7F;
  }
  long long v66 = xmmword_1CD91D2E0;
  if (v1)
  {
    std::operator+<char>();
    unint64_t v2 = std::string::append(&v42, ": ");
    std::string::size_type v3 = v2->__r_.__value_.__r.__words[0];
    v53[0] = v2->__r_.__value_.__l.__size_;
    *(void *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v2->__r_.__value_.__r.__words[1] + 7);
    char v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v29 = v3;
    *(void *)size_t v30 = v53[0];
    *(void *)&v30[7] = *(void *)((char *)v53 + 7);
    char v31 = v4;
    v53[0] = 0;
    *(void *)((char *)v53 + 7) = 0;
    uint64_t v32 = &unk_1F26295E8;
    int v33 = 1;
    int64_t v34 = &v32;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    LOWORD(v44) = 260;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_1EBCE10D0;
    sub_1CD096690((unsigned __int8 *)&v42, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v36);
    sub_1CD66FAB4((uint64_t)&v36, v5, (uint64_t)&v51);
    unint64_t v6 = 0;
    if (v52)
    {
      unint64_t v6 = v51;
      uint64_t v51 = 0;
    }
    unint64_t v28 = v6;
    sub_1CC950C10((uint64_t)&v29, (uint64_t *)&v28);
    if (v28) {
      (*(void (**)(llvm *))(*(void *)v28 + 8))(v28);
    }
    int v7 = v51;
    uint64_t v51 = 0;
    if ((v37[8] & 1) == 0)
    {
      std::string::size_type v8 = v36;
      std::string::size_type v36 = 0;
      if (v8) {
        (*(void (**)(std::string::size_type))(*(void *)v8 + 8))(v8);
      }
    }
    llvm::yaml::Input::Input((uint64_t)&v42, *((void *)v7 + 1), *((void *)v7 + 2) - *((void *)v7 + 1), 0);
  }
  if (dword_1EBCE12A0 == 2) {
    uint64_t v9 = (llvm::IntegerType **)&v54;
  }
  else {
    uint64_t v9 = 0;
  }
  if (dword_1EBCE12A0 == 1) {
    uint64_t v10 = (llvm::IntegerType **)&v54;
  }
  else {
    uint64_t v10 = 0;
  }
  sub_1CC94AAC8((llvm::IntegerType ***)&v42, a1, v9, v10, 0);
  uint64_t v11 = sub_1CC94ABE8((llvm::Constant **)&v42);
  uint64_t v12 = __p;
  if (__p)
  {
    unint64_t v13 = __p;
    if (v50 != __p)
    {
      uint64_t v14 = (uint64_t)v50 - 56;
      do
      {
        sub_1CB833A08(v14, *(void **)(v14 + 8));
        BOOL v15 = v14 == (void)v12;
        v14 -= 56;
      }
      while (!v15);
      unint64_t v13 = __p;
    }
    uint64_t v50 = v12;
    operator delete(v13);
  }
  uint64_t v16 = v47;
  if (v48)
  {
    uint64_t v17 = 40 * v48;
    uint64_t v18 = (void *)(v47 + 16);
    do
    {
      if ((*(v18 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v19 = (void *)*(v18 - 1);
        if (v19)
        {
          void *v18 = v19;
          operator delete(v19);
        }
      }
      v18 += 5;
      v17 -= 40;
    }
    while (v17);
    uint64_t v16 = v47;
  }
  MEMORY[0x1D25D9CD0](v16, 8);
  uint64_t v20 = qword_1EBCE11C0;
  if (byte_1EBCE11CF >= 0) {
    uint64_t v20 = byte_1EBCE11CF & 0x7F;
  }
  if (v20)
  {
    std::operator+<char>();
    uint64_t v21 = std::string::append(&v42, ": ");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
    v35[0] = v21->__r_.__value_.__l.__size_;
    *(void *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v36 = v22;
    *(void *)uint64_t v37 = v35[0];
    *(void *)&v37[7] = *(void *)((char *)v35 + 7);
    char v38 = v23;
    uint64_t v39 = &unk_1F26295E8;
    int v40 = 1;
    int v41 = &v39;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    LODWORD(v51) = 0;
    uint64_t v52 = std::system_category();
    if (byte_1EBCE11CF >= 0) {
      uint64_t v24 = byte_1EBCE11CF & 0x7F;
    }
    else {
      uint64_t v24 = qword_1EBCE11C0;
    }
    if (byte_1EBCE11CF >= 0) {
      BOOL v25 = &qword_1EBCE11B8;
    }
    else {
      BOOL v25 = (uint64_t *)qword_1EBCE11B8;
    }
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v29, v25, v24, (uint64_t)&v51, 3);
    *(void *)&v68.__val_ = v52;
    llvm::errorCodeToError(v51, v68, &v27);
    v42.__r_.__value_.__r.__words[0] = v27;
    sub_1CC950C10((uint64_t)&v36, (uint64_t *)&v42);
    if (v42.__r_.__value_.__r.__words[0]) {
      (*(void (**)(std::string::size_type))(*(void *)v42.__r_.__value_.__l.__data_ + 8))(v42.__r_.__value_.__r.__words[0]);
    }
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646940;
    v42.__r_.__value_.__l.__size_ = 0;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29;
    int v43 = 70;
    uint64_t v44 = v46;
    uint64_t v45 = 0x800000000;
    memset(&v46[32], 0, 32);
    long long v47 = 0u;
    sub_1CD66FB2C((llvm::yaml::Output *)&v42, (uint64_t)&v54);
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646940;
    if (v44 != v46) {
      free(v44);
    }
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v29);
    sub_1CD6737AC((uint64_t)&v36);
  }
  sub_1CD4AFAF4((uint64_t)&v54);
  return v11;
}

llvm::IntegerType ***sub_1CC94AAC8(llvm::IntegerType ***a1, llvm::IntegerType **a2, llvm::IntegerType **a3, llvm::IntegerType **a4, char a5)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  if (byte_1EBCE1010) {
    a5 = 1;
  }
  *((unsigned char *)a1 + 24) = a5;
  uint64_t v8 = *(void *)*a2;
  a1[5] = (llvm::IntegerType **)(v8 + 1888);
  a1[6] = (llvm::IntegerType **)(v8 + 1912);
  a1[7] = (llvm::IntegerType **)llvm::PointerType::get((llvm::PointerType *)(v8 + 1912), 0);
  a1[8] = (llvm::IntegerType **)llvm::ArrayType::get((llvm::ArrayType *)(*(void *)**a1 + 1912), 0);
  uint64_t v9 = (llvm::PointerType *)(*(void *)**a1 + 1960);
  a1[9] = (llvm::IntegerType **)v9;
  a1[10] = (llvm::IntegerType **)llvm::PointerType::get(v9, 0);
  uint64_t v10 = *a1;
  uint64_t v11 = **a1;
  a1[11] = (llvm::IntegerType **)(*(void *)v11 + 1984);
  a1[12] = (llvm::IntegerType **)llvm::IntegerType::get(v11, (llvm::LLVMContext *)*((unsigned int *)v10[63] + 1));
  a1[13] = (llvm::IntegerType **)1;
  a1[14] = 0;
  a1[15] = 0;
  *((_DWORD *)a1 + 32) = 0;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  __int16 v15 = 260;
  uint64_t v14 = (void **)(a2 + 27);
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v14);
  int v12 = v19;
  *((_DWORD *)a1 + 7) = v18;
  *((_DWORD *)a1 + 8) = v12;
  *((_DWORD *)a1 + 9) = v20;
  if (v17 < 0) {
    operator delete(__p);
  }
  return a1;
}

uint64_t sub_1CC94ABE8(llvm::Constant **a1)
{
  uint64_t v1119 = *MEMORY[0x1E4F143B8];
  __s1 = *a1;
  uint64_t v1 = (uint64_t *)*((void *)*a1 + 14);
  unint64_t v2 = *((unsigned int *)v1 + 8);
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  if (v2 <= 0xD) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = 14;
  }
  std::error_code v5 = (llvm::DataLayout *)*((unsigned int *)v1 + 2);
  v1043 = v5;
  if (!v5)
  {
    uint64_t v15 = (uint64_t)a1;
LABEL_20:
    BOOL v1012 = 0;
    uint64_t v1009 = 0;
    goto LABEL_22;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aLlvmTypeTest[v6++];
  while (v4 != v6);
  int v8 = v5 - 1;
  uint64_t v9 = *v1;
  uint64_t v10 = *v1 + 8 * (void)v5 + 8;
  int v11 = 1;
  int v12 = v7;
  while (1)
  {
    uint64_t v13 = v12 & v8;
    uint64_t v14 = *(void **)(v9 + 8 * v13);
    if (v14 != (void *)-8)
    {
      if (!v14) {
        goto LABEL_21;
      }
      if (*(_DWORD *)(v10 + 4 * v13) == v7
        && v4 == *v14
        && !memcmp("llvm.type.test", (char *)v14 + *((unsigned int *)v1 + 5), v4))
      {
        break;
      }
    }
    int v12 = v11 + v13;
    ++v11;
  }
  if (v13 == -1)
  {
LABEL_21:
    BOOL v1012 = 0;
    uint64_t v1009 = 0;
    std::error_code v5 = v1043;
    uint64_t v15 = (uint64_t)a1;
    goto LABEL_22;
  }
  std::error_code v5 = v1043;
  uint64_t v15 = (uint64_t)a1;
  if ((llvm::DataLayout *)(int)v13 == v1043) {
    goto LABEL_20;
  }
  uint64_t v16 = *(void *)(*(void *)(v9 + 8 * (int)v13) + 8);
  if (!v16) {
    goto LABEL_20;
  }
  int v167 = *(unsigned __int8 *)(v16 + 16);
  BOOL v1012 = *(unsigned char *)(v16 + 16) == 0;
  if (*(unsigned char *)(v16 + 16)) {
    uint64_t v16 = 0;
  }
  uint64_t v1009 = v16;
  if (!*((unsigned char *)a1 + 24) || v167)
  {
LABEL_22:
    uint64_t v17 = *(void *)(v15 + 8);
    if (v17 && *(unsigned char *)(v17 + 135)) {
      return 0;
    }
    size_t v18 = *(void *)(v15 + 16);
    if (v18)
    {
      if (*(unsigned char *)(v18 + 135)) {
        return 0;
      }
    }
    if (v2 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v2;
    }
    if (v2 <= 0x17) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = 24;
    }
    if (v5)
    {
      size_t __sz = *(void *)(v15 + 16);
      uint64_t v22 = 0;
      LODWORD(v2) = 0;
      do
        unint64_t v2 = 33 * v2 + aLlvmIcallBranc[v22++];
      while (v21 != v22);
      int v23 = v5 - 1;
      uint64_t v24 = *v1;
      uint64_t v25 = *v1 + 8 * (void)v5 + 8;
      int v26 = 1;
      int v27 = v2;
      while (1)
      {
        uint64_t v28 = v27 & v23;
        std::string::size_type v29 = *(void **)(v24 + 8 * v28);
        if (v29 != (void *)-8)
        {
          if (!v29) {
            goto LABEL_47;
          }
          if (*(_DWORD *)(v25 + 4 * v28) == v2
            && v21 == *v29
            && !memcmp("llvm.icall.branch.funnel", (char *)v29 + *((unsigned int *)v1 + 5), v21))
          {
            break;
          }
        }
        int v27 = v26 + v28;
        ++v26;
      }
      if (v28 == -1)
      {
LABEL_47:
        uint64_t v32 = 0;
        uint64_t v15 = (uint64_t)a1;
        BOOL v30 = v1012;
      }
      else
      {
        uint64_t v15 = (uint64_t)a1;
        BOOL v30 = v1012;
        if ((llvm::DataLayout *)(int)v28 != v1043 && (uint64_t v31 = *(void *)(*(void *)(v24 + 8 * (int)v28) + 8)) != 0)
        {
          if (*(unsigned char *)(v31 + 16)) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = *(void **)(*(void *)(v24 + 8 * (int)v28) + 8);
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
      }
      size_t v18 = __sz;
      if (v30)
      {
LABEL_49:
        if (*(void *)(v1009 + 8)) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      uint64_t v32 = 0;
      BOOL v30 = v1012;
      if (v1012) {
        goto LABEL_49;
      }
    }
    if (v32)
    {
      if (!(v17 | v32[1])) {
        goto LABEL_52;
      }
    }
    else if (!v17)
    {
LABEL_52:
      if (!v18) {
        return 0;
      }
      goto LABEL_56;
    }
LABEL_55:
    if (v18)
    {
LABEL_56:
      if (v30)
      {
        uint64_t v33 = *(void *)(v1009 + 8);
        if (v33)
        {
          while (1)
          {
            int64_t v34 = *(const llvm::APInt **)(v33 + 24);
            uint64_t v35 = ((void *)v34 - 4 * (*((_DWORD *)v34 + 5) & 0x7FFFFFF))[4];
            BOOL v36 = v35 && *(unsigned char *)(v35 + 16) == 23;
            if (!v36) {
              break;
            }
            uint64_t v33 = *(void *)(v33 + 8);
            uint64_t v37 = *(void *)(v35 + 24);
            if (!*(unsigned char *)v37)
            {
              char v38 = *(void ***)(v37 + 8);
              uint64_t v39 = *v38;
              v1110[0] = v38 + 3;
              v1110[1] = v39;
              int v40 = sub_1CD673844(*(void *)(v15 + 16), (int *)v38 + 6, (size_t)v39);
              if (v40)
              {
                uint64_t v44 = v40;
                unsigned int v45 = *(_DWORD *)v40;
                LODWORD(__dst) = v45;
                v1106 = (void *)v15;
                uint64_t v1107 = (uint64_t)v1110;
                if (v45)
                {
                  *((void *)&__dst + 1) = sub_1CC954CE0(v15, (uint64_t)v1110[0], (uint64_t)v1110[1], (uint64_t)"global_addr", 11);
                  if (v45 <= 4 && ((1 << v45) & 0x16) != 0)
                  {
                    *(void *)&long long v1114 = sub_1CC954E18(v15, (uint64_t)&v1106, (uint64_t)"align", 5, (llvm::Type *)v44[1], 8, *(llvm::Constant **)(v15 + 48));
                    *((void *)&v1114 + 1) = sub_1CC954E18(v15, (uint64_t)&v1106, (uint64_t)"size_m1", 7, (llvm::Type *)v44[2], *((_DWORD *)v44 + 1), *(llvm::Constant **)(v15 + 96));
                    if (v45 == 2)
                    {
                      unsigned int v47 = *((_DWORD *)v44 + 1);
                      int v48 = 1 << v47;
                      BOOL v157 = v47 >= 6;
                      uint64_t v49 = 11;
                      if (!v157) {
                        uint64_t v49 = 9;
                      }
                      *(void *)&long long v1116 = sub_1CC954E18((uint64_t)a1, (uint64_t)&v1106, (uint64_t)"inline_bits", 11, (llvm::Type *)v44[4], v48, a1[v49]);
                    }
                    else if (v45 == 1)
                    {
                      *(void *)&long long v1115 = sub_1CC954CE0((uint64_t)a1, (uint64_t)v1110[0], (uint64_t)v1110[1], (uint64_t)"byte_array", 10);
                      *((void *)&v1115 + 1) = sub_1CC954E18((uint64_t)a1, (uint64_t)&v1106, (uint64_t)"bit_mask", 8, (llvm::Type *)*((unsigned __int8 *)v44 + 24), 8, a1[7]);
                    }
                  }
                }
              }
              else
              {
                *(void *)&long long v1116 = 0;
                long long v1115 = 0u;
                long long v1114 = 0u;
                long long __dst = 0u;
              }
              uint64_t v15 = (uint64_t)a1;
              uint64_t v50 = (llvm::Value *)sub_1CC9539DC((uint64_t ***)a1, v37, v34, (uint64_t)&__dst, v41, v42, v43);
              if (v50)
              {
                llvm::Value::doRAUW(v34, v50, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
            }
            if (!v33) {
              goto LABEL_81;
            }
          }
LABEL_1403:
          v992 = "Second argument of llvm.type.test must be metadata";
          goto LABEL_1402;
        }
      }
LABEL_81:
      if (!v32 || !v32[1])
      {
        uint64_t v51 = v1111;
        v1110[0] = v1111;
        v1110[1] = (void *)0x800000000;
        uint64_t v52 = v1108;
        v1106 = v1108;
        uint64_t v1107 = 0x800000000;
        uint64_t v53 = *(uint64_t ***)v15;
        uint64_t v54 = *(void *)v15 + 24;
        uint64_t v55 = *(void *)(*(void *)v15 + 32);
        if (v55 == v54) {
          goto LABEL_137;
        }
        while (1)
        {
          if (v55) {
            uint64_t v56 = (uint64_t ***)(v55 - 56);
          }
          else {
            uint64_t v56 = 0;
          }
          if ((v56[4] & 0xFu) - 7 < 2) {
            goto LABEL_88;
          }
          int64_t v57 = a1[2];
          if ((*((unsigned char *)v56 + 23) & 0x10) == 0)
          {
            size_t v67 = 0;
            BYTE7(v1114) = 0;
            p_dst = &__dst;
            goto LABEL_106;
          }
          uint64_t v58 = ***v56;
          uint64_t v59 = *(void *)(v58 + 152);
          uint64_t v60 = *(unsigned int *)(v58 + 168);
          if (!v60) {
            goto LABEL_97;
          }
          LODWORD(v61) = (v60 - 1) & ((v56 >> 4) ^ (v56 >> 9));
          uint64_t v62 = (uint64_t ****)(v59 + 16 * v61);
          uint64_t v63 = *v62;
          if (*v62 != v56) {
            break;
          }
LABEL_98:
          long long v66 = (unint64_t *)v62[1];
          unint64_t v69 = *v66;
          std::error_code v68 = v66 + 2;
          size_t v67 = v69;
          if (v69 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_1388;
          }
          if (v67 >= 0x17)
          {
            uint64_t v71 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v67 | 7) != 0x17) {
              uint64_t v71 = v67 | 7;
            }
            long long v72 = v52;
            int v73 = v51;
            uint64_t v74 = v71 + 1;
            p_dst = (long long *)operator new(v71 + 1);
            unint64_t v75 = v74 | 0x8000000000000000;
            uint64_t v51 = v73;
            uint64_t v52 = v72;
            *(void *)&long long v1114 = v75;
            *(void *)&long long __dst = p_dst;
            *((void *)&__dst + 1) = v67;
LABEL_105:
            memmove(p_dst, v68, v67);
            goto LABEL_106;
          }
          BYTE7(v1114) = v67;
          p_dst = &__dst;
          if (v67) {
            goto LABEL_105;
          }
LABEL_106:
          *((unsigned char *)p_dst + v67) = 0;
          uint64_t v76 = sub_1CD4F49C0(*((uint64_t **)v57 + 19), &__dst);
          if (SBYTE7(v1114) < 0) {
            operator delete((void *)__dst);
          }
          if (!v76)
          {
            uint64_t v79 = a1[2];
            if ((*((unsigned char *)v56 + 23) & 0x10) != 0)
            {
              uint64_t v80 = ***v56;
              uint64_t v81 = *(void *)(v80 + 152);
              uint64_t v82 = *(unsigned int *)(v80 + 168);
              if (!v82) {
                goto LABEL_120;
              }
              LODWORD(v83) = (v82 - 1) & ((v56 >> 4) ^ (v56 >> 9));
              int64_t v84 = (uint64_t ****)(v81 + 16 * v83);
              uint64_t v85 = *v84;
              if (*v84 != v56)
              {
                int v86 = 1;
                while (v85 != (uint64_t ***)-4096)
                {
                  int v87 = v83 + v86++;
                  uint64_t v83 = v87 & (v82 - 1);
                  uint64_t v85 = *(uint64_t ****)(v81 + 16 * v83);
                  if (v85 == v56)
                  {
                    int64_t v84 = (uint64_t ****)(v81 + 16 * v83);
                    goto LABEL_121;
                  }
                }
LABEL_120:
                int64_t v84 = (uint64_t ****)(v81 + 16 * v82);
              }
LABEL_121:
              uint64_t v88 = (unint64_t *)v84[1];
              unint64_t v91 = *v88;
              uint64_t v90 = v88 + 2;
              size_t v89 = v91;
              if (v91 > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_1388;
              }
              if (v89 >= 0x17)
              {
                uint64_t v93 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v89 | 7) != 0x17) {
                  uint64_t v93 = v89 | 7;
                }
                uint64_t v94 = v52;
                unint64_t v95 = v51;
                uint64_t v96 = v93 + 1;
                uint64_t v92 = (long long *)operator new(v93 + 1);
                unint64_t v97 = v96 | 0x8000000000000000;
                uint64_t v51 = v95;
                uint64_t v52 = v94;
                *(void *)&long long v1114 = v97;
                *(void *)&long long __dst = v92;
                *((void *)&__dst + 1) = v89;
              }
              else
              {
                BYTE7(v1114) = v89;
                uint64_t v92 = &__dst;
                if (!v89) {
                  goto LABEL_129;
                }
              }
              memmove(v92, v90, v89);
            }
            else
            {
              size_t v89 = 0;
              BYTE7(v1114) = 0;
              uint64_t v92 = &__dst;
            }
LABEL_129:
            *((unsigned char *)v92 + v89) = 0;
            uint64_t v98 = sub_1CD4F49C0(*((uint64_t **)v79 + 22), &__dst);
            if (SBYTE7(v1114) < 0) {
              operator delete((void *)__dst);
            }
            if (!v98) {
              goto LABEL_88;
            }
            uint64_t v77 = v1107;
            if (v1107 >= (unint64_t)HIDWORD(v1107)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v78 = &v1106;
            goto LABEL_111;
          }
          uint64_t v77 = LODWORD(v1110[1]);
          if (LODWORD(v1110[1]) >= (unint64_t)HIDWORD(v1110[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v78 = v1110;
LABEL_111:
          *((void *)*v78 + v77) = v56;
          ++*((_DWORD *)v78 + 2);
LABEL_88:
          uint64_t v55 = *(void *)(v55 + 8);
          if (v55 == v54)
          {
            uint64_t v15 = (uint64_t)a1;
            uint64_t v53 = (uint64_t **)*a1;
LABEL_137:
            v1099 = 0;
            std::string __p = 0;
            v1100 = 0;
            sub_1CC9529D8((uint64_t)&__dst, (uint64_t)v53);
            if (LODWORD(v1110[1]))
            {
              uint64_t v99 = (uint64_t ****)v1110[0];
              uint64_t v100 = 8 * LODWORD(v1110[1]);
              do
              {
                BOOL v101 = *v99++;
                sub_1CC952CA8((unint64_t *)v15, v101, 1, (llvm::Value ***)&__p);
                v100 -= 8;
              }
              while (v100);
            }
            if (v1107)
            {
              uint64_t v102 = (uint64_t ****)v1106;
              uint64_t v103 = 8 * v1107;
              do
              {
                uint64_t v104 = *v102++;
                sub_1CC952CA8((unint64_t *)v15, v104, 0, (llvm::Value ***)&__p);
                v103 -= 8;
              }
              while (v103);
            }
            sub_1CC9534F0((void **)&__dst);
            if (__p != v1099) {
              llvm::GlobalAlias::eraseFromParent(*(llvm::GlobalAlias **)__p);
            }
            if (__p) {
              operator delete(__p);
            }
            if (v1106 != v52) {
              free(v1106);
            }
            if (v1110[0] != v51) {
              free(v1110[0]);
            }
            return 1;
          }
        }
        int v64 = 1;
        while (v63 != (uint64_t ***)-4096)
        {
          int v65 = v61 + v64++;
          uint64_t v61 = v65 & (v60 - 1);
          uint64_t v63 = *(uint64_t ****)(v59 + 16 * v61);
          if (v63 == v56)
          {
            uint64_t v62 = (uint64_t ****)(v59 + 16 * v61);
            goto LABEL_98;
          }
        }
LABEL_97:
        uint64_t v62 = (uint64_t ****)(v59 + 16 * v60);
        goto LABEL_98;
      }
      v992 = "unexpected call to llvm.icall.branch.funnel during import phase";
LABEL_1402:
      llvm::report_fatal_error((llvm *)v992, (const llvm::Twine *)1);
    }
    v1061 = 0;
    uint64_t v1062 = 0;
    v1060 = (uint64_t *)&v1061;
    v1099 = 0;
    std::string __p = 0;
    v1004 = v32;
    v1100 = v1102;
    uint64_t v1101 = 0x400000000;
    v1103 = v1105;
    uint64_t v1104 = 0;
    v1105[0] = 0;
    v1105[1] = 1;
    v1057 = 0;
    uint64_t v1058 = 0;
    unsigned int v1059 = 0;
    v1095 = v1097;
    uint64_t v1096 = 0x200000000;
    *(void *)&long long __dst = &v1114;
    *((void *)&__dst + 1) = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(__s1, (uint64_t)&__dst);
    if (DWORD2(__dst))
    {
      uint64_t v106 = (uint64_t *)(__dst + 16);
      uint64_t v107 = 24 * DWORD2(__dst);
      while (1)
      {
        uint64_t v108 = *(void **)(*(v106 - 1) + 8);
        if (*v108 == 13)
        {
          uint64_t v109 = v108[3];
          uint64_t v110 = *(void *)((char *)v108 + 29);
          if (v109 == 0x53442D73736F7243 && v110 == 0x494643204F53442DLL) {
            break;
          }
        }
        v106 += 3;
        v107 -= 24;
        if (!v107) {
          goto LABEL_163;
        }
      }
      uint64_t v1006 = *v106;
    }
    else
    {
LABEL_163:
      uint64_t v1006 = 0;
    }
    if ((long long *)__dst != &v1114) {
      free((void *)__dst);
    }
    uint64_t v1054 = 0;
    uint64_t v1055 = 0;
    unsigned int v1056 = 0;
    int64_t v112 = *(void **)(v15 + 8);
    if (v112)
    {
      v1110[1] = 0;
      v1110[0] = 0;
      LODWORD(v1111[0]) = 0;
      unint64_t v115 = (void *)*v112;
      uint64_t v113 = v112 + 1;
      BOOL v114 = v115;
      if (v115 != v113)
      {
        do
        {
          int v116 = (uint64_t *)v114[7];
          uint64_t v117 = (uint64_t *)v114[8];
          while (v116 != v117)
          {
            uint64_t v118 = *v116;
            if ((*(_WORD *)(*v116 + 12) & 0x80) != 0)
            {
              uint64_t v119 = *(uint64_t **)(v118 + 40);
              uint64_t v120 = *(void *)(v118 + 48) - (void)v119;
              if (v120)
              {
                unint64_t v2 = 8 * (v120 >> 3);
                do
                {
                  uint64_t v121 = *v119++;
                  v1106 = *(void **)(v121 & 0xFFFFFFFFFFFFFFF8);
                  sub_1CD4ADCD0((uint64_t)v1110, (uint64_t *)&v1106, (uint64_t)&__dst);
                  v2 -= 8;
                }
                while (v2);
              }
            }
            ++v116;
          }
          uint64_t v122 = (void *)v114[1];
          if (v122)
          {
            do
            {
              uint64_t v123 = v122;
              uint64_t v122 = (void *)*v122;
            }
            while (v122);
          }
          else
          {
            do
            {
              uint64_t v123 = (void *)v114[2];
              BOOL v36 = *v123 == (void)v114;
              BOOL v114 = v123;
            }
            while (!v36);
          }
          BOOL v114 = v123;
        }
        while (v123 != v113);
      }
      unsigned int v124 = *(llvm::Module **)v15;
      *(void *)&long long __dst = "cfi.functions";
      LOWORD(v1115) = 259;
      uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v124, (const char **)&__dst);
      if (NamedMetadata)
      {
        uint64_t v126 = NamedMetadata;
        uint64_t v127 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
        if (!v127)
        {
          unsigned int v182 = 0;
          uint64_t v181 = 0;
          goto LABEL_275;
        }
        uint64_t v128 = 0;
        unint64_t v2 = (unint64_t)&v1114;
        while (1)
        {
          uint64_t v129 = *(void *)(**(void **)(v126 + 48) + 8 * v128);
          uint64_t v130 = (void *)(v129 - 8 * *(unsigned int *)(v129 + 8));
          uint64_t v131 = *(void **)(*v130 + 8);
          uint64_t v133 = (unsigned __int8 *)(v131 + 3);
          size_t v132 = *v131;
          AggregateElement = *(void **)(v130[1] + 128);
          if (AggregateElement) {
            BOOL v135 = *((unsigned char *)AggregateElement + 16) == 16;
          }
          else {
            BOOL v135 = 0;
          }
          if (!v135) {
            AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)AggregateElement, 0);
          }
          uint64_t v138 = (int *)AggregateElement[3];
          char v136 = (int *)(AggregateElement + 3);
          uint64_t v137 = v138;
          if (v136[2] < 0x41) {
            uint64_t v137 = v136;
          }
          int v139 = *v137;
          if (v132)
          {
            int v140 = *v133;
            if (v140 == 1) {
              size_t v141 = v132 - 1;
            }
            else {
              size_t v141 = v132;
            }
            if (v140 == 1) {
              int v142 = (int *)((char *)v131 + 25);
            }
            else {
              int v142 = (int *)(v131 + 3);
            }
          }
          else
          {
            size_t v141 = 0;
            int v142 = (int *)(v131 + 3);
          }
          long long __dst = xmmword_1CFAC4320;
          *(void *)&long long v1114 = 0;
          llvm::MD5::update((int *)&__dst, v142, v141);
          llvm::MD5::final((int *)&__dst, (int *)&v1106);
          BOOL v143 = v1106;
          char v144 = a1[1];
          if (!llvm::ModuleSummaryIndex::isGUIDLive(v144, (unint64_t)v1106)) {
            goto LABEL_235;
          }
          if (!LODWORD(v1111[0])) {
            goto LABEL_210;
          }
          unsigned int v145 = (LODWORD(v1111[0]) - 1) & (37 * v143);
          char v146 = (void *)*((void *)v1110[0] + v145);
          if (v143 != v146) {
            break;
          }
LABEL_202:
          *(void *)&long long __dst = v133;
          *((void *)&__dst + 1) = v132;
          LODWORD(v1114) = v139;
          *((void *)&v1114 + 1) = v129;
          v1106 = 0;
          char v147 = sub_1CC95670C(v1054, v1056, (uint64_t)&__dst, &v1106);
          uint64_t v148 = v1106;
          if (v147)
          {
            if (*((_DWORD *)v1106 + 4))
            {
              *((_DWORD *)v1106 + 4) = v139;
              v148[3] = v129;
            }
          }
          else
          {
            unint64_t v149 = sub_1CC95681C((uint64_t)&v1054, (uint64_t)&__dst, v1106);
            *unint64_t v149 = __dst;
            v149[1] = v1114;
          }
LABEL_235:
          if (++v128 == v127)
          {
            uint64_t v181 = v1054;
            unsigned int v182 = v1056;
            if (v1055)
            {
              uint64_t v183 = (unint64_t *)(v1054 + 32 * v1056);
              uint64_t v15 = (uint64_t)a1;
              if (v1056)
              {
                uint64_t v184 = 0;
                while (*(void *)(v1054 + v184) >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v184 += 32;
                  if (32 * v1056 == v184)
                  {
                    uint64_t v185 = v1054 + 32 * v1056;
                    goto LABEL_276;
                  }
                }
                uint64_t v185 = v1054 + v184;
              }
              else
              {
                uint64_t v185 = v1054;
              }
LABEL_276:
              uint64_t v187 = v181 + 32 * v182;
              uint64_t v1007 = v187;
              while (2)
              {
                if (v185 == v187) {
                  goto LABEL_372;
                }
                size_t v188 = *(void *)(v185 + 8);
                uint64_t v189 = *(uint64_t ***)v15;
                int v190 = *(uint64_t **)(*(void *)v15 + 112);
                size_t v191 = *((unsigned int *)v190 + 8);
                size_t v192 = v188;
                if ((v191 & 0x80000000) == 0)
                {
                  if (v191 <= 1) {
                    unint64_t v193 = 1;
                  }
                  else {
                    unint64_t v193 = v191;
                  }
                  if (v188 < v193) {
                    unint64_t v193 = *(void *)(v185 + 8);
                  }
                  if (v188 > v191) {
                    size_t v192 = v193;
                  }
                  else {
                    size_t v192 = *(void *)(v185 + 8);
                  }
                }
                size_t __sza = v185;
                __s1a = *(unsigned __int8 **)v185;
                unint64_t v2 = *((unsigned int *)v190 + 2);
                size_t v1021 = *(void *)(v185 + 24);
                int v1017 = *(_DWORD *)(v185 + 16);
                uint64_t v1014 = *(void *)(v185 + 8);
                if (!v2)
                {
LABEL_313:
                  int v214 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**v189 + 1576), 0, 0, 0);
                  unint64_t v215 = *(void *)v15;
                  unint64_t v2 = *(unsigned int *)(*(void *)v15 + 284);
                  LOWORD(v1115) = 261;
                  *(void *)&long long __dst = __s1a;
                  *((void *)&__dst + 1) = v1014;
                  uint64_t v216 = (char *)operator new(0x80uLL);
                  unsigned int v204 = (int32x2_t ****)(v216 + 8);
                  *((_DWORD *)v216 + 7) = *((_DWORD *)v216 + 7) & 0x38000000 | 0x40000000;
                  *(void *)uint64_t v216 = 0;
                  llvm::Function::Function((unint64_t *)v216 + 1, v214, 0, (llvm::Type *)v2, (const char **)&__dst, v215);
                  int v205 = *((_DWORD *)v216 + 10);
                  goto LABEL_314;
                }
                v1015 = *(uint64_t ***)v15;
                int v194 = 0;
                if (v192)
                {
                  size_t v195 = v192;
                  uint64_t v196 = *(unsigned __int8 **)v185;
                  do
                  {
                    int v197 = *v196++;
                    int v194 = 33 * v194 + v197;
                    --v195;
                  }
                  while (v195);
                }
                uint64_t v198 = *v190;
                uint64_t v199 = *v190 + 8 * v2 + 8;
                int v200 = 1;
                int v201 = v194;
                while (1)
                {
                  uint64_t v202 = v201 & (v2 - 1);
                  BOOL v203 = *(void **)(v198 + 8 * v202);
                  if (v203 != (void *)-8)
                  {
                    if (!v203) {
                      goto LABEL_311;
                    }
                    if (*(_DWORD *)(v199 + 4 * v202) == v194
                      && v192 == *v203
                      && (!v192 || !memcmp(__s1a, (char *)v203 + *((unsigned int *)v190 + 5), v192)))
                    {
                      break;
                    }
                  }
                  int v201 = v200 + v202;
                  ++v200;
                }
                if (v202 == -1)
                {
LABEL_311:
                  uint64_t v15 = (uint64_t)a1;
                }
                else
                {
                  uint64_t v15 = (uint64_t)a1;
                  if ((int)v202 != v2)
                  {
                    unsigned int v204 = *(int32x2_t *****)(*(void *)(v198 + 8 * (int)v202) + 8);
                    uint64_t v189 = v1015;
                    if (!v204 || *((unsigned char *)v204 + 16)) {
                      goto LABEL_313;
                    }
                    int v205 = *((_DWORD *)v204 + 8);
                    if ((v205 & 0xFu) - 7 <= 1)
                    {
                      if ((*((unsigned char *)v204 + 23) & 0x10) != 0)
                      {
                        int v206 = ***v204;
                        int32x2_t v207 = v206[19];
                        uint64_t v208 = v206[21].u32[0];
                        if (v208)
                        {
                          LODWORD(v209) = (v208 - 1) & ((v204 >> 4) ^ (v204 >> 9));
                          uint64_t v210 = (int32x2_t *****)(*(void *)&v207 + 16 * v209);
                          int v211 = *v210;
                          if (*v210 != v204)
                          {
                            int v212 = 1;
                            do
                            {
                              if (v211 == (int32x2_t ****)-4096) {
                                goto LABEL_347;
                              }
                              int v213 = v209 + v212++;
                              uint64_t v209 = v213 & (v208 - 1);
                              int v211 = *(int32x2_t *****)(*(void *)&v207 + 16 * v209);
                            }
                            while (v211 != v204);
                            uint64_t v210 = (int32x2_t *****)(*(void *)&v207 + 16 * v209);
                          }
                        }
                        else
                        {
LABEL_347:
                          uint64_t v210 = (int32x2_t *****)(*(void *)&v207 + 16 * v208);
                        }
                        unsigned int v225 = v210[1];
                        uint64_t v228 = *v225;
                        int v227 = (char *)(v225 + 2);
                        uint64_t v226 = v228;
                      }
                      else
                      {
                        uint64_t v226 = 0;
                        int v227 = &byte_1CFBCE98E;
                      }
                      LOWORD(v1115) = 773;
                      *(void *)&long long __dst = v227;
                      *((void *)&__dst + 1) = v226;
                      *(void *)&long long v1114 = ".1";
                      llvm::Value::setNameImpl((llvm::Value *)v204, (const char **)&__dst);
                      if (!*((unsigned char *)v204 + 16))
                      {
                        if ((*((unsigned char *)v204 + 23) & 0x10) == 0) {
                          goto LABEL_367;
                        }
                        uint64_t v229 = ***v204;
                        int32x2_t v230 = v229[19];
                        uint64_t v231 = v229[21].u32[0];
                        if (v231)
                        {
                          LODWORD(v232) = (v231 - 1) & ((v204 >> 4) ^ (v204 >> 9));
                          unsigned int v233 = (int32x2_t *****)(*(void *)&v230 + 16 * v232);
                          int v234 = *v233;
                          if (*v233 != v204)
                          {
                            int v235 = 1;
                            do
                            {
                              if (v234 == (int32x2_t ****)-4096) {
                                goto LABEL_359;
                              }
                              int v236 = v232 + v235++;
                              uint64_t v232 = v236 & (v231 - 1);
                              int v234 = *(int32x2_t *****)(*(void *)&v230 + 16 * v232);
                            }
                            while (v234 != v204);
                            unsigned int v233 = (int32x2_t *****)(*(void *)&v230 + 16 * v232);
                          }
                        }
                        else
                        {
LABEL_359:
                          unsigned int v233 = (int32x2_t *****)(*(void *)&v230 + 16 * v231);
                        }
                        uint64_t v237 = v233[1];
                        unint64_t v240 = (unint64_t)*v237;
                        uint64_t v238 = v237 + 2;
                        unint64_t v239 = v240;
                        if (v240 >= 5
                          && (*(_DWORD *)v238 == *(_DWORD *)"llvm." ? (BOOL v241 = v238[4] == aLlvm_1[4]) : (BOOL v241 = 0), v241))
                        {
                          *((_DWORD *)v204 + 8) |= 0x2000u;
                          int v242 = llvm::Function::lookupIntrinsicID(v238, v239);
                        }
                        else
                        {
LABEL_367:
                          int v242 = 0;
                          *((_DWORD *)v204 + 8) &= ~0x2000u;
                        }
                        *((_DWORD *)v204 + 9) = v242;
                        uint64_t v15 = (uint64_t)a1;
                      }
                      uint64_t v189 = *(uint64_t ***)v15;
                      goto LABEL_313;
                    }
LABEL_314:
                    if ((v205 & 0xF) == 1)
                    {
                      *((_DWORD *)v204 + 8) = v205 & 0xFFFFFFF0;
                      if ((v205 & 0x30) != 0
                        && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v204) & 1) == 0)
                      {
                        *((_DWORD *)v204 + 8) |= 0x4000u;
                      }
                      sub_1CD660DD8((llvm::GlobalValue *)v204);
                      uint64_t v223 = (uint64_t)v204[6];
                      if (v223) {
                        llvm::Comdat::removeUser(v223, (uint64_t)v204);
                      }
                      v204[6] = 0;
                      if ((*((unsigned char *)v204 + 23) & 0x20) != 0)
                      {
                        uint64_t v224 = ***v204 + 310;
                        *(void *)&long long __dst = v204;
                        sub_1CC6035CC(v224, &__dst);
                        *((_DWORD *)v204 + 5) &= ~0x20000000u;
                      }
                    }
                    if (!v1017)
                    {
                      if (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v204))
                      {
                        int v217 = *((_DWORD *)v204 + 8);
                        *((_DWORD *)v204 + 8) = v217 & 0xFFFFFFF0;
                        if ((v217 & 0x30) != 0
                          && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v204) & 1) == 0)
                        {
                          *((_DWORD *)v204 + 8) |= 0x4000u;
                        }
                      }
                    }
                    if (*((unsigned char *)v204 + 16))
                    {
                      if (*((unsigned char *)v204 + 16) == 3 && (*((_DWORD *)v204 + 5) & 0x7FFFFFF) == 0) {
                        goto LABEL_326;
                      }
                    }
                    else if (v204[9] == (int32x2_t ***)(v204 + 9) && (*((unsigned char *)v204 + 34) & 0x80) == 0)
                    {
LABEL_326:
                      if (v1017 == 2)
                      {
                        int v218 = *((_DWORD *)v204 + 8);
                        *((_DWORD *)v204 + 8) = v218 & 0xFFFFFFF0 | 9;
                        if ((v218 & 0x30) != 0
                          && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v204) & 1) == 0)
                        {
                          *((_DWORD *)v204 + 8) |= 0x4000u;
                        }
                      }
                      if ((*((unsigned char *)v204 + 23) & 0x20) != 0)
                      {
                        uint64_t v243 = (uint64_t)&(***v204)[310];
                        *(void *)&long long __dst = v204;
                        unsigned int v244 = sub_1CC608F78(v243, (uint64_t *)&__dst);
                        llvm::MDAttachments::erase((llvm::MDAttachments *)(v244 + 1), 19);
                        if (!*((_DWORD *)v244 + 4) && (*((unsigned char *)v204 + 23) & 0x20) != 0)
                        {
                          v245 = ***v204 + 310;
                          *(void *)&long long __dst = v204;
                          sub_1CC6035CC(v245, &__dst);
                          *((_DWORD *)v204 + 5) &= ~0x20000000u;
                        }
                      }
                      unint64_t v219 = *(unsigned int *)(v1021 + 8);
                      if (v219 >= 3)
                      {
                        for (unint64_t i = 2; i < v219; ++i)
                        {
                          llvm::Value::addMetadata((llvm::Value *)v204, 19, *(llvm::MDNode **)(v1021 - 8 * v219 + 8 * i));
                          unint64_t v219 = *(unsigned int *)(v1021 + 8);
                        }
                      }
                    }
                    uint64_t v221 = (unint64_t *)(__sza + 32);
                    while (v221 != v183)
                    {
                      unint64_t v222 = *v221;
                      v221 += 4;
                      if (v222 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        uint64_t v185 = (uint64_t)(v221 - 4);
                        goto LABEL_339;
                      }
                    }
                    uint64_t v185 = (uint64_t)v183;
LABEL_339:
                    uint64_t v187 = v1007;
                    continue;
                  }
                }
                break;
              }
              uint64_t v189 = v1015;
              goto LABEL_313;
            }
            uint64_t v15 = (uint64_t)a1;
LABEL_275:
            uint64_t v185 = v181 + 32 * v182;
            uint64_t v183 = (unint64_t *)v185;
            goto LABEL_276;
          }
        }
        int v150 = 1;
        while (v146 != (void *)-1)
        {
          unsigned int v151 = v145 + v150++;
          unsigned int v145 = v151 & (LODWORD(v1111[0]) - 1);
          char v146 = (void *)*((void *)v1110[0] + v145);
          if (v143 == v146) {
            goto LABEL_202;
          }
        }
LABEL_210:
        if (!v1006 || v139) {
          goto LABEL_235;
        }
        uint64_t v154 = (void *)*((void *)v144 + 1);
        unsigned int v153 = (void *)((char *)v144 + 8);
        uint64_t v152 = v154;
        if (!v154) {
          goto LABEL_223;
        }
        uint64_t v155 = v153;
        do
        {
          unint64_t v156 = v152[4];
          BOOL v157 = v156 >= (unint64_t)v143;
          if (v156 >= (unint64_t)v143) {
            uint64_t v158 = v152;
          }
          else {
            uint64_t v158 = v152 + 1;
          }
          if (v157) {
            uint64_t v155 = v152;
          }
          uint64_t v152 = (void *)*v158;
        }
        while (*v158);
        if (v155 == v153 || v155[4] > (unint64_t)v143) {
LABEL_223:
        }
          uint64_t v155 = v153;
        uint64_t v159 = v155 == v153 ? 0 : (uint64_t)(v155 + 4);
        unint64_t v160 = v159 & 0xFFFFFFFFFFFFFFF8;
        if ((v159 & 0xFFFFFFFFFFFFFFF8) == 0) {
          goto LABEL_235;
        }
        uint64_t v161 = *(void *)(v160 + 24);
        uint64_t v162 = *(void *)(v160 + 32);
        uint64_t v163 = v162 - v161;
        if (v162 == v161) {
          goto LABEL_235;
        }
        char v164 = 0;
        uint64_t v165 = 8 * (v163 >> 3);
        do
        {
          __int16 v166 = *(_WORD *)(*(void *)v161 + 12);
          if ((v166 & 0x80) != 0 && (v166 & 0xFu) - 7 >= 2) {
            char v164 = 1;
          }
          v161 += 8;
          v165 -= 8;
        }
        while (v165);
        if ((v164 & 1) == 0) {
          goto LABEL_235;
        }
        goto LABEL_202;
      }
LABEL_372:
      MEMORY[0x1D25D9CD0](v1110[0], 8);
    }
    uint64_t v246 = v15;
    int v247 = 0;
    v1052[0] = 0;
    v1052[1] = 0;
    int v1053 = 0;
    uint64_t v248 = *(void *)v246;
    uint64_t v249 = *(void *)v246 + 24;
    uint64_t v250 = *(void *)(*(void *)v246 + 32);
    size_t v251 = v248 + 8;
    uint64_t v252 = *(void *)(v248 + 16);
    *(void *)&long long __dst = v250;
    *((void *)&__dst + 1) = v252;
    size_t __szb = v251;
    uint64_t __s1b = v249;
    *(void *)&long long v1114 = v249;
    *((void *)&v1114 + 1) = v251;
    while (v250 != __s1b || v252 != __szb || (void)v1114 != __s1b || *((void *)&v1114 + 1) != __szb)
    {
      uint64_t v254 = 0;
      do
      {
        uint64_t v255 = (*(uint64_t (**)(long long *))((char *)&off_1F2629620 + v254))(&__dst);
        if (v255) {
          BOOL v256 = 1;
        }
        else {
          BOOL v256 = v254 == 16;
        }
        v254 += 16;
      }
      while (!v256);
      BOOL v257 = (llvm::lowertypetests *)v255;
      if (*(unsigned char *)(v255 + 16) == 3
        && ((*(_DWORD *)(v255 + 32) & 0xF) == 1 || (*(_DWORD *)(v255 + 20) & 0x7FFFFFF) == 0))
      {
        goto LABEL_478;
      }
      LODWORD(v1096) = 0;
      llvm::Value::getMetadata((unsigned int *)v255, 19, (uint64_t)&v1095);
      unint64_t v2 = 0;
      LOBYTE(isJumpTableCanonical) = 0;
      if (!*((unsigned char *)v257 + 16))
      {
        int isJumpTableCanonical = llvm::lowertypetests::isJumpTableCanonical(v257, v258);
        if ((*((unsigned char *)v257 + 23) & 0x10) != 0)
        {
          uint64_t v302 = ***(void ***)v257;
          uint64_t v303 = *(void *)(v302 + 152);
          uint64_t v304 = *(unsigned int *)(v302 + 168);
          if (v304)
          {
            LODWORD(v305) = (v304 - 1) & ((v257 >> 4) ^ (v257 >> 9));
            int v306 = (llvm::lowertypetests **)(v303 + 16 * v305);
            BOOL v307 = *v306;
            if (*v306 != v257)
            {
              int v308 = 1;
              do
              {
                if (v307 == (llvm::lowertypetests *)-4096) {
                  goto LABEL_463;
                }
                int v309 = v305 + v308++;
                uint64_t v305 = v309 & (v304 - 1);
                BOOL v307 = *(llvm::lowertypetests **)(v303 + 16 * v305);
              }
              while (v307 != v257);
              int v306 = (llvm::lowertypetests **)(v303 + 16 * v305);
            }
          }
          else
          {
LABEL_463:
            int v306 = (llvm::lowertypetests **)(v303 + 16 * v304);
          }
          unsigned int v310 = v306[1];
          unint64_t v313 = *(void **)v310;
          unsigned int v312 = (char *)v310 + 16;
          int v311 = v313;
        }
        else
        {
          int v311 = 0;
          unsigned int v312 = &byte_1CFBCE98E;
        }
        v1110[0] = v312;
        v1110[1] = v311;
        uint64_t v314 = v1054;
        unint64_t v2 = v1056;
        if (sub_1CC95670C(v1054, v1056, (uint64_t)v1110, &v1106))
        {
          if ((*((unsigned char *)v257 + 23) & 0x10) != 0)
          {
            uint64_t v315 = ***(void ***)v257;
            uint64_t v316 = *(void *)(v315 + 152);
            uint64_t v317 = *(unsigned int *)(v315 + 168);
            if (v317)
            {
              LODWORD(v318) = (v317 - 1) & ((v257 >> 4) ^ (v257 >> 9));
              uint64_t v319 = (llvm::lowertypetests **)(v316 + 16 * v318);
              unint64_t v320 = *v319;
              if (*v319 != v257)
              {
                int v321 = 1;
                do
                {
                  if (v320 == (llvm::lowertypetests *)-4096) {
                    goto LABEL_483;
                  }
                  int v322 = v318 + v321++;
                  uint64_t v318 = v322 & (v317 - 1);
                  unint64_t v320 = *(llvm::lowertypetests **)(v316 + 16 * v318);
                }
                while (v320 != v257);
                uint64_t v319 = (llvm::lowertypetests **)(v316 + 16 * v318);
              }
            }
            else
            {
LABEL_483:
              uint64_t v319 = (llvm::lowertypetests **)(v316 + 16 * v317);
            }
            unsigned int v324 = v319[1];
            unint64_t v327 = *(void **)v324;
            unsigned int v326 = (char *)v324 + 16;
            unint64_t v325 = v327;
          }
          else
          {
            unint64_t v325 = 0;
            unsigned int v326 = &byte_1CFBCE98E;
          }
          v1110[0] = v326;
          v1110[1] = v325;
          v1106 = 0;
          if (sub_1CC95670C(v314, v2, (uint64_t)v1110, &v1106))
          {
            int v328 = *((_DWORD *)v1106 + 4);
          }
          else
          {
            uint64_t v329 = sub_1CC95681C((uint64_t)&v1054, (uint64_t)v1110, v1106);
            int v328 = 0;
            *(_OWORD *)uint64_t v329 = *(_OWORD *)v1110;
            v329[2] = 0;
            v329[3] = 0;
          }
          if (!v328) {
            LOBYTE(isJumpTableCanonical) = 1;
          }
          unint64_t v2 = 1;
        }
        else
        {
          if ((llvm::Function::hasAddressTaken(v257, 0, 0, 1, 0, 0) & 1) == 0
            && (!v1006 || ((isJumpTableCanonical ^ 1) & 1) != 0 || (*((_DWORD *)v257 + 8) & 0xFu) - 7 < 2))
          {
            goto LABEL_478;
          }
          unint64_t v2 = 0;
        }
      }
      uint64_t v260 = (uint64_t *)v1095;
      uint64_t v261 = v1096;
      uint64_t v262 = 8 * v1096;
      uint64_t v263 = sub_1CB906F34((uint64_t *)&__p, v262 + 24, 3);
      uint64_t v264 = v263;
      *(void *)uint64_t v263 = v257;
      *(void *)(v263 + 8) = v261;
      *(unsigned char *)(v263 + 16) = isJumpTableCanonical;
      *(unsigned char *)(v263 + 17) = v2;
      if (v261)
      {
        uint64_t v265 = (void *)(v263 + 24);
        do
        {
          uint64_t v266 = *v260++;
          *v265++ = v266;
          v262 -= 8;
        }
        while (v262);
      }
      v1110[0] = v257;
      if (v1053)
      {
        unsigned int v267 = (v1053 - 1) & ((v257 >> 4) ^ (v257 >> 9));
        BOOL v268 = (llvm::lowertypetests **)(v1052[0] + 16 * v267);
        unsigned int v269 = *v268;
        if (v257 == *v268) {
          goto LABEL_406;
        }
        uint64_t v270 = 0;
        int v271 = 1;
        while (v269 != (llvm::lowertypetests *)-4096)
        {
          if (v270) {
            BOOL v272 = 0;
          }
          else {
            BOOL v272 = v269 == (llvm::lowertypetests *)-8192;
          }
          if (v272) {
            uint64_t v270 = v268;
          }
          unsigned int v273 = v267 + v271++;
          unsigned int v267 = v273 & (v1053 - 1);
          BOOL v268 = (llvm::lowertypetests **)(v1052[0] + 16 * v267);
          unsigned int v269 = *v268;
          if (v257 == *v268) {
            goto LABEL_406;
          }
        }
        if (v270) {
          unsigned int v274 = v270;
        }
        else {
          unsigned int v274 = v268;
        }
      }
      else
      {
        unsigned int v274 = 0;
      }
      BOOL v268 = (llvm::lowertypetests **)sub_1CC956A98((uint64_t)v1052, (uint64_t *)v1110, v274);
      *BOOL v268 = v257;
      v268[1] = 0;
LABEL_406:
      v268[1] = (llvm::lowertypetests *)v264;
      if (v1096)
      {
        unsigned int v275 = (char *)v1095;
        unsigned int v276 = (char *)v1095 + 8 * v1096;
        while (1)
        {
          uint64_t v277 = *(void *)v275;
          if (*(_DWORD *)(*(void *)v275 + 8) != 2)
          {
            v992 = "All operands of type metadata must have 2 elements";
            goto LABEL_1402;
          }
          int v278 = *((_DWORD *)v257 + 8);
          if ((v278 & 0x1C00) != 0)
          {
            v992 = "Bit set element may not be thread-local";
            goto LABEL_1402;
          }
          if ((v278 & 0x400000) != 0)
          {
            uint64_t v279 = 2;
            if (*((unsigned char *)v257 + 16) == 3)
            {
              if (!llvm::Value::getMetadata((uint64_t)v257, "typed_global_not_for_cfi", 0x18uLL))
              {
                v992 = "A member of a type identifier may not have an explicit section";
                goto LABEL_1402;
              }
              uint64_t v279 = *(unsigned int *)(v277 + 8);
            }
          }
          else
          {
            uint64_t v279 = 2;
          }
          int v280 = (void *)(v277 - 8 * v279);
          if (*(unsigned char *)*v280 != 1)
          {
            v992 = "Type offset must be a constant";
            goto LABEL_1402;
          }
          uint64_t v281 = *(void *)(*v280 + 128);
          if (v281) {
            BOOL v282 = *(unsigned char *)(v281 + 16) == 16;
          }
          else {
            BOOL v282 = 0;
          }
          if (!v282)
          {
            v992 = "Type offset must be an integer constant";
            goto LABEL_1402;
          }
          int v283 = (void *)v280[1];
          v1110[0] = v283;
          if (!v1059) {
            break;
          }
          unsigned int v284 = ((v283 >> 4) ^ (v283 >> 9)) & (v1059 - 1);
          uint64_t v285 = &v1057[5 * v284];
          v286 = (void *)*v285;
          if (v283 != (void *)*v285)
          {
            int v287 = 0;
            int v288 = 1;
            while (v286 != (void *)-4096)
            {
              if (v287) {
                BOOL v289 = 0;
              }
              else {
                BOOL v289 = v286 == (void *)-8192;
              }
              if (v289) {
                int v287 = v285;
              }
              unsigned int v290 = v284 + v288++;
              unsigned int v284 = v290 & (v1059 - 1);
              uint64_t v285 = &v1057[5 * v284];
              v286 = (void *)*v285;
              if (v283 == (void *)*v285) {
                goto LABEL_434;
              }
            }
            if (v287) {
              unsigned int v291 = v287;
            }
            else {
              unsigned int v291 = v285;
            }
            goto LABEL_433;
          }
LABEL_434:
          *((_DWORD *)v285 + 2) = ++v247;
          unint64_t v2 = v285[3];
          unint64_t v292 = v285[4];
          if (v2 >= v292)
          {
            uint64_t v294 = v285[2];
            uint64_t v295 = (uint64_t)(v2 - v294) >> 3;
            unint64_t v296 = v295 + 1;
            if ((unint64_t)(v295 + 1) >> 61) {
              goto LABEL_1388;
            }
            uint64_t v297 = v292 - v294;
            if (v297 >> 2 > v296) {
              unint64_t v296 = v297 >> 2;
            }
            if ((unint64_t)v297 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v298 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v298 = v296;
            }
            if (v298)
            {
              if (v298 >> 61) {
                goto LABEL_1392;
              }
              uint64_t v299 = (char *)operator new(8 * v298);
            }
            else
            {
              uint64_t v299 = 0;
            }
            uint64_t v300 = (uint64_t *)&v299[8 * v295];
            *uint64_t v300 = v264;
            uint64_t v293 = v300 + 1;
            if (v2 != v294)
            {
              do
              {
                uint64_t v301 = *(void *)(v2 - 8);
                v2 -= 8;
                *--uint64_t v300 = v301;
              }
              while (v2 != v294);
              unint64_t v2 = v285[2];
            }
            v285[2] = (uint64_t)v300;
            v285[3] = (uint64_t)v293;
            v285[4] = (uint64_t)&v299[8 * v298];
            if (v2) {
              operator delete((void *)v2);
            }
          }
          else
          {
            *(void *)unint64_t v2 = v264;
            v2 += 8;
            uint64_t v293 = (void *)v2;
          }
          v285[3] = (uint64_t)v293;
          v275 += 8;
          if (v275 == v276) {
            goto LABEL_478;
          }
        }
        unsigned int v291 = 0;
LABEL_433:
        uint64_t v285 = sub_1CC956C5C((uint64_t)&v1057, (uint64_t *)v1110, v291);
        *uint64_t v285 = (uint64_t)v283;
        *(_OWORD *)(v285 + 1) = 0u;
        *(_OWORD *)(v285 + 3) = 0u;
        goto LABEL_434;
      }
LABEL_478:
      uint64_t v323 = 0;
      do
      {
        if ((*(uint64_t (**)(long long *))((char *)&off_1F2629640 + v323))(&__dst)) {
          break;
        }
        BOOL v36 = v323 == 16;
        v323 += 16;
      }
      while (!v36);
      uint64_t v252 = *((void *)&__dst + 1);
      uint64_t v250 = __dst;
    }
    v1051[0] = (uint64_t)a1;
    v1051[1] = (uint64_t)&v1060;
    v1051[2] = (uint64_t)&v1057;
    if (v1012)
    {
      for (uint64_t j = *(void *)(v1009 + 8); j; uint64_t j = *(void *)(j + 8))
      {
        unint64_t v2 = *(void *)(j + 24);
        uint64_t v331 = *(void *)(v2 + 8);
        if (v331)
        {
          while (sub_1CBF698E4(*(void *)(v331 + 24)))
          {
            uint64_t v331 = *(void *)(v331 + 8);
            if (!v331) {
              goto LABEL_525;
            }
          }
        }
        uint64_t v332 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32);
        if (!v332 || *(unsigned char *)(v332 + 16) != 23) {
          goto LABEL_1403;
        }
        unsigned int v334 = (unint64_t **)sub_1CC953640(v1051, *(void *)(v332 + 24));
        v335 = v334;
        uint64_t v337 = v334[1];
        unint64_t v336 = (unint64_t)v334[2];
        if ((unint64_t)v337 >= v336)
        {
          uint64_t v339 = *v334;
          uint64_t v340 = v337 - *v334;
          unint64_t v341 = v340 + 1;
          if ((unint64_t)(v340 + 1) >> 61) {
            goto LABEL_1388;
          }
          uint64_t v342 = v336 - (void)v339;
          if (v342 >> 2 > v341) {
            unint64_t v341 = v342 >> 2;
          }
          if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v343 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v343 = v341;
          }
          if (v343)
          {
            if (v343 >> 61) {
LABEL_1392:
            }
              sub_1CB833614();
            unint64_t v344 = (char *)operator new(8 * v343);
          }
          else
          {
            unint64_t v344 = 0;
          }
          int v345 = (unint64_t *)&v344[8 * v340];
          *int v345 = v2;
          int v338 = v345 + 1;
          if (v337 != v339)
          {
            do
            {
              unint64_t v346 = *--v337;
              *--int v345 = v346;
            }
            while (v337 != v339);
            uint64_t v337 = *v335;
          }
          int *v335 = v345;
          v335[1] = v338;
          v335[2] = (unint64_t *)&v344[8 * v343];
          if (v337) {
            operator delete(v337);
          }
        }
        else
        {
          *uint64_t v337 = v2;
          int v338 = v337 + 1;
        }
        v335[1] = v338;
LABEL_525:
        ;
      }
    }
    if (!v1004) {
      goto LABEL_622;
    }
    uint64_t v347 = v1004[1];
    if (!v347) {
      goto LABEL_622;
    }
    while (2)
    {
      if (*((_DWORD *)a1 + 7) != 42)
      {
        v992 = "llvm.icall.branch.funnel not supported on this target";
        goto LABEL_1402;
      }
      uint64_t __s1c = v347;
      uint64_t v348 = *(void *)(v347 + 24);
      int v349 = *(unsigned __int8 *)(v348 + 16);
      if (v349 == 84)
      {
        int v350 = 0;
      }
      else if (v349 == 39)
      {
        int v350 = *(_DWORD *)(v348 + 80) + 1;
      }
      else
      {
        int v350 = 2;
      }
      int v351 = *(_DWORD *)(v348 + 20);
      if (v351 < 0
        && (uint64_t v405 = v348 - 32 * (v351 & 0x7FFFFFF), v406 = *(void *)(v405 - 8), (v406 & 0xFFFFFFFF0) != 0))
      {
        uint64_t v353 = -(uint64_t)(v351 & 0x7FFFFFF);
        int v352 = *(_DWORD *)(v405 - 12) - *(_DWORD *)(v405 - v406);
      }
      else
      {
        int v352 = 0;
        uint64_t v353 = -(uint64_t)(v351 & 0x7FFFFFF);
      }
      if (((-32 * v350 + 32 * v352 - 32 * v353 - 32) & 0x20) == 0)
      {
        v992 = "number of arguments should be odd";
        goto LABEL_1402;
      }
      uint64_t v354 = 0;
      int v355 = 0;
      uint64_t v356 = 0;
      unsigned int v357 = 1;
      while (2)
      {
        if (v349 == 84)
        {
          uint64_t v358 = 0;
        }
        else if (v349 == 39)
        {
          uint64_t v358 = (*(_DWORD *)(v348 + 80) + 1);
        }
        else
        {
          uint64_t v358 = 2;
        }
        int v359 = *(_DWORD *)(v348 + 20);
        if (v359 < 0 && (uint64_t v395 = v359 & 0x7FFFFFF, (*(void *)(v348 - 8 - 32 * v395) & 0xFFFFFFFF0) != 0))
        {
          uint64_t v361 = -v395;
          int v360 = *(_DWORD *)(v348 - 32 * v395 - 12) - *(_DWORD *)(v348 - 32 * v395 - *(void *)(v348 - 32 * v395 - 8));
        }
        else
        {
          int v360 = 0;
          uint64_t v361 = -(uint64_t)(v359 & 0x7FFFFFF);
        }
        uint64_t v362 = v348 - 32 - 32 * v358 + 32 * -v360;
        uint64_t v363 = v348 + 32 * v361;
        if (v357 != ((unint64_t)(v362 - v363) >> 5))
        {
          uint64_t v364 = *(llvm::GlobalValue **)(v363 + 32 * v357);
          unsigned int v365 = *(_DWORD *)(*(void *)v364 + 8);
          if ((v365 & 0xFE) == 0x12) {
            unsigned int v365 = *(_DWORD *)(**(void **)(*(void *)v364 + 16) + 8);
          }
          unsigned int v366 = (uint64_t **)*a1;
          if (v365 < 0x100) {
            goto LABEL_551;
          }
          unsigned int v367 = v365 >> 8;
          uint64_t v368 = *((unsigned int *)v366 + 128);
          uint64_t v369 = *((void *)*a1 + 63);
          if (v368)
          {
            uint64_t v369 = *((void *)*a1 + 63);
            unint64_t v370 = *((unsigned int *)v366 + 128);
            do
            {
              unint64_t v371 = v370 >> 1;
              uint64_t v372 = v369 + 16 * (v370 >> 1);
              unsigned int v373 = *(_DWORD *)(v372 + 8);
              uint64_t v374 = v372 + 16;
              v370 += ~(v370 >> 1);
              if (v373 < v367) {
                uint64_t v369 = v374;
              }
              else {
                unint64_t v370 = v371;
              }
            }
            while (v370);
          }
          if (v369 == *((void *)*a1 + 63) + 16 * v368 || *(_DWORD *)(v369 + 8) != v367) {
LABEL_551:
          }
            uint64_t v369 = *((void *)*a1 + 63);
          DWORD2(__dst) = *(_DWORD *)(v369 + 12);
          if (DWORD2(__dst) > 0x40) {
            operator new[]();
          }
          *(void *)&long long __dst = 0;
          int v375 = llvm::Value::stripAndAccumulateConstantOffsets(v364, (llvm::DataLayout *)(v366 + 34), (llvm::APInt *)&__dst, 1, 0, 0, v105);
          if (DWORD2(__dst) >= 0x41) {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
          }
          if (*((unsigned __int8 *)v375 + 16) - 2 >= 2 && *((unsigned char *)v375 + 16))
          {
            v992 = "Expected branch funnel operand to be global value";
            goto LABEL_1402;
          }
          *(void *)&long long __dst = v375;
          if (v1053)
          {
            unsigned int v376 = (v1053 - 1) & ((v375 >> 4) ^ (v375 >> 9));
            int v377 = (llvm::GlobalValue **)(v1052[0] + 16 * v376);
            unsigned int v378 = *v377;
            if (v375 != *v377)
            {
              int v379 = 0;
              int v380 = 1;
              while (v378 != (llvm::GlobalValue *)-4096)
              {
                if (v379) {
                  BOOL v381 = 0;
                }
                else {
                  BOOL v381 = v378 == (llvm::GlobalValue *)-8192;
                }
                if (v381) {
                  int v379 = v377;
                }
                unsigned int v382 = v376 + v380++;
                unsigned int v376 = v382 & (v1053 - 1);
                int v377 = (llvm::GlobalValue **)(v1052[0] + 16 * v376);
                unsigned int v378 = *v377;
                if (v375 == *v377) {
                  goto LABEL_570;
                }
              }
              if (v379) {
                unsigned int v383 = v379;
              }
              else {
                unsigned int v383 = v377;
              }
LABEL_569:
              int v377 = (llvm::GlobalValue **)sub_1CC956A98((uint64_t)v1052, (uint64_t *)&__dst, v383);
              *int v377 = v375;
              v377[1] = 0;
            }
LABEL_570:
            unsigned int v384 = v377[1];
            if (v355 >= v354)
            {
              uint64_t v385 = (v355 - v356) >> 3;
              unint64_t v386 = v385 + 1;
              if ((unint64_t)(v385 + 1) >> 61) {
                goto LABEL_1388;
              }
              if ((v354 - v356) >> 2 > v386) {
                unint64_t v386 = (v354 - v356) >> 2;
              }
              if ((unint64_t)(v354 - v356) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v387 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v387 = v386;
              }
              if (v387)
              {
                if (v387 >> 61) {
                  goto LABEL_1392;
                }
                uint64_t v388 = (char *)operator new(8 * v387);
              }
              else
              {
                uint64_t v388 = 0;
              }
              uint64_t v389 = &v388[8 * v385];
              *(void *)uint64_t v389 = v384;
              int v390 = v389 + 8;
              if (v355 != v356)
              {
                do
                {
                  uint64_t v391 = *((void *)v355 - 1);
                  v355 -= 8;
                  *((void *)v389 - 1) = v391;
                  v389 -= 8;
                }
                while (v355 != v356);
                int v355 = v356;
              }
              uint64_t v356 = v389;
              uint64_t v354 = &v388[8 * v387];
              if (v355) {
                operator delete(v355);
              }
              int v355 = v390;
            }
            else
            {
              *(void *)int v355 = v384;
              v355 += 8;
            }
            uint64_t v392 = sub_1CC953784(&v1060, (uint64_t *)((unint64_t)v384 & 0xFFFFFFFFFFFFFFFCLL));
            if (&v1061 == v392) {
              uint64_t v393 = 0;
            }
            else {
              uint64_t v393 = sub_1CC957040((uint64_t)(v392 + 4));
            }
            if (v357 != 1)
            {
              if (v2 != v393)
              {
                *(void *)(*(void *)v2 + 8) = *(void *)(*(void *)v2 + 8) & 1 | v393;
                *(void *)unint64_t v2 = *(void *)v393;
                unint64_t v394 = *(void *)(v393 + 8) & 0xFFFFFFFFFFFFFFFELL;
                *(void *)uint64_t v393 = v2;
                *(void *)(v393 + 8) = v394;
              }
              uint64_t v393 = v2;
            }
            v357 += 2;
            LOBYTE(v349) = *(unsigned char *)(v348 + 16);
            unint64_t v2 = v393;
            continue;
          }
          unsigned int v383 = 0;
          goto LABEL_569;
        }
        break;
      }
      uint64_t v396 = sub_1CB906F34((uint64_t *)&__p, v355 - v356 + 24, 3);
      ++v247;
      *(void *)uint64_t v396 = v348;
      *(_DWORD *)(v396 + 8) = v247;
      uint64_t v397 = (v355 - v356) >> 3;
      *(void *)(v396 + 16) = v397;
      if (v355 != v356)
      {
        unsigned int v398 = (void *)(v396 + 24);
        uint64_t v399 = 8 * v397;
        unsigned int v400 = v356;
        do
        {
          uint64_t v401 = *(void *)v400;
          v400 += 8;
          *v398++ = v401;
          v399 -= 8;
        }
        while (v399);
      }
      uint64_t v402 = sub_1CC953784(&v1060, (uint64_t *)(v396 & 0xFFFFFFFFFFFFFFFCLL | 2));
      if (&v1061 == v402) {
        uint64_t v403 = 0;
      }
      else {
        uint64_t v403 = sub_1CC957040((uint64_t)(v402 + 4));
      }
      if (v2 != v403)
      {
        *(void *)(*(void *)v2 + 8) = *(void *)(*(void *)v2 + 8) & 1 | v403;
        *(void *)unint64_t v2 = *(void *)v403;
        unint64_t v404 = *(void *)(v403 + 8) & 0xFFFFFFFFFFFFFFFELL;
        *(void *)uint64_t v403 = v2;
        *(void *)(v403 + 8) = v404;
      }
      if (v356) {
        operator delete(v356);
      }
      uint64_t v347 = *(void *)(__s1c + 8);
      if (v347) {
        continue;
      }
      break;
    }
LABEL_622:
    int v407 = (uint64_t *)a1;
    uint64_t v408 = a1[1];
    if (v408)
    {
      v1110[1] = 0;
      v1110[0] = 0;
      LODWORD(v1111[0]) = 0;
      v965 = &v1057[5 * v1059];
      if (v1058)
      {
        if (v1059)
        {
          uint64_t v967 = 40 * v1059;
          v966 = v1057;
          while ((*v966 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v966 += 5;
            v967 -= 40;
            if (!v967) {
              goto LABEL_1349;
            }
          }
        }
        else
        {
          v966 = v1057;
        }
      }
      else
      {
LABEL_1349:
        v966 = &v1057[5 * v1059];
      }
      v968 = &v1057[5 * v1059];
      if (v966 != v968)
      {
        do
        {
          uint64_t v969 = *v966;
          if (!*(unsigned char *)*v966)
          {
            uint64_t v971 = *(void *)(v969 + 8);
            size_t v972 = *(void *)v971;
            long long __dst = xmmword_1CFAC4320;
            *(void *)&long long v1114 = 0;
            llvm::MD5::update((int *)&__dst, (int *)(v971 + 24), v972);
            llvm::MD5::final((int *)&__dst, (int *)&v1106);
            *(void *)&long long __dst = v1106;
            v973 = sub_1CD673980((uint64_t)v1110, (uint64_t *)&__dst);
            sub_1CC95385C(v973 + 1, v969);
          }
          v970 = v966 + 5;
          v966 = v965;
          if (v970 != v965)
          {
            v966 = v970;
            do
            {
              if ((*v966 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_1358;
              }
              v966 += 5;
            }
            while (v966 != v965);
            v966 = v965;
          }
LABEL_1358:
          ;
        }
        while (v966 != v968);
        uint64_t v408 = a1[1];
      }
      v976 = *(void **)v408;
      v974 = (void *)((char *)v408 + 8);
      v975 = v976;
      if (v976 != v974)
      {
        do
        {
          v977 = (uint64_t *)v975[7];
          v978 = (uint64_t *)v975[8];
          while (v977 != v978)
          {
            uint64_t v979 = *v977;
            if (!*((unsigned char *)a1[1] + 128) || (*(_WORD *)(v979 + 12) & 0x80) != 0)
            {
              int v980 = *(_DWORD *)(v979 + 8);
              if (v979) {
                BOOL v981 = v980 == 0;
              }
              else {
                BOOL v981 = 0;
              }
              if (v981)
              {
                uint64_t v979 = *(void *)(v979 + 72);
                int v980 = *(_DWORD *)(v979 + 8);
              }
              if (v980 == 1)
              {
                uint64_t v982 = *(void *)(v979 + 104);
                if (v982)
                {
                  v983 = *(void **)v982;
                  v984 = *(void **)(v982 + 8);
                  if (v984 != *(void **)v982)
                  {
                    do
                    {
                      *(void *)&long long __dst = 0;
                      *(void *)&long long __dst = *v983;
                      v986 = sub_1CD673980((uint64_t)v1110, (uint64_t *)&__dst) + 1;
                      unint64_t v985 = *v986;
                      if ((*v986 & 2) != 0)
                      {
                        unint64_t v988 = v985 & 0xFFFFFFFFFFFFFFFCLL;
                        v986 = *(uint64_t **)v988;
                        uint64_t v987 = *(void *)v988 + 8 * *(unsigned int *)(v988 + 8);
                      }
                      else
                      {
                        uint64_t v987 = (uint64_t)&v986[v985 > 3];
                      }
                      while (v986 != (uint64_t *)v987)
                      {
                        uint64_t v989 = *v986++;
                        *((unsigned char *)sub_1CC953640(v1051, v989) + 24) = 1;
                      }
                      ++v983;
                    }
                    while (v983 != v984);
                  }
                }
              }
            }
            ++v977;
          }
          v990 = (void *)v975[1];
          if (v990)
          {
            do
            {
              v991 = v990;
              v990 = (void *)*v990;
            }
            while (v990);
          }
          else
          {
            do
            {
              v991 = (void *)v975[2];
              BOOL v36 = *v991 == (void)v975;
              v975 = v991;
            }
            while (!v36);
          }
          v975 = v991;
        }
        while (v991 != v974);
      }
      sub_1CD673D98((uint64_t *)v1110);
    }
    BOOL v19 = v1062 != 0;
    if (!v1062) {
      goto LABEL_1322;
    }
    uint64_t v409 = v1060;
    if (v1060 == (uint64_t *)&v1061)
    {
      uint64_t v412 = 0;
      unint64_t v411 = 0;
      goto LABEL_663;
    }
    uint64_t v410 = 0;
    unint64_t v411 = 0;
    uint64_t v412 = 0;
    while (1)
    {
      if ((v409[5] & 1) == 0) {
        goto LABEL_655;
      }
      unsigned int v413 = 0;
      unint64_t v414 = (unint64_t)(v409 + 4);
      do
      {
        uint64_t v415 = *(void *)(v414 + 16) & 3;
        unint64_t v416 = *(void *)(v414 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        if (v415 == 1) {
          unint64_t v417 = *(void *)(v414 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        }
        else {
          unint64_t v417 = 0;
        }
        *(void *)&long long __dst = v417;
        if (v417)
        {
          unsigned int v418 = *(_DWORD *)sub_1CC953968((uint64_t)&v1057, (uint64_t *)&__dst);
        }
        else
        {
          if (v415 != 2 || v416 == 0) {
            goto LABEL_640;
          }
          unsigned int v418 = *(_DWORD *)(v416 + 8);
        }
        if (v413 <= v418) {
          unsigned int v413 = v418;
        }
LABEL_640:
        unint64_t v414 = *(void *)(v414 + 8) & 0xFFFFFFFFFFFFFFFELL;
      }
      while (v414);
      if (v411 < (unint64_t)v410)
      {
        *(void *)unint64_t v411 = v409;
        *(_DWORD *)(v411 + 8) = v413;
        v411 += 16;
        goto LABEL_655;
      }
      uint64_t v420 = (uint64_t)(v411 - (void)v412) >> 4;
      unint64_t v421 = v420 + 1;
      if ((unint64_t)(v420 + 1) >> 60) {
        goto LABEL_1388;
      }
      if ((v410 - v412) >> 3 > v421) {
        unint64_t v421 = (v410 - v412) >> 3;
      }
      if ((unint64_t)(v410 - v412) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v422 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v422 = v421;
      }
      if (v422 >> 60) {
        goto LABEL_1392;
      }
      int v423 = (char *)operator new(16 * v422);
      int v424 = &v423[16 * v420];
      *(void *)int v424 = v409;
      *((_DWORD *)v424 + 2) = v413;
      for (uint64_t k = v424; (char *)v411 != v412; v411 -= 16)
      {
        *((_OWORD *)k - 1) = *(_OWORD *)(v411 - 16);
        k -= 16;
      }
      uint64_t v410 = &v423[16 * v422];
      unint64_t v411 = (unint64_t)(v424 + 16);
      if (v412) {
        operator delete(v412);
      }
      uint64_t v412 = k;
LABEL_655:
      uint64_t v426 = (uint64_t *)v409[1];
      if (v426)
      {
        do
        {
          uint64_t v427 = v426;
          uint64_t v426 = (uint64_t *)*v426;
        }
        while (v426);
      }
      else
      {
        do
        {
          uint64_t v427 = (uint64_t *)v409[2];
          BOOL v36 = *v427 == (void)v409;
          uint64_t v409 = v427;
        }
        while (!v36);
      }
      uint64_t v409 = v427;
      if (v427 == (uint64_t *)&v1061)
      {
LABEL_663:
        unint64_t v428 = 126 - 2 * __clz((uint64_t)(v411 - (void)v412) >> 4);
        if ((char *)v411 == v412) {
          uint64_t v429 = 0;
        }
        else {
          uint64_t v429 = v428;
        }
        sub_1CC9570E4((uint64_t *)v412, v411, v429, 1);
        v1005 = v412;
        if ((char *)v411 == v412) {
          goto LABEL_1184;
        }
        unint64_t v1016 = v411;
        while (2)
        {
          v1008 = v412;
          uint64_t v431 = *(void *)v412;
          if ((*(unsigned char *)(*(void *)v412 + 40) & 1) == 0)
          {
            int v432 = 0;
            uint64_t v433 = 0;
            uint64_t v434 = 0;
            uint64_t v435 = 0;
            v436 = 0;
            int v437 = 0;
LABEL_729:
            v1013 = v435;
            unint64_t __s1e = v436 - v437;
            unint64_t v472 = 126 - 2 * __clz(__s1e);
            if (v436 == v437) {
              uint64_t v473 = 0;
            }
            else {
              uint64_t v473 = v472;
            }
            unint64_t v474 = v432 - v433;
            unint64_t v475 = 126 - 2 * __clz(v474);
            *(void *)&long long __dst = &v1057;
            if (v432 == v433) {
              uint64_t v476 = 0;
            }
            else {
              uint64_t v476 = v475;
            }
            sub_1CC957C54((uint64_t)v433, v432, (uint64_t *)&__dst, v476, 1);
            v1019 = (llvm::Value *)v437;
            sub_1CC958CEC(v437, v436, v473, 1);
            v1071[0] = 0;
            v1071[1] = 0;
            int v1072 = 0;
            if (v432 != v433)
            {
              uint64_t v477 = 0;
              unsigned int v478 = 1;
              do
              {
                sub_1CD45F378((uint64_t)v1071, &v433[v477])[1] = v477;
                uint64_t v477 = v478;
                BOOL v36 = v474 == v478++;
              }
              while (!v36);
            }
            v1023 = v433;
            size_t __sze = (char *)v434 - (char *)v1013;
            unint64_t v1045 = v434 - v1013;
            uint64_t v1010 = v432 - v433;
            sub_1CD673DF8(&v1068, v1010);
            v1066[0] = 0;
            v1066[1] = 0;
            int v1067 = 0;
            if (v434 != v1013)
            {
              unsigned int v479 = 0;
              uint64_t v480 = v1013;
              uint64_t v481 = v1071[0];
              int v482 = v1072;
              unsigned int v483 = v1072 - 1;
              do
              {
                *(void *)&long long __dst = 0;
                unint64_t v484 = *v480;
                *(void *)&long long __dst = v484;
                uint64_t v485 = *(void *)(v484 + 8);
                uint64_t v486 = v479;
                if (v485)
                {
                  unint64_t v487 = v484 + 24;
                  uint64_t v488 = v484 + 24 + 8 * v485;
                  do
                  {
                    if (v482)
                    {
                      uint64_t v489 = *(void *)(*(void *)v487 - 8 * *(unsigned int *)(*(void *)v487 + 8) + 8);
                      uint64_t v490 = ((v489 >> 4) ^ (v489 >> 9)) & v483;
                      uint64_t v491 = *(void *)(v481 + 16 * v490);
                      if (v489 == v491)
                      {
LABEL_745:
                        if (v490 != v482)
                        {
                          int v492 = (uint64_t **)((char *)v1068 + 24 * *(void *)(v481 + 16 * v490 + 8));
                          v1110[0] = (void *)v486;
                          sub_1CD3CFB98(v492, (unint64_t *)v1110, (uint64_t **)v1110);
                        }
                      }
                      else
                      {
                        int v493 = 1;
                        while (v491 != -4096)
                        {
                          int v494 = v490 + v493++;
                          uint64_t v490 = v494 & v483;
                          uint64_t v491 = *(void *)(v481 + 16 * v490);
                          if (v489 == v491) {
                            goto LABEL_745;
                          }
                        }
                      }
                    }
                    v487 += 8;
                  }
                  while (v487 != v488);
                }
                *sub_1CC959744((uint64_t)v1066, (uint64_t *)&__dst) = v486;
                unsigned int v479 = v486 + 1;
                ++v480;
              }
              while (v480 != &v1013[v1045]);
            }
            uint64_t v495 = v1019;
            int v407 = (uint64_t *)a1;
            if (v436 == (uint64_t *)v1019)
            {
LABEL_755:
              uint64_t v496 = (uint64_t *)v1068;
              int v497 = v1069;
              unint64_t v498 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1069 - (unsigned char *)v1068) >> 3);
              uint64_t v499 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
              uint64_t v500 = v1023;
              if ((char *)v1069 - (unsigned char *)v1068 < 1)
              {
LABEL_759:
                sub_1CC959930(v496, v497, v498, 0, 0);
              }
              else
              {
                unint64_t v501 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1069 - (unsigned char *)v1068) >> 3);
                while (1)
                {
                  uint64_t v502 = (uint64_t *)operator new(24 * v501, v499);
                  if (v502) {
                    break;
                  }
                  BOOL v503 = v501 > 1;
                  v501 >>= 1;
                  if (!v503) {
                    goto LABEL_759;
                  }
                }
                uint64_t v527 = v502;
                sub_1CC959930(v496, v497, v498, v502, v501);
                operator delete(v527);
              }
              sub_1CD673F44(&v1063, v1045);
              uint64_t v530 = (uint64_t *)v1068;
              uint64_t v529 = v1069;
              while (v530 != v529)
              {
                llvm::lowertypetests::GlobalLayoutBuilder::addFragment(&v1063, v530);
                v530 += 3;
              }
              uint64_t v531 = v1013;
              if (v434 == v1013)
              {
                uint64_t v534 = 0;
                int v535 = 0;
                BOOL v533 = 1;
                v532 = (char *)v1016;
              }
              else
              {
                v532 = (char *)v1016;
                if ((__sze & 0x8000000000000000) != 0) {
                  goto LABEL_1388;
                }
                BOOL v533 = *(unsigned __int8 *)(*(void *)*v1013 + 16) == 3;
                uint64_t v534 = (char *)operator new(__sze);
                bzero(v534, __sze & 0xFFFFFFFFFFFFFFF8);
                uint64_t v531 = v1013;
                int v535 = &v534[__sze & 0xFFFFFFFFFFFFFFF8];
              }
              uint64_t v537 = v1063.i64[1];
              uint64_t v536 = v1063.i64[0];
              unint64_t v538 = (unint64_t *)v534;
              while (v536 != v537)
              {
                uint64_t v539 = *(void **)v536;
                uint64_t v540 = *(void **)(v536 + 8);
                while (v539 != v540)
                {
                  unint64_t v541 = v531[*v539];
                  if (v533 != (*(unsigned char *)(*(void *)v541 + 16) == 3))
                  {
                    v992 = "Type identifier may not contain both global variables and functions";
                    goto LABEL_1402;
                  }
                  *v538++ = v541;
                  ++v539;
                }
                v536 += 24;
              }
              uint64_t v542 = (v535 - v534) >> 3;
              __s1f = v534;
              if (!v533)
              {
                unsigned int v543 = *((_DWORD *)a1 + 7);
                if (v543 - 63 < 2)
                {
                  long long __dst = 0uLL;
                  LODWORD(v1114) = 0;
                  if (v535 == v534)
                  {
                    uint64_t v558 = 0;
                  }
                  else
                  {
                    uint64_t v544 = 8 * v542;
                    int v545 = (void **)v534;
                    do
                    {
                      v1106 = *v545;
                      v546 = *(llvm::Function **)v1106;
                      if (llvm::Function::hasAddressTaken(*(llvm::Function **)v1106, 0, 0, 1, 0, 0))
                      {
                        uint64_t v548 = **(void **)v546;
                        v549 = a1[11];
                        unint64_t v550 = (unint64_t)a1[13];
                        uint64_t v551 = *(llvm::ConstantInt **)v549;
                        unint64_t v552 = *((unsigned int *)v549 + 2);
                        LODWORD(v1110[1]) = v552 >> 8;
                        if (v552 >> 8 > 0x40) {
                          operator new[]();
                        }
                        if (v552 <= 0xFF) {
                          unint64_t v553 = 0;
                        }
                        else {
                          unint64_t v553 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v552) + 63);
                        }
                        v1110[0] = (void *)(v553 & v550);
                        v555 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v551, (llvm::LLVMContext *)v1110, v547);
                        uint64_t v500 = v1023;
                        uint64_t v534 = __s1f;
                        if (LODWORD(v1110[1]) >= 0x41 && v1110[0]) {
                          MEMORY[0x1D25D9CB0](v1110[0], 0x1000C8000313F17);
                        }
                        v1084 = (void *)llvm::ValueAsMetadata::get(v555, v554);
                        Impl = llvm::MDTuple::getImpl(v548, &v1084, 1, 0, 1);
                        llvm::Value::setMetadata((uint64_t)v546, "wasm.index", 0xAuLL, Impl);
                        uint64_t v557 = (uint64_t)a1[13];
                        a1[13] = (llvm::Constant *)(v557 + 1);
                        *sub_1CC959744((uint64_t)&__dst, (uint64_t *)&v1106) = v557;
                      }
                      ++v545;
                      v544 -= 8;
                    }
                    while (v544);
                    uint64_t v558 = __dst;
                  }
                  v559 = (llvm::detail::IEEEFloat *)llvm::ConstantPointerNull::get(a1[10], v528);
                  sub_1CC95A62C((uint64_t)a1, v500, v1010, v559, (uint64_t)&__dst);
                  MEMORY[0x1D25D9CD0](v558, 8);
                  goto LABEL_822;
                }
                if (v543 > 0x2A || ((1 << v543) & 0x6800000000ALL) == 0)
                {
LABEL_1406:
                  v992 = "Unsupported architecture for jump tables";
                  goto LABEL_1402;
                }
                unint64_t v1000 = v535 - v534;
                v1073[0] = 0;
                v1073[1] = 0;
                int v1074 = 0;
                int v564 = sub_1CC95B5DC((uint64_t)a1);
                v1001 = v535;
                if (v535 != v534)
                {
                  int v565 = v564;
                  unsigned int v566 = 0;
                  uint64_t v567 = 0;
                  unsigned int v568 = 1;
                  do
                  {
                    *sub_1CC959744((uint64_t)v1073, (uint64_t *)&v534[8 * v567]) = v566;
                    uint64_t v567 = v568;
                    BOOL v36 = v542 == v568++;
                    v566 += v565;
                  }
                  while (!v36);
                }
                unint64_t v569 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(void **)*a1 + 1576), 0, 0, 0);
                v570 = (uint64_t **)*a1;
                uint64_t v571 = (v535 - v534) >> 3;
                v572 = (llvm::Type *)*((unsigned int *)*a1 + 71);
                *(void *)&long long __dst = ".cfi.jumptable";
                LOWORD(v1115) = 259;
                v573 = operator new(0x80uLL);
                uint64_t v574 = (llvm::ConstantExpr *)(v573 + 2);
                v573[7] = v573[7] & 0x38000000 | 0x40000000;
                v999 = v573;
                *(void *)v573 = 0;
                v575 = v572;
                uint64_t v576 = v571;
                llvm::Function::Function((unint64_t *)v573 + 1, v569, 8, v575, (const char **)&__dst, (unint64_t)v570);
                v577 = a1[6];
                unsigned int v578 = sub_1CC95B5DC((uint64_t)a1);
                v579 = llvm::ArrayType::get(v577, (llvm::Type *)v578);
                __szf = llvm::ArrayType::get(v579, (llvm::Type *)v571);
                v580 = (llvm::Constant *)llvm::PointerType::get(__szf, 0);
                PointerCast = llvm::ConstantExpr::getPointerCast(v574, v580, v581);
                uint64_t v583 = v1010;
                v1011 = (uint64_t *)PointerCast;
                sub_1CC95A62C((uint64_t)a1, v1023, v583, PointerCast, (uint64_t)v1073);
                sub_1CC9529D8((uint64_t)&__dst, (uint64_t)*a1);
                if (v535 == v534)
                {
LABEL_846:
                  sub_1CC9534F0((void **)&__dst);
                  memset(v1094, 0, sizeof(v1094));
                  memset(v1093, 0, sizeof(v1093));
                  LODWORD(v1085) = 0;
                  char v1089 = 0;
                  uint64_t v1090 = 0;
                  v1084 = &unk_1F2646F30;
                  v1092 = v1094;
                  int v1091 = 0;
                  uint64_t v1087 = 0;
                  uint64_t v1088 = 0;
                  uint64_t v1086 = 0;
                  LODWORD(v1076) = 0;
                  char v1080 = 0;
                  uint64_t v1081 = 0;
                  v1075 = &unk_1F2646F30;
                  v1083 = v1093;
                  int v1082 = 0;
                  uint64_t v1078 = 0;
                  v1079 = 0;
                  uint64_t v1077 = 0;
                  v1110[0] = v1111;
                  v1110[1] = (void *)0x1000000000;
                  if (v1000 >= 0x41) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v585 = *((_DWORD *)a1 + 7);
                  if (v585 == 39 || v585 == 1)
                  {
                    if (v1001 == v534)
                    {
                      unsigned int v586 = 0;
                      unsigned int v587 = 0;
                      goto LABEL_852;
                    }
                    unsigned int v587 = 0;
                    unsigned int v586 = 0;
                    v735 = &v534[8 * v571];
                    BOOL v736 = v585 == 39;
                    v737 = v534;
                    while (1)
                    {
                      if (!*(unsigned char *)(*(void *)v737 + 16))
                      {
                        ++v587;
                        goto LABEL_1104;
                      }
                      uint64_t v738 = *(void *)(**(void **)v737 + 112);
                      if (!v738) {
                        goto LABEL_1096;
                      }
                      if (!*(_DWORD *)(v738 + 8)) {
                        goto LABEL_1096;
                      }
                      uint64_t v739 = *(void *)(v738 + 40);
                      if (!v739) {
                        goto LABEL_1096;
                      }
                      int v740 = *(_DWORD *)(v739 + 40);
                      if (!v740) {
                        goto LABEL_1096;
                      }
                      uint64_t v741 = *(void *)(v739 + 24);
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_1EBCBE588))
                      {
                        unint64_t v759 = llvm::hashing::detail::fixed_seed_override;
                        if (!llvm::hashing::detail::fixed_seed_override) {
                          unint64_t v759 = 0xFF51AFD7ED558CCDLL;
                        }
                        qword_1EBCBE580 = v759;
                        __cxa_guard_release(&qword_1EBCBE588);
                      }
                      unint64_t v742 = 0x9DDFEA08EB382D69
                           * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                                                  * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
                      unsigned int v743 = (-348639895 * ((v742 >> 47) ^ v742)) ^ 0x74616566;
                      for (int m = 1; ; ++m)
                      {
                        unsigned int v745 = v743 & (v740 - 1);
                        uint64_t v746 = v741 + 24 * v745;
                        uint64_t v747 = *(void **)v746;
                        if (*(void *)v746 == -1)
                        {
                          if ("target-features" == (char *)-1) {
                            goto LABEL_1074;
                          }
                          goto LABEL_1063;
                        }
                        if (v747 != (void *)-2) {
                          break;
                        }
                        if ("target-features" == (char *)-2) {
                          goto LABEL_1074;
                        }
LABEL_1063:
                        if (v747 == (void *)-1) {
                          goto LABEL_1096;
                        }
                        unsigned int v743 = m + v745;
                      }
                      if (*(void *)(v746 + 8) != 15) {
                        goto LABEL_1063;
                      }
                      if (*v747 != 0x662D746567726174 || *(void *)((char *)v747 + 7) != 0x7365727574616566) {
                        goto LABEL_1063;
                      }
LABEL_1074:
                      uint64_t v749 = *(void *)(v746 + 16);
                      if (!v749) {
                        goto LABEL_1096;
                      }
                      *(void *)&long long __dst = &v1114;
                      *((void *)&__dst + 1) = 0x600000000;
                      uint64_t v750 = *(unsigned int *)(v749 + 16);
                      v1106 = (void *)(v749 + *(unsigned int *)(v749 + 12) + 25);
                      uint64_t v1107 = v750;
                      int v751 = 1;
                      llvm::StringRef::split((char *)&v1106, (uint64_t)&__dst, 44, -1, 1);
                      if (DWORD2(__dst))
                      {
                        unsigned int v752 = (uint64_t **)__dst;
                        while (1)
                        {
                          if (v752[1] == (uint64_t *)11)
                          {
                            uint64_t v753 = *v752;
                            if (**v752 == 0x6D2D626D7568742DLL
                              && *(uint64_t *)((char *)*v752 + 3) == 0x65646F6D2D626D75)
                            {
                              int v751 = 0;
                              LOBYTE(v740) = 0;
                              goto LABEL_1093;
                            }
                            uint64_t v755 = *v753;
                            uint64_t v756 = *(uint64_t *)((char *)v753 + 3);
                            if (v755 == 0x6D2D626D7568742BLL && v756 == 0x65646F6D2D626D75) {
                              break;
                            }
                          }
                          v752 += 2;
                          if (v752 == (uint64_t **)(__dst + 16 * DWORD2(__dst)))
                          {
                            int v751 = 1;
                            goto LABEL_1092;
                          }
                        }
                        int v751 = 0;
LABEL_1092:
                        LOBYTE(v740) = 1;
                      }
LABEL_1093:
                      if ((long long *)__dst != &v1114) {
                        free((void *)__dst);
                      }
                      if (v751) {
LABEL_1096:
                      }
                        LOBYTE(v740) = v736;
                      if (v740) {
                        unsigned int v758 = v586;
                      }
                      else {
                        unsigned int v758 = v587;
                      }
                      if (v740) {
                        unsigned int v586 = v758 + 1;
                      }
                      else {
                        unsigned int v587 = v758 + 1;
                      }
                      uint64_t v534 = __s1f;
LABEL_1104:
                      v737 += 8;
                      if (v737 == v735)
                      {
LABEL_852:
                        if (v587 > v586) {
                          int v585 = 1;
                        }
                        else {
                          int v585 = 39;
                        }
                        break;
                      }
                    }
                  }
                  if (v1001 == v534)
                  {
LABEL_856:
                    v999[10] = (((__clz(sub_1CC95B5DC((uint64_t)a1)) << 16) ^ 0x1F0000) + 0x10000) | v999[10] & 0xFFC0FFFF;
                    if (*((_DWORD *)a1 + 8) != 15) {
                      *((void *)v999 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v999 + 15, **((uint64_t ***)v999 + 1), -1, 17);
                    }
                    switch(v585)
                    {
                      case 39:
                        uint64_t v588 = (uint64_t *)(v999 + 30);
                        *((void *)v999 + 15) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v999 + 30), **((uint64_t ***)v999 + 1), -1, "target-features", 0xFuLL, "+thumb-mode", 0xBuLL);
                        unint64_t v589 = (uint64_t *)**((void **)v999 + 1);
                        uint64_t v590 = (llvm::AttributeList *)(v999 + 30);
                        uint64_t v591 = "target-cpu";
                        size_t v592 = 10;
                        uint64_t v593 = "cortex-a8";
                        size_t v594 = 9;
                        break;
                      case 3:
                        uint64_t v588 = (uint64_t *)(v999 + 30);
                        *((void *)v999 + 15) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v999 + 30), **((uint64_t ***)v999 + 1), -1, "branch-target-enforcement", 0x19uLL, "false", 5uLL);
                        unint64_t v589 = (uint64_t *)**((void **)v999 + 1);
                        uint64_t v590 = (llvm::AttributeList *)(v999 + 30);
                        uint64_t v591 = "sign-return-address";
                        size_t v592 = 19;
                        uint64_t v593 = "none";
                        size_t v594 = 4;
                        break;
                      case 1:
                        uint64_t v588 = (uint64_t *)(v999 + 30);
                        unint64_t v589 = (uint64_t *)**((void **)v999 + 1);
                        uint64_t v590 = (llvm::AttributeList *)(v999 + 30);
                        uint64_t v591 = "target-features";
                        size_t v592 = 15;
                        uint64_t v593 = "-thumb-mode";
                        size_t v594 = 11;
                        break;
                      default:
LABEL_1113:
                        *((void *)v999 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v999 + 15, **((uint64_t ***)v999 + 1), -1, 37);
                        *(void *)&long long __dst = "entry";
                        LOWORD(v1115) = 259;
                        operator new();
                    }
                    *uint64_t v588 = llvm::AttributeList::addAttributeAtIndex(v590, v589, -1, (unsigned __int8 *)v591, v592, (unsigned __int8 *)v593, v594);
                    goto LABEL_1113;
                  }
                  uint64_t v698 = 0;
                  int v699 = 0;
                  unsigned int v700 = v1110[1];
                  while (2)
                  {
                    uint64_t v701 = **(void **)&v534[8 * v698];
                    unint64_t v702 = v700;
                    if ((v585 - 41) <= 1)
                    {
                      v703 = (_DWORD *)v1088;
                      if ((unint64_t)(v1087 - v1088) > 5)
                      {
                        *(_WORD *)(v1088 + 4) = 31524;
                        _DWORD *v703 = 544238954;
                        v1088 += 6;
                      }
                      else
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v1084, "jmp ${", 6uLL);
                      }
                      sub_1CD098D14((llvm::raw_ostream *)&v1084, v702, 0, 0, 0);
                      if ((unint64_t)(v1087 - v1088) > 7)
                      {
                        *(void *)uint64_t v1088 = 0xA746C70407D633ALL;
                        int v704 = (void *)(v1088 + 8);
                        v1088 += 8;
                      }
                      else
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v1084, ":c}@plt\n", 8uLL);
                        int v704 = (void *)v1088;
                      }
                      if ((unint64_t)(v1087 - (void)v704) <= 0xE)
                      {
                        BOOL v705 = "int3\nint3\nint3\n";
                        size_t v706 = 15;
                        goto LABEL_1025;
                      }
                      qmemcpy(v704, "int3\nint3\nint3\n", 15);
                      uint64_t v729 = v1088 + 15;
LABEL_1044:
                      uint64_t v1088 = v729;
                      goto LABEL_1026;
                    }
                    if (v585 == 39)
                    {
                      uint64_t v722 = (_DWORD *)v1088;
                      if ((unint64_t)(v1087 - v1088) > 4)
                      {
                        *(unsigned char *)(v1088 + 4) = 36;
                        *uint64_t v722 = 544681570;
                        uint64_t v730 = v1088 + 5;
                        goto LABEL_1048;
                      }
                      v708 = "b.w $";
                      size_t v709 = 5;
LABEL_1011:
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v1084, v708, v709);
LABEL_1023:
                      sub_1CD098D14((llvm::raw_ostream *)&v1084, v702, 0, 0, 0);
                      if (v1087 != v1088)
                      {
                        *(unsigned char *)uint64_t v1088 = 10;
                        uint64_t v729 = v1088 + 1;
                        goto LABEL_1044;
                      }
                      BOOL v705 = "\n";
                      size_t v706 = 1;
LABEL_1025:
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v1084, v705, v706);
LABEL_1026:
                      if (v702) {
                        char v727 = ",s";
                      }
                      else {
                        char v727 = "s";
                      }
                      if (v702) {
                        size_t v728 = 2;
                      }
                      else {
                        size_t v728 = 1;
                      }
                      if (v728 <= v1078 - (uint64_t)v1079)
                      {
                        memcpy(v1079, v727, v728);
                        v1079 = (char *)v1079 + v728;
                      }
                      else
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v1075, v727, v728);
                      }
                      if (LODWORD(v1110[1]) >= (unint64_t)HIDWORD(v1110[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v1110[0] + LODWORD(v1110[1])) = v701;
                      unsigned int v700 = ++LODWORD(v1110[1]);
                      uint64_t v698 = ++v699;
                      if (v571 == v699) {
                        goto LABEL_856;
                      }
                      continue;
                    }
                    break;
                  }
                  if (v585 != 3)
                  {
                    if (v585 != 1) {
                      goto LABEL_1406;
                    }
                    v707 = (_WORD *)v1088;
                    if ((unint64_t)(v1087 - v1088) <= 2)
                    {
                      v708 = "b $";
                      size_t v709 = 3;
                      goto LABEL_1011;
                    }
                    *(unsigned char *)(v1088 + 2) = 36;
                    _WORD *v707 = 8290;
                    uint64_t v730 = v1088 + 3;
LABEL_1048:
                    uint64_t v1088 = v730;
                    goto LABEL_1023;
                  }
                  v710 = *(llvm::Module **)(v701 + 40);
                  *(void *)&long long __dst = &v1114;
                  *((void *)&__dst + 1) = 0x800000000;
                  llvm::Module::getModuleFlagsMetadata(v710, (uint64_t)&__dst);
                  if (DWORD2(__dst))
                  {
                    uint64_t v711 = (uint64_t *)(__dst + 16);
                    uint64_t v712 = 24 * DWORD2(__dst);
                    while (1)
                    {
                      uint64_t v713 = *(void *)(*(v711 - 1) + 8);
                      if (*(void *)v713 == 25)
                      {
                        uint64_t v714 = *(void *)(v713 + 24);
                        uint64_t v715 = *(void *)(v713 + 32);
                        uint64_t v716 = *(void *)(v713 + 40);
                        int v717 = *(unsigned __int8 *)(v713 + 48);
                        BOOL v718 = v714 == 0x742D68636E617262 && v715 == 0x6E652D7465677261;
                        BOOL v719 = v718 && v716 == 0x6E656D6563726F66;
                        if (v719 && v717 == 116) {
                          break;
                        }
                      }
                      v711 += 3;
                      v712 -= 24;
                      if (!v712) {
                        goto LABEL_1012;
                      }
                    }
                    uint64_t v721 = *v711;
                  }
                  else
                  {
LABEL_1012:
                    uint64_t v721 = 0;
                  }
                  if ((long long *)__dst == &v1114)
                  {
                    if (v721)
                    {
LABEL_1015:
                      uint64_t v723 = *(void *)(v721 + 128);
                      if (v723)
                      {
                        uint64_t v724 = (void *)(v723 + 24);
                        if (*(_DWORD *)(v723 + 32) >= 0x41u) {
                          uint64_t v724 = (void *)*v724;
                        }
                        if (*v724)
                        {
                          v725 = (_DWORD *)v1088;
                          if ((unint64_t)(v1087 - v1088) > 5)
                          {
                            *(_WORD *)(v1088 + 4) = 2659;
                            _DWORD *v725 = 543781986;
                            v1088 += 6;
                          }
                          else
                          {
                            llvm::raw_ostream::write((llvm::raw_ostream *)&v1084, "bti c\n", 6uLL);
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    free((void *)__dst);
                    if (v721) {
                      goto LABEL_1015;
                    }
                  }
                  unsigned int v726 = (_WORD *)v1088;
                  if ((unint64_t)(v1087 - v1088) > 2)
                  {
                    *(unsigned char *)(v1088 + 2) = 36;
                    *unsigned int v726 = 8290;
                    v1088 += 3;
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v1084, "b $", 3uLL);
                  }
                  goto LABEL_1023;
                }
                uint64_t v595 = 0;
                int v596 = 0;
                while (2)
                {
                  int v1046 = v596;
                  uint64_t v597 = *(uint64_t *****)&v534[8 * v595];
                  v598 = *v597;
                  int v599 = *((unsigned __int8 *)v597 + 16);
                  unsigned int v600 = a1[12];
                  unsigned int v601 = *(llvm::ConstantInt **)v600;
                  unsigned int v602 = *((_DWORD *)v600 + 2);
                  LODWORD(v1110[1]) = v602 >> 8;
                  if (v602 >> 8 >= 0x41) {
                    operator new[]();
                  }
                  v1110[0] = 0;
                  v604 = llvm::ConstantInt::get(v601, (llvm::LLVMContext *)v1110, v584);
                  if (LODWORD(v1110[1]) >= 0x41 && v1110[0]) {
                    MEMORY[0x1D25D9CB0](v1110[0], 0x1000C8000313F17);
                  }
                  v1106 = v604;
                  int v605 = a1[12];
                  BOOL v606 = *(llvm::ConstantInt **)v605;
                  unint64_t v607 = *((unsigned int *)v605 + 2);
                  LODWORD(v1110[1]) = v607 >> 8;
                  if (v607 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v607 <= 0xFF) {
                    unint64_t v608 = 0;
                  }
                  else {
                    unint64_t v608 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v607) + 63);
                  }
                  v1110[0] = (void *)(v608 & v595);
                  uint64_t v609 = llvm::ConstantInt::get(v606, (llvm::LLVMContext *)v1110, v603);
                  uint64_t v534 = __s1f;
                  if (LODWORD(v1110[1]) >= 0x41 && v1110[0]) {
                    MEMORY[0x1D25D9CB0](v1110[0], 0x1000C8000313F17);
                  }
                  uint64_t v1107 = (uint64_t)v609;
                  uint64_t ElementPtr = (llvm::detail::IEEEFloat *)llvm::ConstantExpr::getGetElementPtr((uint64_t)__szf, v1011, (uint64_t)&v1106, 2, 1, 0, 0);
                  if (*(uint64_t ***)ElementPtr != *v598) {
                    uint64_t ElementPtr = sub_1CC56C0C0((llvm *)0x31, ElementPtr, (llvm::Constant *)*v598, 0);
                  }
                  int v611 = *(unsigned __int8 *)(*(void *)&__s1f[8 * v595] + 17);
                  if (!v599)
                  {
                    if (v611) {
                      char v612 = 0;
                    }
                    else {
                      char v612 = 7;
                    }
                    if ((*((unsigned char *)v598 + 23) & 0x10) != 0)
                    {
                      uint64_t v613 = ***v598;
                      uint64_t v614 = *(void *)(v613 + 152);
                      uint64_t v615 = *(unsigned int *)(v613 + 168);
                      if (v615)
                      {
                        LODWORD(v616) = (v615 - 1) & ((v598 >> 4) ^ (v598 >> 9));
                        v617 = (uint64_t ****)(v614 + 16 * v616);
                        v618 = *v617;
                        if (*v617 != v598)
                        {
                          int v619 = 1;
                          do
                          {
                            if (v618 == (uint64_t ***)-4096) {
                              goto LABEL_891;
                            }
                            int v620 = v616 + v619++;
                            uint64_t v616 = v620 & (v615 - 1);
                            v618 = *(uint64_t ****)(v614 + 16 * v616);
                          }
                          while (v618 != v598);
                          v617 = (uint64_t ****)(v614 + 16 * v616);
                        }
                      }
                      else
                      {
LABEL_891:
                        v617 = (uint64_t ****)(v614 + 16 * v615);
                      }
                      v630 = v617[1];
                      BOOL v633 = *v630;
                      uint64_t v632 = (char *)(v630 + 2);
                      uint64_t v631 = v633;
                    }
                    else
                    {
                      uint64_t v631 = 0;
                      uint64_t v632 = &byte_1CFBCE98E;
                    }
                    uint64_t v634 = (llvm::PointerType *)v598[3];
                    __int16 v1112 = 773;
                    v1110[0] = v632;
                    v1110[1] = v631;
                    v1111[0] = ".cfi_jt";
                    v635 = llvm::GlobalAlias::create(v634, 0, v612, (const char **)v1110, (unint64_t)ElementPtr, (uint64_t)*a1);
                    v636 = v635;
                    if (!v611)
                    {
                      v637 = (uint64_t **)*a1;
                      v1110[0] = v636;
                      sub_1CD1CF0D0(v637, "llvm.used", (const char *)9, (llvm::ConstantExpr **)v1110, 1);
                      goto LABEL_945;
                    }
                    int v638 = *((_DWORD *)v635 + 8);
                    unsigned int v639 = v638 & 0xFFFFFFCF | 0x10;
                    *((_DWORD *)v635 + 8) = v639;
                    if ((v638 & 0xFu) - 7 < 2)
                    {
LABEL_898:
                      *((_DWORD *)v636 + 8) = v639 | 0x4000;
                    }
                    else if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v635) & 1) == 0)
                    {
                      unsigned int v639 = *((_DWORD *)v636 + 8);
                      goto LABEL_898;
                    }
                    unint64_t v640 = a1[1];
                    if ((*((unsigned char *)v598 + 23) & 0x10) != 0)
                    {
                      uint64_t v641 = ***v598;
                      uint64_t v642 = *(void *)(v641 + 152);
                      uint64_t v643 = *(unsigned int *)(v641 + 168);
                      if (v643)
                      {
                        LODWORD(v644) = (v643 - 1) & ((v598 >> 4) ^ (v598 >> 9));
                        v645 = (uint64_t ****)(v642 + 16 * v644);
                        uint64_t v646 = *v645;
                        if (*v645 != v598)
                        {
                          int v647 = 1;
                          do
                          {
                            if (v646 == (uint64_t ***)-4096) {
                              goto LABEL_933;
                            }
                            int v648 = v644 + v647++;
                            uint64_t v644 = v648 & (v643 - 1);
                            uint64_t v646 = *(uint64_t ****)(v642 + 16 * v644);
                          }
                          while (v646 != v598);
                          v645 = (uint64_t ****)(v642 + 16 * v644);
                        }
                      }
                      else
                      {
LABEL_933:
                        v645 = (uint64_t ****)(v642 + 16 * v643);
                      }
                      v675 = ElementPtr;
                      uint64_t v676 = (unint64_t *)v645[1];
                      unint64_t v679 = *v676;
                      v677 = v676 + 2;
                      size_t v678 = v679;
                      if (v679 > 0x7FFFFFFFFFFFFFF7) {
                        goto LABEL_1388;
                      }
                      if (v678 >= 0x17)
                      {
                        uint64_t v681 = (v678 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v678 | 7) != 0x17) {
                          uint64_t v681 = v678 | 7;
                        }
                        uint64_t v682 = v681 + 1;
                        v680 = operator new(v681 + 1);
                        unint64_t v683 = v682 | 0x8000000000000000;
                        uint64_t v576 = v571;
                        v1111[0] = v683;
                        v1110[0] = v680;
                        v1110[1] = (void *)v678;
                      }
                      else
                      {
                        HIBYTE(v1111[0]) = v678;
                        v680 = v1110;
                        if (!v678) {
                          goto LABEL_942;
                        }
                      }
                      memmove(v680, v677, v678);
                    }
                    else
                    {
                      v675 = ElementPtr;
                      size_t v678 = 0;
                      HIBYTE(v1111[0]) = 0;
                      v680 = v1110;
                    }
LABEL_942:
                    *((unsigned char *)v680 + v678) = 0;
                    sub_1CD4F8CDC((uint64_t)v640 + 168, (const void **)v1110, (uint64_t)v1110);
                    if (SHIBYTE(v1111[0]) < 0) {
                      operator delete(v1110[0]);
                    }
                    uint64_t ElementPtr = v675;
LABEL_945:
                    if (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v598)) {
                      sub_1CC955D1C((unint64_t *)a1, (llvm::Type *)v598, (llvm::PoisonValue **)ElementPtr, 0);
                    }
                    else {
                      sub_1CC9564BC((uint64_t)v598, ElementPtr, 0);
                    }
LABEL_948:
                    uint64_t v595 = (v1046 + 1);
                    int v596 = v1046 + 1;
                    if (v576 == v595) {
                      goto LABEL_846;
                    }
                    continue;
                  }
                  break;
                }
                if (v611)
                {
                  uint64_t v621 = a1[1];
                  if ((*((unsigned char *)v598 + 23) & 0x10) == 0)
                  {
                    v649 = ElementPtr;
                    size_t v652 = 0;
                    HIBYTE(v1111[0]) = 0;
                    uint64_t v654 = v1110;
                    goto LABEL_915;
                  }
                  uint64_t v622 = ***v598;
                  uint64_t v623 = *(void *)(v622 + 152);
                  uint64_t v624 = *(unsigned int *)(v622 + 168);
                  if (v624)
                  {
                    LODWORD(v625) = (v624 - 1) & ((v598 >> 4) ^ (v598 >> 9));
                    int v626 = (uint64_t ****)(v623 + 16 * v625);
                    v627 = *v626;
                    if (*v626 != v598)
                    {
                      int v628 = 1;
                      do
                      {
                        if (v627 == (uint64_t ***)-4096) {
                          goto LABEL_906;
                        }
                        int v629 = v625 + v628++;
                        uint64_t v625 = v629 & (v624 - 1);
                        v627 = *(uint64_t ****)(v623 + 16 * v625);
                      }
                      while (v627 != v598);
                      int v626 = (uint64_t ****)(v623 + 16 * v625);
                    }
                  }
                  else
                  {
LABEL_906:
                    int v626 = (uint64_t ****)(v623 + 16 * v624);
                  }
                  v649 = ElementPtr;
                  v650 = (unint64_t *)v626[1];
                  unint64_t v653 = *v650;
                  v651 = v650 + 2;
                  size_t v652 = v653;
                  if (v653 > 0x7FFFFFFFFFFFFFF7) {
                    goto LABEL_1388;
                  }
                  if (v652 >= 0x17)
                  {
                    uint64_t v655 = (v652 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v652 | 7) != 0x17) {
                      uint64_t v655 = v652 | 7;
                    }
                    uint64_t v656 = v655 + 1;
                    uint64_t v654 = operator new(v655 + 1);
                    unint64_t v657 = v656 | 0x8000000000000000;
                    uint64_t v576 = v571;
                    v1111[0] = v657;
                    v1110[0] = v654;
                    v1110[1] = (void *)v652;
                  }
                  else
                  {
                    HIBYTE(v1111[0]) = v652;
                    uint64_t v654 = v1110;
                    if (!v652)
                    {
LABEL_915:
                      *((unsigned char *)v654 + v652) = 0;
                      sub_1CD4F8CDC((uint64_t)v621 + 144, (const void **)v1110, (uint64_t)v1110);
                      if (SHIBYTE(v1111[0]) < 0) {
                        operator delete(v1110[0]);
                      }
                      uint64_t ElementPtr = v649;
                      goto LABEL_918;
                    }
                  }
                  memmove(v654, v651, v652);
                  goto LABEL_915;
                }
LABEL_918:
                uint64_t v658 = (llvm::PointerType *)v598[3];
                char v659 = v598[4] & 0xF;
                __int16 v1112 = 257;
                uint64_t v660 = llvm::GlobalAlias::create(v658, 0, v659, (const char **)v1110, (unint64_t)ElementPtr, (uint64_t)*a1);
                v661 = v660;
                int v662 = v598[4] & 0x30;
                int v663 = *((_DWORD *)v660 + 8);
                unsigned int v664 = v663 & 0xFFFFFFCF | v662;
                *((_DWORD *)v660 + 8) = v664;
                if ((v663 & 0xFu) - 7 < 2)
                {
LABEL_952:
                  *((_DWORD *)v661 + 8) = v664 | 0x4000;
                }
                else if (v662 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v660) & 1) == 0)
                {
                  unsigned int v664 = *((_DWORD *)v661 + 8);
                  goto LABEL_952;
                }
                llvm::Value::takeName((int32x2_t ****)v661, (llvm::Value *)v598);
                if ((*((unsigned char *)v661 + 23) & 0x10) != 0)
                {
                  uint64_t v665 = **(void **)*v661;
                  uint64_t v666 = *(void *)(v665 + 152);
                  uint64_t v667 = *(unsigned int *)(v665 + 168);
                  if (v667)
                  {
                    LODWORD(v668) = (v667 - 1) & ((v661 >> 4) ^ (v661 >> 9));
                    unsigned int v669 = (unint64_t **)(v666 + 16 * v668);
                    uint64_t v670 = *v669;
                    if (*v669 != v661)
                    {
                      int v671 = 1;
                      do
                      {
                        if (v670 == (unint64_t *)-4096) {
                          goto LABEL_927;
                        }
                        int v672 = v668 + v671++;
                        uint64_t v668 = v672 & (v667 - 1);
                        uint64_t v670 = *(unint64_t **)(v666 + 16 * v668);
                      }
                      while (v670 != v661);
                      unsigned int v669 = (unint64_t **)(v666 + 16 * v668);
                    }
                  }
                  else
                  {
LABEL_927:
                    unsigned int v669 = (unint64_t **)(v666 + 16 * v667);
                  }
                  BOOL v673 = (void **)v669[1];
                  uint64_t v674 = *v673;
                  __int16 v1112 = 773;
                  v1110[0] = v673 + 2;
                  v1110[1] = v674;
                  v1111[0] = ".cfi";
                  llvm::Value::setNameImpl((llvm::Value *)v598, (const char **)v1110);
                  if (v598 && !*((unsigned char *)v598 + 16))
                  {
                    if ((*((unsigned char *)v598 + 23) & 0x10) == 0) {
                      goto LABEL_973;
                    }
                    uint64_t v684 = ***v598;
                    uint64_t v685 = *(void *)(v684 + 152);
                    uint64_t v686 = *(unsigned int *)(v684 + 168);
                    if (v686)
                    {
                      LODWORD(v687) = (v686 - 1) & ((v598 >> 4) ^ (v598 >> 9));
                      v688 = (uint64_t ****)(v685 + 16 * v687);
                      v689 = *v688;
                      if (*v688 != v598)
                      {
                        int v690 = 1;
                        do
                        {
                          if (v689 == (uint64_t ***)-4096) {
                            goto LABEL_965;
                          }
                          int v691 = v687 + v690++;
                          uint64_t v687 = v691 & (v686 - 1);
                          v689 = *(uint64_t ****)(v685 + 16 * v687);
                        }
                        while (v689 != v598);
                        v688 = (uint64_t ****)(v685 + 16 * v687);
                      }
                    }
                    else
                    {
LABEL_965:
                      v688 = (uint64_t ****)(v685 + 16 * v686);
                    }
                    v692 = v688[1];
                    unint64_t v695 = (unint64_t)*v692;
                    v693 = v692 + 2;
                    unint64_t v694 = v695;
                    if (v695 >= 5
                      && (*(_DWORD *)v693 == *(_DWORD *)"llvm." ? (BOOL v696 = v693[4] == aLlvm_1[4]) : (BOOL v696 = 0), v696))
                    {
                      *((_DWORD *)v598 + 8) |= 0x2000u;
                      int v697 = llvm::Function::lookupIntrinsicID(v693, v694);
                    }
                    else
                    {
LABEL_973:
                      int v697 = 0;
                      *((_DWORD *)v598 + 8) &= ~0x2000u;
                    }
                    *((_DWORD *)v598 + 9) = v697;
                  }
                }
                sub_1CC9564BC((uint64_t)v598, (llvm::Value *)v661, 1);
                if ((v598[4] & 0xFu) - 7 >= 2)
                {
                  *((_DWORD *)v598 + 8) = v598[4] & 0xFFFFFFCF | 0x10;
                  if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v598) & 1) == 0) {
                    *((_DWORD *)v598 + 8) |= 0x4000u;
                  }
                }
                goto LABEL_948;
              }
              v731 = (uint64_t **)*a1;
              v1110[1] = 0;
              v1110[0] = 0;
              LODWORD(v1111[0]) = 0;
              if (v535 == v534)
              {
                uint64_t v732 = 0;
                v733 = 0;
                int v734 = 0;
                goto LABEL_1165;
              }
              v1002 = v535;
              unint64_t v760 = 0;
              v761 = v534;
              unint64_t v762 = 0;
              LOBYTE(v734) = 0;
              unint64_t v763 = 0;
              v733 = 0;
              uint64_t v732 = 0;
              v1047 = (llvm::DataLayout *)(v731 + 34);
              BOOL v764 = v761;
              size_t __szg = (size_t)&v761[8 * v542];
              while (2)
              {
                *(void *)&long long __dst = *(void *)v764;
                uint64_t v765 = *(void *)__dst;
                if ((*(_WORD *)(*(void *)__dst + 34) & 0x3F) != 0) {
                  unsigned __int8 Alignment = (*(_WORD *)(*(void *)__dst + 34) & 0x3F) - 1;
                }
                else {
                  unsigned __int8 Alignment = llvm::DataLayout::getAlignment(v1047, *(llvm::Type **)(v765 + 24), 1);
                }
                if (v734 <= Alignment) {
                  int v734 = Alignment;
                }
                else {
                  int v734 = v734;
                }
                uint64_t v767 = (v760 + v762 + (1 << Alignment) - 1) & -(1 << Alignment);
                *sub_1CC959744((uint64_t)v1110, (uint64_t *)&__dst) = v767;
                if (v767)
                {
                  size_t v768 = llvm::ArrayType::get(a1[6], (llvm::Type *)(v767 - v760));
                  v770 = llvm::ConstantAggregateZero::get(v768, v769);
                  v771 = v770;
                  if (v733 < v763)
                  {
                    *(void *)v733 = v770;
                    v733 += 8;
                    goto LABEL_1124;
                  }
                  uint64_t v773 = (v733 - v732) >> 3;
                  unint64_t v774 = v773 + 1;
                  if ((unint64_t)(v773 + 1) >> 61) {
                    goto LABEL_1388;
                  }
                  if ((v763 - v732) >> 2 > v774) {
                    unint64_t v774 = (v763 - v732) >> 2;
                  }
                  if ((unint64_t)(v763 - v732) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v775 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v775 = v774;
                  }
                  if (v775)
                  {
                    if (v775 >> 61) {
                      goto LABEL_1392;
                    }
                    v776 = (char *)operator new(8 * v775);
                  }
                  else
                  {
                    v776 = 0;
                  }
                  int v777 = &v776[8 * v773];
                  *(void *)int v777 = v771;
                  v772 = v777 + 8;
                  if (v733 != v732)
                  {
                    do
                    {
                      uint64_t v778 = *((void *)v733 - 1);
                      v733 -= 8;
                      *((void *)v777 - 1) = v778;
                      v777 -= 8;
                    }
                    while (v733 != v732);
                    v733 = v732;
                  }
                  uint64_t v732 = v777;
                  unint64_t v763 = &v776[8 * v775];
                  if (v733) {
                    operator delete(v733);
                  }
                }
                else
                {
LABEL_1124:
                  v772 = v733;
                }
                uint64_t v779 = *(void *)(v765 - 32);
                if (v772 >= v763)
                {
                  uint64_t v780 = (v772 - v732) >> 3;
                  unint64_t v781 = v780 + 1;
                  if ((unint64_t)(v780 + 1) >> 61) {
                    goto LABEL_1388;
                  }
                  if ((v763 - v732) >> 2 > v781) {
                    unint64_t v781 = (v763 - v732) >> 2;
                  }
                  if ((unint64_t)(v763 - v732) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v782 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v782 = v781;
                  }
                  if (v782)
                  {
                    if (v782 >> 61) {
                      goto LABEL_1392;
                    }
                    v783 = (char *)operator new(8 * v782);
                  }
                  else
                  {
                    v783 = 0;
                  }
                  v784 = &v783[8 * v780];
                  *(void *)v784 = v779;
                  v733 = v784 + 8;
                  while (v772 != v732)
                  {
                    uint64_t v785 = *((void *)v772 - 1);
                    v772 -= 8;
                    *((void *)v784 - 1) = v785;
                    v784 -= 8;
                  }
                  unint64_t v763 = &v783[8 * v782];
                  if (v732) {
                    operator delete(v732);
                  }
                  uint64_t v732 = v784;
                }
                else
                {
                  *(void *)v772 = v779;
                  v733 = v772 + 8;
                }
                v786 = *(llvm::Type **)(v765 + 24);
                uint64_t v787 = sub_1CB83544C((uint64_t)v1047, (uint64_t)v786);
                BOOL v789 = v788 == 1;
                char v791 = llvm::DataLayout::getAlignment(v1047, v786, 1);
                if (v789) {
                unint64_t v792 = ((1 << v791) + ((unint64_t)(v787 + 7) >> 3) - 1) & -(1 << v791);
                }
                unint64_t v760 = v792 + v767;
                unint64_t v793 = (v792 - 1) | ((v792 - 1) >> 1) | (((v792 - 1) | ((v792 - 1) >> 1)) >> 2);
                unint64_t v794 = v793 | (v793 >> 4) | ((v793 | (v793 >> 4)) >> 8);
                unint64_t v795 = (v794 | (v794 >> 16) | ((v794 | (v794 >> 16)) >> 32)) - v792;
                unint64_t v796 = ((v792 + 31) & 0xFFFFFFFFFFFFFFE0) - v792;
                if (v795 + 1 <= 0x20) {
                  unint64_t v762 = v795 + 1;
                }
                else {
                  unint64_t v762 = v796;
                }
                v764 += 8;
                int v407 = (uint64_t *)a1;
                v532 = (char *)v1016;
                if (v764 != (char *)__szg) {
                  continue;
                }
                break;
              }
              v731 = (uint64_t **)*a1;
              uint64_t v534 = __s1f;
              int v535 = v1002;
LABEL_1165:
              TypeForElements = (llvm::PoisonValue *)llvm::ConstantStruct::getTypeForElements(*v731, (uint64_t)v732, (v733 - v732) >> 3, 0);
              v798 = (llvm::PointerType **)llvm::ConstantStruct::get(TypeForElements, (llvm::Type *)v732, (v733 - v732) >> 3);
              v799 = (char *)operator new(0x78uLL);
              *((_DWORD *)v799 + 13) = *((_DWORD *)v799 + 13) & 0x38000000 | 1;
              *(void *)v799 = 0;
              *((void *)v799 + 1) = 0;
              *((void *)v799 + 2) = 0;
              *((void *)v799 + 3) = v799 + 32;
              uint64_t v800 = *v407;
              v801 = *v798;
              LOWORD(v1115) = 257;
              llvm::GlobalVariable::GlobalVariable((unint64_t *)v799 + 4, v800, v801, 1, 8, (unint64_t)v798, (const char **)&__dst, 0, 0, 0, 0);
              *((_DWORD *)v799 + 16) = *((_DWORD *)v799 + 16) & 0xFFC0FFFF | ((v734 << 16) + 0x10000);
              v1048 = (uint64_t *)v798;
              v1003 = *v798;
              uint64_t v500 = v1023;
              __szh = (uint64_t *)(v799 + 32);
              sub_1CC95A62C((uint64_t)v407, v1023, v1010, (llvm::detail::IEEEFloat *)(v799 + 32), (uint64_t)v1110);
              if (v535 != v534)
              {
                uint64_t v803 = **(llvm::Value ***)v534;
                uint64_t v1107 = 0;
                v1106 = 0;
                uint64_t v804 = a1[9];
                v805 = *(llvm::ConstantInt **)v804;
                unsigned int v806 = *((_DWORD *)v804 + 2);
                DWORD2(__dst) = v806 >> 8;
                if (v806 >> 8 >= 0x41) {
                  operator new[]();
                }
                *(void *)&long long __dst = 0;
                v808 = llvm::ConstantInt::get(v805, (llvm::LLVMContext *)&__dst, v802);
                if (DWORD2(__dst) >= 0x41 && (void)__dst) {
                  MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
                }
                v1106 = v808;
                uint64_t v809 = a1[9];
                int v810 = *(llvm::ConstantInt **)v809;
                unint64_t v811 = *((unsigned int *)v809 + 2);
                DWORD2(__dst) = v811 >> 8;
                if (v811 >> 8 > 0x40) {
                  operator new[]();
                }
                *(void *)&long long __dst = 0;
                v812 = llvm::ConstantInt::get(v810, (llvm::LLVMContext *)&__dst, v807);
                if (DWORD2(__dst) >= 0x41 && (void)__dst) {
                  MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
                }
                uint64_t v1107 = (uint64_t)v812;
                unint64_t v813 = llvm::ConstantExpr::getGetElementPtr(*v1048, __szh, (uint64_t)&v1106, 2, 0, 0, 0);
                v814 = (llvm::PointerType *)**((void **)v1003 + 2);
                char v815 = *((_DWORD *)v803 + 8) & 0xF;
                LOWORD(v1115) = 257;
                v816 = llvm::GlobalAlias::create(v814, 0, v815, (const char **)&__dst, v813, (uint64_t)*a1);
                uint64_t v817 = v816;
                int v818 = *((_DWORD *)v803 + 8) & 0x30;
                int v819 = *((_DWORD *)v816 + 8);
                unsigned int v820 = v819 & 0xFFFFFFCF | v818;
                *((_DWORD *)v816 + 8) = v820;
                if ((v819 & 0xFu) - 7 < 2)
                {
LABEL_1175:
                  *((_DWORD *)v817 + 8) = v820 | 0x4000;
                }
                else if (v818 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v816) & 1) == 0)
                {
                  unsigned int v820 = *((_DWORD *)v817 + 8);
                  goto LABEL_1175;
                }
                llvm::Value::takeName((int32x2_t ****)v817, v803);
                llvm::Value::doRAUW(v803, (llvm::Value *)v817, (llvm::Value *)1);
                llvm::GlobalVariable::eraseFromParent(v803);
              }
              MEMORY[0x1D25D9CD0](v1110[0], 8);
              int v407 = (uint64_t *)a1;
              if (v732) {
                operator delete(v732);
              }
LABEL_822:
              if (v534) {
                operator delete(v534);
              }
              if (v1064)
              {
                v1065 = v1064;
                operator delete(v1064);
              }
              *(void *)&long long __dst = &v1063;
              sub_1CBF7EDF0((void ***)&__dst);
              MEMORY[0x1D25D9CD0](v1066[0], 8);
              v560 = (uint64_t *)v1068;
              if (v1068)
              {
                v561 = v1069;
                v562 = v1068;
                if (v1069 != v1068)
                {
                  do
                  {
                    v563 = v561 - 3;
                    sub_1CB833A08((uint64_t)(v561 - 3), (void *)*(v561 - 2));
                    v561 = v563;
                  }
                  while (v563 != v560);
                  v562 = v1068;
                }
                v1069 = v560;
                operator delete(v562);
              }
              MEMORY[0x1D25D9CD0](v1071[0], 8);
              if (v1019) {
                operator delete(v1019);
              }
              if (v1013) {
                operator delete(v1013);
              }
              if (v500) {
                operator delete(v500);
              }
              uint64_t v412 = v1008 + 16;
              if (v1008 + 16 != v532) {
                continue;
              }
LABEL_1184:
              uint64_t v821 = v407[17];
              v822 = (void *)v407[18];
              if ((uint64_t)v822 - v821 < 1)
              {
LABEL_1188:
                sub_1CC95B780(v821, v822, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v822 - v821) >> 3), 0, 0, v430);
              }
              else
              {
                uint64_t v823 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                unint64_t v824 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v822 - v821) >> 3);
                while (1)
                {
                  v825 = operator new(56 * v824, v823);
                  if (v825) {
                    break;
                  }
                  BOOL v503 = v824 > 1;
                  v824 >>= 1;
                  if (!v503) {
                    goto LABEL_1188;
                  }
                }
                long long v826 = v825;
                sub_1CC95B780(v821, v822, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v822 - v821) >> 3), (uint64_t)v825, v824, v430);
                operator delete(v826);
              }
              uint64_t v827 = v407[17];
              uint64_t v828 = v407[18] - v827;
              if (v828)
              {
                unint64_t v829 = v828 / 56;
                if (!(v829 >> 61))
                {
                  size_t v830 = 8 * v829;
                  int v831 = operator new(8 * v829);
                  bzero(v831, v830);
                  uint64_t v1118 = 0;
                  long long v1117 = 0u;
                  long long v1116 = 0u;
                  long long v1115 = 0u;
                  long long v1114 = 0u;
                  long long __dst = 0u;
                  LOBYTE(v1106) = 0;
                  llvm::lowertypetests::ByteArrayBuilder::allocate((unint64_t *)&__dst, (void *)v827, *(void *)(v827 + 24), (unint64_t *)v831, &v1106);
                  char v833 = *(llvm::ValueAsMetadata **)(v827 + 40);
                  uint64_t v834 = a1[6];
                  uint64_t v835 = *(llvm::ConstantInt **)v834;
                  unint64_t v836 = *((unsigned int *)v834 + 2);
                  LODWORD(v1110[1]) = v836 >> 8;
                  if (v836 >> 8 <= 0x40)
                  {
                    if (v836 <= 0xFF) {
                      LOBYTE(v837) = 0;
                    }
                    else {
                      unint64_t v837 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v836) + 63);
                    }
                    v1110[0] = (void *)(v837 & v1106);
                    v838 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(v835, (llvm::LLVMContext *)v1110, v832);
                    if (LODWORD(v1110[1]) >= 0x41 && v1110[0]) {
                      MEMORY[0x1D25D9CB0](v1110[0], 0x1000C8000313F17);
                    }
                    uint64_t v839 = sub_1CC56C0C0((llvm *)0x30, v838, a1[7], 0);
                    llvm::Value::doRAUW(v833, v839, (llvm::Value *)1);
                    llvm::GlobalVariable::eraseFromParent(*(llvm::GlobalVariable **)(v827 + 40));
                  }
                  operator new[]();
                }
LABEL_1388:
                abort();
              }
              uint64_t v1118 = 0;
              long long v1117 = 0u;
              long long v1116 = 0u;
              long long v1115 = 0u;
              long long v1114 = 0u;
              long long __dst = 0u;
              uint64_t v840 = llvm::ArrayType::get((llvm::ArrayType *)(**(void **)*v407 + 1912), 0);
              v841 = (uint64_t *)llvm::ConstantDataSequential::getImpl(0, 0, v840);
              uint64_t v842 = (char *)operator new(0x78uLL);
              v843 = (uint64_t *)(v842 + 32);
              *((_DWORD *)v842 + 13) = *((_DWORD *)v842 + 13) & 0x38000000 | 1;
              *(void *)uint64_t v842 = 0;
              *((void *)v842 + 1) = 0;
              *((void *)v842 + 2) = 0;
              *((void *)v842 + 3) = v842 + 32;
              uint64_t v844 = *v407;
              v845 = (llvm::PointerType *)*v841;
              __int16 v1112 = 257;
              llvm::GlobalVariable::GlobalVariable((unint64_t *)v842 + 4, v844, v845, 1, 8, (unint64_t)v841, (const char **)v1110, 0, 0, 0, 0);
              uint64_t v847 = v407[17];
              if (v407[18] != v847)
              {
                uint64_t v1107 = 0;
                v1106 = 0;
                uint64_t v848 = v407[12];
                v849 = *(llvm::ConstantInt **)v848;
                unsigned int v850 = *(_DWORD *)(v848 + 8);
                LODWORD(v1110[1]) = v850 >> 8;
                if (v850 >> 8 < 0x41)
                {
                  v1110[0] = 0;
                  v852 = llvm::ConstantInt::get(v849, (llvm::LLVMContext *)v1110, v846);
                  if (LODWORD(v1110[1]) >= 0x41 && v1110[0]) {
                    MEMORY[0x1D25D9CB0](v1110[0], 0x1000C8000313F17);
                  }
                  v1106 = v852;
                  v853 = a1[12];
                  v854 = *(llvm::ConstantInt **)v853;
                  unint64_t v855 = *((unsigned int *)v853 + 2);
                  LODWORD(v1110[1]) = v855 >> 8;
                  if (v855 >> 8 <= 0x40)
                  {
                    if (v855 <= 0xFF) {
                      unint64_t v856 = 0;
                    }
                    else {
                      unint64_t v856 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v855) + 63);
                    }
                    v1110[0] = (void *)(v856 & MEMORY[0]);
                    v857 = llvm::ConstantInt::get(v854, (llvm::LLVMContext *)v1110, v851);
                    if (LODWORD(v1110[1]) >= 0x41 && v1110[0]) {
                      MEMORY[0x1D25D9CB0](v1110[0], 0x1000C8000313F17);
                    }
                    uint64_t v1107 = (uint64_t)v857;
                    unint64_t v858 = llvm::ConstantExpr::getGetElementPtr(*v841, v843, (uint64_t)&v1106, 2, 1, 0, 0);
                    v859 = a1[6];
                    v1110[0] = "bits";
                    __int16 v1112 = 259;
                    v860 = llvm::GlobalAlias::create(v859, 0, 8, (const char **)v1110, v858, (uint64_t)*a1);
                    llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(v847 + 32), (llvm::Value *)v860, (llvm::Value *)1);
                    llvm::GlobalVariable::eraseFromParent(*(llvm::GlobalVariable **)(v847 + 32));
                  }
                  operator new[]();
                }
                operator new[]();
              }
              if ((void)__dst)
              {
                *((void *)&__dst + 1) = __dst;
                operator delete((void *)__dst);
              }
              if (a1[1])
              {
                v861 = (uint64_t **)*a1;
                *(void *)&long long __dst = "aliases";
                LOWORD(v1115) = 259;
                uint64_t v862 = llvm::Module::getNamedMetadata((llvm::Module *)v861, (const char **)&__dst);
                if (v862)
                {
                  uint64_t v863 = v862;
                  uint64_t v864 = *(void *)(v862 + 48);
                  v865 = (llvm::DataLayout *)*(unsigned int *)(v864 + 8);
                  if (v865)
                  {
                    v866 = 0;
                    v1049 = (llvm::DataLayout *)*(unsigned int *)(v864 + 8);
                    uint64_t __s1g = v862;
                    do
                    {
                      uint64_t v867 = *(void *)(**(void **)(v863 + 48) + 8 * (void)v866);
                      v868 = (void *)(v867 - 8 * *(unsigned int *)(v867 + 8));
                      v869 = *(void **)(*v868 + 8);
                      unint64_t v872 = *v869;
                      v870 = (unsigned __int8 *)(v869 + 3);
                      unint64_t v871 = v872;
                      v873 = *(void ***)(v868[1] + 8);
                      v876 = *v873;
                      v874 = v873 + 3;
                      unint64_t v875 = (unint64_t)v876;
                      v1110[0] = v874;
                      v1110[1] = v876;
                      uint64_t v877 = v1054;
                      int v878 = v1056;
                      if (sub_1CC95670C(v1054, v1056, (uint64_t)v1110, &__dst))
                      {
                        *(void *)&long long __dst = 0;
                        if (sub_1CC95670C(v877, v878, (uint64_t)v1110, &__dst))
                        {
                          if (*(_DWORD *)(__dst + 16)) {
                            goto LABEL_1229;
                          }
                        }
                        else
                        {
                          v879 = sub_1CC95681C((uint64_t)&v1054, (uint64_t)v1110, (void *)__dst);
                          *(_OWORD *)v879 = *(_OWORD *)v1110;
                          v879[2] = 0;
                          v879[3] = 0;
                        }
                        uint64_t v880 = sub_1CC196FC4(*((uint64_t **)*a1 + 14), (unsigned __int8 *)v874, v875);
                        if (v880 && *(unsigned char *)(v880 + 16) == 1)
                        {
                          uint64_t v881 = *(unsigned int *)(v867 + 8);
                          v882 = *(void **)(*(void *)(v867 - 8 * v881 + 16) + 128);
                          if (v882) {
                            BOOL v883 = *((unsigned char *)v882 + 16) == 16;
                          }
                          else {
                            BOOL v883 = 0;
                          }
                          if (!v883)
                          {
                            v882 = llvm::Constant::getAggregateElement((llvm::Constant *)v882, 0);
                            uint64_t v881 = *(unsigned int *)(v867 + 8);
                          }
                          uint64_t v884 = -v881;
                          v887 = (int *)v882[3];
                          v885 = (int *)(v882 + 3);
                          v886 = v887;
                          if (v885[2] < 0x41) {
                            v886 = v885;
                          }
                          int v888 = *v886;
                          v889 = *(void **)(*(void *)(v867 + 8 * v884 + 24) + 128);
                          if (v889) {
                            BOOL v890 = *((unsigned char *)v889 + 16) == 16;
                          }
                          else {
                            BOOL v890 = 0;
                          }
                          if (!v890) {
                            v889 = llvm::Constant::getAggregateElement((llvm::Constant *)v889, 0);
                          }
                          v893 = (uint64_t *)v889[3];
                          v891 = v889 + 3;
                          v892 = v893;
                          if (*((_DWORD *)v891 + 2) < 0x41u) {
                            v892 = v891;
                          }
                          uint64_t v894 = *v892;
                          LOWORD(v1115) = 257;
                          uint64_t v895 = sub_1CC196FC4(*((uint64_t **)*a1 + 14), (unsigned __int8 *)v874, v875);
                          if (v895)
                          {
                            if (*(unsigned char *)(v895 + 16) == 1) {
                              v897 = (const llvm::Twine *)v895;
                            }
                            else {
                              v897 = 0;
                            }
                          }
                          else
                          {
                            v897 = 0;
                          }
                          v898 = llvm::GlobalAlias::create((const char **)&__dst, v897, v896);
                          v899 = v898;
                          int v900 = v898[4] & 0xF;
                          unsigned int v901 = v898[4] & 0xFFFFFFCF | (16 * (v888 & 3));
                          *((_DWORD *)v898 + 8) = v901;
                          if ((v900 - 7) < 2)
                          {
LABEL_1292:
                            *((_DWORD *)v899 + 8) = v901 | 0x4000;
                          }
                          else if (16 * (v888 & 3) {
                                 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v898) & 1) == 0)
                          }
                          {
                            unsigned int v901 = *((_DWORD *)v899 + 8);
                            goto LABEL_1292;
                          }
                          if (v894)
                          {
                            int v902 = *((_DWORD *)v899 + 8);
                            *((_DWORD *)v899 + 8) = v902 & 0xFFFFFFF0 | 4;
                            if ((v902 & 0x30) != 0
                              && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v899) & 1) == 0)
                            {
                              *((_DWORD *)v899 + 8) |= 0x4000u;
                            }
                          }
                          uint64_t v903 = *((void *)*a1 + 14);
                          unint64_t v904 = *(unsigned int *)(v903 + 32);
                          if (v904 <= 1) {
                            unint64_t v905 = 1;
                          }
                          else {
                            unint64_t v905 = v904;
                          }
                          if (v871 < v905) {
                            unint64_t v905 = v871;
                          }
                          if (v871 <= v904) {
                            unint64_t v905 = v871;
                          }
                          if ((v904 & 0x80000000) == 0) {
                            size_t v906 = v905;
                          }
                          else {
                            size_t v906 = v871;
                          }
                          __szunint64_t i = *((void *)*a1 + 14);
                          v1020 = (llvm::Value *)v899;
                          size_t v1024 = *(unsigned int *)(v903 + 8);
                          if (!v1024) {
                            goto LABEL_1281;
                          }
                          int v907 = 0;
                          if (v906)
                          {
                            size_t v908 = v906;
                            v909 = v870;
                            do
                            {
                              int v910 = *v909++;
                              int v907 = 33 * v907 + v910;
                              --v908;
                            }
                            while (v908);
                          }
                          uint64_t v911 = (v1024 - 1);
                          uint64_t v912 = *(void *)__szi;
                          uint64_t v913 = *(void *)__szi + 8 * v1024 + 8;
                          int v914 = 1;
                          int v915 = v907;
                          while (1)
                          {
                            uint64_t v916 = v915 & v911;
                            v917 = *(void **)(v912 + 8 * v916);
                            if (v917 != (void *)-8)
                            {
                              if (!v917) {
                                goto LABEL_1281;
                              }
                              if (*(_DWORD *)(v913 + 4 * v916) == v907 && v906 == *v917)
                              {
                                if (!v906) {
                                  break;
                                }
                                uint64_t v918 = v911;
                                uint64_t v919 = v913;
                                int v920 = memcmp(v870, (char *)v917 + *(unsigned int *)(__szi + 20), v906);
                                uint64_t v913 = v919;
                                uint64_t v863 = __s1g;
                                uint64_t v911 = v918;
                                v865 = v1049;
                                if (!v920) {
                                  break;
                                }
                              }
                            }
                            int v915 = v914 + v916;
                            ++v914;
                          }
                          if (v916 == -1
                            || (int)v916 == v1024
                            || (v921 = *(llvm::Value **)(*(void *)(v912 + 8 * (int)v916) + 8)) == 0
                            || *((unsigned char *)v921 + 16))
                          {
LABEL_1281:
                            LOWORD(v1115) = 261;
                            *(void *)&long long __dst = v870;
                            *((void *)&__dst + 1) = v871;
                            llvm::Value::setNameImpl(v1020, (const char **)&__dst);
                            if (v1020 && !*((unsigned char *)v1020 + 16))
                            {
                              if ((*((unsigned char *)v1020 + 23) & 0x10) == 0) {
                                goto LABEL_1303;
                              }
                              uint64_t v922 = ***(void ***)v1020;
                              uint64_t v923 = *(void *)(v922 + 152);
                              uint64_t v924 = *(unsigned int *)(v922 + 168);
                              if (v924)
                              {
                                LODWORD(v925) = (v924 - 1) & ((v1020 >> 4) ^ (v1020 >> 9));
                                v926 = (llvm::Value **)(v923 + 16 * v925);
                                v927 = *v926;
                                if (*v926 != v1020)
                                {
                                  int v928 = 1;
                                  do
                                  {
                                    if (v927 == (llvm::Value *)-4096) {
                                      goto LABEL_1295;
                                    }
                                    int v929 = v925 + v928++;
                                    uint64_t v925 = v929 & (v924 - 1);
                                    v927 = *(llvm::Value **)(v923 + 16 * v925);
                                  }
                                  while (v927 != v1020);
                                  v926 = (llvm::Value **)(v923 + 16 * v925);
                                }
                              }
                              else
                              {
LABEL_1295:
                                v926 = (llvm::Value **)(v923 + 16 * v924);
                              }
                              v930 = v926[1];
                              unint64_t v933 = *(void *)v930;
                              v931 = (char *)v930 + 16;
                              unint64_t v932 = v933;
                              if (v933 >= 5
                                && (*(_DWORD *)v931 == *(_DWORD *)"llvm." ? (BOOL v934 = v931[4] == aLlvm_1[4]) : (BOOL v934 = 0),
                                    v934))
                              {
                                *((_DWORD *)v1020 + 8) |= 0x2000u;
                                int v935 = llvm::Function::lookupIntrinsicID(v931, v932);
                              }
                              else
                              {
LABEL_1303:
                                int v935 = 0;
                                *((_DWORD *)v1020 + 8) &= ~0x2000u;
                              }
                              *((_DWORD *)v1020 + 9) = v935;
                              v865 = v1049;
                              uint64_t v863 = __s1g;
                            }
                          }
                          else
                          {
                            llvm::Value::takeName((int32x2_t ****)v1020, v921);
                            llvm::Value::doRAUW(v921, v1020, (llvm::Value *)1);
                            llvm::Function::eraseFromParent(v921);
                          }
                        }
                      }
LABEL_1229:
                      v866 = (llvm::DataLayout *)((char *)v866 + 1);
                    }
                    while (v866 != v865);
                  }
                }
                if (a1[1])
                {
                  v936 = (uint64_t **)*a1;
                  *(void *)&long long __dst = "symvers";
                  LOWORD(v1115) = 259;
                  uint64_t v937 = llvm::Module::getNamedMetadata((llvm::Module *)v936, (const char **)&__dst);
                  if (v937)
                  {
                    uint64_t v938 = v937;
                    uint64_t v939 = *(unsigned int *)(*(void *)(v937 + 48) + 8);
                    if (v939)
                    {
                      uint64_t v940 = 0;
                      uint64_t v941 = v1054;
                      uint64_t v942 = 8 * v939;
                      int v943 = v1056;
                      do
                      {
                        uint64_t v944 = *(void *)(**(void **)(v938 + 48) + v940);
                        v945 = (void *)(v944 - 8 * *(unsigned int *)(v944 + 8));
                        v946 = *(uint64_t **)(*v945 + 8);
                        uint64_t v949 = *v946;
                        v947 = v946 + 3;
                        uint64_t v948 = v949;
                        v1075 = v947;
                        uint64_t v1076 = v949;
                        v950 = *(uint64_t **)(v945[1] + 8);
                        uint64_t v951 = *v950;
                        if (sub_1CC95670C(v941, v943, (uint64_t)&v1075, &__dst))
                        {
                          v952 = v950 + 3;
                          v953 = (uint64_t **)*a1;
                          v1106 = ".symver ";
                          v1108[0] = v947;
                          v1108[1] = v948;
                          __int16 v1109 = 1283;
                          v1110[0] = &v1106;
                          v1111[0] = ", ";
                          __int16 v1112 = 770;
                          *(void *)&long long __dst = v1110;
                          *(void *)&long long v1114 = v952;
                          *((void *)&v1114 + 1) = v951;
                          LOWORD(v1115) = 1282;
                          llvm::Twine::str((llvm::Twine *)&__dst, &v1084);
                          v954 = v1086 >= 0
                               ? (const std::string::value_type *)&v1084
                               : (const std::string::value_type *)v1084;
                          std::string::size_type v955 = v1086 >= 0 ? HIBYTE(v1086) & 0x7F : v1085;
                          LLVMAppendModuleInlineAsm_0((uint64_t)v953, v954, v955);
                          if (SHIBYTE(v1086) < 0) {
                            operator delete(v1084);
                          }
                        }
                        v940 += 8;
                      }
                      while (v942 != v940);
                    }
                  }
                }
              }
              BOOL v19 = 1;
              if (v1005) {
                operator delete(v1005);
              }
LABEL_1322:
              MEMORY[0x1D25D9CD0](v1052[0], 8);
              MEMORY[0x1D25D9CD0](v1054, 8);
              if (v1095 != v1097) {
                free(v1095);
              }
              v956 = v1057;
              if (v1059)
              {
                uint64_t v957 = 40 * v1059;
                v958 = v1057 + 3;
                do
                {
                  if ((*(v958 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    v959 = (void *)*(v958 - 1);
                    if (v959)
                    {
                      void *v958 = v959;
                      operator delete(v959);
                    }
                  }
                  v958 += 5;
                  v957 -= 40;
                }
                while (v957);
                v956 = v1057;
              }
              MEMORY[0x1D25D9CD0](v956, 8);
              if (v1101)
              {
                v960 = (uint64_t *)v1100;
                uint64_t v961 = 8 * v1101;
                do
                {
                  uint64_t v962 = *v960++;
                  MEMORY[0x1D25D9CD0](v962, 8);
                  v961 -= 8;
                }
                while (v961);
              }
              v963 = (uint64_t *)v1103;
              if (v1104)
              {
                uint64_t v993 = 16 * v1104;
                do
                {
                  uint64_t v994 = *v963;
                  v963 += 2;
                  MEMORY[0x1D25D9CD0](v994, 8);
                  v993 -= 16;
                }
                while (v993);
                v963 = (uint64_t *)v1103;
              }
              if (v963 != v1105) {
                free(v963);
              }
              if (v1100 != v1102) {
                free(v1100);
              }
              sub_1CBB0D544(v1061);
              return v19;
            }
            while (2)
            {
              uint64_t v504 = *(void *)v495;
              unint64_t v505 = v1069;
              if ((unint64_t)v1069 < v1070)
              {
                v1069[2] = 0;
                v505[1] = 0;
                *unint64_t v505 = (uint64_t)(v505 + 1);
                uint64_t v506 = v505 + 3;
                goto LABEL_782;
              }
              v507 = (uint64_t *)v1068;
              unint64_t v508 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1069 - (unsigned char *)v1068) >> 3);
              unint64_t v509 = v508 + 1;
              if (v508 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_1388;
              }
              if (0x5555555555555556 * ((uint64_t)(v1070 - (void)v1068) >> 3) > v509) {
                unint64_t v509 = 0x5555555555555556 * ((uint64_t)(v1070 - (void)v1068) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1070 - (void)v1068) >> 3) >= 0x555555555555555) {
                unint64_t v510 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v510 = v509;
              }
              if (v510)
              {
                if (v510 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_1392;
                }
                v511 = (char *)operator new(24 * v510);
              }
              else
              {
                v511 = 0;
              }
              v512 = &v511[24 * v508];
              unsigned int v513 = &v511[24 * v510];
              *((void *)v512 + 2) = 0;
              *((void *)v512 + 1) = 0;
              *(void *)v512 = v512 + 8;
              uint64_t v506 = (uint64_t *)(v512 + 24);
              if (v505 == v507)
              {
                v1068 = &v511[24 * v508];
                v1069 = (uint64_t *)(v512 + 24);
                unint64_t v1070 = (unint64_t)v513;
                if (v505) {
                  goto LABEL_781;
                }
              }
              else
              {
                uint64_t v514 = 0;
                do
                {
                  int v515 = &v512[v514 * 8];
                  *((void *)v515 - 3) = v505[v514 - 3];
                  uint64_t v516 = &v505[v514 - 2];
                  uint64_t v517 = *v516;
                  *(void *)&v512[v514 * 8 - 16] = *v516;
                  uint64_t v518 = (uint64_t)&v512[v514 * 8 - 16];
                  uint64_t v519 = v505[v514 - 1];
                  *((void *)v515 - 1) = v519;
                  if (v519)
                  {
                    *(void *)(v517 + 16) = v518;
                    v505[v514 - 3] = (uint64_t)v516;
                    *uint64_t v516 = 0;
                    v505[v514 - 1] = 0;
                  }
                  else
                  {
                    *((void *)v515 - 3) = v518;
                  }
                  v514 -= 3;
                }
                while (&v505[v514] != v507);
                unint64_t v505 = (uint64_t *)v1068;
                uint64_t v520 = v1069;
                v1068 = &v512[v514 * 8];
                v1069 = (uint64_t *)(v512 + 24);
                unint64_t v1070 = (unint64_t)v513;
                if (v520 != v505)
                {
                  do
                  {
                    unsigned int v521 = v520 - 3;
                    sub_1CB833A08((uint64_t)(v520 - 3), (void *)*(v520 - 2));
                    uint64_t v520 = v521;
                  }
                  while (v521 != v505);
                }
                if (v505) {
LABEL_781:
                }
                  operator delete(v505);
              }
LABEL_782:
              v1069 = v506;
              uint64_t v522 = *(void *)(v504 + 16);
              if (v522)
              {
                unint64_t v523 = (uint64_t *)(v504 + 24);
                uint64_t v524 = 8 * v522;
                do
                {
                  uint64_t v525 = *v523++;
                  *(void *)&long long __dst = v525;
                  v526 = sub_1CC959744((uint64_t)v1066, (uint64_t *)&__dst);
                  sub_1CD3CFB98((uint64_t **)v506 - 3, (unint64_t *)v526, (uint64_t **)v526);
                  v524 -= 8;
                }
                while (v524);
              }
              uint64_t v495 = (llvm::Value *)((char *)v495 + 8);
              if (v495 == (llvm::Value *)((char *)v1019 + 8 * __s1e)) {
                goto LABEL_755;
              }
              continue;
            }
          }
          break;
        }
        int v437 = 0;
        v436 = 0;
        v438 = 0;
        uint64_t v435 = 0;
        uint64_t v434 = 0;
        v1044 = 0;
        uint64_t v433 = 0;
        uint64_t v439 = 0;
        __s1d = 0;
        unint64_t v440 = v431 + 32;
        while (2)
        {
          uint64_t v441 = *(void *)(v440 + 16);
          if ((v441 & 3) != 0)
          {
            if ((*(void *)(v440 + 16) & 3) == 1)
            {
              unint64_t v442 = v441 & 0xFFFFFFFFFFFFFFFCLL;
              if (v439 < __s1d)
              {
                *v439++ = v442;
                goto LABEL_679;
              }
              size_t __szc = (size_t)v438;
              uint64_t v446 = v439 - v433;
              unint64_t v447 = v446 + 1;
              if ((unint64_t)(v446 + 1) >> 61) {
                goto LABEL_1388;
              }
              if (((char *)__s1d - (char *)v433) >> 2 > v447) {
                unint64_t v447 = ((char *)__s1d - (char *)v433) >> 2;
              }
              if ((unint64_t)((char *)__s1d - (char *)v433) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v448 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v448 = v447;
              }
              if (v448)
              {
                if (v448 >> 61) {
                  goto LABEL_1392;
                }
                unint64_t v449 = v435;
                int v450 = (char *)operator new(8 * v448);
                uint64_t v435 = v449;
              }
              else
              {
                int v450 = 0;
              }
              unint64_t v462 = (uint64_t *)&v450[8 * v446];
              *unint64_t v462 = v442;
              int v432 = v462 + 1;
              while (v439 != v433)
              {
                uint64_t v463 = *--v439;
                *--unint64_t v462 = v463;
              }
              __s1d = (uint64_t *)&v450[8 * v448];
              if (v433)
              {
                unsigned int v464 = v435;
                operator delete(v433);
                uint64_t v435 = v464;
              }
              uint64_t v433 = v462;
              v438 = (uint64_t *)__szc;
            }
            else
            {
              unint64_t v445 = v441 & 0xFFFFFFFFFFFFFFFCLL;
              if (v436 >= v438)
              {
                uint64_t v456 = v436 - v437;
                unint64_t v457 = v456 + 1;
                if ((unint64_t)(v456 + 1) >> 61) {
                  goto LABEL_1388;
                }
                if (((char *)v438 - (char *)v437) >> 2 > v457) {
                  unint64_t v457 = ((char *)v438 - (char *)v437) >> 2;
                }
                if ((unint64_t)((char *)v438 - (char *)v437) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v458 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v458 = v457;
                }
                size_t v1022 = (size_t)v433;
                if (v458)
                {
                  if (v458 >> 61) {
                    goto LABEL_1392;
                  }
                  unsigned int v459 = v437;
                  int v460 = v435;
                  int v461 = (char *)operator new(8 * v458);
                  uint64_t v435 = v460;
                  int v437 = v459;
                }
                else
                {
                  int v461 = 0;
                }
                v468 = (uint64_t *)&v461[8 * v456];
                uint64_t *v468 = v445;
                v469 = v468 + 1;
                while (v436 != v437)
                {
                  uint64_t v470 = *--v436;
                  *--v468 = v470;
                }
                v438 = (uint64_t *)&v461[8 * v458];
                if (v437)
                {
                  uint64_t v471 = v435;
                  operator delete(v437);
                  uint64_t v435 = v471;
                }
                int v432 = v439;
                v436 = v469;
                int v437 = v468;
                uint64_t v433 = (uint64_t *)v1022;
              }
              else
              {
                *v436++ = v445;
LABEL_679:
                int v432 = v439;
              }
            }
          }
          else
          {
            unint64_t v443 = v433;
            unint64_t v444 = v441 & 0xFFFFFFFFFFFFFFFCLL;
            if (v434 >= (unint64_t *)v1044)
            {
              size_t __szd = (size_t)v438;
              uint64_t v451 = v434 - v435;
              unint64_t v452 = v451 + 1;
              if ((unint64_t)(v451 + 1) >> 61) {
                goto LABEL_1388;
              }
              v1018 = (llvm::Value *)v437;
              if ((v1044 - (llvm::DataLayout *)v435) >> 2 > v452) {
                unint64_t v452 = (v1044 - (llvm::DataLayout *)v435) >> 2;
              }
              if ((unint64_t)(v1044 - (llvm::DataLayout *)v435) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v453 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v453 = v452;
              }
              if (v453)
              {
                if (v453 >> 61) {
                  goto LABEL_1392;
                }
                int v454 = v435;
                unsigned int v455 = (char *)operator new(8 * v453);
                uint64_t v435 = v454;
              }
              else
              {
                unsigned int v455 = 0;
              }
              unint64_t v465 = (unint64_t *)&v455[8 * v451];
              *unint64_t v465 = v444;
              v466 = v465 + 1;
              while (v434 != v435)
              {
                unint64_t v467 = *--v434;
                *--unint64_t v465 = v467;
              }
              v1044 = (llvm::DataLayout *)&v455[8 * v453];
              uint64_t v433 = v443;
              if (v435) {
                operator delete(v435);
              }
              int v432 = v439;
              uint64_t v434 = v466;
              uint64_t v435 = v465;
              int v437 = (uint64_t *)v1018;
              v438 = (uint64_t *)__szd;
            }
            else
            {
              *v434++ = v444;
              int v432 = v439;
              uint64_t v433 = v443;
            }
          }
          uint64_t v439 = v432;
          unint64_t v440 = *(void *)(v440 + 8) & 0xFFFFFFFFFFFFFFFELL;
          if (!v440) {
            goto LABEL_729;
          }
          continue;
        }
      }
    }
  }
  uint64_t v168 = *(void *)(v16 + 8);
  if (v168)
  {
    uint64_t v169 = *(llvm::ValueAsMetadata **)(v168 + 24);
    uint64_t v170 = *((void *)v169 + 1);
    if (v170)
    {
      do
      {
        uint64_t v171 = *(void *)(v170 + 24);
        uint64_t v170 = *(void *)(v170 + 8);
        BOOL v172 = sub_1CBF698E4(v171);
        if (v171) {
          BOOL v174 = !v172;
        }
        else {
          BOOL v174 = 1;
        }
        if (!v174) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
      while (v170);
      if (*((void *)v169 + 1))
      {
        char v175 = *(uint64_t **)*a1;
        uint64_t v176 = *v175;
        long long v177 = *(llvm::Value **)(*v175 + 1560);
        if (!v177)
        {
          uint64_t v178 = *(llvm::ConstantInt **)(v176 + 1888);
          unsigned int v179 = *(_DWORD *)(v176 + 1896);
          DWORD2(__dst) = v179 >> 8;
          if (v179 >> 8 > 0x40) {
            operator new[]();
          }
          if (v179 <= 0xFF) {
            char v180 = 0;
          }
          else {
            char v180 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v179) + 63);
          }
          *(void *)&long long __dst = v180 & 1;
          long long v177 = (llvm::Value *)llvm::ConstantInt::get(v178, (llvm::LLVMContext *)&__dst, v173);
          if (DWORD2(__dst) >= 0x41 && (void)__dst) {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
          }
          *(void *)(v176 + 1560) = v177;
        }
        llvm::Value::doRAUW(v169, v177, (llvm::Value *)1);
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  unsigned int v186 = (void *)*((void *)__s1 + 2);
  if (v186 == (void *)((char *)__s1 + 8)) {
    return 1;
  }
  do
  {
    if (v186) {
      v998 = (int32x2_t ****)(v186 - 7);
    }
    else {
      v998 = 0;
    }
    if ((*((unsigned char *)v998 + 23) & 0x20) != 0)
    {
      uint64_t v995 = (uint64_t)&(***v998)[310];
      *(void *)&long long __dst = v998;
      v996 = sub_1CC608F78(v995, (uint64_t *)&__dst);
      llvm::MDAttachments::erase((llvm::MDAttachments *)(v996 + 1), 28);
      if (!*((_DWORD *)v996 + 4) && (*((unsigned char *)v998 + 23) & 0x20) != 0)
      {
        v997 = ***v998 + 310;
        *(void *)&long long __dst = v998;
        sub_1CC6035CC(v997, &__dst);
        *((_DWORD *)v998 + 5) &= ~0x20000000u;
      }
    }
    unsigned int v186 = (void *)v186[1];
    BOOL v19 = 1;
  }
  while (v186 != (void *)((char *)__s1 + 8));
  return v19;
}

uint64_t sub_1CC9508E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 144);
    size_t v4 = *(void **)(a1 + 136);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 56;
      do
      {
        sub_1CB833A08(v5, *(void **)(v5 + 8));
        BOOL v6 = v5 == v2;
        v5 -= 56;
      }
      while (!v6);
      size_t v4 = *(void **)(a1 + 136);
    }
    *(void *)(a1 + 144) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 112);
  if (v7)
  {
    uint64_t v9 = 40 * v7;
    uint64_t v10 = (void *)(v8 + 16);
    do
    {
      if ((*(v10 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v11 = (void *)*(v10 - 1);
        if (v11)
        {
          void *v10 = v11;
          operator delete(v11);
        }
      }
      v10 += 5;
      v9 -= 40;
    }
    while (v9);
    uint64_t v8 = *(void *)(a1 + 112);
  }
  MEMORY[0x1D25D9CD0](v8, 8);
  return a1;
}

void sub_1CC9509A4()
{
}

void sub_1CC950A78(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC950AB0(uint64_t a1, llvm::IntegerType **a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    return sub_1CC94A46C(a2);
  }
  else
  {
    sub_1CC94AAC8(v12, a2, *(llvm::IntegerType ***)(a1 + 32), *(llvm::IntegerType ***)(a1 + 40), *(unsigned char *)(a1 + 48));
    uint64_t v3 = sub_1CC94ABE8((llvm::Constant **)v12);
    size_t v4 = __p;
    if (__p)
    {
      uint64_t v5 = __p;
      if (v16 != __p)
      {
        uint64_t v6 = (uint64_t)v16 - 56;
        do
        {
          sub_1CB833A08(v6, *(void **)(v6 + 8));
          BOOL v7 = v6 == (void)v4;
          v6 -= 56;
        }
        while (!v7);
        uint64_t v5 = __p;
      }
      uint64_t v16 = v4;
      operator delete(v5);
    }
    uint64_t v8 = v13;
    if (v14)
    {
      uint64_t v9 = 40 * v14;
      uint64_t v10 = (void *)(v13 + 16);
      do
      {
        if ((*(v10 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v11 = (void *)*(v10 - 1);
          if (v11)
          {
            void *v10 = v11;
            operator delete(v11);
          }
        }
        v10 += 5;
        v9 -= 40;
      }
      while (v9);
      uint64_t v8 = v13;
    }
    MEMORY[0x1D25D9CD0](v8, 8);
    return v3;
  }
}

uint64_t *sub_1CC950BC0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_1CC950C10(uint64_t result, uint64_t *a2)
{
  if (*a2)
  {
    uint64_t v2 = result;
    size_t v4 = (llvm *)sub_1CD66FC70(result + 24);
    int v5 = (int)v4;
    uint64_t v9 = *a2;
    *a2 = 0;
    uint64_t v6 = (llvm::raw_ostream *)llvm::errs(v4);
    __int16 v8 = 260;
    v7[0] = v2;
    llvm::logAllUnhandledErrors((llvm::raw_ostream *)&v9, v6, (uint64_t)v7);
    sub_1CC950BC0(&v9);
    exit(v5);
  }
  return result;
}

void sub_1CC950C98(llvm::yaml::IO *a1, uint64_t a2)
{
  sub_1CD66FCC0(a1, (uint64_t)"GlobalValueMap", (void *)a2, 0);
  sub_1CD67121C(a1, (uint64_t)"TypeIdMap", (void *)(a2 + 56), 0);
  sub_1CD4129B0(a1, (uint64_t)"WithGlobalValueDeadStripping", (unsigned char *)(a2 + 128), 0);
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1))
  {
    sub_1CD673250(&v20, *(void **)(a2 + 144), (void *)(a2 + 152));
    sub_1CC950F08(a1, (uint64_t)"CfiFunctionDefs", &v20);
    sub_1CD673250(&v18, *(void **)(a2 + 168), (void *)(a2 + 176));
    sub_1CC950F08(a1, (uint64_t)"CfiFunctionDecls", &v18);
    uint64_t v15 = &v18;
    sub_1CB8338B8((void ***)&v15);
    v18.i64[0] = (uint64_t)&v20;
  }
  else
  {
    int64x2_t v20 = 0uLL;
    uint64_t v21 = 0;
    sub_1CC950F08(a1, (uint64_t)"CfiFunctionDefs", &v20);
    uint64_t v5 = v20.i64[1];
    size_t v4 = (const void **)v20.i64[0];
    v18.i64[1] = 0;
    uint64_t v19 = 0;
    v18.i64[0] = (uint64_t)&v18.i64[1];
    while (v4 != (const void **)v5)
    {
      sub_1CC95267C(&v18, &v18.i64[1], v4, (uint64_t)v4);
      v4 += 3;
    }
    uint64_t v6 = a2 + 152;
    sub_1CB833850(a2 + 144, *(char **)(a2 + 152));
    uint64_t v7 = v18.i64[1];
    *(void *)(a2 + 144) = v18.i64[0];
    *(void *)(a2 + 152) = v7;
    uint64_t v8 = v19;
    *(void *)(a2 + 160) = v19;
    if (v8)
    {
      *(void *)(v7 + 16) = v6;
      v18.i64[0] = (uint64_t)&v18.i64[1];
      v18.i64[1] = 0;
      uint64_t v19 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      *(void *)(a2 + 144) = v6;
    }
    sub_1CB833850((uint64_t)&v18, (char *)v7);
    int64x2_t v18 = 0uLL;
    uint64_t v19 = 0;
    sub_1CC950F08(a1, (uint64_t)"CfiFunctionDecls", &v18);
    uint64_t v10 = v18.i64[1];
    uint64_t v9 = (const void **)v18.i64[0];
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = (int64x2_t *)&v16;
    while (v9 != (const void **)v10)
    {
      sub_1CC95267C((void **)&v15, &v16, v9, (uint64_t)v9);
      v9 += 3;
    }
    int v12 = *(char **)(a2 + 176);
    int v11 = (uint64_t *)(a2 + 176);
    sub_1CB833850((uint64_t)(v11 - 1), v12);
    uint64_t v13 = v16;
    *(v11 - 1) = (uint64_t)v15;
    *int v11 = v13;
    uint64_t v14 = v17;
    v11[1] = v17;
    if (v14)
    {
      *(void *)(v13 + 16) = v11;
      uint64_t v15 = (int64x2_t *)&v16;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      *(v11 - 1) = (uint64_t)v11;
    }
    sub_1CB833850((uint64_t)&v15, (char *)v13);
    uint64_t v15 = &v18;
    sub_1CB8338B8((void ***)&v15);
    v18.i64[0] = (uint64_t)&v20;
  }
  sub_1CB8338B8((void ***)&v18);
}

uint64_t sub_1CC950F08(llvm::yaml::IO *a1, uint64_t a2, int64x2_t *a3)
{
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 56))(a1);
  if (!result || a3->i64[0] != a3->i64[1]) {
    return sub_1CD6732D8(a1, a2, a3, 0);
  }
  return result;
}

void sub_1CC950F90(llvm::yaml::IO *a1, void *a2)
{
  *(void *)uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a2;
  uint64_t v49 = a2 + 1;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      size_t v67 = 0;
      std::error_code v68 = 0;
      unint64_t v69 = 0;
      size_t v4 = (uint64_t *)v2[7];
      uint64_t v3 = (uint64_t *)v2[8];
      uint64_t v50 = v2;
      uint64_t v51 = v3;
      if (v4 != v3)
      {
        do
        {
          uint64_t v5 = *v4;
          if (*v4) {
            BOOL v6 = *(_DWORD *)(*v4 + 8) == 1;
          }
          else {
            BOOL v6 = 0;
          }
          if (v6)
          {
            uint64_t v7 = *(void **)(v5 + 40);
            uint64_t v8 = *(void **)(v5 + 48);
            if (v8 == v7)
            {
              uint64_t v9 = 0;
              uint64_t v10 = 0;
            }
            else
            {
              int v11 = 0;
              uint64_t v10 = 0;
              int v12 = 0;
              do
              {
                uint64_t v13 = *(void *)(*v7 & 0xFFFFFFFFFFFFFFF8);
                if (v12 >= v11)
                {
                  uint64_t v14 = (v12 - v10) >> 3;
                  unint64_t v15 = v14 + 1;
                  if ((unint64_t)(v14 + 1) >> 61) {
                    goto LABEL_72;
                  }
                  if ((v11 - v10) >> 2 > v15) {
                    unint64_t v15 = (v11 - v10) >> 2;
                  }
                  if ((unint64_t)(v11 - v10) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v16 = v15;
                  }
                  if (v16)
                  {
                    if (v16 >> 61) {
                      sub_1CB833614();
                    }
                    uint64_t v17 = (char *)operator new(8 * v16);
                  }
                  else
                  {
                    uint64_t v17 = 0;
                  }
                  int64x2_t v18 = &v17[8 * v14];
                  *(void *)int64x2_t v18 = v13;
                  uint64_t v9 = v18 + 8;
                  while (v12 != v10)
                  {
                    uint64_t v19 = *((void *)v12 - 1);
                    v12 -= 8;
                    *((void *)v18 - 1) = v19;
                    v18 -= 8;
                  }
                  int v11 = &v17[8 * v16];
                  if (v10) {
                    operator delete(v10);
                  }
                  uint64_t v10 = v18;
                }
                else
                {
                  *(void *)int v12 = v13;
                  uint64_t v9 = v12 + 8;
                }
                ++v7;
                int v12 = v9;
              }
              while (v7 != v8);
            }
            unsigned int v20 = *(_DWORD *)(v5 + 12);
            LODWORD(__p) = v20 & 0xF;
            HIDWORD(__p) = (v20 >> 4) & 3;
            BOOL v53 = (v20 & 0x40) != 0;
            BOOL v54 = (v20 & 0x80) != 0;
            char v55 = BYTE1(v20) & 1;
            BOOL v56 = (v20 & 0x200) != 0;
            uint64_t v58 = 0;
            uint64_t v59 = 0;
            int64_t v57 = 0;
            uint64_t v21 = v9 - v10;
            if (v9 != v10)
            {
              if (v21 < 0) {
                goto LABEL_72;
              }
              int64_t v57 = (char *)operator new(v9 - v10);
              uint64_t v58 = v57;
              uint64_t v22 = &v57[8 * (v21 >> 3)];
              uint64_t v59 = v22;
              memmove(v57, v10, v9 - v10);
              uint64_t v58 = v22;
            }
            uint64_t v23 = *(void *)(v5 + 104);
            if (v23)
            {
              int v27 = *(unsigned char **)v23;
              int v26 = *(unsigned char **)(v23 + 8);
              uint64_t v60 = 0;
              uint64_t v61 = 0;
              uint64_t v62 = 0;
              int64_t v28 = v26 - v27;
              if (v26 == v27) {
                goto LABEL_40;
              }
              if (v28 < 0) {
LABEL_72:
              }
                abort();
              uint64_t v60 = (char *)operator new(v26 - v27);
              uint64_t v61 = v60;
              std::string::size_type v29 = &v60[8 * (v28 >> 3)];
              uint64_t v62 = v29;
              memmove(v60, v27, v28);
              uint64_t v61 = v29;
              uint64_t v23 = *(void *)(v5 + 104);
              if (v23)
              {
LABEL_40:
                uint64_t v24 = *(const void **)(v23 + 24);
                unint64_t v25 = (uint64_t)(*(void *)(v23 + 32) - (void)v24) >> 4;
              }
              else
              {
                uint64_t v24 = 0;
                unint64_t v25 = 0;
              }
            }
            else
            {
              uint64_t v24 = 0;
              unint64_t v25 = 0;
              uint64_t v60 = 0;
              uint64_t v61 = 0;
              uint64_t v62 = 0;
            }
            memset(v63, 0, sizeof(v63));
            sub_1CC0C53B4(v63, v24, (uint64_t)v24 + 16 * v25, v25);
            uint64_t v30 = *(void *)(v5 + 104);
            if (v30)
            {
              uint64_t v31 = *(const void **)(v30 + 48);
              unint64_t v32 = (uint64_t)(*(void *)(v30 + 56) - (void)v31) >> 4;
            }
            else
            {
              uint64_t v31 = 0;
              unint64_t v32 = 0;
            }
            memset(v64, 0, sizeof(v64));
            sub_1CC0C53B4(v64, v31, (uint64_t)v31 + 16 * v32, v32);
            uint64_t v33 = *(void *)(v5 + 104);
            if (v33)
            {
              uint64_t v34 = *(void *)(v33 + 72);
              unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v33 + 80) - v34) >> 3);
            }
            else
            {
              uint64_t v34 = 0;
              unint64_t v35 = 0;
            }
            memset(v65, 0, sizeof(v65));
            sub_1CC0C5874(v65, v34, v34 + 40 * v35, v35);
            uint64_t v36 = *(void *)(v5 + 104);
            if (v36)
            {
              uint64_t v37 = *(void *)(v36 + 96);
              unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v36 + 104) - v37) >> 3);
            }
            else
            {
              uint64_t v37 = 0;
              unint64_t v38 = 0;
            }
            memset(v66, 0, sizeof(v66));
            sub_1CC0C5874(v66, v37, v37 + 40 * v38, v38);
            if ((unint64_t)v68 >= v69)
            {
              int v40 = sub_1CC951464(&v67, (uint64_t *)&__p);
            }
            else
            {
              sub_1CD6702D8((uint64_t)v68, (uint64_t *)&__p);
              int v40 = (uint64_t *)(v39 + 160);
            }
            uint64_t v3 = v51;
            std::error_code v68 = v40;
            sub_1CD6703AC((uint64_t)&__p);
            if (v10) {
              operator delete(v10);
            }
          }
          ++v4;
        }
        while (v4 != v3);
        if (v67 != v68)
        {
          unint64_t v44 = v50[4];
          unsigned int v45 = v71;
          if (v44)
          {
            do
            {
              *--unsigned int v45 = (v44 % 0xA) | 0x30;
              BOOL v46 = v44 > 9;
              v44 /= 0xAuLL;
            }
            while (v46);
          }
          else
          {
            char v70 = 48;
            unsigned int v45 = &v70;
          }
          sub_1CC028D80(&__p, v45, v71, v71 - v45);
          unsigned int v47 = SHIBYTE(v57) >= 0 ? &__p : (void **)__p;
          sub_1CD670438(a1, (uint64_t)v47, (uint64_t *)&v67, 1);
          if (SHIBYTE(v57) < 0) {
            operator delete(__p);
          }
        }
      }
      std::string __p = &v67;
      sub_1CC951DA4((void ***)&__p);
      uint64_t v41 = v50;
      uint64_t v42 = (void *)v50[1];
      if (v42)
      {
        do
        {
          uint64_t v43 = v42;
          uint64_t v42 = (void *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          uint64_t v43 = (void *)v41[2];
          BOOL v6 = *v43 == (void)v41;
          uint64_t v41 = v43;
        }
        while (!v6);
      }
      uint64_t v2 = v43;
    }
    while (v43 != v49);
  }
}

uint64_t *sub_1CC951464(uint64_t **a1, uint64_t *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a1[1] - (char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x199999999999999) {
    abort();
  }
  if (0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_1CB833614();
    }
    uint64_t v7 = (char *)operator new(160 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t *)&v7[160 * v6];
  sub_1CD6702D8((uint64_t)&v7[160 * v2], a2);
  uint64_t v10 = v9 + 20;
  int v12 = *a1;
  int v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
  }
  else
  {
    do
    {
      v11 -= 20;
      sub_1CD6702D8((uint64_t)(v9 - 20), v11);
    }
    while (v11 != v12);
    int v11 = *a1;
    uint64_t v13 = (uint64_t)a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    while ((uint64_t *)v13 != v11)
    {
      v13 -= 160;
      sub_1CD6703AC(v13);
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

uint64_t sub_1CC951594(llvm::yaml::IO *a1, uint64_t a2)
{
  return sub_1CC9517EC(a1, (uint64_t)"TypeCheckedLoadConstVCalls", (uint64_t *)(a2 + 136));
}

uint64_t sub_1CC9516DC(llvm::yaml::IO *a1, uint64_t a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 56))(a1);
  if (!result || *a3 != a3[1]) {
    return sub_1CD6706EC(a1, a2, a3, 0);
  }
  return result;
}

uint64_t sub_1CC951764(llvm::yaml::IO *a1, uint64_t a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 56))(a1);
  if (!result || *a3 != a3[1]) {
    return sub_1CD670984(a1, a2, a3, 0);
  }
  return result;
}

uint64_t sub_1CC9517EC(llvm::yaml::IO *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 56))(a1);
  if (!result || *a3 != a3[1]) {
    return sub_1CD670BE8(a1, a2, a3, 0);
  }
  return result;
}

uint64_t sub_1CC951874(llvm::yaml::IO *a1, void *a2)
{
  unsigned int v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 24))(a1);
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    uint64_t v5 = ((a2[1] - *a2) >> 4);
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v9 = 0;
      if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, i, &v9))
      {
        uint64_t v7 = (unint64_t *)sub_1CD670A40((uint64_t)a1, (uint64_t)a2, i);
        sub_1CC9519E4(a1, v7);
        (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 40))(a1, v9);
      }
    }
  }
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 48))(a1);
}

uint64_t sub_1CC9519E4(llvm::yaml::IO *a1, unint64_t *a2)
{
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
}

uint64_t sub_1CC951A94(llvm::yaml::IO *a1, uint64_t *a2)
{
  int v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 24))(a1);
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    int v4 = -858993459 * ((unint64_t)(a2[1] - *a2) >> 3);
  }
  if (v4)
  {
    uint64_t v5 = 0;
    for (unint64_t i = 0; i != v4; ++i)
    {
      uint64_t v9 = 0;
      if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, i, &v9))
      {
        uint64_t v7 = *a2;
        if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) <= i)
        {
          sub_1CD670CA4(a2, i + 1);
          uint64_t v7 = *a2;
        }
        sub_1CC951C40(a1, (unint64_t *)(v7 + v5));
        (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 40))(a1, v9);
      }
      v5 += 40;
    }
  }
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 48))(a1);
}

uint64_t sub_1CC951C40(llvm::yaml::IO *a1, unint64_t *a2)
{
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
}

uint64_t sub_1CC951CE8(llvm::yaml::IO *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if (result)
  {
    sub_1CC9519E4(a1, a3);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v8);
  }
  return result;
}

void sub_1CC951DA4(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD6703AC(v4 - 160);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC951E28()
{
}

uint64_t sub_1CC952078(llvm::yaml::IO *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if (result)
  {
    sub_1CC952134(a1, a3);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1CC952134(llvm::yaml::IO *a1, uint64_t a2)
{
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
}

void sub_1CC9521E4(llvm::yaml::IO *a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a1;
  std::string __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  unint64_t v44 = "";
  unint64_t v45 = 0;
  BOOL v46 = a2;
  size_t v47 = a3;
  if (a3)
  {
    char v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = a3;
    do
    {
      LOBYTE(__dst) = 44;
      unint64_t v11 = llvm::StringRef::find((uint64_t *)&v46, (char *)&__dst, 1uLL, 0);
      if (v11 == -1)
      {
        size_t v16 = 0;
        uint64_t v15 = 0;
        uint64_t v13 = v46;
      }
      else
      {
        if (v10 >= v11) {
          unint64_t v12 = v11;
        }
        else {
          unint64_t v12 = v10;
        }
        uint64_t v13 = v46;
        if (v10 >= v11 + 1) {
          unint64_t v14 = v11 + 1;
        }
        else {
          unint64_t v14 = v10;
        }
        uint64_t v15 = (uint64_t)&v46[v14];
        size_t v16 = v10 - v14;
        unint64_t v10 = v12;
      }
      unint64_t v44 = v13;
      unint64_t v45 = v10;
      BOOL v46 = (char *)v15;
      size_t v47 = v16;
      long long __dst = v13;
      unint64_t v41 = v10;
      unsigned int v17 = sub_1CD0AF898((uint64_t)&__dst);
      unint64_t v18 = v41;
      if (!v41)
      {
LABEL_47:
        long long __dst = "key not an integer";
        __int16 v43 = 259;
        (*(void (**)(llvm::yaml::IO *, char **))(*(void *)a1 + 248))(a1, &__dst);
        goto LABEL_48;
      }
      unint64_t v19 = 0;
      unsigned int v20 = __dst;
      do
      {
        int v21 = *v20;
        if ((v21 - 48) >= 0xA)
        {
          if ((v21 - 97) >= 0x1A)
          {
            if ((v21 - 65) > 0x19) {
              goto LABEL_47;
            }
            int v22 = -55;
          }
          else
          {
            int v22 = -87;
          }
        }
        else
        {
          int v22 = -48;
        }
        unsigned int v23 = v22 + v21;
        if (v23 >= v17) {
          goto LABEL_47;
        }
        unint64_t v24 = v19 * v17 + v23;
        if (v24 / v17 < v19) {
          goto LABEL_47;
        }
        ++v20;
        unint64_t v19 = v19 * v17 + v23;
        --v18;
      }
      while (v18);
      if (v9 >= v8)
      {
        uint64_t v26 = (v9 - v7) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_63;
        }
        if ((v8 - v7) >> 2 > v27) {
          unint64_t v27 = (v8 - v7) >> 2;
        }
        if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28)
        {
          if (v28 >> 61) {
            sub_1CB833614();
          }
          std::string::size_type v29 = (char *)operator new(8 * v28);
        }
        else
        {
          std::string::size_type v29 = 0;
        }
        uint64_t v30 = (unint64_t *)&v29[8 * v26];
        unint64_t *v30 = v24;
        unint64_t v25 = v30 + 1;
        while (v9 != v7)
        {
          unint64_t v31 = *((void *)v9 - 1);
          v9 -= 8;
          *--uint64_t v30 = v31;
        }
        uint64_t v8 = &v29[8 * v28];
        std::string __p = v30;
        uint64_t v49 = v25;
        uint64_t v50 = v8;
        if (v7) {
          operator delete(v7);
        }
        char v7 = (char *)v30;
      }
      else
      {
        *(void *)uint64_t v9 = v24;
        unint64_t v25 = v9 + 8;
      }
      uint64_t v49 = v25;
      unint64_t v10 = v47;
      uint64_t v9 = (char *)v25;
    }
    while (v47);
    uint64_t v4 = a4;
    unint64_t v6 = a1;
    if (!a2) {
      goto LABEL_52;
    }
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_63:
    }
      abort();
    if (a3 >= 0x17)
    {
      uint64_t v34 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v34 = a3 | 7;
      }
      uint64_t v35 = v34 + 1;
      p_dst = (char **)operator new(v34 + 1);
      unint64_t v41 = a3;
      int64_t v42 = v35 | 0x8000000000000000;
      long long __dst = (char *)p_dst;
    }
    else
    {
      HIBYTE(v42) = a3;
      p_dst = &__dst;
    }
    memmove(p_dst, a2, a3);
  }
  else
  {
    if (!a2)
    {
LABEL_52:
      long long __dst = 0;
      unint64_t v41 = 0;
      uint64_t v33 = &__dst;
      int64_t v42 = 0;
      goto LABEL_61;
    }
    HIBYTE(v42) = 0;
    p_dst = &__dst;
  }
  *((unsigned char *)p_dst + a3) = 0;
  if (v42 >= 0) {
    uint64_t v33 = &__dst;
  }
  else {
    uint64_t v33 = (char **)__dst;
  }
LABEL_61:
  p_p = &__p;
  uint64_t v36 = sub_1CD4F50FC(v4, (unint64_t **)&__p, (uint64_t)&std::piecewise_construct, (uint64_t *)&p_p);
  sub_1CD672DEC(v6, (uint64_t)v33, (uint64_t)(v36 + 7), 1);
  if (SHIBYTE(v42) < 0) {
    operator delete(__dst);
  }
LABEL_48:
  if (__p)
  {
    uint64_t v49 = __p;
    operator delete(__p);
  }
}

uint64_t sub_1CC95255C(uint64_t result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    unint64_t v6 = (void *)result;
    uint64_t v7 = 3 * a4;
    uint64_t v8 = (char *)operator new(24 * a4);
    *unint64_t v6 = v8;
    v6[1] = v8;
    void v6[2] = &v8[8 * v7];
    uint64_t result = sub_1CC9525D8((uint64_t)(v6 + 2), a2, a3, (uint64_t)v8);
    v6[1] = result;
  }
  return result;
}

uint64_t sub_1CC9525D8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_1CB8BDF7C(a4, (const void *)v6[4], v6[5]);
      }
      else
      {
        long long v7 = *((_OWORD *)v6 + 2);
        *(void *)(a4 + 16) = v6[6];
        *(_OWORD *)a4 = v7;
      }
      uint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          unint64_t v6 = v9;
        }
        while (!v10);
      }
      a4 += 24;
      unint64_t v6 = v9;
    }
    while (v9 != a3);
  }
  return a4;
}

uint64_t *sub_1CC95267C(void **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  unint64_t v6 = sub_1CC95272C(a1, a2, &v13, &v12, a3);
  uint64_t result = (uint64_t *)*v6;
  if (!*v6)
  {
    sub_1CC95296C((uint64_t)a1, a4, (uint64_t)&v11);
    uint64_t v8 = v13;
    uint64_t v9 = v11;
    *unint64_t v11 = 0;
    v9[1] = 0;
    void v9[2] = (uint64_t)v8;
    *unint64_t v6 = (uint64_t)v9;
    BOOL v10 = (void *)**a1;
    if (v10)
    {
      *a1 = v10;
      uint64_t v9 = (uint64_t *)*v6;
    }
    sub_1CB8358B8(a1[1], v9);
    a1[2] = (void *)((char *)a1[2] + 1);
    return v11;
  }
  return result;
}

uint64_t *sub_1CC95272C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 == a2) {
    goto LABEL_2;
  }
  unint64_t v24 = (const void *)a2[4];
  char v25 = *((unsigned char *)a2 + 55);
  int v26 = v25;
  if (v25 >= 0) {
    unint64_t v24 = a2 + 4;
  }
  uint64_t v27 = v25 & 0x7F;
  if (v26 < 0) {
    uint64_t v27 = a2[5];
  }
  unint64_t v44 = v24;
  unint64_t v45 = (const void *)v27;
  if ((sub_1CC0C5278(a5, (uint64_t)&v44) & 0x80000000) != 0)
  {
LABEL_2:
    BOOL v10 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v12 = a2;
    }
    else
    {
      if (v10)
      {
        unint64_t v11 = (uint64_t *)*a2;
        do
        {
          uint64_t v12 = v11;
          unint64_t v11 = (uint64_t *)v11[1];
        }
        while (v11);
      }
      else
      {
        uint64_t v33 = a2;
        do
        {
          uint64_t v12 = (uint64_t *)v33[2];
          BOOL v34 = *v12 == (void)v33;
          uint64_t v33 = v12;
        }
        while (v34);
      }
      char v13 = *((unsigned char *)a5 + 23);
      BOOL v14 = v13 < 0;
      if (v13 >= 0) {
        uint64_t v15 = a5;
      }
      else {
        uint64_t v15 = *a5;
      }
      size_t v16 = v13 & 0x7F;
      if (v14) {
        size_t v17 = (size_t)a5[1];
      }
      else {
        size_t v17 = v16;
      }
      if (*((char *)v12 + 55) < 0)
      {
        unint64_t v18 = (const void *)v12[4];
        size_t v19 = v12[5];
      }
      else
      {
        unint64_t v18 = v12 + 4;
        size_t v19 = *((unsigned __int8 *)v12 + 55);
      }
      if (v17 >= v19) {
        size_t v20 = v19;
      }
      else {
        size_t v20 = v17;
      }
      int v21 = memcmp(v18, v15, v20);
      BOOL v22 = v19 < v17;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return sub_1CD4F8D98((uint64_t)a1, a3, a5);
      }
    }
    if (v10)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  char v29 = *((unsigned char *)a5 + 23);
  BOOL v30 = v29 < 0;
  unint64_t v31 = *a5;
  if (v29 >= 0) {
    unint64_t v31 = a5;
  }
  unint64_t v32 = (const void *)(v29 & 0x7F);
  if (v30) {
    unint64_t v32 = a5[1];
  }
  unint64_t v44 = v31;
  unint64_t v45 = v32;
  if ((sub_1CC0C5278((const void **)a2 + 4, (uint64_t)&v44) & 0x80000000) == 0)
  {
    *a3 = a2;
    uint64_t result = a4;
    *a4 = (uint64_t)a2;
    return result;
  }
  uint64_t v35 = a2[1];
  if (v35)
  {
    uint64_t v36 = (uint64_t *)a2[1];
    do
    {
      uint64_t v37 = v36;
      uint64_t v36 = (uint64_t *)*v36;
    }
    while (v36);
  }
  else
  {
    unint64_t v38 = a2;
    do
    {
      uint64_t v37 = (uint64_t *)v38[2];
      BOOL v34 = *v37 == (void)v38;
      unint64_t v38 = v37;
    }
    while (!v34);
  }
  if (v37 == v9) {
    goto LABEL_53;
  }
  uint64_t v39 = (void *)v37[4];
  char v40 = *((unsigned char *)v37 + 55);
  int v41 = v40;
  if (v40 >= 0) {
    uint64_t v39 = v37 + 4;
  }
  int64_t v42 = (const void *)v37[5];
  __int16 v43 = (const void *)(v40 & 0x7F);
  if (v41 >= 0) {
    int64_t v42 = v43;
  }
  unint64_t v44 = v39;
  unint64_t v45 = v42;
  if ((sub_1CC0C5278(a5, (uint64_t)&v44) & 0x80000000) == 0) {
    return sub_1CD4F8D98((uint64_t)a1, a3, a5);
  }
  uint64_t v35 = a2[1];
LABEL_53:
  if (v35)
  {
    *a3 = v37;
    return v37;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

void *sub_1CC95296C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_1CB8BDF7C((uint64_t)result, *(const void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_1CC9529D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x400000000;
  *(void *)(a1 + 56) = a1 + 72;
  uint64_t v4 = a1 + 56;
  *(void *)(a1 + 64) = 0x400000000;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v5 = (void *)(a1 + 104);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  unint64_t v6 = (llvm::GlobalVariable *)llvm::collectUsedGlobalVariables(a2, a1 + 8, 0);
  if (v6) {
    llvm::GlobalVariable::eraseFromParent(v6);
  }
  long long v7 = (llvm::GlobalVariable *)llvm::collectUsedGlobalVariables(a2, v4, 1);
  if (v7) {
    llvm::GlobalVariable::eraseFromParent(v7);
  }
  uint64_t v8 = a2 + 40;
  uint64_t v42 = a2;
  for (uint64_t i = *(void *)(a2 + 48); i != v8; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v10 = i - 48;
    }
    else {
      uint64_t v10 = 0;
    }
    unint64_t v11 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v10 - 32));
    if (v11) {
      BOOL v12 = *((unsigned char *)v11 + 16) == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      char v13 = v11;
      uint64_t v15 = *(void **)(a1 + 112);
      unint64_t v14 = *(void *)(a1 + 120);
      if ((unint64_t)v15 >= v14)
      {
        size_t v17 = (void *)*v5;
        uint64_t v18 = ((uint64_t)v15 - *v5) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60) {
LABEL_63:
        }
          abort();
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 60) {
LABEL_64:
          }
            sub_1CB833614();
          BOOL v22 = (char *)operator new(16 * v21);
        }
        else
        {
          BOOL v22 = 0;
        }
        unsigned int v23 = &v22[16 * v18];
        *(void *)unsigned int v23 = v10;
        *((void *)v23 + 1) = v13;
        unint64_t v24 = v23;
        if (v15 != v17)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
            v24 -= 16;
            v15 -= 2;
          }
          while (v15 != v17);
          uint64_t v15 = (void *)*v5;
        }
        size_t v16 = v23 + 16;
        *(void *)(a1 + 104) = v24;
        *(void *)(a1 + 112) = v23 + 16;
        *(void *)(a1 + 120) = &v22[16 * v21];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *uint64_t v15 = v10;
        v15[1] = v11;
        size_t v16 = v15 + 2;
      }
      *(void *)(a1 + 112) = v16;
    }
  }
  for (uint64_t j = *(void *)(v42 + 64); j != v42 + 56; uint64_t j = *(void *)(j + 8))
  {
    if (j) {
      uint64_t v26 = j - 56;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v26 - 32));
    if (v27) {
      BOOL v28 = *((unsigned char *)v27 + 16) == 0;
    }
    else {
      BOOL v28 = 0;
    }
    if (v28)
    {
      char v29 = v27;
      unint64_t v31 = *(char **)(a1 + 136);
      unint64_t v30 = *(void *)(a1 + 144);
      if ((unint64_t)v31 >= v30)
      {
        uint64_t v33 = *(char **)(a1 + 128);
        uint64_t v34 = (v31 - v33) >> 4;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60) {
          goto LABEL_63;
        }
        uint64_t v36 = v30 - (void)v33;
        if (v36 >> 3 > v35) {
          unint64_t v35 = v36 >> 3;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          if (v37 >> 60) {
            goto LABEL_64;
          }
          unint64_t v38 = (char *)operator new(16 * v37);
        }
        else
        {
          unint64_t v38 = 0;
        }
        uint64_t v39 = &v38[16 * v34];
        *(void *)uint64_t v39 = v26;
        *((void *)v39 + 1) = v29;
        char v40 = v39;
        if (v31 != v33)
        {
          do
          {
            *((_OWORD *)v40 - 1) = *((_OWORD *)v31 - 1);
            v40 -= 16;
            v31 -= 16;
          }
          while (v31 != v33);
          unint64_t v31 = *(char **)(a1 + 128);
        }
        unint64_t v32 = v39 + 16;
        *(void *)(a1 + 128) = v40;
        *(void *)(a1 + 136) = v39 + 16;
        *(void *)(a1 + 144) = &v38[16 * v37];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(void *)unint64_t v31 = v26;
        *((void *)v31 + 1) = v27;
        unint64_t v32 = v31 + 16;
      }
      *(void *)(a1 + 136) = v32;
    }
  }
  return a1;
}

void sub_1CC952CA8(unint64_t *a1, uint64_t ***a2, int a3, llvm::Value ***a4)
{
  unsigned int v7 = *((_DWORD *)a2 + 8);
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    size_t v17 = 0;
    HIBYTE(v101) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_17;
  }
  uint64_t v8 = ***a2;
  uint64_t v9 = *(void *)(v8 + 152);
  uint64_t v10 = *(unsigned int *)(v8 + 168);
  if (v10)
  {
    LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    BOOL v12 = (uint64_t ****)(v9 + 16 * v11);
    char v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_9;
    }
    int v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      char v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == a2)
      {
        BOOL v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_9;
      }
    }
  }
  BOOL v12 = (uint64_t ****)(v9 + 16 * v10);
LABEL_9:
  size_t v16 = (unint64_t *)v12[1];
  unint64_t v19 = *v16;
  uint64_t v18 = v16 + 2;
  size_t v17 = v19;
  if (v19 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_142:
  }
    abort();
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    p_dst = (void **)operator new(v21 + 1);
    size_t v100 = v17;
    int64_t v101 = v22 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_16;
  }
  HIBYTE(v101) = v17;
  p_dst = (void **)&__dst;
  if (v17) {
LABEL_16:
  }
    memmove(p_dst, v18, v17);
LABEL_17:
  *((unsigned char *)p_dst + v17) = 0;
  int v23 = *((_DWORD *)a2 + 8);
  int v24 = v23 & 0xF;
  if (v24 != 1)
  {
    if (*((unsigned char *)a2 + 16))
    {
      if (*((unsigned char *)a2 + 16) != 3) {
        goto LABEL_47;
      }
      BOOL v25 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0;
    }
    else
    {
      if (a2[9] != (uint64_t **)(a2 + 9)) {
        goto LABEL_47;
      }
      BOOL v25 = (v23 & 0x800000) == 0;
    }
    int v24 = v25;
  }
  if (v24 && a3)
  {
    if ((v23 & 0x4000) == 0) {
      goto LABEL_115;
    }
    uint64_t v26 = (llvm::PointerType *)a2[3];
    uint64_t v27 = (llvm::Type *)(*((_DWORD *)*a2 + 2) >> 8);
    if (v101 >= 0) {
      size_t v28 = HIBYTE(v101) & 0x7F;
    }
    else {
      size_t v28 = v100;
    }
    sub_1CB907098((uint64_t)__p, v28 + 4);
    if (v96 >= 0) {
      char v29 = __p;
    }
    else {
      char v29 = (void **)__p[0];
    }
    if (v28)
    {
      if (v101 >= 0) {
        unint64_t v30 = (void **)&__dst;
      }
      else {
        unint64_t v30 = __dst;
      }
      memmove(v29, v30, v28);
    }
    strcpy((char *)v29 + v28, ".cfi");
    __int16 v98 = 260;
    v97[0] = (const char *)__p;
    unint64_t v31 = *a1;
    unint64_t v32 = (unint64_t *)operator new(0x80uLL);
    uint64_t v33 = (llvm::Value *)(v32 + 1);
    *((_DWORD *)v32 + 7) = *((_DWORD *)v32 + 7) & 0x38000000 | 0x40000000;
    unint64_t *v32 = 0;
    llvm::Function::Function(v32 + 1, v26, 0, v27, v97, v31);
    if (v96 < 0) {
      operator delete(__p[0]);
    }
    int v34 = *((_DWORD *)v32 + 10);
    unsigned int v35 = v34 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)v32 + 10) = v35;
    if ((v34 & 0xFu) - 7 >= 2)
    {
      if (llvm::GlobalValue::hasExternalWeakLinkage(v33))
      {
LABEL_46:
        llvm::Value::replaceUsesWithIf((llvm::Value *)a2, v33, (unsigned int (*)(uint64_t, uint64_t))sub_1CD673974, (uint64_t)sub_1CC95666C);
        goto LABEL_115;
      }
      unsigned int v35 = *((_DWORD *)v32 + 10);
    }
    *((_DWORD *)v32 + 10) = v35 | 0x4000;
    goto LABEL_46;
  }
LABEL_47:
  int v36 = (v7 >> 4) & 3;
  if (a3)
  {
    if (v101 >= 0) {
      size_t v37 = HIBYTE(v101) & 0x7F;
    }
    else {
      size_t v37 = v100;
    }
    sub_1CB907098((uint64_t)__p, v37 + 4);
    if (v96 >= 0) {
      unint64_t v38 = __p;
    }
    else {
      unint64_t v38 = (void **)__p[0];
    }
    if (v37)
    {
      if (v101 >= 0) {
        uint64_t v39 = (void **)&__dst;
      }
      else {
        uint64_t v39 = __dst;
      }
      memmove(v38, v39, v37);
    }
    strcpy((char *)v38 + v37, ".cfi");
    __int16 v98 = 260;
    v97[0] = (const char *)__p;
    llvm::Value::setNameImpl((llvm::Value *)a2, v97);
    if (*((unsigned char *)a2 + 16))
    {
LABEL_60:
      if (v96 < 0) {
        operator delete(__p[0]);
      }
      int v40 = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = v40 & 0xFFFFFFF0;
      if ((v40 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2) & 1) == 0) {
        *((_DWORD *)a2 + 8) |= 0x4000u;
      }
      int v93 = a3;
      int v41 = (llvm::PointerType *)a2[3];
      uint64_t v42 = (llvm::Type *)(*((_DWORD *)*a2 + 2) >> 8);
      __int16 v98 = 260;
      v97[0] = (const char *)&__dst;
      unint64_t v43 = *a1;
      unint64_t v44 = (unint64_t *)operator new(0x80uLL);
      unint64_t v45 = (llvm::GlobalValue *)(v44 + 1);
      *((_DWORD *)v44 + 7) = *((_DWORD *)v44 + 7) & 0x38000000 | 0x40000000;
      *unint64_t v44 = 0;
      llvm::Function::Function(v44 + 1, v41, 0, v42, v97, v43);
      int v46 = v44[5] & 0xF;
      unsigned int v47 = v44[5] & 0xFFFFFFCF | (16 * (v36 & 3));
      *((_DWORD *)v44 + 10) = v47;
      if ((v46 - 7) >= 2)
      {
        if (!v36 || (llvm::GlobalValue::hasExternalWeakLinkage(v45) & 1) != 0) {
          goto LABEL_67;
        }
        unsigned int v47 = *((_DWORD *)v44 + 10);
      }
      *((_DWORD *)v44 + 10) = v47 | 0x4000;
LABEL_67:
      for (uint64_t i = a2[1]; i; uint64_t i = (uint64_t **)i[1])
      {
        uint64_t v49 = (llvm::Value *)i[3];
        if (v49) {
          BOOL v50 = *((unsigned char *)v49 + 16) == 1;
        }
        else {
          BOOL v50 = 0;
        }
        if (v50)
        {
          uint64_t v51 = (llvm::PointerType *)a2[3];
          uint64_t v52 = (llvm::Type *)(*((_DWORD *)*a2 + 2) >> 8);
          __int16 v98 = 257;
          unint64_t v53 = *a1;
          BOOL v54 = (unint64_t *)operator new(0x80uLL);
          char v55 = (llvm::Value *)(v54 + 1);
          *((_DWORD *)v54 + 7) = *((_DWORD *)v54 + 7) & 0x38000000 | 0x40000000;
          *BOOL v54 = 0;
          BOOL v56 = llvm::Function::Function(v54 + 1, v51, 0, v52, v97, v53);
          llvm::Value::takeName((int32x2_t ****)v56, v49);
          llvm::Value::doRAUW(v49, v55, (llvm::Value *)1);
          uint64_t v58 = a4[1];
          unint64_t v57 = (unint64_t)a4[2];
          if ((unint64_t)v58 >= v57)
          {
            uint64_t v60 = *a4;
            uint64_t v61 = v58 - *a4;
            unint64_t v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 61) {
              goto LABEL_142;
            }
            uint64_t v63 = v57 - (void)v60;
            if (v63 >> 2 > v62) {
              unint64_t v62 = v63 >> 2;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v64 = v62;
            }
            if (v64)
            {
              if (v64 >> 61) {
                sub_1CB833614();
              }
              int v65 = (char *)operator new(8 * v64);
            }
            else
            {
              int v65 = 0;
            }
            long long v66 = (llvm::Value **)&v65[8 * v61];
            *long long v66 = v49;
            uint64_t v59 = v66 + 1;
            if (v58 != v60)
            {
              do
              {
                size_t v67 = *--v58;
                *--long long v66 = v67;
              }
              while (v58 != v60);
              uint64_t v58 = *a4;
            }
            *a4 = v66;
            a4[1] = v59;
            a4[2] = (llvm::Value **)&v65[8 * v64];
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            *uint64_t v58 = v49;
            uint64_t v59 = v58 + 1;
          }
          a4[1] = v59;
        }
      }
      int v36 = 1;
      a3 = v93;
      goto LABEL_110;
    }
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
      goto LABEL_140;
    }
    uint64_t v79 = ***a2;
    uint64_t v80 = *(void *)(v79 + 152);
    uint64_t v81 = *(unsigned int *)(v79 + 168);
    if (v81)
    {
      LODWORD(v82) = (v81 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v83 = (uint64_t ****)(v80 + 16 * v82);
      int64_t v84 = *v83;
      if (*v83 == a2)
      {
LABEL_133:
        int v87 = v83[1];
        unint64_t v90 = (unint64_t)*v87;
        uint64_t v88 = v87 + 2;
        unint64_t v89 = v90;
        if (v90 >= 5 && *(_DWORD *)v88 == *(_DWORD *)"llvm." && v88[4] == aLlvm_1[4])
        {
          *((_DWORD *)a2 + 8) |= 0x2000u;
          int v92 = llvm::Function::lookupIntrinsicID(v88, v89);
LABEL_141:
          *((_DWORD *)a2 + 9) = v92;
          goto LABEL_60;
        }
LABEL_140:
        int v92 = 0;
        *((_DWORD *)a2 + 8) &= ~0x2000u;
        goto LABEL_141;
      }
      int v85 = 1;
      while (v84 != (uint64_t ***)-4096)
      {
        int v86 = v82 + v85++;
        uint64_t v82 = v86 & (v81 - 1);
        int64_t v84 = *(uint64_t ****)(v80 + 16 * v82);
        if (v84 == a2)
        {
          uint64_t v83 = (uint64_t ****)(v80 + 16 * v82);
          goto LABEL_133;
        }
      }
    }
    uint64_t v83 = (uint64_t ****)(v80 + 16 * v81);
    goto LABEL_133;
  }
  std::error_code v68 = (llvm::PointerType *)a2[3];
  unint64_t v69 = (llvm::Type *)(*((_DWORD *)*a2 + 2) >> 8);
  if (v101 >= 0) {
    size_t v70 = HIBYTE(v101) & 0x7F;
  }
  else {
    size_t v70 = v100;
  }
  sub_1CB907098((uint64_t)__p, v70 + 7);
  if (v96 >= 0) {
    uint64_t v71 = __p;
  }
  else {
    uint64_t v71 = (void **)__p[0];
  }
  if (v70)
  {
    if (v101 >= 0) {
      long long v72 = (void **)&__dst;
    }
    else {
      long long v72 = __dst;
    }
    memmove(v71, v72, v70);
  }
  strcpy((char *)v71 + v70, ".cfi_jt");
  __int16 v98 = 260;
  v97[0] = (const char *)__p;
  unint64_t v73 = *a1;
  uint64_t v74 = (unint64_t *)operator new(0x80uLL);
  unint64_t v45 = (llvm::GlobalValue *)(v74 + 1);
  *((_DWORD *)v74 + 7) = *((_DWORD *)v74 + 7) & 0x38000000 | 0x40000000;
  unint64_t *v74 = 0;
  llvm::Function::Function(v74 + 1, v68, 0, v69, v97, v73);
  if (v96 < 0) {
    operator delete(__p[0]);
  }
  int v75 = *((_DWORD *)v74 + 10);
  unsigned int v76 = v75 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v74 + 10) = v76;
  if ((v75 & 0xFu) - 7 < 2) {
    goto LABEL_109;
  }
  if ((llvm::GlobalValue::hasExternalWeakLinkage(v45) & 1) == 0)
  {
    unsigned int v76 = *((_DWORD *)v74 + 10);
LABEL_109:
    *((_DWORD *)v74 + 10) = v76 | 0x4000;
  }
LABEL_110:
  if (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2)) {
    sub_1CC955D1C(a1, (llvm::Type *)a2, (llvm::PoisonValue **)v45, a3);
  }
  else {
    sub_1CC9564BC((uint64_t)a2, v45, a3);
  }
  int v77 = a2[4] & 0xF;
  unsigned int v78 = a2[4] & 0xFFFFFFCF | (16 * (v36 & 3));
  *((_DWORD *)a2 + 8) = v78;
  if ((v77 - 7) >= 2)
  {
    if (!v36 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2) & 1) != 0) {
      goto LABEL_115;
    }
    unsigned int v78 = *((_DWORD *)a2 + 8);
  }
  *((_DWORD *)a2 + 8) = v78 | 0x4000;
LABEL_115:
  if (SHIBYTE(v101) < 0) {
    operator delete(__dst);
  }
}

void **sub_1CC9534F0(void **a1)
{
  sub_1CD1CF0D0(*a1, "llvm.used", (const char *)9, (llvm::ConstantExpr **)a1[1], *((unsigned int *)a1 + 4));
  sub_1CD1CF0D0(*a1, "llvm.compiler.used", (const char *)0x12, (llvm::ConstantExpr **)a1[7], *((unsigned int *)a1 + 16));
  unint64_t v2 = (llvm::Constant ***)a1[13];
  unint64_t v3 = (llvm::Constant ***)a1[14];
  while (v2 != v3)
  {
    uint64_t v5 = *v2;
    uint64_t v4 = (llvm::detail::IEEEFloat *)v2[1];
    unint64_t v6 = **v2;
    if (*(llvm::Constant **)v4 != v6) {
      uint64_t v4 = sub_1CC56C0C0((llvm *)0x31, v4, v6, 0);
    }
    llvm::GlobalAlias::setAliasee((uint64_t)v5, v4);
    v2 += 2;
  }
  unsigned int v7 = a1[16];
  uint64_t v8 = a1[17];
  if (v7 != v8)
  {
    do
    {
      uint64_t v9 = *v7;
      uint64_t v10 = v7[1];
      uint64_t v11 = (void *)(*v7 - 32);
      if (*v11)
      {
        **(void **)(v9 - 16) = *(void *)(v9 - 24);
        uint64_t v12 = *(void *)(v9 - 24);
        if (v12) {
          *(void *)(v12 + 16) = *(void *)(v9 - 16);
        }
      }
      *uint64_t v11 = v10;
      if (v10)
      {
        uint64_t v15 = *(void *)(v10 + 8);
        char v13 = (void *)(v10 + 8);
        uint64_t v14 = v15;
        *(void *)(v9 - 24) = v15;
        if (v15) {
          *(void *)(v14 + 16) = v9 - 24;
        }
        *(void *)(v9 - 16) = v13;
        *char v13 = v11;
      }
      v7 += 2;
    }
    while (v7 != v8);
    unsigned int v7 = a1[16];
  }
  if (v7)
  {
    a1[17] = v7;
    operator delete(v7);
  }
  size_t v16 = a1[13];
  if (v16)
  {
    a1[14] = v16;
    operator delete(v16);
  }
  size_t v17 = (void **)a1[7];
  if (v17 != a1 + 9) {
    free(v17);
  }
  uint64_t v18 = (void **)a1[1];
  if (v18 != a1 + 3) {
    free(v18);
  }
  return a1;
}

void *sub_1CC953640(uint64_t *a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v22 = 0;
  uint64_t v4 = *a1;
  v19[0] = a2;
  memset(&v19[1], 0, 24);
  char v20 = 0;
  uint64_t v6 = *(void *)(v4 + 112);
  uint64_t v5 = v4 + 112;
  int v7 = sub_1CBA9C7FC(v6, *(_DWORD *)(v5 + 16), a2, &v22);
  uint64_t v8 = v22;
  if (!v7)
  {
    uint64_t v8 = sub_1CC956E50(v5, v19, v22);
    *uint64_t v8 = a2;
    v8[1] = 0;
    v8[2] = 0;
    void v8[3] = 0;
    *((unsigned char *)v8 + 32) = 0;
    uint64_t v10 = sub_1CC953784((uint64_t **)a1[1], (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFCLL | 1));
    if ((uint64_t **)(a1[1] + 8) == v10) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = sub_1CC957040((uint64_t)(v10 + 4));
    }
    uint64_t v12 = sub_1CC953968(a1[2], &v21);
    char v13 = (void *)v12[1];
    uint64_t v14 = (void *)v12[2];
    while (v13 != v14)
    {
      uint64_t v15 = (uint64_t **)a1[1];
      size_t v16 = sub_1CC953784(v15, (uint64_t *)(*v13 & 0xFFFFFFFFFFFFFFFCLL));
      if (v15 + 1 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = sub_1CC957040((uint64_t)(v16 + 4));
      }
      if (v11 != v17)
      {
        *(void *)(*(void *)v11 + 8) = *(void *)(*(void *)v11 + 8) & 1 | v17;
        *(void *)uint64_t v11 = *(void *)v17;
        unint64_t v18 = *(void *)(v17 + 8) & 0xFFFFFFFFFFFFFFFELL;
        *(void *)uint64_t v17 = v11;
        *(void *)(v17 + 8) = v18;
      }
      ++v13;
    }
  }
  return v8 + 1;
}

uint64_t **sub_1CC953784(uint64_t **a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[6];
        if ((unint64_t)a2 >= v7) {
          break;
        }
        uint64_t v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= (unint64_t)a2) {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_9:
    uint64_t v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x38uLL);
    v6[4] = (uint64_t *)(v6 + 4);
    v6[5] = (uint64_t *)1;
    v6[6] = a2;
    *uint64_t v6 = 0;
    v6[1] = 0;
    void v6[2] = v8;
    *uint64_t v5 = (uint64_t *)v6;
    uint64_t v9 = (uint64_t *)**a1;
    uint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      uint64_t v10 = *v5;
    }
    sub_1CB8358B8(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

unint64_t *sub_1CC95385C(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  if (*result > 3)
  {
    if ((v2 & 2) == 0) {
      operator new();
    }
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    unsigned int v4 = *(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    if (v4 >= *(_DWORD *)(v3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v3 + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 8);
  }
  else
  {
    *uint64_t result = a2 & 0xFFFFFFFFFFFFFFFDLL;
  }
  return result;
}

void *sub_1CC953968(uint64_t a1, uint64_t *a2)
{
  unint64_t v7 = 0;
  char v4 = sub_1CBA9C7FC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC956C5C(a1, a2, v7);
    *uint64_t v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5 + 1;
}

void *sub_1CC9539DC(uint64_t ***a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v80[1] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a4 == 5) {
    return 0;
  }
  if (!*(_DWORD *)a4)
  {
    uint64_t v8 = **a1;
    uint64_t v9 = *v8;
    uint64_t v10 = *(void **)(*v8 + 1568);
    if (!v10)
    {
      uint64_t v11 = *(llvm::ConstantInt **)(v9 + 1888);
      unsigned int v12 = *(_DWORD *)(v9 + 1896);
      LODWORD(v66) = v12 >> 8;
      if (v12 >> 8 > 0x40) {
        operator new[]();
      }
      int v65 = 0;
      uint64_t v10 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v65, a3);
      if (v66 >= 0x41 && v65) {
        MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
      }
      *(void *)(v9 + 1568) = v10;
    }
    return v10;
  }
  uint64_t v15 = (unsigned __int8 *)*((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
  size_t v16 = *a1;
  if (sub_1CC9553D0(a2, (llvm::DataLayout *)(*a1 + 34), (uint64_t)v15, 0, a5, a6, a7))
  {
    unint64_t v18 = **a1;
    uint64_t v19 = *v18;
    uint64_t v10 = *(void **)(*v18 + 1560);
    if (!v10)
    {
      char v20 = *(llvm::ConstantInt **)(v19 + 1888);
      unsigned int v21 = *(_DWORD *)(v19 + 1896);
      LODWORD(v66) = v21 >> 8;
      if (v21 >> 8 > 0x40) {
        operator new[]();
      }
      if (v21 <= 0xFF) {
        LOBYTE(v22) = 0;
      }
      else {
        unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v21) + 63);
      }
      int v65 = (void *)(v22 & 1);
      uint64_t v10 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v65, v17);
      if (v66 >= 0x41 && v65) {
        MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
      }
      *(void *)(v19 + 1560) = v10;
    }
    return v10;
  }
  uint64_t v23 = 0;
  uint64_t v24 = *((void *)a3 + 5);
  uint64_t v25 = **(void **)a3;
  int v65 = v67;
  uint64_t v66 = 0x200000000;
  uint64_t v70 = v25;
  uint64_t v71 = &v79;
  long long v72 = v80;
  uint64_t v73 = 0;
  int v74 = 0;
  __int16 v75 = 512;
  char v76 = 7;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = &unk_1F2616E88;
  v80[0] = &unk_1F2617008;
  uint64_t v68 = v24;
  unint64_t v69 = (void **)((char *)a3 + 24);
  uint64_t v26 = (unsigned __int8 *)*((void *)a3 + 6);
  uint64_t v60 = v26;
  if (v26)
  {
    llvm::MetadataTracking::track((uint64_t)&v60, v26, 2);
    uint64_t v23 = (uint64_t)v60;
  }
  sub_1CB8461A4((uint64_t)&v65, 0, v23);
  if (v60)
  {
    int v54 = *v60;
    if ((v54 - 4) > 0x1E)
    {
      if ((v54 - 3) >= 0xFFFFFFFE) {
        unint64_t v57 = v60;
      }
      else {
        unint64_t v57 = 0;
      }
      if ((v54 - 3) < 0xFFFFFFFE)
      {
        if (v54 == 3) {
          *((void *)v60 + 1) = 0;
        }
        goto LABEL_19;
      }
      unint64_t v56 = (unint64_t)(v57 + 8);
    }
    else
    {
      if ((v60[1] & 0x7F) != 2 && !*((_DWORD *)v60 + 3)) {
        goto LABEL_19;
      }
      uint64_t v55 = *((void *)v60 + 2);
      if ((v55 & 4) == 0) {
        goto LABEL_19;
      }
      unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
      if (!v56) {
        goto LABEL_19;
      }
    }
    unint64_t v62 = &v60;
    sub_1CC5FA668(v56 + 16, &v62);
  }
LABEL_19:
  uint64_t v27 = (uint64_t)a1[12];
  __int16 v61 = 257;
  if (*(void *)v15 != v27)
  {
    if (v15[16] <= 0x14u)
    {
      uint64_t v30 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v71 + 28))(v71, 47, v15, v27);
      uint64_t v15 = (unsigned __int8 *)v30;
      if (v30)
      {
        if (*(unsigned __int8 *)(v30 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, unsigned __int8 **, uint64_t, void **))(*v72 + 16))(v72, v30, &v60, v68, v69);
          if (v66)
          {
            uint64_t v58 = (llvm::MDNode **)v65;
            uint64_t v59 = (llvm::MDNode **)((char *)v65 + 16 * v66);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v58, v58[1]);
              v58 += 2;
            }
            while (v58 != v59);
          }
        }
      }
    }
    else
    {
      __int16 v64 = 257;
      uint64_t v15 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v15, v27, (const char **)&v62, 0);
      (*(void (**)(void *, unsigned __int8 *, unsigned __int8 **, uint64_t, void **))(*v72 + 16))(v72, v15, &v60, v68, v69);
      if (v66)
      {
        size_t v28 = (llvm::MDNode **)v65;
        char v29 = (llvm::MDNode **)((char *)v65 + 16 * v66);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v28, v28[1]);
          v28 += 2;
        }
        while (v28 != v29);
      }
    }
  }
  unint64_t v31 = sub_1CC56C0C0((llvm *)0x2F, *(llvm::detail::IEEEFloat **)(a4 + 8), (llvm::Constant *)a1[12], 0);
  if (*(_DWORD *)a4 == 3)
  {
    __int16 v64 = 257;
    uint64_t v10 = sub_1CB845F20((uint64_t)&v65, 32, v15, (uint64_t)v31, (uint64_t)&v62);
  }
  else
  {
    __int16 v64 = 257;
    unint64_t v32 = sub_1CB84494C((uint64_t)&v65, (uint64_t)v15, (uint64_t)v31, (uint64_t)&v62, 0, 0);
    uint64_t v33 = sub_1CC56C0C0((llvm *)0x27, *(llvm::detail::IEEEFloat **)(a4 + 16), (llvm::Constant *)a1[12], 0);
    __int16 v64 = 257;
    unsigned int v35 = sub_1CC2429AC((uint64_t)&v65, (uint64_t)v32, (uint64_t)v33, (uint64_t)&v62, 0);
    int v36 = (llvm::ConstantInt **)a1[6];
    uint64_t v37 = *((unsigned int *)v16[63] + 1);
    unint64_t v38 = *v36;
    unint64_t v39 = *((unsigned int *)v36 + 2);
    LODWORD(v63) = v39 >> 8;
    if (v39 >> 8 > 0x40) {
      operator new[]();
    }
    if (v39 <= 0xFF) {
      unint64_t v40 = 0;
    }
    else {
      unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v39) + 63);
    }
    unint64_t v62 = (void *)(v40 & v37);
    int v41 = (llvm::ConstantExpr *)llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v62, v34);
    if (v63 >= 0x41 && v62) {
      MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
    }
    Sub = llvm::ConstantExpr::getSub(v41, *(llvm::Constant **)(a4 + 16), 0, 0);
    unint64_t v43 = sub_1CC56C0C0((llvm *)0x27, Sub, (llvm::Constant *)a1[12], 0);
    __int16 v64 = 257;
    unint64_t v44 = sub_1CC242524((uint64_t)&v65, (uint64_t)v32, (uint64_t)v43, (uint64_t)&v62, 0, 0);
    __int16 v64 = 257;
    unint64_t v45 = sub_1CB844AF4((uint64_t)&v65, v35, (uint64_t)v44, (uint64_t)&v62);
    uint64_t v46 = *(void *)(a4 + 24);
    __int16 v64 = 257;
    unsigned int v47 = sub_1CB845F20((uint64_t)&v65, 37, v45, v46, (uint64_t)&v62);
    uint64_t v10 = v47;
    if (*(_DWORD *)a4 != 4)
    {
      int v48 = (void *)*((void *)a3 + 1);
      if (v48)
      {
        if (!v48[1])
        {
          uint64_t v50 = v48[3];
          if (v50)
          {
            if (*(unsigned char *)(v50 + 16) == 30)
            {
              uint64_t v51 = (void *)*((void *)a3 + 4);
              BOOL v52 = !v51 || v51 == (void *)(*((void *)a3 + 5) + 40);
              uint64_t v53 = v52 ? 0 : (uint64_t)(v51 - 3);
              if (v53 == v50)
              {
                __int16 v64 = 257;
                llvm::BasicBlock::splitBasicBlock(v24, (uint64_t)a3 + 24, (uint64_t)&v62, 0);
              }
            }
          }
        }
      }
      sub_1CD1290BC((uint64_t)v47, (uint64_t)a3);
    }
  }
  if (v65 != v67) {
    free(v65);
  }
  return v10;
}

llvm::detail::IEEEFloat *sub_1CC954CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)a1;
  __int16 v16 = 1283;
  v15[0] = "__typeid_";
  v15[2] = a2;
  v15[3] = a3;
  v17[0] = v15;
  v17[2] = "_";
  __int16 v18 = 770;
  v19[0] = v17;
  v19[2] = a4;
  v19[3] = a5;
  __int16 v20 = 1282;
  llvm::Twine::str((llvm::Twine *)v19, v21);
  if (v22 >= 0) {
    unint64_t v7 = (unsigned __int8 *)v21;
  }
  else {
    unint64_t v7 = (unsigned __int8 *)v21[0];
  }
  if (v22 >= 0) {
    unint64_t v8 = v22 & 0x7F;
  }
  else {
    unint64_t v8 = (unint64_t)v21[1];
  }
  inserted = llvm::Module::getOrInsertGlobal(v6, v7, v8, *(llvm::PointerType **)(a1 + 64));
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (*((unsigned char *)inserted + 16) == 3 && inserted != 0)
  {
    int v11 = *((_DWORD *)inserted + 8);
    unsigned int v12 = v11 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)inserted + 8) = v12;
    if ((v11 & 0xFu) - 7 >= 2)
    {
      if (llvm::GlobalValue::hasExternalWeakLinkage(inserted)) {
        goto LABEL_17;
      }
      unsigned int v12 = *((_DWORD *)inserted + 8);
    }
    *((_DWORD *)inserted + 8) = v12 | 0x4000;
  }
LABEL_17:
  char v13 = *(llvm::Constant **)(a1 + 56);
  if (*(llvm::Constant **)inserted != v13) {
    return sub_1CC56C0C0((llvm *)0x31, inserted, v13, 0);
  }
  return inserted;
}

llvm::detail::IEEEFloat *sub_1CC954E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5, int a6, llvm::Constant *a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 28) - 41) <= 1 && *(_DWORD *)(a1 + 36) == 3)
  {
    uint64_t v10 = sub_1CC954CE0(*(void *)a2, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8), a3, a4);
    unsigned int v12 = llvm::Value::stripPointerCasts(v10);
    if (*((unsigned char *)a7 + 8) == 13) {
      uint64_t v10 = sub_1CC56C0C0((llvm *)0x2F, v10, a7, 0);
    }
    if ((*((unsigned char *)v12 + 23) & 0x20) == 0)
    {
LABEL_20:
      uint64_t v27 = *(void *)(a1 + 96);
      unsigned int v28 = *(_DWORD *)(v27 + 8);
      if (v28 >> 8 == a6)
      {
        char v29 = *(llvm::ConstantInt **)v27;
        LODWORD(v56) = a6;
        if (v28 >> 8 > 0x40) {
          operator new[]();
        }
        if (v28 <= 0xFF) {
          unint64_t v30 = 0;
        }
        else {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> ~(a6 + 63);
        }
        uint64_t v55 = v30;
        unint64_t v32 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v55, v11);
        if (v56 >= 0x41 && v55) {
          MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
        }
        uint64_t v34 = llvm::ValueAsMetadata::get(v32, v31);
        uint64_t v35 = *(void *)(a1 + 96);
        int v36 = *(llvm::ConstantInt **)v35;
        unsigned int v37 = *(_DWORD *)(v35 + 8);
        LODWORD(v56) = v37 >> 8;
        if (v37 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v37) + 63);
        if (v37 <= 0xFF) {
          unint64_t v38 = 0;
        }
      }
      else
      {
        int v41 = *(llvm::ConstantInt **)v27;
        LODWORD(v56) = *(_DWORD *)(v27 + 8) >> 8;
        if (v28 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v55 = 0;
        unint64_t v43 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v55, v11);
        if (v56 >= 0x41 && v55) {
          MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
        }
        uint64_t v44 = 1 << a6;
        uint64_t v34 = llvm::ValueAsMetadata::get(v43, v42);
        uint64_t v45 = *(void *)(a1 + 96);
        int v36 = *(llvm::ConstantInt **)v45;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        LODWORD(v56) = v46 >> 8;
        if (v46 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v47 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v46) + 63);
        if (v46 <= 0xFF) {
          unint64_t v47 = 0;
        }
        unint64_t v38 = v47 & v44;
      }
      uint64_t v55 = v38;
      uint64_t v49 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v36, (llvm::LLVMContext *)&v55, v33);
      if (v56 >= 0x41)
      {
        if (v55) {
          MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
        }
      }
      uint64_t v50 = llvm::ValueAsMetadata::get(v49, v48);
      uint64_t v51 = **(void **)a1;
      uint64_t v55 = v34;
      uint64_t v56 = v50;
      Impl = llvm::MDTuple::getImpl(v51, &v55, 2, 0, 1);
      llvm::Value::setMetadata((uint64_t ***)v12, 21, Impl);
      return v10;
    }
    uint64_t v13 = ***(void ***)v12;
    uint64_t v55 = (uint64_t)v12;
    int v14 = *(_DWORD *)(v13 + 2496);
    if (v14)
    {
      uint64_t v15 = *(void *)(v13 + 2480);
      int v16 = v14 - 1;
      unsigned int v17 = v16 & ((v12 >> 4) ^ (v12 >> 9));
      __int16 v18 = (llvm::Value **)(v15 + 40 * v17);
      uint64_t v19 = *v18;
      if (*v18 == v12)
      {
LABEL_16:
        uint64_t v24 = *((unsigned int *)v18 + 4);
        if (v24)
        {
          uint64_t v25 = (void *)((char *)v18[1] + 8);
          uint64_t v26 = 16 * v24;
          while (*((_DWORD *)v25 - 2) != 21)
          {
            v25 += 2;
            v26 -= 16;
            if (!v26) {
              goto LABEL_20;
            }
          }
          if (*v25) {
            return v10;
          }
        }
        goto LABEL_20;
      }
      __int16 v20 = 0;
      int v21 = 1;
      while (v19 != (llvm::Value *)-4096)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == (llvm::Value *)-8192;
        }
        if (v22) {
          __int16 v20 = v18;
        }
        unsigned int v23 = v17 + v21++;
        unsigned int v17 = v23 & v16;
        __int16 v18 = (llvm::Value **)(v15 + 40 * v17);
        uint64_t v19 = *v18;
        if (*v18 == v12) {
          goto LABEL_16;
        }
      }
      if (v20) {
        uint64_t v53 = v20;
      }
      else {
        uint64_t v53 = v18;
      }
    }
    else
    {
      uint64_t v53 = 0;
    }
    __int16 v18 = (llvm::Value **)sub_1CC609054(v13 + 2480, (uint64_t)&v55, &v55, v53);
    uint64_t v54 = v55;
    v18[3] = 0;
    v18[4] = 0;
    uint64_t *v18 = (llvm::Value *)v54;
    v18[1] = (llvm::Value *)(v18 + 3);
    v18[2] = (llvm::Value *)0x100000000;
    goto LABEL_16;
  }
  unint64_t v39 = a7;
  if (*((unsigned char *)a7 + 8) != 13) {
    unint64_t v39 = *(llvm::ConstantInt **)(a1 + 88);
  }
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get(v39, (unint64_t)a5, 0);
  if (*((unsigned char *)a7 + 8) == 13) {
    return v10;
  }

  return sub_1CC56C0C0((llvm *)0x30, v10, a7, 0);
}

uint64_t sub_1CC9553D0(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v48[6] = *MEMORY[0x1E4F143B8];
  while (1)
  {
    unsigned int v11 = *(unsigned __int8 *)(a3 + 16);
    if (v11 <= 4) {
      break;
    }
    if (v11 == 5)
    {
      unsigned int v12 = *(unsigned __int16 *)(a3 + 18);
      if (v12 == 49) {
        goto LABEL_17;
      }
      if (v12 == 34) {
        goto LABEL_41;
      }
      goto LABEL_19;
    }
    if (v11 == 62)
    {
LABEL_41:
      unsigned int v45 = *(_DWORD *)(*((void *)a2 + 29) + 4);
      if (v45 > 0x40) {
        operator new[]();
      }
      uint64_t v44 = 0;
      int v27 = *(_DWORD *)(a3 + 20);
      if ((v27 & 0x40000000) != 0)
      {
        uint64_t v29 = *(void *)(a3 - 8);
        uint64_t v28 = v27 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v28 = v27 & 0x7FFFFFF;
        uint64_t v29 = a3 - 32 * v28;
      }
      unsigned int v46 = v48;
      uint64_t v47 = 0x600000000;
      unint64_t v30 = 32 * v28 - 32;
      if (v30 >= 0xC1) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v31 = (llvm::Constant **)v48;
      if (v28 != 1)
      {
        unint64_t v32 = (uint64_t *)(v29 + 32);
        uint64_t v33 = v48;
        uint64_t v34 = 32 * v28 - 32;
        do
        {
          uint64_t v35 = *v32;
          v32 += 4;
          *v33++ = v35;
          v34 -= 32;
        }
        while (v34);
        unint64_t v31 = (llvm::Constant **)v46;
      }
      LODWORD(v47) = v30 >> 5;
      BOOL v36 = *(unsigned char *)(a3 + 16) != 62 || a3 == 0;
      uint64_t v37 = 64;
      if (v36) {
        uint64_t v37 = 24;
      }
      int v38 = llvm::GEPOperator::accumulateConstantOffset(*(void *)(a3 + v37), v31, (v30 >> 5), a2, (llvm::APInt *)&v44, 0, a7);
      if (v46 == v48)
      {
        if (v38) {
          goto LABEL_56;
        }
LABEL_65:
        uint64_t v26 = 0;
      }
      else
      {
        free(v46);
        if (!v38) {
          goto LABEL_65;
        }
LABEL_56:
        unint64_t v39 = &v44;
        if (v45 >= 0x41) {
          unint64_t v39 = v44;
        }
        uint64_t v40 = *v39 + a4;
        int v41 = *(_DWORD *)(a3 + 20);
        if ((v41 & 0x40000000) != 0) {
          uint64_t v42 = *(void **)(a3 - 8);
        }
        else {
          uint64_t v42 = (void *)(a3 - 32 * (v41 & 0x7FFFFFF));
        }
        uint64_t v26 = sub_1CC9553D0(a1, a2, *v42, v40);
      }
      if (v45 >= 0x41 && v44) {
        MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
      }
      return v26;
    }
LABEL_14:
    BOOL v14 = v11 >= 0x1C;
    unsigned int v12 = v11 - 28;
    if (!v14) {
      return 0;
    }
    if (v12 == 49)
    {
LABEL_17:
      int v15 = *(_DWORD *)(a3 + 20);
      if ((v15 & 0x40000000) != 0) {
        int v16 = *(uint64_t **)(a3 - 8);
      }
      else {
        int v16 = (uint64_t *)(a3 - 32 * (v15 & 0x7FFFFFF));
      }
      goto LABEL_29;
    }
LABEL_19:
    if (v12 != 57) {
      return 0;
    }
    int v17 = *(_DWORD *)(a3 + 20);
    uint64_t v18 = (v17 & 0x40000000) != 0 ? *(void *)(a3 - 8) : a3 - 32 * (v17 & 0x7FFFFFF);
    if (!sub_1CC9553D0(a1, a2, *(void *)(v18 + 32), a4)) {
      return 0;
    }
    int v19 = *(_DWORD *)(a3 + 20);
    if ((v19 & 0x40000000) != 0) {
      uint64_t v20 = *(void *)(a3 - 8);
    }
    else {
      uint64_t v20 = a3 - 32 * (v19 & 0x7FFFFFF);
    }
    int v16 = (uint64_t *)(v20 + 64);
LABEL_29:
    a3 = *v16;
  }
  if (v11 - 2 >= 2 && v11 != 0) {
    goto LABEL_14;
  }
  unsigned int v46 = v48;
  uint64_t v47 = 0x200000000;
  llvm::Value::getMetadata((unsigned int *)a3, 19, (uint64_t)&v46);
  if (v47)
  {
    uint64_t v21 = 8 * v47;
    BOOL v22 = (char *)v46;
    while (1)
    {
      unsigned int v23 = (void *)(*(void *)v22 - 8 * *(unsigned int *)(*(void *)v22 + 8));
      if (v23[1] == a1)
      {
        uint64_t v24 = *(void *)(*v23 + 128);
        uint64_t v25 = (void *)(v24 + 24);
        if (*(_DWORD *)(v24 + 32) >= 0x41u) {
          uint64_t v25 = (void *)*v25;
        }
        if (*v25 == a4) {
          break;
        }
      }
      v22 += 8;
      v21 -= 8;
      if (!v21) {
        goto LABEL_37;
      }
    }
    uint64_t v26 = 1;
  }
  else
  {
LABEL_37:
    uint64_t v26 = 0;
  }
  if (v46 != v48) {
    free(v46);
  }
  return v26;
}

llvm::Instruction *sub_1CC9557A4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  if (*(_DWORD *)a3 == 2)
  {
    unint64_t v7 = *(uint64_t **)(a3 + 48);
    uint64_t v8 = *v7;
    int v9 = *(_DWORD *)(*v7 + 8) >> 8;
    __int16 v50 = 257;
    unsigned int v11 = sub_1CB844B8C(a2, a4, v8, (uint64_t)&v48);
    uint64_t v12 = (v9 - 1);
    uint64_t v13 = *(llvm::ConstantInt **)v8;
    unsigned int v14 = *(_DWORD *)(v8 + 8);
    unsigned int v49 = v14 >> 8;
    if (v14 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v14) + 63);
    if (v14 <= 0xFF) {
      unint64_t v15 = 0;
    }
    int v48 = (const char *)(v15 & v12);
    int v16 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v48, v10);
    if (v49 >= 0x41 && v48) {
      MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
    }
    __int16 v50 = 257;
    uint64_t v18 = sub_1CBF52474(a2, v11, (uint64_t)v16, (uint64_t)&v48);
    int v19 = *(llvm::ConstantInt **)v8;
    unsigned int v20 = *(_DWORD *)(v8 + 8);
    unsigned int v49 = v20 >> 8;
    if (v20 >> 8 > 0x40) {
      operator new[]();
    }
    if (v20 <= 0xFF) {
      LOBYTE(v21) = 0;
    }
    else {
      unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v20) + 63);
    }
    int v48 = (const char *)(v21 & 1);
    BOOL v22 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v48, v17);
    if (v49 >= 0x41 && v48) {
      MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
    }
    __int16 v50 = 257;
    unsigned int v23 = sub_1CC242524(a2, (uint64_t)v22, (uint64_t)v18, (uint64_t)&v48, 0, 0);
    __int16 v50 = 257;
    uint64_t v25 = sub_1CBF52474(a2, v7, (uint64_t)v23, (uint64_t)&v48);
    uint64_t v26 = *(llvm::ConstantInt **)v8;
    unsigned int v27 = *(_DWORD *)(v8 + 8);
    unsigned int v49 = v27 >> 8;
    if (v27 >> 8 >= 0x41) {
      operator new[]();
    }
    int v48 = 0;
    uint64_t v28 = v26;
  }
  else
  {
    unint64_t v30 = *(uint64_t **)(a3 + 32);
    if (byte_1EBCE0F50 && !*(void *)(a1 + 16))
    {
      unsigned int v46 = *(llvm::PointerType **)(a1 + 48);
      int v48 = "bits_use";
      __int16 v50 = 259;
      unint64_t v30 = (uint64_t *)llvm::GlobalAlias::create(v46, 0, 8, &v48, (unint64_t)v30, *(void *)a1);
    }
    uint64_t v31 = *(void *)(a1 + 48);
    __int16 v50 = 257;
    unint64_t v32 = sub_1CB930F7C((uint64_t *)a2, v31, v30, (const char *)a4, (uint64_t)&v48);
    uint64_t v33 = *(llvm::Type **)(a1 + 48);
    v47[16] = 257;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a2 + 48) + 56) + 40) + 272), v33, 1);
    uint64_t v35 = operator new(0x60uLL);
    v35[13] = v35[13] & 0x38000000 | 1;
    BOOL v36 = (llvm::Instruction *)(v35 + 8);
    *(void *)uint64_t v35 = 0;
    *((void *)v35 + 1) = 0;
    *((void *)v35 + 2) = 0;
    *((void *)v35 + 3) = v35 + 8;
    __int16 v50 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v35 + 8), (uint64_t)v33, (uint64_t)v32, &v48, 0, Alignment, 0);
    (*(void (**)(void, llvm::Instruction *, _WORD *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v36, v47, *(void *)(a2 + 48), *(void *)(a2 + 56));
    uint64_t v37 = *(unsigned int *)(a2 + 8);
    if (v37)
    {
      uint64_t v44 = *(void *)a2;
      uint64_t v45 = *(void *)a2 + 16 * v37;
      do
      {
        llvm::Instruction::setMetadata(v36, *(_DWORD *)v44, *(llvm::MDNode **)(v44 + 8));
        v44 += 16;
      }
      while (v44 != v45);
    }
    int v38 = sub_1CC56C0C0((llvm *)0x2F, *(llvm::detail::IEEEFloat **)(a3 + 40), *(llvm::Constant **)(a1 + 48), 0);
    __int16 v50 = 257;
    uint64_t v25 = sub_1CBF52474(a2, v36, (uint64_t)v38, (uint64_t)&v48);
    uint64_t v39 = *(void *)(a1 + 48);
    uint64_t v40 = *(llvm::ConstantInt **)v39;
    unsigned int v41 = *(_DWORD *)(v39 + 8);
    unsigned int v49 = v41 >> 8;
    if (v41 >> 8 >= 0x41) {
      operator new[]();
    }
    int v48 = 0;
    uint64_t v28 = v40;
  }
  uint64_t v42 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v48, v24);
  if (v49 >= 0x41 && v48) {
    MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
  }
  __int16 v50 = 257;
  return sub_1CB845F20(a2, 33, v25, (uint64_t)v42, (uint64_t)&v48);
}

void sub_1CC955D1C(unint64_t *a1, llvm::Type *a2, llvm::PoisonValue **a3, int a4)
{
  v85[1] = *MEMORY[0x1E4F143B8];
  uint64_t v61 = 1;
  int64x2_t v62 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v63 = v62;
  int64x2_t v64 = v62;
  int64x2_t v65 = v62;
  uint64_t v66 = v68;
  uint64_t v67 = 0x800000000;
  sub_1CC956698(a2, (uint64_t)&v61);
  if (v67)
  {
    uint64_t v5 = (uint64_t *)v66;
    uint64_t v6 = (uint64_t *)((char *)v66 + 8 * v67);
    do
    {
      uint64_t v7 = *v5;
      unint64_t v8 = a1[20];
      if (!v8)
      {
        int v9 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(void **)*a1 + 1576), 0, 0, 0);
        unint64_t v10 = *a1;
        unsigned int v11 = (llvm::Type *)*(unsigned int *)(*a1 + 284);
        unint64_t v69 = "__cfi_global_var_init";
        __int16 v72 = 259;
        uint64_t v12 = (char *)operator new(0x80uLL);
        uint64_t v13 = v12 + 8;
        *((_DWORD *)v12 + 7) = *((_DWORD *)v12 + 7) & 0x38000000 | 0x40000000;
        *(void *)uint64_t v12 = 0;
        llvm::Function::Function((unint64_t *)v12 + 1, v9, 7, v11, (const char **)&v69, v10);
        a1[20] = (unint64_t)v13;
        unint64_t v69 = "entry";
        __int16 v72 = 259;
        operator new();
      }
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(v8 + 80);
      if (v15) {
        uint64_t v16 = v15 - 24;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void *)(v16 + 40);
      if (v17) {
        uint64_t v18 = (uint64_t **)(v17 - 24);
      }
      else {
        uint64_t v18 = 0;
      }
      if (*((unsigned __int8 *)v18 + 16) - 29 >= 0xB) {
        uint64_t v18 = 0;
      }
      uint64_t v19 = **v18;
      unint64_t v69 = v71;
      uint64_t v70 = 0x200000000;
      uint64_t v75 = v19;
      char v76 = &v84;
      uint64_t v77 = v85;
      uint64_t v78 = 0;
      int v79 = 0;
      __int16 v80 = 512;
      char v81 = 7;
      uint64_t v73 = 0;
      int v74 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      int64_t v84 = &unk_1F2616E88;
      v85[0] = &unk_1F2617008;
      uint64_t v73 = v18[5];
      int v74 = v18 + 3;
      unsigned int v20 = (unsigned __int8 *)v18[6];
      uint64_t v58 = v20;
      if (v20)
      {
        llvm::MetadataTracking::track((uint64_t)&v58, v20, 2);
        uint64_t v14 = (uint64_t)v58;
      }
      sub_1CB8461A4((uint64_t)&v69, 0, v14);
      if (!v58) {
        goto LABEL_16;
      }
      int v33 = *v58;
      if ((v33 - 4) > 0x1E)
      {
        if ((v33 - 3) >= 0xFFFFFFFE) {
          int v38 = v58;
        }
        else {
          int v38 = 0;
        }
        if ((v33 - 3) < 0xFFFFFFFE)
        {
          if (v33 == 3) {
            *((void *)v58 + 1) = 0;
          }
          goto LABEL_16;
        }
        unint64_t v35 = (unint64_t)(v38 + 8);
      }
      else
      {
        if ((v58[1] & 0x7F) != 2 && !*((_DWORD *)v58 + 3)) {
          goto LABEL_16;
        }
        uint64_t v34 = *((void *)v58 + 2);
        if ((v34 & 4) == 0) {
          goto LABEL_16;
        }
        unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
        if (!v35) {
          goto LABEL_16;
        }
      }
      v59[0] = &v58;
      sub_1CC5FA668(v35 + 16, v59);
LABEL_16:
      *(unsigned char *)(v7 + 80) &= ~1u;
      uint64_t v21 = *(void *)(v7 - 32);
      if ((*(_WORD *)(v7 + 34) & 0x3F) != 0) {
        char Alignment = (*(_WORD *)(v7 + 34) & 0x3F) - 1;
      }
      else {
        char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v73[7] + 40) + 272), *(llvm::Type **)v21, 1);
      }
      unsigned int v23 = (char *)operator new(0x80uLL);
      *((_DWORD *)v23 + 21) = *((_DWORD *)v23 + 21) & 0x38000000 | 2;
      *(void *)unsigned int v23 = 0;
      *((void *)v23 + 2) = 0;
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 5) = 0;
      *((void *)v23 + 6) = 0;
      *((void *)v23 + 4) = 0;
      *((void *)v23 + 8) = ***(void ***)v21 + 1576;
      uint64_t v24 = (llvm::Instruction *)(v23 + 64);
      *((void *)v23 + 3) = v23 + 64;
      *((void *)v23 + 7) = v23 + 64;
      *((void *)v23 + 9) = 0;
      v23[80] = 61;
      v23[81] = 0;
      *((_WORD *)v23 + 41) = 0;
      *((_DWORD *)v23 + 21) = 2;
      *(_OWORD *)(v23 + 88) = 0u;
      *(_OWORD *)(v23 + 104) = 0u;
      *((_DWORD *)v23 + 30) = 0;
      *(void *)unsigned int v23 = v21;
      uint64_t v27 = *(void *)(v21 + 8);
      uint64_t v26 = (void *)(v21 + 8);
      uint64_t v25 = v27;
      *((void *)v23 + 1) = v27;
      if (v27) {
        *(void *)(v25 + 16) = v23 + 8;
      }
      *((void *)v23 + 2) = v26;
      *uint64_t v26 = v23;
      if (*((void *)v23 + 4))
      {
        **((void **)v23 + 6) = *((void *)v23 + 5);
        uint64_t v39 = *((void *)v23 + 5);
        if (v39) {
          *(void *)(v39 + 16) = *((void *)v23 + 6);
        }
      }
      *((void *)v23 + 4) = v7;
      uint64_t v28 = (void *)(v7 + 8);
      uint64_t v29 = *(void *)(v7 + 8);
      *((void *)v23 + 5) = v29;
      if (v29) {
        *(void *)(v29 + 16) = v23 + 40;
      }
      *((void *)v23 + 6) = v28;
      *uint64_t v28 = v23 + 32;
      *((_WORD *)v23 + 41) = 2 * (Alignment & 0x3F);
      v23[124] = 1;
      __int16 v60 = 257;
      (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v77 + 16))(v77, v24, v59, v73, v74);
      if (v70)
      {
        BOOL v36 = v69;
        uint64_t v37 = &v69[16 * v70];
        do
        {
          llvm::Instruction::setMetadata(v24, *(_DWORD *)v36, *((llvm::MDNode **)v36 + 1));
          v36 += 16;
        }
        while (v36 != v37);
      }
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v7 + 24), v30, v31);
      llvm::GlobalVariable::setInitializer(v7, NullValue);
      if (v69 != v71) {
        free(v69);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v40 = (llvm::PointerType *)*((void *)a2 + 3);
  unsigned int v41 = (llvm::Type *)(*(_DWORD *)(*(void *)a2 + 8) >> 8);
  __int16 v72 = 257;
  unint64_t v42 = *a1;
  unint64_t v43 = (unint64_t *)operator new(0x80uLL);
  uint64_t v44 = (llvm::Value *)(v43 + 1);
  *((_DWORD *)v43 + 7) = *((_DWORD *)v43 + 7) & 0x38000000 | 0x40000000;
  unint64_t *v43 = 0;
  llvm::Function::Function(v43 + 1, v40, 9, v41, (const char **)&v69, v42);
  sub_1CC9564BC((uint64_t)a2, v44, a4);
  uint64_t v47 = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v45, v46);
  ICmp = (llvm::ConstantExpr *)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x21, a2, v47, 0, v48);
  BOOL v52 = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v50, v51);
  Select = llvm::ConstantExpr::getSelect(ICmp, a3, v52, 0, v53);
  llvm::Value::doRAUW(v44, Select, (llvm::Value *)1);
  llvm::Function::eraseFromParent(v44);
  if (v66 != v68) {
    free(v66);
  }
  if ((v61 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v62.i64[0], 8);
  }
}

void sub_1CC9564BC(uint64_t a1, llvm::Value *a2, int a3)
{
  v25[4] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 1;
  int64x2_t v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v22 = v21;
  unsigned int v23 = v25;
  uint64_t v24 = 0x400000000;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v7 = (uint64_t *)((char *)a2 + 8);
    do
    {
      uint64_t v8 = v3;
      int v9 = (uint64_t *)(v3 + 8);
      uint64_t v3 = *(void *)(v3 + 8);
      uint64_t v10 = v9[2];
      unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 != 4 && v11 != 7)
      {
        BOOL v13 = v11 == 84 && v10 - 32 == v8;
        if (!v13 || (*(unsigned char *)(a1 + 33) & 0x40) == 0 && a3)
        {
          if (v11 >= 0x15) {
            uint64_t v10 = 0;
          }
          uint64_t v19 = v10;
          if (v10 && *(unsigned __int8 *)(v10 + 16) >= 4u)
          {
            sub_1CD4B43C4((uint64_t)&v20, &v19);
          }
          else
          {
            if (*(void *)v8)
            {
              **(void **)(v8 + 16) = v3;
              uint64_t v14 = *(void *)(v8 + 8);
              if (v14) {
                *(void *)(v14 + 16) = *(void *)(v8 + 16);
              }
            }
            *(void *)uint64_t v8 = a2;
            if (a2)
            {
              uint64_t v15 = *v7;
              *int v9 = *v7;
              if (v15) {
                *(void *)(v15 + 16) = v9;
              }
              *(void *)(v8 + 16) = v7;
              *uint64_t v7 = v8;
            }
          }
        }
      }
    }
    while (v3);
    uint64_t v16 = (uint64_t ****)v23;
    if (v24)
    {
      uint64_t v17 = 8 * v24;
      do
      {
        uint64_t v18 = *v16++;
        llvm::Constant::handleOperandChange(v18, (llvm::Value *)a1, a2);
        v17 -= 8;
      }
      while (v17);
      uint64_t v16 = (uint64_t ****)v23;
    }
    if (v16 != v25) {
      free(v16);
    }
  }
  if ((v20 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v21.i64[0], 8);
  }
}

BOOL sub_1CC95666C(uint64_t a1)
{
  BOOL result = 0;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 16) == 84) {
      return v3 - 32 == a1;
    }
  }
  return result;
}

void *sub_1CC956698(void *result, uint64_t a2)
{
  for (uint64_t i = result[1]; i; uint64_t i = *(void *)(i + 8))
  {
    BOOL result = *(void **)(i + 24);
    unsigned int v4 = *((unsigned __int8 *)result + 16);
    if (v4 == 3) {
      uint64_t v5 = *(void *)(i + 24);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = v5;
    if (v5)
    {
      BOOL result = sub_1CD53F714(a2, &v6);
    }
    else if (v4 <= 0x14)
    {
      BOOL result = (void *)sub_1CC956698();
    }
  }
  return result;
}

uint64_t sub_1CC95670C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v8 = sub_1CD0B03C8(*(void **)a3, *(void *)a3 + *(void *)(a3 + 8));
    uint64_t v9 = 0;
    unsigned int v10 = a2 - 1;
    unsigned int v11 = *(const void **)a3;
    size_t v12 = *(void *)(a3 + 8);
    for (int i = 1; ; ++i)
    {
      uint64_t v14 = v8 & v10;
      uint64_t v15 = a1 + 32 * v14;
      uint64_t v16 = *(const void **)v15;
      if (*(void *)v15 == -2)
      {
        if (v11 == (const void *)-2) {
          goto LABEL_19;
        }
      }
      else if (v16 == (const void *)-1)
      {
        if (v11 == (const void *)-1) {
          goto LABEL_19;
        }
      }
      else if (v12 == *(void *)(v15 + 8) && (!v12 || !memcmp(v11, *(const void **)v15, v12)))
      {
LABEL_19:
        uint64_t result = 1;
        goto LABEL_23;
      }
      if (v16 == (const void *)-1) {
        break;
      }
      if (v9) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v16 == (const void *)-2;
      }
      if (v17) {
        uint64_t v9 = a1 + 32 * v14;
      }
      int v8 = i + v14;
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v15 = v9;
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t result = 0;
  }
LABEL_23:
  *a4 = v15;
  return result;
}

void *sub_1CC95681C(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC9568D0(a1, v6);
  int v8 = 0;
  sub_1CC95670C(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_OWORD *sub_1CC9568D0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *uint64_t result = xmmword_1CFAC4A20;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      BOOL v13 = (_OWORD *)v4;
      do
      {
        if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          BOOL v17 = 0;
          sub_1CC95670C(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v13, &v17);
          uint64_t v14 = v17;
          *BOOL v17 = *v13;
          v14[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 32 * v15;
    do
    {
      *uint64_t result = xmmword_1CFAC4A20;
      result += 2;
      v16 -= 32;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1CC956A1C(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(result + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(result + 16 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_13;
        }
      }
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
LABEL_13:
  *a4 = v6;
  return result;
}

void *sub_1CC956A98(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 16 * v15;
      do
      {
        *uint64_t v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if (v6)
    {
      int v17 = 0;
      uint64_t v18 = (uint64_t *)(v9 + 8);
      uint64_t v19 = 16 * v6;
      do
      {
        uint64_t v20 = *(v18 - 1);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v25 = 0;
          sub_1CC956A1C(*(void *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          int64x2_t v21 = v25;
          *uint64_t v25 = v20;
          v21[1] = *v18;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    uint64_t v14 = *(void **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v22 = *(unsigned int *)(a1 + 16);
    if (v22)
    {
      uint64_t v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 2;
      }
      while (2 * v22 != v23);
    }
  }
  sub_1CC956A1C((uint64_t)v14, v22, *a2, &v24);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC956C5C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v14 = operator new(40 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 40 * v15;
      do
      {
        *uint64_t v14 = -4096;
        v14 += 5;
        v16 -= 40;
      }
      while (v16);
    }
    if (v6)
    {
      int v17 = 0;
      uint64_t v18 = v9 + 16;
      uint64_t v19 = 40 * v6;
      do
      {
        uint64_t v20 = *(void *)(v18 - 16);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v25 = 0;
          sub_1CBA9C7FC(*(void *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          int64x2_t v21 = v25;
          *uint64_t v25 = v20;
          *((_DWORD *)v21 + 2) = *(_DWORD *)(v18 - 8);
          v21[3] = 0;
          void v21[4] = 0;
          v21[2] = 0;
          *((_OWORD *)v21 + 1) = *(_OWORD *)v18;
          void v21[4] = *(void *)(v18 + 16);
          ++v17;
          *(void *)uint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
          *(void *)(v18 + 16) = 0;
          *(_DWORD *)(a1 + 8) = v17;
        }
        v18 += 40;
        v19 -= 40;
      }
      while (v19);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    uint64_t v14 = *(void **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v22 = *(unsigned int *)(a1 + 16);
    if (v22)
    {
      uint64_t v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 5;
      }
      while (5 * v22 != v23);
    }
  }
  sub_1CBA9C7FC((uint64_t)v14, v22, *a2, &v24);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC956E50(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v14 = operator new(40 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 40 * v15;
      do
      {
        *uint64_t v14 = -4096;
        v14 += 5;
        v16 -= 40;
      }
      while (v16);
    }
    if (v6)
    {
      int v17 = 0;
      uint64_t v18 = v9 + 24;
      uint64_t v19 = 40 * v6;
      do
      {
        uint64_t v20 = *(void *)(v18 - 24);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v25 = 0;
          sub_1CBA9C7FC(*(void *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          int64x2_t v21 = v25;
          *uint64_t v25 = v20;
          v21[1] = 0;
          v21[2] = 0;
          v21[3] = 0;
          *(_OWORD *)(v21 + 1) = *(_OWORD *)(v18 - 16);
          v21[3] = *(void *)v18;
          *(void *)(v18 - 8) = 0;
          *(void *)uint64_t v18 = 0;
          *(void *)(v18 - 16) = 0;
          *((unsigned char *)v21 + 32) = *(unsigned char *)(v18 + 8);
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v18 += 40;
        v19 -= 40;
      }
      while (v19);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    uint64_t v14 = *(void **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v22 = *(unsigned int *)(a1 + 16);
    if (v22)
    {
      uint64_t v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 5;
      }
      while (5 * v22 != v23);
    }
  }
  sub_1CBA9C7FC((uint64_t)v14, v22, *a2, &v24);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CC957040(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    uint64_t v2 = *(void *)a1;
    if ((*(unsigned char *)(*(void *)v1 + 8) & 1) == 0)
    {
      uint64_t v2 = sub_1CC957040();
      *(void *)uint64_t v1 = v2;
    }
    return v2;
  }
  return v1;
}

void *sub_1CC957084(void *result)
{
  if ((*result & 2) != 0)
  {
    uint64_t v1 = (void **)(*result & 0xFFFFFFFFFFFFFFFCLL);
    if (v1)
    {
      uint64_t v2 = result;
      unint64_t v3 = *result & 0xFFFFFFFFFFFFFFFCLL;
      if (*v1 != v1 + 2) {
        free(*v1);
      }
      MEMORY[0x1D25D9CE0](v3, 0x1080C40ED926357);
      return v2;
    }
  }
  return result;
}

uint64_t *sub_1CC9570E4(uint64_t *result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = (uint64_t)(a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unsigned int v42 = *(_DWORD *)(a2 - 8);
                unsigned int v43 = *(_DWORD *)(v10 + 8);
                if (v42 < v43)
                {
                  uint64_t v44 = *(void *)v10;
                  *(void *)unint64_t v10 = *(void *)(a2 - 16);
                  *(void *)(a2 - 16) = v44;
                  *(_DWORD *)(v10 + 8) = v42;
                  *(_DWORD *)(a2 - 8) = v43;
                }
                break;
              case 3:
                uint64_t result = sub_1CC9578B8((uint64_t *)v10, (uint64_t *)(v10 + 16), (uint64_t *)(a2 - 16));
                break;
              case 4:
                uint64_t result = sub_1CC957BA4(v10, v10 + 16, v10 + 32, a2 - 16);
                break;
              case 5:
                uint64_t result = sub_1CC957BA4(v10, v10 + 16, v10 + 32, v10 + 48);
                unsigned int v45 = *(_DWORD *)(a2 - 8);
                unsigned int v46 = *(_DWORD *)(v10 + 56);
                if (v45 < v46)
                {
                  uint64_t v47 = *(void *)(v10 + 48);
                  *(void *)(v10 + 48) = *(void *)(a2 - 16);
                  *(void *)(a2 - 16) = v47;
                  *(_DWORD *)(v10 + 56) = v45;
                  *(_DWORD *)(a2 - 8) = v46;
                  unsigned int v48 = *(_DWORD *)(v10 + 56);
                  unsigned int v49 = *(_DWORD *)(v10 + 40);
                  if (v48 < v49)
                  {
                    uint64_t v50 = *(void *)(v10 + 32);
                    uint64_t v51 = *(void *)(v10 + 48);
                    *(void *)(v10 + 32) = v51;
                    *(void *)(v10 + 48) = v50;
                    *(_DWORD *)(v10 + 40) = v48;
                    *(_DWORD *)(v10 + 56) = v49;
                    unsigned int v52 = *(_DWORD *)(v10 + 24);
                    if (v48 < v52)
                    {
                      uint64_t v53 = *(void *)(v10 + 16);
                      *(void *)(v10 + 16) = v51;
                      *(void *)(v10 + 32) = v53;
                      *(_DWORD *)(v10 + 24) = v48;
                      *(_DWORD *)(v10 + 40) = v52;
                      unsigned int v54 = *(_DWORD *)(v10 + 8);
                      if (v48 < v54)
                      {
                        uint64_t v55 = *(void *)v10;
                        *(void *)unint64_t v10 = v51;
                        *(void *)(v10 + 16) = v55;
                        *(_DWORD *)(v10 + 8) = v48;
                        *(_DWORD *)(v10 + 24) = v54;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v56 = (void *)(v10 + 16);
            BOOL v58 = v10 == a2 || v56 == (void *)a2;
            if (a4)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                __int16 v60 = (void *)v10;
                do
                {
                  unsigned int v61 = *((_DWORD *)v60 + 6);
                  unsigned int v62 = *((_DWORD *)v60 + 2);
                  __int16 v60 = v56;
                  if (v61 < v62)
                  {
                    uint64_t v63 = *v56;
                    uint64_t v64 = v59;
                    while (1)
                    {
                      uint64_t v65 = v10 + v64;
                      *(void *)(v65 + 16) = *(void *)(v10 + v64);
                      *(_DWORD *)(v65 + 24) = *(_DWORD *)(v10 + v64 + 8);
                      if (!v64) {
                        break;
                      }
                      v64 -= 16;
                      if (v61 >= *(_DWORD *)(v65 - 8))
                      {
                        uint64_t v66 = v10 + v64 + 16;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v66 = v10;
LABEL_85:
                    *(void *)uint64_t v66 = v63;
                    *(_DWORD *)(v66 + 8) = v61;
                  }
                  uint64_t v56 = v60 + 2;
                  v59 += 16;
                }
                while (v60 + 2 != (void *)a2);
              }
            }
            else if (!v58)
            {
              __int16 v98 = (unsigned int *)(v10 + 24);
              do
              {
                unsigned int v99 = *(_DWORD *)(v9 + 24);
                unsigned int v100 = *(_DWORD *)(v9 + 8);
                unint64_t v9 = (unint64_t)v56;
                if (v99 < v100)
                {
                  uint64_t v101 = *v56;
                  uint64_t v102 = v98;
                  do
                  {
                    uint64_t v103 = v102;
                    *((void *)v102 - 1) = *((void *)v102 - 3);
                    unsigned int v104 = *(v102 - 4);
                    v102 -= 4;
                    *uint64_t v103 = v104;
                  }
                  while (v99 < *(v103 - 8));
                  *((void *)v102 - 1) = v101;
                  *uint64_t v102 = v99;
                }
                uint64_t v56 = (void *)(v9 + 16);
                v98 += 4;
              }
              while (v9 + 16 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v67 = (unint64_t)(v12 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = (2 * v68) | 1;
                  unint64_t v71 = v10 + 16 * v70;
                  if (2 * v69 + 2 < v12)
                  {
                    unsigned int v72 = *(_DWORD *)(v71 + 8);
                    unsigned int v73 = *(_DWORD *)(v71 + 24);
                    v71 += 16 * (v72 < v73);
                    if (v72 < v73) {
                      uint64_t v70 = 2 * v69 + 2;
                    }
                  }
                  unsigned int v74 = *(_DWORD *)(v71 + 8);
                  unsigned int v75 = *(_DWORD *)(v10 + 16 * v69 + 8);
                  if (v74 >= v75)
                  {
                    unint64_t v76 = v10 + 16 * v69;
                    uint64_t v77 = *(void *)v76;
                    do
                    {
                      unint64_t v78 = v76;
                      unint64_t v76 = v71;
                      *(void *)unint64_t v78 = *(void *)v71;
                      *(_DWORD *)(v78 + 8) = v74;
                      if (v67 < v70) {
                        break;
                      }
                      uint64_t v79 = (2 * v70) | 1;
                      unint64_t v71 = v10 + 16 * v79;
                      uint64_t v80 = 2 * v70 + 2;
                      if (v80 < v12)
                      {
                        unsigned int v81 = *(_DWORD *)(v71 + 8);
                        uint64_t result = (uint64_t *)*(unsigned int *)(v71 + 24);
                        v71 += 16 * (v81 < result);
                        if (v81 < result) {
                          uint64_t v79 = v80;
                        }
                      }
                      unsigned int v74 = *(_DWORD *)(v71 + 8);
                      uint64_t v70 = v79;
                    }
                    while (v74 >= v75);
                    *(void *)unint64_t v76 = v77;
                    *(_DWORD *)(v76 + 8) = v75;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              do
              {
                uint64_t v82 = 0;
                uint64_t v83 = *(void *)v10;
                int v84 = *(_DWORD *)(v10 + 8);
                unint64_t v85 = v10;
                do
                {
                  unint64_t v86 = v85 + 16 * (v82 + 1);
                  uint64_t v87 = (2 * v82) | 1;
                  uint64_t v88 = 2 * v82 + 2;
                  if (v88 < v12)
                  {
                    unsigned int v89 = *(_DWORD *)(v86 + 8);
                    unsigned int v90 = *(_DWORD *)(v86 + 24);
                    v86 += 16 * (v89 < v90);
                    if (v89 < v90) {
                      uint64_t v87 = v88;
                    }
                  }
                  *(void *)unint64_t v85 = *(void *)v86;
                  *(_DWORD *)(v85 + 8) = *(_DWORD *)(v86 + 8);
                  unint64_t v85 = v86;
                  uint64_t v82 = v87;
                }
                while (v87 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v86 == a2 - 16)
                {
                  *(void *)unint64_t v86 = v83;
                  *(_DWORD *)(v86 + 8) = v84;
                }
                else
                {
                  *(void *)unint64_t v86 = *(void *)(a2 - 16);
                  *(_DWORD *)(v86 + 8) = *(_DWORD *)(a2 - 8);
                  *(void *)(a2 - 16) = v83;
                  *(_DWORD *)(a2 - 8) = v84;
                  uint64_t v91 = v86 - v10 + 16;
                  if (v91 >= 17)
                  {
                    unint64_t v92 = (((unint64_t)v91 >> 4) - 2) >> 1;
                    unsigned int v93 = *(_DWORD *)(v10 + 16 * v92 + 8);
                    unsigned int v94 = *(_DWORD *)(v86 + 8);
                    if (v93 < v94)
                    {
                      uint64_t v95 = *(void *)v86;
                      do
                      {
                        unint64_t v96 = v86;
                        unint64_t v86 = v10 + 16 * v92;
                        *(void *)unint64_t v96 = *(void *)v86;
                        *(_DWORD *)(v96 + 8) = v93;
                        if (!v92) {
                          break;
                        }
                        unint64_t v92 = (v92 - 1) >> 1;
                        unsigned int v93 = *(_DWORD *)(v10 + 16 * v92 + 8);
                      }
                      while (v93 < v94);
                      *(void *)unint64_t v86 = v95;
                      *(_DWORD *)(v86 + 8) = v94;
                    }
                  }
                }
                a2 -= 16;
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 16 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 >= 0x801)
          {
            sub_1CC9578B8((uint64_t *)v9, (uint64_t *)(v9 + 16 * ((unint64_t)v12 >> 1)), (uint64_t *)(a2 - 16));
            sub_1CC9578B8((uint64_t *)(v9 + 16), (uint64_t *)(v14 - 16), (uint64_t *)(a2 - 32));
            sub_1CC9578B8((uint64_t *)(v9 + 32), (uint64_t *)(v9 + 16 + 16 * v13), (uint64_t *)(a2 - 48));
            uint64_t result = sub_1CC9578B8((uint64_t *)(v14 - 16), (uint64_t *)v14, (uint64_t *)(v9 + 16 + 16 * v13));
            uint64_t v15 = *(void *)v9;
            *(void *)unint64_t v9 = *(void *)v14;
            *(void *)unint64_t v14 = v15;
            LODWORD(v15) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v14 + 8);
            *(_DWORD *)(v14 + 8) = v15;
          }
          else
          {
            uint64_t result = sub_1CC9578B8((uint64_t *)(v9 + 16 * ((unint64_t)v12 >> 1)), (uint64_t *)v9, (uint64_t *)(a2 - 16));
          }
          --a3;
          if (a4) {
            break;
          }
          unsigned int v16 = *(_DWORD *)(v9 + 8);
          if (*(_DWORD *)(v9 - 8) < v16) {
            goto LABEL_13;
          }
          if (v16 >= *(_DWORD *)(a2 - 8))
          {
            unint64_t v33 = v9 + 16;
            do
            {
              unint64_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              unsigned int v34 = *(_DWORD *)(v33 + 8);
              v33 += 16;
            }
            while (v16 >= v34);
          }
          else
          {
            unint64_t v31 = v9;
            do
            {
              unint64_t v10 = v31 + 16;
              unsigned int v32 = *(_DWORD *)(v31 + 24);
              v31 += 16;
            }
            while (v16 >= v32);
          }
          unint64_t v35 = a2;
          if (v10 < a2)
          {
            unint64_t v36 = a2;
            do
            {
              unint64_t v35 = v36 - 16;
              unsigned int v37 = *(_DWORD *)(v36 - 8);
              v36 -= 16;
            }
            while (v16 < v37);
          }
          uint64_t v38 = *(void *)v9;
          while (v10 < v35)
          {
            uint64_t v39 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v35;
            *(void *)unint64_t v35 = v39;
            LODWORD(v39) = *(_DWORD *)(v10 + 8);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v35 + 8);
            *(_DWORD *)(v35 + 8) = v39;
            do
            {
              unsigned int v40 = *(_DWORD *)(v10 + 24);
              v10 += 16;
            }
            while (v16 >= v40);
            do
            {
              unsigned int v41 = *(_DWORD *)(v35 - 8);
              v35 -= 16;
            }
            while (v16 < v41);
          }
          BOOL v4 = v10 - 16 >= v9;
          BOOL v5 = v10 - 16 == v9;
          if (v10 - 16 != v9)
          {
            *(void *)unint64_t v9 = *(void *)(v10 - 16);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 8);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v38;
          *(_DWORD *)(v10 - 8) = v16;
        }
        unsigned int v16 = *(_DWORD *)(v9 + 8);
LABEL_13:
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)v9;
        do
        {
          unsigned int v19 = *(_DWORD *)(v9 + v17 + 24);
          v17 += 16;
        }
        while (v19 < v16);
        unint64_t v20 = v9 + v17;
        unint64_t v21 = a2;
        if (v17 == 16)
        {
          unint64_t v24 = a2;
          while (v20 < v24)
          {
            unint64_t v22 = v24 - 16;
            unsigned int v25 = *(_DWORD *)(v24 - 8);
            v24 -= 16;
            if (v25 < v16) {
              goto LABEL_23;
            }
          }
          unint64_t v22 = v24;
        }
        else
        {
          do
          {
            unint64_t v22 = v21 - 16;
            unsigned int v23 = *(_DWORD *)(v21 - 8);
            v21 -= 16;
          }
          while (v23 >= v16);
        }
LABEL_23:
        unint64_t v10 = v20;
        if (v20 < v22)
        {
          unint64_t v26 = v22;
          do
          {
            uint64_t v27 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v26;
            *(void *)unint64_t v26 = v27;
            LODWORD(v27) = *(_DWORD *)(v10 + 8);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v26 + 8);
            *(_DWORD *)(v26 + 8) = v27;
            do
            {
              unsigned int v28 = *(_DWORD *)(v10 + 24);
              v10 += 16;
            }
            while (v28 < v16);
            do
            {
              unsigned int v29 = *(_DWORD *)(v26 - 8);
              v26 -= 16;
            }
            while (v29 >= v16);
          }
          while (v10 < v26);
        }
        if (v10 - 16 != v9)
        {
          *(void *)unint64_t v9 = *(void *)(v10 - 16);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 8);
        }
        *(void *)(v10 - 16) = v18;
        *(_DWORD *)(v10 - 8) = v16;
        if (v20 >= v22) {
          break;
        }
LABEL_34:
        uint64_t result = (uint64_t *)sub_1CC9570E4(v9, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = sub_1CC957970(v9, v10 - 16);
      uint64_t result = (uint64_t *)sub_1CC957970(v10, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 16;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC9578B8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  unsigned int v4 = *((_DWORD *)result + 2);
  unsigned int v5 = *((_DWORD *)a3 + 2);
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      uint64_t v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      *((_DWORD *)a2 + 2) = v5;
      *((_DWORD *)a3 + 2) = v3;
      unsigned int v8 = *((_DWORD *)a2 + 2);
      unsigned int v9 = *((_DWORD *)result + 2);
      if (v8 < v9)
      {
        uint64_t v10 = *result;
        *uint64_t result = *a2;
        *a2 = v10;
        *((_DWORD *)result + 2) = v8;
        *((_DWORD *)a2 + 2) = v9;
      }
    }
  }
  else
  {
    uint64_t v6 = *result;
    if (v5 >= v3)
    {
      *uint64_t result = *a2;
      *a2 = v6;
      *((_DWORD *)result + 2) = v3;
      *((_DWORD *)a2 + 2) = v4;
      unsigned int v11 = *((_DWORD *)a3 + 2);
      if (v11 >= v4) {
        return result;
      }
      *a2 = *a3;
      *a3 = v6;
      *((_DWORD *)a2 + 2) = v11;
    }
    else
    {
      *uint64_t result = *a3;
      *a3 = v6;
      *((_DWORD *)result + 2) = v5;
    }
    *((_DWORD *)a3 + 2) = v4;
  }
  return result;
}

BOOL sub_1CC957970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 8);
      unsigned int v7 = *(_DWORD *)(a1 + 8);
      if (v6 < v7)
      {
        uint64_t v8 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v8;
        *(_DWORD *)(a1 + 8) = v6;
        *(_DWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      sub_1CC9578B8((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 16));
      return 1;
    case 4:
      sub_1CC957BA4(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1CC957BA4(a1, a1 + 16, a1 + 32, a1 + 48);
      unsigned int v18 = *(_DWORD *)(a2 - 8);
      unsigned int v19 = *(_DWORD *)(a1 + 56);
      if (v18 < v19)
      {
        uint64_t v20 = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v20;
        *(_DWORD *)(a1 + 56) = v18;
        *(_DWORD *)(a2 - 8) = v19;
        unsigned int v21 = *(_DWORD *)(a1 + 56);
        unsigned int v22 = *(_DWORD *)(a1 + 40);
        if (v21 < v22)
        {
          uint64_t v23 = *(void *)(a1 + 32);
          uint64_t v24 = *(void *)(a1 + 48);
          *(void *)(a1 + 32) = v24;
          *(void *)(a1 + 48) = v23;
          *(_DWORD *)(a1 + 40) = v21;
          *(_DWORD *)(a1 + 56) = v22;
          unsigned int v25 = *(_DWORD *)(a1 + 24);
          if (v21 < v25)
          {
            uint64_t v26 = *(void *)(a1 + 16);
            *(void *)(a1 + 16) = v24;
            *(void *)(a1 + 32) = v26;
            *(_DWORD *)(a1 + 24) = v21;
            *(_DWORD *)(a1 + 40) = v25;
            unsigned int v27 = *(_DWORD *)(a1 + 8);
            if (v21 < v27)
            {
              uint64_t v28 = *(void *)a1;
              *(void *)a1 = v24;
              *(void *)(a1 + 16) = v28;
              *(_DWORD *)(a1 + 8) = v21;
              *(_DWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 32;
      sub_1CC9578B8((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *(_DWORD *)(v10 + 8);
    if (v13 < *(_DWORD *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(void *)(v16 + 48) = *(void *)(a1 + v15 + 32);
        *(_DWORD *)(v16 + 56) = *(_DWORD *)(a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 >= *(_DWORD *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(_DWORD *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC957BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = sub_1CC9578B8((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  unsigned int v9 = *(_DWORD *)(a4 + 8);
  unsigned int v10 = *(_DWORD *)(a3 + 8);
  if (v9 < v10)
  {
    uint64_t v11 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v11;
    *(_DWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a4 + 8) = v10;
    unsigned int v12 = *(_DWORD *)(a3 + 8);
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    if (v12 < v13)
    {
      uint64_t v14 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v14;
      *(_DWORD *)(a2 + 8) = v12;
      *(_DWORD *)(a3 + 8) = v13;
      unsigned int v15 = *(_DWORD *)(a2 + 8);
      unsigned int v16 = *(_DWORD *)(a1 + 8);
      if (v15 < v16)
      {
        uint64_t v17 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v17;
        *(_DWORD *)(a1 + 8) = v15;
        *(_DWORD *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

uint64_t sub_1CC957C54(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
  while (2)
  {
    int64_t v112 = a2 - 2;
    BOOL v114 = a2 - 1;
    uint64_t v111 = a2 - 3;
    unsigned int v12 = v11;
    uint64_t v117 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v53 = *(a2 - 1);
                uint64_t v119 = *v11;
                uint64_t v120 = v53;
                unsigned int v54 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                if (v54 < *(_DWORD *)result)
                {
                  uint64_t v55 = *v11;
                  *uint64_t v11 = *(a2 - 1);
                  *(a2 - 1) = v55;
                }
                break;
              case 3:
                BOOL result = (uint64_t)sub_1CC958810(v11, v11 + 1, v114, a3);
                break;
              case 4:
                BOOL result = (uint64_t)sub_1CC958BD0(v11, v11 + 1, v11 + 2, v114, a3);
                break;
              case 5:
                BOOL result = (uint64_t)sub_1CC9586A4(v11, v11 + 1, v11 + 2, v11 + 3, v114, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            uint64_t v56 = v11 + 1;
            BOOL v58 = v11 == a2 || v56 == a2;
            if (a5)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                __int16 v60 = v11;
                do
                {
                  uint64_t v62 = *v60;
                  uint64_t v61 = v60[1];
                  __int16 v60 = v56;
                  uint64_t v119 = v62;
                  uint64_t v120 = v61;
                  unsigned int v63 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                  BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                  if (v63 < *(_DWORD *)result)
                  {
                    uint64_t v64 = *v60;
                    uint64_t v65 = v59;
                    while (1)
                    {
                      *(uint64_t *)((char *)v11 + v65 + 8) = *(uint64_t *)((char *)v11 + v65);
                      if (!v65) {
                        break;
                      }
                      uint64_t v119 = *(uint64_t *)((char *)v11 + v65 - 8);
                      uint64_t v120 = v64;
                      unsigned int v66 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                      BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                      v65 -= 8;
                      if (v66 >= *(_DWORD *)result)
                      {
                        int64_t v67 = (uint64_t *)((char *)v11 + v65 + 8);
                        goto LABEL_79;
                      }
                    }
                    int64_t v67 = v11;
LABEL_79:
                    *int64_t v67 = v64;
                  }
                  uint64_t v56 = v60 + 1;
                  v59 += 8;
                }
                while (v60 + 1 != a2);
              }
            }
            else if (!v58)
            {
              do
              {
                uint64_t v104 = *v11;
                uint64_t v103 = v11[1];
                uint64_t v11 = v56;
                uint64_t v119 = v104;
                uint64_t v120 = v103;
                unsigned int v105 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                if (v105 < *(_DWORD *)result)
                {
                  uint64_t v106 = *v11;
                  uint64_t v107 = v11;
                  do
                  {
                    uint64_t v108 = v107;
                    uint64_t v109 = *--v107;
                    *uint64_t v108 = v109;
                    uint64_t v119 = *(v108 - 2);
                    uint64_t v120 = v106;
                    unsigned int v110 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                    BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                  }
                  while (v110 < *(_DWORD *)result);
                  uint64_t *v107 = v106;
                }
                uint64_t v56 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v68 = (unint64_t)(v14 - 2) >> 1;
              int64_t v115 = v68;
              do
              {
                int64_t v69 = v68;
                if (v115 >= v68)
                {
                  uint64_t v70 = (2 * v68) | 1;
                  unint64_t v71 = &v11[v70];
                  if (2 * v68 + 2 < v14)
                  {
                    uint64_t v72 = *v71;
                    uint64_t v119 = v71[1];
                    uint64_t v120 = v72;
                    unsigned int v73 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                    if (v73 < *(_DWORD *)sub_1CC953968(*a3, &v119))
                    {
                      ++v71;
                      uint64_t v70 = 2 * v69 + 2;
                    }
                  }
                  unsigned int v74 = &v11[v69];
                  uint64_t v75 = *v71;
                  uint64_t v119 = *v74;
                  uint64_t v120 = v75;
                  unsigned int v76 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                  BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                  if (v76 >= *(_DWORD *)result)
                  {
                    int64_t v113 = v69;
                    uint64_t v77 = *v74;
                    do
                    {
                      unint64_t v78 = v71;
                      uint64_t *v74 = *v71;
                      if (v115 < v70) {
                        break;
                      }
                      uint64_t v79 = (2 * v70) | 1;
                      unint64_t v71 = &v11[v79];
                      uint64_t v80 = 2 * v70 + 2;
                      if (v80 < v14)
                      {
                        uint64_t v81 = *v71;
                        uint64_t v119 = v71[1];
                        uint64_t v120 = v81;
                        unsigned int v82 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                        if (v82 < *(_DWORD *)sub_1CC953968(*a3, &v119))
                        {
                          ++v71;
                          uint64_t v79 = v80;
                        }
                      }
                      uint64_t v83 = *v71;
                      uint64_t v119 = v77;
                      uint64_t v120 = v83;
                      unsigned int v84 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                      BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                      unsigned int v74 = v78;
                      uint64_t v70 = v79;
                    }
                    while (v84 >= *(_DWORD *)result);
                    *unint64_t v78 = v77;
                    int64_t v69 = v113;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              unint64_t v85 = v117;
              do
              {
                uint64_t v86 = 0;
                uint64_t v116 = *v11;
                uint64_t v118 = v85;
                uint64_t v87 = v11;
                do
                {
                  uint64_t v88 = &v87[v86 + 1];
                  uint64_t v89 = (2 * v86) | 1;
                  uint64_t v90 = 2 * v86 + 2;
                  if (v90 < v14)
                  {
                    uint64_t v91 = *v88;
                    uint64_t v119 = v88[1];
                    uint64_t v120 = v91;
                    unsigned int v92 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                    BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                    if (v92 < *(_DWORD *)result)
                    {
                      ++v88;
                      uint64_t v89 = v90;
                    }
                  }
                  *uint64_t v87 = *v88;
                  uint64_t v87 = v88;
                  uint64_t v86 = v89;
                }
                while (v89 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                unint64_t v85 = v118 - 1;
                if (v88 == v118 - 1)
                {
                  *uint64_t v88 = v116;
                }
                else
                {
                  *uint64_t v88 = *v85;
                  *unint64_t v85 = v116;
                  uint64_t v93 = (char *)v88 - (char *)v11 + 8;
                  if (v93 >= 9)
                  {
                    unint64_t v94 = (((unint64_t)v93 >> 3) - 2) >> 1;
                    uint64_t v95 = &v11[v94];
                    uint64_t v96 = *v95;
                    uint64_t v119 = *v88;
                    uint64_t v120 = v96;
                    unsigned int v97 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                    BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                    if (v97 < *(_DWORD *)result)
                    {
                      uint64_t v98 = *v88;
                      do
                      {
                        unsigned int v99 = v95;
                        *uint64_t v88 = *v95;
                        if (!v94) {
                          break;
                        }
                        unint64_t v94 = (v94 - 1) >> 1;
                        uint64_t v95 = &v11[v94];
                        uint64_t v100 = *v95;
                        uint64_t v119 = v98;
                        uint64_t v120 = v100;
                        unsigned int v101 = *(_DWORD *)sub_1CC953968(*a3, &v120);
                        BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
                        uint64_t v88 = v99;
                      }
                      while (v101 < *(_DWORD *)result);
                      *unsigned int v99 = v98;
                      unint64_t v85 = v118 - 1;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          unsigned int v16 = &v11[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CC958810(v16, v11, v114, a3);
          }
          else
          {
            sub_1CC958810(v11, v16, v114, a3);
            sub_1CC958810(v11 + 1, v16 - 1, v112, a3);
            sub_1CC958810(v11 + 2, &v11[v15 + 1], v111, a3);
            sub_1CC958810(v16 - 1, v16, &v11[v15 + 1], a3);
            uint64_t v17 = *v11;
            *uint64_t v11 = *v16;
            uint64_t *v16 = v17;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v18 = *(v11 - 1);
          uint64_t v119 = *v11;
          uint64_t v120 = v18;
          unsigned int v19 = *(_DWORD *)sub_1CC953968(*a3, &v120);
          if (v19 < *(_DWORD *)sub_1CC953968(*a3, &v119)) {
            break;
          }
          uint64_t v38 = *v11;
          uint64_t v119 = *v114;
          uint64_t v120 = v38;
          unsigned int v39 = *(_DWORD *)sub_1CC953968(*a3, &v120);
          BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
          if (v39 >= *(_DWORD *)result)
          {
            unsigned int v42 = v11 + 1;
            do
            {
              unsigned int v12 = v42;
              if (v42 >= a2) {
                break;
              }
              ++v42;
              uint64_t v119 = *v12;
              uint64_t v120 = v38;
              unsigned int v43 = *(_DWORD *)sub_1CC953968(*a3, &v120);
              BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
            }
            while (v43 >= *(_DWORD *)result);
          }
          else
          {
            unsigned int v12 = v11;
            do
            {
              uint64_t v40 = v12[1];
              ++v12;
              uint64_t v119 = v40;
              uint64_t v120 = v38;
              unsigned int v41 = *(_DWORD *)sub_1CC953968(*a3, &v120);
              BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
            }
            while (v41 >= *(_DWORD *)result);
          }
          uint64_t v44 = a2;
          if (v12 < a2)
          {
            uint64_t v44 = a2;
            do
            {
              uint64_t v45 = *--v44;
              uint64_t v119 = v45;
              uint64_t v120 = v38;
              unsigned int v46 = *(_DWORD *)sub_1CC953968(*a3, &v120);
              BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
            }
            while (v46 < *(_DWORD *)result);
          }
          while (v12 < v44)
          {
            uint64_t v47 = *v12;
            uint64_t *v12 = *v44;
            *uint64_t v44 = v47;
            do
            {
              uint64_t v48 = v12[1];
              ++v12;
              uint64_t v119 = v48;
              uint64_t v120 = v38;
              unsigned int v49 = *(_DWORD *)sub_1CC953968(*a3, &v120);
            }
            while (v49 >= *(_DWORD *)sub_1CC953968(*a3, &v119));
            do
            {
              uint64_t v50 = *--v44;
              uint64_t v119 = v50;
              uint64_t v120 = v38;
              unsigned int v51 = *(_DWORD *)sub_1CC953968(*a3, &v120);
              BOOL result = (uint64_t)sub_1CC953968(*a3, &v119);
            }
            while (v51 < *(_DWORD *)result);
          }
          unsigned int v52 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v52;
          }
          a5 = 0;
          uint64_t *v52 = v38;
        }
        uint64_t v20 = 0;
        uint64_t v21 = *v11;
        do
        {
          uint64_t v22 = v11[v20 + 1];
          uint64_t v119 = v21;
          uint64_t v120 = v22;
          unsigned int v23 = *(_DWORD *)sub_1CC953968(*a3, &v120);
          ++v20;
        }
        while (v23 < *(_DWORD *)sub_1CC953968(*a3, &v119));
        uint64_t v24 = &v11[v20];
        unsigned int v25 = v117;
        if (v20 == 1)
        {
          unsigned int v25 = v117;
          do
          {
            if (v24 >= v25) {
              break;
            }
            uint64_t v28 = *--v25;
            uint64_t v119 = v21;
            uint64_t v120 = v28;
            unsigned int v29 = *(_DWORD *)sub_1CC953968(*a3, &v120);
          }
          while (v29 >= *(_DWORD *)sub_1CC953968(*a3, &v119));
        }
        else
        {
          do
          {
            uint64_t v26 = *--v25;
            uint64_t v119 = v21;
            uint64_t v120 = v26;
            unsigned int v27 = *(_DWORD *)sub_1CC953968(*a3, &v120);
          }
          while (v27 >= *(_DWORD *)sub_1CC953968(*a3, &v119));
        }
        unsigned int v12 = v24;
        if (v24 < v25)
        {
          BOOL v30 = v25;
          do
          {
            uint64_t v31 = *v12;
            uint64_t *v12 = *v30;
            uint64_t *v30 = v31;
            do
            {
              uint64_t v32 = v12[1];
              ++v12;
              uint64_t v119 = v21;
              uint64_t v120 = v32;
              unsigned int v33 = *(_DWORD *)sub_1CC953968(*a3, &v120);
            }
            while (v33 < *(_DWORD *)sub_1CC953968(*a3, &v119));
            do
            {
              uint64_t v34 = *--v30;
              uint64_t v119 = v21;
              uint64_t v120 = v34;
              unsigned int v35 = *(_DWORD *)sub_1CC953968(*a3, &v120);
            }
            while (v35 >= *(_DWORD *)sub_1CC953968(*a3, &v119));
          }
          while (v12 < v30);
        }
        unint64_t v36 = v12 - 1;
        if (v12 - 1 != v11) {
          *uint64_t v11 = *v36;
        }
        *unint64_t v36 = v21;
        a2 = v117;
        if (v24 >= v25) {
          break;
        }
LABEL_31:
        BOOL result = sub_1CC957C54(v11, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v37 = sub_1CC95899C(v11, v12 - 1, a3);
      BOOL result = sub_1CC95899C(v12, v117, a3);
      if (result) {
        break;
      }
      if (!v37) {
        goto LABEL_31;
      }
    }
    a2 = v12 - 1;
    if (!v37) {
      continue;
    }
    return result;
  }
}

void *sub_1CC9586A4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  sub_1CC958BD0(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  unsigned int v13 = *(_DWORD *)sub_1CC953968(*a6, &v26);
  BOOL result = sub_1CC953968(*a6, &v25);
  if (v13 < *(_DWORD *)result)
  {
    uint64_t v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    uint64_t v16 = *a4;
    uint64_t v25 = *a3;
    uint64_t v26 = v16;
    unsigned int v17 = *(_DWORD *)sub_1CC953968(*a6, &v26);
    BOOL result = sub_1CC953968(*a6, &v25);
    if (v17 < *(_DWORD *)result)
    {
      uint64_t v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      uint64_t v19 = *a3;
      uint64_t v25 = *a2;
      uint64_t v26 = v19;
      unsigned int v20 = *(_DWORD *)sub_1CC953968(*a6, &v26);
      BOOL result = sub_1CC953968(*a6, &v25);
      if (v20 < *(_DWORD *)result)
      {
        uint64_t v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        uint64_t v22 = *a2;
        uint64_t v25 = *a1;
        uint64_t v26 = v22;
        unsigned int v23 = *(_DWORD *)sub_1CC953968(*a6, &v26);
        BOOL result = sub_1CC953968(*a6, &v25);
        if (v23 < *(_DWORD *)result)
        {
          uint64_t v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

void *sub_1CC958810(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v8;
  unsigned int v9 = *(_DWORD *)sub_1CC953968(*a4, &v23);
  unsigned int v10 = sub_1CC953968(*a4, &v22);
  uint64_t v11 = *a3;
  if (v9 >= *(_DWORD *)v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    unsigned int v15 = *(_DWORD *)sub_1CC953968(*a4, &v23);
    BOOL result = sub_1CC953968(*a4, &v22);
    if (v15 < *(_DWORD *)result)
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a2;
      uint64_t v22 = *a1;
      uint64_t v23 = v17;
      unsigned int v18 = *(_DWORD *)sub_1CC953968(*a4, &v23);
      BOOL result = sub_1CC953968(*a4, &v22);
      if (v18 < *(_DWORD *)result)
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  else
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    unsigned int v12 = *(_DWORD *)sub_1CC953968(*a4, &v23);
    BOOL result = sub_1CC953968(*a4, &v22);
    uint64_t v14 = *a1;
    if (v12 >= *(_DWORD *)result)
    {
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      unsigned int v21 = *(_DWORD *)sub_1CC953968(*a4, &v23);
      BOOL result = sub_1CC953968(*a4, &v22);
      if (v21 >= *(_DWORD *)result) {
        return result;
      }
      uint64_t v14 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v14;
  }
  return result;
}

BOOL sub_1CC95899C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v21 = *a1;
      uint64_t v22 = v8;
      unsigned int v9 = *(_DWORD *)sub_1CC953968(*a3, &v22);
      if (v9 < *(_DWORD *)sub_1CC953968(*a3, &v21))
      {
        uint64_t v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_1CC958810(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC958BD0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CC9586A4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      sub_1CC958810(a1, a1 + 1, a1 + 2, a3);
      unsigned int v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v12;
    uint64_t v21 = *v11;
    uint64_t v22 = v15;
    unsigned int v16 = *(_DWORD *)sub_1CC953968(*a3, &v22);
    if (v16 < *(_DWORD *)sub_1CC953968(*a3, &v21))
    {
      uint64_t v17 = *v12;
      uint64_t v18 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18 + 24) = *(uint64_t *)((char *)a1 + v18 + 16);
        if (v18 == -16) {
          break;
        }
        uint64_t v21 = *(uint64_t *)((char *)a1 + v18 + 8);
        uint64_t v22 = v17;
        unsigned int v19 = *(_DWORD *)sub_1CC953968(*a3, &v22);
        v18 -= 8;
        if (v19 >= *(_DWORD *)sub_1CC953968(*a3, &v21))
        {
          uint64_t v20 = (uint64_t *)((char *)a1 + v18 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *uint64_t v20 = v17;
      if (++v14 == 8) {
        return v12 + 1 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 8;
    if (++v12 == a2) {
      return 1;
    }
  }
}

void *sub_1CC958BD0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1CC958810(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  unsigned int v11 = *(_DWORD *)sub_1CC953968(*a5, &v21);
  BOOL result = sub_1CC953968(*a5, &v20);
  if (v11 < *(_DWORD *)result)
  {
    uint64_t v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    uint64_t v14 = *a3;
    uint64_t v20 = *a2;
    uint64_t v21 = v14;
    unsigned int v15 = *(_DWORD *)sub_1CC953968(*a5, &v21);
    BOOL result = sub_1CC953968(*a5, &v20);
    if (v15 < *(_DWORD *)result)
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a2;
      uint64_t v20 = *a1;
      uint64_t v21 = v17;
      unsigned int v18 = *(_DWORD *)sub_1CC953968(*a5, &v21);
      BOOL result = sub_1CC953968(*a5, &v20);
      if (v18 < *(_DWORD *)result)
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t *sub_1CC958CEC(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  unsigned int v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(_DWORD *)(v39 + 8) < *(_DWORD *)(*v10 + 8))
                {
                  uint64_t *v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                BOOL result = sub_1CC959418(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                BOOL result = sub_1CC9596AC(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                unsigned int v41 = v10 + 1;
                unsigned int v42 = v10 + 2;
                unsigned int v43 = v10 + 3;
                BOOL result = sub_1CC9596AC(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(_DWORD *)(v44 + 8) < *(_DWORD *)(v45 + 8))
                {
                  uint64_t *v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  unsigned int v48 = *(_DWORD *)(*v43 + 8);
                  if (v48 < *(_DWORD *)(*v42 + 8))
                  {
                    *unsigned int v42 = v46;
                    uint64_t *v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 < *(_DWORD *)(*v41 + 8))
                    {
                      v10[1] = v46;
                      uint64_t v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 < *(_DWORD *)(*v10 + 8))
                      {
                        uint64_t *v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unsigned int v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                uint64_t v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  uint64_t v55 = v51;
                  unsigned int v58 = *(_DWORD *)(v56 + 8);
                  if (v58 < *(_DWORD *)(v57 + 8))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        uint64_t v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 < *(_DWORD *)(v57 + 8));
                    uint64_t v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *uint64_t v61 = v56;
                  }
                  unsigned int v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                unsigned int v9 = v51;
                unsigned int v92 = *(_DWORD *)(v90 + 8);
                if (v92 < *(_DWORD *)(v91 + 8))
                {
                  do
                  {
                    *unsigned int v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 < *(_DWORD *)(v91 + 8));
                  *unsigned int v51 = v90;
                }
                unsigned int v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  unsigned int v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(_DWORD *)(v67 + 8) < *(_DWORD *)(v66[1] + 8))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  BOOL result = &v10[v64];
                  uint64_t v68 = *result;
                  unsigned int v69 = *(_DWORD *)(*result + 8);
                  if (*(_DWORD *)(v67 + 8) >= v69)
                  {
                    do
                    {
                      uint64_t v70 = v66;
                      *BOOL result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      unsigned int v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(_DWORD *)(v67 + 8) < *(_DWORD *)(v66[1] + 8))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      BOOL result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(_DWORD *)(v67 + 8) >= v69);
                    *uint64_t v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                uint64_t v75 = v10;
                do
                {
                  unsigned int v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  uint64_t v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    BOOL result = (uint64_t *)*(unsigned int *)(v78 + 8);
                    if (result < *(_DWORD *)(v77[1] + 8))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *uint64_t v75 = v78;
                  uint64_t v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *uint64_t v77 = v74;
                }
                else
                {
                  *uint64_t v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    unsigned int v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    unsigned int v87 = *(_DWORD *)(*v77 + 8);
                    if (*(_DWORD *)(*v84 + 8) < v87)
                    {
                      do
                      {
                        uint64_t v88 = v84;
                        *uint64_t v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        unsigned int v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        uint64_t v77 = v88;
                      }
                      while (*(_DWORD *)(*v84 + 8) < v87);
                      *uint64_t v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CC959418(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CC959418(v9 + 1, v14 - 1, a2 - 2);
            sub_1CC959418(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = sub_1CC959418(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *unsigned int v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            BOOL result = sub_1CC959418(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)(v16 + 8);
          if (*(_DWORD *)(*(v9 - 1) + 8) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)(*(a2 - 1) + 8))
          {
            uint64_t v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 >= *(_DWORD *)(*v10 + 8));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)(v30 + 8));
          }
          uint64_t v32 = a2;
          if (v10 < a2)
          {
            uint64_t v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 < *(_DWORD *)(v33 + 8));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              uint64_t *v10 = v35;
              uint64_t *v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 >= *(_DWORD *)(v36 + 8));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 < *(_DWORD *)(v37 + 8));
            }
            while (v10 < v32);
          }
          uint64_t v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *unsigned int v9 = *v38;
          }
          a4 = 0;
          uint64_t *v38 = v16;
        }
        unsigned int v17 = *(_DWORD *)(v16 + 8);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 8) < v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 8) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 8) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v10 = &v9[v18];
          uint64_t v25 = v21;
          do
          {
            uint64_t *v10 = v24;
            *uint64_t v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(_DWORD *)(v26 + 8) < v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(_DWORD *)(v27 + 8) >= v17);
          }
          while (v10 < v25);
        }
        uint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          *unsigned int v9 = *v28;
        }
        *uint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        BOOL result = (uint64_t *)sub_1CC958CEC(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CC9594A0(v9, v10 - 1);
      BOOL result = (uint64_t *)sub_1CC9594A0(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC959418(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unsigned int v5 = *(_DWORD *)(*a2 + 8);
  unsigned int v6 = *(_DWORD *)(*result + 8);
  uint64_t v7 = *a3;
  unsigned int v8 = *(_DWORD *)(*a3 + 8);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*result + 8))
      {
        *BOOL result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *BOOL result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 8) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *BOOL result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CC9594A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 8) < *(_DWORD *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC959418(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC9596AC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      sub_1CC9596AC(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)(v21 + 8) < *(_DWORD *)(v22 + 8))
      {
        *uint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unsigned int v25 = *(_DWORD *)(*v20 + 8);
        if (v25 < *(_DWORD *)(*v19 + 8))
        {
          *uint64_t v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1CC959418(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(_DWORD *)(*v9 + 8);
    if (v14 < *(_DWORD *)(*v8 + 8))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 8))
        {
          unsigned int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unsigned int v17 = a1;
LABEL_13:
      *unsigned int v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC9596AC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC959418(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a4 + 8) < *(_DWORD *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 8) < *(_DWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t *sub_1CC959744(uint64_t a1, uint64_t *a2)
{
  unsigned int v25 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v25);
  unsigned int v5 = v25;
  if (v4) {
    return v5 + 1;
  }
  uint64_t v26 = v25;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    int v8 = 2 * v7;
    goto LABEL_9;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    uint64_t v10 = *(void *)a1;
    unint64_t v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 64;
    }
    *(_DWORD *)(a1 + 16) = v14;
    uint64_t v15 = operator new(16 * v14, (std::align_val_t)8uLL);
    *(void *)a1 = v15;
    if (v10)
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v16 = *(unsigned int *)(a1 + 16);
      if (v16)
      {
        uint64_t v17 = 16 * v16;
        do
        {
          *uint64_t v15 = -4096;
          v15 += 2;
          v17 -= 16;
        }
        while (v17);
      }
      if (v7)
      {
        int v18 = 0;
        uint64_t v19 = (uint64_t *)(v10 + 8);
        uint64_t v20 = 16 * v7;
        do
        {
          uint64_t v21 = *(v19 - 1);
          if ((v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            uint64_t v27 = 0;
            sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v21, &v27);
            uint64_t v22 = v27;
            *uint64_t v27 = v21;
            v22[1] = *v19;
            *(_DWORD *)(a1 + 8) = ++v18;
          }
          v19 += 2;
          v20 -= 16;
        }
        while (v20);
      }
      MEMORY[0x1D25D9CD0](v10, 8);
      uint64_t v15 = *(void **)a1;
      LODWORD(v23) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v23 = *(unsigned int *)(a1 + 16);
      if (v23)
      {
        uint64_t v24 = 0;
        do
        {
          v15[v24] = -4096;
          v24 += 2;
        }
        while (2 * v23 != v24);
      }
    }
    sub_1CBB0BF40((uint64_t)v15, v23, *a2, &v26);
    int v6 = *(_DWORD *)(a1 + 8);
    unsigned int v5 = v26;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*v5 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *unsigned int v5 = *a2;
  v5[1] = 0;
  return v5 + 1;
}

void sub_1CC959930(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (uint64_t)a1;
    if (a3 == 2)
    {
      if (*(a2 - 1) < (unint64_t)a1[2])
      {
        uint64_t v35 = (uint64_t)(a2 - 3);
        sub_1CD673E80(a1, v35);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        int v13 = a1 + 3;
        if (a1 + 3 != a2)
        {
          uint64_t v14 = 0;
          uint64_t v15 = a1;
          do
          {
            uint64_t v16 = v13;
            unint64_t v17 = v15[5];
            if (v17 < v15[2])
            {
              uint64_t v20 = (void *)v15[4];
              int v18 = v15 + 4;
              uint64_t v19 = v20;
              uint64_t v36 = (void *)*v16;
              uint64_t v37 = v20;
              unint64_t v38 = v17;
              if (v17)
              {
                v19[2] = &v37;
                uint64_t *v16 = (uint64_t)v18;
                void *v18 = 0;
                v18[1] = 0;
              }
              else
              {
                uint64_t v36 = &v37;
              }
              uint64_t v21 = v14;
              while (1)
              {
                sub_1CD673ED8(v6 + v21 + 24, (void *)(v6 + v21));
                if (!v21) {
                  break;
                }
                unint64_t v22 = *(void *)(v6 + v21 - 8);
                v21 -= 24;
                if (v38 >= v22)
                {
                  uint64_t v23 = v6 + v21 + 24;
                  goto LABEL_24;
                }
              }
              uint64_t v23 = v6;
LABEL_24:
              uint64_t v24 = v23 + 8;
              sub_1CB833A08(v23, *(void **)(v23 + 8));
              *(void *)uint64_t v23 = v36;
              unsigned int v25 = v37;
              *(void *)(v23 + 8) = v37;
              unint64_t v26 = v38;
              *(void *)(v23 + 16) = v38;
              if (v26)
              {
                uint64_t v27 = 0;
                uint64_t v25[2] = v24;
                uint64_t v36 = &v37;
                uint64_t v37 = 0;
                unint64_t v38 = 0;
              }
              else
              {
                *(void *)uint64_t v23 = v24;
                uint64_t v27 = v37;
              }
              sub_1CB833A08((uint64_t)&v36, v27);
            }
            int v13 = v16 + 3;
            v14 += 24;
            uint64_t v15 = v16;
          }
          while (v16 + 3 != a2);
        }
      }
    }
    else
    {
      uint64_t v9 = (uint64_t)a4;
      unint64_t v10 = a3 >> 1;
      unint64_t v11 = &a1[3 * (a3 >> 1)];
      unint64_t v12 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CC959C68(a1, v11, v12, a4);
        uint64_t v28 = (uint64_t *)(v9 + 24 * v10);
        sub_1CC959C68((void *)(v6 + 24 * (a3 >> 1)), a2, a3 - (a3 >> 1), v28);
        BOOL v29 = (uint64_t *)(v9 + 24 * a3);
        uint64_t v30 = v28;
        uint64_t v31 = (uint64_t *)v9;
        while (v30 != v29)
        {
          if (v30[2] >= (unint64_t)v31[2])
          {
            sub_1CD673ED8(v6, v31);
            v31 += 3;
          }
          else
          {
            sub_1CD673ED8(v6, v30);
            v30 += 3;
          }
          v6 += 24;
          if (v31 == v28)
          {
            if (v30 != v29)
            {
              uint64_t v32 = 0;
              do
              {
                sub_1CD673ED8(v6 + v32 * 8, &v30[v32]);
                v32 += 3;
              }
              while (&v30[v32] != v29);
            }
            goto LABEL_41;
          }
        }
        if (v31 != v28)
        {
          uint64_t v33 = 0;
          do
          {
            sub_1CD673ED8(v6 + v33 * 8, &v31[v33]);
            v33 += 3;
          }
          while (&v31[v33] != v28);
        }
LABEL_41:
        if (v9)
        {
          unint64_t v34 = a3;
          do
          {
            sub_1CB833A08(v9, *(void **)(v9 + 8));
            v9 += 24;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        sub_1CC959930(a1, v11, v12, a4, a5);
        sub_1CC959930(v6 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v9, a5);
        sub_1CC95A094(v6, (uint64_t *)(v6 + 24 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v9, a5);
      }
    }
  }
}

void sub_1CC959C68(void *a1, void *a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      unint64_t v12 = a4 + 1;
      if (*(a2 - 1) >= a1[2])
      {
        *a4 = *a1;
        uint64_t v20 = a1 + 1;
        uint64_t v21 = a1[1];
        a4[1] = v21;
        uint64_t v22 = a1[2];
        a4[2] = v22;
        if (v22)
        {
          *(void *)(v21 + 16) = v12;
          *a1 = v20;
          *uint64_t v20 = 0;
          a1[2] = 0;
        }
        else
        {
          *a4 = (uint64_t)v12;
        }
        a4[3] = *(a2 - 3);
        int v8 = a2 - 2;
        uint64_t v46 = *(a2 - 2);
        a4[4] = v46;
        unint64_t v10 = a4 + 4;
        uint64_t v47 = *(a2 - 1);
        a4[5] = v47;
        if (v47)
        {
          *(void *)(v46 + 16) = v10;
          *(a2 - 3) = v8;
          goto LABEL_47;
        }
      }
      else
      {
        *a4 = *(a2 - 3);
        int v13 = a2 - 2;
        uint64_t v14 = *(a2 - 2);
        a4[1] = v14;
        uint64_t v15 = *(a2 - 1);
        a4[2] = v15;
        if (v15)
        {
          *(void *)(v14 + 16) = v12;
          *(a2 - 3) = v13;
          *int v13 = 0;
          *(a2 - 1) = 0;
        }
        else
        {
          *a4 = (uint64_t)v12;
        }
        a4[3] = *a1;
        int v8 = a1 + 1;
        uint64_t v9 = a1[1];
        a4[4] = v9;
        unint64_t v10 = a4 + 4;
        uint64_t v45 = a1[2];
        a4[5] = v45;
        if (v45)
        {
LABEL_43:
          *(void *)(v9 + 16) = v10;
          *a1 = v8;
LABEL_47:
          *int v8 = 0;
          v8[1] = 0;
          return;
        }
      }
      a4[3] = (uint64_t)v10;
    }
    else
    {
      if (a3 == 1)
      {
        *a4 = *a1;
        int v8 = a1 + 1;
        uint64_t v9 = a1[1];
        a4[1] = v9;
        unint64_t v10 = a4 + 1;
        uint64_t v11 = a1[2];
        a4[2] = v11;
        if (!v11)
        {
          *a4 = (uint64_t)v10;
          return;
        }
        goto LABEL_43;
      }
      if ((uint64_t)a3 > 8)
      {
        uint64_t v23 = &a1[3 * (a3 >> 1)];
        sub_1CC959930(a1, v23, a3 >> 1, a4, a3 >> 1);
        sub_1CC959930(&v7[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), &a4[3 * (a3 >> 1)], a3 - (a3 >> 1));
        uint64_t v24 = a4 + 2;
        unsigned int v25 = &v7[3 * (a3 >> 1)];
        while (v25 != a2)
        {
          unint64_t v26 = v24 - 1;
          if (v25[2] >= v7[2])
          {
            *(v24 - 2) = *v7;
            uint64_t v30 = v7 + 1;
            uint64_t v31 = v7[1];
            *(v24 - 1) = v31;
            uint64_t v32 = v7[2];
            *uint64_t v24 = v32;
            if (v32)
            {
              *(void *)(v31 + 16) = v26;
              *uint64_t v7 = v30;
              void *v30 = 0;
              v7[2] = 0;
            }
            else
            {
              *(v24 - 2) = v26;
            }
            v7 += 3;
          }
          else
          {
            *(v24 - 2) = *v25;
            uint64_t v27 = v25 + 1;
            uint64_t v28 = v25[1];
            *(v24 - 1) = v28;
            uint64_t v29 = v25[2];
            *uint64_t v24 = v29;
            if (v29)
            {
              *(void *)(v28 + 16) = v26;
              *unsigned int v25 = v27;
              *uint64_t v27 = 0;
              uint64_t v25[2] = 0;
            }
            else
            {
              *(v24 - 2) = v26;
            }
            v25 += 3;
          }
          v24 += 3;
          if (v7 == v23)
          {
            if (v25 != a2)
            {
              uint64_t v33 = 0;
              do
              {
                unint64_t v34 = &v24[v33];
                *(v34 - 2) = v25[v33];
                uint64_t v35 = &v25[v33 + 1];
                uint64_t v36 = *v35;
                v24[v33 - 1] = *v35;
                uint64_t v37 = (uint64_t)&v24[v33 - 1];
                uint64_t v38 = v25[v33 + 2];
                *unint64_t v34 = v38;
                if (v38)
                {
                  *(void *)(v36 + 16) = v37;
                  v25[v33] = v35;
                  uint64_t *v35 = 0;
                  v25[v33 + 2] = 0;
                }
                else
                {
                  *(v34 - 2) = v37;
                }
                v33 += 3;
              }
              while (&v25[v33] != a2);
            }
            return;
          }
        }
        if (v7 != v23)
        {
          uint64_t v39 = 0;
          do
          {
            uint64_t v40 = &v24[v39];
            *(v40 - 2) = v7[v39];
            unsigned int v41 = &v7[v39 + 1];
            uint64_t v42 = *v41;
            v24[v39 - 1] = *v41;
            uint64_t v43 = (uint64_t)&v24[v39 - 1];
            uint64_t v44 = v7[v39 + 2];
            void *v40 = v44;
            if (v44)
            {
              *(void *)(v42 + 16) = v43;
              v7[v39] = v41;
              *unsigned int v41 = 0;
              v7[v39 + 2] = 0;
            }
            else
            {
              *(v40 - 2) = v43;
            }
            v39 += 3;
          }
          while (&v7[v39] != v23);
        }
      }
      else if (a1 != a2)
      {
        *a4 = *a1;
        uint64_t v16 = a1 + 1;
        uint64_t v17 = a1[1];
        a4[1] = v17;
        int v18 = a4 + 1;
        uint64_t v19 = a1[2];
        a4[2] = v19;
        if (v19)
        {
          *(void *)(v17 + 16) = v18;
          *a1 = v16;
          void *v16 = 0;
          a1[2] = 0;
        }
        else
        {
          *a4 = (uint64_t)v18;
        }
        unsigned int v48 = a1 + 3;
        if (a1 + 3 != a2)
        {
          uint64_t v49 = 0;
          uint64_t v50 = a4;
          do
          {
            unsigned int v51 = v7;
            unsigned int v52 = v50;
            uint64_t v7 = v48;
            v50 += 3;
            unint64_t v53 = v52[2];
            uint64_t v54 = v52 + 4;
            if (v51[5] < v53)
            {
              uint64_t v59 = *v52;
              uint64_t v60 = v52[1];
              v52[4] = v60;
              v52[5] = v53;
              *(void *)(v60 + 16) = v54;
              uint64_t *v52 = (uint64_t)(v52 + 1);
              v52[2] = 0;
              v52[3] = v59;
              v52[1] = 0;
              uint64_t v61 = (uint64_t)a4;
              if (v52 != a4)
              {
                uint64_t v62 = v49;
                while (1)
                {
                  uint64_t v61 = (uint64_t)a4 + v62;
                  if (v51[5] >= *(unint64_t *)((char *)a4 + v62 - 8)) {
                    break;
                  }
                  v62 -= 24;
                  sub_1CD673ED8(v61, (uint64_t *)((char *)a4 + v62));
                  if (!v62)
                  {
                    uint64_t v61 = (uint64_t)a4;
                    break;
                  }
                }
              }
              sub_1CD673ED8(v61, v7);
            }
            else
            {
              v52[3] = *v7;
              uint64_t v57 = v51[4];
              uint64_t v56 = v51 + 4;
              uint64_t v55 = v57;
              v52[4] = v57;
              uint64_t v58 = v56[1];
              v52[5] = v58;
              if (v58)
              {
                *(void *)(v55 + 16) = v54;
                *uint64_t v7 = v56;
                void *v56 = 0;
                v56[1] = 0;
              }
              else
              {
                uint64_t *v50 = (uint64_t)v54;
              }
            }
            unsigned int v48 = v7 + 3;
            v49 += 24;
          }
          while (v7 + 3 != a2);
        }
      }
    }
  }
}

void sub_1CC95A094(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4) {
        return;
      }
      uint64_t v11 = 0;
      uint64_t v12 = -a4;
      while (1)
      {
        int v13 = (uint64_t *)(a1 + v11);
        if ((unint64_t)a2[2] < *(void *)(a1 + v11 + 16)) {
          break;
        }
        v11 += 24;
        if (__CFADD__(v12++, 1)) {
          return;
        }
      }
      uint64_t v15 = -v12;
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          sub_1CD673E80((uint64_t *)(a1 + v11), (uint64_t)a2);
          return;
        }
        if (v12 > 0) {
          uint64_t v15 = 1 - v12;
        }
        uint64_t v26 = v15 >> 1;
        int v18 = a3;
        if (a3 != a2)
        {
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
          int v18 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v18[3 * (v27 >> 1)];
            unint64_t v30 = v29[2];
            uint64_t v31 = v29 + 3;
            v27 += ~(v27 >> 1);
            if (v30 < *(void *)(a1 + 24 * v26 + v11 + 16)) {
              int v18 = v31;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v20 = (uint64_t *)(a1 + 24 * v26 + v11);
        uint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v18 - a2);
        unsigned int v25 = v20;
      }
      else
      {
        if (v7 >= 0) {
          uint64_t v16 = v7;
        }
        else {
          uint64_t v16 = v7 + 1;
        }
        uint64_t v17 = v16 >> 1;
        int v18 = &a2[3 * (v16 >> 1)];
        if (v13 == a2)
        {
          unsigned int v25 = a2;
          uint64_t v20 = a2;
        }
        else
        {
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1 - v11) >> 3);
          uint64_t v20 = (uint64_t *)(a1 + v11);
          do
          {
            unint64_t v21 = v19 >> 1;
            uint64_t v22 = &v20[3 * (v19 >> 1)];
            unint64_t v23 = v22[2];
            uint64_t v24 = v22 + 3;
            v19 += ~(v19 >> 1);
            if (v18[2] < v23) {
              unint64_t v19 = v21;
            }
            else {
              uint64_t v20 = v24;
            }
          }
          while (v19);
          unsigned int v25 = v20;
        }
        uint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - a1 - v11) >> 3);
      }
      uint64_t v32 = v18;
      if (v20 != a2)
      {
        uint64_t v32 = v25;
        if (a2 != v18)
        {
          uint64_t v86 = v26;
          uint64_t v78 = v17;
          uint64_t v79 = a7;
          uint64_t v80 = a3;
          uint64_t v81 = a6;
          uint64_t v40 = v25;
          uint64_t v41 = (uint64_t)a2;
          sub_1CD673E80(v25, (uint64_t)a2);
          uint64_t v42 = v41;
          uint64_t v77 = v40;
          while (1)
          {
            uint64_t v32 = v40 + 3;
            v41 += 24;
            if ((uint64_t *)v41 == v18) {
              break;
            }
            if (v32 == (uint64_t *)v42) {
              uint64_t v42 = v41;
            }
            uint64_t v83 = v42;
            v40 += 3;
            sub_1CD673E80(v40, v41);
            uint64_t v42 = v83;
          }
          if (v32 != (uint64_t *)v42)
          {
            uint64_t v43 = v40 + 3;
            uint64_t v44 = v42;
            uint64_t v82 = v32;
            while (1)
            {
              unsigned int v84 = (uint64_t *)v42;
              while (1)
              {
                sub_1CD673E80(v43, v44);
                v43 += 3;
                v44 += 24;
                if ((uint64_t *)v44 != v18) {
                  break;
                }
                uint64_t v32 = v82;
                uint64_t v44 = (uint64_t)v84;
                if (v43 == v84) {
                  goto LABEL_55;
                }
              }
              uint64_t v42 = (uint64_t)v84;
              if (v43 == v84) {
                uint64_t v42 = v44;
              }
            }
          }
LABEL_55:
          a3 = v80;
          a6 = v81;
          uint64_t v17 = v78;
          a7 = v79;
          uint64_t v26 = v86;
          unsigned int v25 = v77;
        }
      }
      a4 = -(v26 + v12);
      uint64_t v33 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v12)
      {
        uint64_t v85 = v26;
        uint64_t v38 = v17;
        uint64_t v36 = a6;
        uint64_t v37 = a7;
        uint64_t v39 = v32;
        sub_1CC95A094(v32, v18);
        int v18 = v20;
        uint64_t v33 = v38;
        a4 = v85;
        a3 = v39;
      }
      else
      {
        uint64_t v34 = a1 + v11;
        uint64_t v35 = a3;
        uint64_t v36 = a6;
        uint64_t v37 = a7;
        int v13 = v32;
        sub_1CC95A094(v34, v25);
        a3 = v35;
      }
      uint64_t v7 = v33;
      a1 = (uint64_t)v13;
      a2 = v18;
      a6 = v36;
      a7 = v37;
      if (!v33) {
        return;
      }
    }
    if (a4 <= v7)
    {
      if ((uint64_t *)a1 == a2) {
        return;
      }
      uint64_t v59 = 0;
      uint64_t v46 = 0;
      do
      {
        uint64_t v60 = (uint64_t *)(a6 + v59);
        *uint64_t v60 = *(void *)(a1 + v59);
        uint64_t v61 = (uint64_t *)(a1 + v59 + 8);
        uint64_t v62 = *v61;
        *(void *)(a6 + v59 + 8) = *v61;
        uint64_t v63 = a6 + v59 + 8;
        uint64_t v64 = *(void *)(a1 + v59 + 16);
        v60[2] = v64;
        if (v64)
        {
          *(void *)(v62 + 16) = v63;
          *(void *)(a1 + v59) = v61;
          *uint64_t v61 = 0;
          *(void *)(a1 + v59 + 16) = 0;
        }
        else
        {
          *uint64_t v60 = v63;
        }
        ++v46;
        v59 += 24;
      }
      while ((uint64_t *)(a1 + v59) != a2);
      if (v59)
      {
        uint64_t v65 = (void *)(a6 + v59);
        uint64_t v66 = a6 + v59 - 24;
        uint64_t v67 = (void *)a6;
        while (a2 != a3)
        {
          uint64_t v68 = a3;
          uint64_t v69 = a6;
          uint64_t v70 = a2;
          if ((unint64_t)a2[2] >= v67[2])
          {
            sub_1CD673ED8(a1, v67);
            a2 = v70;
            v67 += 3;
          }
          else
          {
            sub_1CD673ED8(a1, a2);
            a2 = v70 + 3;
          }
          a1 += 24;
          a6 = v69;
          a3 = v68;
          if (v65 == v67) {
            goto LABEL_98;
          }
        }
        if (v65 != v67)
        {
          uint64_t v74 = a6;
          uint64_t v75 = 0;
          do
          {
            sub_1CD673ED8(a1 + v75 * 8, &v67[v75]);
            v75 += 3;
          }
          while ((void *)v66 != &v67[v75 - 3]);
          a6 = v74;
        }
      }
    }
    else
    {
      if (a2 == a3) {
        return;
      }
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      do
      {
        uint64_t v47 = (uint64_t *)(a6 + v45 * 8);
        uint64_t *v47 = a2[v45];
        unsigned int v48 = &a2[v45 + 1];
        uint64_t v49 = *v48;
        *(void *)(a6 + v45 * 8 + 8) = *v48;
        uint64_t v50 = a6 + v45 * 8 + 8;
        uint64_t v51 = a2[v45 + 2];
        void v47[2] = v51;
        if (v51)
        {
          *(void *)(v49 + 16) = v50;
          a2[v45] = (uint64_t)v48;
          *unsigned int v48 = 0;
          a2[v45 + 2] = 0;
        }
        else
        {
          uint64_t *v47 = v50;
        }
        ++v46;
        v45 += 3;
      }
      while (&a2[v45] != a3);
      if (v45 * 8)
      {
        uint64_t v52 = a6 + v45 * 8;
        uint64_t v53 = (uint64_t)(a3 - 3);
        while (a2 != (uint64_t *)a1)
        {
          unint64_t v54 = *(void *)(v52 - 8);
          unint64_t v55 = *(a2 - 1);
          if (v54 >= v55) {
            uint64_t v56 = (uint64_t *)(v52 - 24);
          }
          else {
            uint64_t v56 = a2 - 3;
          }
          if (v54 >= v55) {
            uint64_t v57 = a2;
          }
          else {
            uint64_t v57 = a2 - 3;
          }
          if (v54 >= v55) {
            v52 -= 24;
          }
          uint64_t v58 = a6;
          sub_1CD673ED8(v53, v56);
          a2 = v57;
          a6 = v58;
          v53 -= 24;
          if (v52 == v58) {
            goto LABEL_98;
          }
        }
        if (v52 != a6)
        {
          uint64_t v71 = 0;
          do
          {
            uint64_t v72 = v53 + v71;
            v71 -= 24;
            uint64_t v73 = a6;
            sub_1CD673ED8(v72, (void *)(v52 + v71));
            a6 = v73;
          }
          while (v52 + v71 != v73);
        }
      }
    }
LABEL_98:
    if (a6)
    {
      do
      {
        uint64_t v76 = a6;
        sub_1CB833A08(a6, *(void **)(a6 + 8));
        a6 = v76 + 24;
        --v46;
      }
      while (v46);
    }
  }
}

void sub_1CC95A62C(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::detail::IEEEFloat *a4, uint64_t a5)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  int v8 = *(llvm::Constant **)(a1 + 56);
  if (*(llvm::Constant **)a4 == v8)
  {
    char v144 = (uint64_t *)a4;
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    char v144 = (uint64_t *)sub_1CC56C0C0((llvm *)0x31, a4, v8, 0);
    if (a3)
    {
LABEL_3:
      BOOL v143 = &a2[a3];
      do
      {
        uint64_t v9 = *a2;
        uint64_t v152 = *a2;
        uint64_t v165 = &v167;
        unint64_t ElementPtr = 0x1000000000;
        long long v172 = xmmword_1CFAC4A20;
        uint64_t v10 = *(unsigned int *)(a5 + 16);
        uint64_t v11 = *(void *)a5 + 16 * v10;
        if (*(_DWORD *)(a5 + 8))
        {
          if (*(_DWORD *)(a5 + 16))
          {
            uint64_t v13 = 16 * v10;
            uint64_t v12 = *(void **)a5;
            while ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v12 += 2;
              v13 -= 16;
              if (!v13) {
                goto LABEL_10;
              }
            }
          }
          else
          {
            uint64_t v12 = *(void **)a5;
          }
        }
        else
        {
LABEL_10:
          uint64_t v12 = (void *)(*(void *)a5 + 16 * v10);
        }
        uint64_t v14 = *(void *)a5 + 16 * v10;
LABEL_12:
        while (v12 != (void *)v14)
        {
          uint64_t v15 = *(void *)(*v12 + 8);
          if (v15)
          {
            uint64_t v16 = *v12 + 24;
            uint64_t v17 = 8 * v15;
            do
            {
              int v18 = (void *)(*(void *)v16 - 8 * *(unsigned int *)(*(void *)v16 + 8));
              if (v18[1] == v9)
              {
                uint64_t v19 = *(void *)(*v18 + 128);
                uint64_t v20 = (void *)(v19 + 24);
                if (*(_DWORD *)(v19 + 32) >= 0x41u) {
                  uint64_t v20 = (void *)*v20;
                }
                sub_1CD674000((uint64_t)&v165, v12[1] + *v20);
              }
              v16 += 8;
              v17 -= 8;
            }
            while (v17);
          }
          unint64_t v21 = v12 + 2;
          uint64_t v12 = (void *)v11;
          if (v21 != (void *)v11)
          {
            uint64_t v12 = v21;
            while ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v12 += 2;
              if (v12 == (void *)v11)
              {
                uint64_t v12 = (void *)v11;
                goto LABEL_12;
              }
            }
          }
        }
        llvm::lowertypetests::BitSetBuilder::build((uint64_t **)&v165, (uint64_t)&v146);
        if (v165 != &v167) {
          free(v165);
        }
        uint64_t v23 = *(void *)(a1 + 48);
        uint64_t v24 = *(void *)(a1 + 96);
        unsigned int v25 = *(llvm::ConstantInt **)v24;
        unint64_t v26 = *(unsigned int *)(v24 + 8);
        LODWORD(ElementPtr) = v26 >> 8;
        if (v26 >> 8 > 0x40) {
          operator new[]();
        }
        if (v26 <= 0xFF) {
          unint64_t v27 = 0;
        }
        else {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v26) + 63);
        }
        uint64_t v165 = (void *)(v27 & v149);
        unint64_t v28 = llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v165, v22);
        if (ElementPtr >= 0x41 && v165) {
          MEMORY[0x1D25D9CB0](v165, 0x1000C8000313F17);
        }
        uint64_t v165 = v28;
        unint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(v23, v144, (uint64_t)&v165, 1, 0, 0, 0);
        uint64_t v30 = *(void *)(a1 + 48);
        uint64_t v31 = *(llvm::ConstantInt **)v30;
        unint64_t v32 = *(unsigned int *)(v30 + 8);
        unsigned int v161 = v32 >> 8;
        if (v32 >> 8 > 0x40) {
          operator new[]();
        }
        if (v32 <= 0xFF) {
          LODWORD(v33) = 0;
        }
        else {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v32) + 63);
        }
        unint64_t v160 = (char *)(v33 & v151);
        uint64_t v35 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(v31, (llvm::LLVMContext *)&v160, v29);
        if (v161 >= 0x41 && v160) {
          MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
        }
        int v167 = v35;
        uint64_t v36 = *(void *)(a1 + 96);
        uint64_t v37 = *(llvm::ConstantInt **)v36;
        unint64_t v38 = *(unsigned int *)(v36 + 8);
        unsigned int v161 = v38 >> 8;
        if (v38 >> 8 > 0x40) {
          operator new[]();
        }
        if (v38 <= 0xFF) {
          unint64_t v39 = 0;
        }
        else {
          unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v38) + 63);
        }
        unint64_t v160 = (char *)(v39 & (v150 - 1));
        uint64_t v41 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v160, v34);
        if (v161 >= 0x41 && v160) {
          MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
        }
        uint64_t v168 = v41;
        if (v148 == v150)
        {
          uint64_t v42 = 0;
          if (v148 == 1) {
            int v43 = 3;
          }
          else {
            int v43 = 4;
          }
          LODWORD(v165) = v43;
        }
        else if (v150 > 0x40)
        {
          LODWORD(v165) = 1;
          uint64_t v45 = (char *)operator new(0x78uLL);
          unint64_t v46 = (unint64_t)(v45 + 32);
          *((_DWORD *)v45 + 13) = *((_DWORD *)v45 + 13) & 0x38000000 | 1;
          *(void *)uint64_t v45 = 0;
          *((void *)v45 + 1) = 0;
          *((void *)v45 + 2) = 0;
          *((void *)v45 + 3) = v45 + 32;
          uint64_t v47 = *(void *)a1;
          unsigned int v48 = *(llvm::PointerType **)(a1 + 48);
          __int16 v164 = 257;
          llvm::GlobalVariable::GlobalVariable((unint64_t *)v45 + 4, v47, v48, 1, 8, 0, (const char **)&v160, 0, 0, 0, 0);
          uint64_t v49 = (char *)operator new(0x78uLL);
          uint64_t v50 = (llvm::detail::IEEEFloat *)(v49 + 32);
          *((_DWORD *)v49 + 13) = *((_DWORD *)v49 + 13) & 0x38000000 | 1;
          *(void *)uint64_t v49 = 0;
          *((void *)v49 + 1) = 0;
          *((void *)v49 + 2) = 0;
          *((void *)v49 + 3) = v49 + 32;
          uint64_t v51 = *(void *)a1;
          uint64_t v52 = *(llvm::PointerType **)(a1 + 48);
          __int16 v164 = 257;
          llvm::GlobalVariable::GlobalVariable((unint64_t *)v49 + 4, v51, v52, 1, 8, 0, (const char **)&v160, 0, 0, 0, 0);
          unint64_t v54 = *(void **)(a1 + 144);
          unint64_t v53 = *(void *)(a1 + 152);
          if ((unint64_t)v54 >= v53)
          {
            uint64_t v67 = *(void **)(a1 + 136);
            unint64_t v68 = 0x6DB6DB6DB6DB6DB7 * (v54 - v67) + 1;
            if (v68 > 0x492492492492492) {
              abort();
            }
            unint64_t v69 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v53 - (void)v67) >> 3);
            if (2 * v69 > v68) {
              unint64_t v68 = 2 * v69;
            }
            if (v69 >= 0x249249249249249) {
              unint64_t v70 = 0x492492492492492;
            }
            else {
              unint64_t v70 = v68;
            }
            if (v70 > 0x492492492492492) {
              sub_1CB833614();
            }
            uint64_t v71 = 56 * v70;
            uint64_t v72 = (char *)operator new(56 * v70);
            uint64_t v73 = &v72[8 * (v54 - v67)];
            uint64_t v74 = &v72[v71];
            *(_OWORD *)(v73 + 40) = 0u;
            *(_OWORD *)(v73 + 24) = 0u;
            *(_OWORD *)(v73 + 8) = 0u;
            *(void *)uint64_t v73 = v73 + 8;
            *((void *)v73 + 6) = 0;
            unint64_t v55 = v73 + 56;
            if (v54 == v67)
            {
              *(void *)(a1 + 136) = v73;
              *(void *)(a1 + 144) = v55;
              *(void *)(a1 + 152) = v74;
            }
            else
            {
              uint64_t v75 = 0;
              do
              {
                uint64_t v76 = &v73[v75 * 8];
                *((void *)v76 - 7) = v54[v75 - 7];
                uint64_t v77 = &v54[v75 - 6];
                uint64_t v78 = *v77;
                *(void *)&v73[v75 * 8 - 48] = *v77;
                uint64_t v79 = (uint64_t)&v73[v75 * 8 - 48];
                uint64_t v80 = v54[v75 - 5];
                *((void *)v76 - 5) = v80;
                if (v80)
                {
                  *(void *)(v78 + 16) = v79;
                  v54[v75 - 7] = v77;
                  *uint64_t v77 = 0;
                  v54[v75 - 5] = 0;
                }
                else
                {
                  *((void *)v76 - 7) = v79;
                }
                uint64_t v81 = &v73[v75 * 8];
                long long v82 = *(_OWORD *)&v54[v75 - 2];
                *((_OWORD *)v81 - 2) = *(_OWORD *)&v54[v75 - 4];
                *((_OWORD *)v81 - 1) = v82;
                v75 -= 7;
              }
              while (&v54[v75] != v67);
              unint64_t v54 = *(void **)(a1 + 136);
              uint64_t v83 = *(void **)(a1 + 144);
              *(void *)(a1 + 136) = &v73[v75 * 8];
              *(void *)(a1 + 144) = v55;
              *(void *)(a1 + 152) = v74;
              if (v83 != v54)
              {
                uint64_t v84 = (uint64_t)(v83 - 7);
                do
                {
                  sub_1CB833A08(v84, *(void **)(v84 + 8));
                  BOOL v60 = v84 == (void)v54;
                  v84 -= 56;
                }
                while (!v60);
              }
            }
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            v54[5] = 0;
            v54[6] = 0;
            *(_OWORD *)(v54 + 3) = 0u;
            *(_OWORD *)(v54 + 1) = 0u;
            *unint64_t v54 = v54 + 1;
            unint64_t v55 = v54 + 7;
          }
          *(void *)(a1 + 144) = v55;
          uint64_t v42 = v55 - 7;
          if (v55 - 7 != &v146) {
            sub_1CD674080((uint64_t)(v55 - 7), v146, &v147);
          }
          *(v55 - 4) = v150;
          *(v55 - 3) = v46;
          *(v55 - 2) = v50;
          unint64_t v169 = v46;
          uint64_t v170 = v50;
          uint64_t v9 = v152;
        }
        else
        {
          LODWORD(v165) = 2;
          uint64_t v44 = v146;
          if (v146 == &v147)
          {
            uint64_t v42 = 0;
            LODWORD(v165) = 0;
          }
          else
          {
            uint64_t v56 = 0;
            do
            {
              uint64_t v57 = (void *)v44[1];
              uint64_t v58 = v44;
              if (v57)
              {
                do
                {
                  uint64_t v59 = (void **)v57;
                  uint64_t v57 = (void *)*v57;
                }
                while (v57);
              }
              else
              {
                do
                {
                  uint64_t v59 = (void **)v58[2];
                  BOOL v60 = *v59 == v58;
                  uint64_t v58 = v59;
                }
                while (!v60);
              }
              v56 |= 1 << v44[4];
              uint64_t v44 = v59;
            }
            while (v59 != &v147);
            uint64_t v61 = 88;
            if (v150 < 0x21) {
              uint64_t v61 = 72;
            }
            uint64_t v62 = *(void *)(a1 + v61);
            uint64_t v63 = *(llvm::ConstantInt **)v62;
            unint64_t v64 = *(unsigned int *)(v62 + 8);
            unsigned int v161 = v64 >> 8;
            if (v64 >> 8 > 0x40) {
              operator new[]();
            }
            if (v64 <= 0xFF) {
              unint64_t v65 = 0;
            }
            else {
              unint64_t v65 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v64) + 63);
            }
            unint64_t v160 = (char *)(v65 & v56);
            uint64_t v66 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(v63, (llvm::LLVMContext *)&v160, v40);
            if (v161 >= 0x41 && v160) {
              MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
            }
            uint64_t v42 = 0;
            uint64_t v171 = v66;
          }
        }
        unint64_t v160 = 0;
        char v85 = sub_1CBA9C7FC(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), v9, &v160);
        uint64_t v89 = v160;
        if (v85)
        {
          if (v160[32])
          {
            uint64_t v90 = *(size_t **)(v9 + 8);
            size_t v93 = *v90;
            unsigned int v92 = (int *)(v90 + 3);
            size_t v91 = v93;
            unint64_t v94 = sub_1CD4EFDD8(*(void *)(a1 + 8), v92, v93);
            unsigned int v95 = v165;
            *(_DWORD *)unint64_t v94 = v165;
            if (!v95) {
              goto LABEL_92;
            }
            size_t v141 = (size_t)v94;
            size_t v142 = v91;
            unsigned int v101 = *(llvm::PointerType **)(a1 + 48);
            __int16 v156 = 1283;
            v153[0] = "__typeid_";
            uint64_t v154 = v92;
            size_t v155 = v91;
            v157[0] = v153;
            uint64_t v158 = "_";
            __int16 v159 = 770;
            unint64_t v160 = (char *)v157;
            uint64_t v162 = "global_addr";
            uint64_t v163 = 11;
            __int16 v164 = 1282;
            uint64_t v102 = llvm::GlobalAlias::create(v101, 0, 0, (const char **)&v160, ElementPtr, *(void *)a1);
            uint64_t v103 = v102;
            int v104 = *((_DWORD *)v102 + 8);
            unsigned int v105 = v104 & 0xFFFFFFCF | 0x10;
            *((_DWORD *)v102 + 8) = v105;
            if ((v104 & 0xFu) - 7 < 2)
            {
LABEL_106:
              *((_DWORD *)v103 + 8) = v105 | 0x4000;
            }
            else if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v102) & 1) == 0)
            {
              unsigned int v105 = *((_DWORD *)v103 + 8);
              goto LABEL_106;
            }
            size_t v96 = 0;
            if (v95 > 4 || ((1 << v95) & 0x16) == 0) {
              goto LABEL_93;
            }
            if ((*(_DWORD *)(a1 + 28) - 41) <= 1 && *(_DWORD *)(a1 + 36) == 3)
            {
              uint64_t v106 = sub_1CC56C0C0((llvm *)0x30, v167, *(llvm::Constant **)(a1 + 56), 0);
              uint64_t v107 = *(llvm::PointerType **)(a1 + 48);
              __int16 v156 = 1283;
              v153[0] = "__typeid_";
              uint64_t v154 = v92;
              size_t v155 = v142;
              v157[0] = v153;
              uint64_t v158 = "_";
              __int16 v159 = 770;
              unint64_t v160 = (char *)v157;
              uint64_t v162 = "align";
              uint64_t v163 = 5;
              __int16 v164 = 1282;
              uint64_t v108 = llvm::GlobalAlias::create(v107, 0, 0, (const char **)&v160, (unint64_t)v106, *(void *)a1);
              uint64_t v109 = v108;
              int v110 = *((_DWORD *)v108 + 8);
              unsigned int v111 = v110 & 0xFFFFFFCF | 0x10;
              *((_DWORD *)v108 + 8) = v111;
              if ((v110 & 0xFu) - 7 < 2) {
                goto LABEL_114;
              }
              char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v108);
              size_t v113 = v141;
              if ((hasExternalWeakLinkage & 1) == 0)
              {
                unsigned int v111 = *((_DWORD *)v109 + 8);
LABEL_114:
                *((_DWORD *)v109 + 8) = v111 | 0x4000;
                size_t v113 = v141;
              }
            }
            else
            {
              BOOL v114 = (void *)((char *)v167 + 24);
              if (*((_DWORD *)v167 + 8) >= 0x41u) {
                BOOL v114 = (void *)*v114;
              }
              size_t v113 = v141;
              *(void *)(v141 + 8) = *v114;
            }
            int64_t v115 = v168;
            if ((*(_DWORD *)(a1 + 28) - 41) <= 1 && *(_DWORD *)(a1 + 36) == 3)
            {
              uint64_t v116 = sub_1CC56C0C0((llvm *)0x30, v168, *(llvm::Constant **)(a1 + 56), 0);
              uint64_t v117 = *(llvm::PointerType **)(a1 + 48);
              __int16 v156 = 1283;
              v153[0] = "__typeid_";
              uint64_t v154 = v92;
              size_t v155 = v142;
              v157[0] = v153;
              uint64_t v158 = "_";
              __int16 v159 = 770;
              unint64_t v160 = (char *)v157;
              uint64_t v162 = "size_m1";
              uint64_t v163 = 7;
              __int16 v164 = 1282;
              uint64_t v118 = llvm::GlobalAlias::create(v117, 0, 0, (const char **)&v160, (unint64_t)v116, *(void *)a1);
              int v119 = *((_DWORD *)v118 + 8);
              unsigned int v120 = v119 & 0xFFFFFFCF | 0x10;
              *((_DWORD *)v118 + 8) = v120;
              if ((v119 & 0xFu) - 7 < 2) {
                goto LABEL_123;
              }
              int v140 = v118;
              char v121 = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v118);
              size_t v113 = v141;
              if ((v121 & 1) == 0)
              {
                uint64_t v118 = v140;
                unsigned int v120 = *((_DWORD *)v140 + 8);
LABEL_123:
                *((_DWORD *)v118 + 8) = v120 | 0x4000;
                size_t v113 = v141;
              }
            }
            else
            {
              uint64_t v122 = (void *)((char *)v168 + 24);
              if (*((_DWORD *)v168 + 8) >= 0x41u) {
                uint64_t v122 = (void *)*v122;
              }
              *(void *)(v113 + 16) = *v122;
            }
            uint64_t v123 = (void *)((char *)v115 + 24);
            if (*((_DWORD *)v115 + 8) >= 0x41u) {
              uint64_t v123 = (void *)*v123;
            }
            unint64_t v124 = *v123 + 1;
            if (v95 == 2)
            {
              if (v124 < 0x21) {
                int v125 = 5;
              }
              else {
                int v125 = 6;
              }
              *(_DWORD *)(v113 + 4) = v125;
              if ((*(_DWORD *)(a1 + 28) - 41) <= 1 && *(_DWORD *)(a1 + 36) == 3)
              {
                uint64_t v126 = sub_1CC56C0C0((llvm *)0x30, v171, *(llvm::Constant **)(a1 + 56), 0);
                uint64_t v127 = *(llvm::PointerType **)(a1 + 48);
                __int16 v156 = 1283;
                v153[0] = "__typeid_";
                uint64_t v154 = v92;
                size_t v155 = v142;
                v157[0] = v153;
                uint64_t v158 = "_";
                __int16 v159 = 770;
                unint64_t v160 = (char *)v157;
                uint64_t v162 = "inline_bits";
                uint64_t v128 = 11;
                goto LABEL_147;
              }
              int v139 = (void *)((char *)v171 + 24);
              if (*((_DWORD *)v171 + 8) >= 0x41u) {
                int v139 = (void *)*v139;
              }
              size_t v96 = 0;
              *(void *)(v113 + 32) = *v139;
LABEL_93:
              if (v42) {
                v42[6] = v96;
              }
              goto LABEL_96;
            }
            if (v124 >= 0x81) {
              int v129 = 32;
            }
            else {
              int v129 = 7;
            }
            *(_DWORD *)(v113 + 4) = v129;
            if (v95 == 1)
            {
              uint64_t v130 = *(llvm::PointerType **)(a1 + 48);
              __int16 v156 = 1283;
              v153[0] = "__typeid_";
              uint64_t v154 = v92;
              size_t v155 = v142;
              v157[0] = v153;
              uint64_t v158 = "_";
              __int16 v159 = 770;
              unint64_t v160 = (char *)v157;
              uint64_t v162 = "byte_array";
              uint64_t v163 = 10;
              __int16 v164 = 1282;
              uint64_t v131 = llvm::GlobalAlias::create(v130, 0, 0, (const char **)&v160, v169, *(void *)a1);
              size_t v132 = v131;
              int v133 = *((_DWORD *)v131 + 8);
              unsigned int v134 = v133 & 0xFFFFFFCF | 0x10;
              *((_DWORD *)v131 + 8) = v134;
              if ((v133 & 0xFu) - 7 < 2) {
                goto LABEL_143;
              }
              if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v131) & 1) == 0)
              {
                unsigned int v134 = *((_DWORD *)v132 + 8);
LABEL_143:
                *((_DWORD *)v132 + 8) = v134 | 0x4000;
              }
              if ((*(_DWORD *)(a1 + 28) - 41) > 1 || *(_DWORD *)(a1 + 36) != 3)
              {
                size_t v96 = v141 + 24;
                goto LABEL_93;
              }
              uint64_t v126 = v170;
              uint64_t v127 = *(llvm::PointerType **)(a1 + 48);
              __int16 v156 = 1283;
              v153[0] = "__typeid_";
              uint64_t v154 = v92;
              size_t v155 = v142;
              v157[0] = v153;
              uint64_t v158 = "_";
              __int16 v159 = 770;
              unint64_t v160 = (char *)v157;
              uint64_t v162 = "bit_mask";
              uint64_t v128 = 8;
LABEL_147:
              uint64_t v163 = v128;
              __int16 v164 = 1282;
              BOOL v135 = llvm::GlobalAlias::create(v127, 0, 0, (const char **)&v160, (unint64_t)v126, *(void *)a1);
              char v136 = v135;
              int v137 = *((_DWORD *)v135 + 8);
              unsigned int v138 = v137 & 0xFFFFFFCF | 0x10;
              *((_DWORD *)v135 + 8) = v138;
              if ((v137 & 0xFu) - 7 < 2)
              {
LABEL_150:
                size_t v96 = 0;
                *((_DWORD *)v136 + 8) = v138 | 0x4000;
                goto LABEL_93;
              }
              if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v135) & 1) == 0)
              {
                unsigned int v138 = *((_DWORD *)v136 + 8);
                goto LABEL_150;
              }
            }
LABEL_92:
            size_t v96 = 0;
            goto LABEL_93;
          }
        }
        else
        {
          uint64_t v89 = (char *)sub_1CC956E50(a1 + 112, &v152, v160);
          *(void *)uint64_t v89 = v9;
          *(_OWORD *)(v89 + 8) = 0u;
          *(_OWORD *)(v89 + 24) = 0u;
        }
LABEL_96:
        unsigned int v97 = (const llvm::APInt **)*((void *)v89 + 1);
        uint64_t v98 = (const llvm::APInt **)*((void *)v89 + 2);
        while (v97 != v98)
        {
          unsigned int v99 = *v97;
          uint64_t v100 = (llvm::Value *)sub_1CC9539DC((uint64_t ***)a1, v9, *v97, (uint64_t)&v165, v86, v87, v88);
          if (v100)
          {
            llvm::Value::doRAUW(v99, v100, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          ++v97;
        }
        sub_1CB833A08((uint64_t)&v146, v147);
        ++a2;
      }
      while (a2 != v143);
    }
  }
}

uint64_t sub_1CC95B5DC(uint64_t a1)
{
  v19[24] = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 28);
  if (v1 > 40)
  {
    if ((v1 - 41) >= 2) {
      goto LABEL_35;
    }
    return 8;
  }
  if (v1 != 1)
  {
    if (v1 != 3)
    {
      if (v1 != 39) {
LABEL_35:
      }
        llvm::report_fatal_error((llvm *)"Unsupported architecture for jump tables", (const llvm::Twine *)1);
      return 4;
    }
    uint64_t v3 = *(llvm::Module **)a1;
    uint64_t v17 = v19;
    uint64_t v18 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v3, (uint64_t)&v17);
    if (v18)
    {
      char v4 = (uint64_t *)((char *)v17 + 16);
      uint64_t v5 = 24 * v18;
      while (1)
      {
        uint64_t v6 = *(void *)(*(v4 - 1) + 8);
        if (*(void *)v6 == 25)
        {
          uint64_t v7 = *(void *)(v6 + 24);
          uint64_t v8 = *(void *)(v6 + 32);
          uint64_t v9 = *(void *)(v6 + 40);
          int v10 = *(unsigned __int8 *)(v6 + 48);
          BOOL v11 = v7 == 0x742D68636E617262 && v8 == 0x6E652D7465677261;
          BOOL v12 = v11 && v9 == 0x6E656D6563726F66;
          if (v12 && v10 == 116) {
            break;
          }
        }
        v4 += 3;
        v5 -= 24;
        if (!v5) {
          goto LABEL_25;
        }
      }
      uint64_t v14 = *v4;
    }
    else
    {
LABEL_25:
      uint64_t v14 = 0;
    }
    if (v17 == v19)
    {
      if (v14)
      {
LABEL_28:
        uint64_t v15 = *(void *)(v14 + 128);
        if (!v15) {
          return 4;
        }
        uint64_t v16 = (void *)(v15 + 24);
        if (*(_DWORD *)(v15 + 32) >= 0x41u) {
          uint64_t v16 = (void *)*v16;
        }
        if (!*v16) {
          return 4;
        }
        return 8;
      }
    }
    else
    {
      free(v17);
      if (v14) {
        goto LABEL_28;
      }
    }
  }
  return 4;
}

void sub_1CC95B780(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      if (*(a2 - 4) > *(void *)(a1 + 24))
      {
        uint64_t v8 = (uint64_t)(a2 - 7);
        sub_1CC95BB2C(a1, v8);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((void *)a1 != a2)
      {
        uint64_t v15 = (void *)(a1 + 56);
        if ((void *)(a1 + 56) != a2)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (void *)a1;
          do
          {
            uint64_t v18 = v15;
            uint64_t v19 = (long long *)(v17 + 10);
            if (v17[10] > v17[3])
            {
              uint64_t v22 = (void *)v17[8];
              uint64_t v20 = v17 + 8;
              unint64_t v21 = v22;
              uint64_t v50 = (void *)*v18;
              uint64_t v51 = v22;
              uint64_t v52 = v20[1];
              if (v52)
              {
                v21[2] = &v51;
                void *v18 = v20;
                *uint64_t v20 = 0;
                v20[1] = 0;
              }
              else
              {
                uint64_t v50 = &v51;
              }
              long long v23 = v19[1];
              long long v53 = *v19;
              long long v54 = v23;
              uint64_t v24 = v16;
              while (1)
              {
                unsigned int v25 = (_OWORD *)(v7 + v24);
                sub_1CD673ED8(v7 + v24 + 56, (void *)(v7 + v24));
                long long v26 = *(_OWORD *)(v7 + v24 + 40);
                void v25[5] = *(_OWORD *)((char *)v25 + 24);
                v25[6] = v26;
                if (!v24) {
                  break;
                }
                v24 -= 56;
                if ((unint64_t)v53 <= *((void *)v25 - 4))
                {
                  uint64_t v27 = v7 + v24 + 56;
                  goto LABEL_26;
                }
              }
              uint64_t v27 = v7;
LABEL_26:
              uint64_t v28 = v27 + 8;
              sub_1CB833A08(v27, *(void **)(v27 + 8));
              *(void *)uint64_t v27 = v50;
              uint64_t v29 = v51;
              *(void *)(v27 + 8) = v51;
              uint64_t v30 = v52;
              *(void *)(v27 + 16) = v52;
              if (v30)
              {
                uint64_t v31 = 0;
                v29[2] = v28;
                uint64_t v50 = &v51;
                uint64_t v51 = 0;
                uint64_t v52 = 0;
              }
              else
              {
                *(void *)uint64_t v27 = v28;
                uint64_t v31 = v51;
              }
              long long v32 = v54;
              *(_OWORD *)((char *)v25 + 24) = v53;
              *(_OWORD *)((char *)v25 + 40) = v32;
              sub_1CB833A08((uint64_t)&v50, v31);
            }
            uint64_t v15 = v18 + 7;
            v16 += 56;
            uint64_t v17 = v18;
          }
          while (v18 + 7 != a2);
        }
      }
    }
    else
    {
      uint64_t v11 = a4;
      unint64_t v12 = a3 >> 1;
      uint64_t v13 = (void *)(a1 + 56 * (a3 >> 1));
      unint64_t v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v33 = sub_1CC95BC24(a1, v13, v14, a4, a6);
        uint64_t v34 = v11 + 56 * v12;
        sub_1CC95BC24(v7 + 56 * (a3 >> 1), a2, a3 - (a3 >> 1), v34, v33);
        unint64_t v35 = v11 + 56 * a3;
        uint64_t v36 = v34;
        uint64_t v37 = v11;
        while (v36 != v35)
        {
          unint64_t v38 = (_OWORD *)(v7 + 24);
          if (*(void *)(v36 + 24) <= *(void *)(v37 + 24))
          {
            sub_1CD673ED8(v7, (void *)v37);
            long long v40 = *(_OWORD *)(v37 + 40);
            _OWORD *v38 = *(_OWORD *)(v37 + 24);
            *(_OWORD *)(v7 + 40) = v40;
            v37 += 56;
          }
          else
          {
            sub_1CD673ED8(v7, (void *)v36);
            long long v39 = *(_OWORD *)(v36 + 40);
            _OWORD *v38 = *(_OWORD *)(v36 + 24);
            *(_OWORD *)(v7 + 40) = v39;
            v36 += 56;
          }
          v7 += 56;
          if (v37 == v34)
          {
            if (v36 != v35)
            {
              uint64_t v41 = 0;
              do
              {
                uint64_t v42 = v36 + v41;
                uint64_t v43 = v7 + v41;
                sub_1CD673ED8(v7 + v41, (void *)(v36 + v41));
                long long v44 = *(_OWORD *)(v36 + v41 + 24);
                *(_OWORD *)(v43 + 40) = *(_OWORD *)(v36 + v41 + 40);
                *(_OWORD *)(v43 + 24) = v44;
                v41 += 56;
              }
              while (v42 + 56 != v35);
            }
            goto LABEL_43;
          }
        }
        if (v37 != v34)
        {
          uint64_t v45 = 0;
          do
          {
            uint64_t v46 = v37 + v45;
            uint64_t v47 = v7 + v45;
            sub_1CD673ED8(v7 + v45, (void *)(v37 + v45));
            long long v48 = *(_OWORD *)(v37 + v45 + 24);
            *(_OWORD *)(v47 + 40) = *(_OWORD *)(v37 + v45 + 40);
            *(_OWORD *)(v47 + 24) = v48;
            v45 += 56;
          }
          while (v46 + 56 != v34);
        }
LABEL_43:
        if (v11)
        {
          unint64_t v49 = a3;
          do
          {
            sub_1CB833A08(v11, *(void **)(v11 + 8));
            v11 += 56;
            --v49;
          }
          while (v49);
        }
      }
      else
      {
        sub_1CC95B780(a1, v13, v14, a4, a5);
        sub_1CC95B780(v7 + 56 * (a3 >> 1), a2, a3 - (a3 >> 1), v11, a5);
        sub_1CC95C154(v7, v7 + 56 * (a3 >> 1), (uint64_t)a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
}

void sub_1CC95BB2C(uint64_t a1, uint64_t a2)
{
  char v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  unint64_t v12 = *(void **)a1;
  uint64_t v13 = v5;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    void v5[2] = &v13;
    *(void *)a1 = v4;
    void *v4 = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    unint64_t v12 = &v13;
  }
  long long v6 = *(_OWORD *)(a1 + 40);
  long long v15 = *(_OWORD *)(a1 + 24);
  long long v16 = v6;
  sub_1CD673ED8(a1, (void *)a2);
  long long v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  uint64_t v8 = a2 + 8;
  sub_1CB833A08(a2, *(void **)(a2 + 8));
  uint64_t v9 = v13;
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = v14;
  *(void *)(a2 + 16) = v14;
  if (v10)
  {
    void v9[2] = v8;
    unint64_t v12 = &v13;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    *(void *)a2 = v8;
  }
  long long v11 = v16;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v11;
  sub_1CB833A08((uint64_t)&v12, v9);
}

__n128 sub_1CC95BC24(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v8 = (void *)a1;
    if (a3 == 2)
    {
      uint64_t v13 = (__n128 *)(a2 - 4);
      uint64_t v14 = (__n128 *)(a1 + 24);
      uint64_t v15 = a4 + 8;
      if (*(a2 - 4) <= *(void *)(a1 + 24))
      {
        *(void *)a4 = *(void *)a1;
        long long v23 = (void *)(a1 + 8);
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a4 + 8) = v24;
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)(a4 + 16) = v25;
        if (v25)
        {
          *(void *)(v24 + 16) = v15;
          *(void *)a1 = v23;
          *long long v23 = 0;
          *(void *)(a1 + 16) = 0;
        }
        else
        {
          *(void *)a4 = v15;
        }
        __n128 v56 = *v14;
        *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
        *(__n128 *)(a4 + 24) = v56;
        *(void *)(a4 + 56) = *(a2 - 7);
        uint64_t v57 = a2 - 6;
        uint64_t v58 = *(a2 - 6);
        *(void *)(a4 + 64) = v58;
        uint64_t v59 = a4 + 64;
        uint64_t v60 = *(a2 - 5);
        *(void *)(a4 + 72) = v60;
        if (v60)
        {
          *(void *)(v58 + 16) = v59;
          *(a2 - 7) = v57;
          *uint64_t v57 = 0;
          *(a2 - 5) = 0;
        }
        else
        {
          *(void *)(a4 + 56) = v59;
        }
        BOOL result = *v13;
        long long v61 = *((_OWORD *)a2 - 1);
      }
      else
      {
        *(void *)a4 = *(a2 - 7);
        long long v16 = a2 - 6;
        uint64_t v17 = *(a2 - 6);
        *(void *)(a4 + 8) = v17;
        uint64_t v18 = *(a2 - 5);
        *(void *)(a4 + 16) = v18;
        if (v18)
        {
          *(void *)(v17 + 16) = v15;
          *(a2 - 7) = v16;
          void *v16 = 0;
          *(a2 - 5) = 0;
        }
        else
        {
          *(void *)a4 = v15;
        }
        __n128 v51 = *v13;
        *(_OWORD *)(a4 + 40) = *((_OWORD *)a2 - 1);
        *(__n128 *)(a4 + 24) = v51;
        *(void *)(a4 + 56) = *(void *)a1;
        uint64_t v52 = (void *)(a1 + 8);
        uint64_t v53 = *(void *)(a1 + 8);
        *(void *)(a4 + 64) = v53;
        uint64_t v54 = a4 + 64;
        uint64_t v55 = *(void *)(a1 + 16);
        *(void *)(a4 + 72) = v55;
        if (v55)
        {
          *(void *)(v53 + 16) = v54;
          *(void *)a1 = v52;
          void *v52 = 0;
          *(void *)(a1 + 16) = 0;
        }
        else
        {
          *(void *)(a4 + 56) = v54;
        }
        BOOL result = *v14;
        long long v61 = *(_OWORD *)(a1 + 40);
      }
      *(__n128 *)(a4 + 80) = result;
      *(_OWORD *)(a4 + 96) = v61;
    }
    else if (a3 == 1)
    {
      *(void *)a4 = *(void *)a1;
      uint64_t v9 = (void *)(a1 + 8);
      uint64_t v10 = *(void *)(a1 + 8);
      *(void *)(a4 + 8) = v10;
      uint64_t v11 = a4 + 8;
      uint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a4 + 16) = v12;
      if (v12)
      {
        *(void *)(v10 + 16) = v11;
        *(void *)a1 = v9;
        *uint64_t v9 = 0;
        *(void *)(a1 + 16) = 0;
      }
      else
      {
        *(void *)a4 = v11;
      }
      BOOL result = *(__n128 *)(a1 + 24);
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(__n128 *)(a4 + 24) = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v26 = 56 * (a3 >> 1);
      uint64_t v27 = (void *)(a1 + v26);
      sub_1CC95B780(a1, a1 + v26, a3 >> 1, a4, a3 >> 1);
      sub_1CC95B780(&v8[(unint64_t)v26 / 8], a2, a3 - (a3 >> 1), a4 + v26, a3 - (a3 >> 1));
      uint64_t v28 = a4 + 16;
      uint64_t v29 = &v8[(unint64_t)v26 / 8];
      while (v29 != a2)
      {
        uint64_t v30 = v28 - 8;
        if (v29[3] <= v8[3])
        {
          *(void *)(v28 - 16) = *v8;
          uint64_t v34 = v8 + 1;
          uint64_t v35 = v8[1];
          *(void *)(v28 - 8) = v35;
          uint64_t v36 = v8[2];
          *(void *)uint64_t v28 = v36;
          if (v36)
          {
            *(void *)(v35 + 16) = v30;
            *uint64_t v8 = v34;
            *uint64_t v34 = 0;
            v8[2] = 0;
          }
          else
          {
            *(void *)(v28 - 16) = v30;
          }
          BOOL result = *(__n128 *)(v8 + 3);
          *(_OWORD *)(v28 + 24) = *(_OWORD *)(v8 + 5);
          *(__n128 *)(v28 + 8) = result;
          v8 += 7;
        }
        else
        {
          *(void *)(v28 - 16) = *v29;
          uint64_t v31 = v29 + 1;
          uint64_t v32 = v29[1];
          *(void *)(v28 - 8) = v32;
          uint64_t v33 = v29[2];
          *(void *)uint64_t v28 = v33;
          if (v33)
          {
            *(void *)(v32 + 16) = v30;
            void *v29 = v31;
            *uint64_t v31 = 0;
            v29[2] = 0;
          }
          else
          {
            *(void *)(v28 - 16) = v30;
          }
          BOOL result = *(__n128 *)(v29 + 3);
          *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 5);
          *(__n128 *)(v28 + 8) = result;
          v29 += 7;
        }
        v28 += 56;
        if (v8 == v27)
        {
          if (v29 != a2)
          {
            uint64_t v37 = 0;
            do
            {
              unint64_t v38 = (void *)(v28 + v37 * 8);
              *(v38 - 2) = v29[v37];
              long long v39 = &v29[v37 + 1];
              uint64_t v40 = *v39;
              *(void *)(v28 + v37 * 8 - 8) = *v39;
              uint64_t v41 = v28 + v37 * 8 - 8;
              uint64_t v42 = v29[v37 + 2];
              void *v38 = v42;
              if (v42)
              {
                *(void *)(v40 + 16) = v41;
                v29[v37] = v39;
                uint64_t *v39 = 0;
                v29[v37 + 2] = 0;
              }
              else
              {
                *(v38 - 2) = v41;
              }
              uint64_t v43 = v28 + v37 * 8;
              BOOL result = *(__n128 *)&v29[v37 + 3];
              *(_OWORD *)(v43 + 24) = *(_OWORD *)&v29[v37 + 5];
              *(__n128 *)(v43 + 8) = result;
              v37 += 7;
            }
            while (&v29[v37] != a2);
          }
          return result;
        }
      }
      if (v8 != v27)
      {
        uint64_t v44 = 0;
        do
        {
          uint64_t v45 = (void *)(v28 + v44 * 8);
          *(v45 - 2) = v8[v44];
          uint64_t v46 = &v8[v44 + 1];
          uint64_t v47 = *v46;
          *(void *)(v28 + v44 * 8 - 8) = *v46;
          uint64_t v48 = v28 + v44 * 8 - 8;
          uint64_t v49 = v8[v44 + 2];
          void *v45 = v49;
          if (v49)
          {
            *(void *)(v47 + 16) = v48;
            v8[v44] = v46;
            *uint64_t v46 = 0;
            v8[v44 + 2] = 0;
          }
          else
          {
            *(v45 - 2) = v48;
          }
          uint64_t v50 = v28 + v44 * 8;
          BOOL result = *(__n128 *)&v8[v44 + 3];
          *(_OWORD *)(v50 + 24) = *(_OWORD *)&v8[v44 + 5];
          *(__n128 *)(v50 + 8) = result;
          v44 += 7;
        }
        while (&v8[v44] != v27);
      }
    }
    else if ((void *)a1 != a2)
    {
      *(void *)a4 = *(void *)a1;
      uint64_t v19 = (void *)(a1 + 8);
      uint64_t v20 = *(void *)(a1 + 8);
      *(void *)(a4 + 8) = v20;
      uint64_t v21 = a4 + 8;
      uint64_t v22 = *(void *)(a1 + 16);
      *(void *)(a4 + 16) = v22;
      if (v22)
      {
        *(void *)(v20 + 16) = v21;
        *(void *)a1 = v19;
        *uint64_t v19 = 0;
        *(void *)(a1 + 16) = 0;
      }
      else
      {
        *(void *)a4 = v21;
      }
      BOOL result = *(__n128 *)(a1 + 24);
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(__n128 *)(a4 + 24) = result;
      uint64_t v62 = (void *)(a1 + 56);
      if ((void *)(a1 + 56) != a2)
      {
        uint64_t v63 = 0;
        unint64_t v64 = (void *)a4;
        do
        {
          unint64_t v65 = v62;
          uint64_t v66 = v64 + 7;
          uint64_t v67 = v8 + 10;
          unint64_t v68 = v64 + 8;
          if (v8[10] > v64[3])
          {
            uint64_t v75 = v64 + 1;
            uint64_t v76 = v64[1];
            v64[7] = *v64;
            v64[8] = v76;
            uint64_t v77 = v64[2];
            v64[9] = v77;
            if (v77)
            {
              *(void *)(v76 + 16) = v68;
              void *v64 = v75;
              *uint64_t v75 = 0;
              v64[2] = 0;
            }
            else
            {
              *uint64_t v66 = v68;
            }
            long long v78 = *(_OWORD *)(v64 + 5);
            *((_OWORD *)v64 + 5) = *(_OWORD *)(v64 + 3);
            *((_OWORD *)v64 + 6) = v78;
            uint64_t v79 = a4;
            if (v64 != (void *)a4)
            {
              uint64_t v80 = v63;
              while (1)
              {
                uint64_t v79 = a4 + v80;
                if (*v67 <= *(void *)(a4 + v80 - 32)) {
                  break;
                }
                sub_1CD673ED8(a4 + v80, (void *)(v79 - 56));
                long long v81 = *(_OWORD *)(a4 + v80 - 16);
                *(_OWORD *)(v79 + 24) = *(_OWORD *)(a4 + v80 - 32);
                *(_OWORD *)(v79 + 40) = v81;
                v80 -= 56;
                if (!v80)
                {
                  uint64_t v79 = a4;
                  break;
                }
              }
            }
            sub_1CD673ED8(v79, v65);
            uint64_t v73 = (_OWORD *)(v79 + 24);
          }
          else
          {
            v64[7] = *v62;
            uint64_t v71 = v8[8];
            unint64_t v70 = v8 + 8;
            uint64_t v69 = v71;
            v64[8] = v71;
            uint64_t v72 = v70[1];
            v64[9] = v72;
            if (v72)
            {
              *(void *)(v69 + 16) = v68;
              *unint64_t v65 = v70;
              *unint64_t v70 = 0;
              v70[1] = 0;
            }
            else
            {
              *uint64_t v66 = v68;
            }
            uint64_t v73 = v64 + 10;
          }
          BOOL result = *(__n128 *)v67;
          long long v74 = *((_OWORD *)v67 + 1);
          uint64_t v62 = v65 + 7;
          _OWORD *v73 = *(_OWORD *)v67;
          v73[1] = v74;
          v63 += 56;
          unint64_t v64 = v66;
          uint64_t v8 = v65;
        }
        while (v65 + 7 != a2);
      }
    }
  }
  return result;
}

void sub_1CC95C154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a4;
      while (1)
      {
        uint64_t v14 = a1 + v12;
        if (*(void *)(a2 + 24) > *(void *)(a1 + v12 + 24)) {
          break;
        }
        v12 += 56;
        if (__CFADD__(v13++, 1)) {
          return;
        }
      }
      uint64_t v16 = -v13;
      uint64_t v90 = a6;
      if (-v13 >= v8)
      {
        if (v13 == -1)
        {
          sub_1CC95BB2C(a1 + v12, a2);
          return;
        }
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v28 = v16 >> 1;
        uint64_t v27 = a2;
        uint64_t v29 = a3;
        if (a3 != a2)
        {
          unint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 3);
          uint64_t v29 = a2;
          do
          {
            unint64_t v31 = v30 >> 1;
            unint64_t v32 = v29 + 56 * (v30 >> 1);
            unint64_t v33 = *(void *)(v32 + 24);
            uint64_t v34 = v32 + 56;
            v30 += ~(v30 >> 1);
            if (v33 > *(void *)(a1 + 56 * v28 + v12 + 24)) {
              uint64_t v29 = v34;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
          uint64_t v27 = v29;
        }
        uint64_t v20 = a1 + 56 * v28 + v12;
        uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((v27 - a2) >> 3);
        uint64_t v19 = v20;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v17 = v8;
        }
        else {
          uint64_t v17 = v8 + 1;
        }
        uint64_t v18 = v17 >> 1;
        uint64_t v19 = a2;
        uint64_t v20 = a1 + v12;
        uint64_t v21 = a2 - a1 - v12;
        if (v21)
        {
          unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * (v21 >> 3);
          uint64_t v20 = a1 + v12;
          do
          {
            unint64_t v23 = v22 >> 1;
            unint64_t v24 = v20 + 56 * (v22 >> 1);
            unint64_t v25 = *(void *)(v24 + 24);
            uint64_t v26 = v24 + 56;
            v22 += ~(v22 >> 1);
            if (*(void *)(a2 + 56 * v18 + 24) > v25) {
              unint64_t v22 = v23;
            }
            else {
              uint64_t v20 = v26;
            }
          }
          while (v22);
          uint64_t v19 = v20;
        }
        uint64_t v27 = a2 + 56 * v18;
        uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((v19 - a1 - v12) >> 3);
        uint64_t v29 = v27;
      }
      uint64_t v35 = v27;
      if (v20 != a2)
      {
        uint64_t v35 = v19;
        if (v29 != a2)
        {
          uint64_t v84 = v19;
          uint64_t v85 = v27;
          uint64_t v86 = v18;
          uint64_t v87 = a7;
          uint64_t v88 = a3;
          sub_1CC95BB2C(v20, a2);
          uint64_t v35 = v20 + 56;
          for (uint64_t i = a2 + 56; i != v29; i += 56)
          {
            if (v35 == a2) {
              a2 = i;
            }
            sub_1CC95BB2C(v35, i);
            v35 += 56;
          }
          if (v35 != a2)
          {
            uint64_t v37 = v35;
            uint64_t v38 = a2;
            do
            {
              while (1)
              {
                sub_1CC95BB2C(v37, a2);
                v37 += 56;
                a2 += 56;
                if (a2 == v29) {
                  break;
                }
                if (v37 == v38) {
                  uint64_t v38 = a2;
                }
              }
              a2 = v38;
            }
            while (v37 != v38);
          }
          a7 = v87;
          a3 = v88;
          uint64_t v27 = v85;
          uint64_t v18 = v86;
          uint64_t v19 = v84;
        }
      }
      a4 = -(v28 + v13);
      uint64_t v39 = v8 - v18;
      if (v28 + v18 >= v8 - (v28 + v18) - v13)
      {
        uint64_t v44 = -(v28 + v13);
        uint64_t v45 = v18;
        a4 = v28;
        uint64_t v42 = v90;
        uint64_t v43 = a7;
        a2 = v19;
        sub_1CC95C154(v35, v27, a3, v44, v8 - v18);
        uint64_t v39 = v45;
        a3 = v35;
      }
      else
      {
        a2 = v27;
        uint64_t v40 = a3;
        uint64_t v41 = v28;
        uint64_t v42 = v90;
        uint64_t v43 = a7;
        sub_1CC95C154(v14, v19, v35, v41, v18);
        a3 = v40;
        uint64_t v14 = v35;
      }
      a1 = v14;
      uint64_t v8 = v39;
      a7 = v43;
      a6 = v42;
      if (!v39) {
        return;
      }
    }
    if (a4 <= v8)
    {
      if (a1 == a2) {
        return;
      }
      uint64_t v62 = 0;
      uint64_t v47 = 0;
      do
      {
        uint64_t v63 = (uint64_t *)(a6 + v62);
        *uint64_t v63 = *(void *)(a1 + v62);
        unint64_t v64 = (uint64_t *)(a1 + v62 + 8);
        uint64_t v65 = *v64;
        *(void *)(a6 + v62 + 8) = *v64;
        uint64_t v66 = a6 + v62 + 8;
        uint64_t v67 = *(void *)(a1 + v62 + 16);
        v63[2] = v67;
        if (v67)
        {
          *(void *)(v65 + 16) = v66;
          *(void *)(a1 + v62) = v64;
          uint64_t *v64 = 0;
          *(void *)(a1 + v62 + 16) = 0;
        }
        else
        {
          *uint64_t v63 = v66;
        }
        uint64_t v68 = a6 + v62;
        long long v69 = *(_OWORD *)(a1 + v62 + 24);
        *(_OWORD *)(v68 + 40) = *(_OWORD *)(a1 + v62 + 40);
        *(_OWORD *)(v68 + 24) = v69;
        ++v47;
        v62 += 56;
      }
      while (a1 + v62 != a2);
      if (v62)
      {
        uint64_t v70 = a6 + v62;
        uint64_t v71 = a6 + v62 - 56;
        uint64_t v72 = a6;
        uint64_t v89 = v71;
        while (a2 != a3)
        {
          uint64_t v73 = a3;
          long long v74 = (_OWORD *)(a1 + 24);
          if (*(void *)(a2 + 24) <= *(void *)(v72 + 24))
          {
            sub_1CD673ED8(a1, (void *)v72);
            long long v76 = *(_OWORD *)(v72 + 40);
            _OWORD *v74 = *(_OWORD *)(v72 + 24);
            *(_OWORD *)(a1 + 40) = v76;
            v72 += 56;
          }
          else
          {
            sub_1CD673ED8(a1, (void *)a2);
            long long v75 = *(_OWORD *)(a2 + 40);
            _OWORD *v74 = *(_OWORD *)(a2 + 24);
            *(_OWORD *)(a1 + 40) = v75;
            a2 += 56;
          }
          a1 += 56;
          a3 = v73;
          uint64_t v71 = v89;
          if (v70 == v72) {
            goto LABEL_100;
          }
        }
        if (v70 != v72)
        {
          uint64_t v80 = 0;
          do
          {
            uint64_t v81 = a1 + v80;
            uint64_t v82 = v72 + v80;
            sub_1CD673ED8(a1 + v80, (void *)(v72 + v80));
            long long v83 = *(_OWORD *)(v72 + v80 + 24);
            *(_OWORD *)(v81 + 40) = *(_OWORD *)(v72 + v80 + 40);
            *(_OWORD *)(v81 + 24) = v83;
            v80 += 56;
          }
          while (v71 != v82);
        }
      }
    }
    else
    {
      if (a3 == a2) {
        return;
      }
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      do
      {
        uint64_t v48 = (uint64_t *)(a6 + v46);
        *uint64_t v48 = *(void *)(a2 + v46);
        uint64_t v49 = (uint64_t *)(a2 + v46 + 8);
        uint64_t v50 = *v49;
        *(void *)(a6 + v46 + 8) = *v49;
        uint64_t v51 = a6 + v46 + 8;
        uint64_t v52 = *(void *)(a2 + v46 + 16);
        v48[2] = v52;
        if (v52)
        {
          *(void *)(v50 + 16) = v51;
          *(void *)(a2 + v46) = v49;
          *uint64_t v49 = 0;
          *(void *)(a2 + v46 + 16) = 0;
        }
        else
        {
          *uint64_t v48 = v51;
        }
        uint64_t v53 = a6 + v46;
        long long v54 = *(_OWORD *)(a2 + v46 + 24);
        *(_OWORD *)(v53 + 40) = *(_OWORD *)(a2 + v46 + 40);
        *(_OWORD *)(v53 + 24) = v54;
        ++v47;
        v46 += 56;
      }
      while (a2 + v46 != a3);
      if (v46)
      {
        uint64_t v55 = a6 + v46;
        uint64_t v56 = a3 - 56;
        while (a2 != a1)
        {
          unint64_t v57 = *(void *)(v55 - 32);
          unint64_t v58 = *(void *)(a2 - 32);
          if (v57 > v58) {
            uint64_t v59 = (void *)(a2 - 56);
          }
          else {
            uint64_t v59 = (void *)(v55 - 56);
          }
          if (v57 > v58) {
            uint64_t v60 = (_OWORD *)(a2 - 32);
          }
          else {
            uint64_t v60 = (_OWORD *)(v55 - 32);
          }
          if (v57 <= v58) {
            v55 -= 56;
          }
          else {
            a2 -= 56;
          }
          sub_1CD673ED8(v56, v59);
          long long v61 = v60[1];
          *(_OWORD *)(v56 + 24) = *v60;
          *(_OWORD *)(v56 + 40) = v61;
          v56 -= 56;
          if (v55 == a6) {
            goto LABEL_100;
          }
        }
        if (v55 != a6)
        {
          uint64_t v77 = 0;
          do
          {
            uint64_t v78 = v56 + v77;
            sub_1CD673ED8(v56 + v77, (void *)(v55 + v77 - 56));
            long long v79 = *(_OWORD *)(v55 + v77 - 32);
            *(_OWORD *)(v78 + 40) = *(_OWORD *)(v55 + v77 - 16);
            *(_OWORD *)(v78 + 24) = v79;
            v77 -= 56;
          }
          while (v55 + v77 != a6);
        }
      }
    }
LABEL_100:
    if (a6)
    {
      do
      {
        sub_1CB833A08(a6, *(void **)(a6 + 8));
        a6 += 56;
        --v47;
      }
      while (v47);
    }
  }
}

void sub_1CC95C734(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 40 * v2;
    uint64_t v5 = a2 + 152;
    do
    {
      sub_1CC95C790(v5, *(unsigned __int8 **)v3, *(void *)(v3 + 8), (int *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1CC95C790(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1F2629508;
  char v16 = 1;
  int v15 = v9;
  unint64_t v10 = sub_1CC95C894(a1 + 16, (unint64_t)v14, 1);
  uint64_t v11 = *(void *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 32) = &unk_1F2629528;
  char v13 = *(unsigned char *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(unsigned char *)(v11 + 44) = v13;
  *(void *)(v11 + 32) = &unk_1F2629508;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(void *)(a1 + 8), a2, a3);
}

unint64_t sub_1CC95C894(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 48 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD674470();
    }
    sub_1CD674470();
  }
  return a2;
}

uint64_t sub_1CC95C90C()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v4.n128_u64[0] = (unint64_t)"Try to avoid reuse of byte array addresses using aliases";
  v4.n128_u64[1] = 56;
  int v3 = 1;
  char v2 = 1;
  *(void *)&long long v1 = &v2;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE0ED0, "lowertypetests-avoid-reuse", &v4, &v3, (unsigned char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE0ED0, &dword_1CB82C000);
  *(void *)&long long v1 = "What to do with the summary when running this pass";
  *((void *)&v1 + 1) = 50;
  v4.n128_u64[0] = (unint64_t)v5;
  v5[0] = "none";
  v5[1] = 4;
  int v6 = 0;
  long long v7 = "Do nothing";
  uint64_t v8 = 10;
  int v9 = "import";
  uint64_t v10 = 6;
  int v11 = 1;
  long long v12 = "Import typeid resolutions from summary and globals";
  uint64_t v13 = 50;
  uint64_t v14 = "export";
  uint64_t v15 = 6;
  int v16 = 2;
  uint64_t v17 = "Export typeid resolutions to summary and globals";
  uint64_t v18 = 48;
  v4.n128_u64[1] = 0x400000003;
  int v3 = 1;
  sub_1CD674278(&v1, (uint64_t *)&v4, &v3);
  if ((void *)v4.n128_u64[0] != v5) {
    free((void *)v4.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD66F254, &qword_1EBCE1220, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Read summary from given YAML file before running pass";
  v4.n128_u64[1] = 53;
  LODWORD(v1) = 1;
  sub_1CD674554((long long *)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCE1050, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Write summary to given YAML file after running pass";
  v4.n128_u64[1] = 51;
  LODWORD(v1) = 1;
  sub_1CD67466C((long long *)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCE1138, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Simply drop type test assume sequences";
  v4.n128_u64[1] = 38;
  int v3 = 1;
  char v2 = 0;
  *(void *)&long long v1 = &v2;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE0F90, "lowertypetests-drop-type-tests", &v4, &v3, (unsigned char **)&v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE0F90, &dword_1CB82C000);
}

void llvm::initializeMergeFunctionsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  char v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE1480, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC95CBE8;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCE1480, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC95CBE8()
{
}

uint64_t sub_1CC95CC84(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE1478;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F26296B8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE1480, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC95CBE8;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCE1480, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC95CD34(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 128;
  *(void *)a1 = operator new(0x1800uLL, (std::align_val_t)8uLL);
  sub_1CD6749A0((void *)a1);
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  return a1;
}

uint64_t sub_1CC95CDA0(uint64_t a1, llvm::Function *a2, __n128 a3)
{
  int v3 = (void *)((char *)a2 + 24);
  __n128 v4 = (void *)*((void *)a2 + 4);
  if (v4 != (void *)((char *)a2 + 24))
  {
    long long v12 = 0;
    uint64_t v13 = 0;
    int v151 = 0;
    while (1)
    {
      uint64_t v14 = v4 ? (uint64_t)(v4 - 7) : 0;
      if (v4 && *(unsigned char *)(v14 + 16) == 3) {
        break;
      }
      if (!*(unsigned char *)(v14 + 16) && *(void *)(v14 + 72) == v14 + 72)
      {
        BOOL v15 = (*(unsigned char *)(v14 + 34) & 0x80) == 0;
LABEL_15:
        char v16 = v15;
        if (v16) {
          goto LABEL_25;
        }
      }
      if ((*(_DWORD *)(v14 + 32) & 0xF) != 1)
      {
        unint64_t v17 = llvm::FunctionComparator::functionHash((llvm::FunctionComparator *)v14, a2);
        unint64_t v18 = v17;
        if (v13 >= v12)
        {
          uint64_t v19 = v13 - v151;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60) {
            abort();
          }
          if (((char *)v12 - (char *)v151) >> 3 > v20) {
            unint64_t v20 = ((char *)v12 - (char *)v151) >> 3;
          }
          if ((unint64_t)((char *)v12 - (char *)v151) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21)
          {
            if (v21 >> 60) {
              sub_1CB833614();
            }
            unint64_t v22 = (char *)operator new(16 * v21);
          }
          else
          {
            unint64_t v22 = 0;
          }
          unint64_t v23 = (__n128 *)&v22[16 * v19];
          v23->n128_u64[0] = v18;
          v23->n128_u64[1] = v14;
          if (v13 == v151)
          {
            int v151 = (__n128 *)&v22[16 * v19];
          }
          else
          {
            unint64_t v24 = (__n128 *)&v22[16 * v19];
            do
            {
              a3 = v13[-1];
              v24[-1] = a3;
              --v24;
              --v13;
            }
            while (v13 != v151);
            uint64_t v13 = v151;
            int v151 = v24;
          }
          long long v12 = (__n128 *)&v22[16 * v21];
          unint64_t v5 = v23 + 1;
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          v13->n128_u64[0] = v17;
          v13->n128_u64[1] = v14;
          unint64_t v5 = v13 + 1;
        }
        goto LABEL_43;
      }
LABEL_25:
      unint64_t v5 = v13;
LABEL_43:
      __n128 v4 = (void *)v4[1];
      uint64_t v13 = v5;
      if (v4 == v3) {
        goto LABEL_3;
      }
    }
    BOOL v15 = (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 0;
    goto LABEL_15;
  }
  int v151 = 0;
  unint64_t v5 = 0;
LABEL_3:
  unint64_t v6 = v5 - v151;
  uint64_t v7 = a1;
  if ((char *)v5 - (char *)v151 < 1)
  {
LABEL_7:
    sub_1CD674DB4(v151, v5, v6, 0, 0, a3);
  }
  else
  {
    uint64_t v8 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v9 = v5 - v151;
    while (1)
    {
      uint64_t v10 = (__n128 *)operator new(16 * v9, v8);
      if (v10) {
        break;
      }
      BOOL v90 = v9 > 1;
      v9 >>= 1;
      if (!v90) {
        goto LABEL_7;
      }
    }
    unint64_t v25 = v10;
    sub_1CD674DB4(v151, v5, v6, v10, v9, a3);
    operator delete(v25);
  }
  if (v151 != v5)
  {
    uint64_t v26 = v151;
    do
    {
      if (v26 != v151 && v26[-1].n128_u64[0] == v26->n128_u64[0]
        || &v26[1] != v5 && v26[1].n128_u64[0] == v26->n128_u64[0])
      {
        uint64_t v27 = (int32x2_t ****)v26->n128_u64[1];
        unint64_t v161 = 6;
        uint64_t v162 = 0;
        uint64_t v163 = v27;
        if (v27 != (int32x2_t ****)-8192 && v27 != (int32x2_t ****)-4096 && v27 != 0) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v161);
        }
        uint64_t v29 = *(unint64_t **)(a1 + 80);
        if ((unint64_t)v29 >= *(void *)(a1 + 88))
        {
          uint64_t v33 = sub_1CC95E138((uint64_t *)(a1 + 72), &v161);
        }
        else
        {
          unint64_t *v29 = 6;
          v29[1] = 0;
          unint64_t v30 = v163;
          v29[2] = (unint64_t)v163;
          if (v30 != (int32x2_t ****)-8192 && v30 != (int32x2_t ****)-4096)
          {
            if (v30)
            {
              unint64_t v31 = v161 & 0xFFFFFFFFFFFFFFF8;
              v29[1] = *(void *)(v161 & 0xFFFFFFFFFFFFFFF8);
              *(void *)unint64_t v31 = v29;
              unint64_t *v29 = v31 | 6;
              unint64_t v32 = (unint64_t *)v29[1];
              if (v32) {
                unint64_t *v32 = *v32 & 7 | (unint64_t)(v29 + 1);
              }
            }
          }
          uint64_t v33 = (uint64_t)(v29 + 3);
        }
        *(void *)(a1 + 80) = v33;
        if (v163 != (int32x2_t ****)-8192 && v163 != (int32x2_t ****)-4096 && v163)
        {
          unint64_t v34 = v161 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v161 & 0xFFFFFFFFFFFFFFF8) = v162;
          if (v162)
          {
            *uint64_t v162 = *v162 & 7 | v34;
          }
          else
          {
            uint64_t v35 = v163;
            uint64_t v36 = ***v163;
            unint64_t v37 = (unint64_t)v36[303];
            if (v37 <= v34)
            {
              uint64_t v38 = v36[305].u32[0];
              if (v37 + 16 * v38 > v34)
              {
                unsigned int v39 = v38 - 1;
                LODWORD(v40) = v39 & ((v163 >> 4) ^ (v163 >> 9));
                uint64_t v41 = (int32x2_t *****)(v37 + 16 * v40);
                uint64_t v42 = *v41;
                if (v163 == *v41)
                {
LABEL_78:
                  *uint64_t v41 = (int32x2_t ****)-8192;
                  v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v35 = v163;
                }
                else
                {
                  int v43 = 1;
                  while (v42 != (int32x2_t ****)-4096)
                  {
                    int v44 = v40 + v43++;
                    uint64_t v40 = v44 & v39;
                    uint64_t v42 = *(int32x2_t *****)(v37 + 16 * v40);
                    if (v163 == v42)
                    {
                      uint64_t v41 = (int32x2_t *****)(v37 + 16 * v40);
                      goto LABEL_78;
                    }
                  }
                }
                *((unsigned char *)v35 + 17) &= ~1u;
              }
            }
          }
        }
      }
      ++v26;
    }
    while (v26 != v5);
  }
  int v45 = 0;
  uint64_t v46 = (uint64_t **)(a1 + 104);
  uint64_t v47 = (uint64_t *)(a1 + 120);
  size_t v155 = (void *)(a1 + 128);
  uint64_t v48 = *(void *)(a1 + 72);
  uint64_t v49 = *(void *)(a1 + 80);
  do
  {
    *(void *)(v7 + 72) = 0;
    *(void *)(v7 + 80) = 0;
    v158[0] = v48;
    v158[1] = v49;
    uint64_t v50 = *(void *)(v7 + 88);
    *(void *)(v7 + 88) = 0;
    v158[2] = v50;
    while (v48 != v49)
    {
      uint64_t v51 = *(uint64_t ****)(v48 + 16);
      if (!v51) {
        goto LABEL_109;
      }
      if (*((unsigned char *)v51 + 16))
      {
        if (*((unsigned char *)v51 + 16) != 3 || (*((_DWORD *)v51 + 5) & 0x7FFFFFF) != 0) {
          goto LABEL_92;
        }
      }
      else if (v51[9] != (uint64_t **)(v51 + 9) || (*((unsigned char *)v51 + 34) & 0x80) != 0)
      {
LABEL_92:
        if ((v51[4] & 0xF) == 1) {
          goto LABEL_109;
        }
        int v157 = v45;
        unint64_t v52 = llvm::FunctionComparator::functionHash((llvm::FunctionComparator *)v51, v11);
        uint64_t v53 = *v46;
        long long v54 = (uint64_t **)(a1 + 104);
        uint64_t v55 = (uint64_t **)(a1 + 104);
        if (!*v46) {
          goto LABEL_105;
        }
        long long v54 = (uint64_t **)(a1 + 104);
        while (1)
        {
          while (1)
          {
            uint64_t v55 = (uint64_t **)v53;
            if (!sub_1CC95E6A8(v47, (uint64_t)v51, v52, v53[4], v53[5])) {
              break;
            }
            uint64_t v53 = *v55;
            long long v54 = v55;
            if (!*v55) {
              goto LABEL_105;
            }
          }
          if (!sub_1CC95E6A8(v47, (uint64_t)v55[4], (unint64_t)v55[5], (uint64_t)v51, v52)) {
            break;
          }
          long long v54 = v55 + 1;
          uint64_t v53 = v55[1];
          if (!v53) {
            goto LABEL_105;
          }
        }
        uint64_t v56 = *v54;
        if (*v54)
        {
          unint64_t v57 = (llvm::GlobalValue *)v56[4];
          int isInterposable = llvm::GlobalValue::isInterposable(v57);
          if (isInterposable != llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v51))
          {
            uint64_t v7 = a1;
            if ((llvm::GlobalValue::isInterposable(v57) & 1) == 0) {
              goto LABEL_146;
            }
LABEL_142:
            uint64_t v91 = v56[4];
            unint64_t v161 = 0;
            if (sub_1CBB0BF40(*(void *)(v7 + 128), *(_DWORD *)(v7 + 144), v91, &v161)) {
              unsigned int v92 = (void *)v161;
            }
            else {
              unsigned int v92 = (void *)(*(void *)(v7 + 128) + 16 * *(unsigned int *)(v7 + 144));
            }
            size_t v93 = (uint64_t *)v92[1];
            *unsigned int v92 = -8192;
            *(int32x2_t *)(v7 + 136) = vadd_s32(*(int32x2_t *)(v7 + 136), (int32x2_t)0x1FFFFFFFFLL);
            __int16 v159 = v51;
            unint64_t v160 = v93;
            sub_1CC95E494((uint64_t)&v161, (uint64_t)v155, (uint64_t *)&v159);
            v56[4] = (uint64_t)v51;
            uint64_t v51 = (uint64_t ***)v91;
            goto LABEL_146;
          }
          unsigned int v63 = (*((_DWORD *)v57 + 8) & 0xF) - 7;
          uint64_t v7 = a1;
          if (v63 < 2 != (v51[4] & 0xFu) - 7 < 2)
          {
            if (v63 < 2) {
              goto LABEL_142;
            }
            goto LABEL_146;
          }
          if ((*((unsigned char *)v57 + 23) & 0x10) != 0)
          {
            uint64_t v64 = ***(void ***)v57;
            uint64_t v65 = *(void *)(v64 + 152);
            uint64_t v66 = *(unsigned int *)(v64 + 168);
            if (!v66) {
              goto LABEL_120;
            }
            LODWORD(v67) = (v66 - 1) & ((v57 >> 4) ^ (v57 >> 9));
            uint64_t v68 = (llvm::GlobalValue **)(v65 + 16 * v67);
            long long v69 = *v68;
            if (*v68 != v57)
            {
              int v70 = 1;
              while (v69 != (llvm::GlobalValue *)-4096)
              {
                int v71 = v67 + v70++;
                uint64_t v67 = v71 & (v66 - 1);
                long long v69 = *(llvm::GlobalValue **)(v65 + 16 * v67);
                if (v69 == v57)
                {
                  uint64_t v68 = (llvm::GlobalValue **)(v65 + 16 * v67);
                  goto LABEL_121;
                }
              }
LABEL_120:
              uint64_t v68 = (llvm::GlobalValue **)(v65 + 16 * v66);
            }
LABEL_121:
            uint64_t v72 = v68[1];
            size_t v75 = *(void *)v72;
            uint64_t v73 = (char *)v72 + 16;
            size_t v74 = v75;
          }
          else
          {
            size_t v74 = 0;
            uint64_t v73 = &byte_1CFBCE98E;
          }
          if ((*((unsigned char *)v51 + 23) & 0x10) != 0)
          {
            uint64_t v76 = ***v51;
            uint64_t v77 = *(void *)(v76 + 152);
            uint64_t v78 = *(unsigned int *)(v76 + 168);
            if (!v78) {
              goto LABEL_129;
            }
            LODWORD(v79) = (v78 - 1) & ((v51 >> 4) ^ (v51 >> 9));
            uint64_t v80 = (uint64_t ****)(v77 + 16 * v79);
            uint64_t v81 = *v80;
            if (*v80 != v51)
            {
              int v82 = 1;
              while (v81 != (uint64_t ***)-4096)
              {
                int v83 = v79 + v82++;
                uint64_t v79 = v83 & (v78 - 1);
                uint64_t v81 = *(uint64_t ****)(v77 + 16 * v79);
                if (v81 == v51)
                {
                  uint64_t v80 = (uint64_t ****)(v77 + 16 * v79);
                  goto LABEL_130;
                }
              }
LABEL_129:
              uint64_t v80 = (uint64_t ****)(v77 + 16 * v78);
            }
LABEL_130:
            uint64_t v84 = v80[1];
            size_t v87 = (size_t)*v84;
            uint64_t v85 = (char *)(v84 + 2);
            size_t v86 = v87;
          }
          else
          {
            size_t v86 = 0;
            uint64_t v85 = &byte_1CFBCE98E;
          }
          if (v86 >= v74) {
            size_t v88 = v74;
          }
          else {
            size_t v88 = v86;
          }
          if (!v88)
          {
            if (v74 <= v86) {
              goto LABEL_146;
            }
            goto LABEL_142;
          }
          int v89 = memcmp(v73, v85, v88);
          if ((v89 & 0x80000000) == 0)
          {
            BOOL v90 = v89 || v74 > v86;
            if (v90) {
              goto LABEL_142;
            }
          }
LABEL_146:
          uint64_t v94 = v56[4];
          if (llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v94))
          {
            unsigned int v95 = *(llvm::PointerType **)(v94 + 24);
            if (*((_DWORD *)v95 + 2) <= 0xFFu)
            {
              uint64_t v110 = 2;
              uint64_t v111 = v94 + 72;
              do
              {
                uint64_t v111 = *(void *)(v111 + 8);
                --v110;
              }
              while (v111 != v94 + 72);
              if (v110) {
                goto LABEL_191;
              }
              uint64_t v112 = *(void *)(v94 + 80);
              uint64_t v113 = v112 ? v112 - 24 : 0;
              uint64_t v114 = v113 + 40;
              unint64_t v115 = -1;
              uint64_t v116 = v114;
              do
              {
                uint64_t v116 = *(void *)(v116 + 8);
                ++v115;
              }
              while (v116 != v114);
              if (v115 > 2) {
                goto LABEL_191;
              }
            }
            if (byte_1EBCE1688 && (*(_DWORD *)(v94 + 32) & 0xC0) == 0x80 && (v51[4] & 0xC0) == 0x80)
            {
LABEL_191:
              unsigned int v152 = *(_DWORD *)(*(void *)v94 + 8) >> 8;
              int v154 = *(_DWORD *)(v94 + 32) & 0xF;
              __int16 v164 = 257;
              unint64_t v117 = *(void *)(v94 + 40);
              uint64_t v118 = (char *)operator new(0x80uLL);
              int v119 = v118 + 8;
              *((_DWORD *)v118 + 7) = *((_DWORD *)v118 + 7) & 0x38000000 | 0x40000000;
              *(void *)uint64_t v118 = 0;
              unsigned int v120 = llvm::Function::Function((unint64_t *)v118 + 1, v95, v154, (llvm::Type *)v152, (const char **)&v161, v117);
              llvm::Function::copyAttributesFrom((llvm::Function *)v120, (const llvm::Function *)v94);
              llvm::Value::takeName((int32x2_t ****)v118 + 1, (llvm::Value *)v94);
              sub_1CC95E714(a1, *(void *)(v94 + 8));
              int v62 = 1;
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v94, (llvm::Value *)(v118 + 8), (llvm::Value *)1);
              char v121 = *((_WORD *)v118 + 21);
              char v122 = (v121 & 0x3F) - 1;
              BOOL v123 = (v121 & 0x3F) == 0;
              __int16 v124 = *((_WORD *)v51 + 17);
              if (v123) {
                char v122 = 0;
              }
              unint64_t v125 = 1 << v122;
              if (v123) {
                unint64_t v125 = 0;
              }
              BOOL v126 = (v124 & 0x3F) == 0;
              char v127 = (v124 & 0x3F) - 1;
              if (v126) {
                char v127 = 0;
              }
              unint64_t v128 = 1 << v127;
              if (v126) {
                unint64_t v128 = 0;
              }
              if (v128 <= v125) {
                unint64_t v129 = v125;
              }
              else {
                unint64_t v129 = v128;
              }
              sub_1CC95E76C(a1, v94, (uint64_t)v51);
              uint64_t v130 = (uint64_t)v119;
              uint64_t v7 = a1;
              sub_1CC95E76C(a1, v94, v130);
              unsigned int v131 = (__clz(__rbit64(v129)) << 16) + 0x10000;
              if (!v129) {
                unsigned int v131 = 0;
              }
              *(_DWORD *)(v94 + 32) = *(_DWORD *)(v94 + 32) & 0xFFC0BFC0 | 0x4008 | v131;
              goto LABEL_108;
            }
LABEL_181:
            int v62 = 1;
          }
          else
          {
            if ((llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v51) & 1) == 0 && !byte_1EBCE15C8)
            {
              if ((v51[4] & 0xC0) == 0x80)
              {
                unint64_t v161 = 0;
                int v132 = sub_1CD45AE60(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v51, &v161);
                unsigned int v133 = *(_DWORD *)(a1 + 16);
                if (v132) {
                  unsigned int v134 = (void **)v161;
                }
                else {
                  unsigned int v134 = (void **)(*(void *)a1 + 48 * v133);
                }
                if ((void **)(*(void *)a1 + 48 * v133) != v134) {
                  sub_1CD67529C((int32x2_t *)a1, (uint64_t)v134);
                }
                BOOL v135 = (llvm::Value *)v94;
                if (*(uint64_t ***)v94 != *v51) {
                  BOOL v135 = sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v94, (llvm::Constant *)*v51, 0);
                }
                sub_1CC95E714(a1, (uint64_t)v51[1]);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v51, v135, (llvm::Value *)1);
              }
              else
              {
                size_t v96 = (llvm::detail::IEEEFloat *)v94;
                if (*(uint64_t ***)v94 != *v51) {
                  size_t v96 = sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v94, (llvm::Constant *)*v51, 0);
                }
                unsigned int v97 = v51[1];
                if (v97)
                {
                  unsigned int v153 = (llvm::detail::IEEEFloat *)((char *)v96 + 8);
                  do
                  {
                    uint64_t v98 = (llvm::detail::IEEEFloat **)v97;
                    unsigned int v99 = v97 + 1;
                    unsigned int v97 = (uint64_t **)v97[1];
                    uint64_t v100 = v99[2];
                    unsigned int v101 = *(unsigned __int8 *)(v100 + 16);
                    if (v101 >= 0x1C)
                    {
                      unsigned int v102 = v101 - 33;
                      BOOL v90 = v102 > 0x33;
                      uint64_t v103 = (1 << v102) & 0x8000000000041;
                      BOOL v104 = v90 || v103 == 0;
                      if (!v104 && (llvm::detail::IEEEFloat **)(v100 - 32) == v98)
                      {
                        sub_1CC95F7BC(a1, *(void *)(*(void *)(v100 + 40) + 56));
                        if (*v98)
                        {
                          *(void *)v98[2] = v98[1];
                          unsigned int v105 = v98[1];
                          if (v105) {
                            *((void *)v105 + 2) = v98[2];
                          }
                        }
                        *uint64_t v98 = v96;
                        if (v96)
                        {
                          uint64_t v106 = *(void *)v153;
                          *unsigned int v99 = *(void *)v153;
                          if (v106) {
                            *(void *)(v106 + 16) = v99;
                          }
                          v98[2] = v153;
                          *(void *)unsigned int v153 = v98;
                        }
                      }
                    }
                  }
                  while (v97);
                }
              }
            }
            unsigned int v107 = v51[4] & 0xF;
            BOOL v90 = v107 > 8;
            int v108 = (1 << v107) & 0x18E;
            BOOL v109 = v90 || v108 == 0;
            if (v109 || v51[1] || byte_1EBCE15C8)
            {
              uint64_t v7 = a1;
              sub_1CC95E76C(a1, v94, (uint64_t)v51);
              goto LABEL_181;
            }
            llvm::Function::eraseFromParent((llvm::Function *)v51);
            int v62 = 1;
            uint64_t v7 = a1;
          }
        }
        else
        {
LABEL_105:
          uint64_t v59 = (uint64_t *)operator new(0x30uLL);
          void v59[4] = (uint64_t)v51;
          v59[5] = v52;
          uint64_t *v59 = 0;
          v59[1] = 0;
          v59[2] = (uint64_t)v55;
          *long long v54 = v59;
          uint64_t v7 = a1;
          uint64_t v60 = **(void **)(a1 + 96);
          long long v61 = v59;
          if (v60)
          {
            *(void *)(a1 + 96) = v60;
            long long v61 = *v54;
          }
          sub_1CB8358B8(*(uint64_t **)(a1 + 104), v61);
          ++*(void *)(a1 + 112);
          __int16 v159 = v51;
          unint64_t v160 = v59;
          sub_1CC95E494((uint64_t)&v161, (uint64_t)v155, (uint64_t *)&v159);
          int v62 = 0;
        }
LABEL_108:
        int v45 = v157 | v62;
      }
LABEL_109:
      v48 += 24;
    }
    unint64_t v161 = (unint64_t)v158;
    sub_1CBF6385C((void ***)&v161);
    uint64_t v48 = *(void *)(v7 + 72);
    uint64_t v49 = *(void *)(v7 + 80);
  }
  while (v48 != v49);
  sub_1CBB0D544(*(void **)(v7 + 104));
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 112) = 0;
  *(void *)(v7 + 96) = v46;
  int v136 = *(_DWORD *)(v7 + 136);
  if (v136)
  {
    uint64_t v138 = *(unsigned int *)(v7 + 144);
    if (v138 <= 4 * v136)
    {
      int v137 = v151;
      goto LABEL_230;
    }
    int v137 = v151;
    if (v138 < 0x41) {
      goto LABEL_230;
    }
    int v139 = (void *)*v155;
    int v140 = 1 << (33 - __clz(v136 - 1));
    if (v140 <= 64) {
      int v141 = 64;
    }
    else {
      int v141 = v140;
    }
    if (v141 == v138)
    {
      *(void *)(v7 + 136) = 0;
      uint64_t v142 = 16 * v138;
      do
      {
        *int v139 = -4096;
        v139 += 2;
        v142 -= 16;
      }
      while (v142);
    }
    else
    {
      MEMORY[0x1D25D9CD0](v139, 8);
      unint64_t v146 = (4 * v141 / 3u + 1) | ((unint64_t)(4 * v141 / 3u + 1) >> 1);
      unint64_t v147 = v146 | (v146 >> 2) | ((v146 | (v146 >> 2)) >> 4);
      LODWORD(v147) = (((v147 | (v147 >> 8)) >> 16) | v147 | (v147 >> 8)) + 1;
      *(_DWORD *)(v7 + 144) = v147;
      uint64_t v148 = operator new(16 * v147, (std::align_val_t)8uLL);
      *(void *)(v7 + 128) = v148;
      *(void *)(v7 + 136) = 0;
      uint64_t v149 = *(unsigned int *)(v7 + 144);
      if (v149)
      {
        uint64_t v150 = 16 * v149;
        do
        {
          *uint64_t v148 = -4096;
          v148 += 2;
          v150 -= 16;
        }
        while (v150);
      }
    }
  }
  else
  {
    int v137 = v151;
    if (!*(_DWORD *)(v7 + 140)) {
      goto LABEL_234;
    }
    LODWORD(v138) = *(_DWORD *)(v7 + 144);
    if (v138 > 0x40)
    {
      MEMORY[0x1D25D9CD0](*v155, 8);
      *size_t v155 = 0;
      *(void *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 144) = 0;
      goto LABEL_234;
    }
LABEL_230:
    if (v138)
    {
      BOOL v143 = (void *)*v155;
      uint64_t v144 = 16 * v138;
      do
      {
        *BOOL v143 = -4096;
        v143 += 2;
        v144 -= 16;
      }
      while (v144);
    }
    *(void *)(v7 + 136) = 0;
  }
LABEL_234:
  sub_1CD675348((void **)v7);
  if (*(unsigned char *)(v7 + 48))
  {
    sub_1CC009394(v7 + 24);
    MEMORY[0x1D25D9CD0](*(void *)(v7 + 24), 8);
    *(unsigned char *)(v7 + 48) = 0;
    if (v137) {
LABEL_236:
    }
      operator delete(v137);
  }
  else if (v137)
  {
    goto LABEL_236;
  }
  return v45 & 1;
}

void *sub_1CC95DAFC(void *a1)
{
  MEMORY[0x1D25D9CD0](a1[16], 8);
  sub_1CBB0D544((void *)a1[13]);
  int v3 = (void **)(a1 + 9);
  sub_1CBF6385C(&v3);
  if (*((unsigned char *)a1 + 48))
  {
    sub_1CC009394((uint64_t)(a1 + 3));
    MEMORY[0x1D25D9CD0](a1[3], 8);
    *((unsigned char *)a1 + 48) = 0;
  }
  sub_1CD674CA0(a1);
  MEMORY[0x1D25D9CD0](*a1, 8);
  return a1;
}

void sub_1CC95DB84()
{
}

void sub_1CC95DBC4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC95DBFC(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }
  sub_1CC95CD34((uint64_t)v6);
  uint64_t v3 = sub_1CC95CDA0((uint64_t)v6, (llvm::Function *)a2, v5);
  MEMORY[0x1D25D9CD0](v9[7], 8);
  sub_1CBB0D544(v9[4]);
  uint64_t v10 = (void **)v9;
  sub_1CBF6385C(&v10);
  if (v8)
  {
    sub_1CC009394((uint64_t)v7);
    MEMORY[0x1D25D9CD0](v7[0], 8);
    char v8 = 0;
  }
  sub_1CD674CA0(v6);
  MEMORY[0x1D25D9CD0](v6[0], 8);
  return v3;
}

void **sub_1CC95DCB0(void **result, int a2)
{
  char v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    *BOOL result = operator new(48 * v4, (std::align_val_t)8uLL);
    return (void **)sub_1CD6749A0(v2);
  }
  else
  {
    *BOOL result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

char *sub_1CC95DD48(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v10 = 0;
      unint64_t v11 = *(void *)a2;
      uint64_t v12 = -a4;
      while (1)
      {
        unint64_t v13 = *(void *)&result[v10];
        if (v11 < v13) {
          break;
        }
        v10 += 16;
        BOOL v53 = __CFADD__(v12++, 1);
        if (v53) {
          return result;
        }
      }
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          unsigned int v63 = &result[v10];
          uint64_t v64 = *((void *)v63 + 1);
          uint64_t v65 = *((void *)a2 + 1);
          *(void *)unsigned int v63 = v11;
          *((void *)v63 + 1) = v65;
          *(void *)a2 = v13;
          *((void *)a2 + 1) = v64;
          return result;
        }
        if (v12 <= 0) {
          uint64_t v23 = -v12;
        }
        else {
          uint64_t v23 = 1 - v12;
        }
        uint64_t v24 = v23 >> 1;
        unint64_t v18 = &result[16 * (v23 >> 1) + v10];
        char v16 = a3;
        if (a3 != a2)
        {
          unint64_t v25 = (a3 - a2) >> 4;
          char v16 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            uint64_t v27 = &v16[16 * (v25 >> 1)];
            unint64_t v29 = *(void *)v27;
            uint64_t v28 = v27 + 16;
            v25 += ~(v25 >> 1);
            if (v29 < *(void *)v18) {
              char v16 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v15 = (v16 - a2) >> 4;
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v14 = a5;
        }
        else {
          uint64_t v14 = a5 + 1;
        }
        uint64_t v15 = v14 >> 1;
        char v16 = &a2[16 * (v14 >> 1)];
        if (&result[v10] == a2)
        {
          unint64_t v18 = a2;
        }
        else
        {
          unint64_t v17 = (a2 - result - v10) >> 4;
          unint64_t v18 = &result[v10];
          do
          {
            unint64_t v19 = v17 >> 1;
            unint64_t v20 = &v18[16 * (v17 >> 1)];
            unint64_t v22 = *(void *)v20;
            unint64_t v21 = v20 + 16;
            v17 += ~(v17 >> 1);
            if (*(void *)v16 < v22) {
              unint64_t v17 = v19;
            }
            else {
              unint64_t v18 = v21;
            }
          }
          while (v17);
        }
        uint64_t v24 = (v18 - result - v10) >> 4;
      }
      unint64_t v30 = v16;
      if (v18 != a2)
      {
        unint64_t v30 = v18;
        if (a2 != v16)
        {
          uint64_t v31 = *(void *)v18;
          uint64_t v32 = *((void *)v18 + 1);
          uint64_t v33 = *((void *)a2 + 1);
          *(void *)unint64_t v18 = v11;
          *((void *)v18 + 1) = v33;
          *(void *)a2 = v31;
          *((void *)a2 + 1) = v32;
          unint64_t v30 = v18 + 16;
          for (uint64_t i = a2 + 16; i != v16; i += 16)
          {
            if (v30 == a2) {
              a2 = i;
            }
            uint64_t v35 = *(void *)v30;
            uint64_t v36 = *((void *)v30 + 1);
            uint64_t v37 = *((void *)i + 1);
            *(void *)unint64_t v30 = *(void *)i;
            *((void *)v30 + 1) = v37;
            v30 += 16;
            *(void *)uint64_t i = v35;
            *((void *)i + 1) = v36;
          }
          if (v30 != a2)
          {
            uint64_t v38 = v30;
            unsigned int v39 = a2;
            do
            {
              while (1)
              {
                uint64_t v40 = *(void *)v38;
                uint64_t v41 = *((void *)v38 + 1);
                uint64_t v42 = *((void *)v39 + 1);
                *(void *)uint64_t v38 = *(void *)v39;
                *((void *)v38 + 1) = v42;
                v38 += 16;
                *(void *)unsigned int v39 = v40;
                *((void *)v39 + 1) = v41;
                v39 += 16;
                if (v39 == v16) {
                  break;
                }
                if (v38 == a2) {
                  a2 = v39;
                }
              }
              unsigned int v39 = a2;
            }
            while (v38 != a2);
          }
        }
      }
      a4 = -(v24 + v12);
      uint64_t v43 = a5 - v15;
      if (v24 + v15 >= a5 - (v24 + v15) - v12)
      {
        uint64_t v46 = v16;
        uint64_t v47 = &result[v10];
        sub_1CC95DD48(v30, v46);
        BOOL result = v47;
        char v16 = v18;
        uint64_t v43 = v15;
        a4 = v24;
        a3 = v30;
      }
      else
      {
        int v44 = v18;
        int v45 = a3;
        sub_1CC95DD48(&result[v10], v44);
        a3 = v45;
        BOOL result = v30;
      }
      a5 = v43;
      a2 = v16;
      if (!v43) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        uint64_t v56 = 0;
        do
        {
          *(_OWORD *)&a6[v56] = *(_OWORD *)&result[v56];
          v56 += 16;
        }
        while (&result[v56] != a2);
        if (v56)
        {
          unint64_t v57 = &a6[v56];
          uint64_t v58 = (uint64_t)&a6[v56 - 16];
          while (a2 != a3)
          {
            unint64_t v59 = *(void *)a2;
            BOOL v60 = *(void *)a2 >= *(void *)a6;
            if (*(void *)a2 < *(void *)a6)
            {
              long long v61 = a2;
            }
            else
            {
              unint64_t v59 = *(void *)a6;
              long long v61 = a6;
            }
            if (*(void *)a2 < *(void *)a6) {
              a2 += 16;
            }
            uint64_t v62 = *((void *)v61 + 1);
            if (v60) {
              a6 += 16;
            }
            *(void *)BOOL result = v59;
            *((void *)result + 1) = v62;
            result += 16;
            if (v57 == a6) {
              return result;
            }
          }
          if (v57 != a6)
          {
            uint64_t v69 = 0;
            do
            {
              int v70 = &result[v69];
              int v71 = &a6[v69];
              uint64_t v72 = *(void *)&a6[v69 + 8];
              *(void *)int v70 = *(void *)&a6[v69];
              *((void *)v70 + 1) = v72;
              v69 += 16;
            }
            while ((char *)v58 != v71);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v48 = 0;
      do
      {
        *(_OWORD *)&a6[v48] = *(_OWORD *)&a2[v48];
        v48 += 16;
      }
      while (&a2[v48] != a3);
      if (v48)
      {
        uint64_t v49 = &a6[v48];
        uint64_t v50 = a3 - 8;
        while (a2 != result)
        {
          unint64_t v51 = *((void *)a2 - 2);
          unint64_t v52 = *((void *)v49 - 2);
          BOOL v53 = v52 >= v51;
          if (v52 < v51)
          {
            long long v54 = a2;
          }
          else
          {
            unint64_t v51 = *((void *)v49 - 2);
            long long v54 = v49;
          }
          if (!v53) {
            a2 -= 16;
          }
          uint64_t v55 = *((void *)v54 - 1);
          if (v53) {
            v49 -= 16;
          }
          *((void *)v50 - 1) = v51;
          *(void *)uint64_t v50 = v55;
          v50 -= 16;
          if (v49 == a6) {
            return result;
          }
        }
        if (v49 != a6)
        {
          unint64_t v66 = 0;
          do
          {
            uint64_t v67 = &v50[v66];
            uint64_t v68 = *(void *)&v49[v66 - 8];
            *((void *)v67 - 1) = *(void *)&v49[v66 - 16];
            *(void *)uint64_t v67 = v68;
            v66 -= 16;
          }
          while (&v49[v66] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC95E138(uint64_t *a1, void *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  v14[4] = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  char v8 = (unint64_t *)&v7[24 * v2];
  v14[0] = v7;
  v14[1] = v8;
  v14[3] = &v7[24 * v6];
  *char v8 = 6;
  v8[1] = 0;
  unint64_t v9 = a2[2];
  v8[2] = v9;
  if (v9 != -8192 && v9 != -4096)
  {
    if (v9)
    {
      unint64_t v10 = *a2 & 0xFFFFFFFFFFFFFFF8;
      v8[1] = *(void *)v10;
      *(void *)unint64_t v10 = v8;
      *char v8 = v10 | 6;
      unint64_t v11 = (unint64_t *)v8[1];
      if (v11) {
        *unint64_t v11 = *v11 & 7 | (unint64_t)(v8 + 1);
      }
    }
  }
  v14[2] = v8 + 3;
  sub_1CC95E28C(a1, v14);
  uint64_t v12 = a1[1];
  sub_1CC95E35C((uint64_t)v14);
  return v12;
}

uint64_t *sub_1CC95E28C(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v4 + v5 - 24) = 6;
      uint64_t v7 = (unint64_t *)(v4 + v5 - 24);
      uint64_t v8 = *(void *)(v2 + v5 - 8);
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = v8;
      if (v8 != -8192 && v8 != -4096 && v8 != 0)
      {
        unint64_t v10 = *(void *)(v2 + v5 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v6 - 16) = *(void *)v10;
        *(void *)unint64_t v10 = v7;
        *uint64_t v7 = v10 | 6;
        unint64_t v11 = *(uint64_t **)(v6 - 16);
        if (v11) {
          *unint64_t v11 = *v11 & 7 | (v4 - 16 + v5);
        }
      }
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v12 = *result;
  *BOOL result = v4;
  a2[1] = v12;
  uint64_t v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CC95E35C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = v3 - 24;
      *(void *)(a1 + 16) = v3 - 24;
      uint64_t v5 = *(void *)(v3 - 8);
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
      {
        unint64_t v7 = *(void *)(v3 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v7 = *(void *)(v3 - 16);
        uint64_t v8 = *(unint64_t **)(v3 - 16);
        if (v8)
        {
          *uint64_t v8 = *v8 & 7 | v7;
        }
        else
        {
          uint64_t v9 = *(void *)(v3 - 8);
          unint64_t v10 = ***(int32x2_t ****)v9;
          unint64_t v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            uint64_t v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              unsigned int v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              uint64_t v15 = (uint64_t *)(v11 + 16 * v14);
              uint64_t v16 = *v15;
              if (v9 == *v15)
              {
LABEL_15:
                *uint64_t v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v9 = *(void *)(v3 - 8);
              }
              else
              {
                int v17 = 1;
                while (v16 != -4096)
                {
                  int v18 = v14 + v17++;
                  uint64_t v14 = v18 & v13;
                  uint64_t v16 = *(void *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    uint64_t v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_15;
                  }
                }
              }
              *(unsigned char *)(v9 + 17) &= ~1u;
            }
          }
        }
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  unint64_t v19 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v19);
  }
  return a1;
}

uint64_t sub_1CC95E494(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v28 = 0;
  uint64_t result = sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v28);
  unint64_t v7 = v28;
  if (result)
  {
    char v8 = 0;
    goto LABEL_8;
  }
  unint64_t v29 = v28;
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(unsigned int *)(a2 + 16);
  if (4 * v9 + 4 >= (3 * v10))
  {
    int v11 = 2 * v10;
    goto LABEL_10;
  }
  int v11 = *(_DWORD *)(a2 + 16);
  if ((int)v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    uint64_t v13 = *(void *)a2;
    unint64_t v14 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    int v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    if ((v16 + 1) > 0x40) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 64;
    }
    *(_DWORD *)(a2 + 16) = v17;
    int v18 = operator new(16 * v17, (std::align_val_t)8uLL);
    *(void *)a2 = v18;
    if (v13)
    {
      *(void *)(a2 + 8) = 0;
      uint64_t v19 = *(unsigned int *)(a2 + 16);
      if (v19)
      {
        uint64_t v20 = 16 * v19;
        do
        {
          void *v18 = -4096;
          v18 += 2;
          v20 -= 16;
        }
        while (v20);
      }
      if (v10)
      {
        int v21 = 0;
        unint64_t v22 = (uint64_t *)(v13 + 8);
        uint64_t v23 = 16 * v10;
        do
        {
          uint64_t v24 = *(v22 - 1);
          if ((v24 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            unint64_t v30 = 0;
            sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), v24, &v30);
            unint64_t v25 = v30;
            uint64_t *v30 = v24;
            v25[1] = *v22;
            *(_DWORD *)(a2 + 8) = ++v21;
          }
          v22 += 2;
          v23 -= 16;
        }
        while (v23);
      }
      MEMORY[0x1D25D9CD0](v13, 8);
      int v18 = *(void **)a2;
      LODWORD(v26) = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(void *)(a2 + 8) = 0;
      uint64_t v26 = *(unsigned int *)(a2 + 16);
      if (v26)
      {
        uint64_t v27 = 0;
        do
        {
          v18[v27] = -4096;
          v27 += 2;
        }
        while (2 * v26 != v27);
      }
    }
    uint64_t result = sub_1CBB0BF40((uint64_t)v18, v26, *a3, &v29);
    int v9 = *(_DWORD *)(a2 + 8);
    unint64_t v7 = v29;
  }
  *(_DWORD *)(a2 + 8) = v9 + 1;
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *unint64_t v7 = *a3;
  v7[1] = a3[1];
  char v8 = 1;
LABEL_8:
  uint64_t v12 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

BOOL sub_1CC95E6A8(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a3 != a5) {
    return a3 < a5;
  }
  uint64_t v7 = *a1;
  v8[0] = a2;
  v8[1] = a4;
  v8[2] = 0;
  void v8[3] = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = v7;
  BOOL v5 = llvm::FunctionComparator::compare((llvm::FunctionComparator *)v8) == -1;
  sub_1CD6751F8((uint64_t)v8);
  return v5;
}

uint64_t sub_1CC95E714(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v2 + 24);
      if (v4) {
        BOOL v5 = *(unsigned __int8 *)(v4 + 16) >= 0x1Cu;
      }
      else {
        BOOL v5 = 0;
      }
      if (v5) {
        uint64_t result = sub_1CC95F7BC(v3, *(void *)(*(void *)(v4 + 40) + 56));
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  return result;
}

void sub_1CC95E76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v76[17] = *(uint64_t **)MEMORY[0x1E4F143B8];
  if (byte_1EBCE1688 && (int v6 = *(_DWORD *)(a3 + 32), (v6 & 0xC0) == 0x80))
  {
    uint64_t v20 = *(llvm::Constant **)a3;
    if (*(void *)a2 == *(void *)a3)
    {
      int v21 = (llvm::detail::IEEEFloat *)a2;
    }
    else
    {
      int v21 = sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)a2, v20, 0);
      uint64_t v20 = *(llvm::Constant **)a3;
      int v6 = *(_DWORD *)(a3 + 32);
    }
    unint64_t v22 = *(llvm::PointerType **)(a3 + 24);
    uint64_t v23 = (llvm::Type *)(*((_DWORD *)v20 + 2) >> 8);
    __int16 v75 = 257;
    uint64_t v24 = llvm::GlobalAlias::create(v22, v23, v6 & 0xF, (const char **)&v73, (unint64_t)v21, *(void *)(a3 + 40));
    unint64_t v25 = v24;
    char v26 = *(_WORD *)(a3 + 34);
    char v27 = (v26 & 0x3F) - 1;
    BOOL v28 = (v26 & 0x3F) == 0;
    int v29 = *(_DWORD *)(a2 + 32);
    if (v28) {
      char v27 = 0;
    }
    unint64_t v30 = 1 << v27;
    if (v28) {
      unint64_t v30 = 0;
    }
    char v31 = (BYTE2(v29) & 0x3F) - 1;
    if ((v29 & 0x3F0000) == 0) {
      char v31 = 0;
    }
    unint64_t v32 = 1 << v31;
    if ((v29 & 0x3F0000) == 0) {
      unint64_t v32 = 0;
    }
    if (v32 > v30) {
      unint64_t v30 = v32;
    }
    unsigned int v33 = (__clz(__rbit64(v30)) << 16) + 0x10000;
    if (v30) {
      unsigned int v34 = v33;
    }
    else {
      unsigned int v34 = 0;
    }
    *(_DWORD *)(a2 + 32) = v34 | v29 & 0xFFC0FFFF;
    llvm::Value::takeName((int32x2_t ****)v24, (llvm::Value *)a3);
    int v35 = *(_DWORD *)(a3 + 32) & 0x30;
    int v36 = *((_DWORD *)v25 + 8);
    unsigned int v37 = v36 & 0xFFFFFFCF | v35;
    *((_DWORD *)v25 + 8) = v37;
    if ((v36 & 0xFu) - 7 < 2
      || v35
      && (char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v25),
          unsigned int v37 = *((_DWORD *)v25 + 8),
          (hasExternalWeakLinkage & 1) == 0))
    {
      v37 |= 0x4000u;
    }
    *((_DWORD *)v25 + 8) = v37 & 0xFFFFFF3F | 0x80;
    sub_1CC95E714(a1, *(void *)(a3 + 8));
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)a3, (llvm::Value *)v25, (llvm::Value *)1);
    llvm::Function::eraseFromParent((llvm::Function *)a3);
  }
  else if (*(_DWORD *)(*(void *)(a2 + 24) + 8) <= 0xFFu)
  {
    uint64_t v7 = 2;
    uint64_t v8 = a2 + 72;
    do
    {
      uint64_t v8 = *(void *)(v8 + 8);
      --v7;
    }
    while (v8 != a2 + 72);
    if (v7) {
      goto LABEL_13;
    }
    uint64_t v9 = *(void *)(a2 + 80);
    uint64_t v10 = v9 ? v9 - 24 : 0;
    uint64_t v11 = v10 + 40;
    unint64_t v12 = -1;
    uint64_t v13 = v11;
    do
    {
      uint64_t v13 = *(void *)(v13 + 8);
      ++v12;
    }
    while (v13 != v11);
    if (v12 >= 3)
    {
LABEL_13:
      if (!byte_1EBCE15C8)
      {
        unint64_t v14 = *(llvm::PointerType **)(a3 + 24);
        char v15 = *(_DWORD *)(a3 + 32) & 0xF;
        int v16 = (llvm::Type *)(*(_DWORD *)(*(void *)a3 + 8) >> 8);
        __int16 v75 = 257;
        unint64_t v17 = *(void *)(a3 + 40);
        int v18 = operator new(0x80uLL);
        *((_DWORD *)v18 + 7) = *((_DWORD *)v18 + 7) & 0x38000000 | 0x40000000;
        *(void *)int v18 = 0;
        uint64_t v19 = llvm::Function::Function((unint64_t *)v18 + 1, v14, v15, v16, (const char **)&v73, v17);
        llvm::GlobalObject::setComdat((llvm::GlobalObject *)v19, *(llvm::Comdat **)(a3 + 48));
        __int16 v75 = 257;
        operator new();
      }
      uint64_t v38 = *(void *)(a3 + 80);
      if (v38) {
        uint64_t v39 = v38 - 24;
      }
      else {
        uint64_t v39 = 0;
      }
      v74[0] = 0;
      v74[1] = 0;
      uint64_t v73 = v74;
      uint64_t v40 = (void *)(v39 + 40);
      uint64_t v41 = *(void **)(v39 + 48);
      if (v41 == (void *)(v39 + 40)) {
        goto LABEL_105;
      }
      while (1)
      {
        uint64_t v42 = v41 ? (uint64_t)(v41 - 3) : 0;
        BOOL v43 = sub_1CC27FAEC(v42);
        if (!v41 || !v43) {
          break;
        }
        if (*(_WORD *)(*(void *)(*(void *)(v42 - 32 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF) + 32) + 24) + 32)) {
          goto LABEL_44;
        }
LABEL_70:
        uint64_t v41 = (void *)v41[1];
        if (v41 == v40)
        {
          long long v54 = *(void **)(v39 + 48);
          if (v54 != v40)
          {
            std::string __p = 0;
            uint64_t v55 = 0;
            uint64_t v56 = 0;
            do
            {
              if (v54) {
                unint64_t v57 = v54 - 3;
              }
              else {
                unint64_t v57 = 0;
              }
              uint64_t v58 = v74[0];
              if (!v74[0]) {
                goto LABEL_85;
              }
              unint64_t v59 = v74;
              do
              {
                BOOL v60 = v59;
                long long v61 = v58;
                unint64_t v62 = v58[4];
                unsigned int v63 = v58 + 1;
                if (v62 >= (unint64_t)v57)
                {
                  unsigned int v63 = v61;
                  unint64_t v59 = (void **)v61;
                }
                uint64_t v58 = (void *)*v63;
              }
              while (v58);
              if (v59 == v74) {
                goto LABEL_85;
              }
              if (v62 >= (unint64_t)v57) {
                BOOL v60 = (void **)v61;
              }
              if (v57 < v60[4])
              {
LABEL_85:
                if (v55 >= v56)
                {
                  uint64_t v65 = (v55 - __p) >> 3;
                  unint64_t v66 = v65 + 1;
                  if ((unint64_t)(v65 + 1) >> 61) {
                    abort();
                  }
                  if ((v56 - __p) >> 2 > v66) {
                    unint64_t v66 = (v56 - __p) >> 2;
                  }
                  if ((unint64_t)(v56 - __p) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v67 = v66;
                  }
                  if (v67)
                  {
                    if (v67 >> 61) {
                      sub_1CB833614();
                    }
                    uint64_t v68 = (char *)operator new(8 * v67);
                  }
                  else
                  {
                    uint64_t v68 = 0;
                  }
                  uint64_t v69 = &v68[8 * v65];
                  *(void *)uint64_t v69 = v57;
                  uint64_t v64 = v69 + 8;
                  while (v55 != __p)
                  {
                    uint64_t v70 = *((void *)v55 - 1);
                    v55 -= 8;
                    *((void *)v69 - 1) = v70;
                    v69 -= 8;
                  }
                  uint64_t v56 = &v68[8 * v67];
                  if (__p) {
                    operator delete(__p);
                  }
                  std::string __p = v69;
                  goto LABEL_104;
                }
                *(void *)uint64_t v55 = v57;
                v55 += 8;
              }
              uint64_t v64 = v55;
LABEL_104:
              long long v54 = (void *)v54[1];
              uint64_t v55 = v64;
            }
            while (v54 != v40);
          }
LABEL_105:
          sub_1CB833A08((uint64_t)&v73, v74[0]);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
      BOOL v44 = sub_1CC1F4FA8(v42);
      if (v41 && v44)
      {
        int v45 = (void *)(v42 - 32 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF));
        if (*(_WORD *)(*(void *)(v45[4] + 24) + 32))
        {
          uint64_t v46 = *(unsigned __int8 **)(*v45 + 24);
          int v47 = *v46;
          if ((v47 - 4) >= 0x1C && (v47 - 33) >= 2)
          {
            if (v47 == 32) {
              uint64_t v46 = (unsigned __int8 *)**((void **)v46 + 3);
            }
            uint64_t v48 = *((void *)v46 + 16);
            if (v48)
            {
              if (*(unsigned char *)(v48 + 16) == 59)
              {
                for (uint64_t i = *(void *)(v48 + 8); i; uint64_t i = *(void *)(i + 8))
                {
                  uint64_t v50 = *(void *)(i + 24);
                  if (v50)
                  {
                    if (*(unsigned char *)(v50 + 16) == 61)
                    {
                      uint64_t v51 = *(void *)(v50 - 64);
                      if (v51)
                      {
                        if (*(unsigned char *)(v51 + 16) == 21)
                        {
                          v76[0] = (uint64_t *)v48;
                          sub_1CD3CFB98((uint64_t **)&v73, (unint64_t *)v76, v76);
                          v76[0] = (uint64_t *)v50;
                          sub_1CD3CFB98((uint64_t **)&v73, (unint64_t *)v76, v76);
                          v76[0] = (uint64_t *)v42;
                          sub_1CD3CFB98((uint64_t **)&v73, (unint64_t *)v76, v76);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_70;
      }
      if (*(unsigned __int8 *)(v42 + 16) - 29 > 0xA) {
        goto LABEL_70;
      }
      unint64_t v52 = (void *)*v40;
      if ((void *)*v40 == v40) {
        goto LABEL_70;
      }
      if (v52) {
        BOOL v53 = v52 - 3;
      }
      else {
        BOOL v53 = 0;
      }
      if (*((unsigned __int8 *)v53 + 16) - 29 >= 0xB) {
        BOOL v53 = 0;
      }
      if ((void *)v42 != v53) {
        goto LABEL_70;
      }
LABEL_44:
      v76[0] = (uint64_t *)v42;
      sub_1CD3CFB98((uint64_t **)&v73, (unint64_t *)v76, v76);
      goto LABEL_70;
    }
  }
}

uint64_t sub_1CC95F7BC(uint64_t a1, uint64_t a2)
{
  unint64_t v14 = 0;
  uint64_t result = sub_1CBB0BF40(*(void *)(a1 + 128), *(_DWORD *)(a1 + 144), a2, &v14);
  if (result)
  {
    BOOL v5 = v14;
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *(unsigned int *)(a1 + 144);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *(unsigned int *)(a1 + 144);
    BOOL v5 = (void *)(v6 + 16 * v7);
  }
  if (v5 != (void *)(v6 + 16 * v7))
  {
    uint64_t v8 = (uint64_t *)v5[1];
    uint64_t v9 = (void *)v8[1];
    if (v9)
    {
      do
      {
        uint64_t v11 = v9;
        uint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = (void *)v5[1];
      do
      {
        uint64_t v11 = (void *)v10[2];
        BOOL v12 = *v11 == (void)v10;
        uint64_t v10 = v11;
      }
      while (!v12);
    }
    if (*(uint64_t **)(a1 + 96) == v8) {
      *(void *)(a1 + 96) = v11;
    }
    uint64_t v13 = *(uint64_t **)(a1 + 104);
    --*(void *)(a1 + 112);
    sub_1CB91F7C8(v13, v8);
    operator delete(v8);
    *BOOL v5 = -8192;
    *(int32x2_t *)(a1 + 136) = vadd_s32(*(int32x2_t *)(a1 + 136), (int32x2_t)0x1FFFFFFFFLL);
    return sub_1CD675234((uint64_t *)(a1 + 72), a2);
  }
  return result;
}

uint64_t sub_1CC95F8DC(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  v11[4] = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (llvm::ValueHandleBase *)&v7[24 * v2];
  v11[0] = v7;
  v11[1] = v8;
  v11[3] = &v7[24 * v6];
  *(void *)uint64_t v8 = 6;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = a2;
  if (a2 != -8192 && a2 != -4096 && a2) {
    llvm::ValueHandleBase::AddToUseList(v8);
  }
  v11[2] = (char *)v8 + 24;
  sub_1CC95E28C(a1, v11);
  uint64_t v9 = a1[1];
  sub_1CC95E35C((uint64_t)v11);
  return v9;
}

llvm::UndefValue *sub_1CC95F9F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = (llvm::Value *)a2;
  uint64_t v6 = *(void *)a2;
  int v7 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if (v7 != 13)
  {
    if (v7 == 16)
    {
      uint64_t v8 = llvm::UndefValue::get((llvm::UndefValue *)a3, (llvm::Type *)a2);
      v34[0] = 0;
      unsigned int v9 = *(_DWORD *)(v6 + 12);
      if (v9)
      {
        do
        {
          __int16 v37 = 257;
          uint64_t v10 = sub_1CC2415A4(a1, (uint64_t *)v4, v34, 1, (uint64_t)v36);
          uint64_t v11 = sub_1CC95F9F8(a1, v10, *(void *)(*(void *)(a3 + 16) + 8 * v34[0]));
          __int16 v37 = 257;
          uint64_t v8 = sub_1CC2411F8(a1, (uint64_t)v8, v11, v34, 1, (uint64_t)v36);
          ++v34[0];
        }
        while (v34[0] < v9);
      }
      return v8;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(a3 + 8) != 15)
  {
LABEL_13:
    if (v7 == 15 && *(unsigned char *)(a3 + 8) == 13)
    {
      __int16 v35 = 257;
      if (v6 != a3)
      {
        if (a2[16] <= 0x14u)
        {
          uint64_t v4 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 47, a2, a3);
          if (v4) {
            BOOL v29 = *((unsigned __int8 *)v4 + 16) >= 0x1Cu;
          }
          else {
            BOOL v29 = 0;
          }
          if (v29)
          {
            (*(void (**)(void, llvm::Value *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v34, *(void *)(a1 + 48), *(void *)(a1 + 56));
            uint64_t v31 = *(unsigned int *)(a1 + 8);
            if (v31)
            {
              uint64_t v32 = *(void *)a1;
              uint64_t v33 = v32 + 16 * v31;
              do
              {
                llvm::Instruction::setMetadata(v4, *(_DWORD *)v32, *(llvm::MDNode **)(v32 + 8));
                v32 += 16;
              }
              while (v32 != v33);
            }
          }
        }
        else
        {
          __int16 v37 = 257;
          uint64_t v4 = llvm::CastInst::Create(47, (uint64_t)a2, a3, v36, 0);
          (*(void (**)(void, llvm::Value *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v34, *(void *)(a1 + 48), *(void *)(a1 + 56));
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          if (v15)
          {
            uint64_t v16 = *(void *)a1;
            uint64_t v17 = v16 + 16 * v15;
            do
            {
              llvm::Instruction::setMetadata(v4, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
              v16 += 16;
            }
            while (v16 != v17);
          }
        }
      }
    }
    else
    {
      __int16 v35 = 257;
      if (v6 != a3)
      {
        if (a2[16] <= 0x14u)
        {
          uint64_t v4 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, a2, a3);
          if (v4) {
            BOOL v21 = *((unsigned __int8 *)v4 + 16) >= 0x1Cu;
          }
          else {
            BOOL v21 = 0;
          }
          if (v21)
          {
            (*(void (**)(void, llvm::Value *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v34, *(void *)(a1 + 48), *(void *)(a1 + 56));
            uint64_t v22 = *(unsigned int *)(a1 + 8);
            if (v22)
            {
              uint64_t v23 = *(void *)a1;
              uint64_t v24 = v23 + 16 * v22;
              do
              {
                llvm::Instruction::setMetadata(v4, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
                v23 += 16;
              }
              while (v23 != v24);
            }
          }
        }
        else
        {
          __int16 v37 = 257;
          uint64_t v4 = llvm::CastInst::Create(49, (uint64_t)a2, a3, v36, 0);
          (*(void (**)(void, llvm::Value *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v34, *(void *)(a1 + 48), *(void *)(a1 + 56));
          uint64_t v18 = *(unsigned int *)(a1 + 8);
          if (v18)
          {
            uint64_t v19 = *(void *)a1;
            uint64_t v20 = v19 + 16 * v18;
            do
            {
              llvm::Instruction::setMetadata(v4, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
              v19 += 16;
            }
            while (v19 != v20);
          }
        }
      }
    }
    return v4;
  }
  __int16 v35 = 257;
  if (v6 != a3)
  {
    if (a2[16] <= 0x14u)
    {
      uint64_t v4 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 72)
                                                                                                 + 224))(*(void *)(a1 + 72), 48, a2, a3);
      if (v4) {
        BOOL v25 = *((unsigned __int8 *)v4 + 16) >= 0x1Cu;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25)
      {
        (*(void (**)(void, llvm::Value *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v34, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v26 = *(unsigned int *)(a1 + 8);
        if (v26)
        {
          uint64_t v27 = *(void *)a1;
          uint64_t v28 = v27 + 16 * v26;
          do
          {
            llvm::Instruction::setMetadata(v4, *(_DWORD *)v27, *(llvm::MDNode **)(v27 + 8));
            v27 += 16;
          }
          while (v27 != v28);
        }
      }
    }
    else
    {
      __int16 v37 = 257;
      uint64_t v4 = llvm::CastInst::Create(48, (uint64_t)a2, a3, v36, 0);
      (*(void (**)(void, llvm::Value *, unsigned int *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v34, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v12 = *(unsigned int *)(a1 + 8);
      if (v12)
      {
        uint64_t v13 = *(void *)a1;
        uint64_t v14 = v13 + 16 * v12;
        do
        {
          llvm::Instruction::setMetadata(v4, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
          v13 += 16;
        }
        while (v13 != v14);
      }
    }
  }
  return v4;
}

uint64_t sub_1CC95FEF4()
{
  v2.n128_u64[0] = (unint64_t)"How many functions in a module could be used for MergeFunctions to pass a basic cor"
                                     "rectness check. '0' disables this check. Works only with '-debug' key.";
  v2.n128_u64[1] = 153;
  int v4 = 0;
  unint64_t v3 = &v4;
  int v1 = 1;
  sub_1CD50BCD4((uint64_t)&unk_1EBCE1488, "mergefunc-verify", &v2, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCE1488, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Preserve debug info in thunk when mergefunc transformations are made.";
  v2.n128_u64[1] = 69;
  unint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCE1548, "mergefunc-preserve-debug-info", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE1548, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Allow mergefunc to create aliases";
  v2.n128_u64[1] = 33;
  unint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCE1608, "mergefunc-use-aliases", &v4, (unsigned char **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE1608, &dword_1CB82C000);
}

void llvm::ModuleInlinerPass::run()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Module>::getResultImpl();
}

void sub_1CC9611D8()
{
}

BOOL sub_1CC961204(void *a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 40) + 56) == *a1;
}

uint64_t sub_1CC96121C()
{
  int v4 = 1;
  char v2 = 1;
  unint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Enable the priority inline order for the module inliner";
  v1.n128_u64[1] = 55;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCE16C8, "module-inline-enable-priority-order", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE16C8, &dword_1CB82C000);
}

void llvm::OpenMPOptPass::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v5 = v4;
  v16[3817] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(v6, (uint64_t)&v14);
  if (v15)
  {
    int v7 = (uint64_t *)((char *)v14 + 16);
    uint64_t v8 = 24 * v15;
    while (1)
    {
      uint64_t v9 = *(void *)(*(v7 - 1) + 8);
      if (*(void *)v9 == 6)
      {
        int v10 = *(_DWORD *)(v9 + 24);
        int v11 = *(unsigned __int16 *)(v9 + 28);
        if (v10 == 1852141679 && v11 == 28781) {
          break;
        }
      }
      v7 += 3;
      v8 -= 24;
      if (!v8) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = *v7;
  }
  else
  {
LABEL_12:
    uint64_t v13 = 0;
  }
  if (v14 == v16)
  {
    if (!v13) {
      goto LABEL_16;
    }
  }
  else
  {
    free(v14);
    if (!v13) {
      goto LABEL_16;
    }
  }
  if (!byte_1EBCE1818) {
    llvm::AnalysisManager<llvm::Module>::getResultImpl();
  }
LABEL_16:
  *(void *)(v5 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)uint64_t v5 = v5 + 32;
  *(void *)(v5 + 8) = v5 + 32;
  *(_DWORD *)(v5 + 24) = 0;
  *(void *)(v5 + 48) = v5 + 80;
  *(void *)(v5 + 56) = v5 + 80;
  *(void *)(v5 + 64) = 2;
  *(_DWORD *)(v5 + 72) = 0;
  *(void *)(v5 + 16) = 0x100000002;
}

BOOL llvm::omp::containsOpenMP(llvm::omp *this, llvm::Module *a2)
{
  v12[24] = *MEMORY[0x1E4F143B8];
  int v10 = v12;
  uint64_t v11 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v10);
  if (v11)
  {
    char v2 = (uint64_t *)((char *)v10 + 16);
    uint64_t v3 = 24 * v11;
    while (1)
    {
      uint64_t v4 = *(void *)(*(v2 - 1) + 8);
      if (*(void *)v4 == 6)
      {
        int v5 = *(_DWORD *)(v4 + 24);
        int v6 = *(unsigned __int16 *)(v4 + 28);
        if (v5 == 1852141679 && v6 == 28781) {
          break;
        }
      }
      v2 += 3;
      v3 -= 24;
      if (!v3) {
        goto LABEL_12;
      }
    }
    uint64_t v8 = *v2;
  }
  else
  {
LABEL_12:
    uint64_t v8 = 0;
  }
  if (v10 != v12) {
    free(v10);
  }
  return v8 != 0;
}

BOOL llvm::omp::isOpenMPDevice(llvm::omp *this, llvm::Module *a2)
{
  v12[24] = *MEMORY[0x1E4F143B8];
  int v10 = v12;
  uint64_t v11 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v10);
  if (v11)
  {
    char v2 = (uint64_t *)((char *)v10 + 16);
    uint64_t v3 = 24 * v11;
    while (1)
    {
      uint64_t v4 = *(void **)(*(v2 - 1) + 8);
      if (*v4 == 13)
      {
        uint64_t v5 = v4[3];
        uint64_t v6 = *(void *)((char *)v4 + 29);
        if (v5 == 0x642D706D6E65706FLL && v6 == 0x6563697665642D70) {
          break;
        }
      }
      v2 += 3;
      v3 -= 24;
      if (!v3) {
        goto LABEL_12;
      }
    }
    uint64_t v8 = *v2;
  }
  else
  {
LABEL_12:
    uint64_t v8 = 0;
  }
  if (v10 != v12) {
    free(v10);
  }
  return v8 != 0;
}

uint64_t sub_1CC962478(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (_DWORD *)(a1 + 29496);
  int v10 = (_DWORD *)(a1 + 29208);
  uint64_t v11 = sub_1CD64E580(a1, (uint64_t)a2, a3, a4, a5);
  sub_1CD675E20(v11 + 616, a2);
  uint64_t v13 = a1 + 3048;
  uint64_t v14 = 172;
  do
  {
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 32) = v13 + 48;
    *(void *)(v13 + 40) = 0x800000000;
    *(void *)(v13 + 120) = 0;
    *(void *)(v13 + 128) = 0;
    *(void *)(v13 + 112) = 0;
    *(_DWORD *)(v13 + 136) = 0;
    v13 += 152;
    --v14;
  }
  while (v14);
  *(_OWORD *)(a1 + 29184) = 0u;
  *(_DWORD *)(a1 + 29200) = 0;
  uint64_t v15 = -360;
  do
  {
    uint64_t v16 = (_OWORD *)(a1 + v15 + 29576);
    _OWORD *v16 = 0uLL;
    v16[1] = 0uLL;
    v15 += 72;
  }
  while (v15);
  *(void *)(a1 + 29568) = a6;
  *(_OWORD *)(a1 + 29576) = 0u;
  *(_DWORD *)(a1 + 29592) = 0;
  llvm::OpenMPIRBuilder::initializeTypes(v12, *(llvm::Type ***)(a1 + 952));
  sub_1CC968468(a1);
  *(void *)(a1 + 29216) = "nthreads";
  *(void *)(a1 + 29224) = 8;
  _DWORD *v10 = 0;
  v10[10] = 2;
  *(void *)(a1 + 29232) = "OMP_NUM_THREADS";
  *(void *)(a1 + 29240) = 15;
  *(void *)(a1 + 29256) = 0;
  *(void *)(a1 + 29288) = "active_levels";
  *(void *)(a1 + 29296) = 13;
  v10[18] = 1;
  v10[28] = 0;
  *(void *)(a1 + 29304) = "NONE";
  *(void *)(a1 + 29312) = 4;
  uint64_t v18 = ***(void ***)(a1 + 2736);
  uint64_t v19 = *(llvm::ConstantInt **)(v18 + 1960);
  unsigned int v20 = *(_DWORD *)(v18 + 1968);
  unsigned int v30 = v20 >> 8;
  if (v20 >> 8 >= 0x41) {
    operator new[]();
  }
  uint64_t v29 = 0;
  uint64_t v22 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v29, v17);
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  *(void *)(a1 + 29328) = v22;
  *(void *)(a1 + 29360) = "cancel";
  *(void *)(a1 + 29368) = 6;
  v10[36] = 2;
  v10[46] = 1;
  *(void *)(a1 + 29376) = "OMP_CANCELLATION";
  *(void *)(a1 + 29384) = 16;
  uint64_t v23 = **(uint64_t ***)(a1 + 2712);
  uint64_t v24 = *v23;
  BOOL v25 = *(void **)(*v23 + 1568);
  if (!v25)
  {
    uint64_t v27 = *(llvm::ConstantInt **)(v24 + 1888);
    unsigned int v28 = *(_DWORD *)(v24 + 1896);
    unsigned int v30 = v28 >> 8;
    if (v28 >> 8 > 0x40) {
      operator new[]();
    }
    uint64_t v29 = 0;
    BOOL v25 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v29, v21);
    if (v30 >= 0x41 && v29) {
      MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
    }
    *(void *)(v24 + 1568) = v25;
  }
  *(void *)(a1 + 29400) = v25;
  *(void *)(a1 + 29432) = "proc_bind";
  *(void *)(a1 + 29440) = 9;
  v10[54] = 3;
  v10[64] = 2;
  *(void *)(a1 + 29448) = "OMP_PROC_BIND";
  *(void *)(a1 + 29456) = 13;
  *(void *)(a1 + 29472) = 0;
  *(void *)(a1 + 29504) = "__last";
  *(void *)(a1 + 29512) = 6;
  *uint64_t v9 = 4;
  v9[10] = 3;
  *(void *)(a1 + 29520) = "last";
  *(void *)(a1 + 29528) = 4;
  *(void *)(a1 + 29264) = 0x1100000026;
  v10[33] = 29;
  v10[51] = 20;
  v10[69] = 31;
  return a1;
}

uint64_t sub_1CC962850(uint64_t a1, int a2)
{
  uint64_t v475 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 8);
  if (!v2) {
    return v2 & 1;
  }
  uint64_t v3 = a1;
  if (a2)
  {
    BOOL v4 = sub_1CC9829AC((void *)a1, 1);
    uint64_t v5 = *(uint64_t **)(v3 + 64);
    uint64_t v6 = (unsigned int *)(v5 + 396);
    uint64_t v7 = 172;
    do
    {
      sub_1CD676808(v6);
      sub_1CC982718(v5, (uint64_t)(v6 - 32));
      v6 += 38;
      --v7;
    }
    while (v7);
    uint64_t v9 = a1;
    uint64_t v10 = *(void *)(a1 + 64);
    if (*(void *)(v10 + 25808)) {
      BOOL v11 = byte_1EBCE1ED8 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(unsigned int *)(v12 + 8);
      if (v13)
      {
        char v14 = 0;
        uint64_t v15 = v10 + 25688;
        uint64_t v16 = *(llvm::Function ***)v12;
        uint64_t v17 = &v425;
        uint64_t v400 = *(void *)v12 + 8 * v13;
        int64x2_t v18 = vdupq_n_s64(7uLL);
        v18.i64[0] = (uint64_t)"unknown";
        int8x16_t v388 = (int8x16_t)v18;
        int64x2_t v19 = vdupq_n_s64(0xAuLL);
        v19.i64[0] = (uint64_t)"unexpected";
        int8x16_t v387 = (int8x16_t)v19;
        BOOL v398 = v4;
        while (1)
        {
          unsigned int v20 = *v16;
          BOOL v21 = v17;
          *(void *)&long long v424 = v17;
          *((void *)&v424 + 1) = 0x200000000;
          uint64_t v22 = *((void *)v20 + 1);
          uint64_t v463 = (llvm *)&v465;
          unsigned int v464 = (void *)0x800000000;
          sub_1CD64EEA0((uint64_t)&v463, v22, (uint64_t)v8, 0);
          unsigned int v23 = v464;
          if (v464)
          {
            unint64_t v24 = 0;
            int v25 = 0;
            int v26 = 0;
            int v27 = 0;
            while (1)
            {
              uint64_t v28 = *((void *)v463 + v24);
              uint64_t v29 = *(void *)(v28 + 24);
              unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
              if (v30 == 5)
              {
                for (uint64_t i = *(void *)(v29 + 8); i; uint64_t i = *(void *)(i + 8))
                {
                  if (v23 >= HIDWORD(v464)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v463 + v23) = i;
                  unsigned int v23 = v464 + 1;
                  LODWORD(v464) = v464 + 1;
                }
                goto LABEL_38;
              }
              if (v30 < 0x1C) {
                goto LABEL_31;
              }
              if (*(unsigned __int8 *)(v29 + 16) > 0x50u)
              {
                if (v30 == 81)
                {
                  if (DWORD2(v424) >= (unint64_t)HIDWORD(v424)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(v424 + 8 * DWORD2(v424)) = v28;
                  ++DWORD2(v424);
                  goto LABEL_38;
                }
                if (v30 != 84) {
                  goto LABEL_31;
                }
              }
              else if (v30 != 33 && v30 != 39)
              {
                goto LABEL_31;
              }
              if (v29 - 32 == v28)
              {
                ++v26;
                goto LABEL_38;
              }
LABEL_31:
              uint64_t v32 = sub_1CC9683FC(v29, v15);
              if (!v25 && v32)
              {
                if (((v28 - (v32 + 32 * -(*(_DWORD *)(v32 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xC0)
                {
                  if (DWORD2(v424) >= (unint64_t)HIDWORD(v424)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(v424 + 8 * DWORD2(v424)) = v28;
                  ++DWORD2(v424);
                  int v25 = 1;
                  goto LABEL_38;
                }
                int v25 = 0;
              }
              int v27 = 1;
LABEL_38:
              ++v24;
              unsigned int v23 = v464;
              if (v24 >= v464) {
                goto LABEL_44;
              }
            }
          }
          int v27 = 0;
          int v26 = 0;
          int v25 = 0;
LABEL_44:
          if (v463 != (llvm *)&v465) {
            free(v463);
          }
          uint64_t v9 = a1;
          if (!v25) {
            goto LABEL_80;
          }
          if (!v27 && v26 == 1 && DWORD2(v424) < 3) {
            break;
          }
          uint64_t v48 = (uint64_t ***)(*(uint64_t (**)(void, llvm::Function *))(a1 + 48))(*(void *)(a1 + 56), v20);
          uint64_t v49 = *(void *)***v48;
          uint64_t v17 = v21;
          if (*(void *)(v49 + 128)
            || (*(unsigned int (**)(void))(**(void **)(v49 + 72) + 48))(*(void *)(v49 + 72)))
          {
            llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v450, (uint64_t)"openmp-opt", (uint64_t)"OMP101", 6, v20);
            *(void *)long long __dst = "Parallel region is used in ";
            *(void *)&__dst[8] = 27;
            sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)__dst);
            int32x2_t v65 = vdup_n_s32(v27 == 0);
            v66.i64[0] = v65.u32[0];
            v66.i64[1] = v65.u32[1];
            *(int8x16_t *)long long __dst = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v66, 0x3FuLL)), v387, v388);
            sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)__dst);
            *(void *)long long __dst = " ways. Will not attempt to rewrite the state machine.";
            *(void *)&__dst[8] = 53;
            sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)__dst);
            LODWORD(v464) = v451;
            BYTE4(v464) = v452;
            long long v465 = v453;
            uint64_t v466 = v454;
            long long v467 = v455;
            long long v468 = v456;
            uint64_t v469 = v457;
            uint64_t v463 = (llvm *)&unk_1F2616800;
            uint64_t v470 = v472;
            uint64_t v471 = 0x400000000;
            if (v459) {
              sub_1CD494D68((uint64_t)&v470, (uint64_t)&v458);
            }
            uint64_t v473 = v461;
            uint64_t v474 = v462;
            uint64_t v463 = (llvm *)&unk_1F26165E0;
            *(void *)long long __dst = " [";
            *(void *)&__dst[8] = 2;
            sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)__dst);
            *(void *)long long __dst = "OMP101";
            *(void *)&__dst[8] = 6;
            sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)__dst);
            *(void *)long long __dst = "]";
            *(void *)&__dst[8] = 1;
            sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)__dst);
            *(_DWORD *)__leuint64_t n = v464;
            __len[4] = BYTE4(v464);
            *(_OWORD *)&__len[8] = v465;
            uint64_t v441 = v466;
            long long v442 = v467;
            long long v443 = v468;
            uint64_t v444 = v469;
            uint64_t v439 = &unk_1F2616800;
            unint64_t v445 = v447;
            uint64_t v446 = 0x400000000;
            if (v471)
            {
              sub_1CD494D68((uint64_t)&v445, (uint64_t)&v470);
              uint64_t v67 = v471;
            }
            else
            {
              uint64_t v67 = 0;
            }
            uint64_t v448 = v473;
            uint64_t v449 = v474;
            uint64_t v439 = &unk_1F26165E0;
            uint64_t v463 = (llvm *)&unk_1F2616800;
            uint64_t v68 = (char *)v470;
            if (v67)
            {
              uint64_t v69 = v67 << 6;
              do
              {
                uint64_t v70 = (void **)&v68[v69];
                if (v68[v69 - 17] < 0) {
                  operator delete(*(v70 - 5));
                }
                if (*((char *)v70 - 41) < 0) {
                  operator delete(*(v70 - 8));
                }
                v69 -= 64;
              }
              while (v69);
              uint64_t v68 = (char *)v470;
              uint64_t v9 = a1;
            }
            if (v68 != v472) {
              free(v68);
            }
            int v450 = &unk_1F2616800;
            int v71 = (char *)v458;
            if (v459)
            {
              unint64_t v72 = (unint64_t)v459 << 6;
              do
              {
                uint64_t v73 = (void **)&v71[v72];
                if (v71[v72 - 17] < 0) {
                  operator delete(*(v73 - 5));
                }
                if (*((char *)v73 - 41) < 0) {
                  operator delete(*(v73 - 8));
                }
                v72 -= 64;
              }
              while (v72);
              int v71 = (char *)v458;
              uint64_t v9 = a1;
            }
            if (v71 != v460) {
              free(v71);
            }
            llvm::OptimizationRemarkEmitter::emit(v48, (llvm::DiagnosticInfoOptimizationBase *)&v439);
            uint64_t v439 = &unk_1F2616800;
            size_t v74 = (char *)v445;
            if (v446)
            {
              unint64_t v75 = (unint64_t)v446 << 6;
              do
              {
                uint64_t v76 = (void **)&v74[v75];
                if (v74[v75 - 17] < 0) {
                  operator delete(*(v76 - 5));
                }
                if (*((char *)v76 - 41) < 0) {
                  operator delete(*(v76 - 8));
                }
                v75 -= 64;
              }
              while (v75);
LABEL_147:
              size_t v74 = (char *)v445;
              uint64_t v9 = a1;
            }
LABEL_148:
            if (v74 != v447) {
              free(v74);
            }
          }
          BOOL v4 = v398;
LABEL_81:
          if ((long long *)v424 != v17) {
            free((void *)v424);
          }
          if (++v16 == (llvm::Function **)v400) {
            goto LABEL_159;
          }
        }
        if (sub_1CC995848(a1, (uint64_t *)v20))
        {
          uint64_t v33 = (uint64_t **)*((void *)v20 + 5);
          uint64_t v34 = **v33;
          __int16 v35 = (char *)operator new(0x78uLL);
          *((_DWORD *)v35 + 13) = *((_DWORD *)v35 + 13) & 0x38000000 | 1;
          int v36 = (unint64_t *)(v35 + 32);
          *(void *)__int16 v35 = 0;
          *((void *)v35 + 1) = 0;
          *((void *)v35 + 2) = 0;
          *((void *)v35 + 3) = v35 + 32;
          __int16 v37 = (llvm::PointerType *)(v34 + 1912);
          uint64_t v39 = llvm::UndefValue::get((llvm::UndefValue *)(v34 + 1912), v38);
          if ((*((unsigned char *)v20 + 23) & 0x10) != 0)
          {
            uint64_t v40 = ***(void ***)v20;
            uint64_t v41 = *(void *)(v40 + 152);
            uint64_t v42 = *(unsigned int *)(v40 + 168);
            if (!v42) {
              goto LABEL_67;
            }
            LODWORD(v43) = (v42 - 1) & ((v20 >> 4) ^ (v20 >> 9));
            BOOL v44 = (llvm::Function **)(v41 + 16 * v43);
            int v45 = *v44;
            if (*v44 != v20)
            {
              int v46 = 1;
              while (v45 != (llvm::Function *)-4096)
              {
                int v47 = v43 + v46++;
                uint64_t v43 = v47 & (v42 - 1);
                int v45 = *(llvm::Function **)(v41 + 16 * v43);
                if (v45 == v20)
                {
                  BOOL v44 = (llvm::Function **)(v41 + 16 * v43);
                  goto LABEL_68;
                }
              }
LABEL_67:
              BOOL v44 = (llvm::Function **)(v41 + 16 * v42);
            }
LABEL_68:
            BOOL v53 = (void **)v44[1];
            uint64_t v56 = *v53;
            uint64_t v55 = (llvm *)(v53 + 2);
            long long v54 = v56;
          }
          else
          {
            long long v54 = 0;
            uint64_t v55 = (llvm *)&byte_1CFBCE98E;
          }
          LOWORD(v466) = 773;
          uint64_t v463 = v55;
          unsigned int v464 = v54;
          *(void *)&long long v465 = ".ID";
          char v14 = 1;
          llvm::GlobalVariable::GlobalVariable(v36, (uint64_t)v33, v37, 1, 8, (unint64_t)v39, (const char **)&v463, 0, 0, 0, 0);
          if (DWORD2(v424))
          {
            unint64_t v57 = (llvm::Constant ****)v424;
            uint64_t v58 = 8 * DWORD2(v424);
            BOOL v4 = v398;
            uint64_t v17 = v21;
            do
            {
              unint64_t v59 = *v57;
              PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast((llvm::ConstantExpr *)v36, ***v57, v8);
              if (*v59)
              {
                *v59[2] = (llvm::Constant *)v59[1];
                long long v61 = v59[1];
                if (v61) {
                  v61[2] = (llvm::Constant *)v59[2];
                }
              }
              uint64_t *v59 = (llvm::Constant **)PointerBitCastOrAddrSpaceCast;
              if (PointerBitCastOrAddrSpaceCast)
              {
                uint64_t v64 = (llvm::Constant **)*((void *)PointerBitCastOrAddrSpaceCast + 1);
                unint64_t v62 = (llvm::Constant ****)((char *)PointerBitCastOrAddrSpaceCast + 8);
                unsigned int v63 = v64;
                v59[1] = v64;
                if (v64) {
                  v63[2] = (llvm::Constant *)(v59 + 1);
                }
                v59[2] = (llvm::Constant **)v62;
                *unint64_t v62 = v59;
              }
              ++v57;
              v58 -= 8;
            }
            while (v58);
            char v14 = 1;
            uint64_t v9 = a1;
            goto LABEL_81;
          }
LABEL_80:
          BOOL v4 = v398;
          uint64_t v17 = v21;
          goto LABEL_81;
        }
        uint64_t v50 = (uint64_t ***)(*(uint64_t (**)(void, llvm::Function *))(a1 + 48))(*(void *)(a1 + 56), v20);
        uint64_t v51 = *(void *)***v50;
        if (!*(void *)(v51 + 128)
          && !(*(unsigned int (**)(void))(**(void **)(v51 + 72) + 48))(*(void *)(v51 + 72)))
        {
          goto LABEL_80;
        }
        llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v450, (uint64_t)"openmp-opt", (uint64_t)"OMP102", 6, v20);
        *(void *)long long __dst = "Parallel region is not called from a unique kernel. Will not attempt to rewrite the state machine.";
        *(void *)&__dst[8] = 98;
        sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)__dst);
        LODWORD(v464) = v451;
        BYTE4(v464) = v452;
        long long v465 = v453;
        uint64_t v466 = v454;
        long long v467 = v455;
        long long v468 = v456;
        uint64_t v469 = v457;
        uint64_t v463 = (llvm *)&unk_1F2616800;
        uint64_t v470 = v472;
        uint64_t v471 = 0x400000000;
        uint64_t v17 = v21;
        if (v459) {
          sub_1CD494D68((uint64_t)&v470, (uint64_t)&v458);
        }
        uint64_t v473 = v461;
        uint64_t v474 = v462;
        uint64_t v463 = (llvm *)&unk_1F26165E0;
        *(void *)long long __dst = " [";
        *(void *)&__dst[8] = 2;
        sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)__dst);
        *(void *)long long __dst = "OMP102";
        *(void *)&__dst[8] = 6;
        sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)__dst);
        *(void *)long long __dst = "]";
        *(void *)&__dst[8] = 1;
        sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)__dst);
        *(_DWORD *)__leuint64_t n = v464;
        __len[4] = BYTE4(v464);
        *(_OWORD *)&__len[8] = v465;
        uint64_t v441 = v466;
        long long v442 = v467;
        long long v443 = v468;
        uint64_t v444 = v469;
        uint64_t v439 = &unk_1F2616800;
        unint64_t v445 = v447;
        uint64_t v446 = 0x400000000;
        if (v471)
        {
          sub_1CD494D68((uint64_t)&v445, (uint64_t)&v470);
          uint64_t v52 = v471;
        }
        else
        {
          uint64_t v52 = 0;
        }
        uint64_t v448 = v473;
        uint64_t v449 = v474;
        uint64_t v439 = &unk_1F26165E0;
        uint64_t v463 = (llvm *)&unk_1F2616800;
        uint64_t v77 = (char *)v470;
        if (v52)
        {
          uint64_t v78 = v52 << 6;
          do
          {
            uint64_t v79 = (void **)&v77[v78];
            if (v77[v78 - 17] < 0) {
              operator delete(*(v79 - 5));
            }
            if (*((char *)v79 - 41) < 0) {
              operator delete(*(v79 - 8));
            }
            v78 -= 64;
          }
          while (v78);
          uint64_t v77 = (char *)v470;
          uint64_t v9 = a1;
        }
        if (v77 != v472) {
          free(v77);
        }
        int v450 = &unk_1F2616800;
        uint64_t v80 = (char *)v458;
        if (v459)
        {
          unint64_t v81 = (unint64_t)v459 << 6;
          do
          {
            int v82 = (void **)&v80[v81];
            if (v80[v81 - 17] < 0) {
              operator delete(*(v82 - 5));
            }
            if (*((char *)v82 - 41) < 0) {
              operator delete(*(v82 - 8));
            }
            v81 -= 64;
          }
          while (v81);
          uint64_t v80 = (char *)v458;
          uint64_t v9 = a1;
        }
        if (v80 != v460) {
          free(v80);
        }
        llvm::OptimizationRemarkEmitter::emit(v50, (llvm::DiagnosticInfoOptimizationBase *)&v439);
        uint64_t v439 = &unk_1F2616800;
        size_t v74 = (char *)v445;
        if (v446)
        {
          unint64_t v83 = (unint64_t)v446 << 6;
          do
          {
            uint64_t v84 = (void **)&v74[v83];
            if (v74[v83 - 17] < 0) {
              operator delete(*(v84 - 5));
            }
            if (*((char *)v84 - 41) < 0) {
              operator delete(*(v84 - 8));
            }
            v83 -= 64;
          }
          while (v83);
          goto LABEL_147;
        }
        goto LABEL_148;
      }
    }
    char v14 = 0;
LABEL_159:
    LOBYTE(v384) = v4 | v14;
    if (!sub_1CC421DEC(*(void *)(***(void ***)(v9 + 24) + 72), (uint64_t)"openmp-opt", 10)) {
      goto LABEL_286;
    }
    uint64_t v91 = (llvm *)(*(void *)(v9 + 64) + 27208);
    uint64_t v463 = v91;
    unsigned int v464 = (void *)v9;
    uint64_t v92 = *(void *)(v9 + 32);
    uint64_t v93 = *(unsigned int *)(v92 + 8);
    if (v93)
    {
      uint64_t v94 = *(uint64_t **)v92;
      uint64_t v95 = 8 * v93;
      do
      {
        uint64_t v96 = *v94++;
        sub_1CC98364C((uint64_t)v91, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC996134, (uint64_t)&v463, v96);
        v95 -= 8;
      }
      while (v95);
    }
    goto LABEL_284;
  }
  if (byte_1EBCE1A58)
  {
    uint64_t v85 = *(unint64_t ***)(a1 + 64);
    size_t v86 = v85[1];
    uint64_t v87 = 16;
    if (v86 == *v85) {
      uint64_t v87 = 20;
    }
    uint64_t v88 = *(unsigned int *)((char *)v85 + v87);
    if (v88)
    {
      uint64_t v89 = 8 * v88;
      BOOL v90 = v86;
      while (*v90 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v90;
        v89 -= 8;
        if (!v89) {
          goto LABEL_220;
        }
      }
    }
    else
    {
      BOOL v90 = v86;
    }
    unsigned int v97 = &v86[v88];
    if (v90 != v97)
    {
      uint64_t v98 = (llvm::Function *)*v90;
LABEL_167:
      uint64_t v99 = 0;
      while (1)
      {
        uint64_t v100 = (void *)(*(void *)(v3 + 64) + 72 * *((int *)&xmmword_1CD923660 + v99));
        uint64_t v101 = v3;
        unsigned int v102 = (void *)v100[3652];
        size_t v103 = v100[3653];
        uint64_t v104 = v100[3657];
        unsigned int v105 = (uint64_t ***)(*(uint64_t (**)(void, llvm::Function *))(v101 + 48))(*(void *)(v101 + 56), v98);
        uint64_t v106 = *(void *)***v105;
        if (*(void *)(v106 + 128)
          || (*(unsigned int (**)(void))(**(void **)(v106 + 72) + 48))(*(void *)(v106 + 72)))
        {
          break;
        }
LABEL_170:
        ++v99;
        uint64_t v3 = a1;
        if (v99 == 4)
        {
          int v132 = v90 + 1;
          while (v132 != v97)
          {
            unint64_t v133 = *v132++;
            uint64_t v98 = (llvm::Function *)v133;
            if (v133 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              BOOL v90 = v132 - 1;
              goto LABEL_167;
            }
          }
          goto LABEL_220;
        }
      }
      llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v463, (uint64_t)"openmp-opt", (uint64_t)"OpenMPICVTracker", 16, v98);
      uint64_t v439 = "OpenMP ICV ";
      *(void *)__leuint64_t n = 11;
      sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)&v439);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v424, "OpenMPICV", 9uLL, v102, v103);
      uint64_t v107 = sub_1CD3D6290((uint64_t)&v463, &v424);
      uint64_t v439 = " Value: ";
      *(void *)__leuint64_t n = 8;
      int v108 = (uint64_t *)(v107 + 80);
      sub_1CC59ADEC((uint64_t *)(v107 + 80), (uint64_t)&v439);
      if (!v104)
      {
        strcpy(__dst, "IMPLEMENTATION_DEFINED");
        __dst[23] = 22;
        char v109 = 22;
        uint64_t v110 = 0x4E454D454C504D49;
        uint64_t v111 = 0x445F4E4F49544154;
LABEL_185:
        BOOL v119 = v109 < 0;
        if (v109 >= 0) {
          uint64_t v110 = (uint64_t)__dst;
        }
        uint64_t v120 = v109 & 0x7F;
        if (v119) {
          uint64_t v120 = v111;
        }
        uint64_t v439 = (void *)v110;
        *(void *)__leuint64_t n = v120;
        sub_1CC59ADEC(v108, (uint64_t)&v439);
        int v121 = *(_DWORD *)(v107 + 8);
        char v452 = *(unsigned char *)(v107 + 12);
        int v451 = v121;
        long long v122 = *(_OWORD *)(v107 + 16);
        uint64_t v454 = *(void *)(v107 + 32);
        long long v453 = v122;
        uint64_t v123 = *(void *)(v107 + 72);
        long long v124 = *(_OWORD *)(v107 + 56);
        long long v455 = *(_OWORD *)(v107 + 40);
        long long v456 = v124;
        uint64_t v457 = v123;
        int v450 = &unk_1F2616800;
        unint64_t v458 = v460;
        uint64_t v459 = 0x400000000;
        if (*(_DWORD *)(v107 + 88)) {
          sub_1CD494D68((uint64_t)&v458, (uint64_t)v108);
        }
        uint64_t v125 = *(void *)(v107 + 360);
        uint64_t v461 = *(void *)(v107 + 352);
        uint64_t v462 = v125;
        int v450 = &unk_1F26165E0;
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        if (SHIBYTE(v427[0]) < 0) {
          operator delete(*((void **)&v425 + 1));
        }
        if (SBYTE7(v425) < 0) {
          operator delete((void *)v424);
        }
        uint64_t v463 = (llvm *)&unk_1F2616800;
        BOOL v126 = (char *)v470;
        if (v471)
        {
          unint64_t v127 = (unint64_t)v471 << 6;
          do
          {
            unint64_t v128 = (void **)&v126[v127];
            if (v126[v127 - 17] < 0) {
              operator delete(*(v128 - 5));
            }
            if (*((char *)v128 - 41) < 0) {
              operator delete(*(v128 - 8));
            }
            v127 -= 64;
          }
          while (v127);
          BOOL v126 = (char *)v470;
        }
        if (v126 != v472) {
          free(v126);
        }
        llvm::OptimizationRemarkEmitter::emit(v105, (llvm::DiagnosticInfoOptimizationBase *)&v450);
        int v450 = &unk_1F2616800;
        unint64_t v129 = (char *)v458;
        if (v459)
        {
          unint64_t v130 = (unint64_t)v459 << 6;
          do
          {
            unsigned int v131 = (void **)&v129[v130];
            if (v129[v130 - 17] < 0) {
              operator delete(*(v131 - 5));
            }
            if (*((char *)v131 - 41) < 0) {
              operator delete(*(v131 - 8));
            }
            v130 -= 64;
          }
          while (v130);
          unint64_t v129 = (char *)v458;
        }
        if (v129 != v460) {
          free(v129);
        }
        goto LABEL_170;
      }
      uint64_t v439 = &__len[16];
      *(_OWORD *)__leuint64_t n = xmmword_1CDB15B30;
      llvm::APInt::toString((unsigned int *)(v104 + 24), &v439, 0xAu, 1, 0);
      size_t v112 = *(void *)__len;
      if (*(void *)__len >= 0x7FFFFFFFFFFFFFF8uLL) {
        abort();
      }
      uint64_t v113 = v439;
      if (*(void *)__len >= 0x17uLL)
      {
        uint64_t v115 = (*(void *)__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*(void *)__len | 7) != 0x17) {
          uint64_t v115 = *(void *)__len | 7;
        }
        uint64_t v116 = v115 + 1;
        unint64_t v117 = v439;
        uint64_t v118 = operator new(v115 + 1);
        uint64_t v113 = v117;
        uint64_t v114 = v118;
        *(void *)&__dst[16] = v116 | 0x8000000000000000;
        *(void *)long long __dst = v118;
        *(void *)&__dst[8] = v112;
      }
      else
      {
        __dst[23] = __len[0];
        uint64_t v114 = __dst;
        if (!*(void *)__len) {
          goto LABEL_182;
        }
      }
      memmove(v114, v113, v112);
LABEL_182:
      v114[v112] = 0;
      if (v439 != &__len[16]) {
        free(v439);
      }
      char v109 = __dst[23];
      uint64_t v110 = *(void *)__dst;
      uint64_t v111 = *(void *)&__dst[8];
      goto LABEL_185;
    }
  }
LABEL_220:
  if (byte_1EBCE1B18)
  {
    uint64_t v134 = *(void *)(a1 + 32);
    uint64_t v135 = *(unsigned int *)(v134 + 8);
    if (v135)
    {
      int v136 = *(llvm ***)v134;
      uint64_t v137 = *(void *)v134 + 8 * v135;
      uint64_t v138 = &v451;
      while (1)
      {
        int v139 = *v136;
        int v140 = *(uint64_t **)(*(void *)(a1 + 64) + 29568);
        uint64_t v463 = *v136;
        int v450 = 0;
        if (sub_1CD420258(v140, &v463, &v450))
        {
          int v141 = (uint64_t ***)(*(uint64_t (**)(void, llvm *))(a1 + 48))(*(void *)(a1 + 56), v139);
          uint64_t v142 = *(void *)***v141;
          if (*(void *)(v142 + 128)
            || (*(unsigned int (**)(void))(**(void **)(v142 + 72) + 48))(*(void *)(v142 + 72)))
          {
            break;
          }
        }
LABEL_226:
        if (++v136 == (llvm **)v137) {
          goto LABEL_265;
        }
      }
      llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v463, (uint64_t)"openmp-opt", (uint64_t)"OpenMPGPU", 9, v139);
      uint64_t v439 = "OpenMP GPU kernel ";
      *(void *)__leuint64_t n = 18;
      sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)&v439);
      if ((*((unsigned char *)v139 + 23) & 0x10) == 0)
      {
        int v151 = v138;
        size_t v154 = 0;
        unsigned int v153 = &byte_1CFBCE98E;
        goto LABEL_237;
      }
      uint64_t v143 = ***(void ***)v139;
      uint64_t v144 = *(void *)(v143 + 152);
      uint64_t v145 = *(unsigned int *)(v143 + 168);
      if (v145)
      {
        LODWORD(v146) = (v145 - 1) & ((v139 >> 4) ^ (v139 >> 9));
        unint64_t v147 = (llvm **)(v144 + 16 * v146);
        uint64_t v148 = *v147;
        if (*v147 == v139)
        {
LABEL_236:
          int v151 = v138;
          unsigned int v152 = v147[1];
          size_t v155 = *(void *)v152;
          unsigned int v153 = (char *)v152 + 16;
          size_t v154 = v155;
LABEL_237:
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v439, "OpenMPGPUKernel", 0xFuLL, v153, v154);
          uint64_t v156 = sub_1CD3D6290((uint64_t)&v463, (long long *)&v439);
          *(void *)&long long v424 = "\n";
          *((void *)&v424 + 1) = 1;
          sub_1CC59ADEC((uint64_t *)(v156 + 80), (uint64_t)&v424);
          int v157 = *(_DWORD *)(v156 + 8);
          *((unsigned char *)v151 + 4) = *(unsigned char *)(v156 + 12);
          uint64_t v397 = v151;
          int *v151 = v157;
          long long v158 = *(_OWORD *)(v156 + 16);
          uint64_t v454 = *(void *)(v156 + 32);
          long long v453 = v158;
          uint64_t v159 = *(void *)(v156 + 72);
          long long v160 = *(_OWORD *)(v156 + 56);
          long long v455 = *(_OWORD *)(v156 + 40);
          long long v456 = v160;
          uint64_t v457 = v159;
          int v450 = &unk_1F2616800;
          unint64_t v458 = v460;
          uint64_t v459 = 0x400000000;
          if (*(_DWORD *)(v156 + 88)) {
            sub_1CD494D68((uint64_t)&v458, v156 + 80);
          }
          uint64_t v161 = *(void *)(v156 + 360);
          uint64_t v461 = *(void *)(v156 + 352);
          uint64_t v462 = v161;
          int v450 = &unk_1F26165E0;
          if (SBYTE7(v442) < 0) {
            operator delete(*(void **)&__len[16]);
          }
          uint64_t v138 = v151;
          if ((__len[15] & 0x80000000) != 0) {
            operator delete(v439);
          }
          uint64_t v463 = (llvm *)&unk_1F2616800;
          uint64_t v162 = (char *)v470;
          if (v471)
          {
            unint64_t v163 = (unint64_t)v471 << 6;
            do
            {
              __int16 v164 = (void **)&v162[v163];
              if (v162[v163 - 17] < 0) {
                operator delete(*(v164 - 5));
              }
              if (*((char *)v164 - 41) < 0) {
                operator delete(*(v164 - 8));
              }
              v163 -= 64;
            }
            while (v163);
            uint64_t v162 = (char *)v470;
            uint64_t v138 = v397;
          }
          if (v162 != v472) {
            free(v162);
          }
          llvm::OptimizationRemarkEmitter::emit(v141, (llvm::DiagnosticInfoOptimizationBase *)&v450);
          int v450 = &unk_1F2616800;
          uint64_t v165 = (char *)v458;
          if (v459)
          {
            unint64_t v166 = (unint64_t)v459 << 6;
            do
            {
              int v167 = (void **)&v165[v166];
              if (v165[v166 - 17] < 0) {
                operator delete(*(v167 - 5));
              }
              if (*((char *)v167 - 41) < 0) {
                operator delete(*(v167 - 8));
              }
              v166 -= 64;
            }
            while (v166);
            uint64_t v165 = (char *)v458;
          }
          if (v165 != v460) {
            free(v165);
          }
          goto LABEL_226;
        }
        int v149 = 1;
        while (v148 != (llvm *)-4096)
        {
          int v150 = v146 + v149++;
          uint64_t v146 = v150 & (v145 - 1);
          uint64_t v148 = *(llvm **)(v144 + 16 * v146);
          if (v148 == v139)
          {
            unint64_t v147 = (llvm **)(v144 + 16 * v146);
            goto LABEL_236;
          }
        }
      }
      unint64_t v147 = (llvm **)(v144 + 16 * v145);
      goto LABEL_236;
    }
  }
LABEL_265:
  BOOL v168 = sub_1CC9829AC((void *)a1, 0);
  unint64_t v169 = *(uint64_t **)(a1 + 64);
  uint64_t v170 = (unsigned int *)(v169 + 396);
  uint64_t v171 = 172;
  do
  {
    sub_1CD676808(v170);
    sub_1CC982718(v169, (uint64_t)(v170 - 32));
    v170 += 38;
    --v171;
  }
  while (v171);
  uint64_t v172 = *(void *)(a1 + 64);
  if (*(void *)(v172 + 4072))
  {
    LOBYTE(v450) = 0;
    uint64_t v463 = (llvm *)a1;
    unsigned int v464 = &v450;
    uint64_t v173 = *(void *)(a1 + 32);
    uint64_t v174 = *(unsigned int *)(v173 + 8);
    if (v174)
    {
      uint64_t v175 = v172 + 3952;
      uint64_t v176 = *(uint64_t **)v173;
      uint64_t v177 = 8 * v174;
      do
      {
        uint64_t v178 = *v176++;
        sub_1CC98364C(v175, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC996590, (uint64_t)&v463, v178);
        v177 -= 8;
      }
      while (v177);
      int v179 = v450;
    }
    else
    {
      int v179 = 0;
    }
    BOOL v180 = v179 != 0;
  }
  else
  {
    BOOL v180 = 0;
  }
  int v181 = v168 || v180;
  if (byte_1EBCE1BD8)
  {
    unsigned int v182 = (llvm *)(*(void *)(a1 + 64) + 23560);
    LOBYTE(v450) = 0;
    uint64_t v463 = v182;
    unsigned int v464 = (void *)a1;
    *(void *)&long long v465 = &v450;
    uint64_t v183 = *(void *)(a1 + 32);
    uint64_t v184 = *(unsigned int *)(v183 + 8);
    if (v184)
    {
      uint64_t v185 = *(uint64_t **)v183;
      uint64_t v186 = 8 * v184;
      do
      {
        uint64_t v187 = *v185++;
        sub_1CC98364C((uint64_t)v182, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC996A88, (uint64_t)&v463, v187);
        v186 -= 8;
      }
      while (v186);
      BOOL v188 = (_BYTE)v450 != 0;
    }
    else
    {
      BOOL v188 = 0;
    }
    v181 |= v188;
  }
  int v384 = v181 | sub_1CC9833E4(a1);
  if (byte_1EBCE18D8)
  {
    uint64_t v189 = *(void *)(a1 + 64);
    if (!*(void *)(v189 + 4072))
    {
LABEL_284:
      uint64_t v9 = a1;
      goto LABEL_286;
    }
    long long v291 = *(_OWORD *)(v189 + 4576);
    long long v424 = *(_OWORD *)(v189 + 4560);
    long long v425 = v291;
    uint64_t v426 = *(void *)(v189 + 4592);
    v427[0] = &v428;
    v427[1] = 0x800000000;
    if (*(_DWORD *)(v189 + 4608)) {
      sub_1CBB08064((uint64_t)v427, v189 + 4600);
    }
    uint64_t v292 = v189 + 3952;
    uint64_t v293 = *(void *)(v189 + 4680);
    v430[1] = 0;
    uint64_t v429 = v293;
    v430[0] = 0;
    int v431 = 0;
    sub_1CC998740((unsigned int *)v430, v189 + 4688);
    uint64_t v294 = *(void *)(a1 + 64);
    uint64_t v295 = *(void *)(v294 + 4440);
    long long v296 = *(_OWORD *)(v294 + 4424);
    long long v432 = *(_OWORD *)(v294 + 4408);
    long long v433 = v296;
    uint64_t v434 = v295;
    v435[0] = v436;
    v435[1] = 0x800000000;
    if (*(_DWORD *)(v294 + 4456)) {
      sub_1CBB08064((uint64_t)v435, v294 + 4448);
    }
    uint64_t v297 = *(void *)(v294 + 4528);
    v437[1] = 0;
    v436[8] = v297;
    v437[0] = 0;
    int v438 = 0;
    sub_1CC998740((unsigned int *)v437, v294 + 4536);
    uint64_t v406 = 0;
    int v407 = 0;
    *(void *)long long __dst = 1;
    for (uint64_t j = 8; j != 296; j += 72)
      *(void *)&__dst[j] = -4096;
    uint64_t v404 = 0;
    uint64_t v405 = 0;
    v403[3] = &v406;
    v403[4] = &v407;
    v403[5] = &v405;
    v403[6] = &v404;
    v403[0] = v292;
    v403[1] = __dst;
    sub_1CD676AFC((uint64_t)__dst);
    uint64_t v299 = *(void *)(a1 + 32);
    uint64_t v300 = *(unsigned int *)(v299 + 8);
    if (v300)
    {
      uint64_t v301 = *(uint64_t **)v299;
      uint64_t v302 = 8 * v300;
      do
      {
        uint64_t v303 = *v301++;
        sub_1CC98364C(v292, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC9987BC, (uint64_t)v403, v303);
        v302 -= 8;
      }
      while (v302);
    }
    unsigned int v418 = (char *)&v420;
    uint64_t v419 = 0x400000000;
    uint64_t v304 = sub_1CD676BDC((int *)__dst);
    if (__dst[0]) {
      int v306 = &__dst[8];
    }
    else {
      int v306 = *(unsigned char **)&__dst[8];
    }
    unsigned int v307 = *(_DWORD *)&__dst[16];
    if (__dst[0]) {
      unsigned int v307 = 4;
    }
    int v308 = (int *)&v306[72 * v307];
    if (v308 == v304)
    {
LABEL_760:
      sub_1CD48219C(&v418);
      sub_1CD67740C((uint64_t)__dst);
      uint64_t v382 = 304;
      do
      {
        sub_1CD6769C0((unsigned int *)&v423[v382 + 248]);
        MEMORY[0x1D25D9CD0](*(void *)&v423[v382 + 248], 8);
        unsigned int v383 = *(unsigned char **)&v423[v382 + 160];
        if (&v423[v382 + 176] != v383) {
          free(v383);
        }
        v382 -= 152;
      }
      while (v382);
      uint64_t v9 = a1;
      goto LABEL_286;
    }
    int v309 = v304;
    uint64_t v385 = (int *)&v306[72 * v307];
    unint64_t v386 = v305;
    while (1)
    {
      unsigned int v310 = (unsigned int *)(v309 + 7);
      if ((v309[7] - v309[8]) < 2) {
        goto LABEL_755;
      }
      int v311 = *(llvm **)v309;
      uint64_t v415 = v417;
      uint64_t v416 = 0x400000000;
      unsigned int v312 = (void *)((char *)v311 + 40);
      uint64_t v391 = v311;
      uint64_t v392 = v309;
      unint64_t v313 = (void *)*((void *)v311 + 6);
      uint64_t v396 = (void *)((char *)v311 + 40);
      if (v313 != (void *)((char *)v311 + 40)) {
        break;
      }
LABEL_678:
      if (v419)
      {
        uint64_t v354 = v418;
        uint64_t v355 = **(void **)v418;
        uint64_t v356 = (uint64_t ***)(*(uint64_t (**)(void, void))(a1 + 48))(*(void *)(a1 + 56), *(void *)(*(void *)(v355 + 40) + 56));
        uint64_t v357 = *(void *)***v356;
        if (!*(void *)(v357 + 128)
          && !(*(unsigned int (**)(void))(**(void **)(v357 + 72) + 48))(*(void *)(v357 + 72)))
        {
          goto LABEL_745;
        }
        llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v450, (uint64_t)"openmp-opt", (uint64_t)"OMP150", 6, v355);
        v409[0] = "Parallel region merged with parallel region";
        v409[1] = (void *)43;
        sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)v409);
        BOOL v358 = *((_DWORD *)v354 + 2) > 2u;
        int v359 = "";
        if (*((_DWORD *)v354 + 2) > 2u) {
          int v359 = "s";
        }
        v409[0] = (void *)v359;
        v409[1] = (void *)v358;
        sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)v409);
        v409[0] = " at ";
        v409[1] = (void *)4;
        sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)v409);
        uint64_t v360 = *((unsigned int *)v354 + 2);
        if (v360 == 1)
        {
LABEL_684:
          unsigned int v413 = ".";
          uint64_t v414 = 1;
          sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)&v413);
          LODWORD(v464) = v451;
          BYTE4(v464) = v452;
          long long v465 = v453;
          uint64_t v466 = v454;
          long long v467 = v455;
          long long v468 = v456;
          uint64_t v469 = v457;
          uint64_t v463 = (llvm *)&unk_1F2616800;
          uint64_t v470 = v472;
          uint64_t v471 = 0x400000000;
          if (v459) {
            sub_1CD494D68((uint64_t)&v470, (uint64_t)&v458);
          }
          uint64_t v473 = v461;
          uint64_t v474 = v462;
          uint64_t v463 = (llvm *)&unk_1F2616570;
          v409[0] = " [";
          v409[1] = (void *)2;
          sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)v409);
          v409[0] = "OMP150";
          v409[1] = (void *)6;
          sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)v409);
          v409[0] = "]";
          v409[1] = (void *)1;
          sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)v409);
          *(_DWORD *)__leuint64_t n = v464;
          __len[4] = BYTE4(v464);
          *(_OWORD *)&__len[8] = v465;
          uint64_t v441 = v466;
          long long v442 = v467;
          long long v443 = v468;
          uint64_t v444 = v469;
          uint64_t v439 = &unk_1F2616800;
          unint64_t v445 = v447;
          uint64_t v446 = 0x400000000;
          if (v471)
          {
            sub_1CD494D68((uint64_t)&v445, (uint64_t)&v470);
            uint64_t v361 = v471;
          }
          else
          {
            uint64_t v361 = 0;
          }
          uint64_t v448 = v473;
          uint64_t v449 = v474;
          uint64_t v439 = &unk_1F2616570;
          uint64_t v463 = (llvm *)&unk_1F2616800;
          unint64_t v370 = (char *)v470;
          if (v361)
          {
            uint64_t v371 = v361 << 6;
            do
            {
              uint64_t v372 = (void **)&v370[v371];
              if (v370[v371 - 17] < 0) {
                operator delete(*(v372 - 5));
              }
              if (*((char *)v372 - 41) < 0) {
                operator delete(*(v372 - 8));
              }
              v371 -= 64;
            }
            while (v371);
            unint64_t v370 = (char *)v470;
          }
          if (v370 != v472) {
            free(v370);
          }
          int v450 = &unk_1F2616800;
          unsigned int v373 = (char *)v458;
          if (v459)
          {
            unint64_t v374 = (unint64_t)v459 << 6;
            do
            {
              int v375 = (void **)&v373[v374];
              if (v373[v374 - 17] < 0) {
                operator delete(*(v375 - 5));
              }
              if (*((char *)v375 - 41) < 0) {
                operator delete(*(v375 - 8));
              }
              v374 -= 64;
            }
            while (v374);
            unsigned int v373 = (char *)v458;
          }
          if (v373 != v460) {
            free(v373);
          }
          llvm::OptimizationRemarkEmitter::emit(v356, (llvm::DiagnosticInfoOptimizationBase *)&v439);
          uint64_t v439 = &unk_1F2616800;
          unsigned int v376 = (char *)v445;
          if (v446)
          {
            unint64_t v377 = (unint64_t)v446 << 6;
            do
            {
              unsigned int v378 = (void **)&v376[v377];
              if (v376[v377 - 17] < 0) {
                operator delete(*(v378 - 5));
              }
              if (*((char *)v378 - 41) < 0) {
                operator delete(*(v378 - 8));
              }
              v377 -= 64;
            }
            while (v377);
            unsigned int v376 = (char *)v445;
          }
          if (v376 != v447) {
            free(v376);
          }
LABEL_745:
          uint64_t v379 = *(void *)(*(void *)(*(void *)v354 + 8 * *((unsigned int *)v354 + 2) - 8) + 32);
          if (v379) {
            BOOL v380 = v379 == *(void *)(*(void *)(*(void *)v354 + 8 * *((unsigned int *)v354 + 2) - 8) + 40)
          }
                         + 40;
          else {
            BOOL v380 = 1;
          }
          if (v380) {
            BOOL v381 = 0;
          }
          else {
            BOOL v381 = (llvm::BasicBlock *)(v379 - 24);
          }
          LOWORD(v466) = 257;
          sub_1CD126150(v391, v381, 0, v406, v407, 0, (llvm::Twine *)&v463, 0);
        }
        uint64_t v362 = *(void *)v354 + 8;
        uint64_t v363 = 8 * v360 - 8;
        while (2)
        {
          uint64_t v364 = *(void *)v362;
          unsigned int v365 = *(unsigned __int8 **)(*(void *)v362 + 48);
          uint64_t v408 = v365;
          if (v365) {
            llvm::MetadataTracking::track((uint64_t)&v408, v365, 2);
          }
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v409, "OpenMPParallelMerge", 0x13uLL, (const llvm::DebugLoc *)&v408);
          sub_1CD3D6290((uint64_t)&v450, (long long *)v409);
          if (v412 < 0) {
            operator delete(v411);
          }
          if (v410 < 0) {
            operator delete(v409[0]);
          }
          if (v408)
          {
            int v366 = *v408;
            if ((v366 - 4) > 0x1E)
            {
              if ((v366 - 3) >= 0xFFFFFFFE) {
                unsigned int v367 = v408;
              }
              else {
                unsigned int v367 = 0;
              }
              if ((v366 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v368 = (unint64_t)(v367 + 8);
                goto LABEL_708;
              }
              if (v366 == 3) {
                *((void *)v408 + 1) = 0;
              }
            }
            else if ((v408[1] & 0x7F) == 2 || *((_DWORD *)v408 + 3))
            {
              uint64_t v369 = *((void *)v408 + 2);
              if ((v369 & 4) != 0)
              {
                unint64_t v368 = v369 & 0xFFFFFFFFFFFFFFF8;
                if (v368)
                {
LABEL_708:
                  unsigned int v413 = (const char *)&v408;
                  sub_1CC5FA668(v368 + 16, &v413);
                }
              }
            }
          }
          if (v364 != *(void *)(*(void *)v354 + 8 * *((unsigned int *)v354 + 2) - 8))
          {
            unsigned int v413 = ", ";
            uint64_t v414 = 2;
            sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)&v413);
          }
          v362 += 8;
          v363 -= 8;
          if (!v363) {
            goto LABEL_684;
          }
          continue;
        }
      }
      if (v415 != v417) {
        free(v415);
      }
      int v308 = v385;
      uint64_t v305 = v386;
      int v309 = v392;
LABEL_755:
      while (1)
      {
        v309 += 18;
        if (v309 == v305) {
          break;
        }
        if ((*(void *)v309 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_759;
        }
      }
      int v309 = v305;
LABEL_759:
      if (v309 == v308) {
        goto LABEL_760;
      }
    }
    unsigned int v314 = 0;
    uint64_t v315 = (unsigned int *)(v309 + 6);
    while (1)
    {
      uint64_t v316 = v313 ? (uint64_t)(v313 - 3) : 0;
      uint64_t v318 = *((void *)v309 + 1);
      uint64_t v317 = *((void *)v309 + 2);
      if (v317 == v318)
      {
        uint64_t v319 = *v310;
        unint64_t v320 = (void *)(v317 + 8 * v319);
        if (v319)
        {
          uint64_t v321 = 0;
          uint64_t v322 = 8 * v319;
          while (*(void *)(v317 + v321) != v316)
          {
            v321 += 8;
            if (v322 == v321) {
              goto LABEL_603;
            }
          }
          unint64_t v320 = (void *)(v317 + v321);
        }
LABEL_603:
        uint64_t v331 = *((void *)v309 + 2);
      }
      else
      {
        uint64_t v323 = *v315;
        int v324 = v323 - 1;
        unsigned int v325 = (v323 - 1) & ((v316 >> 4) ^ (v316 >> 9));
        unint64_t v320 = (void *)(v317 + 8 * v325);
        uint64_t v326 = *v320;
        if (*v320 == -1)
        {
          unint64_t v327 = 0;
LABEL_605:
          if (v327) {
            unint64_t v320 = v327;
          }
          if (*v320 != v316) {
            unint64_t v320 = (void *)(v317 + 8 * v323);
          }
        }
        else
        {
          unint64_t v327 = 0;
          int v328 = 1;
          while (v326 != v316)
          {
            if (v327) {
              BOOL v329 = 0;
            }
            else {
              BOOL v329 = v326 == -2;
            }
            if (v329) {
              unint64_t v327 = v320;
            }
            unsigned int v330 = v325 + v328++;
            unsigned int v325 = v330 & v324;
            unint64_t v320 = (void *)(v317 + 8 * (v330 & v324));
            uint64_t v326 = *v320;
            if (*v320 == -1) {
              goto LABEL_605;
            }
          }
        }
        uint64_t v331 = *((void *)v309 + 1);
      }
      unint64_t v313 = (void *)v313[1];
      uint64_t v332 = v317 == v331 ? v310 : v315;
      if (v320 != (void *)(v317 + 8 * *v332)) {
        break;
      }
      int v333 = *(unsigned __int8 *)(v316 + 16);
      if ((v333 - 29) < 0xB) {
        goto LABEL_617;
      }
      if (v333 == 84)
      {
        uint64_t v350 = *(void *)(v316 - 32);
        if (v314)
        {
          if (v350
            && !*(unsigned char *)(v350 + 16)
            && *(void *)(v350 + 24) == *(void *)(v316 + 72)
            && (*(unsigned char *)(v350 + 33) & 0x20) != 0)
          {
            goto LABEL_668;
          }
        }
        else if (v350 && !*(unsigned char *)(v350 + 16) && *(void *)(v350 + 24) == *(void *)(v316 + 72))
        {
          char v351 = 0;
          uint64_t v352 = 0;
          while (1)
          {
            char v353 = v351;
            if (v350 == v430[19 * v352 - 1]) {
              break;
            }
            char v351 = 1;
            uint64_t v352 = 1;
            if (v353)
            {
              unsigned int v314 = 0;
              goto LABEL_668;
            }
          }
        }
LABEL_617:
        unsigned int v334 = v312;
        if (v313 != v312)
        {
          if (v317 == v318) {
            v335 = v310;
          }
          else {
            v335 = v315;
          }
          uint64_t v336 = v317;
          while (1)
          {
            uint64_t v337 = v313 ? (uint64_t)(v313 - 3) : 0;
            if (v336 == v331)
            {
              uint64_t v338 = *v310;
              uint64_t v339 = (void *)(v331 + 8 * v338);
              if (v338)
              {
                uint64_t v340 = 0;
                uint64_t v341 = 8 * v338;
                while (*(void *)(v331 + v340) != v337)
                {
                  v340 += 8;
                  if (v341 == v340) {
                    goto LABEL_643;
                  }
                }
                uint64_t v339 = (void *)(v331 + v340);
              }
LABEL_643:
              uint64_t v336 = v331;
            }
            else
            {
              int v342 = *v315 - 1;
              unsigned int v343 = v342 & ((v337 >> 4) ^ (v337 >> 9));
              uint64_t v339 = (void *)(v317 + 8 * v343);
              uint64_t v344 = *v339;
              if (*v339 == -1)
              {
                int v345 = 0;
LABEL_645:
                if (v345) {
                  uint64_t v339 = v345;
                }
                if (*v339 != v337) {
                  uint64_t v339 = (void *)(v317 + 8 * *v335);
                }
              }
              else
              {
                int v345 = 0;
                int v346 = 1;
                while (v344 != v337)
                {
                  if (v345) {
                    BOOL v347 = 0;
                  }
                  else {
                    BOOL v347 = v344 == -2;
                  }
                  if (v347) {
                    int v345 = v339;
                  }
                  unsigned int v348 = v343 + v346++;
                  unsigned int v343 = v348 & v342;
                  uint64_t v339 = (void *)(v317 + 8 * (v348 & v342));
                  uint64_t v344 = *v339;
                  if (*v339 == -1) {
                    goto LABEL_645;
                  }
                }
              }
              uint64_t v331 = v318;
              uint64_t v336 = v317;
            }
            int v349 = v336 == v331 ? v310 : v315;
            unint64_t v313 = (void *)v313[1];
            if (v339 != (void *)(v336 + 8 * *v349)) {
              break;
            }
            if (v313 == v312)
            {
              unsigned int v334 = v312;
              goto LABEL_664;
            }
          }
          unsigned int v334 = v313;
        }
LABEL_664:
        if (v314 >= 2)
        {
          sub_1CD676C5C((uint64_t)&v418, (unint64_t)&v415);
          unsigned int v312 = v396;
        }
        unsigned int v314 = 0;
        unint64_t v313 = v334;
        int v309 = v392;
LABEL_667:
        LODWORD(v416) = v314;
      }
LABEL_668:
      if (v313 == v312) {
        goto LABEL_678;
      }
    }
    if (v314 >= HIDWORD(v416)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v415 + v314) = v316;
    unsigned int v314 = v416 + 1;
    goto LABEL_667;
  }
  uint64_t v9 = a1;
LABEL_286:
  if (!byte_1EBCE1F98)
  {
    uint64_t v190 = *(void *)(*(void *)(v9 + 64) + 29568);
    size_t v191 = *(uint64_t **)(v190 + 24);
    uint64_t v393 = *(uint64_t **)(v190 + 32);
    if (v191 != v393)
    {
      char v395 = 0;
      while (1)
      {
        unint64_t v394 = v191;
        uint64_t v399 = *v191 + 72;
        uint64_t v401 = *v191;
        uint64_t v192 = *(void *)(*v191 + 80);
        if (v192 != v399) {
          break;
        }
LABEL_560:
        size_t v191 = v394 + 1;
        if (v394 + 1 == v393) {
          goto LABEL_561;
        }
      }
      while (1)
      {
        uint64_t v193 = v192 - 24;
        BOOL v194 = v192 == 0;
        if (!v192) {
          uint64_t v193 = 0;
        }
        *(void *)&long long v424 = &v425;
        *((void *)&v424 + 1) = 0x800000000;
        *(void *)long long __dst = v423;
        *(void *)&__dst[8] = v423;
        *(void *)&__dst[16] = 8;
        int v422 = 0;
        uint64_t v195 = *(void *)(v401 + 80);
        if (v195) {
          BOOL v194 = v195 - 24 == v193;
        }
        if (v194)
        {
          long long v425 = 0uLL;
          DWORD2(v424) = 1;
        }
        uint64_t v196 = v193 + 40;
        uint64_t v197 = *(void *)(v193 + 48);
        if (v197 == v193 + 40) {
          goto LABEL_555;
        }
        do
        {
          if (v197) {
            uint64_t v198 = v197 - 24;
          }
          else {
            uint64_t v198 = 0;
          }
          unsigned int v199 = *(unsigned __int8 *)(v198 + 16);
          if (v199 > 0x26)
          {
            if (v199 != 39 && v199 != 84) {
              goto LABEL_321;
            }
LABEL_312:
            uint64_t v200 = *(void *)(v197 - 56);
            if (v200
              && !*(unsigned char *)(v200 + 16)
              && *(void *)(v200 + 24) == *(void *)(v197 + 48)
              && *(_DWORD *)(v200 + 36) >> 2 == 1695
              || (uint64_t v463 = (llvm *)"ompx_aligned_barrier",
                  unsigned int v464 = (void *)20,
                  sub_1CC0D7F54((llvm::StringMapImpl *)&llvm::KnownAssumptionStrings, "ompx_aligned_barrier", 0x14uLL),
                  llvm::hasAssumption(v197 - 24, (uint64_t)&v463)))
            {
              if (DWORD2(v424) >= (unint64_t)HIDWORD(v424)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(v424 + 16 * DWORD2(v424)) = v198;
LABEL_320:
              ++DWORD2(v424);
              goto LABEL_321;
            }
            goto LABEL_321;
          }
          if (v199 == 29)
          {
            if (DWORD2(v424) >= (unint64_t)HIDWORD(v424)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_OWORD *)(v424 + 16 * DWORD2(v424)) = xmmword_1CD96D880;
            goto LABEL_320;
          }
          if (v199 == 33) {
            goto LABEL_312;
          }
LABEL_321:
          uint64_t v197 = *(void *)(v197 + 8);
        }
        while (v197 != v196);
        if (DWORD2(v424) >= 2)
        {
          int v201 = (void *)v424;
          uint64_t v202 = (void *)(v424 + 16 * DWORD2(v424) - 16);
          while (1)
          {
LABEL_324:
            if (v201 == v202)
            {
              if (*(_DWORD *)&__dst[20] != v422)
              {
                if (*(void *)&__dst[8] == *(void *)__dst) {
                  uint64_t v274 = *(unsigned int *)&__dst[20];
                }
                else {
                  uint64_t v274 = *(unsigned int *)&__dst[16];
                }
                if (v274)
                {
                  uint64_t v275 = 8 * v274;
                  unsigned int v276 = *(uint64_t **)&__dst[8];
                  while ((unint64_t)*v276 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v276;
                    v275 -= 8;
                    if (!v275)
                    {
                      char v395 = 1;
                      goto LABEL_555;
                    }
                  }
                }
                else
                {
                  unsigned int v276 = *(uint64_t **)&__dst[8];
                }
                if (v276 != (uint64_t *)(*(void *)&__dst[8] + 8 * v274))
                {
                  uint64_t v277 = *v276;
                  if (byte_1EBCE2298)
                  {
                    int v278 = (uint64_t ***)(*(uint64_t (**)(void, void))(a1 + 48))(*(void *)(a1 + 56), *(void *)(*(void *)(v277 + 40) + 56));
                    uint64_t v279 = *(void *)***v278;
                    if (*(void *)(v279 + 128)
                      || (*(unsigned int (**)(void))(**(void **)(v279 + 72) + 48))(*(void *)(v279 + 72)))
                    {
                      llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v450, (uint64_t)"openmp-opt", (uint64_t)"OMP190", 6, v277);
                      unsigned int v418 = "Redundant barrier eliminated.";
                      uint64_t v419 = 29;
                      sub_1CC59ADEC((uint64_t *)&v458, (uint64_t)&v418);
                      LODWORD(v464) = v451;
                      BYTE4(v464) = v452;
                      long long v465 = v453;
                      uint64_t v466 = v454;
                      long long v467 = v455;
                      long long v468 = v456;
                      uint64_t v469 = v457;
                      uint64_t v463 = (llvm *)&unk_1F2616800;
                      uint64_t v470 = v472;
                      uint64_t v471 = 0x400000000;
                      if (v459) {
                        sub_1CD494D68((uint64_t)&v470, (uint64_t)&v458);
                      }
                      uint64_t v473 = v461;
                      uint64_t v474 = v462;
                      uint64_t v463 = (llvm *)&unk_1F2616570;
                      unsigned int v418 = " [";
                      uint64_t v419 = 2;
                      sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)&v418);
                      unsigned int v418 = "OMP190";
                      uint64_t v419 = 6;
                      sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)&v418);
                      unsigned int v418 = "]";
                      uint64_t v419 = 1;
                      sub_1CC59ADEC((uint64_t *)&v470, (uint64_t)&v418);
                      *(_DWORD *)__leuint64_t n = v464;
                      __len[4] = BYTE4(v464);
                      *(_OWORD *)&__len[8] = v465;
                      uint64_t v441 = v466;
                      long long v442 = v467;
                      long long v443 = v468;
                      uint64_t v444 = v469;
                      uint64_t v439 = &unk_1F2616800;
                      unint64_t v445 = v447;
                      uint64_t v446 = 0x400000000;
                      if (v471)
                      {
                        sub_1CD494D68((uint64_t)&v445, (uint64_t)&v470);
                        uint64_t v280 = v471;
                      }
                      else
                      {
                        uint64_t v280 = 0;
                      }
                      uint64_t v448 = v473;
                      uint64_t v449 = v474;
                      uint64_t v439 = &unk_1F2616570;
                      uint64_t v463 = (llvm *)&unk_1F2616800;
                      uint64_t v281 = (char *)v470;
                      if (v280)
                      {
                        uint64_t v282 = v280 << 6;
                        uint64_t v389 = (char *)v470;
                        do
                        {
                          int v283 = (void **)&v281[v282];
                          if (v281[v282 - 17] < 0)
                          {
                            operator delete(*(v283 - 5));
                            uint64_t v281 = v389;
                          }
                          if (*((char *)v283 - 41) < 0)
                          {
                            operator delete(*(v283 - 8));
                            uint64_t v281 = v389;
                          }
                          v282 -= 64;
                        }
                        while (v282);
                        uint64_t v281 = (char *)v470;
                      }
                      if (v281 != v472) {
                        free(v281);
                      }
                      int v450 = &unk_1F2616800;
                      unsigned int v284 = (char *)v458;
                      if (v459)
                      {
                        unint64_t v285 = (unint64_t)v459 << 6;
                        int v390 = (char *)v458;
                        do
                        {
                          v286 = (void **)&v284[v285];
                          if (v284[v285 - 17] < 0)
                          {
                            operator delete(*(v286 - 5));
                            unsigned int v284 = v390;
                          }
                          if (*((char *)v286 - 41) < 0)
                          {
                            operator delete(*(v286 - 8));
                            unsigned int v284 = v390;
                          }
                          v285 -= 64;
                        }
                        while (v285);
                        unsigned int v284 = (char *)v458;
                      }
                      if (v284 != v460) {
                        free(v284);
                      }
                      llvm::OptimizationRemarkEmitter::emit(v278, (llvm::DiagnosticInfoOptimizationBase *)&v439);
                      uint64_t v439 = &unk_1F2616800;
                      int v287 = (char *)v445;
                      if (v446)
                      {
                        unint64_t v288 = (unint64_t)v446 << 6;
                        do
                        {
                          BOOL v289 = (void **)&v287[v288];
                          if (v287[v288 - 17] < 0) {
                            operator delete(*(v289 - 5));
                          }
                          if (*((char *)v289 - 41) < 0) {
                            operator delete(*(v289 - 8));
                          }
                          v288 -= 64;
                        }
                        while (v288);
                        int v287 = (char *)v445;
                      }
                      if (v287 != v447) {
                        free(v287);
                      }
                    }
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
                char v395 = 1;
              }
              break;
            }
            BOOL v203 = v201;
            int v205 = (uint64_t ***)v201[2];
            v201 += 2;
            unsigned int v204 = v205;
            uint64_t v206 = *v203;
            if (*v203) {
              goto LABEL_326;
            }
            if (v204)
            {
              if (!*((_DWORD *)v203 + 2))
              {
                uint64_t v214 = *(void *)(v401 + 80);
                if (v214) {
                  uint64_t v215 = v214 - 24;
                }
                else {
                  uint64_t v215 = 0;
                }
                uint64_t v216 = *(void *)(v215 + 48);
                if (v216) {
                  uint64_t v210 = (uint64_t ***)(v216 - 24);
                }
                else {
                  uint64_t v210 = 0;
                }
                goto LABEL_351;
              }
LABEL_326:
              uint64_t v207 = *(void *)(v206 + 32);
              uint64_t v208 = (uint64_t ***)(v207 - 24);
              if (v207) {
                BOOL v209 = v207 == *(void *)(v206 + 40) + 40;
              }
              else {
                BOOL v209 = 1;
              }
              if (v209) {
                uint64_t v210 = 0;
              }
              else {
                uint64_t v210 = (uint64_t ***)(v207 - 24);
              }
              if (v204) {
                goto LABEL_351;
              }
              if (*((_DWORD *)v203 + 6) == 1)
              {
                int v211 = v210[5];
                int v212 = (uint64_t **)v211[5];
                if (v212 != v211 + 5)
                {
                  if (v212) {
                    int v213 = (uint64_t ***)(v212 - 3);
                  }
                  else {
                    int v213 = 0;
                  }
                  if (*((unsigned __int8 *)v213 + 16) - 29 >= 0xB) {
                    unsigned int v204 = 0;
                  }
                  else {
                    unsigned int v204 = v213;
                  }
                  uint64_t v210 = v208;
                  goto LABEL_351;
                }
                unsigned int v204 = 0;
LABEL_352:
                if ((llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v208) & 1) == 0)
                {
                  uint64_t v220 = *((unsigned __int8 *)v208 + 16) - 33;
                  if (v220 <= 0x37)
                  {
                    if (((1 << (*((unsigned char *)v208 + 16) - 33)) & 0x8000000000041) != 0)
                    {
                      uint64_t v237 = v208[8];
                      if (!v237 || (*((unsigned char *)v237 + 20) & 4) == 0 && (*((unsigned char *)v237 + 17) & 0x10) == 0)
                      {
                        LODWORD(v463) = 7;
                        if (sub_1CC5CB59C((uint64_t)v208, (__int32 *)&v463, 1uLL))
                        {
                          uint64_t v242 = (uint64_t)*(v208 - 4);
                          if (!v242
                            || *(unsigned char *)(v242 + 16)
                            || *(uint64_t ***)(v242 + 24) != v208[9]
                            || *(_DWORD *)(v242 + 36) != 7)
                          {
                            goto LABEL_353;
                          }
                        }
                        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v208, 66) & 1) == 0
                          && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v208, 44) & 1) == 0)
                        {
                          goto LABEL_353;
                        }
                      }
                    }
                    else if (((1 << (*((unsigned char *)v208 + 16) - 33)) & 0x808001C8000010) != 0 {
                           || v220 == 28 && (*((_WORD *)v208 + 9) & 0x301) != 0)
                    }
                    {
                      goto LABEL_353;
                    }
                  }
                  goto LABEL_406;
                }
LABEL_353:
                int v217 = sub_1CBFB3AB0((uint64_t)v208);
                if (v208 && v217)
                {
                  llvm::MemoryLocation::getForArgument((uint64_t)v208, 0, 0, (uint64_t)&v463);
                  if (!v463) {
                    continue;
                  }
                  UnderlyingObject = (unsigned __int8 *)llvm::getUnderlyingObject(v463, (const llvm::Value *)6);
                  if (!UnderlyingObject) {
                    continue;
                  }
                  int v219 = UnderlyingObject[16];
                  if ((v219 - 11) >= 2
                    && v219 != 59
                    && (v219 != 3
                     || (UnderlyingObject[80] & 1) == 0
                     && (UnderlyingObject[33] & 0x1C) == 0
                     && (*(_DWORD *)(*(void *)UnderlyingObject + 8) & 0xFFFFFE00) != 0x400))
                  {
                    continue;
                  }
                  if (sub_1CC92A430((uint64_t)v208))
                  {
                    llvm::MemoryLocation::getForArgument((uint64_t)v208, 1u, 0, (uint64_t)&v463);
LABEL_389:
                    if (!v463) {
                      continue;
                    }
                    int v235 = (unsigned __int8 *)llvm::getUnderlyingObject(v463, (const llvm::Value *)6);
                    if (!v235) {
                      continue;
                    }
                    int v236 = v235[16];
                    if ((v236 - 11) >= 2
                      && v236 != 59
                      && (v236 != 3
                       || (v235[80] & 1) == 0
                       && (v235[33] & 0x1C) == 0
                       && (*(_DWORD *)(*(void *)v235 + 8) & 0xFFFFFE00) != 0x400))
                    {
                      continue;
                    }
                  }
LABEL_406:
                  uint64_t v238 = v208[4];
                  if (v238) {
                    BOOL v239 = v238 == v208[5] + 5;
                  }
                  else {
                    BOOL v239 = 1;
                  }
                  if (v239) {
                    uint64_t v208 = 0;
                  }
                  else {
                    uint64_t v208 = (uint64_t ***)(v238 - 3);
                  }
                  if (v208 == v204)
                  {
                    uint64_t v206 = *v203;
                    goto LABEL_424;
                  }
                  goto LABEL_352;
                }
                if (v208 && *((unsigned char *)v208 + 16) == 60 && (*((unsigned char *)v208 + 23) & 0x20) != 0)
                {
                  uint64_t v221 = ***v208;
                  uint64_t v463 = (llvm *)v208;
                  int v222 = *(_DWORD *)(v221 + 2496);
                  if (!v222)
                  {
                    unint64_t v240 = 0;
                    goto LABEL_417;
                  }
                  uint64_t v223 = *(void *)(v221 + 2480);
                  int v224 = v222 - 1;
                  unsigned int v225 = v224 & ((v208 >> 4) ^ (v208 >> 9));
                  uint64_t v226 = (void *)(v223 + 40 * v225);
                  int v227 = (void ***)*v226;
                  if ((uint64_t ***)*v226 != v208)
                  {
                    uint64_t v228 = 0;
                    int v229 = 1;
                    while (v227 != (void ***)-4096)
                    {
                      if (v228) {
                        BOOL v230 = 0;
                      }
                      else {
                        BOOL v230 = v227 == (void ***)-8192;
                      }
                      if (v230) {
                        uint64_t v228 = v226;
                      }
                      unsigned int v231 = v225 + v229++;
                      unsigned int v225 = v231 & v224;
                      uint64_t v226 = (void *)(v223 + 40 * v225);
                      int v227 = (void ***)*v226;
                      if ((uint64_t ***)*v226 == v208) {
                        goto LABEL_384;
                      }
                    }
                    if (v228) {
                      unint64_t v240 = v228;
                    }
                    else {
                      unint64_t v240 = v226;
                    }
LABEL_417:
                    uint64_t v226 = sub_1CC609054(v221 + 2480, (uint64_t)&v463, (uint64_t *)&v463, v240);
                    BOOL v241 = v463;
                    v226[4] = 0;
                    v226[3] = 0;
                    void *v226 = v241;
                    v226[1] = v226 + 3;
                    v226[2] = 0x100000000;
                  }
LABEL_384:
                  uint64_t v232 = *((unsigned int *)v226 + 4);
                  if (v232)
                  {
                    unsigned int v233 = (void *)(v226[1] + 8);
                    uint64_t v234 = 16 * v232;
                    while (*((_DWORD *)v233 - 2) != 6)
                    {
                      v233 += 2;
                      v234 -= 16;
                      if (!v234) {
                        goto LABEL_388;
                      }
                    }
                    if (*v233) {
                      goto LABEL_406;
                    }
                  }
                }
LABEL_388:
                llvm::MemoryLocation::getOrNone(v208, (uint64_t)&v463);
                if (!BYTE8(v467)) {
                  continue;
                }
                goto LABEL_389;
              }
              unsigned int v204 = 0;
LABEL_351:
              uint64_t v208 = v210;
              if (v210 != v204) {
                goto LABEL_352;
              }
LABEL_424:
              if (v206)
              {
                uint64_t v243 = *(void *)&__dst[8];
                uint64_t v244 = *(unsigned int *)&__dst[20];
                if (*(void *)&__dst[8] == *(void *)__dst)
                {
                  if (*(_DWORD *)&__dst[20])
                  {
                    v245 = 0;
                    uint64_t v246 = 8 * *(unsigned int *)&__dst[20];
                    int v247 = *(void **)&__dst[8];
                    while (*v247 != v206)
                    {
                      if (*v247 == -2) {
                        v245 = v247;
                      }
                      ++v247;
                      v246 -= 8;
                      if (!v246)
                      {
                        if (!v245) {
                          goto LABEL_433;
                        }
                        void *v245 = v206;
                        goto LABEL_492;
                      }
                    }
                  }
                  else
                  {
LABEL_433:
                    unsigned int v248 = *(_DWORD *)&__dst[16];
                    if (*(_DWORD *)&__dst[20] >= *(_DWORD *)&__dst[16]) {
                      goto LABEL_446;
                    }
                    ++*(_DWORD *)&__dst[20];
                    *(void *)(*(void *)&__dst[8] + 8 * v244) = v206;
                  }
                }
                else
                {
                  unsigned int v248 = *(_DWORD *)&__dst[16];
LABEL_446:
                  if (3 * v248 <= 4 * (*(_DWORD *)&__dst[20] - v422))
                  {
                    if (v248 >= 0x40) {
                      v248 *= 2;
                    }
                    else {
                      unsigned int v248 = 128;
                    }
LABEL_497:
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)__dst, v248);
                    unsigned int v248 = *(_DWORD *)&__dst[16];
                    uint64_t v243 = *(void *)&__dst[8];
                    goto LABEL_448;
                  }
                  if (v248 - *(_DWORD *)&__dst[20] < v248 >> 3) {
                    goto LABEL_497;
                  }
LABEL_448:
                  unsigned int v256 = v248 - 1;
                  unsigned int v257 = (v248 - 1) & ((v206 >> 4) ^ (v206 >> 9));
                  uint64_t v258 = (void *)(v243 + 8 * v257);
                  uint64_t v259 = *v258;
                  if (*v258 == -1)
                  {
                    uint64_t v260 = 0;
LABEL_475:
                    if (v260) {
                      BOOL v272 = v260;
                    }
                    else {
                      BOOL v272 = v258;
                    }
                    if (*v272 != v206)
                    {
                      if (*v272 == -2) {
                        --v422;
                      }
                      else {
                        ++*(_DWORD *)&__dst[20];
                      }
                      *BOOL v272 = v206;
                    }
                  }
                  else
                  {
                    uint64_t v260 = 0;
                    int v261 = 1;
                    while (v259 != v206)
                    {
                      if (v260) {
                        BOOL v262 = 0;
                      }
                      else {
                        BOOL v262 = v259 == -2;
                      }
                      if (v262) {
                        uint64_t v260 = v258;
                      }
                      unsigned int v263 = v257 + v261++;
                      unsigned int v257 = v263 & v256;
                      uint64_t v258 = (void *)(v243 + 8 * (v263 & v256));
                      uint64_t v259 = *v258;
                      if (*v258 == -1) {
                        goto LABEL_475;
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v249 = *v201;
                uint64_t v250 = *(void *)&__dst[8];
                uint64_t v251 = *(unsigned int *)&__dst[20];
                if (*(void *)&__dst[8] == *(void *)__dst)
                {
                  if (*(_DWORD *)&__dst[20])
                  {
                    uint64_t v252 = 0;
                    uint64_t v253 = 8 * *(unsigned int *)&__dst[20];
                    uint64_t v254 = *(void **)&__dst[8];
                    while (*v254 != v249)
                    {
                      if (*v254 == -2) {
                        uint64_t v252 = v254;
                      }
                      ++v254;
                      v253 -= 8;
                      if (!v253)
                      {
                        if (!v252) {
                          goto LABEL_443;
                        }
                        *uint64_t v252 = v249;
LABEL_492:
                        --v422;
                        goto LABEL_324;
                      }
                    }
                  }
                  else
                  {
LABEL_443:
                    unsigned int v255 = *(_DWORD *)&__dst[16];
                    if (*(_DWORD *)&__dst[20] >= *(_DWORD *)&__dst[16]) {
                      goto LABEL_460;
                    }
                    ++*(_DWORD *)&__dst[20];
                    *(void *)(*(void *)&__dst[8] + 8 * v251) = v249;
                  }
                }
                else
                {
                  unsigned int v255 = *(_DWORD *)&__dst[16];
LABEL_460:
                  if (3 * v255 <= 4 * (*(_DWORD *)&__dst[20] - v422))
                  {
                    if (v255 >= 0x40) {
                      v255 *= 2;
                    }
                    else {
                      unsigned int v255 = 128;
                    }
LABEL_502:
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)__dst, v255);
                    unsigned int v255 = *(_DWORD *)&__dst[16];
                    uint64_t v250 = *(void *)&__dst[8];
                    goto LABEL_462;
                  }
                  if (v255 - *(_DWORD *)&__dst[20] < v255 >> 3) {
                    goto LABEL_502;
                  }
LABEL_462:
                  unsigned int v264 = v255 - 1;
                  unsigned int v265 = (v255 - 1) & ((v249 >> 4) ^ (v249 >> 9));
                  uint64_t v266 = (void *)(v250 + 8 * v265);
                  uint64_t v267 = *v266;
                  if (*v266 == -1)
                  {
                    BOOL v268 = 0;
LABEL_483:
                    if (v268) {
                      unsigned int v273 = v268;
                    }
                    else {
                      unsigned int v273 = v266;
                    }
                    if (*v273 != v249)
                    {
                      if (*v273 == -2) {
                        --v422;
                      }
                      else {
                        ++*(_DWORD *)&__dst[20];
                      }
                      void *v273 = v249;
                    }
                  }
                  else
                  {
                    BOOL v268 = 0;
                    int v269 = 1;
                    while (v267 != v249)
                    {
                      if (v268) {
                        BOOL v270 = 0;
                      }
                      else {
                        BOOL v270 = v267 == -2;
                      }
                      if (v270) {
                        BOOL v268 = v266;
                      }
                      unsigned int v271 = v265 + v269++;
                      unsigned int v265 = v271 & v264;
                      uint64_t v266 = (void *)(v250 + 8 * (v271 & v264));
                      uint64_t v267 = *v266;
                      if (*v266 == -1) {
                        goto LABEL_483;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_555:
        if (*(void *)&__dst[8] != *(void *)__dst) {
          free(*(void **)&__dst[8]);
        }
        if ((long long *)v424 != &v425) {
          free((void *)v424);
        }
        uint64_t v192 = *(void *)(v192 + 8);
        if (v192 == v399) {
          goto LABEL_560;
        }
      }
    }
  }
  char v395 = 0;
LABEL_561:
  LOBYTE(v2) = v384 | v395;
  return v2 & 1;
}

uint64_t sub_1CC967188(void *a1)
{
  MEMORY[0x1D25D9CD0](a1[3697], 8);
  MEMORY[0x1D25D9CD0](a1[3648], 8);
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 3268;
  do
  {
    sub_1CD6769C0((unsigned int *)&v3[v2 + 377]);
    MEMORY[0x1D25D9CD0](a1[v2 + 3645], 8);
    BOOL v4 = (void *)a1[v2 + 3634];
    if (&v3[v2 + 368] != v4) {
      free(v4);
    }
    v2 -= 19;
  }
  while (v2 != -3268);
  llvm::OpenMPIRBuilder::~OpenMPIRBuilder((llvm::OpenMPIRBuilder *)(a1 + 77));

  return sub_1CD64F398((uint64_t)a1);
}

void llvm::initializeOpenMPOptCGSCCLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE1790, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC9672A8;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE1790, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC9672A8(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CC967348(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE1788;
  *(_DWORD *)(a1 + 24) = 3;
  *(void *)a1 = &unk_1F262A438;
  *(void *)(a1 + 32) = a1 + 64;
  *(void *)(a1 + 40) = a1 + 64;
  *(void *)(a1 + 48) = 16;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 192) = a1 + 208;
  *(void *)(a1 + 200) = 0x1000000000;
  *(void *)(a1 + 336) = a1 + 352;
  *(void *)(a1 + 344) = 0x1000000000;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 528) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE1790, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC9672A8;
    v5[1] = &PassRegistry;
    BOOL v4 = v5;
    std::__call_once(&qword_1EBCE1790, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC967440(uint64_t a1)
{
  *(void *)a1 = &unk_1F2629780;
  *(void *)(a1 + 32) = &unk_1F2629810;
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2 != (void *)(a1 + 200)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }
  *(void *)a1 = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1CC9674EC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2629780;
  *(void *)(a1 + 32) = &unk_1F2629810;
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2 != (void *)(a1 + 200)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }
  *(void *)a1 = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 + 8));

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC9675B8(uint64_t a1)
{
  unint64_t result = sub_1CD6482A0((_DWORD *)(a1 + 16));
  unint64_t v3 = result + 72;
  uint64_t v4 = *(void *)(result + 80);
  if (v4 != result + 72)
  {
    do
    {
      uint64_t v5 = v4 - 24;
      if (!v4) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = v5;
      unint64_t result = (unint64_t)sub_1CD5296A0(a1 + 48, &v6);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  *(void *)(a1 + 328) = *(unsigned int *)(a1 + 192);
  return result;
}

void sub_1CC967634(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v14, *(unsigned int *)(a1 + 192));
  uint64_t v4 = std::string::insert(&v14, 0, "[AAExecutionDomain] ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v15, "/");
  std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(void *)(a1 + 328));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v17, " BBs thread 0 only.");
  *a2 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_1CC967784()
{
  return 1;
}

BOOL sub_1CC967790(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = 0;
  unint64_t v73 = sub_1CD6482A0((_DWORD *)(a1 + 16));
  uint64_t v70 = 0;
  int v71 = 0;
  sub_1CC86D39C(&v70, (uint64_t)&v73);
  uint64_t v4 = (unsigned char *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 192);
  v68[0] = a2;
  v68[1] = a1;
  if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1CC967E18, (uint64_t)v68, a1, 1, &v69) & 1) == 0)
  {
    uint64_t v63 = *(void *)(v73 + 80);
    if (v63) {
      uint64_t v64 = v63 - 24;
    }
    else {
      uint64_t v64 = 0;
    }
    uint64_t v67 = v64;
    sub_1CD529CAC(a1 + 48, &v67);
  }
  std::string::size_type v7 = v70;
  uint64_t v6 = v71;
  if (v71 != v70)
  {
    int v65 = v5;
    uint64_t v66 = *(void *)(a2 + 88) + 25232;
    while (1)
    {
      uint64_t v9 = *((void *)v6 - 1);
      v6 -= 8;
      uint64_t v8 = v9;
      uint64_t v67 = v9;
      uint64_t v10 = *(void *)(v9 + 8);
      uint64_t v11 = v10;
      if (v10)
      {
        while (1)
        {
          uint64_t v12 = *(void *)(v11 + 24);
          unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
          BOOL v14 = v12 && v13 >= 0x1C;
          BOOL v15 = !v14 || v13 - 29 > 0xA;
          if (!v15) {
            break;
          }
          uint64_t v11 = *(void *)(v11 + 8);
          if (!v11) {
            goto LABEL_14;
          }
        }
        while (1)
        {
          uint64_t v19 = *(void *)(v10 + 24);
          unsigned int v20 = *(unsigned __int8 *)(v19 + 16);
          BOOL v21 = v19 && v20 >= 0x1C;
          if (v21 && v20 - 29 <= 0xA) {
            break;
          }
          uint64_t v10 = *(void *)(v10 + 8);
          if (!v10) {
            goto LABEL_111;
          }
        }
        char v23 = 1;
LABEL_26:
        uint64_t v24 = *(void *)(v19 + 40);
        uint64_t v25 = *(void *)(v24 + 40);
        if (v25 == v24 + 40) {
          goto LABEL_97;
        }
        uint64_t v26 = v25 - 24;
        if (!v25) {
          uint64_t v26 = 0;
        }
        unsigned int v27 = *(unsigned __int8 *)(v26 + 16) - 40;
        if (v27 < 0xFFFFFFF5) {
          uint64_t v26 = 0;
        }
        if (!v25) {
          goto LABEL_97;
        }
        BOOL v28 = *(unsigned char *)(v26 + 16) == 30 && v27 >= 0xFFFFFFF5;
        if (!v28 || (*(_DWORD *)(v26 + 20) & 0x7FFFFFF) != 3 || *(void *)(v26 - 32) != v8) {
          goto LABEL_97;
        }
        uint64_t v29 = *(void *)(v26 - 96);
        unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
        BOOL v31 = v29 && v30 >= 0x1C;
        if (!v31 || v30 - 83 < 0xFFFFFFFE) {
          goto LABEL_97;
        }
        unsigned int v33 = *(_WORD *)(v29 + 18) & 0x3F;
        if (v33 > 0x29 || ((1 << v33) & 0x2A90000AA00) == 0) {
          goto LABEL_97;
        }
        if (v33 - 32 >= 0xA)
        {
          if (v33 != 14 && v33 != 9) {
            goto LABEL_97;
          }
        }
        else if ((*(_WORD *)(v29 + 18) & 0x3E) != 0x20)
        {
          goto LABEL_97;
        }
        uint64_t v35 = *(void *)(v29 - 32);
        if (v35) {
          BOOL v36 = *(unsigned char *)(v35 + 16) == 16;
        }
        else {
          BOOL v36 = 0;
        }
        if (!v36) {
          goto LABEL_97;
        }
        if (llvm::Constant::isAllOnesValue(*(llvm::Constant **)(v29 - 32)))
        {
          uint64_t v37 = *(void *)(v29 - 64);
          unsigned int v38 = *(unsigned __int8 *)(v37 + 16);
          if (v38 >= 0x1C)
          {
            unsigned int v39 = v38 - 33;
            BOOL v15 = v39 > 0x33;
            uint64_t v40 = (1 << v39) & 0x8000000000041;
            if (!v15 && v40 != 0)
            {
              uint64_t v42 = sub_1CC9683FC(v37, v66);
              if (v42)
              {
                uint64_t v43 = *(void *)(v42 - 32 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF) + 32);
                if (v43 && *(unsigned char *)(v43 + 16) == 16)
                {
                  unsigned int v45 = *(_DWORD *)(v43 + 32);
                  uint64_t v46 = v45 > 0x40
                      ? **(void **)(v43 + 24)
                      : (uint64_t)(*(void *)(v43 + 24) << -(char)v45) >> -(char)v45;
                  if (v46) {
                    goto LABEL_101;
                  }
                }
              }
            }
          }
LABEL_97:
          uint64_t v55 = sub_1CD675DC0(a1 + 48, v24);
          if (*v4)
          {
            uint64_t v56 = a1 + 56;
            uint64_t v57 = 16;
          }
          else
          {
            uint64_t v56 = *(void *)(a1 + 56);
            uint64_t v57 = *(unsigned int *)(a1 + 64);
          }
          v23 &= v56 + 8 * v57 != v55;
          goto LABEL_101;
        }
        uint64_t v47 = *(unsigned int *)(v35 + 32);
        if (v47 > 0x40)
        {
          int v48 = 0;
          int64_t v49 = (unint64_t)(v47 + 63) >> 6;
          do
          {
            BOOL v15 = v49-- < 1;
            if (v15) {
              break;
            }
            unint64_t v50 = *(void *)(*(void *)(v35 + 24) + 8 * v49);
            v48 += __clz(v50);
          }
          while (!v50);
          int v51 = v47 | 0xFFFFFFC0;
          if ((v47 & 0x3F) == 0) {
            int v51 = 0;
          }
          if (v48 + v51 != v47) {
            goto LABEL_97;
          }
        }
        else if (*(void *)(v35 + 24))
        {
          goto LABEL_97;
        }
        uint64_t v52 = *(void *)(v29 - 64);
        if (*(unsigned char *)(v52 + 16) != 84) {
          goto LABEL_97;
        }
        uint64_t v53 = *(void *)(v52 - 32);
        if (!v53 || *(unsigned char *)(v53 + 16) || *(void *)(v53 + 24) != *(void *)(v52 + 72)) {
          goto LABEL_97;
        }
        if (((*(unsigned char *)(v53 + 33) & 0x20) == 0 || *(_DWORD *)(v53 + 36) != 7247)
          && ((*(unsigned char *)(v53 + 33) & 0x20) == 0 || *(_DWORD *)(v53 + 36) != 3587))
        {
          goto LABEL_97;
        }
LABEL_101:
        while (1)
        {
          uint64_t v10 = *(void *)(v10 + 8);
          if (!v10) {
            break;
          }
          uint64_t v19 = *(void *)(v10 + 24);
          unsigned int v58 = *(unsigned __int8 *)(v19 + 16);
          if (v19) {
            BOOL v59 = v58 >= 0x1C;
          }
          else {
            BOOL v59 = 0;
          }
          if (v59 && v58 - 29 < 0xB) {
            goto LABEL_26;
          }
        }
        if (v23) {
          goto LABEL_111;
        }
      }
      else
      {
LABEL_14:
        uint64_t v16 = sub_1CD675DC0(a1 + 48, v8);
        if (*v4)
        {
          uint64_t v17 = a1 + 56;
          uint64_t v18 = 16;
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 56);
          uint64_t v18 = *(unsigned int *)(a1 + 64);
        }
        if (v17 + 8 * v18 != v16) {
          goto LABEL_111;
        }
      }
      sub_1CD529CAC(a1 + 48, &v67);
LABEL_111:
      if (v6 == v7)
      {
        uint64_t v6 = v70;
        int v5 = v65;
        break;
      }
    }
  }
  int v61 = *(_DWORD *)(a1 + 192);
  if (v6)
  {
    int v71 = v6;
    operator delete(v6);
  }
  return v5 == v61;
}

uint64_t sub_1CC967BEC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 120))(a1, *(void *)(a2 + 40));
}

uint64_t sub_1CC967C14(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result)
  {
    uint64_t v5 = sub_1CD675DC0(a1 + 48, a2);
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v6 = a1 + 56;
      uint64_t v7 = 16;
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = *(unsigned int *)(a1 + 64);
    }
    return v6 + 8 * v7 != v5;
  }
  return result;
}

uint64_t *sub_1CC967C98(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2629780;
  *(void *)a1 = &unk_1F2629810;
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2 != (void *)(a1 + 168)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 24), 8);
  }
  *(void *)(a1 - 32) = &unk_1F2620AA0;

  return sub_1CD64E248((uint64_t *)(a1 - 24));
}

void sub_1CC967D4C(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2629780;
  *(void *)a1 = &unk_1F2629810;
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2 != (void *)(a1 + 168)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 24), 8);
  }
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 - 24));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC967E18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v9 = *a2;
  uint64_t v10 = &v12;
  uint64_t v11 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1CD41B598((uint64_t)&v10, (uint64_t)(a2 + 1));
    uint64_t v3 = v9;
  }
  uint64_t v4 = sub_1CC967EF0(*a1, *(void *)(*(void *)(v3 + 40) + 56), 0, a1[1], 0);
  uint64_t v5 = 0;
  if (!v11)
  {
    unsigned int v6 = *(unsigned __int8 *)(*(void *)(v9 - 32) + 16);
    if (v6 < 0x15 || v6 == 24) {
      uint64_t v5 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v4 + 112))(v4);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (v10 != &v12) {
    free(v10);
  }
  return v5;
}

llvm::AbstractAttribute *sub_1CC967EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (byte_1EBD07860) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = 0;
  }
  *(void *)&long long v51 = a2;
  *((void *)&v51 + 1) = v8;
  uint64_t v10 = (llvm::AbstractAttribute *)sub_1CD65D328(a1, &v51, a4, a5, 1);
  if (v10) {
    return v10;
  }
  uint64_t v10 = (llvm::AbstractAttribute *)llvm::AAExecutionDomain::createForPosition((llvm::AAExecutionDomain *)&v51, (uint64_t **)a1, v9);
  sub_1CD675D50(a1, (uint64_t)v10);
  uint64_t v12 = *(uint64_t **)(a1 + 5480);
  if (v12)
  {
    __p[0] = &llvm::AAExecutionDomain::ID;
    v47[0] = 0;
    int v13 = sub_1CD420258(v12, __p, v47) ^ 1;
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = v51 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v51 & 3) == 0) {
    uint64_t v14 = *(void *)(v14 + 24);
  }
  unsigned int v15 = *(unsigned __int8 *)(v14 + 16);
  if (!*(unsigned char *)(v14 + 16)) {
    goto LABEL_16;
  }
  if (v15 == 21)
  {
    uint64_t v16 = (uint64_t *)(v14 + 24);
  }
  else
  {
    if (v15 < 0x1C)
    {
      uint64_t v14 = 0;
      goto LABEL_23;
    }
    uint64_t v16 = (uint64_t *)(*(void *)(v14 + 40) + 56);
  }
  uint64_t v14 = *v16;
  if (!*v16)
  {
LABEL_23:
    char v19 = 1;
    goto LABEL_48;
  }
LABEL_16:
  uint64_t v17 = *(void *)(v14 + 112);
  if (v17 && ((*(unsigned char *)(v17 + 14) & 2) != 0 || (*(unsigned char *)(v17 + 17) & 8) != 0))
  {
    BOOL v18 = 1;
  }
  else if (*(unsigned char *)(a1 + 5464))
  {
    BOOL v18 = 0;
  }
  else
  {
    unsigned int v20 = *(uint64_t **)(a1 + 88);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    if (v21 == *v20)
    {
      uint64_t v23 = *((unsigned int *)v20 + 5);
      uint64_t v24 = (void *)(v21 + 8 * v23);
      if (v23)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 8 * v23;
        while (*(void *)(v21 + v25) != v14)
        {
          v25 += 8;
          if (v26 == v25) {
            goto LABEL_43;
          }
        }
        uint64_t v24 = (void *)(v21 + v25);
      }
LABEL_43:
      uint64_t v22 = v20[1];
    }
    else
    {
      uint64_t v27 = *((unsigned int *)v20 + 4);
      int v28 = v27 - 1;
      unsigned int v29 = (v27 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      uint64_t v24 = (void *)(v21 + 8 * v29);
      uint64_t v30 = *v24;
      if (*v24 == -1)
      {
        BOOL v31 = 0;
LABEL_84:
        if (v31) {
          uint64_t v24 = v31;
        }
        if (*v24 != v14) {
          uint64_t v24 = (void *)(v21 + 8 * v27);
        }
      }
      else
      {
        BOOL v31 = 0;
        int v32 = 1;
        while (v30 != v14)
        {
          if (v31) {
            BOOL v33 = 0;
          }
          else {
            BOOL v33 = v30 == -2;
          }
          if (v33) {
            BOOL v31 = v24;
          }
          unsigned int v34 = v29 + v32++;
          unsigned int v29 = v34 & v28;
          uint64_t v24 = (void *)(v21 + 8 * (v34 & v28));
          uint64_t v30 = *v24;
          if (*v24 == -1) {
            goto LABEL_84;
          }
        }
      }
    }
    BOOL v33 = v21 == v22;
    uint64_t v35 = 16;
    if (v33) {
      uint64_t v35 = 20;
    }
    BOOL v18 = v24 == (void *)(v21 + 8 * *(unsigned int *)((char *)v20 + v35));
  }
  char v19 = 0;
  LOBYTE(v13) = (v18 | v13) != 0;
LABEL_48:
  if ((v13 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength) {
    goto LABEL_75;
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(void *)v10 + 72))(v47, v10);
  if (v48 >= 0) {
    size_t v36 = v48 & 0x7F;
  }
  else {
    size_t v36 = (size_t)v47[1];
  }
  uint64_t v37 = __p;
  sub_1CB907098((uint64_t)__p, v36 + 12);
  if (v50 < 0) {
    uint64_t v37 = (void **)__p[0];
  }
  if (v36)
  {
    if (v48 >= 0) {
      unsigned int v38 = v47;
    }
    else {
      unsigned int v38 = (void **)v47[0];
    }
    memmove(v37, v38, v36);
  }
  strcpy((char *)v37 + v36, "::initialize");
  unsigned int v39 = (uint64_t *)off_1EC7DFC00();
  if (*v39)
  {
    if (v50 >= 0) {
      uint64_t v40 = __p;
    }
    else {
      uint64_t v40 = (void **)__p[0];
    }
    if (v50 >= 0) {
      uint64_t v41 = v50 & 0x7F;
    }
    else {
      uint64_t v41 = (uint64_t)__p[1];
    }
    llvm::timeTraceProfilerBegin((uint64_t)v40, v41, (uint64_t)"", 0);
  }
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(void *)v10 + 24))(v10, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v39)
  {
    sub_1CD84B62C(*v39);
    if (v19) {
      goto LABEL_74;
    }
  }
  else if (v19)
  {
    goto LABEL_74;
  }
  unsigned int v45 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v14;
  v47[0] = 0;
  if ((sub_1CD420258(v45, __p, v47) & 1) == 0)
  {
    uint64_t v46 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1CD648A0C((llvm::IRPosition *)&v51);
    v47[0] = 0;
    if ((sub_1CD420258(v46, __p, v47) & 1) == 0) {
      goto LABEL_75;
    }
  }
LABEL_74:
  int v42 = *(_DWORD *)(a1 + 4368);
  if (v42 == 2)
  {
LABEL_75:
    uint64_t v43 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(void *)v43 + 40))(v43);
    return v10;
  }
  *(_DWORD *)(a1 + 4368) = 1;
  llvm::Attributor::updateAA((llvm::Attributor *)a1, v10);
  *(_DWORD *)(a1 + 4368) = v42;
  if (a4)
  {
    uint64_t v44 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v10 + 40))(v10);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v44 + 16))(v44)) {
      llvm::Attributor::recordDependence(a1, (uint64_t)v10, a4, a5);
    }
  }
  return v10;
}

uint64_t sub_1CC9683FC(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16) != 84) {
    return 0;
  }
  int v2 = *(_DWORD *)(result + 20);
  if (v2 < 0 && (*(void *)(result - 32 * (v2 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0) {
    return 0;
  }
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 120);
    if (!v3) {
      return 0;
    }
    uint64_t v4 = *(void *)(result - 32);
    if (!v4 || *(unsigned char *)(v4 + 16) || *(void *)(v4 + 24) != *(void *)(result + 72)) {
      uint64_t v4 = 0;
    }
    if (v4 != v3) {
      return 0;
    }
  }
  return result;
}

#error "1CC968468: too big function (funcsize=0)"

void sub_1CC982718(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 120);
  if (v2)
  {
    llvm::OpenMPIRBuilder::addAttributes((uint64_t)(a1 + 77), *(_DWORD *)a2, v2);
    for (uint64_t i = *(void *)(*(void *)(a2 + 120) + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v6 = *(void *)(i + 24);
      if (v6) {
        BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7)
      {
        uint64_t v9 = *(void *)(*(void *)(v6 + 40) + 56);
        uint64_t v11 = *a1;
        uint64_t v10 = a1[1];
        if (v10 == *a1)
        {
          uint64_t v12 = *((unsigned int *)a1 + 5);
          int v13 = (void *)(v10 + 8 * v12);
          if (v12)
          {
            uint64_t v14 = 0;
            uint64_t v15 = 8 * v12;
            while (*(void *)(v10 + v14) != v9)
            {
              v14 += 8;
              if (v15 == v14) {
                goto LABEL_26;
              }
            }
            int v13 = (void *)(v10 + v14);
          }
LABEL_26:
          uint64_t v11 = a1[1];
        }
        else
        {
          uint64_t v16 = *((unsigned int *)a1 + 4);
          int v17 = v16 - 1;
          unsigned int v18 = (v16 - 1) & ((v9 >> 4) ^ (v9 >> 9));
          int v13 = (void *)(v10 + 8 * v18);
          uint64_t v19 = *v13;
          if (*v13 == -1)
          {
            unsigned int v20 = 0;
LABEL_37:
            if (v20) {
              int v13 = v20;
            }
            if (*v13 != v9) {
              int v13 = (void *)(v10 + 8 * v16);
            }
          }
          else
          {
            unsigned int v20 = 0;
            int v21 = 1;
            while (v19 != v9)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                unsigned int v20 = v13;
              }
              unsigned int v23 = v18 + v21++;
              unsigned int v18 = v23 & v17;
              int v13 = (void *)(v10 + 8 * (v23 & v17));
              uint64_t v19 = *v13;
              if (*v13 == -1) {
                goto LABEL_37;
              }
            }
          }
        }
        if (v10 == v11) {
          uint64_t v24 = (unsigned int *)a1 + 5;
        }
        else {
          uint64_t v24 = (unsigned int *)(a1 + 2);
        }
        if (v13 == (void *)(v10 + 8 * *v24)) {
          continue;
        }
        uint64_t v8 = a2;
      }
      else
      {
        uint64_t v8 = a2;
        uint64_t v9 = 0;
      }
      uint64_t v25 = sub_1CC9828D8(v8, v9);
      unint64_t v26 = *(unsigned int *)(v25 + 8);
      if (v26 >= *(unsigned int *)(v25 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v25 + 8 * v26) = i;
      ++*(_DWORD *)(v25 + 8);
    }
  }
}

uint64_t sub_1CC9828D8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = sub_1CD675F64(a1 + 128, &v6);
  if (!v2[1])
  {
    uint64_t v4 = operator new(0xA8uLL);
    v4[1] = 0;
    void v4[2] = 0;
    void *v4 = &unk_1F2629870;
    v4[3] = v4 + 5;
    v4[4] = 0x1000000000;
    uint64_t v5 = (std::__shared_weak_count *)v2[2];
    v2[1] = v4 + 3;
    v2[2] = v4;
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return v2[1];
}

BOOL sub_1CC9829AC(void *a1, int a2)
{
  v132[24] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1[4] + 8)) {
    return 0;
  }
  uint64_t v9 = *(llvm::GlobalValue **)(a1[8] + 25960);
  if (v9)
  {
    int v10 = *((_DWORD *)v9 + 8);
    int v2 = v10 & 0xF;
    *((_DWORD *)v9 + 8) = v10 & 0xFFFFFFF0;
    if ((v10 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v9) & 1) == 0) {
      *((_DWORD *)v9 + 8) |= 0x4000u;
    }
  }
  uint64_t v11 = *(llvm::GlobalValue **)(a1[8] + 26112);
  if (v11)
  {
    int v12 = *((_DWORD *)v11 + 8);
    int v3 = v12 & 0xF;
    *((_DWORD *)v11 + 8) = v12 & 0xFFFFFFF0;
    if ((v12 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v11) & 1) == 0) {
      *((_DWORD *)v11 + 8) |= 0x4000u;
    }
  }
  int v13 = *(llvm::GlobalValue **)(a1[8] + 28392);
  if (v13)
  {
    int v14 = *((_DWORD *)v13 + 8);
    int v4 = v14 & 0xF;
    *((_DWORD *)v13 + 8) = v14 & 0xFFFFFFF0;
    if ((v14 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v13) & 1) == 0) {
      *((_DWORD *)v13 + 8) |= 0x4000u;
    }
  }
  uint64_t v15 = *(llvm::GlobalValue **)(a1[8] + 28544);
  if (v15)
  {
    int v16 = *((_DWORD *)v15 + 8);
    int v123 = v16 & 0xF;
    *((_DWORD *)v15 + 8) = v16 & 0xFFFFFFF0;
    if ((v16 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v15) & 1) == 0) {
      *((_DWORD *)v15 + 8) |= 0x4000u;
    }
  }
  int v17 = *(llvm::GlobalValue **)(a1[8] + 3920);
  if (v17)
  {
    int v18 = *((_DWORD *)v17 + 8);
    int v122 = v18 & 0xF;
    *((_DWORD *)v17 + 8) = v18 & 0xFFFFFFF0;
    if ((v18 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v17) & 1) == 0) {
      *((_DWORD *)v17 + 8) |= 0x4000u;
    }
  }
  uint64_t v19 = *(llvm::GlobalValue **)(a1[8] + 5136);
  if (v19)
  {
    int v20 = *((_DWORD *)v19 + 8);
    int v121 = v20 & 0xF;
    *((_DWORD *)v19 + 8) = v20 & 0xFFFFFFF0;
    if ((v20 & 0x30) != 0)
    {
      long long v124 = v9;
      int v21 = v4;
      BOOL v22 = v11;
      int v23 = v2;
      int v24 = v3;
      uint64_t v25 = v19;
      if ((llvm::GlobalValue::hasExternalWeakLinkage(v19) & 1) == 0) {
        *((_DWORD *)v25 + 8) |= 0x4000u;
      }
      uint64_t v19 = v25;
      int v3 = v24;
      int v2 = v23;
      uint64_t v11 = v22;
      int v4 = v21;
      uint64_t v9 = v124;
    }
  }
  BOOL v126 = v17;
  unint64_t v127 = v19;
  unint64_t v26 = *(llvm::GlobalValue **)(a1[8] + 5288);
  if (v26)
  {
    int v27 = *((_DWORD *)v26 + 8);
    *((_DWORD *)v26 + 8) = v27 & 0xFFFFFFF0;
    int v120 = v27 & 0xF;
    if ((v27 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v26) & 1) == 0) {
      *((_DWORD *)v26 + 8) |= 0x4000u;
    }
  }
  uint64_t v28 = a1[4];
  uint64_t v29 = *(unsigned int *)(v28 + 8);
  if (v29)
  {
    uint64_t v114 = v15;
    int v115 = v4;
    uint64_t v116 = v13;
    int v119 = v2;
    uint64_t v125 = v9;
    uint64_t v30 = a1[8];
    if (a2)
    {
      unint64_t v129 = a1;
      uint64_t v31 = v30 + 25232;
      int v32 = *(uint64_t **)v28;
      uint64_t v33 = 8 * v29;
      do
      {
        uint64_t v34 = *v32++;
        sub_1CC98364C(v31, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC9837B4, (uint64_t)&v129, v34);
        v33 -= 8;
      }
      while (v33);
      uint64_t v35 = a1[4];
      uint64_t v36 = *(unsigned int *)(v35 + 8);
      uint64_t v30 = a1[8];
      uint64_t v37 = v30 + 28880;
      unint64_t v130 = (void *)(v30 + 28880);
      uint64_t v131 = (uint64_t)a1;
      if (v36)
      {
        unsigned int v38 = *(uint64_t **)v35;
        uint64_t v39 = 8 * v36;
        do
        {
          uint64_t v40 = *v38++;
          sub_1CC98364C(v37, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC991280, (uint64_t)&v130, v40);
          v39 -= 8;
        }
        while (v39);
        uint64_t v30 = a1[8];
        uint64_t v35 = a1[4];
      }
      uint64_t v41 = v30 + 28120;
      unint64_t v130 = (void *)(v30 + 28120);
      uint64_t v131 = (uint64_t)a1;
      uint64_t v42 = *(unsigned int *)(v35 + 8);
      if (v42)
      {
        uint64_t v43 = *(uint64_t **)v35;
        uint64_t v44 = 8 * v42;
        do
        {
          uint64_t v45 = *v43++;
          sub_1CC98364C(v41, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC991280, (uint64_t)&v130, v45);
          v44 -= 8;
        }
        while (v44);
        uint64_t v30 = a1[8];
        uint64_t v35 = a1[4];
      }
      uint64_t v46 = v30 + 27968;
      unint64_t v130 = (void *)(v30 + 27968);
      uint64_t v131 = (uint64_t)a1;
      uint64_t v47 = *(unsigned int *)(v35 + 8);
      if (v47)
      {
        char v48 = *(uint64_t **)v35;
        uint64_t v49 = 8 * v47;
        do
        {
          uint64_t v50 = *v48++;
          sub_1CC98364C(v46, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC991280, (uint64_t)&v130, v50);
          v49 -= 8;
        }
        while (v49);
        uint64_t v30 = a1[8];
        uint64_t v35 = a1[4];
      }
      uint64_t v51 = v30 + 5016;
      unint64_t v130 = (void *)(v30 + 5016);
      uint64_t v131 = (uint64_t)a1;
      uint64_t v52 = *(unsigned int *)(v35 + 8);
      if (v52)
      {
        uint64_t v53 = *(uint64_t **)v35;
        uint64_t v54 = 8 * v52;
        do
        {
          uint64_t v55 = *v53++;
          sub_1CC98364C(v51, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC991280, (uint64_t)&v130, v55);
          v54 -= 8;
        }
        while (v54);
        uint64_t v30 = a1[8];
        uint64_t v35 = a1[4];
      }
      uint64_t v56 = v30 + 4864;
      unint64_t v130 = (void *)(v30 + 4864);
      uint64_t v131 = (uint64_t)a1;
      uint64_t v57 = *(unsigned int *)(v35 + 8);
      if (v57)
      {
        unsigned int v58 = *(uint64_t **)v35;
        uint64_t v59 = 8 * v57;
        do
        {
          uint64_t v60 = *v58++;
          sub_1CC98364C(v56, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC991280, (uint64_t)&v130, v60);
          v59 -= 8;
        }
        while (v59);
        uint64_t v30 = a1[8];
      }
    }
    int v117 = v3;
    uint64_t v118 = v11;
    for (uint64_t i = 0; i != 4; ++i)
    {
      unint64_t v62 = (void *)(v30 + 152 * *(int *)(v30 + 72 * i + 29268) + 3040);
      unint64_t v130 = v62;
      uint64_t v131 = (uint64_t)a1;
      uint64_t v63 = a1[4];
      uint64_t v64 = *(unsigned int *)(v63 + 8);
      if (v64)
      {
        int v65 = *(uint64_t **)v63;
        uint64_t v66 = 8 * v64;
        do
        {
          uint64_t v67 = *v65++;
          sub_1CC98364C((uint64_t)v62, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC99330C, (uint64_t)&v130, v67);
          v66 -= 8;
        }
        while (v66);
        uint64_t v30 = a1[8];
      }
    }
    unint64_t v129 = a1;
    if (!byte_1EBCE1C98)
    {
      uint64_t v68 = a1[4];
      uint64_t v69 = *(unsigned int *)(v68 + 8);
      if (v69)
      {
        uint64_t v70 = v30 + 27208;
        int v71 = *(uint64_t **)v68;
        uint64_t v72 = 8 * v69;
        do
        {
          uint64_t v73 = *v71++;
          sub_1CC98364C(v70, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC995814, (uint64_t)&v129, v73);
          v72 -= 8;
        }
        while (v72);
      }
    }
    size_t v74 = (llvm::Module *)a1[3];
    unint64_t v130 = v132;
    uint64_t v131 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v74, (uint64_t)&v130);
    if (v131)
    {
      unint64_t v75 = (uint64_t *)((char *)v130 + 16);
      uint64_t v76 = 24 * v131;
      while (1)
      {
        uint64_t v77 = *(void **)(*(v75 - 1) + 8);
        if (*v77 == 13)
        {
          uint64_t v78 = v77[3];
          uint64_t v79 = *(void *)((char *)v77 + 29);
          if (v78 == 0x642D706D6E65706FLL && v79 == 0x6563697665642D70) {
            break;
          }
        }
        v75 += 3;
        v76 -= 24;
        if (!v76) {
          goto LABEL_78;
        }
      }
      uint64_t v81 = *v75;
    }
    else
    {
LABEL_78:
      uint64_t v81 = 0;
    }
    if (v130 == v132)
    {
      if (v81) {
        goto LABEL_81;
      }
    }
    else
    {
      free(v130);
      if (v81)
      {
LABEL_81:
        uint64_t v82 = a1[4];
        uint64_t v83 = *(unsigned int *)(v82 + 8);
        if (v83)
        {
          uint64_t v84 = *(uint64_t **)v82;
          uint64_t v85 = *(void *)v82 + 8 * v83;
          do
          {
            uint64_t v86 = *v84;
            if (*v84) {
              BOOL v87 = *(unsigned char *)(*v84 + 16) == 3;
            }
            else {
              BOOL v87 = 0;
            }
            if (v87)
            {
              if ((*(_DWORD *)(v86 + 20) & 0x7FFFFFF) != 0) {
                goto LABEL_92;
              }
            }
            else if (*(unsigned char *)(*v84 + 16) || *(void *)(v86 + 72) != v86 + 72 || (*(unsigned char *)(v86 + 34) & 0x80) != 0)
            {
LABEL_92:
              sub_1CC967EF0(a1[9], *v84, 0, 0, 2);
              if (!byte_1EBCE1C98) {
                sub_1CC8B9784(a1[9], v86, 0, 0, 2, 0, 1);
              }
              uint64_t v88 = v86 + 72;
              for (uint64_t j = *(void *)(v86 + 80); j != v88; uint64_t j = *(void *)(j + 8))
              {
                uint64_t v90 = j - 24;
                if (!j) {
                  uint64_t v90 = 0;
                }
                uint64_t v91 = *(void *)(v90 + 48);
                if (v91 != v90 + 40)
                {
                  while (1)
                  {
                    uint64_t v92 = v91 ? (unsigned __int8 *)(v91 - 24) : 0;
                    int v93 = v92[16];
                    if (v91 && v93 == 60)
                    {
                      BOOL v128 = 0;
                      uint64_t v94 = (llvm::Attributor *)a1[9];
                      unint64_t v130 = v92;
                      uint64_t v131 = 0;
                      llvm::Attributor::getAssumedSimplified(v94, (const llvm::IRPosition *)&v130, 0, &v128);
                    }
                    else if (v91 && v93 == 61)
                    {
                      sub_1CC8AC178(a1[9], (uint64_t)v92, 0, 0, 2, 0, 1);
                    }
                    uint64_t v91 = *(void *)(v91 + 8);
                    uint64_t v95 = j - 24;
                    if (!j) {
                      uint64_t v95 = 0;
                    }
                    if (v91 == v95 + 40) {
                      break;
                    }
LABEL_116:
                    if (j == v88) {
                      goto LABEL_117;
                    }
                  }
                  while (1)
                  {
                    uint64_t j = *(void *)(j + 8);
                    if (j == v88) {
                      goto LABEL_117;
                    }
                    uint64_t v96 = j - 24;
                    if (!j) {
                      uint64_t v96 = 0;
                    }
                    uint64_t v91 = *(void *)(v96 + 48);
                    if (v91 != v96 + 40) {
                      goto LABEL_116;
                    }
                  }
                }
              }
            }
LABEL_117:
            ++v84;
          }
          while (v84 != (uint64_t *)v85);
        }
      }
    }
    uint64_t v9 = v125;
    int v2 = v119;
    uint64_t v11 = v118;
    int v3 = v117;
    int v13 = v116;
    int v4 = v115;
    uint64_t v15 = v114;
  }
  BOOL v5 = llvm::Attributor::run((llvm::Attributor *)a1[9]) == 0;
  unsigned int v97 = v127;
  if (!v26) {
    goto LABEL_124;
  }
  int v98 = *((_DWORD *)v26 + 8);
  if ((v120 - 7) < 2) {
    v98 &= 0xFFFFFFCF;
  }
  unsigned int v99 = v98 & 0xFFFFFFF0 | v120 & 0xF;
  *((_DWORD *)v26 + 8) = v99;
  if ((v120 & 0xFu) - 7 < 2) {
    goto LABEL_161;
  }
  if ((v98 & 0x30) != 0)
  {
    char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v26);
    unsigned int v97 = v127;
    if ((hasExternalWeakLinkage & 1) == 0)
    {
      unsigned int v99 = *((_DWORD *)v26 + 8);
LABEL_161:
      *((_DWORD *)v26 + 8) = v99 | 0x4000;
    }
  }
LABEL_124:
  if (!v97) {
    goto LABEL_129;
  }
  int v100 = *((_DWORD *)v97 + 8);
  if ((v121 - 7) < 2) {
    v100 &= 0xFFFFFFCF;
  }
  unsigned int v101 = v100 & 0xFFFFFFF0 | v121 & 0xF;
  *((_DWORD *)v97 + 8) = v101;
  if ((v121 & 0xFu) - 7 < 2) {
    goto LABEL_164;
  }
  if ((v100 & 0x30) != 0)
  {
    char v113 = llvm::GlobalValue::hasExternalWeakLinkage(v97);
    unsigned int v97 = v127;
    if ((v113 & 1) == 0)
    {
      unsigned int v101 = *((_DWORD *)v127 + 8);
LABEL_164:
      *((_DWORD *)v97 + 8) = v101 | 0x4000;
    }
  }
LABEL_129:
  if (!v126) {
    goto LABEL_134;
  }
  int v102 = *((_DWORD *)v126 + 8);
  if ((v122 - 7) < 2) {
    v102 &= 0xFFFFFFCF;
  }
  unsigned int v103 = v102 & 0xFFFFFFF0 | v122 & 0xF;
  *((_DWORD *)v126 + 8) = v103;
  if ((v122 & 0xFu) - 7 < 2) {
    goto LABEL_167;
  }
  if ((v102 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v126) & 1) == 0)
  {
    unsigned int v103 = *((_DWORD *)v126 + 8);
LABEL_167:
    *((_DWORD *)v126 + 8) = v103 | 0x4000;
  }
LABEL_134:
  if (!v15) {
    goto LABEL_139;
  }
  int v104 = *((_DWORD *)v15 + 8);
  if ((v123 - 7) < 2) {
    v104 &= 0xFFFFFFCF;
  }
  unsigned int v105 = v104 & 0xFFFFFFF0 | v123 & 0xF;
  *((_DWORD *)v15 + 8) = v105;
  if ((v123 & 0xFu) - 7 < 2) {
    goto LABEL_170;
  }
  if ((v104 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v15) & 1) == 0)
  {
    unsigned int v105 = *((_DWORD *)v15 + 8);
LABEL_170:
    *((_DWORD *)v15 + 8) = v105 | 0x4000;
  }
LABEL_139:
  if (!v13) {
    goto LABEL_144;
  }
  int v106 = *((_DWORD *)v13 + 8);
  if ((v4 - 7) < 2) {
    v106 &= 0xFFFFFFCF;
  }
  unsigned int v107 = v106 & 0xFFFFFFF0 | v4 & 0xF;
  *((_DWORD *)v13 + 8) = v107;
  if ((v4 & 0xFu) - 7 < 2) {
    goto LABEL_173;
  }
  if ((v106 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v13) & 1) == 0)
  {
    unsigned int v107 = *((_DWORD *)v13 + 8);
LABEL_173:
    *((_DWORD *)v13 + 8) = v107 | 0x4000;
  }
LABEL_144:
  if (!v11) {
    goto LABEL_149;
  }
  int v108 = *((_DWORD *)v11 + 8);
  if ((v3 - 7) < 2) {
    v108 &= 0xFFFFFFCF;
  }
  unsigned int v109 = v108 & 0xFFFFFFF0 | v3 & 0xF;
  *((_DWORD *)v11 + 8) = v109;
  if ((v3 & 0xFu) - 7 < 2) {
    goto LABEL_176;
  }
  if ((v108 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v11) & 1) == 0)
  {
    unsigned int v109 = *((_DWORD *)v11 + 8);
LABEL_176:
    *((_DWORD *)v11 + 8) = v109 | 0x4000;
  }
LABEL_149:
  if (!v9) {
    return v5;
  }
  int v110 = *((_DWORD *)v9 + 8);
  if ((v2 - 7) < 2) {
    v110 &= 0xFFFFFFCF;
  }
  unsigned int v111 = v110 & 0xFFFFFFF0 | v2 & 0xF;
  *((_DWORD *)v9 + 8) = v111;
  if ((v2 & 0xFu) - 7 < 2)
  {
LABEL_156:
    *((_DWORD *)v9 + 8) = v111 | 0x4000;
    return v5;
  }
  if ((v110 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v9) & 1) == 0)
  {
    unsigned int v111 = *((_DWORD *)v9 + 8);
    goto LABEL_156;
  }
  return v5;
}

uint64_t sub_1CC9833E4(uint64_t a1)
{
  v28[16] = *MEMORY[0x1E4F143B8];
  v25[0] = 1;
  uint64_t v2 = 1;
  int64x2_t v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v25[v2] = v3;
    v2 += 2;
  }
  while (v2 != 17);
  unint64_t v26 = v28;
  uint64_t v27 = 0x1000000000;
  v24[0] = v25;
  v24[1] = a1;
  v23[0] = v24;
  v23[1] = v25;
  uint64_t v4 = *(void *)(a1 + 64) + 3648;
  uint64_t v5 = *(void *)(a1 + 32);
  v22[0] = v4;
  v22[1] = v23;
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6)
  {
    BOOL v7 = *(uint64_t **)v5;
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      sub_1CC98364C(v4, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC997DAC, (uint64_t)v22, v9);
      v8 -= 8;
    }
    while (v8);
    if (v27)
    {
      unint64_t v10 = 0;
      do
        sub_1CC997B84((uint64_t)v23, *(void *)(*((void *)v26 + v10++) + 8));
      while (v10 < v27);
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(unsigned int *)(v11 + 8);
  if (v12)
  {
    int v13 = 0;
    int v14 = *(uint64_t **)v11;
    uint64_t v15 = *(void *)v11 + 8 * v12;
    while (1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *v14;
      do
        v13 |= sub_1CC9975EC(a1, v17, *(void *)(a1 + 64) + 152 * dword_1CFB274A4[v16++] + 3040, 0);
      while (v16 != 16);
      if ((*(_WORD *)(v17 + 18) & 1) == 0) {
        break;
      }
      llvm::Function::BuildLazyArguments((llvm::Function *)v17);
      uint64_t v18 = *(void *)(v17 + 88);
      if ((*(_WORD *)(v17 + 18) & 1) == 0) {
        goto LABEL_15;
      }
      llvm::Function::BuildLazyArguments((llvm::Function *)v17);
      uint64_t v19 = *(void *)(v17 + 88);
LABEL_16:
      uint64_t v20 = v19 + 40 * *(void *)(v17 + 96);
      while (v18 != v20)
      {
        if (sub_1CD5297D8((uint64_t)v25, v18, v24)) {
          goto LABEL_21;
        }
        v18 += 40;
      }
      uint64_t v18 = 0;
LABEL_21:
      v13 |= sub_1CC9975EC(a1, v17, *(void *)(a1 + 64) + 3648, v18);
      if (++v14 == (uint64_t *)v15) {
        goto LABEL_26;
      }
    }
    uint64_t v18 = *(void *)(v17 + 88);
LABEL_15:
    uint64_t v19 = v18;
    goto LABEL_16;
  }
  LOBYTE(v13) = 0;
LABEL_26:
  if (v26 != v28) {
    free(v26);
  }
  if ((v25[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v25[1], 8);
  }
  return v13 & 1;
}

void sub_1CC98364C(uint64_t a1, unsigned int (*a2)(uint64_t, void, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0x800000000;
  uint64_t v7 = sub_1CC9828D8(a1, a4);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 8);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)v7;
    uint64_t v12 = 8 * v9;
    do
    {
      if (a2(a3, *(void *)(v11 + 8 * v10), a4))
      {
        if (v15 >= (unint64_t)HIDWORD(v15)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)&v16[4 * v15] = v10;
        LODWORD(v15) = v15 + 1;
      }
      ++v10;
      v12 -= 8;
    }
    while (v12);
    LODWORD(v9) = *(_DWORD *)(v8 + 8);
  }
  if (v15)
  {
    int v13 = v15 - 1;
    uint64_t v14 = 4 * v15 - 4;
    do
    {
      *(void *)(*(void *)v8 + 8 * *(unsigned int *)&v16[v14]) = *(void *)(*(void *)v8
                                                                                + 8 * v9
                                                                                - 8);
      LODWORD(v9) = v9 - 1;
      *(_DWORD *)(v8 + 8) = v9;
      --v13;
      v14 -= 4;
    }
    while (v13 != -1);
  }
}

uint64_t sub_1CC9837B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

llvm::AbstractAttribute *sub_1CC9837EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (byte_1EBD07860) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = 0;
  }
  *(void *)&long long v59 = a2;
  *((void *)&v59 + 1) = v10;
  uint64_t v11 = (llvm::AbstractAttribute *)sub_1CC983F48(a1, &v59, a4, a5, 1);
  if (v11) {
    return v11;
  }
  int v13 = sub_1CD647DEC(&v59);
  if (v13 == 4)
  {
    uint64_t v15 = *(void *)(a1 + 24);
    *(void *)(v15 + 80) += 456;
    if (((*(void *)v15 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v15 + 456 > *(void *)(v15 + 8) - *(void *)v15)
    {
      unsigned int v54 = *(_DWORD *)(v15 + 24) >> 7;
      if (v54 >= 0x1E) {
        LOBYTE(v54) = 30;
      }
      uint64_t v55 = 4096 << v54;
      uint64_t v11 = (llvm::AbstractAttribute *)operator new(4096 << v54, (std::align_val_t)8uLL);
      unsigned int v56 = *(_DWORD *)(v15 + 24);
      if (v56 >= *(_DWORD *)(v15 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v15 + 16) + 8 * v56) = v11;
      ++*(_DWORD *)(v15 + 24);
      *(void *)(v15 + 8) = (char *)v11 + v55;
    }
    else
    {
      uint64_t v11 = (llvm::AbstractAttribute *)((*(void *)v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *(void *)uint64_t v15 = (char *)v11 + 456;
    sub_1CC984098((uint64_t)v11, &v59);
    *(void *)uint64_t v11 = &unk_1F2629D20;
    *((void *)v11 + 4) = &unk_1F2629DA0;
    *((void *)v11 + 49) = (char *)v11 + 424;
    *((void *)v11 + 50) = (char *)v11 + 424;
    *((void *)v11 + 51) = 4;
    *((_DWORD *)v11 + 104) = 0;
  }
  else if (v13 == 5)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    *(void *)(v14 + 80) += 392;
    if (((*(void *)v14 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v14 + 392 > *(void *)(v14 + 8) - *(void *)v14)
    {
      unsigned int v51 = *(_DWORD *)(v14 + 24) >> 7;
      if (v51 >= 0x1E) {
        LOBYTE(v51) = 30;
      }
      uint64_t v52 = 4096 << v51;
      uint64_t v11 = (llvm::AbstractAttribute *)operator new(4096 << v51, (std::align_val_t)8uLL);
      unsigned int v53 = *(_DWORD *)(v14 + 24);
      if (v53 >= *(_DWORD *)(v14 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v14 + 16) + 8 * v53) = v11;
      ++*(_DWORD *)(v14 + 24);
      *(void *)(v14 + 8) = (char *)v11 + v52;
    }
    else
    {
      uint64_t v11 = (llvm::AbstractAttribute *)((*(void *)v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *(void *)uint64_t v14 = (char *)v11 + 392;
    sub_1CC984098((uint64_t)v11, &v59);
    *(void *)uint64_t v11 = &unk_1F26298A8;
    *((void *)v11 + 4) = &unk_1F2629928;
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::string __p = &unk_1CFB274A0;
  long long v61 = *((_OWORD *)v11 + 1);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&__p)[3] = (uint64_t)v11;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), (uint64_t)v11);
  }
  uint64_t v16 = *(uint64_t **)(a1 + 5480);
  if (v16)
  {
    std::string __p = &unk_1CFB274A0;
    v57[0] = 0;
    int v17 = sub_1CD420258(v16, &__p, v57) ^ 1;
  }
  else
  {
    int v17 = 0;
  }
  uint64_t v18 = v59 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v59 & 3) == 0) {
    uint64_t v18 = *(void *)(v18 + 24);
  }
  unsigned int v19 = *(unsigned __int8 *)(v18 + 16);
  if (!*(unsigned char *)(v18 + 16)) {
    goto LABEL_27;
  }
  if (v19 == 21)
  {
    uint64_t v20 = (uint64_t *)(v18 + 24);
  }
  else
  {
    if (v19 < 0x1C)
    {
      uint64_t v18 = 0;
      goto LABEL_34;
    }
    uint64_t v20 = (uint64_t *)(*(void *)(v18 + 40) + 56);
  }
  uint64_t v18 = *v20;
  if (!*v20)
  {
LABEL_34:
    char v23 = 1;
    goto LABEL_59;
  }
LABEL_27:
  uint64_t v21 = *(void *)(v18 + 112);
  if (v21 && ((*(unsigned char *)(v21 + 14) & 2) != 0 || (*(unsigned char *)(v21 + 17) & 8) != 0))
  {
    BOOL v22 = 1;
  }
  else if (*(unsigned char *)(a1 + 5464))
  {
    BOOL v22 = 0;
  }
  else
  {
    int v24 = *(uint64_t **)(a1 + 88);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    if (v25 == *v24)
    {
      uint64_t v27 = *((unsigned int *)v24 + 5);
      uint64_t v28 = (void *)(v25 + 8 * v27);
      if (v27)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 8 * v27;
        while (*(void *)(v25 + v29) != v18)
        {
          v29 += 8;
          if (v30 == v29) {
            goto LABEL_54;
          }
        }
        uint64_t v28 = (void *)(v25 + v29);
      }
LABEL_54:
      uint64_t v26 = v24[1];
    }
    else
    {
      uint64_t v31 = *((unsigned int *)v24 + 4);
      int v32 = v31 - 1;
      unsigned int v33 = (v31 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      uint64_t v28 = (void *)(v25 + 8 * v33);
      uint64_t v34 = *v28;
      if (*v28 == -1)
      {
        uint64_t v35 = 0;
LABEL_97:
        if (v35) {
          uint64_t v28 = v35;
        }
        if (*v28 != v18) {
          uint64_t v28 = (void *)(v25 + 8 * v31);
        }
      }
      else
      {
        uint64_t v35 = 0;
        int v36 = 1;
        while (v34 != v18)
        {
          if (v35) {
            BOOL v37 = 0;
          }
          else {
            BOOL v37 = v34 == -2;
          }
          if (v37) {
            uint64_t v35 = v28;
          }
          unsigned int v38 = v33 + v36++;
          unsigned int v33 = v38 & v32;
          uint64_t v28 = (void *)(v25 + 8 * (v38 & v32));
          uint64_t v34 = *v28;
          if (*v28 == -1) {
            goto LABEL_97;
          }
        }
      }
    }
    BOOL v37 = v25 == v26;
    uint64_t v39 = 16;
    if (v37) {
      uint64_t v39 = 20;
    }
    BOOL v22 = v28 == (void *)(v25 + 8 * *(unsigned int *)((char *)v24 + v39));
  }
  char v23 = 0;
  LOBYTE(v17) = (v22 | v17) != 0;
LABEL_59:
  if ((v17 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength) {
    goto LABEL_86;
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(void *)v11 + 72))(v57, v11);
  if (v58 >= 0) {
    size_t v40 = v58 & 0x7F;
  }
  else {
    size_t v40 = (size_t)v57[1];
  }
  p_p = &__p;
  sub_1CB907098((uint64_t)&__p, v40 + 12);
  if (v61 < 0) {
    p_p = __p;
  }
  if (v40)
  {
    if (v58 >= 0) {
      uint64_t v42 = v57;
    }
    else {
      uint64_t v42 = (void **)v57[0];
    }
    memmove(p_p, v42, v40);
  }
  strcpy((char *)p_p + v40, "::initialize");
  uint64_t v43 = (uint64_t *)off_1EC7DFC00();
  if (*v43)
  {
    if (v61 >= 0) {
      uint64_t v44 = &__p;
    }
    else {
      uint64_t v44 = __p;
    }
    if (v61 >= 0) {
      uint64_t v45 = HIBYTE(v61) & 0x7F;
    }
    else {
      uint64_t v45 = v61;
    }
    llvm::timeTraceProfilerBegin((uint64_t)v44, v45, (uint64_t)"", 0);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(__p);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(void *)v11 + 24))(v11, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v43)
  {
    sub_1CD84B62C(*v43);
    if (v23) {
      goto LABEL_85;
    }
  }
  else if (v23)
  {
    goto LABEL_85;
  }
  uint64_t v49 = *(uint64_t **)(a1 + 80);
  std::string __p = (void *)v18;
  v57[0] = 0;
  if ((sub_1CD420258(v49, &__p, v57) & 1) == 0)
  {
    uint64_t v50 = *(uint64_t **)(a1 + 80);
    std::string __p = (void *)sub_1CD648A0C((llvm::IRPosition *)&v59);
    v57[0] = 0;
    if ((sub_1CD420258(v50, &__p, v57) & 1) == 0) {
      goto LABEL_86;
    }
  }
LABEL_85:
  int v46 = *(_DWORD *)(a1 + 4368);
  if (v46 == 2)
  {
LABEL_86:
    uint64_t v47 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v11 + 40))(v11);
    (*(void (**)(uint64_t))(*(void *)v47 + 40))(v47);
    return v11;
  }
  if (a6)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v11);
    *(_DWORD *)(a1 + 4368) = v46;
  }
  if (a4)
  {
    uint64_t v48 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v11 + 40))(v11);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v48 + 16))(v48)) {
      llvm::Attributor::recordDependence(a1, (uint64_t)v11, a4, a5);
    }
  }
  return v11;
}

uint64_t sub_1CC983F48(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  uint64_t v14 = &unk_1CFB274A0;
  long long v15 = v9;
  uint64_t v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if (a5) {
        return v10;
      }
    }
    else if (a5)
    {
      return v10;
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
      return 0;
    }
  }
  return v10;
}

double sub_1CC984098(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 16) = *a2;
  *(void *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(unsigned char *)(a1 + 57) = 1;
  *(void *)(a1 + 48) = &unk_1F2629A68;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 121) = 1;
  *(void *)(a1 + 112) = &unk_1F2629AC8;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 185) = 1;
  *(void *)(a1 + 176) = &unk_1F2629B28;
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 241) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 273) = 1;
  *(void *)(a1 + 264) = &unk_1F2629A68;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 337) = 1;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = &unk_1F2629B88;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)a1 = &unk_1F2629968;
  *(void *)(a1 + 32) = &unk_1F26299E8;
  return result;
}

void *sub_1CC98423C(void *a1)
{
  a1[4] = &unk_1F2629A28;
  a1[41] = &unk_1F2629B88;
  sub_1CD6762B4(a1 + 43);
  a1[33] = &unk_1F2629A68;
  uint64_t v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[35], 8);
  a1[22] = &unk_1F2629B28;
  sub_1CD456CB4(a1 + 24);
  a1[14] = &unk_1F2629AC8;
  sub_1CD456CB4(a1 + 16);
  a1[6] = &unk_1F2629A68;
  int64x2_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](a1[8], 8);
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);
  return a1;
}

void sub_1CC98439C(void *a1)
{
  a1[4] = &unk_1F2629A28;
  a1[41] = &unk_1F2629B88;
  sub_1CD6762B4(a1 + 43);
  a1[33] = &unk_1F2629A68;
  uint64_t v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[35], 8);
  a1[22] = &unk_1F2629B28;
  sub_1CD456CB4(a1 + 24);
  a1[14] = &unk_1F2629AC8;
  sub_1CD456CB4(a1 + 16);
  a1[6] = &unk_1F2629A68;
  int64x2_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](a1[8], 8);
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC98451C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  unint64_t v5 = sub_1CD6482F0((llvm::IRPosition *)(a1 + 16));
  uint64_t v6 = (llvm::GlobalValue *)sub_1CD648A0C(v4);
  uint64_t v7 = sub_1CC8B924C(a2, v5, 0, a1, 1, 0, 1);
  if ((*(unsigned int (**)(llvm::AbstractAttribute *, const char *, uint64_t))(*(void *)v7 + 112))(v7, "ompx_spmd_amenable", 18))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a1 + 185);
    (*(void (**)(void))(v8 + 32))();
  }
  int v9 = *(unsigned __int8 *)(v5 + 16);
  uint64_t v10 = (v9 - 33);
  if (v10 > 0x37) {
    return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
  }
  if (((1 << (v9 - 33)) & 0x8000000000041) != 0)
  {
    uint64_t v12 = *(void *)(v5 + 64);
    if (v12 && (*(unsigned char *)(v12 + 17) & 0x30) != 0) {
      return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
    }
    int v13 = *(_DWORD *)(v5 + 20);
    if (v13 < 0 && (unint64_t v28 = v5 - 32 * (v13 & 0x7FFFFFF), v31 = *(void *)(v28 - 8), v29 = v28 - 8, (v30 = v31) != 0))
    {
      uint64_t v32 = -v30;
      while (1)
      {
        unsigned int v33 = *(_DWORD *)(*(void *)(v29 + v32) + 8);
        BOOL v23 = v33 > 7;
        int v34 = (1 << v33) & 0x83;
        if (v23 || v34 == 0) {
          break;
        }
        v32 += 16;
        if (!v32) {
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v5, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(v5, 44) & 1) != 0)
      {
        return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
      }
      int v9 = *(unsigned __int8 *)(v5 + 16);
    }
LABEL_15:
    if (v9 == 84)
    {
      uint64_t v14 = *(void *)(v5 - 32);
      if (v14)
      {
        if (!*(unsigned char *)(v14 + 16)
          && *(void *)(v14 + 24) == *(void *)(v5 + 72)
          && (*(unsigned char *)(v14 + 33) & 0x20) != 0)
        {
          return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
        }
      }
    }
    goto LABEL_22;
  }
  if (v10 != 27)
  {
    if (((1 << (v9 - 33)) & 0x808001D0000010) == 0) {
      return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
    }
    goto LABEL_15;
  }
  if ((*(_WORD *)(v5 + 18) & 0x301) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
  }
LABEL_22:
  uint64_t v15 = *(void *)(a2 + 88);
  unint64_t v36 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)(v15 + 29184), *(_DWORD *)(v15 + 29200), (uint64_t)v6, &v36);
  if (result) {
    BOOL v16 = v36 == *(void *)(v15 + 29184) + 16 * *(unsigned int *)(v15 + 29200);
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    unsigned int v18 = *(_DWORD *)(v36 + 8);
    if (v18 > 0x3E) {
      goto LABEL_34;
    }
    if (((1 << v18) & 0x4000180000003011) != 0) {
      return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
    }
    if (((1 << v18) & 0x3C00000000000000) == 0)
    {
LABEL_34:
      switch(v18)
      {
        case 0x92u:
          *(void *)(a1 + 240) = v5;
          return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
        case 0x93u:
          *(void *)(a1 + 248) = v5;
          return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
        case 0x94u:
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0x99u:
        case 0x9Au:
        case 0x9Eu:
        case 0xA1u:
        case 0xA2u:
        case 0xA3u:
        case 0xA4u:
          goto LABEL_53;
        case 0x95u:
          uint64_t v26 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 192));
          if (*((unsigned char *)v26 + 16)) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = (uint64_t)v26;
          }
          unint64_t v36 = v27;
          if (!v27) {
            goto LABEL_63;
          }
          sub_1CC8B0F60((void *)(a1 + 64), &v36);
          return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
        case 0x9Bu:
        case 0x9Cu:
        case 0x9Du:
        case 0xA5u:
          return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
        case 0x9Fu:
        case 0xA0u:
          return result;
        default:
          uint64_t v19 = v18 - 63;
          if (v19 > 0x20) {
            goto LABEL_53;
          }
          if (((1 << v19) & 0xF) != 0) {
            goto LABEL_44;
          }
          if (((1 << v19) & 0x60000010) != 0) {
            return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
          }
          if (v19 != 32) {
            goto LABEL_53;
          }
          *(unsigned char *)(a1 + 185) = *(unsigned char *)(a1 + 184);
          unint64_t v36 = v5;
          sub_1CC27C13C((void *)(a1 + 192), &v36);
LABEL_63:
          unint64_t v36 = v5;
          *(unsigned char *)(a1 + 121) = *(unsigned char *)(a1 + 120);
          sub_1CC37AF14((void *)(a1 + 128), (uint64_t *)&v36);
          break;
      }
      return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
    }
LABEL_44:
    uint64_t v20 = *(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 64);
    if (v20 && *(unsigned char *)(v20 + 16) == 16)
    {
      uint64_t v21 = (void *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u) {
        uint64_t v21 = (void *)*v21;
      }
      unsigned int v22 = *(_DWORD *)v21 - 33;
      BOOL v23 = v22 > 0x3B;
      uint64_t v24 = (1 << v22) & 0xC00000000000003;
      if (!v23 && v24 != 0) {
        return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
      }
    }
LABEL_53:
    LOBYTE(v17) = *(unsigned char *)(a1 + 184);
LABEL_54:
    *(unsigned char *)(a1 + 185) = v17;
    unint64_t v36 = v5;
    sub_1CC27C13C((void *)(a1 + 192), &v36);
    return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
  }
  if (!v6 || (uint64_t result = sub_1CD64EF44(a2, v6), (result & 1) == 0))
  {
    if (((*(uint64_t (**)(llvm::AbstractAttribute *, const char *, uint64_t))(*(void *)v7 + 112))(v7, "omp_no_openmp", 13) & 1) == 0&& ((*(uint64_t (**)(llvm::AbstractAttribute *, const char *, uint64_t))(*(void *)v7 + 112))(v7, "omp_no_parallelism", 18) & 1) == 0)
    {
      unint64_t v36 = v5;
      *(unsigned char *)(a1 + 121) = *(unsigned char *)(a1 + 120);
      sub_1CC37AF14((void *)(a1 + 128), (uint64_t *)&v36);
    }
    int v17 = *(unsigned __int8 *)(a1 + 184);
    if (*(unsigned __int8 *)(a1 + 185) == v17) {
      return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
    }
    goto LABEL_54;
  }
  return result;
}

uint64_t sub_1CC984A20(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1CC984A28(uint64_t a1)
{
  return a1 + 32;
}

void sub_1CC984A30(uint64_t a1@<X0>, char *a2@<X8>)
{
  if ((*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))())
  {
    int v4 = *(unsigned __int8 *)(a1 + 185);
    if (*(unsigned char *)(a1 + 185)) {
      unint64_t v5 = "SPMD";
    }
    else {
      unint64_t v5 = "generic";
    }
    if (*(unsigned char *)(a1 + 185)) {
      size_t v6 = 4;
    }
    else {
      size_t v6 = 7;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
    memcpy(&__dst, v5, v6);
    *(unsigned char *)((unint64_t)&__dst | v6) = 0;
    int v7 = *(unsigned __int8 *)(a1 + 184);
    if (v4 == v7) {
      std::string::size_type v8 = 6;
    }
    else {
      std::string::size_type v8 = 0;
    }
    char v46 = v8;
    if (v4 == v7) {
      qmemcpy(__s, " [FIX]", 6);
    }
    std::string::size_type v9 = 0x64696C61766E693CLL;
    *(unsigned char *)((unint64_t)__s | v8) = 0;
    uint64_t v10 = std::string::append(&__dst, __s, v8);
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    char v44 = 7;
    strcpy(v43, " #PRs: ");
    uint64_t v12 = std::string::append(&v48, v43, 7uLL);
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (*(unsigned char *)(a1 + 57))
    {
      std::to_string(&v42, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3);
      char v14 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      std::string::size_type v15 = v42.__r_.__value_.__r.__words[0];
    }
    else
    {
      char v14 = 9;
      *((unsigned char *)&v42.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v42, "<invalid>");
      std::string::size_type v15 = 0x64696C61766E693CLL;
    }
    BOOL v16 = v14 < 0;
    if (v14 >= 0) {
      int v17 = &v42;
    }
    else {
      int v17 = (std::string *)v15;
    }
    std::string::size_type v18 = v14 & 0x7F;
    if (v16) {
      std::string::size_type size = v42.__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = v18;
    }
    uint64_t v20 = std::string::append(&v49, (const std::string::value_type *)v17, size);
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    unsigned int v22 = std::string::append(&v50, ", #Unknown PRs: ");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (*(unsigned char *)(a1 + 121))
    {
      std::to_string(&v41, (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
      char v24 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      std::string::size_type v25 = v41.__r_.__value_.__r.__words[0];
    }
    else
    {
      char v24 = 9;
      *((unsigned char *)&v41.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v41, "<invalid>");
      std::string::size_type v25 = 0x64696C61766E693CLL;
    }
    BOOL v26 = v24 < 0;
    if (v24 >= 0) {
      uint64_t v27 = &v41;
    }
    else {
      uint64_t v27 = (std::string *)v25;
    }
    std::string::size_type v28 = v24 & 0x7F;
    if (v26) {
      std::string::size_type v29 = v41.__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v29 = v28;
    }
    uint64_t v30 = std::string::append(&v51, (const std::string::value_type *)v27, v29);
    std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = std::string::append(&v52, ", #Reaching Kernels: ");
    std::string::size_type v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (*(unsigned char *)(a1 + 273))
    {
      std::to_string(&__p, (uint64_t)(*(void *)(a1 + 312) - *(void *)(a1 + 304)) >> 3);
      char v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
    }
    else
    {
      char v34 = 9;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&__p, "<invalid>");
    }
    BOOL v35 = v34 < 0;
    if (v34 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)v9;
    }
    std::string::size_type v37 = v34 & 0x7F;
    if (v35) {
      std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v38 = v37;
    }
    uint64_t v39 = std::string::append(&v53, (const std::string::value_type *)p_p, v38);
    *(std::string *)a2 = *v39;
    v39->__r_.__value_.__r.__words[0] = 0;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (v44 < 0) {
      operator delete(*(void **)v43);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (v46 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    a2[23] = 9;
    strcpy(a2, "<invalid>");
  }
}

void sub_1CC984E74(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "AAKernelInfo");
}

void *sub_1CC984EA0()
{
  return &unk_1CFB274A0;
}

BOOL sub_1CC984EB0(uint64_t a1, uint64_t a2)
{
  int v4 = (llvm::IRPosition *)(a1 + 16);
  unint64_t v5 = sub_1CD648A0C((llvm::IRPosition *)(a1 + 16));
  uint64_t v6 = *(void *)(a2 + 88);
  v25[0] = 0;
  int v7 = sub_1CD40EA84(*(void *)(v6 + 29184), *(_DWORD *)(v6 + 29200), v5, v25);
  uint64_t v8 = v25[0];
  if (v7) {
    BOOL v9 = v25[0] == *(void *)(v6 + 29184) + 16 * *(unsigned int *)(v6 + 29200);
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    sub_1CC985D58((uint64_t)v25, v15);
    unint64_t v16 = sub_1CD6482F0(v4);
    int v17 = sub_1CC8B9784(a2, *(void *)(*(void *)(v16 + 40) + 56), 0, a1, 1, 0, 1);
    std::string::size_type v18 = sub_1CC986268(a2, *(void *)(*(void *)(v16 + 40) + 56), 0, a1, 1);
    int v19 = *(_DWORD *)(v8 + 8);
    if (v19 == 160)
    {
      if (((*(uint64_t (**)(llvm::AbstractAttribute *, unint64_t))(*(void *)v17 + 120))(v17, v16) & 1) != 0
        || ((*(uint64_t (**)(llvm::AbstractAttribute *, unint64_t))(*(void *)v18 + 120))(v18, v16) & 1) != 0)
      {
        goto LABEL_19;
      }
    }
    else if (v19 == 159)
    {
      if (((*(uint64_t (**)(llvm::AbstractAttribute *, unint64_t))(*(void *)v17 + 112))(v17, v16) & 1) != 0
        || ((*(uint64_t (**)(llvm::AbstractAttribute *, unint64_t))(*(void *)v18 + 112))(v18, v16) & 1) != 0)
      {
        goto LABEL_19;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 185) = *(unsigned char *)(a1 + 184);
    }
    unint64_t v24 = v16;
    sub_1CC27C13C((void *)(a1 + 192), &v24);
LABEL_19:
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    BOOL v10 = sub_1CC985C4C((uint64_t)v25, v23);
    v25[0] = &unk_1F2629A28;
    std::string::size_type v33 = &unk_1F2629B88;
    sub_1CD6762B4(v34);
    v30[9] = &unk_1F2629A68;
    if (__p)
    {
      uint64_t v32 = __p;
      operator delete(__p);
    }
    MEMORY[0x1D25D9CD0](v30[11], 8);
    v29[6] = &unk_1F2629B28;
    sub_1CD456CB4(v30);
    std::string::size_type v28 = &unk_1F2629AC8;
    sub_1CD456CB4(v29);
    uint64_t v25[2] = &unk_1F2629A68;
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
    MEMORY[0x1D25D9CD0](v25[4], 8);
    return v10;
  }
  BOOL v10 = 1;
  std::string::size_type v11 = sub_1CC9837EC(a2, v5, 0, a1, 0, 1);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v13 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v11 + 48))(v11);
  if (!sub_1CC985C4C(v12, v13))
  {
    uint64_t v20 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v11 + 48))(v11);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    *(unsigned char *)(v21 + 8) = *(unsigned char *)(v20 + 8);
    *(_WORD *)(v21 + 24) = *(_WORD *)(v20 + 24);
    sub_1CD542C18(v21 + 32, v20 + 32);
    *(_WORD *)(v21 + 88) = *(_WORD *)(v20 + 88);
    sub_1CD542C18(v21 + 96, v20 + 96);
    *(_WORD *)(v21 + 152) = *(_WORD *)(v20 + 152);
    sub_1CD542C18(v21 + 160, v20 + 160);
    long long v22 = *(_OWORD *)(v20 + 208);
    *(unsigned char *)(v21 + 224) = *(unsigned char *)(v20 + 224);
    *(_OWORD *)(v21 + 208) = v22;
    *(_WORD *)(v21 + 240) = *(_WORD *)(v20 + 240);
    sub_1CD542C18(v21 + 248, v20 + 248);
    *(_WORD *)(v21 + 304) = *(_WORD *)(v20 + 304);
    sub_1CD6762F4(v21 + 312, v20 + 312);
    return 0;
  }
  return v10;
}

uint64_t *sub_1CC98537C(void *a1)
{
  *a1 = &unk_1F2629A28;
  a1[37] = &unk_1F2629B88;
  sub_1CD6762B4(a1 + 39);
  a1[29] = &unk_1F2629A68;
  uint64_t v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[31], 8);
  a1[18] = &unk_1F2629B28;
  sub_1CD456CB4(a1 + 20);
  a1[10] = &unk_1F2629AC8;
  sub_1CD456CB4(a1 + 12);
  a1[2] = &unk_1F2629A68;
  int64x2_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](a1[4], 8);
  *(a1 - 4) = &unk_1F2620AA0;

  return sub_1CD64E248(a1 - 3);
}

void sub_1CC9854E4(void *a1)
{
  *a1 = &unk_1F2629A28;
  a1[37] = &unk_1F2629B88;
  sub_1CD6762B4(a1 + 39);
  a1[29] = &unk_1F2629A68;
  uint64_t v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[31], 8);
  a1[18] = &unk_1F2629B28;
  sub_1CD456CB4(a1 + 20);
  a1[10] = &unk_1F2629AC8;
  sub_1CD456CB4(a1 + 12);
  a1[2] = &unk_1F2629A68;
  int64x2_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](a1[4], 8);
  *(a1 - 4) = &unk_1F2620AA0;
  sub_1CD64E248(a1 - 3);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC985664()
{
  return 1;
}

uint64_t sub_1CC98566C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1CC985674(unsigned char *a1)
{
  a1[8] = 1;
  a1[240] = a1[241];
  a1[152] = a1[153];
  a1[24] = a1[25];
  a1[88] = a1[89];
  return 1;
}

uint64_t sub_1CC9856A4(unsigned char *a1)
{
  a1[8] = 1;
  a1[241] = a1[240];
  a1[153] = a1[152];
  a1[25] = a1[24];
  a1[89] = a1[88];
  return 0;
}

void *sub_1CC9856E4(void *a1)
{
  *a1 = &unk_1F2629A28;
  a1[37] = &unk_1F2629B88;
  sub_1CD6762B4(a1 + 39);
  a1[29] = &unk_1F2629A68;
  uint64_t v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[31], 8);
  a1[18] = &unk_1F2629B28;
  sub_1CD456CB4(a1 + 20);
  a1[10] = &unk_1F2629AC8;
  sub_1CD456CB4(a1 + 12);
  a1[2] = &unk_1F2629A68;
  int64x2_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](a1[4], 8);
  return a1;
}

void sub_1CC98581C(void *a1)
{
  *a1 = &unk_1F2629A28;
  a1[37] = &unk_1F2629B88;
  sub_1CD6762B4(a1 + 39);
  a1[29] = &unk_1F2629A68;
  uint64_t v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[31], 8);
  a1[18] = &unk_1F2629B28;
  sub_1CD456CB4(a1 + 20);
  a1[10] = &unk_1F2629AC8;
  sub_1CD456CB4(a1 + 12);
  a1[2] = &unk_1F2629A68;
  int64x2_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](a1[4], 8);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC985974(void *a1)
{
  *a1 = &unk_1F2629A68;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[2], 8);
  return a1;
}

void sub_1CC9859D4(void *a1)
{
  *a1 = &unk_1F2629A68;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[2], 8);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC985A54(void *a1)
{
  *a1 = &unk_1F2629AC8;
  sub_1CD456CB4(a1 + 2);
  return a1;
}

void sub_1CC985A98(void *a1)
{
  *a1 = &unk_1F2629AC8;
  sub_1CD456CB4(a1 + 2);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC985AFC(void *a1)
{
  *a1 = &unk_1F2629B28;
  sub_1CD456CB4(a1 + 2);
  return a1;
}

void sub_1CC985B40(void *a1)
{
  *a1 = &unk_1F2629B28;
  sub_1CD456CB4(a1 + 2);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC985BA4(void *a1)
{
  *a1 = &unk_1F2629B88;
  sub_1CD6762B4(a1 + 2);
  return a1;
}

void sub_1CC985BE8(void *a1)
{
  *a1 = &unk_1F2629B88;
  sub_1CD6762B4(a1 + 2);

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CC985C4C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 153) != 0) != (*(unsigned char *)(a2 + 153) != 0)) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 152) == 0) == (*(unsigned char *)(a2 + 152) != 0)) {
    return 0;
  }
  int v4 = *(const void **)(a1 + 184);
  size_t v5 = *(void *)(a1 + 192) - (void)v4;
  uint64_t v6 = *(const void **)(a2 + 184);
  if (v5 != *(void *)(a2 + 192) - (void)v6) {
    return 0;
  }
  if (memcmp(v4, v6, v5)) {
    return 0;
  }
  if (sub_1CC98603C(a1 + 16, a2 + 16)) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 89) != 0) != (*(unsigned char *)(a2 + 89) != 0)) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 88) == 0) == (*(unsigned char *)(a2 + 88) != 0)) {
    return 0;
  }
  int v7 = *(const void **)(a1 + 120);
  size_t v8 = *(void *)(a1 + 128) - (void)v7;
  BOOL v9 = *(const void **)(a2 + 120);
  return v8 == *(void *)(a2 + 128) - (void)v9 && !memcmp(v7, v9, v8) && !sub_1CC98603C(a1 + 232, a2 + 232);
}

uint64_t sub_1CC985D58(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2629A28;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = &unk_1F26275E0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_1F2629A68;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  sub_1CBFCB9AC(a1 + 32, a2 + 32);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  sub_1CBFCBA2C((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 80) = &unk_1F26275E0;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 80) = &unk_1F2629AC8;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  sub_1CBFCB9AC(a1 + 96, a2 + 96);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  sub_1CBFCBA2C((void *)(a1 + 120), *(const void **)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3);
  *(void *)(a1 + 144) = &unk_1F26275E0;
  __int16 v4 = *(_WORD *)(a2 + 152);
  *(void *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 152) = v4;
  *(void *)(a1 + 144) = &unk_1F2629B28;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  sub_1CBFCB9AC(a1 + 160, a2 + 160);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 184);
  size_t v5 = *(unsigned char **)(a2 + 192);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      abort();
    }
    size_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 184) = v8;
    *(void *)(a1 + 192) = v8;
    BOOL v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 200) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 192) = v9;
  }
  long long v10 = *(_OWORD *)(a2 + 208);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v10;
  *(void *)(a1 + 232) = &unk_1F26275E0;
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(void *)(a1 + 232) = &unk_1F2629A68;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  sub_1CBFCB9AC(a1 + 248, a2 + 248);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  sub_1CBFCBA2C((void *)(a1 + 272), *(const void **)(a2 + 272), *(void *)(a2 + 280), (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 3);
  *(void *)(a1 + 296) = &unk_1F26275E0;
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  *(void *)(a1 + 296) = &unk_1F2629B88;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  sub_1CC9860BC(a1 + 312, a2 + 312);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  sub_1CC34C614((void *)(a1 + 336), *(const void **)(a2 + 336), *(void *)(a2 + 344), *(void *)(a2 + 344) - *(void *)(a2 + 336));
  return a1;
}

BOOL sub_1CC98603C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 9) != 0) != (*(unsigned char *)(a2 + 9) != 0)) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 8) == 0) == (*(unsigned char *)(a2 + 8) != 0)) {
    return 1;
  }
  uint64_t v3 = a1 + 40;
  uint64_t v2 = *(const void **)(a1 + 40);
  size_t v4 = *(void *)(v3 + 8) - (void)v2;
  uint64_t v6 = a2 + 40;
  size_t v5 = *(const void **)(a2 + 40);
  return v4 != *(void *)(v6 + 8) - (void)v5 || memcmp(v2, v5, v4) != 0;
}

size_t sub_1CC9860BC(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1D25D9CD0](*(void *)a1, 1);
  size_t result = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = result;
  if (result)
  {
    size_t v5 = operator new(result, (std::align_val_t)1uLL);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    uint64_t v6 = *(const void **)a2;
    size_t v7 = *(unsigned int *)(a1 + 16);
    return (size_t)memcpy(v5, v6, v7);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

void *sub_1CC986134(void *result, char *__src, char *a3, unint64_t a4)
{
  size_t v7 = result;
  unint64_t v8 = result[2];
  BOOL v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *size_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_23;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_23:
    }
      abort();
    size_t result = operator new(v11);
    BOOL v9 = (char *)result;
    *size_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      size_t result = memcpy(result, __src, v12);
    }
LABEL_21:
    unint64_t v16 = &v9[v12];
    goto LABEL_22;
  }
  uint64_t v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      size_t result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  uint64_t v15 = &__src[v14];
  if (v13 != v9)
  {
    size_t result = memmove((void *)*result, __src, v14);
    BOOL v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    size_t result = memmove(v9, v15, a3 - v15);
  }
  unint64_t v16 = &v9[a3 - v15];
LABEL_22:
  v7[1] = v16;
  return result;
}

llvm::AbstractAttribute *sub_1CC986268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (byte_1EBD07860) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = 0;
  }
  *(void *)&long long v59 = a2;
  *((void *)&v59 + 1) = v8;
  std::string __p = &unk_1CFB274A1;
  BOOL v9 = (uint64_t *)(a1 + 32);
  long long v61 = v59;
  v57[0] = 0;
  if (sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&__p, (uint64_t **)v57))
  {
    uint64_t v10 = (llvm::AbstractAttribute *)*((void *)v57[0] + 3);
    if (v10)
    {
      if (!a4) {
        return v10;
      }
      if (a5 == 2) {
        return v10;
      }
      uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v10 + 40))(*((void *)v57[0] + 3));
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
        return v10;
      }
      uint64_t v22 = a1;
      uint64_t v23 = (uint64_t)v10;
      uint64_t v24 = a4;
      int v25 = 1;
LABEL_34:
      llvm::Attributor::recordDependence(v22, v23, v24, v25);
      return v10;
    }
  }
  if (sub_1CD647DEC(&v59) == 4)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    *(void *)(v13 + 80) += 208;
    if (((*(void *)v13 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v13 + 208 > *(void *)(v13 + 8) - *(void *)v13)
    {
      unsigned int v54 = *(_DWORD *)(v13 + 24) >> 7;
      if (v54 >= 0x1E) {
        LOBYTE(v54) = 30;
      }
      uint64_t v55 = 4096 << v54;
      uint64_t v10 = (llvm::AbstractAttribute *)operator new(4096 << v54, (std::align_val_t)8uLL);
      unsigned int v56 = *(_DWORD *)(v13 + 24);
      if (v56 >= *(_DWORD *)(v13 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v13 + 16) + 8 * v56) = v10;
      ++*(_DWORD *)(v13 + 24);
      *(void *)(v13 + 8) = (char *)v10 + v55;
    }
    else
    {
      uint64_t v10 = (llvm::AbstractAttribute *)((*(void *)v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *(void *)uint64_t v13 = (char *)v10 + 208;
    *((_OWORD *)v10 + 1) = v59;
    *((_WORD *)v10 + 20) = 256;
    *(void *)uint64_t v10 = &unk_1F2629BE8;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 4) = &unk_1F2629C78;
    *((void *)v10 + 6) = 1;
    int64x2_t v14 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(int64x2_t *)((char *)v10 + 56) = v14;
    *(int64x2_t *)((char *)v10 + 72) = v14;
    *((void *)v10 + 11) = (char *)v10 + 104;
    *((void *)v10 + 12) = 0x400000000;
    *((void *)v10 + 17) = (char *)v10 + 168;
    *((void *)v10 + 18) = (char *)v10 + 168;
    *((void *)v10 + 19) = 4;
    *((_DWORD *)v10 + 40) = 0;
    *((_DWORD *)v10 + 50) = 0;
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::string __p = &unk_1CFB274A1;
  long long v61 = *((_OWORD *)v10 + 1);
  sub_1CD64CF70(v9, (uint64_t)&__p)[3] = (uint64_t)v10;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), (uint64_t)v10);
  }
  uint64_t v15 = *(uint64_t **)(a1 + 5480);
  if (v15)
  {
    std::string __p = &unk_1CFB274A1;
    v57[0] = 0;
    int v16 = sub_1CD420258(v15, &__p, v57) ^ 1;
  }
  else
  {
    int v16 = 0;
  }
  unint64_t v17 = v59 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v59 & 3) == 0) {
    unint64_t v17 = *(void *)(v17 + 24);
  }
  unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
  if (!*(unsigned char *)(v17 + 16))
  {
LABEL_27:
    uint64_t v20 = *(void *)(v17 + 112);
    if (v20 && ((*(unsigned char *)(v20 + 14) & 2) != 0 || (*(unsigned char *)(v20 + 17) & 8) != 0))
    {
      BOOL v21 = 1;
    }
    else if (*(unsigned char *)(a1 + 5464))
    {
      BOOL v21 = 0;
    }
    else
    {
      uint64_t v27 = *(uint64_t **)(a1 + 88);
      uint64_t v29 = *v27;
      uint64_t v28 = v27[1];
      if (v28 == *v27)
      {
        uint64_t v30 = *((unsigned int *)v27 + 5);
        std::string::size_type v31 = (void *)(v28 + 8 * v30);
        if (v30)
        {
          uint64_t v32 = 0;
          uint64_t v33 = 8 * v30;
          while (*(void *)(v28 + v32) != v17)
          {
            v32 += 8;
            if (v33 == v32) {
              goto LABEL_57;
            }
          }
          std::string::size_type v31 = (void *)(v28 + v32);
        }
LABEL_57:
        uint64_t v29 = v27[1];
      }
      else
      {
        uint64_t v34 = *((unsigned int *)v27 + 4);
        int v35 = v34 - 1;
        unsigned int v36 = (v34 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        std::string::size_type v31 = (void *)(v28 + 8 * v36);
        uint64_t v37 = *v31;
        if (*v31 == -1)
        {
          std::string::size_type v38 = 0;
LABEL_97:
          if (v38) {
            std::string::size_type v31 = v38;
          }
          if (*v31 != v17) {
            std::string::size_type v31 = (void *)(v28 + 8 * v34);
          }
        }
        else
        {
          std::string::size_type v38 = 0;
          int v39 = 1;
          while (v37 != v17)
          {
            if (v38) {
              BOOL v40 = 0;
            }
            else {
              BOOL v40 = v37 == -2;
            }
            if (v40) {
              std::string::size_type v38 = v31;
            }
            unsigned int v41 = v36 + v39++;
            unsigned int v36 = v41 & v35;
            std::string::size_type v31 = (void *)(v28 + 8 * (v41 & v35));
            uint64_t v37 = *v31;
            if (*v31 == -1) {
              goto LABEL_97;
            }
          }
        }
      }
      BOOL v40 = v28 == v29;
      uint64_t v42 = 16;
      if (v40) {
        uint64_t v42 = 20;
      }
      BOOL v21 = v31 == (void *)(v28 + 8 * *(unsigned int *)((char *)v27 + v42));
    }
    char v26 = 0;
    if (v21 | v16) {
      goto LABEL_88;
    }
    goto LABEL_62;
  }
  if (v18 == 21)
  {
    int v19 = (unint64_t *)(v17 + 24);
  }
  else
  {
    if (v18 < 0x1C)
    {
      unint64_t v17 = 0;
      goto LABEL_36;
    }
    int v19 = (unint64_t *)(*(void *)(v17 + 40) + 56);
  }
  unint64_t v17 = *v19;
  if (*v19) {
    goto LABEL_27;
  }
LABEL_36:
  char v26 = 1;
  if (v16) {
    goto LABEL_88;
  }
LABEL_62:
  if (*(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
  {
LABEL_88:
    uint64_t v50 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(void *)v50 + 40))(v50);
    return v10;
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(void *)v10 + 72))(v57, v10);
  if (v58 >= 0) {
    size_t v43 = v58 & 0x7F;
  }
  else {
    size_t v43 = (size_t)v57[1];
  }
  p_p = &__p;
  sub_1CB907098((uint64_t)&__p, v43 + 12);
  if (v61 < 0) {
    p_p = __p;
  }
  if (v43)
  {
    if (v58 >= 0) {
      uint64_t v45 = v57;
    }
    else {
      uint64_t v45 = (void **)v57[0];
    }
    memmove(p_p, v45, v43);
  }
  strcpy((char *)p_p + v43, "::initialize");
  char v46 = (uint64_t *)off_1EC7DFC00();
  if (*v46)
  {
    if (v61 >= 0) {
      uint64_t v47 = &__p;
    }
    else {
      uint64_t v47 = __p;
    }
    if (v61 >= 0) {
      uint64_t v48 = HIBYTE(v61) & 0x7F;
    }
    else {
      uint64_t v48 = v61;
    }
    llvm::timeTraceProfilerBegin((uint64_t)v47, v48, (uint64_t)"", 0);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(__p);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(void *)v10 + 24))(v10, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v46)
  {
    sub_1CD84B62C(*v46);
    if (v26) {
      goto LABEL_87;
    }
  }
  else if (v26)
  {
    goto LABEL_87;
  }
  std::string v52 = *(uint64_t **)(a1 + 80);
  std::string __p = (void *)v17;
  v57[0] = 0;
  if ((sub_1CD420258(v52, &__p, v57) & 1) == 0)
  {
    std::string v53 = *(uint64_t **)(a1 + 80);
    std::string __p = (void *)sub_1CD648A0C((llvm::IRPosition *)&v59);
    v57[0] = 0;
    if ((sub_1CD420258(v53, &__p, v57) & 1) == 0) {
      goto LABEL_88;
    }
  }
LABEL_87:
  int v49 = *(_DWORD *)(a1 + 4368);
  if (v49 == 2) {
    goto LABEL_88;
  }
  *(_DWORD *)(a1 + 4368) = 1;
  llvm::Attributor::updateAA((llvm::Attributor *)a1, v10);
  *(_DWORD *)(a1 + 4368) = v49;
  if (a4)
  {
    uint64_t v51 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v10 + 40))(v10);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 16))(v51))
    {
      uint64_t v22 = a1;
      uint64_t v23 = (uint64_t)v10;
      uint64_t v24 = a4;
      int v25 = a5;
      goto LABEL_34;
    }
  }
  return v10;
}

uint64_t sub_1CC98697C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2629BE8;
  *(void *)(a1 + 32) = &unk_1F2629C78;
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2 != *(void **)(a1 + 136)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 104)) {
    free(v3);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }
  *(void *)a1 = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1CC986A3C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2629BE8;
  *(void *)(a1 + 32) = &unk_1F2629C78;
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2 != *(void **)(a1 + 136)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 104)) {
    free(v3);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }
  *(void *)a1 = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 + 8));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC986B1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (byte_1EBCE1C98)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 40);
    uint64_t v4 = a1 + 32;
    return v3(v4);
  }
  else
  {
    uint64_t v7 = a2[11];
    v18[0] = &unk_1F2629CD8;
    int v19 = v18;
    uint64_t v8 = *(void *)(*(void *)(v7 + 27328) + 8);
    if (v8)
    {
      do
      {
        uint64_t v9 = *(void *)(v8 + 24);
        unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
        if (v10 >= 0x1C)
        {
          unsigned int v11 = v10 - 33;
          BOOL v12 = v11 > 0x33;
          uint64_t v13 = (1 << v11) & 0x8000000000041;
          if (!v12 && v13 != 0)
          {
            uint64_t v17 = *(void *)(v8 + 24);
            sub_1CD4B43C4(a1 + 48, &v17);
            v16[0] = v9 | 1;
            v16[1] = 0;
            uint64_t v15 = sub_1CD65EF00(a2, v16);
            sub_1CC8F1F2C((unsigned int *)v15 + 4, (uint64_t)v18);
          }
        }
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8);
      uint64_t v7 = a2[11];
    }
    sub_1CC987C0C(a1, v7);
    uint64_t result = (uint64_t)v19;
    if (v19 == v18)
    {
      return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
    }
    else if (v19)
    {
      return (*(uint64_t (**)(void))(*v19 + 40))();
    }
  }
  return result;
}

void sub_1CC986D1C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v6, *(unsigned int *)(a1 + 96));
  uint64_t v3 = std::string::insert(&v6, 0, "[AAHeapToShared] ");
  std::string::size_type v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  size_t v5 = std::string::append(&v7, " malloc calls eligible.");
  *a2 = *v5;
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1CC986DC4(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "AAHeapToShared");
}

void *sub_1CC986DEC()
{
  return &unk_1CFB274A1;
}

uint64_t sub_1CC986DF8(uint64_t a1, void *a2)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 96))
  {
    uint64_t v6 = a2[11];
    long long v106 = sub_1CD6482A0((_DWORD *)(a1 + 16));
    uint64_t v2 = 1;
    uint64_t v7 = sub_1CD652B84((uint64_t)a2, &v106, a1, 1, 0);
    uint64_t v8 = *(unsigned int *)(a1 + 96);
    if (!v8) {
      return v2;
    }
    uint64_t v9 = v7;
    unsigned int v10 = *(uint64_t **)(a1 + 88);
    unsigned int v11 = &v10[v8];
    uint64_t v83 = v11;
    while (1)
    {
      uint64_t v12 = *v10;
      if (!v9 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 112))(v9, *v10) & 1) == 0) {
        break;
      }
LABEL_41:
      if (++v10 == v11) {
        return v2;
      }
    }
    uint64_t v88 = v90;
    uint64_t v89 = 0x400000000;
    uint64_t v13 = *(void *)(v12 + 8);
    if (v13)
    {
      unsigned int v14 = 0;
      do
      {
        uint64_t v15 = *(void *)(v13 + 24);
        unsigned int v16 = *(unsigned __int8 *)(v15 + 16);
        if (v16 >= 0x1C)
        {
          unsigned int v17 = v16 - 33;
          BOOL v18 = v17 > 0x33;
          uint64_t v19 = (1 << v17) & 0x8000000000041;
          if (!v18 && v19 != 0)
          {
            uint64_t v21 = *(void *)(v15 - 32);
            if (!v21 || *(unsigned char *)(v21 + 16) || *(void *)(v21 + 24) != *(void *)(v15 + 72)) {
              uint64_t v21 = 0;
            }
            if (v21 == *(void *)(v6 + 27480))
            {
              if (v14 >= HIDWORD(v89)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v88 + v14) = v15;
              unsigned int v14 = v89 + 1;
              LODWORD(v89) = v89 + 1;
            }
          }
        }
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13);
      if (v14 == 1)
      {
        uint64_t v22 = *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
        uint64_t v23 = (llvm::Type ***)(v22 + 24);
        unsigned int v24 = *(_DWORD *)(v22 + 32);
        int v25 = (llvm::Type **)(v22 + 24);
        unsigned int v11 = v83;
        if (v24 >= 0x41) {
          int v25 = *v23;
        }
        if ((unint64_t)*v25 + *(unsigned int *)(a1 + 200) > dword_1EBCE2418) {
          goto LABEL_39;
        }
        uint64_t v81 = *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
        char v26 = (llvm::Type **)(v22 + 24);
        if (v24 >= 0x41) {
          char v26 = *v23;
        }
        uint64_t v82 = (unint64_t **)(v22 + 24);
        uint64_t v78 = *(llvm::OptimizationRemarkEmitter **)(*(void *)(*(void *)(v12 + 40) + 56) + 40);
        uint64_t v76 = (llvm::ArrayType *)(**(void **)v78 + 1912);
        uint64_t v27 = llvm::ArrayType::get(v76, *v26);
        uint64_t v28 = (char *)operator new(0x78uLL);
        *((_DWORD *)v28 + 13) = *((_DWORD *)v28 + 13) & 0x38000000 | 1;
        uint64_t v29 = (unint64_t *)(v28 + 32);
        *(void *)uint64_t v28 = 0;
        *((void *)v28 + 1) = 0;
        *((void *)v28 + 2) = 0;
        *((void *)v28 + 3) = v28 + 32;
        uint64_t v80 = v28;
        std::string::size_type v31 = llvm::UndefValue::get(v27, v30);
        if ((*(unsigned char *)(v12 + 23) & 0x10) == 0)
        {
          uint64_t v41 = 0;
          uint64_t v42 = &byte_1CFBCE98E;
LABEL_45:
          LOWORD(v108) = 773;
          *(void *)&long long v106 = v42;
          *((void *)&v106 + 1) = v41;
          *(void *)&long long v107 = "_shared";
          llvm::GlobalVariable::GlobalVariable(v29, (uint64_t)v78, v27, 0, 7, (unint64_t)v31, (const char **)&v106, 0, 0, (llvm::Type *)0x100000003, 0);
          char v44 = (llvm::Constant *)llvm::PointerType::get(v76, 0);
          PointerCast = llvm::ConstantExpr::getPointerCast((llvm::ConstantExpr *)v29, v44, v45);
          uint64_t v47 = (uint64_t)a2;
          uint64_t v48 = (uint64_t (*)(void, void))a2[687];
          if (v48)
          {
            uint64_t v79 = (uint64_t ***)v48(a2[688], *(void *)(*(void *)(v12 + 40) + 56));
            uint64_t v49 = *(void *)***v79;
            if (*(void *)(v49 + 128)
              || (*(unsigned int (**)(void))(**(void **)(v49 + 72) + 48))(*(void *)(v49 + 72)))
            {
              uint64_t v77 = PointerCast;
              llvm::OptimizationRemark::OptimizationRemark((uint64_t)v102, a2[689], (uint64_t)"OMP111", 6, v12);
              v84.__r_.__value_.__r.__words[0] = (std::string::size_type)"Replaced globalized variable with ";
              v84.__r_.__value_.__l.__size_ = 34;
              sub_1CC59ADEC((uint64_t *)&v103, (uint64_t)&v84);
              uint64_t v50 = (unint64_t *)v82;
              if (*(_DWORD *)(v81 + 32) >= 0x41u) {
                uint64_t v50 = *v82;
              }
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v84, "SharedMemory", 0xCuLL, *v50);
              uint64_t v51 = sub_1CD3D6290((uint64_t)v102, (long long *)&v84);
              uint64_t v52 = v51;
              std::string v53 = v82;
              if (*(_DWORD *)(v81 + 32) >= 0x41u) {
                std::string v53 = *v82;
              }
              int32x2_t v54 = vdup_n_s32(*v53 == 1);
              v55.i64[0] = v54.u32[0];
              v55.i64[1] = v54.u32[1];
              int8x16_t v56 = (int8x16_t)vdupq_n_s64(7uLL);
              v56.i64[0] = (uint64_t)" bytes ";
              int8x16_t v57 = (int8x16_t)vdupq_n_s64(6uLL);
              v57.i64[0] = (uint64_t)" byte ";
              int8x16_t v87 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v55, 0x3FuLL)), v57, v56);
              sub_1CC59ADEC((uint64_t *)(v51 + 80), (uint64_t)&v87);
              v87.i64[0] = (uint64_t)"of shared memory.";
              v87.i64[1] = 17;
              sub_1CC59ADEC((uint64_t *)(v52 + 80), (uint64_t)&v87);
              int v58 = *(_DWORD *)(v52 + 8);
              BYTE12(v106) = *(unsigned char *)(v52 + 12);
              DWORD2(v106) = v58;
              long long v59 = *(_OWORD *)(v52 + 16);
              uint64_t v108 = *(void *)(v52 + 32);
              long long v107 = v59;
              uint64_t v60 = *(void *)(v52 + 72);
              long long v61 = *(_OWORD *)(v52 + 56);
              long long v109 = *(_OWORD *)(v52 + 40);
              long long v110 = v61;
              uint64_t v111 = v60;
              *(void *)&long long v106 = &unk_1F2616800;
              size_t v112 = v114;
              uint64_t v113 = 0x400000000;
              if (*(_DWORD *)(v52 + 88)) {
                sub_1CD494D68((uint64_t)&v112, v52 + 80);
              }
              uint64_t v62 = *(void *)(v52 + 360);
              uint64_t v115 = *(void *)(v52 + 352);
              uint64_t v116 = v62;
              *(void *)&long long v106 = &unk_1F2616570;
              if (v86 < 0) {
                operator delete(__p);
              }
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v84.__r_.__value_.__l.__data_);
              }
              v84.__r_.__value_.__r.__words[0] = (std::string::size_type)" [";
              v84.__r_.__value_.__l.__size_ = 2;
              sub_1CC59ADEC((uint64_t *)&v112, (uint64_t)&v84);
              v84.__r_.__value_.__r.__words[0] = (std::string::size_type)"OMP111";
              v84.__r_.__value_.__l.__size_ = 6;
              sub_1CC59ADEC((uint64_t *)&v112, (uint64_t)&v84);
              v84.__r_.__value_.__r.__words[0] = (std::string::size_type)"]";
              v84.__r_.__value_.__l.__size_ = 1;
              sub_1CC59ADEC((uint64_t *)&v112, (uint64_t)&v84);
              int v92 = DWORD2(v106);
              char v93 = BYTE12(v106);
              long long v94 = v107;
              uint64_t v95 = v108;
              long long v96 = v109;
              long long v97 = v110;
              uint64_t v98 = v111;
              uint64_t v91 = &unk_1F2616800;
              unsigned int v99 = v101;
              uint64_t v100 = 0x400000000;
              if (v113)
              {
                sub_1CD494D68((uint64_t)&v99, (uint64_t)&v112);
                uint64_t v63 = v113;
              }
              else
              {
                uint64_t v63 = 0;
              }
              v101[32] = v115;
              v101[33] = v116;
              uint64_t v91 = &unk_1F2616570;
              *(void *)&long long v106 = &unk_1F2616800;
              uint64_t v64 = (char *)v112;
              if (v63)
              {
                uint64_t v65 = v63 << 6;
                do
                {
                  uint64_t v66 = (void **)&v64[v65];
                  if (v64[v65 - 17] < 0) {
                    operator delete(*(v66 - 5));
                  }
                  if (*((char *)v66 - 41) < 0) {
                    operator delete(*(v66 - 8));
                  }
                  v65 -= 64;
                }
                while (v65);
                uint64_t v64 = (char *)v112;
              }
              if (v64 != v114) {
                free(v64);
              }
              v102[0] = &unk_1F2616800;
              uint64_t v67 = (char *)v103;
              if (v104)
              {
                unint64_t v68 = (unint64_t)v104 << 6;
                do
                {
                  uint64_t v69 = (void **)&v67[v68];
                  if (v67[v68 - 17] < 0) {
                    operator delete(*(v69 - 5));
                  }
                  if (*((char *)v69 - 41) < 0) {
                    operator delete(*(v69 - 8));
                  }
                  v68 -= 64;
                }
                while (v68);
                uint64_t v67 = (char *)v103;
              }
              if (v67 != (char *)&v105) {
                free(v67);
              }
              llvm::OptimizationRemarkEmitter::emit(v79, (llvm::DiagnosticInfoOptimizationBase *)&v91);
              uint64_t v91 = &unk_1F2616800;
              uint64_t v70 = (char *)v99;
              if (v100)
              {
                unint64_t v71 = (unint64_t)v100 << 6;
                do
                {
                  uint64_t v72 = (void **)&v70[v71];
                  if (v70[v71 - 17] < 0) {
                    operator delete(*(v72 - 5));
                  }
                  if (*((char *)v72 - 41) < 0) {
                    operator delete(*(v72 - 8));
                  }
                  v71 -= 64;
                }
                while (v71);
                uint64_t v70 = (char *)v99;
              }
              if (v70 != (char *)v101) {
                free(v70);
              }
              uint64_t v47 = (uint64_t)a2;
              PointerCast = v77;
            }
          }
          __int16 v73 = sub_1CC63020C(v12);
          int v74 = (v73 << 16) + 0x10000;
          if ((v73 & 0xFF00) == 0) {
            int v74 = 0;
          }
          *((_DWORD *)v80 + 16) = v74 | *((_DWORD *)v80 + 16) & 0xFFC0FFFF;
          sub_1CD65F304(v47, v12, PointerCast, 1);
          sub_1CD65E620(v47, v12);
          sub_1CD65E620(v47, *(void *)v88);
          if (*(_DWORD *)(v81 + 32) >= 0x41u)
          {
            unint64_t v75 = *v82;
            unsigned int v11 = v83;
          }
          else
          {
            unsigned int v11 = v83;
            unint64_t v75 = v82;
          }
          uint64_t v2 = 0;
          *(_DWORD *)(a1 + 200) += *v75;
          goto LABEL_39;
        }
        uint64_t v32 = ***(void ***)v12;
        uint64_t v33 = *(void *)(v32 + 152);
        uint64_t v34 = *(unsigned int *)(v32 + 168);
        if (v34)
        {
          LODWORD(v35) = (v34 - 1) & ((v12 >> 4) ^ (v12 >> 9));
          unsigned int v36 = (uint64_t *)(v33 + 16 * v35);
          uint64_t v37 = *v36;
          if (*v36 == v12)
          {
LABEL_44:
            BOOL v40 = (void *)v36[1];
            uint64_t v43 = *v40;
            uint64_t v42 = (char *)(v40 + 2);
            uint64_t v41 = v43;
            goto LABEL_45;
          }
          int v38 = 1;
          while (v37 != -4096)
          {
            int v39 = v35 + v38++;
            uint64_t v35 = v39 & (v34 - 1);
            uint64_t v37 = *(void *)(v33 + 16 * v35);
            if (v37 == v12)
            {
              unsigned int v36 = (uint64_t *)(v33 + 16 * v35);
              goto LABEL_44;
            }
          }
        }
        unsigned int v36 = (uint64_t *)(v33 + 16 * v34);
        goto LABEL_44;
      }
      unsigned int v11 = v83;
    }
LABEL_39:
    if (v88 != v90) {
      free(v88);
    }
    goto LABEL_41;
  }
  return 1;
}

BOOL sub_1CC98778C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 88);
  unint64_t v5 = sub_1CD6482A0((_DWORD *)(a1 + 16));
  int v6 = *(_DWORD *)(a1 + 96);
  uint64_t v7 = *(void *)(*(void *)(v4 + 27328) + 8);
  if (v7)
  {
    uint64_t v8 = v5;
    do
    {
      uint64_t v9 = *(void *)(v7 + 24);
      unsigned int v10 = sub_1CC967EF0(a2, v8, 0, a1, 0);
      unsigned int v11 = *(unsigned __int8 *)(v9 + 16);
      if (v11 >= 0x1C)
      {
        unsigned int v12 = v11 - 33;
        BOOL v13 = v12 > 0x33;
        uint64_t v14 = (1 << v12) & 0x8000000000041;
        if (!v13 && v14 != 0)
        {
          uint64_t v17 = v9;
          if (*(unsigned char *)(*(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)) + 16) != 16
            || ((*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t))(*(void *)v10 + 112))(v10, v9) & 1) == 0)
          {
            sub_1CD4D5854(a1 + 48, &v17);
          }
        }
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7);
  }
  sub_1CC987C0C(a1, *(void *)(a2 + 88));
  return v6 == *(_DWORD *)(a1 + 96);
}

uint64_t sub_1CC9878C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result) {
    return sub_1CD426E14(a1 + 48, a2, &v5);
  }
  return result;
}

uint64_t sub_1CC987930(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 136);
    uint64_t v5 = *(void *)(a1 + 144);
    if (v5 == v6)
    {
      uint64_t v7 = *(unsigned int *)(a1 + 156);
      uint64_t v8 = (void *)(v5 + 8 * v7);
      if (v7)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8 * v7;
        while (*(void *)(v5 + v9) != a2)
        {
          v9 += 8;
          if (v10 == v9) {
            goto LABEL_20;
          }
        }
        uint64_t v8 = (void *)(v5 + v9);
      }
LABEL_20:
      uint64_t v6 = *(void *)(a1 + 144);
    }
    else
    {
      uint64_t v11 = *(unsigned int *)(a1 + 152);
      int v12 = v11 - 1;
      unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v8 = (void *)(v5 + 8 * v13);
      uint64_t v14 = *v8;
      if (*v8 == -1)
      {
        uint64_t v15 = 0;
LABEL_26:
        if (v15) {
          uint64_t v8 = v15;
        }
        if (*v8 != a2) {
          uint64_t v8 = (void *)(v5 + 8 * v11);
        }
      }
      else
      {
        uint64_t v15 = 0;
        int v16 = 1;
        while (v14 != a2)
        {
          if (v15) {
            BOOL v17 = 0;
          }
          else {
            BOOL v17 = v14 == -2;
          }
          if (v17) {
            uint64_t v15 = v8;
          }
          unsigned int v18 = v13 + v16++;
          unsigned int v13 = v18 & v12;
          uint64_t v8 = (void *)(v5 + 8 * (v18 & v12));
          uint64_t v14 = *v8;
          if (*v8 == -1) {
            goto LABEL_26;
          }
        }
      }
    }
    BOOL v17 = v5 == v6;
    uint64_t v19 = 152;
    if (v17) {
      uint64_t v19 = 156;
    }
    return v8 != (void *)(v5 + 8 * *(unsigned int *)(a1 + v19));
  }
  return result;
}

uint64_t *sub_1CC987A64(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2629BE8;
  *(void *)a1 = &unk_1F2629C78;
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2 != *(void **)(a1 + 104)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3 != (void *)(a1 + 72)) {
    free(v3);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 24), 8);
  }
  *(void *)(a1 - 32) = &unk_1F2620AA0;

  return sub_1CD64E248((uint64_t *)(a1 - 24));
}

void sub_1CC987B2C(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2629BE8;
  *(void *)a1 = &unk_1F2629C78;
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2 != *(void **)(a1 + 104)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3 != (void *)(a1 + 72)) {
    free(v3);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 24), 8);
  }
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 - 24));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC987C0C(uint64_t a1, uint64_t a2)
{
  v39[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(a1 + 136);
  uint64_t v5 = *(void **)(a1 + 144);
  uint64_t v7 = (void **)(a1 + 136);
  if (v5 == v6) {
    goto LABEL_2;
  }
  uint64_t v36 = *(unsigned int *)(a1 + 152);
  if (v36 < 0x21 || 4 * (*(_DWORD *)(a1 + 156) - *(_DWORD *)(a1 + 160)) >= v36)
  {
    memset(v5, 255, 8 * v36);
LABEL_2:
    *(_DWORD *)(a1 + 156) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear(v7);
LABEL_3:
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 88);
    uint64_t v10 = v9 + 8 * v8;
    do
    {
      int v38 = 0;
      uint64_t v11 = *(void *)(*(void *)v9 + 8);
      if (v11)
      {
        unsigned int v12 = 0;
        do
        {
          uint64_t v13 = *(void *)(v11 + 24);
          unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
          if (v14 >= 0x1C)
          {
            unsigned int v15 = v14 - 33;
            BOOL v16 = v15 > 0x33;
            uint64_t v17 = (1 << v15) & 0x8000000000041;
            if (!v16 && v17 != 0)
            {
              uint64_t v19 = *(void *)(v13 - 32);
              if (!v19 || *(unsigned char *)(v19 + 16) || *(void *)(v19 + 24) != *(void *)(v13 + 72)) {
                uint64_t v19 = 0;
              }
              if (v19 == *(void *)(a2 + 27480))
              {
                if (v12 >= 4) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v39[v12] = v13;
                unsigned int v12 = ++v38;
              }
            }
          }
          uint64_t v11 = *(void *)(v11 + 8);
        }
        while (v11);
        if (v12 == 1)
        {
          uint64_t v20 = v39[0];
          uint64_t v21 = *(void *)(a1 + 144);
          uint64_t v22 = *(unsigned int *)(a1 + 156);
          if (v21 != *(void *)(a1 + 136))
          {
            unsigned int v26 = *(_DWORD *)(a1 + 152);
LABEL_34:
            if (3 * v26 <= 4 * ((int)v22 - *(_DWORD *)(a1 + 160)))
            {
              if (v26 >= 0x40) {
                v26 *= 2;
              }
              else {
                unsigned int v26 = 128;
              }
            }
            else if (v26 - v22 >= v26 >> 3)
            {
              goto LABEL_36;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v7, v26);
            unsigned int v26 = *(_DWORD *)(a1 + 152);
            uint64_t v21 = *(void *)(a1 + 144);
LABEL_36:
            unsigned int v27 = v26 - 1;
            unsigned int v28 = (v26 - 1) & ((v20 >> 4) ^ (v20 >> 9));
            uint64_t v29 = (void *)(v21 + 8 * v28);
            uint64_t v30 = *v29;
            if (*v29 == -1)
            {
              std::string::size_type v31 = 0;
LABEL_48:
              if (v31) {
                uint64_t v35 = v31;
              }
              else {
                uint64_t v35 = v29;
              }
              if (*v35 != v20)
              {
                if (*v35 == -2) {
                  --*(_DWORD *)(a1 + 160);
                }
                else {
                  ++*(_DWORD *)(a1 + 156);
                }
                void *v35 = v20;
              }
            }
            else
            {
              std::string::size_type v31 = 0;
              int v32 = 1;
              while (v30 != v20)
              {
                if (v31) {
                  BOOL v33 = 0;
                }
                else {
                  BOOL v33 = v30 == -2;
                }
                if (v33) {
                  std::string::size_type v31 = v29;
                }
                unsigned int v34 = v28 + v32++;
                unsigned int v28 = v34 & v27;
                uint64_t v29 = (void *)(v21 + 8 * (v34 & v27));
                uint64_t v30 = *v29;
                if (*v29 == -1) {
                  goto LABEL_48;
                }
              }
            }
            goto LABEL_55;
          }
          if (v22)
          {
            uint64_t v23 = 0;
            uint64_t v24 = 8 * v22;
            int v25 = *(void **)(a1 + 144);
            while (*v25 != v39[0])
            {
              if (*v25 == -2) {
                uint64_t v23 = v25;
              }
              ++v25;
              v24 -= 8;
              if (!v24)
              {
                if (!v23) {
                  goto LABEL_31;
                }
                *uint64_t v23 = v39[0];
                --*(_DWORD *)(a1 + 160);
                goto LABEL_55;
              }
            }
            goto LABEL_55;
          }
LABEL_31:
          unsigned int v26 = *(_DWORD *)(a1 + 152);
          if (v22 >= v26) {
            goto LABEL_34;
          }
          *(_DWORD *)(a1 + 156) = v22 + 1;
          *(void *)(v21 + 8 * v22) = v20;
        }
      }
LABEL_55:
      v9 += 8;
    }
    while (v9 != v10);
  }
}

void sub_1CC987F50()
{
}

void *sub_1CC987F64()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2629CD8;
  return result;
}

void sub_1CC987F9C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2629CD8;
}

uint64_t sub_1CC987FC4()
{
  return 0;
}

void *sub_1CC987FD0(void *a1)
{
  *a1 = &unk_1F2629D20;
  a1[4] = &unk_1F2629DA0;
  uint64_t v2 = (void *)a1[50];
  if (v2 != (void *)a1[49]) {
    free(v2);
  }
  a1[4] = &unk_1F2629A28;
  a1[41] = &unk_1F2629B88;
  sub_1CD6762B4(a1 + 43);
  a1[33] = &unk_1F2629A68;
  uint64_t v3 = (void *)a1[38];
  if (v3)
  {
    a1[39] = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](a1[35], 8);
  a1[22] = &unk_1F2629B28;
  sub_1CD456CB4(a1 + 24);
  a1[14] = &unk_1F2629AC8;
  sub_1CD456CB4(a1 + 16);
  a1[6] = &unk_1F2629A68;
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  MEMORY[0x1D25D9CD0](a1[8], 8);
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);
  return a1;
}

void sub_1CC98817C(void *a1)
{
  sub_1CC987FD0(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC9881B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[11];
  unint64_t v5 = sub_1CD6482A0((_DWORD *)(a1 + 16));
  unint64_t v32 = v5;
  uint64_t v37 = &v31;
  uint64_t v38 = v4 + 25232;
  int v39 = (uint64_t *)a1;
  sub_1CC98364C(v4 + 25232, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC9902B4, (uint64_t)&v37, v5);
  uint64_t v37 = &v31;
  uint64_t v38 = v4 + 25384;
  int v39 = (uint64_t *)a1;
  sub_1CC98364C(v4 + 25384, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC990368, (uint64_t)&v37, v5);
  if (*(void *)(a1 + 240) && *(void *)(a1 + 248))
  {
    sub_1CC8B0F60((void *)(a1 + 280), &v32);
    *(unsigned char *)(a1 + 256) = 1;
    uint64_t v37 = (char *)&unk_1F2629DE0;
    uint64_t v38 = a1;
    int v39 = a2;
    BOOL v40 = &v37;
    v35[0] = &unk_1F2629E28;
    v35[1] = a1;
    void v35[2] = a2;
    uint64_t v36 = v35;
    v33[0] = &unk_1F2629E70;
    v33[1] = a1;
    v33[2] = a2;
    unsigned int v34 = v33;
    uint64_t v6 = *(void *)(a1 + 240);
    int v7 = *(_DWORD *)(v6 + 20);
    if ((v7 & 0x40000000) != 0) {
      uint64_t v8 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v8 = v6 - 32 * (v7 & 0x7FFFFFF);
    }
    uint64_t v29 = (v8 + 64) | 3;
    uint64_t v30 = 0;
    uint64_t v9 = sub_1CD65EF00(a2, &v29);
    sub_1CC8F1F2C((unsigned int *)v9 + 4, (uint64_t)&v37);
    uint64_t v10 = *(void *)(a1 + 240);
    int v11 = *(_DWORD *)(v10 + 20);
    if ((v11 & 0x40000000) != 0) {
      uint64_t v12 = *(void *)(v10 - 8);
    }
    else {
      uint64_t v12 = v10 - 32 * (v11 & 0x7FFFFFF);
    }
    uint64_t v29 = (v12 + 32) | 3;
    uint64_t v30 = 0;
    uint64_t v13 = sub_1CD65EF00(a2, &v29);
    sub_1CC8F1F2C((unsigned int *)v13 + 4, (uint64_t)v35);
    uint64_t v14 = *(void *)(a1 + 248);
    int v15 = *(_DWORD *)(v14 + 20);
    if ((v15 & 0x40000000) != 0) {
      uint64_t v16 = *(void *)(v14 - 8);
    }
    else {
      uint64_t v16 = v14 - 32 * (v15 & 0x7FFFFFF);
    }
    uint64_t v29 = (v16 + 32) | 3;
    uint64_t v30 = 0;
    uint64_t v17 = sub_1CD65EF00(a2, &v29);
    sub_1CC8F1F2C((unsigned int *)v17 + 4, (uint64_t)v35);
    uint64_t v18 = *(void *)(a1 + 240);
    int v19 = *(_DWORD *)(v18 + 20);
    if ((v19 & 0x40000000) != 0) {
      uint64_t v20 = *(void *)(v18 - 8);
    }
    else {
      uint64_t v20 = v18 - 32 * (v19 & 0x7FFFFFF);
    }
    uint64_t v29 = (v20 + 96) | 3;
    uint64_t v30 = 0;
    uint64_t v21 = sub_1CD65EF00(a2, &v29);
    sub_1CC8F1F2C((unsigned int *)v21 + 4, (uint64_t)v33);
    uint64_t v22 = *(void *)(a1 + 248);
    int v23 = *(_DWORD *)(v22 + 20);
    if ((v23 & 0x40000000) != 0) {
      uint64_t v24 = *(void *)(v22 - 8);
    }
    else {
      uint64_t v24 = v22 - 32 * (v23 & 0x7FFFFFF);
    }
    uint64_t v29 = (v24 + 64) | 3;
    uint64_t v30 = 0;
    int v25 = sub_1CD65EF00(a2, &v29);
    sub_1CC8F1F2C((unsigned int *)v25 + 4, (uint64_t)v33);
    uint64_t v26 = *(void *)(*(void *)(a1 + 240) - 32 * (*(_DWORD *)(*(void *)(a1 + 240) + 20) & 0x7FFFFFF) + 32);
    if (v26
      && *(unsigned char *)(v26 + 16) == 16
      && ((unsigned int v27 = *(_DWORD *)(v26 + 32), v27 > 0x40)
        ? (uint64_t v28 = **(void **)(v26 + 24))
        : (uint64_t v28 = (uint64_t)(*(void *)(v26 + 24) << -(char)v27) >> -(char)v27),
          (v28 & 2) != 0))
    {
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a1 + 185);
    }
    else if (byte_1EBCE1D58)
    {
      *(unsigned char *)(a1 + 185) = *(unsigned char *)(a1 + 184);
    }
    if (v34 == v33)
    {
      (*(void (**)(void *))(v33[0] + 32))(v33);
    }
    else if (v34)
    {
      (*(void (**)(void))(*v34 + 40))();
    }
    if (v36 == v35)
    {
      (*(void (**)(void *))(v35[0] + 32))(v35);
    }
    else if (v36)
    {
      (*(void (**)(void))(*v36 + 40))();
    }
    if (v40 == &v37)
    {
      (*((void (**)(char **))v37 + 4))(&v37);
    }
    else if (v40)
    {
      (*((void (**)(char **))*v40 + 5))(v40);
    }
  }
}

uint64_t sub_1CC988600(uint64_t a1, void *a2, const llvm::APInt *a3)
{
  uint64_t v343 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 240)) {
    return 1;
  }
  uint64_t v3 = a1;
  if (!*(void *)(a1 + 248)) {
    return 1;
  }
  uint64_t v4 = a2;
  uint64_t v5 = a2[11];
  int v6 = *(unsigned __int8 *)(a1 + 185);
  if (!*(unsigned char *)(a1 + 185))
  {
    int v7 = *(uint64_t **)(a1 + 216);
    uint64_t v8 = *(uint64_t **)(a1 + 224);
    if (v7 == v8) {
      goto LABEL_66;
    }
    int v287 = *(unsigned __int8 *)(a1 + 185);
    uint64_t v9 = (uint64_t *)(v5 + 29576);
    uint64_t v10 = (unsigned int *)(v5 + 29592);
    do
    {
      uint64_t v11 = *v7;
      if (*v7)
      {
        unsigned int v12 = *(unsigned __int8 *)(v11 + 16) - 33;
        BOOL v13 = v12 > 0x33;
        uint64_t v14 = (1 << v12) & 0x8000000000041;
        if (v13 || v14 == 0) {
          goto LABEL_19;
        }
        uint64_t v16 = *(void *)(v11 - 32);
        if (!v16 || *(unsigned char *)(v16 + 16) || *(void *)(v16 + 24) != *(void *)(v11 + 72)) {
          uint64_t v16 = 0;
        }
        *(void *)&long long v332 = v16;
        unint64_t v320 = 0;
        if (sub_1CC020A5C(v9, &v332, &v320))
        {
          uint64_t v17 = (uint64_t)v320;
          uint64_t v18 = *v9;
          uint64_t v19 = *v10;
        }
        else
        {
          uint64_t v18 = *v9;
          uint64_t v19 = *v10;
          uint64_t v17 = *v9 + 8 * v19;
        }
        if (v17 == v18 + 8 * v19)
        {
LABEL_19:
          uint64_t v20 = (uint64_t (*)(void, void))v4[687];
          if (v20)
          {
            uint64_t v21 = (uint64_t ***)v20(v4[688], *(void *)(*(void *)(v11 + 40) + 56));
            uint64_t v22 = *(void *)***v21;
            if (*(void *)(v22 + 128)
              || (*(unsigned int (**)(void))(**(void **)(v22 + 72) + 48))(*(void *)(v22 + 72)))
            {
              *(void *)BOOL v289 = v4;
              llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v320, v4[689], (uint64_t)"OMP121", 6, v11);
              uint64_t v300 = "Value has potential side effects preventing SPMD-mode execution";
              uint64_t v301 = 63;
              sub_1CC59ADEC((uint64_t *)&v327, (uint64_t)&v300);
              unsigned int v23 = *(unsigned __int8 *)(v11 + 16) - 33;
              BOOL v13 = v23 > 0x33;
              uint64_t v24 = (1 << v23) & 0x8000000000041;
              if (!v13 && v24 != 0)
              {
                uint64_t v301 = 88;
                sub_1CC59ADEC((uint64_t *)&v327, (uint64_t)&v300);
              }
              uint64_t v300 = ".";
              uint64_t v301 = 1;
              sub_1CC59ADEC((uint64_t *)&v327, (uint64_t)&v300);
              DWORD2(v332) = v321;
              BYTE12(v332) = BYTE4(v321);
              long long v333 = v322;
              uint64_t v334 = v323;
              long long v335 = v324;
              long long v336 = v325;
              uint64_t v337 = v326;
              *(void *)&long long v332 = &unk_1F2616800;
              uint64_t v338 = v340;
              uint64_t v339 = 0x400000000;
              if (v328) {
                sub_1CD494D68((uint64_t)&v338, (uint64_t)&v327);
              }
              uint64_t v341 = v330;
              uint64_t v342 = v331;
              *(void *)&long long v332 = &unk_1F26165E0;
              uint64_t v300 = " [";
              uint64_t v301 = 2;
              sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v300);
              uint64_t v300 = "OMP121";
              uint64_t v301 = 6;
              sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v300);
              uint64_t v300 = "]";
              uint64_t v301 = 1;
              sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v300);
              LODWORD(v309) = DWORD2(v332);
              BYTE4(v309) = BYTE12(v332);
              long long v310 = v333;
              uint64_t v311 = v334;
              long long v312 = v335;
              long long v313 = v336;
              uint64_t v314 = v337;
              int v308 = (const char *)&unk_1F2616800;
              uint64_t v315 = v317;
              uint64_t v316 = 0x400000000;
              uint64_t v284 = v3;
              if (v339)
              {
                sub_1CD494D68((uint64_t)&v315, (uint64_t)&v338);
                uint64_t v26 = v339;
              }
              else
              {
                uint64_t v26 = 0;
              }
              uint64_t v318 = v341;
              uint64_t v319 = v342;
              int v308 = (const char *)&unk_1F26165E0;
              *(void *)&long long v332 = &unk_1F2616800;
              unsigned int v27 = (char *)v338;
              if (v26)
              {
                uint64_t v28 = v26 << 6;
                do
                {
                  uint64_t v29 = (void **)&v27[v28];
                  if (v27[v28 - 17] < 0) {
                    operator delete(*(v29 - 5));
                  }
                  if (*((char *)v29 - 41) < 0) {
                    operator delete(*(v29 - 8));
                  }
                  v28 -= 64;
                }
                while (v28);
                unsigned int v27 = (char *)v338;
              }
              if (v27 != v340) {
                free(v27);
              }
              unint64_t v320 = &unk_1F2616800;
              uint64_t v30 = (char *)v327;
              if (v328)
              {
                unint64_t v31 = (unint64_t)v328 << 6;
                do
                {
                  unint64_t v32 = (void **)&v30[v31];
                  if (v30[v31 - 17] < 0) {
                    operator delete(*(v32 - 5));
                  }
                  if (*((char *)v32 - 41) < 0) {
                    operator delete(*(v32 - 8));
                  }
                  v31 -= 64;
                }
                while (v31);
                uint64_t v30 = (char *)v327;
              }
              if (v30 != v329) {
                free(v30);
              }
              llvm::OptimizationRemarkEmitter::emit(v21, (llvm::DiagnosticInfoOptimizationBase *)&v308);
              int v308 = (const char *)&unk_1F2616800;
              BOOL v33 = (char *)v315;
              uint64_t v4 = *(void **)v289;
              if (v316)
              {
                unint64_t v34 = (unint64_t)v316 << 6;
                do
                {
                  uint64_t v35 = (void **)&v33[v34];
                  if (v33[v34 - 17] < 0) {
                    operator delete(*(v35 - 5));
                  }
                  if (*((char *)v35 - 41) < 0) {
                    operator delete(*(v35 - 8));
                  }
                  v34 -= 64;
                }
                while (v34);
                BOOL v33 = (char *)v315;
              }
              if (v33 != v317) {
                free(v33);
              }
              uint64_t v3 = v284;
            }
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
    uint64_t result = 1;
    if (!v287) {
      goto LABEL_66;
    }
    return result;
  }
  uint64_t v292 = (llvm::Function *)(a1 + 16);
  unint64_t v43 = sub_1CD6482A0((_DWORD *)(a1 + 16));
  if ((*(_DWORD *)(v43 + 32) & 0xFu) - 7 <= 1) {
    unint64_t v43 = *(void *)(*(void *)(*(void *)(*(void *)(v43 + 8) + 24) + 40) + 56);
  }
  uint64_t v44 = *(void *)(v43 + 40);
  uint64_t v285 = v3;
  int v288 = v6;
  if ((*(unsigned char *)(v43 + 23) & 0x10) != 0)
  {
    uint64_t v45 = ***(void ***)v43;
    uint64_t v46 = *(void *)(v45 + 152);
    uint64_t v47 = *(unsigned int *)(v45 + 168);
    if (v47)
    {
      LODWORD(v48) = (v47 - 1) & ((v43 >> 4) ^ (v43 >> 9));
      uint64_t v49 = (uint64_t *)(v46 + 16 * v48);
      uint64_t v50 = *v49;
      if (*v49 == v43)
      {
LABEL_108:
        uint64_t v66 = (void *)v49[1];
        uint64_t v69 = *v66;
        uint64_t v67 = (char *)(v66 + 2);
        uint64_t v68 = v69;
        goto LABEL_109;
      }
      int v51 = 1;
      while (v50 != -4096)
      {
        int v52 = v48 + v51++;
        uint64_t v48 = v52 & (v47 - 1);
        uint64_t v50 = *(void *)(v46 + 16 * v48);
        if (v50 == v43)
        {
          uint64_t v49 = (uint64_t *)(v46 + 16 * v48);
          goto LABEL_108;
        }
      }
    }
    uint64_t v49 = (uint64_t *)(v46 + 16 * v47);
    goto LABEL_108;
  }
  uint64_t v68 = 0;
  uint64_t v67 = &byte_1CFBCE98E;
LABEL_109:
  *(void *)unsigned int v290 = v4;
  LOWORD(v334) = 773;
  *(void *)&long long v332 = v67;
  *((void *)&v332 + 1) = v68;
  *(void *)&long long v333 = "_exec_mode";
  llvm::Twine::str((llvm::Twine *)&v332, &v320);
  int v295 = SBYTE7(v322);
  std::string __p = v320;
  if ((SBYTE7(v322) & 0x80u) == 0) {
    uint64_t v70 = &v320;
  }
  else {
    uint64_t v70 = (void **)v320;
  }
  if ((SBYTE7(v322) & 0x80u) == 0) {
    size_t v71 = BYTE7(v322) & 0x7F;
  }
  else {
    size_t v71 = v321;
  }
  uint64_t v72 = *(uint64_t **)(v44 + 112);
  size_t v73 = *((unsigned int *)v72 + 8);
  if ((v73 & 0x80000000) == 0)
  {
    if (v73 <= 1) {
      unint64_t v74 = 1;
    }
    else {
      unint64_t v74 = v73;
    }
    if (v71 < v74) {
      unint64_t v74 = v71;
    }
    if (v71 > v73) {
      size_t v71 = v74;
    }
  }
  uint64_t v297 = (llvm::SmallPtrSetImplBase *)*((unsigned int *)v72 + 2);
  if (!v297) {
    goto LABEL_138;
  }
  int v75 = 0;
  if (v71)
  {
    size_t v76 = v71;
    uint64_t v77 = v70;
    do
    {
      int v78 = *(unsigned __int8 *)v77;
      uint64_t v77 = (void **)((char *)v77 + 1);
      int v75 = 33 * v75 + v78;
      --v76;
    }
    while (v76);
  }
  uint64_t v79 = *v72;
  uint64_t v80 = *v72 + 8 * (void)v297 + 8;
  int v81 = 1;
  int v82 = v75;
  while (1)
  {
    uint64_t v83 = v82 & (v297 - 1);
    std::string v84 = *(void **)(v79 + 8 * v83);
    if (v84 != (void *)-8)
    {
      if (!v84) {
        goto LABEL_138;
      }
      if (*(_DWORD *)(v80 + 4 * v83) == v75
        && v71 == *v84
        && (!v71 || !memcmp(v70, (char *)v84 + *((unsigned int *)v72 + 5), v71)))
      {
        break;
      }
    }
    int v82 = v81 + v83;
    ++v81;
  }
  if (v83 == -1
    || (llvm::SmallPtrSetImplBase *)(int)v83 == v297
    || (uint64_t v85 = *(void *)(*(void *)(v79 + 8 * (int)v83) + 8)) == 0
    || *(unsigned char *)(v85 + 16) != 3
    || (*(_DWORD *)(v85 + 32) & 0xFu) - 7 <= 1)
  {
LABEL_138:
    uint64_t v85 = 0;
  }
  if (v295 < 0) {
    operator delete(__p);
  }
  uint64_t v86 = *(void *)(v85 - 32);
  unsigned int v87 = *(_DWORD *)(v86 + 32);
  uint64_t v88 = v285;
  if (v87 > 0x40) {
    LOBYTE(v86) = **(unsigned char **)(v86 + 24);
  }
  else {
    uint64_t v86 = (uint64_t)(*(void *)(v86 + 24) << -(char)v87) >> -(char)v87;
  }
  if (v86 != 1) {
    return 1;
  }
  uint64_t v283 = v85;
  uint64_t v300 = v304;
  uint64_t v301 = (uint64_t)v304;
  uint64_t v302 = 8;
  int v303 = 0;
  uint64_t v89 = *(llvm::BasicBlock **)(v285 + 216);
  long long v296 = *(llvm::BasicBlock **)(v285 + 224);
  if (v89 == v296)
  {
    uint64_t v305 = v307;
    uint64_t v306 = 0x400000000;
    goto LABEL_340;
  }
  unint64_t v298 = (llvm::SmallPtrSetImplBase *)(v5 + 27208);
  uint64_t v90 = (llvm::Instruction **)&v333;
  unsigned int __pa = (uint64_t *)(v285 + 192);
  do
  {
    uint64_t v91 = *(void *)(*(void *)v89 + 40);
    uint64_t v92 = v301;
    uint64_t v93 = HIDWORD(v302);
    if ((const char *)v301 == v300)
    {
      if (HIDWORD(v302))
      {
        long long v94 = 0;
        uint64_t v95 = 8 * HIDWORD(v302);
        long long v96 = (void *)v301;
        do
        {
          if (*v96 == v91) {
            goto LABEL_223;
          }
          if (*v96 == -2) {
            long long v94 = v96;
          }
          ++v96;
          v95 -= 8;
        }
        while (v95);
        if (v94)
        {
          void *v94 = v91;
          --v303;
          goto LABEL_180;
        }
      }
      unsigned int v97 = v302;
      if (HIDWORD(v302) < v302)
      {
        ++HIDWORD(v302);
        *(void *)(v301 + 8 * v93) = v91;
LABEL_180:
        long long v107 = v90;
        *(void *)&long long v332 = v90;
        *((void *)&v332 + 1) = 0x300000000;
        long long v109 = *(void ***)(v91 + 40);
        uint64_t v108 = (void *)(v91 + 40);
        long long v110 = *v109;
        if (*v109 != v108)
        {
          uint64_t v111 = 0;
          while (1)
          {
            size_t v112 = v110 - 3;
            uint64_t v113 = v110 ? (uint64_t)(v110 - 3) : 0;
            if (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v113)) {
              break;
            }
            uint64_t v114 = *(unsigned __int8 *)(v113 + 16) - 33;
            if (v114 <= 0x37)
            {
              if (((1 << (*(unsigned char *)(v113 + 16) - 33)) & 0x8000000000041) != 0)
              {
                uint64_t v115 = *(void *)(v113 + 64);
                if (!v115 || (*(unsigned char *)(v115 + 20) & 4) == 0 && (*(unsigned char *)(v115 + 17) & 0x10) == 0)
                {
                  LODWORD(v320) = 7;
                  if (sub_1CC5CB59C(v113, (__int32 *)&v320, 1uLL))
                  {
                    uint64_t v116 = *(void *)(v113 - 32);
                    if (!v116
                      || *(unsigned char *)(v116 + 16)
                      || *(void *)(v116 + 24) != *(void *)(v113 + 72)
                      || *(_DWORD *)(v116 + 36) != 7)
                    {
                      break;
                    }
                  }
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(v113, 66) & 1) == 0
                    && (llvm::CallBase::hasFnAttrOnCalledFunction(v113, 44) & 1) == 0)
                  {
                    break;
                  }
                }
              }
              else if (((1 << (*(unsigned char *)(v113 + 16) - 33)) & 0x808001C8000010) != 0 {
                     || v114 == 28 && (*(_WORD *)(v113 + 18) & 0x301) != 0)
              }
              {
                break;
              }
            }
            long long v110 = (void *)*v110;
LABEL_199:
            if (v110 == v108) {
              goto LABEL_218;
            }
          }
          if (sub_1CC9683FC(v113, (uint64_t)v298))
          {
            size_t v112 = v111;
          }
          else if (*(void *)(v113 + 8) {
                 || ((v320 = (void *)v113, int v308 = 0, !sub_1CD50F704(__pa, &v320, &v308))
          }
                   ? (uint64_t v118 = *(void *)(v285 + 192),
                      uint64_t v119 = *(unsigned int *)(v285 + 208),
                      uint64_t v117 = (const char *)(v118 + 8 * v119))
                   : (const char *)(v117 = v308, uint64_t v118 = *(void *)(v285 + 192), v119 = *(unsigned int *)(v285 + 208)),
                     v117 == (const char *)(v118 + 8 * v119)))
          {
            size_t v112 = 0;
          }
          else if (v111)
          {
            if (DWORD2(v332) >= (unint64_t)HIDWORD(v332)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v120 = (uint64_t *)(v332 + 16 * DWORD2(v332));
            uint64_t *v120 = v113;
            v120[1] = (uint64_t)v111;
            ++DWORD2(v332);
          }
          long long v110 = (void *)*v110;
          uint64_t v111 = v112;
          goto LABEL_199;
        }
LABEL_218:
        int v121 = (llvm::Instruction **)v332;
        int v122 = (llvm::Instruction **)(v332 + 16 * DWORD2(v332));
        if (DWORD2(v332))
        {
          do
          {
            int v123 = *v121;
            long long v124 = v121[1];
            v121 += 2;
            llvm::Instruction::moveBefore(v123, v124);
          }
          while (v121 != v122);
          int v121 = (llvm::Instruction **)v332;
        }
        uint64_t v90 = v107;
        if (v121 != v107) {
          free(v121);
        }
        goto LABEL_223;
      }
    }
    else
    {
      unsigned int v97 = v302;
    }
    if (3 * v97 <= 4 * (HIDWORD(v302) - v303))
    {
      if (v97 >= 0x40) {
        v97 *= 2;
      }
      else {
        unsigned int v97 = 128;
      }
    }
    else if (v97 - HIDWORD(v302) >= v97 >> 3)
    {
      goto LABEL_161;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v300, v97);
    unsigned int v97 = v302;
    uint64_t v92 = v301;
LABEL_161:
    unsigned int v98 = v97 - 1;
    unsigned int v99 = (v97 - 1) & ((v91 >> 4) ^ (v91 >> 9));
    uint64_t v100 = (void *)(v92 + 8 * v99);
    uint64_t v101 = *v100;
    if (*v100 != -1)
    {
      int v102 = 0;
      int v103 = 1;
      while (v101 != v91)
      {
        if (v102) {
          BOOL v104 = 0;
        }
        else {
          BOOL v104 = v101 == -2;
        }
        if (v104) {
          int v102 = v100;
        }
        unsigned int v105 = v99 + v103++;
        unsigned int v99 = v105 & v98;
        uint64_t v100 = (void *)(v92 + 8 * (v105 & v98));
        uint64_t v101 = *v100;
        if (*v100 == -1) {
          goto LABEL_173;
        }
      }
      goto LABEL_223;
    }
    int v102 = 0;
LABEL_173:
    if (v102) {
      long long v106 = v102;
    }
    else {
      long long v106 = v100;
    }
    if (*v106 != v91)
    {
      if (*v106 == -2) {
        --v303;
      }
      else {
        ++HIDWORD(v302);
      }
      *long long v106 = v91;
      goto LABEL_180;
    }
LABEL_223:
    uint64_t v89 = (llvm::BasicBlock *)((char *)v89 + 8);
  }
  while (v89 != v296);
  uint64_t v88 = v285;
  uint64_t v125 = *(uint64_t **)(v285 + 216);
  BOOL v126 = *(uint64_t **)(v285 + 224);
  uint64_t v305 = v307;
  uint64_t v306 = 0x400000000;
  if (v125 == v126) {
    goto LABEL_340;
  }
  while (2)
  {
    uint64_t v137 = *v125;
    uint64_t v138 = *(void *)(*v125 + 40);
    long long v332 = *(unint64_t *)(v138 + 56);
    uint64_t v139 = sub_1CC983F48((uint64_t)v4, &v332, 0, 2, 0);
    uint64_t v140 = v139;
    uint64_t v142 = *(void *)(v139 + 392);
    uint64_t v141 = *(void *)(v139 + 400);
    if (v141 == v142)
    {
      uint64_t v143 = *(unsigned int *)(v139 + 412);
      uint64_t v144 = (void *)(v141 + 8 * v143);
      if (v143)
      {
        uint64_t v145 = 0;
        uint64_t v146 = 8 * v143;
        while (*(void *)(v141 + v145) != v137)
        {
          v145 += 8;
          if (v146 == v145) {
            goto LABEL_270;
          }
        }
        uint64_t v144 = (void *)(v141 + v145);
      }
LABEL_270:
      uint64_t v142 = *(void *)(v139 + 400);
    }
    else
    {
      uint64_t v147 = *(unsigned int *)(v139 + 408);
      int v148 = v147 - 1;
      unsigned int v149 = (v147 - 1) & ((v137 >> 4) ^ (v137 >> 9));
      uint64_t v144 = (void *)(v141 + 8 * v149);
      uint64_t v150 = *v144;
      if (*v144 == -1)
      {
        int v151 = 0;
LABEL_334:
        if (v151) {
          uint64_t v144 = v151;
        }
        if (*v144 != v137) {
          uint64_t v144 = (void *)(v141 + 8 * v147);
        }
      }
      else
      {
        int v151 = 0;
        int v152 = 1;
        while (v150 != v137)
        {
          if (v151) {
            BOOL v153 = 0;
          }
          else {
            BOOL v153 = v150 == -2;
          }
          if (v153) {
            int v151 = v144;
          }
          unsigned int v154 = v149 + v152++;
          unsigned int v149 = v154 & v148;
          uint64_t v144 = (void *)(v141 + 8 * (v154 & v148));
          uint64_t v150 = *v144;
          if (*v144 == -1) {
            goto LABEL_334;
          }
        }
      }
    }
    if (v141 == v142) {
      uint64_t v155 = 412;
    }
    else {
      uint64_t v155 = 408;
    }
    if (v144 == (void *)(v141 + 8 * *(unsigned int *)(v139 + v155)))
    {
      uint64_t v156 = v138 + 40;
      uint64_t v157 = *(void *)(v138 + 48);
      if (v157 != v138 + 40)
      {
        uint64_t v158 = 0;
        uint64_t v159 = 0;
        uint64_t v299 = (llvm::SmallPtrSetImplBase *)(v139 + 392);
        while (1)
        {
          if (v157) {
            uint64_t v160 = v157 - 24;
          }
          else {
            uint64_t v160 = 0;
          }
          *(void *)&long long v332 = v160;
          unint64_t v320 = 0;
          if (sub_1CD50F704(__pa, &v332, &v320))
          {
            uint64_t v161 = v320;
            uint64_t v162 = *(void *)(v285 + 192);
            uint64_t v163 = *(unsigned int *)(v285 + 208);
          }
          else
          {
            uint64_t v162 = *(void *)(v285 + 192);
            uint64_t v163 = *(unsigned int *)(v285 + 208);
            uint64_t v161 = (void *)(v162 + 8 * v163);
          }
          if (v161 == (void *)(v162 + 8 * v163))
          {
            if (v158)
            {
              if (v306 >= (unint64_t)HIDWORD(v306)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v160 = 0;
              uint64_t v170 = (char *)v305 + 16 * v306;
              void *v170 = v158;
              v170[1] = v159;
              LODWORD(v306) = v306 + 1;
              uint64_t v158 = 0;
            }
            else
            {
              uint64_t v160 = v159;
            }
            goto LABEL_324;
          }
          uint64_t v164 = *(void *)(v140 + 400);
          uint64_t v165 = *(unsigned int *)(v140 + 412);
          if (v164 != *(void *)(v140 + 392)) {
            break;
          }
          if (v165)
          {
            unint64_t v166 = 0;
            uint64_t v167 = 8 * v165;
            BOOL v168 = *(void **)(v140 + 400);
            while (*v168 != v160)
            {
              if (*v168 == -2) {
                unint64_t v166 = v168;
              }
              ++v168;
              v167 -= 8;
              if (!v167)
              {
                if (!v166) {
                  goto LABEL_294;
                }
                void *v166 = v160;
                --*(_DWORD *)(v140 + 416);
                goto LABEL_322;
              }
            }
            goto LABEL_322;
          }
LABEL_294:
          unsigned int v169 = *(_DWORD *)(v140 + 408);
          if (v165 >= v169) {
            goto LABEL_300;
          }
          *(_DWORD *)(v140 + 412) = v165 + 1;
          *(void *)(v164 + 8 * v165) = v160;
LABEL_322:
          if (!v158) {
            uint64_t v158 = v160;
          }
LABEL_324:
          uint64_t v157 = *(void *)(v157 + 8);
          uint64_t v159 = v160;
          if (v157 == v156) {
            goto LABEL_275;
          }
        }
        unsigned int v169 = *(_DWORD *)(v140 + 408);
LABEL_300:
        if (3 * v169 <= 4 * ((int)v165 - *(_DWORD *)(v140 + 416)))
        {
          if (v169 >= 0x40) {
            v169 *= 2;
          }
          else {
            unsigned int v169 = 128;
          }
        }
        else if (v169 - v165 >= v169 >> 3)
        {
          goto LABEL_302;
        }
        llvm::SmallPtrSetImplBase::Grow(v299, v169);
        unsigned int v169 = *(_DWORD *)(v140 + 408);
        uint64_t v164 = *(void *)(v140 + 400);
LABEL_302:
        unsigned int v171 = v169 - 1;
        unsigned int v172 = (v169 - 1) & ((v160 >> 4) ^ (v160 >> 9));
        uint64_t v173 = (void *)(v164 + 8 * v172);
        uint64_t v174 = *v173;
        if (*v173 == -1)
        {
          uint64_t v175 = 0;
LABEL_315:
          if (v175) {
            int v179 = v175;
          }
          else {
            int v179 = v173;
          }
          if (*v179 != v160)
          {
            if (*v179 == -2) {
              --*(_DWORD *)(v140 + 416);
            }
            else {
              ++*(_DWORD *)(v140 + 412);
            }
            *int v179 = v160;
          }
        }
        else
        {
          uint64_t v175 = 0;
          int v176 = 1;
          while (v174 != v160)
          {
            if (v175) {
              BOOL v177 = 0;
            }
            else {
              BOOL v177 = v174 == -2;
            }
            if (v177) {
              uint64_t v175 = v173;
            }
            unsigned int v178 = v172 + v176++;
            unsigned int v172 = v178 & v171;
            uint64_t v173 = (void *)(v164 + 8 * (v178 & v171));
            uint64_t v174 = *v173;
            if (*v173 == -1) {
              goto LABEL_315;
            }
          }
        }
        goto LABEL_322;
      }
    }
LABEL_275:
    ++v125;
    uint64_t v4 = *(void **)v290;
    if (v125 != v126) {
      continue;
    }
    break;
  }
  if (v306)
  {
    int v218 = *(llvm **)(*(void *)v305 + 40);
    uint64_t v219 = *(void *)(*((void *)v305 + 1) + 32);
    if (v219) {
      BOOL v220 = v219 == *(void *)(*((void *)v305 + 1) + 40) + 40;
    }
    else {
      BOOL v220 = 1;
    }
    if (v220) {
      uint64_t v221 = 0;
    }
    else {
      uint64_t v221 = (llvm::BasicBlock *)(v219 - 24);
    }
    *(void *)&long long v332 = "region.guarded.end";
    LOWORD(v334) = 259;
    sub_1CD126150(v218, v221, 0, 0, 0, 0, (llvm::Twine *)&v332, 0);
  }
  uint64_t v88 = v285;
LABEL_340:
  BOOL v180 = (llvm::Constant *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v283 - 32), 3uLL, 0);
  llvm::GlobalVariable::setInitializer(v283, v180);
  unint64_t v182 = *(void *)v292 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v292 & 3) == 0) {
    unint64_t v182 = *(void *)(v182 + 24);
  }
  uint64_t v183 = **(llvm::ConstantInt ***)v182;
  uint64_t v184 = *(void *)(v88 + 240);
  int v185 = *(_DWORD *)(v184 + 20);
  if ((v185 & 0x40000000) != 0) {
    uint64_t v186 = *(void *)(v184 - 8);
  }
  else {
    uint64_t v186 = v184 - 32 * (v185 & 0x7FFFFFF);
  }
  uint64_t v187 = v186 + 32;
  Signed = (llvm::Value *)llvm::ConstantInt::getSigned((llvm::ConstantInt *)(*(void *)v183 + 1912), 2uLL, v181);
  sub_1CD65D61C((uint64_t)v4, v187, Signed);
  uint64_t v190 = *(void *)(v88 + 240);
  int v191 = *(_DWORD *)(v190 + 20);
  if ((v191 & 0x40000000) != 0) {
    uint64_t v192 = *(void *)(v190 - 8);
  }
  else {
    uint64_t v192 = v190 - 32 * (v191 & 0x7FFFFFF);
  }
  uint64_t v193 = v192 + 64;
  Bool = (llvm::Value *)llvm::ConstantInt::getBool(v183, 0, v189);
  sub_1CD65D61C((uint64_t)v4, v193, Bool);
  uint64_t v196 = *(void *)(v88 + 248);
  int v197 = *(_DWORD *)(v196 + 20);
  if ((v197 & 0x40000000) != 0) {
    uint64_t v198 = *(void *)(v196 - 8);
  }
  else {
    uint64_t v198 = v196 - 32 * (v197 & 0x7FFFFFF);
  }
  uint64_t v199 = v198 + 32;
  uint64_t v200 = (llvm::Value *)llvm::ConstantInt::getSigned((llvm::ConstantInt *)(*(void *)v183 + 1912), 2uLL, v195);
  sub_1CD65D61C((uint64_t)v4, v199, v200);
  uint64_t v202 = *(void *)(v88 + 240);
  int v203 = *(_DWORD *)(v202 + 20);
  if ((v203 & 0x40000000) != 0) {
    uint64_t v204 = *(void *)(v202 - 8);
  }
  else {
    uint64_t v204 = v202 - 32 * (v203 & 0x7FFFFFF);
  }
  uint64_t v205 = v204 + 96;
  uint64_t v206 = (llvm::Value *)llvm::ConstantInt::getBool(v183, 0, v201);
  sub_1CD65D61C((uint64_t)v4, v205, v206);
  uint64_t v208 = *(void *)(v88 + 248);
  int v209 = *(_DWORD *)(v208 + 20);
  uint64_t v210 = v88;
  if ((v209 & 0x40000000) != 0) {
    uint64_t v211 = *(void *)(v208 - 8);
  }
  else {
    uint64_t v211 = v208 - 32 * (v209 & 0x7FFFFFF);
  }
  uint64_t v212 = v211 + 64;
  int v213 = (llvm::Value *)llvm::ConstantInt::getBool(v183, 0, v207);
  sub_1CD65D61C((uint64_t)v4, v212, v213);
  uint64_t v214 = (uint64_t (*)(void, void))v4[687];
  if (v214)
  {
    uint64_t v215 = *(void *)(v88 + 240);
    uint64_t v216 = (uint64_t ***)v214(v4[688], *(void *)(*(void *)(v215 + 40) + 56));
    uint64_t v217 = *(void *)***v216;
    if (*(void *)(v217 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v217 + 72) + 48))(*(void *)(v217 + 72)))
    {
      llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v320, v4[689], (uint64_t)"OMP120", 6, v215);
      *(void *)&long long v332 = "Transformed generic-mode kernel to SPMD-mode.";
      *((void *)&v332 + 1) = 45;
      sub_1CC59ADEC((uint64_t *)&v327, (uint64_t)&v332);
      DWORD2(v332) = v321;
      BYTE12(v332) = BYTE4(v321);
      long long v333 = v322;
      uint64_t v334 = v323;
      long long v335 = v324;
      long long v336 = v325;
      *(void *)&long long v332 = &unk_1F2616800;
      uint64_t v337 = v326;
      uint64_t v338 = v340;
      uint64_t v339 = 0x400000000;
      if (v328) {
        sub_1CD494D68((uint64_t)&v338, (uint64_t)&v327);
      }
      uint64_t v341 = v330;
      uint64_t v342 = v331;
      *(void *)&long long v332 = &unk_1F2616570;
      int v308 = " [";
      uint64_t v309 = 2;
      sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
      int v308 = "OMP120";
      uint64_t v309 = 6;
      sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
      int v308 = "]";
      uint64_t v309 = 1;
      sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
      LODWORD(v309) = DWORD2(v332);
      BYTE4(v309) = BYTE12(v332);
      long long v310 = v333;
      uint64_t v311 = v334;
      long long v312 = v335;
      long long v313 = v336;
      int v308 = (const char *)&unk_1F2616800;
      uint64_t v314 = v337;
      uint64_t v315 = v317;
      uint64_t v316 = 0x400000000;
      unsigned int v222 = v339;
      if (v339)
      {
        sub_1CD494D68((uint64_t)&v315, (uint64_t)&v338);
        unsigned int v222 = v339;
      }
      uint64_t v318 = v341;
      uint64_t v319 = v342;
      int v308 = (const char *)&unk_1F2616570;
      *(void *)&long long v332 = &unk_1F2616800;
      uint64_t v223 = (char *)v338;
      if (v222)
      {
        unint64_t v224 = (unint64_t)v222 << 6;
        do
        {
          unsigned int v225 = (void **)&v223[v224];
          if (v223[v224 - 17] < 0) {
            operator delete(*(v225 - 5));
          }
          if (*((char *)v225 - 41) < 0) {
            operator delete(*(v225 - 8));
          }
          v224 -= 64;
        }
        while (v224);
        uint64_t v223 = (char *)v338;
      }
      if (v223 != v340) {
        free(v223);
      }
      unint64_t v320 = &unk_1F2616800;
      uint64_t v232 = (char *)v327;
      if (v328)
      {
        unint64_t v233 = (unint64_t)v328 << 6;
        do
        {
          uint64_t v234 = (void **)&v232[v233];
          if (v232[v233 - 17] < 0) {
            operator delete(*(v234 - 5));
          }
          if (*((char *)v234 - 41) < 0) {
            operator delete(*(v234 - 8));
          }
          v233 -= 64;
        }
        while (v233);
        uint64_t v232 = (char *)v327;
      }
      if (v232 != v329) {
        free(v232);
      }
      llvm::OptimizationRemarkEmitter::emit(v216, (llvm::DiagnosticInfoOptimizationBase *)&v308);
      int v308 = (const char *)&unk_1F2616800;
      int v235 = (char *)v315;
      if (v316)
      {
        unint64_t v236 = (unint64_t)v316 << 6;
        do
        {
          uint64_t v237 = (void **)&v235[v236];
          if (v235[v236 - 17] < 0) {
            operator delete(*(v237 - 5));
          }
          if (*((char *)v237 - 41) < 0) {
            operator delete(*(v237 - 8));
          }
          v236 -= 64;
        }
        while (v236);
        int v235 = (char *)v315;
      }
      if (v235 != v317) {
        free(v235);
      }
      uint64_t v4 = *(void **)v290;
    }
  }
  if (v305 != v307) {
    free(v305);
  }
  uint64_t v3 = v210;
  if ((const char *)v301 != v300) {
    free((void *)v301);
  }
  uint64_t result = 0;
  if (!v288)
  {
LABEL_66:
    if (byte_1EBCE1ED8 || !*(unsigned char *)(v3 + 57)) {
      return 1;
    }
    uint64_t v37 = *(void *)(v3 + 240) - 32 * (*(_DWORD *)(*(void *)(v3 + 240) + 20) & 0x7FFFFFF);
    uint64_t v38 = *(void *)(v37 + 64);
    uint64_t v39 = *(void *)(v37 + 32);
    if (*(unsigned char *)(v39 + 16) != 16) {
      uint64_t v39 = 0;
    }
    if (!v38 || *(unsigned char *)(v38 + 16) != 16) {
      return 1;
    }
    uint64_t v41 = *(unsigned int *)(v38 + 32);
    if (v41 > 0x40)
    {
      int v53 = 0;
      int64_t v54 = (unint64_t)(v41 + 63) >> 6;
      do
      {
        BOOL v13 = v54-- < 1;
        if (v13) {
          break;
        }
        unint64_t v55 = *(void *)(*(void *)(v38 + 24) + 8 * v54);
        v53 += __clz(v55);
      }
      while (!v55);
      int v56 = v41 | 0xFFFFFFC0;
      if ((v41 & 0x3F) == 0) {
        int v56 = 0;
      }
      BOOL v42 = v53 + v56 == v41;
    }
    else
    {
      BOOL v42 = *(void *)(v38 + 24) == 0;
    }
    char v57 = v42;
    uint64_t result = 1;
    if ((v57 & 1) == 0 && v39)
    {
      unsigned int v58 = *(_DWORD *)(v39 + 32);
      uint64_t v59 = v58 > 0x40 ? **(void **)(v39 + 24) : (uint64_t)(*(void *)(v39 + 24) << -(char)v58) >> -(char)v58;
      if ((v59 & 2) == 0)
      {
        uint64_t v60 = (llvm::IRPosition *)(v3 + 16);
        unint64_t v61 = *(void *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        if ((~*(_DWORD *)(v3 + 16) & 3) == 0) {
          unint64_t v61 = *(void *)(v61 + 24);
        }
        uint64_t v62 = (llvm::Value *)llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v61, 0, a3);
        uint64_t v63 = *(void *)(v3 + 240);
        int v64 = *(_DWORD *)(v63 + 20);
        if ((v64 & 0x40000000) != 0) {
          uint64_t v65 = *(void *)(v63 - 8);
        }
        else {
          uint64_t v65 = v63 - 32 * (v64 & 0x7FFFFFF);
        }
        sub_1CD65D61C((uint64_t)v4, v65 + 64, v62);
        uint64_t v127 = *(void *)(v3 + 152);
        uint64_t v128 = *(void *)(v3 + 160);
        uint64_t v129 = *(void *)(v3 + 240);
        unint64_t v130 = (uint64_t (*)(void, void))v4[687];
        if (*(void *)(v3 + 88) != *(void *)(v3 + 96) || v127 != v128)
        {
          *(void *)long long v291 = v4;
          v286 = (void *)v3;
          if (v127 == v128)
          {
            if (v130)
            {
              uint64_t v226 = (uint64_t ***)v130(v4[688], *(void *)(*(void *)(v129 + 40) + 56));
              uint64_t v227 = *(void *)***v226;
              if (*(void *)(v227 + 128)
                || (*(unsigned int (**)(void))(**(void **)(v227 + 72) + 48))(*(void *)(v227 + 72)))
              {
                llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v320, v4[689], (uint64_t)"OMP131", 6, v129);
                *(void *)&long long v332 = "Rewriting generic-mode kernel with a customized state machine.";
                *((void *)&v332 + 1) = 62;
                sub_1CC59ADEC((uint64_t *)&v327, (uint64_t)&v332);
                DWORD2(v332) = v321;
                BYTE12(v332) = BYTE4(v321);
                long long v333 = v322;
                uint64_t v334 = v323;
                long long v335 = v324;
                long long v336 = v325;
                *(void *)&long long v332 = &unk_1F2616800;
                uint64_t v337 = v326;
                uint64_t v338 = v340;
                uint64_t v339 = 0x400000000;
                if (v328) {
                  sub_1CD494D68((uint64_t)&v338, (uint64_t)&v327);
                }
                uint64_t v341 = v330;
                uint64_t v342 = v331;
                *(void *)&long long v332 = &unk_1F2616570;
                int v308 = " [";
                uint64_t v309 = 2;
                sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
                int v308 = "OMP131";
                uint64_t v309 = 6;
                sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
                int v308 = "]";
                uint64_t v309 = 1;
                sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
                LODWORD(v309) = DWORD2(v332);
                BYTE4(v309) = BYTE12(v332);
                long long v310 = v333;
                uint64_t v311 = v334;
                long long v312 = v335;
                long long v313 = v336;
                int v308 = (const char *)&unk_1F2616800;
                uint64_t v314 = v337;
                uint64_t v315 = v317;
                uint64_t v316 = 0x400000000;
                unsigned int v228 = v339;
                if (v339)
                {
                  sub_1CD494D68((uint64_t)&v315, (uint64_t)&v338);
                  unsigned int v228 = v339;
                }
                uint64_t v318 = v341;
                uint64_t v319 = v342;
                int v308 = (const char *)&unk_1F2616570;
                *(void *)&long long v332 = &unk_1F2616800;
                int v229 = (char *)v338;
                if (v228)
                {
                  unint64_t v230 = (unint64_t)v228 << 6;
                  do
                  {
                    unsigned int v231 = (void **)&v229[v230];
                    if (v229[v230 - 17] < 0) {
                      operator delete(*(v231 - 5));
                    }
                    if (*((char *)v231 - 41) < 0) {
                      operator delete(*(v231 - 8));
                    }
                    v230 -= 64;
                  }
                  while (v230);
                  int v229 = (char *)v338;
                }
                if (v229 != v340) {
                  free(v229);
                }
                unint64_t v320 = &unk_1F2616800;
                uint64_t v250 = (char *)v327;
                if (v328)
                {
                  unint64_t v251 = (unint64_t)v328 << 6;
                  do
                  {
                    uint64_t v252 = (void **)&v250[v251];
                    if (v250[v251 - 17] < 0) {
                      operator delete(*(v252 - 5));
                    }
                    if (*((char *)v252 - 41) < 0) {
                      operator delete(*(v252 - 8));
                    }
                    v251 -= 64;
                  }
                  while (v251);
                  uint64_t v250 = (char *)v327;
                }
                if (v250 != v329) {
                  free(v250);
                }
                llvm::OptimizationRemarkEmitter::emit(v226, (llvm::DiagnosticInfoOptimizationBase *)&v308);
                int v308 = (const char *)&unk_1F2616800;
                unsigned int v256 = (char *)v315;
                if (v316)
                {
                  unint64_t v257 = (unint64_t)v316 << 6;
                  do
                  {
                    uint64_t v258 = (void **)&v256[v257];
                    if (v256[v257 - 17] < 0) {
                      operator delete(*(v258 - 5));
                    }
                    if (*((char *)v258 - 41) < 0) {
                      operator delete(*(v258 - 8));
                    }
                    v257 -= 64;
                  }
                  while (v257);
                  unsigned int v256 = (char *)v315;
                }
                if (v256 != v317) {
                  free(v256);
                }
              }
            }
          }
          else
          {
            if (v130)
            {
              uint64_t v238 = (uint64_t ***)v130(v4[688], *(void *)(*(void *)(v129 + 40) + 56));
              uint64_t v239 = *(void *)***v238;
              if (*(void *)(v239 + 128)
                || (*(unsigned int (**)(void))(**(void **)(v239 + 72) + 48))(*(void *)(v239 + 72)))
              {
                llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v320, v4[689], (uint64_t)"OMP132", 6, v129);
                *(void *)&long long v332 = "Generic-mode kernel is executed with a customized state machine that requires a fallback.";
                *((void *)&v332 + 1) = 89;
                sub_1CC59ADEC((uint64_t *)&v327, (uint64_t)&v332);
                DWORD2(v332) = v321;
                BYTE12(v332) = BYTE4(v321);
                long long v333 = v322;
                uint64_t v334 = v323;
                long long v335 = v324;
                long long v336 = v325;
                *(void *)&long long v332 = &unk_1F2616800;
                uint64_t v337 = v326;
                uint64_t v338 = v340;
                uint64_t v339 = 0x400000000;
                if (v328) {
                  sub_1CD494D68((uint64_t)&v338, (uint64_t)&v327);
                }
                uint64_t v341 = v330;
                uint64_t v342 = v331;
                *(void *)&long long v332 = &unk_1F26165E0;
                int v308 = " [";
                uint64_t v309 = 2;
                sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
                int v308 = "OMP132";
                uint64_t v309 = 6;
                sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
                int v308 = "]";
                uint64_t v309 = 1;
                sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
                LODWORD(v309) = DWORD2(v332);
                BYTE4(v309) = BYTE12(v332);
                long long v310 = v333;
                uint64_t v311 = v334;
                long long v312 = v335;
                long long v313 = v336;
                int v308 = (const char *)&unk_1F2616800;
                uint64_t v314 = v337;
                uint64_t v315 = v317;
                uint64_t v316 = 0x400000000;
                unsigned int v240 = v339;
                if (v339)
                {
                  sub_1CD494D68((uint64_t)&v315, (uint64_t)&v338);
                  unsigned int v240 = v339;
                }
                uint64_t v318 = v341;
                uint64_t v319 = v342;
                int v308 = (const char *)&unk_1F26165E0;
                *(void *)&long long v332 = &unk_1F2616800;
                BOOL v241 = (char *)v338;
                if (v240)
                {
                  unint64_t v242 = (unint64_t)v240 << 6;
                  do
                  {
                    uint64_t v243 = (void **)&v241[v242];
                    if (v241[v242 - 17] < 0) {
                      operator delete(*(v243 - 5));
                    }
                    if (*((char *)v243 - 41) < 0) {
                      operator delete(*(v243 - 8));
                    }
                    v242 -= 64;
                  }
                  while (v242);
                  BOOL v241 = (char *)v338;
                }
                if (v241 != v340) {
                  free(v241);
                }
                unint64_t v320 = &unk_1F2616800;
                uint64_t v253 = (char *)v327;
                if (v328)
                {
                  unint64_t v254 = (unint64_t)v328 << 6;
                  do
                  {
                    unsigned int v255 = (void **)&v253[v254];
                    if (v253[v254 - 17] < 0) {
                      operator delete(*(v255 - 5));
                    }
                    if (*((char *)v255 - 41) < 0) {
                      operator delete(*(v255 - 8));
                    }
                    v254 -= 64;
                  }
                  while (v254);
                  uint64_t v253 = (char *)v327;
                }
                if (v253 != v329) {
                  free(v253);
                }
                llvm::OptimizationRemarkEmitter::emit(v238, (llvm::DiagnosticInfoOptimizationBase *)&v308);
                int v308 = (const char *)&unk_1F2616800;
                uint64_t v259 = (char *)v315;
                if (v316)
                {
                  unint64_t v260 = (unint64_t)v316 << 6;
                  do
                  {
                    int v261 = (void **)&v259[v260];
                    if (v259[v260 - 17] < 0) {
                      operator delete(*(v261 - 5));
                    }
                    if (*((char *)v261 - 41) < 0) {
                      operator delete(*(v261 - 8));
                    }
                    v260 -= 64;
                  }
                  while (v260);
                  uint64_t v259 = (char *)v315;
                }
                if (v259 != v317) {
                  free(v259);
                }
              }
            }
            BOOL v262 = (uint64_t *)v286[19];
            for (uint64_t i = (uint64_t *)v286[20]; v262 != i; ++v262)
            {
              uint64_t v268 = *v262;
              int v269 = (uint64_t (*)(void, void))v4[687];
              if (*v262) {
                BOOL v270 = v269 == 0;
              }
              else {
                BOOL v270 = 1;
              }
              if (!v270)
              {
                unsigned int v271 = (uint64_t ***)v269(v4[688], *(void *)(*(void *)(v268 + 40) + 56));
                uint64_t v272 = *(void *)***v271;
                if (*(void *)(v272 + 128)
                  || (*(unsigned int (**)(void))(**(void **)(v272 + 72) + 48))(*(void *)(v272 + 72)))
                {
                  llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v320, v4[689], (uint64_t)"OMP133", 6, v268);
                  uint64_t v300 = "Call may contain unknown parallel regions. Use ";
                  uint64_t v301 = 47;
                  sub_1CC59ADEC((uint64_t *)&v327, (uint64_t)&v300);
                  uint64_t v301 = 60;
                  sub_1CC59ADEC((uint64_t *)&v327, (uint64_t)&v300);
                  DWORD2(v332) = v321;
                  BYTE12(v332) = BYTE4(v321);
                  long long v333 = v322;
                  uint64_t v334 = v323;
                  long long v335 = v324;
                  long long v336 = v325;
                  uint64_t v337 = v326;
                  *(void *)&long long v332 = &unk_1F2616800;
                  uint64_t v338 = v340;
                  uint64_t v339 = 0x400000000;
                  if (v328) {
                    sub_1CD494D68((uint64_t)&v338, (uint64_t)&v327);
                  }
                  uint64_t v341 = v330;
                  uint64_t v342 = v331;
                  *(void *)&long long v332 = &unk_1F26165E0;
                  uint64_t v300 = " [";
                  uint64_t v301 = 2;
                  sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v300);
                  uint64_t v300 = "OMP133";
                  uint64_t v301 = 6;
                  sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v300);
                  uint64_t v300 = "]";
                  uint64_t v301 = 1;
                  sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v300);
                  LODWORD(v309) = DWORD2(v332);
                  BYTE4(v309) = BYTE12(v332);
                  long long v310 = v333;
                  uint64_t v311 = v334;
                  long long v312 = v335;
                  long long v313 = v336;
                  uint64_t v314 = v337;
                  int v308 = (const char *)&unk_1F2616800;
                  uint64_t v315 = v317;
                  uint64_t v316 = 0x400000000;
                  if (v339)
                  {
                    sub_1CD494D68((uint64_t)&v315, (uint64_t)&v338);
                    uint64_t v273 = v339;
                  }
                  else
                  {
                    uint64_t v273 = 0;
                  }
                  uint64_t v318 = v341;
                  uint64_t v319 = v342;
                  int v308 = (const char *)&unk_1F26165E0;
                  *(void *)&long long v332 = &unk_1F2616800;
                  uint64_t v274 = (char *)v338;
                  if (v273)
                  {
                    uint64_t v275 = v273 << 6;
                    do
                    {
                      unsigned int v276 = (void **)&v274[v275];
                      if (v274[v275 - 17] < 0) {
                        operator delete(*(v276 - 5));
                      }
                      if (*((char *)v276 - 41) < 0) {
                        operator delete(*(v276 - 8));
                      }
                      v275 -= 64;
                    }
                    while (v275);
                    uint64_t v274 = (char *)v338;
                  }
                  if (v274 != v340) {
                    free(v274);
                  }
                  unint64_t v320 = &unk_1F2616800;
                  uint64_t v277 = (char *)v327;
                  if (v328)
                  {
                    unint64_t v278 = (unint64_t)v328 << 6;
                    do
                    {
                      uint64_t v279 = (void **)&v277[v278];
                      if (v277[v278 - 17] < 0) {
                        operator delete(*(v279 - 5));
                      }
                      if (*((char *)v279 - 41) < 0) {
                        operator delete(*(v279 - 8));
                      }
                      v278 -= 64;
                    }
                    while (v278);
                    uint64_t v277 = (char *)v327;
                  }
                  if (v277 != v329) {
                    free(v277);
                  }
                  llvm::OptimizationRemarkEmitter::emit(v271, (llvm::DiagnosticInfoOptimizationBase *)&v308);
                  int v308 = (const char *)&unk_1F2616800;
                  uint64_t v280 = (char *)v315;
                  uint64_t v4 = *(void **)v291;
                  if (v316)
                  {
                    unint64_t v281 = (unint64_t)v316 << 6;
                    do
                    {
                      uint64_t v282 = (void **)&v280[v281];
                      if (v280[v281 - 17] < 0) {
                        operator delete(*(v282 - 5));
                      }
                      if (*((char *)v282 - 41) < 0) {
                        operator delete(*(v282 - 8));
                      }
                      v281 -= 64;
                    }
                    while (v281);
                    uint64_t v280 = (char *)v315;
                  }
                  if (v280 != v317) {
                    free(v280);
                  }
                }
              }
            }
          }
          sub_1CD648A0C(v60);
          uint64_t v264 = *(void *)(v286[30] + 32);
          uint64_t v265 = *(void *)(v286[30] + 40);
          if (v264) {
            BOOL v266 = v264 == v265 + 40;
          }
          else {
            BOOL v266 = 1;
          }
          if (v266) {
            uint64_t v267 = 0;
          }
          else {
            uint64_t v267 = v264 - 24;
          }
          *(void *)&long long v332 = "thread.user_code.check";
          LOWORD(v334) = 259;
          llvm::BasicBlock::splitBasicBlock(v265, v267 + 24, (uint64_t)&v332, 0);
        }
        if (v130)
        {
          uint64_t v131 = (uint64_t ***)v130(v4[688], *(void *)(*(void *)(v129 + 40) + 56));
          uint64_t v132 = *(void *)***v131;
          if (*(void *)(v132 + 128)
            || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(v132 + 72) + 48))(*(void *)(v132 + 72)),
                result))
          {
            llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v320, v4[689], (uint64_t)"OMP130", 6, v129);
            *(void *)&long long v332 = "Removing unused state machine from generic-mode kernel.";
            *((void *)&v332 + 1) = 55;
            sub_1CC59ADEC((uint64_t *)&v327, (uint64_t)&v332);
            DWORD2(v332) = v321;
            BYTE12(v332) = BYTE4(v321);
            long long v333 = v322;
            uint64_t v334 = v323;
            long long v335 = v324;
            long long v336 = v325;
            *(void *)&long long v332 = &unk_1F2616800;
            uint64_t v337 = v326;
            uint64_t v338 = v340;
            uint64_t v339 = 0x400000000;
            if (v328) {
              sub_1CD494D68((uint64_t)&v338, (uint64_t)&v327);
            }
            uint64_t v341 = v330;
            uint64_t v342 = v331;
            *(void *)&long long v332 = &unk_1F2616570;
            int v308 = " [";
            uint64_t v309 = 2;
            sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
            int v308 = "OMP130";
            uint64_t v309 = 6;
            sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
            int v308 = "]";
            uint64_t v309 = 1;
            sub_1CC59ADEC((uint64_t *)&v338, (uint64_t)&v308);
            LODWORD(v309) = DWORD2(v332);
            BYTE4(v309) = BYTE12(v332);
            long long v310 = v333;
            uint64_t v311 = v334;
            long long v312 = v335;
            long long v313 = v336;
            int v308 = (const char *)&unk_1F2616800;
            uint64_t v314 = v337;
            uint64_t v315 = v317;
            uint64_t v316 = 0x400000000;
            unsigned int v133 = v339;
            if (v339)
            {
              sub_1CD494D68((uint64_t)&v315, (uint64_t)&v338);
              unsigned int v133 = v339;
            }
            uint64_t v318 = v341;
            uint64_t v319 = v342;
            int v308 = (const char *)&unk_1F2616570;
            *(void *)&long long v332 = &unk_1F2616800;
            uint64_t v134 = (char *)v338;
            if (v133)
            {
              unint64_t v135 = (unint64_t)v133 << 6;
              do
              {
                int v136 = (void **)&v134[v135];
                if (v134[v135 - 17] < 0) {
                  operator delete(*(v136 - 5));
                }
                if (*((char *)v136 - 41) < 0) {
                  operator delete(*(v136 - 8));
                }
                v135 -= 64;
              }
              while (v135);
              uint64_t v134 = (char *)v338;
            }
            if (v134 != v340) {
              free(v134);
            }
            unint64_t v320 = &unk_1F2616800;
            uint64_t v244 = (char *)v327;
            if (v328)
            {
              unint64_t v245 = (unint64_t)v328 << 6;
              do
              {
                uint64_t v246 = (void **)&v244[v245];
                if (v244[v245 - 17] < 0) {
                  operator delete(*(v246 - 5));
                }
                if (*((char *)v246 - 41) < 0) {
                  operator delete(*(v246 - 8));
                }
                v245 -= 64;
              }
              while (v245);
              uint64_t v244 = (char *)v327;
            }
            if (v244 != v329) {
              free(v244);
            }
            llvm::OptimizationRemarkEmitter::emit(v131, (llvm::DiagnosticInfoOptimizationBase *)&v308);
            int v308 = (const char *)&unk_1F2616800;
            int v247 = (char *)v315;
            if (v316)
            {
              unint64_t v248 = (unint64_t)v316 << 6;
              do
              {
                uint64_t v249 = (void **)&v247[v248];
                if (v247[v248 - 17] < 0) {
                  operator delete(*(v249 - 5));
                }
                if (*((char *)v249 - 41) < 0) {
                  operator delete(*(v249 - 8));
                }
                v248 -= 64;
              }
              while (v248);
              int v247 = (char *)v315;
            }
            if (v247 != v317) {
              free(v247);
            }
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC98FDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_1CC985D58((uint64_t)v31, v4);
  v30[0] = a2;
  v30[1] = a1;
  unsigned __int8 v29 = 0;
  if (*(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a1 + 184)
    && (llvm::Attributor::checkForAllReadWriteInstructions(a2, (unsigned int (*)(uint64_t, uint64_t))sub_1CC990784, (uint64_t)v30, a1, &v29) & 1) == 0)
  {
    *(unsigned char *)(a1 + 185) = *(unsigned char *)(a1 + 184);
  }
  if (*(unsigned char *)(a1 + 256))
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 88) + 25688;
    uint64_t v23 = a2;
    uint64_t v24 = v5;
    int v25 = (char *)a1;
    if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1CC990994, (uint64_t)&v23, a1, 1, v41) & 1) == 0)*(unsigned char *)(a1 + 337) = *(unsigned char *)(a1 + 336); {
    LOBYTE(v41[0]) = 1;
    }
    uint64_t v23 = a2;
    uint64_t v24 = a1;
    if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1CC990B90, (uint64_t)&v23, a1, 1, v41) & 1) == 0)*(unsigned char *)(a1 + 273) = *(unsigned char *)(a1 + 272); {
    char v6 = LOBYTE(v41[0]) ^ 1;
    }
    if (*(unsigned char *)(a1 + 337) && *(unsigned char *)(a1 + 273))
    {
      if (*(void *)(a1 + 216) != *(void *)(a1 + 224))
      {
        int v15 = *(uint64_t **)(a1 + 304);
        uint64_t v16 = *(uint64_t **)(a1 + 312);
        if (v15 != v16)
        {
          int v17 = 0;
          int v18 = 0;
          do
          {
            uint64_t v19 = *v15++;
            uint64_t v20 = sub_1CC9837EC(a2, v19, 0, a1, 1, 1);
            if (*((unsigned char *)v20 + 185)) {
              ++v17;
            }
            else {
              ++v18;
            }
            if (*((unsigned __int8 *)v20 + 185) != *((unsigned __int8 *)v20 + 184)) {
              char v6 = 1;
            }
          }
          while (v15 != v16);
          if (v17) {
            BOOL v21 = v18 == 0;
          }
          else {
            BOOL v21 = 1;
          }
          if (!v21) {
            *(unsigned char *)(a1 + 185) = *(unsigned char *)(a1 + 184);
          }
        }
        v6 &= 1u;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 185) = *(unsigned char *)(a1 + 184);
    }
    BOOL v7 = v6 != 0;
  }
  char v28 = 1;
  char v27 = 1;
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  int v25 = &v27;
  uint64_t v26 = &v28;
  uint64_t v42 = 0xB00000005;
  int v43 = 56;
  v41[0] = &v42;
  v41[1] = 3;
  unint64_t v8 = sub_1CD648A0C((llvm::IRPosition *)(a1 + 16));
  if (llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1CC990DB4, (uint64_t)&v23, v8, a1, (uint64_t)v41, &v22, 0, 0))
  {
    int v9 = v22;
    if (!v22 && v28)
    {
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 57);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a1 + 121);
    }
    if (*(unsigned char *)(a1 + 256)
      && *(unsigned __int8 *)(a1 + 121) == *(unsigned __int8 *)(a1 + 120)
      && *(unsigned char *)(a1 + 57)
      && *(unsigned char *)(a1 + 121)
      && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a1 + 56)
      && *(void *)(a1 + 88) == *(void *)(a1 + 96)
      && *(void *)(a1 + 152) == *(void *)(a1 + 160))
    {
      *(unsigned char *)(a1 + 185) = *(unsigned char *)(a1 + 184);
    }
    if (v29 | v9) {
      char v10 = 1;
    }
    else {
      char v10 = v7;
    }
    if ((v10 & 1) == 0 && v27) {
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a1 + 185);
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    uint64_t v12 = sub_1CC985C4C((uint64_t)v31, v11);
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 40))();
  }
  uint64_t v13 = v12;
  v31[0] = &unk_1F2629A28;
  uint64_t v39 = &unk_1F2629B88;
  sub_1CD6762B4(v40);
  v36[9] = &unk_1F2629A68;
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  MEMORY[0x1D25D9CD0](v36[11], 8);
  v35[6] = &unk_1F2629B28;
  sub_1CD456CB4(v36);
  unint64_t v34 = &unk_1F2629AC8;
  sub_1CD456CB4(v35);
  void v31[2] = &unk_1F2629A68;
  if (__p)
  {
    BOOL v33 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v31[4], 8);
  return v13;
}

void *sub_1CC990270(uint64_t a1)
{
  return sub_1CC987FD0((void *)(a1 - 32));
}

void sub_1CC990278(uint64_t a1)
{
  sub_1CC987FD0((void *)(a1 - 32));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC9902B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(v2 + 240) = sub_1CC9902E8(a2, *(void *)(a1 + 8));
  return 0;
}

uint64_t sub_1CC9902E8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = a1[3];
  if (!result) {
    return 0;
  }
  if (*(unsigned char *)(result + 16) != 84 || result - 32 != (void)a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(result + 20);
  if (v5 < 0 && (*(void *)(result - 32 * (v5 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0) {
    return 0;
  }
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 120);
    if (!v6) {
      return 0;
    }
    uint64_t v7 = *a1;
    if (!v7 || *(unsigned char *)(v7 + 16) || *(void *)(v7 + 24) != *(void *)(result + 72)) {
      uint64_t v7 = 0;
    }
    if (v7 != v6) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC990368(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(v2 + 248) = sub_1CC9902E8(a2, *(void *)(a1 + 8));
  return 0;
}

void sub_1CC9903A0()
{
}

__n128 sub_1CC9903B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2629DE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC990400(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2629DE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1CC990430(uint64_t a1, void *a2, uint64_t *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 57)) {
    BOOL v6 = byte_1EBCE1ED8 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 0;
  }
  uint64_t v9 = *a3;
  uint64_t v10 = v5 + 32;
  if (v9) {
    llvm::Attributor::recordDependence(*(void *)(a1 + 16), v5, v9, 1);
  }
  *a4 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10) ^ 1;
  unint64_t v12 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a2 & 3) == 0) {
    unint64_t v12 = *(void *)(v12 + 24);
  }
  return llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v12, 0, v11);
}

void sub_1CC9904FC()
{
}

__n128 sub_1CC990510(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2629E28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC99055C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2629E28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1CC99058C(uint64_t a1, void *a2, const llvm::APInt *a3, char *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v4 + 185)) {
    return 0;
  }
  if (*(unsigned char *)(v4 + 184))
  {
    char v7 = 0;
  }
  else
  {
    a3 = *(const llvm::APInt **)a3;
    char v7 = 1;
    if (a3) {
      llvm::Attributor::recordDependence(*(void *)(a1 + 16), v4, (uint64_t)a3, 1);
    }
  }
  *a4 = v7;
  uint64_t v9 = (void *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((~*(_DWORD *)a2 & 3) == 0) {
    uint64_t v9 = (void *)v9[3];
  }
  if (*(unsigned char *)(v4 + 185)) {
    unint64_t v10 = 2;
  }
  else {
    unint64_t v10 = 1;
  }
  return llvm::ConstantInt::getSigned((llvm::ConstantInt *)(**(void **)*v9 + 1912), v10, a3);
}

void sub_1CC990648()
{
}

__n128 sub_1CC99065C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2629E70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC9906A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2629E70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1CC9906D8(uint64_t a1, void *a2, const llvm::APInt *a3, char *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v4 + 185)) {
    return 0;
  }
  if (*(unsigned char *)(v4 + 184))
  {
    char v7 = 0;
  }
  else
  {
    a3 = *(const llvm::APInt **)a3;
    char v7 = 1;
    if (a3) {
      llvm::Attributor::recordDependence(*(void *)(a1 + 16), v4, (uint64_t)a3, 1);
    }
  }
  *a4 = v7;
  unint64_t v9 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a2 & 3) == 0) {
    unint64_t v9 = *(void *)(v9 + 24);
  }
  return llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v9, (llvm::LLVMContext *)(*(unsigned char *)(v4 + 185) == 0), a3);
}

uint64_t sub_1CC990784(uint64_t *a1, uint64_t a2)
{
  v20[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned __int8 *)(a2 + 16) - 37;
  if (v2 <= 0x33)
  {
    uint64_t v5 = a1[1];
    if (v2 == 23)
    {
      if ((*(_WORD *)(a2 + 18) & 0x301) == 0) {
        return 1;
      }
      goto LABEL_7;
    }
    if (v2 != 24)
    {
      if (((1 << (*(unsigned char *)(a2 + 16) - 37)) & 0x808001C000001) == 0) {
        return 1;
      }
LABEL_7:
      int v18 = (void *)a2;
      sub_1CC27C13C((void *)(v5 + 192), &v18);
      return 1;
    }
    int v18 = v20;
    uint64_t v19 = 0x600000000;
    llvm::getUnderlyingObjects(*(void *)(a2 - 32), (uint64_t)&v18, 0, (llvm::Value *)6);
    char v7 = (char *)v18;
    if (v19)
    {
      uint64_t v8 = 0;
      while (*(unsigned char *)(*(void *)((char *)v18 + v8) + 16) == 59)
      {
        v8 += 8;
        if (8 * v19 == v8) {
          goto LABEL_12;
        }
      }
      int v9 = 1;
      unint64_t v10 = sub_1CC8B9784(*a1, *(void *)(*(void *)(a2 + 40) + 56), 0, v5, 1, 0, 1);
      char v7 = (char *)v18;
      if (v19)
      {
        uint64_t v11 = v10;
        uint64_t v12 = 8 * v19;
        while (1)
        {
          unsigned int v13 = *(unsigned __int8 *)(*(void *)v7 + 16);
          if (v13 < 0x1C) {
            break;
          }
          unsigned int v14 = v13 - 33;
          BOOL v15 = v14 > 0x33;
          uint64_t v16 = (1 << v14) & 0x8000000000041;
          BOOL v17 = v15 || v16 == 0;
          if (v17 || ((*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v11 + 112))(v11) & 1) == 0) {
            break;
          }
          v7 += 8;
          v12 -= 8;
          if (!v12)
          {
            int v9 = 1;
            goto LABEL_24;
          }
        }
        int v9 = 0;
LABEL_24:
        char v7 = (char *)v18;
      }
    }
    else
    {
LABEL_12:
      int v9 = 1;
    }
    if (v7 != (char *)v20) {
      free(v7);
    }
    if (!v9) {
      goto LABEL_7;
    }
  }
  return 1;
}

uint64_t sub_1CC990994(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v24 = *a2;
  v25[0] = v26;
  v25[1] = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1CD41B598((uint64_t)v25, (uint64_t)(a2 + 1));
    uint64_t v3 = v24;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(*(void *)(v3 + 40) + 56);
  BOOL v6 = sub_1CC9837EC(*a1, v5, 0, 0, 2, 1);
  if (!*((unsigned char *)v6 + 337) || v5 == *(void *)(a1[1] + 120))
  {
    *(unsigned char *)(v4 + 337) = *(unsigned char *)(v4 + 336);
  }
  else
  {
    char v7 = v6;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 + 328) + 48))(v4 + 328, 1);
    uint64_t v8 = (unsigned __int8 *)*((void *)v7 + 46);
    for (uint64_t i = (unsigned __int8 *)*((void *)v7 + 47); v8 != i; ++v8)
    {
      sub_1CD67633C((uint64_t)v26, v4 + 344, v8);
      if (v26[16])
      {
        uint64_t v11 = *(unsigned __int8 **)(v4 + 376);
        unint64_t v10 = *(void *)(v4 + 384);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v13 = *(void *)(v4 + 368);
          unsigned int v14 = &v11[-v13];
          uint64_t v15 = (uint64_t)&v11[-v13 + 1];
          if (v15 < 0) {
            abort();
          }
          unint64_t v16 = v10 - v13;
          if (2 * v16 > v15) {
            uint64_t v15 = 2 * v16;
          }
          if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v17 = v15;
          }
          if (v17) {
            int v18 = (char *)operator new(v17);
          }
          else {
            int v18 = 0;
          }
          uint64_t v19 = (char *)&v14[(void)v18];
          uint64_t v20 = &v14[(void)v18];
          *uint64_t v20 = *v8;
          uint64_t v12 = v20 + 1;
          if (v11 != (unsigned __int8 *)v13)
          {
            BOOL v21 = &v11[~v13];
            do
            {
              unsigned __int8 v22 = *--v11;
              (v21--)[(void)v18] = v22;
            }
            while (v11 != (unsigned __int8 *)v13);
            uint64_t v11 = *(unsigned __int8 **)(v4 + 368);
            uint64_t v19 = v18;
          }
          *(void *)(v4 + 368) = v19;
          *(void *)(v4 + 376) = v12;
          *(void *)(v4 + 384) = &v18[v17];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *uint64_t v11 = *v8;
          uint64_t v12 = v11 + 1;
        }
        *(void *)(v4 + 376) = v12;
      }
    }
  }
  if (v25[0] != v26) {
    free(v25[0]);
  }
  return 1;
}

uint64_t sub_1CC990B90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v8 = *a2;
  v9[0] = &v10;
  v9[1] = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1CD41B598((uint64_t)v9, (uint64_t)(a2 + 1));
    uint64_t v3 = v8;
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = sub_1CC9837EC(*a1, *(void *)(*(void *)(v3 + 40) + 56), 0, v4, 0, 1);
  if (*((unsigned char *)v5 + 273))
  {
    BOOL v6 = v5;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 + 264) + 48))(v4 + 264, 1);
    sub_1CC990C74((void *)(v4 + 280), *((void **)v6 + 38), *((void **)v6 + 39));
  }
  else
  {
    *(unsigned char *)(v4 + 273) = *(unsigned char *)(v4 + 272);
  }
  if (v9[0] != &v10) {
    free(v9[0]);
  }
  return 1;
}

void sub_1CC990C74(void *a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      sub_1CD651F58((uint64_t)a1, v4, (uint64_t)v17);
      if (v17[16])
      {
        char v7 = (void *)a1[4];
        unint64_t v6 = a1[5];
        if ((unint64_t)v7 >= v6)
        {
          int v9 = (void *)a1[3];
          uint64_t v10 = v7 - v9;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61) {
            abort();
          }
          uint64_t v12 = v6 - (void)v9;
          if (v12 >> 2 > v11) {
            unint64_t v11 = v12 >> 2;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            if (v13 >> 61) {
              sub_1CB833614();
            }
            unsigned int v14 = (char *)operator new(8 * v13);
          }
          else
          {
            unsigned int v14 = 0;
          }
          uint64_t v15 = &v14[8 * v10];
          *(void *)uint64_t v15 = *v4;
          uint64_t v8 = v15 + 8;
          if (v7 != v9)
          {
            do
            {
              uint64_t v16 = *--v7;
              *((void *)v15 - 1) = v16;
              v15 -= 8;
            }
            while (v7 != v9);
            char v7 = (void *)a1[3];
          }
          a1[3] = v15;
          a1[4] = v8;
          a1[5] = &v14[8 * v13];
          if (v7) {
            operator delete(v7);
          }
        }
        else
        {
          *char v7 = *v4;
          uint64_t v8 = v7 + 1;
        }
        a1[4] = v8;
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CC990DB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (unsigned __int8 *)sub_1CC9837EC(*a1, a2, 0, v2, 1, 1);
  uint64_t v4 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v3 + 48))(v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  unint64_t v6 = v5;
  uint64_t v7 = *(void *)(v4 + 208);
  if (v7) {
    v5[26] = v7;
  }
  uint64_t v8 = *(void *)(v4 + 216);
  if (v8) {
    v5[27] = v8;
  }
  (*(void (**)(void *, void))(v5[18] + 48))(v5 + 18, *(unsigned __int8 *)(v4 + 153));
  int v9 = *(void **)(v4 + 184);
  for (uint64_t i = *(void **)(v4 + 192); v9 != i; ++v9)
  {
    sub_1CD50F67C((uint64_t)(v6 + 20), v9, (uint64_t)v43);
    if ((_BYTE)v44)
    {
      uint64_t v12 = (void *)v6[24];
      unint64_t v11 = v6[25];
      if ((unint64_t)v12 >= v11)
      {
        unsigned int v14 = (void *)v6[23];
        uint64_t v15 = v12 - v14;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
LABEL_66:
        }
          abort();
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 >> 61) {
LABEL_67:
          }
            sub_1CB833614();
          uint64_t v19 = (char *)operator new(8 * v18);
        }
        else
        {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v19[8 * v15];
        *(void *)uint64_t v20 = *v9;
        unint64_t v13 = v20 + 8;
        if (v12 != v14)
        {
          do
          {
            uint64_t v21 = *--v12;
            *((void *)v20 - 1) = v21;
            v20 -= 8;
          }
          while (v12 != v14);
          uint64_t v12 = (void *)v6[23];
        }
        v6[23] = v20;
        v6[24] = v13;
        v6[25] = &v19[8 * v18];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        void *v12 = *v9;
        unint64_t v13 = v12 + 1;
      }
      v6[24] = v13;
    }
  }
  (*(void (**)(void *, void))(v6[2] + 48))(v6 + 2, *(unsigned __int8 *)(v4 + 25));
  sub_1CC990C74(v6 + 4, *(void **)(v4 + 56), *(void **)(v4 + 64));
  (*(void (**)(void *, void))(v6[10] + 48))(v6 + 10, *(unsigned __int8 *)(v4 + 89));
  unsigned __int8 v22 = *(uint64_t **)(v4 + 120);
  for (uint64_t j = *(uint64_t **)(v4 + 128); v22 != j; ++v22)
  {
    sub_1CD4C96F8((uint64_t)v43, (uint64_t)(v6 + 12), v22);
    if ((_BYTE)v44)
    {
      int v25 = (uint64_t *)v6[16];
      unint64_t v24 = v6[17];
      if ((unint64_t)v25 >= v24)
      {
        char v27 = (void *)v6[15];
        uint64_t v28 = v25 - v27;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61) {
          goto LABEL_66;
        }
        uint64_t v30 = v24 - (void)v27;
        if (v30 >> 2 > v29) {
          unint64_t v29 = v30 >> 2;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          if (v31 >> 61) {
            goto LABEL_67;
          }
          unint64_t v32 = (char *)operator new(8 * v31);
        }
        else
        {
          unint64_t v32 = 0;
        }
        BOOL v33 = (uint64_t *)&v32[8 * v28];
        uint64_t *v33 = *v22;
        uint64_t v26 = v33 + 1;
        if (v25 != v27)
        {
          do
          {
            uint64_t v34 = *--v25;
            *--BOOL v33 = v34;
          }
          while (v25 != v27);
          int v25 = (uint64_t *)v6[15];
        }
        v6[15] = v33;
        v6[16] = v26;
        v6[17] = &v32[8 * v31];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *int v25 = *v22;
        uint64_t v26 = v25 + 1;
      }
      v6[16] = v26;
    }
  }
  sub_1CC985D58((uint64_t)v43, (uint64_t)v6);
  v43[0] = &unk_1F2629A28;
  int v53 = &unk_1F2629B88;
  sub_1CD6762B4(v54);
  v50[9] = &unk_1F2629A68;
  if (__p)
  {
    int v52 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v50[11], 8);
  v49[6] = &unk_1F2629B28;
  sub_1CD456CB4(v50);
  uint64_t v48 = &unk_1F2629AC8;
  sub_1CD456CB4(v49);
  uint64_t v44 = &unk_1F2629A68;
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  MEMORY[0x1D25D9CD0](v45, 8);
  uint64_t v35 = (BOOL *)a1[2];
  BOOL v37 = v3[185] == v3[184] && *v35;
  BOOL *v35 = v37;
  uint64_t v38 = (BOOL *)a1[3];
  BOOL v40 = v3[57] == v3[56] && *v38;
  BOOL *v38 = v40;
  if (v3[121] != v3[120]) {
    BOOL v40 = 0;
  }
  BOOL *v38 = v40;
  return 1;
}

uint64_t sub_1CC991280(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = sub_1CC9902E8(a2, *a1);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1[1] + 72);
  *(void *)&long long v46 = v3 | 1;
  *((void *)&v46 + 1) = 0;
  std::string __p = &unk_1CFB274A2;
  long long v48 = v3 | 1uLL;
  v44[0] = 0;
  if (sub_1CD64CDF0((uint64_t *)(v5 + 32), (uint64_t)&__p, (uint64_t **)v44))
  {
    if (*((void *)v44[0] + 3)) {
      return 0;
    }
  }
  if (sub_1CD647DEC(&v46) == 3)
  {
    uint64_t v6 = *(void *)(v5 + 24);
    *(void *)(v6 + 80) += 72;
    if (((*(void *)v6 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v6 + 72 > *(void *)(v6 + 8) - *(void *)v6)
    {
      unsigned int v41 = *(_DWORD *)(v6 + 24) >> 7;
      if (v41 >= 0x1E) {
        LOBYTE(v41) = 30;
      }
      uint64_t v42 = 4096 << v41;
      uint64_t v7 = (uint64_t)operator new(4096 << v41, (std::align_val_t)8uLL);
      unsigned int v43 = *(_DWORD *)(v6 + 24);
      if (v43 >= *(_DWORD *)(v6 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v6 + 16) + 8 * v43) = v7;
      ++*(_DWORD *)(v6 + 24);
      *(void *)(v6 + 8) = v7 + v42;
    }
    else
    {
      uint64_t v7 = (*(void *)v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)uint64_t v6 = v7 + 72;
    *(_OWORD *)(v7 + 16) = v46;
    *(_WORD *)(v7 + 40) = 256;
    *(void *)uint64_t v7 = &unk_1F2629EB8;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 32) = &unk_1F2629F40;
    *(unsigned char *)(v7 + 48) = 0;
    *(unsigned char *)(v7 + 56) = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string __p = &unk_1CFB274A2;
  long long v48 = *(_OWORD *)(v7 + 16);
  sub_1CD64CF70((uint64_t *)(v5 + 32), (uint64_t)&__p)[3] = v7;
  if (*(_DWORD *)(v5 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(v5 + 104), v7);
  }
  uint64_t v8 = *(uint64_t **)(v5 + 5480);
  if (v8)
  {
    std::string __p = &unk_1CFB274A2;
    v44[0] = 0;
    int v9 = sub_1CD420258(v8, &__p, v44) ^ 1;
  }
  else
  {
    int v9 = 0;
  }
  unint64_t v10 = v46 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v46 & 3) == 0) {
    unint64_t v10 = *(void *)(v10 + 24);
  }
  unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
  if (!*(unsigned char *)(v10 + 16)) {
    goto LABEL_22;
  }
  if (v11 == 21)
  {
    uint64_t v12 = (unint64_t *)(v10 + 24);
  }
  else
  {
    if (v11 < 0x1C)
    {
      unint64_t v10 = 0;
      goto LABEL_29;
    }
    uint64_t v12 = (unint64_t *)(*(void *)(v10 + 40) + 56);
  }
  unint64_t v10 = *v12;
  if (!*v12)
  {
LABEL_29:
    char v15 = 1;
    goto LABEL_54;
  }
LABEL_22:
  uint64_t v13 = *(void *)(v10 + 112);
  if (v13 && ((*(unsigned char *)(v13 + 14) & 2) != 0 || (*(unsigned char *)(v13 + 17) & 8) != 0))
  {
    BOOL v14 = 1;
  }
  else if (*(unsigned char *)(v5 + 5464))
  {
    BOOL v14 = 0;
  }
  else
  {
    unint64_t v16 = *(uint64_t **)(v5 + 88);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    if (v17 == *v16)
    {
      uint64_t v19 = *((unsigned int *)v16 + 5);
      uint64_t v20 = (void *)(v17 + 8 * v19);
      if (v19)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 8 * v19;
        while (*(void *)(v17 + v21) != v10)
        {
          v21 += 8;
          if (v22 == v21) {
            goto LABEL_49;
          }
        }
        uint64_t v20 = (void *)(v17 + v21);
      }
LABEL_49:
      uint64_t v18 = v16[1];
    }
    else
    {
      uint64_t v23 = *((unsigned int *)v16 + 4);
      int v24 = v23 - 1;
      unsigned int v25 = (v23 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v20 = (void *)(v17 + 8 * v25);
      uint64_t v26 = *v20;
      if (*v20 == -1)
      {
        char v27 = 0;
LABEL_87:
        if (v27) {
          uint64_t v20 = v27;
        }
        if (*v20 != v10) {
          uint64_t v20 = (void *)(v17 + 8 * v23);
        }
      }
      else
      {
        char v27 = 0;
        int v28 = 1;
        while (v26 != v10)
        {
          if (v27) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == -2;
          }
          if (v29) {
            char v27 = v20;
          }
          unsigned int v30 = v25 + v28++;
          unsigned int v25 = v30 & v24;
          uint64_t v20 = (void *)(v17 + 8 * (v30 & v24));
          uint64_t v26 = *v20;
          if (*v20 == -1) {
            goto LABEL_87;
          }
        }
      }
    }
    BOOL v29 = v17 == v18;
    uint64_t v31 = 16;
    if (v29) {
      uint64_t v31 = 20;
    }
    BOOL v14 = v20 == (void *)(v17 + 8 * *(unsigned int *)((char *)v16 + v31));
  }
  char v15 = 0;
  LOBYTE(v9) = (v14 | v9) != 0;
LABEL_54:
  if ((v9 & 1) != 0 || *(_DWORD *)(v5 + 4372) > llvm::MaxInitializationChainLength) {
    goto LABEL_81;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 72))(v44, v7);
  if (v45 >= 0) {
    size_t v32 = v45 & 0x7F;
  }
  else {
    size_t v32 = (size_t)v44[1];
  }
  p_p = &__p;
  sub_1CB907098((uint64_t)&__p, v32 + 12);
  if (v48 < 0) {
    p_p = __p;
  }
  if (v32)
  {
    if (v45 >= 0) {
      uint64_t v34 = v44;
    }
    else {
      uint64_t v34 = (void **)v44[0];
    }
    memmove(p_p, v34, v32);
  }
  strcpy((char *)p_p + v32, "::initialize");
  uint64_t v35 = (uint64_t *)off_1EC7DFC00();
  if (*v35)
  {
    if (v48 >= 0) {
      uint64_t v36 = &__p;
    }
    else {
      uint64_t v36 = __p;
    }
    if (v48 >= 0) {
      uint64_t v37 = HIBYTE(v48) & 0x7F;
    }
    else {
      uint64_t v37 = v48;
    }
    llvm::timeTraceProfilerBegin((uint64_t)v36, v37, (uint64_t)"", 0);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__p);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  ++*(_DWORD *)(v5 + 4372);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, v5);
  --*(_DWORD *)(v5 + 4372);
  if (*v35)
  {
    sub_1CD84B62C(*v35);
    if (v15) {
      goto LABEL_80;
    }
  }
  else if (v15)
  {
    goto LABEL_80;
  }
  uint64_t v39 = *(uint64_t **)(v5 + 80);
  std::string __p = (void *)v10;
  v44[0] = 0;
  if ((sub_1CD420258(v39, &__p, v44) & 1) == 0)
  {
    BOOL v40 = *(uint64_t **)(v5 + 80);
    std::string __p = (void *)sub_1CD648A0C((llvm::IRPosition *)&v46);
    v44[0] = 0;
    if (!sub_1CD420258(v40, &__p, v44)) {
      goto LABEL_81;
    }
  }
LABEL_80:
  if (*(_DWORD *)(v5 + 4368) == 2)
  {
LABEL_81:
    uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
    (*(void (**)(uint64_t))(*(void *)v38 + 40))(v38);
  }
  return 0;
}

void *sub_1CC991864(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);
  return a1;
}

void sub_1CC9918A8(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC99190C(_DWORD *a1, uint64_t *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (byte_1EBCE1E18) {
    (*(void (**)(_DWORD *))(*(void *)a1 + 112))(a1);
  }
  unint64_t v4 = sub_1CD648A0C((llvm::IRPosition *)(a1 + 4));
  uint64_t v5 = a2[11];
  v10[0] = 0;
  if (sub_1CD40EA84(*(void *)(v5 + 29184), *(_DWORD *)(v5 + 29200), v4, v10)) {
    uint64_t v6 = v10[0];
  }
  else {
    uint64_t v6 = *(void *)(v5 + 29184) + 16 * *(unsigned int *)(v5 + 29200);
  }
  a1[16] = *(_DWORD *)(v6 + 8);
  v9[0] = sub_1CD6482F0((llvm::IRPosition *)(a1 + 4)) | 1;
  v9[1] = 0;
  v10[0] = &unk_1F2629FA0;
  v10[1] = a1;
  uint64_t v10[2] = a2;
  unsigned int v11 = v10;
  uint64_t v7 = sub_1CD65EF00(a2, v9);
  sub_1CC8F1F2C((unsigned int *)v7 + 4, (uint64_t)v10);
  uint64_t result = (uint64_t)v11;
  if (v11 == v10) {
    return (*(uint64_t (**)(void *))(v10[0] + 32))(v10);
  }
  if (v11) {
    return (*(uint64_t (**)(void))(*v11 + 40))();
  }
  return result;
}

void sub_1CC991AA8(uint64_t a1@<X0>, char *a2@<X8>)
{
  if (((*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))() & 1) == 0)
  {
    a2[23] = 9;
    strcpy(a2, "<invalid>");
    return;
  }
  char v13 = 18;
  strcpy(__s, "simplified value: ");
  if (!*(unsigned char *)(a1 + 56))
  {
    *((unsigned char *)&v11.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v11, "none");
LABEL_12:
    uint64_t v8 = __s;
    std::string::size_type v9 = 18;
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4)
  {
    *((unsigned char *)&v11.__r_.__value_.__s + 23) = 7;
    LODWORD(v11.__r_.__value_.__l.__data_) = 1819047278;
    int v7 = 1920233580;
LABEL_11:
    *(_DWORD *)((char *)v11.__r_.__value_.__r.__words + 3) = v7;
    v11.__r_.__value_.__s.__data_[7] = 0;
    goto LABEL_12;
  }
  if (*(unsigned char *)(v4 + 16) != 16)
  {
    *((unsigned char *)&v11.__r_.__value_.__s + 23) = 7;
    LODWORD(v11.__r_.__value_.__l.__data_) = 1852534389;
    int v7 = 1853321070;
    goto LABEL_11;
  }
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  std::to_string(&v11, v6);
  if (v13 >= 0) {
    uint64_t v8 = __s;
  }
  else {
    uint64_t v8 = *(std::string::value_type **)__s;
  }
  if (v13 >= 0) {
    std::string::size_type v9 = v13 & 0x7F;
  }
  else {
    std::string::size_type v9 = *(void *)&__s[8];
  }
LABEL_13:
  unint64_t v10 = std::string::insert(&v11, 0, v8, v9);
  *(std::string *)a2 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(*(void **)__s);
  }
}

void sub_1CC991C68(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "AAFoldRuntimeCall");
}

void *sub_1CC991C8C()
{
  return &unk_1CFB274A2;
}

uint64_t sub_1CC991C98(uint64_t a1, void *a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 56) || !*(void *)(a1 + 48)) {
    return 1;
  }
  unint64_t v5 = sub_1CC8AB830((_DWORD *)(a1 + 16));
  sub_1CD65F304((uint64_t)a2, v5, *(llvm::Value **)(a1 + 48), 1);
  sub_1CD65E620((uint64_t)a2, v5);
  unsigned int v6 = *(unsigned __int8 *)(v5 + 16) - 33;
  BOOL v7 = v6 > 0x33;
  uint64_t v8 = (1 << v6) & 0x8000000000041;
  if (v7 || v8 == 0) {
    return 0;
  }
  if (!byte_1EBCE2298) {
    return 0;
  }
  unint64_t v10 = (uint64_t (*)(void, void))a2[687];
  if (!v10) {
    return 0;
  }
  std::string v11 = (uint64_t ***)v10(a2[688], *(void *)(*(void *)(v5 + 40) + 56));
  uint64_t v12 = *(void *)***v11;
  if (*(void *)(v12 + 128)
    || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(v12 + 72) + 48))(*(void *)(v12 + 72)),
        result))
  {
    llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v66, a2[689], (uint64_t)"OMP180", 6, v5);
    uint64_t v13 = *(void *)(a1 + 48);
    int v14 = *(unsigned __int8 *)(v13 + 16);
    uint64_t v77 = "Replacing OpenMP runtime call ";
    uint64_t v78 = 30;
    sub_1CC59ADEC((uint64_t *)&v74, (uint64_t)&v77);
    char v15 = *(uint64_t ****)(v5 - 32);
    if (v13 && v14 == 16)
    {
      if (!v15 || *((unsigned char *)v15 + 16) || v15[3] != *(uint64_t ***)(v5 + 72)) {
        char v15 = 0;
      }
      if ((*((unsigned char *)v15 + 23) & 0x10) == 0)
      {
        uint64_t v34 = 0;
        BOOL v33 = &byte_1CFBCE98E;
        goto LABEL_39;
      }
      uint64_t v16 = ***v15;
      uint64_t v17 = *(void *)(v16 + 152);
      uint64_t v18 = *(unsigned int *)(v16 + 168);
      if (v18)
      {
        LODWORD(v19) = (v18 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        uint64_t v20 = (uint64_t ****)(v17 + 16 * v19);
        uint64_t v21 = *v20;
        if (*v20 == v15)
        {
LABEL_38:
          size_t v32 = v20[1];
          uint64_t v35 = (uint64_t)*v32;
          BOOL v33 = (char *)(v32 + 2);
          uint64_t v34 = v35;
LABEL_39:
          uint64_t v77 = v33;
          uint64_t v78 = v34;
          sub_1CC59ADEC((uint64_t *)&v74, (uint64_t)&v77);
          uint64_t v77 = " with ";
          uint64_t v78 = 6;
          sub_1CC59ADEC((uint64_t *)&v74, (uint64_t)&v77);
          uint64_t v36 = (unint64_t *)(v13 + 24);
          if (*(_DWORD *)(v13 + 32) >= 0x41u) {
            uint64_t v36 = (unint64_t *)*v36;
          }
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((std::string *)&v57, "FoldedValue", 0xBuLL, *v36);
          uint64_t v37 = sub_1CD3D6290((uint64_t)&v66, &v57);
          uint64_t v77 = ".";
          uint64_t v78 = 1;
          sub_1CC59ADEC((uint64_t *)(v37 + 80), (uint64_t)&v77);
          int v38 = *(_DWORD *)(v37 + 8);
          BYTE4(v78) = *(unsigned char *)(v37 + 12);
          LODWORD(v78) = v38;
          long long v39 = *(_OWORD *)(v37 + 16);
          uint64_t v80 = *(void *)(v37 + 32);
          long long v79 = v39;
          uint64_t v40 = *(void *)(v37 + 72);
          long long v41 = *(_OWORD *)(v37 + 56);
          long long v81 = *(_OWORD *)(v37 + 40);
          long long v82 = v41;
          uint64_t v77 = (const char *)&unk_1F2616800;
          uint64_t v83 = v40;
          std::string v84 = v86;
          uint64_t v85 = 0x400000000;
          if (*(_DWORD *)(v37 + 88)) {
            sub_1CD494D68((uint64_t)&v84, v37 + 80);
          }
          uint64_t v42 = *(void *)(v37 + 360);
          uint64_t v87 = *(void *)(v37 + 352);
          uint64_t v88 = v42;
          uint64_t v77 = (const char *)&unk_1F2616570;
          if (SBYTE7(v60) < 0) {
            operator delete(*((void **)&v58 + 1));
          }
          if (SBYTE7(v58) < 0) {
            operator delete((void *)v57);
          }
LABEL_52:
          *(void *)&long long v57 = " [";
          *((void *)&v57 + 1) = 2;
          sub_1CC59ADEC((uint64_t *)&v84, (uint64_t)&v57);
          *(void *)&long long v57 = "OMP180";
          *((void *)&v57 + 1) = 6;
          sub_1CC59ADEC((uint64_t *)&v84, (uint64_t)&v57);
          *(void *)&long long v57 = "]";
          *((void *)&v57 + 1) = 1;
          sub_1CC59ADEC((uint64_t *)&v84, (uint64_t)&v57);
          DWORD2(v57) = v78;
          BYTE12(v57) = BYTE4(v78);
          long long v58 = v79;
          uint64_t v59 = v80;
          *(void *)&long long v57 = &unk_1F2616800;
          long long v60 = v81;
          long long v61 = v82;
          uint64_t v62 = v83;
          uint64_t v63 = v65;
          uint64_t v64 = 0x400000000;
          unsigned int v47 = v85;
          if (v85)
          {
            sub_1CD494D68((uint64_t)&v63, (uint64_t)&v84);
            unsigned int v47 = v85;
          }
          v65[32] = v87;
          v65[33] = v88;
          *(void *)&long long v57 = &unk_1F2616570;
          uint64_t v77 = (const char *)&unk_1F2616800;
          long long v48 = (char *)v84;
          if (v47)
          {
            unint64_t v49 = (unint64_t)v47 << 6;
            do
            {
              uint64_t v50 = (void **)&v48[v49];
              if (v48[v49 - 17] < 0) {
                operator delete(*(v50 - 5));
              }
              if (*((char *)v50 - 41) < 0) {
                operator delete(*(v50 - 8));
              }
              v49 -= 64;
            }
            while (v49);
            long long v48 = (char *)v84;
          }
          if (v48 != v86) {
            free(v48);
          }
          uint64_t v66 = &unk_1F2616800;
          int v51 = (char *)v74;
          if (v75)
          {
            unint64_t v52 = (unint64_t)v75 << 6;
            do
            {
              int v53 = (void **)&v51[v52];
              if (v51[v52 - 17] < 0) {
                operator delete(*(v53 - 5));
              }
              if (*((char *)v53 - 41) < 0) {
                operator delete(*(v53 - 8));
              }
              v52 -= 64;
            }
            while (v52);
            int v51 = (char *)v74;
          }
          if (v51 != (char *)v76) {
            free(v51);
          }
          llvm::OptimizationRemarkEmitter::emit(v11, (llvm::DiagnosticInfoOptimizationBase *)&v57);
          *(void *)&long long v57 = &unk_1F2616800;
          int64_t v54 = (char *)v63;
          if (v64)
          {
            unint64_t v55 = (unint64_t)v64 << 6;
            do
            {
              int v56 = (void **)&v54[v55];
              if (v54[v55 - 17] < 0) {
                operator delete(*(v56 - 5));
              }
              if (*((char *)v56 - 41) < 0) {
                operator delete(*(v56 - 8));
              }
              v55 -= 64;
            }
            while (v55);
            int64_t v54 = (char *)v63;
          }
          if (v54 != (char *)v65) {
            free(v54);
          }
          return 0;
        }
        int v22 = 1;
        while (v21 != (uint64_t ***)-4096)
        {
          int v23 = v19 + v22++;
          uint64_t v19 = v23 & (v18 - 1);
          uint64_t v21 = *(uint64_t ****)(v17 + 16 * v19);
          if (v21 == v15)
          {
            uint64_t v20 = (uint64_t ****)(v17 + 16 * v19);
            goto LABEL_38;
          }
        }
      }
      uint64_t v20 = (uint64_t ****)(v17 + 16 * v18);
      goto LABEL_38;
    }
    if (!v15 || *((unsigned char *)v15 + 16) || v15[3] != *(uint64_t ***)(v5 + 72)) {
      char v15 = 0;
    }
    if ((*((unsigned char *)v15 + 23) & 0x10) == 0)
    {
      uint64_t v45 = 0;
      uint64_t v44 = &byte_1CFBCE98E;
      goto LABEL_49;
    }
    uint64_t v24 = ***v15;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      int v28 = (uint64_t ****)(v25 + 16 * v27);
      BOOL v29 = *v28;
      if (*v28 == v15)
      {
LABEL_48:
        unsigned int v43 = v28[1];
        uint64_t v46 = (uint64_t)*v43;
        uint64_t v44 = (char *)(v43 + 2);
        uint64_t v45 = v46;
LABEL_49:
        uint64_t v77 = v44;
        uint64_t v78 = v45;
        sub_1CC59ADEC((uint64_t *)&v74, (uint64_t)&v77);
        uint64_t v77 = ".";
        uint64_t v78 = 1;
        sub_1CC59ADEC((uint64_t *)&v74, (uint64_t)&v77);
        LODWORD(v78) = v67;
        BYTE4(v78) = v68;
        long long v79 = v69;
        uint64_t v80 = v70;
        long long v81 = v71;
        long long v82 = v72;
        uint64_t v77 = (const char *)&unk_1F2616800;
        uint64_t v83 = v73;
        std::string v84 = v86;
        uint64_t v85 = 0x400000000;
        if (v75) {
          sub_1CD494D68((uint64_t)&v84, (uint64_t)&v74);
        }
        uint64_t v87 = v76[32];
        uint64_t v88 = v76[33];
        uint64_t v77 = (const char *)&unk_1F2616570;
        goto LABEL_52;
      }
      int v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        BOOL v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v15)
        {
          int v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_48;
        }
      }
    }
    int v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_48;
  }
  return result;
}

uint64_t sub_1CC992454(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4 <= 12)
  {
    unint64_t v5 = "omp_target_num_teams";
    size_t v6 = 20;
    goto LABEL_5;
  }
  if (v4 <= 163)
  {
    unint64_t v5 = "omp_target_thread_limit";
    size_t v6 = 23;
LABEL_5:
    return sub_1CC992E50(a1, a2, v5, v6);
  }
  if (v4 == 164)
  {
    uint64_t v8 = *(void **)(a1 + 48);
    int v21 = *(unsigned __int8 *)(a1 + 56);
    int v22 = (void *)(a1 + 16);
    unint64_t v23 = sub_1CD6482A0((_DWORD *)(a1 + 16));
    uint64_t v24 = sub_1CC9837EC(a2, v23, 0, a1, 0, 1);
    if (*((unsigned char *)v24 + 337) && *((unsigned char *)v24 + 273))
    {
      uint64_t v25 = (uint64_t *)*((void *)v24 + 38);
      uint64_t v26 = (uint64_t *)*((void *)v24 + 39);
      if (v25 == v26) {
        return 1;
      }
      int v27 = 0;
      int v28 = 0;
      while (1)
      {
        BOOL v29 = sub_1CC9837EC(a2, *v25, 0, a1, 0, 1);
        if (!*((unsigned char *)v29 + 185)) {
          break;
        }
        v28 += *((unsigned __int8 *)v29 + 184);
        if (!*((unsigned char *)v29 + 184)) {
          ++v27;
        }
        if (++v25 == v26)
        {
          unint64_t v31 = *v22 & 0xFFFFFFFFFFFFFFFCLL;
          if ((~*(_DWORD *)v22 & 3) == 0) {
            unint64_t v31 = *(void *)(v31 + 24);
          }
          uint64_t v32 = ***(void ***)v31;
          BOOL v33 = *(llvm::ConstantInt **)(v32 + 1912);
          if (v27 | v28)
          {
            unint64_t v34 = *(unsigned int *)(v32 + 1920);
            unsigned int v68 = v34 >> 8;
            if (v34 >> 8 > 0x40) {
              operator new[]();
            }
            if (v34 <= 0xFF) {
              LOBYTE(v35) = 0;
            }
            else {
              unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v34) + 63);
            }
            unint64_t v67 = v35 & 1;
          }
          else
          {
            unsigned int v63 = *(_DWORD *)(v32 + 1920);
            unsigned int v68 = v63 >> 8;
            if (v63 >> 8 >= 0x41) {
              operator new[]();
            }
            unint64_t v67 = 0;
          }
          uint64_t v19 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v67, v30);
          if (v68 >= 0x41 && v67) {
            MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
          }
          int v64 = *(unsigned __int8 *)(a1 + 56);
          *(void *)(a1 + 48) = v19;
          if (!v64) {
            *(unsigned char *)(a1 + 56) = 1;
          }
          if (v21) {
            return v19 == v8;
          }
          return 0;
        }
      }
    }
    goto LABEL_66;
  }
  if (v4 != 170)
  {
    uint64_t v36 = *(void *)(a1 + 48);
    int v37 = *(unsigned __int8 *)(a1 + 56);
    int v38 = (void *)(a1 + 16);
    unint64_t v39 = sub_1CD6482A0((_DWORD *)(a1 + 16));
    uint64_t v40 = sub_1CC9837EC(a2, v39, 0, a1, 0, 1);
    if (!*((unsigned char *)v40 + 273)) {
      goto LABEL_66;
    }
    int v65 = v37;
    uint64_t v66 = v36;
    uint64_t v42 = (uint64_t *)*((void *)v40 + 38);
    unsigned int v43 = (uint64_t *)*((void *)v40 + 39);
    if (v42 != v43)
    {
      int v44 = 0;
      int v45 = 0;
      int v46 = 0;
      int v47 = 0;
      while (1)
      {
        long long v48 = sub_1CC9837EC(a2, *v42, 0, a1, 0, 1);
        if (((*(uint64_t (**)(void))(*((void *)v48 + 4) + 16))() & 1) == 0) {
          break;
        }
        if (*((unsigned char *)v48 + 185))
        {
          if (*((unsigned char *)v48 + 184)) {
            ++v45;
          }
          else {
            ++v44;
          }
        }
        else if (*((unsigned char *)v48 + 184))
        {
          ++v46;
        }
        else
        {
          ++v47;
        }
        if (++v42 == v43) {
          goto LABEL_53;
        }
      }
      if (!*(unsigned char *)(a1 + 56)) {
        *(unsigned char *)(a1 + 56) = 1;
      }
      *(void *)(a1 + 48) = 0;
      goto LABEL_66;
    }
    int v47 = 0;
    int v46 = 0;
    int v45 = 0;
    int v44 = 0;
LABEL_53:
    if (v44 + v45 && v46 != -v47) {
      goto LABEL_66;
    }
    unint64_t v49 = *v38 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)v38 & 3) == 0) {
      unint64_t v49 = *(void *)(v49 + 24);
    }
    uint64_t v50 = **(uint64_t ***)v49;
    if (v44 | v45)
    {
      uint64_t v51 = *v50;
      unint64_t v52 = *(llvm::ConstantInt **)(v51 + 1912);
      unint64_t v53 = *(unsigned int *)(v51 + 1920);
      unsigned int v68 = v53 >> 8;
      if (v53 >> 8 > 0x40) {
        operator new[]();
      }
      if (v53 <= 0xFF) {
        LOBYTE(v54) = 0;
      }
      else {
        unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v53) + 63);
      }
      unint64_t v67 = v54 & 1;
      uint64_t v55 = v66;
      int v56 = v65;
    }
    else
    {
      if (!(v47 | v46))
      {
        int v62 = *(unsigned __int8 *)(a1 + 56);
        uint64_t v55 = v66;
        int v56 = v65;
LABEL_84:
        if (!v62 || !v56) {
          return (v56 != 0) ^ (v62 == 0);
        }
        return *(void *)(a1 + 48) == v55;
      }
      uint64_t v58 = *v50;
      unint64_t v52 = *(llvm::ConstantInt **)(v58 + 1912);
      unsigned int v59 = *(_DWORD *)(v58 + 1920);
      unsigned int v68 = v59 >> 8;
      uint64_t v55 = v66;
      int v56 = v65;
      if (v59 >> 8 >= 0x41) {
        operator new[]();
      }
      unint64_t v67 = 0;
    }
    long long v60 = llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v67, v41);
    if (v68 >= 0x41 && v67) {
      MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
    }
    int v61 = *(unsigned __int8 *)(a1 + 56);
    *(void *)(a1 + 48) = v60;
    int v62 = 1;
    if (!v61) {
      *(unsigned char *)(a1 + 56) = 1;
    }
    goto LABEL_84;
  }
  uint64_t v8 = *(void **)(a1 + 48);
  int v9 = *(unsigned __int8 *)(a1 + 56);
  unint64_t v10 = (void *)(a1 + 16);
  unint64_t v11 = sub_1CD6482F0((llvm::IRPosition *)(a1 + 16));
  uint64_t v12 = sub_1CC967EF0(a2, *(void *)(*(void *)(v11 + 40) + 56), 0, a1, 0);
  if ((*(uint64_t (**)(void))(*((void *)v12 + 4) + 16))())
  {
    unint64_t v13 = *v10 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)v10 & 3) == 0) {
      unint64_t v13 = *(void *)(v13 + 24);
    }
    uint64_t v14 = **(void **)v13;
    if ((*(unsigned int (**)(llvm::AbstractAttribute *, unint64_t))(*(void *)v12 + 112))(v12, v11))
    {
      uint64_t v16 = *(llvm::ConstantInt **)(*(void *)v14 + 1912);
      unsigned int v17 = *(_DWORD *)(*(void *)v14 + 1920);
      unsigned int v68 = v17 >> 8;
      if (v17 >> 8 > 0x40) {
        operator new[]();
      }
      if (v17 <= 0xFF) {
        LOBYTE(v18) = 0;
      }
      else {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v17) + 63);
      }
      unint64_t v67 = v18 & 1;
      uint64_t v19 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v67, v15);
      if (v68 >= 0x41 && v67) {
        MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
      }
      if (!*(unsigned char *)(a1 + 56)) {
        *(unsigned char *)(a1 + 56) = 1;
      }
      *(void *)(a1 + 48) = v19;
      if (!v9) {
        return 0;
      }
      return v19 == v8;
    }
  }
LABEL_66:
  long long v57 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 112);

  return v57(a1);
}

uint64_t sub_1CC992C5C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 56)) {
    *(unsigned char *)(a1 + 56) = 1;
  }
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a1 + 40);
  return 0;
}

uint64_t *sub_1CC992C80(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  return sub_1CD64E248((uint64_t *)(a1 - 24));
}

void sub_1CC992CA8(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 - 24));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC992D10(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 8);
  return 0;
}

void sub_1CC992D38()
{
}

__n128 sub_1CC992D4C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2629FA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC992D98(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2629FA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC992DC8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(a1 + 8);
  if (((*(uint64_t (**)(void))(*(void *)(v7 + 32) + 24))() & 1) == 0)
  {
    *a4 = 1;
    if (v6) {
      llvm::Attributor::recordDependence(*(void *)(a1 + 16), v7, v6, 1);
    }
  }
  return *(void *)(v7 + 48);
}

uint64_t sub_1CC992E50(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t v8 = *(void *)(a1 + 48);
  int v9 = *(unsigned __int8 *)(a1 + 56);
  unint64_t v10 = (void *)(a1 + 16);
  unint64_t v11 = sub_1CD6482A0((_DWORD *)(a1 + 16));
  uint64_t v12 = sub_1CC9837EC(a2, v11, 0, a1, 0, 1);
  if (!*((unsigned char *)v12 + 273))
  {
    int v44 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 112);
    return v44(a1);
  }
  unint64_t v13 = (uint64_t *)*((void *)v12 + 38);
  if (v13 == *((uint64_t **)v12 + 39))
  {
    int v45 = *(unsigned __int8 *)(a1 + 56);
    goto LABEL_57;
  }
  int v53 = v9;
  uint64_t v54 = v8;
  uint64_t v55 = (uint64_t *)*((void *)v12 + 39);
  __uint64_t n = a4;
  uint64_t v14 = (uint64_t)a3 + a4;
  int v56 = -1;
  do
  {
    uint64_t v15 = *v13;
    uint64_t v16 = *(void *)(*v13 + 112);
    if (!v16) {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    if (!*(_DWORD *)(v16 + 8)) {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    uint64_t v17 = *(void *)(v16 + 40);
    if (!v17) {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    int v18 = *(_DWORD *)(v17 + 40);
    if (!v18) {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    uint64_t v19 = *(void *)(v17 + 24);
    uint64_t v58 = v14;
    int v20 = sub_1CD0B03C8(a3, v14);
    unsigned int v21 = v18 - 1;
    for (int i = 1; ; ++i)
    {
      int v23 = v20 & v21;
      uint64_t v24 = v19 + 24 * (v20 & v21);
      uint64_t v25 = *(const void **)v24;
      if (*(void *)v24 == -1)
      {
        if (a3 == (void *)-1) {
          goto LABEL_19;
        }
        goto LABEL_11;
      }
      if (v25 != (const void *)-2) {
        break;
      }
      if (a3 == (void *)-2) {
        goto LABEL_19;
      }
LABEL_11:
      if (v25 == (const void *)-1) {
        return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
      }
      int v20 = i + v23;
    }
    if (__n != *(void *)(v24 + 8) || __n && memcmp(a3, v25, __n)) {
      goto LABEL_11;
    }
LABEL_19:
    uint64_t v26 = *(void *)(v15 + 112);
    if (!v26 || !*(_DWORD *)(v26 + 8) || (uint64_t v27 = *(void *)(v26 + 40)) == 0 || (v28 = *(_DWORD *)(v27 + 40)) == 0)
    {
LABEL_38:
      memset(&__str, 0, sizeof(__str));
      goto LABEL_39;
    }
    uint64_t v29 = *(void *)(v27 + 24);
    int v30 = sub_1CD0B03C8(a3, v58);
    unsigned int v31 = v28 - 1;
    int v32 = 1;
    while (2)
    {
      int v33 = v30 & v31;
      uint64_t v34 = v29 + 24 * (v30 & v31);
      unint64_t v35 = *(const void **)v34;
      if (*(void *)v34 == -1)
      {
        if (a3 == (void *)-1) {
          break;
        }
        goto LABEL_26;
      }
      if (v35 == (const void *)-2)
      {
        if (a3 == (void *)-2) {
          break;
        }
        goto LABEL_26;
      }
      if (__n != *(void *)(v34 + 8) || __n && memcmp(a3, *(const void **)v34, __n))
      {
LABEL_26:
        if (v35 == (const void *)-1) {
          goto LABEL_38;
        }
        int v30 = v32 + v33;
        ++v32;
        continue;
      }
      break;
    }
    uint64_t v36 = *(void *)(v34 + 16);
    if (!v36) {
      goto LABEL_38;
    }
    uint64_t v37 = *(unsigned int *)(v36 + 12);
    std::string::size_type v38 = *(unsigned int *)(v36 + 16);
    if (v38 >= 0x17)
    {
      if ((v38 | 7) == 0x17) {
        uint64_t v42 = (v38 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v42 = v38 | 7;
      }
      p_str = operator new(v42 + 1);
      __str.__r_.__value_.__l.__size_ = v38;
      __str.__r_.__value_.__r.__words[2] = v42 - 0x7FFFFFFFFFFFFFFFLL;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
LABEL_50:
      memmove(p_str, (const void *)(v36 + v37 + 25), v38);
      goto LABEL_51;
    }
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = *(_DWORD *)(v36 + 16);
    p_str = &__str;
    if (v38) {
      goto LABEL_50;
    }
LABEL_51:
    *((unsigned char *)p_str + v38) = 0;
LABEL_39:
    int v41 = std::stoi(&__str, 0, 10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v14 = v58;
    if (v41 == -1 || v56 != -1 && v56 != v41) {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    ++v13;
    int v56 = v41;
  }
  while (v13 != v55);
  unint64_t v46 = *v10 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v10 & 3) == 0) {
    unint64_t v46 = *(void *)(v46 + 24);
  }
  uint64_t v47 = ***(void ***)v46;
  long long v48 = *(llvm::ConstantInt **)(v47 + 1960);
  unint64_t v49 = *(unsigned int *)(v47 + 1968);
  LODWORD(__str.__r_.__value_.__r.__words[1]) = v49 >> 8;
  if (v49 >> 8 > 0x40) {
    operator new[]();
  }
  if (v49 <= 0xFF) {
    unint64_t v50 = 0;
  }
  else {
    unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v49) + 63);
  }
  __str.__r_.__value_.__r.__words[0] = v50 & v41;
  uint64_t v51 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&__str, v40);
  int v9 = v53;
  if (LODWORD(__str.__r_.__value_.__r.__words[1]) >= 0x41 && __str.__r_.__value_.__r.__words[0]) {
    MEMORY[0x1D25D9CB0](__str.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
  }
  int v52 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(a1 + 48) = v51;
  int v45 = 1;
  uint64_t v8 = v54;
  if (!v52) {
    *(unsigned char *)(a1 + 56) = 1;
  }
LABEL_57:
  if (v45 && v9) {
    return *(void *)(a1 + 48) == v8;
  }
  else {
    return (v9 != 0) ^ (v45 == 0);
  }
}

uint64_t sub_1CC99330C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = sub_1CC9902E8(a2, *a1);
  if (v3) {
    sub_1CC993360(*(void *)(a1[1] + 72), v3, 0, 0, 2);
  }
  return 0;
}

llvm::AbstractAttribute *sub_1CC993360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (byte_1EBD07860) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = 0;
  }
  *(void *)&long long v71 = a2;
  *((void *)&v71 + 1) = v8;
  std::string __p = &unk_1CFB274A3;
  int v9 = (uint64_t *)(a1 + 32);
  long long v73 = v71;
  v69[0] = 0;
  if (sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&__p, (uint64_t **)v69))
  {
    unint64_t v10 = (llvm::AbstractAttribute *)*((void *)v69[0] + 3);
    if (v10)
    {
      if (!a4 || a5 == 2) {
        return v10;
      }
      goto LABEL_8;
    }
  }
  switch(sub_1CD647DEC(&v71))
  {
    case 2u:
      uint64_t v13 = *(void *)(a1 + 24);
      *(void *)(v13 + 80) += 128;
      if (((*(void *)v13 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v13 + 128 > *(void *)(v13 + 8)
                                                                                  - *(void *)v13)
      {
        unsigned int v57 = *(_DWORD *)(v13 + 24) >> 7;
        if (v57 >= 0x1E) {
          LOBYTE(v57) = 30;
        }
        uint64_t v58 = 4096 << v57;
        unint64_t v10 = (llvm::AbstractAttribute *)operator new(4096 << v57, (std::align_val_t)8uLL);
        unsigned int v59 = *(_DWORD *)(v13 + 24);
        if (v59 >= *(_DWORD *)(v13 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v13 + 16) + 8 * v59) = v10;
        ++*(_DWORD *)(v13 + 24);
        *(void *)(v13 + 8) = (char *)v10 + v58;
      }
      else
      {
        unint64_t v10 = (llvm::AbstractAttribute *)((*(void *)v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v14 = 0;
      *(void *)uint64_t v13 = (char *)v10 + 128;
      *((_OWORD *)v10 + 1) = v71;
      *((_WORD *)v10 + 20) = 256;
      *((_DWORD *)v10 + 11) = 0;
      *(void *)unint64_t v10 = &unk_1F2629FE8;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 4) = &unk_1F262A078;
      do
      {
        uint64_t v15 = (char *)v10 + v14;
        v15[48] = 0;
        v15[56] = 0;
        v14 += 16;
      }
      while (v14 != 80);
      break;
    case 3u:
      uint64_t v16 = *(void *)(a1 + 24);
      *(void *)(v16 + 80) += 128;
      if (((*(void *)v16 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v16 + 128 > *(void *)(v16 + 8)
                                                                                  - *(void *)v16)
      {
        unsigned int v60 = *(_DWORD *)(v16 + 24) >> 7;
        if (v60 >= 0x1E) {
          LOBYTE(v60) = 30;
        }
        uint64_t v61 = 4096 << v60;
        unint64_t v10 = (llvm::AbstractAttribute *)operator new(4096 << v60, (std::align_val_t)8uLL);
        unsigned int v62 = *(_DWORD *)(v16 + 24);
        if (v62 >= *(_DWORD *)(v16 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v16 + 16) + 8 * v62) = v10;
        ++*(_DWORD *)(v16 + 24);
        *(void *)(v16 + 8) = (char *)v10 + v61;
      }
      else
      {
        unint64_t v10 = (llvm::AbstractAttribute *)((*(void *)v16 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v17 = 0;
      *(void *)uint64_t v16 = (char *)v10 + 128;
      *((_OWORD *)v10 + 1) = v71;
      *((_WORD *)v10 + 20) = 256;
      *((_DWORD *)v10 + 11) = 0;
      *(void *)unint64_t v10 = &unk_1F262A0D8;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 4) = &unk_1F262A168;
      do
      {
        int v18 = (char *)v10 + v17;
        v18[48] = 0;
        v18[56] = 0;
        v17 += 16;
      }
      while (v17 != 80);
      break;
    case 4u:
      uint64_t v19 = *(void *)(a1 + 24);
      *(void *)(v19 + 80) += 168;
      if (((*(void *)v19 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v19 + 168 > *(void *)(v19 + 8)
                                                                                  - *(void *)v19)
      {
        unsigned int v63 = *(_DWORD *)(v19 + 24) >> 7;
        if (v63 >= 0x1E) {
          LOBYTE(v63) = 30;
        }
        uint64_t v64 = 4096 << v63;
        unint64_t v10 = (llvm::AbstractAttribute *)operator new(4096 << v63, (std::align_val_t)8uLL);
        unsigned int v65 = *(_DWORD *)(v19 + 24);
        if (v65 >= *(_DWORD *)(v19 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v19 + 16) + 8 * v65) = v10;
        ++*(_DWORD *)(v19 + 24);
        *(void *)(v19 + 8) = (char *)v10 + v64;
      }
      else
      {
        unint64_t v10 = (llvm::AbstractAttribute *)((*(void *)v19 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      *(void *)uint64_t v19 = (char *)v10 + 168;
      *((_OWORD *)v10 + 1) = v71;
      *((_WORD *)v10 + 20) = 256;
      *((_DWORD *)v10 + 11) = 0;
      *(void *)unint64_t v10 = &unk_1F262A2B8;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 4) = &unk_1F262A348;
      for (uint64_t i = 48; i != 168; i += 24)
      {
        unsigned int v21 = (char *)v10 + i;
        *(void *)unsigned int v21 = 0;
        *((void *)v21 + 1) = 0;
        *((_DWORD *)v21 + 4) = 0;
      }
      break;
    case 5u:
      uint64_t v22 = *(void *)(a1 + 24);
      *(void *)(v22 + 80) += 72;
      if (((*(void *)v22 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v22 + 72 > *(void *)(v22 + 8) - *(void *)v22)
      {
        unsigned int v66 = *(_DWORD *)(v22 + 24) >> 7;
        if (v66 >= 0x1E) {
          LOBYTE(v66) = 30;
        }
        uint64_t v67 = 4096 << v66;
        unint64_t v10 = (llvm::AbstractAttribute *)operator new(4096 << v66, (std::align_val_t)8uLL);
        unsigned int v68 = *(_DWORD *)(v22 + 24);
        if (v68 >= *(_DWORD *)(v22 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v22 + 16) + 8 * v68) = v10;
        ++*(_DWORD *)(v22 + 24);
        *(void *)(v22 + 8) = (char *)v10 + v67;
      }
      else
      {
        unint64_t v10 = (llvm::AbstractAttribute *)((*(void *)v22 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      *(void *)uint64_t v22 = (char *)v10 + 72;
      *((_OWORD *)v10 + 1) = v71;
      *((_WORD *)v10 + 20) = 256;
      *((_DWORD *)v10 + 11) = 0;
      *(void *)unint64_t v10 = &unk_1F262A1C8;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 4) = &unk_1F262A258;
      *((unsigned char *)v10 + 56) = 0;
      *((unsigned char *)v10 + 64) = 0;
      break;
    default:
      unint64_t v10 = 0;
      break;
  }
  std::string __p = &unk_1CFB274A3;
  long long v73 = *((_OWORD *)v10 + 1);
  sub_1CD64CF70(v9, (uint64_t)&__p)[3] = (uint64_t)v10;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), (uint64_t)v10);
  }
  int v23 = *(uint64_t **)(a1 + 5480);
  if (v23)
  {
    std::string __p = &unk_1CFB274A3;
    v69[0] = 0;
    int v24 = sub_1CD420258(v23, &__p, v69) ^ 1;
  }
  else
  {
    int v24 = 0;
  }
  unint64_t v25 = v71 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v71 & 3) == 0) {
    unint64_t v25 = *(void *)(v25 + 24);
  }
  unsigned int v26 = *(unsigned __int8 *)(v25 + 16);
  if (!*(unsigned char *)(v25 + 16))
  {
LABEL_43:
    uint64_t v28 = *(void *)(v25 + 112);
    if (v28 && ((*(unsigned char *)(v28 + 14) & 2) != 0 || (*(unsigned char *)(v28 + 17) & 8) != 0))
    {
      BOOL v29 = 1;
    }
    else if (*(unsigned char *)(a1 + 5464))
    {
      BOOL v29 = 0;
    }
    else
    {
      unsigned int v31 = *(uint64_t **)(a1 + 88);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      if (v32 == *v31)
      {
        uint64_t v34 = *((unsigned int *)v31 + 5);
        unint64_t v35 = (void *)(v32 + 8 * v34);
        if (v34)
        {
          uint64_t v36 = 0;
          uint64_t v37 = 8 * v34;
          while (*(void *)(v32 + v36) != v25)
          {
            v36 += 8;
            if (v37 == v36) {
              goto LABEL_71;
            }
          }
          unint64_t v35 = (void *)(v32 + v36);
        }
LABEL_71:
        uint64_t v33 = v31[1];
      }
      else
      {
        uint64_t v38 = *((unsigned int *)v31 + 4);
        int v39 = v38 - 1;
        unsigned int v40 = (v38 - 1) & ((v25 >> 4) ^ (v25 >> 9));
        unint64_t v35 = (void *)(v32 + 8 * v40);
        uint64_t v41 = *v35;
        if (*v35 == -1)
        {
          uint64_t v42 = 0;
LABEL_110:
          if (v42) {
            unint64_t v35 = v42;
          }
          if (*v35 != v25) {
            unint64_t v35 = (void *)(v32 + 8 * v38);
          }
        }
        else
        {
          uint64_t v42 = 0;
          int v43 = 1;
          while (v41 != v25)
          {
            if (v42) {
              BOOL v44 = 0;
            }
            else {
              BOOL v44 = v41 == -2;
            }
            if (v44) {
              uint64_t v42 = v35;
            }
            unsigned int v45 = v40 + v43++;
            unsigned int v40 = v45 & v39;
            unint64_t v35 = (void *)(v32 + 8 * (v45 & v39));
            uint64_t v41 = *v35;
            if (*v35 == -1) {
              goto LABEL_110;
            }
          }
        }
      }
      BOOL v44 = v32 == v33;
      uint64_t v46 = 16;
      if (v44) {
        uint64_t v46 = 20;
      }
      BOOL v29 = v35 == (void *)(v32 + 8 * *(unsigned int *)((char *)v31 + v46));
    }
    char v30 = 0;
    if (v29 | v24) {
      goto LABEL_102;
    }
    goto LABEL_76;
  }
  if (v26 == 21)
  {
    uint64_t v27 = (unint64_t *)(v25 + 24);
  }
  else
  {
    if (v26 < 0x1C)
    {
      unint64_t v25 = 0;
      goto LABEL_50;
    }
    uint64_t v27 = (unint64_t *)(*(void *)(v25 + 40) + 56);
  }
  unint64_t v25 = *v27;
  if (*v27) {
    goto LABEL_43;
  }
LABEL_50:
  char v30 = 1;
  if (v24) {
    goto LABEL_102;
  }
LABEL_76:
  if (*(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
  {
LABEL_102:
    uint64_t v54 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(void *)v54 + 40))(v54);
    return v10;
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(void *)v10 + 72))(v69, v10);
  if (v70 >= 0) {
    size_t v47 = v70 & 0x7F;
  }
  else {
    size_t v47 = (size_t)v69[1];
  }
  p_p = &__p;
  sub_1CB907098((uint64_t)&__p, v47 + 12);
  if (v73 < 0) {
    p_p = __p;
  }
  if (v47)
  {
    if (v70 >= 0) {
      unint64_t v49 = v69;
    }
    else {
      unint64_t v49 = (void **)v69[0];
    }
    memmove(p_p, v49, v47);
  }
  strcpy((char *)p_p + v47, "::initialize");
  unint64_t v50 = (uint64_t *)off_1EC7DFC00();
  if (*v50)
  {
    if (v73 >= 0) {
      uint64_t v51 = &__p;
    }
    else {
      uint64_t v51 = __p;
    }
    if (v73 >= 0) {
      uint64_t v52 = HIBYTE(v73) & 0x7F;
    }
    else {
      uint64_t v52 = v73;
    }
    llvm::timeTraceProfilerBegin((uint64_t)v51, v52, (uint64_t)"", 0);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete(__p);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(void *)v10 + 24))(v10, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v50)
  {
    sub_1CD84B62C(*v50);
    if (v30) {
      goto LABEL_101;
    }
  }
  else if (v30)
  {
    goto LABEL_101;
  }
  uint64_t v55 = *(uint64_t **)(a1 + 80);
  std::string __p = (void *)v25;
  v69[0] = 0;
  if ((sub_1CD420258(v55, &__p, v69) & 1) == 0)
  {
    int v56 = *(uint64_t **)(a1 + 80);
    std::string __p = (void *)sub_1CD648A0C((llvm::IRPosition *)&v71);
    v69[0] = 0;
    if ((sub_1CD420258(v56, &__p, v69) & 1) == 0) {
      goto LABEL_102;
    }
  }
LABEL_101:
  int v53 = *(_DWORD *)(a1 + 4368);
  if (v53 == 2) {
    goto LABEL_102;
  }
  *(_DWORD *)(a1 + 4368) = 1;
  llvm::Attributor::updateAA((llvm::Attributor *)a1, v10);
  *(_DWORD *)(a1 + 4368) = v53;
  if (!a4) {
    return v10;
  }
LABEL_8:
  uint64_t v11 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v10 + 40))(v10);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
    llvm::Attributor::recordDependence(a1, (uint64_t)v10, a4, a5);
  }
  return v10;
}

void *sub_1CC993D68(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);
  return a1;
}

void sub_1CC993DAC(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC993E10(uint64_t a1, uint64_t a2)
{
  int v4 = (llvm::GlobalValue *)sub_1CD6482A0((_DWORD *)(a1 + 16));
  if (!v4 || (uint64_t result = sub_1CD64EF44(a2, v4), (result & 1) == 0))
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 40);
    return v5(a1 + 32);
  }
  return result;
}

double sub_1CC993E90@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_1CD96DBE0;
  strcpy(v2, "ICVTrackerFunctionReturned");
  return *(double *)"FunctionReturned";
}

void sub_1CC993EE4(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "AAICVTracker");
}

void *sub_1CC993F10()
{
  return &unk_1CFB274A3;
}

uint64_t sub_1CC993F1C()
{
  return 1;
}

uint64_t sub_1CC993F28(uint64_t a1, uint64_t a2)
{
  int v4 = (llvm::IRPosition *)(a1 + 16);
  unint64_t v5 = sub_1CD6482A0((_DWORD *)(a1 + 16));
  uint64_t v6 = sub_1CC993360(a2, v5, 0, a1, 0);
  if (*((unsigned char *)v6 + 41))
  {
    int v17 = *(_DWORD *)(a1 + 44);
    uint64_t v9 = a1 + 16 * v17 + 48;
    LOBYTE(v16) = 0;
    BYTE8(v16) = 0;
    v15[0] = v6;
    v15[1] = &v17;
    v15[2] = a2;
    v15[3] = &v16;
    int v12 = 1;
    v13[0] = &v12;
    v13[1] = 1;
    unint64_t v10 = sub_1CD648A0C(v4);
    if (llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1CC994164, (uint64_t)v15, v10, a1, (uint64_t)v13, &v14, 1u, 0))
    {
      int v11 = BYTE8(v16);
    }
    else
    {
      *(void *)&long long v16 = 0;
      int v11 = 1;
      if (!BYTE8(v16)) {
        BYTE8(v16) = 1;
      }
    }
    if (v11 && *(unsigned char *)(v9 + 8))
    {
      if ((void)v16 != *(void *)v9)
      {
LABEL_12:
        uint64_t result = 0;
        *(_OWORD *)uint64_t v9 = v16;
        return result;
      }
    }
    else if ((v11 == 0) == (*(unsigned char *)(v9 + 8) != 0))
    {
      goto LABEL_12;
    }
    return 1;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 40);

  return v7(a1 + 32);
}

uint64_t sub_1CC9940BC()
{
  return 0;
}

uint64_t sub_1CC9940C8(uint64_t a1, int a2)
{
  return *(void *)(a1 + 16 * a2 + 48);
}

uint64_t *sub_1CC9940D4(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  return sub_1CD64E248((uint64_t *)(a1 - 24));
}

void sub_1CC9940FC(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 - 24));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC994164(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)*a1 + 112))(*a1, *(unsigned int *)a1[1], a2, a1[2]);
  uint64_t v5 = a1[3];
  if (*(unsigned char *)(v5 + 8) && (!(_BYTE)v4 || *(void *)v5 != v3)) {
    return 0;
  }
  *(void *)uint64_t v5 = v3;
  *(void *)(v5 + 8) = v4;
  return 1;
}

void *sub_1CC9941E8(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);
  return a1;
}

void sub_1CC99422C(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CC994290@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_1CD96DBE0;
  strcpy(v2, "ICVTrackerCallSiteReturned");
  return *(double *)"CallSiteReturned";
}

uint64_t sub_1CC9942E4()
{
  return 1;
}

uint64_t sub_1CC9942F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1CD648A0C((llvm::IRPosition *)(a1 + 16));
  uint64_t v5 = sub_1CC993360(a2, v4 | 1, 0, a1, 0);
  if (*((unsigned char *)v5 + 41))
  {
    uint64_t v6 = a1 + 16 * *(int *)(a1 + 44);
    uint64_t v7 = (uint64_t *)(v6 + 48);
    uint64_t v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v5 + 120))(v5);
    if (*(unsigned char *)(v6 + 56)) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      if ((*(unsigned char *)(v6 + 56) == 0) == (v9 != 0))
      {
LABEL_13:
        uint64_t v11 = 0;
        *uint64_t v7 = v8;
        *(void *)(v6 + 56) = v9;
        return v11;
      }
    }
    else if (*v7 != v8)
    {
      goto LABEL_13;
    }
    return 1;
  }
  int v12 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 40);

  return v12(a1 + 32);
}

uint64_t sub_1CC9943F8(uint64_t a1, int a2)
{
  return *(void *)(a1 + 16 * a2 + 48);
}

uint64_t *sub_1CC994404(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  return sub_1CD64E248((uint64_t *)(a1 - 24));
}

void sub_1CC99442C(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 - 24));

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC994494(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);
  return a1;
}

void sub_1CC9944D8(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC99453C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  uint64_t v5 = (llvm::GlobalValue *)sub_1CD6482A0((_DWORD *)(a1 + 16));
  if (!v5 || !sub_1CD64EF44(a2, v5)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 40))();
  }
  uint64_t v6 = *(void *)(a2 + 88);
  int v7 = *(_DWORD *)(v6 + 72 * *(int *)(a1 + 44) + 29208);
  uint64_t v8 = *(void *)(v6 + 152 * *(int *)(v6 + 72 * *(int *)(a1 + 44) + 29268) + 3160);
  unint64_t result = sub_1CD648A0C(v4);
  if (v8 == result)
  {
    *(_DWORD *)(a1 + 48) = v7;
  }
  else
  {
    BOOL v10 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 40);
    return v10(a1 + 32);
  }
  return result;
}

void sub_1CC994634(char *a1@<X8>)
{
  a1[23] = 18;
  strcpy(a1, "ICVTrackerCallSite");
}

uint64_t sub_1CC99465C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 64) || !*(void *)(a1 + 56)) {
    return 1;
  }
  unint64_t v5 = sub_1CC8AB830((_DWORD *)(a1 + 16));
  sub_1CD65F304(a2, v5, *(llvm::Value **)(a1 + 56), 1);
  unint64_t v6 = sub_1CC8AB830((_DWORD *)(a1 + 16));
  sub_1CD65E620(a2, v6);
  return 0;
}

uint64_t sub_1CC9946DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (_DWORD *)(a1 + 16);
  unint64_t v5 = sub_1CD6482A0((_DWORD *)(a1 + 16));
  unint64_t v6 = sub_1CC993360(a2, v5, 0, a1, 0);
  if (*((unsigned char *)v6 + 41))
  {
    int v7 = v6;
    uint64_t v8 = *(unsigned int *)(a1 + 48);
    unint64_t v9 = sub_1CC8AB830(v4);
    uint64_t v10 = (*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 112))(v7, v8, v9, a2);
    if (*(unsigned char *)(a1 + 64) && (_BYTE)v11)
    {
      if (*(void *)(a1 + 56) != v10)
      {
LABEL_5:
        uint64_t v12 = 0;
        *(void *)(a1 + 56) = v10;
        *(void *)(a1 + 64) = v11;
        return v12;
      }
    }
    else if ((*(unsigned char *)(a1 + 64) == 0) == (v11 != 0))
    {
      goto LABEL_5;
    }
    return 1;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 40);

  return v13(a1 + 32);
}

uint64_t sub_1CC994810(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t *sub_1CC99481C(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  return sub_1CD64E248((uint64_t *)(a1 - 24));
}

void sub_1CC994844(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F2620AA0;
  sub_1CD64E248((uint64_t *)(a1 - 24));

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC9948AC(void *a1)
{
  *a1 = &unk_1F262A2B8;
  a1[4] = &unk_1F262A348;
  for (uint64_t i = 18; i != 3; i -= 3)
    MEMORY[0x1D25D9CD0](a1[i], 8);
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);
  return a1;
}

void sub_1CC99494C(void *a1)
{
  *a1 = &unk_1F262A2B8;
  a1[4] = &unk_1F262A348;
  for (uint64_t i = 18; i != 3; i -= 3)
    MEMORY[0x1D25D9CD0](a1[i], 8);
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC994A0C(char *a1@<X8>)
{
  a1[23] = 18;
  strcpy(a1, "ICVTrackerFunction");
}

uint64_t sub_1CC994A34()
{
  return 1;
}

uint64_t sub_1CC994A40(uint64_t a1, uint64_t a2)
{
  unsigned int v23 = 1;
  unint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  unint64_t v5 = sub_1CD6482A0((_DWORD *)(a1 + 16));
  uint64_t v6 = *(void *)(a2 + 88);
  int v7 = *(_DWORD *)(a1 + 44);
  int v8 = *(_DWORD *)(v6 + 72 * v7 + 29264);
  int v22 = v7;
  unint64_t v9 = (uint64_t *)(a1 + 24 * v7 + 48);
  v21[0] = v9;
  v21[1] = &v23;
  v20[0] = a1;
  v20[1] = a2;
  v20[2] = &v22;
  v20[3] = v9;
  uint64_t v20[4] = &v23;
  sub_1CC98364C(v6 + 152 * v8 + 3040, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC9951AC, (uint64_t)v21, v5);
  LODWORD(v17) = 56;
  v16[0] = &v17;
  v16[1] = 1;
  unint64_t v10 = sub_1CD648A0C(v4);
  llvm::Attributor::checkForAllInstructions(a2, sub_1CC995254, (uint64_t)v20, v10, a1, (uint64_t)v16, &v19, 1u, 0);
  uint64_t v11 = *(void *)(v5 + 80);
  if (v11) {
    uint64_t v12 = v11 - 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(v12 + 48);
  if (v13) {
    uint64_t v14 = v13 - 24;
  }
  else {
    uint64_t v14 = 0;
  }
  if (!v23)
  {
    v16[0] = v14;
    uint64_t v17 = 0;
    if ((sub_1CC89AE34(v9, v16, &v17) & 1) == 0)
    {
      uint64_t v17 = v14;
      uint64_t v18 = 0;
      sub_1CD67676C((uint64_t)v16, (uint64_t)v9, &v17, &v18);
    }
  }
  return v23;
}

llvm::AA *sub_1CC994BB8(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4)
{
  v57[16] = *MEMORY[0x1E4F143B8];
  signed int v51 = a2;
  int v7 = (uint64_t *)(a1 + 24 * a2 + 48);
  uint64_t v46 = (char *)a3;
  uint64_t v54 = 0;
  if (sub_1CC89AE34(v7, &v46, &v54))
  {
    uint64_t v46 = (char *)a3;
    uint64_t v54 = 0;
    int v8 = 0;
    if (sub_1CC89AE34(v7, &v46, &v54)) {
      return (llvm::AA *)*((void *)v54 + 1);
    }
    return v8;
  }
  int v8 = 0;
  char v9 = 0;
  uint64_t v54 = v57;
  unsigned int v56 = 16;
  uint64_t v46 = v50;
  size_t v47 = v50;
  uint64_t v48 = 16;
  int v49 = 0;
  v57[0] = a3;
  unsigned int v10 = 1;
  do
  {
    uint64_t v11 = *((void *)v54 + v10 - 1);
    unsigned int v55 = v10 - 1;
    uint64_t v12 = v47;
    uint64_t v13 = HIDWORD(v48);
    if (v47 == v46)
    {
      if (HIDWORD(v48))
      {
        uint64_t v14 = 0;
        uint64_t v15 = 8 * HIDWORD(v48);
        long long v16 = v47;
        while (*(void *)v16 != v11)
        {
          if (*(void *)v16 == -2) {
            uint64_t v14 = v16;
          }
          v16 += 8;
          v15 -= 8;
          if (!v15)
          {
            if (!v14) {
              goto LABEL_14;
            }
            *(void *)uint64_t v14 = v11;
            --v49;
            goto LABEL_38;
          }
        }
        goto LABEL_68;
      }
LABEL_14:
      unsigned int v17 = v48;
      if (HIDWORD(v48) < v48)
      {
        ++HIDWORD(v48);
        *(void *)&v47[8 * v13] = v11;
        goto LABEL_38;
      }
    }
    else
    {
      unsigned int v17 = v48;
    }
    if (3 * v17 <= 4 * (HIDWORD(v48) - v49))
    {
      if (v17 >= 0x40) {
        v17 *= 2;
      }
      else {
        unsigned int v17 = 128;
      }
LABEL_92:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v46, v17);
      unsigned int v17 = v48;
      uint64_t v12 = v47;
      goto LABEL_19;
    }
    if (v17 - HIDWORD(v48) < v17 >> 3) {
      goto LABEL_92;
    }
LABEL_19:
    unsigned int v18 = v17 - 1;
    unsigned int v19 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    int v20 = &v12[8 * v19];
    uint64_t v21 = *(void *)v20;
    if (*(void *)v20 != -1)
    {
      int v22 = 0;
      int v23 = 1;
      while (v21 != v11)
      {
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v21 == -2;
        }
        if (v24) {
          int v22 = v20;
        }
        unsigned int v25 = v19 + v23++;
        unsigned int v19 = v25 & v18;
        int v20 = &v12[8 * (v25 & v18)];
        uint64_t v21 = *(void *)v20;
        if (*(void *)v20 == -1) {
          goto LABEL_31;
        }
      }
      goto LABEL_68;
    }
    int v22 = 0;
LABEL_31:
    if (v22) {
      unsigned int v26 = v22;
    }
    else {
      unsigned int v26 = v20;
    }
    if (*(void *)v26 == v11) {
      goto LABEL_68;
    }
    if (*(void *)v26 == -2) {
      --v49;
    }
    else {
      ++HIDWORD(v48);
    }
    *(void *)unsigned int v26 = v11;
LABEL_38:
    uint64_t v27 = *(void *)(v11 + 40);
    uint64_t v28 = (void *)(v11 + 24);
    if (*(void *)(v27 + 48) != v11 + 24)
    {
      do
      {
        uint64_t v28 = (void *)*v28;
        if (!v28) {
          break;
        }
        uint64_t v52 = 0;
        int v53 = v28 - 3;
        if (sub_1CC89AE34(v7, &v53, &v52))
        {
          uint64_t v52 = 0;
          int v53 = v28 - 3;
          int v31 = sub_1CC89AE34(v7, &v53, &v52);
          uint64_t v32 = 0;
          if (v31) {
            uint64_t v32 = *(llvm::AA **)(v52 + 8);
          }
          if (!v9)
          {
            char v9 = 1;
            int v8 = v32;
            break;
          }
          if (v8 == v32) {
            break;
          }
LABEL_93:
          int v8 = 0;
          goto LABEL_94;
        }
        BOOL v29 = sub_1CC9952CC(a1, a4, (uint64_t)(v28 - 3), &v51);
        if (v30)
        {
          if (!v9)
          {
            char v9 = v30;
            int v8 = v29;
            break;
          }
          if (v8 != v29) {
            goto LABEL_93;
          }
        }
      }
      while (*(void **)(v28[2] + 48) != v28);
    }
    if (v27 == *(void *)(a3 + 40) && v9 != 0) {
      break;
    }
    uint64_t v34 = *(void *)(v27 + 8);
    if (v34)
    {
      while (1)
      {
        uint64_t v35 = *(void *)(v34 + 24);
        unsigned int v36 = *(unsigned __int8 *)(v35 + 16);
        BOOL v37 = v35 && v36 >= 0x1C;
        if (v37 && v36 - 29 <= 0xA) {
          break;
        }
        uint64_t v34 = *(void *)(v34 + 8);
        if (!v34) {
          goto LABEL_68;
        }
      }
LABEL_70:
      uint64_t v39 = *(void *)(v35 + 40);
      uint64_t v40 = *(void *)(v39 + 40);
      if (v40 != v39 + 40)
      {
        uint64_t v41 = v40 ? v40 - 24 : 0;
        if (*(unsigned __int8 *)(v41 + 16) - 29 <= 0xA)
        {
          if (v55 >= (unint64_t)v56) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v54 + v55++) = v41;
        }
      }
      while (1)
      {
        uint64_t v34 = *(void *)(v34 + 8);
        if (!v34) {
          break;
        }
        uint64_t v35 = *(void *)(v34 + 24);
        unsigned int v42 = *(unsigned __int8 *)(v35 + 16);
        if (v35) {
          BOOL v43 = v42 >= 0x1C;
        }
        else {
          BOOL v43 = 0;
        }
        if (v43 && v42 - 29 < 0xB) {
          goto LABEL_70;
        }
      }
    }
LABEL_68:
    unsigned int v10 = v55;
  }
  while (v55);
LABEL_94:
  if (v47 != v46) {
    free(v47);
  }
  if (v54 != v57) {
    free(v54);
  }
  return v8;
}

uint64_t sub_1CC995028()
{
  return 0;
}

uint64_t *sub_1CC995034(void *a1)
{
  *(a1 - 4) = &unk_1F262A2B8;
  *a1 = &unk_1F262A348;
  for (uint64_t i = 14; i != -1; i -= 3)
    MEMORY[0x1D25D9CD0](a1[i], 8);
  *(a1 - 4) = &unk_1F2620AA0;

  return sub_1CD64E248(a1 - 3);
}

void sub_1CC9950E4(void *a1)
{
  *(a1 - 4) = &unk_1F262A2B8;
  *a1 = &unk_1F262A348;
  for (uint64_t i = 14; i != -1; i -= 3)
    MEMORY[0x1D25D9CD0](a1[i], 8);
  *(a1 - 4) = &unk_1F2620AA0;
  sub_1CD64E248(a1 - 3);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC9951AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v2 + 16) == 84) {
    uint64_t v3 = *(void *)(a2 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    BOOL v4 = v3 - 32 == a2;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    int v6 = *(_DWORD *)(v3 + 20);
    if ((v6 & 0x80000000) == 0 || (*(void *)(v3 - 32 * (v6 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) == 0)
    {
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
      uint64_t v10 = v2;
      uint64_t v11 = v8;
      sub_1CD67676C((uint64_t)v12, v7, &v10, &v11);
      if (v12[16]) {
        **(_DWORD **)(a1 + 8) = 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1CC995254(uint64_t a1, uint64_t a2)
{
  BOOL v4 = sub_1CC9952CC(*(void *)a1, *(void *)(a1 + 8), a2, *(signed int **)(a1 + 16));
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = a2;
    char v9 = v4;
    sub_1CD67676C((uint64_t)v10, v7, &v8, &v9);
    if (v10[16]) {
      **(_DWORD **)(a1 + 32) = 0;
    }
  }
  return 1;
}

llvm::AA *sub_1CC9952CC(uint64_t a1, uint64_t a2, uint64_t a3, signed int *a4)
{
  unsigned int v4 = *(unsigned __int8 *)(a3 + 16) - 33;
  BOOL v5 = v4 > 0x33;
  uint64_t v6 = (1 << v4) & 0x8000000000041;
  if (v5 || v6 == 0) {
    return 0;
  }
  uint64_t v12 = *(void *)(a3 + 64);
  if (v12)
  {
    if (*(_DWORD *)(v12 + 8))
    {
      uint64_t v13 = *(void *)(v12 + 40);
      if (v13)
      {
        int v14 = *(_DWORD *)(v13 + 40);
        if (v14)
        {
          uint64_t v15 = *(void *)(v13 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            uint64_t v55 = v15;
            int v54 = v14;
            int v49 = __cxa_guard_acquire(&qword_1EBCBE588);
            int v14 = v54;
            uint64_t v15 = v55;
            if (v49)
            {
              unint64_t v50 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v50 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v50;
              __cxa_guard_release(&qword_1EBCBE588);
              int v14 = v54;
              uint64_t v15 = v55;
            }
          }
          unint64_t v16 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xD15653C75DE758C1)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (qword_1EBCBE580 ^ 0xD15653C75DE758C1)) >> 47) ^ 0xBC3836B732B837AFLL);
          unsigned int v17 = (-348639895 * ((v16 >> 47) ^ v16)) ^ 0x706F5F6F;
          int v18 = v14 - 1;
          for (int i = 1; ; ++i)
          {
            unsigned int v20 = v17 & v18;
            uint64_t v21 = (uint64_t *)(v15 + 24 * v20);
            uint64_t v22 = *v21;
            if (*v21 == -1)
            {
              if ("no_openmp" == (char *)-1) {
                return 0;
              }
            }
            else if (v22 == -2)
            {
              if ("no_openmp" == (char *)-2) {
                return 0;
              }
            }
            else if (v21[1] == 9 && *(void *)v22 == 0x6D6E65706F5F6F6ELL && *(unsigned char *)(v22 + 8) == 112)
            {
              return 0;
            }
            if (v22 == -1) {
              break;
            }
            unsigned int v17 = i + v20;
          }
        }
      }
    }
  }
  if (llvm::CallBase::hasFnAttrOnCalledFunction(a3, "no_openmp", 9uLL)) {
    return 0;
  }
  uint64_t v24 = *(void *)(a3 + 64);
  if (v24)
  {
    if (*(_DWORD *)(v24 + 8))
    {
      uint64_t v25 = *(void *)(v24 + 40);
      if (v25)
      {
        int v26 = *(_DWORD *)(v25 + 40);
        if (v26)
        {
          uint64_t v27 = *(void *)(v25 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            uint64_t v56 = v27;
            int v51 = v26;
            int v52 = __cxa_guard_acquire(&qword_1EBCBE588);
            int v26 = v51;
            uint64_t v27 = v56;
            if (v52)
            {
              unint64_t v53 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v53 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v53;
              __cxa_guard_release(&qword_1EBCBE588);
              int v26 = v51;
              uint64_t v27 = v56;
            }
          }
          uint64_t v28 = __ROR8__(qword_1EBCBE580 ^ 0x6E026472EA39E42ELL, 30);
          unint64_t v29 = 0x9DDFEA08EB382D69
              * ((qword_1EBCBE580 - 0x70239526D379B5B4) ^ ((0x9DDFEA08EB382D69
                                                            * ((v28 + 0x70AB6F8EB220A0D5) ^ (qword_1EBCBE580
                                                                                             - 0x70239526D379B5B4))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v28 + 0x70AB6F8EB220A0D5) ^ (qword_1EBCBE580 - 0x70239526D379B5B4))));
          unsigned int v30 = -348639895 * ((v29 >> 47) ^ v29);
          int v31 = v26 - 1;
          for (int j = 1; ; ++j)
          {
            unsigned int v33 = v30 & v31;
            uint64_t v34 = (uint64_t *)(v27 + 24 * v33);
            uint64_t v35 = *v34;
            if (*v34 == -1)
            {
              if ("no_openmp_routines" == (char *)-1) {
                return 0;
              }
            }
            else if (v35 == -2)
            {
              if ("no_openmp_routines" == (char *)-2) {
                return 0;
              }
            }
            else if (v34[1] == 18)
            {
              BOOL v36 = *(void *)v35 == 0x6D6E65706F5F6F6ELL && *(void *)(v35 + 8) == 0x6E6974756F725F70;
              if (v36 && *(_WORD *)(v35 + 16) == 29541) {
                return 0;
              }
            }
            if (v35 == -1) {
              break;
            }
            unsigned int v30 = j + v33;
          }
        }
      }
    }
  }
  if (llvm::CallBase::hasFnAttrOnCalledFunction(a3, "no_openmp_routines", 0x12uLL)) {
    return 0;
  }
  uint64_t v40 = *(void *)(a3 - 32);
  if (!v40 || *(unsigned char *)(v40 + 16) || *(void *)(v40 + 24) != *(void *)(a3 + 72)) {
    return 0;
  }
  uint64_t v41 = *(const llvm::Instruction **)(a2 + 88);
  signed int v42 = *a4;
  if (v40 == *((void *)v41 + 19 * *((int *)v41 + 18 * *a4 + 7317) + 395)) {
    return 0;
  }
  if (v40 == *((void *)v41 + 19 * *((int *)v41 + 18 * v42 + 7316) + 395))
  {
    uint64_t v47 = a1 + 48;
    uint64_t v57 = 0;
    uint64_t v58 = a3;
    if (!sub_1CC89AE34((uint64_t *)(v47 + 24 * v42), &v58, &v57)) {
      return 0;
    }
    uint64_t v48 = (uint64_t *)(v47 + 24 * *a4);
    uint64_t v57 = 0;
    uint64_t v58 = a3;
    uint64_t v38 = 0;
    if (sub_1CC89AE34(v48, &v58, &v57)) {
      return *(llvm::AA **)(v57 + 8);
    }
  }
  else
  {
    if (*(void *)(v40 + 72) == v40 + 72 && (*(unsigned char *)(v40 + 34) & 0x80) == 0) {
      return 0;
    }
    BOOL v43 = sub_1CC993360(a2, a3 | 1, 0, a1, 0);
    if (!*((unsigned char *)v43 + 41)) {
      return 0;
    }
    BOOL v44 = (llvm::AA *)(*(uint64_t (**)(llvm::AbstractAttribute *, void))(*(void *)v43 + 120))(v43, *a4);
    uint64_t v38 = v44;
    if (v46)
    {
      if (!v44 || !llvm::AA::isValidAtPosition(v44, (const llvm::Value *)a3, v41, v45)) {
        return 0;
      }
    }
  }
  return v38;
}

uint64_t sub_1CC995814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t *sub_1CC995848(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(uint64_t **)(a1 + 64);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  if (v5 == *v4)
  {
    uint64_t v7 = *((unsigned int *)v4 + 5);
    uint64_t v8 = (void **)(v5 + 8 * v7);
    if (v7)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 8 * v7;
      while (*(uint64_t **)(v5 + v9) != a2)
      {
        v9 += 8;
        if (v10 == v9) {
          goto LABEL_19;
        }
      }
      uint64_t v8 = (void **)(v5 + v9);
    }
LABEL_19:
    uint64_t v6 = v4[1];
  }
  else
  {
    uint64_t v11 = *((unsigned int *)v4 + 4);
    int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (void **)(v5 + 8 * v13);
    int v14 = (uint64_t *)*v8;
    if (*v8 == (void *)-1)
    {
      uint64_t v15 = 0;
LABEL_26:
      if (v15) {
        uint64_t v8 = v15;
      }
      if (*v8 != a2) {
        uint64_t v8 = (void **)(v5 + 8 * v11);
      }
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v14 != a2)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == (uint64_t *)-2;
        }
        if (v17) {
          uint64_t v15 = v8;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        uint64_t v8 = (void **)(v5 + 8 * (v18 & v12));
        int v14 = (uint64_t *)*v8;
        if (*v8 == (void *)-1) {
          goto LABEL_26;
        }
      }
    }
  }
  BOOL v17 = v5 == v6;
  uint64_t v19 = 16;
  if (v17) {
    uint64_t v19 = 20;
  }
  if (v8 == (void **)(v5 + 8 * *(unsigned int *)((char *)v4 + v19))) {
    return 0;
  }
  uint64_t v87 = a2;
  uint64_t v21 = sub_1CD4CB550(a1, (uint64_t *)&v87);
  uint64_t v22 = v21;
  if (*((unsigned char *)v21 + 16)) {
    return (uint64_t *)v21[1];
  }
  int v23 = *(uint64_t **)(*(void *)(a1 + 64) + 29568);
  uint64_t v87 = v2;
  uint64_t v77 = 0;
  if (sub_1CD420258(v23, &v87, &v77))
  {
    if (!*((unsigned char *)v22 + 16)) {
      *((unsigned char *)v22 + 16) = 1;
    }
    v22[1] = v2;
    return v2;
  }
  if (!*((unsigned char *)v22 + 16)) {
    *((unsigned char *)v22 + 16) = 1;
  }
  v22[1] = 0;
  if ((v2[4] & 0xFu) - 7 >= 2)
  {
    uint64_t v25 = (uint64_t ***)(*(uint64_t (**)(void, uint64_t *))(a1 + 48))(*(void *)(a1 + 56), v2);
    uint64_t v26 = *(void *)***v25;
    if (*(void *)(v26 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v26 + 72) + 48))(*(void *)(v26 + 72)))
    {
      llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v77, (uint64_t)"openmp-opt", (uint64_t)"OMP100", 6, (llvm::Function *)v2);
      uint64_t v87 = "Potentially unknown OpenMP target region caller.";
      uint64_t v88 = 48;
      sub_1CC59ADEC((uint64_t *)&v84, (uint64_t)&v87);
      LODWORD(v88) = v78;
      BYTE4(v88) = BYTE4(v78);
      long long v89 = v79;
      uint64_t v90 = v80;
      long long v91 = v81;
      long long v92 = v82;
      uint64_t v87 = &unk_1F2616800;
      uint64_t v93 = v83;
      long long v94 = v96;
      uint64_t v95 = 0x400000000;
      if (v85) {
        sub_1CD494D68((uint64_t)&v94, (uint64_t)&v84);
      }
      uint64_t v97 = v86[32];
      uint64_t v98 = v86[33];
      uint64_t v87 = &unk_1F26165E0;
      uint64_t v67 = " [";
      uint64_t v68 = 2;
      sub_1CC59ADEC((uint64_t *)&v94, (uint64_t)&v67);
      uint64_t v67 = "OMP100";
      uint64_t v68 = 6;
      sub_1CC59ADEC((uint64_t *)&v94, (uint64_t)&v67);
      uint64_t v67 = "]";
      uint64_t v68 = 1;
      sub_1CC59ADEC((uint64_t *)&v94, (uint64_t)&v67);
      LODWORD(v68) = v88;
      BYTE4(v68) = BYTE4(v88);
      long long v69 = v89;
      uint64_t v70 = v90;
      long long v71 = v91;
      uint64_t v67 = (const char *)&unk_1F2616800;
      long long v72 = v92;
      uint64_t v73 = v93;
      unint64_t v74 = v76;
      uint64_t v75 = 0x400000000;
      unsigned int v27 = v95;
      if (v95)
      {
        sub_1CD494D68((uint64_t)&v74, (uint64_t)&v94);
        unsigned int v27 = v95;
      }
      v76[32] = v97;
      v76[33] = v98;
      uint64_t v67 = (const char *)&unk_1F26165E0;
      uint64_t v87 = &unk_1F2616800;
      uint64_t v28 = (char *)v94;
      if (v27)
      {
        unint64_t v29 = (unint64_t)v27 << 6;
        do
        {
          unsigned int v30 = (void **)&v28[v29];
          if (v28[v29 - 17] < 0) {
            operator delete(*(v30 - 5));
          }
          if (*((char *)v30 - 41) < 0) {
            operator delete(*(v30 - 8));
          }
          v29 -= 64;
        }
        while (v29);
        uint64_t v28 = (char *)v94;
      }
      if (v28 != v96) {
        free(v28);
      }
      uint64_t v77 = (char *)&unk_1F2616800;
      uint64_t v61 = (char *)v84;
      if (v85)
      {
        unint64_t v62 = (unint64_t)v85 << 6;
        do
        {
          unsigned int v63 = (void **)&v61[v62];
          if (v61[v62 - 17] < 0) {
            operator delete(*(v63 - 5));
          }
          if (*((char *)v63 - 41) < 0) {
            operator delete(*(v63 - 8));
          }
          v62 -= 64;
        }
        while (v62);
        uint64_t v61 = (char *)v84;
      }
      if (v61 != (char *)v86) {
        free(v61);
      }
      llvm::OptimizationRemarkEmitter::emit(v25, (llvm::DiagnosticInfoOptimizationBase *)&v67);
      uint64_t v67 = (const char *)&unk_1F2616800;
      uint64_t v64 = (char *)v74;
      if (v75)
      {
        unint64_t v65 = (unint64_t)v75 << 6;
        do
        {
          unsigned int v66 = (void **)&v64[v65];
          if (v64[v65 - 17] < 0) {
            operator delete(*(v66 - 5));
          }
          if (*((char *)v66 - 41) < 0) {
            operator delete(*(v66 - 8));
          }
          v65 -= 64;
        }
        while (v65);
        uint64_t v64 = (char *)v74;
      }
      if (v64 != (char *)v76) {
        free(v64);
      }
    }
    return 0;
  }
  uint64_t v77 = (char *)&v80;
  uint64_t v78 = (char *)&v80;
  *(void *)&long long v79 = 2;
  DWORD2(v79) = 0;
  uint64_t v31 = v2[1];
  uint64_t v87 = &v89;
  uint64_t v88 = 0x800000000;
  sub_1CD64EEA0((uint64_t)&v87, v31, v24, 0);
  unsigned int v32 = v88;
  if (v88)
  {
    for (unint64_t i = 0; i < v88; ++i)
    {
      uint64_t v39 = *((void *)v87 + i);
      uint64_t v40 = *(void *)(v39 + 24);
      unsigned int v41 = *(unsigned __int8 *)(v40 + 16);
      if (v41 == 81)
      {
        if ((*(_WORD *)(v40 + 18) & 0x3E) != 0x20) {
          goto LABEL_83;
        }
      }
      else
      {
        if (v41 == 5)
        {
          while (1)
          {
            uint64_t v40 = *(void *)(v40 + 8);
            if (!v40) {
              break;
            }
            if (v32 >= HIDWORD(v88)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v87 + v32) = v40;
            unsigned int v32 = v88 + 1;
            LODWORD(v88) = v88 + 1;
          }
          goto LABEL_116;
        }
        if (v41 < 0x1C
          || (v41 - 33 <= 0x33 ? (BOOL v42 = ((1 << (v41 - 33)) & 0x8000000000041) == 0) : (BOOL v42 = 1), v42))
        {
LABEL_83:
          uint64_t v43 = 0;
          goto LABEL_84;
        }
        if (v40 - 32 != v39)
        {
          uint64_t v43 = sub_1CC9683FC(*(void *)(v39 + 24), *(void *)(a1 + 64) + 25688);
          if (!v43) {
            goto LABEL_84;
          }
        }
      }
      uint64_t v43 = sub_1CC995848(a1, *(void *)(*(void *)(v40 + 40) + 56));
LABEL_84:
      BOOL v44 = v78;
      uint64_t v45 = DWORD1(v79);
      if (v78 != v77)
      {
        unsigned int v49 = v79;
LABEL_95:
        if (3 * v49 <= 4 * (DWORD1(v79) - DWORD2(v79)))
        {
          if (v49 >= 0x40) {
            v49 *= 2;
          }
          else {
            unsigned int v49 = 128;
          }
        }
        else if (v49 - DWORD1(v79) >= v49 >> 3)
        {
          goto LABEL_97;
        }
        uint64_t v59 = v43;
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v77, v49);
        uint64_t v43 = v59;
        unsigned int v49 = v79;
        BOOL v44 = v78;
LABEL_97:
        unsigned int v50 = v49 - 1;
        unsigned int v51 = (v49 - 1) & ((v43 >> 4) ^ (v43 >> 9));
        int v52 = &v44[8 * v51];
        uint64_t v53 = *(void *)v52;
        if (*(void *)v52 == -1)
        {
          int v54 = 0;
LABEL_109:
          if (v54) {
            uint64_t v58 = v54;
          }
          else {
            uint64_t v58 = (uint64_t *)v52;
          }
          if (*v58 != v43)
          {
            if (*v58 == -2) {
              --DWORD2(v79);
            }
            else {
              ++DWORD1(v79);
            }
            *uint64_t v58 = v43;
          }
        }
        else
        {
          int v54 = 0;
          int v55 = 1;
          while (v53 != v43)
          {
            if (v54) {
              BOOL v56 = 0;
            }
            else {
              BOOL v56 = v53 == -2;
            }
            if (v56) {
              int v54 = (uint64_t *)v52;
            }
            unsigned int v57 = v51 + v55++;
            unsigned int v51 = v57 & v50;
            int v52 = &v44[8 * (v57 & v50)];
            uint64_t v53 = *(void *)v52;
            if (*(void *)v52 == -1) {
              goto LABEL_109;
            }
          }
        }
        goto LABEL_116;
      }
      if (DWORD1(v79))
      {
        char v46 = 0;
        uint64_t v47 = 8 * DWORD1(v79);
        uint64_t v48 = (uint64_t *)v78;
        while (*v48 != v43)
        {
          if (*v48 == -2) {
            char v46 = v48;
          }
          ++v48;
          v47 -= 8;
          if (!v47)
          {
            if (!v46) {
              goto LABEL_92;
            }
            *char v46 = v43;
            --DWORD2(v79);
            goto LABEL_116;
          }
        }
        goto LABEL_116;
      }
LABEL_92:
      unsigned int v49 = v79;
      if (DWORD1(v79) >= v79) {
        goto LABEL_95;
      }
      ++DWORD1(v79);
      *(void *)&v78[8 * v45] = v43;
LABEL_116:
      unsigned int v32 = v88;
    }
  }
  if (v87 != &v89) {
    free(v87);
  }
  if (DWORD1(v79) - DWORD2(v79) == 1)
  {
    unsigned int v33 = v78;
    if (v78 == v77) {
      uint64_t v34 = DWORD1(v79);
    }
    else {
      uint64_t v34 = v79;
    }
    if (v34)
    {
      uint64_t v35 = 8 * v34;
      BOOL v36 = &v78[8 * v34];
      while (*(void *)v33 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v33 += 8;
        v35 -= 8;
        if (!v35)
        {
          unsigned int v33 = v36;
          break;
        }
      }
    }
    uint64_t v37 = *(void *)v33;
  }
  else
  {
    uint64_t v37 = 0;
  }
  uint64_t v87 = v2;
  unsigned int v60 = sub_1CD4CB550(a1, (uint64_t *)&v87);
  if (!*((unsigned char *)v60 + 16)) {
    *((unsigned char *)v60 + 16) = 1;
  }
  v60[1] = v37;
  if (v78 != v77) {
    free(v78);
  }
  return (uint64_t *)v37;
}

uint64_t sub_1CC996134(uint64_t *a1, uint64_t *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sub_1CC9902E8(a2, *a1);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (uint64_t ***)(*(uint64_t (**)(void, void))(a1[1] + 48))(*(void *)(a1[1] + 56), *(void *)(*(void *)(v3 + 40) + 56));
    uint64_t v6 = *(void *)***v5;
    if (*(void *)(v6 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v6 + 72) + 48))(*(void *)(v6 + 72)))
    {
      llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v28, (uint64_t)"openmp-opt", (uint64_t)"OMP112", 6, v4);
      uint64_t v39 = "Found thread data sharing on the GPU. ";
      uint64_t v40 = 38;
      sub_1CC59ADEC((uint64_t *)&v36, (uint64_t)&v39);
      uint64_t v39 = "Expect degraded performance due to data globalization.";
      uint64_t v40 = 54;
      sub_1CC59ADEC((uint64_t *)&v36, (uint64_t)&v39);
      LODWORD(v40) = v29;
      BYTE4(v40) = v30;
      long long v41 = v31;
      uint64_t v42 = v32;
      long long v43 = v33;
      long long v44 = v34;
      uint64_t v39 = (const char *)&unk_1F2616800;
      uint64_t v45 = v35;
      char v46 = v48;
      uint64_t v47 = 0x400000000;
      if (v37) {
        sub_1CD494D68((uint64_t)&v46, (uint64_t)&v36);
      }
      uint64_t v49 = v38[32];
      uint64_t v50 = v38[33];
      uint64_t v39 = (const char *)&unk_1F26165A8;
      unsigned int v18 = " [";
      uint64_t v19 = 2;
      sub_1CC59ADEC((uint64_t *)&v46, (uint64_t)&v18);
      unsigned int v18 = "OMP112";
      uint64_t v19 = 6;
      sub_1CC59ADEC((uint64_t *)&v46, (uint64_t)&v18);
      unsigned int v18 = "]";
      uint64_t v19 = 1;
      sub_1CC59ADEC((uint64_t *)&v46, (uint64_t)&v18);
      LODWORD(v19) = v40;
      BYTE4(v19) = BYTE4(v40);
      long long v20 = v41;
      uint64_t v21 = v42;
      long long v22 = v43;
      unsigned int v18 = (const char *)&unk_1F2616800;
      long long v23 = v44;
      uint64_t v24 = v45;
      uint64_t v25 = v27;
      uint64_t v26 = 0x400000000;
      unsigned int v8 = v47;
      if (v47)
      {
        sub_1CD494D68((uint64_t)&v25, (uint64_t)&v46);
        unsigned int v8 = v47;
      }
      v27[32] = v49;
      v27[33] = v50;
      unsigned int v18 = (const char *)&unk_1F26165A8;
      uint64_t v39 = (const char *)&unk_1F2616800;
      uint64_t v9 = (char *)v46;
      if (v8)
      {
        unint64_t v10 = (unint64_t)v8 << 6;
        do
        {
          uint64_t v11 = (void **)&v9[v10];
          if (v9[v10 - 17] < 0) {
            operator delete(*(v11 - 5));
          }
          if (*((char *)v11 - 41) < 0) {
            operator delete(*(v11 - 8));
          }
          v10 -= 64;
        }
        while (v10);
        uint64_t v9 = (char *)v46;
      }
      if (v9 != v48) {
        free(v9);
      }
      uint64_t v28 = &unk_1F2616800;
      int v12 = (char *)v36;
      if (v37)
      {
        unint64_t v13 = (unint64_t)v37 << 6;
        do
        {
          int v14 = (void **)&v12[v13];
          if (v12[v13 - 17] < 0) {
            operator delete(*(v14 - 5));
          }
          if (*((char *)v14 - 41) < 0) {
            operator delete(*(v14 - 8));
          }
          v13 -= 64;
        }
        while (v13);
        int v12 = (char *)v36;
      }
      if (v12 != (char *)v38) {
        free(v12);
      }
      llvm::OptimizationRemarkEmitter::emit(v5, (llvm::DiagnosticInfoOptimizationBase *)&v18);
      unsigned int v18 = (const char *)&unk_1F2616800;
      uint64_t v15 = (char *)v25;
      if (v26)
      {
        unint64_t v16 = (unint64_t)v26 << 6;
        do
        {
          BOOL v17 = (void **)&v15[v16];
          if (v15[v16 - 17] < 0) {
            operator delete(*(v17 - 5));
          }
          if (*((char *)v17 - 41) < 0) {
            operator delete(*(v17 - 8));
          }
          v16 -= 64;
        }
        while (v16);
        uint64_t v15 = (char *)v25;
      }
      if (v15 != (char *)v27) {
        free(v15);
      }
    }
  }
  return 0;
}

uint64_t sub_1CC996590(uint64_t *a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v2 + 16) == 84) {
    uint64_t v3 = *(void *)(a2 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    BOOL v4 = v3 - 32 == a2;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    uint64_t v5 = *a1;
    int v6 = *(_DWORD *)(v3 + 20);
    if ((v6 & 0x80000000) == 0 || (*(void *)(v3 - 32 * (v6 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) == 0)
    {
      uint64_t v7 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64));
      if (v7 && *((unsigned char *)v7 + 16) == 0)
      {
        uint64_t v9 = *((void *)v7 + 14);
        if (v9)
        {
          if ((*(unsigned char *)(v9 + 17) & 0x30) != 0 && (*(unsigned char *)(v9 + 20) & 2) != 0)
          {
            uint64_t v11 = (uint64_t ***)(*(uint64_t (**)(void, void))(v5 + 48))(*(void *)(v5 + 56), *(void *)(*(void *)(v2 + 40) + 56));
            uint64_t v12 = *(void *)***v11;
            if (*(void *)(v12 + 128)
              || (*(unsigned int (**)(void))(**(void **)(v12 + 72) + 48))(*(void *)(v12 + 72)))
            {
              long long v23 = v11;
              llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v34, (uint64_t)"openmp-opt", (uint64_t)"OMP160", 6, v2);
              uint64_t v45 = "Removing parallel region with no side-effects.";
              uint64_t v46 = 46;
              sub_1CC59ADEC((uint64_t *)&v42, (uint64_t)&v45);
              LODWORD(v46) = v35;
              BYTE4(v46) = v36;
              long long v47 = v37;
              uint64_t v48 = v38;
              long long v49 = v39;
              long long v50 = v40;
              uint64_t v45 = (const char *)&unk_1F2616800;
              uint64_t v51 = v41;
              int v52 = v54;
              uint64_t v53 = 0x400000000;
              if (v43) {
                sub_1CD494D68((uint64_t)&v52, (uint64_t)&v42);
              }
              uint64_t v55 = v44[32];
              uint64_t v56 = v44[33];
              uint64_t v45 = (const char *)&unk_1F2616570;
              uint64_t v24 = " [";
              uint64_t v25 = 2;
              sub_1CC59ADEC((uint64_t *)&v52, (uint64_t)&v24);
              uint64_t v24 = "OMP160";
              uint64_t v25 = 6;
              sub_1CC59ADEC((uint64_t *)&v52, (uint64_t)&v24);
              uint64_t v24 = "]";
              uint64_t v25 = 1;
              sub_1CC59ADEC((uint64_t *)&v52, (uint64_t)&v24);
              LODWORD(v25) = v46;
              BYTE4(v25) = BYTE4(v46);
              long long v26 = v47;
              uint64_t v27 = v48;
              long long v28 = v49;
              uint64_t v24 = (const char *)&unk_1F2616800;
              long long v29 = v50;
              uint64_t v30 = v51;
              long long v31 = v33;
              uint64_t v32 = 0x400000000;
              unsigned int v13 = v53;
              if (v53)
              {
                sub_1CD494D68((uint64_t)&v31, (uint64_t)&v52);
                unsigned int v13 = v53;
              }
              v33[32] = v55;
              v33[33] = v56;
              uint64_t v24 = (const char *)&unk_1F2616570;
              uint64_t v45 = (const char *)&unk_1F2616800;
              int v14 = (char *)v52;
              if (v13)
              {
                unint64_t v15 = (unint64_t)v13 << 6;
                do
                {
                  unint64_t v16 = (void **)&v14[v15];
                  if (v14[v15 - 17] < 0) {
                    operator delete(*(v16 - 5));
                  }
                  if (*((char *)v16 - 41) < 0) {
                    operator delete(*(v16 - 8));
                  }
                  v15 -= 64;
                }
                while (v15);
                int v14 = (char *)v52;
              }
              if (v14 != v54) {
                free(v14);
              }
              long long v34 = &unk_1F2616800;
              BOOL v17 = (char *)v42;
              if (v43)
              {
                unint64_t v18 = (unint64_t)v43 << 6;
                do
                {
                  uint64_t v19 = (void **)&v17[v18];
                  if (v17[v18 - 17] < 0) {
                    operator delete(*(v19 - 5));
                  }
                  if (*((char *)v19 - 41) < 0) {
                    operator delete(*(v19 - 8));
                  }
                  v18 -= 64;
                }
                while (v18);
                BOOL v17 = (char *)v42;
              }
              if (v17 != (char *)v44) {
                free(v17);
              }
              llvm::OptimizationRemarkEmitter::emit(v23, (llvm::DiagnosticInfoOptimizationBase *)&v24);
              uint64_t v24 = (const char *)&unk_1F2616800;
              long long v20 = (char *)v31;
              if (v32)
              {
                unint64_t v21 = (unint64_t)v32 << 6;
                do
                {
                  long long v22 = (void **)&v20[v21];
                  if (v20[v21 - 17] < 0) {
                    operator delete(*(v22 - 5));
                  }
                  if (*((char *)v22 - 41) < 0) {
                    operator delete(*(v22 - 8));
                  }
                  v21 -= 64;
                }
                while (v21);
                long long v20 = (char *)v31;
              }
              if (v20 != (char *)v33) {
                free(v20);
              }
            }
            llvm::CallGraphUpdater::removeCallSite(*(llvm::CallGraphUpdater **)(v5 + 40), (llvm::CallBase *)v2);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CC996A88(uint64_t a1, uint64_t *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = sub_1CC9902E8(a2, *(void *)a1);
  uint64_t v5 = v4;
  if (v4)
  {
    for (uint64_t i = 0; i != 504; i += 168)
    {
      uint64_t v7 = &v68[i];
      *uint64_t v7 = 0;
      v7[1] = &v68[i + 24];
      v7[2] = 0x800000000;
      v7[11] = &v68[i + 104];
      v7[12] = 0x800000000;
    }
    unsigned int v8 = (llvm **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
    uint64_t v9 = v8[16];
    unint64_t v10 = v8[20];
    UnderlyingObject = llvm::getUnderlyingObject(v8[12], (const llvm::Value *)6);
    if (*((unsigned char *)UnderlyingObject + 16) == 59
      && sub_1CC997268((uint64_t)v68, UnderlyingObject, v5)
      && (uint64_t v12 = llvm::getUnderlyingObject(v9, (const llvm::Value *)6), *((unsigned char *)v12 + 16) == 59)
      && sub_1CC997268((uint64_t)&v69, v12, v5)
      && ((unsigned int v13 = (unsigned __int8 *)llvm::getUnderlyingObject(v10, (const llvm::Value *)6), v14 = v13[16], v14 < 4)
       || v14 == 59 && sub_1CC997268((uint64_t)&v70, (llvm::GlobalValue *)v13, v5)))
    {
      unint64_t v16 = *(void **)(v5 + 32);
      uint64_t v15 = *(void *)(v5 + 40);
      if (v16 == (void *)(v15 + 40) || !v16) {
        goto LABEL_47;
      }
      char v17 = 0;
      do
      {
        if (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)(v16 - 3)))
        {
LABEL_35:
          if (v17)
          {
            uint64_t v15 = *(void *)(v5 + 40);
            goto LABEL_52;
          }
          goto LABEL_67;
        }
        uint64_t v18 = *((unsigned __int8 *)v16 - 8) - 33;
        if (v18 <= 0x37)
        {
          if (((1 << (*((unsigned char *)v16 - 8) - 33)) & 0x8000000000041) != 0)
          {
            uint64_t v19 = v16[5];
            if (!v19 || (*(unsigned char *)(v19 + 20) & 4) == 0 && (*(unsigned char *)(v19 + 17) & 0x10) == 0)
            {
              LODWORD(v71) = 7;
              if (sub_1CC5CB59C((uint64_t)(v16 - 3), (__int32 *)&v71, 1uLL))
              {
                uint64_t v22 = *(v16 - 7);
                if (!v22 || *(unsigned char *)(v22 + 16) || *(void *)(v22 + 24) != v16[6] || *(_DWORD *)(v22 + 36) != 7) {
                  goto LABEL_35;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v16 - 3), 66) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v16 - 3), 44) & 1) == 0)
              {
                goto LABEL_35;
              }
            }
          }
          else if (((1 << (*((unsigned char *)v16 - 8) - 33)) & 0x808001C8000010) != 0 {
                 || v18 == 28 && (*((_WORD *)v16 - 3) & 0x301) != 0)
          }
          {
            goto LABEL_35;
          }
        }
        long long v20 = v16 + 1;
        unint64_t v16 = (void *)v16[1];
        char v17 = 1;
      }
      while (v16 != (void *)(v20[1] + 40) && v16 != 0);
      uint64_t v15 = *(void *)(v5 + 40);
LABEL_47:
      uint64_t v28 = *(void *)(v15 + 40);
      if (v28 != v15 + 40)
      {
        uint64_t v29 = v28 ? v28 - 24 : 0;
        if (*(unsigned __int8 *)(v29 + 16) - 29 <= 0xA)
        {
LABEL_52:
          uint64_t v30 = *(void *)(v3 + 64);
          long long v31 = *(void **)(v15 + 56);
          uint64_t v32 = v31[10];
          if (v32) {
            uint64_t v33 = v32 - 24;
          }
          else {
            uint64_t v33 = 0;
          }
          uint64_t v34 = *(void *)(v33 + 48);
          int v35 = operator new(0x68uLL);
          char v36 = (char *)(v35 + 8);
          v35[13] = v35[13] & 0x38000000 | 1;
          *(void *)int v35 = 0;
          *((void *)v35 + 1) = 0;
          *((void *)v35 + 2) = 0;
          *((void *)v35 + 3) = v35 + 8;
          if (v34) {
            long long v37 = (llvm::Instruction *)(v34 - 24);
          }
          else {
            long long v37 = 0;
          }
          uint64_t v38 = *(llvm::Type **)(v30 + 2864);
          long long v39 = (llvm::Type *)(*(_DWORD *)(*v31 + 8) >> 8);
          long long v71 = "handle";
          v73[8] = 259;
          llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v35 + 8), v38, v39, 0, (const char **)&v71, v37);
          RuntimeFunctiouint64_t n = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v30 + 616, *(void *)(v3 + 24), 137);
          uint64_t v41 = v40;
          uint64_t v42 = 0;
          long long v71 = (char *)v73;
          uint64_t v72 = 0x1000000000;
          int v43 = *(_DWORD *)(v5 + 20);
          uint64_t v44 = v43 & 0x7FFFFFF;
          uint64_t v45 = (void *)(v5 - 32 * v44);
          int v46 = *(unsigned __int8 *)(v5 + 16);
          if (v46 == 84)
          {
            if ((v43 & 0x80000000) == 0) {
              goto LABEL_60;
            }
LABEL_88:
            uint64_t v64 = *(v45 - 1);
            if ((v64 & 0xFFFFFFFF0) != 0) {
              uint64_t v47 = (*((_DWORD *)v45 - 3) - *(_DWORD *)((char *)v45 - v64));
            }
            else {
              uint64_t v47 = 0;
            }
          }
          else
          {
            if (v46 == 39) {
              uint64_t v42 = (*(_DWORD *)(v5 + 80) + 1);
            }
            else {
              uint64_t v42 = 2;
            }
            if (v43 < 0) {
              goto LABEL_88;
            }
LABEL_60:
            uint64_t v47 = 0;
          }
          if (v45 == (void *)(v5 - 32 * v42 - 32 * v47 - 32))
          {
            unsigned int v48 = 0;
          }
          else
          {
            unsigned int v48 = 0;
            uint64_t v49 = 32 * v44 - 32 * v42 - 32 * v47 - 32;
            do
            {
              if (v48 >= HIDWORD(v72)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)&v71[8 * v48] = *v45;
              unsigned int v48 = v72 + 1;
              LODWORD(v72) = v72 + 1;
              v45 += 4;
              v49 -= 32;
            }
            while (v49);
            if (v48 >= HIDWORD(v72)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
          }
          *(void *)&v71[8 * v48] = v36;
          int v50 = v72;
          uint64_t v51 = (v72 + 1);
          LODWORD(v72) = v72 + 1;
          int v52 = (uint64_t *)v71;
          uint64_t v53 = (v50 + 2);
          __int16 v67 = 257;
          int v54 = operator new(32 * v53 + 80);
          uint64_t v55 = &v54[4 * v53];
          *((_DWORD *)v55 + 5) = *((_DWORD *)v55 + 5) & 0x38000000 | v53 & 0x7FFFFFF;
          if (v53)
          {
            uint64_t v56 = (uint64_t **)RuntimeFunction;
            do
            {
              *int v54 = 0;
              v54[1] = 0;
              v54[2] = 0;
              v54[3] = v55;
              v54 += 4;
            }
            while (v54 != v55);
            unsigned int v57 = *((_DWORD *)v55 + 5) & 0xC0000000;
          }
          else
          {
            unsigned int v57 = 0;
            uint64_t v56 = (uint64_t **)RuntimeFunction;
          }
          *uint64_t v55 = *v56[2];
          v55[1] = 0;
          *((unsigned char *)v55 + 16) = 84;
          *((unsigned char *)v55 + 17) = 0;
          *((_WORD *)v55 + 9) = 0;
          *((_DWORD *)v55 + 5) = v57 | v53 & 0x7FFFFFF;
          *(_OWORD *)(v55 + 3) = 0u;
          uint64_t v58 = v55 + 3;
          *(_OWORD *)(v55 + 5) = 0u;
          *((_DWORD *)v55 + 14) = 0;
          uint64_t v59 = *(void *)(v5 + 40);
          unsigned int v60 = (uint64_t *)(v5 + 24);
          v55[5] = v59;
          *(_WORD *)(v59 + 18) &= ~0x8000u;
          if ((*((unsigned char *)v55 + 23) & 0x10) != 0)
          {
            uint64_t v62 = *(void *)(v59 + 56);
            if (v62)
            {
              unsigned int v63 = *(llvm::ValueSymbolTable **)(v62 + 104);
              if (v63)
              {
                llvm::ValueSymbolTable::reinsertValue(v63, (llvm::Value *)v55);
                uint64_t v56 = (uint64_t **)RuntimeFunction;
              }
            }
          }
          uint64_t v61 = *v60;
          v55[3] = *v60;
          v55[4] = v60;
          *(void *)(v61 + 8) = v58;
          *unsigned int v60 = (uint64_t)v58;
          v55[8] = 0;
          llvm::CallInst::init((uint64_t ***)v55, v56, (uint64_t **)v41, v52, v51, 0, 0, &v66);
          if (v41)
          {
            if (!*(unsigned char *)(v41 + 16)) {
              *((_WORD *)v55 + 9) = (*(_WORD *)(v41 + 18) >> 2) & 0xFFC | *((_WORD *)v55 + 9) & 0xF003;
            }
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
LABEL_67:
      uint64_t v5 = 0;
      **(unsigned char **)(a1 + 16) = **(unsigned char **)(a1 + 16);
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v23 = 504;
    do
    {
      uint64_t v24 = &v68[v23];
      uint64_t v25 = *(unsigned char **)&v68[v23 - 80];
      if (&v68[v23 - 64] != v25) {
        free(v25);
      }
      long long v26 = (unsigned char *)*((void *)v24 - 20);
      if (v24 - 144 != v26) {
        free(v26);
      }
      v23 -= 168;
    }
    while (v23);
  }
  return v5;
}

uint64_t sub_1CC997268(uint64_t a1, llvm::GlobalValue *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)a2 + 8);
  if (*(unsigned char *)(v3 + 8) != 17) {
    return 0;
  }
  unint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = (void **)(a1 + 8);
  if (v8 > *(unsigned int *)(a1 + 20))
  {
    *(_DWORD *)(a1 + 16) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10 >= v8) {
    uint64_t v11 = *(void *)(v3 + 32);
  }
  else {
    uint64_t v11 = *(unsigned int *)(a1 + 16);
  }
  if (v11) {
    bzero(*v9, 8 * v11);
  }
  if (v8 > v10) {
    bzero((char *)*v9 + 8 * v10, 8 * (v8 - v10));
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t v12 = (void *)(a1 + 88);
  sub_1CD676A68(a1 + 88, v8);
  uint64_t v14 = *((void *)a2 + 5);
  if (v14 != *(void *)(a3 + 40)) {
    return 0;
  }
  long long v37 = v9;
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(void *)(v14 + 48);
  if (v16 != v14 + 40)
  {
    uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 40);
    int64_t v36 = ((unint64_t)*(unsigned int *)(*(void *)(v17 + 504) + 4) + 7) >> 3;
    do
    {
      if (v16) {
        uint64_t v18 = v16 - 24;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v18 == a3) {
        break;
      }
      if (*(unsigned char *)(v18 + 16) == 61)
      {
        uint64_t v19 = *(llvm::GlobalValue **)(v18 - 32);
        unsigned int v20 = *(_DWORD *)(*(void *)v19 + 8);
        if ((v20 & 0xFE) == 0x12) {
          unsigned int v20 = *(_DWORD *)(**(void **)(*(void *)v19 + 16) + 8);
        }
        if (v20 < 0x100) {
          goto LABEL_30;
        }
        unsigned int v21 = v20 >> 8;
        uint64_t v22 = *(unsigned int *)(v17 + 512);
        uint64_t v23 = *(void *)(v17 + 504);
        if (v22)
        {
          uint64_t v23 = *(void *)(v17 + 504);
          unint64_t v24 = *(unsigned int *)(v17 + 512);
          do
          {
            unint64_t v25 = v24 >> 1;
            uint64_t v26 = v23 + 16 * (v24 >> 1);
            unsigned int v27 = *(_DWORD *)(v26 + 8);
            uint64_t v28 = v26 + 16;
            v24 += ~(v24 >> 1);
            if (v27 < v21) {
              uint64_t v23 = v28;
            }
            else {
              unint64_t v24 = v25;
            }
          }
          while (v24);
        }
        if (v23 == *(void *)(v17 + 504) + 16 * v22 || *(_DWORD *)(v23 + 8) != v21) {
LABEL_30:
        }
          uint64_t v23 = *(void *)(v17 + 504);
        unsigned int v39 = *(_DWORD *)(v23 + 12);
        if (v39 > 0x40) {
          operator new[]();
        }
        uint64_t v38 = 0;
        uint64_t v29 = llvm::Value::stripAndAccumulateConstantOffsets(v19, (llvm::DataLayout *)(v17 + 272), (llvm::APInt *)&v38, 1, 0, 0, v13);
        if (v39 > 0x40)
        {
          uint64_t v30 = *v38;
          int v35 = v29;
          MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
          uint64_t v29 = v35;
        }
        else
        {
          uint64_t v30 = (uint64_t)((void)v38 << -(uint64_t)v39) >> -(uint64_t)v39;
        }
        if (v29 == a2)
        {
          uint64_t v31 = v30 / v36;
          *((void *)*v37 + v31) = llvm::getUnderlyingObject(*(llvm **)(v18 - 64), (const llvm::Value *)6);
          *(void *)(*v12 + 8 * v31) = v18;
        }
      }
      uint64_t v16 = *(void *)(v16 + 8);
    }
    while (v16 != v15);
  }
  uint64_t v32 = *(unsigned int *)(a1 + 16);
  if (v32)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 8 * v32;
    while (*(void *)((char *)*v37 + v33) && *(void *)(*v12 + v33))
    {
      v33 += 8;
      if (v34 == v33) {
        goto LABEL_45;
      }
    }
    return 0;
  }
LABEL_45:
  *(void *)a1 = a2;
  return 1;
}

BOOL sub_1CC9975EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v89 = a4;
  uint64_t v8 = sub_1CC997DF4(a3 + 128, a2);
  if (*(void *)(a3 + 128) + 24 * *(unsigned int *)(a3 + 144) == v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(v8 + 8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned int *)(v9 + 8);
  unint64_t v11 = v4 ? v10 + 1 : *(unsigned int *)(v9 + 8);
  if (v11 < 2) {
    return 0;
  }
  if (v4) {
    goto LABEL_9;
  }
  if (!v10) {
    return 0;
  }
  uint64_t v15 = *(uint64_t ***)v9;
  uint64_t v16 = *(void *)v9 + 8 * v10;
  while (1)
  {
    uint64_t v17 = sub_1CC9902E8(*v15, a3);
    if (!v17) {
      goto LABEL_23;
    }
    uint64_t v4 = v17;
    int v18 = *(unsigned __int8 *)(v17 + 16);
    if (v18 == 84)
    {
      uint64_t v19 = 0;
    }
    else if (v18 == 39)
    {
      uint64_t v19 = (*(_DWORD *)(v17 + 80) + 1);
    }
    else
    {
      uint64_t v19 = 2;
    }
    int v20 = *(_DWORD *)(v17 + 20);
    if (v20 < 0 && (uint64_t v31 = v17 - 32 * (v20 & 0x7FFFFFF), v32 = *(void *)(v31 - 8), (v32 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v22 = -(uint64_t)(v20 & 0x7FFFFFF);
      uint64_t v21 = (*(_DWORD *)(v31 - 12) - *(_DWORD *)(v31 - v32));
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = -(uint64_t)(v20 & 0x7FFFFFF);
    }
    unint64_t v23 = -32 * v19 - 32 * v21 - 32 * v22 - 32;
    uint64_t v24 = *(void *)(a1 + 64);
    if ((v23 >> 5))
    {
      if (**(void **)(v17 + 32 * v22) != *(void *)(v24 + 2856)) {
        goto LABEL_23;
      }
      if ((v23 >> 5) >= 2)
      {
        uint64_t v25 = v17 + 32 * v22 + 32;
        uint64_t v26 = (v23 >> 5) - 1;
        while (*(unsigned __int8 *)(*(void *)v25 + 16) <= 0x1Bu)
        {
          v25 += 32;
          if (!--v26) {
            goto LABEL_29;
          }
        }
        goto LABEL_23;
      }
    }
LABEL_29:
    unsigned int v27 = *(uint64_t **)(v24 + 29568);
    uint64_t v84 = a2;
    v90[0] = 0;
    if (!sub_1CD420258(v27, &v84, v90)) {
      break;
    }
    uint64_t v28 = *(void *)(a1 + 64);
    uint64_t v29 = sub_1CC997DF4(v28 + 25360, a2);
    if (*(void *)(v28 + 25360) + 24 * *(unsigned int *)(v28 + 25376) == v29) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(v29 + 8);
    }
    if (*(_DWORD *)(v30 + 8))
    {
      uint64_t v73 = (llvm::Instruction *)sub_1CC9902E8(**(uint64_t ***)v30, v28 + 25232);
      llvm::Instruction::moveAfter((llvm::Instruction *)v4, v73);
      goto LABEL_81;
    }
LABEL_23:
    if (++v15 == (uint64_t **)v16) {
      return 0;
    }
  }
  uint64_t v63 = *(void *)(a2 + 80);
  uint64_t v64 = v63 - 24;
  if (!v63) {
    uint64_t v64 = 0;
  }
  uint64_t v65 = v64 + 40;
  for (uint64_t i = *(void *)(v64 + 48); i != v65; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v67 = i - 24;
    if (!i) {
      uint64_t v67 = 0;
    }
    if (*(unsigned char *)(v67 + 16) != 83)
    {
      unsigned int v68 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v69 = v68 > 0x38;
      uint64_t v70 = (1 << v68) & 0x100060000000001;
      if (v69 || v70 == 0) {
        uint64_t v65 = i;
      }
      else {
        uint64_t v65 = *(void *)(i + 8);
      }
      break;
    }
  }
  if (v65) {
    uint64_t v72 = (llvm::Instruction *)(v65 - 24);
  }
  else {
    uint64_t v72 = 0;
  }
  llvm::Instruction::moveBefore((llvm::Instruction *)v4, v72);
LABEL_81:
  uint64_t v89 = v4;
LABEL_9:
  unsigned int v13 = *(unsigned __int8 *)(v4 + 16);
  if (v13 < 0x1C) {
    goto LABEL_59;
  }
  switch(v13)
  {
    case 'T':
      uint64_t v14 = 0;
LABEL_42:
      uint64_t v33 = 0;
      int v34 = *(_DWORD *)(v4 + 20);
      uint64_t v35 = -(uint64_t)(v34 & 0x7FFFFFF);
      if (v34 < 0)
      {
        uint64_t v82 = v4 - 32 * (v34 & 0x7FFFFFF);
        uint64_t v83 = *(void *)(v82 - 8);
        if ((v83 & 0xFFFFFFFF0) != 0) {
          uint64_t v33 = (*(_DWORD *)(v82 - 12) - *(_DWORD *)(v82 - v83));
        }
        else {
          uint64_t v33 = 0;
        }
      }
      uint64_t v36 = v4 - 32 * v14 - 32 * v33 - 32;
      long long v37 = (uint64_t **)(v4 + 32 * v35);
      if ((uint64_t **)v36 == v37) {
        break;
      }
      uint64_t v38 = **v37;
      uint64_t v39 = *(void *)(a1 + 64);
      if (v38 != *(void *)(v39 + 2856)) {
        break;
      }
      char v93 = 1;
      long long v92 = 0;
      uint64_t v84 = a3;
      unsigned int v85 = (void *)a2;
      uint64_t v86 = &v92;
      uint64_t v87 = &v93;
      uint64_t v40 = *(void *)(a1 + 32);
      uint64_t v41 = *(unsigned int *)(v40 + 8);
      if (v41)
      {
        uint64_t v42 = *(uint64_t **)v40;
        uint64_t v43 = 8 * v41;
        do
        {
          uint64_t v44 = *v42++;
          sub_1CC98364C(a3, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC997E50, (uint64_t)&v84, v44);
          v43 -= 8;
        }
        while (v43);
        Ident = v92;
        if (v92) {
          BOOL v46 = v93 == 0;
        }
        else {
          BOOL v46 = 1;
        }
        if (!v46) {
          goto LABEL_52;
        }
        uint64_t v39 = *(void *)(a1 + 64);
      }
      if (*(void *)(v39 + 1008))
      {
LABEL_92:
        LODWORD(v90[0]) = 0;
        SrcLocStr = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(v39 + 616, ";unknown;unknown;0;0;;",
                                     (llvm::Type *)0x16,
                                     v90);
        Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(*(void *)(a1 + 64) + 616, SrcLocStr, v90[0], 0, 0);
LABEL_52:
        uint64_t v47 = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
        uint64_t v48 = -v47;
        uint64_t v49 = (llvm::ConstantExpr **)(v4 - 32 * v47);
        if (*v49)
        {
          uint64_t v50 = v4 + 32 * v48;
          int v52 = *(void **)(v50 + 16);
          uint64_t v51 = (void *)(v50 + 16);
          void *v52 = *(v51 - 1);
          uint64_t v53 = *(v51 - 1);
          if (v53) {
            *(void *)(v53 + 16) = *v51;
          }
        }
        *uint64_t v49 = Ident;
        if (Ident)
        {
          uint64_t v56 = *((void *)Ident + 1);
          int v54 = (llvm::ConstantExpr ***)((char *)Ident + 8);
          uint64_t v55 = v56;
          uint64_t v57 = v4 + 32 * v48;
          *(void *)(v57 + 8) = v56;
          if (v56) {
            *(void *)(v55 + 16) = v57 + 8;
          }
          *(void *)(v57 + 16) = v54;
          *int v54 = v49;
        }
        break;
      }
      uint64_t v74 = *(void *)(a2 + 80);
      if (v74) {
        uint64_t v75 = v74 - 24;
      }
      else {
        uint64_t v75 = 0;
      }
      uint64_t v76 = *(void *)(v75 + 48);
      v90[0] = v75;
      v90[1] = v76;
      long long v91 = 0;
      sub_1CD60CD08(v39 + 616, v90);
      if (v91)
      {
        int v77 = *v91;
        if ((v77 - 4) > 0x1E)
        {
          if ((v77 - 3) >= 0xFFFFFFFE) {
            long long v79 = v91;
          }
          else {
            long long v79 = 0;
          }
          if ((v77 - 3) < 0xFFFFFFFE)
          {
            if (v77 == 3) {
              *((void *)v91 + 1) = 0;
            }
            goto LABEL_91;
          }
          unint64_t v80 = (unint64_t)(v79 + 8);
        }
        else
        {
          if ((v91[1] & 0x7F) != 2 && !*((_DWORD *)v91 + 3)) {
            goto LABEL_91;
          }
          uint64_t v81 = *((void *)v91 + 2);
          if ((v81 & 4) == 0) {
            goto LABEL_91;
          }
          unint64_t v80 = v81 & 0xFFFFFFFFFFFFFFF8;
          if (!v80) {
            goto LABEL_91;
          }
        }
        long long v94 = &v91;
        sub_1CC5FA668(v80 + 16, &v94);
      }
LABEL_91:
      uint64_t v39 = *(void *)(a1 + 64);
      goto LABEL_92;
    case '\'':
      uint64_t v14 = (*(_DWORD *)(v4 + 80) + 1);
      goto LABEL_42;
    case '!':
      uint64_t v14 = 2;
      goto LABEL_42;
  }
LABEL_59:
  LOBYTE(v90[0]) = 0;
  uint64_t v84 = a3;
  unsigned int v85 = &v89;
  uint64_t v86 = (void *)a2;
  uint64_t v87 = (char *)a1;
  uint64_t v88 = v90;
  uint64_t v58 = *(void *)(a1 + 32);
  uint64_t v59 = *(unsigned int *)(v58 + 8);
  if (!v59) {
    return 0;
  }
  unsigned int v60 = *(uint64_t **)v58;
  uint64_t v61 = 8 * v59;
  do
  {
    uint64_t v62 = *v60++;
    sub_1CC98364C(a3, (unsigned int (*)(uint64_t, void, uint64_t))sub_1CC997EE8, (uint64_t)&v84, v62);
    v61 -= 8;
  }
  while (v61);
  return LOBYTE(v90[0]) != 0;
}

uint64_t sub_1CC997B84(uint64_t result, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    uint64_t v3 = (uint64_t **)result;
    do
    {
      uint64_t v4 = *(void *)(v2 + 24);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 16) == 84)
        {
          int v5 = *(_DWORD *)(v4 + 20);
          unint64_t v6 = v4 - 32 * (v5 & 0x7FFFFFF);
          if (v6 <= v2)
          {
            if (v5 < 0 && (uint64_t v22 = *(void *)(v6 - 8), (v22 & 0xFFFFFFFF0) != 0)) {
              uint64_t v7 = (*(_DWORD *)(v6 - 12) - *(_DWORD *)(v6 - v22));
            }
            else {
              uint64_t v7 = 0;
            }
            uint64_t v8 = (uint64_t *)(v4 - 32);
            if (v4 - 32 - 32 * v7 > v2)
            {
              uint64_t v9 = *v8;
              if (*v8)
              {
                if (!*(unsigned char *)(v9 + 16) && *(void *)(v9 + 24) == *(void *)(v4 + 72))
                {
                  if ((v5 & 0x40000000) != 0) {
                    unint64_t v6 = *(void *)(v4 - 8);
                  }
                  if ((*(_DWORD *)(v9 + 32) & 0xFu) - 7 <= 1)
                  {
                    uint64_t v10 = *(void *)(v9 + 8);
                    if (v10)
                    {
                      unint64_t v11 = *v3;
                      uint64_t v12 = (*v3)[1];
                      uint64_t v13 = ((v2 - v6) >> 5);
                      while (1)
                      {
                        uint64_t v14 = *(void *)(v10 + 24);
                        uint64_t v15 = *(unsigned char *)(v14 + 16) == 84 ? *(void *)(v10 + 24) : 0;
                        BOOL v16 = v15 && v15 - 32 == v10;
                        if (v16
                          && ((int v18 = *(_DWORD *)(v15 + 20), (v18 & 0x80000000) == 0)
                           || (*(void *)(v15 - 32 * (v18 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) == 0)
                          && (v14 == v4
                           || (uint64_t v19 = *(void *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 32 * v13),
                               unint64_t result = sub_1CD5297D8(*v11, v19, &v23),
                               (result & 1) != 0)
                           || (unint64_t result = sub_1CC9683FC(v19, *(void *)(v12 + 64) + 3648)) != 0))
                        {
                          unsigned int v17 = 3;
                        }
                        else
                        {
                          unsigned int v17 = 0;
                        }
                        if (v17 <= 1) {
                          unsigned int v17 = 1;
                        }
                        if (v17 != 3) {
                          break;
                        }
                        uint64_t v10 = *(void *)(v10 + 8);
                        if (!v10)
                        {
                          uint64_t v4 = *(void *)(v2 + 24);
                          int v5 = *(_DWORD *)(v4 + 20);
                          goto LABEL_40;
                        }
                      }
                    }
                    else
                    {
LABEL_40:
                      if ((v5 & 0x40000000) != 0) {
                        uint64_t v20 = *(void *)(v4 - 8);
                      }
                      else {
                        uint64_t v20 = v4 - 32 * (v5 & 0x7FFFFFF);
                      }
                      uint64_t v21 = (uint64_t)v3[1];
                      if (*(_WORD *)(v9 + 18)) {
                        llvm::Function::BuildLazyArguments((llvm::Function *)v9);
                      }
                      uint64_t v23 = *(void *)(v9 + 88) + 40 * ((v2 - v20) >> 5);
                      unint64_t result = (uint64_t)sub_1CD5296A0(v21, &v23);
                    }
                  }
                }
              }
            }
          }
        }
      }
      unint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1CC997DAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = sub_1CC9902E8(a2, *a1);
  if (v3) {
    sub_1CC997B84(a1[1], *(void *)(v3 + 8));
  }
  return 0;
}

uint64_t sub_1CC997DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (sub_1CD45B528(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4)) {
    return v4;
  }
  else {
    return *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  }
}

uint64_t sub_1CC997E50(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = sub_1CC9902E8(a2, *(void *)a1);
  if (v5 && *(void *)(a1 + 8) == a3)
  {
    unint64_t v6 = *(uint64_t **)(a1 + 16);
    uint64_t v7 = *(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    if (*v6 == v7)
    {
      uint64_t v7 = *v6;
    }
    else if (*(unsigned __int8 *)(v7 + 16) > 3u)
    {
      uint64_t v7 = 0;
    }
    else
    {
      **(unsigned char **)(a1 + 24) = *v6 == 0;
    }
    *unint64_t v6 = v7;
  }
  return 0;
}

uint64_t sub_1CC997EE8(uint64_t a1, uint64_t *a2, llvm::Function *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = sub_1CC9902E8(a2, *(void *)a1);
  if (v7)
  {
    uint64_t v8 = (llvm::CallBase *)v7;
    if (v7 != **(void **)(a1 + 8) && *(llvm::Function **)(a1 + 16) == a3)
    {
      uint64_t v33 = v6;
      if (*(void *)(v7 + 48))
      {
        BOOL v16 = (uint64_t ***)(*(uint64_t (**)(void, void))(v5 + 48))(*(void *)(v5 + 56), *(void *)(*(void *)(v7 + 40) + 56));
        uint64_t v17 = *(void *)***v16;
        if (!*(void *)(v17 + 128)
          && !(*(unsigned int (**)(void))(**(void **)(v17 + 72) + 48))(*(void *)(v17 + 72)))
        {
          goto LABEL_72;
        }
        llvm::OptimizationRemark::OptimizationRemark((uint64_t)v46, (uint64_t)"openmp-opt", (uint64_t)"OMP170", 6, (uint64_t)v8);
        sub_1CC9985D4((uint64_t)&v50, (uint64_t)&v33, (uint64_t)v46);
        int v34 = " [";
        uint64_t v35 = 2;
        sub_1CC59ADEC((uint64_t *)&v58, (uint64_t)&v34);
        int v34 = "OMP170";
        uint64_t v35 = 6;
        sub_1CC59ADEC((uint64_t *)&v58, (uint64_t)&v34);
        int v34 = "]";
        uint64_t v35 = 1;
        sub_1CC59ADEC((uint64_t *)&v58, (uint64_t)&v34);
        LODWORD(v35) = v51;
        BYTE4(v35) = v52;
        long long v36 = v53;
        uint64_t v37 = v54;
        int v34 = (const char *)&unk_1F2616800;
        long long v38 = v55;
        long long v39 = v56;
        uint64_t v40 = v57;
        uint64_t v41 = v43;
        uint64_t v42 = 0x400000000;
        unsigned int v18 = v59;
        if (v59)
        {
          sub_1CD494D68((uint64_t)&v41, (uint64_t)&v58);
          unsigned int v18 = v59;
        }
        uint64_t v44 = v61;
        uint64_t v45 = v62;
        int v34 = (const char *)&unk_1F2616570;
        uint64_t v50 = &unk_1F2616800;
        uint64_t v19 = (char *)v58;
        if (v18)
        {
          unint64_t v20 = (unint64_t)v18 << 6;
          do
          {
            uint64_t v21 = (void **)&v19[v20];
            if (v19[v20 - 17] < 0) {
              operator delete(*(v21 - 5));
            }
            if (*((char *)v21 - 41) < 0) {
              operator delete(*(v21 - 8));
            }
            v20 -= 64;
          }
          while (v20);
          uint64_t v19 = (char *)v58;
        }
        if (v19 != v60) {
          free(v19);
        }
        v46[0] = &unk_1F2616800;
        uint64_t v25 = (char *)v47;
        if (v48)
        {
          unint64_t v26 = (unint64_t)v48 << 6;
          do
          {
            unsigned int v27 = (void **)&v25[v26];
            if (v25[v26 - 17] < 0) {
              operator delete(*(v27 - 5));
            }
            if (*((char *)v27 - 41) < 0) {
              operator delete(*(v27 - 8));
            }
            v26 -= 64;
          }
          while (v26);
          uint64_t v25 = (char *)v47;
        }
        if (v25 != v49) {
          free(v25);
        }
        llvm::OptimizationRemarkEmitter::emit(v16, (llvm::DiagnosticInfoOptimizationBase *)&v34);
        int v34 = (const char *)&unk_1F2616800;
        uint64_t v28 = (char *)v41;
        if (!v42)
        {
LABEL_70:
          if (v28 != v43) {
            free(v28);
          }
LABEL_72:
          llvm::CallGraphUpdater::removeCallSite(*(llvm::CallGraphUpdater **)(v5 + 40), v8);
          llvm::Value::doRAUW(v8, **(llvm::Value ***)(a1 + 8), (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        unint64_t v31 = (unint64_t)v42 << 6;
        do
        {
          uint64_t v32 = (void **)&v28[v31];
          if (v28[v31 - 17] < 0) {
            operator delete(*(v32 - 5));
          }
          if (*((char *)v32 - 41) < 0) {
            operator delete(*(v32 - 8));
          }
          v31 -= 64;
        }
        while (v31);
      }
      else
      {
        uint64_t v10 = (uint64_t ***)(*(uint64_t (**)(void, llvm::Function *))(v5 + 48))(*(void *)(v5 + 56), a3);
        uint64_t v11 = *(void *)***v10;
        if (!*(void *)(v11 + 128)
          && !(*(unsigned int (**)(void))(**(void **)(v11 + 72) + 48))(*(void *)(v11 + 72)))
        {
          goto LABEL_72;
        }
        llvm::OptimizationRemark::OptimizationRemark((uint64_t)v46, (uint64_t)"openmp-opt", (uint64_t)"OMP170", 6, a3);
        sub_1CC9985D4((uint64_t)&v50, (uint64_t)&v33, (uint64_t)v46);
        int v34 = " [";
        uint64_t v35 = 2;
        sub_1CC59ADEC((uint64_t *)&v58, (uint64_t)&v34);
        int v34 = "OMP170";
        uint64_t v35 = 6;
        sub_1CC59ADEC((uint64_t *)&v58, (uint64_t)&v34);
        int v34 = "]";
        uint64_t v35 = 1;
        sub_1CC59ADEC((uint64_t *)&v58, (uint64_t)&v34);
        LODWORD(v35) = v51;
        BYTE4(v35) = v52;
        long long v36 = v53;
        uint64_t v37 = v54;
        int v34 = (const char *)&unk_1F2616800;
        long long v38 = v55;
        long long v39 = v56;
        uint64_t v40 = v57;
        uint64_t v41 = v43;
        uint64_t v42 = 0x400000000;
        unsigned int v12 = v59;
        if (v59)
        {
          sub_1CD494D68((uint64_t)&v41, (uint64_t)&v58);
          unsigned int v12 = v59;
        }
        uint64_t v44 = v61;
        uint64_t v45 = v62;
        int v34 = (const char *)&unk_1F2616570;
        uint64_t v50 = &unk_1F2616800;
        uint64_t v13 = (char *)v58;
        if (v12)
        {
          unint64_t v14 = (unint64_t)v12 << 6;
          do
          {
            uint64_t v15 = (void **)&v13[v14];
            if (v13[v14 - 17] < 0) {
              operator delete(*(v15 - 5));
            }
            if (*((char *)v15 - 41) < 0) {
              operator delete(*(v15 - 8));
            }
            v14 -= 64;
          }
          while (v14);
          uint64_t v13 = (char *)v58;
        }
        if (v13 != v60) {
          free(v13);
        }
        v46[0] = &unk_1F2616800;
        uint64_t v22 = (char *)v47;
        if (v48)
        {
          unint64_t v23 = (unint64_t)v48 << 6;
          do
          {
            uint64_t v24 = (void **)&v22[v23];
            if (v22[v23 - 17] < 0) {
              operator delete(*(v24 - 5));
            }
            if (*((char *)v24 - 41) < 0) {
              operator delete(*(v24 - 8));
            }
            v23 -= 64;
          }
          while (v23);
          uint64_t v22 = (char *)v47;
        }
        if (v22 != v49) {
          free(v22);
        }
        llvm::OptimizationRemarkEmitter::emit(v10, (llvm::DiagnosticInfoOptimizationBase *)&v34);
        int v34 = (const char *)&unk_1F2616800;
        uint64_t v28 = (char *)v41;
        if (!v42) {
          goto LABEL_70;
        }
        unint64_t v29 = (unint64_t)v42 << 6;
        do
        {
          uint64_t v30 = (void **)&v28[v29];
          if (v28[v29 - 17] < 0) {
            operator delete(*(v30 - 5));
          }
          if (*((char *)v30 - 41) < 0) {
            operator delete(*(v30 - 8));
          }
          v29 -= 64;
        }
        while (v29);
      }
      uint64_t v28 = (char *)v41;
      goto LABEL_70;
    }
  }
  return 0;
}

void sub_1CC9985D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v16 = "OpenMP runtime call ";
  uint64_t v17 = 20;
  sub_1CC59ADEC((uint64_t *)(a3 + 80), (uint64_t)&v16);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v12, "OpenMPOptRuntime", 0x10uLL, *(void **)(*(void *)a2 + 8), *(void *)(*(void *)a2 + 16));
  uint64_t v6 = sub_1CD3D6290(a3, (long long *)v12);
  BOOL v16 = " deduplicated.";
  uint64_t v17 = 14;
  sub_1CC59ADEC((uint64_t *)(v6 + 80), (uint64_t)&v16);
  int v7 = *(_DWORD *)(v6 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v6 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  long long v8 = *(_OWORD *)(v6 + 16);
  *(void *)(a1 + 32) = *(void *)(v6 + 32);
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)a1 = &unk_1F2616800;
  long long v9 = *(_OWORD *)(v6 + 40);
  long long v10 = *(_OWORD *)(v6 + 56);
  uint64_t v11 = *(void *)(v6 + 72);
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  *(void *)(a1 + 88) = 0x400000000;
  if (*(_DWORD *)(v6 + 88)) {
    sub_1CD494D68(a1 + 80, v6 + 80);
  }
  *(void *)(a1 + 352) = *(void *)(v6 + 352);
  *(void *)(a1 + 360) = *(void *)(v6 + 360);
  *(void *)a1 = &unk_1F2616570;
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

uint64_t sub_1CC998740(unsigned int *a1, uint64_t a2)
{
  sub_1CD6769C0(a1);
  uint64_t result = MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  a1[4] = v5;
  if (v5)
  {
    *(void *)a1 = operator new(24 * v5, (std::align_val_t)8uLL);
    return sub_1CD676CC4((uint64_t)a1, (void *)a2);
  }
  else
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
  }
  return result;
}

uint64_t sub_1CC9987BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = sub_1CC9902E8(a2, *a1);
  uint64_t v4 = (_DWORD *)a1[1];
  uint64_t v22 = *(void *)(v3 + 40);
  uint64_t v5 = sub_1CD676F34(v4, &v22);
  uint64_t v6 = v5[2];
  uint64_t v7 = *((unsigned int *)v5 + 7);
  if (v6 != v5[1])
  {
    unsigned int v11 = *((_DWORD *)v5 + 6);
    goto LABEL_12;
  }
  if (!v7)
  {
LABEL_9:
    unsigned int v11 = *((_DWORD *)v5 + 6);
    if (v7 < v11)
    {
      *((_DWORD *)v5 + 7) = v7 + 1;
      *(void *)(v6 + 8 * v7) = v3;
      return 0;
    }
LABEL_12:
    if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)v5 + 8)))
    {
      if (v11 >= 0x40) {
        v11 *= 2;
      }
      else {
        unsigned int v11 = 128;
      }
    }
    else if (v11 - v7 >= v11 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v5 + 1), v11);
    unsigned int v11 = *((_DWORD *)v5 + 6);
    uint64_t v6 = v5[2];
LABEL_14:
    unsigned int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    unint64_t v14 = (uint64_t *)(v6 + 8 * v13);
    uint64_t v15 = *v14;
    if (*v14 == -1)
    {
      BOOL v16 = 0;
LABEL_26:
      if (v16) {
        unint64_t v20 = v16;
      }
      else {
        unint64_t v20 = v14;
      }
      if (*v20 != v3)
      {
        if (*v20 == -2) {
          --*((_DWORD *)v5 + 8);
        }
        else {
          ++*((_DWORD *)v5 + 7);
        }
        *unint64_t v20 = v3;
      }
    }
    else
    {
      BOOL v16 = 0;
      int v17 = 1;
      while (v15 != v3)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          BOOL v16 = v14;
        }
        unsigned int v19 = v13 + v17++;
        unsigned int v13 = v19 & v12;
        unint64_t v14 = (uint64_t *)(v6 + 8 * (v19 & v12));
        uint64_t v15 = *v14;
        if (*v14 == -1) {
          goto LABEL_26;
        }
      }
    }
    return 0;
  }
  long long v8 = 0;
  uint64_t v9 = 8 * v7;
  long long v10 = (uint64_t *)v5[2];
  while (*v10 != v3)
  {
    if (*v10 == -2) {
      long long v8 = v10;
    }
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      if (!v8) {
        goto LABEL_9;
      }
      *long long v8 = v3;
      --*((_DWORD *)v5 + 8);
      return 0;
    }
  }
  return 0;
}

void sub_1CC998970(uint64_t **a1, uint64_t a2, uint64_t a3, llvm *a4, uint64_t a5)
{
  if (a5) {
    uint64_t v6 = (llvm::BasicBlock *)(a5 - 24);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = **a1;
  long long v8 = (llvm::DomTreeUpdater *)*a1[1];
  __int16 v10 = 257;
  sub_1CD126150(a4, v6, 0, v7, v8, 0, (llvm::Twine *)v9, 0);
}

void sub_1CC998A68()
{
}

void *sub_1CC998A7C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F262A3A8;
  return result;
}

void sub_1CC998AB4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262A3A8;
}

void sub_1CC998AE0(uint64_t **a1, uint64_t a2, uint64_t a3, llvm *a4, uint64_t a5)
{
  if (a5) {
    uint64_t v6 = (llvm::BasicBlock *)(a5 - 24);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = **a1;
  long long v8 = (llvm::DomTreeUpdater *)*a1[1];
  __int16 v10 = 257;
  sub_1CD126150(a4, v6, 0, v7, v8, 0, (llvm::Twine *)v9, 0);
}

uint64_t sub_1CC998BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t result = a4;
  *a8 = a7;
  return result;
}

void sub_1CC998BE8()
{
}

void *sub_1CC998BFC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F262A3F0;
  return result;
}

void sub_1CC998C34(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262A3F0;
}

void sub_1CC998C60()
{
}

void sub_1CC998C9C(uint64_t a1)
{
  *(void *)a1 = &unk_1F262A438;
  sub_1CD64F554((llvm::CallGraphUpdater *)(a1 + 32));

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC998CF0(uint64_t a1)
{
  *(void *)a1 = &unk_1F262A438;
  sub_1CD64F554((llvm::CallGraphUpdater *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC998D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (void *)v4;
  v87[16] = *MEMORY[0x1E4F143B8];
  long long v8 = **v5;
  uint64_t v74 = v76;
  uint64_t v75 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(v8, (uint64_t)&v74);
  if (v75)
  {
    uint64_t v9 = (uint64_t *)((char *)v74 + 16);
    uint64_t v10 = 24 * v75;
    while (1)
    {
      uint64_t v11 = *(void *)(*(v9 - 1) + 8);
      if (*(void *)v11 == 6)
      {
        int v12 = *(_DWORD *)(v11 + 24);
        int v13 = *(unsigned __int16 *)(v11 + 28);
        if (v12 == 1852141679 && v13 == 28781) {
          break;
        }
      }
      v9 += 3;
      v10 -= 24;
      if (!v10) {
        goto LABEL_12;
      }
    }
    uint64_t v15 = *v9;
  }
  else
  {
LABEL_12:
    uint64_t v15 = 0;
  }
  if (v74 != v76) {
    free(v74);
  }
  uint64_t v16 = 0;
  if (!v15 || byte_1EBCE1818) {
    return v16;
  }
  if (llvm::CallGraphSCCPass::skipSCC((uint64_t)v7, v6)) {
    return 0;
  }
  unsigned int v85 = v87;
  uint64_t v86 = 0x1000000000;
  uint64_t v17 = *(void *)(v6 + 16);
  uint64_t v18 = *(void *)(v6 + 24);
  if (v17 == v18) {
    goto LABEL_34;
  }
  unsigned int v19 = 0;
  do
  {
    uint64_t v20 = *(void *)(*(void *)v17 + 8);
    if (!v20) {
      goto LABEL_30;
    }
    if (*(unsigned char *)(v20 + 16))
    {
      if (*(unsigned char *)(v20 + 16) == 3 && (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) == 0) {
        goto LABEL_30;
      }
    }
    else if (*(void *)(v20 + 72) == v20 + 72 && (*(unsigned char *)(v20 + 34) & 0x80) == 0)
    {
      goto LABEL_30;
    }
    if (v19 >= HIDWORD(v86)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v85[v19] = v20;
    unsigned int v19 = v86 + 1;
    LODWORD(v86) = v86 + 1;
LABEL_30:
    v17 += 8;
  }
  while (v17 != v18);
  if (v19)
  {
    uint64_t v22 = **(llvm::omp ***)v6;
    llvm::omp::getDeviceKernels(v22, (uint64_t)v68);
    unint64_t v23 = (uint64_t *)v7[1];
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    if (v24 == v25)
    {
LABEL_41:
      uint64_t v26 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v24 != &llvm::CallGraphWrapperPass::ID)
      {
        v24 += 16;
        if (v24 == v25) {
          goto LABEL_41;
        }
      }
      uint64_t v26 = *(void *)(v24 + 8);
    }
    v7[60] = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v26 + 96))(v26, &llvm::CallGraphWrapperPass::ID)+ 32);
    v7[61] = v6;
    v66[0] = 0;
    v66[1] = 0;
    unsigned int v67 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = v66;
    v59[0] = 0;
    v59[1] = 0;
    int v60 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    std::string __p = 0;
    sub_1CC990C74(v59, v85, &v85[v86]);
    v78[1] = 0;
    v78[0] = 0;
    long long v79 = (uint64_t *)v81;
    uint64_t v80 = 0x400000000;
    uint64_t v82 = v84;
    v84[0] = 0;
    uint64_t v83 = 0;
    v84[1] = 1;
    sub_1CC962478((uint64_t)&v74, *(uint64_t **)(*(v62 - 1) + 40), (uint64_t)&v64, (uint64_t)v78, (uint64_t)v59, (uint64_t)v68);
    long long v71 = v73;
    uint64_t v72 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v22, (uint64_t)&v71);
    if (v72)
    {
      unsigned int v27 = (uint64_t *)((char *)v71 + 16);
      uint64_t v28 = 24 * v72;
      while (1)
      {
        unint64_t v29 = *(void **)(*(v27 - 1) + 8);
        if (*v29 == 13)
        {
          uint64_t v30 = v29[3];
          uint64_t v31 = *(void *)((char *)v29 + 29);
          if (v30 == 0x642D706D6E65706FLL && v31 == 0x6563697665642D70) {
            break;
          }
        }
        v27 += 3;
        v28 -= 24;
        if (!v28) {
          goto LABEL_54;
        }
      }
      uint64_t v33 = *v27;
    }
    else
    {
LABEL_54:
      uint64_t v33 = 0;
    }
    if (v71 != v73) {
      free(v71);
    }
    int v34 = dword_1EBCE2358;
    if (!v33) {
      int v34 = 32;
    }
    LODWORD(v52) = 256;
    *((void *)&v52 + 1) = v7 + 4;
    uint64_t v53 = 0;
    int v54 = v34;
    char v55 = 1;
    long long v56 = sub_1CC9993A4;
    uint64_t v57 = &v65;
    uint64_t v58 = "openmp-opt";
    sub_1CD64F008((uint64_t)&v71, (uint64_t)v59, (uint64_t)&v74, &v52);
    v43[0] = 0;
    v43[1] = 0;
    int v44 = 0;
    uint64_t v45 = *(void *)(*v85 + 40);
    BOOL v46 = (void **)&v85;
    uint64_t v47 = v7 + 4;
    unsigned int v48 = sub_1CC9993A4;
    uint64_t v49 = &v65;
    uint64_t v50 = &v74;
    int v51 = &v71;
    uint64_t v16 = sub_1CC962850((uint64_t)v43, 0);
    MEMORY[0x1D25D9CD0](v43[0], 8);
    llvm::Attributor::~Attributor((llvm::Attributor *)&v71);
    MEMORY[0x1D25D9CD0](v77[3620], 8);
    MEMORY[0x1D25D9CD0](v77[3571], 8);
    for (uint64_t i = 0; i != -3268; i -= 19)
    {
      sub_1CD6769C0((unsigned int *)&v77[i + 3568]);
      MEMORY[0x1D25D9CD0](v77[i + 3568], 8);
      long long v36 = (void *)v77[i + 3557];
      if (&v77[i + 3559] != v36) {
        free(v36);
      }
    }
    llvm::OpenMPIRBuilder::~OpenMPIRBuilder((llvm::OpenMPIRBuilder *)v77);
    sub_1CD64F398((uint64_t)&v74);
    if (v80)
    {
      uint64_t v37 = v79;
      uint64_t v38 = 8 * v80;
      do
      {
        uint64_t v39 = *v37++;
        MEMORY[0x1D25D9CD0](v39, 8);
        v38 -= 8;
      }
      while (v38);
    }
    uint64_t v40 = v82;
    if (v83)
    {
      uint64_t v41 = 16 * v83;
      do
      {
        uint64_t v42 = *v40;
        v40 += 2;
        MEMORY[0x1D25D9CD0](v42, 8);
        v41 -= 16;
      }
      while (v41);
      uint64_t v40 = v82;
    }
    if (v40 != v84) {
      free(v40);
    }
    if (v79 != (uint64_t *)v81) {
      free(v79);
    }
    if (__p)
    {
      uint64_t v62 = __p;
      operator delete(__p);
    }
    MEMORY[0x1D25D9CD0](v59[0], 8);
    sub_1CD67770C(v66[0], v67);
    MEMORY[0x1D25D9CD0](v66[0], 8);
    if (v69)
    {
      uint64_t v70 = v69;
      operator delete(v69);
    }
    MEMORY[0x1D25D9CD0](v68[0], 8);
  }
  else
  {
LABEL_34:
    uint64_t v16 = 0;
  }
  if (v85 != v87) {
    free(v85);
  }
  return v16;
}

BOOL sub_1CC99939C(uint64_t a1)
{
  return llvm::CallGraphUpdater::finalize((llvm::CallGraphUpdater *)(a1 + 32));
}

uint64_t sub_1CC9993A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = sub_1CD677448(*a1, &v3)[1];
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1CC999420()
{
}

void sub_1CC99944C()
{
}

uint64_t sub_1CC999478()
{
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP specific optimizations.";
  v4.n128_u64[1] = 38;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677770(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE1798, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the OpenMP region merging optimization.";
  v4.n128_u64[1] = 46;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677910(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE1858, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable function internalization.";
  v4.n128_u64[1] = 33;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677AB0((llvm::cl::Option *)&unk_1EBCE1918, "openmp-opt-disable-internalization", &v5, &v4, &v2, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE1918, &dword_1CB82C000);
  LOBYTE(v5) = 0;
  v4.n128_u64[0] = (unint64_t)&v5;
  LODWORD(v3) = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCE19D8, "openmp-print-icv-values", &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE19D8, &dword_1CB82C000);
  LOBYTE(v5) = 0;
  v4.n128_u64[0] = (unint64_t)&v5;
  LODWORD(v3) = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCE1A98, "openmp-print-gpu-kernels", &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE1A98, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"[WIP] Tries to hide the latency of host to device memory transfers";
  v4.n128_u64[1] = 66;
  int v5 = 1;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCE1B58, "openmp-hide-memory-transfer-latency", &v4, &v5, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE1B58, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations involving deglobalization.";
  v4.n128_u64[1] = 55;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677AB0((llvm::cl::Option *)&unk_1EBCE1C18, "openmp-opt-disable-deglobalization", &v5, &v4, &v2, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE1C18, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations involving SPMD-ization.";
  v4.n128_u64[1] = 52;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677AB0((llvm::cl::Option *)&unk_1EBCE1CD8, "openmp-opt-disable-spmdization", &v5, &v4, &v2, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE1CD8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations involving folding.";
  v4.n128_u64[1] = 47;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677AB0((llvm::cl::Option *)&unk_1EBCE1D98, "openmp-opt-disable-folding", &v5, &v4, &v2, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE1D98, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations that replace the state machine.";
  v4.n128_u64[1] = 60;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677C4C(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE1E58, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations that eliminate barriers.";
  v4.n128_u64[1] = 53;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677DEC(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE1F18, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Print the current module after OpenMP optimizations.";
  v4.n128_u64[1] = 52;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677F8C(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE1FD8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Print the current module before OpenMP optimizations.";
  v4.n128_u64[1] = 53;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677AB0((llvm::cl::Option *)&unk_1EBCE2098, "openmp-opt-print-module-before", &v5, &v4, &v2, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE2098, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Inline all applicible functions on the device.";
  v4.n128_u64[1] = 46;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD67812C(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE2158, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Enables more verbose remarks.";
  v4.n128_u64[1] = 29;
  int v2 = 1;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD677AB0((llvm::cl::Option *)&unk_1EBCE2218, "openmp-opt-verbose-remarks", &v5, &v4, &v2, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE2218, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximal number of attributor iterations.";
  v4.n128_u64[1] = 40;
  int v2 = 256;
  uint64_t v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCE22D8, "openmp-opt-max-iterations", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCE22D8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum amount of shared memory to use.";
  v4.n128_u64[1] = 39;
  int v2 = -1;
  uint64_t v3 = &v2;
  sub_1CD6782CC(&v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCE2398, &dword_1CB82C000);
}

void llvm::initializePartialInlinerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE2460, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC999A40;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE2460, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC999A40(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CC999AF4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE2458;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F262A4E8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE2460, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC999A40;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCE2460, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

BOOL sub_1CC999BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (byte_1EBCE24E8) {
    return 0;
  }
  uint64_t v5 = a2 + 24;
  int v34 = 0;
  uint64_t v35 = 0;
  long long v36 = 0;
  unint64_t v6 = -1;
  uint64_t v7 = v5;
  do
  {
    uint64_t v7 = *(void *)(v7 + 8);
    ++v6;
  }
  while (v7 != v5);
  sub_1CBF7ACFC((uint64_t)&v34, v6);
  for (uint64_t i = *(void *)(a2 + 32); i != v5; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v9 = i - 56;
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(void *)(v9 + 8))
    {
      if (i && *(unsigned char *)(v9 + 16) == 3)
      {
        if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) != 0) {
          goto LABEL_17;
        }
      }
      else if (*(unsigned char *)(v9 + 16) || *(void *)(v9 + 72) != v9 + 72 || (*(unsigned char *)(v9 + 34) & 0x80) != 0)
      {
LABEL_17:
        uint64_t v10 = v35;
        if (v35 >= v36)
        {
          int v12 = v34;
          uint64_t v13 = (v35 - v34) >> 3;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            abort();
          }
          uint64_t v15 = v36 - v34;
          if ((v36 - v34) >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            if (v16 >> 61) {
              sub_1CB833614();
            }
            uint64_t v17 = (char *)operator new(8 * v16);
          }
          else
          {
            uint64_t v17 = 0;
          }
          uint64_t v18 = &v17[8 * v13];
          *(void *)uint64_t v18 = v9;
          uint64_t v11 = v18 + 8;
          if (v10 != v12)
          {
            do
            {
              uint64_t v19 = *((void *)v10 - 1);
              v10 -= 8;
              *((void *)v18 - 1) = v19;
              v18 -= 8;
            }
            while (v10 != v12);
            uint64_t v10 = v34;
          }
          int v34 = v18;
          uint64_t v35 = v11;
          long long v36 = &v17[8 * v16];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v35 = v9;
          uint64_t v11 = v10 + 8;
        }
        uint64_t v35 = v11;
      }
    }
  }
  uint64_t v20 = v34;
  if (v34 == v35)
  {
    BOOL v2 = 0;
  }
  else
  {
    BOOL v2 = 0;
    uint64_t v20 = v35;
    do
    {
      uint64_t v22 = (const llvm::Function *)*((void *)v20 - 1);
      v20 -= 8;
      uint64_t v21 = v22;
      uint64_t v35 = v20;
      if (*((void *)v22 + 1))
      {
        if ((llvm::Function::hasAddressTaken(v21, 0, 0, 1, 0, 0) & 1) == 0)
        {
          uint64_t v23 = *((void *)v21 + 14);
          if ((!v23 || (*(unsigned char *)(v23 + 12) & 4) == 0 && (*(unsigned char *)(v23 + 15) & 8) == 0)
            && !llvm::ProfileSummaryInfo::isFunctionEntryCold(*(llvm::ProfileSummaryInfo **)(a1 + 88), v21)
            && *((void *)v21 + 1))
          {
            llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(&v37, v21);
            BOOL v33 = v2;
            if (*(void *)(*(void *)(a1 + 88) + 8))
            {
              llvm::Function::getEntryCount((uint64_t ***)v21, 0, (uint64_t)&v57);
              if ((_BYTE)v58)
              {
                if (!byte_1EBCE25A8)
                {
                  v40[0] = v41;
                  v40[1] = (void *)0x100000000;
                  int v46 = 0;
                  v41[1] = 0;
                  void v41[2] = 0;
                  int v42 = 0;
                  char v45 = 0;
                  uint64_t v43 = 0;
                  int v44 = v21;
                  sub_1CC5A43B0((uint64_t)v40, 0);
                  uint64_t v48 = 0;
                  uint64_t v47 = 0;
                  int v49 = 0;
                  long long v50 = 0u;
                  long long v51 = 0u;
                  uint64_t v52 = 0;
                  uint64_t v53 = v55;
                  uint64_t v54 = 0x400000000;
                  v55[5] = 0;
                  v56[0] = 0;
                  v55[4] = v56;
                  v56[1] = 1;
                  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze();
                }
              }
            }
            uint64_t v24 = *((void *)v21 + 10);
            if (v24) {
              uint64_t v25 = v24 - 24;
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = *(void *)(v25 + 40);
            if (v26 != v25 + 40)
            {
              uint64_t v27 = v26 - 24;
              if (!v26) {
                uint64_t v27 = 0;
              }
              unsigned int v28 = *(unsigned __int8 *)(v27 + 16) - 40;
              if (v28 < 0xFFFFFFF5) {
                uint64_t v27 = 0;
              }
              if (v26)
              {
                BOOL v29 = *(unsigned char *)(v27 + 16) == 30 && v28 >= 0xFFFFFFF5;
                if (v29 && (*(_DWORD *)(v27 + 20) & 0x7FFFFFF) != 1) {
                  operator new();
                }
              }
            }
            uint64_t v39 = 0;
            sub_1CC9A3090((uint64_t *)&v39, 0);
            uint64_t v30 = v38;
            uint64_t v38 = 0;
            if (v30)
            {
              uint64_t v31 = *v30;
              uint64_t *v30 = 0;
              if (v31) {
                (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
              }
              MEMORY[0x1D25D9CE0](v30, 0x20C4093837F09);
            }
            BOOL v2 = v33;
          }
        }
        BOOL v2 = v2;
        uint64_t v20 = v35;
      }
    }
    while (v34 != v20);
  }
  if (v20)
  {
    uint64_t v35 = v20;
    operator delete(v20);
  }
  return v2;
}

void sub_1CC99F740()
{
}

void sub_1CC99F780(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC99F7B8(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

BOOL sub_1CC99F830(llvm::ModulePass *a1, llvm::LLVMContextImpl ***a2)
{
  if (llvm::ModulePass::skipModule(a1, a2)) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(char **)v6 != llvm::AssumptionCacheTracker::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::AssumptionCacheTracker::ID);
  uint64_t v35 = v9;
  uint64_t v10 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_11:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(char **)v11 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_11;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v34 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v13 + 96))(v13, llvm::TargetTransformInfoWrapperPass::ID);
  unint64_t v14 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_16:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(char **)v15 != llvm::ProfileSummaryInfoWrapperPass::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_16;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  uint64_t v18 = *(void *)((*(uint64_t (**)(uint64_t, char *))(*(void *)v17 + 96))(v17, llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  uint64_t v32 = v9;
  BOOL v33 = &v35;
  uint64_t v30 = a1;
  uint64_t v31 = &v34;
  int v19 = 0;
  uint64_t v20 = sub_1CC99FA34;
  uint64_t v21 = &v33;
  uint64_t v22 = sub_1CC99FA40;
  uint64_t v23 = &v32;
  uint64_t v24 = sub_1CC99FA48;
  uint64_t v25 = &v31;
  uint64_t v26 = 0;
  uint64_t v27 = sub_1CC99FA54;
  unsigned int v28 = &v30;
  uint64_t v29 = v18;
  return sub_1CC999BA4((uint64_t)&v19, (uint64_t)a2);
}

uint64_t sub_1CC99FA34(llvm::AssumptionCacheTracker ***a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(**a1, a2);
}

uint64_t sub_1CC99FA40(llvm::AssumptionCacheTracker **a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::lookupAssumptionCache(*a1, a2);
}

uint64_t *sub_1CC99FA48(llvm::TargetTransformInfoWrapperPass ***a1, const Function *a2)
{
  return llvm::TargetTransformInfoWrapperPass::getTTI(**a1, a2);
}

void sub_1CC99FA54(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)uint64_t v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

uint64_t sub_1CC99FD7C(uint64_t a1, uint64_t a2)
{
  uint64_t v294 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a2 + 24);
  if (!v2) {
    return 0;
  }
  int v4 = 0;
  unint64_t v5 = 0;
  int v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = *(void **)(a2 + 16);
  uint64_t v9 = &v8[2 * v2];
  do
  {
    uint64_t v10 = *v8;
    uint64_t v11 = (llvm::BasicBlock *)v8[1];
    uint64_t v12 = (*(uint64_t (**)(void, void))(a1 + 40))(*(void *)(a1 + 48), *v8);
    unint64_t v13 = sub_1CC9A2394(v11, v12);
    if (v14 == 1) {
      int v4 = 1;
    }
    if (__OFADD__(v5, v13)) {
      unint64_t v5 = ((uint64_t)(v5 + v13) >> 63) ^ 0x8000000000000000;
    }
    else {
      v5 += v13;
    }
    uint64_t v15 = v10 + 72;
    for (uint64_t i = *(void *)(v10 + 80); i != v15; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v17 = (llvm::BasicBlock *)(i - 24);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = sub_1CC9A2394(v17, v12);
      if (v19 == 1) {
        int v6 = 1;
      }
      if (__OFADD__(v7, v18)) {
        unint64_t v7 = ((uint64_t)(v7 + v18) >> 63) ^ 0x8000000000000000;
      }
      else {
        v7 += v18;
      }
    }
    v8 += 2;
  }
  while (v8 != v9);
  uint64_t v20 = *(unsigned int *)(a2 + 24);
  BOOL v21 = __OFSUB__(v7, 10 * v20);
  unint64_t v22 = v7 - 10 * v20;
  uint64_t v23 = a2;
  if (v21) {
    unint64_t v22 = 0x8000000000000000;
  }
  uint64_t v24 = *(void *)(a2 + 104);
  BOOL v21 = __OFSUB__(v22, v24);
  int64_t v25 = v22 - v24;
  if (v21) {
    int64_t v25 = (v25 >> 63) ^ 0x8000000000000000;
  }
  BOOL v26 = *(_DWORD *)(a2 + 112) == 1 || v6 == 1;
  int v27 = !v26;
  BOOL v21 = __OFADD__(v5, v25);
  int64_t v28 = v5 + v25;
  if (v21) {
    int64_t v28 = (v28 >> 63) ^ 0x8000000000000000;
  }
  BOOL v21 = __OFADD__(v28, dword_1EBCE2D28);
  uint64_t v29 = v28 + dword_1EBCE2D28;
  if (v21) {
    uint64_t v29 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v4) {
    int v30 = 0;
  }
  else {
    int v30 = v5;
  }
  if (v4) {
    int v31 = 0;
  }
  else {
    int v31 = v27;
  }
  uint64_t v32 = v29 << 32;
  if (*(void *)(a2 + 120))
  {
    uint64_t v33 = *(void *)(*(void *)(a2 + 16) + 16 * v20 - 8);
    uint64_t v34 = **(void **)(a2 + 136);
    if (!v34
      || ((v35 = *(void *)(*(void *)(a2 + 8) + 80)) != 0 ? (uint64_t v36 = v35 - 24) : (uint64_t v36 = 0),
          unsigned int v37 = sub_1CBF7A45C(**(void **)(a2 + 136), v36),
          v37 == -1))
    {
      unint64_t v38 = 0;
    }
    else
    {
      unint64_t v38 = *(void *)(*(void *)(v34 + 8) + 24 * v37 + 16);
    }
    uint64_t v39 = *(uint64_t **)(a2 + 136);
    uint64_t v40 = *v39;
    if (!*v39 || (unsigned int v41 = sub_1CBF7A45C(*v39, v33), v41 == -1)) {
      unint64_t v42 = 0;
    }
    else {
      unint64_t v42 = *(void *)(*(void *)(v40 + 8) + 24 * v41 + 16);
    }
    if (v42 >= v38) {
      unint64_t v42 = v38;
    }
    unint64_t v43 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      LOBYTE(v43) = 0;
      unint64_t v218 = v38;
      do
      {
        unint64_t v38 = v218 >> 1;
        LOBYTE(v43) = v43 + 1;
        unint64_t v219 = v218 >> 33;
        v218 >>= 1;
      }
      while (v219);
    }
    unint64_t v44 = v42 >> v43;
    if (v38 != 0x80000000) {
      unint64_t v44 = (((unint64_t)(v42 >> v43) << 31) | (v38 >> 1)) / v38;
    }
    char v45 = *(uint64_t **)(a2 + 120);
    llvm::Function::getEntryCount(*(uint64_t ****)a2, 0, (uint64_t)&v257);
    if (!v258[8])
    {
      uint64_t v46 = *((unsigned int *)v45 + 2);
      if (v46)
      {
        uint64_t v47 = *v45;
        uint64_t v48 = 8 * v46;
        while (1)
        {
          uint64_t v49 = *(void *)(*(void *)v47 + 40);
          if (v49 != *(void *)v47 + 40)
          {
            uint64_t v50 = v49 ? v49 - 24 : 0;
            unsigned int v51 = *(unsigned __int8 *)(v50 + 16) - 40;
            uint64_t v52 = v51 >= 0xFFFFFFF5 ? v50 : 0;
            if (v49)
            {
              BOOL v53 = *(unsigned char *)(v52 + 16) == 30 && v51 >= 0xFFFFFFF5;
              if (v53 && (*(_DWORD *)(v52 + 20) & 0x7FFFFFF) != 1)
              {
                unint64_t v257 = 0;
                unint64_t v282 = 0;
                if (llvm::Instruction::extractProfMetadata((llvm::Instruction *)v52, &v257, &v282)) {
                  break;
                }
              }
            }
          }
          v47 += 8;
          v48 -= 8;
          if (!v48) {
            goto LABEL_74;
          }
        }
      }
      else
      {
LABEL_74:
        if (v44 >= 0x3999999A
          && v44 <= ((unint64_t)(((((unint64_t)dword_1EBCE2C68 << 31) | 0x30)
                                                                   * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6))
        {
          LODWORD(v44) = (unint64_t)(((((unint64_t)dword_1EBCE2C68 << 31) | 0x30)
                                           * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
        }
      }
    }
  }
  else
  {
    LODWORD(v44) = 0;
  }
  unint64_t v54 = v32 >> 32;
  if (!v31) {
    unint64_t v54 = 0;
  }
  unint64_t v257 = v54;
  unint64_t v55 = llvm::BlockFrequency::operator*(&v257, v44);
  long long v56 = (char *)&xmmword_1EBCE1FF8 + 8;
  if (!byte_1EBCE27E8)
  {
    int v57 = *(_DWORD *)(a2 + 112);
    BOOL v26 = v57 == 0;
    BOOL v58 = v57 < 0;
    if (v26) {
      BOOL v58 = *(void *)(a2 + 104) < v30;
    }
    if (v58)
    {
      llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(&v245, *(const llvm::Function **)a2);
      unsigned int v240 = 0;
      uint64_t v59 = *(void *)(*(void *)(*(void *)(a2 + 8) + 8) + 24);
      int v60 = *(unsigned __int8 **)(v59 + 48);
      *(void *)&long long v272 = v60;
      if (v60)
      {
        llvm::MetadataTracking::track((uint64_t)&v272, v60, 2);
        uint64_t v61 = *(void *)(v59 + 40);
        unint64_t v257 = v272;
        if ((void)v272)
        {
          llvm::MetadataTracking::track((uint64_t)&v257, (unsigned __int8 *)v272, 2);
          *(void *)uint64_t v258 = v61;
          if (!(void)v272) {
            goto LABEL_377;
          }
          int v62 = *(unsigned __int8 *)v272;
          if ((v62 - 4) > 0x1E)
          {
            if ((v62 - 3) >= 0xFFFFFFFE) {
              uint64_t v198 = v272;
            }
            else {
              uint64_t v198 = 0;
            }
            if ((v62 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v64 = v198 + 8;
LABEL_421:
              unint64_t v282 = (unint64_t)&v272;
              sub_1CC5FA668(v64 + 16, &v282);
              goto LABEL_377;
            }
            if (v62 == 3) {
              *(void *)(v272 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v272 + 1) & 0x7F) == 2 || *(_DWORD *)(v272 + 12))
          {
            uint64_t v63 = *(void *)(v272 + 16);
            if ((v63 & 4) != 0)
            {
              unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8;
              if (v64) {
                goto LABEL_421;
              }
            }
          }
LABEL_377:
          if (!v240) {
            goto LABEL_378;
          }
          int v195 = *(unsigned __int8 *)v240;
          if ((v195 - 4) > 0x1E)
          {
            if ((v195 - 3) >= 0xFFFFFFFE) {
              uint64_t v216 = v240;
            }
            else {
              uint64_t v216 = 0;
            }
            if ((v195 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v197 = (unint64_t)v216 + 8;
LABEL_475:
              unint64_t v282 = (unint64_t)&v240;
              sub_1CC5FA668(v197 + 16, &v282);
              goto LABEL_378;
            }
            if (v195 == 3) {
              *((void *)v240 + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v240 + 1) & 0x7F) == 2 || *((_DWORD *)v240 + 3))
          {
            uint64_t v196 = *((void *)v240 + 2);
            if ((v196 & 4) != 0)
            {
              unint64_t v197 = v196 & 0xFFFFFFFFFFFFFFF8;
              if (v197) {
                goto LABEL_475;
              }
            }
          }
LABEL_378:
          unsigned int v240 = (void *)v257;
          if (v257) {
            llvm::MetadataTracking::retrack((uint64_t)&v257, (unsigned __int8 *)v257, (uint64_t)&v240);
          }
          uint64_t v183 = *(void *)v258;
          uint64_t v184 = ***(void ***)v245.__r_.__value_.__l.__data_;
          if (*(void *)(v184 + 128)
            || (*(unsigned int (**)(void))(**(void **)(v184 + 72) + 48))(*(void *)(v184 + 72)))
          {
            llvm::DiagnosticLocation::DiagnosticLocation(&v243, (const llvm::DebugLoc *)&v240);
            uint64_t v199 = *(void *)(v183 + 56);
            *(_DWORD *)uint64_t v258 = 11;
            v258[4] = 2;
            *(_OWORD *)&v258[16] = v243;
            *(void *)&v258[8] = v199;
            *(void *)&long long v259 = "partial-inlining";
            *((void *)&v259 + 1) = "OutlineRegionTooSmall";
            *(void *)&long long v260 = 21;
            BYTE8(v260) = 0;
            LOBYTE(v261) = 0;
            BOOL v262 = v264;
            uint64_t v263 = 0x400000000;
            LOBYTE(v269) = 0;
            HIDWORD(v269) = -1;
            uint64_t v270 = v183;
            unint64_t v257 = (unint64_t)&unk_1F26165E0;
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v272, "Function", 8uLL, *(unsigned __int8 **)a2);
            sub_1CD3D6290((uint64_t)&v257, &v272);
            unint64_t v282 = (unint64_t)" not partially inlined into callers (Original Size = ";
            uint64_t v283 = 53;
            sub_1CC59ADEC((uint64_t *)&v262, (uint64_t)&v282);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "OutlinedRegionOriginalSize", 0x1AuLL, *(void *)(a2 + 104), *(void *)(a2 + 112));
            uint64_t v200 = sub_1CD3D6290((uint64_t)&v257, &__p);
            v282 = (unint64_t)", Size of call sequence to outlined functiouint64_t n = ";
            uint64_t v283 = 47;
            sub_1CC59ADEC((uint64_t *)(v200 + 80), (uint64_t)&v282);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v248, "NewSize", 7uLL, v30);
            uint64_t v201 = sub_1CD3D6290(v200, (long long *)&v248);
            unint64_t v282 = (unint64_t)")";
            uint64_t v283 = 1;
            sub_1CC59ADEC((uint64_t *)(v201 + 80), (uint64_t)&v282);
            int v202 = *(_DWORD *)(v201 + 8);
            BYTE4(v283) = *(unsigned char *)(v201 + 12);
            LODWORD(v283) = v202;
            long long v203 = *(_OWORD *)(v201 + 16);
            *(void *)&v284[16] = *(void *)(v201 + 32);
            *(_OWORD *)uint64_t v284 = v203;
            uint64_t v204 = *(void *)(v201 + 72);
            long long v205 = *(_OWORD *)(v201 + 56);
            long long v285 = *(_OWORD *)(v201 + 40);
            long long v286 = v205;
            unint64_t v282 = (unint64_t)&unk_1F2616800;
            uint64_t v287 = v204;
            int v288 = v290;
            uint64_t v289 = 0x400000000;
            if (*(_DWORD *)(v201 + 88)) {
              sub_1CD494D68((uint64_t)&v288, v201 + 80);
            }
            uint64_t v206 = *(void *)(v201 + 360);
            uint64_t v292 = *(void *)(v201 + 352);
            uint64_t v293 = v206;
            unint64_t v282 = (unint64_t)&unk_1F26165E0;
            if (v250 < 0) {
              operator delete(v249);
            }
            if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v248.__r_.__value_.__l.__data_);
            }
            if (v254 < 0) {
              operator delete(v253);
            }
            if (SHIBYTE(v252) < 0) {
              operator delete((void *)__p);
            }
            if (v277 < 0) {
              operator delete(v274);
            }
            if (SHIBYTE(v273) < 0) {
              operator delete((void *)v272);
            }
            unint64_t v257 = (unint64_t)&unk_1F2616800;
            uint64_t v207 = (char **)v262;
            if (v263)
            {
              unint64_t v208 = (unint64_t)v263 << 6;
              do
              {
                int v209 = (void **)((char *)v207 + v208);
                if (*((char *)v207 + v208 - 17) < 0) {
                  operator delete(*(v209 - 5));
                }
                if (*((char *)v209 - 41) < 0) {
                  operator delete(*(v209 - 8));
                }
                v208 -= 64;
              }
              while (v208);
              uint64_t v207 = (char **)v262;
            }
            if (v207 != v264) {
              free(v207);
            }
            llvm::OptimizationRemarkEmitter::emit((uint64_t ***)&v245, (llvm::DiagnosticInfoOptimizationBase *)&v282);
            unint64_t v282 = (unint64_t)&unk_1F2616800;
            int v213 = (char *)v288;
            if (v289)
            {
              unint64_t v214 = (unint64_t)v289 << 6;
              do
              {
                uint64_t v215 = (void **)&v213[v214];
                if (v213[v214 - 17] < 0) {
                  operator delete(*(v215 - 5));
                }
                if (*((char *)v215 - 41) < 0) {
                  operator delete(*(v215 - 8));
                }
                v214 -= 64;
              }
              while (v214);
              int v213 = (char *)v288;
            }
            if (v213 != (char *)v290) {
              free(v213);
            }
          }
          if (!v240) {
            goto LABEL_386;
          }
          int v185 = *(unsigned __int8 *)v240;
          if ((v185 - 4) > 0x1E)
          {
            if ((v185 - 3) >= 0xFFFFFFFE) {
              uint64_t v189 = v240;
            }
            else {
              uint64_t v189 = 0;
            }
            if ((v185 - 3) < 0xFFFFFFFE)
            {
              if (v185 == 3) {
                *((void *)v240 + 1) = 0;
              }
              goto LABEL_386;
            }
            unint64_t v190 = (unint64_t)v189 + 8;
          }
          else if ((*((unsigned char *)v240 + 1) & 0x7F) != 2 && !*((_DWORD *)v240 + 3) {
                 || (uint64_t v217 = *((void *)v240 + 2), (v217 & 4) == 0)
          }
                 || (unint64_t v190 = v217 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
LABEL_386:
            uint64_t v186 = (uint64_t *)v245.__r_.__value_.__r.__words[2];
            v245.__r_.__value_.__r.__words[2] = 0;
            if (v186)
            {
              uint64_t v187 = *v186;
              uint64_t *v186 = 0;
              if (v187) {
                (*(void (**)(uint64_t))(*(void *)v187 + 8))(v187);
              }
              MEMORY[0x1D25D9CE0](v186, 0x20C4093837F09);
            }
            return 0;
          }
          unint64_t v257 = (unint64_t)&v240;
          sub_1CC5FA668(v190 + 16, &v257);
          goto LABEL_386;
        }
      }
      else
      {
        uint64_t v61 = *(void *)(v59 + 40);
        unint64_t v257 = 0;
      }
      *(void *)uint64_t v258 = v61;
      goto LABEL_377;
    }
  }
  uint64_t v65 = *(void *)(*(void *)(a2 + 8) + 8);
  BOOL v241 = 0;
  uint64_t v242 = 0;
  unsigned int v240 = 0;
  unint64_t v221 = v55;
  unint64_t v66 = 0;
  if (v65)
  {
    uint64_t v67 = v65;
    do
    {
      ++v66;
      uint64_t v67 = *(void *)(v67 + 8);
    }
    while (v67);
  }
  sub_1CC9A301C(&v240, v65, 0, v66);
  v238[0] = 0;
  v238[1] = 0;
  int v239 = 0;
  llvm::Function::getEntryCount(*(uint64_t ****)a2, 0, (uint64_t)&v235);
  unsigned int v68 = &dword_1CD912700[7744];
  if (!v237) {
    goto LABEL_118;
  }
  uint64_t v69 = *(void *)(*(void *)(a2 + 8) + 8);
  long long __p = 0uLL;
  uint64_t v252 = 0;
  unint64_t v70 = 0;
  if (v69)
  {
    uint64_t v71 = v69;
    do
    {
      ++v70;
      uint64_t v71 = *(void *)(v71 + 8);
    }
    while (v71);
  }
  sub_1CC9A301C(&__p, v69, 0, v70);
  uint64_t v72 = (std::string::size_type *)*((void *)&__p + 1);
  uint64_t v73 = (std::string::size_type *)__p;
  if ((void)__p != *((void *)&__p + 1))
  {
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    do
    {
      std::string::size_type v76 = *v73;
      v248.__r_.__value_.__r.__words[0] = v76;
      if (*(unsigned char *)(v76 + 16) != 4)
      {
        int v77 = v56;
        uint64_t v78 = *(void *)(*(void *)(v76 + 40) + 56);
        if (v74 == v78)
        {
          uint64_t v78 = v74;
        }
        else
        {
          long long v79 = *(uint64_t (**)(void, void))(a1 + 56);
          if (!v79)
          {
            *(void *)&long long v272 = &v273;
            *((void *)&v272 + 1) = 0x100000000;
            int v281 = 0;
            uint64_t v274 = 0;
            uint64_t v275 = 0;
            int v276 = 0;
            char v280 = 0;
            uint64_t v278 = 0;
            uint64_t v279 = v78;
            sub_1CC5A43B0((uint64_t)&v272, 0);
            uint64_t v283 = 0;
            unint64_t v282 = 0;
            *(_DWORD *)uint64_t v284 = 0;
            *(_OWORD *)&v284[8] = 0u;
            long long v285 = 0u;
            *(void *)&long long v286 = 0;
            *((void *)&v286 + 1) = &v288;
            uint64_t v287 = 0x400000000;
            v290[3] = 0;
            v291[0] = 0;
            int v290[2] = v291;
            v291[1] = 1;
            llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze();
          }
          uint64_t v75 = (llvm::BlockFrequencyInfoImplBase **)v79(*(void *)(a1 + 64), *(void *)(*(void *)(v76 + 40) + 56));
        }
        uint64_t BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(v75, *(const llvm::BasicBlock **)(v76 + 40), 0);
        if (v81) {
          uint64_t v82 = BlockProfileCount;
        }
        else {
          uint64_t v82 = 0;
        }
        sub_1CD45F378((uint64_t)v238, (uint64_t *)&v248)[1] = v82;
        uint64_t v74 = v78;
        long long v56 = v77;
      }
      ++v73;
    }
    while (v73 != v72);
    uint64_t v23 = a2;
    unsigned int v68 = dword_1CD912700 + 30976;
    uint64_t v73 = (std::string::size_type *)__p;
  }
  if (v73)
  {
    *((void *)&__p + 1) = v73;
    operator delete(v73);
  }
  if (v237) {
    unint64_t v83 = v235;
  }
  else {
LABEL_118:
  }
    unint64_t v83 = 0;
  unsigned int v85 = (uint64_t *)v240;
  uint64_t v84 = v241;
  if (v240 == v241)
  {
LABEL_372:
    uint64_t v182 = 0;
    goto LABEL_373;
  }
  unint64_t v220 = v83;
  char v222 = 0;
  uint64_t v86 = *((void *)v68 + 126);
  do
  {
    uint64_t v87 = *v85;
    uint64_t v234 = v87;
    if (*(unsigned char *)(v87 + 16) == 4 || dword_1EBCE2BA8 != -1 && *(_DWORD *)a1 >= dword_1EBCE2BA8) {
      goto LABEL_134;
    }
    llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v232, *(const llvm::Function **)(*(void *)(v87 + 40) + 56));
    uint64_t v90 = *(void *)(v87 - 32);
    if (!v90 || *(unsigned char *)(v90 + 16) || *(void *)(v90 + 24) != *(void *)(v87 + 72)) {
      uint64_t v90 = 0;
    }
    if (v56[2024])
    {
      if (!llvm::isInlineViable((llvm *)v90, v88, v89)) {
        goto LABEL_282;
      }
      goto LABEL_130;
    }
    char v93 = v56;
    uint64_t v94 = *(void *)(*(void *)(v87 + 40) + 56);
    uint64_t v95 = (llvm::BasicBlock *)(*(uint64_t (**)(void, uint64_t))(a1 + 40))(*(void *)(a1 + 48), v90);
    uint64_t v96 = *(void *)(***(void ***)v90 + 72);
    int v97 = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(void *)v96 + 32))(v96, "partial-inlining", 16);
    llvm::getInlineParams(dword_1EBD039A0, (uint64_t)&v257);
    uint64_t v98 = v232;
    if (!v97) {
      uint64_t v98 = 0;
    }
    llvm::getInlineCost(v87, (uint64_t)&v257, v95, *(void *)(a1 + 8), *(void *)(a1 + 16), *(uint64_t (**)(uint64_t, const llvm::Function *))(a1 + 72), *(void *)(a1 + 80), (uint64_t)&v243, *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 88), (uint64_t)v98);
    if (v243 == 0x7FFFFFFF)
    {
      uint64_t v104 = ***(void ***)v232[0];
      if (!*(void *)(v104 + 128)
        && !(*(unsigned int (**)(void))(**(void **)(v104 + 72) + 48))(*(void *)(v104 + 72)))
      {
        int v105 = 0;
        long long v56 = v93;
        goto LABEL_280;
      }
      llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v257, (uint64_t)"partial-inlining", (uint64_t)"NeverInline", 11, v87);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v272, "Callee", 6uLL, *(unsigned __int8 **)v23);
      uint64_t v133 = sub_1CD3D6290((uint64_t)&v257, &v272);
      *(void *)&long long __p = " not partially inlined into ";
      *((void *)&__p + 1) = 28;
      sub_1CC59ADEC((uint64_t *)(v133 + 80), (uint64_t)&__p);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "Caller", 6uLL, (unsigned __int8 *)v94);
      uint64_t v134 = sub_1CD3D6290(v133, &__p);
      v248.__r_.__value_.__r.__words[0] = (std::string::size_type)" because it should never be inlined (cost=never)";
      v248.__r_.__value_.__l.__size_ = 48;
      sub_1CC59ADEC((uint64_t *)(v134 + 80), (uint64_t)&v248);
      int v135 = *(_DWORD *)(v134 + 8);
      BYTE4(v283) = *(unsigned char *)(v134 + 12);
      LODWORD(v283) = v135;
      long long v136 = *(_OWORD *)(v134 + 16);
      *(void *)&v284[16] = *(void *)(v134 + 32);
      *(_OWORD *)uint64_t v284 = v136;
      uint64_t v137 = *(void *)(v134 + 72);
      long long v138 = *(_OWORD *)(v134 + 56);
      long long v285 = *(_OWORD *)(v134 + 40);
      long long v286 = v138;
      uint64_t v287 = v137;
      unint64_t v282 = (unint64_t)&unk_1F2616800;
      int v288 = v290;
      uint64_t v289 = v86;
      long long v56 = v93;
      if (*(_DWORD *)(v134 + 88)) {
        sub_1CD494D68((uint64_t)&v288, v134 + 80);
      }
      uint64_t v139 = *(void *)(v134 + 360);
      uint64_t v292 = *(void *)(v134 + 352);
      uint64_t v293 = v139;
      unint64_t v282 = (unint64_t)&unk_1F26165A8;
      if (v254 < 0) {
        operator delete(v253);
      }
      if (SHIBYTE(v252) < 0) {
        operator delete((void *)__p);
      }
      if (v277 < 0) {
        operator delete(v274);
      }
      if (SHIBYTE(v273) < 0) {
        operator delete((void *)v272);
      }
      unint64_t v257 = (unint64_t)&unk_1F2616800;
      uint64_t v140 = (char **)v262;
      if (v263)
      {
        unint64_t v141 = (unint64_t)v263 << 6;
        do
        {
          uint64_t v142 = (void **)((char *)v140 + v141);
          if (*((char *)v140 + v141 - 17) < 0) {
            operator delete(*(v142 - 5));
          }
          if (*((char *)v142 - 41) < 0) {
            operator delete(*(v142 - 8));
          }
          v141 -= 64;
        }
        while (v141);
        uint64_t v140 = (char **)v262;
      }
      if (v140 != v264) {
        free(v140);
      }
      llvm::OptimizationRemarkEmitter::emit(v232, (llvm::DiagnosticInfoOptimizationBase *)&v282);
      unint64_t v282 = (unint64_t)&unk_1F2616800;
      uint64_t v143 = (char *)v288;
      if (!v289) {
        goto LABEL_277;
      }
      unint64_t v146 = (unint64_t)v289 << 6;
      do
      {
        uint64_t v147 = (void **)&v143[v146];
        if (v143[v146 - 17] < 0) {
          operator delete(*(v147 - 5));
        }
        if (*((char *)v147 - 41) < 0) {
          operator delete(*(v147 - 8));
        }
        v146 -= 64;
      }
      while (v146);
      goto LABEL_276;
    }
    if (v243 != 0x80000000)
    {
      long long v56 = v93;
      if ((int)v243 >= SDWORD1(v243))
      {
        uint64_t v121 = ***(void ***)v232[0];
        if (!*(void *)(v121 + 128)
          && !(*(unsigned int (**)(void))(**(void **)(v121 + 72) + 48))(*(void *)(v121 + 72)))
        {
          goto LABEL_279;
        }
        llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v257, (uint64_t)"partial-inlining", (uint64_t)"TooCostly", 9, v87);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v272, "Callee", 6uLL, *(unsigned __int8 **)v23);
        sub_1CD3D6290((uint64_t)&v257, &v272);
        *(void *)&long long __p = " not partially inlined into ";
        *((void *)&__p + 1) = 28;
        sub_1CC59ADEC((uint64_t *)&v262, (uint64_t)&__p);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "Caller", 6uLL, (unsigned __int8 *)v94);
        uint64_t v122 = sub_1CD3D6290((uint64_t)&v257, &__p);
        v248.__r_.__value_.__r.__words[0] = (std::string::size_type)" because too costly to inline (cost=";
        v248.__r_.__value_.__l.__size_ = 36;
        sub_1CC59ADEC((uint64_t *)(v122 + 80), (uint64_t)&v248);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v248, "Cost", 4uLL, v243);
        uint64_t v123 = sub_1CD3D6290(v122, (long long *)&v248);
        v245.__r_.__value_.__r.__words[0] = (std::string::size_type)", threshold=";
        v245.__r_.__value_.__l.__size_ = 12;
        sub_1CC59ADEC((uint64_t *)(v123 + 80), (uint64_t)&v245);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v245, "Threshold", 9uLL, SDWORD1(v243));
        uint64_t v124 = sub_1CD3D6290(v123, (long long *)&v245);
        unsigned int v255 = ")";
        uint64_t v256 = 1;
        sub_1CC59ADEC((uint64_t *)(v124 + 80), (uint64_t)&v255);
        int v125 = *(_DWORD *)(v124 + 8);
        BYTE4(v283) = *(unsigned char *)(v124 + 12);
        LODWORD(v283) = v125;
        long long v126 = *(_OWORD *)(v124 + 16);
        *(void *)&v284[16] = *(void *)(v124 + 32);
        *(_OWORD *)uint64_t v284 = v126;
        uint64_t v127 = *(void *)(v124 + 72);
        long long v128 = *(_OWORD *)(v124 + 56);
        long long v285 = *(_OWORD *)(v124 + 40);
        long long v286 = v128;
        uint64_t v287 = v127;
        unint64_t v282 = (unint64_t)&unk_1F2616800;
        int v288 = v290;
        uint64_t v289 = v86;
        if (*(_DWORD *)(v124 + 88)) {
          sub_1CD494D68((uint64_t)&v288, v124 + 80);
        }
        uint64_t v129 = *(void *)(v124 + 360);
        uint64_t v292 = *(void *)(v124 + 352);
        uint64_t v293 = v129;
        unint64_t v282 = (unint64_t)&unk_1F26165E0;
        if (v247 < 0) {
          operator delete(v246);
        }
        if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v245.__r_.__value_.__l.__data_);
        }
        if (v250 < 0) {
          operator delete(v249);
        }
        if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v248.__r_.__value_.__l.__data_);
        }
        if (v254 < 0) {
          operator delete(v253);
        }
        if (SHIBYTE(v252) < 0) {
          operator delete((void *)__p);
        }
        if (v277 < 0) {
          operator delete(v274);
        }
        if (SHIBYTE(v273) < 0) {
          operator delete((void *)v272);
        }
        unint64_t v257 = (unint64_t)&unk_1F2616800;
        unint64_t v130 = (char **)v262;
        if (v263)
        {
          unint64_t v131 = (unint64_t)v263 << 6;
          do
          {
            uint64_t v132 = (void **)((char *)v130 + v131);
            if (*((char *)v130 + v131 - 17) < 0) {
              operator delete(*(v132 - 5));
            }
            if (*((char *)v132 - 41) < 0) {
              operator delete(*(v132 - 8));
            }
            v131 -= 64;
          }
          while (v131);
          unint64_t v130 = (char **)v262;
        }
        if (v130 != v264) {
          free(v130);
        }
        llvm::OptimizationRemarkEmitter::emit(v232, (llvm::DiagnosticInfoOptimizationBase *)&v282);
        unint64_t v282 = (unint64_t)&unk_1F2616800;
        uint64_t v143 = (char *)v288;
        if (!v289) {
          goto LABEL_277;
        }
        unint64_t v148 = (unint64_t)v289 << 6;
        do
        {
          unsigned int v149 = (void **)&v143[v148];
          if (v143[v148 - 17] < 0) {
            operator delete(*(v149 - 5));
          }
          if (*((char *)v149 - 41) < 0) {
            operator delete(*(v149 - 8));
          }
          v148 -= 64;
        }
        while (v148);
      }
      else
      {
        int CallsiteCost = llvm::getCallsiteCost((llvm *)v87, (llvm::CallBase *)(*(void *)(v94 + 40) + 272), v99);
        unint64_t v107 = CallsiteCost;
        uint64_t v108 = ***(void ***)v232[0];
        if (!*(void *)(v108 + 128))
        {
          int v109 = (*(uint64_t (**)(void))(**(void **)(v108 + 72) + 48))(*(void *)(v108 + 72));
          if (v221 <= v107)
          {
            if (v109)
            {
LABEL_324:
              llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v257, (uint64_t)"partial-inlining", (uint64_t)"CanBePartiallyInlined", 21, v87);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v272, "Callee", 6uLL, *(unsigned __int8 **)v23);
              sub_1CD3D6290((uint64_t)&v257, &v272);
              *(void *)&long long __p = " can be partially inlined into ";
              *((void *)&__p + 1) = 31;
              sub_1CC59ADEC((uint64_t *)&v262, (uint64_t)&__p);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "Caller", 6uLL, (unsigned __int8 *)v94);
              uint64_t v165 = sub_1CD3D6290((uint64_t)&v257, &__p);
              v248.__r_.__value_.__r.__words[0] = (std::string::size_type)" with cost=";
              v248.__r_.__value_.__l.__size_ = 11;
              sub_1CC59ADEC((uint64_t *)(v165 + 80), (uint64_t)&v248);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v248, "Cost", 4uLL, v243);
              uint64_t v166 = sub_1CD3D6290(v165, (long long *)&v248);
              v245.__r_.__value_.__r.__words[0] = (std::string::size_type)" (threshold=";
              v245.__r_.__value_.__l.__size_ = 12;
              sub_1CC59ADEC((uint64_t *)(v166 + 80), (uint64_t)&v245);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v245, "Threshold", 9uLL, SDWORD1(v243));
              uint64_t v167 = sub_1CD3D6290(v166, (long long *)&v245);
              unsigned int v255 = ")";
              uint64_t v256 = 1;
              sub_1CC59ADEC((uint64_t *)(v167 + 80), (uint64_t)&v255);
              int v168 = *(_DWORD *)(v167 + 8);
              BYTE4(v283) = *(unsigned char *)(v167 + 12);
              LODWORD(v283) = v168;
              long long v169 = *(_OWORD *)(v167 + 16);
              *(void *)&v284[16] = *(void *)(v167 + 32);
              *(_OWORD *)uint64_t v284 = v169;
              uint64_t v170 = *(void *)(v167 + 72);
              long long v171 = *(_OWORD *)(v167 + 56);
              long long v285 = *(_OWORD *)(v167 + 40);
              long long v286 = v171;
              uint64_t v287 = v170;
              unint64_t v282 = (unint64_t)&unk_1F2616800;
              int v288 = v290;
              uint64_t v289 = v86;
              if (*(_DWORD *)(v167 + 88)) {
                sub_1CD494D68((uint64_t)&v288, v167 + 80);
              }
              uint64_t v172 = *(void *)(v167 + 360);
              uint64_t v292 = *(void *)(v167 + 352);
              uint64_t v293 = v172;
              unint64_t v282 = (unint64_t)&unk_1F26165E0;
              if (v247 < 0) {
                operator delete(v246);
              }
              if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v245.__r_.__value_.__l.__data_);
              }
              if (v250 < 0) {
                operator delete(v249);
              }
              if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v248.__r_.__value_.__l.__data_);
              }
              if (v254 < 0) {
                operator delete(v253);
              }
              if (SHIBYTE(v252) < 0) {
                operator delete((void *)__p);
              }
              if (v277 < 0) {
                operator delete(v274);
              }
              if (SHIBYTE(v273) < 0) {
                operator delete((void *)v272);
              }
              unint64_t v257 = (unint64_t)&unk_1F2616800;
              uint64_t v173 = (char **)v262;
              if (v263)
              {
                unint64_t v174 = (unint64_t)v263 << 6;
                do
                {
                  uint64_t v175 = (void **)((char *)v173 + v174);
                  if (*((char *)v173 + v174 - 17) < 0) {
                    operator delete(*(v175 - 5));
                  }
                  if (*((char *)v175 - 41) < 0) {
                    operator delete(*(v175 - 8));
                  }
                  v174 -= 64;
                }
                while (v174);
                uint64_t v173 = (char **)v262;
              }
              if (v173 != v264) {
                free(v173);
              }
              llvm::OptimizationRemarkEmitter::emit(v232, (llvm::DiagnosticInfoOptimizationBase *)&v282);
              unint64_t v282 = (unint64_t)&unk_1F2616800;
              int v176 = (char *)v288;
              if (v289)
              {
                unint64_t v177 = (unint64_t)v289 << 6;
                do
                {
                  unsigned int v178 = (void **)&v176[v177];
                  if (v176[v177 - 17] < 0) {
                    operator delete(*(v178 - 5));
                  }
                  if (*((char *)v178 - 41) < 0) {
                    operator delete(*(v178 - 8));
                  }
                  v177 -= 64;
                }
                while (v177);
                int v176 = (char *)v288;
              }
              if (v176 != (char *)v290) {
                free(v176);
              }
            }
            int v105 = 1;
            goto LABEL_280;
          }
          if (v109) {
            goto LABEL_163;
          }
          goto LABEL_279;
        }
        if (v221 <= CallsiteCost) {
          goto LABEL_324;
        }
LABEL_163:
        llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v257, (uint64_t)"partial-inlining", (uint64_t)"OutliningCallcostTooHigh", 24, v87);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v272, "Callee", 6uLL, *(unsigned __int8 **)v23);
        sub_1CD3D6290((uint64_t)&v257, &v272);
        *(void *)&long long __p = " not partially inlined into ";
        *((void *)&__p + 1) = 28;
        sub_1CC59ADEC((uint64_t *)&v262, (uint64_t)&__p);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "Caller", 6uLL, (unsigned __int8 *)v94);
        uint64_t v110 = sub_1CD3D6290((uint64_t)&v257, &__p);
        v248.__r_.__value_.__r.__words[0] = (std::string::size_type)" runtime overhead (overhead=";
        v248.__r_.__value_.__l.__size_ = 28;
        sub_1CC59ADEC((uint64_t *)(v110 + 80), (uint64_t)&v248);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v248, "Overhead", 8uLL, v221);
        uint64_t v111 = sub_1CD3D6290(v110, (long long *)&v248);
        v245.__r_.__value_.__r.__words[0] = (std::string::size_type)", savings=";
        v245.__r_.__value_.__l.__size_ = 10;
        sub_1CC59ADEC((uint64_t *)(v111 + 80), (uint64_t)&v245);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v245, "Savings", 7uLL, v107);
        uint64_t v112 = sub_1CD3D6290(v111, (long long *)&v245);
        unsigned int v255 = ")";
        uint64_t v256 = 1;
        sub_1CC59ADEC((uint64_t *)(v112 + 80), (uint64_t)&v255);
        unsigned int v255 = " of making the outlined call is too high";
        uint64_t v256 = 40;
        sub_1CC59ADEC((uint64_t *)(v112 + 80), (uint64_t)&v255);
        int v113 = *(_DWORD *)(v112 + 8);
        BYTE4(v283) = *(unsigned char *)(v112 + 12);
        LODWORD(v283) = v113;
        long long v114 = *(_OWORD *)(v112 + 16);
        *(void *)&v284[16] = *(void *)(v112 + 32);
        *(_OWORD *)uint64_t v284 = v114;
        uint64_t v115 = *(void *)(v112 + 72);
        long long v116 = *(_OWORD *)(v112 + 56);
        long long v285 = *(_OWORD *)(v112 + 40);
        long long v286 = v116;
        uint64_t v287 = v115;
        unint64_t v282 = (unint64_t)&unk_1F2616800;
        int v288 = v290;
        uint64_t v289 = v86;
        if (*(_DWORD *)(v112 + 88)) {
          sub_1CD494D68((uint64_t)&v288, v112 + 80);
        }
        uint64_t v117 = *(void *)(v112 + 360);
        uint64_t v292 = *(void *)(v112 + 352);
        uint64_t v293 = v117;
        unint64_t v282 = (unint64_t)&unk_1F26165E0;
        if (v247 < 0) {
          operator delete(v246);
        }
        if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v245.__r_.__value_.__l.__data_);
        }
        if (v250 < 0) {
          operator delete(v249);
        }
        if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v248.__r_.__value_.__l.__data_);
        }
        if (v254 < 0) {
          operator delete(v253);
        }
        if (SHIBYTE(v252) < 0) {
          operator delete((void *)__p);
        }
        if (v277 < 0) {
          operator delete(v274);
        }
        if (SHIBYTE(v273) < 0) {
          operator delete((void *)v272);
        }
        unint64_t v257 = (unint64_t)&unk_1F2616800;
        uint64_t v118 = (char **)v262;
        if (v263)
        {
          unint64_t v119 = (unint64_t)v263 << 6;
          do
          {
            int v120 = (void **)((char *)v118 + v119);
            if (*((char *)v118 + v119 - 17) < 0) {
              operator delete(*(v120 - 5));
            }
            if (*((char *)v120 - 41) < 0) {
              operator delete(*(v120 - 8));
            }
            v119 -= 64;
          }
          while (v119);
          uint64_t v118 = (char **)v262;
        }
        if (v118 != v264) {
          free(v118);
        }
        llvm::OptimizationRemarkEmitter::emit(v232, (llvm::DiagnosticInfoOptimizationBase *)&v282);
        unint64_t v282 = (unint64_t)&unk_1F2616800;
        uint64_t v143 = (char *)v288;
        if (!v289)
        {
LABEL_277:
          if (v143 != (char *)v290) {
            free(v143);
          }
          goto LABEL_279;
        }
        unint64_t v150 = (unint64_t)v289 << 6;
        do
        {
          int v151 = (void **)&v143[v150];
          if (v143[v150 - 17] < 0) {
            operator delete(*(v151 - 5));
          }
          if (*((char *)v151 - 41) < 0) {
            operator delete(*(v151 - 8));
          }
          v150 -= 64;
        }
        while (v150);
      }
LABEL_276:
      uint64_t v143 = (char *)v288;
      goto LABEL_277;
    }
    uint64_t v100 = ***(void ***)v232[0];
    long long v56 = v93;
    if (*(void *)(v100 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v100 + 72) + 48))(*(void *)(v100 + 72)))
    {
      llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v257, (uint64_t)"partial-inlining", (uint64_t)"AlwaysInline", 12, v87);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v272, "Callee", 6uLL, *(unsigned __int8 **)v23);
      sub_1CD3D6290((uint64_t)&v257, &v272);
      *(void *)&long long __p = " should always be fully inlined, not partially";
      *((void *)&__p + 1) = 46;
      sub_1CC59ADEC((uint64_t *)&v262, (uint64_t)&__p);
      LODWORD(v283) = *(_DWORD *)v258;
      BYTE4(v283) = v258[4];
      *(_OWORD *)uint64_t v284 = *(_OWORD *)&v258[8];
      *(void *)&v284[16] = *(void *)&v258[24];
      long long v285 = v259;
      long long v286 = v260;
      uint64_t v287 = v261;
      unint64_t v282 = (unint64_t)&unk_1F2616800;
      int v288 = v290;
      uint64_t v289 = v86;
      if (v263) {
        sub_1CD494D68((uint64_t)&v288, (uint64_t)&v262);
      }
      uint64_t v292 = v269;
      uint64_t v293 = v270;
      unint64_t v282 = (unint64_t)&unk_1F26165E0;
      if (v277 < 0) {
        operator delete(v274);
      }
      if (SHIBYTE(v273) < 0) {
        operator delete((void *)v272);
      }
      unint64_t v257 = (unint64_t)&unk_1F2616800;
      uint64_t v101 = (char **)v262;
      if (v263)
      {
        unint64_t v102 = (unint64_t)v263 << 6;
        do
        {
          int v103 = (void **)((char *)v101 + v102);
          if (*((char *)v101 + v102 - 17) < 0) {
            operator delete(*(v103 - 5));
          }
          if (*((char *)v103 - 41) < 0) {
            operator delete(*(v103 - 8));
          }
          v102 -= 64;
        }
        while (v102);
        uint64_t v101 = (char **)v262;
        long long v56 = v93;
      }
      if (v101 != v264) {
        free(v101);
      }
      llvm::OptimizationRemarkEmitter::emit(v232, (llvm::DiagnosticInfoOptimizationBase *)&v282);
      unint64_t v282 = (unint64_t)&unk_1F2616800;
      uint64_t v143 = (char *)v288;
      if (!v289) {
        goto LABEL_277;
      }
      unint64_t v144 = (unint64_t)v289 << 6;
      do
      {
        uint64_t v145 = (void **)&v143[v144];
        if (v143[v144 - 17] < 0) {
          operator delete(*(v145 - 5));
        }
        if (*((char *)v145 - 41) < 0) {
          operator delete(*(v145 - 8));
        }
        v144 -= 64;
      }
      while (v144);
      goto LABEL_276;
    }
LABEL_279:
    int v105 = 0;
LABEL_280:
    if (v244[32])
    {
      sub_1CD494A40((uint64_t)v244);
      if (v105)
      {
LABEL_282:
        llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v282, (uint64_t)"partial-inlining", (uint64_t)"PartiallyInlined", 16, v87);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v228, "Callee", 6uLL, *(unsigned __int8 **)v23);
        uint64_t v152 = sub_1CD3D6290((uint64_t)&v282, (long long *)v228);
        unint64_t v257 = (unint64_t)" partially inlined into ";
        *(void *)uint64_t v258 = 24;
        sub_1CC59ADEC((uint64_t *)(v152 + 80), (uint64_t)&v257);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v224, "Caller", 6uLL, *(unsigned __int8 **)(*(void *)(v87 + 40) + 56));
        sub_1CD3D6290(v152, (long long *)v224);
        if (v227 < 0) {
          operator delete(v226);
        }
        if (v225 < 0) {
          operator delete(v224[0]);
        }
        if (v231 < 0) {
          operator delete(v230);
        }
        if (v229 < 0) {
          operator delete(v228[0]);
        }
        uint64_t v153 = *(void *)(a1 + 88);
        *(_OWORD *)uint64_t v258 = *(_OWORD *)(a1 + 8);
        unint64_t v257 = 0;
        *(void *)&v258[16] = v153;
        *(void *)&v258[24] = 0;
        *(void *)&long long v259 = 0;
        *((void *)&v259 + 1) = (char *)&v260 + 8;
        *(void *)&long long v260 = v86;
        v264[0] = (char *)&v265;
        v264[1] = (char *)0x800000000;
        BOOL v266 = v268;
        uint64_t v267 = 0x800000000;
        char v271 = 1;
        if (*(void *)(v23 + 120)) {
          uint64_t v154 = *(void *)(*(void *)(v23 + 16) + 16 * *(unsigned int *)(v23 + 24) - 16);
        }
        else {
          uint64_t v154 = 0;
        }
        if (!llvm::InlineFunction((void **)v87, (uint64_t *)&v257, 0, 1, v154))
        {
          llvm::OptimizationRemarkEmitter::emit(v232, (llvm::DiagnosticInfoOptimizationBase *)&v282);
          if (v220)
          {
            if (v239)
            {
              int v158 = v239 - 1;
              unsigned int v159 = ((v234 >> 4) ^ (v234 >> 9)) & (v239 - 1);
              uint64_t v160 = *(void *)(v238[0] + 16 * v159);
              if (v234 == v160)
              {
LABEL_313:
                unint64_t v161 = sub_1CD45F378((uint64_t)v238, &v234)[1];
                BOOL v53 = v220 >= v161;
                unint64_t v162 = v220 - v161;
                if (!v53) {
                  unint64_t v162 = 0;
                }
                unint64_t v220 = v162;
              }
              else
              {
                int v163 = 1;
                while (v160 != -4096)
                {
                  unsigned int v164 = v159 + v163++;
                  unsigned int v159 = v164 & v158;
                  uint64_t v160 = *(void *)(v238[0] + 16 * (v164 & v158));
                  uint64_t v23 = a2;
                  if (v234 == v160) {
                    goto LABEL_313;
                  }
                }
                uint64_t v23 = a2;
              }
            }
          }
          else
          {
            unint64_t v220 = 0;
          }
          ++*(_DWORD *)a1;
          char v222 = 1;
        }
        if (v266 != v268) {
          free(v266);
        }
        sub_1CC45E8E8(v264);
        if (*((long long **)&v259 + 1) != (long long *)((char *)&v260 + 8)) {
          free(*((void **)&v259 + 1));
        }
        unint64_t v282 = (unint64_t)&unk_1F2616800;
        uint64_t v155 = (char *)v288;
        if (v289)
        {
          unint64_t v156 = (unint64_t)v289 << 6;
          do
          {
            uint64_t v157 = (void **)&v155[v156];
            if (v155[v156 - 17] < 0) {
              operator delete(*(v157 - 5));
            }
            if (*((char *)v157 - 41) < 0) {
              operator delete(*(v157 - 8));
            }
            v156 -= 64;
          }
          while (v156);
          uint64_t v155 = (char *)v288;
        }
        if (v155 != (char *)v290) {
          free(v155);
        }
      }
    }
    else if (v105)
    {
      goto LABEL_282;
    }
LABEL_130:
    long long v91 = v233;
    unint64_t v233 = 0;
    if (v91)
    {
      uint64_t v92 = *v91;
      *long long v91 = 0;
      if (v92) {
        (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
      }
      MEMORY[0x1D25D9CE0](v91, 0x20C4093837F09);
    }
LABEL_134:
    ++v85;
  }
  while (v85 != v84);
  if ((v222 & 1) == 0) {
    goto LABEL_372;
  }
  *(unsigned char *)(v23 + 96) = 1;
  if (v237) {
    llvm::Function::setEntryCount(*(llvm::Function **)v23, v220, v236, 0);
  }
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(&v272, *(const llvm::Function **)v23);
  uint64_t v179 = ***(void ***)v272;
  if (*(void *)(v179 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v179 + 72) + 48))(*(void *)(v179 + 72)))
  {
    llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v257, (uint64_t)"partial-inlining", (uint64_t)"PartiallyInlined", 16, *(llvm::Function **)v23);
    unint64_t v282 = (unint64_t)"Partially inlined into at least one caller";
    uint64_t v283 = 42;
    sub_1CC59ADEC((uint64_t *)&v262, (uint64_t)&v282);
    LODWORD(v283) = *(_DWORD *)v258;
    BYTE4(v283) = v258[4];
    *(_OWORD *)uint64_t v284 = *(_OWORD *)&v258[8];
    *(void *)&v284[16] = *(void *)&v258[24];
    long long v285 = v259;
    long long v286 = v260;
    unint64_t v282 = (unint64_t)&unk_1F2616800;
    uint64_t v287 = v261;
    int v288 = v290;
    uint64_t v289 = v86;
    unsigned int v191 = v263;
    if (v263)
    {
      sub_1CD494D68((uint64_t)&v288, (uint64_t)&v262);
      unsigned int v191 = v263;
    }
    uint64_t v292 = v269;
    uint64_t v293 = v270;
    unint64_t v282 = (unint64_t)&unk_1F2616570;
    unint64_t v257 = (unint64_t)&unk_1F2616800;
    uint64_t v192 = (char **)v262;
    if (v191)
    {
      unint64_t v193 = (unint64_t)v191 << 6;
      do
      {
        BOOL v194 = (void **)((char *)v192 + v193);
        if (*((char *)v192 + v193 - 17) < 0) {
          operator delete(*(v194 - 5));
        }
        if (*((char *)v194 - 41) < 0) {
          operator delete(*(v194 - 8));
        }
        v193 -= 64;
      }
      while (v193);
      uint64_t v192 = (char **)v262;
    }
    if (v192 != v264) {
      free(v192);
    }
    llvm::OptimizationRemarkEmitter::emit((uint64_t ***)&v272, (llvm::DiagnosticInfoOptimizationBase *)&v282);
    unint64_t v282 = (unint64_t)&unk_1F2616800;
    uint64_t v210 = (char *)v288;
    if (v289)
    {
      unint64_t v211 = (unint64_t)v289 << 6;
      do
      {
        uint64_t v212 = (void **)&v210[v211];
        if (v210[v211 - 17] < 0) {
          operator delete(*(v212 - 5));
        }
        if (*((char *)v212 - 41) < 0) {
          operator delete(*(v212 - 8));
        }
        v211 -= 64;
      }
      while (v211);
      uint64_t v210 = (char *)v288;
    }
    if (v210 != (char *)v290) {
      free(v210);
    }
  }
  BOOL v180 = v273;
  uint64_t v273 = 0;
  if (v180)
  {
    uint64_t v181 = *v180;
    uint64_t *v180 = 0;
    if (v181) {
      (*(void (**)(uint64_t))(*(void *)v181 + 8))(v181);
    }
    MEMORY[0x1D25D9CE0](v180, 0x20C4093837F09);
  }
  uint64_t v182 = 1;
LABEL_373:
  MEMORY[0x1D25D9CD0](v238[0], 8);
  if (v240)
  {
    BOOL v241 = (uint64_t *)v240;
    operator delete(v240);
  }
  return v182;
}

uint64_t sub_1CC9A22A8(uint64_t a1)
{
  llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(a1 + 8), *(llvm::Value **)a1, (llvm::Value *)1);
  llvm::Function::eraseFromParent(*(llvm::Function **)(a1 + 8));
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2)
    {
      uint64_t v3 = *(llvm::Function ***)(a1 + 16);
      uint64_t v4 = 16 * v2;
      do
      {
        unint64_t v5 = *v3;
        v3 += 2;
        llvm::Function::eraseFromParent(v5);
        v4 -= 16;
      }
      while (v4);
    }
  }
  int v6 = *(uint64_t **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v6)
  {
    uint64_t v7 = *v6;
    *int v6 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    MEMORY[0x1D25D9CE0](v6, 0x20C4093837F09);
  }
  sub_1CC9A2F6C((char ***)(a1 + 128), 0);
  sub_1CC9A3090((uint64_t *)(a1 + 120), 0);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8 != (void *)(a1 + 32)) {
    free(v8);
  }
  return a1;
}

unint64_t sub_1CC9A2394(llvm::BasicBlock *a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*((void *)a1 + 7) + 40);
  llvm::BasicBlock::instructionsWithoutDebug(a1, 1, (uint64_t)&v47);
  long long v44 = v47;
  if (v49)
  {
    if (v49 == v48)
    {
      uint64_t v46 = v45;
      (*(void (**)(void *, void *))(*v49 + 24))(v49, v45);
    }
    else
    {
      uint64_t v46 = (void *)(*(uint64_t (**)(void *))(*v49 + 16))(v49);
    }
  }
  else
  {
    uint64_t v46 = 0;
  }
  long long v41 = v50;
  if (v52)
  {
    if (v52 == v51)
    {
      unint64_t v43 = v42;
      (*(void (**)(void *, void *))(*v52 + 24))(v52, v42);
    }
    else
    {
      unint64_t v43 = (void *)(*(uint64_t (**)(void *))(*v52 + 16))(v52);
    }
  }
  else
  {
    unint64_t v43 = 0;
  }
  uint64_t v4 = v44;
  if ((void)v44 != (void)v41)
  {
    unint64_t v5 = 0;
    uint64_t v31 = a2;
    while (1)
    {
      uint64_t v6 = v4 - 24;
      if (v4) {
        uint64_t v7 = v4 - 24;
      }
      else {
        uint64_t v7 = 0;
      }
      int v8 = *(unsigned __int8 *)(v7 + 16);
      if ((v8 - 59) > 0x18) {
        goto LABEL_28;
      }
      if (((1 << (v8 - 59)) & 0x1070001) != 0) {
        goto LABEL_18;
      }
      if (v8 == 62)
      {
        if ((llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v7) & 1) == 0
          && !llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v7))
        {
          goto LABEL_43;
        }
      }
      else
      {
LABEL_28:
        if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v7)) {
          goto LABEL_18;
        }
        if (v8 != 84)
        {
          if (v4 && v8 == 33)
          {
            uint64_t v12 = (llvm *)v7;
LABEL_39:
            int CallsiteCost = llvm::getCallsiteCost(v12, (llvm::CallBase *)(v3 + 272), v10);
            BOOL v14 = __OFADD__(v5, CallsiteCost);
            uint64_t v15 = v5 + CallsiteCost;
            unint64_t v16 = (v15 >> 63) ^ 0x8000000000000000;
LABEL_45:
            if (v14) {
              unint64_t v5 = v16;
            }
            else {
              unint64_t v5 = v15;
            }
            goto LABEL_18;
          }
          if (v4 && v8 == 31)
          {
            unint64_t v17 = 5 * (((unint64_t)*(unsigned int *)(v7 + 20) >> 1) & 0x3FFFFFF);
            BOOL v14 = __OFADD__(v5, v17);
            uint64_t v15 = v5 + v17;
LABEL_44:
            unint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_45;
          }
LABEL_43:
          BOOL v14 = __OFADD__(v5, 5);
          uint64_t v15 = v5 + 5;
          goto LABEL_44;
        }
        uint64_t v11 = *(void *)(v7 - 32);
        if (!v11
          || *(unsigned char *)(v11 + 16)
          || *(void *)(v11 + 24) != *(void *)(v7 + 72)
          || (*(unsigned char *)(v11 + 33) & 0x20) == 0)
        {
          if (v4)
          {
            uint64_t v12 = (llvm *)(v4 - 24);
            goto LABEL_39;
          }
          goto LABEL_43;
        }
        __src = v40;
        uint64_t v39 = 0x400000000;
        int v18 = *(unsigned __int8 *)(v4 - 8);
        if (v18 == 84)
        {
          uint64_t v19 = 0;
        }
        else if (v18 == 39)
        {
          uint64_t v19 = (*(_DWORD *)(v4 + 56) + 1);
        }
        else
        {
          uint64_t v19 = 2;
        }
        int v20 = *(_DWORD *)(v4 - 4);
        uint64_t v21 = v20 & 0x7FFFFFF;
        unint64_t v22 = (void **)(v6 - 32 * v21);
        if (v20 < 0 && (uint64_t v28 = (uint64_t)*(v22 - 1), (v28 & 0xFFFFFFFF0) != 0)) {
          uint64_t v23 = (*((_DWORD *)v22 - 3) - *(_DWORD *)((char *)v22 - v28));
        }
        else {
          uint64_t v23 = 0;
        }
        if (v22 != (void **)(v6 - 32 * v19 - 32 * v23 - 32))
        {
          unsigned int v24 = 0;
          uint64_t v25 = 32 * v21 - 32 * v19 - 32 * v23 - 32;
          do
          {
            if (v24 >= HIDWORD(v39)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__src + v24) = **v22;
            unsigned int v24 = v39 + 1;
            LODWORD(v39) = v39 + 1;
            v22 += 4;
            v25 -= 32;
          }
          while (v25);
        }
        if (sub_1CB845E74(v4 - 24))
        {
          int v26 = *(unsigned __int8 *)(v4 - 7) >> 1;
          if (v26 == 127) {
            int v26 = -1;
          }
        }
        else
        {
          int v26 = 0;
        }
        v32[0] = v33;
        v32[1] = (void *)0x400000000;
        uint64_t v34 = v36;
        uint64_t v35 = 0x400000000;
        v36[8] = v26;
        long long v37 = xmmword_1CD96D880;
        sub_1CC1587C8((uint64_t)v32, (uint64_t)v33, (char *)__src, (char *)__src + 8 * v39);
        uint64_t v27 = (*(uint64_t (**)(void))(**(void **)v31 + 952))();
        if (__OFADD__(v5, v27)) {
          unint64_t v5 = ((uint64_t)(v5 + v27) >> 63) ^ 0x8000000000000000;
        }
        else {
          v5 += v27;
        }
        if (v34 != v36) {
          free(v34);
        }
        if (v32[0] != v33) {
          free(v32[0]);
        }
        if (__src != v40) {
          free(__src);
        }
      }
LABEL_18:
      uint64_t v4 = *(void *)(v44 + 8);
      *(void *)&long long v44 = v4;
      if (v4 != *((void *)&v44 + 1))
      {
        while (v46)
        {
          char v9 = (*(uint64_t (**)(void))(*v46 + 48))();
          uint64_t v4 = v44;
          if ((v9 & 1) == 0)
          {
            uint64_t v4 = *(void *)(v44 + 8);
            *(void *)&long long v44 = v4;
            if (v4 != *((void *)&v44 + 1)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        sub_1CB920400();
        goto LABEL_91;
      }
LABEL_22:
      if (v4 == (void)v41) {
        goto LABEL_77;
      }
    }
  }
  unint64_t v5 = 0;
LABEL_77:
  if (v43 == v42)
  {
    (*(void (**)(void *))(v42[0] + 32))(v42);
  }
  else if (v43)
  {
    (*(void (**)(void))(*v43 + 40))();
  }
  if (v46 == v45)
  {
    (*(void (**)(void *))(v45[0] + 32))(v45);
  }
  else if (v46)
  {
    (*(void (**)(void))(*v46 + 40))();
  }
  uint64_t v29 = v52;
  if (v52 == v51)
  {
    (*(void (**)(void *))(v51[0] + 32))(v51);
  }
  else
  {
LABEL_91:
    if (v29) {
      (*(void (**)(void *))(*v29 + 40))(v29);
    }
  }
  if (v49 == v48)
  {
    (*(void (**)(void *))(v48[0] + 32))(v48);
  }
  else if (v49)
  {
    (*(void (**)(void))(*v49 + 40))();
  }
  return v5;
}

__n128 sub_1CC9A2A9C(__n128 **a1, __n128 *a2)
{
  uint64_t v2 = a2;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  uint64_t v4 = *((unsigned int *)a1 + 3);
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    unint64_t v10 = v5 + 1;
    BOOL v12 = v6 <= a2 && (__n128 *)((char *)v6 + 104 * v5) > a2;
    if (v12) {
      uint64_t v13 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)v6) >> 3);
    }
    else {
      uint64_t v13 = -1;
    }
    if (v5 == -1) {
      sub_1CD0A88F0(v10);
    }
    if (v4 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v14 = (2 * v4) | 1;
    if (v14 <= v10) {
      unint64_t v14 = v5 + 1;
    }
    if (v14 >= 0xFFFFFFFF) {
      uint64_t v15 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v15 = v14;
    }
    unint64_t v16 = (__n128 *)malloc_type_malloc(104 * v15, 0x4065EBACuLL);
    if (!v16) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v6 = v16;
    unint64_t v17 = (char *)*a1;
    unsigned int v18 = *((_DWORD *)a1 + 2);
    if (v18)
    {
      int v33 = v15;
      uint64_t v34 = v13;
      BOOL v35 = v12;
      uint64_t v19 = 0;
      uint64_t v20 = 104 * v18;
      do
      {
        uint64_t v21 = (char *)v6 + v19;
        unint64_t v22 = &v17[v19];
        uint64_t v23 = (char *)&v6[1] + v19;
        *(void *)uint64_t v21 = v23;
        *((void *)v21 + 1) = 0x800000000;
        if (v17 != (char *)v6)
        {
          unint64_t v24 = *((unsigned int *)v22 + 2);
          if (*((_DWORD *)v22 + 2))
          {
            uint64_t v25 = &v17[v19];
            uint64_t v27 = (uint64_t)&v17[v19 + 16];
            int v26 = *(const void **)&v17[v19];
            if ((const void *)v27 == v26)
            {
              if (v24 >= 9) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v23, v26, 8 * *((unsigned int *)v22 + 2));
              *((_DWORD *)v21 + 2) = v24;
            }
            else
            {
              *(void *)uint64_t v21 = v26;
              int v29 = *((_DWORD *)v25 + 3);
              *((_DWORD *)v21 + 2) = v24;
              *((_DWORD *)v21 + 3) = v29;
              *(void *)uint64_t v25 = v27;
              *((_DWORD *)v25 + 3) = 0;
            }
            *((_DWORD *)v22 + 2) = 0;
          }
        }
        long long v28 = *((_OWORD *)v22 + 5);
        *((void *)v21 + 12) = *((void *)v22 + 12);
        *((_OWORD *)v21 + 5) = v28;
        v19 += 104;
      }
      while (v20 != v19);
      unint64_t v17 = (char *)*a1;
      unsigned int v30 = *((_DWORD *)a1 + 2);
      if (v30)
      {
        uint64_t v31 = 104 * v30;
        LODWORD(v15) = v33;
        uint64_t v13 = v34;
        do
        {
          uint64_t v32 = *(char **)&v17[v31 - 104];
          if (&v17[v31 - 88] != v32) {
            free(v32);
          }
          v31 -= 104;
        }
        while (v31);
        unint64_t v17 = (char *)*a1;
        BOOL v12 = v35;
      }
      else
      {
        BOOL v12 = v35;
        LODWORD(v15) = v33;
        uint64_t v13 = v34;
      }
    }
    if (v17 != (char *)(a1 + 2)) {
      free(v17);
    }
    *a1 = v6;
    *((_DWORD *)a1 + 3) = v15;
    if (v12) {
      uint64_t v2 = (__n128 *)((char *)v6 + 104 * v13);
    }
    LODWORD(v5) = *((_DWORD *)a1 + 2);
  }
  uint64_t v7 = &v6->n128_u64[13 * v5];
  *uint64_t v7 = (unint64_t)(v7 + 2);
  v7[1] = 0x800000000;
  if (v2->n128_u32[2]) {
    sub_1CBB08064((uint64_t)v7, (uint64_t)v2);
  }
  int v8 = (__n128 *)((char *)v6 + 104 * v5);
  __n128 result = v2[5];
  v8[6].n128_u64[0] = v2[6].n128_u64[0];
  v8[5] = result;
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1CC9A2D50(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      char v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          char v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_15;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

void *sub_1CC9A2DEC(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 2);
  unsigned int v4 = *((_DWORD *)a1 + 4);
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - *((_DWORD *)a1 + 3) > v4 >> 3)
  {
    goto LABEL_3;
  }
  uint64_t v7 = a1;
  sub_1CC9A2EA0((uint64_t)a1, v4);
  uint64_t v8 = 0;
  sub_1CC9A2D50(v7, a2, &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++*((_DWORD *)a1 + 2);
  if (*a3 != -4096) {
    --*((_DWORD *)a1 + 3);
  }
  return a3;
}

void *sub_1CC9A2EA0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD6785D0(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

char ***sub_1CC9A2F6C(char ***result, char **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *v2;
    unsigned int v4 = *((_DWORD *)v2 + 2);
    if (v4)
    {
      uint64_t v5 = 104 * v4;
      do
      {
        unint64_t v6 = *(char **)&v3[v5 - 104];
        if (&v3[v5 - 88] != v6) {
          free(v6);
        }
        v5 -= 104;
      }
      while (v5);
      uint64_t v3 = *v2;
    }
    if (v3 != (char *)(v2 + 2)) {
      free(v3);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void *sub_1CC9A301C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 61) {
      abort();
    }
    int v7 = result;
    uint64_t result = operator new(8 * a4);
    *int v7 = result;
    v7[2] = &result[a4];
    while (a2 != a3)
    {
      *result++ = *(void *)(a2 + 24);
      a2 = *(void *)(a2 + 8);
    }
    v7[1] = result;
  }
  return result;
}

uint64_t *sub_1CC9A3090(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 64);
    if (v3 != (void *)(v2 + 80)) {
      free(v3);
    }
    if (*(void *)v2 != v2 + 16) {
      free(*(void **)v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void sub_1CC9A3110()
{
}

void sub_1CC9A313C()
{
}

void sub_1CC9A3170()
{
}

void sub_1CC9A319C()
{
}

void sub_1CC9A31C8()
{
}

uint64_t sub_1CC9A31F4()
{
  LOBYTE(v4) = 0;
  uint64_t v5 = &v4;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Disable partial inlining";
  v3.n128_u64[1] = 24;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE2468, "disable-partial-inlining", (unsigned char **)&v5, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE2468, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  uint64_t v5 = &v4;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Disable multi-region partial inlining";
  v3.n128_u64[1] = 37;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE2528, "disable-mr-partial-inlining", (unsigned char **)&v5, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE2528, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  uint64_t v5 = &v4;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Force outline regions with live exits";
  v3.n128_u64[1] = 37;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE25E8, "pi-force-live-exit-outline", (unsigned char **)&v5, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE25E8, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  uint64_t v5 = &v4;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Mark outline function calls with ColdCC";
  v3.n128_u64[1] = 39;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE26A8, "pi-mark-coldcc", (unsigned char **)&v5, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE26A8, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  LODWORD(v1) = 1;
  int v4 = 2;
  v3.n128_u64[0] = (unint64_t)"Skip Cost Analysis";
  v3.n128_u64[1] = 18;
  sub_1CD6786E0((char **)&v5, &v1, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE2768, &dword_1CB82C000);
  uint64_t v1 = 0x3FB999999999999ALL;
  uint64_t v5 = (int *)&v1;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Minimum ratio comparing relative sizes of each outline candidate and original function";
  v3.n128_u64[1] = 86;
  sub_1CD678880((double **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CC08F43C, &qword_1EBCE2828, &dword_1CB82C000);
  LODWORD(v1) = 100;
  uint64_t v5 = (int *)&v1;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Minimum block executions to consider its BranchProbabilityInfo valid";
  v3.n128_u64[1] = 68;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCE28E8, "min-block-execution", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCE28E8, &dword_1CB82C000);
  uint64_t v1 = 0x3FB999999999999ALL;
  uint64_t v5 = (int *)&v1;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Minimum BranchProbability to consider a region cold.";
  v3.n128_u64[1] = 52;
  sub_1CD6789F8((double **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CC08F43C, &qword_1EBCE29A8, &dword_1CB82C000);
  LODWORD(v1) = 5;
  uint64_t v5 = (int *)&v1;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Max number of blocks to be partially inlined";
  v3.n128_u64[1] = 44;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCE2A68, "max-num-inline-blocks", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCE2A68, &dword_1CB82C000);
  LODWORD(v1) = -1;
  uint64_t v5 = (int *)&v1;
  int v4 = 1;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Max number of partial inlining. The default is unlimited";
  v3.n128_u64[1] = 56;
  sub_1CD678B70(&v5, &v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCE2B28, &dword_1CB82C000);
  LODWORD(v1) = 75;
  uint64_t v5 = (int *)&v1;
  int v4 = 1;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Relative frequency of outline region to the entry block";
  v3.n128_u64[1] = 55;
  sub_1CD678D08(&v5, &v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCE2BE8, &dword_1CB82C000);
  LODWORD(v1) = 0;
  uint64_t v5 = (int *)&v1;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"A debug option to add additional penalty to the computed one.";
  v3.n128_u64[1] = 61;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCE2CA8, "partial-inlining-extra-penalty", &v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCE2CA8, &dword_1CB82C000);
}

void llvm::PassManagerBuilder::~PassManagerBuilder(llvm::PassManagerBuilder *this)
{
  int v2 = (uint64_t *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v11 = sub_1CD4CFA4C(v2);
    MEMORY[0x1D25D9CE0](v11, 0x1020C4008A01BC9);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    uint64_t v5 = (void *)*((void *)this + 19);
    unint64_t v6 = (void *)*((void *)this + 18);
    if (v5 != v4)
    {
      int v7 = v5 - 4;
      unsigned int v8 = v5 - 4;
      do
      {
        char v9 = (void *)v8[3];
        if (v8 == v9)
        {
          (*(void (**)(void *))(*v8 + 32))(v8);
        }
        else if (v9)
        {
          (*(void (**)(void *))(*v9 + 40))(v9);
        }
        uint64_t v10 = v8 - 1;
        v8 -= 5;
        v7 -= 5;
      }
      while (v10 != v4);
      unint64_t v6 = (void *)*((void *)this + 18);
    }
    *((void *)this + 19) = v4;
    operator delete(v6);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
}

uint64_t llvm::PassManagerBuilder::addGlobalExtension(int a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = dword_1EBCE2D68++;
  if (!atomic_load_explicit(qword_1EBCE2D70, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCE2D70, (void *(*)(void))sub_1CD67CFF0, (void (*)(void *))sub_1CD67D030);
  }
  uint64_t v5 = qword_1EBCE2D70[0];
  int v17 = a1;
  unint64_t v6 = (void *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      uint64_t v19 = v18;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v18);
    }
    else
    {
      uint64_t v19 = (void *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  int v20 = v4;
  uint64_t v7 = *(unsigned int *)(v5 + 8);
  unint64_t v8 = *(void *)v5;
  char v9 = (char *)&v17;
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v14 = v7 + 1;
    BOOL v15 = v8 + 48 * v7 > (unint64_t)&v17;
    if (v8 <= (unint64_t)&v17 && v15)
    {
      unint64_t v16 = (char *)v18 - v8;
      sub_1CC9A4CC0(v5, v14);
      unint64_t v8 = *(void *)v5;
      char v9 = &v16[*(void *)v5];
    }
    else
    {
      sub_1CC9A4CC0(v5, v14);
      unint64_t v8 = *(void *)v5;
      char v9 = (char *)&v17;
    }
  }
  uint64_t v10 = v8 + 48 * *(unsigned int *)(v5 + 8);
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v9;
  uint64_t v11 = v10 + 8;
  BOOL v12 = (char *)*((void *)v9 + 4);
  if (v12)
  {
    if (v12 == v9 + 8)
    {
      *(void *)(v10 + 32) = v11;
      (*(void (**)(void))(**((void **)v9 + 4) + 24))(*((void *)v9 + 4));
    }
    else
    {
      *(void *)(v10 + 32) = v12;
      *((void *)v9 + 4) = 0;
    }
  }
  else
  {
    *(void *)(v10 + 32) = 0;
  }
  *(_DWORD *)(v10 + 40) = *((_DWORD *)v9 + 10);
  ++*(_DWORD *)(v5 + 8);
  if (v19 == v18)
  {
    (*(void (**)(void *, uint64_t))(v18[0] + 32))(v18, v11);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  return v4;
}

uint64_t llvm::PassManagerBuilder::removeGlobalExtension(uint64_t this)
{
  if (atomic_load((unint64_t *)qword_1EBCE2D70))
  {
    int v2 = this;
    if (!atomic_load_explicit(qword_1EBCE2D70, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCE2D70, (void *(*)(void))sub_1CD67CFF0, (void (*)(void *))sub_1CD67D030);
    }
    uint64_t v3 = *(void *)qword_1EBCE2D70[0];
    uint64_t v4 = *(unsigned int *)(qword_1EBCE2D70[0] + 8);
    if (v4)
    {
      uint64_t v5 = v3 + 48 * v4;
      uint64_t v6 = 48 * v4;
      while (*(_DWORD *)(v3 + 40) != v2)
      {
        v3 += 48;
        v6 -= 48;
        if (!v6)
        {
          uint64_t v3 = v5;
          break;
        }
      }
    }
    if (!atomic_load_explicit(qword_1EBCE2D70, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCE2D70, (void *(*)(void))sub_1CD67CFF0, (void (*)(void *))sub_1CD67D030);
    }
    atomic_ullong v7 = qword_1EBCE2D70[0];
    uint64_t v8 = *(void *)qword_1EBCE2D70[0];
    unsigned int v9 = *(_DWORD *)(qword_1EBCE2D70[0] + 8);
    uint64_t v10 = *(void *)qword_1EBCE2D70[0] + 48 * v9;
    if (v3 + 48 != v10)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = v3 + v11;
        *(_DWORD *)uint64_t v12 = *(_DWORD *)(v3 + v11 + 48);
        uint64_t v13 = v3 + v11 + 8;
        uint64_t v14 = *(void *)(v3 + v11 + 32);
        *(void *)(v12 + 32) = 0;
        if (v13 == v14)
        {
          (*(void (**)(uint64_t))(*(void *)v13 + 32))(v3 + v11 + 8);
        }
        else if (v14)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
        }
        uint64_t v15 = *(void *)(v3 + v11 + 80);
        if (v15)
        {
          if (v12 + 56 == v15)
          {
            *(void *)(v12 + 32) = v13;
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 + 56) + 24))(v12 + 56, v3 + v11 + 8);
          }
          else
          {
            *(void *)(v12 + 32) = v15;
            *(void *)(v3 + v11 + 80) = 0;
          }
        }
        else
        {
          *(void *)(v12 + 32) = 0;
        }
        *(_DWORD *)(v3 + v11 + 40) = *(_DWORD *)(v3 + v11 + 88);
        v11 += 48;
      }
      while (v3 + v11 + 48 != v10);
      unsigned int v9 = *(_DWORD *)(v7 + 8);
      uint64_t v8 = *(void *)v7;
    }
    unsigned int v16 = v9 - 1;
    *(_DWORD *)(v7 + 8) = v16;
    uint64_t v17 = v8 + 48 * v16;
    this = *(void *)(v17 + 32);
    if (this == v17 + 8)
    {
      uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)(v17 + 8) + 32);
      return v19(v17 + 8);
    }
    else if (this)
    {
      unsigned int v18 = *(uint64_t (**)(void))(*(void *)this + 40);
      return v18();
    }
  }
  return this;
}

void sub_1CC9A3C7C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (v8 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v25 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x666666666666666) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(40 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[40 * v8];
    long long __p = v12;
    unint64_t v22 = v13;
    unint64_t v24 = &v12[40 * v11];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)a2;
    uint64_t v14 = *(void *)(a2 + 32);
    if (v14)
    {
      uint64_t v15 = &v12[40 * v8 + 32];
      if (v14 == a2 + 8)
      {
        *(void *)uint64_t v15 = v13 + 8;
        (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
      }
      else
      {
        *(void *)uint64_t v15 = v14;
        *(void *)(a2 + 32) = 0;
      }
    }
    else
    {
      *(void *)&v12[40 * v8 + 32] = 0;
    }
    uint64_t v23 = v13 + 40;
    sub_1CD67D134(a1, &__p);
    uint64_t v7 = a1[1];
    unsigned int v16 = v22;
    if (v23 != v22)
    {
      uint64_t v17 = v23 - 32;
      unsigned int v18 = v23 - 32;
      do
      {
        uint64_t v19 = (char *)*((void *)v18 + 3);
        if (v18 == v19)
        {
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
        }
        else if (v19)
        {
          (*(void (**)(char *))(*(void *)v19 + 40))(v19);
        }
        int v20 = v18 - 8;
        v18 -= 40;
        v17 -= 40;
      }
      while (v20 != v16);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v5 = *(_DWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 32);
    if (v6)
    {
      if (v6 == a2 + 8)
      {
        *(void *)(v5 + 32) = v5 + 8;
        (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
      }
      else
      {
        *(void *)(v5 + 32) = v6;
        *(void *)(a2 + 32) = 0;
      }
    }
    else
    {
      *(void *)(v5 + 32) = 0;
    }
    uint64_t v7 = v5 + 40;
  }
  a1[1] = v7;
}

void llvm::PassManagerBuilder::addLTOOptimizationPasses(llvm::PassManagerBuilder *this, llvm::legacy::PassManagerBase *a2)
{
  if (*((char *)this + 143) < 0)
  {
    if (!*((void *)this + 16)) {
LABEL_6:
    }
      llvm::createGlobalDCEPass(this);
  }
  else if (!*((unsigned char *)this + 143))
  {
    goto LABEL_6;
  }
  llvm::createPruneEHPass(this);
}

void llvm::PassManagerBuilder::addLateLTOOptimizationPasses(llvm::PassManagerBuilder *this, llvm::legacy::PassManagerBase *a2)
{
  if (!byte_1EBD07F58 && !*((unsigned char *)this + 52)) {
    llvm::createCFGSimplificationPass();
  }
  llvm::createHotColdSplittingPass(this);
}

void LLVMPassManagerBuilderCreate()
{
}

llvm::PassManagerBuilder *LLVMPassManagerBuilderDispose(llvm::PassManagerBuilder *result)
{
  if (result)
  {
    llvm::PassManagerBuilder::~PassManagerBuilder(result);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

_DWORD *LLVMPassManagerBuilderSetOptLevel(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t LLVMPassManagerBuilderSetSizeLevel(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t LLVMPassManagerBuilderSetDisableUnrollLoops(uint64_t result, int a2)
{
  *(unsigned char *)(result + 40) = a2 != 0;
  return result;
}

void LLVMPassManagerBuilderUseInlinerWithThreshold(int a1, llvm *this)
{
}

void sub_1CC9A4C74(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = a1 + 40 * a2;
    do
    {
      sub_1CD67CD88(*(unsigned __int8 **)v2, *(void *)(v2 + 8), *(_DWORD *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

void sub_1CC9A4CC0(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(48 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  unint64_t v8 = *(_DWORD **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = v7 + 32;
    uint64_t v11 = 48 * v9;
    uint64_t v12 = v8 + 8;
    do
    {
      *((_DWORD *)v10 - 8) = *(v12 - 8);
      uint64_t v13 = *(_DWORD **)v12;
      if (*(void *)v12)
      {
        if (v12 - 6 == v13)
        {
          *(void *)uint64_t v10 = v10 - 24;
          (*(void (**)(void))(**(void **)v12 + 24))();
        }
        else
        {
          *(void *)uint64_t v10 = v13;
          *(void *)uint64_t v12 = 0;
        }
      }
      else
      {
        *(void *)uint64_t v10 = 0;
      }
      *((_DWORD *)v10 + 2) = v12[2];
      v10 += 48;
      v12 += 12;
      v11 -= 48;
    }
    while (v11);
    unint64_t v8 = *(_DWORD **)a1;
    uint64_t v14 = *(unsigned int *)(a1 + 8);
    if (v14)
    {
      uint64_t v15 = 48 * v14;
      unsigned int v16 = (char *)(v8 - 10);
      do
      {
        uint64_t v17 = *(char **)&v16[v15 + 24];
        if (&v16[v15] == v17)
        {
          (*(void (**)(char *))(*(void *)&v16[v15] + 32))(&v16[v15]);
        }
        else if (v17)
        {
          (*(void (**)(char *))(*(void *)v17 + 40))(v17);
        }
        v15 -= 48;
      }
      while (v15);
      unint64_t v8 = *(_DWORD **)a1;
    }
  }
  if (v8 != (_DWORD *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t sub_1CC9A4E90()
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  LOBYTE(v2) = 0;
  *(void *)&long long v1 = &v2;
  LODWORD(v3) = 1;
  int v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Run Partial inlinining pass";
  v5.n128_u64[1] = 27;
  sub_1CD67C178((char **)&v1, &v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::RunPartialInlining, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Run GVN instead of Early CSE after vectorization passes";
  v5.n128_u64[1] = 55;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE2D88, "use-gvn-after-vectorization", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE2D88, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Run cleanup optimization passes after vectorization.";
  v5.n128_u64[1] = 52;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::ExtraVectorizerPasses, "extra-vectorizer-passes", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::ExtraVectorizerPasses, &dword_1CB82C000);
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Run the loop rerolling pass";
  v5.n128_u64[1] = 27;
  sub_1CD4C1500((uint64_t)&unk_1EBCE2E48, "reroll-loops", &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE2E48, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Run the NewGVN pass";
  v5.n128_u64[1] = 19;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::RunNewGVN, "enable-newgvn", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::RunNewGVN, &dword_1CB82C000);
  int v4 = 0;
  uint64_t v3 = &v4;
  int v2 = 1;
  *(void *)&long long v1 = "Enable the new, experimental CFL alias analysis";
  *((void *)&v1 + 1) = 47;
  v5.n128_u64[0] = (unint64_t)&v6;
  uint64_t v6 = "none";
  uint64_t v7 = 4;
  int v8 = 0;
  uint64_t v9 = "Disable CFL-AA";
  uint64_t v10 = 14;
  uint64_t v11 = "steens";
  uint64_t v12 = 6;
  int v13 = 1;
  uint64_t v14 = "Enable unification-based CFL-AA";
  uint64_t v15 = 31;
  unsigned int v16 = "anders";
  uint64_t v17 = 6;
  int v18 = 2;
  uint64_t v19 = "Enable inclusion-based CFL-AA";
  uint64_t v20 = 29;
  uint64_t v21 = "both";
  uint64_t v22 = 4;
  int v23 = 3;
  unint64_t v24 = "Enable both variants of CFL-AA";
  uint64_t v25 = 30;
  v5.n128_u64[1] = 0x400000004;
  sub_1CD67C310(&v3, &v2, &v1, (uint64_t *)&v5);
  if ((const char **)v5.n128_u64[0] != &v6) {
    free((void *)v5.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD586F20, &qword_1EBCE32C8, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the experimental LoopInterchange Pass";
  v5.n128_u64[1] = 44;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableLoopInterchange, "enable-loopinterchange", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableLoopInterchange, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable Unroll And Jam Pass";
  v5.n128_u64[1] = 26;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableUnrollAndJam, "enable-unroll-and-jam", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableUnrollAndJam, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the LoopFlatten Pass";
  v5.n128_u64[1] = 27;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableLoopFlatten, "enable-loop-flatten", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableLoopFlatten, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"Enable DFA jump threading.";
  v5.n128_u64[1] = 26;
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  sub_1CD67C4D0(&v5, (char **)&v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableDFAJumpThreading, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable preparation for ThinLTO.";
  v5.n128_u64[1] = 31;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE2F08, "prepare-for-thinlto", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE2F08, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable performing ThinLTO.";
  v5.n128_u64[1] = 26;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE2FC8, "perform-thinlto", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE2FC8, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable hot-cold splitting pass";
  v5.n128_u64[1] = 30;
  sub_1CD67C648((char **)&v1, &v3, (long long *)&v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableHotColdSplit, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable ir outliner pass";
  v5.n128_u64[1] = 23;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableIROutliner, "ir-outliner", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableIROutliner, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the experimental Loop Versioning LICM pass";
  v5.n128_u64[1] = 49;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE3088, "enable-loop-versioning-licm", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE3088, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Disable pre-instrumentation inliner";
  v5.n128_u64[1] = 35;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::DisablePreInliner, "disable-preinline", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::DisablePreInliner, &dword_1CB82C000);
  int v2 = 1;
  LODWORD(v3) = 1;
  int v4 = 75;
  *(void *)&long long v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"Control the amount of inlining in pre-instrumentation inliner (default = 75)";
  v5.n128_u64[1] = 76;
  sub_1CD67C76C(&v3, (int **)&v1, &v2, &v5);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &llvm::PreInlineThreshold, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the GVN hoisting pass (default = off)";
  v5.n128_u64[1] = 44;
  sub_1CD67C904((char **)&v1, &v3, (long long *)&v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableGVNHoist, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Disable shrink-wrap library calls";
  v5.n128_u64[1] = 33;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE3148, "disable-libcalls-shrinkwrap", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE3148, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the simple loop unswitch pass. Also enables independent cleanup passes integ"
                                     "rated into the loop pass manager pipeline.";
  v5.n128_u64[1] = 125;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCE3208, "enable-simple-loop-unswitch", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCE3208, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the GVN sinking pass (default = off)";
  v5.n128_u64[1] = 43;
  sub_1CD67CA28((char **)&v1, &v3, (long long *)&v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableGVNSink, &dword_1CB82C000);
  LOBYTE(v4) = 1;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable control height reduction optimization (CHR)";
  v5.n128_u64[1] = 50;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableCHR, "enable-chr", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableCHR, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Indicate the sample profile being used is flattened, i.e., no inline hierachy exist"
                                     "s in the profile. ";
  v5.n128_u64[1] = 101;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::FlattenedProfileUsed, "flattened-profile-used", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::FlattenedProfileUsed, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable order file instrumentation (default = off)";
  v5.n128_u64[1] = 49;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableOrderFileInstrumentation, "enable-order-file-instrumentation", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableOrderFileInstrumentation, &dword_1CB82C000);
  LOBYTE(v4) = 1;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable lowering of the matrix intrinsics";
  v5.n128_u64[1] = 40;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableMatrix, "enable-matrix", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableMatrix, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable pass to eliminate conditions based on linear constraints.";
  v5.n128_u64[1] = 64;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableConstraintElimination, "enable-constraint-elimination", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableConstraintElimination, &dword_1CB82C000);
  LOBYTE(v4) = 0;
  *(void *)&long long v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable Function Specialization pass";
  v5.n128_u64[1] = 35;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableFunctionSpecialization, "enable-function-specialization", (unsigned char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableFunctionSpecialization, &dword_1CB82C000);
  int v4 = 1;
  int v2 = 0;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Enable the attributor inter-procedural deduction pass.";
  *((void *)&v1 + 1) = 54;
  v5.n128_u64[0] = (unint64_t)&v6;
  uint64_t v6 = "all";
  uint64_t v7 = 3;
  int v8 = 3;
  uint64_t v9 = "enable all attributor runs";
  uint64_t v10 = 26;
  uint64_t v11 = "module";
  uint64_t v12 = 6;
  int v13 = 1;
  uint64_t v14 = "enable module-wide attributor runs";
  uint64_t v15 = 34;
  unsigned int v16 = "cgscc";
  uint64_t v17 = 5;
  int v18 = 2;
  uint64_t v19 = "enable call graph SCC attributor runs";
  uint64_t v20 = 37;
  uint64_t v21 = "none";
  uint64_t v22 = 4;
  int v23 = 0;
  unint64_t v24 = "disable attributor runs";
  uint64_t v25 = 23;
  v5.n128_u64[1] = 0x400000004;
  sub_1CD67CB4C(&v4, &v3, &v1, (uint64_t)&v5);
  if ((const char **)v5.n128_u64[0] != &v6) {
    free((void *)v5.n128_u64[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1CD678EA0, &llvm::AttributorRun, &dword_1CB82C000);
}

void llvm::initializePruneEHPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE3528, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC9A5960;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCE3528, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC9A5960(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CC9A5A00(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE3520;
  *(_DWORD *)(a1 + 24) = 3;
  *(void *)a1 = &unk_1F262A6C8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE3528, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC9A5960;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCE3528, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC9A5AB0()
{
}

void sub_1CC9A5AF0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC9A5B28(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (llvm::CallGraphSCCPass::skipSCC(a1, a2))
  {
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  v73[0] = 0;
  v73[1] = 0;
  unsigned int v74 = 0;
  std::string::size_type v76 = 0;
  uint64_t v77 = 0;
  long long __p = 0;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  while (v6 != v7)
  {
    v78[0] = *(void *)(*(void *)v6 + 8);
    if (v78[0]) {
      sub_1CC8B0F60(v73, v78);
    }
    v6 += 8;
  }
  int v8 = *(uint64_t **)(a1 + 8);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_12:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::CallGraphWrapperPass::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_12;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  LOBYTE(v4) = 0;
  uint64_t v12 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::CallGraphWrapperPass::ID)+ 32);
  v78[0] = v80;
  v78[1] = v80;
  void v78[2] = 16;
  v80[16] = v81;
  int v79 = 0;
  v80[17] = 0x1000000000;
  v81[16] = v82;
  v81[17] = 0x1000000000;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v85 = 0;
  v82[16] = v12;
  v82[17] = a2;
  int v13 = (llvm **)__p;
  uint64_t v14 = v76;
  if (__p == v76) {
    goto LABEL_164;
  }
  int v4 = 0;
  do
  {
    uint64_t v15 = *v13++;
    v4 |= sub_1CC9A625C(v15, (const llvm::Function *)v78);
  }
  while (v13 != v14);
  unsigned int v16 = (llvm::GlobalValue **)__p;
  uint64_t v17 = v76;
  if (__p == v76) {
    goto LABEL_164;
  }
  int v18 = 0;
  int v19 = 0;
  unsigned int v68 = v76;
  while (2)
  {
    uint64_t v20 = *v16;
    if (*v16) {
      BOOL v21 = *((unsigned char *)*v16 + 16) == 3;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21)
    {
      if ((*((_DWORD *)v20 + 5) & 0x7FFFFFF) == 0) {
        goto LABEL_30;
      }
    }
    else if (!*((unsigned char *)*v16 + 16) {
           && *((llvm::GlobalValue **)v20 + 9) == (llvm::GlobalValue *)((char *)v20 + 72)
    }
           && (*((unsigned char *)v20 + 34) & 0x80) == 0)
    {
LABEL_30:
      uint64_t v22 = *((void *)v20 + 14);
      if (v22)
      {
        char v23 = *(unsigned char *)(v22 + 16);
        v18 |= (v23 & 0x20) == 0;
        LODWORD(v22) = v23 & 1;
      }
      else
      {
        int v18 = 1;
      }
      v19 |= v22 ^ 1;
      goto LABEL_34;
    }
    if ((1 << (*((_DWORD *)v20 + 8) & 0xF)) & 0x7D5) == 0 || (llvm::GlobalValue::isInterposable(*v16)) {
      goto LABEL_30;
    }
    if (v18)
    {
      int v24 = 0;
      if (v19) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v25 = *((void *)v20 + 14);
      if (v25) {
        LODWORD(v25) = (*(unsigned __int8 *)(v25 + 16) >> 5) & 1;
      }
      int v24 = v25 ^ 1;
      if (v19) {
        goto LABEL_46;
      }
    }
    uint64_t v26 = (unsigned char *)*((void *)v20 + 14);
    if (v26)
    {
      if (v26[16])
      {
LABEL_46:
        if (!v24) {
          goto LABEL_34;
        }
        uint64_t v69 = v16;
        LOBYTE(v26) = 0;
        int v72 = 0;
        goto LABEL_51;
      }
      uint64_t v69 = v16;
      if ((v26[14] & 2) != 0) {
        LODWORD(v26) = (v26[15] >> 3) & 1;
      }
      else {
        LOBYTE(v26) = 0;
      }
    }
    else
    {
      uint64_t v69 = v16;
    }
    int v72 = 1;
LABEL_51:
    uint64_t v27 = (char *)v20 + 72;
    long long v28 = (char *)*((void *)v20 + 10);
    if (v28 == (char *)v20 + 72) {
      goto LABEL_145;
    }
    int v71 = v24;
    unsigned __int8 v29 = v24 ^ 1;
    unsigned __int8 v30 = v26 ^ 1;
    unint64_t v70 = (char *)v20 + 72;
    do
    {
      if (v28) {
        uint64_t v31 = v28 - 24;
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = (char *)*((void *)v31 + 5);
      if (v32 == v31 + 40)
      {
        uint64_t v34 = 0;
        if (!v24) {
          goto LABEL_77;
        }
      }
      else
      {
        if (v32) {
          uint64_t v33 = (uint64_t)(v32 - 24);
        }
        else {
          uint64_t v33 = 0;
        }
        if (*(unsigned __int8 *)(v33 + 16) - 29 >= 0xB) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = v33;
        }
        if (!v24)
        {
LABEL_77:
          if (v72) {
            goto LABEL_78;
          }
          goto LABEL_79;
        }
      }
      int v35 = *(unsigned __int8 *)(v34 + 16);
      if (v34 && v35 == 84)
      {
        uint64_t v60 = *(void *)(v34 + 64);
        if (v60 && (*(unsigned char *)(v60 + 16) & 0x20) != 0)
        {
          int v37 = 0;
        }
        else
        {
          hasFnAttrOnCalledFunctiouint64_t n = llvm::CallBase::hasFnAttrOnCalledFunction(v34, 37);
          uint64_t v27 = v70;
          int v37 = hasFnAttrOnCalledFunction ^ 1;
          int v24 = v71;
        }
      }
      else
      {
        if (v34 && v35 == 36 || v34 && v35 == 38) {
          BOOL v36 = (*(_WORD *)(v34 + 18) & 1) == 0;
        }
        else {
          BOOL v36 = v35 == 34;
        }
        int v37 = v36;
      }
      if (((v37 | v72 ^ 1) & 1) == 0)
      {
LABEL_78:
        v19 |= *(unsigned char *)(v34 + 16) == 29;
        goto LABEL_79;
      }
      v18 |= v37;
LABEL_79:
      for (uint64_t i = (char *)*((void *)v31 + 6); i != v31 + 40; uint64_t i = (char *)*((void *)i + 1))
      {
        uint64_t v39 = i ? (uint64_t)(i - 24) : 0;
        if ((v29 | v18) & 1) != 0 && ((v30 | v19)) {
          break;
        }
        if (((v29 | v18) & 1) == 0)
        {
          int v40 = *(unsigned __int8 *)(v39 + 16);
          if (i && v40 == 84)
          {
            uint64_t v41 = *(void *)(v39 + 64);
            if (v41 && (*(unsigned char *)(v41 + 16) & 0x20) != 0)
            {
LABEL_128:
              int v18 = 0;
              goto LABEL_129;
            }
            if (llvm::CallBase::hasFnAttrOnCalledFunction(v39, 37))
            {
              int v18 = 0;
              int v24 = v71;
              uint64_t v27 = v70;
            }
            else
            {
              int v42 = *(unsigned __int8 *)(v39 + 16);
              BOOL v43 = v42 == 84;
              if (v42 == 84) {
                uint64_t v44 = v39;
              }
              else {
                uint64_t v44 = 0;
              }
              uint64_t v27 = v70;
              if (v43)
              {
                uint64_t v45 = *(void *)(v44 - 32);
                int v24 = v71;
                if (v45 && !*(unsigned char *)(v45 + 16) && *(void *)(v45 + 24) == *(void *)(v44 + 72))
                {
                  if (v74)
                  {
                    unsigned int v46 = v74 - 1;
                    unsigned int v47 = (v74 - 1) & ((v45 >> 4) ^ (v45 >> 9));
                    uint64_t v48 = (void *)(v73[0] + 8 * v47);
                    uint64_t v49 = *v48;
                    if (v45 == *v48)
                    {
                      int v50 = 0;
                    }
                    else
                    {
                      unsigned int v51 = 0;
                      int v52 = 1;
                      while (v49 != -4096)
                      {
                        int v50 = 0;
                        if (v51) {
                          BOOL v53 = 0;
                        }
                        else {
                          BOOL v53 = v49 == -8192;
                        }
                        if (v53) {
                          unsigned int v51 = v48;
                        }
                        unsigned int v54 = v47 + v52++;
                        unsigned int v47 = v54 & v46;
                        uint64_t v48 = (void *)(v73[0] + 8 * (v54 & v46));
                        uint64_t v49 = *v48;
                        int v24 = v71;
                        uint64_t v27 = v70;
                        if (v45 == *v48) {
                          goto LABEL_112;
                        }
                      }
                      if (v51) {
                        uint64_t v48 = v51;
                      }
                      int v50 = 1;
                      int v24 = v71;
                      uint64_t v27 = v70;
                    }
                  }
                  else
                  {
                    uint64_t v48 = 0;
                    int v50 = 1;
                  }
LABEL_112:
                  if (v48 == (void *)(v73[0] + 8 * v74)) {
                    int v18 = 1;
                  }
                  else {
                    int v18 = v50;
                  }
                }
                else
                {
                  int v18 = 1;
                }
              }
              else
              {
                int v18 = 1;
                int v24 = v71;
              }
            }
          }
          else
          {
            if (i && v40 == 36 || i && v40 == 38)
            {
              if (*(_WORD *)(v39 + 18)) {
                goto LABEL_128;
              }
            }
            else if (v40 != 34)
            {
              goto LABEL_128;
            }
            int v18 = 1;
          }
        }
LABEL_129:
        if (((v30 | v19) & 1) == 0)
        {
          unsigned int v55 = *(unsigned __int8 *)(v39 + 16) - 33;
          BOOL v56 = v55 > 0x33;
          uint64_t v57 = (1 << v55) & 0x8000000000041;
          int v19 = 0;
          if (!v56 && v57 != 0)
          {
            uint64_t v59 = *((void *)i - 7);
            if (v59)
            {
              if (*(unsigned char *)(v59 + 16) == 24) {
                int v19 = *(unsigned __int8 *)(v59 + 80) != 0;
              }
            }
          }
        }
      }
      long long v28 = (char *)*((void *)v28 + 1);
    }
    while (v28 != v27);
LABEL_145:
    if ((v18 & 1) == 0)
    {
      uint64_t v17 = v68;
      unsigned int v16 = v69;
      goto LABEL_34;
    }
    uint64_t v17 = v68;
    unsigned int v16 = v69;
    if ((v19 & 1) == 0)
    {
LABEL_34:
      if (++v16 == v17) {
        goto LABEL_149;
      }
      continue;
    }
    break;
  }
  LOBYTE(v19) = 1;
  LOBYTE(v18) = 1;
LABEL_149:
  int v62 = (llvm **)__p;
  uint64_t v63 = v76;
  if (v18 & 1) != 0 && (v19)
  {
LABEL_163:
    while (v62 != v63)
    {
      uint64_t v67 = *v62++;
      v4 |= sub_1CC9A625C(v67, (const llvm::Function *)v78);
    }
  }
  else if (__p != v76)
  {
    do
    {
      unint64_t v64 = *v62;
      if ((v18 & 1) == 0)
      {
        uint64_t v65 = *((void *)v64 + 14);
        if (!v65 || (*(unsigned char *)(v65 + 16) & 0x20) == 0)
        {
          *((void *)v64 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v64 + 14, **(uint64_t ***)v64, -1, 37);
          int v4 = 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        uint64_t v66 = *((void *)v64 + 14);
        if (!v66 || (*(unsigned char *)(v66 + 16) & 1) == 0)
        {
          *((void *)v64 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v64 + 14, **(uint64_t ***)v64, -1, 32);
          int v4 = 1;
        }
      }
      ++v62;
    }
    while (v62 != v63);
    int v62 = (llvm **)__p;
    uint64_t v63 = v76;
    goto LABEL_163;
  }
LABEL_164:
  sub_1CD64F554((llvm::CallGraphUpdater *)v78);
  if (__p)
  {
    std::string::size_type v76 = (llvm **)__p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v73[0], 8);
  return v4 & 1;
}

uint64_t sub_1CC9A625C(llvm *this, const llvm::Function *a2)
{
  int v2 = (char *)this + 72;
  uint64_t v3 = (char *)*((void *)this + 10);
  if (v3 != (char *)this + 72)
  {
    do
    {
      if (v3) {
        __n128 v5 = (llvm *)(v3 - 24);
      }
      else {
        __n128 v5 = 0;
      }
      uint64_t v6 = (void *)*((void *)v5 + 5);
      if (v6 != (void *)((char *)v5 + 40))
      {
        uint64_t v7 = v6 ? (uint64_t)(v6 - 3) : 0;
        unsigned int v8 = *(unsigned __int8 *)(v7 + 16) - 40;
        uint64_t v9 = v8 >= 0xFFFFFFF5 ? v7 : 0;
        if (v6)
        {
          if (*(unsigned char *)(v9 + 16) == 33
            && v8 >= 0xFFFFFFF5
            && ((uint64_t v11 = *(void *)(v9 + 64)) != 0 && (*(unsigned char *)(v11 + 16) & 0x20) != 0
             || llvm::CallBase::hasFnAttrOnCalledFunction(v9, 37))
            && llvm::canSimplifyInvokeNoUnwind(this, a2))
          {
            llvm::removeUnwindEdge(v5, 0, v19);
          }
        }
      }
      uint64_t v12 = *((void *)v5 + 6);
      while ((llvm *)v12 != (llvm *)((char *)v5 + 40))
      {
        uint64_t v13 = v12;
        uint64_t v12 = *(void *)(v12 + 8);
        uint64_t v14 = v13 - 24;
        if (!v13) {
          uint64_t v14 = 0;
        }
        int v15 = *(unsigned __int8 *)(v14 + 16);
        if (v15 == 84) {
          uint64_t v16 = v14;
        }
        else {
          uint64_t v16 = 0;
        }
        if (v13
          && v15 == 84
          && ((uint64_t v17 = *(void *)(v16 + 64)) != 0 && (*(unsigned char *)(v17 + 16) & 1) != 0
           || llvm::CallBase::hasFnAttrOnCalledFunction(v16, 32))
          && (*(_WORD *)(v16 + 18) & 3) != 2)
        {
          uint64_t v18 = v12 - 24;
          if (!v12) {
            uint64_t v18 = 0;
          }
          if (*(unsigned char *)(v18 + 16) != 35)
          {
            __int16 v22 = 257;
            llvm::BasicBlock::splitBasicBlock((uint64_t)v5, v12, (uint64_t)v21, 0);
          }
        }
      }
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return 0;
}

void sub_1CC9A6508(void *a1, llvm::CallGraphUpdater *a2, uint64_t a3, uint64_t a4, llvm::MemorySSAUpdater *a5)
{
  uint64_t v6 = a1 + 5;
  uint64_t v7 = (void *)a1[6];
  if (a1 + 5 == v7)
  {
LABEL_24:
    BOOL v21 = (void *)*v6;
    if ((void *)*v6 == v6)
    {
      uint64_t v22 = 0;
      uint64_t v26 = 0;
      int v28 = 0;
    }
    else
    {
      uint64_t v22 = (uint64_t)(v21 - 3);
      if (v21) {
        char v23 = (llvm::Instruction *)(v21 - 3);
      }
      else {
        char v23 = 0;
      }
      int v24 = *((unsigned __int8 *)v23 + 16);
      int v25 = v24 - 29;
      if ((v24 - 29) >= 0xB) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = v23;
      }
      if (v24 != 30)
      {
        int v27 = 0;
        switch(v25)
        {
          case 0:
          case 5:
          case 6:
            goto LABEL_35;
          case 1:
            __break(1u);
            goto LABEL_57;
          case 2:
            int v27 = (*((_DWORD *)v23 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_35;
          case 3:
          case 9:
LABEL_57:
            int v27 = (*((_DWORD *)v23 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_35;
          case 4:
            int v27 = 2;
            goto LABEL_35;
          case 7:
            int v27 = *((_WORD *)v23 + 9) & 1;
            goto LABEL_35;
          case 8:
            int v27 = 1;
            goto LABEL_35;
          case 10:
            int v27 = *((_DWORD *)v23 + 20) + 1;
            goto LABEL_35;
          default:
            uint64_t v22 = 0;
            int v28 = 0;
            goto LABEL_48;
        }
      }
      if ((*((_DWORD *)v23 + 5) & 0x7FFFFFF) == 3) {
        int v27 = 2;
      }
      else {
        int v27 = 1;
      }
LABEL_35:
      int v28 = v27;
    }
LABEL_48:
    long long __p = 0;
    int v35 = 0;
    uint64_t v36 = 0;
    sub_1CC9A67FC(&__p, v26, 0, v22, v28, v28);
    if (((v35 - (unsigned char *)__p) & 0x7FFFFFFF8) != 0)
    {
      uint64_t v32 = 0;
      uint64_t v33 = ((unint64_t)(v35 - (unsigned char *)__p) >> 3);
      do
        llvm::BasicBlock::removePredecessor(*((llvm::Type **)__p + v32++), (llvm::BasicBlock *)a1, 0);
      while (v33 != v32);
    }
    llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)a1);
    if (__p)
    {
      int v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v9 = a1 + 5;
    while (1)
    {
      uint64_t v9 = (void *)*v9;
      uint64_t v10 = (llvm::CallBase *)(v9 - 3);
      uint64_t v11 = v9 ? (unsigned __int8 *)(v9 - 3) : 0;
      if (*(unsigned char *)(*(void *)v11 + 8) == 12) {
        break;
      }
      unsigned int v12 = v11[16] - 33;
      BOOL v13 = v12 > 0x33;
      uint64_t v14 = (1 << v12) & 0x8000000000041;
      if (!v13 && v14 != 0)
      {
        if ((uint64_t v16 = *(v9 - 7)) == 0
          || *(unsigned char *)(v16 + 16)
          || *(void *)(v16 + 24) != v9[6]
          || ((v17 = *(_DWORD *)(v16 + 36) - 124, BOOL v13 = v17 > 4, v18 = (1 << v17) & 0x19, !v13)
            ? (BOOL v19 = v18 == 0)
            : (BOOL v19 = 1),
              !v19 || (*(unsigned char *)(v16 + 33) & 0x20) == 0))
        {
          llvm::CallGraphUpdater::removeCallSite(a2, v10);
        }
      }
      if (*((void *)v11 + 1))
      {
        uint64_t v20 = llvm::UndefValue::get(*(llvm::UndefValue **)v11, v10);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, v20, (llvm::Value *)1);
      }
      if (v9 == v7) {
        goto LABEL_24;
      }
    }
    if (*((unsigned __int8 *)v9 - 8) - 29 >= 0xB)
    {
      uint64_t v29 = v9[1];
      if (v29) {
        BOOL v30 = v29 == v9[2] + 40;
      }
      else {
        BOOL v30 = 1;
      }
      if (v30) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = (llvm *)(v29 - 24);
      }
      llvm::changeToUnreachable(v31, 0, 0, 0, a5);
    }
  }
}

void *sub_1CC9A67FC(void *result, llvm::Instruction *a2, unsigned int a3, uint64_t a4, int a5, unint64_t a6)
{
  if (a6)
  {
    if (a6 >> 61) {
      abort();
    }
    uint64_t v10 = result;
    uint64_t result = operator new(8 * a6);
    uint64_t v11 = result;
    void *v10 = result;
    v10[1] = result;
    for (uint64_t v10[2] = &result[a6]; a5 != a3; ++a3)
    {
      uint64_t result = (void *)llvm::Instruction::getSuccessor(a2, a3);
      *v11++ = result;
    }
    v10[1] = v11;
  }
  return result;
}

uint64_t **llvm::ContextTrieNode::moveToChildContext(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v10 = (uint64_t *)llvm::sampleprof::FunctionSamples::getCallSiteHash(*(std::string::value_type **)(a3 + 32), *(void *)(a3 + 40), a2);
  uint64_t v29 = *(void *)(a3 + 64);
  BOOL v30 = v10;
  uint64_t v11 = *(void *)(a3 + 24);
  unsigned int v12 = sub_1CD67E990(a1, (unint64_t)v10, &v30);
  if (v12 + 5 != (uint64_t **)a3) {
    sub_1CD67E220((uint64_t)(v12 + 5), *(void **)a3, (void *)(a3 + 8));
  }
  long long v13 = *(_OWORD *)(a3 + 24);
  long long v14 = *(_OWORD *)(a3 + 56);
  *((_OWORD *)v12 + 5) = *(_OWORD *)(a3 + 40);
  *((_OWORD *)v12 + 6) = v14;
  *((_OWORD *)v12 + 4) = v13;
  int v15 = sub_1CD67E990(a1, (unint64_t)v10, &v30);
  v15[13] = *(uint64_t **)a2;
  long long v28 = 0u;
  memset(v27, 0, sizeof(v27));
  v15[8] = (uint64_t *)a1;
  uint64_t v26 = v15 + 5;
  sub_1CD3F21B0(v27, &v26);
  for (uint64_t i = *((void *)&v28 + 1); *((void *)&v28 + 1); uint64_t i = *((void *)&v28 + 1))
  {
    unsigned int v17 = *(void **)(*(void *)(*((void *)&v27[0] + 1) + (((unint64_t)v28 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v28 & 0x1FF));
    *(void *)&long long v28 = v28 + 1;
    *((void *)&v28 + 1) = i - 1;
    if ((unint64_t)v28 >= 0x400)
    {
      operator delete(**((void ***)&v27[0] + 1));
      *((void *)&v27[0] + 1) += 8;
      *(void *)&long long v28 = v28 - 512;
    }
    uint64_t v18 = v17[6];
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 40) - a4;
      *(void *)(v18 + 32) += 24 * a4;
      *(void *)(v18 + 40) = v19;
      *(_DWORD *)(v18 + 48) |= 2u;
    }
    uint64_t v20 = (void *)*v17;
    if ((void *)*v17 != v17 + 1)
    {
      do
      {
        uint64_t v26 = (uint64_t **)(v20 + 5);
        v20[8] = v17;
        sub_1CD3F21B0(v27, &v26);
        BOOL v21 = (void *)v20[1];
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            BOOL v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)v20[2];
            BOOL v23 = *v22 == (void)v20;
            uint64_t v20 = v22;
          }
          while (!v23);
        }
        uint64_t v20 = v22;
      }
      while (v22 != v17 + 1);
    }
  }
  if (a5)
  {
    unint64_t v25 = llvm::sampleprof::FunctionSamples::getCallSiteHash((std::string::value_type *)v15[9], (std::string::size_type)v15[10], (unsigned int *)&v29);
    sub_1CD67EA7C(v11, v25);
  }
  sub_1CB904DFC((void **)v27);
  return v15 + 5;
}

uint64_t llvm::ContextTrieNode::getFuncName(llvm::ContextTrieNode *this)
{
  return *((void *)this + 4);
}

uint64_t llvm::ContextTrieNode::getParentContext(llvm::ContextTrieNode *this)
{
  return *((void *)this + 3);
}

uint64_t llvm::ContextTrieNode::setParentContext(uint64_t this, llvm::ContextTrieNode *a2)
{
  *(void *)(this + 24) = a2;
  return this;
}

void llvm::ContextTrieNode::removeChildContext(uint64_t a1, unsigned int *a2, std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = llvm::sampleprof::FunctionSamples::getCallSiteHash(__s, __sz, a2);

  sub_1CD67EA7C(a1, v5);
}

uint64_t llvm::ContextTrieNode::setFunctionSamples(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t llvm::ContextTrieNode::getFunctionSize(llvm::ContextTrieNode *this)
{
  return *((void *)this + 7);
}

uint64_t llvm::ContextTrieNode::addFunctionSize(uint64_t this, int a2)
{
  int v2 = *(unsigned __int8 *)(this + 60);
  if (*(unsigned char *)(this + 60)) {
    int v2 = *(_DWORD *)(this + 56);
  }
  else {
    *(unsigned char *)(this + 60) = 1;
  }
  *(_DWORD *)(this + 56) = v2 + a2;
  return this;
}

llvm *llvm::ContextTrieNode::dumpNode(size_t *this)
{
  int v2 = llvm::dbgs((llvm *)this);
  uint64_t v3 = v2;
  uint64_t v4 = *((void *)v2 + 4);
  if ((unint64_t)(*((void *)v2 + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8250;
    *(_DWORD *)uint64_t v4 = 1701080910;
    unint64_t v5 = (unsigned char *)(*((void *)v2 + 4) + 6);
    *((void *)v3 + 4) = v5;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Node: ", 6uLL);
    unint64_t v5 = (unsigned char *)*((void *)v3 + 4);
  }
  uint64_t v6 = (const void *)this[4];
  size_t v7 = this[5];
  if (v7 <= *((void *)v3 + 3) - (void)v5)
  {
    if (v7)
    {
      memcpy(v5, v6, this[5]);
      unint64_t v5 = (unsigned char *)(*((void *)v3 + 4) + v7);
      *((void *)v3 + 4) = v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, (const char *)v6, this[5]);
    unint64_t v5 = (unsigned char *)*((void *)v3 + 4);
  }
  if (*((unsigned char **)v3 + 3) == v5)
  {
    llvm::raw_ostream::write(v3, "\n", 1uLL);
    uint64_t v8 = *((void *)v3 + 4);
  }
  else
  {
    *unint64_t v5 = 10;
    uint64_t v8 = *((void *)v3 + 4) + 1;
    *((void *)v3 + 4) = v8;
  }
  if ((unint64_t)(*((void *)v3 + 3) - v8) > 0xB)
  {
    *(_DWORD *)(v8 + 8) = 540697972;
    *(void *)uint64_t v8 = *(void *)"  Callsite: ";
    *((void *)v3 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v3, "  Callsite: ", 0xCuLL);
  }
  llvm::sampleprof::LineLocation::print((llvm::sampleprof::LineLocation *)(this + 8), v3);
  uint64_t v9 = (unsigned char *)*((void *)v3 + 4);
  if (*((unsigned char **)v3 + 3) == v9)
  {
    llvm::raw_ostream::write(v3, "\n", 1uLL);
    uint64_t v10 = (void *)*((void *)v3 + 4);
  }
  else
  {
    *uint64_t v9 = 10;
    uint64_t v10 = (void *)(*((void *)v3 + 4) + 1);
    *((void *)v3 + 4) = v10;
  }
  if (*((void *)v3 + 3) - (void)v10 > 7uLL)
  {
    void *v10 = 0x203A657A69532020;
    *((void *)v3 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v3, "  Size: ", 8uLL);
  }
  if (*((unsigned char *)this + 60)) {
    uint64_t result = sub_1CD098D14(v3, *((unsigned int *)this + 14), 0, 0, 0);
  }
  else {
    uint64_t result = sub_1CB8E509C(v3, "None");
  }
  unsigned int v12 = (unsigned char *)*((void *)v3 + 4);
  if (*((unsigned char **)v3 + 3) == v12)
  {
    uint64_t result = llvm::raw_ostream::write(v3, "\n", 1uLL);
    uint64_t v13 = *((void *)v3 + 4);
  }
  else
  {
    unsigned char *v12 = 10;
    uint64_t v13 = *((void *)v3 + 4) + 1;
    *((void *)v3 + 4) = v13;
  }
  if ((unint64_t)(*((void *)v3 + 3) - v13) > 0xB)
  {
    *(_DWORD *)(v13 + 8) = 171601509;
    *(void *)uint64_t v13 = *(void *)"  Children:\n";
    *((void *)v3 + 4) += 12;
  }
  else
  {
    uint64_t result = llvm::raw_ostream::write(v3, "  Children:\n", 0xCuLL);
  }
  uint64_t v16 = (char *)*this;
  long long v14 = (char *)(this + 1);
  int v15 = v16;
  if (v16 != v14)
  {
    do
    {
      unsigned int v17 = llvm::dbgs(result);
      uint64_t v18 = v17;
      uint64_t v19 = *((void *)v17 + 4);
      if ((unint64_t)(*((void *)v17 + 3) - v19) > 9)
      {
        *(_WORD *)(v19 + 8) = 8250;
        *(void *)uint64_t v19 = *(void *)"    Node: ";
        uint64_t result = (llvm *)(*((void *)v17 + 4) + 10);
        *((void *)v18 + 4) = result;
      }
      else
      {
        llvm::raw_ostream::write(v17, "    Node: ", 0xAuLL);
        uint64_t result = (llvm *)*((void *)v18 + 4);
      }
      uint64_t v20 = (const void *)*((void *)v15 + 9);
      unint64_t v21 = *((void *)v15 + 10);
      if (v21 <= *((void *)v18 + 3) - (void)result)
      {
        if (v21)
        {
          memcpy(result, v20, *((void *)v15 + 10));
          uint64_t result = (llvm *)(*((void *)v18 + 4) + v21);
          *((void *)v18 + 4) = result;
        }
      }
      else
      {
        llvm::raw_ostream::write(v18, (const char *)v20, *((void *)v15 + 10));
        uint64_t result = (llvm *)*((void *)v18 + 4);
      }
      if (*((llvm **)v18 + 3) == result)
      {
        uint64_t result = llvm::raw_ostream::write(v18, "\n", 1uLL);
      }
      else
      {
        *(unsigned char *)uint64_t result = 10;
        ++*((void *)v18 + 4);
      }
      uint64_t v22 = (char *)*((void *)v15 + 1);
      if (v22)
      {
        do
        {
          BOOL v23 = v22;
          uint64_t v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          BOOL v23 = (char *)*((void *)v15 + 2);
          BOOL v24 = *(void *)v23 == (void)v15;
          int v15 = v23;
        }
        while (!v24);
      }
      int v15 = v23;
    }
    while (v23 != v14);
  }
  return result;
}

void **llvm::ContextTrieNode::dumpTree(llvm::ContextTrieNode *this)
{
  int v2 = llvm::dbgs(this);
  uint64_t v3 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v3 > 0x15uLL)
  {
    qmemcpy(v3, "Context Profile Tree:\n", 22);
    *((void *)v2 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Context Profile Tree:\n", 0x16uLL);
  }
  long long v14 = 0u;
  memset(v13, 0, sizeof(v13));
  unsigned int v12 = this;
  sub_1CD3F21B0(v13, &v12);
  while (*((void *)&v14 + 1))
  {
    uint64_t v4 = *(size_t **)(*(void *)(*((void *)&v13[0] + 1) + (((unint64_t)v14 >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (v14 & 0x1FF));
    *(void *)&long long v14 = v14 + 1;
    --*((void *)&v14 + 1);
    if ((unint64_t)v14 >= 0x400)
    {
      operator delete(**((void ***)&v13[0] + 1));
      *((void *)&v13[0] + 1) += 8;
      *(void *)&long long v14 = v14 - 512;
    }
    llvm::ContextTrieNode::dumpNode(v4);
    size_t v7 = *v4;
    unint64_t v5 = v4 + 1;
    uint64_t v6 = (void *)v7;
    if ((size_t *)v7 != v5)
    {
      do
      {
        unsigned int v12 = (llvm::ContextTrieNode *)(v6 + 5);
        sub_1CD3F21B0(v13, &v12);
        uint64_t v8 = (size_t *)v6[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            uint64_t v8 = (size_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (size_t *)v6[2];
            BOOL v10 = *v9 == (void)v6;
            uint64_t v6 = v9;
          }
          while (!v10);
        }
        uint64_t v6 = v9;
      }
      while (v9 != v5);
    }
  }
  return sub_1CB904DFC((void **)v13);
}

void *llvm::SampleContextTracker::getOrCreateContextPath(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (void *)(a1 + 40);
  uint64_t v10 = 0;
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = v6 + 24 * v4;
    do
    {
      uint64_t v8 = *(std::string::value_type **)v6;
      std::string::size_type v9 = *(void *)(v6 + 8);
      if (a3) {
        uint64_t result = llvm::ContextTrieNode::getOrCreateChildContext((uint64_t)result, (unsigned int *)&v10, v8, v9, 1);
      }
      else {
        uint64_t result = llvm::ContextTrieNode::getChildContext(result, (unsigned int *)&v10, v8, v9);
      }
      uint64_t v10 = *(void *)(v6 + 16);
      v6 += 24;
    }
    while (v6 != v7);
  }
  return result;
}

int *sub_1CC9A70C4(int *__src, size_t __n, char a3, uint64_t a4)
{
  unint64_t v5 = __src;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (__n && (a3 & 1) != 0)
  {
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = xmmword_1CFAC4320;
    v10.__r_.__value_.__r.__words[2] = 0;
    llvm::MD5::update((int *)&v10, __src, __n);
    llvm::MD5::final((int *)&v10, (int *)&__val);
    std::to_string(&v10, __val);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    char v7 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    *(void *)(a4 + 16) = *((void *)&v10.__r_.__value_.__l + 2);
    if (v7 >= 0) {
      return (int *)a4;
    }
    else {
      return *(int **)a4;
    }
  }
  return v5;
}

void llvm::SampleContextTracker::getIndirectCalleeContextSamplesFor(llvm::SampleContextTracker *this@<X0>, const llvm::DILocation *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    ContextFor = llvm::SampleContextTracker::getContextFor(this, a2);
    unint64_t v6 = llvm::sampleprof::FunctionSamples::getCallSiteIdentifier(a2, 0);
    std::string::size_type v9 = (void *)*ContextFor;
    char v7 = ContextFor + 1;
    uint64_t v8 = v9;
    if (v9 != v7)
    {
      unint64_t v10 = v6;
      uint64_t v11 = 0;
      do
      {
        if (v8[13] == v10)
        {
          uint64_t v12 = v8[11];
          if (v12)
          {
            unint64_t v13 = (unint64_t)a3[2];
            if ((unint64_t)v11 >= v13)
            {
              int v15 = *a3;
              uint64_t v16 = (v11 - *a3) >> 3;
              unint64_t v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 61) {
                abort();
              }
              uint64_t v18 = v13 - (void)v15;
              if (v18 >> 2 > v17) {
                unint64_t v17 = v18 >> 2;
              }
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v19 = v17;
              }
              if (v19)
              {
                if (v19 >> 61) {
                  sub_1CB833614();
                }
                uint64_t v20 = (char *)operator new(8 * v19);
              }
              else
              {
                uint64_t v20 = 0;
              }
              unint64_t v21 = &v20[8 * v16];
              *(void *)unint64_t v21 = v12;
              long long v14 = v21 + 8;
              if (v11 != v15)
              {
                do
                {
                  uint64_t v22 = *((void *)v11 - 1);
                  v11 -= 8;
                  *((void *)v21 - 1) = v22;
                  v21 -= 8;
                }
                while (v11 != v15);
                uint64_t v11 = *a3;
              }
              *a3 = v21;
              a3[1] = v14;
              a3[2] = &v20[8 * v19];
              if (v11) {
                operator delete(v11);
              }
            }
            else
            {
              *(void *)uint64_t v11 = v12;
              long long v14 = v11 + 8;
            }
            a3[1] = v14;
            uint64_t v11 = v14;
          }
        }
        BOOL v23 = (void *)v8[1];
        if (v23)
        {
          do
          {
            BOOL v24 = v23;
            BOOL v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            BOOL v24 = (void *)v8[2];
            BOOL v25 = *v24 == (void)v8;
            uint64_t v8 = v24;
          }
          while (!v25);
        }
        uint64_t v8 = v24;
      }
      while (v24 != v7);
    }
  }
}

void *llvm::SampleContextTracker::getContextSamplesFor(uint64_t a1, uint64_t a2)
{
  uint64_t result = llvm::SampleContextTracker::getContextFor(a1, a2);
  if (result) {
    return (void *)result[6];
  }
  return result;
}

size_t *llvm::SampleContextTracker::getAllContextSamplesFor(llvm::SampleContextTracker *this, const llvm::Function *a2)
{
  uint64_t v3 = (unsigned __int8 *)sub_1CD553864(a2);
  return *sub_1CD67EB0C((uint64_t)this, v3, v4) + 1;
}

size_t *llvm::SampleContextTracker::getAllContextSamplesFor(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return *sub_1CD67EB0C(a1, a2, a3) + 1;
}

void *llvm::SampleContextTracker::getTopLevelContextNode(uint64_t a1, std::string::value_type *a2, std::string::size_type a3)
{
  uint64_t v4 = 0;
  return llvm::ContextTrieNode::getChildContext((void *)(a1 + 40), (unsigned int *)&v4, a2, a3);
}

uint64_t **llvm::SampleContextTracker::promoteMergeContextSamplesTree(uint64_t **this, llvm::ContextTrieNode *a2)
{
  return llvm::SampleContextTracker::promoteMergeContextSamplesTree((llvm::SampleContextTracker *)this, a2, this + 5, *(_DWORD *)(*((void *)a2 + 6) + 40) - 1);
}

uint64_t **llvm::SampleContextTracker::promoteMergeContextSamplesTree(uint64_t **a1, uint64_t a2, std::string::value_type *a3, std::string::size_type a4)
{
  char v7 = *(const llvm::DILocation **)(a2 + 48);
  uint64_t result = (uint64_t **)llvm::SampleContextTracker::getContextFor((llvm::SampleContextTracker *)a1, v7);
  if (result)
  {
    std::string::size_type v9 = result;
    uint64_t result = (uint64_t **)llvm::sampleprof::FunctionSamples::getCallSiteIdentifier(v7, 0);
    uint64_t v18 = result;
    if (a4)
    {
      uint64_t result = (uint64_t **)llvm::ContextTrieNode::getChildContext(v9, (unsigned int *)&v18, a3, a4);
      if (result) {
        return llvm::SampleContextTracker::promoteMergeContextSamplesTree((llvm::SampleContextTracker *)a1, (llvm::ContextTrieNode *)result, a1 + 5, *((_DWORD *)result[6] + 10) - 1);
      }
    }
    else
    {
      uint64_t v12 = *v9;
      unint64_t v10 = (uint64_t *)(v9 + 1);
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unint64_t v13 = result;
        do
        {
          if (v13 == (uint64_t **)v11[13])
          {
            uint64_t v14 = v11[11];
            if (!v14 || (*(unsigned char *)(v14 + 48) & 4) == 0) {
              uint64_t result = llvm::SampleContextTracker::promoteMergeContextSamplesTree((llvm::SampleContextTracker *)a1, (llvm::ContextTrieNode *)(v11 + 5), a1 + 5, *(_DWORD *)(v14 + 40) - 1);
            }
          }
          int v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              int v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
    }
  }
  return result;
}

void **llvm::SampleContextTracker::dump(llvm::SampleContextTracker *this)
{
  return llvm::ContextTrieNode::dumpTree((llvm::SampleContextTracker *)((char *)this + 40));
}

uint64_t **llvm::SampleContextTracker::addTopLevelContextNode(uint64_t a1, std::string::value_type *a2, std::string::size_type a3)
{
  uint64_t v4 = 0;
  return llvm::ContextTrieNode::getOrCreateChildContext(a1 + 40, (unsigned int *)&v4, a2, a3, 1);
}

void sub_1CC9A755C(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (char *)*((void *)v3 + 1);
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_1CC9A75E0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 56);
  unsigned int v4 = __clz(a3) + __clz(a2);
  if (v4 < 0x40)
  {
    if (v4 != 63
      || (unint64_t v12 = (a2 >> 1) * a3, (v12 & 0x8000000000000000) != 0)
      || (unint64_t v5 = 2 * v12, (a2 & 1) != 0) && (v5 + a3 >= v5 ? (v13 = v5 + a3 >= a3) : (v13 = 0), v5 += a3, !v13))
    {
      *(void *)(a1 + 56) = -1;
      return 10;
    }
  }
  else
  {
    unint64_t v5 = a3 * a2;
  }
  unint64_t v6 = v5 + v3;
  BOOL v8 = v5 + v3 >= v3 && v6 >= v5;
  BOOL v9 = !v8;
  if (v8) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = -1;
  }
  *(void *)(a1 + 56) = v10;
  if (v9) {
    return 10;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC9A7664(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 64);
  unsigned int v4 = __clz(a3) + __clz(a2);
  if (v4 < 0x40)
  {
    if (v4 != 63
      || (unint64_t v12 = (a2 >> 1) * a3, (v12 & 0x8000000000000000) != 0)
      || (unint64_t v5 = 2 * v12, (a2 & 1) != 0) && (v5 + a3 >= v5 ? (v13 = v5 + a3 >= a3) : (v13 = 0), v5 += a3, !v13))
    {
      *(void *)(a1 + 64) = -1;
      return 10;
    }
  }
  else
  {
    unint64_t v5 = a3 * a2;
  }
  unint64_t v6 = v5 + v3;
  BOOL v8 = v5 + v3 >= v3 && v6 >= v5;
  BOOL v9 = !v8;
  if (v8) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = -1;
  }
  *(void *)(a1 + 64) = v10;
  if (v9) {
    return 10;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC9A76E8(uint64_t a1, long long **a2)
{
  unint64_t v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *(const void **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v4 = *v3;
    *(void *)(a1 + 16) = *((void *)v3 + 2);
    *(_OWORD *)a1 = v4;
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  return a1;
}

void llvm::initializeSampleProfileLoaderLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE3538, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC9A77DC;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(&qword_1EBCE3538, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC9A77DC(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v2);
  operator new();
}

void llvm::createSampleProfileLoaderPass(llvm *this)
{
}

uint64_t sub_1CC9A78F8(uint64_t a1, void *__src, size_t __len, atomic_uint **a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCE3530;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F262A778;
  uint64_t v7 = a1 + 32;
  int v8 = byte_1EBCE41FF;
  uint64_t v9 = qword_1EBCE41E8;
  if (byte_1EBCE41FF >= 0) {
    size_t v10 = byte_1EBCE41FF & 0x7F;
  }
  else {
    size_t v10 = qword_1EBCE41F0;
  }
  uint64_t v11 = *a4;
  if (*a4)
  {
    int v15 = *a4;
    atomic_fetch_add_explicit(v11 + 2, 1u, memory_order_relaxed);
  }
  else
  {
    llvm::vfs::getRealFileSystem(&v15);
  }
  v23[0] = &unk_1F262A818;
  v23[1] = a1;
  BOOL v24 = v23;
  v21[0] = &unk_1F262A860;
  v21[1] = a1;
  uint64_t v22 = v21;
  v19[0] = &unk_1F262A8A8;
  v19[1] = a1;
  uint64_t v20 = v19;
  if (v8 >= 0) {
    unint64_t v12 = &qword_1EBCE41E8;
  }
  else {
    unint64_t v12 = (uint64_t *)v9;
  }
  sub_1CC9A7C58(v7, __src, __len, v12, v10, 0, &v15, (uint64_t)v23, (uint64_t)v21, (uint64_t)v19);
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void))(*v20 + 40))();
  }
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
  }
  else if (v22)
  {
    (*(void (**)(void))(*v22 + 40))();
  }
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
  }
  else if (v24)
  {
    (*(void (**)(void))(*v24 + 40))();
  }
  BOOL v13 = (llvm::PassRegistry *)v15;
  if (v15 && atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1) {
    BOOL v13 = (llvm::PassRegistry *)(*(uint64_t (**)(llvm::PassRegistry *))(*(void *)v13 + 8))(v13);
  }
  *(void *)(a1 + 1456) = 0;
  *(_OWORD *)(a1 + 1440) = 0u;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v13);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCE3538, memory_order_acquire) != -1)
  {
    v18[0] = sub_1CC9A77DC;
    v18[1] = &PassRegistry;
    BOOL v17 = v18;
    std::__call_once(&qword_1EBCE3538, &v17, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC9A7C58(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, int a6, atomic_uint **a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_41:
  }
    abort();
  uint64_t v10 = a8;
  uint64_t v11 = a7;
  int v12 = a6;
  uint64_t v14 = a4;
  if (__len >= 0x17)
  {
    size_t v19 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v19 = __len | 7;
    }
    size_t v24 = v19 + 1;
    p_dst = (long long *)operator new(v19 + 1);
    unint64_t v25 = v24 | 0x8000000000000000;
    int v12 = a6;
    uint64_t v10 = a8;
    uint64_t v14 = a4;
    uint64_t v11 = a7;
    *((void *)&__dst + 1) = __len;
    unint64_t v38 = v25;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v38) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_41;
  }
  if (a5 >= 0x17)
  {
    uint64_t v27 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v27 = a5 | 7;
    }
    uint64_t v28 = v27 + 1;
    p_p = operator new(v27 + 1);
    *((void *)&__p + 1) = a5;
    unint64_t v36 = v28 | 0x8000000000000000;
    *(void *)&long long __p = p_p;
    goto LABEL_16;
  }
  HIBYTE(v36) = a5;
  p_p = &__p;
  if (a5) {
LABEL_16:
  }
    memmove(p_p, v14, a5);
  *((unsigned char *)p_p + a5) = 0;
  uint64_t v29 = *v11;
  uint64_t v34 = v29;
  if (v29)
  {
    atomic_fetch_add_explicit(v29 + 2, 1u, memory_order_relaxed);
    sub_1CD67F340(a1, &__dst, &__p, (uint64_t *)&v34);
    if (atomic_fetch_add(v29 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v29 + 8))(v29);
    }
  }
  else
  {
    sub_1CD67F340(a1, &__dst, &__p, (uint64_t *)&v34);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)__dst);
  }
  *(void *)a1 = &unk_1F262A8F0;
  *(void *)(a1 + 1160) = 0x1000000000;
  *(_OWORD *)(a1 + 1144) = 0u;
  uint64_t v30 = *(void *)(v10 + 24);
  if (v30)
  {
    if (v30 == v10)
    {
      *(void *)(a1 + 1200) = a1 + 1176;
      (*(void (**)(void))(**(void **)(v10 + 24) + 24))(*(void *)(v10 + 24));
    }
    else
    {
      *(void *)(a1 + 1200) = v30;
      *(void *)(v10 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 1200) = 0;
  }
  uint64_t v31 = *(void *)(a9 + 24);
  if (v31)
  {
    if (v31 == a9)
    {
      *(void *)(a1 + 1232) = a1 + 1208;
      (*(void (**)(void))(**(void **)(a9 + 24) + 24))(*(void *)(a9 + 24));
    }
    else
    {
      *(void *)(a1 + 1232) = v31;
      *(void *)(a9 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 1232) = 0;
  }
  uint64_t v32 = *(void *)(a10 + 24);
  if (v32)
  {
    if (v32 == a10)
    {
      *(void *)(a1 + 1264) = a1 + 1240;
      (*(void (**)(void))(**(void **)(a10 + 24) + 24))(*(void *)(a10 + 24));
    }
    else
    {
      *(void *)(a1 + 1264) = v32;
      *(void *)(a10 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 1264) = 0;
  }
  *(void *)(a1 + 1272) = 0;
  *(unsigned char *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1284) = v12;
  *(_DWORD *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1344) = 0;
  *(void *)(a1 + 1368) = 0x800000000;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  return a1;
}

uint64_t sub_1CC9A7FC4(uint64_t a1, const llvm::MemoryBuffer **a2, uint64_t a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *a2;
  uint64_t v7 = (long long *)(a1 + 1072);
  if (*(char *)(a1 + 1095) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v47, *(const void **)(a1 + 1072), *(void *)(a1 + 1080));
  }
  else
  {
    long long v47 = *v7;
    uint64_t v48 = *(void *)(a1 + 1088);
  }
  uint64_t v8 = *(void *)(a1 + 1120);
  if (*(char *)(a1 + 1119) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(a1 + 1096), *(void *)(a1 + 1104));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 1096);
    uint64_t v46 = *(void *)(a1 + 1112);
  }
  llvm::sampleprof::SampleProfileReader::create((uint64_t)&v47, v6, v8, (uint64_t)__p, (uint64_t)&v49);
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
  if ((v50 & 1) == 0)
  {
    std::system_category();
    uint64_t v9 = *(void *)&v49.__val_;
LABEL_29:
    *(void *)&v49.__val_ = 0;
    uint64_t v19 = *(void *)(a1 + 1056);
    *(void *)(a1 + 1056) = v9;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      uint64_t v9 = *(void *)(a1 + 1056);
    }
    (*(void (**)(uint64_t, BOOL))(*(void *)v9 + 80))(v9, *(_DWORD *)(a1 + 1284) == 2);
    *(void *)(*(void *)(a1 + 1056) + 136) = a2;
    *(void *)&v44.__val_ = sub_1CD552D00(*(llvm::LLVMContext ***)(a1 + 1056));
    v44.__cat_ = v20;
    if (v44.__val_)
    {
      std::error_code::message(&v38, &v44);
      uint64_t v10 = "profile reading failed: ";
      goto LABEL_14;
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 1056) + 48))(&v38);
    std::string::size_type v21 = v38.__r_.__value_.__r.__words[0];
    v38.__r_.__value_.__r.__words[0] = 0;
    uint64_t v22 = *(void *)(a1 + 1288);
    *(void *)(a1 + 1288) = v21;
    if (v22)
    {
      uint64_t v32 = sub_1CD67F760(v22);
      MEMORY[0x1D25D9CE0](v32, 0x10B0C408C61162ELL);
      uint64_t v33 = v38.__r_.__value_.__r.__words[0];
      v38.__r_.__value_.__r.__words[0] = 0;
      if (v33)
      {
        uint64_t v34 = sub_1CD67F760(v33);
        MEMORY[0x1D25D9CE0](v34, 0x10B0C408C61162ELL);
      }
    }
    if (byte_1EBCE3740 && *(void *)(a1 + 1288))
    {
      int v23 = byte_1EBCE35C0;
      *(unsigned char *)(a1 + 1384) = byte_1EBCE35C0 ^ 1;
      if (!v23)
      {
        sub_1CD67F6F0(a1 + 1352);
        size_t v24 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 1056) + 56))(*(void *)(a1 + 1056));
        if (v24)
        {
          uint64_t v25 = *v24;
          uint64_t v26 = v24[1];
          while (v25 != v26)
          {
            uint64_t v27 = *(unsigned __int8 **)v25;
            size_t v28 = *(void *)(v25 + 8);
            v25 += 16;
            sub_1CC0D7F54((llvm::StringMapImpl *)(a1 + 1352), v27, v28);
          }
        }
        *(unsigned char *)(a1 + 1048) = 1;
        if (!a3)
        {
LABEL_46:
          uint64_t v30 = *(unsigned char **)(a1 + 1056);
          if (v30[121] || v30[122] || v30[120])
          {
            if (!word_1EBD02DA0)
            {
              v38.__r_.__value_.__s.__data_[0] = 1;
              byte_1EBD02E18 = 1;
              if (!qword_1EBD02E50) {
                goto LABEL_85;
              }
              (*(void (**)(uint64_t, std::string *))(*(void *)qword_1EBD02E50 + 48))(qword_1EBD02E50, &v38);
            }
            if (!word_1EBD0CB20)
            {
              v38.__r_.__value_.__s.__data_[0] = 1;
              byte_1EBD0CB98 = 1;
              if (!qword_1EBD0CBD0) {
                goto LABEL_85;
              }
              (*(void (**)(uint64_t, std::string *))(*(void *)qword_1EBD0CBD0 + 48))(qword_1EBD0CBD0, &v38);
            }
            if (!word_1EBD0C2E0)
            {
              v38.__r_.__value_.__s.__data_[0] = 1;
              byte_1EBD0C358 = 1;
              if (!qword_1EBD0C390) {
                goto LABEL_85;
              }
              (*(void (**)(uint64_t, std::string *))(*(void *)qword_1EBD0C390 + 48))(qword_1EBD0C390, &v38);
            }
          }
          uint64_t v31 = *(unsigned char **)(a1 + 1056);
          if (!v31[121] && !v31[122])
          {
LABEL_73:
            if (v31[120]) {
              operator new();
            }
            uint64_t v17 = 1;
            goto LABEL_24;
          }
          *(unsigned char *)(a1 + 1280) = v31[121];
          if (!word_1EBCE39C8)
          {
            v38.__r_.__value_.__s.__data_[0] = 1;
            byte_1EBCE3A40 = 1;
            if (!qword_1EBCE3A78) {
              goto LABEL_85;
            }
            (*(void (**)(uint64_t, std::string *))(*(void *)qword_1EBCE3A78 + 48))(qword_1EBCE3A78, &v38);
          }
          if (!word_1EBCE3CC8)
          {
            v38.__r_.__value_.__s.__data_[0] = 1;
            byte_1EBCE3D40 = 1;
            if (!qword_1EBCE3D78) {
              goto LABEL_85;
            }
            (*(void (**)(uint64_t, std::string *))(*(void *)qword_1EBCE3D78 + 48))(qword_1EBCE3D78, &v38);
          }
          if (!word_1EBCE3D88)
          {
            v38.__r_.__value_.__s.__data_[0] = 1;
            byte_1EBCE3E00 = 1;
            if (!qword_1EBCE3E38) {
              goto LABEL_85;
            }
            (*(void (**)(uint64_t, std::string *))(*(void *)qword_1EBCE3E38 + 48))(qword_1EBCE3E38, &v38);
          }
          if (word_1EBCE3E48) {
            goto LABEL_72;
          }
          v38.__r_.__value_.__s.__data_[0] = 1;
          byte_1EBCE3EC0 = 1;
          if (qword_1EBCE3EF8)
          {
            (*(void (**)(uint64_t, std::string *))(*(void *)qword_1EBCE3EF8 + 48))(qword_1EBCE3EF8, &v38);
LABEL_72:
            uint64_t v31 = *(unsigned char **)(a1 + 1056);
            if (llvm::sampleprof::FunctionSamples::ProfileIsCSFlat) {
              operator new();
            }
            goto LABEL_73;
          }
LABEL_85:
          sub_1CB920400();
          return sub_1CC9A8864();
        }
LABEL_43:
        std::string::size_type v29 = qword_1EBCE42D8;
        if (byte_1EBCE42E7 >= 0) {
          std::string::size_type v29 = byte_1EBCE42E7 & 0x7F;
        }
        if (v29)
        {
          if (byte_1EBCE42E7 >= 0) {
            int v35 = &qword_1EBCE42D0;
          }
          else {
            int v35 = (uint64_t *)qword_1EBCE42D0;
          }
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
          v38.__r_.__value_.__l.__size_ = v29;
          v38.__r_.__value_.__r.__words[2] = __PAIR64__(dword_1EBCE4610, dword_1EBCE43B8);
          LODWORD(v39) = dword_1EBCE4868;
          llvm::getReplayInlineAdvisor();
        }
        goto LABEL_46;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 1384) = 0;
    }
    if (!a3) {
      goto LABEL_46;
    }
    goto LABEL_43;
  }
  uint64_t v9 = *(void *)&v49.__val_;
  std::error_code v44 = v49;
  if (!v49.__val_) {
    goto LABEL_29;
  }
  std::error_code::message(&v38, &v44);
  uint64_t v10 = "Could not open profile: ";
LABEL_14:
  uint64_t v11 = std::string::insert(&v38, 0, v10);
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v42 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v43 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  char v13 = *(unsigned char *)(a1 + 1095);
  BOOL v14 = v13 < 0;
  if (v13 >= 0) {
    std::string::size_type v15 = (std::string::size_type)v7;
  }
  else {
    std::string::size_type v15 = *(void *)(a1 + 1072);
  }
  uint64_t v16 = v13 & 0x7F;
  if (v14) {
    uint64_t v16 = *(void *)(a1 + 1080);
  }
  __int16 v37 = 260;
  unint64_t v36 = v42;
  LODWORD(v38.__r_.__value_.__r.__words[1]) = 8;
  v38.__r_.__value_.__s.__data_[12] = 0;
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2616770;
  v38.__r_.__value_.__r.__words[2] = v15;
  uint64_t v39 = v16;
  int v40 = 0;
  uint64_t v41 = &v36;
  llvm::LLVMContext::diagnose((uint64_t)v6, (const llvm::DiagnosticInfo *)&v38);
  if (SHIBYTE(v43) < 0) {
    operator delete(v42[0]);
  }
  uint64_t v17 = 0;
LABEL_24:
  if ((v50 & 1) == 0)
  {
    if (*(void *)&v49.__val_) {
      (*(void (**)(void))(**(void **)&v49.__val_ + 8))(*(void *)&v49.__val_);
    }
  }
  return v17;
}

uint64_t sub_1CC9A8864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1 + 1328;
  uint64_t v186 = *(void ***)(a1 + 1056);
  if (((unsigned int (*)(void **))(*v186)[9])(v186))
  {
    uint64_t v8 = *(void *)(a2 + 32);
    if (v8 != a2 + 24)
    {
      while (1)
      {
        uint64_t v9 = v8 ? (llvm::Value *)(v8 - 56) : 0;
        if ((*((unsigned char *)v9 + 23) & 0x10) != 0) {
          break;
        }
        size_t v19 = 0;
        uint64_t v20 = (int *)&byte_1CFBCE98E;
LABEL_15:
        long long __s1 = xmmword_1CFAC4320;
        uint64_t v207 = 0;
        llvm::MD5::update((int *)&__s1, v20, v19);
        llvm::MD5::final((int *)&__s1, (int *)&v203);
        uint64_t v204 = v203;
        *(void *)&long long v205 = v20;
        *((void *)&v205 + 1) = v19;
        sub_1CD67F8E4((uint64_t)&__s1, v7, &v204, &v205);
        uint64_t v22 = (int *)sub_1CD553864(v9);
        int v23 = v22;
        size_t v25 = v24;
        if (v24 != v19 || v19 && memcmp(v22, v20, v19))
        {
          long long __s1 = xmmword_1CFAC4320;
          uint64_t v207 = 0;
          llvm::MD5::update((int *)&__s1, v23, v25);
          llvm::MD5::final((int *)&__s1, (int *)&v203);
          uint64_t v204 = v203;
          *(void *)&long long v205 = v23;
          *((void *)&v205 + 1) = v25;
          sub_1CD67F8E4((uint64_t)&__s1, v7, &v204, &v205);
        }
        uint64_t v8 = *(void *)(v8 + 8);
        if (v8 == a2 + 24) {
          goto LABEL_22;
        }
      }
      uint64_t v10 = ***(void ***)v9;
      uint64_t v11 = *(void *)(v10 + 152);
      uint64_t v12 = *(unsigned int *)(v10 + 168);
      if (v12)
      {
        LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
        BOOL v14 = (llvm::Value **)(v11 + 16 * v13);
        std::string::size_type v15 = *v14;
        if (*v14 == v9)
        {
LABEL_14:
          uint64_t v18 = v14[1];
          size_t v21 = *(void *)v18;
          uint64_t v20 = (int *)((char *)v18 + 16);
          size_t v19 = v21;
          goto LABEL_15;
        }
        int v16 = 1;
        while (v15 != (llvm::Value *)-4096)
        {
          int v17 = v13 + v16++;
          uint64_t v13 = v17 & (v12 - 1);
          std::string::size_type v15 = *(llvm::Value **)(v11 + 16 * v13);
          if (v15 == v9)
          {
            BOOL v14 = (llvm::Value **)(v11 + 16 * v13);
            goto LABEL_14;
          }
        }
      }
      BOOL v14 = (llvm::Value **)(v11 + 16 * v12);
      goto LABEL_14;
    }
LABEL_22:
    sub_1CC9AE854(v186[3], v7);
  }
  *(void *)(a1 + 1128) = a4;
  if (!llvm::Module::getProfileSummary((llvm::Module *)a2, 0))
  {
    MD = llvm::ProfileSummary::getMD(*(llvm::ProfileSummary **)(*(void *)(a1 + 1056) + 104), *(llvm::LLVMContext **)a2, 1, 1);
    llvm::Module::setModuleFlag((uint64_t **)a2, (llvm::Type *)1, "ProfileSummary", 0xEuLL, MD);
    llvm::ProfileSummaryInfo::refresh(*(void *)(a1 + 1128));
  }
  uint64_t v26 = *(void *)(a1 + 1056);
  uint64_t v27 = *(void **)(v26 + 24);
  if (v27)
  {
    uint64_t v28 = *(void *)(a1 + 1296);
    do
    {
      v28 += v27[14];
      uint64_t v27 = (void *)*v27;
    }
    while (v27);
    *(void *)(a1 + 1296) = v28;
  }
  uint64_t v29 = *(void *)(a2 + 112);
  uint64_t v30 = *(uint64_t **)v29;
  uint64_t v31 = *(unsigned int *)(v29 + 8);
  int v185 = (_DWORD *)v7;
  uint64_t v191 = a2;
  uint64_t v32 = v30;
  if (v31)
  {
    while (!*v32 || *v32 == -8)
      ++v32;
  }
  uint64_t v34 = &v30[v31];
  if (v32 != v34)
  {
    uint64_t v35 = *(void *)(v26 + 112);
    uint64_t v36 = *v32;
    do
    {
      size_t v37 = *(void *)v36;
      if (*(unsigned char *)(*(void *)(v36 + 8) + 16)) {
        std::string v38 = 0;
      }
      else {
        std::string v38 = *(llvm::Value **)(v36 + 8);
      }
      if (v38) {
        BOOL v39 = v37 == 0;
      }
      else {
        BOOL v39 = 1;
      }
      if (v39) {
        goto LABEL_46;
      }
      int v42 = (unsigned __int8 *)(v36 + 16);
      (*sub_1CD3F4C18(a1 + 1144, (unsigned __int8 *)(v36 + 16), *(void *)v36))[1] = (size_t)v38;
      std::string::size_type v43 = (unsigned __int8 *)sub_1CD553864(v38);
      uint64_t v45 = v43;
      size_t v46 = v44;
      if (v37 == v44)
      {
        if (!memcmp(v42, v43, v37)) {
          goto LABEL_59;
        }
      }
      else if (!v44)
      {
LABEL_59:
        if (!v35) {
          goto LABEL_46;
        }
        goto LABEL_60;
      }
      v200[1] = (size_t)v45;
      v200[2] = v46;
      v201[0] = (size_t)v38;
      long long v47 = sub_1CD67F984(a1 + 1144, v45, v46, v201);
      if (!v48) {
        (*v47)[1] = 0;
      }
      int v42 = v45;
      size_t v37 = v46;
      if (!v35) {
        goto LABEL_46;
      }
LABEL_60:
      llvm::sampleprof::SampleProfileReaderItaniumRemapper::lookUpNameInProfile(v35, (char *)v42, v37, (uint64_t)&__s1);
      if ((_BYTE)v207)
      {
        if (*((void *)&__s1 + 1) == v37)
        {
          if (memcmp((const void *)__s1, v42, v37) && v37)
          {
LABEL_66:
            long long v199 = __s1;
            v200[0] = (size_t)v38;
            sub_1CD67F984(a1 + 1144, (unsigned __int8 *)__s1, *((size_t *)&__s1 + 1), v200);
            goto LABEL_46;
          }
        }
        else if (*((void *)&__s1 + 1))
        {
          goto LABEL_66;
        }
      }
      do
      {
LABEL_46:
        uint64_t v40 = v32[1];
        ++v32;
        uint64_t v36 = v40;
        if (v40) {
          BOOL v41 = v36 == -8;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (v41);
    }
    while (v32 != v34);
  }
  uint64_t v49 = v191 + 24;
  long long __p = 0;
  unint64_t v197 = 0;
  uint64_t v198 = 0;
  unint64_t v50 = -1;
  uint64_t v51 = v191 + 24;
  do
  {
    uint64_t v51 = *(void *)(v51 + 8);
    ++v50;
  }
  while (v51 != v49);
  sub_1CBF7ACFC((uint64_t)&__p, v50);
  if (byte_1EBCE38C0) {
    BOOL v53 = 1;
  }
  else {
    BOOL v53 = byte_1EBCE3980 == 0;
  }
  if (!v53)
  {
    unsigned int v54 = (llvm::raw_ostream *)llvm::errs(v52);
    unsigned int v55 = (void *)*((void *)v54 + 4);
    if (*((void *)v54 + 3) - (void)v55 > 0x66uLL)
    {
      qmemcpy(v55, "WARNING: -use-profiled-call-graph ignored, should be used together with -sample-profile-top-down-load.\n", 103);
      *((void *)v54 + 4) += 103;
    }
    else
    {
      llvm::raw_ostream::write(v54, "WARNING: -use-profiled-call-graph ignored, should be used together with -sample-profile-top-down-load.\n", 0x67uLL);
    }
  }
  if (a5 && byte_1EBCE38C0)
  {
    int v56 = *(unsigned __int8 *)(a1 + 1280);
    if (byte_1EBCE3980)
    {
      uint64_t v202 = 0;
      if (!v56) {
        operator new();
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 1280) || word_1EBCE3908)
      {
        uint64_t v57 = *(void *)(a5 + 80);
        LODWORD(__s1) = 0;
        uint64_t v207 = 0;
        *((void *)&__s1 + 1) = 0;
        int v208 = 0;
        long long v209 = 0u;
        long long v210 = 0u;
        long long v211 = 0u;
        long long v212 = 0u;
        uint64_t v213 = 0;
        sub_1CBFAF330((int *)&__s1, v57);
        sub_1CBFAF5D8(&__s1);
        BOOL v58 = (char *)*((void *)&v210 + 1);
        uint64_t v59 = (char *)v211;
        if (*((void *)&v210 + 1) == (void)v211) {
          goto LABEL_198;
        }
        while (1)
        {
          uint64_t v60 = *(void *)(*(void *)v58 + 8);
          if (!v60) {
            goto LABEL_129;
          }
          if (*(unsigned char *)(v60 + 16))
          {
            if (*(unsigned char *)(v60 + 16) == 3 && (*(_DWORD *)(v60 + 20) & 0x7FFFFFF) == 0) {
              goto LABEL_129;
            }
          }
          else if (*(void *)(v60 + 72) == v60 + 72 && (*(unsigned char *)(v60 + 34) & 0x80) == 0)
          {
            goto LABEL_129;
          }
          uint64_t v61 = *(void *)(v60 + 112);
          if (!v61) {
            goto LABEL_129;
          }
          if (!*(_DWORD *)(v61 + 8)) {
            goto LABEL_129;
          }
          uint64_t v62 = *(void *)(v61 + 40);
          if (!v62) {
            goto LABEL_129;
          }
          int v63 = *(_DWORD *)(v62 + 40);
          if (!v63) {
            goto LABEL_129;
          }
          uint64_t v64 = *(void *)(v62 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EBCBE588))
          {
            unint64_t v84 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v84 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v84;
            __cxa_guard_release(&qword_1EBCBE588);
          }
          uint64_t v65 = __ROR8__(qword_1EBCBE580 ^ 0x3A4251CF5CABDDE3, 30);
          unint64_t v66 = 0x9DDFEA08EB382D69
              * ((qword_1EBCBE580 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                            * ((v65 - 0x3222A10545348927) ^ (qword_1EBCBE580
                                                                                             + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v65 - 0x3222A10545348927) ^ (qword_1EBCBE580 + 0x20E38D834E0EEBC9))));
          unsigned int v67 = -348639895 * ((v66 >> 47) ^ v66);
          for (int i = 1; ; ++i)
          {
            unsigned int v69 = v67 & (v63 - 1);
            unint64_t v70 = (uint64_t *)(v64 + 24 * v69);
            uint64_t v71 = *v70;
            if (*v70 == -1)
            {
              if ("use-sample-profile" == (char *)-1) {
                goto LABEL_110;
              }
              goto LABEL_96;
            }
            if (v71 != -2) {
              break;
            }
            if ("use-sample-profile" == (char *)-2) {
              goto LABEL_110;
            }
LABEL_96:
            if (v71 == -1) {
              goto LABEL_129;
            }
            unsigned int v67 = i + v69;
          }
          if (v70[1] != 18) {
            goto LABEL_96;
          }
          BOOL v72 = *(void *)v71 == 0x706D61732D657375 && *(void *)(v71 + 8) == 0x69666F72702D656CLL;
          if (!v72 || *(_WORD *)(v71 + 16) != 25964) {
            goto LABEL_96;
          }
LABEL_110:
          unsigned int v74 = v197;
          if (v197 < v198)
          {
            *(void *)unint64_t v197 = v60;
            uint64_t v75 = v74 + 8;
            goto LABEL_128;
          }
          std::string::size_type v76 = (char *)__p;
          uint64_t v77 = (v197 - (unsigned char *)__p) >> 3;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61) {
            goto LABEL_320;
          }
          uint64_t v79 = v198 - (unsigned char *)__p;
          if ((v198 - (unsigned char *)__p) >> 2 > v78) {
            unint64_t v78 = v79 >> 2;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v192 = v78;
          if (v78)
          {
            if (!(v78 >> 61))
            {
              uint64_t v80 = (char *)operator new(8 * v78);
              goto LABEL_121;
            }
LABEL_321:
            sub_1CB833614();
          }
          uint64_t v80 = 0;
LABEL_121:
          char v81 = &v80[8 * v77];
          *(void *)char v81 = v60;
          uint64_t v75 = v81 + 8;
          if (v74 == v76)
          {
            unint64_t v82 = v192;
          }
          else
          {
            unint64_t v82 = v192;
            do
            {
              uint64_t v83 = *((void *)v74 - 1);
              v74 -= 8;
              *((void *)v81 - 1) = v83;
              v81 -= 8;
            }
            while (v74 != v76);
            unsigned int v74 = (char *)__p;
          }
          long long __p = v81;
          unint64_t v197 = v75;
          uint64_t v198 = &v80[8 * v82];
          if (v74) {
            operator delete(v74);
          }
LABEL_128:
          unint64_t v197 = v75;
LABEL_129:
          v58 += 8;
          if (v58 == v59)
          {
            sub_1CBFAF5D8(&__s1);
            BOOL v58 = (char *)*((void *)&v210 + 1);
            uint64_t v59 = (char *)v211;
            if (*((void *)&v210 + 1) == (void)v211)
            {
LABEL_198:
              if ((void)v212)
              {
                *((void *)&v212 + 1) = v212;
                operator delete((void *)v212);
                BOOL v58 = (char *)*((void *)&v210 + 1);
              }
              if (v58)
              {
                *(void *)&long long v211 = v58;
                operator delete(v58);
              }
              if ((void)v209)
              {
                *((void *)&v209 + 1) = v209;
                operator delete((void *)v209);
              }
              MEMORY[0x1D25D9CD0](*((void *)&__s1 + 1), 8);
              if (__p != v197)
              {
                uint64_t v115 = v197 - 8;
                if (__p < v197 - 8)
                {
                  long long v116 = (char *)__p + 8;
                  do
                  {
                    uint64_t v117 = *((void *)v116 - 1);
                    *((void *)v116 - 1) = *(void *)v115;
                    *(void *)uint64_t v115 = v117;
                    v115 -= 8;
                    BOOL v118 = v116 >= v115;
                    v116 += 8;
                  }
                  while (!v118);
                }
              }
              goto LABEL_209;
            }
          }
        }
      }
      uint64_t v202 = 0;
    }
    operator new();
  }
  if (byte_1EBCE3800)
  {
    LOBYTE(__s1) = 0;
    byte_1EBCE3800 = 0;
    if (!qword_1EBCE3838)
    {
      sub_1CB920400();
      __break(1u);
      JUMPOUT(0x1CC9AD118);
    }
    (*(void (**)(uint64_t, long long *))(*(void *)qword_1EBCE3838 + 48))(qword_1EBCE3838, &__s1);
  }
  uint64_t v85 = *(void *)(v191 + 32);
  if (v85 != v49)
  {
    uint64_t v86 = &llvm::hashing::detail::fixed_seed_override;
    do
    {
      if (v85) {
        uint64_t v87 = v85 - 56;
      }
      else {
        uint64_t v87 = 0;
      }
      if (v85 && *(unsigned char *)(v87 + 16) == 3)
      {
        if ((*(_DWORD *)(v87 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_192;
        }
      }
      else if (!*(unsigned char *)(v87 + 16) && *(void *)(v87 + 72) == v87 + 72 && (*(unsigned char *)(v87 + 34) & 0x80) == 0)
      {
        goto LABEL_192;
      }
      uint64_t v88 = *(void *)(v87 + 112);
      if (!v88) {
        goto LABEL_192;
      }
      if (!*(_DWORD *)(v88 + 8)) {
        goto LABEL_192;
      }
      uint64_t v89 = *(void *)(v88 + 40);
      if (!v89) {
        goto LABEL_192;
      }
      int v90 = *(_DWORD *)(v89 + 40);
      if (!v90) {
        goto LABEL_192;
      }
      uint64_t v91 = *(void *)(v89 + 24);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
      {
        int v113 = __cxa_guard_acquire(&qword_1EBCBE588);
        uint64_t v86 = &llvm::hashing::detail::fixed_seed_override;
        if (v113)
        {
          unint64_t v114 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v114 = 0xFF51AFD7ED558CCDLL;
          }
          qword_1EBCBE580 = v114;
          __cxa_guard_release(&qword_1EBCBE588);
          uint64_t v86 = &llvm::hashing::detail::fixed_seed_override;
        }
      }
      uint64_t v92 = __ROR8__(qword_1EBCBE580 ^ 0x3A4251CF5CABDDE3, 30);
      unint64_t v93 = 0x9DDFEA08EB382D69
          * ((qword_1EBCBE580 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                        * ((v92 - 0x3222A10545348927) ^ (qword_1EBCBE580
                                                                                         + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v92 - 0x3222A10545348927) ^ (qword_1EBCBE580 + 0x20E38D834E0EEBC9))));
      unsigned int v94 = -348639895 * ((v93 >> 47) ^ v93);
      for (int j = 1; ; ++j)
      {
        unsigned int v96 = v94 & (v90 - 1);
        int v97 = (uint64_t *)(v91 + 24 * v96);
        uint64_t v98 = *v97;
        if (*v97 == -1)
        {
          if ("use-sample-profile" == (char *)-1) {
            goto LABEL_173;
          }
          goto LABEL_159;
        }
        if (v98 != -2) {
          break;
        }
        if ("use-sample-profile" == (char *)-2) {
          goto LABEL_173;
        }
LABEL_159:
        if (v98 == -1) {
          goto LABEL_192;
        }
        unsigned int v94 = j + v96;
      }
      if (v97[1] != 18) {
        goto LABEL_159;
      }
      BOOL v99 = *(void *)v98 == 0x706D61732D657375 && *(void *)(v98 + 8) == 0x69666F72702D656CLL;
      if (!v99 || *(_WORD *)(v98 + 16) != 25964) {
        goto LABEL_159;
      }
LABEL_173:
      uint64_t v101 = v197;
      if (v197 >= v198)
      {
        int v103 = (char *)__p;
        uint64_t v104 = (v197 - (unsigned char *)__p) >> 3;
        unint64_t v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 61) {
LABEL_320:
        }
          abort();
        uint64_t v106 = v198 - (unsigned char *)__p;
        if ((v198 - (unsigned char *)__p) >> 2 > v105) {
          unint64_t v105 = v106 >> 2;
        }
        if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v193 = v105;
        if (v105)
        {
          if (v105 >> 61) {
            goto LABEL_321;
          }
          unint64_t v107 = (char *)operator new(8 * v105);
          uint64_t v86 = &llvm::hashing::detail::fixed_seed_override;
        }
        else
        {
          unint64_t v107 = 0;
        }
        uint64_t v108 = &v107[8 * v104];
        *(void *)uint64_t v108 = v87;
        unint64_t v102 = v108 + 8;
        if (v101 == v103)
        {
          unint64_t v109 = v193;
        }
        else
        {
          unint64_t v109 = v193;
          do
          {
            uint64_t v110 = *((void *)v101 - 1);
            v101 -= 8;
            *((void *)v108 - 1) = v110;
            v108 -= 8;
          }
          while (v101 != v103);
          uint64_t v101 = (char *)__p;
        }
        long long __p = v108;
        unint64_t v197 = v102;
        uint64_t v198 = &v107[8 * v109];
        if (v101)
        {
          uint64_t v111 = v101;
          uint64_t v112 = v86;
          operator delete(v111);
          uint64_t v86 = v112;
        }
      }
      else
      {
        *(void *)unint64_t v197 = v87;
        unint64_t v102 = v101 + 8;
      }
      unint64_t v197 = v102;
LABEL_192:
      uint64_t v85 = *(void *)(v85 + 8);
    }
    while (v85 != v49);
  }
LABEL_209:
  if (__p != v197)
  {
    uint64_t v119 = a1;
    int v120 = *(llvm::Value **)__p;
    sub_1CD67F820(a1);
    sub_1CD3C7F68((_DWORD *)(a1 + 8));
    int v121 = byte_1EBCE3740;
    if (byte_1EBCE3740) {
      int v121 = *(void *)(a1 + 1288) != 0;
    }
    *(unsigned char *)(a1 + 1384) = v121;
    uint64_t v189 = v120;
    if (byte_1EBCE35C0)
    {
LABEL_235:
      unint64_t v135 = 0;
      *(unsigned char *)(a1 + 1384) = 0;
      *(unsigned char *)(a1 + 1048) = 0;
    }
    else
    {
      uint64_t v122 = *((void *)v120 + 14);
      if (v122)
      {
        if (*(_DWORD *)(v122 + 8))
        {
          uint64_t v123 = *(void *)(v122 + 40);
          if (v123)
          {
            int v124 = *(_DWORD *)(v123 + 40);
            if (v124)
            {
              uint64_t v125 = *(void *)(v123 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v175 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v175 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v175;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              uint64_t v126 = __ROR8__(qword_1EBCBE580 ^ 0x2285082CC813EAEFLL, 30);
              unint64_t v127 = 0x9DDFEA08EB382D69
                   * ((qword_1EBCBE580 - 0x6B0D9FCD0C2AF079) ^ ((0x9DDFEA08EB382D69
                                                                 * ((v126 - 0x5C7E2870F3C8162ELL) ^ (qword_1EBCBE580 - 0x6B0D9FCD0C2AF079))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v126 - 0x5C7E2870F3C8162ELL) ^ (qword_1EBCBE580 - 0x6B0D9FCD0C2AF079))));
              unsigned int v128 = -348639895 * ((v127 >> 47) ^ v127);
              for (int k = 1; ; ++k)
              {
                unsigned int v130 = v128 & (v124 - 1);
                uint64_t v131 = v125 + 24 * v130;
                uint64_t v132 = *(void **)v131;
                if (*(void *)v131 == -1)
                {
                  if ("profile-sample-accurate" == (char *)-1) {
                    goto LABEL_235;
                  }
                }
                else if (v132 == (void *)-2)
                {
                  if ("profile-sample-accurate" == (char *)-2) {
                    goto LABEL_235;
                  }
                }
                else if (*(void *)(v131 + 8) == 23)
                {
                  BOOL v133 = *v132 == 0x2D656C69666F7270 && v132[1] == 0x612D656C706D6173;
                  if (v133 && *(void *)((char *)v132 + 15) == 0x6574617275636361) {
                    goto LABEL_235;
                  }
                }
                if (v132 == (void *)-1) {
                  break;
                }
                unsigned int v128 = k + v130;
              }
              int v121 = *(unsigned __int8 *)(a1 + 1384);
            }
          }
        }
      }
      *(unsigned char *)(a1 + 1048) = v121;
      if (v121)
      {
        if ((*((unsigned char *)v120 + 23) & 0x10) != 0)
        {
          uint64_t v136 = ***(void ***)v120;
          uint64_t v137 = *(void *)(v136 + 152);
          uint64_t v138 = *(unsigned int *)(v136 + 168);
          if (v138)
          {
            LODWORD(v139) = (v138 - 1) & ((v120 >> 4) ^ (v120 >> 9));
            uint64_t v140 = (llvm::Value **)(v137 + 16 * v139);
            unint64_t v141 = *v140;
            if (*v140 != v120)
            {
              int v142 = 1;
              do
              {
                if (v141 == (llvm::Value *)-4096) {
                  goto LABEL_246;
                }
                int v143 = v139 + v142++;
                uint64_t v139 = v143 & (v138 - 1);
                unint64_t v141 = *(llvm::Value **)(v137 + 16 * v139);
              }
              while (v141 != v120);
              uint64_t v140 = (llvm::Value **)(v137 + 16 * v139);
            }
          }
          else
          {
LABEL_246:
            uint64_t v140 = (llvm::Value **)(v137 + 16 * v138);
          }
          unint64_t v144 = v140[1];
          size_t v147 = *(void *)v144;
          uint64_t v145 = (char *)v144 + 16;
          size_t v146 = v147;
        }
        else
        {
          size_t v146 = 0;
          uint64_t v145 = &byte_1CFBCE98E;
        }
        uint64_t v148 = *(void *)(a1 + 1288);
        int v149 = *(_DWORD *)(v148 + 24);
        if (v149)
        {
          uint64_t v150 = *(void *)(v148 + 8);
          int v151 = sub_1CD0B03C8(v145, (uint64_t)&v145[v146]);
          unsigned int v152 = v149 - 1;
          for (int m = 1; ; ++m)
          {
            int v154 = v151 & v152;
            uint64_t v155 = v150 + 16 * (v151 & v152);
            unint64_t v156 = *(const void **)v155;
            if (*(void *)v155 == -1)
            {
              if (v145 == (char *)-1) {
                goto LABEL_260;
              }
            }
            else if (v156 == (const void *)-2)
            {
              if (v145 == (char *)-2) {
                goto LABEL_260;
              }
            }
            else if (v146 == *(void *)(v155 + 8) && (!v146 || !memcmp(v145, v156, v146)))
            {
LABEL_260:
              uint64_t v194 = 0;
              goto LABEL_262;
            }
            if (v156 == (const void *)-1) {
              break;
            }
            int v151 = m + v154;
          }
          uint64_t v194 = -1;
LABEL_262:
          uint64_t v119 = a1;
          int v120 = v189;
        }
        else
        {
          uint64_t v194 = -1;
        }
        uint64_t v157 = sub_1CD553864(v120);
        uint64_t v159 = *(unsigned int *)(v119 + 1360);
        if (v159)
        {
          uint64_t v160 = (const void *)v157;
          int v161 = 0;
          size_t v162 = v158;
          if (v158)
          {
            size_t v163 = v158;
            unsigned int v164 = (unsigned __int8 *)v157;
            do
            {
              int v165 = *v164++;
              int v161 = 33 * v161 + v165;
              --v163;
            }
            while (v163);
          }
          unsigned int v166 = v159 - 1;
          uint64_t v167 = *(void *)(v119 + 1352);
          *(void *)unint64_t v190 = *(unsigned int *)(v119 + 1360);
          uint64_t v168 = v167 + 8 * v159 + 8;
          int v169 = 1;
          int v170 = v161;
          while (1)
          {
            uint64_t v171 = v170 & v166;
            uint64_t v172 = *(void **)(v167 + 8 * v171);
            if (v172 != (void *)-8)
            {
              if (!v172)
              {
                uint64_t v173 = *(void *)v190;
                uint64_t v174 = *(void *)v190;
                goto LABEL_276;
              }
              if (*(_DWORD *)(v168 + 4 * v171) == v161
                && v162 == *v172
                && (!v162 || !memcmp(v160, (char *)v172 + *(unsigned int *)(a1 + 1372), v162)))
              {
                break;
              }
            }
            int v170 = v169 + v171;
            ++v169;
          }
          uint64_t v174 = (int)v171;
          uint64_t v173 = *(void *)v190;
          if (v171 == -1) {
            uint64_t v174 = *(void *)v190;
          }
        }
        else
        {
          uint64_t v173 = 0;
          uint64_t v174 = 0;
        }
LABEL_276:
        if (v174 == v173) {
          unint64_t v135 = v194;
        }
        else {
          unint64_t v135 = -1;
        }
        int v120 = v189;
      }
      else
      {
        unint64_t v135 = -1;
      }
    }
    llvm::Function::getEntryCount((uint64_t ***)v120, 0, (uint64_t)&__s1);
    if (!(_BYTE)v207) {
      llvm::Function::setEntryCount(v120, v135, 0, 0);
    }
    v201[1] = 0;
    if (!a3) {
      operator new();
    }
    llvm::AnalysisManager<llvm::Module>::getResultImpl();
  }
  if (__p)
  {
    unint64_t v197 = (char *)__p;
    operator delete(__p);
  }
  if (!*(unsigned char *)(a1 + 1280))
  {
    uint64_t v177 = *(void *)(a1 + 1304);
    uint64_t v178 = *(unsigned int *)(a1 + 1320);
    uint64_t v179 = (uint64_t *)(v177 + 16 * v178);
    if (*(_DWORD *)(a1 + 1312))
    {
      if (v178)
      {
        uint64_t v180 = 16 * v178;
        uint64_t v181 = *(uint64_t **)(a1 + 1304);
        while ((*v181 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v181 += 2;
          v180 -= 16;
          if (!v180) {
            goto LABEL_306;
          }
        }
      }
      else
      {
        uint64_t v181 = *(uint64_t **)(a1 + 1304);
      }
    }
    else
    {
LABEL_306:
      uint64_t v181 = (uint64_t *)(v177 + 16 * v178);
    }
    uint64_t v182 = (uint64_t *)(v177 + 16 * v178);
LABEL_309:
    while (v181 != v182)
    {
      llvm::updateProfileCallee(*v181, v181[1], 0);
      uint64_t v183 = v181 + 2;
      uint64_t v181 = v179;
      if (v183 != v179)
      {
        uint64_t v181 = v183;
        while ((*v181 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v181 += 2;
          if (v181 == v179)
          {
            uint64_t v181 = v179;
            goto LABEL_309;
          }
        }
      }
    }
  }
  if (((unsigned int (*)(void **))(*v186)[9])(v186))
  {
    sub_1CD68350C(v185);
    sub_1CC9AE854(v186[3], 0);
  }
  return 0;
}

uint64_t sub_1CC9AD1C8(void *a1)
{
  uint64_t v2 = (void *)a1[175];
  a1[175] = 0;
  if (v2)
  {
    MEMORY[0x1D25D9CD0](*v2, 8);
    MEMORY[0x1D25D9CE0](v2, 0x1020C405AF6BDC9);
  }
  uint64_t v3 = a1[174];
  a1[174] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1CC0D7CD8((uint64_t)(a1 + 169));
  MEMORY[0x1D25D9CD0](a1[166], 8);
  MEMORY[0x1D25D9CD0](a1[163], 8);
  uint64_t v4 = a1[161];
  a1[161] = 0;
  if (v4)
  {
    uint64_t v5 = sub_1CD67F760(v4);
    MEMORY[0x1D25D9CE0](v5, 0x10B0C408C61162ELL);
  }
  sub_1CC9AE7EC(a1 + 159, 0);
  unint64_t v6 = (void *)a1[158];
  if (v6 == a1 + 155)
  {
    (*(void (**)(void *))(a1[155] + 32))(a1 + 155);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  uint64_t v7 = (void *)a1[154];
  if (v7 == a1 + 151)
  {
    (*(void (**)(void *))(a1[151] + 32))(a1 + 151);
  }
  else if (v7)
  {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  uint64_t v8 = (void *)a1[150];
  if (v8 == a1 + 147)
  {
    (*(void (**)(void *))(a1[147] + 32))(a1 + 147);
  }
  else if (v8)
  {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
  sub_1CD4AFD10((uint64_t)(a1 + 143));

  return sub_1CD683610((uint64_t)a1);
}

void sub_1CC9AD3E0()
{
}

void sub_1CC9AD444(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262A778;
  sub_1CC9AD1C8((void *)a1 + 4);

  llvm::Pass::~Pass(a1);
}

void sub_1CC9AD498(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F262A778;
  sub_1CC9AD1C8((void *)a1 + 4);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC9AD500()
{
  return "Sample profile pass";
}

uint64_t sub_1CC9AD510(uint64_t a1, const llvm::MemoryBuffer **a2)
{
  return sub_1CC9A7FC4(a1 + 32, a2, 0);
}

void sub_1CC9AD51C(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
}

uint64_t sub_1CC9AD594(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::AssumptionCacheTracker::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  a1[180] = (*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::AssumptionCacheTracker::ID);
  uint64_t v8 = (uint64_t *)a1[1];
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(char **)v9 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  a1[181] = (*(uint64_t (**)(uint64_t, char *))(*(void *)v11 + 96))(v11, llvm::TargetTransformInfoWrapperPass::ID);
  uint64_t v12 = (uint64_t *)a1[1];
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (v13 == v14)
  {
LABEL_14:
    uint64_t v15 = 0;
  }
  else
  {
    while (*(char **)v13 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = *(void *)(v13 + 8);
  }
  a1[182] = (*(uint64_t (**)(uint64_t, char *))(*(void *)v15 + 96))(v15, llvm::TargetLibraryInfoWrapperPass::ID);
  int v16 = (uint64_t *)a1[1];
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v17 == v18)
  {
LABEL_19:
    uint64_t v19 = 0;
  }
  else
  {
    while (*(char **)v17 != llvm::ProfileSummaryInfoWrapperPass::ID)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_19;
      }
    }
    uint64_t v19 = *(void *)(v17 + 8);
  }
  uint64_t v20 = *(void *)((*(uint64_t (**)(uint64_t, char *))(*(void *)v19 + 96))(v19, llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);

  return sub_1CC9A8864((uint64_t)(a1 + 4), a2, 0, v20, 0);
}

void sub_1CC9AD78C()
{
}

void *sub_1CC9AD7A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F262A818;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC9AD7E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262A818;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC9AD814(uint64_t a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(*(llvm::AssumptionCacheTracker **)(*(void *)(a1 + 8) + 1440), a2);
}

void sub_1CC9AD824()
{
}

void *sub_1CC9AD838(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F262A860;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC9AD880(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262A860;
  a2[1] = v2;
  return result;
}

uint64_t *sub_1CC9AD8AC(uint64_t a1, const Function *a2)
{
  return llvm::TargetTransformInfoWrapperPass::getTTI(*(llvm::TargetTransformInfoWrapperPass **)(*(void *)(a1 + 8) + 1448), a2);
}

void sub_1CC9AD8BC()
{
}

void *sub_1CC9AD8D0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F262A8A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC9AD918(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262A8A8;
  a2[1] = v2;
  return result;
}

void sub_1CC9AD944(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 1456);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  if (!*(unsigned char *)(v2 + 232))
  {
    uint64_t v3 = *(void *)(a2 + 40) + 216;
    __int16 v15 = 260;
    v14[0] = v3;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v14);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(void *)&long long v4 = -1;
    *((void *)&v4 + 1) = -1;
    *(_OWORD *)__src = v4;
    long long v19 = v4;
    long long v20 = v4;
    long long v21 = v4;
    long long v22 = v4;
    long long v23 = v4;
    *(_OWORD *)size_t v24 = v4;
    *(void *)&v24[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v2 + 32, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v2 + 32);
}

void sub_1CC9ADC04(llvm *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  v46[34] = *MEMORY[0x1E4F143B8];
  if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
  {
    llvm::extractProbe(this, (uint64_t)v25);
    if (v27)
    {
      uint64_t v6 = sub_1CC9AE140(a2, this);
      if (v6)
      {
        if ((int v7 = (const std::error_category *)v6, *(unsigned char *)(a2 + 1280))
          || (unsigned int v8 = *((unsigned __int8 *)this + 16) - 33, v8 > 0x33)
          || ((1 << v8) & 0x8000000000041) == 0
          || ((unsigned int v9 = *(unsigned __int8 *)(*((void *)this - 4) + 16), v9 >= 0x15) ? (v10 = v9 == 24) : (v10 = 1),
              !v10 || !sub_1CC9AE674(a2, this)))
        {
          unsigned int v11 = v25[0];
          sub_1CD555FF8(v7, v25[0], 0, (uint64_t)v41);
          if (v42)
          {
            *(unsigned char *)(a3 + 16) |= 1u;
            unint64_t v12 = v41[1];
            *(void *)a3 = v41[0];
            *(void *)(a3 + 8) = v12;
          }
          else
          {
            float v18 = v26;
            unint64_t v19 = (unint64_t)(float)(v26 * (float)v41[0]);
            if (llvm::sampleprofutil::SampleCoverageTracker::markSamplesUsed((llvm::sampleprofutil::SampleCoverageTracker *)(a2 + 1016), (const llvm::sampleprof::FunctionSamples *)v7, v11, 0, v19))
            {
              long long v20 = *(uint64_t ****)(a2 + 1136);
              uint64_t v21 = *(void *)***v20;
              if (*(void *)(v21 + 128)
                || (*(unsigned int (**)(void))(**(void **)(v21 + 72) + 48))(*(void *)(v21 + 72)))
              {
                llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)v43, (uint64_t)"sample-profile", (uint64_t)"AppliedSamples", 14, (uint64_t)this);
                v37.__r_.__value_.__r.__words[0] = (std::string::size_type)"Applied ";
                v37.__r_.__value_.__l.__size_ = 8;
                sub_1CC59ADEC((uint64_t *)&v44, (uint64_t)&v37);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v37, "NumSamples", 0xAuLL, v19);
                sub_1CD3D6290((uint64_t)v43, (long long *)&v37);
                if (v39 < 0) {
                  operator delete(v38);
                }
                if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v37.__r_.__value_.__l.__data_);
                }
                v34.__r_.__value_.__r.__words[0] = (std::string::size_type)" samples from profile (ProbeId=";
                v34.__r_.__value_.__l.__size_ = 31;
                sub_1CC59ADEC((uint64_t *)&v44, (uint64_t)&v34);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v34, "ProbeId", 7uLL, v11);
                sub_1CD3D6290((uint64_t)v43, (long long *)&v34);
                if (v36 < 0) {
                  operator delete(v35);
                }
                if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v34.__r_.__value_.__l.__data_);
                }
                v31.__r_.__value_.__r.__words[0] = (std::string::size_type)", Factor=";
                v31.__r_.__value_.__l.__size_ = 9;
                sub_1CC59ADEC((uint64_t *)&v44, (uint64_t)&v31);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v31, "Factor", 6uLL, v18);
                sub_1CD3D6290((uint64_t)v43, (long long *)&v31);
                if (v33 < 0) {
                  operator delete(__p);
                }
                if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v31.__r_.__value_.__l.__data_);
                }
                v28.__r_.__value_.__r.__words[0] = (std::string::size_type)", OriginalSamples=";
                v28.__r_.__value_.__l.__size_ = 18;
                sub_1CC59ADEC((uint64_t *)&v44, (uint64_t)&v28);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v28, "OriginalSamples", 0xFuLL, v41[0]);
                sub_1CD3D6290((uint64_t)v43, (long long *)&v28);
                if (v30 < 0) {
                  operator delete(v29);
                }
                if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v28.__r_.__value_.__l.__data_);
                }
                v40[0] = ")";
                v40[1] = 1;
                sub_1CC59ADEC((uint64_t *)&v44, (uint64_t)v40);
                llvm::OptimizationRemarkEmitter::emit(v20, (llvm::DiagnosticInfoOptimizationBase *)v43);
                v43[0] = &unk_1F2616800;
                long long v22 = v44;
                if (v45)
                {
                  unint64_t v23 = (unint64_t)v45 << 6;
                  do
                  {
                    size_t v24 = (void **)&v22[v23];
                    if (v22[v23 - 17] < 0) {
                      operator delete(*(v24 - 5));
                    }
                    if (*((char *)v24 - 41) < 0) {
                      operator delete(*(v24 - 8));
                    }
                    v23 -= 64;
                  }
                  while (v23);
                  long long v22 = v44;
                }
                if (v22 != (char *)v46) {
                  free(v22);
                }
              }
            }
            *(unsigned char *)(a3 + 16) &= ~1u;
            *(void *)a3 = v19;
          }
          return;
        }
      }
LABEL_29:
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = 0;
      return;
    }
LABEL_30:
    char v17 = std::system_category();
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = v17;
    return;
  }
  if (!*((void *)this + 6)) {
    goto LABEL_30;
  }
  int v13 = *((unsigned __int8 *)this + 16);
  switch(v13)
  {
    case 30:
      goto LABEL_30;
    case 83:
      goto LABEL_30;
    case 84:
      uint64_t v14 = *((void *)this - 4);
      if (v14)
      {
        if (!*(unsigned char *)(v14 + 16)
          && *(void *)(v14 + 24) == *((void *)this + 9)
          && (*(unsigned char *)(v14 + 33) & 0x20) != 0)
        {
          goto LABEL_30;
        }
      }
      break;
  }
  if (!*(unsigned char *)(a2 + 1280))
  {
    unsigned int v15 = v13 - 33;
    if (v15 <= 0x33 && ((1 << v15) & 0x8000000000041) != 0)
    {
      unsigned int v16 = *(unsigned __int8 *)(*((void *)this - 4) + 16);
      if (v16 < 0x15 || v16 == 24)
      {
        if (sub_1CC9AE674(a2, this)) {
          goto LABEL_29;
        }
      }
    }
  }

  sub_1CD67F528(a3, (void *)a2, (uint64_t)this);
}

uint64_t sub_1CC9AE140(uint64_t a1, llvm *this)
{
  if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
  {
    llvm::extractProbe(this, (uint64_t)v5);
    if (!v6) {
      return 0;
    }
  }
  int v7 = (llvm::sampleprof::FunctionSamples *)*((void *)this + 6);
  if (!v7) {
    return *(void *)(a1 + 1064);
  }
  sub_1CD5563B4(a1 + 8, &v7, (uint64_t)v5);
  if (!v6) {
    return *(void *)(v5[0] + 8);
  }
  if (*(unsigned char *)(a1 + 1280)) {
    uint64_t result = (uint64_t)llvm::SampleContextTracker::getContextSamplesFor(*(llvm::SampleContextTracker **)(a1 + 1272), v7);
  }
  else {
    uint64_t result = llvm::sampleprof::FunctionSamples::findFunctionSamples(*(void *)(a1 + 1064), v7, *(void *)(*(void *)(a1 + 1056) + 112));
  }
  *(void *)(v5[0] + 8) = result;
  return result;
}

void sub_1CC9AE208(uint64_t ***a1, uint64_t a2)
{
  v41[34] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)***a1;
  if (*(void *)(v4 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v4 + 72) + 48))(*(void *)(v4 + 72)))
  {
    llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v31, (uint64_t)"sample-profile-impl", (uint64_t)"AppliedSamples", 14, *(void *)a2);
    uint64_t v21 = "Applied ";
    uint64_t v22 = 8;
    sub_1CC59ADEC((uint64_t *)&v39, (uint64_t)&v21);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v18, "NumSamples", 0xAuLL, **(void **)(a2 + 8));
    sub_1CD3D6290((uint64_t)&v31, (long long *)&v18);
    if (v20 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = " samples from profile (offset: ";
    uint64_t v22 = 31;
    sub_1CC59ADEC((uint64_t *)&v39, (uint64_t)&v21);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v15, "LineOffset", 0xAuLL, **(_DWORD **)(a2 + 16));
    sub_1CD3D6290((uint64_t)&v31, (long long *)&v15);
    if (v17 < 0) {
      operator delete(v16);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (**(_DWORD **)(a2 + 24))
    {
      uint64_t v21 = ".";
      uint64_t v22 = 1;
      sub_1CC59ADEC((uint64_t *)&v39, (uint64_t)&v21);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v12, "Discriminator", 0xDuLL, **(_DWORD **)(a2 + 24));
      sub_1CD3D6290((uint64_t)&v31, (long long *)&v12);
      if (v14 < 0) {
        operator delete(v13);
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v21 = ")";
    uint64_t v22 = 1;
    sub_1CC59ADEC((uint64_t *)&v39, (uint64_t)&v21);
    LODWORD(v22) = v32;
    BYTE4(v22) = v33;
    long long v23 = v34;
    uint64_t v24 = v35;
    long long v25 = v36;
    long long v26 = v37;
    uint64_t v21 = (const char *)&unk_1F2616800;
    uint64_t v27 = v38;
    std::string v28 = v30;
    uint64_t v29 = 0x400000000;
    unsigned int v5 = v40;
    if (v40)
    {
      sub_1CD5560B4((uint64_t)&v28, (uint64_t)&v39);
      unsigned int v5 = v40;
    }
    v30[32] = v41[32];
    v30[33] = v41[33];
    uint64_t v21 = (const char *)&unk_1F26165E0;
    std::string v31 = &unk_1F2616800;
    char v6 = (char *)v39;
    if (v5)
    {
      unint64_t v7 = (unint64_t)v5 << 6;
      do
      {
        unsigned int v8 = (void **)&v6[v7];
        if (v6[v7 - 17] < 0) {
          operator delete(*(v8 - 5));
        }
        if (*((char *)v8 - 41) < 0) {
          operator delete(*(v8 - 8));
        }
        v7 -= 64;
      }
      while (v7);
      char v6 = (char *)v39;
    }
    if (v6 != (char *)v41) {
      free(v6);
    }
    llvm::OptimizationRemarkEmitter::emit(a1, (llvm::DiagnosticInfoOptimizationBase *)&v21);
    uint64_t v21 = (const char *)&unk_1F2616800;
    unsigned int v9 = (char *)v28;
    if (v29)
    {
      unint64_t v10 = (unint64_t)v29 << 6;
      do
      {
        unsigned int v11 = (void **)&v9[v10];
        if (v9[v10 - 17] < 0) {
          operator delete(*(v11 - 5));
        }
        if (*((char *)v11 - 41) < 0) {
          operator delete(*(v11 - 8));
        }
        v10 -= 64;
      }
      while (v10);
      unsigned int v9 = (char *)v28;
    }
    if (v9 != (char *)v30) {
      free(v9);
    }
  }
}

_DWORD *sub_1CC9AE5D8(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(24 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 24 * v5;
      do
      {
        *(void *)uint64_t result = -1;
        result += 6;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void *sub_1CC9AE674(uint64_t a1, llvm *a2)
{
  uint64_t v2 = (llvm::sampleprof::FunctionSamples *)*((void *)a2 + 6);
  if (!v2) {
    return 0;
  }
  unint64_t v4 = (uint64_t ***)*((void *)a2 - 4);
  if (!v4 || *((unsigned char *)v4 + 16) || v4[3] != *((uint64_t ***)a2 + 9))
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  if ((*((unsigned char *)v4 + 23) & 0x10) != 0)
  {
    uint64_t v9 = ***v4;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      int v13 = (uint64_t ****)(v10 + 16 * v12);
      char v14 = *v13;
      if (*v13 == v4)
      {
LABEL_22:
        std::string v18 = v13[1];
        unint64_t v19 = (unint64_t)*v18;
        uint64_t v6 = (char *)(v18 + 2);
        unint64_t v5 = v19;
        goto LABEL_6;
      }
      int v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        char v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == v4)
        {
          int v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_22;
        }
      }
    }
    int v13 = (uint64_t ****)(v10 + 16 * v11);
    goto LABEL_22;
  }
  unint64_t v5 = 0;
  uint64_t v6 = &byte_1CFBCE98E;
LABEL_6:
  if (*(unsigned char *)(a1 + 1280))
  {
    char v17 = *(llvm::SampleContextTracker **)(a1 + 1272);
    return (void *)llvm::SampleContextTracker::getCalleeContextSamplesFor(v17, (uint64_t)a2, (uint64_t)v6, v5);
  }
  else
  {
    uint64_t result = (void *)sub_1CC9AE140(a1, a2);
    if (result)
    {
      uint64_t v8 = (uint64_t)result;
      unint64_t v20 = llvm::sampleprof::FunctionSamples::getCallSiteIdentifier(v2, 0);
      return llvm::sampleprof::FunctionSamples::findFunctionSamplesAt(v8, (unsigned int *)&v20, (uint64_t)v6, v5, *(void *)(*(void *)(a1 + 1056) + 112));
    }
  }
  return result;
}

uint64_t *sub_1CC9AE7EC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_1CD67E3C0(v2 + 40, *(void **)(v2 + 48));
    sub_1CD67F798(v2);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void sub_1CC9AE854(void *a1, uint64_t a2)
{
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)long long __p = 0u;
  if (a1)
  {
    unint64_t v3 = a1;
    do
    {
      int v16 = v3 + 7;
      sub_1CD45F140(__p, &v16);
      unint64_t v3 = (void *)*v3;
    }
    while (v3);
    while (*((void *)&v19 + 1))
    {
      unint64_t v4 = *(void **)(*(void *)((char *)__p[1] + (((unint64_t)v19 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v19 & 0x1FF));
      *(void *)&long long v19 = v19 + 1;
      --*((void *)&v19 + 1);
      if ((unint64_t)v19 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = (char *)__p[1] + 8;
        *(void *)&long long v19 = v19 - 512;
      }
      void *v4 = a2;
      unint64_t v5 = (void *)v4[12];
      uint64_t v6 = v4 + 13;
      if (v5 != v6)
      {
        do
        {
          unint64_t v7 = (void *)v5[5];
          if (v7 != v5 + 6)
          {
            do
            {
              int v16 = v7 + 7;
              sub_1CD45F140(__p, &v16);
              uint64_t v8 = (void *)v7[1];
              if (v8)
              {
                do
                {
                  uint64_t v9 = v8;
                  uint64_t v8 = (void *)*v8;
                }
                while (v8);
              }
              else
              {
                do
                {
                  uint64_t v9 = (void *)v7[2];
                  BOOL v10 = *v9 == (void)v7;
                  unint64_t v7 = v9;
                }
                while (!v10);
              }
              unint64_t v7 = v9;
            }
            while (v9 != v5 + 6);
          }
          uint64_t v11 = (void *)v5[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v5[2];
              BOOL v10 = *v12 == (void)v5;
              unint64_t v5 = v12;
            }
            while (!v10);
          }
          unint64_t v5 = v12;
        }
        while (v12 != v6);
      }
    }
  }
  sub_1CD3F260C(__p);
  int v13 = (void **)__p[1];
  char v14 = (void **)v18;
  if (__p[1] != (void *)v18)
  {
    do
    {
      int v15 = *v13++;
      operator delete(v15);
    }
    while (v13 != v14);
    if ((void *)v18 != __p[1]) {
      *(void *)&long long v18 = v18 + (((unint64_t)__p[1] - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

uint64_t *sub_1CC9AEA10(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_1CD680258(v2 + 40);
    sub_1CD40B1BC(*(void **)(v2 + 24));
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

char *sub_1CC9AEA78(void **a1, uint64_t a2)
{
  unint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  BOOL v10 = &v9[24 * v4];
  *(_OWORD *)BOOL v10 = *(_OWORD *)a2;
  *((void *)v10 + 2) = *(void *)(a2 + 16);
  uint64_t v11 = v10 + 24;
  if (v2 != v3)
  {
    do
    {
      long long v12 = *(_OWORD *)(v2 - 24);
      *((_DWORD *)v10 - 2) = *((_DWORD *)v2 - 2);
      *(_OWORD *)(v10 - 24) = v12;
      v10 -= 24;
      v2 -= 24;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[24 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v11;
}

void *sub_1CC9AEB94(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (int i = *v11; i; int i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  int i = operator new(0x28uLL);
  *int i = 0;
  i[1] = v8;
  uint64_t v14 = *a3;
  i[3] = i + 3;
  i[4] = 0x100000000;
  i[2] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_56;
    }
    if (prime < v9)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v9) {
LABEL_56:
      }
        sub_1CD3F1760(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  long long v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *int i = *v25;
LABEL_53:
    *long long v25 = i;
    goto LABEL_54;
  }
  *int i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    long long v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_53;
  }
LABEL_54:
  ++*(void *)(a1 + 24);
  return i;
}

BOOL sub_1CC9AEE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 16) == 84)
  {
    uint64_t v6 = *(void *)(a3 - 32);
    if (v6)
    {
      if (!*(unsigned char *)(v6 + 16) && *(void *)(v6 + 24) == *(void *)(a3 + 72) && (*(unsigned char *)(v6 + 33) & 0x20) != 0) {
        return 0;
      }
    }
  }
  unint64_t v7 = sub_1CC9AE674(a1, (llvm *)a3);
  if (v7 || (BOOL result = sub_1CC9B1170(*(void *)(a1 + 1392), a3)))
  {
    llvm::extractProbe((llvm *)a3, (uint64_t)v11);
    if (v13) {
      float v9 = v12;
    }
    else {
      float v9 = 1.0;
    }
    if (v7) {
      unint64_t v10 = (unint64_t)(float)(v9 * (float)sub_1CD67FB9C(v7));
    }
    else {
      unint64_t v10 = 0;
    }
    *(void *)a2 = a3;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v10;
    BOOL result = 1;
    *(float *)(a2 + 24) = v9;
  }
  return result;
}

void sub_1CC9AEF64(unint64_t *a1, uint64_t a2, llvm *this, void *a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (const llvm::DILocation *)*((void *)this + 6);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v4)
  {
    if (*(unsigned char *)(a2 + 1280))
    {
      llvm::SampleContextTracker::getIndirectCalleeContextSamplesFor(*(llvm::SampleContextTracker **)(a2 + 1272), v4, &v61);
      unint64_t v7 = v61;
      unint64_t v8 = v62;
      if (v61 != v62)
      {
        float v9 = 0;
        *a4 = 0;
        do
        {
          uint64_t v10 = *(void *)v7;
          *a4 += sub_1CD67FB9C(*(void **)v7);
          unint64_t v11 = a1[2];
          if ((unint64_t)v9 >= v11)
          {
            float v12 = (void *)*a1;
            uint64_t v13 = (uint64_t)((uint64_t)v9 - *a1) >> 3;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 61) {
              goto LABEL_99;
            }
            uint64_t v15 = v11 - (void)v12;
            if (v15 >> 2 > v14) {
              unint64_t v14 = v15 >> 2;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v14;
            }
            if (v16)
            {
              if (v16 >> 61) {
                goto LABEL_100;
              }
              BOOL v17 = (char *)operator new(8 * v16);
            }
            else
            {
              BOOL v17 = 0;
            }
            unint64_t v18 = &v17[8 * v13];
            *(void *)unint64_t v18 = v10;
            unint64_t v19 = v18 + 8;
            if (v9 != v12)
            {
              do
              {
                uint64_t v20 = *--v9;
                *((void *)v18 - 1) = v20;
                v18 -= 8;
              }
              while (v9 != v12);
              float v9 = (void *)*a1;
            }
            *a1 = (unint64_t)v18;
            a1[1] = (unint64_t)v19;
            a1[2] = (unint64_t)&v17[8 * v16];
            if (v9) {
              operator delete(v9);
            }
            float v9 = v19;
          }
          else
          {
            *v9++ = v10;
          }
          a1[1] = (unint64_t)v9;
          v7 += 8;
        }
        while (v7 != v8);
        unint64_t v21 = 126 - 2 * __clz((uint64_t)((uint64_t)v9 - *a1) >> 3);
        if (v9 == (void *)*a1) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = v21;
        }
        sub_1CC9B14B4(*a1, (char *)v9, v22, 1);
        unint64_t v7 = v61;
      }
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      uint64_t v23 = sub_1CC9AE140(a2, this);
      if (v23)
      {
        uint64_t v24 = v23;
        unint64_t v25 = llvm::sampleprof::FunctionSamples::getCallSiteIdentifier(v4, 0);
        unsigned int v26 = v25;
        unint64_t v27 = HIDWORD(v25);
        sub_1CD67FCA4((uint64_t)&v61, v24, v25, HIDWORD(v25));
        *a4 = 0;
        char v28 = v63;
        if ((v63 & 1) == 0)
        {
          if (v62)
          {
            for (int i = v61; ; i += 8)
            {
              BOOL v30 = !*(void *)i || *(void *)i == -8;
              if (!v30) {
                break;
              }
            }
          }
          else
          {
            int i = v61;
          }
          std::string v31 = &v61[8 * v62];
          if (i != v31)
          {
            uint64_t v32 = 0;
            uint64_t v33 = *(void *)i;
            do
            {
              v32 += *(void *)(v33 + 8);
              *a4 = v32;
              do
              {
                uint64_t v34 = *((void *)i + 1);
                i += 8;
                uint64_t v33 = v34;
                if (v34) {
                  BOOL v35 = v33 == -8;
                }
                else {
                  BOOL v35 = 1;
                }
              }
              while (v35);
            }
            while (i != v31);
          }
        }
        uint64_t v38 = *(uint64_t **)(v24 + 104);
        uint64_t v37 = v24 + 104;
        long long v36 = v38;
        if (v38)
        {
          uint64_t v39 = v37;
          do
          {
            unsigned int v40 = *((_DWORD *)v36 + 8);
            if (v40 >= v26)
            {
              if (v40 == v26)
              {
                if (*((_DWORD *)v36 + 9) < v27) {
                  ++v36;
                }
                else {
                  uint64_t v39 = (uint64_t)v36;
                }
              }
              else
              {
                uint64_t v39 = (uint64_t)v36;
              }
            }
            else
            {
              ++v36;
            }
            long long v36 = (uint64_t *)*v36;
          }
          while (v36);
          if (v39 != v37)
          {
            unsigned int v41 = *(_DWORD *)(v39 + 32);
            if (v41 <= v26 && (v41 != v26 || *(_DWORD *)(v39 + 36) <= v27))
            {
              if (*(void *)(v39 + 56))
              {
                char v42 = *(void **)(v39 + 40);
                std::string::size_type v43 = (void *)(v39 + 48);
                if (v42 == (void *)(v39 + 48))
                {
                  size_t v44 = 0;
                  unint64_t v58 = 0;
                }
                else
                {
                  size_t v44 = 0;
                  do
                  {
                    unsigned int v45 = v42 + 7;
                    *a4 += sub_1CD67FB9C(v42 + 7);
                    unint64_t v46 = a1[2];
                    if ((unint64_t)v44 >= v46)
                    {
                      unint64_t v47 = *a1;
                      uint64_t v48 = (uint64_t)((uint64_t)v44 - *a1) >> 3;
                      unint64_t v49 = v48 + 1;
                      if ((unint64_t)(v48 + 1) >> 61) {
LABEL_99:
                      }
                        abort();
                      uint64_t v50 = v46 - v47;
                      if (v50 >> 2 > v49) {
                        unint64_t v49 = v50 >> 2;
                      }
                      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v51 = v49;
                      }
                      if (v51)
                      {
                        if (v51 >> 61) {
LABEL_100:
                        }
                          sub_1CB833614();
                        int v52 = (char *)operator new(8 * v51);
                      }
                      else
                      {
                        int v52 = 0;
                      }
                      BOOL v53 = &v52[8 * v48];
                      *(void *)BOOL v53 = v45;
                      unsigned int v54 = v53 + 8;
                      if (v44 != (void *)v47)
                      {
                        do
                        {
                          uint64_t v55 = *--v44;
                          *((void *)v53 - 1) = v55;
                          v53 -= 8;
                        }
                        while (v44 != (void *)v47);
                        size_t v44 = (void *)*a1;
                      }
                      *a1 = (unint64_t)v53;
                      a1[2] = (unint64_t)&v52[8 * v51];
                      if (v44) {
                        operator delete(v44);
                      }
                      size_t v44 = v54;
                    }
                    else
                    {
                      *v44++ = v45;
                    }
                    a1[1] = (unint64_t)v44;
                    int v56 = (void *)v42[1];
                    if (v56)
                    {
                      do
                      {
                        uint64_t v57 = v56;
                        int v56 = (void *)*v56;
                      }
                      while (v56);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v57 = (void *)v42[2];
                        BOOL v30 = *v57 == (void)v42;
                        char v42 = v57;
                      }
                      while (!v30);
                    }
                    char v42 = v57;
                  }
                  while (v57 != v43);
                  unint64_t v58 = *a1;
                }
                unint64_t v59 = 126 - 2 * __clz((uint64_t)((uint64_t)v44 - v58) >> 3);
                if (v44 == (void *)v58) {
                  uint64_t v60 = 0;
                }
                else {
                  uint64_t v60 = v59;
                }
                sub_1CC9B14B4(v58, (char *)v44, v60, 1);
                char v28 = v63;
              }
            }
          }
        }
        if ((v28 & 1) == 0) {
          sub_1CD4AFD10((uint64_t)&v61);
        }
      }
    }
  }
}

void **sub_1CC9AF3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2)
  {
    unint64_t v9 = a6;
    BOOL v10 = sub_1CC9B1170(*(void *)(a1 + 1392), a2);
    a6 = v9;
    if (v10)
    {
      if (!a3)
      {
        unint64_t v11 = *(uint64_t ****)(a2 - 32);
        if (!v11 || *((unsigned char *)v11 + 16) || v11[3] != *(uint64_t ***)(a2 + 72)) {
          unint64_t v11 = 0;
        }
        if ((*((unsigned char *)v11 + 23) & 0x10) == 0)
        {
          size_t v75 = 0;
          unsigned int v74 = &byte_1CFBCE98E;
          goto LABEL_110;
        }
        uint64_t v12 = ***v11;
        uint64_t v13 = *(void *)(v12 + 152);
        uint64_t v14 = *(unsigned int *)(v12 + 168);
        if (v14)
        {
          LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          unint64_t v16 = (uint64_t ****)(v13 + 16 * v15);
          BOOL v17 = *v16;
          if (*v16 == v11)
          {
LABEL_109:
            uint64_t v73 = v16[1];
            size_t v76 = (size_t)*v73;
            unsigned int v74 = (char *)(v73 + 2);
            size_t v75 = v76;
LABEL_110:
            v90[0] = sub_1CD681020(v74, v75);
            return (void **)sub_1CD4ADCD0(a4, v90, (uint64_t)v87);
          }
          int v18 = 1;
          while (v17 != (uint64_t ***)-4096)
          {
            int v19 = v15 + v18++;
            uint64_t v15 = v19 & (v14 - 1);
            BOOL v17 = *(uint64_t ****)(v13 + 16 * v15);
            if (v17 == v11)
            {
              unint64_t v16 = (uint64_t ****)(v13 + 16 * v15);
              goto LABEL_109;
            }
          }
        }
        unint64_t v16 = (uint64_t ****)(v13 + 16 * v14);
        goto LABEL_109;
      }
      a6 = 0;
    }
  }
  if (*(unsigned char *)(a1 + 1280))
  {
    unint64_t v84 = a6;
    ContextFor = llvm::SampleContextTracker::getContextFor(*(void *)(a1 + 1272), a3 + 16);
    long long v88 = 0u;
    memset(v87, 0, sizeof(v87));
    sub_1CD3F21B0(v87, &ContextFor);
    uint64_t v21 = *((void *)&v88 + 1);
    if (!*((void *)&v88 + 1)) {
      return sub_1CB904DFC((void **)v87);
    }
    uint64_t v22 = &unk_1EBCE3000;
    while (1)
    {
      uint64_t v23 = *(void **)(*(void *)(*((void *)&v87[0] + 1) + (((unint64_t)v88 >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (v88 & 0x1FF));
      *(void *)&long long v88 = v88 + 1;
      *((void *)&v88 + 1) = v21 - 1;
      if ((unint64_t)v88 >= 0x400)
      {
        operator delete(**((void ***)&v87[0] + 1));
        *((void *)&v87[0] + 1) += 8;
        *(void *)&long long v88 = v88 - 512;
      }
      uint64_t v24 = v23[6];
      if (!v24 || (!v22[3584] || (*(unsigned char *)(v24 + 52) & 2) == 0) && sub_1CD67FB9C((void *)v23[6]) < v84) {
        goto LABEL_25;
      }
      uint64_t v77 = v23;
      *(void *)unint64_t v78 = v24;
      unint64_t v25 = sub_1CD68056C((uint64_t *)v24, *(char **)(v24 + 16));
      uint64_t v27 = *(unsigned int *)(a5 + 8);
      unint64_t v28 = v84;
      if (v27)
      {
        uint64_t v29 = v25;
        int v30 = 0;
        size_t v31 = v26;
        if (v26)
        {
          size_t v32 = v26;
          uint64_t v33 = v25;
          do
          {
            int v34 = *(unsigned __int8 *)v33++;
            int v30 = 33 * v30 + v34;
            --v32;
          }
          while (v32);
        }
        uint64_t v35 = *(void *)a5;
        uint64_t v36 = *(void *)a5 + 8 * v27 + 8;
        uint64_t v37 = *(unsigned int *)(a5 + 20);
        int v38 = 1;
        int v39 = v30;
        while (1)
        {
          uint64_t v40 = v39 & (v27 - 1);
          unsigned int v41 = *(void **)(v35 + 8 * v40);
          if (v41 != (void *)-8)
          {
            if (!v41) {
              goto LABEL_51;
            }
            if (*(_DWORD *)(v36 + 4 * v40) == v30 && v31 == *v41)
            {
              if (!v31) {
                break;
              }
              int v42 = memcmp(v29, (char *)v41 + v37, v31);
              unint64_t v28 = v84;
              if (!v42) {
                break;
              }
            }
          }
          int v39 = v38 + v40;
          ++v38;
        }
        if (v40 != -1 && (int)v40 != v27)
        {
          uint64_t v43 = *(void *)(*(void *)(v35 + 8 * (int)v40) + 8);
          if (v43)
          {
            if (*(unsigned char *)(v43 + 16))
            {
              if (*(unsigned char *)(v43 + 16) != 3 || (*(_DWORD *)(v43 + 20) & 0x7FFFFFF) != 0) {
                goto LABEL_52;
              }
            }
            else if (*(void *)(v43 + 72) != v43 + 72 || (*(unsigned char *)(v43 + 34) & 0x80) != 0)
            {
              goto LABEL_52;
            }
          }
        }
      }
LABEL_51:
      unint64_t v86 = sub_1CD681020(*(char **)(*(void *)v78 + 16), *(void *)(*(void *)v78 + 24));
      sub_1CD4ADCD0(a4, (uint64_t *)&v86, (uint64_t)v90);
      unint64_t v28 = v84;
LABEL_52:
      size_t v44 = *(void **)(*(void *)v78 + 72);
      if (v44 != (void *)(*(void *)v78 + 80))
      {
        while (1)
        {
          uint64_t v45 = v44[6];
          uint64_t v46 = *((unsigned int *)v44 + 14);
          if (v46)
          {
            for (int i = (uint64_t *)v44[6]; ; ++i)
            {
              BOOL v48 = !*i || *i == -8;
              if (!v48) {
                break;
              }
            }
          }
          else
          {
            int i = (uint64_t *)v44[6];
          }
          unint64_t v49 = (uint64_t *)(v45 + 8 * v46);
          if (i != v49) {
            break;
          }
LABEL_93:
          unsigned int v68 = (void *)v44[1];
          if (v68)
          {
            do
            {
              unsigned int v69 = v68;
              unsigned int v68 = (void *)*v68;
            }
            while (v68);
          }
          else
          {
            do
            {
              unsigned int v69 = (void *)v44[2];
              BOOL v48 = *v69 == (void)v44;
              size_t v44 = v69;
            }
            while (!v48);
          }
          size_t v44 = v69;
          if (v69 == (void *)(*(void *)v78 + 80)) {
            goto LABEL_99;
          }
        }
        uint64_t v50 = *i;
        uint64_t v85 = (uint64_t *)(v45 + 8 * v46);
        while (2)
        {
          if (*(void *)(v50 + 8) > v28)
          {
            BOOL v53 = sub_1CD68056C(*(uint64_t **)v78, (char *)(v50 + 16));
            unint64_t v28 = v84;
            unint64_t v49 = v85;
            uint64_t v83 = v53;
            uint64_t v80 = *(unsigned int *)(a5 + 8);
            if (v80)
            {
              int v55 = 0;
              size_t v56 = v54;
              if (v54)
              {
                size_t v57 = v54;
                unint64_t v58 = v53;
                do
                {
                  int v59 = *(unsigned __int8 *)v58++;
                  int v55 = 33 * v55 + v59;
                  --v57;
                }
                while (v57);
              }
              uint64_t v60 = *(void *)a5;
              uint64_t v61 = *(void *)a5 + 8 * v80 + 8;
              uint64_t v82 = *(unsigned int *)(a5 + 20);
              int v62 = 1;
              int v63 = v55;
              while (1)
              {
                uint64_t v64 = v63 & (v80 - 1);
                uint64_t v65 = *(void **)(v60 + 8 * v64);
                if (v65 != (void *)-8)
                {
                  if (!v65) {
                    goto LABEL_92;
                  }
                  if (*(_DWORD *)(v61 + 4 * v64) == v55 && v56 == *v65)
                  {
                    if (!v56) {
                      break;
                    }
                    int v66 = memcmp(v83, (char *)v65 + v82, v56);
                    unint64_t v28 = v84;
                    unint64_t v49 = v85;
                    if (!v66) {
                      break;
                    }
                  }
                }
                int v63 = v62 + v64;
                ++v62;
              }
              if (v64 != -1 && (int)v64 != v80)
              {
                uint64_t v67 = *(void *)(*(void *)(v60 + 8 * (int)v64) + 8);
                if (v67)
                {
                  if (*(unsigned char *)(v67 + 16))
                  {
                    if (*(unsigned char *)(v67 + 16) != 3 || (*(_DWORD *)(v67 + 20) & 0x7FFFFFF) != 0) {
                      goto LABEL_65;
                    }
                  }
                  else if (*(void *)(v67 + 72) != v67 + 72 || (*(unsigned char *)(v67 + 34) & 0x80) != 0)
                  {
                    goto LABEL_65;
                  }
                }
              }
            }
LABEL_92:
            unint64_t v86 = sub_1CD681020((char *)(v50 + 16), *(void *)v50);
            sub_1CD4ADCD0(a4, (uint64_t *)&v86, (uint64_t)v90);
            unint64_t v28 = v84;
            unint64_t v49 = v85;
          }
          do
          {
LABEL_65:
            uint64_t v51 = i[1];
            ++i;
            uint64_t v50 = v51;
            if (v51) {
              BOOL v52 = v50 == -8;
            }
            else {
              BOOL v52 = 1;
            }
          }
          while (v52);
          if (i == v49) {
            goto LABEL_93;
          }
          continue;
        }
      }
LABEL_99:
      unint64_t v70 = (void *)*v77;
      uint64_t v22 = (unsigned char *)&unk_1EBCE3000;
      if ((void *)*v77 != v77 + 1)
      {
        do
        {
          v90[0] = (uint64_t)(v70 + 5);
          sub_1CD3F21B0(v87, v90);
          uint64_t v71 = (void *)v70[1];
          if (v71)
          {
            do
            {
              BOOL v72 = v71;
              uint64_t v71 = (void *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              BOOL v72 = (void *)v70[2];
              BOOL v48 = *v72 == (void)v70;
              unint64_t v70 = v72;
            }
            while (!v48);
          }
          unint64_t v70 = v72;
        }
        while (v72 != v77 + 1);
      }
LABEL_25:
      uint64_t v21 = *((void *)&v88 + 1);
      if (!*((void *)&v88 + 1)) {
        return sub_1CB904DFC((void **)v87);
      }
    }
  }

  return (void **)sub_1CD6810F8(a3, a4, a5, a6);
}

uint64_t sub_1CC9AF9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (byte_1EBCE3B00) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = dword_1EBCE3F80 == 0;
  }
  if (!v3)
  {
    uint64_t v6 = sub_1CD68056C(*(uint64_t **)(a3 + 8), *(char **)(*(void *)(a3 + 8) + 16));
    uint64_t v8 = *(unsigned int *)(a1 + 1152);
    if (v8)
    {
      unint64_t v9 = v6;
      size_t v10 = v7;
      int v11 = 0;
      if (v7)
      {
        size_t v12 = v7;
        uint64_t v13 = v6;
        do
        {
          int v14 = *(unsigned __int8 *)v13++;
          int v11 = 33 * v11 + v14;
          --v12;
        }
        while (v12);
      }
      uint64_t v15 = *(void *)(a1 + 1144);
      uint64_t v16 = v15 + 8 * v8 + 8;
      int v17 = 1;
      int v18 = v11;
      uint64_t v30 = v15;
      while (1)
      {
        uint64_t v19 = v18 & (v8 - 1);
        uint64_t v20 = *(void **)(v15 + 8 * v19);
        if (v20 != (void *)-8)
        {
          if (!v20) {
            return 0;
          }
          if (*(_DWORD *)(v16 + 4 * v19) == v11 && v10 == *v20)
          {
            if (!v10) {
              break;
            }
            int v21 = memcmp(v9, (char *)v20 + *(unsigned int *)(a1 + 1164), v10);
            uint64_t v15 = v30;
            if (!v21) {
              break;
            }
          }
        }
        int v18 = v17 + v19;
        ++v17;
      }
      if (v19 != -1 && (int)v19 != v8)
      {
        uint64_t v22 = *(uint64_t ****)(*(void *)(v15 + 8 * (int)v19) + 8);
        if (v22)
        {
          if ((*((unsigned char *)v22 + 23) & 0x10) != 0)
          {
            uint64_t v23 = ***v22;
            uint64_t v24 = *(void *)(v23 + 152);
            int v25 = *(_DWORD *)(v23 + 168);
            if (v25)
            {
              unsigned int v26 = (v25 - 1) & ((v22 >> 4) ^ (v22 >> 9));
              uint64_t v27 = *(uint64_t ****)(v24 + 16 * v26);
              if (v27 != v22)
              {
                int v28 = 1;
                do
                {
                  if (v27 == (uint64_t ***)-4096) {
                    break;
                  }
                  unsigned int v29 = v26 + v28++;
                  unsigned int v26 = v29 & (v25 - 1);
                  uint64_t v27 = *(uint64_t ****)(v24 + 16 * v26);
                }
                while (v27 != v22);
              }
            }
          }
          operator new[]();
        }
      }
    }
  }
  return 0;
}

BOOL sub_1CC9B01CC(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (byte_1EBCE3B00) {
    return 0;
  }
  unint64_t v5 = a2;
  size_t v7 = *a2;
  uint64_t v8 = (uint64_t)*(*a2 - 4);
  if (!v8 || *(unsigned char *)(v8 + 16) || *(uint64_t **)(v8 + 24) != v7[9]) {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (unsigned __int8 *)v7[6];
  size_t v54 = v9;
  size_t v10 = v7;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v54, v9, 2);
    size_t v10 = *v5;
  }
  uint64_t v11 = (uint64_t)v7[5];
  sub_1CC9B11E0(&v63, *(void *)(a1 + 1392), (uint64_t)v10);
  if ((_BYTE)v69)
  {
    long long v48 = v63;
    LOBYTE(v49) = 0;
    char v53 = 0;
    if ((_BYTE)v68)
    {
      sub_1CD494F9C((llvm::APInt *)&v49, (llvm::APInt *)&v64);
      char v53 = 1;
      if ((_BYTE)v69)
      {
        if ((_BYTE)v68)
        {
          size_t v12 = &v64;
LABEL_103:
          sub_1CD494A40((uint64_t)v12);
        }
      }
    }
  }
  else
  {
    int v13 = dword_1EBD08E70;
    if (byte_1EBCE3D40)
    {
      uint64_t v14 = *(void *)(a1 + 1128);
      if (*(unsigned char *)(v14 + 24)) {
        unint64_t v15 = *(void *)(v14 + 16);
      }
      else {
        unint64_t v15 = 0;
      }
      if ((unint64_t)v5[2] > v15)
      {
        int v13 = dword_1EBD08DB0;
      }
      else if (!byte_1EBCE3A40)
      {
        LOBYTE(v63) = 0;
        LOBYTE(v66) = 0;
        sub_1CC01CBE0((llvm::APInt *)"cold callsite", (llvm::APInt *)&v63, (uint64_t)&v48);
        if (!(_BYTE)v66) {
          goto LABEL_21;
        }
        size_t v12 = (uint64_t *)&v63;
        goto LABEL_103;
      }
    }
    uint64_t v39 = (uint64_t)*v5;
    uint64_t v40 = (uint64_t)*(*v5 - 4);
    if (!v40 || *(unsigned char *)(v40 + 16) || *(void *)(v40 + 24) != *(void *)(v39 + 72)) {
      uint64_t v40 = 0;
    }
    llvm::getInlineParams(dword_1EBD039A0, (uint64_t)&v63);
    if (!BYTE5(v69)) {
      BYTE5(v69) = 1;
    }
    BYTE4(v69) = 1;
    if (!v71) {
      char v71 = 1;
    }
    char v70 = byte_1EBCE3EC0;
    uint64_t v41 = *(void *)(a1 + 1232);
    if (!v41)
    {
      sub_1CB920400();
      goto LABEL_119;
    }
    int v42 = (llvm::BasicBlock *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v41 + 48))(v41, v40);
    llvm::getInlineCost(v39, v40, (uint64_t)&v63, v42, (uint64_t)sub_1CC026170, a1 + 1176, (uint64_t (*)(uint64_t, const llvm::Function *))sub_1CC792608, a1 + 1240, (uint64_t)&v57, 0, v46, 0, 0);
    if ((v57 - 0x7FFFFFFF) > 1)
    {
      if (byte_1EBCE3E00 && (uint64_t v43 = v5[1]) != 0 && ((_BYTE)v43[6] & 2) == 0 && (*((unsigned char *)v43 + 52) & 2) != 0)
      {
        v55[0] = 0;
        char v56 = 0;
        sub_1CC01CB38((llvm::APInt *)"preinliner", (llvm::APInt *)v55, (uint64_t)&v48);
        if (v56)
        {
          sub_1CD494A40((uint64_t)v55);
          char v56 = 0;
        }
      }
      else
      {
        LODWORD(v48) = v57;
        if (byte_1EBCE3D40) {
          DWORD1(v48) = v13;
        }
        else {
          DWORD1(v48) = 0x7FFFFFFF;
        }
        *((void *)&v48 + 1) = 0;
        LOBYTE(v49) = 0;
        char v53 = 0;
      }
    }
    else
    {
      long long v48 = v57;
      LOBYTE(v49) = 0;
      char v53 = 0;
      if (v62)
      {
        int v50 = v59;
        uint64_t v49 = v58;
        int v52 = v61;
        uint64_t v51 = v60;
        int v59 = 0;
        int v61 = 0;
        char v53 = 1;
      }
    }
    if (v62)
    {
      size_t v12 = &v58;
      goto LABEL_103;
    }
  }
LABEL_21:
  if (v48 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(uint64_t ****)(a1 + 1136);
    unsigned int v26 = v54;
    if (!v54)
    {
      uint64_t v27 = 0;
      unsigned int v28 = 0;
LABEL_51:
      uint64_t v29 = *(void *)(v11 + 56);
      DWORD2(v63) = 11;
      BYTE12(v63) = 2;
      uint64_t v64 = v29;
      uint64_t v65 = v27;
      unint64_t v66 = __PAIR64__(v26, v28);
      uint64_t v67 = "sample-profile-inline";
      unsigned int v68 = "InlineFail";
      uint64_t v69 = 10;
      char v70 = 0;
      char v72 = 0;
      uint64_t v73 = v75;
      uint64_t v74 = 0x400000000;
      v79[32] = 0;
      int v80 = -1;
      uint64_t v81 = v11;
      *(void *)&long long v63 = &unk_1F26165E0;
      *(void *)&long long v57 = "incompatible inlining";
      *((void *)&v57 + 1) = 21;
      sub_1CC59ADEC((uint64_t *)&v73, (uint64_t)&v57);
      llvm::OptimizationRemarkEmitter::emit(v5, (llvm::DiagnosticInfoOptimizationBase *)&v63);
      *(void *)&long long v63 = &unk_1F2616800;
      uint64_t v30 = (char **)v73;
      if (v74)
      {
        unint64_t v31 = (unint64_t)v74 << 6;
        do
        {
          size_t v32 = (void **)((char *)v30 + v31);
          if (*((char *)v30 + v31 - 17) < 0) {
            operator delete(*(v32 - 5));
          }
          if (*((char *)v32 - 41) < 0) {
            operator delete(*(v32 - 8));
          }
          v31 -= 64;
        }
        while (v31);
        uint64_t v30 = (char **)v73;
      }
      if (v30 != v75) {
        free(v30);
      }
      goto LABEL_67;
    }
LABEL_119:
    uint64_t v27 = *(void *)&v26[-8 * *((unsigned int *)v26 + 2)];
    if (*(unsigned char *)v27 != 15) {
      uint64_t v27 = *(void *)(v27 - 8 * *(unsigned int *)(v27 + 8));
    }
    unsigned int v28 = *((_DWORD *)v26 + 1);
    LODWORD(v26) = *((unsigned __int16 *)v26 + 1);
    goto LABEL_51;
  }
  if ((int)v48 >= SDWORD1(v48))
  {
LABEL_67:
    BOOL v3 = 0;
    goto LABEL_68;
  }
  *(void *)&long long v63 = 0;
  *((void *)&v63 + 1) = sub_1CC026170;
  uint64_t v64 = a1 + 1176;
  uint64_t v65 = 0;
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  unsigned int v68 = &v70;
  uint64_t v69 = 0x400000000;
  v75[0] = (char *)&v76;
  v75[1] = (char *)0x800000000;
  uint64_t v77 = v79;
  uint64_t v78 = 0x800000000;
  char v82 = 0;
  uint64_t v16 = llvm::InlineFunction((void **)v7, (uint64_t *)&v63, 0, 1, 0);
  BOOL v3 = v16 == 0;
  if (!v16)
  {
    llvm::AttributeFuncs::mergeAttributesForOutlining(*(llvm::AttributeFuncs **)(v11 + 56), (llvm::Function *)v8, v17);
    int v18 = *(uint64_t ****)(a1 + 1136);
    unint64_t v47 = v54;
    if (v54) {
      llvm::MetadataTracking::track((uint64_t)&v47, v54, 2);
    }
    llvm::emitInlinedIntoBasedOnCost(v18, &v47, v11, (unsigned __int8 *)v8, *(unsigned __int8 **)(v11 + 56), &v48, 1, "sample-profile-inline");
    if (!v47) {
      goto LABEL_30;
    }
    int v19 = *v47;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        uint64_t v33 = v47;
      }
      else {
        uint64_t v33 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v47 + 1) = 0;
        }
        goto LABEL_30;
      }
      unint64_t v34 = (unint64_t)(v33 + 8);
    }
    else
    {
      if ((v47[1] & 0x7F) != 2 && !*((_DWORD *)v47 + 3)) {
        goto LABEL_30;
      }
      uint64_t v45 = *((void *)v47 + 2);
      if ((v45 & 4) == 0) {
        goto LABEL_30;
      }
      unint64_t v34 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (!v34) {
        goto LABEL_30;
      }
    }
    *(void *)&long long v57 = &v47;
    sub_1CC5FA668(v34 + 16, &v57);
LABEL_30:
    if (a3)
    {
      *(_DWORD *)(a3 + 8) = 0;
      if (v78)
      {
        unsigned int v20 = 0;
        int v21 = v77;
        uint64_t v22 = 8 * v78;
        do
        {
          if (v20 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v20) = *v21;
          unsigned int v20 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v20;
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
    }
    if (*(unsigned char *)(a1 + 1280)) {
      *((_DWORD *)v5[1] + 12) |= 4u;
    }
    if (*((float *)v5 + 6) < 1.0 && v78)
    {
      uint64_t v23 = (llvm **)v77;
      uint64_t v24 = 8 * v78;
      do
      {
        llvm::extractProbe(*v23, (uint64_t)&v57);
        if ((_BYTE)v58) {
          llvm::setProbeDistributionFactor(*v23, v25, *((float *)&v57 + 3) * *((float *)v5 + 6));
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
  }
  if (v77 != v79) {
    free(v77);
  }
  sub_1CC45E8E8(v75);
  if (v68 != &v70) {
    free(v68);
  }
LABEL_68:
  if (v53) {
    sub_1CD494A40((uint64_t)&v49);
  }
  if (v54)
  {
    int v35 = *v54;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        uint64_t v37 = v54;
      }
      else {
        uint64_t v37 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v38 = (unint64_t)(v37 + 8);
LABEL_80:
        *(void *)&long long v63 = &v54;
        sub_1CC5FA668(v38 + 16, &v63);
        return v3;
      }
      if (v35 == 3) {
        *((void *)v54 + 1) = 0;
      }
    }
    else if ((v54[1] & 0x7F) == 2 || *((_DWORD *)v54 + 3))
    {
      uint64_t v44 = *((void *)v54 + 2);
      if ((v44 & 4) != 0)
      {
        unint64_t v38 = v44 & 0xFFFFFFFFFFFFFFF8;
        if (v38) {
          goto LABEL_80;
        }
      }
    }
  }
  return v3;
}

void sub_1CC9B09EC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  uint64_t v6 = *(void *)a2 + 16 * v5;
  if (*(_DWORD *)(a2 + 8))
  {
    if (v5)
    {
      uint64_t v7 = 16 * v5;
      uint64_t v8 = *(void **)a2;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v8 = *(void **)a2;
    }
  }
  else
  {
LABEL_6:
    uint64_t v8 = (void *)(*(void *)a2 + 16 * v5);
  }
  uint64_t v9 = *(void *)a2 + 16 * v5;
  if (v8 != (void *)v9)
  {
    size_t v10 = (uint64_t *)&v85;
    uint64_t v11 = v87;
    while (1)
    {
      size_t v12 = (void *)*v8;
      uint64_t v13 = *(void *)(*v8 - 32);
      if (!v13
        || *(unsigned char *)(v13 + 16)
        || *(void *)(v13 + 24) != v12[9]
        || *(void *)(v13 + 72) == v13 + 72 && (*(unsigned char *)(v13 + 34) & 0x80) == 0)
      {
        goto LABEL_15;
      }
      uint64_t v15 = v12[6];
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 - 8 * *(unsigned int *)(v15 + 8));
        if (*(unsigned char *)v16 != 15) {
          uint64_t v16 = *(void *)(v16 - 8 * *(unsigned int *)(v16 + 8));
        }
        int v17 = *(_DWORD *)(v15 + 4);
        LODWORD(v15) = *(unsigned __int16 *)(v15 + 2);
      }
      else
      {
        uint64_t v16 = 0;
        int v17 = 0;
      }
      int v18 = *(uint64_t ****)(a1 + 1136);
      uint64_t v19 = v12[5];
      uint64_t v20 = *(void *)(v19 + 56);
      int v74 = 11;
      char v75 = 2;
      uint64_t v76 = v20;
      uint64_t v77 = v16;
      int v78 = v17;
      int v79 = v15;
      int v80 = "sample-profile-inline";
      uint64_t v81 = "NotInline";
      uint64_t v82 = 9;
      char v83 = 0;
      char v84 = 0;
      int v61 = v11;
      uint64_t v85 = v11;
      uint64_t v86 = 0x400000000;
      v87[256] = 0;
      int v88 = -1;
      uint64_t v89 = v19;
      char v71 = "previous inlining not repeated: '";
      uint64_t v72 = 33;
      uint64_t v73 = (uint64_t *)&unk_1F26165E0;
      sub_1CC59ADEC(v10, (uint64_t)&v71);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v66, "Callee", 6uLL, (unsigned __int8 *)v13);
      uint64_t v21 = sub_1CD3D6290((uint64_t)&v73, (long long *)v66);
      char v71 = "' into '";
      uint64_t v72 = 8;
      sub_1CC59ADEC((uint64_t *)(v21 + 80), (uint64_t)&v71);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v62, "Caller", 6uLL, a3);
      uint64_t v22 = (uint64_t *)sub_1CD3D6290(v21, (long long *)v62);
      char v71 = "'";
      uint64_t v72 = 1;
      sub_1CC59ADEC(v22 + 10, (uint64_t)&v71);
      llvm::OptimizationRemarkEmitter::emit(v18, (llvm::DiagnosticInfoOptimizationBase *)v22);
      if (v65 < 0) {
        operator delete(__p);
      }
      if (v63 < 0) {
        operator delete(v62[0]);
      }
      if (v69 < 0) {
        operator delete(v68);
      }
      if (v67 < 0) {
        operator delete(v66[0]);
      }
      uint64_t v73 = (uint64_t *)&unk_1F2616800;
      uint64_t v23 = (char *)v85;
      uint64_t v11 = v61;
      uint64_t v24 = (unsigned char *)&unk_1EBCE3000;
      if (v86)
      {
        uint64_t v60 = v10;
        uint64_t v25 = a1;
        unsigned int v26 = a3;
        unint64_t v27 = (unint64_t)v86 << 6;
        do
        {
          unsigned int v28 = (void **)&v23[v27];
          if (v23[v27 - 17] < 0)
          {
            operator delete(*(v28 - 5));
            uint64_t v24 = &unk_1EBCE3000;
            uint64_t v11 = v61;
          }
          if (*((char *)v28 - 41) < 0)
          {
            operator delete(*(v28 - 8));
            uint64_t v24 = (unsigned char *)&unk_1EBCE3000;
            uint64_t v11 = v61;
          }
          v27 -= 64;
        }
        while (v27);
        uint64_t v23 = (char *)v85;
        a3 = v26;
        a1 = v25;
        size_t v10 = v60;
      }
      if (v23 != v11)
      {
        free(v23);
        uint64_t v24 = (unsigned char *)&unk_1EBCE3000;
        uint64_t v11 = v61;
      }
      uint64_t v29 = v8[1];
      if (!*(void *)(v29 + 56))
      {
        BOOL v32 = sub_1CD67FB9C((void *)v8[1]);
        uint64_t v24 = (unsigned char *)&unk_1EBCE3000;
        uint64_t v11 = v61;
        if (!v32) {
          goto LABEL_15;
        }
      }
      if ((*(unsigned char *)(v29 + 52) & 4) != 0) {
        goto LABEL_15;
      }
      if (v24[2048])
      {
        if (!*(void *)(v29 + 64))
        {
          unint64_t v30 = sub_1CD67FB9C((void *)v29);
          sub_1CC9A7664(v29, v30, 1uLL);
          unint64_t v31 = sub_1CD6815AC(*(void **)(a1 + 1056), (llvm::Value *)v13);
          sub_1CD67DFD0((uint64_t)v31, v29, 1uLL);
          sub_1CD68178C((uint64_t)v31);
          uint64_t v11 = v61;
        }
        goto LABEL_15;
      }
      char v70 = 0;
      char v33 = sub_1CBB0BF40(*(void *)(a1 + 1304), *(_DWORD *)(a1 + 1320), v13, &v70);
      unint64_t v34 = v70;
      if ((v33 & 1) == 0) {
        break;
      }
LABEL_55:
      v34[1] += sub_1CD67FB9C((void *)v29);
      uint64_t v11 = v61;
LABEL_15:
      uint64_t v14 = v8 + 2;
      uint64_t v8 = (void *)v6;
      if (v14 != (void *)v6)
      {
        uint64_t v8 = v14;
        while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 2;
          if (v8 == (void *)v6)
          {
            uint64_t v8 = (void *)v6;
            break;
          }
        }
      }
      if (v8 == (void *)v9) {
        return;
      }
    }
    char v71 = (const char *)v70;
    int v35 = *(_DWORD *)(a1 + 1312);
    unsigned int v36 = *(_DWORD *)(a1 + 1320);
    if (4 * v35 + 4 >= 3 * v36)
    {
      int v37 = 2 * v36;
    }
    else
    {
      int v37 = *(_DWORD *)(a1 + 1320);
      if (v36 + ~v35 - *(_DWORD *)(a1 + 1316) > v36 >> 3)
      {
LABEL_52:
        *(_DWORD *)(a1 + 1312) = v35 + 1;
        if (*v34 != -4096) {
          --*(_DWORD *)(a1 + 1316);
        }
        *unint64_t v34 = v13;
        v34[1] = 0;
        goto LABEL_55;
      }
    }
    uint64_t v38 = *(unsigned int *)(a1 + 1320);
    int v59 = a3;
    long long v57 = v8;
    uint64_t v58 = v9;
    uint64_t v39 = v6;
    uint64_t v40 = *(void *)(a1 + 1304);
    unint64_t v41 = (v37 - 1) | ((unint64_t)(v37 - 1) >> 1);
    unint64_t v42 = v41 | (v41 >> 2) | ((v41 | (v41 >> 2)) >> 4);
    int v43 = ((v42 | (v42 >> 8)) >> 16) | v42 | (v42 >> 8);
    if ((v43 + 1) > 0x40) {
      unsigned int v44 = v43 + 1;
    }
    else {
      unsigned int v44 = 64;
    }
    *(_DWORD *)(a1 + 1320) = v44;
    uint64_t v45 = operator new(16 * v44, (std::align_val_t)8uLL);
    uint64_t v46 = a1;
    *(void *)(a1 + 1304) = v45;
    __n128 v47 = 0uLL;
    if (v40)
    {
      *(void *)(a1 + 1312) = 0;
      uint64_t v50 = *(unsigned int *)(a1 + 1320);
      if (v50)
      {
        uint64_t v51 = 16 * v50;
        do
        {
          void *v45 = -4096;
          v45 += 2;
          v51 -= 16;
        }
        while (v51);
      }
      if (v38)
      {
        int v52 = 0;
        char v53 = (uint64_t *)(v40 + 8);
        uint64_t v54 = 16 * v38;
        do
        {
          uint64_t v55 = *(v53 - 1);
          if ((v55 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            uint64_t v73 = 0;
            sub_1CBB0BF40(*(void *)(v46 + 1304), *(_DWORD *)(v46 + 1320), v55, &v73);
            char v56 = v73;
            uint64_t *v73 = v55;
            v56[1] = *v53;
            *(_DWORD *)(v46 + 1312) = ++v52;
          }
          v53 += 2;
          v54 -= 16;
        }
        while (v54);
      }
      MEMORY[0x1D25D9CD0](v40, 8, v47);
      uint64_t v45 = *(void **)(v46 + 1304);
      LODWORD(v48) = *(_DWORD *)(v46 + 1320);
    }
    else
    {
      *(void *)(a1 + 1312) = 0;
      uint64_t v48 = *(unsigned int *)(a1 + 1320);
      if (v48)
      {
        uint64_t v49 = 0;
        do
        {
          v45[v49] = -4096;
          v49 += 2;
        }
        while (2 * v48 != v49);
      }
    }
    sub_1CBB0BF40((uint64_t)v45, v48, v13, &v71);
    a1 = v46;
    int v35 = *(_DWORD *)(v46 + 1312);
    unint64_t v34 = v71;
    uint64_t v6 = v39;
    uint64_t v8 = v57;
    uint64_t v9 = v58;
    a3 = v59;
    goto LABEL_52;
  }
}

BOOL sub_1CC9B1104(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 != a4) {
    return a2 < a4;
  }
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = *(void *)(a3 + 88);
  if (v5 != v6) {
    return v5 > v6;
  }
  unint64_t v8 = sub_1CD681020(*(char **)(a1 + 16), *(void *)(a1 + 24));
  return v8 < sub_1CD681020(*(char **)(a3 + 16), *(void *)(a3 + 24));
}

BOOL sub_1CC9B1170(uint64_t a1, uint64_t a2)
{
  sub_1CC9B11E0(&v8, a1, a2);
  int v2 = v10;
  int v3 = v8;
  int v4 = HIDWORD(v8);
  if (v10) {
    BOOL v5 = v9[32] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    sub_1CD494A40((uint64_t)v9);
  }
  return v2 && v3 < v4;
}

void *sub_1CC9B11E0(void *result, uint64_t a2, uint64_t a3)
{
  int v3 = result;
  if (a2
    && (result = (*(void *(**)(llvm::InlineAdvice **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 40))(v10, a2, a3), (int v4 = v10[0]) != 0))
  {
    BOOL v5 = v10[0];
    if (*((unsigned char *)v10[0] + 56))
    {
      llvm::InlineAdvice::recordInlining(v10[0]);
      v6[0] = 0;
      char v7 = 0;
      sub_1CC01CB38((llvm::APInt *)"previously inlined", (llvm::APInt *)v6, (uint64_t)v10);
      *(_OWORD *)int v3 = *(_OWORD *)v10;
      *((unsigned char *)v3 + 16) = 0;
      *((unsigned char *)v3 + 48) = 0;
      if (v15)
      {
        *((_DWORD *)v3 + 6) = v12;
        v3[2] = v11;
        *((_DWORD *)v3 + 10) = v14;
        v3[4] = v13;
        int v12 = 0;
        int v14 = 0;
        *((unsigned char *)v3 + 48) = 1;
        sub_1CD494A40((uint64_t)&v11);
        char v15 = 0;
      }
      *((unsigned char *)v3 + 56) = 1;
      if (v7)
      {
        sub_1CD494A40((uint64_t)v6);
        char v7 = 0;
      }
    }
    else
    {
      *((unsigned char *)v10[0] + 57) = 1;
      (*(void (**)(llvm::InlineAdvice *))(*(void *)v4 + 40))(v4);
      v8[0] = 0;
      char v9 = 0;
      sub_1CC01CBE0((llvm::APInt *)"not previously inlined", (llvm::APInt *)v8, (uint64_t)v10);
      *(_OWORD *)int v3 = *(_OWORD *)v10;
      *((unsigned char *)v3 + 16) = 0;
      *((unsigned char *)v3 + 48) = 0;
      if (v15)
      {
        *((_DWORD *)v3 + 6) = v12;
        v3[2] = v11;
        *((_DWORD *)v3 + 10) = v14;
        v3[4] = v13;
        int v12 = 0;
        int v14 = 0;
        *((unsigned char *)v3 + 48) = 1;
        sub_1CD494A40((uint64_t)&v11);
        char v15 = 0;
      }
      *((unsigned char *)v3 + 56) = 1;
      if (v9)
      {
        sub_1CD494A40((uint64_t)v8);
        char v9 = 0;
      }
    }
    return (void *)(*(uint64_t (**)(llvm::InlineAdvice *))(*(void *)v5 + 8))(v5);
  }
  else
  {
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)int v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  return result;
}

__n128 sub_1CC9B13FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v6 = v3 >> 1;
    char v7 = (__n128 *)(a1 + 32 * (v3 >> 1));
    if (sub_1CC9B1104(v7->n128_i64[1], v7[1].n128_u64[0], *(void *)(a2 - 24), *(void *)(a2 - 16)))
    {
      unint64_t v11 = *(void *)(a2 - 32);
      uint64_t v10 = *(void *)(a2 - 24);
      char v9 = (__n128 *)(a2 - 32);
      __n128 v15 = v9[1];
      unint64_t v12 = v9[1].n128_u64[0];
      do
      {
        uint64_t v13 = v7;
        __n128 v14 = v7[1];
        *char v9 = *v7;
        v9[1] = v14;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        char v7 = (__n128 *)(a1 + 32 * v6);
        char v9 = v13;
      }
      while (sub_1CC9B1104(v7->n128_i64[1], v7[1].n128_u64[0], v10, v12));
      v13->n128_u64[0] = v11;
      v13->n128_u64[1] = v10;
      __n128 result = v15;
      v13[1] = v15;
    }
  }
  return result;
}

unint64_t sub_1CC9B14B4(unint64_t result, char *a2, uint64_t a3, char a4)
{
  int i = (char *)result;
LABEL_2:
  char v9 = a2 - 8;
  unint64_t v175 = a2 - 24;
  int v176 = a2 - 16;
  uint64_t v183 = a2;
  uint64_t v178 = a2 - 8;
  while (1)
  {
    uint64_t v10 = i;
    uint64_t v11 = a2 - i;
    uint64_t v12 = (a2 - i) >> 3;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v153 = *((void *)a2 - 1);
          uint64_t v154 = *(void *)i;
          unint64_t v155 = sub_1CD67FB9C((void *)v153);
          __n128 result = sub_1CD67FB9C((void *)v154);
          if (v155 == result)
          {
            unint64_t v170 = sub_1CD681020(*(char **)(v153 + 16), *(void *)(v153 + 24));
            __n128 result = sub_1CD681020(*(char **)(v154 + 16), *(void *)(v154 + 24));
            if (v170 >= result) {
              return result;
            }
            uint64_t v154 = *(void *)i;
            uint64_t v153 = *((void *)a2 - 1);
          }
          else if (v155 <= result)
          {
            return result;
          }
          *(void *)int i = v153;
          *((void *)a2 - 1) = v154;
          return result;
        case 3:
          return sub_1CC9B22E0(i, (void **)i + 1, (void **)v9);
        case 4:
          return sub_1CC9B288C((uint64_t *)i, (void **)i + 1, (void **)i + 2, (void **)v9);
        case 5:
          unint64_t v156 = (uint64_t *)(i + 8);
          uint64_t v157 = i + 16;
          size_t v158 = (void **)(i + 24);
          sub_1CC9B288C((uint64_t *)i, (void **)i + 1, (void **)i + 2, (void **)i + 3);
          uint64_t v159 = *((void *)a2 - 1);
          uint64_t v160 = (void *)*((void *)i + 3);
          unint64_t v161 = sub_1CD67FB9C((void *)v159);
          __n128 result = sub_1CD67FB9C(v160);
          if (v161 == result)
          {
            unint64_t v171 = sub_1CD681020(*(char **)(v159 + 16), *(void *)(v159 + 24));
            __n128 result = sub_1CD681020((char *)v160[2], v160[3]);
            size_t v162 = v183;
            if (v171 >= result) {
              return result;
            }
            uint64_t v160 = *v158;
            uint64_t v159 = *((void *)v183 - 1);
          }
          else
          {
            size_t v162 = v183;
            if (v161 <= result) {
              return result;
            }
          }
          *size_t v158 = (void *)v159;
          *((void *)v162 - 1) = v160;
          size_t v163 = *v158;
          unsigned int v164 = (void *)*v157;
          unint64_t v165 = sub_1CD67FB9C(*v158);
          __n128 result = sub_1CD67FB9C(v164);
          if (v165 == result)
          {
            unint64_t v172 = sub_1CD681020((char *)v163[2], v163[3]);
            __n128 result = sub_1CD681020((char *)v164[2], v164[3]);
            if (v172 >= result) {
              return result;
            }
            unsigned int v164 = (void *)*v157;
            size_t v163 = *v158;
          }
          else if (v165 <= result)
          {
            return result;
          }
          *uint64_t v157 = v163;
          *size_t v158 = v164;
          uint64_t v166 = *v156;
          unint64_t v167 = sub_1CD67FB9C(v163);
          __n128 result = sub_1CD67FB9C((void *)v166);
          if (v167 == result)
          {
            unint64_t v173 = sub_1CD681020((char *)v163[2], v163[3]);
            __n128 result = sub_1CD681020(*(char **)(v166 + 16), *(void *)(v166 + 24));
            if (v173 >= result) {
              return result;
            }
            uint64_t v166 = *v156;
            size_t v163 = (void *)*v157;
          }
          else if (v167 <= result)
          {
            return result;
          }
          *((void *)i + 1) = v163;
          *((void *)i + 2) = v166;
          uint64_t v168 = *(void *)i;
          unint64_t v169 = sub_1CD67FB9C(v163);
          __n128 result = sub_1CD67FB9C((void *)v168);
          if (v169 == result)
          {
            unint64_t v174 = sub_1CD681020((char *)v163[2], v163[3]);
            __n128 result = sub_1CD681020(*(char **)(v168 + 16), *(void *)(v168 + 24));
            if (v174 >= result) {
              return result;
            }
            uint64_t v168 = *(void *)i;
            size_t v163 = (void *)*((void *)i + 1);
          }
          else if (v169 <= result)
          {
            return result;
          }
          *(void *)int i = v163;
          *((void *)i + 1) = v168;
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      uint64_t v179 = i;
      if (i == a2) {
        return result;
      }
      int64_t v90 = (unint64_t)(v12 - 2) >> 1;
      int64_t v91 = v90;
      uint64_t v92 = i;
      do
      {
        int64_t v93 = v91;
        if (v90 < v91) {
          goto LABEL_127;
        }
        uint64_t v94 = (2 * v91) | 1;
        uint64_t v95 = &v92[8 * v94];
        if (2 * v91 + 2 < v12)
        {
          uint64_t v96 = *(void *)v95;
          int v97 = (void *)*((void *)v95 + 1);
          unint64_t v98 = sub_1CD67FB9C(*(void **)v95);
          unint64_t v99 = sub_1CD67FB9C(v97);
          if (v98 == v99)
          {
            unint64_t v100 = sub_1CD681020(*(char **)(v96 + 16), *(void *)(v96 + 24));
            BOOL v101 = v100 < sub_1CD681020((char *)v97[2], v97[3]);
          }
          else
          {
            BOOL v101 = v98 > v99;
          }
          if (v101)
          {
            v95 += 8;
            uint64_t v94 = 2 * v93 + 2;
          }
        }
        uint64_t v102 = *(void *)v95;
        uint64_t v92 = v179;
        uint64_t v103 = *(void *)&v179[8 * v93];
        unint64_t v104 = sub_1CD67FB9C(*(void **)v95);
        __n128 result = sub_1CD67FB9C((void *)v103);
        if (v104 == result)
        {
          unint64_t v116 = sub_1CD681020(*(char **)(v102 + 16), *(void *)(v102 + 24));
          __n128 result = sub_1CD681020(*(char **)(v103 + 16), *(void *)(v103 + 24));
          if (v116 < result) {
            goto LABEL_127;
          }
          uint64_t v103 = *(void *)&v179[8 * v93];
          uint64_t v102 = *(void *)v95;
        }
        else if (v104 > result)
        {
          goto LABEL_127;
        }
        *(void *)&v179[8 * v93] = v102;
        if (v90 < v94) {
          goto LABEL_140;
        }
        uint64_t v181 = v95;
        uint64_t v177 = v103;
        while (1)
        {
          uint64_t v105 = 2 * v94;
          uint64_t v94 = (2 * v94) | 1;
          uint64_t v95 = &v92[8 * v94];
          uint64_t v106 = v105 + 2;
          if (v105 + 2 < v12)
          {
            uint64_t v107 = *(void *)v95;
            uint64_t v108 = (void *)*((void *)v95 + 1);
            unint64_t v109 = sub_1CD67FB9C(*(void **)v95);
            unint64_t v110 = sub_1CD67FB9C(v108);
            if (v109 == v110)
            {
              unint64_t v111 = sub_1CD681020(*(char **)(v107 + 16), *(void *)(v107 + 24));
              BOOL v112 = v111 < sub_1CD681020((char *)v108[2], v108[3]);
            }
            else
            {
              BOOL v112 = v109 > v110;
            }
            uint64_t v103 = v177;
            if (v112)
            {
              v95 += 8;
              uint64_t v94 = v106;
            }
          }
          uint64_t v113 = *(void *)v95;
          unint64_t v114 = sub_1CD67FB9C(*(void **)v95);
          __n128 result = sub_1CD67FB9C((void *)v103);
          uint64_t v92 = v179;
          if (v114 != result)
          {
            if (v114 > result) {
              break;
            }
            goto LABEL_150;
          }
          unint64_t v115 = sub_1CD681020(*(char **)(v113 + 16), *(void *)(v113 + 24));
          __n128 result = sub_1CD681020(*(char **)(v103 + 16), *(void *)(v103 + 24));
          if (v115 < result) {
            break;
          }
          uint64_t v113 = *(void *)v95;
LABEL_150:
          *(void *)uint64_t v181 = v113;
          uint64_t v181 = v95;
          if (v90 < v94) {
            goto LABEL_140;
          }
        }
        uint64_t v95 = v181;
LABEL_140:
        *(void *)uint64_t v95 = v103;
LABEL_127:
        int64_t v91 = v93 - 1;
      }
      while (v93);
      uint64_t v117 = v183;
      while (1)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v179;
        uint64_t v182 = *(void **)v179;
        uint64_t v184 = v117;
        do
        {
          int v120 = &v119[8 * v118 + 8];
          uint64_t v121 = (2 * v118) | 1;
          uint64_t v122 = 2 * v118 + 2;
          if (v122 < v12)
          {
            uint64_t v123 = *(void *)v120;
            uint64_t v124 = *(void *)&v119[8 * v118 + 16];
            unint64_t v125 = sub_1CD67FB9C(*(void **)v120);
            __n128 result = sub_1CD67FB9C((void *)v124);
            if (v125 == result)
            {
              unint64_t v126 = sub_1CD681020(*(char **)(v123 + 16), *(void *)(v123 + 24));
              __n128 result = sub_1CD681020(*(char **)(v124 + 16), *(void *)(v124 + 24));
              BOOL v127 = v126 < result;
            }
            else
            {
              BOOL v127 = v125 > result;
            }
            if (v127)
            {
              v120 += 8;
              uint64_t v121 = v122;
            }
          }
          *(void *)uint64_t v119 = *(void *)v120;
          uint64_t v119 = v120;
          uint64_t v118 = v121;
        }
        while (v121 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
        uint64_t v117 = v184 - 8;
        if (v120 == v184 - 8)
        {
          *(void *)int v120 = v182;
        }
        else
        {
          *(void *)int v120 = *(void *)v117;
          *(void *)uint64_t v117 = v182;
          uint64_t v128 = v120 - v179 + 8;
          if (v128 >= 9)
          {
            unint64_t v129 = ((unint64_t)v128 >> 3) - 2;
            unint64_t v130 = v129 >> 1;
            uint64_t v131 = &v179[8 * (v129 >> 1)];
            uint64_t v132 = *(void *)v131;
            uint64_t v133 = *(void *)v120;
            unint64_t v134 = sub_1CD67FB9C(*(void **)v131);
            __n128 result = sub_1CD67FB9C((void *)v133);
            if (v134 == result)
            {
              unint64_t v141 = sub_1CD681020(*(char **)(v132 + 16), *(void *)(v132 + 24));
              __n128 result = sub_1CD681020(*(char **)(v133 + 16), *(void *)(v133 + 24));
              if (v141 < result)
              {
                uint64_t v133 = *(void *)v120;
                uint64_t v132 = *(void *)v131;
LABEL_174:
                *(void *)int v120 = v132;
                if (v129 >= 2)
                {
                  while (1)
                  {
                    unint64_t v137 = v130 - 1;
                    unint64_t v130 = (v130 - 1) >> 1;
                    unint64_t v135 = &v179[8 * v130];
                    uint64_t v138 = *(void *)v135;
                    unint64_t v139 = sub_1CD67FB9C(*(void **)v135);
                    __n128 result = sub_1CD67FB9C((void *)v133);
                    if (v139 == result)
                    {
                      unint64_t v140 = sub_1CD681020(*(char **)(v138 + 16), *(void *)(v138 + 24));
                      __n128 result = sub_1CD681020(*(char **)(v133 + 16), *(void *)(v133 + 24));
                      if (v140 >= result) {
                        break;
                      }
                      uint64_t v138 = *(void *)v135;
                    }
                    else if (v139 <= result)
                    {
                      break;
                    }
                    *(void *)uint64_t v131 = v138;
                    uint64_t v131 = &v179[8 * v130];
                    if (v137 <= 1) {
                      goto LABEL_176;
                    }
                  }
                }
                unint64_t v135 = v131;
LABEL_176:
                *(void *)unint64_t v135 = v133;
                uint64_t v117 = v184 - 8;
              }
            }
            else if (v134 > result)
            {
              goto LABEL_174;
            }
          }
        }
        if (v12-- <= 2) {
          return result;
        }
      }
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    __n128 v14 = &i[8 * ((unint64_t)v12 >> 1)];
    if ((unint64_t)v11 < 0x401)
    {
      sub_1CC9B22E0(v14, (void **)i, (void **)v9);
    }
    else
    {
      sub_1CC9B22E0(i, (void **)v14, (void **)v9);
      sub_1CC9B22E0((void *)i + 1, (void **)v14 - 1, (void **)v176);
      sub_1CC9B22E0((void *)i + 2, (void **)&i[8 * v13 + 8], (void **)v175);
      sub_1CC9B22E0((void *)v14 - 1, (void **)v14, (void **)&i[8 * v13 + 8]);
      uint64_t v15 = *(void *)i;
      *(void *)int i = *(void *)v14;
      *(void *)__n128 v14 = v15;
    }
    --a3;
    uint64_t v16 = *(void *)i;
    a2 = v183;
    if (a4) {
      goto LABEL_11;
    }
    uint64_t v46 = *((void *)i - 1);
    unint64_t v47 = sub_1CD67FB9C(*((void **)v10 - 1));
    unint64_t v48 = sub_1CD67FB9C((void *)v16);
    if (v47 == v48)
    {
      unint64_t v58 = sub_1CD681020(*(char **)(v46 + 16), *(void *)(v46 + 24));
      unint64_t v59 = sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24));
      uint64_t v16 = *(void *)v10;
      if (v58 < v59) {
        goto LABEL_11;
      }
LABEL_50:
      uint64_t v49 = *(void **)v9;
      unint64_t v50 = sub_1CD67FB9C((void *)v16);
      __n128 result = sub_1CD67FB9C(v49);
      if (v50 == result)
      {
        unint64_t v70 = sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24));
        __n128 result = sub_1CD681020((char *)v49[2], v49[3]);
        if (v70 < result)
        {
LABEL_52:
          for (int i = v10 + 8; ; i += 8)
          {
            uint64_t v51 = *(void *)i;
            unint64_t v52 = sub_1CD67FB9C((void *)v16);
            __n128 result = sub_1CD67FB9C((void *)v51);
            if (v52 == result)
            {
              unint64_t v53 = sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24));
              __n128 result = sub_1CD681020(*(char **)(v51 + 16), *(void *)(v51 + 24));
              if (v53 < result) {
                goto LABEL_57;
              }
            }
            else if (v52 > result)
            {
              goto LABEL_57;
            }
          }
        }
      }
      else if (v50 > result)
      {
        goto LABEL_52;
      }
      for (int i = v10 + 8; i < v183; i += 8)
      {
        uint64_t v71 = *(void *)i;
        unint64_t v72 = sub_1CD67FB9C((void *)v16);
        __n128 result = sub_1CD67FB9C((void *)v71);
        if (v72 == result)
        {
          unint64_t v73 = sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24));
          __n128 result = sub_1CD681020(*(char **)(v71 + 16), *(void *)(v71 + 24));
          if (v73 < result) {
            break;
          }
        }
        else if (v72 > result)
        {
          break;
        }
      }
LABEL_57:
      int j = v183;
      if (i >= v183) {
        goto LABEL_75;
      }
      for (int j = v178; ; j -= 8)
      {
        uint64_t v55 = *(void **)j;
        unint64_t v56 = sub_1CD67FB9C((void *)v16);
        __n128 result = sub_1CD67FB9C(v55);
        if (v56 == result) {
          break;
        }
        if (v56 <= result) {
          goto LABEL_75;
        }
LABEL_61:
        ;
      }
      unint64_t v57 = sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24));
      __n128 result = sub_1CD681020((char *)v55[2], v55[3]);
      if (v57 < result) {
        goto LABEL_61;
      }
LABEL_75:
      if (i < j)
      {
        uint64_t v60 = *(void *)i;
        *(void *)int i = *(void *)j;
        i += 8;
        *(void *)int j = v60;
        while (1)
        {
          uint64_t v61 = *(void *)i;
          unint64_t v62 = sub_1CD67FB9C((void *)v16);
          unint64_t v63 = sub_1CD67FB9C((void *)v61);
          if (v62 == v63)
          {
            unint64_t v64 = sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24));
            if (v64 < sub_1CD681020(*(char **)(v61 + 16), *(void *)(v61 + 24)))
            {
              do
              {
LABEL_71:
                while (1)
                {
                  unint64_t v66 = (void *)*((void *)j - 1);
                  j -= 8;
                  char v65 = v66;
                  unint64_t v67 = sub_1CD67FB9C((void *)v16);
                  __n128 result = sub_1CD67FB9C(v66);
                  if (v67 == result) {
                    break;
                  }
                  if (v67 <= result) {
                    goto LABEL_75;
                  }
                }
                unint64_t v68 = sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24));
                __n128 result = sub_1CD681020((char *)v65[2], v65[3]);
              }
              while (v68 < result);
              goto LABEL_75;
            }
          }
          else if (v62 > v63)
          {
            goto LABEL_71;
          }
          i += 8;
        }
      }
      char v69 = i - 8;
      BOOL v4 = i - 8 >= v10;
      BOOL v5 = i - 8 == v10;
      if (i - 8 != v10) {
        *(void *)uint64_t v10 = *(void *)v69;
      }
      a4 = 0;
      *(void *)char v69 = v16;
      char v9 = v178;
    }
    else
    {
      if (v47 <= v48) {
        goto LABEL_50;
      }
LABEL_11:
      for (uint64_t k = 8; ; k += 8)
      {
        uint64_t v18 = *(void *)&v10[k];
        unint64_t v19 = sub_1CD67FB9C((void *)v18);
        unint64_t v20 = sub_1CD67FB9C((void *)v16);
        if (v19 == v20) {
          break;
        }
        if (v19 <= v20) {
          goto LABEL_16;
        }
LABEL_14:
        ;
      }
      unint64_t v21 = sub_1CD681020(*(char **)(v18 + 16), *(void *)(v18 + 24));
      if (v21 < sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24))) {
        goto LABEL_14;
      }
LABEL_16:
      uint64_t v22 = &v10[k];
      int m = v9;
      BOOL v5 = k == 8;
      a2 = v183;
      if (!v5)
      {
        while (1)
        {
          uint64_t v24 = *(void *)m;
          unint64_t v25 = sub_1CD67FB9C(*(void **)m);
          unint64_t v26 = sub_1CD67FB9C((void *)v16);
          if (v25 == v26)
          {
            unint64_t v27 = sub_1CD681020(*(char **)(v24 + 16), *(void *)(v24 + 24));
            if (v27 < sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24))) {
              goto LABEL_30;
            }
          }
          else if (v25 > v26)
          {
            goto LABEL_30;
          }
          m -= 8;
        }
      }
      int m = v183;
      if (v22 < v183)
      {
        for (int m = v9; ; m -= 8)
        {
          uint64_t v28 = *(void *)m;
          unint64_t v29 = sub_1CD67FB9C(*(void **)m);
          unint64_t v30 = sub_1CD67FB9C((void *)v16);
          if (v29 == v30)
          {
            unint64_t v31 = sub_1CD681020(*(char **)(v28 + 16), *(void *)(v28 + 24));
            unint64_t v32 = sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24));
            if (v22 >= m || v31 < v32) {
              break;
            }
          }
          else if (v22 >= m || v29 > v30)
          {
            break;
          }
        }
      }
LABEL_30:
      int i = v22;
      if (v22 >= m) {
        goto LABEL_42;
      }
      char v33 = m;
      while (2)
      {
        uint64_t v34 = *(void *)i;
        *(void *)int i = *(void *)v33;
        i += 8;
        *(void *)char v33 = v34;
        while (2)
        {
          uint64_t v35 = *(void *)i;
          unint64_t v36 = sub_1CD67FB9C(*(void **)i);
          unint64_t v37 = sub_1CD67FB9C((void *)v16);
          if (v36 != v37)
          {
            if (v36 <= v37) {
              goto LABEL_37;
            }
            goto LABEL_35;
          }
          unint64_t v38 = sub_1CD681020(*(char **)(v35 + 16), *(void *)(v35 + 24));
          if (v38 < sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24)))
          {
LABEL_35:
            i += 8;
            continue;
          }
          break;
        }
        do
        {
LABEL_37:
          while (1)
          {
            uint64_t v40 = (void *)*((void *)v33 - 1);
            v33 -= 8;
            uint64_t v39 = v40;
            unint64_t v41 = sub_1CD67FB9C(v40);
            unint64_t v42 = sub_1CD67FB9C((void *)v16);
            if (v41 == v42) {
              break;
            }
            if (v41 > v42) {
              goto LABEL_41;
            }
          }
          unint64_t v43 = sub_1CD681020((char *)v39[2], v39[3]);
        }
        while (v43 >= sub_1CD681020(*(char **)(v16 + 16), *(void *)(v16 + 24)));
LABEL_41:
        if (i < v33) {
          continue;
        }
        break;
      }
LABEL_42:
      unsigned int v44 = i - 8;
      if (i - 8 != v10) {
        *(void *)uint64_t v10 = *(void *)v44;
      }
      *(void *)unsigned int v44 = v16;
      char v9 = v178;
      if (v22 < m)
      {
LABEL_47:
        __n128 result = sub_1CC9B14B4(v10, i - 8, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v45 = sub_1CC9B24AC(v10, i - 8);
        __n128 result = sub_1CC9B24AC(i, v183);
        if (result)
        {
          int i = v10;
          a2 = v44;
          if (v45) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v45) {
          goto LABEL_47;
        }
      }
    }
  }
  int v74 = i + 8;
  BOOL v76 = i == a2 || v74 == a2;
  if ((a4 & 1) == 0)
  {
    if (v76) {
      return result;
    }
    while (1)
    {
      int v142 = i;
      int v143 = v74;
      uint64_t v145 = *(void *)i;
      unint64_t v144 = (void *)*((void *)i + 1);
      unint64_t v146 = sub_1CD67FB9C(v144);
      __n128 result = sub_1CD67FB9C((void *)v145);
      if (v146 == result)
      {
        unint64_t v152 = sub_1CD681020((char *)v144[2], v144[3]);
        __n128 result = sub_1CD681020(*(char **)(v145 + 16), *(void *)(v145 + 24));
        if (v152 < result)
        {
          unint64_t v144 = *(void **)v143;
          do
          {
LABEL_193:
            while (1)
            {
              size_t v147 = v142;
              *((void *)v142 + 1) = *(void *)v142;
              int v149 = (void *)*((void *)v142 - 1);
              v142 -= 8;
              uint64_t v148 = v149;
              unint64_t v150 = sub_1CD67FB9C(v144);
              __n128 result = sub_1CD67FB9C(v149);
              if (v150 == result) {
                break;
              }
              if (v150 <= result) {
                goto LABEL_198;
              }
            }
            unint64_t v151 = sub_1CD681020((char *)v144[2], v144[3]);
            __n128 result = sub_1CD681020((char *)v148[2], v148[3]);
          }
          while (v151 < result);
LABEL_198:
          *(void *)size_t v147 = v144;
          a2 = v183;
        }
      }
      else if (v146 > result)
      {
        goto LABEL_193;
      }
      int i = v143;
      int v74 = v143 + 8;
      if (v143 + 8 == a2) {
        return result;
      }
    }
  }
  if (v76) {
    return result;
  }
  uint64_t v77 = 0;
  int v78 = i;
  while (2)
  {
    int v79 = v78;
    int v78 = v74;
    uint64_t v81 = *(void *)v79;
    uint64_t v80 = *((void *)v79 + 1);
    unint64_t v82 = sub_1CD67FB9C((void *)v80);
    __n128 result = sub_1CD67FB9C((void *)v81);
    if (v82 == result)
    {
      unint64_t v89 = sub_1CD681020(*(char **)(v80 + 16), *(void *)(v80 + 24));
      __n128 result = sub_1CD681020(*(char **)(v81 + 16), *(void *)(v81 + 24));
      if (v89 >= result) {
        goto LABEL_119;
      }
      uint64_t v80 = *(void *)v78;
      uint64_t v81 = *(void *)v79;
    }
    else if (v82 <= result)
    {
      goto LABEL_119;
    }
    *((void *)v79 + 1) = v81;
    char v83 = i;
    if (v79 == i) {
      goto LABEL_118;
    }
    uint64_t v84 = v77;
    while (2)
    {
      uint64_t v85 = &i[v84];
      uint64_t v86 = *(void *)&i[v84 - 8];
      unint64_t v87 = sub_1CD67FB9C((void *)v80);
      __n128 result = sub_1CD67FB9C((void *)v86);
      if (v87 != result)
      {
        if (v87 <= result)
        {
          char v83 = &i[v84];
          goto LABEL_117;
        }
LABEL_113:
        v79 -= 8;
        *(void *)uint64_t v85 = v86;
        v84 -= 8;
        if (!v84)
        {
          char v83 = i;
          goto LABEL_117;
        }
        continue;
      }
      break;
    }
    unint64_t v88 = sub_1CD681020(*(char **)(v80 + 16), *(void *)(v80 + 24));
    __n128 result = sub_1CD681020(*(char **)(v86 + 16), *(void *)(v86 + 24));
    if (v88 < result)
    {
      uint64_t v86 = *((void *)v85 - 1);
      goto LABEL_113;
    }
    char v83 = v79;
LABEL_117:
    a2 = v183;
LABEL_118:
    *(void *)char v83 = v80;
LABEL_119:
    int v74 = v78 + 8;
    v77 += 8;
    if (v78 + 8 != a2) {
      continue;
    }
    return result;
  }
}

unint64_t sub_1CC9B22E0(void *a1, void **a2, void **a3)
{
  BOOL v4 = a2;
  BOOL v5 = a1;
  unint64_t v6 = *a2;
  uint64_t v7 = *a1;
  unint64_t v8 = sub_1CD67FB9C(*a2);
  unint64_t v9 = sub_1CD67FB9C((void *)v7);
  if (v8 != v9)
  {
    if (v8 <= v9) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v20 = (uint64_t)*a3;
    unint64_t v21 = sub_1CD67FB9C(*a3);
    unint64_t result = sub_1CD67FB9C(v6);
    if (v21 == result)
    {
      unint64_t v24 = sub_1CD681020(*(char **)(v20 + 16), *(void *)(v20 + 24));
      unint64_t result = sub_1CD681020((char *)v6[2], v6[3]);
      if (v24 < result) {
        goto LABEL_10;
      }
      unint64_t v6 = *v4;
    }
    else if (v21 > result)
    {
LABEL_10:
      BOOL v4 = a3;
LABEL_11:
      uint64_t v22 = (void *)*v5;
      *BOOL v5 = *v4;
      llvm::InlineAdvice *v4 = v22;
      return result;
    }
    unint64_t v25 = (void *)*v5;
    *BOOL v5 = v6;
    llvm::InlineAdvice *v4 = v25;
    unint64_t v26 = *a3;
    unint64_t v27 = sub_1CD67FB9C(*a3);
    unint64_t result = sub_1CD67FB9C(v25);
    BOOL v18 = v27 > result;
    if (v27 == result)
    {
      unint64_t v19 = sub_1CD681020((char *)v26[2], v26[3]);
      unint64_t result = sub_1CD681020((char *)v25[2], v25[3]);
      BOOL v5 = v4;
      BOOL v4 = a3;
LABEL_22:
      if (v19 >= result) {
        return result;
      }
      goto LABEL_11;
    }
    BOOL v5 = v4;
    BOOL v4 = a3;
    goto LABEL_19;
  }
  unint64_t v10 = sub_1CD681020((char *)v6[2], v6[3]);
  unint64_t v11 = sub_1CD681020(*(char **)(v7 + 16), *(void *)(v7 + 24));
  unint64_t v6 = *v4;
  if (v10 < v11) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v12 = *a3;
  unint64_t v13 = sub_1CD67FB9C(*a3);
  unint64_t result = sub_1CD67FB9C(v6);
  if (v13 == result)
  {
    unint64_t v23 = sub_1CD681020((char *)v12[2], v12[3]);
    unint64_t result = sub_1CD681020((char *)v6[2], v6[3]);
    if (v23 >= result) {
      return result;
    }
    unint64_t v6 = *v4;
    uint64_t v12 = *a3;
  }
  else if (v13 <= result)
  {
    return result;
  }
  llvm::InlineAdvice *v4 = v12;
  *a3 = v6;
  uint64_t v15 = (uint64_t)*v4;
  uint64_t v16 = (void *)*v5;
  unint64_t v17 = sub_1CD67FB9C(*v4);
  unint64_t result = sub_1CD67FB9C(v16);
  BOOL v18 = v17 > result;
  if (v17 == result)
  {
    unint64_t v19 = sub_1CD681020(*(char **)(v15 + 16), *(void *)(v15 + 24));
    unint64_t result = sub_1CD681020((char *)v16[2], v16[3]);
    goto LABEL_22;
  }
LABEL_19:
  if (v18) {
    goto LABEL_11;
  }
  return result;
}

BOOL sub_1CC9B24AC(char *a1, char *a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v22 = *((void *)a2 - 1);
      uint64_t v23 = *(void *)a1;
      unint64_t v24 = sub_1CD67FB9C((void *)v22);
      unint64_t v25 = sub_1CD67FB9C((void *)v23);
      if (v24 != v25)
      {
        if (v24 <= v25) {
          return 1;
        }
        goto LABEL_27;
      }
      unint64_t v43 = sub_1CD681020(*(char **)(v22 + 16), *(void *)(v22 + 24));
      if (v43 < sub_1CD681020(*(char **)(v23 + 16), *(void *)(v23 + 24)))
      {
        uint64_t v23 = *(void *)a1;
        uint64_t v22 = *((void *)a2 - 1);
LABEL_27:
        *(void *)a1 = v22;
        *((void *)a2 - 1) = v23;
        return 1;
      }
      return 1;
    case 3:
      sub_1CC9B22E0(a1, (void **)a1 + 1, (void **)a2 - 1);
      return 1;
    case 4:
      sub_1CC9B288C((uint64_t *)a1, (void **)a1 + 1, (void **)a1 + 2, (void **)a2 - 1);
      return 1;
    case 5:
      unint64_t v26 = (uint64_t *)(a1 + 8);
      unint64_t v27 = (uint64_t *)(a1 + 16);
      uint64_t v28 = (void **)(a1 + 24);
      sub_1CC9B288C((uint64_t *)a1, (void **)a1 + 1, (void **)a1 + 2, (void **)a1 + 3);
      uint64_t v29 = *((void *)a2 - 1);
      uint64_t v30 = *((void *)a1 + 3);
      unint64_t v31 = sub_1CD67FB9C((void *)v29);
      unint64_t v32 = sub_1CD67FB9C((void *)v30);
      if (v31 == v32)
      {
        unint64_t v44 = sub_1CD681020(*(char **)(v29 + 16), *(void *)(v29 + 24));
        if (v44 >= sub_1CD681020(*(char **)(v30 + 16), *(void *)(v30 + 24))) {
          return 1;
        }
        uint64_t v30 = (uint64_t)*v28;
        uint64_t v29 = *((void *)a2 - 1);
      }
      else if (v31 <= v32)
      {
        return 1;
      }
      *uint64_t v28 = (void *)v29;
      *((void *)a2 - 1) = v30;
      uint64_t v33 = (uint64_t)*v28;
      uint64_t v34 = *v27;
      unint64_t v35 = sub_1CD67FB9C(*v28);
      unint64_t v36 = sub_1CD67FB9C((void *)v34);
      if (v35 == v36)
      {
        unint64_t v45 = sub_1CD681020(*(char **)(v33 + 16), *(void *)(v33 + 24));
        if (v45 >= sub_1CD681020(*(char **)(v34 + 16), *(void *)(v34 + 24))) {
          return 1;
        }
        uint64_t v34 = *v27;
        uint64_t v33 = (uint64_t)*v28;
      }
      else if (v35 <= v36)
      {
        return 1;
      }
      *unint64_t v27 = v33;
      *uint64_t v28 = (void *)v34;
      uint64_t v37 = *v26;
      unint64_t v38 = sub_1CD67FB9C((void *)v33);
      unint64_t v39 = sub_1CD67FB9C((void *)v37);
      if (v38 == v39)
      {
        unint64_t v46 = sub_1CD681020(*(char **)(v33 + 16), *(void *)(v33 + 24));
        if (v46 >= sub_1CD681020(*(char **)(v37 + 16), *(void *)(v37 + 24))) {
          return 1;
        }
        uint64_t v37 = *v26;
        uint64_t v33 = *v27;
      }
      else if (v38 <= v39)
      {
        return 1;
      }
      *((void *)a1 + 1) = v33;
      *((void *)a1 + 2) = v37;
      uint64_t v40 = *(void *)a1;
      unint64_t v41 = sub_1CD67FB9C((void *)v33);
      unint64_t v42 = sub_1CD67FB9C((void *)v40);
      if (v41 != v42)
      {
        if (v41 <= v42) {
          return 1;
        }
        goto LABEL_36;
      }
      unint64_t v47 = sub_1CD681020(*(char **)(v33 + 16), *(void *)(v33 + 24));
      if (v47 < sub_1CD681020(*(char **)(v40 + 16), *(void *)(v40 + 24)))
      {
        uint64_t v40 = *(void *)a1;
        uint64_t v33 = *((void *)a1 + 1);
LABEL_36:
        *(void *)a1 = v33;
        *((void *)a1 + 1) = v40;
      }
      return 1;
    default:
      unint64_t v6 = a1 + 16;
      sub_1CC9B22E0(a1, (void **)a1 + 1, (void **)a1 + 2);
      uint64_t v7 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  do
  {
    uint64_t v10 = *(void *)v7;
    uint64_t v11 = *(void *)v6;
    unint64_t v12 = sub_1CD67FB9C(*(void **)v7);
    unint64_t v13 = sub_1CD67FB9C((void *)v11);
    if (v12 == v13)
    {
      unint64_t v21 = sub_1CD681020(*(char **)(v10 + 16), *(void *)(v10 + 24));
      if (v21 >= sub_1CD681020(*(char **)(v11 + 16), *(void *)(v11 + 24))) {
        goto LABEL_18;
      }
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = *(void *)v6;
    }
    else if (v12 <= v13)
    {
      goto LABEL_18;
    }
    *(void *)uint64_t v7 = v11;
    __n128 v14 = a1;
    if (v6 == a1) {
      goto LABEL_17;
    }
    int v48 = v9;
    uint64_t v15 = v8;
    while (1)
    {
      uint64_t v16 = &a1[v15];
      uint64_t v17 = *(void *)&a1[v15 + 8];
      unint64_t v18 = sub_1CD67FB9C((void *)v10);
      unint64_t v19 = sub_1CD67FB9C((void *)v17);
      if (v18 != v19)
      {
        if (v18 <= v19)
        {
          __n128 v14 = &a1[v15 + 16];
          goto LABEL_16;
        }
        goto LABEL_12;
      }
      unint64_t v20 = sub_1CD681020(*(char **)(v10 + 16), *(void *)(v10 + 24));
      if (v20 >= sub_1CD681020(*(char **)(v17 + 16), *(void *)(v17 + 24))) {
        break;
      }
      uint64_t v17 = *((void *)v16 + 1);
LABEL_12:
      v6 -= 8;
      *((void *)v16 + 2) = v17;
      v15 -= 8;
      if (v15 == -16)
      {
        __n128 v14 = a1;
        goto LABEL_16;
      }
    }
    __n128 v14 = v6;
LABEL_16:
    int v9 = v48;
LABEL_17:
    *(void *)__n128 v14 = v10;
    if (++v9 == 8) {
      return v7 + 8 == a2;
    }
LABEL_18:
    unint64_t v6 = v7;
    v8 += 8;
    BOOL result = 1;
    v7 += 8;
  }
  while (v7 != a2);
  return result;
}

unint64_t sub_1CC9B288C(uint64_t *a1, void **a2, void **a3, void **a4)
{
  sub_1CC9B22E0(a1, a2, a3);
  uint64_t v8 = (uint64_t)*a4;
  int v9 = *a3;
  unint64_t v10 = sub_1CD67FB9C(*a4);
  unint64_t result = sub_1CD67FB9C(v9);
  if (v10 == result)
  {
    unint64_t v12 = sub_1CD681020(*(char **)(v8 + 16), *(void *)(v8 + 24));
    unint64_t result = sub_1CD681020((char *)v9[2], v9[3]);
    if (v12 >= result) {
      return result;
    }
    int v9 = *a3;
    uint64_t v8 = (uint64_t)*a4;
  }
  else if (v10 <= result)
  {
    return result;
  }
  *a3 = (void *)v8;
  *a4 = v9;
  unint64_t v13 = *a3;
  __n128 v14 = *a2;
  unint64_t v15 = sub_1CD67FB9C(*a3);
  unint64_t result = sub_1CD67FB9C(v14);
  if (v15 == result)
  {
    unint64_t v19 = sub_1CD681020((char *)v13[2], v13[3]);
    unint64_t result = sub_1CD681020((char *)v14[2], v14[3]);
    if (v19 >= result) {
      return result;
    }
    __n128 v14 = *a2;
    unint64_t v13 = *a3;
  }
  else if (v15 <= result)
  {
    return result;
  }
  *a2 = v13;
  *a3 = v14;
  uint64_t v16 = *a2;
  uint64_t v17 = *a1;
  unint64_t v18 = sub_1CD67FB9C(*a2);
  unint64_t result = sub_1CD67FB9C((void *)v17);
  if (v18 == result)
  {
    unint64_t v20 = sub_1CD681020((char *)v16[2], v16[3]);
    unint64_t result = sub_1CD681020(*(char **)(v17 + 16), *(void *)(v17 + 24));
    if (v20 < result)
    {
      uint64_t v17 = *a1;
      uint64_t v16 = *a2;
      goto LABEL_10;
    }
  }
  else if (v18 > result)
  {
LABEL_10:
    *a1 = (uint64_t)v16;
    *a2 = (void *)v17;
  }
  return result;
}

void sub_1CC9B29DC()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (dword_1EBCE3F80)
  {
    int v1 = 0;
    uint64_t v0 = 0;
    operator new[]();
  }
}

void sub_1CC9B2D28(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                unint64_t v66 = a2[-1].n128_u64[0];
                unint64_t v67 = a2[-1].n128_u64[1];
                unint64_t v68 = a2 - 1;
                unint64_t v69 = v10->n128_u64[1];
                BOOL v70 = v66 > v10->n128_u64[0];
                BOOL v5 = v67 == v69;
                BOOL v71 = v67 > v69;
                if (!v5) {
                  BOOL v70 = v71;
                }
                if (v70)
                {
                  __n128 v169 = *v10;
                  __n128 *v10 = *v68;
                  *unint64_t v68 = v169;
                }
                break;
              case 3:
                sub_1CC9B366C(v10, (__n128 *)v10[1].n128_u64, (__n128 *)a2[-1].n128_u64);
                break;
              case 4:
                sub_1CC9B3A04(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                unint64_t v72 = v10 + 1;
                unint64_t v73 = v10 + 2;
                int v74 = v10 + 3;
                sub_1CC9B3A04(v10, v10 + 1, v10 + 2, v10 + 3);
                unint64_t v75 = a2[-1].n128_u64[0];
                unint64_t v76 = a2[-1].n128_u64[1];
                uint64_t v77 = a2 - 1;
                unint64_t v78 = v10[3].n128_u64[1];
                BOOL v79 = v75 > v10[3].n128_u64[0];
                BOOL v5 = v76 == v78;
                BOOL v80 = v76 > v78;
                if (!v5) {
                  BOOL v79 = v80;
                }
                if (v79)
                {
                  __n128 v81 = *v74;
                  __n128 *v74 = *v77;
                  *uint64_t v77 = v81;
                  unint64_t v82 = v10[3].n128_u64[1];
                  unint64_t v83 = v10[2].n128_u64[1];
                  BOOL v5 = v82 == v83;
                  BOOL v84 = v82 > v83;
                  if (v5) {
                    BOOL v84 = v10[3].n128_u64[0] > v10[2].n128_u64[0];
                  }
                  if (v84)
                  {
                    __n128 v85 = *v73;
                    __n128 *v73 = *v74;
                    __n128 *v74 = v85;
                    unint64_t v86 = v10[2].n128_u64[1];
                    unint64_t v87 = v10[1].n128_u64[1];
                    BOOL v5 = v86 == v87;
                    BOOL v88 = v86 > v87;
                    if (v5) {
                      BOOL v88 = v10[2].n128_u64[0] > v10[1].n128_u64[0];
                    }
                    if (v88)
                    {
                      __n128 v89 = *v72;
                      *unint64_t v72 = *v73;
                      __n128 *v73 = v89;
                      unint64_t v90 = v10[1].n128_u64[1];
                      unint64_t v91 = v10->n128_u64[1];
                      BOOL v5 = v90 == v91;
                      BOOL v92 = v90 > v91;
                      if (v5) {
                        BOOL v92 = v10[1].n128_u64[0] > v10->n128_u64[0];
                      }
                      if (v92)
                      {
                        __n128 v170 = *v10;
                        __n128 *v10 = *v72;
                        *unint64_t v72 = v170;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            int64_t v93 = v10 + 1;
            BOOL v95 = v10 == a2 || v93 == a2;
            if (a4)
            {
              if (!v95)
              {
                uint64_t v96 = 0;
                int v97 = v10;
                do
                {
                  unint64_t v99 = v97[1].n128_u64[0];
                  unint64_t v98 = v97[1].n128_u64[1];
                  unint64_t v101 = v97->n128_u64[0];
                  unint64_t v100 = v97->n128_u64[1];
                  int v97 = v93;
                  BOOL v102 = v99 > v101;
                  BOOL v5 = v98 == v100;
                  BOOL v103 = v98 > v100;
                  if (!v5) {
                    BOOL v102 = v103;
                  }
                  if (v102)
                  {
                    uint64_t v104 = v96;
                    while (1)
                    {
                      uint64_t v105 = (char *)v10 + v104;
                      *(__n128 *)((char *)v10 + v104 + 16) = *(__n128 *)((char *)v10 + v104);
                      if (!v104) {
                        break;
                      }
                      unint64_t v106 = *((void *)v105 - 1);
                      BOOL v107 = v99 > *((void *)v105 - 2);
                      BOOL v5 = v98 == v106;
                      BOOL v108 = v98 > v106;
                      if (!v5) {
                        BOOL v107 = v108;
                      }
                      v104 -= 16;
                      if (!v107)
                      {
                        unint64_t v109 = (__n128 *)((char *)v10 + v104 + 16);
                        goto LABEL_119;
                      }
                    }
                    unint64_t v109 = v10;
LABEL_119:
                    v109->n128_u64[0] = v99;
                    v109->n128_u64[1] = v98;
                  }
                  int64_t v93 = v97 + 1;
                  v96 += 16;
                }
                while (&v97[1] != a2);
              }
            }
            else if (!v95)
            {
              do
              {
                unint64_t v156 = a1[1].n128_u64[0];
                unint64_t v155 = a1[1].n128_u64[1];
                unint64_t v158 = a1->n128_u64[0];
                unint64_t v157 = a1->n128_u64[1];
                a1 = v93;
                BOOL v159 = v156 > v158;
                BOOL v5 = v155 == v157;
                BOOL v160 = v155 > v157;
                if (!v5) {
                  BOOL v159 = v160;
                }
                if (v159)
                {
                  unint64_t v161 = a1;
                  do
                  {
                    *unint64_t v161 = v161[-1];
                    unint64_t v163 = v161[-2].n128_u64[0];
                    unint64_t v162 = v161[-2].n128_u64[1];
                    --v161;
                    BOOL v164 = v156 > v163;
                    BOOL v5 = v155 == v162;
                    BOOL v165 = v155 > v162;
                    if (v5) {
                      BOOL v165 = v164;
                    }
                  }
                  while (v165);
                  v161->n128_u64[0] = v156;
                  v161->n128_u64[1] = v155;
                }
                int64_t v93 = a1 + 1;
              }
              while (&a1[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v110 = (unint64_t)(v12 - 2) >> 1;
              int64_t v111 = v110;
              do
              {
                int64_t v112 = v111;
                if (v110 >= v111)
                {
                  uint64_t v113 = (2 * v111) | 1;
                  unint64_t v114 = &v10[v113];
                  if (2 * v112 + 2 < v12)
                  {
                    unint64_t v115 = v114[1].n128_u64[1];
                    unint64_t v118 = v114->n128_u64[0];
                    unint64_t v116 = v114->n128_u64[1];
                    BOOL v5 = v116 == v115;
                    BOOL v117 = v116 > v115;
                    if (v5) {
                      BOOL v117 = v114->n128_u64[0] > v114[1].n128_u64[0];
                    }
                    if (v117)
                    {
                      unint64_t v118 = v114[1].n128_u64[0];
                      ++v114;
                      uint64_t v113 = 2 * v112 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v118 = v114->n128_u64[0];
                  }
                  uint64_t v119 = &v10[v112];
                  unint64_t v120 = v114->n128_u64[1];
                  __n128 v121 = *v119;
                  unint64_t v122 = v119->n128_u64[1];
                  unint64_t v123 = v119->n128_u64[0];
                  BOOL v124 = v118 > v119->n128_u64[0];
                  BOOL v5 = v120 == v122;
                  BOOL v125 = v120 > v122;
                  if (!v5) {
                    BOOL v124 = v125;
                  }
                  if (!v124)
                  {
                    do
                    {
                      unint64_t v126 = v119;
                      uint64_t v119 = v114;
                      *unint64_t v126 = *v114;
                      if (v110 < v113) {
                        break;
                      }
                      uint64_t v127 = (2 * v113) | 1;
                      unint64_t v114 = &v10[v127];
                      uint64_t v113 = 2 * v113 + 2;
                      if (v113 < v12)
                      {
                        unint64_t v128 = v114[1].n128_u64[1];
                        unint64_t v129 = v114->n128_u64[1];
                        BOOL v5 = v129 == v128;
                        BOOL v130 = v129 > v128;
                        if (v5) {
                          BOOL v130 = v114->n128_u64[0] > v114[1].n128_u64[0];
                        }
                        BOOL v131 = !v130;
                        unint64_t v132 = v130 ? v114[1].n128_u64[0] : v114->n128_u64[0];
                        if (v131) {
                          uint64_t v113 = v127;
                        }
                        else {
                          ++v114;
                        }
                      }
                      else
                      {
                        unint64_t v132 = v114->n128_u64[0];
                        uint64_t v113 = v127;
                      }
                      unint64_t v133 = v114->n128_u64[1];
                      BOOL v134 = v132 > v123;
                      BOOL v5 = v133 == v122;
                      BOOL v135 = v133 > v122;
                      if (v5) {
                        BOOL v135 = v134;
                      }
                    }
                    while (!v135);
                    __n128 *v119 = v121;
                  }
                }
                int64_t v111 = v112 - 1;
              }
              while (v112);
              do
              {
                uint64_t v136 = 0;
                __n128 v171 = *v10;
                unint64_t v137 = v10;
                do
                {
                  uint64_t v138 = &v137[v136 + 1];
                  uint64_t v139 = (2 * v136) | 1;
                  uint64_t v140 = 2 * v136 + 2;
                  if (v140 < v12)
                  {
                    unint64_t v141 = v138[1].n128_u64[1];
                    unint64_t v142 = v138->n128_u64[1];
                    BOOL v5 = v142 == v141;
                    BOOL v143 = v142 > v141;
                    if (v5) {
                      BOOL v143 = v138->n128_u64[0] > v138[1].n128_u64[0];
                    }
                    if (v143)
                    {
                      ++v138;
                      uint64_t v139 = v140;
                    }
                  }
                  *unint64_t v137 = *v138;
                  unint64_t v137 = v138;
                  uint64_t v136 = v139;
                }
                while (v139 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v138 == --a2)
                {
                  *uint64_t v138 = v171;
                }
                else
                {
                  *uint64_t v138 = *a2;
                  *a2 = v171;
                  uint64_t v144 = (char *)v138 - (char *)v10 + 16;
                  if (v144 >= 17)
                  {
                    unint64_t v145 = (((unint64_t)v144 >> 4) - 2) >> 1;
                    unint64_t v146 = &v10[v145];
                    unint64_t v147 = v146->n128_u64[1];
                    unint64_t v149 = v138->n128_u64[0];
                    unint64_t v148 = v138->n128_u64[1];
                    BOOL v5 = v147 == v148;
                    BOOL v150 = v147 > v148;
                    if (v5) {
                      BOOL v150 = v146->n128_u64[0] > v138->n128_u64[0];
                    }
                    if (v150)
                    {
                      do
                      {
                        unint64_t v151 = v138;
                        uint64_t v138 = v146;
                        __n128 *v151 = *v146;
                        if (!v145) {
                          break;
                        }
                        unint64_t v145 = (v145 - 1) >> 1;
                        unint64_t v146 = &v10[v145];
                        unint64_t v152 = v146->n128_u64[1];
                        BOOL v5 = v152 == v148;
                        BOOL v153 = v152 > v148;
                        if (v5) {
                          BOOL v153 = v146->n128_u64[0] > v149;
                        }
                      }
                      while (v153);
                      v138->n128_u64[0] = v149;
                      v138->n128_u64[1] = v148;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          __n128 v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x801)
          {
            sub_1CC9B366C(a1, (__n128 *)a1[(unint64_t)v12 >> 1].n128_u64, (__n128 *)a2[-1].n128_u64);
            sub_1CC9B366C((__n128 *)a1[1].n128_u64, (__n128 *)v14[-1].n128_u64, (__n128 *)a2[-2].n128_u64);
            sub_1CC9B366C((__n128 *)a1[2].n128_u64, (__n128 *)a1[v13 + 1].n128_u64, (__n128 *)a2[-3].n128_u64);
            sub_1CC9B366C((__n128 *)v14[-1].n128_u64, v14, (__n128 *)a1[v13 + 1].n128_u64);
            __n128 v166 = *a1;
            *a1 = *v14;
            *__n128 v14 = v166;
          }
          else
          {
            sub_1CC9B366C((__n128 *)a1[(unint64_t)v12 >> 1].n128_u64, a1, (__n128 *)a2[-1].n128_u64);
          }
          --a3;
          unint64_t v15 = a1->n128_u64[0];
          if (a4)
          {
            unint64_t v16 = a1->n128_u64[1];
            break;
          }
          unint64_t v16 = a1->n128_u64[1];
          unint64_t v17 = a1[-1].n128_u64[1];
          BOOL v5 = v17 == v16;
          BOOL v18 = v17 > v16;
          if (v5) {
            BOOL v18 = a1[-1].n128_u64[0] > v15;
          }
          if (v18) {
            break;
          }
          unint64_t v43 = a2[-1].n128_u64[1];
          BOOL v5 = v16 == v43;
          BOOL v44 = v16 > v43;
          if (v5) {
            BOOL v44 = v15 > a2[-1].n128_u64[0];
          }
          if (v44)
          {
            unint64_t v10 = a1;
            do
            {
              unint64_t v45 = v10[1].n128_u64[0];
              unint64_t v46 = v10[1].n128_u64[1];
              ++v10;
              BOOL v47 = v15 > v45;
              BOOL v5 = v16 == v46;
              BOOL v48 = v16 > v46;
              if (!v5) {
                BOOL v47 = v48;
              }
            }
            while (!v47);
          }
          else
          {
            uint64_t v49 = a1 + 1;
            do
            {
              unint64_t v10 = v49;
              if (v49 >= a2) {
                break;
              }
              unint64_t v50 = v49->n128_u64[1];
              BOOL v51 = v15 > v10->n128_u64[0];
              BOOL v5 = v16 == v50;
              BOOL v52 = v16 > v50;
              if (!v5) {
                BOOL v51 = v52;
              }
              uint64_t v49 = v10 + 1;
            }
            while (!v51);
          }
          unint64_t v53 = a2;
          if (v10 < a2)
          {
            unint64_t v53 = a2;
            do
            {
              unint64_t v54 = v53[-1].n128_u64[0];
              unint64_t v55 = v53[-1].n128_u64[1];
              --v53;
              BOOL v56 = v15 > v54;
              BOOL v5 = v16 == v55;
              BOOL v57 = v16 > v55;
              if (!v5) {
                BOOL v56 = v57;
              }
            }
            while (v56);
          }
          while (v10 < v53)
          {
            __n128 v168 = *v10;
            __n128 *v10 = *v53;
            *unint64_t v53 = v168;
            do
            {
              unint64_t v58 = v10[1].n128_u64[0];
              unint64_t v59 = v10[1].n128_u64[1];
              ++v10;
              BOOL v60 = v15 > v58;
              BOOL v5 = v16 == v59;
              BOOL v61 = v16 > v59;
              if (!v5) {
                BOOL v60 = v61;
              }
            }
            while (!v60);
            do
            {
              unint64_t v62 = v53[-1].n128_u64[0];
              unint64_t v63 = v53[-1].n128_u64[1];
              --v53;
              BOOL v64 = v15 > v62;
              BOOL v5 = v16 == v63;
              BOOL v65 = v16 > v63;
              if (!v5) {
                BOOL v64 = v65;
              }
            }
            while (v64);
          }
          BOOL v4 = &v10[-1] >= a1;
          BOOL v5 = &v10[-1] == a1;
          if (&v10[-1] != a1) {
            *a1 = v10[-1];
          }
          a4 = 0;
          v10[-1].n128_u64[0] = v15;
          v10[-1].n128_u64[1] = v16;
        }
        uint64_t v19 = 0;
        do
        {
          unint64_t v20 = a1[v19 + 1].n128_u64[1];
          BOOL v21 = a1[v19 + 1].n128_u64[0] > v15;
          BOOL v5 = v20 == v16;
          BOOL v22 = v20 > v16;
          if (!v5) {
            BOOL v21 = v22;
          }
          ++v19;
        }
        while (v21);
        uint64_t v23 = &a1[v19];
        unint64_t v24 = a2;
        if (v19 == 1)
        {
          unint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            unint64_t v29 = v24[-1].n128_u64[0];
            unint64_t v30 = v24[-1].n128_u64[1];
            --v24;
            BOOL v31 = v29 > v15;
            BOOL v5 = v30 == v16;
            BOOL v32 = v30 > v16;
            if (!v5) {
              BOOL v31 = v32;
            }
          }
          while (!v31);
        }
        else
        {
          do
          {
            unint64_t v25 = v24[-1].n128_u64[0];
            unint64_t v26 = v24[-1].n128_u64[1];
            --v24;
            BOOL v27 = v25 > v15;
            BOOL v5 = v26 == v16;
            BOOL v28 = v26 > v16;
            if (!v5) {
              BOOL v27 = v28;
            }
          }
          while (!v27);
        }
        unint64_t v10 = v23;
        if (v23 < v24)
        {
          uint64_t v33 = v24;
          do
          {
            __n128 v167 = *v10;
            __n128 *v10 = *v33;
            __n128 *v33 = v167;
            do
            {
              unint64_t v34 = v10[1].n128_u64[0];
              unint64_t v35 = v10[1].n128_u64[1];
              ++v10;
              BOOL v36 = v34 > v15;
              BOOL v5 = v35 == v16;
              BOOL v37 = v35 > v16;
              if (!v5) {
                BOOL v36 = v37;
              }
            }
            while (v36);
            do
            {
              unint64_t v38 = v33[-1].n128_u64[0];
              unint64_t v39 = v33[-1].n128_u64[1];
              --v33;
              BOOL v40 = v38 > v15;
              BOOL v5 = v39 == v16;
              BOOL v41 = v39 > v16;
              if (!v5) {
                BOOL v40 = v41;
              }
            }
            while (!v40);
          }
          while (v10 < v33);
        }
        if (&v10[-1] != a1) {
          *a1 = v10[-1];
        }
        v10[-1].n128_u64[0] = v15;
        v10[-1].n128_u64[1] = v16;
        if (v23 >= v24) {
          break;
        }
LABEL_43:
        sub_1CC9B2D28(a1, &v10[-1], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v42 = sub_1CC9B3754(a1, v10 - 1);
      if (sub_1CC9B3754(v10, a2)) {
        break;
      }
      if (!v42) {
        goto LABEL_43;
      }
    }
    a2 = v10 - 1;
    if (!v42) {
      continue;
    }
    break;
  }
}