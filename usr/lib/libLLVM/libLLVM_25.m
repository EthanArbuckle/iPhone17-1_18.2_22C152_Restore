uint64_t llvm::TargetLoweringObjectFileELF::SelectSectionForGlobal(uint64_t a1, llvm::GlobalAlias *a2, unsigned __int8 a3, llvm::TargetMachine *a4)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::GlobalAlias **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  llvm::GlobalAlias *v21;
  llvm::GlobalAlias **v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  uint64_t v27;

  v4 = 0;
  v5 = 2 * (a3 > 1u);
  if (a3 == 1) {
    v5 = 0x80000000;
  }
  if ((a3 & 0xFE) == 2) {
    v5 |= 4u;
  }
  if (a3 == 3) {
    v5 |= 0x20000000u;
  }
  v6 = (a3 - 12);
  v7 = v5 | (v6 < 9);
  if (v6 < 3) {
    v7 |= 0x400u;
  }
  v8 = (a3 - 5);
  if ((a3 & 0xFC) == 8 || v8 < 3) {
    v7 |= 0x10u;
  }
  if (v8 >= 3) {
    v10 = v7;
  }
  else {
    v10 = v7 | 0x20;
  }
  if ((v10 & 0x10) == 0 && a3 != 18)
  {
    v11 = *((_DWORD *)a4 + 260);
    if ((a3 & 0xFE) == 2) {
      v4 = (v11 >> 1) & 1;
    }
    else {
      v4 = (v11 >> 2) & 1;
    }
  }
  v12 = *(void *)(a1 + 1008);
  v13 = *(void *)(a1 + 1000);
  if (v12 == v13)
  {
    v14 = *(unsigned int *)(a1 + 1020);
    v15 = (llvm::GlobalAlias **)(v12 + 8 * v14);
    if (v14)
    {
      v16 = 0;
      v17 = 8 * v14;
      while (*(llvm::GlobalAlias **)(v12 + v16) != a2)
      {
        v16 += 8;
        if (v17 == v16) {
          goto LABEL_40;
        }
      }
      v15 = (llvm::GlobalAlias **)(v12 + v16);
    }
LABEL_40:
    v13 = *(void *)(a1 + 1008);
  }
  else
  {
    v18 = *(unsigned int *)(a1 + 1016);
    v19 = v18 - 1;
    v20 = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v15 = (llvm::GlobalAlias **)(v12 + 8 * v20);
    v21 = *v15;
    if (*v15 == (llvm::GlobalAlias *)-1)
    {
      v22 = 0;
LABEL_48:
      if (v22) {
        v15 = v22;
      }
      if (*v15 != a2) {
        v15 = (llvm::GlobalAlias **)(v12 + 8 * v18);
      }
    }
    else
    {
      v22 = 0;
      v23 = 1;
      while (v21 != a2)
      {
        if (v22) {
          v24 = 0;
        }
        else {
          v24 = v21 == (llvm::GlobalAlias *)-2;
        }
        if (v24) {
          v22 = v15;
        }
        v25 = v20 + v23++;
        v20 = v25 & v19;
        v15 = (llvm::GlobalAlias **)(v12 + 8 * (v25 & v19));
        v21 = *v15;
        if (*v15 == (llvm::GlobalAlias *)-1) {
          goto LABEL_48;
        }
      }
    }
  }
  if (*((void *)a2 + 6)) {
    v26 = 1;
  }
  else {
    v26 = v4;
  }
  v27 = 1016;
  if (v12 == v13) {
    v27 = 1020;
  }
  return sub_1CC4A5EC4(*(llvm::MCContext **)(a1 + 840), a2, a3, *(llvm::Mangler **)(a1 + 936), a4, v15 != (llvm::GlobalAlias **)(v12 + 8 * *(unsigned int *)(a1 + v27)), v26, v10, (_DWORD *)(a1 + 996));
}

uint64_t sub_1CC4A5EC4(llvm::MCContext *a1, llvm::GlobalAlias *a2, unsigned __int8 a3, llvm::Mangler *a4, llvm::TargetMachine *a5, int a6, int a7, int a8, _DWORD *a9)
{
  v17 = (const llvm::MCSymbolELF *)sub_1CC4AC680((uint64_t)a2, a5);
  if (v17) {
    int v18 = a8 | 0x80;
  }
  else {
    int v18 = a8;
  }
  if (v17) {
    int v19 = 1;
  }
  else {
    int v19 = a7;
  }
  if (a6)
  {
    if (*((_DWORD *)a5 + 121) == 14)
    {
      v18 |= 0x100000u;
LABEL_12:
      int v19 = 1;
      goto LABEL_13;
    }
    uint64_t v20 = *((void *)a1 + 19);
    if (*(unsigned char *)(v20 + 464) || (int v22 = *(_DWORD *)(v20 + 456), v22 >= 2) && (v22 != 2 || *(int *)(v20 + 460) >= 36))
    {
      v18 |= 0x200000u;
      goto LABEL_12;
    }
  }
LABEL_13:

  return sub_1CC4A6460(a1, a2, a3, a4, (uint64_t)a5, v19, v18, a9, v17);
}

uint64_t llvm::TargetLoweringObjectFileELF::getUniqueSectionForFunction(llvm::TargetLoweringObjectFileELF *this, const llvm::Function *a2, const llvm::TargetMachine *a3)
{
  v3 = a3;
  if ((*((unsigned char *)a2 + 34) & 0x40) != 0)
  {
LABEL_24:
    uint64_t v20 = (llvm::MCContext *)*((void *)this + 105);
    v21 = (llvm::Mangler *)*((void *)this + 117);
    uint64_t v22 = *((void *)this + 126);
    uint64_t v23 = *((void *)this + 125);
    if (v22 == v23)
    {
      uint64_t v24 = *((unsigned int *)this + 255);
      v25 = (const llvm::Function **)(v22 + 8 * v24);
      if (v24)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 8 * v24;
        while (*(const llvm::Function **)(v22 + v26) != a2)
        {
          v26 += 8;
          if (v27 == v26) {
            goto LABEL_59;
          }
        }
        v25 = (const llvm::Function **)(v22 + v26);
      }
LABEL_59:
      uint64_t v23 = *((void *)this + 126);
    }
    else
    {
      uint64_t v34 = *((unsigned int *)this + 254);
      int v35 = v34 - 1;
      unsigned int v36 = (v34 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v25 = (const llvm::Function **)(v22 + 8 * v36);
      v37 = *v25;
      if (*v25 == (const llvm::Function *)-1)
      {
        v38 = 0;
LABEL_71:
        if (v38) {
          v25 = v38;
        }
        if (*v25 != a2) {
          v25 = (const llvm::Function **)(v22 + 8 * v34);
        }
      }
      else
      {
        v38 = 0;
        int v39 = 1;
        while (v37 != a2)
        {
          if (v38) {
            BOOL v40 = 0;
          }
          else {
            BOOL v40 = v37 == (const llvm::Function *)-2;
          }
          if (v40) {
            v38 = v25;
          }
          unsigned int v41 = v36 + v39++;
          unsigned int v36 = v41 & v35;
          v25 = (const llvm::Function **)(v22 + 8 * (v41 & v35));
          v37 = *v25;
          if (*v25 == (const llvm::Function *)-1) {
            goto LABEL_71;
          }
        }
      }
    }
    BOOL v18 = v22 == v23;
    uint64_t v50 = 1016;
    if (v18) {
      uint64_t v50 = 1020;
    }
    BOOL v51 = v25 != (const llvm::Function **)(v22 + 8 * *(unsigned int *)((char *)this + v50));
    return sub_1CC4A4A00((uint64_t **)a2, 2u, v3, v20, v21, (int *)this + 249, v51, 1);
  }
  else
  {
    uint64_t v4 = *((void *)a2 + 14);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 8))
      {
        uint64_t v5 = *(void *)(v4 + 40);
        if (v5)
        {
          int v6 = *(_DWORD *)(v5 + 40);
          if (v6)
          {
            uint64_t v7 = *(void *)(v5 + 24);
            v8 = &unk_1EBCBE000;
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
            {
              v61 = this;
              v57 = a2;
              uint64_t v60 = v7;
              int v58 = v6;
              int v54 = __cxa_guard_acquire(&qword_1EBCBE588);
              v8 = &unk_1EBCBE000;
              int v6 = v58;
              a2 = v57;
              v3 = a3;
              int v55 = v54;
              uint64_t v7 = v60;
              this = v61;
              if (v55)
              {
                unint64_t v56 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v56 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v56;
                __cxa_guard_release(&qword_1EBCBE588);
                v8 = (void *)&unk_1EBCBE000;
                int v6 = v58;
                uint64_t v7 = v60;
                this = v61;
                a2 = v57;
                v3 = a3;
              }
            }
            uint64_t v9 = v8[176];
            uint64_t v10 = __ROR8__(v9 ^ 0xF54B982192FEA167, 30);
            unint64_t v11 = 0x9DDFEA08EB382D69
                * ((v9 + 0x18EB4DAABB32FA18) ^ ((0x9DDFEA08EB382D69
                                                 * ((v10 - 0x1A1B69534B932F1) ^ (v9 + 0x18EB4DAABB32FA18))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v10 - 0x1A1B69534B932F1) ^ (v9 + 0x18EB4DAABB32FA18))));
            unsigned int v12 = -348639895 * ((v11 >> 47) ^ v11);
            int v13 = v6 - 1;
            for (int i = 1; ; ++i)
            {
              unsigned int v15 = v12 & v13;
              uint64_t v16 = v7 + 24 * v15;
              v17 = *(void **)v16;
              if (*(void *)v16 == -1)
              {
                if ("implicit-section-name" == (char *)-1) {
                  goto LABEL_24;
                }
              }
              else if (v17 == (void *)-2)
              {
                if ("implicit-section-name" == (char *)-2) {
                  goto LABEL_24;
                }
              }
              else if (*(void *)(v16 + 8) == 21)
              {
                BOOL v18 = *v17 == 0x746963696C706D69 && v17[1] == 0x6E6F69746365732DLL;
                if (v18 && *(void *)((char *)v17 + 13) == 0x656D616E2D6E6F69) {
                  goto LABEL_24;
                }
              }
              if (v17 == (void *)-1) {
                break;
              }
              unsigned int v12 = i + v15;
            }
          }
        }
      }
    }
    uint64_t v28 = *((void *)this + 126);
    uint64_t v29 = *((void *)this + 125);
    if (v28 == v29)
    {
      uint64_t v30 = *((unsigned int *)this + 255);
      v31 = (const llvm::Function **)(v28 + 8 * v30);
      if (v30)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 8 * v30;
        while (*(const llvm::Function **)(v28 + v32) != a2)
        {
          v32 += 8;
          if (v33 == v32) {
            goto LABEL_66;
          }
        }
        v31 = (const llvm::Function **)(v28 + v32);
      }
LABEL_66:
      uint64_t v29 = *((void *)this + 126);
    }
    else
    {
      uint64_t v42 = *((unsigned int *)this + 254);
      int v43 = v42 - 1;
      unsigned int v44 = (v42 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v31 = (const llvm::Function **)(v28 + 8 * v44);
      v45 = *v31;
      if (*v31 == (const llvm::Function *)-1)
      {
        v46 = 0;
LABEL_76:
        if (v46) {
          v31 = v46;
        }
        if (*v31 != a2) {
          v31 = (const llvm::Function **)(v28 + 8 * v42);
        }
      }
      else
      {
        v46 = 0;
        int v47 = 1;
        while (v45 != a2)
        {
          if (v46) {
            BOOL v48 = 0;
          }
          else {
            BOOL v48 = v45 == (const llvm::Function *)-2;
          }
          if (v48) {
            v46 = v31;
          }
          unsigned int v49 = v44 + v47++;
          unsigned int v44 = v49 & v43;
          v31 = (const llvm::Function **)(v28 + 8 * (v49 & v43));
          v45 = *v31;
          if (*v31 == (const llvm::Function *)-1) {
            goto LABEL_76;
          }
        }
      }
    }
    BOOL v18 = v28 == v29;
    uint64_t v53 = 1016;
    if (v18) {
      uint64_t v53 = 1020;
    }
    return sub_1CC4A5EC4(*((llvm::MCContext **)this + 105), a2, 2u, *((llvm::Mangler **)this + 117), v3, v31 != (const llvm::Function **)(v28 + 8 * *(unsigned int *)((char *)this + v53)), 1, 6, (_DWORD *)this + 249);
  }
}

llvm::MCContext *llvm::TargetLoweringObjectFileELF::getSectionForJumpTable(llvm::MCContext **this, const llvm::Function *a2, const llvm::TargetMachine *a3)
{
  if ((*((unsigned char *)a3 + 1040) & 2) != 0 || *((void *)a2 + 6)) {
    return (llvm::MCContext *)sub_1CC4A6460(this[105], a2, 4u, this[117], (uint64_t)a3, 1, 2, (_DWORD *)this + 249, 0);
  }
  else {
    return this[6];
  }
}

uint64_t sub_1CC4A6460(llvm::MCContext *a1, llvm::GlobalAlias *a2, unsigned __int8 a3, llvm::Mangler *a4, uint64_t a5, int a6, int a7, _DWORD *a8, const llvm::MCSymbolELF *a9)
{
  v33[16] = *MEMORY[0x1E4F143B8];
  unsigned int v15 = sub_1CC4A681C(a2);
  if (v15)
  {
    a7 |= 0x200u;
    uint64_t v16 = (const char *)(*(void *)v15 + 72);
    uint64_t v24 = **(void **)v15;
    char v25 = *((_DWORD *)v15 + 2) == 0;
  }
  else
  {
    uint64_t v24 = 0;
    char v25 = 0;
    uint64_t v16 = "";
  }
  if ((a3 - 5) >= 6u) {
    int v17 = 32 * (a3 == 11);
  }
  else {
    int v17 = dword_1CFAC7A40[(char)(a3 - 5)];
  }
  if (a6)
  {
    if ((*(unsigned char *)(a5 + 1040) & 0x20) != 0)
    {
      int v19 = -1;
      int v18 = 1;
    }
    else
    {
      int v18 = 0;
      int v19 = (*a8)++;
    }
  }
  else
  {
    int v18 = 0;
    int v19 = -1;
  }
  sub_1CC4AC950((uint64_t)&v31, (uint64_t)a2, a3, a4, v17, v18);
  if (a3 == 3) {
    int v19 = 0;
  }
  __int16 v30 = 261;
  v29[0] = v31;
  v29[1] = v32;
  int v20 = sub_1CC4AC814((uint64_t)v31, v32, a3);
  __int16 v28 = 261;
  v27[0] = v16;
  v27[1] = v24;
  uint64_t ELFSection = llvm::MCContext::getELFSection(a1, (const llvm::Twine *)v29, v20, a7, v17, (const llvm::Twine *)v27, v25, v19, a9);
  if (v31 != v33) {
    free(v31);
  }
  return ELFSection;
}

uint64_t llvm::TargetLoweringObjectFileELF::getSectionForLSDA(llvm::TargetLoweringObjectFileELF *this, const llvm::Function *a2, const llvm::MCSymbol *a3, const llvm::TargetMachine *a4)
{
  uint64_t v4 = *((void *)this + 7);
  if (v4 && (*((void *)a2 + 6) || (*((unsigned char *)a4 + 1040) & 2) != 0))
  {
    int v10 = *(_DWORD *)(v4 + 228);
    unint64_t v11 = sub_1CC4A681C(a2);
    if (v11)
    {
      v10 |= 0x200u;
      uint64_t v12 = *(void *)v11 + 72;
      uint64_t v13 = **(void **)v11;
      char v14 = *((_DWORD *)v11 + 2) == 0;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      char v14 = 0;
    }
    int v15 = *((_DWORD *)a4 + 260);
    uint64_t v16 = (llvm::MCContext *)*((void *)this + 105);
    if ((v15 & 2) != 0
      && (uint64_t v17 = *((void *)v16 + 19), *(unsigned char *)(v17 + 464))
      && (int v18 = *(_DWORD *)(v17 + 456), v18 >= 2))
    {
      if (v18 == 2)
      {
        if (*(int *)(v17 + 460) <= 35) {
          a3 = 0;
        }
        else {
          v10 |= 0x80u;
        }
      }
      else
      {
        v10 |= 0x80u;
      }
    }
    else
    {
      a3 = 0;
    }
    uint64_t v20 = *(void *)(v4 + 200);
    uint64_t v19 = *(void *)(v4 + 208);
    if ((v15 & 0x20) == 0)
    {
      __int16 v39 = 261;
      v38[0] = v20;
      v38[1] = v19;
LABEL_29:
      int v33 = *(_DWORD *)(v4 + 224);
      __int16 v35 = 261;
      v34[0] = v12;
      v34[1] = v13;
      return llvm::MCContext::getELFSection(v16, (const llvm::Twine *)v38, v33, v10, 0, (const llvm::Twine *)v34, v14, -1, a3);
    }
    __int16 v37 = 773;
    v36[0] = v20;
    v36[1] = v19;
    v36[2] = ".";
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      uint64_t v31 = 0;
      __int16 v30 = &byte_1CFBCE98E;
      goto LABEL_28;
    }
    uint64_t v21 = ***(void ***)a2;
    uint64_t v22 = *(void *)(v21 + 152);
    uint64_t v23 = *(unsigned int *)(v21 + 168);
    if (v23)
    {
      LODWORD(v24) = (v23 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v25 = v22 + 16 * v24;
      uint64_t v26 = *(const llvm::Function **)v25;
      if (*(const llvm::Function **)v25 == a2)
      {
LABEL_27:
        uint64_t v29 = *(void **)(v25 + 8);
        uint64_t v32 = *v29;
        __int16 v30 = (char *)(v29 + 2);
        uint64_t v31 = v32;
LABEL_28:
        v38[0] = v36;
        v38[2] = v30;
        v38[3] = v31;
        __int16 v39 = 1282;
        goto LABEL_29;
      }
      int v27 = 1;
      while (v26 != (const llvm::Function *)-4096)
      {
        int v28 = v24 + v27++;
        uint64_t v24 = v28 & (v23 - 1);
        uint64_t v26 = *(const llvm::Function **)(v22 + 16 * v24);
        if (v26 == a2)
        {
          uint64_t v25 = v22 + 16 * v24;
          goto LABEL_27;
        }
      }
    }
    uint64_t v25 = v22 + 16 * v23;
    goto LABEL_27;
  }
  return v4;
}

llvm::GlobalAlias *sub_1CC4A681C(llvm::GlobalAlias *result)
{
  int v1 = *((unsigned __int8 *)result + 16);
  if (result && v1 == 1)
  {
    result = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(result);
    if (!result) {
      return result;
    }
  }
  else if (v1 == 2)
  {
    return 0;
  }
  result = (llvm::GlobalAlias *)*((void *)result + 6);
  if (result)
  {
    int v2 = *((_DWORD *)result + 2);
    if (v2) {
      BOOL v3 = v2 == 3;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3)
    {
      uint64_t v4 = *(void *)result + 72;
      uint64_t v5 = **(void **)result;
      __int16 v9 = 1283;
      v8[0] = (uint64_t)"ELF COMDATs only support SelectionKind::Any and SelectionKind::NoDeduplicate, '";
      v8[2] = v4;
      v8[3] = v5;
      int v6 = "' cannot be lowered.";
      __int16 v7 = 259;
      sub_1CD3E3950(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm *)v10, (const llvm::Twine *)1);
    }
  }
  return result;
}

uint64_t llvm::TargetLoweringObjectFileELF::shouldPutJumpTableInFunctionSection(llvm::TargetLoweringObjectFileELF *this, BOOL a2, const Function *a3)
{
  return 0;
}

uint64_t llvm::TargetLoweringObjectFileELF::getSectionForConstant(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 8:
      uint64_t v3 = a1[62];
      if (!v3) {
        goto LABEL_12;
      }
      break;
    case 9:
      uint64_t v3 = a1[63];
      if (!v3) {
        goto LABEL_12;
      }
      break;
    case 10:
      uint64_t v3 = a1[64];
      if (!v3) {
        goto LABEL_12;
      }
      break;
    case 11:
      uint64_t v3 = a1[65];
      if (!v3) {
        goto LABEL_12;
      }
      break;
    default:
      if ((a3 & 0xFC) == 8 || (a3 & 0xFC) == 4) {
LABEL_12:
      }
        uint64_t v4 = a1 + 6;
      else {
        uint64_t v4 = a1 + 61;
      }
      uint64_t v3 = *v4;
      break;
  }
  return v3;
}

uint64_t llvm::TargetLoweringObjectFileELF::getSectionForMachineBasicBlock(llvm::TargetLoweringObjectFileELF *this, const llvm::Function *a2, const llvm::MachineBasicBlock *a3, const llvm::TargetMachine *a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  v72 = &v74;
  long long v73 = xmmword_1CFAC3020;
  int v8 = *((_DWORD *)a3 + 48);
  int v7 = *((_DWORD *)a3 + 49);
  if (llvm::MBBSectionID::ColdSectionID == v8 && HIDWORD(llvm::MBBSectionID::ColdSectionID) == v7)
  {
    if (byte_1EBD04E4F >= 0) {
      int v18 = &qword_1EBD04E38;
    }
    else {
      int v18 = (uint64_t *)qword_1EBD04E38;
    }
    if (byte_1EBD04E4F >= 0) {
      size_t v19 = byte_1EBD04E4F & 0x7F;
    }
    else {
      size_t v19 = qword_1EBD04E40;
    }
    if (v19 >= 0x81) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v20 = 0;
    if (v19)
    {
      memcpy(&v74, v18, v19);
      uint64_t v20 = v73;
    }
    size_t v21 = v20 + v19;
    *(void *)&long long v73 = v20 + v19;
    uint64_t v22 = (uint64_t ***)**((void **)a3 + 4);
    if ((*((unsigned char *)v22 + 23) & 0x10) == 0)
    {
      size_t v43 = 0;
      uint64_t v42 = &byte_1CFBCE98E;
      goto LABEL_45;
    }
    uint64_t v23 = ***v22;
    uint64_t v24 = *(void *)(v23 + 152);
    uint64_t v25 = *(unsigned int *)(v23 + 168);
    if (v25)
    {
      LODWORD(v26) = (v25 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      int v27 = (uint64_t ****)(v24 + 16 * v26);
      int v28 = *v27;
      if (*v27 == v22)
      {
LABEL_44:
        unsigned int v44 = v27[1];
        size_t v45 = (size_t)*v44;
        uint64_t v42 = (char *)(v44 + 2);
        size_t v43 = v45;
LABEL_45:
        size_t v46 = v43 + v21;
        size_t v47 = *((void *)&v73 + 1);
LABEL_48:
        if (v47 < v46) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v43)
        {
          memcpy((char *)v72 + v21, v42, v43);
          size_t v21 = v73;
        }
        size_t v16 = v21 + v43;
        goto LABEL_57;
      }
      int v29 = 1;
      while (v28 != (uint64_t ***)-4096)
      {
        int v30 = v26 + v29++;
        uint64_t v26 = v30 & (v25 - 1);
        int v28 = *(uint64_t ****)(v24 + 16 * v26);
        if (v28 == v22)
        {
          int v27 = (uint64_t ****)(v24 + 16 * v26);
          goto LABEL_44;
        }
      }
    }
    int v27 = (uint64_t ****)(v24 + 16 * v25);
    goto LABEL_44;
  }
  if (llvm::MBBSectionID::ExceptionSectionID != v8 || HIDWORD(llvm::MBBSectionID::ExceptionSectionID) != v7)
  {
    uint64_t v12 = *(void *)(*((void *)a3 + 4) + 80);
    char v14 = *(const void **)(v12 + 200);
    size_t v13 = *(void *)(v12 + 208);
    if (v13 >= 0x81) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v15 = 0;
    if (v13)
    {
      memcpy(v72, v14, v13);
      uint64_t v15 = v73;
    }
    size_t v16 = v15 + v13;
    *(void *)&long long v73 = v16;
    if ((*((unsigned char *)a4 + 1040) & 0x40) == 0)
    {
      int v17 = *((_DWORD *)this + 249);
      *((_DWORD *)this + 249) = v17 + 1;
      goto LABEL_58;
    }
    if (!v16 || *((char *)v72 + v16 - 1) != 46)
    {
      if (*((void *)&v73 + 1) < v16 + 1) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v72 + v16) = 46;
      *(void *)&long long v73 = v73 + 1;
    }
    Symbol = (unsigned char *)llvm::MachineBasicBlock::getSymbol(a3);
    if ((*Symbol & 4) != 0)
    {
      BOOL v48 = (void *)*((void *)Symbol - 1);
      size_t v49 = *v48;
      uint64_t v42 = (char *)(v48 + 2);
      size_t v43 = v49;
    }
    else
    {
      uint64_t v42 = 0;
      size_t v43 = 0;
    }
    size_t v47 = *((void *)&v73 + 1);
    size_t v21 = v73;
    size_t v46 = v73 + v43;
    goto LABEL_48;
  }
  char v75 = 46;
  uint64_t v74 = *(void *)".text.eh.";
  uint64_t v31 = 9;
  *(void *)&long long v73 = 9;
  uint64_t v32 = (uint64_t ***)**((void **)a3 + 4);
  if ((*((unsigned char *)v32 + 23) & 0x10) != 0)
  {
    uint64_t v33 = ***v32;
    uint64_t v34 = *(void *)(v33 + 152);
    uint64_t v35 = *(unsigned int *)(v33 + 168);
    if (v35)
    {
      LODWORD(v36) = (v35 - 1) & ((v32 >> 4) ^ (v32 >> 9));
      __int16 v37 = (uint64_t ****)(v34 + 16 * v36);
      v38 = *v37;
      if (*v37 == v32)
      {
LABEL_53:
        uint64_t v50 = (size_t *)v37[1];
        size_t v53 = *v50;
        v52 = v50 + 2;
        size_t v51 = v53;
        if (v53 + 9 >= 0x81) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        uint64_t v31 = 9;
        if (v51)
        {
          memcpy((char *)v72 + 9, v52, v51);
          uint64_t v31 = v73;
        }
        goto LABEL_56;
      }
      int v39 = 1;
      while (v38 != (uint64_t ***)-4096)
      {
        int v40 = v36 + v39++;
        uint64_t v36 = v40 & (v35 - 1);
        v38 = *(uint64_t ****)(v34 + 16 * v36);
        if (v38 == v32)
        {
          __int16 v37 = (uint64_t ****)(v34 + 16 * v36);
          goto LABEL_53;
        }
      }
    }
    __int16 v37 = (uint64_t ****)(v34 + 16 * v35);
    goto LABEL_53;
  }
  size_t v51 = 0;
LABEL_56:
  size_t v16 = v31 + v51;
LABEL_57:
  *(void *)&long long v73 = v16;
  int v17 = -1;
LABEL_58:
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v71 = 0;
  int v54 = (size_t **)*((void *)a2 + 6);
  if (!v54)
  {
    char v55 = 0;
    int v56 = 6;
    goto LABEL_71;
  }
  int v58 = *v54 + 9;
  size_t v57 = **v54;
  if (v57 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v57 >= 0x17)
  {
    uint64_t v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17) {
      uint64_t v60 = v57 | 7;
    }
    uint64_t v61 = v60 + 1;
    p_dst = (long long *)operator new(v60 + 1);
    *((void *)&__dst + 1) = v57;
    unint64_t v68 = v61 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v68) = **v54;
    p_dst = &__dst;
    if (!v57) {
      goto LABEL_68;
    }
  }
  memmove(p_dst, v58, v57);
LABEL_68:
  *((unsigned char *)p_dst + v57) = 0;
  if (SHIBYTE(v71) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = __dst;
  unint64_t v71 = v68;
  size_t v16 = v73;
  char v55 = *((void *)a2 + 6) != 0;
  int v56 = 518;
LABEL_71:
  v62 = (llvm::MCContext *)*((void *)this + 105);
  __int16 v69 = 261;
  *(void *)&long long __dst = v72;
  *((void *)&__dst + 1) = v16;
  __int16 v66 = 260;
  v65 = __p;
  uint64_t ELFSection = llvm::MCContext::getELFSection(v62, (const llvm::Twine *)&__dst, 1, v56, 0, (const llvm::Twine *)&v65, v55, v17, 0);
  if (SHIBYTE(v71) < 0) {
    operator delete(__p[0]);
  }
  if (v72 != &v74) {
    free(v72);
  }
  return ELFSection;
}

uint64_t llvm::TargetLoweringObjectFileELF::getStaticCtorSection(llvm::MCContext **this, unsigned int a2, const llvm::MCSymbol *a3)
{
  return sub_1CC4A6ED4(this[105], *((unsigned __int8 *)this + 992), 1, a2, a3);
}

uint64_t sub_1CC4A6ED4(llvm::MCContext *a1, int a2, int a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  memset(&v31, 0, sizeof(v31));
  if (a5)
  {
    if ((*a5 & 4) != 0)
    {
      uint64_t v12 = (void *)*((void *)a5 - 1);
      size_t v13 = (const char *)*v12;
      int v8 = (const char *)(v12 + 2);
      int v7 = v13;
    }
    else
    {
      int v8 = 0;
      int v7 = 0;
    }
    int v9 = 515;
    if (!a2) {
      goto LABEL_3;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = "";
    int v9 = 3;
    if (!a2)
    {
LABEL_3:
      if (a3) {
        int v10 = ".ctors";
      }
      else {
        int v10 = ".dtors";
      }
      MEMORY[0x1D25D9630](&v31, v10);
      if (a4 != 0xFFFF)
      {
        LODWORD(v23) = 0;
        char v27 = 0;
        uint64_t v28 = 0;
        int v30 = &v31;
        int v29 = 0;
        __p = &unk_1F2646F30;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v32 = (const char *)&unk_1F25FED10;
        uint64_t v33 = ".%05u";
        v34[0] = 0xFFFF - a4;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__p, (uint64_t)&v32);
        __p = &unk_1F2646B98;
        if (v29 == 1)
        {
          if (v24) {
            MEMORY[0x1D25D9CB0](v24, 0x1000C8077774924);
          }
        }
      }
      int v11 = 1;
      goto LABEL_32;
    }
  }
  if (a3) {
    char v14 = ".init_array";
  }
  else {
    char v14 = ".fini_array";
  }
  if (a3) {
    int v11 = 14;
  }
  else {
    int v11 = 15;
  }
  MEMORY[0x1D25D9630](&v31, v14);
  if (a4 != 0xFFFF)
  {
    std::string::push_back(&v31, 46);
    if (a4)
    {
      uint64_t v15 = (char *)v34 + 5;
      unint64_t v16 = a4;
      do
      {
        *--uint64_t v15 = (v16 % 0xA) | 0x30;
        BOOL v17 = v16 > 9;
        v16 /= 0xAuLL;
      }
      while (v17);
    }
    else
    {
      uint64_t v15 = (char *)v34 + 4;
      BYTE4(v34[0]) = 48;
    }
    sub_1CC028D80(&__p, v15, (char *)v34 + 5, (char *)v34 + 5 - v15);
    int v18 = v24 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    std::string::size_type v19 = v24 >= 0 ? HIBYTE(v24) & 0x7F : v23;
    std::string::append(&v31, v18, v19);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
  }
LABEL_32:
  LOWORD(v26) = 260;
  __p = &v31;
  __int16 v35 = 261;
  uint64_t v32 = v8;
  uint64_t v33 = v7;
  uint64_t ELFSection = llvm::MCContext::getELFSection(a1, (const llvm::Twine *)&__p, v11, v9, 0, (const llvm::Twine *)&v32, 1, -1, 0);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  return ELFSection;
}

uint64_t llvm::TargetLoweringObjectFileELF::getStaticDtorSection(llvm::MCContext **this, unsigned int a2, const llvm::MCSymbol *a3)
{
  return sub_1CC4A6ED4(this[105], *((unsigned __int8 *)this + 992), 0, a2, a3);
}

unint64_t llvm::TargetLoweringObjectFileELF::lowerRelativeReference(llvm::TargetLoweringObjectFileELF *this, const llvm::GlobalValue *a2, const llvm::GlobalValue *a3, const llvm::TargetMachine *a4)
{
  int v4 = *((_DWORD *)a2 + 8);
  if ((v4 & 0xC0) != 0x80 || *(unsigned char *)(*((void *)a2 + 3) + 8) != 14) {
    return 0;
  }
  unsigned int v8 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v8 & 0xFE) == 0x12) {
    unsigned int v8 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v8 > 0xFF) {
    return 0;
  }
  unsigned int v9 = *(_DWORD *)(*(void *)a3 + 8);
  if ((v9 & 0xFE) == 0x12) {
    unsigned int v9 = *(_DWORD *)(**(void **)(*(void *)a3 + 16) + 8);
  }
  unint64_t v10 = 0;
  if ((v4 & 0x1C00) == 0 && v9 <= 0xFF)
  {
    if ((*((unsigned char *)a3 + 33) & 0x1C) != 0) {
      return 0;
    }
    uint64_t Symbol = llvm::TargetMachine::getSymbol(a4, a2);
    int v13 = *((unsigned __int16 *)this + 524);
    uint64_t v14 = *((void *)this + 105);
    *(void *)(v14 + 272) += 24;
    uint64_t v15 = *(void *)(v14 + 192);
    if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 24 > *(void *)(v14 + 200) - v15)
    {
      unsigned int v25 = *(_DWORD *)(v14 + 216) >> 7;
      if (v25 >= 0x1E) {
        LOBYTE(v25) = 30;
      }
      uint64_t v26 = 4096 << v25;
      unint64_t v16 = (unint64_t)operator new(4096 << v25, (std::align_val_t)8uLL);
      unsigned int v27 = *(_DWORD *)(v14 + 216);
      if (v27 >= *(_DWORD *)(v14 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v14 + 208) + 8 * v27) = v16;
      ++*(_DWORD *)(v14 + 216);
      *(void *)(v14 + 200) = v16 + v26;
    }
    else
    {
      unint64_t v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v14 + 192) = v16 + 24;
    int v17 = v13 | (*(unsigned __int8 *)(*(void *)(v14 + 152) + 18) << 16);
    *(unsigned char *)unint64_t v16 = 2;
    *(_DWORD *)(v16 + 1) = v17 | (*(unsigned __int8 *)(v16 + 4) << 24);
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = Symbol;
    uint64_t v18 = llvm::TargetMachine::getSymbol(a4, a3);
    uint64_t v19 = *((void *)this + 105);
    *(void *)(v19 + 272) += 24;
    uint64_t v20 = *(void *)(v19 + 192);
    if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8) - v20 + 24 > *(void *)(v19 + 200) - v20)
    {
      unsigned int v28 = *(_DWORD *)(v19 + 216) >> 7;
      if (v28 >= 0x1E) {
        LOBYTE(v28) = 30;
      }
      uint64_t v29 = 4096 << v28;
      unint64_t v21 = (unint64_t)operator new(4096 << v28, (std::align_val_t)8uLL);
      unsigned int v30 = *(_DWORD *)(v19 + 216);
      if (v30 >= *(_DWORD *)(v19 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v19 + 208) + 8 * v30) = v21;
      ++*(_DWORD *)(v19 + 216);
      *(void *)(v19 + 200) = v21 + v29;
    }
    else
    {
      unint64_t v21 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v19 + 192) = v21 + 24;
    int v22 = *(unsigned __int8 *)(*(void *)(v19 + 152) + 18) << 16;
    *(unsigned char *)unint64_t v21 = 2;
    *(_DWORD *)(v21 + 1) = v22 | (*(unsigned __int8 *)(v21 + 4) << 24);
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = v18;
    uint64_t v23 = *((void *)this + 105);
    *(void *)(v23 + 272) += 32;
    uint64_t v24 = *(void *)(v23 + 192);
    if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) - v24 + 32 > *(void *)(v23 + 200) - v24)
    {
      unsigned int v31 = *(_DWORD *)(v23 + 216) >> 7;
      if (v31 >= 0x1E) {
        LOBYTE(v31) = 30;
      }
      uint64_t v32 = 4096 << v31;
      unint64_t v10 = (unint64_t)operator new(4096 << v31, (std::align_val_t)8uLL);
      unsigned int v33 = *(_DWORD *)(v23 + 216);
      if (v33 >= *(_DWORD *)(v23 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v23 + 208) + 8 * v33) = v10;
      ++*(_DWORD *)(v23 + 216);
      *(void *)(v23 + 200) = v10 + v32;
    }
    else
    {
      unint64_t v10 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v23 + 192) = v10 + 32;
    *(unsigned char *)unint64_t v10 = 0;
    *(_DWORD *)(v10 + 1) = (*(unsigned __int8 *)(v10 + 4) << 24) | 0x12;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = v16;
    *(void *)(v10 + 24) = v21;
  }
  return v10;
}

unint64_t llvm::TargetLoweringObjectFileELF::lowerDSOLocalEquivalent(llvm::TargetLoweringObjectFileELF *this, const llvm::DSOLocalEquivalent *a2, const llvm::TargetMachine *a3)
{
  uint64_t v5 = (const llvm::GlobalValue *)*((void *)a2 - 4);
  int v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x4000) != 0
    || (*((_DWORD *)v5 + 8) & 0xFu) - 7 < 2
    || (v6 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(*((llvm::GlobalValue **)a2 - 4)) & 1) == 0)
  {
    uint64_t Symbol = llvm::TargetMachine::getSymbol(a3, v5);
    uint64_t v14 = *((void *)this + 105);
    *(void *)(v14 + 272) += 24;
    uint64_t v15 = *(void *)(v14 + 192);
    if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 24 > *(void *)(v14 + 200) - v15)
    {
      unsigned int v17 = *(_DWORD *)(v14 + 216) >> 7;
      if (v17 >= 0x1E) {
        LOBYTE(v17) = 30;
      }
      uint64_t v18 = 4096 << v17;
      unint64_t v11 = (unint64_t)operator new(4096 << v17, (std::align_val_t)8uLL);
      unsigned int v19 = *(_DWORD *)(v14 + 216);
      if (v19 >= *(_DWORD *)(v14 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v14 + 208) + 8 * v19) = v11;
      ++*(_DWORD *)(v14 + 216);
      *(void *)(v14 + 200) = v11 + v18;
    }
    else
    {
      unint64_t v11 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v14 + 192) = v11 + 24;
    int v13 = *(unsigned __int8 *)(*(void *)(v14 + 152) + 18) << 16;
    *(unsigned char *)unint64_t v11 = 2;
    int v12 = *(unsigned __int8 *)(v11 + 4) << 24;
  }
  else
  {
    uint64_t Symbol = llvm::TargetMachine::getSymbol(a3, v5);
    int v8 = *((unsigned __int16 *)this + 524);
    uint64_t v9 = *((void *)this + 105);
    *(void *)(v9 + 272) += 24;
    uint64_t v10 = *(void *)(v9 + 192);
    if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 24 > *(void *)(v9 + 200) - v10)
    {
      unsigned int v20 = *(_DWORD *)(v9 + 216) >> 7;
      if (v20 >= 0x1E) {
        LOBYTE(v20) = 30;
      }
      uint64_t v21 = 4096 << v20;
      unint64_t v11 = (unint64_t)operator new(4096 << v20, (std::align_val_t)8uLL);
      unsigned int v22 = *(_DWORD *)(v9 + 216);
      if (v22 >= *(_DWORD *)(v9 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v9 + 208) + 8 * v22) = v11;
      ++*(_DWORD *)(v9 + 216);
      *(void *)(v9 + 200) = v11 + v21;
    }
    else
    {
      unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v9 + 192) = v11 + 24;
    int v12 = v8 | (*(unsigned __int8 *)(*(void *)(v9 + 152) + 18) << 16);
    *(unsigned char *)unint64_t v11 = 2;
    int v13 = *(unsigned __int8 *)(v11 + 4) << 24;
  }
  *(_DWORD *)(v11 + 1) = v12 | v13;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = Symbol;
  return v11;
}

uint64_t llvm::TargetLoweringObjectFileELF::getSectionForCommandLines(llvm::TargetLoweringObjectFileELF *this)
{
  int v1 = (llvm::MCContext *)*((void *)this + 105);
  uint64_t v3 = ".GCC.command.line";
  __int16 v4 = 259;
  __int16 v6 = 257;
  return llvm::MCContext::getELFSection(v1, (const llvm::Twine *)&v3, 1, 48, 1, (const llvm::Twine *)v5, 0, -1, 0);
}

llvm::TargetLoweringObjectFileMachO *llvm::TargetLoweringObjectFileMachO::TargetLoweringObjectFileMachO(llvm::TargetLoweringObjectFileMachO *this)
{
  *((unsigned char *)this + 912) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((unsigned char *)this + 864) = 0;
  *((void *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((void *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((unsigned char *)this + 946) = 1;
  *(_OWORD *)((char *)this + 947) = 0u;
  *((unsigned char *)this + 963) = 0;
  *((void *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(void *)this = &unk_1F2614558;
  *((_WORD *)this + 472) = 257;
  return this;
}

{
  *((unsigned char *)this + 912) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((unsigned char *)this + 864) = 0;
  *((void *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((void *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((unsigned char *)this + 946) = 1;
  *(_OWORD *)((char *)this + 947) = 0u;
  *((unsigned char *)this + 963) = 0;
  *((void *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(void *)this = &unk_1F2614558;
  *((_WORD *)this + 472) = 257;
  return this;
}

void llvm::TargetLoweringObjectFileMachO::Initialize(llvm::TargetLoweringObjectFileMachO *this, llvm::MCContext *a2, const llvm::TargetMachine *a3)
{
}

void llvm::TargetLoweringObjectFileMachO::emitModuleMetadata(llvm::TargetLoweringObjectFileMachO *this, llvm::MCStreamer *a2, llvm::Module *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  BOOL v48 = "llvm.linker.options";
  __int16 v51 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a3, &v48);
  if (NamedMetadata)
  {
    uint64_t v14 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v14)
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        uint64_t v16 = NamedMetadata;
        uint64_t v17 = *(void *)(**(void **)(NamedMetadata + 48) + 8 * i);
        BOOL v48 = (const char *)&v50;
        uint64_t v49 = 0x400000000;
        uint64_t v18 = *(unsigned int *)(v17 + 8);
        if (v18)
        {
          uint64_t v19 = -8 * v18;
          do
          {
            std::string::__init(&v37, (const std::string::value_type *)(*(void *)(*(void *)(v17 + v19) + 8) + 24), **(void **)(*(void *)(v17 + v19) + 8));
            unint64_t v20 = sub_1CBFCD38C((uint64_t)&v48, (unint64_t)&v37, 1);
            uint64_t v21 = (char *)&v48[24 * v49];
            long long v22 = *(_OWORD *)v20;
            *((void *)v21 + 2) = *(void *)(v20 + 16);
            *(_OWORD *)uint64_t v21 = v22;
            *(void *)(v20 + 8) = 0;
            *(void *)(v20 + 16) = 0;
            *(void *)unint64_t v20 = 0;
            LODWORD(v49) = v49 + 1;
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
            v19 += 8;
          }
          while (v19);
        }
        (*(void (**)(llvm::MCStreamer *))(*(void *)a2 + 216))(a2);
        sub_1CC076978((void **)&v48);
        uint64_t NamedMetadata = v16;
      }
    }
  }
  BOOL v48 = "llvm.dyld.libs";
  __int16 v51 = 259;
  uint64_t v7 = llvm::Module::getNamedMetadata(a3, &v48);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(unsigned int *)(*(void *)(v7 + 48) + 8);
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 8 * v9;
      do
      {
        uint64_t v12 = *(void *)(**(void **)(v8 + 48) + v10);
        int v13 = *(void **)(*(void *)(v12 - 8 * *(unsigned int *)(v12 + 8)) + 8);
        (*(void (**)(llvm::MCStreamer *, void *, void))(*(void *)a2 + 224))(a2, v13 + 3, *v13);
        v10 += 8;
      }
      while (v11 != v10);
    }
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  sub_1CC4A3C14(a3, (_DWORD *)&v47 + 1, (int *)&v47, &v45);
  llvm::TargetLoweringObjectFile::emitCGProfileMetadata(this, a2, a3);
  if (v46)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    char v39 = 0;
    llvm::MCSectionMachO::ParseSectionSpecifier(v45, v46, &v43, &v41, (int *)&v40 + 1, &v39, &v40, &v38);
    if (v38)
    {
      __int16 v35 = 1283;
      v34[0] = (uint64_t)"Invalid section specifier '";
      void v34[2] = v41;
      v34[3] = v42;
      uint64_t v32 = "': ";
      __int16 v33 = 259;
      sub_1CD3E3950(v34, (uint64_t *)&v32, (uint64_t)v36);
      uint64_t v28 = v38;
      uint64_t v38 = 0;
      sub_1CD4FB504(&v28, &v29);
      __int16 v31 = 260;
      unsigned int v30 = &v29;
      sub_1CD3E3950(v36, (uint64_t *)&v30, (uint64_t)&v37);
      uint64_t v26 = ".";
      __int16 v27 = 259;
      sub_1CD3E3950((uint64_t *)&v37, (uint64_t *)&v26, (uint64_t)&v48);
      llvm::report_fatal_error((llvm *)&v48, (const llvm::Twine *)1);
    }
    size_t MachOSection = llvm::MCContext::getMachOSection(*((void *)this + 105), v43, v44, v41, v42, SHIDWORD(v40), v40, 19, 0);
    (*(void (**)(llvm::MCStreamer *, size_t, void))(*(void *)a2 + 168))(a2, MachOSection, 0);
    uint64_t v24 = (llvm::MCContext *)*((void *)this + 105);
    __int16 v51 = 261;
    BOOL v48 = "L_OBJC_IMAGE_INFO";
    uint64_t v49 = 17;
    uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v24, (unsigned __int8 ***)&v48);
    (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a2 + 192))(a2, Symbol, 0);
    (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, HIDWORD(v47), 4);
    (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, v47, 4);
    (*(void (**)(llvm::MCStreamer *))(*(void *)a2 + 152))(a2);
  }
}

uint64_t sub_1CC4A7E24(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 34) & 0x40) == 0) {
    return 0;
  }
  uint64_t v1 = ***(void ***)a1;
  uint64_t v15 = a1;
  int v2 = *(_DWORD *)(v1 + 2520);
  if (!v2)
  {
    int v13 = 0;
LABEL_18:
    __int16 v6 = sub_1CC5BF31C(v1 + 2504, (uint64_t)&v15, &v15, v13);
    uint64_t v14 = v15;
    v6[1] = 0;
    v6[2] = 0;
    *__int16 v6 = v14;
    return v6[1];
  }
  uint64_t v3 = *(void *)(v1 + 2504);
  int v4 = v2 - 1;
  unsigned int v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  __int16 v6 = (void *)(v3 + 24 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a1)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v7 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v7 == -8192;
      }
      if (v11) {
        uint64_t v9 = v6;
      }
      unsigned int v12 = v5 + v10++;
      unsigned int v5 = v12 & v4;
      __int16 v6 = (void *)(v3 + 24 * (v12 & v4));
      uint64_t v7 = *v6;
      if (*v6 == a1) {
        return v6[1];
      }
    }
    if (v9) {
      int v13 = v9;
    }
    else {
      int v13 = v6;
    }
    goto LABEL_18;
  }
  return v6[1];
}

uint64_t sub_1CC4A7F0C(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 16);
  if (result && v1 == 1)
  {
    result = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)result);
    if (!result) {
      return result;
    }
  }
  else if (v1 == 2)
  {
    return result;
  }
  int v2 = *(uint64_t ***)(result + 48);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = *v3;
    __int16 v8 = 1283;
    v7[0] = (uint64_t)"MachO doesn't support COMDATs, '";
    v7[2] = (uint64_t)(v3 + 9);
    v7[3] = v4;
    unsigned int v5 = "' cannot be lowered.";
    __int16 v6 = 259;
    sub_1CD3E3950(v7, (uint64_t *)&v5, (uint64_t)v9);
    llvm::report_fatal_error((llvm *)v9, (const llvm::Twine *)1);
  }
  return result;
}

uint64_t llvm::TargetLoweringObjectFileMachO::SelectSectionForGlobal(uint64_t a1, uint64_t a2, char a3)
{
  sub_1CC4A7F0C(a2);
  if ((a3 & 0xFD) == 0xC)
  {
    uint64_t v8 = a1 + 424;
    return *(void *)v8;
  }
  if (a3 == 13)
  {
    uint64_t v8 = a1 + 416;
    return *(void *)v8;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 32) & 0xF;
  if ((a3 & 0xFE) == 2)
  {
    BOOL v7 = v6 > 0xA || ((1 << v6) & 0x63C) == 0;
    uint64_t v8 = a1 + 560;
    uint64_t v9 = a1 + 24;
  }
  else
  {
    if (v6 > 0xA || ((1 << v6) & 0x63C) == 0)
    {
      if (a3 == 5)
      {
        if (llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*(void *)(a2 + 40) + 272), (const llvm::GlobalVariable *)a2) <= 4u)
        {
          uint64_t v8 = a1 + 544;
          return *(void *)v8;
        }
      }
      else if (a3 == 6)
      {
        if (v6
          && llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*(void *)(a2 + 40) + 272), (const llvm::GlobalVariable *)a2) <= 4u)
        {
          uint64_t v8 = a1 + 552;
          return *(void *)v8;
        }
      }
      else
      {
        int v12 = a3 & 0xFC;
        if (v6 == 8 && v12 == 8)
        {
          switch(a3)
          {
            case 10:
              uint64_t v8 = a1 + 632;
              return *(void *)v8;
            case 9:
              uint64_t v8 = a1 + 624;
              return *(void *)v8;
            case 8:
              uint64_t v8 = a1 + 616;
              return *(void *)v8;
          }
        }
        else if (v12 != 4 && v12 != 8)
        {
          switch(a3)
          {
            case 20:
              uint64_t v8 = a1 + 576;
              break;
            case 16:
              uint64_t v8 = a1 + 608;
              break;
            case 17:
              uint64_t v8 = a1 + 600;
              break;
            default:
              uint64_t v8 = a1 + 32;
              break;
          }
          return *(void *)v8;
        }
      }
      uint64_t v8 = a1 + 48;
      return *(void *)v8;
    }
    if ((a3 & 0xFC) == 8 || (a3 & 0xFC) == 4)
    {
      uint64_t v8 = a1 + 568;
      return *(void *)v8;
    }
    BOOL v7 = a3 == 20;
    uint64_t v8 = a1 + 584;
    uint64_t v9 = a1 + 592;
  }
  if (v7) {
    uint64_t v8 = v9;
  }
  return *(void *)v8;
}

void llvm::TargetLoweringObjectFileMachO::getNameWithPrefix(uint64_t a1, uint64_t a2, const llvm::GlobalValue *a3, const llvm::GlobalObject *a4)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  LODWORD(v16) = 0;
  uint64_t v8 = (llvm::TargetLoweringObjectFile *)sub_1CC5BE54C((uint64_t)a3, (uint64_t)&v14);
  MEMORY[0x1D25D9CD0](v14, 8);
  if (v8)
  {
    unsigned __int8 KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal(v8, a4, v9);
    uint64_t v11 = llvm::TargetLoweringObjectFile::SectionForGlobal(a1, (uint64_t)v8, KindForGlobal);
    int v12 = (*(uint64_t (**)(void *, uint64_t))(**((void **)a4 + 70) + 24))(*((void **)a4 + 70), v11);
  }
  else
  {
    int v12 = 1;
  }
  int v13 = *(llvm::Mangler **)(a1 + 936);
  LODWORD(v15) = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = a2;
  int v21 = 0;
  uint64_t v14 = (char *)&unk_1F2646FA8;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  llvm::Mangler::getNameWithPrefix(v13, &v14, a3, v12);
  uint64_t v14 = (char *)&unk_1F2646B98;
  if (v21 == 1)
  {
    if (v16) {
      MEMORY[0x1D25D9CB0](v16, 0x1000C8077774924);
    }
  }
}

uint64_t llvm::TargetLoweringObjectFileCOFF::getExplicitSectionGlobal(uint64_t a1, unsigned __int8 *a2, int a3, int *a4)
{
  int v8 = sub_1CC4A8498(a3, a4[118]);
  if ((a2[34] & 0x40) != 0)
  {
    uint64_t v11 = ***(void ***)a2;
    __int16 v31 = a2;
    int v12 = *(_DWORD *)(v11 + 2520);
    if (v12)
    {
      uint64_t v13 = *(void *)(v11 + 2504);
      int v14 = v12 - 1;
      unsigned int v15 = v14 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v16 = (unsigned __int8 **)(v13 + 24 * v15);
      uint64_t v17 = *v16;
      if (*v16 == a2)
      {
LABEL_5:
        uint64_t v9 = (std::string::value_type *)v16[1];
        std::string::size_type v10 = (std::string::size_type)v16[2];
        goto LABEL_6;
      }
      unsigned int v25 = 0;
      int v26 = 1;
      while (v17 != (unsigned __int8 *)-4096)
      {
        if (v25) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v17 == (unsigned __int8 *)-8192;
        }
        if (v27) {
          unsigned int v25 = v16;
        }
        unsigned int v28 = v15 + v26++;
        unsigned int v15 = v28 & v14;
        uint64_t v16 = (unsigned __int8 **)(v13 + 24 * v15);
        uint64_t v17 = *v16;
        if (*v16 == a2) {
          goto LABEL_5;
        }
      }
      if (v25) {
        std::string v29 = v25;
      }
      else {
        std::string v29 = v16;
      }
    }
    else
    {
      std::string v29 = 0;
    }
    uint64_t v16 = (unsigned __int8 **)sub_1CC5BF31C(v11 + 2504, (uint64_t)&v31, (uint64_t *)&v31, v29);
    uint64_t v30 = (uint64_t)v31;
    v16[1] = 0;
    v16[2] = 0;
    *uint64_t v16 = (unsigned __int8 *)v30;
    goto LABEL_5;
  }
  uint64_t v9 = 0;
  std::string::size_type v10 = 0;
  if (!*((void *)a2 + 6)) {
    goto LABEL_10;
  }
LABEL_6:
  unsigned int v18 = sub_1CC4A8540((uint64_t)a2);
  if (v18 == 5) {
    a2 = sub_1CC4A85E0((uint64_t)a2);
  }
  if ((*((_DWORD *)a2 + 8) & 0xF) != 8)
  {
    uint64_t Symbol = (unsigned char *)llvm::TargetMachine::getSymbol((llvm::TargetMachine *)a4, (const llvm::GlobalValue *)a2);
    if ((*Symbol & 4) != 0)
    {
      uint64_t v22 = (void *)*((void *)Symbol - 1);
      std::string::size_type v23 = *v22;
      uint64_t v20 = (const char *)(v22 + 2);
      std::string::size_type v19 = v23;
    }
    else
    {
      uint64_t v20 = 0;
      std::string::size_type v19 = 0;
    }
    v8 |= 0x1000u;
  }
  else
  {
LABEL_10:
    std::string::size_type v19 = 0;
    unsigned int v18 = 0;
    uint64_t v20 = "";
  }
  return llvm::MCContext::getCOFFSection(*(llvm::MCContext **)(a1 + 840), v9, v10, v8, a3, (std::string::size_type)v20, v19, v18, 0xFFFFFFFF, 0);
}

uint64_t sub_1CC4A8498(char a1, int a2)
{
  if (!a1) {
    return 0x2000000;
  }
  if (a1 == 1) {
    return 33556480;
  }
  if ((a1 & 0xFE) == 2)
  {
    if (a2 == 39) {
      return 1610743840;
    }
    else {
      return 1610612768;
    }
  }
  else
  {
    unsigned int v3 = (a1 - 12);
    int v4 = a1 & 0xFC;
    if (v3 >= 9) {
      int v5 = 0;
    }
    else {
      int v5 = -1073741760;
    }
    if (a1 == 20) {
      int v6 = 1073741888;
    }
    else {
      int v6 = v5;
    }
    if (v4 == 8) {
      int v6 = 1073741888;
    }
    if (v4 == 4) {
      int v7 = 1073741888;
    }
    else {
      int v7 = v6;
    }
    if (v3 >= 3) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = -1073741760;
    }
    if ((a1 - 15) >= 3u) {
      return v8;
    }
    else {
      return 3221225600;
    }
  }
}

uint64_t sub_1CC4A8540(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(unsigned __int8 *)(this + 16);
  if (!this || v2 != 1)
  {
    if (v2 == 2) {
      return 0;
    }
LABEL_4:
    uint64_t v3 = *(void *)(this + 48);
    if (v3)
    {
      AliaseeObject = sub_1CC4A85E0(v1);
      if (AliaseeObject[16] == 1) {
        AliaseeObject = (unsigned __int8 *)llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)AliaseeObject);
      }
      if (AliaseeObject != (unsigned __int8 *)v1) {
        return 5;
      }
      uint64_t v5 = *(int *)(v3 + 8);
      if (v5 <= 4) {
        return dword_1CFAC7A98[v5];
      }
    }
    return 0;
  }
  this = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)this);
  if (this) {
    goto LABEL_4;
  }
  return this;
}

unsigned __int8 *sub_1CC4A85E0(uint64_t a1)
{
  uint64_t AliaseeObject = a1;
  if (a1)
  {
    uint64_t AliaseeObject = a1;
    if (*(unsigned char *)(a1 + 16) == 1)
    {
      uint64_t v9 = a1;
      uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)a1);
      a1 = v9;
    }
  }
  int v2 = *(unint64_t ***)(AliaseeObject + 48);
  uint64_t v3 = (unsigned __int8 *)(*v2 + 9);
  unint64_t v4 = **v2;
  result = (unsigned __int8 *)llvm::Module::getNamedValue(*(void *)(a1 + 40), v3, v4);
  if (!result)
  {
    __int16 v16 = 1283;
    uint64_t v13 = "Associative COMDAT symbol '";
    int v14 = v3;
    unint64_t v15 = v4;
    unsigned int v8 = "' does not exist.";
    goto LABEL_12;
  }
  int v6 = result[16];
  if (v6 == 2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = (uint64_t)result;
    if (v6 != 1
      || (std::string::size_type v10 = (llvm::GlobalAlias *)result,
          uint64_t v7 = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)result),
          result = (unsigned __int8 *)v10,
          v7))
    {
      uint64_t v7 = *(void *)(v7 + 48);
    }
  }
  if ((unint64_t **)v7 != v2)
  {
    __int16 v16 = 1283;
    uint64_t v13 = "Associative COMDAT symbol '";
    int v14 = v3;
    unint64_t v15 = v4;
    unsigned int v8 = "' is not a key for its COMDAT.";
LABEL_12:
    uint64_t v11 = v8;
    __int16 v12 = 259;
    sub_1CD3E3950((uint64_t *)&v13, (uint64_t *)&v11, (uint64_t)v17);
    llvm::report_fatal_error((llvm *)v17, (const llvm::Twine *)1);
  }
  return result;
}

uint64_t llvm::TargetLoweringObjectFileCOFF::SelectSectionForGlobal(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  v67[32] = *MEMORY[0x1E4F143B8];
  int v7 = a3 & 0xFE;
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = 4;
  }
  int v9 = a4[260] & v8;
  if (a3 != 18 && v9 || *(void *)(a2 + 48))
  {
    if (v7 == 2)
    {
      uint64_t v11 = ".text";
      size_t v12 = 5;
    }
    else
    {
      unsigned int v13 = a3 - 15;
      int v14 = a3 & 0xFC;
      if (a3 == 20) {
        unint64_t v15 = ".rdata";
      }
      else {
        unint64_t v15 = ".data";
      }
      uint64_t v16 = 5;
      if (a3 == 20) {
        uint64_t v16 = 6;
      }
      if (v14 == 8)
      {
        unint64_t v15 = ".rdata";
        uint64_t v16 = 6;
      }
      if (v14 == 4)
      {
        unint64_t v15 = ".rdata";
        uint64_t v17 = 6;
      }
      else
      {
        uint64_t v17 = v16;
      }
      if (a3 - 12 >= 3)
      {
        uint64_t v18 = v17;
      }
      else
      {
        unint64_t v15 = ".tls$";
        uint64_t v18 = 5;
      }
      if (v13 >= 3) {
        uint64_t v11 = v15;
      }
      else {
        uint64_t v11 = ".bss";
      }
      if (v13 >= 3) {
        size_t v12 = v18;
      }
      else {
        size_t v12 = 4;
      }
    }
    v64 = v67;
    uint64_t v66 = 256;
    memcpy(v67, v11, v12);
    std::string::size_type v65 = v12;
    int v19 = sub_1CC4A8498(a3, a4[118]);
    unsigned int v20 = sub_1CC4A8540(a2);
    if (v20 <= 1) {
      unsigned int v21 = 1;
    }
    else {
      unsigned int v21 = v20;
    }
    uint64_t v22 = (unsigned __int8 *)a2;
    if (*(void *)(a2 + 48)) {
      uint64_t v22 = sub_1CC4A85E0(a2);
    }
    int v23 = v19 | 0x1000;
    if (v9)
    {
      unsigned int v24 = *(_DWORD *)(a1 + 992);
      *(_DWORD *)(a1 + 992) = v24 + 1;
    }
    else
    {
      unsigned int v24 = -1;
    }
    if ((*((_DWORD *)v22 + 8) & 0xF) == 8)
    {
      char v55 = &v56;
      int v56 = &v58;
      long long v57 = xmmword_1CD96DBF0;
      unsigned int v25 = *(llvm::Mangler **)(a1 + 936);
      LODWORD(v48) = 0;
      char v52 = 0;
      uint64_t v53 = 0;
      int v54 = 0;
      uint64_t v47 = (char *)&unk_1F2646FA8;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      llvm::Mangler::getNameWithPrefix(v25, &v47, (const llvm::GlobalValue *)a2, 1);
      uint64_t v47 = (char *)&unk_1F2646B98;
      if (v54 == 1 && v49) {
        MEMORY[0x1D25D9CB0](v49, 0x1000C8077774924);
      }
      uint64_t COFFSection = llvm::MCContext::getCOFFSection(*(llvm::MCContext **)(a1 + 840), (std::string::value_type *)v64, v65, v23, a3, (std::string::size_type)v56, v57, v21, v24, 0);
      if (v56 != &v58) {
        free(v56);
      }
      goto LABEL_74;
    }
    uint64_t Symbol = (unsigned char *)llvm::TargetMachine::getSymbol((llvm::TargetMachine *)a4, (const llvm::GlobalValue *)v22);
    if ((*Symbol & 4) != 0)
    {
      uint64_t v30 = (std::string::size_type *)*((void *)Symbol - 1);
      std::string::size_type v31 = *v30;
      std::string::size_type v28 = (std::string::size_type)(v30 + 2);
      std::string::size_type v29 = v31;
    }
    else
    {
      std::string::size_type v28 = 0;
      std::string::size_type v29 = 0;
    }
    if (!*(unsigned char *)(a2 + 16))
    {
      llvm::Function::getSectionPrefix((uint64_t ***)a2, (uint64_t)&v47);
      if ((_BYTE)v49)
      {
        LODWORD(v57) = 0;
        char v60 = 0;
        uint64_t v61 = 0;
        v63 = &v64;
        int v62 = 0;
        int v56 = &unk_1F2646FA8;
        *((void *)&v57 + 1) = 0;
        uint64_t v58 = 0;
        v59 = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v56, 36);
        size_t v32 = v48;
        if (v48 <= v58 - (uint64_t)v59)
        {
          if (v48)
          {
            memcpy(v59, v47, v48);
            v59 += v32;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v56, v47, v48);
        }
        int v56 = &unk_1F2646B98;
        if (v62 == 1 && *((void *)&v57 + 1)) {
          MEMORY[0x1D25D9CB0](*((void *)&v57 + 1), 0x1000C8077774924);
        }
      }
    }
    __int16 v33 = *(llvm::MCContext **)(a1 + 840);
    if (*((_DWORD *)v33 + 15) != 15 || *((_DWORD *)v33 + 16) != 1)
    {
LABEL_73:
      uint64_t COFFSection = llvm::MCContext::getCOFFSection(v33, (std::string::value_type *)v64, v65, v23, a3, v28, v29, v21, v24, 0);
LABEL_74:
      if (v64 != v67) {
        free(v64);
      }
      return COFFSection;
    }
    LODWORD(v57) = 0;
    char v60 = 0;
    uint64_t v61 = 0;
    v63 = &v64;
    int v62 = 0;
    int v56 = &unk_1F2646FA8;
    *((void *)&v57 + 1) = 0;
    uint64_t v58 = 0;
    v59 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v56, 36);
    if ((v22[23] & 0x10) == 0)
    {
LABEL_71:
      int v56 = &unk_1F2646B98;
      if (v62 == 1 && *((void *)&v57 + 1)) {
        MEMORY[0x1D25D9CB0](*((void *)&v57 + 1), 0x1000C8077774924);
      }
      __int16 v33 = *(llvm::MCContext **)(a1 + 840);
      goto LABEL_73;
    }
    uint64_t v34 = ***(void ***)v22;
    uint64_t v35 = *(void *)(v34 + 152);
    uint64_t v36 = *(unsigned int *)(v34 + 168);
    if (v36)
    {
      LODWORD(v37) = (v36 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      uint64_t v38 = (unsigned __int8 **)(v35 + 16 * v37);
      char v39 = *v38;
      if (*v38 == v22) {
        goto LABEL_67;
      }
      int v40 = 1;
      while (v39 != (unsigned __int8 *)-4096)
      {
        int v41 = v37 + v40++;
        uint64_t v37 = v41 & (v36 - 1);
        char v39 = *(unsigned __int8 **)(v35 + 16 * v37);
        if (v39 == v22)
        {
          uint64_t v38 = (unsigned __int8 **)(v35 + 16 * v37);
          goto LABEL_67;
        }
      }
    }
    uint64_t v38 = (unsigned __int8 **)(v35 + 16 * v36);
LABEL_67:
    uint64_t v42 = (size_t *)v38[1];
    size_t v45 = *v42;
    uint64_t v43 = v42 + 2;
    size_t v44 = v45;
    if (v45 <= v58 - (uint64_t)v59)
    {
      if (v44)
      {
        memcpy(v59, v43, v44);
        v59 += v44;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v56, (const char *)v43, v44);
    }
    goto LABEL_71;
  }
  if (v7 == 2) {
    return *(void *)(a1 + 24);
  }
  if (a3 - 12 <= 2) {
    return *(void *)(a1 + 416);
  }
  if ((a3 & 0xFC) != 4 && (a3 & 0xFC) != 8)
  {
    if (a3 - 15 < 4) {
      return *(void *)(a1 + 40);
    }
    if (a3 != 20) {
      return *(void *)(a1 + 32);
    }
  }
  return *(void *)(a1 + 48);
}

void llvm::TargetLoweringObjectFileCOFF::getNameWithPrefix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_DWORD *)(a3 + 32) & 0xF) != 8) {
    goto LABEL_5;
  }
  if (*(unsigned char *)(a3 + 16) == 3)
  {
    if ((*(unsigned char *)(a4 + 1040) & 4) == 0)
    {
LABEL_5:
      int v4 = 0;
      goto LABEL_6;
    }
  }
  else if (*(unsigned char *)(a3 + 16) || (*(unsigned char *)(a4 + 1040) & 2) == 0)
  {
    goto LABEL_5;
  }
  int v4 = 1;
LABEL_6:
  uint64_t v5 = *(llvm::Mangler **)(a1 + 936);
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v14 = a2;
  int v13 = 0;
  int v6 = (char *)&unk_1F2646FA8;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  llvm::Mangler::getNameWithPrefix(v5, &v6, (const llvm::GlobalValue *)a3, v4);
  int v6 = (char *)&unk_1F2646B98;
  if (v13 == 1)
  {
    if (v8) {
      MEMORY[0x1D25D9CB0](v8, 0x1000C8077774924);
    }
  }
}

uint64_t llvm::TargetLoweringObjectFileCOFF::getSectionForJumpTable(llvm::TargetLoweringObjectFileCOFF *this, const llvm::Function *a2, const llvm::TargetMachine *a3)
{
  if ((*((unsigned char *)a3 + 1040) & 2) == 0 && !*((void *)a2 + 6) || (*((_DWORD *)a2 + 8) & 0xF) == 8) {
    return *((void *)this + 6);
  }
  uint64_t Symbol = (unsigned char *)llvm::TargetMachine::getSymbol(a3, a2);
  if ((*Symbol & 4) != 0)
  {
    uint64_t v8 = (std::string::size_type *)*((void *)Symbol - 1);
    std::string::size_type v9 = *v8;
    std::string::size_type v6 = (std::string::size_type)(v8 + 2);
    std::string::size_type v7 = v9;
  }
  else
  {
    std::string::size_type v6 = 0;
    std::string::size_type v7 = 0;
  }
  unsigned int v10 = *((_DWORD *)this + 248);
  *((_DWORD *)this + 248) = v10 + 1;
  return llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 105), ".rdata", 6uLL, 1073745984, 4, v6, v7, 5u, v10, 0);
}

void llvm::TargetLoweringObjectFileCOFF::emitModuleMetadata(const llvm::Triple **this, llvm::MCStreamer *a2, llvm::Module *a3)
{
  llvm::TargetLoweringObjectFileCOFF::emitLinkerDirectives(this, a2, a3);
  uint64_t v13 = 0;
  __s = 0;
  std::string::size_type __sz = 0;
  sub_1CC4A3C14(a3, (_DWORD *)&v13 + 1, (int *)&v13, &__s);
  if (__sz)
  {
    std::string::size_type v6 = this[105];
    uint64_t COFFSection = llvm::MCContext::getCOFFSection(v6, __s, __sz, 1073741888, 4, (std::string::size_type)&unk_1CFBF5F4A, 0, 0, 0xFFFFFFFF, 0);
    (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a2 + 168))(a2, COFFSection, 0);
    __int16 v10 = 261;
    v9[0] = (unsigned __int8 **)"OBJC_IMAGE_INFO";
    v9[1] = (unsigned __int8 **)15;
    uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v6, v9);
    (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a2 + 192))(a2, Symbol, 0);
    (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, HIDWORD(v13), 4);
    (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, v13, 4);
    (*(void (**)(llvm::MCStreamer *))(*(void *)a2 + 152))(a2);
  }
  llvm::TargetLoweringObjectFile::emitCGProfileMetadata((llvm::TargetLoweringObjectFile *)this, a2, a3);
}

void llvm::TargetLoweringObjectFileCOFF::emitLinkerDirectives(const llvm::Triple **this, llvm::MCStreamer *a2, llvm::Module *a3)
{
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.linker.options";
  LOWORD(v70) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a3, (const char **)&v68.__r_.__value_.__l.__data_);
  v63 = (llvm::TargetLoweringObjectFileCOFF *)this;
  if (NamedMetadata)
  {
    uint64_t v6 = NamedMetadata;
    (*(void (**)(llvm::MCStreamer *, const llvm::Triple *, void))(*(void *)a2 + 168))(a2, this[83], 0);
    uint64_t v65 = *(unsigned int *)(*(void *)(v6 + 48) + 8);
    if (v65)
    {
      uint64_t v7 = 0;
      uint64_t v64 = v6;
      while (1)
      {
        uint64_t v66 = v7;
        uint64_t v8 = *(void *)(**(void **)(v6 + 48) + 8 * v7);
        uint64_t v9 = *(unsigned int *)(v8 + 8);
        if (v9) {
          break;
        }
LABEL_31:
        uint64_t v7 = v66 + 1;
        uint64_t v6 = v64;
        if (v66 + 1 == v65) {
          goto LABEL_32;
        }
      }
      uint64_t v10 = -8 * v9;
      while (1)
      {
        *((unsigned char *)&v68.__r_.__value_.__s + 23) = 1;
        LOWORD(v68.__r_.__value_.__l.__data_) = 32;
        char v11 = *(unint64_t **)(*(void *)(v8 + v10) + 8);
        unint64_t v14 = *v11;
        uint64_t v13 = v11 + 3;
        size_t v12 = v14;
        if (v14 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v12 >= 0x17)
        {
          uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17) {
            uint64_t v16 = v12 | 7;
          }
          uint64_t v17 = v16 + 1;
          p_dst = (void **)operator new(v16 + 1);
          std::string::size_type v76 = v12;
          int64_t v77 = v17 | 0x8000000000000000;
          long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v77) = v12;
          p_dst = (void **)&__dst;
          if (!v12) {
            goto LABEL_14;
          }
        }
        memmove(p_dst, v13, v12);
LABEL_14:
        *((unsigned char *)p_dst + v12) = 0;
        if (v77 >= 0) {
          uint64_t v18 = (const std::string::value_type *)&__dst;
        }
        else {
          uint64_t v18 = (const std::string::value_type *)__dst;
        }
        if (v77 >= 0) {
          std::string::size_type v19 = HIBYTE(v77) & 0x7F;
        }
        else {
          std::string::size_type v19 = v76;
        }
        std::string::append(&v68, v18, v19);
        if (SHIBYTE(v77) < 0) {
          operator delete(__dst);
        }
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v20 = &v68;
        }
        else {
          unsigned int v20 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = *((unsigned char *)&v68.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type size = v68.__r_.__value_.__l.__size_;
        }
        (*(void (**)(llvm::MCStreamer *, std::string *, std::string::size_type))(*(void *)a2 + 488))(a2, v20, size);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        v10 += 8;
        if (!v10) {
          goto LABEL_31;
        }
      }
    }
  }
LABEL_32:
  v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v22 = (void **)((char *)a3 + 24);
  int v23 = (void **)*((void *)a3 + 4);
  unsigned int v24 = (char *)a3 + 8;
  unsigned int v25 = (char *)*((void *)a3 + 2);
  int v26 = (char *)a3 + 40;
  BOOL v27 = (char *)*((void *)a3 + 6);
  std::string::size_type v28 = (char *)a3 + 56;
  std::string::size_type v29 = (char *)*((void *)a3 + 8);
  long long __dst = v23;
  std::string::size_type v76 = (std::string::size_type)v25;
  int64_t v77 = (int64_t)v27;
  v78 = v29;
  v79 = (void **)((char *)a3 + 24);
  v80 = (char *)a3 + 8;
  v81 = (char *)a3 + 40;
  v82 = (char *)a3 + 56;
  while (v23 != v22 || v25 != v24 || v27 != v26 || v29 != v28 || v79 != v22 || v80 != v24 || v81 != v26 || v82 != v28)
  {
    uint64_t v30 = (llvm::raw_ostream *)sub_1CC4AD368((uint64_t)&__dst);
    LODWORD(v68.__r_.__value_.__r.__words[1]) = 0;
    char v71 = 0;
    uint64_t v72 = 0;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646F30;
    uint64_t v74 = &v83;
    int v73 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    v68.__r_.__value_.__r.__words[2] = 0;
    llvm::emitLinkerFlagsForGlobalCOFF((llvm *)&v68, v30, (const llvm::Triple *)((char *)this[105] + 24), this[117], v31);
    std::string::size_type v32 = v70 - v68.__r_.__value_.__r.__words[2];
    if (v70 != v68.__r_.__value_.__r.__words[2])
    {
      uint64_t v70 = v68.__r_.__value_.__r.__words[2];
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v68, (const char *)v68.__r_.__value_.__r.__words[2]);
    }
    char v33 = HIBYTE(v85);
    uint64_t v34 = HIBYTE(v85) & 0x7F;
    if (v85 < 0) {
      uint64_t v34 = v84;
    }
    if (v34)
    {
      (*(void (**)(llvm::MCStreamer *, const llvm::Triple *, void))(*(void *)a2 + 168))(a2, this[83], 0);
      if (v85 >= 0) {
        uint64_t v35 = &v83;
      }
      else {
        uint64_t v35 = (unsigned char **)v83;
      }
      if (v85 >= 0) {
        uint64_t v36 = HIBYTE(v85) & 0x7F;
      }
      else {
        uint64_t v36 = v84;
      }
      (*(void (**)(llvm::MCStreamer *, unsigned char **, uint64_t))(*(void *)a2 + 488))(a2, v35, v36);
      char v33 = HIBYTE(v85);
    }
    if (v33 < 0)
    {
      unsigned char *v83 = 0;
      uint64_t v84 = 0;
    }
    else
    {
      LOBYTE(v83) = 0;
      HIBYTE(v85) = 0;
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646B98;
    if (v73 == 1)
    {
      if (v68.__r_.__value_.__r.__words[2]) {
        MEMORY[0x1D25D9CB0](v68.__r_.__value_.__r.__words[2], 0x1000C8077774924, v32);
      }
    }
    sub_1CC4AD1DC((uint64_t)&__dst);
    int v23 = __dst;
    unsigned int v25 = (char *)v76;
    BOOL v27 = (char *)v77;
    std::string::size_type v29 = v78;
  }
  uint64_t v37 = (uint64_t *)*((void *)a3 + 14);
  unsigned int v38 = *((_DWORD *)v37 + 8);
  if (v38 <= 1) {
    uint64_t v39 = 1;
  }
  else {
    uint64_t v39 = v38;
  }
  if (v38 <= 8) {
    size_t v40 = v39;
  }
  else {
    size_t v40 = 9;
  }
  uint64_t v67 = *((unsigned int *)v37 + 2);
  if (v67)
  {
    uint64_t v41 = 0;
    int v42 = 0;
    do
      int v42 = 33 * v42 + aLlvmUsed[v41++];
    while (v40 != v41);
    uint64_t v43 = *v37;
    uint64_t v44 = *v37 + 8 * v67 + 8;
    int v45 = 1;
    int v46 = v42;
    while (1)
    {
      uint64_t v47 = v46 & (v67 - 1);
      size_t v48 = *(void **)(v43 + 8 * v47);
      if (v48 != (void *)-8)
      {
        if (!v48) {
          goto LABEL_79;
        }
        if (*(_DWORD *)(v44 + 4 * v47) == v42
          && v40 == *v48
          && !memcmp("llvm.used", (char *)v48 + *((unsigned int *)v37 + 5), v40))
        {
          break;
        }
      }
      int v46 = v45 + v47;
      ++v45;
    }
    if (v47 != -1 && (int)v47 != v67)
    {
      uint64_t v49 = *(void *)(*(void *)(v43 + 8 * (int)v47) + 8);
      if (v49)
      {
        if (*(unsigned char *)(v49 + 16) == 3)
        {
          uint64_t v50 = *(void *)(v49 - 32);
          if (v50)
          {
            int v51 = *(_DWORD *)(v50 + 20);
            if ((v51 & 0x40000000) != 0)
            {
              uint64_t v53 = *(llvm::Value ***)(v50 - 8);
              uint64_t v52 = v51 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v52 = v51 & 0x7FFFFFF;
              uint64_t v53 = (llvm::Value **)(v50 - 32 * v52);
            }
            if (v52)
            {
              uint64_t v54 = 32 * v52;
              do
              {
                char v55 = llvm::Value::stripPointerCasts(*v53);
                if ((*((_DWORD *)v55 + 8) & 0xFu) - 7 >= 2)
                {
                  LODWORD(v68.__r_.__value_.__r.__words[1]) = 0;
                  char v71 = 0;
                  uint64_t v72 = 0;
                  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646F30;
                  uint64_t v74 = &v83;
                  int v73 = 0;
                  uint64_t v69 = 0;
                  uint64_t v70 = 0;
                  v68.__r_.__value_.__r.__words[2] = 0;
                  llvm::emitLinkerFlagsForUsedCOFF((llvm *)&v68, v55, (const llvm::GlobalValue *)(*((void *)v63 + 105) + 24), *((const llvm::Triple **)v63 + 117), v56);
                  std::string::size_type v57 = v70 - v68.__r_.__value_.__r.__words[2];
                  if (v70 != v68.__r_.__value_.__r.__words[2])
                  {
                    uint64_t v70 = v68.__r_.__value_.__r.__words[2];
                    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v68, (const char *)v68.__r_.__value_.__r.__words[2]);
                  }
                  char v58 = HIBYTE(v85);
                  uint64_t v59 = HIBYTE(v85) & 0x7F;
                  if (v85 < 0) {
                    uint64_t v59 = v84;
                  }
                  if (v59)
                  {
                    (*(void (**)(llvm::MCStreamer *, void, void))(*(void *)a2 + 168))(a2, *((void *)v63 + 83), 0);
                    if (v85 >= 0) {
                      char v60 = &v83;
                    }
                    else {
                      char v60 = (unsigned char **)v83;
                    }
                    if (v85 >= 0) {
                      uint64_t v61 = HIBYTE(v85) & 0x7F;
                    }
                    else {
                      uint64_t v61 = v84;
                    }
                    (*(void (**)(llvm::MCStreamer *, unsigned char **, uint64_t))(*(void *)a2 + 488))(a2, v60, v61);
                    char v58 = HIBYTE(v85);
                  }
                  if (v58 < 0)
                  {
                    unsigned char *v83 = 0;
                    uint64_t v84 = 0;
                  }
                  else
                  {
                    LOBYTE(v83) = 0;
                    HIBYTE(v85) = 0;
                  }
                  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646B98;
                  if (v73 == 1 && v68.__r_.__value_.__r.__words[2]) {
                    MEMORY[0x1D25D9CB0](v68.__r_.__value_.__r.__words[2], 0x1000C8077774924, v57);
                  }
                }
                v53 += 4;
                v54 -= 32;
              }
              while (v54);
            }
          }
        }
      }
    }
  }
LABEL_79:
  if (SHIBYTE(v85) < 0) {
    operator delete(v83);
  }
}

void llvm::TargetLoweringObjectFileCOFF::Initialize(llvm::TargetLoweringObjectFileCOFF *this, llvm::MCContext *a2, const llvm::TargetMachine *a3)
{
}

llvm::MCSectionCOFF *llvm::TargetLoweringObjectFileCOFF::getStaticCtorSection(llvm::MCContext **this, unsigned int a2, const llvm::MCSymbol *a3)
{
  return sub_1CC4A98EC(this[105], *((_DWORD *)this[105] + 15), *((_DWORD *)this[105] + 16), 1, a2, a3, this[121]);
}

llvm::MCSectionCOFF *sub_1CC4A98EC(llvm::MCContext *this, int a2, int a3, int a4, unsigned int a5, llvm::MCSymbol *a6, llvm::MCSectionCOFF *a7)
{
  v41[3] = *MEMORY[0x1E4F143B8];
  BOOL v12 = (a3 & 0xFFFFFFEF) == 0 || a3 == 17;
  if (a2 != 15 || !v12)
  {
    unint64_t v14 = ".ctors";
    if (!a4) {
      unint64_t v14 = ".dtors";
    }
    char v15 = 6;
    HIBYTE(v40) = 6;
    LODWORD(v39) = *(_DWORD *)v14;
    WORD2(v39) = *((_WORD *)v14 + 2);
    BYTE6(v39) = 0;
    uint64_t v16 = 0xFFFFLL;
    if (a5 != 0xFFFF)
    {
      int v31 = 0;
      char v35 = 0;
      uint64_t v36 = 0;
      unsigned int v38 = (void **)&v39;
      int v37 = 0;
      uint64_t v30 = &unk_1F2646F30;
      uint64_t v32 = 0;
      char v33 = 0;
      uint64_t v34 = 0;
      BOOL v27 = &unk_1F25FED10;
      std::string::size_type v28 = ".%05u";
      uint64_t v29 = 0xFFFF - a5;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v30, (uint64_t)&v27);
      uint64_t v30 = &unk_1F2646B98;
      if (v37 == 1 && v32) {
        MEMORY[0x1D25D9CB0](v32, 0x1000C8077774924);
      }
      char v15 = HIBYTE(v40);
      uint64_t v16 = v40;
    }
    BOOL v20 = v15 < 0;
    if (v15 >= 0) {
      unsigned int v21 = (std::string::value_type *)&v39;
    }
    else {
      unsigned int v21 = v39;
    }
    std::string::size_type v22 = v15 & 0x7F;
    if (v20) {
      std::string::size_type v23 = v16;
    }
    else {
      std::string::size_type v23 = v22;
    }
    uint64_t COFFSection = (llvm::MCSectionCOFF *)llvm::MCContext::getCOFFSection(this, v21, v23, -1073741760, 19, (std::string::size_type)&unk_1CFBF5F4A, 0, 0, 0xFFFFFFFF, 0);
    Associativeuint64_t COFFSection = llvm::MCContext::getAssociativeCOFFSection(this, COFFSection, a6, 0);
    if (SHIBYTE(v40) < 0) {
      operator delete(v39);
    }
    return AssociativeCOFFSection;
  }
  if (a5 != 0xFFFF)
  {
    uint64_t v39 = (std::string::value_type *)v41;
    long long v40 = xmmword_1CFAC79E0;
    int v31 = 0;
    char v35 = 0;
    uint64_t v36 = 0;
    unsigned int v38 = (void **)&v39;
    int v37 = 0;
    uint64_t v30 = &unk_1F2646FA8;
    uint64_t v32 = 0;
    char v33 = 0;
    uint64_t v34 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v30, ".CRT$X", 6uLL);
    if (a4) {
      uint64_t v17 = "C";
    }
    else {
      uint64_t v17 = "T";
    }
    if (v33 == v34)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v30, v17, 1uLL);
      uint64_t v18 = v34;
    }
    else
    {
      *uint64_t v34 = *v17;
      uint64_t v18 = ++v34;
    }
    if (a5 >= 0xC8) {
      char v19 = 84;
    }
    else {
      char v19 = 65;
    }
    if (v18 >= v33)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v30, v19);
    }
    else
    {
      uint64_t v34 = v18 + 1;
      *uint64_t v18 = v19;
    }
    BOOL v27 = &unk_1F25FED10;
    std::string::size_type v28 = "%05u";
    uint64_t v29 = a5;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v30, (uint64_t)&v27);
    int v26 = (llvm::MCSectionCOFF *)llvm::MCContext::getCOFFSection(this, v39, v40, 1073741888, 4, (std::string::size_type)&unk_1CFBF5F4A, 0, 0, 0xFFFFFFFF, 0);
    Associativeuint64_t COFFSection = llvm::MCContext::getAssociativeCOFFSection(this, v26, a6, 0);
    uint64_t v30 = &unk_1F2646B98;
    if (v37 == 1 && v32) {
      MEMORY[0x1D25D9CB0](v32, 0x1000C8077774924);
    }
    if (v39 != (std::string::value_type *)v41) {
      free(v39);
    }
    return AssociativeCOFFSection;
  }

  return llvm::MCContext::getAssociativeCOFFSection(this, a7, a6, 0);
}

llvm::MCSectionCOFF *llvm::TargetLoweringObjectFileCOFF::getStaticDtorSection(llvm::MCContext **this, unsigned int a2, const llvm::MCSymbol *a3)
{
  return sub_1CC4A98EC(this[105], *((_DWORD *)this[105] + 15), *((_DWORD *)this[105] + 16), 0, a2, a3, this[122]);
}

unint64_t llvm::TargetLoweringObjectFileCOFF::lowerRelativeReference(llvm::TargetLoweringObjectFileCOFF *this, const llvm::GlobalValue *a2, const llvm::GlobalValue *a3, const llvm::TargetMachine *a4)
{
  int v7 = *((_DWORD *)a4 + 122);
  BOOL v9 = v7 == 18 || v7 == 1;
  if (*((_DWORD *)a4 + 121) == 15 && v9) {
    return 0;
  }
  unsigned int v10 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v10 > 0xFF) {
    return 0;
  }
  char v11 = *(uint64_t ***)a3;
  unsigned int v12 = *(_DWORD *)(*(void *)a3 + 8);
  if ((v12 & 0xFE) == 0x12) {
    unsigned int v12 = *(_DWORD *)(*v11[2] + 8);
  }
  if (v12 > 0xFF) {
    return 0;
  }
  unint64_t result = 0;
  unsigned int v14 = *((unsigned __int8 *)a2 + 16);
  if (v14 > 3 || v14 == 1) {
    return result;
  }
  if (*((unsigned char *)a3 + 16) != 3) {
    return 0;
  }
  if ((*((unsigned char *)a2 + 33) & 0x1C) != 0) {
    return 0;
  }
  if ((*((_DWORD *)a3 + 8) & 0x1C00) != 0) {
    return 0;
  }
  int v15 = *((_DWORD *)a3 + 5);
  if ((v15 & 0x10000000) == 0) {
    return 0;
  }
  uint64_t v16 = **v11;
  uint64_t v17 = *(void *)(v16 + 152);
  uint64_t v18 = *(unsigned int *)(v16 + 168);
  if (v18)
  {
    LODWORD(v19) = (v18 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v20 = v17 + 16 * v19;
    unsigned int v21 = *(const llvm::GlobalValue **)v20;
    if (*(const llvm::GlobalValue **)v20 == a3) {
      goto LABEL_28;
    }
    int v22 = 1;
    while (v21 != (const llvm::GlobalValue *)-4096)
    {
      int v23 = v19 + v22++;
      uint64_t v19 = v23 & (v18 - 1);
      unsigned int v21 = *(const llvm::GlobalValue **)(v17 + 16 * v19);
      if (v21 == a3)
      {
        uint64_t v20 = v17 + 16 * v19;
        goto LABEL_28;
      }
    }
  }
  uint64_t v20 = v17 + 16 * v18;
LABEL_28:
  unsigned int v24 = *(void **)(v20 + 8);
  if (*v24 != 11) {
    return 0;
  }
  unint64_t v25 = 0x5F5F496D61676542;
  unint64_t v26 = bswap64(v24[2]);
  if (v26 == 0x5F5F496D61676542
    && (v25 = 0x6D61676542617365, unint64_t v26 = bswap64(*(void *)((char *)v24 + 19)), v26 == 0x6D61676542617365))
  {
    int v27 = 0;
  }
  else
  {
    int v27 = v26 < v25 ? -1 : 1;
  }
  if (v15 & 0x7FFFFFF | *((_DWORD *)a3 + 8) & 0xF | v27) {
    return 0;
  }
  llvm::GlobalValue::getSection(a3);
  if (v28) {
    return 0;
  }
  uint64_t Symbol = llvm::TargetMachine::getSymbol(a4, a2);
  uint64_t v30 = *((void *)this + 105);
  *(void *)(v30 + 272) += 24;
  uint64_t v31 = *(void *)(v30 + 192);
  if (((v31 + 7) & 0xFFFFFFFFFFFFFFF8) - v31 + 24 > *(void *)(v30 + 200) - v31)
  {
    unsigned int v33 = *(_DWORD *)(v30 + 216) >> 7;
    if (v33 >= 0x1E) {
      LOBYTE(v33) = 30;
    }
    uint64_t v34 = 4096 << v33;
    uint64_t v36 = (char *)operator new(4096 << v33, (std::align_val_t)8uLL);
    unsigned int v35 = *(_DWORD *)(v30 + 216);
    if (v35 >= *(_DWORD *)(v30 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t result = (unint64_t)v36;
    *(void *)(*(void *)(v30 + 208) + 8 * v35) = v36;
    ++*(_DWORD *)(v30 + 216);
    *(void *)(v30 + 200) = &v36[v34];
  }
  else
  {
    unint64_t result = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v30 + 192) = result + 24;
  if (*(unsigned char *)(*(void *)(v30 + 152) + 18)) {
    int v32 = 65651;
  }
  else {
    int v32 = 115;
  }
  *(unsigned char *)unint64_t result = 2;
  *(_DWORD *)(result + 1) = v32 | (*(unsigned __int8 *)(result + 4) << 24);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = Symbol;
  return result;
}

uint64_t llvm::TargetLoweringObjectFileCOFF::getSectionForConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t COFFSection = a3;
  v23[2] = *MEMORY[0x1E4F143B8];
  int v7 = a3 & 0xFC;
  if (a4 && v7 == 8)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 840) + 152) + 22))
    {
      __p = 0;
      long long v22 = 0uLL;
      switch((char)a3)
      {
        case 8:
          if (*a5 > 2u) {
            goto LABEL_21;
          }
          sub_1CC4AA378(&v20, a4);
          BOOL v9 = std::string::insert(&v20, 0, "__real@");
          unsigned int v10 = (void *)v9->__r_.__value_.__r.__words[0];
          v23[0] = v9->__r_.__value_.__l.__size_;
          *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
          char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
          v9->__r_.__value_.__l.__size_ = 0;
          v9->__r_.__value_.__r.__words[2] = 0;
          v9->__r_.__value_.__r.__words[0] = 0;
          __p = v10;
          *(void *)&long long v22 = v23[0];
          *(void *)((char *)&v22 + 7) = *(void *)((char *)v23 + 7);
          HIBYTE(v22) = v11;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          char v12 = 2;
          goto LABEL_25;
        case 9:
          if (*a5 > 3u) {
            goto LABEL_21;
          }
          sub_1CC4AA378(&v20, a4);
          uint64_t v13 = std::string::insert(&v20, 0, "__real@");
          unsigned int v10 = (void *)v13->__r_.__value_.__r.__words[0];
          v23[0] = v13->__r_.__value_.__l.__size_;
          *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
          char v11 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          __p = v10;
          *(void *)&long long v22 = v23[0];
          *(void *)((char *)&v22 + 7) = *(void *)((char *)v23 + 7);
          HIBYTE(v22) = v11;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          char v12 = 3;
          goto LABEL_25;
        case 10:
          if (*a5 > 4u) {
            goto LABEL_21;
          }
          sub_1CC4AA378(&v20, a4);
          unsigned int v14 = std::string::insert(&v20, 0, "__xmm@");
          unsigned int v10 = (void *)v14->__r_.__value_.__r.__words[0];
          v23[0] = v14->__r_.__value_.__l.__size_;
          *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
          char v11 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          __p = v10;
          *(void *)&long long v22 = v23[0];
          *(void *)((char *)&v22 + 7) = *(void *)((char *)v23 + 7);
          HIBYTE(v22) = v11;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          char v12 = 4;
          goto LABEL_25;
        case 11:
          if (*a5 > 5u) {
            goto LABEL_21;
          }
          sub_1CC4AA378(&v20, a4);
          uint64_t v16 = std::string::insert(&v20, 0, "__ymm@");
          unsigned int v10 = (void *)v16->__r_.__value_.__r.__words[0];
          v23[0] = v16->__r_.__value_.__l.__size_;
          *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          char v11 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          __p = v10;
          *(void *)&long long v22 = v23[0];
          *(void *)((char *)&v22 + 7) = *(void *)((char *)v23 + 7);
          HIBYTE(v22) = v11;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          char v12 = 5;
LABEL_25:
          *a5 = v12;
          std::string::size_type v15 = v22;
          break;
        default:
LABEL_21:
          std::string::size_type v15 = 0;
          unsigned int v10 = 0;
          char v11 = 0;
          break;
      }
      if (v11 >= 0) {
        std::string::size_type v17 = v11 & 0x7F;
      }
      else {
        std::string::size_type v17 = v15;
      }
      if (v17)
      {
        if (v11 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (void **)v10;
        }
        uint64_t COFFSection = llvm::MCContext::getCOFFSection(*(llvm::MCContext **)(a1 + 840), ".rdata", 6uLL, 1073745984, COFFSection, (std::string::size_type)p_p, v17, 2u, 0xFFFFFFFF, 0);
        if ((HIBYTE(v22) & 0x80) != 0) {
          goto LABEL_34;
        }
      }
      else if (v11 < 0)
      {
LABEL_34:
        operator delete(__p);
      }
      if (v17) {
        return COFFSection;
      }
    }
  }
  else if (v7 != 8 && v7 != 4)
  {
    return *(void *)(a1 + 32);
  }
  uint64_t COFFSection = *(void *)(a1 + 48);
  if (!COFFSection) {
    return *(void *)(a1 + 32);
  }
  return COFFSection;
}

void sub_1CC4AA378(std::string *a1, uint64_t a2)
{
  uint64_t v3 = *(llvm::Type **)a2;
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if ((v4 - 11) <= 1)
  {
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v3);
    if (v5 == 1) {
    LODWORD(v16) = PrimitiveSizeInBits;
    }
    if (PrimitiveSizeInBits > 0x40) {
      operator new[]();
    }
    __p = 0;
    goto LABEL_10;
  }
  if (v4 == 16)
  {
    BOOL v9 = (unsigned int *)(a2 + 24);
    sub_1CC4AD048((uint64_t)a1, v9);
  }
  else
  {
    if (v4 == 17)
    {
      uint64_t v8 = (llvm::detail::DoubleAPFloat *)(a2 + 32);
      if (*(_UNKNOWN **)(a2 + 32) == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v8, (llvm::APInt *)&__p);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v8, (uint64_t)&__p);
      }
LABEL_10:
      sub_1CC4AD048((uint64_t)a1, (unsigned int *)&__p);
      if (v16 >= 0x41)
      {
        if (__p) {
          MEMORY[0x1D25D9CB0](__p, 0x1000C8000313F17);
        }
      }
      return;
    }
    int v10 = *((_DWORD *)v3 + 8);
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
    if (v10)
    {
      unint64_t v11 = (v10 - 1);
      do
      {
        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, (llvm::Type *)v11);
        sub_1CC4AA378(&__p, AggregateElement);
        if (v17 >= 0) {
          p_p = (const std::string::value_type *)&__p;
        }
        else {
          p_p = (const std::string::value_type *)__p;
        }
        if (v17 >= 0) {
          std::string::size_type v14 = v17 & 0x7F;
        }
        else {
          std::string::size_type v14 = v16;
        }
        std::string::append(a1, p_p, v14);
        if (v17 < 0) {
          operator delete(__p);
        }
        unint64_t v11 = (v11 - 1);
      }
      while (v11 != -1);
    }
  }
}

uint64_t llvm::TargetLoweringObjectFileWasm::getExplicitSectionGlobal(void *a1, llvm::GlobalAlias *a2, int a3)
{
  if (!*((unsigned char *)a2 + 16))
  {
    uint64_t v6 = *(uint64_t (**)(void))(*a1 + 248);
    return v6();
  }
  if ((*((unsigned char *)a2 + 34) & 0x40) != 0)
  {
    uint64_t v10 = ***(void ***)a2;
    v30[0] = (uint64_t)a2;
    int v11 = *(_DWORD *)(v10 + 2520);
    if (v11)
    {
      uint64_t v12 = *(void *)(v10 + 2504);
      int v13 = v11 - 1;
      unsigned int v14 = v13 & ((a2 >> 4) ^ (a2 >> 9));
      std::string::size_type v15 = (llvm::GlobalAlias **)(v12 + 24 * v14);
      std::string::size_type v16 = *v15;
      if (*v15 == a2) {
        goto LABEL_9;
      }
      uint64_t v18 = 0;
      int v19 = 1;
      while (v16 != (llvm::GlobalAlias *)-4096)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v16 == (llvm::GlobalAlias *)-8192;
        }
        if (v20) {
          uint64_t v18 = v15;
        }
        unsigned int v21 = v14 + v19++;
        unsigned int v14 = v21 & v13;
        std::string::size_type v15 = (llvm::GlobalAlias **)(v12 + 24 * v14);
        std::string::size_type v16 = *v15;
        if (*v15 == a2) {
          goto LABEL_9;
        }
      }
      if (v18) {
        unint64_t v26 = v18;
      }
      else {
        unint64_t v26 = v15;
      }
    }
    else
    {
      unint64_t v26 = 0;
    }
    std::string::size_type v15 = (llvm::GlobalAlias **)sub_1CC5BF31C(v10 + 2504, (uint64_t)v30, v30, v26);
    uint64_t v27 = v30[0];
    v15[1] = 0;
    v15[2] = 0;
    *std::string::size_type v15 = (llvm::GlobalAlias *)v27;
LABEL_9:
    BOOL v9 = v15[1];
    uint64_t v8 = (uint64_t)v15[2];
    if (v8 == 7)
    {
      if (*(_DWORD *)v9 != 1986817070 || *(_DWORD *)((char *)v9 + 3) != 1667394934)
      {
        uint64_t v8 = 7;
        goto LABEL_28;
      }
    }
    else
    {
      if (v8 != 8) {
        goto LABEL_28;
      }
      if (*(void *)v9 != 0x646D636D766C6C2ELL)
      {
        uint64_t v8 = 8;
        goto LABEL_28;
      }
    }
    a3 = 0;
    goto LABEL_28;
  }
  uint64_t v8 = 0;
  BOOL v9 = 0;
LABEL_28:
  long long v22 = sub_1CC4AA7C0(a2);
  if (v22)
  {
    unsigned int v24 = (const char *)(*(void *)v22 + 72);
    uint64_t v23 = **(void **)v22;
  }
  else
  {
    uint64_t v23 = 0;
    unsigned int v24 = "";
  }
  unint64_t v25 = (llvm::MCContext *)a1[105];
  __int16 v31 = 261;
  v30[0] = (uint64_t)v9;
  v30[1] = v8;
  __int16 v29 = 261;
  v28[0] = v24;
  v28[1] = v23;
  return llvm::MCContext::getWasmSection(v25, (llvm::Twine *)v30, a3, (a3 - 5 < 3) | (2 * (a3 - 12 < 3)), (llvm::Twine *)v28, -1);
}

llvm::GlobalAlias *sub_1CC4AA7C0(llvm::GlobalAlias *result)
{
  int v1 = *((unsigned __int8 *)result + 16);
  if (result && v1 == 1)
  {
    unint64_t result = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(result);
    if (!result) {
      return result;
    }
  }
  else if (v1 == 2)
  {
    return 0;
  }
  unint64_t result = (llvm::GlobalAlias *)*((void *)result + 6);
  if (result)
  {
    if (*((_DWORD *)result + 2))
    {
      uint64_t v2 = *(void *)result + 72;
      uint64_t v3 = **(void **)result;
      __int16 v7 = 1283;
      v6[0] = (uint64_t)"WebAssembly COMDATs only support SelectionKind::Any, '";
      v6[2] = v2;
      v6[3] = v3;
      int v4 = "' cannot be lowered.";
      __int16 v5 = 259;
      sub_1CD3E3950(v6, (uint64_t *)&v4, (uint64_t)v8);
      llvm::report_fatal_error((llvm *)v8, (const llvm::Twine *)1);
    }
  }
  return result;
}

uint64_t llvm::TargetLoweringObjectFileWasm::SelectSectionForGlobal(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  v41[16] = *MEMORY[0x1E4F143B8];
  int v5 = a3;
  if (a3 == 18) {
    llvm::report_fatal_error((llvm *)"mergable sections not supported yet on wasm", (const llvm::Twine *)1);
  }
  if ((a3 & 0xFE) == 2) {
    int v9 = 2;
  }
  else {
    int v9 = 4;
  }
  BOOL v11 = (*(_DWORD *)(a4 + 1040) & v9) != 0 || *(void *)(a2 + 48) != 0;
  uint64_t v23 = *(llvm::Mangler **)(a1 + 936);
  *(void *)unsigned int v24 = *(void *)(a1 + 840);
  uint64_t v12 = sub_1CC4AA7C0((llvm::GlobalAlias *)a2);
  if (v12)
  {
    unsigned int v14 = (const char *)(*(void *)v12 + 72);
    size_t v13 = **(void **)v12;
  }
  else
  {
    size_t v13 = 0;
    unsigned int v14 = "";
  }
  if ((v5 & 0xFE) == 2)
  {
    std::string::size_type v15 = ".text";
LABEL_16:
    size_t v16 = 5;
    goto LABEL_31;
  }
  std::string::size_type v15 = ".rodata";
  size_t v16 = 7;
  if ((v5 & 0xFC) != 4 && (v5 & 0xFC) != 8)
  {
    if ((v5 - 15) < 3)
    {
      std::string::size_type v15 = ".bss";
      size_t v16 = 4;
      goto LABEL_31;
    }
    if (v5 == 13)
    {
      std::string::size_type v15 = ".tdata";
      size_t v16 = 6;
      goto LABEL_31;
    }
    if ((v5 & 0xFFFFFFFD) == 0xC)
    {
      std::string::size_type v15 = ".tbss";
      goto LABEL_16;
    }
    if (v5 == 19) {
      std::string::size_type v15 = ".data";
    }
    else {
      std::string::size_type v15 = ".data.rel.ro";
    }
    if (v5 == 19) {
      size_t v16 = 5;
    }
    else {
      size_t v16 = 12;
    }
  }
LABEL_31:
  int v17 = *(_DWORD *)(a4 + 1040);
  unsigned int v38 = v41;
  unint64_t v40 = 128;
  memcpy(v41, v15, v16);
  size_t v39 = v16;
  if (!*(unsigned char *)(a2 + 16))
  {
    llvm::Function::getSectionPrefix((uint64_t ***)a2, (uint64_t)&v25);
    if (v27)
    {
      LODWORD(v30) = 0;
      char v34 = 0;
      uint64_t v35 = 0;
      int v37 = &v38;
      int v36 = 0;
      __int16 v29 = (char *)&unk_1F2646FA8;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      unsigned int v33 = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v29, 46);
      size_t v18 = v26;
      if (v26 <= v32 - (uint64_t)v33)
      {
        if (v26)
        {
          memcpy(v33, v25, v26);
          v33 += v18;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v29, v25, v26);
      }
      __int16 v29 = (char *)&unk_1F2646B98;
      if (v36 == 1 && v31) {
        MEMORY[0x1D25D9CB0](v31, 0x1000C8077774924);
      }
    }
  }
  if ((v11 & ((v17 & 0x20) >> 5)) == 1)
  {
    if (v39 + 1 > v40) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v38 + v39++) = 46;
    LODWORD(v30) = 0;
    char v34 = 0;
    uint64_t v35 = 0;
    int v37 = &v38;
    int v36 = 0;
    __int16 v29 = (char *)&unk_1F2646FA8;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    unsigned int v33 = 0;
    llvm::Mangler::getNameWithPrefix(v23, &v29, (const llvm::GlobalValue *)a2, 0);
    __int16 v29 = (char *)&unk_1F2646B98;
    if (v36 == 1 && v31) {
      MEMORY[0x1D25D9CB0](v31, 0x1000C8077774924);
    }
    int v19 = -1;
    goto LABEL_42;
  }
  int v19 = -1;
  if (!v11)
  {
LABEL_42:
    BOOL v20 = *(llvm::MCContext **)v24;
    goto LABEL_46;
  }
  BOOL v20 = *(llvm::MCContext **)v24;
  if ((v17 & 0x20) == 0)
  {
    int v19 = *(_DWORD *)(a1 + 992);
    *(_DWORD *)(a1 + 992) = v19 + 1;
  }
LABEL_46:
  LOWORD(v33) = 261;
  __int16 v29 = (char *)v38;
  size_t v30 = v39;
  __int16 v28 = 261;
  unint64_t v25 = v14;
  size_t v26 = v13;
  uint64_t WasmSection = llvm::MCContext::getWasmSection(v20, (llvm::Twine *)&v29, a3, ((v5 - 5) < 3) | (2 * ((v5 - 12) < 3)), (llvm::Twine *)&v25, v19);
  if (v38 != v41) {
    free(v38);
  }
  return WasmSection;
}

uint64_t llvm::TargetLoweringObjectFileWasm::shouldPutJumpTableInFunctionSection(llvm::TargetLoweringObjectFileWasm *this, BOOL a2, const Function *a3)
{
  return 0;
}

unint64_t llvm::TargetLoweringObjectFileWasm::lowerRelativeReference(llvm::TargetLoweringObjectFileWasm *this, const llvm::GlobalValue *a2, const llvm::GlobalValue *a3, const llvm::TargetMachine *a4)
{
  int v4 = *((_DWORD *)a2 + 8);
  if ((v4 & 0xC0) != 0x80 || *(unsigned char *)(*((void *)a2 + 3) + 8) != 14) {
    return 0;
  }
  unsigned int v8 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v8 & 0xFE) == 0x12) {
    unsigned int v8 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v8 > 0xFF) {
    return 0;
  }
  unsigned int v9 = *(_DWORD *)(*(void *)a3 + 8);
  if ((v9 & 0xFE) == 0x12) {
    unsigned int v9 = *(_DWORD *)(**(void **)(*(void *)a3 + 16) + 8);
  }
  unint64_t v10 = 0;
  if ((v4 & 0x1C00) == 0 && v9 <= 0xFF)
  {
    if ((*((unsigned char *)a3 + 33) & 0x1C) != 0) {
      return 0;
    }
    uint64_t Symbol = llvm::TargetMachine::getSymbol(a4, a2);
    uint64_t v13 = *((void *)this + 105);
    *(void *)(v13 + 272) += 24;
    uint64_t v14 = *(void *)(v13 + 192);
    if (((v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v14 + 24 > *(void *)(v13 + 200) - v14)
    {
      unsigned int v24 = *(_DWORD *)(v13 + 216) >> 7;
      if (v24 >= 0x1E) {
        LOBYTE(v24) = 30;
      }
      uint64_t v25 = 4096 << v24;
      unint64_t v15 = (unint64_t)operator new(4096 << v24, (std::align_val_t)8uLL);
      unsigned int v26 = *(_DWORD *)(v13 + 216);
      if (v26 >= *(_DWORD *)(v13 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v13 + 208) + 8 * v26) = v15;
      ++*(_DWORD *)(v13 + 216);
      *(void *)(v13 + 200) = v15 + v25;
    }
    else
    {
      unint64_t v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v13 + 192) = v15 + 24;
    int v16 = *(unsigned __int8 *)(*(void *)(v13 + 152) + 18) << 16;
    *(unsigned char *)unint64_t v15 = 2;
    *(_DWORD *)(v15 + 1) = v16 | (*(unsigned __int8 *)(v15 + 4) << 24);
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = Symbol;
    uint64_t v17 = llvm::TargetMachine::getSymbol(a4, a3);
    uint64_t v18 = *((void *)this + 105);
    *(void *)(v18 + 272) += 24;
    uint64_t v19 = *(void *)(v18 + 192);
    if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8) - v19 + 24 > *(void *)(v18 + 200) - v19)
    {
      unsigned int v27 = *(_DWORD *)(v18 + 216) >> 7;
      if (v27 >= 0x1E) {
        LOBYTE(v27) = 30;
      }
      uint64_t v28 = 4096 << v27;
      unint64_t v20 = (unint64_t)operator new(4096 << v27, (std::align_val_t)8uLL);
      unsigned int v29 = *(_DWORD *)(v18 + 216);
      if (v29 >= *(_DWORD *)(v18 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v18 + 208) + 8 * v29) = v20;
      ++*(_DWORD *)(v18 + 216);
      *(void *)(v18 + 200) = v20 + v28;
    }
    else
    {
      unint64_t v20 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v18 + 192) = v20 + 24;
    int v21 = *(unsigned __int8 *)(*(void *)(v18 + 152) + 18) << 16;
    *(unsigned char *)unint64_t v20 = 2;
    *(_DWORD *)(v20 + 1) = v21 | (*(unsigned __int8 *)(v20 + 4) << 24);
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = v17;
    uint64_t v22 = *((void *)this + 105);
    *(void *)(v22 + 272) += 32;
    uint64_t v23 = *(void *)(v22 + 192);
    if (((v23 + 7) & 0xFFFFFFFFFFFFFFF8) - v23 + 32 > *(void *)(v22 + 200) - v23)
    {
      unsigned int v30 = *(_DWORD *)(v22 + 216) >> 7;
      if (v30 >= 0x1E) {
        LOBYTE(v30) = 30;
      }
      uint64_t v31 = 4096 << v30;
      unint64_t v10 = (unint64_t)operator new(4096 << v30, (std::align_val_t)8uLL);
      unsigned int v32 = *(_DWORD *)(v22 + 216);
      if (v32 >= *(_DWORD *)(v22 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v22 + 208) + 8 * v32) = v10;
      ++*(_DWORD *)(v22 + 216);
      *(void *)(v22 + 200) = v10 + v31;
    }
    else
    {
      unint64_t v10 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v22 + 192) = v10 + 32;
    *(unsigned char *)unint64_t v10 = 0;
    *(_DWORD *)(v10 + 1) = (*(unsigned __int8 *)(v10 + 4) << 24) | 0x12;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = v15;
    *(void *)(v10 + 24) = v20;
  }
  return v10;
}

uint64_t llvm::TargetLoweringObjectFileWasm::InitializeWasm(llvm::TargetLoweringObjectFileWasm *this)
{
  uint64_t v2 = (llvm::MCContext *)*((void *)this + 105);
  int v4 = ".init_array";
  __int16 v5 = 259;
  __int16 v7 = 257;
  uint64_t result = llvm::MCContext::getWasmSection(v2, (llvm::Twine *)&v4, 19, 0, (llvm::Twine *)v6, -1);
  *((void *)this + 121) = result;
  *((_DWORD *)this + 239) = 0;
  return result;
}

uint64_t llvm::TargetLoweringObjectFileWasm::getStaticCtorSection(llvm::TargetLoweringObjectFileWasm *this, int a2, const llvm::MCSymbol *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2 == 0xFFFF) {
    return *((void *)this + 121);
  }
  LODWORD(v5) = a2;
  uint64_t v6 = (llvm::MCContext *)*((void *)this + 105);
  if (a2)
  {
    __int16 v7 = v18;
    unint64_t v5 = v5;
    do
    {
      *--__int16 v7 = (v5 % 0xA) | 0x30;
      BOOL v8 = v5 > 9;
      v5 /= 0xAuLL;
    }
    while (v8);
  }
  else
  {
    __int16 v7 = &v17;
    char v17 = 48;
  }
  sub_1CC028D80(&v11, v7, v18, v18 - v7);
  unsigned int v9 = std::string::insert(&v11, 0, ".init_array.");
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v13 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  __int16 v15 = 260;
  uint64_t v14 = __p;
  __int16 v19 = 257;
  uint64_t WasmSection = llvm::MCContext::getWasmSection(v6, (llvm::Twine *)&v14, 19, 0, (llvm::Twine *)v16, -1);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return WasmSection;
}

void llvm::TargetLoweringObjectFileWasm::getStaticDtorSection(llvm::TargetLoweringObjectFileWasm *this, unsigned int a2, const llvm::MCSymbol *a3)
{
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::ShouldSetSSPCanaryBitInTB(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::MachineFunction *a2)
{
  uint64_t v2 = *(void *)(*(void *)this + 112);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *(unsigned __int8 *)(v2 + 19);
  if ((v3 & 0x14) != 0) {
    return 1;
  }
  else {
    return (v3 >> 3) & 1;
  }
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getTargetSymbol(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::GlobalValue *a2, const llvm::TargetMachine *a3)
{
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (*((unsigned char *)a2 + 16)) {
    BOOL v7 = v6 == 2;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (v6 != 3) {
      return 0;
    }
    if (llvm::AttributeSet::hasAttribute((uint64_t *)a2 + 9, (uint64_t)"toc-data", 8))
    {
      BOOL v8 = this;
      unsigned int v9 = a2;
      unsigned __int8 v10 = 19;
LABEL_23:
      uint64_t v12 = llvm::TargetLoweringObjectFile::SectionForGlobal((uint64_t)v8, (uint64_t)v9, v10);
      return *(void *)(v12 + 232);
    }
  }
  int v11 = *((_DWORD *)a2 + 8);
  if ((v11 & 0xF) == 1)
  {
LABEL_9:
    uint64_t v12 = (*(uint64_t (**)(llvm::TargetLoweringObjectFileXCOFF *, const llvm::GlobalValue *, const llvm::TargetMachine *))(*(void *)this + 224))(this, a2, a3);
    return *(void *)(v12 + 232);
  }
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v11 & 0x800000) == 0 {
         && *((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72))
  }
  {
    goto LABEL_9;
  }
  unsigned __int8 KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal(a2, a3, a3);
  if ((KindForGlobal & 0xFE) == 2)
  {
    uint64_t v12 = (*(uint64_t (**)(llvm::TargetLoweringObjectFileXCOFF *, const llvm::GlobalValue *, const llvm::TargetMachine *))(*(void *)this + 208))(this, a2, a3);
    return *(void *)(v12 + 232);
  }
  int v14 = *((_DWORD *)a2 + 8);
  if ((v14 & 0xF) == 0xA
    || (((v14 & 0x400000) == 0) & (*((unsigned __int8 *)a3 + 1040) >> 2)) != 0
    || KindForGlobal == 16
    || KindForGlobal == 14)
  {
    unsigned __int8 v10 = KindForGlobal;
    BOOL v8 = this;
    unsigned int v9 = a2;
    goto LABEL_23;
  }
  return 0;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getExplicitSectionGlobal(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned char *)(a2 + 34) & 0x40) == 0)
  {
    int v16 = "#pragma clang section is not yet supported";
LABEL_33:
    llvm::report_fatal_error((llvm *)v16, (const llvm::Twine *)1);
  }
  uint64_t v6 = ***(void ***)a2;
  uint64_t v25 = a2;
  int v7 = *(_DWORD *)(v6 + 2520);
  if (!v7)
  {
    uint64_t v23 = 0;
LABEL_30:
    int v11 = sub_1CC5BF31C(v6 + 2504, (uint64_t)&v25, &v25, v23);
    uint64_t v24 = v25;
    v11[1] = 0;
    v11[2] = 0;
    *int v11 = v24;
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)(v6 + 2504);
  int v9 = v7 - 1;
  unsigned int v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
  int v11 = (void *)(v8 + 24 * v10);
  uint64_t v12 = *v11;
  if (*v11 != a2)
  {
    char v17 = 0;
    int v18 = 1;
    while (v12 != -4096)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v12 == -8192;
      }
      if (v19) {
        char v17 = v11;
      }
      unsigned int v20 = v10 + v18++;
      unsigned int v10 = v20 & v9;
      int v11 = (void *)(v8 + 24 * v10);
      uint64_t v12 = *v11;
      if (*v11 == a2) {
        goto LABEL_4;
      }
    }
    if (v17) {
      uint64_t v23 = v17;
    }
    else {
      uint64_t v23 = v11;
    }
    goto LABEL_30;
  }
LABEL_4:
  __int16 v13 = 257;
  int v14 = (const std::string::value_type *)v11[1];
  std::string::size_type v15 = v11[2];
  if (*(unsigned char *)(a2 + 16) == 3
    && (llvm::AttributeSet::hasAttribute((uint64_t *)(a2 + 72), (uint64_t)"toc-data", 8) & 1) != 0)
  {
    __int16 v13 = 272;
    goto LABEL_24;
  }
  if ((a3 & 0xFE) == 2)
  {
    __int16 v13 = 256;
    goto LABEL_24;
  }
  if (a3 - 15) < 6u && ((0x37u >> (a3 - 15)))
  {
    __int16 v13 = 261;
  }
  else if ((a3 & 0xFC) != 4 && (a3 & 0xFC) != 8)
  {
    int v16 = "XCOFF other section types not yet implemented.";
    goto LABEL_33;
  }
LABEL_24:
  int v21 = *(uint64_t **)(a1 + 840);

  return llvm::MCContext::getXCOFFSection(v21, v14, v15, a3, v13, 1, 0, 0);
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForExternalReference(uint64_t **this, const llvm::GlobalObject *a2, const llvm::TargetMachine *a3)
{
  v11[16] = *MEMORY[0x1E4F143B8];
  int v9 = v11;
  long long v10 = xmmword_1CFAC3020;
  ((void (*)(uint64_t **, void **, const llvm::GlobalObject *, const llvm::TargetMachine *))(*this)[10])(this, &v9, a2, a3);
  if (*((unsigned char *)a2 + 16)) {
    __int16 v5 = 4;
  }
  else {
    __int16 v5 = 10;
  }
  if ((*((_DWORD *)a2 + 8) & 0x1C00) != 0) {
    __int16 v6 = 21;
  }
  else {
    __int16 v6 = v5;
  }
  Xuint64_t COFFSection = llvm::MCContext::getXCOFFSection(this[105], (const std::string::value_type *)v9, v10, 0, v6, 0, 0, 0);
  if (v9 != v11) {
    free(v9);
  }
  return XCOFFSection;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::SelectSectionForGlobal(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  v47[16] = *MEMORY[0x1E4F143B8];
  if (a2
    && *(unsigned char *)(a2 + 16) == 3
    && llvm::AttributeSet::hasAttribute((uint64_t *)(a2 + 72), (uint64_t)"toc-data", 8))
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    *(_OWORD *)&v46.__r_.__value_.__r.__words[1] = xmmword_1CFAC3020;
    (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, &v46, a2, a4);
    uint64_t v8 = *(uint64_t **)(a1 + 840);
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
    int v9 = (const std::string::value_type *)v46.__r_.__value_.__r.__words[0];
    int v11 = a3;
    __int16 v12 = 272;
    int v13 = 1;
LABEL_5:
    Xuint64_t COFFSection = llvm::MCContext::getXCOFFSection(v8, v9, size, v11, v12, v13, 0, 0);
    std::string::size_type v15 = (void *)v46.__r_.__value_.__r.__words[0];
    if (v46.__r_.__value_.__l.__data_ == (std::string::pointer)v47) {
      return XCOFFSection;
    }
    goto LABEL_19;
  }
  if (a3 != 16 && (*(_DWORD *)(a2 + 32) & 0xF) != 0xA && a3 != 14)
  {
    if ((a3 - 5) <= 2u)
    {
      char PreferredAlign = llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*(void *)(a2 + 40) + 272), (const llvm::GlobalVariable *)a2);
      v44.__r_.__value_.__s.__data_[20] = 0x343231u >> (8 * (a3 - 5));
      sub_1CC028D80(&v45, &v44.__r_.__value_.__s.__data_[20], &v44.__r_.__value_.__s.__data_[21], (char *)&v44.__r_.__value_.__r.__words[2] + 5 - ((char *)&v44.__r_.__value_.__r.__words[2] + 4));
      int v21 = std::string::insert(&v45, 0, ".rodata.str");
      std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      uint64_t v23 = std::string::append(&v46, ".");
      std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      uint64_t v43 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      uint64_t v25 = 0;
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
      *(_OWORD *)&v46.__r_.__value_.__r.__words[1] = xmmword_1CFAC3020;
      unint64_t v26 = 1 << PreferredAlign;
      do
      {
        v45.__r_.__value_.__s.__data_[v25-- + 20] = (v26 % 0xA) | 0x30;
        BOOL v27 = v26 > 9;
        v26 /= 0xAuLL;
      }
      while (v27);
      sub_1CC028D80(&v44, &v45.__r_.__value_.__s.__data_[v25 + 21], &v45.__r_.__value_.__s.__data_[21], -v25);
      if (v43 >= 0) {
        uint64_t v28 = __p;
      }
      else {
        uint64_t v28 = (void **)__p[0];
      }
      if (v43 >= 0) {
        std::string::size_type v29 = HIBYTE(v43) & 0x7F;
      }
      else {
        std::string::size_type v29 = (std::string::size_type)__p[1];
      }
      unsigned int v30 = std::string::insert(&v44, 0, (const std::string::value_type *)v28, v29);
      std::string v45 = *v30;
      v30->__r_.__value_.__r.__words[0] = 0;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      int v31 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
      unsigned int v32 = (void *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v33 = &v45;
      }
      else {
        unsigned int v33 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v34 = *((unsigned char *)&v45.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t v34 = v45.__r_.__value_.__l.__size_;
      }
      v46.__r_.__value_.__l.__size_ = 0;
      if (v46.__r_.__value_.__r.__words[2] < v34) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      std::string::size_type v35 = 0;
      if (v34)
      {
        memcpy(v46.__r_.__value_.__l.__data_, v33, v34);
        std::string::size_type v35 = v46.__r_.__value_.__l.__size_;
      }
      v46.__r_.__value_.__l.__size_ = v35 + v34;
      if (v31 < 0) {
        operator delete(v32);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if ((*(unsigned char *)(a4 + 1040) & 4) != 0)
      {
        (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, &v46, a2, a4);
        BOOL v36 = (*(unsigned char *)(a4 + 1040) & 4) == 0;
      }
      else
      {
        BOOL v36 = 1;
      }
      Xuint64_t COFFSection = llvm::MCContext::getXCOFFSection(*(uint64_t **)(a1 + 840), v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_, a3, 257, v36, 0, 0);
      if (v46.__r_.__value_.__l.__data_ != (std::string::pointer)v47) {
        free(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43) < 0) {
        operator delete(__p[0]);
      }
      return XCOFFSection;
    }
    if ((a3 & 0xFE) == 2)
    {
      if ((*(unsigned char *)(a4 + 1040) & 2) != 0) {
        return *(void *)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(a1, a2, a4)
      }
                         + 40);
      else {
        return *(void *)(a1 + 24);
      }
    }
    if (a3 <= 0x14u && ((1 << a3) & 0x1B8000) != 0)
    {
      if ((*(unsigned char *)(a4 + 1040) & 4) == 0) {
        return *(void *)(a1 + 32);
      }
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
      *(_OWORD *)&v46.__r_.__value_.__r.__words[1] = xmmword_1CFAC3020;
      (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, &v46, a2, a4);
      int v37 = *(uint64_t **)(a1 + 840);
      std::string::size_type v39 = v46.__r_.__value_.__l.__size_;
      unsigned int v38 = (const std::string::value_type *)v46.__r_.__value_.__r.__words[0];
      __int16 v40 = 261;
      int v41 = 19;
    }
    else
    {
      if ((a3 & 0xFC) != 8 && (a3 & 0xFC) != 4)
      {
        if ((a3 - 12) > 2u) {
          llvm::report_fatal_error((llvm *)"XCOFF other section types not yet implemented.", (const llvm::Twine *)1);
        }
        if ((*(unsigned char *)(a4 + 1040) & 4) == 0) {
          return *(void *)(a1 + 416);
        }
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
        *(_OWORD *)&v46.__r_.__value_.__r.__words[1] = xmmword_1CFAC3020;
        (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, &v46, a2, a4);
        uint64_t v8 = *(uint64_t **)(a1 + 840);
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
        int v9 = (const std::string::value_type *)v46.__r_.__value_.__r.__words[0];
        int v11 = a3;
        __int16 v12 = 276;
        int v13 = 0;
        goto LABEL_5;
      }
      if ((*(unsigned char *)(a4 + 1040) & 4) == 0) {
        return *(void *)(a1 + 48);
      }
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
      *(_OWORD *)&v46.__r_.__value_.__r.__words[1] = xmmword_1CFAC3020;
      (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, &v46, a2, a4);
      int v37 = *(uint64_t **)(a1 + 840);
      std::string::size_type v39 = v46.__r_.__value_.__l.__size_;
      unsigned int v38 = (const std::string::value_type *)v46.__r_.__value_.__r.__words[0];
      int v41 = 4;
      __int16 v40 = 257;
    }
    Xuint64_t COFFSection = llvm::MCContext::getXCOFFSection(v37, v38, v39, v41, v40, 0, 0, 0);
    std::string::size_type v15 = (void *)v46.__r_.__value_.__r.__words[0];
    if (v46.__r_.__value_.__l.__data_ == (std::string::pointer)v47) {
      return XCOFFSection;
    }
LABEL_19:
    free(v15);
    return XCOFFSection;
  }
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
  *(_OWORD *)&v46.__r_.__value_.__r.__words[1] = xmmword_1CFAC3020;
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, &v46, a2, a4);
  __int16 v17 = 773;
  if (a3 != 18) {
    __int16 v17 = 789;
  }
  if (a3 == 16) {
    __int16 v18 = 777;
  }
  else {
    __int16 v18 = v17;
  }
  Xuint64_t COFFSection = llvm::MCContext::getXCOFFSection(*(uint64_t **)(a1 + 840), v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_, a3, v18, 0, 0, 0);
  std::string::size_type v15 = (void *)v46.__r_.__value_.__r.__words[0];
  if (v46.__r_.__value_.__l.__data_ != (std::string::pointer)v47) {
    goto LABEL_19;
  }
  return XCOFFSection;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForJumpTable(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::Function *a2, const llvm::TargetMachine *a3)
{
  v8[16] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a3 + 1040) & 2) == 0) {
    return *((void *)this + 6);
  }
  __int16 v6 = v8;
  qmemcpy(v8, ".rodata.jmp..", 13);
  long long v7 = xmmword_1CFAC79F0;
  (*(void (**)(llvm::TargetLoweringObjectFileXCOFF *, void **, const llvm::Function *, const llvm::TargetMachine *))(*(void *)this + 80))(this, &v6, a2, a3);
  Xuint64_t COFFSection = llvm::MCContext::getXCOFFSection(*((uint64_t **)this + 105), (const std::string::value_type *)v6, v7, 4, 257, 0, 0, 0);
  if (v6 != v8) {
    free(v6);
  }
  return XCOFFSection;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::shouldPutJumpTableInFunctionSection(llvm::TargetLoweringObjectFileXCOFF *this, BOOL a2, const Function *a3)
{
  return 0;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unsigned int v5 = *a5;
  if (v5 >= 5) {
    llvm::report_fatal_error((llvm *)"Alignments greater than 16 not yet supported.", (const llvm::Twine *)1);
  }
  uint64_t v6 = a1 + 48;
  if (v5 == 3) {
    uint64_t v6 = a1 + 736;
  }
  if (v5 == 4) {
    uint64_t v7 = a1 + 744;
  }
  else {
    uint64_t v7 = v6;
  }
  return *(void *)v7;
}

void llvm::TargetLoweringObjectFileXCOFF::Initialize(llvm::TargetLoweringObjectFileXCOFF *this, llvm::MCContext *a2, const llvm::TargetMachine *a3)
{
}

void llvm::TargetLoweringObjectFileXCOFF::getStaticCtorSection(llvm::TargetLoweringObjectFileXCOFF *this, unsigned int a2, const llvm::MCSymbol *a3)
{
}

void llvm::TargetLoweringObjectFileXCOFF::getStaticDtorSection(llvm::TargetLoweringObjectFileXCOFF *this, unsigned int a2, const llvm::MCSymbol *a3)
{
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::lowerRelativeReference()
{
  return 0;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getFunctionEntryPointSymbol(llvm::MCContext **this, const llvm::GlobalValue *a2, const llvm::TargetMachine *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v13 = v15;
  v15[0] = 46;
  long long v14 = xmmword_1CFAC7A00;
  (*((void (**)(llvm::MCContext **, void **, const llvm::GlobalValue *, const llvm::TargetMachine *))*this
   + 10))(this, &v13, a2, a3);
  if ((*((unsigned char *)a3 + 1040) & 2) == 0 || (llvm::GlobalValue::getSection(a2), v6))
  {
    if (!*((unsigned char *)a2 + 16)
      && *((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72)
      && (*((unsigned char *)a2 + 34) & 0x80) == 0)
    {
      goto LABEL_6;
    }
LABEL_11:
    int v9 = this[105];
    __int16 v12 = 261;
    v11[0] = (unsigned __int8 **)v13;
    v11[1] = (unsigned __int8 **)v14;
    uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v9, v11);
    goto LABEL_12;
  }
  if (*((unsigned char *)a2 + 16)) {
    goto LABEL_11;
  }
LABEL_6:
  __int16 v7 = 256;
  if (*((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72)
    && (*((_DWORD *)a2 + 8) & 0x800000) == 0)
  {
    __int16 v7 = 0;
  }
  uint64_t Symbol = *(void *)(llvm::MCContext::getXCOFFSection((uint64_t *)this[105], (const std::string::value_type *)v13, v14, 2, v7, 0, 0, 0)+ 232);
LABEL_12:
  if (v13 != v15) {
    free(v13);
  }
  return Symbol;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForFunctionDescriptor(uint64_t **this, const llvm::Function *a2, const llvm::TargetMachine *a3)
{
  v8[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v8;
  long long v7 = xmmword_1CFAC3020;
  ((void (*)(uint64_t **, void **, const llvm::Function *, const llvm::TargetMachine *))(*this)[10])(this, &v6, a2, a3);
  Xuint64_t COFFSection = llvm::MCContext::getXCOFFSection(this[105], (const std::string::value_type *)v6, v7, 19, 266, 0, 0, 0);
  if (v6 != v8) {
    free(v6);
  }
  return XCOFFSection;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForTOCEntry(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::MCSymbol *a2, const llvm::TargetMachine *a3)
{
  int v4 = (uint64_t *)*((void *)this + 105);
  std::string::size_type v5 = *((void *)a2 + 8);
  if (v5)
  {
    uint64_t v6 = (const std::string::value_type *)*((void *)a2 + 7);
  }
  else
  {
    if ((*(unsigned char *)a2 & 4) != 0)
    {
      int v11 = (uint64_t *)*((void *)a2 - 1);
      uint64_t v12 = *v11;
      uint64_t v9 = (uint64_t)(v11 + 2);
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v6 = (const std::string::value_type *)sub_1CD586E78(v9, v10);
    std::string::size_type v5 = v13;
  }
  if (*((_DWORD *)a3 + 137) == 4) {
    __int16 v7 = 278;
  }
  else {
    __int16 v7 = 259;
  }

  return llvm::MCContext::getXCOFFSection(v4, v6, v5, 19, v7, 0, 0, 0);
}

llvm::TargetLoweringObjectFileGOFF *llvm::TargetLoweringObjectFileGOFF::TargetLoweringObjectFileGOFF(llvm::TargetLoweringObjectFileGOFF *this)
{
  *((unsigned char *)this + 912) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((unsigned char *)this + 864) = 0;
  *((void *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((void *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((unsigned char *)this + 944) = 0;
  *(_WORD *)((char *)this + 945) = 257;
  *(_OWORD *)((char *)this + 947) = 0u;
  *((unsigned char *)this + 963) = 0;
  *((void *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(void *)this = &unk_1F2614668;
  return this;
}

{
  *((unsigned char *)this + 912) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((unsigned char *)this + 864) = 0;
  *((void *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((void *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((unsigned char *)this + 944) = 0;
  *(_WORD *)((char *)this + 945) = 257;
  *(_OWORD *)((char *)this + 947) = 0u;
  *((unsigned char *)this + 963) = 0;
  *((void *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(void *)this = &unk_1F2614668;
  return this;
}

uint64_t llvm::TargetLoweringObjectFileGOFF::getExplicitSectionGlobal(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 248))(a1, a2, a3);
}

void llvm::TargetLoweringObjectFileGOFF::SelectSectionForGlobal(uint64_t a1, const llvm::GlobalValue *a2, unsigned __int8 a3, llvm::TargetMachine *a4)
{
  int v5 = a3;
  uint64_t Symbol = (unsigned char *)llvm::TargetMachine::getSymbol(a4, a2);
  uint64_t v7 = *(void *)(a1 + 840);
  if ((v5 - 15) <= 2)
  {
    if ((*Symbol & 4) != 0)
    {
      uint64_t v10 = (void *)*((void *)Symbol - 1);
      std::string::size_type v11 = *v10;
      uint64_t v8 = (std::string::value_type *)(v10 + 2);
      std::string::size_type v9 = v11;
    }
    else
    {
      uint64_t v8 = 0;
      std::string::size_type v9 = 0;
    }
    llvm::MCContext::getGOFFSection(v7, v8, v9, 15);
  }
}

void sub_1CC4AC4A0(llvm::TargetLoweringObjectFile *this)
{
  *(void *)this = &unk_1F2614448;
  uint64_t v2 = (void *)*((void *)this + 126);
  if (v2 != *((void **)this + 125)) {
    free(v2);
  }

  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(this);
}

void sub_1CC4AC504(llvm::TargetLoweringObjectFile *this)
{
  *(void *)this = &unk_1F2614448;
  uint64_t v2 = (void *)*((void *)this + 126);
  if (v2 != *((void **)this + 125)) {
    free(v2);
  }
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC4AC57C()
{
  return 0;
}

uint64_t sub_1CC4AC588()
{
  return 0;
}

void sub_1CC4AC594(llvm::TargetLoweringObjectFile *a1)
{
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4AC5D0(llvm::TargetLoweringObjectFile *a1)
{
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4AC60C(llvm::TargetLoweringObjectFile *a1)
{
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4AC648(llvm::TargetLoweringObjectFile *a1)
{
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC4AC680(uint64_t a1, llvm::TargetMachine *a2)
{
  if ((*(unsigned char *)(a1 + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v3 = ***(void ***)a1;
  uint64_t v24 = a1;
  int v4 = *(_DWORD *)(v3 + 2496);
  if (!v4)
  {
    std::string::size_type v22 = 0;
LABEL_29:
    uint64_t v8 = sub_1CC609054(v3 + 2480, (uint64_t)&v24, &v24, v22);
    uint64_t v23 = v24;
    v8[3] = 0;
    uint64_t v8[4] = 0;
    void *v8 = v23;
    v8[1] = v8 + 3;
    v8[2] = 0x100000000;
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v3 + 2480);
  int v6 = v4 - 1;
  unsigned int v7 = (v4 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v8 = (void *)(v5 + 40 * v7);
  uint64_t v9 = *v8;
  if (*v8 != a1)
  {
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == -8192;
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      uint64_t v8 = (void *)(v5 + 40 * (v13 & v6));
      uint64_t v9 = *v8;
      if (*v8 == a1) {
        goto LABEL_12;
      }
    }
    if (v10) {
      std::string::size_type v22 = v10;
    }
    else {
      std::string::size_type v22 = v8;
    }
    goto LABEL_29;
  }
LABEL_12:
  uint64_t v14 = *((unsigned int *)v8 + 4);
  if (!v14) {
    return 0;
  }
  std::string::size_type v15 = (void *)(v8[1] + 8);
  uint64_t v16 = 16 * v14;
  while (*((_DWORD *)v15 - 2) != 22)
  {
    uint64_t result = 0;
    v15 += 2;
    v16 -= 16;
    if (!v16) {
      return result;
    }
  }
  uint64_t v18 = *v15;
  if (!v18) {
    return 0;
  }
  BOOL v19 = *(unsigned __int8 **)(v18 - 8 * *(unsigned int *)(v18 + 8));
  if (!v19) {
    return 0;
  }
  if (*v19 - 3 <= 0xFFFFFFFD) {
    llvm::report_fatal_error((llvm *)"MD_associated operand is not ValueAsMetadata", (const llvm::Twine *)1);
  }
  unsigned int v20 = (unsigned __int8 *)*((void *)v19 + 16);
  if (!v20 || v20[16] > 3u) {
    return 0;
  }
  uint64_t result = llvm::TargetMachine::getSymbol(a2, (const llvm::GlobalValue *)v20);
  if ((*(_DWORD *)(result + 8) & 0x1C0) != 0x80) {
    return 0;
  }
  return result;
}

uint64_t sub_1CC4AC814(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  if (a2 < 5) {
    goto LABEL_20;
  }
  if (*(_DWORD *)a1 == 1953459758 && *(unsigned char *)(a1 + 4) == 101) {
    return 7;
  }
  if (a2 < 0xB) {
    goto LABEL_20;
  }
  BOOL v4 = *(void *)a1 == 0x72615F74696E692ELL && *(void *)(a1 + 3) == 0x79617272615F7469;
  if (v4 && (a2 < 0xC || *(unsigned char *)(a1 + 11) == 46)) {
    return 14;
  }
  BOOL v5 = *(void *)a1 == 0x72615F696E69662ELL && *(void *)(a1 + 3) == 0x79617272615F696ELL;
  if (v5 && (a2 < 0xC || *(unsigned char *)(a1 + 11) == 46)) {
    return 15;
  }
  if (a2 >= 0xE)
  {
    BOOL v6 = *(void *)a1 == 0x74696E696572702ELL && *(void *)(a1 + 6) == 0x79617272615F7469;
    if (v6 && (a2 < 0xF || *(unsigned char *)(a1 + 14) == 46)) {
      return 16;
    }
  }
LABEL_20:
  if ((a3 & 0xFD) == 0xC) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = 1;
  }
  if (a3 - 15 >= 3) {
    return v7;
  }
  else {
    return 8;
  }
}

void sub_1CC4AC950(uint64_t a1, uint64_t a2, unsigned __int8 a3, llvm::Mangler *a4, unsigned int a5, int a6)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_1CFAC3020;
  if (a3 - 5 <= 2)
  {
    char PreferredAlign = llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*(void *)(a2 + 40) + 272), (const llvm::GlobalVariable *)a2);
    if (a5)
    {
      BOOL v12 = (char *)&v43 + 5;
      unint64_t v13 = a5;
      do
      {
        *--BOOL v12 = (v13 % 0xA) | 0x30;
        BOOL v14 = v13 > 9;
        v13 /= 0xAuLL;
      }
      while (v14);
    }
    else
    {
      BOOL v12 = (char *)&v43 + 4;
      BYTE4(v43) = 48;
    }
    sub_1CC028D80(&v40, v12, (char *)&v43 + 5, (char *)&v43 + 5 - v12);
    unsigned int v20 = std::string::insert(&v40, 0, ".rodata.str");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v22 = std::string::append(&v41, ".");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    uint64_t v43 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    uint64_t v24 = 0;
    unint64_t v25 = 1 << PreferredAlign;
    do
    {
      v41.__r_.__value_.__s.__data_[v24-- + 20] = (v25 % 0xA) | 0x30;
      BOOL v14 = v25 > 9;
      v25 /= 0xAuLL;
    }
    while (v14);
    sub_1CC028D80(&v40, &v41.__r_.__value_.__s.__data_[v24 + 21], &v41.__r_.__value_.__s.__data_[21], -v24);
    if (v43 >= 0) {
      unint64_t v26 = __p;
    }
    else {
      unint64_t v26 = (void **)__p[0];
    }
    if (v43 >= 0) {
      std::string::size_type v27 = HIBYTE(v43) & 0x7F;
    }
    else {
      std::string::size_type v27 = (std::string::size_type)__p[1];
    }
    uint64_t v28 = std::string::insert(&v40, 0, (const std::string::value_type *)v26, v27);
    std::string v41 = *v28;
    v28->__r_.__value_.__r.__words[0] = 0;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    int v29 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
    unsigned int v30 = (void *)v41.__r_.__value_.__r.__words[0];
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v31 = &v41;
    }
    else {
      int v31 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = *((unsigned char *)&v41.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t size = v41.__r_.__value_.__l.__size_;
    }
    *(void *)(a1 + 8) = 0;
    if (*(void *)(a1 + 16) < size) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v33 = 0;
    if (size)
    {
      memcpy(*(void **)a1, v31, size);
      uint64_t v33 = *(void *)(a1 + 8);
    }
    *(void *)(a1 + 8) = v33 + size;
    if (v29 < 0) {
      operator delete(v30);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    goto LABEL_55;
  }
  int v15 = a3 & 0xFC;
  if (v15 != 8)
  {
    if ((a3 & 0xFE) == 2)
    {
      uint64_t v18 = ".text";
LABEL_13:
      size_t v19 = 5;
      goto LABEL_70;
    }
    uint64_t v18 = ".rodata";
    size_t v19 = 7;
    if (v15 != 4 && v15 != 8)
    {
      if (a3 - 15 >= 3)
      {
        if (a3 == 13)
        {
          uint64_t v18 = ".tdata";
          size_t v19 = 6;
        }
        else
        {
          if ((a3 & 0xFD) == 0xC)
          {
            uint64_t v18 = ".tbss";
            goto LABEL_13;
          }
          if (a3 == 19) {
            uint64_t v18 = ".data";
          }
          else {
            uint64_t v18 = ".data.rel.ro";
          }
          if (a3 == 19) {
            size_t v19 = 5;
          }
          else {
            size_t v19 = 12;
          }
        }
      }
      else
      {
        uint64_t v18 = ".bss";
        size_t v19 = 4;
      }
    }
LABEL_70:
    memcpy((void *)(a1 + 24), v18, v19);
    *(void *)(a1 + 8) = v19;
    if (!a2) {
      goto LABEL_75;
    }
    goto LABEL_71;
  }
  *(_DWORD *)(a1 + 31) = 1953719086;
  *(void *)(a1 + 24) = *(void *)".rodata.cst";
  *(void *)(a1 + 8) = 11;
  if (a5)
  {
    uint64_t v16 = &v41.__r_.__value_.__s.__data_[21];
    unint64_t v17 = a5;
    do
    {
      *--uint64_t v16 = (v17 % 0xA) | 0x30;
      BOOL v14 = v17 > 9;
      v17 /= 0xAuLL;
    }
    while (v14);
  }
  else
  {
    uint64_t v16 = &v41.__r_.__value_.__s.__data_[20];
    v41.__r_.__value_.__s.__data_[20] = 48;
  }
  sub_1CC028D80(__p, v16, &v41.__r_.__value_.__s.__data_[21], (char *)&v41.__r_.__value_.__r.__words[2] + 5 - v16);
  if (v43 >= 0) {
    size_t v34 = __p;
  }
  else {
    size_t v34 = (void **)__p[0];
  }
  if (v43 >= 0) {
    size_t v35 = HIBYTE(v43) & 0x7F;
  }
  else {
    size_t v35 = (size_t)__p[1];
  }
  uint64_t v36 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) < v36 + v35) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v35)
  {
    memcpy((void *)(*(void *)a1 + v36), v34, v35);
    uint64_t v36 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v36 + v35;
LABEL_55:
  if (SHIBYTE(v43) < 0)
  {
    operator delete(__p[0]);
    if (!a2)
    {
LABEL_75:
      if (!a6) {
        return;
      }
      goto LABEL_83;
    }
  }
  else if (!a2)
  {
    goto LABEL_75;
  }
LABEL_71:
  if (*(unsigned char *)(a2 + 16)) {
    goto LABEL_75;
  }
  llvm::Function::getSectionPrefix((uint64_t ***)a2, (uint64_t)&v41);
  if (!v41.__r_.__value_.__s.__data_[16])
  {
    if ((a6 & 1) == 0) {
      return;
    }
    goto LABEL_83;
  }
  LODWORD(__p[1]) = 0;
  char v46 = 0;
  uint64_t v47 = 0;
  uint64_t v49 = a1;
  int v48 = 0;
  __p[0] = &unk_1F2646FA8;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  std::string v45 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)__p, 46);
  std::string::size_type v37 = v41.__r_.__value_.__l.__size_;
  if (v41.__r_.__value_.__l.__size_ <= v44 - (uint64_t)v45)
  {
    if (v41.__r_.__value_.__l.__size_)
    {
      memcpy(v45, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      v45 += v37;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__p, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  __p[0] = &unk_1F2646B98;
  if (v48 == 1 && v43) {
    MEMORY[0x1D25D9CB0](v43, 0x1000C8077774924);
  }
  if (a6)
  {
LABEL_83:
    uint64_t v38 = *(void *)(a1 + 8);
    if ((unint64_t)(v38 + 1) > *(void *)(a1 + 16)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*(void *)a1 + v38) = 46;
    ++*(void *)(a1 + 8);
    LODWORD(__p[1]) = 0;
    char v46 = 0;
    uint64_t v47 = 0;
    uint64_t v49 = a1;
    int v48 = 0;
    __p[0] = &unk_1F2646FA8;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::string v45 = 0;
    llvm::Mangler::getNameWithPrefix(a4, (char **)__p, (const llvm::GlobalValue *)a2, 0);
    __p[0] = &unk_1F2646B98;
    if (v48 == 1)
    {
      if (v43) {
        MEMORY[0x1D25D9CB0](v43, 0x1000C8077774924);
      }
    }
    return;
  }
  uint64_t v39 = *(void *)(a1 + 8);
  if ((unint64_t)(v39 + 1) > *(void *)(a1 + 16)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(*(void *)a1 + v39) = 46;
  ++*(void *)(a1 + 8);
}

void sub_1CC4AD004()
{
}

uint64_t sub_1CC4AD018(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 128))(a2, *(void *)(a1 + 16));
}

std::string *sub_1CC4AD048(uint64_t a1, unsigned int *a2)
{
  v19[5] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a2[2];
  __src = v19;
  *(_OWORD *)__len = xmmword_1CDB15B30;
  llvm::APInt::toString(a2, &__src, 0x10u, 0, 0);
  size_t v4 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  BOOL v5 = __src;
  if (__len[0] >= 0x17)
  {
    size_t v7 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17) {
      size_t v7 = __len[0] | 7;
    }
    size_t v8 = v7 + 1;
    BOOL v6 = operator new(v7 + 1);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v8 | 0x8000000000000000;
    *(void *)a1 = v6;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = __len[0];
  BOOL v6 = (void *)a1;
  if (v4) {
LABEL_8:
  }
    memmove(v6, v5, v4);
  *((unsigned char *)v6 + v4) = 0;
  if (__src != v19) {
    free(__src);
  }
  char v9 = *(unsigned char *)(a1 + 23);
  int v10 = v9;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v9 >= 0) {
    BOOL v12 = (unsigned char *)a1;
  }
  else {
    BOOL v12 = *(unsigned char **)a1;
  }
  uint64_t v13 = v9 & 0x7F;
  if (v10 >= 0) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = *(void *)(a1 + 8);
  }
  if (v14)
  {
    do
    {
      *BOOL v12 = __tolower((char)*v12);
      ++v12;
      --v14;
    }
    while (v14);
    LOBYTE(v10) = *(unsigned char *)(a1 + 23);
    uint64_t v11 = *(void *)(a1 + 8);
    LODWORD(v13) = v10 & 0x7F;
  }
  if ((v10 & 0x80u) == 0) {
    int v15 = v13;
  }
  else {
    int v15 = v11;
  }
  return std::string::insert((std::string *)a1, 0, ((v3 >> 2) & 0x3FFFFFFE) - v15, 48);
}

uint64_t sub_1CC4AD1DC(uint64_t a1)
{
  uint64_t v2 = 0;
  v8[8] = *MEMORY[0x1E4F143B8];
  v8[1] = 0;
  v8[3] = 0;
  v8[5] = 0;
  v8[0] = sub_1CC4AD2D8;
  v8[2] = sub_1CC4AD2FC;
  uint64_t v8[4] = sub_1CC4AD320;
  v8[6] = sub_1CC4AD344;
  v8[7] = 0;
  do
  {
    unsigned int v3 = (uint64_t (*)(void *))v8[v2];
    uint64_t v4 = v8[v2 + 1];
    BOOL v5 = (void *)(a1 + (v4 >> 1));
    if (v4) {
      unsigned int v3 = *(uint64_t (**)(void *))(*v5 + v3);
    }
    uint64_t result = v3(v5);
    if (result) {
      break;
    }
    BOOL v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

BOOL sub_1CC4AD2D8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[4];
  if (*a1 != v2) {
    *a1 = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL sub_1CC4AD2FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v1 != v2) {
    *(void *)(a1 + 8) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL sub_1CC4AD320(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 48);
  if (v1 != v2) {
    *(void *)(a1 + 16) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL sub_1CC4AD344(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 56);
  if (v1 != v2) {
    *(void *)(a1 + 24) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

uint64_t sub_1CC4AD368(uint64_t a1)
{
  uint64_t v2 = 0;
  v8[8] = *MEMORY[0x1E4F143B8];
  v8[1] = 0;
  v8[3] = 0;
  v8[5] = 0;
  v8[0] = sub_1CC4AD464;
  v8[2] = sub_1CC4AD480;
  uint64_t v8[4] = sub_1CD586EE0;
  v8[6] = sub_1CD586EFC;
  v8[7] = 0;
  do
  {
    unsigned int v3 = (uint64_t (*)(void *))v8[v2];
    uint64_t v4 = v8[v2 + 1];
    BOOL v5 = (void *)(a1 + (v4 >> 1));
    if (v4) {
      unsigned int v3 = *(uint64_t (**)(void *))(*v5 + v3);
    }
    uint64_t result = v3(v5);
    if (result) {
      break;
    }
    BOOL v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

uint64_t sub_1CC4AD464(void *a1)
{
  if (*a1 == a1[4] || *a1 == 0) {
    return 0;
  }
  else {
    return *a1 - 56;
  }
}

uint64_t sub_1CC4AD480(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == *(void *)(a1 + 40) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

BOOL llvm::TargetOptions::DisableFramePointerElim(llvm::TargetOptions *this, const llvm::MachineFunction *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 112))(*((void *)a2 + 2));
  if ((*(uint64_t (**)(uint64_t, const llvm::MachineFunction *))(*(void *)v3 + 192))(v3, a2)) {
    return 1;
  }
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(*(void *)a2 + 112);
  if (!v5) {
    return 0;
  }
  if (!*(_DWORD *)(v5 + 8)) {
    return 0;
  }
  uint64_t v6 = *(void *)(v5 + 40);
  if (!v6) {
    return 0;
  }
  int v7 = *(_DWORD *)(v6 + 40);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  char v9 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v40 = v8;
    std::string v41 = v4;
    int v43 = v7;
    int v36 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v7 = v43;
    uint64_t v8 = v40;
    uint64_t v4 = v41;
    char v9 = &unk_1EBCBE000;
    if (v36)
    {
      unint64_t v37 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v37 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v37;
      __cxa_guard_release(&qword_1EBCBE588);
      int v7 = v43;
      uint64_t v8 = v40;
      uint64_t v4 = v41;
      char v9 = (void *)&unk_1EBCBE000;
    }
  }
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9[176] ^ 0xEEA3BE4ECE12391DLL)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v9[176] ^ 0xEEA3BE4ECE12391DLL)) >> 47) ^ 0x81D3932BA3734B7BLL);
  unsigned int v11 = (-348639895 * ((v10 >> 47) ^ v10)) ^ 0x696F702D;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v11 & (v7 - 1);
    uint64_t v14 = v8 + 24 * v13;
    int v15 = *(void **)v14;
    if (*(void *)v14 == -1)
    {
      if ("frame-pointer" == (char *)-1) {
        goto LABEL_19;
      }
      goto LABEL_10;
    }
    if (v15 != (void *)-2) {
      break;
    }
    if ("frame-pointer" == (char *)-2) {
      goto LABEL_19;
    }
LABEL_10:
    if (v15 == (void *)-1) {
      return 0;
    }
    unsigned int v11 = i + v13;
  }
  if (*(void *)(v14 + 8) != 13) {
    goto LABEL_10;
  }
  if (*v15 != 0x6F702D656D617266 || *(void *)((char *)v15 + 5) != 0x7265746E696F702DLL) {
    goto LABEL_10;
  }
LABEL_19:
  uint64_t v18 = v4[14];
  if (!v18) {
    return 0;
  }
  if (!*(_DWORD *)(v18 + 8)) {
    return 0;
  }
  uint64_t v19 = *(void *)(v18 + 40);
  if (!v19) {
    return 0;
  }
  int v20 = *(_DWORD *)(v19 + 40);
  if (!v20) {
    return 0;
  }
  uint64_t v21 = *(void *)(v19 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v42 = v21;
    int v44 = v20;
    int v38 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v20 = v44;
    uint64_t v21 = v42;
    char v9 = &unk_1EBCBE000;
    if (v38)
    {
      unint64_t v39 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v39 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v39;
      __cxa_guard_release(&qword_1EBCBE588);
      int v20 = v44;
      uint64_t v21 = v42;
      char v9 = (void *)&unk_1EBCBE000;
    }
  }
  unint64_t v22 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9[176] ^ 0xEEA3BE4ECE12391DLL)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v9[176] ^ 0xEEA3BE4ECE12391DLL)) >> 47) ^ 0x81D3932BA3734B7BLL);
  unsigned int v23 = (-348639895 * ((v22 >> 47) ^ v22)) ^ 0x696F702D;
  int v24 = v20 - 1;
  int v25 = 1;
  while (2)
  {
    unsigned int v26 = v23 & v24;
    uint64_t v27 = v21 + 24 * v26;
    uint64_t v28 = *(void **)v27;
    if (*(void *)v27 == -1)
    {
      if ("frame-pointer" == (char *)-1) {
        break;
      }
      goto LABEL_27;
    }
    if (v28 == (void *)-2)
    {
      if ("frame-pointer" == (char *)-2) {
        break;
      }
      goto LABEL_27;
    }
    if (*(void *)(v27 + 8) != 13
      || (*v28 == 0x6F702D656D617266 ? (BOOL v29 = *(void *)((char *)v28 + 5) == 0x7265746E696F702DLL) : (BOOL v29 = 0), !v29))
    {
LABEL_27:
      if (v28 == (void *)-1) {
        return 0;
      }
      unsigned int v23 = v25 + v26;
      ++v25;
      continue;
    }
    break;
  }
  uint64_t v30 = *(void *)(v27 + 16);
  if (!v30) {
    return 0;
  }
  int v31 = *(_DWORD *)(v30 + 16);
  uint64_t v32 = v30 + *(unsigned int *)(v30 + 12) + 24;
  if (v31 == 3)
  {
    int v33 = *(unsigned __int16 *)(v32 + 1);
    int v34 = *(unsigned __int8 *)(v32 + 3);
    return v33 == 27745 && v34 == 108;
  }
  else
  {
    if (v31 != 8 || *(void *)(v32 + 1) != 0x6661656C2D6E6F6ELL) {
      return 0;
    }
    return *(unsigned char *)(*((void *)a2 + 7) + 62) != 0;
  }
}

uint64_t llvm::TargetOptions::LessPreciseFPMAD(llvm::TargetOptions *this)
{
  if (*((_WORD *)this + 6)) {
    return 1;
  }
  else {
    return *(unsigned char *)this & 1;
  }
}

BOOL llvm::TargetOptions::HonorSignDependentRoundingFPMath(llvm::TargetOptions *this)
{
  return (*((_WORD *)this + 6) & 0x81) == 128;
}

uint64_t llvm::TargetOptions::ShouldEmitDebugEntryValues(llvm::TargetOptions *this)
{
  unsigned int v1 = *((unsigned __int16 *)this + 28);
  if ((v1 & 2) == 0 || *((_DWORD *)this + 27) == 3) {
    return (v1 >> 2) & 1;
  }
  else {
    return 1;
  }
}

void llvm::initializeTargetPassConfigPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD4858, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC4AD9F0;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD4858, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC4AD9F0()
{
}

unint64_t sub_1CC4ADA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3;
  v19[0] = a2;
  v19[1] = a3;
  LOBYTE(v17[0]) = 44;
  unint64_t result = llvm::StringRef::find(v19, (char *)v17, 1uLL, 0);
  if (result == -1)
  {
    int v16 = 0;
  }
  else
  {
    if (v3 >= result) {
      unint64_t v7 = result;
    }
    else {
      unint64_t v7 = v3;
    }
    if (v3 <= result + 1)
    {
      int v16 = 0;
    }
    else
    {
      unint64_t v8 = 0;
      char v9 = (unsigned __int8 *)(a2 + result + 1);
      uint64_t v10 = result - v3 + 1;
      do
      {
        int v11 = *v9;
        if ((v11 - 48) >= 0xA)
        {
          if ((v11 - 97) >= 0x1A)
          {
            if ((v11 - 65) > 0x19) {
              goto LABEL_25;
            }
            int v12 = -55;
          }
          else
          {
            int v12 = -87;
          }
        }
        else
        {
          int v12 = -48;
        }
        unsigned int v13 = v12 + v11;
        if (v13 > 9) {
          goto LABEL_25;
        }
        unint64_t v14 = 10 * v8 + v13;
        if (v8 > v14 / 0xA) {
          goto LABEL_25;
        }
        ++v9;
        unint64_t v8 = v14;
      }
      while (!__CFADD__(v10++, 1));
      int v16 = 0;
      if (v14 < 0x100000000) {
        int v16 = v14;
      }
      if (HIDWORD(v14))
      {
LABEL_25:
        __int16 v18 = 1283;
        v17[0] = "invalid pass instance specifier ";
        v17[2] = a2;
        v17[3] = v3;
        llvm::report_fatal_error((llvm *)v17, (const llvm::Twine *)1);
      }
    }
    unint64_t v3 = v7;
  }
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v16;
  return result;
}

const char *sub_1CC4ADBE4(uint64_t a1, size_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 == 11 && *(void *)a1 == 0x6E6972702D6D7361 && *(void *)(a1 + 3) == 0x7265746E6972702DLL) {
    return "asm-printer";
  }
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  uint64_t PassInfo = llvm::PassRegistry::getPassInfo(PassRegistry, (unsigned __int8 *)a1, a2);
  if (!PassInfo)
  {
    __int16 v13 = 263;
    LOBYTE(v12[0]) = 34;
    __int16 v11 = 261;
    v10[0] = a1;
    v10[1] = a2;
    sub_1CD3E3950(v12, v10, (uint64_t)v14);
    unint64_t v8 = "\" pass is not registered.";
    __int16 v9 = 259;
    sub_1CD3E3950(v14, (uint64_t *)&v8, (uint64_t)v15);
    llvm::report_fatal_error((llvm *)v15, (const llvm::Twine *)1);
  }
  return *(const char **)(PassInfo + 32);
}

void llvm::getCGPassBuilderOption(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 36) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 15) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 25) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = 0;
  if (word_1EBCD5F20)
  {
    *(unsigned char *)(a1 + 42) = dword_1EBCD5F98 != 0;
    *(unsigned char *)(a1 + 43) = 1;
  }
  if (word_1EBCD6E68)
  {
    *(_DWORD *)(a1 + 32) = dword_1EBCD6EE0;
    *(unsigned char *)(a1 + 36) = 1;
  }
  if (word_1EBCD5FE0)
  {
    *(unsigned char *)(a1 + 44) = dword_1EBCD6058 != 0;
    *(unsigned char *)(a1 + 45) = 1;
  }
  if (word_1EBCD48A0)
  {
    *(unsigned char *)(a1 + 2) = byte_1EBCD4918;
    *(unsigned char *)(a1 + 3) = 1;
  }
  if (word_1EBCD51A0)
  {
    *(unsigned char *)a1 = dword_1EBCD5218 != 0;
    *(unsigned char *)(a1 + 1) = 1;
  }
  if (word_1EBCD5C20)
  {
    *(unsigned char *)(a1 + 40) = dword_1EBCD5C98 != 0;
    *(unsigned char *)(a1 + 41) = 1;
  }
  *(unsigned char *)(a1 + 9) = byte_1EBCD64D8;
  *(unsigned char *)(a1 + 7) = byte_1EBCD4D98;
  *(unsigned char *)(a1 + 6) = byte_1EBCD58D8;
  *(_DWORD *)(a1 + 20) = dword_1EBCD6C88;
  *(unsigned char *)(a1 + 8) = byte_1EBCD6418;
  *(_DWORD *)(a1 + 28) = dword_1EBCD7138;
  *(unsigned char *)(a1 + 13) = byte_1EBCD5998;
  *(unsigned char *)(a1 + 10) = byte_1EBCD5518;
  *(unsigned char *)(a1 + 15) = byte_1EBCD55D8;
  *(unsigned char *)(a1 + 11) = byte_1EBCD5698;
  *(unsigned char *)(a1 + 14) = byte_1EBCD5818;
  *(unsigned char *)(a1 + 12) = byte_1EBCD5A58;
  *(unsigned char *)(a1 + 16) = byte_1EBCD5B18;
  *(unsigned char *)(a1 + 17) = byte_1EBCD5BD8;
}

void llvm::registerCodeGenCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v4 >= v5)
  {
    if (v5 == -1) {
      goto LABEL_84;
    }
    if (((2 * v5) | 1uLL) >= 0xFFFFFFFF) {
      uint64_t v36 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v36 = (2 * v5) | 1;
    }
    unint64_t v37 = malloc_type_malloc(32 * v36, 0x4065EBACuLL);
    if (!v37) {
      goto LABEL_85;
    }
    int v38 = v37;
    uint64_t v39 = *(unsigned int *)(a1 + 8);
    v37[4 * v39 + 3] = (char *)off_1EC7DFA20 + 2;
    uint64_t v40 = *(void **)a1;
    if (v39)
    {
      uint64_t v41 = 32 * v39;
      uint64_t v42 = v37;
      do
      {
        v42[3] = 0;
        uint64_t v43 = v40[3];
        v42[3] = v43;
        if (v40[3] >= 8uLL)
        {
          if ((v43 & 2) != 0 && (v43 & 4) != 0)
          {
            (*(void (**)(void *, void *))((v43 & 0xFFFFFFFFFFFFFFF8) + 8))(v42, v40);
          }
          else
          {
            long long v44 = *(_OWORD *)v40;
            v42[2] = v40[2];
            *(_OWORD *)uint64_t v42 = v44;
          }
          v40[3] = 0;
        }
        v40 += 4;
        v42 += 4;
        v41 -= 32;
      }
      while (v41);
      uint64_t v40 = *(void **)a1;
      uint64_t v45 = *(unsigned int *)(a1 + 8);
      if (v45)
      {
        uint64_t v46 = 32 * v45;
        uint64_t v47 = (char *)(v40 - 4);
        do
        {
          sub_1CD58927C((llvm *)&v47[v46]);
          v46 -= 32;
        }
        while (v46);
        uint64_t v40 = *(void **)a1;
      }
    }
    if (v40 != (void *)(a1 + 16)) {
      free(v40);
    }
    *(void *)a1 = v38;
    *(_DWORD *)(a1 + 12) = v36;
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(void *)(*(void *)a1 + 32 * v4 + 24) = (char *)off_1EC7DFA20 + 2;
  }
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (byte_1EBCD69E7 >= 0) {
    uint64_t v6 = byte_1EBCD69E7 & 0x7F;
  }
  else {
    uint64_t v6 = qword_1EBCD69D8;
  }
  if (byte_1EBCD69E7 >= 0) {
    unint64_t v7 = &qword_1EBCD69D0;
  }
  else {
    unint64_t v7 = (uint64_t *)qword_1EBCD69D0;
  }
  sub_1CC4ADA8C((uint64_t)&v82, (uint64_t)v7, v6);
  uint64_t v8 = v82;
  uint64_t v9 = v83;
  int v71 = v84;
  if (byte_1EBCD68FF >= 0) {
    uint64_t v10 = byte_1EBCD68FF & 0x7F;
  }
  else {
    uint64_t v10 = qword_1EBCD68F0;
  }
  if (byte_1EBCD68FF >= 0) {
    __int16 v11 = &qword_1EBCD68E8;
  }
  else {
    __int16 v11 = (uint64_t *)qword_1EBCD68E8;
  }
  sub_1CC4ADA8C((uint64_t)&v82, (uint64_t)v11, v10);
  uint64_t v12 = v82;
  uint64_t v13 = v83;
  int v70 = v84;
  if (byte_1EBCD6BB7 >= 0) {
    uint64_t v14 = byte_1EBCD6BB7 & 0x7F;
  }
  else {
    uint64_t v14 = qword_1EBCD6BA8;
  }
  if (byte_1EBCD6BB7 >= 0) {
    int v15 = &qword_1EBCD6BA0;
  }
  else {
    int v15 = (uint64_t *)qword_1EBCD6BA0;
  }
  sub_1CC4ADA8C((uint64_t)&v82, (uint64_t)v15, v14);
  uint64_t v16 = v82;
  uint64_t v17 = v83;
  int v69 = v84;
  if (byte_1EBCD6ACF >= 0) {
    uint64_t v18 = byte_1EBCD6ACF & 0x7F;
  }
  else {
    uint64_t v18 = qword_1EBCD6AC0;
  }
  if (byte_1EBCD6ACF >= 0) {
    uint64_t v19 = &qword_1EBCD6AB8;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_1EBCD6AB8;
  }
  sub_1CC4ADA8C((uint64_t)&v82, (uint64_t)v19, v18);
  uint64_t v20 = v82;
  uint64_t v21 = v83;
  if (v9 || v13 || v17 || v83)
  {
    int v68 = v84;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 168))(&v82, a2, v8, v9);
    uint64_t v23 = v82;
    uint64_t v22 = v83;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 168))(&v82, a2, v12, v13);
    uint64_t v24 = v82;
    uint64_t v25 = v83;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 168))(&v82, a2, v16, v17);
    uint64_t v26 = v83;
    uint64_t v67 = v82;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 168))(&v82, a2, v20, v21);
    uint64_t v27 = v82;
    uint64_t v28 = v83;
    if (v22 && v25)
    {
      v78[0] = (uint64_t)"start-before";
      __int16 v79 = 259;
      v76[0] = (uint64_t)" and ";
      __int16 v77 = 259;
      sub_1CD3E3950(v78, v76, (uint64_t)v80);
      uint64_t v64 = "start-after";
    }
    else
    {
      uint64_t v29 = v24;
      if (!v26 || !v83)
      {
        BOOL v30 = (v22 | v25) == 0;
        uint64_t v32 = *(unsigned int *)(a1 + 8);
        uint64_t v31 = *(unsigned int *)(a1 + 12);
        if (v32 < v31)
        {
          uint64_t v33 = v23;
          uint64_t v34 = *(void *)a1 + 32 * v32;
          *(void *)(v34 + 24) = 0;
          size_t v35 = (char *)operator new(0x68uLL, (std::align_val_t)8uLL);
          *(void *)uint64_t v34 = v35;
          *(_OWORD *)(v34 + 8) = xmmword_1CFAC7AB0;
          *size_t v35 = v30;
          *(_WORD *)(v35 + 1) = 0;
          *(void *)(v35 + 4) = 0;
          *(void *)(v35 + 12) = 0;
          *((void *)v35 + 3) = v33;
          *((void *)v35 + 4) = v22;
          *((void *)v35 + 5) = v29;
          *((void *)v35 + 6) = v25;
          *((void *)v35 + 7) = v67;
          *((void *)v35 + 8) = v26;
          *((void *)v35 + 9) = v27;
          *((void *)v35 + 10) = v28;
          *((_DWORD *)v35 + 22) = v70;
          *((_DWORD *)v35 + 23) = v68;
          *((_DWORD *)v35 + 24) = v71;
          *((_DWORD *)v35 + 25) = v69;
          *(void *)(v34 + 24) = off_1EC7DFA18;
LABEL_37:
          ++*(_DWORD *)(a1 + 8);
          return;
        }
        uint64_t v65 = v23;
        if (v31 != -1)
        {
          unint64_t v48 = (2 * v31) | 1;
          if (v48 >= 0xFFFFFFFF) {
            unint64_t v48 = 0xFFFFFFFFLL;
          }
          int v66 = v48;
          uint64_t v49 = (char *)malloc_type_malloc(32 * v48, 0x4065EBACuLL);
          if (v49)
          {
            uint64_t v50 = v49;
            int v51 = &v49[32 * *(unsigned int *)(a1 + 8)];
            *((void *)v51 + 3) = 0;
            uint64_t v52 = (char *)operator new(0x68uLL, (std::align_val_t)8uLL);
            *(void *)int v51 = v52;
            *(_OWORD *)(v51 + 8) = xmmword_1CFAC7AB0;
            char *v52 = v30;
            *(_WORD *)(v52 + 1) = 0;
            *(void *)(v52 + 4) = 0;
            *(void *)(v52 + 12) = 0;
            *((void *)v52 + 3) = v65;
            *((void *)v52 + 4) = v22;
            *((void *)v52 + 5) = v29;
            *((void *)v52 + 6) = v25;
            *((void *)v52 + 7) = v67;
            *((void *)v52 + 8) = v26;
            *((void *)v52 + 9) = v27;
            *((void *)v52 + 10) = v28;
            *((_DWORD *)v52 + 22) = v70;
            *((_DWORD *)v52 + 23) = v68;
            *((_DWORD *)v52 + 24) = v71;
            *((_DWORD *)v52 + 25) = v69;
            *((void *)v51 + 3) = off_1EC7DFA18;
            uint64_t v53 = *(void **)a1;
            uint64_t v54 = *(unsigned int *)(a1 + 8);
            if (v54)
            {
              char v55 = v50;
              int v56 = v66;
              uint64_t v57 = 32 * v54;
              char v58 = v55;
              do
              {
                *((void *)v58 + 3) = 0;
                uint64_t v59 = v53[3];
                *((void *)v58 + 3) = v59;
                if (v53[3] >= 8uLL)
                {
                  if ((v59 & 2) != 0 && (v59 & 4) != 0)
                  {
                    (*(void (**)(char *, void *))((v59 & 0xFFFFFFFFFFFFFFF8) + 8))(v58, v53);
                  }
                  else
                  {
                    long long v60 = *(_OWORD *)v53;
                    *((void *)v58 + 2) = v53[2];
                    *(_OWORD *)char v58 = v60;
                  }
                  v53[3] = 0;
                }
                v53 += 4;
                v58 += 32;
                v57 -= 32;
              }
              while (v57);
              uint64_t v53 = *(void **)a1;
              uint64_t v61 = *(unsigned int *)(a1 + 8);
              if (v61)
              {
                uint64_t v62 = 32 * v61;
                v63 = (char *)(v53 - 4);
                do
                {
                  sub_1CD58927C((llvm *)&v63[v62]);
                  v62 -= 32;
                }
                while (v62);
                uint64_t v53 = *(void **)a1;
              }
            }
            else
            {
              char v55 = v50;
              int v56 = v66;
            }
            if (v53 != (void *)(a1 + 16)) {
              free(v53);
            }
            *(void *)a1 = v55;
            *(_DWORD *)(a1 + 12) = v56;
            goto LABEL_37;
          }
LABEL_85:
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
LABEL_84:
        sub_1CD0A89A8(0xFFFFFFFFuLL);
      }
      v78[0] = (uint64_t)"stop-before";
      __int16 v79 = 259;
      v76[0] = (uint64_t)" and ";
      __int16 v77 = 259;
      sub_1CD3E3950(v78, v76, (uint64_t)v80);
      uint64_t v64 = "stop-after";
    }
    uint64_t v74 = v64;
    __int16 v75 = 259;
    sub_1CD3E3950(v80, (uint64_t *)&v74, (uint64_t)v81);
    uint64_t v72 = " specified!";
    __int16 v73 = 259;
    sub_1CD3E3950(v81, (uint64_t *)&v72, (uint64_t)&v82);
    llvm::report_fatal_error((llvm *)&v82, (const llvm::Twine *)1);
  }
}

uint64_t llvm::TargetPassConfig::getOptLevel(llvm::TargetPassConfig *this)
{
  return *(unsigned int *)(*((void *)this + 14) + 552);
}

uint64_t llvm::TargetPassConfig::insertPass(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 120);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 >= *(_DWORD *)(v4 + 36))
  {
    v9[0] = a2;
    v9[1] = a3;
    v9[2] = a4;
    unint64_t v7 = *(void *)(v4 + 24);
    BOOL v8 = v7 + 24 * v5 > (unint64_t)v9;
    if (v7 > (unint64_t)v9 || !v8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v6 = (void *)(*(void *)(v4 + 24) + 24 * v5);
  *uint64_t v6 = a2;
  v6[1] = a3;
  v6[2] = a4;
  ++*(_DWORD *)(v4 + 32);
  return result;
}

void llvm::TargetPassConfig::TargetPassConfig(llvm::TargetPassConfig *this)
{
}

{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::TargetPassConfig::ID;
  *((_DWORD *)this + 6) = 4;
  *(void *)this = &unk_1F2614AD8;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 16777217;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0x10000;
  llvm::report_fatal_error((llvm *)"Trying to construct TargetPassConfig without a target machine. Scheduling a CodeGen pass without a target triple set?", (const llvm::Twine *)1);
}

BOOL llvm::TargetPassConfig::hasLimitedCodeGenPipeline(llvm::TargetPassConfig *this)
{
  uint64_t v1 = qword_1EBCD69D8;
  if (byte_1EBCD69E7 >= 0) {
    uint64_t v1 = byte_1EBCD69E7 & 0x7F;
  }
  if (v1) {
    return 1;
  }
  uint64_t v2 = qword_1EBCD68F0;
  if (byte_1EBCD68FF >= 0) {
    uint64_t v2 = byte_1EBCD68FF & 0x7F;
  }
  if (v2) {
    return 1;
  }
  uint64_t v3 = qword_1EBCD6BA8;
  if (byte_1EBCD6BB7 >= 0) {
    uint64_t v3 = byte_1EBCD6BB7 & 0x7F;
  }
  if (v3) {
    return 1;
  }
  uint64_t v5 = qword_1EBCD6AC0;
  if (byte_1EBCD6ACF >= 0) {
    uint64_t v5 = byte_1EBCD6ACF & 0x7F;
  }
  return v5 != 0;
}

std::string *llvm::TargetPassConfig::getLimitedCodeGenPipelineReason@<X0>(llvm::TargetPassConfig *this@<X0>, std::string *a2@<X8>)
{
  unint64_t result = (std::string *)llvm::TargetPassConfig::hasLimitedCodeGenPipeline(this);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (result)
  {
    uint64_t v6 = 0;
    char v7 = 1;
    do
    {
      uint64_t v8 = *(uint64_t *)((char *)&off_1E6830668 + v6 * 8);
      if (*(char *)(v8 + 151) < 0)
      {
        if (*(void *)(v8 + 136))
        {
LABEL_7:
          if ((v7 & 1) == 0) {
            std::string::append(a2, (const std::string::value_type *)this);
          }
          unint64_t result = std::string::append(a2, off_1E6830688[v6]);
          char v7 = 0;
        }
      }
      else if (*(unsigned char *)(v8 + 151))
      {
        goto LABEL_7;
      }
      ++v6;
    }
    while (v6 != 4);
  }
  return result;
}

uint64_t llvm::TargetPassConfig::getPassSubstitution(llvm::TargetPassConfig *this, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *((void *)this + 15);
  uint64_t v8 = 0;
  int v5 = sub_1CC4B06FC(*(void *)v4, *(_DWORD *)(v4 + 16), a2, &v8);
  uint64_t v6 = v8;
  if (!v5) {
    uint64_t v6 = *(void *)v4 + 24 * *(unsigned int *)(v4 + 16);
  }
  if (**((void **)this + 15) + 24 * *(unsigned int *)(*((void *)this + 15) + 16) != v6) {
    return *(void *)(v6 + 8);
  }
  return v2;
}

BOOL llvm::TargetPassConfig::isPassSubstitutedOrOverridden(llvm::TargetPassConfig *this, void *a2)
{
  uint64_t v4 = *((void *)this + 15);
  uint64_t v13 = 0;
  int v5 = sub_1CC4B06FC(*(void *)v4, *(_DWORD *)(v4 + 16), (uint64_t)a2, &v13);
  uint64_t v6 = v13;
  if (!v5) {
    uint64_t v6 = *(void *)v4 + 24 * *(unsigned int *)(v4 + 16);
  }
  if (**((void **)this + 15) + 24 * *(unsigned int *)(*((void *)this + 15) + 16) == v6) {
    uint64_t v7 = (uint64_t)a2;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  uint64_t v8 = (void *)sub_1CC4AE830(a2, v7);
  if (v9) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v8 == 0;
  }
  return v10 || v8 != a2;
}

uint64_t sub_1CC4AE830(void *a1, uint64_t a2)
{
  if (a1 == &unk_1EA61EF33)
  {
    int v2 = byte_1EBCD49D8;
  }
  else if (a1 == &unk_1EA61ECD3)
  {
    int v2 = byte_1EBCD4A98;
  }
  else if (a1 == &unk_1EA61EF53)
  {
    int v2 = byte_1EBCD4B58;
  }
  else if (a1 == &unk_1EA61EF54)
  {
    int v2 = byte_1EBCD4C18;
  }
  else if (a1 == &unk_1EA61EEE9)
  {
    int v2 = byte_1EBCD4CD8;
  }
  else if (a1 == &unk_1EA61EF52)
  {
    int v2 = byte_1EBCD4E58;
  }
  else if (a1 == &unk_1EA61EED0)
  {
    int v2 = byte_1EBCD4F18;
  }
  else if (a1 == &unk_1EA61EED2)
  {
    int v2 = byte_1EBCD4FD8;
  }
  else if (a1 == &unk_1EA61EEFB)
  {
    int v2 = byte_1EBCD5098;
  }
  else if (a1 == &unk_1EA61EEF2)
  {
    int v2 = byte_1EBCD5158;
  }
  else if (a1 == &unk_1EA61EEFA)
  {
    int v2 = byte_1EBCD52D8;
  }
  else if (a1 == &unk_1EA61EF28)
  {
    int v2 = byte_1EBCD5398;
  }
  else if (a1 == &unk_1EA61EF29)
  {
    int v2 = byte_1EBCD5458;
  }
  else
  {
    if (a1 != &unk_1EA61EEF1) {
      return a2;
    }
    int v2 = byte_1EBCD5758;
  }
  if (v2) {
    return 0;
  }
  return a2;
}

void llvm::TargetPassConfig::addPass(llvm::TargetPassConfig *this, llvm::Pass *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (*((void *)this + 5) == v4)
  {
    int v6 = *((_DWORD *)this + 18);
    int v5 = *((_DWORD *)this + 19);
    *((_DWORD *)this + 19) = v5 + 1;
    if (v5 == v6) {
      *((unsigned char *)this + 104) = 1;
    }
  }
  if (*((void *)this + 7) == v4)
  {
    int v8 = *((_DWORD *)this + 22);
    int v7 = *((_DWORD *)this + 23);
    *((_DWORD *)this + 23) = v7 + 1;
    if (v7 == v8) {
      *((unsigned char *)this + 105) = 1;
    }
  }
  if (!*((unsigned char *)this + 104) || *((unsigned char *)this + 105))
  {
    (*(void (**)(llvm::Pass *))(*(void *)a2 + 8))(a2);
    goto LABEL_10;
  }
  if (*((unsigned char *)this + 106))
  {
    *((unsigned char *)&v31.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v31, "After ");
    uint64_t v13 = (*(uint64_t (**)(llvm::Pass *))(*(void *)a2 + 16))(a2);
    if (v14 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    int v15 = (const void *)v13;
    size_t v16 = v14;
    if (v14 >= 0x17)
    {
      uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v18 = v14 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_p = operator new(v18 + 1);
      std::string::size_type v29 = v16;
      int64_t v30 = v19 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v30) = v14;
      p_p = &__p;
      if (!v14) {
        goto LABEL_29;
      }
    }
    memmove(p_p, v15, v16);
LABEL_29:
    *((unsigned char *)p_p + v16) = 0;
    if (v30 >= 0) {
      uint64_t v20 = (const std::string::value_type *)&__p;
    }
    else {
      uint64_t v20 = (const std::string::value_type *)__p;
    }
    if (v30 >= 0) {
      std::string::size_type v21 = HIBYTE(v30) & 0x7F;
    }
    else {
      std::string::size_type v21 = v29;
    }
    uint64_t v22 = std::string::append(&v31, v20, v21);
    std::string v32 = *v22;
    v22->__r_.__value_.__r.__words[0] = 0;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    llvm::TargetPassConfig::addMachinePrePasses((uint64_t)this, 1);
    (*(void (**)(void, llvm::Pass *))(**((void **)this + 4) + 16))(*((void *)this + 4), a2);
    llvm::TargetPassConfig::addMachinePostPasses((uint64_t)this);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    goto LABEL_41;
  }
  (*(void (**)(void, llvm::Pass *))(**((void **)this + 4) + 16))(*((void *)this + 4), a2);
LABEL_41:
  uint64_t v23 = *((void *)this + 15);
  uint64_t v24 = *(unsigned int *)(v23 + 32);
  if (v24)
  {
    uint64_t v25 = 24 * v24;
    uint64_t v26 = (unsigned char *)(*(void *)(v23 + 24) + 16);
    do
    {
      if (*((void *)v26 - 2) == v4)
      {
        Pass = (void *)*((void *)v26 - 1);
        if (!*v26) {
          Pass = (void *)llvm::Pass::createPass(*((llvm::Pass **)v26 - 1), Pass);
        }
        llvm::TargetPassConfig::addPass(this, (llvm::Pass *)Pass);
      }
      v26 += 24;
      v25 -= 24;
    }
    while (v25);
  }
LABEL_10:
  if (*((void *)this + 8) == v4)
  {
    int v10 = *((_DWORD *)this + 24);
    int v9 = *((_DWORD *)this + 25);
    *((_DWORD *)this + 25) = v9 + 1;
    if (v9 == v10) {
      *((unsigned char *)this + 105) = 1;
    }
  }
  if (*((void *)this + 6) == v4)
  {
    int v12 = *((_DWORD *)this + 20);
    int v11 = *((_DWORD *)this + 21);
    *((_DWORD *)this + 21) = v11 + 1;
    if (v11 == v12) {
      *((unsigned char *)this + 104) = 1;
    }
  }
  if (*((unsigned char *)this + 105))
  {
    if (!*((unsigned char *)this + 104)) {
      llvm::report_fatal_error((llvm *)"Cannot stop compilation after pass that is not run", (const llvm::Twine *)1);
    }
  }
}

uint64_t llvm::TargetPassConfig::addMachinePrePasses(uint64_t this, int a2)
{
  if (a2 && *(unsigned char *)(this + 107) && (dword_1EBCD5D58 == 1 || dword_1EBCD5E18 == 1)) {
    operator new();
  }
  return this;
}

uint64_t llvm::TargetPassConfig::addMachinePostPasses(uint64_t result)
{
  if (*(unsigned char *)(result + 107))
  {
    if (dword_1EBCD5E18 == 1) {
      operator new();
    }
    if (dword_1EBCD5D58 == 1) {
      operator new();
    }
  }
  if (dword_1EBCD5C98 == 1) {
    llvm::createMachineVerifierPass();
  }
  return result;
}

uint64_t llvm::TargetPassConfig::addPass(llvm::TargetPassConfig *this, void *a2)
{
  uint64_t v4 = *((void *)this + 15);
  uint64_t v13 = 0;
  int v5 = sub_1CC4B06FC(*(void *)v4, *(_DWORD *)(v4 + 16), (uint64_t)a2, &v13);
  uint64_t v6 = v13;
  if (!v5) {
    uint64_t v6 = *(void *)v4 + 24 * *(unsigned int *)(v4 + 16);
  }
  if (**((void **)this + 15) + 24 * *(unsigned int *)(*((void *)this + 15) + 16) == v6) {
    uint64_t v7 = (uint64_t)a2;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  int v8 = (llvm::Pass *)sub_1CC4AE830(a2, v7);
  if (!v8) {
    return 0;
  }
  Pass = v8;
  if (!(_BYTE)v9) {
    Pass = (llvm::Pass *)llvm::Pass::createPass(v8, v9);
  }
  uint64_t v11 = *((void *)Pass + 2);
  llvm::TargetPassConfig::addPass(this, Pass);
  return v11;
}

void llvm::TargetPassConfig::addVerifyPass()
{
  if (dword_1EBCD5C98 == 1) {
    llvm::createMachineVerifierPass();
  }
}

void llvm::TargetPassConfig::addDebugifyPass(llvm::TargetPassConfig *this)
{
}

void llvm::TargetPassConfig::addStripDebugPass(llvm::TargetPassConfig *this)
{
}

void llvm::TargetPassConfig::addCheckDebugPass(llvm::TargetPassConfig *this)
{
}

uint64_t llvm::TargetPassConfig::addCoreISelPasses(llvm::TargetPassConfig *this)
{
  int v2 = dword_1EBCD5F98;
  *(unsigned char *)(*((void *)this + 14) + 592) = *(unsigned char *)(*((void *)this + 14) + 592) & 0xFD | (2
                                                                                                  * (dword_1EBCD5F98 != 2));
  uint64_t v3 = *((void *)this + 14);
  if (v2 == 1)
  {
    __int16 v4 = *(_WORD *)(v3 + 1020);
LABEL_3:
    *(_WORD *)(v3 + 1020) = v4 | 0x800;
    *(_WORD *)(*((void *)this + 14) + 1020) &= ~0x1000u;
    goto LABEL_4;
  }
  __int16 v4 = *(_WORD *)(v3 + 1020);
  if (dword_1EBCD6058 == 1 || (dword_1EBCD6058 != 2 ? (BOOL v8 = (v4 & 0x1000) == 0) : (BOOL v8 = 1), !v8))
  {
    *(_WORD *)(v3 + 1020) = v4 & 0xF7FF;
    *(_WORD *)(*((void *)this + 14) + 1020) |= 0x1000u;
    int v5 = (char *)this + 107;
    char v6 = *((unsigned char *)this + 107);
    if (*(_DWORD *)(*((void *)this + 14) + 1024) != 1) {
      *int v5 = 0;
    }
    char v9 = *((unsigned char *)this + 106);
    *((unsigned char *)this + 106) = 1;
    if (((*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 192))(this) & 1) == 0)
    {
      (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 200))(this);
      if (((*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 208))(this) & 1) == 0)
      {
        (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 216))(this);
        if (((*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 224))(this) & 1) == 0)
        {
          (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 232))(this);
          if (((*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 240))(this) & 1) == 0)
          {
            int v10 = (llvm *)(*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 272))(this);
            llvm::createResetMachineFunctionPass(v10);
          }
        }
      }
    }
    *((unsigned char *)this + 106) = v9;
    goto LABEL_24;
  }
  if (!*(_DWORD *)(v3 + 552) && (*(unsigned char *)(v3 + 592) & 2) != 0) {
    goto LABEL_3;
  }
LABEL_4:
  int v5 = (char *)this + 107;
  char v6 = *((unsigned char *)this + 107);
  *((unsigned char *)this + 107) = 0;
  if ((*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 184))(this))
  {
LABEL_24:
    uint64_t result = 1;
    goto LABEL_25;
  }
  llvm::TargetPassConfig::addPass(this, &unk_1EA61EED6);
  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "After Instruction Selection");
  llvm::TargetPassConfig::printAndVerify(this);
  operator delete(__p);
  uint64_t result = 0;
LABEL_25:
  *int v5 = v6;
  return result;
}

uint64_t sub_1CC4AF680()
{
  return 0;
}

uint64_t llvm::TargetPassConfig::addMachinePasses(llvm::TargetPassConfig *this)
{
  *((unsigned char *)this + 106) = 1;
  if (*(_DWORD *)(*((void *)this + 14) + 552)) {
    int v2 = (llvm *)(*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 304))(this);
  }
  else {
    int v2 = (llvm *)llvm::TargetPassConfig::addPass(this, &unk_1EA61EEE4);
  }
  if ((*(unsigned char *)(*((void *)this + 14) + 1042) & 8) != 0) {
    llvm::createRegUsageInfoPropPass(v2);
  }
  (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 344))(this);
  *((unsigned char *)this + 107) = 0;
  if (byte_1EBD064B8) {
    llvm::createMIRAddFSDiscriminatorsPass();
  }
  if (dword_1EBCD5218 != 2 && (dword_1EBCD5218 == 1 || *(_DWORD *)(*((void *)this + 14) + 552))) {
    (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 368))(this);
  }
  else {
    (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 360))(this);
  }
  (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 400))(this);
  llvm::TargetPassConfig::addPass(this, &unk_1EA61EF45);
  llvm::TargetPassConfig::addPass(this, &unk_1EA61EED7);
  if (*(_DWORD *)(*((void *)this + 14) + 552))
  {
    llvm::TargetPassConfig::addPass(this, &unk_1EA61EF29);
    llvm::TargetPassConfig::addPass(this, &unk_1EA61EF4C);
  }
  BOOL isPassSubstitutedOrOverridden = llvm::TargetPassConfig::isPassSubstitutedOrOverridden(this, &unk_1EA61EF35);
  if (!isPassSubstitutedOrOverridden) {
    llvm::createPrologEpilogInserterPass((llvm *)isPassSubstitutedOrOverridden);
  }
  if (*(_DWORD *)(*((void *)this + 14) + 552)) {
    (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 408))(this);
  }
  llvm::TargetPassConfig::addPass(this, &unk_1EA61EED4);
  (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 416))(this);
  if (byte_1EBCD58D8) {
    llvm::TargetPassConfig::addPass(this, &unk_1EA61EEDD);
  }
  __int16 v4 = (_DWORD *)*((void *)this + 14);
  if (v4[138] && ((*(uint64_t (**)(_DWORD *))(*(void *)v4 + 136))(v4) & 1) == 0)
  {
    if (byte_1EBCD6418) {
      int v5 = &unk_1EA61EF21;
    }
    else {
      int v5 = &unk_1EA61EF33;
    }
    llvm::TargetPassConfig::addPass(this, v5);
  }
  char v6 = (llvm *)(*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 424))(this);
  if (v6 && byte_1EBCD5BD8)
  {
    llvm::dbgs(v6);
    operator new();
  }
  if (*(_DWORD *)(*((void *)this + 14) + 552)) {
    (*(void (**)(llvm::TargetPassConfig *))(*(void *)this + 432))(this);
  }
  llvm::TargetPassConfig::addPass(this, &unk_1EA61EED5);
  llvm::TargetPassConfig::addPass(this, &unk_1EA61EF5A);
  llvm::TargetPassConfig::addPass(this, &unk_1EA61EF2F);
  if (byte_1EBD064B8 && !byte_1EBCD61D8) {
    llvm::createMIRAddFSDiscriminatorsPass();
  }
  uint64_t v7 = (llvm *)(*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 440))(this);
  if ((*(unsigned char *)(*((void *)this + 14) + 1042) & 8) != 0) {
    llvm::createRegUsageInfoCollector(v7);
  }
  llvm::TargetPassConfig::addPass(this, &unk_1EA61EED8);
  llvm::TargetPassConfig::addPass(this, &unk_1EA61EF50);
  BOOL v8 = (llvm *)llvm::TargetPassConfig::addPass(this, &unk_1EA61EF60);
  uint64_t v10 = *((void *)this + 14);
  int v11 = *(_DWORD *)(v10 + 1040);
  if ((v11 & 0x200000) != 0
    && *(_DWORD *)(v10 + 552)
    && dword_1EBCD6C88 != 2
    && ((v11 & 0x800000) != 0 || dword_1EBCD6C88 == 1))
  {
    llvm::createMachineOutlinerPass((llvm *)(dword_1EBCD6C88 == 1));
  }
  if (*(_DWORD *)(v10 + 1044) != 4) {
    llvm::createBasicBlockSectionsPass(*(llvm **)(v10 + 1048), v9);
  }
  if ((*(unsigned char *)(v10 + 1042) & 0x40) != 0 || byte_1EBCD6598) {
    llvm::createMachineFunctionSplitterPass(v8);
  }
  if (!byte_1EBCD5ED8 && (*(_WORD *)(*((void *)this + 14) + 1064) & 0x400) != 0) {
    llvm::createCFIFixup(v8);
  }
  uint64_t result = (*(uint64_t (**)(llvm::TargetPassConfig *))(*(void *)this + 448))(this);
  *((unsigned char *)this + 106) = 0;
  return result;
}

void *sub_1CC4AFD10(void *result, uint64_t a2)
{
  unint64_t v2 = qword_1EBCD6720;
  uint64_t v3 = byte_1EBCD672F & 0x7F;
  if (byte_1EBCD672F < 0) {
    uint64_t v3 = qword_1EBCD6720;
  }
  if (v3)
  {
    if ((byte_1EBCD672F & 0x80000000) == 0)
    {
      __int16 v4 = &qword_1EBCD6718;
LABEL_6:
      *(_OWORD *)uint64_t result = *(_OWORD *)v4;
      result[2] = v4[2];
      return result;
    }
    int v5 = (const void *)qword_1EBCD6718;
  }
  else
  {
    if (!*(unsigned char *)(a2 + 696) || *(_DWORD *)(a2 + 672) != 3)
    {
      std::string *result = 0;
      result[1] = 0;
      result[2] = 0;
      return result;
    }
    if ((*(char *)(a2 + 623) & 0x80000000) == 0)
    {
      __int16 v4 = (uint64_t *)(a2 + 600);
      goto LABEL_6;
    }
    unint64_t v2 = *(void *)(a2 + 608);
    int v5 = *(const void **)(a2 + 600);
  }
  return sub_1CB8BDF7C((uint64_t)result, v5, v2);
}

void *sub_1CC4AFDA0(void *result, uint64_t a2)
{
  unint64_t v2 = qword_1EBCD6808;
  uint64_t v3 = byte_1EBCD6817 & 0x7F;
  if (byte_1EBCD6817 < 0) {
    uint64_t v3 = qword_1EBCD6808;
  }
  if (v3)
  {
    if ((byte_1EBCD6817 & 0x80000000) == 0)
    {
      __int16 v4 = &qword_1EBCD6800;
LABEL_6:
      *(_OWORD *)uint64_t result = *(_OWORD *)v4;
      result[2] = v4[2];
      return result;
    }
    int v5 = (const void *)qword_1EBCD6800;
  }
  else
  {
    if (!*(unsigned char *)(a2 + 696) || *(_DWORD *)(a2 + 672) != 3)
    {
      std::string *result = 0;
      result[1] = 0;
      result[2] = 0;
      return result;
    }
    if ((*(char *)(a2 + 671) & 0x80000000) == 0)
    {
      __int16 v4 = (uint64_t *)(a2 + 648);
      goto LABEL_6;
    }
    unint64_t v2 = *(void *)(a2 + 656);
    int v5 = *(const void **)(a2 + 648);
  }
  return sub_1CB8BDF7C((uint64_t)result, v5, v2);
}

BOOL llvm::TargetPassConfig::getOptimizeRegAlloc(llvm::TargetPassConfig *this)
{
  if (dword_1EBCD5218 == 2) {
    return 0;
  }
  if (dword_1EBCD5218 == 1) {
    return 1;
  }
  return *(_DWORD *)(*((void *)this + 14) + 552) != 0;
}

void sub_1CC4AFE6C()
{
  if (!off_1EBCBE7A8) {
    off_1EBCBE7A8 = (_UNKNOWN *)xmmword_1EBCD7390;
  }
}

BOOL llvm::TargetPassConfig::usingDefaultRegAlloc(llvm::TargetPassConfig *this)
{
  return word_1EBCD7318 == 0;
}

void sub_1CC4AFEA4(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(24 * *(unsigned int *)(a1 + 16)));
}

BOOL sub_1CC4AFEF8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *a4 = 0;
  v21[0] = a2;
  v21[1] = a3;
  size_t v6 = *((void *)a1 + 4);
  if (v6) {
    BOOL v7 = llvm::StringRef::find(v21, *((char **)a1 + 3), v6, 0) != -1;
  }
  else {
    BOOL v7 = 0;
  }
  size_t v8 = *((void *)a1 + 6);
  if (v8) {
    BOOL v9 = llvm::StringRef::find(v21, *((char **)a1 + 5), v8, 0) != -1;
  }
  else {
    BOOL v9 = 0;
  }
  size_t v10 = *((void *)a1 + 8);
  if (v10) {
    BOOL v11 = llvm::StringRef::find(v21, *((char **)a1 + 7), v10, 0) != -1;
  }
  else {
    BOOL v11 = 0;
  }
  size_t v12 = *((void *)a1 + 10);
  if (v12) {
    BOOL v13 = llvm::StringRef::find(v21, *((char **)a1 + 9), v12, 0) != -1;
  }
  else {
    BOOL v13 = 0;
  }
  if (a1[2])
  {
    *a1 = a1[1];
    a1[2] = 0;
  }
  if (v9 && (int v14 = *((_DWORD *)a1 + 2), *((_DWORD *)a1 + 2) = v14 + 1, v14 == *((_DWORD *)a1 + 22)))
  {
    int v15 = 0;
    *(_WORD *)(a1 + 1) = 257;
    if (!v13) {
      goto LABEL_23;
    }
  }
  else
  {
    int v15 = 1;
    if (!v13) {
      goto LABEL_23;
    }
  }
  int v16 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = v16 + 1;
  if (v16 == *((_DWORD *)a1 + 23))
  {
    a1[1] = 0;
    if (v15) {
      a1[2] = 1;
    }
  }
LABEL_23:
  if (v7)
  {
    int v17 = *((_DWORD *)a1 + 1);
    *((_DWORD *)a1 + 1) = v17 + 1;
    if (v17 == *((_DWORD *)a1 + 24)) {
      *a1 = 1;
    }
  }
  if (v11)
  {
    int v18 = *((_DWORD *)a1 + 3);
    *((_DWORD *)a1 + 3) = v18 + 1;
    if (v18 == *((_DWORD *)a1 + 25)) {
      *a1 = 0;
    }
  }
  int v19 = *a1;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v19 != 0;
}

void *sub_1CC4B00CC(void *a1)
{
  *a1 = &unk_1F2614FB0;
  unint64_t v2 = a1 + 81;
  uint64_t v3 = (void *)a1[84];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CC4B018C(a1 + 20);

  return sub_1CB87DD48(a1);
}

void *sub_1CC4B018C(void *a1)
{
  *a1 = &unk_1F2615018;
  qword_1EBCBE7B0 = 0;
  a1[1] = &unk_1F26150A0;
  unint64_t v2 = (void *)a1[3];
  if (v2 != a1 + 5) {
    free(v2);
  }
  return a1;
}

void *sub_1CC4B020C(uint64_t a1)
{
  return sub_1CC4B018C((void *)(a1 - 8));
}

void sub_1CC4B0214(void *a1)
{
  sub_1CC4B018C(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4B024C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 40 * v2;
    uint64_t v5 = a2 + 152;
    do
    {
      sub_1CC4B02A8(v5, *(unsigned __int8 **)v3, *(void *)(v3 + 8), (int *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1CC4B02A8(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1F2614F70;
  char v16 = 1;
  int v15 = v9;
  unint64_t v10 = sub_1CC4B03AC(a1 + 16, (unint64_t)v14, 1);
  uint64_t v11 = *(void *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 32) = &unk_1F2614F90;
  char v13 = *(unsigned char *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(unsigned char *)(v11 + 44) = v13;
  *(void *)(v11 + 32) = &unk_1F2614F70;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(void *)(a1 + 8), a2, a3);
}

unint64_t sub_1CC4B03AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 48 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD58B38C();
    }
    sub_1CD58B38C();
  }
  return a2;
}

uint64_t sub_1CC4B0424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  v7[0] = a2;
  v7[1] = a3;
  if ((!byte_1EBCD4CD8 || llvm::StringRef::find(v7, "MachineBlockPlacementPass", 0x19uLL, 0) == -1)
    && (!byte_1EBCD4A98 || llvm::StringRef::find(v7, "BranchFolderPass", 0x10uLL, 0) == -1)
    && (!byte_1EBCD5758 || llvm::StringRef::find(v7, "MachineCopyPropagationPass", 0x1AuLL, 0) == -1)
    && (!byte_1EBCD4FD8 || llvm::StringRef::find(v7, "EarlyIfConverterPass", 0x14uLL, 0) == -1)
    && (!byte_1EBCD4C18 || llvm::StringRef::find(v7, "EarlyTailDuplicatePass", 0x16uLL, 0) == -1)
    && (!byte_1EBCD5158 || llvm::StringRef::find(v7, "MachineCSEPass", 0xEuLL, 0) == -1)
    && (!byte_1EBCD4F18 || llvm::StringRef::find(v7, "DeadMachineInstructionElimPass", 0x1EuLL, 0) == -1)
    && (!byte_1EBCD5098 || llvm::StringRef::find(v7, "EarlyMachineLICMPass", 0x14uLL, 0) == -1)
    && (!byte_1EBCD5398 || llvm::StringRef::find(v7, "MachineSinkingPass", 0x12uLL, 0) == -1)
    && (!byte_1EBCD52D8 || llvm::StringRef::find(v7, "MachineLICMPass", 0xFuLL, 0) == -1)
    && (!byte_1EBCD5458 || llvm::StringRef::find(v7, "PostRAMachineSinkingPass", 0x18uLL, 0) == -1)
    && (!byte_1EBCD49D8 || llvm::StringRef::find(v7, "PostRASchedulerPass", 0x13uLL, 0) == -1)
    && (!byte_1EBCD4E58 || llvm::StringRef::find(v7, "StackSlotColoringPass", 0x15uLL, 0) == -1)
    && (!byte_1EBCD4B58 || llvm::StringRef::find(v7, "TailDuplicatePass", 0x11uLL, 0) == -1))
  {
    uint64_t v5 = 1;
    if (!v4) {
      return v5;
    }
    goto LABEL_30;
  }
  uint64_t v5 = 0;
  if (v4) {
LABEL_30:
  }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return v5;
}

uint64_t sub_1CC4B06FC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    size_t v6 = (void *)(a1 + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      size_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          size_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        size_t v6 = (void *)(a1 + 24 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        size_t v6 = v8;
      }
    }
  }
  else
  {
    size_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void *sub_1CC4B0794(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD58B710(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      void *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC4B0874()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Enable interprocedural register allocation to reduce load/store at procedure calls.";
  v6.n128_u64[1] = 83;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD4898, "enable-ipra", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD4898, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Post Regalloc Scheduler";
  v6.n128_u64[1] = 31;
  sub_1CD4C1500((uint64_t)&unk_1EBCD4958, "disable-post-ra", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD4958, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable branch folding";
  v6.n128_u64[1] = 22;
  sub_1CD4C1500((uint64_t)&unk_1EBCD4A18, "disable-branch-fold", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD4A18, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable tail duplication";
  v6.n128_u64[1] = 24;
  sub_1CD4C1500((uint64_t)&unk_1EBCD4AD8, "disable-tail-duplicate", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD4AD8, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable pre-register allocation tail duplication";
  v6.n128_u64[1] = 48;
  sub_1CD5898EC(&v5, (long long *)&v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD4B98, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable probability-driven block placement";
  v6.n128_u64[1] = 42;
  sub_1CD5899F8(&v5, (long long *)&v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD4C58, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Collect probability-driven block placement stats";
  v6.n128_u64[1] = 48;
  sub_1CD4C1500((uint64_t)&unk_1EBCD4D18, "enable-block-placement-stats", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD4D18, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Stack Slot Coloring";
  v6.n128_u64[1] = 27;
  sub_1CD4C1500((uint64_t)&unk_1EBCD4DD8, "disable-ssc", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD4DD8, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine Dead Code Elimination";
  v6.n128_u64[1] = 37;
  sub_1CD4C1500((uint64_t)&unk_1EBCD4E98, "disable-machine-dce", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD4E98, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Early If-conversion";
  v6.n128_u64[1] = 27;
  sub_1CD4C1500((uint64_t)&unk_1EBCD4F58, "disable-early-ifcvt", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD4F58, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine LICM";
  v6.n128_u64[1] = 20;
  sub_1CD4C1500((uint64_t)&unk_1EBCD5018, "disable-machine-licm", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5018, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine Common Subexpression Elimination";
  v6.n128_u64[1] = 48;
  sub_1CD4C1500((uint64_t)&unk_1EBCD50D8, "disable-machine-cse", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD50D8, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Enable optimized register allocation compilation path.";
  v6.n128_u64[1] = 54;
  sub_1CD589B04(&v5, (long long *)&v6);
  __cxa_atexit((void (*)(void *))sub_1CC243CA8, &qword_1EBCD5198, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine LICM";
  v6.n128_u64[1] = 20;
  sub_1CD4C1500((uint64_t)&unk_1EBCD5258, "disable-postra-machine-licm", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5258, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine Sinking";
  v6.n128_u64[1] = 23;
  sub_1CD4C1500((uint64_t)&unk_1EBCD5318, "disable-machine-sink", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5318, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable PostRA Machine Sinking";
  v6.n128_u64[1] = 30;
  sub_1CD4C1500((uint64_t)&unk_1EBCD53D8, "disable-postra-machine-sink", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD53D8, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Loop Strength Reduction Pass";
  v6.n128_u64[1] = 36;
  sub_1CD4C1500((uint64_t)&unk_1EBCD5498, "disable-lsr", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5498, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable ConstantHoisting";
  v6.n128_u64[1] = 24;
  sub_1CD589C10(&v5, (long long *)&v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD5558, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Codegen Prepare";
  v6.n128_u64[1] = 23;
  sub_1CD4C1500((uint64_t)&unk_1EBCD5618, "disable-cgp", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5618, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Copy Propagation pass";
  v6.n128_u64[1] = 29;
  sub_1CD4C1500((uint64_t)&unk_1EBCD56D8, "disable-copyprop", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD56D8, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Partial Libcall Inlining";
  v6.n128_u64[1] = 32;
  sub_1CD4C1500((uint64_t)&unk_1EBCD5798, "disable-partial-libcall-inlining", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5798, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Fold null checks into faulting memory operations";
  v6.n128_u64[1] = 48;
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCD5858, "enable-implicit-null-checks", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5858, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"Disable MergeICmps Pass";
  v6.n128_u64[1] = 23;
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCD5918, "disable-mergeicmps", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5918, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Print LLVM IR produced by the loop-reduce pass";
  v6.n128_u64[1] = 46;
  sub_1CD4C1500((uint64_t)&unk_1EBCD59D8, "print-lsr-output", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD59D8, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Print LLVM IR input to isel pass";
  v6.n128_u64[1] = 32;
  sub_1CD4C1500((uint64_t)&unk_1EBCD5A98, "print-isel-input", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5A98, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Dump garbage collector data";
  v6.n128_u64[1] = 27;
  sub_1CD589D1C(&v5, (long long *)&v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD5B58, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Verify generated machine code";
  v6.n128_u64[1] = 29;
  LODWORD(v4) = 1;
  sub_1CD589E28(&v5, &v6, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC243CA8, &qword_1EBCD5C18, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Debugify MIR before and Strip debug after each pass except those known to be unsafe"
                                     " when debug info is present";
  v6.n128_u64[1] = 110;
  LODWORD(v4) = 1;
  sub_1CD589F88(&v5, &v6, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC243CA8, &qword_1EBCD5CD8, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Debugify MIR before, by checking and stripping the debug info after, each pass exce"
                                     "pt those known to be unsafe when debug info is present";
  v6.n128_u64[1] = 137;
  LODWORD(v4) = 1;
  sub_1CD58A0E8(&v5, &v6, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC243CA8, &qword_1EBCD5D98, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"Enable the machine outliner";
  v5.n128_u64[1] = 27;
  int v2 = 1;
  LODWORD(v3) = 1;
  int v1 = 0;
  *(void *)&long long v4 = &v1;
  v6.n128_u64[0] = (unint64_t)&v7;
  int v7 = "always";
  uint64_t v8 = 6;
  int v9 = 1;
  uint64_t v10 = "Run on all functions guaranteed to be beneficial";
  uint64_t v11 = 48;
  BOOL v12 = "never";
  uint64_t v13 = 5;
  int v14 = 2;
  int v15 = "Disable all outlining";
  uint64_t v16 = 21;
  int v17 = "";
  uint64_t v18 = 0;
  int v19 = 1;
  uint64_t v20 = "";
  uint64_t v21 = 0;
  v6.n128_u64[1] = 0x400000003;
  sub_1CD58A248((long long *)&v5, &v3, &v2, (int **)&v4, (uint64_t)&v6);
  if ((const char **)v6.n128_u64[0] != &v7) {
    free((void *)v6.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD586F18, &qword_1EBCD6C08, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable the CFI fixup pass";
  v6.n128_u64[1] = 26;
  sub_1CD4C1500((uint64_t)&unk_1EBCD5E58, "disable-cfi-fixup", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD5E58, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Enable the \"fast\" instruction selector";
  v6.n128_u64[1] = 38;
  sub_1CD58A750(&v5, (long long *)&v6);
  __cxa_atexit((void (*)(void *))sub_1CC243CA8, &qword_1EBCD5F18, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Enable the \"global\" instruction selector";
  v6.n128_u64[1] = 40;
  sub_1CD58A85C(&v5, (long long *)&v6);
  __cxa_atexit((void (*)(void *))sub_1CC243CA8, &qword_1EBCD5FD8, &dword_1CB82C000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Print machine instrs after ISel";
  v6.n128_u64[1] = 31;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD6098, "print-after-isel", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD6098, &dword_1CB82C000);
  LODWORD(v4) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable abort calls when \"global\" instruction selection fails to lower/select an instruction";
  v5.n128_u64[1] = 91;
  v6.n128_u64[0] = (unint64_t)&v7;
  int v7 = "0";
  uint64_t v8 = 1;
  int v9 = 0;
  uint64_t v10 = "Disable the abort";
  uint64_t v11 = 17;
  BOOL v12 = "1";
  uint64_t v13 = 1;
  int v14 = 1;
  int v15 = "Enable the abort";
  uint64_t v16 = 16;
  int v17 = "2";
  uint64_t v18 = 1;
  int v19 = 2;
  uint64_t v20 = "Disable the abort but emit a diagnostic on failure";
  uint64_t v21 = 50;
  v6.n128_u64[1] = 0x400000003;
  sub_1CD58A968(&v4, (long long *)&v5, (uint64_t)&v6);
  if ((const char **)v6.n128_u64[0] != &v7) {
    free((void *)v6.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD586F1C, &qword_1EBCD6E60, &dword_1CB82C000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Do not insert FS-AFDO discriminators before emit.";
  v6.n128_u64[1] = 49;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD6158, "fs-no-final-discrim", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD6158, &dword_1CB82C000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Disable MIRProfileLoader before RegAlloc";
  v6.n128_u64[1] = 40;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD6218, "disable-ra-fsprofile-loader", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD6218, &dword_1CB82C000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Disable MIRProfileLoader before BlockPlacement";
  v6.n128_u64[1] = 46;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD62D8, "disable-layout-fsprofile-loader", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD62D8, &dword_1CB82C000);
  *(void *)&long long v4 = "";
  v6.n128_u64[0] = (unint64_t)"filename";
  v6.n128_u64[1] = 8;
  v5.n128_u64[0] = (unint64_t)"Flow Sensitive profile file name.";
  v5.n128_u64[1] = 33;
  LODWORD(v3) = 1;
  sub_1CD58AE20((const char **)&v4, (long long *)&v6, &v5, &v3);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCD6698, &dword_1CB82C000);
  *(void *)&long long v4 = "";
  v6.n128_u64[0] = (unint64_t)"filename";
  v6.n128_u64[1] = 8;
  v5.n128_u64[0] = (unint64_t)"Flow Sensitive profile remapping file name.";
  v5.n128_u64[1] = 43;
  LODWORD(v3) = 1;
  sub_1CD58AFB8((const char **)&v4, (long long *)&v6, &v5, &v3);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCD6780, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Run MachineScheduler post regalloc (independent of preRA sched)";
  v6.n128_u64[1] = 63;
  sub_1CD4C1500((uint64_t)&unk_1EBCD6398, "misched-postra", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD6398, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Run live interval analysis earlier in the pipeline";
  v6.n128_u64[1] = 50;
  sub_1CD4C1500((uint64_t)&unk_1EBCD6458, "early-live-intervals", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD6458, &dword_1CB82C000);
  int v2 = 1;
  LODWORD(v3) = 0;
  *(void *)&long long v4 = &v3;
  v5.n128_u64[0] = (unint64_t)"Enable the new, experimental CFL alias analysis in CodeGen";
  v5.n128_u64[1] = 58;
  v6.n128_u64[0] = (unint64_t)&v7;
  int v7 = "none";
  uint64_t v8 = 4;
  int v9 = 0;
  uint64_t v10 = "Disable CFL-AA";
  uint64_t v11 = 14;
  BOOL v12 = "steens";
  uint64_t v13 = 6;
  int v14 = 1;
  int v15 = "Enable unification-based CFL-AA";
  uint64_t v16 = 31;
  int v17 = "anders";
  uint64_t v18 = 6;
  int v19 = 2;
  uint64_t v20 = "Enable inclusion-based CFL-AA";
  uint64_t v21 = 29;
  uint64_t v22 = "both";
  uint64_t v23 = 4;
  int v24 = 3;
  uint64_t v25 = "Enable both variants of CFL-AA";
  uint64_t v26 = 30;
  v6.n128_u64[1] = 0x400000004;
  sub_1CD58B150((int **)&v4, &v2, (long long *)&v5, (uint64_t *)&v6);
  if ((const char **)v6.n128_u64[0] != &v7) {
    free((void *)v6.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CD586F20, &qword_1EBCD70B8, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"start-after";
  v6.n128_u64[1] = 11;
  v5.n128_u64[0] = (unint64_t)"Resume compilation after a specific pass";
  v5.n128_u64[1] = 40;
  *(void *)&long long v4 = "pass-name";
  *((void *)&v4 + 1) = 9;
  uint64_t v3 = "";
  int v2 = 1;
  sub_1CD58B470((llvm::cl::Option *)&unk_1EBCD6868, (uint64_t)&v6, &v5, &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCD6868, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"start-before";
  v6.n128_u64[1] = 12;
  v5.n128_u64[0] = (unint64_t)"Resume compilation before a specific pass";
  v5.n128_u64[1] = 41;
  *(void *)&long long v4 = "pass-name";
  *((void *)&v4 + 1) = 9;
  uint64_t v3 = "";
  int v2 = 1;
  sub_1CD58B470((llvm::cl::Option *)&unk_1EBCD6950, (uint64_t)&v6, &v5, &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCD6950, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"stop-after";
  v6.n128_u64[1] = 10;
  v5.n128_u64[0] = (unint64_t)"Stop compilation after a specific pass";
  v5.n128_u64[1] = 38;
  *(void *)&long long v4 = "pass-name";
  *((void *)&v4 + 1) = 9;
  uint64_t v3 = "";
  int v2 = 1;
  sub_1CD58B470((llvm::cl::Option *)&unk_1EBCD6A38, (uint64_t)&v6, &v5, &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCD6A38, &dword_1CB82C000);
  v6.n128_u64[0] = (unint64_t)"stop-before";
  v6.n128_u64[1] = 11;
  v5.n128_u64[0] = (unint64_t)"Stop compilation before a specific pass";
  v5.n128_u64[1] = 39;
  *(void *)&long long v4 = "pass-name";
  *((void *)&v4 + 1) = 9;
  uint64_t v3 = "";
  int v2 = 1;
  sub_1CD58B470((llvm::cl::Option *)&unk_1EBCD6B20, (uint64_t)&v6, &v5, &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCD6B20, &dword_1CB82C000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Split out cold blocks from machine functions based on profile information.";
  v6.n128_u64[1] = 74;
  sub_1CD4C1500((uint64_t)&unk_1EBCD6518, "enable-split-machine-functions", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD6518, &dword_1CB82C000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Disable the expand reduction intrinsics pass from running";
  v6.n128_u64[1] = 57;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD65D8, "disable-expand-reductions", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD65D8, &dword_1CB82C000);
  LODWORD(v3) = 1;
  *(void *)&long long v4 = sub_1CC4AF680;
  v5.n128_u64[0] = (unint64_t)&v4;
  v6.n128_u64[0] = (unint64_t)"Register allocator to use";
  v6.n128_u64[1] = 25;
  sub_1CD58B7C4(&v3, (uint64_t **)&v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1CD587D88, &qword_1EBCD7310, &dword_1CB82C000);
  qword_1EBCD4868 = 0;
  unk_1EBCD4870 = "default";
  qword_1EBCD4878 = 7;
  unk_1EBCD4880 = "pick register allocator based on -O option";
  qword_1EBCD4888 = 42;
  unk_1EBCD4890 = sub_1CC4AF680;
  sub_1CC410D90(&llvm::RegisterRegAllocBase<llvm::RegisterRegAlloc>::Registry, &qword_1EBCD4868);
  return __cxa_atexit((void (*)(void *))sub_1CC4108A4, &qword_1EBCD4868, &dword_1CB82C000);
}

uint64_t sub_1CC4B18C4(llvm::TargetInstrInfo *a1, const llvm::MachineInstr *a2)
{
  uint64_t v2 = *((void *)a2 + 2);
  if (*(_WORD *)v2 == 10) {
    return 1;
  }
  if ((*(unsigned char *)(v2 + 11) & 0x20) == 0) {
    return 0;
  }
  if ((*(uint64_t (**)(llvm::TargetInstrInfo *))(*(void *)a1 + 32))(a1)) {
    return 1;
  }

  return llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(a1, a2, 0);
}

uint64_t llvm::TargetRegisterInfo::markSuperRegs(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(result + 56);
  if (v3)
  {
    long long v4 = (unsigned __int16 *)(v3 + 2 * *(unsigned int *)(*(void *)(result + 8) + 24 * a3 + 8));
    uint64_t v5 = *a2;
    do
    {
      *(void *)(v5 + 8 * ((unsigned __int16)a3 >> 6)) |= 1 << a3;
      int v6 = *v4++;
      a3 += v6;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::TargetRegisterInfo::checkAllSuperRegsMarked(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 + 63) >= 0x1C0) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v8 + 63) >= 0x40) {
    bzero(v54, 8 * ((v8 + 63) >> 6));
  }
  int v55 = v8;
  int v9 = *(_DWORD *)(a2 + 64);
  if (!v9) {
    return 1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = (v9 - 1) >> 6;
  BOOL v12 = *(uint64_t **)a2;
  uint64_t v13 = v11 << 6;
  int v14 = *(uint64_t **)a2;
  while (1)
  {
    uint64_t v16 = *v14++;
    uint64_t v15 = v16;
    unint64_t v17 = v13 == v10 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v9 : -1;
    unint64_t v18 = v17 & v15;
    if (v18) {
      break;
    }
    v10 += 64;
    if (v13 + 64 == v10) {
      return 1;
    }
  }
  unint64_t v19 = __clz(__rbit64(v18));
  unint64_t v20 = v19 + v10;
  if (v19 + v10 == -1) {
    return 1;
  }
  unsigned int v21 = v19 + v10;
  while (1)
  {
    if (((*(void *)&v54[(v20 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v20) & 1) == 0)
    {
      uint64_t v22 = (unsigned __int16 *)(*(void *)(a1 + 56) + 2 * *(unsigned int *)(*(void *)(a1 + 8) + 24 * v20 + 8));
      if (*v22) {
        break;
      }
    }
LABEL_32:
    unsigned int v32 = v21 + 1;
    if (v21 + 1 != v9)
    {
      unsigned int v33 = v32 >> 6;
      if (v32 >> 6 <= v11)
      {
        uint64_t v34 = 0;
        int v36 = v32 & 0x3F;
        BOOL v35 = v36 == 0;
        unint64_t v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
        uint64_t v38 = v35 ? -1 : ~v37;
        int v39 = v33 << 6;
        uint64_t v40 = v11 - v33;
        uint64_t v41 = &v12[v33];
        while (1)
        {
          uint64_t v42 = v34 ? -1 : v38;
          unint64_t v43 = v40 == v34 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v9 : -1;
          unint64_t v44 = v42 & v43 & v41[v34];
          if (v44) {
            break;
          }
          v39 += 64;
          if (v40 + 1 == ++v34) {
            return 1;
          }
        }
        unsigned int v21 = __clz(__rbit64(v44)) + v39;
        unint64_t v20 = v21;
        if (v21 != -1) {
          continue;
        }
      }
    }
    return 1;
  }
  if (HIWORD(v21)) {
    uint64_t v23 = &a3[a4];
  }
  else {
    uint64_t v23 = a3;
  }
  unsigned __int16 v24 = *v22 + v20;
  if (a4) {
    BOOL v25 = HIWORD(v21) != 0;
  }
  else {
    BOOL v25 = 1;
  }
  while (1)
  {
    int v26 = v24;
    uint64_t v27 = 1 << v24;
    uint64_t v28 = v24 >> 6;
    if ((v27 & v12[v28]) == 0)
    {
      std::string::size_type v29 = v23;
      if (!v25)
      {
        uint64_t v30 = 2 * a4;
        std::string::size_type v29 = a3;
        while (*v29 != (unsigned __int16)v20)
        {
          ++v29;
          v30 -= 2;
          if (!v30)
          {
            std::string::size_type v29 = &a3[a4];
            break;
          }
        }
      }
      if (a4 == v29 - a3) {
        break;
      }
    }
    *(void *)&v54[8 * v28] |= v27;
    int v31 = v22[1];
    ++v22;
    unsigned __int16 v24 = v31 + v26;
    if (!v31) {
      goto LABEL_32;
    }
  }
  uint64_t v47 = llvm::dbgs((llvm *)v22);
  unint64_t v48 = v47;
  uint64_t v49 = (void *)*((void *)v47 + 4);
  if (*((void *)v47 + 3) - (void)v49 > 0x15uLL)
  {
    qmemcpy(v49, "Error: Super register ", 22);
    *((void *)v47 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(v47, "Error: Super register ", 0x16uLL);
  }
  uint64_t v50 = operator new(0x28uLL);
  *(void *)uint64_t v50 = &unk_1F26154E0;
  v50[2] = v26;
  *((void *)v50 + 2) = a1;
  v50[6] = 0;
  *((void *)v50 + 4) = 0;
  sub_1CC4B2FB0((llvm::raw_ostream *)v50, v48);
  int v51 = (void *)*((void *)v48 + 4);
  if (*((void *)v48 + 3) - (void)v51 > 0x15uLL)
  {
    qmemcpy(v51, " of reserved register ", 22);
    *((void *)v48 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(v48, " of reserved register ", 0x16uLL);
  }
  uint64_t v52 = operator new(0x28uLL);
  *(void *)uint64_t v52 = &unk_1F26154E0;
  v52[2] = v21;
  *((void *)v52 + 2) = a1;
  v52[6] = 0;
  *((void *)v52 + 4) = 0;
  sub_1CC4B2FB0((llvm::raw_ostream *)v52, v48);
  uint64_t v53 = *((void *)v48 + 4);
  if ((unint64_t)(*((void *)v48 + 3) - v53) > 0x11)
  {
    *(_WORD *)(v53 + 16) = 2606;
    *(_OWORD *)uint64_t v53 = *(_OWORD *)" is not reserved.\n";
    *((void *)v48 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v48, " is not reserved.\n", 0x12uLL);
  }
  (*(void (**)(_DWORD *))(*(void *)v52 + 40))(v52);
  (*(void (**)(_DWORD *))(*(void *)v50 + 40))(v50);
  return 0;
}

void *llvm::TargetRegisterInfo::getAllocatableClass(uint64_t a1, void *a2)
{
  if (!a2 || *(unsigned char *)(*a2 + 31)) {
    return a2;
  }
  uint64_t v3 = (unsigned int *)a2[1];
  uint64_t v4 = *(void *)(a1 + 240);
  unint64_t v5 = (unint64_t)(*(void *)(a1 + 248) - v4) >> 3;
  unsigned int v6 = *v3;
  if (!*v3)
  {
    unsigned int v7 = 0;
    while (1)
    {
      v7 += 32;
      if (v7 >= v5) {
        return 0;
      }
      unsigned int v15 = v3[1];
      ++v3;
      unsigned int v6 = v15;
      if (v15) {
        goto LABEL_6;
      }
    }
  }
  unsigned int v7 = 0;
LABEL_6:
  unsigned int v8 = __clz(__rbit32(v6));
  unsigned int v9 = v8 | v7;
  if ((v8 | v7) == v5) {
    return 0;
  }
  unsigned int v10 = v6 >> v8;
  do
  {
    a2 = *(void **)(v4 + 8 * v9);
    if (*(unsigned char *)(*a2 + 31)) {
      break;
    }
    if (v10 <= 1)
    {
      while (1)
      {
        v7 += 32;
        if (v7 >= v5) {
          return 0;
        }
        unsigned int v12 = v3[1];
        ++v3;
        unsigned int v11 = v12;
        if (v12)
        {
          unsigned int v13 = v7;
          goto LABEL_15;
        }
      }
    }
    unsigned int v13 = v9 + 1;
    unsigned int v11 = v10 >> 1;
LABEL_15:
    a2 = 0;
    unsigned int v14 = __clz(__rbit32(v11));
    unsigned int v9 = v14 + v13;
    unsigned int v10 = v11 >> v14;
  }
  while (v9 != v5);
  return a2;
}

uint64_t *llvm::TargetRegisterInfo::getMinimalPhysRegClass(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3 = *(char **)(a1 + 240);
  uint64_t v4 = *(char **)(a1 + 248);
  if (v3 != v4)
  {
    unint64_t v5 = 0;
    int v6 = a3;
    unsigned int v7 = a2 - 0x40000000;
    uint64_t v8 = a2 >> 3;
    int v9 = 1 << (a2 & 7);
    unint64_t v10 = (unint64_t)a2 >> 3;
    unsigned int v11 = *(uint64_t ***)(a1 + 240);
    while (1)
    {
      unsigned int v12 = *v11;
      if (v6 != 1) {
        break;
      }
      if (v7 >= 0xC0000001)
      {
        uint64_t v13 = *v12;
LABEL_6:
        if (v10 < *(unsigned __int16 *)(v13 + 22)
          && (v9 & *(unsigned char *)(*(void *)(v13 + 8) + v8)) != 0
          && (!v5
           || v12 != v5
           && ((*(_DWORD *)(v5[1] + ((*(unsigned __int16 *)(v13 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v13 + 24)) & 1) != 0))
        {
          unint64_t v5 = *v11;
        }
      }
LABEL_8:
      if (++v11 == (uint64_t **)v4) {
        return v5;
      }
    }
    uint64_t v13 = *v12;
    unsigned int v15 = *(unsigned __int8 **)(*(void *)(a1 + 264)
                              + 24
                              * (*(unsigned __int16 *)(*v12 + 24)
                               + *(_DWORD *)(a1 + 272) * ((unint64_t)(v4 - v3) >> 3))
                              + 16);
    do
    {
      int v17 = *v15++;
      int v16 = v17;
    }
    while (v17 != 1 && v16 != v6);
    if (v16 == 1 || v7 < 0xC0000001) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  return 0;
}

uint64_t llvm::TargetRegisterInfo::getCommonSubClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t result = 0;
  if (a2 && a3)
  {
    uint64_t v6 = a1 + 240;
    uint64_t v5 = *(void *)(a1 + 240);
    unint64_t v7 = (unint64_t)(*(void *)(v6 + 8) - v5) >> 3;
    if (v7)
    {
      unsigned int v8 = 0;
      int v9 = *(_DWORD **)(a3 + 8);
      for (int i = *(_DWORD **)(a2 + 8); ; ++i)
      {
        unsigned int v11 = *v9 & *i;
        if (v11) {
          break;
        }
        uint64_t result = 0;
        ++v9;
        v8 += 32;
        if (v8 >= v7) {
          return result;
        }
      }
      return *(void *)(v5 + 8 * (__clz(__rbit32(v11)) + v8));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::TargetRegisterInfo::getMatchingSuperRegClass(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(_WORD **)(a3 + 16);
  int v5 = (unsigned __int16)*v4;
  if (!*v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 240);
  unint64_t v7 = (unint64_t)(*(void *)(a1 + 248) - v6) >> 3;
  uint64_t v8 = 4 * ((v7 + 31) >> 5);
  int v9 = (_DWORD *)(*(void *)(a3 + 8) + v8);
  unint64_t v10 = v4 + 1;
  while (v5 != a4)
  {
    int v11 = *v10++;
    int v5 = v11;
    int v9 = (_DWORD *)((char *)v9 + v8);
    if (!v11) {
      return 0;
    }
  }
  if (!v7) {
    return 0;
  }
  unsigned int v12 = 0;
  uint64_t v13 = *(_DWORD **)(a2 + 8);
  while (1)
  {
    unsigned int v14 = *v13 & *v9;
    if (v14) {
      break;
    }
    ++v13;
    ++v9;
    v12 += 32;
    if (v12 >= v7) {
      return 0;
    }
  }
  return *(void *)(v6 + 8 * (__clz(__rbit32(v14)) + v12));
}

uint64_t *llvm::TargetRegisterInfo::getCommonSuperRegClass(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v7 = *(void *)(a1 + 264);
  uint64_t v8 = (*(void *)(a1 + 248) - *(void *)(a1 + 240)) >> 3;
  int v9 = *(_DWORD *)(a1 + 272) * v8;
  unsigned int v10 = *(_DWORD *)(v7 + 24 * (v9 + *(unsigned __int16 *)(*(void *)a2 + 24)));
  unsigned int v11 = *(_DWORD *)(v7 + 24 * (v9 + *(unsigned __int16 *)(*(void *)a4 + 24)));
  BOOL v12 = v10 >= v11;
  if (v10 >= v11) {
    unsigned int v11 = v10;
  }
  unsigned int v50 = v11;
  if (v12) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = a2;
  }
  if (v12) {
    uint64_t v14 = a5;
  }
  else {
    uint64_t v14 = a3;
  }
  if (v12) {
    unsigned int v15 = a6;
  }
  else {
    unsigned int v15 = a7;
  }
  if (v12) {
    int v16 = a7;
  }
  else {
    int v16 = a6;
  }
  unint64_t v43 = v16;
  unint64_t v44 = v15;
  if (v12) {
    unsigned int v17 = a3;
  }
  else {
    unsigned int v17 = a5;
  }
  unsigned int v48 = v17;
  if (v12) {
    uint64_t v18 = a2;
  }
  else {
    uint64_t v18 = a4;
  }
  if (*(void *)(v18 + 16))
  {
    uint64_t v46 = v13;
    uint64_t v47 = *(unsigned __int16 **)(v18 + 16);
    unint64_t v20 = 0;
    unsigned int v49 = 0;
    uint64_t v21 = *(void *)(v18 + 8);
    uint64_t v45 = 4 * ((v8 + 31) >> 5);
    while (1)
    {
      if (v49) {
        unsigned int v22 = v49;
      }
      else {
        unsigned int v22 = v48;
      }
      if (v48 && v49) {
        unsigned int v22 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 208))(a1, v49, v48);
      }
      uint64_t v23 = *(unsigned __int16 **)(v46 + 16);
      if (v23) {
        break;
      }
LABEL_53:
      unsigned int v41 = *v47++;
      v21 += v45;
      unsigned int v32 = v20;
      unsigned int v49 = v41;
      if (!v41) {
        return v32;
      }
    }
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(v46 + 8);
    uint64_t v26 = 4 * ((((*(void *)(a1 + 248) - *(void *)(a1 + 240)) >> 3) + 31) >> 5);
    while (1)
    {
      uint64_t v27 = *(void *)(a1 + 240);
      unint64_t v28 = (unint64_t)(*(void *)(a1 + 248) - v27) >> 3;
      if (!v28) {
        goto LABEL_45;
      }
      uint64_t v29 = 0;
      unsigned int v30 = 0;
      while (1)
      {
        unsigned int v31 = *(_DWORD *)(v25 + v29) & *(_DWORD *)(v21 + v29);
        if (v31) {
          break;
        }
        v30 += 32;
        v29 += 4;
        if (v30 >= v28) {
          goto LABEL_45;
        }
      }
      unsigned int v32 = *(uint64_t **)(v27 + 8 * (__clz(__rbit32(v31)) + v30));
      if (!v32
        || *(_DWORD *)(*(void *)(a1 + 264)
                     + 24 * (*(unsigned __int16 *)(*v32 + 24) + *(_DWORD *)(a1 + 272) * v28)) < v50)
      {
        goto LABEL_45;
      }
      int v33 = v24 ? v24 : v14;
      if (v14 && v24) {
        int v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 208))(a1, v24, v14);
      }
      if (v22 != v33) {
        goto LABEL_45;
      }
      uint64_t v35 = *(void *)(a1 + 264);
      uint64_t v37 = *(void *)(a1 + 240);
      uint64_t v36 = *(void *)(a1 + 248);
      uint64_t v38 = *v32;
      if (v20)
      {
        unint64_t v40 = (unint64_t)(v36 - v37) >> 3;
        int v39 = *(unsigned __int16 *)(v38 + 24);
        if (*(_DWORD *)(v35 + 24 * (*(_DWORD *)(a1 + 272) * v40 + v39)) >= *(_DWORD *)(v35 + 24 * (*(_DWORD *)(a1 + 272) * v40 + *(unsigned __int16 *)(*v20 + 24)))) {
          goto LABEL_45;
        }
      }
      else
      {
        int v39 = *(unsigned __int16 *)(v38 + 24);
        unint64_t v40 = (unint64_t)(v36 - v37) >> 3;
      }
      *unint64_t v44 = v49;
      *unint64_t v43 = v24;
      unint64_t v20 = v32;
      if (*(_DWORD *)(v35 + 24 * (v39 + *(_DWORD *)(a1 + 272) * v40)) == v50) {
        return v32;
      }
LABEL_45:
      unsigned int v34 = *v23++;
      uint64_t v24 = v34;
      v25 += v26;
      if (!v34) {
        goto LABEL_53;
      }
    }
  }
  return 0;
}

uint64_t llvm::TargetRegisterInfo::getRegAllocationHints(uint64_t a1, int a2, unsigned __int16 *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = 0;
  v31[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a6 + 40);
  unsigned int v10 = a2 & 0x7FFFFFFF;
  uint64_t v11 = *(void *)(v9 + 208);
  v28[0] = v29;
  v28[1] = (void *)0x2000000000;
  v31[0] = 0;
  v31[1] = 0;
  unsigned int v30 = v31;
  uint64_t v12 = v11 + 40 * v10;
  uint64_t v13 = *(unsigned int *)(v12 + 16);
  if (v13)
  {
    unint64_t v19 = *(unsigned int **)(v12 + 8);
    BOOL v20 = *(_DWORD *)(v11 + 40 * v10) != 0;
    uint64_t v25 = 2 * a4;
    uint64_t v26 = &v19[v13];
    do
    {
      if (!v20)
      {
        unsigned int v21 = *v19;
        unsigned int v27 = *v19;
        if (a7 && (v21 & 0x80000000) != 0) {
          unsigned int v27 = *(_DWORD *)(*(void *)(a7 + 280) + 4 * (v21 & 0x7FFFFFFF));
        }
        if ((sub_1CC34E98C((uint64_t)v28, &v27) & 0x100000000) != 0
          && v27 - 1 <= 0x3FFFFFFE
          && ((*(void *)(*(void *)(v9 + 352) + (((unint64_t)v27 >> 3) & 0x1FFFFFF8)) >> v27) & 1) == 0)
        {
          if (a4)
          {
            uint64_t v22 = v25;
            uint64_t v23 = a3;
            while (v27 != *v23)
            {
              ++v23;
              v22 -= 2;
              if (!v22)
              {
                uint64_t v23 = &a3[a4];
                break;
              }
            }
          }
          else
          {
            uint64_t v23 = a3;
          }
          if (a4 != v23 - a3)
          {
            uint64_t v24 = a5[1];
            if ((unint64_t)(v24 + 1) > a5[2]) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *(_WORD *)(*a5 + 2 * v24) = v27;
            ++a5[1];
          }
        }
      }
      BOOL v20 = 0;
      ++v19;
    }
    while (v19 != v26);
    uint64_t v8 = (void *)v31[0];
  }
  sub_1CB833A08((uint64_t)&v30, v8);
  if (v28[0] != v29) {
    free(v28[0]);
  }
  return 0;
}

uint64_t llvm::TargetRegisterInfo::canRealignStack(llvm::TargetRegisterInfo *this, const llvm::MachineFunction *a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 112);
  if (!v2) {
    return 1;
  }
  if (!*(_DWORD *)(v2 + 8)) {
    return 1;
  }
  uint64_t v3 = *(void *)(v2 + 40);
  if (!v3) {
    return 1;
  }
  int v4 = *(_DWORD *)(v3 + 40);
  if (!v4) {
    return 1;
  }
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v19 = v5;
    int v18 = v4;
    int v16 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v6 = &unk_1EBCBE000;
    int v4 = v18;
    uint64_t v5 = v19;
    if (v16)
    {
      unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v17;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v6 = (void *)&unk_1EBCBE000;
      int v4 = v18;
      uint64_t v5 = v19;
    }
  }
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6[176] ^ 0x71B0A0613591C43)) ^ ((0x9DDFEA08EB382D69
                                                                   * (v6[176] ^ 0x71B0A0613591C43)) >> 47) ^ 0x6E776B636174732DLL);
  unsigned int v8 = (-348639895 * ((v7 >> 47) ^ v7)) ^ 0x732D6E67;
  int v9 = v4 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v8 & v9;
    uint64_t v12 = v5 + 24 * v11;
    uint64_t v13 = *(void **)v12;
    if (*(void *)v12 == -1)
    {
      if ("no-realign-stack" == (char *)-1) {
        return 0;
      }
      goto LABEL_9;
    }
    if (v13 != (void *)-2) {
      break;
    }
    if ("no-realign-stack" == (char *)-2) {
      return 0;
    }
LABEL_9:
    if (v13 == (void *)-1) {
      return 1;
    }
    unsigned int v8 = i + v11;
  }
  if (*(void *)(v12 + 8) != 16) {
    goto LABEL_9;
  }
  if (*v13 != 0x696C6165722D6F6ELL || v13[1] != 0x6B636174732D6E67) {
    goto LABEL_9;
  }
  return 0;
}

uint64_t llvm::TargetRegisterInfo::shouldRealignStack(llvm::TargetRegisterInfo *this, const llvm::MachineFunction *a2)
{
  uint64_t v3 = *((void *)a2 + 7);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 112))(*((void *)a2 + 2));
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(v5 + 112);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 8))
    {
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7)
      {
        int v8 = *(_DWORD *)(v7 + 40);
        if (v8)
        {
          uint64_t v9 = *(void *)(v7 + 24);
          unsigned int v10 = &unk_1EBCBE000;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            uint64_t v25 = v9;
            uint64_t v26 = v4;
            int v24 = v8;
            int v21 = __cxa_guard_acquire(&qword_1EBCBE588);
            unsigned int v10 = &unk_1EBCBE000;
            int v8 = v24;
            int v22 = v21;
            uint64_t v9 = v25;
            uint64_t v4 = v26;
            if (v22)
            {
              unint64_t v23 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v23 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v23;
              __cxa_guard_release(&qword_1EBCBE588);
              unsigned int v10 = (void *)&unk_1EBCBE000;
              int v8 = v24;
              uint64_t v9 = v25;
              uint64_t v4 = v26;
            }
          }
          unint64_t v11 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (v10[176] ^ 0x4613941DF5A76224)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v10[176] ^ 0x4613941DF5A76224)) >> 47) ^ 0x2776E67696C61657);
          unsigned int v12 = (-348639895 * ((v11 >> 47) ^ v11)) ^ 0x6165726B;
          int v13 = v8 - 1;
          for (int i = 1; ; ++i)
          {
            unsigned int v15 = v12 & v13;
            int v16 = (uint64_t *)(v9 + 24 * v15);
            uint64_t v17 = *v16;
            if (*v16 == -1)
            {
              if ("stackrealign" == (char *)-1) {
                return 1;
              }
            }
            else if (v17 == -2)
            {
              if ("stackrealign" == (char *)-2) {
                return 1;
              }
            }
            else if (v16[1] == 12 && *(void *)v17 == 0x6165726B63617473 && *(_DWORD *)(v17 + 8) == 1852270956)
            {
              return 1;
            }
            if (v17 == -1) {
              break;
            }
            unsigned int v12 = i + v15;
          }
        }
      }
    }
  }
  if (*(unsigned __int8 *)(v3 + 60) > *(unsigned __int8 *)(v4 + 12)) {
    return 1;
  }
  uint64_t v18 = *(void *)(v5 + 112);
  if (v18) {
    return (*(unsigned __int8 *)(v18 + 21) >> 6) & 1;
  }
  else {
    return 0;
  }
}

BOOL llvm::TargetRegisterInfo::regmaskSubsetEqual(llvm::TargetRegisterInfo *this, const unsigned int *a2, const unsigned int *a3)
{
  unsigned int v3 = *((_DWORD *)this + 4) + 31;
  if (v3 < 0x20) {
    return 1;
  }
  if ((*a2 & ~*a3) != 0) {
    return 0;
  }
  unint64_t v5 = v3 >> 5;
  uint64_t v6 = 1;
  do
  {
    unint64_t v7 = v6;
    if (v5 == v6) {
      break;
    }
    unsigned int v8 = a2[v6];
    unsigned int v9 = a3[v6++];
  }
  while ((v8 & ~v9) == 0);
  return v7 >= v5;
}

uint64_t llvm::TargetRegisterInfo::getRegSizeInBits(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 - 1 <= 0x3FFFFFFE)
  {
    unsigned int v8 = 0;
    unsigned int v9 = *(char **)(a1 + 240);
    unsigned int v10 = *(char **)(a1 + 248);
    unint64_t v11 = (unint64_t)a2 >> 3;
    unsigned int v12 = v9;
    do
    {
      uint64_t v13 = **(void **)v12;
      if (v11 < *(unsigned __int16 *)(v13 + 22)
        && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(void *)(v13 + 8) + v11)) != 0
        && (!v8
         || *(uint64_t **)v12 != v8
         && ((*(_DWORD *)(v8[1] + ((*(unsigned __int16 *)(v13 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v13 + 24)) & 1) != 0))
      {
        unsigned int v8 = *(uint64_t **)v12;
      }
      v12 += 8;
    }
    while (v12 != v10);
    return *(unsigned int *)(*(void *)(a1 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*v8 + 24)
                            + *(_DWORD *)(a1 + 272) * ((unint64_t)(v10 - v9) >> 3)));
  }
  unint64_t v5 = a2 & 0x7FFFFFFF;
  if ((a2 & 0x80000000) == 0 || v5 >= *(unsigned int *)(a3 + 432))
  {
    unint64_t v15 = 0;
LABEL_19:
    unsigned int v8 = (uint64_t *)(*(void *)(*(void *)(a3 + 24) + 16 * v5) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v9 = *(char **)(a1 + 240);
    unsigned int v10 = *(char **)(a1 + 248);
    return *(unsigned int *)(*(void *)(a1 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*v8 + 24)
                            + *(_DWORD *)(a1 + 272) * ((unint64_t)(v10 - v9) >> 3)));
  }
  unint64_t v15 = *(void *)(*(void *)(a3 + 424) + 8 * v5);
  if ((v15 & 0xFFFFFFFFFFFFFFF9) == 0) {
    goto LABEL_19;
  }
  uint64_t result = sub_1CB8F1DC4(&v15);
  if (v7 == 1)
  {
    uint64_t v14 = result;
    uint64_t result = v14;
  }
  if (!result) {
    goto LABEL_19;
  }
  return result;
}

uint64_t llvm::TargetRegisterInfo::getCoveringSubRegIndexes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v31 = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 104);
  if (v5 < 2) {
    return 0;
  }
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = ~a4;
  uint64_t v13 = 1;
  while ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a3, v13) != a3)
  {
LABEL_4:
    if (v5 == ++v13) {
      goto LABEL_16;
    }
  }
  int8x8_t v14 = *(int8x8_t *)(*(void *)(a1 + 232) + 8 * v13);
  if (*(void *)&v14 != a4)
  {
    if ((*(void *)&v14 & v12) == 0)
    {
      if (v31 >= 8uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
      v15.i16[0] = vaddlv_u8(v15);
      v32[v31++] = v13;
      BOOL v16 = v11 >= v15.i32[0];
      if (v11 <= v15.i32[0]) {
        unsigned int v11 = v15.i32[0];
      }
      if (!v16) {
        unsigned int v10 = v13;
      }
    }
    goto LABEL_4;
  }
  unsigned int v10 = v13;
LABEL_16:
  if (!v10) {
    return 0;
  }
  unsigned int v17 = *(_DWORD *)(a5 + 8);
  if (v17 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a5 + 4 * v17) = v10;
  unsigned int v18 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v18;
  uint64_t v19 = *(void *)(a1 + 232);
  uint64_t v20 = a4 & ~*(void *)(v19 + 8 * v10);
  if (v20)
  {
    while (v31)
    {
      uint64_t v21 = 0;
      unint64_t v23 = v32;
      uint64_t v24 = 4 * v31;
      signed int v25 = 0x80000000;
      while (1)
      {
        uint64_t v26 = *(void *)(v19 + 8 * *v23);
        if (v26 == v20) {
          break;
        }
        uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)(v26 & v20));
        v27.i16[0] = vaddlv_u8(v27);
        __int32 v28 = v27.i32[0];
        uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)(v26 & ~v20));
        v29.i16[0] = vaddlv_u8(v29);
        if (v28 - v29.i32[0] > v25)
        {
          uint64_t v21 = *v23;
          signed int v25 = v28 - v29.i32[0];
        }
        ++v23;
        v24 -= 4;
        if (!v24) {
          goto LABEL_31;
        }
      }
      uint64_t v21 = *v23;
LABEL_31:
      if (v21)
      {
        if (v18 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a5 + 4 * v18) = v21;
        unsigned int v18 = *(_DWORD *)(a5 + 8) + 1;
        *(_DWORD *)(a5 + 8) = v18;
        uint64_t v19 = *(void *)(a1 + 232);
        uint64_t v30 = *(void *)(v19 + 8 * v21);
        uint64_t v21 = 1;
        v20 &= ~v30;
        if (v20) {
          continue;
        }
      }
      return v21;
    }
    return 0;
  }
  return 1;
}

uint64_t llvm::TargetRegisterInfo::lookThruCopyLike(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = a2;
  do
  {
    if ((result & 0x80000000) != 0) {
      uint64_t v4 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (result & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v4 = (uint64_t *)(*(void *)(a3 + 272) + 8 * result);
    }
    uint64_t v5 = *v4;
    if ((*(unsigned char *)(v5 + 3) & 1) == 0) {
      uint64_t v5 = *(void *)(v5 + 24);
    }
    uint64_t v6 = *(void *)(v5 + 8);
    int v7 = **(unsigned __int16 **)(v6 + 16);
    if (v7 == 19)
    {
      uint64_t v8 = 1;
    }
    else
    {
      if (v7 != 11) {
        return result;
      }
      uint64_t v8 = 2;
    }
    uint64_t result = *(unsigned int *)(*(void *)(v6 + 32) + 32 * v8 + 4);
  }
  while ((result & 0x80000000) != 0);
  return result;
}

void sub_1CC4B2F10()
{
}

__n128 sub_1CC4B2F24(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F26154E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CC4B2F78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26154E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::raw_ostream *sub_1CC4B2FB0(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  unsigned int v3 = result;
  int v4 = *((_DWORD *)result + 2);
  if (!v4)
  {
    uint64_t v10 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v10) <= 5)
    {
      unsigned int v11 = "$noreg";
      uint64_t v12 = this;
      size_t v13 = 6;
LABEL_9:
      __n128 result = llvm::raw_ostream::write(v12, v11, v13);
      goto LABEL_35;
    }
    *(_WORD *)(v10 + 4) = 26469;
    *(_DWORD *)uint64_t v10 = 1919905316;
    uint64_t v33 = *((void *)this + 4) + 6;
LABEL_62:
    *((void *)this + 4) = v33;
    goto LABEL_35;
  }
  if (v4 >= 0x40000000)
  {
    uint64_t v5 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v5) > 2)
    {
      *(unsigned char *)(v5 + 2) = 35;
      *(_WORD *)uint64_t v5 = 21331;
      *((void *)this + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(this, "SS#", 3uLL);
    }
    int v6 = *((_DWORD *)v3 + 2) - 0x40000000;
    unint64_t v7 = v6;
    if (v6 < 0)
    {
      unint64_t v7 = -(uint64_t)v6;
      uint64_t v8 = this;
      int v9 = 1;
LABEL_34:
      __n128 result = sub_1CD098D14(v8, v7, 0, 0, v9);
      goto LABEL_35;
    }
LABEL_33:
    uint64_t v8 = this;
    int v9 = 0;
    goto LABEL_34;
  }
  if (v4 < 0)
  {
    uint64_t v15 = *((void *)result + 4);
    if (!v15
      || (unsigned int v16 = v4 & 0x7FFFFFFF, v16 >= *(_DWORD *)(v15 + 72))
      || ((v17 = *(void *)(v15 + 64) + 24 * v16, char v18 = *(unsigned char *)(v17 + 23), v18 >= 0)
        ? (uint64_t v19 = (const char *)v17)
        : (uint64_t v19 = *(const char **)v17),
          v18 >= 0 ? (size_t v20 = v18 & 0x7F) : (size_t v20 = *(void *)(v17 + 8)),
          !v20))
    {
      int v22 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v22 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 37);
      }
      else
      {
        *((void *)this + 4) = v22 + 1;
        *int v22 = 37;
      }
      unint64_t v7 = *((_DWORD *)v3 + 2) & 0x7FFFFFFF;
      goto LABEL_33;
    }
    uint64_t v21 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v21 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 37);
    }
    else
    {
      *((void *)this + 4) = v21 + 1;
      unsigned char *v21 = 37;
    }
    unsigned int v32 = (void *)*((void *)this + 4);
    if (v20 > *((void *)this + 3) - (void)v32)
    {
      uint64_t v12 = this;
      unsigned int v11 = v19;
      size_t v13 = v20;
      goto LABEL_9;
    }
    __n128 result = (llvm::raw_ostream *)memcpy(v32, v19, v20);
    uint64_t v33 = *((void *)this + 4) + v20;
    goto LABEL_62;
  }
  if (!*((void *)result + 2))
  {
    int8x8_t v14 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v14 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 36);
    }
    else
    {
      *((void *)this + 4) = v14 + 1;
      *int8x8_t v14 = 36;
    }
    unint64_t v23 = (_DWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v23 > 6uLL)
    {
      *(_DWORD *)((char *)v23 + 3) = 1734701683;
      *unint64_t v23 = 1937336432;
      *((void *)this + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(this, "physreg", 7uLL);
    }
    unint64_t v7 = *((unsigned int *)v3 + 2);
    goto LABEL_33;
  }
  unsigned int v31 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v31 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 36);
  }
  else
  {
    *((void *)this + 4) = v31 + 1;
    unsigned char *v31 = 36;
  }
  uint64_t v34 = *((void *)v3 + 2);
  uint64_t v35 = *(void *)(v34 + 72);
  uint64_t v36 = *(unsigned int *)(*(void *)(v34 + 8) + 24 * *((unsigned int *)v3 + 2));
  uint64_t v37 = (llvm::raw_ostream *)(v35 + v36);
  if (v35) {
    size_t v38 = strlen((const char *)(v35 + v36));
  }
  else {
    size_t v38 = 0;
  }
  __n128 result = llvm::printLowerCase(v37, v38, this);
LABEL_35:
  if (*((_DWORD *)v3 + 6))
  {
    if (*((void *)v3 + 2))
    {
      uint64_t v24 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v24 >= *((void *)this + 3))
      {
        __n128 result = llvm::raw_ostream::write(this, 58);
      }
      else
      {
        *((void *)this + 4) = v24 + 1;
        *uint64_t v24 = 58;
      }
      uint64_t v27 = *(void *)(*((void *)v3 + 2) + 224);
      unsigned int v28 = *((_DWORD *)v3 + 6) - 1;
      uint8x8_t v29 = *(const void **)(v27 + 8 * v28);
      if (v29)
      {
        unint64_t v30 = strlen(*(const char **)(v27 + 8 * v28));
        __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
        if (v30 <= *((void *)this + 3) - (void)result)
        {
          if (v30)
          {
            __n128 result = (llvm::raw_ostream *)memcpy(result, v29, v30);
            *((void *)this + 4) += v30;
          }
        }
        else
        {
          return llvm::raw_ostream::write(this, (const char *)v29, v30);
        }
      }
    }
    else
    {
      uint64_t v25 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v25) > 4)
      {
        *(unsigned char *)(v25 + 4) = 40;
        *(_DWORD *)uint64_t v25 = 1651864378;
        *((void *)this + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(this, ":sub(", 5uLL);
      }
      __n128 result = sub_1CD098D14(this, *((unsigned int *)v3 + 6), 0, 0, 0);
      uint64_t v26 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v26 >= *((void *)this + 3))
      {
        return llvm::raw_ostream::write(this, 41);
      }
      else
      {
        *((void *)this + 4) = v26 + 1;
        *uint64_t v26 = 41;
      }
    }
  }
  return result;
}

void sub_1CC4B3400()
{
}

__n128 sub_1CC4B3414(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2615528;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC4B3460(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2615528;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::raw_ostream *sub_1CC4B3490(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  unsigned int v3 = result;
  uint64_t v4 = *((void *)result + 2);
  if (v4)
  {
    uint64_t v5 = *((unsigned int *)result + 2);
    if (v5 < *(_DWORD *)(v4 + 44))
    {
      int v6 = (unsigned __int16 *)(*(void *)(v4 + 48) + 4 * v5);
      unsigned int v7 = v6[1];
      uint64_t v8 = *(void *)(v4 + 72);
      if (v8)
      {
        int v9 = (const char *)(v8 + *(unsigned int *)(*(void *)(v4 + 8) + 24 * *v6));
        unint64_t v10 = strlen(v9);
        __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
        if (v10 <= *((void *)this + 3) - (void)result)
        {
          if (v10)
          {
            __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v10);
            *((void *)this + 4) += v10;
          }
        }
        else
        {
          __n128 result = llvm::raw_ostream::write(this, v9, v10);
        }
      }
      if (v7)
      {
        unsigned int v11 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v11 >= *((void *)this + 3))
        {
          __n128 result = llvm::raw_ostream::write(this, 126);
        }
        else
        {
          *((void *)this + 4) = v11 + 1;
          *unsigned int v11 = 126;
        }
        uint64_t v18 = *((void *)v3 + 2);
        uint64_t v19 = *(void *)(v18 + 72);
        if (v19)
        {
          size_t v20 = (const char *)(v19 + *(unsigned int *)(*(void *)(v18 + 8) + 24 * v7));
          unint64_t v21 = strlen(v20);
          __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
          if (v21 <= *((void *)this + 3) - (void)result)
          {
            if (v21)
            {
              __n128 result = (llvm::raw_ostream *)memcpy(result, v20, v21);
              *((void *)this + 4) += v21;
            }
          }
          else
          {
            return llvm::raw_ostream::write(this, v20, v21);
          }
        }
      }
      return result;
    }
    unsigned int v16 = (void *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v16 <= 7uLL)
    {
      size_t v13 = "BadUnit~";
      int8x8_t v14 = this;
      size_t v15 = 8;
      goto LABEL_13;
    }
    *unsigned int v16 = 0x7E74696E55646142;
    uint64_t v22 = *((void *)this + 4) + 8;
LABEL_27:
    *((void *)this + 4) = v22;
    goto LABEL_14;
  }
  uint64_t v12 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v12) > 4)
  {
    *(unsigned char *)(v12 + 4) = 126;
    *(_DWORD *)uint64_t v12 = 1953066581;
    uint64_t v22 = *((void *)this + 4) + 5;
    goto LABEL_27;
  }
  size_t v13 = "Unit~";
  int8x8_t v14 = this;
  size_t v15 = 5;
LABEL_13:
  llvm::raw_ostream::write(v14, v13, v15);
LABEL_14:
  unint64_t v17 = *((unsigned int *)v3 + 2);

  return sub_1CD098D14(this, v17, 0, 0, 0);
}

void sub_1CC4B36D4()
{
}

__n128 sub_1CC4B36E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2615570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC4B3734(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2615570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::raw_ostream *sub_1CC4B3764(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if ((v4 & 0x80000000) != 0)
  {
    int v6 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v6 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 37);
    }
    else
    {
      *((void *)this + 4) = v6 + 1;
      *int v6 = 37;
    }
    unint64_t v7 = *(_DWORD *)(a1 + 8) & 0x7FFFFFFF;
    return sub_1CD098D14(this, v7, 0, 0, 0);
  }
  else
  {
    v8[2] = *(void *)(a1 + 16);
    int v9 = (llvm::raw_ostream *)v8;
    v8[0] = &unk_1F2615528;
    v8[1] = v4;
    sub_1CC4B3490((llvm::raw_ostream *)v8, this);
    __n128 result = v9;
    if (v9 == (llvm::raw_ostream *)v8)
    {
      return (llvm::raw_ostream *)(*(uint64_t (**)(void *))(v8[0] + 32))(v8);
    }
    else if (v9)
    {
      return (llvm::raw_ostream *)(*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

void sub_1CC4B38D8()
{
}

__n128 sub_1CC4B38EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F26155B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CC4B3940(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26155B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CC4B3978(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 16) + 24) + 16 * (*(_DWORD *)(a1 + 8) & 0x7FFFFFFF));
  uint64_t v4 = (void *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) == 0 && v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 80);
    int v6 = (const char *)(v5 + *(unsigned int *)(*v4 + 16));
    v11[0] = v6;
    if (!v5)
    {
      int v6 = 0;
LABEL_16:
      v11[1] = v6;
      llvm::StringRef::lower((llvm::StringRef *)v11, __p);
      if (v13 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      if (v13 >= 0) {
        size_t v10 = v13 & 0x7F;
      }
      else {
        size_t v10 = (size_t)__p[1];
      }
      llvm::raw_ostream::write(this, (const char *)v9, v10);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      return;
    }
LABEL_15:
    int v6 = (const char *)strlen(v6);
    goto LABEL_16;
  }
  if (v4) {
    BOOL v7 = (*(void *)(*(void *)(*(void *)(a1 + 16) + 24) + 16 * (*(_DWORD *)(a1 + 8) & 0x7FFFFFFF)) & 4) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    int v6 = (const char *)v4[1];
    v11[0] = v6;
    if (!v6) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v8 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v8)
  {
    llvm::raw_ostream::write(this, "_", 1uLL);
  }
  else
  {
    unsigned char *v8 = 95;
    ++*((void *)this + 4);
  }
}

uint64_t sub_1CC4B3AA4()
{
  int v4 = 1;
  *(void *)&long long v3 = "A threshold of live range size which may cause high compile time cost in global splitting.";
  *((void *)&v3 + 1) = 90;
  int v1 = 5000;
  uint64_t v2 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCD75B8, "huge-size-for-split", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD75B8, &dword_1CB82C000);
}

BOOL llvm::TargetSchedModel::hasInstrSchedModel(llvm::TargetSchedModel *this)
{
  return byte_1EBD06248 && *((void *)this + 5) != 0;
}

BOOL llvm::TargetSchedModel::hasInstrItineraries(llvm::TargetSchedModel *this)
{
  return byte_1EBD06308 && *((void *)this + 21) != 0;
}

void llvm::TargetSchedModel::init(llvm::TargetSchedModel *this, const llvm::TargetSubtargetInfo *a2)
{
  *((void *)this + 22) = a2;
  uint64_t v3 = *((void *)a2 + 20);
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v5 = *(_OWORD *)(v3 + 32);
  long long v6 = *(_OWORD *)(v3 + 48);
  *((void *)this + 8) = *(void *)(v3 + 64);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  *(_OWORD *)this = *(_OWORD *)v3;
  *((void *)this + 23) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)a2 + 104))(a2);
  uint64_t v7 = *((void *)this + 22);
  uint64_t v8 = *(long long **)(v7 + 160);
  uint64_t v9 = *(void *)(v7 + 184);
  long long v10 = *(long long *)((char *)v8 + 56);
  long long v11 = *(_OWORD *)(v7 + 168);
  uint64_t v12 = *((void *)v8 + 6);
  long long v13 = v8[2];
  long long v14 = *v8;
  *(_OWORD *)((char *)this + 88) = v8[1];
  *(_OWORD *)((char *)this + 104) = v13;
  *((void *)this + 15) = v12;
  *(_OWORD *)((char *)this + 72) = v14;
  *((_OWORD *)this + 8) = v10;
  *((_OWORD *)this + 9) = v11;
  *((void *)this + 20) = v9;
  *((void *)this + 21) = v10;
  uint64_t v15 = *((unsigned int *)this + 12);
  unsigned int v16 = *((_DWORD *)this + 50);
  if (v16 != v15)
  {
    if (v16 <= v15)
    {
      if (*((_DWORD *)this + 51) < v15) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v16 != v15) {
        bzero((void *)(*((void *)this + 24) + 4 * v16), 4 * (v15 - v16));
      }
    }
    *((_DWORD *)this + 50) = v15;
  }
  unint64_t v17 = *(unsigned int *)this;
  *((_DWORD *)this + 69) = v17;
  if (v15)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *((void *)this + 4);
    unint64_t v20 = v17;
    do
    {
      uint64_t v21 = *(unsigned int *)(v19 + 32 * v18 + 8);
      if (v21)
      {
        unint64_t v22 = v20;
        unint64_t v23 = *(unsigned int *)(v19 + 32 * v18 + 8);
        do
        {
          unint64_t v24 = v23;
          unint64_t v23 = v22 % v23;
          unint64_t v22 = v24;
        }
        while (v23);
        unint64_t v25 = v21 * v20 / v24;
        unint64_t v20 = v25;
        *((_DWORD *)this + 69) = v25;
      }
      ++v18;
    }
    while (v18 != v15);
    *((_DWORD *)this + 68) = v20 / v17;
    uint64_t v26 = (unsigned int *)*((void *)this + 24);
    uint64_t v27 = (unsigned int *)(v19 + 8);
    do
    {
      unsigned int v29 = *v27;
      v27 += 8;
      unsigned int v28 = v29;
      if (v29) {
        unsigned int v28 = *((_DWORD *)this + 69) / v28;
      }
      *v26++ = v28;
      --v15;
    }
    while (v15);
  }
  else
  {
    *((_DWORD *)this + 68) = 1;
  }
}

uint64_t llvm::TargetSchedModel::mustBeginGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!byte_1EBD06248) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    return 0;
  }
  if (!a3)
  {
    a3 = v4 + 24 * *(unsigned __int16 *)(*(void *)(a2 + 16) + 6);
    if ((*(_WORD *)(a3 + 8) & 0x1FFF) == 0x1FFE)
    {
      do
      {
        unsigned int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 200))(*(void *)(a1 + 176));
        uint64_t v10 = *(void *)(a1 + 40);
      }
      while ((*(_WORD *)(v10 + 24 * v9 + 8) & 0x1FFF) == 0x1FFE);
      a3 = v10 + 24 * v9;
    }
  }
  unsigned int v5 = *(unsigned __int16 *)(a3 + 8);
  BOOL v6 = (~v5 & 0x1FFF) == 0;
  unsigned int v7 = (v5 >> 13) & 1;
  if (v6) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t llvm::TargetSchedModel::resolveSchedClass(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2)
{
  uint64_t result = *((void *)this + 5) + 24 * *(unsigned __int16 *)(*((void *)a2 + 2) + 6);
  if ((*(_WORD *)(result + 8) & 0x1FFF) == 0x1FFE)
  {
    do
    {
      unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 22) + 200))(*((void *)this + 22));
      uint64_t v5 = *((void *)this + 5);
    }
    while ((*(_WORD *)(v5 + 24 * v4 + 8) & 0x1FFF) == 0x1FFE);
    return v5 + 24 * v4;
  }
  return result;
}

uint64_t llvm::TargetSchedModel::getNumMicroOps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (byte_1EBD06308 && (uint64_t v5 = *(void *)(a1 + 168)) != 0)
  {
    int v14 = *(__int16 *)(v5 + 10 * *(unsigned __int16 *)(*(void *)(a2 + 16) + 6));
    if (v14 < 0)
    {
      uint64_t v15 = *(uint64_t (**)(void))(**(void **)(a1 + 184) + 936);
      return v15();
    }
    else
    {
      return (unsigned __int16)v14;
    }
  }
  else
  {
    if (!byte_1EBD06248) {
      goto LABEL_11;
    }
    uint64_t v6 = *(void *)(a1 + 40);
    if (!v6) {
      goto LABEL_11;
    }
    if (!a3)
    {
      a3 = v6 + 24 * *(unsigned __int16 *)(*(void *)(a2 + 16) + 6);
      if ((*(_WORD *)(a3 + 8) & 0x1FFF) == 0x1FFE)
      {
        do
        {
          unsigned int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 200))(*(void *)(a1 + 176));
          uint64_t v9 = *(void *)(a1 + 40);
        }
        while ((*(_WORD *)(v9 + 24 * v8 + 8) & 0x1FFF) == 0x1FFE);
        a3 = v9 + 24 * v8;
      }
    }
    uint64_t result = *(_WORD *)(a3 + 8) & 0x1FFF;
    if (result == 0x1FFF)
    {
LABEL_11:
      uint64_t v10 = *(unsigned __int16 **)(a2 + 16);
      int v11 = *v10;
      return ((v11 - 9) > 0x3C || ((1 << (v11 - 9)) & 0x1000000000000605) == 0)
          && v11 != 0
          && (v10[4] & 0x10) == 0;
    }
  }
  return result;
}

uint64_t llvm::TargetSchedModel::computeOperandLatency(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2, uint64_t a3, const llvm::MachineInstr *a4, uint64_t a5)
{
  unsigned int v5 = a5;
  unsigned int v7 = a3;
  if (byte_1EBD06248)
  {
    uint64_t v10 = *((void *)this + 5);
    if (v10)
    {
      if (!byte_1EBD06308 || (uint64_t v11 = *((void *)this + 21)) == 0)
      {
        uint64_t v12 = (_WORD *)(v10 + 24 * *(unsigned __int16 *)(*((void *)a2 + 2) + 6));
        if ((v12[4] & 0x1FFF) == 0x1FFE)
        {
          do
          {
            unsigned int v50 = (*(uint64_t (**)(void))(**((void **)this + 22) + 200))(*((void *)this + 22));
            uint64_t v10 = *((void *)this + 5);
          }
          while ((*(_WORD *)(v10 + 24 * v50 + 8) & 0x1FFF) == 0x1FFE);
          uint64_t v12 = (_WORD *)(v10 + 24 * v50);
        }
        unsigned int v13 = 0;
        if (v7)
        {
          int v14 = (unsigned int *)*((void *)a2 + 4);
          uint64_t v15 = v7;
          do
          {
            unsigned int v16 = *v14;
            v14 += 8;
            int v17 = HIBYTE(v16) & 1;
            if ((_BYTE)v16) {
              int v18 = 0;
            }
            else {
              int v18 = v17;
            }
            v13 += v18;
            --v15;
          }
          while (v15);
        }
        if (v13 < (unsigned __int16)v12[8])
        {
          uint64_t v19 = (__int16 *)(*(void *)(*((void *)this + 22) + 144) + 4 * (v13 + (unsigned __int16)v12[7]));
          int v20 = *v19;
          if (v20 < 0) {
            uint64_t v21 = 1000;
          }
          else {
            uint64_t v21 = v20;
          }
          if (a4)
          {
            int v22 = (unsigned __int16)v19[1];
            unint64_t v23 = (_WORD *)(v10 + 24 * *(unsigned __int16 *)(*((void *)a4 + 2) + 6));
            if ((v23[4] & 0x1FFF) == 0x1FFE)
            {
              do
              {
                unsigned int v51 = (*(uint64_t (**)(void))(**((void **)this + 22) + 200))(*((void *)this + 22));
                uint64_t v52 = *((void *)this + 5);
              }
              while ((*(_WORD *)(v52 + 24 * v51 + 8) & 0x1FFF) == 0x1FFE);
              unint64_t v23 = (_WORD *)(v52 + 24 * v51);
            }
            uint64_t v24 = (unsigned __int16)v23[10];
            if (v23[10])
            {
              unsigned int v25 = 0;
              if (v5)
              {
                uint64_t v26 = (int *)*((void *)a4 + 4);
                uint64_t v27 = v5;
                do
                {
                  int v29 = *v26;
                  v26 += 8;
                  char v28 = v29;
                  int v30 = v29 & 0x10FFF00;
                  if ((v29 & 0x310000FF) == 0 && v30 != 0x1000000 || v28 == 7) {
                    ++v25;
                  }
                  --v27;
                }
                while (v27);
              }
              uint64_t v33 = (unsigned int *)(*(void *)(*((void *)this + 22) + 152) + 12 * (unsigned __int16)v23[9] + 8);
              uint64_t v34 = 12 * v24;
              while (1)
              {
                unsigned int v35 = *(v33 - 2);
                if (v35 >= v25)
                {
                  if (v35 > v25) {
                    goto LABEL_38;
                  }
                  int v36 = *(v33 - 1);
                  if (!v36 || v36 == v22) {
                    break;
                  }
                }
                v33 += 3;
                v34 -= 12;
                if (!v34)
                {
LABEL_38:
                  unsigned int v38 = 0;
                  goto LABEL_62;
                }
              }
              unsigned int v38 = *v33;
LABEL_62:
              if (v21 >= v38 || (int)v38 <= 0) {
                return v21 - v38;
              }
              else {
                return 0;
              }
            }
          }
          return v21;
        }
        unint64_t v44 = (unsigned __int16 *)*((void *)a2 + 2);
        int v45 = *v44;
        BOOL v47 = (v45 - 9) <= 0x3C && ((1 << (v45 - 9)) & 0x1000000000000605) != 0
           || v45 == 0;
        if (!v47 && (v44[4] & 0x10) == 0) {
          goto LABEL_57;
        }
        return 0;
      }
LABEL_41:
      if (a4)
      {
        uint64_t v21 = (*(uint64_t (**)(void, char *, const llvm::MachineInstr *, uint64_t, const llvm::MachineInstr *, uint64_t))(**((void **)this + 23) + 952))(*((void *)this + 23), (char *)this + 72, a2, a3, a4, a5);
        if ((v21 & 0x80000000) == 0) {
          return v21;
        }
      }
      else
      {
        uint64_t v39 = v11 + 10 * *(unsigned __int16 *)(*((void *)a2 + 2) + 6);
        unsigned int v40 = *(unsigned __int16 *)(v39 + 8);
        unsigned int v41 = *(unsigned __int16 *)(v39 + 6) + a3;
        if (v41 < v40)
        {
          uint64_t v21 = *(unsigned int *)(*((void *)this + 19) + 4 * v41);
          if ((v21 & 0x80000000) == 0) {
            return v21;
          }
        }
      }
      unsigned int v42 = (*(uint64_t (**)(void, char *, const llvm::MachineInstr *, void))(**((void **)this + 23)
                                                                                          + 960))(*((void *)this + 23), (char *)this + 72, a2, 0);
      LODWORD(result) = llvm::TargetInstrInfo::defaultDefLatency(*((void *)this + 23), (uint64_t)this, (uint64_t)a2);
      if (v42 <= result) {
        return result;
      }
      else {
        return v42;
      }
    }
  }
  if (byte_1EBD06308)
  {
    uint64_t v11 = *((void *)this + 21);
    if (v11) {
      goto LABEL_41;
    }
  }
LABEL_57:
  uint64_t v48 = *((void *)this + 23);

  return llvm::TargetInstrInfo::defaultDefLatency(v48, (uint64_t)this, (uint64_t)a2);
}

uint64_t llvm::TargetSchedModel::computeInstrLatency(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 *)(a2 + 16);
  if (!*(_WORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = result;
  LODWORD(result) = 0;
  unsigned int v4 = (__int16 *)(*(void *)(*(void *)(v3 + 176) + 144) + 4 * *(unsigned __int16 *)(a2 + 14));
  while (1)
  {
    int v6 = *v4;
    v4 += 2;
    int v5 = v6;
    if (v6 < 0) {
      break;
    }
    if ((int)result <= v5) {
      uint64_t result = v5;
    }
    else {
      uint64_t result = result;
    }
    if (!--v2)
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
      return 1000;
    }
  }
  return 1000;
}

uint64_t llvm::TargetSchedModel::computeInstrLatency(llvm::TargetSchedModel *this, unsigned int a2)
{
  LODWORD(result) = llvm::MCSchedModel::computeInstrLatency((uint64_t)this, *((void *)this + 22), *(unsigned __int16 *)(*(void *)(*((void *)this + 23) + 8) + 48 * a2 + 6));
  if ((int)result < 0) {
    return 1000;
  }
  else {
    return result;
  }
}

uint64_t llvm::TargetSchedModel::computeInstrLatency(void *a1, unsigned int *a2)
{
  if (byte_1EBD06248 && a1[5]) {
    LODWORD(result) = llvm::MCSchedModel::computeInstrLatency((uint64_t)a1, (void *)a1[22], (void *)(a1[23] + 8), a2);
  }
  else {
    LODWORD(result) = llvm::MCSchedModel::computeInstrLatency((uint64_t)a1, a1[22], *(unsigned __int16 *)(*(void *)(a1[23] + 8) + 48 * *a2 + 6));
  }
  if ((int)result < 0) {
    return 1000;
  }
  else {
    return result;
  }
}

uint64_t llvm::TargetSchedModel::computeInstrLatency(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2, char a3)
{
  if (byte_1EBD06308 && *((void *)this + 21)) {
    goto LABEL_28;
  }
  int v5 = (_WORD *)*((void *)a2 + 2);
  if (*v5 == 20) {
    goto LABEL_28;
  }
  if (!byte_1EBD06248)
  {
    if (a3)
    {
LABEL_25:
      uint64_t v15 = *((void *)this + 23);
      return llvm::TargetInstrInfo::defaultDefLatency(v15, (uint64_t)this, (uint64_t)a2);
    }
LABEL_28:
    unsigned int v16 = *(uint64_t (**)(void))(**((void **)this + 23) + 960);
    return v16();
  }
  uint64_t v6 = *((void *)this + 5);
  if (!v6 && (a3 & 1) == 0) {
    goto LABEL_28;
  }
  if (!v6) {
    goto LABEL_25;
  }
  unsigned int v7 = (_WORD *)(v6 + 24 * (unsigned __int16)v5[3]);
  if ((v7[4] & 0x1FFF) == 0x1FFE)
  {
    do
    {
      unsigned int v13 = (*(uint64_t (**)(void))(**((void **)this + 22) + 200))(*((void *)this + 22));
      uint64_t v14 = *((void *)this + 5);
    }
    while ((*(_WORD *)(v14 + 24 * v13 + 8) & 0x1FFF) == 0x1FFE);
    unsigned int v7 = (_WORD *)(v14 + 24 * v13);
  }
  if ((~(unsigned __int16)v7[4] & 0x1FFF) == 0) {
    goto LABEL_25;
  }
  uint64_t v8 = (unsigned __int16)v7[8];
  if (!v7[8]) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v10 = (__int16 *)(*(void *)(*((void *)this + 22) + 144) + 4 * (unsigned __int16)v7[7]);
  while (1)
  {
    int v12 = *v10;
    v10 += 2;
    int v11 = v12;
    if (v12 < 0) {
      break;
    }
    if ((int)result <= v11) {
      uint64_t result = v11;
    }
    else {
      uint64_t result = result;
    }
    if (!--v8)
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
      return 1000;
    }
  }
  return 1000;
}

uint64_t llvm::TargetSchedModel::computeOutputLatency(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2, unsigned int a3, const llvm::MachineInstr *a4)
{
  if (*((_DWORD *)this + 1) < 2u) {
    return 1;
  }
  unsigned int v5 = *(_DWORD *)(*((void *)a2 + 4) + 32 * a3 + 4);
  uint64_t MF = llvm::MachineInstr::getMF(a2);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(MF + 16) + 176))(*(void *)(MF + 16));
  if (llvm::MachineInstr::findRegisterUseOperandIdx((uint64_t)a4, v5, 0, v8) == -1
    && (*(unsigned int (**)(void, const llvm::MachineInstr *))(**((void **)this + 23) + 768))(*((void *)this + 23), a4))
  {
    return llvm::TargetSchedModel::computeInstrLatency(this, a2, 1);
  }
  else
  {
    if (byte_1EBD06248)
    {
      if (*((void *)this + 5))
      {
        uint64_t v9 = (unsigned __int16 *)llvm::TargetSchedModel::resolveSchedClass(this, a2);
        if ((~v9[4] & 0x1FFF) != 0)
        {
          if (v9[6])
          {
            uint64_t v10 = (unsigned __int16 *)(*(void *)(*((void *)this + 22) + 136) + 4 * v9[5]);
            uint64_t v11 = 4 * v9[6];
            uint64_t result = 0;
            while (*(_DWORD *)(*((void *)this + 4) + 32 * *v10 + 16))
            {
              v10 += 2;
              v11 -= 4;
              if (!v11) {
                return result;
              }
            }
            return 1;
          }
        }
      }
    }
    return 0;
  }
}

double llvm::TargetSchedModel::computeReciprocalThroughput(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2, double a3, double a4)
{
  if (byte_1EBD06308 && *((void *)this + 21))
  {
    unsigned int v6 = *(unsigned __int16 *)(*((void *)a2 + 2) + 6);
    return llvm::MCSchedModel::getReciprocalThroughput(v6, (uint64_t)this + 72);
  }
  else if (byte_1EBD06248 && (uint64_t v8 = *((void *)this + 5)) != 0)
  {
    uint64_t v9 = *((void *)this + 22);
    uint64_t v10 = *(unsigned __int16 *)(*((void *)a2 + 2) + 6);
    uint64_t v11 = (_WORD *)(v8 + 24 * v10);
    if ((v11[4] & 0x1FFF) == 0x1FFE)
    {
      do
      {
        uint64_t v10 = (*(uint64_t (**)(void, uint64_t, const llvm::MachineInstr *, llvm::TargetSchedModel *))(**((void **)this + 22) + 200))(*((void *)this + 22), v10, a2, this);
        uint64_t v12 = *((void *)this + 5);
      }
      while ((*(_WORD *)(v12 + 24 * v10 + 8) & 0x1FFF) == 0x1FFE);
      uint64_t v11 = (_WORD *)(v12 + 24 * v10);
    }
    return llvm::MCSchedModel::getReciprocalThroughput(v9, v11, a3, a4);
  }
  else
  {
    return 0.0;
  }
}

double llvm::TargetSchedModel::computeReciprocalThroughput(llvm::TargetSchedModel *this, unsigned int a2, double a3, double a4)
{
  if (byte_1EBD06308 && *((void *)this + 21)) {
    return llvm::MCSchedModel::getReciprocalThroughput(*(unsigned __int16 *)(*(void *)(*((void *)this + 23) + 8) + 48 * a2 + 6), (uint64_t)this + 72);
  }
  if (byte_1EBD06248)
  {
    uint64_t v5 = *((void *)this + 5);
    if (v5)
    {
      if ((~*(unsigned __int16 *)(v5
                                 + 24
                                 * *(unsigned __int16 *)(*(void *)(*((void *)this + 23) + 8) + 48 * a2 + 6)
                                 + 8) & 0x1FFE) != 0)
        return llvm::MCSchedModel::getReciprocalThroughput(*((void *)this + 22), (_WORD *)(v5 + 24 * *(unsigned __int16 *)(*(void *)(*((void *)this + 23) + 8) + 48 * a2 + 6)), a3, a4);
    }
  }
  return 0.0;
}

double llvm::TargetSchedModel::computeReciprocalThroughput(llvm::TargetSchedModel *a1, unsigned int *a2, double a3, double a4)
{
  if (byte_1EBD06248 && *((void *)a1 + 5)) {
    return llvm::MCSchedModel::getReciprocalThroughput((uint64_t)a1, *((void *)a1 + 22), (void *)(*((void *)a1 + 23) + 8), a2, a3, a4);
  }
  else {
    return llvm::TargetSchedModel::computeReciprocalThroughput(a1, *a2, a3, a4);
  }
}

uint64_t sub_1CC4B4A80()
{
  int v4 = 1;
  char v2 = 1;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Use TargetSchedModel for latency lookup";
  v1.n128_u64[1] = 39;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBD061C8, "schedmodel", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD061C8, &dword_1CB82C000);
  int v4 = 1;
  char v2 = 1;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Use InstrItineraryData for latency lookup";
  v1.n128_u64[1] = 41;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBD06288, "scheditins", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD06288, &dword_1CB82C000);
}

void *llvm::TargetSubtargetInfo::TargetSubtargetInfo(uint64_t a1, long long *a2, std::string::value_type *a3, std::string::size_type a4, const std::string::value_type *a5, std::string::size_type a6, const std::string::value_type *a7, std::string::size_type a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result = (void *)llvm::MCSubtargetInfo::MCSubtargetInfo(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  void *result = &unk_1F2615600;
  return result;
}

{
  void *result;

  uint64_t result = (void *)llvm::MCSubtargetInfo::MCSubtargetInfo(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  void *result = &unk_1F2615600;
  return result;
}

uint64_t llvm::TargetSubtargetInfo::enableJoinGlobalCopies(llvm::TargetSubtargetInfo *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 232))();
}

uint64_t llvm::TargetSubtargetInfo::enablePostRAScheduler(llvm::TargetSubtargetInfo *this)
{
  return *(unsigned __int8 *)(*((void *)this + 20) + 24);
}

uint64_t llvm::TargetSubtargetInfo::useAA(llvm::TargetSubtargetInfo *this)
{
  return 0;
}

void sub_1CC4B4C08()
{
}

void llvm::createTypePromotionPass(llvm *this)
{
}

void sub_1CC4B4D4C()
{
}

void sub_1CC4B4DF8(llvm::Pass *this)
{
  *(void *)this = &unk_1F26157C0;
  char v2 = (void *)*((void *)this + 39);
  if (v2 != *((void **)this + 38)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3 != *((void **)this + 26)) {
    free(v3);
  }
  int v4 = (void *)*((void *)this + 7);
  if (v4 != *((void **)this + 6)) {
    free(v4);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC4B4E7C(llvm::Pass *this)
{
  *(void *)this = &unk_1F26157C0;
  char v2 = (void *)*((void *)this + 39);
  if (v2 != *((void **)this + 38)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3 != *((void **)this + 26)) {
    free(v3);
  }
  int v4 = (void *)*((void *)this + 7);
  if (v4 != *((void **)this + 6)) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC4B4F14()
{
  return "Type Promotion";
}

void sub_1CC4B4F24(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CC4B4FA0(uint64_t a1, uint64_t a2)
{
  v477[1] = *MEMORY[0x1E4F143B8];
  char v4 = 0;
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, (llvm::LLVMContextImpl ****)a2) & 1) != 0
    || byte_1EBCD76F8)
  {
    return v4 & 1;
  }
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1);
  if (!AnalysisPass
    || (uint64_t v6 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID)) == 0)
  {
    char v4 = 0;
    return v4 & 1;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(a1 + 56);
  if (v8 == *(void **)(a1 + 48)) {
    goto LABEL_6;
  }
  uint64_t v379 = *(unsigned int *)(a1 + 64);
  if (v379 < 0x21 || 4 * (*(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72)) >= v379)
  {
    memset(v8, 255, 8 * v379);
LABEL_6:
    *(_DWORD *)(a1 + 68) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    goto LABEL_7;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 48));
LABEL_7:
  v400 = (void **)(a1 + 208);
  uint64_t v9 = *(void **)(a1 + 216);
  if (v9 == *(void **)(a1 + 208))
  {
LABEL_8:
    *(_DWORD *)(a1 + 228) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    goto LABEL_9;
  }
  uint64_t v380 = *(unsigned int *)(a1 + 224);
  if (v380 < 0x21 || 4 * (*(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232)) >= v380)
  {
    memset(v9, 255, 8 * v380);
    goto LABEL_8;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear(v400);
LABEL_9:
  v401 = (void **)(a1 + 304);
  uint64_t v10 = *(void **)(a1 + 312);
  if (v10 == *(void **)(a1 + 304))
  {
LABEL_10:
    *(void *)(a1 + 324) = 0;
    goto LABEL_11;
  }
  uint64_t v381 = *(unsigned int *)(a1 + 320);
  if (v381 < 0x21 || 4 * (*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328)) >= v381)
  {
    memset(v10, 255, 8 * v381);
    goto LABEL_10;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear(v401);
LABEL_11:
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 112) + 16))(*(void *)(v7 + 112), a2);
  uint64_t v406 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 120))(v12);
  unsigned int v13 = *(uint64_t **)(a1 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  v399 = (llvm::SmallPtrSetImplBase *)(a1 + 48);
  if (v14 == v15)
  {
LABEL_14:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::TargetTransformInfoWrapperPass::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  int v17 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::TargetTransformInfoWrapperPass::ID);
  uint64_t v18 = *(void *)*llvm::TargetTransformInfoWrapperPass::getTTI(v17, (const Function *)a2);
  *(_DWORD *)(a1 + 40) = (*(uint64_t (**)(void))(v18 + 696))();
  *(void *)(a1 + 32) = **(void **)(a2 + 40);
  uint64_t v19 = a2 + 72;
  uint64_t v20 = *(void *)(a2 + 80);
  if (v20 != a2 + 72)
  {
    char v402 = 0;
    uint64_t v403 = v11 + 272;
    uint64_t v21 = (_DWORD *)(a1 + 68);
    int v22 = (unsigned int *)(a1 + 64);
    uint64_t v404 = a2 + 72;
    while (1)
    {
      uint64_t v23 = v20 - 24;
      if (!v20) {
        uint64_t v23 = 0;
      }
      uint64_t v24 = v23 + 40;
      for (uint64_t i = *(void *)(v23 + 48); i != v24; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v26 = i - 24;
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v28 = *(void *)(a1 + 48);
        uint64_t v27 = *(void *)(a1 + 56);
        if (v27 == v28)
        {
          uint64_t v29 = *v21;
          int v30 = (void *)(v27 + 8 * v29);
          if (v29)
          {
            uint64_t v31 = 0;
            uint64_t v32 = 8 * v29;
            while (*(void *)(v27 + v31) != v26)
            {
              v31 += 8;
              if (v32 == v31) {
                goto LABEL_44;
              }
            }
            int v30 = (void *)(v27 + v31);
          }
LABEL_44:
          uint64_t v28 = *(void *)(a1 + 56);
        }
        else
        {
          uint64_t v33 = *v22;
          int v34 = v33 - 1;
          unsigned int v35 = (v33 - 1) & ((v26 >> 4) ^ (v26 >> 9));
          int v30 = (void *)(v27 + 8 * v35);
          uint64_t v36 = *v30;
          if (*v30 == -1)
          {
            uint64_t v37 = 0;
LABEL_56:
            if (v37) {
              int v30 = v37;
            }
            if (*v30 != v26) {
              int v30 = (void *)(v27 + 8 * v33);
            }
          }
          else
          {
            uint64_t v37 = 0;
            int v38 = 1;
            while (v36 != v26)
            {
              if (v37) {
                BOOL v39 = 0;
              }
              else {
                BOOL v39 = v36 == -2;
              }
              if (v39) {
                uint64_t v37 = v30;
              }
              unsigned int v40 = v35 + v38++;
              unsigned int v35 = v40 & v34;
              int v30 = (void *)(v27 + 8 * (v40 & v34));
              uint64_t v36 = *v30;
              if (*v30 == -1) {
                goto LABEL_56;
              }
            }
          }
        }
        if (v27 == v28) {
          unsigned int v41 = (unsigned int *)(a1 + 68);
        }
        else {
          unsigned int v41 = (unsigned int *)(a1 + 64);
        }
        if (v30 != (void *)(v27 + 8 * *v41)
          || *(unsigned char *)(v26 + 16) != 81
          || (*(_WORD *)(v26 + 18) & 0x3Eu) - 38 < 4
          || *(unsigned char *)(**(void **)(v26 - 64) + 8) != 13)
        {
          continue;
        }
        int v42 = *(_DWORD *)(v26 + 20);
        if ((v42 & 0x40000000) != 0)
        {
          unint64_t v44 = *(llvm::EVT ****)(v26 - 8);
          uint64_t v43 = v42 & 0x7FFFFFF;
          if (!v43) {
            continue;
          }
        }
        else
        {
          uint64_t v43 = v42 & 0x7FFFFFF;
          unint64_t v44 = (llvm::EVT ***)(v26 - 32 * v43);
          if (!v43) {
            continue;
          }
        }
        uint64_t v45 = 32 * v43;
        while (1)
        {
          uint64_t v46 = *v44;
          if (*v44 && *((unsigned __int8 *)*v44 + 16) >= 0x1Cu) {
            break;
          }
          v44 += 4;
          v45 -= 32;
          if (!v45) {
            goto LABEL_87;
          }
        }
        uint64_t v405 = v20;
        unint64_t v48 = sub_1CB87DC14(v406, v403, *v46, 0);
        BOOL v50 = v48;
        uint64_t v51 = v49;
        if ((_BYTE)v48 && *(void *)(v406 + 8 * v48 + 96)
          || (llvm::TargetLoweringBase::getTypeConversion(v406, **(llvm::LLVMContext ***)v26, v48, v49, (uint64_t)&v408),
              v408 != 1))
        {
          uint64_t v19 = v404;
          uint64_t v20 = v405;
          continue;
        }
        llvm::TargetLoweringBase::getTypeConversion(v406, **(llvm::LLVMContext ***)v26, v50, v51, (uint64_t)&v408);
        long long v407 = v409;
        unint64_t v52 = *(unsigned int *)(a1 + 40);
        if ((_BYTE)v409) {
          unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v407);
        }
        else {
          unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v407);
        }
        if (ExtendedSizeInBits > v52) {
          goto LABEL_86;
        }
        if ((_BYTE)v407) {
          uint64_t v54 = sub_1CB87E200((unsigned __int8 *)&v407);
        }
        else {
          uint64_t v54 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v407);
        }
        int v55 = (llvm::LLVMContext *)v54;
        v457 = (unsigned __int8 *)v46;
        uint64_t v56 = *v46;
        *(_DWORD *)(a1 + 28) = llvm::Type::getPrimitiveSizeInBits(v56);
        uint64_t v57 = *(void **)(a1 + 216);
        if (v57 == *(void **)(a1 + 208)) {
          goto LABEL_80;
        }
        uint64_t v59 = *(unsigned int *)(a1 + 224);
        if (v59 < 0x21 || 4 * (*(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232)) >= v59)
        {
          memset(v57, 255, 8 * v59);
LABEL_80:
          *(_DWORD *)(a1 + 228) = 0;
          *(_DWORD *)(a1 + 232) = 0;
          goto LABEL_81;
        }
        llvm::SmallPtrSetImplBase::shrink_and_clear(v400);
LABEL_81:
        char v58 = *(void **)(a1 + 312);
        if (v58 != *(void **)(a1 + 304))
        {
          uint64_t v60 = *(unsigned int *)(a1 + 320);
          if (v60 >= 0x21 && 4 * (*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328)) < v60)
          {
            llvm::SmallPtrSetImplBase::shrink_and_clear(v401);
            goto LABEL_83;
          }
          memset(v58, 255, 8 * v60);
        }
        *(void *)(a1 + 324) = 0;
LABEL_83:
        if (!sub_1CC4B76F8(a1, (uint64_t)v457)
          || !sub_1CC4B7938(a1, v457)
          || !sub_1CC4B79A8(a1, (uint64_t)v457))
        {
          goto LABEL_86;
        }
        v452[1] = 0;
        v452[0] = 0;
        int v453 = 0;
        v455 = 0;
        uint64_t v456 = 0;
        v454 = 0;
        v447[1] = 0;
        v447[0] = 0;
        int v448 = 0;
        v450 = 0;
        uint64_t v451 = 0;
        v449 = 0;
        v442[1] = 0;
        v442[0] = 0;
        int v443 = 0;
        uint64_t v445 = 0;
        uint64_t v446 = 0;
        uint64_t v444 = 0;
        v437[1] = 0;
        v437[0] = 0;
        int v438 = 0;
        v440 = 0;
        uint64_t v441 = 0;
        __p = 0;
        sub_1CBF5F714(v452, &v457);
        uint64_t v61 = v455;
        v395 = v55;
        v391 = v56;
        while (v454 != v455)
        {
          v458 = 0;
          v99 = (unsigned __int8 *)*(v61 - 1);
          sub_1CD58C650((uint64_t)v452);
          v458 = (void **)v99;
          if (v438)
          {
            unsigned int v106 = (v438 - 1) & ((v99 >> 4) ^ (v99 >> 9));
            v107 = *(unsigned __int8 **)(v437[0] + 8 * v106);
            if (v99 == v107) {
              goto LABEL_247;
            }
            int v108 = 1;
            while (v107 != (unsigned __int8 *)-4096)
            {
              unsigned int v109 = v106 + v108++;
              unsigned int v106 = v109 & (v438 - 1);
              v107 = *(unsigned __int8 **)(v437[0] + 8 * v106);
              if (v99 == v107) {
                goto LABEL_247;
              }
            }
          }
          if (v99[16] > 0x1Bu) {
            goto LABEL_171;
          }
          if (sub_1CC4B846C(a1, v99))
          {
            v99 = (unsigned __int8 *)v458;
LABEL_171:
            uint64_t v101 = *(void *)(a1 + 48);
            uint64_t v100 = *(void *)(a1 + 56);
            if (v100 == v101)
            {
              uint64_t v102 = *v21;
              v103 = (unsigned __int8 **)(v100 + 8 * v102);
              if (v102)
              {
                uint64_t v104 = 0;
                uint64_t v105 = 8 * v102;
                while (*(unsigned __int8 **)(v100 + v104) != v99)
                {
                  v104 += 8;
                  if (v105 == v104) {
                    goto LABEL_194;
                  }
                }
                v103 = (unsigned __int8 **)(v100 + v104);
              }
LABEL_194:
              uint64_t v101 = *(void *)(a1 + 56);
            }
            else
            {
              uint64_t v110 = *v22;
              int v111 = v110 - 1;
              unsigned int v112 = (v110 - 1) & ((v99 >> 4) ^ (v99 >> 9));
              v103 = (unsigned __int8 **)(v100 + 8 * v112);
              v113 = *v103;
              if (*v103 == (unsigned __int8 *)-1)
              {
                v114 = 0;
LABEL_254:
                if (v114) {
                  v103 = v114;
                }
                if (*v103 != v99) {
                  v103 = (unsigned __int8 **)(v100 + 8 * v110);
                }
              }
              else
              {
                v114 = 0;
                int v115 = 1;
                while (v113 != v99)
                {
                  if (v114) {
                    BOOL v116 = 0;
                  }
                  else {
                    BOOL v116 = v113 == (unsigned __int8 *)-2;
                  }
                  if (v116) {
                    v114 = v103;
                  }
                  unsigned int v117 = v112 + v115++;
                  unsigned int v112 = v117 & v111;
                  v103 = (unsigned __int8 **)(v100 + 8 * (v117 & v111));
                  v113 = *v103;
                  if (*v103 == (unsigned __int8 *)-1) {
                    goto LABEL_254;
                  }
                }
              }
            }
            if (v100 == v101) {
              v118 = (unsigned int *)(a1 + 68);
            }
            else {
              v118 = (unsigned int *)(a1 + 64);
            }
            if (v103 != (unsigned __int8 **)(v100 + 8 * *v118))
            {
LABEL_279:
              char v62 = 0;
              goto LABEL_712;
            }
            sub_1CBF5F714(v437, &v458);
            v119 = (unsigned __int8 *)v458;
            uint64_t v120 = *(void *)(a1 + 56);
            uint64_t v121 = *(unsigned int *)(a1 + 68);
            if (v120 == *(void *)(a1 + 48))
            {
              if (v121)
              {
                v122 = 0;
                uint64_t v123 = 8 * v121;
                v124 = *(void ****)(a1 + 56);
                while (*v124 != v458)
                {
                  if (*v124 == (void **)-2) {
                    v122 = v124;
                  }
                  ++v124;
                  v123 -= 8;
                  if (!v123)
                  {
                    if (!v122) {
                      goto LABEL_207;
                    }
                    *v122 = v458;
                    --*(_DWORD *)(a1 + 72);
                    goto LABEL_231;
                  }
                }
                goto LABEL_231;
              }
LABEL_207:
              unsigned int v125 = *v22;
              if (v121 < *v22)
              {
                _DWORD *v21 = v121 + 1;
                *(void *)(v120 + 8 * v121) = v119;
LABEL_231:
                v135 = (llvm::IntegerType *)v458;
                if (sub_1CC4B852C(a1, (uint64_t)v458))
                {
                  v408 = v135;
                  sub_1CC27C13C(v442, &v408);
                  v135 = (llvm::IntegerType *)v458;
                }
                if (sub_1CC4B846C(a1, (unsigned __int8 *)v135)) {
                  sub_1CBF5F714(v447, &v458);
                }
                v136 = (unsigned __int8 *)v458;
                if ((sub_1CC4B852C(a1, (uint64_t)v458) & 1) == 0)
                {
                  char v137 = sub_1CC4B846C(a1, v136);
                  v136 = (unsigned __int8 *)v458;
                  if ((v137 & 1) == 0 && v458 && *((unsigned __int8 *)v458 + 16) >= 0x1Cu)
                  {
                    int v140 = *((_DWORD *)v458 + 5);
                    if ((v140 & 0x40000000) != 0)
                    {
                      v142 = (unsigned __int8 *)*(v458 - 1);
                      uint64_t v141 = v140 & 0x7FFFFFF;
                    }
                    else
                    {
                      uint64_t v141 = v140 & 0x7FFFFFF;
                      v142 = (unsigned __int8 *)&v458[-4 * v141];
                    }
                    if (v141)
                    {
                      uint64_t v143 = 32 * v141;
                      do
                      {
                        v144 = *(unsigned char **)v142;
                        v432 = v144;
                        v408 = (llvm::IntegerType *)v144;
                        v462 = 0;
                        if ((sub_1CD420258(v437, &v408, &v462) & 1) == 0 && v144[16] != 62)
                        {
                          if (!sub_1CC4B76F8(a1, (uint64_t)v144)
                            || sub_1CC4B7938(a1, v144) && !sub_1CC4B79A8(a1, (uint64_t)v144))
                          {
                            goto LABEL_279;
                          }
                          sub_1CBF5F714(v452, &v432);
                        }
                        v142 += 32;
                        v143 -= 32;
                      }
                      while (v143);
                      v136 = (unsigned __int8 *)v458;
                    }
                  }
                }
                if ((sub_1CC4B846C(a1, v136) & 1) != 0 || sub_1CC4B7938(a1, (unsigned __int8 *)v458))
                {
                  v138 = v458[1];
                  if (v138)
                  {
                    while (1)
                    {
                      v139 = (unsigned char *)v138[3];
                      v432 = v139;
                      v408 = (llvm::IntegerType *)v139;
                      v462 = 0;
                      if ((sub_1CD420258(v437, &v408, &v462) & 1) == 0 && v139[16] != 62)
                      {
                        if (!sub_1CC4B76F8(a1, (uint64_t)v139)
                          || sub_1CC4B7938(a1, v139) && !sub_1CC4B79A8(a1, (uint64_t)v139))
                        {
                          goto LABEL_279;
                        }
                        sub_1CBF5F714(v452, &v432);
                      }
                      v138 = (void *)v138[1];
                      if (!v138) {
                        goto LABEL_247;
                      }
                    }
                  }
                }
                goto LABEL_247;
              }
            }
            else
            {
              unsigned int v125 = *v22;
            }
            if (3 * v125 <= 4 * ((int)v121 - *(_DWORD *)(a1 + 72)))
            {
              if (v125 >= 0x40) {
                v125 *= 2;
              }
              else {
                unsigned int v125 = 128;
              }
            }
            else if (v125 - v121 >= v125 >> 3)
            {
              goto LABEL_212;
            }
            llvm::SmallPtrSetImplBase::Grow(v399, v125);
            unsigned int v125 = *(_DWORD *)(a1 + 64);
            uint64_t v120 = *(void *)(a1 + 56);
LABEL_212:
            unsigned int v126 = v125 - 1;
            unsigned int v127 = (v125 - 1) & ((v119 >> 4) ^ (v119 >> 9));
            v128 = (unsigned __int8 **)(v120 + 8 * v127);
            v129 = *v128;
            if (*v128 == (unsigned __int8 *)-1)
            {
              v130 = 0;
LABEL_224:
              if (v130) {
                v134 = v130;
              }
              else {
                v134 = v128;
              }
              if (*v134 != v119)
              {
                if (*v134 == (unsigned __int8 *)-2) {
                  --*(_DWORD *)(a1 + 72);
                }
                else {
                  ++*v21;
                }
                *v134 = v119;
              }
            }
            else
            {
              v130 = 0;
              int v131 = 1;
              while (v129 != v119)
              {
                if (v130) {
                  BOOL v132 = 0;
                }
                else {
                  BOOL v132 = v129 == (unsigned __int8 *)-2;
                }
                if (v132) {
                  v130 = v128;
                }
                unsigned int v133 = v127 + v131++;
                unsigned int v127 = v133 & v126;
                v128 = (unsigned __int8 **)(v120 + 8 * (v133 & v126));
                v129 = *v128;
                if (*v128 == (unsigned __int8 *)-1) {
                  goto LABEL_224;
                }
              }
            }
            goto LABEL_231;
          }
LABEL_247:
          uint64_t v61 = v455;
        }
        char v62 = 0;
        v432 = v436;
        v433 = v436;
        uint64_t v434 = 4;
        int v435 = 0;
        v63 = (char *)__p;
        uint64_t v64 = v440;
        if (__p == v440) {
          goto LABEL_710;
        }
        unsigned int v65 = 0;
        unsigned int v66 = 0;
        unsigned int v67 = 4;
        size_t v386 = (size_t)v440;
        do
        {
          uint64_t v68 = *(void *)v63;
          if (*(void *)v63) {
            BOOL v69 = *(unsigned __int8 *)(*(void *)v63 + 16) >= 0x1Cu;
          }
          else {
            BOOL v69 = 0;
          }
          if (!v69) {
            goto LABEL_133;
          }
          uint64_t v70 = *(void *)(v68 + 40);
          int v71 = (char *)v433;
          uint64_t v72 = HIDWORD(v434);
          if (v433 != v432) {
            goto LABEL_112;
          }
          if (!HIDWORD(v434))
          {
LABEL_110:
            if (HIDWORD(v434) < v67)
            {
              ++HIDWORD(v434);
              *((void *)v433 + v72) = v70;
              goto LABEL_133;
            }
LABEL_112:
            if (3 * v67 <= 4 * (HIDWORD(v434) - v435))
            {
              if (v67 >= 0x40) {
                v67 *= 2;
              }
              else {
                unsigned int v67 = 128;
              }
            }
            else if (v67 - HIDWORD(v434) >= v67 >> 3)
            {
              goto LABEL_114;
            }
            unsigned int v388 = v66;
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v432, v67);
            unsigned int v66 = v388;
            uint64_t v64 = (char *)v386;
            unsigned int v67 = v434;
            int v71 = (char *)v433;
LABEL_114:
            unsigned int v76 = v67 - 1;
            unsigned int v77 = (v67 - 1) & ((v70 >> 4) ^ (v70 >> 9));
            v78 = &v71[8 * v77];
            uint64_t v79 = *(void *)v78;
            if (*(void *)v78 == -1)
            {
              v80 = 0;
LABEL_126:
              if (v80) {
                int v84 = v80;
              }
              else {
                int v84 = v78;
              }
              if (*(void *)v84 != v70)
              {
                if (*(void *)v84 == -2) {
                  --v435;
                }
                else {
                  ++HIDWORD(v434);
                }
                *(void *)int v84 = v70;
              }
            }
            else
            {
              v80 = 0;
              int v81 = 1;
              while (v79 != v70)
              {
                if (v80) {
                  BOOL v82 = 0;
                }
                else {
                  BOOL v82 = v79 == -2;
                }
                if (v82) {
                  v80 = v78;
                }
                unsigned int v83 = v77 + v81++;
                unsigned int v77 = v83 & v76;
                v78 = &v71[8 * (v83 & v76)];
                uint64_t v79 = *(void *)v78;
                if (*(void *)v78 == -1) {
                  goto LABEL_126;
                }
              }
            }
            goto LABEL_133;
          }
          __int16 v73 = 0;
          uint64_t v74 = 8 * HIDWORD(v434);
          __int16 v75 = v433;
          while (*v75 != v70)
          {
            if (*v75 == -2) {
              __int16 v73 = v75;
            }
            ++v75;
            v74 -= 8;
            if (!v74)
            {
              if (!v73) {
                goto LABEL_110;
              }
              *__int16 v73 = v70;
              --v435;
              break;
            }
          }
LABEL_133:
          if (!v448) {
            goto LABEL_155;
          }
          unsigned int v85 = (v448 - 1) & ((v68 >> 4) ^ (v68 >> 9));
          uint64_t v86 = *(void *)(v447[0] + 8 * v85);
          if (v68 != v86)
          {
            int v92 = 1;
            while (v86 != -4096)
            {
              unsigned int v93 = v85 + v92++;
              unsigned int v85 = v93 & (v448 - 1);
              uint64_t v86 = *(void *)(v447[0] + 8 * v85);
              if (v68 == v86) {
                goto LABEL_135;
              }
            }
LABEL_155:
            if (v443)
            {
              unsigned int v94 = (v443 - 1) & ((v68 >> 4) ^ (v68 >> 9));
              uint64_t v95 = *(void *)(v442[0] + 8 * v94);
              if (v68 == v95)
              {
                int v96 = 0;
              }
              else
              {
                int v97 = 1;
                while (v95 != -4096)
                {
                  int v96 = 0;
                  unsigned int v98 = v94 + v97++;
                  unsigned int v94 = v98 & (v443 - 1);
                  uint64_t v95 = *(void *)(v442[0] + 8 * v94);
                  uint64_t v64 = (char *)v386;
                  if (v68 == v95) {
                    goto LABEL_159;
                  }
                }
                int v96 = 1;
                uint64_t v64 = (char *)v386;
              }
            }
            else
            {
              int v96 = 1;
            }
LABEL_159:
            v66 += v96;
            goto LABEL_160;
          }
LABEL_135:
          if (v68 && *(unsigned char *)(v68 + 16) == 21)
          {
            uint64_t v87 = *(void *)(*(void *)(v68 + 24) + 112);
            if (!v87 || (uint64_t v88 = (*(_DWORD *)(v68 + 32) + 2), v88 >= *(_DWORD *)(v87 + 8)))
            {
              LODWORD(v89) = 0;
LABEL_140:
              v65 += v89 ^ 1;
              goto LABEL_160;
            }
            uint64_t v90 = v87 + 40;
            uint64_t v91 = *(void *)(v90 + 8 * v88);
            if (!v91 || (*(unsigned char *)(v91 + 20) & 8) == 0)
            {
              uint64_t v89 = *(void *)(v90 + 8 * v88);
              if (v89) {
                LODWORD(v89) = *(unsigned char *)(v89 + 18) & 1;
              }
              goto LABEL_140;
            }
          }
LABEL_160:
          v63 += 8;
        }
        while (v63 != v64);
        if (v66 < 2 || HIDWORD(v434) - v435 == 1 && v65 > *(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328))
        {
          char v62 = 0;
          goto LABEL_710;
        }
        v408 = *(llvm::IntegerType **)(a1 + 32);
        *(void *)&long long v409 = v391;
        DWORD2(v409) = v395;
        v410 = v437;
        v411 = v447;
        v412 = v442;
        uint64_t v413 = a1 + 304;
        v414 = 0;
        v415 = v419;
        v416 = v419;
        uint64_t v417 = 8;
        int v418 = 0;
        v420 = v424;
        v421 = v424;
        uint64_t v422 = 4;
        int v423 = 0;
        v425[0] = 0;
        v425[1] = 0;
        unsigned int v426 = 0;
        v427 = v431;
        v428 = v431;
        uint64_t v429 = 8;
        int v430 = 0;
        v414 = (llvm::UndefValue *)llvm::IntegerType::get(v408, v395);
        v145 = (void **)v412[3];
        uint64_t v389 = v412[4];
        if (v145 != (void **)v389)
        {
          do
          {
            v152 = *v145;
            int v153 = *((unsigned __int8 *)*v145 + 16);
            v396 = (llvm::LLVMContext *)v145;
            if (*v145 && v153 == 84)
            {
              int v154 = v152[5];
              uint64_t v155 = v154 & 0x7FFFFFF;
              v156 = &v152[-8 * v155];
              if (v154 < 0)
              {
                uint64_t v176 = *((void *)v156 - 1);
                if ((v176 & 0xFFFFFFFF0) != 0) {
                  uint64_t v157 = (*(v156 - 3) - *(_DWORD *)((char *)v156 - v176));
                }
                else {
                  uint64_t v157 = 0;
                }
              }
              else
              {
                uint64_t v157 = 0;
              }
              if (v156 != &v152[-8 * v157 - 8])
              {
                uint64_t v392 = 32 * ~v157;
                uint64_t v158 = -32 * v155;
                do
                {
                  v159 = *(uint64_t **)&v152[(unint64_t)v158 / 4];
                  v462 = v152;
                  v160 = sub_1CD58C6BC((uint64_t)v425, (uint64_t *)&v462);
                  uint64_t v161 = *v159;
                  unint64_t v162 = *((unsigned int *)v160 + 4);
                  if (v162 >= *((unsigned int *)v160 + 5)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(v160[1] + 8 * v162) = v161;
                  ++*((_DWORD *)v160 + 4);
                  v158 += 32;
                }
                while (v392 != v158);
              }
            }
            else
            {
              if (v152) {
                BOOL v163 = v153 == 31;
              }
              else {
                BOOL v163 = 0;
              }
              if (v163)
              {
                v462 = *v145;
                v171 = sub_1CD58C6BC((uint64_t)v425, (uint64_t *)&v462);
                int v172 = v152[5];
                if ((v172 & 0x40000000) != 0) {
                  v173 = (uint64_t **)*((void *)v152 - 1);
                }
                else {
                  v173 = (uint64_t **)&v152[-8 * (v172 & 0x7FFFFFF)];
                }
                uint64_t v174 = **v173;
                unint64_t v175 = *((unsigned int *)v171 + 4);
                if (v175 >= *((unsigned int *)v171 + 5)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v171[1] + 8 * v175) = v174;
                ++*((_DWORD *)v171 + 4);
              }
              else if ((v152[5] & 0x7FFFFFF) != 0)
              {
                uint64_t v164 = 0;
                unint64_t v165 = 0;
                do
                {
                  v462 = v152;
                  v166 = sub_1CD58C6BC((uint64_t)v425, (uint64_t *)&v462);
                  int v167 = v152[5];
                  if ((v167 & 0x40000000) != 0) {
                    v168 = (_DWORD *)*((void *)v152 - 1);
                  }
                  else {
                    v168 = &v152[-8 * (v167 & 0x7FFFFFF)];
                  }
                  uint64_t v169 = **(void **)&v168[v164];
                  unint64_t v170 = *((unsigned int *)v166 + 4);
                  if (v170 >= *((unsigned int *)v166 + 5)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(v166[1] + 8 * v170) = v169;
                  ++*((_DWORD *)v166 + 4);
                  ++v165;
                  v164 += 8;
                }
                while (v165 < (v152[5] & 0x7FFFFFFu));
              }
            }
            v145 = (void **)((char *)v396 + 8);
          }
          while ((llvm::LLVMContext *)((char *)v396 + 8) != (llvm::LLVMContext *)v389);
        }
        v146 = (void **)v410[3];
        v147 = (void **)v410[4];
        while (v146 != v147)
        {
          v148 = (uint64_t *)*v146;
          if (*((unsigned char *)*v146 + 16) == 66)
          {
            v462 = *v146;
            v458 = 0;
            if ((sub_1CD420258(v411, &v462, &v458) & 1) == 0)
            {
              v462 = v148;
              v149 = sub_1CD58C6BC((uint64_t)v425, (uint64_t *)&v462);
              uint64_t v150 = *v148;
              unint64_t v151 = *((unsigned int *)v149 + 4);
              if (v151 >= *((unsigned int *)v149 + 5)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(v149[1] + 8 * v151) = v150;
              ++*((_DWORD *)v149 + 4);
            }
          }
          ++v146;
        }
        v462 = v464;
        uint64_t v463 = 0x200000000;
        v467 = v408;
        v468 = &v476;
        v469 = v477;
        uint64_t v470 = 0;
        int v471 = 0;
        __int16 v472 = 512;
        char v473 = 7;
        uint64_t v465 = 0;
        v466 = 0;
        uint64_t v474 = 0;
        uint64_t v475 = 0;
        v476 = &unk_1F2616E88;
        v477[0] = &unk_1F2617008;
        v458 = &v462;
        v459 = (void **)&v408;
        uint64_t v177 = v411[3];
        uint64_t v178 = v411[4];
        if (v177 != v178)
        {
          while (1)
          {
            uint64_t v179 = *(void *)v177;
            unsigned int v180 = *(unsigned __int8 *)(*(void *)v177 + 16);
            if (*(void *)v177 && v180 >= 0x1C)
            {
              uint64_t v182 = *(void *)v177;
              v188 = *(llvm::Instruction **)v177;
            }
            else
            {
              if (v180 == 21) {
                uint64_t v182 = *(void *)v177;
              }
              else {
                uint64_t v182 = 0;
              }
              uint64_t v183 = *(void *)(*(void *)(v182 + 24) + 80);
              uint64_t v184 = v183 - 24;
              if (!v183) {
                uint64_t v184 = 0;
              }
              uint64_t v185 = v184 + 40;
              for (uint64_t j = *(void *)(v184 + 48); j != v185; uint64_t j = *(void *)(j + 8))
              {
                uint64_t v187 = j - 24;
                if (!j) {
                  uint64_t v187 = 0;
                }
                if (*(unsigned char *)(v187 + 16) != 83)
                {
                  unsigned int v189 = *(unsigned __int8 *)(j - 8) - 38;
                  BOOL v190 = v189 > 0x38;
                  uint64_t v191 = (1 << v189) & 0x100060000000001;
                  if (v190 || v191 == 0) {
                    uint64_t v185 = j;
                  }
                  else {
                    uint64_t v185 = *(void *)(j + 8);
                  }
                  break;
                }
              }
              v188 = v185 ? (llvm::Instruction *)(v185 - 24) : 0;
            }
            sub_1CC4B8718((uint64_t *)&v458, v182, v188);
            v193 = (char *)v428;
            uint64_t v194 = HIDWORD(v429);
            if (v428 != v427) {
              break;
            }
            if (HIDWORD(v429))
            {
              v195 = 0;
              uint64_t v196 = 8 * HIDWORD(v429);
              v197 = v428;
              while (*v197 != v179)
              {
                if (*v197 == -2) {
                  v195 = v197;
                }
                ++v197;
                v196 -= 8;
                if (!v196)
                {
                  if (!v195) {
                    goto LABEL_359;
                  }
                  void *v195 = v179;
                  --v430;
                  goto LABEL_383;
                }
              }
              goto LABEL_383;
            }
LABEL_359:
            unsigned int v198 = v429;
            if (HIDWORD(v429) >= v429) {
              goto LABEL_362;
            }
            ++HIDWORD(v429);
            *((void *)v428 + v194) = v179;
LABEL_383:
            v177 += 8;
            if (v177 == v178)
            {
              if (v462 != v464) {
                free(v462);
              }
              goto LABEL_393;
            }
          }
          unsigned int v198 = v429;
LABEL_362:
          if (3 * v198 <= 4 * (HIDWORD(v429) - v430))
          {
            if (v198 >= 0x40) {
              v198 *= 2;
            }
            else {
              unsigned int v198 = 128;
            }
          }
          else if (v198 - HIDWORD(v429) >= v198 >> 3)
          {
            goto LABEL_364;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v427, v198);
          unsigned int v198 = v429;
          v193 = (char *)v428;
LABEL_364:
          unsigned int v199 = v198 - 1;
          unsigned int v200 = (v198 - 1) & ((v179 >> 4) ^ (v179 >> 9));
          v201 = &v193[8 * v200];
          uint64_t v202 = *(void *)v201;
          if (*(void *)v201 == -1)
          {
            v203 = 0;
LABEL_376:
            if (v203) {
              v207 = v203;
            }
            else {
              v207 = v201;
            }
            if (*(void *)v207 != v179)
            {
              if (*(void *)v207 == -2) {
                --v430;
              }
              else {
                ++HIDWORD(v429);
              }
              *(void *)v207 = v179;
            }
          }
          else
          {
            v203 = 0;
            int v204 = 1;
            while (v202 != v179)
            {
              if (v203) {
                BOOL v205 = 0;
              }
              else {
                BOOL v205 = v202 == -2;
              }
              if (v205) {
                v203 = v201;
              }
              unsigned int v206 = v200 + v204++;
              unsigned int v200 = v206 & v199;
              v201 = &v193[8 * (v206 & v199)];
              uint64_t v202 = *(void *)v201;
              if (*(void *)v201 == -1) {
                goto LABEL_376;
              }
            }
          }
          goto LABEL_383;
        }
LABEL_393:
        v208 = v410;
        v209 = (void **)v410[3];
        v210 = (void **)v410[4];
        if (v209 == v210) {
          goto LABEL_491;
        }
        uint64_t v393 = v410[4];
        while (2)
        {
          v211 = *v209;
          v462 = *v209;
          v458 = 0;
          if ((sub_1CD420258(v411, &v462, &v458) & 1) == 0)
          {
            v462 = v211;
            v458 = 0;
            if ((sub_1CD50F704(v412, &v462, &v458) & 1) == 0)
            {
              int v212 = *((_DWORD *)v211 + 5);
              uint64_t v213 = v212 & 0x7FFFFFF;
              if ((v212 & 0x7FFFFFF) == 0)
              {
LABEL_398:
                int v214 = *((unsigned __int8 *)v211 + 16);
                v210 = (void **)v393;
                if (v214 == 31 || v214 == 81) {
                  goto LABEL_483;
                }
                void *v211 = v414;
                v215 = (char *)v428;
                uint64_t v216 = HIDWORD(v429);
                if (v428 == v427)
                {
                  if (HIDWORD(v429))
                  {
                    v217 = 0;
                    uint64_t v218 = 8 * HIDWORD(v429);
                    v219 = v428;
                    while ((void *)*v219 != v211)
                    {
                      if (*v219 == -2) {
                        v217 = v219;
                      }
                      ++v219;
                      v218 -= 8;
                      if (!v218)
                      {
                        if (!v217) {
                          goto LABEL_408;
                        }
                        void *v217 = v211;
                        --v430;
                        goto LABEL_483;
                      }
                    }
                    goto LABEL_483;
                  }
LABEL_408:
                  unsigned int v220 = v429;
                  if (HIDWORD(v429) < v429)
                  {
                    ++HIDWORD(v429);
                    *((void *)v428 + v216) = v211;
                    goto LABEL_483;
                  }
                }
                else
                {
                  unsigned int v220 = v429;
                }
                if (3 * v220 <= 4 * (HIDWORD(v429) - v430))
                {
                  if (v220 >= 0x40) {
                    v220 *= 2;
                  }
                  else {
                    unsigned int v220 = 128;
                  }
                }
                else if (v220 - HIDWORD(v429) >= v220 >> 3)
                {
                  goto LABEL_464;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v427, v220);
                unsigned int v220 = v429;
                v215 = (char *)v428;
LABEL_464:
                unsigned int v251 = v220 - 1;
                unsigned int v252 = (v220 - 1) & ((v211 >> 4) ^ (v211 >> 9));
                v253 = &v215[8 * v252];
                v254 = *(void **)v253;
                if (*(void *)v253 == -1)
                {
                  v255 = 0;
LABEL_476:
                  if (v255) {
                    v259 = v255;
                  }
                  else {
                    v259 = v253;
                  }
                  if (*(void **)v259 != v211)
                  {
                    if (*(void *)v259 == -2) {
                      --v430;
                    }
                    else {
                      ++HIDWORD(v429);
                    }
                    *(void *)v259 = v211;
                  }
                }
                else
                {
                  v255 = 0;
                  int v256 = 1;
                  while (v254 != v211)
                  {
                    if (v255) {
                      BOOL v257 = 0;
                    }
                    else {
                      BOOL v257 = v254 == (void *)-2;
                    }
                    if (v257) {
                      v255 = v253;
                    }
                    unsigned int v258 = v252 + v256++;
                    unsigned int v252 = v258 & v251;
                    v253 = &v215[8 * (v258 & v251)];
                    v254 = *(void **)v253;
                    if (*(void *)v253 == -1) {
                      goto LABEL_476;
                    }
                  }
                }
                goto LABEL_483;
              }
              uint64_t v221 = 0;
              while (2)
              {
                int v222 = *((_DWORD *)v211 + 5);
                if ((v222 & 0x40000000) != 0) {
                  v223 = (void *)*(v211 - 1);
                }
                else {
                  v223 = &v211[-4 * (v222 & 0x7FFFFFF)];
                }
                v224 = (unsigned __int8 *)v223[4 * v221];
                if (*(llvm::UndefValue **)v224 != v414 && *(unsigned char *)(*(void *)v224 + 8) == 13)
                {
                  int v225 = v224[16];
                  if (v225 == 16)
                  {
                    uint64_t v227 = *(void *)v413;
                    uint64_t v226 = *(void *)(v413 + 8);
                    if (v226 == *(void *)v413)
                    {
                      uint64_t v228 = *(unsigned int *)(v413 + 20);
                      v229 = (void *)(v226 + 8 * v228);
                      if (v228)
                      {
                        uint64_t v230 = 0;
                        uint64_t v231 = 8 * v228;
                        while (*(void **)(v226 + v230) != v211)
                        {
                          v230 += 8;
                          if (v231 == v230) {
                            goto LABEL_437;
                          }
                        }
                        v229 = (void *)(v226 + v230);
                      }
LABEL_437:
                      uint64_t v227 = *(void *)(v413 + 8);
                    }
                    else
                    {
                      uint64_t v233 = *(unsigned int *)(v413 + 16);
                      int v234 = v233 - 1;
                      unsigned int v235 = (v233 - 1) & ((v211 >> 4) ^ (v211 >> 9));
                      v229 = (void *)(v226 + 8 * v235);
                      v236 = (void *)*v229;
                      if (*v229 == -1)
                      {
                        v237 = 0;
LABEL_456:
                        if (v237) {
                          v229 = v237;
                        }
                        if ((void *)*v229 != v211) {
                          v229 = (void *)(v226 + 8 * v233);
                        }
                      }
                      else
                      {
                        v237 = 0;
                        int v238 = 1;
                        while (v236 != v211)
                        {
                          if (v237) {
                            BOOL v239 = 0;
                          }
                          else {
                            BOOL v239 = v236 == (void *)-2;
                          }
                          if (v239) {
                            v237 = v229;
                          }
                          unsigned int v240 = v235 + v238++;
                          unsigned int v235 = v240 & v234;
                          v229 = (void *)(v226 + 8 * (v240 & v234));
                          v236 = (void *)*v229;
                          if (*v229 == -1) {
                            goto LABEL_456;
                          }
                        }
                      }
                    }
                    BOOL v39 = v226 == v227;
                    uint64_t v241 = 16;
                    if (v39) {
                      uint64_t v241 = 20;
                    }
                    if (v229 == (void *)(v226 + 8 * *(unsigned int *)(v413 + v241))) {
                      uint64_t v242 = 39;
                    }
                    else {
                      uint64_t v242 = 40;
                    }
                    v232 = sub_1CC56C0C0((llvm *)v242, (llvm::detail::IEEEFloat *)v224, v414, 0);
LABEL_444:
                    int v243 = *((_DWORD *)v211 + 5);
                    if ((v243 & 0x40000000) != 0) {
                      v244 = (void *)*(v211 - 1);
                    }
                    else {
                      v244 = &v211[-4 * (v243 & 0x7FFFFFF)];
                    }
                    v245 = (llvm::detail::IEEEFloat **)&v244[4 * v221];
                    if (*v245)
                    {
                      *(void *)v245[2] = v245[1];
                      v246 = v245[1];
                      if (v246) {
                        *((void *)v246 + 2) = v245[2];
                      }
                    }
                    *v245 = v232;
                    if (v232)
                    {
                      uint64_t v249 = *((void *)v232 + 1);
                      v247 = (llvm::detail::IEEEFloat ***)((char *)v232 + 8);
                      uint64_t v248 = v249;
                      v250 = &v244[4 * v221];
                      v250[1] = v249;
                      if (v249) {
                        *(void *)(v248 + 16) = v250 + 1;
                      }
                      v250[2] = v247;
                      *v247 = v245;
                    }
                  }
                  else if ((v225 - 11) <= 1)
                  {
                    v232 = llvm::UndefValue::get(v414, (llvm::Type *)v224);
                    goto LABEL_444;
                  }
                }
                if (++v221 == v213) {
                  goto LABEL_398;
                }
                continue;
              }
            }
          }
LABEL_483:
          if (++v209 != v210) {
            continue;
          }
          break;
        }
        v208 = v410;
LABEL_491:
        v462 = v464;
        uint64_t v463 = 0x200000000;
        v467 = v408;
        v468 = &v476;
        v469 = v477;
        uint64_t v470 = 0;
        int v471 = 0;
        __int16 v472 = 512;
        char v473 = 7;
        uint64_t v465 = 0;
        v466 = 0;
        uint64_t v474 = 0;
        uint64_t v475 = 0;
        v476 = &unk_1F2616E88;
        v477[0] = &unk_1F2617008;
        v261 = (unsigned __int8 **)v208[3];
        v260 = (unsigned __int8 **)v208[4];
        if (v261 == v260) {
          goto LABEL_576;
        }
        uint64_t v394 = v208[4];
        while (2)
        {
          v262 = *v261;
          if ((*v261)[16] == 66)
          {
            v458 = (void **)*v261;
            v461 = 0;
            if ((sub_1CD420258(v411, &v458, &v461) & 1) == 0)
            {
              uint64_t v465 = *((void *)v262 + 5);
              v466 = v262 + 24;
              v263 = (unsigned __int8 *)*((void *)v262 + 6);
              v461 = v263;
              if (v263)
              {
                llvm::MetadataTracking::track((uint64_t)&v461, v263, 2);
                uint64_t v264 = (uint64_t)v461;
              }
              else
              {
                uint64_t v264 = 0;
              }
              sub_1CB8461A4((uint64_t)&v462, 0, v264);
              if (!v461) {
                goto LABEL_500;
              }
              int v293 = *v461;
              if ((v293 - 4) <= 0x1E)
              {
                if ((v461[1] & 0x7F) != 2 && !*((_DWORD *)v461 + 3)) {
                  goto LABEL_500;
                }
                uint64_t v294 = *((void *)v461 + 2);
                if ((v294 & 4) == 0) {
                  goto LABEL_500;
                }
                unint64_t v295 = v294 & 0xFFFFFFFFFFFFFFF8;
                if (!v295) {
                  goto LABEL_500;
                }
LABEL_561:
                v458 = (void **)&v461;
                sub_1CC5FA668(v295 + 16, &v458);
                goto LABEL_500;
              }
              if ((v293 - 3) >= 0xFFFFFFFE) {
                v296 = v461;
              }
              else {
                v296 = 0;
              }
              if ((v293 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v295 = (unint64_t)(v296 + 8);
                goto LABEL_561;
              }
              if (v293 == 3) {
                *((void *)v461 + 1) = 0;
              }
LABEL_500:
              uint64_t v265 = **((void **)v262 - 4);
              v458 = (void **)v262;
              uint64_t v266 = *(void *)sub_1CD58C6BC((uint64_t)v425, (uint64_t *)&v458)[1];
              if ((*(_DWORD *)(v266 + 8) & 0xFE) == 0x12) {
                uint64_t v266 = **(void **)(v266 + 16);
              }
              unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v266);
              unsigned int v397 = PrimitiveSizeInBits;
              if (PrimitiveSizeInBits > 0x40) {
                operator new[]();
              }
              if (PrimitiveSizeInBits) {
                unint64_t v269 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
              }
              else {
                unint64_t v269 = 0;
              }
              size_t v387 = v269;
              v270 = *(llvm::ConstantInt **)v265;
              unsigned int v271 = *(_DWORD *)(v265 + 8);
              LODWORD(v459) = v271 >> 8;
              if (v271 >> 8 > 0x40) {
                operator new[]();
              }
              if (v271 <= 0xFF) {
                unint64_t v272 = 0;
              }
              else {
                unint64_t v272 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v271) + 63);
              }
              v458 = (void **)(v272 & v269);
              v273 = llvm::ConstantInt::get(v270, (llvm::LLVMContext *)&v458, v268);
              v260 = (unsigned __int8 **)v394;
              if (v459 >= 0x41 && v458)
              {
                v385 = v273;
                MEMORY[0x1D25D9CB0](v458, 0x1000C8000313F17);
                v273 = v385;
              }
              if (v397 >= 0x41 && v269)
              {
                v274 = v273;
                MEMORY[0x1D25D9CB0](v387, 0x1000C8000313F17);
                v273 = v274;
              }
              v275 = (void *)*((void *)v262 - 4);
              __int16 v460 = 257;
              v276 = sub_1CBF52474((uint64_t)&v462, v275, (uint64_t)v273, (uint64_t)&v458);
              v277 = (unsigned __int8 *)v276;
              if (v276 && *((unsigned __int8 *)v276 + 16) >= 0x1Cu)
              {
                v278 = v416;
                uint64_t v279 = HIDWORD(v417);
                if (v416 == v415)
                {
                  if (HIDWORD(v417))
                  {
                    v280 = 0;
                    uint64_t v281 = 8 * HIDWORD(v417);
                    v282 = (llvm::Instruction **)v416;
                    while (*v282 != v276)
                    {
                      if (*v282 == (llvm::Instruction *)-2) {
                        v280 = v282;
                      }
                      ++v282;
                      v281 -= 8;
                      if (!v281)
                      {
                        if (!v280) {
                          goto LABEL_524;
                        }
                        *v280 = v276;
                        --v418;
                        goto LABEL_548;
                      }
                    }
                    goto LABEL_548;
                  }
LABEL_524:
                  unsigned int v283 = v417;
                  if (HIDWORD(v417) < v417)
                  {
                    ++HIDWORD(v417);
                    *(void *)&v416[8 * v279] = v276;
                    goto LABEL_548;
                  }
                }
                else
                {
                  unsigned int v283 = v417;
                }
                if (3 * v283 <= 4 * (HIDWORD(v417) - v418))
                {
                  if (v283 >= 0x40) {
                    v283 *= 2;
                  }
                  else {
                    unsigned int v283 = 128;
                  }
                }
                else if (v283 - HIDWORD(v417) >= v283 >> 3)
                {
                  goto LABEL_529;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v415, v283);
                unsigned int v283 = v417;
                v278 = v416;
LABEL_529:
                unsigned int v284 = v283 - 1;
                unsigned int v285 = (v283 - 1) & ((v277 >> 4) ^ (v277 >> 9));
                v286 = &v278[8 * v285];
                v287 = *(unsigned __int8 **)v286;
                if (*(void *)v286 == -1)
                {
                  v288 = 0;
                  v260 = (unsigned __int8 **)v394;
LABEL_541:
                  if (v288) {
                    v292 = v288;
                  }
                  else {
                    v292 = (unsigned __int8 **)v286;
                  }
                  if (*v292 != v277)
                  {
                    if (*v292 == (unsigned __int8 *)-2) {
                      --v418;
                    }
                    else {
                      ++HIDWORD(v417);
                    }
                    *v292 = v277;
                    v260 = (unsigned __int8 **)v394;
                  }
                }
                else
                {
                  v288 = 0;
                  int v289 = 1;
                  v260 = (unsigned __int8 **)v394;
                  while (v287 != v277)
                  {
                    if (v288) {
                      BOOL v290 = 0;
                    }
                    else {
                      BOOL v290 = v287 == (unsigned __int8 *)-2;
                    }
                    if (v290) {
                      v288 = (unsigned __int8 **)v286;
                    }
                    unsigned int v291 = v285 + v289++;
                    unsigned int v285 = v291 & v284;
                    v286 = &v278[8 * (v291 & v284)];
                    v287 = *(unsigned __int8 **)v286;
                    if (*(void *)v286 == -1) {
                      goto LABEL_541;
                    }
                  }
                }
              }
LABEL_548:
              sub_1CC4B8BD4((uint64_t)&v408, (uint64_t)v262, v277);
            }
          }
          if (++v261 != v260) {
            continue;
          }
          break;
        }
        if (v462 != v464) {
          free(v462);
        }
LABEL_576:
        v462 = v464;
        uint64_t v463 = 0x200000000;
        v467 = v408;
        v468 = &v476;
        v469 = v477;
        uint64_t v470 = 0;
        int v471 = 0;
        __int16 v472 = 512;
        char v473 = 7;
        uint64_t v465 = 0;
        v466 = 0;
        uint64_t v474 = 0;
        uint64_t v475 = 0;
        v476 = &unk_1F2616E88;
        v477[0] = &unk_1F2617008;
        v458 = (void **)&v408;
        v459 = &v462;
        uint64_t v297 = v412[3];
        uint64_t v390 = v412[4];
        if (v297 != v390)
        {
          do
          {
            uint64_t v298 = *(void *)v297;
            int v299 = *(unsigned __int8 *)(*(void *)v297 + 16);
            v398 = (llvm::LLVMContext *)v297;
            if (*(void *)v297 && v299 == 84)
            {
              unint64_t v300 = 0;
              uint64_t v301 = v298 - 32;
              char v302 = 84;
              for (uint64_t k = *(void *)v297; ; k += 32)
              {
                if (v302 == 84) {
                  uint64_t v304 = 0;
                }
                else {
                  uint64_t v304 = v302 == 39 ? (*(_DWORD *)(v298 + 80) + 1) : 2;
                }
                int v305 = *(_DWORD *)(v298 + 20);
                if (v305 < 0 && (uint64_t v317 = v305 & 0x7FFFFFF, (*(void *)(v298 - 8 - 32 * v317) & 0xFFFFFFFF0) != 0))
                {
                  uint64_t v307 = -v317;
                  int v306 = *(_DWORD *)(v298 - 32 * v317 - 12)
                       - *(_DWORD *)(v298 - 32 * v317 - *(void *)(v298 - 32 * v317 - 8));
                }
                else
                {
                  int v306 = 0;
                  uint64_t v307 = -(uint64_t)(v305 & 0x7FFFFFF);
                }
                if (v300 >= ((v301
                                           - 32 * v304
                                           + 32 * (unint64_t)-v306
                                           - (v298
                                            + 32 * v307)) >> 5))
                  break;
                v308 = *(unsigned __int8 **)(k + 32 * v307);
                v461 = (unsigned __int8 *)v298;
                v309 = sub_1CD58C6BC((uint64_t)v425, (uint64_t *)&v461);
                v310 = sub_1CC4B8E9C(&v458, v308, *(void *)(v309[1] + 8 * v300));
                if (v310)
                {
                  v311 = v310;
                  llvm::Instruction::moveBefore(v310, (llvm::Instruction *)v298);
                  uint64_t v312 = k - 32 * (*(_DWORD *)(v298 + 20) & 0x7FFFFFF);
                  if (*(void *)v312)
                  {
                    **(void **)(v312 + 16) = *(void *)(v312 + 8);
                    uint64_t v313 = *(void *)(v312 + 8);
                    if (v313) {
                      *(void *)(v313 + 16) = *(void *)(v312 + 16);
                    }
                  }
                  *(void *)uint64_t v312 = v311;
                  uint64_t v316 = *((void *)v311 + 1);
                  v315 = (uint64_t *)((char *)v311 + 8);
                  uint64_t v314 = v316;
                  *(void *)(v312 + 8) = v316;
                  if (v316) {
                    *(void *)(v314 + 16) = v312 + 8;
                  }
                  *(void *)(v312 + 16) = v315;
                  uint64_t *v315 = v312;
                }
                ++v300;
                char v302 = *(unsigned char *)(v298 + 16);
                uint64_t v301 = v298 - 32;
              }
            }
            else if (v299 == 31)
            {
              v461 = *(unsigned __int8 **)v297;
              v332 = sub_1CD58C6BC((uint64_t)v425, (uint64_t *)&v461);
              int v333 = *(_DWORD *)(v298 + 20);
              if ((v333 & 0x40000000) != 0) {
                v334 = *(unsigned __int8 ***)(v298 - 8);
              }
              else {
                v334 = (unsigned __int8 **)(v298 - 32 * (v333 & 0x7FFFFFF));
              }
              v335 = sub_1CC4B8E9C(&v458, *v334, *(void *)v332[1]);
              if (v335)
              {
                v336 = v335;
                llvm::Instruction::moveBefore(v335, (llvm::Instruction *)v298);
                int v337 = *(_DWORD *)(v298 + 20);
                if ((v337 & 0x40000000) != 0) {
                  uint64_t v338 = *(void *)(v298 - 8);
                }
                else {
                  uint64_t v338 = v298 - 32 * (v337 & 0x7FFFFFF);
                }
                if (*(void *)v338)
                {
                  **(void **)(v338 + 16) = *(void *)(v338 + 8);
                  uint64_t v342 = *(void *)(v338 + 8);
                  if (v342) {
                    *(void *)(v342 + 16) = *(void *)(v338 + 16);
                  }
                }
                *(void *)uint64_t v338 = v336;
                uint64_t v341 = *((void *)v336 + 1);
                v340 = (uint64_t *)((char *)v336 + 8);
                uint64_t v339 = v341;
                *(void *)(v338 + 8) = v341;
                if (v341) {
                  *(void *)(v339 + 16) = v338 + 8;
                }
                *(void *)(v338 + 16) = v340;
                uint64_t *v340 = v338;
              }
            }
            else if ((*(_DWORD *)(v298 + 20) & 0x7FFFFFF) != 0)
            {
              uint64_t v318 = 0;
              unint64_t v319 = 0;
              do
              {
                v461 = (unsigned __int8 *)v298;
                v320 = sub_1CD58C6BC((uint64_t)v425, (uint64_t *)&v461);
                int v321 = *(_DWORD *)(v298 + 20);
                if ((v321 & 0x40000000) != 0) {
                  uint64_t v322 = *(void *)(v298 - 8);
                }
                else {
                  uint64_t v322 = v298 - 32 * (v321 & 0x7FFFFFF);
                }
                v323 = sub_1CC4B8E9C(&v458, *(unsigned __int8 **)(v322 + v318), *(void *)(v320[1] + 8 * v319));
                if (v323)
                {
                  v324 = v323;
                  llvm::Instruction::moveBefore(v323, (llvm::Instruction *)v298);
                  int v325 = *(_DWORD *)(v298 + 20);
                  if ((v325 & 0x40000000) != 0) {
                    uint64_t v326 = *(void *)(v298 - 8);
                  }
                  else {
                    uint64_t v326 = v298 - 32 * (v325 & 0x7FFFFFF);
                  }
                  uint64_t v327 = v326 + v318;
                  if (*(void *)(v326 + v318))
                  {
                    **(void **)(v327 + 16) = *(void *)(v327 + 8);
                    uint64_t v328 = *(void *)(v327 + 8);
                    if (v328) {
                      *(void *)(v328 + 16) = *(void *)(v327 + 16);
                    }
                  }
                  *(void *)uint64_t v327 = v324;
                  uint64_t v331 = *((void *)v324 + 1);
                  v330 = (void *)((char *)v324 + 8);
                  uint64_t v329 = v331;
                  *(void *)(v327 + 8) = v331;
                  if (v331) {
                    *(void *)(v329 + 16) = v327 + 8;
                  }
                  *(void *)(v326 + v318 + 16) = v330;
                  void *v330 = v327;
                }
                ++v319;
                v318 += 32;
              }
              while (v319 < (*(_DWORD *)(v298 + 20) & 0x7FFFFFFu));
            }
            uint64_t v297 = (uint64_t)v398 + 8;
          }
          while ((llvm::LLVMContext *)((char *)v398 + 8) != (llvm::LLVMContext *)v390);
          if (v462 != v464) {
            free(v462);
          }
        }
        uint64_t v343 = v410[3];
        uint64_t v344 = v410[4];
        while (2)
        {
          if (v343 != v344)
          {
            v345 = *(llvm::UndefValue ***)v343;
            if (*(unsigned char *)(*(void *)v343 + 16) == 67 && *v345 == v414)
            {
              v346 = (unsigned __int8 *)*(v345 - 4);
              if (*(llvm::UndefValue **)v346 != *v345)
              {
                v347 = v415;
                if (v416 == v415)
                {
                  int v348 = HIDWORD(v417);
                  v349 = &v416[8 * HIDWORD(v417)];
                  if (HIDWORD(v417))
                  {
                    uint64_t v350 = 0;
                    while (*(unsigned __int8 **)&v416[v350] != v346)
                    {
                      v350 += 8;
                      if (8 * HIDWORD(v417) == v350) {
                        goto LABEL_657;
                      }
                    }
                    v349 = &v416[v350];
                  }
LABEL_657:
                  v347 = v416;
                }
                else
                {
                  int v351 = v417 - 1;
                  unsigned int v352 = (v417 - 1) & ((v346 >> 4) ^ (v346 >> 9));
                  v349 = &v416[8 * v352];
                  v353 = *(unsigned __int8 **)v349;
                  if (*(void *)v349 == -1)
                  {
                    v354 = 0;
LABEL_671:
                    if (v354) {
                      v349 = v354;
                    }
                    int v348 = HIDWORD(v417);
                    if (*(unsigned __int8 **)v349 != v346) {
                      v349 = &v416[8 * v417];
                    }
                  }
                  else
                  {
                    v354 = 0;
                    int v355 = 1;
                    while (v353 != v346)
                    {
                      if (v354) {
                        BOOL v356 = 0;
                      }
                      else {
                        BOOL v356 = v353 == (unsigned __int8 *)-2;
                      }
                      if (v356) {
                        v354 = v349;
                      }
                      unsigned int v357 = v352 + v355++;
                      unsigned int v352 = v357 & v351;
                      v349 = &v416[8 * (v357 & v351)];
                      v353 = *(unsigned __int8 **)v349;
                      if (*(void *)v349 == -1) {
                        goto LABEL_671;
                      }
                    }
                    int v348 = HIDWORD(v417);
                  }
                }
                if (v416 == v347) {
                  int v358 = v348;
                }
                else {
                  int v358 = v417;
                }
                if (v349 == &v416[8 * v358]) {
                  goto LABEL_669;
                }
                if (v346[16] != 66 || *(void *)v346 != (void)v409) {
                  goto LABEL_669;
                }
                v346 = (unsigned __int8 *)*((void *)v346 - 4);
              }
              sub_1CC4B8BD4((uint64_t)&v408, (uint64_t)v345, v346);
            }
LABEL_669:
            v343 += 8;
            continue;
          }
          break;
        }
        if (v421 == v420) {
          v360 = (uint64_t *)((char *)&v422 + 4);
        }
        else {
          v360 = &v422;
        }
        uint64_t v361 = *(unsigned int *)v360;
        if (v361)
        {
          uint64_t v362 = 8 * v361;
          v363 = v421;
          while (*(void *)v363 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v363 += 8;
            v362 -= 8;
            if (!v362) {
              goto LABEL_696;
            }
          }
        }
        else
        {
          v363 = v421;
        }
        if (v363 != &v421[8 * v361])
        {
          uint64_t v364 = *(void *)v363;
          int v365 = *(_DWORD *)(*(void *)v363 + 20);
          if ((v365 & 0x40000000) != 0)
          {
            uint64_t v367 = *(void *)(v364 - 8);
            uint64_t v366 = v365 & 0x7FFFFFF;
            if (v366) {
              goto LABEL_688;
            }
          }
          else
          {
            uint64_t v366 = v365 & 0x7FFFFFF;
            uint64_t v367 = v364 - 32 * v366;
            if (v366)
            {
LABEL_688:
              uint64_t v368 = 32 * v366;
              v369 = (void **)(v367 + 16);
              do
              {
                if (*(v369 - 2))
                {
                  void **v369 = *(v369 - 1);
                  uint64_t v370 = (uint64_t)*(v369 - 1);
                  if (v370) {
                    *(void *)(v370 + 16) = *v369;
                  }
                }
                *(v369 - 2) = 0;
                v369 += 4;
                v368 -= 32;
              }
              while (v368);
            }
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
LABEL_696:
        if (v428 != v427) {
          free(v428);
        }
        uint64_t v371 = v425[0];
        if (v426)
        {
          uint64_t v372 = 56 * v426;
          uint64_t v373 = v425[0] + 24;
          do
          {
            if ((*(void *)(v373 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v374 = *(void **)(v373 - 16);
              if ((void *)v373 != v374) {
                free(v374);
              }
            }
            v373 += 56;
            v372 -= 56;
          }
          while (v372);
          uint64_t v371 = v425[0];
        }
        MEMORY[0x1D25D9CD0](v371, 8);
        if (v421 != v420) {
          free(v421);
        }
        if (v416 != v415) {
          free(v416);
        }
        char v62 = 1;
LABEL_710:
        if (v433 != v432) {
          free(v433);
        }
LABEL_712:
        if (__p)
        {
          v440 = (char *)__p;
          operator delete(__p);
        }
        MEMORY[0x1D25D9CD0](v437[0], 8);
        sub_1CD456CB4(v442);
        if (v449)
        {
          v450 = v449;
          operator delete(v449);
        }
        MEMORY[0x1D25D9CD0](v447[0], 8);
        if (v454)
        {
          v455 = v454;
          operator delete(v454);
        }
        MEMORY[0x1D25D9CD0](v452[0], 8);
        v402 |= v62;
LABEL_86:
        uint64_t v19 = v404;
        uint64_t v20 = v405;
LABEL_87:
        ;
      }
      uint64_t v20 = *(void *)(v20 + 8);
      if (v20 == v19) {
        goto LABEL_722;
      }
    }
  }
  char v402 = 0;
LABEL_722:
  v375 = *(void **)(a1 + 56);
  char v4 = v402;
  if (v375 == *(void **)(a1 + 48)) {
    goto LABEL_723;
  }
  uint64_t v382 = *(unsigned int *)(a1 + 64);
  if (v382 < 0x21 || 4 * (*(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72)) >= v382)
  {
    memset(v375, 255, 8 * v382);
LABEL_723:
    *(_DWORD *)(a1 + 68) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    goto LABEL_724;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)v399);
LABEL_724:
  v376 = *(void **)(a1 + 216);
  if (v376 != *(void **)(a1 + 208))
  {
    uint64_t v383 = *(unsigned int *)(a1 + 224);
    if (v383 >= 0x21 && 4 * (*(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232)) < v383)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear(v400);
      goto LABEL_726;
    }
    memset(v376, 255, 8 * v383);
  }
  *(_DWORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 232) = 0;
LABEL_726:
  v377 = *(void **)(a1 + 312);
  if (v377 != *(void **)(a1 + 304))
  {
    uint64_t v384 = *(unsigned int *)(a1 + 320);
    if (v384 >= 0x21 && 4 * (*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328)) < v384)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear(v401);
      return v4 & 1;
    }
    memset(v377, 255, 8 * v384);
  }
  *(void *)(a1 + 324) = 0;
  return v4 & 1;
}

uint64_t sub_1CC4B76F8(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v4 >= 0x1C)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x4Cu)
    {
      uint64_t result = 1;
      switch(*(unsigned char *)(a2 + 16))
      {
        case '<':
        case 'B':
          goto LABEL_22;
        case '=':
        case '>':
          return result;
        case '?':
        case '@':
        case 'A':
          goto LABEL_30;
        case 'C':
          int v6 = *(_DWORD *)(a2 + 20);
          if ((v6 & 0x40000000) != 0) {
            uint64_t v7 = *(llvm::Type ****)(a2 - 8);
          }
          else {
            uint64_t v7 = (llvm::Type ***)(a2 - 32 * (v6 & 0x7FFFFFF));
          }
          uint64_t v12 = **v7;
          goto LABEL_23;
        default:
          if (v4 - 30 < 2) {
            return result;
          }
          if (v4 == 29) {
            goto LABEL_22;
          }
          goto LABEL_30;
      }
    }
    switch(*(unsigned char *)(a2 + 16))
    {
      case 'M':
      case 'S':
      case 'U':
        goto LABEL_22;
      case 'Q':
        int v10 = *(_DWORD *)(a2 + 20);
        if ((v10 & 0x40000000) != 0) {
          uint64_t v11 = *(uint64_t ***)(a2 - 8);
        }
        else {
          uint64_t v11 = (uint64_t **)(a2 - 32 * (v10 & 0x7FFFFFF));
        }
        uint64_t v15 = **v11;
        int v16 = *(unsigned __int8 *)(v15 + 8);
        if (v16 == 15) {
          return 1;
        }
        if ((v16 & 0xFE) == 0x12) {
          uint64_t v15 = **(void **)(v15 + 16);
        }
        BOOL v9 = *(_DWORD *)(a1 + 28) == llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v15);
        break;
      case 'T':
        uint64_t result = sub_1CC4B8688(a1, *(llvm::Type **)a2);
        if (result)
        {
          return sub_1CBF5BCC4(a2, 67);
        }
        return result;
      default:
LABEL_30:
        if (v4 - 41 > 0x11) {
          return 0;
        }
        BOOL v13 = sub_1CC4B8688(a1, *(llvm::Type **)a2);
        unsigned int v14 = (0xFFF76u >> (v4 - 48)) & 1;
        if (v4 - 48 >= 0x15) {
          unsigned int v14 = 1;
        }
        if (v13) {
          return v14;
        }
        else {
          return 0;
        }
    }
    return v9;
  }
  BOOL v8 = v4 > 0x14 || v4 == 5;
  if (v8 && v4 != 21) {
    return v4 == 22;
  }
LABEL_22:
  uint64_t v12 = *(llvm::Type **)a2;
LABEL_23:

  return sub_1CC4B8688(a1, v12);
}

BOOL sub_1CC4B7938(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)(*(void *)a2 + 8) != 13 || (sub_1CC4B852C(a1, (uint64_t)a2) & 1) != 0) {
    return 0;
  }
  if (sub_1CC4B846C(a1, a2)) {
    return 1;
  }
  unsigned int v5 = a2[16];
  return v5 > 0x1B && v5 != 81;
}

uint64_t sub_1CC4B79A8(uint64_t a1, uint64_t a2)
{
  uint64_t result = 1;
  if (a2)
  {
    unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
    unsigned int v6 = v5 - 28;
    if (v5 >= 0x1C)
    {
      BOOL v8 = *(void **)(a1 + 208);
      uint64_t v7 = *(void **)(a1 + 216);
      if (v7 == v8)
      {
        uint64_t v9 = *(unsigned int *)(a1 + 228);
        int v10 = &v7[v9];
        if (v9)
        {
          unint64_t v11 = 0;
          uint64_t v12 = 8 * v9;
          while (v7[v11 / 8] != a2)
          {
            v11 += 8;
            if (v12 == v11) {
              goto LABEL_21;
            }
          }
          int v10 = &v7[v11 / 8];
        }
LABEL_21:
        uint64_t v20 = *(void **)(a1 + 216);
      }
      else
      {
        uint64_t v13 = *(unsigned int *)(a1 + 224);
        unsigned int v14 = v13 - 1;
        unsigned int v15 = (v13 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        int v10 = &v7[v15];
        uint64_t v16 = *v10;
        if (*v10 == -1)
        {
          int v17 = 0;
LABEL_23:
          if (v17) {
            int v10 = v17;
          }
          if (*v10 != a2) {
            int v10 = &v7[v13];
          }
        }
        else
        {
          int v17 = 0;
          while (v16 != a2)
          {
            if (v17) {
              BOOL v18 = 0;
            }
            else {
              BOOL v18 = v16 == -2;
            }
            if (v18) {
              int v17 = v10;
            }
            int v19 = v15 + result;
            LODWORD(result) = result + 1;
            unsigned int v15 = v19 & v14;
            int v10 = &v7[v19 & v14];
            uint64_t v16 = *v10;
            if (*v10 == -1) {
              goto LABEL_23;
            }
          }
        }
        uint64_t v20 = *(void **)(a1 + 208);
      }
      BOOL v18 = v7 == v20;
      uint64_t v21 = 224;
      if (v18) {
        uint64_t v21 = 228;
      }
      if (v10 != &v7[*(unsigned int *)(a1 + v21)]) {
        return 1;
      }
      if (v5 - 48 > 0x14 || ((1 << (v5 - 48)) & 0x100089) == 0)
      {
        HIDWORD(v27) = v5 - 41;
        LODWORD(v27) = v5 - 41;
        unsigned int v26 = v27 >> 1;
        if (v26 > 6 || ((1 << v26) & 0x47) == 0 || (*(unsigned char *)(a2 + 17) & 2) != 0)
        {
LABEL_43:
          uint64_t v28 = *(unsigned int *)(a1 + 228);
          if (v7 == v8)
          {
            if (v28)
            {
              uint64_t v29 = 0;
              uint64_t v30 = 8 * v28;
              uint64_t v31 = v8;
              while (*v31 != a2)
              {
                if (*v31 == -2) {
                  uint64_t v29 = v31;
                }
                ++v31;
                v30 -= 8;
                if (!v30)
                {
                  if (!v29) {
                    goto LABEL_51;
                  }
                  *uint64_t v29 = a2;
                  --*(_DWORD *)(a1 + 232);
                  return 1;
                }
              }
              return 1;
            }
LABEL_51:
            unsigned int v32 = *(_DWORD *)(a1 + 224);
            if (v28 < v32)
            {
              *(_DWORD *)(a1 + 228) = v28 + 1;
              v8[v28] = a2;
              return 1;
            }
          }
          else
          {
            unsigned int v32 = *(_DWORD *)(a1 + 224);
          }
          if (3 * v32 <= 4 * ((int)v28 - *(_DWORD *)(a1 + 232)))
          {
            if (v32 >= 0x40) {
              v32 *= 2;
            }
            else {
              unsigned int v32 = 128;
            }
          }
          else if (v32 - v28 >= v32 >> 3)
          {
            goto LABEL_56;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 208), v32);
          unsigned int v32 = *(_DWORD *)(a1 + 224);
          uint64_t v7 = *(void **)(a1 + 216);
LABEL_56:
          unsigned int v33 = v32 - 1;
          unsigned int v34 = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          unsigned int v35 = &v7[v34];
          uint64_t v36 = *v35;
          if (*v35 == -1)
          {
            uint64_t v37 = 0;
LABEL_81:
            if (v37) {
              uint64_t v45 = v37;
            }
            else {
              uint64_t v45 = v35;
            }
            if (*v45 != a2)
            {
              if (*v45 == -2) {
                --*(_DWORD *)(a1 + 232);
              }
              else {
                ++*(_DWORD *)(a1 + 228);
              }
              void *v45 = a2;
            }
          }
          else
          {
            uint64_t v37 = 0;
            int v38 = 1;
            while (v36 != a2)
            {
              if (v37) {
                BOOL v39 = 0;
              }
              else {
                BOOL v39 = v36 == -2;
              }
              if (v39) {
                uint64_t v37 = v35;
              }
              unsigned int v40 = v34 + v38++;
              unsigned int v34 = v40 & v33;
              unsigned int v35 = &v7[v40 & v33];
              uint64_t v36 = *v35;
              if (*v35 == -1) {
                goto LABEL_81;
              }
            }
          }
          return 1;
        }
      }
      if ((v6 & 0xFFFFFFFD) != 0xD) {
        return 0;
      }
      uint64_t v22 = *(void *)(a2 + 8);
      if (!v22) {
        return 0;
      }
      if (*(void *)(v22 + 8)) {
        return 0;
      }
      uint64_t v23 = *(void *)(v22 + 24);
      if (*(unsigned char *)(v23 + 16) != 81) {
        return 0;
      }
      int v24 = *(_DWORD *)(a2 + 20);
      uint64_t v25 = (v24 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v24 & 0x7FFFFFF);
      if (*(unsigned char *)(*(void *)(v25 + 32) + 16) != 16) {
        return 0;
      }
      int v41 = *(_WORD *)(v23 + 18) & 0x3E;
      if (v41 == 32 || (v41 - 38) < 4) {
        return 0;
      }
      uint64_t v43 = *(void *)(v23 - 64);
      if (!v43 || *(unsigned char *)(v43 + 16) != 16)
      {
        uint64_t v43 = *(void *)(v23 - 32);
        if (!v43 || *(unsigned char *)(v43 + 16) != 16) {
          return 0;
        }
      }
      if ((v24 & 0x40000000) != 0) {
        uint64_t v44 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v44 = a2 - 32 * (v24 & 0x7FFFFFF);
      }
      uint64_t v46 = (void *)(v43 + 24);
      uint64_t v47 = *(void *)(v44 + 32);
      unsigned int v48 = *(_DWORD *)(v47 + 32);
      if (v48 > 0x40) {
        operator new[]();
      }
      unint64_t v49 = *(void *)(v47 + 24);
      if (v6 == 15)
      {
        unsigned int v121 = v48;
        if (v48) {
          unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
        }
        else {
          unint64_t v50 = 0;
        }
        unint64_t v120 = v50 & ~v49;
        llvm::APInt::operator++((uint64_t)&v120);
        unsigned int v51 = v121;
        unsigned int v121 = 0;
        unsigned int v52 = v51 - 1;
        unsigned int v48 = v51;
        unint64_t v49 = v120;
        uint64_t v46 = (void *)(v43 + 24);
        if (v51 > 0x40)
        {
          if (((*(void *)(v120 + 8 * (v52 >> 6)) >> v52) & 1) == 0)
          {
            int v53 = 0;
            int64_t v54 = ((unint64_t)v51 + 63) >> 6;
            do
            {
              if (v54-- < 1) {
                break;
              }
              unint64_t v56 = *(void *)(v120 + 8 * v54);
              v53 += __clz(v56);
            }
            while (!v56);
            unsigned int v57 = v51 | 0xFFFFFFC0;
            if ((v51 & 0x3F) == 0) {
              unsigned int v57 = 0;
            }
            if (v53 + v57 != v51)
            {
              char v68 = 1;
              goto LABEL_226;
            }
          }
          unint64_t v67 = v120;
          uint64_t v96 = *(void *)(v120 + 8 * ((v51 - 1) >> 6)) & (1 << (v51 - 1));
          unsigned int v97 = *(_DWORD *)(v43 + 32);
          unsigned int v98 = v97 - 1;
          uint64_t v99 = *(void *)(v43 + 24);
          if (v97 >= 0x41) {
            uint64_t v100 = (void *)(v99 + 8 * (v98 >> 6));
          }
          else {
            uint64_t v100 = (void *)(v43 + 24);
          }
          if ((v96 != 0) == ((*v100 >> v98) & 1))
          {
            uint64_t v116 = v99 - 8;
            unint64_t v117 = (((unint64_t)v51 + 63) >> 3) & 0x3FFFFFF8;
            while (v117)
            {
              unint64_t v118 = *(void *)(v120 - 8 + v117);
              unint64_t v119 = *(void *)(v116 + v117);
              v117 -= 8;
              if (v118 != v119)
              {
                if (v118 > v119) {
                  goto LABEL_187;
                }
                goto LABEL_111;
              }
            }
          }
          else if (!v96)
          {
LABEL_187:
            uint64_t v60 = a1 + 304;
            uint64_t v61 = *(void **)(a1 + 312);
            if (v61 != *(void **)(a1 + 304)) {
              goto LABEL_197;
            }
LABEL_188:
            uint64_t v101 = *(unsigned int *)(a1 + 324);
            if (v101)
            {
              uint64_t v102 = 0;
              uint64_t v103 = 8 * v101;
              uint64_t v104 = v61;
              while (*v104 != a2)
              {
                if (*v104 == -2) {
                  uint64_t v102 = v104;
                }
                ++v104;
                v103 -= 8;
                if (!v103)
                {
                  if (!v102) {
                    goto LABEL_195;
                  }
                  char v68 = 0;
                  *uint64_t v102 = a2;
                  --*(_DWORD *)(a1 + 328);
                  goto LABEL_225;
                }
              }
LABEL_224:
              char v68 = 0;
              goto LABEL_225;
            }
LABEL_195:
            if (v101 < *(_DWORD *)(a1 + 320))
            {
              char v68 = 0;
              *(_DWORD *)(a1 + 324) = v101 + 1;
              v61[v101] = a2;
LABEL_225:
              unint64_t v49 = v67;
              goto LABEL_226;
            }
LABEL_197:
            int v105 = *(_DWORD *)(v60 + 20);
            unsigned int v106 = *(_DWORD *)(v60 + 16);
            if (3 * v106 <= 4 * (v105 - *(_DWORD *)(v60 + 24)))
            {
              if (v106 >= 0x40) {
                v106 *= 2;
              }
              else {
                unsigned int v106 = 128;
              }
            }
            else if (v106 - v105 >= v106 >> 3)
            {
              goto LABEL_199;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v60, v106);
            unsigned int v106 = *(_DWORD *)(v60 + 16);
LABEL_199:
            unsigned int v107 = v106 - 1;
            uint64_t v108 = *(void *)(v60 + 8);
            unsigned int v109 = (v106 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            uint64_t v110 = (void *)(v108 + 8 * v109);
            uint64_t v111 = *v110;
            if (*v110 == -1)
            {
              unsigned int v112 = 0;
LABEL_218:
              if (v112) {
                uint64_t v110 = v112;
              }
              if (*v110 != a2)
              {
                if (*v110 == -2) {
                  --*(_DWORD *)(v60 + 24);
                }
                else {
                  ++*(_DWORD *)(v60 + 20);
                }
                char v68 = 0;
                *uint64_t v110 = a2;
                goto LABEL_225;
              }
            }
            else
            {
              unsigned int v112 = 0;
              int v113 = 1;
              while (v111 != a2)
              {
                if (v112) {
                  BOOL v114 = 0;
                }
                else {
                  BOOL v114 = v111 == -2;
                }
                if (v114) {
                  unsigned int v112 = v110;
                }
                unsigned int v115 = v109 + v113++;
                unsigned int v109 = v115 & v107;
                uint64_t v110 = (void *)(v108 + 8 * (v115 & v107));
                uint64_t v111 = *v110;
                if (*v110 == -1) {
                  goto LABEL_218;
                }
              }
            }
            goto LABEL_224;
          }
          goto LABEL_111;
        }
      }
      else
      {
        LOBYTE(v52) = v48 - 1;
      }
      if (v49 && ((1 << v52) & v49) == 0) {
        return 0;
      }
      uint64_t v58 = (uint64_t)(v49 << -(char)v48) >> -(char)v48;
      uint64_t v59 = (uint64_t)(*v46 << -(char)v48) >> -(char)v48;
      if (v58 >= v59)
      {
        uint64_t v60 = a1 + 304;
        unsigned int v66 = *(void **)(a1 + 304);
        uint64_t v61 = *(void **)(a1 + 312);
        if (v58 > v59)
        {
          unint64_t v67 = v49;
          if (v61 != v66) {
            goto LABEL_197;
          }
          goto LABEL_188;
        }
        if (v61 != v66) {
          goto LABEL_131;
        }
        goto LABEL_112;
      }
LABEL_111:
      uint64_t v60 = a1 + 304;
      uint64_t v61 = *(void **)(a1 + 312);
      if (v61 != *(void **)(a1 + 304)) {
        goto LABEL_131;
      }
LABEL_112:
      uint64_t v62 = *(unsigned int *)(a1 + 324);
      if (v62)
      {
        v63 = 0;
        uint64_t v64 = 8 * v62;
        unsigned int v65 = v61;
        while (*v65 != a2)
        {
          if (*v65 == -2) {
            v63 = v65;
          }
          ++v65;
          v64 -= 8;
          if (!v64)
          {
            if (!v63) {
              goto LABEL_119;
            }
            void *v63 = a2;
            --*(_DWORD *)(a1 + 328);
            goto LABEL_151;
          }
        }
        goto LABEL_151;
      }
LABEL_119:
      if (v62 < *(_DWORD *)(a1 + 320))
      {
        *(_DWORD *)(a1 + 324) = v62 + 1;
        v61[v62] = a2;
LABEL_151:
        uint64_t v80 = *(void *)(a1 + 312);
        if (v80 == *(void *)(a1 + 304))
        {
          uint64_t v81 = *(unsigned int *)(a1 + 324);
          if (v81)
          {
            BOOL v82 = 0;
            uint64_t v83 = 8 * v81;
            int v84 = *(void **)(a1 + 312);
            while (*v84 != v23)
            {
              if (*v84 == -2) {
                BOOL v82 = v84;
              }
              ++v84;
              v83 -= 8;
              if (!v83)
              {
                if (!v82) {
                  goto LABEL_159;
                }
                char v68 = 0;
                void *v82 = v23;
                --*(_DWORD *)(a1 + 328);
                goto LABEL_226;
              }
            }
            goto LABEL_181;
          }
LABEL_159:
          if (v81 < *(_DWORD *)(a1 + 320))
          {
            char v68 = 0;
            *(_DWORD *)(a1 + 324) = v81 + 1;
            *(void *)(v80 + 8 * v81) = v23;
            goto LABEL_226;
          }
        }
        int v85 = *(_DWORD *)(v60 + 20);
        unsigned int v86 = *(_DWORD *)(v60 + 16);
        if (3 * v86 <= 4 * (v85 - *(_DWORD *)(v60 + 24)))
        {
          if (v86 >= 0x40) {
            v86 *= 2;
          }
          else {
            unsigned int v86 = 128;
          }
        }
        else if (v86 - v85 >= v86 >> 3)
        {
LABEL_163:
          unsigned int v87 = v86 - 1;
          uint64_t v88 = *(void *)(v60 + 8);
          unsigned int v89 = (v86 - 1) & ((v23 >> 4) ^ (v23 >> 9));
          uint64_t v90 = (void *)(v88 + 8 * v89);
          uint64_t v91 = *v90;
          if (*v90 != -1)
          {
            int v92 = 0;
            int v93 = 1;
            while (v91 != v23)
            {
              if (v92) {
                BOOL v94 = 0;
              }
              else {
                BOOL v94 = v91 == -2;
              }
              if (v94) {
                int v92 = v90;
              }
              unsigned int v95 = v89 + v93++;
              unsigned int v89 = v95 & v87;
              uint64_t v90 = (void *)(v88 + 8 * (v95 & v87));
              uint64_t v91 = *v90;
              if (*v90 == -1) {
                goto LABEL_175;
              }
            }
LABEL_181:
            char v68 = 0;
            goto LABEL_226;
          }
          int v92 = 0;
LABEL_175:
          if (v92) {
            uint64_t v90 = v92;
          }
          if (*v90 == v23) {
            goto LABEL_181;
          }
          if (*v90 == -2) {
            --*(_DWORD *)(v60 + 24);
          }
          else {
            ++*(_DWORD *)(v60 + 20);
          }
          char v68 = 0;
          *uint64_t v90 = v23;
LABEL_226:
          if (v48 >= 0x41 && v49) {
            MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
          }
          if ((v68 & 1) == 0)
          {
            BOOL v8 = *(void **)(a1 + 208);
            uint64_t v7 = *(void **)(a1 + 216);
            goto LABEL_43;
          }
          return 0;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v60, v86);
        unsigned int v86 = *(_DWORD *)(v60 + 16);
        goto LABEL_163;
      }
LABEL_131:
      int v69 = *(_DWORD *)(v60 + 20);
      unsigned int v70 = *(_DWORD *)(v60 + 16);
      if (3 * v70 <= 4 * (v69 - *(_DWORD *)(v60 + 24)))
      {
        if (v70 >= 0x40) {
          v70 *= 2;
        }
        else {
          unsigned int v70 = 128;
        }
      }
      else if (v70 - v69 >= v70 >> 3)
      {
        goto LABEL_133;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v60, v70);
      unsigned int v70 = *(_DWORD *)(v60 + 16);
LABEL_133:
      unsigned int v71 = v70 - 1;
      uint64_t v72 = *(void *)(v60 + 8);
      unsigned int v73 = (v70 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v74 = (void *)(v72 + 8 * v73);
      uint64_t v75 = *v74;
      if (*v74 == -1)
      {
        unsigned int v76 = 0;
LABEL_145:
        if (v76) {
          uint64_t v74 = v76;
        }
        if (*v74 != a2)
        {
          if (*v74 == -2) {
            --*(_DWORD *)(v60 + 24);
          }
          else {
            ++*(_DWORD *)(v60 + 20);
          }
          *uint64_t v74 = a2;
        }
      }
      else
      {
        unsigned int v76 = 0;
        int v77 = 1;
        while (v75 != a2)
        {
          if (v76) {
            BOOL v78 = 0;
          }
          else {
            BOOL v78 = v75 == -2;
          }
          if (v78) {
            unsigned int v76 = v74;
          }
          unsigned int v79 = v73 + v77++;
          unsigned int v73 = v79 & v71;
          uint64_t v74 = (void *)(v72 + 8 * (v79 & v71));
          uint64_t v75 = *v74;
          if (*v74 == -1) {
            goto LABEL_145;
          }
        }
      }
      goto LABEL_151;
    }
  }
  return result;
}

uint64_t sub_1CC4B846C(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)(*(void *)a2 + 8) != 13) {
    return 0;
  }
  unsigned int v3 = a2[16];
  uint64_t result = 1;
  if (v3 <= 0x41)
  {
    if (v3 == 21 || v3 == 60) {
      return result;
    }
    return 0;
  }
  if (v3 == 66) {
    return *(_DWORD *)(a1 + 28) == llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
  }
  if (v3 != 77)
  {
    if (v3 == 84)
    {
      return sub_1CBF5BCC4((uint64_t)a2, 67);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CC4B852C(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v3 == 61)
  {
    unsigned int v4 = *(llvm::Type ***)(a2 - 64);
LABEL_7:
    unsigned int v5 = *v4;
    if ((*((_DWORD *)*v4 + 2) & 0xFE) == 0x12) {
      unsigned int v5 = (llvm::Type *)**((void **)v5 + 2);
    }
    return *(_DWORD *)(a1 + 28) >= llvm::Type::getPrimitiveSizeInBits(v5);
  }
  if (a2 && v3 == 29)
  {
    unsigned int v4 = *(llvm::Type ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    goto LABEL_7;
  }
  if (a2 && v3 == 67)
  {
    uint64_t v7 = *(llvm::Type **)a2;
    if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
      uint64_t v7 = (llvm::Type *)**((void **)v7 + 2);
    }
    return *(_DWORD *)(a1 + 28) < llvm::Type::getPrimitiveSizeInBits(v7);
  }
  else
  {
    if (a2 && v3 == 31)
    {
      int v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0) {
        uint64_t v9 = *(llvm::Type ****)(a2 - 8);
      }
      else {
        uint64_t v9 = (llvm::Type ***)(a2 - 32 * (v8 & 0x7FFFFFF));
      }
      int v10 = *v9;
    }
    else
    {
      if (!a2 || v3 != 81) {
        return v3 == 84;
      }
      if ((*(_WORD *)(a2 + 18) & 0x3Eu) - 38 < 4) {
        return 1;
      }
      int v10 = *(llvm::Type ***)(a2 - 64);
    }
    unint64_t v11 = *v10;
    if ((*((_DWORD *)*v10 + 2) & 0xFE) == 0x12) {
      unint64_t v11 = (llvm::Type *)**((void **)v11 + 2);
    }
    return *(_DWORD *)(a1 + 28) > llvm::Type::getPrimitiveSizeInBits(v11);
  }
}

BOOL sub_1CC4B8688(uint64_t a1, llvm::Type *this)
{
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 == 7 || v2 == 15) {
    return 1;
  }
  if (v2 != 13 || v2 >> 8 == 1 || v2 >> 8 > *(_DWORD *)(a1 + 40)) {
    return 0;
  }
  if ((v2 & 0xFE) == 0x12) {
    this = (llvm::Type *)**((void **)this + 2);
  }
  return *(_DWORD *)(a1 + 28) >= llvm::Type::getPrimitiveSizeInBits(this);
}

void sub_1CC4B8718(uint64_t *a1, uint64_t a2, llvm::Instruction *a3)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  *(void *)(v7 + 48) = *((void *)a3 + 5);
  *(void *)(v7 + 56) = (char *)a3 + 24;
  int v8 = (unsigned __int8 *)*((void *)a3 + 6);
  v46[0] = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)v46, v8, 2);
    uint64_t v9 = v46[0];
  }
  else
  {
    uint64_t v9 = 0;
  }
  sub_1CB8461A4(v7, 0, v9);
  if (!v46[0]) {
    goto LABEL_4;
  }
  int v38 = *(unsigned __int8 *)v46[0];
  if ((v38 - 4) > 0x1E)
  {
    if ((v38 - 3) >= 0xFFFFFFFE) {
      uint64_t v41 = v46[0];
    }
    else {
      uint64_t v41 = 0;
    }
    if ((v38 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v40 = v41 + 8;
LABEL_80:
      v49[0] = (const char *)v46;
      sub_1CC5FA668(v40 + 16, v49);
      goto LABEL_4;
    }
    if (v38 == 3) {
      *(void *)(v46[0] + 8) = 0;
    }
  }
  else if ((*(unsigned char *)(v46[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v46[0] + 12))
  {
    uint64_t v39 = *(void *)(v46[0] + 16);
    if ((v39 & 4) != 0)
    {
      unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFF8;
      if (v40) {
        goto LABEL_80;
      }
    }
  }
LABEL_4:
  if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = *(unsigned __int8 **)(a2 + 48);
    unsigned int v48 = v11;
    if (v11)
    {
      llvm::MetadataTracking::track((uint64_t)&v48, v11, 2);
      uint64_t v12 = (uint64_t)v48;
    }
    else
    {
      uint64_t v12 = 0;
    }
    sub_1CB8461A4(v10, 0, v12);
    if (v48)
    {
      int v13 = *v48;
      if ((v13 - 4) > 0x1E)
      {
        if ((v13 - 3) >= 0xFFFFFFFE) {
          unsigned int v35 = v48;
        }
        else {
          unsigned int v35 = 0;
        }
        if ((v13 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v36 = (unint64_t)(v35 + 8);
LABEL_56:
          v49[0] = (const char *)&v48;
          sub_1CC5FA668(v36 + 16, v49);
          goto LABEL_12;
        }
        if (v13 == 3) {
          *((void *)v48 + 1) = 0;
        }
      }
      else if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
      {
        uint64_t v42 = *((void *)v48 + 2);
        if ((v42 & 4) != 0)
        {
          unint64_t v36 = v42 & 0xFFFFFFFFFFFFFFF8;
          if (v36) {
            goto LABEL_56;
          }
        }
      }
    }
  }
LABEL_12:
  uint64_t v14 = *a1;
  uint64_t v15 = *(void *)(v6 + 56);
  __int16 v47 = 257;
  uint64_t v16 = (unsigned __int8 *)a2;
  if (*(void *)a2 != v15)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      uint64_t v16 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v14 + 72)
                                                                                            + 224))(*(void *)(v14 + 72), 39, a2, v15);
      if (v16) {
        BOOL v20 = v16[16] >= 0x1Cu;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(v14 + 80) + 16))(*(void *)(v14 + 80), v16, v46, *(void *)(v14 + 48), *(void *)(v14 + 56));
        uint64_t v43 = *(unsigned int *)(v14 + 8);
        if (v43)
        {
          uint64_t v44 = *(void *)v14;
          uint64_t v45 = v44 + 16 * v43;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v16, *(_DWORD *)v44, *(llvm::MDNode **)(v44 + 8));
            v44 += 16;
          }
          while (v44 != v45);
        }
      }
    }
    else
    {
      __int16 v50 = 257;
      uint64_t v16 = (unsigned __int8 *)llvm::CastInst::Create(39, a2, v15, v49, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(v14 + 80) + 16))(*(void *)(v14 + 80), v16, v46, *(void *)(v14 + 48), *(void *)(v14 + 56));
      uint64_t v17 = *(unsigned int *)(v14 + 8);
      if (v17)
      {
        uint64_t v18 = *(void *)v14;
        uint64_t v19 = v18 + 16 * v17;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v16, *(_DWORD *)v18, *(llvm::MDNode **)(v18 + 8));
          v18 += 16;
        }
        while (v18 != v19);
      }
    }
  }
  if (!v16 || v16[16] < 0x1Cu) {
    goto LABEL_65;
  }
  if (*(unsigned char *)(a2 + 16) == 21) {
    llvm::Instruction::moveBefore((llvm::Instruction *)v16, a3);
  }
  else {
    llvm::Instruction::moveAfter((llvm::Instruction *)v16, a3);
  }
  uint64_t v21 = *(void *)(v6 + 72);
  uint64_t v22 = *(unsigned int *)(v6 + 84);
  if (v21 != *(void *)(v6 + 64))
  {
    unsigned int v26 = *(_DWORD *)(v6 + 80);
    goto LABEL_38;
  }
  if (!v22)
  {
LABEL_35:
    unsigned int v26 = *(_DWORD *)(v6 + 80);
    if (v22 < v26)
    {
      *(_DWORD *)(v6 + 84) = v22 + 1;
      *(void *)(v21 + 8 * v22) = v16;
      goto LABEL_65;
    }
LABEL_38:
    if (3 * v26 <= 4 * ((int)v22 - *(_DWORD *)(v6 + 88)))
    {
      if (v26 >= 0x40) {
        v26 *= 2;
      }
      else {
        unsigned int v26 = 128;
      }
    }
    else if (v26 - v22 >= v26 >> 3)
    {
      goto LABEL_40;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v6 + 64), v26);
    unsigned int v26 = *(_DWORD *)(v6 + 80);
    uint64_t v21 = *(void *)(v6 + 72);
LABEL_40:
    unsigned int v27 = v26 - 1;
    unsigned int v28 = (v26 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    uint64_t v29 = (unsigned __int8 **)(v21 + 8 * v28);
    uint64_t v30 = *v29;
    if (*v29 == (unsigned __int8 *)-1)
    {
      uint64_t v31 = 0;
LABEL_58:
      if (v31) {
        uint64_t v37 = v31;
      }
      else {
        uint64_t v37 = v29;
      }
      if (*v37 != v16)
      {
        if (*v37 == (unsigned __int8 *)-2) {
          --*(_DWORD *)(v6 + 88);
        }
        else {
          ++*(_DWORD *)(v6 + 84);
        }
        void *v37 = v16;
      }
    }
    else
    {
      uint64_t v31 = 0;
      int v32 = 1;
      while (v30 != v16)
      {
        if (v31) {
          BOOL v33 = 0;
        }
        else {
          BOOL v33 = v30 == (unsigned __int8 *)-2;
        }
        if (v33) {
          uint64_t v31 = v29;
        }
        unsigned int v34 = v28 + v32++;
        unsigned int v28 = v34 & v27;
        uint64_t v29 = (unsigned __int8 **)(v21 + 8 * (v34 & v27));
        uint64_t v30 = *v29;
        if (*v29 == (unsigned __int8 *)-1) {
          goto LABEL_58;
        }
      }
    }
    goto LABEL_65;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 8 * v22;
  uint64_t v25 = *(unsigned __int8 ***)(v6 + 72);
  while (*v25 != v16)
  {
    if (*v25 == (unsigned __int8 *)-2) {
      uint64_t v23 = v25;
    }
    ++v25;
    v24 -= 8;
    if (!v24)
    {
      if (!v23) {
        goto LABEL_35;
      }
      *uint64_t v23 = v16;
      --*(_DWORD *)(v6 + 88);
      break;
    }
  }
LABEL_65:
  sub_1CC4B8BD4(v6, a2, v16);
}

void sub_1CC4B8BD4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  void v29[4] = *MEMORY[0x1E4F143B8];
  unsigned int v28 = 0;
  if (a3[16] <= 0x1Bu) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = a3;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    char v8 = 1;
    do
    {
      uint64_t v9 = *(void *)(v6 + 24);
      if (v5
        && llvm::Instruction::isIdenticalToWhenDefined(*(llvm::Instruction **)(v6 + 24), (const llvm::Instruction *)v5)&& (v5[17] ^ *(unsigned __int8 *)(v9 + 17)) < 2)
      {
        char v8 = 0;
      }
      else
      {
        if (v28 >= 4uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v29[v28++] = v9;
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
    if (v28)
    {
      uint64_t v10 = (llvm::User **)v29;
      uint64_t v11 = 8 * v28;
      do
      {
        uint64_t v12 = *v10++;
        llvm::User::replaceUsesOfWith(v12, (llvm::Value *)a2, (llvm::Value *)a3);
        v11 -= 8;
      }
      while (v11);
    }
    if ((v8 & 1) == 0) {
      return;
    }
  }
  if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu) {
    return;
  }
  uint64_t v13 = *(void *)(a1 + 168);
  uint64_t v14 = *(unsigned int *)(a1 + 180);
  if (v13 != *(void *)(a1 + 160))
  {
    unsigned int v18 = *(_DWORD *)(a1 + 176);
    goto LABEL_32;
  }
  if (!v14)
  {
LABEL_29:
    unsigned int v18 = *(_DWORD *)(a1 + 176);
    if (v14 < v18)
    {
      *(_DWORD *)(a1 + 180) = v14 + 1;
      *(void *)(v13 + 8 * v14) = a2;
      return;
    }
LABEL_32:
    if (3 * v18 <= 4 * ((int)v14 - *(_DWORD *)(a1 + 184)))
    {
      if (v18 >= 0x40) {
        v18 *= 2;
      }
      else {
        unsigned int v18 = 128;
      }
    }
    else if (v18 - v14 >= v18 >> 3)
    {
      goto LABEL_34;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 160), v18);
    unsigned int v18 = *(_DWORD *)(a1 + 176);
    uint64_t v13 = *(void *)(a1 + 168);
LABEL_34:
    unsigned int v19 = v18 - 1;
    unsigned int v20 = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v21 = (void *)(v13 + 8 * v20);
    uint64_t v22 = *v21;
    if (*v21 == -1)
    {
      uint64_t v23 = 0;
LABEL_46:
      if (v23) {
        unsigned int v27 = v23;
      }
      else {
        unsigned int v27 = v21;
      }
      if (*v27 != a2)
      {
        if (*v27 == -2) {
          --*(_DWORD *)(a1 + 184);
        }
        else {
          ++*(_DWORD *)(a1 + 180);
        }
        *unsigned int v27 = a2;
      }
    }
    else
    {
      uint64_t v23 = 0;
      int v24 = 1;
      while (v22 != a2)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == -2;
        }
        if (v25) {
          uint64_t v23 = v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & v19;
        uint64_t v21 = (void *)(v13 + 8 * (v26 & v19));
        uint64_t v22 = *v21;
        if (*v21 == -1) {
          goto LABEL_46;
        }
      }
    }
    return;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = *(void **)(a1 + 168);
  while (*v17 != a2)
  {
    if (*v17 == -2) {
      uint64_t v15 = v17;
    }
    ++v17;
    v16 -= 8;
    if (!v16)
    {
      if (!v15) {
        goto LABEL_29;
      }
      *uint64_t v15 = a2;
      --*(_DWORD *)(a1 + 184);
      return;
    }
  }
}

llvm::Value *sub_1CC4B8E9C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a2[16] < 0x1Cu) {
    return 0;
  }
  int v3 = (llvm::Value *)a2;
  if (*(unsigned char *)(*(void *)a2 + 8) != 13) {
    return 0;
  }
  uint64_t v6 = *a1;
  uint64_t v8 = *(void *)(*a1 + 248);
  uint64_t v7 = *(void *)(*a1 + 256);
  if (v7 == v8)
  {
    uint64_t v9 = *(unsigned int *)(v6 + 268);
    uint64_t v10 = (unsigned __int8 **)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 8 * v9;
      while (*(unsigned __int8 **)(v7 + v11) != a2)
      {
        v11 += 8;
        if (v12 == v11) {
          goto LABEL_21;
        }
      }
      uint64_t v10 = (unsigned __int8 **)(v7 + v11);
    }
LABEL_21:
    uint64_t v8 = *(void *)(*a1 + 256);
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(v6 + 264);
    int v14 = v13 - 1;
    unsigned int v15 = (v13 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v10 = (unsigned __int8 **)(v7 + 8 * v15);
    uint64_t v16 = *v10;
    if (*v10 == (unsigned __int8 *)-1)
    {
      uint64_t v17 = 0;
LABEL_60:
      if (v17) {
        uint64_t v10 = v17;
      }
      if (*v10 != a2) {
        uint64_t v10 = (unsigned __int8 **)(v7 + 8 * v13);
      }
    }
    else
    {
      uint64_t v17 = 0;
      int v18 = 1;
      while (v16 != a2)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v16 == (unsigned __int8 *)-2;
        }
        if (v19) {
          uint64_t v17 = v10;
        }
        unsigned int v20 = v15 + v18++;
        unsigned int v15 = v20 & v14;
        uint64_t v10 = (unsigned __int8 **)(v7 + 8 * (v20 & v14));
        uint64_t v16 = *v10;
        if (*v10 == (unsigned __int8 *)-1) {
          goto LABEL_60;
        }
      }
    }
  }
  BOOL v19 = v7 == v8;
  uint64_t v21 = 264;
  if (v19) {
    uint64_t v21 = 268;
  }
  if (v10 == (unsigned __int8 **)(v7 + 8 * *(unsigned int *)(v6 + v21)))
  {
    uint64_t v23 = *(void *)(v6 + 64);
    uint64_t v22 = *(void *)(v6 + 72);
    if (v22 == v23)
    {
      uint64_t v24 = *(unsigned int *)(v6 + 84);
      BOOL v25 = (unsigned __int8 **)(v22 + 8 * v24);
      if (v24)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 8 * v24;
        while (*(unsigned __int8 **)(v22 + v26) != a2)
        {
          v26 += 8;
          if (v27 == v26) {
            goto LABEL_43;
          }
        }
        BOOL v25 = (unsigned __int8 **)(v22 + v26);
      }
LABEL_43:
      uint64_t v23 = *(void *)(v6 + 72);
    }
    else
    {
      uint64_t v28 = *(unsigned int *)(v6 + 80);
      int v29 = v28 - 1;
      unsigned int v30 = (v28 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      BOOL v25 = (unsigned __int8 **)(v22 + 8 * v30);
      uint64_t v31 = *v25;
      if (*v25 == (unsigned __int8 *)-1)
      {
        int v32 = 0;
LABEL_65:
        if (v32) {
          BOOL v25 = v32;
        }
        if (*v25 != a2) {
          BOOL v25 = (unsigned __int8 **)(v22 + 8 * v28);
        }
      }
      else
      {
        int v32 = 0;
        int v33 = 1;
        while (v31 != a2)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 == (unsigned __int8 *)-2;
          }
          if (v34) {
            int v32 = v25;
          }
          unsigned int v35 = v30 + v33++;
          unsigned int v30 = v35 & v29;
          BOOL v25 = (unsigned __int8 **)(v22 + 8 * (v35 & v29));
          uint64_t v31 = *v25;
          if (*v25 == (unsigned __int8 *)-1) {
            goto LABEL_65;
          }
        }
      }
    }
    BOOL v19 = v22 == v23;
    uint64_t v36 = 80;
    if (v19) {
      uint64_t v36 = 84;
    }
    if (v25 == (unsigned __int8 **)(v22 + 8 * *(unsigned int *)(v6 + v36))) {
      return 0;
    }
  }
  int v38 = *(uint64_t **)(v6 + 32);
  v72[0] = (const char *)a2;
  v70[0] = 0;
  char v39 = sub_1CD420258(v38, v72, v70);
  uint64_t result = 0;
  if ((v39 & 1) == 0)
  {
    uint64_t v40 = a1[1];
    *(void *)(v40 + 48) = *((void *)v3 + 5);
    *(void *)(v40 + 56) = (char *)v3 + 24;
    uint64_t v41 = (unsigned __int8 *)*((void *)v3 + 6);
    v70[0] = v41;
    if (v41)
    {
      llvm::MetadataTracking::track((uint64_t)v70, v41, 2);
      uint64_t v42 = v70[0];
    }
    else
    {
      uint64_t v42 = 0;
    }
    sub_1CB8461A4(v40, 0, v42);
    if (!v70[0]) {
      goto LABEL_53;
    }
    int v62 = *(unsigned __int8 *)v70[0];
    if ((v62 - 4) > 0x1E)
    {
      if ((v62 - 3) >= 0xFFFFFFFE) {
        uint64_t v65 = v70[0];
      }
      else {
        uint64_t v65 = 0;
      }
      if ((v62 - 3) < 0xFFFFFFFE)
      {
        if (v62 == 3) {
          *(void *)(v70[0] + 8) = 0;
        }
LABEL_53:
        uint64_t v43 = (uint64_t *)a1[1];
        __int16 v71 = 257;
        if (*(void *)v3 != a3)
        {
          if (*((unsigned __int8 *)v3 + 16) <= 0x14u)
          {
            int v3 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t))(*(void *)v43[9] + 224))(v43[9], 38, v3, a3);
            if (v3) {
              BOOL v47 = *((unsigned __int8 *)v3 + 16) >= 0x1Cu;
            }
            else {
              BOOL v47 = 0;
            }
            if (v47)
            {
              (*(void (**)(uint64_t, llvm::Value *, void *, uint64_t, uint64_t))(*(void *)v43[10] + 16))(v43[10], v3, v70, v43[6], v43[7]);
              uint64_t v67 = *((unsigned int *)v43 + 2);
              if (v67)
              {
                uint64_t v68 = *v43;
                uint64_t v69 = *v43 + 16 * v67;
                do
                {
                  llvm::Instruction::setMetadata(v3, *(_DWORD *)v68, *(llvm::MDNode **)(v68 + 8));
                  v68 += 16;
                }
                while (v68 != v69);
              }
            }
          }
          else
          {
            __int16 v73 = 257;
            int v3 = llvm::CastInst::Create(38, (uint64_t)v3, a3, v72, 0);
            (*(void (**)(uint64_t, llvm::Value *, void *, uint64_t, uint64_t))(*(void *)v43[10] + 16))(v43[10], v3, v70, v43[6], v43[7]);
            uint64_t v44 = *((unsigned int *)v43 + 2);
            if (v44)
            {
              uint64_t v45 = *v43;
              uint64_t v46 = *v43 + 16 * v44;
              do
              {
                llvm::Instruction::setMetadata(v3, *(_DWORD *)v45, *(llvm::MDNode **)(v45 + 8));
                v45 += 16;
              }
              while (v45 != v46);
            }
          }
        }
        if (*((unsigned __int8 *)v3 + 16) <= 0x1Bu) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = v3;
        }
        if (!result) {
          return result;
        }
        uint64_t v48 = *(void *)(v6 + 72);
        uint64_t v49 = *(unsigned int *)(v6 + 84);
        if (v48 == *(void *)(v6 + 64))
        {
          if (v49)
          {
            __int16 v50 = 0;
            uint64_t v51 = 8 * v49;
            unsigned int v52 = *(llvm::Value ***)(v6 + 72);
            while (*v52 != result)
            {
              if (*v52 == (llvm::Value *)-2) {
                __int16 v50 = v52;
              }
              ++v52;
              v51 -= 8;
              if (!v51)
              {
                if (!v50) {
                  goto LABEL_85;
                }
                *__int16 v50 = result;
                --*(_DWORD *)(v6 + 88);
                return result;
              }
            }
            return result;
          }
LABEL_85:
          unsigned int v53 = *(_DWORD *)(v6 + 80);
          if (v49 < v53)
          {
            *(_DWORD *)(v6 + 84) = v49 + 1;
            *(void *)(v48 + 8 * v49) = result;
            return result;
          }
        }
        else
        {
          unsigned int v53 = *(_DWORD *)(v6 + 80);
        }
        if (3 * v53 <= 4 * ((int)v49 - *(_DWORD *)(v6 + 88)))
        {
          if (v53 >= 0x40) {
            v53 *= 2;
          }
          else {
            unsigned int v53 = 128;
          }
        }
        else if (v53 - v49 >= v53 >> 3)
        {
          goto LABEL_90;
        }
        unsigned int v66 = result;
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v6 + 64), v53);
        uint64_t result = v66;
        unsigned int v53 = *(_DWORD *)(v6 + 80);
        uint64_t v48 = *(void *)(v6 + 72);
LABEL_90:
        unsigned int v54 = v53 - 1;
        unsigned int v55 = (v53 - 1) & ((result >> 4) ^ (result >> 9));
        unint64_t v56 = (llvm::Value **)(v48 + 8 * v55);
        unsigned int v57 = *v56;
        if (*v56 == (llvm::Value *)-1)
        {
          uint64_t v58 = 0;
LABEL_102:
          if (v58) {
            unint64_t v56 = v58;
          }
          if (*v56 != result)
          {
            if (*v56 == (llvm::Value *)-2) {
              --*(_DWORD *)(v6 + 88);
            }
            else {
              ++*(_DWORD *)(v6 + 84);
            }
            *unint64_t v56 = result;
          }
        }
        else
        {
          uint64_t v58 = 0;
          int v59 = 1;
          while (v57 != result)
          {
            if (v58) {
              BOOL v60 = 0;
            }
            else {
              BOOL v60 = v57 == (llvm::Value *)-2;
            }
            if (v60) {
              uint64_t v58 = v56;
            }
            unsigned int v61 = v55 + v59++;
            unsigned int v55 = v61 & v54;
            unint64_t v56 = (llvm::Value **)(v48 + 8 * (v61 & v54));
            unsigned int v57 = *v56;
            if (*v56 == (llvm::Value *)-1) {
              goto LABEL_102;
            }
          }
        }
        return result;
      }
      unint64_t v64 = v65 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v70[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v70[0] + 12)) {
        goto LABEL_53;
      }
      uint64_t v63 = *(void *)(v70[0] + 16);
      if ((v63 & 4) == 0) {
        goto LABEL_53;
      }
      unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8;
      if (!v64) {
        goto LABEL_53;
      }
    }
    v72[0] = (const char *)v70;
    sub_1CC5FA668(v64 + 16, v72);
    goto LABEL_53;
  }
  return result;
}

uint64_t sub_1CC4B9488()
{
  int v4 = 1;
  char v2 = 0;
  int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable type promotion pass";
  v1.n128_u64[1] = 27;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCD7678, "disable-type-promotion", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD7678, &dword_1CB82C000);
}

void sub_1CC4B9514(llvm *a1, llvm::PassRegistry *a2)
{
}

void sub_1CC4B95B4()
{
}

void sub_1CC4B96F8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2615860;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 59), 4);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 56), 4);
  char v2 = (void *)*((void *)a1 + 45);
  if (v2 != *((void **)a1 + 44)) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 41), 8);
  *(void *)a1 = &unk_1F260E110;
  int v3 = (void *)*((void *)a1 + 22);
  if (v3 != (void *)((char *)a1 + 192)) {
    free(v3);
  }
  int v4 = (void *)*((void *)a1 + 13);
  if (v4 != (void *)((char *)a1 + 120)) {
    free(v4);
  }
  unsigned int v5 = (void *)*((void *)a1 + 4);
  if (v5 != (void *)((char *)a1 + 48)) {
    free(v5);
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC4B97E0(llvm::Pass *a1)
{
  sub_1CC4B96F8(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4B9818(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2 + 144, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2 + 144, (uint64_t)&llvm::LiveVariables::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveVariables::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC4B992C(uint64_t a1, uint64_t a2)
{
  v460[2] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 280) = *(void *)(a2 + 40);
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(a1 + 264) = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 248) + 16) + 176))(*(void *)(*(void *)(a1 + 248) + 16));
  *(void *)(a1 + 272) = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 248) + 16) + 192))(*(void *)(*(void *)(a1 + 248) + 16));
  unsigned int v5 = *(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(v5, &llvm::LiveVariables::ID, 1);
  if (AnalysisPass)
  {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::LiveVariables::ID);
    unsigned int v5 = *(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24);
  }
  *(void *)(a1 + 288) = AnalysisPass;
  uint64_t v7 = llvm::PMDataManager::findAnalysisPass(v5, &llvm::LiveIntervals::ID, 1);
  if (v7)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LiveIntervals::ID);
    unsigned int v5 = *(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24);
  }
  uint64_t v441 = (llvm::FunctionPass *)a1;
  *(void *)(a1 + 296) = v7;
  uint64_t v8 = llvm::PMDataManager::findAnalysisPass(v5, &llvm::AAResultsWrapperPass::ID, 1);
  if (v8
    && (uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::AAResultsWrapperPass::ID)) != 0)
  {
    uint64_t v10 = *(void *)(v9 + 32);
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)(a1 + 304) = v10;
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(v4 + 552);
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(llvm::LLVMContextImpl *****)a2)) {
    *(_DWORD *)(a1 + 312) = 0;
  }
  uint64_t v11 = *(void **)(**(void **)(a1 + 280) + 360);
  *v11 &= ~1uLL;
  uint64_t v12 = *(void *)(a1 + 248);
  **(void **)(v12 + 360) |= 0x100uLL;
  uint64_t v455 = 1;
  for (uint64_t i = 8; i != 232; i += 56)
    *(_DWORD *)((char *)&v455 + i) = -1;
  uint64_t v14 = *(void *)(v12 + 328);
  uint64_t v418 = v12 + 320;
  if (v14 == v12 + 320)
  {
    char v434 = 0;
    goto LABEL_674;
  }
  char v434 = 0;
  unsigned int v15 = (_DWORD *)(a1 + 328);
  v419 = (_DWORD *)(a1 + 472);
  uint64_t v417 = (void **)(a1 + 352);
  uint64_t v422 = (unsigned int *)(a1 + 368);
  int v423 = (unsigned int *)(a1 + 372);
  v421 = (_DWORD *)(a1 + 448);
  v428 = (_DWORD *)(a1 + 328);
  do
  {
    uint64_t v16 = v441;
    *((void *)v441 + 40) = v14;
    unsigned int v446 = 0;
    int v17 = *((_DWORD *)v441 + 84);
    if (v17)
    {
      unsigned int v18 = *((_DWORD *)v441 + 86);
      if (v18 > 4 * v17 && v18 >= 0x41)
      {
        int v19 = 1 << (33 - __clz(v17 - 1));
        if (v19 <= 64) {
          int v20 = 64;
        }
        else {
          int v20 = v19;
        }
        goto LABEL_21;
      }
    }
    else
    {
      if (!*((_DWORD *)v441 + 85)) {
        goto LABEL_30;
      }
      unsigned int v18 = *((_DWORD *)v441 + 86);
      if (v18 > 0x40)
      {
        int v20 = 0;
LABEL_21:
        if (v20 == v18)
        {
          uint64_t v16 = v441;
          *((void *)v441 + 42) = 0;
          uint64_t v414 = 16 * v18;
          v415 = (void *)*((void *)v441 + 41);
          do
          {
            void *v415 = -4096;
            v415 += 2;
            v414 -= 16;
          }
          while (v414);
        }
        else
        {
          MEMORY[0x1D25D9CD0](*(void *)v15, 8);
          sub_1CB837D60(v15, v20);
          uint64_t v16 = v441;
        }
        goto LABEL_30;
      }
    }
    if (v18)
    {
      uint64_t v21 = *(void **)v15;
      uint64_t v22 = 16 * v18;
      do
      {
        void *v21 = -4096;
        v21 += 2;
        v22 -= 16;
      }
      while (v22);
    }
    uint64_t v16 = v441;
    *((void *)v441 + 42) = 0;
LABEL_30:
    int v23 = *((_DWORD *)v16 + 114);
    if (v23 || *((_DWORD *)v16 + 115))
    {
      uint64_t v408 = *((unsigned int *)v16 + 116);
      if (v408 > 4 * v23 && v408 >= 0x41)
      {
        sub_1CB83872C(v421);
        uint64_t v16 = v441;
      }
      else
      {
        if (v408)
        {
          long long v409 = *(_DWORD **)v421;
          uint64_t v410 = 8 * v408;
          do
          {
            *long long v409 = -1;
            v409 += 2;
            v410 -= 8;
          }
          while (v410);
        }
        uint64_t v16 = v441;
        *((void *)v441 + 57) = 0;
      }
    }
    int v24 = *((_DWORD *)v16 + 120);
    if (v24 || *((_DWORD *)v16 + 121))
    {
      uint64_t v411 = *((unsigned int *)v16 + 122);
      if (v411 > 4 * v24 && v411 >= 0x41)
      {
        sub_1CB83872C(v419);
        uint64_t v16 = v441;
      }
      else
      {
        if (v411)
        {
          v412 = *(_DWORD **)v419;
          uint64_t v413 = 8 * v411;
          do
          {
            _DWORD *v412 = -1;
            v412 += 2;
            v413 -= 8;
          }
          while (v413);
        }
        uint64_t v16 = v441;
        *((void *)v441 + 60) = 0;
      }
    }
    BOOL v25 = (void *)*((void *)v16 + 45);
    uint64_t v420 = v14;
    if (v25 == *((void **)v16 + 44)) {
      goto LABEL_35;
    }
    uint64_t v406 = *((unsigned int *)v441 + 92);
    if (v406 < 0x21 || 4 * (*((_DWORD *)v441 + 93) - *((_DWORD *)v441 + 94)) >= v406)
    {
      memset(v25, 255, 8 * v406);
LABEL_35:
      *(void *)int v423 = 0;
      goto LABEL_36;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear(v417);
LABEL_36:
    uint64_t v26 = *((void *)v441 + 40);
    uint64_t v27 = *(void *)(v26 + 56);
    uint64_t v445 = (llvm::MachineInstr *)v27;
    uint64_t v424 = v26 + 48;
    if (v27 == v26 + 48) {
      goto LABEL_648;
    }
    do
    {
      if (!v27 || (uint64_t v28 = v27, (*(unsigned char *)v27 & 4) == 0))
      {
        uint64_t v28 = v27;
        if ((*(_WORD *)(v27 + 44) & 8) != 0)
        {
          uint64_t v28 = v27;
          do
            uint64_t v28 = *(void *)(v28 + 8);
          while ((*(_WORD *)(v28 + 44) & 8) != 0);
        }
      }
      int v29 = *(llvm::MachineInstr **)(v28 + 8);
      uint64_t v444 = v29;
      int v30 = **(unsigned __int16 **)(v27 + 16);
      if ((v30 - 13) <= 4)
      {
        uint64_t v445 = v29;
        uint64_t v27 = (uint64_t)v29;
        continue;
      }
      if (v30 != 18)
      {
        uint64_t v35 = v27;
        goto LABEL_154;
      }
      uint64_t v31 = *(void *)(v27 + 32);
      int v438 = *(_DWORD *)(v31 + 4);
      unsigned int v32 = *(_DWORD *)(v27 + 40);
      v458 = v460;
      uint64_t v459 = 0x400000000;
      if (*((void *)v441 + 37))
      {
        LODWORD(v460[0]) = *(_DWORD *)(v31 + 4);
        unsigned int v33 = 1;
        LODWORD(v459) = 1;
        if (v32 == 1) {
          goto LABEL_129;
        }
        unsigned int v34 = 1;
        do
        {
          if (v33 >= HIDWORD(v459)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)&v458[4 * v33] = *(_DWORD *)(*(void *)(v27 + 32) + 32 * v34 + 4);
          unsigned int v33 = v459 + 1;
          LODWORD(v459) = v459 + 1;
          v34 += 2;
        }
        while (v34 < v32);
        unsigned int v32 = *(_DWORD *)(v27 + 40);
      }
      if (v32 >= 2)
      {
        char v36 = 0;
        unsigned int v37 = 1;
        int v38 = 3;
        v436 = (llvm::MachineInstr *)v27;
        while (1)
        {
          uint64_t v39 = *(void *)(v27 + 32);
          uint64_t v40 = (const llvm::MachineOperand *)(v39 + 32 * v37);
          if ((*(_DWORD *)v40 & 0x10000000) == 0) {
            break;
          }
LABEL_86:
          v37 += 2;
          v38 += 2;
          if (v37 >= v32) {
            goto LABEL_130;
          }
        }
        int v41 = *((_DWORD *)v40 + 1);
        char v442 = v36;
        if ((*(_DWORD *)v40 >> 26) & ~HIBYTE(*(_DWORD *)v40))
        {
          unsigned int v42 = v38;
          while (v42 < v32)
          {
            uint64_t v43 = v42;
            int v44 = *(_DWORD *)(v39 + 32 * v42 + 4);
            v42 += 2;
            if (v44 == v41)
            {
              *(_DWORD *)(v39 + 32 * v43) |= 0x4000000u;
              *(_DWORD *)v40 &= ~0x4000000u;
              goto LABEL_61;
            }
          }
          char v440 = 0;
        }
        else
        {
LABEL_61:
          char v440 = 1;
        }
        int v45 = *(_DWORD *)(v39 + 32 * (v37 + 1) + 16);
        uint64_t v46 = *(void *)(v27 + 24);
        uint64_t v47 = *(void *)(*((void *)v441 + 32) + 8) + 912;
        if ((*(_WORD *)(v27 + 44) & 4) == 0)
        {
          uint64_t v48 = *(llvm::MachineFunction **)(v46 + 32);
          uint64_t v49 = *(unsigned __int8 **)(v27 + 56);
          v448[0] = v49;
          if (v49) {
            llvm::MetadataTracking::track((uint64_t)v448, v49, 2);
          }
          uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v48, v47, v448, 0);
          if (!v448[0]) {
            goto LABEL_67;
          }
          int v66 = *v448[0];
          if ((v66 - 4) > 0x1E)
          {
            if ((v66 - 3) >= 0xFFFFFFFE) {
              uint64_t v72 = v448[0];
            }
            else {
              uint64_t v72 = 0;
            }
            if ((v66 - 3) < 0xFFFFFFFE)
            {
              if (v66 == 3) {
                *((void *)v448[0] + 1) = 0;
              }
              goto LABEL_67;
            }
            unint64_t v68 = (unint64_t)(v72 + 8);
          }
          else
          {
            if ((v448[0][1] & 0x7F) != 2 && !*((_DWORD *)v448[0] + 3)) {
              goto LABEL_67;
            }
            uint64_t v67 = *((void *)v448[0] + 2);
            if ((v67 & 4) == 0) {
              goto LABEL_67;
            }
            unint64_t v68 = v67 & 0xFFFFFFFFFFFFFFF8;
            if (!v68) {
              goto LABEL_67;
            }
          }
          uint64_t v451 = v448;
          sub_1CC5FA668(v68 + 16, &v451);
LABEL_67:
          uint64_t v51 = *(void *)(v46 + 40);
          *(void *)(MachineInstr + 24) = v51;
          uint64_t v52 = *(void *)(v51 + 32);
          uint64_t v53 = *(unsigned int *)(MachineInstr + 40);
          if (v53)
          {
            uint64_t v59 = *(void *)(MachineInstr + 32);
            uint64_t v60 = *(void *)(v52 + 40);
            uint64_t v61 = 32 * v53;
            do
            {
              if (!*(unsigned char *)v59)
              {
                uint64_t v62 = *(unsigned int *)(v59 + 4);
                if ((int)v62 >= 0) {
                  uint64_t v63 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v62);
                }
                else {
                  uint64_t v63 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
                }
                uint64_t v64 = *v63;
                if (*v63)
                {
                  uint64_t v65 = *(void *)(v64 + 16);
                  *(void *)(v64 + 16) = v59;
                  *(void *)(v59 + 16) = v65;
                  if (*(unsigned char *)(v59 + 3))
                  {
                    *(void *)(v59 + 24) = v64;
                  }
                  else
                  {
                    *(void *)(v59 + 24) = 0;
                    uint64_t v63 = (uint64_t *)(v65 + 24);
                  }
                }
                else
                {
                  *(void *)(v59 + 16) = v59;
                  *(void *)(v59 + 24) = 0;
                }
                uint64_t *v63 = v59;
              }
              v59 += 32;
              v61 -= 32;
            }
            while (v61);
          }
          uint64_t v54 = *(void *)(v52 + 728);
          if (v54) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 24))(v54, MachineInstr);
          }
          unint64_t v55 = *(void *)v27 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t MachineInstr = v55 | *(void *)MachineInstr & 7;
          *(void *)(MachineInstr + 8) = v27;
          *(void *)(v55 + 8) = MachineInstr;
          *(void *)uint64_t v27 = *(void *)v27 & 7 | MachineInstr;
LABEL_78:
          uint64_t v452 = 0;
          uint64_t v453 = 0;
          uint64_t v454 = 0;
          HIDWORD(v451) = v438;
          LODWORD(v451) = ((v45 & 0xFFF) << 8) | 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v48, (const llvm::MachineOperand *)&v451);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v48, v40);
          if ((v442 & 1) == 0)
          {
            **(_DWORD **)(MachineInstr + 32) |= 0x10000000u;
            v436 = (llvm::MachineInstr *)MachineInstr;
          }
          unsigned int v57 = (uint64_t *)*((void *)v441 + 36);
          char v58 = v440;
          if (!v57) {
            char v58 = 1;
          }
          char v36 = 1;
          if ((v58 & 1) == 0 && (v41 - 1) >= 0x3FFFFFFF)
          {
            llvm::LiveVariables::replaceKillInstruction(v57, v41, v27, MachineInstr);
            char v36 = 1;
          }
          unsigned int v15 = v428;
          goto LABEL_86;
        }
        uint64_t v48 = *(llvm::MachineFunction **)(v46 + 32);
        unint64_t v56 = *(unsigned __int8 **)(v27 + 56);
        v448[0] = v56;
        if (v56) {
          llvm::MetadataTracking::track((uint64_t)v448, v56, 2);
        }
        uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v48, v47, v448, 0);
        if (v448[0])
        {
          int v69 = *v448[0];
          if ((v69 - 4) > 0x1E)
          {
            if ((v69 - 3) >= 0xFFFFFFFE) {
              __int16 v73 = v448[0];
            }
            else {
              __int16 v73 = 0;
            }
            if ((v69 - 3) < 0xFFFFFFFE)
            {
              if (v69 == 3) {
                *((void *)v448[0] + 1) = 0;
              }
              goto LABEL_74;
            }
            unint64_t v71 = (unint64_t)(v73 + 8);
          }
          else
          {
            if ((v448[0][1] & 0x7F) != 2 && !*((_DWORD *)v448[0] + 3)) {
              goto LABEL_74;
            }
            uint64_t v70 = *((void *)v448[0] + 2);
            if ((v70 & 4) == 0) {
              goto LABEL_74;
            }
            unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFF8;
            if (!v71) {
              goto LABEL_74;
            }
          }
          uint64_t v451 = v448;
          sub_1CC5FA668(v71 + 16, &v451);
        }
LABEL_74:
        if (v46 + 48 != v27 && (*(_WORD *)(v27 + 44) & 4) != 0) {
          *(_WORD *)(MachineInstr + 44) |= 0xCu;
        }
        sub_1CC31973C((uint64_t *)(v46 + 40), (uint64_t *)v27, MachineInstr);
        goto LABEL_78;
      }
LABEL_129:
      char v36 = 0;
      v436 = (llvm::MachineInstr *)v27;
LABEL_130:
      uint64_t v35 = (uint64_t)v436;
      uint64_t v445 = v436;
      uint64_t v74 = v27;
      if ((*(unsigned char *)v27 & 4) == 0)
      {
        uint64_t v74 = v27;
        if ((*(_WORD *)(v27 + 44) & 8) != 0)
        {
          uint64_t v74 = v27;
          do
            uint64_t v74 = *(void *)(v74 + 8);
          while ((*(_WORD *)(v74 + 44) & 8) != 0);
        }
      }
      uint64_t v75 = *(unsigned char **)(v74 + 8);
      if ((v36 & 1) == 0)
      {
        *(void *)(v27 + 16) = *(void *)(*((void *)v441 + 32) + 8) + 480;
        unsigned int v85 = *(_DWORD *)(v27 + 40);
        if ((int)(v85 - 1) >= 1)
        {
          do
            llvm::MachineInstr::removeOperand((char *)v27, --v85);
          while (v85 > 1);
        }
        goto LABEL_149;
      }
      uint64_t v76 = *((void *)v441 + 37);
      if (v76)
      {
        int v77 = *(int32x2_t **)(v76 + 288);
        int32x2_t v78 = v77[46];
        uint64_t v79 = v77[48].u32[0];
        if (!v79) {
          goto LABEL_145;
        }
        LODWORD(v80) = (v79 - 1) & ((v27 >> 4) ^ (v27 >> 9));
        uint64_t v81 = (uint64_t *)(*(void *)&v78 + 16 * v80);
        uint64_t v82 = *v81;
        if (*v81 != v27)
        {
          int v83 = 1;
          while (v82 != -4096)
          {
            int v84 = v80 + v83++;
            uint64_t v80 = v84 & (v79 - 1);
            uint64_t v82 = *(void *)(*(void *)&v78 + 16 * v80);
            if (v82 == v27)
            {
              uint64_t v81 = (uint64_t *)(*(void *)&v78 + 16 * v80);
              goto LABEL_146;
            }
          }
LABEL_145:
          uint64_t v81 = (uint64_t *)(*(void *)&v78 + 16 * v79);
        }
LABEL_146:
        if (v81 != (uint64_t *)(*(void *)&v78 + 16 * v79))
        {
          unint64_t v86 = v81[1] & 0xFFFFFFFFFFFFFFF8;
          uint64_t *v81 = -8192;
          v77[47] = vadd_s32(v77[47], (int32x2_t)0x1FFFFFFFFLL);
          *(void *)(v86 + 16) = 0;
        }
      }
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v27);
LABEL_149:
      uint64_t v87 = *((void *)v441 + 37);
      uint64_t v88 = v458;
      if (v87)
      {
        llvm::LiveIntervals::repairIntervalsInRange(v87, *((void *)v441 + 40), v436, v75, v458, v459);
        uint64_t v88 = v458;
      }
      if (v88 != (unsigned char *)v460) {
        free(v88);
      }
      uint64_t v27 = (uint64_t)v436;
LABEL_154:
      ++v446;
      uint64_t v451 = (unsigned __int8 **)v35;
      uint64_t v452 = v446;
      int v89 = *((_DWORD *)v441 + 86);
      unsigned int v90 = v35 >> 4;
      if (v89)
      {
        uint64_t v91 = *((void *)v441 + 41);
        int v92 = v89 - 1;
        unsigned int v93 = v92 & (v90 ^ (v35 >> 9));
        BOOL v94 = (void *)(v91 + 16 * v93);
        uint64_t v95 = *v94;
        if (v27 == *v94) {
          goto LABEL_169;
        }
        uint64_t v96 = 0;
        int v97 = 1;
        while (v95 != -4096)
        {
          if (v96) {
            BOOL v98 = 0;
          }
          else {
            BOOL v98 = v95 == -8192;
          }
          if (v98) {
            uint64_t v96 = v94;
          }
          unsigned int v99 = v93 + v97++;
          unsigned int v93 = v99 & v92;
          BOOL v94 = (void *)(v91 + 16 * v93);
          uint64_t v95 = *v94;
          if (v27 == *v94) {
            goto LABEL_169;
          }
        }
        if (v96) {
          uint64_t v100 = v96;
        }
        else {
          uint64_t v100 = v94;
        }
      }
      else
      {
        uint64_t v100 = 0;
      }
      uint64_t v101 = sub_1CB9A052C((uint64_t)v15, (uint64_t)&v451, (uint64_t *)&v451, v100);
      *uint64_t v101 = v451;
      *((_DWORD *)v101 + 2) = v452;
LABEL_169:
      uint64_t v103 = *((void *)v441 + 44);
      uint64_t v102 = *((void *)v441 + 45);
      if (v102 == v103)
      {
        uint64_t v104 = *v423;
        int v105 = (void *)(v102 + 8 * v104);
        if (v104)
        {
          uint64_t v106 = 0;
          uint64_t v107 = 8 * v104;
          while (*(void *)(v102 + v106) != v27)
          {
            v106 += 8;
            if (v107 == v106) {
              goto LABEL_187;
            }
          }
          int v105 = (void *)(v102 + v106);
        }
LABEL_187:
        uint64_t v103 = *((void *)v441 + 45);
      }
      else
      {
        uint64_t v108 = *v422;
        int v109 = v108 - 1;
        unsigned int v110 = (v108 - 1) & (v90 ^ (v35 >> 9));
        int v105 = (void *)(v102 + 8 * v110);
        uint64_t v111 = *v105;
        if (*v105 == -1)
        {
          unsigned int v112 = 0;
LABEL_288:
          if (v112) {
            int v105 = v112;
          }
          if (*v105 != v27) {
            int v105 = (void *)(v102 + 8 * v108);
          }
        }
        else
        {
          unsigned int v112 = 0;
          int v113 = 1;
          while (v111 != v27)
          {
            if (v112) {
              BOOL v114 = 0;
            }
            else {
              BOOL v114 = v111 == -2;
            }
            if (v114) {
              unsigned int v112 = v105;
            }
            unsigned int v115 = v110 + v113++;
            unsigned int v110 = v115 & v109;
            int v105 = (void *)(v102 + 8 * (v115 & v109));
            uint64_t v111 = *v105;
            if (*v105 == -1) {
              goto LABEL_288;
            }
          }
        }
      }
      BOOL v98 = v102 == v103;
      uint64_t v116 = v423;
      if (!v98) {
        uint64_t v116 = v422;
      }
      if (v105 != (void *)(v102 + 8 * *v116)) {
        goto LABEL_191;
      }
      int v146 = **(unsigned __int16 **)(v27 + 16);
      if (v146 == 9 || v146 == 11)
      {
        v148 = *(unsigned int **)(v27 + 32);
        v149 = v148 + 17;
      }
      else
      {
        if (v146 != 19) {
          goto LABEL_191;
        }
        v148 = *(unsigned int **)(v27 + 32);
        v149 = v148 + 9;
      }
      uint64_t v156 = v148[1];
      uint64_t v157 = *v149;
      unsigned int v158 = v157 - 0x40000000;
      BOOL v159 = (v156 - 1) > 0x3FFFFFFE || v158 > 0xC0000000;
      if (v159)
      {
        BOOL v160 = (v156 - 1) >= 0x3FFFFFFF && v158 >= 0xC0000001;
        if (v160)
        {
          v458 = (unsigned char *)(v156 | (v157 << 32));
          sub_1CC4C0040((uint64_t)&v451, (uint64_t)v421, (int *)&v458, (_DWORD *)&v458 + 1);
          sub_1CC4BFAD4((uint64_t)v441, v156);
        }
      }
      else
      {
        v458 = (unsigned char *)(v157 | (v156 << 32));
        sub_1CC4C0040((uint64_t)&v451, (uint64_t)v419, (int *)&v458, (_DWORD *)&v458 + 1);
      }
      uint64_t v161 = *((void *)v441 + 45);
      uint64_t v162 = *((unsigned int *)v441 + 93);
      if (v161 != *((void *)v441 + 44))
      {
        unsigned int v166 = *v422;
LABEL_274:
        if (3 * v166 <= 4 * ((int)v162 - *((_DWORD *)v441 + 94)))
        {
          if (v166 >= 0x40) {
            v166 *= 2;
          }
          else {
            unsigned int v166 = 128;
          }
        }
        else if (v166 - v162 >= v166 >> 3)
        {
          goto LABEL_276;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v417, v166);
        unsigned int v166 = *((_DWORD *)v441 + 92);
        uint64_t v161 = *((void *)v441 + 45);
LABEL_276:
        unsigned int v167 = v166 - 1;
        unsigned int v168 = (v166 - 1) & (v90 ^ (v35 >> 9));
        uint64_t v169 = (uint64_t *)(v161 + 8 * v168);
        uint64_t v170 = *v169;
        if (*v169 == -1)
        {
          v171 = 0;
LABEL_293:
          if (v171) {
            unint64_t v175 = v171;
          }
          else {
            unint64_t v175 = v169;
          }
          if (*v175 != v27)
          {
            if (*v175 == -2) {
              --*((_DWORD *)v441 + 94);
            }
            else {
              ++*v423;
            }
            *unint64_t v175 = v27;
          }
        }
        else
        {
          v171 = 0;
          int v172 = 1;
          while (v170 != v27)
          {
            if (v171) {
              BOOL v173 = 0;
            }
            else {
              BOOL v173 = v170 == -2;
            }
            if (v173) {
              v171 = v169;
            }
            unsigned int v174 = v168 + v172++;
            unsigned int v168 = v174 & v167;
            uint64_t v169 = (uint64_t *)(v161 + 8 * (v174 & v167));
            uint64_t v170 = *v169;
            if (*v169 == -1) {
              goto LABEL_293;
            }
          }
        }
        goto LABEL_191;
      }
      if (v162)
      {
        BOOL v163 = 0;
        uint64_t v164 = 8 * v162;
        unint64_t v165 = (uint64_t *)*((void *)v441 + 45);
        while (*v165 != v27)
        {
          if (*v165 == -2) {
            BOOL v163 = v165;
          }
          ++v165;
          v164 -= 8;
          if (!v164)
          {
            if (!v163) {
              goto LABEL_271;
            }
            *BOOL v163 = v27;
            --*((_DWORD *)v441 + 94);
            goto LABEL_191;
          }
        }
        goto LABEL_191;
      }
LABEL_271:
      unsigned int v166 = *v422;
      if (v162 >= *v422) {
        goto LABEL_274;
      }
      *int v423 = v162 + 1;
      *(void *)(v161 + 8 * v162) = v27;
LABEL_191:
      uint64_t v117 = *(unsigned int *)(v27 + 40);
      if (!v117) {
        goto LABEL_231;
      }
      uint64_t v118 = 0;
      uint64_t v119 = 0;
      char v120 = 0;
      do
      {
        int v121 = *(_DWORD *)(*(void *)(v27 + 32) + v118);
        int v122 = v121 & 0x10000FF;
        int v123 = v121 & 0xF00000;
        if (v122) {
          BOOL v124 = 1;
        }
        else {
          BOOL v124 = v123 == 0;
        }
        if (!v124)
        {
          unsigned int TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v27, v119);
          uint64_t v126 = *(void *)(v27 + 32);
          uint64_t v127 = v126 + v118;
          uint64_t v128 = TiedOperandIdx;
          v129 = (_DWORD *)(v126 + 32 * TiedOperandIdx);
          int v130 = *(_DWORD *)(v127 + 4);
          unsigned int v131 = v129[1];
          if (v130 != v131)
          {
            if ((*(unsigned char *)(v127 + 3) & 0x10) != 0 && (*v129 & 0xFFF00) == 0)
            {
              if ((v131 & 0x80000000) != 0) {
                sub_1CC38D61C(*((void **)v441 + 35), v131, *(void *)(*(void *)(*((void *)v441 + 35) + 24) + 16 * (v131 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(*(void *)(*((void *)v441 + 35) + 24) + 16 * (v130 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
              }
              llvm::MachineOperand::setReg(v127, v131);
              *(_DWORD *)v127 &= 0xFFF000FF;
            }
            else
            {
              uint64_t v451 = 0;
              char v132 = sub_1CC4C0558((uint64_t)&v455, v130, &v451);
              uint64_t v133 = (uint64_t)v451;
              if (v132)
              {
                char v137 = v451 + 2;
                unint64_t v135 = *((unsigned int *)v451 + 4);
                v136 = v451 + 1;
                if (v135 >= *((unsigned int *)v451 + 5)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v15 = v428;
              }
              else
              {
                if (v455) {
                  unsigned int v134 = 4;
                }
                else {
                  unsigned int v134 = v457;
                }
                if (4 * (v455 >> 1) + 4 >= 3 * v134)
                {
                  v134 *= 2;
                }
                else if (v134 + ~(v455 >> 1) - HIDWORD(v455) > v134 >> 3)
                {
                  goto LABEL_205;
                }
                sub_1CD58CABC((uint64_t)&v455, v134);
                uint64_t v451 = 0;
                sub_1CC4C0558((uint64_t)&v455, v130, &v451);
                uint64_t v133 = (uint64_t)v451;
LABEL_205:
                LODWORD(v455) = v455 + 2;
                if (*(_DWORD *)v133 != -1) {
                  --HIDWORD(v455);
                }
                unint64_t v135 = 0;
                *(_DWORD *)uint64_t v133 = v130;
                *(void *)(v133 + 8) = v133 + 24;
                v136 = (void *)(v133 + 8);
                *(void *)(v133 + 16) = 0x400000000;
                char v137 = (_DWORD *)(v133 + 16);
              }
              *(void *)(*v136 + 8 * v135) = v119 | (v128 << 32);
              ++*v137;
            }
          }
          char v120 = 1;
        }
        ++v119;
        v118 += 32;
      }
      while (v117 != v119);
      if ((v120 & 1) == 0)
      {
LABEL_231:
        sub_1CC4BC37C((int32x2_t *)v441, v27);
        uint64_t v27 = (uint64_t)v444;
        uint64_t v445 = v444;
        continue;
      }
      unsigned int v138 = v455;
      if ((v455 & 0xFFFFFFFE) == 2)
      {
        int v140 = &v458;
        v139 = &v456;
        if (v455) {
          goto LABEL_224;
        }
        v139 = v456;
        if (v457)
        {
          int v140 = (unsigned char **)&v456[7 * v457];
          unsigned int v15 = v428;
LABEL_224:
          while (*(_DWORD *)v139 >= 0xFFFFFFFE)
          {
            v139 += 7;
            if (v139 == v140)
            {
              v139 = v140;
              break;
            }
          }
        }
        else
        {
          unsigned int v15 = v428;
        }
        if (*((_DWORD *)v139 + 4) == 1)
        {
          uint64_t v141 = (unsigned int *)v139[1];
          uint64_t v142 = *v141;
          uint64_t v143 = v141[1];
          if (*(_DWORD *)(*(void *)(v27 + 32) + 32 * v142 + 4) != *(_DWORD *)(*(void *)(v27 + 32) + 32 * v143 + 4))
          {
            if (sub_1CC4BC638((uint64_t)v441, (uint64_t *)&v445, (unint64_t *)&v444, v142, v143, &v446, 0))
            {
              sub_1CC4BF9C4((uint64_t)&v455);
              v144 = v445;
              v145 = (int32x2_t *)v441;
              goto LABEL_620;
            }
            unsigned int v138 = v455;
          }
        }
      }
      if (v138 <= 1)
      {
        uint64_t v150 = (unsigned int *)v456;
        unsigned int v153 = v457;
        uint64_t v404 = &v456;
        if (v138)
        {
          unsigned int v405 = 4;
        }
        else
        {
          uint64_t v404 = v456;
          unsigned int v405 = v457;
        }
        v152 = (unsigned int *)&v404[7 * v405];
        unint64_t v151 = v152;
      }
      else
      {
        unint64_t v151 = (unsigned int *)&v458;
        uint64_t v150 = (unsigned int *)&v456;
        if (v138)
        {
LABEL_240:
          v138 &= 1u;
          while (*v150 >= 0xFFFFFFFE)
          {
            v150 += 14;
            if (v150 == v151)
            {
              uint64_t v150 = v151;
              break;
            }
          }
          v152 = v150;
          uint64_t v150 = (unsigned int *)v456;
          unsigned int v153 = v457;
        }
        else
        {
          uint64_t v150 = (unsigned int *)v456;
          unsigned int v153 = v457;
          if (v457)
          {
            unint64_t v151 = (unsigned int *)&v456[7 * v457];
            unsigned int v15 = v428;
            goto LABEL_240;
          }
          unsigned int v138 = 0;
          v152 = (unsigned int *)v456;
          unint64_t v151 = (unsigned int *)v456;
          unsigned int v15 = v428;
        }
      }
      BOOL v98 = v138 == 0;
      int v154 = (unsigned int *)&v456;
      if (v98)
      {
        int v154 = v150;
        unsigned int v155 = v153;
      }
      else
      {
        unsigned int v155 = 4;
      }
      unsigned int v426 = v151;
      v427 = &v154[14 * v155];
      while (v152 != v427)
      {
        uint64_t v178 = v445;
        v449 = v445;
        uint64_t v179 = v152[4];
        v431 = v152;
        if (!v179)
        {
          char v439 = 0;
          int v189 = 0;
          int v203 = 0;
          unint64_t v443 = 0;
          unsigned int v190 = 0;
          BOOL v437 = 0;
          goto LABEL_469;
        }
        unint64_t v180 = 0;
        v181 = (unsigned int *)*((void *)v152 + 1);
        uint64_t v182 = &v181[2 * v179];
        uint64_t v183 = 8 * v179;
        while (1)
        {
          uint64_t v184 = &v181[v180 / 4];
          if ((*(unsigned char *)(*((void *)v445 + 4) + 32 * v181[v180 / 4 + 1] + 3) & 0x40) != 0) {
            break;
          }
          v180 += 8;
          if (v183 == v180)
          {
            uint64_t v184 = v182;
            break;
          }
        }
        char v439 = 0;
        unint64_t v443 = 0;
        BOOL v437 = v184 != v182;
        uint64_t v185 = 2;
        if (v184 == v182) {
          uint64_t v185 = 4;
        }
        uint64_t v430 = v185;
        char v429 = 1;
        v433 = v182;
        do
        {
          v186 = v449;
          uint64_t v187 = *((void *)v449 + 4);
          uint64_t v188 = *v181;
          int v189 = *(_DWORD *)(v187 + 32 * v181[1] + 4);
          unsigned int v190 = *(_DWORD *)(v187 + 32 * v188 + 4);
          if (v189 != v190) {
            goto LABEL_325;
          }
          do
          {
            v181 += 2;
            if (v181 == v182)
            {
              unsigned int v190 = v189;
              goto LABEL_460;
            }
            uint64_t v188 = *v181;
            int v189 = *(_DWORD *)(v187 + 32 * v181[1] + 4);
            unsigned int v190 = *(_DWORD *)(v187 + 32 * v188 + 4);
          }
          while (v189 == v190);
          char v429 = 0;
LABEL_325:
          unsigned int v191 = *(_DWORD *)(v187 + 32 * v188);
          uint64_t v192 = *((void *)v449 + 3);
          v193 = (unsigned __int8 **)((char *)v449 + 56);
          uint64_t v194 = *(void *)(*((void *)v441 + 32) + 8) + 912;
          if ((*((_WORD *)v449 + 22) & 4) != 0)
          {
            v195 = sub_1CD3C8EB4(v192, (uint64_t)v449, v193, v194, v189);
            v197 = v284;
          }
          else
          {
            v195 = *(llvm::MachineFunction **)(v192 + 32);
            uint64_t v196 = *v193;
            v450 = v196;
            if (v196) {
              llvm::MetadataTracking::track((uint64_t)&v450, v196, 2);
            }
            v197 = llvm::MachineFunction::CreateMachineInstr(v195, v194, &v450, 0);
            if (v450)
            {
              int v285 = *v450;
              if ((v285 - 4) > 0x1E)
              {
                if ((v285 - 3) >= 0xFFFFFFFE) {
                  v288 = v450;
                }
                else {
                  v288 = 0;
                }
                if ((v285 - 3) < 0xFFFFFFFE)
                {
                  unsigned int v15 = v428;
                  if (v285 == 3) {
                    *((void *)v450 + 1) = 0;
                  }
                  goto LABEL_329;
                }
                unint64_t v287 = (unint64_t)(v288 + 8);
              }
              else
              {
                unsigned int v15 = v428;
                if ((v450[1] & 0x7F) != 2 && !*((_DWORD *)v450 + 3)) {
                  goto LABEL_329;
                }
                uint64_t v286 = *((void *)v450 + 2);
                if ((v286 & 4) == 0) {
                  goto LABEL_329;
                }
                unint64_t v287 = v286 & 0xFFFFFFFFFFFFFFF8;
                if (!v287) {
                  goto LABEL_329;
                }
              }
              uint64_t v451 = &v450;
              sub_1CC5FA668(v287 + 16, &v451);
              unsigned int v15 = v428;
            }
LABEL_329:
            uint64_t v198 = *(void *)(v192 + 40);
            *((void *)v197 + 3) = v198;
            uint64_t v199 = *(void *)(v198 + 32);
            uint64_t v200 = *((unsigned int *)v197 + 10);
            if (v200)
            {
              uint64_t v274 = *((void *)v197 + 4);
              uint64_t v275 = *(void *)(v199 + 40);
              uint64_t v276 = 32 * v200;
              do
              {
                if (!*(unsigned char *)v274)
                {
                  uint64_t v277 = *(unsigned int *)(v274 + 4);
                  if ((int)v277 >= 0) {
                    v278 = (uint64_t *)(*(void *)(v275 + 272) + 8 * v277);
                  }
                  else {
                    v278 = (uint64_t *)(*(void *)(v275 + 24) + 16 * (v277 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v279 = *v278;
                  if (*v278)
                  {
                    uint64_t v280 = *(void *)(v279 + 16);
                    *(void *)(v279 + 16) = v274;
                    *(void *)(v274 + 16) = v280;
                    if (*(unsigned char *)(v274 + 3))
                    {
                      *(void *)(v274 + 24) = v279;
                    }
                    else
                    {
                      *(void *)(v274 + 24) = 0;
                      v278 = (uint64_t *)(v280 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v274 + 16) = v274;
                    *(void *)(v274 + 24) = 0;
                  }
                  uint64_t *v278 = v274;
                }
                v274 += 32;
                v276 -= 32;
              }
              while (v276);
            }
            uint64_t v201 = *(void *)(v199 + 728);
            if (v201) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v201 + 24))(v201, v197);
            }
            unint64_t v202 = *(void *)v186 & 0xFFFFFFFFFFFFFFF8;
            *(void *)v197 = v202 | *(void *)v197 & 7;
            *((void *)v197 + 1) = v186;
            *(void *)(v202 + 8) = v197;
            *(void *)v186 = *(void *)v186 & 7 | (unint64_t)v197;
            uint64_t v452 = 0;
            uint64_t v453 = 0;
            uint64_t v454 = 0;
            HIDWORD(v451) = v189;
            LODWORD(v451) = 0x1000000;
            llvm::MachineInstr::addOperand(v197, v195, (const llvm::MachineOperand *)&v451);
          }
          uint64_t v452 = 0;
          int v203 = (v191 >> 8) & 0xFFF;
          uint64_t v453 = 0;
          uint64_t v454 = 0;
          HIDWORD(v451) = v190;
          LODWORD(v451) = v203 << 8;
          llvm::MachineInstr::addOperand(v197, v195, (const llvm::MachineOperand *)&v451);
          unint64_t v204 = *(void *)(*(void *)(*((void *)v441 + 35) + 24) + 16 * (v190 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          if (v189 >= 0) {
            unint64_t v205 = *(void *)(*(void *)(*((void *)v441 + 35) + 24) + 16 * (v190 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          }
          else {
            unint64_t v205 = 0;
          }
          uint64_t v206 = *(void *)v449;
          if (v203) {
            unint64_t v204 = v205;
          }
          uint64_t v435 = v204;
          unint64_t v207 = v206 & 0xFFFFFFFFFFFFFFF8;
          if ((v206 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v207 & 4) == 0)
          {
            while ((*(_WORD *)(v207 + 44) & 4) != 0)
              unint64_t v207 = *(void *)v207 & 0xFFFFFFFFFFFFFFF8;
          }
          unsigned int v208 = v446;
          uint64_t v451 = (unsigned __int8 **)v207;
          uint64_t v452 = v446;
          int v209 = *((_DWORD *)v441 + 86);
          if (!v209)
          {
            v219 = 0;
            goto LABEL_357;
          }
          uint64_t v210 = *((void *)v441 + 41);
          int v211 = v209 - 1;
          unsigned int v212 = v211 & ((v207 >> 4) ^ (v207 >> 9));
          uint64_t v213 = (void *)(v210 + 16 * v212);
          uint64_t v214 = *v213;
          if (v207 != *v213)
          {
            v215 = 0;
            int v216 = 1;
            while (v214 != -4096)
            {
              if (v215) {
                BOOL v217 = 0;
              }
              else {
                BOOL v217 = v214 == -8192;
              }
              if (v217) {
                v215 = v213;
              }
              unsigned int v218 = v212 + v216++;
              unsigned int v212 = v218 & v211;
              uint64_t v213 = (void *)(v210 + 16 * v212);
              uint64_t v214 = *v213;
              if (v207 == *v213) {
                goto LABEL_358;
              }
            }
            if (v215) {
              v219 = v215;
            }
            else {
              v219 = v213;
            }
LABEL_357:
            unsigned int v220 = sub_1CB9A052C((uint64_t)v15, (uint64_t)&v451, (uint64_t *)&v451, v219);
            *unsigned int v220 = v451;
            *((_DWORD *)v220 + 2) = v452;
          }
LABEL_358:
          unsigned int v446 = v208 + 1;
          *((_DWORD *)sub_1CC308370((uint64_t)v15, (uint64_t *)&v449) + 2) = v208 + 1;
          uint64_t v222 = *((void *)v441 + 37);
          if (!v222) {
            goto LABEL_394;
          }
          unint64_t v223 = sub_1CB914C88(*(void *)(v222 + 288), v207, 0);
          v224 = v449;
          __int16 v225 = *((_WORD *)v449 + 22);
          uint64_t v226 = v449;
          if ((v225 & 4) != 0)
          {
            do
              uint64_t v226 = (llvm::MachineInstr *)(*(void *)v226 & 0xFFFFFFFFFFFFFFF8);
            while ((*((_WORD *)v226 + 22) & 4) != 0);
          }
          uint64_t v227 = *((void *)v441 + 37);
          uint64_t v228 = *(void *)(v227 + 288);
          if ((v225 & 8) != 0)
          {
            do
              v224 = (llvm::MachineInstr *)*((void *)v224 + 1);
            while ((*((_WORD *)v224 + 22) & 8) != 0);
          }
          v229 = (llvm::MachineInstr *)*((void *)v224 + 1);
          if (v226 != v229)
          {
            while (1)
            {
              unsigned int v230 = **((unsigned __int16 **)v226 + 2);
              BOOL v159 = v230 > 0x17;
              int v231 = (1 << v230) & 0x83E000;
              if (v159 || v231 == 0) {
                break;
              }
              uint64_t v226 = (llvm::MachineInstr *)*((void *)v226 + 1);
              if (v226 == v229)
              {
                uint64_t v226 = v229;
                break;
              }
            }
          }
          uint64_t v233 = *(void *)(v228 + 368);
          uint64_t v234 = *(unsigned int *)(v228 + 384);
          if (v234)
          {
            LODWORD(v235) = ((v226 >> 4) ^ (v226 >> 9)) & (v234 - 1);
            v236 = (llvm::MachineInstr **)(v233 + 16 * v235);
            v237 = *v236;
            if (v226 != *v236)
            {
              int v238 = 1;
              while (v237 != (llvm::MachineInstr *)-4096)
              {
                int v239 = v235 + v238++;
                uint64_t v235 = v239 & (v234 - 1);
                v237 = *(llvm::MachineInstr **)(v233 + 16 * v235);
                if (v226 == v237)
                {
                  v236 = (llvm::MachineInstr **)(v233 + 16 * v235);
                  goto LABEL_375;
                }
              }
              goto LABEL_374;
            }
          }
          else
          {
LABEL_374:
            v236 = (llvm::MachineInstr **)(v233 + 16 * v234);
          }
LABEL_375:
          int v432 = (v191 >> 8) & 0xFFF;
          unint64_t v443 = v223 & 0xFFFFFFFFFFFFFFF8 | 4;
          unsigned int v240 = (unsigned __int8 *)((unint64_t)v236[1] & 0xFFFFFFFFFFFFFFF8 | v430);
          if ((v189 & 0x80000000) == 0)
          {
            uint64_t v241 = *((void *)v441 + 33);
            char v221 = 0;
            if (v241) {
              uint64_t v242 = (void *)(v241 + 8);
            }
            else {
              uint64_t v242 = 0;
            }
            unint64_t v243 = *(unsigned int *)(*v242 + 24 * v189 + 16);
            v244 = (_WORD *)(v242[6] + ((v243 >> 3) & 0x1FFFFFFE));
            __int16 v246 = *v244;
            v245 = v244 + 1;
            unsigned __int16 v247 = v246 + (v243 & 0xF) * v189;
            do
            {
              uint64_t v248 = *((void *)v441 + 37);
              uint64_t v249 = *(void *)(*(void *)(v248 + 680) + 8 * v247);
              if (v249)
              {
                *(void *)(v248 + 392) += 16;
                uint64_t v250 = *(void *)(v248 + 312);
                if (((v250 + 7) & 0xFFFFFFFFFFFFFFF8) - v250 + 16 > *(void *)(v248 + 320) - v250)
                {
                  unsigned int v254 = *(_DWORD *)(v248 + 336) >> 7;
                  if (v254 >= 0x1E) {
                    LOBYTE(v254) = 30;
                  }
                  uint64_t v425 = 4096 << v254;
                  unint64_t v251 = (unint64_t)operator new(4096 << v254, (std::align_val_t)8uLL);
                  unint64_t v255 = *(unsigned int *)(v248 + 336);
                  if (v255 >= *(unsigned int *)(v248 + 340)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(v248 + 328) + 8 * v255) = v251;
                  ++*(_DWORD *)(v248 + 336);
                  *(void *)(v248 + 320) = v251 + v425;
                }
                else
                {
                  unint64_t v251 = (v250 + 7) & 0xFFFFFFFFFFFFFFF8;
                }
                *(void *)(v248 + 312) = v251 + 16;
                unint64_t v252 = *(unsigned int *)(v249 + 72);
                *(_DWORD *)unint64_t v251 = v252;
                *(void *)(v251 + 8) = v443;
                if (v252 >= *(unsigned int *)(v249 + 76)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v249 + 64) + 8 * v252) = v251;
                ++*(_DWORD *)(v249 + 72);
                v447[0] = v443;
                v447[1] = v240;
                void v447[2] = v251;
                llvm::LiveRange::addSegment(v249, (uint64_t)v447);
              }
              int v253 = *v245++;
              v247 += v253;
            }
            while (v253);
            unsigned int v15 = v428;
            goto LABEL_393;
          }
          unint64_t v258 = v189 & 0x7FFFFFFF;
          v259 = (void *)(v227 + 408);
          unint64_t v260 = *(unsigned int *)(v227 + 416);
          BOOL v160 = v258 >= v260;
          unint64_t v261 = v258 - v260;
          if (v160)
          {
            sub_1CB9153B8((uint64_t)v259, v261 + 1, *(void *)(v227 + 424));
LABEL_442:
            operator new();
          }
          uint64_t v262 = *(void *)(*v259 + 8 * v258);
          if (!v262) {
            goto LABEL_442;
          }
          *(void *)(v227 + 392) += 16;
          uint64_t v263 = *(void *)(v227 + 312);
          if (((v263 + 7) & 0xFFFFFFFFFFFFFFF8) - v263 + 16 > *(void *)(v227 + 320) - v263)
          {
            unsigned int v281 = *(_DWORD *)(v227 + 336) >> 7;
            if (v281 >= 0x1E) {
              LOBYTE(v281) = 30;
            }
            uint64_t v282 = 4096 << v281;
            unint64_t v264 = (unint64_t)operator new(4096 << v281, (std::align_val_t)8uLL);
            unint64_t v283 = *(unsigned int *)(v227 + 336);
            if (v283 >= *(unsigned int *)(v227 + 340)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v227 + 328) + 8 * v283) = v264;
            ++*(_DWORD *)(v227 + 336);
            *(void *)(v227 + 320) = v264 + v282;
          }
          else
          {
            unint64_t v264 = (v263 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v227 + 312) = v264 + 16;
          unint64_t v265 = *(unsigned int *)(v262 + 72);
          *(_DWORD *)unint64_t v264 = v265;
          *(void *)(v264 + 8) = v443;
          if (v265 >= *(unsigned int *)(v262 + 76)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v262 + 64) + 8 * v265) = v264;
          ++*(_DWORD *)(v262 + 72);
          v458 = (unsigned char *)v443;
          uint64_t v459 = (uint64_t)v240;
          v460[0] = v264;
          llvm::LiveRange::addSegment(v262, (uint64_t)&v458);
          for (uint64_t j = *(void *)(v262 + 104); j; uint64_t j = *(void *)(j + 104))
          {
            uint64_t v267 = *((void *)v441 + 37);
            *(void *)(v267 + 392) += 16;
            uint64_t v268 = *(void *)(v267 + 312);
            if (((v268 + 7) & 0xFFFFFFFFFFFFFFF8) - v268 + 16 > *(void *)(v267 + 320) - v268)
            {
              unsigned int v271 = *(_DWORD *)(v267 + 336) >> 7;
              if (v271 >= 0x1E) {
                LOBYTE(v271) = 30;
              }
              uint64_t v272 = 4096 << v271;
              unint64_t v269 = (unint64_t)operator new(4096 << v271, (std::align_val_t)8uLL);
              unint64_t v273 = *(unsigned int *)(v267 + 336);
              if (v273 >= *(unsigned int *)(v267 + 340)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v267 + 328) + 8 * v273) = v269;
              ++*(_DWORD *)(v267 + 336);
              *(void *)(v267 + 320) = v269 + v272;
            }
            else
            {
              unint64_t v269 = (v268 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v267 + 312) = v269 + 16;
            unint64_t v270 = *(unsigned int *)(j + 72);
            *(_DWORD *)unint64_t v269 = v270;
            *(void *)(v269 + 8) = v443;
            if (v270 >= *(unsigned int *)(j + 76)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(j + 64) + 8 * v270) = v269;
            ++*(_DWORD *)(j + 72);
            v448[0] = (unsigned __int8 *)v443;
            v448[1] = v240;
            v448[2] = (unsigned __int8 *)v269;
            llvm::LiveRange::addSegment(j, (uint64_t)v448);
          }
LABEL_393:
          int v203 = v432;
LABEL_394:
          int v256 = (unsigned int *)(*((void *)v449 + 4) + 32 * v188);
          unsigned int v257 = *v256;
          if ((v257 >> 26) & ~HIBYTE(v257))
          {
            *int v256 = v257 & 0xFBFFFFFF;
            char v439 = 1;
          }
          if (((v190 & v189 & 0x80000000) != 0) != v221) {
            sub_1CC38D61C(*((void **)v441 + 35), v189, *(void *)(*(void *)(*((void *)v441 + 35) + 24) + 16 * (v189 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v435, 0);
          }
          llvm::MachineOperand::setReg((uint64_t)v256, v189);
          *v256 &= 0xFFF000FF;
          v181 += 2;
          uint64_t v182 = v433;
        }
        while (v181 != v433);
        if (v429)
        {
          uint64_t v178 = v449;
          unint64_t v151 = v426;
LABEL_469:
          uint64_t v293 = *((unsigned int *)v178 + 10);
          if (v293)
          {
            uint64_t v294 = 0;
            unint64_t v295 = (unsigned int *)*((void *)v178 + 4);
            uint64_t v296 = 32 * v293;
            do
            {
              unint64_t v297 = *v295;
              if (!*v295 && (v297 & 0x1000000) == 0 && v295[1] == v190)
              {
                uint64_t v298 = (v297 >> 8) & 0xFFF;
                char v299 = v437;
                if (v298 != v203) {
                  char v299 = 1;
                }
                if (v299)
                {
                  v294 |= *(void *)(*(void *)(*((void *)v441 + 33) + 232) + 8 * v298);
                }
                else
                {
                  if ((v297 >> 26) & ~BYTE3(v297))
                  {
                    *unint64_t v295 = v297 & 0xFBFFFFFF;
                    char v439 = 1;
                  }
                  llvm::MachineOperand::setReg((uint64_t)v295, v189);
                  *v295 &= 0xFFF000FF;
                }
              }
              v295 += 8;
              v296 -= 32;
            }
            while (v296);
          }
          else
          {
            uint64_t v294 = 0;
          }
          if ((v439 & 1) != 0 && !v294)
          {
            uint64_t v346 = *((void *)v441 + 36);
            if (v346)
            {
              v347 = (void *)(v346 + 248);
              unint64_t v348 = v190 & 0x7FFFFFFF;
              if (v348 >= *(unsigned int *)(v346 + 256)) {
                sub_1CD520A8C((uint64_t *)(v346 + 248), v348 + 1, v346 + 264);
              }
              if (sub_1CC30D1B0(*v347 + 56 * v348, (uint64_t)v449))
              {
                v349 = (llvm::MachineInstr *)(*(void *)v449 & 0xFFFFFFFFFFFFFFF8);
                if (!v349 || (*(unsigned char *)v349 & 4) == 0)
                {
                  while ((*((_WORD *)v349 + 22) & 4) != 0)
                    v349 = (llvm::MachineInstr *)(*(void *)v349 & 0xFFFFFFFFFFFFFFF8);
                }
                sub_1CD568A58(*((void *)v441 + 36), v190, v349, 0);
              }
            }
            LODWORD(v451) = v189;
            sub_1CD4145B8((uint64_t)v421, (int *)&v451)[1] = v190;
          }
          uint64_t v300 = *((void *)v441 + 37);
          if (!v300) {
            goto LABEL_560;
          }
          uint64_t v176 = v449;
          __int16 v301 = *((_WORD *)v449 + 22);
          uint64_t v177 = v449;
          if ((v301 & 4) != 0)
          {
            do
              uint64_t v177 = (llvm::MachineInstr *)(*(void *)v177 & 0xFFFFFFFFFFFFFFF8);
            while ((*((_WORD *)v177 + 22) & 4) != 0);
          }
          if ((v301 & 8) != 0)
          {
            do
              uint64_t v176 = (llvm::MachineInstr *)*((void *)v176 + 1);
            while ((*((_WORD *)v176 + 22) & 8) != 0);
          }
          char v302 = (llvm::MachineInstr *)*((void *)v176 + 1);
          if (v177 != v302)
          {
            do
            {
              unsigned int v303 = **((unsigned __int16 **)v177 + 2);
              BOOL v159 = v303 > 0x17;
              int v304 = (1 << v303) & 0x83E000;
              if (v159 || v304 == 0) {
                goto LABEL_496;
              }
              uint64_t v177 = (llvm::MachineInstr *)*((void *)v177 + 1);
            }
            while (v177 != v302);
            uint64_t v177 = v302;
          }
LABEL_496:
          uint64_t v306 = *(void *)(v300 + 288);
          uint64_t v307 = *(void *)(v306 + 368);
          uint64_t v308 = *(unsigned int *)(v306 + 384);
          if (v308)
          {
            LODWORD(v309) = ((v177 >> 4) ^ (v177 >> 9)) & (v308 - 1);
            v310 = (llvm::MachineInstr **)(v307 + 16 * v309);
            v311 = *v310;
            if (v177 != *v310)
            {
              int v312 = 1;
              do
              {
                if (v311 == (llvm::MachineInstr *)-4096) {
                  goto LABEL_505;
                }
                int v313 = v309 + v312++;
                uint64_t v309 = v313 & (v308 - 1);
                v311 = *(llvm::MachineInstr **)(v307 + 16 * v309);
              }
              while (v177 != v311);
              v310 = (llvm::MachineInstr **)(v307 + 16 * v309);
            }
          }
          else
          {
LABEL_505:
            v310 = (llvm::MachineInstr **)(v307 + 16 * v308);
          }
          uint64_t v314 = v310[1];
          uint64_t v315 = v190 & 0x7FFFFFFF;
          uint64_t v316 = (void *)(v300 + 408);
          uint64_t v317 = *(unsigned int *)(v300 + 416);
          if (v315 >= v317)
          {
            sub_1CB9153B8((uint64_t)v316, v315 - v317 + 1, *(void *)(v300 + 424));
          }
          else
          {
            uint64_t v318 = *(void *)(*v316 + 8 * v315);
            if (v318)
            {
              uint64_t v319 = *(void *)(v318 + 104);
              if (!v319) {
                goto LABEL_530;
              }
              unint64_t v320 = v443 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v321 = (v443 >> 1) & 3;
              char v322 = 1;
              while (1)
              {
                unsigned int v323 = *(_DWORD *)(v319 + 8);
                v324 = *(void **)v319;
                if (!v323) {
                  break;
                }
                uint64_t v325 = v324[3 * v323 - 2];
                unsigned int v326 = *(_DWORD *)(v320 + 24) | v321;
                unsigned int v327 = (v325 >> 1) & 3 | *(_DWORD *)((v325 & 0xFFFFFFFFFFFFFFF8) + 24);
                uint64_t v328 = *(void **)v319;
                unint64_t v329 = *(unsigned int *)(v319 + 8);
                if (v326 >= v327) {
                  goto LABEL_520;
                }
                do
                {
                  unint64_t v330 = v329 >> 1;
                  uint64_t v331 = v328[3 * (v329 >> 1) + 1];
                  LODWORD(v331) = (v331 >> 1) & 3 | *(_DWORD *)((v331 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v329 -= (v329 >> 1) + 1;
                  BOOL v332 = v326 >= v331;
                  if (v326 >= v331) {
                    unint64_t v333 = v330 + 1;
                  }
                  else {
                    unint64_t v333 = 0;
                  }
                  v328 += 3 * v333;
                  if (!v332) {
                    unint64_t v329 = v330;
                  }
                }
                while (v329);
LABEL_521:
                if (v328 != &v324[3 * v323]
                  && ((*v328 >> 1) & 3 | *(_DWORD *)((*v328 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v320 + 24) | v321))
                {
                  if ((*(void *)(v319 + 112) & v294) != 0
                    || (llvm::MachineInstr *)(v328[1] & 0xFFFFFFFFFFFFFFF8) != v314)
                  {
                    char v334 = 0;
                    goto LABEL_528;
                  }
                  v328[1] = v443;
                }
                char v334 = 1;
LABEL_528:
                v322 &= v334;
                uint64_t v319 = *(void *)(v319 + 104);
                if (!v319)
                {
                  if ((v322 & 1) == 0) {
                    goto LABEL_560;
                  }
LABEL_530:
                  unsigned int v335 = *(_DWORD *)(v318 + 8);
                  v336 = *(void **)v318;
                  if (v335)
                  {
                    uint64_t v337 = v336[3 * v335 - 2];
                    unsigned int v338 = *(_DWORD *)((v443 & 0xFFFFFFFFFFFFFFF8) + 24) | (v443 >> 1) & 3;
                    unsigned int v339 = (v337 >> 1) & 3 | *(_DWORD *)((v337 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v340 = *(void **)v318;
                    unint64_t v341 = *(unsigned int *)(v318 + 8);
                    if (v338 < v339)
                    {
                      do
                      {
                        unint64_t v342 = v341 >> 1;
                        uint64_t v343 = v340[3 * (v341 >> 1) + 1];
                        LODWORD(v343) = (v343 >> 1) & 3 | *(_DWORD *)((v343 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v341 -= (v341 >> 1) + 1;
                        BOOL v344 = v338 >= v343;
                        if (v338 >= v343) {
                          unint64_t v345 = v342 + 1;
                        }
                        else {
                          unint64_t v345 = 0;
                        }
                        v340 += 3 * v345;
                        if (!v344) {
                          unint64_t v341 = v342;
                        }
                      }
                      while (v341);
LABEL_552:
                      if (v340 != &v336[3 * v335])
                      {
                        BOOL v350 = ((*v340 >> 1) & 3 | *(_DWORD *)((*v340 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v443 & 0xFFFFFFFFFFFFFFF8) + 24) | (v443 >> 1) & 3)
                            && v294 == 0;
                        if (v350 && (llvm::MachineInstr *)(v340[1] & 0xFFFFFFFFFFFFFFF8) == v314) {
                          v340[1] = v443;
                        }
                      }
                      goto LABEL_560;
                    }
                  }
                  else
                  {
                    unsigned int v335 = 0;
                  }
                  v340 = &v336[3 * v335];
                  goto LABEL_552;
                }
              }
              unsigned int v323 = 0;
LABEL_520:
              uint64_t v328 = &v324[3 * v323];
              goto LABEL_521;
            }
          }
          operator new();
        }
LABEL_460:
        unint64_t v151 = v426;
        if ((v439 & 1) == 0) {
          goto LABEL_560;
        }
        uint64_t v289 = *((unsigned int *)v449 + 10);
        if (!v289) {
          goto LABEL_560;
        }
        BOOL v290 = (int *)*((void *)v449 + 4);
        uint64_t v291 = 32 * v289;
        while (1)
        {
          int v292 = *v290;
          if (!*v290 && (v292 & 0x1000000) == 0 && v290[1] == v190) {
            break;
          }
          v290 += 8;
          v291 -= 32;
          if (!v291) {
            goto LABEL_560;
          }
        }
        *BOOL v290 = v292 | 0x4000000;
LABEL_560:
        int v351 = v431 + 14;
        while (v351 != v151)
        {
          unsigned int v352 = *v351;
          v351 += 14;
          if (v352 <= 0xFFFFFFFD)
          {
            v152 = v351 - 14;
            goto LABEL_565;
          }
        }
        v152 = v151;
LABEL_565:
        ;
      }
      v353 = v445;
      if (**((_WORD **)v445 + 2) == 9)
      {
        int v354 = *(_DWORD *)(*((void *)v445 + 4) + 112);
        llvm::MachineInstr::removeOperand((char *)v445, 3u);
        **((_DWORD **)v353 + 4) = **((_DWORD **)v353 + 4) & 0xFFF000FF | ((v354 & 0xFFF) << 8);
        **((_DWORD **)v353 + 4) = **((_DWORD **)v353 + 4) & 0xEFFFFFFF | (((*(_DWORD *)(*((void *)v353 + 4) + 32) >> 28) & 1) << 28);
        llvm::MachineInstr::removeOperand((char *)v353, 1u);
        *((void *)v353 + 2) = *(void *)(*((void *)v441 + 32) + 8) + 912;
        uint64_t v355 = *((void *)v441 + 37);
        if (v355)
        {
          int v356 = *(_DWORD *)(*((void *)v353 + 4) + 4);
          uint64_t v357 = v356 & 0x7FFFFFFF;
          int v358 = (void *)(v355 + 408);
          uint64_t v359 = *(unsigned int *)(v355 + 416);
          if ((v356 & 0x7FFFFFFFu) >= v359)
          {
            sub_1CB9153B8((uint64_t)v358, v357 - v359 + 1, *(void *)(v355 + 424));
          }
          else
          {
            uint64_t v360 = *(void *)(*v358 + 8 * v357);
            if (v360)
            {
              uint64_t v361 = *(void *)(v360 + 104);
              if (!v361)
              {
                uint64_t v377 = *((void *)v441 + 37);
                uint64_t v378 = *(void *)(v377 + 408);
                uint64_t v379 = *(void *)(v378 + 8 * v357);
                if (v379)
                {
                  uint64_t v380 = *(void *)(v379 + 104);
                  if (v380)
                  {
                    do
                    {
                      uint64_t v401 = *(void *)(v380 + 96);
                      uint64_t v402 = *(void *)(v380 + 104);
                      *(void *)(v380 + 96) = 0;
                      if (v401)
                      {
                        sub_1CB833A08(v401, *(void **)(v401 + 8));
                        MEMORY[0x1D25D9CE0](v401, 0x1020C4062D53EE8);
                      }
                      uint64_t v403 = *(void **)(v380 + 64);
                      if (v403 != (void *)(v380 + 80)) {
                        free(v403);
                      }
                      if (*(void *)v380 != v380 + 16) {
                        free(*(void **)v380);
                      }
                      uint64_t v380 = v402;
                    }
                    while (v402);
                  }
                  uint64_t v381 = *(void *)(v379 + 96);
                  *(void *)(v379 + 96) = 0;
                  *(void *)(v379 + 104) = 0;
                  if (v381)
                  {
                    sub_1CB833A08(v381, *(void **)(v381 + 8));
                    MEMORY[0x1D25D9CE0](v381, 0x1020C4062D53EE8);
                  }
                  uint64_t v382 = *(void **)(v379 + 64);
                  if (v382 != (void *)(v379 + 80)) {
                    free(v382);
                  }
                  if (*(void *)v379 != v379 + 16) {
                    free(*(void **)v379);
                  }
                  MEMORY[0x1D25D9CE0](v379, 0x10A0C408DA535C6);
                  uint64_t v378 = *(void *)(v377 + 408);
                }
                *(void *)(v378 + 8 * v357) = 0;
                uint64_t v383 = *((void *)v441 + 37);
                uint64_t v384 = *(unsigned int *)(v383 + 416);
                if (v357 >= v384) {
                  sub_1CB9153B8(v383 + 408, v357 - v384 + 1, *(void *)(v383 + 424));
                }
                operator new();
              }
              __int16 v362 = *((_WORD *)v353 + 22);
              unint64_t v363 = (unint64_t)v353;
              if ((v362 & 4) != 0)
              {
                do
                  unint64_t v363 = *(void *)v363 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v363 + 44) & 4) != 0);
              }
              uint64_t v364 = v353;
              if ((v362 & 8) != 0)
              {
                do
                  uint64_t v364 = (llvm::MachineInstr *)*((void *)v364 + 1);
                while ((*((_WORD *)v364 + 22) & 8) != 0);
              }
              unint64_t v365 = *((void *)v364 + 1);
              if (v363 != v365)
              {
                do
                {
                  unsigned int v366 = **(unsigned __int16 **)(v363 + 16);
                  BOOL v159 = v366 > 0x17;
                  int v367 = (1 << v366) & 0x83E000;
                  if (v159 || v367 == 0) {
                    goto LABEL_580;
                  }
                  unint64_t v363 = *(void *)(v363 + 8);
                }
                while (v363 != v365);
                unint64_t v363 = v365;
              }
LABEL_580:
              uint64_t v369 = *(void *)(*((void *)v441 + 37) + 288);
              uint64_t v370 = *(void *)(v369 + 368);
              uint64_t v371 = *(unsigned int *)(v369 + 384);
              if (v371)
              {
                LODWORD(v372) = ((v363 >> 4) ^ (v363 >> 9)) & (v371 - 1);
                uint64_t v373 = (uint64_t *)(v370 + 16 * v372);
                uint64_t v374 = *v373;
                if (v363 != *v373)
                {
                  int v375 = 1;
                  do
                  {
                    if (v374 == -4096) {
                      goto LABEL_598;
                    }
                    int v376 = v372 + v375++;
                    uint64_t v372 = v376 & (v371 - 1);
                    uint64_t v374 = *(void *)(v370 + 16 * v372);
                  }
                  while (v363 != v374);
                  uint64_t v373 = (uint64_t *)(v370 + 16 * v372);
                }
              }
              else
              {
LABEL_598:
                uint64_t v373 = (uint64_t *)(v370 + 16 * v371);
              }
              uint64_t v385 = *(void *)(*(void *)(*((void *)v441 + 33) + 232)
                               + 8 * (((unint64_t)**((unsigned int **)v353 + 4) >> 8) & 0xFFF));
              uint64_t v386 = v373[1];
              unint64_t v387 = v386 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v388 = (v386 >> 1) & 3;
              while (2)
              {
                if ((*(void *)(v361 + 112) & v385) != 0) {
                  goto LABEL_616;
                }
                unsigned int v389 = *(_DWORD *)(v361 + 8);
                uint64_t v390 = *(void **)v361;
                if (v389)
                {
                  uint64_t v391 = v390[3 * v389 - 2];
                  unsigned int v392 = *(_DWORD *)(v387 + 24) | v388;
                  unsigned int v393 = (v391 >> 1) & 3 | *(_DWORD *)((v391 & 0xFFFFFFFFFFFFFFF8) + 24);
                  uint64_t v394 = *(void **)v361;
                  unint64_t v395 = *(unsigned int *)(v361 + 8);
                  if (v392 < v393)
                  {
                    do
                    {
                      unint64_t v396 = v395 >> 1;
                      uint64_t v397 = v394[3 * (v395 >> 1) + 1];
                      LODWORD(v397) = (v397 >> 1) & 3 | *(_DWORD *)((v397 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v395 -= (v395 >> 1) + 1;
                      BOOL v398 = v392 >= v397;
                      if (v392 >= v397) {
                        unint64_t v399 = v396 + 1;
                      }
                      else {
                        unint64_t v399 = 0;
                      }
                      v394 += 3 * v399;
                      if (!v398) {
                        unint64_t v395 = v396;
                      }
                    }
                    while (v395);
LABEL_613:
                    v400 = &v390[3 * v389];
                    if (v394 == v400
                      || ((*v394 >> 1) & 3 | *(_DWORD *)((*v394 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v387 + 24) | v388))
                    {
                      uint64_t v394 = v400;
                    }
                    llvm::LiveRange::MergeValueNumberInto(v361, v394[5], v394[2]);
LABEL_616:
                    uint64_t v361 = *(void *)(v361 + 104);
                    if (!v361)
                    {
                      llvm::LiveIntervals::shrinkToUses(*((void **)v441 + 37), v360, 0);
                      goto LABEL_619;
                    }
                    continue;
                  }
                }
                else
                {
                  unsigned int v389 = 0;
                }
                break;
              }
              uint64_t v394 = &v390[3 * v389];
              goto LABEL_613;
            }
          }
          operator new();
        }
      }
LABEL_619:
      sub_1CC4BF9C4((uint64_t)&v455);
      v145 = (int32x2_t *)v441;
      v144 = v353;
LABEL_620:
      sub_1CC4BC37C(v145, (uint64_t)v144);
      uint64_t v27 = (uint64_t)v444;
      uint64_t v445 = v444;
      char v434 = 1;
    }
    while (v27 != v424);
LABEL_648:
    uint64_t v14 = *(void *)(v420 + 8);
  }
  while (v14 != v418);
LABEL_674:
  sub_1CC4C0A08((uint64_t)&v455);
  if ((v455 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v456, 8);
  }
  return v434 & 1;
}

void sub_1CC4BC37C(int32x2_t *a1, uint64_t a2)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  if (**(_WORD **)(a2 + 16) == 19)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    signed int v5 = *(_DWORD *)(v4 + 4);
    if (v5 < 1) {
      return;
    }
    unsigned int v6 = sub_1CC4C0604((int *)*(unsigned int *)(v4 + 36), (uint64_t)&a1[56]);
    if (v5 == v6) {
      return;
    }
    BOOL v7 = v6 && (v6 | v5) >> 30 == 0;
    if (v7 && llvm::MCRegisterInfo::regsOverlap((void *)(*(void *)&a1[33] + 8), v5, v6)) {
      return;
    }
  }
  uint64_t v8 = *(unsigned int *)(a2 + 40);
  if (!v8) {
    return;
  }
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 + 32 * v8;
  uint64_t v29 = v10;
  do
  {
    if (*(_DWORD *)v9 != 12
      && (*(_DWORD *)v9 || (*(_DWORD *)v9 & 0x1000000) == 0 || *(int *)(v9 + 4) < 1))
    {
      goto LABEL_52;
    }
    int32x2_t v11 = a1[33];
    uint64_t v31 = v33;
    uint64_t v32 = 0x200000000;
    int32x2_t v12 = a1[56];
    uint64_t v13 = a1[58].u32[0];
    uint64_t v14 = (unsigned int *)(*(void *)&v12 + 8 * v13);
    if (a1[57].i32[0])
    {
      if (a1[58].i32[0])
      {
        uint64_t v15 = 8 * v13;
        uint64_t v16 = (unsigned int *)a1[56];
        while (*v16 >= 0xFFFFFFFE)
        {
          v16 += 2;
          v15 -= 8;
          if (!v15) {
            goto LABEL_21;
          }
        }
      }
      else
      {
        uint64_t v16 = (unsigned int *)a1[56];
      }
    }
    else
    {
LABEL_21:
      uint64_t v16 = (unsigned int *)(*(void *)&v12 + 8 * v13);
    }
    int v17 = (unsigned int *)(*(void *)&v12 + 8 * v13);
    if (v16 == v17) {
      goto LABEL_52;
    }
    unsigned int v18 = 0;
    int v19 = (void *)(*(void *)&v11 + 8);
    do
    {
      unint64_t v20 = v16[1];
      if ((v20 & 0x80000000) == 0)
      {
        unsigned int v21 = *v16;
        if (*(unsigned char *)v9)
        {
          if (((*(_DWORD *)(*(void *)(v9 + 16) + ((v20 >> 3) & 0x1FFFFFFC)) >> v20) & 1) == 0) {
            goto LABEL_30;
          }
        }
        else
        {
          unsigned int v22 = *(_DWORD *)(v9 + 4);
          if (v20 == v22
            || ((v20 - 1) <= 0x3FFFFFFE ? (BOOL v25 = v22 - 1 > 0x3FFFFFFE) : (BOOL v25 = 1),
                !v25 && llvm::MCRegisterInfo::regsOverlap(v19, v20, v22)))
          {
LABEL_30:
            if (v18 >= HIDWORD(v32)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v31 + v18) = v21;
            unsigned int v18 = v32 + 1;
            LODWORD(v32) = v32 + 1;
          }
        }
      }
      int v23 = v16 + 2;
      while (v23 != v14)
      {
        unsigned int v24 = *v23;
        v23 += 2;
        if (v24 <= 0xFFFFFFFD)
        {
          uint64_t v16 = v23 - 2;
          goto LABEL_37;
        }
      }
      uint64_t v16 = v14;
LABEL_37:
      ;
    }
    while (v16 != v17);
    uint64_t v26 = (int *)v31;
    if (v18)
    {
      uint64_t v27 = 4 * v18;
      do
      {
        int v28 = *v26++;
        int v30 = v28;
        sub_1CBA84B14(a1 + 56, &v30);
        v27 -= 4;
      }
      while (v27);
      uint64_t v26 = (int *)v31;
    }
    uint64_t v10 = v29;
    if (v26 != (int *)v33) {
      free(v26);
    }
LABEL_52:
    v9 += 32;
  }
  while (v9 != v10);
}

uint64_t sub_1CC4BC638(uint64_t a1, uint64_t *a2, unint64_t *a3, unsigned int a4, unsigned int a5, unsigned int *a6, char a7)
{
  v576[1] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 312)) {
    return 0;
  }
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  int32x2_t v12 = (llvm::MachineInstr *)*a2;
  uint64_t v13 = *(void *)(*a2 + 32);
  uint64_t v14 = a5;
  uint64_t v15 = (int *)*(unsigned int *)(v13 + 32 * a5 + 4);
  uint64_t v16 = a4;
  unsigned int v554 = *(_DWORD *)(v13 + 32 * a4 + 4);
  BOOL v556 = sub_1CC4C0678(*a2, v554, *(void *)(a1 + 280), *(void *)(a1 + 296), 1);
  if ((v15 & 0x80000000) != 0) {
    sub_1CC4BFAD4(v11, v15);
  }
  unsigned int v17 = *a6;
  LODWORD(v574) = a4;
  uint64_t v18 = *((void *)v12 + 2);
  uint64_t v19 = (uint64_t)v12;
  v557 = v12;
  if ((*(unsigned char *)(v18 + 11) & 2) == 0) {
    goto LABEL_64;
  }
  uint64_t v20 = *((void *)v12 + 4);
  unsigned int v21 = (int *)*(unsigned int *)(v20 + 32 * v14 + 4);
  unsigned int v22 = (int *)*(unsigned int *)(v20 + 32 * v16 + 4);
  unsigned int v23 = *(unsigned __int16 *)(v18 + 2);
  unsigned int v24 = *(unsigned __int8 *)(v18 + 4);
  LODWORD(v571) = v24;
  if (v24 >= v23) {
    goto LABEL_64;
  }
  v533 = v21;
  v537 = v10;
  unsigned int v526 = v17;
  v541 = a6;
  v544 = v15;
  char v528 = 0;
  uint64_t v527 = v11 + 472;
  uint64_t v525 = v11 + 448;
  BOOL v25 = v556;
LABEL_7:
  v531 = v22;
  int v547 = !v25;
  do
  {
    if (v24 == v574) {
      goto LABEL_53;
    }
    if (*(unsigned char *)(*(void *)(v19 + 32) + 32 * v24)) {
      goto LABEL_53;
    }
    int v26 = (*(uint64_t (**)(void, llvm::MachineInstr *, unsigned int **, unsigned int **))(**(void **)(v11 + 256) + 200))(*(void *)(v11 + 256), v557, &v574, &v571);
    uint64_t v19 = (uint64_t)v557;
    if (!v26) {
      goto LABEL_53;
    }
    uint64_t v27 = *((void *)v557 + 4) + 32 * v571;
    unsigned int v22 = (int *)*(unsigned int *)(v27 + 4);
    BOOL v28 = sub_1CC4C0678((uint64_t)v557, *(_DWORD *)(v27 + 4), *(void *)(v11 + 280), *(void *)(v11 + 296), 0);
    uint64_t v19 = (uint64_t)v557;
    BOOL v25 = v28;
    if (v547 & v28) {
      goto LABEL_52;
    }
    if (!*(_DWORD *)(v11 + 312)) {
      goto LABEL_53;
    }
    BOOL v29 = sub_1CC4C0130((uint64_t)v557, v22, *(void *)(v11 + 296));
    uint64_t v19 = (uint64_t)v557;
    if (!v29) {
      goto LABEL_53;
    }
    unsigned int v30 = sub_1CC4C0604(v533, v527);
    if (!v30) {
      goto LABEL_39;
    }
    unsigned int v31 = v30;
    uint64_t v521 = v11;
    unsigned int v32 = sub_1CC4C0604(v531, v525);
    unsigned int v33 = sub_1CC4C0604(v22, v525);
    if (v32)
    {
      if (v32 == v31)
      {
        BOOL v34 = 0;
        int v35 = 0;
        goto LABEL_23;
      }
      if (!((v32 | v31) >> 30))
      {
        BOOL v34 = !llvm::MCRegisterInfo::regsOverlap((void *)(*(void *)(v521 + 264) + 8), v32, v31);
        int v35 = v34;
        goto LABEL_23;
      }
      BOOL v34 = 1;
    }
    else
    {
      BOOL v34 = 0;
    }
    int v35 = 1;
LABEL_23:
    uint64_t v19 = (uint64_t)v557;
    if (v33)
    {
      if (v33 == v31)
      {
        BOOL v36 = 1;
        char v37 = 1;
      }
      else if ((v33 | v31) >> 30)
      {
        BOOL v36 = 0;
        char v37 = 0;
      }
      else
      {
        unsigned int v38 = v31;
        int v39 = v35;
        BOOL v36 = llvm::MCRegisterInfo::regsOverlap((void *)(*(void *)(v521 + 264) + 8), v33, v38);
        int v35 = v39;
        uint64_t v19 = (uint64_t)v557;
        char v37 = v36;
      }
    }
    else
    {
      char v37 = 0;
      BOOL v36 = 1;
    }
    if (v32) {
      char v37 = 0;
    }
    uint64_t v11 = v521;
    if ((v37 & 1) == 0 && (!v34 || !v36))
    {
      if (v33) {
        int v40 = 1;
      }
      else {
        int v40 = v35;
      }
      if (v40 != 1 || !v34 && !v36) {
        goto LABEL_53;
      }
LABEL_39:
      LODWORD(v564) = 0;
      if (!sub_1CC4C07E0(v11, v22, v526, (unsigned int *)&v564)) {
        goto LABEL_43;
      }
      LODWORD(v561) = 0;
      if (!sub_1CC4C07E0(v11, v531, v526, (unsigned int *)&v561)
        || (int v41 = dword_1EBCD7888, (sub_1CC4C08F8(v11, v22, (int)v533, dword_1EBCD7888) & 1) != 0))
      {
        uint64_t v19 = (uint64_t)v557;
      }
      else
      {
        if (sub_1CC4C08F8(v11, v531, (int)v533, v41))
        {
LABEL_43:
          uint64_t v19 = (uint64_t)v557;
          goto LABEL_53;
        }
        v568[0] = 0;
        if ((*(unsigned int (**)(void, llvm::MachineInstr *, BOOL *))(**(void **)(v11 + 256) + 208))(*(void *)(v11 + 256), v557, v568))
        {
          uint64_t v19 = (uint64_t)v557;
          if (!v568[0]) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v19 = (uint64_t)v557;
          if (!v561 || !v564 || v564 <= v561) {
            goto LABEL_53;
          }
        }
      }
    }
LABEL_52:
    unsigned int v42 = (int *)*(unsigned int *)(*(void *)(v19 + 32) + 32 * v571 + 4);
    uint64_t v43 = llvm::TargetInstrInfo::commuteInstruction(*(llvm::TargetInstrInfo **)(v11 + 256), v557, 0, (int)v574, (int)v571);
    uint64_t v19 = (uint64_t)v557;
    if (v43)
    {
      unsigned int v44 = sub_1CC4C0604(v42, v525);
      if (v44)
      {
        LODWORD(v564) = *(_DWORD *)(*((void *)v557 + 4) + 32 * v14 + 4);
        sub_1CD4145B8(v525, (int *)&v564)[1] = v44;
      }
      uint64_t v19 = (uint64_t)v557;
      uint64_t v45 = *((void *)v557 + 2);
      unsigned int v23 = *(unsigned __int16 *)(v45 + 2);
      unsigned int v24 = v571 + 1;
      LODWORD(v571) = v24;
      char v528 = 1;
      if (v24 >= v23)
      {
        uint64_t v10 = v537;
        a6 = v541;
        uint64_t v15 = v544;
LABEL_61:
        uint64_t result = 0;
        if (*(unsigned char *)(v45 + 11) & 4) == 0 || (a7) {
          return result;
        }
        unsigned int v47 = *(_DWORD *)(*(void *)(v19 + 32) + 32 * v16 + 4);
        char v48 = 1;
        BOOL v49 = sub_1CC4C0678(v19, v47, *(void *)(v11 + 280), *(void *)(v11 + 296), 1);
        uint64_t v19 = (uint64_t)v557;
        BOOL v556 = v49;
        unsigned int v50 = v47;
        goto LABEL_117;
      }
      goto LABEL_7;
    }
LABEL_53:
    unsigned int v24 = v571 + 1;
    LODWORD(v571) = v24;
  }
  while (v24 < v23);
  uint64_t v10 = v537;
  a6 = v541;
  uint64_t v15 = v544;
  if (v528)
  {
    uint64_t v45 = *(void *)(v19 + 16);
    goto LABEL_61;
  }
LABEL_64:
  if (a7) {
    return 0;
  }
  if (!byte_1EBCD77C8)
  {
    char v48 = 0;
LABEL_82:
    unsigned int v50 = v554;
    goto LABEL_117;
  }
  uint64_t v51 = *(void *)(v11 + 288);
  unsigned int v50 = v554;
  if (!v51 && !*(void *)(v11 + 296)) {
    goto LABEL_862;
  }
  v545 = v15;
  uint64_t v52 = *v10;
  uint64_t v53 = *(void *)(v11 + 328);
  uint64_t v54 = *(unsigned int *)(v11 + 344);
  if (!v54) {
    goto LABEL_74;
  }
  uint64_t v55 = v11;
  LODWORD(v56) = ((v52 >> 4) ^ (v52 >> 9)) & (v54 - 1);
  unsigned int v57 = (uint64_t *)(v53 + 16 * v56);
  uint64_t v58 = *v57;
  if (v52 != *v57)
  {
    int v59 = 1;
    uint64_t v11 = v55;
    while (v58 != -4096)
    {
      int v60 = v56 + v59++;
      uint64_t v56 = v60 & (v54 - 1);
      uint64_t v58 = *(void *)(v53 + 16 * v56);
      if (v52 == v58)
      {
        unsigned int v57 = (uint64_t *)(v53 + 16 * v56);
        goto LABEL_75;
      }
    }
LABEL_74:
    uint64_t v55 = v11;
    unsigned int v57 = (uint64_t *)(v53 + 16 * v54);
  }
LABEL_75:
  if (v57 == (uint64_t *)(v53 + 16 * v54)) {
    goto LABEL_115;
  }
  uint64_t v61 = *(void *)(v55 + 296);
  if (v61)
  {
    uint64_t v62 = v10;
    uint64_t v63 = (void *)(v61 + 408);
    unint64_t v64 = *(unsigned int *)(v61 + 416);
    BOOL v85 = (v554 & 0x7FFFFFFF) >= v64;
    unint64_t v65 = (v554 & 0x7FFFFFFF) - v64;
    if (v85)
    {
      sub_1CB9153B8((uint64_t)v63, v65 + 1, *(void *)(v61 + 424));
    }
    else
    {
      uint64_t v66 = *(void *)(*v63 + 8 * (v554 & 0x7FFFFFFF));
      if (v66)
      {
        uint64_t v67 = *(void *)(*(void *)(*(void *)(v61 + 288) + 392)
                        + 16 * *(unsigned int *)(*(void *)(v55 + 320) + 24)
                        + 8);
        unsigned int v68 = (v67 >> 1) & 3;
        unint64_t v69 = v67 & 0xFFFFFFFFFFFFFFF8;
        if (v68) {
          uint64_t v70 = v69 | (2 * (v68 - 1));
        }
        else {
          uint64_t v70 = *(void *)v69 | 6;
        }
        unint64_t v77 = *(unsigned int *)(v66 + 8);
        int32x2_t v78 = *(void **)v66;
        if (v77)
        {
          uint64_t v79 = v78[3 * v77 - 2];
          unsigned int v80 = *(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24) | (v70 >> 1) & 3;
          uint64_t v10 = v62;
          if (v80 < ((v79 >> 1) & 3 | *(_DWORD *)((v79 & 0xFFFFFFFFFFFFFFF8) + 24)))
          {
            uint64_t v81 = v78;
            unint64_t v82 = v77;
            do
            {
              unint64_t v83 = v82 >> 1;
              uint64_t v84 = v81[3 * (v82 >> 1) + 1];
              LODWORD(v84) = (v84 >> 1) & 3 | *(_DWORD *)((v84 & 0xFFFFFFFFFFFFFFF8) + 24);
              v82 -= (v82 >> 1) + 1;
              BOOL v85 = v80 >= v84;
              if (v80 >= v84) {
                unint64_t v86 = v83 + 1;
              }
              else {
                unint64_t v86 = 0;
              }
              v81 += 3 * v86;
              if (!v85) {
                unint64_t v82 = v83;
              }
            }
            while (v82);
LABEL_102:
            if (v81 == &v78[3 * v77]
              || ((*v81 >> 1) & 3 | *(_DWORD *)((*v81 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24) | (v70 >> 1) & 3))
            {
              unint64_t v87 = *(v81 - 2);
              if (v87 >= 8)
              {
                uint64_t v76 = *(void *)((v87 & 0xFFFFFFFFFFFFFFF8) + 16);
                goto LABEL_106;
              }
            }
            goto LABEL_115;
          }
        }
        else
        {
          LODWORD(v77) = 0;
          uint64_t v10 = v62;
        }
        uint64_t v81 = &v78[3 * v77];
        goto LABEL_102;
      }
    }
    operator new();
  }
  unint64_t v71 = (void *)(v51 + 248);
  unint64_t v72 = v554 & 0x7FFFFFFF;
  if (v72 >= *(unsigned int *)(v51 + 256))
  {
    sub_1CD520A8C((uint64_t *)(v51 + 248), v72 + 1, v51 + 264);
    uint64_t v19 = (uint64_t)v557;
  }
  uint64_t v73 = *v71 + 56 * v72;
  uint64_t v74 = *(uint64_t **)(v73 + 32);
  uint64_t v75 = *(uint64_t **)(v73 + 40);
  if (v74 == v75) {
    goto LABEL_115;
  }
  while (1)
  {
    uint64_t v76 = *v74;
    if (*(void *)(*v74 + 24) == *(void *)(v55 + 320)) {
      break;
    }
    if (++v74 == v75) {
      goto LABEL_115;
    }
  }
LABEL_106:
  BOOL v88 = !v76 || v52 == v76;
  if (v88 || ((int v89 = *(unsigned __int16 **)(v76 + 16), v90 = *v89, v90 != 11) ? (v91 = v90 == 19) : (v91 = 1), v91))
  {
LABEL_115:
    char v48 = 0;
    uint64_t v11 = v55;
    goto LABEL_116;
  }
  unsigned int v180 = *(unsigned __int16 *)(v76 + 44);
  BOOL v88 = (v180 & 0xC) == 0;
  int v181 = (v180 >> 2) & 1;
  if (v88) {
    LOBYTE(v181) = 1;
  }
  uint64_t v182 = *((void *)v89 + 1);
  if ((v181 & 1) == 0)
  {
    v506 = a6;
    v507 = v10;
    if ((v182 & 0x1000000) == 0)
    {
      uint64_t v508 = v76;
      uint64_t v19 = (uint64_t)v557;
      unsigned int v50 = v554;
      do
      {
        uint64_t v10 = v507;
        a6 = v506;
        if ((*(_WORD *)(v508 + 44) & 8) == 0) {
          goto LABEL_230;
        }
        uint64_t v508 = *(void *)(v508 + 8);
      }
      while ((*(unsigned char *)(*(void *)(v508 + 16) + 11) & 1) == 0);
    }
    char v48 = 0;
    uint64_t v11 = v55;
    uint64_t v10 = v507;
    a6 = v506;
    uint64_t v19 = (uint64_t)v557;
    uint64_t v15 = v545;
    goto LABEL_82;
  }
  if ((v182 & 0x1000000) != 0) {
    goto LABEL_115;
  }
LABEL_230:
  if (v90 - 1) <= 1 && (*(unsigned char *)(*(void *)(v76 + 32) + 48)) {
    goto LABEL_115;
  }
  if (v181)
  {
    if ((v182 & 0x680) != 0) {
      goto LABEL_115;
    }
  }
  else
  {
    if ((v182 & 0x80) != 0) {
      goto LABEL_115;
    }
    uint64_t v185 = v76;
    while ((*(_WORD *)(v185 + 44) & 8) != 0)
    {
      uint64_t v185 = *(void *)(v185 + 8);
      if ((*(unsigned char *)(*(void *)(v185 + 16) + 8) & 0x80) != 0) {
        goto LABEL_115;
      }
    }
    if ((v182 & 0x400) != 0) {
      goto LABEL_115;
    }
    uint64_t v186 = v76;
    while ((*(_WORD *)(v186 + 44) & 8) != 0)
    {
      uint64_t v186 = *(void *)(v186 + 8);
      if ((*(unsigned char *)(*(void *)(v186 + 16) + 9) & 4) != 0) {
        goto LABEL_115;
      }
    }
    if ((v182 & 0x200) != 0) {
      goto LABEL_115;
    }
    uint64_t v187 = v76;
    while ((*(_WORD *)(v187 + 44) & 8) != 0)
    {
      uint64_t v187 = *(void *)(v187 + 8);
      if ((*(unsigned char *)(*(void *)(v187 + 16) + 9) & 2) != 0) {
        goto LABEL_115;
      }
    }
  }
  LODWORD(v571) = 0;
  if ((sub_1CC4C04BC((llvm::MachineInstr *)v76, v50, &v571) & 1) == 0)
  {
    v568[0] = 1;
    if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v52, *(llvm::AAResults **)(v55 + 304), v568)
      && (*(unsigned int (**)(void, void, uint64_t, void))(**(void **)(v55 + 256) + 960))(*(void *)(v55 + 256), *(void *)(v55 + 272), v52, 0) <= 1)
    {
      v564 = &v566;
      uint64_t v565 = 0x200000000;
      v561 = v563;
      uint64_t v562 = 0x200000000;
      v574 = (unsigned int *)v576;
      uint64_t v575 = 0x200000000;
      uint64_t v382 = *(unsigned int *)(v52 + 40);
      if (!v382) {
        goto LABEL_612;
      }
      uint64_t v383 = v10;
      uint64_t v384 = *(_DWORD **)(v52 + 32);
      uint64_t v385 = 32 * v382;
      while (1)
      {
        if (!*v384)
        {
          unsigned int v386 = v384[1];
          if (v386)
          {
            if ((*v384 & 0x1000000) != 0)
            {
              uint64_t v387 = v575;
              if (v575 >= (unint64_t)HIDWORD(v575)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v388 = (void **)&v574;
            }
            else
            {
              if (v565 >= (unint64_t)HIDWORD(v565)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v564 + v565) = v386;
              LODWORD(v565) = v565 + 1;
              if (v386 == v554) {
                goto LABEL_586;
              }
              if (((*v384 >> 26) & ~HIBYTE(*v384) & 1) == 0)
              {
                uint64_t v389 = *(void *)(v55 + 296);
                if (!v389 || !sub_1CC4C0130(v52, v386, v389)) {
                  goto LABEL_586;
                }
              }
              uint64_t v387 = v562;
              if (v562 >= (unint64_t)HIDWORD(v562)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v388 = &v561;
            }
            *((_DWORD *)*v388 + v387) = v386;
            ++*((_DWORD *)v388 + 2);
          }
        }
LABEL_586:
        v384 += 8;
        v385 -= 32;
        if (!v385)
        {
          uint64_t v10 = v383;
          if (v52)
          {
LABEL_612:
            char v515 = 0;
            uint64_t v397 = v52;
            if ((*(unsigned char *)v52 & 4) != 0) {
              goto LABEL_676;
            }
          }
          else
          {
            uint64_t v397 = 0;
            char v515 = 1;
          }
          while ((*(_WORD *)(v397 + 44) & 8) != 0)
            uint64_t v397 = *(void *)(v397 + 8);
LABEL_676:
          uint64_t v413 = *(void *)(v397 + 8);
          uint64_t v414 = *(void *)(v55 + 320);
          uint64_t v415 = v414 + 48;
          v540 = v10;
          v543 = a6;
          uint64_t v532 = v413;
          if (v413 == v414 + 48)
          {
            uint64_t v416 = *(void *)(v397 + 8);
            goto LABEL_706;
          }
          uint64_t v416 = *(void *)(v397 + 8);
          while (1)
          {
            int v417 = **(unsigned __int16 **)(v416 + 16);
            if ((v417 - 13) < 5 || v417 == 23)
            {
              if ((*(unsigned char *)v416 & 4) == 0)
              {
                while ((*(_WORD *)(v416 + 44) & 8) != 0)
                  uint64_t v416 = *(void *)(v416 + 8);
              }
              uint64_t v416 = *(void *)(v416 + 8);
              if (v416 != v415) {
                continue;
              }
              int v417 = **(unsigned __int16 **)(v415 + 16);
            }
            else
            {
              uint64_t v415 = v416;
            }
            if (v417 != 19)
            {
              uint64_t v416 = v415;
              goto LABEL_706;
            }
            uint64_t v523 = v414;
            if (!v575)
            {
LABEL_704:
              uint64_t v416 = v415;
              uint64_t v10 = v540;
              uint64_t v413 = v532;
              uint64_t v414 = v523;
LABEL_706:
              uint64_t v424 = v76;
              if ((*(unsigned char *)v76 & 4) == 0)
              {
                uint64_t v424 = v76;
                if ((*(_WORD *)(v76 + 44) & 8) != 0)
                {
                  uint64_t v424 = v76;
                  do
                    uint64_t v424 = *(void *)(v424 + 8);
                  while ((*(_WORD *)(v424 + 44) & 8) != 0);
                }
              }
              uint64_t v425 = *(unint64_t **)(v424 + 8);
              if ((unint64_t *)v416 != v425)
              {
                unsigned int v426 = 0;
                uint64_t v427 = v416;
                while (2)
                {
                  v428 = *(unsigned __int16 **)(v427 + 16);
                  int v429 = *v428;
                  if ((v429 - 13) < 5 || v429 == 23) {
                    goto LABEL_717;
                  }
                  if (v426 > 0xA) {
                    goto LABEL_808;
                  }
                  unsigned int v431 = *(unsigned __int16 *)(v427 + 44);
                  BOOL v88 = (v431 & 0xC) == 0;
                  int v432 = (v431 >> 2) & 1;
                  if (v88) {
                    LOBYTE(v432) = 1;
                  }
                  uint64_t v433 = *((void *)v428 + 1);
                  if (v432)
                  {
                    if ((v433 & 0x1000000) != 0) {
                      goto LABEL_808;
                    }
                  }
                  else
                  {
                    uint64_t v472 = v427;
                    if ((v433 & 0x1000000) != 0) {
                      goto LABEL_808;
                    }
                    while ((*(_WORD *)(v472 + 44) & 8) != 0)
                    {
                      char v469 = 0;
                      uint64_t v472 = *(void *)(v472 + 8);
                      if (*(unsigned char *)(*(void *)(v472 + 16) + 11)) {
                        goto LABEL_855;
                      }
                    }
                  }
                  if (v429 - 1) <= 1 && (*(unsigned char *)(*(void *)(v427 + 32) + 48))
                  {
LABEL_808:
                    char v469 = 0;
                    goto LABEL_855;
                  }
                  if (v432)
                  {
                    if ((v433 & 0x680) != 0) {
                      goto LABEL_808;
                    }
                  }
                  else
                  {
                    uint64_t v468 = v427;
                    if ((v433 & 0x80) != 0) {
                      goto LABEL_808;
                    }
                    while ((*(_WORD *)(v468 + 44) & 8) != 0)
                    {
                      char v469 = 0;
                      uint64_t v468 = *(void *)(v468 + 8);
                      if ((*(unsigned char *)(*(void *)(v468 + 16) + 8) & 0x80) != 0) {
                        goto LABEL_855;
                      }
                    }
                    if ((v433 & 0x400) != 0) {
                      goto LABEL_808;
                    }
                    uint64_t v470 = v427;
                    while ((*(_WORD *)(v470 + 44) & 8) != 0)
                    {
                      char v469 = 0;
                      uint64_t v470 = *(void *)(v470 + 8);
                      if ((*(unsigned char *)(*(void *)(v470 + 16) + 9) & 4) != 0) {
                        goto LABEL_855;
                      }
                    }
                    if ((v433 & 0x200) != 0) {
                      goto LABEL_808;
                    }
                    uint64_t v471 = v427;
                    while ((*(_WORD *)(v471 + 44) & 8) != 0)
                    {
                      char v469 = 0;
                      uint64_t v471 = *(void *)(v471 + 8);
                      if ((*(unsigned char *)(*(void *)(v471 + 16) + 9) & 2) != 0) {
                        goto LABEL_855;
                      }
                    }
                  }
                  ++v426;
                  uint64_t v434 = *(unsigned int *)(v427 + 40);
                  if (!v434) {
                    goto LABEL_717;
                  }
                  unsigned int v512 = v426;
                  uint64_t v435 = *(unsigned int **)(v427 + 32);
                  v436 = &v435[8 * v434];
                  v530 = v425;
                  v524 = v436;
LABEL_730:
                  unsigned int v437 = *v435;
                  if (*v435) {
                    goto LABEL_731;
                  }
                  unsigned int v438 = v435[1];
                  if (!v438) {
                    goto LABEL_731;
                  }
                  unsigned int v439 = v438 >> 30;
                  unsigned int v552 = v435[1];
                  unsigned int v536 = v438 >> 30;
                  if ((v437 & 0x1000000) != 0)
                  {
                    if (v565)
                    {
                      uint64_t v451 = (unsigned int *)v564;
                      v520 = (void *)(*(void *)(v55 + 264) + 8);
                      uint64_t v452 = 4 * v565;
                      while (1)
                      {
                        unsigned int v453 = *v451;
                        if (*v451 == v438) {
                          break;
                        }
                        if (!v439 && v453 - 1 <= 0x3FFFFFFE)
                        {
                          BOOL v454 = llvm::MCRegisterInfo::regsOverlap(v520, v453, v552);
                          unsigned int v439 = v536;
                          unsigned int v438 = v552;
                          if (v454) {
                            break;
                          }
                        }
                        ++v451;
                        v452 -= 4;
                        if (!v452) {
                          goto LABEL_759;
                        }
                      }
LABEL_809:
                      char v469 = 0;
                      uint64_t v10 = v540;
                      goto LABEL_855;
                    }
LABEL_759:
                    uint64_t v425 = v530;
                    v436 = v524;
                    if ((~v437 & 0x5000000) != 0 && v575)
                    {
                      uint64_t v455 = v574;
                      uint64_t v456 = (void *)(*(void *)(v55 + 264) + 8);
                      uint64_t v457 = 4 * v575;
                      while (1)
                      {
                        unsigned int v458 = *v455;
                        if (*v455 == v438) {
                          goto LABEL_809;
                        }
                        if (!v439 && v458 - 1 <= 0x3FFFFFFE)
                        {
                          BOOL v459 = llvm::MCRegisterInfo::regsOverlap(v456, v458, v552);
                          unsigned int v439 = v536;
                          unsigned int v438 = v552;
                          if (v459) {
                            goto LABEL_809;
                          }
                        }
                        ++v455;
                        v457 -= 4;
                        uint64_t v425 = v530;
                        v436 = v524;
                        if (!v457) {
                          goto LABEL_731;
                        }
                      }
                    }
                    goto LABEL_731;
                  }
                  if (v575)
                  {
                    char v440 = v574;
                    v518 = (void *)(*(void *)(v55 + 264) + 8);
                    uint64_t v441 = 4 * v575;
                    do
                    {
                      unsigned int v442 = *v440;
                      if (*v440 == v438) {
                        goto LABEL_809;
                      }
                      if (!v439 && v442 - 1 <= 0x3FFFFFFE)
                      {
                        BOOL v443 = llvm::MCRegisterInfo::regsOverlap(v518, v442, v552);
                        unsigned int v439 = v536;
                        unsigned int v438 = v552;
                        if (v443) {
                          goto LABEL_809;
                        }
                      }
                      ++v440;
                      v441 -= 4;
                    }
                    while (v441);
                  }
                  if ((v437 >> 26) & ~HIBYTE(v437))
                  {
                    uint64_t v425 = v530;
                    v436 = v524;
                    if (v438 != v554) {
                      goto LABEL_744;
                    }
LABEL_731:
                    v435 += 8;
                    if (v435 == v436)
                    {
                      uint64_t v10 = v540;
                      uint64_t v413 = v532;
                      unsigned int v426 = v512;
                      if (!v427) {
                        goto LABEL_800;
                      }
LABEL_717:
                      if ((*(unsigned char *)v427 & 4) == 0)
                      {
LABEL_800:
                        while ((*(_WORD *)(v427 + 44) & 8) != 0)
                          uint64_t v427 = *(void *)(v427 + 8);
                      }
                      uint64_t v427 = *(void *)(v427 + 8);
                      if ((unint64_t *)v427 == v425)
                      {
                        uint64_t v414 = *(void *)(v55 + 320);
                        goto LABEL_810;
                      }
                      continue;
                    }
                    goto LABEL_730;
                  }
                  break;
                }
                uint64_t v460 = *(void *)(v55 + 296);
                if (v460)
                {
                  BOOL v519 = sub_1CC4C0130(v427, v552, v460);
                  if (v552 != v554)
                  {
                    if (v519)
                    {
LABEL_744:
                      if (v565)
                      {
                        uint64_t v444 = (unsigned int *)v564;
                        uint64_t v445 = (void *)(*(void *)(v55 + 264) + 8);
                        uint64_t v446 = 4 * v565;
                        unsigned int v447 = v552;
                        unsigned int v448 = v536;
                        do
                        {
                          unsigned int v449 = *v444;
                          if (*v444 == v447) {
                            goto LABEL_809;
                          }
                          if (!v448 && v449 - 1 <= 0x3FFFFFFE)
                          {
                            BOOL v450 = llvm::MCRegisterInfo::regsOverlap(v445, v449, v552);
                            unsigned int v448 = v536;
                            unsigned int v447 = v552;
                            if (v450) {
                              goto LABEL_809;
                            }
                          }
                          ++v444;
                          v446 -= 4;
                        }
                        while (v446);
                      }
                      BOOL v519 = 1;
                    }
                    else
                    {
                      BOOL v519 = 0;
                    }
LABEL_773:
                    if (v562)
                    {
                      v461 = (unsigned int *)v561;
                      v462 = (void *)(*(void *)(v55 + 264) + 8);
                      uint64_t v463 = 4 * v562;
                      unsigned int v464 = v552;
                      unsigned int v465 = v536;
                      do
                      {
                        unsigned int v466 = *v461;
                        if (*v461 == v464) {
                          goto LABEL_809;
                        }
                        if (!v465 && v466 - 1 <= 0x3FFFFFFE)
                        {
                          BOOL v467 = llvm::MCRegisterInfo::regsOverlap(v462, v466, v552);
                          unsigned int v465 = v536;
                          unsigned int v464 = v552;
                          if (v467) {
                            goto LABEL_809;
                          }
                        }
                        ++v461;
                        v463 -= 4;
                      }
                      while (v463);
                    }
                  }
                }
                else
                {
                  BOOL v519 = 0;
                  if (v552 != v554) {
                    goto LABEL_773;
                  }
                }
                uint64_t v425 = v530;
                v436 = v524;
                if (v552 == v554 && !v519) {
                  goto LABEL_809;
                }
                goto LABEL_731;
              }
LABEL_810:
              char v473 = *(void **)(v414 + 56);
              uint64_t v474 = (void *)v52;
              if ((void *)v52 == v473) {
                goto LABEL_827;
              }
              uint64_t v474 = (void *)v52;
              while (2)
              {
                unint64_t v475 = *v474 & 0xFFFFFFFFFFFFFFF8;
                if (v475)
                {
                  unint64_t v476 = *v474 & 0xFFFFFFFFFFFFFFF8;
                  if ((*(unsigned char *)v475 & 4) != 0)
                  {
                    if (**(unsigned __int16 **)(v475 + 16) - 13 >= 5) {
                      goto LABEL_827;
                    }
                    goto LABEL_825;
                  }
                }
                else
                {
                  unint64_t v476 = 0;
                }
                while ((*(_WORD *)(v476 + 44) & 4) != 0)
                  unint64_t v476 = *(void *)v476 & 0xFFFFFFFFFFFFFFF8;
                if (**(unsigned __int16 **)(v476 + 16) - 13 >= 5) {
                  goto LABEL_827;
                }
                if (!v475 || (*(unsigned char *)v475 & 4) == 0)
                {
                  while ((*(_WORD *)(v475 + 44) & 4) != 0)
                    unint64_t v475 = *(void *)v475 & 0xFFFFFFFFFFFFFFF8;
                }
LABEL_825:
                uint64_t v474 = (void *)v475;
                if ((void *)v475 == v473)
                {
                  uint64_t v474 = v473;
LABEL_827:
                  *a3 = v416;
                  if (*(void *)(v55 + 296))
                  {
                    if (v413 != v416)
                    {
                      do
                      {
                        if (!v413 || (uint64_t v477 = v413, (*(unsigned char *)v413 & 4) == 0))
                        {
                          uint64_t v477 = v413;
                          if ((*(_WORD *)(v413 + 44) & 8) != 0)
                          {
                            uint64_t v477 = v413;
                            do
                              uint64_t v477 = *(void *)(v477 + 8);
                            while ((*(_WORD *)(v477 + 44) & 8) != 0);
                          }
                        }
                        uint64_t v478 = *(void *)(v477 + 8);
                        sub_1CB9173F0(*(void *)(v55 + 320), v425, *(void *)(v55 + 320), (unint64_t *)v413);
                        int v479 = **(unsigned __int16 **)(v413 + 16);
                        if ((v479 - 13) >= 5 && v479 != 23) {
                          llvm::LiveIntervals::handleMove(*(llvm::LiveIntervals **)(v55 + 296), (llvm::MachineInstr *)v413, 0);
                        }
                        uint64_t v425 = (unint64_t *)v413;
                        uint64_t v413 = v478;
                      }
                      while (v478 != v416);
                    }
                    if (v515)
                    {
                      uint64_t v481 = 0;
LABEL_845:
                      while ((*(_WORD *)(v481 + 44) & 8) != 0)
                        uint64_t v481 = *(void *)(v481 + 8);
                    }
                    else
                    {
                      uint64_t v481 = v52;
                      if ((*(unsigned char *)v52 & 4) == 0) {
                        goto LABEL_845;
                      }
                    }
                    uint64_t v416 = *(void *)(v481 + 8);
                  }
                  if (v474 != (void *)v416 && v425 != (unint64_t *)v416)
                  {
                    unint64_t v483 = *(void *)v416;
                    unint64_t v484 = *(void *)v416 & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v485 = *v474 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)(v485 + 8) = v416;
                    *(void *)uint64_t v416 = v485 | v483 & 7;
                    unint64_t v486 = *v425 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)(v484 + 8) = v425;
                    *uint64_t v474 = v486 | *v474 & 7;
                    *(void *)(v486 + 8) = v474;
                    *uint64_t v425 = v483 & 0xFFFFFFFFFFFFFFF8 | *v425 & 7;
                  }
                  uint64_t *v57 = -8192;
                  *(int32x2_t *)(v55 + 336) = vadd_s32(*(int32x2_t *)(v55 + 336), (int32x2_t)0x1FFFFFFFFLL);
                  v487 = *(llvm::LiveIntervals **)(v55 + 296);
                  if (v487)
                  {
                    llvm::LiveIntervals::handleMove(v487, (llvm::MachineInstr *)v52, 0);
                  }
                  else
                  {
                    sub_1CD5689A4(*(void *)(v55 + 288), v554, v76);
                    sub_1CD568A58(*(void *)(v55 + 288), v554, (llvm::MachineInstr *)v52, 0);
                  }
                  char v469 = 1;
LABEL_855:
                  if (v574 != (unsigned int *)v576) {
                    free(v574);
                  }
                  a6 = v543;
                  uint64_t v15 = v545;
                  unsigned int v50 = v554;
                  if (v561 != v563) {
                    free(v561);
                  }
                  uint64_t v11 = v55;
                  if (v564 != &v566) {
                    free(v564);
                  }
                  uint64_t v19 = (uint64_t)v557;
                  if ((v469 & 1) == 0)
                  {
LABEL_862:
                    char v48 = 0;
                    goto LABEL_117;
                  }
                  return 1;
                }
                continue;
              }
            }
            unint64_t v419 = 0;
            uint64_t v529 = *(void *)(v415 + 32);
            unsigned int v420 = *(_DWORD *)(v529 + 36);
            v421 = v574;
            v551 = (void *)(*(void *)(v55 + 264) + 8);
            uint64_t v535 = v575;
            uint64_t v422 = 4 * v575;
            while (1)
            {
              unsigned int v423 = v421[v419 / 4];
              if (v423 == v420
                || v420 - 1 <= 0x3FFFFFFE
                && v423 - 1 <= 0x3FFFFFFE
                && llvm::MCRegisterInfo::regsOverlap(v551, v423, v420))
              {
                break;
              }
              v419 += 4;
              if (v422 == v419) {
                goto LABEL_704;
              }
            }
            if (v535 >= HIDWORD(v575)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v10 = v540;
            uint64_t v413 = v532;
            v421[v535] = *(_DWORD *)(v529 + 4);
            LODWORD(v575) = v575 + 1;
            if ((*(unsigned char *)v415 & 4) == 0)
            {
              while ((*(_WORD *)(v415 + 44) & 8) != 0)
                uint64_t v415 = *(void *)(v415 + 8);
            }
            uint64_t v416 = *(void *)(v415 + 8);
            uint64_t v414 = *(void *)(v55 + 320);
            uint64_t v415 = v414 + 48;
            if (v416 == v414 + 48) {
              goto LABEL_706;
            }
          }
        }
      }
    }
  }
  char v48 = 0;
  uint64_t v11 = v55;
  uint64_t v19 = (uint64_t)v557;
LABEL_116:
  uint64_t v15 = v545;
LABEL_117:
  if ((*(unsigned char *)(*(void *)(v19 + 16) + 11) & 4) != 0)
  {
    if (!v556
      || (v102 = sub_1CC4C0604((int *)v50, v11 + 448), uint64_t v19 = (uint64_t)v557, v102)
      && (v103 = v102, v104 = sub_1CC4C0604(v15, v11 + 472), uint64_t v19 = (uint64_t)v557, v104)
      && v103 != v104
      && ((v104 | v103) >> 30
       || (BOOL v105 = llvm::MCRegisterInfo::regsOverlap((void *)(*(void *)(v11 + 264) + 8), v103, v104),
           uint64_t v19 = (uint64_t)v557,
           !v105)))
    {
      LODWORD(v574) = v15;
      LODWORD(v571) = v50;
      sub_1CC2CCBC4(&v564, *v10, *(void *)(v11 + 320));
      uint64_t v106 = (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(v11 + 256) + 192))(*(void *)(v11 + 256), *v10, *(void *)(v11 + 288), *(void *)(v11 + 296));
      if (v106)
      {
        uint64_t v107 = v106;
        uint64_t v108 = *v10;
        uint64_t v109 = *(unsigned int *)(*v10 + 64);
        unsigned int v110 = a3;
        if (v109)
        {
          unsigned int v183 = *(_DWORD *)(v106 + 64);
          if (!v183)
          {
            uint64_t v184 = *(void *)(*(void *)(v106 + 24) + 32);
            unsigned int v183 = *(_DWORD *)(v184 + 912) + 1;
            *(_DWORD *)(v184 + 912) = v183;
            *(_DWORD *)(v106 + 64) = v183;
          }
          llvm::MachineFunction::makeDebugValueSubstitution(*(void *)(v11 + 248), v109, v183, 0);
          uint64_t v108 = *v10;
        }
        uint64_t v111 = v108;
        if ((*(unsigned char *)v108 & 4) == 0)
        {
          uint64_t v111 = v108;
          if ((*(_WORD *)(v108 + 44) & 8) != 0)
          {
            uint64_t v111 = v108;
            do
              uint64_t v111 = *(void *)(v111 + 8);
            while ((*(_WORD *)(v111 + 44) & 8) != 0);
          }
        }
        v538 = v10;
        uint64_t v112 = *(void *)(v111 + 8);
        if (v112 != v108)
        {
          int v113 = *(llvm::MachineInstr **)(v11 + 320);
          v558 = v113;
          do
          {
            uint64_t v114 = *(void *)(v108 + 8);
            uint64_t v115 = *(void *)(*(void *)(v108 + 24) + 32);
            if (v115)
            {
              uint64_t v116 = *(void *)(v115 + 728);
              if (v116)
              {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v116 + 32))(v116, v108);
                int v113 = v558;
              }
              uint64_t v117 = *(unsigned int *)(v108 + 40);
              if (v117)
              {
                uint64_t v118 = *(void *)(v108 + 32);
                uint64_t v119 = *(void *)(v115 + 40);
                uint64_t v120 = 32 * v117;
                do
                {
                  if (!*(unsigned char *)v118)
                  {
                    uint64_t v121 = *(unsigned int *)(v118 + 4);
                    if ((v121 & 0x80000000) != 0) {
                      int v122 = (uint64_t *)(*(void *)(v119 + 24) + 16 * (v121 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      int v122 = (uint64_t *)(*(void *)(v119 + 272) + 8 * v121);
                    }
                    uint64_t v123 = *v122;
                    uint64_t v125 = *(void *)(v118 + 16);
                    uint64_t v124 = *(void *)(v118 + 24);
                    if (v118 != *v122) {
                      int v122 = (uint64_t *)(v125 + 24);
                    }
                    *int v122 = v124;
                    if (v124) {
                      uint64_t v126 = v124;
                    }
                    else {
                      uint64_t v126 = v123;
                    }
                    *(void *)(v126 + 16) = v125;
                    *(void *)(v118 + 16) = 0;
                    *(void *)(v118 + 24) = 0;
                  }
                  v118 += 32;
                  v120 -= 32;
                }
                while (v120);
              }
            }
            uint64_t v127 = a6;
            uint64_t v128 = v11;
            *(void *)(v108 + 24) = 0;
            v129 = *(unint64_t **)(v108 + 8);
            unint64_t v130 = *(void *)v108 & 0xFFFFFFFFFFFFFFF8;
            unint64_t *v129 = v130 | *v129 & 7;
            *(void *)(v130 + 8) = v129;
            *(void *)v108 &= 7uLL;
            *(void *)(v108 + 8) = 0;
            uint64_t v131 = *(void *)(*((void *)v113 + 5) + 32);
            char v132 = *(void **)(v108 + 32);
            if (v132)
            {
              uint64_t v133 = *(unsigned __int8 *)(v108 + 47);
              unsigned int v134 = (uint64_t *)(v131 + 232);
              if (*(_DWORD *)(v131 + 240) <= v133)
              {
                sub_1CC34BDE0(v131 + 232, v133 + 1);
                int v113 = v558;
              }
              uint64_t v135 = *v134;
              *char v132 = *(void *)(*v134 + 8 * v133);
              *(void *)(v135 + 8 * v133) = v132;
            }
            *(void *)uint64_t v108 = *(void *)(v131 + 224);
            *(void *)(v131 + 224) = v108;
            uint64_t v108 = v114;
            BOOL v88 = v114 == v112;
            uint64_t v11 = v128;
            a6 = v127;
            unsigned int v110 = a3;
          }
          while (!v88);
        }
        v136 = v566;
        if (v566 == (char *)v564 + 48)
        {
          char v137 = (unsigned char **)((char *)v564 + 56);
        }
        else
        {
          if (!v566 || (*v566 & 4) == 0)
          {
            while ((*((_WORD *)v136 + 22) & 8) != 0)
              v136 = (unsigned char *)*((void *)v136 + 1);
          }
          char v137 = (unsigned char **)(v136 + 8);
        }
        v149 = *v137;
        uint64_t v150 = v567;
        if (*v137 == v567)
        {
LABEL_203:
          --*a6;
          uint64_t *v538 = v107;
          if ((*(unsigned char *)v107 & 4) == 0)
          {
            while ((*(_WORD *)(v107 + 44) & 8) != 0)
              uint64_t v107 = *(void *)(v107 + 8);
          }
          *unsigned int v110 = *(void *)(v107 + 8);
          sub_1CBA84B14((int32x2_t *)(v11 + 448), &v574);
          sub_1CBA84B14((int32x2_t *)(v11 + 472), &v571);
          return 1;
        }
        while (2)
        {
          uint64_t v151 = *a6;
          *a6 = v151 + 1;
          v561 = v149;
          uint64_t v562 = v151;
          int v152 = *(_DWORD *)(v11 + 344);
          if (!v152)
          {
            uint64_t v162 = 0;
            goto LABEL_195;
          }
          uint64_t v153 = *(void *)(v11 + 328);
          int v154 = v152 - 1;
          unsigned int v155 = v154 & ((v149 >> 4) ^ (v149 >> 9));
          uint64_t v156 = (void *)(v153 + 16 * v155);
          uint64_t v157 = (unsigned char *)*v156;
          if (v149 == (unsigned char *)*v156)
          {
LABEL_190:
            if (v149) {
              goto LABEL_196;
            }
          }
          else
          {
            unsigned int v158 = 0;
            int v159 = 1;
            while (v157 != (unsigned char *)-4096)
            {
              if (v158) {
                BOOL v160 = 0;
              }
              else {
                BOOL v160 = v157 == (unsigned char *)-8192;
              }
              if (v160) {
                unsigned int v158 = v156;
              }
              unsigned int v161 = v155 + v159++;
              unsigned int v155 = v161 & v154;
              uint64_t v156 = (void *)(v153 + 16 * v155);
              uint64_t v157 = (unsigned char *)*v156;
              if (v149 == (unsigned char *)*v156) {
                goto LABEL_190;
              }
            }
            if (v158) {
              uint64_t v162 = v158;
            }
            else {
              uint64_t v162 = v156;
            }
LABEL_195:
            BOOL v163 = sub_1CB9A052C(v11 + 328, (uint64_t)&v561, (uint64_t *)&v561, v162);
            *BOOL v163 = v561;
            *((_DWORD *)v163 + 2) = v562;
            if (v149)
            {
LABEL_196:
              if ((*v149 & 4) != 0) {
                goto LABEL_200;
              }
            }
          }
          while ((*((_WORD *)v149 + 22) & 8) != 0)
            v149 = (unsigned char *)*((void *)v149 + 1);
LABEL_200:
          v149 = (unsigned char *)*((void *)v149 + 1);
          if (v149 == v150) {
            goto LABEL_203;
          }
          continue;
        }
      }
      uint64_t v19 = (uint64_t)v557;
    }
  }
  if (v48) {
    return 0;
  }
  unsigned int v92 = v15;
  v542 = a6;
  if (!byte_1EBCD77C8) {
    goto LABEL_331;
  }
  uint64_t v93 = *(void *)(v11 + 288);
  if (!v93 && !*(void *)(v11 + 296)) {
    goto LABEL_331;
  }
  BOOL v94 = (llvm::MachineInstr *)*v10;
  uint64_t v95 = *(void *)(v11 + 328);
  uint64_t v96 = *(unsigned int *)(v11 + 344);
  if (v96)
  {
    LODWORD(v97) = ((v94 >> 4) ^ (v94 >> 9)) & (v96 - 1);
    uint64_t v98 = v95 + 16 * v97;
    unsigned int v99 = *(llvm::MachineInstr **)v98;
    if (v94 != *(llvm::MachineInstr **)v98)
    {
      int v100 = 1;
      while (v99 != (llvm::MachineInstr *)-4096)
      {
        int v101 = v97 + v100++;
        uint64_t v97 = v101 & (v96 - 1);
        unsigned int v99 = *(llvm::MachineInstr **)(v95 + 16 * v97);
        if (v94 == v99)
        {
          uint64_t v98 = v95 + 16 * v97;
          goto LABEL_171;
        }
      }
      goto LABEL_170;
    }
  }
  else
  {
LABEL_170:
    uint64_t v98 = v95 + 16 * v96;
  }
LABEL_171:
  if (v98 == v95 + 16 * v96) {
    goto LABEL_331;
  }
  int v138 = v50;
  uint64_t v139 = *(void *)(v11 + 296);
  if (!v139)
  {
    uint64_t v164 = (void *)(v93 + 248);
    unint64_t v165 = v50 & 0x7FFFFFFF;
    if (v165 >= *(unsigned int *)(v93 + 256))
    {
      sub_1CD520A8C((uint64_t *)(v93 + 248), v165 + 1, v93 + 264);
      int v138 = v50;
      uint64_t v19 = (uint64_t)v557;
    }
    uint64_t v166 = *v164 + 56 * v165;
    unsigned int v167 = *(uint64_t **)(v166 + 32);
    unsigned int v168 = *(uint64_t **)(v166 + 40);
    if (v167 == v168) {
      goto LABEL_331;
    }
    while (1)
    {
      uint64_t v169 = *v167;
      if (*(void *)(*v167 + 24) == *(void *)(v11 + 320)) {
        goto LABEL_261;
      }
      if (++v167 == v168) {
        goto LABEL_331;
      }
    }
  }
  int v140 = v10;
  uint64_t v141 = (void *)(v139 + 408);
  unint64_t v142 = *(unsigned int *)(v139 + 416);
  BOOL v85 = (v50 & 0x7FFFFFFF) >= v142;
  unint64_t v143 = (v50 & 0x7FFFFFFF) - v142;
  if (v85)
  {
    sub_1CB9153B8((uint64_t)v141, v143 + 1, *(void *)(v139 + 424));
LABEL_870:
    operator new();
  }
  uint64_t v144 = *(void *)(*v141 + 8 * (v50 & 0x7FFFFFFF));
  if (!v144) {
    goto LABEL_870;
  }
  uint64_t v145 = *(void *)(*(void *)(*(void *)(v139 + 288) + 392)
                   + 16 * *(unsigned int *)(*(void *)(v11 + 320) + 24)
                   + 8);
  unsigned int v146 = (v145 >> 1) & 3;
  unint64_t v147 = v145 & 0xFFFFFFFFFFFFFFF8;
  if (v146) {
    uint64_t v148 = v147 | (2 * (v146 - 1));
  }
  else {
    uint64_t v148 = *(void *)v147 | 6;
  }
  unint64_t v170 = *(unsigned int *)(v144 + 8);
  v171 = *(void **)v144;
  if (!v170)
  {
    LODWORD(v170) = 0;
    uint64_t v10 = v140;
    goto LABEL_256;
  }
  uint64_t v172 = v171[3 * v170 - 2];
  unsigned int v173 = *(_DWORD *)((v148 & 0xFFFFFFFFFFFFFFF8) + 24) | (v148 >> 1) & 3;
  uint64_t v10 = v140;
  if (v173 >= ((v172 >> 1) & 3 | *(_DWORD *)((v172 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_256:
    unsigned int v174 = &v171[3 * v170];
    goto LABEL_257;
  }
  unsigned int v174 = v171;
  unint64_t v175 = v170;
  do
  {
    unint64_t v176 = v175 >> 1;
    uint64_t v177 = v174[3 * (v175 >> 1) + 1];
    LODWORD(v177) = (v177 >> 1) & 3 | *(_DWORD *)((v177 & 0xFFFFFFFFFFFFFFF8) + 24);
    v175 -= (v175 >> 1) + 1;
    BOOL v178 = v173 >= v177;
    if (v173 >= v177) {
      unint64_t v179 = v176 + 1;
    }
    else {
      unint64_t v179 = 0;
    }
    v174 += 3 * v179;
    if (!v178) {
      unint64_t v175 = v176;
    }
  }
  while (v175);
LABEL_257:
  if (v174 != &v171[3 * v170]
    && ((*v174 >> 1) & 3 | *(_DWORD *)((*v174 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v148 & 0xFFFFFFFFFFFFFFF8) + 24) | (v148 >> 1) & 3))
  {
    goto LABEL_331;
  }
  unint64_t v188 = *(v174 - 2);
  if (v188 < 8) {
    goto LABEL_331;
  }
  uint64_t v169 = *(void *)((v188 & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_261:
  if (v169) {
    BOOL v189 = v94 == (llvm::MachineInstr *)v169;
  }
  else {
    BOOL v189 = 1;
  }
  if (v189) {
    goto LABEL_331;
  }
  int v190 = **(unsigned __int16 **)(v169 + 16);
  if (v190 == 11 || v190 == 19) {
    goto LABEL_331;
  }
  int v560 = 0;
  unsigned int v546 = v138;
  if ((sub_1CC4C04BC((llvm::MachineInstr *)v169, v138, &v560) & 1) != 0
    || (BOOL v559 = 1, !llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v169, *(llvm::AAResults **)(v11 + 304), &v559)))
  {
    uint64_t v19 = (uint64_t)v557;
    goto LABEL_331;
  }
  v539 = v10;
  uint64_t v522 = v11;
  v564 = &v566;
  uint64_t v565 = 0x200000000;
  v561 = v563;
  uint64_t v562 = 0x200000000;
  v574 = (unsigned int *)v576;
  uint64_t v575 = 0x200000000;
  v571 = (unsigned int *)&v573;
  uint64_t v572 = 0x200000000;
  uint64_t v192 = *(unsigned int *)(v169 + 40);
  unsigned int v555 = v50;
  if (v192)
  {
    v193 = *(unsigned int **)(v169 + 32);
    uint64_t v194 = &v193[8 * v192];
    do
    {
      unsigned int v195 = *v193;
      if (!*v193)
      {
        uint64_t v196 = v193[1];
        if ((v195 & 0x1000000) != 0)
        {
          if ((v196 - 1) > 0x3FFFFFFE) {
            goto LABEL_274;
          }
          if (v575 >= (unint64_t)HIDWORD(v575)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v574[v575] = v196;
          LODWORD(v575) = v575 + 1;
          if ((~*v193 & 0x5000000) == 0) {
            goto LABEL_274;
          }
          uint64_t v212 = v572;
          if (v572 >= (unint64_t)HIDWORD(v572)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v213 = (void **)&v571;
          goto LABEL_320;
        }
        if (v196)
        {
          uint64_t v197 = *(void *)(v522 + 280);
          if ((v196 & 0x80000000) != 0) {
            uint64_t v198 = (uint64_t *)(*(void *)(v197 + 24) + 16 * (v196 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v198 = (uint64_t *)(*(void *)(v197 + 272) + 8 * v196);
          }
          uint64_t v199 = *v198;
          if (*v198)
          {
            int v200 = *(_DWORD *)(v98 + 8);
            if ((*(unsigned char *)(v199 + 3) & 1) != 0
              || (uint64_t v199 = *(void *)(v199 + 24)) != 0 && (*(unsigned char *)(v199 + 3) & 1) != 0)
            {
              uint64_t v201 = *(void *)(v199 + 8);
LABEL_283:
              if (*(void *)(v201 + 24) == *(void *)(v522 + 320))
              {
                int v202 = **(unsigned __int16 **)(v201 + 16);
                if (v202 != 11 && v202 != 19)
                {
                  if ((llvm::MachineInstr *)v201 != v94)
                  {
                    uint64_t v204 = *(void *)(v522 + 328);
                    uint64_t v205 = *(unsigned int *)(v522 + 344);
                    if (v205)
                    {
                      LODWORD(v206) = (v205 - 1) & ((v201 >> 4) ^ (v201 >> 9));
                      unint64_t v207 = (uint64_t *)(v204 + 16 * v206);
                      uint64_t v208 = *v207;
                      if (v201 != *v207)
                      {
                        int v209 = 1;
                        do
                        {
                          if (v208 == -4096) {
                            goto LABEL_295;
                          }
                          int v210 = v206 + v209++;
                          uint64_t v206 = v210 & (v205 - 1);
                          uint64_t v208 = *(void *)(v204 + 16 * v206);
                        }
                        while (v201 != v208);
                        unint64_t v207 = (uint64_t *)(v204 + 16 * v206);
                      }
                    }
                    else
                    {
LABEL_295:
                      unint64_t v207 = (uint64_t *)(v204 + 16 * v205);
                    }
                    if (v207 != (uint64_t *)(v204 + 16 * v205))
                    {
                      int v211 = *((_DWORD *)v207 + 2);
                      if ((*(unsigned int (**)(void, void))(**(void **)(v522 + 256) + 960))(*(void *)(v522 + 256), *(void *)(v522 + 272)) <= v200 - v211)
                      {
                        uint64_t v201 = *(void *)(v199 + 8);
                        unsigned int v50 = v555;
                        goto LABEL_299;
                      }
                    }
                  }
LABEL_863:
                  char v367 = 0;
                  uint64_t v11 = v522;
                  uint64_t v10 = v539;
                  goto LABEL_662;
                }
              }
LABEL_299:
              while (1)
              {
                uint64_t v199 = *(void *)(v199 + 24);
                if (!v199 || (*(unsigned char *)(v199 + 3) & 1) == 0) {
                  break;
                }
                if (*(void *)(v199 + 8) != v201)
                {
                  uint64_t v201 = *(void *)(v199 + 8);
                  goto LABEL_283;
                }
              }
              unsigned int v195 = *v193;
            }
          }
          if ((v195 >> 26) & ~HIBYTE(v195))
          {
            BOOL v214 = v196 != v50;
            BOOL v215 = 1;
          }
          else
          {
            uint64_t v216 = *(void *)(v522 + 296);
            if (v216) {
              BOOL v215 = sub_1CC4C0130(v169, v196, v216);
            }
            else {
              BOOL v215 = 0;
            }
            BOOL v214 = v196 != v50;
            if (v196 == v50 && !v215) {
              goto LABEL_863;
            }
          }
          if (v565 >= (unint64_t)HIDWORD(v565)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v564 + v565) = v196;
          LODWORD(v565) = v565 + 1;
          if (v214 && v215)
          {
            uint64_t v212 = v562;
            if (v562 >= (unint64_t)HIDWORD(v562)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v213 = &v561;
LABEL_320:
            *((_DWORD *)*v213 + v212) = v196;
            ++*((_DWORD *)v213 + 2);
          }
        }
      }
LABEL_274:
      v193 += 8;
    }
    while (v193 != v194);
  }
  uint64_t v10 = v539;
  uint64_t v321 = *v539;
  if (*v539 == v169)
  {
    uint64_t v11 = v522;
  }
  else
  {
    unsigned int v322 = 0;
    uint64_t v11 = v522;
    do
    {
      unsigned int v323 = *(unsigned __int16 **)(v321 + 16);
      int v324 = *v323;
      if ((v324 - 13) >= 5 && v324 != 23)
      {
        if (v322 > 0xA) {
          goto LABEL_546;
        }
        unsigned int v326 = *(unsigned __int16 *)(v321 + 44);
        BOOL v88 = (v326 & 0xC) == 0;
        int v327 = (v326 >> 2) & 1;
        if (v88) {
          LOBYTE(v327) = 1;
        }
        uint64_t v328 = *((void *)v323 + 1);
        if (v327)
        {
          if ((v328 & 0x1000000) != 0) {
            goto LABEL_546;
          }
        }
        else
        {
          unsigned int v365 = v322;
          uint64_t v366 = v321;
          if ((v328 & 0x1000000) != 0) {
            goto LABEL_546;
          }
          while (1)
          {
            unsigned int v322 = v365;
            if ((*(_WORD *)(v366 + 44) & 8) == 0) {
              break;
            }
            char v367 = 0;
            uint64_t v366 = *(void *)(v366 + 8);
            if (*(unsigned char *)(*(void *)(v366 + 16) + 11)) {
              goto LABEL_662;
            }
          }
        }
        if (v324 - 1) <= 1 && (*(unsigned char *)(*(void *)(v321 + 32) + 48))
        {
LABEL_546:
          char v367 = 0;
          goto LABEL_662;
        }
        if (v327)
        {
          if ((v328 & 0x680) != 0) {
            goto LABEL_546;
          }
        }
        else
        {
          uint64_t v342 = v321;
          if ((v328 & 0x80) != 0) {
            goto LABEL_546;
          }
          while ((*(_WORD *)(v342 + 44) & 8) != 0)
          {
            uint64_t v342 = *(void *)(v342 + 8);
            if ((*(unsigned char *)(*(void *)(v342 + 16) + 8) & 0x80) != 0) {
              goto LABEL_546;
            }
          }
          if ((v328 & 0x400) != 0) {
            goto LABEL_546;
          }
          uint64_t v343 = v321;
          while ((*(_WORD *)(v343 + 44) & 8) != 0)
          {
            uint64_t v343 = *(void *)(v343 + 8);
            if ((*(unsigned char *)(*(void *)(v343 + 16) + 9) & 4) != 0) {
              goto LABEL_546;
            }
          }
          if ((v328 & 0x200) != 0) {
            goto LABEL_546;
          }
          uint64_t v344 = v321;
          while ((*(_WORD *)(v344 + 44) & 8) != 0)
          {
            uint64_t v344 = *(void *)(v344 + 8);
            if ((*(unsigned char *)(*(void *)(v344 + 16) + 9) & 2) != 0) {
              goto LABEL_546;
            }
          }
        }
        *(void *)v568 = &v570;
        uint64_t v569 = 0x200000000;
        uint64_t v329 = *(unsigned int *)(v321 + 40);
        if (v329)
        {
          unsigned int v534 = v322;
          unint64_t v330 = *(unsigned int **)(v321 + 32);
          uint64_t v331 = &v330[8 * v329];
          v513 = v331;
          do
          {
            if (!*v330)
            {
              unsigned int v332 = v330[1];
              if (v332)
              {
                if ((*v330 & 0x1000000) != 0)
                {
                  if (v569 >= (unint64_t)HIDWORD(v569)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(_DWORD *)(*(void *)v568 + 4 * v569) = v332;
                  LODWORD(v569) = v569 + 1;
                }
                else
                {
                  unsigned int v516 = *v330;
                  unsigned int v333 = v332 >> 30;
                  if (v575)
                  {
                    char v334 = v574;
                    v548 = (void *)(*(void *)(v522 + 264) + 8);
                    uint64_t v335 = 4 * v575;
                    do
                    {
                      unsigned int v336 = *v334;
                      if (*v334 == v332
                        || !v333 && v336 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v548, v336, v332))
                      {
                        goto LABEL_530;
                      }
                      ++v334;
                      v335 -= 4;
                    }
                    while (v335);
                  }
                  if (v562)
                  {
                    uint64_t v337 = (unsigned int *)v561;
                    v549 = (void *)(*(void *)(v522 + 264) + 8);
                    uint64_t v338 = 4 * v562;
                    do
                    {
                      unsigned int v339 = *v337;
                      if (*v337 == v332
                        || !v333 && v339 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v549, v339, v332))
                      {
                        goto LABEL_530;
                      }
                      ++v337;
                      v338 -= 4;
                    }
                    while (v338);
                  }
                  uint64_t v11 = v522;
                  uint64_t v10 = v539;
                  uint64_t v331 = v513;
                  if ((llvm::MachineInstr *)v321 != v94 && v332 == v555 && ((v516 >> 26) & ~HIBYTE(v516) & 1) == 0)
                  {
                    uint64_t v340 = *(void *)(v522 + 296);
                    if (!v340) {
                      goto LABEL_530;
                    }
                    BOOL v341 = sub_1CC4C0130(v321, v332, v340);
                    uint64_t v11 = v522;
                    uint64_t v10 = v539;
                    uint64_t v331 = v513;
                    if (!v341)
                    {
                      int v364 = 0;
                      unsigned int v322 = v534;
                      goto LABEL_532;
                    }
                  }
                }
              }
            }
            v330 += 8;
          }
          while (v330 != v331);
          unsigned int v322 = v534;
          uint64_t v514 = v569;
          if (!v569) {
            goto LABEL_531;
          }
          uint64_t v345 = 0;
          uint64_t v346 = *(_DWORD **)v568;
          v510 = *(_DWORD **)v568;
          v511 = (unsigned int *)v564;
          v509 = v571;
          v550 = v574;
          while (1)
          {
            uint64_t v517 = v345;
            unsigned int v347 = v346[v345];
            if (v565) {
              break;
            }
            unsigned int v348 = v347 - 1;
LABEL_506:
            if (v348 <= 0x3FFFFFFE && v572)
            {
              v353 = (void *)(*(void *)(v522 + 264) + 8);
              uint64_t v354 = 4 * v572;
              uint64_t v355 = v509;
              do
              {
                unsigned int v356 = *v355;
                if (*v355 == v347 || v356 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v353, v356, v347)) {
                  goto LABEL_530;
                }
                ++v355;
                v354 -= 4;
              }
              while (v354);
            }
            uint64_t v357 = v550;
            if (v575)
            {
              uint64_t v358 = 4 * v575;
              uint64_t v359 = v550;
              while (*v359 != v347)
              {
                ++v359;
                v358 -= 4;
                if (!v358)
                {
                  uint64_t v359 = &v550[v575];
                  break;
                }
              }
              uint64_t v357 = v550;
            }
            else
            {
              uint64_t v359 = v550;
            }
            uint64_t v360 = v359 - v357;
            uint64_t v361 = v359 + 1;
            if (v360 != v575 && v361 != &v550[v575])
            {
              uint64_t v363 = 4 * v575 - 4 * v360 - 4;
              do
              {
                if (*v361 != v347) {
                  *v359++ = *v361;
                }
                ++v361;
                v363 -= 4;
              }
              while (v363);
            }
            LODWORD(v575) = (unint64_t)((char *)v359 - (char *)v550) >> 2;
            uint64_t v345 = v517 + 1;
            int v364 = 1;
            uint64_t v11 = v522;
            uint64_t v10 = v539;
            unsigned int v322 = v534;
            uint64_t v346 = v510;
            if (v517 + 1 == v514) {
              goto LABEL_532;
            }
          }
          unsigned int v348 = v347 - 1;
          v349 = (void *)(*(void *)(v11 + 264) + 8);
          uint64_t v350 = 4 * v565;
          int v351 = v511;
          while (1)
          {
            unsigned int v352 = *v351;
            if (*v351 == v347
              || v348 <= 0x3FFFFFFE && v352 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v349, v352, v347))
            {
              break;
            }
            ++v351;
            v350 -= 4;
            if (!v350) {
              goto LABEL_506;
            }
          }
LABEL_530:
          int v364 = 0;
          uint64_t v11 = v522;
          uint64_t v10 = v539;
          unsigned int v322 = v534;
        }
        else
        {
LABEL_531:
          int v364 = 1;
        }
LABEL_532:
        if (*(uint64_t **)v568 != &v570) {
          free(*(void **)v568);
        }
        if (!v364) {
          goto LABEL_546;
        }
        ++v322;
        if (!v321) {
          goto LABEL_538;
        }
      }
      if ((*(unsigned char *)v321 & 4) == 0)
      {
LABEL_538:
        while ((*(_WORD *)(v321 + 44) & 8) != 0)
          uint64_t v321 = *(void *)(v321 + 8);
      }
      uint64_t v321 = *(void *)(v321 + 8);
    }
    while (v321 != v169);
    uint64_t v321 = *v10;
  }
  uint64_t v398 = *(void *)(*(void *)(v11 + 320) + 56);
  if (v398 != v321)
  {
    while (2)
    {
      unint64_t v399 = *(void *)v321 & 0xFFFFFFFFFFFFFFF8;
      if (v399)
      {
        unint64_t v400 = *(void *)v321 & 0xFFFFFFFFFFFFFFF8;
        if ((*(unsigned char *)v399 & 4) != 0)
        {
          if (**(unsigned __int16 **)(v399 + 16) - 13 >= 5) {
            break;
          }
          goto LABEL_629;
        }
      }
      else
      {
        unint64_t v400 = 0;
      }
      while ((*(_WORD *)(v400 + 44) & 4) != 0)
        unint64_t v400 = *(void *)v400 & 0xFFFFFFFFFFFFFFF8;
      if (**(unsigned __int16 **)(v400 + 16) - 13 >= 5) {
        break;
      }
      if (!v399 || (*(unsigned char *)v399 & 4) == 0)
      {
        while ((*(_WORD *)(v399 + 44) & 4) != 0)
          unint64_t v399 = *(void *)v399 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_629:
      uint64_t v321 = v399;
      if (v399 == v398)
      {
        uint64_t v321 = *(void *)(*(void *)(v11 + 320) + 56);
        break;
      }
      continue;
    }
  }
  uint64_t v401 = *(void *)v169;
  uint64_t v402 = v169;
  if ((*(void *)v169 & 4) == 0)
  {
    uint64_t v402 = v169;
    if ((*(_WORD *)(v169 + 44) & 8) != 0)
    {
      uint64_t v402 = v169;
      do
        uint64_t v402 = *(void *)(v402 + 8);
      while ((*(_WORD *)(v402 + 44) & 8) != 0);
    }
  }
  uint64_t v403 = *(unint64_t **)(v402 + 8);
  uint64_t v404 = (unint64_t *)v169;
  while (2)
  {
    unint64_t v405 = v401 & 0xFFFFFFFFFFFFFFF8;
    if ((v401 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v406 = v401 & 0xFFFFFFFFFFFFFFF8;
      if ((*(unsigned char *)v405 & 4) != 0)
      {
        if (**(unsigned __int16 **)(v405 + 16) - 13 >= 5) {
          break;
        }
        goto LABEL_649;
      }
    }
    else
    {
      unint64_t v406 = 0;
    }
    while ((*(_WORD *)(v406 + 44) & 4) != 0)
      unint64_t v406 = *(void *)v406 & 0xFFFFFFFFFFFFFFF8;
    if (**(unsigned __int16 **)(v406 + 16) - 13 < 5)
    {
      if (!v405 || (*(unsigned char *)v405 & 4) == 0)
      {
        while ((*(_WORD *)(v405 + 44) & 4) != 0)
          unint64_t v405 = *(void *)v405 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_649:
      uint64_t v401 = *(void *)v405;
      uint64_t v404 = (unint64_t *)v405;
      continue;
    }
    break;
  }
  if ((unint64_t *)v321 == v403 || v404 == v403)
  {
    unint64_t v410 = *(void *)v321;
  }
  else
  {
    unint64_t v407 = *v403;
    unint64_t v408 = *v403 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v405 + 8) = v403;
    *uint64_t v403 = v407 & 7 | v405;
    unint64_t v409 = *(void *)v321 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v408 + 8) = v321;
    *uint64_t v404 = v409 | *v404 & 7;
    *(void *)(v409 + 8) = v404;
    unint64_t v410 = v407 & 0xFFFFFFFFFFFFFFF8 | *(void *)v321 & 7;
    *(void *)uint64_t v321 = v410;
  }
  unint64_t v411 = v410 & 0xFFFFFFFFFFFFFFF8;
  if ((v410 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v411 & 4) == 0)
  {
    while ((*(_WORD *)(v411 + 44) & 4) != 0)
      unint64_t v411 = *(void *)v411 & 0xFFFFFFFFFFFFFFF8;
  }
  *a3 = v411;
  *(void *)uint64_t v98 = -8192;
  *(int32x2_t *)(v11 + 336) = vadd_s32(*(int32x2_t *)(v11 + 336), (int32x2_t)0x1FFFFFFFFLL);
  v412 = *(llvm::LiveIntervals **)(v11 + 296);
  if (v412)
  {
    llvm::LiveIntervals::handleMove(v412, (llvm::MachineInstr *)v169, 0);
  }
  else
  {
    sub_1CD5689A4(*(void *)(v11 + 288), v546, v169);
    sub_1CD568A58(*(void *)(v11 + 288), v546, v94, 0);
  }
  char v367 = 1;
LABEL_662:
  if (v571 != (unsigned int *)&v573) {
    free(v571);
  }
  unsigned int v50 = v555;
  if (v574 != (unsigned int *)v576) {
    free(v574);
  }
  if (v561 != v563) {
    free(v561);
  }
  if (v564 != &v566) {
    free(v564);
  }
  uint64_t v19 = (uint64_t)v557;
  if (v367) {
    return 1;
  }
LABEL_331:
  BOOL v217 = *(unsigned __int16 **)(v19 + 16);
  if (*v217 - 1 <= 1 && (*(unsigned char *)(*(void *)(v19 + 32) + 48) & 8) != 0)
  {
    LODWORD(v220) = 1;
LABEL_335:
    unsigned int v221 = v92;
LABEL_336:
    if (((v220 ^ 1 | v556) & 1) == 0)
    {
      LODWORD(v571) = 0;
      unsigned int v222 = (*(uint64_t (**)(void, void, uint64_t, void, unsigned int **))(**(void **)(v11 + 256)
                                                                                         + 656))(*(void *)(v11 + 256), *v217, 1, 0, &v571);
      if (v222)
      {
        unsigned int v223 = v222;
        v224 = *(void **)(v11 + 256);
        uint64_t v225 = v224[1];
        if (*(unsigned char *)(v225 + 48 * v223 + 4) == 1)
        {
          uint64_t v226 = v10;
          uint64_t v227 = *(void *)(v11 + 264);
          uint64_t v228 = (void *)(*(uint64_t (**)(void *, uint64_t, void, uint64_t, void))(*v224 + 16))(v224, v225 + 48 * v223, v571, v227, *(void *)(v11 + 248));
          unint64_t v229 = (unint64_t)v228;
          if (!v228 || *(unsigned char *)(*v228 + 31))
          {
            unsigned int v230 = v50;
            goto LABEL_342;
          }
          unsigned int v230 = v50;
          uint64_t v492 = v11;
          v493 = (unsigned int *)v228[1];
          uint64_t v494 = *(void *)(v227 + 240);
          unint64_t v495 = (unint64_t)(*(void *)(v227 + 248) - v494) >> 3;
          unsigned int v496 = *v493;
          if (*v493)
          {
            unsigned int v497 = 0;
LABEL_888:
            unsigned int v499 = __clz(__rbit32(v496));
            unsigned int v500 = v499 | v497;
            if ((v499 | v497) == v495) {
              goto LABEL_889;
            }
            unsigned int v501 = v496 >> v499;
            while (1)
            {
              unint64_t v229 = *(void *)(v494 + 8 * v500);
              if (*(unsigned char *)(*(void *)v229 + 31)) {
                break;
              }
              if (v501 <= 1)
              {
                while (1)
                {
                  v497 += 32;
                  if (v497 >= v495) {
                    goto LABEL_889;
                  }
                  unsigned int v503 = v493[1];
                  ++v493;
                  unsigned int v502 = v503;
                  if (v503)
                  {
                    unsigned int v504 = v497;
                    goto LABEL_898;
                  }
                }
              }
              unsigned int v504 = v500 + 1;
              unsigned int v502 = v501 >> 1;
LABEL_898:
              unint64_t v229 = 0;
              unsigned int v505 = __clz(__rbit32(v502));
              unsigned int v500 = v505 + v504;
              unsigned int v501 = v502 >> v505;
              uint64_t v11 = v492;
              unsigned int v221 = v92;
              if (v500 == v495) {
                goto LABEL_342;
              }
            }
          }
          else
          {
            unsigned int v497 = 0;
            while (1)
            {
              v497 += 32;
              if (v497 >= v495) {
                break;
              }
              unsigned int v498 = v493[1];
              ++v493;
              unsigned int v496 = v498;
              if (v498) {
                goto LABEL_888;
              }
            }
LABEL_889:
            unint64_t v229 = 0;
          }
          uint64_t v11 = v492;
          unsigned int v221 = v92;
LABEL_342:
          uint64_t v231 = *(void *)(v11 + 280);
          uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v231, "", 0);
          *(void *)(*(void *)(v231 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v229 & 0xFFFFFFFFFFFFFFFBLL;
          uint64_t v233 = *(void *)(v231 + 8);
          if (v233) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v233 + 24))(v233, IncompleteVirtualRegister);
          }
          v564 = &v566;
          uint64_t v565 = 0x200000000;
          int v234 = (*(uint64_t (**)(void, void, llvm::MachineInstr *, uint64_t, uint64_t, void, void **))(**(void **)(v11 + 256) + 640))(*(void *)(v11 + 256), *(void *)(v11 + 248), v557, IncompleteVirtualRegister, 1, 0, &v564);
          uint64_t v235 = (unsigned char **)v564;
          if (v234)
          {
            llvm::MachineInstr::addRegisterKilled(*((llvm::MachineInstr **)v564 + 1), IncompleteVirtualRegister, *(void *)(v11 + 264), 0);
            v236 = (uint64_t *)*v226;
            uint64_t v237 = *(void *)v564;
            uint64_t v238 = *(void *)(*(void *)(v11 + 320) + 40);
            *(void *)(v237 + 24) = v238;
            uint64_t v239 = *(void *)(v238 + 32);
            uint64_t v240 = *(unsigned int *)(v237 + 40);
            if (v240)
            {
              uint64_t v368 = *(void *)(v237 + 32);
              uint64_t v369 = *(void *)(v239 + 40);
              uint64_t v370 = 32 * v240;
              do
              {
                if (!*(unsigned char *)v368)
                {
                  uint64_t v371 = *(unsigned int *)(v368 + 4);
                  if ((int)v371 >= 0) {
                    uint64_t v372 = (uint64_t *)(*(void *)(v369 + 272) + 8 * v371);
                  }
                  else {
                    uint64_t v372 = (uint64_t *)(*(void *)(v369 + 24) + 16 * (v371 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v373 = *v372;
                  if (*v372)
                  {
                    uint64_t v374 = *(void *)(v373 + 16);
                    *(void *)(v373 + 16) = v368;
                    *(void *)(v368 + 16) = v374;
                    if (*(unsigned char *)(v368 + 3))
                    {
                      *(void *)(v368 + 24) = v373;
                    }
                    else
                    {
                      *(void *)(v368 + 24) = 0;
                      uint64_t v372 = (uint64_t *)(v374 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v368 + 16) = v368;
                    *(void *)(v368 + 24) = 0;
                  }
                  *uint64_t v372 = v368;
                }
                v368 += 32;
                v370 -= 32;
              }
              while (v370);
            }
            uint64_t v241 = *(void *)(v239 + 728);
            if (v241) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v241 + 24))(v241, v237);
            }
            unint64_t v242 = *v236 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v237 = v242 | *(void *)v237 & 7;
            *(void *)(v237 + 8) = v236;
            *(void *)(v242 + 8) = v237;
            uint64_t *v236 = *v236 & 7 | v237;
            unint64_t v243 = (uint64_t *)*v226;
            uint64_t v244 = *((void *)v564 + 1);
            uint64_t v245 = *(void *)(*(void *)(v11 + 320) + 40);
            *(void *)(v244 + 24) = v245;
            uint64_t v246 = *(void *)(v245 + 32);
            uint64_t v247 = *(unsigned int *)(v244 + 40);
            if (v247)
            {
              uint64_t v375 = *(void *)(v244 + 32);
              uint64_t v376 = *(void *)(v246 + 40);
              uint64_t v377 = 32 * v247;
              do
              {
                if (!*(unsigned char *)v375)
                {
                  uint64_t v378 = *(unsigned int *)(v375 + 4);
                  if ((int)v378 >= 0) {
                    uint64_t v379 = (uint64_t *)(*(void *)(v376 + 272) + 8 * v378);
                  }
                  else {
                    uint64_t v379 = (uint64_t *)(*(void *)(v376 + 24) + 16 * (v378 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v380 = *v379;
                  if (*v379)
                  {
                    uint64_t v381 = *(void *)(v380 + 16);
                    *(void *)(v380 + 16) = v375;
                    *(void *)(v375 + 16) = v381;
                    if (*(unsigned char *)(v375 + 3))
                    {
                      *(void *)(v375 + 24) = v380;
                    }
                    else
                    {
                      *(void *)(v375 + 24) = 0;
                      uint64_t v379 = (uint64_t *)(v381 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v375 + 16) = v375;
                    *(void *)(v375 + 24) = 0;
                  }
                  *uint64_t v379 = v375;
                }
                v375 += 32;
                v377 -= 32;
              }
              while (v377);
            }
            uint64_t v248 = *(void *)(v246 + 728);
            if (v248) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v248 + 24))(v248, v244);
            }
            unint64_t v249 = *v243 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v244 = v249 | *(void *)v244 & 7;
            *(void *)(v244 + 8) = v243;
            *(void *)(v249 + 8) = v244;
            *unint64_t v243 = *v243 & 7 | v244;
            uint64_t v250 = v564;
            uint64_t v251 = *v542;
            uint64_t v252 = (v251 + 1);
            unsigned int *v542 = v252;
            int v253 = *(void **)v250;
            v561 = *(void **)v250;
            uint64_t v562 = v251;
            int v254 = *(_DWORD *)(v11 + 344);
            if (!v254)
            {
              unint64_t v264 = 0;
              goto LABEL_365;
            }
            uint64_t v255 = *(void *)(v11 + 328);
            int v256 = v254 - 1;
            unsigned int v257 = (v254 - 1) & ((v253 >> 4) ^ (v253 >> 9));
            unint64_t v258 = (void *)(v255 + 16 * v257);
            v259 = (void *)*v258;
            if (v253 == (void *)*v258)
            {
              uint64_t v266 = (void *)*((void *)v250 + 1);
              v561 = v266;
              uint64_t v562 = v252;
LABEL_369:
              unsigned int v267 = v256 & ((v266 >> 4) ^ (v266 >> 9));
              uint64_t v268 = (void *)(v255 + 16 * v267);
              unint64_t v269 = (void *)*v268;
              if (v266 != (void *)*v268)
              {
                unint64_t v270 = 0;
                int v271 = 1;
                while (v269 != (void *)-4096)
                {
                  if (v270) {
                    BOOL v272 = 0;
                  }
                  else {
                    BOOL v272 = v269 == (void *)-8192;
                  }
                  if (v272) {
                    unint64_t v270 = v268;
                  }
                  unsigned int v273 = v267 + v271++;
                  unsigned int v267 = v273 & v256;
                  uint64_t v268 = (void *)(v255 + 16 * v267);
                  unint64_t v269 = (void *)*v268;
                  if (v266 == (void *)*v268) {
                    goto LABEL_383;
                  }
                }
                if (v270) {
                  uint64_t v274 = v270;
                }
                else {
                  uint64_t v274 = v268;
                }
                goto LABEL_382;
              }
            }
            else
            {
              unint64_t v260 = 0;
              int v261 = 1;
              while (v259 != (void *)-4096)
              {
                if (v260) {
                  BOOL v262 = 0;
                }
                else {
                  BOOL v262 = v259 == (void *)-8192;
                }
                if (v262) {
                  unint64_t v260 = v258;
                }
                unsigned int v263 = v257 + v261++;
                unsigned int v257 = v263 & v256;
                unint64_t v258 = (void *)(v255 + 16 * v257);
                v259 = (void *)*v258;
                if (v253 == (void *)*v258) {
                  goto LABEL_366;
                }
              }
              if (v260) {
                unint64_t v264 = v260;
              }
              else {
                unint64_t v264 = v258;
              }
LABEL_365:
              unint64_t v265 = sub_1CB9A052C(v11 + 328, (uint64_t)&v561, (uint64_t *)&v561, v264);
              *unint64_t v265 = v561;
              *((_DWORD *)v265 + 2) = v562;
              uint64_t v250 = v564;
              LODWORD(v252) = *v542;
              uint64_t v255 = *(void *)(v11 + 328);
              int v254 = *(_DWORD *)(v11 + 344);
LABEL_366:
              uint64_t v266 = (void *)*((void *)v250 + 1);
              v561 = v266;
              uint64_t v562 = v252;
              if (v254)
              {
                int v256 = v254 - 1;
                goto LABEL_369;
              }
              uint64_t v274 = 0;
LABEL_382:
              uint64_t v275 = sub_1CB9A052C(v11 + 328, (uint64_t)&v561, (uint64_t *)&v561, v274);
              void *v275 = v561;
              *((_DWORD *)v275 + 2) = v562;
              uint64_t v250 = v564;
            }
LABEL_383:
            uint64_t RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(*((void *)v250 + 1), v221, 0, 0, 0);
            uint64_t RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx(*((void *)v564 + 1), v230, 0, 0);
            v574 = (unsigned int *)*((void *)v564 + 1);
            sub_1CC4BC638(v11, &v574, v226, RegisterUseOperandIdx, RegisterDefOperandIdx, v542, 1);
            v278 = (llvm::MachineInstr *)*((void *)v564 + 1);
            unsigned int v279 = *(_DWORD *)(*((void *)v278 + 4) + 32 * RegisterUseOperandIdx);
            if ((v279 >> 26) & ~HIBYTE(v279))
            {
              uint64_t v280 = *(void *)(v11 + 288);
              unsigned int v281 = v226;
              if (v280)
              {
                uint64_t v390 = *((unsigned int *)v557 + 10);
                if (v390)
                {
                  uint64_t v391 = 32 * v390;
                  unsigned int v392 = (unsigned int *)(*((void *)v557 + 4) + 4);
                  do
                  {
                    unsigned int v393 = *(v392 - 1);
                    if (!(_BYTE)v393)
                    {
                      unsigned int v394 = *v392;
                      if ((*v392 & 0x80000000) != 0)
                      {
                        if ((v393 & 0x1000000) != 0)
                        {
                          if (sub_1CD568BB8(*(void *)(v11 + 288), v394, (uint64_t)v557))
                          {
                            if (llvm::MachineInstr::findRegisterDefOperandIdx(*((void *)v564 + 1), *v392, 1, 0, 0) == -1)unint64_t v395 = *(llvm::MachineInstr **)v564; {
                            else
                            }
                              unint64_t v395 = (llvm::MachineInstr *)*((void *)v564 + 1);
                            sub_1CD568B08(*(void *)(v11 + 288), *v392, v395, 0);
                            unsigned int v281 = v226;
                          }
                        }
                        else if ((v393 >> 26) & ~HIBYTE(v393))
                        {
                          if (llvm::MachineInstr::findRegisterUseOperandIdx(*(void *)v564, v394, 1, 0) == -1)uint64_t v396 = *((void *)v564 + 1); {
                          else
                          }
                            uint64_t v396 = *(void *)v564;
                          llvm::LiveVariables::replaceKillInstruction(*(uint64_t **)(v11 + 288), *v392, (uint64_t)v557, v396);
                        }
                      }
                    }
                    v392 += 8;
                    v391 -= 32;
                  }
                  while (v391);
                  uint64_t v280 = *(void *)(v11 + 288);
                  v278 = (llvm::MachineInstr *)*((void *)v564 + 1);
                }
                sub_1CD568A58(v280, IncompleteVirtualRegister, v278, 0);
              }
              v561 = v563;
              uint64_t v562 = 0x400000000;
              uint64_t v282 = *(void *)(v11 + 296);
              unsigned int v283 = v557 >> 4;
              if (v282)
              {
                uint64_t v284 = *((unsigned int *)v557 + 10);
                if (v284)
                {
                  unsigned int v285 = 0;
                  uint64_t v286 = 32 * v284;
                  unint64_t v287 = (_DWORD *)(*((void *)v557 + 4) + 4);
                  do
                  {
                    if (!*((unsigned char *)v287 - 4))
                    {
                      if (v285 >= HIDWORD(v562)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v561 + v285) = *v287;
                      unsigned int v285 = v562 + 1;
                      LODWORD(v562) = v562 + 1;
                    }
                    v287 += 8;
                    v286 -= 32;
                  }
                  while (v286);
                  uint64_t v282 = *(void *)(v11 + 296);
                  unsigned int v281 = v226;
                }
                unsigned int v303 = *(int32x2_t **)(v282 + 288);
                int32x2_t v304 = v303[46];
                uint64_t v305 = v303[48].u32[0];
                if (!v305) {
                  goto LABEL_414;
                }
                LODWORD(v306) = (v305 - 1) & (v283 ^ (v557 >> 9));
                uint64_t v307 = (llvm::MachineInstr **)(*(void *)&v304 + 16 * v306);
                uint64_t v308 = *v307;
                if (*v307 != v557)
                {
                  int v309 = 1;
                  while (v308 != (llvm::MachineInstr *)-4096)
                  {
                    int v310 = v306 + v309++;
                    uint64_t v306 = v310 & (v305 - 1);
                    uint64_t v308 = *(llvm::MachineInstr **)(*(void *)&v304 + 16 * v306);
                    if (v308 == v557)
                    {
                      uint64_t v307 = (llvm::MachineInstr **)(*(void *)&v304 + 16 * v306);
                      goto LABEL_415;
                    }
                  }
LABEL_414:
                  uint64_t v307 = (llvm::MachineInstr **)(*(void *)&v304 + 16 * v305);
                }
LABEL_415:
                if (v307 != (llvm::MachineInstr **)(*(void *)&v304 + 16 * v305))
                {
                  unint64_t v311 = (unint64_t)v307[1] & 0xFFFFFFFFFFFFFFF8;
                  *uint64_t v307 = (llvm::MachineInstr *)-8192;
                  v303[47] = vadd_s32(v303[47], (int32x2_t)0x1FFFFFFFFLL);
                  *(void *)(v311 + 16) = 0;
                }
              }
              llvm::MachineInstr::eraseFromParent(v557);
              int v312 = *(_DWORD *)(v11 + 344);
              if (v312)
              {
                uint64_t v313 = *(void *)(v11 + 328);
                unsigned int v314 = v312 - 1;
                LODWORD(v315) = (v312 - 1) & (v283 ^ (v557 >> 9));
                uint64_t v316 = (llvm::MachineInstr **)(v313 + 16 * v315);
                uint64_t v317 = *v316;
                if (v557 == *v316)
                {
LABEL_423:
                  *uint64_t v316 = (llvm::MachineInstr *)-8192;
                  *(int32x2_t *)(v11 + 336) = vadd_s32(*(int32x2_t *)(v11 + 336), (int32x2_t)0x1FFFFFFFFLL);
                }
                else
                {
                  int v318 = 1;
                  while (v317 != (llvm::MachineInstr *)-4096)
                  {
                    int v319 = v315 + v318++;
                    uint64_t v315 = v319 & v314;
                    uint64_t v317 = *(llvm::MachineInstr **)(v313 + 16 * v315);
                    if (v557 == v317)
                    {
                      uint64_t v316 = (llvm::MachineInstr **)(v313 + 16 * v315);
                      goto LABEL_423;
                    }
                  }
                }
              }
              uint64_t v320 = *(void *)(v11 + 296);
              if (v320) {
                llvm::LiveIntervals::repairIntervalsInRange(v320, *(void *)(v11 + 320), *(_WORD **)v564, *((unsigned char **)v564 + 1), v561, v562);
              }
              *unsigned int v281 = *((void *)v564 + 1);
              if (v561 != v563) {
                free(v561);
              }
            }
            else
            {
              llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)v564);
              llvm::MachineInstr::eraseFromParent(*((llvm::MachineInstr **)v564 + 1));
              int v288 = *(_DWORD *)(v11 + 344);
              if (v288)
              {
                uint64_t v289 = *(void *)(v11 + 328);
                BOOL v290 = v564;
                unsigned int v291 = v288 - 1;
                LODWORD(v292) = ((*(void *)v564 >> 4) ^ (*(void *)v564 >> 9)) & v291;
                uint64_t v293 = (uint64_t *)(v289 + 16 * v292);
                uint64_t v294 = *v293;
                if (*(void *)v564 == *v293)
                {
LABEL_400:
                  *uint64_t v293 = -8192;
                  *(int32x2_t *)(v11 + 336) = vadd_s32(*(int32x2_t *)(v11 + 336), (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v289 = *(void *)(v11 + 328);
                  BOOL v290 = v564;
                }
                else
                {
                  int v295 = 1;
                  while (v294 != -4096)
                  {
                    int v296 = v292 + v295++;
                    uint64_t v292 = v296 & v291;
                    uint64_t v294 = *(void *)(v289 + 16 * v292);
                    if (*(void *)v564 == v294)
                    {
                      uint64_t v293 = (uint64_t *)(v289 + 16 * v292);
                      goto LABEL_400;
                    }
                  }
                }
                uint64_t v297 = v290[1];
                LODWORD(v298) = ((v297 >> 4) ^ (v297 >> 9)) & v291;
                char v299 = (uint64_t *)(v289 + 16 * v298);
                uint64_t v300 = *v299;
                if (v297 == *v299)
                {
LABEL_406:
                  *char v299 = -8192;
                  *(int32x2_t *)(v11 + 336) = vadd_s32(*(int32x2_t *)(v11 + 336), (int32x2_t)0x1FFFFFFFFLL);
                }
                else
                {
                  int v301 = 1;
                  while (v300 != -4096)
                  {
                    int v302 = v298 + v301++;
                    uint64_t v298 = v302 & v291;
                    uint64_t v300 = *(void *)(v289 + 16 * v298);
                    if (v297 == v300)
                    {
                      char v299 = (uint64_t *)(v289 + 16 * v298);
                      goto LABEL_406;
                    }
                  }
                }
              }
              --*v542;
            }
            uint64_t v235 = (unsigned char **)v564;
          }
          if (v235 != &v566) {
            free(v235);
          }
        }
      }
    }
  }
  else
  {
    __int16 v218 = *(_WORD *)(v19 + 44);
    unint64_t v219 = *((void *)v217 + 1);
    if ((v218 & 0xC) == 0 || (v218 & 4) != 0)
    {
      uint64_t v220 = (v219 >> 19) & 1;
      goto LABEL_335;
    }
    unsigned int v488 = v50;
    v489 = v10;
    uint64_t v490 = v11;
    if ((v219 & 0x80000) != 0)
    {
      LODWORD(v220) = 1;
      unsigned int v221 = v92;
      goto LABEL_336;
    }
    v491 = v557;
    while ((*((_WORD *)v491 + 22) & 8) != 0)
    {
      v491 = (llvm::MachineInstr *)*((void *)v491 + 1);
      LODWORD(v220) = 1;
      uint64_t v11 = v490;
      uint64_t v10 = v489;
      unsigned int v221 = v92;
      unsigned int v50 = v488;
      if ((*(unsigned char *)(*((void *)v491 + 2) + 10) & 8) != 0) {
        goto LABEL_336;
      }
    }
  }
  return 0;
}

void sub_1CC4BF9C4(uint64_t a1)
{
  int v1 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u && !*(_DWORD *)(a1 + 4)) {
    return;
  }
  if (v1)
  {
    uint64_t v2 = a1 + 8;
    uint64_t v3 = a1 + 232;
    do
    {
LABEL_4:
      if (*(_DWORD *)v2 != -1)
      {
        if (*(_DWORD *)v2 != -2)
        {
          uint64_t v4 = *(void **)(v2 + 8);
          if ((void *)(v2 + 24) != v4)
          {
            uint64_t v9 = a1;
            uint64_t v7 = v3;
            uint64_t v8 = v2;
            free(v4);
            uint64_t v3 = v7;
            uint64_t v2 = v8;
            a1 = v9;
          }
        }
        *(_DWORD *)uint64_t v2 = -1;
      }
      v2 += 56;
    }
    while (v2 != v3);
    int v5 = *(_DWORD *)a1 & 1;
    goto LABEL_11;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (((2 * v1) & 0xFFFFFFFC) >= v6)
  {
    if (!v6)
    {
      int v5 = 0;
LABEL_11:
      *(_DWORD *)a1 = v5;
      *(_DWORD *)(a1 + 4) = 0;
      return;
    }
    goto LABEL_18;
  }
  if (v6 <= 0x40)
  {
LABEL_18:
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = v2 + 56 * v6;
    goto LABEL_4;
  }

  sub_1CD58CF18(a1);
}

void sub_1CC4BFAD4(uint64_t a1, unsigned int a2)
{
  int v3 = 0;
  v57[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2;
  uint64_t v55 = v57;
  char v48 = (llvm::SmallPtrSetImplBase *)(a1 + 352);
  uint64_t v49 = a1 + 448;
  uint64_t v56 = 0x400000000;
  unsigned int v54 = 0;
  while (2)
  {
    uint64_t v5 = *(void *)(a1 + 320);
    uint64_t v6 = *(void *)(a1 + 280);
    uint64_t v7 = *(void *)(a1 + 256);
    uint64_t v8 = *(void *)(a1 + 296);
    if ((v4 & 0x80000000) != 0) {
      uint64_t v9 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v9 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v4);
    }
    uint64_t v10 = *v9;
    if (!*v9) {
      goto LABEL_81;
    }
    if ((*(unsigned char *)(v10 + 3) & 0x81) != 0)
    {
      do
      {
        uint64_t v10 = *(void *)(v10 + 24);
        if (!v10) {
          goto LABEL_81;
        }
      }
      while ((*(_DWORD *)v10 & 0x81000000) != 0);
    }
    uint64_t v11 = *(void *)(v10 + 8);
    if (*(void *)(v11 + 24) != v5) {
      goto LABEL_81;
    }
    uint64_t v12 = 0;
LABEL_10:
    if (sub_1CC4C0130(v11, v4, v8)) {
      uint64_t v12 = v10;
    }
    while (1)
    {
      uint64_t v10 = *(void *)(v10 + 24);
      if (!v10) {
        break;
      }
      if ((*(_DWORD *)v10 & 0x81000000) == 0)
      {
        uint64_t v11 = *(void *)(v10 + 8);
        if (*(void *)(v11 + 24) == v5) {
          goto LABEL_10;
        }
        goto LABEL_81;
      }
    }
    if (!v12) {
      goto LABEL_81;
    }
    uint64_t v13 = *(void *)(v12 + 8);
    unsigned int v54 = 0;
    unsigned int v14 = **(unsigned __int16 **)(v13 + 16);
    BOOL v15 = v14 > 0x13;
    int v16 = (1 << v14) & 0x80A00;
    BOOL v17 = v15 || v16 == 0;
    unsigned int v18 = v13 >> 4;
    if (!v17)
    {
      unsigned int v54 = *(_DWORD *)(*(void *)(v13 + 32) + 4);
      BOOL v19 = v54 - 1 < 0x3FFFFFFF;
      goto LABEL_22;
    }
    if (!sub_1CC4C04BC((llvm::MachineInstr *)v13, v4, &v54))
    {
      if ((*(unsigned char *)(*(void *)(v13 + 16) + 11) & 2) == 0) {
        goto LABEL_81;
      }
      v53[0] = -1;
      unsigned int v51 = (unint64_t)(v12 - *(void *)(v13 + 32)) >> 5;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, unsigned int *))(*(void *)v7 + 200))(v7, v13, v53, &v51))goto LABEL_81; {
      uint64_t v34 = *(void *)(v13 + 32);
      }
      if ((*(_DWORD *)(v34 + 32 * v53[0]) & 0x10000FF) != 0
        || (sub_1CC4C04BC((llvm::MachineInstr *)v13, *(_DWORD *)(v34 + 32 * v53[0] + 4), &v54) & 1) == 0)
      {
        goto LABEL_81;
      }
    }
    BOOL v19 = v54 - 1 < 0x3FFFFFFF;
    if (v3)
    {
LABEL_22:
      uint64_t v20 = *(void *)(a1 + 360);
      uint64_t v21 = *(unsigned int *)(a1 + 372);
      if (v20 == *(void *)(a1 + 352))
      {
        if (v21)
        {
          unsigned int v22 = 0;
          uint64_t v23 = 8 * v21;
          unsigned int v24 = *(void **)(a1 + 360);
          while (*v24 != v13)
          {
            if (*v24 == -2) {
              unsigned int v22 = v24;
            }
            ++v24;
            v23 -= 8;
            if (!v23)
            {
              if (!v22) {
                goto LABEL_30;
              }
              *unsigned int v22 = v13;
              --*(_DWORD *)(a1 + 376);
              goto LABEL_61;
            }
          }
          goto LABEL_81;
        }
LABEL_30:
        unsigned int v25 = *(_DWORD *)(a1 + 368);
        if (v21 < v25)
        {
          *(_DWORD *)(a1 + 372) = v21 + 1;
          *(void *)(v20 + 8 * v21) = v13;
LABEL_61:
          int v3 = 1;
          goto LABEL_62;
        }
      }
      else
      {
        unsigned int v25 = *(_DWORD *)(a1 + 368);
      }
      if (3 * v25 <= 4 * ((int)v21 - *(_DWORD *)(a1 + 376)))
      {
        if (v25 >= 0x40) {
          v25 *= 2;
        }
        else {
          unsigned int v25 = 128;
        }
      }
      else if (v25 - v21 >= v25 >> 3)
      {
        goto LABEL_35;
      }
      llvm::SmallPtrSetImplBase::Grow(v48, v25);
      unsigned int v25 = *(_DWORD *)(a1 + 368);
      uint64_t v20 = *(void *)(a1 + 360);
LABEL_35:
      unsigned int v26 = v25 - 1;
      unsigned int v27 = (v25 - 1) & (v18 ^ (v13 >> 9));
      BOOL v28 = (void *)(v20 + 8 * v27);
      uint64_t v29 = *v28;
      if (*v28 != -1)
      {
        unsigned int v30 = 0;
        int v31 = 1;
        while (v29 != v13)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -2;
          }
          if (v32) {
            unsigned int v30 = v28;
          }
          unsigned int v33 = v27 + v31++;
          unsigned int v27 = v33 & v26;
          BOOL v28 = (void *)(v20 + 8 * (v33 & v26));
          uint64_t v29 = *v28;
          if (*v28 == -1) {
            goto LABEL_54;
          }
        }
        goto LABEL_81;
      }
      unsigned int v30 = 0;
LABEL_54:
      if (v30) {
        int v35 = v30;
      }
      else {
        int v35 = v28;
      }
      if (*v35 != v13)
      {
        if (*v35 == -2) {
          --*(_DWORD *)(a1 + 376);
        }
        else {
          ++*(_DWORD *)(a1 + 372);
        }
        *int v35 = v13;
        goto LABEL_61;
      }
LABEL_81:
      unsigned int v43 = v56;
      goto LABEL_84;
    }
LABEL_62:
    uint64_t v36 = *(void *)(a1 + 328);
    uint64_t v37 = *(unsigned int *)(a1 + 344);
    if (!v37)
    {
LABEL_68:
      int v39 = (uint64_t *)(v36 + 16 * v37);
      goto LABEL_69;
    }
    LODWORD(v38) = (v37 - 1) & (v18 ^ (v13 >> 9));
    int v39 = (uint64_t *)(v36 + 16 * v38);
    uint64_t v40 = *v39;
    if (v13 != *v39)
    {
      int v41 = 1;
      while (v40 != -4096)
      {
        int v42 = v38 + v41++;
        uint64_t v38 = v42 & (v37 - 1);
        uint64_t v40 = *(void *)(v36 + 16 * v38);
        if (v13 == v40)
        {
          int v39 = (uint64_t *)(v36 + 16 * v38);
          goto LABEL_69;
        }
      }
      goto LABEL_68;
    }
LABEL_69:
    if (v39 != (uint64_t *)(v36 + 16 * v37)) {
      goto LABEL_81;
    }
    if (!v19)
    {
      sub_1CD4145B8(v49, (int *)&v54)[1] = v4;
      if (v56 >= (unint64_t)HIDWORD(v56)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v55 + v56) = v54;
      LODWORD(v56) = v56 + 1;
      uint64_t v4 = v54;
      continue;
    }
    break;
  }
  if (v56 >= HIDWORD(v56)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_DWORD *)v55 + v56) = v54;
  unsigned int v43 = v56 + 1;
  LODWORD(v56) = v56 + 1;
LABEL_84:
  unsigned int v44 = v55;
  if (v43)
  {
    int v45 = *((_DWORD *)v55 + v43 - 1);
    unsigned int v46 = v43 - 1;
    LODWORD(v56) = v46;
    if (v46)
    {
      do
      {
        int v47 = *((_DWORD *)v55 + v46 - 1);
        LODWORD(v56) = v46 - 1;
        unsigned int v51 = v47;
        int v52 = v45;
        sub_1CC4C0040((uint64_t)v53, a1 + 472, (int *)&v51, &v52);
        unsigned int v46 = v56;
        int v45 = v47;
      }
      while (v56);
    }
    else
    {
      int v47 = v45;
    }
    unsigned int v51 = a2;
    int v52 = v47;
    sub_1CC4C0040((uint64_t)v53, a1 + 472, (int *)&v51, &v52);
    unsigned int v44 = v55;
  }
  if (v44 != v57) {
    free(v44);
  }
}

_DWORD *sub_1CC4C0040(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)a2;
    unsigned int v10 = (37 * *a3) & (v8 - 1);
    uint64_t result = (_DWORD *)(*(void *)a2 + 8 * v10);
    int v12 = *result;
    if (*a3 == *result)
    {
LABEL_16:
      char v16 = 0;
      goto LABEL_9;
    }
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -1)
    {
      if (v13) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v12 == -2;
      }
      if (v17) {
        uint64_t v13 = result;
      }
      unsigned int v18 = v10 + v14++;
      unsigned int v10 = v18 & (v8 - 1);
      uint64_t result = (_DWORD *)(v9 + 8 * v10);
      int v12 = *result;
      if (*a3 == *result) {
        goto LABEL_16;
      }
    }
    if (v13) {
      BOOL v15 = v13;
    }
    else {
      BOOL v15 = result;
    }
  }
  else
  {
    BOOL v15 = 0;
  }
  uint64_t result = sub_1CBA85B04(a2, (uint64_t)a3, a3, v15);
  _DWORD *result = *a3;
  result[1] = *a4;
  uint64_t v9 = *(void *)a2;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v16 = 1;
LABEL_9:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9 + 8 * v8;
  *(unsigned char *)(a1 + 16) = v16;
  return result;
}

BOOL sub_1CC4C0130(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a3) {
    return llvm::MachineInstr::findRegisterUseOperandIdx(a1, a2, 1, 0) != -1;
  }
  if ((a2 & 0x80000000) == 0) {
    return llvm::MachineInstr::findRegisterUseOperandIdx(a1, a2, 1, 0) != -1;
  }
  uint64_t v3 = *(void *)(a3 + 288);
  int v4 = *(_DWORD *)(v3 + 384);
  if (!v4) {
    return llvm::MachineInstr::findRegisterUseOperandIdx(a1, a2, 1, 0) != -1;
  }
  uint64_t v5 = *(void *)(v3 + 368);
  int v6 = v4 - 1;
  unsigned int v7 = v6 & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v8 = *(void *)(v5 + 16 * v7);
  if (v8 != a1)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      unsigned int v10 = v7 + v9++;
      unsigned int v7 = v10 & v6;
      uint64_t v8 = *(void *)(v5 + 16 * v7);
      if (v8 == a1) {
        goto LABEL_8;
      }
    }
    return llvm::MachineInstr::findRegisterUseOperandIdx(a1, a2, 1, 0) != -1;
  }
LABEL_8:
  unint64_t v11 = *(unsigned int *)(a3 + 416);
  BOOL v37 = (a2 & 0x7FFFFFFF) >= v11;
  unint64_t v12 = (a2 & 0x7FFFFFFF) - v11;
  if (v37)
  {
    sub_1CB9153B8(a3 + 408, v12 + 1, *(void *)(a3 + 424));
LABEL_43:
    operator new();
  }
  uint64_t v13 = *(uint64_t **)(*(void *)(a3 + 408) + 8 * (a2 & 0x7FFFFFFF));
  if (!v13) {
    goto LABEL_43;
  }
  if (!*((_DWORD *)v13 + 18)) {
    return 0;
  }
  __int16 v14 = *(_WORD *)(a1 + 44);
  unint64_t v15 = a1;
  if ((v14 & 4) != 0)
  {
    unint64_t v15 = a1;
    do
      unint64_t v15 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v15 + 44) & 4) != 0);
  }
  uint64_t v16 = *(void *)(a3 + 288);
  if ((v14 & 8) != 0)
  {
    do
      a1 = *(void *)(a1 + 8);
    while ((*(_WORD *)(a1 + 44) & 8) != 0);
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if (v15 != v17)
  {
    while (1)
    {
      unsigned int v18 = **(unsigned __int16 **)(v15 + 16);
      BOOL v19 = v18 > 0x17;
      int v20 = (1 << v18) & 0x83E000;
      if (v19 || v20 == 0) {
        break;
      }
      unint64_t v15 = *(void *)(v15 + 8);
      if (v15 == v17)
      {
        unint64_t v15 = *(void *)(a1 + 8);
        break;
      }
    }
  }
  uint64_t v22 = *(void *)(v16 + 368);
  uint64_t v23 = *(unsigned int *)(v16 + 384);
  if (v23)
  {
    LODWORD(v24) = ((v15 >> 4) ^ (v15 >> 9)) & (v23 - 1);
    unsigned int v25 = (uint64_t *)(v22 + 16 * v24);
    uint64_t v26 = *v25;
    if (v15 == *v25) {
      goto LABEL_28;
    }
    int v27 = 1;
    while (v26 != -4096)
    {
      int v28 = v24 + v27++;
      uint64_t v24 = v28 & (v23 - 1);
      uint64_t v26 = *(void *)(v22 + 16 * v24);
      if (v15 == v26)
      {
        unsigned int v25 = (uint64_t *)(v22 + 16 * v24);
        goto LABEL_28;
      }
    }
  }
  unsigned int v25 = (uint64_t *)(v22 + 16 * v23);
LABEL_28:
  uint64_t v30 = v25[1];
  unint64_t v31 = *((unsigned int *)v13 + 2);
  uint64_t v32 = *v13;
  if (!v31)
  {
    LODWORD(v31) = 0;
    goto LABEL_38;
  }
  uint64_t v33 = *(void *)(v32 + 24 * v31 - 16);
  unsigned int v34 = *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24) | (v30 >> 1) & 3;
  if (v34 >= ((v33 >> 1) & 3 | *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_38:
    v32 += 24 * v31;
    goto LABEL_39;
  }
  do
  {
    unint64_t v35 = v31 >> 1;
    uint64_t v36 = *(void *)(v32 + 24 * (v31 >> 1) + 8);
    LODWORD(v36) = (v36 >> 1) & 3 | *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24);
    v31 -= (v31 >> 1) + 1;
    BOOL v37 = v34 >= v36;
    if (v34 >= v36) {
      unint64_t v38 = v35 + 1;
    }
    else {
      unint64_t v38 = 0;
    }
    v32 += 24 * v38;
    if (!v37) {
      unint64_t v31 = v35;
    }
  }
  while (v31);
LABEL_39:
  uint64_t v39 = *(void *)(v32 + 8);
  if ((v39 & 6) != 0) {
    return (v39 & 0xFFFFFFFFFFFFFFF8) == (v30 & 0xFFFFFFFFFFFFFFF8);
  }
  return 0;
}

uint64_t sub_1CC4C04BC(llvm::MachineInstr *this, int a2, _DWORD *a3)
{
  uint64_t v3 = *((unsigned int *)this + 10);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  for (uint64_t i = (_DWORD *)(*((void *)this + 4) + 4); ; i += 8)
  {
    int v6 = *(i - 1);
    if ((v6 & 0x10000FF) == 0 && (v6 & 0xF00000) != 0 && *i == a2) {
      break;
    }
    if (v3 == ++v4) {
      return 0;
    }
  }
  *a3 = *(_DWORD *)(*((void *)this + 4) + 32 * llvm::MachineInstr::findTiedOperandIdx(this, v4) + 4);
  return 1;
}

uint64_t sub_1CC4C0558(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  unsigned int v7 = (_DWORD *)(v3 + 56 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (_DWORD *)(v3 + 56 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

int *sub_1CC4C0604(int *result, uint64_t a2)
{
  int v3 = (int)result;
  if ((result & 0x80000000) != 0)
  {
    while (1)
    {
      uint64_t result = sub_1CBA84AA4((uint64_t *)a2, &v3);
      if ((int *)(*(void *)a2 + 8 * *(unsigned int *)(a2 + 16)) == result) {
        return 0;
      }
      LODWORD(result) = result[1];
      int v3 = (int)result;
      if ((result & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    if ((result - 1) >= 0x3FFFFFFF) {
      return 0;
    }
    else {
      return (int *)result;
    }
  }
}

BOOL sub_1CC4C0678(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  for (uint64_t i = a2;
        (unint64_t)(i - 0x40000000) < 0xFFFFFFFFC0000001;
        uint64_t i = *(unsigned int *)(*(void *)(a1 + 32) + 32 * v11 + 4))
  {
LABEL_10:
    BOOL v10 = sub_1CC4C0130(a1, i, a4);
    uint64_t v11 = v10;
    if ((unint64_t)(i - 0x40000000) > 0xFFFFFFFFC0000000 || !v10) {
      return v11;
    }
    if ((i & 0x80000000) != 0) {
      BOOL v12 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (i & 0x7FFFFFFF) + 8);
    }
    else {
      BOOL v12 = (uint64_t *)(*(void *)(a3 + 272) + 8 * i);
    }
    uint64_t v13 = *v12;
    if ((*(unsigned char *)(v13 + 3) & 1) == 0)
    {
      uint64_t v13 = *(void *)(v13 + 24);
      if ((*(unsigned char *)(v13 + 3) & 1) == 0) {
        uint64_t v13 = 0;
      }
    }
    uint64_t v14 = *(void *)(v13 + 24);
    if (v14 && (*(unsigned char *)(v14 + 3) & 1) != 0) {
      return 1;
    }
    a1 = *(void *)(v13 + 8);
    int v15 = **(unsigned __int16 **)(a1 + 16);
    if (v15 != 9)
    {
      uint64_t v11 = 1;
      if (v15 == 19) {
        continue;
      }
      if (v15 != 11) {
        return v11;
      }
    }
    uint64_t v11 = 2;
  }
  if (a5) {
    return 1;
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 272) + 8 * i);
  if (v9)
  {
    while ((*(unsigned char *)(v9 + 3) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v9 + 24);
      if (!v9) {
        goto LABEL_10;
      }
    }
    while (1)
    {
      uint64_t v9 = *(void *)(v9 + 24);
      if (!v9) {
        return 1;
      }
      if ((*(unsigned char *)(v9 + 3) & 1) == 0) {
        goto LABEL_10;
      }
    }
  }

  return sub_1CC4C0130(a1, i, a4);
}

BOOL sub_1CC4C07E0(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  *a4 = 0;
  uint64_t v4 = *(void *)(a1 + 280);
  if ((a2 & 0x80000000) != 0) {
    int v5 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    int v5 = (uint64_t *)(*(void *)(v4 + 272) + 8 * a2);
  }
  uint64_t v6 = *v5;
  if (*v5)
  {
    unsigned int v7 = 0;
    uint64_t v8 = *(void *)(a1 + 320);
    unsigned int v9 = a3;
    while (1)
    {
      uint64_t v10 = *(void *)(v6 + 8);
      if (*(void *)(v10 + 24) == v8 && **(unsigned __int16 **)(v10 + 16) - 13 >= 2) {
        break;
      }
LABEL_22:
      uint64_t v6 = *(void *)(v6 + 24);
      if (!v6) {
        return v9 >= a3 || v9 <= v7;
      }
    }
    uint64_t v11 = *(void *)(a1 + 328);
    uint64_t v12 = *(unsigned int *)(a1 + 344);
    if (v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v14 = (uint64_t *)(v11 + 16 * v13);
      uint64_t v15 = *v14;
      if (v10 == *v14) {
        goto LABEL_15;
      }
      int v16 = 1;
      while (v15 != -4096)
      {
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v12 - 1);
        uint64_t v15 = *(void *)(v11 + 16 * v13);
        if (v10 == v15)
        {
          uint64_t v14 = (uint64_t *)(v11 + 16 * v13);
          goto LABEL_15;
        }
      }
    }
    uint64_t v14 = (uint64_t *)(v11 + 16 * v12);
LABEL_15:
    if (v14 != (uint64_t *)(v11 + 16 * v12))
    {
      unsigned int v18 = *((_DWORD *)v14 + 2);
      if (*(unsigned char *)(v6 + 3))
      {
        if (v18 > v7)
        {
          *a4 = v18;
          unsigned int v7 = v18;
        }
      }
      else if (v18 < v9)
      {
        unsigned int v9 = *((_DWORD *)v14 + 2);
      }
    }
    goto LABEL_22;
  }
  unsigned int v7 = 0;
  unsigned int v9 = a3;
  return v9 >= a3 || v9 <= v7;
}

uint64_t sub_1CC4C08F8(uint64_t a1, unsigned int a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = a2;
    uint64_t v6 = *(void *)(a1 + 280);
    do
    {
      unsigned int v7 = (uint64_t *)((v5 & 0x80000000) != 0
                     ? *(void *)(v6 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8
                     : *(void *)(v6 + 272) + 8 * v5);
      uint64_t v8 = *v7;
      if (!v8) {
        break;
      }
      if ((*(unsigned char *)(v8 + 3) & 1) == 0)
      {
        uint64_t v8 = *(void *)(v8 + 24);
        if (!v8 || (*(unsigned char *)(v8 + 3) & 1) == 0) {
          break;
        }
      }
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(v8 + 8);
LABEL_8:
      if (*(void *)(v10 + 24) != *(void *)(a1 + 320) || **(unsigned __int16 **)(v10 + 16) - 13 < 2)
      {
        uint64_t v11 = v9;
        goto LABEL_11;
      }
      uint64_t v11 = v10;
      if (v9)
      {
        uint64_t v11 = v10;
        if (v9 != v10) {
          break;
        }
      }
LABEL_11:
      while (1)
      {
        uint64_t v8 = *(void *)(v8 + 24);
        if (!v8 || (*(unsigned char *)(v8 + 3) & 1) == 0) {
          break;
        }
        if (*(void *)(v8 + 8) != v10)
        {
          uint64_t v10 = *(void *)(v8 + 8);
          uint64_t v9 = v11;
          goto LABEL_8;
        }
      }
      if (!v11 || **(_WORD **)(v11 + 16) != 19) {
        return 0;
      }
      uint64_t v5 = *(unsigned int *)(*(void *)(v11 + 32) + 36);
      if (v5 == a3) {
        return 1;
      }
      ++v4;
    }
    while (v4 != a4);
  }
  return 0;
}

void sub_1CC4C0A08(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v1 = a1 + 8;
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 16);
    if (!v2) {
      return;
    }
    uint64_t v1 = *(void *)(a1 + 8);
  }
  uint64_t v3 = 56 * v2;
  int v4 = (void *)(v1 + 24);
  do
  {
    if (*((_DWORD *)v4 - 6) <= 0xFFFFFFFD)
    {
      uint64_t v5 = (void *)*(v4 - 2);
      if (v4 != v5)
      {
        uint64_t v6 = v4;
        uint64_t v7 = v3;
        free(v5);
        int v4 = v6;
        uint64_t v3 = v7;
      }
    }
    v4 += 7;
    v3 -= 56;
  }
  while (v3);
}

uint64_t sub_1CC4C0A84()
{
  v1.n128_u64[0] = (unint64_t)"Coalesce copies by rescheduling (default=true)";
  v1.n128_u64[1] = 46;
  LOBYTE(v2) = 1;
  uint64_t v3 = &v2;
  int v4 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCD7748, "twoaddr-reschedule", &v1, (unsigned char **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD7748, &dword_1CB82C000);
  int v4 = 1;
  int v2 = 3;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Maximum number of dataflow edges to traverse when evaluating the benefit of commuting operands";
  v1.n128_u64[1] = 94;
  sub_1CD58CFFC(&v4, &v3, (long long *)&v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCD7808, &dword_1CB82C000);
}

void sub_1CC4C0B68()
{
}

uint64_t sub_1CC4C0C04(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCD78D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2615920;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD78D8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC4C0B68;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCD78D8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

double llvm::UnreachableBlockElimPass::run@<D0>(llvm *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3 = llvm::EliminateUnreachableBlocks(a1, 0, 0);
  *(void *)a2 = a2 + 32;
  *(void *)(a2 + 8) = a2 + 32;
  *(_DWORD *)(a2 + 16) = 2;
  if (v3)
  {
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(void *)(a2 + 48) = a2 + 80;
    *(void *)(a2 + 56) = a2 + 80;
    *(void *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    sub_1CBFA65B8((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  }
  else
  {
    *(void *)(a2 + 48) = a2 + 80;
    *(void *)(a2 + 56) = a2 + 80;
    *(void *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    *(void *)&double result = 1;
    *(void *)(a2 + 20) = 1;
    *(void *)(a2 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  }
  return result;
}

void sub_1CC4C0D6C()
{
}

void sub_1CC4C0E08()
{
}

void sub_1CC4C0E48(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4C0E80(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1CC4C0E94(uint64_t a1, llvm *a2)
{
  return llvm::EliminateUnreachableBlocks(a2, 0, 0);
}

void sub_1CC4C0EA4()
{
}

void sub_1CC4C0F48(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  __n128 v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  BOOL v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC4C0FFC(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  BOOL v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4C10A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC4C1118(uint64_t a1, uint64_t a2)
{
  v149 = v153;
  uint64_t v150 = v153;
  uint64_t v151 = 8;
  int v152 = 0;
  BOOL v3 = *(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(v3, &llvm::MachineDominatorTree::ID, 1);
  if (AnalysisPass)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineDominatorTree::ID);
    BOOL v3 = *(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = llvm::PMDataManager::findAnalysisPass(v3, &llvm::MachineLoopInfo::ID, 1);
  if (v6) {
    uint64_t v142 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::MachineLoopInfo::ID);
  }
  else {
    uint64_t v142 = 0;
  }
  unsigned int v155 = (unsigned __int8 **)a2;
  sub_1CC3EF304((llvm::SmallPtrSetImplBase *)&v149, (uint64_t)&v155, &v144);
  uint64_t v7 = v145;
  uint64_t v8 = (unsigned char *)v146;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v146 - (uint64_t)v145) >> 3);
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  sub_1CBF340A8(&v145, v7, v8, v9);
  while ((unsigned char *)v146 != v145)
    sub_1CC3EFCC0(&v144);
  if (v146) {
    operator delete((void *)v146);
  }
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = *(void **)(a2 + 328);
  uint64_t v141 = (void *)(a2 + 320);
  if (v10 == (void *)(a2 + 320))
  {
    int v52 = 0;
    uint64_t v12 = 0;
    goto LABEL_108;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    uint64_t v14 = v149;
    if (v150 == v149)
    {
      int v15 = HIDWORD(v151);
      int v16 = &v150[8 * HIDWORD(v151)];
      if (HIDWORD(v151))
      {
        uint64_t v17 = 0;
        while (*(void **)&v150[v17] != v10)
        {
          v17 += 8;
          if (8 * HIDWORD(v151) == v17) {
            goto LABEL_35;
          }
        }
        int v16 = &v150[v17];
      }
LABEL_35:
      uint64_t v14 = v150;
    }
    else
    {
      int v18 = v151 - 1;
      unsigned int v19 = (v151 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      int v16 = &v150[8 * v19];
      int v20 = *(void **)v16;
      if (*(void *)v16 == -1)
      {
        uint64_t v21 = 0;
LABEL_52:
        if (v21) {
          int v16 = v21;
        }
        int v15 = HIDWORD(v151);
        if (*(void **)v16 != v10) {
          int v16 = &v150[8 * v151];
        }
      }
      else
      {
        uint64_t v21 = 0;
        int v22 = 1;
        while (v20 != v10)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v20 == (void *)-2;
          }
          if (v23) {
            uint64_t v21 = v16;
          }
          unsigned int v24 = v19 + v22++;
          unsigned int v19 = v24 & v18;
          int v16 = &v150[8 * (v24 & v18)];
          int v20 = *(void **)v16;
          if (*(void *)v16 == -1) {
            goto LABEL_52;
          }
        }
        int v15 = HIDWORD(v151);
      }
    }
    if (v150 == v14) {
      int v25 = v15;
    }
    else {
      int v25 = v151;
    }
    if (v16 == &v150[8 * v25])
    {
      if (v12 >= v13)
      {
        uint64_t v28 = (v12 - v11) >> 3;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61) {
          abort();
        }
        if ((v13 - v11) >> 2 > v29) {
          unint64_t v29 = (v13 - v11) >> 2;
        }
        if ((unint64_t)(v13 - v11) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          if (v30 >> 61) {
            sub_1CB833614();
          }
          unint64_t v31 = v11;
          uint64_t v32 = (char *)operator new(8 * v30);
          uint64_t v11 = v31;
        }
        else
        {
          uint64_t v32 = 0;
        }
        uint64_t v26 = &v32[8 * v28];
        *(void *)uint64_t v26 = v10;
        int v27 = v26 + 8;
        while (v12 != v11)
        {
          uint64_t v33 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v26 - 1) = v33;
          v26 -= 8;
        }
        uint64_t v13 = &v32[8 * v30];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        uint64_t v26 = v11;
        *(void *)uint64_t v12 = v10;
        int v27 = v12 + 8;
      }
      if (v142) {
        llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock();
      }
      if (!v5) {
        goto LABEL_94;
      }
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v5);
      uint64_t v34 = *(void *)(v5 + 1320);
      uint64_t v35 = *(void *)(v34 + 24);
      uint64_t v36 = *(unsigned int *)(v34 + 40);
      if (v36)
      {
        LODWORD(v37) = (v36 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        unint64_t v38 = (void *)(v35 + 16 * v37);
        uint64_t v39 = (void *)*v38;
        if ((void *)*v38 == v10)
        {
LABEL_73:
          if (v38 != (void *)(v35 + 16 * v36) && v38[1])
          {
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v5);
            llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::eraseNode();
          }
LABEL_94:
          while (1)
          {
            unsigned int v51 = (char *)v10[11];
            if (v51 == (char *)v10[12]) {
              break;
            }
            uint64_t v42 = *(void *)v51 + 48;
            uint64_t v43 = *(void *)(*(void *)v51 + 56);
            if (v43 != v42)
            {
              do
              {
                int v44 = **(unsigned __int16 **)(v43 + 16);
                if (v44 != 69 && v44 != 0) {
                  break;
                }
                int v46 = *(_DWORD *)(v43 + 40);
                unsigned int v47 = v46 - 1;
                if ((v46 - 1) >= 2)
                {
                  unsigned int v48 = v46 - 2;
                  uint64_t v49 = 32 * (v46 - 1);
                  do
                  {
                    uint64_t v50 = *(void *)(v43 + 32);
                    if (*(unsigned char *)(v50 + v49) == 4 && *(void **)(v50 + v49 + 16) == v10)
                    {
                      llvm::MachineInstr::removeOperand((char *)v43, v47);
                      llvm::MachineInstr::removeOperand((char *)v43, v48);
                    }
                    v47 -= 2;
                    v48 -= 2;
                    v49 -= 64;
                  }
                  while ((v47 & 0xFFFFFFFE) != 0);
                }
                if ((*(unsigned char *)v43 & 4) == 0)
                {
                  while ((*(_WORD *)(v43 + 44) & 8) != 0)
                    uint64_t v43 = *(void *)(v43 + 8);
                }
                uint64_t v43 = *(void *)(v43 + 8);
              }
              while (v43 != v42);
              unsigned int v51 = (char *)v10[11];
            }
            llvm::MachineBasicBlock::removeSuccessor((uint64_t)v10, v51, 0);
          }
          uint64_t v12 = v27;
          uint64_t v11 = v26;
          goto LABEL_96;
        }
        int v40 = 1;
        while (v39 != (void *)-4096)
        {
          int v41 = v37 + v40++;
          uint64_t v37 = v41 & (v36 - 1);
          uint64_t v39 = *(void **)(v35 + 16 * v37);
          if (v39 == v10)
          {
            unint64_t v38 = (void *)(v35 + 16 * v37);
            goto LABEL_73;
          }
        }
      }
      unint64_t v38 = (void *)(v35 + 16 * v36);
      goto LABEL_73;
    }
LABEL_96:
    uint64_t v10 = (void *)v10[1];
  }
  while (v10 != v141);
  if (v11 == v12)
  {
    int v52 = v12;
  }
  else
  {
    int v52 = v11;
    uint64_t v53 = v11;
    do
    {
      unsigned int v54 = *(uint64_t **)v53;
      uint64_t v55 = *(void *)v53 + 48;
      for (uint64_t i = *(const llvm::MachineInstr **)(*(void *)v53 + 56);
            i != (const llvm::MachineInstr *)v55;
            uint64_t i = (const llvm::MachineInstr *)*((void *)i + 1))
      {
        if (llvm::MachineInstr::shouldUpdateCallSiteInfo(i)) {
          llvm::MachineFunction::eraseCallSiteInfo((int32x2_t *)v54[4], i);
        }
      }
      uint64_t v57 = v54[4];
      int v58 = v57 + 320;
      *(void *)(*(void *)(v57 + 104) + 8 * *((unsigned int *)v54 + 6)) = 0;
      *((_DWORD *)v54 + 6) = -1;
      uint64_t v59 = *v54;
      int v60 = (void *)v54[1];
      *int v60 = *v54;
      *(void *)(v59 + 8) = v60;
      *unsigned int v54 = 0;
      v54[1] = 0;
      llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v58, (llvm::MachineBasicBlock *)v54);
      v53 += 8;
    }
    while (v53 != v12);
  }
LABEL_108:
  __p = v52;
  uint64_t v61 = *(void **)(a2 + 328);
  if (v61 == v141)
  {
    char v62 = 0;
    goto LABEL_262;
  }
  char v62 = 0;
  while (2)
  {
    uint64_t v63 = (uint64_t *)v61[8];
    unint64_t v64 = (uint64_t *)v61[9];
    unint64_t v65 = v148;
    uint64_t v144 = v148;
    uint64_t v145 = v148;
    uint64_t v146 = 8;
    LODWORD(v147) = 0;
    uint64_t v66 = v148;
    if (v63 != v64)
    {
      unsigned int v67 = 8;
      unint64_t v65 = v148;
      uint64_t v66 = v148;
      while (2)
      {
        uint64_t v68 = *v63;
        uint64_t v69 = HIDWORD(v146);
        if (v65 == v66)
        {
          if (HIDWORD(v146))
          {
            uint64_t v70 = 0;
            uint64_t v71 = 8 * HIDWORD(v146);
            unint64_t v72 = v66;
            while (*v72 != v68)
            {
              if (*v72 == -2) {
                uint64_t v70 = v72;
              }
              ++v72;
              v71 -= 8;
              if (!v71)
              {
                if (!v70) {
                  goto LABEL_120;
                }
                *uint64_t v70 = v68;
                LODWORD(v147) = v147 - 1;
                goto LABEL_142;
              }
            }
            goto LABEL_142;
          }
LABEL_120:
          if (HIDWORD(v146) < v67)
          {
            ++HIDWORD(v146);
            *(void *)&v66[8 * v69] = v68;
            goto LABEL_142;
          }
        }
        if (3 * v67 <= 4 * (HIDWORD(v146) - (int)v147))
        {
          if (v67 >= 0x40) {
            v67 *= 2;
          }
          else {
            unsigned int v67 = 128;
          }
        }
        else if (v67 - HIDWORD(v146) >= v67 >> 3)
        {
          goto LABEL_124;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v144, v67);
        unsigned int v67 = v146;
        unint64_t v65 = v145;
LABEL_124:
        unsigned int v73 = v67 - 1;
        unsigned int v74 = (v67 - 1) & ((v68 >> 4) ^ (v68 >> 9));
        uint64_t v75 = &v65[8 * v74];
        uint64_t v76 = *v75;
        if (*v75 == -1)
        {
          unint64_t v77 = 0;
LABEL_136:
          if (v77) {
            uint64_t v75 = v77;
          }
          if (*v75 != v68)
          {
            if (*v75 == -2) {
              LODWORD(v147) = v147 - 1;
            }
            else {
              ++HIDWORD(v146);
            }
            *uint64_t v75 = v68;
          }
        }
        else
        {
          unint64_t v77 = 0;
          int v78 = 1;
          while (v76 != v68)
          {
            if (v77) {
              BOOL v79 = 0;
            }
            else {
              BOOL v79 = v76 == -2;
            }
            if (v79) {
              unint64_t v77 = v75;
            }
            unsigned int v80 = v74 + v78++;
            unsigned int v74 = v80 & v73;
            uint64_t v75 = &v65[8 * (v80 & v73)];
            uint64_t v76 = *v75;
            if (*v75 == -1) {
              goto LABEL_136;
            }
          }
        }
LABEL_142:
        uint64_t v66 = v144;
        unint64_t v65 = v145;
        if (++v63 == v64) {
          break;
        }
        continue;
      }
    }
    uint64_t v81 = v61 + 6;
    unint64_t v143 = v61;
    uint64_t v82 = v61[7];
    if ((void *)v82 == v61 + 6) {
      goto LABEL_257;
    }
    while (2)
    {
      int v83 = **(unsigned __int16 **)(v82 + 16);
      if (v83 == 69 || v83 == 0)
      {
        int v85 = *(_DWORD *)(v82 + 40);
        uint64_t v86 = (v85 - 1);
        if (v86 < 2) {
          goto LABEL_193;
        }
        unsigned int v87 = v85 - 1;
        do
        {
          uint64_t v88 = *(void *)(*(void *)(v82 + 32) + 32 * v86 + 16);
          int v89 = v144;
          if (v145 == v144)
          {
            int v90 = HIDWORD(v146);
            BOOL v91 = &v145[8 * HIDWORD(v146)];
            if (HIDWORD(v146))
            {
              uint64_t v92 = 0;
              while (*(void *)&v145[v92] != v88)
              {
                v92 += 8;
                if (8 * HIDWORD(v146) == v92) {
                  goto LABEL_177;
                }
              }
              BOOL v91 = &v145[v92];
            }
LABEL_177:
            int v89 = v145;
          }
          else
          {
            int v93 = v146 - 1;
            unsigned int v94 = (v146 - 1) & ((v88 >> 4) ^ (v88 >> 9));
            BOOL v91 = &v145[8 * v94];
            uint64_t v95 = *v91;
            if (*v91 == -1)
            {
              uint64_t v96 = 0;
LABEL_185:
              if (v96) {
                BOOL v91 = v96;
              }
              int v90 = HIDWORD(v146);
              if (*v91 != v88) {
                BOOL v91 = &v145[8 * v146];
              }
            }
            else
            {
              uint64_t v96 = 0;
              int v97 = 1;
              while (v95 != v88)
              {
                if (v96) {
                  BOOL v98 = 0;
                }
                else {
                  BOOL v98 = v95 == -2;
                }
                if (v98) {
                  uint64_t v96 = v91;
                }
                unsigned int v99 = v94 + v97++;
                unsigned int v94 = v99 & v93;
                BOOL v91 = &v145[8 * (v99 & v93)];
                uint64_t v95 = *v91;
                if (*v91 == -1) {
                  goto LABEL_185;
                }
              }
              int v90 = HIDWORD(v146);
            }
          }
          int v100 = v146;
          if (v145 == v89) {
            int v100 = v90;
          }
          if (v91 == (void *)&v145[8 * v100])
          {
            llvm::MachineInstr::removeOperand((char *)v82, v86);
            llvm::MachineInstr::removeOperand((char *)v82, v86 - 1);
            char v62 = 1;
          }
          v87 -= 2;
          v86 -= 2;
        }
        while (v87 > 1);
        if (*(_DWORD *)(v82 + 40) != 3)
        {
LABEL_193:
          if ((*(unsigned char *)v82 & 4) == 0)
          {
            while ((*(_WORD *)(v82 + 44) & 8) != 0)
              uint64_t v82 = *(void *)(v82 + 8);
          }
          uint64_t v82 = *(void *)(v82 + 8);
LABEL_197:
          if ((unint64_t *)v82 == v81) {
            break;
          }
          continue;
        }
        int v101 = *(unsigned int **)(v82 + 32);
        unsigned int v102 = v101[9];
        uint64_t v103 = v101[1];
        if (v102 == v103)
        {
          char v62 = 1;
          goto LABEL_197;
        }
        unsigned int v104 = (llvm::MachineOperand *)(v101 + 8);
        int v105 = (v101[8] >> 8) & 0xFFF;
        if (!v105)
        {
          uint64_t v106 = *(void **)(a2 + 40);
          if (sub_1CC38D61C(v106, v102, *(void *)(v106[3] + 16 * (v102 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(v106[3] + 16 * (v103 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0))
          {
            if ((*((unsigned char *)v104 + 3) & 0x10) == 0)
            {
              uint64_t v107 = (*(uint64_t (**)(void))(**(void **)(*v106 + 16) + 176))(*(void *)(*v106 + 16));
              if ((v103 & 0x80000000) != 0) {
                uint64_t v108 = (uint64_t *)(v106[3] + 16 * (v103 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v108 = (uint64_t *)(v106[34] + 8 * v103);
              }
              uint64_t v109 = *v108;
              if (*v108)
              {
                do
                {
                  uint64_t v110 = *(void *)(v109 + 24);
                  if (v102 - 1 <= 0x3FFFFFFE) {
                    llvm::MachineOperand::substPhysReg((unsigned int *)v109, v102, v107);
                  }
                  else {
                    llvm::MachineOperand::setReg(v109, v102);
                  }
                  uint64_t v109 = v110;
                }
                while (v110);
              }
LABEL_223:
              uint64_t v123 = v82;
              if ((*(unsigned char *)v82 & 4) == 0)
              {
                uint64_t v123 = v82;
                if ((*(_WORD *)(v82 + 44) & 8) != 0)
                {
                  uint64_t v123 = v82;
                  do
                    uint64_t v123 = *(void *)(v123 + 8);
                  while ((*(_WORD *)(v123 + 44) & 8) != 0);
                }
              }
              uint64_t v124 = *(void *)(v123 + 8);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v82);
              char v62 = 1;
              uint64_t v82 = v124;
              goto LABEL_197;
            }
          }
        }
        uint64_t v111 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
        uint64_t v112 = v81;
        if ((unint64_t *)v143[7] != v81)
        {
          uint64_t v112 = (unint64_t *)v143[7];
          while (!*(_WORD *)v112[2] || *(_WORD *)v112[2] == 69)
          {
            uint64_t v112 = (unint64_t *)v112[1];
            if (v112 == v81)
            {
              uint64_t v112 = v81;
              break;
            }
          }
        }
        uint64_t v113 = *(void *)(v111 + 8);
        uint64_t v114 = (llvm::MachineFunction *)v143[4];
        uint64_t v115 = *(unsigned __int8 **)(v82 + 56);
        int v154 = v115;
        uint64_t v139 = v114;
        if (v115)
        {
          llvm::MetadataTracking::track((uint64_t)&v154, v115, 2);
          uint64_t v114 = v139;
        }
        uint64_t v116 = llvm::MachineFunction::CreateMachineInstr(v114, v113 + 912, &v154, 0);
        if (v154)
        {
          int v132 = *v154;
          if ((v132 - 4) > 0x1E)
          {
            if ((v132 - 3) >= 0xFFFFFFFE) {
              uint64_t v135 = v154;
            }
            else {
              uint64_t v135 = 0;
            }
            if ((v132 - 3) < 0xFFFFFFFE)
            {
              if (v132 == 3) {
                *((void *)v154 + 1) = 0;
              }
              goto LABEL_219;
            }
            unint64_t v134 = (unint64_t)(v135 + 8);
          }
          else
          {
            if ((v154[1] & 0x7F) != 2 && !*((_DWORD *)v154 + 3)) {
              goto LABEL_219;
            }
            uint64_t v133 = *((void *)v154 + 2);
            if ((v133 & 4) == 0) {
              goto LABEL_219;
            }
            unint64_t v134 = v133 & 0xFFFFFFFFFFFFFFF8;
            if (!v134) {
              goto LABEL_219;
            }
          }
          unsigned int v155 = &v154;
          sub_1CC5FA668(v134 + 16, &v155);
        }
LABEL_219:
        uint64_t v117 = v143[5];
        *((void *)v116 + 3) = v117;
        uint64_t v118 = *(void *)(v117 + 32);
        uint64_t v119 = *((unsigned int *)v116 + 10);
        if (v119)
        {
          uint64_t v125 = *((void *)v116 + 4);
          uint64_t v126 = *(void *)(v118 + 40);
          uint64_t v127 = 32 * v119;
          do
          {
            if (!*(unsigned char *)v125)
            {
              uint64_t v128 = *(unsigned int *)(v125 + 4);
              if ((int)v128 >= 0) {
                v129 = (uint64_t *)(*(void *)(v126 + 272) + 8 * v128);
              }
              else {
                v129 = (uint64_t *)(*(void *)(v126 + 24) + 16 * (v128 & 0x7FFFFFFF) + 8);
              }
              uint64_t v130 = *v129;
              if (*v129)
              {
                uint64_t v131 = *(void *)(v130 + 16);
                *(void *)(v130 + 16) = v125;
                *(void *)(v125 + 16) = v131;
                if (*(unsigned char *)(v125 + 3))
                {
                  *(void *)(v125 + 24) = v130;
                }
                else
                {
                  *(void *)(v125 + 24) = 0;
                  v129 = (uint64_t *)(v131 + 24);
                }
              }
              else
              {
                *(void *)(v125 + 16) = v125;
                *(void *)(v125 + 24) = 0;
              }
              uint64_t *v129 = v125;
            }
            v125 += 32;
            v127 -= 32;
          }
          while (v127);
        }
        uint64_t v120 = *(void *)(v118 + 728);
        if (v120) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v120 + 24))(v120, v116);
        }
        unint64_t v121 = *v112 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v116 = v121 | *(void *)v116 & 7;
        *((void *)v116 + 1) = v112;
        *(void *)(v121 + 8) = v116;
        *uint64_t v112 = *v112 & 7 | (unint64_t)v116;
        uint64_t v156 = 0;
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        LODWORD(v155) = 0x1000000;
        HIDWORD(v155) = v103;
        llvm::MachineInstr::addOperand(v116, v139, (const llvm::MachineOperand *)&v155);
        unsigned int v155 = (unsigned __int8 **)v139;
        uint64_t v156 = v116;
        unsigned int v122 = sub_1CD53B9D0(v104);
        sub_1CB89517C((llvm::MachineFunction **)&v155, v102, v122, v105);
        goto LABEL_223;
      }
      break;
    }
    uint64_t v66 = v144;
    unint64_t v65 = v145;
LABEL_257:
    if (v65 != v66) {
      free(v65);
    }
    uint64_t v61 = (void *)v143[1];
    if (v61 != v141) {
      continue;
    }
    break;
  }
LABEL_262:
  llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)a2, 0);
  v136 = __p;
  if (__p)
  {
    operator delete(__p);
    v136 = __p;
  }
  if (v150 != v149)
  {
    free(v150);
    v136 = __p;
  }
  return (v136 != v12) | v62 & 1u;
}

uint64_t llvm::EVT::getExtendedIntegerVT(llvm::EVT *this, llvm::LLVMContext *a2)
{
  return 0;
}

void llvm::EVT::getTypeForEVT(llvm::EVT *this, llvm::LLVMContext *a2)
{
  switch(*(unsigned char *)this)
  {
    case 7:
      uint64_t v8 = a2;
      uint64_t v9 = 128;
      goto LABEL_153;
    case 8:
      llvm::Type::getBFloatTy(a2, a2);
      return;
    case 0xB:
      llvm::Type::getDoubleTy(a2, a2);
      return;
    case 0xC:
      llvm::Type::getX86_FP80Ty(a2, a2);
      return;
    case 0xD:
      llvm::Type::getFP128Ty(a2, a2);
      return;
    case 0xE:
      llvm::Type::getPPC_FP128Ty(a2, a2);
      return;
    case 0xF:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_23;
    case 0x10:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_9;
    case 0x11:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_13;
    case 0x12:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_3;
    case 0x13:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_43;
    case 0x14:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_45;
    case 0x15:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_47;
    case 0x16:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_49;
    case 0x17:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_35;
    case 0x18:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_37;
    case 0x19:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1888);
      goto LABEL_64;
    case 0x1A:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_23;
    case 0x1B:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_9;
    case 0x1C:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_13;
    case 0x1D:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_3;
    case 0x1E:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_43;
    case 0x1F:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_45;
    case 0x20:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_47;
    case 0x21:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_49;
    case 0x22:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_35;
    case 0x23:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_37;
    case 0x24:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1912);
      goto LABEL_64;
    case 0x25:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_23;
    case 0x26:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_9;
    case 0x27:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_11;
    case 0x28:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_13;
    case 0x29:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_3;
    case 0x2A:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_43;
    case 0x2B:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_45;
    case 0x2C:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_47;
    case 0x2D:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_49;
    case 0x2E:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_35;
    case 0x2F:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1936);
      goto LABEL_37;
    case 0x30:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_23;
    case 0x31:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_9;
    case 0x32:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_11;
    case 0x33:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_13;
    case 0x34:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_52;
    case 0x35:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_54;
    case 0x36:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_56;
    case 0x37:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_3;
    case 0x38:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_43;
    case 0x39:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_45;
    case 0x3A:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_47;
    case 0x3B:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_49;
    case 0x3C:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_35;
    case 0x3D:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_37;
    case 0x3E:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_64;
    case 0x3F:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1960);
      goto LABEL_66;
    case 0x40:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_23;
    case 0x41:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_9;
    case 0x42:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_11;
    case 0x43:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_13;
    case 0x44:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_3;
    case 0x45:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_43;
    case 0x46:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_45;
    case 0x47:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_47;
    case 0x48:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_49;
    case 0x49:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1984);
      goto LABEL_35;
    case 0x4A:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getInt128Ty(a2, a2);
      goto LABEL_23;
    case 0x4B:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_23;
    case 0x4C:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_9;
    case 0x4D:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_11;
    case 0x4E:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_13;
    case 0x4F:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_3;
    case 0x50:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_43;
    case 0x51:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_45;
    case 0x52:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_47;
    case 0x53:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_49;
    case 0x54:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_35;
    case 0x55:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1624);
      goto LABEL_37;
    case 0x56:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_9;
    case 0x57:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_11;
    case 0x58:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_13;
    case 0x59:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_3;
    case 0x5A:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_43;
    case 0x5B:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_45;
    case 0x5C:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_47;
    case 0x5D:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_49;
    case 0x5E:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_23;
    case 0x5F:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_9;
    case 0x60:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_11;
    case 0x61:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_13;
    case 0x62:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
LABEL_52:
      uint64_t v3 = 5;
      goto LABEL_4;
    case 0x63:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
LABEL_54:
      uint64_t v3 = 6;
      goto LABEL_4;
    case 0x64:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
LABEL_56:
      uint64_t v3 = 7;
      goto LABEL_4;
    case 0x65:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_3;
    case 0x66:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_43;
    case 0x67:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_45;
    case 0x68:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_47;
    case 0x69:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_49;
    case 0x6A:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
      goto LABEL_35;
    case 0x6B:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
LABEL_37:
      uint64_t v3 = 512;
      goto LABEL_4;
    case 0x6C:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
LABEL_64:
      uint64_t v3 = 1024;
      goto LABEL_4;
    case 0x6D:
      Int128Ty = (llvm::FixedVectorType *)(*(void *)a2 + 1672);
LABEL_66:
      uint64_t v3 = 2048;
      goto LABEL_4;
    case 0x6E:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_23:
      uint64_t v3 = 1;
      goto LABEL_4;
    case 0x6F:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_9:
      uint64_t v3 = 2;
      goto LABEL_4;
    case 0x70:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_11:
      uint64_t v3 = 3;
      goto LABEL_4;
    case 0x71:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_13:
      uint64_t v3 = 4;
      goto LABEL_4;
    case 0x72:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_3:
      uint64_t v3 = 8;
      goto LABEL_4;
    case 0x73:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_43:
      uint64_t v3 = 16;
      goto LABEL_4;
    case 0x74:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_45:
      uint64_t v3 = 32;
      goto LABEL_4;
    case 0x75:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_47:
      uint64_t v3 = 64;
      goto LABEL_4;
    case 0x76:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_49:
      uint64_t v3 = 128;
      goto LABEL_4;
    case 0x77:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_35:
      uint64_t v3 = 256;
LABEL_4:
      llvm::FixedVectorType::get(Int128Ty, (llvm::Type *)v3);
      return;
    case 0x78:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1888);
      goto LABEL_128;
    case 0x79:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1888);
      goto LABEL_130;
    case 0x7A:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1888);
      goto LABEL_132;
    case 0x7B:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1888);
      goto LABEL_134;
    case 0x7C:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1888);
      goto LABEL_126;
    case 0x7D:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1888);
      goto LABEL_116;
    case 0x7E:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1888);
      goto LABEL_91;
    case 0x7F:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1912);
      goto LABEL_128;
    case 0x80:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1912);
      goto LABEL_130;
    case 0x81:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1912);
      goto LABEL_132;
    case 0x82:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1912);
      goto LABEL_134;
    case 0x83:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1912);
      goto LABEL_126;
    case 0x84:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1912);
      goto LABEL_116;
    case 0x85:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1912);
LABEL_91:
      uint64_t v5 = 64;
      goto LABEL_135;
    case 0x86:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1936);
      goto LABEL_128;
    case 0x87:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1936);
      goto LABEL_130;
    case 0x88:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1936);
      goto LABEL_132;
    case 0x89:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1936);
      goto LABEL_134;
    case 0x8A:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1936);
      goto LABEL_126;
    case 0x8B:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1936);
      goto LABEL_116;
    case 0x8C:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1960);
      goto LABEL_128;
    case 0x8D:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1960);
      goto LABEL_130;
    case 0x8E:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1960);
      goto LABEL_132;
    case 0x8F:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1960);
      goto LABEL_134;
    case 0x90:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1960);
      goto LABEL_126;
    case 0x91:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1960);
      goto LABEL_116;
    case 0x92:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1984);
      goto LABEL_128;
    case 0x93:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1984);
      goto LABEL_130;
    case 0x94:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1984);
      goto LABEL_132;
    case 0x95:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1984);
      goto LABEL_134;
    case 0x96:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1984);
      goto LABEL_126;
    case 0x97:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1984);
      goto LABEL_116;
    case 0x98:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1624);
      goto LABEL_128;
    case 0x99:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1624);
      goto LABEL_130;
    case 0x9A:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1624);
      goto LABEL_132;
    case 0x9B:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1624);
      goto LABEL_134;
    case 0x9C:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1624);
      goto LABEL_126;
    case 0x9D:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1624);
LABEL_116:
      uint64_t v5 = 32;
      goto LABEL_135;
    case 0x9E:
      BFloatTy = (uint64_t **)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_128;
    case 0x9F:
      BFloatTy = (uint64_t **)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_130;
    case 0xA0:
      BFloatTy = (uint64_t **)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_132;
    case 0xA1:
      BFloatTy = (uint64_t **)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_134;
    case 0xA2:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1672);
      goto LABEL_128;
    case 0xA3:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1672);
      goto LABEL_130;
    case 0xA4:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1672);
      goto LABEL_132;
    case 0xA5:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1672);
      goto LABEL_134;
    case 0xA6:
      BFloatTy = (uint64_t **)(*(void *)a2 + 1672);
LABEL_126:
      uint64_t v5 = 16;
      goto LABEL_135;
    case 0xA7:
      BFloatTy = (uint64_t **)llvm::Type::getDoubleTy(a2, a2);
LABEL_128:
      uint64_t v5 = 1;
      goto LABEL_135;
    case 0xA8:
      BFloatTy = (uint64_t **)llvm::Type::getDoubleTy(a2, a2);
LABEL_130:
      uint64_t v5 = 2;
      goto LABEL_135;
    case 0xA9:
      BFloatTy = (uint64_t **)llvm::Type::getDoubleTy(a2, a2);
LABEL_132:
      uint64_t v5 = 4;
      goto LABEL_135;
    case 0xAA:
      BFloatTy = (uint64_t **)llvm::Type::getDoubleTy(a2, a2);
LABEL_134:
      uint64_t v5 = 8;
LABEL_135:
      llvm::ScalableVectorType::get(BFloatTy, (llvm::Type *)v5);
      return;
    case 0xAB:
      llvm::Type::getX86_MMXTy(a2, a2);
      return;
    case 0xAD:
      llvm::Type::getVoidTy(a2, a2);
      return;
    case 0xAF:
      uint64_t v6 = (llvm::PointerType *)(*(void *)a2 + 1912);
      uint64_t v7 = 20;
      goto LABEL_146;
    case 0xB0:
      uint64_t v6 = (llvm::PointerType *)llvm::StructType::create(a2, a2);
      uint64_t v7 = 10;
LABEL_146:
      llvm::PointerType::get(v6, (llvm::Type *)v7);
      break;
    case 0xB1:
      llvm::Type::getX86_AMXTy(a2, a2);
      break;
    case 0xB2:
      uint64_t v8 = a2;
      uint64_t v9 = 512;
LABEL_153:
      llvm::IntegerType::get(v8, (llvm::LLVMContext *)v9);
      break;
    case 0xF9:
      llvm::Type::getMetadataTy(a2, a2);
      break;
    default:
      return;
  }
}

BOOL llvm::EVT::isExtendedInteger(llvm::EVT *this)
{
  uint64_t v1 = *((void *)this + 1);
  if ((*(_DWORD *)(v1 + 8) & 0xFE) == 0x12) {
    int v2 = *(unsigned __int8 *)(**(void **)(v1 + 16) + 8);
  }
  else {
    int v2 = *(_DWORD *)(v1 + 8);
  }
  return v2 == 13;
}

BOOL llvm::EVT::isExtendedVector(llvm::EVT *this)
{
  return (*(_DWORD *)(*((void *)this + 1) + 8) & 0xFE) == 18;
}

BOOL llvm::EVT::isExtended16BitVector(llvm::EVT *this)
{
  if ((*(_DWORD *)(*((void *)this + 1) + 8) & 0xFE) != 0x12) {
    return 0;
  }
  unint64_t ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if (v2 == 1)
  {
    uint64_t v4 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)16;
}

llvm::Type *llvm::EVT::getExtendedSizeInBits(llvm::EVT *this)
{
  double result = (llvm::Type *)*((void *)this + 1);
  if (result) {
    BOOL v2 = *((_DWORD *)result + 2) == 13;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    return (llvm::Type *)((unint64_t)*((unsigned int *)result + 2) >> 8);
  }
  if (result) {
    BOOL v3 = (*((_DWORD *)result + 2) & 0xFE) == 18;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return (llvm::Type *)llvm::Type::getPrimitiveSizeInBits(result);
  }
  return result;
}

BOOL llvm::EVT::isExtended32BitVector(llvm::EVT *this)
{
  if ((*(_DWORD *)(*((void *)this + 1) + 8) & 0xFE) != 0x12) {
    return 0;
  }
  unint64_t ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if (v2 == 1)
  {
    uint64_t v4 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)32;
}

BOOL llvm::EVT::isExtended64BitVector(llvm::EVT *this)
{
  if ((*(_DWORD *)(*((void *)this + 1) + 8) & 0xFE) != 0x12) {
    return 0;
  }
  unint64_t ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if (v2 == 1)
  {
    uint64_t v4 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)64;
}

BOOL llvm::EVT::isExtended128BitVector(llvm::EVT *this)
{
  if ((*(_DWORD *)(*((void *)this + 1) + 8) & 0xFE) != 0x12) {
    return 0;
  }
  unint64_t ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if (v2 == 1)
  {
    uint64_t v4 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)128;
}

BOOL llvm::EVT::isExtended256BitVector(llvm::EVT *this)
{
  if ((*(_DWORD *)(*((void *)this + 1) + 8) & 0xFE) != 0x12) {
    return 0;
  }
  unint64_t ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if (v2 == 1)
  {
    uint64_t v4 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)256;
}

BOOL llvm::EVT::isExtended512BitVector(llvm::EVT *this)
{
  if ((*(_DWORD *)(*((void *)this + 1) + 8) & 0xFE) != 0x12) {
    return 0;
  }
  unint64_t ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if (v2 == 1)
  {
    uint64_t v4 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)512;
}

BOOL llvm::EVT::isExtended1024BitVector(llvm::EVT *this)
{
  if ((*(_DWORD *)(*((void *)this + 1) + 8) & 0xFE) != 0x12) {
    return 0;
  }
  unint64_t ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if (v2 == 1)
  {
    uint64_t v4 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)1024;
}

BOOL llvm::EVT::isExtended2048BitVector(llvm::EVT *this)
{
  if ((*(_DWORD *)(*((void *)this + 1) + 8) & 0xFE) != 0x12) {
    return 0;
  }
  unint64_t ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if (v2 == 1)
  {
    uint64_t v4 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)2048;
}

BOOL llvm::EVT::isExtendedScalableVector(llvm::EVT *this)
{
  return *(unsigned char *)(*((void *)this + 1) + 8) == 19;
}

unint64_t llvm::EVT::getEVT(llvm::EVT *this, llvm::Type *a2, BOOL a3)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4 == 13)
  {
    uint64_t v5 = (llvm::LLVMContext *)(v4 >> 8);
    if (v4 >> 8 <= 0x1F)
    {
      switch(v5)
      {
        case 1:
          unint64_t v6 = 0;
          LOBYTE(v7) = 2;
          return v6 | v7;
        case 0x10:
          unint64_t v6 = 0;
          LOBYTE(v7) = 4;
          return v6 | v7;
        case 8:
          unint64_t v6 = 0;
          LOBYTE(v7) = 3;
          return v6 | v7;
      }
    }
    else
    {
      switch(v5)
      {
        case 0x20:
          unint64_t v6 = 0;
          LOBYTE(v7) = 5;
          return v6 | v7;
        case 0x40:
          unint64_t v6 = 0;
          LOBYTE(v7) = 6;
          return v6 | v7;
        case 0x80:
          unint64_t v6 = 0;
          LOBYTE(v7) = 7;
          return v6 | v7;
      }
    }
    llvm::IntegerType::get(*(llvm::IntegerType **)this, v5);
    unint64_t v6 = 0;
    LOBYTE(v7) = 0;
    return v6 | v7;
  }
  if (v4 - 18 < 2)
  {
    uint64_t v9 = *(llvm::LLVMContext **)this;
    uint64_t EVT = llvm::EVT::getEVT(*((llvm::EVT **)this + 3), 0, a3);
    unint64_t v7 = sub_1CB882C1C(v9, EVT, v11, (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((unsigned char *)this + 8) == 19) << 32)));
    unint64_t v6 = v7 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(v7) = llvm::MVT::getVT((uint64_t)this, (uint64_t)a2, a3);
    unint64_t v6 = 0;
  }
  return v6 | v7;
}

uint64_t llvm::MVT::getVT(uint64_t a1, uint64_t a2, BOOL a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 2) {
    return 10;
  }
  uint64_t result = 173;
  switch((char)v3)
  {
    case 0:
      uint64_t result = 9;
      break;
    case 1:
      uint64_t result = 8;
      break;
    case 3:
      uint64_t result = 11;
      break;
    case 4:
      uint64_t result = 12;
      break;
    case 5:
      uint64_t result = 13;
      break;
    case 6:
      uint64_t result = 14;
      break;
    case 7:
      return result;
    case 10:
      uint64_t result = 171;
      break;
    case 11:
      uint64_t result = 177;
      break;
    case 13:
      unsigned int v6 = v3 >> 8;
      if (v3 >> 8 > 0x1F)
      {
        unsigned int v7 = 5;
        if (v6 == 128) {
          int v14 = 7;
        }
        else {
          int v14 = 0;
        }
        if (v6 == 64) {
          unsigned int v9 = 6;
        }
        else {
          unsigned int v9 = v14;
        }
        BOOL v10 = v6 == 32;
      }
      else
      {
        unsigned int v7 = 2;
        if (v6 == 16) {
          int v8 = 4;
        }
        else {
          int v8 = 0;
        }
        if (v6 == 8) {
          unsigned int v9 = 3;
        }
        else {
          unsigned int v9 = v8;
        }
        BOOL v10 = v6 == 1;
      }
      if (v10) {
        uint64_t result = v7;
      }
      else {
        uint64_t result = v9;
      }
      break;
    case 15:
      uint64_t result = 254;
      break;
    case 18:
    case 19:
      uint64_t v11 = a1;
      char VT = llvm::MVT::getVT(*(llvm::MVT **)(a1 + 24), 0, a3);
      int v13 = *(_DWORD *)(v11 + 32);
      if (*(unsigned char *)(v11 + 8) == 19)
      {
        uint64_t result = sub_1CB882CA4(VT, v13);
      }
      else
      {
        uint64_t result = sub_1CB883124(VT, v13);
      }
      break;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

llvm::VLIWResourceModel *llvm::VLIWResourceModel::VLIWResourceModel(llvm::VLIWResourceModel *this, const llvm::TargetSubtargetInfo *a2, const llvm::TargetSchedModel *a3)
{
  *(void *)this = &unk_1F2615A80;
  *((void *)this + 1) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)a2 + 104))(a2);
  *((void *)this + 3) = a3;
  *((void *)this + 4) = (char *)this + 48;
  *((void *)this + 5) = 0x600000000;
  *((_DWORD *)this + 24) = 0;
  uint64_t v6 = (*(uint64_t (**)(llvm::VLIWResourceModel *, const llvm::TargetSubtargetInfo *))(*(void *)this + 48))(this, a2);
  *((void *)this + 2) = v6;
  if (*((_DWORD *)this + 11) < **((_DWORD **)this + 3)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_DWORD *)this + 10) = 0;
  *(void *)(v6 + 40) = 1;
  uint64_t v7 = *(void *)(v6 + 24);
  if (v7) {
    sub_1CD511D98(v7);
  }
  return this;
}

void llvm::VLIWResourceModel::reset(llvm::VLIWResourceModel *this)
{
  *((_DWORD *)this + 10) = 0;
  uint64_t v1 = *((void *)this + 2);
  *(void *)(v1 + 40) = 1;
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2) {
    sub_1CD511D98(v2);
  }
}

void llvm::VLIWResourceModel::~VLIWResourceModel(llvm::VLIWResourceModel *this)
{
  *(void *)this = &unk_1F2615A80;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    sub_1CD511CE4(v2 + 8);
    MEMORY[0x1D25D9CE0](v2, 0x1070C405C112D20);
  }
  unsigned int v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  uint64_t vars8;

  llvm::VLIWResourceModel::~VLIWResourceModel(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::VLIWResourceModel::hasDependence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 120);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 112);
  uint64_t v5 = 16 * v3;
  while (1)
  {
    BOOL v6 = (*(void *)v4 & 6) == 0 && (*(void *)v4 & 0xFFFFFFFFFFFFFFF8) == a3;
    if (v6 && *(_DWORD *)(v4 + 12)) {
      break;
    }
    v4 += 16;
    v5 -= 16;
    if (!v5) {
      return 0;
    }
  }
  return 1;
}

uint64_t llvm::VLIWResourceModel::isResourceAvailable(llvm::VLIWResourceModel *this, llvm::SUnit *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = (unsigned __int16 **)*((void *)a2 + 1);
  if (!v4) {
    return 0;
  }
  unsigned int v7 = *v4[2];
  BOOL v8 = v7 > 0x13;
  int v9 = (1 << v7) & 0xC0F06;
  BOOL v10 = v8 || v9 == 0;
  if (!v10
    || (uint64_t result = llvm::DFAPacketizer::canReserveResources(*((llvm::DFAPacketizer **)this + 2), (llvm::MachineInstr *)v4),
        result))
  {
    uint64_t v11 = *((unsigned int *)this + 10);
    if (a3)
    {
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v11 - 8;
        do
        {
          int v14 = (*(uint64_t (**)(llvm::VLIWResourceModel *, void, llvm::SUnit *))(*(void *)this + 24))(this, *(void *)(*((void *)this + 4) + v12), a2);
          if (v14) {
            break;
          }
          BOOL v10 = v13 == v12;
          v12 += 8;
        }
        while (!v10);
        return v14 ^ 1u;
      }
    }
    else if (v11)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 8 * v11 - 8;
      do
      {
        int v14 = (*(uint64_t (**)(llvm::VLIWResourceModel *, llvm::SUnit *, void))(*(void *)this + 24))(this, a2, *(void *)(*((void *)this + 4) + v16));
        if (v14) {
          break;
        }
        BOOL v10 = v17 == v16;
        v16 += 8;
      }
      while (!v10);
      return v14 ^ 1u;
    }
    return 1;
  }
  return result;
}

uint64_t llvm::VLIWResourceModel::reserveResources(llvm::VLIWResourceModel *this, llvm::SUnit *a2)
{
  uint64_t v3 = *(void *)this;
  if (a2)
  {
    if ((*(unsigned int (**)(llvm::VLIWResourceModel *))(v3 + 32))(this)
      && *((_DWORD *)this + 10) < **((_DWORD **)this + 3))
    {
      uint64_t v5 = 0;
    }
    else
    {
      (*(void (**)(llvm::VLIWResourceModel *))(*(void *)this + 16))(this);
      ++*((_DWORD *)this + 24);
      uint64_t v5 = 1;
    }
    BOOL v6 = (unsigned __int16 **)*((void *)a2 + 1);
    unsigned int v7 = *v6[2];
    BOOL v8 = v7 > 0x13;
    int v9 = (1 << v7) & 0xC0F9E;
    if (v8 || v9 == 0) {
      llvm::DFAPacketizer::reserveResources(*((void *)this + 2), (llvm::MachineInstr *)v6);
    }
    uint64_t v12 = (char *)this + 40;
    unsigned int v11 = *((_DWORD *)this + 10);
    if (v11 >= *((_DWORD *)this + 11)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 4) + 8 * v11) = a2;
  }
  else
  {
    (*(void (**)(llvm::VLIWResourceModel *))(v3 + 16))(this);
    uint64_t v5 = 0;
    uint64_t v12 = (char *)this + 96;
  }
  ++*(_DWORD *)v12;
  return v5;
}

uint64_t llvm::VLIWResourceModel::createPacketizer(llvm::VLIWResourceModel *this, const llvm::TargetSubtargetInfo *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)a2 + 104))(a2)
                           + 1056);

  return v2();
}

void llvm::VLIWMachineScheduler::schedule(uint64_t **this)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  llvm::ScheduleDAGMILive::buildDAGWithRegPressure((llvm::ScheduleDAGMILive *)this);
  llvm::ScheduleDAGTopologicalSort::InitDAGTopologicalSorting(this + 265);
  uint64_t v2 = this[332];
  uint64_t v3 = this[333];
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v4 + 24))(v4, this);
  }
  uint64_t v12 = v14;
  uint64_t v13 = 0x800000000;
  int v9 = v11;
  uint64_t v10 = 0x800000000;
  double RootsAndBiasEdges = llvm::ScheduleDAGMI::findRootsAndBiasEdges(this, (uint64_t)&v12, (uint64_t)&v9);
  (*(void (**)(uint64_t *, uint64_t **, double))(*this[331] + 64))(this[331], this, RootsAndBiasEdges);
  llvm::ScheduleDAGMI::initQueues((uint64_t)this, (uint64_t *)v12, v13, (uint64_t)v9, v10);
  if (*((unsigned char *)this + 3120)) {
    this[528] = this[335];
  }
  BOOL v8 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, BOOL *))(*this[331] + 96))(this[331], &v8);
  if (v6)
  {
    unsigned int v7 = (llvm::SUnit *)v6;
    do
    {
      llvm::ScheduleDAGMILive::scheduleMI((llvm::ScheduleDAGMILive *)this, v7, v8);
      (*(void (**)(uint64_t *, llvm::SUnit *, BOOL))(*this[331] + 112))(this[331], v7, v8);
      llvm::ScheduleDAGMI::updateQueues((uint64_t)this, (uint64_t)v7, v8);
      unsigned int v7 = (llvm::SUnit *)(*(uint64_t (**)(uint64_t *, BOOL *))(*this[331] + 96))(this[331], &v8);
    }
    while (v7);
  }
  llvm::ScheduleDAGMI::placeDebugValues((uint64_t)this);
  if (v9 != v11) {
    free(v9);
  }
  if (v12 != v14) {
    free(v12);
  }
}

void llvm::ConvergingVLIWScheduler::initialize(llvm::ConvergingVLIWScheduler *this, llvm::ScheduleDAGMI *a2)
{
  *((void *)this + 1) = a2;
  *((void *)this + 2) = (char *)a2 + 632;
  sub_1CC4C3DE4((uint64_t)this + 24, a2, (_DWORD *)a2 + 158);
  sub_1CC4C3DE4((uint64_t)this + 200, *((void **)this + 1), *((_DWORD **)this + 2));
  uint64_t v3 = *((void *)this + 1);
  if (byte_1EBD06308)
  {
    if (*(void *)(v3 + 800)) {
      uint64_t v4 = v3 + 704;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(*(void *)(v3 + 32) + 16);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
  uint64_t v7 = *((void *)this + 20);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 42);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 20) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 872))(v6, v4, *((void *)this + 1));
  *((void *)this + 42) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 872))(v6, v4, *((void *)this + 1));
  uint64_t v9 = *((void *)this + 21);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 43);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 21) = (*(uint64_t (**)(llvm::ConvergingVLIWScheduler *, uint64_t, uint64_t))(*(void *)this + 136))(this, v5, *((void *)this + 1) + 632);
  *((void *)this + 43) = (*(uint64_t (**)(llvm::ConvergingVLIWScheduler *, uint64_t, uint64_t))(*(void *)this + 136))(this, v5, *((void *)this + 1) + 632);
  uint64_t v11 = *((void *)this + 1);
  uint64_t v12 = *(void *)(v11 + 3128);
  uint64_t v13 = *(void *)(v11 + 3136) - v12;
  unint64_t v14 = v13 >> 2;
  if (*((void *)this + 49) < (unint64_t)(v13 >> 2))
  {
    *((void *)this + 48) = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v15 = *((void *)this + 47);
  unint64_t v16 = *((void *)this + 48);
  if (v16 >= v14) {
    size_t v17 = v13 >> 2;
  }
  else {
    size_t v17 = *((void *)this + 48);
  }
  if (v17) {
    bzero(*((void **)this + 47), v17);
  }
  if (v14 > v16) {
    bzero((void *)(v15 + v16), v14 - v16);
  }
  *((void *)this + 48) = v14;
  if ((v13 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v18 = 0;
    uint64_t v19 = ((unint64_t)v13 >> 2);
    do
    {
      uint64_t v20 = *(void *)(*((void *)this + 1) + 2712);
      unsigned int v21 = *(_DWORD *)(*(void *)(v20 + 216) + 4 * v18);
      if (!v21)
      {
        unsigned int v21 = llvm::RegisterClassInfo::computePSetLimit(*(llvm::RegisterClassInfo **)(*((void *)this + 1) + 2712), v18);
        *(_DWORD *)(*(void *)(v20 + 216) + 4 * v18) = v21;
        uint64_t v12 = *(void *)(v11 + 3128);
        uint64_t v15 = *((void *)this + 47);
      }
      *(unsigned char *)(v15 + v18) = (float)(*(float *)&dword_1EBCD7C60 * (float)v21) < (float)*(unsigned int *)(v12 + 4 * v18);
      ++v18;
    }
    while (v19 != v18);
  }
}

void sub_1CC4C3DE4(uint64_t a1, void *a2, _DWORD *a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 152) = 0;
  uint64_t v4 = a2[115] + 48;
  unsigned int v5 = -1;
  uint64_t v6 = v4;
  uint64_t v7 = v4;
  do
  {
    uint64_t v7 = *(void *)(v7 + 8);
    ++v5;
  }
  while (v7 != v4);
  unsigned int v8 = v5 / *a3;
  *(_DWORD *)(a1 + 160) = v8;
  int v9 = -1;
  do
  {
    uint64_t v6 = *(void *)(v6 + 8);
    ++v9;
  }
  while (v6 != v4);
  if (v9 > 49)
  {
    uint64_t v11 = (_DWORD *)a2[6];
    uint64_t v12 = (_DWORD *)a2[7];
    if (v11 == v12)
    {
      unsigned int v13 = 0;
    }
    else
    {
      unsigned int v13 = 0;
      unint64_t v14 = v11 + 60;
      do
      {
        uint64_t v15 = (llvm::SUnit *)(v14 - 60);
        if (*(_DWORD *)(a1 + 16) == 1)
        {
          if ((*(unsigned char *)(v14 - 1) & 2) == 0) {
            llvm::SUnit::ComputeHeight(v15);
          }
          unint64_t v16 = v11 + 61;
        }
        else
        {
          unint64_t v16 = v14;
          if ((*(unsigned char *)(v14 - 1) & 1) == 0)
          {
            llvm::SUnit::ComputeDepth(v15);
            unint64_t v16 = v14;
          }
        }
        unsigned int v17 = *v16;
        if (v13 <= v17) {
          unsigned int v13 = v17;
        }
        v11 += 68;
        uint64_t v18 = v14 + 8;
        v14 += 68;
      }
      while (v18 != v12);
      unsigned int v8 = *(_DWORD *)(a1 + 160);
    }
    if (v8 <= v13) {
      unsigned int v8 = v13;
    }
    unsigned int v10 = v8 + 1;
  }
  else
  {
    unsigned int v10 = v8 >> 1;
  }
  *(_DWORD *)(a1 + 160) = v10;
}

void llvm::ConvergingVLIWScheduler::createVLIWResourceModel(llvm::ConvergingVLIWScheduler *this, const llvm::TargetSubtargetInfo *a2, const llvm::TargetSchedModel *a3)
{
}

void llvm::ConvergingVLIWScheduler::releaseTopNode(llvm::ConvergingVLIWScheduler *this, llvm::SUnit *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 10);
  if (v2)
  {
    uint64_t v3 = *((void *)a2 + 4);
    uint64_t v4 = v3 + 16 * v2;
    unsigned int v5 = *((_DWORD *)a2 + 62);
    do
    {
      unsigned int v6 = *(_DWORD *)(v3 + 12) + *(_DWORD *)((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) + 248);
      if (v5 < v6)
      {
        *((_DWORD *)a2 + 62) = v6;
        unsigned int v5 = v6;
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  if ((*((_WORD *)a2 + 114) & 0x400) == 0) {
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releaseNode((llvm::ConvergingVLIWScheduler *)((char *)this + 24), a2, *((_DWORD *)a2 + 62));
  }
}

void llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releaseNode(llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *this, llvm::SUnit *a2, unsigned int a3)
{
  if (*((_DWORD *)this + 41) > a3) {
    *((_DWORD *)this + 41) = a3;
  }
  if (*((_DWORD *)this + 38) >= a3
    && !llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::checkHazard((uint64_t)this, (uint64_t)a2))
  {
    uint64_t v15 = (void *)*((void *)this + 7);
    unint64_t v14 = *((void *)this + 8);
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v20 = (void *)*((void *)this + 6);
      uint64_t v21 = v15 - v20;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61) {
        goto LABEL_42;
      }
      uint64_t v23 = v14 - (void)v20;
      if (v23 >> 2 > v22) {
        unint64_t v22 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 61) {
          goto LABEL_43;
        }
        int v25 = (char *)operator new(8 * v24);
      }
      else
      {
        int v25 = 0;
      }
      uint64_t v26 = &v25[8 * v21];
      *(void *)uint64_t v26 = a2;
      unint64_t v16 = v26 + 8;
      if (v15 != v20)
      {
        do
        {
          uint64_t v27 = *--v15;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        while (v15 != v20);
        uint64_t v15 = (void *)*((void *)this + 6);
      }
      *((void *)this + 6) = v26;
      *((void *)this + 7) = v16;
      *((void *)this + 8) = &v25[8 * v24];
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *uint64_t v15 = a2;
      unint64_t v16 = v15 + 1;
    }
    uint64_t v19 = (char *)this + 16;
    *((void *)this + 7) = v16;
    goto LABEL_41;
  }
  unsigned int v6 = (void *)*((void *)this + 14);
  unint64_t v5 = *((void *)this + 15);
  if ((unint64_t)v6 >= v5)
  {
    unsigned int v8 = (void *)*((void *)this + 13);
    uint64_t v9 = v6 - v8;
    unint64_t v10 = v9 + 1;
    if (!((unint64_t)(v9 + 1) >> 61))
    {
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (!v12)
      {
        unsigned int v13 = 0;
        goto LABEL_19;
      }
      if (!(v12 >> 61))
      {
        unsigned int v13 = (char *)operator new(8 * v12);
LABEL_19:
        unsigned int v17 = &v13[8 * v9];
        *(void *)unsigned int v17 = a2;
        uint64_t v7 = v17 + 8;
        if (v6 != v8)
        {
          do
          {
            uint64_t v18 = *--v6;
            *((void *)v17 - 1) = v18;
            v17 -= 8;
          }
          while (v6 != v8);
          unsigned int v6 = (void *)*((void *)this + 13);
        }
        *((void *)this + 13) = v17;
        *((void *)this + 14) = v7;
        *((void *)this + 15) = &v13[8 * v12];
        if (v6) {
          operator delete(v6);
        }
        goto LABEL_24;
      }
LABEL_43:
      sub_1CB833614();
    }
LABEL_42:
    abort();
  }
  *unsigned int v6 = a2;
  uint64_t v7 = v6 + 1;
LABEL_24:
  uint64_t v19 = (char *)this + 72;
  *((void *)this + 14) = v7;
LABEL_41:
  *((_DWORD *)a2 + 49) |= *(_DWORD *)v19;
}

void llvm::ConvergingVLIWScheduler::releaseBottomNode(llvm::ConvergingVLIWScheduler *this, llvm::SUnit *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 30);
  if (v2)
  {
    uint64_t v3 = *((void *)a2 + 14);
    uint64_t v4 = v3 + 16 * v2;
    unsigned int v5 = *((_DWORD *)a2 + 63);
    do
    {
      unsigned int v6 = *(_DWORD *)(v3 + 12) + *(_DWORD *)((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) + 252);
      if (v5 < v6)
      {
        *((_DWORD *)a2 + 63) = v6;
        unsigned int v5 = v6;
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  if ((*((_WORD *)a2 + 114) & 0x400) == 0) {
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releaseNode((llvm::ConvergingVLIWScheduler *)((char *)this + 200), a2, *((_DWORD *)a2 + 63));
  }
}

void llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::~VLIWSchedBoundary(llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *this)
{
  uint64_t v2 = *((void *)this + 18);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  unsigned int v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

BOOL llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::checkHazard(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 136);
  if (v3[2]) {
    return (*(unsigned int (**)(_DWORD *, uint64_t, void))(*(void *)v3 + 24))(v3, a2, 0) != 0;
  }
  else {
    return *(_DWORD *)(a1 + 156)
  }
         + llvm::TargetSchedModel::getNumMicroOps(*(void *)(a1 + 8), *(void *)(a2 + 8), 0) > **(_DWORD **)(a1 + 8);
}

uint64_t llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpCycle(uint64_t this)
{
  uint64_t v1 = this;
  unsigned int v2 = **(_DWORD **)(this + 8);
  int v3 = *(_DWORD *)(this + 152);
  unsigned int v4 = *(_DWORD *)(this + 156);
  BOOL v5 = v4 >= v2;
  unsigned int v6 = v4 - v2;
  if (!v5) {
    unsigned int v6 = 0;
  }
  *(_DWORD *)(this + 156) = v6;
  if ((v3 + 1) > *(_DWORD *)(this + 164)) {
    int v7 = v3 + 1;
  }
  else {
    int v7 = *(_DWORD *)(this + 164);
  }
  if (*(_DWORD *)(*(void *)(this + 136) + 8))
  {
    while (v3 != v7)
    {
      uint64_t v8 = **(void **)(v1 + 136);
      if (*(_DWORD *)(v1 + 16) == 1) {
        this = (*(uint64_t (**)(void))(v8 + 80))();
      }
      else {
        this = (*(uint64_t (**)(void))(v8 + 88))();
      }
      int v3 = *(_DWORD *)(v1 + 152) + 1;
      *(_DWORD *)(v1 + 152) = v3;
    }
  }
  else
  {
    *(_DWORD *)(this + 152) = v7;
  }
  *(unsigned char *)(v1 + 128) = 1;
  return this;
}

uint64_t llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpNode(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD **)(a1 + 136);
  if (v4[2])
  {
    if (*(_DWORD *)(a1 + 16) != 1 && (*(_WORD *)(a2 + 228) & 2) != 0)
    {
      (*(void (**)(_DWORD *))(*(void *)v4 + 32))(v4);
      unsigned int v4 = *(_DWORD **)(a1 + 136);
    }
    (*(void (**)(_DWORD *, uint64_t))(*(void *)v4 + 40))(v4, a2);
  }
  int v5 = (*(uint64_t (**)(void, uint64_t, BOOL))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), a2, *(_DWORD *)(a1 + 16) == 1);
  uint64_t result = llvm::TargetSchedModel::getNumMicroOps(*(void *)(a1 + 8), *(void *)(a2 + 8), 0);
  *(_DWORD *)(a1 + 156) += result;
  if (v5)
  {
    return llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpCycle(a1);
  }
  return result;
}

void llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releasePending(llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *this)
{
  if (*((void *)this + 6) == *((void *)this + 7)) {
    *((_DWORD *)this + 41) = -1;
  }
  uint64_t v2 = (*((void *)this + 14) - *((void *)this + 13)) >> 3;
  if (v2)
  {
    unsigned int v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*((void *)this + 13) + 8 * v3);
      if (*((_DWORD *)this + 4) == 1) {
        uint64_t v5 = 248;
      }
      else {
        uint64_t v5 = 252;
      }
      unsigned int v6 = *(_DWORD *)(v4 + v5);
      if (v6 < *((_DWORD *)this + 41)) {
        *((_DWORD *)this + 41) = v6;
      }
      if (v6 <= *((_DWORD *)this + 38)
        && !llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::checkHazard((uint64_t)this, v4))
      {
        uint64_t v8 = (uint64_t *)*((void *)this + 7);
        unint64_t v7 = *((void *)this + 8);
        if ((unint64_t)v8 >= v7)
        {
          unint64_t v10 = (void *)*((void *)this + 6);
          uint64_t v11 = v8 - v10;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            abort();
          }
          uint64_t v13 = v7 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            if (v14 >> 61) {
              sub_1CB833614();
            }
            uint64_t v15 = (char *)operator new(8 * v14);
          }
          else
          {
            uint64_t v15 = 0;
          }
          unint64_t v16 = (uint64_t *)&v15[8 * v11];
          *unint64_t v16 = v4;
          uint64_t v9 = v16 + 1;
          if (v8 != v10)
          {
            do
            {
              uint64_t v17 = *--v8;
              *--unint64_t v16 = v17;
            }
            while (v8 != v10);
            uint64_t v8 = (uint64_t *)*((void *)this + 6);
          }
          *((void *)this + 6) = v16;
          *((void *)this + 7) = v9;
          *((void *)this + 8) = &v15[8 * v14];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          uint64_t *v8 = v4;
          uint64_t v9 = v8 + 1;
        }
        *((void *)this + 7) = v9;
        *(_DWORD *)(v4 + 196) |= *((_DWORD *)this + 4);
        uint64_t v18 = *((void *)this + 13);
        uint64_t v19 = *(void *)(v18 + 8 * v3);
        int v20 = *(_DWORD *)(v19 + 196) & ~*((_DWORD *)this + 18);
        *(void *)(v18 + 8 * v3) = *(void *)(*((void *)this + 14) - 8);
        *(_DWORD *)(v19 + 196) = v20;
        *((void *)this + 14) -= 8;
        --v3;
        LODWORD(v2) = v2 - 1;
      }
      ++v3;
    }
    while (v3 != v2);
  }
  *((unsigned char *)this + 128) = 0;
}

void *llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::removeReady(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & *(_DWORD *)(a2 + 196)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t result = (void *)(a1 + 56);
    uint64_t v4 = v5;
    uint64_t v6 = *(result - 1);
    if (v6 != v5)
    {
      while (*(void *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v4)
        {
          uint64_t v6 = v4;
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 112);
    uint64_t v6 = *(void *)(a1 + 104);
    if (v6 != v4)
    {
      while (*(void *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v4)
        {
          uint64_t v6 = *(void *)(a1 + 112);
          break;
        }
      }
    }
    int v2 = *(_DWORD *)(a1 + 72);
    uint64_t result = (void *)(a1 + 112);
  }
  *(_DWORD *)(*(void *)v6 + 196) &= ~v2;
  *(void *)uint64_t v6 = *(void *)(v4 - 8);
  *result -= 8;
  return result;
}

uint64_t llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice(char **this)
{
  if (*((unsigned char *)this + 128)) {
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releasePending((llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *)this);
  }
  while (1)
  {
    int v2 = this[6];
    unsigned int v3 = this[7];
    if (v2 == v3)
    {
      int v6 = *((_DWORD *)this + 4);
      goto LABEL_13;
    }
    int64_t v4 = v3 - v2;
    if ((v4 & 0x7FFFFFFF8) != 8 || ((this[14] - this[13]) & 0x7FFFFFFF8) == 0) {
      goto LABEL_14;
    }
    int v5 = (*(uint64_t (**)(char *, void, BOOL))(*(void *)this[18] + 32))(this[18], *(void *)v2, *((_DWORD *)this + 4) == 1);
    int v6 = *((_DWORD *)this + 4);
    if (v5)
    {
      int v2 = this[6];
      uint64_t v7 = v6 == 1 ? 216 : 220;
      if (!*(_DWORD *)(*(void *)v2 + v7)) {
        break;
      }
    }
LABEL_13:
    (*(void (**)(char *, void, BOOL))(*(void *)this[18] + 40))(this[18], 0, v6 == 1);
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpCycle((uint64_t)this);
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releasePending((llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *)this);
  }
  int64_t v4 = this[7] - v2;
LABEL_14:
  if ((v4 & 0x7FFFFFFF8) == 8) {
    return *(void *)v2;
  }
  else {
    return 0;
  }
}

uint64_t llvm::ConvergingVLIWScheduler::pressureChange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  unint64_t v4 = *(void *)(*(void *)(a1 + 8) + 3104) + ((unint64_t)*(unsigned int *)(a2 + 192) << 6);
  while (!*(_WORD *)(v4 + v3) || !*(unsigned char *)(*(void *)(a1 + 376) + *(unsigned __int16 *)(v4 + v3) - 1))
  {
    v3 += 4;
    if (v3 == 64) {
      return 0;
    }
  }
  unsigned int v6 = *(__int16 *)(v4 + v3 + 2);
  if (a3) {
    return v6;
  }
  else {
    return -v6;
  }
}

uint64_t llvm::ConvergingVLIWScheduler::SchedulingCost(uint64_t a1, int *a2, llvm::SUnit *this, uint64_t a4, __int16 *a5)
{
  if (!this) {
    return 1;
  }
  if ((*((_WORD *)this + 114) & 0x400) != 0) {
    return 1;
  }
  if ((*((_WORD *)this + 114) & 0x800) != 0) {
    int v9 = 201;
  }
  else {
    int v9 = 1;
  }
  if (*a2 == 1)
  {
    if (sub_1CC4C4ED8((_DWORD *)(a1 + 24), this))
    {
      if ((*((unsigned char *)this + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight(this);
      }
      v9 += 10 * *((_DWORD *)this + 61);
    }
    int v10 = (*(uint64_t (**)(void, llvm::SUnit *, uint64_t))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168), this, 1);
    BOOL v11 = v10 == 0;
    if (v10) {
      int v12 = -125;
    }
    else {
      int v12 = 0;
    }
    if (v10) {
      v9 += 125;
    }
  }
  else
  {
    if (sub_1CC4C4ED8((_DWORD *)(a1 + 200), this))
    {
      if ((*((unsigned char *)this + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(this);
      }
      v9 += 10 * *((_DWORD *)this + 60);
    }
    if ((*(unsigned int (**)(void, llvm::SUnit *, void))(**(void **)(a1 + 344) + 32))(*(void *)(a1 + 344), this, 0))
    {
      BOOL v11 = 0;
      v9 += 125;
      int v12 = -125;
    }
    else
    {
      int v12 = 0;
      BOOL v11 = 1;
    }
  }
  if (*a2 == 1)
  {
    if (sub_1CC4C4ED8((_DWORD *)(a1 + 24), this))
    {
      uint64_t v14 = *((unsigned int *)this + 30);
      if (v14)
      {
        int v15 = 0;
        unint64_t v16 = (void *)*((void *)this + 14);
        uint64_t v17 = &v16[2 * v14];
        while (1)
        {
          unint64_t v18 = *v16 & 0xFFFFFFFFFFFFFFF8;
          if (!*(_DWORD *)(v18 + 208)) {
            goto LABEL_36;
          }
          uint64_t v19 = *(unsigned int *)(v18 + 40);
          if (v19) {
            break;
          }
LABEL_35:
          int v23 = 1;
LABEL_37:
          v15 += v23;
          v16 += 2;
          if (v16 == v17) {
            goto LABEL_53;
          }
        }
        int v20 = *(void **)(v18 + 32);
        uint64_t v21 = 16 * v19;
        while (1)
        {
          unint64_t v22 = (llvm::SUnit *)(*v20 & 0xFFFFFFFFFFFFFFF8);
          if ((*((_WORD *)v22 + 114) & 0x400) == 0 && v22 != this) {
            break;
          }
          v20 += 2;
          v21 -= 16;
          if (!v21) {
            goto LABEL_35;
          }
        }
LABEL_36:
        int v23 = 0;
        goto LABEL_37;
      }
    }
    goto LABEL_52;
  }
  if (sub_1CC4C4ED8((_DWORD *)(a1 + 200), this))
  {
    uint64_t v24 = *((unsigned int *)this + 10);
    if (v24)
    {
      int v15 = 0;
      int v25 = (void *)*((void *)this + 4);
      uint64_t v26 = &v25[2 * v24];
      while (1)
      {
        unint64_t v27 = *v25 & 0xFFFFFFFFFFFFFFF8;
        if (!*(_DWORD *)(v27 + 212)) {
          goto LABEL_49;
        }
        uint64_t v28 = *(unsigned int *)(v27 + 120);
        if (v28) {
          break;
        }
LABEL_48:
        int v32 = 1;
LABEL_50:
        v15 += v32;
        v25 += 2;
        if (v25 == v26) {
          goto LABEL_53;
        }
      }
      unint64_t v29 = *(void **)(v27 + 112);
      uint64_t v30 = 16 * v28;
      while (1)
      {
        unint64_t v31 = (llvm::SUnit *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        if ((*((_WORD *)v31 + 114) & 0x400) == 0 && v31 != this) {
          break;
        }
        v29 += 2;
        v30 -= 16;
        if (!v30) {
          goto LABEL_48;
        }
      }
LABEL_49:
      int v32 = 0;
      goto LABEL_50;
    }
  }
LABEL_52:
  int v15 = 0;
LABEL_53:
  uint64_t result = (v9 + 10 * v15);
  if (byte_1EBCD7960)
  {
    int v33 = *a2;
  }
  else
  {
    uint64_t result = (result - 50 * a5[5] - 200 * (a5[3] + a5[1]));
    int v33 = *a2;
    if (!v11)
    {
      uint64_t v34 = 0;
      unint64_t v35 = *(void *)(*(void *)(a1 + 8) + 3104) + ((unint64_t)*((unsigned int *)this + 48) << 6);
      while (!*(_WORD *)(v35 + v34)
           || !*(unsigned char *)(*(void *)(a1 + 376) + *(unsigned __int16 *)(v35 + v34) - 1))
      {
        v34 += 4;
        if (v34 == 64) {
          goto LABEL_69;
        }
      }
      int v36 = *(__int16 *)(v35 + v34 + 2);
      if (v33 == 1) {
        int v36 = -v36;
      }
      if ((unsigned __int16)a5[1] | (unsigned __int16)a5[3] | (unsigned __int16)a5[5]) {
        int v37 = v12;
      }
      else {
        int v37 = 0;
      }
      unsigned int v38 = result + v37;
      if (v36 <= 0) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v38;
      }
    }
  }
LABEL_69:
  if (v33 == 1)
  {
    if (!*((_DWORD *)this + 54))
    {
      uint64_t v39 = *((unsigned int *)this + 10);
      if (v39)
      {
        uint64_t v40 = *((void *)this + 4);
        uint64_t v41 = v40 + 16 * v39;
        do
        {
          unint64_t v42 = *(void *)v40 & 0xFFFFFFFFFFFFFFF8;
          if (!(*(void *)(*(void *)(*(void *)(v42 + 8) + 16) + 8) & 8 | *(void *)v40 & 6)
            && *(_DWORD *)(v40 + 8)
            && !*(_DWORD *)(v40 + 12))
          {
            uint64_t v43 = *(void *)(a1 + 168);
            int v44 = *(void **)(v43 + 32);
            uint64_t v45 = *(unsigned int *)(v43 + 40);
            if (v45)
            {
              uint64_t v46 = 8 * v45;
              unsigned int v47 = v44;
              while (*v47 != v42)
              {
                ++v47;
                v46 -= 8;
                if (!v46)
                {
                  unsigned int v47 = &v44[v45];
                  break;
                }
              }
            }
            else
            {
              unsigned int v47 = v44;
            }
            if (v45 == v47 - v44) {
              uint64_t result = result;
            }
            else {
              uint64_t result = (result + 75);
            }
          }
          v40 += 16;
        }
        while (v40 != v41);
      }
    }
  }
  else if (v33 == 2 && !*((_DWORD *)this + 55))
  {
    uint64_t v64 = *((unsigned int *)this + 30);
    if (v64)
    {
      uint64_t v65 = *((void *)this + 14);
      uint64_t v66 = v65 + 16 * v64;
      do
      {
        unint64_t v67 = *(void *)v65 & 0xFFFFFFFFFFFFFFF8;
        if (!(*(void *)(*(void *)(*(void *)(v67 + 8) + 16) + 8) & 8 | *(void *)v65 & 6)
          && *(_DWORD *)(v65 + 8)
          && !*(_DWORD *)(v65 + 12))
        {
          uint64_t v68 = *(void *)(a1 + 344);
          uint64_t v69 = *(void **)(v68 + 32);
          uint64_t v70 = *(unsigned int *)(v68 + 40);
          if (v70)
          {
            uint64_t v71 = 8 * v70;
            unint64_t v72 = v69;
            while (*v72 != v67)
            {
              ++v72;
              v71 -= 8;
              if (!v71)
              {
                unint64_t v72 = &v69[v70];
                break;
              }
            }
          }
          else
          {
            unint64_t v72 = v69;
          }
          if (v70 == v72 - v69) {
            uint64_t result = result;
          }
          else {
            uint64_t result = (result + 75);
          }
        }
        v65 += 16;
      }
      while (v65 != v66);
    }
  }
  if (byte_1EBCD7BA0)
  {
    if (v33 == 1)
    {
      uint64_t v48 = *((unsigned int *)this + 10);
      if (v48)
      {
        uint64_t v49 = *((void *)this + 4);
        uint64_t v50 = v49 + 16 * v48;
        do
        {
          if (*(_DWORD *)(v49 + 12))
          {
            uint64_t v51 = *(void *)(a1 + 168);
            int v52 = *(void **)(v51 + 32);
            uint64_t v53 = *(unsigned int *)(v51 + 40);
            if (v53)
            {
              uint64_t v54 = 8 * v53;
              uint64_t v55 = v52;
              while (*v55 != (*(void *)v49 & 0xFFFFFFFFFFFFFFF8))
              {
                ++v55;
                v54 -= 8;
                if (!v54)
                {
                  uint64_t v55 = &v52[v53];
                  break;
                }
              }
            }
            else
            {
              uint64_t v55 = v52;
            }
            if (v53 == v55 - v52) {
              uint64_t result = result;
            }
            else {
              uint64_t result = (result - 200);
            }
          }
          v49 += 16;
        }
        while (v49 != v50);
      }
    }
    else
    {
      uint64_t v56 = *((unsigned int *)this + 30);
      if (v56)
      {
        uint64_t v57 = *((void *)this + 14);
        uint64_t v58 = v57 + 16 * v56;
        do
        {
          if (*(_DWORD *)(v57 + 12))
          {
            uint64_t v59 = *(void *)(a1 + 344);
            int v60 = *(void **)(v59 + 32);
            uint64_t v61 = *(unsigned int *)(v59 + 40);
            if (v61)
            {
              uint64_t v62 = 8 * v61;
              uint64_t v63 = v60;
              while (*v63 != (*(void *)v57 & 0xFFFFFFFFFFFFFFF8))
              {
                ++v63;
                v62 -= 8;
                if (!v62)
                {
                  uint64_t v63 = &v60[v61];
                  break;
                }
              }
            }
            else
            {
              uint64_t v63 = v60;
            }
            if (v61 == v63 - v60) {
              uint64_t result = result;
            }
            else {
              uint64_t result = (result - 200);
            }
          }
          v57 += 16;
        }
        while (v57 != v58);
      }
    }
  }
  return result;
}

BOOL sub_1CC4C4ED8(_DWORD *a1, llvm::SUnit *this)
{
  if (a1[38] >= a1[40]) {
    return 1;
  }
  if (a1[4] == 1)
  {
    if ((*((unsigned char *)this + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight(this);
    }
    unint64_t v4 = (char *)this + 244;
  }
  else
  {
    if ((*((unsigned char *)this + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth(this);
    }
    unint64_t v4 = (char *)this + 240;
  }
  return (a1[40] - a1[38]) <= *(_DWORD *)v4;
}

uint64_t llvm::ConvergingVLIWScheduler::pickNodeFromQueue(void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = *(llvm::SUnit ***)(a2 + 48);
  int v5 = *(llvm::SUnit ***)(a2 + 56);
  if (v4 != v5)
  {
    uint64_t v10 = 0;
    BOOL v11 = (_DWORD *)(a2 + 16);
    int v12 = a4 + 2;
    while (1)
    {
      int v35 = 0;
      uint64_t v34 = 0;
      uint64_t v13 = (const llvm::MachineInstr *)*((void *)*v4 + 1);
      uint64_t v14 = (void *)a1[1];
      uint64_t v15 = v14[476];
      uint64_t v16 = (v14[477] - v15) >> 2;
      uint64_t v17 = v14[391];
      uint64_t v18 = (v14[392] - v17) >> 2;
      uint64_t v19 = *(void *)(a3 + 48);
      if (*(unsigned char *)(a3 + 56))
      {
        if (*(void *)(v19 + 312) > 7uLL) {
          goto LABEL_5;
        }
      }
      else if (!*(void *)(v19 + 312))
      {
LABEL_5:
        v20.n128_f64[0] = llvm::RegPressureTracker::getMaxDownwardPressureDelta(a3, v13, (uint64_t)&v34, v15, v16, v17, v18);
        goto LABEL_8;
      }
      v20.n128_f64[0] = llvm::RegPressureTracker::getMaxUpwardPressureDelta(a3, v13, 0, (uint64_t)&v34, v15, v16, v17, v18);
LABEL_8:
      int v21 = (*(uint64_t (**)(void *, _DWORD *, llvm::SUnit *, _DWORD *, uint64_t *, void, __n128))(*a1 + 144))(a1, v11, *v4, a4, &v34, 0, v20);
      int v22 = v21;
      uint64_t v23 = *(void *)a4;
      if (!*(void *)a4)
      {
        int v25 = *v4;
LABEL_16:
        uint64_t v10 = 1;
        goto LABEL_19;
      }
      int v24 = a4[5];
      if (v21 < 0 && v24 < 0)
      {
        if (*v11 == 2)
        {
          int v25 = *v4;
          if (*((_DWORD *)*v4 + 48) <= *(_DWORD *)(v23 + 192)) {
            goto LABEL_20;
          }
        }
        else
        {
          if (*v11 != 1) {
            goto LABEL_20;
          }
          int v25 = *v4;
          if (*((_DWORD *)*v4 + 48) >= *(_DWORD *)(v23 + 192)) {
            goto LABEL_20;
          }
        }
        goto LABEL_16;
      }
      int v25 = *v4;
      if (v21 > v24)
      {
        uint64_t v10 = 6;
        goto LABEL_19;
      }
      uint64_t v26 = 220;
      if (*v11 == 1) {
        uint64_t v26 = 216;
      }
      unsigned int v27 = *(_DWORD *)((char *)v25 + v26);
      unsigned int v28 = *(_DWORD *)(v23 + v26);
      if (v27 == v28)
      {
        if (v21 == v24 && sub_1CC4C4ED8((_DWORD *)a2, v25))
        {
          unint64_t v29 = *v4;
          uint64_t v30 = 120;
          if (*v11 != 1) {
            uint64_t v30 = 40;
          }
          unsigned int v31 = *(_DWORD *)(*(void *)a4 + v30);
          unsigned int v32 = *(_DWORD *)((char *)v29 + v30);
          if (v32 > v31)
          {
            *(void *)a4 = v29;
            *(void *)int v12 = v34;
            v12[2] = v35;
            a4[5] = v22;
            uint64_t v10 = 6;
          }
          if (v32 != v31) {
            goto LABEL_20;
          }
        }
        if (!byte_1EBCD7A20 || v22 != a4[5]) {
          goto LABEL_20;
        }
        if (*v11 == 2)
        {
          int v25 = *v4;
          if (*((_DWORD *)*v4 + 48) <= *(_DWORD *)(*(void *)a4 + 192)) {
            goto LABEL_20;
          }
        }
        else
        {
          if (*v11 != 1) {
            goto LABEL_20;
          }
          int v25 = *v4;
          if (*((_DWORD *)*v4 + 48) >= *(_DWORD *)(*(void *)a4 + 192)) {
            goto LABEL_20;
          }
        }
        goto LABEL_16;
      }
      if (v27 >= v28) {
        goto LABEL_20;
      }
      uint64_t v10 = 7;
LABEL_19:
      *(void *)a4 = v25;
      *(void *)int v12 = v34;
      v12[2] = v35;
      a4[5] = v22;
LABEL_20:
      if (++v4 == v5) {
        return v10;
      }
    }
  }
  return 0;
}

uint64_t llvm::ConvergingVLIWScheduler::pickNodeBidrectional(char **this, BOOL *a2)
{
  unint64_t v4 = (char *)(this + 25);
  uint64_t result = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice(this + 25);
  if (result)
  {
    *a2 = 0;
    return result;
  }
  uint64_t result = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice(this + 3);
  if (result)
  {
    *a2 = 1;
    return result;
  }
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v6 = llvm::ConvergingVLIWScheduler::pickNodeFromQueue(this, (uint64_t)v4, (uint64_t)(this[1] + 4840), v13);
  if ((v6 & 0xFFFFFFFE) == 2)
  {
    *a2 = 0;
    return v13[0];
  }
  int v7 = v6;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  uint64_t v8 = v11;
  int v9 = llvm::ConvergingVLIWScheduler::pickNodeFromQueue(this, (uint64_t)(this + 3), (uint64_t)(this[1] + 4160), v11);
  if ((v9 & 0xFFFFFFFE) != 2)
  {
    if (v7 == 4)
    {
      BOOL v10 = 0;
      uint64_t v8 = v13;
      goto LABEL_14;
    }
    uint64_t v8 = v11;
    if (v9 != 4)
    {
      BOOL v10 = SHIDWORD(v12) > SHIDWORD(v14);
      if (SHIDWORD(v12) <= SHIDWORD(v14)) {
        uint64_t v8 = v13;
      }
      goto LABEL_14;
    }
  }
  BOOL v10 = 1;
LABEL_14:
  *a2 = v10;
  return *v8;
}

uint64_t llvm::ConvergingVLIWScheduler::pickNode(llvm::ConvergingVLIWScheduler *this, BOOL *a2)
{
  if (*(void *)(*((void *)this + 1) + 2680) == *(void *)(*((void *)this + 1) + 2688)) {
    return 0;
  }
  if (byte_1EBD05608)
  {
    uint64_t v4 = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice((char **)this + 3);
    if (!v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      llvm::ConvergingVLIWScheduler::pickNodeFromQueue(this, (uint64_t)this + 24, *((void *)this + 1) + 4160, &v6);
      uint64_t v4 = v6;
    }
    *a2 = 1;
  }
  else if (byte_1EBD056C8)
  {
    uint64_t v4 = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice((char **)this + 25);
    if (!v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      llvm::ConvergingVLIWScheduler::pickNodeFromQueue(this, (uint64_t)this + 200, *((void *)this + 1) + 4840, &v6);
      uint64_t v4 = v6;
    }
    *a2 = 0;
  }
  else
  {
    uint64_t v4 = llvm::ConvergingVLIWScheduler::pickNodeBidrectional((char **)this, a2);
  }
  if (!*(_DWORD *)(v4 + 208)) {
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::removeReady((uint64_t)this + 24, v4);
  }
  if (!*(_DWORD *)(v4 + 212)) {
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::removeReady((uint64_t)this + 200, v4);
  }
  return v4;
}

uint64_t llvm::ConvergingVLIWScheduler::schedNode(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t result = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpNode(a1 + 24, a2);
    *(_DWORD *)(a2 + 248) = *(_DWORD *)(a1 + 176);
  }
  else
  {
    uint64_t result = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpNode(a1 + 200, a2);
    *(_DWORD *)(a2 + 252) = *(_DWORD *)(a1 + 352);
  }
  return result;
}

void sub_1CC4C54E8(llvm::ScheduleDAGMILive *a1)
{
  llvm::ScheduleDAGMILive::~ScheduleDAGMILive(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4C5524(void *a1)
{
  sub_1CC4C555C(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC4C555C(void *a1)
{
  *a1 = &unk_1F2615B60;
  int v2 = (void *)a1[47];
  if (v2 != a1 + 50) {
    free(v2);
  }
  llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::~VLIWSchedBoundary((llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *)(a1 + 25));
  llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::~VLIWSchedBoundary((llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *)(a1 + 3));
  return a1;
}

uint64_t sub_1CC4C55C0()
{
  uint64_t v0 = sub_1CB883A14((uint64_t)&qword_1EBCD78E0, 0, 0);
  byte_1EBCD7960 = 0;
  qword_1EBCD7968 = (uint64_t)&unk_1F25EDE58;
  *(void *)&word_1EBCD7970 = 0;
  qword_1EBCD78E0 = (uint64_t)&unk_1F26440A0;
  qword_1EBCD7978 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCD7980 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCD7998 = (uint64_t)&qword_1EBCD7980;
  llvm::cl::Option::setArgStr(v0, "ignore-bb-reg-pressure", 0x16uLL);
  word_1EBCD78EA = word_1EBCD78EA & 0xFF98 | 0x21;
  byte_1EBCD7960 = 0;
  word_1EBCD7970 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD78E0);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD78E0, &dword_1CB82C000);
  sub_1CB883A14((uint64_t)&qword_1EBCD79A0, 0, 0);
  byte_1EBCD7A20 = 0;
  qword_1EBCD7A28 = (uint64_t)&unk_1F25EDE58;
  *(void *)&word_1EBCD7A30 = 0;
  qword_1EBCD79A0 = (uint64_t)&unk_1F26440A0;
  qword_1EBCD7A38 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCD7A40 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCD7A58 = (uint64_t)&qword_1EBCD7A40;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCD79A0, "use-newer-candidate", 0x13uLL);
  word_1EBCD79AA = word_1EBCD79AA & 0xFF98 | 0x21;
  byte_1EBCD7A20 = 1;
  word_1EBCD7A30 = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD79A0);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD79A0, &dword_1CB82C000);
  uint64_t v1 = sub_1CB883A14((uint64_t)&qword_1EBCD7A60, 0, 0);
  dword_1EBCD7AE0 = 0;
  qword_1EBCD7AF0 = 0;
  qword_1EBCD7AE8 = (uint64_t)&unk_1F25EA1B0;
  qword_1EBCD7A60 = (uint64_t)&unk_1F2643F00;
  qword_1EBCD7AF8 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCD7B00 = (uint64_t)&unk_1F25EA168;
  qword_1EBCD7B18 = (uint64_t)&qword_1EBCD7B00;
  llvm::cl::Option::setArgStr(v1, "misched-verbose-level", 0x15uLL);
  word_1EBCD7A6A = word_1EBCD7A6A & 0xFF98 | 0x21;
  dword_1EBCD7AE0 = 1;
  BYTE4(qword_1EBCD7AF0) = 1;
  LODWORD(qword_1EBCD7AF0) = 1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD7A60);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCD7A60, &dword_1CB82C000);
  sub_1CB883A14((uint64_t)&qword_1EBCD7B20, 0, 0);
  byte_1EBCD7BA0 = 0;
  qword_1EBCD7BB0 = 0;
  qword_1EBCD7BA8 = (uint64_t)&unk_1F25EDE58;
  qword_1EBCD7B20 = (uint64_t)&unk_1F26440A0;
  qword_1EBCD7BB8 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCD7BC0 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCD7BD8 = (uint64_t)&qword_1EBCD7BC0;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCD7B20, "check-early-avail", 0x11uLL);
  word_1EBCD7B2A = word_1EBCD7B2A & 0xFF98 | 0x21;
  byte_1EBCD7BA0 = 1;
  LOWORD(qword_1EBCD7BB0) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD7B20);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD7B20, &dword_1CB82C000);
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCD7BE0, 0, 0);
  dword_1EBCD7C60 = 0;
  qword_1EBCD7C70 = 0;
  qword_1EBCD7C68 = (uint64_t)&unk_1F2605730;
  qword_1EBCD7BE0 = (uint64_t)&unk_1F26056C8;
  qword_1EBCD7C78 = (uint64_t)&unk_1F2643E70;
  qword_1EBCD7C80 = (uint64_t)&unk_1F2605750;
  qword_1EBCD7C98 = (uint64_t)&qword_1EBCD7C80;
  llvm::cl::Option::setArgStr(v2, "vliw-misched-reg-pressure", 0x19uLL);
  word_1EBCD7BEA = word_1EBCD7BEA & 0xFF9F | 0x20;
  dword_1EBCD7C60 = 1061158912;
  BYTE4(qword_1EBCD7C70) = 1;
  LODWORD(qword_1EBCD7C70) = 1061158912;
  qword_1EBCD7C00 = (uint64_t)"High register pressure threhold.";
  qword_1EBCD7C08 = 32;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD7BE0);

  return __cxa_atexit((void (*)(void *))sub_1CC08F43C, &qword_1EBCD7BE0, &dword_1CB82C000);
}

void sub_1CC4C5AB4()
{
}

uint64_t llvm::VirtRegMap::runOnMachineFunction(llvm::VirtRegMap *this, llvm::MachineFunction *a2)
{
  *((void *)this + 31) = *((void *)a2 + 5);
  *((void *)this + 32) = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 104))(*((void *)a2 + 2));
  *((void *)this + 33) = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 176))(*((void *)a2 + 2));
  *((void *)this + 34) = a2;
  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 78) = 0;
  *((_DWORD *)this + 84) = 0;
  if (*((void *)this + 45))
  {
    int v5 = (_DWORD *)((char *)this + 352);
    uint64_t v6 = *((unsigned int *)this + 92);
    if (v6 > 4 * *((_DWORD *)this + 90) && v6 >= 0x41)
    {
      sub_1CD58E1A4(v5);
    }
    else
    {
      if (v6)
      {
        uint64_t v7 = *(_DWORD **)v5;
        uint64_t v8 = 40 * v6;
        do
        {
          *uint64_t v7 = -1;
          v7 += 10;
          v8 -= 40;
        }
        while (v8);
      }
      *((void *)this + 45) = 0;
    }
  }
  llvm::VirtRegMap::grow((uint64_t)this);
  return 0;
}

uint64_t llvm::VirtRegMap::grow(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(*(void *)(*(void *)(this + 272) + 40) + 32);
  uint64_t v2 = *(unsigned int *)(this + 288);
  if (v2 != v1)
  {
    int v3 = *(_DWORD *)(*(void *)(*(void *)(this + 272) + 40) + 32);
    if (v2 <= v1)
    {
      int v4 = *(_DWORD *)(this + 296);
      uint64_t v5 = v1 - v2;
      int v6 = *(_DWORD *)(this + 288);
      if (v1 > *(_DWORD *)(this + 292)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5)
      {
        uint64_t v7 = (_DWORD *)(*(void *)(this + 280) + 4 * *(unsigned int *)(this + 288));
        uint64_t v8 = v2 - v1;
        do
        {
          *v7++ = v4;
          BOOL v9 = __CFADD__(v8++, 1);
        }
        while (!v9);
        int v6 = *(_DWORD *)(this + 288);
      }
      int v3 = v6 + v5;
    }
    *(_DWORD *)(this + 288) = v3;
  }
  uint64_t v10 = *(unsigned int *)(this + 312);
  if (v10 != v1)
  {
    int v11 = v1;
    if (v10 <= v1)
    {
      int v12 = *(_DWORD *)(this + 320);
      uint64_t v13 = v1 - v10;
      int v14 = *(_DWORD *)(this + 312);
      if (v1 > *(_DWORD *)(this + 316)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v13)
      {
        uint64_t v15 = (_DWORD *)(*(void *)(this + 304) + 4 * *(unsigned int *)(this + 312));
        uint64_t v16 = v10 - v1;
        do
        {
          *v15++ = v12;
          BOOL v9 = __CFADD__(v16++, 1);
        }
        while (!v9);
        int v14 = *(_DWORD *)(this + 312);
      }
      int v11 = v14 + v13;
    }
    *(_DWORD *)(this + 312) = v11;
  }
  uint64_t v17 = *(unsigned int *)(this + 336);
  if (v17 != v1)
  {
    if (v17 <= v1)
    {
      int v18 = *(_DWORD *)(this + 344);
      uint64_t v19 = v1 - v17;
      int v20 = *(_DWORD *)(this + 336);
      if (v1 > *(_DWORD *)(this + 340)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v19)
      {
        int v21 = (_DWORD *)(*(void *)(this + 328) + 4 * *(unsigned int *)(this + 336));
        uint64_t v22 = v17 - v1;
        do
        {
          *v21++ = v18;
          BOOL v9 = __CFADD__(v22++, 1);
        }
        while (!v9);
        int v20 = *(_DWORD *)(this + 336);
      }
      LODWORD(v1) = v20 + v19;
    }
    *(_DWORD *)(this + 336) = v1;
  }
  return this;
}

uint64_t llvm::VirtRegMap::assignVirt2Phys(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(*(void *)(result + 280) + 4 * (a2 & 0x7FFFFFFF)) = a3;
  return result;
}

uint64_t llvm::VirtRegMap::createSpillSlot(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 264) + 264)
     + 24
     * (*(unsigned __int16 *)(*(void *)a2 + 24)
      + *(_DWORD *)(*(void *)(a1 + 264) + 272)
      * ((*(void *)(*(void *)(a1 + 264) + 248) - *(void *)(*(void *)(a1 + 264) + 240)) >> 3));
  unint64_t v4 = *(unsigned int *)(v3 + 4);
  unsigned __int8 v5 = 63 - __clz((unint64_t)*(unsigned int *)(v3 + 8) >> 3);
  uint64_t v6 = *(void *)(*(void *)(a1 + 272) + 16);
  unsigned int v7 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 112))(v6) + 12);
  if (v7 < v5)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 176);
    uint64_t v11 = v6;
    unsigned __int8 v12 = v7;
    uint64_t v13 = v10(v11);
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)v13 + 432))(v13, *(void *)(a1 + 272))) {
      unsigned __int8 v5 = v12;
    }
  }
  uint64_t v8 = *(unsigned __int8 **)(*(void *)(a1 + 272) + 56);

  return llvm::MachineFrameInfo::CreateSpillStackObject(v8, v4 >> 3, v5);
}

BOOL llvm::VirtRegMap::hasPreferredPhys(uint64_t a1, int a2)
{
  uint64_t v2 = a2 & 0x7FFFFFFF;
  uint64_t v3 = *(void *)(*(void *)(a1 + 248) + 208);
  uint64_t v4 = v3 + 40 * v2;
  if (!*(_DWORD *)(v4 + 16)) {
    return 0;
  }
  int v6 = **(_DWORD **)(v4 + 8);
  if (*(_DWORD *)(v3 + 40 * v2) || v6 == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 280);
  if (v6 < 0) {
    int v6 = *(_DWORD *)(v8 + 4 * (v6 & 0x7FFFFFFF));
  }
  return *(_DWORD *)(v8 + 4 * v2) == v6;
}

uint64_t llvm::VirtRegMap::hasKnownPreference(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 248) + 208) + 40 * (a2 & 0x7FFFFFFF);
  if (!*(_DWORD *)(v2 + 16)) {
    return 0;
  }
  int v4 = **(_DWORD **)(v2 + 8);
  if (v4 < 0) {
    return *(_DWORD *)(*(void *)(a1 + 280) + 4 * (v4 & 0x7FFFFFFF)) != 0;
  }
  if ((v4 - 0x40000000) <= 0xC0000000)
  {
    if ((v4 & 0x80000000) == 0) {
      return 0;
    }
    return *(_DWORD *)(*(void *)(a1 + 280) + 4 * (v4 & 0x7FFFFFFF)) != 0;
  }
  return 1;
}

uint64_t llvm::VirtRegMap::assignVirt2StackSlot(uint64_t a1, int a2)
{
  uint64_t v3 = a2 & 0x7FFFFFFF;
  uint64_t result = llvm::VirtRegMap::createSpillSlot(a1, *(void *)(*(void *)(*(void *)(*(void *)(a1 + 272) + 40) + 24) + 16 * v3) & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)(*(void *)(a1 + 304) + 4 * v3) = result;
  return result;
}

uint64_t llvm::VirtRegMap::assignVirt2StackSlot(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(*(void *)(result + 304) + 4 * (a2 & 0x7FFFFFFF)) = a3;
  return result;
}

void sub_1CC4C60A8(llvm *a1)
{
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeLiveDebugVariablesPass(a1, v2);
  llvm::initializeLiveStacksPass(a1, v3);
  int v4 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD7CA0, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC4C5AB4;
    v6[1] = &v4;
    unsigned __int8 v5 = v6;
    std::__call_once(&qword_1EBCD7CA0, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  operator new();
}

double sub_1CC4C61BC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &llvm::VirtRegMap::ID;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F2615C08;
  double result = 0.0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 280) = a1 + 296;
  *(_DWORD *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = a1 + 320;
  *(_DWORD *)(a1 + 320) = 0x3FFFFFFF;
  *(void *)(a1 + 328) = a1 + 344;
  *(_DWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  return result;
}

void sub_1CC4C6284()
{
}

void sub_1CC4C6338(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2615CC8;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 39), 4);
  *(void *)a1 = &unk_1F260E110;
  uint64_t v2 = (void *)*((void *)a1 + 22);
  if (v2 != (void *)((char *)a1 + 192)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 13);
  if (v3 != (void *)((char *)a1 + 120)) {
    free(v3);
  }
  int v4 = (void *)*((void *)a1 + 4);
  if (v4 != (void *)((char *)a1 + 48)) {
    free(v4);
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC4C63F8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2615CC8;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 39), 4);
  *(void *)a1 = &unk_1F260E110;
  uint64_t v2 = (void *)*((void *)a1 + 22);
  if (v2 != (void *)((char *)a1 + 192)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 13);
  if (v3 != (void *)((char *)a1 + 120)) {
    free(v3);
  }
  int v4 = (void *)*((void *)a1 + 4);
  if (v4 != (void *)((char *)a1 + 48)) {
    free(v4);
  }
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4C64CC(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61EEDF);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveStacks::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveStacks::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::VirtRegMap::ID);
  if (!*((unsigned char *)a1 + 336)) {
    sub_1CB843600(a2, v4, (uint64_t)&unk_1EA61EEDF);
  }

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC4C6604(uint64_t a1, uint64_t a2)
{
  v339[2] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = a2;
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(a1 + 264) = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 248) + 16) + 104))(*(void *)(*(void *)(a1 + 248) + 16));
  *(void *)(a1 + 272) = *(void *)(*(void *)(a1 + 248) + 40);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::SlotIndexes::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  *(void *)(a1 + 280) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::SlotIndexes::ID);
  unsigned int v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::LiveIntervals::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  *(void *)(a1 + 288) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::LiveIntervals::ID);
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_14:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v12 != &llvm::VirtRegMap::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_14;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  uint64_t v15 = (const llvm::VirtRegMap *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::VirtRegMap::ID);
  *(void *)(a1 + 296) = v15;
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &unk_1EA61EEDF, 1);
  if (AnalysisPass)
  {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &unk_1EA61EEDF);
    uint64_t v15 = *(const llvm::VirtRegMap **)(a1 + 296);
  }
  *(void *)(a1 + 304) = AnalysisPass;
  llvm::LiveIntervals::addKillFlags(*(llvm::LiveIntervals **)(a1 + 288), v15);
  uint64_t v325 = (void *)a1;
  int v321 = *(_DWORD *)(*(void *)(a1 + 272) + 32);
  if (v321)
  {
    for (int i = 0; i != v321; ++i)
    {
      uint64_t v18 = i & 0x7FFFFFFF;
      uint64_t v19 = *(void *)(*(void *)(v325[34] + 24) + 16 * v18 + 8);
      if (v19)
      {
        while ((*(_DWORD *)v19 & 0x80000000) != 0)
        {
          uint64_t v19 = *(void *)(v19 + 24);
          if (!v19) {
            goto LABEL_28;
          }
        }
        uint64_t v20 = v325[36];
        int v21 = (void *)(v20 + 408);
        uint64_t v22 = *(unsigned int *)(v20 + 416);
        if (v18 >= v22)
        {
          sub_1CB9153B8((uint64_t)v21, v18 - v22 + 1, *(void *)(v20 + 424));
LABEL_118:
          operator new();
        }
        uint64_t v23 = *(void *)(*v21 + 8 * v18);
        if (!v23) {
          goto LABEL_118;
        }
        if (*(_DWORD *)(v23 + 8))
        {
          if (!llvm::LiveIntervals::intervalIsInOneMBB(v325[36], v23))
          {
            int v323 = *(_DWORD *)(*(void *)(v325[37] + 280) + 4 * v18);
            if (v323)
            {
              uint64_t v24 = *(void *)(v23 + 104);
              if (v24)
              {
                unsigned int v25 = 0;
                unint64_t v26 = 0;
                unint64_t v27 = 0;
                uint64_t v328 = v330;
                uint64_t v329 = 0x400000000;
                do
                {
                  unsigned int v28 = *(unint64_t **)v24;
                  if (v25 >= HIDWORD(v329)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unint64_t v29 = (char *)v328 + 16 * v25;
                  *unint64_t v29 = v24;
                  v29[1] = v28;
                  unsigned int v25 = v329 + 1;
                  LODWORD(v329) = v329 + 1;
                  if (v26 < 8
                    || (*(_DWORD *)((**(void **)v24 & 0xFFFFFFFFFFFFFFF8) + 24) | (**(void **)v24 >> 1) & 3) < (*(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) | (v26 >> 1) & 3))
                  {
                    unint64_t v26 = **(void **)v24;
                  }
                  if (v27 < 8
                    || (uint64_t v30 = *(void *)(*(void *)v24 + 24 * *(unsigned int *)(v24 + 8) - 16),
                        (*(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24) | (v30 >> 1) & 3) > (*(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3)))
                  {
                    unint64_t v27 = *(void *)(*(void *)v24 + 24 * *(unsigned int *)(v24 + 8) - 16);
                  }
                  uint64_t v24 = *(void *)(v24 + 104);
                }
                while (v24);
                uint64_t v31 = v325[35];
                unsigned int v32 = *(void **)(v31 + 536);
                unint64_t v33 = *(unsigned int *)(v31 + 544);
                if (v33)
                {
                  unsigned int v34 = *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) | (v26 >> 1) & 3;
                  int v35 = v32;
                  unint64_t v36 = v33;
                  do
                  {
                    unint64_t v37 = v36 >> 1;
                    unsigned int v38 = &v35[2 * (v36 >> 1)];
                    uint64_t v40 = *v38;
                    uint64_t v39 = v38 + 2;
                    v36 += ~(v36 >> 1);
                    if (((v40 >> 1) & 3 | *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24)) < v34) {
                      int v35 = v39;
                    }
                    else {
                      unint64_t v36 = v37;
                    }
                  }
                  while (v36);
                }
                else
                {
                  unint64_t v33 = 0;
                  int v35 = v32;
                }
                if (v35 != &v32[2 * v33])
                {
                  unint64_t v63 = v27 & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v64 = (v27 >> 1) & 3;
                  unint64_t v319 = v27 & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v315 = v64;
                  do
                  {
                    unsigned int v65 = (*v35 >> 1) & 3 | *(_DWORD *)((*v35 & 0xFFFFFFFFFFFFFFF8) + 24);
                    if (v65 > (*(_DWORD *)(v63 + 24) | v64)) {
                      break;
                    }
                    if (v329)
                    {
                      uint64_t v66 = 0;
                      unint64_t v67 = (char *)v328;
                      uint64_t v68 = (char *)v328 + 16 * v329;
                      do
                      {
                        uint64_t v69 = *(void **)v67;
                        uint64_t v70 = (void *)*((void *)v67 + 1);
                        unsigned int v71 = *(_DWORD *)(*(void *)v67 + 8);
                        while (v70 != (void *)(*v69 + 24 * v71))
                        {
                          if (((v70[1] >> 1) & 3 | *(_DWORD *)((v70[1] & 0xFFFFFFFFFFFFFFF8) + 24)) > v65)
                          {
                            if (((*v70 >> 1) & 3 | *(_DWORD *)((*v70 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v65) {
                              v66 |= v69[14];
                            }
                            break;
                          }
                          v70 += 3;
                          *((void *)v67 + 1) = v70;
                        }
                        v67 += 16;
                      }
                      while (v67 != v68);
                      if (v66)
                      {
                        unint64_t v72 = (void *)v35[1];
                        unsigned int v74 = (char *)v72[20];
                        unint64_t v73 = v72[21];
                        if ((unint64_t)v74 >= v73)
                        {
                          uint64_t v76 = (char *)v72[19];
                          uint64_t v77 = (v74 - v76) >> 4;
                          unint64_t v78 = v77 + 1;
                          if ((unint64_t)(v77 + 1) >> 60) {
                            goto LABEL_456;
                          }
                          uint64_t v79 = v73 - (void)v76;
                          if (v79 >> 3 > v78) {
                            unint64_t v78 = v79 >> 3;
                          }
                          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0) {
                            unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
                          }
                          if (v78)
                          {
                            if (v78 >> 60) {
                              goto LABEL_457;
                            }
                            unint64_t v80 = v78;
                            uint64_t v81 = (char *)operator new(16 * v78);
                          }
                          else
                          {
                            unint64_t v80 = 0;
                            uint64_t v81 = 0;
                          }
                          uint64_t v82 = &v81[16 * v77];
                          *(_WORD *)uint64_t v82 = v323;
                          *((void *)v82 + 1) = v66;
                          int v83 = v82;
                          if (v74 != v76)
                          {
                            do
                            {
                              *((_OWORD *)v83 - 1) = *((_OWORD *)v74 - 1);
                              v83 -= 16;
                              v74 -= 16;
                            }
                            while (v74 != v76);
                            unsigned int v74 = (char *)v72[19];
                          }
                          uint64_t v75 = v82 + 16;
                          v72[19] = v83;
                          v72[20] = v82 + 16;
                          v72[21] = &v81[16 * v80];
                          if (v74) {
                            operator delete(v74);
                          }
                          unint64_t v63 = v319;
                          unsigned int v64 = v315;
                        }
                        else
                        {
                          *(_WORD *)unsigned int v74 = v323;
                          *((void *)v74 + 1) = v66;
                          uint64_t v75 = v74 + 16;
                        }
                        v72[20] = v75;
                      }
                    }
                    v35 += 2;
                  }
                  while (v35 != (void *)(*(void *)(v325[35] + 536) + 16 * *(unsigned int *)(v325[35] + 544)));
                }
                if (v328 != v330) {
                  free(v328);
                }
              }
              else
              {
                unsigned int v41 = *(_DWORD *)(v23 + 8);
                if (v41)
                {
                  unint64_t v42 = *(void **)v23;
                  int v318 = &v42[3 * v41];
                  uint64_t v43 = v325[35];
                  int v44 = *(void **)(v43 + 536);
                  do
                  {
                    uint64_t v45 = *(void *)(v43 + 536) + 16 * *(unsigned int *)(v43 + 544);
                    if ((void *)v45 != v44)
                    {
                      unint64_t v46 = (v45 - (uint64_t)v44) >> 4;
                      do
                      {
                        unint64_t v47 = v46 >> 1;
                        uint64_t v48 = &v44[2 * (v46 >> 1)];
                        uint64_t v50 = *v48;
                        uint64_t v49 = v48 + 2;
                        v46 += ~(v46 >> 1);
                        if (((v50 >> 1) & 3 | *(_DWORD *)((v50 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*v42 >> 1) & 3 | *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFFFF8) + 24))) {
                          int v44 = v49;
                        }
                        else {
                          unint64_t v46 = v47;
                        }
                      }
                      while (v46);
                    }
                    if (v44 == (void *)v45)
                    {
                      int v44 = (void *)(*(void *)(v43 + 536) + 16 * *(unsigned int *)(v43 + 544));
                    }
                    else
                    {
                      do
                      {
                        if (((*v44 >> 1) & 3 | *(_DWORD *)((*v44 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v42[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v42[1] >> 1) & 3)) {
                          break;
                        }
                        uint64_t v51 = (void *)v44[1];
                        uint64_t v53 = (char *)v51[20];
                        unint64_t v52 = v51[21];
                        if ((unint64_t)v53 >= v52)
                        {
                          uint64_t v55 = (char *)v51[19];
                          uint64_t v56 = (v53 - v55) >> 4;
                          unint64_t v57 = v56 + 1;
                          if ((unint64_t)(v56 + 1) >> 60) {
LABEL_456:
                          }
                            abort();
                          uint64_t v58 = v52 - (void)v55;
                          if (v58 >> 3 > v57) {
                            unint64_t v57 = v58 >> 3;
                          }
                          unint64_t v59 = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v57;
                          if (v59)
                          {
                            if (v59 >> 60) {
LABEL_457:
                            }
                              sub_1CB833614();
                            int v60 = (char *)operator new(16 * v59);
                          }
                          else
                          {
                            int v60 = 0;
                          }
                          uint64_t v61 = &v60[16 * v56];
                          *(_WORD *)uint64_t v61 = v323;
                          *((void *)v61 + 1) = -1;
                          uint64_t v62 = v61;
                          if (v53 != v55)
                          {
                            do
                            {
                              *((_OWORD *)v62 - 1) = *((_OWORD *)v53 - 1);
                              v62 -= 16;
                              v53 -= 16;
                            }
                            while (v53 != v55);
                            uint64_t v53 = (char *)v51[19];
                          }
                          uint64_t v54 = v61 + 16;
                          v51[19] = v62;
                          v51[20] = v61 + 16;
                          v51[21] = &v60[16 * v59];
                          if (v53) {
                            operator delete(v53);
                          }
                        }
                        else
                        {
                          *(_WORD *)uint64_t v53 = v323;
                          *((void *)v53 + 1) = -1;
                          uint64_t v54 = v53 + 16;
                        }
                        v51[20] = v54;
                        v44 += 2;
                        uint64_t v43 = v325[35];
                      }
                      while (v44 != (void *)(*(void *)(v43 + 536) + 16 * *(unsigned int *)(v43 + 544)));
                    }
                    v42 += 3;
                  }
                  while (v42 != v318);
                }
              }
            }
          }
        }
      }
LABEL_28:
      ;
    }
  }
  uint64_t v84 = v325;
  uint64_t v85 = v325[31];
  uint64_t v86 = *(void **)(v85 + 328);
  unsigned int v87 = (void *)(v85 + 320);
  if (v86 != (void *)(v85 + 320))
  {
    do
    {
      uint64_t v88 = (unsigned __int16 *)v86[19];
      int v89 = (unsigned __int16 *)v86[20];
      unint64_t v90 = 126 - 2 * __clz(((char *)v89 - (char *)v88) >> 4);
      if (v89 == v88) {
        uint64_t v91 = 0;
      }
      else {
        uint64_t v91 = v90;
      }
      sub_1CC31AF28(v88, v89, v91, 1);
      int v93 = (unsigned __int16 *)v86[19];
      uint64_t v92 = (unsigned __int16 *)v86[20];
      if (v93 == v92)
      {
        uint64_t v94 = v86[19];
      }
      else
      {
        uint64_t v94 = v86[19];
        while (2)
        {
          int v95 = *v93;
          for (uint64_t j = *((void *)v93 + 1); ; j |= *((void *)v93 + 1))
          {
            v93 += 8;
            if (v93 == v92)
            {
              *(_WORD *)uint64_t v94 = v95;
              *(void *)(v94 + 8) = j;
              v94 += 16;
              goto LABEL_132;
            }
            if (v95 != *v93) {
              break;
            }
          }
          *(_WORD *)uint64_t v94 = v95;
          *(void *)(v94 + 8) = j;
          v94 += 16;
          if (v93 != v92) {
            continue;
          }
          break;
        }
      }
LABEL_132:
      if ((unsigned __int16 *)v94 != v92) {
        v86[20] = v94;
      }
      uint64_t v86 = (void *)v86[1];
    }
    while (v86 != v87);
    uint64_t v85 = v325[31];
    unsigned int v87 = *(void **)(v85 + 328);
  }
  int v314 = *(unsigned __int8 *)(v325[34] + 16);
  uint64_t v328 = v330;
  uint64_t v329 = 0x800000000;
  char v334 = v336;
  uint64_t v335 = 0x800000000;
  uint64_t v331 = v333;
  uint64_t v332 = 0x800000000;
  int v310 = (void *)(v85 + 320);
  if (v87 != (void *)(v85 + 320))
  {
    int v312 = (char **)(v325 + 39);
    int v97 = v87;
    while (1)
    {
      unint64_t v311 = v97;
      uint64_t v98 = v97[7];
      uint64_t v313 = v97 + 6;
      if ((void *)v98 != v97 + 6) {
        break;
      }
LABEL_407:
      int v97 = (void *)v311[1];
      if (v97 == v310) {
        goto LABEL_408;
      }
    }
    while (1)
    {
      uint64_t v316 = *(void *)(v98 + 8);
      uint64_t v317 = v98;
      uint64_t v99 = *(unsigned int *)(v98 + 40);
      if (v99)
      {
        int v100 = *(int ***)(v98 + 32);
        int v101 = (unsigned __int8 *)&v100[4 * v99];
        while (2)
        {
          int v102 = *(unsigned __int8 *)v100;
          if (v102 == 12)
          {
            sub_1CBA6DECC(v84[34] + 280, v100[2], 0xFFFFFFFF);
            int v102 = *(unsigned __int8 *)v100;
          }
          if (v102) {
            goto LABEL_242;
          }
          int v103 = *((_DWORD *)v100 + 1);
          if ((v103 & 0x80000000) == 0) {
            goto LABEL_242;
          }
          uint64_t v104 = v103 & 0x7FFFFFFF;
          unsigned int v105 = *(_DWORD *)(*(void *)(v84[37] + 280) + 4 * v104);
          if (!v105) {
            goto LABEL_242;
          }
          v326[0] = *(_DWORD *)(*(void *)(v84[37] + 280) + 4 * (v103 & 0x7FFFFFFF));
          int v106 = *((_DWORD *)v84 + 82);
          if (v106)
          {
            uint64_t v107 = v84[39];
            int v108 = v106 - 1;
            unsigned int v109 = v108 & (37 * v105);
            uint64_t v110 = (char *)(v107 + 4 * v109);
            int v111 = *(_DWORD *)v110;
            if (v105 == *(_DWORD *)v110) {
              goto LABEL_149;
            }
            uint64_t v116 = 0;
            int v117 = 1;
            while (v111 != -1)
            {
              if (v116) {
                BOOL v118 = 0;
              }
              else {
                BOOL v118 = v111 == -2;
              }
              if (v118) {
                uint64_t v116 = v110;
              }
              unsigned int v119 = v109 + v117++;
              unsigned int v109 = v119 & v108;
              uint64_t v110 = (char *)(v107 + 4 * v109);
              int v111 = *(_DWORD *)v110;
              if (v105 == *(_DWORD *)v110) {
                goto LABEL_149;
              }
            }
            unsigned int v149 = v105;
            if (v116) {
              uint64_t v150 = v116;
            }
            else {
              uint64_t v150 = v110;
            }
          }
          else
          {
            unsigned int v149 = v105;
            uint64_t v150 = 0;
          }
          uint64_t v151 = sub_1CBA855C4(v312, (uint64_t)v326, v326, v150);
          *(_DWORD *)uint64_t v151 = v326[0];
          unsigned int v105 = v149;
LABEL_149:
          LODWORD(v112) = *(_DWORD *)v100;
          int v113 = (*(_DWORD *)v100 >> 8) & 0xFFF;
          if (v113)
          {
            if (!v314
              || ((uint64_t v114 = v84[34], *(unsigned char *)(v114 + 16))
                ? (BOOL v115 = *(unsigned char *)((*(void *)(*(void *)(v114 + 24) + 16 * v104) & 0xFFFFFFFFFFFFFFF8) + 34) == 0)
                : (BOOL v115 = 1),
                  v115))
            {
              if ((v112 & 0x30000000) != 0 || (v112 & 0x10FFF00) == 0x1000000)
              {
                if ((v112 & 0x1000000) != 0)
                {
                  __int16 v141 = *(_WORD *)(v317 + 44);
                  unint64_t v142 = v317;
                  if ((v141 & 4) != 0)
                  {
                    do
                      unint64_t v142 = *(void *)v142 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v142 + 44) & 4) != 0);
                  }
                  uint64_t v143 = v317;
                  if ((v141 & 8) != 0)
                  {
                    do
                      uint64_t v143 = *(void *)(v143 + 8);
                    while ((*(_WORD *)(v143 + 44) & 8) != 0);
                  }
                  unint64_t v144 = *(void *)(v143 + 8);
                  if (v142 == v144)
                  {
                    uint64_t v145 = v325;
                  }
                  else
                  {
                    uint64_t v145 = v325;
                    do
                    {
                      unsigned int v146 = **(unsigned __int16 **)(v142 + 16);
                      BOOL v237 = v146 > 0x17;
                      int v147 = (1 << v146) & 0x83E000;
                      if (v237 || v147 == 0) {
                        goto LABEL_259;
                      }
                      unint64_t v142 = *(void *)(v142 + 8);
                    }
                    while (v142 != v144);
                    unint64_t v142 = v144;
                  }
LABEL_259:
                  uint64_t v176 = *(void *)(v145[36] + 288);
                  uint64_t v177 = *(void *)(v176 + 368);
                  uint64_t v178 = *(unsigned int *)(v176 + 384);
                  if (v178)
                  {
                    LODWORD(v179) = ((v142 >> 4) ^ (v142 >> 9)) & (v178 - 1);
                    unsigned int v180 = (uint64_t *)(v177 + 16 * v179);
                    uint64_t v181 = *v180;
                    if (v142 != *v180)
                    {
                      int v182 = 1;
                      do
                      {
                        if (v181 == -4096) {
                          goto LABEL_265;
                        }
                        int v183 = v179 + v182++;
                        uint64_t v179 = v183 & (v178 - 1);
                        uint64_t v181 = *(void *)(v177 + 16 * v179);
                      }
                      while (v142 != v181);
                      unsigned int v180 = (uint64_t *)(v177 + 16 * v179);
                    }
                  }
                  else
                  {
LABEL_265:
                    unsigned int v180 = (uint64_t *)(v177 + 16 * v178);
                  }
                  unint64_t v184 = v180[1] & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v185 = v145[32];
                  if (v185) {
                    uint64_t v186 = (void *)(v185 + 8);
                  }
                  else {
                    uint64_t v186 = 0;
                  }
                  unint64_t v187 = *(unsigned int *)(*v186 + 24 * v105 + 16);
                  unint64_t v188 = (_WORD *)(v186[6] + ((v187 >> 3) & 0x1FFFFFFE));
                  unsigned __int16 v189 = *v188 + (v187 & 0xF) * v105;
                  while (2)
                  {
                    unsigned __int16 v190 = v189;
                    uint64_t v191 = *(void *)(*(void *)(v325[36] + 680) + 8 * v189);
                    if (!v191) {
                      operator new();
                    }
                    unsigned int v192 = *(_DWORD *)(v191 + 8);
                    v193 = *(void **)v191;
                    if (v192)
                    {
                      uint64_t v194 = v193[3 * v192 - 2];
                      unsigned int v195 = *(_DWORD *)(v184 + 24) | 3;
                      unsigned int v196 = (v194 >> 1) & 3 | *(_DWORD *)((v194 & 0xFFFFFFFFFFFFFFF8) + 24);
                      unint64_t v197 = *(unsigned int *)(v191 + 8);
                      uint64_t v198 = *(void **)v191;
                      unint64_t v199 = v197;
                      if (v195 < v196)
                      {
                        do
                        {
                          unint64_t v200 = v199 >> 1;
                          uint64_t v201 = v198[3 * (v199 >> 1) + 1];
                          LODWORD(v201) = (v201 >> 1) & 3 | *(_DWORD *)((v201 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v199 -= (v199 >> 1) + 1;
                          BOOL v202 = v195 >= v201;
                          if (v195 >= v201) {
                            unint64_t v203 = v200 + 1;
                          }
                          else {
                            unint64_t v203 = 0;
                          }
                          v198 += 3 * v203;
                          if (!v202) {
                            unint64_t v199 = v200;
                          }
                        }
                        while (v199);
                        unint64_t v197 = *(unsigned int *)(v191 + 8);
                        goto LABEL_282;
                      }
                    }
                    else
                    {
                      unint64_t v197 = 0;
                    }
                    uint64_t v198 = &v193[3 * v197];
LABEL_282:
                    uint64_t v204 = &v193[3 * v197];
                    if (v198 != v204)
                    {
                      unsigned int v205 = (*v198 >> 1) & 3 | *(_DWORD *)((*v198 & 0xFFFFFFFFFFFFFFF8) + 24);
                      unsigned int v206 = *(_DWORD *)(v184 + 24);
                      BOOL v207 = v205 > (v206 | 3) || v192 == 0;
                      if (!v207
                        && v206 < ((*(v204 - 2) >> 1) & 3 | *(_DWORD *)((*(v204 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                    + 24)))
                      {
                        do
                        {
                          unint64_t v208 = v197 >> 1;
                          uint64_t v209 = v193[3 * (v197 >> 1) + 1];
                          LODWORD(v209) = (v209 >> 1) & 3 | *(_DWORD *)((v209 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v197 -= (v197 >> 1) + 1;
                          BOOL v210 = v206 >= v209;
                          if (v206 >= v209) {
                            unint64_t v211 = v208 + 1;
                          }
                          else {
                            unint64_t v211 = 0;
                          }
                          v193 += 3 * v211;
                          if (!v210) {
                            unint64_t v197 = v208;
                          }
                        }
                        while (v197);
                        if (v193 != v204
                          && ((*v193 >> 1) & 3 | *(_DWORD *)((*v193 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v206)
                        {
                          goto LABEL_160;
                        }
                      }
                    }
                    int v212 = (unsigned __int16)v188[1];
                    ++v188;
                    unsigned __int16 v189 = v212 + v190;
                    if (!v212) {
                      break;
                    }
                    continue;
                  }
                }
              }
              else if (v112 & 0x1000000) != 0 || ((v112 >> 26) & ~BYTE3(v112))
              {
LABEL_160:
                if (v332 >= (unint64_t)HIDWORD(v332)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v331 + v332) = v105;
                LODWORD(v332) = v332 + 1;
              }
              uint64_t v84 = v325;
              if ((*(_DWORD *)v100 & 0x1000000) != 0)
              {
                if ((~*(_DWORD *)v100 & 0x5000000) != 0)
                {
                  if (v335 >= (unint64_t)HIDWORD(v335)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v334[v335] = v105;
                  LODWORD(v335) = v335 + 1;
                }
                else
                {
                  if (v329 >= (unint64_t)HIDWORD(v329)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v328 + v329) = v105;
                  LODWORD(v329) = v329 + 1;
                }
              }
            }
            else if ((v112 & 0x1000000) == 0)
            {
              if ((v112 & 0x10000000) == 0)
              {
                int v120 = *((_DWORD *)v100 + 1);
                uint64_t v121 = v84[36];
                uint64_t v122 = v120 & 0x7FFFFFFF;
                uint64_t v123 = (void *)(v121 + 408);
                uint64_t v124 = *(unsigned int *)(v121 + 416);
                if ((v120 & 0x7FFFFFFFu) >= v124)
                {
                  sub_1CB9153B8((uint64_t)v123, v122 - v124 + 1, *(void *)(v121 + 424));
LABEL_252:
                  operator new();
                }
                uint64_t v125 = *(void *)(*v123 + 8 * v122);
                if (!v125) {
                  goto LABEL_252;
                }
                unint64_t v126 = (unint64_t)v100[1];
                uint64_t v127 = *(void *)(v121 + 288);
                __int16 v128 = *(_WORD *)(v126 + 44);
                unint64_t v129 = v126;
                if ((v128 & 4) != 0)
                {
                  do
                    unint64_t v129 = *(void *)v129 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v129 + 44) & 4) != 0);
                }
                if ((v128 & 8) != 0)
                {
                  do
                    unint64_t v126 = *(void *)(v126 + 8);
                  while ((*(_WORD *)(v126 + 44) & 8) != 0);
                }
                unint64_t v130 = *(void *)(v126 + 8);
                if (v129 != v130)
                {
                  while (1)
                  {
                    unsigned int v131 = **(unsigned __int16 **)(v129 + 16);
                    BOOL v237 = v131 > 0x17;
                    int v132 = (1 << v131) & 0x83E000;
                    if (v237 || v132 == 0) {
                      break;
                    }
                    unint64_t v129 = *(void *)(v129 + 8);
                    if (v129 == v130)
                    {
                      unint64_t v129 = v130;
                      break;
                    }
                  }
                }
                uint64_t v134 = *(void *)(v127 + 368);
                uint64_t v135 = *(unsigned int *)(v127 + 384);
                if (v135)
                {
                  LODWORD(v136) = ((v129 >> 4) ^ (v129 >> 9)) & (v135 - 1);
                  char v137 = (uint64_t *)(v134 + 16 * v136);
                  uint64_t v138 = *v137;
                  if (v129 != *v137)
                  {
                    int v139 = 1;
                    while (v138 != -4096)
                    {
                      int v140 = v136 + v139++;
                      uint64_t v136 = v140 & (v135 - 1);
                      uint64_t v138 = *(void *)(v134 + 16 * v136);
                      if (v129 == v138)
                      {
                        char v137 = (uint64_t *)(v134 + 16 * v136);
                        goto LABEL_212;
                      }
                    }
                    goto LABEL_211;
                  }
                }
                else
                {
LABEL_211:
                  char v137 = (uint64_t *)(v134 + 16 * v135);
                }
LABEL_212:
                unint64_t v112 = *(unsigned int *)v100;
                uint64_t v152 = *(void *)(v125 + 104);
                if (v152)
                {
                  uint64_t v84 = v325;
                  uint64_t v153 = v137[1];
                  unint64_t v154 = v153 & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v155 = (v153 >> 1) & 3;
                  while (2)
                  {
                    if ((*(void *)(v152 + 112) & *(void *)(*(void *)(v325[32] + 232) + 8
                                                                                              * ((v112 >> 8) & 0xFFF))) == 0)
                      goto LABEL_228;
                    unsigned int v156 = *(_DWORD *)(v152 + 8);
                    uint64_t v157 = *(void **)v152;
                    if (v156)
                    {
                      uint64_t v158 = v157[3 * v156 - 2];
                      unsigned int v159 = *(_DWORD *)(v154 + 24) | v155;
                      unsigned int v160 = (v158 >> 1) & 3 | *(_DWORD *)((v158 & 0xFFFFFFFFFFFFFFF8) + 24);
                      unsigned int v161 = *(void **)v152;
                      unint64_t v162 = *(unsigned int *)(v152 + 8);
                      if (v159 < v160)
                      {
                        do
                        {
                          unint64_t v163 = v162 >> 1;
                          uint64_t v164 = v161[3 * (v162 >> 1) + 1];
                          LODWORD(v164) = (v164 >> 1) & 3 | *(_DWORD *)((v164 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v162 -= (v162 >> 1) + 1;
                          BOOL v165 = v159 >= v164;
                          if (v159 >= v164) {
                            unint64_t v166 = v163 + 1;
                          }
                          else {
                            unint64_t v166 = 0;
                          }
                          v161 += 3 * v166;
                          if (!v165) {
                            unint64_t v162 = v163;
                          }
                        }
                        while (v162);
                        goto LABEL_226;
                      }
                    }
                    else
                    {
                      unsigned int v156 = 0;
                    }
                    unsigned int v161 = &v157[3 * v156];
LABEL_226:
                    if (v161 != &v157[3 * v156]
                      && ((*v161 >> 1) & 3 | *(_DWORD *)((*v161 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v154 + 24) | v155))
                    {
                      goto LABEL_232;
                    }
LABEL_228:
                    uint64_t v152 = *(void *)(v152 + 104);
                    if (!v152) {
                      goto LABEL_231;
                    }
                    continue;
                  }
                }
                uint64_t v84 = v325;
              }
LABEL_231:
              *(_DWORD *)int v100 = v112 | 0x10000000;
            }
LABEL_232:
            int v167 = *(_DWORD *)v100;
            if ((*(_DWORD *)v100 & 0x1000000) != 0)
            {
              v167 &= 0xCFFFFFFF;
              *(_DWORD *)int v100 = v167;
            }
            unsigned int v168 = (void *)v84[32];
            uint64_t v169 = v168[1];
            uint64_t v170 = v168[7];
            uint64_t v171 = *(unsigned int *)(v169 + 24 * v105 + 4);
            uint64_t v98 = v317;
            if (*(_WORD *)(v170 + 2 * v171))
            {
              unsigned __int16 v172 = *(_WORD *)(v170 + 2 * v171) + v105;
              unsigned int v173 = (unsigned __int16 *)(v168[11] + 2 * *(unsigned int *)(v169 + 24 * v105 + 12));
              unsigned int v174 = (unsigned __int16 *)(v170 + 2 * v171 + 2);
              while (v113 != *v173)
              {
                int v175 = *v174++;
                v172 += v175;
                ++v173;
                if (!v175) {
                  goto LABEL_238;
                }
              }
              unsigned int v105 = v172;
            }
            else
            {
LABEL_238:
              unsigned int v105 = 0;
            }
            *(_DWORD *)int v100 = v167 & 0xFFF000FF;
          }
          llvm::MachineOperand::setReg((uint64_t)v100, v105);
          *(_DWORD *)v100 |= 0x8000000u;
LABEL_242:
          v100 += 4;
          if (v100 == (int **)v101) {
            break;
          }
          continue;
        }
      }
      while (v332)
      {
        unsigned int v213 = *((_DWORD *)v331 + v332 - 1);
        LODWORD(v332) = v332 - 1;
        llvm::MachineInstr::addRegisterKilled((llvm::MachineInstr *)v98, v213, v84[32], 1);
      }
      while (v329)
      {
        unsigned int v214 = *((_DWORD *)v328 + v329 - 1);
        LODWORD(v329) = v329 - 1;
        llvm::MachineInstr::addRegisterDead((llvm::MachineInstr *)v98, v214, v84[32], 1);
      }
      while (v335)
      {
        unsigned int v215 = v334[v335 - 1];
        LODWORD(v335) = v335 - 1;
        llvm::MachineInstr::addRegisterDefined(v98, v215, v84[32]);
      }
      int v216 = **(unsigned __int16 **)(v98 + 16);
      BOOL v217 = v216 == 19 || v216 == 7;
      if (v217 && (*(_WORD *)(v98 + 44) & 0xC) == 4)
      {
        uint64_t v337 = v339;
        v339[0] = v98;
        uint64_t v338 = 0x200000001;
        uint64_t v218 = *(void *)(v98 + 24);
        unint64_t v219 = *(void *)v98 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v320 = v218;
        uint64_t v220 = v218 + 48;
        uint64_t v221 = 1;
        if (v220 == v219)
        {
          v224 = v339;
        }
        else
        {
          do
          {
            if ((*(_WORD *)(v219 + 44) & 8) == 0) {
              break;
            }
            int v222 = **(unsigned __int16 **)(v219 + 16);
            if (v222 != 19 && v222 != 7) {
              goto LABEL_376;
            }
            if (v221 >= HIDWORD(v338)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v337[v221] = v219;
            uint64_t v221 = (v338 + 1);
            LODWORD(v338) = v338 + 1;
            unint64_t v219 = *(void *)v219 & 0xFFFFFFFFFFFFFFF8;
          }
          while (v220 != v219);
          v224 = v337;
        }
        unint64_t v225 = v221;
        uint64_t v322 = v224[v221 - 1];
        while ((int)v221 >= 2)
        {
          uint64_t v226 = v221;
          int v324 = v221;
          uint64_t v227 = v221;
          do
          {
            int v228 = v226--;
            unint64_t v229 = v337;
            uint64_t v230 = v337[v226];
            unint64_t v231 = (int)v227;
            if (v225 < (int)v227) {
              unint64_t v231 = v225;
            }
            if (v231)
            {
              v232 = (void *)(v325[32] + 8);
              uint64_t v233 = 8 * v231;
              int v234 = (char *)v337;
              while (1)
              {
                if (*(void *)v234 != v230)
                {
                  unsigned int v235 = *(_DWORD *)(*(void *)(v230 + 32) + 4);
                  unsigned int v236 = *(_DWORD *)(*(void *)(*(void *)v234 + 32) + 36);
                  if (v235 == v236) {
                    break;
                  }
                  BOOL v237 = v235 - 1 > 0x3FFFFFFE || v236 - 1 > 0x3FFFFFFE;
                  if (!v237 && llvm::MCRegisterInfo::regsOverlap(v232, v235, v236)) {
                    break;
                  }
                }
                v234 += 8;
                v233 -= 8;
                if (!v233) {
                  goto LABEL_341;
                }
              }
            }
            else
            {
LABEL_341:
              int v238 = v227 - 1;
              if (v227 != v228)
              {
                v229[v226] = v229[v238];
                v229[v238] = v230;
              }
              uint64_t v227 = (v227 - 1);
            }
          }
          while (v226);
          uint64_t v221 = v227;
          if (v324 == v227)
          {
            uint64_t v239 = ***(void ***)v325[31];
            *(void *)unsigned int v326 = "register rewriting failed: cycle in copy bundle";
            __int16 v327 = 259;
            llvm::LLVMContext::emitError(v239, (uint64_t)v326);
            break;
          }
        }
        if (v338)
        {
          uint64_t v240 = (char *)v337;
          uint64_t v241 = (char *)&v337[v338];
          uint64_t v242 = v322;
          do
          {
            uint64_t v244 = *((void *)v241 - 1);
            v241 -= 8;
            uint64_t v243 = v244;
            if (v244 == v242)
            {
              __int16 v250 = *(_WORD *)(v242 + 44);
              if ((v250 & 8) != 0)
              {
                *(_WORD *)(v242 + 44) = v250 & 0xFFF7;
                uint64_t v242 = *(void *)(v242 + 8);
                *(_WORD *)(v242 + 44) &= ~4u;
              }
            }
            else
            {
              llvm::MachineBasicBlock::remove_instr(*(llvm::MachineBasicBlock **)(v243 + 24), (llvm::MachineInstr *)v243);
              uint64_t v245 = *(void *)(v320 + 40);
              *(void *)(v243 + 24) = v245;
              uint64_t v246 = *(void *)(v245 + 32);
              uint64_t v247 = *(unsigned int *)(v243 + 40);
              if (v247)
              {
                uint64_t v253 = *(void *)(v243 + 32);
                uint64_t v254 = *(void *)(v246 + 40);
                uint64_t v255 = 32 * v247;
                do
                {
                  if (!*(unsigned char *)v253)
                  {
                    uint64_t v256 = *(unsigned int *)(v253 + 4);
                    if ((int)v256 >= 0) {
                      unsigned int v257 = (uint64_t *)(*(void *)(v254 + 272) + 8 * v256);
                    }
                    else {
                      unsigned int v257 = (uint64_t *)(*(void *)(v254 + 24) + 16 * (v256 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v258 = *v257;
                    if (*v257)
                    {
                      uint64_t v259 = *(void *)(v258 + 16);
                      *(void *)(v258 + 16) = v253;
                      *(void *)(v253 + 16) = v259;
                      if (*(unsigned char *)(v253 + 3))
                      {
                        *(void *)(v253 + 24) = v258;
                      }
                      else
                      {
                        *(void *)(v253 + 24) = 0;
                        unsigned int v257 = (uint64_t *)(v259 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v253 + 16) = v253;
                      *(void *)(v253 + 24) = 0;
                    }
                    *unsigned int v257 = v253;
                  }
                  v253 += 32;
                  v255 -= 32;
                }
                while (v255);
              }
              uint64_t v248 = *(void *)(v246 + 728);
              if (v248) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v248 + 24))(v248, v243);
              }
              unint64_t v249 = *(void *)v242 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v243 = v249 | *(void *)v243 & 7;
              *(void *)(v243 + 8) = v242;
              *(void *)(v249 + 8) = v243;
              *(void *)uint64_t v242 = *(void *)v242 & 7 | v243;
            }
            uint64_t v251 = v325[35];
            if (v251) {
              BOOL v252 = v243 == v322;
            }
            else {
              BOOL v252 = 1;
            }
            if (!v252) {
              sub_1CB914C88(v251, v243, 0);
            }
          }
          while (v241 != v240);
        }
LABEL_376:
        if (v337 != v339) {
          free(v337);
        }
        uint64_t v98 = v317;
        int v216 = **(unsigned __int16 **)(v317 + 16);
        uint64_t v84 = v325;
      }
      if (v216 == 19)
      {
        unint64_t v260 = *(int **)(v98 + 32);
        int v261 = v260[1];
        if (v261 == v260[9])
        {
          int v262 = *v260;
          int v263 = v260[8];
          if (((v263 ^ v262) & 0xFFF00) == 0)
          {
            v326[0] = v261;
            if ((v261 & 0x80000000) == 0) {
              break;
            }
          }
        }
      }
LABEL_382:
      uint64_t v98 = v316;
      if ((void *)v316 == v313) {
        goto LABEL_407;
      }
    }
    int v264 = *((_DWORD *)v84 + 82);
    if (v264)
    {
      uint64_t v265 = v84[39];
      int v266 = v264 - 1;
      unsigned int v267 = v266 & (37 * v261);
      uint64_t v268 = (char *)(v265 + 4 * v267);
      int v269 = *(_DWORD *)v268;
      if (v261 == *(_DWORD *)v268)
      {
LABEL_401:
        if ((v263 & 0x10000000) != 0 || *(_DWORD *)(v98 + 40) >= 3u)
        {
          *(void *)(v98 + 16) = *(void *)(v84[33] + 8) + 336;
        }
        else
        {
          uint64_t v276 = (int32x2_t *)v84[35];
          if (v276) {
            llvm::SlotIndexes::removeSingleMachineInstrFromMaps(v276, (llvm::MachineInstr *)v98);
          }
          uint64_t v277 = *(void *)(v98 + 24);
          sub_1CC319554(v98);
          sub_1CC3195AC(v277 + 40, v98);
        }
        goto LABEL_382;
      }
      unint64_t v270 = 0;
      int v271 = 1;
      while (v269 != -1)
      {
        if (v270) {
          BOOL v272 = 0;
        }
        else {
          BOOL v272 = v269 == -2;
        }
        if (v272) {
          unint64_t v270 = v268;
        }
        unsigned int v273 = v267 + v271++;
        unsigned int v267 = v273 & v266;
        uint64_t v268 = (char *)(v265 + 4 * v267);
        int v269 = *(_DWORD *)v268;
        if (v261 == *(_DWORD *)v268) {
          goto LABEL_401;
        }
      }
      if (v270) {
        uint64_t v274 = v270;
      }
      else {
        uint64_t v274 = v268;
      }
    }
    else
    {
      uint64_t v274 = 0;
    }
    uint64_t v275 = sub_1CBA855C4(v312, (uint64_t)v326, v326, v274);
    *(_DWORD *)uint64_t v275 = v326[0];
    int v263 = *(_DWORD *)(*(void *)(v98 + 32) + 32);
    goto LABEL_401;
  }
LABEL_408:
  if (v84[36])
  {
    uint64_t v278 = v84[39];
    uint64_t v279 = *((unsigned int *)v84 + 82);
    uint64_t v280 = (unsigned int *)(v278 + 4 * v279);
    if (*((_DWORD *)v84 + 80))
    {
      if (v279)
      {
        uint64_t v281 = 4 * v279;
        uint64_t v282 = (unsigned int *)v84[39];
        while (*v282 >= 0xFFFFFFFE)
        {
          ++v282;
          v281 -= 4;
          if (!v281) {
            goto LABEL_414;
          }
        }
      }
      else
      {
        uint64_t v282 = (unsigned int *)v84[39];
      }
    }
    else
    {
LABEL_414:
      uint64_t v282 = (unsigned int *)(v278 + 4 * v279);
    }
    unsigned int v283 = (unsigned int *)(v278 + 4 * v279);
    while (v282 != v283)
    {
      unsigned int v284 = *v282;
      uint64_t v285 = v84[32];
      if (v285) {
        uint64_t v286 = (void *)(v285 + 8);
      }
      else {
        uint64_t v286 = 0;
      }
      unint64_t v287 = *(unsigned int *)(*v286 + 24 * v284 + 16);
      int v288 = (_WORD *)(v286[6] + ((v287 >> 3) & 0x1FFFFFFE));
      __int16 v290 = *v288;
      uint64_t v289 = v288 + 1;
      unsigned __int16 v291 = v290 + (v287 & 0xF) * v284;
      do
      {
        uint64_t v292 = v84[36];
        uint64_t v293 = v291;
        uint64_t v294 = *(void *)(v292 + 680);
        uint64_t v295 = *(void *)(v294 + 8 * v293);
        if (v295)
        {
          uint64_t v296 = *(void *)(v295 + 96);
          *(void *)(v295 + 96) = 0;
          if (v296)
          {
            sub_1CB833A08(v296, *(void **)(v296 + 8));
            MEMORY[0x1D25D9CE0](v296, 0x1020C4062D53EE8);
          }
          uint64_t v297 = *(void **)(v295 + 64);
          if (v297 != (void *)(v295 + 80)) {
            free(v297);
          }
          if (*(void *)v295 != v295 + 16) {
            free(*(void **)v295);
          }
          MEMORY[0x1D25D9CE0](v295, 0x10A0C40E42201FCLL);
          uint64_t v294 = *(void *)(v292 + 680);
        }
        *(void *)(v294 + 8 * v293) = 0;
        int v298 = *v289++;
        unsigned __int16 v291 = v298 + v293;
        uint64_t v84 = v325;
      }
      while (v298);
      char v299 = v282 + 1;
      while (v299 != v280)
      {
        unsigned int v300 = *v299++;
        if (v300 <= 0xFFFFFFFD)
        {
          uint64_t v282 = v299 - 1;
          goto LABEL_435;
        }
      }
      uint64_t v282 = v280;
LABEL_435:
      ;
    }
  }
  int v301 = *((_DWORD *)v84 + 80);
  if (v301 || *((_DWORD *)v84 + 81))
  {
    uint64_t v308 = (void **)(v84 + 39);
    uint64_t v309 = *((unsigned int *)v84 + 82);
    if (v309 <= 4 * v301 || v309 < 0x41)
    {
      if (v309) {
        memset(*v308, 255, 4 * v309);
      }
      v84[40] = 0;
    }
    else
    {
      sub_1CBB23624(v308);
    }
  }
  if (v331 != v333) {
    free(v331);
  }
  if (v334 != (_DWORD *)v336) {
    free(v334);
  }
  if (v328 != v330) {
    free(v328);
  }
  uint64_t v302 = v84[38];
  if (v302 && *((unsigned char *)v84 + 336))
  {
    sub_1CC2E6324(v302, (void *)v84[37]);
    uint64_t v303 = v84[37];
    *(_DWORD *)(v303 + 288) = 0;
    llvm::VirtRegMap::grow(v303);
    uint64_t v304 = v84[34];
    *(_DWORD *)(v304 + 32) = 0;
    uint64_t v305 = *(void *)(v304 + 456);
    uint64_t v306 = *(void *)(v304 + 464);
    while (v305 != v306)
    {
      *(_DWORD *)(v305 + 4) = 0;
      v305 += 8;
    }
  }
  return 1;
}

uint64_t sub_1CC4C8210@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 336))
  {
    *(void *)(a2 + 16) = 8;
  }
  else
  {
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(void *)(a2 + 16) = 0;
  }
  *(void *)a2 = a2 + 16;
  *(_DWORD *)(a2 + 8) = 1;
  *(_DWORD *)(a2 + 12) = 6;
  *(_DWORD *)(a2 + 64) = 11;
  return result;
}

void sub_1CC4C8260()
{
}

void *llvm::calculateWasmEHInfo(void *result, uint64_t a2)
{
  uint64_t v2 = result + 9;
  uint64_t v3 = (void *)result[10];
  if (v3 != result + 9)
  {
    do
    {
      if (v3) {
        uint64_t v5 = (uint64_t)(v3 - 3);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void *)(v5 + 48);
      uint64_t v7 = v6 - 24;
      if (!v6) {
        uint64_t v7 = 0;
      }
      int v8 = *(unsigned __int8 *)(v7 + 16);
      uint64_t v9 = *(void *)(v5 + 48);
      if (v8 == 83)
      {
        uint64_t v9 = *(void *)(v5 + 48);
        do
        {
          uint64_t v9 = *(void *)(v9 + 8);
          uint64_t v10 = v9 - 24;
          if (!v9) {
            uint64_t v10 = 0;
          }
        }
        while (*(unsigned char *)(v10 + 16) == 83);
      }
      unsigned int v11 = *(unsigned __int8 *)(v9 - 8) - 38;
      BOOL v12 = v11 > 0x38;
      uint64_t v13 = (1 << v11) & 0x100060000000001;
      if (!v12 && v13 != 0)
      {
        while (1)
        {
          uint64_t v15 = v6 - 24;
          if (!v6) {
            uint64_t v15 = 0;
          }
          if (*(unsigned char *)(v15 + 16) != 83) {
            break;
          }
          uint64_t v6 = *(void *)(v6 + 8);
          if (v6 == v5 + 40) {
            goto LABEL_27;
          }
        }
        if (*(unsigned char *)(v6 - 8) == 80)
        {
          uint64_t v16 = *(void *)(v6 - 56);
          if (*(_WORD *)(v16 + 18))
          {
            int v17 = *(_DWORD *)(v16 + 20);
            uint64_t v18 = (v17 & 0x40000000) != 0 ? *(void *)(v16 - 8) : v16 - 32 * (v17 & 0x7FFFFFF);
            uint64_t v19 = *(void *)(v18 + 32);
            if (v19)
            {
              for (uint64_t i = *(void *)(v19 + 48); i != v19 + 40; uint64_t i = *(void *)(i + 8))
              {
                if (i) {
                  uint64_t v21 = i - 24;
                }
                else {
                  uint64_t v21 = 0;
                }
                if (*(unsigned char *)(v21 + 16) != 83)
                {
                  if (*(unsigned char *)(i - 8) == 38)
                  {
                    int v22 = *(_DWORD *)(i - 4);
                    if ((v22 & 0x40000000) != 0) {
                      uint64_t v23 = *(void *)(i - 32);
                    }
                    else {
                      uint64_t v23 = i - 24 - 32 * (v22 & 0x7FFFFFF);
                    }
                    if (*(_WORD *)(i - 6)) {
                      uint64_t v24 = 64;
                    }
                    else {
                      uint64_t v24 = 32;
                    }
                    uint64_t v19 = *(void *)(v23 + v24);
                  }
                  break;
                }
              }
              double result = sub_1CD58E338(a2, v5, v19);
            }
          }
        }
      }
LABEL_27:
      uint64_t v3 = (void *)v3[1];
    }
    while (v3 != v2);
  }
  return result;
}

void sub_1CC4C84A8()
{
}

void sub_1CC4C851C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC4C8554()
{
  return "WebAssembly Exception handling preparation";
}

uint64_t sub_1CC4C8564(uint64_t a1, uint64_t **a2)
{
  void v9[3] = *MEMORY[0x1E4F143B8];
  int v8 = *a2;
  uint64_t v3 = **a2;
  unint64_t v4 = llvm::PointerType::get((llvm::PointerType *)(v3 + 1912), 0);
  uint64_t v5 = *v8 + 1960;
  uint64_t v6 = *(uint64_t **)(v3 + 1960);
  v9[0] = v3 + 1960;
  v9[1] = v4;
  v9[2] = v5;
  *(void *)(a1 + 32) = llvm::StructType::get(v6, (uint64_t)v9, 3, 0);
  return 0;
}

uint64_t sub_1CC4C869C(uint64_t a1, uint64_t **a2)
{
  v132[1] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (uint64_t **)a2[5];
  uint64_t v5 = **a2;
  int v103 = v105;
  uint64_t v104 = 0x200000000;
  uint64_t v108 = v5;
  unsigned int v109 = &v117;
  uint64_t v110 = &v118;
  uint64_t v111 = 0;
  int v112 = 0;
  __int16 v113 = 512;
  char v114 = 7;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  int v117 = &unk_1F2616E88;
  BOOL v118 = &unk_1F2617008;
  llvm::Intrinsic::getType(*v4, 11093, 0, 0);
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v4, 11093, 0, 0);
  inserted = llvm::Module::getOrInsertFunction((uint64_t)v4, "llvm.wasm.throw", (const char *)0xF, Type, 0);
  uint64_t v97 = a1;
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9)
  {
    LODWORD(v10) = 0;
    do
    {
      uint64_t v11 = *(void *)(v9 + 24);
      uint64_t v12 = *(void *)(v11 + 40);
      if (*(uint64_t ***)(v12 + 56) == a2)
      {
        uint64_t v13 = *(void *)(v12 + 40);
        if (v13 == v12 + 40)
        {
LABEL_78:
          unsigned int v35 = 0;
          int v16 = 0;
          __src = v121;
          HIDWORD(v120) = 4;
        }
        else
        {
          uint64_t v10 = (llvm::Instruction *)(v13 - 24);
          if (v13) {
            uint64_t v14 = v13 - 24;
          }
          else {
            uint64_t v14 = 0;
          }
          if (*(unsigned char *)(v14 + 16) == 30)
          {
            if ((*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 3) {
              unsigned int v35 = 2;
            }
            else {
              unsigned int v35 = 1;
            }
LABEL_15:
            __src = v121;
            uint64_t v120 = 0x400000000;
          }
          else
          {
            unsigned int v35 = 0;
            switch(*(unsigned char *)(v14 + 16))
            {
              case 0x1D:
              case 0x22:
              case 0x23:
                goto LABEL_15;
              case 0x1E:
LABEL_169:
                __break(1u);
                goto LABEL_170;
              case 0x1F:
                unsigned int v35 = (*(_DWORD *)(v14 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 0x20:
              case 0x26:
                unsigned int v35 = (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) - 1;
                break;
              case 0x21:
                unsigned int v35 = 2;
                goto LABEL_15;
              case 0x24:
                unsigned int v35 = *(_WORD *)(v14 + 18) & 1;
                goto LABEL_15;
              case 0x25:
                unsigned int v35 = 1;
                goto LABEL_15;
              case 0x27:
                unsigned int v35 = *(_DWORD *)(v14 + 80) + 1;
                break;
              default:
                goto LABEL_78;
            }
            __src = v121;
            uint64_t v120 = 0x400000000;
            if (v35 >= 5) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
          }
          if (v35)
          {
            uint64_t v15 = 0;
            do
            {
              v121[v15] = llvm::Instruction::getSuccessor(v10, v15);
              ++v15;
            }
            while (v35 != v15);
            int v16 = v120;
          }
          else
          {
            int v16 = 0;
          }
        }
        LODWORD(v120) = v16 + v35;
        uint64_t v17 = v11 + 24;
        if (!v11) {
          uint64_t v17 = 0;
        }
        if (*(void *)(v17 + 8) != v12 + 40) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        uint64_t v106 = v12;
        uint64_t v107 = v12 + 40;
        inserted = LLVMBuildUnreachable_0((uint64_t)&v103);
        int v18 = v120;
        int v100 = v102;
        uint64_t v101 = 0x800000000;
        if (v120 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v120)
        {
          inserted = memcpy(v102, __src, 8 * v120);
          int v19 = v101;
        }
        else
        {
          int v19 = 0;
        }
        LODWORD(v20) = v19 + v18;
        LODWORD(v101) = v20;
        while (v20)
        {
          uint64_t v21 = (llvm *)*((void *)v100 + v20 - 1);
          uint64_t v20 = (v20 - 1);
          LODWORD(v101) = v20;
          uint64_t v22 = *((void *)v21 + 1);
          if (v22)
          {
            while (1)
            {
              uint64_t v23 = *(void *)(v22 + 24);
              unsigned int v24 = *(unsigned __int8 *)(v23 + 16);
              BOOL v25 = v23 && v24 >= 0x1C;
              if (v25 && v24 - 29 < 0xB) {
                break;
              }
              uint64_t v22 = *(void *)(v22 + 8);
              if (!v22) {
                goto LABEL_40;
              }
            }
          }
          else
          {
LABEL_40:
            unint64_t v27 = (void *)*((void *)v21 + 5);
            if (v27 == (void *)((char *)v21 + 40))
            {
LABEL_50:
              uint64_t v10 = 0;
              int v31 = 0;
            }
            else
            {
              uint64_t v10 = (llvm::Instruction *)(v27 - 3);
              if (v27) {
                unsigned int v28 = v27 - 3;
              }
              else {
                unsigned int v28 = 0;
              }
              int v29 = *((unsigned __int8 *)v28 + 16);
              int v30 = v29 - 29;
              if (v29 != 30)
              {
                int v34 = 0;
                switch(v30)
                {
                  case 0:
                  case 5:
                  case 6:
                    goto LABEL_49;
                  case 1:
                    goto LABEL_169;
                  case 2:
                    int v34 = (*((_DWORD *)v28 + 5) >> 1) & 0x3FFFFFF;
                    goto LABEL_49;
                  case 3:
                  case 9:
                    int v34 = (*((_DWORD *)v28 + 5) & 0x7FFFFFF) - 1;
                    goto LABEL_49;
                  case 4:
                    int v34 = 2;
                    goto LABEL_49;
                  case 7:
                    int v34 = *((_WORD *)v28 + 9) & 1;
                    goto LABEL_49;
                  case 8:
                    int v34 = 1;
                    goto LABEL_49;
                  case 10:
                    int v34 = *((_DWORD *)v28 + 20) + 1;
                    goto LABEL_49;
                  default:
                    goto LABEL_50;
                }
              }
              if ((*((_DWORD *)v28 + 5) & 0x7FFFFFF) == 3) {
                int v34 = 2;
              }
              else {
                int v34 = 1;
              }
LABEL_49:
              int v31 = v34;
            }
            if (v31 + (unint64_t)v20 > HIDWORD(v101)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v31)
            {
              uint64_t v32 = 0;
              unint64_t v33 = (char *)v100 + 8 * v20;
              do
              {
                *(void *)&v33[8 * v32] = llvm::Instruction::getSuccessor(v10, v32);
                ++v32;
              }
              while (v31 != v32);
              LODWORD(v20) = v101;
            }
            LODWORD(v101) = v20 + v31;
            llvm::DeleteDeadBlock(v21, 0, 0);
            LODWORD(v20) = v101;
          }
        }
        if (v100 != v102) {
          free(v100);
        }
        inserted = __src;
        if (__src != v121) {
          free(__src);
        }
        LODWORD(v10) = 1;
      }
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    LODWORD(v10) = 0;
  }
  inserted = v103;
  if (v103 != v105) {
LABEL_170:
  }
    free(inserted);
  uint64_t v36 = (uint64_t)a2[5];
  uint64_t v37 = **a2;
  __src = v121;
  uint64_t v120 = 0x200000000;
  uint64_t v122 = v37;
  uint64_t v123 = &v131;
  uint64_t v124 = v132;
  uint64_t v125 = 0;
  int v126 = 0;
  __int16 v127 = 512;
  char v128 = 7;
  v121[4] = 0;
  v121[5] = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  unsigned int v131 = &unk_1F2616E88;
  v132[0] = &unk_1F2617008;
  int v103 = v105;
  uint64_t v104 = 0x1000000000;
  int v100 = v102;
  uint64_t v101 = 0x1000000000;
  unsigned int v38 = a2 + 9;
  uint64_t v39 = a2[10];
  if (v39 == (uint64_t *)v38)
  {
LABEL_117:
    int v54 = 0;
    goto LABEL_118;
  }
  do
  {
    if (v39) {
      uint64_t v40 = v39 - 3;
    }
    else {
      uint64_t v40 = 0;
    }
    uint64_t v41 = v40[6];
    uint64_t v42 = v41 - 24;
    if (!v41) {
      uint64_t v42 = 0;
    }
    int v43 = *(unsigned __int8 *)(v42 + 16);
    uint64_t v44 = v40[6];
    if (v43 == 83)
    {
      uint64_t v44 = v40[6];
      do
      {
        uint64_t v44 = *(void *)(v44 + 8);
        uint64_t v45 = v44 - 24;
        if (!v44) {
          uint64_t v45 = 0;
        }
      }
      while (*(unsigned char *)(v45 + 16) == 83);
    }
    unsigned int v46 = *(unsigned __int8 *)(v44 - 8) - 38;
    BOOL v47 = v46 > 0x38;
    uint64_t v48 = (1 << v46) & 0x100060000000001;
    if (!v47 && v48 != 0)
    {
      while (v43 == 83)
      {
        uint64_t v41 = *(void *)(v41 + 8);
        uint64_t v50 = v41 - 24;
        if (!v41) {
          uint64_t v50 = 0;
        }
        int v43 = *(unsigned __int8 *)(v50 + 16);
      }
      int v51 = *(unsigned __int8 *)(v41 - 8);
      if (v51 == 79)
      {
        uint64_t v52 = v101;
        if (v101 >= (unint64_t)HIDWORD(v101)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v53 = &v100;
      }
      else
      {
        if (v51 != 80) {
          goto LABEL_112;
        }
        uint64_t v52 = v104;
        if (v104 >= (unint64_t)HIDWORD(v104)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v53 = &v103;
      }
      *((void *)*v53 + v52) = v40;
      ++*((_DWORD *)v53 + 2);
    }
LABEL_112:
    uint64_t v39 = (uint64_t *)v39[1];
  }
  while (v39 != (uint64_t *)v38);
  if (!(v104 | v101)) {
    goto LABEL_117;
  }
  uint64_t v56 = (uint64_t **)v36;
  unint64_t v57 = llvm::Module::getOrInsertGlobal(v36, "__wasm_lpad_context", 0x13uLL, *(llvm::PointerType **)(v97 + 32));
  *(void *)(v97 + 40) = v57;
  *((_DWORD *)v57 + 8) = *((_DWORD *)v57 + 8) & 0xFFFFE3FF | 0x400;
  uint64_t v58 = *(void *)(v97 + 32);
  unint64_t v59 = *(uint64_t **)(v97 + 40);
  v98[0] = "lpad_index_gep";
  __int16 v99 = 259;
  *(void *)(v97 + 48) = sub_1CD57BA94((uint64_t)&__src, v58, v59, 0, 0, (uint64_t)v98);
  uint64_t v60 = *(void *)(v97 + 32);
  uint64_t v61 = *(uint64_t **)(v97 + 40);
  v98[0] = "lsda_gep";
  __int16 v99 = 259;
  *(void *)(v97 + 56) = sub_1CD57BA94((uint64_t)&__src, v60, v61, 0, 1u, (uint64_t)v98);
  uint64_t v62 = *(void *)(v97 + 32);
  unint64_t v63 = *(uint64_t **)(v97 + 40);
  v98[0] = "selector_gep";
  __int16 v99 = 259;
  *(void *)(v97 + 64) = sub_1CD57BA94((uint64_t)&__src, v62, v63, 0, 2u, (uint64_t)v98);
  llvm::Intrinsic::getType(*v56, 11060, 0, 0);
  unsigned int v64 = (llvm::PointerType *)llvm::Intrinsic::getType(*v56, 11060, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v56, "llvm.wasm.landingpad.index", (const char *)0x1A, v64, 0);
  *(void *)(v97 + 80) = v65;
  llvm::Intrinsic::getType(*v56, 11062, 0, 0);
  uint64_t v66 = (llvm::PointerType *)llvm::Intrinsic::getType(*v56, 11062, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v56, "llvm.wasm.lsda", (const char *)0xE, v66, 0);
  *(void *)(v97 + 88) = v67;
  llvm::Intrinsic::getType(*v56, 11059, 0, 0);
  uint64_t v68 = (llvm::PointerType *)llvm::Intrinsic::getType(*v56, 11059, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v56, "llvm.wasm.get.exception", (const char *)0x17, v68, 0);
  *(void *)(v97 + 96) = v69;
  llvm::Intrinsic::getType(*v56, 11058, 0, 0);
  uint64_t v70 = (llvm::PointerType *)llvm::Intrinsic::getType(*v56, 11058, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v56, "llvm.wasm.get.ehselector", (const char *)0x18, v70, 0);
  *(void *)(v97 + 112) = v71;
  llvm::Intrinsic::getType(*v56, 11052, 0, 0);
  unint64_t v72 = (llvm::PointerType *)llvm::Intrinsic::getType(*v56, 11052, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v56, "llvm.wasm.catch", (const char *)0xF, v72, 0);
  *(void *)(v97 + 104) = v73;
  unsigned int v74 = (uint64_t **)(*(void *)v122 + 1960);
  unint64_t v75 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v122 + 1912), 0);
  *(void *)(v97 + 120) = sub_1CD57B9C0((uint64_t)v56, "_Unwind_CallPersonality", (const char *)0x17, 0, v74, v75);
  *(void *)(v97 + 128) = v76;
  if (v76 && !*(unsigned char *)(v76 + 16)) {
    *(void *)(v76 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v76 + 112), **(uint64_t ***)v76, -1, 37);
  }
  if (v104)
  {
    int v77 = 0;
    unint64_t v78 = (uint64_t ***)v103;
    uint64_t v79 = (uint64_t ***)((char *)v103 + 8 * v104);
    do
    {
      unint64_t v80 = *v78;
      for (uint64_t i = (*v78)[6]; ; uint64_t i = (uint64_t *)i[1])
      {
        uint64_t v82 = i - 3;
        if (!i) {
          uint64_t v82 = 0;
        }
        if (*((unsigned char *)v82 + 16) != 83) {
          break;
        }
      }
      if ((*((_DWORD *)i - 1) & 0x7FFFFFF) == 2)
      {
        uint64_t v83 = *(i - 11);
        unsigned int v84 = *(unsigned __int8 *)(v83 + 16);
        if (v83) {
          BOOL v85 = v84 == 16;
        }
        else {
          BOOL v85 = 0;
        }
        if (v85)
        {
          uint64_t v86 = *(unsigned int *)(v83 + 32);
          if (v86 >= 0x41)
          {
            int v90 = 0;
            int64_t v91 = (unint64_t)(v86 + 63) >> 6;
            do
            {
              BOOL v47 = v91-- < 1;
              if (v47) {
                break;
              }
              unint64_t v92 = *(void *)(*(void *)(v83 + 24) + 8 * v91);
              v90 += __clz(v92);
            }
            while (!v92);
            int v93 = v86 | 0xFFFFFFC0;
            if ((v86 & 0x3F) == 0) {
              int v93 = 0;
            }
            if (v90 + v93 == v86)
            {
LABEL_156:
              sub_1CC4C92D8(v97, v80);
              goto LABEL_144;
            }
          }
          else if (!*(void *)(v83 + 24))
          {
            goto LABEL_156;
          }
        }
        else
        {
          if (v83) {
            BOOL v87 = v84 == 17;
          }
          else {
            BOOL v87 = 0;
          }
          if (v87)
          {
            if (sub_1CB844168(v83, 0.0)) {
              goto LABEL_156;
            }
          }
          else
          {
            BOOL v47 = v84 > 0x14;
            int v88 = (1 << v84) & 0x1C2000;
            if (!v47 && v88 != 0) {
              goto LABEL_156;
            }
          }
        }
      }
      sub_1CC4C92D8(v97, v80);
      ++v77;
LABEL_144:
      ++v78;
    }
    while (v78 != v79);
  }
  if (v101)
  {
    uint64_t v94 = (uint64_t ***)v100;
    uint64_t v95 = 8 * v101;
    int v54 = 1;
    do
    {
      uint64_t v96 = *v94++;
      sub_1CC4C92D8(v97, v96);
      v95 -= 8;
    }
    while (v95);
  }
  else
  {
    int v54 = 1;
  }
LABEL_118:
  if (v100 != v102) {
    free(v100);
  }
  if (v103 != v105) {
    free(v103);
  }
  if (__src != v121) {
    free(__src);
  }
  return (v10 | v54) & 1;
}

void sub_1CC4C92D8(uint64_t a1, uint64_t **a2)
{
  v49[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **a2;
  v34[0] = v35;
  v34[1] = (void *)0x200000000;
  uint64_t v38 = v4;
  uint64_t v39 = &v47;
  uint64_t v40 = &v48;
  uint64_t v41 = 0;
  int v42 = 0;
  __int16 v43 = 512;
  char v44 = 7;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  BOOL v47 = &unk_1F2616E88;
  uint64_t v48 = &unk_1F2617008;
  uint64_t v5 = a2 + 5;
  for (uint64_t i = a2[6]; i != (uint64_t *)v5; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v7 = i - 3;
    if (!i) {
      uint64_t v7 = 0;
    }
    if (*((unsigned char *)v7 + 16) != 83)
    {
      unsigned int v8 = *((unsigned __int8 *)i - 8) - 38;
      BOOL v9 = v8 > 0x38;
      uint64_t v10 = (1 << v8) & 0x100060000000001;
      if (v9 || v10 == 0) {
        uint64_t v5 = (uint64_t **)i;
      }
      else {
        uint64_t v5 = (uint64_t **)i[1];
      }
      break;
    }
  }
  uint64_t v12 = 0;
  if (v5) {
    uint64_t v13 = v5 - 3;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v36 = v13[5];
  uint64_t v37 = v13 + 3;
  uint64_t v14 = (unsigned __int8 *)v13[6];
  v49[0] = (uint64_t)v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)v49, v14, 2);
    uint64_t v12 = v49[0];
  }
  sub_1CB8461A4((uint64_t)v34, 0, v12);
  if (v49[0])
  {
    int v27 = *(unsigned __int8 *)v49[0];
    if ((v27 - 4) > 0x1E)
    {
      if ((v27 - 3) >= 0xFFFFFFFE) {
        uint64_t v30 = v49[0];
      }
      else {
        uint64_t v30 = 0;
      }
      if ((v27 - 3) < 0xFFFFFFFE)
      {
        if (v27 == 3) {
          *(void *)(v49[0] + 8) = 0;
        }
        goto LABEL_19;
      }
      unint64_t v29 = v30 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v49[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v49[0] + 12)) {
        goto LABEL_19;
      }
      uint64_t v28 = *(void *)(v49[0] + 16);
      if ((v28 & 4) == 0) {
        goto LABEL_19;
      }
      unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      if (!v29) {
        goto LABEL_19;
      }
    }
    int v31 = v49;
    sub_1CC5FA668(v29 + 16, &v31);
  }
LABEL_19:
  for (uint64_t j = a2[6]; ; uint64_t j = (uint64_t *)j[1])
  {
    uint64_t v17 = j ? (uint64_t)(j - 3) : 0;
    if (*(unsigned char *)(v17 + 16) != 83) {
      break;
    }
  }
  uint64_t v18 = *(j - 2);
  if (v18)
  {
    int v19 = 0;
    do
    {
      uint64_t v20 = *(void *)(v18 + 24);
      if (v20 && *(unsigned char *)(v20 + 16) == 84 && *(void *)(v20 - 32) == *(void *)(a1 + 96)) {
        int v19 = *(llvm::ValueAsMetadata **)(v18 + 24);
      }
      uint64_t v18 = *(void *)(v18 + 8);
    }
    while (v18);
    if (v19)
    {
      uint64_t v21 = *(void *)(a1 + 104);
      if (v21) {
        uint64_t v22 = *(uint64_t ***)(v21 + 24);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *(llvm::ConstantInt **)(*(void *)v38 + 1960);
      unsigned int v24 = *(_DWORD *)(*(void *)v38 + 1968);
      LODWORD(v32) = v24 >> 8;
      if (v24 >> 8 < 0x41)
      {
        int v31 = 0;
        BOOL v25 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v31, v15);
        if (v32 >= 0x41)
        {
          if (v31) {
            MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
          }
        }
        v49[0] = (uint64_t)v25;
        int v31 = "exn";
        LOWORD(v33) = 259;
        unint64_t v26 = (llvm::Value *)sub_1CB845BAC((uint64_t *)v34, v22, (uint64_t **)v21, v49, 1, (uint64_t)&v31, 0);
        llvm::Value::doRAUW(v19, v26, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      operator new[]();
    }
  }
  if (v34[0] != v35) {
    free(v34[0]);
  }
}

void sub_1CC4C9EE0()
{
}

BOOL sub_1CC4C9F7C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 38)
  {
    int v2 = *(_DWORD *)(a1 + 20);
    if ((v2 & 0x40000000) != 0) {
      uint64_t v3 = *(void *)(a1 - 8);
    }
    else {
      uint64_t v3 = a1 - 32 * (v2 & 0x7FFFFFF);
    }
    if (*(unsigned char *)(*(void *)v3 + 16) == 20) {
      return (*(_WORD *)(a1 + 18) & 1) == 0;
    }
    return 0;
  }
  if (v1 != 79 || *(unsigned char *)(*(void *)(a1 - 32) + 16) != 20) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 1;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      if (*(unsigned char *)(v5 + 16) == 36) {
        break;
      }
    }
    uint64_t v4 = *(void *)(v4 + 8);
    if (!v4) {
      return 1;
    }
  }
  if ((*(_WORD *)(v5 + 18) & 1) == 0) {
    return 1;
  }
  return *(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32) == 0;
}

uint64_t sub_1CC4CA034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (a2 && *(unsigned char *)(a2 + 16) == 38)
  {
    int v7 = *(_DWORD *)(a2 + 20);
    if ((v7 & 0x40000000) != 0) {
      uint64_t v8 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v8 = a2 - 32 * (v7 & 0x7FFFFFF);
    }
    uint64_t v24 = 64;
    if ((*(_WORD *)(a2 + 18) & 1) == 0) {
      uint64_t v24 = 32;
    }
    for (uint64_t i = *(void *)(*(void *)(v8 + v24) + 48); ; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v26 = i - 24;
      if (!i) {
        uint64_t v26 = 0;
      }
      if (*(unsigned char *)(v26 + 16) != 83) {
        break;
      }
    }
    uint64_t v27 = *(void *)(i + 16);
    uint64_t v28 = llvm::Value::stripPointerCasts(*(llvm::Value **)(i - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF) - 24));
    if (*((unsigned char *)v28 + 16)) {
      unint64_t v29 = 0;
    }
    else {
      unint64_t v29 = v28;
    }
    LODWORD(v65) = a3;
    BYTE4(v65) = 0;
    uint64_t v66 = v29;
    unint64_t v67 = v27 & 0xFFFFFFFFFFFFFFFBLL;
    unint64_t v30 = sub_1CD483108(a1 + 448, (unint64_t)&v65);
    uint64_t v31 = *(void *)(a1 + 448) + 24 * *(unsigned int *)(a1 + 456);
    long long v32 = *(_OWORD *)v30;
    *(void *)(v31 + 16) = *(void *)(v30 + 16);
    *(_OWORD *)uint64_t v31 = v32;
    uint64_t v33 = *(unsigned int *)(a1 + 456);
    *(_DWORD *)(a1 + 456) = v33 + 1;
    uint64_t v65 = a2;
    uint64_t result = (uint64_t)sub_1CD40EB18(a1, &v65);
    *(_DWORD *)(result + 8) = v33;
    while (1)
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        break;
      }
      uint64_t v34 = *(void *)(v6 + 24);
      unsigned int v35 = *(unsigned __int8 *)(v34 + 16);
      if (v34) {
        BOOL v36 = v35 >= 0x1C;
      }
      else {
        BOOL v36 = 0;
      }
      if (v36 && v35 - 29 < 0xB)
      {
LABEL_44:
        int v38 = *(_DWORD *)(a2 + 20);
        if ((v38 & 0x40000000) != 0) {
          uint64_t v39 = *(uint64_t **)(a2 - 8);
        }
        else {
          uint64_t v39 = (uint64_t *)(a2 - 32 * (v38 & 0x7FFFFFF));
        }
        uint64_t result = sub_1CC4D0684(*(void *)(v34 + 40), *v39);
        if (result)
        {
          for (uint64_t j = *(void *)(result + 48); j != result + 40; uint64_t j = *(void *)(j + 8))
          {
            uint64_t v41 = j - 24;
            if (j) {
              uint64_t v42 = j - 24;
            }
            else {
              uint64_t v42 = 0;
            }
            if (*(unsigned char *)(v42 + 16) != 83) {
              goto LABEL_56;
            }
          }
          uint64_t v41 = 0;
LABEL_56:
          uint64_t result = sub_1CC4CA034(a1, v41, v33);
        }
        while (1)
        {
          uint64_t v6 = *(void *)(v6 + 8);
          if (!v6) {
            goto LABEL_66;
          }
          uint64_t v34 = *(void *)(v6 + 24);
          unsigned int v43 = *(unsigned __int8 *)(v34 + 16);
          if (v34) {
            BOOL v44 = v43 >= 0x1C;
          }
          else {
            BOOL v44 = 0;
          }
          if (v44 && v43 - 29 < 0xB) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_66:
    uint64_t v46 = *(void *)(i - 16);
    if (v46)
    {
      while (1)
      {
        uint64_t v47 = *(void *)(v46 + 24);
        int v48 = *(unsigned __int8 *)(v47 + 16);
        if (!v47 || v48 != 38) {
          goto LABEL_80;
        }
        if ((*(_WORD *)(v47 + 18) & 1) == 0) {
          break;
        }
        int v49 = *(_DWORD *)(v47 + 20);
        uint64_t v50 = (v49 & 0x40000000) != 0 ? *(void *)(v47 - 8) : v47 - 32 * (v49 & 0x7FFFFFF);
        uint64_t v51 = *(void *)(v50 + 32);
        if (!v51) {
          break;
        }
        if (*(_WORD *)(a2 + 18))
        {
          int v52 = *(_DWORD *)(a2 + 20);
          uint64_t v53 = (v52 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v52 & 0x7FFFFFF);
          if (v51 == *(void *)(v53 + 32)) {
            break;
          }
        }
LABEL_95:
        uint64_t v46 = *(void *)(v46 + 8);
        if (!v46) {
          return result;
        }
      }
      uint64_t result = sub_1CC4CA034(a1, *(void *)(v46 + 24), a3);
      int v48 = *(unsigned __int8 *)(v47 + 16);
LABEL_80:
      if (v47 && v48 == 79)
      {
        uint64_t v54 = *(void *)(v47 + 8);
        if (!v54) {
          goto LABEL_94;
        }
        while (1)
        {
          uint64_t v55 = *(void *)(v54 + 24);
          if (v55)
          {
            if (*(unsigned char *)(v55 + 16) == 36) {
              break;
            }
          }
          uint64_t v54 = *(void *)(v54 + 8);
          if (!v54) {
            goto LABEL_94;
          }
        }
        if ((*(_WORD *)(v55 + 18) & 1) == 0
          || (uint64_t v56 = *(void *)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF) + 32)) == 0
          || (*(_WORD *)(a2 + 18) & 1) != 0
          && ((int v57 = *(_DWORD *)(a2 + 20), (v57 & 0x40000000) != 0)
            ? (uint64_t v58 = *(void *)(a2 - 8))
            : (uint64_t v58 = a2 - 32 * (v57 & 0x7FFFFFF)),
              v56 == *(void *)(v58 + 32)))
        {
LABEL_94:
          uint64_t result = sub_1CC4CA034(a1, v47, a3);
        }
      }
      goto LABEL_95;
    }
  }
  else
  {
    uint64_t result = sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v65);
    if ((result & 1) == 0)
    {
      LODWORD(v65) = a3;
      BYTE4(v65) = 1;
      uint64_t v66 = 0;
      unint64_t v67 = v6 & 0xFFFFFFFFFFFFFFFBLL;
      unint64_t v10 = sub_1CD483108(a1 + 448, (unint64_t)&v65);
      uint64_t v11 = *(void *)(a1 + 448) + 24 * *(unsigned int *)(a1 + 456);
      long long v12 = *(_OWORD *)v10;
      *(void *)(v11 + 16) = *(void *)(v10 + 16);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = *(unsigned int *)(a1 + 456);
      *(_DWORD *)(a1 + 456) = v13 + 1;
      uint64_t v65 = a2;
      uint64_t result = (uint64_t)sub_1CD40EB18(a1, &v65);
      *(_DWORD *)(result + 8) = v13;
      uint64_t v14 = *(void *)(v6 + 8);
      if (v14)
      {
        while (1)
        {
          uint64_t v15 = *(void *)(v14 + 24);
          unsigned int v16 = *(unsigned __int8 *)(v15 + 16);
          BOOL v17 = v15 && v16 >= 0x1C;
          if (v17 && v16 - 29 < 0xB) {
            break;
          }
          uint64_t v14 = *(void *)(v14 + 8);
          if (!v14) {
            goto LABEL_16;
          }
        }
LABEL_97:
        uint64_t result = sub_1CC4D0684(*(void *)(v15 + 40), *(void *)(a2 - 32));
        if (!result) {
          goto LABEL_107;
        }
        for (uint64_t k = *(void *)(result + 48); k != result + 40; uint64_t k = *(void *)(k + 8))
        {
          uint64_t v60 = k - 24;
          if (k) {
            uint64_t v61 = k - 24;
          }
          else {
            uint64_t v61 = 0;
          }
          if (*(unsigned char *)(v61 + 16) != 83) {
            goto LABEL_106;
          }
        }
        uint64_t v60 = 0;
LABEL_106:
        uint64_t result = sub_1CC4CA034(a1, v60, v13);
LABEL_107:
        while (1)
        {
          uint64_t v14 = *(void *)(v14 + 8);
          if (!v14) {
            break;
          }
          uint64_t v15 = *(void *)(v14 + 24);
          unsigned int v62 = *(unsigned __int8 *)(v15 + 16);
          if (v15) {
            BOOL v63 = v62 >= 0x1C;
          }
          else {
            BOOL v63 = 0;
          }
          if (v63 && v62 - 29 < 0xB) {
            goto LABEL_97;
          }
        }
      }
LABEL_16:
      for (uint64_t m = *(void *)(a2 + 8); m; uint64_t m = *(void *)(m + 8))
      {
        unsigned int v20 = *(unsigned __int8 *)(*(void *)(m + 24) + 16) - 38;
        BOOL v21 = v20 > 0x38;
        uint64_t v22 = (1 << v20) & 0x100060000000001;
        if (!v21 && v22 != 0) {
          llvm::report_fatal_error((llvm *)"Cleanup funclets for the SEH personality cannot contain exceptional actions", (const llvm::Twine *)1);
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CC4CA498(llvm *a1, uint64_t a2)
{
  llvm::colorEHFunclets(a1, (uint64_t)v30);
  uint64_t v4 = (void *)*((void *)a1 + 10);
  if (v4 != (void *)((char *)a1 + 72))
  {
    while (1)
    {
      uint64_t v5 = (uint64_t)(v4 - 3);
      if (!v4) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void *)(v5 + 40);
      if (v6 == v5 + 40)
      {
        uint64_t v7 = 0;
      }
      else
      {
        if (v6) {
          uint64_t v7 = v6 - 24;
        }
        else {
          uint64_t v7 = 0;
        }
        if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB) {
          uint64_t v7 = 0;
        }
      }
      uint64_t v8 = *(unsigned char *)(v7 + 16) == 33 ? v7 : 0;
      uint64_t v29 = v8;
      if (v8) {
        break;
      }
LABEL_16:
      uint64_t v4 = (void *)v4[1];
      if (v4 == (void *)((char *)a1 + 72)) {
        return sub_1CC0CADD4(v30);
      }
    }
    uint64_t v32 = v5;
    uint64_t v9 = sub_1CD487170(v30, &v32)[1];
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0) {
      unint64_t v10 = **(void **)v10;
    }
    for (uint64_t i = *(void *)(v10 + 48); ; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v12 = i - 24;
      uint64_t v13 = i ? i - 24 : 0;
      if (*(unsigned char *)(v13 + 16) != 83) {
        break;
      }
    }
    uint64_t v14 = 0;
    unsigned int v15 = *(unsigned __int8 *)(i - 8) - 81;
    BOOL v16 = __CFADD__(v15, 2);
    if (v15 >= 0xFFFFFFFE) {
      uint64_t v17 = v12;
    }
    else {
      uint64_t v17 = 0;
    }
    if (v16)
    {
      if (*(unsigned char *)(v12 + 16) == 80)
      {
        uint64_t v18 = *(void *)(v12 - 32);
        if (*(_WORD *)(v18 + 18))
        {
          int v19 = *(_DWORD *)(v18 + 20);
          if ((v19 & 0x40000000) != 0) {
            uint64_t v20 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v20 = v18 - 32 * (v19 & 0x7FFFFFF);
          }
LABEL_42:
          uint64_t v14 = *(void *)(v20 + 32);
          goto LABEL_43;
        }
      }
      else
      {
        while (1)
        {
          uint64_t v12 = *(void *)(v12 + 8);
          if (!v12) {
            break;
          }
          uint64_t v21 = *(void *)(v12 + 24);
          if (v21 && *(unsigned char *)(v21 + 16) == 36)
          {
            if ((*(_WORD *)(v21 + 18) & 1) == 0) {
              break;
            }
            uint64_t v20 = v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF);
            goto LABEL_42;
          }
        }
      }
      uint64_t v14 = 0;
    }
LABEL_43:
    uint64_t v22 = *(void *)(v8 - 64);
    if (v14 == v22
      && (v31 = v17, uint64_t v32 = 0, sub_1CD3C8538((uint64_t *)(a2 + 24), &v31, &v32))
      && v32 != *(void *)(a2 + 24) + 16 * *(unsigned int *)(a2 + 40)
      && (int v23 = *(_DWORD *)(v32 + 8), v23 != -1))
    {
      *((_DWORD *)sub_1CD40EB18(a2 + 48, &v29) + 2) = v23;
    }
    else
    {
      for (uint64_t j = *(void *)(v22 + 48); j != v22 + 40; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v25 = j - 24;
        if (j) {
          uint64_t v26 = j - 24;
        }
        else {
          uint64_t v26 = 0;
        }
        if (*(unsigned char *)(v26 + 16) != 83) {
          goto LABEL_56;
        }
      }
      uint64_t v25 = 0;
LABEL_56:
      uint64_t v32 = v25;
      int v27 = *((_DWORD *)sub_1CD40EB18(a2, &v32) + 2);
      *((_DWORD *)sub_1CD40EB18(a2 + 48, &v29) + 2) = v27;
    }
    goto LABEL_16;
  }
  return sub_1CC0CADD4(v30);
}

void sub_1CC4CA6F0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v84[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 40);
  if (a2 && *(unsigned char *)(a2 + 16) == 38)
  {
    uint64_t v82 = v84;
    uint64_t v83 = 0x200000000;
    int v7 = *(_DWORD *)(a2 + 20);
    if ((v7 & 0x40000000) != 0)
    {
      uint64_t v9 = *(void *)(a2 - 8);
      uint64_t v8 = v7 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v8 = v7 & 0x7FFFFFF;
      uint64_t v9 = a2 - 32 * v8;
    }
    if (*(_WORD *)(a2 + 18)) {
      uint64_t v23 = 2;
    }
    else {
      uint64_t v23 = 1;
    }
    if (v23 != v8)
    {
      unsigned int v63 = 0;
      uint64_t v64 = v9 + 32 * v8;
      uint64_t v65 = v9 + 32 * v23;
      do
      {
        for (uint64_t i = *(void *)(*(void *)v65 + 48); i != *(void *)v65 + 40; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v67 = i - 24;
          if (i) {
            uint64_t v68 = i - 24;
          }
          else {
            uint64_t v68 = 0;
          }
          if (*(unsigned char *)(v68 + 16) != 83) {
            goto LABEL_112;
          }
        }
        uint64_t v67 = 0;
LABEL_112:
        if (v63 >= HIDWORD(v83)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v82 + v63) = v67;
        unsigned int v63 = v83 + 1;
        LODWORD(v83) = v83 + 1;
        v65 += 32;
      }
      while (v65 != v64);
    }
    unsigned int v24 = *(_DWORD *)(a1 + 104);
    if (v24 >= *(_DWORD *)(a1 + 108)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v25 = a3;
    uint64_t v26 = (void *)(*(void *)(a1 + 96) + 16 * v24);
    *uint64_t v26 = a3;
    v26[1] = 0;
    uint64_t v27 = *(unsigned int *)(a1 + 104);
    *(_DWORD *)(a1 + 104) = v27 + 1;
    __p[0] = (void *)a2;
    *((_DWORD *)sub_1CD40EB18(a1, (uint64_t *)__p) + 2) = v27;
    uint64_t v28 = *(void *)(v6 + 8);
    if (v28)
    {
      while (1)
      {
        uint64_t v29 = *(void *)(v28 + 24);
        unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
        BOOL v31 = v29 && v30 >= 0x1C;
        if (v31 && v30 - 29 < 0xB) {
          break;
        }
        uint64_t v28 = *(void *)(v28 + 8);
        if (!v28) {
          goto LABEL_41;
        }
      }
LABEL_81:
      int v54 = *(_DWORD *)(a2 + 20);
      if ((v54 & 0x40000000) != 0) {
        uint64_t v55 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v55 = (uint64_t *)(a2 - 32 * (v54 & 0x7FFFFFF));
      }
      uint64_t v56 = sub_1CC4D0684(*(void *)(v29 + 40), *v55);
      if (v56)
      {
        for (uint64_t j = *(void *)(v56 + 48); j != v56 + 40; uint64_t j = *(void *)(j + 8))
        {
          uint64_t v58 = j - 24;
          if (j) {
            uint64_t v59 = j - 24;
          }
          else {
            uint64_t v59 = 0;
          }
          if (*(unsigned char *)(v59 + 16) != 83) {
            goto LABEL_93;
          }
        }
        uint64_t v58 = 0;
LABEL_93:
        sub_1CC4CA6F0(a1, v58, v27);
      }
      while (1)
      {
        uint64_t v28 = *(void *)(v28 + 8);
        if (!v28) {
          break;
        }
        uint64_t v29 = *(void *)(v28 + 24);
        unsigned int v60 = *(unsigned __int8 *)(v29 + 16);
        if (v29) {
          BOOL v61 = v60 >= 0x1C;
        }
        else {
          BOOL v61 = 0;
        }
        if (v61 && v60 - 29 < 0xB) {
          goto LABEL_81;
        }
      }
    }
LABEL_41:
    unsigned int v33 = *(_DWORD *)(a1 + 104);
    if (v33 >= *(_DWORD *)(a1 + 108)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v34 = (void *)(*(void *)(a1 + 96) + 16 * v33);
    *uint64_t v34 = v25;
    v34[1] = 0;
    uint64_t v35 = *(unsigned int *)(a1 + 104);
    *(_DWORD *)(a1 + 104) = v35 + 1;
    uint64_t v36 = *(void *)(*(void *)(v6 + 56) + 40) + 216;
    __int16 v78 = 260;
    v77[0] = v36;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v77);
    int v37 = sub_1CD0BDF24(v81);
    if (v80 < 0) {
      operator delete(__p[0]);
    }
    if (v37 == 64) {
      sub_1CC4D0720(a1, v27, v35 - 1, v35, (uint64_t *)v82, v83);
    }
    int v76 = *(_DWORD *)(a1 + 184);
    if (v83)
    {
      int v38 = (char *)v82;
      uint64_t v39 = (char *)v82 + 8 * v83;
      do
      {
        uint64_t v40 = *(void **)v38;
        __p[0] = *(void **)v38;
        *((_DWORD *)sub_1CD4B4E64((uint64_t *)(a1 + 24), __p) + 2) = v35;
        while (1)
        {
          uint64_t v40 = (void *)v40[1];
          if (!v40) {
            break;
          }
          uint64_t v41 = v40[3];
          int v42 = *(unsigned __int8 *)(v41 + 16);
          if (v41 && v42 == 38)
          {
            if ((*(_WORD *)(v41 + 18) & 1) == 0
              || ((int v43 = *(_DWORD *)(v41 + 20), (v43 & 0x40000000) != 0)
                ? (uint64_t v44 = *(void *)(v41 - 8))
                : (uint64_t v44 = v41 - 32 * (v43 & 0x7FFFFFF)),
                  (uint64_t v45 = *(void *)(v44 + 32)) == 0
               || (*(_WORD *)(a2 + 18) & 1) != 0
               && ((int v46 = *(_DWORD *)(a2 + 20), (v46 & 0x40000000) != 0)
                 ? (uint64_t v47 = *(void *)(a2 - 8))
                 : (uint64_t v47 = a2 - 32 * (v46 & 0x7FFFFFF)),
                   v45 == *(void *)(v47 + 32))))
            {
              sub_1CC4CA6F0(a1, v40[3], v35);
              int v42 = *(unsigned __int8 *)(v41 + 16);
              goto LABEL_63;
            }
          }
          else
          {
LABEL_63:
            if (v41 && v42 == 79)
            {
              uint64_t v48 = *(void *)(v41 + 8);
              if (!v48) {
                goto LABEL_77;
              }
              while (1)
              {
                uint64_t v49 = *(void *)(v48 + 24);
                if (v49)
                {
                  if (*(unsigned char *)(v49 + 16) == 36) {
                    break;
                  }
                }
                uint64_t v48 = *(void *)(v48 + 8);
                if (!v48) {
                  goto LABEL_77;
                }
              }
              if ((*(_WORD *)(v49 + 18) & 1) == 0
                || (uint64_t v50 = *(void *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) + 32)) == 0
                || (*(_WORD *)(a2 + 18) & 1) != 0
                && ((int v51 = *(_DWORD *)(a2 + 20), (v51 & 0x40000000) != 0)
                  ? (uint64_t v52 = *(void *)(a2 - 8))
                  : (uint64_t v52 = a2 - 32 * (v51 & 0x7FFFFFF)),
                    v50 == *(void *)(v52 + 32)))
              {
LABEL_77:
                sub_1CC4CA6F0(a1, v41, v35);
              }
            }
          }
        }
        v38 += 8;
      }
      while (v38 != v39);
    }
    int v53 = *(_DWORD *)(a1 + 104) - 1;
    if (v37 == 64) {
      *(_DWORD *)(*(void *)(a1 + 176) + ((unint64_t)(v76 - 1) << 6) + 8) = v53;
    }
    else {
      sub_1CC4D0720(a1, v27, v35 - 1, v53, (uint64_t *)v82, v83);
    }
    if (v82 != v84) {
      free(v82);
    }
  }
  else if ((sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), a2, __p) & 1) == 0)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 104);
    if (v10 >= *(_DWORD *)(a1 + 108)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v11 = (void *)(*(void *)(a1 + 96) + 16 * v10);
    *uint64_t v11 = a3;
    v11[1] = v6 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v12 = *(unsigned int *)(a1 + 104);
    *(_DWORD *)(a1 + 104) = v12 + 1;
    __p[0] = (void *)a2;
    *((_DWORD *)sub_1CD40EB18(a1, (uint64_t *)__p) + 2) = v12;
    uint64_t v13 = *(void *)(v6 + 8);
    if (v13)
    {
      while (1)
      {
        uint64_t v14 = *(void *)(v13 + 24);
        unsigned int v15 = *(unsigned __int8 *)(v14 + 16);
        BOOL v16 = v14 && v15 >= 0x1C;
        if (v16 && v15 - 29 < 0xB) {
          break;
        }
        uint64_t v13 = *(void *)(v13 + 8);
        if (!v13) {
          goto LABEL_17;
        }
      }
LABEL_120:
      uint64_t v69 = sub_1CC4D0684(*(void *)(v14 + 40), *(void *)(a2 - 32));
      if (!v69) {
        goto LABEL_130;
      }
      for (uint64_t k = *(void *)(v69 + 48); k != v69 + 40; uint64_t k = *(void *)(k + 8))
      {
        uint64_t v71 = k - 24;
        if (k) {
          uint64_t v72 = k - 24;
        }
        else {
          uint64_t v72 = 0;
        }
        if (*(unsigned char *)(v72 + 16) != 83) {
          goto LABEL_129;
        }
      }
      uint64_t v71 = 0;
LABEL_129:
      sub_1CC4CA6F0(a1, v71, v12);
LABEL_130:
      while (1)
      {
        uint64_t v13 = *(void *)(v13 + 8);
        if (!v13) {
          break;
        }
        uint64_t v14 = *(void *)(v13 + 24);
        unsigned int v73 = *(unsigned __int8 *)(v14 + 16);
        if (v14) {
          BOOL v74 = v73 >= 0x1C;
        }
        else {
          BOOL v74 = 0;
        }
        if (v74 && v73 - 29 < 0xB) {
          goto LABEL_120;
        }
      }
    }
LABEL_17:
    for (uint64_t m = *(void *)(a2 + 8); m; uint64_t m = *(void *)(m + 8))
    {
      unsigned int v19 = *(unsigned __int8 *)(*(void *)(m + 24) + 16) - 38;
      BOOL v20 = v19 > 0x38;
      uint64_t v21 = (1 << v19) & 0x100060000000001;
      if (!v20 && v21 != 0) {
        llvm::report_fatal_error((llvm *)"Cleanup funclets for the MSVC++ personality cannot contain exceptional actions", (const llvm::Twine *)1);
      }
    }
  }
}

void llvm::calculateClrEHStateNumbers(llvm *this, const llvm::Function *a2, llvm::WinEHFuncInfo *a3)
{
  v98[16] = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)a2 + 2))
  {
    uint64_t v4 = this;
    uint64_t v96 = v98;
    uint64_t v97 = 0x800000000;
    uint64_t v5 = (void *)*((void *)this + 10);
    if (v5 == (void *)((char *)this + 72)) {
      goto LABEL_77;
    }
    unsigned int v6 = 0;
    while (1)
    {
      int v7 = v5 - 3;
      if (!v5) {
        int v7 = 0;
      }
      uint64_t v8 = v7 + 5;
      for (uint64_t i = (void *)v7[6]; ; uint64_t i = (void *)i[1])
      {
        if (i == v8) {
          goto LABEL_22;
        }
        unsigned int v10 = i - 3;
        uint64_t v11 = i ? (uint64_t)(i - 3) : 0;
        if (*(unsigned char *)(v11 + 16) != 83) {
          break;
        }
      }
      int v12 = *((unsigned __int8 *)i - 8);
      if (v12 == 38) {
        break;
      }
      if (v12 == 79)
      {
        uint64_t v13 = i - 7;
        goto LABEL_19;
      }
LABEL_22:
      uint64_t v5 = (void *)v5[1];
      if (v5 == (void *)((char *)this + 72))
      {
        if (v6)
        {
          do
          {
            BOOL v16 = (char *)v96 + 16 * v6;
            unint64_t v17 = *((void *)v16 - 2);
            int v18 = *((_DWORD *)v16 - 2);
            LODWORD(v97) = v6 - 1;
            if (v17 && *(unsigned char *)(v17 + 16) == 79)
            {
              if ((*(_DWORD *)(v17 + 20) & 0x7FFFFFF) == 1) {
                int v19 = 1;
              }
              else {
                int v19 = 2;
              }
              int v93 = (void *)(*(void *)(v17 + 40) & 0xFFFFFFFFFFFFFFFBLL);
              v95[0] = -1;
              v95[1] = v19;
              LODWORD(v94) = 0;
              HIDWORD(v94) = v18;
              unint64_t v20 = sub_1CD483108((uint64_t)a2 + 560, (unint64_t)&v93);
              uint64_t v21 = *((void *)a2 + 70) + 24 * *((unsigned int *)a2 + 142);
              long long v22 = *(_OWORD *)v20;
              *(void *)(v21 + 16) = *(void *)(v20 + 16);
              *(_OWORD *)uint64_t v21 = v22;
              int v23 = *((_DWORD *)a2 + 142);
              *((_DWORD *)a2 + 142) = v23 + 1;
              for (uint64_t j = *(void *)(v17 + 8); j; uint64_t j = *(void *)(j + 8))
              {
                uint64_t v25 = *(void *)(j + 24);
                unsigned int v26 = *(unsigned __int8 *)(v25 + 16);
                if (v25) {
                  BOOL v27 = v26 >= 0x1C;
                }
                else {
                  BOOL v27 = 0;
                }
                if (v27)
                {
                  unsigned int v28 = v26 - 38;
                  BOOL v29 = v28 > 0x38;
                  uint64_t v30 = (1 << v28) & 0x100060000000001;
                  if (!v29 && v30 != 0) {
                    sub_1CC4CB3DC((uint64_t)&v96, v25, v23);
                  }
                }
              }
              int v93 = (void *)v17;
              *((_DWORD *)sub_1CD40EB18((uint64_t)a2, (uint64_t *)&v93) + 2) = v23;
            }
            else
            {
              int v32 = *(_DWORD *)(v17 + 20);
              if ((v32 & 0x40000000) != 0)
              {
                unint64_t v34 = *(void *)(v17 - 8);
                uint64_t v33 = v32 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v33 = v32 & 0x7FFFFFF;
                unint64_t v34 = v17 - 32 * v33;
              }
              unint64_t v87 = v17;
              uint64_t v35 = 64;
              if ((*(_WORD *)(v17 + 18) & 1) == 0) {
                uint64_t v35 = 32;
              }
              int v93 = v95;
              uint64_t v94 = 0x400000000;
              sub_1CD58F8A8((uint64_t)&v93, (char *)(v34 + v35), (uint64_t (*)(uint64_t))nullsub_1792, (char *)(v34 + 32 * v33));
              if (v94)
              {
                int v37 = (char *)v93;
                int v38 = (char *)v93 + 8 * v94;
                int v36 = -1;
                do
                {
                  uint64_t v40 = *((void *)v38 - 1);
                  v38 -= 8;
                  uint64_t v39 = v40;
                  for (uint64_t k = *(void *)(v40 + 48); ; uint64_t k = *(void *)(k + 8))
                  {
                    unint64_t v42 = k - 24;
                    uint64_t v43 = k ? k - 24 : 0;
                    if (*(unsigned char *)(v43 + 16) != 83) {
                      break;
                    }
                  }
                  uint64_t v44 = *(void *)(v42 - 32 * (*(_DWORD *)(k - 4) & 0x7FFFFFF));
                  uint64_t v45 = (void *)(v44 + 24);
                  if (*(_DWORD *)(v44 + 32) >= 0x41u) {
                    uint64_t v45 = (void *)*v45;
                  }
                  int v46 = (void *)*v45;
                  unint64_t v88 = v39 & 0xFFFFFFFFFFFFFFFBLL;
                  int v91 = v36;
                  int v92 = 0;
                  int v89 = (int)v46;
                  int v90 = v18;
                  unint64_t v47 = sub_1CD483108((uint64_t)a2 + 560, (unint64_t)&v88);
                  uint64_t v48 = *((void *)a2 + 70) + 24 * *((unsigned int *)a2 + 142);
                  long long v49 = *(_OWORD *)v47;
                  *(void *)(v48 + 16) = *(void *)(v47 + 16);
                  *(_OWORD *)uint64_t v48 = v49;
                  int v36 = *((_DWORD *)a2 + 142);
                  *((_DWORD *)a2 + 142) = v36 + 1;
                  for (uint64_t m = *(void *)(k - 16); m; uint64_t m = *(void *)(m + 8))
                  {
                    uint64_t v51 = *(void *)(m + 24);
                    unsigned int v52 = *(unsigned __int8 *)(v51 + 16);
                    if (v51) {
                      BOOL v53 = v52 >= 0x1C;
                    }
                    else {
                      BOOL v53 = 0;
                    }
                    if (v53)
                    {
                      unsigned int v54 = v52 - 38;
                      BOOL v29 = v54 > 0x38;
                      uint64_t v55 = (1 << v54) & 0x100060000000001;
                      if (!v29 && v55 != 0) {
                        sub_1CC4CB3DC((uint64_t)&v96, v51, v36);
                      }
                    }
                  }
                  unint64_t v88 = v42;
                  *((_DWORD *)sub_1CD40EB18((uint64_t)a2, (uint64_t *)&v88) + 2) = v36;
                }
                while (v38 != v37);
              }
              else
              {
                int v36 = -1;
              }
              unint64_t v88 = v87;
              *((_DWORD *)sub_1CD40EB18((uint64_t)a2, (uint64_t *)&v88) + 2) = v36;
              if (v93 != v95) {
                free(v93);
              }
              uint64_t v4 = this;
            }
            unsigned int v6 = v97;
          }
          while (v97);
        }
LABEL_77:
        unsigned int v57 = *((_DWORD *)a2 + 142);
        if (!v57) {
          goto LABEL_141;
        }
        uint64_t v58 = *((void *)a2 + 70);
        uint64_t v59 = v58 + 24 * v57;
        uint64_t v60 = v59;
LABEL_79:
        uint64_t v61 = *(void *)(v60 - 24);
        v60 -= 24;
        for (uint64_t n = *(void *)((v61 & 0xFFFFFFFFFFFFFFF8) + 48); ; uint64_t n = *(void *)(n + 8))
        {
          uint64_t v63 = n - 24;
          uint64_t v64 = n ? n - 24 : 0;
          if (*(unsigned char *)(v64 + 16) != 83) {
            break;
          }
        }
        if (*(unsigned char *)(n - 8) == 80)
        {
          if (*(_DWORD *)(v59 - 8) == -1)
          {
            uint64_t v65 = *(void *)(n - 56);
            if (*(_WORD *)(v65 + 18))
            {
              int v66 = *(_DWORD *)(v65 + 20);
              if ((v66 & 0x40000000) == 0) {
                goto LABEL_125;
              }
              uint64_t v67 = *(void *)(v65 - 8);
              goto LABEL_126;
            }
            goto LABEL_127;
          }
          goto LABEL_129;
        }
        uint64_t v68 = *(void *)(n - 16);
        if (!v68) {
          goto LABEL_127;
        }
        while (1)
        {
          uint64_t v65 = *(void *)(v68 + 24);
          int v69 = *(unsigned __int8 *)(v65 + 16);
          if (v65 && v69 == 36)
          {
            if ((*(_WORD *)(v65 + 18) & 1) == 0) {
              goto LABEL_127;
            }
            int v66 = *(_DWORD *)(v65 + 20);
LABEL_125:
            uint64_t v67 = v65 - 32 * (v66 & 0x7FFFFFF);
LABEL_126:
            unint64_t v70 = *(void *)(v67 + 32);
            if (v70)
            {
              uint64_t v76 = *(void *)(v70 + 48);
LABEL_132:
              unint64_t v83 = v70 + 40;
              while (v76 != v83)
              {
                unsigned int v84 = (void *)(v76 - 24);
                if (v76) {
                  uint64_t v85 = v76 - 24;
                }
                else {
                  uint64_t v85 = 0;
                }
                if (*(unsigned char *)(v85 + 16) != 83) {
                  goto LABEL_140;
                }
                uint64_t v76 = *(void *)(v76 + 8);
              }
              unsigned int v84 = 0;
LABEL_140:
              int v93 = v84;
              int v82 = *((_DWORD *)sub_1CD40EB18((uint64_t)a2, (uint64_t *)&v93) + 2);
            }
            else
            {
LABEL_127:
              int v82 = -1;
            }
            *(_DWORD *)(v59 - 8) = v82;
LABEL_129:
            uint64_t v59 = v60;
            if (v60 == v58)
            {
LABEL_141:
              sub_1CC4CA498(v4, (uint64_t)a2);
              if (v96 != v98) {
                free(v96);
              }
              return;
            }
            goto LABEL_79;
          }
          if (v65 && v69 == 33)
          {
            unint64_t v70 = *(void *)(v65 - 64);
          }
          else if (v65 && v69 == 38)
          {
            if ((*(_WORD *)(v65 + 18) & 1) == 0) {
              goto LABEL_121;
            }
            int v71 = *(_DWORD *)(v65 + 20);
            if ((v71 & 0x40000000) != 0) {
              uint64_t v72 = *(void *)(v65 - 8);
            }
            else {
              uint64_t v72 = v65 - 32 * (v71 & 0x7FFFFFF);
            }
            unint64_t v70 = *(void *)(v72 + 32);
          }
          else
          {
            if (!v65) {
              goto LABEL_121;
            }
            if (v69 != 79) {
              goto LABEL_121;
            }
            int v93 = *(void **)(v68 + 24);
            unsigned int v73 = sub_1CD40EB18((uint64_t)a2, (uint64_t *)&v93);
            uint64_t v74 = *((void *)a2 + 70);
            int v75 = *(_DWORD *)(v74 + 24 * *((int *)v73 + 2) + 16);
            if (v75 == -1) {
              goto LABEL_121;
            }
            unint64_t v70 = *(void *)(v74 + 24 * v75) & 0xFFFFFFFFFFFFFFF8;
          }
          if (v70)
          {
            uint64_t v76 = *(void *)(v70 + 48);
            uint64_t v77 = v76;
            if (v76 == v70 + 40)
            {
LABEL_114:
              uint64_t v78 = 0;
            }
            else
            {
              while (1)
              {
                uint64_t v78 = v77 - 24;
                uint64_t v79 = v77 ? v77 - 24 : 0;
                if (*(unsigned char *)(v79 + 16) != 83) {
                  break;
                }
                uint64_t v77 = *(void *)(v77 + 8);
                if (v77 == v70 + 40) {
                  goto LABEL_114;
                }
              }
              if (*(unsigned char *)(v77 - 8) == 38)
              {
                int v80 = *(_DWORD *)(v77 - 4);
                if ((v80 & 0x40000000) != 0) {
                  int v81 = *(void **)(v77 - 32);
                }
                else {
                  int v81 = (void *)(v78 - 32 * (v80 & 0x7FFFFFF));
                }
LABEL_120:
                if (*v81 != v63) {
                  goto LABEL_132;
                }
                goto LABEL_121;
              }
            }
            int v81 = (void *)(v78 - 32);
            goto LABEL_120;
          }
LABEL_121:
          uint64_t v68 = *(void *)(v68 + 8);
          if (!v68) {
            goto LABEL_127;
          }
        }
      }
    }
    int v14 = *((_DWORD *)i - 1);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v13 = (void *)*(i - 4);
    }
    else {
      uint64_t v13 = &v10[-4 * (v14 & 0x7FFFFFF)];
    }
LABEL_19:
    if (*(unsigned char *)(*v13 + 16) == 20)
    {
      if (v6 >= HIDWORD(v97)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v15 = (char *)v96 + 16 * v6;
      *(void *)unsigned int v15 = v10;
      *((_DWORD *)v15 + 2) = -1;
      LODWORD(v97) = ++v6;
    }
    goto LABEL_22;
  }
}

uint64_t sub_1CC4CB3DC(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = *(void *)result + 16 * v3;
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

void sub_1CC4CB460()
{
}

void sub_1CC4CB4E0(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2615E28;
  int v2 = (uint64_t *)((char *)a1 + 48);
  sub_1CD58F044((uint64_t)a1 + 72);
  sub_1CC0CADD4(v2);

  llvm::Pass::~Pass(a1);
}

void sub_1CC4CB544(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2615E28;
  int v2 = (uint64_t *)((char *)a1 + 48);
  sub_1CD58F044((uint64_t)a1 + 72);
  sub_1CC0CADD4(v2);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC4CB5BC()
{
  return "Windows exception handling preparation";
}

uint64_t sub_1CC4CB5CC()
{
  return 0;
}

uint64_t sub_1CC4CB5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v319 = *MEMORY[0x1E4F143B8];
  if ((*(_WORD *)(a2 + 18) & 8) == 0) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 20);
  uint64_t v4 = (v3 & 0x40000000) != 0 ? *(llvm::Value ***)(a2 - 8) : (llvm::Value **)(a2 - 32 * (v3 & 0x7FFFFFF));
  unsigned int v5 = llvm::classifyEHPersonality(*v4, (const llvm::Value *)a2);
  uint64_t j = a1;
  *(_DWORD *)(a1 + 32) = v5;
  if (v5 > 0xC || ((1 << v5) & 0x1780) == 0) {
    return 0;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40) + 272;
  llvm::removeUnreachableBlocks((llvm *)a2, 0, 0, v6, v7);
  llvm::colorEHFunclets((llvm *)a2, (uint64_t)&v308);
  uint64_t v11 = (uint64_t *)(a1 + 48);
  sub_1CD4B08AC((uint64_t *)(a1 + 48), (uint64_t *)&v308);
  sub_1CC0CADD4((uint64_t *)&v308);
  uint64_t v18 = *(void *)(a2 + 80);
  uint64_t v287 = a2 + 72;
  for (i = (llvm::Function *)a2; v18 != v287; uint64_t v18 = *(void *)(v18 + 8))
  {
    if (v18) {
      int v19 = (void *)(v18 - 24);
    }
    else {
      int v19 = 0;
    }
    uint64_t v308 = v19;
    uint64_t v21 = (void **)(sub_1CD487170(v11, &v308) + 1);
    unint64_t v20 = (unint64_t)*v21;
    if ((*v21 & 4) != 0)
    {
      unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v21 = *(void ***)v23;
      uint64_t v22 = *(void *)v23 + 8 * *(unsigned int *)(v23 + 8);
    }
    else
    {
      uint64_t v22 = (uint64_t)&v21[v20 > 7];
    }
    for (uint64_t j = a1; v21 != (void **)v22; ++v21)
    {
      uint64_t v308 = *v21;
      unsigned int v24 = (char **)sub_1CD58F194(a1 + 72, (uint64_t *)&v308);
      uint64_t v25 = v24;
      BOOL v27 = v24[1];
      unint64_t v26 = (unint64_t)v24[2];
      if ((unint64_t)v27 >= v26)
      {
        BOOL v29 = *v24;
        uint64_t v30 = (v27 - *v24) >> 3;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61) {
          abort();
        }
        uint64_t v32 = v26 - (void)v29;
        if (v32 >> 2 > v31) {
          unint64_t v31 = v32 >> 2;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          if (v33 >> 61) {
            sub_1CB833614();
          }
          unint64_t v34 = (char *)operator new(8 * v33);
        }
        else
        {
          unint64_t v34 = 0;
        }
        uint64_t v35 = &v34[8 * v30];
        *(void *)uint64_t v35 = v19;
        unsigned int v28 = v35 + 8;
        if (v27 != v29)
        {
          do
          {
            uint64_t v36 = *((void *)v27 - 1);
            v27 -= 8;
            *((void *)v35 - 1) = v36;
            v35 -= 8;
          }
          while (v27 != v29);
          BOOL v27 = *v25;
        }
        *uint64_t v25 = v35;
        v25[1] = v28;
        v25[2] = &v34[8 * v33];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(void *)BOOL v27 = v19;
        unsigned int v28 = v27 + 8;
      }
      uint64_t v11 = (uint64_t *)(a1 + 48);
      uint64_t j = a1;
      v25[1] = v28;
    }
  }
  int v37 = *(uint64_t *****)(j + 96);
  int v288 = *(uint64_t *****)(j + 104);
  if (v37 == v288) {
    goto LABEL_39;
  }
  do
  {
    uint64_t v243 = *v37;
    uint64_t v305 = 0;
    uint64_t v306 = v243;
    uint64_t v244 = *((void *)i + 10);
    if (v244) {
      uint64_t v245 = (uint64_t ***)(v244 - 24);
    }
    else {
      uint64_t v245 = 0;
    }
    if (v243 == v245)
    {
      uint64_t v248 = (uint64_t **)llvm::ConstantTokenNone::get(**(llvm::ConstantTokenNone ***)i, (llvm::LLVMContext *)v12);
    }
    else
    {
      uint64_t v246 = v243 + 5;
      for (uint64_t k = v243[6]; k != (uint64_t **)v246; uint64_t k = (uint64_t **)k[1])
      {
        uint64_t v248 = k - 3;
        if (k) {
          unint64_t v249 = k - 3;
        }
        else {
          unint64_t v249 = 0;
        }
        if (*((unsigned char *)v249 + 16) != 83) {
          goto LABEL_378;
        }
      }
      uint64_t v248 = 0;
    }
LABEL_378:
    uint64_t v305 = v248;
    LODWORD(v315) = 128;
    __int16 v250 = (const char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    uint64_t v313 = (const char **)v250;
    uint64_t v314 = 0;
    uint64_t v309 = 2;
    int v310 = 0;
    uint64_t v311 = -4096;
    uint64_t v312 = 0;
    uint64_t v308 = &unk_1F2615EC8;
    if (!v315) {
      goto LABEL_393;
    }
    uint64_t v251 = 0;
    unint64_t v252 = (unint64_t)v315 << 6;
    uint64_t v253 = v250 + 16;
    do
    {
      uint64_t v254 = v309;
      uint64_t v255 = v311;
      *(v253 - 1) = v309 & 6;
      void *v253 = 0;
      v253[1] = v255;
      if (v255 != -4096 && v255 != -8192 && v255 != 0)
      {
        void *v253 = *(void *)(v254 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v254 & 0xFFFFFFFFFFFFFFF8) = v253 - 1;
        *(v253 - 1) = v254 & 0xFFFFFFFFFFFFFFFELL;
        if (*v253) {
          *(void *)void *v253 = *(void *)*v253 & 7 | (unint64_t)(v250 + 16);
        }
        uint64_t v251 = v312;
        uint64_t v11 = (uint64_t *)(a1 + 48);
      }
      *(v253 - 2) = &unk_1F2615EC8;
      v253[2] = v251;
      v253 += 8;
      v250 += 64;
      v252 -= 64;
    }
    while (v252);
    if (v311 == -8192 || v311 == -4096 || !v311) {
      goto LABEL_393;
    }
    unint64_t v276 = v309 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v309 & 0xFFFFFFFFFFFFFFF8) = v310;
    if (v310)
    {
      void *v310 = *v310 & 7 | v276;
    }
    else
    {
      uint64_t v277 = v311;
      uint64_t v278 = ***(int32x2_t ****)v311;
      unint64_t v279 = (unint64_t)v278[303];
      uint64_t v11 = (uint64_t *)(a1 + 48);
      if (v279 > v276) {
        goto LABEL_393;
      }
      uint64_t v280 = v278[305].u32[0];
      if (v279 + 16 * v280 <= v276) {
        goto LABEL_393;
      }
      unsigned int v281 = v280 - 1;
      LODWORD(v282) = v281 & ((v311 >> 4) ^ (v311 >> 9));
      unsigned int v283 = (uint64_t *)(v279 + 16 * v282);
      uint64_t v284 = *v283;
      if (v311 == *v283)
      {
LABEL_431:
        *unsigned int v283 = -8192;
        v278[304] = vadd_s32(v278[304], (int32x2_t)0x1FFFFFFFFLL);
        uint64_t v277 = v311;
      }
      else
      {
        int v285 = 1;
        while (v284 != -4096)
        {
          int v286 = v282 + v285++;
          uint64_t v282 = v286 & v281;
          uint64_t v284 = *(void *)(v279 + 16 * v282);
          if (v311 == v284)
          {
            unsigned int v283 = (uint64_t *)(v279 + 16 * v282);
            goto LABEL_431;
          }
        }
      }
      *(unsigned char *)(v277 + 17) &= ~1u;
    }
    uint64_t v11 = (uint64_t *)(a1 + 48);
LABEL_393:
    LOBYTE(v316) = 0;
    char v318 = 0;
    unsigned int v257 = v37[1];
    uint64_t v258 = v37[2];
    if (v257 == v258) {
      goto LABEL_420;
    }
    uint64_t v259 = 0;
    do
    {
      uint64_t v260 = v259;
      *(void *)&long long v301 = 0;
      *(void *)&long long v301 = *v257;
      unint64_t v261 = sub_1CD487170(v11, &v301)[1];
      if (v261 < 8)
      {
LABEL_404:
        if ((*((unsigned char *)v306 + 23) & 0x10) != 0)
        {
          uint64_t v264 = ***v306;
          uint64_t v265 = *(void *)(v264 + 152);
          uint64_t v266 = *(unsigned int *)(v264 + 168);
          if (v266)
          {
            LODWORD(v267) = (v266 - 1) & ((v306 >> 4) ^ (v306 >> 9));
            uint64_t v268 = (uint64_t ****)(v265 + 16 * v267);
            int v269 = *v268;
            if (*v268 != v306)
            {
              int v270 = 1;
              do
              {
                if (v269 == (uint64_t ***)-4096) {
                  goto LABEL_411;
                }
                int v271 = v267 + v270++;
                uint64_t v267 = v271 & (v266 - 1);
                int v269 = *(uint64_t ****)(v265 + 16 * v267);
              }
              while (v269 != v306);
              uint64_t v268 = (uint64_t ****)(v265 + 16 * v267);
            }
          }
          else
          {
LABEL_411:
            uint64_t v268 = (uint64_t ****)(v265 + 16 * v266);
          }
          BOOL v272 = v268[1];
          uint64_t v275 = (uint64_t)*v272;
          uint64_t v274 = (char *)(v272 + 2);
          uint64_t v273 = v275;
        }
        else
        {
          uint64_t v273 = 0;
          uint64_t v274 = &byte_1CFBCE98E;
        }
        LOWORD(v312) = 1283;
        uint64_t v308 = ".for.";
        int v310 = v274;
        uint64_t v311 = v273;
        llvm::CloneBasicBlock();
      }
      unint64_t v262 = v261 & 0xFFFFFFFFFFFFFFF8;
      if ((v261 & 4) != 0 && v262)
      {
        int v263 = *(_DWORD *)(v262 + 8);
        if (!v263) {
          goto LABEL_404;
        }
      }
      else
      {
        if ((v261 & 4) == 0) {
          goto LABEL_403;
        }
        int v263 = *(_DWORD *)(v262 + 8);
      }
      if (v263 != 1) {
        goto LABEL_404;
      }
LABEL_403:
      uint64_t v259 = v260;
      ++v257;
    }
    while (v257 != v258);
    if (v318)
    {
      sub_1CC009394((uint64_t)&v316);
      MEMORY[0x1D25D9CD0](v316, 8);
      char v318 = 0;
    }
LABEL_420:
    sub_1CC4D021C(&v313);
    MEMORY[0x1D25D9CD0](v313, 8);
    v37 += 4;
  }
  while (v37 != v288);
LABEL_39:
  int v38 = i;
  if (byte_1EBCD7D40) {
    goto LABEL_283;
  }
  BOOL v289 = (*(unsigned __int8 *)(a1 + 28) | byte_1EBCD7EC0) != 0;
  uint64_t v308 = &v310;
  uint64_t v309 = 0x1000000000;
  uint64_t v39 = *((void *)i + 10);
  if (v39 == v287) {
    goto LABEL_283;
  }
  int v40 = 0;
  while (2)
  {
    uint64_t v41 = v39 - 24;
    if (!v39) {
      uint64_t v41 = 0;
    }
    uint64_t v42 = *(void *)(v41 + 48);
    if (v42) {
      uint64_t v43 = v42 - 24;
    }
    else {
      uint64_t v43 = 0;
    }
    int v44 = *(unsigned __int8 *)(v43 + 16);
    uint64_t v45 = *(void *)(v41 + 48);
    if (v44 == 83)
    {
      uint64_t v45 = *(void *)(v41 + 48);
      do
      {
        uint64_t v45 = *(void *)(v45 + 8);
        uint64_t v46 = v45 - 24;
        if (!v45) {
          uint64_t v46 = 0;
        }
      }
      while (*(unsigned char *)(v46 + 16) == 83);
    }
    uint64_t v47 = *(void *)(v39 + 8);
    unsigned int v48 = *(unsigned __int8 *)(v45 - 8) - 38;
    BOOL v196 = v48 > 0x38;
    uint64_t v49 = (1 << v48) & 0x100060000000001;
    BOOL v50 = v196 || v49 == 0;
    uint64_t v293 = v47;
    if (!v50)
    {
      if (!v289) {
        goto LABEL_63;
      }
      uint64_t v51 = *(void *)(v41 + 48);
      if (v44 == 83)
      {
        uint64_t v51 = *(void *)(v41 + 48);
        do
        {
          uint64_t v51 = *(void *)(v51 + 8);
          uint64_t v52 = v51 - 24;
          if (!v51) {
            uint64_t v52 = 0;
          }
        }
        while (*(unsigned char *)(v52 + 16) == 83);
      }
      if (*(unsigned char *)(v51 - 8) == 38)
      {
LABEL_63:
        uint64_t v53 = v42 ? v42 - 24 : 0;
        if (v42 && *(unsigned char *)(v53 + 16) == 83)
        {
          uint64_t v295 = v41 + 40;
          while (1)
          {
            uint64_t v54 = *(void *)(v53 + 40);
            for (uint64_t m = *(void *)(v54 + 48); ; uint64_t m = *(void *)(m + 8))
            {
              uint64_t v56 = m - 24;
              if (!m) {
                uint64_t v56 = 0;
              }
              if (*(unsigned char *)(v56 + 16) != 83) {
                break;
              }
            }
            uint64_t v297 = *(void *)(v42 + 8);
            if (*(unsigned __int8 *)(m - 8) - 29 < 0xB)
            {
              LODWORD(v302) = 0;
              long long v301 = 0uLL;
              uint64_t v57 = *(void *)(v53 + 8);
              if (!v57)
              {
                MEMORY[0x1D25D9CD0](0, 8);
                goto LABEL_265;
              }
              uint64_t v58 = 0;
              unsigned int v299 = (v53 >> 4) ^ (v53 >> 9);
              while (1)
              {
                uint64_t v59 = v57;
                uint64_t v60 = (void *)(v57 + 8);
                uint64_t v57 = *(void *)(v57 + 8);
                uint64_t v61 = v60[2];
                int v62 = *(unsigned __int8 *)(v61 + 16);
                if (v62 == 83)
                {
                  for (uint64_t n = *(void *)(*(void *)(v61 + 40) + 48); ; uint64_t n = *(void *)(n + 8))
                  {
                    uint64_t v64 = n - 24;
                    if (!n) {
                      uint64_t v64 = 0;
                    }
                    if (*(unsigned char *)(v64 + 16) != 83) {
                      break;
                    }
                  }
                  unsigned int v65 = *(unsigned __int8 *)(n - 8) - 38;
                  BOOL v196 = v65 > 0x38;
                  uint64_t v66 = (1 << v65) & 0x100060000000001;
                  if (!v196 && v66 != 0) {
                    goto LABEL_180;
                  }
                }
                if (!v58) {
                  break;
                }
                if (!v61) {
                  goto LABEL_110;
                }
LABEL_107:
                if (v62 == 83)
                {
                  uint64_t v307 = 0;
                  int v87 = *(_DWORD *)(v61 + 20);
                  if ((v87 & 0x40000000) != 0) {
                    uint64_t v88 = *(void *)(v61 - 8);
                  }
                  else {
                    uint64_t v88 = v61 - 32 * (v87 & 0x7FFFFFF);
                  }
                  __int16 v99 = *(void **)(v88
                                   + 32 * *(unsigned int *)(v61 + 60)
                                   + 8 * ((unint64_t)(v59 - v88) >> 5));
                  uint64_t v307 = v99;
                  int v100 = (void *)v99[5];
                  if (v100 != v99 + 5)
                  {
                    uint64_t v101 = v100 ? (uint64_t)(v100 - 3) : 0;
                    unsigned int v102 = *(unsigned __int8 *)(v101 + 16) - 40;
                    uint64_t v103 = v102 >= 0xFFFFFFF5 ? v101 : 0;
                    if (v100)
                    {
                      if (*(unsigned char *)(v103 + 16) == 37 && v102 >= 0xFFFFFFF5)
                      {
                        uint64_t v303 = *(llvm::BasicBlock **)(v61 + 40);
                        uint64_t v304 = 0;
                        __int16 v317 = 257;
                        uint64_t v304 = llvm::SplitEdge((llvm *)v99, v303, 0, 0, 0, (llvm::MemorySSAUpdater *)&v313, v17);
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                      }
                    }
                  }
                  if (!v302)
                  {
                    int v112 = 0;
                    goto LABEL_144;
                  }
                  unsigned int v105 = ((v99 >> 4) ^ (v99 >> 9)) & (v302 - 1);
                  uint64_t v106 = (uint64_t *)(v301 + 16 * v105);
                  uint64_t v107 = *v106;
                  if (v99 != (void *)*v106)
                  {
                    uint64_t v108 = 0;
                    int v109 = 1;
                    while (v107 != -4096)
                    {
                      if (v108) {
                        BOOL v110 = 0;
                      }
                      else {
                        BOOL v110 = v107 == -8192;
                      }
                      if (v110) {
                        uint64_t v108 = v106;
                      }
                      unsigned int v111 = v105 + v109++;
                      unsigned int v105 = v111 & (v302 - 1);
                      uint64_t v106 = (uint64_t *)(v301 + 16 * v105);
                      uint64_t v107 = *v106;
                      if (v99 == (void *)*v106) {
                        goto LABEL_145;
                      }
                    }
                    if (v108) {
                      int v112 = v108;
                    }
                    else {
                      int v112 = v106;
                    }
LABEL_144:
                    uint64_t v106 = sub_1CC0A3E2C((uint64_t)&v301, (uint64_t)&v307, (uint64_t *)&v307, v112);
                    *uint64_t v106 = (uint64_t)v307;
                    v106[1] = 0;
                  }
LABEL_145:
                  __int16 v113 = (llvm::LoadInst *)v106[1];
                  if (!v113)
                  {
                    char v114 = operator new(0x60uLL);
                    uint64_t v115 = (llvm::LoadInst *)(v114 + 8);
                    v114[13] = v114[13] & 0x38000000 | 1;
                    *(void *)char v114 = 0;
                    *((void *)v114 + 1) = 0;
                    *((void *)v114 + 2) = 0;
                    *((void *)v114 + 3) = v114 + 8;
                    uint64_t v116 = *(llvm::Type **)v53;
                    if ((*(unsigned char *)(v53 + 23) & 0x10) != 0)
                    {
                      uint64_t v117 = **(void **)v116;
                      uint64_t v118 = *(void *)(v117 + 152);
                      uint64_t v119 = *(unsigned int *)(v117 + 168);
                      if (!v119) {
                        goto LABEL_162;
                      }
                      LODWORD(v120) = (v119 - 1) & v299;
                      uint64_t v121 = (uint64_t *)(v118 + 16 * v120);
                      uint64_t v122 = *v121;
                      if (*v121 != v53)
                      {
                        int v123 = 1;
                        while (v122 != -4096)
                        {
                          int v124 = v120 + v123++;
                          uint64_t v120 = v124 & (v119 - 1);
                          uint64_t v122 = *(void *)(v118 + 16 * v120);
                          if (v122 == v53)
                          {
                            uint64_t v121 = (uint64_t *)(v118 + 16 * v120);
                            goto LABEL_163;
                          }
                        }
LABEL_162:
                        uint64_t v121 = (uint64_t *)(v118 + 16 * v119);
                      }
LABEL_163:
                      uint64_t v134 = (void *)v121[1];
                      uint64_t v137 = *v134;
                      uint64_t v136 = (const char *)(v134 + 2);
                      uint64_t v135 = v137;
                    }
                    else
                    {
                      uint64_t v135 = 0;
                      uint64_t v136 = &byte_1CFBCE98E;
                    }
                    __int16 v317 = 773;
                    uint64_t v313 = (const char **)v136;
                    uint64_t v314 = v135;
                    unsigned int v315 = ".wineh.reload";
                    uint64_t v138 = (char *)*((void *)v307 + 5);
                    if (v138 == (char *)v307 + 40)
                    {
                      int v140 = 0;
                    }
                    else
                    {
                      if (v138) {
                        int v139 = (unsigned __int8 *)(v138 - 24);
                      }
                      else {
                        int v139 = 0;
                      }
                      if (v139[16] - 29 >= 0xB) {
                        int v140 = 0;
                      }
                      else {
                        int v140 = (llvm::Instruction *)v139;
                      }
                    }
                    Inst = llvm::LoadInst::LoadInst(v115, v116, v58, (const char **)&v313, 0, v140);
                    v106[1] = (uint64_t)Inst;
                    __int16 v113 = Inst;
                  }
                  if (*(void *)v59)
                  {
                    **(void **)(v59 + 16) = *(void *)(v59 + 8);
                    uint64_t v142 = *(void *)(v59 + 8);
                    if (v142) {
                      *(void *)(v142 + 16) = *(void *)(v59 + 16);
                    }
                  }
                  *(void *)uint64_t v59 = v113;
                  if (v113)
                  {
                    uint64_t v145 = *((void *)v113 + 1);
                    uint64_t v143 = (void *)((char *)v113 + 8);
                    uint64_t v144 = v145;
                    *uint64_t v60 = v145;
                    if (v145) {
                      *(void *)(v144 + 16) = v60;
                    }
                    *(void *)(v59 + 16) = v143;
                    *uint64_t v143 = v59;
                  }
                  goto LABEL_180;
                }
LABEL_110:
                int v89 = (char *)operator new(0x60uLL);
                *((_DWORD *)v89 + 13) = *((_DWORD *)v89 + 13) & 0x38000000 | 1;
                *(void *)int v89 = 0;
                *((void *)v89 + 1) = 0;
                *((void *)v89 + 2) = 0;
                *((void *)v89 + 3) = v89 + 32;
                int v90 = *(llvm::Type **)v53;
                if ((*(unsigned char *)(v53 + 23) & 0x10) != 0)
                {
                  uint64_t v91 = **(void **)v90;
                  uint64_t v92 = *(void *)(v91 + 152);
                  uint64_t v93 = *(unsigned int *)(v91 + 168);
                  if (!v93) {
                    goto LABEL_153;
                  }
                  LODWORD(v94) = (v93 - 1) & v299;
                  uint64_t v95 = (uint64_t *)(v92 + 16 * v94);
                  uint64_t v96 = *v95;
                  if (*v95 != v53)
                  {
                    int v97 = 1;
                    while (v96 != -4096)
                    {
                      int v98 = v94 + v97++;
                      uint64_t v94 = v98 & (v93 - 1);
                      uint64_t v96 = *(void *)(v92 + 16 * v94);
                      if (v96 == v53)
                      {
                        uint64_t v95 = (uint64_t *)(v92 + 16 * v94);
                        goto LABEL_154;
                      }
                    }
LABEL_153:
                    uint64_t v95 = (uint64_t *)(v92 + 16 * v93);
                  }
LABEL_154:
                  uint64_t v125 = (void *)v95[1];
                  uint64_t v128 = *v125;
                  __int16 v127 = (const char *)(v125 + 2);
                  uint64_t v126 = v128;
                  goto LABEL_155;
                }
                uint64_t v126 = 0;
                __int16 v127 = &byte_1CFBCE98E;
LABEL_155:
                __int16 v317 = 773;
                uint64_t v313 = (const char **)v127;
                uint64_t v314 = v126;
                unsigned int v315 = ".wineh.reload";
                uint64_t v129 = llvm::LoadInst::LoadInst((llvm::LoadInst *)(v89 + 32), v90, v58, (const char **)&v313, 0, (llvm::Instruction *)v61);
                if (*(void *)v59)
                {
                  **(void **)(v59 + 16) = *(void *)(v59 + 8);
                  uint64_t v130 = *(void *)(v59 + 8);
                  if (v130) {
                    *(void *)(v130 + 16) = *(void *)(v59 + 16);
                  }
                }
                *(void *)uint64_t v59 = v129;
                uint64_t v133 = *((void *)v89 + 5);
                int v132 = v89 + 40;
                uint64_t v131 = v133;
                *(void *)(v59 + 8) = v133;
                if (v133) {
                  *(void *)(v131 + 16) = v60;
                }
                *(void *)(v59 + 16) = v132;
                *int v132 = v59;
LABEL_180:
                if (!v57)
                {
                  MEMORY[0x1D25D9CD0](v301, 8);
                  if (!v58) {
                    goto LABEL_265;
                  }
                  goto LABEL_229;
                }
              }
              uint64_t v68 = operator new(0x68uLL);
              uint64_t v58 = (llvm::Value *)(v68 + 8);
              v68[13] = v68[13] & 0x38000000 | 1;
              *(void *)uint64_t v68 = 0;
              *((void *)v68 + 1) = 0;
              *((void *)v68 + 2) = 0;
              *((void *)v68 + 3) = v68 + 8;
              int v69 = *(llvm::Type **)v53;
              if ((*(unsigned char *)(v53 + 23) & 0x10) != 0)
              {
                uint64_t v70 = **(void **)v69;
                uint64_t v71 = *(void *)(v70 + 152);
                uint64_t v72 = *(unsigned int *)(v70 + 168);
                if (!v72) {
                  goto LABEL_98;
                }
                LODWORD(v73) = (v72 - 1) & v299;
                uint64_t v74 = (uint64_t *)(v71 + 16 * v73);
                uint64_t v75 = *v74;
                if (*v74 != v53)
                {
                  int v76 = 1;
                  while (v75 != -4096)
                  {
                    int v77 = v73 + v76++;
                    uint64_t v73 = v77 & (v72 - 1);
                    uint64_t v75 = *(void *)(v71 + 16 * v73);
                    if (v75 == v53)
                    {
                      uint64_t v74 = (uint64_t *)(v71 + 16 * v73);
                      goto LABEL_99;
                    }
                  }
LABEL_98:
                  uint64_t v74 = (uint64_t *)(v71 + 16 * v72);
                }
LABEL_99:
                uint64_t v78 = (void *)v74[1];
                uint64_t v81 = *v78;
                int v80 = (const char *)(v78 + 2);
                uint64_t v79 = v81;
              }
              else
              {
                uint64_t v79 = 0;
                int v80 = &byte_1CFBCE98E;
              }
              int v82 = (llvm::Type *)*(unsigned int *)(*(void *)(a1 + 40) + 4);
              __int16 v317 = 773;
              uint64_t v313 = (const char **)v80;
              uint64_t v314 = v79;
              unsigned int v315 = ".wineh.spillslot";
              uint64_t v83 = *((void *)i + 10);
              if (v83) {
                uint64_t v84 = v83 - 24;
              }
              else {
                uint64_t v84 = 0;
              }
              uint64_t v85 = *(void *)(v84 + 48);
              if (v85) {
                uint64_t v86 = (llvm::Instruction *)(v85 - 24);
              }
              else {
                uint64_t v86 = 0;
              }
              llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v68 + 8), v69, v82, 0, (const char **)&v313, v86);
              uint64_t v61 = *(void *)(v59 + 24);
              int v62 = *(unsigned __int8 *)(v61 + 16);
              if (!v61) {
                goto LABEL_110;
              }
              goto LABEL_107;
            }
            unsigned int v146 = operator new(0x68uLL);
            uint64_t v58 = (llvm::Value *)(v146 + 8);
            v146[13] = v146[13] & 0x38000000 | 1;
            *(void *)unsigned int v146 = 0;
            *((void *)v146 + 1) = 0;
            *((void *)v146 + 2) = 0;
            *((void *)v146 + 3) = v146 + 8;
            int v147 = *(llvm::Type **)v53;
            unsigned int v148 = v53 >> 4;
            if ((*(unsigned char *)(v53 + 23) & 0x10) != 0) {
              break;
            }
            uint64_t v158 = 0;
            unsigned int v159 = &byte_1CFBCE98E;
LABEL_198:
            unsigned int v161 = (llvm::Type *)*(unsigned int *)(*(void *)(a1 + 40) + 4);
            __int16 v317 = 773;
            uint64_t v313 = (const char **)v159;
            uint64_t v314 = v158;
            unsigned int v315 = ".wineh.spillslot";
            uint64_t v162 = *((void *)i + 10);
            if (v162) {
              uint64_t v163 = v162 - 24;
            }
            else {
              uint64_t v163 = 0;
            }
            uint64_t v164 = *(void *)(v163 + 48);
            if (v164) {
              BOOL v165 = (llvm::Instruction *)(v164 - 24);
            }
            else {
              BOOL v165 = 0;
            }
            llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v146 + 8), v147, v161, 0, (const char **)&v313, v165);
            unint64_t v166 = operator new(0x60uLL);
            int v167 = (llvm::Value *)(v166 + 8);
            v166[13] = v166[13] & 0x38000000 | 1;
            *(void *)unint64_t v166 = 0;
            *((void *)v166 + 1) = 0;
            *((void *)v166 + 2) = 0;
            *((void *)v166 + 3) = v166 + 8;
            unsigned int v168 = *(llvm::Type **)v53;
            if ((*(unsigned char *)(v53 + 23) & 0x10) == 0)
            {
              uint64_t v178 = 0;
              uint64_t v179 = &byte_1CFBCE98E;
              goto LABEL_213;
            }
            uint64_t v169 = **(void **)v168;
            uint64_t v170 = *(void *)(v169 + 152);
            uint64_t v171 = *(unsigned int *)(v169 + 168);
            if (!v171) {
              goto LABEL_211;
            }
            LODWORD(v172) = (v171 - 1) & (v148 ^ (v53 >> 9));
            unsigned int v173 = (uint64_t *)(v170 + 16 * v172);
            uint64_t v174 = *v173;
            if (*v173 != v53)
            {
              int v175 = 1;
              while (v174 != -4096)
              {
                int v176 = v172 + v175++;
                uint64_t v172 = v176 & (v171 - 1);
                uint64_t v174 = *(void *)(v170 + 16 * v172);
                if (v174 == v53)
                {
                  unsigned int v173 = (uint64_t *)(v170 + 16 * v172);
                  goto LABEL_212;
                }
              }
LABEL_211:
              unsigned int v173 = (uint64_t *)(v170 + 16 * v171);
            }
LABEL_212:
            uint64_t v177 = (void *)v173[1];
            uint64_t v180 = *v177;
            uint64_t v179 = (const char *)(v177 + 2);
            uint64_t v178 = v180;
LABEL_213:
            uint64_t v181 = v54 + 40;
            __int16 v317 = 773;
            uint64_t v313 = (const char **)v179;
            uint64_t v314 = v178;
            unsigned int v315 = ".wineh.reload";
            uint64_t v182 = *(void *)(v54 + 48);
            if (v182 != v54 + 40)
            {
              while (1)
              {
                uint64_t v183 = v182 - 24;
                if (!v182) {
                  uint64_t v183 = 0;
                }
                if (*(unsigned char *)(v183 + 16) != 83) {
                  break;
                }
                uint64_t v182 = *(void *)(v182 + 8);
                if (v182 == v181) {
                  goto LABEL_225;
                }
              }
              unsigned int v184 = *(unsigned __int8 *)(v182 - 8) - 38;
              BOOL v196 = v184 > 0x38;
              uint64_t v185 = (1 << v184) & 0x100060000000001;
              if (v196 || v185 == 0) {
                uint64_t v181 = v182;
              }
              else {
                uint64_t v181 = *(void *)(v182 + 8);
              }
            }
LABEL_225:
            if (v181) {
              unint64_t v187 = (llvm::Instruction *)(v181 - 24);
            }
            else {
              unint64_t v187 = 0;
            }
            llvm::LoadInst::LoadInst((llvm::LoadInst *)(v166 + 8), v168, v58, (const char **)&v313, 0, v187);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v53, v167, (llvm::Value *)1);
LABEL_229:
            uint64_t v313 = &v315;
            HIDWORD(v314) = 4;
            unsigned int v315 = *(const char **)(v53 + 40);
            uint64_t v316 = v53;
            int v188 = 1;
            do
            {
              unsigned __int16 v189 = (const char *)&v313[2 * v188];
              uint64_t v190 = *((void *)v189 - 2);
              uint64_t v191 = *((void *)v189 - 1);
              LODWORD(v314) = v188 - 1;
              if (v191 && *(unsigned char *)(v191 + 16) == 83 && *(void *)(v191 + 40) == v190)
              {
                uint64_t v200 = *(_DWORD *)(v191 + 20) & 0x7FFFFFF;
                if (v200)
                {
                  uint64_t v201 = 0;
                  uint64_t v202 = 0;
                  uint64_t v203 = 32 * v200;
                  do
                  {
                    int v204 = *(_DWORD *)(v191 + 20);
                    if ((v204 & 0x40000000) != 0) {
                      uint64_t v205 = *(void *)(v191 - 8);
                    }
                    else {
                      uint64_t v205 = v191 - 32 * (v204 & 0x7FFFFFF);
                    }
                    int v12 = *(unsigned __int8 **)(v205 + v202);
                    if (v12[16] - 11 >= 2) {
                      sub_1CC4D04E4(*(llvm::StoreInst **)(v205 + 32 * *(unsigned int *)(v191 + 60) + v201), (llvm::Type **)v12, v58, (uint64_t)&v313);
                    }
                    v202 += 32;
                    v201 += 8;
                  }
                  while (v203 != v202);
                }
              }
              else
              {
                uint64_t v192 = *(void *)(v190 + 8);
                if (v192)
                {
                  while (1)
                  {
                    uint64_t v193 = *(void *)(v192 + 24);
                    unsigned int v194 = *(unsigned __int8 *)(v193 + 16);
                    BOOL v195 = v193 && v194 >= 0x1C;
                    BOOL v196 = !v195 || v194 - 29 > 0xA;
                    if (!v196) {
                      break;
                    }
                    uint64_t v192 = *(void *)(v192 + 8);
                    if (!v192) {
                      goto LABEL_262;
                    }
                  }
LABEL_244:
                  sub_1CC4D04E4(*(llvm::StoreInst **)(v193 + 40), (llvm::Type **)v191, v58, (uint64_t)&v313);
                  while (1)
                  {
                    uint64_t v192 = *(void *)(v192 + 8);
                    if (!v192) {
                      break;
                    }
                    uint64_t v193 = *(void *)(v192 + 24);
                    unsigned int v197 = *(unsigned __int8 *)(v193 + 16);
                    if (v193) {
                      BOOL v198 = v197 >= 0x1C;
                    }
                    else {
                      BOOL v198 = 0;
                    }
                    if (v198 && v197 - 29 < 0xB) {
                      goto LABEL_244;
                    }
                  }
                }
              }
LABEL_262:
              int v188 = v314;
            }
            while (v314);
            if (v313 != &v315) {
              free(v313);
            }
LABEL_265:
            if (v309 >= (unint64_t)HIDWORD(v309)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v11 = (uint64_t *)(a1 + 48);
            *((void *)v308 + v309) = v53;
            int v40 = v309 + 1;
            LODWORD(v309) = v309 + 1;
            uint64_t v42 = v297;
            if (v297 != v295)
            {
              uint64_t v206 = v297 - 24;
              if (!v297) {
                uint64_t v206 = 0;
              }
              int v207 = *(unsigned __int8 *)(v206 + 16);
              uint64_t v53 = v207 == 83 ? v206 : 0;
              if (v297 && v207 == 83) {
                continue;
              }
            }
            goto LABEL_278;
          }
          uint64_t v149 = **(void **)v147;
          uint64_t v150 = *(void *)(v149 + 152);
          uint64_t v151 = *(unsigned int *)(v149 + 168);
          if (v151)
          {
            LODWORD(v152) = (v151 - 1) & (v148 ^ (v53 >> 9));
            uint64_t v153 = (uint64_t *)(v150 + 16 * v152);
            uint64_t v154 = *v153;
            if (*v153 != v53)
            {
              int v155 = 1;
              while (v154 != -4096)
              {
                int v156 = v152 + v155++;
                uint64_t v152 = v156 & (v151 - 1);
                uint64_t v154 = *(void *)(v150 + 16 * v152);
                if (v154 == v53)
                {
                  uint64_t v153 = (uint64_t *)(v150 + 16 * v152);
                  goto LABEL_197;
                }
              }
              goto LABEL_196;
            }
          }
          else
          {
LABEL_196:
            uint64_t v153 = (uint64_t *)(v150 + 16 * v151);
          }
LABEL_197:
          uint64_t v157 = (void *)v153[1];
          uint64_t v160 = *v157;
          unsigned int v159 = (const char *)(v157 + 2);
          uint64_t v158 = v160;
          goto LABEL_198;
        }
      }
    }
LABEL_278:
    uint64_t v39 = v293;
    if (v293 != v287) {
      continue;
    }
    break;
  }
  if (v40)
  {
    unint64_t v208 = *(llvm::UndefValue ***)v308;
    uint64_t v209 = llvm::UndefValue::get(**(llvm::UndefValue ***)v308, (llvm::Type *)v12);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v208, v209, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v308 != &v310) {
    free(v308);
  }
LABEL_283:
  if (!byte_1EBCD7E00)
  {
    BOOL v210 = *(void **)(a1 + 96);
    uint64_t v292 = *(void **)(a1 + 104);
    if (v210 != v292)
    {
      do
      {
        for (iuint64_t i = *(void *)(*v210 + 48); ; iuint64_t i = *(void *)(ii + 8))
        {
          uint64_t v212 = ii - 24;
          uint64_t v213 = ii ? ii - 24 : 0;
          if (*(unsigned char *)(v213 + 16) != 83) {
            break;
          }
        }
        uint64_t v296 = 0;
        uint64_t v298 = 0;
        unsigned int v214 = *(unsigned __int8 *)(ii - 8) - 79;
        if (v214 >= 2) {
          uint64_t v215 = 0;
        }
        else {
          uint64_t v215 = v212;
        }
        unsigned int v300 = v214;
        if (v214 <= 1)
        {
          int v216 = *(unsigned __int8 *)(v212 + 16);
          if (v216 == 80) {
            uint64_t v217 = v212;
          }
          else {
            uint64_t v217 = 0;
          }
          if (v216 != 79) {
            uint64_t v212 = 0;
          }
          uint64_t v296 = v217;
          uint64_t v298 = v212;
        }
        unint64_t v219 = (llvm **)v210[1];
        uint64_t v218 = (llvm **)v210[2];
        uint64_t v294 = v210;
        while (v219 != v218)
        {
          uint64_t v220 = *v219;
          uint64_t v221 = (char *)*v219 + 40;
          for (juint64_t j = (char *)*((void *)*v219 + 6); jj != v221; juint64_t j = (char *)*((void *)jj + 1))
          {
            if (jj) {
              unsigned int v223 = (unsigned __int8 *)(jj - 24);
            }
            else {
              unsigned int v223 = 0;
            }
            unsigned int v224 = v223[16] - 33;
            BOOL v196 = v224 > 0x33;
            uint64_t v225 = (1 << v224) & 0x8000000000041;
            if (!v196 && v225 != 0)
            {
              sub_1CC233A58(jj - 24, 1, (uint64_t *)&v308);
              uint64_t v227 = (_BYTE)v311 ? *(void *)v308 : 0;
              if (v227 != v215
                && ((int v228 = llvm::Value::stripPointerCasts(*((llvm::Value **)jj - 7))) == 0
                 || *((unsigned char *)v228 + 16)
                 || ((*((unsigned char *)v228 + 33) & 0x20) == 0
                  || ((uint64_t v229 = *((void *)jj + 5)) == 0 || (*(unsigned char *)(v229 + 16) & 0x20) == 0)
                  && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(jj - 24), 37) & 1) == 0)
                 && *(unsigned char *)(*((void *)jj - 7) + 16) != 24))
              {
                if (*(jj - 8) == 33) {
                  llvm::removeUnwindEdge(v220, 0, v13);
                }
                llvm::changeToUnreachable((llvm *)v223, 0, 0, 0, v15);
                break;
              }
            }
          }
          uint64_t v230 = *(void **)v221;
          if (*(char **)v221 == v221)
          {
            unint64_t v231 = 0;
            BOOL v238 = 0;
            BOOL v237 = 0;
            int v236 = MEMORY[0x10];
          }
          else
          {
            unint64_t v231 = (llvm *)(v230 - 3);
            BOOL v232 = v230 == 0;
            if (v230) {
              uint64_t v233 = v230 - 3;
            }
            else {
              uint64_t v233 = 0;
            }
            unsigned int v234 = *((unsigned __int8 *)v233 + 16) - 40;
            if (v234 >= 0xFFFFFFF5) {
              unsigned int v235 = v233;
            }
            else {
              unsigned int v235 = 0;
            }
            int v236 = *((unsigned __int8 *)v235 + 16);
            if (v234 < 0xFFFFFFF5) {
              BOOL v232 = 1;
            }
            if (v236 != 37 || v232)
            {
              if (v236 != 36) {
                BOOL v232 = 1;
              }
              if (v232)
              {
                BOOL v238 = 0;
                BOOL v237 = 0;
              }
              else
              {
                BOOL v238 = 0;
                BOOL v237 = v235[-4 * (*((_DWORD *)v235 + 5) & 0x7FFFFFF)] != v298;
                int v236 = 36;
              }
            }
            else
            {
              BOOL v237 = 0;
              BOOL v238 = *(v235 - 8) != v296;
              int v236 = 37;
            }
          }
          BOOL v239 = v236 != 29 || v300 >= 2;
          if (!v239 || v238 || v237)
          {
            llvm::changeToUnreachable(v231, 0, 0, 0, v15);
          }
          else if (v236 == 33 && *(_DWORD *)(a1 + 32) == 9)
          {
            if (v298) {
              llvm::removeUnwindEdge(v220, 0, v13);
            }
          }
          ++v219;
        }
        BOOL v210 = v294 + 4;
        int v38 = i;
      }
      while (v294 + 4 != v292);
    }
    uint64_t v240 = *((void *)v38 + 10);
    if (v240 != v287)
    {
      do
      {
        uint64_t v241 = *(void *)(v240 + 8);
        if (v240) {
          uint64_t v242 = (llvm::BasicBlock *)(v240 - 24);
        }
        else {
          uint64_t v242 = 0;
        }
        llvm::SimplifyInstructionsInBlock(v242, 0, (uint64_t)v13, (uint64_t)v14, v15, v16, (uint64_t)v17);
        llvm::ConstantFoldTerminator(v242, 1, 0, 0);
        llvm::MergeBlockIntoPredecessor(v242, 0, 0, 0, 0, 0);
        uint64_t v240 = v241;
      }
      while (v241 != v287);
    }
    llvm::removeUnreachableBlocks(v38, 0, 0, v14, v15);
    uint64_t v11 = (uint64_t *)(a1 + 48);
  }
  sub_1CD58F08C(v11);
  sub_1CD58F140(a1 + 72);
  return 1;
}

void sub_1CC4CDFC0(void ***a1)
{
  int v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unsigned int v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1CC4CE04C(uint64_t *result, long long *a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  unsigned int v5 = (void *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *result) >> 5;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59) {
      abort();
    }
    uint64_t v9 = v4 - *result;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    v15[4] = result + 2;
    if (v10 >> 59) {
      sub_1CB833614();
    }
    uint64_t v11 = (char *)operator new(32 * v10);
    long long v12 = *a2;
    long long v13 = a2[1];
    int v14 = &v11[32 * v7];
    v15[0] = v11;
    v15[1] = v14;
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *(_OWORD *)int v14 = v12;
    *((_OWORD *)v14 + 1) = v13;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    v15[2] = v14 + 32;
    v15[3] = &v11[32 * v10];
    sub_1CD58F244(v3, v15);
    unsigned int v6 = (void *)v3[1];
    uint64_t result = (uint64_t *)sub_1CD58F2BC((uint64_t)v15);
  }
  else
  {
    *unsigned int v5 = *(void *)a2;
    v5[1] = 0;
    void v5[2] = 0;
    v5[3] = 0;
    *(_OWORD *)(v5 + 1) = *(long long *)((char *)a2 + 8);
    v5[3] = *((void *)a2 + 3);
    unsigned int v6 = v5 + 4;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
  }
  v3[1] = (uint64_t)v6;
  return result;
}

uint64_t sub_1CC4CE154(uint64_t result, _DWORD *a2, int a3)
{
  int v3 = a2[5] & 0x7FFFFFF;
  if (v3)
  {
    unsigned int v6 = (void **)result;
    int v7 = 0;
    unint64_t v8 = (uint64_t *)(*(void *)(result + 8) + 48);
    uint64_t v9 = (void **)(result + 16);
    do
    {
      uint64_t v26 = 0;
      int v10 = a2[5];
      if ((v10 & 0x40000000) != 0) {
        uint64_t v11 = (_DWORD *)*((void *)a2 - 1);
      }
      else {
        uint64_t v11 = &a2[-8 * (v10 & 0x7FFFFFF)];
      }
      uint64_t v26 = *(void *)&v11[8 * a2[15] + 2 * v7];
      uint64_t v12 = *(void *)(v26 + 40);
      if (v12 == v26 + 40) {
        goto LABEL_33;
      }
      uint64_t v13 = v12 - 24;
      if (!v12) {
        uint64_t v13 = 0;
      }
      unsigned int v14 = *(unsigned __int8 *)(v13 + 16) - 40;
      if (v14 < 0xFFFFFFF5) {
        uint64_t v13 = 0;
      }
      if (v12 && (*(unsigned char *)(v13 + 16) == 37 ? (BOOL v15 = v14 >= 0xFFFFFFF5) : (BOOL v15 = 0), v15))
      {
        uint64_t v16 = *(void *)(*(void *)(v13 - 64) - 32);
        int v17 = *(_DWORD *)(v16 + 20);
        if ((v17 & 0x40000000) != 0) {
          uint64_t v18 = *(void **)(v16 - 8);
        }
        else {
          uint64_t v18 = (void *)(v16 - 32 * (v17 & 0x7FFFFFF));
        }
        int v19 = v6;
      }
      else
      {
LABEL_33:
        uint64_t result = (uint64_t)sub_1CD487170(v8, &v26);
        uint64_t v25 = *(void *)(result + 8);
        unint64_t v20 = (void **)(v25 & 0xFFFFFFFFFFFFFFF8);
        int v19 = v9;
        if ((v25 & 4) == 0) {
          goto LABEL_22;
        }
        uint64_t v18 = *v20;
        int v19 = v9;
      }
      unint64_t v20 = (void **)*v18;
LABEL_22:
      if ((((v20 == (void **)**v19) ^ a3) & 1) == 0)
      {
        int v21 = a2[5];
        uint64_t v22 = v21 & 0x7FFFFFF;
        if ((v21 & 0x7FFFFFF) != 0)
        {
          uint64_t v23 = 0;
          while (1)
          {
            unsigned int v24 = &a2[-8 * v22];
            if ((v21 & 0x40000000) != 0) {
              unsigned int v24 = (_DWORD *)*((void *)a2 - 1);
            }
            if (*(void *)&v24[8 * a2[15] + 2 * v23] == v26) {
              break;
            }
            if (v22 == ++v23) {
              goto LABEL_29;
            }
          }
        }
        else
        {
LABEL_29:
          LODWORD(v23) = -1;
        }
        uint64_t result = llvm::PHINode::removeIncomingValue((llvm::PHINode *)a2, v23, 0);
        --v7;
        --v3;
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t sub_1CC4CE2F8(void *a1)
{
  uint64_t v1 = a1[1];
  unint64_t v19 = v1 & 6;
  unint64_t v20 = 0;
  int v2 = (int32x2_t ****)a1[3];
  int v21 = v2;
  if (v2 != (int32x2_t ****)-8192 && v2 != (int32x2_t ****)-4096 && v2 != 0)
  {
    unint64_t v20 = *(unint64_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(v1 & 0xFFFFFFFFFFFFFFF8) = &v19;
    unint64_t v19 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (v20) {
      *unint64_t v20 = *v20 & 7 | (unint64_t)&v20;
    }
  }
  unint64_t v4 = (int32x2_t *)a1[4];
  uint64_t v18 = &unk_1F2615EC8;
  uint64_t v22 = v4;
  uint64_t result = sub_1CC4CE938(v4, (uint64_t)&v18);
  if (v21 != (int32x2_t ****)-8192 && v21 != (int32x2_t ****)-4096 && v21 != 0)
  {
    unint64_t v7 = v19 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v19 & 0xFFFFFFFFFFFFFFF8) = v20;
    if (v20)
    {
      *unint64_t v20 = *v20 & 7 | v7;
    }
    else
    {
      unint64_t v8 = v21;
      uint64_t v9 = ***v21;
      unint64_t v10 = (unint64_t)v9[303];
      if (v10 <= v7)
      {
        uint64_t v11 = v9[305].u32[0];
        if (v10 + 16 * v11 > v7)
        {
          unsigned int v12 = v11 - 1;
          LODWORD(v13) = v12 & ((v21 >> 4) ^ (v21 >> 9));
          unsigned int v14 = (int32x2_t *****)(v10 + 16 * v13);
          BOOL v15 = *v14;
          if (v21 == *v14)
          {
LABEL_21:
            *unsigned int v14 = (int32x2_t ****)-8192;
            v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
            unint64_t v8 = v21;
          }
          else
          {
            int v16 = 1;
            while (v15 != (int32x2_t ****)-4096)
            {
              int v17 = v13 + v16++;
              uint64_t v13 = v17 & v12;
              BOOL v15 = *(int32x2_t *****)(v10 + 16 * v13);
              if (v21 == v15)
              {
                unsigned int v14 = (int32x2_t *****)(v10 + 16 * v13);
                goto LABEL_21;
              }
            }
          }
          *((unsigned char *)v8 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

int32x2_t *sub_1CC4CE488(void *a1, int32x2_t ****a2)
{
  uint64_t v3 = a1[1];
  unint64_t v61 = v3 & 6;
  int v62 = 0;
  unint64_t v4 = (int32x2_t ****)a1[3];
  uint64_t v63 = v4;
  if (v4 != (int32x2_t ****)-8192 && v4 != (int32x2_t ****)-4096 && v4 != 0)
  {
    int v62 = *(unint64_t **)(v3 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(v3 & 0xFFFFFFFFFFFFFFF8) = &v61;
    unint64_t v61 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (v62) {
      unint64_t *v62 = *v62 & 7 | (unint64_t)&v62;
    }
  }
  uint64_t result = (int32x2_t *)a1[4];
  uint64_t v60 = &unk_1F2615EC8;
  uint64_t v64 = result;
  int32x2_t v7 = *result;
  uint64_t v8 = result[2].u32[0];
  if (!v8)
  {
LABEL_14:
    unint64_t v10 = (void *)(*(void *)&v7 + (v8 << 6));
    goto LABEL_15;
  }
  uint64_t v9 = ((v63 >> 4) ^ (v63 >> 9)) & (v8 - 1);
  unint64_t v10 = (void *)(*(void *)&v7 + (v9 << 6));
  uint64_t v11 = (int32x2_t ****)v10[3];
  if (v63 != v11)
  {
    int v12 = 1;
    while (v11 != (int32x2_t ****)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      unint64_t v10 = (void *)(*(void *)&v7 + (v9 << 6));
      uint64_t v11 = (int32x2_t ****)v10[3];
      if (v63 == v11) {
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
LABEL_15:
  if ((void *)(*(void *)&v7 + (v8 << 6)) != v10)
  {
    uint64_t v57 = 6;
    uint64_t v58 = 0;
    unsigned int v14 = (int32x2_t ****)v10[7];
    uint64_t v59 = v14;
    if (v14 && v14 != (int32x2_t ****)-8192 && v14 != (int32x2_t ****)-4096)
    {
      unint64_t v15 = v10[5] & 0xFFFFFFFFFFFFFFF8;
      uint64_t v58 = *(unint64_t **)v15;
      *(void *)unint64_t v15 = &v57;
      uint64_t v57 = v15 | 6;
      if (v58) {
        *uint64_t v58 = *v58 & 7 | (unint64_t)&v58;
      }
      uint64_t result = v64;
    }
    sub_1CC4CECF0(result, v10);
    uint64_t v16 = (uint64_t)v64;
    uint64_t v53 = a2;
    uint64_t v54 = 6;
    uint64_t v55 = 0;
    uint64_t v56 = v59;
    if (v59)
    {
      if (v59 != (int32x2_t ****)-8192 && v59 != (int32x2_t ****)-4096)
      {
        unint64_t v17 = v57 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v55 = *(unint64_t **)(v57 & 0xFFFFFFFFFFFFFFF8);
        *(void *)unint64_t v17 = &v54;
        uint64_t v54 = v17 | 6;
        if (v55) {
          *uint64_t v55 = *v55 & 7 | (unint64_t)&v55;
        }
      }
    }
    uint64_t result = (int32x2_t *)sub_1CC4CEFAC(v16, &v53, (uint64_t)v52);
    if (v56 && v56 != (int32x2_t ****)-8192 && v56 != (int32x2_t ****)-4096)
    {
      unint64_t v18 = v54 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v54 & 0xFFFFFFFFFFFFFFF8) = v55;
      if (v55)
      {
        *uint64_t v55 = *v55 & 7 | v18;
      }
      else
      {
        unint64_t v19 = v56;
        unint64_t v20 = ***v56;
        unint64_t v21 = (unint64_t)v20[303];
        if (v21 <= v18)
        {
          uint64_t v22 = v20[305].u32[0];
          if (v21 + 16 * v22 > v18)
          {
            unsigned int v23 = v22 - 1;
            LODWORD(v24) = v23 & ((v56 >> 4) ^ (v56 >> 9));
            uint64_t v25 = (int32x2_t *****)(v21 + 16 * v24);
            uint64_t v26 = *v25;
            if (v56 == *v25)
            {
LABEL_38:
              *uint64_t v25 = (int32x2_t ****)-8192;
              v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
              unint64_t v19 = v56;
            }
            else
            {
              int v27 = 1;
              while (v26 != (int32x2_t ****)-4096)
              {
                int v28 = v24 + v27++;
                uint64_t v24 = v28 & v23;
                uint64_t v26 = *(int32x2_t *****)(v21 + 16 * v24);
                if (v56 == v26)
                {
                  uint64_t v25 = (int32x2_t *****)(v21 + 16 * v24);
                  goto LABEL_38;
                }
              }
            }
            *((unsigned char *)v19 + 17) &= ~1u;
          }
        }
      }
    }
    if (v59 && v59 != (int32x2_t ****)-8192 && v59 != (int32x2_t ****)-4096)
    {
      unint64_t v29 = v57 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v57 & 0xFFFFFFFFFFFFFFF8) = v58;
      if (v58)
      {
        *uint64_t v58 = *v58 & 7 | v29;
      }
      else
      {
        uint64_t v30 = v59;
        unint64_t v31 = ***v59;
        unint64_t v32 = (unint64_t)v31[303];
        if (v32 <= v29)
        {
          uint64_t v33 = v31[305].u32[0];
          if (v32 + 16 * v33 > v29)
          {
            unsigned int v34 = v33 - 1;
            LODWORD(v35) = v34 & ((v59 >> 4) ^ (v59 >> 9));
            uint64_t v36 = (int32x2_t *****)(v32 + 16 * v35);
            int v37 = *v36;
            if (v59 == *v36)
            {
LABEL_52:
              *uint64_t v36 = (int32x2_t ****)-8192;
              v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v30 = v59;
            }
            else
            {
              int v38 = 1;
              while (v37 != (int32x2_t ****)-4096)
              {
                int v39 = v35 + v38++;
                uint64_t v35 = v39 & v34;
                int v37 = *(int32x2_t *****)(v32 + 16 * v35);
                if (v59 == v37)
                {
                  uint64_t v36 = (int32x2_t *****)(v32 + 16 * v35);
                  goto LABEL_52;
                }
              }
            }
            *((unsigned char *)v30 + 17) &= ~1u;
          }
        }
      }
    }
  }
  if (v63 != (int32x2_t ****)-8192 && v63 != (int32x2_t ****)-4096 && v63 != 0)
  {
    unint64_t v41 = v61 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v61 & 0xFFFFFFFFFFFFFFF8) = v62;
    if (v62)
    {
      unint64_t *v62 = *v62 & 7 | v41;
    }
    else
    {
      uint64_t v42 = v63;
      uint64_t v43 = ***v63;
      unint64_t v44 = (unint64_t)v43[303];
      if (v44 <= v41)
      {
        uint64_t v45 = v43[305].u32[0];
        if (v44 + 16 * v45 > v41)
        {
          unsigned int v46 = v45 - 1;
          LODWORD(v47) = v46 & ((v63 >> 4) ^ (v63 >> 9));
          unsigned int v48 = (int32x2_t *****)(v44 + 16 * v47);
          uint64_t v49 = *v48;
          if (v63 == *v48)
          {
LABEL_68:
            *unsigned int v48 = (int32x2_t ****)-8192;
            v43[304] = vadd_s32(v43[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v42 = v63;
          }
          else
          {
            int v50 = 1;
            while (v49 != (int32x2_t ****)-4096)
            {
              int v51 = v47 + v50++;
              uint64_t v47 = v51 & v46;
              uint64_t v49 = *(int32x2_t *****)(v44 + 16 * v47);
              if (v63 == v49)
              {
                unsigned int v48 = (int32x2_t *****)(v44 + 16 * v47);
                goto LABEL_68;
              }
            }
          }
          *((unsigned char *)v42 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC4CE938(int32x2_t *a1, uint64_t a2)
{
  __int32 v2 = a1[2].i32[0];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 + 24);
  __int32 v4 = v2 - 1;
  uint64_t v5 = ((v3 >> 4) ^ (v3 >> 9)) & (v2 - 1);
  unsigned int v6 = (void *)(*(void *)a1 + (v5 << 6));
  uint64_t v7 = v6[3];
  if (v3 != v7)
  {
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & v4;
      unsigned int v6 = (void *)(*(void *)a1 + (v5 << 6));
      uint64_t v7 = v6[3];
      if (v3 == v7) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  uint64_t v10 = v6[7];
  uint64_t v11 = (int32x2_t *)&unk_1CD91C000;
  if (v10 && v10 != -8192 && v10 != -4096)
  {
    unint64_t v19 = v6[5] & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v19 = v6[6];
    unint64_t v20 = (unint64_t *)v6[6];
    if (v20)
    {
      *unint64_t v20 = *v20 & 7 | v19;
    }
    else
    {
      uint64_t v21 = v6[7];
      uint64_t v22 = ***(int32x2_t ****)v21;
      unint64_t v23 = (unint64_t)v22[303];
      if (v23 <= v19)
      {
        uint64_t v24 = v22[305].u32[0];
        if (v23 + 16 * v24 > v19)
        {
          unsigned int v25 = v24 - 1;
          LODWORD(v26) = v25 & ((v21 >> 4) ^ (v21 >> 9));
          int v27 = (uint64_t *)(v23 + 16 * v26);
          uint64_t v28 = *v27;
          if (v21 == *v27)
          {
LABEL_34:
            *int v27 = -8192;
            v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v21 = v6[7];
          }
          else
          {
            int v29 = 1;
            while (v28 != -4096)
            {
              int v30 = v26 + v29++;
              uint64_t v26 = v30 & v25;
              uint64_t v28 = *(void *)(v23 + 16 * v26);
              if (v21 == v28)
              {
                int v27 = (uint64_t *)(v23 + 16 * v26);
                goto LABEL_34;
              }
            }
          }
          *(unsigned char *)(v21 + 17) &= ~1u;
        }
      }
    }
    uint64_t v3 = v6[3];
  }
  v44[0] = 2;
  v44[1] = 0;
  uint64_t v12 = -8192;
  uint64_t v45 = -8192;
  uint64_t v46 = 0;
  if (v3 != -8192)
  {
    if (v3 != -4096 && v3 != 0)
    {
      unint64_t v31 = v6[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v31 = v6[2];
      unint64_t v32 = (unint64_t *)v6[2];
      if (v32)
      {
        *unint64_t v32 = *v32 & 7 | v31;
      }
      else
      {
        uint64_t v33 = v6[3];
        unsigned int v34 = ***(int32x2_t ****)v33;
        unint64_t v35 = (unint64_t)v34[303];
        if (v35 <= v31)
        {
          uint64_t v36 = v34[305].u32[0];
          if (v35 + 16 * v36 > v31)
          {
            unsigned int v37 = v36 - 1;
            LODWORD(v38) = v37 & ((v33 >> 4) ^ (v33 >> 9));
            int v39 = (uint64_t *)(v35 + 16 * v38);
            uint64_t v40 = *v39;
            if (v33 == *v39)
            {
LABEL_44:
              *int v39 = -8192;
              v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v33 = v6[3];
            }
            else
            {
              int v41 = 1;
              while (v40 != -4096)
              {
                int v42 = v38 + v41++;
                uint64_t v38 = v42 & v37;
                uint64_t v40 = *(void *)(v35 + 16 * v38);
                if (v33 == v40)
                {
                  int v39 = (uint64_t *)(v35 + 16 * v38);
                  goto LABEL_44;
                }
              }
            }
            *(unsigned char *)(v33 + 17) &= ~1u;
          }
        }
      }
      uint64_t v12 = v45;
    }
    v6[3] = v12;
    if (v12 != -4096 && v12 != -8192 && v12 != 0)
    {
      uint64_t v15 = v44[0];
      uint64_t v16 = (void *)(v44[0] & 0xFFFFFFFFFFFFFFF8);
      void v6[2] = *(void *)(v44[0] & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v16 = v6 + 1;
      v6[1] = v15 & 0xFFFFFFFFFFFFFFF8 | v6[1] & 7;
      unint64_t v17 = (unint64_t *)v6[2];
      if (v17) {
        unint64_t *v17 = *v17 & 7 | (unint64_t)(v6 + 2);
      }
      uint64_t v12 = v45;
    }
  }
  uint64_t v6[4] = v46;
  if (v12 != -8192 && v12 != -4096)
  {
    if (v12)
    {
      uint64_t v43 = a1;
      llvm::ValueHandleBase::RemoveFromUseList(v44);
      uint64_t v11 = (int32x2_t *)&unk_1CD91C000;
      a1 = v43;
    }
  }
  a1[1] = vadd_s32(a1[1], v11[12]);
  return 1;
}

uint64_t sub_1CC4CEC5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    unsigned int v5 = v3 - 1;
    uint64_t v6 = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    uint64_t v7 = *(void *)a1 + (v6 << 6);
    uint64_t v8 = *(void *)(v7 + 24);
    if (v4 == v8)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v8 == -8192;
        }
        if (v11) {
          uint64_t v9 = v7;
        }
        int v12 = v6 + v10++;
        uint64_t v6 = v12 & v5;
        uint64_t v7 = *(void *)a1 + (v6 << 6);
        uint64_t v8 = *(void *)(v7 + 24);
        if (v4 == v8) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
  *a3 = v7;
  return result;
}

int32x2_t sub_1CC4CECF0(int32x2_t *a1, void *a2)
{
  uint64_t v2 = a2[7];
  int v3 = (int32x2_t *)&unk_1CD91C000;
  if (v2 && v2 != -8192 && v2 != -4096)
  {
    unint64_t v4 = a2[5] & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v4 = a2[6];
    unsigned int v5 = (unint64_t *)a2[6];
    if (v5)
    {
      *unsigned int v5 = *v5 & 7 | v4;
    }
    else
    {
      uint64_t v6 = a2[7];
      uint64_t v7 = ***(int32x2_t ****)v6;
      unint64_t v8 = (unint64_t)v7[303];
      if (v8 <= v4)
      {
        uint64_t v9 = v7[305].u32[0];
        if (v8 + 16 * v9 > v4)
        {
          unsigned int v10 = v9 - 1;
          LODWORD(v11) = v10 & ((v6 >> 4) ^ (v6 >> 9));
          int v12 = (uint64_t *)(v8 + 16 * v11);
          uint64_t v13 = *v12;
          if (v6 == *v12)
          {
LABEL_12:
            *int v12 = -8192;
            v7[304] = vadd_s32(v7[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v6 = a2[7];
          }
          else
          {
            int v14 = 1;
            while (v13 != -4096)
            {
              int v15 = v11 + v14++;
              uint64_t v11 = v15 & v10;
              uint64_t v13 = *(void *)(v8 + 16 * v11);
              if (v6 == v13)
              {
                int v12 = (uint64_t *)(v8 + 16 * v11);
                goto LABEL_12;
              }
            }
          }
          *(unsigned char *)(v6 + 17) &= ~1u;
        }
      }
    }
  }
  v37[0] = 2;
  v37[1] = 0;
  uint64_t v16 = -8192;
  uint64_t v38 = -8192;
  uint64_t v39 = 0;
  uint64_t v17 = a2[3];
  if (v17 != -8192)
  {
    if (v17 != -4096 && v17 != 0)
    {
      unint64_t v24 = a2[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v24 = a2[2];
      unsigned int v25 = (unint64_t *)a2[2];
      if (v25)
      {
        *unsigned int v25 = *v25 & 7 | v24;
      }
      else
      {
        uint64_t v26 = a2[3];
        int v27 = ***(int32x2_t ****)v26;
        unint64_t v28 = (unint64_t)v27[303];
        if (v28 <= v24)
        {
          uint64_t v29 = v27[305].u32[0];
          if (v28 + 16 * v29 > v24)
          {
            unsigned int v30 = v29 - 1;
            LODWORD(v31) = v30 & ((v26 >> 4) ^ (v26 >> 9));
            unint64_t v32 = (uint64_t *)(v28 + 16 * v31);
            uint64_t v33 = *v32;
            if (v26 == *v32)
            {
LABEL_39:
              *unint64_t v32 = -8192;
              v27[304] = vadd_s32(v27[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v26 = a2[3];
            }
            else
            {
              int v34 = 1;
              while (v33 != -4096)
              {
                int v35 = v31 + v34++;
                uint64_t v31 = v35 & v30;
                uint64_t v33 = *(void *)(v28 + 16 * v31);
                if (v26 == v33)
                {
                  unint64_t v32 = (uint64_t *)(v28 + 16 * v31);
                  goto LABEL_39;
                }
              }
            }
            *(unsigned char *)(v26 + 17) &= ~1u;
          }
        }
      }
      uint64_t v16 = v38;
    }
    a2[3] = v16;
    if (v16 != -4096 && v16 != -8192 && v16 != 0)
    {
      uint64_t v20 = v37[0];
      uint64_t v21 = (void *)(v37[0] & 0xFFFFFFFFFFFFFFF8);
      a2[2] = *(void *)(v37[0] & 0xFFFFFFFFFFFFFFF8);
      void *v21 = a2 + 1;
      a2[1] = v20 & 0xFFFFFFFFFFFFFFF8 | a2[1] & 7;
      uint64_t v22 = (unint64_t *)a2[2];
      if (v22) {
        *uint64_t v22 = *v22 & 7 | (unint64_t)(a2 + 2);
      }
      uint64_t v16 = v38;
    }
  }
  a2[4] = v39;
  if (v16 != -8192 && v16 != -4096 && v16)
  {
    uint64_t v36 = a1;
    llvm::ValueHandleBase::RemoveFromUseList(v37);
    int v3 = (int32x2_t *)&unk_1CD91C000;
    a1 = v36;
  }
  int32x2_t result = vadd_s32(a1[1], v3[12]);
  a1[1] = result;
  return result;
}

void *sub_1CC4CEFAC@<X0>(uint64_t a1@<X0>, int32x2_t *****a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v55 = 2;
  uint64_t v56 = 0;
  uint64_t v57 = v6;
  if (v6 != (int32x2_t ****)-8192 && v6 != (int32x2_t ****)-4096 && v6 != 0) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v55);
  }
  uint64_t v54 = &unk_1F2615EC8;
  uint64_t v58 = a1;
  sub_1CC4CFE8C(&v59, &v54, a2 + 1);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    uint64_t v18 = 0;
LABEL_21:
    int32x2_t result = sub_1CC4CF3A4(a1, v18, &v59, &v63);
    uint64_t v9 = *(void *)a1;
    unsigned int v8 = *(_DWORD *)(a1 + 16);
    char v17 = 1;
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = ((v62 >> 4) ^ (v62 >> 9)) & (v8 - 1);
  int32x2_t result = (void *)(*(void *)a1 + (v10 << 6));
  int v12 = (int32x2_t ****)result[3];
  if (v62 != v12)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != (int32x2_t ****)-4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == (int32x2_t ****)-8192;
      }
      if (v15) {
        uint64_t v13 = result;
      }
      int v16 = v10 + v14++;
      uint64_t v10 = v16 & (v8 - 1);
      int32x2_t result = (void *)(v9 + (v10 << 6));
      int v12 = (int32x2_t ****)result[3];
      if (v62 == v12) {
        goto LABEL_17;
      }
    }
    if (v13) {
      uint64_t v18 = (uint64_t)v13;
    }
    else {
      uint64_t v18 = (uint64_t)result;
    }
    goto LABEL_21;
  }
LABEL_17:
  char v17 = 0;
LABEL_22:
  if (v65 && v65 != (int32x2_t ****)-8192 && v65 != (int32x2_t ****)-4096)
  {
    unint64_t v19 = v63 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v63 & 0xFFFFFFFFFFFFFFF8) = v64;
    if (v64)
    {
      unint64_t *v64 = *v64 & 7 | v19;
    }
    else
    {
      uint64_t v20 = v65;
      uint64_t v21 = ***v65;
      unint64_t v22 = (unint64_t)v21[303];
      if (v22 <= v19)
      {
        uint64_t v23 = v21[305].u32[0];
        if (v22 + 16 * v23 > v19)
        {
          unsigned int v24 = v23 - 1;
          LODWORD(v25) = v24 & ((v65 >> 4) ^ (v65 >> 9));
          uint64_t v26 = (int32x2_t *****)(v22 + 16 * v25);
          int v27 = *v26;
          if (v65 == *v26)
          {
LABEL_33:
            *uint64_t v26 = (int32x2_t ****)-8192;
            v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v20 = v65;
          }
          else
          {
            int v28 = 1;
            while (v27 != (int32x2_t ****)-4096)
            {
              int v29 = v25 + v28++;
              uint64_t v25 = v29 & v24;
              int v27 = *(int32x2_t *****)(v22 + 16 * v25);
              if (v65 == v27)
              {
                uint64_t v26 = (int32x2_t *****)(v22 + 16 * v25);
                goto LABEL_33;
              }
            }
          }
          *((unsigned char *)v20 + 17) &= ~1u;
        }
      }
    }
  }
  if (v62 != (int32x2_t ****)-8192 && v62 != (int32x2_t ****)-4096 && v62 != 0)
  {
    unint64_t v31 = v60 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v60 & 0xFFFFFFFFFFFFFFF8) = v61;
    if (v61)
    {
      unint64_t *v61 = *v61 & 7 | v31;
    }
    else
    {
      unint64_t v32 = v62;
      uint64_t v33 = ***v62;
      unint64_t v34 = (unint64_t)v33[303];
      if (v34 <= v31)
      {
        uint64_t v35 = v33[305].u32[0];
        if (v34 + 16 * v35 > v31)
        {
          unsigned int v36 = v35 - 1;
          LODWORD(v37) = v36 & ((v62 >> 4) ^ (v62 >> 9));
          uint64_t v38 = (int32x2_t *****)(v34 + 16 * v37);
          uint64_t v39 = *v38;
          if (v62 == *v38)
          {
LABEL_49:
            *uint64_t v38 = (int32x2_t ****)-8192;
            v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
            unint64_t v32 = v62;
          }
          else
          {
            int v40 = 1;
            while (v39 != (int32x2_t ****)-4096)
            {
              int v41 = v37 + v40++;
              uint64_t v37 = v41 & v36;
              uint64_t v39 = *(int32x2_t *****)(v34 + 16 * v37);
              if (v62 == v39)
              {
                uint64_t v38 = (int32x2_t *****)(v34 + 16 * v37);
                goto LABEL_49;
              }
            }
          }
          *((unsigned char *)v32 + 17) &= ~1u;
        }
      }
    }
  }
  if (v57 != (int32x2_t ****)-8192 && v57 != (int32x2_t ****)-4096 && v57 != 0)
  {
    unint64_t v43 = v55 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v55 & 0xFFFFFFFFFFFFFFF8) = v56;
    if (v56)
    {
      *uint64_t v56 = *v56 & 7 | v43;
    }
    else
    {
      unint64_t v44 = v57;
      uint64_t v45 = ***v57;
      unint64_t v46 = (unint64_t)v45[303];
      if (v46 <= v43)
      {
        uint64_t v47 = v45[305].u32[0];
        if (v46 + 16 * v47 > v43)
        {
          unsigned int v48 = v47 - 1;
          LODWORD(v49) = v48 & ((v57 >> 4) ^ (v57 >> 9));
          int v50 = (int32x2_t *****)(v46 + 16 * v49);
          int v51 = *v50;
          if (v57 == *v50)
          {
LABEL_65:
            *int v50 = (int32x2_t ****)-8192;
            v45[304] = vadd_s32(v45[304], (int32x2_t)0x1FFFFFFFFLL);
            unint64_t v44 = v57;
          }
          else
          {
            int v52 = 1;
            while (v51 != (int32x2_t ****)-4096)
            {
              int v53 = v49 + v52++;
              uint64_t v49 = v53 & v48;
              int v51 = *(int32x2_t *****)(v46 + 16 * v49);
              if (v57 == v51)
              {
                int v50 = (int32x2_t *****)(v46 + 16 * v49);
                goto LABEL_65;
              }
            }
          }
          *((unsigned char *)v44 + 17) &= ~1u;
        }
      }
    }
  }
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v9 + ((unint64_t)v8 << 6);
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

void *sub_1CC4CF3A4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int32x2_t result = (void *)sub_1CC4CF590(a1, (uint64_t)a3, (uint64_t)a3, a2);
  uint64_t v7 = result[3];
  uint64_t v8 = a3[3];
  if (v7 != v8)
  {
    BOOL v9 = v7 == -4096 || v7 == 0;
    if (!v9 && v7 != -8192)
    {
      unint64_t v18 = result[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v18 = result[2];
      unint64_t v19 = (unint64_t *)result[2];
      if (v19)
      {
        *unint64_t v19 = *v19 & 7 | v18;
      }
      else
      {
        uint64_t v20 = result[3];
        uint64_t v21 = ***(int32x2_t ****)v20;
        unint64_t v22 = (unint64_t)v21[303];
        if (v22 <= v18)
        {
          uint64_t v23 = v21[305].u32[0];
          if (v22 + 16 * v23 > v18)
          {
            unsigned int v24 = v23 - 1;
            LODWORD(v25) = v24 & ((v20 >> 4) ^ (v20 >> 9));
            uint64_t v26 = (uint64_t *)(v22 + 16 * v25);
            uint64_t v27 = *v26;
            if (v20 == *v26)
            {
LABEL_29:
              *uint64_t v26 = -8192;
              v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v20 = result[3];
            }
            else
            {
              int v28 = 1;
              while (v27 != -4096)
              {
                int v29 = v25 + v28++;
                uint64_t v25 = v29 & v24;
                uint64_t v27 = *(void *)(v22 + 16 * v25);
                if (v20 == v27)
                {
                  uint64_t v26 = (uint64_t *)(v22 + 16 * v25);
                  goto LABEL_29;
                }
              }
            }
            *(unsigned char *)(v20 + 17) &= ~1u;
          }
        }
      }
      uint64_t v8 = a3[3];
    }
    result[3] = v8;
    if (v8 != -4096 && v8 != -8192 && v8 != 0)
    {
      uint64_t v11 = a3[1];
      result[2] = *(void *)(v11 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v11 & 0xFFFFFFFFFFFFFFF8) = result + 1;
      result[1] = v11 & 0xFFFFFFFFFFFFFFF8 | result[1] & 7;
      int v12 = (unint64_t *)result[2];
      if (v12) {
        *int v12 = *v12 & 7 | (unint64_t)(result + 2);
      }
    }
  }
  uint64_t v13 = a3[4];
  result[5] = 6;
  int v14 = result + 5;
  result[4] = v13;
  result[6] = 0;
  unint64_t v15 = (unint64_t)(result + 6);
  uint64_t v16 = a4[2];
  result[7] = v16;
  if (v16 && v16 != -8192 && v16 != -4096)
  {
    unint64_t v17 = *a4 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v15 = *(void *)v17;
    *(void *)unint64_t v17 = v14;
    *int v14 = v17 | 6;
    if (*(void *)v15) {
      **(void **)unint64_t v15 = **(void **)v15 & 7 | v15;
    }
  }
  return result;
}

uint64_t sub_1CC4CF590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC4CF6D0(a1, 2 * v7);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 24);
      unsigned int v11 = v9 - 1;
      uint64_t v12 = ((v10 >> 4) ^ (v10 >> 9)) & v11;
      a4 = *(void *)a1 + (v12 << 6);
      uint64_t v13 = *(void *)(a4 + 24);
      if (v10 != v13)
      {
        uint64_t v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            uint64_t v14 = a4;
          }
          int v17 = v12 + v15++;
          uint64_t v12 = v17 & v11;
          a4 = *(void *)a1 + (v12 << 6);
          uint64_t v13 = *(void *)(a4 + 24);
          if (v10 == v13) {
            goto LABEL_4;
          }
        }
        if (v14) {
          a4 = v14;
        }
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CC4CF6D0(a1, v7);
    uint64_t v18 = 0;
    sub_1CC4CEC5C(a1, a3, &v18);
    a4 = v18;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a4 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC4CF6D0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int32x2_t result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC4CF894(a1, v4, &v4[8 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  v17[0] = 2;
  v17[1] = 0;
  uint64_t v18 = -4096;
  uint64_t v19 = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v10 << 6;
    uint64_t v13 = result + 2;
    do
    {
      uint64_t v14 = v17[0];
      uint64_t v15 = v18;
      *(v13 - 1) = v17[0] & 6;
      *uint64_t v13 = 0;
      v13[1] = v15;
      if (v15 != -4096 && v15 != -8192 && v15 != 0)
      {
        *uint64_t v13 = *(void *)(v14 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v14 & 0xFFFFFFFFFFFFFFF8) = v13 - 1;
        *(v13 - 1) = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (*v13) {
          *(void *)*uint64_t v13 = *(void *)*v13 & 7 | (unint64_t)(result + 2);
        }
        uint64_t v11 = v19;
      }
      *(v13 - 2) = &unk_1F2615EC8;
      void v13[2] = v11;
      v13 += 8;
      result += 8;
      v12 -= 64;
    }
    while (v12);
    if (v18 != -8192 && v18 != -4096 && v18) {
      return llvm::ValueHandleBase::RemoveFromUseList(v17);
    }
  }
  return result;
}

uint64_t *sub_1CC4CF894(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (_DWORD *)a1;
  *(void *)(a1 + 8) = 0;
  int32x2_t result = &v80;
  uint64_t v80 = 2;
  uint64_t v81 = 0;
  uint64_t v82 = -4096;
  uint64_t v83 = 0;
  uint64_t v79 = &unk_1F2615EC8;
  uint64_t v5 = v3[4];
  if (v5)
  {
    uint64_t v6 = *(void *)v3;
    uint64_t v7 = v5 << 6;
    unsigned int v8 = (void *)(*(void *)v3 + 16);
    do
    {
      uint64_t v9 = v80 & 6;
      *(v8 - 1) = v9;
      void *v8 = 0;
      uint64_t v10 = v82;
      v8[1] = v82;
      if (v10 != -4096 && v10 != -8192 && v10 != 0)
      {
        unint64_t v72 = v80 & 0xFFFFFFFFFFFFFFF8;
        void *v8 = *(void *)(v80 & 0xFFFFFFFFFFFFFFF8);
        *(void *)unint64_t v72 = v8 - 1;
        *(v8 - 1) = v72 | v9;
        if (*v8) {
          *(void *)void *v8 = *(void *)*v8 & 7 | (v6 + 16);
        }
      }
      *(v8 - 2) = &unk_1F2615EC8;
      v8[2] = v83;
      v8 += 8;
      v6 += 64;
      v7 -= 64;
    }
    while (v7);
    if (v82 != -8192 && v82 != -4096 && v82)
    {
      uint64_t v75 = v3;
      uint64_t v73 = a2;
      uint64_t v74 = a3;
      llvm::ValueHandleBase::RemoveFromUseList(&v80);
      a3 = v74;
      uint64_t v3 = v75;
      a2 = v73;
      int32x2_t result = &v80;
    }
  }
  uint64_t v80 = 2;
  uint64_t v81 = 0;
  uint64_t v82 = -4096;
  uint64_t v83 = 0;
  uint64_t v79 = &unk_1F2615EC8;
  v76[0] = 2;
  v76[1] = 0;
  uint64_t v77 = -8192;
  uint64_t v78 = 0;
  if (a2 != a3)
  {
    do
    {
      uint64_t v11 = a2[3];
      if (v11 != v82 && v11 != v77)
      {
        int v13 = v3[4] - 1;
        uint64_t v14 = v13 & ((v11 >> 4) ^ (v11 >> 9));
        uint64_t v15 = (void *)(*(void *)v3 + (v14 << 6));
        uint64_t v16 = v15[3];
        if (v11 != v16)
        {
          int v17 = 0;
          int v18 = 1;
          while (v16 != -4096)
          {
            if (v17) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = v16 == -8192;
            }
            if (v19) {
              int v17 = v15;
            }
            int v20 = v14 + v18++;
            uint64_t v14 = v20 & v13;
            uint64_t v15 = (void *)(*(void *)v3 + (v14 << 6));
            uint64_t v16 = v15[3];
            if (v11 == v16) {
              goto LABEL_39;
            }
          }
          if (v17) {
            uint64_t v15 = v17;
          }
          uint64_t v21 = v15[3];
          if (v21 != v11)
          {
            BOOL v22 = v21 == -4096 || v21 == 0;
            if (!v22 && v21 != -8192)
            {
              unint64_t v58 = v15[1] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v58 = v15[2];
              uint64_t v59 = (unint64_t *)v15[2];
              if (v59)
              {
                unint64_t *v59 = *v59 & 7 | v58;
              }
              else
              {
                uint64_t v60 = v15[3];
                unint64_t v61 = ***(int32x2_t ****)v60;
                unint64_t v62 = (unint64_t)v61[303];
                if (v62 <= v58)
                {
                  uint64_t v63 = v61[305].u32[0];
                  if (v62 + 16 * v63 > v58)
                  {
                    unsigned int v64 = v63 - 1;
                    LODWORD(v65) = v64 & ((v60 >> 4) ^ (v60 >> 9));
                    uint64_t v66 = (uint64_t *)(v62 + 16 * v65);
                    uint64_t v67 = *v66;
                    if (v60 == *v66)
                    {
LABEL_85:
                      *uint64_t v66 = -8192;
                      v61[304] = vadd_s32(v61[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v60 = v15[3];
                    }
                    else
                    {
                      int v68 = 1;
                      while (v67 != -4096)
                      {
                        int v69 = v65 + v68++;
                        uint64_t v65 = v69 & v64;
                        uint64_t v67 = *(void *)(v62 + 16 * v65);
                        if (v60 == v67)
                        {
                          uint64_t v66 = (uint64_t *)(v62 + 16 * v65);
                          goto LABEL_85;
                        }
                      }
                    }
                    *(unsigned char *)(v60 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v11 = a2[3];
            }
            v15[3] = v11;
            if (v11 != -4096 && v11 != -8192 && v11 != 0)
            {
              uint64_t v24 = a2[1];
              v15[2] = *(void *)(v24 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v24 & 0xFFFFFFFFFFFFFFF8) = v15 + 1;
              v15[1] = v24 & 0xFFFFFFFFFFFFFFF8 | v15[1] & 7;
              uint64_t v25 = (unint64_t *)v15[2];
              if (v25) {
                *uint64_t v25 = *v25 & 7 | (unint64_t)(v15 + 2);
              }
            }
          }
        }
LABEL_39:
        unint64_t v26 = a2[4];
        void v15[5] = 6;
        uint64_t v27 = v15 + 5;
        *(v27 - 1) = v26;
        v27[1] = 0;
        unint64_t v28 = (unint64_t)(v27 + 1);
        unint64_t v29 = a2[7];
        v27[2] = v29;
        if (v29)
        {
          if (v29 != -8192 && v29 != -4096)
          {
            unint64_t v30 = a2[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v28 = *(void *)v30;
            *(void *)unint64_t v30 = v27;
            *uint64_t v27 = v30 | 6;
            if (*(void *)v28) {
              **(void **)unint64_t v28 = **(void **)v28 & 7 | v28;
            }
          }
        }
        ++v3[2];
        uint64_t v31 = a2[7];
        if (v31 && v31 != -8192 && v31 != -4096)
        {
          unint64_t v32 = a2[5] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v32 = a2[6];
          uint64_t v33 = (unint64_t *)a2[6];
          if (v33)
          {
            *uint64_t v33 = *v33 & 7 | v32;
          }
          else
          {
            uint64_t v34 = a2[7];
            uint64_t v35 = ***(int32x2_t ****)v34;
            unint64_t v36 = (unint64_t)v35[303];
            if (v36 <= v32)
            {
              uint64_t v37 = v35[305].u32[0];
              if (v36 + 16 * v37 > v32)
              {
                unsigned int v38 = v37 - 1;
                LODWORD(v39) = v38 & ((v34 >> 4) ^ (v34 >> 9));
                int v40 = (uint64_t *)(v36 + 16 * v39);
                uint64_t v41 = *v40;
                if (v34 == *v40)
                {
LABEL_55:
                  *int v40 = -8192;
                  v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v34 = a2[7];
                }
                else
                {
                  int v42 = 1;
                  while (v41 != -4096)
                  {
                    int v43 = v39 + v42++;
                    uint64_t v39 = v43 & v38;
                    uint64_t v41 = *(void *)(v36 + 16 * v39);
                    if (v34 == v41)
                    {
                      int v40 = (uint64_t *)(v36 + 16 * v39);
                      goto LABEL_55;
                    }
                  }
                }
                *(unsigned char *)(v34 + 17) &= ~1u;
              }
            }
          }
        }
      }
      uint64_t v44 = a2[3];
      if (v44 != -4096 && v44 != -8192 && v44 != 0)
      {
        unint64_t v46 = a2[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v46 = a2[2];
        uint64_t v47 = (unint64_t *)a2[2];
        if (v47)
        {
          *uint64_t v47 = *v47 & 7 | v46;
        }
        else
        {
          uint64_t v48 = a2[3];
          uint64_t v49 = ***(int32x2_t ****)v48;
          unint64_t v50 = (unint64_t)v49[303];
          if (v50 <= v46)
          {
            uint64_t v51 = v49[305].u32[0];
            if (v50 + 16 * v51 > v46)
            {
              unsigned int v52 = v51 - 1;
              LODWORD(v53) = v52 & ((v48 >> 4) ^ (v48 >> 9));
              uint64_t v54 = (uint64_t *)(v50 + 16 * v53);
              uint64_t v55 = *v54;
              if (v48 == *v54)
              {
LABEL_71:
                *uint64_t v54 = -8192;
                v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v48 = a2[3];
              }
              else
              {
                int v56 = 1;
                while (v55 != -4096)
                {
                  int v57 = v53 + v56++;
                  uint64_t v53 = v57 & v52;
                  uint64_t v55 = *(void *)(v50 + 16 * v53);
                  if (v48 == v55)
                  {
                    uint64_t v54 = (uint64_t *)(v50 + 16 * v53);
                    goto LABEL_71;
                  }
                }
              }
              *(unsigned char *)(v48 + 17) &= ~1u;
            }
          }
        }
      }
      a2 += 8;
    }
    while (a2 != a3);
    if (v77 != -8192 && v77 != -4096 && v77 != 0)
    {
      llvm::ValueHandleBase::RemoveFromUseList(v76);
      int32x2_t result = &v80;
    }
  }
  if (v82 != -4096 && v82 != -8192)
  {
    if (v82) {
      return llvm::ValueHandleBase::RemoveFromUseList(&v80);
    }
  }
  return result;
}

void *sub_1CC4CFE8C(void *result, void *a2, void *a3)
{
  uint64_t v3 = a2[1] & 6;
  result[1] = v3;
  unint64_t v4 = result + 1;
  result[2] = 0;
  unint64_t v5 = (unint64_t)(result + 2);
  uint64_t v6 = a2[3];
  result[3] = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    unint64_t v8 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v5 = *(void *)v8;
    *(void *)unint64_t v8 = v4;
    *unint64_t v4 = v8 | v3;
    if (*(void *)v5) {
      **(void **)unint64_t v5 = **(void **)v5 & 7 | v5;
    }
  }
  uint64_t *result = &unk_1F2615EC8;
  result[4] = a2[4];
  result[5] = 6;
  uint64_t v9 = result + 5;
  result[6] = 0;
  unint64_t v10 = (unint64_t)(result + 6);
  uint64_t v11 = a3[2];
  result[7] = v11;
  if (v11 != -8192 && v11 != -4096 && v11)
  {
    unint64_t v12 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v12;
    *(void *)unint64_t v12 = v9;
    *uint64_t v9 = v12 | 6;
    if (*(void *)v10) {
      **(void **)unint64_t v10 = **(void **)v10 & 7 | v10;
    }
  }
  return result;
}

void *sub_1CC4CFF80(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a2[3];
    unsigned int v6 = v4 - 1;
    uint64_t v7 = ((v5 >> 4) ^ (v5 >> 9)) & v6;
    int32x2_t result = (void *)(*(void *)a1 + (v7 << 6));
    uint64_t v9 = result[3];
    if (v5 == v9) {
      return result;
    }
    unint64_t v10 = 0;
    int v11 = 1;
    while (v9 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == -8192;
      }
      if (v12) {
        unint64_t v10 = result;
      }
      int v13 = v7 + v11++;
      uint64_t v7 = v13 & v6;
      int32x2_t result = (void *)(*(void *)a1 + (v7 << 6));
      uint64_t v9 = result[3];
      if (v5 == v9) {
        return result;
      }
    }
    if (v10) {
      uint64_t v14 = (uint64_t)v10;
    }
    else {
      uint64_t v14 = (uint64_t)result;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int32x2_t result = (void *)sub_1CC4CF590(a1, (uint64_t)a2, (uint64_t)a2, v14);
  uint64_t v15 = result[3];
  uint64_t v16 = a2[3];
  if (v15 != v16)
  {
    BOOL v17 = v15 == -4096 || v15 == 0;
    if (!v17 && v15 != -8192)
    {
      unint64_t v21 = result[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v21 = result[2];
      BOOL v22 = (unint64_t *)result[2];
      if (v22)
      {
        *BOOL v22 = *v22 & 7 | v21;
      }
      else
      {
        uint64_t v23 = result[3];
        uint64_t v24 = ***(int32x2_t ****)v23;
        unint64_t v25 = (unint64_t)v24[303];
        if (v25 <= v21)
        {
          uint64_t v26 = v24[305].u32[0];
          if (v25 + 16 * v26 > v21)
          {
            unsigned int v27 = v26 - 1;
            LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
            unint64_t v29 = (uint64_t *)(v25 + 16 * v28);
            uint64_t v30 = *v29;
            if (v23 == *v29)
            {
LABEL_39:
              *unint64_t v29 = -8192;
              v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v23 = result[3];
            }
            else
            {
              int v31 = 1;
              while (v30 != -4096)
              {
                int v32 = v28 + v31++;
                uint64_t v28 = v32 & v27;
                uint64_t v30 = *(void *)(v25 + 16 * v28);
                if (v23 == v30)
                {
                  unint64_t v29 = (uint64_t *)(v25 + 16 * v28);
                  goto LABEL_39;
                }
              }
            }
            *(unsigned char *)(v23 + 17) &= ~1u;
          }
        }
      }
      uint64_t v16 = a2[3];
    }
    result[3] = v16;
    if (v16 != -4096 && v16 != -8192 && v16 != 0)
    {
      uint64_t v19 = a2[1];
      result[2] = *(void *)(v19 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v19 & 0xFFFFFFFFFFFFFFF8) = result + 1;
      result[1] = v19 & 0xFFFFFFFFFFFFFFF8 | result[1] & 7;
      int v20 = (unint64_t *)result[2];
      if (v20) {
        *int v20 = *v20 & 7 | (unint64_t)(result + 2);
      }
    }
  }
  result[4] = a2[4];
  result[5] = 6;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t *sub_1CC4D0194(uint64_t *result, uint64_t *__dst, uint64_t *__src)
{
  uint64_t v4 = *result;
  if ((*result & 4) != 0)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v6 = *(void *)v5;
      uint64_t v7 = (uint64_t *)(*(void *)v5 + 8 * *(unsigned int *)(v5 + 8));
      int64_t v8 = (char *)v7 - (char *)__src;
      if (v7 != __src)
      {
        int32x2_t result = (uint64_t *)memmove(__dst, __src, (char *)v7 - (char *)__src);
        uint64_t v6 = *(void *)v5;
      }
      *(_DWORD *)(v5 + 8) = ((unint64_t)__dst + v8 - v6) >> 3;
    }
  }
  else if (result == __dst && __dst != __src)
  {
    *long long __dst = 0;
  }
  return result;
}

void *sub_1CC4D021C(void *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = result;
    int32x2_t result = v38;
    v38[0] = 2;
    v38[1] = 0;
    uint64_t v39 = -4096;
    uint64_t v40 = 0;
    uint64_t v37 = &unk_1F2615EC8;
    v34[0] = 2;
    v34[1] = 0;
    uint64_t v35 = -8192;
    uint64_t v36 = 0;
    uint64_t v3 = (void *)*v2;
    uint64_t v4 = &v3[8 * v1];
    do
    {
      uint64_t v5 = v3[3];
      if (v5 != v39 && v5 != v35)
      {
        uint64_t v20 = v3[7];
        if (v20)
        {
          if (v20 != -8192 && v20 != -4096)
          {
            unint64_t v21 = v3[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v21 = v3[6];
            BOOL v22 = (unint64_t *)v3[6];
            if (v22)
            {
              *BOOL v22 = *v22 & 7 | v21;
            }
            else
            {
              uint64_t v23 = v3[7];
              uint64_t v24 = ***(int32x2_t ****)v23;
              unint64_t v25 = (unint64_t)v24[303];
              if (v25 <= v21)
              {
                uint64_t v26 = v24[305].u32[0];
                if (v25 + 16 * v26 > v21)
                {
                  unsigned int v27 = v26 - 1;
                  LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
                  unint64_t v29 = (uint64_t *)(v25 + 16 * v28);
                  uint64_t v30 = *v29;
                  if (v23 == *v29)
                  {
LABEL_36:
                    *unint64_t v29 = -8192;
                    v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v23 = v3[7];
                  }
                  else
                  {
                    int v31 = 1;
                    while (v30 != -4096)
                    {
                      int v32 = v28 + v31++;
                      uint64_t v28 = v32 & v27;
                      uint64_t v30 = *(void *)(v25 + 16 * v28);
                      if (v23 == v30)
                      {
                        unint64_t v29 = (uint64_t *)(v25 + 16 * v28);
                        goto LABEL_36;
                      }
                    }
                  }
                  *(unsigned char *)(v23 + 17) &= ~1u;
                }
              }
            }
            uint64_t v5 = v3[3];
          }
        }
      }
      if (v5 != -4096 && v5 != -8192 && v5 != 0)
      {
        unint64_t v8 = v3[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v8 = v3[2];
        uint64_t v9 = (unint64_t *)v3[2];
        if (v9)
        {
          *uint64_t v9 = *v9 & 7 | v8;
        }
        else
        {
          uint64_t v10 = v3[3];
          int v11 = ***(int32x2_t ****)v10;
          unint64_t v12 = (unint64_t)v11[303];
          if (v12 <= v8)
          {
            uint64_t v13 = v11[305].u32[0];
            if (v12 + 16 * v13 > v8)
            {
              unsigned int v14 = v13 - 1;
              LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
              uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
              uint64_t v17 = *v16;
              if (v10 == *v16)
              {
LABEL_23:
                *uint64_t v16 = -8192;
                v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v10 = v3[3];
              }
              else
              {
                int v18 = 1;
                while (v17 != -4096)
                {
                  int v19 = v15 + v18++;
                  uint64_t v15 = v19 & v14;
                  uint64_t v17 = *(void *)(v12 + 16 * v15);
                  if (v10 == v17)
                  {
                    uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
                    goto LABEL_23;
                  }
                }
              }
              *(unsigned char *)(v10 + 17) &= ~1u;
            }
          }
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
    if (v35 != -8192 && v35 != -4096 && v35 != 0)
    {
      llvm::ValueHandleBase::RemoveFromUseList(v34);
      int32x2_t result = v38;
    }
    if (v39 != -4096 && v39 != -8192)
    {
      if (v39) {
        return llvm::ValueHandleBase::RemoveFromUseList(v38);
      }
    }
  }
  return result;
}

llvm::StoreInst *sub_1CC4D04E4(llvm::StoreInst *result, llvm::Type **a2, llvm::Value *a3, uint64_t a4)
{
  uint64_t v6 = *((void *)result + 6);
  uint64_t v7 = v6 - 24;
  if (!v6) {
    uint64_t v7 = 0;
  }
  int v8 = *(unsigned __int8 *)(v7 + 16);
  uint64_t v9 = *((void *)result + 6);
  if (v8 == 83)
  {
    uint64_t v9 = *((void *)result + 6);
    do
    {
      uint64_t v9 = *(void *)(v9 + 8);
      uint64_t v10 = v9 - 24;
      if (!v9) {
        uint64_t v10 = 0;
      }
    }
    while (*(unsigned char *)(v10 + 16) == 83);
  }
  unsigned int v11 = *(unsigned __int8 *)(v9 - 8) - 38;
  BOOL v12 = v11 > 0x38;
  uint64_t v13 = (1 << v11) & 0x100060000000001;
  if (v12 || v13 == 0) {
    goto LABEL_19;
  }
  while (v8 == 83)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    uint64_t v15 = v6 - 24;
    if (!v6) {
      uint64_t v15 = 0;
    }
    int v8 = *(unsigned __int8 *)(v15 + 16);
  }
  if (*(unsigned __int8 *)(v6 - 8) - 29 > 0xA)
  {
LABEL_19:
    int v18 = (void *)((char *)result + 40);
    int v19 = operator new(0x80uLL);
    uint64_t v20 = (llvm::StoreInst *)(v19 + 16);
    v19[21] = v19[21] & 0x38000000 | 2;
    *(void *)int v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = 0;
    *((void *)v19 + 3) = v19 + 16;
    *((void *)v19 + 4) = 0;
    *((void *)v19 + 5) = 0;
    *((void *)v19 + 6) = 0;
    *((void *)v19 + 7) = v19 + 16;
    unint64_t v21 = (void *)*v18;
    if ((void *)*v18 == v18)
    {
      uint64_t v23 = 0;
    }
    else
    {
      if (v21) {
        BOOL v22 = (unsigned __int8 *)(v21 - 3);
      }
      else {
        BOOL v22 = 0;
      }
      if (v22[16] - 29 >= 0xB) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = (llvm::Instruction *)v22;
      }
    }
    return llvm::StoreInst::StoreInst(v20, a2, a3, 0, v23);
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(a4 + 8);
    if (v16 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v17 = (llvm::StoreInst **)(*(void *)a4 + 16 * v16);
    void *v17 = result;
    v17[1] = (llvm::StoreInst *)a2;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

uint64_t sub_1CC4D0684(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2 == result + 40)
  {
    uint64_t v3 = 0;
  }
  else
  {
    if (v2) {
      uint64_t v3 = v2 - 24;
    }
    else {
      uint64_t v3 = 0;
    }
    if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB) {
      uint64_t v3 = 0;
    }
  }
  int v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 == 33) {
    return 0;
  }
  if (v4 != 38)
  {
    uint64_t v7 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
    if (*(void *)(v7 - 32) == a2) {
      return *(void *)(v7 + 40);
    }
    return 0;
  }
  int v5 = *(_DWORD *)(v3 + 20);
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = *(void **)(v3 - 8);
  }
  else {
    uint64_t v6 = (void *)(v3 - 32 * (v5 & 0x7FFFFFF));
  }
  if (*v6 != a2) {
    return 0;
  }
  return result;
}

void sub_1CC4D0720(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t *a5, uint64_t a6)
{
  void v38[4] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = v38;
  uint64_t v37 = 0x100000000;
  unint64_t v34 = __PAIR64__(a3, a2);
  int v35 = a4;
  if (a6)
  {
    uint64_t v7 = a5;
    int v8 = &a5[a6];
    do
    {
      uint64_t v9 = *v7;
      int v31 = 0;
      unint64_t v33 = 0;
      uint64_t v10 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
      int v11 = *(unsigned __int8 *)(v10 + 16);
      if (v10) {
        BOOL v12 = v11 == 16;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        uint64_t v13 = *(unsigned int *)(v10 + 32);
        if (v13 >= 0x41)
        {
          int v25 = 0;
          int64_t v26 = (unint64_t)(v13 + 63) >> 6;
          do
          {
            if (v26-- < 1) {
              break;
            }
            unint64_t v28 = *(void *)(*(void *)(v10 + 24) + 8 * v26);
            v25 += __clz(v28);
          }
          while (!v28);
          int v29 = v13 | 0xFFFFFFC0;
          if ((v13 & 0x3F) == 0) {
            int v29 = 0;
          }
          if (v25 + v29 != v13)
          {
LABEL_22:
            unsigned int v14 = llvm::Value::stripPointerCasts((llvm::Value *)v10);
            goto LABEL_23;
          }
        }
        else if (*(void *)(v10 + 24))
        {
          goto LABEL_22;
        }
      }
      else
      {
        if (v10) {
          BOOL v15 = v11 == 17;
        }
        else {
          BOOL v15 = 0;
        }
        if (v15)
        {
          if ((sub_1CB844168(*(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)), 0.0) & 1) == 0) {
            goto LABEL_22;
          }
        }
        else
        {
          unsigned __int8 v16 = v11 - 13;
          if (v16 >= 8u || ((0xE1u >> v16) & 1) == 0) {
            goto LABEL_22;
          }
        }
      }
      unsigned int v14 = 0;
LABEL_23:
      int v32 = v14;
      uint64_t v17 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      int v18 = (void *)(v17 + 24);
      if (*(_DWORD *)(v17 + 32) >= 0x41u) {
        int v18 = (void *)*v18;
      }
      int v30 = *v18;
      unint64_t v33 = *(void *)(v9 + 40) & 0xFFFFFFFFFFFFFFFBLL;
      int v19 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 64));
      if (*((unsigned char *)v19 + 16) != 59 || v19 == 0) {
        unint64_t v21 = 0;
      }
      else {
        unint64_t v21 = v19;
      }
      int v31 = v21;
      BOOL v22 = (_OWORD *)sub_1CD57FBCC((uint64_t)&v36, (unint64_t)&v30);
      uint64_t v23 = (char *)v36 + 32 * v37;
      long long v24 = v22[1];
      *uint64_t v23 = *v22;
      v23[1] = v24;
      LODWORD(v37) = v37 + 1;
      ++v7;
    }
    while (v7 != v8);
  }
  sub_1CD58F4CC((unint64_t *)(a1 + 176), (uint64_t *)&v34);
  if (v36 != v38) {
    free(v36);
  }
}

uint64_t sub_1CC4D0948()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Clone multicolor basic blocks but do not demote cross scopes";
  v3.n128_u64[1] = 60;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCD7CC0, "disable-demotion", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD7CC0, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Do not remove implausible terminators or other similar cleanups";
  v3.n128_u64[1] = 63;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&algn_1EBCD7D41[63], "disable-cleanups", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &algn_1EBCD7D41[63], &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Demote catchswitch BBs only (for wasm EH)";
  v3.n128_u64[1] = 41;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCD7E40, "demote-catchswitch-only", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD7E40, &dword_1CB82C000);
}

void sub_1CC4D0A84(uint64_t a1)
{
}

void sub_1CC4D0B24()
{
}

void sub_1CC4D0C38(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  char v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  __n128 v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC4D0CEC(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  __n128 v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4D0D98(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC4D0E3C(uint64_t a1, int32x2_t *a2)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  int32x2_t v2 = *a2;
  uint64_t v3 = *(void *)(*(void *)a2 + 112);
  if (!v3) {
    return 0;
  }
  if (!*(_DWORD *)(v3 + 8)) {
    goto LABEL_32;
  }
  uint64_t v6 = *(void *)(v3 + 40);
  if (!v6) {
    goto LABEL_32;
  }
  int v7 = *(_DWORD *)(v6 + 40);
  if (!v7) {
    goto LABEL_32;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v147 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v147 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v147;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v9 = __ROR8__(qword_1EBCBE580 ^ 0xAA3A3267791EAF7DLL, 30);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 - 0x6C47B2EB309A5459) ^ ((0x9DDFEA08EB382D69
                                                    * ((v9 + 0x50251E57CC92A4C1) ^ (qword_1EBCBE580
                                                                                    - 0x6C47B2EB309A5459))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v9 + 0x50251E57CC92A4C1) ^ (qword_1EBCBE580 - 0x6C47B2EB309A5459))));
  unsigned int v11 = -348639895 * ((v10 >> 47) ^ v10);
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v11 & (v7 - 1);
    uint64_t v14 = v8 + 24 * v13;
    BOOL v15 = *(void **)v14;
    if (*(void *)v14 == -1)
    {
      if ("function-instrument" == (char *)-1) {
        goto LABEL_23;
      }
      goto LABEL_9;
    }
    if (v15 != (void *)-2) {
      break;
    }
    if ("function-instrument" == (char *)-2) {
      goto LABEL_23;
    }
LABEL_9:
    if (v15 == (void *)-1) {
      goto LABEL_32;
    }
    unsigned int v11 = i + v13;
  }
  if (*(void *)(v14 + 8) != 19) {
    goto LABEL_9;
  }
  BOOL v16 = *v15 == 0x6E6F6974636E7566 && v15[1] == 0x6D757274736E692DLL;
  if (!v16 || *(void *)((char *)v15 + 11) != 0x746E656D75727473) {
    goto LABEL_9;
  }
LABEL_23:
  uint64_t v18 = *(void *)(v14 + 16);
  if (!v18 || *(unsigned char *)(v18 + 8) != 2)
  {
LABEL_32:
    LOBYTE(v23) = 0;
    goto LABEL_33;
  }
  if (*(_DWORD *)(v18 + 16) == 11)
  {
    uint64_t v19 = v18 + *(unsigned int *)(v18 + 12);
    uint64_t v20 = *(void *)(v19 + 25);
    uint64_t v21 = *(void *)(v19 + 28);
    BOOL v23 = v20 == 0x776C612D79617278 && v21 == 0x737961776C612D79;
  }
  else
  {
    BOOL v23 = 0;
  }
  if (*(_DWORD *)(v18 + 16) == 10)
  {
    uint64_t v135 = v18 + *(unsigned int *)(v18 + 12);
    uint64_t v136 = *(void *)(v135 + 25);
    int v137 = *(unsigned __int16 *)(v135 + 33);
    BOOL v138 = v136 == 0x76656E2D79617278 && v137 == 29285;
    if (v138 && !v23) {
      return 0;
    }
  }
LABEL_33:
  uint64_t v24 = *(void *)(*(void *)&v2 + 112);
  if (!v24)
  {
    if (v23) {
      goto LABEL_86;
    }
    return 0;
  }
  if (*(_DWORD *)(v24 + 8))
  {
    uint64_t v25 = *(void *)(v24 + 40);
    if (v25)
    {
      int v26 = *(_DWORD *)(v25 + 40);
      if (v26)
      {
        uint64_t v27 = *(void *)(v25 + 24);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EBCBE588))
        {
          unint64_t v148 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v148 = 0xFF51AFD7ED558CCDLL;
          }
          qword_1EBCBE580 = v148;
          __cxa_guard_release(&qword_1EBCBE588);
        }
        uint64_t v28 = __ROR8__(qword_1EBCBE580 ^ 0xA869751E6B684E18, 30);
        unint64_t v29 = 0x9DDFEA08EB382D69
            * ((qword_1EBCBE580 + 0x7375858ACBEC128) ^ ((0x9DDFEA08EB382D69
                                                         * ((v28 - 0x126B550998E27C48) ^ (qword_1EBCBE580
                                                                                          + 0x7375858ACBEC128))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v28 - 0x126B550998E27C48) ^ (qword_1EBCBE580 + 0x7375858ACBEC128))));
        unsigned int v30 = -348639895 * ((v29 >> 47) ^ v29);
        for (int j = 1; ; ++j)
        {
          unsigned int v32 = v30 & (v26 - 1);
          unint64_t v33 = (uint64_t *)(v27 + 24 * v32);
          uint64_t v34 = *v33;
          if (*v33 == -1)
          {
            if ("xray-instruction-threshold" == (char *)-1) {
              goto LABEL_58;
            }
          }
          else if (v34 == -2)
          {
            if ("xray-instruction-threshold" == (char *)-2) {
              goto LABEL_58;
            }
          }
          else if (v33[1] == 26)
          {
            BOOL v35 = *(void *)v34 == 0x736E692D79617278 && *(void *)(v34 + 8) == 0x6E6F697463757274;
            BOOL v36 = v35 && *(void *)(v34 + 16) == 0x6F6873657268742DLL;
            if (v36 && *(_WORD *)(v34 + 24) == 25708)
            {
LABEL_58:
              uint64_t v38 = v33[2];
              goto LABEL_60;
            }
          }
          if (v34 == -1) {
            break;
          }
          unsigned int v30 = j + v32;
        }
      }
    }
  }
  uint64_t v38 = 0;
LABEL_60:
  uint64_t v39 = *(void *)(*(void *)&v2 + 112);
  if (!v39) {
    goto LABEL_348;
  }
  if (!*(_DWORD *)(v39 + 8)) {
    goto LABEL_85;
  }
  uint64_t v39 = *(void *)(v39 + 40);
  if (v39)
  {
    int v40 = *(_DWORD *)(v39 + 40);
    if (v40)
    {
      uint64_t v41 = *(void *)(v39 + 24);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCBE588))
      {
        unint64_t v149 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v149 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v149;
        __cxa_guard_release(&qword_1EBCBE588);
      }
      uint64_t v42 = __ROR8__(qword_1EBCBE580 ^ 0x56C102DCB97ECE2ELL, 30);
      unint64_t v43 = 0x9DDFEA08EB382D69
          * ((qword_1EBCBE580 + 0x78BC1BBA5E47C5AALL) ^ ((0x9DDFEA08EB382D69
                                                        * ((v42 + 0x69207A39DBC05DA2) ^ (qword_1EBCBE580
                                                                                         + 0x78BC1BBA5E47C5AALL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v42 + 0x69207A39DBC05DA2) ^ (qword_1EBCBE580 + 0x78BC1BBA5E47C5AALL))));
      unsigned int v44 = -348639895 * ((v43 >> 47) ^ v43);
      for (int k = 1; ; ++k)
      {
        unsigned int v46 = v44 & (v40 - 1);
        uint64_t v47 = (uint64_t *)(v41 + 24 * v46);
        uint64_t v48 = *v47;
        if (*v47 == -1)
        {
          if ("xray-ignore-loops" == (char *)-1) {
            goto LABEL_82;
          }
        }
        else if (v48 == -2)
        {
          if ("xray-ignore-loops" == (char *)-2) {
            goto LABEL_82;
          }
        }
        else if (v47[1] == 17)
        {
          BOOL v49 = *(void *)v48 == 0x6E67692D79617278 && *(void *)(v48 + 8) == 0x706F6F6C2D65726FLL;
          if (v49 && *(unsigned char *)(v48 + 16) == 115)
          {
LABEL_82:
            uint64_t v39 = v47[2];
            goto LABEL_83;
          }
        }
        if (v48 == -1) {
          break;
        }
        unsigned int v44 = k + v46;
      }
    }
LABEL_85:
    uint64_t v39 = 0;
    if (v23) {
      goto LABEL_86;
    }
  }
  else
  {
LABEL_348:
  {
LABEL_83:
    if (v23) {
      goto LABEL_86;
    }
  }
  }
  if (!v38) {
    return 0;
  }
  if (*(unsigned char *)(v38 + 8) != 2) {
    return 0;
  }
  uint64_t v53 = *(unsigned int *)(v38 + 16);
  if (!v53) {
    return 0;
  }
  unint64_t v54 = 0;
  uint64_t v55 = (unsigned __int8 *)(*(unsigned int *)(v38 + 12) + v38 + 25);
  while (1)
  {
    int v57 = *v55++;
    int v56 = v57;
    if ((v57 - 48) < 0xA)
    {
      int v58 = -48;
      goto LABEL_96;
    }
    if ((v56 - 97) < 0x1A)
    {
      int v58 = -87;
      goto LABEL_96;
    }
    if ((v56 - 65) > 0x19) {
      break;
    }
    int v58 = -55;
LABEL_96:
    unsigned int v59 = v58 + v56;
    if (v59 > 9) {
      break;
    }
    unint64_t v60 = 10 * v54 + v59;
    if (v54 > v60 / 0xA) {
      return 0;
    }
    unint64_t v54 = v60;
    if (!--v53) {
      goto LABEL_290;
    }
  }
  unint64_t v60 = v54;
LABEL_290:
  uint64_t v134 = 0;
  unsigned int v154 = 0;
  if (v60 < 0x100000000) {
    unsigned int v154 = v60;
  }
  if (HIDWORD(v60) || v53) {
    return v134;
  }
  int v155 = (int32x2_t *)a2[41];
  if (v155 == &a2[40])
  {
    unint64_t v156 = 0;
  }
  else
  {
    unint64_t v156 = 0;
    do
    {
      unsigned int v157 = -1;
      uint64_t v158 = v155 + 6;
      do
      {
        uint64_t v158 = (int32x2_t *)v158[1];
        ++v157;
      }
      while (v158 != &v155[6]);
      v156 += v157;
      int v155 = (int32x2_t *)v155[1];
    }
    while (v155 != &a2[40]);
  }
  if (!v39)
  {
    uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::MachineDominatorTree::ID, 1);
    if (AnalysisPass)
    {
      unsigned int v161 = (void ***)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineDominatorTree::ID);
      llvm::MachineDominatorTree::MachineDominatorTree((llvm::MachineDominatorTree *)v174);
      if (v161) {
        goto LABEL_310;
      }
    }
    else
    {
      llvm::MachineDominatorTree::MachineDominatorTree((llvm::MachineDominatorTree *)v174);
    }
    if (!v175) {
      operator new();
    }
    unsigned int v161 = v174;
    llvm::MachineDominatorTree::applySplitCriticalEdges(v174);
    uint64_t v162 = v175;
    *(void *)(v175 + 56) = a2;
    sub_1CC2DC400(v162, 0);
LABEL_310:
    uint64_t v163 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
    if (v163)
    {
      uint64_t v164 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v163 + 96))(v163, &llvm::MachineLoopInfo::ID);
      llvm::MachineLoopInfo::MachineLoopInfo((llvm::MachineLoopInfo *)v173);
      if (v164)
      {
        v173[0] = (unsigned __int8 *)&unk_1F260E8E0;
        llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::~LoopInfoBase();
      }
    }
    else
    {
      llvm::MachineLoopInfo::MachineLoopInfo((llvm::MachineLoopInfo *)v173);
    }
    if (v161[165])
    {
      llvm::MachineDominatorTree::applySplitCriticalEdges(v161);
      llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::analyze();
    }
    operator new();
  }
  if (v154 > v156) {
    return 0;
  }
LABEL_86:
  uint64_t v51 = a2 + 40;
  for (uint64_t m = (int32x2_t *)a2[41]; ; uint64_t m = (int32x2_t *)m[1])
  {
    if (m == v51) {
      return 0;
    }
    if (&m[6] != (int32x2_t *)(*(void *)&m[6] & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
  }
  unint64_t v61 = (void *)(*(uint64_t (**)(void))(**(void **)&a2[2] + 104))(*(void *)&a2[2]);
  uint64_t v62 = (uint64_t)m[7];
  if (((*(uint64_t (**)(void))(**(void **)&a2[2] + 96))(*(void *)&a2[2]) & 1) == 0)
  {
    llvm::MachineInstr::emitError(v62, (uint64_t)"An attempt to perform XRay instrumentation for an unsupported target.", 69);
    return 0;
  }
  uint64_t v63 = *(void *)(*(void *)&v2 + 112);
  unsigned int v64 = &unk_1EBCBE000;
  if (v63)
  {
    if (*(_DWORD *)(v63 + 8))
    {
      uint64_t v65 = *(void *)(v63 + 40);
      if (v65)
      {
        int v66 = *(_DWORD *)(v65 + 40);
        if (v66)
        {
          uint64_t v67 = *(void *)(v65 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            int v150 = __cxa_guard_acquire(&qword_1EBCBE588);
            unsigned int v64 = &unk_1EBCBE000;
            if (v150)
            {
              unint64_t v151 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v151 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v151;
              __cxa_guard_release(&qword_1EBCBE588);
              unsigned int v64 = (void *)&unk_1EBCBE000;
            }
          }
          unint64_t v68 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (v64[176] ^ 0x899B81C991BDB822)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v64[176] ^ 0x899B81C991BDB822)) >> 47) ^ 0xE0F0F2E4E8DCCA5ALL);
          unsigned int v69 = (-348639895 * ((v68 >> 47) ^ v68)) ^ 0x652D7069;
          for (int n = 1; ; ++n)
          {
            unsigned int v71 = v69 & (v66 - 1);
            uint64_t v72 = v67 + 24 * v71;
            uint64_t v73 = *(void **)v72;
            if (*(void *)v72 == -1)
            {
              if ("xray-skip-entry" == (char *)-1) {
                goto LABEL_141;
              }
            }
            else if (v73 == (void *)-2)
            {
              if ("xray-skip-entry" == (char *)-2) {
                goto LABEL_141;
              }
            }
            else if (*(void *)(v72 + 8) == 15 {
                   && *v73 == 0x696B732D79617278
            }
                   && *(void *)((char *)v73 + 7) == 0x7972746E652D7069)
            {
              goto LABEL_141;
            }
            if (v73 == (void *)-1) {
              break;
            }
            unsigned int v69 = n + v71;
          }
        }
      }
    }
  }
  uint64_t v75 = v61[1] + 1680;
  if ((*(_WORD *)(v62 + 44) & 4) != 0)
  {
    uint64_t v84 = (llvm::MachineFunction *)m[4];
    uint64_t v85 = *(unsigned __int8 **)(v62 + 56);
    v173[0] = v85;
    if (v85) {
      llvm::MetadataTracking::track((uint64_t)v173, v85, 2);
    }
    uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v84, v75, v173, 0);
    if (!v173[0]) {
      goto LABEL_136;
    }
    int v168 = *v173[0];
    if ((v168 - 4) > 0x1E)
    {
      if ((v168 - 3) >= 0xFFFFFFFE) {
        uint64_t v172 = v173[0];
      }
      else {
        uint64_t v172 = 0;
      }
      if ((v168 - 3) < 0xFFFFFFFE)
      {
        if (v168 == 3) {
          *((void *)v173[0] + 1) = 0;
        }
        goto LABEL_136;
      }
      unint64_t v170 = (unint64_t)(v172 + 8);
    }
    else
    {
      if ((v173[0][1] & 0x7F) != 2 && !*((_DWORD *)v173[0] + 3)) {
        goto LABEL_136;
      }
      uint64_t v169 = *((void *)v173[0] + 2);
      if ((v169 & 4) == 0) {
        goto LABEL_136;
      }
      unint64_t v170 = v169 & 0xFFFFFFFFFFFFFFF8;
      if (!v170) {
        goto LABEL_136;
      }
    }
    v174[0] = (void **)v173;
    sub_1CC5FA668(v170 + 16, v174);
LABEL_136:
    if (&m[6] != (int32x2_t *)v62 && (*(_WORD *)(v62 + 44) & 4) != 0) {
      *((_WORD *)MachineInstr + 22) |= 0xCu;
    }
    sub_1CC31973C((uint64_t *)&m[5], (uint64_t *)v62, (uint64_t)MachineInstr);
    goto LABEL_140;
  }
  int v76 = (llvm::MachineFunction *)m[4];
  uint64_t v77 = *(unsigned __int8 **)(v62 + 56);
  v173[0] = v77;
  if (v77) {
    llvm::MetadataTracking::track((uint64_t)v173, v77, 2);
  }
  uint64_t v78 = llvm::MachineFunction::CreateMachineInstr(v76, v75, v173, 0);
  if (v173[0])
  {
    int v165 = *v173[0];
    if ((v165 - 4) > 0x1E)
    {
      if ((v165 - 3) >= 0xFFFFFFFE) {
        uint64_t v171 = v173[0];
      }
      else {
        uint64_t v171 = 0;
      }
      if ((v165 - 3) < 0xFFFFFFFE)
      {
        if (v165 == 3) {
          *((void *)v173[0] + 1) = 0;
        }
        goto LABEL_129;
      }
      unint64_t v167 = (unint64_t)(v171 + 8);
    }
    else
    {
      if ((v173[0][1] & 0x7F) != 2 && !*((_DWORD *)v173[0] + 3)) {
        goto LABEL_129;
      }
      uint64_t v166 = *((void *)v173[0] + 2);
      if ((v166 & 4) == 0) {
        goto LABEL_129;
      }
      unint64_t v167 = v166 & 0xFFFFFFFFFFFFFFF8;
      if (!v167) {
        goto LABEL_129;
      }
    }
    v174[0] = (void **)v173;
    sub_1CC5FA668(v167 + 16, v174);
  }
LABEL_129:
  int32x2_t v79 = m[5];
  *((int32x2_t *)v78 + 3) = v79;
  uint64_t v80 = *(void *)(*(void *)&v79 + 32);
  uint64_t v81 = *((unsigned int *)v78 + 10);
  if (v81)
  {
    uint64_t v140 = *((void *)v78 + 4);
    uint64_t v141 = *(void *)(v80 + 40);
    uint64_t v142 = 32 * v81;
    do
    {
      if (!*(unsigned char *)v140)
      {
        uint64_t v143 = *(unsigned int *)(v140 + 4);
        if ((int)v143 >= 0) {
          uint64_t v144 = (uint64_t *)(*(void *)(v141 + 272) + 8 * v143);
        }
        else {
          uint64_t v144 = (uint64_t *)(*(void *)(v141 + 24) + 16 * (v143 & 0x7FFFFFFF) + 8);
        }
        uint64_t v145 = *v144;
        if (*v144)
        {
          uint64_t v146 = *(void *)(v145 + 16);
          *(void *)(v145 + 16) = v140;
          *(void *)(v140 + 16) = v146;
          if (*(unsigned char *)(v140 + 3))
          {
            *(void *)(v140 + 24) = v145;
          }
          else
          {
            *(void *)(v140 + 24) = 0;
            uint64_t v144 = (uint64_t *)(v146 + 24);
          }
        }
        else
        {
          *(void *)(v140 + 16) = v140;
          *(void *)(v140 + 24) = 0;
        }
        uint64_t *v144 = v140;
      }
      v140 += 32;
      v142 -= 32;
    }
    while (v142);
  }
  uint64_t v82 = *(void *)(v80 + 728);
  if (v82) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v82 + 24))(v82, v78);
  }
  unint64_t v83 = *(void *)v62 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v78 = v83 | *(void *)v78 & 7;
  *((void *)v78 + 1) = v62;
  *(void *)(v83 + 8) = v78;
  *(void *)uint64_t v62 = *(void *)v62 & 7 | (unint64_t)v78;
LABEL_140:
  unsigned int v64 = &unk_1EBCBE000;
LABEL_141:
  uint64_t v87 = *(void *)(*(void *)&v2 + 112);
  if (v87)
  {
    if (*(_DWORD *)(v87 + 8))
    {
      uint64_t v88 = *(void *)(v87 + 40);
      if (v88)
      {
        int v89 = *(_DWORD *)(v88 + 40);
        if (v89)
        {
          uint64_t v90 = *(void *)(v88 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            int v152 = __cxa_guard_acquire(&qword_1EBCBE588);
            unsigned int v64 = &unk_1EBCBE000;
            if (v152)
            {
              unint64_t v153 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v153 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v153;
              __cxa_guard_release(&qword_1EBCBE588);
              unsigned int v64 = (void *)&unk_1EBCBE000;
            }
          }
          unint64_t v91 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (v64[176] ^ 0xCC8EA28898F5C7B9)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v64[176] ^ 0xCC8EA28898F5C7B9)) >> 47) ^ 0xA5E5D1A5E194B5C1);
          unsigned int v92 = (-348639895 * ((v91 >> 47) ^ v91)) ^ 0x2D70696B;
          for (iint i = 1; ; ++ii)
          {
            unsigned int v94 = v92 & (v89 - 1);
            uint64_t v95 = v90 + 24 * v94;
            uint64_t v96 = *(void **)v95;
            if (*(void *)v95 == -1)
            {
              if ("xray-skip-exit" == (char *)-1) {
                return 1;
              }
            }
            else if (v96 == (void *)-2)
            {
              if ("xray-skip-exit" == (char *)-2) {
                return 1;
              }
            }
            else if (*(void *)(v95 + 8) == 14 {
                   && *v96 == 0x696B732D79617278
            }
                   && *(void *)((char *)v96 + 6) == 0x746978652D70696BLL)
            {
              return 1;
            }
            if (v96 == (void *)-1) {
              break;
            }
            unsigned int v92 = ii + v94;
          }
        }
      }
    }
  }
  uint64_t v98 = *(unsigned int *)(*(void *)&a2[1] + 472);
  if (v98 > 0x27)
  {
LABEL_242:
    uint64_t v134 = 1;
    sub_1CC4D2398(a2, (uint64_t)v61, 1);
    return v134;
  }
  if (((1 << v98) & 0x80000F100ALL) == 0)
  {
    if (v98 == 24)
    {
      sub_1CC4D2398(a2, (uint64_t)v61, 256);
      return 1;
    }
    goto LABEL_242;
  }
  __int16 v99 = (int32x2_t *)a2[41];
  if (v99 != v51)
  {
    while (1)
    {
      unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v99);
      uint64_t v101 = v99 + 6;
      if (&v99[6] != (int32x2_t *)FirstTerminator) {
        break;
      }
LABEL_238:
      __int16 v99 = (int32x2_t *)v99[1];
      if (v99 == v51) {
        return 1;
      }
    }
    unint64_t v102 = FirstTerminator;
    uint64_t v103 = v99 + 5;
    while (2)
    {
      uint64_t v104 = *(void *)(*(void *)(v102 + 16) + 8);
      if ((*(_WORD *)(v102 + 44) & 0xC) == 0 || (*(_WORD *)(v102 + 44) & 4) != 0)
      {
        (*(void (**)(void *, unint64_t))(*v61 + 1136))(v61, v102);
        if ((v104 & 0x20) != 0) {
          goto LABEL_171;
        }
LABEL_191:
        if ((*(unsigned char *)v102 & 4) == 0)
        {
          while ((*(_WORD *)(v102 + 44) & 8) != 0)
            unint64_t v102 = *(void *)(v102 + 8);
        }
        unint64_t v102 = *(void *)(v102 + 8);
        if ((int32x2_t *)v102 == v101) {
          goto LABEL_238;
        }
        continue;
      }
      break;
    }
    unint64_t v115 = v102;
    if ((v104 & 0x20) == 0)
    {
      while ((*(_WORD *)(v115 + 44) & 8) != 0)
      {
        unint64_t v115 = *(void *)(v115 + 8);
        if ((*(unsigned char *)(*(void *)(v115 + 16) + 8) & 0x20) != 0) {
          goto LABEL_182;
        }
      }
      (*(void (**)(void *, unint64_t))(*v61 + 1136))(v61, v102);
      goto LABEL_191;
    }
LABEL_182:
    (*(void (**)(void *, unint64_t))(*v61 + 1136))(v61, v102);
LABEL_171:
    uint64_t v106 = v61[1] + 1776;
    if ((*(_WORD *)(v102 + 44) & 4) == 0)
    {
      uint64_t v107 = (llvm::MachineFunction *)v99[4];
      uint64_t v108 = *(unsigned __int8 **)(v102 + 56);
      v173[0] = v108;
      if (v108) {
        llvm::MetadataTracking::track((uint64_t)v173, v108, 2);
      }
      int v109 = llvm::MachineFunction::CreateMachineInstr(v107, v106, v173, 0);
      if (!v173[0]) {
        goto LABEL_175;
      }
      int v126 = *v173[0];
      if ((v126 - 4) > 0x1E)
      {
        if ((v126 - 3) >= 0xFFFFFFFE) {
          int v132 = v173[0];
        }
        else {
          int v132 = 0;
        }
        if ((v126 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v128 = (unint64_t)(v132 + 8);
          goto LABEL_227;
        }
        if (v126 == 3) {
          *((void *)v173[0] + 1) = 0;
        }
      }
      else if ((v173[0][1] & 0x7F) == 2 || *((_DWORD *)v173[0] + 3))
      {
        uint64_t v127 = *((void *)v173[0] + 2);
        if ((v127 & 4) != 0)
        {
          unint64_t v128 = v127 & 0xFFFFFFFFFFFFFFF8;
          if (v128)
          {
LABEL_227:
            v174[0] = (void **)v173;
            sub_1CC5FA668(v128 + 16, v174);
          }
        }
      }
LABEL_175:
      int32x2_t v110 = *v103;
      *((int32x2_t *)v109 + 3) = *v103;
      uint64_t v111 = *(void *)(*(void *)&v110 + 32);
      uint64_t v112 = *((unsigned int *)v109 + 10);
      if (v112)
      {
        uint64_t v119 = *((void *)v109 + 4);
        uint64_t v120 = *(void *)(v111 + 40);
        uint64_t v121 = 32 * v112;
        do
        {
          if (!*(unsigned char *)v119)
          {
            uint64_t v122 = *(unsigned int *)(v119 + 4);
            if ((int)v122 >= 0) {
              int v123 = (uint64_t *)(*(void *)(v120 + 272) + 8 * v122);
            }
            else {
              int v123 = (uint64_t *)(*(void *)(v120 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8);
            }
            uint64_t v124 = *v123;
            if (*v123)
            {
              uint64_t v125 = *(void *)(v124 + 16);
              *(void *)(v124 + 16) = v119;
              *(void *)(v119 + 16) = v125;
              if (*(unsigned char *)(v119 + 3))
              {
                *(void *)(v119 + 24) = v124;
              }
              else
              {
                *(void *)(v119 + 24) = 0;
                int v123 = (uint64_t *)(v125 + 24);
              }
            }
            else
            {
              *(void *)(v119 + 16) = v119;
              *(void *)(v119 + 24) = 0;
            }
            *int v123 = v119;
          }
          v119 += 32;
          v121 -= 32;
        }
        while (v121);
      }
      uint64_t v113 = *(void *)(v111 + 728);
      if (v113) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v113 + 24))(v113, v109);
      }
      unint64_t v114 = *(void *)v102 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v109 = v114 | *(void *)v109 & 7;
      *((void *)v109 + 1) = v102;
      *(void *)(v114 + 8) = v109;
      *(void *)unint64_t v102 = *(void *)v102 & 7 | (unint64_t)v109;
      goto LABEL_191;
    }
    uint64_t v116 = (llvm::MachineFunction *)v99[4];
    uint64_t v117 = *(unsigned __int8 **)(v102 + 56);
    v173[0] = v117;
    if (v117) {
      llvm::MetadataTracking::track((uint64_t)v173, v117, 2);
    }
    uint64_t v118 = llvm::MachineFunction::CreateMachineInstr(v116, v106, v173, 0);
    if (v173[0])
    {
      int v129 = *v173[0];
      if ((v129 - 4) > 0x1E)
      {
        if ((v129 - 3) >= 0xFFFFFFFE) {
          uint64_t v133 = v173[0];
        }
        else {
          uint64_t v133 = 0;
        }
        if ((v129 - 3) < 0xFFFFFFFE)
        {
          if (v129 == 3) {
            *((void *)v173[0] + 1) = 0;
          }
          goto LABEL_187;
        }
        unint64_t v131 = (unint64_t)(v133 + 8);
      }
      else
      {
        if ((v173[0][1] & 0x7F) != 2 && !*((_DWORD *)v173[0] + 3)) {
          goto LABEL_187;
        }
        uint64_t v130 = *((void *)v173[0] + 2);
        if ((v130 & 4) == 0) {
          goto LABEL_187;
        }
        unint64_t v131 = v130 & 0xFFFFFFFFFFFFFFF8;
        if (!v131) {
          goto LABEL_187;
        }
      }
      v174[0] = (void **)v173;
      sub_1CC5FA668(v131 + 16, v174);
    }
LABEL_187:
    if (v101 != (int32x2_t *)v102 && (*(_WORD *)(v102 + 44) & 4) != 0) {
      *((_WORD *)v118 + 22) |= 0xCu;
    }
    sub_1CC31973C((uint64_t *)&v99[5], (uint64_t *)v102, (uint64_t)v118);
    goto LABEL_191;
  }
  return 1;
}

void sub_1CC4D2398(int32x2_t *a1, uint64_t a2, int a3)
{
  v54[4] = *MEMORY[0x1E4F143B8];
  unsigned int v52 = v54;
  uint64_t v53 = 0x400000000;
  BOOL v49 = a1 + 40;
  uint64_t v3 = (int32x2_t *)a1[41];
  if (v3 == &a1[40]) {
    return;
  }
  do
  {
    unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v3);
    int v7 = v3 + 6;
    if (&v3[6] != (int32x2_t *)FirstTerminator)
    {
      unint64_t v8 = FirstTerminator;
      uint64_t v9 = v3 + 5;
      do
      {
        unint64_t v10 = *(unsigned __int16 **)(v8 + 16);
        uint64_t v11 = *((void *)v10 + 1);
        if ((*(_WORD *)(v8 + 44) & 0xC) != 0 && (*(_WORD *)(v8 + 44) & 4) == 0)
        {
          unint64_t v14 = v8;
          if ((v11 & 0x20) == 0)
          {
            while ((*(_WORD *)(v14 + 44) & 8) != 0)
            {
              unint64_t v14 = *(void *)(v14 + 8);
              if ((*(unsigned char *)(*(void *)(v14 + 16) + 8) & 0x20) != 0) {
                goto LABEL_9;
              }
            }
            goto LABEL_16;
          }
        }
        else if ((v11 & 0x20) == 0)
        {
          goto LABEL_16;
        }
LABEL_9:
        if ((a3 & 0x100) != 0 || *(_DWORD *)(a2 + 76) == *v10)
        {
          int v13 = 36;
          goto LABEL_17;
        }
LABEL_16:
        int v13 = 0;
LABEL_17:
        if (((*(unsigned int (**)(uint64_t, unint64_t))(*(void *)a2 + 1136))(a2, v8) & a3) != 0) {
          unsigned int v15 = 38;
        }
        else {
          unsigned int v15 = v13;
        }
        if (!v15) {
          goto LABEL_42;
        }
        uint64_t v16 = *(void *)(a2 + 8) + 48 * v15;
        if ((*(_WORD *)(v8 + 44) & 4) == 0)
        {
          uint64_t v17 = (llvm::MachineFunction *)v3[4];
          uint64_t v18 = *(unsigned __int8 **)(v8 + 56);
          uint64_t v51 = v18;
          if (v18) {
            llvm::MetadataTracking::track((uint64_t)&v51, v18, 2);
          }
          uint64_t v19 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v17, v16, &v51, 0);
          if (!v51) {
            goto LABEL_25;
          }
          int v37 = *v51;
          if ((v37 - 4) > 0x1E)
          {
            if ((v37 - 3) >= 0xFFFFFFFE) {
              unint64_t v43 = v51;
            }
            else {
              unint64_t v43 = 0;
            }
            if ((v37 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v39 = (unint64_t)(v43 + 8);
              goto LABEL_81;
            }
            if (v37 == 3) {
              *((void *)v51 + 1) = 0;
            }
          }
          else if ((v51[1] & 0x7F) == 2 || *((_DWORD *)v51 + 3))
          {
            uint64_t v38 = *((void *)v51 + 2);
            if ((v38 & 4) != 0)
            {
              unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
              if (v39)
              {
LABEL_81:
                v50[0] = &v51;
                sub_1CC5FA668(v39 + 16, v50);
              }
            }
          }
LABEL_25:
          int32x2_t v20 = *v9;
          *(int32x2_t *)(v19 + 24) = *v9;
          uint64_t v21 = *(void *)(*(void *)&v20 + 32);
          uint64_t v22 = *(unsigned int *)(v19 + 40);
          if (v22)
          {
            uint64_t v30 = *(void *)(v19 + 32);
            uint64_t v31 = *(void *)(v21 + 40);
            uint64_t v32 = 32 * v22;
            do
            {
              if (!*(unsigned char *)v30)
              {
                uint64_t v33 = *(unsigned int *)(v30 + 4);
                if ((int)v33 >= 0) {
                  uint64_t v34 = (uint64_t *)(*(void *)(v31 + 272) + 8 * v33);
                }
                else {
                  uint64_t v34 = (uint64_t *)(*(void *)(v31 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
                }
                uint64_t v35 = *v34;
                if (*v34)
                {
                  uint64_t v36 = *(void *)(v35 + 16);
                  *(void *)(v35 + 16) = v30;
                  *(void *)(v30 + 16) = v36;
                  if (*(unsigned char *)(v30 + 3))
                  {
                    *(void *)(v30 + 24) = v35;
                  }
                  else
                  {
                    *(void *)(v30 + 24) = 0;
                    uint64_t v34 = (uint64_t *)(v36 + 24);
                  }
                }
                else
                {
                  *(void *)(v30 + 16) = v30;
                  *(void *)(v30 + 24) = 0;
                }
                *uint64_t v34 = v30;
              }
              v30 += 32;
              v32 -= 32;
            }
            while (v32);
          }
          uint64_t v23 = *(void *)(v21 + 728);
          if (v23) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 24))(v23, v19);
          }
          unint64_t v24 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v19 = v24 | *(void *)v19 & 7;
          *(void *)(v19 + 8) = v8;
          *(void *)(v24 + 8) = v19;
          *(void *)unint64_t v8 = *(void *)v8 & 7 | v19;
          goto LABEL_36;
        }
        uint64_t v17 = (llvm::MachineFunction *)v3[4];
        uint64_t v25 = *(unsigned __int8 **)(v8 + 56);
        uint64_t v51 = v25;
        if (v25) {
          llvm::MetadataTracking::track((uint64_t)&v51, v25, 2);
        }
        uint64_t v19 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v17, v16, &v51, 0);
        if (v51)
        {
          int v40 = *v51;
          if ((v40 - 4) > 0x1E)
          {
            if ((v40 - 3) >= 0xFFFFFFFE) {
              unsigned int v44 = v51;
            }
            else {
              unsigned int v44 = 0;
            }
            if ((v40 - 3) < 0xFFFFFFFE)
            {
              if (v40 == 3) {
                *((void *)v51 + 1) = 0;
              }
              goto LABEL_32;
            }
            unint64_t v42 = (unint64_t)(v44 + 8);
          }
          else
          {
            if ((v51[1] & 0x7F) != 2 && !*((_DWORD *)v51 + 3)) {
              goto LABEL_32;
            }
            uint64_t v41 = *((void *)v51 + 2);
            if ((v41 & 4) == 0) {
              goto LABEL_32;
            }
            unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
            if (!v42) {
              goto LABEL_32;
            }
          }
          v50[0] = &v51;
          sub_1CC5FA668(v42 + 16, v50);
        }
LABEL_32:
        if (v7 != (int32x2_t *)v8 && (*(_WORD *)(v8 + 44) & 4) != 0) {
          *(_WORD *)(v19 + 44) |= 0xCu;
        }
        sub_1CC31973C((uint64_t *)&v3[5], (uint64_t *)v8, v19);
LABEL_36:
        uint64_t v26 = **(unsigned __int16 **)(v8 + 16);
        LODWORD(v50[0]) = 1;
        v50[1] = 0;
        v50[2] = v26;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v17, (const llvm::MachineOperand *)v50);
        uint64_t v27 = *(unsigned int *)(v8 + 40);
        if (v27)
        {
          uint64_t v28 = *(const llvm::MachineOperand **)(v8 + 32);
          uint64_t v29 = 32 * v27;
          do
          {
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v17, v28);
            uint64_t v28 = (const llvm::MachineOperand *)((char *)v28 + 32);
            v29 -= 32;
          }
          while (v29);
        }
        if (v53 >= (unint64_t)HIDWORD(v53)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v52 + v53) = v8;
        LODWORD(v53) = v53 + 1;
        if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v8))
        {
          llvm::MachineFunction::eraseCallSiteInfo(a1, (const llvm::MachineInstr *)v8);
          if (!v8)
          {
LABEL_47:
            while ((*(_WORD *)(v8 + 44) & 8) != 0)
              unint64_t v8 = *(void *)(v8 + 8);
            goto LABEL_48;
          }
        }
        else if (!v8)
        {
          goto LABEL_47;
        }
LABEL_42:
        if ((*(unsigned char *)v8 & 4) == 0) {
          goto LABEL_47;
        }
LABEL_48:
        unint64_t v8 = *(void *)(v8 + 8);
      }
      while ((int32x2_t *)v8 != v7);
    }
    uint64_t v3 = (int32x2_t *)v3[1];
  }
  while (v3 != v49);
  uint64_t v45 = (llvm::MachineInstr **)v52;
  if (v53)
  {
    uint64_t v46 = 8 * v53;
    do
    {
      uint64_t v47 = *v45++;
      llvm::MachineInstr::eraseFromParent(v47);
      v46 -= 8;
    }
    while (v46);
    uint64_t v45 = (llvm::MachineInstr **)v52;
  }
  if (v45 != v54) {
    free(v45);
  }
}

void sub_1CC4D28CC()
{
}

BOOL llvm::debuginfoShouldUseDebugInstrRef(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) == 42 && dword_1EBD063C8 != 2 || dword_1EBD063C8 == 1;
}

void sub_1CC4D2988()
{
}

void sub_1CC4D2B20(void *a1)
{
  *a1 = &unk_1F2615FB0;
  sub_1CD52D6F8((llvm::Pass *)(a1 + 34));
  uint64_t v2 = a1[32];
  a1[32] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = a1[31];
  a1[31] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  *a1 = &unk_1F260E110;
  uint64_t v4 = (void *)a1[22];
  if (v4 != a1 + 24) {
    free(v4);
  }
  int v5 = (void *)a1[13];
  if (v5 != a1 + 15) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6 != a1 + 6) {
    free(v6);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC4D2C3C(void *a1)
{
  sub_1CC4D2B20(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4D2C74(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC4D2CE8(uint64_t a1, llvm::MachineFunction *this)
{
  BOOL v4 = llvm::MachineFunction::useDebugInstrRef(this);
  if (byte_1EBCD7F90) {
    int v5 = 1;
  }
  else {
    int v5 = v4;
  }
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1);
  if (AnalysisPass) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID);
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 264) = v7;
  if (v5) {
    llvm::MachineDominatorTree::calculate((llvm::MachineDominatorTree *)(a1 + 272), this);
  }
  unint64_t v8 = ***(uint64_t (****)(void))(a1 + 256);

  return v8();
}

double sub_1CC4D2DF8@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 8;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1CC4D2E20()
{
  int v2 = 1;
  v4.n128_u64[0] = (unint64_t)"Use instruction-ref based LiveDebugValues with normal DBG_VALUE inputs";
  v4.n128_u64[1] = 70;
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCD7F10, "force-instr-ref-livedebugvalues", &v2, &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD7F10, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Use experimental new value-tracking variable locations";
  v4.n128_u64[1] = 54;
  sub_1CD58FA28((long long *)&v4);
  __cxa_atexit((void (*)(void *))sub_1CC243CA8, qword_1EBD06348, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Maximum input basic blocks before DBG_VALUE limit applies";
  v4.n128_u64[1] = 57;
  int v1 = 1;
  int v2 = 10000;
  uint64_t v3 = &v2;
  sub_1CD58FB10((long long *)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCD7FD0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Maximum input DBG_VALUE insts supported by debug range extension";
  v4.n128_u64[1] = 64;
  int v1 = 1;
  int v2 = 50000;
  uint64_t v3 = &v2;
  sub_1CD58FC38((long long *)&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCD8090, &dword_1CB82C000);
}

uint64_t sub_1CC4D2F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  v774[1494] = *MEMORY[0x1E4F143B8];
  v621 = v5;
  uint64_t v9 = *v5;
  if ((*((unsigned char *)*v5 + 23) & 0x20) == 0)
  {
LABEL_171:
    char v28 = 0;
    return v28 & 1;
  }
  unsigned int v10 = v8;
  unsigned int v11 = v7;
  int8x8_t v12 = v6;
  int v13 = (int8x8_t *)v4;
  uint64_t v14 = ***v9;
  *(void *)v760 = *v5;
  int v15 = *(_DWORD *)(v14 + 2496);
  if (!v15)
  {
    uint64_t v134 = 0;
LABEL_188:
    uint64_t v19 = sub_1CC609054(v14 + 2480, (uint64_t)v760, (uint64_t *)v760, v134);
    uint64_t v135 = *(void *)v760;
    v19[3] = 0;
    v19[4] = 0;
    *uint64_t v19 = v135;
    v19[1] = v19 + 3;
    uint64_t v19[2] = 0x100000000;
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v14 + 2480);
  int v17 = v15 - 1;
  unsigned int v18 = v17 & ((v9 >> 4) ^ (v9 >> 9));
  uint64_t v19 = (void *)(v16 + 40 * v18);
  int32x2_t v20 = (void ***)*v19;
  if ((uint64_t ***)*v19 != v9)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    while (v20 != (void ***)-4096)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v20 == (void ***)-8192;
      }
      if (v23) {
        uint64_t v21 = v19;
      }
      unsigned int v24 = v18 + v22++;
      unsigned int v18 = v24 & v17;
      uint64_t v19 = (void *)(v16 + 40 * v18);
      int32x2_t v20 = (void ***)*v19;
      if ((uint64_t ***)*v19 == v9) {
        goto LABEL_12;
      }
    }
    if (v21) {
      uint64_t v134 = v21;
    }
    else {
      uint64_t v134 = v19;
    }
    goto LABEL_188;
  }
LABEL_12:
  uint64_t v25 = *((unsigned int *)v19 + 4);
  if (!v25) {
    goto LABEL_171;
  }
  uint64_t v26 = (void *)(v19[1] + 8);
  uint64_t v27 = 16 * v25;
  char v28 = 0;
  while (*((_DWORD *)v26 - 2))
  {
    v26 += 2;
    v27 -= 16;
    if (!v27) {
      return v28 & 1;
    }
  }
  if (!*v26) {
    goto LABEL_171;
  }
  uint64_t v29 = *v621;
  uint64_t v30 = ****v621;
  *(void *)v760 = *v621;
  int v31 = *(_DWORD *)(v30 + 2496);
  if (v31)
  {
    uint64_t v32 = *(void *)(v30 + 2480);
    int v33 = v31 - 1;
    unsigned int v34 = v33 & ((v29 >> 4) ^ (v29 >> 9));
    uint64_t v35 = (uint64_t ****)(v32 + 40 * v34);
    uint64_t v36 = *v35;
    if (*v35 == v29) {
      goto LABEL_28;
    }
    int v37 = 0;
    int v38 = 1;
    while (v36 != (uint64_t ***)-4096)
    {
      if (v37) {
        BOOL v39 = 0;
      }
      else {
        BOOL v39 = v36 == (uint64_t ***)-8192;
      }
      if (v39) {
        int v37 = v35;
      }
      unsigned int v40 = v34 + v38++;
      unsigned int v34 = v40 & v33;
      uint64_t v35 = (uint64_t ****)(v32 + 40 * v34);
      uint64_t v36 = *v35;
      if (*v35 == v29) {
        goto LABEL_28;
      }
    }
    if (v37) {
      uint64_t v136 = v37;
    }
    else {
      uint64_t v136 = v35;
    }
  }
  else
  {
    uint64_t v136 = 0;
  }
  uint64_t v35 = (uint64_t ****)sub_1CC609054(v30 + 2480, (uint64_t)v760, (uint64_t *)v760, v136);
  int v137 = *(uint64_t ****)v760;
  v35[3] = 0;
  v35[4] = 0;
  *uint64_t v35 = v137;
  v35[1] = (uint64_t ***)(v35 + 3);
  v35[2] = (uint64_t ***)0x100000000;
LABEL_28:
  uint64_t v41 = v35[1];
  if (*(_DWORD *)v41)
  {
    uint64_t v42 = 16 * *((unsigned int *)v35 + 4) - 16;
    do
    {
      int v43 = *((_DWORD *)v41 + 4);
      v41 += 2;
      v42 -= 16;
    }
    while (v43);
  }
  if (!*((_DWORD *)v41[1][-*((unsigned int *)v41[1] + 2) + 5] + 9)) {
    goto LABEL_171;
  }
  unsigned int v628 = v11;
  unsigned int v627 = v10;
  v13[1] = (int8x8_t)((uint64_t (*)(uint64_t ***))(*v621[2])[22])(v621[2]);
  void v13[2] = (int8x8_t)((uint64_t (*)(uint64_t ***))(*v621[2])[13])(v621[2]);
  uint64_t v44 = ((uint64_t (*)(uint64_t ***))(*v621[2])[14])(v621[2]);
  v13[3] = (int8x8_t)v44;
  v625 = v13 + 5;
  (*(void (**)(void))(*(void *)v44 + 256))();
  v13[4] = v12;
  uint64_t v45 = v13 + 14;
  llvm::LexicalScopes::initialize((llvm::LexicalScopes *)&v13[14], v621);
  v722[1] = 0;
  v722[0] = 0;
  v721 = (uint64_t *)v722;
  uint64_t v723 = 1;
  for (uint64_t i = 4; i != 20; i += 4)
    LODWORD(v722[i - 1]) = -1;
  v669[0] = 0;
  v669[1] = 0;
  unsigned int v670 = 0;
  v702 = v13 + 40;
  v703 = v13 + 40;
  uint64_t v716 = 0;
  v623 = v13 + 40;
  v717 = v13 + 40;
  long long v704 = 0u;
  long long v705 = 0u;
  long long v706 = 0u;
  long long v707 = 0u;
  long long v708 = 0u;
  long long v709 = 0u;
  long long v710 = 0u;
  long long v711 = 0u;
  long long v712 = 0u;
  long long v713 = 0u;
  long long v714 = 0u;
  long long v715 = 0u;
  uint64_t v47 = 29;
  v718[0] = 1;
  do
  {
    uint64_t v48 = &(&v702)[v47];
    *uint64_t v48 = 0;
    *((unsigned char *)v48 + 8) = 0;
    *((unsigned char *)v48 + 24) = 0;
    v48[4] = 0;
    v47 += 9;
  }
  while (v48 + 9 != v719);
  v719[0] = 1;
  uint64_t v49 = 102;
  do
  {
    unint64_t v50 = &(&v702)[v49];
    *unint64_t v50 = 0;
    *((unsigned char *)v50 + 8) = 0;
    *((unsigned char *)v50 + 24) = 0;
    void v50[4] = 0;
    v49 += 9;
  }
  while (v50 + 9 != (int8x8_t **)&v720);
  v720 = v669;
  uint64_t v699 = 1;
  for (uint64_t j = 8; j != 72; j += 16)
    *(uint64_t *)((char *)&v699 + j) = -4096;
  uint64_t v696 = 1;
  for (uint64_t k = 8; k != 72; k += 16)
    *(uint64_t *)((char *)&v696 + k) = -4096;
  uint64_t v635 = (uint64_t)v13;
  v693 = (uint64_t *)v695;
  uint64_t v694 = 0x400000000;
  v667 = 0;
  uint64_t v668 = 0;
  v666 = &v667;
  v663 = 0;
  int32x2_t v664 = 0;
  unsigned int v665 = 0;
  v661[0] = 0;
  v661[1] = 0;
  unsigned int v662 = 0;
  v656 = v660;
  v657 = v660;
  uint64_t v658 = 16;
  int v659 = 0;
  v654[1] = 0;
  v654[0] = 0;
  int v655 = 0;
  v652[1] = 0;
  v652[0] = 0;
  int v653 = 0;
  v650 = 0;
  v649 = 0;
  uint64_t v651 = 0;
  v647 = 0;
  v646 = 0;
  uint64_t v648 = 0;
  v687 = v689;
  uint64_t v688 = 0x2000000000;
  uint64_t v692 = 0;
  v691 = 0;
  v690 = &v691;
  v684 = v686;
  uint64_t v685 = 0x800000000;
  uint64_t v53 = v621[41];
  uint64_t v54 = 1;
  v682[0] = 1;
  do
  {
    uint64_t v55 = &v682[v54];
    *uint64_t v55 = 0;
    *((unsigned char *)v55 + 8) = 0;
    *((unsigned char *)v55 + 24) = 0;
    v55[4] = 0;
    v54 += 5;
  }
  while (v55 + 5 != &v684);
  uint64_t v56 = (uint64_t)v53[7];
  v622 = v45;
  if ((uint64_t ***)v56 == v53 + 6) {
    goto LABEL_195;
  }
  v638 = v53;
  v640 = v53 + 6;
  do
  {
    uint64_t v57 = *(unsigned int *)(v56 + 40);
    if (v57)
    {
      int v58 = *(_DWORD **)(v56 + 32);
      unsigned int v59 = &v58[8 * v57];
      uint64_t v60 = *(void *)(v635 + 8);
      if (v60) {
        unint64_t v61 = (void *)(v60 + 8);
      }
      else {
        unint64_t v61 = 0;
      }
      do
      {
        if ((*v58 & 0x10000FF) == 0x1000000)
        {
          unsigned int v62 = v58[1];
          if (v62)
          {
            unint64_t v63 = ((unint64_t)*(unsigned int *)(*v61 + 24 * v62 + 16) >> 3) & 0x1FFFFFFE;
            uint64_t v65 = v61[5];
            uint64_t v64 = v61[6];
            int v66 = (_WORD *)(v64 + v63 + 2);
            int v67 = *(unsigned __int16 *)(v64 + v63) + (*(_DWORD *)(*v61 + 24 * v62 + 16) & 0xF) * v62;
            do
            {
              uint64_t v68 = 4 * (unsigned __int16)v67;
              unsigned int v69 = *(unsigned __int16 *)(v65 + v68);
              if (*(_WORD *)(v65 + v68)) {
                BOOL v70 = v64 == 0;
              }
              else {
                BOOL v70 = 1;
              }
              if (!v70)
              {
                unsigned int v72 = *(unsigned __int16 *)(v65 + 4 * (unsigned __int16)v67 + 2) << 16;
                for (uint64_t m = (unsigned int *)(*v61 + 24 * *(unsigned __int16 *)(v65 + 4 * (unsigned __int16)v67) + 8);
                      ;
                      uint64_t m = (unsigned int *)(*v61 + 24 * v69 + 8))
                {
                  uint64_t v74 = (unsigned __int16 *)(v64 + 2 * *m);
                  do
                  {
                    *(_DWORD *)v760 = (unsigned __int16)v69;
                    sub_1CC34E98C((uint64_t)&v687, (unsigned int *)v760);
                    int v75 = *v74++;
                    v69 += v75;
                  }
                  while (v75);
                  unsigned int v69 = HIWORD(v72);
                  if (HIWORD(v72))
                  {
                    v72 >>= 16;
                  }
                  else
                  {
                    if (!*v66) {
                      goto LABEL_59;
                    }
                    v67 += (unsigned __int16)*v66++;
                    int v76 = (unsigned __int16 *)(v61[5] + 4 * (unsigned __int16)v67);
                    unsigned int v69 = *v76;
                    unsigned int v72 = v76[1] << 16;
                  }
                  uint64_t v64 = v61[6];
                }
              }
              int v71 = (unsigned __int16)*v66++;
              v67 += v71;
            }
            while (v71);
          }
        }
LABEL_59:
        v58 += 8;
      }
      while (v58 != v59);
    }
    int v77 = **(unsigned __int16 **)(v56 + 16);
    uint64_t v78 = (uint64_t **)v640;
    if ((v77 - 13) <= 1)
    {
      BOOL v23 = v77 == 14;
      uint64_t v79 = v77 != 14;
      uint64_t v80 = 96;
      if (v23) {
        uint64_t v80 = 32;
      }
      uint64_t v81 = *(void *)(v56 + 56);
      if (*(_DWORD *)(v81 + 8) == 2) {
        uint64_t v82 = *(void *)(v81 - 8);
      }
      else {
        uint64_t v82 = 0;
      }
      uint64_t v83 = *(void *)(v56 + 32);
      uint64_t v84 = *(void *)(v83 + v80 + 16);
      *(void *)v760 = *(void *)(v83 + (v79 << 6) + 16);
      if (v84)
      {
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v84 + 24), *(uint64_t **)(v84 + 32), (int8x16_t *)&v760[8]);
      }
      else
      {
        v760[8] = 0;
        v760[24] = 0;
      }
      *(void *)&v760[32] = v82;
      *(void *)v749 = 0;
      if (sub_1CC4D8614((uint64_t)v682, (uint64_t *)v760, (uint64_t *)v749)) {
        goto LABEL_110;
      }
      int v85 = LODWORD(v682[0]) >> 1;
      if (v682[0]) {
        unsigned int v86 = 8;
      }
      else {
        unsigned int v86 = v683;
      }
      if (4 * v85 + 4 >= 3 * v86)
      {
        v86 *= 2;
      }
      else if (v86 + ~v85 - HIDWORD(v682[0]) > v86 >> 3)
      {
LABEL_83:
        uint64_t v87 = *(_OWORD **)v749;
        LODWORD(v682[0]) += 2;
        if (**(void **)v749 || *(unsigned char *)(*(void *)v749 + 24) || *(void *)(*(void *)v749 + 32)) {
          --HIDWORD(v682[0]);
        }
        long long v88 = *(_OWORD *)v760;
        long long v89 = *(_OWORD *)&v760[16];
        *(void *)(*(void *)v749 + 32) = *(void *)&v760[32];
        *uint64_t v87 = v88;
        v87[1] = v89;
        if (**(_WORD **)(v56 + 16) == 14) {
          uint64_t v90 = *(unsigned int *)(v56 + 40);
        }
        else {
          uint64_t v90 = 1;
        }
        if (2 * (**(_WORD **)(v56 + 16) == 14) == v90)
        {
LABEL_90:
          uint64_t v91 = *(void *)(v56 + 32);
          uint64_t v92 = 96;
          if (**(_WORD **)(v56 + 16) == 14) {
            uint64_t v92 = 32;
          }
          uint64_t v93 = *(llvm::DIExpression **)(v91 + v92 + 16);
          unsigned int v94 = (void *)*((void *)v93 + 3);
          if (((*((void *)v93 + 4) - (void)v94) & 0x7FFFFFFF8) == 0 || *v94 != 4099) {
            *(void *)(v91 + 112) = llvm::DIExpression::prepend(v93, (const llvm::DIExpression *)8, 0);
          }
          if (v685 >= (unint64_t)HIDWORD(v685)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)&v684[8 * v685] = v56;
          LODWORD(v685) = v685 + 1;
          goto LABEL_148;
        }
        uint64_t v95 = *(void *)(v56 + 32);
        uint64_t v96 = v95 + 32 * v90;
        uint64_t v97 = *(void *)(*(void *)(v56 + 24) + 32);
        uint64_t v98 = v95 + ((unint64_t)(**(_WORD **)(v56 + 16) == 14) << 6);
        while (!*(unsigned char *)v98)
        {
          if ((**(unsigned char **)(v97 + 360) & 4) == 0) {
            break;
          }
          uint64_t v99 = *(void *)(v97 + 40);
          uint64_t v100 = *(void *)(v99 + 456);
          uint64_t v101 = *(void *)(v99 + 464);
          uint64_t v102 = v101 - v100;
          if (v101 == v100) {
            break;
          }
          uint64_t v103 = 0;
          uint64_t v104 = 8 * (v102 >> 3);
          while (1)
          {
            if (*(_DWORD *)(v98 + 4) == *(void *)(v100 + 8 * v103))
            {
              uint64_t v105 = *(void *)(*(void *)v97 + 112);
              if (v105)
              {
                if ((v103 + 2) < *(_DWORD *)(v105 + 8))
                {
                  uint64_t v106 = *(void *)(v105 + 8 * (v103 + 2) + 40);
                  if (v106)
                  {
                    if ((*(unsigned char *)(v106 + 19) & 0x40) != 0) {
                      break;
                    }
                  }
                }
              }
            }
            ++v103;
            v104 -= 8;
            if (!v104) {
              goto LABEL_110;
            }
          }
          v98 += 32;
          if (v98 == v96) {
            goto LABEL_90;
          }
        }
LABEL_110:
        uint64_t v107 = *(void *)(v635 + 32);
        if (v107)
        {
          uint64_t v108 = *(void *)(v107 + 112);
          __int16 v109 = *(_WORD *)(v108 + 1064);
          if ((v109 & 2) != 0)
          {
            if ((v109 & 4) == 0 && *(_DWORD *)(v108 + 1116) == 3)
            {
LABEL_147:
              if (!v56) {
                goto LABEL_149;
              }
              goto LABEL_148;
            }
          }
          else if ((v109 & 4) == 0)
          {
            goto LABEL_147;
          }
        }
        int v110 = **(unsigned __int16 **)(v56 + 16);
        uint64_t v111 = 96;
        if (v110 == 14) {
          uint64_t v111 = 32;
        }
        uint64_t v112 = *(void *)(v56 + 56);
        int v113 = *(_DWORD *)(v112 + 8);
        if (v113 == 2) {
          uint64_t v114 = *(void *)(v112 - 8);
        }
        else {
          uint64_t v114 = 0;
        }
        uint64_t v115 = *(void *)(v56 + 32);
        uint64_t v116 = *(void *)(v115 + ((unint64_t)(v110 != 14) << 6) + 16);
        uint64_t v117 = *(void *)(v115 + v111 + 16);
        *(void *)v749 = v116;
        if (v117)
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v117 + 24), *(uint64_t **)(v117 + 32), (int8x16_t *)&v749[8]);
        }
        else
        {
          v749[8] = 0;
          v749[24] = 0;
        }
        *(void *)&v749[32] = v114;
        if (*(_WORD *)(v116 + 32)
          && (v113 != 2 || !*(void *)(v112 - 8))
          && sub_1CC4D96BC(v115 + ((unint64_t)(v110 == 14) << 6), *(void *)(v56 + 24), *(void *)(v635 + 8)))
        {
          int v118 = **(unsigned __int16 **)(v56 + 16);
          uint64_t v119 = *(void *)(v56 + 32);
          unsigned int v120 = *(_DWORD *)(v119 + ((unint64_t)(v118 == 14) << 6) + 4);
          if (v692)
          {
            for (int n = v691; n; int n = (void *)*n)
            {
              unsigned int v122 = *((_DWORD *)n + 7);
              if (v120 >= v122)
              {
                if (v122 >= v120) {
                  goto LABEL_146;
                }
                ++n;
              }
            }
          }
          else if (v688)
          {
            int v123 = v687;
            uint64_t v124 = 4 * v688;
            while (*v123 != v120)
            {
              ++v123;
              v124 -= 4;
              if (!v124) {
                goto LABEL_139;
              }
            }
            if (v124) {
              goto LABEL_146;
            }
          }
LABEL_139:
          BOOL v23 = v118 == 14;
          uint64_t v125 = 96;
          if (v23) {
            uint64_t v125 = 32;
          }
          if (((*(void *)(*(void *)(v119 + v125 + 16) + 32) - *(void *)(*(void *)(v119 + v125 + 16) + 24)) & 0x7FFFFFFF8) == 0)
          {
            *(_OWORD *)v737 = *(_OWORD *)v749;
            *(_OWORD *)&v737[16] = *(_OWORD *)&v749[16];
            uint64_t v738 = *(void *)&v749[32];
            sub_1CC4D89BC((uint64_t)v760, (uint64_t)&v702, (uint64_t *)v737);
            if (v760[32])
            {
              int v126 = *(char **)v760;
              uint64_t v127 = &v760[16];
            }
            else
            {
              uint64_t v128 = 96;
              if (**(_WORD **)(v56 + 16) == 14) {
                uint64_t v128 = 32;
              }
              int v129 = llvm::DIExpression::prepend(*(llvm::DIExpression **)(*(void *)(v56 + 32) + v128 + 16), (const llvm::DIExpression *)8, 0);
              sub_1CC4D9910((uint64_t)v760, v56);
              LODWORD(v762) = 2;
              *(void *)&long long v761 = v129;
              sub_1CC4D8A38(&v677, &v721, (uint64_t)v760);
              sub_1CC4D9624(&v672, (uint64_t)&v677);
              sub_1CC4D92F8((uint64_t)&v702, (uint64_t)&v672, (long long *)v760);
              if (v672 != &v674) {
                free(v672);
              }
              if (v677 != &v679) {
                free(v677);
              }
              if (v773 != v774) {
                free(v773);
              }
              int v126 = (char *)*((void *)&v762 + 1);
              uint64_t v127 = (char *)&v763 + 8;
            }
            if (v126 != v127) {
              free(v126);
            }
          }
        }
LABEL_146:
        uint64_t v78 = (uint64_t **)v640;
        goto LABEL_147;
      }
      sub_1CC4D8744((uint64_t)v682, v86);
      *(void *)v749 = 0;
      sub_1CC4D8614((uint64_t)v682, (uint64_t *)v760, (uint64_t *)v749);
      goto LABEL_83;
    }
LABEL_148:
    if ((*(unsigned char *)v56 & 4) != 0) {
      goto LABEL_150;
    }
LABEL_149:
    if ((*(_WORD *)(v56 + 44) & 8) == 0)
    {
LABEL_150:
      uint64_t v45 = v622;
      goto LABEL_153;
    }
    uint64_t v45 = v622;
    do
      uint64_t v56 = *(void *)(v56 + 8);
    while ((*(_WORD *)(v56 + 44) & 8) != 0);
LABEL_153:
    uint64_t v56 = *(void *)(v56 + 8);
  }
  while ((uint64_t **)v56 != v78);
  if (v685)
  {
    for (iuint64_t i = v638[7]; ii != v78; iuint64_t i = (uint64_t **)ii[1])
    {
      int v132 = *(unsigned __int16 *)ii[2];
      if ((v132 - 13) >= 5 && v132 != 23)
      {
        uint64_t v78 = ii;
        break;
      }
      if ((*(unsigned char *)ii & 4) == 0)
      {
        while ((*((_WORD *)ii + 22) & 8) != 0)
          iuint64_t i = (uint64_t **)ii[1];
      }
    }
    uint64_t v138 = 8 * v685;
    int v139 = v684 - 8;
    do
    {
      sub_1CB9173F0((uint64_t)v78[3], (unint64_t *)v78, *(void *)(*(void *)&v139[v138] + 24), *(unint64_t **)&v139[v138]);
      v138 -= 8;
    }
    while (v138);
  }
LABEL_195:
  uint64_t v140 = v621 + 40;
  uint64_t v141 = v621[41];
  if (v141 != (uint64_t ***)(v621 + 40))
  {
    v629 = v621 + 40;
    do
    {
      uint64_t v142 = v141 + 6;
      v631 = v141;
      uint64_t v143 = v141[7];
      v636 = v141 + 6;
      if (v143 != (uint64_t **)(v141 + 6))
      {
        do
        {
          int v144 = *(unsigned __int16 *)v143[2];
          if ((v144 - 13) > 1) {
            goto LABEL_260;
          }
          BOOL v23 = v144 == 14;
          BOOL v145 = v144 != 14;
          uint64_t v146 = 12;
          if (v23) {
            uint64_t v146 = 4;
          }
          unint64_t v147 = v143[7];
          if (*((_DWORD *)v147 + 2) == 2) {
            uint64_t v148 = *(v147 - 1);
          }
          else {
            uint64_t v148 = 0;
          }
          unint64_t v149 = v143[4];
          uint64_t v150 = v149[8 * v145 + 2];
          uint64_t v151 = v149[v146 + 2];
          *(void *)v737 = v150;
          if (v151)
          {
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v151 + 24), *(uint64_t **)(v151 + 32), (int8x16_t *)&v737[8]);
            LODWORD(v151) = v737[24];
            uint64_t v150 = *(void *)v737;
          }
          else
          {
            v737[8] = 0;
            v737[24] = 0;
          }
          uint64_t v738 = v148;
          int32x2_t v152 = vdup_n_s32(v151 == 0);
          v153.i64[0] = v152.u32[0];
          v153.i64[1] = v152.u32[1];
          int8x16_t v744 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v153, 0x3FuLL)), (int8x16_t)xmmword_1CFAC4A20, *(int8x16_t *)&v737[8]);
          *(void *)v749 = v150;
          *(void *)v760 = 0;
          if (!sub_1CC4DC0CC((uint64_t)v661, v749, v760)
            || (uint64_t v154 = *(void *)v760, *(void *)v760 == v661[0] + 112 * v662))
          {
            *(void *)v749 = &v749[16];
            *(void *)&v749[8] = 0x400000000;
            v751[0] = 0uLL;
            *((void *)&v750 + 1) = v751;
            sub_1CC4DBF9C((uint64_t *)v749, (unint64_t *)&v744);
            *(void *)v760 = v150;
            *(void *)&v760[8] = &v760[24];
            *(void *)&v760[16] = 0x400000000;
            if (*(_DWORD *)&v749[8]) {
              sub_1CC4DC664((uint64_t)&v760[8], (uint64_t)v749);
            }
            sub_1CC4DC748((uint64_t)&v764, (void *)&v750 + 1);
            sub_1CC4DC164(v661, v760, (uint64_t)&v760[8], (uint64_t)&v677);
            sub_1CD3C5048((uint64_t)&v764, *((void **)&v764 + 1));
            if (*(unsigned char **)&v760[8] != &v760[24]) {
              free(*(void **)&v760[8]);
            }
            *(int8x16_t *)&v760[8] = v744;
            v677 = &v679;
            uint64_t v678 = 0x100000000;
            *(void *)v760 = v150;
            *(void *)&v760[24] = &v761;
            *(void *)&v760[32] = 0x100000000;
            sub_1CC4DC7E0((uint64_t)v669, v760, (uint64_t)&v760[24], (uint64_t)&v672);
            if (*(long long **)&v760[24] != &v761) {
              free(*(void **)&v760[24]);
            }
            uint64_t v142 = v636;
            if (v677 != &v679) {
              free(v677);
            }
            sub_1CD3C5048((uint64_t)&v750 + 8, *(void **)&v751[0]);
            if (*(unsigned char **)v749 != &v749[16]) {
              free(*(void **)v749);
            }
          }
          else
          {
            *(int8x16_t *)&v760[8] = v744;
            *(void *)v749 = &v749[16];
            *(void *)&v749[8] = 0x100000000;
            *(void *)v760 = v150;
            *(void *)&v760[24] = &v761;
            *(void *)&v760[32] = 0x100000000;
            sub_1CC4DC7E0((uint64_t)v669, v760, (uint64_t)&v760[24], (uint64_t)&v677);
            if (*(long long **)&v760[24] != &v761) {
              free(*(void **)&v760[24]);
            }
            if (*(unsigned char **)v749 != &v749[16]) {
              free(*(void **)v749);
            }
            if (!(_BYTE)v679) {
              goto LABEL_230;
            }
            uint64_t v155 = *(void *)(v154 + 104);
            int v156 = v155 == 0;
            uint64_t v157 = 88;
            if (v155)
            {
              int v158 = 0;
              uint64_t v639 = v154 + 96;
            }
            else
            {
              uint64_t v157 = 8;
              uint64_t v639 = *(void *)(v154 + 8) + 16 * *(unsigned int *)(v154 + 16);
              int v158 = 1;
            }
            unsigned int v159 = v677;
            uint64_t v160 = (uint64_t *)(v154 + 8);
            unsigned int v161 = *(void **)(v154 + v157);
            if (v158 == v156 && v161 == (void *)v639)
            {
              sub_1CC4DBF9C(v160, (unint64_t *)&v744);
              uint64_t v45 = v622;
LABEL_230:
              uint64_t v142 = v636;
              goto LABEL_260;
            }
            v632 = v160;
            do
            {
              if (v155) {
                uint64_t v162 = v161 + 4;
              }
              else {
                uint64_t v162 = v161;
              }
              unint64_t v163 = v162[1];
              if (v744.i64[0] + v744.i64[1] > v163 && *v162 + v163 > v744.i64[1])
              {
                unint64_t v165 = *((unsigned int *)v159 + 8);
                if (v165 >= *((unsigned int *)v159 + 9)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v166 = (void *)(v159[3] + 16 * v165);
                void *v166 = *v162;
                v166[1] = v163;
                ++*((_DWORD *)v159 + 8);
                *(void *)v760 = *(void *)v737;
                *(_OWORD *)&v760[8] = *(_OWORD *)v162;
                *(void *)v749 = 0;
                if (sub_1CC4DC8E0(v669, v760, (uint64_t **)v749)) {
                  uint64_t v167 = *(void *)v749;
                }
                else {
                  uint64_t v167 = v669[0] + 56 * v670;
                }
                unint64_t v168 = *(unsigned int *)(v167 + 32);
                if (v168 >= *(unsigned int *)(v167 + 36)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(int8x16_t *)(*(void *)(v167 + 24) + 16 * v168) = v744;
                ++*(_DWORD *)(v167 + 32);
              }
              if (v155)
              {
                uint64_t v169 = (void *)v161[1];
                unint64_t v170 = v161;
                if (v169)
                {
                  do
                  {
                    unsigned int v161 = v169;
                    uint64_t v169 = (void *)*v169;
                  }
                  while (v169);
                }
                else
                {
                  do
                  {
                    unsigned int v161 = (void *)v170[2];
                    BOOL v23 = *v161 == (void)v170;
                    unint64_t v170 = v161;
                  }
                  while (!v23);
                }
              }
              else
              {
                v161 += 2;
              }
            }
            while (v158 != v156 || v161 != (void *)v639);
            sub_1CC4DBF9C(v632, (unint64_t *)&v744);
            uint64_t v45 = v622;
            uint64_t v142 = v636;
            if (!v143)
            {
LABEL_263:
              while ((*((_WORD *)v143 + 22) & 8) != 0)
                uint64_t v143 = (uint64_t **)v143[1];
              goto LABEL_264;
            }
          }
LABEL_260:
          if ((*(unsigned char *)v143 & 4) == 0) {
            goto LABEL_263;
          }
LABEL_264:
          uint64_t v143 = (uint64_t **)v143[1];
        }
        while (v143 != (uint64_t **)v142);
      }
      uint64_t v141 = (uint64_t ***)v631[1];
      uint64_t v140 = v621 + 40;
    }
    while (v141 != (uint64_t ***)v629);
    uint64_t v171 = v621[41];
    if (v171 != (uint64_t ***)v629)
    {
      while (2)
      {
        for (juint64_t j = v171[7]; jj != (uint64_t **)(v171 + 6); juint64_t j = (uint64_t **)jj[1])
        {
          unsigned int v173 = jj[7];
          if (v173 && *((_DWORD *)v173 + 1)) {
            goto LABEL_304;
          }
        }
        uint64_t v174 = v657;
        uint64_t v175 = HIDWORD(v658);
        if (v657 == v656)
        {
          if (HIDWORD(v658))
          {
            uint64_t v176 = 0;
            uint64_t v177 = 8 * HIDWORD(v658);
            uint64_t v178 = (uint64_t ****)v657;
            while (*v178 != v171)
            {
              if (*v178 == (uint64_t ***)-2) {
                uint64_t v176 = v178;
              }
              ++v178;
              v177 -= 8;
              if (!v177)
              {
                if (!v176) {
                  goto LABEL_280;
                }
                *uint64_t v176 = v171;
                --v659;
                break;
              }
            }
LABEL_304:
            uint64_t v171 = (uint64_t ***)v171[1];
            if (v171 == (uint64_t ***)v629) {
              goto LABEL_312;
            }
            continue;
          }
LABEL_280:
          unsigned int v179 = v658;
          if (HIDWORD(v658) < v658)
          {
            ++HIDWORD(v658);
            *(void *)&v657[8 * v175] = v171;
            goto LABEL_304;
          }
        }
        else
        {
          unsigned int v179 = v658;
        }
        break;
      }
      if (3 * v179 <= 4 * (HIDWORD(v658) - v659))
      {
        if (v179 >= 0x40) {
          v179 *= 2;
        }
        else {
          unsigned int v179 = 128;
        }
      }
      else if (v179 - HIDWORD(v658) >= v179 >> 3)
      {
        goto LABEL_285;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v656, v179);
      unsigned int v179 = v658;
      uint64_t v174 = v657;
LABEL_285:
      unsigned int v180 = v179 - 1;
      unsigned int v181 = (v179 - 1) & ((v171 >> 4) ^ (v171 >> 9));
      uint64_t v182 = &v174[8 * v181];
      uint64_t v183 = *(uint64_t ****)v182;
      if (*(void *)v182 == -1)
      {
        unsigned int v184 = 0;
LABEL_297:
        if (v184) {
          int v188 = v184;
        }
        else {
          int v188 = v182;
        }
        if (*(uint64_t ****)v188 != v171)
        {
          if (*(void *)v188 == -2) {
            --v659;
          }
          else {
            ++HIDWORD(v658);
          }
          *(void *)int v188 = v171;
        }
      }
      else
      {
        unsigned int v184 = 0;
        int v185 = 1;
        while (v183 != v171)
        {
          if (v184) {
            BOOL v186 = 0;
          }
          else {
            BOOL v186 = v183 == (uint64_t ***)-2;
          }
          if (v186) {
            unsigned int v184 = v182;
          }
          unsigned int v187 = v181 + v185++;
          unsigned int v181 = v187 & v180;
          uint64_t v182 = &v174[8 * (v187 & v180)];
          uint64_t v183 = *(uint64_t ****)v182;
          if (*(void *)v182 == -1) {
            goto LABEL_297;
          }
        }
      }
      goto LABEL_304;
    }
  }
LABEL_312:
  *(void *)v760 = v621;
  uint64_t v645 = 0;
  __p = 0;
  v644 = 0;
  sub_1CB93939C((char **)&__p, (uint64_t)v760);
  int v642 = 0;
  unsigned __int16 v189 = v644;
  uint64_t v190 = (char *)__p;
  if (v644 != __p)
  {
    do
    {
      *(void *)v760 = 0;
      uint64_t v191 = *((void *)v189 - 1);
      v189 -= 8;
      *(void *)v760 = v191;
      *((void *)sub_1CC4DCD10((uint64_t)v654, &v642) + 1) = v191;
      int v192 = v642;
      *((_DWORD *)sub_1CBAEE230((uint64_t)v652, (uint64_t *)v760) + 2) = v192;
      sub_1CC4D7DA8((uint64_t)&v649, &v642);
      unsigned int v193 = ++v642;
    }
    while (v189 != v190);
    unsigned int v194 = v621[41];
    if (v193 > v628 && v194 != (uint64_t ***)v140)
    {
      unsigned int v196 = 0;
      do
      {
        for (kuint64_t k = v194[7]; kk != (uint64_t **)(v194 + 6); kuint64_t k = (uint64_t **)kk[1])
        {
          if (*(unsigned __int16 *)kk[2] - 13 < 2) {
            ++v196;
          }
          if ((*(unsigned char *)kk & 4) == 0)
          {
            while ((*((_WORD *)kk + 22) & 8) != 0)
              kuint64_t k = (uint64_t **)kk[1];
          }
        }
        unsigned int v194 = (uint64_t ***)v194[1];
      }
      while (v194 != (uint64_t ***)v140);
      if (v196 > v627)
      {
        char v28 = 0;
        goto LABEL_1216;
      }
    }
  }
  char v198 = 0;
  v677 = (uint64_t *)v681;
  uint64_t v678 = (uint64_t)v681;
  uint64_t v679 = 16;
  int v680 = 0;
  while (2)
  {
    unint64_t v199 = v649;
    if (v649 != v650)
    {
      v672 = (uint64_t *)v676;
      v673 = (uint64_t *)v676;
      uint64_t v674 = 16;
      int v675 = 0;
      while (1)
      {
        uint64_t v200 = (uint64_t **)*((void *)sub_1CC4DCD10((uint64_t)v654, v199) + 1);
        uint64_t v201 = v649;
        uint64_t v202 = v650;
        uint64_t v203 = v650 - (unsigned char *)v649;
        if (v650 - (unsigned char *)v649 >= 5)
        {
          uint64_t v204 = 0;
          uint64_t v205 = v203 >> 2;
          unsigned int v206 = *(_DWORD *)v649;
          int64_t v207 = (unint64_t)((v203 >> 2) - 2) >> 1;
          unint64_t v208 = v649;
          do
          {
            uint64_t v209 = &v208[v204 + 1];
            uint64_t v210 = (2 * v204) | 1;
            uint64_t v204 = 2 * v204 + 2;
            if (v204 >= v205)
            {
              unsigned int v211 = *v209;
              uint64_t v204 = v210;
            }
            else
            {
              unsigned int v211 = *v209;
              unsigned int v212 = v209[1];
              if (*v209 >= v212) {
                unsigned int v211 = v209[1];
              }
              if (*v209 <= v212) {
                uint64_t v204 = v210;
              }
              else {
                ++v209;
              }
            }
            _DWORD *v208 = v211;
            unint64_t v208 = v209;
          }
          while (v204 <= v207);
          uint64_t v213 = (unsigned int *)(v202 - 4);
          if (v209 == (unsigned int *)(v202 - 4))
          {
            *uint64_t v209 = v206;
          }
          else
          {
            *uint64_t v209 = *v213;
            *uint64_t v213 = v206;
            uint64_t v214 = (char *)v209 - v201 + 4;
            if (v214 >= 5)
            {
              unint64_t v215 = (((unint64_t)v214 >> 2) - 2) >> 1;
              int v216 = (unsigned int *)&v201[4 * v215];
              unsigned int v217 = *v216;
              unsigned int v218 = *v209;
              if (*v216 > *v209)
              {
                do
                {
                  *uint64_t v209 = v217;
                  uint64_t v209 = v216;
                  if (!v215) {
                    break;
                  }
                  unint64_t v215 = (v215 - 1) >> 1;
                  int v216 = (unsigned int *)&v201[4 * v215];
                  unsigned int v217 = *v216;
                }
                while (*v216 > v218);
                *uint64_t v209 = v218;
              }
            }
          }
        }
        v650 = v202 - 4;
        *(void *)v760 = v623;
        *(void *)&long long v771 = 0;
        *((void *)&v771 + 1) = v623;
        long long v769 = 0u;
        long long v770 = 0u;
        long long v767 = 0u;
        long long v768 = 0u;
        long long v765 = 0u;
        long long v766 = 0u;
        long long v763 = 0u;
        long long v764 = 0u;
        memset(&v760[8], 0, 32);
        long long v761 = 0u;
        long long v762 = 0u;
        unint64_t v219 = v200[8];
        uint64_t v220 = v200[9];
        v624 = (llvm::MachineBasicBlock *)v200;
        if (v219 != v220)
        {
          int v221 = 0;
          do
          {
            uint64_t v222 = *v219;
            unsigned int v223 = v677;
            if ((uint64_t *)v678 == v677)
            {
              unsigned int v224 = HIDWORD(v679);
              uint64_t v225 = (char *)(v678 + 8 * HIDWORD(v679));
              if (HIDWORD(v679))
              {
                uint64_t v226 = 0;
                while (*(void *)(v678 + v226) != v222)
                {
                  v226 += 8;
                  if (8 * HIDWORD(v679) == v226) {
                    goto LABEL_371;
                  }
                }
                uint64_t v225 = (char *)(v678 + v226);
              }
LABEL_371:
              unsigned int v223 = (void *)v678;
            }
            else
            {
              int v227 = v679 - 1;
              unsigned int v228 = (v679 - 1) & ((v222 >> 4) ^ (v222 >> 9));
              uint64_t v225 = (char *)(v678 + 8 * v228);
              uint64_t v229 = *(void *)v225;
              if (*(void *)v225 == -1)
              {
                uint64_t v230 = 0;
LABEL_393:
                if (v230) {
                  uint64_t v225 = v230;
                }
                unsigned int v224 = HIDWORD(v679);
                if (*(void *)v225 != v222) {
                  uint64_t v225 = (char *)(v678 + 8 * v679);
                }
              }
              else
              {
                uint64_t v230 = 0;
                int v231 = 1;
                while (v229 != v222)
                {
                  if (v230) {
                    BOOL v232 = 0;
                  }
                  else {
                    BOOL v232 = v229 == -2;
                  }
                  if (v232) {
                    uint64_t v230 = v225;
                  }
                  unsigned int v233 = v228 + v231++;
                  unsigned int v228 = v233 & v227;
                  uint64_t v225 = (char *)(v678 + 8 * (v233 & v227));
                  uint64_t v229 = *(void *)v225;
                  if (*(void *)v225 == -1) {
                    goto LABEL_393;
                  }
                }
                unsigned int v224 = HIDWORD(v679);
              }
            }
            if ((void *)v678 == v223) {
              unsigned int v234 = v224;
            }
            else {
              unsigned int v234 = v679;
            }
            if (v225 != (char *)(v678 + 8 * v234))
            {
              *(void *)v749 = 0;
              char v235 = sub_1CC00C33C((uint64_t)&v699, v222, v749);
              int v236 = *(void **)v749;
              BOOL v237 = v700;
              if (v699)
              {
                BOOL v237 = &v700;
                uint64_t v238 = 4;
              }
              else
              {
                uint64_t v238 = v701;
              }
              BOOL v239 = &v237[2 * v238];
              if ((v235 & 1) == 0) {
                int v236 = v239;
              }
              if (v239 == v236)
              {
                int v258 = 0;
                uint64_t v248 = v635;
                unint64_t v249 = v624;
                goto LABEL_451;
              }
              uint64_t v240 = v236[1];
              if (v221)
              {
                *(void *)v749 = &v749[16];
                *(void *)&v749[8] = 0x800000000;
                sub_1CC4DD420((uint64_t)v760, v240, (uint64_t)v749);
                if (v771)
                {
                  sub_1CD590B5C((uint64_t)&v760[8]);
                  LODWORD(v771) = 0;
                  long long v769 = 0u;
                  long long v770 = 0u;
                  long long v767 = 0u;
                  long long v768 = 0u;
                  long long v765 = 0u;
                  long long v766 = 0u;
                  long long v763 = 0u;
                  long long v764 = 0u;
                  long long v761 = 0u;
                  long long v762 = 0u;
                  memset(&v760[8], 0, 32);
                }
                DWORD1(v771) = 0;
                uint64_t v241 = *(unint64_t **)v749;
                if (*(_DWORD *)&v749[8])
                {
                  uint64_t v242 = *(void *)v749 + 16 * *(unsigned int *)&v749[8];
                  do
                  {
                    unint64_t v243 = *v241;
                    unint64_t v244 = v241[1];
                    v241 += 2;
                    sub_1CC4DA4D0((uint64_t)&v760[8], v243, v244);
                  }
                  while (v241 != (unint64_t *)v242);
                  uint64_t v241 = *(unint64_t **)v749;
                }
                if (v241 != (unint64_t *)&v749[16]) {
                  free(v241);
                }
              }
              else
              {
                sub_1CC4DCDD0((uint64_t)v760, v240);
              }
              ++v221;
            }
            ++v219;
          }
          while (v219 != v220);
        }
        *(void *)v749 = v623;
        *(void *)&long long v755 = 0;
        *((void *)&v755 + 1) = v623;
        memset(&v749[8], 0, 64);
        long long v750 = 0u;
        memset(v751, 0, sizeof(v751));
        long long v752 = 0u;
        long long v753 = 0u;
        memset(v754, 0, sizeof(v754));
        uint64_t v245 = v656;
        if (v657 == v656)
        {
          int v246 = HIDWORD(v658);
          uint64_t v247 = &v657[8 * HIDWORD(v658)];
          uint64_t v248 = v635;
          unint64_t v249 = v624;
          if (HIDWORD(v658))
          {
            uint64_t v250 = 0;
            while (*(llvm::MachineBasicBlock **)&v657[v250] != v624)
            {
              v250 += 8;
              if (8 * HIDWORD(v658) == v250) {
                goto LABEL_425;
              }
            }
            uint64_t v247 = &v657[v250];
          }
LABEL_425:
          uint64_t v245 = v657;
        }
        else
        {
          unint64_t v249 = v624;
          int v251 = v658 - 1;
          unsigned int v252 = (v658 - 1) & ((v624 >> 4) ^ (v624 >> 9));
          uint64_t v247 = &v657[8 * v252];
          uint64_t v253 = *(llvm::MachineBasicBlock **)v247;
          uint64_t v248 = v635;
          uint64_t v254 = 0;
          if (*(void *)v247 == -1)
          {
LABEL_417:
            if (v254) {
              uint64_t v247 = v254;
            }
            int v246 = HIDWORD(v658);
            if (*(llvm::MachineBasicBlock **)v247 != v624) {
              uint64_t v247 = &v657[8 * v658];
            }
          }
          else
          {
            int v255 = 1;
            while (v253 != v624)
            {
              if (v254) {
                BOOL v256 = 0;
              }
              else {
                BOOL v256 = v253 == (llvm::MachineBasicBlock *)-2;
              }
              if (v256) {
                uint64_t v254 = v247;
              }
              unsigned int v257 = v252 + v255++;
              unsigned int v252 = v257 & v251;
              uint64_t v247 = &v657[8 * (v257 & v251)];
              uint64_t v253 = *(llvm::MachineBasicBlock **)v247;
              if (*(void *)v247 == -1) {
                goto LABEL_417;
              }
            }
            int v246 = HIDWORD(v658);
          }
        }
        if (v657 == v245) {
          int v259 = v246;
        }
        else {
          int v259 = v658;
        }
        if (v247 == &v657[8 * v259])
        {
          v744.i64[0] = (uint64_t)&v760[8];
          v744.i64[1] = (uint64_t)&v745.i64[1];
          v745.i64[0] = 0x400000000;
          sub_1CC4DD2C4(&v744);
          sub_1CC4DDB40((uint64_t)v737, (uint64_t)&v744);
          if ((unint64_t *)v744.i64[1] != &v745.u64[1]) {
            free((void *)v744.i64[1]);
          }
          uint64_t v260 = 0;
          v744.i64[0] = 0;
          v744.i64[1] = (uint64_t)&v745.i64[1];
          v745.i64[0] = 0x400000000;
          int v261 = -1;
          LODWORD(v747) = -1;
          *((void *)&v747 + 1) = 0;
          uint64_t v748 = 0;
          while (1)
          {
            BOOL v262 = *(_DWORD *)v739 == v261 && *(void *)&v739[8] == v260;
            if (v262 && *(void *)&v739[16] == v748) {
              break;
            }
            unint64_t v263 = *(void *)&v739[8] + *(unsigned int *)v739;
            uint64_t v264 = sub_1CC4D8054((uint64_t)&v721, __ROR8__(v263, 32));
            if (!llvm::LexicalScopes::dominates(v45, *(const llvm::DILocation **)(*(void *)(v264 + 48) + 56), v249)) {
              sub_1CC4DA4D0((uint64_t)&v749[8], v263, v263);
            }
            sub_1CC4DCFA4((uint64_t)v737);
            int v261 = v747;
            uint64_t v260 = *((void *)&v747 + 1);
          }
          if ((unint64_t *)v744.i64[1] != &v745.u64[1]) {
            free((void *)v744.i64[1]);
          }
          if (*(unsigned char **)&v737[8] != &v737[24]) {
            free(*(void **)&v737[8]);
          }
        }
        sub_1CC4DCFF4((uint64_t)v760, (uint64_t)v749);
        uint64_t v265 = sub_1CC4D7EF0(v248, (uint64_t)v249, &v696);
        BOOL v266 = sub_1CC4DDC64(v265, (uint64_t)v760);
        if (!v266) {
          sub_1CC4DCDD0(v265, (uint64_t)v760);
        }
        if (v755) {
          sub_1CD590B5C((uint64_t)&v749[8]);
        }
        int v258 = !v266;
LABEL_451:
        if (v771) {
          sub_1CD590B5C((uint64_t)&v760[8]);
        }
        uint64_t v267 = v678;
        uint64_t v268 = HIDWORD(v679);
        if ((uint64_t *)v678 == v677)
        {
          if (HIDWORD(v679))
          {
            int v269 = 0;
            uint64_t v270 = 8 * HIDWORD(v679);
            int v271 = (llvm::MachineBasicBlock **)v678;
            while (*v271 != v249)
            {
              if (*v271 == (llvm::MachineBasicBlock *)-2) {
                int v269 = v271;
              }
              ++v271;
              v270 -= 8;
              if (!v270)
              {
                if (!v269) {
                  goto LABEL_461;
                }
                *int v269 = v249;
                --v680;
                goto LABEL_485;
              }
            }
            goto LABEL_1062;
          }
LABEL_461:
          unsigned int v272 = v679;
          if (HIDWORD(v679) < v679)
          {
            ++HIDWORD(v679);
            *(void *)(v678 + 8 * v268) = v249;
LABEL_485:
            int v282 = 1;
            goto LABEL_486;
          }
        }
        else
        {
          unsigned int v272 = v679;
        }
        if (3 * v272 <= 4 * (HIDWORD(v679) - v680))
        {
          if (v272 >= 0x40) {
            v272 *= 2;
          }
          else {
            unsigned int v272 = 128;
          }
        }
        else if (v272 - HIDWORD(v679) >= v272 >> 3)
        {
          goto LABEL_466;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v677, v272);
        unsigned int v272 = v679;
        uint64_t v267 = v678;
LABEL_466:
        unsigned int v273 = v272 - 1;
        unsigned int v274 = (v272 - 1) & ((v249 >> 4) ^ (v249 >> 9));
        uint64_t v275 = (llvm::MachineBasicBlock **)(v267 + 8 * v274);
        unint64_t v276 = *v275;
        if (*v275 == (llvm::MachineBasicBlock *)-1)
        {
          uint64_t v277 = 0;
LABEL_478:
          if (v277) {
            unsigned int v281 = v277;
          }
          else {
            unsigned int v281 = v275;
          }
          if (*v281 != v249)
          {
            if (*v281 == (llvm::MachineBasicBlock *)-2) {
              --v680;
            }
            else {
              ++HIDWORD(v679);
            }
            *unsigned int v281 = v249;
            goto LABEL_485;
          }
        }
        else
        {
          uint64_t v277 = 0;
          int v278 = 1;
          while (v276 != v249)
          {
            if (v277) {
              BOOL v279 = 0;
            }
            else {
              BOOL v279 = v276 == (llvm::MachineBasicBlock *)-2;
            }
            if (v279) {
              uint64_t v277 = v275;
            }
            unsigned int v280 = v274 + v278++;
            unsigned int v274 = v280 & v273;
            uint64_t v275 = (llvm::MachineBasicBlock **)(v267 + 8 * (v280 & v273));
            unint64_t v276 = *v275;
            if (*v275 == (llvm::MachineBasicBlock *)-1) {
              goto LABEL_478;
            }
          }
        }
LABEL_1062:
        int v282 = 0;
LABEL_486:
        if (v282 | v258)
        {
          uint64_t v283 = sub_1CC4D7EF0(v248, (uint64_t)v249, &v696);
          *(void *)v760 = &v760[16];
          *(void *)&v760[8] = 0x2000000000;
          uint64_t v284 = (unsigned int *)&v768;
          long long v768 = 0uLL;
          *((void *)&v767 + 1) = &v768;
          *(void *)v749 = &v749[16];
          *(void *)&v749[8] = 0x2000000000;
          v754[0] = 0uLL;
          *((void *)&v753 + 1) = v754;
          *(_DWORD *)v737 = 0;
          sub_1CC34E98C((uint64_t)v749, (unsigned int *)v737);
          sub_1CC4DE004((uint64_t)v760, (uint64_t)v749, v283, (uint64_t)&v721);
          uint64_t v285 = *((void *)&v768 + 1);
          if (*((void *)&v768 + 1)) {
            int v286 = (unsigned int *)*((void *)&v767 + 1);
          }
          else {
            int v286 = *(unsigned int **)v760;
          }
          if (!*((void *)&v768 + 1)) {
            uint64_t v284 = (unsigned int *)(*(void *)v760 + 4 * *(unsigned int *)&v760[8]);
          }
          if (v286 != v284)
          {
            do
            {
              uint64_t v287 = v286 + 7;
              if (!v285) {
                uint64_t v287 = v286;
              }
              int v288 = (long long *)sub_1CC4D8054((uint64_t)&v721, (unint64_t)*v287 << 32);
              sub_1CC4DE3D4(v737, (uint64_t)&v721, (uint64_t)v288);
              sub_1CC4D9624(&v744, (uint64_t)v737);
              sub_1CC4D92F8((uint64_t)&v702, (uint64_t)&v744, v288);
              if ((int8x16_t *)v744.i64[0] != &v745) {
                free((void *)v744.i64[0]);
              }
              if (*(unsigned char **)v737 != &v737[16]) {
                free(*(void **)v737);
              }
              if (v285)
              {
                BOOL v289 = (unsigned int *)*((void *)v286 + 1);
                if (v289)
                {
                  do
                  {
                    __int16 v290 = v289;
                    BOOL v289 = *(unsigned int **)v289;
                  }
                  while (v289);
                }
                else
                {
                  do
                  {
                    __int16 v290 = (unsigned int *)*((void *)v286 + 2);
                    BOOL v23 = *(void *)v290 == (void)v286;
                    int v286 = v290;
                  }
                  while (!v23);
                }
              }
              else
              {
                __int16 v290 = v286 + 1;
              }
              int v286 = v290;
            }
            while (v290 != v284);
          }
          sub_1CB833A08((uint64_t)&v753 + 8, *(void **)&v754[0]);
          if (*(unsigned char **)v749 != &v749[16]) {
            free(*(void **)v749);
          }
          sub_1CB833A08((uint64_t)&v767 + 8, (void *)v768);
          uint64_t v291 = v635;
          if (*(unsigned char **)v760 != &v760[16]) {
            free(*(void **)v760);
          }
          *(void *)(v635 + 424) = 0;
          if (v664)
          {
            if (v665 > 4 * v664.i32[0] && v665 >= 0x41)
            {
              sub_1CBC04D20(&v663);
            }
            else
            {
              if (v665)
              {
                v530 = v663;
                uint64_t v531 = 16 * v665;
                do
                {
                  _DWORD *v530 = -1;
                  v530 += 4;
                  v531 -= 16;
                }
                while (v531);
              }
              int32x2_t v664 = 0;
            }
          }
          for (muint64_t m = *((void *)v624 + 7);
                (llvm::MachineBasicBlock *)mm != (llvm::MachineBasicBlock *)((char *)v624 + 48);
                muint64_t m = *(void *)(mm + 8))
          {
            int v293 = **(unsigned __int16 **)(mm + 16);
            if ((v293 - 13) >= 5)
            {
              *(void *)(v291 + 424) = mm;
            }
            else if ((unsigned __int16)(v293 - 13) <= 1u)
            {
              BOOL v23 = v293 == 14;
              uint64_t v294 = v293 != 14;
              uint64_t v295 = 96;
              if (v23) {
                uint64_t v295 = 32;
              }
              uint64_t v296 = *(void *)(mm + 56);
              if (*(_DWORD *)(v296 + 8) == 2) {
                uint64_t v297 = *(void *)(v296 - 8);
              }
              else {
                uint64_t v297 = 0;
              }
              uint64_t v373 = *(void *)(mm + 32);
              uint64_t v374 = *(void *)(v373 + (v294 << 6) + 16);
              uint64_t v375 = *(void *)(v373 + v295 + 16);
              v744.i64[0] = v374;
              if (v375)
              {
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v375 + 24), *(uint64_t **)(v375 + 32), (int8x16_t *)&v744.u64[1]);
              }
              else
              {
                v744.i8[8] = 0;
                v745.i8[8] = 0;
              }
              uint64_t v746 = v297;
              int8x16_t v727 = v744;
              int8x16_t v728 = v745;
              uint64_t v729 = v297;
              sub_1CC4D89BC((uint64_t)v733, (uint64_t)&v702, v727.i64);
              if (*(_WORD *)(v374 + 32)) {
                BOOL v382 = v734 == 0;
              }
              else {
                BOOL v382 = 1;
              }
              if (!v382)
              {
                uint64_t v383 = sub_1CC4D8054((uint64_t)&v721, *(void *)(*(void *)v733 + 8 * *(unsigned int *)&v733[8] - 8));
                if (*(void *)(v383 + 48) != mm)
                {
                  uint64_t v384 = *(void *)(mm + 32);
                  if (!*(unsigned char *)(v384 + ((unint64_t)(**(_WORD **)(mm + 16) == 14) << 6)))
                  {
                    uint64_t v385 = v383;
                    LODWORD(v671[0]) = *(_DWORD *)(v384 + ((unint64_t)(**(_WORD **)(mm + 16) == 14) << 6) + 4);
                    if (LODWORD(v671[0]))
                    {
                      unsigned int v386 = sub_1CC3DEC94((uint64_t *)&v663, v671);
                      if (&v663[4 * v665] != v386)
                      {
                        unint64_t v387 = *((void *)sub_1CC3DEC94((uint64_t *)&v663, v671) + 1);
                        if (v387)
                        {
                          int v388 = 1;
                          goto LABEL_915;
                        }
                      }
                    }
                    if (*(void *)(v635 + 424)
                      || *(void *)(*(void *)(*(void *)(mm + 24) + 32) + 328) != *(void *)(mm + 24))
                    {
                      int v388 = 0;
                      unint64_t v387 = 0;
LABEL_915:
                      uint64_t v479 = 96;
                      if (**(_WORD **)(mm + 16) == 14) {
                        uint64_t v479 = 32;
                      }
                      if (v388
                        && ((*(void *)(*(void *)(*(void *)(mm + 32) + v479 + 16) + 32)
                           - *(void *)(*(void *)(*(void *)(mm + 32) + v479 + 16) + 24)) & 0x7FFFFFFF8) == 0)
                      {
                        if (**(_WORD **)(v387 + 16) == 19)
                        {
                          uint64_t v480 = *(void *)(v387 + 32);
                          uint64_t v481 = v480 + 32;
                          *(void *)v726 = v480;
                          *(void *)&v726[8] = v480 + 32;
                          v726[16] = 1;
LABEL_923:
                          if (LODWORD(v671[0]) == *(_DWORD *)(v480 + 4))
                          {
                            sub_1CC4DECA4((uint64_t)v760, (uint64_t)&v703, 0x4000000100000000uLL, 0x4000000200000000uLL);
                            *(void *)v749 = *(void *)v760;
                            *(void *)&v749[8] = &v749[24];
                            *(void *)&v749[16] = 0x400000000;
                            if (*(_DWORD *)&v760[16]) {
                              sub_1CC4DC664((uint64_t)&v749[8], (uint64_t)&v760[8]);
                            }
                            v751[0] = v764;
                            *(void *)v737 = *((void *)&v765 + 1);
                            *(void *)&v751[1] = v765;
                            *(void *)&v737[8] = &v737[24];
                            *(void *)&v737[16] = 0x400000000;
                            if (DWORD2(v766)) {
                              sub_1CC4DC664((uint64_t)&v737[8], (uint64_t)&v766);
                            }
                            *(_OWORD *)v739 = v771;
                            *(void *)&v739[16] = v772;
                            while (1)
                            {
                              BOOL v482 = LODWORD(v751[0]) == *(_DWORD *)v739
                                  && *((void *)&v751[0] + 1) == *(void *)&v739[8];
                              if (v482 && *(void *)&v751[1] == *(void *)&v739[16]) {
                                break;
                              }
                              uint64_t v483 = sub_1CC4D8054((uint64_t)&v721, __ROR8__(*((void *)&v751[0] + 1) + LODWORD(v751[0]), 32));
                              if (*(_DWORD *)(v483 + 56) == 3)
                              {
                                uint64_t v484 = v483;
                                if (sub_1CC4DEFC4(*(void *)(v483 + 64), *(_DWORD *)(v483 + 72), v671[0])
                                  && *(_DWORD *)(*(void *)(*(void *)(v484 + 48) + 32)
                                               + ((unint64_t)(**(_WORD **)(*(void *)(v484 + 48) + 16) == 14) << 6)
                                               + 4) == *(_DWORD *)(v481 + 4))
                                {
                                  if (*(unsigned char **)&v737[8] != &v737[24]) {
                                    free(*(void **)&v737[8]);
                                  }
                                  if (*(unsigned char **)&v749[8] != &v749[24]) {
                                    free(*(void **)&v749[8]);
                                  }
                                  if ((long long *)v766 != &v767) {
                                    free((void *)v766);
                                  }
                                  if (*(unsigned char **)&v760[8] != &v760[24]) {
                                    free(*(void **)&v760[8]);
                                  }
                                  goto LABEL_961;
                                }
                              }
                              sub_1CC4DCFA4((uint64_t)v749);
                            }
                            if (*(unsigned char **)&v737[8] != &v737[24]) {
                              free(*(void **)&v737[8]);
                            }
                            if (*(unsigned char **)&v749[8] != &v749[24]) {
                              free(*(void **)&v749[8]);
                            }
                            if ((long long *)v766 != &v767) {
                              free((void *)v766);
                            }
                            if (*(unsigned char **)&v760[8] != &v760[24]) {
                              free(*(void **)&v760[8]);
                            }
                          }
                        }
                        else
                        {
                          (*(void (**)(unsigned char *__return_ptr))(**(void **)(v635 + 16) + 416))(v726);
                          if (v726[16])
                          {
                            uint64_t v481 = *(void *)&v726[8];
                            uint64_t v480 = *(void *)v726;
                            goto LABEL_923;
                          }
                        }
                      }
                      if (v387)
                      {
                        if (v668)
                        {
                          unint64_t v485 = sub_1CC4DF050((uint64_t)&v666, v387);
                          if (v485 != v486)
                          {
                            v487 = v485;
                            unsigned int v488 = v486;
                            while (1)
                            {
                              uint64_t v489 = sub_1CC4D8054((uint64_t)&v721, v487[5]);
                              uint64_t v490 = *(void *)(v385 + 64);
                              uint64_t v491 = *(void *)(v489 + 64);
                              if (sub_1CC2E9944(v385, v489)
                                && *(void *)(v490 + 8) == *(void *)(v491 + 8)
                                && *(void *)(v385 + 40) == *(void *)(v489 + 40))
                              {
                                break;
                              }
                              uint64_t v492 = (void *)v487[1];
                              if (v492)
                              {
                                do
                                {
                                  v493 = v492;
                                  uint64_t v492 = (void *)*v492;
                                }
                                while (v492);
                              }
                              else
                              {
                                do
                                {
                                  v493 = (void *)v487[2];
                                  BOOL v23 = *v493 == (void)v487;
                                  v487 = v493;
                                }
                                while (!v23);
                              }
                              v487 = v493;
                              if (v493 == v488) {
                                goto LABEL_960;
                              }
                            }
                            sub_1CC4DEA00((uint64_t)&v702, v489);
                            unsigned int v502 = sub_1CC4DF050((uint64_t)&v666, v387);
                            if (v502 != v503)
                            {
                              unsigned int v504 = v502;
                              unsigned int v505 = (uint64_t **)v503;
                              do
                              {
                                v506 = (uint64_t *)v504[1];
                                v507 = v504;
                                if (v506)
                                {
                                  do
                                  {
                                    uint64_t v508 = (uint64_t **)v506;
                                    v506 = (uint64_t *)*v506;
                                  }
                                  while (v506);
                                }
                                else
                                {
                                  do
                                  {
                                    uint64_t v508 = (uint64_t **)v507[2];
                                    BOOL v23 = *v508 == v507;
                                    v507 = (uint64_t *)v508;
                                  }
                                  while (!v23);
                                }
                                if (v666 == (uint64_t **)v504) {
                                  v666 = v508;
                                }
                                --v668;
                                sub_1CB91F7C8(v667, v504);
                                operator delete(v504);
                                unsigned int v504 = (uint64_t *)v508;
                              }
                              while (v508 != v505);
                            }
                          }
                        }
                      }
LABEL_960:
                      sub_1CC4DEA00((uint64_t)&v702, v385);
                    }
LABEL_961:
                    uint64_t v291 = v635;
                  }
                }
              }
              if (**(_WORD **)(mm + 16) == 14) {
                uint64_t v494 = *(unsigned int *)(mm + 40);
              }
              else {
                uint64_t v494 = 1;
              }
              if (2 * (**(_WORD **)(mm + 16) == 14) == v494)
              {
LABEL_975:
                sub_1CC4D9910((uint64_t)v760, mm);
                sub_1CC4DEA00((uint64_t)&v702, (uint64_t)v760);
                sub_1CC4D8A38(v749, &v721, (uint64_t)v760);
                sub_1CC4D9624(&v730, (uint64_t)v749);
                sub_1CC4D92F8((uint64_t)&v702, (uint64_t)&v730, (long long *)v760);
                if (v730 != v732) {
                  free(v730);
                }
                if (*(unsigned char **)v749 != &v749[16]) {
                  free(*(void **)v749);
                }
              }
              else
              {
                uint64_t v495 = *(void *)(mm + 32);
                unsigned int v496 = (unsigned __int8 *)(v495 + 32 * v494);
                unsigned int v497 = (unsigned __int8 *)(v495 + ((unint64_t)(**(_WORD **)(mm + 16) == 14) << 6));
                while (1)
                {
                  int v498 = *v497;
                  BOOL v499 = *((_DWORD *)v497 + 1) && v498 == 0;
                  if (!v499 && (v498 - 1) >= 3) {
                    break;
                  }
                  v497 += 32;
                  if (v497 == v496) {
                    goto LABEL_975;
                  }
                }
                unint64_t v501 = *(void *)(mm + 48);
                if (v501 >= 8 && (v501 & 7) == 0) {
                  *(void *)(mm + 48) = v501 & 0xFFFFFFFFFFFFFFF8;
                }
                sub_1CC4D9910((uint64_t)v760, mm);
                sub_1CC4DEA00((uint64_t)&v702, (uint64_t)v760);
              }
              if (v773 != v774) {
                free(v773);
              }
              if (*((long long **)&v762 + 1) != (long long *)((char *)&v763 + 8)) {
                free(*((void **)&v762 + 1));
              }
              if (v734 && *(unsigned char **)v733 != &v733[16]) {
                free(*(void **)v733);
              }
            }
            uint64_t v298 = *(void *)(mm + 16);
            if ((*(unsigned char *)(v298 + 8) & 0x10) != 0) {
              goto LABEL_716;
            }
            uint64_t v299 = *(void *)(*(void *)(*(void *)(mm + 24) + 32) + 16);
            uint64_t v300 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v299 + 120))(v299) + 88);
            *(void *)v749 = &v749[16];
            *(void *)&v749[8] = 0x2000000000;
            v754[0] = 0uLL;
            *((void *)&v753 + 1) = v754;
            *(void *)v733 = &v733[16];
            *(void *)&v733[8] = 0x400000000;
            uint64_t v301 = *(unsigned int *)(mm + 40);
            if (!v301) {
              goto LABEL_647;
            }
            uint64_t v302 = *(void *)(mm + 32);
            uint64_t v303 = v302 + 32 * v301;
            do
            {
              if ((*(_DWORD *)v302 & 0x10000FF) != 0x1000000 || (unsigned int v304 = *(_DWORD *)(v302 + 4), v304 - 1 > 0x3FFFFFFE))
              {
LABEL_532:
                if (*(_DWORD *)v302 == 12)
                {
                  if (*(unsigned int *)&v733[8] >= (unint64_t)*(unsigned int *)&v733[12]) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)v733 + 8 * *(unsigned int *)&v733[8]) = *(void *)(v302 + 16);
                  ++*(_DWORD *)&v733[8];
                }
                goto LABEL_576;
              }
              uint64_t v305 = *(void *)(*(void *)(mm + 16) + 8);
              if ((*(_WORD *)(mm + 44) & 0xC) != 0 && (*(_WORD *)(mm + 44) & 4) == 0)
              {
                unint64_t v307 = mm;
                if ((v305 & 0x80) == 0)
                {
                  while ((*(_WORD *)(v307 + 44) & 8) != 0)
                  {
                    unint64_t v307 = *(void *)(v307 + 8);
                    if ((*(unsigned char *)(*(void *)(v307 + 16) + 8) & 0x80) != 0) {
                      goto LABEL_531;
                    }
                  }
                  goto LABEL_539;
                }
              }
              else if ((v305 & 0x80) == 0)
              {
                goto LABEL_539;
              }
LABEL_531:
              if (v304 == v300) {
                goto LABEL_532;
              }
LABEL_539:
              uint64_t v308 = v300;
              uint64_t v309 = *(void *)(v291 + 8);
              if (v309) {
                int v310 = (void *)(v309 + 8);
              }
              else {
                int v310 = 0;
              }
              unint64_t v311 = ((unint64_t)*(unsigned int *)(*v310 + 24 * v304 + 16) >> 3) & 0x1FFFFFFE;
              uint64_t v313 = v310[5];
              uint64_t v312 = v310[6];
              uint64_t v314 = (_WORD *)(v312 + v311 + 2);
              int v315 = *(unsigned __int16 *)(v312 + v311) + (*(_DWORD *)(*v310 + 24 * v304 + 16) & 0xF) * v304;
              do
              {
                uint64_t v316 = 4 * (unsigned __int16)v315;
                unsigned int v317 = *(unsigned __int16 *)(v313 + v316);
                if (*(_WORD *)(v313 + v316)) {
                  BOOL v318 = v312 == 0;
                }
                else {
                  BOOL v318 = 1;
                }
                if (!v318)
                {
                  unsigned int v320 = *(unsigned __int16 *)(v313 + 4 * (unsigned __int16)v315 + 2) << 16;
                  for (nint n = (unsigned int *)(*v310
                                            + 24 * *(unsigned __int16 *)(v313 + 4 * (unsigned __int16)v315)
                                            + 8); ; nint n = (unsigned int *)(*v310 + 24 * v317 + 8))
                  {
                    uint64_t v322 = (unsigned __int16 *)(v312 + 2 * *nn);
                    do
                    {
                      *(_DWORD *)v760 = (unsigned __int16)v317;
                      sub_1CC34E98C((uint64_t)v749, (unsigned int *)v760);
                      int v323 = *v322++;
                      v317 += v323;
                    }
                    while (v323);
                    unsigned int v317 = HIWORD(v320);
                    if (HIWORD(v320))
                    {
                      v320 >>= 16;
                    }
                    else
                    {
                      if (!*v314)
                      {
                        unsigned int v304 = *(_DWORD *)(v302 + 4);
                        goto LABEL_558;
                      }
                      v315 += (unsigned __int16)*v314++;
                      int v324 = (unsigned __int16 *)(v310[5] + 4 * (unsigned __int16)v315);
                      unsigned int v317 = *v324;
                      unsigned int v320 = v324[1] << 16;
                    }
                    uint64_t v312 = v310[6];
                  }
                }
                int v319 = (unsigned __int16)*v314++;
                v315 += v319;
              }
              while (v319);
LABEL_558:
              unsigned int v325 = v665;
              uint64_t v291 = v635;
              uint64_t v300 = v308;
              if (v665)
              {
                uint64_t v326 = (uint64_t)v663;
                LODWORD(v327) = (v665 - 1) & (37 * v304);
                uint64_t v328 = &v663[4 * v327];
                int v329 = *v328;
                if (v304 == *v328)
                {
LABEL_560:
                  *uint64_t v328 = -2;
                  int32x2_t v664 = vadd_s32(v664, (int32x2_t)0x1FFFFFFFFLL);
                  unsigned int v325 = v665;
                  unsigned int v304 = *(_DWORD *)(v302 + 4);
                }
                else
                {
                  int v340 = 1;
                  while (v329 != -1)
                  {
                    int v341 = v327 + v340++;
                    uint64_t v327 = v341 & (v665 - 1);
                    int v329 = v663[4 * v327];
                    if (v304 == v329)
                    {
                      uint64_t v328 = &v663[4 * v327];
                      goto LABEL_560;
                    }
                  }
                }
                *(_DWORD *)v760 = v304;
                *(void *)&v760[8] = mm;
                if (v325)
                {
                  unsigned int v330 = v325 - 1;
                  unsigned int v331 = v330 & (37 * v304);
                  uint64_t v332 = (_DWORD *)(v326 + 16 * v331);
                  int v333 = *v332;
                  if (v304 == *v332) {
                    goto LABEL_576;
                  }
                  char v334 = 0;
                  int v335 = 1;
                  while (v333 != -1)
                  {
                    if (v334) {
                      BOOL v336 = 0;
                    }
                    else {
                      BOOL v336 = v333 == -2;
                    }
                    if (v336) {
                      char v334 = v332;
                    }
                    unsigned int v337 = v331 + v335++;
                    unsigned int v331 = v337 & v330;
                    uint64_t v332 = (_DWORD *)(v326 + 16 * v331);
                    int v333 = *v332;
                    if (v304 == *v332) {
                      goto LABEL_576;
                    }
                  }
                  if (v334) {
                    uint64_t v338 = v334;
                  }
                  else {
                    uint64_t v338 = v332;
                  }
                }
                else
                {
                  uint64_t v338 = 0;
                }
              }
              else
              {
                uint64_t v338 = 0;
                *(_DWORD *)v760 = v304;
                *(void *)&v760[8] = mm;
              }
              unsigned int v339 = sub_1CC3E0FEC((uint64_t)&v663, (uint64_t)v760, (int *)v760, v338);
              *unsigned int v339 = *(_DWORD *)v760;
              *((void *)v339 + 1) = *(void *)&v760[8];
LABEL_576:
              v302 += 32;
            }
            while (v302 != v303);
            if (*(_DWORD *)&v733[8])
            {
              *(void *)v760 = &v760[16];
              *(void *)&v760[8] = 0x2000000000;
              sub_1CC4DE470((uint64_t)v737, (uint64_t)&v703, 0x100000000uLL);
              sub_1CC4DE470((uint64_t)&v744, (uint64_t)&v703, 0x4000000000000000uLL);
              unsigned int v342 = *(_DWORD *)v739;
              while (1)
              {
                BOOL v343 = v342 == v747 && *(void *)&v739[8] == *((void *)&v747 + 1);
                if (v343 && *(void *)&v739[16] == v748) {
                  break;
                }
                if (*(unsigned int *)&v760[8] >= (unint64_t)*(unsigned int *)&v760[12]) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v344 = *(void *)&v739[8] + v342;
                *(_DWORD *)(*(void *)v760 + 4 * *(unsigned int *)&v760[8]) = HIDWORD(v344);
                ++*(_DWORD *)&v760[8];
                unsigned int v342 = -1;
                if (*(_DWORD *)v739 != -1)
                {
                  unint64_t v345 = (v344 & 0xFFFFFFFF00000000) + 0x100000000;
                  if (*(void *)&v739[16] < v345)
                  {
                    while (1)
                    {
                      sub_1CC4DD1D8((uint64_t)v737);
                      if (!*(_DWORD *)&v737[16]
                        || *(_DWORD *)(*(void *)&v737[8] + 12) >= *(_DWORD *)(*(void *)&v737[8] + 8))
                      {
                        break;
                      }
                      unsigned int v342 = 0;
                      *(_DWORD *)v739 = 0;
                      unsigned int v347 = (unint64_t *)(*(void *)(*(void *)&v737[8]
                                                            + 16 * *(unsigned int *)&v737[16]
                                                            - 16)
                                                + 16
                                                * *(unsigned int *)(*(void *)&v737[8]
                                                                  + 16 * *(unsigned int *)&v737[16]
                                                                  - 4));
                      unint64_t v346 = *v347;
                      *(void *)&v739[8] = *v347;
                      *(void *)&v739[16] = v347[1];
                      if (*(void *)&v739[16] >= v345) {
                        goto LABEL_597;
                      }
                    }
                    unsigned int v342 = -1;
                    *(_DWORD *)v739 = -1;
                    *(void *)&v739[8] = 0;
                    *(void *)&v739[16] = 0;
                  }
                  else
                  {
                    unint64_t v346 = *(void *)&v739[8];
                    unsigned int v342 = *(_DWORD *)v739;
LABEL_597:
                    if (v346 <= v345)
                    {
                      unsigned int v342 = -(int)v346;
                      *(_DWORD *)v739 = -(int)v346;
                    }
                  }
                }
              }
              if ((unint64_t *)v744.i64[1] != &v745.u64[1]) {
                free((void *)v744.i64[1]);
              }
              if (*(unsigned char **)&v737[8] != &v737[24]) {
                free(*(void **)&v737[8]);
              }
              unsigned int v348 = *(unsigned int **)v760;
              uint64_t v349 = *(void *)v760 + 4 * *(unsigned int *)&v760[8];
              if (*(_DWORD *)&v760[8])
              {
                while (1)
                {
                  unint64_t v350 = *v348;
                  v744.i32[0] = v350;
                  if (v350 == v300 || !*(_DWORD *)&v733[8]) {
                    goto LABEL_634;
                  }
                  int v351 = *(void **)v733;
                  unint64_t v352 = v350 >> 5;
                  int v353 = 1 << v350;
                  uint64_t v354 = 8 * *(unsigned int *)&v733[8];
                  while ((*(_DWORD *)(*v351 + 4 * v352) & v353) != 0)
                  {
                    ++v351;
                    v354 -= 8;
                    if (!v354) {
                      goto LABEL_634;
                    }
                  }
                  sub_1CC34E98C((uint64_t)v749, (unsigned int *)&v744);
                  unsigned int v355 = v665;
                  if (!v665) {
                    break;
                  }
                  uint64_t v356 = (uint64_t)v663;
                  __int32 v357 = v744.i32[0];
                  LODWORD(v358) = (37 * v744.i32[0]) & (v665 - 1);
                  uint64_t v359 = &v663[4 * v358];
                  int v360 = *v359;
                  if (v744.i32[0] == *v359)
                  {
LABEL_618:
                    *uint64_t v359 = -2;
                    int32x2_t v664 = vadd_s32(v664, (int32x2_t)0x1FFFFFFFFLL);
                    unsigned int v355 = v665;
                    __int32 v357 = v744.i32[0];
                  }
                  else
                  {
                    int v371 = 1;
                    while (v360 != -1)
                    {
                      int v372 = v358 + v371++;
                      uint64_t v358 = v372 & (v665 - 1);
                      int v360 = v663[4 * v358];
                      if (v744.i32[0] == v360)
                      {
                        uint64_t v359 = &v663[4 * v358];
                        goto LABEL_618;
                      }
                    }
                  }
                  *(_DWORD *)v737 = v357;
                  *(void *)&v737[8] = mm;
                  if (!v355)
                  {
                    uint64_t v369 = 0;
LABEL_633:
                    uint64_t v370 = sub_1CC3E0FEC((uint64_t)&v663, (uint64_t)v737, (int *)v737, v369);
                    *uint64_t v370 = *(_DWORD *)v737;
                    *((void *)v370 + 1) = *(void *)&v737[8];
                    goto LABEL_634;
                  }
                  unsigned int v361 = v355 - 1;
                  unsigned int v362 = v361 & (37 * v357);
                  uint64_t v363 = (_DWORD *)(v356 + 16 * v362);
                  int v364 = *v363;
                  if (v357 != *v363)
                  {
                    unsigned int v365 = 0;
                    int v366 = 1;
                    while (v364 != -1)
                    {
                      if (v365) {
                        BOOL v367 = 0;
                      }
                      else {
                        BOOL v367 = v364 == -2;
                      }
                      if (v367) {
                        unsigned int v365 = v363;
                      }
                      unsigned int v368 = v362 + v366++;
                      unsigned int v362 = v368 & v361;
                      uint64_t v363 = (_DWORD *)(v356 + 16 * v362);
                      int v364 = *v363;
                      if (v357 == *v363) {
                        goto LABEL_634;
                      }
                    }
                    if (v365) {
                      uint64_t v369 = v365;
                    }
                    else {
                      uint64_t v369 = v363;
                    }
                    goto LABEL_633;
                  }
LABEL_634:
                  if (++v348 == (unsigned int *)v349)
                  {
                    unsigned int v348 = *(unsigned int **)v760;
                    goto LABEL_645;
                  }
                }
                uint64_t v369 = 0;
                *(_DWORD *)v737 = v744.i32[0];
                *(void *)&v737[8] = mm;
                goto LABEL_633;
              }
LABEL_645:
              if (v348 != (unsigned int *)&v760[16]) {
                free(v348);
              }
            }
LABEL_647:
            if (*(_DWORD *)&v749[8] || *((void *)&v754[0] + 1))
            {
              *(void *)v737 = &v737[16];
              *(void *)&v737[8] = 0x2000000000;
              v741 = 0;
              uint64_t v742 = 0;
              v740 = &v741;
              sub_1CC4DE004((uint64_t)v737, (uint64_t)v749, (uint64_t)&v703, (uint64_t)&v721);
              sub_1CC4DF3D0((uint64_t *)&v702, (uint64_t)v737, (uint64_t)&v721, 0);
              uint64_t v376 = *(void *)(v291 + 32);
              if (v376)
              {
                uint64_t v377 = *(void *)(v376 + 112);
                __int16 v378 = *(_WORD *)(v377 + 1064);
                if ((v378 & 2) != 0)
                {
                  if ((v378 & 4) == 0 && *(_DWORD *)(v377 + 1116) == 3) {
                    goto LABEL_709;
                  }
LABEL_652:
                  __int16 v379 = *(_WORD *)(mm + 44);
                  uint64_t v380 = *(void *)(*(void *)(mm + 16) + 8);
                  if ((v379 & 0xC) == 0 || (v379 & 4) != 0)
                  {
                    if ((v380 & 0x200) != 0) {
                      goto LABEL_709;
                    }
                  }
                  else
                  {
                    unint64_t v381 = mm;
                    if ((v380 & 0x200) != 0) {
                      goto LABEL_709;
                    }
                    while ((*(_WORD *)(v381 + 44) & 8) != 0)
                    {
                      unint64_t v381 = *(void *)(v381 + 8);
                      if ((*(unsigned char *)(*(void *)(v381 + 16) + 9) & 2) != 0) {
                        goto LABEL_709;
                      }
                    }
                  }
                  uint64_t v389 = v742;
                  if (v742) {
                    uint64_t v390 = v740;
                  }
                  else {
                    uint64_t v390 = *(void **)v737;
                  }
                  if (v742) {
                    uint64_t v391 = &v741;
                  }
                  else {
                    uint64_t v391 = (void **)(*(void *)v737 + 4 * *(unsigned int *)&v737[8]);
                  }
                  if (v390 != v391)
                  {
                    do
                    {
                      unsigned int v392 = (unsigned int *)v390 + 7;
                      if (!v389) {
                        unsigned int v392 = (unsigned int *)v390;
                      }
                      uint64_t v393 = sub_1CC4D8054((uint64_t)&v721, (unint64_t)*v392 << 32);
                      if (*(_WORD *)(*(void *)v393 + 32))
                      {
                        int8x16_t v394 = *(int8x16_t *)(v393 + 16);
                        int8x16_t v727 = *(int8x16_t *)v393;
                        int8x16_t v728 = v394;
                        uint64_t v729 = *(void *)(v393 + 32);
                        sub_1CC4D89BC((uint64_t)&v744, (uint64_t)&v702, v727.i64);
                        if ((_BYTE)v746)
                        {
                          unint64_t v395 = (void *)sub_1CC4D8054((uint64_t)&v721, *(void *)(v744.i64[0] + 8 * v744.u32[2] - 8));
                          uint64_t v396 = v395[5];
                          uint64_t v397 = *(unsigned int *)(v395[8] + 8);
                          sub_1CC4D9910((uint64_t)v760, v395[6]);
                          LODWORD(v762) = 1;
                          *(void *)&long long v761 = v396;
                          *(void *)(*((void *)&v762 + 1) + 8) = v397;
                          sub_1CC4D8A38(&v730, &v721, (uint64_t)v760);
                          uint64_t v398 = *(void *)&v730[8 * v731 - 8];
                          unint64_t v399 = (uint64_t *)operator new(0x30uLL);
                          unint64_t v400 = v399;
                          v399[4] = mm;
                          v399[5] = v398;
                          uint64_t v401 = v667;
                          uint64_t v402 = &v667;
                          uint64_t v403 = &v667;
                          if (v667)
                          {
                            do
                            {
                              while (1)
                              {
                                uint64_t v403 = (uint64_t **)v401;
                                if (mm >= v401[4]) {
                                  break;
                                }
                                uint64_t v401 = (uint64_t *)*v401;
                                uint64_t v402 = v403;
                                if (!*v403) {
                                  goto LABEL_687;
                                }
                              }
                              uint64_t v401 = (uint64_t *)v401[1];
                            }
                            while (v401);
                            uint64_t v402 = v403 + 1;
                          }
LABEL_687:
                          uint64_t *v399 = 0;
                          v399[1] = 0;
                          v399[2] = (uint64_t)v403;
                          *uint64_t v402 = v399;
                          if (*v666)
                          {
                            v666 = (uint64_t **)*v666;
                            unint64_t v400 = *v402;
                          }
                          sub_1CB8358B8(v667, v400);
                          ++v668;
                          sub_1CC4D9624(v726, (uint64_t)&v730);
                          sub_1CC4D92F8((uint64_t)&v702, (uint64_t)v726, (long long *)v760);
                          if (*(unsigned char **)v726 != &v726[16]) {
                            free(*(void **)v726);
                          }
                          if (v730 != v732) {
                            free(v730);
                          }
                          if (v773 != v774) {
                            free(v773);
                          }
                          if (*((long long **)&v762 + 1) != (long long *)((char *)&v763 + 8)) {
                            free(*((void **)&v762 + 1));
                          }
                          if ((_BYTE)v746 && (int8x16_t *)v744.i64[0] != &v745) {
                            free((void *)v744.i64[0]);
                          }
                        }
                      }
                      if (v389)
                      {
                        uint64_t v404 = (void *)v390[1];
                        if (v404)
                        {
                          do
                          {
                            unint64_t v405 = v404;
                            uint64_t v404 = (void *)*v404;
                          }
                          while (v404);
                        }
                        else
                        {
                          do
                          {
                            unint64_t v405 = (void *)v390[2];
                            BOOL v23 = *v405 == (void)v390;
                            uint64_t v390 = v405;
                          }
                          while (!v23);
                        }
                      }
                      else
                      {
                        unint64_t v405 = (void *)((char *)v390 + 4);
                      }
                      uint64_t v390 = v405;
                    }
                    while (v405 != v391);
                  }
                }
                else if ((v378 & 4) != 0)
                {
                  goto LABEL_652;
                }
              }
LABEL_709:
              sub_1CB833A08((uint64_t)&v740, v741);
              if (*(unsigned char **)v737 != &v737[16]) {
                free(*(void **)v737);
              }
            }
            if (*(unsigned char **)v733 != &v733[16]) {
              free(*(void **)v733);
            }
            sub_1CB833A08((uint64_t)&v753 + 8, *(void **)&v754[0]);
            if (*(unsigned char **)v749 != &v749[16]) {
              free(*(void **)v749);
            }
            uint64_t v298 = *(void *)(mm + 16);
LABEL_716:
            if (*(_WORD *)v298 == 19)
            {
              unint64_t v406 = *(char **)(mm + 32);
              unint64_t v407 = v406 + 32;
              v730 = v406;
              v731 = v406 + 32;
              v732[0] = 1;
LABEL_720:
              if (v406[3])
              {
                uint64_t v408 = v407[1];
                uint64_t v409 = *((unsigned int *)v406 + 1);
                uint64_t v410 = *(void *)(v635 + 8);
                if (v410) {
                  unint64_t v411 = (uint64_t *)(v410 + 8);
                }
                else {
                  unint64_t v411 = 0;
                }
                uint64_t v412 = *v411;
                int v413 = *(_DWORD *)(*v411 + 24 * v409 + 16) & 0xF;
                unint64_t v414 = ((unint64_t)*(unsigned int *)(*v411 + 24 * v409 + 16) >> 3) & 0x1FFFFFFE;
                int v417 = v411 + 5;
                uint64_t v416 = v411[5];
                uint64_t v415 = v417[1];
                uint64_t v418 = (unsigned __int16 *)(v415 + v414);
                int v420 = *v418;
                unint64_t v419 = v418 + 1;
                int v421 = v420 + v413 * v409;
                while (1)
                {
                  uint64_t v422 = 4 * (unsigned __int16)v421;
                  unint64_t v423 = *(unsigned __int16 *)(v416 + v422);
                  if (*(_WORD *)(v416 + v422) && v415 != 0) {
                    break;
                  }
                  int v425 = (unsigned __int16)*v419++;
                  v421 += v425;
                  if (!v425) {
                    goto LABEL_790;
                  }
                }
                if (((*(void *)(*(void *)v625 + ((v423 >> 3) & 0x1FF8)) >> v423) & 1) == 0)
                {
                  int v429 = (unsigned __int16 *)(v415
                                            + 2
                                            * *(unsigned int *)(v412
                                                              + 24
                                                              * *(unsigned __int16 *)(v416 + 4
                                                                                           * (unsigned __int16)v421)
                                                              + 8));
                  unsigned int v430 = *(unsigned __int16 *)(v416 + 4 * (unsigned __int16)v421 + 2) << 16;
                  do
                  {
                    int v432 = *v429++;
                    __int16 v431 = v432;
                    if (v432)
                    {
                      LOWORD(v423) = v431 + v423;
                    }
                    else
                    {
                      unsigned int v433 = HIWORD(v430);
                      if (HIWORD(v430))
                      {
                        v430 >>= 16;
                      }
                      else
                      {
                        if (!*v419) {
                          goto LABEL_790;
                        }
                        v421 += (unsigned __int16)*v419++;
                        uint64_t v434 = (unsigned __int16 *)(v416 + 4 * (unsigned __int16)v421);
                        unsigned int v433 = *v434;
                        unsigned int v430 = v434[1] << 16;
                      }
                      LOWORD(v423) = v433;
                      int v429 = (unsigned __int16 *)(v415 + 2 * *(unsigned int *)(v412 + 24 * v433 + 8));
                    }
                  }
                  while (((*(void *)(*(void *)v625 + 8 * ((unsigned __int16)v423 >> 6)) >> v423) & 1) == 0);
                }
                if (sub_1CC4D96BC((uint64_t)v406, *(void *)(mm + 24), v410))
                {
                  sub_1CC4DECA4((uint64_t)v749, (uint64_t)&v703, 0x4000000100000000uLL, 0x4000000200000000uLL);
                  *(void *)v737 = *(void *)v749;
                  *(void *)&v737[8] = &v737[24];
                  *(void *)&v737[16] = 0x400000000;
                  if (*(_DWORD *)&v749[16]) {
                    sub_1CC4DC664((uint64_t)&v737[8], (uint64_t)&v749[8]);
                  }
                  *(_OWORD *)v739 = v751[0];
                  v744.i64[0] = *((void *)&v751[1] + 1);
                  *(void *)&v739[16] = *(void *)&v751[1];
                  v744.i64[1] = (uint64_t)&v745.i64[1];
                  v745.i64[0] = 0x400000000;
                  if (DWORD2(v752)) {
                    sub_1CC4DC664((uint64_t)&v744.i64[1], (uint64_t)&v752);
                  }
                  long long v747 = v755;
                  uint64_t v748 = v756;
                  while (1)
                  {
                    BOOL v426 = *(_DWORD *)v739 == v747 && *(void *)&v739[8] == *((void *)&v747 + 1);
                    if (v426 && *(void *)&v739[16] == v748) {
                      break;
                    }
                    uint64_t v427 = sub_1CC4D8054((uint64_t)&v721, __ROR8__(*(void *)&v739[8] + *(unsigned int *)v739, 32));
                    if (*(_DWORD *)(v427 + 56) == 2)
                    {
                      uint64_t v428 = v427;
                      if (sub_1CC4DEFC4(*(void *)(v427 + 64), *(_DWORD *)(v427 + 72), v408))
                      {
                        uint64_t v435 = *(void *)(v428 + 40);
                        sub_1CC4D9910((uint64_t)v760, *(void *)(v428 + 48));
                        LODWORD(v762) = 3;
                        *(void *)&long long v761 = v435;
                        *(void *)(*((void *)&v762 + 1) + 8) = v409;
                        sub_1CC4DEA00((uint64_t)&v702, v428);
                        sub_1CC4D8A38(v733, &v721, (uint64_t)v760);
                        sub_1CC4D9624(&v727, (uint64_t)v733);
                        sub_1CC4D92F8((uint64_t)&v702, (uint64_t)&v727, (long long *)v760);
                        if ((int8x16_t *)v727.i64[0] != &v728) {
                          free((void *)v727.i64[0]);
                        }
                        if (*(unsigned char **)v733 != &v733[16]) {
                          free(*(void **)v733);
                        }
                        if (v773 != v774) {
                          free(v773);
                        }
                        if (*((long long **)&v762 + 1) != (long long *)((char *)&v763 + 8)) {
                          free(*((void **)&v762 + 1));
                        }
                        break;
                      }
                    }
                    sub_1CC4DCFA4((uint64_t)v737);
                  }
                  if ((unint64_t *)v744.i64[1] != &v745.u64[1]) {
                    free((void *)v744.i64[1]);
                  }
                  if (*(unsigned char **)&v737[8] != &v737[24]) {
                    free(*(void **)&v737[8]);
                  }
                  if ((long long *)v752 != &v753) {
                    free((void *)v752);
                  }
                  if (*(unsigned char **)&v749[8] != &v749[24]) {
                    free(*(void **)&v749[8]);
                  }
                }
                if ((*v407 >> 26) & ~HIBYTE(*v407))
                {
                  sub_1CC4DECA4((uint64_t)v760, (uint64_t)&v703, v408 << 32, (v408 << 32) + 0x100000000);
                  *(void *)v749 = *(void *)v760;
                  *(void *)&v749[8] = &v749[24];
                  *(void *)&v749[16] = 0x400000000;
                  if (*(_DWORD *)&v760[16]) {
                    sub_1CC4DC664((uint64_t)&v749[8], (uint64_t)&v760[8]);
                  }
                  v751[0] = v764;
                  *(void *)v737 = *((void *)&v765 + 1);
                  *(void *)&v751[1] = v765;
                  *(void *)&v737[8] = &v737[24];
                  *(void *)&v737[16] = 0x400000000;
                  if (DWORD2(v766)) {
                    sub_1CC4DC664((uint64_t)&v737[8], (uint64_t)&v766);
                  }
                  *(_OWORD *)v739 = v771;
                  *(void *)&v739[16] = v772;
                  if (LODWORD(v751[0]) != v771 || *(_OWORD *)((char *)v751 + 8) != *(_OWORD *)&v739[8])
                  {
                    v744.i32[0] = 1;
                    v744.i64[1] = v408;
                    sub_1CC4DF654(v635, mm, (uint64_t)&v702, (uint64_t)&v693, (uint64_t)&v721, __ROR8__(*((void *)&v751[0] + 1) + LODWORD(v751[0]), 32), 0, (uint64_t)&v744, v409);
                  }
                  if (*(unsigned char **)&v737[8] != &v737[24]) {
                    free(*(void **)&v737[8]);
                  }
                  if (*(unsigned char **)&v749[8] != &v749[24]) {
                    free(*(void **)&v749[8]);
                  }
                  if ((long long *)v766 != &v767) {
                    free((void *)v766);
                  }
                  if (*(unsigned char **)&v760[8] != &v760[24]) {
                    free(*(void **)&v760[8]);
                  }
                }
              }
            }
            else
            {
              (*(void (**)(unsigned char **__return_ptr))(**(void **)(v291 + 16) + 416))(&v730);
              if (v732[0])
              {
                unint64_t v406 = v730;
                unint64_t v407 = v731;
                goto LABEL_720;
              }
            }
LABEL_790:
            *(void *)v737 = &v737[16];
            *(void *)&v737[8] = 0x2000000000;
            v741 = 0;
            uint64_t v742 = 0;
            v740 = &v741;
            if (sub_1CC4DFC54(v635, (llvm::MachineInstr *)mm))
            {
              sub_1CC4DFBB0((uint64_t)v760, v635, mm);
              char v436 = v760[0];
              v743[0] = *(_OWORD *)&v760[1];
              *(void *)((char *)v743 + 15) = *(void *)&v760[16];
              sub_1CC4DECA4((uint64_t)v749, (uint64_t)&v703, 0x4000000000000000uLL, 0x4000000100000000uLL);
              v744.i64[0] = *(void *)v749;
              v744.i64[1] = (uint64_t)&v745.i64[1];
              v745.i64[0] = 0x400000000;
              if (*(_DWORD *)&v749[16]) {
                sub_1CC4DC664((uint64_t)&v744.i64[1], (uint64_t)&v749[8]);
              }
              long long v747 = v751[0];
              *(void *)v733 = *((void *)&v751[1] + 1);
              uint64_t v748 = *(void *)&v751[1];
              *(void *)&v733[8] = &v733[24];
              *(void *)&v733[16] = 0x400000000;
              if (DWORD2(v752)) {
                sub_1CC4DC664((uint64_t)&v733[8], (uint64_t)&v752);
              }
              long long v735 = v755;
              uint64_t v736 = v756;
              while (1)
              {
                BOOL v437 = v747 == v735 && *((void *)&v747 + 1) == *((void *)&v735 + 1);
                if (v437 && v748 == v736) {
                  break;
                }
                int v438 = DWORD2(v747) + v747;
                uint64_t v439 = sub_1CC4D8054((uint64_t)&v721, __ROR8__(*((void *)&v747 + 1) + v747, 32));
                uint64_t v440 = v439;
                *(_DWORD *)v760 = 2;
                v760[8] = v436;
                *(_OWORD *)&v760[9] = v743[0];
                *(void *)&v760[24] = *(void *)((char *)v743 + 15);
                uint64_t v441 = *(void *)(v439 + 64);
                uint64_t v442 = *(unsigned int *)(v439 + 72);
                if (v442)
                {
                  uint64_t v443 = 32 * v442;
                  uint64_t v444 = *(void *)(v439 + 64);
                  while (!sub_1CC4D9C10(v444, (uint64_t)v760))
                  {
                    v444 += 32;
                    v443 -= 32;
                    if (!v443)
                    {
                      uint64_t v444 = v441 + 32 * v442;
                      break;
                    }
                  }
                }
                else
                {
                  uint64_t v444 = *(void *)(v439 + 64);
                }
                if (v442 != (v444 - v441) >> 5)
                {
                  *(_DWORD *)v760 = v438;
                  sub_1CB946958((uint64_t)v737, (unsigned int *)v760);
                  v726[0] = v436;
                  *(_OWORD *)&v726[1] = v743[0];
                  *(void *)&v726[16] = *(void *)((char *)v743 + 15);
                  uint64_t v445 = *(void *)(v440 + 64);
                  uint64_t v446 = (int8x16_t *)(v445
                                     + 32
                                     * sub_1CC4DFCE8(v445, *(unsigned int *)(v440 + 72), (uint64_t)v726));
                  int8x16_t v727 = *v446;
                  int8x16_t v728 = v446[1];
                  sub_1CC4DF904((uint64_t)v760, v440, (uint64_t)&v727, 0);
                  sub_1CC4D8A38(&v730, &v721, (uint64_t)v760);
                  unint64_t v447 = *(void *)&v730[8 * v731 - 8];
                  if (v694 >= (unint64_t)HIDWORD(v694)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unsigned int v448 = (unint64_t *)&v693[2 * v694];
                  *unsigned int v448 = mm;
                  v448[1] = v447;
                  LODWORD(v694) = v694 + 1;
                  if (v730 != v732) {
                    free(v730);
                  }
                  if (v773 != v774) {
                    free(v773);
                  }
                  if (*((long long **)&v762 + 1) != (long long *)((char *)&v763 + 8)) {
                    free(*((void **)&v762 + 1));
                  }
                }
                sub_1CC4DCFA4((uint64_t)&v744);
              }
              if (*(unsigned char **)&v733[8] != &v733[24]) {
                free(*(void **)&v733[8]);
              }
              if ((unint64_t *)v744.i64[1] != &v745.u64[1]) {
                free((void *)v744.i64[1]);
              }
              if ((long long *)v752 != &v753) {
                free((void *)v752);
              }
              if (*(unsigned char **)&v749[8] != &v749[24]) {
                free(*(void **)&v749[8]);
              }
              sub_1CC4DF3D0((uint64_t *)&v702, (uint64_t)v737, (uint64_t)&v721, 0x40000000u);
            }
            else
            {
              char v436 = 0;
            }
            if (sub_1CC4DFC54(v635, (llvm::MachineInstr *)mm)
              && (uint64_t v449 = *(unsigned int *)(mm + 40), v449))
            {
              BOOL v450 = *(_DWORD **)(mm + 32);
              uint64_t v451 = &v450[8 * v449];
              while (1)
              {
                if ((*v450 & 0x10000FF) == 0)
                {
                  uint64_t v452 = v450[1];
                  if ((*v450 >> 26) & ~HIBYTE(*v450)) {
                    goto LABEL_853;
                  }
                  if (v450[1])
                  {
                    uint64_t v453 = *(void *)(mm + 8);
                    if (*(void *)(mm + 24) + 48 != v453)
                    {
                      uint64_t v454 = *(unsigned int *)(v453 + 40);
                      if (v454) {
                        break;
                      }
                    }
                  }
                }
LABEL_833:
                v450 += 8;
                if (v450 == v451) {
                  goto LABEL_845;
                }
              }
              uint64_t v455 = *(void *)(v453 + 32);
              uint64_t v456 = 32 * v454;
              uint64_t v457 = (_DWORD *)(v455 + 4);
              while (1)
              {
                unsigned int v458 = *(v457 - 1);
                if ((v458 & 0x10000FF) == 0 && ((v458 >> 26) & ~HIBYTE(v458) & 1) != 0 && *v457 == v452) {
                  break;
                }
                v457 += 8;
                v456 -= 32;
                if (!v456) {
                  goto LABEL_833;
                }
              }
LABEL_853:
              int v462 = 1;
              int v463 = 1;
LABEL_857:
              int v626 = v463;
              *(void *)v749 = 0;
              *(void *)&v749[8] = &v749[24];
              *(void *)&v749[16] = 0x400000000;
              LODWORD(v751[0]) = -1;
              *((void *)&v751[0] + 1) = 0;
              *(void *)&v751[1] = 0;
              v744.i64[0] = 0;
              v744.i64[1] = (uint64_t)&v745.i64[1];
              v745.i64[0] = 0x400000000;
              LODWORD(v747) = -1;
              *((void *)&v747 + 1) = 0;
              uint64_t v748 = 0;
              sub_1CC4DEEF4((uint64_t)v760, (uint64_t)v749, (uint64_t)&v744);
              if ((unint64_t *)v744.i64[1] != &v745.u64[1]) {
                free((void *)v744.i64[1]);
              }
              if (*(unsigned char **)&v749[8] != &v749[24]) {
                free(*(void **)&v749[8]);
              }
              if (v462)
              {
                unint64_t v464 = v452 << 32;
                unint64_t v465 = (v452 << 32) + 0x100000000;
              }
              else
              {
                unint64_t v464 = 0x4000000000000000;
                unint64_t v465 = 0x4000000100000000;
              }
              sub_1CC4DECA4((uint64_t)v749, (uint64_t)&v703, v464, v465);
              *(void *)v760 = *(void *)v749;
              sub_1CC2D01B8((uint64_t)&v760[8], (uint64_t)&v749[8]);
              long long v764 = v751[0];
              long long v765 = v751[1];
              sub_1CC2D01B8((uint64_t)&v766, (uint64_t)&v752);
              long long v771 = v755;
              uint64_t v772 = v756;
              if ((long long *)v752 != &v753) {
                free((void *)v752);
              }
              if (*(unsigned char **)&v749[8] != &v749[24]) {
                free(*(void **)&v749[8]);
              }
              *(void *)v749 = *(void *)v760;
              *(void *)&v749[8] = &v749[24];
              *(void *)&v749[16] = 0x400000000;
              if (*(_DWORD *)&v760[16]) {
                sub_1CC4DC664((uint64_t)&v749[8], (uint64_t)&v760[8]);
              }
              v751[0] = v764;
              v744.i64[0] = *((void *)&v765 + 1);
              *(void *)&v751[1] = v765;
              v744.i64[1] = (uint64_t)&v745.i64[1];
              v745.i64[0] = 0x400000000;
              if (DWORD2(v766)) {
                sub_1CC4DC664((uint64_t)&v744.i64[1], (uint64_t)&v766);
              }
              long long v747 = v771;
              uint64_t v748 = v772;
              while (1)
              {
                BOOL v466 = LODWORD(v751[0]) == v747 && *((void *)&v751[0] + 1) == *((void *)&v747 + 1);
                if (v466 && *(void *)&v751[1] == v748) {
                  break;
                }
                uint64_t v467 = __ROR8__(*((void *)&v751[0] + 1) + LODWORD(v751[0]), 32);
                uint64_t v468 = sub_1CC4D8054((uint64_t)&v721, v467);
                if (v462)
                {
                  uint64_t v473 = *(unsigned int *)(v468 + 72);
                  uint64_t v469 = *(void *)(v468 + 64);
                  if (v473)
                  {
                    uint64_t v474 = 0;
                    unint64_t v475 = (_DWORD *)(v469 + 8);
                    uint64_t v476 = v635;
                    int v477 = v626;
                    while (*(v475 - 2) != 1 || v452 != *v475)
                    {
                      ++v474;
                      v475 += 8;
                      if (v473 == v474)
                      {
                        LODWORD(v474) = v473;
                        break;
                      }
                    }
                  }
                  else
                  {
                    LODWORD(v474) = 0;
LABEL_895:
                    uint64_t v476 = v635;
                    int v477 = v626;
                  }
                  uint64_t v478 = (_OWORD *)(v469 + 32 * v474);
                  *(_OWORD *)v733 = *v478;
                  *(_OWORD *)&v733[16] = v478[1];
                  sub_1CC4DF654(v476, mm, (uint64_t)&v702, (uint64_t)&v693, (uint64_t)&v721, v467, v477, (uint64_t)v733, v452);
                  break;
                }
                *(_DWORD *)v733 = 2;
                v733[8] = v436;
                *(_OWORD *)&v733[9] = v743[0];
                *(void *)&v733[24] = *(void *)((char *)v743 + 15);
                uint64_t v469 = *(void *)(v468 + 64);
                uint64_t v470 = *(unsigned int *)(v468 + 72);
                uint64_t v471 = v469;
                if (v470)
                {
                  uint64_t v472 = 32 * v470;
                  uint64_t v471 = *(void *)(v468 + 64);
                  while (!sub_1CC4D9C10(v471, (uint64_t)v733))
                  {
                    v471 += 32;
                    v472 -= 32;
                    if (!v472)
                    {
                      uint64_t v471 = v469 + 32 * v470;
                      break;
                    }
                  }
                }
                if (v470 != (v471 - v469) >> 5)
                {
                  LOBYTE(v671[0]) = v436;
                  *(_OWORD *)((char *)v671 + 1) = v743[0];
                  v671[2] = *(void *)((char *)v743 + 15);
                  LODWORD(v474) = sub_1CC4DFCE8(v469, v470, (uint64_t)v671);
                  goto LABEL_895;
                }
                sub_1CC4DCFA4((uint64_t)v749);
              }
              if ((unint64_t *)v744.i64[1] != &v745.u64[1]) {
                free((void *)v744.i64[1]);
              }
              if (*(unsigned char **)&v749[8] != &v749[24]) {
                free(*(void **)&v749[8]);
              }
              if ((long long *)v766 != &v767) {
                free((void *)v766);
              }
              uint64_t v291 = v635;
              if (*(unsigned char **)&v760[8] != &v760[24]) {
                free(*(void **)&v760[8]);
              }
            }
            else
            {
LABEL_845:
              unint64_t v459 = *(void *)(mm + 48);
              uint64_t v291 = v635;
              if (v459 >= 8)
              {
                if ((v459 & 7) != 0)
                {
                  uint64_t v460 = (_DWORD *)(v459 & 0xFFFFFFFFFFFFFFF8);
                  BOOL v461 = (*(void *)(mm + 48) & 7) != 3 || v460 == 0;
                  if (v461 || *v460 != 1) {
                    goto LABEL_905;
                  }
                }
                else
                {
                  *(void *)(mm + 48) = v459 & 0xFFFFFFFFFFFFFFF8;
                }
                if ((llvm::MachineInstr::getRestoreSize((llvm::MachineInstr *)mm, *(const llvm::TargetInstrInfo **)(v635 + 16)) & 0xFF00000000) != 0)
                {
                  uint64_t v452 = *(unsigned int *)(*(void *)(mm + 32) + 4);
                  sub_1CC4DFBB0((uint64_t)v760, v635, mm);
                  int v462 = 0;
                  char v436 = v760[0];
                  v743[0] = *(_OWORD *)&v760[1];
                  *(void *)((char *)v743 + 15) = *(void *)&v760[16];
                  int v463 = 2;
                  goto LABEL_857;
                }
              }
            }
LABEL_905:
            sub_1CB833A08((uint64_t)&v740, v741);
            if (*(unsigned char **)v737 != &v737[16]) {
              free(*(void **)v737);
            }
            if ((*(unsigned char *)mm & 4) == 0)
            {
              while ((*(_WORD *)(mm + 44) & 8) != 0)
                muint64_t m = *(void *)(mm + 8);
            }
          }
          uint64_t v509 = sub_1CC4D7EF0(v291, (uint64_t)v624, &v699);
          BOOL v510 = sub_1CC4DDC64(v509, (uint64_t)&v703);
          if (!v510) {
            sub_1CC4DCDD0(v509, (uint64_t)&v703);
          }
          uint64_t v45 = v622;
          if (v716)
          {
            sub_1CD590B5C((uint64_t)&v704);
            LODWORD(v716) = 0;
            long long v714 = 0u;
            long long v715 = 0u;
            long long v712 = 0u;
            long long v713 = 0u;
            long long v710 = 0u;
            long long v711 = 0u;
            long long v708 = 0u;
            long long v709 = 0u;
            long long v706 = 0u;
            long long v707 = 0u;
            long long v704 = 0u;
            long long v705 = 0u;
          }
          HIDWORD(v716) = 0;
          sub_1CC4DFD48((uint64_t)v718);
          sub_1CC4DFD48((uint64_t)v719);
          if (v510)
          {
LABEL_1017:
            char v198 = 1;
            goto LABEL_1018;
          }
          v511 = (uint64_t *)*((void *)v624 + 11);
          unsigned int v512 = (uint64_t *)*((void *)v624 + 12);
          while (2)
          {
            if (v511 == v512) {
              goto LABEL_1017;
            }
            *(void *)v760 = 0;
            uint64_t v513 = *v511;
            *(void *)v760 = *v511;
            uint64_t v514 = v673;
            uint64_t v515 = HIDWORD(v674);
            if (v673 == v672)
            {
              if (HIDWORD(v674))
              {
                unsigned int v516 = 0;
                uint64_t v517 = 8 * HIDWORD(v674);
                v518 = v673;
                while (*v518 != v513)
                {
                  if (*v518 == -2) {
                    unsigned int v516 = v518;
                  }
                  ++v518;
                  v517 -= 8;
                  if (!v517)
                  {
                    if (!v516) {
                      goto LABEL_1030;
                    }
                    *unsigned int v516 = v513;
                    --v675;
                    goto LABEL_1054;
                  }
                }
                goto LABEL_1055;
              }
LABEL_1030:
              unsigned int v519 = v674;
              if (HIDWORD(v674) < v674)
              {
                ++HIDWORD(v674);
                v673[v515] = v513;
                goto LABEL_1054;
              }
            }
            else
            {
              unsigned int v519 = v674;
            }
            if (3 * v519 <= 4 * (HIDWORD(v674) - v675))
            {
              if (v519 >= 0x40) {
                v519 *= 2;
              }
              else {
                unsigned int v519 = 128;
              }
            }
            else if (v519 - HIDWORD(v674) >= v519 >> 3)
            {
              goto LABEL_1035;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v672, v519);
            unsigned int v519 = v674;
            uint64_t v514 = v673;
LABEL_1035:
            unsigned int v520 = v519 - 1;
            unsigned int v521 = (v519 - 1) & ((v513 >> 4) ^ (v513 >> 9));
            uint64_t v522 = &v514[v521];
            uint64_t v523 = *v522;
            if (*v522 == -1)
            {
              v524 = 0;
LABEL_1047:
              if (v524) {
                char v528 = v524;
              }
              else {
                char v528 = v522;
              }
              if (*v528 != v513)
              {
                if (*v528 == -2) {
                  --v675;
                }
                else {
                  ++HIDWORD(v674);
                }
                *char v528 = v513;
LABEL_1054:
                uint64_t v529 = sub_1CBAEE230((uint64_t)v652, (uint64_t *)v760);
                sub_1CC4D7DA8((uint64_t)&v646, (_DWORD *)v529 + 2);
              }
            }
            else
            {
              v524 = 0;
              int v525 = 1;
              while (v523 != v513)
              {
                if (v524) {
                  BOOL v526 = 0;
                }
                else {
                  BOOL v526 = v523 == -2;
                }
                if (v526) {
                  v524 = v522;
                }
                unsigned int v527 = v521 + v525++;
                unsigned int v521 = v527 & v520;
                uint64_t v522 = &v514[v527 & v520];
                uint64_t v523 = *v522;
                if (*v522 == -1) {
                  goto LABEL_1047;
                }
              }
            }
LABEL_1055:
            ++v511;
            continue;
          }
        }
LABEL_1018:
        unint64_t v199 = v649;
        if (v649 == v650)
        {
          v533 = v672;
          uint64_t v532 = v673;
          unsigned int v534 = v646;
          uint64_t v535 = v647;
          goto LABEL_1078;
        }
      }
    }
    unsigned int v534 = v646;
    uint64_t v535 = v647;
    if (v646 != v647)
    {
      uint64_t v532 = (uint64_t *)v676;
      v672 = (uint64_t *)v676;
      v673 = (uint64_t *)v676;
      uint64_t v674 = 16;
      v533 = (uint64_t *)v676;
      int v675 = 0;
LABEL_1078:
      v649 = v534;
      v650 = v535;
      v646 = v199;
      v647 = v199;
      uint64_t v536 = v651;
      uint64_t v651 = v648;
      uint64_t v648 = v536;
      if (v532 != v533) {
        free(v532);
      }
      continue;
    }
    break;
  }
  if (v694)
  {
    v537 = v693;
    v538 = &v693[2 * v694];
    do
    {
      uint64_t v539 = *(void *)(*v537 + 24);
      uint64_t v540 = sub_1CC4D8054((uint64_t)&v721, v537[1]);
      uint64_t v541 = sub_1CC4D80CC(v540, (llvm::MachineFunction *)v621);
      uint64_t v542 = (uint64_t)v537;
      do
      {
        uint64_t v543 = *(void *)v542;
        __int16 v544 = *(_WORD *)(*(void *)v542 + 44);
        uint64_t v542 = *(void *)v542 + 8;
      }
      while ((v544 & 8) != 0);
      sub_1CBA959D4((uint64_t *)(v539 + 40), v543, v541);
      v537 += 2;
    }
    while (v537 != v538);
  }
  LODWORD(v694) = 0;
  v545 = (uint64_t *)v666;
  if (v666 != &v667)
  {
    do
    {
      uint64_t v546 = v545[4];
      uint64_t v547 = *(void *)(v546 + 24);
      uint64_t v548 = sub_1CC4D8054((uint64_t)&v721, v545[5]);
      uint64_t v549 = sub_1CC4D80CC(v548, (llvm::MachineFunction *)v621);
      while ((*(_WORD *)(v546 + 44) & 8) != 0)
        uint64_t v546 = *(void *)(v546 + 8);
      sub_1CBA959D4((uint64_t *)(v547 + 40), v546, v549);
      v550 = (uint64_t *)v545[1];
      if (v550)
      {
        do
        {
          v551 = (uint64_t **)v550;
          v550 = (uint64_t *)*v550;
        }
        while (v550);
      }
      else
      {
        do
        {
          v551 = (uint64_t **)v545[2];
          BOOL v23 = *v551 == v545;
          v545 = (uint64_t *)v551;
        }
        while (!v23);
      }
      v545 = (uint64_t *)v551;
    }
    while (v551 != &v667);
  }
  sub_1CBB0D544(v667);
  v667 = 0;
  uint64_t v668 = 0;
  v666 = &v667;
  int v552 = v696;
  char v630 = v198;
  if (v696 <= 1)
  {
    unsigned int v554 = v697;
    unsigned int v555 = v698;
    if (v696) {
      v618 = &v697;
    }
    else {
      v618 = v697;
    }
    if (v696) {
      unsigned int v619 = 4;
    }
    else {
      unsigned int v619 = v698;
    }
    BOOL v556 = &v618[2 * v619];
    v553 = v556;
  }
  else
  {
    v553 = &v699;
    unsigned int v554 = (uint64_t *)&v697;
    if (v696)
    {
LABEL_1099:
      int v552 = v696 & 1;
      while (*v554 == -4096 || *v554 == -8192)
      {
        v554 += 2;
        if (v554 == v553)
        {
          unsigned int v554 = v553;
          break;
        }
      }
      BOOL v556 = v554;
      unsigned int v554 = v697;
      unsigned int v555 = v698;
    }
    else
    {
      unsigned int v554 = v697;
      unsigned int v555 = v698;
      if (v698)
      {
        v553 = &v697[2 * v698];
        goto LABEL_1099;
      }
      int v552 = 0;
      BOOL v556 = v697;
      v553 = v697;
    }
  }
  BOOL v557 = v552 == 0;
  if (v552) {
    v558 = (uint64_t *)&v697;
  }
  else {
    v558 = v554;
  }
  if (!v557) {
    unsigned int v555 = 4;
  }
  v637 = &v558[2 * v555];
  if (v556 != v637)
  {
    BOOL v559 = (char *)&v750 + 8;
    int v560 = &v759;
    v620 = v553;
    do
    {
      uint64_t v561 = v556[1];
      uint64_t v641 = *v556;
      *(void *)v760 = &v760[16];
      *(void *)&v760[8] = 0x2000000000;
      sub_1CC4DE470((uint64_t)v749, v561, 0);
      uint64_t v562 = 0;
      *(void *)v737 = 0;
      *(void *)&v737[8] = &v737[24];
      *(void *)&v737[16] = 0x400000000;
      *(_DWORD *)v739 = -1;
      int v563 = -1;
      *(void *)&v739[8] = 0;
      *(void *)&v739[16] = 0;
      while (1)
      {
        BOOL v564 = LODWORD(v751[0]) == v563 && *((void *)&v751[0] + 1) == v562;
        if (v564 && *(void *)&v751[1] == *(void *)&v739[16]
          || (*((void *)&v751[0] + 1) + (unint64_t)LODWORD(v751[0])) >> 32)
        {
          break;
        }
        unint64_t v565 = sub_1CC4D8054((uint64_t)&v721, __ROR8__(*((void *)&v751[0] + 1) + LODWORD(v751[0]), 32));
        int v566 = *(_DWORD *)&v760[8];
        v567 = *(char **)v760;
        if (*(_DWORD *)&v760[8] >= *(_DWORD *)&v760[12])
        {
          unint64_t v583 = *(unsigned int *)&v760[8] + 1;
          BOOL v585 = *(void *)v760 <= v565 && *(void *)v760 + 384 * (unint64_t)*(unsigned int *)&v760[8] > v565;
          unint64_t v586 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v565 - *(void *)v760) >> 7);
          if (!v585) {
            unint64_t v586 = -1;
          }
          if (*(_DWORD *)&v760[8] == -1) {
            sub_1CD0A88F0(v583);
          }
          if (*(_DWORD *)&v760[12] == -1) {
            sub_1CD0A89A8(0xFFFFFFFFuLL);
          }
          unint64_t v633 = v586;
          BOOL v634 = v585;
          unint64_t v587 = (2 * *(unsigned int *)&v760[12]) | 1;
          if (v587 <= v583) {
            unint64_t v587 = *(unsigned int *)&v760[8] + 1;
          }
          if (v587 >= 0xFFFFFFFF) {
            uint64_t v588 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v588 = v587;
          }
          v589 = (char *)malloc_type_malloc(384 * v588, 0x4065EBACuLL);
          if (!v589) {
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          }
          v567 = v589;
          v568 = v559;
          v590 = *(long long **)v760;
          if (*(_DWORD *)&v760[8])
          {
            v591 = v560;
            uint64_t v592 = 384 * *(unsigned int *)&v760[8];
            do
            {
              uint64_t v593 = sub_1CC4DA354((uint64_t)v589, v590);
              v590 += 24;
              v589 = (char *)(v593 + 384);
              v592 -= 384;
            }
            while (v592);
            v590 = *(long long **)v760;
            if (*(_DWORD *)&v760[8])
            {
              uint64_t v594 = 24 * *(unsigned int *)&v760[8];
              do
              {
                v595 = &v590[v594];
                v596 = *(long long **)&v590[v594 - 3];
                if (&v590[v594 - 2] != v596) {
                  free(v596);
                }
                v597 = (long long *)*((void *)v595 - 40);
                if (v595 - 19 != v597) {
                  free(v597);
                }
                v594 -= 24;
              }
              while (v594 * 16);
              v590 = *(long long **)v760;
            }
            int v560 = v591;
          }
          if (v590 != (long long *)&v760[16]) {
            free(v590);
          }
          uint64_t v569 = v560;
          *(void *)v760 = v567;
          *(_DWORD *)&v760[12] = v588;
          if (v634) {
            unint64_t v565 = (unint64_t)&v567[384 * v633];
          }
          int v566 = *(_DWORD *)&v760[8];
        }
        else
        {
          v568 = v559;
          uint64_t v569 = v560;
        }
        uint64_t v570 = &v567[384 * v566];
        long long v571 = *(_OWORD *)v565;
        long long v572 = *(_OWORD *)(v565 + 16);
        long long v573 = *(_OWORD *)(v565 + 32);
        *(_OWORD *)(v570 + 44) = *(_OWORD *)(v565 + 44);
        *((_OWORD *)v570 + 1) = v572;
        *((_OWORD *)v570 + 2) = v573;
        v574 = v570 + 80;
        *((void *)v570 + 8) = v570 + 80;
        *(_OWORD *)uint64_t v570 = v571;
        BOOL v23 = v570 == (char *)v565;
        *((void *)v570 + 9) = 0x800000000;
        uint64_t v575 = v570 + 72;
        unint64_t v576 = *(unsigned int *)(v565 + 72);
        if (!v23 && v576 != 0)
        {
          if (v576 >= 9) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v574, *(const void **)(v565 + 64), 32 * *(unsigned int *)(v565 + 72));
          *uint64_t v575 = v576;
        }
        v578 = &v567[384 * v566];
        v579 = (const void **)(v578 + 336);
        *((void *)v578 + 42) = v578 + 352;
        *((void *)v578 + 43) = 0x800000000;
        unsigned int v580 = *(_DWORD *)(v565 + 344);
        v581 = (const void **)(v565 + 336);
        if (v580) {
          BOOL v582 = v579 == v581;
        }
        else {
          BOOL v582 = 1;
        }
        int v560 = v569;
        BOOL v559 = v568;
        if (!v582)
        {
          if (v580 >= 9)
          {
            *((_DWORD *)v578 + 86) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v578 + 352, *v581, 4 * *(unsigned int *)(v565 + 344));
          *((_DWORD *)v579 + 2) = v580;
        }
        ++*(_DWORD *)&v760[8];
        sub_1CC4DCFA4((uint64_t)v749);
        int v563 = *(_DWORD *)v739;
        uint64_t v562 = *(void *)&v739[8];
      }
      if (*(unsigned char **)&v737[8] != &v737[24]) {
        free(*(void **)&v737[8]);
      }
      if (*(unsigned char **)&v749[8] != &v749[24]) {
        free(*(void **)&v749[8]);
      }
      v598 = *(long long **)v760;
      if (*(_DWORD *)&v760[8])
      {
        uint64_t v599 = 384 * *(unsigned int *)&v760[8];
        do
        {
          long long v600 = *v598;
          long long v601 = v598[1];
          long long v602 = v598[2];
          *(_OWORD *)&v749[44] = *(long long *)((char *)v598 + 44);
          *(_OWORD *)&v749[16] = v601;
          *(_OWORD *)&v749[32] = v602;
          *(_OWORD *)v749 = v600;
          *(void *)&v749[64] = v559;
          *(void *)&long long v750 = 0x800000000;
          if (v598 != (long long *)v749)
          {
            unint64_t v603 = *((unsigned int *)v598 + 18);
            if (*((_DWORD *)v598 + 18))
            {
              if (v603 >= 9) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v559, *((const void **)v598 + 8), 32 * *((unsigned int *)v598 + 18));
              LODWORD(v750) = v603;
            }
          }
          v757 = v560;
          uint64_t v758 = 0x800000000;
          unsigned int v604 = *((_DWORD *)v598 + 86);
          if (v604 && v598 != (long long *)v749)
          {
            if (v604 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v560, *((const void **)v598 + 42), 4 * *((unsigned int *)v598 + 86));
            LODWORD(v758) = v604;
          }
          if ((*(_DWORD *)&v749[56] & 0xFFFFFFFE) != 2)
          {
            uint64_t v605 = sub_1CC4D80CC((uint64_t)v749, *(llvm::MachineFunction **)(v641 + 32));
            uint64_t v606 = *(void *)(v641 + 56);
            if (v641 + 48 != v606 && (*(_WORD *)(v606 + 44) & 4) != 0) {
              *(_WORD *)(v605 + 44) |= 0xCu;
            }
            sub_1CC31973C((uint64_t *)(v641 + 40), (uint64_t *)v606, v605);
          }
          if (v757 != v560) {
            free(v757);
          }
          if (*(char **)&v749[64] != v559) {
            free(*(void **)&v749[64]);
          }
          v598 += 24;
          v599 -= 384;
        }
        while (v599);
        v598 = *(long long **)v760;
        if (*(_DWORD *)&v760[8])
        {
          uint64_t v607 = 24 * *(unsigned int *)&v760[8];
          do
          {
            v608 = &v598[v607];
            v609 = *(long long **)&v598[v607 - 3];
            if (&v598[v607 - 2] != v609) {
              free(v609);
            }
            v610 = (long long *)*((void *)v608 - 40);
            if (v608 - 19 != v610) {
              free(v610);
            }
            v607 -= 24;
          }
          while (v607 * 16);
          v598 = *(long long **)v760;
        }
      }
      v611 = v620;
      if (v598 != (long long *)&v760[16])
      {
        free(v598);
        v611 = v620;
      }
      v612 = v556 + 2;
      BOOL v556 = v611;
      if (v612 != v611)
      {
        BOOL v556 = v612;
        while ((*v556 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v556 += 2;
          if (v556 == v611)
          {
            BOOL v556 = v611;
            break;
          }
        }
      }
    }
    while (v556 != v637);
  }
  if ((uint64_t *)v678 != v677) {
    free((void *)v678);
  }
  char v28 = v630;
LABEL_1216:
  if (__p)
  {
    v644 = (char *)__p;
    operator delete(__p);
  }
  if ((v682[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v682[1], 8);
  }
  if (v684 != v686) {
    free(v684);
  }
  sub_1CB833A08((uint64_t)&v690, v691);
  if (v687 != v689) {
    free(v687);
  }
  if (v646)
  {
    v647 = v646;
    operator delete(v646);
  }
  if (v649)
  {
    v650 = v649;
    operator delete(v649);
  }
  MEMORY[0x1D25D9CD0](v652[0], 8);
  MEMORY[0x1D25D9CD0](v654[0], 8);
  if (v657 != v656) {
    free(v657);
  }
  sub_1CC4DFF94((uint64_t)v661);
  MEMORY[0x1D25D9CD0](v661[0], 8);
  MEMORY[0x1D25D9CD0](v663, 8);
  sub_1CBB0D544(v667);
  if (v693 != (uint64_t *)v695) {
    free(v693);
  }
  sub_1CC4E000C((int *)&v696);
  sub_1CC4E000C((int *)&v699);
  sub_1CC4E00A4((uint64_t)v719);
  sub_1CC4E00A4((uint64_t)v718);
  if (v716) {
    sub_1CD590B5C((uint64_t)&v704);
  }
  sub_1CC4E00E0((uint64_t)v669);
  MEMORY[0x1D25D9CD0](v669[0], 8);
  char v613 = v723;
  if (v723 & 1 | v725)
  {
    v614 = v724;
    if (v723)
    {
      v614 = &v724;
      uint64_t v615 = 4;
    }
    else
    {
      uint64_t v615 = v725;
    }
    if (v615)
    {
      uint64_t v616 = 32 * v615;
      v617 = (void **)(v614 + 1);
      do
      {
        if (*((_DWORD *)v617 - 2) <= 0xFFFFFFFD) {
          v617 = sub_1CC4DA1EC(v617);
        }
        v617 += 4;
        v616 -= 32;
      }
      while (v616);
      char v613 = v723;
    }
  }
  if ((v613 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v724, 8);
  }
  sub_1CC4E017C(v722[0]);
  return v28 & 1;
}

uint64_t sub_1CC4D7C88(uint64_t a1)
{
  *(void *)a1 = &unk_1F2616070;
  *(void *)(a1 + 320) = 0;
  uint64_t v2 = *(unsigned int *)(a1 + 352);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 344);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      MEMORY[0x1D25D9CD0](v5, 8);
      v4 -= 8;
    }
    while (v4);
  }
  int8x8_t v6 = *(uint64_t **)(a1 + 392);
  uint64_t v7 = *(unsigned int *)(a1 + 400);
  if (v7)
  {
    uint64_t v11 = 16 * v7;
    do
    {
      uint64_t v12 = *v6;
      v6 += 2;
      MEMORY[0x1D25D9CD0](v12, 8);
      v11 -= 16;
    }
    while (v11);
    int8x8_t v6 = *(uint64_t **)(a1 + 392);
  }
  if (v6 != (uint64_t *)(a1 + 408)) {
    free(v6);
  }
  unsigned int v8 = *(void **)(a1 + 344);
  if (v8 != (void *)(a1 + 360)) {
    free(v8);
  }
  sub_1CC2EDB5C(a1 + 112);
  uint64_t v9 = *(void **)(a1 + 40);
  if (v9 != (void *)(a1 + 56)) {
    free(v9);
  }
  return a1;
}

void sub_1CC4D7D70(uint64_t a1)
{
  sub_1CC4D7C88(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4D7DA8(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 < v4)
  {
    *uint64_t v5 = *a2;
    int v13 = v5 + 1;
  }
  else
  {
    int8x8_t v6 = *(_DWORD **)a1;
    uint64_t v7 = ((uint64_t)v5 - *(void *)a1) >> 2;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62) {
      abort();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 62) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(4 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[4 * v7];
    *(_DWORD *)uint64_t v12 = *a2;
    int v13 = v12 + 4;
    while (v5 != v6)
    {
      int v14 = *--v5;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = &v11[4 * v10];
    if (v6) {
      operator delete(v6);
    }
  }
  *(void *)(a1 + 8) = v13;
  int v15 = *(_DWORD **)a1;
  uint64_t v16 = (uint64_t)v13 - *(void *)a1;
  if (v16 >= 5)
  {
    unint64_t v17 = (((unint64_t)v16 >> 2) - 2) >> 1;
    unsigned int v18 = &v15[v17];
    unsigned int v21 = *(v13 - 1);
    int32x2_t v20 = v13 - 1;
    unsigned int v19 = v21;
    unsigned int v22 = *v18;
    if (*v18 > v21)
    {
      do
      {
        *int32x2_t v20 = v22;
        int32x2_t v20 = v18;
        if (!v17) {
          break;
        }
        unint64_t v17 = (v17 - 1) >> 1;
        unsigned int v18 = &v15[v17];
        unsigned int v22 = *v18;
      }
      while (*v18 > v19);
      *int32x2_t v20 = v19;
    }
  }
}

uint64_t sub_1CC4D7EF0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v10 = 0;
  char v5 = sub_1CC00C33C((uint64_t)a3, a2, &v10);
  int8x8_t v6 = v10;
  if ((v5 & 1) == 0)
  {
    int v7 = *a3 >> 1;
    if (*a3) {
      uint64_t v8 = 4;
    }
    else {
      uint64_t v8 = a3[4];
    }
    if (4 * v7 + 4 >= (3 * v8))
    {
      uint64_t v8 = (2 * v8);
    }
    else if ((int)v8 + ~v7 - a3[1] > v8 >> 3)
    {
LABEL_7:
      *a3 += 2;
      if (*v6 != -4096) {
        --a3[1];
      }
      *int8x8_t v6 = a2;
      v6[1] = 0;
LABEL_10:
      operator new();
    }
    sub_1CC4DE6E0((uint64_t)a3, v8);
    unint64_t v10 = 0;
    sub_1CC00C33C((uint64_t)a3, a2, &v10);
    int8x8_t v6 = v10;
    goto LABEL_7;
  }
  uint64_t result = v10[1];
  if (!result) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1CC4D8054(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = HIDWORD(a2);
  uint64_t v8 = 0;
  if (sub_1CC4D9F8C(a1 + 24, a2, &v8))
  {
    uint64_t v4 = v8;
  }
  else
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v5 = a1 + 32;
      uint64_t v6 = 4;
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(unsigned int *)(a1 + 40);
    }
    uint64_t v4 = v5 + 32 * v6;
  }
  return *(void *)(v4 + 8) + 384 * v2;
}

uint64_t sub_1CC4D80CC(uint64_t a1, llvm::MachineFunction *a2)
{
  v47[32] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = (unsigned __int8 **)(v4 + 56);
  uint64_t v6 = *(_WORD **)(v4 + 16);
  int v7 = (unsigned __int16)*v6;
  uint64_t v8 = *(unsigned char **)(v4 + 32);
  BOOL v9 = v7 == 13 && v8[32] == 1 && *v8 == 0;
  uint64_t v10 = *(void *)&v8[64 * (unint64_t)(v7 != 14) + 16];
  appended = *(llvm::MDNode **)(a1 + 40);
  uint64_t v45 = v47;
  uint64_t v46 = 0x800000000;
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  if (v12)
  {
    char v40 = v9;
    uint64_t v37 = v10;
    int v38 = v6;
    BOOL v39 = v5;
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    uint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = (int *)(*(void *)(a1 + 64) + v13);
      int v17 = *v16;
      long long v18 = *(_OWORD *)(v16 + 2);
      uint64_t v42 = *((void *)v16 + 3);
      long long v41 = v18;
      uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 336) + 4 * v15);
      unint64_t v20 = *(void *)(*(void *)(a1 + 48) + 32)
          + ((unint64_t)(**(_WORD **)(*(void *)(a1 + 48) + 16) == 14) << 6);
      if (v17 == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v22 = (*(uint64_t (**)(void *))(**((void **)a2 + 2) + 176))(*((void **)a2 + 2));
        if (**(_WORD **)(*(void *)(a1 + 48) + 16) == 13)
        {
          if (v40) {
            unsigned int v29 = 2;
          }
          else {
            unsigned int v29 = 0;
          }
          appended = llvm::TargetRegisterInfo::prependOffsetExpression(v22, appended, v29, (uint64_t)&v41 + 8);
          char v40 = 1;
        }
        else
        {
          *(void *)&long long v43 = v44;
          *((void *)&v43 + 1) = 0x400000000;
          (*(void (**)(uint64_t, char *, long long *))(*(void *)v22 + 488))(v22, (char *)&v41 + 8, &v43);
          if (DWORD2(v43) >= (unint64_t)HIDWORD(v43)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v43 + 8 * DWORD2(v43)) = 6;
          ++DWORD2(v43);
          appended = llvm::DIExpression::appendOpsToArg(appended, (uint64_t *)v43, DWORD2(v43), v15, 0);
          if ((_OWORD *)v43 != v44) {
            free((void *)v43);
          }
        }
        *((void *)&v43 + 1) = 0;
        LODWORD(v43) = 0;
        DWORD1(v43) = v41;
        v44[0] = 0uLL;
        if (v46 >= HIDWORD(v46))
        {
          if (v45 > &v43 || (char *)v45 + 32 * v46 <= (char *)&v43) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        BOOL v23 = (char *)v45 + 32 * v46;
        long long v24 = v43;
        long long v25 = v44[0];
LABEL_20:
        *BOOL v23 = v24;
        v23[1] = v25;
LABEL_24:
        unsigned int v14 = v46 + 1;
        LODWORD(v46) = v46 + 1;
        goto LABEL_25;
      }
      if (v17 == 1)
      {
        if (*(_DWORD *)(a1 + 56) == 1) {
          int v21 = *(_DWORD *)(v20 + 32 * v19 + 4);
        }
        else {
          int v21 = v41;
        }
        *((void *)&v43 + 1) = 0;
        LODWORD(v43) = 0;
        DWORD1(v43) = v21;
        v44[0] = 0uLL;
        if (v14 >= HIDWORD(v46))
        {
          BOOL v32 = (char *)v45 + 32 * v14 > (char *)&v43;
          if (v45 > &v43 || !v32) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = (char *)v45 + 32 * v46;
        long long v28 = v44[0];
        *uint64_t v27 = v43;
        v27[1] = v28;
        goto LABEL_24;
      }
LABEL_25:
      ++v15;
      v13 += 32;
      if (v12 == v15)
      {
        int v33 = (const llvm::MachineOperand *)v45;
        uint64_t v6 = v38;
        uint64_t v5 = v39;
        uint64_t v10 = v37;
        BOOL v9 = v40;
        goto LABEL_47;
      }
    }
    uint64_t v26 = (char *)(v20 + 32 * v19);
    if (v14 >= HIDWORD(v46))
    {
      uint64_t v30 = (char *)v45 + 32 * v14;
      if (v45 > v26 || v30 <= v26) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL v23 = (char *)v45 + 32 * v46;
    long long v24 = *(_OWORD *)v26;
    long long v25 = *((_OWORD *)v26 + 1);
    goto LABEL_20;
  }
  unsigned int v14 = 0;
  int v33 = (const llvm::MachineOperand *)v47;
LABEL_47:
  llvm::BuildMI(a2, v5, v6, v9, v33, v14, v10, (uint64_t)appended);
  uint64_t v35 = v34;
  if (v45 != v47) {
    free(v45);
  }
  return v35;
}

int *sub_1CC4D8574(int *result)
{
  int v1 = *result;
  *(void *)uint64_t result = *result & 1;
  if (v1)
  {
    uint64_t v3 = result + 2;
    uint64_t v4 = result + 146;
  }
  else
  {
    unsigned int v2 = result[4];
    if (!v2) {
      return result;
    }
    uint64_t v3 = (int *)*((void *)result + 1);
    uint64_t v4 = &v3[18 * v2];
  }
  do
  {
    *(void *)uint64_t v3 = 0;
    *((unsigned char *)v3 + 8) = 0;
    *((unsigned char *)v3 + 24) = 0;
    *((void *)v3 + 4) = 0;
    v3 += 18;
  }
  while (v3 != v4);
  return result;
}

int *sub_1CC4D85C4(int *result)
{
  int v1 = *result;
  *(void *)uint64_t result = *result & 1;
  if (v1)
  {
    uint64_t v3 = result + 2;
    uint64_t v4 = result + 82;
  }
  else
  {
    unsigned int v2 = result[4];
    if (!v2) {
      return result;
    }
    uint64_t v3 = (int *)*((void *)result + 1);
    uint64_t v4 = &v3[10 * v2];
  }
  do
  {
    *(void *)uint64_t v3 = 0;
    *((unsigned char *)v3 + 8) = 0;
    *((unsigned char *)v3 + 24) = 0;
    *((void *)v3 + 4) = 0;
    v3 += 10;
  }
  while (v3 != v4);
  return result;
}

uint64_t sub_1CC4D8614(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v6 = 8;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      uint64_t v9 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  int v7 = v6 - 1;
  unsigned int v8 = sub_1CC2E9470(a2) & (v6 - 1);
  uint64_t v9 = v5 + 40 * v8;
  if (sub_1CC2E9944((uint64_t)a2, v9))
  {
    uint64_t result = 1;
    goto LABEL_7;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    if (*(void *)v9) {
      goto LABEL_11;
    }
    if (!*(unsigned char *)(v9 + 24)) {
      break;
    }
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      BOOL v13 = *(void *)(v9 + 32) == 0;
      goto LABEL_12;
    }
LABEL_11:
    BOOL v13 = 0;
LABEL_12:
    if (v13 && v11 == 0) {
      uint64_t v11 = v9;
    }
    int v14 = v12 + 1;
    unsigned int v8 = (v8 + v12) & v7;
    uint64_t v9 = v5 + 40 * v8;
    BOOL v15 = sub_1CC2E9944((uint64_t)a2, v9);
    uint64_t result = 1;
    int v12 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  if (*(void *)(v9 + 32)) {
    goto LABEL_11;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v9 = v11;
  }
LABEL_7:
  *a3 = v9;
  return result;
}

uint64_t sub_1CC4D8744(uint64_t a1, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(long long **)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v15 = a2;
      *(void *)(a1 + 8) = operator new(40 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC4D8918((int *)a1, v6, (long long *)((char *)v6 + 40 * v7));
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v16;
  do
  {
    uint64_t v10 = a1 + v8;
    if (*(void *)(a1 + v8 + 8) || *(unsigned char *)(v10 + 32) && *(_OWORD *)(a1 + v8 + 16) != 0 || *(void *)(v10 + 40))
    {
      long long v11 = *(_OWORD *)(a1 + v8 + 8);
      long long v12 = *(_OWORD *)(a1 + v8 + 24);
      *((void *)v9 + 4) = *(void *)(a1 + v8 + 40);
      *uint64_t v9 = v11;
      v9[1] = v12;
      uint64_t v9 = (long long *)((char *)v9 + 40);
    }
    v8 += 40;
  }
  while (v8 != 320);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v13 = a2;
    *(void *)(a1 + 8) = operator new(40 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v13;
  }
  return sub_1CC4D8918((int *)a1, v16, v9);
}

uint64_t sub_1CC4D8918(int *a1, long long *a2, long long *a3)
{
  uint64_t result = (uint64_t)sub_1CC4D85C4(a1);
  while (a2 != a3)
  {
    if (*(void *)a2 || *((unsigned char *)a2 + 24) && *(long long *)((char *)a2 + 8) != 0 || *((void *)a2 + 4))
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CC4D8614((uint64_t)a1, (uint64_t *)a2, &v10);
      unsigned int v7 = (_OWORD *)v10;
      long long v8 = *a2;
      long long v9 = a2[1];
      *(void *)(v10 + 32) = *((void *)a2 + 4);
      *unsigned int v7 = v8;
      v7[1] = v9;
      *a1 += 2;
    }
    a2 = (long long *)((char *)a2 + 40);
  }
  return result;
}

uint64_t sub_1CC4D89BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = sub_1CC4D977C(a2 + 808, a3);
  if (*(unsigned char *)(a2 + 808))
  {
    uint64_t v6 = a2 + 816;
    unsigned int v7 = 8;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 816);
    unsigned int v7 = *(_DWORD *)(a2 + 824);
  }
  if (v6 + 72 * v7 == result)
  {
    char v8 = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC4D9624((void *)a1, result + 40);
    char v8 = 1;
  }
  *(unsigned char *)(a1 + 32) = v8;
  return result;
}

void sub_1CC4D8A38(void *a1, uint64_t **a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2 + 1;
  int v5 = a2[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        uint64_t v8 = (uint64_t)(v5 + 4);
        if (!sub_1CC4D9C68(a3, (uint64_t)(v5 + 4))) {
          break;
        }
        int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_1CC4D9C68(v8, a3)) {
        break;
      }
      uint64_t v6 = v7 + 1;
      int v5 = v7[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
    uint64_t v68 = *v6;
    if (*v6) {
      goto LABEL_21;
    }
  }
  else
  {
    unsigned int v7 = a2 + 1;
  }
LABEL_9:
  long long v9 = operator new(0x1C0uLL);
  long long v10 = *(_OWORD *)(a3 + 16);
  v9[2] = *(_OWORD *)a3;
  void v9[3] = v10;
  void v9[4] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)((char *)v9 + 76) = *(_OWORD *)(a3 + 44);
  *((void *)v9 + 12) = v9 + 7;
  uint64_t v68 = (uint64_t *)v9;
  *((void *)v9 + 13) = 0x800000000;
  if (v9 + 2 != (_OWORD *)a3)
  {
    unsigned int v11 = *(_DWORD *)(a3 + 72);
    if (v11)
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v9 + 7, *(const void **)(a3 + 64), 32 * *(unsigned int *)(a3 + 72));
      *((_DWORD *)v68 + 26) = v11;
    }
  }
  long long v12 = v68;
  v68[46] = (uint64_t)(v68 + 48);
  v68[47] = 0x800000000;
  unsigned int v13 = *(_DWORD *)(a3 + 344);
  if (v13 && v68 + 46 != (uint64_t *)(a3 + 336))
  {
    if (v13 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v68 + 48, *(const void **)(a3 + 336), 4 * *(unsigned int *)(a3 + 344));
    long long v12 = v68;
    *((_DWORD *)v68 + 94) = v13;
  }
  v12[52] = (uint64_t)(v12 + 54);
  v12[53] = 0x200000000;
  *long long v12 = 0;
  v12[1] = 0;
  v12[2] = (uint64_t)v7;
  *uint64_t v6 = v12;
  int v14 = (uint64_t *)**v4;
  if (v14)
  {
    *unint64_t v4 = v14;
    long long v12 = *v6;
  }
  sub_1CB8358B8(v4[1], v12);
  v4[2] = (uint64_t *)((char *)v4[2] + 1);
LABEL_21:
  uint64_t v15 = v68;
  if (*((_DWORD *)v68 + 106))
  {
    sub_1CC4D9624(a1, (uint64_t)(v68 + 52));
    return;
  }
  BOOL v70 = v72;
  uint64_t v71 = 0x400000000;
  int v16 = *(_DWORD *)(a3 + 56);
  if (v16 == 1) {
    goto LABEL_37;
  }
  if (v16)
  {
    v72[0] = 1073741825;
    unsigned int v18 = 1;
LABEL_39:
    LODWORD(v71) = v18;
    goto LABEL_40;
  }
  uint64_t v17 = *(unsigned int *)(a3 + 72);
  if (!v17)
  {
LABEL_37:
    unsigned int v18 = 0;
    goto LABEL_40;
  }
  unsigned int v18 = 0;
  uint64_t v19 = 32 * v17;
  unint64_t v20 = (_DWORD *)(*(void *)(a3 + 64) + 8);
  do
  {
    if (*(v20 - 2) == 1)
    {
      if (v18 >= HIDWORD(v71)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v70 + v18) = *v20;
      unsigned int v18 = v71 + 1;
      LODWORD(v71) = v71 + 1;
    }
    v20 += 8;
    v19 -= 32;
  }
  while (v19);
  uint64_t v60 = *(unsigned int *)(a3 + 72);
  if (v60)
  {
    unint64_t v61 = *(_DWORD **)(a3 + 64);
    uint64_t v62 = 32 * v60;
    while (*v61 != 2)
    {
      v61 += 8;
      v62 -= 32;
      if (!v62) {
        goto LABEL_40;
      }
    }
    if (v18 >= HIDWORD(v71)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v70 + v18) = 0x40000000;
    unsigned int v18 = v71 + 1;
    goto LABEL_39;
  }
LABEL_40:
  if (v18 >= HIDWORD(v71)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_DWORD *)v70 + v18) = 0;
  BOOL v21 = __CFADD__(v71, 1);
  unsigned int v22 = v71 + 1;
  LODWORD(v71) = v71 + 1;
  if (!v21)
  {
    BOOL v23 = (unsigned int *)v70;
    int v67 = (unsigned int *)((char *)v70 + 4 * v22);
    long long v24 = v4 + 3;
    uint64_t v65 = (const void **)(a3 + 336);
    uint64_t v64 = v4;
    int v66 = v4 + 3;
    while (1)
    {
      uint64_t v25 = *v23;
      uint64_t v69 = 0;
      int v26 = sub_1CC4D9F8C((uint64_t)v24, v25, &v69);
      uint64_t v27 = v69;
      if (v26)
      {
        uint64_t v29 = *(void *)(v69 + 8);
        uint64_t v28 = *(void *)(v69 + 16);
        goto LABEL_56;
      }
      unsigned int v30 = (*v24 & 1) != 0 ? 4 : *((_DWORD *)v4 + 10);
      int v31 = *v24 >> 1;
      if (4 * v31 + 4 >= 3 * v30) {
        break;
      }
      if (v30 + ~v31 - *((_DWORD *)v4 + 7) <= v30 >> 3) {
        goto LABEL_110;
      }
LABEL_53:
      *v24 += 2;
      if (*(_DWORD *)v27 != -1) {
        --*((_DWORD *)v4 + 7);
      }
      uint64_t v29 = 0;
      uint64_t v28 = 0;
      *(_DWORD *)uint64_t v27 = v25;
      *(void *)(v27 + 16) = 0;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 8) = 0;
LABEL_56:
      unint64_t v32 = *((unsigned int *)v15 + 106);
      if (v32 >= *((unsigned int *)v15 + 107)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v15[52] + 8 * v32) = v25 | ((unint64_t)(-1431655765
                                                               * ((unint64_t)(v28 - v29) >> 7)) << 32);
      ++*((_DWORD *)v15 + 106);
      unint64_t v34 = *(void *)(v27 + 16);
      unint64_t v33 = *(void *)(v27 + 24);
      if (v34 < v33)
      {
        long long v35 = *(_OWORD *)a3;
        long long v36 = *(_OWORD *)(a3 + 16);
        long long v37 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(v34 + 44) = *(_OWORD *)(a3 + 44);
        *(_OWORD *)(v34 + 16) = v36;
        *(_OWORD *)(v34 + 32) = v37;
        *(_OWORD *)unint64_t v34 = v35;
        *(void *)(v34 + 64) = v34 + 80;
        *(void *)(v34 + 72) = 0x800000000;
        if (v34 != a3)
        {
          unint64_t v38 = *(unsigned int *)(a3 + 72);
          if (*(_DWORD *)(a3 + 72))
          {
            if (v38 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v34 + 80), *(const void **)(a3 + 64), 32 * *(unsigned int *)(a3 + 72));
            *(_DWORD *)(v34 + 72) = v38;
          }
        }
        *(void *)(v34 + 336) = v34 + 352;
        *(void *)(v34 + 344) = 0x800000000;
        if (v34 != a3)
        {
          unsigned int v49 = *(_DWORD *)(a3 + 344);
          if (v49)
          {
            if (v49 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v34 + 352), *v65, 4 * *(unsigned int *)(a3 + 344));
            *(_DWORD *)(v34 + 344) = v49;
          }
        }
        uint64_t v50 = v34 + 384;
        long long v24 = v66;
        goto LABEL_101;
      }
      uint64_t v39 = *(void *)(v27 + 8);
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - v39) >> 7);
      unint64_t v41 = v40 + 1;
      if (v40 + 1 > 0xAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - v39) >> 7);
      if (2 * v42 > v41) {
        unint64_t v41 = 2 * v42;
      }
      if (v42 >= 0x55555555555555) {
        unint64_t v43 = 0xAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        if (v43 > 0xAAAAAAAAAAAAAALL) {
          sub_1CB833614();
        }
        uint64_t v44 = (char *)operator new(384 * v43);
      }
      else
      {
        uint64_t v44 = 0;
      }
      uint64_t v45 = (uint64_t)&v44[384 * v40];
      long long v46 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v45 = *(_OWORD *)a3;
      *(_OWORD *)(v45 + 16) = v46;
      *(_OWORD *)(v45 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v45 + 44) = *(_OWORD *)(a3 + 44);
      *(void *)(v45 + 64) = v45 + 80;
      *(void *)(v45 + 72) = 0x800000000;
      unint64_t v47 = *(unsigned int *)(a3 + 72);
      if (v45 != a3 && v47 != 0)
      {
        if (v47 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(v45 + 80), *(const void **)(a3 + 64), 32 * *(unsigned int *)(a3 + 72));
        *(_DWORD *)(v45 + 72) = v47;
      }
      uint64_t v51 = &v44[384 * v40];
      *((void *)v51 + 42) = v51 + 352;
      *((void *)v51 + 43) = 0x800000000;
      unsigned int v52 = *(_DWORD *)(a3 + 344);
      uint64_t v15 = v68;
      if (v52)
      {
        uint64_t v53 = v51 + 336;
        if (v51 + 336 != (char *)v65)
        {
          if (v52 >= 9)
          {
            *((_DWORD *)v51 + 86) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v51 + 352, *v65, 4 * *(unsigned int *)(a3 + 344));
          *((_DWORD *)v53 + 2) = v52;
        }
      }
      uint64_t v54 = &v44[384 * v43];
      uint64_t v50 = v45 + 384;
      uint64_t v55 = *(long long **)(v27 + 8);
      uint64_t v56 = *(long long **)(v27 + 16);
      if (v56 == v55)
      {
        *(void *)(v27 + 8) = v45;
        *(void *)(v27 + 16) = v50;
        *(void *)(v27 + 24) = v54;
LABEL_104:
        long long v24 = v66;
        if (!v56) {
          goto LABEL_100;
        }
        goto LABEL_99;
      }
      do
      {
        v45 -= 384;
        v56 -= 24;
        sub_1CC4DA354(v45, v56);
      }
      while (v56 != v55);
      uint64_t v56 = *(long long **)(v27 + 8);
      uint64_t v57 = *(long long **)(v27 + 16);
      *(void *)(v27 + 8) = v45;
      *(void *)(v27 + 16) = v50;
      *(void *)(v27 + 24) = v54;
      if (v57 == v56) {
        goto LABEL_104;
      }
      long long v24 = v66;
      do
      {
        int v58 = (long long *)*((void *)v57 - 6);
        if (v57 - 2 != v58) {
          free(v58);
        }
        unsigned int v59 = (long long *)*((void *)v57 - 40);
        if (v57 - 19 != v59) {
          free(v59);
        }
        v57 -= 24;
      }
      while (v57 != v56);
      if (!v56) {
        goto LABEL_100;
      }
LABEL_99:
      operator delete(v56);
LABEL_100:
      unint64_t v4 = v64;
LABEL_101:
      *(void *)(v27 + 16) = v50;
      if (++v23 == v67) {
        goto LABEL_43;
      }
    }
    v30 *= 2;
LABEL_110:
    sub_1CC4DA038((uint64_t)v24, v30);
    uint64_t v69 = 0;
    sub_1CC4D9F8C((uint64_t)v24, v25, &v69);
    uint64_t v27 = v69;
    goto LABEL_53;
  }
LABEL_43:
  sub_1CC4D9624(a1, (uint64_t)(v68 + 52));
  if (v70 != v72) {
    free(v70);
  }
}

void sub_1CC4D92F8(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((_DWORD *)a3 + 14) & 0xFFFFFFFE;
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  if (v7)
  {
    uint64_t v8 = *(uint64_t **)a2;
    uint64_t v9 = 8 * v7;
    do
    {
      uint64_t v10 = *v8++;
      unint64_t v11 = __ROR8__(v10, 32);
      sub_1CC4DA4D0(a1 + 16, v11, v11);
      v9 -= 8;
    }
    while (v9);
  }
  if (v6 == 2) {
    uint64_t v12 = 808;
  }
  else {
    uint64_t v12 = 224;
  }
  if (v6 == 2) {
    uint64_t v13 = a1 + 808;
  }
  else {
    uint64_t v13 = a1 + 224;
  }
  long long v14 = a3[1];
  long long v37 = *a3;
  long long v38 = v14;
  uint64_t v39 = *((void *)a3 + 4);
  sub_1CC4D9624(v40, a2);
  uint64_t v35 = 0;
  if ((sub_1CC4D97E0(v13, (uint64_t *)&v37, &v35) & 1) == 0)
  {
    uint64_t v15 = v35;
    uint64_t v36 = v35;
    unsigned int v16 = *(_DWORD *)(a1 + v12);
    unsigned int v17 = v16 >> 1;
    int v18 = v16 & 1;
    if (v16) {
      unsigned int v19 = 8;
    }
    else {
      unsigned int v19 = *(_DWORD *)(v13 + 16);
    }
    if (4 * v17 + 4 >= 3 * v19)
    {
      v19 *= 2;
    }
    else if (v19 + ~v17 - *(_DWORD *)(v13 + 4) > v19 >> 3)
    {
LABEL_16:
      *(_DWORD *)(a1 + v12) = (v16 & 0xFFFFFFFE | v18) + 2;
      if (*(void *)v15 || *(unsigned char *)(v15 + 24) || *(void *)(v15 + 32)) {
        --*(_DWORD *)(v13 + 4);
      }
      long long v20 = v37;
      long long v21 = v38;
      *(void *)(v15 + 32) = v39;
      *(_OWORD *)uint64_t v15 = v20;
      *(_OWORD *)(v15 + 16) = v21;
      sub_1CC4DBE14(v15 + 40, (uint64_t)v40);
      goto LABEL_21;
    }
    unint64_t v22 = (v19 - 1) | ((unint64_t)(v19 - 1) >> 1);
    unint64_t v23 = v22 | (v22 >> 2) | ((v22 | (v22 >> 2)) >> 4);
    int v24 = ((v23 | (v23 >> 8)) >> 16) | v23 | (v23 >> 8);
    if ((v24 + 1) > 0x40) {
      unsigned int v25 = v24 + 1;
    }
    else {
      unsigned int v25 = 64;
    }
    if (v19 >= 9) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = v19;
    }
    if (v16)
    {
      uint64_t v29 = 0;
      unsigned int v30 = v42;
      do
      {
        uint64_t v31 = v13 + v29;
        if (*(void *)(v13 + v29 + 8)
          || *(unsigned char *)(v31 + 32) && *(_OWORD *)(v13 + v29 + 16) != 0
          || *(void *)(v31 + 40))
        {
          long long v32 = *(_OWORD *)(v13 + v29 + 8);
          long long v33 = *(_OWORD *)(v13 + v29 + 24);
          *((void *)v30 + 4) = *(void *)(v13 + v29 + 40);
          *(_OWORD *)unsigned int v30 = v32;
          *((_OWORD *)v30 + 1) = v33;
          sub_1CC4DBE14((uint64_t)(v30 + 40), v31 + 48);
          v30 += 72;
          unint64_t v34 = *(void **)(v31 + 48);
          if ((void *)(v31 + 64) != v34) {
            free(v34);
          }
        }
        v29 += 72;
      }
      while (v29 != 576);
      if (v26 > 8)
      {
        *(_DWORD *)(a1 + v12) &= ~1u;
        *(void *)(v13 + 8) = operator new(72 * v26, (std::align_val_t)8uLL);
        *(void *)(v13 + 16) = v26;
      }
      sub_1CC4DBED8((int *)v13, (uint64_t)v42, (uint64_t)v30);
    }
    else
    {
      uint64_t v27 = *(void *)(v13 + 8);
      unsigned int v28 = *(_DWORD *)(v13 + 16);
      if (v26 > 8)
      {
        *(void *)(v13 + 8) = operator new(72 * v26, (std::align_val_t)8uLL);
        *(void *)(v13 + 16) = v26;
      }
      else
      {
        *(_DWORD *)(a1 + v12) = v16 | 1;
      }
      sub_1CC4DBED8((int *)v13, v27, v27 + 72 * v28);
      MEMORY[0x1D25D9CD0](v27, 8);
    }
    sub_1CC4D97E0(v13, (uint64_t *)&v37, &v36);
    unsigned int v16 = *(_DWORD *)(a1 + v12);
    uint64_t v15 = v36;
    int v18 = v16 & 1;
    goto LABEL_16;
  }
LABEL_21:
  if (v40[0] != &v41) {
    free(v40[0]);
  }
}

void *sub_1CC4D9624(void *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x200000000;
  if (a1 != (void *)a2)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 8);
    if (v3)
    {
      if (v3 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(a1 + 2, *(const void **)a2, 8 * *(unsigned int *)(a2 + 8));
      *((_DWORD *)a1 + 2) = v3;
    }
  }
  return a1;
}

BOOL sub_1CC4D96BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)a1) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  int v7 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(v6 + 16) + 120))(*(void *)(v6 + 16)) + 88);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 552))(a3, v6);
  int v9 = *(_DWORD *)(a1 + 4);
  if (v9) {
    BOOL v10 = v9 == v7;
  }
  else {
    BOOL v10 = 1;
  }
  return !v10 && v9 != v8;
}

uint64_t sub_1CC4D977C(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = 0;
  if (sub_1CC4D97E0(a1, a2, &v6)) {
    return v6;
  }
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    unsigned int v5 = 8;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 72 * v5;
}

uint64_t sub_1CC4D97E0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v6 = 8;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      uint64_t v9 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  int v7 = v6 - 1;
  unsigned int v8 = sub_1CC2E9470(a2) & (v6 - 1);
  uint64_t v9 = v5 + 72 * v8;
  if (sub_1CC2E9944((uint64_t)a2, v9))
  {
    uint64_t result = 1;
    goto LABEL_7;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    if (*(void *)v9) {
      goto LABEL_11;
    }
    if (!*(unsigned char *)(v9 + 24)) {
      break;
    }
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      BOOL v13 = *(void *)(v9 + 32) == 0;
      goto LABEL_12;
    }
LABEL_11:
    BOOL v13 = 0;
LABEL_12:
    if (v13 && v11 == 0) {
      uint64_t v11 = v9;
    }
    int v14 = v12 + 1;
    unsigned int v8 = (v8 + v12) & v7;
    uint64_t v9 = v5 + 72 * v8;
    BOOL v15 = sub_1CC2E9944((uint64_t)a2, v9);
    uint64_t result = 1;
    int v12 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  if (*(void *)(v9 + 32)) {
    goto LABEL_11;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v9 = v11;
  }
LABEL_7:
  *a3 = v9;
  return result;
}

uint64_t sub_1CC4D9910(uint64_t a1, uint64_t a2)
{
  int v4 = **(unsigned __int16 **)(a2 + 16);
  BOOL v5 = v4 == 14;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(v6 + ((unint64_t)(v4 != 14) << 6) + 16);
  uint64_t v8 = 96;
  if (v5) {
    uint64_t v8 = 32;
  }
  uint64_t v9 = *(void *)(v6 + v8 + 16);
  uint64_t v10 = *(void *)(a2 + 56);
  if (*(_DWORD *)(v10 + 8) == 2) {
    uint64_t v11 = *(void *)(v10 - 8);
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)a1 = v7;
  if (v9)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v9 + 24), *(uint64_t **)(v9 + 32), (int8x16_t *)(a1 + 8));
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 32) = v11;
  uint64_t v12 = 96;
  if (**(_WORD **)(a2 + 16) == 14) {
    uint64_t v12 = 32;
  }
  uint64_t v13 = *(void *)(*(void *)(a2 + 32) + v12 + 16);
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0x800000000;
  *(void *)(a1 + 336) = a1 + 352;
  *(void *)(a1 + 344) = 0x800000000;
  if (v13)
  {
    uint64_t v15 = v13 + 24;
    int v14 = *(void **)(v13 + 24);
    if (((*(void *)(v15 + 8) - (void)v14) & 0x7FFFFFFF8) != 0 && *v14 == 4099) {
      *(_DWORD *)(a1 + 56) = 1;
    }
  }
  uint64_t v16 = *(unsigned int *)(a2 + 40);
  if (**(_WORD **)(a2 + 16) != 14) {
    uint64_t v16 = 1;
  }
  if (2 * (**(_WORD **)(a2 + 16) == 14) != v16)
  {
    uint64_t v18 = *(void *)(a2 + 32);
    uint64_t v19 = v18 + 32 * v16;
    uint64_t v20 = v18 + ((unint64_t)(**(_WORD **)(a2 + 16) == 14) << 6);
    do
    {
      if (*(unsigned char *)v20)
      {
        uint64_t v21 = *(void *)(v20 + 16);
        int v22 = 3;
      }
      else
      {
        uint64_t v21 = *(unsigned int *)(v20 + 4);
        int v22 = 1;
      }
      LODWORD(v30[0]) = v22;
      *((void *)&v30[0] + 1) = v21;
      unint64_t v23 = *(void *)(a1 + 64);
      int v24 = (const llvm::DIExpression *)*(unsigned int *)(a1 + 72);
      uint64_t v25 = v23;
      if (v24)
      {
        uint64_t v26 = 32 * (void)v24;
        uint64_t v25 = *(void *)(a1 + 64);
        while (!sub_1CC4D9C10(v25, (uint64_t)v30))
        {
          v25 += 32;
          v26 -= 32;
          if (!v26)
          {
            uint64_t v25 = v23 + 32 * (void)v24;
            break;
          }
        }
      }
      if (v24 == (const llvm::DIExpression *)((uint64_t)(v25 - v23) >> 5))
      {
        if (v24 >= *(_DWORD *)(a1 + 76))
        {
          if (v23 > (unint64_t)v30 || v23 + 32 * (void)v24 <= (unint64_t)v30) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = (_OWORD *)(v23 + 32 * *(unsigned int *)(a1 + 72));
        long long v28 = v30[1];
        *uint64_t v27 = v30[0];
        v27[1] = v28;
        ++*(_DWORD *)(a1 + 72);
        unint64_t v29 = *(unsigned int *)(a1 + 344);
        if (v29 >= *(unsigned int *)(a1 + 348)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)(a1 + 336) + 4 * v29) = (v20
                                                      - (*(void *)(a2 + 32)
                                                       + ((unint64_t)(**(_WORD **)(a2 + 16) == 14) << 6))) >> 5;
        ++*(_DWORD *)(a1 + 344);
      }
      else
      {
        *(void *)(a1 + 40) = llvm::DIExpression::replaceArg(*(llvm::DIExpression **)(a1 + 40), v24, ((v25 - v23) >> 5));
      }
      v20 += 32;
    }
    while (v20 != v19);
  }
  return a1;
}

BOOL sub_1CC4D9C10(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  if (*(_DWORD *)a1 == 2)
  {
    if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)) {
      return *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    }
    return 0;
  }
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

BOOL sub_1CC4D9C68(uint64_t a1, uint64_t a2)
{
  if (sub_1CC4D9D2C((unint64_t *)a1, (unint64_t *)a2)) {
    return 1;
  }
  if (sub_1CC4D9D2C((unint64_t *)a2, (unint64_t *)a1)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 56);
  int v5 = *(_DWORD *)(a2 + 56);
  if (v4 < v5) {
    return 1;
  }
  if (v5 < v4) {
    return 0;
  }
  uint64_t v6 = *(int **)(a1 + 64);
  unsigned int v7 = *(_DWORD *)(a1 + 72);
  uint64_t v8 = *(int **)(a2 + 64);
  unsigned int v9 = *(_DWORD *)(a2 + 72);
  if (sub_1CC4D9E60(v6, v7, v8, v9)) {
    return 1;
  }
  return (sub_1CC4D9E60(v8, v9, v6, v7) & 1) == 0 && *(void *)(a1 + 40) < *(void *)(a2 + 40);
}

BOOL sub_1CC4D9D2C(unint64_t *a1, unint64_t *a2)
{
  v5[0] = a1;
  v5[1] = a1 + 1;
  void v5[2] = a1 + 4;
  v4[0] = a2;
  v4[1] = a2 + 1;
  unint64_t v2 = *a2;
  v4[2] = a2 + 4;
  if (*a1 < v2) {
    return 1;
  }
  if (v2 < *a1) {
    return 0;
  }
  return sub_1CC4D9D9C((uint64_t)&v6, (uint64_t)v5, (uint64_t)v4);
}

BOOL sub_1CC4D9D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a3 + 8);
  int v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(unsigned char *)(v3 + 16)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (*(unsigned char *)(v3 + 16)) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v5 == 0;
    }
    if (!v7) {
      return 1;
    }
  }
  else if (*(void *)v3 < *(void *)v4 || *(void *)v4 >= *(void *)v3 && *(void *)(v3 + 8) < *(void *)(v4 + 8))
  {
    return 1;
  }
  if (*(unsigned char *)(v3 + 16)) {
    BOOL v9 = v5 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (*(unsigned char *)(v3 + 16)) {
      BOOL v10 = v5 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10) {
      return 0;
    }
  }
  else if (*(void *)v4 < *(void *)v3 || *(void *)v3 >= *(void *)v4 && *(void *)(v4 + 8) < *(void *)(v3 + 8))
  {
    return 0;
  }
  return **(void **)(a2 + 16) < **(void **)(a3 + 16);
}

uint64_t sub_1CC4D9E60(int *a1, unsigned int a2, int *a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v6 = 32 * a2;
  uint64_t v7 = 32 * a4 - 32;
  while (v6 && (sub_1CC4D9EFC(a1, (uint64_t)a3) & 1) == 0)
  {
    char v8 = sub_1CC4D9EFC(a3, (uint64_t)a1);
    uint64_t result = 0;
    if ((v8 & 1) == 0)
    {
      a1 += 8;
      a3 += 8;
      v6 -= 32;
      uint64_t v10 = v7;
      v7 -= 32;
      if (v10) {
        continue;
      }
    }
    return result;
  }
  return 1;
}

uint64_t sub_1CC4D9EFC(int *a1, uint64_t a2)
{
  int v2 = *a1;
  if (*a1 != 2)
  {
    if (v2 < *(_DWORD *)a2) {
      return 1;
    }
    if (*(_DWORD *)a2 >= v2) {
      return *((void *)a1 + 1) < *(void *)(a2 + 8);
    }
    return 0;
  }
  if (*(int *)a2 > 2) {
    return 1;
  }
  if (*(_DWORD *)a2 != 2) {
    return 0;
  }
  unsigned int v3 = a1[2];
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  if (v3 < v4) {
    return 1;
  }
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *(void *)(a2 + 16);
  BOOL v8 = v6 >= v5 && *((void *)a1 + 3) < *(void *)(a2 + 24);
  unsigned int v9 = v5 < v6 || v8;
  if (v4 >= v3) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC4D9F8C(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  uint64_t v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (_DWORD *)(v3 + 32 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      int v13 = v6 + v11++;
      uint64_t v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 32 * v6);
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void **sub_1CC4DA038(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC4DA274((void **)a1, v7, v7 + 32 * v8);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v9 = 0;
  uint64_t v10 = v16;
  do
  {
    uint64_t v11 = a1 + v9;
    unsigned int v12 = *(_DWORD *)(a1 + v9 + 8);
    if (v12 <= 0xFFFFFFFD)
    {
      *(_DWORD *)uint64_t v10 = v12;
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = 0;
      *((void *)v10 + 1) = 0;
      long long v14 = *(_OWORD *)(v11 + 16);
      uint64_t v13 = v11 + 16;
      *(_OWORD *)(v10 + 8) = v14;
      *((void *)v10 + 3) = *(void *)(v13 + 16);
      v10 += 32;
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      sub_1CC4DA1EC((void **)v13);
    }
    v9 += 32;
  }
  while (v9 != 128);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  return sub_1CC4DA274((void **)a1, (uint64_t)v16, (uint64_t)v10);
}

void **sub_1CC4DA1EC(void **a1)
{
  unsigned int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (char *)*((void *)v3 - 6);
        if (v3 - 32 != v5) {
          free(v5);
        }
        int v6 = (char *)*((void *)v3 - 40);
        if (v3 - 304 != v6) {
          free(v6);
        }
        v3 -= 384;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_1CC4DA274(void **result, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = result;
  int v6 = *(_DWORD *)result;
  void *result = (void *)(*(_DWORD *)result & 1);
  if (v6)
  {
    uint64_t v8 = result + 1;
    uint64_t v9 = result + 17;
  }
  else
  {
    uint64_t v7 = *((unsigned int *)result + 4);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = result[1];
    uint64_t v9 = (void **)&v8[8 * v7];
  }
  do
  {
    _DWORD *v8 = -1;
    v8 += 8;
  }
  while (v8 != (_DWORD *)v9);
LABEL_10:
  while (a2 != a3)
  {
    int v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      unsigned int v12 = 0;
      sub_1CC4D9F8C((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      *unsigned int v12 = *(_DWORD *)a2;
      void v11[2] = 0;
      v11[3] = 0;
      v11[1] = 0;
      *(_OWORD *)(v11 + 1) = *(_OWORD *)(a2 + 8);
      v11[3] = *(void *)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(_DWORD *)v5 += 2;
      uint64_t result = sub_1CC4DA1EC((void **)(a2 + 8));
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_1CC4DA354(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 44) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x800000000;
  if ((long long *)a1 != a2)
  {
    unsigned int v7 = *((_DWORD *)a2 + 18);
    if (v7)
    {
      uint64_t v8 = (long long *)*((void *)a2 + 8);
      if (v8 == a2 + 5)
      {
        if (v7 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 80), v8, 32 * *((unsigned int *)a2 + 18));
        *(_DWORD *)(a1 + 72) = v7;
      }
      else
      {
        *(void *)(a1 + 64) = v8;
        int v9 = *((_DWORD *)a2 + 19);
        *(_DWORD *)(a1 + 72) = v7;
        *(_DWORD *)(a1 + 76) = v9;
        *((void *)a2 + 8) = a2 + 5;
        *((_DWORD *)a2 + 19) = 0;
      }
      *((_DWORD *)a2 + 18) = 0;
    }
  }
  *(void *)(a1 + 336) = a1 + 352;
  *(void *)(a1 + 344) = 0x800000000;
  unsigned int v10 = *((_DWORD *)a2 + 86);
  if (v10 && (long long *)a1 != a2)
  {
    uint64_t v11 = (long long *)*((void *)a2 + 42);
    if (v11 == a2 + 22)
    {
      if (v10 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 352), v11, 4 * *((unsigned int *)a2 + 86));
      *(_DWORD *)(a1 + 344) = v10;
    }
    else
    {
      *(void *)(a1 + 336) = v11;
      *(_DWORD *)(a1 + 344) = v10;
      *(_DWORD *)(a1 + 348) = *((_DWORD *)a2 + 87);
      *((void *)a2 + 42) = a2 + 22;
      *((_DWORD *)a2 + 87) = 0;
    }
    *((_DWORD *)a2 + 86) = 0;
  }
  return a1;
}

void sub_1CC4DA4D0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  v17[8] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 192))
  {
    uint64_t v14 = a1;
    uint64_t v15 = v17;
    uint64_t v16 = 0x400000000;
    sub_1CC4DA7F8(&v14, a2);
    uint64_t v5 = v14;
    if (*(_DWORD *)(v14 + 192)) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 196);
  if (v6 == 11)
  {
    uint64_t v10 = 0;
    uint64_t v14 = a1;
    uint64_t v15 = v17;
    HIDWORD(v16) = 4;
    uint64_t v11 = 8;
    do
    {
      if (*(void *)(a1 + v11) >= a2) {
        break;
      }
      ++v10;
      v11 += 16;
    }
    while (v10 != 11);
    v17[0] = a1;
    v17[1] = (v10 << 32) | 0xB;
    LODWORD(v16) = 1;
LABEL_19:
    unsigned int v12 = sub_1CC4DA6B0(v5, (_DWORD *)v15 + 4 * v16 - 1, *(unsigned int *)(v5 + 196), a2, a3);
    if (v12 <= 0xB)
    {
      *(_DWORD *)(v5 + 196) = v12;
      *((_DWORD *)v15 + 2) = v12;
LABEL_12:
      if (v15 != v17) {
        free(v15);
      }
      return;
    }
    unint64_t v13 = sub_1CC4DB42C(v5, (unsigned int *)*((unsigned int *)v15 + 4 * v16 - 1));
    llvm::IntervalMapImpl::Path::replaceRoot((unsigned int *)&v15, v5 + 8, *(_DWORD *)(v5 + 196), v13);
LABEL_11:
    sub_1CC4DAC14(&v14, a2, a3);
    goto LABEL_12;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (unint64_t *)(a1 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      if (v9 >= a2) {
        break;
      }
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a1 + 196);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  LODWORD(v14) = v7;
  *(_DWORD *)(a1 + 196) = sub_1CC4DA6B0(a1, &v14, v6, a2, a3);
}

uint64_t sub_1CC4DA6B0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  if (!v5)
  {
LABEL_5:
    if (v5 == a3)
    {
      uint64_t v14 = (void *)(a1 + 16 * a3);
      *uint64_t v14 = a4;
      v14[1] = a5;
      *(unsigned char *)(a1 + a3 + 176) = 0;
      return (a3 + 1);
    }
    uint64_t v10 = (unsigned char *)(a1 + v5 + 176);
    if (!*v10)
    {
      uint64_t v11 = (void *)(a1 + 16 * v5);
      if (a5 + 1 == *v11)
      {
        *uint64_t v11 = a4;
        return a3;
      }
    }
    if (a3 != 11)
    {
      unsigned int v12 = a3;
      do
      {
        *(_OWORD *)(a1 + 16 * v12) = *(_OWORD *)(a1 + 16 * (v12 - 1));
        *(unsigned char *)(a1 + 176 + v12) = *(unsigned char *)(a1 + 176 + v12 - 1);
        --v12;
      }
      while (v5 != v12);
      unint64_t v13 = (void *)(a1 + 16 * v5);
      *unint64_t v13 = a4;
      v13[1] = a5;
      *uint64_t v10 = 0;
      return (a3 + 1);
    }
    return 12;
  }
  uint64_t v6 = (v5 - 1);
  if (*(unsigned char *)(a1 + v6 + 176) || (uint64_t v7 = a1 + 16 * v6, v9 = *(void *)(v7 + 8), v8 = (void *)(v7 + 8), v9 + 1 != a4))
  {
    if (v5 == 11) {
      return 12;
    }
    goto LABEL_5;
  }
  *a2 = v6;
  if (v5 == a3 || *(unsigned char *)(a1 + v5 + 176) || a5 + 1 != *(void *)(a1 + 16 * v5))
  {
    void *v8 = a5;
  }
  else
  {
    void *v8 = *(void *)(a1 + 16 * v5 + 8);
    if (v5 + 1 != a3)
    {
      do
      {
        *(_OWORD *)(a1 + 16 * v5) = *(_OWORD *)(a1 + 16 * (v5 + 1));
        *(unsigned char *)(a1 + 176 + v5) = *(unsigned char *)(a1 + 176 + (v5 + 1));
        LODWORD(v5) = v5 + 1;
      }
      while (a3 - 1 != v5);
    }
    return (a3 - 1);
  }
  return a3;
}

_DWORD *sub_1CC4DA7F8(_DWORD *result, unint64_t a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(unsigned int *)(*(void *)result + 196);
  if (v3)
  {
    uint64_t v4 = 0;
    while (*(void *)(v2 + 96 + 8 * v4) < a2)
    {
      if (v3 == ++v4)
      {
        uint64_t v5 = *(unsigned int *)(*(void *)result + 196);
        goto LABEL_7;
      }
    }
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_7:
  int v6 = *(_DWORD *)(v2 + 192);
  uint64_t v7 = result + 2;
  result[4] = 0;
  int v8 = result[5];
  if (v6)
  {
    v2 += 8;
    if (!v8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  else if (!v8)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v9 = v3 | (v5 << 32);
  uint64_t v10 = *(void **)v7;
  *uint64_t v10 = v2;
  v10[1] = v9;
  LODWORD(v9) = result[4];
  result[4] = v9 + 1;
  if (v9 != -1 && *(_DWORD *)(*(void *)v7 + 12) < *(_DWORD *)(*(void *)v7 + 8))
  {
    return (_DWORD *)sub_1CC4DAA64((uint64_t)result, a2);
  }
  return result;
}

_DWORD *sub_1CC4DA944(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = (void **)(result + 2);
  uint64_t v3 = *(void *)result;
  if (*(_DWORD *)(*(void *)result + 192))
  {
    uint64_t v8 = v3 + 8;
    uint64_t v9 = *(unsigned int *)(v3 + 196);
    result[4] = 0;
    uint64_t v5 = result + 4;
    if (!result[5]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v6 = v9 | (a2 << 32);
    uint64_t v7 = *v2;
    *uint64_t v7 = v8;
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(v3 + 196);
    result[4] = 0;
    uint64_t v5 = result + 4;
    if (!result[5]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v6 = v4 | (a2 << 32);
    uint64_t v7 = *v2;
    *uint64_t v7 = v3;
  }
  v7[1] = v6;
  ++*v5;
  return result;
}

uint64_t sub_1CC4DAA64(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result + 8;
  int v3 = *(_DWORD *)(result + 16);
  uint64_t v4 = *(void *)(result + 8) + 16 * (v3 - 1);
  int v5 = *(_DWORD *)(*(void *)result + 192);
  uint64_t v6 = *(void *)(*(void *)v4 + 8 * *(unsigned int *)(v4 + 12));
  int v7 = v5 - v3;
  if (v5 != v3)
  {
    do
    {
      uint64_t v18 = result;
      unint64_t v15 = a2;
      unint64_t v16 = v6 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v17) = -1;
      do
        uint64_t v17 = (v17 + 1);
      while (*(void *)((v6 & 0xFFFFFFFFFFFFFFC0) + 8 * v17 + 0x60) < a2);
      sub_1CC4DAB94(v2, v6, v17);
      uint64_t v6 = *(void *)(v16 + 8 * v17);
      --v7;
      uint64_t result = v18;
      a2 = v15;
    }
    while (v7);
  }
  unsigned int v8 = 0;
  unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFC0;
  do
  {
    unsigned int v10 = v8;
    unint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFFC0) + 16 * v8++ + 8);
  }
  while (v11 < a2);
  unsigned int v12 = *(_DWORD *)(result + 16);
  if (v12 >= *(_DWORD *)(result + 20)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v13 = (v6 & 0x3F | ((unint64_t)v10 << 32)) + 1;
  uint64_t v14 = (unint64_t *)(*(void *)(result + 8) + 16 * v12);
  *uint64_t v14 = v9;
  v14[1] = v13;
  ++*(_DWORD *)(result + 16);
  return result;
}

uint64_t sub_1CC4DAB94(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = (unint64_t *)(*(void *)result + 16 * v3);
  *uint64_t v4 = a2 & 0xFFFFFFFFFFFFFFC0;
  v4[1] = (a2 & 0x3F | (a3 << 32)) + 1;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CC4DAC14(_DWORD *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  unsigned int v7 = a1[4];
  if (!v7 || (uint64_t v8 = *(void *)v6, *(_DWORD *)(*(void *)v6 + 12) >= *(_DWORD *)(*(void *)v6 + 8)))
  {
    uint64_t v9 = *(unsigned int *)(*(void *)a1 + 192);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(void *)a1 + 192));
    uint64_t v8 = *((void *)a1 + 1);
    ++*(_DWORD *)(v8 + 16 * v9 + 12);
    unsigned int v7 = a1[4];
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8 + 16 * v7;
  int v12 = *(_DWORD *)(v11 - 4);
  if (!v12)
  {
    uint64_t v13 = *(void *)(v11 - 16);
    if (*(void *)v13 <= a2) {
      goto LABEL_22;
    }
    unsigned int v14 = v7 - 1;
    if (v7 == 1) {
      goto LABEL_12;
    }
    unsigned int v15 = v7 - 2;
    int v16 = v7;
    while (1)
    {
      uint64_t v17 = v15;
      if (!v15) {
        break;
      }
      int v18 = *(_DWORD *)(v8 + 16 * v15 + 12);
      --v16;
      --v15;
      if (v18) {
        goto LABEL_14;
      }
    }
    int v18 = *(_DWORD *)(v8 + 12);
    if (!v18) {
      goto LABEL_12;
    }
    int v16 = 1;
LABEL_14:
    uint64_t v19 = *(void *)(*(void *)(v8 + 16 * v17) + 8 * (v18 - 1));
    if (v16 != v14)
    {
      unsigned int v88 = ~v16 + v7;
      do
      {
        uint64_t v19 = *(void *)((v19 & 0xFFFFFFFFFFFFFFC0) + 8 * (v19 & 0x3F));
        --v88;
      }
      while (v88);
    }
    if (!v19)
    {
LABEL_12:
      int v12 = 0;
      **(void **)a1 = a2;
      goto LABEL_23;
    }
    if (*(unsigned char *)(v19 + 176)
      || (unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFC0,
          uint64_t v21 = v19 & 0x3F,
          int v22 = (unint64_t *)((v19 & 0xFFFFFFFFFFFFFFC0) + 16 * v21 + 8),
          *(void *)((v19 & 0xFFFFFFFFFFFFFFC0) + 16 * v21 + 8) + 1 != a2))
    {
LABEL_22:
      int v12 = 0;
    }
    else
    {
      llvm::IntervalMapImpl::Path::moveLeft(v6, v14);
      if (*(void *)v13 > a3 && (a3 + 1 != *(void *)v13 || *(unsigned char *)(v13 + 176)))
      {
        unsigned int v29 = a1[4] - 1;
        *int v22 = a3;
LABEL_27:
        return sub_1CC4DB5F8((uint64_t)a1, v29, a3);
      }
      a2 = *(void *)(v20 + 16 * v21);
      sub_1CC4DB648((uint64_t)a1, 0);
      uint64_t v8 = *((void *)a1 + 1);
      uint64_t v10 = a1[4];
      int v12 = *(_DWORD *)(v8 + 16 * v10 - 4);
    }
  }
LABEL_23:
  uint64_t v23 = v8 + 16 * v10;
  uint64_t v24 = *(unsigned int *)(v23 - 8);
  BOOL v25 = v12 == v24;
  uint64_t result = sub_1CC4DA6B0(*(void *)(v23 - 16), (_DWORD *)(v23 - 4), v24, a2, a3);
  if (result < 0xC) {
    goto LABEL_24;
  }
  int v31 = a1[4];
  memset(v100, 0, sizeof(v100));
  uint64_t v32 = *((void *)a1 + 1);
  uint64_t v33 = (v31 - 1);
  unsigned int v34 = *(_DWORD *)(v32 + 16 * v33 + 12);
  if (v31 == 1)
  {
    int v39 = 0;
    LODWORD(v38) = 0;
  }
  else
  {
    unsigned int v35 = v31 - 2;
    int v36 = v31;
    while (1)
    {
      uint64_t v37 = v35;
      if (!v35) {
        break;
      }
      LODWORD(v38) = *(_DWORD *)(v32 + 16 * v35 + 12);
      --v36;
      --v35;
      if (v38) {
        goto LABEL_38;
      }
    }
    LODWORD(v38) = *(_DWORD *)(v32 + 12);
    int v36 = 1;
    if (!v38)
    {
      int v39 = 0;
      goto LABEL_43;
    }
LABEL_38:
    uint64_t v38 = *(void *)(*(void *)(v32 + 16 * v37) + 8 * (v38 - 1));
    if (v36 != v33)
    {
      int v90 = ~v36 + v31;
      do
      {
        uint64_t v38 = *(void *)((v38 & 0xFFFFFFFFFFFFFFC0) + 8 * (v38 & 0x3F));
        --v90;
      }
      while (v90);
    }
    if (v38)
    {
      LOBYTE(v36) = 0;
      int v39 = (v38 & 0x3F) + 1;
      v101[0] = v39;
      v34 += v39;
      *(void *)&v100[0] = v38 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v38) = 1;
      goto LABEL_43;
    }
    int v39 = 0;
  }
  LOBYTE(v36) = 1;
LABEL_43:
  uint64_t v40 = v32 + 16 * v33;
  int v41 = *(_DWORD *)(v40 + 8);
  v101[v38] = v41;
  int v42 = v41 + v39;
  unsigned int v43 = v38 + 1;
  *(void *)((unint64_t)v100 | (8 * v38)) = *(void *)v40;
  if (v31 != 1)
  {
    unsigned int v44 = v31 - 2;
    int v45 = v31;
    while (1)
    {
      uint64_t v46 = v44;
      if (!v44) {
        break;
      }
      int v47 = *(_DWORD *)(v32 + 16 * v44 + 12);
      int v48 = *(_DWORD *)(v32 + 16 * v44 + 8) - 1;
      --v45;
      --v44;
      if (v47 != v48) {
        goto LABEL_49;
      }
    }
    int v47 = *(_DWORD *)(v32 + 12);
    int v48 = *(_DWORD *)(v32 + 8) - 1;
    int v45 = 1;
LABEL_49:
    if (v47 != v48)
    {
      uint64_t v49 = *(void *)(*(void *)(v32 + 16 * v46) + 8 * (v47 + 1));
      if (v45 != v33)
      {
        int v89 = ~v45 + v31;
        do
        {
          uint64_t v49 = *(void *)(v49 & 0xFFFFFFFFFFFFFFC0);
          --v89;
        }
        while (v89);
      }
      if (v49)
      {
        int v50 = (v49 & 0x3F) + 1;
        v101[v43] = v50;
        v42 += v50;
        *((void *)v100 + v43) = v49 & 0xFFFFFFFFFFFFFFC0;
        unsigned int v43 = v38 | 2;
      }
    }
  }
  uint64_t v97 = a2;
  uint64_t v98 = a3;
  unsigned int v51 = v42 + 1;
  if (v42 + 1 <= 11 * v43)
  {
    LODWORD(v52) = 0;
  }
  else
  {
    if (v43 == 1) {
      uint64_t v52 = 1;
    }
    else {
      uint64_t v52 = v43 - 1;
    }
    v101[v43] = v101[v52];
    *((void *)v100 + v43) = *((void *)v100 + v52);
    v101[v52] = 0;
    uint64_t v53 = *(void *)(*(void *)a1 + 200);
    unint64_t v54 = *(void *)v53;
    if (*(void *)v53)
    {
      *(void *)uint64_t v53 = *(void *)v54;
    }
    else
    {
      *(void *)(v53 + 88) += 192;
      uint64_t v87 = *(void *)(v53 + 8);
      if (((v87 + 63) & 0xFFFFFFFFFFFFFFC0) - v87 + 192 > *(void *)(v53 + 16) - v87)
      {
        unsigned int v91 = v43;
        unsigned int v92 = v34;
        unsigned int v93 = *(_DWORD *)(v53 + 32) >> 7;
        if (v93 >= 0x1E) {
          LOBYTE(v93) = 30;
        }
        uint64_t v94 = 4096 << v93;
        uint64_t v95 = (char *)operator new(4096 << v93, (std::align_val_t)8uLL);
        unsigned int v96 = *(_DWORD *)(v53 + 32);
        if (v96 >= *(_DWORD *)(v53 + 36)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v53 + 24) + 8 * v96) = v95;
        ++*(_DWORD *)(v53 + 32);
        unint64_t v54 = (unint64_t)(v95 + 63) & 0xFFFFFFFFFFFFFFC0;
        *(void *)(v53 + 8) = v54 + 192;
        *(void *)(v53 + 16) = &v95[v94];
        unsigned int v34 = v92;
        unsigned int v43 = v91;
      }
      else
      {
        unint64_t v54 = (v87 + 63) & 0xFFFFFFFFFFFFFFC0;
        *(void *)(v53 + 8) = v54 + 192;
      }
    }
    *(_OWORD *)(v54 + 160) = 0u;
    *(_OWORD *)(v54 + 176) = 0u;
    *(_OWORD *)(v54 + 128) = 0u;
    *(_OWORD *)(v54 + 144) = 0u;
    *(_OWORD *)(v54 + 96) = 0u;
    *(_OWORD *)(v54 + 112) = 0u;
    *(_OWORD *)(v54 + 64) = 0u;
    *(_OWORD *)(v54 + 80) = 0u;
    *(_OWORD *)(v54 + 32) = 0u;
    *(_OWORD *)(v54 + 48) = 0u;
    ++v43;
    *(_OWORD *)unint64_t v54 = 0u;
    *(_OWORD *)(v54 + 16) = 0u;
    *((void *)v100 + v52) = v54;
  }
  unint64_t v55 = 0;
  unsigned int v56 = 0;
  unsigned int v57 = 0;
  uint64_t v58 = v43;
  int v59 = v43;
  do
  {
    if (v55 >= v51 % v43) {
      int v60 = v51 / v43;
    }
    else {
      int v60 = v51 / v43 + 1;
    }
    v99[v55] = v60;
    unsigned int v61 = v34 - v56;
    v56 += v60;
    if (v59 == v43 && v56 > v34)
    {
      int v59 = v55;
      unsigned int v57 = v61;
    }
    ++v55;
  }
  while (v43 != v55);
  --v99[v59];
  sub_1CD590054((uint64_t)v100, v43, (uint64_t)v101, (uint64_t)v99);
  if ((v36 & 1) == 0) {
    llvm::IntervalMapImpl::Path::moveLeft(v6, v33);
  }
  uint64_t v62 = 0;
  for (int i = v59; ; --i)
  {
    uint64_t v64 = *((void *)v100 + v62);
    int v65 = v99[v62];
    uint64_t v66 = (v65 - 1);
    uint64_t v67 = *(void *)(v64 + 16 * v66 + 8);
    if (v52 && v62 == v52)
    {
      LODWORD(v33) = v33 + sub_1CD5901A0((llvm::IntervalMapImpl::Path *)a1, v33, v64 & 0xFFFFFFFFFFFFFFC0 | v66, v67);
    }
    else
    {
      uint64_t v68 = *(void *)v6;
      *(_DWORD *)(*(void *)v6 + 16 * v33 + 8) = v65;
      if (v33) {
        *(void *)(*(void *)(v68 + 16 * (v33 - 1))
      }
                  + 8 * *(unsigned int *)(v68 + 16 * (v33 - 1) + 12)) = *(void *)(*(void *)(v68 + 16 * (v33 - 1)) + 8 * *(unsigned int *)(v68 + 16 * (v33 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v66;
      sub_1CC4DB5F8((uint64_t)a1, v33, v67);
    }
    if (v62 + 1 == v58) {
      break;
    }
    int v69 = 0;
    uint64_t v70 = 0;
    ++v62;
    uint64_t v71 = *(void *)v6;
    unsigned int v72 = (int *)(*(void *)v6 + 16 * (v33 - 1) + 12);
    while (1)
    {
      uint64_t v73 = v70;
      int v74 = v69;
      if (v33 + v70 == 1) {
        break;
      }
      int v75 = *(v72 - 1);
      int v76 = *v72;
      --v70;
      v72 -= 4;
      --v69;
      if (v76 != v75 - 1)
      {
        uint64_t v77 = (v33 - 1) + v73;
        goto LABEL_82;
      }
    }
    uint64_t v77 = 0;
    int v75 = *(_DWORD *)(v71 + 8);
    int v76 = *(_DWORD *)(v71 + 12);
LABEL_82:
    unsigned int v78 = v76 + 1;
    *(_DWORD *)(v71 + 16 * v77 + 12) = v78;
    if (v78 != v75)
    {
      uint64_t v79 = *(void *)(*(void *)(v71 + 16 * v77) + 8 * v78);
      if (v73)
      {
        do
        {
          uint64_t v81 = *(void *)v6 + 16 * (v33 + v74);
          *(void *)uint64_t v81 = v79 & 0xFFFFFFFFFFFFFFC0;
          *(_DWORD *)(v81 + 8) = (v79 & 0x3F) + 1;
          *(_DWORD *)(v81 + 12) = 0;
          uint64_t v79 = *(void *)(v79 & 0xFFFFFFFFFFFFFFC0);
          BOOL v82 = __CFADD__(v74++, 1);
        }
        while (!v82);
        uint64_t v71 = *(void *)v6;
      }
      uint64_t v80 = (unint64_t *)(v71 + 16 * v33);
      unint64_t *v80 = v79 & 0xFFFFFFFFFFFFFFC0;
      v80[1] = (v79 & 0x3F) + 1;
    }
  }
  if (v59 != v62)
  {
    do
    {
      llvm::IntervalMapImpl::Path::moveLeft(v6, v33);
      BOOL v82 = __CFADD__(i++, 1);
    }
    while (!v82);
  }
  uint64_t v83 = *((void *)a1 + 1);
  *(_DWORD *)(v83 + 16 * v33 + 12) = v57;
  uint64_t v84 = (_DWORD *)(v83 + 16 * a1[4]);
  int v85 = *--v84;
  uint64_t v86 = *(v84 - 1);
  BOOL v25 = v85 == v86;
  a3 = v98;
  uint64_t result = sub_1CC4DA6B0(*(void *)(v84 - 3), v84, v86, v97, v98);
LABEL_24:
  int v27 = a1[4];
  uint64_t v28 = *((void *)a1 + 1);
  unsigned int v29 = v27 - 1;
  *(_DWORD *)(v28 + 16 * (v27 - 1) + 8) = result;
  if (v27 != 1)
  {
    uint64_t v30 = v28 + 16 * (v27 - 2);
    *(void *)(*(void *)v30 + 8 * *(unsigned int *)(v30 + 12)) = *(void *)(*(void *)v30
                                                                                + 8 * *(unsigned int *)(v30 + 12)) & 0xFFFFFFFFFFFFFFC0 | (result - 1);
  }
  if (v25) {
    goto LABEL_27;
  }
  return result;
}

unint64_t sub_1CC4DB42C(uint64_t a1, unsigned int *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)2, *(_DWORD *)(a1 + 196), 0xBu, 0, v19, a2, 1);
  char v4 = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  v18[0] = 0;
  v18[1] = 0;
  long long v7 = 0uLL;
  do
  {
    char v8 = v4;
    uint64_t v9 = *(uint64_t **)(a1 + 200);
    uint64_t v10 = *v9;
    if (*v9)
    {
      *uint64_t v9 = *(void *)v10;
    }
    else
    {
      uint64_t v10 = sub_1CB906F34(v9 + 1, 192, 6);
      long long v7 = 0uLL;
    }
    *(_OWORD *)(v10 + 160) = v7;
    *(_OWORD *)(v10 + 176) = v7;
    *(_OWORD *)(v10 + 128) = v7;
    *(_OWORD *)(v10 + 144) = v7;
    *(_OWORD *)(v10 + 96) = v7;
    *(_OWORD *)(v10 + 112) = v7;
    *(_OWORD *)(v10 + 64) = v7;
    *(_OWORD *)(v10 + 80) = v7;
    *(_OWORD *)(v10 + 32) = v7;
    *(_OWORD *)(v10 + 48) = v7;
    *(_OWORD *)uint64_t v10 = v7;
    *(_OWORD *)(v10 + 16) = v7;
    unsigned int v11 = v19[v5];
    if (v11)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = (v6 + v12);
        *(_OWORD *)(v10 + 16 * v12) = *(_OWORD *)(a1 + 16 * v13);
        *(unsigned char *)(v10 + v12++ + 176) = *(unsigned char *)(a1 + v13 + 176);
      }
      while (v11 != v12);
    }
    v6 += v11;
    v18[v5] = v10 & 0xFFFFFFFFFFFFFFC0 | (v11 - 1);
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) == 0);
  uint64_t v14 = 0;
  *(_DWORD *)(a1 + 192) = 1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  do
  {
    uint64_t v15 = v18[v14];
    uint64_t v16 = a1 + 8 * v14;
    *(void *)(v16 + 96) = *(void *)((v15 & 0xFFFFFFFFFFFFFFC0) + 16 * (v19[v14] - 1) + 8);
    *(void *)(v16 + 8) = v15;
    ++v14;
  }
  while (v14 != 2);
  *(void *)a1 = *(void *)(v18[0] & 0xFFFFFFFFFFFFFFC0);
  *(_DWORD *)(a1 + 196) = 2;
  return v3;
}

uint64_t sub_1CC4DB5F8(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = 16 * a2;
    while (1)
    {
      uint64_t v5 = v4 - 16;
      if (v4 == 16) {
        break;
      }
      uint64_t v6 = v3 + v4;
      uint64_t v7 = *(void *)(v6 - 16);
      uint64_t v9 = v6 - 8;
      LODWORD(v6) = *(_DWORD *)(v6 - 8);
      uint64_t v8 = *(unsigned int *)(v9 + 4);
      *(void *)(v7 + 8 * v8 + 96) = a3;
      LODWORD(v7) = v6 - 1;
      uint64_t v4 = v5;
      if (v8 != v7) {
        return result;
      }
    }
    *(void *)(*(void *)v3 + 8 * *(unsigned int *)(v3 + 12) + 88) = a3;
  }
  return result;
}

uint64_t sub_1CC4DB648(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v6 = *(unsigned int *)(result + 16);
  uint64_t v7 = v4 + 16 * v6;
  uint64_t v8 = *(void **)(v7 - 16);
  int v9 = *(_DWORD *)(v7 - 8);
  if (v9 == 1)
  {
    int v31 = *(void **)(v5 + 200);
    void *v8 = *v31;
    void *v31 = v8;
    uint64_t result = (uint64_t)sub_1CD58FE28((_DWORD *)result, *(_DWORD *)(v5 + 192));
    if (a2)
    {
      if (*(_DWORD *)(v5 + 192))
      {
        uint64_t v32 = *(unsigned int *)(v3 + 16);
        if (v32)
        {
          uint64_t v33 = *(void *)(v3 + 8);
          if (*(_DWORD *)(v33 + 12) < *(_DWORD *)(v33 + 8))
          {
            unsigned int v34 = (int *)(v33 + 12);
            uint64_t v35 = *(unsigned int *)(v3 + 16);
            while (1)
            {
              int v36 = *v34;
              v34 += 4;
              if (v36) {
                break;
              }
              if (!--v35)
              {
                uint64_t v28 = *(void **)(v33 + 16 * v32 - 16);
                goto LABEL_23;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(v7 - 4);
    if (v10 + 1 != v9)
    {
      do
      {
        *(_OWORD *)&v8[2 * v10] = *(_OWORD *)&v8[2 * v10 + 2];
        *((unsigned char *)v8 + v10 + 176) = *((unsigned char *)v8 + v10 + 177);
        ++v10;
      }
      while (v9 - 1 != v10);
      uint64_t v4 = *(void *)(result + 8);
      uint64_t v6 = *(unsigned int *)(result + 16);
      int v9 = *(_DWORD *)(v4 + 16 * v6 - 8);
    }
    uint64_t v11 = v4 + 16 * v6;
    uint64_t v12 = *(unsigned int *)(v5 + 192);
    *(_DWORD *)(v4 + 16 * v12 + 8) = v9 - 1;
    if (v12)
    {
      uint64_t v13 = v4 + 16 * (v12 - 1);
      *(void *)(*(void *)v13 + 8 * *(unsigned int *)(v13 + 12)) = *(void *)(*(void *)v13
                                                                                  + 8 * *(unsigned int *)(v13 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v9 - 2);
    }
    if (*(_DWORD *)(v11 - 4) == v9 - 1)
    {
      uint64_t result = sub_1CC4DB5F8(result, v12, v8[2 * (v9 - 2) + 1]);
      int v17 = 0;
      uint64_t v18 = *(unsigned int *)(v5 + 192);
      uint64_t v19 = *(void *)(v3 + 8);
      int v20 = v18 - 1;
      while (1)
      {
        int v21 = v17;
        uint64_t v22 = (v20 + v17);
        if (!(v20 + v17)) {
          break;
        }
        int v24 = *(_DWORD *)(v19 + 16 * v22 + 8);
        int v23 = *(_DWORD *)(v19 + 16 * v22 + 12);
        --v17;
        if (v23 != v24 - 1) {
          goto LABEL_18;
        }
      }
      uint64_t v22 = 0;
      int v24 = *(_DWORD *)(v19 + 8);
      int v23 = *(_DWORD *)(v19 + 12);
LABEL_18:
      unsigned int v25 = v23 + 1;
      *(_DWORD *)(v19 + 16 * v22 + 12) = v25;
      if (v25 != v24)
      {
        uint64_t v26 = *(void *)(*(void *)(v19 + 16 * v22) + 8 * v25);
        if (v21)
        {
          do
          {
            uint64_t v29 = *(void *)(v3 + 8) + 16 * (v18 + v21);
            *(void *)uint64_t v29 = v26 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v29 + 8) = (v26 & 0x3F) + 1;
            *(_DWORD *)(v29 + 12) = 0;
            uint64_t v26 = *(void *)(v26 & 0xFFFFFFFFFFFFFFC0);
          }
          while (!__CFADD__(v21++, 1));
          uint64_t v19 = *(void *)(v3 + 8);
        }
        int v27 = (unint64_t *)(v19 + 16 * v18);
        *int v27 = v26 & 0xFFFFFFFFFFFFFFC0;
        v27[1] = (v26 & 0x3F) + 1;
      }
    }
    else if (a2)
    {
      if (v6)
      {
        uint64_t v14 = (int *)(v4 + 12);
        uint64_t v15 = v6;
        while (1)
        {
          int v16 = *v14;
          v14 += 4;
          if (v16) {
            break;
          }
          if (!--v15) {
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_22:
        uint64_t v28 = *(void **)(v11 - 16);
LABEL_23:
        *(void *)uint64_t v5 = *v28;
      }
    }
  }
  return result;
}

uint64_t sub_1CC4DB878(llvm::IntervalMapImpl::Path *a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IntervalMapImpl::Path *)((char *)a1 + 8);
  uint64_t v3 = *((void *)a1 + 1);
  memset(v64, 0, sizeof(v64));
  unsigned int v5 = *(_DWORD *)(v3 + 16 * a2 + 12);
  if (!a2)
  {
    int v8 = 0;
    LODWORD(v10) = 0;
    goto LABEL_11;
  }
  int v6 = -1;
  while (1)
  {
    uint64_t v7 = a2 + v6;
    if (!(a2 + v6)) {
      break;
    }
    int v8 = *(_DWORD *)(v3 + 16 * v7 + 12);
    --v6;
    if (v8)
    {
      int v9 = a2 + v6 + 2;
      goto LABEL_8;
    }
  }
  int v8 = *(_DWORD *)(v3 + 12);
  int v9 = 1;
  if (!v8)
  {
    LODWORD(v10) = 0;
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v10 = *(void *)(*(void *)(v3 + 16 * v7) + 8 * (v8 - 1));
  if (v9 != a2)
  {
    unsigned int v56 = a2 - v9;
    do
    {
      uint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFC0) + 8 * (v10 & 0x3F));
      --v56;
    }
    while (v56);
  }
  if (!v10)
  {
    int v8 = 0;
LABEL_11:
    LOBYTE(v9) = 1;
    goto LABEL_13;
  }
  LOBYTE(v9) = 0;
  int v8 = (v10 & 0x3F) + 1;
  v65[0] = v8;
  v5 += v8;
  *(void *)&v64[0] = v10 & 0xFFFFFFFFFFFFFFC0;
  LODWORD(v10) = 1;
LABEL_13:
  uint64_t v11 = v3 + 16 * a2;
  int v12 = *(_DWORD *)(v11 + 8);
  v65[v10] = v12;
  int v13 = v12 + v8;
  unsigned int v14 = v10 + 1;
  *(void *)((unint64_t)v64 | (8 * v10)) = *(void *)v11;
  if (a2)
  {
    int v15 = -1;
    while (1)
    {
      uint64_t v16 = a2 + v15;
      if (!(a2 + v15)) {
        break;
      }
      int v17 = *(_DWORD *)(v3 + 16 * v16 + 12);
      int v18 = *(_DWORD *)(v3 + 16 * v16 + 8) - 1;
      --v15;
      if (v17 != v18)
      {
        int v19 = a2 + v15 + 2;
        goto LABEL_19;
      }
    }
    int v17 = *(_DWORD *)(v3 + 12);
    int v18 = *(_DWORD *)(v3 + 8) - 1;
    int v19 = 1;
LABEL_19:
    if (v17 != v18)
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 16 * v16) + 8 * (v17 + 1));
      if (v19 != a2)
      {
        unsigned int v55 = a2 - v19;
        do
        {
          uint64_t v20 = *(void *)(v20 & 0xFFFFFFFFFFFFFFC0);
          --v55;
        }
        while (v55);
      }
      if (v20)
      {
        int v21 = (v20 & 0x3F) + 1;
        v65[v14] = v21;
        v13 += v21;
        *((void *)v64 + v14) = v20 & 0xFFFFFFFFFFFFFFC0;
        unsigned int v14 = v10 | 2;
      }
    }
  }
  unsigned int v22 = v13 + 1;
  if (v13 + 1 <= 12 * v14)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    if (v14 == 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v14 - 1;
    }
    v65[v14] = v65[v23];
    *((void *)v64 + v14) = *((void *)v64 + v23);
    v65[v23] = 0;
    uint64_t v24 = *(void *)(*(void *)a1 + 200);
    unint64_t v25 = *(void *)v24;
    if (*(void *)v24)
    {
      *(void *)uint64_t v24 = *(void *)v25;
    }
    else
    {
      *(void *)(v24 + 88) += 192;
      uint64_t v26 = *(void *)(v24 + 8);
      if (((v26 + 63) & 0xFFFFFFFFFFFFFFC0) - v26 + 192 > *(void *)(v24 + 16) - v26)
      {
        unsigned int v57 = *(_DWORD *)(v24 + 32) >> 7;
        if (v57 >= 0x1E) {
          LOBYTE(v57) = 30;
        }
        uint64_t v58 = 4096 << v57;
        int v59 = (char *)operator new(4096 << v57, (std::align_val_t)8uLL);
        unsigned int v60 = *(_DWORD *)(v24 + 32);
        if (v60 >= *(_DWORD *)(v24 + 36)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v24 + 24) + 8 * v60) = v59;
        ++*(_DWORD *)(v24 + 32);
        unint64_t v25 = (unint64_t)(v59 + 63) & 0xFFFFFFFFFFFFFFC0;
        *(void *)(v24 + 8) = v25 + 192;
        *(void *)(v24 + 16) = &v59[v58];
      }
      else
      {
        unint64_t v25 = (v26 + 63) & 0xFFFFFFFFFFFFFFC0;
        *(void *)(v24 + 8) = v25 + 192;
      }
    }
    *(_OWORD *)(v25 + 160) = 0u;
    *(_OWORD *)(v25 + 176) = 0u;
    *(_OWORD *)(v25 + 128) = 0u;
    *(_OWORD *)(v25 + 144) = 0u;
    *(_OWORD *)(v25 + 96) = 0u;
    *(_OWORD *)(v25 + 112) = 0u;
    *(_OWORD *)(v25 + 64) = 0u;
    *(_OWORD *)(v25 + 80) = 0u;
    *(_OWORD *)(v25 + 32) = 0u;
    *(_OWORD *)(v25 + 48) = 0u;
    ++v14;
    *(_OWORD *)unint64_t v25 = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
    *((void *)v64 + v23) = v25;
  }
  unint64_t v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  uint64_t v30 = v14;
  int v31 = v14;
  do
  {
    if (v27 >= v22 % v14) {
      int v32 = v22 / v14;
    }
    else {
      int v32 = v22 / v14 + 1;
    }
    v63[v27] = v32;
    unsigned int v33 = v5 - v28;
    v28 += v32;
    if (v31 == v14 && v28 > v5)
    {
      int v31 = v27;
      unsigned int v29 = v33;
    }
    ++v27;
  }
  while (v14 != v27);
  --v63[v31];
  sub_1CD59064C((uint64_t)v64, v14, (uint64_t)v65, (uint64_t)v63);
  if ((v9 & 1) == 0) {
    llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
  }
  uint64_t v34 = 0;
  LOBYTE(v61) = 0;
  for (int i = v31; ; --i)
  {
    int v36 = v63[v34];
    uint64_t v37 = (v36 - 1);
    uint64_t v38 = *(void *)(*((void *)v64 + v34) + 8 * v37 + 96);
    if (v23 && v34 == v23)
    {
      int v61 = sub_1CD5901A0(a1);
      v2 += v61;
    }
    else
    {
      uint64_t v39 = *(void *)v4;
      *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v36;
      if (v2) {
        *(void *)(*(void *)(v39 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v39 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v39 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v39 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v37;
      }
      sub_1CC4DB5F8((uint64_t)a1, v2, v38);
    }
    if (v34 + 1 == v30) {
      break;
    }
    int v40 = 0;
    uint64_t v41 = 0;
    ++v34;
    uint64_t v42 = *(void *)v4;
    unsigned int v43 = (int *)(*(void *)v4 + 16 * (v2 - 1) + 12);
    while (1)
    {
      uint64_t v44 = v41;
      int v45 = v40;
      if (v2 + v41 == 1) {
        break;
      }
      int v46 = *(v43 - 1);
      int v47 = *v43;
      --v41;
      v43 -= 4;
      --v40;
      if (v47 != v46 - 1)
      {
        uint64_t v48 = v2 - 1 + v44;
        goto LABEL_54;
      }
    }
    uint64_t v48 = 0;
    int v46 = *(_DWORD *)(v42 + 8);
    int v47 = *(_DWORD *)(v42 + 12);
LABEL_54:
    unsigned int v49 = v47 + 1;
    *(_DWORD *)(v42 + 16 * v48 + 12) = v49;
    if (v49 != v46)
    {
      uint64_t v50 = *(void *)(*(void *)(v42 + 16 * v48) + 8 * v49);
      if (v44)
      {
        do
        {
          uint64_t v52 = *(void *)v4 + 16 * (v2 + v45);
          *(void *)uint64_t v52 = v50 & 0xFFFFFFFFFFFFFFC0;
          *(_DWORD *)(v52 + 8) = (v50 & 0x3F) + 1;
          *(_DWORD *)(v52 + 12) = 0;
          uint64_t v50 = *(void *)(v50 & 0xFFFFFFFFFFFFFFC0);
          BOOL v53 = __CFADD__(v45++, 1);
        }
        while (!v53);
        uint64_t v42 = *(void *)v4;
      }
      unsigned int v51 = (unint64_t *)(v42 + 16 * v2);
      *unsigned int v51 = v50 & 0xFFFFFFFFFFFFFFC0;
      v51[1] = (v50 & 0x3F) + 1;
    }
  }
  if (v31 != v34)
  {
    do
    {
      llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
      BOOL v53 = __CFADD__(i++, 1);
    }
    while (!v53);
  }
  *(_DWORD *)(*(void *)v4 + 16 * v2 + 12) = v29;
  return v61 & 1;
}

uint64_t sub_1CC4DBE14(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      unsigned int v5 = *(const void **)a2;
      if (*(void *)a2 == a2 + 16)
      {
        if (v4 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), v5, 8 * v4);
        *(_DWORD *)(a1 + 8) = v4;
      }
      else
      {
        *(void *)a1 = v5;
        int v6 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v6;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  return a1;
}

void sub_1CC4DBED8(int *a1, uint64_t a2, uint64_t a3)
{
  sub_1CC4D8574(a1);
  while (a2 != a3)
  {
    if (*(void *)a2 || *(unsigned char *)(a2 + 24) && *(_OWORD *)(a2 + 8) != 0 || *(void *)(a2 + 32))
    {
      uint64_t v10 = 0;
      sub_1CC4D97E0((uint64_t)a1, (uint64_t *)a2, (uint64_t *)&v10);
      int v6 = v10;
      uint64_t v7 = *(void *)(a2 + 32);
      long long v8 = *(_OWORD *)(a2 + 16);
      *uint64_t v10 = *(_OWORD *)a2;
      v6[1] = v8;
      *((void *)v6 + 4) = v7;
      sub_1CC4DBE14((uint64_t)v6 + 40, a2 + 40);
      *a1 += 2;
      int v9 = *(void **)(a2 + 40);
      if ((void *)(a2 + 56) != v9) {
        free(v9);
      }
    }
    a2 += 72;
  }
}

unint64_t sub_1CC4DBF9C(uint64_t *a1, unint64_t *a2)
{
  if (a1[12])
  {
    sub_1CD5908A4((uint64_t)(a1 + 10), a2, a2);
    return ((unint64_t)v8 << 32) | 1;
  }
  else
  {
    uint64_t v2 = *a1;
    uint64_t v3 = *((unsigned int *)a1 + 2);
    unint64_t v4 = *a2;
    if (v3)
    {
      unint64_t v5 = a2[1];
      uint64_t v9 = 16 * v3;
      uint64_t v10 = (void *)(v2 + 8);
      while (*(v10 - 1) != v4 || *v10 != v5)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9) {
          goto LABEL_14;
        }
      }
      if (v9) {
        return 1;
      }
LABEL_14:
      if (v3 <= 3) {
        goto LABEL_4;
      }
      uint64_t v12 = (uint64_t)(a1 + 10);
      do
      {
        int v13 = (unint64_t *)(*a1 + 16 * v3 - 16);
        sub_1CD5908A4(v12, v13, v13);
        LODWORD(v3) = *((_DWORD *)a1 + 2) - 1;
        *((_DWORD *)a1 + 2) = v3;
      }
      while (v3);
      sub_1CD5908A4(v12, a2, a2);
    }
    else
    {
      unint64_t v5 = a2[1];
LABEL_4:
      if (v3 >= *((_DWORD *)a1 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v6 = (unint64_t *)(v2 + 16 * v3);
      *int v6 = v4;
      v6[1] = v5;
      ++*((_DWORD *)a1 + 2);
    }
    return 0x100000001;
  }
}

uint64_t sub_1CC4DC0CC(uint64_t a1, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v6 = (void *)(*(void *)a1 + 112 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unsigned __int8 v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned __int8 v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        int v6 = (void *)(*(void *)a1 + 112 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*a2 == *v6) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_1CC4DC164@<X0>(_DWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t result = sub_1CC4DC0CC((uint64_t)a1, a2, &v16);
  int v9 = v16;
  if (result)
  {
    char v14 = 0;
  }
  else
  {
    int v9 = sub_1CC4DC260(a1, (uint64_t)a2, a2, v16);
    *int v9 = *a2;
    v9[1] = v9 + 3;
    uint64_t result = (uint64_t)(v9 + 1);
    v9[2] = 0x400000000;
    if (*(_DWORD *)(a3 + 8)) {
      uint64_t result = sub_1CC4DC52C(result, a3);
    }
    v9[11] = *(void *)(a3 + 80);
    BOOL v10 = (void *)(a3 + 88);
    uint64_t v11 = *(void *)(a3 + 88);
    v9[12] = v11;
    uint64_t v12 = v9 + 12;
    uint64_t v13 = *(void *)(a3 + 96);
    v9[13] = v13;
    if (v13)
    {
      *(void *)(v11 + 16) = v12;
      *(void *)(a3 + 80) = v10;
      char v14 = 1;
      *BOOL v10 = 0;
      *(void *)(a3 + 96) = 0;
    }
    else
    {
      v9[11] = v12;
      char v14 = 1;
    }
  }
  uint64_t v15 = *(void *)a1 + 112 * a1[4];
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v15;
  *(unsigned char *)(a4 + 16) = v14;
  return result;
}

void *sub_1CC4DC260(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC4DC314((uint64_t)a1, v7);
  int v9 = 0;
  sub_1CC4DC0CC((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CC4DC314(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(112 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC4DC3EC(a1, v4, v4 + 112 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 112 * v10;
    do
    {
      void *result = -4096;
      result += 14;
      v11 -= 112;
    }
    while (v11);
  }
  return result;
}

void sub_1CC4DC3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 112 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 14;
      v8 -= 112;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v17 = 0;
        sub_1CC4DC0CC(a1, (void *)v4, &v17);
        int v9 = v17;
        void *v17 = *(void *)v4;
        v9[1] = v9 + 3;
        v9[2] = 0x400000000;
        if (*(_DWORD *)(v4 + 16)) {
          sub_1CC4DC52C((uint64_t)(v9 + 1), v4 + 8);
        }
        uint64_t v10 = (void *)(v4 + 88);
        v9[11] = *(void *)(v4 + 88);
        uint64_t v11 = (void *)(v4 + 96);
        uint64_t v12 = *(void *)(v4 + 96);
        v9[12] = v12;
        uint64_t v13 = v9 + 12;
        uint64_t v14 = *(void *)(v4 + 104);
        v9[13] = v14;
        if (v14)
        {
          uint64_t v15 = 0;
          *(void *)(v12 + 16) = v13;
          *uint64_t v10 = v11;
          *uint64_t v11 = 0;
          *(void *)(v4 + 104) = 0;
        }
        else
        {
          v9[11] = v13;
          uint64_t v15 = (void *)*v11;
        }
        ++*(_DWORD *)(a1 + 8);
        sub_1CD3C5048((uint64_t)v10, v15);
        uint64_t v16 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v16) {
          free(v16);
        }
      }
      v4 += 112;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CC4DC52C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2 + 16;
    unsigned int v3 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *(const void **)a2, 16 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          uint64_t v16 = a2;
          memmove(*(void **)a1, v3, 16 * v7);
          uint64_t v8 = v15;
          a2 = v16;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 16 * v8), (const void *)(*(void *)a2 + 16 * v8), *(void *)a2 + 16 * v9 - (*(void *)a2 + 16 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v12 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v12);
        unsigned int v3 = *(const void **)v11;
      }
      *(void *)a1 = v3;
      uint64_t v13 = v11;
      uint64_t v14 = *(void *)(v11 + 8);
      uint64_t v6 = (_DWORD *)(v11 + 8);
      *(void *)(a1 + 8) = v14;
      *(void *)uint64_t v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
    }
    *uint64_t v6 = 0;
  }
  return a1;
}

uint64_t sub_1CC4DC664(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3) {
        memmove(*(void **)a1, *(const void **)a2, 16 * v3);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = a2;
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
        uint64_t v5 = v8;
        a2 = v9;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 16 * v5), (const void *)(*(void *)a2 + 16 * v5), *(void *)a2 + 16 * v6 - (*(void *)a2 + 16 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CC4DC748(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_1CD590950((void **)a1, v3, v5 + 4, (_OWORD *)v5 + 2);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t sub_1CC4DC7E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CC4DC8E0((uint64_t *)a1, a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC4DC868(a1, v12, (uint64_t)a2, a3);
    uint64_t v9 = (uint64_t *)result;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 56 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t *sub_1CC4DC868(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1CC4DCA2C(a1, a3, (void *)a3, a2);
  uint64_t *result = *(void *)a3;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a3 + 8);
  result[3] = (uint64_t)(result + 5);
  result[4] = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    uint64_t v7 = result;
    sub_1CC4DC52C((uint64_t)(result + 3), a4);
    return v7;
  }
  return result;
}

uint64_t sub_1CC4DC8E0(uint64_t *a1, void *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    goto LABEL_15;
  }
  uint64_t v6 = *a1;
  unsigned int v7 = sub_1CC4DC9D4((uint64_t)a2);
  BOOL v8 = 0;
  int v9 = v4 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v7 & v9;
    uint64_t v12 = (uint64_t *)(v6 + 56 * (v7 & v9));
    uint64_t v13 = *v12;
    if (*a2 == *v12 && a2[1] == v12[1] && a2[2] == v12[2])
    {
      uint64_t result = 1;
      goto LABEL_15;
    }
    if (v13 == -4096) {
      break;
    }
    if (v13 != -8192) {
      goto LABEL_10;
    }
    BOOL v15 = v12[1] == -2 && v12[2] == -2;
LABEL_11:
    if (v15 && v8 == 0) {
      BOOL v8 = (uint64_t *)(v6 + 56 * v11);
    }
    unsigned int v7 = v11 + i;
  }
  if (v12[1] != -1 || v12[2] != -1)
  {
LABEL_10:
    BOOL v15 = 0;
    goto LABEL_11;
  }
  uint64_t result = 0;
  if (v8) {
    uint64_t v12 = v8;
  }
LABEL_15:
  *a3 = v12;
  return result;
}

uint64_t sub_1CC4DC9D4(uint64_t a1)
{
  unint64_t v1 = (*(_DWORD *)(a1 + 8) << 16) | (unint64_t)*(unsigned __int16 *)(a1 + 16);
  unint64_t v2 = v1 + ~(v1 << 32) + ((unint64_t)((*(_DWORD *)a1 >> 4) ^ (*(_DWORD *)a1 >> 9)) << 32);
  unint64_t v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  unint64_t v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ (v4 + ~(v4 << 27));
}

uint64_t *sub_1CC4DCA2C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_11:
    sub_1CC4DCAF0(a1, v7);
    char v10 = 0;
    sub_1CC4DC8E0((uint64_t *)a1, a3, &v10);
    a4 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || (a4[1] == -1 ? (BOOL v8 = a4[2] == -1) : (BOOL v8 = 0), !v8)) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC4DCAF0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC4DCBD4(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    unsigned int v11 = &result[7 * v10];
    do
    {
      void *result = -4096;
      result[1] = -1;
      result[2] = -1;
      result += 7;
    }
    while (result != v11);
  }
  return result;
}

void sub_1CC4DCBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = *(void *)a1 + 56 * v6;
    do
    {
      *int v7 = -4096;
      v7[1] = -1;
      uint64_t v7[2] = -1;
      v7 += 7;
    }
    while (v7 != (void *)v8);
  }
  if (a2 != a3)
  {
    do
    {
      if (*(void *)v4 == -4096)
      {
        if (*(void *)(v4 + 8) != -1 || *(void *)(v4 + 16) != -1)
        {
LABEL_7:
          uint64_t v16 = 0;
          sub_1CC4DC8E0((uint64_t *)a1, (void *)v4, &v16);
          int v9 = v16;
          unsigned int v10 = v16;
          *uint64_t v16 = *(void *)v4;
          long long v11 = *(_OWORD *)(v4 + 8);
          void v9[3] = (uint64_t)(v10 + 5);
          uint64_t v12 = (uint64_t)(v9 + 3);
          *(_OWORD *)(v12 - 16) = v11;
          *(void *)(v12 + 8) = 0x100000000;
          if (*(_DWORD *)(v4 + 32)) {
            sub_1CC4DC52C(v12, v4 + 24);
          }
          ++*(_DWORD *)(a1 + 8);
          uint64_t v13 = *(void **)(v4 + 24);
          if ((void *)(v4 + 40) != v13) {
            free(v13);
          }
        }
      }
      else
      {
        if (*(void *)v4 != -8192) {
          goto LABEL_7;
        }
        if (*(void *)(v4 + 8) != -2 || *(void *)(v4 + 16) != -2) {
          goto LABEL_7;
        }
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

_DWORD *sub_1CC4DCD10(uint64_t a1, _DWORD *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    unsigned int v10 = 0;
LABEL_8:
    unsigned int v6 = sub_1CC407648(a1, (uint64_t)a2, a2, v10);
    *unsigned int v6 = *a2;
    *((void *)v6 + 1) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  unsigned int v6 = (_DWORD *)(*(void *)a1 + 16 * v5);
  int v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -1)
    {
      if (v8) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -2;
      }
      if (v12) {
        uint64_t v8 = v6;
      }
      unsigned int v13 = v5 + v9++;
      unsigned int v5 = v13 & v4;
      unsigned int v6 = (_DWORD *)(*(void *)a1 + 16 * (v13 & v4));
      int v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      unsigned int v10 = v8;
    }
    else {
      unsigned int v10 = v6;
    }
    goto LABEL_8;
  }
  return v6;
}

uint64_t sub_1CC4DCDD0(uint64_t a1, uint64_t a2)
{
  v21[8] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 200))
  {
    sub_1CD590B5C(a1 + 8);
    *(_DWORD *)(a1 + 200) = 0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_DWORD *)(a1 + 204) = 0;
  uint64_t v4 = a2 + 8;
  uint64_t v18 = a2 + 8;
  int v19 = v21;
  uint64_t v20 = 0x400000000;
  sub_1CC4DD2C4(&v18);
  uint64_t v14 = v17;
  int v16 = 4;
  uint64_t v5 = *(unsigned int *)(a2 + 204);
  if (*(_DWORD *)(a2 + 200)) {
    uint64_t v4 = a2 + 16;
  }
  v17[0] = v4;
  v17[1] = v5 | (v5 << 32);
  unsigned int v15 = 1;
  while (!v20)
  {
    unsigned int v7 = v15;
    uint64_t v8 = v14;
LABEL_8:
    if (!v7 || v8[3] >= v8[2]) {
      goto LABEL_10;
    }
    unsigned int v6 = v19;
    uint64_t v11 = *((unsigned int *)v19 + 4 * v20 - 1);
LABEL_16:
    unsigned int v13 = (unint64_t *)(v6[2 * v20 - 2] + 16 * v11);
    sub_1CC4DA4D0(a1 + 8, *v13, v13[1]);
    sub_1CC4DD1D8((uint64_t)&v18);
  }
  unsigned int v6 = v19;
  unsigned int v7 = v15;
  uint64_t v8 = v14;
  if (*((_DWORD *)v19 + 3) >= *((_DWORD *)v19 + 2)) {
    goto LABEL_8;
  }
  unsigned int v10 = (char *)v19 + 16 * v20;
  uint64_t v11 = *((unsigned int *)v10 - 1);
  BOOL v12 = (char *)v14 + 16 * v15;
  if (v11 != *((_DWORD *)v12 - 1) || *((void *)v10 - 2) != *((void *)v12 - 2)) {
    goto LABEL_16;
  }
LABEL_10:
  if (v8 != (_DWORD *)v17) {
    free(v8);
  }
  if (v19 != v21) {
    free(v19);
  }
  return a1;
}

uint64_t sub_1CC4DCFA4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  if ((unint64_t)(*(void *)(a1 + 96) + v2) < *(void *)(a1 + 104))
  {
    *(_DWORD *)(a1 + 88) = v2 + 1;
  }
  else
  {
    uint64_t v3 = sub_1CC4DD1D8(a1);
    sub_1CC4DDBA0(v3);
  }
  return a1;
}

void sub_1CC4DCFF4(uint64_t a1, uint64_t a2)
{
  v23[16] = *MEMORY[0x1E4F143B8];
  int v21 = v23;
  uint64_t v22 = 0x800000000;
  BOOL v3 = sub_1CC4DD420(a1, a2, (uint64_t)&v21);
  uint64_t v4 = (unint64_t *)v21;
  if (v3 && v22)
  {
    uint64_t v5 = (unint64_t *)((char *)v21 + 16 * v22);
    do
    {
      unint64_t v6 = *v4;
      unint64_t v7 = v4[1];
      uint64_t v17 = a1 + 8;
      uint64_t v18 = v20;
      uint64_t v19 = 0x400000000;
      if (*(_DWORD *)(a1 + 200))
      {
        sub_1CC4DA7F8(&v17, v6);
        uint64_t v11 = v18;
        uint64_t v10 = v19;
      }
      else
      {
        uint64_t v8 = *(unsigned int *)(a1 + 204);
        if (v8)
        {
          uint64_t v9 = 0;
          unsigned int v15 = (unint64_t *)(a1 + 16);
          while (1)
          {
            unint64_t v16 = *v15;
            v15 += 2;
            if (v16 >= v6) {
              break;
            }
            if (v8 == ++v9)
            {
              uint64_t v9 = *(unsigned int *)(a1 + 204);
              goto LABEL_10;
            }
          }
          uint64_t v9 = v9;
        }
        else
        {
          uint64_t v8 = 0;
          uint64_t v9 = 0;
        }
LABEL_10:
        v20[0] = a1 + 8;
        v20[1] = v8 | (v9 << 32);
        LODWORD(v19) = 1;
        uint64_t v10 = 1;
        uint64_t v11 = v20;
      }
      BOOL v12 = (unint64_t *)(v11[2 * v10 - 2] + 16 * HIDWORD(v11[2 * v10 - 1]));
      unint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      sub_1CC4DDBF0((uint64_t)&v17);
      if (v14 < v6) {
        sub_1CC4DA4D0(a1 + 8, v14, v6 - 1);
      }
      if (v7 < v13) {
        sub_1CC4DA4D0(a1 + 8, v7 + 1, v13);
      }
      if (v18 != v20) {
        free(v18);
      }
      v4 += 2;
    }
    while (v4 != v5);
    uint64_t v4 = (unint64_t *)v21;
  }
  if (v4 != v23) {
    free(v4);
  }
}

uint64_t sub_1CC4DD1D8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = v1 + 16 * *(unsigned int *)(result + 16);
  int v3 = *(_DWORD *)(v2 - 4) + 1;
  *(_DWORD *)(v2 - 4) = v3;
  if (v3 == *(_DWORD *)(v1 + 16 * *(unsigned int *)(result + 16) - 8))
  {
    uint64_t v4 = *(unsigned int *)(*(void *)result + 192);
    if (v4)
    {
      unsigned int v5 = 1;
      uint64_t v6 = v4 + 1;
      unint64_t v7 = (_DWORD *)(v1 + 16 * v4 - 8);
      while (1)
      {
        uint64_t v8 = v7;
        if (v6 == 2) {
          break;
        }
        int v10 = *v7;
        int v9 = v7[1];
        int v11 = *v7 - 1;
        --v6;
        v7 -= 4;
        if (v9 != v11)
        {
          unsigned int v5 = v6;
          goto LABEL_8;
        }
      }
      int v10 = *(_DWORD *)(v1 + 8);
      int v9 = *(_DWORD *)(v1 + 12);
LABEL_8:
      unsigned int v12 = v9 + 1;
      v8[1] = v12;
      if (v12 != v10)
      {
        uint64_t v13 = *(void *)(*((void *)v8 - 1) + 8 * v12);
        if (v4 != v5)
        {
          do
          {
            uint64_t v15 = *(void *)(result + 8) + 16 * v5;
            *(void *)uint64_t v15 = v13 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v15 + 8) = (v13 & 0x3F) + 1;
            *(_DWORD *)(v15 + 12) = 0;
            ++v5;
            uint64_t v13 = *(void *)(v13 & 0xFFFFFFFFFFFFFFC0);
          }
          while (v4 != v5);
          uint64_t v1 = *(void *)(result + 8);
        }
        unint64_t v14 = (unint64_t *)(v1 + 16 * v4);
        *unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFC0;
        v14[1] = (v13 & 0x3F) + 1;
      }
    }
  }
  return result;
}

void *sub_1CC4DD2C4(void *result)
{
  uint64_t v1 = result + 1;
  uint64_t v2 = *result;
  if (*(_DWORD *)(*result + 192))
  {
    unsigned int v3 = *(_DWORD *)(v2 + 196);
    *((_DWORD *)result + 4) = 0;
    if (!*((_DWORD *)result + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v4 = (void *)*v1;
    *(void *)*uint64_t v1 = v2 + 8;
  }
  else
  {
    unsigned int v3 = *(_DWORD *)(v2 + 196);
    *((_DWORD *)result + 4) = 0;
    if (!*((_DWORD *)result + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v4 = (void *)*v1;
    *(void *)*uint64_t v1 = v2;
  }
  v4[1] = v3;
  unsigned int v5 = *((_DWORD *)result + 4);
  *((_DWORD *)result + 4) = v5 + 1;
  unsigned int v6 = *(_DWORD *)(*result + 192);
  if (v6) {
    BOOL v7 = v5 >= v6;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v11 = (uint64_t)(result + 1);
    int v10 = result;
    unsigned int v9 = *(_DWORD *)(*result + 192);
    do
    {
      uint64_t v8 = result[1] + 16 * v5;
      sub_1CC4DAB94(v11, *(void *)(*(void *)v8 + 8 * *(unsigned int *)(v8 + 12)), 0);
      uint64_t result = v10;
      unsigned int v5 = *((_DWORD *)v10 + 4) - 1;
    }
    while (v5 < v9);
  }
  return result;
}

BOOL sub_1CC4DD420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v44[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 8;
  unsigned int v5 = (unint64_t *)(a2 + 8);
  if (!*(_DWORD *)(a2 + 204))
  {
    unsigned int v6 = v40;
    uint64_t v37 = a1 + 8;
    uint64_t v38 = v40;
    HIDWORD(v39) = 4;
    uint64_t v7 = *(unsigned int *)(a1 + 204);
    if (*(_DWORD *)(a1 + 200)) {
      uint64_t v4 = a1 + 16;
    }
    uint64_t v8 = *(unsigned int *)(a1 + 204);
LABEL_5:
    v40[0] = v4;
    v40[1] = v8 | (v7 << 32);
    uint64_t v9 = 1;
    LODWORD(v39) = 1;
    goto LABEL_6;
  }
  unint64_t v27 = *v5;
  unsigned int v6 = v40;
  uint64_t v37 = a1 + 8;
  uint64_t v38 = v40;
  uint64_t v39 = 0x400000000;
  if (!*(_DWORD *)(a1 + 200))
  {
    uint64_t v8 = *(unsigned int *)(a1 + 204);
    if (v8)
    {
      uint64_t v28 = 0;
      int v32 = (unint64_t *)(a1 + 16);
      while (1)
      {
        unint64_t v33 = *v32;
        v32 += 2;
        if (v33 >= v27) {
          break;
        }
        if (v8 == ++v28)
        {
          LODWORD(v28) = *(_DWORD *)(a1 + 204);
          break;
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
      LODWORD(v28) = 0;
    }
    uint64_t v7 = v28;
    goto LABEL_5;
  }
  uint64_t v36 = a2;
  sub_1CC4DA7F8(&v37, v27);
  a2 = v36;
  uint64_t v9 = v39;
  if (!v39) {
    goto LABEL_7;
  }
  unsigned int v6 = v38;
LABEL_6:
  if (*((_DWORD *)v6 + 3) >= *((_DWORD *)v6 + 2))
  {
LABEL_7:
    uint64_t v41 = v5;
    uint64_t v42 = v44;
    HIDWORD(v43) = 4;
    if (*(_DWORD *)(a2 + 200)) {
      unsigned int v5 = (unint64_t *)(a2 + 16);
    }
    unint64_t v10 = *(unsigned int *)(a2 + 204) | ((unint64_t)*(unsigned int *)(a2 + 204) << 32);
LABEL_10:
    v44[0] = v5;
    v44[1] = v10;
    LODWORD(v43) = 1;
    goto LABEL_11;
  }
  unint64_t v29 = *(void *)(v6[2 * v9 - 2] + 16 * HIDWORD(v6[2 * v9 - 1]));
  uint64_t v41 = v5;
  uint64_t v42 = v44;
  uint64_t v43 = 0x400000000;
  if (!*(_DWORD *)(a2 + 200))
  {
    uint64_t v30 = *(unsigned int *)(a2 + 204);
    if (v30)
    {
      uint64_t v31 = 0;
      uint64_t v34 = (unint64_t *)(a2 + 16);
      while (1)
      {
        unint64_t v35 = *v34;
        v34 += 2;
        if (v35 >= v29) {
          break;
        }
        if (v30 == ++v31)
        {
          uint64_t v31 = *(unsigned int *)(a2 + 204);
          break;
        }
      }
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
    }
    unint64_t v10 = v30 | (v31 << 32);
    goto LABEL_10;
  }
  sub_1CC4DA7F8(&v41, v29);
LABEL_11:
  sub_1CC4DD784(&v37);
  for (uint64_t i = v39; v39; uint64_t i = v39)
  {
    unsigned int v12 = v38;
    if (*((_DWORD *)v38 + 3) >= *((_DWORD *)v38 + 2) || v43 == 0) {
      break;
    }
    unint64_t v14 = v42;
    if (*((_DWORD *)v42 + 3) >= *((_DWORD *)v42 + 2)) {
      break;
    }
    uint64_t v15 = (unint64_t *)(*((void *)v38 + 2 * i - 2) + 16 * *((unsigned int *)v38 + 4 * i - 1));
    unint64_t v16 = (unint64_t *)(*((void *)v42 + 2 * v43 - 2)
                             + 16 * *((unsigned int *)v42 + 4 * v43 - 1));
    unint64_t v18 = *v15;
    unint64_t v17 = v15[1];
    unint64_t v20 = *v16;
    unint64_t v19 = v16[1];
    if (v18 <= v20) {
      unint64_t v21 = v20;
    }
    else {
      unint64_t v21 = v18;
    }
    if (v17 >= v19) {
      unint64_t v22 = v19;
    }
    else {
      unint64_t v22 = v17;
    }
    uint64_t v23 = *(unsigned int *)(a3 + 8);
    if (v23 >= *(_DWORD *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v24 = (unint64_t *)(*(void *)a3 + 16 * v23);
    *uint64_t v24 = v21;
    v24[1] = v22;
    *(_DWORD *)(a3 + 8) = v23 + 1;
    unint64_t v25 = *(void *)(v14[2 * v43 - 2] + 16 * HIDWORD(v14[2 * v43 - 1]) + 8) >= *(void *)(v12[2 * i - 2] + 16 * HIDWORD(v12[2 * i - 1]) + 8)
        ? &v37
        : (uint64_t *)&v41;
    sub_1CC4DD1D8((uint64_t)v25);
    sub_1CC4DD784(&v37);
  }
  if (v42 != v44) {
    free(v42);
  }
  if (v38 != v40) {
    free(v38);
  }
  return *(_DWORD *)(a3 + 8) != 0;
}

_DWORD *sub_1CC4DD784(_DWORD *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *((void *)result + 1);
    if (*(_DWORD *)(v3 + 12) < *(_DWORD *)(v3 + 8))
    {
      uint64_t v4 = result[26];
      if (v4)
      {
        uint64_t v5 = *((void *)result + 12);
        if (*(_DWORD *)(v5 + 12) < *(_DWORD *)(v5 + 8))
        {
          uint64_t v6 = v3 + 16 * v1;
          uint64_t v7 = *(void *)(v6 - 16);
          uint64_t v8 = *(unsigned int *)(v6 - 4);
          uint64_t v9 = v5 + 16 * v4;
          uint64_t v10 = *(void *)(v9 - 16);
          uint64_t v11 = *(unsigned int *)(v9 - 4);
          unint64_t v12 = *(void *)(v10 + 16 * v11);
          if (*(void *)(v7 + 16 * v8 + 8) < v12)
          {
            uint64_t result = sub_1CC4DD938(result, v12);
            uint64_t v21 = v2[4];
            if (v21)
            {
              uint64_t v22 = *((void *)v2 + 1);
              if (*(_DWORD *)(v22 + 12) < *(_DWORD *)(v22 + 8))
              {
                uint64_t v23 = *((void *)v2 + 12) + 16 * v2[26];
                uint64_t v24 = *(void *)(v23 - 16);
                uint64_t v25 = *(unsigned int *)(v23 - 4);
                if (*(void *)(v24 + 16 * v25 + 8) < *(void *)(*(void *)(v22 + 16 * v21 - 16)
                                                                 + 16 * *(unsigned int *)(v22 + 16 * v21 - 4)))
                {
                  unint64_t v17 = *(void *)(v24 + 16 * v25);
                  goto LABEL_11;
                }
              }
            }
          }
          else
          {
            unint64_t v13 = *(void *)(v7 + 16 * v8);
            if (*(void *)(v10 + 16 * v11 + 8) < v13)
            {
              while (1)
              {
                uint64_t result = sub_1CC4DD938(v2 + 22, v13);
                uint64_t v14 = v2[26];
                if (!v14) {
                  break;
                }
                uint64_t v15 = *((void *)v2 + 12);
                if (*(_DWORD *)(v15 + 12) >= *(_DWORD *)(v15 + 8)) {
                  break;
                }
                uint64_t v16 = *((void *)v2 + 1) + 16 * v2[4];
                unint64_t v17 = *(void *)(*(void *)(v15 + 16 * v14 - 16) + 16 * *(unsigned int *)(v15 + 16 * v14 - 4));
                if (*(void *)(*(void *)(v16 - 16) + 16 * *(unsigned int *)(v16 - 4) + 8) >= v17) {
                  break;
                }
LABEL_11:
                uint64_t result = sub_1CC4DD938(v2, v17);
                uint64_t v18 = v2[4];
                if (v18)
                {
                  uint64_t v19 = *((void *)v2 + 1);
                  if (*(_DWORD *)(v19 + 12) < *(_DWORD *)(v19 + 8))
                  {
                    uint64_t v20 = *((void *)v2 + 12) + 16 * v2[26];
                    unint64_t v13 = *(void *)(*(void *)(v19 + 16 * v18 - 16) + 16 * *(unsigned int *)(v19 + 16 * v18 - 4));
                    if (*(void *)(*(void *)(v20 - 16) + 16 * *(unsigned int *)(v20 - 4) + 8) < v13) {
                      continue;
                    }
                  }
                }
                return result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_DWORD *sub_1CC4DD938(_DWORD *result, unint64_t a2)
{
  uint64_t v2 = result[4];
  if (!v2) {
    return result;
  }
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = *((void *)result + 1);
  if (*(_DWORD *)(v4 + 12) >= *(_DWORD *)(v4 + 8)) {
    return result;
  }
  uint64_t v6 = *(void *)result;
  uint64_t v7 = v4 + 16 * v2;
  if (!*(_DWORD *)(*(void *)result + 192))
  {
    unsigned int v8 = *(_DWORD *)(v7 - 4);
    int v9 = *(_DWORD *)(v6 + 196);
    if (v8 != v9)
    {
      while (*(void *)(v6 + 16 * v8 + 8) < a2)
      {
        if (v9 == ++v8)
        {
          unsigned int v8 = *(_DWORD *)(v6 + 196);
          goto LABEL_8;
        }
      }
    }
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v7 - 16);
  if (*(void *)(v10 + 16 * (*(_DWORD *)(v7 - 8) - 1) + 8) >= a2)
  {
    unsigned int v11 = *(_DWORD *)(v7 - 4);
    do
      unint64_t v12 = *(void *)(v10 + 16 * v11++ + 8);
    while (v12 < a2);
    unsigned int v8 = v11 - 1;
LABEL_8:
    *(_DWORD *)(v7 - 4) = v8;
    return result;
  }
  result[4] = v2 - 1;
  unsigned int v13 = v2 - 2;
  if (v2 == 2)
  {
    uint64_t v14 = *(unsigned int *)(v4 + 12);
    goto LABEL_16;
  }
  uint64_t v17 = (v2 - 3);
  if (v17)
  {
    if (*(void *)(*(void *)(v4 + 16 * v17)
                   + 8 * *(unsigned int *)(v4 + 16 * v17 + 12)
                   + 96) >= a2)
    {
LABEL_31:
      uint64_t v20 = (uint64_t *)(v4 + 16 * v13);
      uint64_t v21 = *v20;
      unsigned int v24 = *((_DWORD *)v20 + 3);
      uint64_t v22 = (_DWORD *)v20 + 3;
      unsigned int v23 = v24;
      do
        unint64_t v25 = *(void *)(v21 + 8 * v23++ + 96);
      while (v25 < a2);
      *uint64_t v22 = v23 - 1;
LABEL_23:
      return (_DWORD *)sub_1CC4DAA64(v3, a2);
    }
    uint64_t v18 = 16 * v17;
    while (1)
    {
      result[4] = v13;
      if (v18 == 16) {
        break;
      }
      unint64_t v19 = *(void *)(*(void *)(v4 + v18 - 16) + 8 * *(unsigned int *)(v4 + v18 - 4) + 96);
      --v13;
      v18 -= 16;
      if (v19 >= a2) {
        goto LABEL_31;
      }
    }
  }
  uint64_t v14 = *(unsigned int *)(v4 + 12);
  if (*(void *)(v6 + 8 * v14 + 96) >= a2)
  {
    unsigned int v26 = *(_DWORD *)(v4 + 28);
    do
      unint64_t v27 = *(void *)(*(void *)(v4 + 16) + 8 * v26++ + 96);
    while (v27 < a2);
    *(_DWORD *)(v4 + 28) = v26 - 1;
    goto LABEL_23;
  }
LABEL_16:
  uint64_t v15 = *(unsigned int *)(v6 + 196);
  if (v14 != v15)
  {
    uint64_t v16 = v6 + 8;
    while (*(void *)(v16 + 8 * v14 + 88) < a2)
    {
      uint64_t v14 = (v14 + 1);
      if (v15 == v14)
      {
        uint64_t v14 = v15;
        break;
      }
    }
  }
  uint64_t result = sub_1CC4DA944(result, v14);
  if (*(_DWORD *)(v3 + 16) && *(_DWORD *)(*(void *)(v3 + 8) + 12) < *(_DWORD *)(*(void *)(v3 + 8) + 8)) {
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_1CC4DDB40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = a1 + 24;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0x400000000;
  if (*(_DWORD *)(a2 + 16)) {
    sub_1CC4DC664(v3, a2 + 8);
  }
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_1CC4DDBA0(a1);
  return a1;
}

uint64_t sub_1CC4DDBA0(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1 && (uint64_t v2 = *(void *)(result + 8), *(_DWORD *)(v2 + 12) < *(_DWORD *)(v2 + 8)))
  {
    *(_DWORD *)(result + 88) = 0;
    uint64_t v3 = (void *)(*(void *)(v2 + 16 * v1 - 16) + 16 * *(unsigned int *)(v2 + 16 * v1 - 4));
    *(void *)(result + 96) = *v3;
    *(void *)(result + 104) = v3[1];
  }
  else
  {
    *(_DWORD *)(result + 88) = -1;
    *(void *)(result + 96) = 0;
    *(void *)(result + 104) = 0;
  }
  return result;
}

uint64_t sub_1CC4DDBF0(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(_DWORD *)(*(void *)result + 192)) {
    return sub_1CC4DB648(result, 1);
  }
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(_DWORD *)(v2 + 16 * *(unsigned int *)(result + 16) - 4);
  int v4 = *(_DWORD *)(v1 + 196);
  if (v3 + 1 != v4)
  {
    do
    {
      *(_OWORD *)(v1 + 16 * v3) = *(_OWORD *)(v1 + 16 * (v3 + 1));
      *(unsigned char *)(v1 + 176 + v3) = *(unsigned char *)(v1 + 176 + v3 + 1);
      ++v3;
    }
    while (v4 - 1 != v3);
    int v4 = *(_DWORD *)(v1 + 196);
    uint64_t v2 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  *(_DWORD *)(v1 + 196) = v5;
  *(_DWORD *)(v2 + 8) = v5;
  return result;
}

BOOL sub_1CC4DDC64(uint64_t a1, uint64_t a2)
{
  v49[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 8;
  uint64_t v46 = a1 + 8;
  int v47 = (char *)v49;
  uint64_t v48 = 0x400000000;
  sub_1CC4DD2C4(&v46);
  uint64_t v5 = a2 + 8;
  uint64_t v42 = a2 + 8;
  uint64_t v43 = v45;
  uint64_t v44 = 0x400000000;
  sub_1CC4DD2C4(&v42);
  uint64_t v37 = v4;
  uint64_t v38 = &v40;
  int v7 = *(_DWORD *)(a1 + 200);
  uint64_t v6 = *(unsigned int *)(a1 + 204);
  if (v7) {
    uint64_t v8 = a1 + 16;
  }
  else {
    uint64_t v8 = v4;
  }
  uint64_t v40 = v8;
  unint64_t v41 = v6 | (v6 << 32);
  uint64_t v39 = 0x400000001;
  uint64_t v9 = v48;
  if (!v48)
  {
LABEL_54:
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v10 = v47;
  if (*((_DWORD *)v47 + 3) < *((_DWORD *)v47 + 2))
  {
    if (v7) {
      uint64_t v15 = a1 + 16;
    }
    else {
      uint64_t v15 = v4;
    }
    do
    {
      uint64_t v16 = &v10[16 * v9];
      if (*((_DWORD *)v16 - 1) == v6 && *((void *)v16 - 2) == v15) {
        break;
      }
      uint64_t v33 = a2 + 8;
      uint64_t v34 = v36;
      uint64_t v35 = 0x400000000;
      sub_1CC4DA944(&v33, *(unsigned int *)(a2 + 204));
      if (v44 && (uint64_t v17 = (char *)v43, *((_DWORD *)v43 + 3) < *((_DWORD *)v43 + 2)))
      {
        uint64_t v18 = (char *)v43 + 16 * v44;
        unint64_t v19 = v34;
        uint64_t v20 = (char *)v34 + 16 * v35;
        if (*((_DWORD *)v18 - 1) == *((_DWORD *)v20 - 1) && *((void *)v18 - 2) == *((void *)v20 - 2)) {
          goto LABEL_50;
        }
      }
      else
      {
        unint64_t v19 = v34;
        if (!v35 || *((_DWORD *)v34 + 3) >= *((_DWORD *)v34 + 2)) {
          goto LABEL_50;
        }
        uint64_t v17 = (char *)v43;
      }
      uint64_t v21 = &v47[16 * v48];
      uint64_t v22 = *((void *)v21 - 2);
      uint64_t v23 = *((unsigned int *)v21 - 1);
      unsigned int v24 = &v17[16 * v44];
      uint64_t v25 = *((void *)v24 - 2);
      uint64_t v26 = *((unsigned int *)v24 - 1);
      if (*(void *)(v22 + 16 * v23) == *(void *)(v25 + 16 * v26))
      {
        BOOL v27 = *(void *)(v22 + 16 * v23 + 8) == *(void *)(v25 + 16 * v26 + 8);
        goto LABEL_30;
      }
LABEL_50:
      BOOL v27 = 0;
LABEL_30:
      if (v19 != v36)
      {
        BOOL v32 = v27;
        free(v19);
        BOOL v27 = v32;
      }
      if (v38 == &v40)
      {
        if (!v27) {
          goto LABEL_58;
        }
      }
      else
      {
        BOOL v31 = v27;
        free(v38);
        if (!v31)
        {
LABEL_58:
          int v7 = *(_DWORD *)(a1 + 200);
          LODWORD(v6) = *(_DWORD *)(a1 + 204);
          uint64_t v9 = v48;
          break;
        }
      }
      sub_1CC4DD1D8((uint64_t)&v46);
      sub_1CC4DD1D8((uint64_t)&v42);
      uint64_t v37 = v4;
      uint64_t v38 = &v40;
      int v7 = *(_DWORD *)(a1 + 200);
      uint64_t v6 = *(unsigned int *)(a1 + 204);
      if (v7) {
        uint64_t v28 = a1 + 16;
      }
      else {
        uint64_t v28 = v4;
      }
      uint64_t v40 = v28;
      unint64_t v41 = v6 | (v6 << 32);
      uint64_t v39 = 0x400000001;
      uint64_t v9 = v48;
      if (!v48) {
        goto LABEL_54;
      }
      if (v7) {
        uint64_t v15 = a1 + 16;
      }
      else {
        uint64_t v15 = v4;
      }
      uint64_t v10 = v47;
    }
    while (*((_DWORD *)v47 + 3) < *((_DWORD *)v47 + 2));
  }
LABEL_6:
  uint64_t v37 = v4;
  uint64_t v38 = &v40;
  uint64_t v39 = 0x400000000;
  if (v7) {
    uint64_t v11 = a1 + 16;
  }
  else {
    uint64_t v11 = v4;
  }
  uint64_t v40 = v11;
  unint64_t v41 = v6 | ((unint64_t)v6 << 32);
  if (v9)
  {
    if (*((_DWORD *)v47 + 3) < *((_DWORD *)v47 + 2))
    {
      uint64_t v30 = &v47[16 * v9];
      if (*((_DWORD *)v30 - 1) != v6 || *((void *)v30 - 2) != v11) {
        goto LABEL_44;
      }
    }
  }
  uint64_t v33 = a2 + 8;
  uint64_t v34 = v36;
  HIDWORD(v35) = 4;
  uint64_t v12 = *(unsigned int *)(a2 + 204);
  if (*(_DWORD *)(a2 + 200)) {
    uint64_t v5 = a2 + 16;
  }
  LODWORD(v35) = 0;
  v36[0] = v5;
  v36[1] = v12 | (v12 << 32);
  if (!v44 || *((_DWORD *)v43 + 3) >= *((_DWORD *)v43 + 2))
  {
    BOOL v13 = 1;
    goto LABEL_16;
  }
  unint64_t v29 = (char *)v43 + 16 * v44;
  if (*((_DWORD *)v29 - 1) == v12) {
    BOOL v13 = *((void *)v29 - 2) == v5;
  }
  else {
LABEL_44:
  }
    BOOL v13 = 0;
LABEL_16:
  if (v43 != v45) {
    free(v43);
  }
  if (v47 != (char *)v49) {
    free(v47);
  }
  return v13;
}

void sub_1CC4DE004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v51[16] = *MEMORY[0x1E4F143B8];
  unsigned int v49 = (char *)v51;
  uint64_t v50 = 0x2000000000;
  uint64_t v7 = *(void *)(a2 + 160);
  if (v7) {
    uint64_t v8 = *(void **)(a2 + 144);
  }
  else {
    uint64_t v8 = *(void **)a2;
  }
  if (v7) {
    uint64_t v9 = a2 + 152;
  }
  else {
    uint64_t v9 = *(void *)a2 + 4 * *(unsigned int *)(a2 + 8);
  }
  if (v8 == (void *)v9)
  {
    uint64_t v15 = (unsigned int *)v51;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = v8;
    do
    {
      unint64_t v12 = v10;
      if (v7)
      {
        BOOL v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            BOOL v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v29 = *v14 == (void)v11;
            uint64_t v11 = v14;
          }
          while (!v29);
        }
      }
      else
      {
        uint64_t v14 = (void *)((char *)v11 + 4);
      }
      ++v10;
      uint64_t v11 = v14;
    }
    while (v14 != (void *)v9);
    if (v12 >= 0x20) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v15 = (unsigned int *)v51;
    uint64_t v16 = v51;
    do
    {
      uint64_t v17 = (_DWORD *)v8 + 7;
      if (!v7) {
        uint64_t v17 = v8;
      }
      *uint64_t v16 = *v17;
      if (v7)
      {
        uint64_t v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            unint64_t v19 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            unint64_t v19 = (void *)v8[2];
            BOOL v29 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v29);
        }
      }
      else
      {
        unint64_t v19 = (void *)((char *)v8 + 4);
      }
      ++v16;
      uint64_t v8 = v19;
    }
    while (v19 != (void *)v9);
    size_t v20 = (v50 + v10);
    LODWORD(v50) = v20;
    if (v20 >= 2)
    {
      qsort(v51, v20, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1CC442178);
      uint64_t v15 = (unsigned int *)v49;
    }
  }
  sub_1CC4DE470((uint64_t)v42, a3, (unint64_t)*v15 << 32);
  v35[2] = 0;
  uint64_t v36 = v38;
  uint64_t v37 = 0x400000000;
  int v39 = -1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if (!v50) {
    goto LABEL_70;
  }
  uint64_t v21 = v49;
  uint64_t v22 = &v49[4 * v50];
  unsigned int v23 = v46;
LABEL_37:
  while (2)
  {
    uint64_t v24 = *(unsigned int *)v21;
    if (v23 != -1)
    {
      unint64_t v30 = v24 << 32;
      if (v48 < v24 << 32)
      {
        while (1)
        {
          sub_1CC4DD1D8((uint64_t)v42);
          if (!v44 || *((_DWORD *)v43 + 3) >= *((_DWORD *)v43 + 2)) {
            break;
          }
          unsigned int v23 = 0;
          int v46 = 0;
          BOOL v32 = (unint64_t *)(*((void *)v43 + 2 * v44 - 2) + 16 * *((unsigned int *)v43 + 4 * v44 - 1));
          unint64_t v31 = *v32;
          unint64_t v47 = *v32;
          unint64_t v48 = v32[1];
          if (v48 >= v30) {
            goto LABEL_61;
          }
        }
        unsigned int v23 = -1;
        int v46 = -1;
        unint64_t v47 = 0;
        unint64_t v48 = 0;
      }
      else
      {
        unint64_t v31 = v47;
LABEL_61:
        if (v31 <= v30)
        {
          unsigned int v23 = -(int)v31;
          int v46 = -(int)v31;
        }
      }
    }
    unint64_t v25 = (unint64_t)(v24 + 1) << 32;
    while (v23 == v39 && v47 == v40)
    {
      unint64_t v26 = v47 + v23;
      if (v48 == v41 || v26 >= v25)
      {
        v21 += 4;
        BOOL v29 = v48 == v41 || v21 == v22;
        if (v29) {
          goto LABEL_68;
        }
        goto LABEL_37;
      }
LABEL_48:
      uint64_t v28 = sub_1CC4D8054(a4, __ROR8__(v26, 32));
      sub_1CC4DE3D4(&v33, a4, v28);
      sub_1CB946958(a1, (unsigned int *)v33 + 2 * v34 - 1);
      if (v33 != v35) {
        free(v33);
      }
      sub_1CC4DCFA4((uint64_t)v42);
      unsigned int v23 = v46;
    }
    unint64_t v26 = v47 + v23;
    if (v26 < v25) {
      goto LABEL_48;
    }
    v21 += 4;
    if (v21 != v22) {
      continue;
    }
    break;
  }
LABEL_68:
  if (v36 != v38) {
    free(v36);
  }
LABEL_70:
  if (v43 != &v45) {
    free(v43);
  }
  if (v49 != (char *)v51) {
    free(v49);
  }
}

void *sub_1CC4DE3D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 8);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v7 = (void *)(a2 + 8);
  do
  {
    BOOL v8 = sub_1CC4D9C68((uint64_t)(v5 + 4), a3);
    uint64_t v9 = v5 + 1;
    if (!v8)
    {
      uint64_t v9 = v5;
      uint64_t v7 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  if (v7 == v4 || sub_1CC4D9C68(a3, (uint64_t)(v7 + 4))) {
LABEL_8:
  }
    uint64_t v7 = v4;

  return sub_1CC4D9624(a1, (uint64_t)(v7 + 52));
}

void sub_1CC4DE470(uint64_t a1, uint64_t a2, unint64_t a3)
{
  v27[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2 + 8;
  uint64_t v24 = a2 + 8;
  unint64_t v25 = v27;
  uint64_t v26 = 0x400000000;
  if (*(_DWORD *)(a2 + 200))
  {
    sub_1CC4DA7F8(&v24, a3);
    int v15 = *(_DWORD *)(a2 + 200);
    uint64_t v7 = *(unsigned int *)(a2 + 204);
    uint64_t v19 = v6;
    size_t v20 = &v22;
    if (v15) {
      uint64_t v6 = a2 + 16;
    }
    unsigned int v10 = v26;
    uint64_t v21 = 0x400000000;
    uint64_t v22 = v6;
    uint64_t v23 = v7 | (v7 << 32);
    if (!v26) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a2 + 204);
    if (v7)
    {
      uint64_t v9 = 0;
      uint64_t v11 = (unint64_t *)(a2 + 16);
      while (1)
      {
        unint64_t v12 = *v11;
        v11 += 2;
        if (v12 >= a3) {
          break;
        }
        if (v7 == ++v9)
        {
          uint64_t v8 = *(unsigned int *)(a2 + 204);
          uint64_t v9 = v8;
          goto LABEL_4;
        }
      }
      uint64_t v8 = *(unsigned int *)(a2 + 204);
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
LABEL_4:
    v27[0] = a2 + 8;
    v27[1] = v8 | (v9 << 32);
    unsigned int v10 = 1;
    LODWORD(v26) = 1;
    uint64_t v19 = a2 + 8;
    size_t v20 = &v22;
    uint64_t v21 = 0x400000000;
    uint64_t v22 = a2 + 8;
    uint64_t v23 = v7 | (v7 << 32);
  }
  if (*((_DWORD *)v25 + 3) >= *((_DWORD *)v25 + 2)
    || (BOOL v13 = (char *)v25 + 16 * v10, *((_DWORD *)v13 - 1) == v7) && *((void *)v13 - 2) == v6)
  {
LABEL_6:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = a1 + 24;
    *(void *)(a1 + 16) = 0x400000000;
    *(_DWORD *)(a1 + 88) = -1;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    goto LABEL_7;
  }
  uint64_t v16 = v24;
  v17[0] = v18;
  v17[1] = (void *)0x400000000;
  sub_1CC4DC664((uint64_t)v17, (uint64_t)&v25);
  sub_1CC4DDB40(a1, (uint64_t)&v16);
  if (v17[0] != v18) {
    free(v17[0]);
  }
  unint64_t v14 = *(void *)(a1 + 96);
  if (a3 >= v14) {
    *(_DWORD *)(a1 + 88) = a3 - v14;
  }
LABEL_7:
  if (v25 != v27) {
    free(v25);
  }
}

uint64_t sub_1CC4DE670(uint64_t result, unint64_t a2)
{
  if (*(_DWORD *)(result + 88) != -1)
  {
    uint64_t v3 = result;
    while (*(void *)(v3 + 104) < a2)
    {
      uint64_t v4 = sub_1CC4DD1D8(v3);
      uint64_t result = sub_1CC4DDBA0(v4);
      if (*(_DWORD *)(v3 + 88) == -1) {
        return result;
      }
    }
    unint64_t v5 = *(void *)(v3 + 96);
    if (a2 >= v5) {
      *(_DWORD *)(v3 + 88) = a2 - v5;
    }
  }
  return result;
}

void sub_1CC4DE6E0(uint64_t a1, uint64_t a2)
{
  void v17[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = (v5 + 1);
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v13 = *(uint64_t **)(a1 + 8);
    uint64_t v14 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v15 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v15;
    }
    sub_1CC4DE890(a1, v13, &v13[2 * v14]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v17;
  do
  {
    uint64_t v8 = a1 + v6;
    uint64_t v9 = *(void *)(a1 + v6 + 8);
    if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *uint64_t v7 = v9;
      uint64_t v10 = *(void *)(v8 + 16);
      *(void *)(v8 + 16) = 0;
      v7[1] = v10;
      v7 += 2;
      uint64_t v11 = *(void *)(v8 + 16);
      *(void *)(v8 + 16) = 0;
      if (v11)
      {
        uint64_t v16 = a2;
        sub_1CC4DE96C(v11);
        a2 = v16;
      }
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  sub_1CC4DE890(a1, v17, v7);
}

void sub_1CC4DE890(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (!v7) {
      goto LABEL_8;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    void *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_8:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v14 = 0;
      sub_1CC00C33C(a1, v10, &v14);
      uint64_t v11 = v14;
      *uint64_t v14 = *a2;
      uint64_t v12 = a2[1];
      a2[1] = 0;
      v11[1] = v12;
      *(_DWORD *)a1 += 2;
      uint64_t v13 = a2[1];
      a2[1] = 0;
      if (v13) {
        sub_1CC4DE96C(v13);
      }
    }
    a2 += 2;
  }
}

void sub_1CC4DE96C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 200))
  {
    sub_1CD590B5C(a1 + 8);
    *(_DWORD *)(a1 + 200) = 0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_DWORD *)(a1 + 204) = 0;

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC4DEA00(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)(a2 + 16);
  v37[0] = *(_OWORD *)a2;
  v37[1] = v4;
  *(_OWORD *)uint64_t v38 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v38[12] = *(_OWORD *)(a2 + 44);
  int v39 = v41;
  uint64_t v40 = 0x800000000;
  if (v37 != (_OWORD *)a2)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 72);
    if (v5)
    {
      if (v5 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v41, *(const void **)(a2 + 64), 32 * *(unsigned int *)(a2 + 72));
      LODWORD(v40) = v5;
    }
  }
  uint64_t v42 = v44;
  uint64_t v43 = 0x800000000;
  unsigned int v6 = *(_DWORD *)(a2 + 344);
  if (v6 && v37 != (_OWORD *)a2)
  {
    if (v6 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v44, *(const void **)(a2 + 336), 4 * *(unsigned int *)(a2 + 344));
    LODWORD(v43) = v6;
  }
  uint64_t v45 = a1;
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  unint64_t v10 = *(unsigned __int8 *)(a2 + 24);
  *(_DWORD *)unsigned int v34 = *(_DWORD *)(a2 + 25);
  *(_DWORD *)&v34[3] = *(_DWORD *)(a2 + 28);
  uint64_t v11 = *(void *)(a2 + 32);
  v32[0] = v7;
  v32[1] = v8;
  v32[2] = v9;
  char v33 = v10;
  uint64_t v35 = v11;
  sub_1CC4DF0E0(*(int *)&v38[24], a1, v32);
  uint64_t v12 = *(void *)(a1 + 1392);
  if (v10) {
    uint64_t v13 = v8;
  }
  else {
    uint64_t v13 = -1;
  }
  if (v10) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = 0;
  }
  v31[0] = v7;
  v31[1] = v13;
  v31[2] = v14;
  uint64_t v36 = 0;
  if (sub_1CC4DC8E0((uint64_t *)v12, v31, &v36)) {
    uint64_t v15 = v36;
  }
  else {
    uint64_t v15 = (uint64_t *)(*(void *)v12 + 56 * *(unsigned int *)(v12 + 16));
  }
  if (v15 != (uint64_t *)(**(void **)(a1 + 1392) + 56 * *(unsigned int *)(*(void *)(a1 + 1392) + 16)))
  {
    uint64_t v16 = *((unsigned int *)v15 + 8);
    if (v16)
    {
      uint64_t v17 = (unint64_t *)v15[3];
      uint64_t v18 = &v17[2 * v16];
      do
      {
        unint64_t v19 = *v17;
        uint64_t v20 = v17[1];
        v17 += 2;
        BOOL v21 = v19 == -1 && v20 == 0;
        if (!v21)
        {
          unint64_t v10 = v19 >> 8;
          uint64_t v9 = v20;
        }
        uint64_t v23 = v7;
        char v22 = !v21;
        if (v21) {
          LOBYTE(v19) = 0;
        }
        char v24 = v19;
        int v25 = v10;
        char v27 = BYTE6(v10);
        __int16 v26 = WORD2(v10);
        uint64_t v28 = v9;
        char v29 = v22;
        uint64_t v30 = v11;
        sub_1CC4DF0E0(*(int *)&v38[24], v45, &v23);
      }
      while (v17 != v18);
    }
  }
  if (v42 != v44) {
    free(v42);
  }
  if (v39 != v41) {
    free(v39);
  }
}

void sub_1CC4DECA4(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  sub_1CC4DE470((uint64_t)&v34, a2, a3);
  if (*(_DWORD *)v38 == -1)
  {
    uint64_t v6 = *(void *)&v38[8];
    if (*(_OWORD *)&v38[8] == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)&v38[8];
  }
  if (v6 + (unint64_t)*(unsigned int *)v38 >= a4)
  {
LABEL_3:
    uint64_t v28 = 0;
    char v29 = v31;
    uint64_t v30 = 0x400000000;
    v31[16] = -1;
    uint64_t v33 = 0;
    uint64_t v32 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v25;
    uint64_t v24 = 0x400000000;
    v25[16] = -1;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    sub_1CC4DEEF4(a1, (uint64_t)&v28, (uint64_t)&v22);
    if (v23 != v25) {
      free(v23);
    }
    uint64_t v7 = v29;
    if (v29 == v31) {
      goto LABEL_6;
    }
LABEL_22:
    free(v7);
    goto LABEL_6;
  }
  uint64_t v16 = v34;
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  if (v36) {
    sub_1CC4DC664((uint64_t)&v17, (uint64_t)&v35);
  }
  long long v20 = *(_OWORD *)v38;
  uint64_t v21 = *(void *)&v38[16];
  sub_1CC4DE670((uint64_t)&v16, a4);
  uint64_t v12 = v34;
  v13[0] = v14;
  v13[1] = (void *)0x400000000;
  if (v36) {
    sub_1CC4DC664((uint64_t)v13, (uint64_t)&v35);
  }
  v14[4] = *(_OWORD *)v38;
  uint64_t v15 = *(void *)&v38[16];
  uint64_t v8 = v16;
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  if (v18) {
    sub_1CC4DC664((uint64_t)v9, (uint64_t)&v17);
  }
  uint64_t v10[4] = v20;
  uint64_t v11 = v21;
  sub_1CC4DEEF4(a1, (uint64_t)&v12, (uint64_t)&v8);
  if (v9[0] != v10) {
    free(v9[0]);
  }
  if (v13[0] != v14) {
    free(v13[0]);
  }
  uint64_t v7 = v17;
  if (v17 != v19) {
    goto LABEL_22;
  }
LABEL_6:
  if (v35 != &v37) {
    free(v35);
  }
}

__n128 sub_1CC4DEEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x400000000;
  if (*(_DWORD *)(a2 + 16))
  {
    uint64_t v9 = a1;
    uint64_t v6 = a2;
    uint64_t v7 = a3;
    sub_1CC2D01B8(a1 + 8, a2 + 8);
    a2 = v6;
    a3 = v7;
    a1 = v9;
  }
  long long v3 = *(_OWORD *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 120) = a1 + 136;
  *(void *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 88) = v3;
  *(void *)(a1 + 112) = *(void *)a3;
  *(void *)(a1 + 128) = 0x400000000;
  if (*(_DWORD *)(a3 + 16))
  {
    uint64_t v10 = a1;
    uint64_t v8 = a3;
    sub_1CC2D01B8(a1 + 120, a3 + 8);
    a3 = v8;
    a1 = v10;
  }
  __n128 result = *(__n128 *)(a3 + 88);
  *(void *)(a1 + 216) = *(void *)(a3 + 104);
  *(__n128 *)(a1 + 200) = result;
  return result;
}

BOOL sub_1CC4DEFC4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v8 = 1;
  uint64_t v9 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if (a2)
  {
    uint64_t v6 = 32 * a2;
    uint64_t v5 = a1;
    while (!sub_1CC4D9C10(v5, (uint64_t)&v8))
    {
      v5 += 32;
      v6 -= 32;
      if (!v6)
      {
        uint64_t v5 = a1 + 32 * v4;
        return v4 != (v5 - a1) >> 5;
      }
    }
  }
  return v4 != (v5 - a1) >> 5;
}

void *sub_1CC4DF050(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  long long v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  while (1)
  {
    unint64_t v4 = v3[4];
    if (v4 <= a2) {
      break;
    }
    uint64_t v2 = v3;
LABEL_6:
    long long v3 = (void *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (v4 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v6 = (void *)*v3;
  __n128 result = v3;
  if (*v3)
  {
    __n128 result = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = v6 + 1;
      }
      if (v8) {
        __n128 result = v6;
      }
      uint64_t v6 = (void *)*v9;
    }
    while (*v9);
  }
  uint64_t v10 = (void *)v3[1];
  if (v10)
  {
    do
    {
      if (v10[4] <= a2) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v10 = (void *)*v11;
    }
    while (*v11);
  }
  return result;
}

void sub_1CC4DF0E0(int a1, uint64_t a2, uint64_t *a3)
{
  char v42[8] = *MEMORY[0x1E4F143B8];
  if ((a1 & 0xFFFFFFFE) == 2) {
    uint64_t v4 = 808;
  }
  else {
    uint64_t v4 = 224;
  }
  if ((a1 & 0xFFFFFFFE) == 2) {
    uint64_t v5 = a2 + 808;
  }
  else {
    uint64_t v5 = a2 + 224;
  }
  uint64_t v6 = sub_1CC4D977C(v5, a3);
  if (*(unsigned char *)(a2 + v4))
  {
    uint64_t v7 = v5 + 8;
    unsigned int v8 = 8;
  }
  else
  {
    uint64_t v7 = *(void *)(v5 + 8);
    unsigned int v8 = *(_DWORD *)(v5 + 16);
  }
  if (v7 + 72 * v8 != v6)
  {
    uint64_t v30 = v6;
    sub_1CC4D9624(&v31, v6 + 40);
    if (v32)
    {
      uint64_t v9 = (char *)v31;
      uint64_t v10 = (char *)v31 + 8 * v32;
      do
      {
        unint64_t v11 = __ROR8__(*(void *)v9, 32);
        uint64_t v39 = a2 + 16;
        uint64_t v40 = v42;
        uint64_t v41 = 0x400000000;
        if (*(_DWORD *)(a2 + 208))
        {
          sub_1CC4DA7F8(&v39, v11);
          int v27 = *(_DWORD *)(a2 + 208);
          uint64_t v12 = *(unsigned int *)(a2 + 212);
          uint64_t v34 = a2 + 16;
          uint64_t v35 = &v37;
          BOOL v28 = v27 == 0;
          uint64_t v17 = a2 + 24;
          if (v28) {
            uint64_t v17 = a2 + 16;
          }
          uint64_t v18 = v41;
          uint64_t v36 = 0x400000000;
          uint64_t v37 = v17;
          uint64_t v38 = v12 | (v12 << 32);
          if (!v41) {
            goto LABEL_24;
          }
          uint64_t v16 = v40;
        }
        else
        {
          uint64_t v12 = *(unsigned int *)(a2 + 212);
          if (v12)
          {
            uint64_t v24 = 0;
            int v25 = (unint64_t *)(a2 + 24);
            while (1)
            {
              unint64_t v26 = *v25;
              v25 += 2;
              if (v26 >= v11) {
                break;
              }
              if (v12 == ++v24)
              {
                uint64_t v13 = *(unsigned int *)(a2 + 212);
                uint64_t v14 = v13;
                goto LABEL_16;
              }
            }
            uint64_t v14 = v24;
            uint64_t v13 = *(unsigned int *)(a2 + 212);
          }
          else
          {
            uint64_t v13 = 0;
            uint64_t v14 = 0;
          }
LABEL_16:
          v42[0] = a2 + 16;
          v42[1] = v13 | (v14 << 32);
          LODWORD(v41) = 1;
          uint64_t v34 = a2 + 16;
          uint64_t v35 = &v37;
          uint64_t v36 = 0x400000000;
          uint64_t v15 = v13 | (v13 << 32);
          uint64_t v16 = v42;
          uint64_t v17 = a2 + 16;
          uint64_t v18 = 1;
          uint64_t v37 = a2 + 16;
          uint64_t v38 = v15;
        }
        if (*((_DWORD *)v16 + 3) < *((_DWORD *)v16 + 2))
        {
          unint64_t v19 = &v16[2 * v18];
          if (*((_DWORD *)v19 - 1) != v12 || *(v19 - 2) != v17)
          {
            uint64_t v20 = *(v19 - 2);
            uint64_t v21 = *((unsigned int *)v19 - 1);
            unint64_t v22 = *(void *)(v20 + 16 * v21);
            if (v22 <= v11)
            {
              unint64_t v23 = *(void *)(v20 + 16 * v21 + 8);
              sub_1CC4DDBF0((uint64_t)&v39);
              if (v22 < v11) {
                sub_1CC4DA4D0(a2 + 16, v22, v11 - 1);
              }
              if (v23 > v11) {
                sub_1CC4DA4D0(a2 + 16, v11 + 1, v23);
              }
            }
          }
        }
LABEL_24:
        if (v40 != v42) {
          free(v40);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    char v29 = *(void **)(v30 + 40);
    if (v29 != (void *)(v30 + 56)) {
      free(v29);
    }
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0;
    *(void *)uint64_t v30 = 0;
    *(unsigned char *)(v30 + 24) = 1;
    *(void *)(v30 + 32) = 0;
    *(_DWORD *)(a2 + v4) -= 2;
    ++*(_DWORD *)(v5 + 4);
    if (v31 != &v33) {
      free(v31);
    }
  }
}

void sub_1CC4DF3D0(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 + 28;
  uint64_t v35 = *a1;
  uint64_t v37 = 0;
  uint64_t v38 = v35;
  memset(v36, 0, 112);
  uint64_t v6 = *(void *)(a2 + 160);
  if (v6) {
    uint64_t v7 = *(void **)(a2 + 144);
  }
  else {
    uint64_t v7 = *(void **)a2;
  }
  uint64_t v28 = *(void *)a2 + 4 * *(unsigned int *)(a2 + 8);
  uint64_t v29 = *(void *)(a2 + 160);
  uint64_t v31 = a2 + 152;
  memset(&v36[7], 0, 80);
  uint64_t v8 = a4;
  uint64_t v9 = a1 + 101;
  while (1)
  {
    uint64_t v10 = (void *)(v6 ? v31 : v28);
    if (v7 == v10) {
      break;
    }
    unint64_t v11 = (unsigned int *)v7 + 7;
    if (!v6) {
      unint64_t v11 = (unsigned int *)v7;
    }
    uint64_t v12 = sub_1CC4D8054(a3, v8 | ((unint64_t)*v11 << 32));
    if ((*(_DWORD *)(v12 + 56) & 0xFFFFFFFE) == 2) {
      uint64_t v13 = 101;
    }
    else {
      uint64_t v13 = 28;
    }
    if ((*(_DWORD *)(v12 + 56) & 0xFFFFFFFE) == 2) {
      uint64_t v14 = (uint64_t)v9;
    }
    else {
      uint64_t v14 = (uint64_t)v5;
    }
    unsigned int v32 = 0;
    if (sub_1CC4D97E0(v14, (uint64_t *)v12, (uint64_t *)&v32))
    {
      uint64_t v15 = a3;
      uint64_t v16 = v9;
      uint64_t v17 = v8;
      uint64_t v18 = v5;
      unint64_t v19 = v32;
      uint64_t v20 = (char *)*((void *)v32 + 5);
      if (v20 != (char *)v32 + 56) {
        free(v20);
      }
      *unint64_t v19 = 0;
      v19[1] = 0;
      unsigned int v19[2] = 0;
      *((unsigned char *)v19 + 24) = 1;
      v19[4] = 0;
      LODWORD(a1[v13]) -= 2;
      ++*(_DWORD *)(v14 + 4);
      uint64_t v5 = v18;
      uint64_t v8 = v17;
      uint64_t v9 = v16;
      a3 = v15;
      uint64_t v6 = v29;
    }
    sub_1CC4DE3D4(&v32, a3, v12);
    uint64_t v21 = (uint64_t *)v32;
    if (v33)
    {
      uint64_t v22 = 8 * v33;
      do
      {
        uint64_t v23 = *v21++;
        unint64_t v24 = __ROR8__(v23, 32);
        sub_1CC4DA4D0((uint64_t)v36, v24, v24);
        v22 -= 8;
      }
      while (v22);
      uint64_t v21 = (uint64_t *)v32;
    }
    if (v21 != &v34) {
      free(v21);
    }
    if (v6)
    {
      int v25 = (void *)v7[1];
      unint64_t v26 = v7;
      if (v25)
      {
        do
        {
          uint64_t v7 = v25;
          int v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v26[2];
          BOOL v27 = *v7 == (void)v26;
          unint64_t v26 = v7;
        }
        while (!v27);
      }
    }
    else
    {
      uint64_t v7 = (void *)((char *)v7 + 4);
    }
  }
  sub_1CC4DCFF4((uint64_t)(a1 + 1), (uint64_t)&v35);
  if (v37) {
    sub_1CD590B5C((uint64_t)v36);
  }
}

void sub_1CC4DF654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unsigned int a9)
{
  v40[4] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = sub_1CC4D8054(a5, a6);
  v32[0] = a2;
  v32[1] = a3;
  v32[2] = a4;
  uint64_t v32[3] = a5;
  uint64_t v18 = sub_1CC4D8054(a5, a6);
  sub_1CC4DEA00(a3, v18);
  if (a7 == 1)
  {
    sub_1CC4DFBB0((uint64_t)&v30, a1, a2);
    unsigned int v19 = 0;
    int v20 = v30;
    long long v29 = v31;
    long long v22 = *(_OWORD *)(v17 + 16);
    long long v21 = *(_OWORD *)(v17 + 32);
    long long v23 = *(_OWORD *)v17;
    *(_OWORD *)&v34[12] = *(_OWORD *)(v17 + 44);
    v33[1] = v22;
    *(_OWORD *)uint64_t v34 = v21;
    v33[0] = v23;
    uint64_t v35 = v37;
    uint64_t v36 = 0x800000000;
    if (v33 != (long long *)v17)
    {
      unsigned int v24 = *(_DWORD *)(v17 + 72);
      if (v24)
      {
        if (v24 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v37, *(const void **)(v17 + 64), 32 * *(unsigned int *)(v17 + 72));
        LODWORD(v36) = v24;
        unsigned int v19 = v24;
      }
    }
    uint64_t v38 = v40;
    uint64_t v39 = 0x800000000;
    unsigned int v26 = *(_DWORD *)(v17 + 344);
    if (v26 && v33 != (long long *)v17)
    {
      if (v26 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v40, *(const void **)(v17 + 336), 4 * *(unsigned int *)(v17 + 344));
      LODWORD(v39) = v26;
      unsigned int v19 = v36;
    }
    BOOL v27 = v35;
    if (!sub_1CC4D9C10((uint64_t)v35, a8))
    {
      uint64_t v28 = 32 * v19 - 32;
      do
      {
        v27 += 8;
        v28 -= 32;
      }
      while (!sub_1CC4D9C10((uint64_t)v27, a8));
    }
    *BOOL v27 = 2;
    v27[2] = v20;
    *((_OWORD *)v27 + 1) = v29;
    sub_1CC4DFA8C(v32, v33);
    if (v38 != v40) {
      free(v38);
    }
    int v25 = v35;
    if (v35 == v37) {
      return;
    }
LABEL_9:
    free(v25);
    return;
  }
  sub_1CC4DF904((uint64_t)v33, v17, a8, a9);
  sub_1CC4DFA8C(v32, v33);
  if (v38 != v40) {
    free(v38);
  }
  int v25 = v35;
  if (v35 != v37) {
    goto LABEL_9;
  }
}

BOOL sub_1CC4DF904(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = 0;
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v10 = (uint64_t *)(a1 + 64);
  *(void *)(a1 + 72) = 0x800000000;
  if (a1 != a2)
  {
    unsigned int v11 = *(_DWORD *)(a2 + 72);
    if (v11)
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 80), *(const void **)(a2 + 64), 32 * *(unsigned int *)(a2 + 72));
      *(_DWORD *)(a1 + 72) = v11;
      unsigned int v8 = v11;
    }
  }
  *(void *)(a1 + 336) = a1 + 352;
  *(void *)(a1 + 344) = 0x800000000;
  unsigned int v12 = *(_DWORD *)(a2 + 344);
  if (v12 && a1 != a2)
  {
    if (v12 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy((void *)(a1 + 352), *(const void **)(a2 + 336), 4 * *(unsigned int *)(a2 + 344));
    *(_DWORD *)(a1 + 344) = v12;
    unsigned int v8 = *(_DWORD *)(a1 + 72);
  }
  uint64_t v13 = *v10;
  BOOL result = sub_1CC4D9C10(*v10, a3);
  if (!result)
  {
    uint64_t v15 = 32 * v8 - 32;
    do
    {
      v13 += 32;
      BOOL result = sub_1CC4D9C10(v13, a3);
      v15 -= 32;
    }
    while (!result);
  }
  *(_DWORD *)uint64_t v13 = 1;
  *(void *)(v13 + 8) = a4;
  return result;
}

void sub_1CC4DFA8C(uint64_t *a1, long long *a2)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  sub_1CC4D8A38(&v12, (uint64_t **)a1[3], (uint64_t)a2);
  sub_1CC4DEA00(a1[1], (uint64_t)a2);
  uint64_t v4 = a1[1];
  sub_1CC4D9624(v10, (uint64_t)&v12);
  sub_1CC4D92F8(v4, (uint64_t)v10, a2);
  if (v10[0] != &v11) {
    free(v10[0]);
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *((void *)v12 + v13 - 1);
  uint64_t v7 = a1[2];
  unsigned int v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v9 = (void *)(*(void *)v7 + 16 * v8);
  *long long v9 = v5;
  v9[1] = v6;
  ++*(_DWORD *)(v7 + 8);
  if (v12 != v14) {
    free(v12);
  }
}

uint64_t sub_1CC4DFBB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 48);
  if ((v4 & 7) != 0)
  {
    uint64_t v5 = *(void **)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    uint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a3 + 48) = v5;
  }
  uint64_t v6 = *(unsigned int *)((*v5 & ((uint64_t)(*v5 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v7 = *(void *)(a3 + 24);
  int v10 = 0;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, int *))(**(void **)(a2 + 24) + 232))(*(void *)(a2 + 24), *(void *)(v7 + 32), v6, &v10);
  *(_DWORD *)a1 = v10;
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_1CC4DFC54(uint64_t a1, llvm::MachineInstr *this)
{
  unint64_t v2 = *((void *)this + 6);
  if (v2 >= 8)
  {
    if ((v2 & 7) != 0)
    {
      uint64_t v5 = (_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
      BOOL v6 = (*((void *)this + 6) & 7) != 3 || v5 == 0;
      if (v6 || *v5 != 1) {
        return 0;
      }
    }
    else
    {
      *((void *)this + 6) = v2 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((llvm::MachineInstr::getSpillSize(this, *(const llvm::TargetInstrInfo **)(a1 + 16)) & 0xFF00000000) != 0
      || (llvm::MachineInstr::getFoldedSpillSize(this, *(const llvm::TargetInstrInfo **)(a1 + 16)) & 0xFF00000000) != 0)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1CC4DFCE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = 0;
    for (uint64_t i = (void *)(a1 + 16);
          *((_DWORD *)i - 4) != 2
       || *((_DWORD *)i - 2) != *(_DWORD *)a3
       || *i != *(void *)(a3 + 8)
       || i[1] != *(void *)(a3 + 16);
          i += 4)
    {
      if (a2 == ++v3) {
        return a2;
      }
    }
    return v3;
  }
  return a2;
}

void sub_1CC4DFD48(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u && !*(_DWORD *)(a1 + 4)) {
    return;
  }
  if (v2)
  {
    uint64_t v8 = a1 + 8;
    uint64_t v9 = a1 + 584;
    goto LABEL_31;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  if (((2 * v2) & 0xFFFFFFFC) >= v3)
  {
    if (!v3) {
      goto LABEL_37;
    }
  }
  else if (v3 > 0x40)
  {
    sub_1CC4DFF0C(a1);
    char v4 = __clz((v2 >> 1) - 1);
    if ((v4 & 0x3E) == 0x1C) {
      unsigned int v5 = 64;
    }
    else {
      unsigned int v5 = 1 << (33 - v4);
    }
    if (v2 >= 2) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    unsigned int v7 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) == 0 || v6 >= 9)
    {
      if (v7) {
        goto LABEL_17;
      }
      if (v6 != *(_DWORD *)(a1 + 16))
      {
        MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
        unsigned int v7 = *(_DWORD *)a1;
LABEL_17:
        *(_DWORD *)a1 = v7 | 1;
        if (v6 >= 9)
        {
          *(_DWORD *)a1 = v7 & 0xFFFFFFFE;
          *(void *)(a1 + 8) = operator new(72 * v6, (std::align_val_t)8uLL);
          *(void *)(a1 + 16) = v6;
        }
      }
    }
    sub_1CC4D8574((int *)a1);
    return;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 + 72 * v3;
  do
  {
LABEL_31:
    if (*(void *)v8) {
      goto LABEL_32;
    }
    if (*(unsigned char *)(v8 + 24))
    {
      if (*(_OWORD *)(v8 + 8) != 0 || *(void *)(v8 + 32))
      {
LABEL_32:
        int v10 = *(void **)(v8 + 40);
        if ((void *)(v8 + 56) != v10) {
          free(v10);
        }
      }
      *(unsigned char *)(v8 + 24) = 0;
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 25) = *(_DWORD *)v11;
      *(_DWORD *)(v8 + 28) = *(_DWORD *)&v11[3];
      *(void *)(v8 + 32) = 0;
      goto LABEL_35;
    }
    if (*(void *)(v8 + 32)) {
      goto LABEL_32;
    }
LABEL_35:
    v8 += 72;
  }
  while (v8 != v9);
  unsigned int v3 = *(_DWORD *)a1 & 1;
LABEL_37:
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = 0;
}

void sub_1CC4DFF0C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = a1 + 8;
    uint64_t v1 = 8;
  }
  else
  {
    uint64_t v1 = *(unsigned int *)(a1 + 16);
    if (!v1) {
      return;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = 72 * v1;
  char v4 = (void *)(v2 + 56);
  do
  {
    if (*(v4 - 7) || *((unsigned char *)v4 - 32) && *((_OWORD *)v4 - 3) != 0 || *(v4 - 3))
    {
      unsigned int v5 = (void *)*(v4 - 2);
      if (v4 != v5) {
        free(v5);
      }
    }
    v4 += 9;
    v3 -= 72;
  }
  while (v3);
}

void sub_1CC4DFF94(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 112 * v1;
    uint64_t v3 = *(void *)a1 + 88;
    do
    {
      if ((*(void *)(v3 - 88) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        sub_1CD3C5048(v3, *(void **)(v3 + 8));
        char v4 = *(void **)(v3 - 80);
        if ((void *)(v3 - 64) != v4) {
          free(v4);
        }
      }
      v3 += 112;
      v2 -= 112;
    }
    while (v2);
  }
}

int *sub_1CC4E000C(int *a1)
{
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1 + 2;
    uint64_t v4 = 4;
  }
  else
  {
    uint64_t v4 = a1[4];
    if (!v4) {
      goto LABEL_9;
    }
    uint64_t v3 = (int *)*((void *)a1 + 1);
  }
  unsigned int v5 = (uint64_t *)(v3 + 2);
  uint64_t v6 = 16 * v4;
  do
  {
    if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v7 = *v5;
      *unsigned int v5 = 0;
      if (v7) {
        sub_1CC4DE96C(v7);
      }
    }
    v5 += 2;
    v6 -= 16;
  }
  while (v6);
  int v2 = *a1;
LABEL_9:
  if ((v2 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
  }
  return a1;
}

uint64_t sub_1CC4E00A4(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  return a1;
}

void sub_1CC4E00E0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 56 * v1;
    uint64_t v3 = *(void *)a1 + 40;
    do
    {
      uint64_t v4 = *(void *)(v3 - 40);
      if (v4 == -4096)
      {
        if (*(void *)(v3 - 32) == -1 && *(void *)(v3 - 24) == -1) {
          goto LABEL_12;
        }
      }
      else if (v4 == -8192 && *(void *)(v3 - 32) == -2 && *(void *)(v3 - 24) == -2)
      {
        goto LABEL_12;
      }
      unsigned int v5 = *(void **)(v3 - 16);
      if ((void *)v3 != v5)
      {
        uint64_t v8 = v3;
        uint64_t v9 = v2;
        free(v5);
        uint64_t v3 = v8;
        uint64_t v2 = v9;
      }
LABEL_12:
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
}

void sub_1CC4E017C(void *a1)
{
  if (a1)
  {
    sub_1CC4E017C(*a1);
    sub_1CC4E017C(a1[1]);
    uint64_t v2 = (void *)a1[52];
    if (v2 != a1 + 54) {
      free(v2);
    }
    uint64_t v3 = (void *)a1[46];
    if (v3 != a1 + 48) {
      free(v3);
    }
    uint64_t v4 = (void *)a1[12];
    if (v4 != a1 + 14) {
      free(v4);
    }
    operator delete(a1);
  }
}

BOOL LiveDebugValues::InstrRefBasedLDV::transferDebugValue(LiveDebugValues::InstrRefBasedLDV *this, const llvm::MachineInstr *a2)
{
  int v2 = **((unsigned __int16 **)a2 + 2);
  unsigned int v3 = v2 - 13;
  if ((v2 - 13) <= 1)
  {
    BOOL v6 = v2 == 14;
    uint64_t v7 = *((void *)a2 + 4);
    uint64_t v8 = *(void *)(v7 + ((unint64_t)(v2 != 14) << 6) + 16);
    uint64_t v9 = 96;
    if (v6) {
      uint64_t v9 = 32;
    }
    uint64_t v10 = *(void *)(v7 + v9 + 16);
    uint64_t v11 = (_DWORD *)*((void *)a2 + 7);
    uint64_t v12 = v11[2] == 2 ? *((void *)v11 - 1) : 0;
    uint64_t v50 = v8;
    if (v10)
    {
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v10 + 24), *(uint64_t **)(v10 + 32), &v51);
    }
    else
    {
      v51.i8[0] = 0;
      char v52 = 0;
    }
    uint64_t v53 = v12;
    *(void *)&long long v49 = v10;
    BYTE8(v49) = *(unsigned char *)(v7 + 32) == 1;
    if (llvm::LexicalScopes::findLexicalScope((int8x8_t *)this + 16, (const llvm::DILocation *)v11))
    {
      int v13 = **((unsigned __int16 **)a2 + 2);
      if (v13 == 14)
      {
        uint64_t v14 = *((void *)this + 46);
        if (v14) {
          sub_1CD59213C(v14, (uint64_t)a2, &v49, 0, 0);
        }
        uint64_t v15 = *((void *)this + 47);
        if (v15) {
          sub_1CD5922AC(v15, (uint64_t)a2, (uint64_t *)&v49, 0);
        }
      }
      else
      {
        uint64_t v16 = *((void *)a2 + 4);
        if (!*(unsigned char *)v16)
        {
          uint64_t v21 = *(unsigned int *)(v16 + 4);
          if (v21)
          {
            uint64_t v22 = *((void *)this + 44);
            uint64_t v23 = *(void *)(v22 + 64);
            unsigned int v24 = *(_DWORD *)(v23 + 4 * v21);
            if (v24 == -1)
            {
              unsigned int v24 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), *(_DWORD *)(v16 + 4));
              *(_DWORD *)(v23 + 4 * v21) = v24;
              int v13 = **((unsigned __int16 **)a2 + 2);
              uint64_t v25 = *((void *)a2 + 4);
              LODWORD(v21) = *(_DWORD *)(v16 + 4);
            }
            else
            {
              uint64_t v25 = *((void *)a2 + 4);
            }
            uint64_t v48 = *(void *)(*(void *)(v22 + 32) + 8 * v24);
            uint64_t v26 = v13 == 14 ? 32 : 96;
            BOOL v27 = *(uint64_t **)(*((void *)a2 + 3) + 32);
            if ((*(unsigned char *)v27[45] & 4) != 0)
            {
              uint64_t v28 = v27[5];
              uint64_t v29 = *(void *)(v28 + 456);
              uint64_t v30 = *(void *)(v28 + 464);
              uint64_t v31 = v30 - v29;
              if (v30 != v29)
              {
                uint64_t v32 = 0;
                unsigned int v33 = *(llvm::DIExpression **)(v25 + v26 + 16);
                uint64_t v34 = *v27;
                uint64_t v35 = 8 * (v31 >> 3);
                while (1)
                {
                  if (v21 == *(void *)(v29 + 8 * v32))
                  {
                    uint64_t v36 = *(void *)(v34 + 112);
                    if (v36)
                    {
                      if ((v32 + 2) < *(_DWORD *)(v36 + 8))
                      {
                        uint64_t v37 = *(void *)(v36 + 8 * (v32 + 2) + 40);
                        if (v37)
                        {
                          if ((*(unsigned char *)(v37 + 19) & 0x40) != 0) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  ++v32;
                  v35 -= 8;
                  if (!v35) {
                    goto LABEL_17;
                  }
                }
                *((unsigned char *)this + 384) = 1;
                uint64_t v38 = (llvm::MachineInstr *)*((void *)this + 47);
                if (v38) {
                  *((unsigned char *)v38 + 33) = 1;
                }
                if (!v33
                  || (uint64_t v39 = (void *)*((void *)v33 + 3), ((*((void *)v33 + 4) - (void)v39) & 0x7FFFFFFF8) == 0)
                  || *v39 != 4099)
                {
                  if (v38) {
                    sub_1CD5925AC(v38, &v50, (uint64_t)&v49, &v48);
                  }
                  else {
                    *(void *)(v25 + 112) = llvm::DIExpression::prepend(v33, (const llvm::DIExpression *)8, 0);
                  }
                }
              }
            }
          }
        }
LABEL_17:
        uint64_t v17 = *((void *)this + 46);
        if (v17)
        {
          if (*(unsigned char *)v16)
          {
            uint64_t v18 = (long long *)*((void *)a2 + 4);
            if (*(unsigned __int8 *)v18 - 1 <= 2) {
              sub_1CD5926C4(*((void *)this + 46), (uint64_t)a2, v18);
            }
          }
          else
          {
            uint64_t v40 = *(unsigned int *)(v16 + 4);
            if (v40)
            {
              uint64_t v45 = *((void *)this + 44);
              uint64_t v46 = *(void *)(v45 + 64);
              unsigned int v47 = *(_DWORD *)(v46 + 4 * v40);
              if (v47 == -1)
              {
                unsigned int v47 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), v40);
                *(_DWORD *)(v46 + 4 * v40) = v47;
              }
              uint64_t v43 = *(void *)(*(void *)(v45 + 32) + 8 * v47);
              uint64_t v41 = v17;
              uint64_t v42 = a2;
              char v44 = 1;
            }
            else
            {
              uint64_t v41 = *((void *)this + 46);
              uint64_t v42 = a2;
              uint64_t v43 = 0;
              char v44 = 0;
            }
            sub_1CD59213C(v41, (uint64_t)v42, &v49, v43, v44);
          }
        }
        uint64_t v19 = *((void *)this + 47);
        if (v19) {
          sub_1CD592834(v19, (uint64_t)a2);
        }
      }
    }
  }
  return v3 < 2;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::transferDebugInstrRef(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  v112[2] = *MEMORY[0x1E4F143B8];
  if (**(_WORD **)(a2 + 16) != 15) {
    return 0;
  }
  unint64_t v6 = a2;
  if (!*(void *)(a1 + 368) && !*(void *)(a1 + 376)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(v8 + 112);
  uint64_t v10 = *(_DWORD **)(a2 + 56);
  if (v10[2] == 2) {
    uint64_t v11 = *((void *)v10 - 1);
  }
  else {
    uint64_t v11 = 0;
  }
  unsigned int v13 = *(_DWORD *)(v8 + 16);
  unsigned int v14 = *(_DWORD *)(v8 + 48);
  uint64_t v106 = *(void *)(v8 + 80);
  if (v9)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v9 + 24), *(uint64_t **)(v9 + 32), &v107);
  }
  else
  {
    v107.i8[0] = 0;
    char v108 = 0;
  }
  uint64_t v109 = v11;
  if (llvm::LexicalScopes::findLexicalScope((int8x8_t *)(a1 + 128), (const llvm::DILocation *)v10))
  {
    uint64_t v16 = *(void *)(*(void *)(v6 + 24) + 32);
    int v110 = v112;
    uint64_t v111 = 0x400000000;
    uint64_t v17 = *(_DWORD **)(v16 + 920);
    unint64_t v18 = *(unsigned int *)(v16 + 928);
    uint64_t v19 = v17;
    if (v18)
    {
      uint64_t v19 = *(_DWORD **)(v16 + 920);
      unint64_t v20 = *(unsigned int *)(v16 + 928);
      do
      {
        unint64_t v21 = v20 >> 1;
        uint64_t v22 = &v19[5 * (v20 >> 1)];
        if (*v22 < v13 || *v22 <= v13 && v22[1] < v14)
        {
          uint64_t v19 = v22 + 5;
          unint64_t v21 = v20 + ~v21;
        }
        unint64_t v20 = v21;
      }
      while (v21);
    }
    if (v19 != &v17[5 * v18] && *v19 == v13 && v19[1] == v14)
    {
      unsigned int v23 = 0;
      do
      {
        unsigned int v13 = v19[2];
        unsigned int v14 = v19[3];
        int v24 = v19[4];
        if (v24)
        {
          if (v23 >= HIDWORD(v111)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v110 + v23) = v24;
          unsigned int v23 = v111 + 1;
          LODWORD(v111) = v111 + 1;
          uint64_t v17 = *(_DWORD **)(v16 + 920);
          unint64_t v18 = *(unsigned int *)(v16 + 928);
        }
        uint64_t v19 = v17;
        if (v18)
        {
          uint64_t v19 = v17;
          unint64_t v25 = v18;
          do
          {
            unint64_t v26 = v25 >> 1;
            BOOL v27 = &v19[5 * (v25 >> 1)];
            if (*v27 < v13 || v13 >= *v27 && v27[1] < v14)
            {
              uint64_t v19 = v27 + 5;
              unint64_t v26 = v25 + ~v26;
            }
            unint64_t v25 = v26;
          }
          while (v26);
        }
      }
      while (v19 != &v17[5 * v18] && *v19 == v13 && v19[1] == v14);
    }
    uint64_t v28 = a1 + 632;
    uint64_t v29 = *(void **)(a1 + 632);
    if (!v29) {
      goto LABEL_49;
    }
    uint64_t v30 = a1 + 632;
    do
    {
      unint64_t v31 = v29[4];
      BOOL v32 = v31 >= v13;
      if (v31 >= v13) {
        unsigned int v33 = v29;
      }
      else {
        unsigned int v33 = v29 + 1;
      }
      if (v32) {
        uint64_t v30 = (uint64_t)v29;
      }
      uint64_t v29 = (void *)*v33;
    }
    while (*v33);
    if (v30 == v28 || *(void *)(v30 + 32) > (unint64_t)v13) {
LABEL_49:
    }
      uint64_t v30 = a1 + 632;
    unsigned int v34 = *(_DWORD *)(a1 + 656);
    if (v34)
    {
      uint64_t v35 = *(void **)(a1 + 648);
      unint64_t v36 = *(unsigned int *)(a1 + 656);
      do
      {
        unint64_t v37 = v36 >> 1;
        uint64_t v38 = &v35[5 * (v36 >> 1)];
        unsigned int v40 = *v38;
        uint64_t v39 = v38 + 10;
        v36 += ~(v36 >> 1);
        if (v13 > v40) {
          uint64_t v35 = v39;
        }
        else {
          unint64_t v36 = v37;
        }
      }
      while (v36);
    }
    else
    {
      uint64_t v35 = *(void **)(a1 + 648);
    }
    if (v30 == v28)
    {
      if (v35 == (void *)(*(void *)(a1 + 648) + 40 * v34) || *v35 != v13) {
        goto LABEL_100;
      }
      unint64_t v46 = LiveDebugValues::InstrRefBasedLDV::resolveDbgPHIs(a1, v15, a3, a4, v6, v13);
      unsigned __int8 v48 = v47;
    }
    else
    {
      uint64_t v41 = *(void *)(v30 + 40);
      int v42 = *(_DWORD *)(*(void *)(v41 + 24) + 24);
      if (v14 == 1000000)
      {
        unint64_t v43 = *(void *)(v41 + 48);
        if (v43 >= 8)
        {
          if ((v43 & 7) == 0)
          {
            *(void *)(v41 + 48) = v43 & 0xFFFFFFFFFFFFFFF8;
LABEL_134:
            unint64_t LocationForMemOperand = LiveDebugValues::InstrRefBasedLDV::findLocationForMemOperand((LiveDebugValues::InstrRefBasedLDV *)a1, (const llvm::MachineInstr *)v41);
            if (!HIDWORD(LocationForMemOperand))
            {
              unint64_t v46 = 0;
              unsigned __int8 v48 = 0;
              goto LABEL_101;
            }
            unint64_t v46 = *(void *)&v42 & 0xFFFFFLL | ((*(_DWORD *)(v30 + 48) & 0xFFFFFLL) << 20) | (LocationForMemOperand << 40);
            unsigned __int8 v48 = 1;
            goto LABEL_75;
          }
          char v44 = (_DWORD *)(v43 & 0xFFFFFFFFFFFFFFF8);
          BOOL v45 = (*(void *)(v41 + 48) & 7) != 3 || v44 == 0;
          if (!v45 && *v44 == 1) {
            goto LABEL_134;
          }
        }
LABEL_100:
        unint64_t v46 = 0;
        unsigned __int8 v48 = 0;
LABEL_101:
        *(void *)&long long v105 = v9;
        BYTE8(v105) = 0;
        uint64_t v77 = *(void *)(a1 + 368);
        if (v77) {
          sub_1CD59213C(v77, v6, &v105, v46, v48);
        }
        uint64_t v78 = *(void *)(a1 + 376);
        if (!v78)
        {
LABEL_104:
          if (v110 != v112) {
            free(v110);
          }
          return 1;
        }
        int v79 = *(_DWORD *)(*(void *)(a1 + 352) + 40);
        uint64_t v80 = v48;
        if (!v79)
        {
          uint64_t v81 = 0;
          uint64_t v82 = 0;
          uint64_t v83 = 0;
LABEL_124:
          sub_1CD5922AC(v78, v6, (uint64_t *)&v105, v82 | (v83 << 8) | (v81 << 32));
          if (v80
            && !v81
            && (v46 & 0xFFFFF) == *(_DWORD *)(a1 + 360)
            && ((v46 >> 20) & 0xFFFFF) > *(unsigned int *)(a1 + 364))
          {
            uint64_t v90 = *(void *)(a1 + 376);
            uint64_t v91 = 96;
            if (**(_WORD **)(v6 + 16) == 14) {
              uint64_t v91 = 32;
            }
            uint64_t v103 = *(void *)(*(void *)(v6 + 32) + v91 + 16);
            char v104 = 0;
            sub_1CD5929AC(v90, (uint64_t)&v106, &v103, v46);
          }
          LiveDebugValues::MLocTracker::emitLoc(*(void *)(a1 + 352), v82 | (v83 << 8) | (v81 << 32), (uint64_t)&v106, (uint64_t)&v105);
          uint64_t v93 = *(void *)(a1 + 376);
          unsigned int v94 = *(_DWORD *)(v93 + 2432);
          if (v94 >= *(_DWORD *)(v93 + 2436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v93 + 2424) + 8 * v94) = v92;
          ++*(_DWORD *)(v93 + 2432);
          sub_1CD592A64(*(void *)(a1 + 376), v6, 0);
          goto LABEL_104;
        }
        unsigned int v84 = 0;
        uint64_t v83 = 0;
        uint64_t v85 = 0;
        uint64_t v82 = 0;
        uint64_t v81 = 0;
        while (1)
        {
          if (v80)
          {
            uint64_t v86 = *(void *)(a1 + 352);
            if (*(void *)(*(void *)(v86 + 32) + 8 * v85) == v46)
            {
              if (v81
                && (uint64_t v87 = *(void *)(v86 + 88), v88 = *(_DWORD *)(v86 + 236), *(_DWORD *)(v87 + 4 * v85) < v88))
              {
                uint64_t v89 = v82 | (v83 << 8);
                if (*(_DWORD *)(v87 + 4 * v89) < v88)
                {
                  if (LiveDebugValues::InstrRefBasedLDV::isCalleeSaved((void *)a1, v89))
                  {
                    uint64_t v81 = 1;
                  }
                  else
                  {
                    uint64_t v81 = 1;
                    if (LiveDebugValues::InstrRefBasedLDV::isCalleeSaved((void *)a1, v85))
                    {
                      uint64_t v82 = v85;
                      uint64_t v83 = v84 >> 8;
                    }
                  }
                  goto LABEL_120;
                }
              }
              else
              {
                uint64_t v82 = v85;
                uint64_t v83 = v84 >> 8;
              }
              uint64_t v81 = 1;
            }
          }
LABEL_120:
          unsigned int v84 = v85 + 1;
          uint64_t v85 = (v85 + 1);
          if (v79 == v84)
          {
            uint64_t v78 = *(void *)(a1 + 376);
            goto LABEL_124;
          }
        }
      }
      if (v14 >= *(_DWORD *)(v41 + 40)) {
        goto LABEL_100;
      }
      uint64_t v49 = *(void *)(v41 + 32);
      if ((*(_DWORD *)(v49 + 32 * v14) & 0x10000FF) != 0x1000000) {
        goto LABEL_100;
      }
      uint64_t v50 = *(unsigned int *)(v49 + 32 * v14 + 4);
      if (!v50) {
        goto LABEL_100;
      }
      unint64_t v46 = *(void *)&v42 & 0xFFFFFLL | ((*(_DWORD *)(v30 + 48) & 0xFFFFFLL) << 20) | ((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 352) + 64) + 4 * v50) << 40);
      unsigned __int8 v48 = 1;
    }
LABEL_75:
    if (!v48 || !v111) {
      goto LABEL_101;
    }
    int v51 = 0;
    int v52 = 0;
    uint64_t v53 = *(void *)(a1 + 16);
    uint64_t v54 = *(void *)(v53 + 96);
    uint64_t v55 = 4 * v111;
    do
    {
      unsigned int v56 = (unsigned __int16 *)(v54 + 4 * *(unsigned int *)((char *)v110 + v55 - 4));
      v51 += *v56;
      if (v52 - 1 >= v56[1]) {
        int v52 = v56[1];
      }
      v55 -= 4;
    }
    while (v55);
    uint64_t v57 = *(void *)(a1 + 352);
    unint64_t v58 = *(unsigned int *)(*(void *)(v57 + 88) + ((v46 >> 38) & 0x3FFFFFC));
    if (v58 < *(_DWORD *)(v57 + 236))
    {
      int v59 = 0;
      uint64_t v102 = (void *)(v53 + 8);
      unsigned int v60 = *(uint64_t ***)(v53 + 248);
      unint64_t v61 = v58 >> 3;
      uint64_t v62 = *(uint64_t ***)(v53 + 240);
      do
      {
        if ((v58 - 1) <= 0x3FFFFFFE)
        {
          uint64_t v63 = **v62;
          if (v61 < *(unsigned __int16 *)(v63 + 22)
            && ((1 << (v58 & 7)) & *(unsigned __int8 *)(*(void *)(v63 + 8) + v61)) != 0)
          {
            int v59 = *v62;
          }
        }
        ++v62;
      }
      while (v62 != v60);
      if (v52 == *(_DWORD *)(*(void *)(v53 + 264)
                            + 24
                            * (*(unsigned __int16 *)(*v59 + 24)
                             + *(_DWORD *)(v53 + 272)
                             * (((unint64_t)v60 - *(void *)(v53 + 240)) >> 3)))
        && v51 == 0)
      {
        goto LABEL_101;
      }
      uint64_t v65 = *(void *)(v53 + 56);
      uint64_t v66 = *(unsigned int *)(*(void *)(v53 + 8) + 24 * v58 + 4);
      if (*(_WORD *)(v65 + 2 * v66))
      {
        uint64_t v98 = *(LiveDebugValues::MLocTracker **)(a1 + 352);
        unint64_t v99 = v46;
        unsigned __int8 v100 = v48;
        uint64_t v101 = v9;
        unsigned __int16 v67 = *(_WORD *)(v65 + 2 * v66) + v58;
        uint64_t v68 = (unsigned __int16 *)(v65 + 2 * v66 + 2);
        while (1)
        {
          unint64_t v69 = v6;
          uint64_t v70 = v67;
          unint64_t v71 = v58;
          unsigned int v72 = (unsigned __int16 *)(v54 + 4 * llvm::MCRegisterInfo::getSubRegIndex(v102, v58, v67));
          int v73 = v72[1];
          int v74 = *v72;
          if (v52 == v73 && v51 == v74) {
            break;
          }
          unint64_t v46 = 0;
          unsigned __int8 v48 = 0;
          int v76 = *v68++;
          unsigned __int16 v67 = v76 + v70;
          unint64_t v58 = v71;
          unint64_t v6 = v69;
          uint64_t v9 = v101;
          if (!v76) {
            goto LABEL_101;
          }
        }
        if (v70)
        {
          uint64_t v96 = *((void *)v98 + 8);
          unsigned int v97 = *(_DWORD *)(v96 + 4 * v70);
          unint64_t v6 = v69;
          if (v97 == -1)
          {
            unsigned int v97 = LiveDebugValues::MLocTracker::trackRegister(v98, v70);
            *(_DWORD *)(v96 + 4 * v70) = v97;
          }
          unsigned __int8 v48 = v100;
          unint64_t v46 = v99 & 0xFFFFFFFFFFLL | ((unint64_t)v97 << 40);
          uint64_t v9 = v101;
        }
        else
        {
          unint64_t v46 = 0;
          unsigned __int8 v48 = 0;
          unint64_t v6 = v69;
          uint64_t v9 = v101;
        }
        goto LABEL_101;
      }
    }
    goto LABEL_100;
  }
  return 1;
}

unint64_t LiveDebugValues::InstrRefBasedLDV::resolveDbgPHIs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v17 = 0;
  if (sub_1CD45B528(*(void *)(a1 + 1992), *(_DWORD *)(a1 + 2008), a5, &v17)) {
    BOOL v12 = v17 == *(void *)(a1 + 1992) + 24 * *(unsigned int *)(a1 + 2008);
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12) {
    return *(void *)(v17 + 8);
  }
  unint64_t v13 = LiveDebugValues::InstrRefBasedLDV::resolveDbgPHIsImpl(a1, v11, a3, a4, a5, a6);
  uint64_t v17 = a5;
  *(void *)&long long v18 = v13;
  *((void *)&v18 + 1) = v15;
  sub_1CD5A0A5C((uint64_t)&v16, a1 + 1992, &v17, &v18);
  return v13;
}

__n128 sub_1CC4E0EBC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 648;
  uint64_t v3 = *(void *)(a1[1] + 24);
  v8[0] = *((unsigned int *)a1 + 4);
  v8[1] = v3;
  char v9 = 0;
  char v10 = 0;
  char v11 = 0;
  char v12 = 0;
  unint64_t v4 = sub_1CC47EC6C(v2, (unint64_t)v8);
  uint64_t v5 = *(void *)(v1 + 648) + 40 * *(unsigned int *)(v1 + 656);
  uint64_t v6 = *(void *)(v4 + 32);
  __n128 result = *(__n128 *)(v4 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v4;
  *(__n128 *)(v5 + 16) = result;
  *(void *)(v5 + 32) = v6;
  ++*(_DWORD *)(v1 + 656);
  return result;
}

BOOL sub_1CC4E0F3C(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(*(void *)(v3 + 16) + 8);
  if ((*(_WORD *)(v3 + 44) & 0xC) != 0 && (*(_WORD *)(v3 + 44) & 4) == 0)
  {
    while ((v4 & 0x80) == 0)
    {
      if ((*(_WORD *)(v3 + 44) & 8) == 0) {
        return 0;
      }
      uint64_t v3 = *(void *)(v3 + 8);
      LOBYTE(v4) = *(unsigned char *)(*(void *)(v3 + 16) + 8);
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)a1 + 352);
  if (!*(void *)(v6 + 176))
  {
    char v9 = *(_DWORD **)(v6 + 112);
    uint64_t v10 = *(unsigned int *)(v6 + 120);
    char v11 = &v9[v10];
    if (v10)
    {
      uint64_t v12 = 4 * v10;
      while (*v9 != a2)
      {
        ++v9;
        v12 -= 4;
        if (!v12) {
          goto LABEL_22;
        }
      }
    }
    else
    {
LABEL_22:
      char v9 = v11;
    }
    return v9 != v11;
  }
  uint64_t v7 = *(uint64_t **)(v6 + 168);
  if (!v7) {
    return 0;
  }
  while (1)
  {
    unsigned int v8 = *((_DWORD *)v7 + 7);
    if (v8 <= a2) {
      break;
    }
LABEL_13:
    BOOL result = 0;
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      return result;
    }
  }
  if (v8 < a2)
  {
    ++v7;
    goto LABEL_13;
  }
  return 1;
}

BOOL LiveDebugValues::InstrRefBasedLDV::isLocationSpill(const llvm::TargetInstrInfo **this, const llvm::MachineInstr *a2, llvm::MachineFunction *a3, unsigned int *a4)
{
  if (!((unint64_t)LiveDebugValues::InstrRefBasedLDV::isSpillInstruction(this, a2, a3) >> 32)) {
    return 0;
  }
  int v9 = 0;
  unsigned int v8 = (*(uint64_t (**)(const llvm::TargetInstrInfo *, const llvm::MachineInstr *, int *))(*(void *)this[4] + 112))(this[4], a2, &v9);
  *a4 = v8;
  return v8 != 0;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::transferSpillOrRestoreInst(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineInstr *a2)
{
  if (byte_1EBCD81D0) {
    return 0;
  }
  int v97 = -1;
  if ((*(unsigned int (**)(void, llvm::MachineInstr *, int *))(**((void **)this + 4) + 112))(*((void *)this + 4), a2, &v97)|| (uint64_t result = (*(uint64_t (**)(void, llvm::MachineInstr *, int *))(**((void **)this + 4) + 80))(*((void *)this + 4), a2, &v97), result))
  {
    *(void *)uint64_t v96 = 0;
    if ((*(unsigned int (**)(void, llvm::MachineInstr *, unsigned int *))(**((void **)this + 4) + 112))(*((void *)this + 4), a2, v96)|| (uint64_t result = (*(uint64_t (**)(void, llvm::MachineInstr *, unsigned int *))(**((void **)this + 4)+ 80))(*((void *)this + 4), a2, v96), result))
    {
      isSpillInstructioint n = LiveDebugValues::InstrRefBasedLDV::isSpillInstruction((const llvm::TargetInstrInfo **)this, a2, v5);
      if (HIDWORD(isSpillInstruction))
      {
        uint64_t v8 = *((void *)this + 44);
        unsigned int v9 = *(_DWORD *)(v8 + 240);
        if (v9)
        {
          unsigned int v55 = 0;
          int v56 = isSpillInstruction - 1;
          do
          {
            uint64_t v57 = *(unsigned int *)(*(void *)(v8 + 64) + 4 * (v55 + *(_DWORD *)(v8 + 236) + v9 * v56));
            *(void *)(*(void *)(v8 + 32) + 8 * v57) = *((_DWORD *)this + 90) & 0xFFFFFLL | ((*((_DWORD *)this + 91) & 0xFFFFFLL) << 20) | (v57 << 40);
            uint64_t v58 = *((void *)this + 47);
            if (v58) {
              sub_1CD593628(v58, v57, (unint64_t)a2, 1);
            }
            ++v55;
            uint64_t v8 = *((void *)this + 44);
            unsigned int v9 = *(_DWORD *)(v8 + 240);
          }
          while (v55 < v9);
        }
      }
      if (LiveDebugValues::InstrRefBasedLDV::isLocationSpill((const llvm::TargetInstrInfo **)this, a2, v7, &v96[1]))
      {
        int SpillBaseRegAndOffset = LiveDebugValues::InstrRefBasedLDV::extractSpillBaseRegAndOffset(this, a2);
        uint64_t v12 = v96[1];
        uint64_t v13 = *((void *)this + 2);
        unsigned int v14 = (void *)(v13 + 8);
        if (!v13) {
          unsigned int v14 = 0;
        }
        uint64_t v15 = v14[6];
        uint64_t v16 = *(unsigned int *)(*v14 + 24 * v96[1] + 4);
        if (*(_WORD *)(v15 + 2 * v16))
        {
          unsigned __int16 v17 = *(_WORD *)(v15 + 2 * v16) + LOWORD(v96[1]);
          long long v18 = (unsigned __int16 *)(v15 + 2 * v16 + 2);
          do
          {
            uint64_t v19 = (LiveDebugValues::MLocTracker *)*((void *)this + 44);
            uint64_t v20 = v17;
            uint64_t v21 = *((void *)v19 + 8);
            if (*(_DWORD *)(v21 + 4 * v17) == -1) {
              *(_DWORD *)(v21 + 4 * v17) = LiveDebugValues::MLocTracker::trackRegister(v19, v17);
            }
            unsigned int SubRegIndex = llvm::MCRegisterInfo::getSubRegIndex((void *)(*((void *)this + 2) + 8), v12, v20);
            unsigned int v23 = sub_1CD593F58(*((void *)this + 44), SpillBaseRegAndOffset, SubRegIndex);
            uint64_t v24 = *((void *)this + 44);
            uint64_t v25 = *(void *)(v24 + 64);
            unsigned int v26 = *(_DWORD *)(v25 + 4 * v20);
            if (v26 == -1)
            {
              unsigned int v26 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), v20);
              *(_DWORD *)(v25 + 4 * v20) = v26;
              uint64_t v27 = *((void *)this + 44);
              uint64_t v25 = *(void *)(v27 + 64);
            }
            else
            {
              uint64_t v27 = *((void *)this + 44);
            }
            uint64_t v28 = *(unsigned int *)(v25 + 4 * v23);
            *(void *)(*(void *)(v27 + 32) + 8 * v28) = *(void *)(*(void *)(v24 + 32) + 8 * v26);
            uint64_t v29 = *((void *)this + 47);
            if (v29) {
              sub_1CD593FC8(v29, *(_DWORD *)(*(void *)(*((void *)this + 44) + 64) + 4 * v20), v28, (unint64_t)a2);
            }
            int v30 = *v18++;
            unsigned __int16 v17 = v30 + v20;
          }
          while (v30);
          uint64_t v13 = *((void *)this + 2);
        }
        unsigned __int16 RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v13, v12, *((void *)this + 3));
        uint64_t v32 = *((void *)this + 44);
        int v98 = RegSizeInBits;
        int v33 = *(_DWORD *)(v32 + 240);
        unsigned int v34 = *((_DWORD *)sub_1CD59B940(v32 + 776, (unsigned __int16 *)&v98) + 1)
            + v33 * (SpillBaseRegAndOffset - 1)
            + *(_DWORD *)(v32 + 236);
        uint64_t v35 = *((void *)this + 44);
        uint64_t v36 = *(void *)(v35 + 64);
        unsigned int v37 = *(_DWORD *)(v36 + 4 * v12);
        if (v37 == -1)
        {
          unsigned int v37 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), v12);
          *(_DWORD *)(v36 + 4 * v12) = v37;
          uint64_t v38 = *((void *)this + 44);
          uint64_t v36 = *(void *)(v38 + 64);
        }
        else
        {
          uint64_t v38 = *((void *)this + 44);
        }
        uint64_t v39 = *(unsigned int *)(v36 + 4 * v34);
        *(void *)(*(void *)(v38 + 32) + 8 * v39) = *(void *)(*(void *)(v35 + 32) + 8 * v37);
        uint64_t v40 = *((void *)this + 47);
        if (v40) {
          sub_1CD593FC8(v40, *(_DWORD *)(*(void *)(*((void *)this + 44) + 64) + 4 * v12), v39, (unint64_t)a2);
        }
      }
      else
      {
        isRestoreInstructioint n = LiveDebugValues::InstrRefBasedLDV::isRestoreInstruction((const llvm::TargetInstrInfo **)this, a2, v10, &v96[1]);
        if (!HIDWORD(isRestoreInstruction)) {
          return 0;
        }
        int v42 = isRestoreInstruction;
        uint64_t v43 = v96[1];
        uint64_t v44 = *((void *)this + 2);
        if (v44) {
          BOOL v45 = (unsigned __int16 **)(v44 + 8);
        }
        else {
          BOOL v45 = 0;
        }
        unint64_t v46 = *v45;
        int v47 = *(_DWORD *)&(*v45)[12 * v96[1] + 8] & 0xF;
        unint64_t v48 = ((unint64_t)*(unsigned int *)&(*v45)[12 * v96[1] + 8] >> 3) & 0x1FFFFFFE;
        uint64_t v93 = v45;
        int v51 = v45 + 5;
        uint64_t v50 = v45[5];
        uint64_t v49 = v51[1];
        uint64_t v95 = (unsigned __int16 *)((char *)v49 + v48 + 2);
        unsigned int v52 = *(unsigned __int16 *)((char *)v49 + v48) + v47 * v96[1];
        do
        {
          if (v50[2 * (unsigned __int16)v52]) {
            BOOL v53 = v49 == 0;
          }
          else {
            BOOL v53 = 1;
          }
          if (!v53)
          {
            unsigned int v94 = v50[2 * (unsigned __int16)v52 + 1] << 16;
            int v59 = &v49[*(unsigned int *)&v46[12 * v50[2 * (unsigned __int16)v52] + 4]];
            LOWORD(v46) = v50[2 * (unsigned __int16)v52];
            while (1)
            {
              do
              {
                uint64_t v60 = *((void *)this + 44);
                int v61 = *((_DWORD *)this + 90);
                int v62 = *((_DWORD *)this + 91);
                uint64_t v63 = (unsigned __int16)v46;
                uint64_t v64 = *(void *)(v60 + 64);
                unsigned int v65 = *(_DWORD *)(v64 + 4 * (unsigned __int16)v46);
                if (v65 == -1)
                {
                  unsigned int v65 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), (unsigned __int16)v46);
                  *(_DWORD *)(v64 + 4 * v63) = v65;
                }
                *(void *)(*(void *)(v60 + 32) + 8 * v65) = *(void *)&v61 & 0xFFFFFLL | ((*(void *)&v62 & 0xFFFFFLL) << 20) | ((unint64_t)v65 << 40);
                int v66 = *v59++;
                LOWORD(v46) = v66 + v63;
              }
              while (v66);
              unsigned int v67 = HIWORD(v94);
              if (HIWORD(v94))
              {
                LODWORD(v46) = HIWORD(v94);
                v94 >>= 16;
                uint64_t v68 = v93;
              }
              else
              {
                uint64_t v68 = v93;
                if (!*v95)
                {
                  uint64_t v44 = *((void *)this + 2);
                  goto LABEL_56;
                }
                v52 += (unsigned __int16)*v95++;
                unint64_t v46 = (unsigned __int16 *)(v93[5] + 4 * (unsigned __int16)v52);
                unsigned int v67 = *v46;
                unsigned int v94 = v46[1] << 16;
                LOWORD(v46) = *v46;
              }
              int v59 = (unsigned __int16 *)(v68[6] + 2 * *(unsigned int *)(*v68 + 24 * v67 + 8));
            }
          }
          int v54 = (unsigned __int16)*v95++;
          v52 += v54;
        }
        while (v54);
LABEL_56:
        unint64_t v69 = (void *)(v44 + 8);
        if (!v44) {
          unint64_t v69 = 0;
        }
        uint64_t v70 = v69[6];
        uint64_t v71 = *(unsigned int *)(*v69 + 24 * v43 + 4);
        if (*(_WORD *)(v70 + 2 * v71))
        {
          unsigned __int16 v72 = *(_WORD *)(v70 + 2 * v71) + v43;
          int v73 = (unsigned __int16 *)(v70 + 2 * v71 + 2);
          do
          {
            uint64_t v74 = v72;
            unsigned int v75 = llvm::MCRegisterInfo::getSubRegIndex((void *)(*((void *)this + 2) + 8), v43, v72);
            unsigned int v76 = sub_1CD593F58(*((void *)this + 44), v42, v75);
            uint64_t v77 = *((void *)this + 44);
            uint64_t v78 = *(void *)(v77 + 64);
            uint64_t v79 = *(void *)(v77 + 32);
            uint64_t v80 = *(void *)(v79 + 8 * *(unsigned int *)(v78 + 4 * v76));
            unsigned int v81 = *(_DWORD *)(v78 + 4 * v74);
            if (v81 == -1)
            {
              unsigned int v81 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), v74);
              *(_DWORD *)(v78 + 4 * v74) = v81;
              uint64_t v79 = *(void *)(v77 + 32);
            }
            *(void *)(v79 + 8 * v81) = v80;
            int v82 = *v73++;
            unsigned __int16 v72 = v82 + v74;
          }
          while (v82);
          uint64_t v44 = *((void *)this + 2);
        }
        unsigned __int16 v83 = llvm::TargetRegisterInfo::getRegSizeInBits(v44, v43, *((void *)this + 3));
        uint64_t v84 = *((void *)this + 44);
        int v98 = v83;
        int v85 = *(_DWORD *)(v84 + 240);
        unsigned int v86 = *((_DWORD *)sub_1CD59B940(v84 + 776, (unsigned __int16 *)&v98) + 1)
            + v85 * (v42 - 1)
            + *(_DWORD *)(v84 + 236);
        uint64_t v87 = (LiveDebugValues::MLocTracker *)*((void *)this + 44);
        uint64_t v88 = *((void *)v87 + 8);
        uint64_t v89 = *(unsigned int *)(v88 + 4 * v86);
        uint64_t v90 = *((void *)v87 + 4);
        uint64_t v91 = *(void *)(v90 + 8 * v89);
        unsigned int v92 = *(_DWORD *)(v88 + 4 * v43);
        if (v92 == -1)
        {
          unsigned int v92 = LiveDebugValues::MLocTracker::trackRegister(v87, v43);
          *(_DWORD *)(v88 + 4 * v43) = v92;
          uint64_t v90 = *((void *)v87 + 4);
        }
        *(void *)(v90 + 8 * v92) = v91;
      }
      return 1;
    }
  }
  return result;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::transferRegisterCopy(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineInstr *a2)
{
  if (**((_WORD **)a2 + 2) == 19)
  {
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v5 = (_DWORD *)(v4 + 32);
    uint64_t v77 = v4;
    uint64_t v78 = (_DWORD *)(v4 + 32);
    unsigned __int8 v79 = 1;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 4) + 416))(&v77);
    uint64_t v6 = v79;
    if (!v79) {
      return v6;
    }
    uint64_t v4 = v77;
    uint64_t v5 = v78;
  }
  uint64_t v7 = v5[1];
  uint64_t v8 = *(unsigned int *)(v4 + 4);
  if (v7 == v8) {
    return 1;
  }
  if (byte_1EBCD81D0)
  {
    uint64_t v9 = *((void *)this + 2);
    uint64_t v10 = v9 ? (uint64_t *)(v9 + 8) : 0;
    uint64_t v11 = *v10;
    uint64_t v13 = v10[5];
    uint64_t v12 = v10[6];
    unsigned int v14 = (unsigned __int16 *)(v12
                             + (((unint64_t)*(unsigned int *)(*v10 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE));
    int v16 = *v14;
    uint64_t v15 = v14 + 1;
    int v17 = v16 + (*(_DWORD *)(*v10 + 24 * v8 + 16) & 0xF) * v8;
    while (1)
    {
      uint64_t v18 = 4 * (unsigned __int16)v17;
      unint64_t v19 = *(unsigned __int16 *)(v13 + v18);
      if (*(_WORD *)(v13 + v18) && v12 != 0) {
        break;
      }
      uint64_t v6 = 0;
      int v21 = (unsigned __int16)*v15++;
      v17 += v21;
      if (!v21) {
        return v6;
      }
    }
    uint64_t v22 = *((void *)this + 7);
    if (((*(void *)(v22 + ((v19 >> 3) & 0x1FF8)) >> v19) & 1) == 0)
    {
      uint64_t v24 = (unsigned __int16 *)(v12 + 2 * *(unsigned int *)(v11 + 24 * v19 + 8));
      unsigned int v25 = *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v17 + 2) << 16;
      do
      {
        int v27 = *v24++;
        __int16 v26 = v27;
        if (v27)
        {
          LOWORD(v19) = v26 + v19;
        }
        else
        {
          unsigned int v28 = HIWORD(v25);
          if (HIWORD(v25))
          {
            v25 >>= 16;
          }
          else
          {
            if (!*v15) {
              return 0;
            }
            v17 += (unsigned __int16)*v15++;
            uint64_t v29 = (unsigned __int16 *)(v13 + 4 * (unsigned __int16)v17);
            unsigned int v28 = *v29;
            unsigned int v25 = v29[1] << 16;
          }
          LOWORD(v19) = v28;
          uint64_t v24 = (unsigned __int16 *)(v12 + 2 * *(unsigned int *)(v11 + 24 * v28 + 8));
        }
      }
      while (((*(void *)(v22 + 8 * ((unsigned __int16)v19 >> 6)) >> v19) & 1) == 0);
    }
    if (((*v5 >> 26) & ~HIBYTE(*v5) & 1) == 0) {
      return 0;
    }
  }
  LiveDebugValues::InstrRefBasedLDV::performCopy((uint64_t)this, v5[1], v8);
  uint64_t v30 = *((void *)this + 47);
  if (v30)
  {
    uint64_t v31 = *((void *)this + 2);
    if (v31) {
      uint64_t v32 = (uint64_t *)(v31 + 8);
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v33 = *v32;
    int v34 = *(_DWORD *)(*v32 + 24 * v8 + 16) & 0xF;
    unint64_t v35 = ((unint64_t)*(unsigned int *)(*v32 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE;
    uint64_t v38 = v32 + 5;
    uint64_t v37 = v32[5];
    uint64_t v36 = v38[1];
    uint64_t v39 = (unsigned __int16 *)(v36 + v35);
    int v41 = *v39;
    uint64_t v40 = v39 + 1;
    int v42 = v41 + v34 * v8;
    while (1)
    {
      uint64_t v43 = 4 * (unsigned __int16)v42;
      unint64_t v44 = *(unsigned __int16 *)(v37 + v43);
      if (*(_WORD *)(v37 + v43) && v36 != 0) {
        break;
      }
      int v46 = (unsigned __int16)*v40++;
      v42 += v46;
      if (!v46) {
        goto LABEL_48;
      }
    }
    uint64_t v47 = *((void *)this + 7);
    if (((*(void *)(v47 + ((v44 >> 3) & 0x1FF8)) >> v44) & 1) == 0)
    {
      uint64_t v71 = (unsigned __int16 *)(v36 + 2 * *(unsigned int *)(v33 + 24 * v44 + 8));
      unsigned int v72 = *(unsigned __int16 *)(v37 + 4 * (unsigned __int16)v42 + 2) << 16;
      do
      {
        int v74 = *v71++;
        __int16 v73 = v74;
        if (v74)
        {
          LOWORD(v44) = v73 + v44;
        }
        else
        {
          unsigned int v75 = HIWORD(v72);
          if (HIWORD(v72))
          {
            v72 >>= 16;
          }
          else
          {
            if (!*v40) {
              goto LABEL_48;
            }
            v42 += (unsigned __int16)*v40++;
            unsigned int v76 = (unsigned __int16 *)(v37 + 4 * (unsigned __int16)v42);
            unsigned int v75 = *v76;
            unsigned int v72 = v76[1] << 16;
          }
          LOWORD(v44) = v75;
          uint64_t v71 = (unsigned __int16 *)(v36 + 2 * *(unsigned int *)(v33 + 24 * v75 + 8));
        }
      }
      while (((*(void *)(v47 + 8 * ((unsigned __int16)v44 >> 6)) >> v44) & 1) == 0);
    }
    if ((*v5 >> 26) & ~HIBYTE(*v5)) {
      sub_1CD593FC8(v30, *(_DWORD *)(*(void *)(*((void *)this + 44) + 64) + 4 * v7), *(_DWORD *)(*(void *)(*((void *)this + 44) + 64) + 4 * v8), (unint64_t)a2);
    }
  }
LABEL_48:
  if (byte_1EBCD81D0)
  {
    uint64_t v48 = *((void *)this + 44);
    int v49 = *((_DWORD *)this + 90);
    int v50 = *((_DWORD *)this + 91);
    uint64_t v51 = *(void *)(v48 + 64);
    unsigned int v52 = *(_DWORD *)(v51 + 4 * v7);
    if (v52 == -1)
    {
      unsigned int v52 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), v7);
      *(_DWORD *)(v51 + 4 * v7) = v52;
    }
    *(void *)(*(void *)(v48 + 32) + 8 * v52) = *(void *)&v49 & 0xFFFFFLL | ((*(void *)&v50 & 0xFFFFFLL) << 20) | ((unint64_t)v52 << 40);
  }
  uint64_t v53 = *((void *)this + 47);
  if (!v53) {
    return 1;
  }
  uint64_t v54 = *((void *)this + 2);
  if (v54) {
    unsigned int v55 = (void *)(v54 + 8);
  }
  else {
    unsigned int v55 = 0;
  }
  uint64_t v57 = v55[5];
  uint64_t v56 = v55[6];
  uint64_t v58 = (unsigned __int16 *)(v56
                           + (((unint64_t)*(unsigned int *)(*v55 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE));
  int v60 = *v58;
  int v59 = v58 + 1;
  int v61 = v60 + (*(_DWORD *)(*v55 + 24 * v8 + 16) & 0xF) * v8;
  do
  {
    unsigned __int16 v62 = *(_WORD *)(v57 + 4 * (unsigned __int16)v61);
    if (v62) {
      BOOL v63 = v56 == 0;
    }
    else {
      BOOL v63 = 1;
    }
    if (!v63)
    {
      unsigned int v65 = *(unsigned __int16 *)(v57 + 4 * (unsigned __int16)v61 + 2) << 16;
      int v66 = (unsigned __int16 *)(v56
                               + 2
                               * *(unsigned int *)(*v55
                                                 + 24 * *(unsigned __int16 *)(v57 + 4 * (unsigned __int16)v61)
                                                 + 8));
      while (1)
      {
        sub_1CD593628(v53, *(_DWORD *)(*(void *)(*((void *)this + 44) + 64) + 4 * v62), (unint64_t)a2, 0);
        int v68 = *v66++;
        __int16 v67 = v68;
        if (v68)
        {
          v62 += v67;
        }
        else
        {
          unsigned int v69 = HIWORD(v65);
          if (HIWORD(v65))
          {
            v65 >>= 16;
          }
          else
          {
            if (!*v59) {
              return 1;
            }
            v61 += (unsigned __int16)*v59++;
            uint64_t v70 = (unsigned __int16 *)(v55[5] + 4 * (unsigned __int16)v61);
            unsigned int v69 = *v70;
            unsigned int v65 = v70[1] << 16;
          }
          unsigned __int16 v62 = v69;
          int v66 = (unsigned __int16 *)(v55[6] + 2 * *(unsigned int *)(*v55 + 24 * v69 + 8));
        }
        uint64_t v53 = *((void *)this + 47);
      }
    }
    int v64 = (unsigned __int16)*v59++;
    v61 += v64;
    uint64_t v6 = 1;
  }
  while (v64);
  return v6;
}

void LiveDebugValues::InstrRefBasedLDV::accumulateFragmentMap(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineInstr *a2)
{
  _OWORD v44[2] = *(void **)MEMORY[0x1E4F143B8];
  int v3 = **((unsigned __int16 **)a2 + 2);
  BOOL v4 = v3 == 14;
  uint64_t v5 = *((void *)a2 + 4);
  uint64_t v6 = *(uint64_t **)(v5 + ((unint64_t)(v3 != 14) << 6) + 16);
  uint64_t v7 = 96;
  if (v4) {
    uint64_t v7 = 32;
  }
  uint64_t v8 = *(void *)(v5 + v7 + 16);
  uint64_t v9 = *((void *)a2 + 7);
  if (*(_DWORD *)(v9 + 8) == 2) {
    uint64_t v10 = *(void *)(v9 - 8);
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v28 = v6;
  if (!v8)
  {
    LOBYTE(v29) = 0;
    char v30 = 0;
    uint64_t v31 = v10;
    goto LABEL_10;
  }
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v8 + 24), *(uint64_t **)(v8 + 32), (int8x16_t *)&v29);
  uint64_t v6 = v28;
  uint64_t v31 = v10;
  if (!v30)
  {
LABEL_10:
    long long v11 = xmmword_1CFAC4A20;
    goto LABEL_11;
  }
  long long v11 = v29;
LABEL_11:
  long long v27 = v11;
  uint64_t v40 = v6;
  int v34 = 0;
  if (!sub_1CC4DC0CC((uint64_t)this + 1968, &v40, &v34)
    || (uint64_t v12 = v34, v34 == (uint64_t *)(*((void *)this + 246) + 112 * *((unsigned int *)this + 496))))
  {
    uint64_t v40 = (uint64_t *)v42;
    uint64_t v41 = 0x400000000;
    v44[0] = 0;
    v44[1] = 0;
    uint64_t v43 = v44;
    sub_1CC4DBF9C((uint64_t *)&v40, (unint64_t *)&v27);
    int v34 = v6;
    *(void *)&long long v35 = &v36;
    *((void *)&v35 + 1) = 0x400000000;
    if (v41) {
      sub_1CC4DC664((uint64_t)&v35, (uint64_t)&v40);
    }
    sub_1CC4DC748((uint64_t)v39, &v43);
    sub_1CC4DC164((_DWORD *)this + 492, &v34, (uint64_t)&v35, (uint64_t)v32);
    sub_1CD3C5048((uint64_t)v39, v39[1]);
    if ((void **)v35 != &v36) {
      free((void *)v35);
    }
    long long v35 = v27;
    v32[0] = v33;
    v32[1] = (void *)0x100000000;
    int v34 = v6;
    uint64_t v36 = v38;
    uint64_t v37 = 0x100000000;
    sub_1CC4DC7E0((uint64_t)this + 1944, &v34, (uint64_t)&v36, (uint64_t)v26);
    if (v36 != v38) {
      free(v36);
    }
    if (v32[0] != v33) {
      free(v32[0]);
    }
    sub_1CD3C5048((uint64_t)&v43, v44[0]);
    if (v40 != (uint64_t *)v42) {
      free(v40);
    }
  }
  else
  {
    long long v35 = v27;
    uint64_t v40 = (uint64_t *)v42;
    uint64_t v41 = 0x100000000;
    int v34 = v6;
    uint64_t v36 = v38;
    uint64_t v37 = 0x100000000;
    sub_1CC4DC7E0((uint64_t)this + 1944, &v34, (uint64_t)&v36, (uint64_t)v32);
    if (v36 != v38) {
      free(v36);
    }
    if (v40 != (uint64_t *)v42) {
      free(v40);
    }
    if (v33[0])
    {
      uint64_t v13 = v12[13];
      if (v13)
      {
        unsigned int v14 = v12 + 12;
        uint64_t v15 = (void *)v12[11];
      }
      else
      {
        uint64_t v15 = (void *)v12[1];
        unsigned int v14 = &v15[2 * *((unsigned int *)v12 + 4)];
      }
      if (v15 != v14)
      {
        int v16 = v32[0];
        do
        {
          if (v13) {
            int v17 = v15 + 4;
          }
          else {
            int v17 = v15;
          }
          unint64_t v18 = v17[1];
          if ((void)v27 + *((void *)&v27 + 1) > v18 && *v17 + v18 > *((void *)&v27 + 1))
          {
            unint64_t v20 = *((unsigned int *)v16 + 8);
            if (v20 >= *((unsigned int *)v16 + 9)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v21 = (void *)(v16[3] + 16 * v20);
            void *v21 = *v17;
            v21[1] = v18;
            ++*((_DWORD *)v16 + 8);
            int v34 = v28;
            long long v35 = *(_OWORD *)v17;
            uint64_t v40 = 0;
            if (sub_1CC4DC8E0((uint64_t *)this + 243, &v34, &v40)) {
              uint64_t v22 = v40;
            }
            else {
              uint64_t v22 = (uint64_t *)(*((void *)this + 243) + 56 * *((unsigned int *)this + 490));
            }
            unint64_t v23 = *((unsigned int *)v22 + 8);
            if (v23 >= *((unsigned int *)v22 + 9)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_OWORD *)(v22[3] + 16 * v23) = v27;
            ++*((_DWORD *)v22 + 8);
          }
          if (v13)
          {
            uint64_t v24 = (void *)v15[1];
            if (v24)
            {
              do
              {
                unsigned int v25 = v24;
                uint64_t v24 = (void *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                unsigned int v25 = (void *)v15[2];
                BOOL v4 = *v25 == (void)v15;
                uint64_t v15 = v25;
              }
              while (!v4);
            }
          }
          else
          {
            unsigned int v25 = v15 + 2;
          }
          uint64_t v15 = v25;
        }
        while (v25 != v14);
      }
      sub_1CC4DBF9C(v12 + 1, (unint64_t *)&v27);
    }
  }
}

char **LiveDebugValues::InstrRefBasedLDV::produceMLocTransferFunction(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  v116[288] = *MEMORY[0x1E4F143B8];
  uint64_t v114 = (char *)v116;
  uint64_t v115 = 0x2000000000;
  uint64_t v103 = a4;
  sub_1CC490E7C((uint64_t)&v114, a4);
  int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 16);
  if (v115)
  {
    uint64_t v31 = v114;
    uint64_t v32 = 72 * v115;
    do
    {
      int v33 = *(_DWORD *)(*(void *)(a1 + 16) + 16);
      uint64_t v34 = *((unsigned int *)v31 + 2);
      if ((*((_DWORD *)v31 + 16) & 0x3F) != 0) {
        *(void *)(*(void *)v31 + 8 * v34 - 8) |= -1 << (*((_DWORD *)v31 + 16) & 0x3F);
      }
      unsigned int v35 = v34;
      *((_DWORD *)v31 + 16) = v33;
      unsigned int v36 = v33 + 63;
      if (v34 != (v33 + 63) >> 6)
      {
        uint64_t v37 = v36 >> 6;
        if (v34 > v37)
        {
          *((_DWORD *)v31 + 2) = v37;
          unsigned int v35 = v36 >> 6;
        }
        else
        {
          if (v37 > *((_DWORD *)v31 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v37 != v34) {
            memset((void *)(*(void *)v31 + 8 * v34), 255, 8 * (v37 - v34));
          }
          unsigned int v35 = v37;
          *((_DWORD *)v31 + 2) = v37;
          int v33 = *((_DWORD *)v31 + 16);
        }
      }
      int v38 = v33 & 0x3F;
      if (v38) {
        *(void *)(*(void *)v31 + 8 * v35 - 8) &= ~(-1 << v38);
      }
      v31 += 72;
      v32 -= 72;
    }
    while (v32);
  }
  uint64_t v7 = a2 + 320;
  uint64_t v8 = *(void *)(a2 + 328);
  if (v8 != a2 + 320)
  {
    unsigned int v9 = (v6 + 31) >> 5;
    do
    {
      int v10 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(a1 + 360) = v10;
      *(_DWORD *)(a1 + 364) = 1;
      uint64_t v11 = *(void *)(a1 + 352);
      *(_DWORD *)(v11 + 256) = 0;
      *(_DWORD *)(v11 + 232) = v10;
      int v12 = *(_DWORD *)(v11 + 40);
      if (v12)
      {
        uint64_t v13 = 0;
        do
        {
          *(void *)(*(void *)(v11 + 32) + 8 * v13) = *(_DWORD *)(v11 + 232) & 0xFFFFF | (unint64_t)(v13 << 40);
          int v14 = v13 + 1;
          uint64_t v13 = (v13 + 1);
        }
        while (v12 != v14);
      }
      for (uint64_t i = *(void *)(v8 + 56); i != v8 + 48; uint64_t i = *(void *)(i + 8))
      {
        LiveDebugValues::InstrRefBasedLDV::process((LiveDebugValues::InstrRefBasedLDV *)a1, (llvm::MachineInstr *)i, 0, 0);
        if (**(unsigned __int16 **)(i + 16) - 13 <= 2) {
          LiveDebugValues::InstrRefBasedLDV::accumulateFragmentMap((LiveDebugValues::InstrRefBasedLDV *)a1, (llvm::MachineInstr *)i);
        }
        unint64_t v16 = *(unsigned int *)(i + 64);
        if (v16)
        {
          uint64_t v17 = *(unsigned int *)(a1 + 364);
          int v110 = (void *)*(unsigned int *)(i + 64);
          uint64_t v111 = i;
          v112[0] = v17;
          sub_1CD59E750((uint64_t *)(a1 + 624), v16, (uint64_t)&v110);
        }
        ++*(_DWORD *)(a1 + 364);
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t v18 = *(void *)(a1 + 352);
      int v19 = *(_DWORD *)(v18 + 40);
      if (v19)
      {
        int v20 = 0;
        uint64_t v21 = 0;
        do
        {
          uint64_t v22 = *(void *)(v18 + 32);
          unint64_t v23 = *(void *)(v22 + 8 * v21);
          BOOL v24 = (v23 & 0xFFFFF00000) == 0 && v23 >> 40 == v21;
          if (!v24)
          {
            uint64_t v25 = *a3 + 72 * *(unsigned int *)(a1 + 360);
            LODWORD(v107) = v20;
            unint64_t v108 = v23;
            sub_1CD59E814((uint64_t)&v110, v25, (int *)&v107, &v108);
            if (!LOBYTE(v112[0])) {
              *((void *)v110 + 1) = *(void *)(v22 + 8 * v21);
            }
          }
          int v20 = v21 + 1;
          uint64_t v21 = (v21 + 1);
        }
        while (v19 != v20);
        uint64_t v18 = *(void *)(a1 + 352);
      }
      uint64_t v26 = *(unsigned int *)(v18 + 256);
      if (v26)
      {
        long long v27 = *(uint64_t **)(v18 + 248);
        uint64_t v28 = 16 * v26;
        do
        {
          uint64_t v29 = *v27;
          v27 += 2;
          sub_1CC2F5880((uint64_t)&v114[72 * *(unsigned int *)(a1 + 360)], *(unsigned int **)(v29 + 16), v9);
          v28 -= 16;
        }
        while (v28);
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != v7);
  }
  int v30 = *(_DWORD *)(*(void *)(a1 + 16) + 16);
  int v110 = v112;
  HIDWORD(v111) = 6;
  if ((v30 + 63) >= 0x1C0)
  {
    LODWORD(v111) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v30 + 63) >= 0x40) {
    bzero(v112, 8 * ((v30 + 63) >> 6));
  }
  LODWORD(v111) = (v30 + 63) >> 6;
  int v113 = v30;
  uint64_t v39 = *(void *)(a1 + 352);
  int v40 = *(_DWORD *)(v39 + 40);
  if (v40)
  {
    uint64_t v41 = 0;
    uint64_t v42 = *(void *)(v39 + 88);
    unsigned int v43 = *(_DWORD *)(*(void *)(a1 + 16) + 16);
    unint64_t v44 = (char *)v110;
    do
    {
      unint64_t v45 = *(unsigned int *)(v42 + 4 * v41);
      if (v45 < v43)
      {
        if (*(void *)(v39 + 176))
        {
          for (uint64_t j = *(uint64_t **)(v39 + 168); j; uint64_t j = (uint64_t *)*j)
          {
            unsigned int v47 = *((_DWORD *)j + 7);
            if (v45 >= v47)
            {
              if (v47 >= v45) {
                goto LABEL_68;
              }
              ++j;
            }
          }
        }
        else
        {
          uint64_t v48 = *(unsigned int *)(v39 + 120);
          if (v48)
          {
            int v49 = *(_DWORD **)(v39 + 112);
            uint64_t v50 = 4 * v48;
            while (*v49 != v45)
            {
              ++v49;
              v50 -= 4;
              if (!v50) {
                goto LABEL_67;
              }
            }
            if (v50) {
              goto LABEL_68;
            }
          }
        }
LABEL_67:
        *(void *)&v44[(v45 >> 3) & 0x1FFFFFF8] |= 1 << v45;
      }
LABEL_68:
      int v51 = v41 + 1;
      uint64_t v41 = (v41 + 1);
    }
    while (v40 != v51);
  }
  if (a4)
  {
    uint64_t v52 = 0;
    do
    {
      uint64_t v53 = v114;
      uint64_t v54 = &v114[72 * v52];
      unsigned int v55 = *(uint64_t **)v54;
      uint64_t v56 = *((unsigned int *)v54 + 2);
      if (v56)
      {
        uint64_t v57 = 8 * v56;
        uint64_t v58 = *(uint64_t **)v54;
        do
        {
          *uint64_t v58 = ~*v58;
          ++v58;
          v57 -= 8;
        }
        while (v57);
      }
      int v59 = &v53[72 * v52];
      int v62 = *((_DWORD *)v59 + 16);
      int v61 = (int *)(v59 + 64);
      int v60 = v62;
      char v63 = v62 & 0x3F;
      if ((v62 & 0x3F) != 0) {
        v55[v56 - 1] &= ~(-1 << v63);
      }
      unsigned int v64 = v111;
      if (v111 >= v56) {
        uint64_t v65 = v56;
      }
      else {
        uint64_t v65 = v111;
      }
      if (v65)
      {
        int v66 = (uint64_t *)v110;
        __int16 v67 = v55;
        uint64_t v68 = v65;
        do
        {
          uint64_t v69 = *v66++;
          *v67++ &= v69;
          --v68;
        }
        while (v68);
      }
      if (v56 > v64)
      {
        do
        {
          v55[v65] = 0;
          LODWORD(v65) = v65 + 1;
        }
        while (v56 != v65);
      }
      if (v60)
      {
        uint64_t v70 = 0;
        int v71 = v60 - 1;
        unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v60;
        uint64_t v73 = v71 & 0xFFFFFFC0;
        while (1)
        {
          uint64_t v75 = *v55++;
          uint64_t v74 = v75;
          unint64_t v76 = v73 == v70 ? v72 : -1;
          unint64_t v77 = v76 & v74;
          if (v77) {
            break;
          }
          v70 += 64;
          if (v73 + 64 == v70) {
            goto LABEL_116;
          }
        }
        for (unsigned int k = __clz(__rbit64(v77)) + v70; k != -1; unsigned int k = __clz(__rbit64(v100)) + v95)
        {
          uint64_t v79 = *a3 + 72 * v52;
          unint64_t v80 = v52 & 0xFFFFF | ((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 352) + 64) + 4 * k) << 40) | 0x100000;
          int v105 = *(_DWORD *)(*(void *)(*(void *)(a1 + 352) + 64) + 4 * k);
          unint64_t v106 = v80;
          sub_1CD59E814((uint64_t)&v107, v79, &v105, &v106);
          if (!v109)
          {
            uint64_t v81 = *(void *)(v107 + 8);
            uint64_t v82 = v81 & 0xFFFFF;
            uint64_t v83 = v81 & 0xFFFFF00000;
            if (v82 == v52 && v83 == 0) {
              *(void *)(v107 + 8) = v80;
            }
          }
          unsigned int v85 = k + 1;
          int v86 = *v61;
          if (k + 1 == *v61) {
            break;
          }
          unsigned int v87 = v85 >> 6;
          unsigned int v88 = v86 - 1;
          if (v85 >> 6 > (v86 - 1) >> 6) {
            break;
          }
          uint64_t v89 = 0;
          uint64_t v90 = v88 >> 6;
          int v91 = v85 & 0x3F;
          BOOL v24 = v91 == 0;
          unint64_t v92 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v91;
          uint64_t v93 = v24 ? -1 : ~v92;
          unint64_t v94 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v88;
          int v95 = v87 << 6;
          uint64_t v96 = v90 - v87;
          uint64_t v97 = *(void *)v54 + 8 * v87;
          while (1)
          {
            uint64_t v98 = v89 ? -1 : v93;
            unint64_t v99 = v96 == v89 ? v94 : -1;
            unint64_t v100 = v98 & v99 & *(void *)(v97 + 8 * v89);
            if (v100) {
              break;
            }
            v95 += 64;
            if (v96 + 1 == ++v89) {
              goto LABEL_116;
            }
          }
        }
      }
LABEL_116:
      ++v52;
    }
    while (v52 != v103);
  }
  if (v110 != v112) {
    free(v110);
  }
  return sub_1CD4C5EDC(&v114);
}

void sub_1CC4E26D0(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  unsigned int v47 = v51;
  uint64_t v48 = v51;
  uint64_t v49 = 32;
  int v50 = 0;
  LODWORD(v52) = 0;
  if (!*(_DWORD *)(v3 + 560)) {
    goto LABEL_79;
  }
  while (1)
  {
    uint64_t v5 = *((void *)sub_1CC4DCD10(v3 + 552, &v52) + 1);
    int v6 = *(_DWORD *)(v5 + 24);
    uint64_t v7 = *(void *)a1[1];
    uint64_t v8 = (unsigned char *)(v7 + 72 * v6);
    uint64_t v9 = sub_1CD59C418((uint64_t)v8, a2);
    char v11 = *v8;
    int v10 = v8 + 8;
    if (v11)
    {
      uint64_t v12 = 4;
    }
    else
    {
      int v10 = (void *)*v10;
      uint64_t v12 = *(unsigned int *)(v7 + 72 * v6 + 16);
    }
    if (&v10[2 * v12] != (void *)v9)
    {
      uint64_t v13 = v48;
      uint64_t v14 = HIDWORD(v49);
      if (v48 != v47)
      {
        unsigned int v18 = v49;
LABEL_17:
        if (3 * v18 <= 4 * (HIDWORD(v49) - v50))
        {
          if (v18 >= 0x40) {
            v18 *= 2;
          }
          else {
            unsigned int v18 = 128;
          }
        }
        else if (v18 - HIDWORD(v49) >= v18 >> 3)
        {
          goto LABEL_19;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v47, v18);
        unsigned int v18 = v49;
        uint64_t v13 = v48;
LABEL_19:
        unsigned int v19 = v18 - 1;
        unsigned int v20 = (v18 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        uint64_t v21 = &v13[8 * v20];
        uint64_t v22 = *v21;
        if (*v21 == -1)
        {
          unint64_t v23 = 0;
LABEL_31:
          if (v23) {
            long long v27 = v23;
          }
          else {
            long long v27 = v21;
          }
          if (*v27 != v5)
          {
            if (*v27 == -2) {
              --v50;
            }
            else {
              ++HIDWORD(v49);
            }
            *long long v27 = v5;
          }
        }
        else
        {
          unint64_t v23 = 0;
          int v24 = 1;
          while (v22 != v5)
          {
            if (v23) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v22 == -2;
            }
            if (v25) {
              unint64_t v23 = v21;
            }
            unsigned int v26 = v20 + v24++;
            unsigned int v20 = v26 & v19;
            uint64_t v21 = &v13[8 * (v26 & v19)];
            uint64_t v22 = *v21;
            if (*v21 == -1) {
              goto LABEL_31;
            }
          }
        }
        goto LABEL_38;
      }
      if (!HIDWORD(v49)) {
        goto LABEL_14;
      }
      uint64_t v15 = 0;
      uint64_t v16 = 8 * HIDWORD(v49);
      uint64_t v17 = v48;
      do
      {
        if (*v17 == v5) {
          goto LABEL_38;
        }
        if (*v17 == -2) {
          uint64_t v15 = v17;
        }
        ++v17;
        v16 -= 8;
      }
      while (v16);
      if (v15)
      {
        *uint64_t v15 = v5;
        --v50;
      }
      else
      {
LABEL_14:
        unsigned int v18 = v49;
        if (HIDWORD(v49) >= v49) {
          goto LABEL_17;
        }
        ++HIDWORD(v49);
        *(void *)&v48[8 * v14] = v5;
      }
    }
LABEL_38:
    LODWORD(v52) = v52 + 1;
    if (v52 >= *(_DWORD *)(v3 + 560))
    {
      uint64_t v28 = HIDWORD(v49);
      int v29 = v50;
      if (HIDWORD(v49) == v50) {
        goto LABEL_79;
      }
      uint64_t v30 = *(void *)(a1[2] + 328);
      uint64_t v31 = v48;
      if (v48 != v47)
      {
        unsigned int v35 = v49;
        goto LABEL_58;
      }
      if (!HIDWORD(v49)) {
        goto LABEL_55;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 8 * HIDWORD(v49);
      uint64_t v34 = v48;
      do
      {
        if (*v34 == v30) {
          goto LABEL_79;
        }
        if (*v34 == -2) {
          uint64_t v32 = v34;
        }
        ++v34;
        v33 -= 8;
      }
      while (v33);
      if (!v32)
      {
LABEL_55:
        unsigned int v35 = v49;
        if (HIDWORD(v49) < v49)
        {
          ++HIDWORD(v49);
          *(void *)&v48[8 * v28] = v30;
          goto LABEL_79;
        }
LABEL_58:
        if (3 * v35 <= 4 * (HIDWORD(v49) - v50))
        {
          if (v35 >= 0x40) {
            v35 *= 2;
          }
          else {
            unsigned int v35 = 128;
          }
        }
        else if (v35 - HIDWORD(v49) >= v35 >> 3)
        {
LABEL_60:
          unsigned int v36 = v35 - 1;
          unsigned int v37 = (v35 - 1) & ((v30 >> 4) ^ (v30 >> 9));
          int v38 = &v31[8 * v37];
          uint64_t v39 = *v38;
          if (*v38 == -1)
          {
            int v40 = 0;
LABEL_72:
            if (v40) {
              unint64_t v44 = v40;
            }
            else {
              unint64_t v44 = v38;
            }
            if (*v44 != v30)
            {
              if (*v44 == -2) {
                --v50;
              }
              else {
                ++HIDWORD(v49);
              }
              *unint64_t v44 = v30;
            }
          }
          else
          {
            int v40 = 0;
            int v41 = 1;
            while (v39 != v30)
            {
              if (v40) {
                BOOL v42 = 0;
              }
              else {
                BOOL v42 = v39 == -2;
              }
              if (v42) {
                int v40 = v38;
              }
              unsigned int v43 = v37 + v41++;
              unsigned int v37 = v43 & v36;
              int v38 = &v31[8 * (v43 & v36)];
              uint64_t v39 = *v38;
              if (*v38 == -1) {
                goto LABEL_72;
              }
            }
          }
LABEL_79:
          *(_DWORD *)(a1[3] + 8) = 0;
          uint64_t v45 = a1[4];
          uint64_t v46 = *(void *)(v3 + 8);
          if (*(void *)(v46 + 1320))
          {
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v46);
            uint64_t v52 = *(void *)(v46 + 1320);
            char v53 = 1;
            uint64_t v54 = v45;
            unsigned int v55 = &v47;
            sub_1CD595820();
          }
          operator new();
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v47, v35);
        unsigned int v35 = v49;
        uint64_t v31 = v48;
        goto LABEL_60;
      }
      *uint64_t v32 = v30;
      int v50 = v29 - 1;
      goto LABEL_79;
    }
  }
}

void LiveDebugValues::InstrRefBasedLDV::BlockPHIPlacement(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(void *)(v1 + 1320))
  {
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v1);
    sub_1CD595820();
  }
  operator new();
}

void LiveDebugValues::InstrRefBasedLDV::initialSetup(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineFunction *a2)
{
  *((void *)this + 43) = llvm::DIExpression::getImpl(***(void ****)a2, 0, 0, 0, 1);
  BOOL v4 = (char *)a2 + 320;
  uint64_t v5 = (char *)*((void *)a2 + 41);
  if (v5 != (char *)a2 + 320)
  {
    while (1)
    {
      for (uint64_t i = (char *)*((void *)v5 + 7); i != v5 + 48; uint64_t i = (char *)*((void *)i + 1))
      {
        uint64_t v18 = *((void *)i + 7);
        if (v18 && *(_DWORD *)(v18 + 4)) {
          goto LABEL_52;
        }
      }
      uint64_t v19 = *((void *)this + 50);
      uint64_t v20 = *((unsigned int *)this + 103);
      if (v19 != *((void *)this + 49)) {
        break;
      }
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 8 * v20;
        unint64_t v23 = (char **)*((void *)this + 50);
        while (*v23 != v5)
        {
          if (*v23 == (char *)-2) {
            uint64_t v21 = v23;
          }
          ++v23;
          v22 -= 8;
          if (!v22)
          {
            if (!v21) {
              goto LABEL_28;
            }
            void *v21 = v5;
            --*((_DWORD *)this + 104);
            goto LABEL_52;
          }
        }
        goto LABEL_52;
      }
LABEL_28:
      unsigned int v24 = *((_DWORD *)this + 102);
      if (v20 >= v24) {
        goto LABEL_31;
      }
      *((_DWORD *)this + 103) = v20 + 1;
      *(void *)(v19 + 8 * v20) = v5;
LABEL_52:
      uint64_t v5 = (char *)*((void *)v5 + 1);
      if (v5 == v4) {
        goto LABEL_2;
      }
    }
    unsigned int v24 = *((_DWORD *)this + 102);
LABEL_31:
    if (3 * v24 <= 4 * ((int)v20 - *((_DWORD *)this + 104)))
    {
      if (v24 >= 0x40) {
        v24 *= 2;
      }
      else {
        unsigned int v24 = 128;
      }
    }
    else if (v24 - v20 >= v24 >> 3)
    {
      goto LABEL_33;
    }
    llvm::SmallPtrSetImplBase::Grow((LiveDebugValues::InstrRefBasedLDV *)((char *)this + 392), v24);
    unsigned int v24 = *((_DWORD *)this + 102);
    uint64_t v19 = *((void *)this + 50);
LABEL_33:
    unsigned int v25 = v24 - 1;
    unsigned int v26 = (v24 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    long long v27 = (char **)(v19 + 8 * v26);
    uint64_t v28 = *v27;
    if (*v27 == (char *)-1)
    {
      int v29 = 0;
LABEL_45:
      if (v29) {
        uint64_t v33 = v29;
      }
      else {
        uint64_t v33 = v27;
      }
      if (*v33 != v5)
      {
        if (*v33 == (char *)-2) {
          --*((_DWORD *)this + 104);
        }
        else {
          ++*((_DWORD *)this + 103);
        }
        *uint64_t v33 = v5;
      }
    }
    else
    {
      int v29 = 0;
      int v30 = 1;
      while (v28 != v5)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == (char *)-2;
        }
        if (v31) {
          int v29 = v27;
        }
        unsigned int v32 = v26 + v30++;
        unsigned int v26 = v32 & v25;
        long long v27 = (char **)(v19 + 8 * (v32 & v25));
        uint64_t v28 = *v27;
        if (*v27 == (char *)-1) {
          goto LABEL_45;
        }
      }
    }
    goto LABEL_52;
  }
LABEL_2:
  uint64_t v39 = a2;
  unsigned int v36 = 0;
  uint64_t v37 = 0;
  __p = 0;
  sub_1CB93939C((char **)&__p, (uint64_t)&v39);
  int v34 = 0;
  uint64_t v7 = (char *)__p;
  int v6 = v36;
  if (v36 != __p)
  {
    do
    {
      uint64_t v8 = (llvm::MachineFunction *)*((void *)v6 - 1);
      v6 -= 8;
      uint64_t v39 = v8;
      *((void *)sub_1CC4DCD10((uint64_t)this + 552, &v34) + 1) = v8;
      int v9 = v34;
      *((_DWORD *)sub_1CD41D7A0((uint64_t *)this + 72, &v39) + 2) = v9;
      int v10 = v34;
      LODWORD(v38) = *((_DWORD *)v39 + 6);
      sub_1CB9A74A0((uint64_t)this + 600, &v38)[1] = v10;
      ++v34;
    }
    while (v6 != v7);
  }
  for (uint64_t j = (char *)*((void *)a2 + 41); j != v4; uint64_t j = (char *)*((void *)j + 1))
  {
    int v38 = j;
    uint64_t v39 = 0;
    if (!sub_1CD3C8538((uint64_t *)this + 72, &v38, &v39)
      || v39 == (llvm::MachineFunction *)(*((void *)this + 72) + 16 * *((unsigned int *)this + 148)))
    {
      uint64_t v39 = (llvm::MachineFunction *)j;
      *((void *)sub_1CC4DCD10((uint64_t)this + 552, &v34) + 1) = j;
      int v12 = v34;
      *((_DWORD *)sub_1CD41D7A0((uint64_t *)this + 72, &v39) + 2) = v12;
      int v13 = v34;
      LODWORD(v38) = *((_DWORD *)v39 + 6);
      sub_1CB9A74A0((uint64_t)this + 600, &v38)[1] = v13;
      ++v34;
    }
  }
  unint64_t v14 = *((unsigned int *)a2 + 232);
  unint64_t v15 = 126 - 2 * __clz(v14);
  if (v14) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  sub_1CD59F280(*((void *)a2 + 115), (unsigned int *)(*((void *)a2 + 115) + 20 * v14), v16, 1);
  if (__p)
  {
    unsigned int v36 = (char *)__p;
    operator delete(__p);
  }
}

void LiveDebugValues::InstrRefBasedLDV::makeDepthFirstEjectionMap(int8x8_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v43[8] = *MEMORY[0x1E4F143B8];
  unsigned int v35 = v39;
  unsigned int v36 = v39;
  uint64_t v37 = 8;
  int v38 = 0;
  int v41 = v43;
  uint64_t v8 = *(unsigned int *)(*(void *)&a1[38] + 40) - 1;
  v43[0] = a1[38];
  v43[1] = v8;
  uint64_t v42 = 0x400000001;
  unsigned int v9 = 1;
  do
  {
    while (1)
    {
      int v10 = (char *)v41;
      uint64_t v11 = v9;
      int v12 = (char *)v41 + 16 * v9;
      uint64_t v14 = *((void *)v12 - 2);
      uint64_t v13 = *((void *)v12 - 1);
      *((void *)v12 - 1) = v13 - 1;
      if ((v13 & 0x8000000000000000) == 0) {
        break;
      }
      LODWORD(v42) = v11 - 1;
      uint64_t v40 = 0;
      if (sub_1CD40EA84(*(void *)a3, *(_DWORD *)(a3 + 16), v14, &v40)) {
        BOOL v18 = v40 == *(void *)a3 + 16 * *(unsigned int *)(a3 + 16);
      }
      else {
        BOOL v18 = 1;
      }
      if (v18) {
        goto LABEL_11;
      }
      uint64_t v19 = *(void *)(v40 + 8);
      uint64_t v40 = 0;
      int v20 = sub_1CD4A8B14(*(void *)a4, *(_DWORD *)(a4 + 16), v14, &v40);
      uint64_t v21 = v40;
      if (!v20) {
        uint64_t v21 = *(void *)a4 + 72 * *(unsigned int *)(a4 + 16);
      }
      LiveDebugValues::InstrRefBasedLDV::getBlocksForScope(a1, v19, (unsigned int *)&v35, (void *)(v21 + 8));
      unint64_t v23 = v35;
      uint64_t v22 = v36;
      unsigned int v24 = (uint64_t *)((char *)&v37 + 4);
      if (v36 != v35) {
        unsigned int v24 = &v37;
      }
      uint64_t v25 = *(unsigned int *)v24;
      unsigned int v26 = (unint64_t *)v36;
      if (v25)
      {
        uint64_t v27 = 8 * v25;
        unsigned int v26 = (unint64_t *)v36;
        while (*v26 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v26;
          v27 -= 8;
          if (!v27) {
            goto LABEL_30;
          }
        }
      }
      uint64_t v28 = &v36[8 * v25];
      if (v26 != (unint64_t *)v28)
      {
        uint64_t v29 = *a2;
        unint64_t v30 = *v26;
LABEL_24:
        uint64_t v31 = *(unsigned int *)(v30 + 24);
        if (!*(_DWORD *)(v29 + 4 * v31)) {
          *(_DWORD *)(v29 + 4 * v31) = *(_DWORD *)(v14 + 180);
        }
        unsigned int v32 = v26 + 1;
        while (v32 != (unint64_t *)v28)
        {
          unint64_t v33 = *v32++;
          unint64_t v30 = v33;
          if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            unsigned int v26 = v32 - 1;
            goto LABEL_24;
          }
        }
      }
LABEL_30:
      if (v22 != v23)
      {
        if (v37 >= 0x21 && 4 * (HIDWORD(v37) - v38) < v37)
        {
          llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v35);
          goto LABEL_11;
        }
        memset(v22, 255, 8 * v37);
      }
      HIDWORD(v37) = 0;
      int v38 = 0;
LABEL_11:
      unsigned int v9 = v42;
      if (!v42) {
        goto LABEL_39;
      }
    }
    uint64_t v15 = *(void *)(*(void *)(v14 + 32) + 8 * v13);
    uint64_t v16 = *(unsigned int *)(v15 + 40);
    if (v11 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v17 = &v10[16 * v11];
    *(void *)uint64_t v17 = v15;
    *((void *)v17 + 1) = v16 - 1;
    unsigned int v9 = v42 + 1;
    LODWORD(v42) = v9;
  }
  while (v9);
LABEL_39:
  if (v41 != v43) {
    free(v41);
  }
  if (v36 != v35) {
    free(v36);
  }
}

void LiveDebugValues::InstrRefBasedLDV::depthFirstVLocAndEmit()
{
}

uint64_t sub_1CC4E3818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = **(void **)a1 + 472 * v4;
  sub_1CD59CD40((char *)v6);
  *(void *)(v6 + 32) = *(void *)(v6 + 24);
  sub_1CD59CC24(v6 + 48);
  uint64_t v7 = *(void *)(v5 + 352);
  *(_DWORD *)(v7 + 256) = 0;
  uint64_t v8 = **(void **)(a1 + 16);
  *(_DWORD *)(v7 + 232) = v4;
  int v9 = *(_DWORD *)(v7 + 40);
  if (v9)
  {
    uint64_t v10 = 0;
    do
    {
      *(void *)(*(void *)(v7 + 32) + 8 * v10) = *(void *)(*(void *)(v8 + 8 * v4) + 8 * v10);
      int v11 = v10 + 1;
      uint64_t v10 = (v10 + 1);
    }
    while (v9 != v11);
    uint64_t v8 = **(void **)(a1 + 16);
  }
  sub_1CD59C5F4(*(void *)(v5 + 376), a2, (void *)(v8 + 8 * v4), (int *)(**(void **)(a1 + 24) + 976 * v4), **(_DWORD **)(a1 + 32));
  *(_DWORD *)(v5 + 360) = v4;
  *(_DWORD *)(v5 + 364) = 1;
  uint64_t v12 = a2 + 48;
  for (unint64_t i = *(void *)(a2 + 56); i != v12; unint64_t i = *(void *)(i + 8))
  {
    LiveDebugValues::InstrRefBasedLDV::process((LiveDebugValues::InstrRefBasedLDV *)v5, (llvm::MachineInstr *)i, **(void **)(a1 + 40), **(void **)(a1 + 16));
    sub_1CD59CA90(*(void *)(v5 + 376), *(_DWORD *)(v5 + 364), i);
    ++*(_DWORD *)(v5 + 364);
    if ((*(unsigned char *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        unint64_t i = *(void *)(i + 8);
    }
  }
  uint64_t v14 = **(void **)(a1 + 16);
  uint64_t v15 = *(void *)(v14 + 8 * v4);
  *(void *)(v14 + 8 * v4) = 0;
  if (v15) {
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
  }
  uint64_t v16 = **(void **)(a1 + 40);
  uint64_t v17 = *(void *)(v16 + 8 * v4);
  *(void *)(v16 + 8 * v4) = 0;
  if (v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  *(_DWORD *)(**(void **)(a1 + 24) + 976 * v4 + 8) = 0;
  uint64_t v18 = **(void **)a1 + 472 * v4;
  sub_1CD59CD40((char *)v18);
  *(void *)(v18 + 32) = *(void *)(v18 + 24);

  return sub_1CD59CC24(v18 + 48);
}

BOOL LiveDebugValues::InstrRefBasedLDV::emitTransfers(uint64_t a1, uint64_t a2)
{
  v51[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 376);
  uint64_t v3 = *(unsigned int *)(v2 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(v2 + 40);
    uint64_t v43 = v5 + (v3 << 6);
    while (1)
    {
      uint64_t v49 = v51;
      uint64_t v50 = 0x300000000;
      uint64_t v6 = (char *)v51;
      uint64_t v7 = (unsigned int *)v51;
      uint64_t v8 = *(unsigned int *)(v5 + 24);
      if (!v8) {
        goto LABEL_23;
      }
      int v9 = *(uint64_t **)(v5 + 16);
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v9;
        int v12 = **(unsigned __int16 **)(*v9 + 16);
        uint64_t v13 = v12 != 14;
        if (v12 == 14) {
          uint64_t v14 = 32;
        }
        else {
          uint64_t v14 = 96;
        }
        uint64_t v15 = *(void *)(v11 + 56);
        if (*(_DWORD *)(v15 + 8) == 2) {
          uint64_t v16 = *(void *)(v15 - 8);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = *(void *)(v11 + 32);
        uint64_t v18 = *(void *)(v17 + v14 + 16);
        uint64_t v44 = *(void *)(v17 + (v13 << 6) + 16);
        if (v18)
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v18 + 24), *(uint64_t **)(v18 + 32), &v45);
        }
        else
        {
          v45.i8[0] = 0;
          char v46 = 0;
        }
        uint64_t v47 = v16;
        uint64_t v48 = 0;
        int v19 = sub_1CC2E9354(*(void *)a2, *(_DWORD *)(a2 + 16), &v44, &v48);
        uint64_t v20 = v48;
        if (!v19) {
          uint64_t v20 = *(void *)a2 + 48 * *(unsigned int *)(a2 + 16);
        }
        unsigned int v21 = *(_DWORD *)(v20 + 40);
        int v22 = v50;
        if (v50 >= HIDWORD(v50))
        {
          sub_1CD59F714((uint64_t)&v49, v21, v11);
        }
        else
        {
          unint64_t v23 = (char *)v49 + 16 * v50;
          *(_DWORD *)unint64_t v23 = v21;
          *((void *)v23 + 1) = v11;
          LODWORD(v50) = v22 + 1;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      uint64_t v7 = (unsigned int *)v49;
      uint64_t v6 = (char *)v49 + 16 * v50;
      if (v50) {
        uint64_t v24 = 126 - 2 * __clz(v50);
      }
      else {
LABEL_23:
      }
        uint64_t v24 = 0;
      sub_1CC4E9FC0(v7, (unint64_t)v6, v24, 1);
      uint64_t v25 = *(void *)(v5 + 8);
      if (v25)
      {
        if (v50)
        {
          uint64_t v26 = v25 + 48;
          uint64_t v27 = (uint64_t *)(v25 + 40);
          uint64_t v28 = 16 * v50;
          uint64_t v29 = (uint64_t *)((char *)v49 + 8);
          do
          {
            uint64_t v30 = *(void *)v5;
            uint64_t v31 = *v29;
            if (v26 != *(void *)v5 && (*(_WORD *)(v30 + 44) & 4) != 0) {
              *(_WORD *)(v31 + 44) |= 0xCu;
            }
            sub_1CC31973C(v27, (uint64_t *)v30, v31);
            v29 += 2;
            v28 -= 16;
          }
          while (v28);
        }
      }
      else
      {
        uint64_t v32 = *(void *)(*(void *)(*(void *)v5 + 16) + 8);
        if ((*(_WORD *)(*(void *)v5 + 44) & 0xC) != 0 && (*(_WORD *)(*(void *)v5 + 44) & 4) == 0)
        {
          uint64_t v40 = *(void *)v5;
          if ((v32 & 0x200) == 0)
          {
            while ((*(_WORD *)(v40 + 44) & 8) != 0)
            {
              uint64_t v40 = *(void *)(v40 + 8);
              if ((*(unsigned char *)(*(void *)(v40 + 16) + 9) & 2) != 0) {
                goto LABEL_42;
              }
            }
LABEL_37:
            if (v50)
            {
              int v34 = (char *)v49;
              unsigned int v35 = (char *)v49 + 16 * v50;
              unsigned int v36 = (uint64_t *)(*(void *)(*(void *)v5 + 24) + 40);
              do
              {
                uint64_t v37 = v5;
                do
                {
                  uint64_t v38 = *(void *)v37;
                  __int16 v39 = *(_WORD *)(*(void *)v37 + 44);
                  uint64_t v37 = *(void *)v37 + 8;
                }
                while ((v39 & 8) != 0);
                sub_1CBA959D4(v36, v38, *((void *)v34 + 1));
                v34 += 16;
              }
              while (v34 != v35);
            }
          }
        }
        else if ((v32 & 0x200) == 0)
        {
          goto LABEL_37;
        }
      }
LABEL_42:
      if (v49 != v51) {
        free(v49);
      }
      v5 += 64;
      if (v5 == v43) {
        return *(_DWORD *)(*(void *)(a1 + 376) + 48) != 0;
      }
    }
  }
  return 0;
}

_DWORD *sub_1CC4E3D14(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        uint64_t v2 = *(_DWORD **)result;
        uint64_t v3 = 8 * v1;
        do
        {
          *uint64_t v2 = -1;
          v2 += 2;
          v3 -= 8;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
    else
    {
      return sub_1CB83872C(result);
    }
  }
  return result;
}

uint64_t sub_1CC4E3D64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  uint64_t v4 = sub_1CBB0D2AC(v2, v3, a2);
  if ((uint64_t *)(v2 + 16 * v3) == v4) {
    operator new();
  }
  return v4[1];
}

uint64_t sub_1CC4E3FBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v27 = 0;
  uint64_t result = sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v27);
  uint64_t v7 = v27;
  if (result)
  {
    char v8 = 0;
    goto LABEL_8;
  }
  uint64_t v28 = v27;
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(unsigned int *)(a2 + 16);
  if (4 * v9 + 4 >= (3 * v10))
  {
    int v11 = 2 * v10;
    goto LABEL_10;
  }
  int v11 = *(_DWORD *)(a2 + 16);
  if ((int)v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    uint64_t v13 = *(void *)a2;
    unint64_t v14 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    int v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    if ((v16 + 1) > 0x40) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 64;
    }
    *(_DWORD *)(a2 + 16) = v17;
    uint64_t v18 = operator new(16 * v17, (std::align_val_t)8uLL);
    *(void *)a2 = v18;
    if (v13)
    {
      *(void *)(a2 + 8) = 0;
      uint64_t v19 = *(unsigned int *)(a2 + 16);
      if (v19)
      {
        uint64_t v20 = 16 * v19;
        do
        {
          *uint64_t v18 = -4096;
          v18 += 2;
          v20 -= 16;
        }
        while (v20);
      }
      if (v10)
      {
        unsigned int v21 = (uint64_t *)(v13 + 8);
        uint64_t v22 = 16 * v10;
        do
        {
          uint64_t v23 = *(v21 - 1);
          if ((v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            uint64_t v29 = 0;
            sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), v23, &v29);
            uint64_t v24 = v29;
            *uint64_t v29 = v23;
            v24[1] = *v21;
            ++*(_DWORD *)(a2 + 8);
          }
          v21 += 2;
          v22 -= 16;
        }
        while (v22);
      }
      MEMORY[0x1D25D9CD0](v13, 8);
      uint64_t v18 = *(void **)a2;
      LODWORD(v25) = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(void *)(a2 + 8) = 0;
      uint64_t v25 = *(unsigned int *)(a2 + 16);
      if (v25)
      {
        uint64_t v26 = 0;
        do
        {
          v18[v26] = -4096;
          v26 += 2;
        }
        while (2 * v25 != v26);
      }
    }
    uint64_t result = sub_1CBB0BF40((uint64_t)v18, v25, *a3, &v28);
    int v9 = *(_DWORD *)(a2 + 8);
    uint64_t v7 = v28;
  }
  *(_DWORD *)(a2 + 8) = v9 + 1;
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *uint64_t v7 = *a3;
  v7[1] = a3[1];
  char v8 = 1;
LABEL_8:
  uint64_t v12 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

char *sub_1CC4E41D0(void **a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x222222222222222) {
    abort();
  }
  if (0xDDDDDDDDDDDDDDDELL * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0xDDDDDDDDDDDDDDDELL * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)a1[2] - v4) >> 3) >= 0x111111111111111) {
    unint64_t v10 = 0x222222222222222;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x222222222222222) {
      sub_1CB833614();
    }
    int v11 = (char *)operator new(120 * v10);
  }
  else
  {
    int v11 = 0;
  }
  long long v12 = *(_OWORD *)(a2 + 16);
  uint64_t v13 = &v11[120 * v5];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
  *((_OWORD *)v13 + 1) = v12;
  long long v14 = *a3;
  *(_OWORD *)(v13 + 56) = a3[1];
  long long v15 = a3[3];
  *(_OWORD *)(v13 + 72) = a3[2];
  *(_OWORD *)(v13 + 88) = v15;
  *(_OWORD *)(v13 + 104) = a3[4];
  *((void *)v13 + 4) = *(void *)(a2 + 32);
  int v16 = v13 + 120;
  *(_OWORD *)(v13 + 40) = v14;
  if (v3 != v4)
  {
    do
    {
      long long v17 = *(_OWORD *)(v3 - 120);
      long long v18 = *(_OWORD *)(v3 - 104);
      long long v19 = *(_OWORD *)(v3 - 88);
      *(_OWORD *)(v13 - 72) = *(_OWORD *)(v3 - 72);
      *(_OWORD *)(v13 - 88) = v19;
      *(_OWORD *)(v13 - 104) = v18;
      *(_OWORD *)(v13 - 120) = v17;
      long long v20 = *(_OWORD *)(v3 - 56);
      long long v21 = *(_OWORD *)(v3 - 40);
      long long v22 = *(_OWORD *)(v3 - 24);
      *((void *)v13 - 1) = *((void *)v3 - 1);
      *(_OWORD *)(v13 - 24) = v22;
      *(_OWORD *)(v13 - 40) = v21;
      *(_OWORD *)(v13 - 56) = v20;
      v13 -= 120;
      v3 -= 120;
    }
    while (v3 != v4);
    uint64_t v3 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = &v11[120 * v10];
  if (v3) {
    operator delete(v3);
  }
  return v16;
}

uint64_t sub_1CC4E4348(uint64_t result, unint64_t *a2)
{
  uint64_t v3 = result;
  if (*(void *)(result + 192))
  {
    int v11 = (uint64_t **)(result + 176);
    return sub_1CD59AD20(v11, a2);
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 8);
    if (v4)
    {
      unint64_t v5 = *(char **)result;
      uint64_t v6 = *(void *)result + 40;
      uint64_t v7 = 40 * v4;
      while (1)
      {
        uint64_t result = sub_1CC2E9944((uint64_t)v5, (uint64_t)a2);
        char v8 = v5 + 40;
        if (result) {
          break;
        }
        v6 += 40;
        v5 += 40;
        v7 -= 40;
        if (!v7) {
          return result;
        }
      }
      unsigned int v9 = *(_DWORD *)(v3 + 8);
      uint64_t v10 = *(void *)v3 + 40 * v9;
      if (v8 != (const void *)v10)
      {
        uint64_t result = (uint64_t)memmove(v5, v8, v10 - v6);
        unsigned int v9 = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(v3 + 8) = v9 - 1;
    }
  }
  return result;
}

uint64_t sub_1CC4E4420(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  if (!a2)
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    goto LABEL_5;
  }
  unsigned int v7 = a2 - 1;
  uint64_t v8 = sub_1CC2E9470(a3) & (a2 - 1);
  uint64_t v9 = a1 + (v8 << 6);
  if (sub_1CC2E9944((uint64_t)a3, v9))
  {
    uint64_t result = 1;
    goto LABEL_5;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    if (*(void *)v9) {
      goto LABEL_8;
    }
    if (!*(unsigned char *)(v9 + 24)) {
      break;
    }
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      BOOL v13 = *(void *)(v9 + 32) == 0;
      goto LABEL_9;
    }
LABEL_8:
    BOOL v13 = 0;
LABEL_9:
    if (v13 && v11 == 0) {
      uint64_t v11 = v9;
    }
    int v14 = v12 + 1;
    uint64_t v8 = (v8 + v12) & v7;
    uint64_t v9 = a1 + (v8 << 6);
    BOOL v15 = sub_1CC2E9944((uint64_t)a3, v9);
    uint64_t result = 1;
    int v12 = v14;
    if (v15) {
      goto LABEL_5;
    }
  }
  if (*(void *)(v9 + 32)) {
    goto LABEL_8;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v9 = v11;
  }
LABEL_5:
  *a4 = v9;
  return result;
}

void sub_1CC4E4530(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4 = (unsigned int *)a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unsigned int v7 = *(_DWORD **)a1;
    uint64_t v8 = 208 * v6;
    do
    {
      *unsigned int v7 = -1;
      v7 += 52;
      v8 -= 208;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      unsigned int v9 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        int v10 = *(_DWORD *)(a1 + 16);
        if (v10)
        {
          int v12 = v10 - 1;
          unsigned int v13 = v12 & v9;
          uint64_t v11 = *(void *)a1 + 208 * (v12 & v9);
          int v14 = *(_DWORD *)v11;
          if (v9 != *(_DWORD *)v11)
          {
            uint64_t v16 = 0;
            int v17 = 1;
            while (v14 != -1)
            {
              if (v16) {
                BOOL v18 = 0;
              }
              else {
                BOOL v18 = v14 == -2;
              }
              if (v18) {
                uint64_t v16 = v11;
              }
              unsigned int v19 = v13 + v17++;
              unsigned int v13 = v19 & v12;
              uint64_t v11 = *(void *)a1 + 208 * v13;
              int v14 = *(_DWORD *)v11;
              if (v9 == *(_DWORD *)v11) {
                goto LABEL_11;
              }
            }
            if (v16) {
              uint64_t v11 = v16;
            }
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
LABEL_11:
        *(_DWORD *)uint64_t v11 = v9;
        sub_1CD59AB78((void *)(v11 + 8), (uint64_t)(v4 + 2));
        ++*(_DWORD *)(a1 + 8);
        sub_1CD3C5048((uint64_t)(v4 + 46), *((void **)v4 + 24));
        BOOL v15 = (int *)*((void *)v4 + 1);
        if (v15 != (int *)(v4 + 6)) {
          free(v15);
        }
      }
      v4 += 52;
    }
    while (v4 != (unsigned int *)a3);
  }
}

uint64_t sub_1CC4E466C(uint64_t result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)result + (v6 << 6);
    do
    {
      *(void *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      v7 += 64;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 || *((unsigned char *)a2 + 24) && *(long long *)((char *)a2 + 8) != 0 || *((void *)a2 + 4))
    {
      uint64_t v13 = 0;
      uint64_t result = sub_1CC4E4420(*(void *)v5, *(_DWORD *)(v5 + 16), (uint64_t *)a2, &v13);
      uint64_t v9 = v13;
      long long v10 = *a2;
      long long v11 = a2[1];
      *(void *)(v13 + 32) = *((void *)a2 + 4);
      *(_OWORD *)uint64_t v9 = v10;
      *(_OWORD *)(v9 + 16) = v11;
      long long v12 = *(long long *)((char *)a2 + 40);
      *(void *)(v9 + 56) = *((void *)a2 + 7);
      *(_OWORD *)(v9 + 40) = v12;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 4;
  }
  return result;
}

void *sub_1CC4E4750(void *result)
{
  uint64_t v1 = (void *)result[1];
  if ((void *)*result != v1)
  {
    uint64_t v2 = (void *)(*result + 32);
    do
    {
      if (*(v2 - 4) || *((unsigned char *)v2 - 8) && *(_OWORD *)(v2 - 3) != 0) {
        break;
      }
      if (*v2) {
        break;
      }
      uint64_t v3 = v2 + 1;
      void *result = v2 + 1;
      v2 += 5;
    }
    while (v3 != v1);
  }
  return result;
}

uint64_t sub_1CC4E47A0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_1CD59BE60((void **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_DWORD *sub_1CC4E4838(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(208 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    unsigned int v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 208 * v5;
      do
      {
        void *result = -1;
        result += 52;
        v6 -= 208;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

char *sub_1CC4E48D4(char *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    uint64_t result = (char *)operator new((unint64_t)v4 << 6, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = *((unsigned int *)v2 + 4);
    if (v5)
    {
      uint64_t v6 = &result[64 * v5];
      do
      {
        *(void *)uint64_t result = 0;
        result[8] = 0;
        result[24] = 0;
        *((void *)result + 4) = 0;
        result += 64;
      }
      while (result != v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

char *sub_1CC4E4974(char *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    uint64_t result = (char *)operator new(48 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    int v5 = *((_DWORD *)v2 + 4);
    if (v5)
    {
      uint64_t v6 = &result[48 * v5];
      do
      {
        *(void *)uint64_t result = 0;
        result[8] = 0;
        result[24] = 0;
        *((void *)result + 4) = 0;
        result += 48;
      }
      while (result != v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

char *sub_1CC4E4A18(char *result)
{
  if (*((void *)result + 1))
  {
    unsigned int v1 = *((_DWORD *)result + 4);
    if (v1 > 4 * *((_DWORD *)result + 2) && v1 >= 0x41)
    {
      return sub_1CC3A5280(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(void *)result;
        uint64_t v3 = *(void *)result + 40 * v1;
        do
        {
          *(void *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 8) = 0;
          *(unsigned char *)(v2 + 24) = 0;
          *(void *)(v2 + 32) = 0;
          v2 += 40;
        }
        while (v2 != v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t sub_1CC4E4A78(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v6 = 8;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      uint64_t v9 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  int v7 = v6 - 1;
  unsigned int v8 = sub_1CC2E9470(a2) & (v6 - 1);
  uint64_t v9 = v5 + 48 * v8;
  if (sub_1CC2E9944((uint64_t)a2, v9))
  {
    uint64_t result = 1;
    goto LABEL_7;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    if (*(void *)v9) {
      goto LABEL_11;
    }
    if (!*(unsigned char *)(v9 + 24)) {
      break;
    }
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      BOOL v13 = *(void *)(v9 + 32) == 0;
      goto LABEL_12;
    }
LABEL_11:
    BOOL v13 = 0;
LABEL_12:
    if (v13 && v11 == 0) {
      uint64_t v11 = v9;
    }
    int v14 = v12 + 1;
    unsigned int v8 = (v8 + v12) & v7;
    uint64_t v9 = v5 + 48 * v8;
    BOOL v15 = sub_1CC2E9944((uint64_t)a2, v9);
    uint64_t result = 1;
    int v12 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  if (*(void *)(v9 + 32)) {
    goto LABEL_11;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v9 = v11;
  }
LABEL_7:
  *a3 = v9;
  return result;
}

uint64_t sub_1CC4E4BA8(uint64_t a1, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(long long **)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v15 = a2;
      *(void *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC4E4D84((int *)a1, v6, &v6[3 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v16;
  do
  {
    uint64_t v10 = a1 + v8;
    if (*(void *)(a1 + v8 + 8) || *(unsigned char *)(v10 + 32) && *(_OWORD *)(a1 + v8 + 16) != 0 || *(void *)(v10 + 40))
    {
      long long v11 = *(_OWORD *)(a1 + v8 + 8);
      long long v12 = *(_OWORD *)(a1 + v8 + 24);
      *((void *)v9 + 4) = *(void *)(a1 + v8 + 40);
      *uint64_t v9 = v11;
      v9[1] = v12;
      *((void *)v9 + 5) = *(void *)(v10 + 48);
      v9 += 3;
    }
    v8 += 48;
  }
  while (v8 != 384);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v13 = a2;
    *(void *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v13;
  }
  return sub_1CC4E4D84((int *)a1, v16, v9);
}

uint64_t sub_1CC4E4D84(int *a1, long long *a2, long long *a3)
{
  uint64_t result = (uint64_t)sub_1CD59CF18(a1);
  while (a2 != a3)
  {
    if (*(void *)a2 || *((unsigned char *)a2 + 24) && *(long long *)((char *)a2 + 8) != 0 || *((void *)a2 + 4))
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CC4E4A78((uint64_t)a1, (uint64_t *)a2, &v10);
      uint64_t v7 = v10;
      long long v8 = *a2;
      long long v9 = a2[1];
      *(void *)(v10 + 32) = *((void *)a2 + 4);
      *(_OWORD *)uint64_t v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      *(void *)(v7 + 40) = *((void *)a2 + 5);
      *a1 += 2;
    }
    a2 += 3;
  }
  return result;
}

char *sub_1CC4E4E30(char *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    uint64_t result = (char *)operator new(56 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    int v5 = *((_DWORD *)v2 + 4);
    if (v5)
    {
      int v6 = &result[56 * v5];
      do
      {
        *(void *)uint64_t result = -4096;
        *((void *)result + 1) = -1;
        *((void *)result + 2) = -1;
        result += 56;
      }
      while (result != v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

_DWORD *sub_1CC4E4ED4(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(112 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 112 * v5;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 28;
        v6 -= 112;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

int8x16_t sub_1CC4E4F70(int8x16_t *a1, int8x16_t *a2, void *a3, uint64_t a4, char a5)
{
uint64_t sub_1CC4E6284(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *a4;
  uint64_t v10 = (uint64_t *)(*a4 + 576);
  uint64_t v37 = *a2;
  uint64_t v38 = 0;
  if (sub_1CD3C8538(v10, &v37, &v38)) {
    uint64_t v11 = v38;
  }
  else {
    uint64_t v11 = *(void *)(v9 + 576) + 16 * *(unsigned int *)(v9 + 592);
  }
  unsigned int v12 = *(_DWORD *)(v11 + 8);
  uint64_t v37 = v8;
  uint64_t v38 = 0;
  if (sub_1CD3C8538(v10, &v37, &v38)) {
    uint64_t v13 = v38;
  }
  else {
    uint64_t v13 = *(void *)(v9 + 576) + 16 * *(unsigned int *)(v9 + 592);
  }
  uint64_t v14 = *a2;
  uint64_t v15 = *a4;
  uint64_t v16 = (uint64_t *)(*a4 + 576);
  if (v12 >= *(_DWORD *)(v13 + 8))
  {
    uint64_t v37 = *a3;
    uint64_t v38 = 0;
    if (sub_1CD3C8538(v16, &v37, &v38)) {
      uint64_t v18 = v38;
    }
    else {
      uint64_t v18 = *(void *)(v15 + 576) + 16 * *(unsigned int *)(v15 + 592);
    }
    unsigned int v22 = *(_DWORD *)(v18 + 8);
    uint64_t v37 = v14;
    uint64_t v38 = 0;
    uint64_t result = sub_1CD3C8538(v16, &v37, &v38);
    if (result) {
      uint64_t v23 = v38;
    }
    else {
      uint64_t v23 = *(void *)(v15 + 576) + 16 * *(unsigned int *)(v15 + 592);
    }
    if (v22 < *(_DWORD *)(v23 + 8))
    {
      uint64_t v27 = *a2;
      *a2 = *a3;
      *a3 = v27;
      uint64_t v28 = *a1;
      uint64_t v29 = *a4;
      uint64_t v37 = *a2;
      uint64_t v38 = 0;
      uint64_t v30 = (sub_1CD3C8538((uint64_t *)(v29 + 576), &v37, &v38) & 1) != 0
          ? v38
          : *(void *)(v29 + 576) + 16 * *(unsigned int *)(v29 + 592);
      unsigned int v33 = *(_DWORD *)(v30 + 8);
      uint64_t v37 = v28;
      uint64_t v38 = 0;
      uint64_t result = sub_1CD3C8538((uint64_t *)(v29 + 576), &v37, &v38);
      uint64_t v34 = (result & 1) != 0 ? v38 : *(void *)(v29 + 576) + 16 * *(unsigned int *)(v29 + 592);
      if (v33 < *(_DWORD *)(v34 + 8))
      {
        uint64_t v36 = *a1;
        *a1 = *a2;
        *a2 = v36;
      }
    }
  }
  else
  {
    uint64_t v37 = *a3;
    uint64_t v38 = 0;
    if (sub_1CD3C8538(v16, &v37, &v38)) {
      uint64_t v17 = v38;
    }
    else {
      uint64_t v17 = *(void *)(v15 + 576) + 16 * *(unsigned int *)(v15 + 592);
    }
    unsigned int v19 = *(_DWORD *)(v17 + 8);
    uint64_t v37 = v14;
    uint64_t v38 = 0;
    uint64_t result = sub_1CD3C8538(v16, &v37, &v38);
    if (result) {
      uint64_t v21 = v38;
    }
    else {
      uint64_t v21 = *(void *)(v15 + 576) + 16 * *(unsigned int *)(v15 + 592);
    }
    uint64_t v24 = *a1;
    if (v19 >= *(_DWORD *)(v21 + 8))
    {
      *a1 = *a2;
      *a2 = v24;
      uint64_t v25 = *a4;
      uint64_t v37 = *a3;
      uint64_t v38 = 0;
      if (sub_1CD3C8538((uint64_t *)(v25 + 576), &v37, &v38)) {
        uint64_t v26 = v38;
      }
      else {
        uint64_t v26 = *(void *)(v25 + 576) + 16 * *(unsigned int *)(v25 + 592);
      }
      unsigned int v31 = *(_DWORD *)(v26 + 8);
      uint64_t v37 = v24;
      uint64_t v38 = 0;
      uint64_t result = sub_1CD3C8538((uint64_t *)(v25 + 576), &v37, &v38);
      if (result) {
        uint64_t v32 = v38;
      }
      else {
        uint64_t v32 = *(void *)(v25 + 576) + 16 * *(unsigned int *)(v25 + 592);
      }
      if (v31 < *(_DWORD *)(v32 + 8))
      {
        uint64_t v35 = *a2;
        *a2 = *a3;
        *a3 = v35;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v24;
    }
  }
  return result;
}

BOOL sub_1CC4E656C(int8x16_t *a1, int8x16_t *a2, void *a3)
{
  unint64_t v3 = a3;
  BOOL v5 = a1;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v27 = v5->i64[0];
      uint64_t v28 = *a3;
      uint64_t v29 = (uint64_t *)(*a3 + 576);
      uint64_t v67 = a2[-1].i64[1];
      uint64_t v68 = 0;
      if (sub_1CD3C8538(v29, &v67, &v68)) {
        uint64_t v30 = v68;
      }
      else {
        uint64_t v30 = *(void *)(v28 + 576) + 16 * *(unsigned int *)(v28 + 592);
      }
      unsigned int v37 = *(_DWORD *)(v30 + 8);
      uint64_t v67 = v27;
      uint64_t v68 = 0;
      if (sub_1CD3C8538(v29, &v67, &v68)) {
        uint64_t v38 = v68;
      }
      else {
        uint64_t v38 = *(void *)(v28 + 576) + 16 * *(unsigned int *)(v28 + 592);
      }
      if (v37 < *(_DWORD *)(v38 + 8))
      {
        uint64_t v41 = v5->i64[0];
        v5->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v41;
      }
      return 1;
    case 3:
      sub_1CC4E6284(v5->i64, &v5->i64[1], &a2[-1].i64[1], a3);
      return 1;
    case 4:
      sub_1CC4E6AA8(v5->i64, &v5->i64[1], v5[1].i64, &a2[-1].i64[1], a3);
      return 1;
    case 5:
      unsigned int v31 = v5 + 1;
      uint64_t v32 = &v5[1].i64[1];
      sub_1CC4E6AA8(v5->i64, &v5->i64[1], v5[1].i64, &v5[1].i64[1], a3);
      uint64_t v33 = v5[1].i64[1];
      uint64_t v34 = *v3;
      uint64_t v35 = (uint64_t *)(*v3 + 576);
      uint64_t v67 = a2[-1].i64[1];
      uint64_t v68 = 0;
      if (sub_1CD3C8538(v35, &v67, &v68)) {
        uint64_t v36 = v68;
      }
      else {
        uint64_t v36 = *(void *)(v34 + 576) + 16 * *(unsigned int *)(v34 + 592);
      }
      unsigned int v39 = *(_DWORD *)(v36 + 8);
      uint64_t v67 = v33;
      uint64_t v68 = 0;
      if (sub_1CD3C8538(v35, &v67, &v68)) {
        uint64_t v40 = v68;
      }
      else {
        uint64_t v40 = *(void *)(v34 + 576) + 16 * *(unsigned int *)(v34 + 592);
      }
      if (v39 < *(_DWORD *)(v40 + 8))
      {
        uint64_t v42 = *v32;
        *uint64_t v32 = a2[-1].i64[1];
        a2[-1].i64[1] = v42;
        uint64_t v43 = v31->i64[0];
        uint64_t v44 = *v3;
        unsigned int v45 = (uint64_t *)(*v3 + 576);
        uint64_t v67 = *v32;
        uint64_t v68 = 0;
        uint64_t v46 = (sub_1CD3C8538(v45, &v67, &v68) & 1) != 0
            ? v68
            : *(void *)(v44 + 576) + 16 * *(unsigned int *)(v44 + 592);
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        uint64_t v67 = v43;
        uint64_t v68 = 0;
        uint64_t v48 = (sub_1CD3C8538(v45, &v67, &v68) & 1) != 0
            ? v68
            : *(void *)(v44 + 576) + 16 * *(unsigned int *)(v44 + 592);
        if (v47 < *(_DWORD *)(v48 + 8))
        {
          uint64_t v49 = v31->i64[0];
          uint64_t v50 = *v32;
          v31->i64[0] = *v32;
          *uint64_t v32 = v49;
          uint64_t v51 = v5->i64[1];
          uint64_t v52 = *v3;
          uint64_t v53 = (uint64_t *)(*v3 + 576);
          uint64_t v67 = v50;
          uint64_t v68 = 0;
          uint64_t v54 = (sub_1CD3C8538(v53, &v67, &v68) & 1) != 0
              ? v68
              : *(void *)(v52 + 576) + 16 * *(unsigned int *)(v52 + 592);
          unsigned int v55 = *(_DWORD *)(v54 + 8);
          uint64_t v67 = v51;
          uint64_t v68 = 0;
          uint64_t v56 = (sub_1CD3C8538(v53, &v67, &v68) & 1) != 0
              ? v68
              : *(void *)(v52 + 576) + 16 * *(unsigned int *)(v52 + 592);
          if (v55 < *(_DWORD *)(v56 + 8))
          {
            uint64_t v58 = v5->i64[1];
            uint64_t v57 = v5[1].i64[0];
            uint64_t v59 = v5->i64[0];
            v5->i64[1] = v57;
            v5[1].i64[0] = v58;
            uint64_t v60 = *v3;
            uint64_t v61 = (uint64_t *)(*v3 + 576);
            uint64_t v67 = v57;
            uint64_t v68 = 0;
            uint64_t v62 = (sub_1CD3C8538(v61, &v67, &v68) & 1) != 0
                ? v68
                : *(void *)(v60 + 576) + 16 * *(unsigned int *)(v60 + 592);
            unsigned int v63 = *(_DWORD *)(v62 + 8);
            uint64_t v67 = v59;
            uint64_t v68 = 0;
            uint64_t v64 = (sub_1CD3C8538(v61, &v67, &v68) & 1) != 0
                ? v68
                : *(void *)(v60 + 576) + 16 * *(unsigned int *)(v60 + 592);
            if (v63 < *(_DWORD *)(v64 + 8)) {
              *BOOL v5 = vextq_s8(*v5, *v5, 8uLL);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = v5 + 1;
      sub_1CC4E6284(v5->i64, &v5->i64[1], v5[1].i64, a3);
      uint64_t v9 = &v5[1].i64[1];
      if (&v5[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v66 = 0;
      uint64_t v65 = v5;
      break;
  }
  while (1)
  {
    uint64_t v11 = v8->i64[0];
    uint64_t v12 = *v3;
    uint64_t v13 = (uint64_t *)(*v3 + 576);
    uint64_t v67 = *v9;
    uint64_t v68 = 0;
    uint64_t v14 = (sub_1CD3C8538(v13, &v67, &v68) & 1) != 0 ? v68 : *(void *)(v12 + 576) + 16 * *(unsigned int *)(v12 + 592);
    unsigned int v15 = *(_DWORD *)(v14 + 8);
    uint64_t v67 = v11;
    uint64_t v68 = 0;
    uint64_t v16 = (sub_1CD3C8538(v13, &v67, &v68) & 1) != 0 ? v68 : *(void *)(v12 + 576) + 16 * *(unsigned int *)(v12 + 592);
    if (v15 < *(_DWORD *)(v16 + 8))
    {
      uint64_t v17 = *v9;
      uint64_t v18 = v10;
      while (1)
      {
        *(uint64_t *)((char *)&v5[1].i64[1] + v18) = *(uint64_t *)((char *)v5[1].i64 + v18);
        if (v18 == -16) {
          break;
        }
        uint64_t v19 = *(uint64_t *)((char *)&v5->i64[1] + v18);
        uint64_t v20 = v3;
        uint64_t v21 = *v3;
        uint64_t v22 = v17;
        uint64_t v67 = v17;
        uint64_t v68 = 0;
        if (sub_1CD3C8538((uint64_t *)(v21 + 576), &v67, &v68)) {
          uint64_t v23 = v68;
        }
        else {
          uint64_t v23 = *(void *)(v21 + 576) + 16 * *(unsigned int *)(v21 + 592);
        }
        unsigned int v24 = *(_DWORD *)(v23 + 8);
        uint64_t v67 = v19;
        uint64_t v68 = 0;
        if (sub_1CD3C8538((uint64_t *)(v21 + 576), &v67, &v68)) {
          uint64_t v25 = v68;
        }
        else {
          uint64_t v25 = *(void *)(v21 + 576) + 16 * *(unsigned int *)(v21 + 592);
        }
        unint64_t v3 = v20;
        uint64_t v17 = v22;
        v18 -= 8;
        BOOL v5 = v65;
        if (v24 >= *(_DWORD *)(v25 + 8))
        {
          uint64_t v26 = (uint64_t *)((char *)&v65[1].i64[1] + v18);
          goto LABEL_23;
        }
      }
      uint64_t v26 = (uint64_t *)v5;
LABEL_23:
      *uint64_t v26 = v17;
      if (++v66 == 8) {
        return v9 + 1 == (uint64_t *)a2;
      }
    }
    uint64_t v8 = (int8x16_t *)v9;
    v10 += 8;
    BOOL result = 1;
    if (++v9 == (uint64_t *)a2) {
      return result;
    }
  }
}

uint64_t sub_1CC4E6AA8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  sub_1CC4E6284(a1, a2, a3, a5);
  uint64_t v10 = *a3;
  uint64_t v11 = *a5;
  uint64_t v12 = (uint64_t *)(*a5 + 576);
  uint64_t v32 = *a4;
  uint64_t v33 = 0;
  if (sub_1CD3C8538(v12, &v32, &v33)) {
    uint64_t v13 = v33;
  }
  else {
    uint64_t v13 = *(void *)(v11 + 576) + 16 * *(unsigned int *)(v11 + 592);
  }
  unsigned int v14 = *(_DWORD *)(v13 + 8);
  uint64_t v32 = v10;
  uint64_t v33 = 0;
  uint64_t result = sub_1CD3C8538(v12, &v32, &v33);
  if (result) {
    uint64_t v16 = v33;
  }
  else {
    uint64_t v16 = *(void *)(v11 + 576) + 16 * *(unsigned int *)(v11 + 592);
  }
  if (v14 < *(_DWORD *)(v16 + 8))
  {
    uint64_t v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    uint64_t v18 = *a2;
    uint64_t v19 = *a5;
    uint64_t v20 = (uint64_t *)(*a5 + 576);
    uint64_t v32 = *a3;
    uint64_t v33 = 0;
    uint64_t v21 = (sub_1CD3C8538(v20, &v32, &v33) & 1) != 0 ? v33 : *(void *)(v19 + 576) + 16 * *(unsigned int *)(v19 + 592);
    unsigned int v22 = *(_DWORD *)(v21 + 8);
    uint64_t v32 = v18;
    uint64_t v33 = 0;
    uint64_t result = sub_1CD3C8538(v20, &v32, &v33);
    uint64_t v23 = (result & 1) != 0 ? v33 : *(void *)(v19 + 576) + 16 * *(unsigned int *)(v19 + 592);
    if (v22 < *(_DWORD *)(v23 + 8))
    {
      uint64_t v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      uint64_t v25 = *a1;
      uint64_t v26 = *a5;
      uint64_t v27 = (uint64_t *)(*a5 + 576);
      uint64_t v32 = *a2;
      uint64_t v33 = 0;
      if (sub_1CD3C8538(v27, &v32, &v33)) {
        uint64_t v28 = v33;
      }
      else {
        uint64_t v28 = *(void *)(v26 + 576) + 16 * *(unsigned int *)(v26 + 592);
      }
      unsigned int v29 = *(_DWORD *)(v28 + 8);
      uint64_t v32 = v25;
      uint64_t v33 = 0;
      uint64_t result = sub_1CD3C8538(v27, &v32, &v33);
      if (result) {
        uint64_t v30 = v33;
      }
      else {
        uint64_t v30 = *(void *)(v26 + 576) + 16 * *(unsigned int *)(v26 + 592);
      }
      if (v29 < *(_DWORD *)(v30 + 8))
      {
        uint64_t v31 = *a1;
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  return result;
}

unsigned int *sub_1CC4E6CA4(unsigned int *result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    unsigned int v4 = *result;
    BOOL v5 = result;
    do
    {
      uint64_t v6 = &v5[v3 + 1];
      uint64_t v7 = (2 * v3) | 1;
      uint64_t v3 = 2 * v3 + 2;
      if (v3 >= a3)
      {
        unsigned int v8 = *v6;
        uint64_t v3 = v7;
      }
      else
      {
        unsigned int v8 = *v6;
        unsigned int v9 = v6[1];
        if (*v6 >= v9) {
          unsigned int v8 = v6[1];
        }
        if (*v6 <= v9) {
          uint64_t v3 = v7;
        }
        else {
          ++v6;
        }
      }
      *BOOL v5 = v8;
      BOOL v5 = v6;
    }
    while (v3 <= (uint64_t)((unint64_t)(a3 - 2) >> 1));
    uint64_t v10 = (unsigned int *)(a2 - 4);
    if (v6 == (unsigned int *)(a2 - 4))
    {
      *uint64_t v6 = v4;
    }
    else
    {
      *uint64_t v6 = *v10;
      *uint64_t v10 = v4;
      uint64_t v11 = (char *)v6 - (char *)result + 4;
      if (v11 >= 5)
      {
        unint64_t v12 = (((unint64_t)v11 >> 2) - 2) >> 1;
        uint64_t v13 = &result[v12];
        unsigned int v14 = *v13;
        unsigned int v15 = *v6;
        if (*v13 > *v6)
        {
          do
          {
            *uint64_t v6 = v14;
            uint64_t v6 = v13;
            if (!v12) {
              break;
            }
            unint64_t v12 = (v12 - 1) >> 1;
            uint64_t v13 = &result[v12];
            unsigned int v14 = *v13;
          }
          while (*v13 > v15);
          *uint64_t v6 = v15;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC4E6D90(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = result + 16 * (v3 >> 1);
    unsigned int v6 = *(_DWORD *)(v5 + 8);
    unsigned int v7 = *(_DWORD *)(a2 - 8);
    if (v6 >= v7)
    {
      if (v7 < v6) {
        return result;
      }
      unsigned int v8 = *(_DWORD *)(a2 - 4);
      if (*(_DWORD *)(result + 16 * v4 + 12) >= v8) {
        return result;
      }
    }
    else
    {
      unsigned int v8 = *(_DWORD *)(a2 - 4);
    }
    uint64_t v9 = *(void *)(a2 - 16);
    *(void *)(a2 - 16) = *(void *)v5;
    *(_DWORD *)(a2 - 8) = v6;
    *(_DWORD *)(a2 - 4) = *(_DWORD *)(result + 16 * v4 + 12);
    if (v3 >= 2)
    {
      while (1)
      {
        unint64_t v11 = v4 - 1;
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v10 = result + 16 * v4;
        unsigned int v12 = *(_DWORD *)(v10 + 8);
        if (v12 >= v7 && (v7 < v12 || *(_DWORD *)(result + 16 * v4 + 12) >= v8)) {
          break;
        }
        *(void *)uint64_t v5 = *(void *)v10;
        *(_DWORD *)(v5 + 8) = v12;
        *(_DWORD *)(v5 + 12) = *(_DWORD *)(v10 + 12);
        uint64_t v5 = result + 16 * v4;
        if (v11 <= 1) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v10 = v5;
LABEL_12:
    *(void *)uint64_t v10 = v9;
    *(_DWORD *)(v10 + 8) = v7;
    *(_DWORD *)(v10 + 12) = v8;
  }
  return result;
}

uint64_t sub_1CC4E6E5C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)result;
    uint64_t v5 = result;
    int v7 = *(_DWORD *)(result + 8);
    int v6 = *(_DWORD *)(result + 12);
    while (1)
    {
      uint64_t v8 = v5;
      uint64_t v9 = v3 + 1;
      v5 += 16 * (v3 + 1);
      uint64_t v10 = 2 * v3;
      uint64_t v3 = (2 * v3) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a3)
      {
        unsigned int v12 = *(_DWORD *)(v5 + 8);
        unsigned int v13 = *(_DWORD *)(v5 + 24);
        if (v12 >= v13)
        {
          if (v13 < v12) {
            goto LABEL_9;
          }
          BOOL v14 = *(_DWORD *)(v8 + 16 * v9 + 12) < *(_DWORD *)(v5 + 28);
          v5 += 16 * v14;
          if (!v14) {
            goto LABEL_9;
          }
        }
        else
        {
          v5 += 16;
        }
        uint64_t v3 = v11;
      }
LABEL_9:
      *(void *)uint64_t v8 = *(void *)v5;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v5 + 12);
      if (v3 > (uint64_t)((unint64_t)(a3 - 2) >> 1))
      {
        if (v5 == a2 - 16)
        {
          *(void *)uint64_t v5 = v4;
          *(_DWORD *)(v5 + 8) = v7;
          *(_DWORD *)(v5 + 12) = v6;
        }
        else
        {
          *(void *)uint64_t v5 = *(void *)(a2 - 16);
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 - 4);
          *(void *)(a2 - 16) = v4;
          *(_DWORD *)(a2 - 8) = v7;
          *(_DWORD *)(a2 - 4) = v6;
          return sub_1CC4E6D90(result, v5 + 16, (v5 + 16 - result) >> 4);
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1CC4E6F50(uint64_t result, uint64_t *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    uint64_t v137 = a2 - 1;
    uint64_t v11 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v12 = v11;
          uint64_t v13 = (char *)a2 - (char *)v11;
          uint64_t v14 = a2 - v11;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v133 = *(a2 - 1);
                uint64_t v144 = *v12;
                uint64_t v145 = v133;
                uint64_t v134 = (uint64_t *)(*a3 + 576);
                unsigned int v135 = *((_DWORD *)sub_1CD41D7A0(v134, &v145) + 2);
                uint64_t result = (uint64_t)sub_1CD41D7A0(v134, &v144);
                if (v135 < *(_DWORD *)(result + 8))
                {
                  uint64_t v136 = *v12;
                  *unsigned int v12 = *(a2 - 1);
                  *(a2 - 1) = v136;
                }
                break;
              case 3:
                uint64_t result = (uint64_t)sub_1CC4E7BC8(v12, v12 + 1, v137, a3);
                break;
              case 4:
                uint64_t result = (uint64_t)sub_1CC4E7FD0(v12, v12 + 1, v12 + 2, v137, a3);
                break;
              case 5:
                uint64_t result = (uint64_t)sub_1CC4E7A38(v12, v12 + 1, v12 + 2, v12 + 3, v137, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          uint64_t v143 = v12;
          if (v13 <= 191)
          {
            uint64_t v65 = v12 + 1;
            BOOL v67 = v12 == a2 || v65 == a2;
            if (a5)
            {
              if (!v67)
              {
                uint64_t v68 = 0;
                uint64_t v69 = v12;
                do
                {
                  uint64_t v71 = *v69;
                  uint64_t v70 = v69[1];
                  uint64_t v69 = v65;
                  uint64_t v144 = v71;
                  uint64_t v145 = v70;
                  uint64_t v72 = (uint64_t *)(*a3 + 576);
                  unsigned int v73 = *((_DWORD *)sub_1CD41D7A0(v72, &v145) + 2);
                  uint64_t result = (uint64_t)sub_1CD41D7A0(v72, &v144);
                  if (v73 < *(_DWORD *)(result + 8))
                  {
                    uint64_t v74 = *v69;
                    uint64_t v75 = v68;
                    while (1)
                    {
                      *(uint64_t *)((char *)v12 + v75 + 8) = *(uint64_t *)((char *)v12 + v75);
                      if (!v75) {
                        break;
                      }
                      uint64_t v144 = *(uint64_t *)((char *)v12 + v75 - 8);
                      uint64_t v145 = v74;
                      uint64_t v76 = (uint64_t *)(*a3 + 576);
                      unint64_t v77 = a2;
                      unsigned int v78 = *((_DWORD *)sub_1CD41D7A0(v76, &v145) + 2);
                      uint64_t result = (uint64_t)sub_1CD41D7A0(v76, &v144);
                      v75 -= 8;
                      BOOL v5 = v78 >= *(_DWORD *)(result + 8);
                      a2 = v77;
                      unsigned int v12 = v143;
                      if (v5)
                      {
                        uint64_t v79 = (uint64_t *)((char *)v143 + v75 + 8);
                        goto LABEL_72;
                      }
                    }
                    uint64_t v79 = v12;
LABEL_72:
                    *uint64_t v79 = v74;
                  }
                  uint64_t v65 = v69 + 1;
                  v68 += 8;
                }
                while (v69 + 1 != a2);
              }
            }
            else if (!v67)
            {
              do
              {
                uint64_t v124 = *v12;
                uint64_t v123 = v12[1];
                unsigned int v12 = v65;
                uint64_t v144 = v124;
                uint64_t v145 = v123;
                uint64_t v125 = (uint64_t *)(*a3 + 576);
                unsigned int v126 = *((_DWORD *)sub_1CD41D7A0(v125, &v145) + 2);
                uint64_t result = (uint64_t)sub_1CD41D7A0(v125, &v144);
                if (v126 < *(_DWORD *)(result + 8))
                {
                  uint64_t v127 = *v12;
                  uint64_t v128 = v12;
                  do
                  {
                    int v129 = v128;
                    uint64_t v130 = *--v128;
                    uint64_t *v129 = v130;
                    uint64_t v144 = *(v129 - 2);
                    uint64_t v145 = v127;
                    int64_t v131 = (uint64_t *)(*a3 + 576);
                    unsigned int v132 = *((_DWORD *)sub_1CD41D7A0(v131, &v145) + 2);
                    uint64_t result = (uint64_t)sub_1CD41D7A0(v131, &v144);
                  }
                  while (v132 < *(_DWORD *)(result + 8));
                  *uint64_t v128 = v127;
                }
                uint64_t v65 = v12 + 1;
              }
              while (v12 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v80 = (unint64_t)(v14 - 2) >> 1;
              int64_t v81 = v80;
              uint64_t v138 = a2;
              do
              {
                int64_t v82 = v81;
                if (v80 >= v81)
                {
                  uint64_t v83 = (2 * v81) | 1;
                  uint64_t v84 = &v143[v83];
                  if (2 * v81 + 2 < v14)
                  {
                    uint64_t v85 = *v84;
                    uint64_t v144 = v84[1];
                    uint64_t v145 = v85;
                    uint64_t v86 = (uint64_t *)(*a3 + 576);
                    unsigned int v87 = *((_DWORD *)sub_1CD41D7A0(v86, &v145) + 2);
                    if (v87 < *((_DWORD *)sub_1CD41D7A0(v86, &v144) + 2))
                    {
                      ++v84;
                      uint64_t v83 = 2 * v82 + 2;
                    }
                  }
                  uint64_t v88 = &v143[v82];
                  uint64_t v89 = v84;
                  uint64_t v90 = *v84;
                  uint64_t v144 = *v88;
                  uint64_t v145 = v90;
                  unsigned int v91 = (uint64_t *)(*a3 + 576);
                  unsigned int v92 = *((_DWORD *)sub_1CD41D7A0(v91, &v145) + 2);
                  uint64_t result = (uint64_t)sub_1CD41D7A0(v91, &v144);
                  BOOL v5 = v92 >= *(_DWORD *)(result + 8);
                  a2 = v138;
                  if (v5)
                  {
                    uint64_t v141 = *v88;
                    do
                    {
                      uint64_t v93 = v89;
                      *uint64_t v88 = *v89;
                      if (v80 < v83) {
                        break;
                      }
                      uint64_t v94 = 2 * v83;
                      uint64_t v83 = (2 * v83) | 1;
                      uint64_t v89 = &v143[v83];
                      uint64_t v95 = v94 + 2;
                      if (v94 + 2 < v14)
                      {
                        uint64_t v96 = *v89;
                        uint64_t v144 = v89[1];
                        uint64_t v145 = v96;
                        uint64_t v97 = (uint64_t *)(*a3 + 576);
                        unsigned int v98 = *((_DWORD *)sub_1CD41D7A0(v97, &v145) + 2);
                        if (v98 < *((_DWORD *)sub_1CD41D7A0(v97, &v144) + 2))
                        {
                          ++v89;
                          uint64_t v83 = v95;
                        }
                      }
                      uint64_t v99 = *v89;
                      uint64_t v144 = v141;
                      uint64_t v145 = v99;
                      unint64_t v100 = (uint64_t *)(*a3 + 576);
                      unsigned int v101 = *((_DWORD *)sub_1CD41D7A0(v100, &v145) + 2);
                      uint64_t result = (uint64_t)sub_1CD41D7A0(v100, &v144);
                      uint64_t v88 = v93;
                      BOOL v5 = v101 >= *(_DWORD *)(result + 8);
                      a2 = v138;
                    }
                    while (v5);
                    *uint64_t v93 = v141;
                  }
                }
                int64_t v81 = v82 - 1;
              }
              while (v82);
              uint64_t v102 = v143;
              do
              {
                uint64_t v103 = 0;
                char v139 = a2;
                uint64_t v142 = *v102;
                char v104 = v102;
                do
                {
                  uint64_t v105 = &v104[v103 + 1];
                  uint64_t v106 = (2 * v103) | 1;
                  uint64_t v107 = 2 * v103 + 2;
                  if (v107 < v14)
                  {
                    uint64_t v108 = *v105;
                    uint64_t v144 = v105[1];
                    uint64_t v145 = v108;
                    char v109 = (uint64_t *)(*a3 + 576);
                    unsigned int v110 = *((_DWORD *)sub_1CD41D7A0(v109, &v145) + 2);
                    uint64_t result = (uint64_t)sub_1CD41D7A0(v109, &v144);
                    uint64_t v102 = v143;
                    if (v110 < *(_DWORD *)(result + 8))
                    {
                      ++v105;
                      uint64_t v106 = v107;
                    }
                  }
                  *char v104 = *v105;
                  char v104 = v105;
                  uint64_t v103 = v106;
                }
                while (v106 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                a2 = v139 - 1;
                if (v105 == v139 - 1)
                {
                  *uint64_t v105 = v142;
                }
                else
                {
                  *uint64_t v105 = *a2;
                  *a2 = v142;
                  uint64_t v111 = (char *)v105 - (char *)v102 + 8;
                  if (v111 >= 9)
                  {
                    unint64_t v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                    int v113 = &v102[v112];
                    uint64_t v114 = *v113;
                    uint64_t v144 = *v105;
                    uint64_t v145 = v114;
                    uint64_t v115 = (uint64_t *)(*a3 + 576);
                    unsigned int v116 = *((_DWORD *)sub_1CD41D7A0(v115, &v145) + 2);
                    uint64_t result = (uint64_t)sub_1CD41D7A0(v115, &v144);
                    uint64_t v102 = v143;
                    if (v116 < *(_DWORD *)(result + 8))
                    {
                      uint64_t v117 = *v105;
                      do
                      {
                        uint64_t v118 = v113;
                        *uint64_t v105 = *v113;
                        if (!v112) {
                          break;
                        }
                        unint64_t v112 = (v112 - 1) >> 1;
                        int v113 = &v102[v112];
                        uint64_t v119 = *v113;
                        uint64_t v144 = v117;
                        uint64_t v145 = v119;
                        uint64_t v120 = (uint64_t *)(*a3 + 576);
                        unsigned int v121 = *((_DWORD *)sub_1CD41D7A0(v120, &v145) + 2);
                        uint64_t result = (uint64_t)sub_1CD41D7A0(v120, &v144);
                        uint64_t v105 = v118;
                        uint64_t v102 = v143;
                      }
                      while (v121 < *(_DWORD *)(result + 8));
                      uint64_t *v118 = v117;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CC4E7BC8(v16, v12, v137, a3);
          }
          else
          {
            sub_1CC4E7BC8(v12, v16, v137, a3);
            sub_1CC4E7BC8(v12 + 1, v16 - 1, a2 - 2, a3);
            sub_1CC4E7BC8(v12 + 2, &v12[v15 + 1], a2 - 3, a3);
            sub_1CC4E7BC8(v16 - 1, v16, &v12[v15 + 1], a3);
            uint64_t v17 = *v12;
            *unsigned int v12 = *v16;
            *uint64_t v16 = v17;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v41 = *(v12 - 1);
          uint64_t v144 = *v12;
          uint64_t v145 = v41;
          uint64_t v42 = (uint64_t *)(*a3 + 576);
          unsigned int v43 = *((_DWORD *)sub_1CD41D7A0(v42, &v145) + 2);
          if (v43 < *((_DWORD *)sub_1CD41D7A0(v42, &v144) + 2)) {
            break;
          }
          uint64_t v44 = *v12;
          uint64_t v144 = *v137;
          uint64_t v145 = v44;
          unsigned int v45 = (uint64_t *)(*a3 + 576);
          unsigned int v46 = *((_DWORD *)sub_1CD41D7A0(v45, &v145) + 2);
          uint64_t result = (uint64_t)sub_1CD41D7A0(v45, &v144);
          if (v46 >= *(_DWORD *)(result + 8))
          {
            uint64_t v62 = v12 + 1;
            do
            {
              uint64_t v11 = v62;
              if (v62 >= a2) {
                break;
              }
              ++v62;
              uint64_t v144 = *v11;
              uint64_t v145 = v44;
              unsigned int v63 = (uint64_t *)(*a3 + 576);
              unsigned int v64 = *((_DWORD *)sub_1CD41D7A0(v63, &v145) + 2);
              uint64_t result = (uint64_t)sub_1CD41D7A0(v63, &v144);
            }
            while (v64 >= *(_DWORD *)(result + 8));
          }
          else
          {
            uint64_t v11 = v12;
            do
            {
              uint64_t v47 = v11[1];
              ++v11;
              uint64_t v144 = v47;
              uint64_t v145 = v44;
              uint64_t v48 = (uint64_t *)(*a3 + 576);
              unsigned int v49 = *((_DWORD *)sub_1CD41D7A0(v48, &v145) + 2);
              uint64_t result = (uint64_t)sub_1CD41D7A0(v48, &v144);
            }
            while (v49 >= *(_DWORD *)(result + 8));
          }
          uint64_t v50 = a2;
          if (v11 < a2)
          {
            uint64_t v50 = a2;
            do
            {
              uint64_t v51 = *--v50;
              uint64_t v144 = v51;
              uint64_t v145 = v44;
              uint64_t v52 = (uint64_t *)(*a3 + 576);
              unsigned int v53 = *((_DWORD *)sub_1CD41D7A0(v52, &v145) + 2);
              uint64_t result = (uint64_t)sub_1CD41D7A0(v52, &v144);
            }
            while (v53 < *(_DWORD *)(result + 8));
          }
          while (v11 < v50)
          {
            uint64_t v54 = *v11;
            *uint64_t v11 = *v50;
            *uint64_t v50 = v54;
            do
            {
              uint64_t v55 = v11[1];
              ++v11;
              uint64_t v144 = v55;
              uint64_t v145 = v44;
              uint64_t v56 = (uint64_t *)(*a3 + 576);
              unsigned int v57 = *((_DWORD *)sub_1CD41D7A0(v56, &v145) + 2);
            }
            while (v57 >= *((_DWORD *)sub_1CD41D7A0(v56, &v144) + 2));
            do
            {
              uint64_t v58 = *--v50;
              uint64_t v144 = v58;
              uint64_t v145 = v44;
              uint64_t v59 = (uint64_t *)(*a3 + 576);
              unsigned int v60 = *((_DWORD *)sub_1CD41D7A0(v59, &v145) + 2);
              uint64_t result = (uint64_t)sub_1CD41D7A0(v59, &v144);
            }
            while (v60 < *(_DWORD *)(result + 8));
          }
          uint64_t v61 = v11 - 1;
          BOOL v5 = v11 - 1 >= v143;
          BOOL v6 = v11 - 1 == v143;
          if (v11 - 1 != v143) {
            *uint64_t v143 = *v61;
          }
          a5 = 0;
          uint64_t *v61 = v44;
        }
        uint64_t v18 = 0;
        uint64_t v19 = *v12;
        do
        {
          uint64_t v20 = v12[v18 + 1];
          uint64_t v144 = v19;
          uint64_t v145 = v20;
          uint64_t v21 = (uint64_t *)(*a3 + 576);
          unsigned int v22 = *((_DWORD *)sub_1CD41D7A0(v21, &v145) + 2);
          ++v18;
        }
        while (v22 < *((_DWORD *)sub_1CD41D7A0(v21, &v144) + 2));
        uint64_t v23 = &v12[v18];
        uint64_t v24 = a2;
        if (v18 == 1)
        {
          uint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            uint64_t v38 = *--v24;
            uint64_t v144 = v19;
            uint64_t v145 = v38;
            unsigned int v39 = (uint64_t *)(*a3 + 576);
            unsigned int v40 = *((_DWORD *)sub_1CD41D7A0(v39, &v145) + 2);
          }
          while (v40 >= *((_DWORD *)sub_1CD41D7A0(v39, &v144) + 2));
        }
        else
        {
          do
          {
            uint64_t v25 = *--v24;
            uint64_t v144 = v19;
            uint64_t v145 = v25;
            uint64_t v26 = (uint64_t *)(*a3 + 576);
            unsigned int v27 = *((_DWORD *)sub_1CD41D7A0(v26, &v145) + 2);
          }
          while (v27 >= *((_DWORD *)sub_1CD41D7A0(v26, &v144) + 2));
        }
        uint64_t v11 = v23;
        if (v23 < v24)
        {
          uint64_t v28 = v24;
          do
          {
            uint64_t v29 = *v11;
            *uint64_t v11 = *v28;
            *uint64_t v28 = v29;
            do
            {
              uint64_t v30 = v11[1];
              ++v11;
              uint64_t v144 = v19;
              uint64_t v145 = v30;
              uint64_t v31 = (uint64_t *)(*a3 + 576);
              unsigned int v32 = *((_DWORD *)sub_1CD41D7A0(v31, &v145) + 2);
            }
            while (v32 < *((_DWORD *)sub_1CD41D7A0(v31, &v144) + 2));
            do
            {
              uint64_t v33 = *--v28;
              uint64_t v144 = v19;
              uint64_t v145 = v33;
              uint64_t v34 = (uint64_t *)(*a3 + 576);
              unsigned int v35 = *((_DWORD *)sub_1CD41D7A0(v34, &v145) + 2);
            }
            while (v35 >= *((_DWORD *)sub_1CD41D7A0(v34, &v144) + 2));
          }
          while (v11 < v28);
        }
        uint64_t v36 = v11 - 1;
        uint64_t v10 = v143;
        if (v11 - 1 != v143) {
          *uint64_t v143 = *v36;
        }
        *uint64_t v36 = v19;
        if (v23 >= v24) {
          break;
        }
LABEL_26:
        uint64_t result = sub_1CC4E6F50(v143, v11 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v37 = sub_1CC4E7D80(v143, v11 - 1, a3);
      uint64_t result = sub_1CC4E7D80(v11, a2, a3);
      if (result) {
        break;
      }
      if (!v37) {
        goto LABEL_26;
      }
    }
    a2 = v11 - 1;
    if (!v37) {
      continue;
    }
    return result;
  }
}

void *sub_1CC4E7A38(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  sub_1CC4E7FD0(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v29 = *a4;
  uint64_t v30 = v12;
  uint64_t v13 = (uint64_t *)(*a6 + 576);
  unsigned int v14 = *((_DWORD *)sub_1CD41D7A0(v13, &v30) + 2);
  uint64_t result = sub_1CD41D7A0(v13, &v29);
  if (v14 < *((_DWORD *)result + 2))
  {
    uint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    uint64_t v17 = *a4;
    uint64_t v29 = *a3;
    uint64_t v30 = v17;
    uint64_t v18 = (uint64_t *)(*a6 + 576);
    unsigned int v19 = *((_DWORD *)sub_1CD41D7A0(v18, &v30) + 2);
    uint64_t result = sub_1CD41D7A0(v18, &v29);
    if (v19 < *((_DWORD *)result + 2))
    {
      uint64_t v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      uint64_t v21 = *a3;
      uint64_t v29 = *a2;
      uint64_t v30 = v21;
      unsigned int v22 = (uint64_t *)(*a6 + 576);
      unsigned int v23 = *((_DWORD *)sub_1CD41D7A0(v22, &v30) + 2);
      uint64_t result = sub_1CD41D7A0(v22, &v29);
      if (v23 < *((_DWORD *)result + 2))
      {
        uint64_t v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        uint64_t v25 = *a2;
        uint64_t v29 = *a1;
        uint64_t v30 = v25;
        uint64_t v26 = (uint64_t *)(*a6 + 576);
        unsigned int v27 = *((_DWORD *)sub_1CD41D7A0(v26, &v30) + 2);
        uint64_t result = sub_1CD41D7A0(v26, &v29);
        if (v27 < *((_DWORD *)result + 2))
        {
          uint64_t v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

void *sub_1CC4E7BC8(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = *a2;
  uint64_t v27 = *a1;
  uint64_t v28 = v8;
  uint64_t v9 = (uint64_t *)(*a4 + 576);
  unsigned int v10 = *((_DWORD *)sub_1CD41D7A0(v9, &v28) + 2);
  uint64_t v11 = sub_1CD41D7A0(v9, &v27);
  uint64_t v12 = *a3;
  if (v10 >= *((_DWORD *)v11 + 2))
  {
    uint64_t v27 = *a2;
    uint64_t v28 = v12;
    uint64_t v17 = (uint64_t *)(*a4 + 576);
    unsigned int v18 = *((_DWORD *)sub_1CD41D7A0(v17, &v28) + 2);
    uint64_t result = sub_1CD41D7A0(v17, &v27);
    if (v18 < *((_DWORD *)result + 2))
    {
      uint64_t v22 = *a2;
      *a2 = *a3;
      *a3 = v22;
      uint64_t v23 = *a2;
      uint64_t v27 = *a1;
      uint64_t v28 = v23;
      uint64_t v24 = (uint64_t *)(*a4 + 576);
      unsigned int v25 = *((_DWORD *)sub_1CD41D7A0(v24, &v28) + 2);
      uint64_t result = sub_1CD41D7A0(v24, &v27);
      if (v25 < *((_DWORD *)result + 2))
      {
        uint64_t v26 = *a1;
        *a1 = *a2;
        *a2 = v26;
      }
    }
  }
  else
  {
    uint64_t v27 = *a2;
    uint64_t v28 = v12;
    uint64_t v13 = (uint64_t *)(*a4 + 576);
    unsigned int v14 = *((_DWORD *)sub_1CD41D7A0(v13, &v28) + 2);
    uint64_t result = sub_1CD41D7A0(v13, &v27);
    uint64_t v16 = *a1;
    if (v14 < *((_DWORD *)result + 2))
    {
      *a1 = *a3;
LABEL_4:
      *a3 = v16;
      return result;
    }
    *a1 = *a2;
    *a2 = v16;
    uint64_t v19 = *a3;
    uint64_t v27 = v16;
    uint64_t v28 = v19;
    uint64_t v20 = (uint64_t *)(*a4 + 576);
    unsigned int v21 = *((_DWORD *)sub_1CD41D7A0(v20, &v28) + 2);
    uint64_t result = sub_1CD41D7A0(v20, &v27);
    if (v21 < *((_DWORD *)result + 2))
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      goto LABEL_4;
    }
  }
  return result;
}

BOOL sub_1CC4E7D80(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v20 = *(a2 - 1);
      uint64_t v24 = *a1;
      uint64_t v25 = v20;
      unsigned int v21 = (uint64_t *)(*a3 + 576);
      unsigned int v22 = *((_DWORD *)sub_1CD41D7A0(v21, &v25) + 2);
      if (v22 < *((_DWORD *)sub_1CD41D7A0(v21, &v24) + 2))
      {
        uint64_t v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      sub_1CC4E7BC8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC4E7FD0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CC4E7A38(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CC4E7BC8(a1, a1 + 1, a1 + 2, a3);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v24 = *v8;
    uint64_t v25 = v12;
    uint64_t v13 = (uint64_t *)(*a3 + 576);
    unsigned int v14 = *((_DWORD *)sub_1CD41D7A0(v13, &v25) + 2);
    if (v14 < *((_DWORD *)sub_1CD41D7A0(v13, &v24) + 2))
    {
      uint64_t v15 = *v9;
      uint64_t v16 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16 + 24) = *(uint64_t *)((char *)a1 + v16 + 16);
        if (v16 == -16) {
          break;
        }
        uint64_t v24 = *(uint64_t *)((char *)a1 + v16 + 8);
        uint64_t v25 = v15;
        uint64_t v17 = (uint64_t *)(*a3 + 576);
        unsigned int v18 = *((_DWORD *)sub_1CD41D7A0(v17, &v25) + 2);
        v16 -= 8;
        if (v18 >= *((_DWORD *)sub_1CD41D7A0(v17, &v24) + 2))
        {
          uint64_t v19 = (uint64_t *)((char *)a1 + v16 + 24);
          goto LABEL_11;
        }
      }
      uint64_t v19 = a1;
LABEL_11:
      *uint64_t v19 = v15;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    BOOL result = 1;
    if (++v9 == a2) {
      return result;
    }
  }
}

void *sub_1CC4E7FD0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  sub_1CC4E7BC8(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v23 = *a3;
  uint64_t v24 = v10;
  int v11 = (uint64_t *)(*a5 + 576);
  unsigned int v12 = *((_DWORD *)sub_1CD41D7A0(v11, &v24) + 2);
  BOOL result = sub_1CD41D7A0(v11, &v23);
  if (v12 < *((_DWORD *)result + 2))
  {
    uint64_t v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    uint64_t v15 = *a3;
    uint64_t v23 = *a2;
    uint64_t v24 = v15;
    uint64_t v16 = (uint64_t *)(*a5 + 576);
    unsigned int v17 = *((_DWORD *)sub_1CD41D7A0(v16, &v24) + 2);
    BOOL result = sub_1CD41D7A0(v16, &v23);
    if (v17 < *((_DWORD *)result + 2))
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v19 = *a2;
      uint64_t v23 = *a1;
      uint64_t v24 = v19;
      uint64_t v20 = (uint64_t *)(*a5 + 576);
      unsigned int v21 = *((_DWORD *)sub_1CD41D7A0(v20, &v24) + 2);
      BOOL result = sub_1CD41D7A0(v20, &v23);
      if (v21 < *((_DWORD *)result + 2))
      {
        uint64_t v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

uint64_t sub_1CC4E8110(uint64_t result, uint64_t *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    uint64_t v137 = a2 - 1;
    int v11 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v12 = v11;
          uint64_t v13 = (char *)a2 - (char *)v11;
          uint64_t v14 = a2 - v11;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v133 = *(a2 - 1);
                uint64_t v144 = *v12;
                uint64_t v145 = v133;
                uint64_t v134 = (uint64_t *)(*a3 + 576);
                unsigned int v135 = *((_DWORD *)sub_1CD41D7A0(v134, &v145) + 2);
                BOOL result = (uint64_t)sub_1CD41D7A0(v134, &v144);
                if (v135 < *(_DWORD *)(result + 8))
                {
                  uint64_t v136 = *v12;
                  *unsigned int v12 = *(a2 - 1);
                  *(a2 - 1) = v136;
                }
                break;
              case 3:
                BOOL result = (uint64_t)sub_1CC4E7BC8(v12, v12 + 1, v137, a3);
                break;
              case 4:
                BOOL result = (uint64_t)sub_1CC4E7FD0(v12, v12 + 1, v12 + 2, v137, a3);
                break;
              case 5:
                BOOL result = (uint64_t)sub_1CC4E7A38(v12, v12 + 1, v12 + 2, v12 + 3, v137, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          uint64_t v143 = v12;
          if (v13 <= 191)
          {
            uint64_t v65 = v12 + 1;
            BOOL v67 = v12 == a2 || v65 == a2;
            if (a5)
            {
              if (!v67)
              {
                uint64_t v68 = 0;
                uint64_t v69 = v12;
                do
                {
                  uint64_t v71 = *v69;
                  uint64_t v70 = v69[1];
                  uint64_t v69 = v65;
                  uint64_t v144 = v71;
                  uint64_t v145 = v70;
                  uint64_t v72 = (uint64_t *)(*a3 + 576);
                  unsigned int v73 = *((_DWORD *)sub_1CD41D7A0(v72, &v145) + 2);
                  BOOL result = (uint64_t)sub_1CD41D7A0(v72, &v144);
                  if (v73 < *(_DWORD *)(result + 8))
                  {
                    uint64_t v74 = *v69;
                    uint64_t v75 = v68;
                    while (1)
                    {
                      *(uint64_t *)((char *)v12 + v75 + 8) = *(uint64_t *)((char *)v12 + v75);
                      if (!v75) {
                        break;
                      }
                      uint64_t v144 = *(uint64_t *)((char *)v12 + v75 - 8);
                      uint64_t v145 = v74;
                      uint64_t v76 = (uint64_t *)(*a3 + 576);
                      unint64_t v77 = a2;
                      unsigned int v78 = *((_DWORD *)sub_1CD41D7A0(v76, &v145) + 2);
                      BOOL result = (uint64_t)sub_1CD41D7A0(v76, &v144);
                      v75 -= 8;
                      BOOL v5 = v78 >= *(_DWORD *)(result + 8);
                      a2 = v77;
                      unsigned int v12 = v143;
                      if (v5)
                      {
                        uint64_t v79 = (uint64_t *)((char *)v143 + v75 + 8);
                        goto LABEL_72;
                      }
                    }
                    uint64_t v79 = v12;
LABEL_72:
                    *uint64_t v79 = v74;
                  }
                  uint64_t v65 = v69 + 1;
                  v68 += 8;
                }
                while (v69 + 1 != a2);
              }
            }
            else if (!v67)
            {
              do
              {
                uint64_t v124 = *v12;
                uint64_t v123 = v12[1];
                unsigned int v12 = v65;
                uint64_t v144 = v124;
                uint64_t v145 = v123;
                uint64_t v125 = (uint64_t *)(*a3 + 576);
                unsigned int v126 = *((_DWORD *)sub_1CD41D7A0(v125, &v145) + 2);
                BOOL result = (uint64_t)sub_1CD41D7A0(v125, &v144);
                if (v126 < *(_DWORD *)(result + 8))
                {
                  uint64_t v127 = *v12;
                  uint64_t v128 = v12;
                  do
                  {
                    int v129 = v128;
                    uint64_t v130 = *--v128;
                    uint64_t *v129 = v130;
                    uint64_t v144 = *(v129 - 2);
                    uint64_t v145 = v127;
                    int64_t v131 = (uint64_t *)(*a3 + 576);
                    unsigned int v132 = *((_DWORD *)sub_1CD41D7A0(v131, &v145) + 2);
                    BOOL result = (uint64_t)sub_1CD41D7A0(v131, &v144);
                  }
                  while (v132 < *(_DWORD *)(result + 8));
                  *uint64_t v128 = v127;
                }
                uint64_t v65 = v12 + 1;
              }
              while (v12 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v80 = (unint64_t)(v14 - 2) >> 1;
              int64_t v81 = v80;
              uint64_t v138 = a2;
              do
              {
                int64_t v82 = v81;
                if (v80 >= v81)
                {
                  uint64_t v83 = (2 * v81) | 1;
                  uint64_t v84 = &v143[v83];
                  if (2 * v81 + 2 < v14)
                  {
                    uint64_t v85 = *v84;
                    uint64_t v144 = v84[1];
                    uint64_t v145 = v85;
                    uint64_t v86 = (uint64_t *)(*a3 + 576);
                    unsigned int v87 = *((_DWORD *)sub_1CD41D7A0(v86, &v145) + 2);
                    if (v87 < *((_DWORD *)sub_1CD41D7A0(v86, &v144) + 2))
                    {
                      ++v84;
                      uint64_t v83 = 2 * v82 + 2;
                    }
                  }
                  uint64_t v88 = &v143[v82];
                  uint64_t v89 = v84;
                  uint64_t v90 = *v84;
                  uint64_t v144 = *v88;
                  uint64_t v145 = v90;
                  unsigned int v91 = (uint64_t *)(*a3 + 576);
                  unsigned int v92 = *((_DWORD *)sub_1CD41D7A0(v91, &v145) + 2);
                  BOOL result = (uint64_t)sub_1CD41D7A0(v91, &v144);
                  BOOL v5 = v92 >= *(_DWORD *)(result + 8);
                  a2 = v138;
                  if (v5)
                  {
                    uint64_t v141 = *v88;
                    do
                    {
                      uint64_t v93 = v89;
                      *uint64_t v88 = *v89;
                      if (v80 < v83) {
                        break;
                      }
                      uint64_t v94 = 2 * v83;
                      uint64_t v83 = (2 * v83) | 1;
                      uint64_t v89 = &v143[v83];
                      uint64_t v95 = v94 + 2;
                      if (v94 + 2 < v14)
                      {
                        uint64_t v96 = *v89;
                        uint64_t v144 = v89[1];
                        uint64_t v145 = v96;
                        uint64_t v97 = (uint64_t *)(*a3 + 576);
                        unsigned int v98 = *((_DWORD *)sub_1CD41D7A0(v97, &v145) + 2);
                        if (v98 < *((_DWORD *)sub_1CD41D7A0(v97, &v144) + 2))
                        {
                          ++v89;
                          uint64_t v83 = v95;
                        }
                      }
                      uint64_t v99 = *v89;
                      uint64_t v144 = v141;
                      uint64_t v145 = v99;
                      unint64_t v100 = (uint64_t *)(*a3 + 576);
                      unsigned int v101 = *((_DWORD *)sub_1CD41D7A0(v100, &v145) + 2);
                      BOOL result = (uint64_t)sub_1CD41D7A0(v100, &v144);
                      uint64_t v88 = v93;
                      BOOL v5 = v101 >= *(_DWORD *)(result + 8);
                      a2 = v138;
                    }
                    while (v5);
                    *uint64_t v93 = v141;
                  }
                }
                int64_t v81 = v82 - 1;
              }
              while (v82);
              uint64_t v102 = v143;
              do
              {
                uint64_t v103 = 0;
                char v139 = a2;
                uint64_t v142 = *v102;
                char v104 = v102;
                do
                {
                  uint64_t v105 = &v104[v103 + 1];
                  uint64_t v106 = (2 * v103) | 1;
                  uint64_t v107 = 2 * v103 + 2;
                  if (v107 < v14)
                  {
                    uint64_t v108 = *v105;
                    uint64_t v144 = v105[1];
                    uint64_t v145 = v108;
                    char v109 = (uint64_t *)(*a3 + 576);
                    unsigned int v110 = *((_DWORD *)sub_1CD41D7A0(v109, &v145) + 2);
                    BOOL result = (uint64_t)sub_1CD41D7A0(v109, &v144);
                    uint64_t v102 = v143;
                    if (v110 < *(_DWORD *)(result + 8))
                    {
                      ++v105;
                      uint64_t v106 = v107;
                    }
                  }
                  *char v104 = *v105;
                  char v104 = v105;
                  uint64_t v103 = v106;
                }
                while (v106 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                a2 = v139 - 1;
                if (v105 == v139 - 1)
                {
                  *uint64_t v105 = v142;
                }
                else
                {
                  *uint64_t v105 = *a2;
                  *a2 = v142;
                  uint64_t v111 = (char *)v105 - (char *)v102 + 8;
                  if (v111 >= 9)
                  {
                    unint64_t v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                    int v113 = &v102[v112];
                    uint64_t v114 = *v113;
                    uint64_t v144 = *v105;
                    uint64_t v145 = v114;
                    uint64_t v115 = (uint64_t *)(*a3 + 576);
                    unsigned int v116 = *((_DWORD *)sub_1CD41D7A0(v115, &v145) + 2);
                    BOOL result = (uint64_t)sub_1CD41D7A0(v115, &v144);
                    uint64_t v102 = v143;
                    if (v116 < *(_DWORD *)(result + 8))
                    {
                      uint64_t v117 = *v105;
                      do
                      {
                        uint64_t v118 = v113;
                        *uint64_t v105 = *v113;
                        if (!v112) {
                          break;
                        }
                        unint64_t v112 = (v112 - 1) >> 1;
                        int v113 = &v102[v112];
                        uint64_t v119 = *v113;
                        uint64_t v144 = v117;
                        uint64_t v145 = v119;
                        uint64_t v120 = (uint64_t *)(*a3 + 576);
                        unsigned int v121 = *((_DWORD *)sub_1CD41D7A0(v120, &v145) + 2);
                        BOOL result = (uint64_t)sub_1CD41D7A0(v120, &v144);
                        uint64_t v105 = v118;
                        uint64_t v102 = v143;
                      }
                      while (v121 < *(_DWORD *)(result + 8));
                      uint64_t *v118 = v117;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CC4E7BC8(v16, v12, v137, a3);
          }
          else
          {
            sub_1CC4E7BC8(v12, v16, v137, a3);
            sub_1CC4E7BC8(v12 + 1, v16 - 1, a2 - 2, a3);
            sub_1CC4E7BC8(v12 + 2, &v12[v15 + 1], a2 - 3, a3);
            sub_1CC4E7BC8(v16 - 1, v16, &v12[v15 + 1], a3);
            uint64_t v17 = *v12;
            *unsigned int v12 = *v16;
            *uint64_t v16 = v17;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v41 = *(v12 - 1);
          uint64_t v144 = *v12;
          uint64_t v145 = v41;
          uint64_t v42 = (uint64_t *)(*a3 + 576);
          unsigned int v43 = *((_DWORD *)sub_1CD41D7A0(v42, &v145) + 2);
          if (v43 < *((_DWORD *)sub_1CD41D7A0(v42, &v144) + 2)) {
            break;
          }
          uint64_t v44 = *v12;
          uint64_t v144 = *v137;
          uint64_t v145 = v44;
          unsigned int v45 = (uint64_t *)(*a3 + 576);
          unsigned int v46 = *((_DWORD *)sub_1CD41D7A0(v45, &v145) + 2);
          BOOL result = (uint64_t)sub_1CD41D7A0(v45, &v144);
          if (v46 >= *(_DWORD *)(result + 8))
          {
            uint64_t v62 = v12 + 1;
            do
            {
              int v11 = v62;
              if (v62 >= a2) {
                break;
              }
              ++v62;
              uint64_t v144 = *v11;
              uint64_t v145 = v44;
              unsigned int v63 = (uint64_t *)(*a3 + 576);
              unsigned int v64 = *((_DWORD *)sub_1CD41D7A0(v63, &v145) + 2);
              BOOL result = (uint64_t)sub_1CD41D7A0(v63, &v144);
            }
            while (v64 >= *(_DWORD *)(result + 8));
          }
          else
          {
            int v11 = v12;
            do
            {
              uint64_t v47 = v11[1];
              ++v11;
              uint64_t v144 = v47;
              uint64_t v145 = v44;
              uint64_t v48 = (uint64_t *)(*a3 + 576);
              unsigned int v49 = *((_DWORD *)sub_1CD41D7A0(v48, &v145) + 2);
              BOOL result = (uint64_t)sub_1CD41D7A0(v48, &v144);
            }
            while (v49 >= *(_DWORD *)(result + 8));
          }
          uint64_t v50 = a2;
          if (v11 < a2)
          {
            uint64_t v50 = a2;
            do
            {
              uint64_t v51 = *--v50;
              uint64_t v144 = v51;
              uint64_t v145 = v44;
              uint64_t v52 = (uint64_t *)(*a3 + 576);
              unsigned int v53 = *((_DWORD *)sub_1CD41D7A0(v52, &v145) + 2);
              BOOL result = (uint64_t)sub_1CD41D7A0(v52, &v144);
            }
            while (v53 < *(_DWORD *)(result + 8));
          }
          while (v11 < v50)
          {
            uint64_t v54 = *v11;
            *int v11 = *v50;
            *uint64_t v50 = v54;
            do
            {
              uint64_t v55 = v11[1];
              ++v11;
              uint64_t v144 = v55;
              uint64_t v145 = v44;
              uint64_t v56 = (uint64_t *)(*a3 + 576);
              unsigned int v57 = *((_DWORD *)sub_1CD41D7A0(v56, &v145) + 2);
            }
            while (v57 >= *((_DWORD *)sub_1CD41D7A0(v56, &v144) + 2));
            do
            {
              uint64_t v58 = *--v50;
              uint64_t v144 = v58;
              uint64_t v145 = v44;
              uint64_t v59 = (uint64_t *)(*a3 + 576);
              unsigned int v60 = *((_DWORD *)sub_1CD41D7A0(v59, &v145) + 2);
              BOOL result = (uint64_t)sub_1CD41D7A0(v59, &v144);
            }
            while (v60 < *(_DWORD *)(result + 8));
          }
          uint64_t v61 = v11 - 1;
          BOOL v5 = v11 - 1 >= v143;
          BOOL v6 = v11 - 1 == v143;
          if (v11 - 1 != v143) {
            *uint64_t v143 = *v61;
          }
          a5 = 0;
          uint64_t *v61 = v44;
        }
        uint64_t v18 = 0;
        uint64_t v19 = *v12;
        do
        {
          uint64_t v20 = v12[v18 + 1];
          uint64_t v144 = v19;
          uint64_t v145 = v20;
          unsigned int v21 = (uint64_t *)(*a3 + 576);
          unsigned int v22 = *((_DWORD *)sub_1CD41D7A0(v21, &v145) + 2);
          ++v18;
        }
        while (v22 < *((_DWORD *)sub_1CD41D7A0(v21, &v144) + 2));
        uint64_t v23 = &v12[v18];
        uint64_t v24 = a2;
        if (v18 == 1)
        {
          uint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            uint64_t v38 = *--v24;
            uint64_t v144 = v19;
            uint64_t v145 = v38;
            unsigned int v39 = (uint64_t *)(*a3 + 576);
            unsigned int v40 = *((_DWORD *)sub_1CD41D7A0(v39, &v145) + 2);
          }
          while (v40 >= *((_DWORD *)sub_1CD41D7A0(v39, &v144) + 2));
        }
        else
        {
          do
          {
            uint64_t v25 = *--v24;
            uint64_t v144 = v19;
            uint64_t v145 = v25;
            uint64_t v26 = (uint64_t *)(*a3 + 576);
            unsigned int v27 = *((_DWORD *)sub_1CD41D7A0(v26, &v145) + 2);
          }
          while (v27 >= *((_DWORD *)sub_1CD41D7A0(v26, &v144) + 2));
        }
        int v11 = v23;
        if (v23 < v24)
        {
          uint64_t v28 = v24;
          do
          {
            uint64_t v29 = *v11;
            *int v11 = *v28;
            *uint64_t v28 = v29;
            do
            {
              uint64_t v30 = v11[1];
              ++v11;
              uint64_t v144 = v19;
              uint64_t v145 = v30;
              uint64_t v31 = (uint64_t *)(*a3 + 576);
              unsigned int v32 = *((_DWORD *)sub_1CD41D7A0(v31, &v145) + 2);
            }
            while (v32 < *((_DWORD *)sub_1CD41D7A0(v31, &v144) + 2));
            do
            {
              uint64_t v33 = *--v28;
              uint64_t v144 = v19;
              uint64_t v145 = v33;
              uint64_t v34 = (uint64_t *)(*a3 + 576);
              unsigned int v35 = *((_DWORD *)sub_1CD41D7A0(v34, &v145) + 2);
            }
            while (v35 >= *((_DWORD *)sub_1CD41D7A0(v34, &v144) + 2));
          }
          while (v11 < v28);
        }
        uint64_t v36 = v11 - 1;
        uint64_t v10 = v143;
        if (v11 - 1 != v143) {
          *uint64_t v143 = *v36;
        }
        *uint64_t v36 = v19;
        if (v23 >= v24) {
          break;
        }
LABEL_26:
        BOOL result = sub_1CC4E8110(v143, v11 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v37 = sub_1CC4E8BF8(v143, v11 - 1, a3);
      BOOL result = sub_1CC4E8BF8(v11, a2, a3);
      if (result) {
        break;
      }
      if (!v37) {
        goto LABEL_26;
      }
    }
    a2 = v11 - 1;
    if (!v37) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CC4E8BF8(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v20 = *(a2 - 1);
      uint64_t v24 = *a1;
      uint64_t v25 = v20;
      unsigned int v21 = (uint64_t *)(*a3 + 576);
      unsigned int v22 = *((_DWORD *)sub_1CD41D7A0(v21, &v25) + 2);
      if (v22 < *((_DWORD *)sub_1CD41D7A0(v21, &v24) + 2))
      {
        uint64_t v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      sub_1CC4E7BC8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC4E7FD0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CC4E7A38(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CC4E7BC8(a1, a1 + 1, a1 + 2, a3);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v24 = *v8;
    uint64_t v25 = v12;
    uint64_t v13 = (uint64_t *)(*a3 + 576);
    unsigned int v14 = *((_DWORD *)sub_1CD41D7A0(v13, &v25) + 2);
    if (v14 < *((_DWORD *)sub_1CD41D7A0(v13, &v24) + 2))
    {
      uint64_t v15 = *v9;
      uint64_t v16 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16 + 24) = *(uint64_t *)((char *)a1 + v16 + 16);
        if (v16 == -16) {
          break;
        }
        uint64_t v24 = *(uint64_t *)((char *)a1 + v16 + 8);
        uint64_t v25 = v15;
        uint64_t v17 = (uint64_t *)(*a3 + 576);
        unsigned int v18 = *((_DWORD *)sub_1CD41D7A0(v17, &v25) + 2);
        v16 -= 8;
        if (v18 >= *((_DWORD *)sub_1CD41D7A0(v17, &v24) + 2))
        {
          uint64_t v19 = (uint64_t *)((char *)a1 + v16 + 24);
          goto LABEL_11;
        }
      }
      uint64_t v19 = a1;
LABEL_11:
      *uint64_t v19 = v15;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    BOOL result = 1;
    if (++v9 == a2) {
      return result;
    }
  }
}

int *sub_1CC4E8E60(int *result, int *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 5;
  if (result + 5 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    BOOL v5 = (unsigned int *)v4;
    uint64_t v4 = v2;
    unsigned int v6 = v5[5];
    unsigned int v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_20;
      }
      unsigned int v8 = v5[6];
      if (v8 >= v5[1]) {
        goto LABEL_20;
      }
    }
    else
    {
      unsigned int v8 = v5[6];
    }
    uint64_t v9 = *(void *)(v5 + 7);
    int v10 = v5[9];
    v5[5] = v7;
    v4[1] = v5[1];
    v4[2] = v5[2];
    *(void *)(v4 + 3) = *(void *)(v5 + 3);
    int v11 = (unsigned int *)result;
    if (v5 == (unsigned int *)result) {
      goto LABEL_19;
    }
    uint64_t v12 = v3;
    while (1)
    {
      unsigned int v13 = *(int *)((char *)result + v12 - 20);
      if (v6 < v13)
      {
        unsigned int v14 = *(int *)((char *)result + v12 - 16);
        goto LABEL_12;
      }
      if (v13 < v6)
      {
        int v11 = (unsigned int *)((char *)result + v12);
        goto LABEL_19;
      }
      unsigned int v14 = *(int *)((char *)result + v12 - 16);
      if (v8 >= v14) {
        break;
      }
LABEL_12:
      v5 -= 5;
      uint64_t v15 = (uint64_t)result + v12;
      *(_DWORD *)uint64_t v15 = v13;
      *(_DWORD *)(v15 + 4) = v14;
      *(void *)(v15 + 8) = *(void *)((char *)result + v12 - 12);
      *(_DWORD *)(v15 + 16) = *(int *)((char *)result + v12 - 4);
      v12 -= 20;
      if (!v12)
      {
        int v11 = (unsigned int *)result;
        goto LABEL_19;
      }
    }
    int v11 = v5;
LABEL_19:
    *int v11 = v6;
    v11[1] = v8;
    *((void *)v11 + 1) = v9;
    v11[4] = v10;
LABEL_20:
    uint64_t v2 = v4 + 5;
    v3 += 20;
  }
  while (v4 + 5 != a2);
  return result;
}

int *sub_1CC4E8F70(int *result, int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 5;
    if (result + 5 != a2)
    {
      for (unint64_t i = result + 2; ; i += 5)
      {
        uint64_t v4 = (unsigned int *)result;
        BOOL result = v2;
        unsigned int v5 = v4[5];
        unsigned int v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v6 >= v5)
        {
          unsigned int v7 = v4[6];
          if (v7 < v4[1]) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 5;
        if (result + 5 == a2) {
          return result;
        }
      }
      unsigned int v7 = v4[6];
LABEL_6:
      uint64_t v8 = *(void *)(v4 + 7);
      int v9 = v4[9];
      for (uint64_t j = i; ; j -= 5)
      {
        int v11 = *(j - 1);
        j[3] = v6;
        j[4] = v11;
        j[5] = *j;
        *((void *)j + 3) = *(void *)(j + 1);
        unsigned int v6 = *(j - 7);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 6))) {
          break;
        }
      }
      *(j - 2) = v5;
      *(j - 1) = v7;
      *(void *)uint64_t j = v8;
      j[2] = v9;
      goto LABEL_14;
    }
  }
  return result;
}

double sub_1CC4E902C(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    unsigned int v7 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v7) {
        return *(double *)&v6;
      }
      unsigned int v8 = a2[1];
      if (a3[1] >= v8) {
        return *(double *)&v6;
      }
    }
    else
    {
      unsigned int v8 = a2[1];
    }
    int v9 = a2[4];
    *a2 = v7;
    a2[1] = a3[1];
    *(void *)&long long v6 = *((void *)a2 + 1);
    a2[2] = a3[2];
    *(void *)(a2 + 3) = *(void *)(a3 + 3);
    *a3 = v3;
    a3[1] = v8;
    *((void *)a3 + 1) = v6;
    a3[4] = v9;
    unsigned int v10 = *a2;
    unsigned int v11 = *a1;
    if (*a2 >= *a1)
    {
      if (v11 < v10) {
        return *(double *)&v6;
      }
      unsigned int v12 = a1[1];
      if (a2[1] >= v12) {
        return *(double *)&v6;
      }
    }
    else
    {
      unsigned int v12 = a1[1];
    }
    int v18 = a1[4];
    *a1 = v10;
    a1[1] = a2[1];
    *(void *)&long long v6 = *((void *)a1 + 1);
    a1[2] = a2[2];
    *(void *)(a1 + 3) = *(void *)(a2 + 3);
    *a2 = v11;
    a2[1] = v12;
    *((void *)a2 + 1) = v6;
    a2[4] = v18;
    return *(double *)&v6;
  }
  unsigned int v5 = *a3;
  if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
  {
    *a1 = v5;
    long long v6 = *(_OWORD *)(a1 + 1);
    a1[1] = a3[1];
    a1[2] = a3[2];
    *(void *)(a1 + 3) = *(void *)(a3 + 3);
    *a3 = v4;
    *(_OWORD *)(a3 + 1) = v6;
  }
  else
  {
    unsigned int v13 = a1[1];
    int v14 = a1[2];
    int v15 = a1[3];
    int v16 = a1[4];
    *a1 = v3;
    a1[1] = a2[1];
    a1[2] = a2[2];
    *(void *)&long long v6 = *(void *)(a2 + 3);
    *(void *)(a1 + 3) = v6;
    *a2 = v4;
    a2[1] = v13;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v16;
    unsigned int v17 = *a3;
    if (*a3 < v4 || v4 >= v17 && a3[1] < v13)
    {
      *a2 = v17;
      a2[1] = a3[1];
      a2[2] = a3[2];
      *(void *)&long long v6 = *(void *)(a3 + 3);
      *(void *)(a2 + 3) = v6;
      *a3 = v4;
      a3[1] = v13;
      a3[2] = v14;
      a3[3] = v15;
      a3[4] = v16;
    }
  }
  return *(double *)&v6;
}

unsigned int *sub_1CC4E91E0(int *a1, unsigned int *a2)
{
  long long v2 = *(_OWORD *)a1;
  unsigned int v3 = *(a2 - 5);
  unsigned int v4 = *(_OWORD *)a1;
  if (v4 < v3 || v3 >= v4 && DWORD1(v2) < *(a2 - 4))
  {
    unsigned int v5 = (unsigned int *)(a1 + 5);
    unsigned int v6 = a1[5];
    if (v4 >= v6)
    {
      do
      {
        if (v6 >= v4 && DWORD1(v2) < v5[1]) {
          break;
        }
        unsigned int v7 = v5[5];
        v5 += 5;
        unsigned int v6 = v7;
      }
      while (v4 >= v7);
    }
  }
  else
  {
    unsigned int v5 = (unsigned int *)(a1 + 5);
    if (a1 + 5 < (int *)a2)
    {
      do
      {
        if (v4 < *v5 || *v5 >= v4 && DWORD1(v2) < v5[1]) {
          break;
        }
        v5 += 5;
      }
      while (v5 < a2);
    }
  }
  if (v5 < a2)
  {
    for (a2 -= 5; v4 < v3 || v3 >= v4 && DWORD1(v2) < a2[1]; a2 -= 5)
    {
      unsigned int v8 = *(a2 - 5);
      unsigned int v3 = v8;
    }
  }
  int v9 = a1[4];
  if (v5 < a2)
  {
    unsigned int v10 = *v5;
    unsigned int v11 = *a2;
    do
    {
      *unsigned int v5 = v11;
      long long v12 = *(_OWORD *)(v5 + 1);
      v5[1] = a2[1];
      void v5[2] = a2[2];
      *(void *)(v5 + 3) = *(void *)(a2 + 3);
      *a2 = v10;
      *(_OWORD *)(a2 + 1) = v12;
      do
      {
        unsigned int v13 = v5[5];
        v5 += 5;
        unsigned int v10 = v13;
      }
      while (v4 >= v13 && (v10 < v4 || DWORD1(v2) >= v5[1]));
      do
      {
        do
        {
          unsigned int v14 = *(a2 - 5);
          a2 -= 5;
          unsigned int v11 = v14;
        }
        while (v4 < v14);
      }
      while (v11 >= v4 && DWORD1(v2) < a2[1]);
    }
    while (v5 < a2);
  }
  if (v5 - 5 != (unsigned int *)a1)
  {
    *a1 = *(v5 - 5);
    a1[1] = *(v5 - 4);
    a1[2] = *(v5 - 3);
    *(void *)(a1 + 3) = *((void *)v5 - 1);
  }
  *(_OWORD *)(v5 - 5) = v2;
  *(v5 - 1) = v9;
  return v5;
}

unint64_t sub_1CC4E9378(long long *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  int v4 = *((_DWORD *)a1 + 4);
  unsigned int v5 = *a1;
  unsigned int v6 = HIDWORD(*(void *)a1);
  while (1)
  {
    unsigned int v7 = *(_DWORD *)((char *)a1 + v2 + 20);
    if (v7 >= v5 && (v5 < v7 || *(_DWORD *)((char *)a1 + v2 + 24) >= v6)) {
      break;
    }
    v2 += 20;
  }
  unint64_t v8 = (unint64_t)a1 + v2 + 20;
  if (v2)
  {
    do
    {
      unsigned int v10 = *(a2 - 5);
      a2 -= 5;
      unsigned int v9 = v10;
    }
    while (v10 >= v5 && (v5 < v9 || a2[1] >= v6));
  }
  else
  {
LABEL_16:
    if (v8 < (unint64_t)a2)
    {
      do
      {
        unsigned int v12 = *(a2 - 5);
        a2 -= 5;
        unsigned int v11 = v12;
        if (v12 < v5) {
          break;
        }
        if (v5 < v11) {
          goto LABEL_16;
        }
      }
      while (v8 < (unint64_t)a2 && a2[1] >= v6);
    }
  }
  if (v8 >= (unint64_t)a2)
  {
    unint64_t v14 = v8;
  }
  else
  {
    unsigned int v13 = *a2;
    unint64_t v14 = v8;
    int v15 = a2;
    do
    {
      *(_DWORD *)unint64_t v14 = v13;
      long long v16 = *(_OWORD *)(v14 + 4);
      *(_DWORD *)(v14 + 4) = v15[1];
      *(_DWORD *)(v14 + 8) = v15[2];
      *(void *)(v14 + 12) = *(void *)(v15 + 3);
      *int v15 = v7;
      *(_OWORD *)(v15 + 1) = v16;
      do
      {
        do
        {
          unsigned int v17 = *(_DWORD *)(v14 + 20);
          v14 += 20;
          unsigned int v7 = v17;
        }
        while (v17 < v5);
      }
      while (v5 >= v7 && *(_DWORD *)(v14 + 4) < v6);
      do
      {
        unsigned int v18 = *(v15 - 5);
        v15 -= 5;
        unsigned int v13 = v18;
      }
      while (v18 >= v5 && (v5 < v13 || v15[1] >= v6));
    }
    while (v14 < (unint64_t)v15);
  }
  if ((long long *)(v14 - 20) != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v14 - 20);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(v14 - 16);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v14 - 12);
    *(void *)((char *)a1 + 12) = *(void *)(v14 - 8);
  }
  *(_OWORD *)(v14 - 20) = v3;
  *(_DWORD *)(v14 - 4) = v4;
  return v14 - 20;
}

BOOL sub_1CC4E94F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = *(_DWORD *)(a2 - 20);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        unsigned int v8 = *(_DWORD *)(a1 + 4);
LABEL_30:
        int v24 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 16);
        uint64_t v25 = *(void *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 12);
        *(void *)(a1 + 12) = *(void *)(a2 - 8);
        *(_DWORD *)(a2 - 20) = v7;
        *(_DWORD *)(a2 - 16) = v8;
        *(void *)(a2 - 12) = v25;
        *(_DWORD *)(a2 - 4) = v24;
        return result;
      }
      if (v7 >= v6)
      {
        unsigned int v8 = *(_DWORD *)(a1 + 4);
        if (*(_DWORD *)(a2 - 16) < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3uLL:
      sub_1CC4E902C((unsigned int *)a1, (unsigned int *)(a1 + 20), (unsigned int *)(a2 - 20));
      return 1;
    case 4uLL:
      sub_1CC4E9764(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      sub_1CC4E98BC(a1, a1 + 20, a1 + 40, a1 + 60, (unsigned int *)(a2 - 20));
      return 1;
    default:
      uint64_t v9 = a1 + 40;
      sub_1CC4E902C((unsigned int *)a1, (unsigned int *)(a1 + 20), (unsigned int *)(a1 + 40));
      uint64_t v10 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
LABEL_6:
  unsigned int v13 = *(_DWORD *)v10;
  unsigned int v14 = *(_DWORD *)v9;
  if (*(_DWORD *)v10 >= *(_DWORD *)v9)
  {
    if (v14 < v13) {
      goto LABEL_21;
    }
    unsigned int v15 = *(_DWORD *)(v10 + 4);
    if (v15 >= *(_DWORD *)(v9 + 4)) {
      goto LABEL_21;
    }
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(v10 + 4);
  }
  uint64_t v16 = *(void *)(v10 + 8);
  int v17 = *(_DWORD *)(v10 + 16);
  *(_DWORD *)uint64_t v10 = v14;
  *(_DWORD *)(v10 + 4) = *(_DWORD *)(v9 + 4);
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v9 + 8);
  *(void *)(v10 + 12) = *(void *)(v9 + 12);
  uint64_t v18 = a1;
  if (v9 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v11;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    unsigned int v21 = *(_DWORD *)(a1 + v19 + 20);
    if (v13 >= v21)
    {
      if (v21 < v13)
      {
        uint64_t v18 = a1 + v19 + 40;
        goto LABEL_20;
      }
      unsigned int v22 = *(_DWORD *)(a1 + v19 + 24);
      if (v15 >= v22)
      {
        uint64_t v18 = v9;
LABEL_20:
        *(_DWORD *)uint64_t v18 = v13;
        *(_DWORD *)(v18 + 4) = v15;
        *(void *)(v18 + 8) = v16;
        *(_DWORD *)(v18 + 16) = v17;
        if (++v12 == 8) {
          return v10 + 20 == a2;
        }
LABEL_21:
        uint64_t v9 = v10;
        v11 += 20;
        v10 += 20;
        if (v10 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unsigned int v22 = *(_DWORD *)(v20 + 24);
    }
    v9 -= 20;
    *(_DWORD *)(v20 + 40) = v21;
    uint64_t v23 = a1 + v19;
    *(_DWORD *)(v23 + 44) = v22;
    *(void *)(v23 + 48) = *(void *)(a1 + v19 + 28);
    *(_DWORD *)(v23 + 56) = *(_DWORD *)(a1 + v19 + 36);
    v19 -= 20;
    if (v19 == -40)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

double sub_1CC4E9764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result = sub_1CC4E902C((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  unsigned int v9 = *(_DWORD *)a4;
  unsigned int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    unsigned int v11 = *(_DWORD *)(a3 + 4);
    if (*(_DWORD *)(a4 + 4) >= v11) {
      return result;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a3 + 4);
  }
  int v12 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)a3 = v9;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
  double result = *(double *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
  *(void *)(a3 + 12) = *(void *)(a4 + 12);
  *(_DWORD *)a4 = v10;
  *(_DWORD *)(a4 + 4) = v11;
  *(double *)(a4 + 8) = result;
  *(_DWORD *)(a4 + 16) = v12;
  unsigned int v13 = *(_DWORD *)a3;
  unsigned int v14 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    unsigned int v15 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)(a3 + 4) >= v15) {
      return result;
    }
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(a2 + 4);
  }
  int v16 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)a2 = v13;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  double result = *(double *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(void *)(a2 + 12) = *(void *)(a3 + 12);
  *(_DWORD *)a3 = v14;
  *(_DWORD *)(a3 + 4) = v15;
  *(double *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 16) = v16;
  unsigned int v17 = *(_DWORD *)a2;
  unsigned int v18 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unsigned int v19 = *(_DWORD *)(a1 + 4);
LABEL_15:
    int v20 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)a1 = v17;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    double result = *(double *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 12) = *(void *)(a2 + 12);
    *(_DWORD *)a2 = v18;
    *(_DWORD *)(a2 + 4) = v19;
    *(double *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 16) = v20;
    return result;
  }
  if (v18 >= v17)
  {
    unsigned int v19 = *(_DWORD *)(a1 + 4);
    if (*(_DWORD *)(a2 + 4) < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

void sub_1CC4E98BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  sub_1CC4E9764(a1, a2, a3, a4);
  unsigned int v10 = *a5;
  unsigned int v11 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v11 < v10) {
      return;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 4);
    if (a5[1] >= v12) {
      return;
    }
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a4 + 4);
  }
  unsigned int v13 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)a4 = v10;
  *(_DWORD *)(a4 + 4) = a5[1];
  uint64_t v14 = *(void *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = a5[2];
  *(void *)(a4 + 12) = *(void *)(a5 + 3);
  *a5 = v11;
  a5[1] = v12;
  *((void *)a5 + 1) = v14;
  a5[4] = v13;
  unsigned int v15 = *(_DWORD *)a4;
  unsigned int v16 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v16 < v15) {
      return;
    }
    unsigned int v17 = *(_DWORD *)(a3 + 4);
    if (*(_DWORD *)(a4 + 4) >= v17) {
      return;
    }
  }
  else
  {
    unsigned int v17 = *(_DWORD *)(a3 + 4);
  }
  int v18 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)a3 = v15;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
  uint64_t v19 = *(void *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
  *(void *)(a3 + 12) = *(void *)(a4 + 12);
  *(_DWORD *)a4 = v16;
  *(_DWORD *)(a4 + 4) = v17;
  *(void *)(a4 + 8) = v19;
  *(_DWORD *)(a4 + 16) = v18;
  unsigned int v20 = *(_DWORD *)a3;
  unsigned int v21 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v21 < v20) {
      return;
    }
    unsigned int v22 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)(a3 + 4) >= v22) {
      return;
    }
  }
  else
  {
    unsigned int v22 = *(_DWORD *)(a2 + 4);
  }
  int v23 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)a2 = v20;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  uint64_t v24 = *(void *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(void *)(a2 + 12) = *(void *)(a3 + 12);
  *(_DWORD *)a3 = v21;
  *(_DWORD *)(a3 + 4) = v22;
  *(void *)(a3 + 8) = v24;
  *(_DWORD *)(a3 + 16) = v23;
  unsigned int v25 = *(_DWORD *)a2;
  unsigned int v26 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unsigned int v27 = *(_DWORD *)(a1 + 4);
LABEL_9:
    int v28 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)a1 = v25;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    uint64_t v29 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 12) = *(void *)(a2 + 12);
    *(_DWORD *)a2 = v26;
    *(_DWORD *)(a2 + 4) = v27;
    *(void *)(a2 + 8) = v29;
    *(_DWORD *)(a2 + 16) = v28;
    return;
  }
  if (v26 >= v25)
  {
    unsigned int v27 = *(_DWORD *)(a1 + 4);
    if (*(_DWORD *)(a2 + 4) < v27) {
      goto LABEL_9;
    }
  }
}

unint64_t sub_1CC4E9A80(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = a2 - result;
    uint64_t v7 = (uint64_t)(a2 - result) / 20;
    if ((uint64_t)(a2 - result) >= 21)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      unsigned int v10 = (unsigned int *)(result + 20 * v8);
      do
      {
        double result = sub_1CC4E9DA8(v5, v7, v10);
        v10 -= 5;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      for (uint64_t i = v4; i != a3; i += 20)
      {
        unsigned int v12 = *(_DWORD *)i;
        unsigned int v13 = *(_DWORD *)v5;
        if (*(_DWORD *)i >= *(_DWORD *)v5)
        {
          if (v13 < v12) {
            continue;
          }
          unsigned int v14 = *(_DWORD *)(i + 4);
          if (v14 >= *(_DWORD *)(v5 + 4)) {
            continue;
          }
        }
        else
        {
          unsigned int v14 = *(_DWORD *)(i + 4);
        }
        int v15 = *(_DWORD *)(i + 16);
        *(_DWORD *)uint64_t i = v13;
        *(_DWORD *)(i + 4) = *(_DWORD *)(v5 + 4);
        uint64_t v16 = *(void *)(i + 8);
        *(_DWORD *)(i + 8) = *(_DWORD *)(v5 + 8);
        *(void *)(i + 12) = *(void *)(v5 + 12);
        *(_DWORD *)uint64_t v5 = v12;
        *(_DWORD *)(v5 + 4) = v14;
        *(void *)(v5 + 8) = v16;
        *(_DWORD *)(v5 + 16) = v15;
        double result = sub_1CC4E9DA8(v5, v7, (unsigned int *)v5);
      }
    }
    if (v6 >= 21)
    {
      while (1)
      {
        uint64_t v17 = 0;
        unsigned int v18 = *(_DWORD *)v5;
        int v19 = *(_DWORD *)(v5 + 4);
        int v20 = *(_DWORD *)(v5 + 8);
        int v21 = *(_DWORD *)(v5 + 12);
        int v22 = *(_DWORD *)(v5 + 16);
        uint64_t v23 = v7 - 2;
        if (v7 < 2) {
          uint64_t v23 = v7 - 1;
        }
        double result = v23 >> 1;
        uint64_t v24 = v5;
        do
        {
          uint64_t v25 = v24;
          v24 += 20 * v17 + 20;
          uint64_t v26 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v27 = v26 + 2;
          if (v27 < v7)
          {
            unsigned int v28 = *(_DWORD *)(v24 + 20);
            if (*(_DWORD *)v24 < v28 || v28 >= *(_DWORD *)v24 && *(_DWORD *)(v24 + 4) < *(_DWORD *)(v24 + 24))
            {
              v24 += 20;
              uint64_t v17 = v27;
            }
          }
          *(_DWORD *)uint64_t v25 = *(_DWORD *)v24;
          *(_DWORD *)(v25 + 4) = *(_DWORD *)(v24 + 4);
          *(_DWORD *)(v25 + 8) = *(_DWORD *)(v24 + 8);
          *(void *)(v25 + 12) = *(void *)(v24 + 12);
        }
        while (v17 <= (uint64_t)result);
        if (v24 == v4 - 20) {
          break;
        }
        *(_DWORD *)uint64_t v24 = *(_DWORD *)(v4 - 20);
        *(_DWORD *)(v24 + 4) = *(_DWORD *)(v4 - 16);
        double result = *(unsigned int *)(v4 - 12);
        *(_DWORD *)(v24 + 8) = result;
        *(void *)(v24 + 12) = *(void *)(v4 - 8);
        *(_DWORD *)(v4 - 20) = v18;
        *(_DWORD *)(v4 - 16) = v19;
        *(_DWORD *)(v4 - 12) = v20;
        *(_DWORD *)(v4 - 8) = v21;
        *(_DWORD *)(v4 - 4) = v22;
        uint64_t v29 = v24 - v5 + 20;
        if (v29 >= 21)
        {
          double result = v29 / 0x14uLL - 2;
          unint64_t v30 = result >> 1;
          unint64_t v31 = v5 + 20 * (result >> 1);
          unsigned int v32 = *(_DWORD *)v31;
          unsigned int v33 = *(_DWORD *)v24;
          if (*(_DWORD *)v31 >= *(_DWORD *)v24)
          {
            if (v33 < v32) {
              goto LABEL_39;
            }
            unsigned int v34 = *(_DWORD *)(v24 + 4);
            if (*(_DWORD *)(v31 + 4) >= v34) {
              goto LABEL_39;
            }
          }
          else
          {
            unsigned int v34 = *(_DWORD *)(v24 + 4);
          }
          uint64_t v35 = *(void *)(v24 + 8);
          int v22 = *(_DWORD *)(v24 + 16);
          *(_DWORD *)uint64_t v24 = v32;
          *(_DWORD *)(v24 + 4) = *(_DWORD *)(v31 + 4);
          uint64_t v36 = v5 + 20 * v30;
          *(_DWORD *)(v24 + 8) = *(_DWORD *)(v36 + 8);
          *(void *)(v24 + 12) = *(void *)(v36 + 12);
          if (result >= 2)
          {
            while (1)
            {
              double result = v30 - 1;
              unint64_t v30 = (v30 - 1) >> 1;
              uint64_t v24 = v5 + 20 * v30;
              unsigned int v37 = *(_DWORD *)v24;
              if (*(_DWORD *)v24 >= v33)
              {
                if (v33 < v37) {
                  break;
                }
                unsigned int v38 = *(_DWORD *)(v24 + 4);
                if (v38 >= v34) {
                  break;
                }
              }
              else
              {
                unsigned int v38 = *(_DWORD *)(v24 + 4);
              }
              *(_DWORD *)unint64_t v31 = v37;
              *(_DWORD *)(v31 + 4) = v38;
              uint64_t v39 = v5 + 20 * v30;
              *(_DWORD *)(v31 + 8) = *(_DWORD *)(v39 + 8);
              *(void *)(v31 + 12) = *(void *)(v39 + 12);
              unint64_t v31 = v39;
              if (result <= 1) {
                goto LABEL_37;
              }
            }
          }
          uint64_t v24 = v31;
LABEL_37:
          *(_DWORD *)uint64_t v24 = v33;
          *(_DWORD *)(v24 + 4) = v34;
          *(void *)(v24 + 8) = v35;
          goto LABEL_38;
        }
LABEL_39:
        v4 -= 20;
        if (v7-- <= 2) {
          return result;
        }
      }
      *(_DWORD *)uint64_t v24 = v18;
      *(_DWORD *)(v24 + 4) = v19;
      *(_DWORD *)(v24 + 8) = v20;
      *(_DWORD *)(v24 + 12) = v21;
LABEL_38:
      *(_DWORD *)(v24 + 16) = v22;
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t sub_1CC4E9DA8(uint64_t result, uint64_t a2, unsigned int *a3)
{
  if (a2 >= 2)
  {
    int64_t v3 = (unint64_t)(a2 - 2) >> 1;
    if (v3 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a3 - result) >> 2)))
    {
      int64_t v4 = (0x999999999999999ALL * (((uint64_t)a3 - result) >> 2)) | 1;
      uint64_t v5 = (unsigned int *)(result + 20 * v4);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a3 - result) >> 2) + 2) < a2)
      {
        unsigned int v6 = v5[5];
        if (*v5 < v6 || v6 >= *v5 && v5[1] < v5[6])
        {
          v5 += 5;
          int64_t v4 = 0x999999999999999ALL * (((uint64_t)a3 - result) >> 2) + 2;
        }
      }
      unsigned int v7 = *v5;
      unsigned int v8 = *a3;
      if (*v5 >= *a3)
      {
        if (v8 >= v7)
        {
          unsigned int v9 = a3[1];
          if (v5[1] < v9) {
            return result;
          }
        }
        else
        {
          unsigned int v9 = a3[1];
        }
        uint64_t v10 = *((void *)a3 + 1);
        unsigned int v11 = a3[4];
        *a3 = v7;
        a3[1] = v5[1];
        a3[2] = v5[2];
        *(void *)(a3 + 3) = *(void *)(v5 + 3);
        if (v3 >= v4)
        {
          while (1)
          {
            uint64_t v13 = 2 * v4;
            int64_t v4 = (2 * v4) | 1;
            unsigned int v12 = (unsigned int *)(result + 20 * v4);
            int64_t v14 = v13 + 2;
            if (v14 < a2)
            {
              unsigned int v15 = v12[5];
              if (*v12 < v15 || v15 >= *v12 && v12[1] < v12[6])
              {
                v12 += 5;
                int64_t v4 = v14;
              }
            }
            unsigned int v16 = *v12;
            if (*v12 < v8 || v8 >= v16 && v12[1] < v9) {
              break;
            }
            *uint64_t v5 = v16;
            v5[1] = v12[1];
            void v5[2] = v12[2];
            *(void *)(v5 + 3) = *(void *)(v12 + 3);
            uint64_t v5 = v12;
            if (v3 < v4) {
              goto LABEL_23;
            }
          }
        }
        unsigned int v12 = v5;
LABEL_23:
        *unsigned int v12 = v8;
        v12[1] = v9;
        *((void *)v12 + 1) = v10;
        uint64_t v12[4] = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1CC4E9F38(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 + a2 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    int64_t v4 = (_DWORD *)(*(void *)result + 4 * v3);
    uint64_t v5 = a2;
    do
    {
      *v4++ = a3;
      --v5;
    }
    while (v5);
    LODWORD(v3) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v3 + a2;
  return result;
}

unsigned int *sub_1CC4E9FC0(unsigned int *result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = (uint64_t)(a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unsigned int v41 = *(_DWORD *)(a2 - 16);
                unsigned int v42 = *(_DWORD *)v10;
                if (v41 < *(_DWORD *)v10)
                {
                  *(_DWORD *)unint64_t v10 = v41;
                  *(_DWORD *)(a2 - 16) = v42;
                  uint64_t v43 = *(void *)(v10 + 8);
                  *(void *)(v10 + 8) = *(void *)(a2 - 8);
                  *(void *)(a2 - 8) = v43;
                }
                break;
              case 3:
                double result = sub_1CC4EA770((unsigned int *)v10, (unsigned int *)(v10 + 16), (unsigned int *)(a2 - 16));
                break;
              case 4:
                double result = sub_1CC4EAA60(v10, v10 + 16, v10 + 32, a2 - 16);
                break;
              case 5:
                double result = sub_1CC4EAA60(v10, v10 + 16, v10 + 32, v10 + 48);
                unsigned int v44 = *(_DWORD *)(a2 - 16);
                unsigned int v45 = *(_DWORD *)(v10 + 48);
                if (v44 < v45)
                {
                  *(_DWORD *)(v10 + 48) = v44;
                  *(_DWORD *)(a2 - 16) = v45;
                  uint64_t v46 = *(void *)(v10 + 56);
                  *(void *)(v10 + 56) = *(void *)(a2 - 8);
                  *(void *)(a2 - 8) = v46;
                  unsigned int v47 = *(_DWORD *)(v10 + 48);
                  unsigned int v48 = *(_DWORD *)(v10 + 32);
                  if (v47 < v48)
                  {
                    *(_DWORD *)(v10 + 32) = v47;
                    *(_DWORD *)(v10 + 48) = v48;
                    uint64_t v49 = *(void *)(v10 + 40);
                    uint64_t v50 = *(void *)(v10 + 56);
                    *(void *)(v10 + 40) = v50;
                    *(void *)(v10 + 56) = v49;
                    unsigned int v51 = *(_DWORD *)(v10 + 16);
                    if (v47 < v51)
                    {
                      *(_DWORD *)(v10 + 16) = v47;
                      *(_DWORD *)(v10 + 32) = v51;
                      uint64_t v52 = *(void *)(v10 + 24);
                      *(void *)(v10 + 24) = v50;
                      *(void *)(v10 + 40) = v52;
                      unsigned int v53 = *(_DWORD *)v10;
                      if (v47 < *(_DWORD *)v10)
                      {
                        *(_DWORD *)unint64_t v10 = v47;
                        *(_DWORD *)(v10 + 16) = v53;
                        uint64_t v54 = *(void *)(v10 + 8);
                        *(void *)(v10 + 8) = v50;
                        *(void *)(v10 + 24) = v54;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            unint64_t v55 = v10 + 16;
            BOOL v57 = v10 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                unint64_t v59 = v10;
                do
                {
                  unint64_t v60 = v55;
                  unsigned int v61 = *(_DWORD *)(v59 + 16);
                  unsigned int v62 = *(_DWORD *)v59;
                  if (v61 < *(_DWORD *)v59)
                  {
                    uint64_t v63 = *(void *)(v59 + 24);
                    uint64_t v64 = v58;
                    while (1)
                    {
                      uint64_t v65 = v10 + v64;
                      *(_DWORD *)(v65 + 16) = v62;
                      *(void *)(v65 + 24) = *(void *)(v10 + v64 + 8);
                      if (!v64) {
                        break;
                      }
                      unsigned int v62 = *(_DWORD *)(v65 - 16);
                      v64 -= 16;
                      if (v61 >= v62)
                      {
                        uint64_t v66 = v10 + v64 + 16;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v66 = v10;
LABEL_84:
                    *(_DWORD *)uint64_t v66 = v61;
                    *(void *)(v66 + 8) = v63;
                  }
                  unint64_t v55 = v60 + 16;
                  v58 += 16;
                  unint64_t v59 = v60;
                }
                while (v60 + 16 != a2);
              }
            }
            else if (!v57)
            {
              uint64_t v95 = (void *)(v10 + 24);
              do
              {
                unint64_t v96 = v55;
                unsigned int v97 = *(_DWORD *)(v9 + 16);
                unsigned int v98 = *(_DWORD *)v9;
                if (v97 < *(_DWORD *)v9)
                {
                  uint64_t v99 = *(void *)(v9 + 24);
                  unint64_t v100 = v95;
                  do
                  {
                    unsigned int v101 = v100;
                    *((_DWORD *)v100 - 2) = v98;
                    uint64_t v102 = *(v100 - 2);
                    v100 -= 2;
                    *unsigned int v101 = v102;
                    unsigned int v98 = *((_DWORD *)v101 - 10);
                  }
                  while (v97 < v98);
                  *((_DWORD *)v100 - 2) = v97;
                  *unint64_t v100 = v99;
                }
                unint64_t v55 = v96 + 16;
                v95 += 2;
                unint64_t v9 = v96;
              }
              while (v96 + 16 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v67 = (unint64_t)(v12 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = (2 * v68) | 1;
                  unint64_t v71 = v10 + 16 * v70;
                  if (2 * v69 + 2 < v12)
                  {
                    unsigned int v73 = *(_DWORD *)(v71 + 16);
                    BOOL v72 = *(_DWORD *)v71 >= v73;
                    if (*(_DWORD *)v71 > v73) {
                      unsigned int v73 = *(_DWORD *)v71;
                    }
                    if (!v72)
                    {
                      v71 += 16;
                      uint64_t v70 = 2 * v69 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v73 = *(_DWORD *)v71;
                  }
                  unint64_t v74 = v10 + 16 * v69;
                  unsigned int v75 = *(_DWORD *)v74;
                  if (v73 >= *(_DWORD *)v74)
                  {
                    uint64_t v76 = *(void *)(v74 + 8);
                    do
                    {
                      unint64_t v77 = v74;
                      unint64_t v74 = v71;
                      *(_DWORD *)unint64_t v77 = v73;
                      *(void *)(v77 + 8) = *(void *)(v71 + 8);
                      if (v67 < v70) {
                        break;
                      }
                      uint64_t v78 = (2 * v70) | 1;
                      unint64_t v71 = v10 + 16 * v78;
                      uint64_t v70 = 2 * v70 + 2;
                      if (v70 < v12)
                      {
                        unsigned int v73 = *(_DWORD *)v71;
                        double result = (unsigned int *)(v71 + 16);
                        unsigned int v79 = *(_DWORD *)(v71 + 16);
                        if (*(_DWORD *)v71 <= v79) {
                          unsigned int v73 = *(_DWORD *)(v71 + 16);
                        }
                        if (*(_DWORD *)v71 >= v79) {
                          uint64_t v70 = v78;
                        }
                        else {
                          v71 += 16;
                        }
                      }
                      else
                      {
                        unsigned int v73 = *(_DWORD *)v71;
                        uint64_t v70 = v78;
                      }
                    }
                    while (v73 >= v75);
                    *(_DWORD *)unint64_t v74 = v75;
                    *(void *)(v74 + 8) = v76;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              do
              {
                uint64_t v80 = 0;
                unsigned int v81 = *(_DWORD *)v10;
                uint64_t v82 = *(void *)(v10 + 8);
                unint64_t v83 = v10;
                do
                {
                  uint64_t v84 = v83 + 16 * v80 + 16;
                  uint64_t v85 = (2 * v80) | 1;
                  uint64_t v80 = 2 * v80 + 2;
                  if (v80 < v12)
                  {
                    unsigned int v86 = *(_DWORD *)v84;
                    double result = (unsigned int *)*(unsigned int *)(v84 + 16);
                    if (*(_DWORD *)v84 <= result) {
                      unsigned int v86 = *(_DWORD *)(v84 + 16);
                    }
                    if (*(_DWORD *)v84 >= result) {
                      uint64_t v80 = v85;
                    }
                    else {
                      v84 += 16;
                    }
                  }
                  else
                  {
                    unsigned int v86 = *(_DWORD *)v84;
                    uint64_t v80 = v85;
                  }
                  *(_DWORD *)unint64_t v83 = v86;
                  *(void *)(v83 + 8) = *(void *)(v84 + 8);
                  unint64_t v83 = v84;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v84 == a2 - 16)
                {
                  *(_DWORD *)uint64_t v84 = v81;
                  *(void *)(v84 + 8) = v82;
                }
                else
                {
                  *(_DWORD *)uint64_t v84 = *(_DWORD *)(a2 - 16);
                  *(void *)(v84 + 8) = *(void *)(a2 - 8);
                  *(_DWORD *)(a2 - 16) = v81;
                  *(void *)(a2 - 8) = v82;
                  uint64_t v87 = v84 - v10 + 16;
                  if (v87 >= 17)
                  {
                    unint64_t v88 = (((unint64_t)v87 >> 4) - 2) >> 1;
                    uint64_t v89 = v10 + 16 * v88;
                    int v90 = *(_DWORD *)v89;
                    unsigned int v91 = *(_DWORD *)v84;
                    if (*(_DWORD *)v89 < *(_DWORD *)v84)
                    {
                      uint64_t v92 = *(void *)(v84 + 8);
                      do
                      {
                        uint64_t v93 = v84;
                        uint64_t v84 = v89;
                        *(_DWORD *)uint64_t v93 = v90;
                        *(void *)(v93 + 8) = *(void *)(v89 + 8);
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        uint64_t v89 = v10 + 16 * v88;
                        int v90 = *(_DWORD *)v89;
                      }
                      while (*(_DWORD *)v89 < v91);
                      *(_DWORD *)uint64_t v84 = v91;
                      *(void *)(v84 + 8) = v92;
                    }
                  }
                }
                a2 -= 16;
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 16 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 >= 0x801)
          {
            sub_1CC4EA770((unsigned int *)v9, (unsigned int *)(v9 + 16 * ((unint64_t)v12 >> 1)), (unsigned int *)(a2 - 16));
            sub_1CC4EA770((unsigned int *)(v9 + 16), (unsigned int *)(v14 - 16), (unsigned int *)(a2 - 32));
            sub_1CC4EA770((unsigned int *)(v9 + 32), (unsigned int *)(v9 + 16 + 16 * v13), (unsigned int *)(a2 - 48));
            double result = sub_1CC4EA770((unsigned int *)(v14 - 16), (unsigned int *)v14, (unsigned int *)(v9 + 16 + 16 * v13));
            unsigned int v15 = *(_DWORD *)v9;
            *(_DWORD *)unint64_t v9 = *(_DWORD *)v14;
            *(_DWORD *)unint64_t v14 = v15;
            uint64_t v16 = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = *(void *)(v14 + 8);
            *(void *)(v14 + 8) = v16;
          }
          else
          {
            double result = sub_1CC4EA770((unsigned int *)(v9 + 16 * ((unint64_t)v12 >> 1)), (unsigned int *)v9, (unsigned int *)(a2 - 16));
          }
          --a3;
          unsigned int v17 = *(_DWORD *)v9;
          if ((a4 & 1) != 0 || *(_DWORD *)(v9 - 16) < v17) {
            break;
          }
          if (v17 >= *(_DWORD *)(a2 - 16))
          {
            unint64_t v32 = v9 + 16;
            do
            {
              unint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              v32 += 16;
            }
            while (v17 >= *(_DWORD *)v10);
          }
          else
          {
            unint64_t v10 = v9;
            do
            {
              unsigned int v31 = *(_DWORD *)(v10 + 16);
              v10 += 16;
            }
            while (v17 >= v31);
          }
          unint64_t v33 = a2;
          if (v10 < a2)
          {
            unint64_t v33 = a2;
            do
            {
              unsigned int v34 = *(_DWORD *)(v33 - 16);
              v33 -= 16;
            }
            while (v17 < v34);
          }
          uint64_t v35 = *(void *)(v9 + 8);
          if (v10 < v33)
          {
            unsigned int v36 = *(_DWORD *)v10;
            unsigned int v37 = *(_DWORD *)v33;
            do
            {
              *(_DWORD *)unint64_t v10 = v37;
              *(_DWORD *)unint64_t v33 = v36;
              uint64_t v38 = *(void *)(v10 + 8);
              *(void *)(v10 + 8) = *(void *)(v33 + 8);
              *(void *)(v33 + 8) = v38;
              do
              {
                unsigned int v39 = *(_DWORD *)(v10 + 16);
                v10 += 16;
                unsigned int v36 = v39;
              }
              while (v17 >= v39);
              do
              {
                unsigned int v40 = *(_DWORD *)(v33 - 16);
                v33 -= 16;
                unsigned int v37 = v40;
              }
              while (v17 < v40);
            }
            while (v10 < v33);
          }
          BOOL v4 = v10 - 16 >= v9;
          BOOL v5 = v10 - 16 == v9;
          if (v10 - 16 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
            *(void *)(v9 + 8) = *(void *)(v10 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v10 - 16) = v17;
          *(void *)(v10 - 8) = v35;
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)(v9 + 8);
        do
        {
          unsigned int v20 = *(_DWORD *)(v9 + v18 + 16);
          v18 += 16;
        }
        while (v20 < v17);
        unint64_t v21 = v9 + v18;
        int v22 = (unsigned int *)a2;
        if (v18 == 16)
        {
          int v22 = (unsigned int *)a2;
          do
          {
            if (v21 >= (unint64_t)v22) {
              break;
            }
            unsigned int v24 = *(v22 - 4);
            v22 -= 4;
          }
          while (v24 >= v17);
        }
        else
        {
          do
          {
            unsigned int v23 = *(v22 - 4);
            v22 -= 4;
          }
          while (v23 >= v17);
        }
        if (v21 >= (unint64_t)v22)
        {
          unint64_t v10 = v9 + v18;
        }
        else
        {
          unsigned int v25 = *v22;
          unint64_t v10 = v9 + v18;
          uint64_t v26 = v22;
          do
          {
            *(_DWORD *)unint64_t v10 = v25;
            *uint64_t v26 = v20;
            uint64_t v27 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *((void *)v26 + 1);
            *((void *)v26 + 1) = v27;
            do
            {
              unsigned int v28 = *(_DWORD *)(v10 + 16);
              v10 += 16;
              unsigned int v20 = v28;
            }
            while (v28 < v17);
            do
            {
              unsigned int v29 = *(v26 - 4);
              v26 -= 4;
              unsigned int v25 = v29;
            }
            while (v29 >= v17);
          }
          while (v10 < (unint64_t)v26);
        }
        if (v10 - 16 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
          *(void *)(v9 + 8) = *(void *)(v10 - 8);
        }
        *(_DWORD *)(v10 - 16) = v17;
        *(void *)(v10 - 8) = v19;
        if (v21 >= (unint64_t)v22) {
          break;
        }
LABEL_33:
        double result = (unsigned int *)sub_1CC4E9FC0(v9, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = sub_1CC4EA830(v9, v10 - 16);
      double result = (unsigned int *)sub_1CC4EA830(v10, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 16;
    if (!v30) {
      continue;
    }
    return result;
  }
}

unsigned int *sub_1CC4EA770(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *result;
  unsigned int v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      uint64_t v7 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v7;
      unsigned int v8 = *result;
      if (*a2 < *result)
      {
        void *result = *a2;
        *a2 = v8;
        uint64_t v9 = *((void *)result + 1);
        *((void *)result + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v9;
      }
    }
  }
  else if (v5 >= v3)
  {
    void *result = v3;
    *a2 = v4;
    uint64_t v10 = *((void *)result + 1);
    *((void *)result + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v10;
    if (*a3 < v4)
    {
      *a2 = *a3;
      *a3 = v4;
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v10;
    }
  }
  else
  {
    void *result = v5;
    *a3 = v4;
    uint64_t v6 = *((void *)result + 1);
    *((void *)result + 1) = *((void *)a3 + 1);
    *((void *)a3 + 1) = v6;
  }
  return result;
}

BOOL sub_1CC4EA830(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 16);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        uint64_t v8 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      sub_1CC4EA770((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      sub_1CC4EAA60(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1CC4EAA60(a1, a1 + 16, a1 + 32, a1 + 48);
      unsigned int v19 = *(_DWORD *)(a2 - 16);
      unsigned int v20 = *(_DWORD *)(a1 + 48);
      if (v19 < v20)
      {
        *(_DWORD *)(a1 + 48) = v19;
        *(_DWORD *)(a2 - 16) = v20;
        uint64_t v21 = *(void *)(a1 + 56);
        *(void *)(a1 + 56) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v21;
        unsigned int v22 = *(_DWORD *)(a1 + 48);
        unsigned int v23 = *(_DWORD *)(a1 + 32);
        if (v22 < v23)
        {
          *(_DWORD *)(a1 + 32) = v22;
          *(_DWORD *)(a1 + 48) = v23;
          uint64_t v24 = *(void *)(a1 + 40);
          uint64_t v25 = *(void *)(a1 + 56);
          *(void *)(a1 + 40) = v25;
          *(void *)(a1 + 56) = v24;
          unsigned int v26 = *(_DWORD *)(a1 + 16);
          if (v22 < v26)
          {
            *(_DWORD *)(a1 + 16) = v22;
            *(_DWORD *)(a1 + 32) = v26;
            uint64_t v27 = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = v25;
            *(void *)(a1 + 40) = v27;
            unsigned int v28 = *(_DWORD *)a1;
            if (v22 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v22;
              *(_DWORD *)(a1 + 16) = v28;
              uint64_t v29 = *(void *)(a1 + 8);
              *(void *)(a1 + 8) = v25;
              *(void *)(a1 + 24) = v29;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = (unsigned int *)(a1 + 32);
      sub_1CC4EA770((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *(_DWORD *)v10;
    unsigned int v14 = *v9;
    if (*(_DWORD *)v10 < *v9)
    {
      uint64_t v15 = *(void *)(v10 + 8);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_DWORD *)(v17 + 48) = v14;
        *(void *)(v17 + 56) = *(void *)(a1 + v16 + 40);
        if (v16 == -32) {
          break;
        }
        unsigned int v14 = *(_DWORD *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          uint64_t v18 = a1 + v16 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v18 = v13;
      *(void *)(v18 + 8) = v15;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = (unsigned int *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

unsigned int *sub_1CC4EAA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = sub_1CC4EA770((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  unsigned int v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v9;
    uint64_t v10 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v10;
    unsigned int v11 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v11;
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v12;
      unsigned int v13 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v13;
        uint64_t v14 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v14;
      }
    }
  }
  return result;
}

unsigned int *sub_1CC4EAB10(unsigned int *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  unsigned int v3 = result[1];
  unsigned int *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  unsigned int v4 = *a2;
  if (*result)
  {
    if ((v4 & 1) == 0)
    {
      unsigned int v6 = a2;
      goto LABEL_7;
    }
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (int *)&result[v9];
      unsigned int v11 = (int *)&a2[v9];
      unsigned int v12 = result[v9 + 2];
      unsigned int v13 = a2[v9 + 2];
      if (v12 > 0xFFFFFFFD || v13 > 0xFFFFFFFD)
      {
        v10[2] = v13;
        void v11[2] = v12;
        if (v12 <= 0xFFFFFFFD)
        {
          uint64_t v15 = (int *)&a2[v9];
          uint64_t v16 = (int *)&result[v9];
          goto LABEL_22;
        }
        if (v13 <= 0xFFFFFFFD)
        {
          uint64_t v15 = (int *)&result[v9];
          uint64_t v16 = (int *)&a2[v9];
LABEL_22:
          *((void *)v15 + 2) = *((void *)v16 + 2);
        }
      }
      else
      {
        uint64_t v17 = *((void *)v10 + 2);
        v10[2] = v13;
        *((void *)v10 + 2) = *((void *)v11 + 2);
        void v11[2] = v12;
        *((void *)v11 + 2) = v17;
      }
      v9 += 4;
      if (v9 == 16) {
        return result;
      }
    }
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)result + 1);
    *((void *)result + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  unsigned int v4 = *result;
  unsigned int v6 = result;
  BOOL result = a2;
LABEL_7:
  uint64_t v7 = 0;
  long long v18 = *(_OWORD *)(v6 + 2);
  *unsigned int v6 = v4 | 1;
  do
  {
    unsigned int v8 = result[v7 + 2];
    v6[v7 + 2] = v8;
    if (v8 <= 0xFFFFFFFD) {
      *(void *)&v6[v7 + 4] = *(void *)&result[v7 + 4];
    }
    v7 += 4;
  }
  while (v7 != 16);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v18;
  return result;
}

__n128 sub_1CC4EAC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    while (1)
    {
      sub_1CD46AEB4(a3, v5);
      uint64_t v6 = a3 + 48;
      *(_DWORD *)(a3 + 48) |= 1u;
      sub_1CD59CF18((int *)(a3 + 48));
      int v7 = *(_DWORD *)(v5 + 48);
      *(_DWORD *)(v5 + 48) = *(_DWORD *)(a3 + 48) & 0xFFFFFFFE | v7 & 1;
      int v8 = *(_DWORD *)(a3 + 52);
      *(_DWORD *)(a3 + 48) = v7 & 0xFFFFFFFE | *(_DWORD *)(a3 + 48) & 1;
      *(_DWORD *)(a3 + 52) = *(_DWORD *)(v5 + 52);
      *(_DWORD *)(v5 + 52) = v8;
      int v9 = *(_DWORD *)(a3 + 48);
      int v10 = *(_DWORD *)(v5 + 48);
      if (v9) {
        break;
      }
      uint64_t v11 = a3 + 48;
      uint64_t v6 = v5 + 48;
      if (v10) {
        goto LABEL_7;
      }
      uint64_t v12 = *(void *)(a3 + 56);
      *(void *)(a3 + 56) = *(void *)(v5 + 56);
      *(void *)(v5 + 56) = v12;
      LODWORD(v12) = *(_DWORD *)(a3 + 64);
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(v5 + 64);
      *(_DWORD *)(v5 + 64) = v12;
LABEL_15:
      __n128 result = *(__n128 *)(v5 + 440);
      *(_OWORD *)(a3 + 449) = *(_OWORD *)(v5 + 449);
      *(__n128 *)(a3 + 440) = result;
      v5 += 472;
      a3 += 472;
      if (v5 == a2) {
        return result;
      }
    }
    int v9 = *(_DWORD *)(v5 + 48);
    uint64_t v11 = v5 + 48;
    if ((v10 & 1) == 0)
    {
LABEL_7:
      uint64_t v13 = 0;
      long long v44 = *(_OWORD *)(v11 + 8);
      *(_DWORD *)uint64_t v11 = v9 | 1;
      do
      {
        uint64_t v14 = v11 + v13;
        long long v15 = *(_OWORD *)(v6 + v13 + 24);
        uint64_t v16 = *(void *)(v6 + v13 + 40);
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v6 + v13 + 8);
        *(void *)(v14 + 40) = v16;
        *(_OWORD *)(v14 + 24) = v15;
        if (*(void *)(v11 + v13 + 8)
          || *(unsigned char *)(v14 + 32) && *(_OWORD *)(v11 + v13 + 16) != 0
          || *(void *)(v14 + 40))
        {
          *(void *)(v14 + 48) = *(void *)(v6 + v13 + 48);
        }
        v13 += 48;
      }
      while (v13 != 384);
      *(_DWORD *)v6 &= ~1u;
      *(_OWORD *)(v6 + 8) = v44;
      goto LABEL_15;
    }
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = a3 + v18;
      unsigned int v20 = (void *)(a3 + v18 + 56);
      if (*v20) {
        goto LABEL_19;
      }
      int v22 = *(unsigned __int8 *)(v19 + 80);
      if (*(unsigned char *)(v19 + 80)) {
        break;
      }
      BOOL v21 = 0;
      if (*(void *)(v19 + 88)) {
        goto LABEL_20;
      }
LABEL_21:
      unsigned int v23 = (_OWORD *)(v5 + v18 + 56);
      if (!*(void *)v23)
      {
        uint64_t v31 = v5 + v18;
        if (*(unsigned char *)(v5 + v18 + 80))
        {
          if (*(_OWORD *)(v5 + v18 + 64) == 0)
          {
            BOOL v24 = *(void *)(v31 + 88) == 0;
            if (!v22) {
              goto LABEL_31;
            }
            goto LABEL_23;
          }
        }
        else if (!*(void *)(v31 + 88))
        {
          long long v39 = *(_OWORD *)v20;
          long long v40 = *(_OWORD *)(a3 + v18 + 72);
          uint64_t v41 = *(void *)(a3 + v18 + 88);
          uint64_t v42 = *(void *)(v5 + v18 + 88);
          long long v43 = *(_OWORD *)(v5 + v18 + 72);
          *(_OWORD *)unsigned int v20 = *v23;
          *(_OWORD *)(a3 + v18 + 72) = v43;
          *(void *)(a3 + v18 + 88) = v42;
          *(void *)(v5 + v18 + 88) = v41;
          *unsigned int v23 = v39;
          *(_OWORD *)(v5 + v18 + 72) = v40;
          if (!v22) {
            goto LABEL_36;
          }
LABEL_32:
          uint64_t v37 = v5 + v18;
          uint64_t v38 = a3 + v18;
LABEL_35:
          *(void *)(v37 + 96) = *(void *)(v38 + 96);
          goto LABEL_36;
        }
      }
      BOOL v24 = 0;
      if (!v22) {
        goto LABEL_31;
      }
LABEL_23:
      if (!v24)
      {
        uint64_t v25 = *(void *)(a3 + v18 + 88);
        long long v27 = *(_OWORD *)v20;
        long long v26 = *(_OWORD *)(a3 + v18 + 72);
        uint64_t v28 = *(void *)(a3 + v18 + 96);
        uint64_t v29 = *(void *)(v5 + v18 + 88);
        long long v30 = *(_OWORD *)(v5 + v18 + 72);
        *(_OWORD *)unsigned int v20 = *v23;
        *(_OWORD *)(a3 + v18 + 72) = v30;
        *(void *)(a3 + v18 + 88) = v29;
        *(void *)(a3 + v18 + 96) = *(void *)(v5 + v18 + 96);
        *unsigned int v23 = v27;
        *(_OWORD *)(v5 + v18 + 72) = v26;
        *(void *)(v5 + v18 + 88) = v25;
        *(void *)(v5 + v18 + 96) = v28;
        goto LABEL_36;
      }
LABEL_31:
      long long v32 = *(_OWORD *)v20;
      long long v33 = *(_OWORD *)(a3 + v18 + 72);
      uint64_t v34 = *(void *)(a3 + v18 + 88);
      uint64_t v35 = *(void *)(v5 + v18 + 88);
      long long v36 = *(_OWORD *)(v5 + v18 + 72);
      *(_OWORD *)unsigned int v20 = *v23;
      *(_OWORD *)(a3 + v18 + 72) = v36;
      *(void *)(a3 + v18 + 88) = v35;
      *(void *)(v5 + v18 + 88) = v34;
      *unsigned int v23 = v32;
      *(_OWORD *)(v5 + v18 + 72) = v33;
      if (v22) {
        goto LABEL_32;
      }
      if (!v24)
      {
        uint64_t v37 = a3 + v18;
        uint64_t v38 = v5 + v18;
        goto LABEL_35;
      }
LABEL_36:
      v18 += 48;
      if (v18 == 384) {
        goto LABEL_15;
      }
    }
    if (*(_OWORD *)(a3 + v18 + 64) == 0) {
      BOOL v21 = *(void *)(v19 + 88) == 0;
    }
    else {
LABEL_19:
    }
      BOOL v21 = 0;
LABEL_20:
    int v22 = !v21;
    goto LABEL_21;
  }
  return result;
}

void *sub_1CC4EAF5C(uint64_t a1, uint64_t a2)
{
  __n128 result = (void *)MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if (v5)
  {
    uint64_t v6 = operator new(48 * v5, (std::align_val_t)8uLL);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    int v7 = *(const void **)a2;
    size_t v8 = 48 * *(unsigned int *)(a1 + 16);
    return memcpy(v6, v7, v8);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

void *sub_1CC4EAFE4(void *result, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x222222222222223) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t v7 = 15 * a4;
    __n128 result = operator new(120 * a4);
    size_t v8 = result;
    *uint64_t v6 = result;
    v6[1] = result;
    void v6[2] = &result[v7];
    if (a2 != a3)
    {
      size_t v9 = 120 * ((a3 - a2 - 120) / 0x78uLL) + 120;
      __n128 result = memcpy(result, a2, v9);
      size_t v8 = (void *)((char *)v8 + v9);
    }
    v6[1] = v8;
  }
  return result;
}

void sub_1CC4EB09C(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  uint64_t v1 = *(void *)(a1 - 8);
  if (v1)
  {
    uint64_t v3 = 8 * v1;
    do
    {
      uint64_t v4 = *(void *)(v2 + v3);
      *(void *)(v2 + v3) = 0;
      if (v4) {
        MEMORY[0x1D25D9CB0](v4, 0x1000C8000313F17);
      }
      v3 -= 8;
    }
    while (v3);
  }

  JUMPOUT(0x1D25D9CB0);
}

uint64_t sub_1CC4EB120(uint64_t result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)result + 48 * v6;
    do
    {
      *(void *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      v7 += 48;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 || *((unsigned char *)a2 + 24) && *(long long *)((char *)a2 + 8) != 0 || *((void *)a2 + 4))
    {
      uint64_t v12 = 0;
      __n128 result = sub_1CC2E9354(*(void *)v5, *(_DWORD *)(v5 + 16), (uint64_t *)a2, &v12);
      uint64_t v9 = v12;
      long long v10 = *a2;
      long long v11 = a2[1];
      *(void *)(v12 + 32) = *((void *)a2 + 4);
      *(_OWORD *)uint64_t v9 = v10;
      *(_OWORD *)(v9 + 16) = v11;
      *(_DWORD *)(v9 + 40) = *((_DWORD *)a2 + 10);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

unsigned int *sub_1CC4EB200(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  if (a2 == result) {
    return a2;
  }
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)result) >> 3);
  while (1)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = &result[10 * (v3 >> 1)];
    unint64_t v6 = *v5;
    if (v6 >= a3) {
      break;
    }
    __n128 result = v5 + 10;
    unint64_t v4 = v3 + ~v4;
LABEL_7:
    unint64_t v3 = v4;
    if (!v4) {
      return result;
    }
  }
  if (v6 > a3)
  {
    a2 = &result[10 * (v3 >> 1)];
    goto LABEL_7;
  }
  if (v3 >= 2)
  {
    do
    {
      unint64_t v7 = v4 >> 1;
      uint64_t v8 = &result[10 * (v4 >> 1)];
      unsigned int v10 = *v8;
      uint64_t v9 = v8 + 10;
      v4 += ~(v4 >> 1);
      if (v10 < a3) {
        __n128 result = v9;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    while (v4);
  }
  long long v11 = v5 + 10;
  if (a2 != v11)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v11) >> 3);
    do
    {
      unint64_t v13 = v12 >> 1;
      uint64_t v14 = &v11[10 * (v12 >> 1)];
      unsigned int v16 = *v14;
      long long v15 = v14 + 10;
      v12 += ~(v12 >> 1);
      if (v16 > a3) {
        unint64_t v12 = v13;
      }
      else {
        long long v11 = v15;
      }
    }
    while (v12);
  }
  return result;
}

void *sub_1CC4EB2E8(uint64_t a1, uint64_t *a2, void *a3)
{
  BOOL v24 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 16 * v15;
      do
      {
        *uint64_t v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if (v6)
    {
      int v17 = 0;
      uint64_t v18 = (uint64_t *)(v9 + 8);
      uint64_t v19 = 16 * v6;
      do
      {
        uint64_t v20 = *(v18 - 1);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v25 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          BOOL v21 = v25;
          *uint64_t v25 = v20;
          v21[1] = *v18;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    uint64_t v14 = *(void **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v22 = *(unsigned int *)(a1 + 16);
    if (v22)
    {
      uint64_t v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 2;
      }
      while (2 * v22 != v23);
    }
  }
  sub_1CBB0BF40((uint64_t)v14, v22, *a2, &v24);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC4EB4AC(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CC4EB2E8(a1, a2, v7);
    *int v5 = *a2;
    v5[1] = 0;
  }
  return v5 + 1;
}

void *sub_1CC4EB514(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CC4EB2E8(a1, a2, v7);
    *int v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CC4EB57C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    LODWORD(v3) = (a3 - 1) & (37 * a1);
    char v4 = (uint64_t *)(a2 + 16 * v3);
    uint64_t v5 = *v4;
    if (*v4 == a1) {
      goto LABEL_8;
    }
    int v6 = 1;
    while (v5 != -1)
    {
      int v7 = v3 + v6++;
      uint64_t v3 = v7 & (a3 - 1);
      uint64_t v5 = *(void *)(a2 + 16 * v3);
      if (v5 == a1)
      {
        char v4 = (uint64_t *)(a2 + 16 * v3);
        goto LABEL_8;
      }
    }
  }
  char v4 = (uint64_t *)(a2 + 16 * a3);
LABEL_8:
  if (v4 == (uint64_t *)(a2 + 16 * a3)) {
    return 0;
  }
  else {
    return v4[1];
  }
}

void *sub_1CC4EB5F0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      int v12 = 0;
      int v13 = v10 - 1;
      uint64_t v14 = v4;
      do
      {
        uint64_t v15 = *v14;
        if ((unint64_t)*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v16 = (37 * v15) & v13;
          int v17 = (void *)(*(void *)a1 + 16 * v16);
          uint64_t v18 = *v17;
          if (v15 != *v17)
          {
            uint64_t v20 = 0;
            int v21 = 1;
            while (v18 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v18 == -2;
              }
              if (v22) {
                uint64_t v20 = v17;
              }
              unsigned int v23 = v16 + v21++;
              unsigned int v16 = v23 & v13;
              int v17 = (void *)(*(void *)a1 + 16 * (v23 & v13));
              uint64_t v18 = *v17;
              if (v15 == *v17) {
                goto LABEL_12;
              }
            }
            if (v20) {
              int v17 = v20;
            }
          }
LABEL_12:
          uint64_t v19 = v14[1];
          void *v17 = v15;
          v17[1] = v19;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 += 2;
      }
      while (v14 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 16);
  if (v24)
  {
    uint64_t v25 = 16 * v24;
    do
    {
      void *result = -1;
      result += 2;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_1CC4EB778(uint64_t result, uint64_t *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    char v139 = a2 - 1;
    uint64_t v11 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v12 = v11;
          uint64_t v13 = (char *)a2 - (char *)v11;
          uint64_t v14 = a2 - v11;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v134 = *v12;
                unsigned int v135 = (uint64_t *)(*a3 + 576);
                uint64_t v149 = **(void **)(*(a2 - 1) + 80);
                unsigned int v136 = *((_DWORD *)sub_1CD41D7A0(v135, &v149) + 2);
                uint64_t v148 = **(void **)(v134 + 80);
                __n128 result = (uint64_t)sub_1CD41D7A0(v135, &v148);
                if (v136 < *(_DWORD *)(result + 8))
                {
                  uint64_t v137 = *v12;
                  *int v12 = *(a2 - 1);
                  *(a2 - 1) = v137;
                }
                break;
              case 3:
                __n128 result = (uint64_t)sub_1CC4EC648(v12, v12 + 1, v139, a3);
                break;
              case 4:
                __n128 result = (uint64_t)sub_1CC4ECB00(v12, v12 + 1, v12 + 2, v139, a3);
                break;
              case 5:
                __n128 result = (uint64_t)sub_1CC4EC460(v12, v12 + 1, v12 + 2, v12 + 3, v139, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          unint64_t v147 = v12;
          if (v13 <= 191)
          {
            uint64_t v66 = v12 + 1;
            BOOL v68 = v12 == a2 || v66 == a2;
            if (a5)
            {
              if (!v68)
              {
                uint64_t v69 = 0;
                uint64_t v70 = v12;
                do
                {
                  uint64_t v72 = *v70;
                  uint64_t v71 = v70[1];
                  uint64_t v70 = v66;
                  unsigned int v73 = (uint64_t *)(*a3 + 576);
                  uint64_t v149 = **(void **)(v71 + 80);
                  unsigned int v74 = *((_DWORD *)sub_1CD41D7A0(v73, &v149) + 2);
                  uint64_t v148 = **(void **)(v72 + 80);
                  __n128 result = (uint64_t)sub_1CD41D7A0(v73, &v148);
                  if (v74 < *(_DWORD *)(result + 8))
                  {
                    uint64_t v75 = *v70;
                    uint64_t v76 = v69;
                    while (1)
                    {
                      *(uint64_t *)((char *)v12 + v76 + 8) = *(uint64_t *)((char *)v12 + v76);
                      if (!v76) {
                        break;
                      }
                      uint64_t v77 = *(uint64_t *)((char *)v12 + v76 - 8);
                      uint64_t v78 = (uint64_t *)(*a3 + 576);
                      uint64_t v149 = **(void **)(v75 + 80);
                      unsigned int v79 = a2;
                      unsigned int v80 = *((_DWORD *)sub_1CD41D7A0(v78, &v149) + 2);
                      uint64_t v148 = **(void **)(v77 + 80);
                      __n128 result = (uint64_t)sub_1CD41D7A0(v78, &v148);
                      v76 -= 8;
                      BOOL v5 = v80 >= *(_DWORD *)(result + 8);
                      a2 = v79;
                      int v12 = v147;
                      if (v5)
                      {
                        unsigned int v81 = (uint64_t *)((char *)v147 + v76 + 8);
                        goto LABEL_72;
                      }
                    }
                    unsigned int v81 = v12;
LABEL_72:
                    uint64_t *v81 = v75;
                  }
                  uint64_t v66 = v70 + 1;
                  v69 += 8;
                }
                while (v70 + 1 != a2);
              }
            }
            else if (!v68)
            {
              do
              {
                uint64_t v124 = *v12;
                uint64_t v123 = v12[1];
                int v12 = v66;
                uint64_t v125 = (uint64_t *)(*a3 + 576);
                uint64_t v149 = **(void **)(v123 + 80);
                unsigned int v126 = *((_DWORD *)sub_1CD41D7A0(v125, &v149) + 2);
                uint64_t v148 = **(void **)(v124 + 80);
                __n128 result = (uint64_t)sub_1CD41D7A0(v125, &v148);
                if (v126 < *(_DWORD *)(result + 8))
                {
                  uint64_t v127 = *v12;
                  uint64_t v128 = v12;
                  do
                  {
                    int v129 = v128;
                    uint64_t v130 = *--v128;
                    uint64_t *v129 = v130;
                    uint64_t v131 = *(v129 - 2);
                    unsigned int v132 = (uint64_t *)(*a3 + 576);
                    uint64_t v149 = **(void **)(v127 + 80);
                    unsigned int v133 = *((_DWORD *)sub_1CD41D7A0(v132, &v149) + 2);
                    uint64_t v148 = **(void **)(v131 + 80);
                    __n128 result = (uint64_t)sub_1CD41D7A0(v132, &v148);
                  }
                  while (v133 < *(_DWORD *)(result + 8));
                  *uint64_t v128 = v127;
                }
                uint64_t v66 = v12 + 1;
              }
              while (v12 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v82 = (unint64_t)(v14 - 2) >> 1;
              int64_t v83 = v82;
              uint64_t v141 = a2;
              do
              {
                int64_t v84 = v83;
                if (v82 >= v83)
                {
                  uint64_t v85 = (2 * v83) | 1;
                  unsigned int v86 = &v147[v85];
                  if (2 * v83 + 2 < v14)
                  {
                    uint64_t v87 = v86 + 1;
                    uint64_t v144 = v86[1];
                    unint64_t v88 = (uint64_t *)(*a3 + 576);
                    uint64_t v149 = **(void **)(*v86 + 80);
                    unsigned int v89 = *((_DWORD *)sub_1CD41D7A0(v88, &v149) + 2);
                    uint64_t v148 = **(void **)(v144 + 80);
                    unsigned int v90 = *((_DWORD *)sub_1CD41D7A0(v88, &v148) + 2);
                    unsigned int v86 = v89 >= v90 ? &v147[v85] : v87;
                    if (v89 < v90) {
                      uint64_t v85 = 2 * v84 + 2;
                    }
                  }
                  unsigned int v91 = &v147[v84];
                  uint64_t v92 = v86;
                  uint64_t v93 = *v91;
                  uint64_t v94 = (uint64_t *)(*a3 + 576);
                  uint64_t v149 = **(void **)(*v86 + 80);
                  unsigned int v95 = *((_DWORD *)sub_1CD41D7A0(v94, &v149) + 2);
                  uint64_t v148 = **(void **)(v93 + 80);
                  __n128 result = (uint64_t)sub_1CD41D7A0(v94, &v148);
                  a2 = v141;
                  if (v95 >= *(_DWORD *)(result + 8))
                  {
                    uint64_t v145 = *v91;
                    do
                    {
                      unint64_t v96 = v92;
                      *unsigned int v91 = *v92;
                      if (v82 < v85) {
                        break;
                      }
                      uint64_t v97 = 2 * v85;
                      uint64_t v85 = (2 * v85) | 1;
                      uint64_t v92 = &v147[v85];
                      uint64_t v98 = v97 + 2;
                      if (v97 + 2 < v14)
                      {
                        uint64_t v138 = v92[1];
                        uint64_t v99 = (uint64_t *)(*a3 + 576);
                        uint64_t v149 = **(void **)(*v92 + 80);
                        unsigned int v100 = *((_DWORD *)sub_1CD41D7A0(v99, &v149) + 2);
                        uint64_t v148 = **(void **)(v138 + 80);
                        if (v100 < *((_DWORD *)sub_1CD41D7A0(v99, &v148) + 2))
                        {
                          ++v92;
                          uint64_t v85 = v98;
                        }
                      }
                      unsigned int v101 = (uint64_t *)(*a3 + 576);
                      uint64_t v149 = **(void **)(*v92 + 80);
                      unsigned int v102 = *((_DWORD *)sub_1CD41D7A0(v101, &v149) + 2);
                      uint64_t v148 = **(void **)(v145 + 80);
                      __n128 result = (uint64_t)sub_1CD41D7A0(v101, &v148);
                      unsigned int v91 = v96;
                      BOOL v5 = v102 >= *(_DWORD *)(result + 8);
                      a2 = v141;
                    }
                    while (v5);
                    *unint64_t v96 = v145;
                  }
                }
                int64_t v83 = v84 - 1;
              }
              while (v84);
              uint64_t v103 = v147;
              do
              {
                uint64_t v104 = 0;
                uint64_t v140 = *v103;
                uint64_t v142 = a2;
                uint64_t v105 = v103;
                do
                {
                  uint64_t v106 = (uint64_t)&v105[v104 + 1];
                  uint64_t v107 = (2 * v104) | 1;
                  uint64_t v108 = 2 * v104 + 2;
                  if (v108 < v14)
                  {
                    uint64_t v146 = v105[v104 + 2];
                    char v109 = (uint64_t *)(*a3 + 576);
                    uint64_t v149 = **(void **)(*(void *)v106 + 80);
                    unsigned int v110 = *((_DWORD *)sub_1CD41D7A0(v109, &v149) + 2);
                    uint64_t v148 = **(void **)(v146 + 80);
                    __n128 result = (uint64_t)sub_1CD41D7A0(v109, &v148);
                    BOOL v5 = v110 >= *(_DWORD *)(result + 8);
                    uint64_t v103 = v147;
                    if (!v5)
                    {
                      v106 += 8;
                      uint64_t v107 = v108;
                    }
                  }
                  *uint64_t v105 = *(void *)v106;
                  uint64_t v105 = (void *)v106;
                  uint64_t v104 = v107;
                }
                while (v107 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                a2 = v142 - 1;
                if ((uint64_t *)v106 == v142 - 1)
                {
                  *(void *)uint64_t v106 = v140;
                }
                else
                {
                  *(void *)uint64_t v106 = *a2;
                  *a2 = v140;
                  uint64_t v111 = v106 - (void)v103 + 8;
                  if (v111 >= 9)
                  {
                    unint64_t v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                    int v113 = &v103[v112];
                    uint64_t v114 = *(void *)v106;
                    uint64_t v115 = (uint64_t *)(*a3 + 576);
                    uint64_t v149 = **(void **)(*v113 + 80);
                    unsigned int v116 = *((_DWORD *)sub_1CD41D7A0(v115, &v149) + 2);
                    uint64_t v117 = *(uint64_t **)(v114 + 80);
                    uint64_t v103 = v147;
                    uint64_t v148 = *v117;
                    __n128 result = (uint64_t)sub_1CD41D7A0(v115, &v148);
                    if (v116 < *(_DWORD *)(result + 8))
                    {
                      uint64_t v118 = *(void *)v106;
                      do
                      {
                        uint64_t v119 = v113;
                        *(void *)uint64_t v106 = *v113;
                        if (!v112) {
                          break;
                        }
                        unint64_t v112 = (v112 - 1) >> 1;
                        int v113 = &v103[v112];
                        uint64_t v120 = (uint64_t *)(*a3 + 576);
                        uint64_t v149 = **(void **)(*v113 + 80);
                        unsigned int v121 = *((_DWORD *)sub_1CD41D7A0(v120, &v149) + 2);
                        uint64_t v148 = **(void **)(v118 + 80);
                        __n128 result = (uint64_t)sub_1CD41D7A0(v120, &v148);
                        uint64_t v106 = (uint64_t)v119;
                        BOOL v5 = v121 >= *(_DWORD *)(result + 8);
                        uint64_t v103 = v147;
                      }
                      while (!v5);
                      uint64_t *v119 = v118;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          unsigned int v16 = &v12[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CC4EC648(v16, v12, v139, a3);
          }
          else
          {
            sub_1CC4EC648(v12, v16, v139, a3);
            sub_1CC4EC648(v12 + 1, v16 - 1, a2 - 2, a3);
            sub_1CC4EC648(v12 + 2, &v12[v15 + 1], a2 - 3, a3);
            sub_1CC4EC648(v16 - 1, v16, &v12[v15 + 1], a3);
            uint64_t v17 = *v12;
            *int v12 = *v16;
            *unsigned int v16 = v17;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v40 = *v12;
          uint64_t v41 = (uint64_t *)(*a3 + 576);
          uint64_t v149 = **(void **)(*(v12 - 1) + 80);
          unsigned int v42 = *((_DWORD *)sub_1CD41D7A0(v41, &v149) + 2);
          uint64_t v148 = **(void **)(v40 + 80);
          BOOL v5 = v42 >= *((_DWORD *)sub_1CD41D7A0(v41, &v148) + 2);
          int v12 = v147;
          if (!v5) {
            break;
          }
          uint64_t v43 = *v147;
          uint64_t v44 = *v139;
          unsigned int v45 = (uint64_t *)(*a3 + 576);
          uint64_t v149 = **(void **)(*v147 + 80);
          uint64_t v11 = v147;
          unsigned int v46 = *((_DWORD *)sub_1CD41D7A0(v45, &v149) + 2);
          uint64_t v148 = **(void **)(v44 + 80);
          __n128 result = (uint64_t)sub_1CD41D7A0(v45, &v148);
          if (v46 >= *(_DWORD *)(result + 8))
          {
            unsigned int v62 = v147 + 1;
            do
            {
              uint64_t v11 = v62;
              if (v62 >= a2) {
                break;
              }
              ++v62;
              uint64_t v63 = *v11;
              uint64_t v64 = (uint64_t *)(*a3 + 576);
              uint64_t v149 = **(void **)(v43 + 80);
              unsigned int v65 = *((_DWORD *)sub_1CD41D7A0(v64, &v149) + 2);
              uint64_t v148 = **(void **)(v63 + 80);
              __n128 result = (uint64_t)sub_1CD41D7A0(v64, &v148);
            }
            while (v65 >= *(_DWORD *)(result + 8));
          }
          else
          {
            do
            {
              uint64_t v47 = v11[1];
              ++v11;
              unsigned int v48 = (uint64_t *)(*a3 + 576);
              uint64_t v149 = **(void **)(v43 + 80);
              unsigned int v49 = *((_DWORD *)sub_1CD41D7A0(v48, &v149) + 2);
              uint64_t v148 = **(void **)(v47 + 80);
              __n128 result = (uint64_t)sub_1CD41D7A0(v48, &v148);
            }
            while (v49 >= *(_DWORD *)(result + 8));
          }
          uint64_t v50 = a2;
          if (v11 < a2)
          {
            uint64_t v50 = a2;
            do
            {
              uint64_t v51 = *--v50;
              uint64_t v52 = (uint64_t *)(*a3 + 576);
              uint64_t v149 = **(void **)(v43 + 80);
              unsigned int v53 = *((_DWORD *)sub_1CD41D7A0(v52, &v149) + 2);
              uint64_t v148 = **(void **)(v51 + 80);
              __n128 result = (uint64_t)sub_1CD41D7A0(v52, &v148);
            }
            while (v53 < *(_DWORD *)(result + 8));
          }
          while (v11 < v50)
          {
            uint64_t v54 = *v11;
            *uint64_t v11 = *v50;
            *uint64_t v50 = v54;
            do
            {
              uint64_t v55 = v11[1];
              ++v11;
              uint64_t v56 = (uint64_t *)(*a3 + 576);
              uint64_t v149 = **(void **)(v43 + 80);
              unsigned int v57 = *((_DWORD *)sub_1CD41D7A0(v56, &v149) + 2);
              uint64_t v148 = **(void **)(v55 + 80);
            }
            while (v57 >= *((_DWORD *)sub_1CD41D7A0(v56, &v148) + 2));
            do
            {
              uint64_t v58 = *--v50;
              unint64_t v59 = (uint64_t *)(*a3 + 576);
              uint64_t v149 = **(void **)(v43 + 80);
              unsigned int v60 = *((_DWORD *)sub_1CD41D7A0(v59, &v149) + 2);
              uint64_t v148 = **(void **)(v58 + 80);
              __n128 result = (uint64_t)sub_1CD41D7A0(v59, &v148);
            }
            while (v60 < *(_DWORD *)(result + 8));
          }
          unsigned int v61 = v11 - 1;
          BOOL v5 = v11 - 1 >= v147;
          BOOL v6 = v11 - 1 == v147;
          if (v11 - 1 != v147) {
            *unint64_t v147 = *v61;
          }
          a5 = 0;
          uint64_t *v61 = v43;
        }
        uint64_t v18 = 0;
        uint64_t v19 = *v12;
        do
        {
          uint64_t v20 = (uint64_t *)(*a3 + 576);
          uint64_t v149 = **(void **)(v12[v18 + 1] + 80);
          unsigned int v21 = *((_DWORD *)sub_1CD41D7A0(v20, &v149) + 2);
          uint64_t v148 = **(void **)(v19 + 80);
          ++v18;
        }
        while (v21 < *((_DWORD *)sub_1CD41D7A0(v20, &v148) + 2));
        BOOL v22 = &v12[v18];
        unsigned int v23 = a2;
        if (v18 == 1)
        {
          unsigned int v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v37 = *--v23;
            uint64_t v38 = (uint64_t *)(*a3 + 576);
            uint64_t v149 = **(void **)(v37 + 80);
            unsigned int v39 = *((_DWORD *)sub_1CD41D7A0(v38, &v149) + 2);
            uint64_t v148 = **(void **)(v19 + 80);
          }
          while (v39 >= *((_DWORD *)sub_1CD41D7A0(v38, &v148) + 2));
        }
        else
        {
          do
          {
            uint64_t v24 = *--v23;
            uint64_t v25 = (uint64_t *)(*a3 + 576);
            uint64_t v149 = **(void **)(v24 + 80);
            unsigned int v26 = *((_DWORD *)sub_1CD41D7A0(v25, &v149) + 2);
            uint64_t v148 = **(void **)(v19 + 80);
          }
          while (v26 >= *((_DWORD *)sub_1CD41D7A0(v25, &v148) + 2));
        }
        uint64_t v11 = v22;
        if (v22 < v23)
        {
          long long v27 = v23;
          do
          {
            uint64_t v28 = *v11;
            *uint64_t v11 = *v27;
            *long long v27 = v28;
            do
            {
              uint64_t v29 = v11[1];
              ++v11;
              long long v30 = (uint64_t *)(*a3 + 576);
              uint64_t v149 = **(void **)(v29 + 80);
              unsigned int v31 = *((_DWORD *)sub_1CD41D7A0(v30, &v149) + 2);
              uint64_t v148 = **(void **)(v19 + 80);
            }
            while (v31 < *((_DWORD *)sub_1CD41D7A0(v30, &v148) + 2));
            do
            {
              uint64_t v32 = *--v27;
              long long v33 = (uint64_t *)(*a3 + 576);
              uint64_t v149 = **(void **)(v32 + 80);
              unsigned int v34 = *((_DWORD *)sub_1CD41D7A0(v33, &v149) + 2);
              uint64_t v148 = **(void **)(v19 + 80);
            }
            while (v34 >= *((_DWORD *)sub_1CD41D7A0(v33, &v148) + 2));
          }
          while (v11 < v27);
        }
        uint64_t v35 = v11 - 1;
        uint64_t v10 = v147;
        if (v11 - 1 != v147) {
          *unint64_t v147 = *v35;
        }
        *uint64_t v35 = v19;
        if (v22 >= v23) {
          break;
        }
LABEL_26:
        __n128 result = sub_1CC4EB778(v147, v11 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v36 = sub_1CC4EC868(v147, v11 - 1, a3);
      __n128 result = sub_1CC4EC868(v11, a2, a3);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_26;
      }
    }
    a2 = v11 - 1;
    if (!v36) {
      continue;
    }
    return result;
  }
}

void *sub_1CC4EC460(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  sub_1CC4ECB00(a1, a2, a3, a4, a6);
  uint64_t v12 = *a4;
  uint64_t v13 = (uint64_t *)(*a6 + 576);
  uint64_t v30 = **(void **)(*a5 + 80);
  unsigned int v14 = *((_DWORD *)sub_1CD41D7A0(v13, &v30) + 2);
  uint64_t v29 = **(void **)(v12 + 80);
  __n128 result = sub_1CD41D7A0(v13, &v29);
  if (v14 < *((_DWORD *)result + 2))
  {
    uint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    uint64_t v17 = *a3;
    uint64_t v18 = (uint64_t *)(*a6 + 576);
    uint64_t v30 = **(void **)(*a4 + 80);
    unsigned int v19 = *((_DWORD *)sub_1CD41D7A0(v18, &v30) + 2);
    uint64_t v29 = **(void **)(v17 + 80);
    __n128 result = sub_1CD41D7A0(v18, &v29);
    if (v19 < *((_DWORD *)result + 2))
    {
      uint64_t v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      uint64_t v21 = *a2;
      BOOL v22 = (uint64_t *)(*a6 + 576);
      uint64_t v30 = **(void **)(*a3 + 80);
      unsigned int v23 = *((_DWORD *)sub_1CD41D7A0(v22, &v30) + 2);
      uint64_t v29 = **(void **)(v21 + 80);
      __n128 result = sub_1CD41D7A0(v22, &v29);
      if (v23 < *((_DWORD *)result + 2))
      {
        uint64_t v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        uint64_t v25 = *a1;
        unsigned int v26 = (uint64_t *)(*a6 + 576);
        uint64_t v30 = **(void **)(*a2 + 80);
        unsigned int v27 = *((_DWORD *)sub_1CD41D7A0(v26, &v30) + 2);
        uint64_t v29 = **(void **)(v25 + 80);
        __n128 result = sub_1CD41D7A0(v26, &v29);
        if (v27 < *((_DWORD *)result + 2))
        {
          uint64_t v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

void *sub_1CC4EC648(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = *a1;
  uint64_t v9 = (uint64_t *)(*a4 + 576);
  uint64_t v28 = **(void **)(*a2 + 80);
  unsigned int v10 = *((_DWORD *)sub_1CD41D7A0(v9, &v28) + 2);
  uint64_t v27 = **(void **)(v8 + 80);
  uint64_t v11 = sub_1CD41D7A0(v9, &v27);
  uint64_t v12 = *a3;
  uint64_t v13 = *a2;
  unsigned int v14 = (uint64_t *)(*a4 + 576);
  if (v10 >= *((_DWORD *)v11 + 2))
  {
    uint64_t v28 = **(void **)(v12 + 80);
    unsigned int v18 = *((_DWORD *)sub_1CD41D7A0(v14, &v28) + 2);
    uint64_t v27 = **(void **)(v13 + 80);
    __n128 result = sub_1CD41D7A0(v14, &v27);
    if (v18 < *((_DWORD *)result + 2))
    {
      uint64_t v22 = *a2;
      *a2 = *a3;
      *a3 = v22;
      uint64_t v23 = *a1;
      uint64_t v24 = (uint64_t *)(*a4 + 576);
      uint64_t v28 = **(void **)(*a2 + 80);
      unsigned int v25 = *((_DWORD *)sub_1CD41D7A0(v24, &v28) + 2);
      uint64_t v27 = **(void **)(v23 + 80);
      __n128 result = sub_1CD41D7A0(v24, &v27);
      if (v25 < *((_DWORD *)result + 2))
      {
        uint64_t v26 = *a1;
        *a1 = *a2;
        *a2 = v26;
      }
    }
  }
  else
  {
    uint64_t v28 = **(void **)(v12 + 80);
    unsigned int v15 = *((_DWORD *)sub_1CD41D7A0(v14, &v28) + 2);
    uint64_t v27 = **(void **)(v13 + 80);
    __n128 result = sub_1CD41D7A0(v14, &v27);
    uint64_t v17 = *a1;
    if (v15 >= *((_DWORD *)result + 2))
    {
      *a1 = *a2;
      *a2 = v17;
      unsigned int v19 = (uint64_t *)(*a4 + 576);
      uint64_t v28 = **(void **)(*a3 + 80);
      unsigned int v20 = *((_DWORD *)sub_1CD41D7A0(v19, &v28) + 2);
      uint64_t v27 = **(void **)(v17 + 80);
      __n128 result = sub_1CD41D7A0(v19, &v27);
      if (v20 < *((_DWORD *)result + 2))
      {
        uint64_t v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v17;
    }
  }
  return result;
}

BOOL sub_1CC4EC868(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v20 = *a1;
      uint64_t v21 = (uint64_t *)(*a3 + 576);
      uint64_t v26 = **(void **)(*(a2 - 1) + 80);
      unsigned int v22 = *((_DWORD *)sub_1CD41D7A0(v21, &v26) + 2);
      uint64_t v25 = **(void **)(v20 + 80);
      if (v22 < *((_DWORD *)sub_1CD41D7A0(v21, &v25) + 2))
      {
        uint64_t v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      sub_1CC4EC648(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC4ECB00(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CC4EC460(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CC4EC648(a1, a1 + 1, a1 + 2, a3);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v8;
    uint64_t v13 = (uint64_t *)(*a3 + 576);
    uint64_t v26 = **(void **)(*v9 + 80);
    unsigned int v14 = *((_DWORD *)sub_1CD41D7A0(v13, &v26) + 2);
    uint64_t v25 = **(void **)(v12 + 80);
    if (v14 < *((_DWORD *)sub_1CD41D7A0(v13, &v25) + 2))
    {
      uint64_t v24 = *v9;
      uint64_t v15 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15 + 24) = *(uint64_t *)((char *)a1 + v15 + 16);
        if (v15 == -16) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v15 + 8);
        uint64_t v17 = (uint64_t *)(*a3 + 576);
        uint64_t v26 = **(void **)(v24 + 80);
        unsigned int v18 = *((_DWORD *)sub_1CD41D7A0(v17, &v26) + 2);
        uint64_t v25 = **(void **)(v16 + 80);
        v15 -= 8;
        if (v18 >= *((_DWORD *)sub_1CD41D7A0(v17, &v25) + 2))
        {
          unsigned int v19 = (uint64_t *)((char *)a1 + v15 + 24);
          goto LABEL_11;
        }
      }
      unsigned int v19 = a1;
LABEL_11:
      *unsigned int v19 = v24;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    BOOL result = 1;
    if (++v9 == a2) {
      return result;
    }
  }
}

void *sub_1CC4ECB00(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  sub_1CC4EC648(a1, a2, a3, a5);
  uint64_t v10 = *a3;
  int v11 = (uint64_t *)(*a5 + 576);
  uint64_t v24 = **(void **)(*a4 + 80);
  unsigned int v12 = *((_DWORD *)sub_1CD41D7A0(v11, &v24) + 2);
  uint64_t v23 = **(void **)(v10 + 80);
  BOOL result = sub_1CD41D7A0(v11, &v23);
  if (v12 < *((_DWORD *)result + 2))
  {
    uint64_t v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    uint64_t v15 = *a2;
    uint64_t v16 = (uint64_t *)(*a5 + 576);
    uint64_t v24 = **(void **)(*a3 + 80);
    unsigned int v17 = *((_DWORD *)sub_1CD41D7A0(v16, &v24) + 2);
    uint64_t v23 = **(void **)(v15 + 80);
    BOOL result = sub_1CD41D7A0(v16, &v23);
    if (v17 < *((_DWORD *)result + 2))
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v19 = *a1;
      uint64_t v20 = (uint64_t *)(*a5 + 576);
      uint64_t v24 = **(void **)(*a2 + 80);
      unsigned int v21 = *((_DWORD *)sub_1CD41D7A0(v20, &v24) + 2);
      uint64_t v23 = **(void **)(v19 + 80);
      BOOL result = sub_1CD41D7A0(v20, &v23);
      if (v21 < *((_DWORD *)result + 2))
      {
        uint64_t v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

uint64_t sub_1CC4ECC7C()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Act like old LiveDebugValues did";
  v3.n128_u64[1] = 32;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCD8150, "emulate-old-livedebugvalues", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD8150, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"livedebugvalues-stack-ws-limit";
  v3.n128_u64[1] = 30;
  int v1 = 250;
  uint64_t v2 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCD8210, "livedebugvalues-max-stack-slots", &v4, &v3, &v2);
  uint64_t result = __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD8210, &dword_1CB82C000);
  LiveDebugValues::ValueIDNum::EmptyValue = -1;
  LiveDebugValues::ValueIDNum::TombstoneValue = 0xFFFFFEFFFFFFFFFFLL;
  return result;
}

uint64_t ****llvm::AbstractCallSite::getCallbackUses(uint64_t ****result, uint64_t a2)
{
  uint64_t v2 = *(result - 4);
  if (!v2) {
    return result;
  }
  if (*((unsigned char *)v2 + 16)) {
    return result;
  }
  uint64_t v3 = (uint64_t)result;
  if (v2[3] != (uint64_t **)result[9] || (*((unsigned char *)v2 + 23) & 0x20) == 0) {
    return result;
  }
  uint64_t v5 = ***v2;
  uint64_t v29 = (uint64_t)*(result - 4);
  int v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 2480);
    int v8 = v6 - 1;
    unsigned int v9 = v8 & ((v2 >> 4) ^ (v2 >> 9));
    uint64_t result = (uint64_t ****)(v7 + 40 * v9);
    uint64_t v10 = *result;
    if (*result == v2) {
      goto LABEL_7;
    }
    uint64_t v14 = 0;
    int v15 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v10 == (uint64_t ***)-8192;
      }
      if (v16) {
        uint64_t v14 = result;
      }
      unsigned int v17 = v9 + v15++;
      unsigned int v9 = v17 & v8;
      uint64_t result = (uint64_t ****)(v7 + 40 * v9);
      uint64_t v10 = *result;
      if (*result == v2) {
        goto LABEL_7;
      }
    }
    if (v14) {
      uint64_t v26 = v14;
    }
    else {
      uint64_t v26 = result;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  uint64_t result = (uint64_t ****)sub_1CC609054(v5 + 2480, (uint64_t)&v29, &v29, v26);
  uint64_t v27 = v29;
  result[3] = 0;
  result[4] = 0;
  void *result = (uint64_t ***)v27;
  result[1] = (uint64_t ***)(result + 3);
  result[2] = (uint64_t ***)0x100000000;
LABEL_7:
  uint64_t v11 = *((unsigned int *)result + 4);
  if (v11)
  {
    unsigned int v12 = result[1] + 1;
    uint64_t v13 = 16 * v11;
    while (*((_DWORD *)v12 - 2) != 26)
    {
      v12 += 2;
      v13 -= 16;
      if (!v13) {
        return result;
      }
    }
    uint64_t v18 = *v12;
    if (v18)
    {
      uint64_t v19 = *(unsigned int *)(v18 + 8);
      if (v19)
      {
        uint64_t v20 = -8 * v19;
        uint64_t v28 = v18;
        do
        {
          uint64_t v21 = *(void *)(*(void *)(*(void *)(v18 + v20) - 8 * *(unsigned int *)(*(void *)(v18 + v20) + 8))
                          + 128);
          uint64_t v22 = (unint64_t *)(v21 + 24);
          if (*(_DWORD *)(v21 + 32) >= 0x41u) {
            uint64_t v22 = (unint64_t *)*v22;
          }
          unint64_t v23 = *v22;
          uint64_t result = (uint64_t ****)sub_1CBF5BBBC(v3);
          uint64_t v24 = v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF);
          if (v23 < (((unint64_t)result - v24) >> 5))
          {
            unint64_t v25 = *(unsigned int *)(a2 + 8);
            if (v25 >= *(unsigned int *)(a2 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a2 + 8 * v25) = v24 + 32 * v23;
            ++*(_DWORD *)(a2 + 8);
          }
          v20 += 8;
          uint64_t v18 = v28;
        }
        while (v20);
      }
    }
  }
  return result;
}

llvm::AbstractCallSite *llvm::AbstractCallSite::AbstractCallSite(llvm::AbstractCallSite *this, const llvm::Use *a2)
{
  uint64_t v3 = *((void *)a2 + 3);
  unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 < 0x1C)
  {
    *((void *)this + 1) = (char *)this + 24;
    uint64_t v10 = (void *)((char *)this + 8);
    *(void *)this = 0;
    *((_DWORD *)this + 4) = 0;
    uint64_t v11 = (unsigned int *)((char *)this + 16);
    *((_DWORD *)this + 5) = 0;
    if (v4 != 5) {
      return this;
    }
    unsigned int v9 = *(const llvm::Use **)(v3 + 8);
    if (!v9) {
      return this;
    }
    if (*((void *)v9 + 1)) {
      return this;
    }
    if (*(unsigned __int16 *)(v3 + 18) - 38 > 0xC) {
      return this;
    }
    uint64_t v3 = *((void *)v9 + 3);
    unsigned int v14 = *(unsigned __int8 *)(v3 + 16);
    if (v14 < 0x1C) {
      return this;
    }
    unsigned int v15 = v14 - 33;
    BOOL v6 = v15 > 0x33;
    uint64_t v16 = (1 << v15) & 0x8000000000041;
    if (v6 || v16 == 0) {
      return this;
    }
    *(void *)this = v3;
  }
  else
  {
    unsigned int v5 = v4 - 33;
    BOOL v6 = v5 > 0x33;
    uint64_t v7 = (1 << v5) & 0x8000000000041;
    if (v6 || v7 == 0)
    {
      *(void *)this = 0;
      *((void *)this + 1) = (char *)this + 24;
      *((void *)this + 2) = 0;
      return this;
    }
    unsigned int v9 = a2;
    *(void *)this = v3;
    *((void *)this + 1) = (char *)this + 24;
    uint64_t v10 = (void *)((char *)this + 8);
    *((_DWORD *)this + 4) = 0;
    uint64_t v11 = (unsigned int *)((char *)this + 16);
    *((_DWORD *)this + 5) = 0;
  }
  unsigned int v12 = (uint64_t *)(v3 - 32);
  if ((const llvm::Use *)(v3 - 32) == v9) {
    return this;
  }
  uint64_t v13 = *v12;
  if (!*v12
    || *(unsigned char *)(v13 + 16)
    || *(void *)(v13 + 24) != *(void *)(v3 + 72)
    || (*(unsigned char *)(v13 + 23) & 0x20) == 0)
  {
LABEL_11:
    *(void *)this = 0;
    return this;
  }
  uint64_t v19 = ***(void ***)v13;
  uint64_t v72 = *v12;
  int v20 = *(_DWORD *)(v19 + 2496);
  if (!v20)
  {
    uint64_t v43 = 0;
LABEL_51:
    uint64_t v24 = sub_1CC609054(v19 + 2480, (uint64_t)&v72, &v72, v43);
    uint64_t v44 = v72;
    v24[3] = 0;
    v24[4] = 0;
    *uint64_t v24 = v44;
    v24[1] = v24 + 3;
    int v24[2] = 0x100000000;
    goto LABEL_35;
  }
  uint64_t v21 = *(void *)(v19 + 2480);
  int v22 = v20 - 1;
  unsigned int v23 = v22 & ((v13 >> 4) ^ (v13 >> 9));
  uint64_t v24 = (void *)(v21 + 40 * v23);
  uint64_t v25 = *v24;
  if (*v24 != v13)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -8192;
      }
      if (v28) {
        uint64_t v26 = v24;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      uint64_t v24 = (void *)(v21 + 40 * v23);
      uint64_t v25 = *v24;
      if (*v24 == v13) {
        goto LABEL_35;
      }
    }
    if (v26) {
      uint64_t v43 = v26;
    }
    else {
      uint64_t v43 = v24;
    }
    goto LABEL_51;
  }
LABEL_35:
  uint64_t v30 = *((unsigned int *)v24 + 4);
  if (!v30) {
    goto LABEL_11;
  }
  unsigned int v31 = (void *)(v24[1] + 8);
  uint64_t v32 = 16 * v30;
  while (*((_DWORD *)v31 - 2) != 26)
  {
    v31 += 2;
    v32 -= 16;
    if (!v32) {
      goto LABEL_11;
    }
  }
  uint64_t v33 = *v31;
  if (!*v31) {
    goto LABEL_11;
  }
  uint64_t v34 = *(unsigned int *)(v33 + 8);
  if (!v34) {
    goto LABEL_11;
  }
  uint64_t v35 = *(void *)this;
  int v36 = *(_DWORD *)(*(void *)this + 20);
  uint64_t v37 = *(void *)this - 32 * (v36 & 0x7FFFFFF);
  uint64_t v38 = -8 * v34;
  while (1)
  {
    uint64_t v39 = *(void *)(v33 + v38);
    uint64_t v40 = *(unsigned int *)(v39 + 8);
    uint64_t v41 = *(void *)(*(void *)(v39 - 8 * v40) + 128);
    unsigned int v42 = (void *)(v41 + 24);
    if (*(_DWORD *)(v41 + 32) >= 0x41u) {
      unsigned int v42 = (void *)*v42;
    }
    if (*v42 == (((unint64_t)v9 - v37) >> 5)) {
      break;
    }
    v38 += 8;
    if (!v38) {
      goto LABEL_11;
    }
  }
  int v45 = *(unsigned __int8 *)(v35 + 16);
  if (v45 == 84)
  {
    uint64_t v46 = 0;
  }
  else if (v45 == 39)
  {
    uint64_t v46 = (*(_DWORD *)(v35 + 80) + 1);
  }
  else
  {
    uint64_t v46 = 2;
  }
  if (v36 < 0)
  {
    uint64_t v68 = *(void *)(v37 - 8);
    if ((v68 & 0xFFFFFFFF0) != 0) {
      int v47 = *(_DWORD *)(v37 - 12) - *(_DWORD *)(v37 - v68);
    }
    else {
      int v47 = 0;
    }
  }
  else
  {
    int v47 = 0;
  }
  uint64_t v48 = (v40 - 1);
  if (v48)
  {
    uint64_t v49 = v39;
    do
    {
      uint64_t v50 = *(void *)(*(void *)(v49 - 8 * *(unsigned int *)(v39 + 8)) + 128);
      unsigned int v51 = *(_DWORD *)(v50 + 32);
      if (v51 > 0x40) {
        uint64_t v52 = **(void **)(v50 + 24);
      }
      else {
        uint64_t v52 = (uint64_t)(*(void *)(v50 + 24) << -(char)v51) >> -(char)v51;
      }
      unint64_t v53 = *((unsigned int *)this + 4);
      if (v53 >= *((unsigned int *)this + 5)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*v10 + 4 * v53) = v52;
      ++*v11;
      v49 += 8;
      --v48;
    }
    while (v48);
  }
  if (*(_DWORD *)(*(void *)(v13 + 24) + 8) > 0xFFu)
  {
    uint64_t v54 = *(void *)(*(void *)(v39 - 8 * *(unsigned int *)(v39 + 8) + 8
                                                                         * (*(_DWORD *)(v39 + 8) - 1))
                    + 128);
    unsigned int v55 = *(unsigned __int8 *)(v54 + 16);
    if (v54) {
      BOOL v56 = v55 == 16;
    }
    else {
      BOOL v56 = 0;
    }
    if (!v56)
    {
      uint64_t v70 = v37;
      int v71 = v47;
      uint64_t v69 = v35;
      if (v54) {
        BOOL v61 = v55 == 17;
      }
      else {
        BOOL v61 = 0;
      }
      if (v61)
      {
        char v63 = sub_1CB844168(v54, 0.0);
        uint64_t v35 = v69;
        uint64_t v37 = v70;
        int v47 = v71;
        if (v63) {
          return this;
        }
      }
      else if (v55 <= 0x14 && ((1 << v55) & 0x1C2000) != 0)
      {
        return this;
      }
      goto LABEL_73;
    }
    uint64_t v57 = *(unsigned int *)(v54 + 32);
    if (v57 < 0x41)
    {
      if (!*(void *)(v54 + 24)) {
        return this;
      }
      goto LABEL_73;
    }
    int v64 = 0;
    int64_t v65 = (unint64_t)(v57 + 63) >> 6;
    do
    {
      BOOL v6 = v65-- < 1;
      if (v6) {
        break;
      }
      unint64_t v66 = *(void *)(*(void *)(v54 + 24) + 8 * v65);
      v64 += __clz(v66);
    }
    while (!v66);
    int v67 = v57 | 0xFFFFFFC0;
    if ((v57 & 0x3F) == 0) {
      int v67 = 0;
    }
    if (v64 + v67 != v57)
    {
LABEL_73:
      unint64_t v58 = (v35 - 32 * v46 + 32 * (unint64_t)-v47 - v37 - 32) >> 5;
      unsigned int v59 = *(_DWORD *)(v13 + 96);
      if (v59 < v58)
      {
        unsigned int v60 = *v11;
        do
        {
          if (v60 >= *((_DWORD *)this + 5)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*v10 + 4 * v60) = v59;
          unsigned int v60 = *v11 + 1;
          *uint64_t v11 = v60;
          ++v59;
        }
        while (v58 != v59);
      }
    }
  }
  return this;
}

void llvm::AssemblyAnnotationWriter::~AssemblyAnnotationWriter(llvm::AssemblyAnnotationWriter *this)
{
}

llvm::raw_ostream *llvm::printLLVMNameWithoutPrefix(llvm::raw_ostream *result, llvm::raw_ostream *a2, size_t a3)
{
  unsigned int v5 = result;
  uint64_t v6 = MEMORY[0x1E4F14390];
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *(unsigned __int8 *)a2 + 60) & 0x400) != 0) {
    goto LABEL_20;
  }
  if (!a3) {
    return result;
  }
  uint64_t v7 = 0;
  int v8 = 0;
  do
  {
    int v9 = *((char *)a2 + v7);
    uint64_t v10 = *((unsigned __int8 *)a2 + v7);
    if (v9 < 0)
    {
      unsigned __int8 v17 = *((unsigned char *)a2 + v7);
      int v15 = v8;
      uint64_t v16 = v7;
      int v11 = __maskrune(v10, 0x500uLL);
      uint64_t v7 = v16;
      LOBYTE(v9) = v17;
      int v8 = v15;
      uint64_t v6 = MEMORY[0x1E4F14390];
      LODWORD(v10) = v17;
    }
    else
    {
      int v11 = *(_DWORD *)(v6 + 4 * v10 + 60) & 0x500;
    }
    if (!v11)
    {
      if (v9 - 45 >= 2 && v9 != 95) {
        int v8 = 1;
      }
      if ((v10 - 45) >= 2 && v10 != 95) {
        break;
      }
    }
    ++v7;
  }
  while (a3 != v7);
  if (v8)
  {
LABEL_20:
    uint64_t v13 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v13 < *((void *)v5 + 3))
    {
      *((void *)v5 + 4) = v13 + 1;
      *uint64_t v13 = 34;
    }
    else
    {
      llvm::raw_ostream::write(v5, 34);
    }
    uint64_t result = llvm::printEscapedString(a2, a3, v5);
    unsigned int v14 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v14 < *((void *)v5 + 3))
    {
      *((void *)v5 + 4) = v14 + 1;
      *unsigned int v14 = 34;
    }
    else
    {
      return llvm::raw_ostream::write(v5, 34);
    }
  }
  else
  {
    unsigned int v12 = (void *)*((void *)v5 + 4);
    if (a3 <= *((void *)v5 + 3) - (void)v12)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(v12, a2, a3);
      *((void *)v5 + 4) += a3;
    }
    else
    {
      return llvm::raw_ostream::write(v5, (const char *)a2, a3);
    }
  }
  return result;
}

uint64_t llvm::ModuleSlotTracker::ModuleSlotTracker(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)uint64_t result = &unk_1F26160C0;
  *(void *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 0;
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = a4;
  *(void *)(result + 40) = a2;
  *(void *)(result + 72) = 0;
  *(void *)(result + 104) = 0;
  return result;
}

{
  *(void *)uint64_t result = &unk_1F26160C0;
  *(void *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 0;
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = a4;
  *(void *)(result + 40) = a2;
  *(void *)(result + 72) = 0;
  *(void *)(result + 104) = 0;
  return result;
}

uint64_t llvm::ModuleSlotTracker::ModuleSlotTracker(uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t result = &unk_1F26160C0;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = a2 != 0;
  *(unsigned char *)(result + 17) = a3;
  *(void *)(result + 72) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

void llvm::ModuleSlotTracker::~ModuleSlotTracker(llvm::ModuleSlotTracker *this)
{
  *(void *)this = &unk_1F26160C0;
  int v1 = (llvm::ModuleSlotTracker *)*((void *)this + 13);
  if (v1 == (llvm::ModuleSlotTracker *)((char *)this + 80))
  {
    unsigned int v4 = this;
    (*(void (**)(char *))(*((void *)this + 10) + 32))((char *)this + 80);
  }
  else
  {
    if (!v1) {
      goto LABEL_3;
    }
    unsigned int v4 = this;
    (*(void (**)(llvm::ModuleSlotTracker *))(*(void *)v1 + 40))(v1);
  }
  this = v4;
LABEL_3:
  uint64_t v2 = (llvm::ModuleSlotTracker *)*((void *)this + 9);
  if (v2 == (llvm::ModuleSlotTracker *)((char *)this + 48))
  {
    unsigned int v5 = this;
    (*(void (**)(char *))(*((void *)this + 6) + 32))((char *)this + 48);
  }
  else
  {
    if (!v2) {
      goto LABEL_5;
    }
    unsigned int v5 = this;
    (*(void (**)(llvm::ModuleSlotTracker *))(*(void *)v2 + 40))(v2);
  }
  this = v5;
LABEL_5:
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t vars8;

  llvm::ModuleSlotTracker::~ModuleSlotTracker(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::ModuleSlotTracker::getMachine(llvm::ModuleSlotTracker *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 16))
  {
    *((unsigned char *)this + 16) = 0;
    operator new();
  }
  return *((void *)this + 5);
}

void *llvm::SlotTracker::setProcessHook(uint64_t a1, uint64_t a2)
{
  return sub_1CC4EDBC8((void *)(a1 + 32), a2);
}

{
  return sub_1CC4EDEAC((void *)(a1 + 64), a2);
}

_DWORD *llvm::SlotTracker::purgeFunction(llvm::SlotTracker *this)
{
  uint64_t result = sub_1CC0A1FD4((_DWORD *)this + 34);
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  return result;
}

uint64_t llvm::SlotTracker::getLocalSlot(llvm::SlotTracker *this, const llvm::Value *a2)
{
  if (*((void *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((void *)this + 1) = 0;
  }
  if (*((void *)this + 2) && !*((unsigned char *)this + 24)) {
    llvm::SlotTracker::processFunction(this);
  }
  uint64_t v4 = *((void *)this + 17);
  uint64_t v5 = *((unsigned int *)this + 38);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = v4 + 16 * v6;
    int v8 = *(const llvm::Value **)v7;
    if (*(const llvm::Value **)v7 == a2) {
      goto LABEL_13;
    }
    int v9 = 1;
    while (v8 != (const llvm::Value *)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      int v8 = *(const llvm::Value **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = v4 + 16 * v6;
        goto LABEL_13;
      }
    }
  }
  uint64_t v7 = v4 + 16 * v5;
LABEL_13:
  if (v7 == v4 + 16 * v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(v7 + 8);
  }
}

void *sub_1CC4EDBC8(void *a1, uint64_t a2)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  sub_1CC505444((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    uint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return a1;
}

void *sub_1CC4EDEAC(void *a1, uint64_t a2)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  sub_1CC5054DC((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    uint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return a1;
}

uint64_t llvm::SlotTracker::SlotTracker(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1F26160E0;
  *(_WORD *)(result + 24) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = a2;
  *(_DWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_DWORD *)(result + 224) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(void *)(result + 144) = 0;
  *(_DWORD *)(result + 152) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(void *)(result + 168) = 0;
  *(void *)(result + 176) = 0;
  *(void *)(result + 200) = 0;
  *(void *)(result + 208) = 0;
  *(_DWORD *)(result + 216) = 0;
  *(void *)(result + 232) = 0;
  *(void *)(result + 240) = 0;
  *(void *)(result + 248) = 0x1000000000;
  *(_DWORD *)(result + 264) = 0;
  *(_DWORD *)(result + 296) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(void *)(result + 272) = 0;
  *(void *)(result + 280) = 0;
  *(void *)(result + 304) = 0;
  *(void *)(result + 312) = 0;
  *(void *)(result + 320) = 0x1000000000;
  *(_DWORD *)(result + 336) = 0;
  return result;
}

uint64_t llvm::SlotTracker::initializeIndexIfNeeded(llvm::SlotTracker *this)
{
  if (!*((void *)this + 12)) {
    return 0;
  }
  uint64_t result = llvm::SlotTracker::processIndex(this);
  *((void *)this + 12) = 0;
  return result;
}

uint64_t llvm::SlotTracker::processModule(llvm::SlotTracker *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = (void *)v2[2];
  if (v4 != v2 + 1)
  {
    do
    {
      if (v4) {
        uint64_t v5 = (uint64_t)(v4 - 7);
      }
      else {
        uint64_t v5 = 0;
      }
      if ((*(unsigned char *)(v5 + 23) & 0x10) == 0)
      {
        int v6 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v6 + 1;
        unsigned int v31 = (llvm::SlotTracker *)v5;
        *((_DWORD *)sub_1CC220A0C((uint64_t)this + 104, (uint64_t *)&v31) + 2) = v6;
      }
      llvm::SlotTracker::processGlobalObjectMetadata(this, (const llvm::GlobalObject *)v5);
      uint64_t v7 = *(void *)(v5 + 72);
      if (v7) {
        llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v7);
      }
      uint64_t v4 = (void *)v4[1];
    }
    while (v4 != v3);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  int v8 = v2 + 5;
  int v9 = (void *)v2[6];
  if (v9 != v2 + 5)
  {
    do
    {
      uint64_t v10 = (uint64_t)(v9 - 6);
      if (!v9) {
        uint64_t v10 = 0;
      }
      if ((*(unsigned char *)(v10 + 23) & 0x10) == 0)
      {
        int v11 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v11 + 1;
        unsigned int v31 = (llvm::SlotTracker *)v10;
        *((_DWORD *)sub_1CC220A0C((uint64_t)this + 104, (uint64_t *)&v31) + 2) = v11;
      }
      int v9 = (void *)v9[1];
    }
    while (v9 != v8);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  unsigned int v12 = v2 + 7;
  uint64_t v13 = (void *)v2[8];
  if (v13 != v2 + 7)
  {
    do
    {
      uint64_t v14 = (uint64_t)(v13 - 7);
      if (!v13) {
        uint64_t v14 = 0;
      }
      if ((*(unsigned char *)(v14 + 23) & 0x10) == 0)
      {
        int v15 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v15 + 1;
        unsigned int v31 = (llvm::SlotTracker *)v14;
        *((_DWORD *)sub_1CC220A0C((uint64_t)this + 104, (uint64_t *)&v31) + 2) = v15;
      }
      uint64_t v13 = (void *)v13[1];
    }
    while (v13 != v12);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  uint64_t v16 = v2 + 9;
  unsigned __int8 v17 = (void *)v2[10];
  if (v17 != v2 + 9)
  {
    do
    {
      uint64_t v18 = *(unsigned int *)(v17[6] + 8);
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 8 * v18;
        do
        {
          llvm::SlotTracker::CreateMetadataSlot(this, *(const llvm::MDNode **)(*(void *)v17[6] + v19));
          v19 += 8;
        }
        while (v20 != v19);
      }
      unsigned __int8 v17 = (void *)v17[1];
    }
    while (v17 != v16);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  uint64_t v21 = v2 + 3;
  int v22 = (void *)v2[4];
  if (v22 != v2 + 3)
  {
    do
    {
      if (v22) {
        uint64_t v23 = (uint64_t)(v22 - 7);
      }
      else {
        uint64_t v23 = 0;
      }
      if ((*(unsigned char *)(v23 + 23) & 0x10) == 0)
      {
        int v24 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v24 + 1;
        unsigned int v31 = (llvm::SlotTracker *)v23;
        *((_DWORD *)sub_1CC220A0C((uint64_t)this + 104, (uint64_t *)&v31) + 2) = v24;
      }
      if (*((unsigned char *)this + 25)) {
        llvm::SlotTracker::processFunctionMetadata(this, (const llvm::Function *)v23);
      }
      uint64_t v25 = *(void *)(v23 + 112);
      if (v25)
      {
        if (*(_DWORD *)(v25 + 8))
        {
          uint64_t v26 = *(void *)(v25 + 40);
          if (v26) {
            llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v26);
          }
        }
      }
      int v22 = (void *)v22[1];
    }
    while (v22 != v21);
  }
  uint64_t result = *((void *)this + 7);
  if (result)
  {
    char v28 = *((unsigned char *)this + 25);
    uint64_t v30 = *((void *)this + 1);
    unsigned int v31 = this;
    char v29 = v28;
    return (*(uint64_t (**)(uint64_t, llvm::SlotTracker **, uint64_t *, char *))(*(void *)result + 48))(result, &v31, &v30, &v29);
  }
  return result;
}

void *llvm::SlotTracker::CreateModuleSlot(llvm::SlotTracker *this, const llvm::GlobalValue *a2)
{
  int v2 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = v2 + 1;
  uint64_t v4 = a2;
  uint64_t result = sub_1CC220A0C((uint64_t)this + 104, (uint64_t *)&v4);
  *((_DWORD *)result + 2) = v2;
  return result;
}

void llvm::SlotTracker::processGlobalObjectMetadata(llvm::SlotTracker *this, const llvm::GlobalObject *a2)
{
  v9[8] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = v9;
  uint64_t v8 = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v7);
  uint64_t v3 = v7;
  if (v8)
  {
    uint64_t v4 = 16 * v8;
    uint64_t v5 = (const llvm::MDNode **)((char *)v7 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      llvm::SlotTracker::CreateMetadataSlot(this, v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v7;
  }
  if (v3 != v9) {
    free(v3);
  }
}

uint64_t llvm::SlotTracker::CreateAttributeSetSlot(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 200;
  uint64_t v4 = *(void *)(a1 + 200);
  uint64_t v14 = 0;
  int v6 = sub_1CC505574(v4, *(_DWORD *)(v5 + 16), a2, &v14);
  uint64_t result = *(void *)v5;
  uint64_t v8 = *(unsigned int *)(v5 + 16);
  if (v6) {
    BOOL v9 = v14 == *(void *)v5 + 16 * v8;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    int v10 = *(_DWORD *)(a1 + 224);
    *(_DWORD *)(a1 + 224) = v10 + 1;
    uint64_t v14 = 0;
    uint64_t result = sub_1CC505574(result, v8, a2, &v14);
    uint64_t v11 = v14;
    if (result)
    {
LABEL_12:
      *(_DWORD *)(v11 + 8) = v10;
      return result;
    }
    int v12 = *(_DWORD *)(a1 + 208);
    unsigned int v13 = *(_DWORD *)(a1 + 216);
    if (4 * v12 + 4 >= 3 * v13)
    {
      v13 *= 2;
    }
    else if (v13 + ~v12 - *(_DWORD *)(a1 + 212) > v13 >> 3)
    {
LABEL_9:
      ++*(_DWORD *)(a1 + 208);
      if (*(void *)v11 != -4) {
        --*(_DWORD *)(a1 + 212);
      }
      *(void *)uint64_t v11 = a2;
      *(_DWORD *)(v11 + 8) = 0;
      goto LABEL_12;
    }
    sub_1CC505608(v5, v13);
    uint64_t v14 = 0;
    uint64_t result = sub_1CC505574(*(void *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, &v14);
    uint64_t v11 = v14;
    goto LABEL_9;
  }
  return result;
}

llvm::SlotTracker *llvm::SlotTracker::CreateMetadataSlot(llvm::SlotTracker *this, const llvm::MDNode *a2)
{
  int v2 = *(unsigned __int8 *)a2;
  if (v2 != 6 && v2 != 32)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((unsigned int *)this + 48);
    uint64_t v7 = *((void *)this + 21);
    this = (llvm::SlotTracker *)((char *)this + 168);
    uint64_t v6 = v7;
    uint64_t v21 = a2;
    uint64_t v22 = v5;
    int v8 = *((_DWORD *)this + 4);
    if (v8)
    {
      int v9 = v8 - 1;
      unsigned int v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v11 = (const llvm::MDNode **)(v6 + 16 * v10);
      int v12 = *v11;
      if (*v11 == a2) {
        return this;
      }
      unsigned int v13 = 0;
      int v14 = 1;
      while (v12 != (const llvm::MDNode *)-4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == (const llvm::MDNode *)-8192;
        }
        if (v15) {
          unsigned int v13 = v11;
        }
        unsigned int v16 = v10 + v14++;
        unsigned int v10 = v16 & v9;
        uint64_t v11 = (const llvm::MDNode **)(v6 + 16 * v10);
        int v12 = *v11;
        if (*v11 == a2) {
          return this;
        }
      }
      if (v13) {
        unsigned __int8 v17 = v13;
      }
      else {
        unsigned __int8 v17 = v11;
      }
    }
    else
    {
      unsigned __int8 v17 = 0;
    }
    this = (llvm::SlotTracker *)sub_1CBFAE01C((uint64_t)this, (uint64_t)&v21, (uint64_t *)&v21, v17);
    *(void *)this = v21;
    *((_DWORD *)this + 2) = v22;
    ++*((_DWORD *)v4 + 48);
    uint64_t v18 = *((unsigned int *)a2 + 2);
    if (v18)
    {
      uint64_t v19 = a2;
      do
      {
        uint64_t v20 = (const llvm::MDNode *)*((void *)v19 - *((unsigned int *)a2 + 2));
        if (v20 && *(unsigned __int8 *)v20 - 4 <= 0x1E) {
          this = (llvm::SlotTracker *)llvm::SlotTracker::CreateMetadataSlot(v4, v20);
        }
        uint64_t v19 = (const llvm::MDNode *)((char *)v19 + 8);
        --v18;
      }
      while (v18);
    }
  }
  return this;
}

void llvm::SlotTracker::processFunctionMetadata(llvm::SlotTracker *this, const llvm::Function *a2)
{
  llvm::SlotTracker::processGlobalObjectMetadata(this, a2);
  uint64_t v4 = (char *)a2 + 72;
  for (uint64_t i = *((void *)a2 + 10); (char *)i != v4; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v6 = i - 24;
    if (!i) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = v6 + 40;
    for (uint64_t j = *(void *)(v6 + 48); j != v7; uint64_t j = *(void *)(j + 8))
    {
      if (j) {
        int v9 = (const llvm::Instruction *)(j - 24);
      }
      else {
        int v9 = 0;
      }
      llvm::SlotTracker::processInstructionMetadata(this, v9);
    }
  }
}

uint64_t llvm::SlotTracker::processFunction(llvm::SlotTracker *this)
{
  *((_DWORD *)this + 40) = 0;
  if (!*((unsigned char *)this + 25)) {
    llvm::SlotTracker::processFunctionMetadata(this, *((const llvm::Function **)this + 2));
  }
  uint64_t v2 = *((void *)this + 2);
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 2));
    uint64_t v4 = *((void *)this + 2);
    uint64_t v3 = *(void *)(v2 + 88);
    if (*(_WORD *)(v4 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 2));
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 88);
  }
  uint64_t v5 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  if (v3 != v5)
  {
    while ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
    {
LABEL_26:
      v3 += 40;
      if (v3 == v5) {
        goto LABEL_29;
      }
    }
    unsigned int v59 = (llvm::SlotTracker *)v3;
    int v6 = *((_DWORD *)this + 40);
    *((_DWORD *)this + 40) = v6 + 1;
    int v7 = *((_DWORD *)this + 38);
    if (v7)
    {
      uint64_t v8 = *((void *)this + 17);
      int v9 = v7 - 1;
      unsigned int v10 = v9 & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v11 = (void *)(v8 + 16 * v10);
      uint64_t v12 = *v11;
      if (v3 == *v11)
      {
LABEL_25:
        *((_DWORD *)v11 + 2) = v6;
        goto LABEL_26;
      }
      unsigned int v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          unsigned int v13 = v11;
        }
        unsigned int v16 = v10 + v14++;
        unsigned int v10 = v16 & v9;
        uint64_t v11 = (void *)(v8 + 16 * v10);
        uint64_t v12 = *v11;
        if (v3 == *v11) {
          goto LABEL_25;
        }
      }
      if (v13) {
        unsigned __int8 v17 = v13;
      }
      else {
        unsigned __int8 v17 = v11;
      }
    }
    else
    {
      unsigned __int8 v17 = 0;
    }
    uint64_t v11 = sub_1CC21DC7C((uint64_t)this + 136, (uint64_t)&v59, (uint64_t *)&v59, v17);
    *uint64_t v11 = v59;
    *((_DWORD *)v11 + 2) = 0;
    goto LABEL_25;
  }
LABEL_29:
  uint64_t v18 = *((void *)this + 2);
  uint64_t v19 = *(void *)(v18 + 80);
  uint64_t v56 = v18 + 72;
  if (v19 == v18 + 72) {
    goto LABEL_86;
  }
  do
  {
    if (v19) {
      uint64_t v20 = v19 - 24;
    }
    else {
      uint64_t v20 = 0;
    }
    if ((*(unsigned char *)(v20 + 23) & 0x10) != 0) {
      goto LABEL_50;
    }
    unsigned int v59 = (llvm::SlotTracker *)v20;
    int v21 = *((_DWORD *)this + 40);
    *((_DWORD *)this + 40) = v21 + 1;
    int v22 = *((_DWORD *)this + 38);
    if (!v22)
    {
      uint64_t v32 = 0;
LABEL_48:
      uint64_t v26 = sub_1CC21DC7C((uint64_t)this + 136, (uint64_t)&v59, (uint64_t *)&v59, v32);
      *uint64_t v26 = v59;
      *((_DWORD *)v26 + 2) = 0;
      goto LABEL_49;
    }
    uint64_t v23 = *((void *)this + 17);
    int v24 = v22 - 1;
    unsigned int v25 = v24 & ((v20 >> 4) ^ (v20 >> 9));
    uint64_t v26 = (void *)(v23 + 16 * v25);
    uint64_t v27 = *v26;
    if (v20 != *v26)
    {
      char v28 = 0;
      int v29 = 1;
      while (v27 != -4096)
      {
        if (v28) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = v27 == -8192;
        }
        if (v30) {
          char v28 = v26;
        }
        unsigned int v31 = v25 + v29++;
        unsigned int v25 = v31 & v24;
        uint64_t v26 = (void *)(v23 + 16 * v25);
        uint64_t v27 = *v26;
        if (v20 == *v26) {
          goto LABEL_49;
        }
      }
      if (v28) {
        uint64_t v32 = v28;
      }
      else {
        uint64_t v32 = v26;
      }
      goto LABEL_48;
    }
LABEL_49:
    *((_DWORD *)v26 + 2) = v21;
LABEL_50:
    uint64_t v33 = v20 + 40;
    for (uint64_t i = *(void *)(v20 + 48); i != v33; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v35 = (unsigned __int8 *)(i - 24);
      }
      else {
        uint64_t v35 = 0;
      }
      if (*(unsigned char *)(*(void *)v35 + 8) != 7 && (v35[23] & 0x10) == 0)
      {
        unsigned int v59 = (llvm::SlotTracker *)v35;
        int v36 = *((_DWORD *)this + 40);
        *((_DWORD *)this + 40) = v36 + 1;
        int v37 = *((_DWORD *)this + 38);
        if (v37)
        {
          uint64_t v38 = *((void *)this + 17);
          int v39 = v37 - 1;
          unsigned int v40 = v39 & ((v35 >> 4) ^ (v35 >> 9));
          uint64_t v41 = (unsigned __int8 **)(v38 + 16 * v40);
          unsigned int v42 = *v41;
          if (v35 != *v41)
          {
            uint64_t v43 = 0;
            int v44 = 1;
            while (v42 != (unsigned __int8 *)-4096)
            {
              if (v43) {
                BOOL v45 = 0;
              }
              else {
                BOOL v45 = v42 == (unsigned __int8 *)-8192;
              }
              if (v45) {
                uint64_t v43 = v41;
              }
              unsigned int v46 = v40 + v44++;
              unsigned int v40 = v46 & v39;
              uint64_t v41 = (unsigned __int8 **)(v38 + 16 * v40);
              unsigned int v42 = *v41;
              if (v35 == *v41) {
                goto LABEL_72;
              }
            }
            if (v43) {
              int v47 = v43;
            }
            else {
              int v47 = v41;
            }
LABEL_71:
            uint64_t v41 = (unsigned __int8 **)sub_1CC21DC7C((uint64_t)this + 136, (uint64_t)&v59, (uint64_t *)&v59, v47);
            *uint64_t v41 = (unsigned __int8 *)v59;
            *((_DWORD *)v41 + 2) = 0;
          }
LABEL_72:
          *((_DWORD *)v41 + 2) = v36;
          goto LABEL_73;
        }
        int v47 = 0;
        goto LABEL_71;
      }
LABEL_73:
      unsigned int v48 = v35[16] - 33;
      BOOL v49 = v48 > 0x33;
      uint64_t v50 = (1 << v48) & 0x8000000000041;
      if (!v49 && v50 != 0)
      {
        uint64_t v52 = *(void *)(i + 40);
        if (v52)
        {
          if (*(_DWORD *)(v52 + 8))
          {
            uint64_t v53 = *(void *)(v52 + 40);
            if (v53) {
              llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v53);
            }
          }
        }
      }
    }
    uint64_t v19 = *(void *)(v19 + 8);
  }
  while (v19 != v56);
LABEL_86:
  uint64_t result = *((void *)this + 11);
  if (result)
  {
    char v55 = *((unsigned char *)this + 25);
    uint64_t v58 = *((void *)this + 2);
    unsigned int v59 = this;
    char v57 = v55;
    uint64_t result = (*(uint64_t (**)(uint64_t, llvm::SlotTracker **, uint64_t *, char *))(*(void *)result + 48))(result, &v59, &v58, &v57);
  }
  *((unsigned char *)this + 24) = 1;
  return result;
}

void *llvm::SlotTracker::CreateFunctionSlot(llvm::SlotTracker *this, const llvm::Value *a2)
{
  unsigned int v16 = a2;
  uint64_t v4 = *((void *)this + 17);
  uint64_t result = (void *)((char *)this + 136);
  uint64_t v3 = v4;
  int v5 = *((_DWORD *)result + 6);
  *((_DWORD *)result + 6) = v5 + 1;
  int v6 = *((_DWORD *)result + 4);
  if (!v6)
  {
    BOOL v15 = 0;
LABEL_15:
    uint64_t result = sub_1CC21DC7C((uint64_t)result, (uint64_t)&v16, (uint64_t *)&v16, v15);
    int v9 = (const llvm::Value **)result;
    void *result = v16;
    *((_DWORD *)result + 2) = 0;
    goto LABEL_16;
  }
  int v7 = v6 - 1;
  unsigned int v8 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v9 = (const llvm::Value **)(v3 + 16 * v8);
  unsigned int v10 = *v9;
  if (*v9 != a2)
  {
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != (const llvm::Value *)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (const llvm::Value *)-8192;
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      int v9 = (const llvm::Value **)(v3 + 16 * (v14 & v7));
      unsigned int v10 = *v9;
      if (*v9 == a2) {
        goto LABEL_16;
      }
    }
    if (v11) {
      BOOL v15 = v11;
    }
    else {
      BOOL v15 = v9;
    }
    goto LABEL_15;
  }
LABEL_16:
  *((_DWORD *)v9 + 2) = v5;
  return result;
}

void *llvm::SlotTracker::CreateGUIDSlot(llvm::SlotTracker *this, uint64_t a2)
{
  uint64_t v4 = a2;
  int v2 = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = v2 + 1;
  uint64_t result = sub_1CD54145C((uint64_t)this + 272, &v4);
  *((_DWORD *)result + 2) = v2;
  return result;
}

uint64_t llvm::SlotTracker::CreateTypeIdSlot(uint64_t result, unsigned __int8 *a2, size_t a3)
{
  uint64_t v4 = (_DWORD *)result;
  int v5 = *(_DWORD *)(result + 336);
  *(_DWORD *)(result + 336) = v5 + 1;
  unsigned int v6 = *(_DWORD *)(result + 312);
  if (!v6)
  {
    *(void *)(result + 316) = 0;
    uint64_t result = (uint64_t)malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!result) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    *(void *)(result + 128) = 2;
    *((void *)v4 + 38) = result;
    unsigned int v6 = 16;
    v4[78] = 16;
  }
  int v26 = v5;
  int v7 = 0;
  if (a3)
  {
    size_t v8 = a3;
    int v9 = a2;
    do
    {
      int v10 = *v9++;
      int v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *((void *)v4 + 38);
  unsigned int v12 = v6 - 1;
  uint64_t v13 = v11 + 8 * v6 + 8;
  int v14 = -1;
  int v15 = 1;
  int v16 = v7;
  while (1)
  {
    uint64_t v17 = v16 & v12;
    uint64_t v18 = *(void *)(v11 + 8 * v17);
    if (!v18) {
      break;
    }
    if (v18 == -8)
    {
      if (v14 == -1) {
        int v14 = v16 & v12;
      }
    }
    else if (*(_DWORD *)(v13 + 4 * v17) == v7 && a3 == *(void *)v18)
    {
      if (!a3) {
        goto LABEL_20;
      }
      uint64_t result = memcmp(a2, (const void *)(v18 + v4[81]), a3);
      if (!result) {
        goto LABEL_20;
      }
    }
    int v16 = v15 + v17;
    ++v15;
  }
  uint64_t v19 = v14;
  if (v14 == -1)
  {
    uint64_t v19 = v17;
    uint64_t v17 = v17;
  }
  else
  {
    uint64_t v17 = v14;
  }
  *(_DWORD *)(v13 + 4 * v19) = v7;
  uint64_t v18 = *(void *)(v11 + 8 * v17);
LABEL_20:
  if (v18)
  {
    if (v18 != -8)
    {
      int v23 = v26;
      goto LABEL_33;
    }
    --v4[80];
  }
  uint64_t v20 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  int v21 = v20;
  int v22 = v20 + 16;
  int v23 = v26;
  if (a3) {
    memcpy(v20 + 16, a2, a3);
  }
  v22[a3] = 0;
  *(void *)int v21 = a3;
  *((_DWORD *)v21 + 2) = 0;
  *(void *)(v11 + 8 * v17) = v21;
  ++v4[79];
  uint64_t result = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v4 + 76), v17);
  for (uint64_t i = (uint64_t *)(*((void *)v4 + 38) + 8 * result); ; ++i)
  {
    uint64_t v18 = *i;
    if (*i && v18 != -8) {
      break;
    }
  }
LABEL_33:
  *(_DWORD *)(v18 + 8) = v23;
  return result;
}

void llvm::SlotTracker::processInstructionMetadata(llvm::SlotTracker *this, const llvm::Instruction *a2)
{
  void v20[8] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 16) == 84)
  {
    uint64_t v10 = *((void *)a2 - 4);
    if (v10)
    {
      if (!*(unsigned char *)(v10 + 16) && *(void *)(v10 + 24) == *((void *)a2 + 9) && (*(unsigned char *)(v10 + 33) & 0x20) != 0)
      {
        int v11 = *((_DWORD *)a2 + 5);
        if ((v11 & 0x40000000) != 0)
        {
          uint64_t v13 = (uint64_t *)*((void *)a2 - 1);
          uint64_t v12 = v11 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v12 = v11 & 0x7FFFFFF;
          uint64_t v13 = (uint64_t *)((char *)a2 - 32 * v12);
        }
        if (v12)
        {
          uint64_t v14 = 32 * v12;
          do
          {
            uint64_t v15 = *v13;
            if (*v13)
            {
              if (*(unsigned char *)(v15 + 16) == 23)
              {
                int v16 = *(const llvm::MDNode **)(v15 + 24);
                if (*(unsigned __int8 *)v16 - 4 <= 0x1E) {
                  llvm::SlotTracker::CreateMetadataSlot(this, v16);
                }
              }
            }
            v13 += 4;
            v14 -= 32;
          }
          while (v14);
        }
      }
    }
  }
  uint64_t v17 = v20;
  int v19 = 4;
  uint64_t v4 = *((void *)a2 + 6);
  if (v4)
  {
    v20[0] = 0;
    v20[1] = v4;
    int v5 = 1;
  }
  else
  {
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      return;
    }
    int v5 = 0;
  }
  unsigned int v18 = v5;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v17);
  unsigned int v6 = v17;
  if (v18)
  {
    uint64_t v7 = 16 * v18;
    size_t v8 = (const llvm::MDNode **)((char *)v17 + 8);
    do
    {
      int v9 = *v8;
      v8 += 2;
      llvm::SlotTracker::CreateMetadataSlot(this, v9);
      v7 -= 16;
    }
    while (v7);
    unsigned int v6 = v17;
  }
  if (v6 != v20) {
    free(v6);
  }
}

llvm::SlotTracker *sub_1CC4EF170(llvm::SlotTracker *this)
{
  int v1 = this;
  if (*((void *)this + 1))
  {
    this = (llvm::SlotTracker *)llvm::SlotTracker::processModule(this);
    *((void *)v1 + 1) = 0;
  }
  if (*((void *)v1 + 2) && !*((unsigned char *)v1 + 24))
  {
    return (llvm::SlotTracker *)llvm::SlotTracker::processFunction(v1);
  }
  return this;
}

uint64_t llvm::SlotTracker::getMetadataSlot(llvm::SlotTracker *this, const llvm::MDNode *a2)
{
  if (*((void *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((void *)this + 1) = 0;
  }
  if (*((void *)this + 2) && !*((unsigned char *)this + 24)) {
    llvm::SlotTracker::processFunction(this);
  }
  uint64_t v4 = *((void *)this + 21);
  uint64_t v5 = *((unsigned int *)this + 46);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = v4 + 16 * v6;
    size_t v8 = *(const llvm::MDNode **)v7;
    if (*(const llvm::MDNode **)v7 == a2) {
      goto LABEL_13;
    }
    int v9 = 1;
    while (v8 != (const llvm::MDNode *)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      size_t v8 = *(const llvm::MDNode **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = v4 + 16 * v6;
        goto LABEL_13;
      }
    }
  }
  uint64_t v7 = v4 + 16 * v5;
LABEL_13:
  if (v7 == v4 + 16 * v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(v7 + 8);
  }
}

uint64_t llvm::SlotTracker::getAttributeGroupSlot(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    llvm::SlotTracker::processModule((llvm::SlotTracker *)a1);
    *(void *)(a1 + 8) = 0;
  }
  if (*(void *)(a1 + 16) && !*(unsigned char *)(a1 + 24)) {
    llvm::SlotTracker::processFunction((llvm::SlotTracker *)a1);
  }
  uint64_t v7 = 0;
  char v4 = sub_1CC505574(*(void *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0) {
    uint64_t v5 = *(void *)(a1 + 200) + 16 * *(unsigned int *)(a1 + 216);
  }
  if (v5 == *(void *)(a1 + 200) + 16 * *(unsigned int *)(a1 + 216)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(v5 + 8);
  }
}

uint64_t sub_1CC4EF34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  uint64_t v8 = a1 + 232;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a5;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(unsigned char *)(a1 + 280) = a6;
  *(unsigned char *)(a1 + 281) = a7;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a1 + 328;
  *(void *)(a1 + 320) = 0x800000000;
  *(void *)(a1 + 456) = a1 + 472;
  *(void *)(a1 + 464) = 0x800000000;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 616) = 0;
  if (a4)
  {
    int v9 = (void *)(a1 + 256);
    uint64_t v10 = a4 + 24;
    uint64_t v11 = *(void *)(a4 + 32);
    uint64_t v12 = a4 + 8;
    uint64_t v13 = *(void *)(a4 + 16);
    uint64_t v32 = v11;
    uint64_t v33 = v13;
    uint64_t v34 = a4 + 24;
    uint64_t v35 = a4 + 8;
    BOOL v30 = (void **)(a1 + 256);
    while (1)
    {
      if (v11 == v10 && v13 == v12)
      {
        BOOL v14 = v34 == v10 && v35 == v12;
        if (v14) {
          break;
        }
      }
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = (*(uint64_t (**)(uint64_t *))((char *)&off_1F2616188 + v15))(&v32);
        v15 += 16;
      }
      while (!v16);
      uint64_t v31 = *(void *)(v16 + 48);
      if (v31)
      {
        sub_1CD4201D0(v8, &v31, (uint64_t)v36);
        if (v36[16])
        {
          int v19 = *(void **)(a1 + 264);
          unint64_t v18 = *(void *)(a1 + 272);
          if ((unint64_t)v19 >= v18)
          {
            int v21 = (void *)*v9;
            uint64_t v22 = v19 - v21;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61) {
              abort();
            }
            uint64_t v24 = v18 - (void)v21;
            if (v24 >> 2 > v23) {
              unint64_t v23 = v24 >> 2;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              if (v25 >> 61) {
                sub_1CB833614();
              }
              int v26 = (char *)operator new(8 * v25);
            }
            else
            {
              int v26 = 0;
            }
            uint64_t v27 = &v26[8 * v22];
            *(void *)uint64_t v27 = v31;
            uint64_t v20 = v27 + 8;
            if (v19 == v21)
            {
              int v9 = v30;
            }
            else
            {
              do
              {
                uint64_t v28 = *--v19;
                *((void *)v27 - 1) = v28;
                v27 -= 8;
              }
              while (v19 != v21);
              int v9 = v30;
              int v19 = *v30;
            }
            *(void *)(a1 + 256) = v27;
            *(void *)(a1 + 264) = v20;
            *(void *)(a1 + 272) = &v26[8 * v25];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *int v19 = v31;
            uint64_t v20 = v19 + 1;
          }
          *(void *)(a1 + 264) = v20;
        }
      }
      uint64_t v17 = 0;
      do
      {
        if ((*(uint64_t (**)(uint64_t *))((char *)&off_1F26161A8 + v17))(&v32)) {
          break;
        }
        BOOL v14 = v17 == 16;
        v17 += 16;
      }
      while (!v14);
      uint64_t v11 = v32;
      uint64_t v13 = v33;
    }
  }
  return a1;
}

_DWORD *sub_1CC4EF5C8(llvm::raw_ostream **a1, llvm::LLVMContext ***a2)
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  char v4 = a1[28];
  if (v4) {
    (*(void (**)(llvm::raw_ostream *, llvm::LLVMContext ***, llvm::raw_ostream *))(*(void *)v4 + 16))(v4, a2, *a1);
  }
  if ((*((unsigned char *)a2 + 34) & 0x80) != 0)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v6) > 0x10)
    {
      *(unsigned char *)(v6 + 16) = 10;
      *(_OWORD *)uint64_t v6 = *(_OWORD *)"; Materializable\n";
      *((void *)v5 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v5, "; Materializable\n", 0x11uLL);
    }
  }
  uint64_t v7 = a2[14];
  if (v7)
  {
    if (*((_DWORD *)v7 + 2))
    {
      int v21 = v7[5];
      if (v21)
      {
        memset(__p, 0, 24);
        uint64_t v22 = *((unsigned int *)v21 + 2);
        if (v22)
        {
          unint64_t v23 = (llvm::LLVMContext *)((char *)v21 + 48);
          uint64_t v24 = 8 * v22;
          do
          {
            if (!*(void *)v23 || *(unsigned char *)(*(void *)v23 + 8) != 2)
            {
              std::string::size_type size = *((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
              }
              if (size) {
                std::string::push_back(__p, 32);
              }
              llvm::Attribute::getAsString(v23, 0, &v189);
              if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v26 = &v189;
              }
              else {
                int v26 = (std::string *)v189.__r_.__value_.__r.__words[0];
              }
              if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v27 = *((unsigned char *)&v189.__r_.__value_.__s + 23) & 0x7F;
              }
              else {
                std::string::size_type v27 = v189.__r_.__value_.__l.__size_;
              }
              std::string::append(__p, (const std::string::value_type *)v26, v27);
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v189.__r_.__value_.__l.__data_);
              }
            }
            unint64_t v23 = (llvm::Attribute *)((char *)v23 + 8);
            v24 -= 8;
          }
          while (v24);
          std::string::size_type v28 = *((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v28 = __p[0].__r_.__value_.__l.__size_;
          }
          if (v28)
          {
            int v29 = *a1;
            uint64_t v30 = *((void *)*a1 + 4);
            if ((unint64_t)(*((void *)*a1 + 3) - v30) > 0x11)
            {
              *(_WORD *)(v30 + 16) = 8250;
              *(_OWORD *)uint64_t v30 = *(_OWORD *)"; Function Attrs: ";
              *((void *)v29 + 4) += 18;
            }
            else
            {
              int v29 = llvm::raw_ostream::write(v29, "; Function Attrs: ", 0x12uLL);
            }
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v31 = __p;
            }
            else {
              uint64_t v31 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            }
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v32 = *((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
            }
            else {
              size_t v32 = __p[0].__r_.__value_.__l.__size_;
            }
            uint64_t v33 = llvm::raw_ostream::write(v29, (const char *)v31, v32);
            uint64_t v34 = (unsigned char *)*((void *)v33 + 4);
            if ((unint64_t)v34 >= *((void *)v33 + 3))
            {
              llvm::raw_ostream::write(v33, 10);
            }
            else
            {
              *((void *)v33 + 4) = v34 + 1;
              *uint64_t v34 = 10;
            }
          }
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v8 = a1[4];
  *((void *)v8 + 2) = a2;
  *((unsigned char *)v8 + 24) = 0;
  if (a2 && *((unsigned char *)a2 + 16) == 3)
  {
    int v9 = *a1;
    uint64_t v10 = (_DWORD **)((char *)*a1 + 32);
    uint64_t v11 = *v10;
    BOOL v12 = *((void *)*a1 + 3) - (void)*v10 < 7uLL;
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if (*((unsigned char *)a2 + 16) || a2[9] != (llvm::LLVMContext **)(a2 + 9))
    {
      int v9 = *a1;
      uint64_t v10 = (_DWORD **)((char *)*a1 + 32);
      uint64_t v11 = *v10;
      if (*((void *)*a1 + 3) - (void)*v10 >= 7uLL) {
        goto LABEL_11;
      }
LABEL_15:
      llvm::raw_ostream::write(v9, "define ", 7uLL);
      goto LABEL_16;
    }
    int v9 = *a1;
    uint64_t v10 = (_DWORD **)((char *)*a1 + 32);
    uint64_t v11 = *v10;
    BOOL v12 = *((void *)*a1 + 3) - (void)*v10 < 7uLL;
    if ((*((unsigned char *)a2 + 34) & 0x80) != 0)
    {
LABEL_10:
      if (!v12)
      {
LABEL_11:
        *(_DWORD *)((char *)v11 + 3) = 543518313;
        *uint64_t v11 = 1768318308;
        *uint64_t v10 = (_DWORD *)((char *)*v10 + 7);
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  if (v12)
  {
    llvm::raw_ostream::write(v9, "declare", 7uLL);
  }
  else
  {
    *(_DWORD *)((char *)v11 + 3) = 1701994860;
    *uint64_t v11 = 1818453348;
    *uint64_t v10 = (_DWORD *)((char *)*v10 + 7);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
  __p[0].__r_.__value_.__l.__size_ = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)__p);
  sub_1CC4FA2F4((uint64_t *)a1, __p, " ", 1uLL);
  uint64_t v171 = *a1;
  uint64_t v172 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v172 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v171, 32);
  }
  else
  {
    *((void *)v171 + 4) = v172 + 1;
    *uint64_t v172 = 32;
  }
  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2]) {
    free(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_16:
  uint64_t v13 = *a1;
  sub_1CC4FA53C((uint64_t)__p, a2[4] & 0xF);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v14 = __p;
  }
  else {
    BOOL v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v15 = *((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t v15 = __p[0].__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(v13, (const char *)v14, v15);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  sub_1CC4FA5B4((llvm::raw_ostream *)a2, *a1);
  int v16 = (*((_DWORD *)a2 + 8) >> 4) & 3;
  uint64_t v17 = *a1;
  if (v16 == 2)
  {
    uint64_t v35 = *((void *)v17 + 4);
    if ((unint64_t)(*((void *)v17 + 3) - v35) <= 9)
    {
      int v19 = "protected ";
      size_t v20 = 10;
      goto LABEL_62;
    }
    *(_WORD *)(v35 + 8) = 8292;
    *(void *)uint64_t v35 = *(void *)"protected ";
    uint64_t v186 = *((void *)v17 + 4) + 10;
  }
  else
  {
    if (v16 != 1) {
      goto LABEL_63;
    }
    unint64_t v18 = (_DWORD *)*((void *)v17 + 4);
    if (*((void *)v17 + 3) - (void)v18 <= 6uLL)
    {
      int v19 = "hidden ";
      size_t v20 = 7;
LABEL_62:
      llvm::raw_ostream::write(v17, v19, v20);
      goto LABEL_63;
    }
    *(_DWORD *)((char *)v18 + 3) = 544105828;
    *unint64_t v18 = 1684302184;
    uint64_t v186 = *((void *)v17 + 4) + 7;
  }
  *((void *)v17 + 4) = v186;
LABEL_63:
  int v36 = (*((_DWORD *)a2 + 8) >> 8) & 3;
  int v37 = *a1;
  if (v36 == 2)
  {
    uint64_t v38 = *((void *)v37 + 4);
    if ((unint64_t)(*((void *)v37 + 3) - v38) <= 9)
    {
      int v39 = "dllexport ";
      goto LABEL_69;
    }
    unsigned int v187 = "dllexport ";
  }
  else
  {
    if (v36 != 1) {
      goto LABEL_70;
    }
    uint64_t v38 = *((void *)v37 + 4);
    if ((unint64_t)(*((void *)v37 + 3) - v38) <= 9)
    {
      int v39 = "dllimport ";
LABEL_69:
      llvm::raw_ostream::write(v37, v39, 0xAuLL);
      goto LABEL_70;
    }
    unsigned int v187 = "dllimport ";
  }
  *(_WORD *)(v38 + 8) = 8308;
  *(void *)uint64_t v38 = *(void *)v187;
  *((void *)v37 + 4) += 10;
LABEL_70:
  unsigned int v40 = (llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FF);
  if (v40)
  {
    sub_1CC4FA65C(v40, *a1);
    uint64_t v41 = *a1;
    unsigned int v42 = (unsigned char *)*((void *)*a1 + 4);
    if (*((unsigned char **)*a1 + 3) == v42)
    {
      llvm::raw_ostream::write(v41, " ", 1uLL);
    }
    else
    {
      *unsigned int v42 = 32;
      ++*((void *)v41 + 4);
    }
  }
  uint64_t v43 = a2[3];
  int v44 = v43;
  if (v7)
  {
    int v44 = a2[3];
    if (*((_DWORD *)v7 + 2) >= 2u)
    {
      uint64_t v105 = v7[6];
      int v44 = a2[3];
      if (v105)
      {
        uint64_t v106 = *a1;
        llvm::AttributeSetNode::getAsString(v105, 0, __p);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v107 = __p;
        }
        else {
          uint64_t v107 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v108 = *((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t v108 = __p[0].__r_.__value_.__l.__size_;
        }
        llvm::raw_ostream::write(v106, (const char *)v107, v108);
        char v109 = (unsigned char *)*((void *)v106 + 4);
        if ((unint64_t)v109 >= *((void *)v106 + 3))
        {
          llvm::raw_ostream::write(v106, 32);
        }
        else
        {
          *((void *)v106 + 4) = v109 + 1;
          *char v109 = 32;
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        int v44 = a2[3];
      }
    }
  }
  sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *(void *)v44[2], *a1);
  std::string::size_type v45 = (std::string::size_type)a1[4];
  unsigned int v46 = a2[5];
  v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F26161D8;
  v189.__r_.__value_.__l.__size_ = (std::string::size_type)(a1 + 5);
  v189.__r_.__value_.__r.__words[2] = v45;
  uint64_t v190 = v46;
  int v47 = *a1;
  unsigned int v48 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v48 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v47, 32);
  }
  else
  {
    *((void *)v47 + 4) = v48 + 1;
    *unsigned int v48 = 32;
  }
  sub_1CC4FB368(*a1, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)&v189);
  BOOL v49 = *a1;
  uint64_t v50 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v50 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v49, 40);
  }
  else
  {
    *((void *)v49 + 4) = v50 + 1;
    *uint64_t v50 = 40;
  }
  uint64_t v188 = v43;
  if (a2 && *((unsigned char *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
    {
LABEL_102:
      uint64_t v59 = sub_1CB923B44((llvm::Function *)a2);
      if ((uint64_t ***)v59 == v60) {
        goto LABEL_160;
      }
      BOOL v61 = (uint64_t ***)v59;
      unsigned int v62 = v60;
      while (1)
      {
        if (!*((_DWORD *)v61 + 8)) {
          goto LABEL_107;
        }
        char v63 = *a1;
        int v64 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v64 <= 1uLL) {
          break;
        }
        _WORD *v64 = 8236;
        *((void *)v63 + 4) += 2;
        if (!v7)
        {
LABEL_109:
          uint64_t v66 = 0;
          goto LABEL_110;
        }
LABEL_108:
        unsigned int v65 = *((_DWORD *)v61 + 8) + 2;
        if (v65 >= *((_DWORD *)v7 + 2)) {
          goto LABEL_109;
        }
        uint64_t v66 = (uint64_t)v7[v65 + 5];
LABEL_110:
        sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), (unint64_t)*v61, *a1);
        if (v66)
        {
          int v67 = *a1;
          uint64_t v68 = (unsigned char *)*((void *)*a1 + 4);
          if ((unint64_t)v68 >= *((void *)*a1 + 3))
          {
            llvm::raw_ostream::write(v67, 32);
          }
          else
          {
            *((void *)v67 + 4) = v68 + 1;
            *uint64_t v68 = 32;
          }
          sub_1CC4FBB24(a1, v66);
        }
        if ((*((unsigned char *)v61 + 23) & 0x10) != 0)
        {
          uint64_t v77 = *a1;
          uint64_t v78 = (unsigned char *)*((void *)*a1 + 4);
          if ((unint64_t)v78 >= *((void *)*a1 + 3))
          {
            llvm::raw_ostream::write(v77, 32);
          }
          else
          {
            *((void *)v77 + 4) = v78 + 1;
            unsigned char *v78 = 32;
          }
          if ((*((unsigned char *)v61 + 23) & 0x10) != 0)
          {
            uint64_t v79 = ***v61;
            uint64_t v80 = *(void *)(v79 + 152);
            uint64_t v81 = *(unsigned int *)(v79 + 168);
            if (!v81) {
              goto LABEL_146;
            }
            LODWORD(v82) = (v81 - 1) & ((v61 >> 4) ^ (v61 >> 9));
            int64_t v83 = (uint64_t ****)(v80 + 16 * v82);
            int64_t v84 = *v83;
            if (*v83 != v61)
            {
              int v85 = 1;
              while (v84 != (uint64_t ***)-4096)
              {
                int v86 = v82 + v85++;
                uint64_t v82 = v86 & (v81 - 1);
                int64_t v84 = *(uint64_t ****)(v80 + 16 * v82);
                if (v84 == v61)
                {
                  int64_t v83 = (uint64_t ****)(v80 + 16 * v82);
                  goto LABEL_147;
                }
              }
LABEL_146:
              int64_t v83 = (uint64_t ****)(v80 + 16 * v81);
            }
LABEL_147:
            uint64_t v92 = (size_t *)v83[1];
            size_t v95 = *v92;
            uint64_t v93 = (llvm::raw_ostream *)(v92 + 2);
            size_t v94 = v95;
          }
          else
          {
            size_t v94 = 0;
            uint64_t v93 = (llvm::raw_ostream *)&byte_1CFBCE98E;
          }
          if (*((unsigned __int8 *)v61 + 16) >= 4u) {
            int v96 = 3;
          }
          else {
            int v96 = 0;
          }
          sub_1CC4F2BA0(*a1, v93, v94, v96);
          goto LABEL_152;
        }
        uint64_t v69 = a1[4];
        if (*((void *)v69 + 1))
        {
          llvm::SlotTracker::processModule(a1[4]);
          *((void *)v69 + 1) = 0;
        }
        if (*((void *)v69 + 2) && !*((unsigned char *)v69 + 24)) {
          llvm::SlotTracker::processFunction(v69);
        }
        uint64_t v70 = *((void *)v69 + 17);
        uint64_t v71 = *((unsigned int *)v69 + 38);
        if (!v71) {
          goto LABEL_137;
        }
        LODWORD(v72) = (v71 - 1) & ((v61 >> 4) ^ (v61 >> 9));
        uint64_t v73 = v70 + 16 * v72;
        unsigned int v74 = *(uint64_t ****)v73;
        if (*(uint64_t ****)v73 != v61)
        {
          int v75 = 1;
          while (v74 != (uint64_t ***)-4096)
          {
            int v76 = v72 + v75++;
            uint64_t v72 = v76 & (v71 - 1);
            unsigned int v74 = *(uint64_t ****)(v70 + 16 * v72);
            if (v74 == v61)
            {
              uint64_t v73 = v70 + 16 * v72;
              goto LABEL_138;
            }
          }
LABEL_137:
          uint64_t v73 = v70 + 16 * v71;
        }
LABEL_138:
        if (v73 == v70 + 16 * v71) {
          int v87 = -1;
        }
        else {
          int v87 = *(_DWORD *)(v73 + 8);
        }
        unint64_t v88 = *a1;
        unsigned int v89 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v89 > 1uLL)
        {
          *unsigned int v89 = 9504;
          *((void *)v88 + 4) += 2;
        }
        else
        {
          unint64_t v88 = llvm::raw_ostream::write(v88, " %", 2uLL);
        }
        unint64_t v90 = v87;
        if (v87 < 0)
        {
          unint64_t v90 = -(uint64_t)v87;
          int v91 = 1;
        }
        else
        {
          int v91 = 0;
        }
        sub_1CD098D14(v88, v90, 0, 0, v91);
LABEL_152:
        v61 += 5;
        if (v61 == v62) {
          goto LABEL_160;
        }
      }
      llvm::raw_ostream::write(v63, ", ", 2uLL);
LABEL_107:
      if (!v7) {
        goto LABEL_109;
      }
      goto LABEL_108;
    }
  }
  else if (*((unsigned char *)a2 + 16) || a2[9] != (llvm::LLVMContext **)(a2 + 9) || (*((unsigned char *)a2 + 34) & 0x80) != 0)
  {
    goto LABEL_102;
  }
  if (*((unsigned char *)a1 + 280)) {
    goto LABEL_102;
  }
  int v51 = *((_DWORD *)v43 + 3);
  uint64_t v52 = (v51 - 1);
  if (v51 != 1)
  {
    uint64_t v53 = 0;
    do
    {
      if (v53)
      {
        uint64_t v54 = *a1;
        char v55 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v55 > 1uLL)
        {
          *char v55 = 8236;
          *((void *)v54 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v54, ", ", 2uLL);
        }
      }
      sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *((void *)v188[2] + v53 + 1), *a1);
      if (v7)
      {
        if ((v53 + 2) < *((_DWORD *)v7 + 2))
        {
          uint64_t v56 = (uint64_t)v7[(v53 + 2) + 5];
          if (v56)
          {
            char v57 = *a1;
            uint64_t v58 = (unsigned char *)*((void *)*a1 + 4);
            if ((unint64_t)v58 >= *((void *)*a1 + 3))
            {
              llvm::raw_ostream::write(v57, 32);
            }
            else
            {
              *((void *)v57 + 4) = v58 + 1;
              *uint64_t v58 = 32;
            }
            sub_1CC4FBB24(a1, v56);
          }
        }
      }
      ++v53;
    }
    while (v52 != v53);
  }
LABEL_160:
  if (*((_DWORD *)v188 + 2) >= 0x100u)
  {
    if (*((_DWORD *)v188 + 3) != 1)
    {
      uint64_t v97 = *a1;
      uint64_t v98 = (_WORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v98 > 1uLL)
      {
        *uint64_t v98 = 8236;
        *((void *)v97 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v97, ", ", 2uLL);
      }
    }
    uint64_t v99 = *a1;
    uint64_t v100 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v100) > 2)
    {
      *(unsigned char *)(v100 + 2) = 46;
      *(_WORD *)uint64_t v100 = 11822;
      *((void *)v99 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v99, "...", 3uLL);
    }
  }
  unsigned int v101 = *a1;
  unsigned int v102 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v102 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v101, 41);
  }
  else
  {
    *((void *)v101 + 4) = v102 + 1;
    *unsigned int v102 = 41;
  }
  if (*((_DWORD *)a2 + 8) >> 6)
  {
    if (*((_DWORD *)a2 + 8) >> 6 == 1)
    {
      uint64_t v103 = "local_unnamed_addr";
      size_t v104 = 18;
    }
    else
    {
      uint64_t v103 = "unnamed_addr";
      size_t v104 = 12;
    }
    unsigned int v110 = *a1;
    uint64_t v111 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v111 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(*a1, 32);
    }
    else
    {
      *((void *)v110 + 4) = v111 + 1;
      *uint64_t v111 = 32;
    }
    unint64_t v112 = (void *)*((void *)v110 + 4);
    if (v104 <= *((void *)v110 + 3) - (void)v112)
    {
      memcpy(v112, v103, v104);
      *((void *)v110 + 4) += v104;
    }
    else
    {
      llvm::raw_ostream::write(v110, v103, v104);
    }
  }
  if (*((_DWORD *)*a2 + 2) > 0xFFu || (int v113 = a2[5]) == 0 || *((_DWORD *)v113 + 71))
  {
    uint64_t v114 = *a1;
    uint64_t v115 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v115) > 0xA)
    {
      *(_DWORD *)(v115 + 7) = 677733217;
      *(void *)uint64_t v115 = *(void *)" addrspace(";
      *((void *)v114 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(*a1, " addrspace(", 0xBuLL);
    }
    sub_1CD098D14(v114, (unint64_t)*((unsigned int *)*a2 + 2) >> 8, 0, 0, 0);
    unsigned int v116 = (unsigned char *)*((void *)v114 + 4);
    if (*((unsigned char **)v114 + 3) != v116)
    {
      *unsigned int v116 = 41;
      ++*((void *)v114 + 4);
      if (!v7) {
        goto LABEL_197;
      }
      goto LABEL_303;
    }
    llvm::raw_ostream::write(v114, ")", 1uLL);
  }
  if (!v7) {
    goto LABEL_197;
  }
LABEL_303:
  if (*((_DWORD *)v7 + 2) && v7[5])
  {
    uint64_t v179 = (uint64_t)*a1;
    unint64_t v180 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v180 > 1uLL)
    {
      *unint64_t v180 = 8992;
      *(void *)(v179 + 32) += 2;
    }
    else
    {
      llvm::raw_ostream::write(*a1, " #", 2uLL);
    }
    if (*((_DWORD *)v7 + 2)) {
      uint64_t v181 = (uint64_t)v7[5];
    }
    else {
      uint64_t v181 = 0;
    }
    int AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v181);
    unint64_t v183 = AttributeGroupSlot;
    if (AttributeGroupSlot < 0)
    {
      unint64_t v183 = -(uint64_t)AttributeGroupSlot;
      unsigned int v184 = (llvm::raw_ostream *)v179;
      int v185 = 1;
    }
    else
    {
      unsigned int v184 = (llvm::raw_ostream *)v179;
      int v185 = 0;
    }
    sub_1CD098D14(v184, v183, 0, 0, v185);
  }
LABEL_197:
  if ((*((unsigned char *)a2 + 34) & 0x40) == 0) {
    goto LABEL_208;
  }
  uint64_t v117 = *a1;
  uint64_t v118 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v118) > 9)
  {
    *(_WORD *)(v118 + 8) = 8736;
    *(void *)uint64_t v118 = *(void *)" section \"";
    *((void *)v117 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v117, " section \"", 0xAuLL);
  }
  if ((*((unsigned char *)a2 + 34) & 0x40) == 0)
  {
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    goto LABEL_205;
  }
  uint64_t v121 = *(void *)**a2;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  int v122 = *(_DWORD *)(v121 + 2520);
  if (!v122)
  {
    uint64_t v177 = 0;
LABEL_300:
    unsigned int v126 = sub_1CC5BF31C(v121 + 2504, (uint64_t)__p, (uint64_t *)__p, v177);
    std::string::size_type v178 = __p[0].__r_.__value_.__r.__words[0];
    v126[1] = 0;
    v126[2] = 0;
    *unsigned int v126 = v178;
    goto LABEL_204;
  }
  uint64_t v123 = *(void *)(v121 + 2504);
  int v124 = v122 - 1;
  unsigned int v125 = v124 & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v126 = (void *)(v123 + 24 * v125);
  uint64_t v127 = (void ***)*v126;
  if ((llvm::LLVMContext ***)*v126 != a2)
  {
    unsigned int v173 = 0;
    int v174 = 1;
    while (v127 != (void ***)-4096)
    {
      if (v173) {
        BOOL v175 = 0;
      }
      else {
        BOOL v175 = v127 == (void ***)-8192;
      }
      if (v175) {
        unsigned int v173 = v126;
      }
      unsigned int v176 = v125 + v174++;
      unsigned int v125 = v176 & v124;
      unsigned int v126 = (void *)(v123 + 24 * v125);
      uint64_t v127 = (void ***)*v126;
      if ((llvm::LLVMContext ***)*v126 == a2) {
        goto LABEL_204;
      }
    }
    if (v173) {
      uint64_t v177 = v173;
    }
    else {
      uint64_t v177 = v126;
    }
    goto LABEL_300;
  }
LABEL_204:
  uint64_t v119 = (llvm::raw_ostream *)v126[1];
  uint64_t v120 = v126[2];
LABEL_205:
  llvm::printEscapedString(v119, v120, *a1);
  uint64_t v128 = *a1;
  int v129 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v129 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v128, 34);
  }
  else
  {
    *((void *)v128 + 4) = v129 + 1;
    unsigned char *v129 = 34;
  }
LABEL_208:
  if ((*((unsigned char *)a2 + 33) & 0x80) != 0)
  {
    uint64_t v130 = *a1;
    uint64_t v131 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v131) > 0xB)
    {
      *(_DWORD *)(v131 + 8) = 572550767;
      *(void *)uint64_t v131 = *(void *)" partition \"";
      *((void *)v130 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v130, " partition \"", 0xCuLL);
    }
    Partitioint n = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v133, *a1);
    uint64_t v134 = *a1;
    unsigned int v135 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v135 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v134, 34);
    }
    else
    {
      *((void *)v134 + 4) = v135 + 1;
      unsigned char *v135 = 34;
    }
  }
  sub_1CC4FBD0C(*a1, (uint64_t ***)a2);
  if ((*((_WORD *)a2 + 17) & 0x3F) != 0)
  {
    char v136 = (*((_WORD *)a2 + 17) & 0x3F) - 1;
    uint64_t v137 = *a1;
    uint64_t v138 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v138 > 6uLL)
    {
      *(_DWORD *)((char *)v138 + 3) = 544106345;
      _DWORD *v138 = 1768710432;
      *((void *)v137 + 4) += 7;
    }
    else
    {
      uint64_t v137 = llvm::raw_ostream::write(v137, " align ", 7uLL);
    }
    sub_1CD098D14(v137, 1 << v136, 0, 0, 0);
  }
  if ((*((_WORD *)a2 + 9) & 0x4000) != 0)
  {
    char v139 = *a1;
    uint64_t v140 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v140) > 4)
    {
      *(unsigned char *)(v140 + 4) = 34;
      *(_DWORD *)uint64_t v140 = 543385376;
      *((void *)v139 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(*a1, " gc \"", 5uLL);
    }
    GC = llvm::LLVMContext::getGC(**a2, (const llvm::Function *)a2);
    char v142 = *((unsigned char *)GC + 23);
    BOOL v143 = v142 < 0;
    if (v142 >= 0) {
      uint64_t v144 = (const char *)GC;
    }
    else {
      uint64_t v144 = (const char *)*GC;
    }
    size_t v145 = v142 & 0x7F;
    if (v143) {
      size_t v146 = GC[1];
    }
    else {
      size_t v146 = v145;
    }
    llvm::raw_ostream::write(v139, v144, v146);
    unint64_t v147 = (unsigned char *)*((void *)v139 + 4);
    if ((unint64_t)v147 >= *((void *)v139 + 3))
    {
      llvm::raw_ostream::write(v139, 34);
    }
    else
    {
      *((void *)v139 + 4) = v147 + 1;
      *unint64_t v147 = 34;
    }
  }
  __int16 v148 = *((_WORD *)a2 + 9);
  if ((v148 & 2) != 0)
  {
    uint64_t v149 = *a1;
    uint64_t v150 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v150 > 7uLL)
    {
      *uint64_t v150 = 0x2078696665727020;
      *((void *)v149 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v149, " prefix ", 8uLL);
    }
    int v151 = *((_DWORD *)a2 + 5);
    if ((v151 & 0x40000000) != 0) {
      int32x2_t v152 = (llvm::LLVMContext ***)*(a2 - 1);
    }
    else {
      int32x2_t v152 = &a2[-4 * (v151 & 0x7FFFFFF)];
    }
    sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)v152[4], 1);
    __int16 v148 = *((_WORD *)a2 + 9);
    if ((v148 & 4) == 0)
    {
LABEL_232:
      if ((v148 & 8) == 0) {
        goto LABEL_251;
      }
      goto LABEL_245;
    }
  }
  else if ((v148 & 4) == 0)
  {
    goto LABEL_232;
  }
  uint64_t v153 = *a1;
  uint64_t v154 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v154) > 9)
  {
    *(_WORD *)(v154 + 8) = 8293;
    *(void *)uint64_t v154 = *(void *)" prologue ";
    *((void *)v153 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v153, " prologue ", 0xAuLL);
  }
  int v155 = *((_DWORD *)a2 + 5);
  if ((v155 & 0x40000000) != 0) {
    uint64_t v156 = (llvm::LLVMContext ***)*(a2 - 1);
  }
  else {
    uint64_t v156 = &a2[-4 * (v155 & 0x7FFFFFF)];
  }
  sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)v156[8], 1);
  if ((*((_WORD *)a2 + 9) & 8) != 0)
  {
LABEL_245:
    uint64_t v157 = *a1;
    uint64_t v158 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v158 > 0xCuLL)
    {
      qmemcpy(v158, " personality ", 13);
      *((void *)v157 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v157, " personality ", 0xDuLL);
    }
    int v159 = *((_DWORD *)a2 + 5);
    if ((v159 & 0x40000000) != 0) {
      uint64_t v160 = *(a2 - 1);
    }
    else {
      uint64_t v160 = (llvm::detail::DoubleAPFloat **)&a2[-4 * (v159 & 0x7FFFFFF)];
    }
    sub_1CC4FBF20((uint64_t)a1, *v160, 1);
  }
LABEL_251:
  if (a2 && *((unsigned char *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
    {
LABEL_254:
      uint64_t v161 = *a1;
      uint64_t v162 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v162 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v161, 10);
      }
      else
      {
        *((void *)v161 + 4) = v162 + 1;
        *uint64_t v162 = 10;
      }
      goto LABEL_271;
    }
  }
  else if (!*((unsigned char *)a2 + 16) && a2[9] == (llvm::LLVMContext **)(a2 + 9) && (*((unsigned char *)a2 + 34) & 0x80) == 0)
  {
    goto LABEL_254;
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
  __p[0].__r_.__value_.__l.__size_ = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)__p);
  sub_1CC4FA2F4((uint64_t *)a1, __p, " ", 1uLL);
  uint64_t v163 = *a1;
  unsigned int v164 = (_WORD *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v164 > 1uLL)
  {
    *unsigned int v164 = 31520;
    *((void *)v163 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v163, " {", 2uLL);
  }
  for (uint64_t i = (llvm::LLVMContext ***)a2[10]; i != a2 + 9; uint64_t i = (llvm::LLVMContext ***)i[1])
  {
    if (i) {
      uint64_t v166 = (uint64_t ***)(i - 3);
    }
    else {
      uint64_t v166 = 0;
    }
    sub_1CC4F0C24(a1, v166);
  }
  sub_1CC4FC034(a1, (uint64_t)a2);
  uint64_t v167 = *a1;
  int64_t v168 = (_WORD *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v168 > 1uLL)
  {
    _WORD *v168 = 2685;
    *((void *)v167 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v167, "}\n", 2uLL);
  }
  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2]) {
    free(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_271:
  uint64_t v169 = a1[4];
  uint64_t result = sub_1CC0A1FD4((_DWORD *)v169 + 34);
  *((void *)v169 + 2) = 0;
  *((unsigned char *)v169 + 24) = 0;
  return result;
}

void *sub_1CC4F09EC(void *a1)
{
  MEMORY[0x1D25D9CD0](a1[75], 8);
  int v2 = (void *)a1[57];
  if (v2 != a1 + 59) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[39];
  if (v3 != a1 + 41) {
    free(v3);
  }
  sub_1CC4FDA64(a1 + 36);
  char v4 = (void *)a1[32];
  if (v4)
  {
    a1[33] = v4;
    operator delete(v4);
  }
  MEMORY[0x1D25D9CD0](a1[29], 8);
  uint64_t v5 = (void *)a1[25];
  if (v5)
  {
    a1[26] = v5;
    operator delete(v5);
  }
  MEMORY[0x1D25D9CD0](a1[22], 8);
  uint64_t v6 = (void *)a1[18];
  if (v6)
  {
    a1[19] = v6;
    operator delete(v6);
  }
  MEMORY[0x1D25D9CD0](a1[15], 8);
  MEMORY[0x1D25D9CD0](a1[12], 8);
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[6], 8);
  uint64_t v7 = a1[3];
  a1[3] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

void *llvm::BasicBlock::print(const llvm::Function **this, llvm::raw_ostream *a2, llvm::AssemblyAnnotationWriter *a3, char a4, char a5)
{
  v25[43] = *MEMORY[0x1E4F143B8];
  llvm::SlotTracker::SlotTracker((llvm::SlotTracker *)v25, this[7], 0);
  int v12 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  int v18 = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = &unk_1F2644C68;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v21 = &v23;
  long long v22 = xmmword_1CDB159A0;
  sub_1CBF2ECF8((uint64_t)&v11, (uint64_t)a2);
  sub_1CC4EF34C((uint64_t)v24, (uint64_t)&v11, (uint64_t)v25, *((void *)this[7] + 5), (uint64_t)a3, a5, a4);
  sub_1CC4F0C24(v24, (uint64_t ***)this);
  sub_1CC4F09EC(v24);
  sub_1CBF2EF74((llvm::raw_ostream *)&v11);
  return sub_1CC4FDAD8(v25);
}

uint64_t sub_1CC4F0C24(llvm::raw_ostream **a1, uint64_t ***a2)
{
  char v4 = a2[7];
  if (!v4)
  {
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
      goto LABEL_9;
    }
    BOOL v7 = 0;
LABEL_23:
    int v18 = *a1;
    uint64_t v19 = (unsigned char *)*((void *)*a1 + 4);
    if (*((unsigned char **)*a1 + 3) == v19)
    {
      llvm::raw_ostream::write(v18, "\n", 1uLL);
    }
    else
    {
      *uint64_t v19 = 10;
      ++*((void *)v18 + 4);
    }
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      size_t v39 = 0;
      uint64_t v38 = (llvm::raw_ostream *)&byte_1CFBCE98E;
LABEL_44:
      llvm::printLLVMNameWithoutPrefix(*a1, v38, v39);
      uint64_t v41 = *a1;
      unsigned int v42 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v42 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v41, 58);
        if (v7) {
          goto LABEL_62;
        }
      }
      else
      {
        *((void *)v41 + 4) = v42 + 1;
        *unsigned int v42 = 58;
        if (v7) {
          goto LABEL_62;
        }
      }
      goto LABEL_48;
    }
    uint64_t v20 = ***a2;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v24 = (uint64_t ****)(v21 + 16 * v23);
      unint64_t v25 = *v24;
      if (*v24 == a2)
      {
LABEL_43:
        int v37 = (size_t *)v24[1];
        size_t v40 = *v37;
        uint64_t v38 = (llvm::raw_ostream *)(v37 + 2);
        size_t v39 = v40;
        goto LABEL_44;
      }
      int v26 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        unint64_t v25 = *(uint64_t ****)(v21 + 16 * v23);
        if (v25 == a2)
        {
          uint64_t v24 = (uint64_t ****)(v21 + 16 * v23);
          goto LABEL_43;
        }
      }
    }
    uint64_t v24 = (uint64_t ****)(v21 + 16 * v22);
    goto LABEL_43;
  }
  uint64_t v5 = v4[10];
  if (v5) {
    uint64_t v6 = (uint64_t ***)(v5 - 3);
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = v6 == a2;
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0) {
    goto LABEL_23;
  }
  if (v6 == a2) {
    goto LABEL_62;
  }
LABEL_9:
  uint64_t v8 = *a1;
  int v9 = (unsigned char *)*((void *)*a1 + 4);
  if (*((unsigned char **)*a1 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *int v9 = 10;
    ++*((void *)v8 + 4);
  }
  uint64_t v10 = a1[4];
  if (*((void *)v10 + 1))
  {
    llvm::SlotTracker::processModule(a1[4]);
    *((void *)v10 + 1) = 0;
  }
  if (*((void *)v10 + 2) && !*((unsigned char *)v10 + 24)) {
    llvm::SlotTracker::processFunction(v10);
  }
  uint64_t v11 = *((void *)v10 + 17);
  uint64_t v12 = *((unsigned int *)v10 + 38);
  if (!v12)
  {
LABEL_32:
    uint64_t v14 = (uint64_t *)(v11 + 16 * v12);
    goto LABEL_33;
  }
  LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = (uint64_t *)(v11 + 16 * v13);
  uint64_t v15 = (uint64_t ***)*v14;
  if ((uint64_t ***)*v14 != a2)
  {
    int v16 = 1;
    while (v15 != (uint64_t ***)-4096)
    {
      int v17 = v13 + v16++;
      uint64_t v13 = v17 & (v12 - 1);
      uint64_t v15 = *(uint64_t ****)(v11 + 16 * v13);
      if (v15 == a2)
      {
        uint64_t v14 = (uint64_t *)(v11 + 16 * v13);
        goto LABEL_33;
      }
    }
    goto LABEL_32;
  }
LABEL_33:
  if (v14 == (uint64_t *)(v11 + 16 * v12) || (unint64_t v28 = *((int *)v14 + 2), v28 == -1))
  {
    uint64_t v34 = *a1;
    uint64_t v36 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v36) <= 8)
    {
      uint64_t v33 = "<badref>:";
      size_t v35 = 9;
      goto LABEL_41;
    }
    *(unsigned char *)(v36 + 8) = 58;
    *(void *)uint64_t v36 = *(void *)"<badref>:";
    *((void *)v34 + 4) += 9;
  }
  else
  {
    int v29 = *a1;
    if ((v28 & 0x80000000) != 0)
    {
      unint64_t v28 = -(uint64_t)v28;
      uint64_t v30 = *a1;
      int v31 = 1;
    }
    else
    {
      uint64_t v30 = *a1;
      int v31 = 0;
    }
    sub_1CD098D14(v30, v28, 0, 0, v31);
    size_t v32 = (unsigned char *)*((void *)v29 + 4);
    if (*((unsigned char **)v29 + 3) == v32)
    {
      uint64_t v33 = ":";
      uint64_t v34 = v29;
      size_t v35 = 1;
LABEL_41:
      llvm::raw_ostream::write(v34, v33, v35);
      goto LABEL_48;
    }
    *size_t v32 = 58;
    ++*((void *)v29 + 4);
  }
LABEL_48:
  llvm::formatted_raw_ostream::PadToColumn(*a1, 50);
  uint64_t v43 = *a1;
  int v44 = (unsigned char *)*((void *)*a1 + 4);
  if (*((unsigned char **)*a1 + 3) == v44)
  {
    llvm::raw_ostream::write(v43, ";", 1uLL);
  }
  else
  {
    *int v44 = 59;
    ++*((void *)v43 + 4);
  }
  std::string::size_type v45 = a2[1];
  if (v45)
  {
    while (1)
    {
      unsigned int v46 = v45[3];
      unsigned int v47 = *((unsigned __int8 *)v46 + 16);
      BOOL v48 = v46 && v47 >= 0x1C;
      if (v48 && v47 - 29 < 0xB) {
        break;
      }
      std::string::size_type v45 = (uint64_t **)v45[1];
      if (!v45) {
        goto LABEL_60;
      }
    }
    BOOL v61 = *a1;
    uint64_t v62 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v62) > 8)
    {
      *(unsigned char *)(v62 + 8) = 32;
      *(void *)uint64_t v62 = *(void *)" preds = ";
      *((void *)v61 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v61, " preds = ", 9uLL);
    }
    sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)v45[3][5], 0);
    while (1)
    {
      std::string::size_type v45 = (uint64_t **)v45[1];
      if (!v45) {
        break;
      }
      char v63 = v45[3];
      unsigned int v64 = *((unsigned __int8 *)v63 + 16);
      if (v63) {
        BOOL v65 = v64 >= 0x1C;
      }
      else {
        BOOL v65 = 0;
      }
      if (v65 && v64 - 29 <= 0xA)
      {
LABEL_90:
        int v67 = *a1;
        uint64_t v68 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v68 > 1uLL)
        {
          *uint64_t v68 = 8236;
          *((void *)v67 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v67, ", ", 2uLL);
        }
        sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)v45[3][5], 0);
        while (1)
        {
          std::string::size_type v45 = (uint64_t **)v45[1];
          if (!v45) {
            goto LABEL_62;
          }
          uint64_t v69 = v45[3];
          unsigned int v70 = *((unsigned __int8 *)v69 + 16);
          if (v69) {
            BOOL v71 = v70 >= 0x1C;
          }
          else {
            BOOL v71 = 0;
          }
          if (v71 && v70 - 29 < 0xB) {
            goto LABEL_90;
          }
        }
      }
    }
  }
  else
  {
LABEL_60:
    uint64_t v50 = *a1;
    uint64_t v51 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v51) > 0x10)
    {
      *(unsigned char *)(v51 + 16) = 33;
      *(_OWORD *)uint64_t v51 = *(_OWORD *)" No predecessors!";
      *((void *)v50 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v50, " No predecessors!", 0x11uLL);
    }
  }
LABEL_62:
  uint64_t v52 = *a1;
  uint64_t v53 = (unsigned char *)*((void *)*a1 + 4);
  if (*((unsigned char **)*a1 + 3) == v53)
  {
    llvm::raw_ostream::write(v52, "\n", 1uLL);
  }
  else
  {
    *uint64_t v53 = 10;
    ++*((void *)v52 + 4);
  }
  uint64_t v54 = a1[28];
  if (v54) {
    (*(void (**)(llvm::raw_ostream *, uint64_t ***, llvm::raw_ostream *))(*(void *)v54 + 24))(v54, a2, *a1);
  }
  for (uint64_t i = a2[6]; i != (uint64_t **)(a2 + 5); uint64_t i = (uint64_t **)i[1])
  {
    if (i) {
      uint64_t v56 = (uint64_t)(i - 3);
    }
    else {
      uint64_t v56 = 0;
    }
    sub_1CC4F3F64(a1, v56);
    char v57 = *a1;
    uint64_t v58 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v58 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v57, 10);
    }
    else
    {
      *((void *)v57 + 4) = v58 + 1;
      *uint64_t v58 = 10;
    }
  }
  uint64_t result = (uint64_t)a1[28];
  if (result)
  {
    unsigned int v60 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v60();
  }
  return result;
}

void *llvm::Module::print(const std::string *this, llvm::raw_ostream *a2, llvm::AssemblyAnnotationWriter *a3, char a4, char a5)
{
  uint64_t v256 = *MEMORY[0x1E4F143B8];
  llvm::SlotTracker::SlotTracker((llvm::SlotTracker *)v254, (const llvm::Module *)this, 0);
  int v216 = 0;
  char v220 = 0;
  uint64_t v221 = 0;
  int v222 = 1;
  uint64_t v218 = 0;
  uint64_t v219 = 0;
  uint64_t v217 = 0;
  unint64_t v215 = &unk_1F2644C68;
  uint64_t v223 = 0;
  uint64_t v224 = 0;
  uint64_t v225 = &v227;
  long long v226 = xmmword_1CDB159A0;
  sub_1CBF2ECF8((uint64_t)&v215, (uint64_t)a2);
  sub_1CC4EF34C((uint64_t)v240, (uint64_t)&v215, (uint64_t)v254, (uint64_t)this, (uint64_t)a3, a5, a4);
  uint64_t v10 = v241;
  if (*((void *)v241 + 1))
  {
    llvm::SlotTracker::processModule(v241);
    *((void *)v10 + 1) = 0;
  }
  if (*((void *)v10 + 2) && !*((unsigned char *)v10 + 24)) {
    llvm::SlotTracker::processFunction(v10);
  }
  if (v252)
  {
    uint64_t v231 = 0;
    BOOL v232 = 0;
    LODWORD(v233) = 0;
    uint64_t v235 = 0;
    uint64_t v236 = 0;
    unsigned int v234 = 0;
    for (uint64_t i = (std::string::size_type *)this->__r_.__value_.__r.__words[2]; ; uint64_t i = (std::string::size_type *)i[1])
    {
      if (i == &this->__r_.__value_.__r.__words[1])
      {
        for (uint64_t j = this[2].__r_.__value_.__l.__data_; j != &this[1].__r_.__value_.__r.__words[2]; uint64_t j = (void *)j[1])
        {
          if (j) {
            uint64_t v157 = (uint64_t)(j - 6);
          }
          else {
            uint64_t v157 = 0;
          }
          uint64_t v158 = *(void *)(v157 - 32);
          if (*(unsigned __int8 *)(v158 + 16) >= 4u) {
            sub_1CC4FDC34(v158, (uint64_t)&v231);
          }
          sub_1CC4FDC34(v157, (uint64_t)&v231);
        }
        for (unsigned int k = (std::string::size_type *)this[2].__r_.__value_.__r.__words[2];
              k != &this[2].__r_.__value_.__r.__words[1];
              unsigned int k = (std::string::size_type *)k[1])
        {
          if (k) {
            uint64_t v160 = (uint64_t)(k - 7);
          }
          else {
            uint64_t v160 = 0;
          }
          uint64_t v161 = *(void *)(v160 - 32);
          if (*(unsigned __int8 *)(v161 + 16) >= 4u) {
            sub_1CC4FDC34(v161, (uint64_t)&v231);
          }
          sub_1CC4FDC34(v160, (uint64_t)&v231);
        }
        std::string::size_type size = (const std::string *)this[1].__r_.__value_.__l.__size_;
LABEL_318:
        if (size == &this[1])
        {
          v228[0] = 0;
          v228[1] = 0;
          int v229 = 0;
          unsigned int v187 = v234;
          uint64_t v188 = v235;
          if (v234 == v235)
          {
LABEL_372:
            sub_1CD456CB4(&v231);
            sub_1CD5A3C4C(v253, v228);
            sub_1CC4FDA64(v228);
            break;
          }
          while (2)
          {
            uint64_t v191 = *(void *)v187;
            uint64_t v230 = v191;
            uint64_t v192 = *(void *)(v191 + 8);
            if (v192 && *(void *)(v192 + 8))
            {
              int v238 = *((_DWORD *)v187 + 2);
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
              __p[0].__r_.__value_.__l.__size_ = 0x4000000000;
              do
              {
                if (sub_1CD5A3DB8((uint64_t)&v231, *(void *)(v192 + 24)))
                {
                  uint64_t v193 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                  if (LODWORD(__p[0].__r_.__value_.__r.__words[1]) >= HIDWORD(__p[0].__r_.__value_.__r.__words[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unsigned int v194 = (void *)(__p[0].__r_.__value_.__r.__words[0]
                                  + 16 * LODWORD(__p[0].__r_.__value_.__r.__words[1]));
                  *unsigned int v194 = v192;
                  v194[1] = v193;
                  ++LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                }
                uint64_t v192 = *(void *)(v192 + 8);
              }
              while (v192);
              unint64_t v195 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
              if (LODWORD(__p[0].__r_.__value_.__r.__words[1]) > 1)
              {
                int v200 = *(unsigned __int8 *)(v191 + 16);
                BOOL v237 = v200 != 22;
                if (v191 && v200 == 4)
                {
                  int v238 = sub_1CD5A3DB8((uint64_t)&v231, *(void *)(v191 - 32));
                  unint64_t v195 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                }
                v239[0] = &v231;
                v239[1] = &v237;
                v239[2] = &v238;
                unint64_t v201 = 126 - 2 * __clz(v195);
                if (v195) {
                  uint64_t v202 = v201;
                }
                else {
                  uint64_t v202 = 0;
                }
                sub_1CC4FDD0C((uint64_t)__p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__r.__words[0] + 16 * v195, (uint64_t)v239, v202, 1);
                unint64_t v199 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                uint64_t v203 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                if (LODWORD(__p[0].__r_.__value_.__r.__words[1]))
                {
                  uint64_t v204 = (unsigned int *)(__p[0].__r_.__value_.__r.__words[0] + 24);
                  uint64_t v205 = 16 * LODWORD(__p[0].__r_.__value_.__r.__words[1]) - 16;
                  while (v205)
                  {
                    unsigned int v206 = *v204;
                    unsigned int v207 = *(v204 - 4);
                    v204 += 4;
                    v205 -= 16;
                    if (v206 < v207)
                    {
                      size_t v208 = 4 * LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                      uint64_t v198 = (char *)operator new(v208);
                      bzero(v198, 4 * v203);
                      unint64_t v209 = 0;
                      do
                      {
                        *(_DWORD *)&v198[v209] = v199->__r_.__value_.__r.__words[v209 / 2 + 1];
                        v209 += 4;
                      }
                      while (v208 != v209);
                      uint64_t v196 = &v198[4 * v203];
                      uint64_t v197 = &v198[v208];
                      goto LABEL_407;
                    }
                  }
                }
                uint64_t v196 = 0;
                uint64_t v197 = 0;
                uint64_t v198 = 0;
              }
              else
              {
                uint64_t v196 = 0;
                uint64_t v197 = 0;
                uint64_t v198 = 0;
                unint64_t v199 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              }
LABEL_407:
              if (v199 != (std::string *)&__p[0].__r_.__value_.__r.__words[2]) {
                free(v199);
              }
              if (v198 == v197)
              {
                if (v197) {
                  operator delete(v197);
                }
                goto LABEL_412;
              }
              __p[0].__r_.__value_.__r.__words[0] = 0;
              unsigned int v210 = *(unsigned __int8 *)(v191 + 16);
              if (v191 && v210 >= 0x1C) {
                __p[0].__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v191 + 40) + 56);
              }
              if (v210 == 22)
              {
                std::string::size_type v211 = *(void *)(v191 + 56);
LABEL_421:
                __p[0].__r_.__value_.__r.__words[0] = v211;
              }
              else if (v210 == 21)
              {
                std::string::size_type v211 = *(void *)(v191 + 24);
                goto LABEL_421;
              }
              uint64_t v212 = sub_1CD5A3EF0((uint64_t)v228, (uint64_t *)__p);
              uint64_t v213 = sub_1CD5A3D08((uint64_t)(v212 + 1), &v230);
              uint64_t v214 = *(void **)v213;
              if (*(void *)v213)
              {
                *(void *)(v213 + 8) = v214;
                operator delete(v214);
              }
              *(void *)uint64_t v213 = v198;
              *(void *)(v213 + 8) = v197;
              *(void *)(v213 + 16) = v196;
            }
LABEL_412:
            unsigned int v187 = (llvm::raw_ostream *)((char *)v187 + 16);
            if (v187 == v188) {
              goto LABEL_372;
            }
            continue;
          }
        }
        if (size) {
          uint64_t v163 = (uint64_t)&size[-3].__r_.__value_.__r.__words[2];
        }
        else {
          uint64_t v163 = 0;
        }
        int v164 = *(_DWORD *)(v163 + 20);
        if ((v164 & 0x40000000) != 0)
        {
          uint64_t v166 = *(uint64_t **)(v163 - 8);
          uint64_t v165 = v164 & 0x7FFFFFF;
          if (v165) {
            goto LABEL_326;
          }
        }
        else
        {
          uint64_t v165 = v164 & 0x7FFFFFF;
          uint64_t v166 = (uint64_t *)(v163 - 32 * v165);
          if (!v165) {
            goto LABEL_330;
          }
LABEL_326:
          uint64_t v167 = 32 * v165;
          do
          {
            if (*(unsigned __int8 *)(*v166 + 16) >= 4u) {
              sub_1CC4FDC34(*v166, (uint64_t)&v231);
            }
            v166 += 4;
            v167 -= 32;
          }
          while (v167);
        }
LABEL_330:
        sub_1CC4FDC34(v163, (uint64_t)&v231);
        if (size && *(unsigned char *)(v163 + 16) == 3)
        {
          if ((*(_DWORD *)(v163 + 20) & 0x7FFFFFF) == 0)
          {
LABEL_333:
            std::string::size_type size = (const std::string *)size->__r_.__value_.__l.__size_;
            goto LABEL_318;
          }
        }
        else if (!*(unsigned char *)(v163 + 16) && *(void *)(v163 + 72) == v163 + 72 && (*(unsigned char *)(v163 + 34) & 0x80) == 0)
        {
          goto LABEL_333;
        }
        uint64_t v168 = sub_1CB923B44((llvm::Function *)v163);
        if (v168 != v169)
        {
          uint64_t v170 = v168;
          uint64_t v171 = v169;
          do
          {
            sub_1CC4FDC34(v170, (uint64_t)&v231);
            v170 += 40;
          }
          while (v170 != v171);
        }
        uint64_t v172 = v163 + 72;
        uint64_t v173 = *(void *)(v163 + 80);
        while (2)
        {
          if (v173 != v172)
          {
            if (v173) {
              uint64_t v174 = v173 - 24;
            }
            else {
              uint64_t v174 = 0;
            }
            sub_1CC4FDC34(v174, (uint64_t)&v231);
            uint64_t v175 = v174 + 40;
            uint64_t v176 = *(void *)(v174 + 48);
LABEL_346:
            if (v176 == v175)
            {
              uint64_t v173 = *(void *)(v173 + 8);
              continue;
            }
            if (v176) {
              uint64_t v177 = v176 - 24;
            }
            else {
              uint64_t v177 = 0;
            }
            int v178 = *(_DWORD *)(v177 + 20);
            if ((v178 & 0x40000000) != 0)
            {
              unint64_t v180 = *(uint64_t **)(v177 - 8);
              uint64_t v179 = v178 & 0x7FFFFFF;
              if (!v179)
              {
LABEL_369:
                sub_1CC4FDC34(v177, (uint64_t)&v231);
                uint64_t v176 = *(void *)(v176 + 8);
                goto LABEL_346;
              }
            }
            else
            {
              uint64_t v179 = v178 & 0x7FFFFFF;
              unint64_t v180 = (uint64_t *)(v177 - 32 * v179);
              if (!v179) {
                goto LABEL_369;
              }
            }
            uint64_t v181 = 32 * v179;
            do
            {
              uint64_t v182 = *v180;
              int v183 = *(unsigned __int8 *)(*v180 + 16);
              if (*v180) {
                BOOL v184 = v183 == 23;
              }
              else {
                BOOL v184 = 0;
              }
              if (v184)
              {
                int v185 = *(unsigned __int8 **)(v182 + 24);
                if (*v185 - 3 >= 0xFFFFFFFE)
                {
                  uint64_t v182 = *((void *)v185 + 16);
                  int v183 = *(unsigned __int8 *)(v182 + 16);
                }
                else
                {
                  int v183 = 23;
                }
              }
              if (v183 == 24 || (v183 - 4) <= 0x10) {
                sub_1CC4FDC34(v182, (uint64_t)&v231);
              }
              v180 += 4;
              v181 -= 32;
            }
            while (v181);
            goto LABEL_369;
          }
          goto LABEL_333;
        }
      }
      if (i) {
        uint64_t v154 = (uint64_t)(i - 7);
      }
      else {
        uint64_t v154 = 0;
      }
      if (i && *(unsigned char *)(v154 + 16) == 3)
      {
        if ((*(_DWORD *)(v154 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_300;
        }
      }
      else if (!*(unsigned char *)(v154 + 16) && *(void *)(v154 + 72) == v154 + 72 && (*(unsigned char *)(v154 + 34) & 0x80) == 0)
      {
        goto LABEL_300;
      }
      uint64_t v155 = *(void *)(v154 - 32);
      if (*(unsigned __int8 *)(v155 + 16) >= 4u) {
        sub_1CC4FDC34(v155, (uint64_t)&v231);
      }
LABEL_300:
      sub_1CC4FDC34(v154, (uint64_t)&v231);
    }
  }
  if (SHIBYTE(this[7].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[7].__r_.__value_.__l.__size_) {
      goto LABEL_22;
    }
  }
  else if (!*((unsigned char *)&this[7].__r_.__value_.__s + 23))
  {
    goto LABEL_22;
  }
  if (std::string::find(this + 7, 10, 0) == -1)
  {
    uint64_t v11 = v240[0];
    uint64_t v12 = (void *)*((void *)v240[0] + 4);
    if (*((void *)v240[0] + 3) - (void)v12 > 0xDuLL)
    {
      qmemcpy(v12, "; ModuleID = '", 14);
      *((void *)v11 + 4) += 14;
    }
    else
    {
      uint64_t v11 = llvm::raw_ostream::write(v240[0], "; ModuleID = '", 0xEuLL);
    }
    char v13 = HIBYTE(this[7].__r_.__value_.__r.__words[2]);
    BOOL v14 = v13 < 0;
    if (v13 >= 0) {
      data = (const char *)&this[7];
    }
    else {
      data = this[7].__r_.__value_.__l.__data_;
    }
    size_t v16 = v13 & 0x7F;
    if (v14) {
      size_t v17 = this[7].__r_.__value_.__l.__size_;
    }
    else {
      size_t v17 = v16;
    }
    int v18 = llvm::raw_ostream::write(v11, data, v17);
    uint64_t v19 = (_WORD *)*((void *)v18 + 4);
    if (*((void *)v18 + 3) - (void)v19 > 1uLL)
    {
      *uint64_t v19 = 2599;
      *((void *)v18 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v18, "'\n", 2uLL);
    }
  }
LABEL_22:
  if (SHIBYTE(this[8].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[8].__r_.__value_.__l.__size_) {
      goto LABEL_36;
    }
  }
  else if (!*((unsigned char *)&this[8].__r_.__value_.__s + 23))
  {
    goto LABEL_36;
  }
  uint64_t v20 = v240[0];
  uint64_t v21 = *((void *)v240[0] + 4);
  if ((unint64_t)(*((void *)v240[0] + 3) - v21) > 0x12)
  {
    *(_DWORD *)(v21 + 15) = 572538144;
    *(_OWORD *)uint64_t v21 = *(_OWORD *)"source_filename = \"";
    *((void *)v20 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v240[0], "source_filename = \"", 0x13uLL);
  }
  char v22 = HIBYTE(this[8].__r_.__value_.__r.__words[2]);
  BOOL v23 = v22 < 0;
  if (v22 >= 0) {
    uint64_t v24 = (llvm::raw_ostream *)&this[8];
  }
  else {
    uint64_t v24 = (llvm::raw_ostream *)this[8].__r_.__value_.__l.__data_;
  }
  uint64_t v25 = v22 & 0x7F;
  if (v23) {
    uint64_t v26 = this[8].__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v26 = v25;
  }
  llvm::printEscapedString(v24, v26, v240[0]);
  int v27 = v240[0];
  unint64_t v28 = (_WORD *)*((void *)v240[0] + 4);
  if (*((void *)v240[0] + 3) - (void)v28 > 1uLL)
  {
    *unint64_t v28 = 2594;
    *((void *)v27 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v240[0], "\"\n", 2uLL);
  }
LABEL_36:
  if (SHIBYTE(this[20].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[20].__r_.__value_.__l.__size_) {
      goto LABEL_50;
    }
  }
  else if (!*((unsigned char *)&this[20].__r_.__value_.__s + 23))
  {
    goto LABEL_50;
  }
  int v29 = v240[0];
  uint64_t v30 = (void *)*((void *)v240[0] + 4);
  if (*((void *)v240[0] + 3) - (void)v30 > 0x14uLL)
  {
    qmemcpy(v30, "target datalayout = \"", 21);
    *((void *)v29 + 4) += 21;
  }
  else
  {
    int v29 = llvm::raw_ostream::write(v240[0], "target datalayout = \"", 0x15uLL);
  }
  char v31 = HIBYTE(this[20].__r_.__value_.__r.__words[2]);
  BOOL v32 = v31 < 0;
  if (v31 >= 0) {
    uint64_t v33 = (const char *)&this[20];
  }
  else {
    uint64_t v33 = this[20].__r_.__value_.__l.__data_;
  }
  size_t v34 = v31 & 0x7F;
  if (v32) {
    size_t v35 = this[20].__r_.__value_.__l.__size_;
  }
  else {
    size_t v35 = v34;
  }
  uint64_t v36 = llvm::raw_ostream::write(v29, v33, v35);
  int v37 = (_WORD *)*((void *)v36 + 4);
  if (*((void *)v36 + 3) - (void)v37 > 1uLL)
  {
    _WORD *v37 = 2594;
    *((void *)v36 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v36, "\"\n", 2uLL);
  }
LABEL_50:
  if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[9].__r_.__value_.__l.__size_) {
      goto LABEL_64;
    }
  }
  else if (!*((unsigned char *)&this[9].__r_.__value_.__s + 23))
  {
    goto LABEL_64;
  }
  uint64_t v38 = v240[0];
  uint64_t v39 = *((void *)v240[0] + 4);
  if ((unint64_t)(*((void *)v240[0] + 3) - v39) > 0x10)
  {
    *(unsigned char *)(v39 + 16) = 34;
    *(_OWORD *)uint64_t v39 = *(_OWORD *)"target triple = \"";
    *((void *)v38 + 4) += 17;
  }
  else
  {
    uint64_t v38 = llvm::raw_ostream::write(v240[0], "target triple = \"", 0x11uLL);
  }
  char v40 = HIBYTE(this[9].__r_.__value_.__r.__words[2]);
  BOOL v41 = v40 < 0;
  if (v40 >= 0) {
    unsigned int v42 = (const char *)&this[9];
  }
  else {
    unsigned int v42 = this[9].__r_.__value_.__l.__data_;
  }
  size_t v43 = v40 & 0x7F;
  if (v41) {
    size_t v44 = this[9].__r_.__value_.__l.__size_;
  }
  else {
    size_t v44 = v43;
  }
  std::string::size_type v45 = llvm::raw_ostream::write(v38, v42, v44);
  unsigned int v46 = (_WORD *)*((void *)v45 + 4);
  if (*((void *)v45 + 3) - (void)v46 > 1uLL)
  {
    *unsigned int v46 = 2594;
    *((void *)v45 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v45, "\"\n", 2uLL);
  }
LABEL_64:
  if (this[4].__r_.__value_.__s.__data_[15] < 0)
  {
    if (!this[4].__r_.__value_.__r.__words[0]) {
      goto LABEL_101;
    }
  }
  else if (!this[4].__r_.__value_.__s.__data_[15])
  {
    goto LABEL_101;
  }
  unsigned int v47 = (unsigned char *)*((void *)v240[0] + 4);
  if ((unint64_t)v47 >= *((void *)v240[0] + 3))
  {
    llvm::raw_ostream::write(v240[0], 10);
  }
  else
  {
    *((void *)v240[0] + 4) = v47 + 1;
    *unsigned int v47 = 10;
  }
  std::string::value_type v48 = this[4].__r_.__value_.__s.__data_[15];
  BOOL v49 = v48 < 0;
  if (v48 >= 0) {
    uint64_t v50 = (llvm::raw_ostream *)&this[3].__r_.__value_.__r.__words[2];
  }
  else {
    uint64_t v50 = (llvm::raw_ostream *)this[3].__r_.__value_.__r.__words[2];
  }
  std::string::size_type v51 = v48 & 0x7F;
  if (v49) {
    std::string::size_type v52 = this[4].__r_.__value_.__r.__words[0];
  }
  else {
    std::string::size_type v52 = v51;
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
  __p[0].__r_.__value_.__l.__size_ = v52;
  do
  {
    LOBYTE(v231) = 10;
    unint64_t v53 = llvm::StringRef::find((uint64_t *)__p, (char *)&v231, 1uLL, 0);
    if (v52 >= v53) {
      unint64_t v54 = v53;
    }
    else {
      unint64_t v54 = v52;
    }
    if (v52 >= v53 + 1) {
      std::string::size_type v55 = v53 + 1;
    }
    else {
      std::string::size_type v55 = v52;
    }
    uint64_t v56 = (char *)v50 + v55;
    std::string::size_type v57 = v52 - v55;
    if (v53 == -1) {
      uint64_t v58 = v52;
    }
    else {
      uint64_t v58 = v54;
    }
    if (v53 == -1) {
      std::string::size_type v59 = 0;
    }
    else {
      std::string::size_type v59 = (std::string::size_type)v56;
    }
    if (v53 == -1) {
      std::string::size_type v52 = 0;
    }
    else {
      std::string::size_type v52 = v57;
    }
    __p[0].__r_.__value_.__r.__words[0] = v59;
    __p[0].__r_.__value_.__l.__size_ = v52;
    unsigned int v60 = v240[0];
    uint64_t v61 = *((void *)v240[0] + 4);
    if ((unint64_t)(*((void *)v240[0] + 3) - v61) > 0xB)
    {
      *(_DWORD *)(v61 + 8) = 572550515;
      *(void *)uint64_t v61 = *(void *)"module asm \"";
      *((void *)v60 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v240[0], "module asm \"", 0xCuLL);
    }
    llvm::printEscapedString(v50, v58, v240[0]);
    uint64_t v62 = v240[0];
    char v63 = (_WORD *)*((void *)v240[0] + 4);
    if (*((void *)v240[0] + 3) - (void)v63 > 1uLL)
    {
      _WORD *v63 = 2594;
      *((void *)v62 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v240[0], "\"\n", 2uLL);
    }
    uint64_t v50 = (llvm::raw_ostream *)v59;
  }
  while (v52);
LABEL_101:
  sub_1CC4FEC10((uint64_t)v242);
  if (v243 != v244 || v246)
  {
    unsigned int v64 = (unsigned char *)*((void *)v240[0] + 4);
    if ((unint64_t)v64 >= *((void *)v240[0] + 3))
    {
      llvm::raw_ostream::write(v240[0], 10);
    }
    else
    {
      *((void *)v240[0] + 4) = v64 + 1;
      unsigned char *v64 = 10;
    }
    sub_1CC4FEC10((uint64_t)v242);
    unsigned int v65 = v246;
    if (v246 != (v249 - v248) >> 3)
    {
      unint64_t v115 = (v249 - v248) >> 3;
      if (v246 > v115)
      {
        sub_1CD4FEC18(&v248, v246 - v115);
        unsigned int v65 = v246;
      }
      else if (v246 < v115)
      {
        uint64_t v249 = &v248[8 * v246];
      }
      uint64_t v116 = v245 + 16 * v247;
      if (v65)
      {
        if (v247)
        {
          uint64_t v117 = 16 * v247;
          uint64_t v118 = v245;
          while ((*(void *)v118 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v118 += 16;
            v117 -= 16;
            if (!v117) {
              goto LABEL_204;
            }
          }
        }
        else
        {
          uint64_t v118 = v245;
        }
      }
      else
      {
LABEL_204:
        uint64_t v118 = v245 + 16 * v247;
      }
      uint64_t v189 = v245 + 16 * v247;
LABEL_375:
      while (v118 != v189)
      {
        *(void *)&v248[8 * *(unsigned int *)(v118 + 8)] = *(void *)v118;
        uint64_t v190 = v118 + 16;
        uint64_t v118 = v116;
        if (v190 != v116)
        {
          uint64_t v118 = v190;
          while ((*(void *)v118 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v118 += 16;
            if (v118 == v116)
            {
              uint64_t v118 = v116;
              goto LABEL_375;
            }
          }
        }
      }
    }
    if (((v249 - v248) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v66 = 0;
      uint64_t v67 = ((unint64_t)(v249 - v248) >> 3);
      do
      {
        uint64_t v68 = v240[0];
        uint64_t v69 = (unsigned char *)*((void *)v240[0] + 4);
        if ((unint64_t)v69 >= *((void *)v240[0] + 3))
        {
          llvm::raw_ostream::write(v240[0], 37);
        }
        else
        {
          *((void *)v240[0] + 4) = v69 + 1;
          *uint64_t v69 = 37;
        }
        sub_1CD098D14(v68, v66, 0, 0, 0);
        unsigned int v70 = (void *)*((void *)v68 + 4);
        if (*((void *)v68 + 3) - (void)v70 > 7uLL)
        {
          *unsigned int v70 = 0x2065707974203D20;
          *((void *)v68 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v68, " = type ", 8uLL);
        }
        sub_1CC4F3BA8((llvm::raw_ostream *)v242, *(void *)&v248[8 * v66], v240[0]);
        BOOL v71 = (unsigned char *)*((void *)v240[0] + 4);
        if ((unint64_t)v71 >= *((void *)v240[0] + 3))
        {
          llvm::raw_ostream::write(v240[0], 10);
        }
        else
        {
          *((void *)v240[0] + 4) = v71 + 1;
          *BOOL v71 = 10;
        }
        ++v66;
      }
      while (v67 != v66);
    }
    sub_1CC4FEC10((uint64_t)v242);
    uint64_t v72 = v243;
    for (uint64_t m = v244; v72 != m; ++v72)
    {
      uint64_t v74 = *v72;
      int v75 = *(llvm::raw_ostream **)(*v72 + 24);
      if (v75)
      {
        size_t v77 = *(void *)v75;
        int v75 = (llvm::raw_ostream *)((char *)v75 + 16);
        size_t v76 = v77;
      }
      else
      {
        size_t v76 = 0;
      }
      uint64_t v78 = v240[0];
      uint64_t v79 = (unsigned char *)*((void *)v240[0] + 4);
      if ((unint64_t)v79 >= *((void *)v240[0] + 3))
      {
        uint64_t v78 = llvm::raw_ostream::write(v240[0], 37);
      }
      else
      {
        *((void *)v240[0] + 4) = v79 + 1;
        *uint64_t v79 = 37;
      }
      llvm::printLLVMNameWithoutPrefix(v78, v75, v76);
      uint64_t v80 = v240[0];
      uint64_t v81 = (void *)*((void *)v240[0] + 4);
      if (*((void *)v240[0] + 3) - (void)v81 > 7uLL)
      {
        void *v81 = 0x2065707974203D20;
        *((void *)v80 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v240[0], " = type ", 8uLL);
      }
      sub_1CC4F3BA8((llvm::raw_ostream *)v242, v74, v240[0]);
      uint64_t v82 = (unsigned char *)*((void *)v240[0] + 4);
      if ((unint64_t)v82 >= *((void *)v240[0] + 3))
      {
        llvm::raw_ostream::write(v240[0], 10);
      }
      else
      {
        *((void *)v240[0] + 4) = v82 + 1;
        unsigned char *v82 = 10;
      }
    }
  }
  if (v250 != v251)
  {
    int64_t v83 = (unsigned char *)*((void *)v240[0] + 4);
    if ((unint64_t)v83 >= *((void *)v240[0] + 3))
    {
      llvm::raw_ostream::write(v240[0], 10);
    }
    else
    {
      *((void *)v240[0] + 4) = v83 + 1;
      unsigned char *v83 = 10;
    }
  }
  int64_t v84 = v250;
  for (int n = v251; v84 != n; ++v84)
  {
    int v86 = *v84;
    llvm::Comdat::print(*v84, v240[0]);
    if (v86 != *(v251 - 1))
    {
      int v87 = (unsigned char *)*((void *)v240[0] + 4);
      if ((unint64_t)v87 >= *((void *)v240[0] + 3))
      {
        llvm::raw_ostream::write(v240[0], 10);
      }
      else
      {
        *((void *)v240[0] + 4) = v87 + 1;
        *int v87 = 10;
      }
    }
  }
  unint64_t v88 = &this->__r_.__value_.__s.__data_[8];
  if ((std::string::size_type *)this->__r_.__value_.__l.__size_ != &this->__r_.__value_.__r.__words[1])
  {
    unsigned int v89 = (unsigned char *)*((void *)v240[0] + 4);
    if ((unint64_t)v89 >= *((void *)v240[0] + 3))
    {
      llvm::raw_ostream::write(v240[0], 10);
    }
    else
    {
      *((void *)v240[0] + 4) = v89 + 1;
      *unsigned int v89 = 10;
    }
  }
  for (iuint64_t i = this->__r_.__value_.__r.__words[2]; (char *)ii != v88; iuint64_t i = *(void *)(ii + 8))
  {
    if (ii) {
      int v91 = (uint64_t ***)(ii - 56);
    }
    else {
      int v91 = 0;
    }
    sub_1CC4F6DD4(v240, v91);
    uint64_t v92 = (unsigned char *)*((void *)v240[0] + 4);
    if ((unint64_t)v92 >= *((void *)v240[0] + 3))
    {
      llvm::raw_ostream::write(v240[0], 10);
    }
    else
    {
      *((void *)v240[0] + 4) = v92 + 1;
      *uint64_t v92 = 10;
    }
  }
  if ((std::string::size_type *)this[1].__r_.__value_.__r.__words[2] != &this[1].__r_.__value_.__r.__words[2])
  {
    uint64_t v93 = v240[0];
    size_t v94 = (unsigned char *)*((void *)v240[0] + 4);
    if (*((unsigned char **)v240[0] + 3) == v94)
    {
      llvm::raw_ostream::write(v240[0], "\n", 1uLL);
    }
    else
    {
      *size_t v94 = 10;
      ++*((void *)v93 + 4);
    }
  }
  for (juint64_t j = this[2].__r_.__value_.__l.__data_; jj != &this[1].__r_.__value_.__r.__words[2]; juint64_t j = (void *)jj[1])
  {
    if (jj) {
      uint64_t v96 = (uint64_t)(jj - 6);
    }
    else {
      uint64_t v96 = 0;
    }
    sub_1CC4F771C(v240, v96);
  }
  if ((std::string::size_type *)this[2].__r_.__value_.__l.__size_ != &this[2].__r_.__value_.__r.__words[1])
  {
    uint64_t v97 = v240[0];
    uint64_t v98 = (unsigned char *)*((void *)v240[0] + 4);
    if (*((unsigned char **)v240[0] + 3) == v98)
    {
      llvm::raw_ostream::write(v240[0], "\n", 1uLL);
    }
    else
    {
      *uint64_t v98 = 10;
      ++*((void *)v97 + 4);
    }
  }
  for (kunsigned int k = (std::string::size_type *)this[2].__r_.__value_.__r.__words[2];
        kk != &this[2].__r_.__value_.__r.__words[1];
        kunsigned int k = (std::string::size_type *)kk[1])
  {
    if (kk) {
      uint64_t v100 = (uint64_t)(kk - 7);
    }
    else {
      uint64_t v100 = 0;
    }
    sub_1CC4F7C4C(v240, v100);
  }
  for (muint64_t m = (const std::string *)this[1].__r_.__value_.__l.__size_;
        mm != &this[1];
        muint64_t m = (const std::string *)mm->__r_.__value_.__l.__size_)
  {
    if (mm) {
      unsigned int v102 = (llvm::LLVMContext ***)&mm[-3].__r_.__value_.__r.__words[2];
    }
    else {
      unsigned int v102 = 0;
    }
    uint64_t v103 = (unsigned char *)*((void *)v240[0] + 4);
    if ((unint64_t)v103 >= *((void *)v240[0] + 3))
    {
      llvm::raw_ostream::write(v240[0], 10);
    }
    else
    {
      *((void *)v240[0] + 4) = v103 + 1;
      *uint64_t v103 = 10;
    }
    sub_1CC4EF5C8(v240, v102);
  }
  sub_1CC4FC034(v240, 0);
  if (*((_DWORD *)v241 + 52))
  {
    size_t v104 = (unsigned char *)*((void *)v240[0] + 4);
    if ((unint64_t)v104 >= *((void *)v240[0] + 3))
    {
      llvm::raw_ostream::write(v240[0], 10);
    }
    else
    {
      *((void *)v240[0] + 4) = v104 + 1;
      *size_t v104 = 10;
    }
    uint64_t v105 = v241;
    uint64_t v106 = *((unsigned int *)v241 + 52);
    if (v106)
    {
      uint64_t v107 = (char *)operator new(16 * v106);
      size_t v108 = &v107[16 * v106];
      char v109 = v107;
      do
      {
        *(void *)char v109 = 0;
        *((_DWORD *)v109 + 2) = 0;
        v109 += 16;
      }
      while (v109 != v108);
      if (*((_DWORD *)v105 + 52))
      {
        uint64_t v110 = *((void *)v105 + 25);
        uint64_t v111 = *((unsigned int *)v105 + 54);
        uint64_t v112 = v110 + 16 * v111;
        if (v111)
        {
          uint64_t v113 = 0;
          while ((*(void *)(v110 + v113) | 4) == 0xFFFFFFFFFFFFFFFCLL)
          {
            v113 += 16;
            if (16 * v111 == v113)
            {
              uint64_t v114 = v110 + 16 * v111;
              goto LABEL_207;
            }
          }
          uint64_t v114 = v110 + v113;
        }
        else
        {
          uint64_t v114 = *((void *)v105 + 25);
        }
        goto LABEL_207;
      }
    }
    else
    {
      size_t v108 = 0;
      uint64_t v107 = 0;
    }
    uint64_t v110 = *((void *)v105 + 25);
    uint64_t v111 = *((unsigned int *)v105 + 54);
    uint64_t v114 = v110 + 16 * v111;
    uint64_t v112 = v114;
LABEL_207:
    uint64_t v119 = v110 + 16 * v111;
LABEL_208:
    while (v114 != v119)
    {
      uint64_t v120 = *(unsigned int *)(v114 + 8);
      uint64_t v121 = &v107[16 * v120];
      *(void *)uint64_t v121 = *(void *)v114;
      *((_DWORD *)v121 + 2) = v120;
      uint64_t v122 = v114 + 16;
      uint64_t v114 = v112;
      if (v122 != v112)
      {
        uint64_t v114 = v122;
        while ((*(void *)v114 | 4) == 0xFFFFFFFFFFFFFFFCLL)
        {
          v114 += 16;
          if (v114 == v112)
          {
            uint64_t v114 = v112;
            goto LABEL_208;
          }
        }
      }
    }
    if (v107 != v108)
    {
      uint64_t v123 = (llvm::AttributeSetNode **)v107;
      do
      {
        int v124 = v240[0];
        uint64_t v125 = *((void *)v240[0] + 4);
        if ((unint64_t)(*((void *)v240[0] + 3) - v125) > 0xB)
        {
          *(_DWORD *)(v125 + 8) = 589329253;
          *(void *)uint64_t v125 = *(void *)"attributes #";
          *((void *)v124 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v240[0], "attributes #", 0xCuLL);
        }
        sub_1CD098D14(v124, *((unsigned int *)v123 + 2), 0, 0, 0);
        uint64_t v126 = *((void *)v124 + 4);
        if ((unint64_t)(*((void *)v124 + 3) - v126) > 4)
        {
          *(unsigned char *)(v126 + 4) = 32;
          *(_DWORD *)uint64_t v126 = 2065710368;
          *((void *)v124 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v124, " = { ", 5uLL);
        }
        if (*v123)
        {
          llvm::AttributeSetNode::getAsString(*v123, 1, __p);
          char v127 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        else
        {
          char v127 = 0;
          *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 0;
          __p[0].__r_.__value_.__s.__data_[0] = 0;
        }
        BOOL v128 = v127 < 0;
        if (v127 >= 0) {
          int v129 = __p;
        }
        else {
          int v129 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        std::string::size_type v130 = v127 & 0x7F;
        if (v128) {
          std::string::size_type v131 = __p[0].__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v131 = v130;
        }
        llvm::raw_ostream::write(v124, (const char *)v129, v131);
        uint64_t v132 = *((void *)v124 + 4);
        if ((unint64_t)(*((void *)v124 + 3) - v132) > 2)
        {
          *(unsigned char *)(v132 + 2) = 10;
          *(_WORD *)uint64_t v132 = 32032;
          *((void *)v124 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v124, " }\n", 3uLL);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        v123 += 2;
      }
      while (v123 != (llvm::AttributeSetNode **)v108);
    }
    if (v107) {
      operator delete(v107);
    }
  }
  uint64_t v133 = this + 3;
  if ((const std::string *)this[3].__r_.__value_.__l.__data_ != &this[3])
  {
    uint64_t v134 = (unsigned char *)*((void *)v240[0] + 4);
    if ((unint64_t)v134 >= *((void *)v240[0] + 3))
    {
      llvm::raw_ostream::write(v240[0], 10);
    }
    else
    {
      *((void *)v240[0] + 4) = v134 + 1;
      *uint64_t v134 = 10;
    }
  }
  for (nint n = this[3].__r_.__value_.__l.__size_; (const std::string *)nn != v133; nint n = *(void *)(nn + 8))
    sub_1CC4F28E8((uint64_t)v240, nn);
  if (!*((_DWORD *)v241 + 44)) {
    goto LABEL_285;
  }
  char v136 = (unsigned char *)*((void *)v240[0] + 4);
  if ((unint64_t)v136 >= *((void *)v240[0] + 3))
  {
    llvm::raw_ostream::write(v240[0], 10);
  }
  else
  {
    *((void *)v240[0] + 4) = v136 + 1;
    unsigned char *v136 = 10;
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
  __p[0].__r_.__value_.__l.__size_ = 0x1000000000;
  uint64_t v137 = *((unsigned int *)v241 + 44);
  if (v137)
  {
    if (v137 >= 0x11) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(__p[0].__r_.__value_.__l.__data_, 8 * v137);
    LODWORD(__p[0].__r_.__value_.__r.__words[1]) = v137;
    uint64_t v138 = *((void *)v241 + 21);
    uint64_t v139 = *((unsigned int *)v241 + 46);
    uint64_t v140 = v138 + 16 * v139;
    if (*((_DWORD *)v241 + 44))
    {
      if (v139)
      {
        uint64_t v141 = 0;
        while ((*(void *)(v138 + v141) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v141 += 16;
          if (16 * v139 == v141) {
            goto LABEL_259;
          }
        }
        uint64_t v142 = v138 + v141;
      }
      else
      {
        uint64_t v142 = *((void *)v241 + 21);
      }
      goto LABEL_263;
    }
  }
  else
  {
    uint64_t v138 = *((void *)v241 + 21);
    uint64_t v139 = *((unsigned int *)v241 + 46);
    uint64_t v140 = v138 + 16 * v139;
  }
LABEL_259:
  uint64_t v142 = v140;
LABEL_263:
  uint64_t v143 = v138 + 16 * v139;
LABEL_264:
  while (v142 != v143)
  {
    *(void *)(__p[0].__r_.__value_.__r.__words[0] + 8 * *(unsigned int *)(v142 + 8)) = *(void *)v142;
    uint64_t v144 = v142 + 16;
    uint64_t v142 = v140;
    if (v144 != v140)
    {
      uint64_t v142 = v144;
      while ((*(void *)v142 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v142 += 16;
        if (v142 == v140)
        {
          uint64_t v142 = v140;
          goto LABEL_264;
        }
      }
    }
  }
  if (v137)
  {
    for (unint64_t i1 = 0; i1 != v137; ++i1)
    {
      uint64_t v146 = *(void *)(__p[0].__r_.__value_.__r.__words[0] + 8 * i1);
      unint64_t v147 = v240[0];
      __int16 v148 = (unsigned char *)*((void *)v240[0] + 4);
      if ((unint64_t)v148 >= *((void *)v240[0] + 3))
      {
        llvm::raw_ostream::write(v240[0], 33);
      }
      else
      {
        *((void *)v240[0] + 4) = v148 + 1;
        unsigned char *v148 = 33;
      }
      sub_1CD098D14(v147, i1, 0, 0, 0);
      uint64_t v149 = *((void *)v147 + 4);
      if ((unint64_t)(*((void *)v147 + 3) - v149) > 2)
      {
        *(unsigned char *)(v149 + 2) = 32;
        *(_WORD *)uint64_t v149 = 15648;
        *((void *)v147 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v147, " = ", 3uLL);
      }
      uint64_t v231 = &unk_1F26161D8;
      BOOL v232 = v242;
      uint64_t v233 = v241;
      unsigned int v234 = v240[1];
      sub_1CC4FED00(v240[0], v146, (uint64_t)&v231);
      uint64_t v150 = v240[0];
      int v151 = (unsigned char *)*((void *)v240[0] + 4);
      if (*((unsigned char **)v240[0] + 3) == v151)
      {
        llvm::raw_ostream::write(v240[0], "\n", 1uLL);
      }
      else
      {
        *int v151 = 10;
        ++*((void *)v150 + 4);
      }
    }
  }
  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2]) {
    free(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_285:
  sub_1CC4F09EC(v240);
  sub_1CBF2EF74((llvm::raw_ostream *)&v215);
  return sub_1CC4FDAD8(v254);
}

llvm::raw_ostream *sub_1CC4F28E8(uint64_t a1, uint64_t a2)
{
  char v4 = *(llvm::raw_ostream **)a1;
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 33);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 33;
  }
  char v6 = *(unsigned char *)(a2 + 39);
  if (v6 >= 0) {
    BOOL v7 = (llvm::raw_ostream *)(a2 + 16);
  }
  else {
    BOOL v7 = *(llvm::raw_ostream **)(a2 + 16);
  }
  if (v6 >= 0) {
    uint64_t v8 = v6 & 0x7F;
  }
  else {
    uint64_t v8 = *(void *)(a2 + 24);
  }
  sub_1CC4FC43C(v7, v8, *(llvm::raw_ostream **)a1);
  int v9 = *(llvm::raw_ostream **)a1;
  uint64_t v10 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v10) > 4)
  {
    *(unsigned char *)(v10 + 4) = 123;
    *(_DWORD *)uint64_t v10 = 555760928;
    *((void *)v9 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v9, " = !{", 5uLL);
  }
  uint64_t v11 = *(unsigned int *)(*(void *)(a2 + 48) + 8);
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 8 * v11;
    do
    {
      if (v12)
      {
        BOOL v14 = *(llvm::raw_ostream **)a1;
        uint64_t v15 = *(_WORD **)(*(void *)a1 + 32);
        if (*(void *)(*(void *)a1 + 24) - (void)v15 > 1uLL)
        {
          *uint64_t v15 = 8236;
          *((void *)v14 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v14, ", ", 2uLL);
        }
      }
      size_t v16 = *(llvm::DIExpression **)(**(void **)(a2 + 48) + v12);
      if (*(unsigned char *)v16 == 6)
      {
        size_t v17 = *(llvm::raw_ostream **)a1;
        sub_1CC502BD0();
        sub_1CC4FCAC8(v17, v16);
      }
      else
      {
        int v18 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), *(void *)(**(void **)(a2 + 48) + v12));
        uint64_t v19 = *(llvm::raw_ostream **)a1;
        if (v18 == -1)
        {
          uint64_t v21 = (void *)*((void *)v19 + 4);
          if (*((void *)v19 + 3) - (void)v21 > 7uLL)
          {
            void *v21 = 0x3E6665726461623CLL;
            *((void *)v19 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v19, "<badref>", 8uLL);
          }
        }
        else
        {
          uint64_t v20 = (unsigned char *)*((void *)v19 + 4);
          if ((unint64_t)v20 >= *((void *)v19 + 3))
          {
            uint64_t v19 = llvm::raw_ostream::write(v19, 33);
          }
          else
          {
            *((void *)v19 + 4) = v20 + 1;
            *uint64_t v20 = 33;
          }
          unint64_t v22 = v18;
          if (v18 < 0)
          {
            unint64_t v22 = -(uint64_t)v18;
            int v23 = 1;
          }
          else
          {
            int v23 = 0;
          }
          sub_1CD098D14(v19, v22, 0, 0, v23);
        }
      }
      v12 += 8;
    }
    while (v13 != v12);
  }
  uint64_t result = *(llvm::raw_ostream **)a1;
  uint64_t v25 = *(_WORD **)(*(void *)a1 + 32);
  if (*(void *)(*(void *)a1 + 24) - (void)v25 > 1uLL)
  {
    *uint64_t v25 = 2685;
    *((void *)result + 4) += 2;
  }
  else
  {
    return llvm::raw_ostream::write(result, "}\n", 2uLL);
  }
  return result;
}

llvm::raw_ostream *sub_1CC4F2BA0(llvm::raw_ostream *a1, llvm::raw_ostream *a2, size_t a3, int a4)
{
  if (a4 == 3)
  {
    char v6 = (char *)*((void *)a1 + 4);
    if ((unint64_t)v6 < *((void *)a1 + 3))
    {
      *((void *)a1 + 4) = v6 + 1;
      char v7 = 37;
      goto LABEL_10;
    }
    char v8 = 37;
  }
  else if (a4 == 1)
  {
    char v6 = (char *)*((void *)a1 + 4);
    if ((unint64_t)v6 < *((void *)a1 + 3))
    {
      *((void *)a1 + 4) = v6 + 1;
      char v7 = 36;
      goto LABEL_10;
    }
    char v8 = 36;
  }
  else
  {
    if (a4) {
      goto LABEL_15;
    }
    char v6 = (char *)*((void *)a1 + 4);
    if ((unint64_t)v6 < *((void *)a1 + 3))
    {
      *((void *)a1 + 4) = v6 + 1;
      char v7 = 64;
LABEL_10:
      *char v6 = v7;
      goto LABEL_15;
    }
    char v8 = 64;
  }
  a1 = llvm::raw_ostream::write(a1, v8);
LABEL_15:

  return llvm::printLLVMNameWithoutPrefix(a1, a2, a3);
}

uint64_t llvm::Type::print(llvm::Type *this, llvm::raw_ostream *a2, BOOL a3, char a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  unint64_t v22 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  __p = 0;
  sub_1CC4F2DB8(&v9, this, a2);
  if ((a4 & 1) == 0 && this && (*((_DWORD *)this + 2) & 0x4FF) == 0x10)
  {
    char v7 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v7 > 7uLL)
    {
      *char v7 = 0x2065707974203D20;
      *((void *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, " = type ", 8uLL);
    }
    sub_1CC4F3BA8((llvm::raw_ostream *)&v9, (uint64_t)this, a2);
  }
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v26, 8);
  if (v22)
  {
    int v23 = v22;
    operator delete(v22);
  }
  MEMORY[0x1D25D9CD0](v19, 8);
  MEMORY[0x1D25D9CD0](v16, 8);
  MEMORY[0x1D25D9CD0](v13, 8);
  return MEMORY[0x1D25D9CD0](v10, 8);
}

llvm::raw_ostream *sub_1CC4F2DB8(llvm::raw_ostream *result, unint64_t a2, llvm::raw_ostream *a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  char v6 = result;
  switch((char)v3)
  {
    case 1:
      uint64_t v16 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v16) <= 5)
      {
        int v15 = "bfloat";
        goto LABEL_19;
      }
      *(_WORD *)(v16 + 4) = 29793;
      int v74 = 1869375074;
      goto LABEL_165;
    case 2:
      uint64_t v17 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v17) <= 4)
      {
        int v15 = "float";
        goto LABEL_41;
      }
      *(unsigned char *)(v17 + 4) = 116;
      int v75 = 1634692198;
      goto LABEL_178;
    case 3:
      uint64_t v16 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v16) <= 5)
      {
        int v15 = "double";
LABEL_19:
        int v18 = a3;
        size_t v19 = 6;
        goto LABEL_98;
      }
      *(_WORD *)(v16 + 4) = 25964;
      int v74 = 1651863396;
LABEL_165:
      *(_DWORD *)uint64_t v16 = v74;
      uint64_t v68 = *((void *)a3 + 4) + 6;
      goto LABEL_179;
    case 4:
      uint64_t v20 = (uint64_t *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v20 <= 7uLL)
      {
        int v15 = "x86_fp80";
        goto LABEL_33;
      }
      uint64_t v76 = 0x303870665F363878;
      goto LABEL_173;
    case 5:
      uint64_t v17 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v17) <= 4)
      {
        int v15 = "fp128";
        goto LABEL_41;
      }
      *(unsigned char *)(v17 + 4) = 56;
      int v75 = 842100838;
      goto LABEL_178;
    case 6:
      uint64_t v21 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v21) <= 8)
      {
        int v15 = "ppc_fp128";
        int v18 = a3;
        size_t v19 = 9;
        goto LABEL_98;
      }
      *(unsigned char *)(v21 + 8) = 56;
      *(void *)uint64_t v21 = *(void *)"ppc_fp128";
      uint64_t v68 = *((void *)a3 + 4) + 9;
      goto LABEL_179;
    case 7:
      uint64_t v14 = (int *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v14 <= 3uLL)
      {
        int v15 = "void";
        goto LABEL_28;
      }
      int v73 = 1684631414;
      goto LABEL_170;
    case 8:
      uint64_t v17 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v17) <= 4)
      {
        int v15 = "label";
        goto LABEL_41;
      }
      *(unsigned char *)(v17 + 4) = 108;
      int v75 = 1700946284;
      goto LABEL_178;
    case 9:
      uint64_t v20 = (uint64_t *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v20 <= 7uLL)
      {
        int v15 = "metadata";
LABEL_33:
        int v18 = a3;
        size_t v19 = 8;
        goto LABEL_98;
      }
      uint64_t v76 = 0x617461646174656DLL;
LABEL_173:
      *uint64_t v20 = v76;
      uint64_t v68 = *((void *)a3 + 4) + 8;
      goto LABEL_179;
    case 10:
      unint64_t v22 = (_DWORD *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v22 <= 6uLL)
      {
        int v15 = "x86_mmx";
        goto LABEL_38;
      }
      unsigned __int16 v77 = 27999;
      goto LABEL_176;
    case 11:
      unint64_t v22 = (_DWORD *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v22 <= 6uLL)
      {
        int v15 = "x86_amx";
LABEL_38:
        int v18 = a3;
        size_t v19 = 7;
        goto LABEL_98;
      }
      unsigned __int16 v77 = 24927;
LABEL_176:
      *(_DWORD *)((char *)v22 + 3) = v77 | 0x786D0000;
      *unint64_t v22 = 1597388920;
      uint64_t v68 = *((void *)a3 + 4) + 7;
      goto LABEL_179;
    case 12:
      uint64_t v17 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v17) <= 4)
      {
        int v15 = "token";
LABEL_41:
        int v18 = a3;
        size_t v19 = 5;
        goto LABEL_98;
      }
      *(unsigned char *)(v17 + 4) = 110;
      int v75 = 1701539700;
LABEL_178:
      *(_DWORD *)uint64_t v17 = v75;
      uint64_t v68 = *((void *)a3 + 4) + 5;
      goto LABEL_179;
    case 13:
      int v23 = (unsigned char *)*((void *)a3 + 4);
      if ((unint64_t)v23 >= *((void *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, 105);
      }
      else
      {
        *((void *)a3 + 4) = v23 + 1;
        *int v23 = 105;
      }
      unint64_t v58 = (unint64_t)*(unsigned int *)(a2 + 8) >> 8;
      goto LABEL_103;
    case 14:
      uint64_t result = (llvm::raw_ostream *)sub_1CC4F2DB8(result, **(void **)(a2 + 16), a3);
      uint64_t v24 = (_WORD *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v24 > 1uLL)
      {
        *uint64_t v24 = 10272;
        *((void *)a3 + 4) += 2;
      }
      else
      {
        uint64_t result = llvm::raw_ostream::write(a3, " (", 2uLL);
      }
      uint64_t v25 = 8 * *(unsigned int *)(a2 + 12);
      uint64_t v26 = v25 - 8;
      if (v25 != 8)
      {
        char v27 = 0;
        int v28 = (uint64_t *)(*(void *)(a2 + 16) + 8);
        uint64_t v29 = 8 * (v26 >> 3);
        do
        {
          uint64_t v30 = *v28;
          if (v27) {
            size_t v31 = 2;
          }
          else {
            size_t v31 = 0;
          }
          BOOL v32 = (_WORD *)*((void *)a3 + 4);
          if (v31 <= *((void *)a3 + 3) - (void)v32)
          {
            if (v27)
            {
              *BOOL v32 = 8236;
              *((void *)a3 + 4) += 2;
            }
          }
          else
          {
            if (v27) {
              uint64_t v33 = ", ";
            }
            else {
              uint64_t v33 = 0;
            }
            llvm::raw_ostream::write(a3, v33, v31);
          }
          uint64_t result = (llvm::raw_ostream *)sub_1CC4F2DB8(v6, v30, a3);
          ++v28;
          char v27 = 1;
          v29 -= 8;
        }
        while (v29);
      }
      unint64_t v12 = *((void *)a3 + 4);
      if (*(_DWORD *)(a2 + 8) <= 0xFFu) {
        goto LABEL_132;
      }
      size_t v34 = 2 * (v26 != 0);
      if (v34 <= *((void *)a3 + 3) - v12)
      {
        if (v26)
        {
          *(_WORD *)unint64_t v12 = 8236;
          unint64_t v12 = *((void *)a3 + 4) + 2;
          *((void *)a3 + 4) = v12;
        }
      }
      else
      {
        if (v26) {
          size_t v35 = ", ";
        }
        else {
          size_t v35 = 0;
        }
        uint64_t result = llvm::raw_ostream::write(a3, v35, v34);
        unint64_t v12 = *((void *)a3 + 4);
      }
      if (*((void *)a3 + 3) - v12 <= 2)
      {
        uint64_t result = llvm::raw_ostream::write(a3, "...", 3uLL);
        goto LABEL_131;
      }
      *(unsigned char *)(v12 + 2) = 46;
      *(_WORD *)unint64_t v12 = 11822;
      unint64_t v12 = *((void *)a3 + 4) + 3;
      *((void *)a3 + 4) = v12;
      goto LABEL_132;
    case 15:
      if (*(void *)(a2 + 24))
      {
        uint64_t result = (llvm::raw_ostream *)sub_1CC4F2DB8(result, **(void **)(a2 + 16), a3);
        unint64_t v36 = *(unsigned int *)(a2 + 8);
        if (v36 >= 0x100)
        {
          unint64_t v37 = v36 >> 8;
          uint64_t v38 = *((void *)a3 + 4);
          if ((unint64_t)(*((void *)a3 + 3) - v38) > 0xA)
          {
            *(_DWORD *)(v38 + 7) = 677733217;
            *(void *)uint64_t v38 = *(void *)" addrspace(";
            *((void *)a3 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(a3, " addrspace(", 0xBuLL);
          }
          uint64_t result = sub_1CD098D14(a3, v37, 0, 0, 0);
          uint64_t v39 = (unsigned char *)*((void *)a3 + 4);
          if ((unint64_t)v39 >= *((void *)a3 + 3))
          {
            uint64_t result = llvm::raw_ostream::write(a3, 41);
          }
          else
          {
            *((void *)a3 + 4) = v39 + 1;
            *uint64_t v39 = 41;
          }
        }
        unint64_t v12 = *((void *)a3 + 4);
        if (v12 < *((void *)a3 + 3))
        {
          *((void *)a3 + 4) = v12 + 1;
          char v13 = 42;
          goto LABEL_142;
        }
        unint64_t v54 = a3;
        char v55 = 42;
      }
      else
      {
        uint64_t v64 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v64) > 2)
        {
          *(unsigned char *)(v64 + 2) = 114;
          *(_WORD *)uint64_t v64 = 29808;
          *((void *)a3 + 4) += 3;
        }
        else
        {
          uint64_t result = llvm::raw_ostream::write(a3, "ptr", 3uLL);
        }
        unint64_t v65 = *(unsigned int *)(a2 + 8);
        if (v65 < 0x100) {
          return result;
        }
        unint64_t v66 = v65 >> 8;
        uint64_t v67 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v67) > 0xA)
        {
          *(_DWORD *)(v67 + 7) = 677733217;
          *(void *)uint64_t v67 = *(void *)" addrspace(";
          *((void *)a3 + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(a3, " addrspace(", 0xBuLL);
        }
        uint64_t result = sub_1CD098D14(a3, v66, 0, 0, 0);
LABEL_131:
        unint64_t v12 = *((void *)a3 + 4);
LABEL_132:
        if (v12 < *((void *)a3 + 3))
        {
          *((void *)a3 + 4) = v12 + 1;
          char v13 = 41;
          goto LABEL_142;
        }
        unint64_t v54 = a3;
        char v55 = 41;
      }
      goto LABEL_145;
    case 16:
      if ((v3 & 0x400) != 0)
      {
        return sub_1CC4F3BA8(result, a2, a3);
      }
      char v40 = *(size_t **)(a2 + 24);
      if (v40)
      {
        size_t v41 = *v40;
        if (*v40)
        {
          unsigned int v42 = (llvm::raw_ostream *)(v40 + 2);
          size_t v43 = (unsigned char *)*((void *)a3 + 4);
          if ((unint64_t)v43 >= *((void *)a3 + 3))
          {
            llvm::raw_ostream::write(a3, 37);
          }
          else
          {
            *((void *)a3 + 4) = v43 + 1;
            *size_t v43 = 37;
          }
          return llvm::printLLVMNameWithoutPrefix(a3, v42, v41);
        }
      }
      sub_1CC4FEC10((uint64_t)result);
      uint64_t v79 = 0;
      int v69 = sub_1CD40EA84(*((void *)v6 + 17), *((_DWORD *)v6 + 38), a2, &v79);
      uint64_t v70 = v79;
      if (v69) {
        BOOL v71 = v79 == *((void *)v6 + 17) + 16 * *((unsigned int *)v6 + 38);
      }
      else {
        BOOL v71 = 1;
      }
      if (!v71)
      {
        uint64_t v78 = (unsigned char *)*((void *)a3 + 4);
        if ((unint64_t)v78 >= *((void *)a3 + 3))
        {
          llvm::raw_ostream::write(a3, 37);
        }
        else
        {
          *((void *)a3 + 4) = v78 + 1;
          unsigned char *v78 = 37;
        }
        unint64_t v58 = *(unsigned int *)(v70 + 8);
LABEL_103:
        return sub_1CD098D14(a3, v58, 0, 0, 0);
      }
      uint64_t v72 = (_DWORD *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v72 > 6uLL)
      {
        *(_DWORD *)((char *)v72 + 3) = 543518841;
        _DWORD *v72 = 2037654053;
        *((void *)a3 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(a3, "%\"type ", 7uLL);
      }
      uint64_t result = llvm::write_hex(a3, a2, 3, 0, 0);
      unint64_t v12 = *((void *)a3 + 4);
      if (v12 < *((void *)a3 + 3))
      {
        *((void *)a3 + 4) = v12 + 1;
        char v13 = 34;
        goto LABEL_142;
      }
      unint64_t v54 = a3;
      char v55 = 34;
      goto LABEL_145;
    case 17:
      size_t v44 = (unsigned char *)*((void *)a3 + 4);
      if ((unint64_t)v44 >= *((void *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, 91);
      }
      else
      {
        *((void *)a3 + 4) = v44 + 1;
        *size_t v44 = 91;
      }
      sub_1CD098D14(a3, *(void *)(a2 + 32), 0, 0, 0);
      uint64_t v59 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v59) > 2)
      {
        *(unsigned char *)(v59 + 2) = 32;
        *(_WORD *)uint64_t v59 = 30752;
        *((void *)a3 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a3, " x ", 3uLL);
      }
      uint64_t result = (llvm::raw_ostream *)sub_1CC4F2DB8(v6, *(void *)(a2 + 24), a3);
      unint64_t v12 = *((void *)a3 + 4);
      if (v12 < *((void *)a3 + 3))
      {
        *((void *)a3 + 4) = v12 + 1;
        char v13 = 93;
        goto LABEL_142;
      }
      unint64_t v54 = a3;
      char v55 = 93;
      goto LABEL_145;
    case 18:
    case 19:
      unint64_t v7 = *(unsigned int *)(a2 + 32);
      int v8 = v3;
      uint64_t v9 = (unsigned char *)*((void *)a3 + 4);
      if (*((unsigned char **)a3 + 3) == v9)
      {
        llvm::raw_ostream::write(a3, "<", 1uLL);
      }
      else
      {
        *uint64_t v9 = 60;
        ++*((void *)a3 + 4);
      }
      if (v8 == 19)
      {
        uint64_t v10 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v10) > 8)
        {
          *(unsigned char *)(v10 + 8) = 32;
          *(void *)uint64_t v10 = *(void *)"vscale x ";
          *((void *)a3 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(a3, "vscale x ", 9uLL);
        }
      }
      sub_1CD098D14(a3, v7, 0, 0, 0);
      uint64_t v11 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v11) > 2)
      {
        *(unsigned char *)(v11 + 2) = 32;
        *(_WORD *)uint64_t v11 = 30752;
        *((void *)a3 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a3, " x ", 3uLL);
      }
      uint64_t result = (llvm::raw_ostream *)sub_1CC4F2DB8(v6, *(void *)(a2 + 24), a3);
      unint64_t v12 = *((void *)a3 + 4);
      if (v12 >= *((void *)a3 + 3))
      {
        unint64_t v54 = a3;
        char v55 = 62;
LABEL_145:
        return llvm::raw_ostream::write(v54, v55);
      }
      else
      {
        *((void *)a3 + 4) = v12 + 1;
        char v13 = 62;
LABEL_142:
        *(unsigned char *)unint64_t v12 = v13;
      }
      return result;
    case 20:
      uint64_t v45 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v45) > 8)
      {
        *(unsigned char *)(v45 + 8) = 40;
        *(void *)uint64_t v45 = *(void *)"typedptr(";
        *((void *)a3 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(a3, "typedptr(", 9uLL);
      }
      llvm::Type::print(*(llvm::Type **)(a2 + 24), a3, 0, 0);
      unsigned int v46 = (_WORD *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v46 > 1uLL)
      {
        *unsigned int v46 = 8236;
        *((void *)a3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a3, ", ", 2uLL);
      }
      uint64_t result = sub_1CD098D14(a3, (unint64_t)*(unsigned int *)(a2 + 8) >> 8, 0, 0, 0);
      goto LABEL_96;
    case 21:
      unsigned int v47 = (void *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v47 > 7uLL)
      {
        *unsigned int v47 = 0x2228746567726174;
        *((void *)a3 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a3, "target(\"", 8uLL);
      }
      uint64_t result = llvm::printEscapedString(*(llvm::raw_ostream **)(a2 + 24), *(void *)(a2 + 32), a3);
      std::string::value_type v48 = (unsigned char *)*((void *)a3 + 4);
      if (*((unsigned char **)a3 + 3) == v48)
      {
        uint64_t result = llvm::raw_ostream::write(a3, "\"", 1uLL);
      }
      else
      {
        *std::string::value_type v48 = 34;
        ++*((void *)a3 + 4);
      }
      uint64_t v49 = *(unsigned int *)(a2 + 12);
      if (v49)
      {
        uint64_t v50 = *(llvm::Type ***)(a2 + 16);
        uint64_t v51 = 8 * v49;
        do
        {
          std::string::size_type v52 = *v50;
          unint64_t v53 = (_WORD *)*((void *)a3 + 4);
          if (*((void *)a3 + 3) - (void)v53 > 1uLL)
          {
            *unint64_t v53 = 8236;
            *((void *)a3 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a3, ", ", 2uLL);
          }
          uint64_t result = (llvm::raw_ostream *)llvm::Type::print(v52, a3, 0, 0);
          ++v50;
          v51 -= 8;
        }
        while (v51);
      }
      unint64_t v56 = *(unsigned int *)(a2 + 8);
      if (v56 >= 0x100)
      {
        unsigned int v60 = *(unsigned int **)(a2 + 40);
        uint64_t v61 = 4 * (v56 >> 8);
        do
        {
          unint64_t v62 = *v60;
          char v63 = (_WORD *)*((void *)a3 + 4);
          if (*((void *)a3 + 3) - (void)v63 > 1uLL)
          {
            _WORD *v63 = 8236;
            *((void *)a3 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a3, ", ", 2uLL);
          }
          uint64_t result = sub_1CD098D14(a3, v62, 0, 0, 0);
          ++v60;
          v61 -= 4;
        }
        while (v61);
      }
LABEL_96:
      std::string::size_type v57 = (unsigned char *)*((void *)a3 + 4);
      if (*((unsigned char **)a3 + 3) == v57)
      {
        int v15 = ")";
        int v18 = a3;
        size_t v19 = 1;
        goto LABEL_98;
      }
      unsigned char *v57 = 41;
      uint64_t v68 = *((void *)a3 + 4) + 1;
      goto LABEL_179;
    default:
      uint64_t v14 = (int *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v14 > 3uLL)
      {
        int v73 = 1718378856;
LABEL_170:
        *uint64_t v14 = v73;
        uint64_t v68 = *((void *)a3 + 4) + 4;
LABEL_179:
        *((void *)a3 + 4) = v68;
      }
      else
      {
        int v15 = "half";
LABEL_28:
        int v18 = a3;
        size_t v19 = 4;
LABEL_98:
        return llvm::raw_ostream::write(v18, v15, v19);
      }
      return result;
  }
}

llvm::raw_ostream *sub_1CC4F3BA8(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x100) == 0)
  {
    uint64_t v5 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v5) > 5)
    {
      *(_WORD *)(v5 + 4) = 25973;
      *(_DWORD *)uint64_t v5 = 1902211183;
      *((void *)this + 4) += 6;
    }
    else
    {
      return llvm::raw_ostream::write(this, "opaque", 6uLL);
    }
    return result;
  }
  unint64_t v7 = result;
  if ((v4 & 0x200) != 0)
  {
    int v8 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v8 >= *((void *)this + 3))
    {
      uint64_t result = llvm::raw_ostream::write(this, 60);
    }
    else
    {
      *((void *)this + 4) = v8 + 1;
      unsigned char *v8 = 60;
    }
  }
  uint64_t v9 = (__int16 *)*((void *)this + 4);
  if (*(_DWORD *)(a2 + 12))
  {
    if (*((void *)this + 3) - (void)v9 > 1uLL)
    {
      *uint64_t v9 = 8315;
      *((void *)this + 4) += 2;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(this, "{ ", 2uLL);
    }
    uint64_t v10 = *(unsigned int *)(a2 + 12);
    if (v10)
    {
      char v11 = 0;
      unint64_t v12 = *(uint64_t **)(a2 + 16);
      uint64_t v13 = 8 * v10;
      do
      {
        uint64_t v14 = *v12;
        if (v11) {
          size_t v15 = 2;
        }
        else {
          size_t v15 = 0;
        }
        uint64_t v16 = (_WORD *)*((void *)this + 4);
        if (v15 <= *((void *)this + 3) - (void)v16)
        {
          if (v11)
          {
            *uint64_t v16 = 8236;
            *((void *)this + 4) += 2;
          }
        }
        else
        {
          if (v11) {
            uint64_t v17 = ", ";
          }
          else {
            uint64_t v17 = 0;
          }
          llvm::raw_ostream::write(this, v17, v15);
        }
        uint64_t result = (llvm::raw_ostream *)sub_1CC4F2DB8(v7, v14, this);
        ++v12;
        char v11 = 1;
        v13 -= 8;
      }
      while (v13);
    }
    uint64_t v9 = (__int16 *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v9 <= 1uLL)
    {
      int v18 = " }";
LABEL_30:
      uint64_t result = llvm::raw_ostream::write(this, v18, 2uLL);
      goto LABEL_31;
    }
    __int16 v20 = 32032;
  }
  else
  {
    if (*((void *)this + 3) - (void)v9 <= 1uLL)
    {
      int v18 = "{}";
      goto LABEL_30;
    }
    __int16 v20 = 32123;
  }
  *uint64_t v9 = v20;
  *((void *)this + 4) += 2;
LABEL_31:
  if ((*(unsigned char *)(a2 + 9) & 2) != 0)
  {
    size_t v19 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v19 >= *((void *)this + 3))
    {
      return llvm::raw_ostream::write(this, 62);
    }
    else
    {
      *((void *)this + 4) = v19 + 1;
      *size_t v19 = 62;
    }
  }
  return result;
}

void *sub_1CC4F3E10(void *a1)
{
  int v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[17], 8);
  int v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](a1[10], 8);
  MEMORY[0x1D25D9CD0](a1[7], 8);
  MEMORY[0x1D25D9CD0](a1[4], 8);
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

uint64_t sub_1CC4F3E90(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 21)
  {
    a1 = *(void *)(a1 + 24);
    if (!a1) {
      return 0;
    }
    return *(void *)(a1 + 40);
  }
  if (a1 && v1 == 22)
  {
    a1 = *(void *)(a1 + 56);
    if (!a1) {
      return 0;
    }
    return *(void *)(a1 + 40);
  }
  if (a1 && v1 >= 0x1C)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      a1 = *(void *)(v2 + 56);
      if (!a1) {
        return 0;
      }
      return *(void *)(a1 + 40);
    }
  }
  else
  {
    if (a1 && v1 < 4) {
      return *(void *)(a1 + 40);
    }
    uint64_t v2 = 0;
    if (a1 && v1 == 23)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (!v3) {
        return 0;
      }
      while (1)
      {
        if (*(unsigned __int8 *)(*(void *)(v3 + 24) + 16) >= 0x1Cu)
        {
          uint64_t v4 = sub_1CC4F3E90();
          if (v4) {
            break;
          }
        }
        uint64_t v2 = 0;
        uint64_t v3 = *(void *)(v3 + 8);
        if (!v3) {
          return v2;
        }
      }
      return v4;
    }
  }
  return v2;
}

void sub_1CC4F3F64(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v460 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[28];
  if (v4) {
    (*(void (**)(llvm::raw_ostream *, uint64_t, llvm::raw_ostream *))(*(void *)v4 + 40))(v4, a2, *a1);
  }
  uint64_t v5 = *a1;
  char v6 = (_WORD *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v6 > 1uLL)
  {
    *char v6 = 8224;
    *((void *)v5 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v5, "  ", 2uLL);
  }
  if ((*(unsigned char *)(a2 + 23) & 0x10) != 0)
  {
    uint64_t v15 = ***(void ***)a2;
    uint64_t v16 = *(void *)(v15 + 152);
    uint64_t v17 = *(unsigned int *)(v15 + 168);
    if (v17)
    {
      LODWORD(v18) = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      size_t v19 = (uint64_t *)(v16 + 16 * v18);
      uint64_t v20 = *v19;
      if (*v19 == a2)
      {
LABEL_30:
        uint64_t v26 = (size_t *)v19[1];
        size_t v29 = *v26;
        char v27 = (llvm::raw_ostream *)(v26 + 2);
        size_t v28 = v29;
        if (*(unsigned __int8 *)(a2 + 16) >= 4u) {
          int v30 = 3;
        }
        else {
          int v30 = 0;
        }
        sub_1CC4F2BA0(*a1, v27, v28, v30);
        size_t v31 = *a1;
        uint64_t v32 = *((void *)*a1 + 4);
        if ((unint64_t)(*((void *)*a1 + 3) - v32) <= 2)
        {
          uint64_t v33 = " = ";
LABEL_42:
          size_t v35 = 3;
          goto LABEL_43;
        }
        *(unsigned char *)(v32 + 2) = 32;
        *(_WORD *)uint64_t v32 = 15648;
        uint64_t v213 = *((void *)v31 + 4) + 3;
        goto LABEL_307;
      }
      int v21 = 1;
      while (v20 != -4096)
      {
        int v22 = v18 + v21++;
        uint64_t v18 = v22 & (v17 - 1);
        uint64_t v20 = *(void *)(v16 + 16 * v18);
        if (v20 == a2)
        {
          size_t v19 = (uint64_t *)(v16 + 16 * v18);
          goto LABEL_30;
        }
      }
    }
    size_t v19 = (uint64_t *)(v16 + 16 * v17);
    goto LABEL_30;
  }
  if (*(unsigned char *)(*(void *)a2 + 8) == 7) {
    goto LABEL_44;
  }
  unint64_t v7 = a1[4];
  if (*((void *)v7 + 1))
  {
    llvm::SlotTracker::processModule(a1[4]);
    *((void *)v7 + 1) = 0;
  }
  if (*((void *)v7 + 2) && !*((unsigned char *)v7 + 24)) {
    llvm::SlotTracker::processFunction(v7);
  }
  uint64_t v8 = *((void *)v7 + 17);
  uint64_t v9 = *((unsigned int *)v7 + 38);
  if (!v9) {
    goto LABEL_24;
  }
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  char v11 = (uint64_t *)(v8 + 16 * v10);
  uint64_t v12 = *v11;
  if (*v11 != a2)
  {
    int v13 = 1;
    while (v12 != -4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      uint64_t v12 = *(void *)(v8 + 16 * v10);
      if (v12 == a2)
      {
        char v11 = (uint64_t *)(v8 + 16 * v10);
        goto LABEL_25;
      }
    }
LABEL_24:
    char v11 = (uint64_t *)(v8 + 16 * v9);
  }
LABEL_25:
  if (v11 == (uint64_t *)(v8 + 16 * v9) || (unint64_t v23 = *((int *)v11 + 2), v23 == -1))
  {
    size_t v31 = *a1;
    uint64_t v34 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v34) <= 0xA)
    {
      uint64_t v33 = "<badref> = ";
      size_t v35 = 11;
LABEL_43:
      llvm::raw_ostream::write(v31, v33, v35);
      goto LABEL_44;
    }
    *(_DWORD *)(v34 + 7) = 540876862;
    *(void *)uint64_t v34 = *(void *)"<badref> = ";
    uint64_t v213 = *((void *)v31 + 4) + 11;
LABEL_307:
    *((void *)v31 + 4) = v213;
    goto LABEL_44;
  }
  uint64_t v24 = *a1;
  uint64_t v25 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v25 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(*a1, 37);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    *uint64_t v25 = 37;
  }
  if ((v23 & 0x80000000) != 0)
  {
    unint64_t v37 = -(uint64_t)v23;
    unint64_t v36 = v24;
    int v38 = 1;
  }
  else
  {
    unint64_t v36 = v24;
    unint64_t v37 = v23;
    int v38 = 0;
  }
  sub_1CD098D14(v36, v37, 0, 0, v38);
  uint64_t v39 = *((void *)v24 + 4);
  if ((unint64_t)(*((void *)v24 + 3) - v39) <= 2)
  {
    uint64_t v33 = " = ";
    size_t v31 = v24;
    goto LABEL_42;
  }
  *(unsigned char *)(v39 + 2) = 32;
  *(_WORD *)uint64_t v39 = 15648;
  *((void *)v24 + 4) += 3;
LABEL_44:
  if (*(unsigned char *)(a2 + 16) != 84) {
    goto LABEL_55;
  }
  int v40 = *(_WORD *)(a2 + 18) & 3;
  if (v40 == 2)
  {
    size_t v41 = *a1;
    uint64_t v42 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v42) <= 8)
    {
      size_t v43 = "musttail ";
      size_t v44 = 9;
LABEL_54:
      llvm::raw_ostream::write(v41, v43, v44);
      goto LABEL_55;
    }
    *(unsigned char *)(v42 + 8) = 32;
    *(void *)uint64_t v42 = *(void *)"musttail ";
    uint64_t v236 = *((void *)v41 + 4) + 9;
  }
  else if ((v40 - 1) > 1)
  {
    if (v40 != 3) {
      goto LABEL_55;
    }
    size_t v41 = *a1;
    unsigned int v46 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v46 <= 6uLL)
    {
      size_t v43 = "notail ";
      size_t v44 = 7;
      goto LABEL_54;
    }
    *(_DWORD *)((char *)v46 + 3) = 543975777;
    *unsigned int v46 = 1635020654;
    uint64_t v236 = *((void *)v41 + 4) + 7;
  }
  else
  {
    size_t v41 = *a1;
    uint64_t v45 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v45) <= 4)
    {
      size_t v43 = "tail ";
      size_t v44 = 5;
      goto LABEL_54;
    }
    *(unsigned char *)(v45 + 4) = 32;
    *(_DWORD *)uint64_t v45 = 1818845556;
    uint64_t v236 = *((void *)v41 + 4) + 5;
  }
  *((void *)v41 + 4) = v236;
LABEL_55:
  unsigned int v47 = *a1;
  OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(a2 + 16) - 28));
  size_t v49 = strlen(OpcodeName);
  uint64_t v50 = (void *)*((void *)v47 + 4);
  if (v49 <= *((void *)v47 + 3) - (void)v50)
  {
    if (v49)
    {
      memcpy(v50, OpcodeName, v49);
      *((void *)v47 + 4) += v49;
    }
  }
  else
  {
    llvm::raw_ostream::write(v47, OpcodeName, v49);
  }
  int v51 = *(unsigned __int8 *)(a2 + 16);
  if (v51 == 61 || v51 == 60)
  {
    if ((*(_WORD *)(a2 + 18) & 0x380) != 0)
    {
      std::string::size_type v52 = *a1;
      unint64_t v53 = (_DWORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v53 > 6uLL)
      {
        *(_DWORD *)((char *)v53 + 3) = 1667853679;
        *unint64_t v53 = 1869898016;
        *((void *)v52 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v52, " atomic", 7uLL);
      }
    }
    int v51 = *(unsigned __int8 *)(a2 + 16);
  }
  if (v51 == 64)
  {
    if ((*(_WORD *)(a2 + 18) & 2) != 0)
    {
      unint64_t v54 = *a1;
      uint64_t v55 = *((void *)*a1 + 4);
      if ((unint64_t)(*((void *)*a1 + 3) - v55) > 4)
      {
        *(unsigned char *)(v55 + 4) = 107;
        *(_DWORD *)uint64_t v55 = 1634039584;
        *((void *)v54 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v54, " weak", 5uLL);
      }
    }
    int v51 = *(unsigned __int8 *)(a2 + 16);
  }
  switch(v51)
  {
    case '<':
    case '=':
    case '@':
    case 'A':
      if (*(_WORD *)(a2 + 18))
      {
        unint64_t v56 = *a1;
        uint64_t v57 = *((void *)*a1 + 4);
        if ((unint64_t)(*((void *)*a1 + 3) - v57) > 8)
        {
          *(unsigned char *)(v57 + 8) = 101;
          *(void *)uint64_t v57 = *(void *)" volatile";
          *((void *)v56 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v56, " volatile", 9uLL);
        }
      }
      break;
    default:
      break;
  }
  sub_1CC503278(*a1, a2);
  int v58 = *(unsigned __int8 *)(a2 + 16);
  if ((v58 - 83) >= 0xFFFFFFFE)
  {
    uint64_t v59 = *a1;
    unsigned int v60 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v60 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(*a1, 32);
    }
    else
    {
      *((void *)v59 + 4) = v60 + 1;
      *unsigned int v60 = 32;
    }
    PredicateName = llvm::CmpInst::getPredicateName(*(_WORD *)(a2 + 18) & 0x3F);
    size_t v63 = v61;
    uint64_t v64 = (void *)*((void *)v59 + 4);
    if (v61 <= *((void *)v59 + 3) - (void)v64)
    {
      if (v61)
      {
        memcpy(v64, PredicateName, v61);
        *((void *)v59 + 4) += v63;
      }
    }
    else
    {
      llvm::raw_ostream::write(v59, PredicateName, v61);
    }
    int v58 = *(unsigned __int8 *)(a2 + 16);
  }
  if (v58 == 65)
  {
    unint64_t v65 = *a1;
    unint64_t v66 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v66 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(*a1, 32);
    }
    else
    {
      *((void *)v65 + 4) = v66 + 1;
      *unint64_t v66 = 32;
    }
    OperationName = llvm::AtomicRMWInst::getOperationName(*(_WORD *)(a2 + 18) >> 4);
    size_t v69 = v67;
    uint64_t v70 = (void *)*((void *)v65 + 4);
    if (v67 <= *((void *)v65 + 3) - (void)v70)
    {
      if (v67)
      {
        memcpy(v70, OperationName, v67);
        *((void *)v65 + 4) += v69;
      }
    }
    else
    {
      llvm::raw_ostream::write(v65, OperationName, v67);
    }
  }
  int v71 = *(_DWORD *)(a2 + 20);
  uint64_t v72 = v71 & 0x7FFFFFF;
  if ((v71 & 0x7FFFFFF) != 0)
  {
    if ((v71 & 0x40000000) != 0) {
      int v73 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    }
    else {
      int v73 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * v72);
    }
    int v75 = *v73;
    int v74 = *(unsigned __int8 *)(a2 + 16);
    if (v74 == 30)
    {
      if (v72 == 3)
      {
        uint64_t v76 = *a1;
        unsigned __int16 v77 = (unsigned char *)*((void *)*a1 + 4);
        if ((unint64_t)v77 >= *((void *)*a1 + 3))
        {
          llvm::raw_ostream::write(v76, 32);
        }
        else
        {
          *((void *)v76 + 4) = v77 + 1;
          *unsigned __int16 v77 = 32;
        }
        sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 96), 1);
        uint64_t v132 = *a1;
        uint64_t v133 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v133 > 1uLL)
        {
          *uint64_t v133 = 8236;
          *((void *)v132 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v132, ", ", 2uLL);
        }
        sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 32), 1);
        uint64_t v134 = *a1;
        unsigned int v135 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v135 > 1uLL)
        {
          _WORD *v135 = 8236;
          *((void *)v134 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v134, ", ", 2uLL);
        }
        char v136 = *(llvm::detail::DoubleAPFloat **)(a2 - 64);
        goto LABEL_184;
      }
      if (!v75) {
        goto LABEL_185;
      }
      goto LABEL_112;
    }
  }
  else
  {
    int v74 = *(unsigned __int8 *)(a2 + 16);
    if (v74 == 30) {
      goto LABEL_209;
    }
    int v75 = 0;
  }
  if (v74 == 32)
  {
    uint64_t v80 = *a1;
    uint64_t v81 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v81 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v80, 32);
    }
    else
    {
      *((void *)v80 + 4) = v81 + 1;
      unsigned char *v81 = 32;
    }
    sub_1CC4FBF20((uint64_t)a1, v75, 1);
    uint64_t v117 = *a1;
    uint64_t v118 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v118) > 2)
    {
      *(unsigned char *)(v118 + 2) = 91;
      *(_WORD *)uint64_t v118 = 8236;
      *((void *)v117 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v117, ", [", 3uLL);
    }
    int v119 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    int v120 = v119 - 1;
    if (v119 != 1)
    {
      uint64_t v125 = 32;
      do
      {
        if (v125 != 32)
        {
          uint64_t v126 = *a1;
          char v127 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v127 > 1uLL)
          {
            *char v127 = 8236;
            *((void *)v126 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v126, ", ", 2uLL);
          }
        }
        int v128 = *(_DWORD *)(a2 + 20);
        if ((v128 & 0x40000000) != 0) {
          uint64_t v129 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v129 = a2 - 32 * (v128 & 0x7FFFFFF);
        }
        sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v129 + v125), 1);
        v125 += 32;
        --v120;
      }
      while (v120);
    }
    goto LABEL_159;
  }
  if (v74 == 31)
  {
    uint64_t v78 = *a1;
    uint64_t v79 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v79 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v78, 32);
    }
    else
    {
      *((void *)v78 + 4) = v79 + 1;
      *uint64_t v79 = 32;
    }
    int v94 = *(_DWORD *)(a2 + 20);
    if ((v94 & 0x40000000) != 0) {
      size_t v95 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    }
    else {
      size_t v95 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * (v94 & 0x7FFFFFF));
    }
    sub_1CC4FBF20((uint64_t)a1, *v95, 1);
    uint64_t v96 = *a1;
    uint64_t v97 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v97 > 1uLL)
    {
      *uint64_t v97 = 8236;
      *((void *)v96 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v96, ", ", 2uLL);
    }
    int v98 = *(_DWORD *)(a2 + 20);
    if ((v98 & 0x40000000) != 0) {
      uint64_t v99 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v99 = a2 - 32 * (v98 & 0x7FFFFFF);
    }
    sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v99 + 32), 1);
    uint64_t v100 = *a1;
    unsigned int v101 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v101 > 1uLL)
    {
      *unsigned int v101 = 23328;
      *((void *)v100 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v100, " [", 2uLL);
    }
    if (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF) != 1)
    {
      uint64_t v102 = 0;
      uint64_t v103 = 2 * (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1);
      do
      {
        size_t v104 = *a1;
        uint64_t v105 = *((void *)*a1 + 4);
        if ((unint64_t)(*((void *)*a1 + 3) - v105) > 4)
        {
          *(unsigned char *)(v105 + 4) = 32;
          *(_DWORD *)uint64_t v105 = 538976266;
          *((void *)v104 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v104, "\n    ", 5uLL);
        }
        int v106 = *(_DWORD *)(a2 + 20);
        if ((v106 & 0x40000000) != 0) {
          uint64_t v107 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v107 = a2 - 32 * (v106 & 0x7FFFFFF);
        }
        sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v107 + 32 * ((v102 + 2) & 0xFFFFFFFE)), 1);
        size_t v108 = *a1;
        char v109 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v109 > 1uLL)
        {
          *char v109 = 8236;
          *((void *)v108 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v108, ", ", 2uLL);
        }
        int v110 = *(_DWORD *)(a2 + 20);
        if ((v110 & 0x40000000) != 0) {
          uint64_t v111 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v111 = a2 - 32 * (v110 & 0x7FFFFFF);
        }
        uint64_t v112 = (v102 + 3);
        if (v102 == 0x1FFFFFFFCLL) {
          uint64_t v112 = 1;
        }
        sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v111 + 32 * v112), 1);
        v102 += 2;
      }
      while (v103 != v102);
    }
    uint64_t v113 = *a1;
    uint64_t v114 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v114 <= 3uLL)
    {
      unint64_t v115 = "\n  ]";
      size_t v116 = 4;
LABEL_154:
      llvm::raw_ostream::write(v113, v115, v116);
      goto LABEL_185;
    }
    *uint64_t v114 = 1562386442;
    uint64_t v261 = *((void *)v113 + 4) + 4;
    goto LABEL_391;
  }
  if (v74 == 83) {
    uint64_t v82 = a2;
  }
  else {
    uint64_t v82 = 0;
  }
  if (v74 == 83)
  {
    int64_t v83 = *a1;
    int64_t v84 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v84 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v83, 32);
    }
    else
    {
      *((void *)v83 + 4) = v84 + 1;
      *int64_t v84 = 32;
    }
    sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *(void *)a2, *a1);
    uint64_t v155 = *a1;
    uint64_t v156 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v156 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v155, 32);
    }
    else
    {
      *((void *)v155 + 4) = v156 + 1;
      unsigned char *v156 = 32;
    }
    uint64_t v157 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    if (v157)
    {
      uint64_t v158 = 0;
      uint64_t v159 = 0;
      uint64_t v160 = 32 * v157;
      do
      {
        if (v158)
        {
          uint64_t v161 = *a1;
          uint64_t v162 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v162 > 1uLL)
          {
            *uint64_t v162 = 8236;
            *((void *)v161 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v161, ", ", 2uLL);
          }
        }
        uint64_t v163 = *a1;
        int v164 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v164 > 1uLL)
        {
          *int v164 = 8283;
          *((void *)v163 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v163, "[ ", 2uLL);
        }
        int v165 = *(_DWORD *)(a2 + 20);
        if ((v165 & 0x40000000) != 0) {
          uint64_t v166 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v166 = v82 - 32 * (v165 & 0x7FFFFFF);
        }
        sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v166 + v159), 0);
        uint64_t v167 = *a1;
        uint64_t v168 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v168 > 1uLL)
        {
          _WORD *v168 = 8236;
          *((void *)v167 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v167, ", ", 2uLL);
        }
        int v169 = *(_DWORD *)(a2 + 20);
        if ((v169 & 0x40000000) != 0) {
          uint64_t v170 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v170 = v82 - 32 * (v169 & 0x7FFFFFF);
        }
        sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v170 + 32 * *(unsigned int *)(a2 + 60) + v158), 0);
        uint64_t v171 = *a1;
        uint64_t v172 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v172 > 1uLL)
        {
          *uint64_t v172 = 23840;
          *((void *)v171 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v171, " ]", 2uLL);
        }
        v159 += 32;
        v158 += 8;
      }
      while (v160 != v159);
    }
    goto LABEL_185;
  }
  if (v74 == 93)
  {
    int v183 = *a1;
    BOOL v184 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v184 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v183, 32);
    }
    else
    {
      *((void *)v183 + 4) = v184 + 1;
      *BOOL v184 = 32;
    }
    int v196 = *(_DWORD *)(a2 + 20);
    if ((v196 & 0x40000000) != 0) {
      uint64_t v197 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    }
    else {
      uint64_t v197 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * (v196 & 0x7FFFFFF));
    }
    sub_1CC4FBF20((uint64_t)a1, *v197, 1);
    uint64_t v198 = *a1;
    unint64_t v199 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v199 > 1uLL)
    {
      *unint64_t v199 = 8236;
      *((void *)v198 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v198, ", ", 2uLL);
    }
    int v200 = *(_DWORD *)(a2 + 20);
    if ((v200 & 0x40000000) != 0) {
      uint64_t v201 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v201 = a2 - 32 * (v200 & 0x7FFFFFF);
    }
    sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v201 + 32), 1);
    uint64_t v202 = *(unsigned int *)(a2 + 72);
    if (v202)
    {
      uint64_t v203 = *(unsigned int **)(a2 + 64);
      uint64_t v204 = 4 * v202;
      do
      {
        unint64_t v205 = *v203;
        unsigned int v206 = *a1;
        unsigned int v207 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v207 > 1uLL)
        {
          _WORD *v207 = 8236;
          *((void *)v206 + 4) += 2;
        }
        else
        {
          unsigned int v206 = llvm::raw_ostream::write(v206, ", ", 2uLL);
        }
        sub_1CD098D14(v206, v205, 0, 0, 0);
        ++v203;
        v204 -= 4;
      }
      while (v204);
    }
    goto LABEL_185;
  }
  if (v74 == 92)
  {
    std::string::size_type v130 = *a1;
    std::string::size_type v131 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v131 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v130, 32);
    }
    else
    {
      *((void *)v130 + 4) = v131 + 1;
      *std::string::size_type v131 = 32;
    }
    int v188 = *(_DWORD *)(a2 + 20);
    if ((v188 & 0x40000000) != 0) {
      uint64_t v189 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    }
    else {
      uint64_t v189 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * (v188 & 0x7FFFFFF));
    }
    sub_1CC4FBF20((uint64_t)a1, *v189, 1);
    uint64_t v190 = *(unsigned int *)(a2 + 72);
    if (v190)
    {
      uint64_t v191 = *(unsigned int **)(a2 + 64);
      uint64_t v192 = 4 * v190;
      do
      {
        unint64_t v193 = *v191;
        unsigned int v194 = *a1;
        unint64_t v195 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v195 > 1uLL)
        {
          _WORD *v195 = 8236;
          *((void *)v194 + 4) += 2;
        }
        else
        {
          unsigned int v194 = llvm::raw_ostream::write(v194, ", ", 2uLL);
        }
        sub_1CD098D14(v194, v193, 0, 0, 0);
        ++v191;
        v192 -= 4;
      }
      while (v192);
    }
    goto LABEL_185;
  }
  if (v74 == 94) {
    uint64_t v185 = a2;
  }
  else {
    uint64_t v185 = 0;
  }
  if (v74 == 94)
  {
    uint64_t v186 = *a1;
    unsigned int v187 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v187 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v186, 32);
    }
    else
    {
      *((void *)v186 + 4) = v187 + 1;
      *unsigned int v187 = 32;
    }
    sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *(void *)a2, *a1);
    if ((*(_WORD *)(a2 + 18) & 1) != 0 || (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 0)
    {
      uint64_t v214 = *a1;
      unint64_t v215 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v215 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v214, 10);
      }
      else
      {
        *((void *)v214 + 4) = v215 + 1;
        unsigned char *v215 = 10;
      }
    }
    if (*(_WORD *)(a2 + 18))
    {
      uint64_t v218 = *a1;
      uint64_t v219 = *((void *)*a1 + 4);
      if ((unint64_t)(*((void *)*a1 + 3) - v219) > 0x10)
      {
        *(unsigned char *)(v219 + 16) = 112;
        *(_OWORD *)uint64_t v219 = *(_OWORD *)"          cleanup";
        *((void *)v218 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v218, "          cleanup", 0x11uLL);
      }
    }
    uint64_t v220 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    if (!v220) {
      goto LABEL_185;
    }
    uint64_t v221 = 0;
    uint64_t v222 = 32 * v220;
    while (1)
    {
      if (v221 || (*(_WORD *)(a2 + 18) & 1) != 0)
      {
        uint64_t v223 = *a1;
        uint64_t v224 = (unsigned char *)*((void *)*a1 + 4);
        if (*((unsigned char **)*a1 + 3) == v224)
        {
          llvm::raw_ostream::write(v223, "\n", 1uLL);
        }
        else
        {
          unsigned char *v224 = 10;
          ++*((void *)v223 + 4);
        }
      }
      int v225 = *(_DWORD *)(a2 + 20);
      if ((v225 & 0x40000000) != 0) {
        uint64_t v226 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v226 = v185 - 32 * (v225 & 0x7FFFFFF);
      }
      int v227 = *(unsigned __int8 *)(**(void **)(v226 + v221) + 8);
      uint64_t v228 = *a1;
      uint64_t v229 = *((void *)*a1 + 4);
      unint64_t v230 = *((void *)*a1 + 3) - v229;
      if (v227 == 17)
      {
        if (v230 > 0x10)
        {
          *(unsigned char *)(v229 + 16) = 32;
          *(_OWORD *)uint64_t v229 = *(_OWORD *)"          filter ";
          uint64_t v235 = *((void *)v228 + 4) + 17;
LABEL_350:
          *((void *)v228 + 4) = v235;
          goto LABEL_342;
        }
        uint64_t v231 = "          filter ";
        size_t v232 = 17;
      }
      else
      {
        if (v230 > 0xF)
        {
          *(_OWORD *)uint64_t v229 = *(_OWORD *)"          catch ";
          uint64_t v235 = *((void *)v228 + 4) + 16;
          goto LABEL_350;
        }
        uint64_t v231 = "          catch ";
        size_t v232 = 16;
      }
      llvm::raw_ostream::write(v228, v231, v232);
LABEL_342:
      int v233 = *(_DWORD *)(a2 + 20);
      if ((v233 & 0x40000000) != 0) {
        uint64_t v234 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v234 = v185 - 32 * (v233 & 0x7FFFFFF);
      }
      sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v234 + v221), 1);
      v221 += 32;
      if (v222 == v221) {
        goto LABEL_185;
      }
    }
  }
  if (v74 == 38) {
    uint64_t v208 = a2;
  }
  else {
    uint64_t v208 = 0;
  }
  if (v74 == 38)
  {
    unint64_t v209 = *a1;
    unsigned int v210 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v210 > 7uLL)
    {
      *unsigned int v210 = 0x206E696874697720;
      *((void *)v209 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v209, " within ", 8uLL);
    }
    int v211 = *(_DWORD *)(a2 + 20);
    if ((v211 & 0x40000000) != 0) {
      uint64_t v212 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    }
    else {
      uint64_t v212 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * (v211 & 0x7FFFFFF));
    }
    sub_1CC4FBF20((uint64_t)a1, *v212, 0);
    BOOL v237 = *a1;
    int v238 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v238 > 1uLL)
    {
      *int v238 = 23328;
      *((void *)v237 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v237, " [", 2uLL);
    }
    int v239 = *(_DWORD *)(a2 + 20);
    if ((v239 & 0x40000000) != 0)
    {
      uint64_t v241 = *(void *)(a2 - 8);
      uint64_t v240 = v239 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v240 = v239 & 0x7FFFFFF;
      uint64_t v241 = a2 - 32 * v240;
    }
    uint64_t v250 = 1;
    if (*(_WORD *)(a2 + 18)) {
      uint64_t v250 = 2;
    }
    if (v250 != v240)
    {
      int v255 = 0;
      uint64_t v256 = (llvm::detail::DoubleAPFloat **)(v241 + 32 * v250);
      uint64_t v257 = 32 * v240 - 32 * v250;
      do
      {
        int v258 = *v256;
        if (v255)
        {
          int v259 = *a1;
          uint64_t v260 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v260 > 1uLL)
          {
            *uint64_t v260 = 8236;
            *((void *)v259 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v259, ", ", 2uLL);
          }
        }
        sub_1CC4FBF20((uint64_t)a1, v258, 1);
        v256 += 4;
        --v255;
        v257 -= 32;
      }
      while (v257);
    }
    uint64_t v251 = *a1;
    uint64_t v252 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v252) > 8)
    {
      *(unsigned char *)(v252 + 8) = 32;
      *(void *)uint64_t v252 = *(void *)"] unwind ";
      *((void *)v251 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v251, "] unwind ", 9uLL);
    }
    if (*(_WORD *)(a2 + 18))
    {
      int v253 = *(_DWORD *)(a2 + 20);
      uint64_t v254 = (v253 & 0x40000000) != 0 ? *(void *)(v208 - 8) : v208 - 32 * (v253 & 0x7FFFFFF);
      char v136 = *(llvm::detail::DoubleAPFloat **)(v254 + 32);
      if (v136) {
        goto LABEL_184;
      }
    }
LABEL_413:
    uint64_t v113 = *a1;
    uint64_t v266 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v266) <= 8)
    {
      unint64_t v115 = "to caller";
      size_t v116 = 9;
      goto LABEL_154;
    }
    *(unsigned char *)(v266 + 8) = 114;
    *(void *)uint64_t v266 = *(void *)"to caller";
    uint64_t v261 = *((void *)v113 + 4) + 9;
LABEL_391:
    *((void *)v113 + 4) = v261;
    goto LABEL_185;
  }
  if ((v74 - 81) >= 0xFFFFFFFE) {
    uint64_t v216 = a2;
  }
  else {
    uint64_t v216 = 0;
  }
  if ((v74 - 81) >= 0xFFFFFFFE)
  {
    unsigned int v242 = *a1;
    uint64_t v243 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v243 > 7uLL)
    {
      *uint64_t v243 = 0x206E696874697720;
      *((void *)v242 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v242, " within ", 8uLL);
    }
    sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 32), 0);
    uint64_t v244 = *a1;
    uint64_t v245 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v245 > 1uLL)
    {
      _WORD *v245 = 23328;
      *((void *)v244 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v244, " [", 2uLL);
    }
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 1)
    {
      uint64_t v246 = 0;
      uint64_t v247 = 32 * ((*(_DWORD *)(a2 + 20) & 0x7FFFFFFu) - 1);
      do
      {
        if (v246)
        {
          uint64_t v248 = *a1;
          uint64_t v249 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v249 > 1uLL)
          {
            *uint64_t v249 = 8236;
            *((void *)v248 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v248, ", ", 2uLL);
          }
        }
        sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v216 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + v246), 1);
        v246 += 32;
      }
      while (v247 != v246);
    }
    goto LABEL_159;
  }
  if (v74 == 29 && !v75)
  {
    uint64_t v113 = *a1;
    uint64_t v217 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v217) <= 4)
    {
      unint64_t v115 = " void";
      size_t v116 = 5;
      goto LABEL_154;
    }
    *(unsigned char *)(v217 + 4) = 100;
    *(_DWORD *)uint64_t v217 = 1768912416;
    uint64_t v261 = *((void *)v113 + 4) + 5;
    goto LABEL_391;
  }
  if (v74 == 36)
  {
    uint64_t v267 = *a1;
    uint64_t v268 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v268) > 5)
    {
      *(_WORD *)(v268 + 4) = 8301;
      *(_DWORD *)uint64_t v268 = 1869768224;
      *((void *)v267 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v267, " from ", 6uLL);
    }
    sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), 0);
    int v269 = *a1;
    uint64_t v270 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v270 > 7uLL)
    {
      void *v270 = 0x20646E69776E7520;
      *((void *)v269 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v269, " unwind ", 8uLL);
    }
    if (*(_WORD *)(a2 + 18))
    {
      char v136 = *(llvm::detail::DoubleAPFloat **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_184:
      sub_1CC4FBF20((uint64_t)a1, v136, 1);
      goto LABEL_185;
    }
    goto LABEL_413;
  }
  if (v74 == 37)
  {
    BOOL v262 = *a1;
    uint64_t v263 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v263) > 5)
    {
      *(_WORD *)(v263 + 4) = 8301;
      *(_DWORD *)uint64_t v263 = 1869768224;
      *((void *)v262 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v262, " from ", 6uLL);
    }
    sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 64), 0);
    uint64_t v264 = *a1;
    uint64_t v265 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v265 > 3uLL)
    {
      *uint64_t v265 = 544175136;
      *((void *)v264 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v264, " to ", 4uLL);
    }
    char v136 = *(llvm::detail::DoubleAPFloat **)(a2 - 32);
    goto LABEL_184;
  }
  if (v74 == 84) {
    uint64_t v271 = a2;
  }
  else {
    uint64_t v271 = 0;
  }
  if (v74 == 84)
  {
    if ((*(_WORD *)(a2 + 18) & 0xFFC) != 0)
    {
      unsigned int v272 = *a1;
      unsigned int v273 = (unsigned char *)*((void *)*a1 + 4);
      if (*((unsigned char **)*a1 + 3) == v273)
      {
        llvm::raw_ostream::write(v272, " ", 1uLL);
      }
      else
      {
        unsigned char *v273 = 32;
        ++*((void *)v272 + 4);
      }
      sub_1CC4FA65C((llvm::raw_ostream *)((*(unsigned __int16 *)(a2 + 18) >> 2) & 0x3FF), *a1);
    }
    unsigned int v274 = *(uint64_t **)(a2 - 32);
    uint64_t v275 = *(void *)(a2 + 64);
    unint64_t v276 = *(void *)(a2 + 72);
    unint64_t v277 = **(void **)(v276 + 16);
    if (v275 && *(_DWORD *)(v275 + 8) >= 2u && *(void *)(v275 + 48))
    {
      int v321 = *a1;
      uint64_t v322 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v322 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(*a1, 32);
      }
      else
      {
        *((void *)v321 + 4) = v322 + 1;
        *uint64_t v322 = 32;
      }
      if (*(_DWORD *)(v275 + 8) >= 2u && (uint64_t v403 = *(llvm::AttributeSetNode **)(v275 + 48)) != 0)
      {
        llvm::AttributeSetNode::getAsString(v403, 0, &__p);
        char v404 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        char v404 = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
      }
      BOOL v405 = v404 < 0;
      unint64_t v406 = v404 >= 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v407 = v404 & 0x7F;
      size_t v408 = v405 ? __p.__r_.__value_.__l.__size_ : v407;
      llvm::raw_ostream::write(v321, (const char *)v406, v408);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    sub_1CC5034B4(*v274, a2, *a1);
    int v278 = *a1;
    BOOL v279 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v279 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v278, 32);
    }
    else
    {
      *((void *)v278 + 4) = v279 + 1;
      *BOOL v279 = 32;
    }
    if (*(_DWORD *)(v276 + 8) <= 0xFFu) {
      unint64_t v289 = v277;
    }
    else {
      unint64_t v289 = v276;
    }
    sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), v289, *a1);
    __int16 v290 = *a1;
    uint64_t v291 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v291 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v290, 32);
    }
    else
    {
      *((void *)v290 + 4) = v291 + 1;
      *uint64_t v291 = 32;
    }
    sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)v274, 0);
    uint64_t v301 = *a1;
    uint64_t v302 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v302 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v301, 40);
    }
    else
    {
      *((void *)v301 + 4) = v302 + 1;
      *uint64_t v302 = 40;
    }
    int v303 = *(unsigned __int8 *)(a2 + 16);
    if (v303 == 84)
    {
      uint64_t v304 = 0;
    }
    else if (v303 == 39)
    {
      uint64_t v304 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      uint64_t v304 = 2;
    }
    int v305 = *(_DWORD *)(a2 + 20);
    if (v305 < 0 && (uint64_t v451 = a2 - 32 * (v305 & 0x7FFFFFF), v452 = *(void *)(v451 - 8), (v452 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v307 = -(uint64_t)(v305 & 0x7FFFFFF);
      uint64_t v306 = (*(_DWORD *)(v451 - 12) - *(_DWORD *)(v451 - v452));
    }
    else
    {
      uint64_t v306 = 0;
      uint64_t v307 = -(uint64_t)(v305 & 0x7FFFFFF);
    }
    unint64_t v308 = -32 * v304 - 32 * v306 - 32 * v307 - 32;
    if ((v308 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v309 = 0;
      uint64_t v310 = (v308 >> 5);
      uint64_t v311 = v271;
      do
      {
        if (v309)
        {
          uint64_t v312 = *a1;
          uint64_t v313 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v313 > 1uLL)
          {
            *uint64_t v313 = 8236;
            *((void *)v312 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v312, ", ", 2uLL);
          }
        }
        if (v275 && (v309 + 2) < *(_DWORD *)(v275 + 8)) {
          uint64_t v314 = *(void *)(v275 + 40 + 8 * (v309 + 2));
        }
        else {
          uint64_t v314 = 0;
        }
        sub_1CC5035C4((uint64_t)a1, *(unint64_t **)(v311 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v314);
        ++v309;
        v311 += 32;
      }
      while (v310 != v309);
    }
    if ((*(_WORD *)(a2 + 18) & 3) == 2)
    {
      uint64_t v315 = *(void *)(v271 + 40);
      if (v315)
      {
        uint64_t v316 = *(void *)(v315 + 56);
        if (v316)
        {
          if (*(_DWORD *)(*(void *)(v316 + 24) + 8) >= 0x100u)
          {
            unsigned int v317 = *a1;
            uint64_t v318 = *((void *)*a1 + 4);
            if ((unint64_t)(*((void *)*a1 + 3) - v318) > 4)
            {
              *(unsigned char *)(v318 + 4) = 46;
              *(_DWORD *)uint64_t v318 = 774774828;
              *((void *)v317 + 4) += 5;
            }
            else
            {
              llvm::raw_ostream::write(v317, ", ...", 5uLL);
            }
          }
        }
      }
    }
    int v319 = *a1;
    unsigned int v320 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v320 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v319, 41);
    }
    else
    {
      *((void *)v319 + 4) = v320 + 1;
      unsigned char *v320 = 41;
    }
    if (v275 && *(_DWORD *)(v275 + 8) && *(void *)(v275 + 40))
    {
      int v323 = *a1;
      int v324 = (_WORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v324 > 1uLL)
      {
        _WORD *v324 = 8992;
        *((void *)v323 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(*a1, " #", 2uLL);
      }
      if (*(_DWORD *)(v275 + 8)) {
        uint64_t v325 = *(void *)(v275 + 40);
      }
      else {
        uint64_t v325 = 0;
      }
      int AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v325);
      unint64_t v327 = AttributeGroupSlot;
      if (AttributeGroupSlot < 0)
      {
        unint64_t v327 = -(uint64_t)AttributeGroupSlot;
        uint64_t v328 = v323;
        int v329 = 1;
      }
      else
      {
        uint64_t v328 = v323;
        int v329 = 0;
      }
      sub_1CD098D14(v328, v327, 0, 0, v329);
    }
    sub_1CC503720((llvm::raw_ostream *)a1, v271);
    goto LABEL_185;
  }
  if (v74 == 33) {
    uint64_t v280 = a2;
  }
  else {
    uint64_t v280 = 0;
  }
  if (v74 == 33)
  {
    unsigned int v281 = *(uint64_t **)(a2 - 32);
    uint64_t v282 = *(void *)(a2 + 64);
    unint64_t v283 = *(void *)(a2 + 72);
    unint64_t v284 = **(void **)(v283 + 16);
    if ((*(_WORD *)(a2 + 18) & 0xFFC) != 0)
    {
      uint64_t v285 = *a1;
      int v286 = (unsigned char *)*((void *)*a1 + 4);
      if (*((unsigned char **)*a1 + 3) == v286)
      {
        llvm::raw_ostream::write(v285, " ", 1uLL);
      }
      else
      {
        unsigned char *v286 = 32;
        ++*((void *)v285 + 4);
      }
      sub_1CC4FA65C((llvm::raw_ostream *)((*(unsigned __int16 *)(a2 + 18) >> 2) & 0x3FF), *a1);
    }
    if (v282 && *(_DWORD *)(v282 + 8) >= 2u && *(void *)(v282 + 48))
    {
      unsigned int v355 = *a1;
      uint64_t v356 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v356 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(*a1, 32);
      }
      else
      {
        *((void *)v355 + 4) = v356 + 1;
        *uint64_t v356 = 32;
      }
      if (*(_DWORD *)(v282 + 8) >= 2u && (int v425 = *(llvm::AttributeSetNode **)(v282 + 48)) != 0)
      {
        llvm::AttributeSetNode::getAsString(v425, 0, &__p);
        char v426 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        char v426 = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
      }
      BOOL v427 = v426 < 0;
      uint64_t v428 = v426 >= 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v429 = v426 & 0x7F;
      size_t v430 = v427 ? __p.__r_.__value_.__l.__size_ : v429;
      llvm::raw_ostream::write(v355, (const char *)v428, v430);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    sub_1CC5034B4(*v281, a2, *a1);
    uint64_t v287 = *a1;
    int v288 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v288 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v287, 32);
    }
    else
    {
      *((void *)v287 + 4) = v288 + 1;
      unsigned char *v288 = 32;
    }
    if (*(_DWORD *)(v283 + 8) <= 0xFFu) {
      unint64_t v330 = v284;
    }
    else {
      unint64_t v330 = v283;
    }
    sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), v330, *a1);
    unsigned int v331 = *a1;
    uint64_t v332 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v332 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v331, 32);
    }
    else
    {
      *((void *)v331 + 4) = v332 + 1;
      unsigned char *v332 = 32;
    }
    sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)v281, 0);
    int v335 = *a1;
    BOOL v336 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v336 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v335, 40);
    }
    else
    {
      *((void *)v335 + 4) = v336 + 1;
      unsigned char *v336 = 40;
    }
    int v337 = *(unsigned __int8 *)(a2 + 16);
    if (v337 == 84)
    {
      uint64_t v338 = 0;
    }
    else if (v337 == 39)
    {
      uint64_t v338 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      uint64_t v338 = 2;
    }
    int v339 = *(_DWORD *)(a2 + 20);
    if (v339 < 0 && (uint64_t v453 = a2 - 32 * (v339 & 0x7FFFFFF), v454 = *(void *)(v453 - 8), (v454 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v341 = -(uint64_t)(v339 & 0x7FFFFFF);
      uint64_t v340 = (*(_DWORD *)(v453 - 12) - *(_DWORD *)(v453 - v454));
    }
    else
    {
      uint64_t v340 = 0;
      uint64_t v341 = -(uint64_t)(v339 & 0x7FFFFFF);
    }
    unint64_t v342 = -32 * v338 - 32 * v340 - 32 * v341 - 32;
    if ((v342 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v343 = 0;
      uint64_t v344 = (v342 >> 5);
      uint64_t v345 = v280;
      do
      {
        if (v343)
        {
          unint64_t v346 = *a1;
          unsigned int v347 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v347 > 1uLL)
          {
            _WORD *v347 = 8236;
            *((void *)v346 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v346, ", ", 2uLL);
          }
        }
        if (v282 && (v343 + 2) < *(_DWORD *)(v282 + 8)) {
          uint64_t v348 = *(void *)(v282 + 40 + 8 * (v343 + 2));
        }
        else {
          uint64_t v348 = 0;
        }
        sub_1CC5035C4((uint64_t)a1, *(unint64_t **)(v345 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v348);
        ++v343;
        v345 += 32;
      }
      while (v344 != v343);
    }
    uint64_t v349 = *a1;
    unint64_t v350 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v350 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v349, 41);
    }
    else
    {
      *((void *)v349 + 4) = v350 + 1;
      *unint64_t v350 = 41;
    }
    if (v282 && *(_DWORD *)(v282 + 8) && *(void *)(v282 + 40))
    {
      __int32 v357 = *a1;
      uint64_t v358 = (_WORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v358 > 1uLL)
      {
        *uint64_t v358 = 8992;
        *((void *)v357 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(*a1, " #", 2uLL);
      }
      if (*(_DWORD *)(v282 + 8)) {
        uint64_t v359 = *(void *)(v282 + 40);
      }
      else {
        uint64_t v359 = 0;
      }
      int v360 = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v359);
      unint64_t v361 = v360;
      if (v360 < 0)
      {
        unint64_t v361 = -(uint64_t)v360;
        unsigned int v362 = v357;
        int v363 = 1;
      }
      else
      {
        unsigned int v362 = v357;
        int v363 = 0;
      }
      sub_1CD098D14(v362, v361, 0, 0, v363);
    }
    sub_1CC503720((llvm::raw_ostream *)a1, v280);
    int v351 = *a1;
    unint64_t v352 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v352 > 0xDuLL)
    {
      qmemcpy(v352, "\n          to ", 14);
      *((void *)v351 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v351, "\n          to ", 0xEuLL);
    }
    sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v280 - 96), 1);
    int v353 = *a1;
    uint64_t v354 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v354 > 7uLL)
    {
      void *v354 = 0x20646E69776E7520;
      *((void *)v353 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v353, " unwind ", 8uLL);
    }
    char v136 = *(llvm::detail::DoubleAPFloat **)(v280 - 64);
    goto LABEL_184;
  }
  if (v74 == 39) {
    uint64_t v292 = a2;
  }
  else {
    uint64_t v292 = 0;
  }
  if (v74 == 39)
  {
    int v293 = *(llvm::detail::DoubleAPFloat **)(a2 - 32);
    uint64_t v294 = *(void *)(a2 + 64);
    unint64_t v295 = *(void *)(a2 + 72);
    unint64_t v296 = **(void **)(v295 + 16);
    uint64_t v457 = a2 - 32;
    if ((*(_WORD *)(a2 + 18) & 0xFFC) != 0)
    {
      uint64_t v297 = *a1;
      uint64_t v298 = (unsigned char *)*((void *)*a1 + 4);
      if (*((unsigned char **)*a1 + 3) == v298)
      {
        llvm::raw_ostream::write(v297, " ", 1uLL);
      }
      else
      {
        *uint64_t v298 = 32;
        ++*((void *)v297 + 4);
      }
      sub_1CC4FA65C((llvm::raw_ostream *)((*(unsigned __int16 *)(a2 + 18) >> 2) & 0x3FF), *a1);
    }
    if (v294 && *(_DWORD *)(v294 + 8) >= 2u && *(void *)(v294 + 48))
    {
      int8x16_t v394 = *a1;
      unint64_t v395 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v395 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(*a1, 32);
      }
      else
      {
        *((void *)v394 + 4) = v395 + 1;
        unsigned char *v395 = 32;
      }
      if (*(_DWORD *)(v294 + 8) >= 2u && (unsigned int v433 = *(llvm::AttributeSetNode **)(v294 + 48)) != 0)
      {
        llvm::AttributeSetNode::getAsString(v433, 0, &__p);
        char v434 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        char v434 = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
      }
      BOOL v435 = v434 < 0;
      char v436 = v434 >= 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v437 = v434 & 0x7F;
      size_t v438 = v435 ? __p.__r_.__value_.__l.__size_ : v437;
      llvm::raw_ostream::write(v394, (const char *)v436, v438);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v299 = *a1;
    uint64_t v300 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v300 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v299, 32);
    }
    else
    {
      *((void *)v299 + 4) = v300 + 1;
      *uint64_t v300 = 32;
    }
    if (*(_DWORD *)(v295 + 8) <= 0xFFu) {
      unint64_t v364 = v296;
    }
    else {
      unint64_t v364 = v295;
    }
    sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), v364, *a1);
    unsigned int v365 = *a1;
    int v366 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v366 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v365, 32);
    }
    else
    {
      *((void *)v365 + 4) = v366 + 1;
      *int v366 = 32;
    }
    sub_1CC4FBF20((uint64_t)a1, v293, 0);
    uint64_t v369 = *a1;
    uint64_t v370 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v370 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v369, 40);
    }
    else
    {
      *((void *)v369 + 4) = v370 + 1;
      *uint64_t v370 = 40;
    }
    int v371 = *(unsigned __int8 *)(a2 + 16);
    if (v371 == 84)
    {
      uint64_t v372 = 0;
    }
    else if (v371 == 39)
    {
      uint64_t v372 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      uint64_t v372 = 2;
    }
    int v373 = *(_DWORD *)(a2 + 20);
    if (v373 < 0 && (v455 = a2 - 32 * (v373 & 0x7FFFFFF), uint64_t v456 = *(void *)(v455 - 8), (v456 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v375 = -(uint64_t)(v373 & 0x7FFFFFF);
      uint64_t v374 = (*(_DWORD *)(v455 - 12) - *(_DWORD *)(v455 - v456));
    }
    else
    {
      uint64_t v374 = 0;
      uint64_t v375 = -(uint64_t)(v373 & 0x7FFFFFF);
    }
    unint64_t v376 = -32 * v372 - 32 * v374 - 32 * v375 - 32;
    if ((v376 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v377 = 0;
      uint64_t v378 = (v376 >> 5);
      uint64_t v379 = v292;
      do
      {
        if (v377)
        {
          uint64_t v380 = *a1;
          unint64_t v381 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v381 > 1uLL)
          {
            *unint64_t v381 = 8236;
            *((void *)v380 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v380, ", ", 2uLL);
          }
        }
        if (v294 && (v377 + 2) < *(_DWORD *)(v294 + 8)) {
          uint64_t v382 = *(void *)(v294 + 40 + 8 * (v377 + 2));
        }
        else {
          uint64_t v382 = 0;
        }
        sub_1CC5035C4((uint64_t)a1, *(unint64_t **)(v379 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v382);
        ++v377;
        v379 += 32;
      }
      while (v378 != v377);
    }
    uint64_t v383 = *a1;
    uint64_t v384 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v384 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v383, 41);
    }
    else
    {
      *((void *)v383 + 4) = v384 + 1;
      *uint64_t v384 = 41;
    }
    if (v294 && *(_DWORD *)(v294 + 8) && *(void *)(v294 + 40))
    {
      uint64_t v396 = *a1;
      uint64_t v397 = (_WORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v397 > 1uLL)
      {
        *uint64_t v397 = 8992;
        *((void *)v396 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(*a1, " #", 2uLL);
      }
      if (*(_DWORD *)(v294 + 8)) {
        uint64_t v398 = *(void *)(v294 + 40);
      }
      else {
        uint64_t v398 = 0;
      }
      int v399 = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v398);
      unint64_t v400 = v399;
      if (v399 < 0)
      {
        unint64_t v400 = -(uint64_t)v399;
        uint64_t v401 = v396;
        int v402 = 1;
      }
      else
      {
        uint64_t v401 = v396;
        int v402 = 0;
      }
      sub_1CD098D14(v401, v400, 0, 0, v402);
    }
    sub_1CC503720((llvm::raw_ostream *)a1, v292);
    uint64_t v385 = *a1;
    unsigned int v386 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v386 > 0xDuLL)
    {
      qmemcpy(v386, "\n          to ", 14);
      *((void *)v385 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v385, "\n          to ", 0xEuLL);
    }
    sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v457 - 32 * *(unsigned int *)(v292 + 80) - 32), 1);
    unint64_t v387 = *a1;
    int v388 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v388 > 1uLL)
    {
      *int v388 = 23328;
      *((void *)v387 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v387, " [", 2uLL);
    }
    uint64_t v389 = *(unsigned int *)(v292 + 80);
    if (v389)
    {
      uint64_t v390 = 0;
      uint64_t v391 = 32 * v389;
      do
      {
        if (v390)
        {
          unsigned int v392 = *a1;
          uint64_t v393 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v393 > 1uLL)
          {
            *uint64_t v393 = 8236;
            *((void *)v392 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v392, ", ", 2uLL);
          }
        }
        sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v457 - 32 * *(unsigned int *)(v292 + 80) + v390), 1);
        v390 += 32;
      }
      while (v391 != v390);
    }
LABEL_159:
    uint64_t v121 = *a1;
    uint64_t v122 = (char *)*((void *)*a1 + 4);
    if ((unint64_t)v122 < *((void *)*a1 + 3))
    {
      *((void *)v121 + 4) = v122 + 1;
      char v123 = 93;
LABEL_161:
      *uint64_t v122 = v123;
      goto LABEL_185;
    }
    char v124 = 93;
    goto LABEL_163;
  }
  if (v74 == 59)
  {
    int v333 = *a1;
    char v334 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v334 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v333, 32);
    }
    else
    {
      *((void *)v333 + 4) = v334 + 1;
      *char v334 = 32;
    }
    if ((*(_WORD *)(a2 + 18) & 0x40) != 0)
    {
      uint64_t v409 = *a1;
      uint64_t v410 = *((void *)*a1 + 4);
      if ((unint64_t)(*((void *)*a1 + 3) - v410) > 8)
      {
        *(unsigned char *)(v410 + 8) = 32;
        *(void *)uint64_t v410 = *(void *)"inalloca ";
        *((void *)v409 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v409, "inalloca ", 9uLL);
      }
    }
    if ((*(_WORD *)(a2 + 18) & 0x80) != 0)
    {
      unint64_t v411 = *a1;
      uint64_t v412 = *((void *)*a1 + 4);
      if ((unint64_t)(*((void *)*a1 + 3) - v412) > 0xA)
      {
        *(_DWORD *)(v412 + 7) = 544370546;
        *(void *)uint64_t v412 = *(void *)"swifterror ";
        *((void *)v411 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v411, "swifterror ", 0xBuLL);
      }
    }
    sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *(void *)(a2 + 64), *a1);
    uint64_t v413 = *(void *)(a2 - 32);
    if (!v413
      || (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)a2) & 1) != 0
      || *(_DWORD *)(*(void *)v413 + 8) != 8205)
    {
      unint64_t v414 = *a1;
      uint64_t v415 = (_WORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v415 > 1uLL)
      {
        _WORD *v415 = 8236;
        *((void *)v414 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v414, ", ", 2uLL);
      }
      sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 32), 1);
    }
    char v416 = *(_WORD *)(a2 + 18) & 0x3F;
    int v417 = *a1;
    uint64_t v418 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v418 > 7uLL)
    {
      *uint64_t v418 = 0x206E67696C61202CLL;
      *((void *)v417 + 4) += 8;
    }
    else
    {
      int v417 = llvm::raw_ostream::write(v417, ", align ", 8uLL);
    }
    sub_1CD098D14(v417, 1 << v416, 0, 0, 0);
    unint64_t v419 = *(unsigned int *)(*(void *)a2 + 8);
    if (v419 < 0x100) {
      goto LABEL_185;
    }
    unint64_t v420 = v419 >> 8;
    int v421 = *a1;
    uint64_t v422 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v422) > 0xB)
    {
      *(_DWORD *)(v422 + 8) = 677733217;
      *(void *)uint64_t v422 = *(void *)", addrspace(";
      *((void *)v421 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(*a1, ", addrspace(", 0xCuLL);
    }
    sub_1CD098D14(v421, v420, 0, 0, 0);
    uint64_t v122 = (char *)*((void *)v421 + 4);
    if ((unint64_t)v122 < *((void *)v421 + 3))
    {
      *((void *)v421 + 4) = v122 + 1;
      char v123 = 41;
      goto LABEL_161;
    }
    uint64_t v121 = v421;
    char v124 = 41;
LABEL_163:
    llvm::raw_ostream::write(v121, v124);
    goto LABEL_185;
  }
  if ((v74 - 66) <= 0xC)
  {
    if (v75)
    {
      BOOL v367 = *a1;
      unsigned int v368 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v368 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v367, 32);
      }
      else
      {
        *((void *)v367 + 4) = v368 + 1;
        *unsigned int v368 = 32;
      }
      sub_1CC4FBF20((uint64_t)a1, v75, 1);
    }
    uint64_t v439 = *a1;
    uint64_t v440 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v440 <= 3uLL)
    {
      uint64_t v441 = " to ";
      size_t v442 = 4;
LABEL_705:
      llvm::raw_ostream::write(v439, v441, v442);
LABEL_706:
      sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *(void *)a2, *a1);
      goto LABEL_185;
    }
    _DWORD *v440 = 544175136;
    uint64_t v450 = *((void *)v439 + 4) + 4;
    goto LABEL_733;
  }
  if (v74 == 88)
  {
    if (v75)
    {
      unint64_t v423 = *a1;
      uint64_t v424 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v424 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v423, 32);
      }
      else
      {
        *((void *)v423 + 4) = v424 + 1;
        *uint64_t v424 = 32;
      }
      sub_1CC4FBF20((uint64_t)a1, v75, 1);
    }
    uint64_t v439 = *a1;
    uint64_t v443 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v443 <= 1uLL)
    {
      uint64_t v441 = ", ";
      size_t v442 = 2;
      goto LABEL_705;
    }
    *uint64_t v443 = 8236;
    uint64_t v450 = *((void *)v439 + 4) + 2;
LABEL_733:
    *((void *)v439 + 4) = v450;
    goto LABEL_706;
  }
  if (v75)
  {
    if (v74 == 60)
    {
      uint64_t v444 = *a1;
      uint64_t v445 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v445 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v444, 32);
      }
      else
      {
        *((void *)v444 + 4) = v445 + 1;
        *uint64_t v445 = 32;
      }
      uint64_t v446 = (llvm::raw_ostream *)(a1 + 5);
      unint64_t v447 = *(void *)a2;
    }
    else
    {
      if (v74 != 62) {
        goto LABEL_112;
      }
      __int16 v431 = *a1;
      int v432 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v432 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v431, 32);
      }
      else
      {
        *((void *)v431 + 4) = v432 + 1;
        unsigned char *v432 = 32;
      }
      uint64_t v446 = (llvm::raw_ostream *)(a1 + 5);
      unint64_t v447 = *(void *)(a2 + 64);
    }
    sub_1CC4F2DB8(v446, v447, *a1);
    unsigned int v448 = *a1;
    uint64_t v449 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v449 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v448, 44);
    }
    else
    {
      *((void *)v448 + 4) = v449 + 1;
      unsigned char *v449 = 44;
    }
LABEL_112:
    unint64_t v85 = *(void *)v75;
    unsigned int v86 = *(unsigned __int8 *)(a2 + 16) - 29;
    if (v86 >= 0x3F || ((0x4100000100000001uLL >> v86) & 1) == 0)
    {
      int v87 = *(_DWORD *)(a2 + 20);
      int v88 = (v87 & 0x7FFFFFF) - 1;
      if ((v87 & 0x7FFFFFF) == 1)
      {
LABEL_121:
        uint64_t v92 = *a1;
        uint64_t v93 = (unsigned char *)*((void *)*a1 + 4);
        if ((unint64_t)v93 >= *((void *)*a1 + 3))
        {
          llvm::raw_ostream::write(v92, 32);
        }
        else
        {
          *((void *)v92 + 4) = v93 + 1;
          *uint64_t v93 = 32;
        }
        sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), v85, *a1);
        int v173 = 0;
LABEL_246:
        uint64_t v174 = *a1;
        uint64_t v175 = (unsigned char *)*((void *)*a1 + 4);
        if ((unint64_t)v175 >= *((void *)*a1 + 3))
        {
          llvm::raw_ostream::write(v174, 32);
        }
        else
        {
          *((void *)v174 + 4) = v175 + 1;
          *uint64_t v175 = 32;
        }
        uint64_t v176 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
        if (v176)
        {
          uint64_t v177 = 0;
          uint64_t v178 = 32 * v176;
          do
          {
            if (v177)
            {
              uint64_t v179 = *a1;
              unint64_t v180 = (_WORD *)*((void *)*a1 + 4);
              if (*((void *)*a1 + 3) - (void)v180 > 1uLL)
              {
                *unint64_t v180 = 8236;
                *((void *)v179 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v179, ", ", 2uLL);
              }
            }
            int v181 = *(_DWORD *)(a2 + 20);
            if ((v181 & 0x40000000) != 0) {
              uint64_t v182 = *(void *)(a2 - 8);
            }
            else {
              uint64_t v182 = a2 - 32 * (v181 & 0x7FFFFFF);
            }
            sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v182 + v177), v173);
            v177 += 32;
          }
          while (v178 != v177);
        }
        goto LABEL_185;
      }
      uint64_t v89 = 32;
      while (1)
      {
        uint64_t v90 = a2 - 32 * (v87 & 0x7FFFFFF);
        if ((v87 & 0x40000000) != 0) {
          uint64_t v90 = *(void *)(a2 - 8);
        }
        int v91 = *(void **)(v90 + v89);
        if (v91)
        {
          if (*v91 != v85) {
            break;
          }
        }
        v89 += 32;
        if (!--v88) {
          goto LABEL_121;
        }
      }
    }
    int v173 = 1;
    goto LABEL_246;
  }
LABEL_185:
  switch(*(unsigned char *)(a2 + 16))
  {
    case '<':
    case '=':
      unsigned int v137 = *(unsigned __int16 *)(a2 + 18);
      if ((v137 & 0x380) != 0)
      {
        sub_1CC503A80((llvm::raw_ostream *)a1, ***(void ***)a2, (v137 >> 7) & 7, *(unsigned __int8 *)(a2 + 60));
        unsigned int v137 = *(unsigned __int16 *)(a2 + 18);
      }
      int v138 = (v137 >> 1) & 0x3F;
      uint64_t v139 = *a1;
      uint64_t v140 = (void *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v140 > 7uLL)
      {
        *uint64_t v140 = 0x206E67696C61202CLL;
        *((void *)v139 + 4) += 8;
      }
      else
      {
        uint64_t v139 = llvm::raw_ostream::write(v139, ", align ", 8uLL);
      }
      unint64_t v141 = 1 << v138;
      goto LABEL_208;
    case '>':
      break;
    case '?':
      sub_1CC503A80((llvm::raw_ostream *)a1, ***(void ***)a2, *(_WORD *)(a2 + 18) & 7, *(unsigned __int8 *)(a2 + 60));
      break;
    case '@':
      unsigned int v142 = *(unsigned __int16 *)(a2 + 18);
      sub_1CC5040B4((llvm::raw_ostream *)a1, ***(void ***)a2, *(unsigned __int8 *)(a2 + 60));
      uint64_t v143 = *a1;
      uint64_t v144 = (unsigned char *)*((void *)*a1 + 4);
      if (*((unsigned char **)*a1 + 3) == v144)
      {
        llvm::raw_ostream::write(*a1, " ", 1uLL);
      }
      else
      {
        unsigned char *v144 = 32;
        ++*((void *)v143 + 4);
      }
      size_t v145 = off_1EA6152A8[(v142 >> 2) & 7];
      if (v145)
      {
        size_t v146 = strlen(v145);
        unint64_t v147 = (void *)*((void *)v143 + 4);
        if (v146 <= *((void *)v143 + 3) - (void)v147)
        {
          if (v146)
          {
            memcpy(v147, v145, v146);
            *((void *)v143 + 4) += v146;
          }
        }
        else
        {
          llvm::raw_ostream::write(v143, v145, v146);
        }
      }
      __int16 v148 = *a1;
      uint64_t v149 = (unsigned char *)*((void *)*a1 + 4);
      if (*((unsigned char **)*a1 + 3) == v149)
      {
        llvm::raw_ostream::write(*a1, " ", 1uLL);
      }
      else
      {
        unsigned char *v149 = 32;
        ++*((void *)v148 + 4);
      }
      uint64_t v150 = off_1EA6152A8[v142 >> 5];
      if (v150)
      {
        size_t v151 = strlen(v150);
        int32x2_t v152 = (void *)*((void *)v148 + 4);
        if (v151 <= *((void *)v148 + 3) - (void)v152)
        {
          if (v151)
          {
            memcpy(v152, v150, v151);
            *((void *)v148 + 4) += v151;
          }
        }
        else
        {
          llvm::raw_ostream::write(v148, v150, v151);
        }
      }
      goto LABEL_205;
    case 'A':
      sub_1CC503A80((llvm::raw_ostream *)a1, ***(void ***)a2, (*(unsigned __int16 *)(a2 + 18) >> 1) & 7, *(unsigned __int8 *)(a2 + 60));
LABEL_205:
      uint64_t v139 = *a1;
      uint64_t v153 = (void *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v153 > 7uLL)
      {
        *uint64_t v153 = 0x206E67696C61202CLL;
        *((void *)v139 + 4) += 8;
      }
      else
      {
        uint64_t v139 = llvm::raw_ostream::write(v139, ", align ", 8uLL);
      }
      unint64_t v141 = 1 << *(unsigned char *)(a2 + 19);
LABEL_208:
      sub_1CD098D14(v139, v141, 0, 0, 0);
      break;
    default:
      if (*(unsigned char *)(a2 + 16) == 91) {
        sub_1CC503B68(*a1, *(void *)a2, *(int **)(a2 + 64), *(unsigned int *)(a2 + 72));
      }
      break;
  }
LABEL_209:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x400000000;
  uint64_t v154 = *(void *)(a2 + 48);
  if (v154)
  {
    __p.__r_.__value_.__r.__words[2] = 0;
    uint64_t v459 = v154;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 1;
  }
  else if ((*(unsigned char *)(a2 + 23) & 0x20) == 0)
  {
    goto LABEL_213;
  }
  llvm::Value::getAllMetadata((unsigned char *)a2, (uint64_t)&__p);
LABEL_213:
  sub_1CC4FA2F4((uint64_t *)a1, &__p, ", ", 2uLL);
  sub_1CC503F50(a1, (llvm::GCRelocateInst *)a2);
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2]) {
    free(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1CC4F6DD4(llvm::raw_ostream **a1, uint64_t ***a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (a2 && !*((unsigned char *)a2 + 16) && (*((unsigned char *)a2 + 34) & 0x80) != 0)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v5) > 0x10)
    {
      *(unsigned char *)(v5 + 16) = 10;
      *(_OWORD *)uint64_t v5 = *(_OWORD *)"; Materializable\n";
      *((void *)v4 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v4, "; Materializable\n", 0x11uLL);
    }
  }
  char v6 = a1[4];
  unint64_t v7 = a2[5];
  v81[0] = &unk_1F26161D8;
  v81[1] = a1 + 5;
  v81[2] = v6;
  v81[3] = v7;
  sub_1CC4FB368(*a1, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)v81);
  uint64_t v8 = *a1;
  uint64_t v9 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) != 3 || (*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0) {
      goto LABEL_17;
    }
    int v10 = *((_DWORD *)a2 + 8);
  }
  else
  {
    if (a2[9] != (uint64_t **)(a2 + 9)) {
      goto LABEL_17;
    }
    int v10 = *((_DWORD *)a2 + 8);
    if ((v10 & 0x800000) != 0) {
      goto LABEL_17;
    }
  }
  if ((v10 & 0xF) == 0)
  {
    char v11 = *a1;
    uint64_t v12 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v12) > 8)
    {
      *(unsigned char *)(v12 + 8) = 32;
      *(void *)uint64_t v12 = *(void *)"external ";
      *((void *)v11 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v11, "external ", 9uLL);
    }
  }
LABEL_17:
  int v13 = *a1;
  sub_1CC4FA53C((uint64_t)&__p, a2[4] & 0xF);
  if (v85 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  if (v85 >= 0) {
    size_t v15 = v85 & 0x7F;
  }
  else {
    size_t v15 = v83;
  }
  llvm::raw_ostream::write(v13, p_p, v15);
  if (v85 < 0) {
    operator delete(__p);
  }
  sub_1CC4FA5B4((llvm::raw_ostream *)a2, *a1);
  int v16 = (*((_DWORD *)a2 + 8) >> 4) & 3;
  uint64_t v17 = *a1;
  if (v16 == 2)
  {
    uint64_t v21 = *((void *)v17 + 4);
    if ((unint64_t)(*((void *)v17 + 3) - v21) <= 9)
    {
      size_t v19 = "protected ";
      size_t v20 = 10;
      goto LABEL_31;
    }
    *(_WORD *)(v21 + 8) = 8292;
    *(void *)uint64_t v21 = *(void *)"protected ";
    uint64_t v79 = *((void *)v17 + 4) + 10;
  }
  else
  {
    if (v16 != 1) {
      goto LABEL_32;
    }
    uint64_t v18 = (_DWORD *)*((void *)v17 + 4);
    if (*((void *)v17 + 3) - (void)v18 <= 6uLL)
    {
      size_t v19 = "hidden ";
      size_t v20 = 7;
LABEL_31:
      llvm::raw_ostream::write(v17, v19, v20);
      goto LABEL_32;
    }
    *(_DWORD *)((char *)v18 + 3) = 544105828;
    *uint64_t v18 = 1684302184;
    uint64_t v79 = *((void *)v17 + 4) + 7;
  }
  *((void *)v17 + 4) = v79;
LABEL_32:
  int v22 = (*((_DWORD *)a2 + 8) >> 8) & 3;
  unint64_t v23 = *a1;
  if (v22 == 2)
  {
    uint64_t v24 = *((void *)v23 + 4);
    if ((unint64_t)(*((void *)v23 + 3) - v24) <= 9)
    {
      uint64_t v25 = "dllexport ";
      goto LABEL_38;
    }
    uint64_t v80 = "dllexport ";
  }
  else
  {
    if (v22 != 1) {
      goto LABEL_39;
    }
    uint64_t v24 = *((void *)v23 + 4);
    if ((unint64_t)(*((void *)v23 + 3) - v24) <= 9)
    {
      uint64_t v25 = "dllimport ";
LABEL_38:
      llvm::raw_ostream::write(v23, v25, 0xAuLL);
      goto LABEL_39;
    }
    uint64_t v80 = "dllimport ";
  }
  *(_WORD *)(v24 + 8) = 8308;
  *(void *)uint64_t v24 = *(void *)v80;
  *((void *)v23 + 4) += 10;
LABEL_39:
  sub_1CC5041B0((llvm::raw_ostream *)((*((_DWORD *)a2 + 8) >> 10) & 7), *a1);
  if (*((_DWORD *)a2 + 8) >> 6)
  {
    if (*((_DWORD *)a2 + 8) >> 6 == 1)
    {
      uint64_t v26 = "local_unnamed_addr";
      size_t v27 = 18;
    }
    else
    {
      uint64_t v26 = "unnamed_addr";
      size_t v27 = 12;
    }
    size_t v28 = *a1;
    size_t v29 = (void *)*((void *)*a1 + 4);
    if (v27 <= *((void *)*a1 + 3) - (void)v29)
    {
      memcpy(v29, v26, v27);
      int v30 = (unsigned char *)(*((void *)v28 + 4) + v27);
      *((void *)v28 + 4) = v30;
    }
    else
    {
      llvm::raw_ostream::write(*a1, v26, v27);
      int v30 = (unsigned char *)*((void *)v28 + 4);
    }
    if ((unint64_t)v30 >= *((void *)v28 + 3))
    {
      llvm::raw_ostream::write(v28, 32);
    }
    else
    {
      *((void *)v28 + 4) = v30 + 1;
      *int v30 = 32;
    }
  }
  unint64_t v31 = *((unsigned int *)*a2 + 2);
  if (v31 >= 0x100)
  {
    unint64_t v32 = v31 >> 8;
    uint64_t v33 = *a1;
    uint64_t v34 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v34) > 9)
    {
      *(_WORD *)(v34 + 8) = 10341;
      *(void *)uint64_t v34 = *(void *)"addrspace(";
      *((void *)v33 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "addrspace(", 0xAuLL);
    }
    sub_1CD098D14(v33, v32, 0, 0, 0);
    size_t v35 = (_WORD *)*((void *)v33 + 4);
    if (*((void *)v33 + 3) - (void)v35 > 1uLL)
    {
      *size_t v35 = 8233;
      *((void *)v33 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v33, ") ", 2uLL);
    }
  }
  if (((_BYTE)a2[10] & 2) != 0)
  {
    unint64_t v36 = *a1;
    unint64_t v37 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v37 > 0x16uLL)
    {
      qmemcpy(v37, "externally_initialized ", 23);
      *((void *)v36 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v36, "externally_initialized ", 0x17uLL);
    }
  }
  int v38 = *a1;
  if ((_BYTE)a2[10]) {
    uint64_t v39 = "constant ";
  }
  else {
    uint64_t v39 = "global ";
  }
  if ((_BYTE)a2[10]) {
    size_t v40 = 9;
  }
  else {
    size_t v40 = 7;
  }
  size_t v41 = (void *)*((void *)v38 + 4);
  if (v40 <= *((void *)v38 + 3) - (void)v41)
  {
    memcpy(v41, v39, v40);
    *((void *)v38 + 4) += v40;
  }
  else
  {
    llvm::raw_ostream::write(*a1, v39, v40);
  }
  sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), (unint64_t)a2[3], *a1);
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_75;
    }
  }
  else if (a2[9] == (uint64_t **)(a2 + 9) && (*((unsigned char *)a2 + 34) & 0x80) == 0)
  {
    goto LABEL_75;
  }
  uint64_t v42 = *a1;
  size_t v43 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v43 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v42, 32);
  }
  else
  {
    *((void *)v42 + 4) = v43 + 1;
    *size_t v43 = 32;
  }
  sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)*(a2 - 4), 0);
LABEL_75:
  if ((*((unsigned char *)a2 + 34) & 0x40) == 0) {
    goto LABEL_86;
  }
  size_t v44 = *a1;
  uint64_t v45 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v45) > 0xA)
  {
    *(_DWORD *)(v45 + 7) = 572550767;
    *(void *)uint64_t v45 = *(void *)", section \"";
    *((void *)v44 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v44, ", section \"", 0xBuLL);
  }
  if ((*((unsigned char *)a2 + 34) & 0x40) == 0)
  {
    unsigned int v46 = 0;
    uint64_t v47 = 0;
    goto LABEL_83;
  }
  uint64_t v48 = ***a2;
  std::string __p = a2;
  int v49 = *(_DWORD *)(v48 + 2520);
  if (!v49)
  {
    unsigned __int16 v77 = 0;
LABEL_119:
    unint64_t v53 = sub_1CC5BF31C(v48 + 2504, (uint64_t)&__p, (uint64_t *)&__p, v77);
    uint64_t v78 = __p;
    v53[1] = 0;
    v53[2] = 0;
    *unint64_t v53 = v78;
    goto LABEL_82;
  }
  uint64_t v50 = *(void *)(v48 + 2504);
  int v51 = v49 - 1;
  unsigned int v52 = v51 & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v53 = (void *)(v50 + 24 * v52);
  unint64_t v54 = (void ***)*v53;
  if ((uint64_t ***)*v53 != a2)
  {
    int v73 = 0;
    int v74 = 1;
    while (v54 != (void ***)-4096)
    {
      if (v73) {
        BOOL v75 = 0;
      }
      else {
        BOOL v75 = v54 == (void ***)-8192;
      }
      if (v75) {
        int v73 = v53;
      }
      unsigned int v76 = v52 + v74++;
      unsigned int v52 = v76 & v51;
      unint64_t v53 = (void *)(v50 + 24 * v52);
      unint64_t v54 = (void ***)*v53;
      if ((uint64_t ***)*v53 == a2) {
        goto LABEL_82;
      }
    }
    if (v73) {
      unsigned __int16 v77 = v73;
    }
    else {
      unsigned __int16 v77 = v53;
    }
    goto LABEL_119;
  }
LABEL_82:
  unsigned int v46 = (llvm::raw_ostream *)v53[1];
  uint64_t v47 = v53[2];
LABEL_83:
  llvm::printEscapedString(v46, v47, *a1);
  uint64_t v55 = *a1;
  unint64_t v56 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v56 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v55, 34);
  }
  else
  {
    *((void *)v55 + 4) = v56 + 1;
    *unint64_t v56 = 34;
  }
LABEL_86:
  if ((*((unsigned char *)a2 + 33) & 0x80) != 0)
  {
    uint64_t v57 = *a1;
    int v58 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v58 > 0xCuLL)
    {
      qmemcpy(v58, ", partition \"", 13);
      *((void *)v57 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v57, ", partition \"", 0xDuLL);
    }
    Partitioint n = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v60, *a1);
    size_t v61 = *a1;
    unint64_t v62 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v62 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v61, 34);
    }
    else
    {
      *((void *)v61 + 4) = v62 + 1;
      unsigned char *v62 = 34;
    }
  }
  sub_1CC4FBD0C(*a1, a2);
  if ((*((_WORD *)a2 + 17) & 0x3F) != 0)
  {
    char v63 = (*((_WORD *)a2 + 17) & 0x3F) - 1;
    uint64_t v64 = *a1;
    unint64_t v65 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v65 > 7uLL)
    {
      *unint64_t v65 = 0x206E67696C61202CLL;
      *((void *)v64 + 4) += 8;
    }
    else
    {
      uint64_t v64 = llvm::raw_ostream::write(v64, ", align ", 8uLL);
    }
    sub_1CD098D14(v64, 1 << v63, 0, 0, 0);
  }
  std::string __p = v84;
  uint64_t v83 = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&__p);
  sub_1CC4FA2F4((uint64_t *)a1, &__p, ", ", 2uLL);
  uint64_t v66 = (uint64_t)a2[9];
  if (v66)
  {
    size_t v67 = *a1;
    uint64_t v68 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v68 > 1uLL)
    {
      *uint64_t v68 = 8992;
      *((void *)v67 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(*a1, " #", 2uLL);
    }
    int AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v66);
    unint64_t v70 = AttributeGroupSlot;
    if (AttributeGroupSlot < 0)
    {
      unint64_t v70 = -(uint64_t)AttributeGroupSlot;
      int v71 = v67;
      int v72 = 1;
    }
    else
    {
      int v71 = v67;
      int v72 = 0;
    }
    sub_1CD098D14(v71, v70, 0, 0, v72);
  }
  sub_1CC503F50(a1, (llvm::GCRelocateInst *)a2);
  if (__p != v84) {
    free(__p);
  }
}

llvm::raw_ostream *sub_1CC4F771C(llvm::raw_ostream **a1, uint64_t a2)
{
  if (a2 && !*(unsigned char *)(a2 + 16) && (*(unsigned char *)(a2 + 34) & 0x80) != 0)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v5) > 0x10)
    {
      *(unsigned char *)(v5 + 16) = 10;
      *(_OWORD *)uint64_t v5 = *(_OWORD *)"; Materializable\n";
      *((void *)v4 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v4, "; Materializable\n", 0x11uLL);
    }
  }
  char v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 40);
  v47[0] = &unk_1F26161D8;
  v47[1] = a1 + 5;
  v47[2] = v6;
  v47[3] = v7;
  sub_1CC4FB368(*a1, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)v47);
  uint64_t v8 = *a1;
  uint64_t v9 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  int v10 = *a1;
  sub_1CC4FA53C((uint64_t)__p, *(_DWORD *)(a2 + 32) & 0xF);
  if (v46 >= 0) {
    char v11 = __p;
  }
  else {
    char v11 = (void **)__p[0];
  }
  if (v46 >= 0) {
    size_t v12 = v46 & 0x7F;
  }
  else {
    size_t v12 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(v10, (const char *)v11, v12);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  sub_1CC4FA5B4((llvm::raw_ostream *)a2, *a1);
  int v13 = (*(_DWORD *)(a2 + 32) >> 4) & 3;
  int v14 = *a1;
  if (v13 == 2)
  {
    uint64_t v18 = *((void *)v14 + 4);
    if ((unint64_t)(*((void *)v14 + 3) - v18) <= 9)
    {
      int v16 = "protected ";
      size_t v17 = 10;
      goto LABEL_22;
    }
    *(_WORD *)(v18 + 8) = 8292;
    *(void *)uint64_t v18 = *(void *)"protected ";
    uint64_t v43 = *((void *)v14 + 4) + 10;
  }
  else
  {
    if (v13 != 1) {
      goto LABEL_23;
    }
    size_t v15 = (_DWORD *)*((void *)v14 + 4);
    if (*((void *)v14 + 3) - (void)v15 <= 6uLL)
    {
      int v16 = "hidden ";
      size_t v17 = 7;
LABEL_22:
      llvm::raw_ostream::write(v14, v16, v17);
      goto LABEL_23;
    }
    *(_DWORD *)((char *)v15 + 3) = 544105828;
    *size_t v15 = 1684302184;
    uint64_t v43 = *((void *)v14 + 4) + 7;
  }
  *((void *)v14 + 4) = v43;
LABEL_23:
  int v19 = (*(_DWORD *)(a2 + 32) >> 8) & 3;
  size_t v20 = *a1;
  if (v19 == 2)
  {
    uint64_t v21 = *((void *)v20 + 4);
    if ((unint64_t)(*((void *)v20 + 3) - v21) <= 9)
    {
      int v22 = "dllexport ";
      goto LABEL_29;
    }
    size_t v44 = "dllexport ";
  }
  else
  {
    if (v19 != 1) {
      goto LABEL_30;
    }
    uint64_t v21 = *((void *)v20 + 4);
    if ((unint64_t)(*((void *)v20 + 3) - v21) <= 9)
    {
      int v22 = "dllimport ";
LABEL_29:
      llvm::raw_ostream::write(v20, v22, 0xAuLL);
      goto LABEL_30;
    }
    size_t v44 = "dllimport ";
  }
  *(_WORD *)(v21 + 8) = 8308;
  *(void *)uint64_t v21 = *(void *)v44;
  *((void *)v20 + 4) += 10;
LABEL_30:
  sub_1CC5041B0((llvm::raw_ostream *)((*(_DWORD *)(a2 + 32) >> 10) & 7), *a1);
  if (*(_DWORD *)(a2 + 32) >> 6)
  {
    if (*(_DWORD *)(a2 + 32) >> 6 == 1)
    {
      unint64_t v23 = "local_unnamed_addr";
      size_t v24 = 18;
    }
    else
    {
      unint64_t v23 = "unnamed_addr";
      size_t v24 = 12;
    }
    uint64_t v25 = *a1;
    uint64_t v26 = (void *)*((void *)*a1 + 4);
    if (v24 <= *((void *)*a1 + 3) - (void)v26)
    {
      memcpy(v26, v23, v24);
      size_t v27 = (unsigned char *)(*((void *)v25 + 4) + v24);
      *((void *)v25 + 4) = v27;
    }
    else
    {
      llvm::raw_ostream::write(*a1, v23, v24);
      size_t v27 = (unsigned char *)*((void *)v25 + 4);
    }
    if ((unint64_t)v27 >= *((void *)v25 + 3))
    {
      llvm::raw_ostream::write(v25, 32);
    }
    else
    {
      *((void *)v25 + 4) = v27 + 1;
      *size_t v27 = 32;
    }
  }
  size_t v28 = *a1;
  uint64_t v29 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v29) > 5)
  {
    *(_WORD *)(v29 + 4) = 8307;
    *(_DWORD *)uint64_t v29 = 1634298977;
    *((void *)v28 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v28, "alias ", 6uLL);
  }
  sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *(void *)(a2 + 24), *a1);
  int v30 = *a1;
  unint64_t v31 = (_WORD *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v31 > 1uLL)
  {
    _WORD *v31 = 8236;
    *((void *)v30 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v30, ", ", 2uLL);
  }
  unint64_t v32 = *(unsigned __int8 **)(a2 - 32);
  if (v32)
  {
    sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)v32, v32[16] != 5);
  }
  else
  {
    sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *(void *)a2, *a1);
    uint64_t v33 = *a1;
    uint64_t v34 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v34) > 0x10)
    {
      *(unsigned char *)(v34 + 16) = 62;
      *(_OWORD *)uint64_t v34 = *(_OWORD *)" <<NULL ALIASEE>>";
      *((void *)v33 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v33, " <<NULL ALIASEE>>", 0x11uLL);
    }
  }
  if ((*(unsigned char *)(a2 + 33) & 0x80) != 0)
  {
    size_t v35 = *a1;
    unint64_t v36 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v36 > 0xCuLL)
    {
      qmemcpy(v36, ", partition \"", 13);
      *((void *)v35 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v35, ", partition \"", 0xDuLL);
    }
    Partitioint n = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v38, *a1);
    uint64_t v39 = *a1;
    size_t v40 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v40 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v39, 34);
    }
    else
    {
      *((void *)v39 + 4) = v40 + 1;
      *size_t v40 = 34;
    }
  }
  sub_1CC503F50(a1, (llvm::GCRelocateInst *)a2);
  uint64_t result = *a1;
  uint64_t v42 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v42 >= *((void *)*a1 + 3)) {
    return llvm::raw_ostream::write(result, 10);
  }
  *((void *)result + 4) = v42 + 1;
  *uint64_t v42 = 10;
  return result;
}

llvm::raw_ostream *sub_1CC4F7C4C(llvm::raw_ostream **a1, uint64_t a2)
{
  if (a2 && !*(unsigned char *)(a2 + 16) && (*(unsigned char *)(a2 + 34) & 0x80) != 0)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v5) > 0x10)
    {
      *(unsigned char *)(v5 + 16) = 10;
      *(_OWORD *)uint64_t v5 = *(_OWORD *)"; Materializable\n";
      *((void *)v4 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v4, "; Materializable\n", 0x11uLL);
    }
  }
  char v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 40);
  v37[0] = &unk_1F26161D8;
  v37[1] = a1 + 5;
  _OWORD v37[2] = v6;
  v37[3] = v7;
  sub_1CC4FB368(*a1, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)v37);
  uint64_t v8 = *a1;
  uint64_t v9 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  int v10 = *a1;
  sub_1CC4FA53C((uint64_t)__p, *(_DWORD *)(a2 + 32) & 0xF);
  if (v36 >= 0) {
    char v11 = __p;
  }
  else {
    char v11 = (void **)__p[0];
  }
  if (v36 >= 0) {
    size_t v12 = v36 & 0x7F;
  }
  else {
    size_t v12 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(v10, (const char *)v11, v12);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  sub_1CC4FA5B4((llvm::raw_ostream *)a2, *a1);
  int v13 = (*(_DWORD *)(a2 + 32) >> 4) & 3;
  int v14 = *a1;
  if (v13 == 2)
  {
    uint64_t v18 = *((void *)v14 + 4);
    if ((unint64_t)(*((void *)v14 + 3) - v18) <= 9)
    {
      int v16 = "protected ";
      size_t v17 = 10;
      goto LABEL_22;
    }
    *(_WORD *)(v18 + 8) = 8292;
    *(void *)uint64_t v18 = *(void *)"protected ";
    uint64_t v34 = *((void *)v14 + 4) + 10;
  }
  else
  {
    if (v13 != 1) {
      goto LABEL_23;
    }
    size_t v15 = (_DWORD *)*((void *)v14 + 4);
    if (*((void *)v14 + 3) - (void)v15 <= 6uLL)
    {
      int v16 = "hidden ";
      size_t v17 = 7;
LABEL_22:
      llvm::raw_ostream::write(v14, v16, v17);
      goto LABEL_23;
    }
    *(_DWORD *)((char *)v15 + 3) = 544105828;
    *size_t v15 = 1684302184;
    uint64_t v34 = *((void *)v14 + 4) + 7;
  }
  *((void *)v14 + 4) = v34;
LABEL_23:
  int v19 = *a1;
  uint64_t v20 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v20) > 5)
  {
    *(_WORD *)(v20 + 4) = 8291;
    *(_DWORD *)uint64_t v20 = 1853187689;
    *((void *)v19 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v19, "ifunc ", 6uLL);
  }
  sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *(void *)(a2 + 24), *a1);
  uint64_t v21 = *a1;
  int v22 = (_WORD *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v22 > 1uLL)
  {
    *int v22 = 8236;
    *((void *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ", ", 2uLL);
  }
  unint64_t v23 = *(unsigned __int8 **)(a2 - 32);
  if (v23)
  {
    sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)v23, v23[16] != 5);
  }
  else
  {
    sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), *(void *)a2, *a1);
    size_t v24 = *a1;
    uint64_t v25 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v25) > 0x11)
    {
      *(_WORD *)(v25 + 16) = 15934;
      *(_OWORD *)uint64_t v25 = *(_OWORD *)" <<NULL RESOLVER>>";
      *((void *)v24 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v24, " <<NULL RESOLVER>>", 0x12uLL);
    }
  }
  if ((*(unsigned char *)(a2 + 33) & 0x80) != 0)
  {
    uint64_t v26 = *a1;
    size_t v27 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v27 > 0xCuLL)
    {
      qmemcpy(v27, ", partition \"", 13);
      *((void *)v26 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v26, ", partition \"", 0xDuLL);
    }
    Partitioint n = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v29, *a1);
    int v30 = *a1;
    unint64_t v31 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v31 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v30, 34);
    }
    else
    {
      *((void *)v30 + 4) = v31 + 1;
      unsigned char *v31 = 34;
    }
  }
  sub_1CC503F50(a1, (llvm::GCRelocateInst *)a2);
  uint64_t result = *a1;
  uint64_t v33 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v33 >= *((void *)*a1 + 3)) {
    return llvm::raw_ostream::write(result, 10);
  }
  *((void *)result + 4) = v33 + 1;
  *uint64_t v33 = 10;
  return result;
}

void sub_1CC4F8044(int **this, llvm::detail::DoubleAPFloat *a2, uint64_t a3)
{
  uint64_t v5 = (llvm::raw_ostream *)this;
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v6 == 16)
  {
    uint64_t v7 = (unsigned int *)((char *)a2 + 24);
    if (*(_DWORD *)(*(void *)a2 + 8) == 269)
    {
      if (*((_DWORD *)a2 + 8) >= 0x41u) {
        uint64_t v7 = *(unsigned int **)v7;
      }
      if (*(void *)v7) {
        uint64_t v8 = "true";
      }
      else {
        uint64_t v8 = "false";
      }
      if (*(void *)v7) {
        size_t v9 = 4;
      }
      else {
        size_t v9 = 5;
      }
      int v10 = (void *)*((void *)v5 + 4);
      if (v9 > *((void *)v5 + 3) - (void)v10)
      {
        this = (int **)v5;
        size_t v11 = v9;
LABEL_30:
        llvm::raw_ostream::write((llvm::raw_ostream *)this, v8, v11);
        return;
      }
      memcpy(v10, v8, v9);
      uint64_t v71 = *((void *)v5 + 4) + v9;
      goto LABEL_169;
    }
    uint64_t v158 = (char *)&v160;
    *(_OWORD *)uint64_t v159 = xmmword_1CDB15B30;
    llvm::APInt::toString(v7, &v158, 0xAu, 1, 0);
    llvm::raw_ostream::write(v5, v158, v159[0]);
    int v19 = v158;
    if (v158 == (char *)&v160) {
      return;
    }
LABEL_117:
    free(v19);
    return;
  }
  if (!a2 || v6 != 17)
  {
    if (v6 == 18 || v6 == 13)
    {
      uint64_t v18 = this[4];
      if ((unint64_t)((char *)this[3] - (char *)v18) <= 0xE)
      {
        uint64_t v8 = "zeroinitializer";
        size_t v11 = 15;
        goto LABEL_30;
      }
      qmemcpy(v18, "zeroinitializer", 15);
      uint64_t v71 = (uint64_t)this[4] + 15;
LABEL_169:
      *((void *)v5 + 4) = v71;
      return;
    }
    if (a2 && v6 == 4)
    {
      size_t v24 = this[4];
      if ((unint64_t)((char *)this[3] - (char *)v24) > 0xC)
      {
        qmemcpy(v24, "blockaddress(", 13);
        this[4] = (int *)((char *)this[4] + 13);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, "blockaddress(", 0xDuLL);
      }
      sub_1CC4FB368(v5, *((llvm::detail::DoubleAPFloat **)a2 - 8));
      uint64_t v25 = (_WORD *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v25 > 1uLL)
      {
        *uint64_t v25 = 8236;
        *((void *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, ", ", 2uLL);
      }
      sub_1CC4FB368(v5, *((llvm::detail::DoubleAPFloat **)a2 - 4));
      uint64_t v26 = (unsigned char *)*((void *)v5 + 4);
      if (*((unsigned char **)v5 + 3) == v26)
      {
        uint64_t v8 = ")";
        this = (int **)v5;
        size_t v11 = 1;
        goto LABEL_30;
      }
      *uint64_t v26 = 41;
      uint64_t v71 = *((void *)v5 + 4) + 1;
      goto LABEL_169;
    }
    if (a2 && v6 == 6)
    {
      unint64_t v32 = this[4];
      if ((unint64_t)((char *)this[3] - (char *)v32) <= 0x14)
      {
        uint64_t v33 = "dso_local_equivalent ";
        size_t v34 = 21;
LABEL_122:
        llvm::raw_ostream::write((llvm::raw_ostream *)this, v33, v34);
LABEL_123:
        uint64_t v55 = (llvm::detail::DoubleAPFloat *)*((void *)a2 - 4);
        sub_1CC4FB368(v5, v55);
        return;
      }
      qmemcpy(v32, "dso_local_equivalent ", 21);
      uint64_t v92 = (uint64_t)this[4] + 21;
      goto LABEL_278;
    }
    if (a2 && v6 == 7)
    {
      unint64_t v54 = this[4];
      if ((unint64_t)((char *)this[3] - (char *)v54) <= 6)
      {
        uint64_t v33 = "no_cfi ";
        size_t v34 = 7;
        goto LABEL_122;
      }
      *(int *)((char *)v54 + 3) = 543778403;
      *unint64_t v54 = 1667198830;
      uint64_t v92 = (uint64_t)this[4] + 7;
LABEL_278:
      this[4] = (int *)v92;
      goto LABEL_123;
    }
    if (a2 && v6 == 8)
    {
      unint64_t v58 = *(void *)(*(void *)a2 + 24);
      uint64_t v59 = this[4];
      if (v59 >= this[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, 91);
      }
      else
      {
        this[4] = (int *)((char *)v59 + 1);
        *(unsigned char *)uint64_t v59 = 91;
      }
      sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), v58, v5);
      int v73 = (unsigned char *)*((void *)v5 + 4);
      if ((unint64_t)v73 >= *((void *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((void *)v5 + 4) = v73 + 1;
        *int v73 = 32;
      }
      sub_1CC4FB368(v5, *((llvm::detail::DoubleAPFloat **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      int v74 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      int v75 = v74 - 1;
      if (v74 != 1)
      {
        unsigned int v76 = (char *)a2 + 32;
        do
        {
          unsigned __int16 v77 = (_WORD *)*((void *)v5 + 4);
          if (*((void *)v5 + 3) - (void)v77 > 1uLL)
          {
            *unsigned __int16 v77 = 8236;
            *((void *)v5 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
          }
          sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), v58, v5);
          uint64_t v78 = (unsigned char *)*((void *)v5 + 4);
          if ((unint64_t)v78 >= *((void *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *((void *)v5 + 4) = v78 + 1;
            unsigned char *v78 = 32;
          }
          sub_1CC4FB368(v5, *(llvm::detail::DoubleAPFloat **)&v76[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
          v76 += 32;
          --v75;
        }
        while (v75);
      }
    }
    else
    {
      if (!a2 || v6 != 14)
      {
        if (a2 && v6 == 9)
        {
          if ((*(unsigned char *)(*(void *)a2 + 9) & 2) != 0)
          {
            int v72 = this[4];
            if (v72 >= this[3])
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, 60);
            }
            else
            {
              this[4] = (int *)((char *)v72 + 1);
              *(unsigned char *)int v72 = 60;
            }
          }
          uint64_t v93 = (unsigned char *)*((void *)v5 + 4);
          if ((unint64_t)v93 >= *((void *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 123);
          }
          else
          {
            *((void *)v5 + 4) = v93 + 1;
            *uint64_t v93 = 123;
          }
          int v94 = *((_DWORD *)a2 + 5);
          uint64_t v95 = v94 & 0x7FFFFFF;
          if ((v94 & 0x7FFFFFF) != 0)
          {
            uint64_t v96 = (unsigned char *)*((void *)v5 + 4);
            if ((unint64_t)v96 >= *((void *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((void *)v5 + 4) = v96 + 1;
              *uint64_t v96 = 32;
            }
            sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), **((void **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), v5);
            uint64_t v97 = (unsigned char *)*((void *)v5 + 4);
            if ((unint64_t)v97 >= *((void *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((void *)v5 + 4) = v97 + 1;
              *uint64_t v97 = 32;
            }
            sub_1CC4FB368(v5, *((llvm::detail::DoubleAPFloat **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
            if (v95 >= 2)
            {
              uint64_t v98 = v95 - 1;
              uint64_t v99 = (char *)a2 + 32;
              do
              {
                uint64_t v100 = (_WORD *)*((void *)v5 + 4);
                if (*((void *)v5 + 3) - (void)v100 > 1uLL)
                {
                  *uint64_t v100 = 8236;
                  *((void *)v5 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v5, ", ", 2uLL);
                }
                sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), **(void **)&v99[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], v5);
                unsigned int v101 = (unsigned char *)*((void *)v5 + 4);
                if ((unint64_t)v101 >= *((void *)v5 + 3))
                {
                  llvm::raw_ostream::write(v5, 32);
                }
                else
                {
                  *((void *)v5 + 4) = v101 + 1;
                  *unsigned int v101 = 32;
                }
                sub_1CC4FB368(v5, *(llvm::detail::DoubleAPFloat **)&v99[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
                v99 += 32;
                --v98;
              }
              while (v98);
            }
            uint64_t v102 = (unsigned char *)*((void *)v5 + 4);
            if ((unint64_t)v102 >= *((void *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((void *)v5 + 4) = v102 + 1;
              *uint64_t v102 = 32;
            }
          }
          uint64_t v103 = (unsigned char *)*((void *)v5 + 4);
          if ((unint64_t)v103 >= *((void *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 125);
          }
          else
          {
            *((void *)v5 + 4) = v103 + 1;
            *uint64_t v103 = 125;
          }
          if ((*(unsigned char *)(*(void *)a2 + 9) & 2) == 0) {
            return;
          }
LABEL_255:
          size_t v69 = (char *)*((void *)v5 + 4);
          if ((unint64_t)v69 < *((void *)v5 + 3))
          {
            *((void *)v5 + 4) = v69 + 1;
            char v70 = 62;
            goto LABEL_202;
          }
          uint64_t v86 = v5;
          char v87 = 62;
        }
        else
        {
          switch(*((unsigned char *)a2 + 16))
          {
            case 0xA:
            case 0xF:
              uint64_t v80 = *(void *)a2;
              unint64_t v81 = *(void *)(*(void *)a2 + 24);
              uint64_t v82 = this[4];
              if (v82 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, 60);
              }
              else
              {
                this[4] = (int *)((char *)v82 + 1);
                *(unsigned char *)uint64_t v82 = 60;
              }
              sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), v81, v5);
              size_t v104 = (unsigned char *)*((void *)v5 + 4);
              if ((unint64_t)v104 >= *((void *)v5 + 3))
              {
                llvm::raw_ostream::write(v5, 32);
              }
              else
              {
                *((void *)v5 + 4) = v104 + 1;
                *size_t v104 = 32;
              }
              AggregateElement = (llvm::detail::DoubleAPFloat *)llvm::Constant::getAggregateElement(a2, 0);
              sub_1CC4FB368(v5, AggregateElement);
              int v106 = *(_DWORD *)(v80 + 32);
              if (v106 != 1)
              {
                uint64_t v107 = 1;
                do
                {
                  size_t v108 = (_WORD *)*((void *)v5 + 4);
                  if (*((void *)v5 + 3) - (void)v108 > 1uLL)
                  {
                    *size_t v108 = 8236;
                    *((void *)v5 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v5, ", ", 2uLL);
                  }
                  sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), v81, v5);
                  char v109 = (unsigned char *)*((void *)v5 + 4);
                  if ((unint64_t)v109 >= *((void *)v5 + 3))
                  {
                    llvm::raw_ostream::write(v5, 32);
                  }
                  else
                  {
                    *((void *)v5 + 4) = v109 + 1;
                    *char v109 = 32;
                  }
                  int v110 = (llvm::detail::DoubleAPFloat *)llvm::Constant::getAggregateElement(a2, (llvm::Type *)v107);
                  sub_1CC4FB368(v5, v110);
                  uint64_t v107 = (v107 + 1);
                }
                while (v106 != v107);
              }
              goto LABEL_255;
            case 0xC:
              uint64_t v112 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v112) <= 5)
              {
                uint64_t v8 = "poison";
                size_t v11 = 6;
                goto LABEL_30;
              }
              *((_WORD *)v112 + 2) = 28271;
              *uint64_t v112 = 1936289648;
              uint64_t v71 = (uint64_t)this[4] + 6;
              goto LABEL_169;
            case 0x13:
              uint64_t v113 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v113) <= 3)
              {
                uint64_t v8 = "null";
                goto LABEL_276;
              }
              int v148 = 1819047278;
              goto LABEL_359;
            case 0x14:
              uint64_t v113 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v113) <= 3)
              {
                uint64_t v8 = "none";
LABEL_276:
                size_t v11 = 4;
                goto LABEL_30;
              }
              int v148 = 1701736302;
LABEL_359:
              int *v113 = v148;
              uint64_t v71 = (uint64_t)(this[4] + 1);
              goto LABEL_169;
            default:
              if ((v6 - 11) <= 1)
              {
                uint64_t v111 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v111) <= 4)
                {
                  uint64_t v8 = "undef";
                  size_t v11 = 5;
                  goto LABEL_30;
                }
                *((unsigned char *)v111 + 4) = 102;
                *uint64_t v111 = 1701080693;
                uint64_t v71 = (uint64_t)this[4] + 5;
                goto LABEL_169;
              }
              if (!a2 || v6 != 5)
              {
                char v127 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v127) <= 0x22)
                {
                  uint64_t v8 = "<placeholder or erroneous Constant>";
                  size_t v11 = 35;
                  goto LABEL_30;
                }
                qmemcpy(v127, "<placeholder or erroneous Constant>", 35);
                uint64_t v71 = (uint64_t)this[4] + 35;
                goto LABEL_169;
              }
              OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int16 *)a2 + 9));
              size_t v115 = strlen(OpcodeName);
              size_t v116 = (void *)*((void *)v5 + 4);
              if (v115 <= *((void *)v5 + 3) - (void)v116)
              {
                if (v115)
                {
                  memcpy(v116, OpcodeName, v115);
                  *((void *)v5 + 4) += v115;
                }
              }
              else
              {
                llvm::raw_ostream::write(v5, OpcodeName, v115);
              }
              sub_1CC503278(v5, (uint64_t)a2);
              uint64_t v117 = (unsigned char *)*((void *)v5 + 4);
              if (*((unsigned __int16 *)a2 + 9) - 53 <= 1)
              {
                if ((unint64_t)v117 >= *((void *)v5 + 3))
                {
                  llvm::raw_ostream::write(v5, 32);
                }
                else
                {
                  *((void *)v5 + 4) = v117 + 1;
                  *uint64_t v117 = 32;
                }
                PredicateName = llvm::CmpInst::getPredicateName(*((unsigned __int16 *)a2 + 12));
                size_t v130 = v128;
                uint64_t v117 = (unsigned char *)*((void *)v5 + 4);
                if (v128 <= *((void *)v5 + 3) - (void)v117)
                {
                  if (v128)
                  {
                    memcpy(v117, PredicateName, v128);
                    uint64_t v117 = (unsigned char *)(*((void *)v5 + 4) + v130);
                    *((void *)v5 + 4) = v117;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v5, PredicateName, v128);
                  uint64_t v117 = (unsigned char *)*((void *)v5 + 4);
                }
              }
              if (*((void *)v5 + 3) - (void)v117 > 1uLL)
              {
                *(_WORD *)uint64_t v117 = 10272;
                *((void *)v5 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v5, " (", 2uLL);
              }
              if (*((_WORD *)a2 + 9) == 34)
              {
                uint64_t v131 = 24;
                if (*((unsigned char *)a2 + 16) == 62) {
                  uint64_t v131 = 64;
                }
                sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), *(void *)((char *)a2 + v131), v5);
                uint64_t v132 = (_WORD *)*((void *)v5 + 4);
                if (*((void *)v5 + 3) - (void)v132 > 1uLL)
                {
                  *uint64_t v132 = 8236;
                  *((void *)v5 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v5, ", ", 2uLL);
                }
                unsigned int v133 = *((unsigned __int8 *)a2 + 17);
                BOOL v134 = v133 < 4;
                unsigned int v135 = v133 >> 2;
              }
              else
              {
                unsigned int v135 = 0;
                BOOL v134 = 1;
              }
              uint64_t v136 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
              if (!v136) {
                goto LABEL_338;
              }
              uint64_t v137 = -32 * v136;
              if (!v134) {
                goto LABEL_325;
              }
              while (1)
              {
                sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), **(void **)((char *)a2 + v137), v5);
                uint64_t v139 = (unsigned char *)*((void *)v5 + 4);
                if ((unint64_t)v139 >= *((void *)v5 + 3))
                {
                  llvm::raw_ostream::write(v5, 32);
                }
                else
                {
                  *((void *)v5 + 4) = v139 + 1;
                  unsigned char *v139 = 32;
                }
                sub_1CC4FB368(v5, *(llvm::detail::DoubleAPFloat **)((char *)a2 + v137));
                if (v137 == -32) {
                  break;
                }
                uint64_t v140 = (_WORD *)*((void *)v5 + 4);
                if (*((void *)v5 + 3) - (void)v140 > 1uLL)
                {
                  *uint64_t v140 = 8236;
                  *((void *)v5 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v5, ", ", 2uLL);
                }
                v137 += 32;
                if (!v134)
                {
LABEL_325:
                  if (v135 == ((v137 + 32 * (unint64_t)(*((_DWORD *)a2 + 5) & 0x7FFFFFF)) >> 5))
                  {
                    int v138 = (void *)*((void *)v5 + 4);
                    if (*((void *)v5 + 3) - (void)v138 > 7uLL)
                    {
                      void *v138 = 0x2065676E61726E69;
                      *((void *)v5 + 4) += 8;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v5, "inrange ", 8uLL);
                    }
                  }
                }
              }
LABEL_338:
              int v141 = *((unsigned __int16 *)a2 + 9);
              if ((v141 & 0xFFFE) == 0x40)
              {
                uint64_t v142 = *((unsigned int *)a2 + 8);
                if (v142)
                {
                  uint64_t v143 = (unsigned int *)*((void *)a2 + 3);
                  uint64_t v144 = 4 * v142;
                  do
                  {
                    unint64_t v145 = *v143;
                    size_t v146 = (_WORD *)*((void *)v5 + 4);
                    if (*((void *)v5 + 3) - (void)v146 > 1uLL)
                    {
                      *size_t v146 = 8236;
                      *((void *)v5 + 4) += 2;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v5, ", ", 2uLL);
                    }
                    sub_1CD098D14(v5, v145, 0, 0, 0);
                    ++v143;
                    v144 -= 4;
                  }
                  while (v144);
                  int v141 = *((unsigned __int16 *)a2 + 9);
                }
              }
              if ((v141 - 38) <= 0xC)
              {
                unint64_t v147 = (_DWORD *)*((void *)v5 + 4);
                if (*((void *)v5 + 3) - (void)v147 > 3uLL)
                {
                  *unint64_t v147 = 544175136;
                  *((void *)v5 + 4) += 4;
                }
                else
                {
                  llvm::raw_ostream::write(v5, " to ", 4uLL);
                }
                sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), *(void *)a2, v5);
                int v141 = *((unsigned __int16 *)a2 + 9);
              }
              if (v141 == 63) {
                sub_1CC503B68(v5, *(void *)a2, *((int **)a2 + 3), *((unsigned int *)a2 + 8));
              }
              size_t v69 = (char *)*((void *)v5 + 4);
              if ((unint64_t)v69 < *((void *)v5 + 3))
              {
                *((void *)v5 + 4) = v69 + 1;
                char v70 = 41;
                goto LABEL_202;
              }
              uint64_t v86 = v5;
              char v87 = 41;
              break;
          }
        }
        goto LABEL_204;
      }
      unint64_t v65 = *(void *)(*(void *)a2 + 24);
      if (*(unsigned char *)(*(void *)a2 + 8) == 17 && *(_DWORD *)(v65 + 8) == 2061)
      {
        uint64_t v66 = (char *)this[4];
        if ((unint64_t)((char *)this[3] - v66) > 1)
        {
          *(_WORD *)uint64_t v66 = 8803;
          this[4] = (int *)((char *)this[4] + 2);
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)this, "c\"", 2uLL);
        }
        RawDataValues = (llvm::raw_ostream *)llvm::ConstantDataSequential::getRawDataValues(a2);
        llvm::printEscapedString(RawDataValues, v68, v5);
        size_t v69 = (char *)*((void *)v5 + 4);
        if ((unint64_t)v69 < *((void *)v5 + 3))
        {
          *((void *)v5 + 4) = v69 + 1;
          char v70 = 34;
LABEL_202:
          *size_t v69 = v70;
          return;
        }
        uint64_t v86 = v5;
        char v87 = 34;
LABEL_204:
        llvm::raw_ostream::write(v86, v87);
        return;
      }
      uint64_t v79 = this[4];
      if (v79 >= this[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, 91);
      }
      else
      {
        this[4] = (int *)((char *)v79 + 1);
        *(unsigned char *)uint64_t v79 = 91;
      }
      sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), v65, v5);
      uint64_t v83 = (unsigned char *)*((void *)v5 + 4);
      if ((unint64_t)v83 >= *((void *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((void *)v5 + 4) = v83 + 1;
        unsigned char *v83 = 32;
      }
      ElementAsConstant = (llvm::detail::DoubleAPFloat *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)a2, 0);
      sub_1CC4FB368(v5, ElementAsConstant);
      int v85 = *(_DWORD *)(*(void *)a2 + 32);
      if (v85 != 1)
      {
        for (unsigned int i = 1; i != v85; ++i)
        {
          uint64_t v89 = (_WORD *)*((void *)v5 + 4);
          if (*((void *)v5 + 3) - (void)v89 > 1uLL)
          {
            *uint64_t v89 = 8236;
            *((void *)v5 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
          }
          sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), v65, v5);
          uint64_t v90 = (unsigned char *)*((void *)v5 + 4);
          if ((unint64_t)v90 >= *((void *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *((void *)v5 + 4) = v90 + 1;
            *uint64_t v90 = 32;
          }
          int v91 = (llvm::detail::DoubleAPFloat *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)a2, i);
          sub_1CC4FB368(v5, v91);
        }
      }
    }
    size_t v69 = (char *)*((void *)v5 + 4);
    if ((unint64_t)v69 < *((void *)v5 + 3))
    {
      *((void *)v5 + 4) = v69 + 1;
      char v70 = 93;
      goto LABEL_202;
    }
    uint64_t v86 = v5;
    char v87 = 93;
    goto LABEL_204;
  }
  size_t v12 = (llvm::detail::DoubleAPFloat *)((char *)a2 + 32);
  int v13 = (void *)*((void *)a2 + 4);
  if (v13 != &unk_1CFB2E308 && v13 != &unk_1CFB2E31C)
  {
    uint64_t v20 = (char *)this[4];
    if ((unint64_t)((char *)this[3] - v20) > 1)
    {
      *(_WORD *)uint64_t v20 = 30768;
      this[4] = (int *)((char *)this[4] + 2);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, "0x", 2uLL);
    }
    if (*(_UNKNOWN **)v12 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v12, (llvm::APInt *)&v153);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v12, (uint64_t)&v153);
    }
    uint64_t v21 = *(void **)v12;
    if (*(_UNKNOWN **)v12 == &unk_1CFB2E380)
    {
      unint64_t v31 = (unsigned char *)*((void *)v5 + 4);
      if ((unint64_t)v31 >= *((void *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 75);
      }
      else
      {
        *((void *)v5 + 4) = v31 + 1;
        unsigned char *v31 = 75;
      }
      llvm::APInt::getHiBits((llvm::APInt *)&v153, 16, (uint64_t)&v150);
      if (v151 >= 0x41) {
        uint64_t v50 = v150;
      }
      else {
        uint64_t v50 = (char **)&v150;
      }
      uint64_t v158 = *v50;
      v159[0] = 0;
      LODWORD(v159[1]) = 4;
      WORD2(v159[1]) = 257;
      BYTE6(v159[1]) = 0;
      llvm::raw_ostream::operator<<(v5, (uint64_t)&v158);
      if (v151 >= 0x41 && v150) {
        MEMORY[0x1D25D9CB0](v150, 0x1000C8000313F17);
      }
      unsigned int v51 = v154;
      if (v154 > 0x40) {
        operator new[]();
      }
      unsigned int v52 = v153;
      uint64_t v158 = v153;
      v159[0] = 0;
      LODWORD(v159[1]) = 16;
      WORD2(v159[1]) = 257;
      BYTE6(v159[1]) = 0;
      llvm::raw_ostream::operator<<(v5, (uint64_t)&v158);
      if (v51 >= 0x41 && v52)
      {
        unint64_t v53 = v52;
        goto LABEL_149;
      }
    }
    else
    {
      if (v21 == &unk_1CFB2E330)
      {
        int v49 = (unsigned char *)*((void *)v5 + 4);
        if ((unint64_t)v49 >= *((void *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 76);
        }
        else
        {
          *((void *)v5 + 4) = v49 + 1;
          *int v49 = 76;
        }
        unsigned int v57 = v154;
        if (v154 > 0x40) {
          operator new[]();
        }
      }
      else
      {
        if (v21 != &unk_1CFB2E344)
        {
          if (v21 == &unk_1CFB2E2E0)
          {
            int v22 = (char *)*((void *)v5 + 4);
            if ((unint64_t)v22 < *((void *)v5 + 3))
            {
              *((void *)v5 + 4) = v22 + 1;
              char v23 = 72;
              goto LABEL_133;
            }
            uint64_t v60 = v5;
            char v61 = 72;
          }
          else
          {
            int v22 = (char *)*((void *)v5 + 4);
            if ((unint64_t)v22 < *((void *)v5 + 3))
            {
              *((void *)v5 + 4) = v22 + 1;
              char v23 = 82;
LABEL_133:
              *int v22 = v23;
LABEL_152:
              uint64_t v64 = &v153;
              if (v154 >= 0x41) {
                uint64_t v64 = (char **)v153;
              }
              uint64_t v158 = *v64;
              v159[0] = 0;
              LODWORD(v159[1]) = 4;
              WORD2(v159[1]) = 257;
              BYTE6(v159[1]) = 0;
              llvm::raw_ostream::operator<<(v5, (uint64_t)&v158);
              goto LABEL_155;
            }
            uint64_t v60 = v5;
            char v61 = 82;
          }
          llvm::raw_ostream::write(v60, v61);
          goto LABEL_152;
        }
        unint64_t v56 = (unsigned char *)*((void *)v5 + 4);
        if ((unint64_t)v56 >= *((void *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 77);
        }
        else
        {
          *((void *)v5 + 4) = v56 + 1;
          *unint64_t v56 = 77;
        }
        unsigned int v57 = v154;
        if (v154 > 0x40) {
          operator new[]();
        }
      }
      unint64_t v62 = v153;
      uint64_t v158 = v153;
      v159[0] = 0;
      LODWORD(v159[1]) = 16;
      WORD2(v159[1]) = 257;
      BYTE6(v159[1]) = 0;
      llvm::raw_ostream::operator<<(v5, (uint64_t)&v158);
      if (v57 >= 0x41 && v62) {
        MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
      }
      llvm::APInt::getHiBits((llvm::APInt *)&v153, 64, (uint64_t)&v150);
      if (v151 >= 0x41) {
        char v63 = v150;
      }
      else {
        char v63 = (char **)&v150;
      }
      uint64_t v158 = *v63;
      v159[0] = 0;
      LODWORD(v159[1]) = 16;
      WORD2(v159[1]) = 257;
      BYTE6(v159[1]) = 0;
      llvm::raw_ostream::operator<<(v5, (uint64_t)&v158);
      if (v151 >= 0x41)
      {
        unint64_t v53 = v150;
        if (v150) {
LABEL_149:
        }
          MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
      }
    }
LABEL_155:
    if (v154 < 0x41) {
      return;
    }
    unint64_t v48 = (unint64_t)v153;
    if (!v153) {
      return;
    }
LABEL_157:
    MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
    return;
  }
  char v152 = 0;
  if (v13 == &unk_1CFB2E344)
  {
    int v16 = (char *)*((void *)a2 + 5);
    size_t v15 = v16 + 28;
  }
  else
  {
    size_t v15 = (char *)a2 + 52;
    int v16 = (char *)a2 + 24;
  }
  if ((*v15 & 7) == 0)
  {
    unint64_t v28 = (unint64_t)v13;
    goto LABEL_69;
  }
  int v27 = v16[28] & 7;
  unint64_t v28 = (unint64_t)v13;
  if (v27 == 1) {
    goto LABEL_69;
  }
  double v29 = llvm::APFloat::convertToDouble((llvm::detail::DoubleAPFloat *)((char *)a2 + 24));
  uint64_t v158 = (char *)&v160;
  *(_OWORD *)uint64_t v159 = xmmword_1CFAC3020;
  sub_1CC504338((uint64_t)v12 - 8, (uint64_t *)&v158, 6, 0, 0);
  llvm::APFloat::APFloat((uint64_t)&v153, &unk_1CFB2E31C, (unsigned __int8 *)v158, v159[0]);
  double v30 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v153);
  if (v154 == (_DWORD *)&unk_1CFB2E344)
  {
    double v149 = v30;
    sub_1CB845718(&v155);
  }
  else
  {
    if ((v154[2] - 64) > 0xFFFFFF7F || !v155) {
      goto LABEL_58;
    }
    double v149 = v30;
    MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
  }
  double v30 = v149;
LABEL_58:
  if (v30 == v29)
  {
    llvm::raw_ostream::write(v5, v158, v159[0]);
    int v19 = v158;
    if (v158 == (char *)&v160) {
      return;
    }
    goto LABEL_117;
  }
  if (v158 != (char *)&v160) {
    free(v158);
  }
  unint64_t v28 = *(void *)v12;
LABEL_69:
  if ((_UNKNOWN *)v28 == &unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v159, (llvm::detail::DoubleAPFloat *)((char *)a2 + 32));
  }
  else
  {
    v159[0] = v28;
    if ((*(_DWORD *)(v28 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v35 = *((unsigned char *)a2 + 52);
    int v36 = v35 & 7;
    char v161 = v161 & 0xF0 | v35 & 0xF;
    int v160 = *((_DWORD *)a2 + 12);
    BOOL v38 = (v35 & 6) != 0 && v36 != 3;
    if (v36 == 1 || v38)
    {
      uint64_t v39 = *(unsigned int *)(v159[0] + 8);
      if ((v39 - 64) <= 0xFFFFFF7F) {
        size_t v40 = (unint64_t *)v159[1];
      }
      else {
        size_t v40 = &v159[1];
      }
      uint64_t v43 = (unint64_t *)*((void *)a2 + 5);
      uint64_t v42 = (char *)a2 + 40;
      size_t v41 = v43;
      if ((*(_DWORD *)(*((void *)v42 - 1) + 8) - 64) >= 0xFFFFFF80) {
        size_t v41 = (unint64_t *)v42;
      }
      if (v39 <= 0xFFFFFFBF)
      {
        unint64_t v44 = (unint64_t)(v39 + 64) >> 6;
        do
        {
          unint64_t v45 = *v41++;
          *v40++ = v45;
          --v44;
        }
        while (v44);
      }
    }
  }
  if (v13 != &unk_1CFB2E31C)
  {
    if ((_UNKNOWN *)v159[0] == &unk_1CFB2E344) {
      char v46 = (char **)v159[1];
    }
    else {
      char v46 = &v158;
    }
    if ((*((unsigned char *)v46 + 28) & 7) != 1
      || ((_UNKNOWN *)v159[0] != &unk_1CFB2E344 ? (uint64_t v118 = &v158) : (uint64_t v118 = (char **)v159[1]),
          int v119 = v118[1],
          *((_DWORD *)v119 + 4) == 1))
    {
      llvm::APFloat::convert((uint64_t)&v158, &unk_1CFB2E31C, 1, &v152);
    }
    else
    {
      int v120 = *((_DWORD *)v119 + 2);
      uint64_t v121 = &v158;
      if ((_UNKNOWN *)v159[0] == &unk_1CFB2E344)
      {
        uint64_t v121 = (char **)v159[1];
        uint64_t v122 = (unint64_t *)(v159[1] + 16);
      }
      else
      {
        uint64_t v122 = &v159[1];
      }
      if ((v120 - 64) <= 0xFFFFFF7F) {
        uint64_t v122 = (unint64_t *)v121[2];
      }
      char v123 = v120 - 2;
      unint64_t v124 = v122[(v120 - 2) >> 6];
      llvm::APFloat::convert((uint64_t)&v158, &unk_1CFB2E31C, 1, &v152);
      if (((v124 >> v123) & 1) == 0)
      {
        if ((_UNKNOWN *)v159[0] == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v159, (llvm::APInt *)&v150);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v159, (uint64_t)&v150);
        }
        uint64_t v125 = &v158;
        if ((_UNKNOWN *)v159[0] == &unk_1CFB2E344) {
          uint64_t v125 = (char **)v159[1];
        }
        int v126 = (*((unsigned __int8 *)v125 + 28) >> 3) & 1;
        char v157 = 3;
        int v156 = -1023;
        uint64_t v154 = &unk_1CFB2E31C;
        uint64_t v155 = 0;
        sub_1CBFC6FE8((uint64_t)&v153, 1, v126, (const llvm::APInt *)&v150);
        sub_1CB9190C0((uint64_t *)v159, (void **)&v154);
        if (v154 == (_DWORD *)&unk_1CFB2E344)
        {
          sub_1CB845718(&v155);
        }
        else if ((v154[2] - 64) <= 0xFFFFFF7F && v155)
        {
          MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
        }
        if (v151 >= 0x41 && v150) {
          MEMORY[0x1D25D9CB0](v150, 0x1000C8000313F17);
        }
      }
    }
  }
  if ((_UNKNOWN *)v159[0] == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v159, (llvm::APInt *)&v150);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v159, (uint64_t)&v150);
  }
  uint64_t v47 = (char **)&v150;
  if (v151 >= 0x41) {
    uint64_t v47 = v150;
  }
  uint64_t v153 = *v47;
  uint64_t v154 = 0;
  LODWORD(v155) = 0;
  WORD2(v155) = 257;
  BYTE6(v155) = 1;
  llvm::raw_ostream::operator<<(v5, (uint64_t)&v153);
  if (v151 >= 0x41 && v150) {
    MEMORY[0x1D25D9CB0](v150, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v159[0] == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v159[1]);
    return;
  }
  if ((*(_DWORD *)(v159[0] + 8) - 64) <= 0xFFFFFF7F)
  {
    unint64_t v48 = v159[1];
    if (v159[1]) {
      goto LABEL_157;
    }
  }
}

uint64_t sub_1CC4F9C08(unsigned __int8 *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  if ((a1[23] & 0x10) == 0)
  {
    unsigned int v4 = a1[16];
    if (v4 >= 4 && (v4 < 0x15 || v4 == 23)) {
      return 0;
    }
  }
  v7[0] = &unk_1F26161D8;
  v7[1] = 0;
  uint64_t v7[2] = a3;
  v7[3] = a4;
  sub_1CC4FB368(a2, (llvm::detail::DoubleAPFloat *)a1, (uint64_t)v7);
  return 1;
}

uint64_t sub_1CC4F9C88(unint64_t *a1, llvm::raw_ostream *a2, int a3, llvm::ModuleSlotTracker *this)
{
  uint64_t v7 = *((void *)this + 3);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = v7;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  char v29 = 0;
  int v32 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  std::string __p = 0;
  size_t v34 = 0;
  uint64_t v35 = 0;
  if (a3)
  {
    sub_1CC4F2DB8((llvm::raw_ostream *)&v13, *a1, a2);
    uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v8 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((void *)a2 + 4) = v8 + 1;
      unsigned char *v8 = 32;
    }
  }
  uint64_t Machine = llvm::ModuleSlotTracker::getMachine(this);
  uint64_t v10 = *((void *)this + 3);
  v12[0] = &unk_1F26161D8;
  v12[1] = &v13;
  v12[2] = Machine;
  v12[3] = v10;
  sub_1CC4FB368(a2, (llvm::detail::DoubleAPFloat *)a1, (uint64_t)v12);
  if (__p)
  {
    size_t v34 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v30, 8);
  if (v26)
  {
    int v27 = v26;
    operator delete(v26);
  }
  MEMORY[0x1D25D9CD0](v23, 8);
  MEMORY[0x1D25D9CD0](v20, 8);
  MEMORY[0x1D25D9CD0](v17, 8);
  return MEMORY[0x1D25D9CD0](v14, 8);
}

void llvm::Metadata::printAsOperand(llvm::Metadata *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(unsigned __int8 *)this;
  v4[0] = &unk_1F26160C0;
  v4[1] = 0;
  BOOL v5 = a3 != 0;
  char v6 = (v3 < 0x23) & (0x7FFFFFFF0uLL >> v3);
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = a3;
  sub_1CC4F9EAC((uint64_t)a2, (uint64_t)this, (llvm::ModuleSlotTracker *)v4, (uint64_t)a3, 1, 0);
}

void sub_1CC4F9EAC(uint64_t a1, uint64_t a2, llvm::ModuleSlotTracker *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v21[2] = *MEMORY[0x1E4F143B8];
  int v10 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  int v16 = 1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = &unk_1F2644C68;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = v21;
  long long v20 = xmmword_1CDB159A0;
  sub_1CBF2ECF8((uint64_t)&v9, a1);
  llvm::ModuleSlotTracker::getMachine(a3);
  if (a6)
  {
    if ((a5 & 1) == 0) {
      operator new();
    }
  }
  operator new();
}

void llvm::MDNode::printTree(llvm::MDNode *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F26160C0;
  v3[1] = 0;
  BOOL v4 = a3 != 0;
  char v5 = 1;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v6 = a3;
  sub_1CC4F9EAC((uint64_t)a2, (uint64_t)this, (llvm::ModuleSlotTracker *)v3, (uint64_t)a3, 0, 1);
}

void llvm::MDNode::printTree(llvm::MDNode *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, const llvm::Module *a4)
{
}

uint64_t sub_1CC4FA274(void *a1)
{
  if (*a1 == a1[2] || *a1 == 0) {
    return 0;
  }
  else {
    return *a1 - 56;
  }
}

uint64_t sub_1CC4FA290(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == *(void *)(a1 + 24) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

BOOL sub_1CC4FA2AC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*a1 != v2) {
    *a1 = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL sub_1CC4FA2D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 != v2) {
    *(void *)(a1 + 8) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

void sub_1CC4FA2F4(uint64_t *a1, _DWORD *a2, char *a3, size_t a4)
{
  unsigned int v4 = a2[2];
  if (v4)
  {
    if (!*((_DWORD *)a1 + 80))
    {
      uint64_t v9 = a1 + 39;
      uint64_t v10 = *(void *)(*(void *)(*(void *)a2 + 8) + 16);
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 4) != 0) {
        uint64_t v11 = (void *)*v11;
      }
      llvm::LLVMContext::getMDKindNames((uint64_t)v11, v9);
      unsigned int v4 = a2[2];
    }
    uint64_t v12 = a1[4];
    uint64_t v13 = a1[1];
    v25[0] = &unk_1F26161D8;
    v25[1] = a1 + 5;
    v25[2] = v12;
    v25[3] = v13;
    if (v4)
    {
      char v14 = *(unsigned __int8 ***)a2;
      uint64_t v15 = *(void *)a2 + 16 * v4;
      do
      {
        unint64_t v16 = *(unsigned int *)v14;
        uint64_t v17 = *a1;
        uint64_t v18 = *(void **)(*a1 + 32);
        if (a4 <= *(void *)(*a1 + 24) - (void)v18)
        {
          if (a4)
          {
            memcpy(v18, a3, a4);
            *(void *)(v17 + 32) += a4;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)*a1, a3, a4);
        }
        int v19 = (llvm::raw_ostream *)*a1;
        uint64_t v21 = *(char **)(*a1 + 24);
        long long v20 = *(char **)(*a1 + 32);
        if (*((_DWORD *)a1 + 80) <= v16)
        {
          if ((unint64_t)(v21 - v20) > 0xF)
          {
            *(_OWORD *)long long v20 = *(_OWORD *)"!<unknown kind #";
            *((void *)v19 + 4) += 16;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "!<unknown kind #", 0x10uLL);
          }
          sub_1CD098D14(v19, v16, 0, 0, 0);
          int v22 = (unsigned char *)*((void *)v19 + 4);
          if (*((unsigned char **)v19 + 3) == v22)
          {
            llvm::raw_ostream::write(v19, ">", 1uLL);
          }
          else
          {
            *int v22 = 62;
            ++*((void *)v19 + 4);
          }
        }
        else
        {
          if (v21 == v20)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "!", 1uLL);
          }
          else
          {
            *long long v20 = 33;
            ++*((void *)v19 + 4);
          }
          sub_1CC4FC43C(*(llvm::raw_ostream **)(a1[39] + 16 * v16), *(void *)(a1[39] + 16 * v16 + 8), (llvm::raw_ostream *)*a1);
        }
        uint64_t v23 = (llvm::raw_ostream *)*a1;
        uint64_t v24 = *(unsigned char **)(*a1 + 32);
        if ((unint64_t)v24 >= *(void *)(*a1 + 24))
        {
          llvm::raw_ostream::write(v23, 32);
        }
        else
        {
          *((void *)v23 + 4) = v24 + 1;
          *uint64_t v24 = 32;
        }
        sub_1CC4FC73C((llvm::raw_ostream *)*a1, v14[1], (uint64_t)v25);
        v14 += 2;
      }
      while (v14 != (unsigned __int8 **)v15);
    }
  }
}

void sub_1CC4FA53C(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_1CC4FD6B4((char *)&v4, a2);
    unint64_t v3 = std::string::append(&v4, " ");
    *(std::string *)a1 = *v3;
    v3->__r_.__value_.__r.__words[0] = 0;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v4.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
}

llvm::raw_ostream *sub_1CC4FA5B4(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  int v2 = *((_DWORD *)result + 8);
  if ((v2 & 0x4000) != 0 && (*((_DWORD *)result + 8) & 0xFu) - 7 >= 2)
  {
    if ((v2 & 0x30) == 0
      || (uint64_t result = (llvm::raw_ostream *)llvm::GlobalValue::hasExternalWeakLinkage(result), result))
    {
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) > 9)
      {
        *(_WORD *)(v4 + 8) = 8300;
        *(void *)uint64_t v4 = *(void *)"dso_local ";
        *((void *)this + 4) += 10;
      }
      else
      {
        return llvm::raw_ostream::write(this, "dso_local ", 0xAuLL);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC4FA65C(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  unsigned int v3 = result;
  switch((int)result)
  {
    case 8:
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) <= 5)
      {
        char v5 = "fastcc";
        goto LABEL_70;
      }
      *(_WORD *)(v4 + 4) = 25443;
      int v21 = 1953718630;
      goto LABEL_161;
    case 9:
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) <= 5)
      {
        char v5 = "coldcc";
        goto LABEL_70;
      }
      *(_WORD *)(v4 + 4) = 25443;
      int v21 = 1684828003;
      goto LABEL_161;
    case 10:
      uint64_t v8 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v8) <= 4)
      {
        char v5 = "ghccc";
        uint64_t v9 = this;
        size_t v10 = 5;
        goto LABEL_126;
      }
      *(unsigned char *)(v8 + 4) = 99;
      *(_DWORD *)uint64_t v8 = 1667459175;
      uint64_t v22 = *((void *)this + 4) + 5;
      goto LABEL_194;
    case 11:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 73:
    case 74:
    case 86:
    case 94:
    case 99:
      goto LABEL_7;
    case 12:
      uint64_t v11 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v11) <= 0xA)
      {
        char v5 = "webkit_jscc";
        goto LABEL_77;
      }
      int v23 = 1667461994;
      uint64_t v24 = "webkit_jscc";
      goto LABEL_165;
    case 13:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "anyregcc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x676572796E61;
      goto LABEL_189;
    case 14:
      uint64_t v13 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v13 <= 0xEuLL)
      {
        char v5 = "preserve_mostcc";
        goto LABEL_44;
      }
      uint64_t v26 = "preserve_mostcc";
      goto LABEL_147;
    case 15:
      char v14 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v14 <= 0xDuLL)
      {
        char v5 = "preserve_allcc";
        goto LABEL_59;
      }
      int v27 = "preserve_allcc";
      goto LABEL_155;
    case 16:
      uint64_t v15 = (int *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 <= 6uLL)
      {
        char v5 = "swiftcc";
        goto LABEL_64;
      }
      *(int *)((char *)v15 + 3) = 1667462246;
      int v28 = 1718187891;
      goto LABEL_158;
    case 17:
      char v14 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v14 <= 0xDuLL)
      {
        char v5 = "cxx_fast_tlscc";
        goto LABEL_59;
      }
      int v27 = "cxx_fast_tlscc";
      goto LABEL_155;
    case 18:
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) <= 5)
      {
        char v5 = "tailcc";
        goto LABEL_70;
      }
      *(_WORD *)(v4 + 4) = 25443;
      int v21 = 1818845556;
      goto LABEL_161;
    case 19:
      uint64_t v13 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v13 <= 0xEuLL)
      {
        char v5 = "cfguard_checkcc";
        goto LABEL_44;
      }
      uint64_t v26 = "cfguard_checkcc";
      goto LABEL_147;
    case 20:
      uint64_t v11 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v11) <= 0xA)
      {
        char v5 = "swifttailcc";
        goto LABEL_77;
      }
      int v23 = 1667460201;
      uint64_t v24 = "swifttailcc";
      goto LABEL_165;
    case 64:
      unint64_t v16 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v16 <= 0xCuLL)
      {
        char v5 = "x86_stdcallcc";
        goto LABEL_92;
      }
      char v29 = "x86_stdcallcc";
      goto LABEL_173;
    case 65:
      char v14 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v14 <= 0xDuLL)
      {
        char v5 = "x86_fastcallcc";
        goto LABEL_59;
      }
      int v27 = "x86_fastcallcc";
      goto LABEL_155;
    case 66:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 9)
      {
        char v5 = "arm_apcscc";
        goto LABEL_125;
      }
      __int16 v30 = 25443;
      uint64_t v31 = "arm_apcscc";
      goto LABEL_191;
    case 67:
      uint64_t v11 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v11) <= 0xA)
      {
        char v5 = "arm_aapcscc";
        goto LABEL_77;
      }
      int v23 = 1667461987;
      uint64_t v24 = "arm_aapcscc";
      goto LABEL_165;
    case 68:
      uint64_t v13 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v13 <= 0xEuLL)
      {
        char v5 = "arm_aapcs_vfpcc";
LABEL_44:
        uint64_t v9 = this;
        size_t v10 = 15;
        goto LABEL_126;
      }
      uint64_t v26 = "arm_aapcs_vfpcc";
LABEL_147:
      *uint64_t v13 = *(void *)v26;
      *(void *)((char *)v13 + 7) = *(void *)(v26 + 7);
      uint64_t v22 = *((void *)this + 4) + 15;
      goto LABEL_194;
    case 69:
      unint64_t v16 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v16 <= 0xCuLL)
      {
        char v5 = "msp430_intrcc";
        goto LABEL_92;
      }
      char v29 = "msp430_intrcc";
      goto LABEL_173;
    case 70:
      char v14 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v14 <= 0xDuLL)
      {
        char v5 = "x86_thiscallcc";
        goto LABEL_59;
      }
      int v27 = "x86_thiscallcc";
      goto LABEL_155;
    case 71:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 9)
      {
        char v5 = "ptx_kernel";
        goto LABEL_125;
      }
      __int16 v30 = 27749;
      uint64_t v31 = "ptx_kernel";
      goto LABEL_191;
    case 72:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 9)
      {
        char v5 = "ptx_device";
        goto LABEL_125;
      }
      __int16 v30 = 25955;
      uint64_t v31 = "ptx_device";
      goto LABEL_191;
    case 75:
      uint64_t v18 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v18) <= 8)
      {
        char v5 = "spir_func";
        goto LABEL_99;
      }
      char v32 = 99;
      uint64_t v33 = "spir_func";
      goto LABEL_177;
    case 76:
      uint64_t v11 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v11) <= 0xA)
      {
        char v5 = "spir_kernel";
        goto LABEL_77;
      }
      int v23 = 1818586738;
      uint64_t v24 = "spir_kernel";
      goto LABEL_165;
    case 77:
      char v14 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v14 <= 0xDuLL)
      {
        char v5 = "intel_ocl_bicc";
LABEL_59:
        uint64_t v9 = this;
        size_t v10 = 14;
        goto LABEL_126;
      }
      int v27 = "intel_ocl_bicc";
LABEL_155:
      *char v14 = *(void *)v27;
      *(void *)((char *)v14 + 6) = *(void *)(v27 + 6);
      uint64_t v22 = *((void *)this + 4) + 14;
      goto LABEL_194;
    case 78:
      unint64_t v16 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v16 <= 0xCuLL)
      {
        char v5 = "x86_64_sysvcc";
        goto LABEL_92;
      }
      char v29 = "x86_64_sysvcc";
      goto LABEL_173;
    case 79:
      uint64_t v15 = (int *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 <= 6uLL)
      {
        char v5 = "win64cc";
LABEL_64:
        uint64_t v9 = this;
        size_t v10 = 7;
        goto LABEL_126;
      }
      *(int *)((char *)v15 + 3) = 1667445814;
      int v28 = 913205623;
LABEL_158:
      *uint64_t v15 = v28;
      uint64_t v22 = *((void *)this + 4) + 7;
      goto LABEL_194;
    case 80:
      char v6 = (_OWORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v6 <= 0xFuLL)
      {
        char v5 = "x86_vectorcallcc";
        goto LABEL_67;
      }
      size_t v34 = "x86_vectorcallcc";
      goto LABEL_193;
    case 81:
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) <= 5)
      {
        char v5 = "hhvmcc";
LABEL_70:
        uint64_t v9 = this;
        size_t v10 = 6;
        goto LABEL_126;
      }
      *(_WORD *)(v4 + 4) = 25443;
      int v21 = 1836476520;
LABEL_161:
      *(_DWORD *)uint64_t v4 = v21;
      uint64_t v22 = *((void *)this + 4) + 6;
      goto LABEL_194;
    case 82:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "hhvm_ccc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x635F6D766868;
      goto LABEL_189;
    case 83:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 9)
      {
        char v5 = "x86_intrcc";
        goto LABEL_125;
      }
      __int16 v30 = 25443;
      uint64_t v31 = "x86_intrcc";
      goto LABEL_191;
    case 84:
      uint64_t v11 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v11) <= 0xA)
      {
        char v5 = "avr_intrcc ";
LABEL_77:
        uint64_t v9 = this;
        size_t v10 = 11;
        goto LABEL_126;
      }
      int v23 = 543384434;
      uint64_t v24 = "avr_intrcc ";
LABEL_165:
      *(_DWORD *)(v11 + 7) = v23;
      *(void *)uint64_t v11 = *(void *)v24;
      uint64_t v22 = *((void *)this + 4) + 11;
      goto LABEL_194;
    case 85:
      unint64_t v16 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v16 <= 0xCuLL)
      {
        char v5 = "avr_signalcc ";
        goto LABEL_92;
      }
      char v29 = "avr_signalcc ";
      goto LABEL_173;
    case 87:
      uint64_t v18 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v18) <= 8)
      {
        char v5 = "amdgpu_vs";
        goto LABEL_99;
      }
      char v32 = 115;
      uint64_t v33 = "amdgpu_vs";
      goto LABEL_177;
    case 88:
      uint64_t v18 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v18) <= 8)
      {
        char v5 = "amdgpu_gs";
        goto LABEL_99;
      }
      char v32 = 115;
      uint64_t v33 = "amdgpu_gs";
      goto LABEL_177;
    case 89:
      uint64_t v18 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v18) <= 8)
      {
        char v5 = "amdgpu_ps";
        goto LABEL_99;
      }
      char v32 = 115;
      uint64_t v33 = "amdgpu_ps";
      goto LABEL_177;
    case 90:
      uint64_t v18 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v18) <= 8)
      {
        char v5 = "amdgpu_cs";
        goto LABEL_99;
      }
      char v32 = 115;
      uint64_t v33 = "amdgpu_cs";
      goto LABEL_177;
    case 91:
      unint64_t v16 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v16 <= 0xCuLL)
      {
        char v5 = "amdgpu_kernel";
        goto LABEL_92;
      }
      char v29 = "amdgpu_kernel";
      goto LABEL_173;
    case 92:
      unint64_t v16 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v16 <= 0xCuLL)
      {
        char v5 = "x86_regcallcc";
LABEL_92:
        uint64_t v9 = this;
        size_t v10 = 13;
        goto LABEL_126;
      }
      char v29 = "x86_regcallcc";
LABEL_173:
      *unint64_t v16 = *(void *)v29;
      *(void *)((char *)v16 + 5) = *(void *)(v29 + 5);
      uint64_t v22 = *((void *)this + 4) + 13;
      goto LABEL_194;
    case 93:
      uint64_t v18 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v18) <= 8)
      {
        char v5 = "amdgpu_hs";
        goto LABEL_99;
      }
      char v32 = 115;
      uint64_t v33 = "amdgpu_hs";
      goto LABEL_177;
    case 95:
      uint64_t v18 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v18) <= 8)
      {
        char v5 = "amdgpu_ls";
        goto LABEL_99;
      }
      char v32 = 115;
      uint64_t v33 = "amdgpu_ls";
      goto LABEL_177;
    case 96:
      uint64_t v18 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v18) <= 8)
      {
        char v5 = "amdgpu_es";
LABEL_99:
        uint64_t v9 = this;
        size_t v10 = 9;
        goto LABEL_126;
      }
      char v32 = 115;
      uint64_t v33 = "amdgpu_es";
LABEL_177:
      *(unsigned char *)(v18 + 8) = v32;
      *(void *)uint64_t v18 = *(void *)v33;
      uint64_t v22 = *((void *)this + 4) + 9;
      goto LABEL_194;
    case 97:
      uint64_t v19 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v19) <= 0x11)
      {
        char v5 = "aarch64_vector_pcs";
        uint64_t v9 = this;
        size_t v10 = 18;
        goto LABEL_126;
      }
      *(_WORD *)(v19 + 16) = 29539;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)"aarch64_vector_pcs";
      uint64_t v22 = *((void *)this + 4) + 18;
      goto LABEL_194;
    case 98:
      long long v20 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v20 <= 0x15uLL)
      {
        char v5 = "aarch64_sve_vector_pcs";
        uint64_t v9 = this;
        size_t v10 = 22;
        goto LABEL_126;
      }
      qmemcpy(v20, "aarch64_sve_vector_pcs", 22);
      uint64_t v22 = *((void *)this + 4) + 22;
      goto LABEL_194;
    case 100:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "agx_ticc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x69745F786761;
      goto LABEL_189;
    case 101:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "agx_pscc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x73705F786761;
      goto LABEL_189;
    case 102:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "agx_vscc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x73765F786761;
      goto LABEL_189;
    case 103:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "agx_sscc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x73735F786761;
      goto LABEL_189;
    case 104:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "agx_sfcc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x66735F786761;
      goto LABEL_189;
    case 105:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "agx_sicc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x69735F786761;
      goto LABEL_189;
    case 106:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "agx_clcc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x6C635F786761;
      goto LABEL_189;
    case 107:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "agx_dscc";
        goto LABEL_122;
      }
      uint64_t v25 = 0x73645F786761;
      goto LABEL_189;
    case 108:
      uint64_t v12 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 7uLL)
      {
        char v5 = "agx_mrcc";
LABEL_122:
        uint64_t v9 = this;
        size_t v10 = 8;
        goto LABEL_126;
      }
      uint64_t v25 = 0x726D5F786761;
LABEL_189:
      *uint64_t v12 = v25 & 0xFFFFFFFFFFFFLL | 0x6363000000000000;
      uint64_t v22 = *((void *)this + 4) + 8;
      goto LABEL_194;
    case 109:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 9)
      {
        char v5 = "amdgpu_gfx";
LABEL_125:
        uint64_t v9 = this;
        size_t v10 = 10;
        goto LABEL_126;
      }
      __int16 v30 = 30822;
      uint64_t v31 = "amdgpu_gfx";
LABEL_191:
      *(_WORD *)(v17 + 8) = v30;
      *(void *)uint64_t v17 = *(void *)v31;
      uint64_t v22 = *((void *)this + 4) + 10;
      goto LABEL_194;
    default:
      if (result == 255)
      {
        char v6 = (_OWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v6 > 0xFuLL)
        {
          size_t v34 = "air_intersection";
LABEL_193:
          *char v6 = *(_OWORD *)v34;
          uint64_t v22 = *((void *)this + 4) + 16;
LABEL_194:
          *((void *)this + 4) = v22;
        }
        else
        {
          char v5 = "air_intersection";
LABEL_67:
          uint64_t v9 = this;
          size_t v10 = 16;
LABEL_126:
          return llvm::raw_ostream::write(v9, v5, v10);
        }
      }
      else
      {
LABEL_7:
        uint64_t v7 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v7 > 1uLL)
        {
          *uint64_t v7 = 25443;
          *((void *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "cc", 2uLL);
        }
        return sub_1CD098D14(this, v3, 0, 0, 0);
      }
      return result;
  }
}

void sub_1CC4FB368(llvm::raw_ostream *this, llvm::detail::DoubleAPFloat *a2, uint64_t a3)
{
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v8 = ***(void ***)a2;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v12 = v9 + 16 * v11;
      uint64_t v13 = *(llvm::detail::DoubleAPFloat **)v12;
      if (*(llvm::detail::DoubleAPFloat **)v12 == a2)
      {
LABEL_45:
        uint64_t v24 = *(size_t **)(v12 + 8);
        size_t v27 = *v24;
        uint64_t v25 = (llvm::raw_ostream *)(v24 + 2);
        size_t v26 = v27;
        if (*((unsigned __int8 *)a2 + 16) >= 4u) {
          int v28 = 3;
        }
        else {
          int v28 = 0;
        }
        sub_1CC4F2BA0(this, v25, v26, v28);
        return;
      }
      int v14 = 1;
      while (v13 != (llvm::detail::DoubleAPFloat *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        uint64_t v13 = *(llvm::detail::DoubleAPFloat **)(v9 + 16 * v11);
        if (v13 == a2)
        {
          uint64_t v12 = v9 + 16 * v11;
          goto LABEL_45;
        }
      }
    }
    uint64_t v12 = v9 + 16 * v10;
    goto LABEL_45;
  }
  unsigned int v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 <= 0x14)
  {
    if (v5 < 4) {
      goto LABEL_28;
    }
    sub_1CC4F8044((int **)this, a2, a3);
  }
  else
  {
    if (v5 != 23)
    {
      if (v5 == 24)
      {
        char v6 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v6 > 3uLL)
        {
          *char v6 = 544043873;
          unint64_t v7 = *((void *)this + 4) + 4;
          *((void *)this + 4) = v7;
        }
        else
        {
          llvm::raw_ostream::write(this, "asm ", 4uLL);
          unint64_t v7 = *((void *)this + 4);
        }
        if (*((unsigned char *)a2 + 80))
        {
          if (*((void *)this + 3) - v7 > 0xA)
          {
            *(_DWORD *)(v7 + 7) = 544498533;
            *(void *)unint64_t v7 = *(void *)"sideeffect ";
            unint64_t v7 = *((void *)this + 4) + 11;
            *((void *)this + 4) = v7;
          }
          else
          {
            llvm::raw_ostream::write(this, "sideeffect ", 0xBuLL);
            unint64_t v7 = *((void *)this + 4);
          }
        }
        if (*((unsigned char *)a2 + 81))
        {
          if (*((void *)this + 3) - v7 > 0xA)
          {
            *(_DWORD *)(v7 + 7) = 543908705;
            *(void *)unint64_t v7 = *(void *)"alignstack ";
            unint64_t v7 = *((void *)this + 4) + 11;
            *((void *)this + 4) = v7;
          }
          else
          {
            llvm::raw_ostream::write(this, "alignstack ", 0xBuLL);
            unint64_t v7 = *((void *)this + 4);
          }
        }
        if (*((_DWORD *)a2 + 21) == 1)
        {
          if (*((void *)this + 3) - v7 > 0xC)
          {
            qmemcpy((void *)v7, "inteldialect ", 13);
            unint64_t v7 = *((void *)this + 4) + 13;
            *((void *)this + 4) = v7;
          }
          else
          {
            llvm::raw_ostream::write(this, "inteldialect ", 0xDuLL);
            unint64_t v7 = *((void *)this + 4);
          }
        }
        if (*((unsigned char *)a2 + 88))
        {
          if (*((void *)this + 3) - v7 > 6)
          {
            *(_DWORD *)(v7 + 3) = 543452777;
            *(_DWORD *)unint64_t v7 = 1769434741;
            unint64_t v7 = *((void *)this + 4) + 7;
            *((void *)this + 4) = v7;
          }
          else
          {
            llvm::raw_ostream::write(this, "unwind ", 7uLL);
            unint64_t v7 = *((void *)this + 4);
          }
        }
        if (v7 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 34);
        }
        else
        {
          *((void *)this + 4) = v7 + 1;
          *(unsigned char *)unint64_t v7 = 34;
        }
        char v49 = *((unsigned char *)a2 + 47);
        if (v49 >= 0) {
          uint64_t v50 = (llvm::detail::DoubleAPFloat *)((char *)a2 + 24);
        }
        else {
          uint64_t v50 = (llvm::raw_ostream *)*((void *)a2 + 3);
        }
        if (v49 >= 0) {
          uint64_t v51 = v49 & 0x7F;
        }
        else {
          uint64_t v51 = *((void *)a2 + 4);
        }
        llvm::printEscapedString(v50, v51, this);
        unsigned int v52 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v52 > 3uLL)
        {
          _DWORD *v52 = 572533794;
          *((void *)this + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(this, "\", \"", 4uLL);
        }
        uint64_t v55 = (llvm::raw_ostream *)*((void *)a2 + 6);
        unint64_t v54 = (uint64_t *)((char *)a2 + 48);
        unint64_t v53 = v55;
        char v56 = *((unsigned char *)v54 + 23);
        int v57 = v56;
        if (v56 >= 0) {
          unint64_t v58 = (llvm::raw_ostream *)v54;
        }
        else {
          unint64_t v58 = v53;
        }
        uint64_t v59 = v56 & 0x7F;
        if (v57 >= 0) {
          uint64_t v60 = v59;
        }
        else {
          uint64_t v60 = v54[1];
        }
        llvm::printEscapedString(v58, v60, this);
        char v61 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v61 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 34);
        }
        else
        {
          *((void *)this + 4) = v61 + 1;
          unsigned char *v61 = 34;
        }
        return;
      }
LABEL_28:
      uint64_t v16 = *(void *)(a3 + 16);
      if (v16)
      {
        if (v5 <= 3)
        {
          int GlobalSlot = llvm::SlotTracker::getGlobalSlot(*(llvm::SlotTracker **)(a3 + 16), a2);
          char v39 = 64;
          goto LABEL_113;
        }
        if (*(void *)(v16 + 8))
        {
          llvm::SlotTracker::processModule(*(llvm::SlotTracker **)(a3 + 16));
          *(void *)(v16 + 8) = 0;
        }
        if (*(void *)(v16 + 16) && !*(unsigned char *)(v16 + 24)) {
          llvm::SlotTracker::processFunction((llvm::SlotTracker *)v16);
        }
        uint64_t v17 = *(void *)(v16 + 136);
        uint64_t v18 = *(unsigned int *)(v16 + 152);
        if (v18)
        {
          LODWORD(v19) = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          uint64_t v20 = v17 + 16 * v19;
          int v21 = *(llvm::detail::DoubleAPFloat **)v20;
          if (*(llvm::detail::DoubleAPFloat **)v20 == a2)
          {
LABEL_68:
            if (v20 != v17 + 16 * v18)
            {
              int GlobalSlot = *(_DWORD *)(v20 + 8);
              if (GlobalSlot != -1)
              {
                char v39 = 37;
LABEL_114:
                unint64_t v62 = (char *)*((void *)this + 4);
                if ((unint64_t)v62 >= *((void *)this + 3))
                {
                  llvm::raw_ostream::write(this, v39);
                }
                else
                {
                  *((void *)this + 4) = v62 + 1;
                  char *v62 = v39;
                }
                unint64_t v64 = GlobalSlot;
                if (GlobalSlot < 0)
                {
                  unint64_t v64 = -(uint64_t)GlobalSlot;
                  unint64_t v65 = this;
                  int v66 = 1;
                }
                else
                {
                  unint64_t v65 = this;
                  int v66 = 0;
                }
                sub_1CD098D14(v65, v64, 0, 0, v66);
                return;
              }
            }
            size_t v40 = (llvm::SlotTracker *)sub_1CC4FD890((uint64_t)a2);
            if (!v40) {
              goto LABEL_116;
            }
            size_t v41 = v40;
            if (*((void *)v40 + 1))
            {
              llvm::SlotTracker::processModule(v40);
              *((void *)v41 + 1) = 0;
            }
            if (*((void *)v41 + 2) && !*((unsigned char *)v41 + 24)) {
              llvm::SlotTracker::processFunction(v41);
            }
            uint64_t v42 = *((void *)v41 + 17);
            uint64_t v43 = *((unsigned int *)v41 + 38);
            if (v43)
            {
              LODWORD(v44) = (v43 - 1) & ((a2 >> 4) ^ (a2 >> 9));
              uint64_t v45 = v42 + 16 * v44;
              char v46 = *(llvm::detail::DoubleAPFloat **)v45;
              if (*(llvm::detail::DoubleAPFloat **)v45 == a2)
              {
LABEL_109:
                if (v45 == v42 + 16 * v43) {
                  int GlobalSlot = -1;
                }
                else {
                  int GlobalSlot = *(_DWORD *)(v45 + 8);
                }
                (*(void (**)(llvm::SlotTracker *))(*(void *)v41 + 8))(v41);
                char v39 = 37;
LABEL_113:
                if (GlobalSlot != -1) {
                  goto LABEL_114;
                }
                goto LABEL_116;
              }
              int v47 = 1;
              while (v46 != (llvm::detail::DoubleAPFloat *)-4096)
              {
                int v48 = v44 + v47++;
                uint64_t v44 = v48 & (v43 - 1);
                char v46 = *(llvm::detail::DoubleAPFloat **)(v42 + 16 * v44);
                if (v46 == a2)
                {
                  uint64_t v45 = v42 + 16 * v44;
                  goto LABEL_109;
                }
              }
            }
            uint64_t v45 = v42 + 16 * v43;
            goto LABEL_109;
          }
          int v22 = 1;
          while (v21 != (llvm::detail::DoubleAPFloat *)-4096)
          {
            int v23 = v19 + v22++;
            uint64_t v19 = v23 & (v18 - 1);
            int v21 = *(llvm::detail::DoubleAPFloat **)(v17 + 16 * v19);
            if (v21 == a2)
            {
              uint64_t v20 = v17 + 16 * v19;
              goto LABEL_68;
            }
          }
        }
        uint64_t v20 = v17 + 16 * v18;
        goto LABEL_68;
      }
      char v29 = (llvm::SlotTracker *)sub_1CC4FD890((uint64_t)a2);
      if (!v29)
      {
LABEL_116:
        char v63 = (void *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v63 > 7uLL)
        {
          void *v63 = 0x3E6665726461623CLL;
          *((void *)this + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(this, "<badref>", 8uLL);
        }
        return;
      }
      __int16 v30 = v29;
      if (*((unsigned __int8 *)a2 + 16) <= 3u)
      {
        int GlobalSlot = llvm::SlotTracker::getGlobalSlot(v29, a2);
        char v39 = 64;
LABEL_107:
        (*(void (**)(llvm::SlotTracker *))(*(void *)v30 + 8))(v30);
        goto LABEL_113;
      }
      if (*((void *)v29 + 1))
      {
        llvm::SlotTracker::processModule(v29);
        *((void *)v30 + 1) = 0;
      }
      if (*((void *)v30 + 2) && !*((unsigned char *)v30 + 24)) {
        llvm::SlotTracker::processFunction(v30);
      }
      uint64_t v31 = *((void *)v30 + 17);
      uint64_t v32 = *((unsigned int *)v30 + 38);
      if (v32)
      {
        LODWORD(v33) = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v34 = v31 + 16 * v33;
        uint64_t v35 = *(llvm::detail::DoubleAPFloat **)v34;
        if (*(llvm::detail::DoubleAPFloat **)v34 == a2)
        {
LABEL_104:
          if (v34 == v31 + 16 * v32) {
            int GlobalSlot = -1;
          }
          else {
            int GlobalSlot = *(_DWORD *)(v34 + 8);
          }
          char v39 = 37;
          goto LABEL_107;
        }
        int v36 = 1;
        while (v35 != (llvm::detail::DoubleAPFloat *)-4096)
        {
          int v37 = v33 + v36++;
          uint64_t v33 = v37 & (v32 - 1);
          uint64_t v35 = *(llvm::detail::DoubleAPFloat **)(v31 + 16 * v33);
          if (v35 == a2)
          {
            uint64_t v34 = v31 + 16 * v33;
            goto LABEL_104;
          }
        }
      }
      uint64_t v34 = v31 + 16 * v32;
      goto LABEL_104;
    }
    sub_1CC4FC73C(this);
  }
}

void sub_1CC4FBB24(llvm::raw_ostream **a1, uint64_t a2)
{
  if (a2) {
    unsigned int v3 = (llvm::Attribute *)(a2 + 48);
  }
  else {
    unsigned int v3 = 0;
  }
  if (a2) {
    uint64_t v4 = a2 + 48 + 8 * *(unsigned int *)(a2 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3 != (llvm::Attribute *)v4)
  {
    for (char i = 1; ; char i = 0)
    {
      if ((i & 1) == 0)
      {
        char v6 = *a1;
        unint64_t v7 = (unsigned char *)*((void *)*a1 + 4);
        if ((unint64_t)v7 >= *((void *)*a1 + 3))
        {
          llvm::raw_ostream::write(v6, 32);
        }
        else
        {
          *((void *)v6 + 4) = v7 + 1;
          *unint64_t v7 = 32;
        }
      }
      uint64_t v8 = *(void *)v3;
      if (!*(void *)v3) {
        break;
      }
      uint64_t v9 = *a1;
      if (*(unsigned char *)(v8 + 8) != 3) {
        goto LABEL_28;
      }
      NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v8 + 12));
      size_t v12 = v10;
      uint64_t v13 = (void *)*((void *)v9 + 4);
      if (v10 <= *((void *)v9 + 3) - (void)v13)
      {
        if (v10)
        {
          memcpy(v13, NameFromAttrKind, v10);
          *((void *)v9 + 4) += v12;
        }
      }
      else
      {
        llvm::raw_ostream::write(v9, NameFromAttrKind, v10);
      }
      if (*(void *)v3)
      {
        unint64_t v14 = *(void *)(*(void *)v3 + 16);
        if (v14)
        {
          int v15 = *a1;
          uint64_t v16 = (unsigned char *)*((void *)*a1 + 4);
          if ((unint64_t)v16 >= *((void *)*a1 + 3))
          {
            llvm::raw_ostream::write(v15, 40);
          }
          else
          {
            *((void *)v15 + 4) = v16 + 1;
            *uint64_t v16 = 40;
          }
          sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 5), v14, *a1);
          uint64_t v17 = *a1;
          uint64_t v18 = (unsigned char *)*((void *)*a1 + 4);
          if ((unint64_t)v18 >= *((void *)*a1 + 3))
          {
            llvm::raw_ostream::write(v17, 41);
          }
          else
          {
            *((void *)v17 + 4) = v18 + 1;
            *uint64_t v18 = 41;
          }
        }
      }
LABEL_36:
      unsigned int v3 = (llvm::Attribute *)((char *)v3 + 8);
      if (v3 == (llvm::Attribute *)v4) {
        return;
      }
    }
    uint64_t v9 = *a1;
LABEL_28:
    llvm::Attribute::getAsString(v3, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    llvm::raw_ostream::write(v9, (const char *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_36;
  }
}

llvm::raw_ostream *sub_1CC4FBD0C(llvm::raw_ostream *this, uint64_t ***a2)
{
  int v2 = (size_t **)a2[6];
  if (!v2) {
    return this;
  }
  uint64_t v4 = this;
  if (*((unsigned char *)a2 + 16) == 3)
  {
    unsigned int v5 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v5 >= *((void *)this + 3))
    {
      this = llvm::raw_ostream::write(this, 44);
    }
    else
    {
      *((void *)this + 4) = v5 + 1;
      *unsigned int v5 = 44;
    }
  }
  char v6 = (_DWORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v6 > 6uLL)
  {
    *(_DWORD *)((char *)v6 + 3) = 1952539757;
    *char v6 = 1836016416;
    *((void *)v4 + 4) += 7;
  }
  else
  {
    this = llvm::raw_ostream::write(v4, " comdat", 7uLL);
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v7 = ***a2;
    uint64_t v8 = *(void *)(v7 + 152);
    uint64_t v9 = *(unsigned int *)(v7 + 168);
    if (v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v11 = (uint64_t ****)(v8 + 16 * v10);
      size_t v12 = *v11;
      if (*v11 == a2)
      {
LABEL_16:
        int v15 = (size_t *)v11[1];
        size_t v17 = *v15;
        this = (llvm::raw_ostream *)(v15 + 2);
        size_t v16 = v17;
        if (v17 == **v2)
        {
          if (!v16) {
            return this;
          }
          this = (llvm::raw_ostream *)memcmp(this, *v2 + 9, v16);
          if (!this) {
            return this;
          }
        }
        goto LABEL_19;
      }
      int v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        int v14 = v10 + v13++;
        uint64_t v10 = v14 & (v9 - 1);
        size_t v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == a2)
        {
          uint64_t v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_16;
        }
      }
    }
    uint64_t v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_16;
  }
  if (!**v2) {
    return this;
  }
LABEL_19:
  uint64_t v18 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v18 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 40);
  }
  else
  {
    *((void *)v4 + 4) = v18 + 1;
    *uint64_t v18 = 40;
  }
  uint64_t v19 = (llvm::raw_ostream *)(*v2 + 9);
  size_t v20 = **v2;
  int v21 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v21 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 36);
  }
  else
  {
    *((void *)v4 + 4) = v21 + 1;
    unsigned char *v21 = 36;
  }
  this = llvm::printLLVMNameWithoutPrefix(v4, v19, v20);
  int v22 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v22 >= *((void *)v4 + 3))
  {
    return llvm::raw_ostream::write(v4, 41);
  }
  else
  {
    *((void *)v4 + 4) = v22 + 1;
    *int v22 = 41;
  }
  return this;
}

void sub_1CC4FBF20(uint64_t a1, llvm::detail::DoubleAPFloat *a2, int a3)
{
  if (a2)
  {
    if (a3)
    {
      sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 40), *(void *)a2, *(llvm::raw_ostream **)a1);
      unsigned int v5 = *(llvm::raw_ostream **)a1;
      char v6 = *(unsigned char **)(*(void *)a1 + 32);
      if ((unint64_t)v6 >= *(void *)(*(void *)a1 + 24))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((void *)v5 + 4) = v6 + 1;
        *char v6 = 32;
      }
    }
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(llvm::raw_ostream **)a1;
    uint64_t v11 = *(void *)(a1 + 8);
    v12[0] = &unk_1F26161D8;
    v12[1] = a1 + 40;
    v12[2] = v9;
    v12[3] = v11;
    sub_1CC4FB368(v10, a2, (uint64_t)v12);
  }
  else
  {
    uint64_t v7 = *(llvm::raw_ostream **)a1;
    uint64_t v8 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v8 > 0xEuLL)
    {
      qmemcpy(v8, "<null operand!>", 15);
      *((void *)v7 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v7, "<null operand!>", 0xFuLL);
    }
  }
}

llvm::raw_ostream *sub_1CC4FC034(llvm::raw_ostream **a1, uint64_t a2)
{
  v31[0] = 0;
  uint64_t result = (llvm::raw_ostream *)sub_1CC4FD9C8((uint64_t)a1[36], *((_DWORD *)a1 + 76), a2, v31);
  uint64_t v4 = v31[0];
  if (result) {
    BOOL v5 = v31[0] == (void)a1[36] + 56 * *((unsigned int *)a1 + 76);
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t result = *a1;
    char v6 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v6 > 0x1AuLL)
    {
      qmemcpy(v6, "\n; uselistorder directives\n", 27);
      *((void *)result + 4) += 27;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(result, "\n; uselistorder directives\n", 0x1BuLL);
    }
    uint64_t v8 = *(uint64_t **)(v4 + 32);
    for (char i = *(uint64_t **)(v4 + 40); v8 != i; v8 += 4)
    {
      uint64_t v9 = *v8;
      uint64_t v10 = *a1;
      uint64_t v11 = *((void *)*a1 + 4);
      unint64_t v12 = *((void *)*a1 + 3) - v11;
      if (*((void *)a1[4] + 2))
      {
        if (v12 > 1)
        {
          *(_WORD *)uint64_t v11 = 8224;
          *((void *)v10 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v10, "  ", 2uLL);
        }
        int v13 = *a1;
        uint64_t v14 = *((void *)*a1 + 4);
        if ((unint64_t)(*((void *)*a1 + 3) - v14) > 0xB)
        {
          *(_DWORD *)(v14 + 8) = 1919247474;
          *(void *)uint64_t v14 = *(void *)"uselistorder";
          *((void *)v13 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v13, "uselistorder", 0xCuLL);
        }
      }
      else
      {
        if (v12 > 0xB)
        {
          *(_DWORD *)(v11 + 8) = 1919247474;
          *(void *)uint64_t v11 = *(void *)"uselistorder";
          *((void *)v10 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v10, "uselistorder", 0xCuLL);
        }
        if (*(unsigned char *)(v9 + 16) == 22)
        {
          int v15 = *a1;
          size_t v16 = (_DWORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v16 > 3uLL)
          {
            *size_t v16 = 543318623;
            *((void *)v15 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(v15, "_bb ", 4uLL);
          }
          sub_1CC4FBF20((uint64_t)a1, *(llvm::detail::DoubleAPFloat **)(v9 + 56), 0);
          size_t v17 = *a1;
          uint64_t v18 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v18 > 1uLL)
          {
            *uint64_t v18 = 8236;
            *((void *)v17 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v17, ", ", 2uLL);
          }
          uint64_t v19 = a1[4];
          size_t v20 = *a1;
          int v21 = a1[1];
          v31[0] = &unk_1F26161D8;
          v31[1] = a1 + 5;
          v31[2] = v19;
          void v31[3] = v21;
          sub_1CC4FB368(v20, (llvm::detail::DoubleAPFloat *)v9, (uint64_t)v31);
          goto LABEL_26;
        }
      }
      int v22 = *a1;
      int v23 = (unsigned char *)*((void *)*a1 + 4);
      if (*((unsigned char **)*a1 + 3) == v23)
      {
        llvm::raw_ostream::write(v22, " ", 1uLL);
      }
      else
      {
        *int v23 = 32;
        ++*((void *)v22 + 4);
      }
      sub_1CC4FBF20((uint64_t)a1, (llvm::detail::DoubleAPFloat *)v9, 1);
LABEL_26:
      uint64_t v24 = *a1;
      uint64_t v25 = (_DWORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v25 > 3uLL)
      {
        *uint64_t v25 = 544940076;
        *((void *)v24 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v24, ", { ", 4uLL);
      }
      sub_1CD098D14(*a1, *(unsigned int *)v8[1], 0, 0, 0);
      unint64_t v26 = (unint64_t)(v8[2] - v8[1]) >> 2;
      if (v26 != 1)
      {
        uint64_t v28 = 1;
        do
        {
          char v29 = *a1;
          __int16 v30 = (_WORD *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v30 > 1uLL)
          {
            *__int16 v30 = 8236;
            *((void *)v29 + 4) += 2;
          }
          else
          {
            char v29 = llvm::raw_ostream::write(v29, ", ", 2uLL);
          }
          sub_1CD098D14(v29, *(unsigned int *)(v8[1] + 4 * v28++), 0, 0, 0);
        }
        while (v26 != v28);
      }
      uint64_t result = *a1;
      uint64_t v27 = *((void *)*a1 + 4);
      if ((unint64_t)(*((void *)*a1 + 3) - v27) > 2)
      {
        *(unsigned char *)(v27 + 2) = 10;
        *(_WORD *)uint64_t v27 = 32032;
        *((void *)result + 4) += 3;
      }
      else
      {
        uint64_t result = llvm::raw_ostream::write(result, " }\n", 3uLL);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC4FC43C(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  if (!a2)
  {
    uint64_t v8 = (void *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v8 > 0xCuLL)
    {
      qmemcpy(v8, "<empty name> ", 13);
      *((void *)this + 4) += 13;
    }
    else
    {
      return llvm::raw_ostream::write(this, "<empty name> ", 0xDuLL);
    }
    return result;
  }
  int v4 = a2;
  BOOL v5 = result;
  int v6 = *(char *)result;
  uint64_t v7 = MEMORY[0x1E4F14390];
  if (v6 < 0)
  {
    uint64_t result = (llvm::raw_ostream *)__maskrune(*(unsigned __int8 *)result, 0x100uLL);
    LOBYTE(v6) = *v5;
    if (!result) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v10 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v10 < *((void *)this + 3))
    {
      *((void *)this + 4) = v10 + 1;
      *uint64_t v10 = v6;
      goto LABEL_18;
    }
    char v11 = v6;
    goto LABEL_17;
  }
  uint64_t result = (llvm::raw_ostream *)(*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *(unsigned __int8 *)result + 60) & 0x100);
  if (result) {
    goto LABEL_14;
  }
LABEL_10:
  if (v6 - 36 <= 0x3B
    && ((1 << (v6 - 36)) & 0x800000000000601) != 0)
  {
    goto LABEL_14;
  }
  uint64_t v25 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v25 >= *((void *)this + 3))
  {
    uint64_t result = llvm::raw_ostream::write(this, 92);
  }
  else
  {
    *((void *)this + 4) = v25 + 1;
    *uint64_t v25 = 92;
  }
  char v26 = a0123456789abcd_6[(char)*v5 >> 4];
  uint64_t v27 = (char *)*((void *)this + 4);
  if ((unint64_t)v27 >= *((void *)this + 3))
  {
    uint64_t result = llvm::raw_ostream::write(this, v26);
  }
  else
  {
    *((void *)this + 4) = v27 + 1;
    *uint64_t v27 = v26;
  }
  char v11 = a0123456789abcd_6[*v5 & 0xF];
  uint64_t v28 = (char *)*((void *)this + 4);
  if ((unint64_t)v28 >= *((void *)this + 3))
  {
LABEL_17:
    uint64_t result = llvm::raw_ostream::write(this, v11);
    goto LABEL_18;
  }
  *((void *)this + 4) = v28 + 1;
  *uint64_t v28 = v11;
LABEL_18:
  int v12 = v4 - 1;
  if (v12)
  {
    int v13 = v5 + 1;
    do
    {
      int v15 = *v13++;
      char v14 = v15;
      __darwin_ct_rune_t v16 = v15;
      unint64_t v17 = v15;
      if (v15 < 0)
      {
        uint64_t result = (llvm::raw_ostream *)__maskrune(v16, 0x500uLL);
        if (result) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t result = (llvm::raw_ostream *)(*(_DWORD *)(v7 + 4 * v17 + 60) & 0x500);
        if (result) {
          goto LABEL_28;
        }
      }
      if ((v16 - 36) > 0x3B || ((1 << (v16 - 36)) & 0x800000000000601) == 0)
      {
        int v21 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v21 >= *((void *)this + 3))
        {
          uint64_t result = llvm::raw_ostream::write(this, 92);
        }
        else
        {
          *((void *)this + 4) = v21 + 1;
          unsigned char *v21 = 92;
        }
        char v22 = a0123456789abcd_6[v17 >> 4];
        int v23 = (char *)*((void *)this + 4);
        if ((unint64_t)v23 >= *((void *)this + 3))
        {
          uint64_t result = llvm::raw_ostream::write(this, v22);
        }
        else
        {
          *((void *)this + 4) = v23 + 1;
          *int v23 = v22;
        }
        char v20 = a0123456789abcd_6[v17 & 0xF];
        uint64_t v24 = (char *)*((void *)this + 4);
        if ((unint64_t)v24 < *((void *)this + 3))
        {
          *((void *)this + 4) = v24 + 1;
          *uint64_t v24 = v20;
          goto LABEL_32;
        }
        goto LABEL_31;
      }
LABEL_28:
      uint64_t v19 = (char *)*((void *)this + 4);
      if ((unint64_t)v19 >= *((void *)this + 3))
      {
        char v20 = v14;
LABEL_31:
        uint64_t result = llvm::raw_ostream::write(this, v20);
        goto LABEL_32;
      }
      *((void *)this + 4) = v19 + 1;
      *uint64_t v19 = v14;
LABEL_32:
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_1CC4FC73C(llvm::raw_ostream *this, unsigned __int8 *a2, uint64_t a3)
{
  int v6 = *a2;
  if (v6 == 32)
  {
    sub_1CC4FCE7C(this, (uint64_t)a2);
  }
  else if (v6 == 6)
  {
    sub_1CC4FCAC8(this, (llvm::DIExpression *)a2);
  }
  else if ((v6 - 4) > 0x1E)
  {
    if (*a2)
    {
      sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), **((void **)a2 + 16), this);
      char v11 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v11 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((void *)this + 4) = v11 + 1;
        *char v11 = 32;
      }
      uint64_t v19 = (llvm::detail::DoubleAPFloat *)*((void *)a2 + 16);
      sub_1CC4FB368(this, v19, a3);
    }
    else
    {
      unint64_t v17 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v17 > 1uLL)
      {
        _WORD *v17 = 8737;
        *((void *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, "!\"", 2uLL);
      }
      llvm::printEscapedString((llvm::raw_ostream *)(*((void *)a2 + 1) + 24), **((void **)a2 + 1), this);
      uint64_t v18 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v18 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 34);
      }
      else
      {
        *((void *)this + 4) = v18 + 1;
        *uint64_t v18 = 34;
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 16);
    if (!v7) {
      operator new();
    }
    int v8 = (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(a3 + 16) + 32))(*(void *)(a3 + 16), a2);
    if (v8 == -1)
    {
      if (*a2 == 5)
      {
        sub_1CC4FCFE4(this, (uint64_t)a2, a3);
      }
      else
      {
        int v15 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v15)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *int v15 = 60;
          ++*((void *)this + 4);
        }
        llvm::write_hex(this, (unint64_t)a2, 3, 0, 0);
        __darwin_ct_rune_t v16 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v16)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *__darwin_ct_rune_t v16 = 62;
          ++*((void *)this + 4);
        }
      }
    }
    else
    {
      int v9 = v8;
      uint64_t v10 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v10 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 33);
      }
      else
      {
        *((void *)this + 4) = v10 + 1;
        *uint64_t v10 = 33;
      }
      unint64_t v12 = v9;
      if (v9 < 0)
      {
        unint64_t v12 = -(uint64_t)v9;
        int v13 = this;
        int v14 = 1;
      }
      else
      {
        int v13 = this;
        int v14 = 0;
      }
      sub_1CD098D14(v13, v12, 0, 0, v14);
    }
    *(void *)(a3 + 16) = v7;
  }
}

uint64_t sub_1CC4FCAC8(llvm::raw_ostream *this, llvm::DIExpression *a2)
{
  int v4 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 0xDuLL)
  {
    qmemcpy(v4, "!DIExpression(", 14);
    *((void *)this + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(this, "!DIExpression(", 0xEuLL);
  }
  uint64_t result = llvm::DIExpression::isValid(a2);
  uint64_t v7 = (unsigned int *)*((void *)a2 + 3);
  int v6 = (unsigned int *)*((void *)a2 + 4);
  uint64_t v8 = (char *)v6 - (char *)v7;
  if (result)
  {
    uint64_t v31 = (unsigned int *)*((void *)a2 + 3);
    if (v6 != v7)
    {
      char v9 = 0;
      uint64_t v10 = (unsigned int *)((char *)v7 + (v8 & 0xFFFFFFFFFFFFFFF8));
      do
      {
        char v11 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)*v7);
        size_t v13 = v12;
        int v14 = (_WORD *)*((void *)this + 4);
        if (v9)
        {
          if (*((void *)this + 3) - (void)v14 > 1uLL)
          {
            *int v14 = 8236;
            int v14 = (_WORD *)(*((void *)this + 4) + 2);
            *((void *)this + 4) = v14;
          }
          else
          {
            llvm::raw_ostream::write(this, ", ", 2uLL);
            int v14 = (_WORD *)*((void *)this + 4);
          }
        }
        if (v13 <= *((void *)this + 3) - (void)v14)
        {
          if (v13)
          {
            memcpy(v14, v11, v13);
            *((void *)this + 4) += v13;
          }
        }
        else
        {
          llvm::raw_ostream::write(this, v11, v13);
        }
        if (*(void *)v7 == 4097)
        {
          char v20 = (_WORD *)*((void *)this + 4);
          if (*((void *)this + 3) - (void)v20 > 1uLL)
          {
            *char v20 = 8236;
            *((void *)this + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(this, ", ", 2uLL);
          }
          sub_1CD098D14(this, *((void *)v7 + 1), 0, 0, 0);
          int v21 = (_WORD *)*((void *)this + 4);
          if (*((void *)this + 3) - (void)v21 > 1uLL)
          {
            _WORD *v21 = 8236;
            char v22 = (void *)(*((void *)this + 4) + 2);
            *((void *)this + 4) = v22;
          }
          else
          {
            llvm::raw_ostream::write(this, ", ", 2uLL);
            char v22 = (void *)*((void *)this + 4);
          }
          uint64_t v24 = llvm::dwarf::AttributeEncodingString((llvm::dwarf *)v7[4]);
          size_t v25 = v23;
          if (v23 <= *((void *)this + 3) - (void)v22)
          {
            if (v23)
            {
              memcpy(v22, v24, v23);
              *((void *)this + 4) += v25;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, v24, v23);
          }
        }
        else
        {
          int Size = llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v31);
          uint64_t v16 = (Size - 1);
          if (Size != 1)
          {
            unint64_t v17 = (unint64_t *)(v7 + 2);
            do
            {
              uint64_t v18 = (_WORD *)*((void *)this + 4);
              if (*((void *)this + 3) - (void)v18 > 1uLL)
              {
                *uint64_t v18 = 8236;
                *((void *)this + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(this, ", ", 2uLL);
              }
              unint64_t v19 = *v17++;
              sub_1CD098D14(this, v19, 0, 0, 0);
              --v16;
            }
            while (v16);
          }
        }
        uint64_t result = llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v31);
        v7 += 2 * result;
        uint64_t v31 = v7;
        char v9 = 1;
      }
      while (v7 != v10);
    }
  }
  else if (v6 != v7)
  {
    char v26 = 0;
    uint64_t v27 = 8 * (v8 >> 3);
    do
    {
      if (v26)
      {
        uint64_t v28 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v28 > 1uLL)
        {
          *uint64_t v28 = 8236;
          *((void *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ", 2uLL);
        }
      }
      unint64_t v29 = *(void *)v7;
      v7 += 2;
      uint64_t result = (uint64_t)sub_1CD098D14(this, v29, 0, 0, 0);
      char v26 = 1;
      v27 -= 8;
    }
    while (v27);
  }
  __int16 v30 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v30)
  {
    return (uint64_t)llvm::raw_ostream::write(this, ")", 1uLL);
  }
  else
  {
    *__int16 v30 = 41;
    ++*((void *)this + 4);
  }
  return result;
}

llvm::raw_ostream *sub_1CC4FCE7C(llvm::raw_ostream *this, uint64_t a2)
{
  unsigned int v3 = this;
  uint64_t v4 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v4) > 0xA)
  {
    *(_DWORD *)(v4 + 7) = 678720361;
    *(void *)uint64_t v4 = *(void *)"!DIArgList(";
    *((void *)this + 4) += 11;
  }
  else
  {
    this = llvm::raw_ostream::write(this, "!DIArgList(", 0xBuLL);
  }
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    char v6 = 0;
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v8 = 8 * v5;
    do
    {
      if (v6)
      {
        char v9 = (_WORD *)*((void *)v3 + 4);
        if (*((void *)v3 + 3) - (void)v9 > 1uLL)
        {
          *char v9 = 8236;
          *((void *)v3 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v3, ", ", 2uLL);
        }
      }
      this = (llvm::raw_ostream *)sub_1CC4FC73C(v3);
      v7 += 8;
      char v6 = 1;
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v10 = (unsigned char *)*((void *)v3 + 4);
  if (*((unsigned char **)v3 + 3) == v10)
  {
    return llvm::raw_ostream::write(v3, ")", 1uLL);
  }
  else
  {
    *uint64_t v10 = 41;
    ++*((void *)v3 + 4);
  }
  return this;
}

llvm::raw_ostream *sub_1CC4FCFE4(llvm::raw_ostream *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v6) > 0xB)
  {
    *(_DWORD *)(v6 + 8) = 678326121;
    *(void *)uint64_t v6 = *(void *)"!DILocation(";
    *((void *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "!DILocation(", 0xCuLL);
  }
  uint64_t v10 = this;
  char v11 = 1;
  size_t v12 = ", ";
  uint64_t v13 = a3;
  sub_1CC4FD184((llvm::raw_ostream *)&v10, "line", 4uLL, *(_DWORD *)(a2 + 4), 0);
  sub_1CC4FD184((llvm::raw_ostream *)&v10, "column", 6uLL, *(unsigned __int16 *)(a2 + 2), 1);
  sub_1CC4FD2E4((llvm::raw_ostream *)&v10, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8)), 0);
  if (*(_DWORD *)(a2 + 8) == 2) {
    uint64_t v7 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v7 = 0;
  }
  sub_1CC4FD2E4((llvm::raw_ostream *)&v10, "inlinedAt", 9uLL, v7, 1);
  uint64_t result = sub_1CC4FD44C((llvm::raw_ostream *)&v10, "isImplicitCode", 0xEuLL, *(unsigned __int8 *)(a2 + 1) >> 7, 256);
  char v9 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v9)
  {
    return llvm::raw_ostream::write(this, ")", 1uLL);
  }
  else
  {
    *char v9 = 41;
    ++*((void *)this + 4);
  }
  return result;
}

llvm::raw_ostream *sub_1CC4FD184(llvm::raw_ostream *result, char *a2, size_t a3, unsigned int a4, char a5)
{
  if (a4 || (a5 & 1) == 0)
  {
    uint64_t v8 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)result + 8))
    {
      *((unsigned char *)result + 8) = 0;
    }
    else
    {
      char v9 = (const void *)*((void *)result + 2);
      if (v9)
      {
        size_t v10 = strlen(*((const char **)result + 2));
        char v11 = (void *)*((void *)v8 + 4);
        if (v10 <= *((void *)v8 + 3) - (void)v11)
        {
          if (v10)
          {
            memcpy(v11, v9, v10);
            *((void *)v8 + 4) += v10;
          }
        }
        else
        {
          llvm::raw_ostream::write(v8, (const char *)v9, v10);
        }
      }
    }
    size_t v12 = (_WORD *)*((void *)v8 + 4);
    if (a3 <= *((void *)v8 + 3) - (void)v12)
    {
      if (a3)
      {
        memcpy(v12, a2, a3);
        size_t v12 = (_WORD *)(*((void *)v8 + 4) + a3);
        *((void *)v8 + 4) = v12;
      }
    }
    else
    {
      llvm::raw_ostream::write(v8, a2, a3);
      size_t v12 = (_WORD *)*((void *)v8 + 4);
    }
    if (*((void *)v8 + 3) - (void)v12 > 1uLL)
    {
      *size_t v12 = 8250;
      *((void *)v8 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v8, ": ", 2uLL);
    }
    return sub_1CD098D14(v8, a4, 0, 0, 0);
  }
  return result;
}

llvm::raw_ostream *sub_1CC4FD2E4(llvm::raw_ostream *result, char *a2, size_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = (uint64_t)result;
  if (a4 || (a5 & 1) == 0)
  {
    char v9 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)result + 8))
    {
      *((unsigned char *)result + 8) = 0;
    }
    else
    {
      size_t v10 = (const void *)*((void *)result + 2);
      if (v10)
      {
        size_t v11 = strlen(*((const char **)result + 2));
        size_t v12 = (void *)*((void *)v9 + 4);
        if (v11 <= *((void *)v9 + 3) - (void)v12)
        {
          if (v11)
          {
            memcpy(v12, v10, v11);
            *((void *)v9 + 4) += v11;
          }
        }
        else
        {
          llvm::raw_ostream::write(v9, (const char *)v10, v11);
        }
      }
    }
    uint64_t v13 = (_WORD *)*((void *)v9 + 4);
    if (a3 <= *((void *)v9 + 3) - (void)v13)
    {
      if (a3)
      {
        memcpy(v13, a2, a3);
        uint64_t v13 = (_WORD *)(*((void *)v9 + 4) + a3);
        *((void *)v9 + 4) = v13;
      }
    }
    else
    {
      llvm::raw_ostream::write(v9, a2, a3);
      uint64_t v13 = (_WORD *)*((void *)v9 + 4);
    }
    if (*((void *)v9 + 3) - (void)v13 > 1uLL)
    {
      *uint64_t v13 = 8250;
      *((void *)v9 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v9, ": ", 2uLL);
    }
    int v14 = *(llvm::raw_ostream **)v8;
    int v15 = *(uint64_t (****)(void, uint64_t))(v8 + 24);
    return sub_1CC4FD5F4(v14, a4, v15);
  }
  return result;
}

llvm::raw_ostream *sub_1CC4FD44C(llvm::raw_ostream *result, char *a2, size_t a3, int a4, __int16 a5)
{
  if ((a5 & 0xFF00) == 0 || a4 != a5)
  {
    uint64_t v8 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)result + 8))
    {
      *((unsigned char *)result + 8) = 0;
    }
    else
    {
      char v9 = (const void *)*((void *)result + 2);
      if (v9)
      {
        size_t v10 = strlen(*((const char **)result + 2));
        size_t v11 = (void *)*((void *)v8 + 4);
        if (v10 <= *((void *)v8 + 3) - (void)v11)
        {
          if (v10)
          {
            memcpy(v11, v9, v10);
            *((void *)v8 + 4) += v10;
          }
        }
        else
        {
          llvm::raw_ostream::write(v8, (const char *)v9, v10);
        }
      }
    }
    size_t v12 = (_WORD *)*((void *)v8 + 4);
    if (a3 <= *((void *)v8 + 3) - (void)v12)
    {
      if (a3)
      {
        memcpy(v12, a2, a3);
        size_t v12 = (_WORD *)(*((void *)v8 + 4) + a3);
        *((void *)v8 + 4) = v12;
      }
    }
    else
    {
      llvm::raw_ostream::write(v8, a2, a3);
      size_t v12 = (_WORD *)*((void *)v8 + 4);
    }
    if (*((void *)v8 + 3) - (void)v12 > 1uLL)
    {
      *size_t v12 = 8250;
      uint64_t v13 = (void *)(*((void *)v8 + 4) + 2);
      *((void *)v8 + 4) = v13;
    }
    else
    {
      llvm::raw_ostream::write(v8, ": ", 2uLL);
      uint64_t v13 = (void *)*((void *)v8 + 4);
    }
    if (a4) {
      int v14 = "true";
    }
    else {
      int v14 = "false";
    }
    if (a4) {
      size_t v15 = 4;
    }
    else {
      size_t v15 = 5;
    }
    if (v15 <= *((void *)v8 + 3) - (void)v13)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(v13, v14, v15);
      *((void *)v8 + 4) += v15;
    }
    else
    {
      return llvm::raw_ostream::write(v8, v14, v15);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC4FD5F4(llvm::raw_ostream *result, uint64_t a2, uint64_t (***a3)(void, uint64_t))
{
  if (a2)
  {
    sub_1CC4FC73C(result);
    uint64_t v5 = **a3;
    return (llvm::raw_ostream *)v5(a3, a2);
  }
  else
  {
    uint64_t v6 = (_DWORD *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v6 > 3uLL)
    {
      *uint64_t v6 = 1819047278;
      *((void *)result + 4) += 4;
    }
    else
    {
      return llvm::raw_ostream::write(result, "null", 4uLL);
    }
  }
  return result;
}

char *sub_1CC4FD6B4(char *result, int a2)
{
  switch(a2)
  {
    case 1:
      result[23] = 20;
      strcpy(result, "available_externally");
      return result;
    case 2:
      result[23] = 8;
      uint64_t v2 = 0x65636E6F6B6E696CLL;
      goto LABEL_10;
    case 3:
      result[23] = 12;
      strcpy(result, "linkonce_odr");
      return result;
    case 4:
      result[23] = 4;
      strcpy(result, "weak");
      return result;
    case 5:
      result[23] = 8;
      uint64_t v2 = 0x72646F5F6B616577;
      goto LABEL_10;
    case 6:
      result[23] = 9;
      strcpy(result, "appending");
      return result;
    case 7:
      result[23] = 8;
      uint64_t v2 = 0x6C616E7265746E69;
      goto LABEL_10;
    case 8:
      result[23] = 7;
      strcpy(result, "private");
      return result;
    case 9:
      result[23] = 11;
      strcpy(result, "extern_weak");
      return result;
    case 10:
      result[23] = 6;
      strcpy(result, "common");
      return result;
    default:
      result[23] = 8;
      uint64_t v2 = 0x6C616E7265747865;
LABEL_10:
      *(void *)uint64_t result = v2;
      result[8] = 0;
      return result;
  }
}

uint64_t sub_1CC4FD890(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 21) {
    operator new();
  }
  if (a1 && v2 >= 0x1C)
  {
    if (*(void *)(a1 + 40)) {
      operator new();
    }
    return 0;
  }
  else
  {
    if (a1 && v2 == 22) {
      operator new();
    }
    if (a1 && v2 == 3 || a1 && v2 == 1 || a1 && v2 == 2) {
      operator new();
    }
    uint64_t result = 0;
    if (a1 && !v2) {
      operator new();
    }
  }
  return result;
}

uint64_t sub_1CC4FD9C8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v7 = a2 - 1;
    unsigned int v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v4 = (void *)(a1 + 56 * v8);
    uint64_t v9 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      size_t v10 = 0;
      int v11 = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          size_t v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        uint64_t v4 = (void *)(a1 + 56 * (v13 & v7));
        uint64_t v9 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      uint64_t v5 = 0;
      if (v10) {
        uint64_t v4 = v10;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t *sub_1CC4FDA64(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v5 = 56 * v2;
    uint64_t v6 = v3 + 8;
    do
    {
      if ((*(void *)(v6 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t v6 = sub_1CD58F044(v6);
      }
      v6 += 56;
      v5 -= 56;
    }
    while (v5);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

void *sub_1CC4FDAD8(void *a1)
{
  *a1 = &unk_1F26160E0;
  sub_1CC3724DC((uint64_t)(a1 + 38));
  MEMORY[0x1D25D9CD0](a1[34], 8);
  sub_1CC3724DC((uint64_t)(a1 + 29));
  MEMORY[0x1D25D9CD0](a1[25], 8);
  MEMORY[0x1D25D9CD0](a1[21], 8);
  MEMORY[0x1D25D9CD0](a1[17], 8);
  MEMORY[0x1D25D9CD0](a1[13], 8);
  uint64_t v2 = (void *)a1[11];
  if (v2 == a1 + 8)
  {
    (*(void (**)(void *))(a1[8] + 32))(a1 + 8);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3 == a1 + 4)
  {
    (*(void (**)(void *))(a1[4] + 32))(a1 + 4);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

_DWORD *sub_1CC4FDC34(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a1;
  uint64_t result = (_DWORD *)sub_1CD5A3DB8(a2, a1);
  if (!result)
  {
    if (a1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
      if (v5 <= 0x14 && v5 >= 4)
      {
        int v6 = *(_DWORD *)(a1 + 20);
        uint64_t v7 = v6 & 0x7FFFFFF;
        if ((v6 & 0x7FFFFFF) != 0)
        {
          if ((v6 & 0x40000000) != 0)
          {
            uint64_t v8 = *(void *)(a1 - 8);
          }
          else
          {
            uint64_t v7 = v7;
            uint64_t v8 = a1 - 32 * v7;
          }
          uint64_t v9 = 32 * v7;
          do
          {
            unsigned int v10 = *(unsigned __int8 *)(*(void *)v8 + 16);
            if (v10 >= 4 && v10 != 22) {
              sub_1CC4FDC34();
            }
            v8 += 32;
            v9 -= 32;
          }
          while (v9);
        }
      }
    }
    int v12 = ((*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4) + 1;
    uint64_t result = (_DWORD *)sub_1CD5A3E34(a2, &v13);
    _DWORD *result = v12;
  }
  return result;
}

uint64_t sub_1CC4FDD0C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
  while (2)
  {
    uint64_t v83 = (uint64_t *)(a2 - 16);
    unint64_t v11 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = v11;
          uint64_t v12 = a2 - v11;
          uint64_t v13 = (uint64_t)(a2 - v11) >> 4;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t result = sub_1CC4FE580(a3, *(void *)(a2 - 16), *(void *)v10);
                if (result)
                {
                  uint64_t v39 = *(void *)v10;
                  *(void *)unint64_t v10 = *(void *)(a2 - 16);
                  *(void *)(a2 - 16) = v39;
                  LODWORD(v39) = *(_DWORD *)(v10 + 8);
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(a2 - 8) = v39;
                }
                break;
              case 3:
                uint64_t result = sub_1CC4FE810(v10, v10 + 16, (uint64_t)v83, a3);
                break;
              case 4:
                uint64_t result = sub_1CC4FEB2C(v10, v10 + 16, v10 + 32, (uint64_t)v83, a3);
                break;
              case 5:
                uint64_t result = sub_1CC4FE6F4(v10, v10 + 16, v10 + 32, v10 + 48, (uint64_t)v83, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 383)
          {
            unint64_t v40 = v10 + 16;
            BOOL v42 = v10 == a2 || v40 == a2;
            if (a5)
            {
              if (!v42)
              {
                uint64_t v43 = 0;
                unint64_t v44 = v10;
                do
                {
                  uint64_t v45 = *(void *)(v44 + 16);
                  uint64_t v46 = *(void *)v44;
                  unint64_t v44 = v40;
                  uint64_t result = sub_1CC4FE580(a3, v45, v46);
                  if (result)
                  {
                    uint64_t v47 = *(void *)v44;
                    int v48 = *(_DWORD *)(v44 + 8);
                    uint64_t v49 = v43;
                    while (1)
                    {
                      uint64_t v50 = v10 + v49;
                      *(void *)(v50 + 16) = *(void *)(v10 + v49);
                      *(_DWORD *)(v50 + 24) = *(_DWORD *)(v10 + v49 + 8);
                      if (!v49) {
                        break;
                      }
                      uint64_t result = sub_1CC4FE580(a3, v47, *(void *)(v50 - 16));
                      v49 -= 16;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = v10 + v49 + 16;
                        goto LABEL_79;
                      }
                    }
                    uint64_t v51 = v10;
LABEL_79:
                    *(void *)uint64_t v51 = v47;
                    *(_DWORD *)(v51 + 8) = v48;
                  }
                  unint64_t v40 = v44 + 16;
                  v43 += 16;
                }
                while (v44 + 16 != a2);
              }
            }
            else if (!v42)
            {
              int v74 = (_DWORD *)(v10 + 24);
              do
              {
                uint64_t v75 = *(void *)(v10 + 16);
                uint64_t v76 = *(void *)v10;
                unint64_t v10 = v40;
                uint64_t result = sub_1CC4FE580(a3, v75, v76);
                if (result)
                {
                  uint64_t v77 = *(void *)v10;
                  int v78 = *(_DWORD *)(v10 + 8);
                  uint64_t v79 = v74;
                  do
                  {
                    uint64_t v80 = v79;
                    *((void *)v79 - 1) = *((void *)v79 - 3);
                    int v81 = *(v79 - 4);
                    v79 -= 4;
                    _DWORD *v80 = v81;
                    uint64_t result = sub_1CC4FE580(a3, v77, *((void *)v80 - 5));
                  }
                  while ((result & 1) != 0);
                  *((void *)v79 - 1) = v77;
                  *uint64_t v79 = v78;
                }
                unint64_t v40 = v10 + 16;
                v74 += 4;
              }
              while (v10 + 16 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != a2)
            {
              unint64_t v82 = a2;
              int64_t v52 = (unint64_t)(v13 - 2) >> 1;
              int64_t v87 = v52;
              do
              {
                int64_t v53 = v52;
                if (v87 >= v52)
                {
                  uint64_t v54 = (2 * v52) | 1;
                  unint64_t v55 = v10 + 16 * v54;
                  if (2 * v52 + 2 < v13 && sub_1CC4FE580(a3, *(void *)v55, *(void *)(v55 + 16)))
                  {
                    v55 += 16;
                    uint64_t v54 = 2 * v53 + 2;
                  }
                  unint64_t v56 = v10 + 16 * v53;
                  uint64_t result = sub_1CC4FE580(a3, *(void *)v55, *(void *)v56);
                  if ((result & 1) == 0)
                  {
                    uint64_t v57 = *(void *)v56;
                    int v84 = *(_DWORD *)(v56 + 8);
                    do
                    {
                      unint64_t v58 = v55;
                      *(void *)unint64_t v56 = *(void *)v55;
                      *(_DWORD *)(v56 + 8) = *(_DWORD *)(v55 + 8);
                      if (v87 < v54) {
                        break;
                      }
                      uint64_t v59 = (2 * v54) | 1;
                      unint64_t v55 = v10 + 16 * v59;
                      if (2 * v54 + 2 < v13 && sub_1CC4FE580(a3, *(void *)v55, *(void *)(v55 + 16)))
                      {
                        v55 += 16;
                        uint64_t v59 = 2 * v54 + 2;
                      }
                      uint64_t result = sub_1CC4FE580(a3, *(void *)v55, v57);
                      unint64_t v56 = v58;
                      uint64_t v54 = v59;
                    }
                    while (!result);
                    *(void *)unint64_t v58 = v57;
                    *(_DWORD *)(v58 + 8) = v84;
                  }
                }
                int64_t v52 = v53 - 1;
              }
              while (v53);
              unint64_t v60 = v82;
              do
              {
                uint64_t v61 = 0;
                uint64_t v88 = *(void *)v10;
                int v85 = *(_DWORD *)(v10 + 8);
                unint64_t v62 = v10;
                do
                {
                  uint64_t v63 = v62 + 16 * v61 + 16;
                  uint64_t v64 = (2 * v61) | 1;
                  uint64_t v65 = 2 * v61 + 2;
                  if (v65 < v13)
                  {
                    uint64_t result = sub_1CC4FE580(a3, *(void *)v63, *(void *)(v62 + 16 * v61 + 32));
                    if (result)
                    {
                      v63 += 16;
                      uint64_t v64 = v65;
                    }
                  }
                  *(void *)unint64_t v62 = *(void *)v63;
                  *(_DWORD *)(v62 + 8) = *(_DWORD *)(v63 + 8);
                  unint64_t v62 = v63;
                  uint64_t v61 = v64;
                }
                while (v64 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                unint64_t v66 = v60 - 16;
                if (v63 == v60 - 16)
                {
                  *(void *)uint64_t v63 = v88;
                  *(_DWORD *)(v63 + 8) = v85;
                }
                else
                {
                  *(void *)uint64_t v63 = *(void *)(v60 - 16);
                  *(_DWORD *)(v63 + 8) = *(_DWORD *)(v60 - 8);
                  *(void *)(v60 - 16) = v88;
                  *(_DWORD *)(v60 - 8) = v85;
                  uint64_t v67 = v63 - v10 + 16;
                  if (v67 >= 17)
                  {
                    unint64_t v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                    unint64_t v69 = v10 + 16 * v68;
                    uint64_t result = sub_1CC4FE580(a3, *(void *)v69, *(void *)v63);
                    if (result)
                    {
                      uint64_t v70 = *(void *)v63;
                      int v71 = *(_DWORD *)(v63 + 8);
                      do
                      {
                        uint64_t v72 = v69;
                        *(void *)uint64_t v63 = *(void *)v69;
                        *(_DWORD *)(v63 + 8) = *(_DWORD *)(v69 + 8);
                        if (!v68) {
                          break;
                        }
                        unint64_t v68 = (v68 - 1) >> 1;
                        unint64_t v69 = v10 + 16 * v68;
                        uint64_t result = sub_1CC4FE580(a3, *(void *)v69, v70);
                        uint64_t v63 = v72;
                      }
                      while ((result & 1) != 0);
                      *(void *)uint64_t v72 = v70;
                      *(_DWORD *)(v72 + 8) = v71;
                    }
                  }
                }
                unint64_t v60 = v66;
              }
              while (v13-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = v10 + 16 * ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            sub_1CC4FE810(v15, v10, (uint64_t)v83, a3);
          }
          else
          {
            sub_1CC4FE810(v10, v15, (uint64_t)v83, a3);
            sub_1CC4FE810(v10 + 16, v15 - 16, a2 - 32, a3);
            sub_1CC4FE810(v10 + 32, v10 + 16 + 16 * v14, a2 - 48, a3);
            sub_1CC4FE810(v15 - 16, v15, v10 + 16 + 16 * v14, a3);
            uint64_t v16 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v15;
            *(void *)uint64_t v15 = v16;
            LODWORD(v16) = *(_DWORD *)(v10 + 8);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v15 + 8);
            *(_DWORD *)(v15 + 8) = v16;
          }
          --a4;
          if ((a5 & 1) != 0 || sub_1CC4FE580(a3, *(void *)(v10 - 16), *(void *)v10)) {
            break;
          }
          uint64_t v30 = *(void *)v10;
          int v31 = *(_DWORD *)(v10 + 8);
          uint64_t result = sub_1CC4FE580(a3, *(void *)v10, *v83);
          if (result)
          {
            unint64_t v11 = v10;
            do
            {
              uint64_t v32 = *(void *)(v11 + 16);
              v11 += 16;
              uint64_t result = sub_1CC4FE580(a3, v30, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            unint64_t v33 = v10 + 16;
            do
            {
              unint64_t v11 = v33;
              if (v33 >= a2) {
                break;
              }
              v33 += 16;
              uint64_t result = sub_1CC4FE580(a3, v30, *(void *)v11);
            }
            while (!result);
          }
          unint64_t v34 = a2;
          if (v11 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              uint64_t v35 = *(void *)(v34 - 16);
              v34 -= 16;
              uint64_t result = sub_1CC4FE580(a3, v30, v35);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v34)
          {
            uint64_t v36 = *(void *)v11;
            *(void *)unint64_t v11 = *(void *)v34;
            *(void *)unint64_t v34 = v36;
            LODWORD(v36) = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v34 + 8);
            *(_DWORD *)(v34 + 8) = v36;
            do
            {
              uint64_t v37 = *(void *)(v11 + 16);
              v11 += 16;
            }
            while (!sub_1CC4FE580(a3, v30, v37));
            do
            {
              uint64_t v38 = *(void *)(v34 - 16);
              v34 -= 16;
              uint64_t result = sub_1CC4FE580(a3, v30, v38);
            }
            while ((result & 1) != 0);
          }
          BOOL v5 = v11 - 16 >= v10;
          BOOL v6 = v11 - 16 == v10;
          if (v11 - 16 != v10)
          {
            *(void *)unint64_t v10 = *(void *)(v11 - 16);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 - 8);
          }
          a5 = 0;
          *(void *)(v11 - 16) = v30;
          *(_DWORD *)(v11 - 8) = v31;
        }
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)v10;
        int v19 = *(_DWORD *)(v10 + 8);
        do
        {
          BOOL v20 = sub_1CC4FE580(a3, *(void *)(v10 + v17 + 16), v18);
          v17 += 16;
        }
        while (v20);
        unint64_t v21 = v10 + v17;
        unint64_t v22 = a2;
        if (v17 == 16)
        {
          unint64_t v22 = a2;
          do
          {
            if (v21 >= v22) {
              break;
            }
            uint64_t v24 = *(void *)(v22 - 16);
            v22 -= 16;
          }
          while (!sub_1CC4FE580(a3, v24, v18));
        }
        else
        {
          do
          {
            uint64_t v23 = *(void *)(v22 - 16);
            v22 -= 16;
          }
          while (!sub_1CC4FE580(a3, v23, v18));
        }
        unint64_t v11 = v10 + v17;
        if (v21 < v22)
        {
          unint64_t v25 = v22;
          do
          {
            uint64_t v26 = *(void *)v11;
            *(void *)unint64_t v11 = *(void *)v25;
            *(void *)unint64_t v25 = v26;
            LODWORD(v26) = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v25 + 8);
            *(_DWORD *)(v25 + 8) = v26;
            do
            {
              uint64_t v27 = *(void *)(v11 + 16);
              v11 += 16;
            }
            while (sub_1CC4FE580(a3, v27, v18));
            do
            {
              uint64_t v28 = *(void *)(v25 - 16);
              v25 -= 16;
            }
            while (!sub_1CC4FE580(a3, v28, v18));
          }
          while (v11 < v25);
        }
        if (v11 - 16 != v10)
        {
          *(void *)unint64_t v10 = *(void *)(v11 - 16);
          *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 - 8);
        }
        *(void *)(v11 - 16) = v18;
        *(_DWORD *)(v11 - 8) = v19;
        if (v21 >= v22) {
          break;
        }
LABEL_31:
        uint64_t result = sub_1CC4FDD0C(v10, v11 - 16, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v29 = sub_1CC4FE93C(v10, v11 - 16, a3);
      uint64_t result = sub_1CC4FE93C(v11, a2, a3);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_31;
      }
    }
    a2 = v11 - 16;
    if (!v29) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CC4FE580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  unsigned int v7 = sub_1CD5A3DB8(*(void *)a1, *(void *)(a2 + 24));
  unsigned int v8 = sub_1CD5A3DB8(*(void *)a1, *(void *)(a3 + 24));
  if (v7 < v8) {
    return **(unsigned char **)(a1 + 8) && v8 <= **(_DWORD **)(a1 + 16);
  }
  if (v8 < v7) {
    return !**(unsigned char **)(a1 + 8) || v7 > **(_DWORD **)(a1 + 16);
  }
  if (**(unsigned char **)(a1 + 8) && v7 <= **(_DWORD **)(a1 + 16))
  {
    uint64_t v16 = *(void *)(a2 + 24);
    int v17 = *(_DWORD *)(v16 + 20);
    if ((v17 & 0x40000000) != 0) {
      uint64_t v18 = *(void *)(v16 - 8);
    }
    else {
      uint64_t v18 = v16 - 32 * (v17 & 0x7FFFFFF);
    }
    unint64_t v19 = (unint64_t)(a2 - v18) >> 5;
    uint64_t v20 = *(void *)(a3 + 24);
    int v21 = *(_DWORD *)(v20 + 20);
    if ((v21 & 0x40000000) != 0) {
      uint64_t v22 = *(void *)(v20 - 8);
    }
    else {
      uint64_t v22 = v20 - 32 * (v21 & 0x7FFFFFF);
    }
    return v19 < ((unint64_t)(a3 - v22) >> 5);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 24);
    int v10 = *(_DWORD *)(v9 + 20);
    if ((v10 & 0x40000000) != 0) {
      uint64_t v11 = *(void *)(v9 - 8);
    }
    else {
      uint64_t v11 = v9 - 32 * (v10 & 0x7FFFFFF);
    }
    unint64_t v12 = (unint64_t)(a2 - v11) >> 5;
    uint64_t v13 = *(void *)(a3 + 24);
    int v14 = *(_DWORD *)(v13 + 20);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v15 = *(void *)(v13 - 8);
    }
    else {
      uint64_t v15 = v13 - 32 * (v14 & 0x7FFFFFF);
    }
    return v12 > ((unint64_t)(a3 - v15) >> 5);
  }
}

BOOL sub_1CC4FE6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1CC4FEB2C(a1, a2, a3, a4, a6);
  BOOL result = sub_1CC4FE580(a6, *(void *)a5, *(void *)a4);
  if (result)
  {
    uint64_t v13 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v13;
    LODWORD(v13) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v13;
    BOOL result = sub_1CC4FE580(a6, *(void *)a4, *(void *)a3);
    if (result)
    {
      uint64_t v14 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v14;
      LODWORD(v14) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v14;
      BOOL result = sub_1CC4FE580(a6, *(void *)a3, *(void *)a2);
      if (result)
      {
        uint64_t v15 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v15;
        BOOL result = sub_1CC4FE580(a6, *(void *)a2, *(void *)a1);
        if (result)
        {
          uint64_t v16 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v16;
          LODWORD(v16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_1CC4FE810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = sub_1CC4FE580(a4, *(void *)a2, *(void *)a1);
  BOOL result = sub_1CC4FE580(a4, *(void *)a3, *(void *)a2);
  if (v8)
  {
    uint64_t v10 = *(void *)a1;
    if (result)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v10;
      uint64_t v11 = (int *)(a3 + 8);
      unint64_t v12 = (int *)(a1 + 8);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v10;
      int v17 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v17;
      BOOL result = sub_1CC4FE580(a4, *(void *)a3, v10);
      if (!result) {
        return result;
      }
      uint64_t v18 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v18;
      uint64_t v11 = (int *)(a3 + 8);
      unint64_t v12 = (int *)(a2 + 8);
    }
    uint64_t v15 = v11;
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    uint64_t v15 = (int *)(a2 + 8);
    int v14 = *(_DWORD *)(a2 + 8);
    *(void *)a3 = v13;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v14;
    BOOL result = sub_1CC4FE580(a4, *(void *)a2, *(void *)a1);
    if (result)
    {
      uint64_t v16 = *(void *)a1;
      *(void *)a1 = *(void *)a2;
      unint64_t v12 = (int *)(a1 + 8);
      *(void *)a2 = v16;
LABEL_10:
      int v19 = *v12;
      *unint64_t v12 = *v15;
      *uint64_t v15 = v19;
    }
  }
  return result;
}

BOOL sub_1CC4FE93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1CC4FE580(a3, *(void *)(a2 - 16), *(void *)a1))
      {
        uint64_t v8 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return 1;
    case 3:
      sub_1CC4FE810(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      sub_1CC4FEB2C(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      sub_1CC4FE6F4(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      uint64_t v9 = (uint64_t *)(a1 + 32);
      sub_1CC4FE810(a1, a1 + 16, a1 + 32, a3);
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_1CC4FE580(a3, *(void *)v10, *v9))
    {
      uint64_t v13 = *(void *)v10;
      int v14 = *(_DWORD *)(v10 + 8);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(void *)(v16 + 48) = *(void *)(a1 + v15 + 32);
        *(_DWORD *)(v16 + 56) = *(_DWORD *)(a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (!sub_1CC4FE580(a3, v13, *(void *)(v16 + 16)))
        {
          uint64_t v17 = a1 + v15 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v13;
      *(_DWORD *)(v17 + 8) = v14;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = (uint64_t *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

BOOL sub_1CC4FEB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1CC4FE810(a1, a2, a3, a5);
  BOOL result = sub_1CC4FE580(a5, *(void *)a4, *(void *)a3);
  if (result)
  {
    uint64_t v11 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    BOOL result = sub_1CC4FE580(a5, *(void *)a3, *(void *)a2);
    if (result)
    {
      uint64_t v12 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      BOOL result = sub_1CC4FE580(a5, *(void *)a2, *(void *)a1);
      if (result)
      {
        uint64_t v13 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v13;
      }
    }
  }
  return result;
}

void sub_1CC4FEC10(uint64_t a1)
{
  if (*(void *)a1)
  {
    llvm::TypeFinder::run((llvm::TypeFinder *)(a1 + 8), *(const llvm::Module **)a1, 0);
    *(void *)a1 = 0;
    uint64_t v2 = *(uint64_t **)(a1 + 104);
    uint64_t v3 = *(uint64_t **)(a1 + 112);
    if (v2 != v3)
    {
      int v4 = 0;
      BOOL v5 = *(uint64_t **)(a1 + 104);
      do
      {
        uint64_t v6 = *v5;
        uint64_t v8 = v6;
        if ((*(unsigned char *)(v6 + 9) & 4) == 0)
        {
          unsigned int v7 = *(void **)(v6 + 24);
          if (v7 && *v7) {
            *v2++ = v6;
          }
          else {
            *((_DWORD *)sub_1CD40EB18(a1 + 136, &v8) + 2) = v4++;
          }
        }
        ++v5;
      }
      while (v5 != v3);
      if (v2 != *(uint64_t **)(a1 + 112)) {
        *(void *)(a1 + 112) = v2;
      }
    }
  }
}

void sub_1CC4FED00(llvm::raw_ostream *this, uint64_t a2, uint64_t a3)
{
  v385[5] = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned char *)(a2 + 1) & 0x7F;
  if (v6 == 2)
  {
    uint64_t v10 = (void *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v10 <= 0xCuLL)
    {
      uint64_t v8 = "<temporary!> ";
      size_t v9 = 13;
      goto LABEL_7;
    }
    qmemcpy(v10, "<temporary!> ", 13);
    uint64_t v321 = *((void *)this + 4) + 13;
LABEL_400:
    *((void *)this + 4) = v321;
    goto LABEL_8;
  }
  if (v6 == 1)
  {
    uint64_t v7 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v7) <= 8)
    {
      uint64_t v8 = "distinct ";
      size_t v9 = 9;
LABEL_7:
      llvm::raw_ostream::write(this, v8, v9);
      goto LABEL_8;
    }
    *(unsigned char *)(v7 + 8) = 32;
    *(void *)uint64_t v7 = *(void *)"distinct ";
    uint64_t v321 = *((void *)this + 4) + 9;
    goto LABEL_400;
  }
LABEL_8:
  switch(*(unsigned char *)a2)
  {
    case 5:
      sub_1CC4FCFE4(this, a2, a3);
      return;
    case 6:
      sub_1CC4FCAC8(this, (llvm::DIExpression *)a2);
      return;
    case 7:
      int v81 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v81 > 0x1BuLL)
      {
        qmemcpy(v81, "!DIGlobalVariableExpression(", 28);
        *((void *)this + 4) += 28;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIGlobalVariableExpression(", 0x1CuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "var", 3uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8)), 1);
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      uint64_t v26 = "expr";
      goto LABEL_321;
    case 8:
      int64_t v52 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v52 > 0xEuLL)
      {
        qmemcpy(v52, "!GenericDINode(", 15);
        *((void *)this + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(this, "!GenericDINode(", 0xFuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC502760((uint64_t)&v383, a2);
      uint64_t v53 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      if (v53)
      {
        uint64_t v54 = *(uint64_t **)(v53 + 8);
        uint64_t v57 = *v54;
        unint64_t v55 = (llvm::raw_ostream *)(v54 + 3);
        uint64_t v56 = v57;
      }
      else
      {
        uint64_t v56 = 0;
        unint64_t v55 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "header", 6uLL, v55, v56, 1);
      if (*(_DWORD *)(a2 + 8) != 1)
      {
        if (!LOBYTE(__s[0]) && __s[1])
        {
          size_t v176 = strlen(__s[1]);
          uint64_t v177 = (void *)*((void *)this + 4);
          if (v176 <= *((void *)this + 3) - (void)v177)
          {
            if (v176)
            {
              memcpy(v177, __s[1], v176);
              *((void *)this + 4) += v176;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, __s[1], v176);
          }
        }
        uint64_t v178 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v178) > 0xA)
        {
          *(_DWORD *)(v178 + 7) = 2065709683;
          *(void *)uint64_t v178 = *(void *)"operands: {";
          *((void *)this + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(this, "operands: {", 0xBuLL);
        }
        uint64_t v179 = *(unsigned int *)(a2 + 8);
        if (a2 + 8 - 8 * v179 != a2)
        {
          char v180 = 0;
          uint64_t v181 = 8 - 8 * v179;
          do
          {
            if (v180)
            {
              uint64_t v182 = (_WORD *)*((void *)this + 4);
              if (*((void *)this + 3) - (void)v182 > 1uLL)
              {
                *uint64_t v182 = 8236;
                *((void *)this + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(this, ", ", 2uLL);
              }
            }
            sub_1CC4FD5F4(this, *(void *)(a2 + v181), (uint64_t (***)(void, uint64_t))a3);
            char v180 = 1;
            v181 += 8;
          }
          while (v181);
        }
        int v183 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v183)
        {
          llvm::raw_ostream::write(this, "}", 1uLL);
        }
        else
        {
          *int v183 = 125;
          ++*((void *)this + 4);
        }
      }
      goto LABEL_520;
    case 9:
      uint64_t v94 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v94) > 0xB)
      {
        *(_DWORD *)(v94 + 8) = 677734254;
        *(void *)uint64_t v94 = *(void *)"!DISubrange(";
        *((void *)this + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DISubrange(", 0xCuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      uint64_t v95 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      if (v95 && *(unsigned char *)v95 == 1)
      {
        uint64_t v96 = *(void *)(v95 + 128);
        unsigned int v97 = *(_DWORD *)(v96 + 32);
        if (v97 > 0x40) {
          unint64_t v98 = **(void **)(v96 + 24);
        }
        else {
          unint64_t v98 = (uint64_t)(*(void *)(v96 + 24) << -(char)v97) >> -(char)v97;
        }
        sub_1CC502A98((uint64_t)&v383, "count", 5uLL, v98);
      }
      else
      {
        sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "count", 5uLL, v95, 1);
      }
      uint64_t v322 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      if (v322 && *(unsigned char *)v322 == 1)
      {
        uint64_t v323 = *(void *)(v322 + 128);
        unsigned int v324 = *(_DWORD *)(v323 + 32);
        if (v324 > 0x40) {
          unint64_t v325 = **(void **)(v323 + 24);
        }
        else {
          unint64_t v325 = (uint64_t)(*(void *)(v323 + 24) << -(char)v324) >> -(char)v324;
        }
        sub_1CC502A98((uint64_t)&v383, "lowerBound", 0xAuLL, v325);
      }
      else
      {
        sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "lowerBound", 0xAuLL, v322, 1);
      }
      uint64_t v326 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v326 && *(unsigned char *)v326 == 1)
      {
        uint64_t v327 = *(void *)(v326 + 128);
        unsigned int v328 = *(_DWORD *)(v327 + 32);
        if (v328 > 0x40) {
          unint64_t v329 = **(void **)(v327 + 24);
        }
        else {
          unint64_t v329 = (uint64_t)(*(void *)(v327 + 24) << -(char)v328) >> -(char)v328;
        }
        sub_1CC502A98((uint64_t)&v383, "upperBound", 0xAuLL, v329);
      }
      else
      {
        sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "upperBound", 0xAuLL, v326, 1);
      }
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
      if (!v28 || *(unsigned char *)v28 != 1)
      {
        uint64_t v26 = "stride";
        size_t v27 = 6;
        goto LABEL_422;
      }
      uint64_t v330 = *(void *)(v28 + 128);
      unsigned int v331 = *(_DWORD *)(v330 + 32);
      if (v331 > 0x40) {
        unint64_t v332 = **(void **)(v330 + 24);
      }
      else {
        unint64_t v332 = (uint64_t)(*(void *)(v330 + 24) << -(char)v331) >> -(char)v331;
      }
      goto LABEL_425;
    case 0xA:
      uint64_t v117 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v117 > 0xDuLL)
      {
        qmemcpy(v117, "!DIEnumerator(", 14);
        *((void *)this + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIEnumerator(", 0xEuLL);
      }
      uint64_t v379 = this;
      char v380 = 1;
      unint64_t v381 = ", ";
      sub_1CC502BD0();
      uint64_t v382 = &qword_1EBCD82D8;
      uint64_t v118 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      if (v118)
      {
        int v119 = *(uint64_t **)(v118 + 8);
        uint64_t v122 = *v119;
        int v120 = (llvm::raw_ostream *)(v119 + 3);
        uint64_t v121 = v122;
      }
      else
      {
        uint64_t v121 = 0;
        int v120 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v379, "name", 4uLL, v120, v121, 0);
      int v247 = *(_DWORD *)(a2 + 4);
      uint64_t v248 = v379;
      if (v380)
      {
        char v380 = 0;
      }
      else if (v381)
      {
        size_t v250 = strlen(v381);
        uint64_t v251 = (void *)*((void *)v379 + 4);
        if (v250 <= *((void *)v379 + 3) - (void)v251)
        {
          if (v250)
          {
            memcpy(v251, v381, v250);
            *((void *)v248 + 4) += v250;
          }
        }
        else
        {
          llvm::raw_ostream::write(v379, v381, v250);
        }
      }
      uint64_t v252 = *((void *)v248 + 4);
      if ((unint64_t)(*((void *)v248 + 3) - v252) > 4)
      {
        *(unsigned char *)(v252 + 4) = 101;
        *(_DWORD *)uint64_t v252 = 1970037110;
        int v253 = (_WORD *)(*((void *)v248 + 4) + 5);
        *((void *)v248 + 4) = v253;
      }
      else
      {
        llvm::raw_ostream::write(v248, "value", 5uLL);
        int v253 = (_WORD *)*((void *)v248 + 4);
      }
      if (*((void *)v248 + 3) - (void)v253 > 1uLL)
      {
        _WORD *v253 = 8250;
        *((void *)v248 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v248, ": ", 2uLL);
      }
      uint64_t v383 = (llvm::raw_ostream *)v385;
      *(_OWORD *)__s = xmmword_1CDB15B30;
      llvm::APInt::toString((unsigned int *)(a2 + 24), &v383, 0xAu, v247 == 0, 0);
      llvm::raw_ostream::write(v248, (const char *)v383, (size_t)__s[0]);
      if (v383 != (llvm::raw_ostream *)v385) {
        free(v383);
      }
      if (!*(_DWORD *)(a2 + 4)) {
        goto LABEL_520;
      }
      uint64_t v162 = "isUnsigned";
      uint64_t v163 = &v379;
      size_t v164 = 10;
      int v161 = 1;
      goto LABEL_291;
    case 0xB:
      unint64_t v82 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v82 > 0xCuLL)
      {
        qmemcpy(v82, "!DIBasicType(", 13);
        *((void *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIBasicType(", 0xDuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      sub_1CC502BD0();
      v385[0] = &qword_1EBCD82D8;
      if (*(_WORD *)(a2 + 2) != 36) {
        sub_1CC502760((uint64_t)&v383, a2);
      }
      uint64_t v83 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v83)
      {
        int v84 = *(uint64_t **)(v83 + 8);
        uint64_t v87 = *v84;
        int v85 = (llvm::raw_ostream *)(v84 + 3);
        uint64_t v86 = v87;
      }
      else
      {
        uint64_t v86 = 0;
        int v85 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v85, v86, 1);
      sub_1CC502C70((llvm::raw_ostream *)&v383, "size", 4uLL, *(void *)(a2 + 32));
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "align", 5uLL, *(_DWORD *)(a2 + 48), 1);
      sub_1CC502DBC((llvm::raw_ostream *)&v383, "encoding", 8uLL, *(unsigned int *)(a2 + 52), (uint64_t (*)(uint64_t))llvm::dwarf::AttributeEncodingString);
      sub_1CC502FA0((uint64_t)&v383, *(unsigned int *)(a2 + 28));
      goto LABEL_520;
    case 0xC:
      uint64_t v129 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v129 > 0xEuLL)
      {
        qmemcpy(v129, "!DIDerivedType(", 15);
        *((void *)this + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIDerivedType(", 0xFuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC502760((uint64_t)&v383, a2);
      uint64_t v130 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v130)
      {
        uint64_t v131 = *(uint64_t **)(v130 + 8);
        uint64_t v134 = *v131;
        uint64_t v132 = (llvm::raw_ostream *)(v131 + 3);
        uint64_t v133 = v134;
      }
      else
      {
        uint64_t v133 = 0;
        uint64_t v132 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v132, v133, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 1);
      uint64_t v254 = a2;
      if (*(unsigned char *)a2 != 15) {
        uint64_t v254 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, v254, 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "baseType", 8uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24), 0);
      sub_1CC502C70((llvm::raw_ostream *)&v383, "size", 4uLL, *(void *)(a2 + 32));
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "align", 5uLL, *(_DWORD *)(a2 + 48), 1);
      sub_1CC502C70((llvm::raw_ostream *)&v383, "offset", 6uLL, *(void *)(a2 + 40));
      sub_1CC502FA0((uint64_t)&v383, *(unsigned int *)(a2 + 28));
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "extraData", 9uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), 1);
      uint64_t v255 = *(void *)(a2 + 52);
      if ((v255 & 0xFF00000000) != 0) {
        sub_1CC4FD184((llvm::raw_ostream *)&v383, "dwarfAddressSpace", 0x11uLL, v255, 0);
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "annotations", 0xBuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40), 1);
      if (*(_WORD *)(a2 + 2) != 17152) {
        goto LABEL_520;
      }
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "ptrAuthKey", 0xAuLL, *(_DWORD *)(a2 + 4) & 0xF, 1);
      if (*(_WORD *)(a2 + 2) != 17152) {
        goto LABEL_520;
      }
      sub_1CC4FD44C((llvm::raw_ostream *)&v383, "ptrAuthIsAddressDiscriminated", 0x1DuLL, (*(_DWORD *)(a2 + 4) >> 4) & 1, 0);
      if (*(_WORD *)(a2 + 2) != 17152) {
        goto LABEL_520;
      }
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "ptrAuthExtraDiscriminator", 0x19uLL, (unsigned __int16)(*(_DWORD *)(a2 + 4) >> 5), 1);
      if (*(_WORD *)(a2 + 2) != 17152) {
        goto LABEL_520;
      }
      sub_1CC4FD44C((llvm::raw_ostream *)&v383, "ptrAuthIsaPointer", 0x11uLL, (*(_DWORD *)(a2 + 4) >> 21) & 1, 0);
      if (*(_WORD *)(a2 + 2) != 17152) {
        goto LABEL_520;
      }
      int v161 = (*(_DWORD *)(a2 + 4) >> 22) & 1;
      uint64_t v162 = "ptrAuthAuthenticatesNullValues";
      uint64_t v163 = &v383;
      size_t v164 = 30;
LABEL_291:
      __int16 v249 = 0;
      goto LABEL_278;
    case 0xD:
      uint64_t v65 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v65) > 0x10)
      {
        *(unsigned char *)(v65 + 16) = 40;
        *(_OWORD *)uint64_t v65 = *(_OWORD *)"!DICompositeType(";
        *((void *)this + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DICompositeType(", 0x11uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC502760((uint64_t)&v383, a2);
      uint64_t v66 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v66)
      {
        uint64_t v67 = *(uint64_t **)(v66 + 8);
        uint64_t v70 = *v67;
        unint64_t v68 = (llvm::raw_ostream *)(v67 + 3);
        uint64_t v69 = v70;
      }
      else
      {
        uint64_t v69 = 0;
        unint64_t v68 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v68, v69, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 1);
      uint64_t v205 = a2;
      if (*(unsigned char *)a2 != 15) {
        uint64_t v205 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, v205, 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "baseType", 8uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24), 1);
      sub_1CC502C70((llvm::raw_ostream *)&v383, "size", 4uLL, *(void *)(a2 + 32));
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "align", 5uLL, *(_DWORD *)(a2 + 48), 1);
      sub_1CC502C70((llvm::raw_ostream *)&v383, "offset", 6uLL, *(void *)(a2 + 40));
      sub_1CC502FA0((uint64_t)&v383, *(unsigned int *)(a2 + 28));
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "elements", 8uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), 1);
      sub_1CC502DBC((llvm::raw_ostream *)&v383, "runtimeLang", 0xBuLL, *(unsigned int *)(a2 + 52), (uint64_t (*)(uint64_t))llvm::dwarf::LanguageString);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "vtableHolder", 0xCuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "templateParams", 0xEuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48), 1);
      uint64_t v206 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
      if (v206)
      {
        unsigned int v207 = *(uint64_t **)(v206 + 8);
        uint64_t v210 = *v207;
        uint64_t v208 = (llvm::raw_ostream *)(v207 + 3);
        uint64_t v209 = v210;
      }
      else
      {
        uint64_t v209 = 0;
        uint64_t v208 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "identifier", 0xAuLL, v208, v209, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "discriminator", 0xDuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 64), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "dataLocation", 0xCuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 72), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "associated", 0xAuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 80), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "allocated", 9uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 88), 1);
      uint64_t v211 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 96);
      if (v211 && *(unsigned char *)v211 == 1 && (uint64_t v212 = *(void *)(v211 + 128)) != 0 && *(unsigned char *)(v212 + 16) == 16)
      {
        unsigned int v213 = *(_DWORD *)(v212 + 32);
        if (v213 > 0x40) {
          unint64_t v214 = **(void **)(v212 + 24);
        }
        else {
          unint64_t v214 = (uint64_t)(*(void *)(v212 + 24) << -(char)v213) >> -(char)v213;
        }
        sub_1CC502A98((uint64_t)&v383, "rank", 4uLL, v214);
      }
      else
      {
        sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "rank", 4uLL, v211, 1);
      }
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 104);
      goto LABEL_260;
    case 0xE:
      uint64_t v135 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v135) > 0x11)
      {
        *(_WORD *)(v135 + 16) = 10341;
        *(_OWORD *)uint64_t v135 = *(_OWORD *)"!DISubroutineType(";
        *((void *)this + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DISubroutineType(", 0x12uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC502FA0((uint64_t)&v383, *(unsigned int *)(a2 + 28));
      uint64_t v136 = (llvm::dwarf *)*(unsigned __int8 *)(a2 + 52);
      if (*(unsigned char *)(a2 + 52))
      {
        uint64_t v341 = v383;
        if (LOBYTE(__s[0]))
        {
          LOBYTE(__s[0]) = 0;
        }
        else if (__s[1])
        {
          size_t v342 = strlen(__s[1]);
          uint64_t v343 = (void *)*((void *)v383 + 4);
          if (v342 <= *((void *)v383 + 3) - (void)v343)
          {
            if (v342)
            {
              memcpy(v343, __s[1], v342);
              *((void *)v341 + 4) += v342;
            }
          }
          else
          {
            llvm::raw_ostream::write(v383, __s[1], v342);
          }
        }
        unint64_t v350 = (_WORD *)*((void *)v341 + 4);
        if (*((void *)v341 + 3) - (void)v350 > 1uLL)
        {
          *unint64_t v350 = 25443;
          int v351 = (_WORD *)(*((void *)v341 + 4) + 2);
          *((void *)v341 + 4) = v351;
        }
        else
        {
          llvm::raw_ostream::write(v341, "cc", 2uLL);
          int v351 = (_WORD *)*((void *)v341 + 4);
        }
        if (*((void *)v341 + 3) - (void)v351 > 1uLL)
        {
          *int v351 = 8250;
          *((void *)v341 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v341, ": ", 2uLL);
        }
        unint64_t v352 = llvm::dwarf::ConventionString(v136);
        unint64_t v354 = *((void *)v341 + 3);
        if (v353)
        {
          unsigned int v355 = v352;
          size_t v356 = v353;
          __int32 v357 = (void *)*((void *)v341 + 4);
          if (v353 <= v354 - (unint64_t)v357)
          {
            memcpy(v357, v355, v353);
            *((void *)v341 + 4) += v356;
          }
          else
          {
            llvm::raw_ostream::write(v341, v355, v353);
          }
        }
        else
        {
          uint64_t v358 = (unsigned char *)*((void *)v341 + 4);
          if ((unint64_t)v358 >= v354)
          {
            llvm::raw_ostream::write(v341, (char)v136);
          }
          else
          {
            *((void *)v341 + 4) = v358 + 1;
            *uint64_t v358 = (_BYTE)v136;
          }
        }
      }
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
      uint64_t v26 = "types";
      goto LABEL_312;
    case 0xF:
      uint64_t v46 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v46 > 7uLL)
      {
        *uint64_t v46 = 0x28656C6946494421;
        *((void *)this + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIFile(", 8uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      sub_1CC502BD0();
      v385[0] = &qword_1EBCD82D8;
      uint64_t v47 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      if (v47)
      {
        int v48 = *(uint64_t **)(v47 + 8);
        uint64_t v51 = *v48;
        uint64_t v49 = (llvm::raw_ostream *)(v48 + 3);
        uint64_t v50 = v51;
      }
      else
      {
        uint64_t v50 = 0;
        uint64_t v49 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "filename", 8uLL, v49, v50, 0);
      uint64_t v165 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      if (v165)
      {
        uint64_t v166 = *(uint64_t **)(v165 + 8);
        uint64_t v169 = *v166;
        uint64_t v167 = (llvm::raw_ostream *)(v166 + 3);
        uint64_t v168 = v169;
      }
      else
      {
        uint64_t v168 = 0;
        uint64_t v167 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "directory", 9uLL, v167, v168, 0);
      if (*(unsigned char *)(a2 + 40))
      {
        uint64_t v170 = *(uint64_t **)(*(void *)(a2 + 32) + 8);
        uint64_t v173 = *v170;
        uint64_t v171 = (llvm::raw_ostream *)(v170 + 3);
        uint64_t v172 = v173;
        uint64_t v174 = *(int *)(a2 + 24);
        uint64_t v175 = v383;
        if (LOBYTE(__s[0]))
        {
          LOBYTE(__s[0]) = 0;
        }
        else if (__s[1])
        {
          size_t v268 = strlen(__s[1]);
          int v269 = (void *)*((void *)v383 + 4);
          if (v268 <= *((void *)v383 + 3) - (void)v269)
          {
            if (v268)
            {
              memcpy(v269, __s[1], v268);
              *((void *)v175 + 4) += v268;
            }
          }
          else
          {
            llvm::raw_ostream::write(v383, __s[1], v268);
          }
        }
        uint64_t v270 = (void *)*((void *)v175 + 4);
        if (*((void *)v175 + 3) - (void)v270 > 0xDuLL)
        {
          qmemcpy(v270, "checksumkind: ", 14);
          uint64_t v271 = (void *)(*((void *)v175 + 4) + 14);
          *((void *)v175 + 4) = v271;
        }
        else
        {
          llvm::raw_ostream::write(v175, "checksumkind: ", 0xEuLL);
          uint64_t v271 = (void *)*((void *)v175 + 4);
        }
        unsigned int v272 = off_1E6830AC8[v174 - 1];
        size_t v273 = strlen(v272);
        size_t v274 = v273;
        if (v273 <= *((void *)v175 + 3) - (void)v271)
        {
          if (v273)
          {
            memcpy(v271, v272, v273);
            *((void *)v175 + 4) += v274;
          }
        }
        else
        {
          llvm::raw_ostream::write(v175, v272, v273);
        }
        sub_1CC5028EC((llvm::raw_ostream *)&v383, "checksum", 8uLL, v171, v172, 0);
      }
      if (*(unsigned char *)(a2 + 56))
      {
        uint64_t v275 = *(uint64_t **)(*(void *)(a2 + 48) + 8);
        uint64_t v278 = *v275;
        unint64_t v276 = (llvm::raw_ostream *)(v275 + 3);
        uint64_t v277 = v278;
      }
      else
      {
        uint64_t v277 = 0;
        unint64_t v276 = 0;
      }
      BOOL v279 = "source";
      uint64_t v280 = &v383;
      size_t v281 = 6;
      goto LABEL_519;
    case 0x10:
      unint64_t v58 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v58 > 0xEuLL)
      {
        qmemcpy(v58, "!DICompileUnit(", 15);
        *((void *)this + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DICompileUnit(", 0xFuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC502DBC((llvm::raw_ostream *)&v383, "language", 8uLL, *(unsigned int *)(a2 + 24), (uint64_t (*)(uint64_t))llvm::dwarf::LanguageString);
      uint64_t v59 = a2;
      if (*(unsigned char *)a2 != 15) {
        uint64_t v59 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, v59, 0);
      uint64_t v60 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      if (v60)
      {
        uint64_t v61 = *(uint64_t **)(v60 + 8);
        uint64_t v64 = *v61;
        unint64_t v62 = (llvm::raw_ostream *)(v61 + 3);
        uint64_t v63 = v64;
      }
      else
      {
        uint64_t v63 = 0;
        unint64_t v62 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "producer", 8uLL, v62, v63, 1);
      sub_1CC4FD44C((llvm::raw_ostream *)&v383, "isOptimized", 0xBuLL, *(unsigned __int8 *)(a2 + 28), 0);
      uint64_t v184 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v184)
      {
        uint64_t v185 = *(uint64_t **)(v184 + 8);
        uint64_t v188 = *v185;
        uint64_t v186 = (llvm::raw_ostream *)(v185 + 3);
        uint64_t v187 = v188;
      }
      else
      {
        uint64_t v187 = 0;
        uint64_t v186 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "flags", 5uLL, v186, v187, 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "runtimeVersion", 0xEuLL, *(_DWORD *)(a2 + 32), 0);
      uint64_t v189 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
      if (v189)
      {
        uint64_t v190 = *(uint64_t **)(v189 + 8);
        uint64_t v193 = *v190;
        uint64_t v191 = (llvm::raw_ostream *)(v190 + 3);
        uint64_t v192 = v193;
      }
      else
      {
        uint64_t v192 = 0;
        uint64_t v191 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "splitDebugFilename", 0x12uLL, v191, v192, 1);
      uint64_t v194 = *(int *)(a2 + 36);
      unint64_t v195 = v383;
      if (LOBYTE(__s[0]))
      {
        LOBYTE(__s[0]) = 0;
      }
      else if (__s[1])
      {
        size_t v196 = strlen(__s[1]);
        uint64_t v197 = (void *)*((void *)v383 + 4);
        if (v196 <= *((void *)v383 + 3) - (void)v197)
        {
          if (v196)
          {
            memcpy(v197, __s[1], v196);
            *((void *)v195 + 4) += v196;
          }
        }
        else
        {
          llvm::raw_ostream::write(v383, __s[1], v196);
        }
      }
      uint64_t v198 = *((void *)v195 + 4);
      if ((unint64_t)(*((void *)v195 + 3) - v198) > 0xB)
      {
        *(_DWORD *)(v198 + 8) = 1684957515;
        *(void *)uint64_t v198 = *(void *)"emissionKind";
        unint64_t v199 = (_WORD *)(*((void *)v195 + 4) + 12);
        *((void *)v195 + 4) = v199;
      }
      else
      {
        llvm::raw_ostream::write(v195, "emissionKind", 0xCuLL);
        unint64_t v199 = (_WORD *)*((void *)v195 + 4);
      }
      if (*((void *)v195 + 3) - (void)v199 > 1uLL)
      {
        *unint64_t v199 = 8250;
        *((void *)v195 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v195, ": ", 2uLL);
      }
      if (v194 <= 3)
      {
        int v200 = off_1E68307B8[v194];
        size_t v201 = strlen(v200);
        uint64_t v202 = (void *)*((void *)v195 + 4);
        if (v201 <= *((void *)v195 + 3) - (void)v202)
        {
          if (v201)
          {
            memcpy(v202, v200, v201);
            *((void *)v195 + 4) += v201;
          }
        }
        else
        {
          llvm::raw_ostream::write(v195, v200, v201);
        }
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "enums", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "retainedTypes", 0xDuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "globals", 7uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "imports", 7uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "macros", 6uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 64), 1);
      sub_1CC502C70((llvm::raw_ostream *)&v383, "dwoId", 5uLL, *(void *)(a2 + 40));
      sub_1CC4FD44C((llvm::raw_ostream *)&v383, "splitDebugInlining", 0x12uLL, *(unsigned __int8 *)(a2 + 48), 257);
      sub_1CC4FD44C((llvm::raw_ostream *)&v383, "debugInfoForProfiling", 0x15uLL, *(unsigned __int8 *)(a2 + 49), 256);
      int v203 = *(_DWORD *)(a2 + 52);
      if (v203)
      {
        uint64_t v204 = v383;
        if (LOBYTE(__s[0]))
        {
          LOBYTE(__s[0]) = 0;
        }
        else if (__s[1])
        {
          size_t v282 = strlen(__s[1]);
          unint64_t v283 = (void *)*((void *)v383 + 4);
          if (v282 <= *((void *)v383 + 3) - (void)v283)
          {
            if (v282)
            {
              memcpy(v283, __s[1], v282);
              *((void *)v204 + 4) += v282;
            }
          }
          else
          {
            llvm::raw_ostream::write(v383, __s[1], v282);
          }
        }
        unint64_t v284 = (void *)*((void *)v204 + 4);
        if (*((void *)v204 + 3) - (void)v284 > 0xCuLL)
        {
          qmemcpy(v284, "nameTableKind", 13);
          uint64_t v285 = (_WORD *)(*((void *)v204 + 4) + 13);
          *((void *)v204 + 4) = v285;
        }
        else
        {
          llvm::raw_ostream::write(v204, "nameTableKind", 0xDuLL);
          uint64_t v285 = (_WORD *)*((void *)v204 + 4);
        }
        if (*((void *)v204 + 3) - (void)v285 > 1uLL)
        {
          *uint64_t v285 = 8250;
          *((void *)v204 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v204, ": ", 2uLL);
        }
        int v286 = "GNU";
        if (v203 != 1) {
          int v286 = 0;
        }
        if (v203 == 2) {
          uint64_t v287 = "None";
        }
        else {
          uint64_t v287 = v286;
        }
        if (v287)
        {
          size_t v288 = strlen(v287);
          unint64_t v289 = (void *)*((void *)v204 + 4);
          if (v288 <= *((void *)v204 + 3) - (void)v289)
          {
            if (v288)
            {
              memcpy(v289, v287, v288);
              *((void *)v204 + 4) += v288;
            }
          }
          else
          {
            llvm::raw_ostream::write(v204, v287, v288);
          }
        }
      }
      sub_1CC4FD44C((llvm::raw_ostream *)&v383, "rangesBaseAddress", 0x11uLL, *(unsigned __int8 *)(a2 + 56), 256);
      uint64_t v290 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 72);
      if (v290)
      {
        uint64_t v291 = *(uint64_t **)(v290 + 8);
        uint64_t v294 = *v291;
        uint64_t v292 = (llvm::raw_ostream *)(v291 + 3);
        uint64_t v293 = v294;
      }
      else
      {
        uint64_t v293 = 0;
        uint64_t v292 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "sysroot", 7uLL, v292, v293, 1);
      uint64_t v295 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 80);
      if (v295)
      {
        unint64_t v296 = *(uint64_t **)(v295 + 8);
        uint64_t v297 = *v296;
        unint64_t v276 = (llvm::raw_ostream *)(v296 + 3);
        uint64_t v277 = v297;
      }
      else
      {
        uint64_t v277 = 0;
        unint64_t v276 = 0;
      }
      BOOL v279 = "sdk";
      uint64_t v280 = &v383;
      size_t v281 = 3;
      goto LABEL_519;
    case 0x11:
      uint64_t v111 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v111 > 0xDuLL)
      {
        qmemcpy(v111, "!DISubprogram(", 14);
        *((void *)this + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DISubprogram(", 0xEuLL);
      }
      uint64_t v379 = this;
      char v380 = 1;
      unint64_t v381 = ", ";
      uint64_t v382 = (uint64_t *)a3;
      uint64_t v112 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v112)
      {
        uint64_t v113 = *(uint64_t **)(v112 + 8);
        uint64_t v116 = *v113;
        uint64_t v114 = (llvm::raw_ostream *)(v113 + 3);
        uint64_t v115 = v116;
      }
      else
      {
        uint64_t v115 = 0;
        uint64_t v114 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v379, "name", 4uLL, v114, v115, 1);
      uint64_t v236 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
      if (v236)
      {
        BOOL v237 = *(uint64_t **)(v236 + 8);
        uint64_t v240 = *v237;
        int v238 = (llvm::raw_ostream *)(v237 + 3);
        uint64_t v239 = v240;
      }
      else
      {
        uint64_t v239 = 0;
        int v238 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v379, "linkageName", 0xBuLL, v238, v239, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 0);
      uint64_t v241 = a2;
      if (*(unsigned char *)a2 != 15) {
        uint64_t v241 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "file", 4uLL, v241, 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v379, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "type", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v379, "scopeLine", 9uLL, *(_DWORD *)(a2 + 28), 1);
      uint64_t v242 = *(unsigned int *)(a2 + 8);
      if (v242 < 9) {
        uint64_t v243 = 0;
      }
      else {
        uint64_t v243 = *(void *)(a2 - 8 * v242 + 64);
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "containingType", 0xEuLL, v243, 1);
      unsigned int v244 = *(_DWORD *)(a2 + 32);
      if (*(_DWORD *)(a2 + 44) & 3 | v244) {
        sub_1CC4FD184((llvm::raw_ostream *)&v379, "virtualIndex", 0xCuLL, v244, 0);
      }
      unint64_t v245 = *(int *)(a2 + 36);
      if (!v245) {
        goto LABEL_369;
      }
      uint64_t v246 = v379;
      if (v380)
      {
        char v380 = 0;
      }
      else if (v381)
      {
        size_t v298 = strlen(v381);
        uint64_t v299 = (void *)*((void *)v379 + 4);
        if (v298 <= *((void *)v379 + 3) - (void)v299)
        {
          if (v298)
          {
            memcpy(v299, v381, v298);
            *((void *)v246 + 4) += v298;
          }
        }
        else
        {
          llvm::raw_ostream::write(v379, v381, v298);
        }
      }
      uint64_t v300 = (void *)*((void *)v246 + 4);
      if (*((void *)v246 + 3) - (void)v300 > 0xDuLL)
      {
        qmemcpy(v300, "thisAdjustment", 14);
        uint64_t v301 = (_WORD *)(*((void *)v246 + 4) + 14);
        *((void *)v246 + 4) = v301;
      }
      else
      {
        llvm::raw_ostream::write(v246, "thisAdjustment", 0xEuLL);
        uint64_t v301 = (_WORD *)*((void *)v246 + 4);
      }
      if (*((void *)v246 + 3) - (void)v301 > 1uLL)
      {
        *uint64_t v301 = 8250;
        *((void *)v246 + 4) += 2;
        if ((v245 & 0x80000000) == 0) {
          goto LABEL_367;
        }
      }
      else
      {
        llvm::raw_ostream::write(v246, ": ", 2uLL);
        if ((v245 & 0x80000000) == 0)
        {
LABEL_367:
          uint64_t v302 = v246;
          unint64_t v303 = v245;
          int v304 = 0;
          goto LABEL_368;
        }
      }
      unint64_t v303 = -(uint64_t)v245;
      uint64_t v302 = v246;
      int v304 = 1;
LABEL_368:
      sub_1CD098D14(v302, v303, 0, 0, v304);
LABEL_369:
      sub_1CC502FA0((uint64_t)&v379, *(unsigned int *)(a2 + 40));
      uint64_t v305 = *(unsigned int *)(a2 + 44);
      uint64_t v306 = v379;
      if (v380)
      {
        char v380 = 0;
      }
      else if (v381)
      {
        size_t v307 = strlen(v381);
        unint64_t v308 = (void *)*((void *)v379 + 4);
        if (v307 <= *((void *)v379 + 3) - (void)v308)
        {
          if (v307)
          {
            memcpy(v308, v381, v307);
            *((void *)v306 + 4) += v307;
          }
        }
        else
        {
          llvm::raw_ostream::write(v379, v381, v307);
        }
      }
      uint64_t v309 = (_DWORD *)*((void *)v306 + 4);
      if (*((void *)v306 + 3) - (void)v309 > 6uLL)
      {
        *(_DWORD *)((char *)v309 + 3) = 1936154988;
        _DWORD *v309 = 1816555635;
        uint64_t v310 = (_WORD *)(*((void *)v306 + 4) + 7);
        *((void *)v306 + 4) = v310;
      }
      else
      {
        llvm::raw_ostream::write(v306, "spFlags", 7uLL);
        uint64_t v310 = (_WORD *)*((void *)v306 + 4);
      }
      if (*((void *)v306 + 3) - (void)v310 > 1uLL)
      {
        _WORD *v310 = 8250;
        *((void *)v306 + 4) += 2;
        if (v305)
        {
LABEL_379:
          uint64_t v383 = (llvm::raw_ostream *)&__s[1];
          __s[0] = (char *)0x800000000;
          unsigned int v311 = llvm::DISubprogram::splitFlags(v305, (uint64_t)&v383);
          unsigned int v312 = v311;
          if (LODWORD(__s[0]))
          {
            unsigned int v378 = v311;
            char v313 = 0;
            uint64_t v314 = (int *)v383;
            uint64_t v315 = 4 * LODWORD(__s[0]);
            do
            {
              FlagString = llvm::DISubprogram::getFlagString(*v314);
              size_t v318 = v317;
              int v319 = (unsigned char *)*((void *)v306 + 4);
              if (v313)
              {
                if (*((void *)v306 + 3) - (void)v319 > 2uLL)
                {
                  v319[2] = 32;
                  *(_WORD *)int v319 = 31776;
                  int v319 = (unsigned char *)(*((void *)v306 + 4) + 3);
                  *((void *)v306 + 4) = v319;
                }
                else
                {
                  llvm::raw_ostream::write(v306, " | ", 3uLL);
                  int v319 = (unsigned char *)*((void *)v306 + 4);
                }
              }
              if (v318 <= *((void *)v306 + 3) - (void)v319)
              {
                if (v318)
                {
                  memcpy(v319, FlagString, v318);
                  *((void *)v306 + 4) += v318;
                }
              }
              else
              {
                llvm::raw_ostream::write(v306, FlagString, v318);
              }
              ++v314;
              char v313 = 1;
              v315 -= 4;
            }
            while (v315);
            unsigned int v312 = v378;
            if (!v378 && LODWORD(__s[0]))
            {
LABEL_396:
              if (v383 != (llvm::raw_ostream *)&__s[1]) {
                free(v383);
              }
LABEL_505:
              sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "unit", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40), 1);
              uint64_t v368 = *(unsigned int *)(a2 + 8);
              if (v368 < 0xA) {
                uint64_t v369 = 0;
              }
              else {
                uint64_t v369 = *(void *)(a2 - 8 * v368 + 72);
              }
              sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "templateParams", 0xEuLL, v369, 1);
              sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "declaration", 0xBuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48), 1);
              sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "retainedNodes", 0xDuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56), 1);
              uint64_t v370 = *(unsigned int *)(a2 + 8);
              if (v370 < 0xB) {
                uint64_t v371 = 0;
              }
              else {
                uint64_t v371 = *(void *)(a2 - 8 * v370 + 80);
              }
              sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "thrownTypes", 0xBuLL, v371, 1);
              uint64_t v372 = *(unsigned int *)(a2 + 8);
              if (v372 < 0xC) {
                uint64_t v373 = 0;
              }
              else {
                uint64_t v373 = *(void *)(a2 - 8 * v372 + 88);
              }
              sub_1CC4FD2E4((llvm::raw_ostream *)&v379, "annotations", 0xBuLL, v373, 1);
              uint64_t v374 = *(unsigned int *)(a2 + 8);
              if (v374 >= 0xD && (uint64_t v375 = *(void *)(a2 - 8 * v374 + 96)) != 0)
              {
                unint64_t v376 = *(uint64_t **)(v375 + 8);
                uint64_t v377 = *v376;
                unint64_t v276 = (llvm::raw_ostream *)(v376 + 3);
                uint64_t v277 = v377;
              }
              else
              {
                unint64_t v276 = 0;
                uint64_t v277 = 0;
              }
              BOOL v279 = "targetFuncName";
              uint64_t v280 = &v379;
              size_t v281 = 14;
LABEL_519:
              sub_1CC5028EC((llvm::raw_ostream *)v280, v279, v281, v276, v277, 1);
LABEL_520:
              uint64_t v20 = (char *)*((void *)this + 4);
              if (*((char **)this + 3) == v20)
              {
                llvm::raw_ostream::write(this, ")", 1uLL);
                return;
              }
              char v367 = 41;
              goto LABEL_523;
            }
            uint64_t v320 = *((void *)v306 + 4);
            if ((unint64_t)(*((void *)v306 + 3) - v320) > 2)
            {
              *(unsigned char *)(v320 + 2) = 32;
              *(_WORD *)uint64_t v320 = 31776;
              *((void *)v306 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v306, " | ", 3uLL);
            }
          }
          sub_1CD098D14(v306, v312, 0, 0, 0);
          goto LABEL_396;
        }
      }
      else
      {
        llvm::raw_ostream::write(v306, ": ", 2uLL);
        if (v305) {
          goto LABEL_379;
        }
      }
      sub_1CD098FF4(v306, 0, 0, 0, 0);
      goto LABEL_505;
    case 0x12:
      uint64_t v35 = (_OWORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v35 > 0xFuLL)
      {
        *uint64_t v35 = *(_OWORD *)"!DILexicalBlock(";
        *((void *)this + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DILexicalBlock(", 0x10uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 0);
      uint64_t v36 = a2;
      if (*(unsigned char *)a2 != 15) {
        uint64_t v36 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, v36, 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      unsigned int v37 = *(unsigned __int16 *)(a2 + 28);
      uint64_t v38 = "column";
      size_t v39 = 6;
      goto LABEL_308;
    case 0x13:
      uint64_t v78 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v78) > 0x13)
      {
        *(_DWORD *)(v78 + 16) = 677735529;
        *(_OWORD *)uint64_t v78 = *(_OWORD *)"!DILexicalBlockFile(";
        *((void *)this + 4) += 20;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DILexicalBlockFile(", 0x14uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 0);
      uint64_t v79 = a2;
      if (*(unsigned char *)a2 != 15) {
        uint64_t v79 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, v79, 1);
      unsigned int v37 = *(_DWORD *)(a2 + 24);
      uint64_t v38 = "discriminator";
      size_t v39 = 13;
      char v80 = 0;
      goto LABEL_309;
    case 0x14:
      BOOL v29 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v29 > 0xCuLL)
      {
        qmemcpy(v29, "!DINamespace(", 13);
        *((void *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DINamespace(", 0xDuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      uint64_t v30 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v30)
      {
        int v31 = *(uint64_t **)(v30 + 8);
        uint64_t v34 = *v31;
        uint64_t v32 = (llvm::raw_ostream *)(v31 + 3);
        uint64_t v33 = v34;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v32 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v32, v33, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 0);
      int v161 = *(unsigned char *)(a2 + 24) & 1;
      uint64_t v162 = "exportSymbols";
      uint64_t v163 = &v383;
      size_t v164 = 13;
      goto LABEL_277;
    case 0x15:
      uint64_t v88 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v88) > 9)
      {
        *(_WORD *)(v88 + 8) = 10341;
        *(void *)uint64_t v88 = *(void *)"!DIModule(";
        *((void *)this + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIModule(", 0xAuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 0);
      uint64_t v89 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v89)
      {
        uint64_t v90 = *(uint64_t **)(v89 + 8);
        uint64_t v93 = *v90;
        int v91 = (llvm::raw_ostream *)(v90 + 3);
        uint64_t v92 = v93;
      }
      else
      {
        uint64_t v92 = 0;
        int v91 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v91, v92, 1);
      uint64_t v215 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
      if (v215)
      {
        uint64_t v216 = *(uint64_t **)(v215 + 8);
        uint64_t v219 = *v216;
        uint64_t v217 = (llvm::raw_ostream *)(v216 + 3);
        uint64_t v218 = v219;
      }
      else
      {
        uint64_t v218 = 0;
        uint64_t v217 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "configMacros", 0xCuLL, v217, v218, 1);
      uint64_t v220 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
      if (v220)
      {
        uint64_t v221 = *(uint64_t **)(v220 + 8);
        uint64_t v224 = *v221;
        uint64_t v222 = (llvm::raw_ostream *)(v221 + 3);
        uint64_t v223 = v224;
      }
      else
      {
        uint64_t v223 = 0;
        uint64_t v222 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "includePath", 0xBuLL, v222, v223, 1);
      uint64_t v225 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
      if (v225)
      {
        uint64_t v226 = *(uint64_t **)(v225 + 8);
        uint64_t v229 = *v226;
        int v227 = (llvm::raw_ostream *)(v226 + 3);
        uint64_t v228 = v229;
      }
      else
      {
        uint64_t v228 = 0;
        int v227 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "apinotes", 8uLL, v227, v228, 1);
      uint64_t v230 = a2;
      if (*(unsigned char *)a2 != 15) {
        uint64_t v230 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      }
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, v230, 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      int v161 = *(unsigned __int8 *)(a2 + 28);
      uint64_t v162 = "isDecl";
      uint64_t v163 = &v383;
      size_t v164 = 6;
      goto LABEL_277;
    case 0x16:
      char v123 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v123 > 0x18uLL)
      {
        qmemcpy(v123, "!DITemplateTypeParameter(", 25);
        *((void *)this + 4) += 25;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DITemplateTypeParameter(", 0x19uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      uint64_t v124 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      if (v124)
      {
        uint64_t v125 = *(uint64_t **)(v124 + 8);
        uint64_t v128 = *v125;
        int v126 = (llvm::raw_ostream *)(v125 + 3);
        uint64_t v127 = v128;
      }
      else
      {
        uint64_t v127 = 0;
        int v126 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v126, v127, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "type", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 0);
      int v161 = *(unsigned __int8 *)(a2 + 24);
      uint64_t v162 = "defaulted";
      uint64_t v163 = &v383;
      size_t v164 = 9;
LABEL_277:
      __int16 v249 = 256;
LABEL_278:
      sub_1CC4FD44C((llvm::raw_ostream *)v163, v162, v164, v161, v249);
      goto LABEL_520;
    case 0x17:
      double v149 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v149 > 0x19uLL)
      {
        qmemcpy(v149, "!DITemplateValueParameter(", 26);
        *((void *)this + 4) += 26;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DITemplateValueParameter(", 0x1AuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      if (*(_WORD *)(a2 + 2) != 48) {
        sub_1CC502760((uint64_t)&v383, a2);
      }
      uint64_t v150 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      if (v150)
      {
        unsigned int v151 = *(uint64_t **)(v150 + 8);
        uint64_t v154 = *v151;
        char v152 = (llvm::raw_ostream *)(v151 + 3);
        uint64_t v153 = v154;
      }
      else
      {
        uint64_t v153 = 0;
        char v152 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v152, v153, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "type", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 1);
      sub_1CC4FD44C((llvm::raw_ostream *)&v383, "defaulted", 9uLL, *(unsigned __int8 *)(a2 + 24), 256);
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      uint64_t v26 = "value";
LABEL_312:
      size_t v27 = 5;
      char v257 = 0;
      goto LABEL_423;
    case 0x18:
      uint64_t v99 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v99) > 0x11)
      {
        *(_WORD *)(v99 + 16) = 10341;
        *(_OWORD *)uint64_t v99 = *(_OWORD *)"!DIGlobalVariable(";
        *((void *)this + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIGlobalVariable(", 0x12uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      uint64_t v100 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      if (v100)
      {
        unsigned int v101 = *(uint64_t **)(v100 + 8);
        uint64_t v104 = *v101;
        uint64_t v102 = (llvm::raw_ostream *)(v101 + 3);
        uint64_t v103 = v104;
      }
      else
      {
        uint64_t v103 = 0;
        uint64_t v102 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v102, v103, 1);
      uint64_t v231 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
      if (v231)
      {
        size_t v232 = *(uint64_t **)(v231 + 8);
        uint64_t v235 = *v232;
        int v233 = (llvm::raw_ostream *)(v232 + 3);
        uint64_t v234 = v235;
      }
      else
      {
        uint64_t v234 = 0;
        int v233 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "linkageName", 0xBuLL, v233, v234, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8)), 0);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16), 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "type", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24), 1);
      sub_1CC4FD44C((llvm::raw_ostream *)&v383, "isLocal", 7uLL, *(unsigned __int8 *)(a2 + 32), 0);
      sub_1CC4FD44C((llvm::raw_ostream *)&v383, "isDefinition", 0xCuLL, *(unsigned __int8 *)(a2 + 33), 0);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "declaration", 0xBuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "templateParams", 0xEuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56), 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "align", 5uLL, *(_DWORD *)(a2 + 28), 1);
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 64);
      goto LABEL_260;
    case 0x19:
      uint64_t v105 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v105) > 0x10)
      {
        *(unsigned char *)(v105 + 16) = 40;
        *(_OWORD *)uint64_t v105 = *(_OWORD *)"!DILocalVariable(";
        *((void *)this + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DILocalVariable(", 0x11uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      uint64_t v106 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      if (v106)
      {
        uint64_t v107 = *(uint64_t **)(v106 + 8);
        uint64_t v110 = *v107;
        size_t v108 = (llvm::raw_ostream *)(v107 + 3);
        uint64_t v109 = v110;
      }
      else
      {
        uint64_t v109 = 0;
        size_t v108 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v108, v109, 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "arg", 3uLL, *(unsigned __int16 *)(a2 + 32), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8)), 0);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16), 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "type", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24), 1);
      sub_1CC502FA0((uint64_t)&v383, *(unsigned int *)(a2 + 36));
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "align", 5uLL, *(_DWORD *)(a2 + 28), 1);
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
LABEL_260:
      uint64_t v26 = "annotations";
      size_t v27 = 11;
      goto LABEL_422;
    case 0x1A:
      uint64_t v143 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v143) > 8)
      {
        *(unsigned char *)(v143 + 8) = 40;
        *(void *)uint64_t v143 = *(void *)"!DILabel(";
        *((void *)this + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DILabel(", 9uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8)), 0);
      uint64_t v144 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      if (v144)
      {
        unint64_t v145 = *(uint64_t **)(v144 + 8);
        uint64_t v148 = *v145;
        size_t v146 = (llvm::raw_ostream *)(v145 + 3);
        uint64_t v147 = v148;
      }
      else
      {
        uint64_t v147 = 0;
        size_t v146 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v146, v147, 1);
      uint64_t v256 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      goto LABEL_307;
    case 0x1B:
      uint64_t v155 = (_OWORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v155 > 0xFuLL)
      {
        *uint64_t v155 = *(_OWORD *)"!DIObjCProperty(";
        *((void *)this + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIObjCProperty(", 0x10uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      uint64_t v156 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      if (v156)
      {
        char v157 = *(uint64_t **)(v156 + 8);
        uint64_t v160 = *v157;
        uint64_t v158 = (llvm::raw_ostream *)(v157 + 3);
        uint64_t v159 = v160;
      }
      else
      {
        uint64_t v159 = 0;
        uint64_t v158 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v158, v159, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      uint64_t v258 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
      if (v258)
      {
        int v259 = *(uint64_t **)(v258 + 8);
        uint64_t v262 = *v259;
        uint64_t v260 = (llvm::raw_ostream *)(v259 + 3);
        uint64_t v261 = v262;
      }
      else
      {
        uint64_t v261 = 0;
        uint64_t v260 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "setter", 6uLL, v260, v261, 1);
      uint64_t v263 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v263)
      {
        uint64_t v264 = *(uint64_t **)(v263 + 8);
        uint64_t v267 = *v264;
        uint64_t v265 = (llvm::raw_ostream *)(v264 + 3);
        uint64_t v266 = v267;
      }
      else
      {
        uint64_t v266 = 0;
        uint64_t v265 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "getter", 6uLL, v265, v266, 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "attributes", 0xAuLL, *(_DWORD *)(a2 + 28), 1);
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
      uint64_t v26 = "type";
LABEL_321:
      size_t v27 = 4;
      goto LABEL_422;
    case 0x1C:
      uint64_t v71 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v71) > 0x11)
      {
        *(_WORD *)(v71 + 16) = 10361;
        *(_OWORD *)uint64_t v71 = *(_OWORD *)"!DIImportedEntity(";
        *((void *)this + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIImportedEntity(", 0x12uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC502760((uint64_t)&v383, a2);
      uint64_t v72 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v72)
      {
        int v73 = *(uint64_t **)(v72 + 8);
        uint64_t v76 = *v73;
        int v74 = (llvm::raw_ostream *)(v73 + 3);
        uint64_t v75 = v76;
      }
      else
      {
        uint64_t v75 = 0;
        int v74 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v74, v75, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8)), 0);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "entity", 6uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24), 1);
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
      uint64_t v26 = "elements";
      size_t v27 = 8;
      goto LABEL_422;
    case 0x1D:
      uint64_t v333 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v333) > 8)
      {
        *(unsigned char *)(v333 + 8) = 40;
        *(void *)uint64_t v333 = *(void *)"!DIMacro(";
        uint64_t v334 = *((void *)this + 4) + 9;
        *((void *)this + 4) = v334;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIMacro(", 9uLL);
        uint64_t v334 = *((void *)this + 4);
      }
      uint64_t v383 = this;
      __s[1] = ", ";
      v385[0] = a3;
      LOBYTE(__s[0]) = 0;
      if ((unint64_t)(*((void *)this + 3) - v334) > 5)
      {
        *(_WORD *)(v334 + 4) = 8250;
        *(_DWORD *)uint64_t v334 = 1701869940;
        *((void *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "type: ", 6uLL);
      }
      unint64_t v335 = *(unsigned __int16 *)(a2 + 2);
      BOOL v336 = llvm::dwarf::MacinfoString((llvm::dwarf *)v335);
      if (v337)
      {
        uint64_t v338 = v336;
        size_t v339 = v337;
        uint64_t v340 = (void *)*((void *)this + 4);
        if (v337 <= *((void *)this + 3) - (void)v340)
        {
          memcpy(v340, v338, v337);
          *((void *)this + 4) += v339;
        }
        else
        {
          llvm::raw_ostream::write(this, v338, v337);
        }
      }
      else
      {
        sub_1CD098D14(this, v335, 0, 0, 0);
      }
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      uint64_t v359 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      if (v359)
      {
        int v360 = *(uint64_t **)(v359 + 8);
        uint64_t v363 = *v360;
        unint64_t v361 = (llvm::raw_ostream *)(v360 + 3);
        uint64_t v362 = v363;
      }
      else
      {
        uint64_t v362 = 0;
        unint64_t v361 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v361, v362, 1);
      uint64_t v364 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      if (v364)
      {
        unsigned int v365 = *(uint64_t **)(v364 + 8);
        uint64_t v366 = *v365;
        unint64_t v276 = (llvm::raw_ostream *)(v365 + 3);
        uint64_t v277 = v366;
      }
      else
      {
        uint64_t v277 = 0;
        unint64_t v276 = 0;
      }
      BOOL v279 = "value";
      uint64_t v280 = &v383;
      size_t v281 = 5;
      goto LABEL_519;
    case 0x1E:
      uint64_t v77 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v77 > 0xCuLL)
      {
        qmemcpy(v77, "!DIMacroFile(", 13);
        *((void *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIMacroFile(", 0xDuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "line", 4uLL, *(_DWORD *)(a2 + 24), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8)), 0);
      uint64_t v28 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      uint64_t v26 = "nodes";
      size_t v27 = 5;
      goto LABEL_422;
    case 0x1F:
      uint64_t v137 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v137 > 0xEuLL)
      {
        qmemcpy(v137, "!DICommonBlock(", 15);
        *((void *)this + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DICommonBlock(", 0xFuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "scope", 5uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8)), 0);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "declaration", 0xBuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8), 0);
      uint64_t v138 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v138)
      {
        uint64_t v139 = *(uint64_t **)(v138 + 8);
        uint64_t v142 = *v139;
        uint64_t v140 = (llvm::raw_ostream *)(v139 + 3);
        uint64_t v141 = v142;
      }
      else
      {
        uint64_t v141 = 0;
        uint64_t v140 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v140, v141, 1);
      uint64_t v256 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
LABEL_307:
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "file", 4uLL, v256, 1);
      unsigned int v37 = *(_DWORD *)(a2 + 24);
      uint64_t v38 = "line";
      size_t v39 = 4;
LABEL_308:
      char v80 = 1;
LABEL_309:
      sub_1CC4FD184((llvm::raw_ostream *)&v383, v38, v39, v37, v80);
      goto LABEL_520;
    case 0x20:
      sub_1CC4FCE7C(this, a2);
      return;
    case 0x21:
      unint64_t v40 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v40 > 0xDuLL)
      {
        qmemcpy(v40, "!DIStringType(", 14);
        *((void *)this + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIStringType(", 0xEuLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      if (*(_WORD *)(a2 + 2) != 18) {
        sub_1CC502760((uint64_t)&v383, a2);
      }
      uint64_t v41 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v41)
      {
        BOOL v42 = *(uint64_t **)(v41 + 8);
        uint64_t v45 = *v42;
        uint64_t v43 = (llvm::raw_ostream *)(v42 + 3);
        uint64_t v44 = v45;
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v43 = 0;
      }
      sub_1CC5028EC((llvm::raw_ostream *)&v383, "name", 4uLL, v43, v44, 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "stringLength", 0xCuLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "stringLengthExpression", 0x16uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), 1);
      sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "stringLocationExpression", 0x18uLL, *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40), 1);
      sub_1CC502C70((llvm::raw_ostream *)&v383, "size", 4uLL, *(void *)(a2 + 32));
      sub_1CC4FD184((llvm::raw_ostream *)&v383, "align", 5uLL, *(_DWORD *)(a2 + 48), 1);
      sub_1CC502DBC((llvm::raw_ostream *)&v383, "encoding", 8uLL, *(unsigned int *)(a2 + 52), (uint64_t (*)(uint64_t))llvm::dwarf::AttributeEncodingString);
      goto LABEL_520;
    case 0x22:
      uint64_t v21 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v21) > 0x12)
      {
        *(_DWORD *)(v21 + 15) = 677734254;
        *(_OWORD *)uint64_t v21 = *(_OWORD *)"!DIGenericSubrange(";
        *((void *)this + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(this, "!DIGenericSubrange(", 0x13uLL);
      }
      uint64_t v383 = this;
      LOBYTE(__s[0]) = 1;
      __s[1] = ", ";
      v385[0] = a3;
      uint64_t v22 = *(llvm::DIExpression **)(a2 - 8 * *(unsigned int *)(a2 + 8));
      if (v22
        && *(unsigned char *)v22 == 6
        && ((uint64_t isConstant = llvm::DIExpression::isConstant(v22), (isConstant & 0xFF00000000) != 0)
          ? (BOOL v345 = isConstant == 0)
          : (BOOL v345 = 0),
            v345))
      {
        sub_1CC502A98((uint64_t)&v383, "count", 5uLL, *(void *)(*((void *)v22 + 3) + 8));
      }
      else
      {
        sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "count", 5uLL, (uint64_t)v22, 1);
      }
      uint64_t v23 = *(llvm::DIExpression **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
      if (v23
        && *(unsigned char *)v23 == 6
        && ((uint64_t v346 = llvm::DIExpression::isConstant(v23), (v346 & 0xFF00000000) != 0)
          ? (BOOL v347 = v346 == 0)
          : (BOOL v347 = 0),
            v347))
      {
        sub_1CC502A98((uint64_t)&v383, "lowerBound", 0xAuLL, *(void *)(*((void *)v23 + 3) + 8));
      }
      else
      {
        sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "lowerBound", 0xAuLL, (uint64_t)v23, 1);
      }
      uint64_t v24 = *(llvm::DIExpression **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v24
        && *(unsigned char *)v24 == 6
        && (uint64_t v348 = llvm::DIExpression::isConstant(v24), (v348 & 0xFF00000000) != 0)
        && !v348)
      {
        sub_1CC502A98((uint64_t)&v383, "upperBound", 0xAuLL, *(void *)(*((void *)v24 + 3) + 8));
      }
      else
      {
        sub_1CC4FD2E4((llvm::raw_ostream *)&v383, "upperBound", 0xAuLL, (uint64_t)v24, 1);
      }
      unint64_t v25 = *(llvm::DIExpression **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
      if (v25
        && *(unsigned char *)v25 == 6
        && (uint64_t v349 = llvm::DIExpression::isConstant(v25), (v349 & 0xFF00000000) != 0)
        && !v349)
      {
        unint64_t v332 = *(void *)(*((void *)v25 + 3) + 8);
LABEL_425:
        sub_1CC502A98((uint64_t)&v383, "stride", 6uLL, v332);
      }
      else
      {
        uint64_t v26 = "stride";
        size_t v27 = 6;
        uint64_t v28 = (uint64_t)v25;
LABEL_422:
        char v257 = 1;
LABEL_423:
        sub_1CC4FD2E4((llvm::raw_ostream *)&v383, v26, v27, v28, v257);
      }
      goto LABEL_520;
    default:
      uint64_t v11 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v11 > 1uLL)
      {
        *uint64_t v11 = 31521;
        *((void *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, "!{", 2uLL);
      }
      uint64_t v12 = *(unsigned int *)(a2 + 8);
      if (!v12) {
        goto LABEL_29;
      }
      uint64_t v13 = v12 - 1;
      uint64_t v14 = a2;
      while (2)
      {
        uint64_t v15 = *(unsigned __int8 **)(v14 - 8 * v12);
        if (v15)
        {
          if (*v15 - 3 < 0xFFFFFFFE)
          {
            sub_1CC4FC73C(this, v15, a3);
            (**(void (***)(uint64_t, unsigned __int8 *))a3)(a3, v15);
            if (!v13) {
              break;
            }
LABEL_24:
            int v19 = (_WORD *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v19 > 1uLL)
            {
              *int v19 = 8236;
              *((void *)this + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(this, ", ", 2uLL);
            }
            uint64_t v12 = *(unsigned int *)(a2 + 8);
            --v13;
            v14 += 8;
            continue;
          }
          uint64_t v17 = (unint64_t *)*((void *)v15 + 16);
          sub_1CC4F2DB8(*(llvm::raw_ostream **)(a3 + 8), *v17, this);
          uint64_t v18 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v18 >= *((void *)this + 3))
          {
            llvm::raw_ostream::write(this, 32);
          }
          else
          {
            *((void *)this + 4) = v18 + 1;
            *uint64_t v18 = 32;
          }
          sub_1CC4FB368(this, (llvm::detail::DoubleAPFloat *)v17, a3);
          if (v13) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v16 = (_DWORD *)*((void *)this + 4);
          if (*((void *)this + 3) - (void)v16 > 3uLL)
          {
            *uint64_t v16 = 1819047278;
            *((void *)this + 4) += 4;
            if (!v13) {
              break;
            }
            goto LABEL_24;
          }
          llvm::raw_ostream::write(this, "null", 4uLL);
          if (v13) {
            goto LABEL_24;
          }
        }
        break;
      }
LABEL_29:
      uint64_t v20 = (char *)*((void *)this + 4);
      if (*((char **)this + 3) != v20)
      {
        char v367 = 125;
LABEL_523:
        *uint64_t v20 = v367;
        ++*((void *)this + 4);
        return;
      }
      llvm::raw_ostream::write(this, "}", 1uLL);
      return;
  }
}

llvm::raw_ostream *sub_1CC502760(uint64_t a1, uint64_t a2)
{
  int v4 = *(llvm::raw_ostream **)a1;
  if (*(unsigned char *)(a1 + 8))
  {
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    BOOL v5 = *(const void **)(a1 + 16);
    if (v5)
    {
      size_t v6 = strlen(*(const char **)(a1 + 16));
      uint64_t v7 = (void *)*((void *)v4 + 4);
      if (v6 <= *((void *)v4 + 3) - (void)v7)
      {
        if (v6)
        {
          memcpy(v7, v5, v6);
          *((void *)v4 + 4) += v6;
        }
      }
      else
      {
        llvm::raw_ostream::write(v4, (const char *)v5, v6);
      }
    }
  }
  uint64_t v8 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v8) > 4)
  {
    *(unsigned char *)(v8 + 4) = 32;
    *(_DWORD *)uint64_t v8 = 979853684;
    *((void *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v4, "tag: ", 5uLL);
  }
  size_t v9 = llvm::dwarf::TagString((llvm::dwarf *)*(unsigned __int16 *)(a2 + 2));
  if (v10)
  {
    uint64_t v11 = v9;
    size_t v12 = v10;
    uint64_t v13 = *(llvm::raw_ostream **)a1;
    uint64_t v14 = (void *)*((void *)v13 + 4);
    if (v10 <= *((void *)v13 + 3) - (void)v14)
    {
      BOOL result = (llvm::raw_ostream *)memcpy(v14, v11, v10);
      *((void *)v13 + 4) += v12;
    }
    else
    {
      return llvm::raw_ostream::write(v13, v11, v10);
    }
  }
  else
  {
    uint64_t v16 = *(llvm::raw_ostream **)a1;
    unint64_t v17 = *(unsigned __int16 *)(a2 + 2);
    return sub_1CD098D14(v16, v17, 0, 0, 0);
  }
  return result;
}

llvm::raw_ostream *sub_1CC5028EC(llvm::raw_ostream *result, char *a2, size_t a3, llvm::raw_ostream *a4, uint64_t a5, int a6)
{
  size_t v10 = (llvm::raw_ostream **)result;
  if (!a6 || a5)
  {
    uint64_t v11 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)result + 8))
    {
      *((unsigned char *)result + 8) = 0;
    }
    else
    {
      size_t v12 = (const void *)*((void *)result + 2);
      if (v12)
      {
        size_t v13 = strlen(*((const char **)result + 2));
        uint64_t v14 = (void *)*((void *)v11 + 4);
        if (v13 <= *((void *)v11 + 3) - (void)v14)
        {
          if (v13)
          {
            memcpy(v14, v12, v13);
            *((void *)v11 + 4) += v13;
          }
        }
        else
        {
          llvm::raw_ostream::write(v11, (const char *)v12, v13);
        }
      }
    }
    uint64_t v15 = (unsigned char *)*((void *)v11 + 4);
    if (a3 <= *((void *)v11 + 3) - (void)v15)
    {
      if (a3)
      {
        memcpy(v15, a2, a3);
        uint64_t v15 = (unsigned char *)(*((void *)v11 + 4) + a3);
        *((void *)v11 + 4) = v15;
      }
    }
    else
    {
      llvm::raw_ostream::write(v11, a2, a3);
      uint64_t v15 = (unsigned char *)*((void *)v11 + 4);
    }
    if (*((void *)v11 + 3) - (void)v15 > 2uLL)
    {
      v15[2] = 34;
      *(_WORD *)uint64_t v15 = 8250;
      *((void *)v11 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v11, ": \"", 3uLL);
    }
    llvm::printEscapedString(a4, a5, *v10);
    BOOL result = *v10;
    uint64_t v16 = (unsigned char *)*((void *)*v10 + 4);
    if (*((unsigned char **)*v10 + 3) == v16)
    {
      return llvm::raw_ostream::write(result, "\"", 1uLL);
    }
    else
    {
      *uint64_t v16 = 34;
      ++*((void *)result + 4);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC502A98(uint64_t a1, char *a2, size_t a3, unint64_t a4)
{
  uint64_t v7 = *(llvm::raw_ostream **)a1;
  if (*(unsigned char *)(a1 + 8))
  {
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v8 = *(const void **)(a1 + 16);
    if (v8)
    {
      size_t v9 = strlen(*(const char **)(a1 + 16));
      size_t v10 = (void *)*((void *)v7 + 4);
      if (v9 <= *((void *)v7 + 3) - (void)v10)
      {
        if (v9)
        {
          memcpy(v10, v8, v9);
          *((void *)v7 + 4) += v9;
        }
      }
      else
      {
        llvm::raw_ostream::write(v7, (const char *)v8, v9);
      }
    }
  }
  uint64_t v11 = (_WORD *)*((void *)v7 + 4);
  if (a3 <= *((void *)v7 + 3) - (void)v11)
  {
    if (a3)
    {
      memcpy(v11, a2, a3);
      uint64_t v11 = (_WORD *)(*((void *)v7 + 4) + a3);
      *((void *)v7 + 4) = v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v7, a2, a3);
    uint64_t v11 = (_WORD *)*((void *)v7 + 4);
  }
  if (*((void *)v7 + 3) - (void)v11 > 1uLL)
  {
    *uint64_t v11 = 8250;
    *((void *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, ": ", 2uLL);
  }

  return llvm::raw_ostream::operator<<(v7, a4);
}

void sub_1CC502BD0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCD82D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCD82D0))
  {
    qword_1EBCD82D8 = (uint64_t)&unk_1F26161D8;
    unk_1EBCD82E0 = 0;
    qword_1EBCD82E8 = 0;
    unk_1EBCD82F0 = 0;
    __cxa_atexit((void (*)(void *))nullsub_820, &qword_1EBCD82D8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCD82D0);
  }
}

llvm::raw_ostream *sub_1CC502C70(llvm::raw_ostream *result, char *a2, size_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)result + 8))
    {
      *((unsigned char *)result + 8) = 0;
    }
    else
    {
      uint64_t v8 = (const void *)*((void *)result + 2);
      if (v8)
      {
        size_t v9 = strlen(*((const char **)result + 2));
        size_t v10 = (void *)*((void *)v7 + 4);
        if (v9 <= *((void *)v7 + 3) - (void)v10)
        {
          if (v9)
          {
            memcpy(v10, v8, v9);
            *((void *)v7 + 4) += v9;
          }
        }
        else
        {
          llvm::raw_ostream::write(v7, (const char *)v8, v9);
        }
      }
    }
    uint64_t v11 = (_WORD *)*((void *)v7 + 4);
    if (a3 <= *((void *)v7 + 3) - (void)v11)
    {
      if (a3)
      {
        memcpy(v11, a2, a3);
        uint64_t v11 = (_WORD *)(*((void *)v7 + 4) + a3);
        *((void *)v7 + 4) = v11;
      }
    }
    else
    {
      llvm::raw_ostream::write(v7, a2, a3);
      uint64_t v11 = (_WORD *)*((void *)v7 + 4);
    }
    if (*((void *)v7 + 3) - (void)v11 > 1uLL)
    {
      *uint64_t v11 = 8250;
      *((void *)v7 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v7, ": ", 2uLL);
    }
    return sub_1CD098D14(v7, a4, 0, 0, 0);
  }
  return result;
}

llvm::raw_ostream *sub_1CC502DBC(llvm::raw_ostream *result, char *a2, size_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  if (a4)
  {
    size_t v9 = (llvm::raw_ostream **)result;
    size_t v10 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)result + 8))
    {
      *((unsigned char *)result + 8) = 0;
    }
    else
    {
      uint64_t v11 = (const void *)*((void *)result + 2);
      if (v11)
      {
        size_t v12 = strlen(*((const char **)result + 2));
        size_t v13 = (void *)*((void *)v10 + 4);
        if (v12 <= *((void *)v10 + 3) - (void)v13)
        {
          if (v12)
          {
            memcpy(v13, v11, v12);
            *((void *)v10 + 4) += v12;
          }
        }
        else
        {
          llvm::raw_ostream::write(v10, (const char *)v11, v12);
        }
      }
    }
    uint64_t v14 = (_WORD *)*((void *)v10 + 4);
    if (a3 <= *((void *)v10 + 3) - (void)v14)
    {
      if (a3)
      {
        memcpy(v14, a2, a3);
        uint64_t v14 = (_WORD *)(*((void *)v10 + 4) + a3);
        *((void *)v10 + 4) = v14;
      }
    }
    else
    {
      llvm::raw_ostream::write(v10, a2, a3);
      uint64_t v14 = (_WORD *)*((void *)v10 + 4);
    }
    if (*((void *)v10 + 3) - (void)v14 > 1uLL)
    {
      *uint64_t v14 = 8250;
      *((void *)v10 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v10, ": ", 2uLL);
    }
    uint64_t v15 = a5(a4);
    if (v16)
    {
      unint64_t v17 = (const void *)v15;
      size_t v18 = v16;
      int v19 = *v9;
      uint64_t v20 = (void *)*((void *)v19 + 4);
      if (v16 <= *((void *)v19 + 3) - (void)v20)
      {
        BOOL result = (llvm::raw_ostream *)memcpy(v20, v17, v16);
        *((void *)v19 + 4) += v18;
      }
      else
      {
        return llvm::raw_ostream::write(v19, (const char *)v17, v16);
      }
    }
    else
    {
      uint64_t v21 = *v9;
      return sub_1CD098D14(v21, a4, 0, 0, 0);
    }
  }
  return result;
}

void sub_1CC502FA0(uint64_t a1, uint64_t a2)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v4 = *(llvm::raw_ostream **)a1;
    if (*(unsigned char *)(a1 + 8))
    {
      *(unsigned char *)(a1 + 8) = 0;
    }
    else
    {
      BOOL v5 = *(const void **)(a1 + 16);
      if (v5)
      {
        size_t v6 = strlen(*(const char **)(a1 + 16));
        uint64_t v7 = (void *)*((void *)v4 + 4);
        if (v6 <= *((void *)v4 + 3) - (void)v7)
        {
          if (v6)
          {
            memcpy(v7, v5, v6);
            *((void *)v4 + 4) += v6;
          }
        }
        else
        {
          llvm::raw_ostream::write(v4, (const char *)v5, v6);
        }
      }
    }
    uint64_t v8 = *((void *)v4 + 4);
    if ((unint64_t)(*((void *)v4 + 3) - v8) > 4)
    {
      *(unsigned char *)(v8 + 4) = 115;
      *(_DWORD *)uint64_t v8 = 1734437990;
      size_t v9 = (_WORD *)(*((void *)v4 + 4) + 5);
      *((void *)v4 + 4) = v9;
    }
    else
    {
      llvm::raw_ostream::write(v4, "flags", 5uLL);
      size_t v9 = (_WORD *)*((void *)v4 + 4);
    }
    if (*((void *)v4 + 3) - (void)v9 > 1uLL)
    {
      *size_t v9 = 8250;
      *((void *)v4 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v4, ": ", 2uLL);
    }
    uint64_t v22 = v24;
    uint64_t v23 = 0x800000000;
    unsigned int v10 = llvm::DINode::splitFlags(a2, (uint64_t)&v22);
    if (v23)
    {
      char v11 = 0;
      size_t v12 = (int *)v22;
      uint64_t v13 = 4 * v23;
      do
      {
        FlagString = llvm::DINode::getFlagString(*v12);
        size_t v16 = v15;
        unint64_t v17 = *(llvm::raw_ostream **)a1;
        if (v11)
        {
          uint64_t v18 = *((void *)v17 + 4);
          if ((unint64_t)(*((void *)v17 + 3) - v18) > 2)
          {
            *(unsigned char *)(v18 + 2) = 32;
            *(_WORD *)uint64_t v18 = 31776;
            *((void *)v17 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, " | ", 3uLL);
          }
        }
        int v19 = (void *)*((void *)v17 + 4);
        if (v16 <= *((void *)v17 + 3) - (void)v19)
        {
          if (v16)
          {
            memcpy(v19, FlagString, v16);
            *((void *)v17 + 4) += v16;
          }
        }
        else
        {
          llvm::raw_ostream::write(v17, FlagString, v16);
        }
        ++v12;
        char v11 = 1;
        v13 -= 4;
      }
      while (v13);
      if (!v10 && v23) {
        goto LABEL_30;
      }
      uint64_t v20 = *(llvm::raw_ostream **)a1;
      uint64_t v21 = *(void *)(*(void *)a1 + 32);
      if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v21) > 2)
      {
        *(unsigned char *)(v21 + 2) = 32;
        *(_WORD *)uint64_t v21 = 31776;
        *((void *)v20 + 4) += 3;
      }
      else
      {
        uint64_t v20 = llvm::raw_ostream::write(v20, " | ", 3uLL);
      }
    }
    else
    {
      uint64_t v20 = *(llvm::raw_ostream **)a1;
    }
    sub_1CD098D14(v20, v10, 0, 0, 0);
LABEL_30:
    if (v22 != v24) {
      free(v22);
    }
  }
}

llvm::raw_ostream *sub_1CC503278(llvm::raw_ostream *a1, uint64_t a2)
{
  BOOL result = (llvm::raw_ostream *)sub_1CB845E74(a2);
  if (a2 && result)
  {
    int v5 = *(unsigned __int8 *)(a2 + 17) >> 1;
    if (v5 == 127) {
      int v5 = -1;
    }
    int v25 = v5;
    BOOL result = llvm::FastMathFlags::print((llvm::raw_ostream *)&v25, a1);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 < 0x1C)
  {
    if (v6 != 5) {
      return result;
    }
    uint64_t v12 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v14) = v12 - 13;
    LODWORD(v14) = v12 - 13;
    unsigned int v13 = v14 >> 1;
    BOOL v9 = v13 > 6;
    int v15 = (1 << v13) & 0x47;
    if (!v9 && v15 != 0)
    {
LABEL_21:
      if ((*(unsigned char *)(a2 + 17) & 2) != 0)
      {
        unint64_t v17 = (_DWORD *)*((void *)a1 + 4);
        if (*((void *)a1 + 3) - (void)v17 > 3uLL)
        {
          _DWORD *v17 = 2004184608;
          *((void *)a1 + 4) += 4;
        }
        else
        {
          BOOL result = llvm::raw_ostream::write(a1, " nuw", 4uLL);
        }
      }
      if ((*(unsigned char *)(a2 + 17) & 4) != 0)
      {
        uint64_t v18 = (_DWORD *)*((void *)a1 + 4);
        if (*((void *)a1 + 3) - (void)v18 <= 3uLL)
        {
          int v19 = " nsw";
          uint64_t v20 = a1;
          size_t v21 = 4;
          return llvm::raw_ostream::write(v20, v19, v21);
        }
        *uint64_t v18 = 2004053536;
        uint64_t v24 = *((void *)a1 + 4) + 4;
        goto LABEL_40;
      }
      return result;
    }
    if (v12 > 0x22) {
      return result;
    }
    if (((1 << v12) & 0xC180000) == 0)
    {
      if (v12 != 34) {
        return result;
      }
      goto LABEL_35;
    }
  }
  else
  {
    HIDWORD(v8) = v6 - 41;
    LODWORD(v8) = v6 - 41;
    unsigned int v7 = v8 >> 1;
    BOOL v9 = v7 > 6;
    int v10 = (1 << v7) & 0x47;
    if (!v9 && v10 != 0) {
      goto LABEL_21;
    }
    if (v6 > 0x3E) {
      return result;
    }
    if (((1 << v6) & 0xC1800000000000) == 0)
    {
      if (v6 != 62) {
        return result;
      }
LABEL_35:
      if ((*(unsigned char *)(a2 + 17) & 2) != 0)
      {
        uint64_t v23 = *((void *)a1 + 4);
        if ((unint64_t)(*((void *)a1 + 3) - v23) <= 8)
        {
          int v19 = " inbounds";
          uint64_t v20 = a1;
          size_t v21 = 9;
          return llvm::raw_ostream::write(v20, v19, v21);
        }
        *(unsigned char *)(v23 + 8) = 115;
        *(void *)uint64_t v23 = *(void *)" inbounds";
        uint64_t v24 = *((void *)a1 + 4) + 9;
        goto LABEL_40;
      }
      return result;
    }
  }
  if ((*(unsigned char *)(a2 + 17) & 2) != 0)
  {
    uint64_t v22 = *((void *)a1 + 4);
    if ((unint64_t)(*((void *)a1 + 3) - v22) <= 5)
    {
      int v19 = " exact";
      uint64_t v20 = a1;
      size_t v21 = 6;
      return llvm::raw_ostream::write(v20, v19, v21);
    }
    *(_WORD *)(v22 + 4) = 29795;
    *(_DWORD *)uint64_t v22 = 1635280160;
    uint64_t v24 = *((void *)a1 + 4) + 6;
LABEL_40:
    *((void *)a1 + 4) = v24;
  }
  return result;
}

llvm::raw_ostream *sub_1CC5034B4(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if ((v4 & 0xFE) == 0x12) {
    unsigned int v4 = *(_DWORD *)(**(void **)(a1 + 16) + 8);
  }
  if (v4 > 0xFF || (BOOL result = (llvm::raw_ostream *)sub_1CC4F3E90(a2)) == 0 || *((_DWORD *)result + 71))
  {
    unint64_t v6 = v4 >> 8;
    uint64_t v7 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v7) > 0xA)
    {
      *(_DWORD *)(v7 + 7) = 677733217;
      *(void *)uint64_t v7 = *(void *)" addrspace(";
      *((void *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, " addrspace(", 0xBuLL);
    }
    BOOL result = sub_1CD098D14(this, v6, 0, 0, 0);
    unint64_t v8 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v8)
    {
      return llvm::raw_ostream::write(this, ")", 1uLL);
    }
    else
    {
      unsigned char *v8 = 41;
      ++*((void *)this + 4);
    }
  }
  return result;
}

void sub_1CC5035C4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (a2)
  {
    sub_1CC4F2DB8((llvm::raw_ostream *)(a1 + 40), *a2, *(llvm::raw_ostream **)a1);
    if (a3)
    {
      unint64_t v6 = *(llvm::raw_ostream **)a1;
      uint64_t v7 = *(unsigned char **)(*(void *)a1 + 32);
      if ((unint64_t)v7 >= *(void *)(*(void *)a1 + 24))
      {
        llvm::raw_ostream::write(v6, 32);
      }
      else
      {
        *((void *)v6 + 4) = v7 + 1;
        *uint64_t v7 = 32;
      }
      sub_1CC4FBB24((llvm::raw_ostream **)a1, a3);
    }
    int v10 = *(llvm::raw_ostream **)a1;
    char v11 = *(unsigned char **)(*(void *)a1 + 32);
    if ((unint64_t)v11 >= *(void *)(*(void *)a1 + 24))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      *char v11 = 32;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    unsigned int v13 = *(llvm::raw_ostream **)a1;
    uint64_t v14 = *(void *)(a1 + 8);
    v15[0] = &unk_1F26161D8;
    v15[1] = a1 + 40;
    v15[2] = v12;
    v15[3] = v14;
    sub_1CC4FB368(v13, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)v15);
  }
  else
  {
    unint64_t v8 = *(llvm::raw_ostream **)a1;
    BOOL v9 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v9 > 0xEuLL)
    {
      qmemcpy(v9, "<null operand!>", 15);
      *((void *)v8 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v8, "<null operand!>", 0xFuLL);
    }
  }
}

llvm::raw_ostream *sub_1CC503720(llvm::raw_ostream *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20);
  if (v2 < 0 && (*(void *)(a2 - 32 * (v2 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
  {
    unsigned int v4 = result;
    int v5 = *(llvm::raw_ostream **)result;
    uint64_t v6 = *((void *)v5 + 4);
    if ((unint64_t)(*((void *)v5 + 3) - v6) > 2)
    {
      *(unsigned char *)(v6 + 2) = 32;
      *(_WORD *)uint64_t v6 = 23328;
      *((void *)v5 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v5, " [ ", 3uLL);
    }
    int v7 = *(_DWORD *)(a2 + 20);
    if (v7 < 0)
    {
      unint64_t v9 = *(void *)(a2 - 32 * (v7 & 0x7FFFFFF) - 8);
      if ((v9 & 0xFFFFFFFF0) != 0)
      {
        uint64_t v10 = 0;
        uint64_t v37 = (v9 >> 4);
        char v11 = 1;
        do
        {
          uint64_t v12 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
          uint64_t v13 = a2 - 8 - 32 * v12 - *(void *)(a2 - 8 - 32 * v12) + 16 * v10;
          uint64_t v15 = *(unsigned int *)(a2 - 32 * v12 - *(void *)(a2 - 8 - 32 * v12) + 16 * v10);
          uint64_t v14 = *(unsigned int *)(v13 + 12);
          size_t v16 = *(uint64_t **)v13;
          if ((v11 & 1) == 0)
          {
            unint64_t v17 = *(llvm::raw_ostream **)v4;
            uint64_t v18 = *(_WORD **)(*(void *)v4 + 32);
            if (*(void *)(*(void *)v4 + 24) - (void)v18 > 1uLL)
            {
              *uint64_t v18 = 8236;
              *((void *)v17 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v17, ", ", 2uLL);
            }
          }
          int v19 = *(llvm::raw_ostream **)v4;
          uint64_t v20 = *(unsigned char **)(*(void *)v4 + 32);
          if ((unint64_t)v20 >= *(void *)(*(void *)v4 + 24))
          {
            llvm::raw_ostream::write(v19, 34);
          }
          else
          {
            *((void *)v19 + 4) = v20 + 1;
            *uint64_t v20 = 34;
          }
          llvm::printEscapedString((llvm::raw_ostream *)(v16 + 2), *v16, *(llvm::raw_ostream **)v4);
          size_t v21 = *(llvm::raw_ostream **)v4;
          uint64_t v22 = *(unsigned char **)(*(void *)v4 + 32);
          if ((unint64_t)v22 >= *(void *)(*(void *)v4 + 24))
          {
            llvm::raw_ostream::write(v21, 34);
          }
          else
          {
            *((void *)v21 + 4) = v22 + 1;
            *uint64_t v22 = 34;
          }
          uint64_t v23 = *(llvm::raw_ostream **)v4;
          uint64_t v24 = *(unsigned char **)(*(void *)v4 + 32);
          if ((unint64_t)v24 >= *(void *)(*(void *)v4 + 24))
          {
            llvm::raw_ostream::write(v23, 40);
          }
          else
          {
            *((void *)v23 + 4) = v24 + 1;
            *uint64_t v24 = 40;
          }
          uint64_t v25 = *((void *)v4 + 4);
          uint64_t v26 = *((void *)v4 + 1);
          v38[0] = &unk_1F26161D8;
          v38[1] = (char *)v4 + 40;
          void v38[2] = v25;
          v38[3] = v26;
          if (v15 != v14)
          {
            BOOL v29 = (unint64_t **)(a2 - 32 * v12 + 32 * v15);
            char v30 = 1;
            uint64_t v31 = 32 * v14 - 32 * v15;
            do
            {
              if ((v30 & 1) == 0)
              {
                uint64_t v32 = *(llvm::raw_ostream **)v4;
                uint64_t v33 = *(_WORD **)(*(void *)v4 + 32);
                if (*(void *)(*(void *)v4 + 24) - (void)v33 > 1uLL)
                {
                  *uint64_t v33 = 8236;
                  *((void *)v32 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v32, ", ", 2uLL);
                }
              }
              sub_1CC4F2DB8((llvm::raw_ostream *)((char *)v4 + 40), **v29, *(llvm::raw_ostream **)v4);
              uint64_t v34 = *(llvm::raw_ostream **)v4;
              uint64_t v35 = *(unsigned char **)(*(void *)v4 + 32);
              if (*(unsigned char **)(*(void *)v4 + 24) == v35)
              {
                llvm::raw_ostream::write(v34, " ", 1uLL);
              }
              else
              {
                *uint64_t v35 = 32;
                ++*((void *)v34 + 4);
              }
              uint64_t v36 = *v29;
              v29 += 4;
              sub_1CC4FB368(*(llvm::raw_ostream **)v4, (llvm::detail::DoubleAPFloat *)v36, (uint64_t)v38);
              char v30 = 0;
              v31 -= 32;
            }
            while (v31);
          }
          size_t v27 = *(llvm::raw_ostream **)v4;
          uint64_t v28 = *(unsigned char **)(*(void *)v4 + 32);
          if ((unint64_t)v28 >= *(void *)(*(void *)v4 + 24))
          {
            llvm::raw_ostream::write(v27, 41);
          }
          else
          {
            *((void *)v27 + 4) = v28 + 1;
            *uint64_t v28 = 41;
          }
          char v11 = 0;
          ++v10;
        }
        while (v10 != v37);
      }
    }
    BOOL result = *(llvm::raw_ostream **)v4;
    unint64_t v8 = *(_WORD **)(*(void *)v4 + 32);
    if (*(void *)(*(void *)v4 + 24) - (void)v8 > 1uLL)
    {
      _WORD *v8 = 23840;
      *((void *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, " ]", 2uLL);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC503A80(llvm::raw_ostream *result, uint64_t a2, int a3, unsigned int a4)
{
  if (a3)
  {
    int v5 = result;
    BOOL result = sub_1CC5040B4(result, a2, a4);
    uint64_t v6 = *(llvm::raw_ostream **)v5;
    int v7 = (unsigned char *)*((void *)v6 + 4);
    if (*((unsigned char **)v6 + 3) == v7)
    {
      BOOL result = llvm::raw_ostream::write(v6, " ", 1uLL);
    }
    else
    {
      *int v7 = 32;
      ++*((void *)v6 + 4);
    }
    unint64_t v8 = off_1EA6152A8[a3];
    if (v8)
    {
      size_t v9 = strlen(v8);
      BOOL result = (llvm::raw_ostream *)*((void *)v6 + 4);
      if (v9 <= *((void *)v6 + 3) - (void)result)
      {
        if (v9)
        {
          BOOL result = (llvm::raw_ostream *)memcpy(result, v8, v9);
          *((void *)v6 + 4) += v9;
        }
      }
      else
      {
        return llvm::raw_ostream::write(v6, v8, v9);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC503B68(llvm::raw_ostream *this, uint64_t a2, int *a3, unint64_t a4)
{
  uint64_t v8 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v8) > 2)
  {
    *(unsigned char *)(v8 + 2) = 60;
    *(_WORD *)uint64_t v8 = 8236;
    *((void *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, ", <", 3uLL);
  }
  if (*(unsigned char *)(a2 + 8) == 19)
  {
    uint64_t v9 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v9) > 8)
    {
      *(unsigned char *)(v9 + 8) = 32;
      *(void *)uint64_t v9 = *(void *)"vscale x ";
      *((void *)this + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(this, "vscale x ", 9uLL);
    }
  }
  BOOL result = sub_1CD098D14(this, a4, 0, 0, 0);
  char v11 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v11 > 7uLL)
  {
    *char v11 = 0x203E323369207820;
    *((void *)this + 4) += 8;
    if (a4)
    {
LABEL_8:
      uint64_t v12 = 4 * a4;
      uint64_t v13 = 4 * a4;
      uint64_t v14 = a3;
      while (!*v14)
      {
        ++v14;
        v13 -= 4;
        if (!v13) {
          goto LABEL_11;
        }
      }
      uint64_t v19 = 4 * a4;
      uint64_t v20 = a3;
      while (*v20 == -1)
      {
        ++v20;
        v19 -= 4;
        if (!v19)
        {
          uint64_t v21 = *((void *)this + 4);
          if ((unint64_t)(*((void *)this + 3) - v21) <= 4)
          {
            size_t v16 = "undef";
            unint64_t v17 = this;
            size_t v18 = 5;
            goto LABEL_13;
          }
          *(unsigned char *)(v21 + 4) = 102;
          *(_DWORD *)uint64_t v21 = 1701080693;
          uint64_t v31 = *((void *)this + 4) + 5;
          goto LABEL_47;
        }
      }
      uint64_t v22 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v22)
      {
        BOOL result = llvm::raw_ostream::write(this, "<", 1uLL);
      }
      else
      {
        *uint64_t v22 = 60;
        ++*((void *)this + 4);
      }
      char v23 = 1;
      do
      {
        unint64_t v24 = *a3;
        uint64_t v25 = (_WORD *)*((void *)this + 4);
        if ((v23 & 1) == 0)
        {
          if (*((void *)this + 3) - (void)v25 > 1uLL)
          {
            *uint64_t v25 = 8236;
            uint64_t v25 = (_WORD *)(*((void *)this + 4) + 2);
            *((void *)this + 4) = v25;
          }
          else
          {
            BOOL result = llvm::raw_ostream::write(this, ", ", 2uLL);
            uint64_t v25 = (_WORD *)*((void *)this + 4);
          }
        }
        if (*((void *)this + 3) - (void)v25 > 3uLL)
        {
          *(_DWORD *)uint64_t v25 = 540160873;
          *((void *)this + 4) += 4;
        }
        else
        {
          BOOL result = llvm::raw_ostream::write(this, "i32 ", 4uLL);
        }
        if (v24 == -1)
        {
          uint64_t v29 = *((void *)this + 4);
          if ((unint64_t)(*((void *)this + 3) - v29) > 4)
          {
            *(unsigned char *)(v29 + 4) = 102;
            *(_DWORD *)uint64_t v29 = 1701080693;
            *((void *)this + 4) += 5;
          }
          else
          {
            BOOL result = llvm::raw_ostream::write(this, "undef", 5uLL);
          }
        }
        else
        {
          if ((v24 & 0x80000000) != 0)
          {
            unint64_t v27 = -(uint64_t)v24;
            uint64_t v26 = this;
            int v28 = 1;
          }
          else
          {
            uint64_t v26 = this;
            unint64_t v27 = v24;
            int v28 = 0;
          }
          BOOL result = sub_1CD098D14(v26, v27, 0, 0, v28);
        }
        char v23 = 0;
        ++a3;
        v12 -= 4;
      }
      while (v12);
      char v30 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v30)
      {
        size_t v16 = ">";
        unint64_t v17 = this;
        size_t v18 = 1;
        goto LABEL_13;
      }
      *char v30 = 62;
      uint64_t v31 = *((void *)this + 4) + 1;
      goto LABEL_47;
    }
  }
  else
  {
    BOOL result = llvm::raw_ostream::write(this, " x i32> ", 8uLL);
    if (a4) {
      goto LABEL_8;
    }
  }
LABEL_11:
  uint64_t v15 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v15 > 0xEuLL)
  {
    qmemcpy(v15, "zeroinitializer", 15);
    uint64_t v31 = *((void *)this + 4) + 15;
LABEL_47:
    *((void *)this + 4) = v31;
    return result;
  }
  size_t v16 = "zeroinitializer";
  unint64_t v17 = this;
  size_t v18 = 15;
LABEL_13:

  return llvm::raw_ostream::write(v17, v16, v18);
}

uint64_t sub_1CC503F50(llvm::raw_ostream **a1, llvm::GCRelocateInst *a2)
{
  if (sub_1CC070820((uint64_t)a2))
  {
    uint64_t v6 = *a1;
    int v7 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v7 > 3uLL)
    {
      *int v7 = 673200928;
      *((void *)v6 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v6, " ; (", 4uLL);
    }
    BasePtr = (llvm::detail::DoubleAPFloat *)llvm::GCRelocateInst::getBasePtr(a2);
    sub_1CC4FBF20((uint64_t)a1, BasePtr, 0);
    uint64_t v9 = *a1;
    uint64_t v10 = (_WORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v10 > 1uLL)
    {
      *uint64_t v10 = 8236;
      *((void *)v9 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v9, ", ", 2uLL);
    }
    DerivedPtr = (llvm::detail::DoubleAPFloat *)llvm::GCRelocateInst::getDerivedPtr(a2);
    sub_1CC4FBF20((uint64_t)a1, DerivedPtr, 0);
    uint64_t v12 = *a1;
    uint64_t v13 = (unsigned char *)*((void *)*a1 + 4);
    if (*((unsigned char **)*a1 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, ")", 1uLL);
    }
    else
    {
      *uint64_t v13 = 41;
      ++*((void *)v12 + 4);
    }
  }
  uint64_t result = (uint64_t)a1[28];
  if (result)
  {
    int v5 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v5();
  }
  return result;
}

llvm::raw_ostream *sub_1CC5040B4(llvm::raw_ostream *result, uint64_t a2, unsigned int a3)
{
  if (a3 != 1)
  {
    unsigned int v4 = (llvm::raw_ostream **)result;
    if (!*((_DWORD *)result + 116)) {
      llvm::LLVMContextImpl::getSyncScopeNames(a2, (void *)result + 57);
    }
    int v5 = *v4;
    uint64_t v6 = *((void *)*v4 + 4);
    if ((unint64_t)(*((void *)*v4 + 3) - v6) > 0xB)
    {
      *(_DWORD *)(v6 + 8) = 573072752;
      *(void *)uint64_t v6 = *(void *)" syncscope(\"";
      *((void *)v5 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v5, " syncscope(\"", 0xCuLL);
    }
    uint64_t v7 = (uint64_t)v4[57] + 16 * a3;
    llvm::printEscapedString(*(llvm::raw_ostream **)v7, *(void *)(v7 + 8), *v4);
    uint64_t result = *v4;
    uint64_t v8 = (_WORD *)*((void *)*v4 + 4);
    if (*((void *)*v4 + 3) - (void)v8 > 1uLL)
    {
      _WORD *v8 = 10530;
      *((void *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, "\")", 2uLL);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC5041B0(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  switch((int)result)
  {
    case 1:
      int v2 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v2 > 0xCuLL)
      {
        qmemcpy(v2, "thread_local ", 13);
        uint64_t v6 = *((void *)this + 4) + 13;
        goto LABEL_15;
      }
      uint64_t result = llvm::raw_ostream::write(this, "thread_local ", 0xDuLL);
      break;
    case 2:
      uint64_t v3 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v3 > 0x1AuLL)
      {
        qmemcpy(v3, "thread_local(localdynamic) ", 27);
        uint64_t v6 = *((void *)this + 4) + 27;
        goto LABEL_15;
      }
      uint64_t result = llvm::raw_ostream::write(this, "thread_local(localdynamic) ", 0x1BuLL);
      break;
    case 3:
      unsigned int v4 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v4 > 0x19uLL)
      {
        qmemcpy(v4, "thread_local(initialexec) ", 26);
        uint64_t v6 = *((void *)this + 4) + 26;
        goto LABEL_15;
      }
      uint64_t result = llvm::raw_ostream::write(this, "thread_local(initialexec) ", 0x1AuLL);
      break;
    case 4:
      int v5 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v5 > 0x17uLL)
      {
        qmemcpy(v5, "thread_local(localexec) ", 24);
        uint64_t v6 = *((void *)this + 4) + 24;
LABEL_15:
        *((void *)this + 4) = v6;
      }
      else
      {
        uint64_t result = llvm::raw_ostream::write(this, "thread_local(localexec) ", 0x18uLL);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_1CC504324()
{
}

void sub_1CC504338(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void **)(a1 + 8);
  int v5 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v6 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::toString(v5, (uint64_t)a2, a3, a4, a5);
  }
  else {
    llvm::detail::IEEEFloat::toString((uint64_t)v5, a2, a3, a4, a5);
  }
}

void sub_1CC504354(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v6 = *(void **)(a1 + 184);
  int v5 = *(void **)(a1 + 192);
  unsigned int v4 = (llvm::SmallPtrSetImplBase *)(a1 + 184);
  if (v5 == v6)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 204);
    uint64_t v8 = (unsigned __int8 **)&v5[v7];
    if (v7)
    {
      unint64_t v9 = 0;
      uint64_t v10 = 8 * v7;
      while ((unsigned __int8 *)v5[v9 / 8] != a2)
      {
        v9 += 8;
        if (v10 == v9) {
          goto LABEL_19;
        }
      }
      uint64_t v8 = (unsigned __int8 **)&v5[v9 / 8];
    }
LABEL_19:
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(a1 + 200);
    int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (unsigned __int8 **)&v5[v13];
    uint64_t v14 = *v8;
    if (*v8 == (unsigned __int8 *)-1)
    {
      uint64_t v15 = 0;
LABEL_25:
      if (v15) {
        uint64_t v8 = v15;
      }
      if (*v8 != a2) {
        uint64_t v8 = (unsigned __int8 **)&v5[v11];
      }
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v14 != a2)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == (unsigned __int8 *)-2;
        }
        if (v17) {
          uint64_t v15 = v8;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        uint64_t v8 = (unsigned __int8 **)&v5[v18 & v12];
        uint64_t v14 = *v8;
        if (*v8 == (unsigned __int8 *)-1) {
          goto LABEL_25;
        }
      }
    }
  }
  uint64_t v19 = 200;
  if (v5 == v6) {
    uint64_t v19 = 204;
  }
  if (v8 == &v5[*(unsigned int *)(a1 + v19)])
  {
    uint64_t v20 = *(unsigned int *)(a1 + 204);
    if (v5 == v6)
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 8 * v20;
        char v23 = (unsigned __int8 **)v5;
        while (*v23 != a2)
        {
          if (*v23 == (unsigned __int8 *)-2) {
            uint64_t v21 = v23;
          }
          ++v23;
          v22 -= 8;
          if (!v22)
          {
            if (!v21) {
              goto LABEL_37;
            }
            llvm::raw_ostream *v21 = a2;
            --*(_DWORD *)(a1 + 208);
            goto LABEL_61;
          }
        }
        goto LABEL_61;
      }
LABEL_37:
      unsigned int v24 = *(_DWORD *)(a1 + 200);
      if (v20 < v24)
      {
        *(_DWORD *)(a1 + 204) = v20 + 1;
        v5[v20] = a2;
LABEL_61:
        __p[0] = 0;
        __p[1] = 0;
        int v43 = 0;
        char v47 = 0;
        uint64_t v48 = 0;
        uint64_t v50 = __p;
        int v49 = 0;
        BOOL v42 = &unk_1F2646F30;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        unint64_t v34 = (*(_DWORD *)(a1 + 32) + 1);
        *(_DWORD *)(a1 + 32) = v34;
        uint64_t v52 = 0;
        uint64_t v53 = (void *)v34;
        uint64_t v54 = "";
        sub_1CD5A4224(a1 + 40, (uint64_t)&v53);
        int v35 = *(_DWORD *)(a1 + 48);
        LODWORD(v54) = 0;
        char v58 = 0;
        uint64_t v59 = 0;
        int v60 = 1;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        uint64_t v55 = 0;
        uint64_t v53 = &unk_1F2644C68;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v63 = &v65;
        long long v64 = xmmword_1CDB159A0;
        sub_1CBF2ECF8((uint64_t)&v53, (uint64_t)&v42);
        sub_1CC4FC73C((llvm::raw_ostream *)&v53, a2, a1);
        unsigned int v36 = *a2;
        if (v36 - 4 < 2 || v36 <= 0x22 && ((1 << v36) & 0x6FFFFFF80) != 0)
        {
          uint64_t v37 = (_WORD *)v57;
          if ((unint64_t)(v56 - v57) > 2)
          {
            *(unsigned char *)(v57 + 2) = 32;
            _WORD *v37 = 15648;
            v57 += 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v53, " = ", 3uLL);
          }
          sub_1CC4FED00((llvm::raw_ostream *)&v53, (uint64_t)a2, a1);
        }
        sub_1CBF2EF74((llvm::raw_ostream *)&v53);
        uint64_t v38 = v50;
        uint64_t v39 = *(void *)(a1 + 40) + 32 * (v35 - 1);
        uint64_t v40 = v39 + 8;
        if (*(char *)(v39 + 31) < 0) {
          operator delete(*(void **)v40);
        }
        long long v41 = *(_OWORD *)v38;
        *(void *)(v40 + 16) = v38[2];
        *(_OWORD *)uint64_t v40 = v41;
        *((unsigned char *)v38 + 23) = 0;
        *(unsigned char *)uint64_t v38 = 0;
        --*(_DWORD *)(a1 + 32);
        BOOL v42 = &unk_1F2646B98;
        if (v49 == 1 && v44) {
          MEMORY[0x1D25D9CB0](v44, 0x1000C8077774924);
        }
        if (SHIBYTE(v52) < 0) {
          operator delete(__p[0]);
        }
        return;
      }
    }
    else
    {
      unsigned int v24 = *(_DWORD *)(a1 + 200);
    }
    if (3 * v24 <= 4 * ((int)v20 - *(_DWORD *)(a1 + 208)))
    {
      if (v24 >= 0x40) {
        v24 *= 2;
      }
      else {
        unsigned int v24 = 128;
      }
    }
    else if (v24 - v20 >= v24 >> 3)
    {
      goto LABEL_42;
    }
    llvm::SmallPtrSetImplBase::Grow(v4, v24);
    unsigned int v24 = *(_DWORD *)(a1 + 200);
    int v5 = *(void **)(a1 + 192);
LABEL_42:
    unsigned int v25 = v24 - 1;
    unsigned int v26 = (v24 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v27 = (unsigned __int8 **)&v5[v26];
    int v28 = *v27;
    if (*v27 == (unsigned __int8 *)-1)
    {
      uint64_t v29 = 0;
LABEL_54:
      if (v29) {
        uint64_t v33 = v29;
      }
      else {
        uint64_t v33 = v27;
      }
      if (*v33 != a2)
      {
        if (*v33 == (unsigned __int8 *)-2) {
          --*(_DWORD *)(a1 + 208);
        }
        else {
          ++*(_DWORD *)(a1 + 204);
        }
        *uint64_t v33 = a2;
      }
    }
    else
    {
      uint64_t v29 = 0;
      int v30 = 1;
      while (v28 != a2)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == (unsigned __int8 *)-2;
        }
        if (v31) {
          uint64_t v29 = v27;
        }
        unsigned int v32 = v26 + v30++;
        unsigned int v26 = v32 & v25;
        unint64_t v27 = (unsigned __int8 **)&v5[v32 & v25];
        int v28 = *v27;
        if (*v27 == (unsigned __int8 *)-1) {
          goto LABEL_54;
        }
      }
    }
    goto LABEL_61;
  }
}

uint64_t sub_1CC5047E8(uint64_t a1)
{
  *(void *)a1 = &unk_1F2616200;
  int v2 = (char **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4)
  {
    uint64_t v7 = v3 + 32 * v4;
    do
    {
      uint64_t v8 = *(llvm::raw_ostream **)(a1 + 248);
      unint64_t v9 = (unsigned char *)*((void *)v8 + 4);
      if (*((unsigned char **)v8 + 3) == v9)
      {
        llvm::raw_ostream::write(v8, "\n", 1uLL);
      }
      else
      {
        *unint64_t v9 = 10;
        ++*((void *)v8 + 4);
      }
      uint64_t v10 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)(a1 + 248), 2 * *(_DWORD *)v3);
      unsigned int v13 = *(const char **)(v3 + 8);
      uint64_t v12 = v3 + 8;
      uint64_t v11 = v13;
      char v14 = *(unsigned char *)(v12 + 23);
      int v15 = v14;
      if (v14 >= 0) {
        int v16 = (const char *)v12;
      }
      else {
        int v16 = v11;
      }
      size_t v17 = v14 & 0x7F;
      if (v15 >= 0) {
        size_t v18 = v17;
      }
      else {
        size_t v18 = *(void *)(v12 + 8);
      }
      llvm::raw_ostream::write(v10, v16, v18);
      uint64_t v3 = v12 + 24;
    }
    while (v3 != v7);
  }
  int v5 = *(void **)(a1 + 192);
  if (v5 != *(void **)(a1 + 184)) {
    free(v5);
  }
  sub_1CD5A43F0(v2);
  return a1;
}

void sub_1CC5048E4(uint64_t a1)
{
  sub_1CC5047E8(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC50491C(llvm::raw_ostream *this, _DWORD *a2)
{
  v13[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "[", 1uLL);
  }
  else
  {
    *uint64_t v4 = 91;
    ++*((void *)this + 4);
  }
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v9);
  uint64_t v11 = v13;
  long long v12 = xmmword_1CDB15B30;
  llvm::APInt::toString((unsigned int *)&v9, &v11, 0xAu, 1, 0);
  llvm::raw_ostream::write(this, (const char *)v11, v12);
  if (v11 != v13) {
    free(v11);
  }
  int v5 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v5 > 1uLL)
  {
    *int v5 = 8236;
    *((void *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, ", ", 2uLL);
  }
  llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v7);
  uint64_t v11 = v13;
  long long v12 = xmmword_1CDB15B30;
  llvm::APInt::toString((unsigned int *)&v7, &v11, 0xAu, 1, 0);
  llvm::raw_ostream::write(this, (const char *)v11, v12);
  if (v11 != v13) {
    free(v11);
  }
  uint64_t v6 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v6)
  {
    llvm::raw_ostream::write(this, "]", 1uLL);
  }
  else
  {
    *uint64_t v6 = 93;
    ++*((void *)this + 4);
  }
  if (v8 >= 0x41 && v7) {
    MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
  }
  if (v10 >= 0x41)
  {
    if (v9) {
      MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
    }
  }
}

llvm::raw_ostream *sub_1CC504B30(uint64_t *a1, unint64_t **a2, char *__s)
{
  int v5 = (llvm::raw_ostream *)*a1;
  if (__s)
  {
    size_t v7 = strlen(__s);
    unsigned int v8 = (void *)*((void *)v5 + 4);
    if (v7 <= *((void *)v5 + 3) - (void)v8)
    {
      if (v7)
      {
        memcpy(v8, __s, v7);
        *((void *)v5 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v5, __s, v7);
    }
  }
  uint64_t v9 = *((void *)v5 + 4);
  if ((unint64_t)(*((void *)v5 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 40;
    *(_WORD *)uint64_t v9 = 8250;
    *((void *)v5 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v5, ": (", 3uLL);
  }
  unsigned int v10 = *a2;
  uint64_t v11 = a2[1];
  if (*a2 != v11)
  {
    char v12 = 0;
    do
    {
      if (v12)
      {
        unsigned int v13 = (llvm::raw_ostream *)*a1;
        char v14 = *(_WORD **)(*a1 + 32);
        if (*(void *)(*a1 + 24) - (void)v14 > 1uLL)
        {
          *char v14 = 8236;
          *((void *)v13 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v13, ", ", 2uLL);
        }
      }
      unint64_t v15 = *v10;
      unint64_t v16 = v10[1];
      v10 += 2;
      sub_1CC504F40(a1, v15, v16);
      char v12 = 1;
    }
    while (v10 != v11);
  }
  uint64_t result = (llvm::raw_ostream *)*a1;
  size_t v18 = *(unsigned char **)(*a1 + 32);
  if (*(unsigned char **)(*a1 + 24) == v18)
  {
    return llvm::raw_ostream::write(result, ")", 1uLL);
  }
  else
  {
    *size_t v18 = 41;
    ++*((void *)result + 4);
  }
  return result;
}

llvm::raw_ostream *sub_1CC504CC4(uint64_t *a1, void *a2, char *__s)
{
  int v5 = (llvm::raw_ostream *)*a1;
  if (__s)
  {
    size_t v7 = strlen(__s);
    unsigned int v8 = (void *)*((void *)v5 + 4);
    if (v7 <= *((void *)v5 + 3) - (void)v8)
    {
      if (v7)
      {
        memcpy(v8, __s, v7);
        *((void *)v5 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v5, __s, v7);
    }
  }
  uint64_t v9 = *((void *)v5 + 4);
  if ((unint64_t)(*((void *)v5 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 40;
    *(_WORD *)uint64_t v9 = 8250;
    *((void *)v5 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v5, ": (", 3uLL);
  }
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    char v11 = 0;
    uint64_t v12 = *a2 + 16;
    do
    {
      if (v11)
      {
        unsigned int v13 = (llvm::raw_ostream *)*a1;
        char v14 = *(_WORD **)(*a1 + 32);
        if (*(void *)(*a1 + 24) - (void)v14 > 1uLL)
        {
          *char v14 = 8236;
          *((void *)v13 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v13, ", ", 2uLL);
        }
      }
      unint64_t v15 = (llvm::raw_ostream *)*a1;
      unint64_t v16 = *(unsigned char **)(*a1 + 32);
      if (*(unsigned char **)(*a1 + 24) == v16)
      {
        llvm::raw_ostream::write(v15, "(", 1uLL);
      }
      else
      {
        *unint64_t v16 = 40;
        ++*((void *)v15 + 4);
      }
      sub_1CC504F40(a1, *(void *)(v12 - 16), *(void *)(v12 - 8));
      if (*(void *)v12 != *(void *)(v12 + 8))
      {
        size_t v17 = (llvm::raw_ostream *)*a1;
        size_t v18 = *(_WORD **)(*a1 + 32);
        if (*(void *)(*a1 + 24) - (void)v18 > 1uLL)
        {
          *size_t v18 = 8236;
          *((void *)v17 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v17, ", ", 2uLL);
        }
        sub_1CC5052EC((llvm::raw_ostream **)a1, (unint64_t **)v12);
      }
      uint64_t v19 = (llvm::raw_ostream *)*a1;
      uint64_t v20 = *(unsigned char **)(*a1 + 32);
      if (*(unsigned char **)(*a1 + 24) == v20)
      {
        llvm::raw_ostream::write(v19, ")", 1uLL);
      }
      else
      {
        *uint64_t v20 = 41;
        ++*((void *)v19 + 4);
      }
      uint64_t v21 = v12 + 24;
      v12 += 40;
      char v11 = 1;
    }
    while (v21 != v10);
  }
  uint64_t result = (llvm::raw_ostream *)*a1;
  char v23 = *(unsigned char **)(*a1 + 32);
  if (*(unsigned char **)(*a1 + 24) == v23)
  {
    return llvm::raw_ostream::write(result, ")", 1uLL);
  }
  else
  {
    *char v23 = 41;
    ++*((void *)result + 4);
  }
  return result;
}

llvm::raw_ostream *sub_1CC504F40(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v35 = a2;
  unint64_t v36 = a3;
  uint64_t v4 = sub_1CD4F29A8(a1[2] + 56, &v35);
  if (v4 == v5)
  {
    int v28 = (llvm::raw_ostream *)*a1;
    uint64_t v29 = *(void *)(*a1 + 32);
    if ((unint64_t)(*(void *)(*a1 + 24) - v29) > 9)
    {
      *(_WORD *)(v29 + 8) = 10272;
      *(void *)uint64_t v29 = *(void *)"vFuncId: (";
      *((void *)v28 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v28, "vFuncId: (", 0xAuLL);
    }
    int v30 = (llvm::raw_ostream *)*a1;
    uint64_t v31 = *(void *)(*a1 + 32);
    if ((unint64_t)(*(void *)(*a1 + 24) - v31) > 5)
    {
      *(_WORD *)(v31 + 4) = 8250;
      *(_DWORD *)uint64_t v31 = 1684632935;
      *((void *)v30 + 4) += 6;
    }
    else
    {
      int v30 = llvm::raw_ostream::write(v30, "guid: ", 6uLL);
    }
    sub_1CD098D14(v30, v35, 0, 0, 0);
    unsigned int v32 = (llvm::raw_ostream *)*a1;
    uint64_t v33 = *(void *)(*a1 + 32);
    if ((unint64_t)(*(void *)(*a1 + 24) - v33) > 9)
    {
      *(_WORD *)(v33 + 8) = 8250;
      *(void *)uint64_t v33 = *(void *)", offset: ";
      *((void *)v32 + 4) += 10;
    }
    else
    {
      unsigned int v32 = llvm::raw_ostream::write(v32, ", offset: ", 0xAuLL);
    }
    sub_1CD098D14(v32, v36, 0, 0, 0);
    uint64_t result = (llvm::raw_ostream *)*a1;
    unint64_t v34 = *(unsigned char **)(*a1 + 32);
    if (*(unsigned char **)(*a1 + 24) == v34)
    {
      return llvm::raw_ostream::write(result, ")", 1uLL);
    }
    else
    {
      *unint64_t v34 = 41;
      ++*((void *)result + 4);
    }
  }
  else
  {
    uint64_t v6 = v4;
    size_t v7 = v5;
    char v8 = 0;
    do
    {
      if (v8)
      {
        uint64_t v9 = (llvm::raw_ostream *)*a1;
        uint64_t v10 = *(_WORD **)(*a1 + 32);
        if (*(void *)(*a1 + 24) - (void)v10 > 1uLL)
        {
          *uint64_t v10 = 8236;
          *((void *)v9 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v9, ", ", 2uLL);
        }
      }
      char v11 = (llvm::raw_ostream *)*a1;
      uint64_t v12 = *(void *)(*a1 + 32);
      if ((unint64_t)(*(void *)(*a1 + 24) - v12) > 9)
      {
        *(_WORD *)(v12 + 8) = 10272;
        *(void *)uint64_t v12 = *(void *)"vFuncId: (";
        *((void *)v11 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v11, "vFuncId: (", 0xAuLL);
      }
      char v13 = *((unsigned char *)v6 + 63);
      if (v13 >= 0) {
        char v14 = (unsigned __int8 *)(v6 + 5);
      }
      else {
        char v14 = (unsigned __int8 *)v6[5];
      }
      if (v13 >= 0) {
        size_t v15 = v13 & 0x7F;
      }
      else {
        size_t v15 = v6[6];
      }
      int TypeIdSlot = llvm::SlotTracker::getTypeIdSlot(a1[4], v14, v15);
      size_t v17 = (llvm::raw_ostream *)*a1;
      size_t v18 = *(unsigned char **)(*a1 + 32);
      if (*(unsigned char **)(*a1 + 24) == v18)
      {
        size_t v17 = llvm::raw_ostream::write(v17, "^", 1uLL);
      }
      else
      {
        *size_t v18 = 94;
        ++*((void *)v17 + 4);
      }
      unint64_t v19 = TypeIdSlot;
      if (TypeIdSlot < 0)
      {
        unint64_t v19 = -(uint64_t)TypeIdSlot;
        int v20 = 1;
      }
      else
      {
        int v20 = 0;
      }
      sub_1CD098D14(v17, v19, 0, 0, v20);
      uint64_t v21 = (llvm::raw_ostream *)*a1;
      uint64_t v22 = *(void *)(*a1 + 32);
      if ((unint64_t)(*(void *)(*a1 + 24) - v22) > 9)
      {
        *(_WORD *)(v22 + 8) = 8250;
        *(void *)uint64_t v22 = *(void *)", offset: ";
        *((void *)v21 + 4) += 10;
      }
      else
      {
        uint64_t v21 = llvm::raw_ostream::write(v21, ", offset: ", 0xAuLL);
      }
      sub_1CD098D14(v21, v36, 0, 0, 0);
      uint64_t result = (llvm::raw_ostream *)*a1;
      unsigned int v24 = *(unsigned char **)(*a1 + 32);
      if (*(unsigned char **)(*a1 + 24) == v24)
      {
        uint64_t result = llvm::raw_ostream::write(result, ")", 1uLL);
      }
      else
      {
        *unsigned int v24 = 41;
        ++*((void *)result + 4);
      }
      unsigned int v25 = (void *)v6[1];
      if (v25)
      {
        do
        {
          unsigned int v26 = v25;
          unsigned int v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          unsigned int v26 = (void *)v6[2];
          BOOL v27 = *v26 == (void)v6;
          uint64_t v6 = v26;
        }
        while (!v27);
      }
      char v8 = 1;
      uint64_t v6 = v26;
    }
    while (v26 != v7);
  }
  return result;
}

llvm::raw_ostream *sub_1CC5052EC(llvm::raw_ostream **a1, unint64_t **a2)
{
  uint64_t v4 = *a1;
  int v5 = (_DWORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 673200755;
    *int v5 = 1936159329;
    *((void *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v4, "args: (", 7uLL);
  }
  uint64_t v6 = *a2;
  size_t v7 = a2[1];
  if (*a2 != v7)
  {
    char v8 = 0;
    do
    {
      unint64_t v9 = *v6;
      if (v8)
      {
        uint64_t v10 = *a1;
        char v11 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v11 > 1uLL)
        {
          *char v11 = 8236;
          *((void *)v10 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v10, ", ", 2uLL);
        }
      }
      sub_1CD098D14(*a1, v9, 0, 0, 0);
      ++v6;
      char v8 = 1;
    }
    while (v6 != v7);
  }
  uint64_t result = *a1;
  char v13 = (unsigned char *)*((void *)*a1 + 4);
  if (*((unsigned char **)*a1 + 3) == v13)
  {
    return llvm::raw_ostream::write(result, ")", 1uLL);
  }
  else
  {
    *char v13 = 41;
    ++*((void *)result + 4);
  }
  return result;
}

uint64_t sub_1CC505444(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC5054DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC505574(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CC505608(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5A49F8(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1CC5056D4(uint64_t *a1, uint64_t a2)
{
  v11[16] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  *(void *)uint64_t v10 = 0x800000000;
  uint64_t v6 = *(unsigned int *)(v2 + 16);
  *(void *)&long long v8 = v2 + *(unsigned int *)(v2 + 12) + 25;
  *((void *)&v8 + 1) = v6;
  *(void *)unint64_t v9 = v11;
  llvm::StringRef::split(&v8, (uint64_t)v9, ",", 1uLL, -1, 1);
  int v7 = *(void **)v9;
  BOOL v3 = sub_1CD5A4EF4(*(uint64_t *)v9, v10[0], *(void **)a2, *(void *)(a2 + 8));
  if (v7 != v11) {
    free(v7);
  }
  return v3;
}

void sub_1CC5057B4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v24[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (*a1)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    uint64_t v23 = 0x800000000;
    uint64_t v4 = *(unsigned int *)(v3 + 16);
    uint64_t v5 = v3 + *(unsigned int *)(v3 + 12);
    *((void *)&v21 + 1) = v4;
    uint64_t v22 = v24;
    *(void *)&long long v21 = v5 + 25;
    llvm::StringRef::split(&v21, (uint64_t)&v22, ",", 1uLL, -1, 1);
    uint64_t v6 = (char *)v22;
    if (v23)
    {
      int v20 = (char *)v22 + 16 * v23;
      do
      {
        long long v21 = *(_OWORD *)v6;
        int v7 = *(_DWORD *)(a2 + 16);
        if (v7)
        {
          uint64_t v8 = *(void *)a2;
          unsigned int v9 = sub_1CD0B03C8((void *)v21, v21 + *((void *)&v21 + 1));
          uint64_t v10 = 0;
          int v11 = v7 - 1;
          int v19 = 1;
          long long v12 = v21;
          while (1)
          {
            unsigned int v13 = v9 & v11;
            uint64_t v14 = v8 + 16 * (v9 & v11);
            size_t v15 = *(const void **)v14;
            if (*(void *)v14 == -1)
            {
              if ((void)v12 == -1) {
                goto LABEL_26;
              }
            }
            else if (v15 == (const void *)-2)
            {
              if ((void)v12 == -2) {
                goto LABEL_26;
              }
            }
            else if (*((void *)&v12 + 1) == *(void *)(v14 + 8) {
                   && (!*((void *)&v12 + 1) || !memcmp((const void *)v12, *(const void **)v14, *((size_t *)&v12 + 1))))
            }
            {
              goto LABEL_26;
            }
            if (v15 == (const void *)-1) {
              break;
            }
            if (v10) {
              BOOL v16 = 0;
            }
            else {
              BOOL v16 = v15 == (const void *)-2;
            }
            if (v16) {
              uint64_t v10 = v8 + 16 * v13;
            }
            unsigned int v9 = v19 + v13;
            ++v19;
          }
          if (v10) {
            uint64_t v17 = v10;
          }
          else {
            uint64_t v17 = v8 + 16 * v13;
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        size_t v18 = (_OWORD *)sub_1CC18A5D0(a2, (uint64_t)&v21, (uint64_t)&v21, v17);
        *size_t v18 = v21;
LABEL_26:
        v6 += 16;
      }
      while (v6 != v20);
      uint64_t v6 = (char *)v22;
    }
    if (v6 != (char *)v24) {
      free(v6);
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
}

unint64_t sub_1CC5059B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)a1;
    unint64_t result = sub_1CD0B03C8(*(void **)a2, *(void *)a2 + *(void *)(a2 + 8));
    uint64_t v9 = 0;
    int v10 = v6 - 1;
    int v11 = *(const void **)a2;
    for (int i = 1; ; int i = v21 + 1)
    {
      int v21 = i;
      unsigned int v13 = result & v10;
      unint64_t v14 = v7 + 16 * (result & v10);
      size_t v15 = *(const void **)v14;
      if (*(void *)v14 == -1)
      {
        if (v11 == (const void *)-1) {
          goto LABEL_11;
        }
      }
      else if (v15 == (const void *)-2)
      {
        if (v11 == (const void *)-2) {
          goto LABEL_11;
        }
      }
      else
      {
        size_t v16 = *(void *)(a2 + 8);
        if (v16 == *(void *)(v14 + 8))
        {
          if (!v16 || (unint64_t result = memcmp(v11, *(const void **)v14, v16), !result))
          {
LABEL_11:
            char v17 = 0;
            goto LABEL_12;
          }
        }
      }
      if (v15 == (const void *)-1) {
        break;
      }
      if (v9) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v15 == (const void *)-2;
      }
      if (v20) {
        uint64_t v9 = v7 + 16 * v13;
      }
      unint64_t result = v21 + v13;
    }
    if (v9) {
      uint64_t v19 = v9;
    }
    else {
      uint64_t v19 = v7 + 16 * v13;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  unint64_t result = sub_1CC18A5D0(a1, a2, a2, v19);
  unint64_t v14 = result;
  *(_OWORD *)unint64_t result = *(_OWORD *)a2;
  char v17 = 1;
LABEL_12:
  uint64_t v18 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v18;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

uint64_t sub_1CC505AF8()
{
  uint64_t v0 = 0;
  llvm::KnownAssumptionStrings = 0;
  unk_1EBD06420 = 0;
  qword_1EBD06428 = 0x800000000;
  do
  {
    sub_1CC0D7F54((llvm::StringMapImpl *)&llvm::KnownAssumptionStrings, (unsigned __int8 *)(&off_1E68307D8)[v0], (size_t)(&off_1E68307D8)[v0 + 1]);
    v0 += 2;
  }
  while (v0 != 10);

  return __cxa_atexit((void (*)(void *))sub_1CD5A4EF0, &llvm::KnownAssumptionStrings, &dword_1CB82C000);
}

unint64_t llvm::Attribute::get(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  v38[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  __s2 = v35;
  v35[0] = a2;
  uint64_t v34 = 0x2000000001;
  if (!a3)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCBE588))
    {
      unint64_t v31 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v31 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v31;
      __cxa_guard_release(&qword_1EBCBE588);
    }
    uint64_t v5 = qword_1EBCBE580 ^ v35[0];
    unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v35[0]) | 4) ^ v5);
    uint64_t v7 = *(void *)(v4 + 224)
       + 8
       * ((-348639895
         * ((((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 32) >> 15) ^ (-348639895
                                                                                           * (v5 ^ (v6 >> 47) ^ v6)))) & (*(_DWORD *)(v4 + 232) - 1));
    unint64_t v8 = *(void *)v7;
    __s1 = v38;
    uint64_t v37 = 0x2000000000;
    if (v8) {
      BOOL v9 = (v8 & 1) == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      while (1)
      {
        sub_1CC5097B4((unsigned int *)v8, (unsigned int *)&__s1);
        if (v34 == v37)
        {
          int v10 = __s1;
          if (!memcmp(__s1, __s2, 4 * v34)) {
            break;
          }
        }
        LODWORD(v37) = 0;
        unint64_t v8 = *(void *)v8;
        if (v8) {
          BOOL v11 = (v8 & 1) == 0;
        }
        else {
          BOOL v11 = 0;
        }
        if (!v11)
        {
          unint64_t v8 = 0;
          int v10 = __s1;
          goto LABEL_16;
        }
      }
      uint64_t v7 = 0;
LABEL_16:
      if (v10 != v38) {
        free(v10);
      }
      if (v8) {
        goto LABEL_19;
      }
    }
    uint64_t v13 = v4 + 224;
    *(void *)(v4 + 2120) += 16;
    uint64_t v14 = *(void *)(v4 + 2040);
    if (((v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v14 + 16 > *(void *)(v4 + 2048) - v14)
    {
      unsigned int v23 = *(_DWORD *)(v4 + 2064) >> 7;
      if (v23 >= 0x1E) {
        LOBYTE(v23) = 30;
      }
      uint64_t v24 = 4096 << v23;
      unint64_t v8 = (unint64_t)operator new(4096 << v23, (std::align_val_t)8uLL);
      unsigned int v25 = *(_DWORD *)(v4 + 2064);
      if (v25 >= *(_DWORD *)(v4 + 2068)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v4 + 2056) + 8 * v25) = v8;
      ++*(_DWORD *)(v4 + 2064);
      *(void *)(v4 + 2048) = v8 + v24;
    }
    else
    {
      unint64_t v8 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v4 + 2040) = v8 + 16;
    *(void *)unint64_t v8 = 0;
    *(unsigned char *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 12) = a2;
LABEL_25:
    int v15 = *(_DWORD *)(v4 + 232);
    unsigned int v16 = *(_DWORD *)(v4 + 236) + 1;
    if (v16 > 2 * v15)
    {
      llvm::FoldingSetBase::GrowBucketCount(v13, 2 * v15, (uint64_t)off_1F2616218);
      __s1 = v38;
      uint64_t v37 = 0x2000000000;
      uint64_t v7 = *(void *)(v4 + 224)
         + 8
         * ((*(_DWORD *)(v4 + 232) - 1) & sub_1CD5A5FD8(v27, (unsigned int *)v8, (unsigned int *)&__s1));
      if (__s1 != v38) {
        free(__s1);
      }
      unsigned int v16 = *(_DWORD *)(v4 + 236) + 1;
    }
    *(_DWORD *)(v4 + 236) = v16;
    uint64_t v17 = *(void *)v7;
    if (!*(void *)v7) {
      uint64_t v17 = v7 | 1;
    }
    *(void *)unint64_t v8 = v17;
    *(void *)uint64_t v7 = v8;
    goto LABEL_19;
  }
  *(void *)&v35[1] = a3;
  LODWORD(v34) = 3;
  uint64_t v13 = v4 + 224;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v32 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v32 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v32;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v19 = __ROR8__(*(void *)&v35[1] + 12, 12);
  uint64_t v20 = (-348639895
       * ((((0x9DDFEA08EB382D69
                         * (v19 ^ ((0x9DDFEA08EB382D69 * (*(void *)v35 ^ qword_1EBCBE580 ^ v19)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(void *)v35 ^ qword_1EBCBE580 ^ v19)))) >> 32) >> 15) ^ (-348639895 * (v19 ^ (((0x9DDFEA08EB382D69 * (*(void *)v35 ^ qword_1EBCBE580 ^ v19)) >> 32) >> 15) ^ (-348639895 * (v35[0] ^ qword_1EBCBE580 ^ v19)))))) ^ v35[1];
  uint64_t v7 = *(void *)(v4 + 224) + 8 * ((*(_DWORD *)(v4 + 232) - 1) & v20);
  unint64_t v8 = *(void *)v7;
  __s1 = v38;
  uint64_t v37 = 0x2000000000;
  if (v8) {
    BOOL v21 = (v8 & 1) == 0;
  }
  else {
    BOOL v21 = 0;
  }
  if (!v21) {
    goto LABEL_49;
  }
  while (!sub_1CC512084(v4 + 224, (unsigned int *)v8, (uint64_t)&__s2, v20, (unsigned int *)&__s1))
  {
    LODWORD(v37) = 0;
    unint64_t v8 = *(void *)v8;
    if (v8) {
      BOOL v22 = (v8 & 1) == 0;
    }
    else {
      BOOL v22 = 0;
    }
    if (!v22)
    {
      unint64_t v8 = 0;
      goto LABEL_46;
    }
  }
  uint64_t v7 = 0;
LABEL_46:
  if (__s1 != v38) {
    free(__s1);
  }
  if (!v8)
  {
LABEL_49:
    *(void *)(v4 + 2120) += 24;
    uint64_t v26 = *(void *)(v4 + 2040);
    if (((v26 + 7) & 0xFFFFFFFFFFFFFFF8) - v26 + 24 > *(void *)(v4 + 2048) - v26)
    {
      unsigned int v28 = *(_DWORD *)(v4 + 2064) >> 7;
      if (v28 >= 0x1E) {
        LOBYTE(v28) = 30;
      }
      uint64_t v29 = 4096 << v28;
      unint64_t v8 = (unint64_t)operator new(4096 << v28, (std::align_val_t)8uLL);
      unsigned int v30 = *(_DWORD *)(v4 + 2064);
      if (v30 >= *(_DWORD *)(v4 + 2068)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v4 + 2056) + 8 * v30) = v8;
      ++*(_DWORD *)(v4 + 2064);
      *(void *)(v4 + 2048) = v8 + v29;
    }
    else
    {
      unint64_t v8 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v4 + 2040) = v8 + 24;
    *(void *)unint64_t v8 = 0;
    *(unsigned char *)(v8 + 8) = 1;
    *(_DWORD *)(v8 + 12) = a2;
    *(void *)(v8 + 16) = a3;
    goto LABEL_25;
  }
LABEL_19:
  if (__s2 != v35) {
    free(__s2);
  }
  return v8;
}

unsigned int *llvm::Attribute::get(uint64_t *a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t a5)
{
  size_t v7 = a3;
  v28[16] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  unsigned int v23 = v25;
  uint64_t v24 = 0x2000000000;
  llvm::FoldingSetNodeID::AddString((unsigned int *)&v23, a2, a3);
  if (a5) {
    llvm::FoldingSetNodeID::AddString((unsigned int *)&v23, a4, a5);
  }
  unint64_t v10 = sub_1CC13A6B8(v23, (uint64_t)&v23[4 * v24]);
  uint64_t v11 = *(void *)(v9 + 224) + 8 * ((*(_DWORD *)(v9 + 232) - 1) & v10);
  long long v12 = *(unsigned int **)v11;
  uint64_t v26 = v28;
  uint64_t v27 = 0x2000000000;
  if (v12) {
    BOOL v13 = (v12 & 1) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  while (!sub_1CC512084(v9 + 224, v12, (uint64_t)&v23, v10, (unsigned int *)&v26))
  {
    LODWORD(v27) = 0;
    long long v12 = *(unsigned int **)v12;
    if (v12) {
      BOOL v14 = (v12 & 1) == 0;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14)
    {
      long long v12 = 0;
      goto LABEL_15;
    }
  }
  uint64_t v11 = 0;
LABEL_15:
  if (v26 != v28) {
    free(v26);
  }
  if (!v12)
  {
LABEL_18:
    uint64_t v15 = sub_1CB906F34((uint64_t *)(v9 + 2040), v7 + a5 + 26, 3);
    long long v12 = (unsigned int *)v15;
    *(void *)uint64_t v15 = 0;
    *(unsigned char *)(v15 + 8) = 2;
    *(_DWORD *)(v15 + 12) = v7;
    *(_DWORD *)(v15 + 16) = a5;
    uint64_t v16 = v15 + 24;
    if (v7) {
      memmove((void *)(v15 + 24), a2, v7);
    }
    *(unsigned char *)(v16 + v7) = 0;
    if (a5)
    {
      memmove((void *)(v16 + (v7 + 1)), a4, a5);
      LODWORD(v7) = v12[3];
      int v17 = v12[4] + 1;
    }
    else
    {
      int v17 = 1;
    }
    *(unsigned char *)(v16 + (v17 + v7)) = 0;
    int v18 = *(_DWORD *)(v9 + 232);
    unsigned int v19 = *(_DWORD *)(v9 + 236) + 1;
    if (v19 > 2 * v18)
    {
      llvm::FoldingSetBase::GrowBucketCount(v9 + 224, 2 * v18, (uint64_t)off_1F2616218);
      uint64_t v26 = v28;
      uint64_t v27 = 0x2000000000;
      uint64_t v11 = *(void *)(v9 + 224)
          + 8 * ((*(_DWORD *)(v9 + 232) - 1) & sub_1CD5A5FD8(v22, v12, (unsigned int *)&v26));
      if (v26 != v28) {
        free(v26);
      }
      unsigned int v19 = *(_DWORD *)(v9 + 236) + 1;
    }
    *(_DWORD *)(v9 + 236) = v19;
    uint64_t v20 = *(void *)v11;
    if (!*(void *)v11) {
      uint64_t v20 = v11 | 1;
    }
    *(void *)long long v12 = v20;
    *(void *)uint64_t v11 = v12;
  }
  if (v23 != v25) {
    free(v23);
  }
  return v12;
}

unint64_t llvm::Attribute::get(uint64_t *a1, int a2, uint64_t a3)
{
  v27[16] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  v23[0] = v24;
  *(_DWORD *)uint64_t v24 = a2;
  *(void *)&v24[4] = a3;
  v23[1] = (void *)0x2000000003;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v22 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v22 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v22;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v6 = 0x9DDFEA08EB382D69 * (*(void *)v24 ^ qword_1EBCBE580 ^ __ROR8__(*(void *)&v24[4] + 12, 12));
  unint64_t v7 = __ROR8__(*(void *)&v24[4] + 12, 12) ^ (v6 >> 47);
  uint64_t v8 = (-348639895
      * ((((0x9DDFEA08EB382D69 * (v7 ^ v6)) >> 32) >> 15) ^ (-348639895
                                                                           * (v7 ^ v6)))) ^ *(_DWORD *)&v24[4];
  uint64_t v9 = *(void *)(v5 + 224) + 8 * ((*(_DWORD *)(v5 + 232) - 1) & v8);
  unint64_t v10 = *(void *)v9;
  unsigned int v25 = v27;
  uint64_t v26 = 0x2000000000;
  if (v10) {
    BOOL v11 = (v10 & 1) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11) {
    goto LABEL_20;
  }
  while (!sub_1CC512084(v5 + 224, (unsigned int *)v10, (uint64_t)v23, v8, (unsigned int *)&v25))
  {
    LODWORD(v26) = 0;
    unint64_t v10 = *(void *)v10;
    if (v10) {
      BOOL v12 = (v10 & 1) == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      unint64_t v10 = 0;
      goto LABEL_14;
    }
  }
  uint64_t v9 = 0;
LABEL_14:
  if (v25 != v27) {
    free(v25);
  }
  if (!v10)
  {
LABEL_20:
    *(void *)(v5 + 2120) += 24;
    uint64_t v14 = *(void *)(v5 + 2040);
    if (((v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v14 + 24 > *(void *)(v5 + 2048) - v14)
    {
      unsigned int v18 = *(_DWORD *)(v5 + 2064) >> 7;
      if (v18 >= 0x1E) {
        LOBYTE(v18) = 30;
      }
      uint64_t v19 = 4096 << v18;
      unint64_t v10 = (unint64_t)operator new(4096 << v18, (std::align_val_t)8uLL);
      unsigned int v20 = *(_DWORD *)(v5 + 2064);
      if (v20 >= *(_DWORD *)(v5 + 2068)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v5 + 2056) + 8 * v20) = v10;
      ++*(_DWORD *)(v5 + 2064);
      *(void *)(v5 + 2048) = v10 + v19;
    }
    else
    {
      unint64_t v10 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v5 + 2040) = v10 + 24;
    *(void *)unint64_t v10 = 0;
    *(unsigned char *)(v10 + 8) = 3;
    *(_DWORD *)(v10 + 12) = a2;
    *(void *)(v10 + 16) = a3;
    int v15 = *(_DWORD *)(v5 + 232);
    unsigned int v16 = *(_DWORD *)(v5 + 236) + 1;
    if (v16 > 2 * v15)
    {
      llvm::FoldingSetBase::GrowBucketCount(v5 + 224, 2 * v15, (uint64_t)off_1F2616218);
      unsigned int v25 = v27;
      uint64_t v26 = 0x2000000000;
      uint64_t v9 = *(void *)(v5 + 224)
         + 8
         * ((*(_DWORD *)(v5 + 232) - 1) & sub_1CD5A5FD8(v21, (unsigned int *)v10, (unsigned int *)&v25));
      if (v25 != v27) {
        free(v25);
      }
      unsigned int v16 = *(_DWORD *)(v5 + 236) + 1;
    }
    *(_DWORD *)(v5 + 236) = v16;
    uint64_t v17 = *(void *)v9;
    if (!*(void *)v9) {
      uint64_t v17 = v9 | 1;
    }
    *(void *)unint64_t v10 = v17;
    *(void *)uint64_t v9 = v10;
  }
  if (v23[0] != v24) {
    free(v23[0]);
  }
  return v10;
}

unint64_t llvm::Attribute::getWithAlignment(uint64_t *a1, char a2)
{
  return llvm::Attribute::get(a1, 0x4Au, 1 << a2);
}

unint64_t llvm::Attribute::getWithStackAlignment(uint64_t *a1, char a2)
{
  return llvm::Attribute::get(a1, 0x4Eu, 1 << a2);
}

unint64_t llvm::Attribute::getWithDereferenceableBytes(llvm::Attribute *this, llvm::LLVMContext *a2)
{
  return llvm::Attribute::get((uint64_t *)this, 0x4Cu, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithByRefType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 68, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithPreallocatedType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 72, (uint64_t)a2);
}

uint64_t llvm::Attribute::getAttrKindFromName(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0x100000024;
  int v4 = 1;
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 != 28520 || *(unsigned char *)(a1 + 2) != 116)
      {
        uint64_t v2 = 0;
        goto LABEL_7;
      }
      uint64_t v3 = 0x100000008;
      goto LABEL_534;
    case 4:
      if (*(_DWORD *)a1 == 1684828003)
      {
        uint64_t v3 = 0x100000005;
      }
      else
      {
        if (*(_DWORD *)a1 != 1953719662) {
          goto LABEL_29;
        }
        uint64_t v3 = 0x100000012;
      }
      goto LABEL_534;
    case 5:
      if (*(_DWORD *)a1 == 1701998185 && *(unsigned char *)(a1 + 4) == 103)
      {
        uint64_t v3 = 0x10000000ALL;
      }
      else
      {
        if (*(_DWORD *)a1 != 1701536110 || *(unsigned char *)(a1 + 4) != 100)
        {
LABEL_29:
          uint64_t v2 = 0;
          int v9 = 0;
          int v4 = 1;
          goto LABEL_147;
        }
        uint64_t v3 = 0x100000011;
      }
      goto LABEL_534;
    case 6:
      if (*(_DWORD *)a1 != 1634561385 || *(_WORD *)(a1 + 4) != 26482) {
        goto LABEL_63;
      }
      uint64_t v3 = 0x100000009;
      goto LABEL_534;
    case 7:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)(a1 + 3) == 1852404844)
      {
        uint64_t v3 = 0x100000004;
      }
      else if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)(a1 + 3) == 1702521203)
      {
        uint64_t v3 = 0x10000000FLL;
      }
      else
      {
        if (*(_DWORD *)a1 != 1818324846 || *(_DWORD *)(a1 + 3) != 1935763820)
        {
          uint64_t v2 = 0;
          int v4 = 1;
          int v9 = 1;
          goto LABEL_147;
        }
        uint64_t v3 = 0x100000013;
      }
      goto LABEL_534;
    case 8:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      goto LABEL_140;
    case 9:
      if (*(void *)a1 == 0x6C626174706D756ALL && *(unsigned char *)(a1 + 8) == 101)
      {
        uint64_t v3 = 0x10000000ELL;
        goto LABEL_534;
      }
      if (a2 != 9)
      {
LABEL_63:
        uint64_t v2 = 0;
        int v4 = 1;
        goto LABEL_140;
      }
      if (*(void *)a1 == 0x69746C6975626F6ELL && *(unsigned char *)(a1 + 8) == 110)
      {
        uint64_t v3 = 0x100000014;
      }
      else if (*(void *)a1 == 0x7275747061636F6ELL && *(unsigned char *)(a1 + 8) == 101)
      {
        uint64_t v3 = 0x100000016;
      }
      else
      {
        uint64_t v2 = 0;
        LOBYTE(v9) = 0;
        if (*(void *)a1 == 0x6C69666F72706F6ELL && *(unsigned char *)(a1 + 8) == 101)
        {
          uint64_t v3 = 0x10000001DLL;
        }
        else if (*(void *)a1 == 0x7372756365726F6ELL && *(unsigned char *)(a1 + 8) == 101)
        {
          uint64_t v3 = 0x10000001ELL;
        }
        else
        {
          if (*(void *)a1 != 0x6E6F7A6465726F6ELL || *(unsigned char *)(a1 + 8) != 101)
          {
            int v4 = 1;
            int v34 = 1;
            goto LABEL_223;
          }
          uint64_t v3 = 0x10000001FLL;
        }
      }
      goto LABEL_534;
    case 10:
      if (*(void *)a1 == 0x696C61636F6C6C61 && *(_WORD *)(a1 + 8) == 28263)
      {
        uint64_t v3 = 0x100000001;
      }
      else if (*(void *)a1 == 0x6E6F6D656D677261 && *(_WORD *)(a1 + 8) == 31084)
      {
        uint64_t v3 = 0x100000003;
      }
      else if (*(void *)a1 == 0x65677265766E6F63 && *(_WORD *)(a1 + 8) == 29806)
      {
        uint64_t v3 = 0x100000006;
      }
      else if (*(void *)a1 == 0x6968656E696C6E69 && *(_WORD *)(a1 + 8) == 29806)
      {
        uint64_t v3 = 0x10000000DLL;
      }
      else if (*(void *)a1 == 0x61626C6C61636F6ELL && *(_WORD *)(a1 + 8) == 27491)
      {
        uint64_t v3 = 0x100000015;
      }
      else if (*(void *)a1 == 0x6568635F66636F6ELL && *(_WORD *)(a1 + 8) == 27491)
      {
        uint64_t v3 = 0x100000017;
      }
      else if (*(void *)a1 == 0x7973617466697773 && *(_WORD *)(a1 + 8) == 25454)
      {
        uint64_t v3 = 0x10000003ELL;
      }
      else if (*(void *)a1 == 0x7272657466697773 && *(_WORD *)(a1 + 8) == 29295)
      {
        uint64_t v3 = 0x10000003FLL;
      }
      else if (*(void *)a1 == 0x757465726C6C6977 && *(_WORD *)(a1 + 8) == 28274)
      {
        uint64_t v3 = 0x100000041;
      }
      else
      {
        if (*(void *)a1 != 0x6174736E67696C61 || *(_WORD *)(a1 + 8) != 27491)
        {
          uint64_t v2 = 0;
          goto LABEL_533;
        }
        uint64_t v3 = 0x10000004ELL;
      }
      goto LABEL_534;
    case 12:
      if (*(void *)a1 == 0x6E69737961776C61 && *(_DWORD *)(a1 + 8) == 1701734764)
      {
        int v4 = 0;
        uint64_t v2 = 0x100000002;
        goto LABEL_140;
      }
      if (*(void *)a1 != 0x676F72707473756DLL || *(_DWORD *)(a1 + 8) != 1936942450)
      {
        uint64_t v2 = 0;
        int v4 = 1;
        goto LABEL_114;
      }
      uint64_t v3 = 0x100000010;
      goto LABEL_534;
    case 19:
      if (*(void *)a1 != 0x7373656363616E69
        || *(void *)(a1 + 8) != 0x6F6D656D656C6269
        || *(void *)(a1 + 11) != 0x796C6E6F6D656D65)
      {
        int v32 = 0;
        uint64_t v2 = 0;
        int v9 = 0;
        int v4 = 1;
        goto LABEL_241;
      }
      uint64_t v3 = 0x10000000BLL;
      goto LABEL_534;
    default:
      if (a2 == 29)
      {
        if (*(void *)a1 ^ 0x7373656363616E69 | *(void *)(a1 + 8) ^ 0x5F6D656D656C6269 | *(void *)(a1 + 16) ^ 0x656D6772615F726FLL | *(void *)(a1 + 21) ^ 0x796C6E6F6D656D67) {
          uint64_t v3 = 0;
        }
        else {
          uint64_t v3 = 0x10000000CLL;
        }
        goto LABEL_534;
      }
      if (a2 == 33)
      {
        if (!memcmp((const void *)a1, "disable_sanitizer_instrumentation", 0x21uLL)) {
          uint64_t v3 = 0x100000007;
        }
        else {
          uint64_t v3 = 0;
        }
        goto LABEL_534;
      }
LABEL_140:
      int v9 = 0;
      if (a2 == 11 && v4)
      {
        if (*(void *)a1 == 0x63696C7075646F6ELL && *(void *)(a1 + 3) == 0x65746163696C7075)
        {
          uint64_t v3 = 0x100000018;
          goto LABEL_534;
        }
        int v34 = 0;
        int v9 = 0;
        int v4 = 1;
LABEL_259:
        int v40 = 0;
        if (a2 == 11 && v4)
        {
          if (*(void *)a1 == 0x62797A616C6E6F6ELL && *(void *)(a1 + 3) == 0x646E6962797A616CLL)
          {
            uint64_t v3 = 0x100000026;
            goto LABEL_534;
          }
          int v40 = 0;
          int v4 = 1;
        }
        goto LABEL_266;
      }
LABEL_147:
      if (a2 == 6) {
        int v32 = v4;
      }
      else {
        int v32 = 0;
      }
      if (v32 == 1)
      {
        if (*(_DWORD *)a1 == 1919315822 && *(_WORD *)(a1 + 4) == 25957)
        {
          uint64_t v3 = 0x100000019;
          goto LABEL_534;
        }
        goto LABEL_165;
      }
      char v36 = v4 ^ 1;
      if (a2 == 15) {
        char v37 = v4 ^ 1;
      }
      else {
        char v37 = 1;
      }
      if ((v37 & 1) == 0)
      {
        if (*(void *)a1 == 0x63696C706D696F6ELL && *(void *)(a1 + 7) == 0x74616F6C66746963)
        {
          uint64_t v3 = 0x10000001ALL;
          goto LABEL_534;
        }
LABEL_165:
        if ((v9 & 1) == 0)
        {
          int v9 = 0;
          goto LABEL_229;
        }
        goto LABEL_182;
      }
      if (a2 != 8) {
        char v36 = 1;
      }
      if (v36)
      {
        if (!v9)
        {
          int v32 = 0;
          goto LABEL_229;
        }
LABEL_182:
        if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)(a1 + 3) == 1701278309)
        {
          uint64_t v3 = 0x10000001CLL;
          goto LABEL_534;
        }
        int v9 = 1;
LABEL_229:
        char v51 = v4 ^ 1;
        if (a2 != 17) {
          char v51 = 1;
        }
        if (v51)
        {
LABEL_241:
          if (a2 != 19 || !v4)
          {
LABEL_251:
            int v34 = 0;
            if (v32)
            {
              if (*(_DWORD *)a1 == 2037608302 && *(_WORD *)(a1 + 4) == 25454)
              {
                uint64_t v3 = 0x100000023;
                goto LABEL_534;
              }
            }
            else
            {
LABEL_223:
              if (v9)
              {
                if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)(a1 + 3) == 1717920878) {
                  goto LABEL_534;
                }
                int v9 = 1;
              }
              else
              {
                int v9 = 0;
              }
            }
            goto LABEL_259;
          }
          if (*(void *)a1 == 0x6974696E61736F6ELL
            && *(void *)(a1 + 8) == 0x7265766F635F657ALL
            && *(void *)(a1 + 11) == 0x6567617265766F63)
          {
            uint64_t v3 = 0x100000022;
            goto LABEL_534;
          }
        }
        else if (*(void *)a1 == 0x6974696E61736F6ELL {
               && *(void *)(a1 + 8) == 0x646E756F625F657ALL
        }
               && *(unsigned char *)(a1 + 16) == 115)
        {
          uint64_t v3 = 0x100000021;
          goto LABEL_534;
        }
        int v4 = 1;
        goto LABEL_251;
      }
      if (*(void *)a1 == 0x656E696C6E696F6ELL)
      {
        uint64_t v3 = 0x10000001BLL;
        goto LABEL_534;
      }
      if (*(void *)a1 == 0x6E72757465726F6ELL)
      {
        uint64_t v3 = 0x100000020;
        goto LABEL_534;
      }
      if ((v9 & 1) != 0 && *(_DWORD *)a1 == 1853189998 && *(_DWORD *)(a1 + 3) == 1717920878) {
        goto LABEL_534;
      }
      if (*(void *)a1 == 0x646E69776E756F6ELL)
      {
        uint64_t v3 = 0x100000025;
        goto LABEL_534;
      }
      int v34 = 0;
      int v4 = 1;
      int v40 = 1;
LABEL_266:
      if (v9)
      {
        if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)(a1 + 3) == 1819047278)
        {
          uint64_t v3 = 0x100000027;
          goto LABEL_534;
        }
        if (a2 == 13) {
          int v59 = v4;
        }
        else {
          int v59 = 0;
        }
        if ((v59 & 1) == 0)
        {
          if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)(a1 + 3) == 1702521203)
          {
            uint64_t v3 = 0x10000002ALL;
            goto LABEL_534;
          }
          goto LABEL_311;
        }
        if (*(void *)a1 != 0x7566726F6674706FLL || *(void *)(a1 + 5) != 0x676E697A7A756672)
        {
LABEL_311:
          if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)(a1 + 3) == 1701736302)
          {
            uint64_t v3 = 0x10000002BLL;
            goto LABEL_534;
          }
          goto LABEL_315;
        }
LABEL_404:
        uint64_t v3 = 0x100000029;
        goto LABEL_534;
      }
      char v61 = v4 ^ 1;
      if (a2 != 21) {
        char v61 = 1;
      }
      if ((v61 & 1) == 0)
      {
        if (*(void *)a1 == 0x696F705F6C6C756ELL
          && *(void *)(a1 + 8) == 0x5F73695F7265746ELL
          && *(void *)(a1 + 13) == 0x64696C61765F7369)
        {
          uint64_t v3 = 0x100000028;
          goto LABEL_534;
        }
        goto LABEL_303;
      }
      if (a2 == 13) {
        char v64 = v4;
      }
      else {
        char v64 = 0;
      }
      if ((v64 & 1) == 0)
      {
LABEL_303:
        int v59 = 0;
LABEL_315:
        if (v40) {
          goto LABEL_316;
        }
        if (!v59) {
          goto LABEL_327;
        }
LABEL_321:
        if (*(void *)a1 == 0x5F736E7275746572 && *(void *)(a1 + 5) == 0x65636977745F736ELL)
        {
          uint64_t v3 = 0x10000002FLL;
          goto LABEL_534;
        }
        goto LABEL_332;
      }
      if (*(void *)a1 == 0x7566726F6674706FLL && *(void *)(a1 + 5) == 0x676E697A7A756672) {
        goto LABEL_404;
      }
      if (!v40) {
        goto LABEL_321;
      }
LABEL_316:
      switch(*(void *)a1)
      {
        case 0x656E6F6E64616572:
          uint64_t v3 = 0x10000002CLL;
          goto LABEL_534;
        case 0x796C6E6F64616572:
          uint64_t v3 = 0x10000002DLL;
          goto LABEL_534;
        case 0x64656E7275746572:
          uint64_t v3 = 0x10000002ELL;
          goto LABEL_534;
      }
LABEL_327:
      if (v9)
      {
        if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)(a1 + 3) == 1954047342)
        {
          uint64_t v3 = 0x100000030;
          goto LABEL_534;
        }
      }
LABEL_332:
      if (v34)
      {
        if (*(void *)a1 == 0x6361747365666173 && *(unsigned char *)(a1 + 8) == 107)
        {
          uint64_t v3 = 0x100000031;
          goto LABEL_534;
        }
      }
      else
      {
        char v71 = v4 ^ 1;
        if (a2 != 16) {
          char v71 = 1;
        }
        if ((v71 & 1) == 0)
        {
          if (*(void *)a1 == 0x657A6974696E6173 && *(void *)(a1 + 8) == 0x737365726464615FLL)
          {
            uint64_t v3 = 0x100000032;
            goto LABEL_534;
          }
          goto LABEL_360;
        }
      }
      char v73 = v4 ^ 1;
      if (a2 == 18) {
        char v74 = v4 ^ 1;
      }
      else {
        char v74 = 1;
      }
      if (v74)
      {
        if (a2 != 15) {
          char v73 = 1;
        }
        if (v73)
        {
LABEL_114:
          if (a2 == 12 && v4)
          {
            if (*(void *)a1 == 0x74616C7563657073 && *(_DWORD *)(a1 + 8) == 1701601889)
            {
              uint64_t v3 = 0x100000038;
              goto LABEL_534;
            }
          }
          else
          {
            char v42 = v4 ^ 1;
            if (a2 == 26) {
              char v43 = v42;
            }
            else {
              char v43 = 1;
            }
            if (v43)
            {
              if (a2 != 3) {
                char v42 = 1;
              }
              if (v42)
              {
                BOOL v77 = (v2 & 0xFF00000000) == 0;
                if (a2 == 6 && (v2 & 0xFF00000000) == 0)
                {
                  if (*(_DWORD *)a1 == 1919972211 && *(_WORD *)(a1 + 4) == 29029)
                  {
                    uint64_t v3 = 0x10000003BLL;
                    goto LABEL_534;
                  }
                  goto LABEL_533;
                }
                goto LABEL_361;
              }
LABEL_7:
              if (*(_WORD *)a1 == 29555 && *(unsigned char *)(a1 + 2) == 112)
              {
                uint64_t v3 = 0x10000003ALL;
                goto LABEL_534;
              }
            }
            else if (*(void *)a1 == 0x74616C7563657073 {
                   && *(void *)(a1 + 8) == 0x64616F6C5F657669
            }
                   && *(void *)(a1 + 16) == 0x696E65647261685FLL
                   && *(_WORD *)(a1 + 24) == 26478)
            {
              uint64_t v3 = 0x100000039;
              goto LABEL_534;
            }
          }
        }
        else
        {
          if (*(void *)a1 == 0x657A6974696E6173 && *(void *)(a1 + 7) == 0x6761746D656D5F65)
          {
            uint64_t v3 = 0x100000034;
            goto LABEL_534;
          }
          if (*(void *)a1 == 0x657A6974696E6173 && *(void *)(a1 + 7) == 0x79726F6D656D5F65)
          {
            uint64_t v3 = 0x100000035;
            goto LABEL_534;
          }
          if (*(void *)a1 == 0x657A6974696E6173 && *(void *)(a1 + 7) == 0x6461657268745F65)
          {
            uint64_t v3 = 0x100000036;
            goto LABEL_534;
          }
          if (*(void *)a1 == 0x6163776F64616873 && *(void *)(a1 + 7) == 0x6B636174736C6C61)
          {
            uint64_t v3 = 0x100000037;
            goto LABEL_534;
          }
        }
      }
      else if (*(void *)a1 == 0x657A6974696E6173 {
             && *(void *)(a1 + 8) == 0x657264646177685FLL
      }
             && *(_WORD *)(a1 + 16) == 29555)
      {
        uint64_t v3 = 0x100000033;
        goto LABEL_534;
      }
LABEL_360:
      BOOL v77 = (v2 & 0xFF00000000) == 0;
LABEL_361:
      if (a2 == 9 && v77)
      {
        if (*(void *)a1 == 0x6E6F727473707373 && *(unsigned char *)(a1 + 8) == 103)
        {
          uint64_t v3 = 0x10000003CLL;
          goto LABEL_534;
        }
        BOOL v77 = 1;
      }
      else
      {
        char v79 = !v77;
        if (a2 != 8) {
          char v79 = 1;
        }
        if ((v79 & 1) == 0)
        {
          if (*(void *)a1 == 0x7066746369727473)
          {
            uint64_t v3 = 0x10000003DLL;
            goto LABEL_534;
          }
          if (*(void *)a1 == 0x61636F6C6C616E69)
          {
            uint64_t v3 = 0x100000047;
            goto LABEL_534;
          }
          goto LABEL_533;
        }
      }
      if (a2 == 9 && v77)
      {
        if (*(void *)a1 == 0x6C65737466697773 && *(unsigned char *)(a1 + 8) == 102)
        {
          uint64_t v3 = 0x100000040;
          goto LABEL_534;
        }
        if (*(void *)a1 == 0x6C6E6F6574697277 && *(unsigned char *)(a1 + 8) == 121)
        {
          uint64_t v3 = 0x100000042;
          goto LABEL_534;
        }
        if (*(void *)a1 == 0x7A6973636F6C6C61 && *(unsigned char *)(a1 + 8) == 101)
        {
          uint64_t v3 = 0x10000004BLL;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      char v83 = !v77;
      char v84 = a2 != 7 || !v77;
      if ((v84 & 1) == 0)
      {
        if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)(a1 + 3) == 1954047343)
        {
          uint64_t v3 = 0x100000043;
          goto LABEL_534;
        }
        BOOL v77 = 1;
        goto LABEL_399;
      }
      if (a2 != 5) {
        char v83 = 1;
      }
      if ((v83 & 1) == 0)
      {
        if (*(_DWORD *)a1 == 1702000994 && *(unsigned char *)(a1 + 4) == 102)
        {
          uint64_t v3 = 0x100000044;
          goto LABEL_534;
        }
        if (*(_DWORD *)a1 == 1635154274 && *(unsigned char *)(a1 + 4) == 108)
        {
          uint64_t v3 = 0x100000045;
          goto LABEL_534;
        }
        if (*(_DWORD *)a1 == 1734962273 && *(unsigned char *)(a1 + 4) == 110)
        {
          uint64_t v3 = 0x10000004ALL;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      char v96 = !v77;
      char v97 = a2 != 11 || !v77;
      if ((v97 & 1) == 0)
      {
        if (*(void *)a1 == 0x74746E656D656C65 && *(void *)(a1 + 3) == 0x65707974746E656DLL)
        {
          uint64_t v3 = 0x100000046;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      if (a2 != 12) {
        char v96 = 1;
      }
      if ((v96 & 1) == 0)
      {
        if (*(void *)a1 == 0x636F6C6C61657270 && *(_DWORD *)(a1 + 8) == 1684370529)
        {
          uint64_t v3 = 0x100000048;
          goto LABEL_534;
        }
LABEL_492:
        if (a2 == 12 && v77)
        {
          uint64_t v86 = 0x100000050;
          BOOL v87 = (*(void *)a1 ^ 0x725F656C61637376 | *(unsigned int *)(a1 + 8) ^ 0x65676E61) == 0;
LABEL_495:
          if (v87) {
            uint64_t v3 = v86;
          }
          else {
            uint64_t v3 = v2;
          }
          goto LABEL_534;
        }
LABEL_533:
        uint64_t v3 = v2;
        goto LABEL_534;
      }
      char v100 = !v77;
      char v101 = a2 != 4 || !v77;
      if ((v101 & 1) == 0)
      {
        if (*(_DWORD *)a1 == 1952805491)
        {
          uint64_t v3 = 0x100000049;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      if (a2 != 15) {
        char v100 = 1;
      }
      if ((v100 & 1) == 0)
      {
        if (*(void *)a1 == 0x6572656665726564 && *(void *)(a1 + 7) == 0x656C626165636E65)
        {
          uint64_t v3 = 0x10000004CLL;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      char v103 = !v77;
      if (a2 != 23) {
        char v103 = 1;
      }
      if (v103)
      {
LABEL_399:
        if (a2 == 7 && v77)
        {
          uint64_t v86 = 0x10000004FLL;
          BOOL v87 = (*(_DWORD *)a1 ^ 0x61747775 | *(_DWORD *)(a1 + 3) ^ 0x656C6261) == 0;
          goto LABEL_495;
        }
        goto LABEL_492;
      }
      if (*(void *)a1 != 0x6572656665726564
        || *(void *)(a1 + 8) != 0x5F656C626165636ELL
        || *(void *)(a1 + 15) != 0x6C6C756E5F726F5FLL)
      {
        goto LABEL_533;
      }
      uint64_t v3 = 0x10000004DLL;
LABEL_534:
      if ((v3 & 0xFF00000000) != 0) {
        return v3;
      }
      else {
        return 0;
      }
  }
}

char *llvm::Attribute::getNameFromAttrKind(int a1)
{
  return off_1E6830840[a1];
}

BOOL llvm::Attribute::isExistingAttribute(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  switch(a2)
  {
    case 3:
      if (*a1 == 28520 && *((unsigned char *)a1 + 2) == 116) {
        return 1;
      }
      int v4 = *((unsigned __int8 *)a1 + 2);
      BOOL v5 = *a1 == 29555;
      int v6 = 112;
      return v5 && v4 == v6;
    case 4:
      return *(_DWORD *)a1 == 1684828003 || *(_DWORD *)a1 == 1953719662 || *(_DWORD *)a1 == 1952805491;
    case 5:
      if (*(_DWORD *)a1 == 1701998185 && *((unsigned char *)a1 + 4) == 103) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1701536110 && *((unsigned char *)a1 + 4) == 100) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1702000994 && *((unsigned char *)a1 + 4) == 102) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1635154274 && *((unsigned char *)a1 + 4) == 108) {
        return 1;
      }
      int v4 = *((unsigned __int8 *)a1 + 4);
      BOOL v5 = *(_DWORD *)a1 == 1734962273;
      int v6 = 110;
      return v5 && v4 == v6;
    case 6:
      if (*(_DWORD *)a1 == 1634561385 && a1[2] == 26482) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1919315822 && a1[2] == 25957) {
        return 1;
      }
      if (*(_DWORD *)a1 == 2037608302 && a1[2] == 25454) {
        return 1;
      }
      int v4 = a1[2];
      BOOL v5 = *(_DWORD *)a1 == 1919972211;
      int v6 = 29029;
      return v5 && v4 == v6;
    case 7:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)((char *)a1 + 3) == 1852404844) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)((char *)a1 + 3) == 1702521203) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1818324846 && *(_DWORD *)((char *)a1 + 3) == 1935763820) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)((char *)a1 + 3) == 1701278309) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)((char *)a1 + 3) == 1717920878) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)((char *)a1 + 3) == 1819047278) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)((char *)a1 + 3) == 1702521203) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)((char *)a1 + 3) == 1701736302) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)((char *)a1 + 3) == 1954047342) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)((char *)a1 + 3) == 1954047343) {
        return 1;
      }
      int v4 = *(_DWORD *)((char *)a1 + 3);
      BOOL v5 = *(_DWORD *)a1 == 1635022709;
      int v6 = 1701601889;
      return v5 && v4 == v6;
    case 8:
      return *(void *)a1 == 0x656E696C6E696F6ELL
          || *(void *)a1 == 0x6E72757465726F6ELL
          || *(void *)a1 == 0x646E69776E756F6ELL
          || *(void *)a1 == 0x656E6F6E64616572
          || *(void *)a1 == 0x796C6E6F64616572
          || *(void *)a1 == 0x64656E7275746572
          || *(void *)a1 == 0x7066746369727473
          || *(void *)a1 == 0x61636F6C6C616E69;
    case 9:
      if (*(void *)a1 == 0x6C626174706D756ALL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x69746C6975626F6ELL && *((unsigned char *)a1 + 8) == 110) {
        return 1;
      }
      if (*(void *)a1 == 0x7275747061636F6ELL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x6C69666F72706F6ELL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x7372756365726F6ELL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x6E6F7A6465726F6ELL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x6361747365666173 && *((unsigned char *)a1 + 8) == 107) {
        return 1;
      }
      if (*(void *)a1 == 0x6E6F727473707373 && *((unsigned char *)a1 + 8) == 103) {
        return 1;
      }
      if (*(void *)a1 == 0x6C65737466697773 && *((unsigned char *)a1 + 8) == 102) {
        return 1;
      }
      if (*(void *)a1 == 0x6C6E6F6574697277 && *((unsigned char *)a1 + 8) == 121) {
        return 1;
      }
      int v4 = *((unsigned __int8 *)a1 + 8);
      BOOL v5 = *(void *)a1 == 0x7A6973636F6C6C61;
      int v6 = 101;
      return v5 && v4 == v6;
    case 10:
      if (*(void *)a1 == 0x696C61636F6C6C61 && a1[4] == 28263) {
        return 1;
      }
      if (*(void *)a1 == 0x6E6F6D656D677261 && a1[4] == 31084) {
        return 1;
      }
      if (*(void *)a1 == 0x65677265766E6F63 && a1[4] == 29806) {
        return 1;
      }
      if (*(void *)a1 == 0x6968656E696C6E69 && a1[4] == 29806) {
        return 1;
      }
      if (*(void *)a1 == 0x61626C6C61636F6ELL && a1[4] == 27491) {
        return 1;
      }
      if (*(void *)a1 == 0x6568635F66636F6ELL && a1[4] == 27491) {
        return 1;
      }
      if (*(void *)a1 == 0x7973617466697773 && a1[4] == 25454) {
        return 1;
      }
      if (*(void *)a1 == 0x7272657466697773 && a1[4] == 29295) {
        return 1;
      }
      if (*(void *)a1 == 0x757465726C6C6977 && a1[4] == 28274) {
        return 1;
      }
      int v4 = a1[4];
      BOOL v5 = *(void *)a1 == 0x6174736E67696C61;
      int v6 = 27491;
      return v5 && v4 == v6;
    case 11:
      if (*(void *)a1 == 0x63696C7075646F6ELL && *(void *)((char *)a1 + 3) == 0x65746163696C7075) {
        return 1;
      }
      if (*(void *)a1 == 0x62797A616C6E6F6ELL && *(void *)((char *)a1 + 3) == 0x646E6962797A616CLL) {
        return 1;
      }
      uint64_t v45 = *(void *)((char *)a1 + 3);
      BOOL v46 = *(void *)a1 == 0x74746E656D656C65;
      uint64_t v47 = 0x65707974746E656DLL;
      return v46 && v45 == v47;
    case 12:
      if (*(void *)a1 == 0x6E69737961776C61 && *((_DWORD *)a1 + 2) == 1701734764) {
        return 1;
      }
      if (*(void *)a1 == 0x676F72707473756DLL && *((_DWORD *)a1 + 2) == 1936942450) {
        return 1;
      }
      if (*(void *)a1 == 0x74616C7563657073 && *((_DWORD *)a1 + 2) == 1701601889) {
        return 1;
      }
      if (*(void *)a1 == 0x636F6C6C61657270 && *((_DWORD *)a1 + 2) == 1684370529) {
        return 1;
      }
      int v4 = *((_DWORD *)a1 + 2);
      BOOL v5 = *(void *)a1 == 0x725F656C61637376;
      int v6 = 1701277281;
      return v5 && v4 == v6;
    case 13:
      if (*(void *)a1 == 0x7566726F6674706FLL && *(void *)((char *)a1 + 5) == 0x676E697A7A756672) {
        return 1;
      }
      uint64_t v45 = *(void *)((char *)a1 + 5);
      BOOL v46 = *(void *)a1 == 0x5F736E7275746572;
      uint64_t v47 = 0x65636977745F736ELL;
      return v46 && v45 == v47;
    case 14:
      if (*(void *)a1 == 0x2D706D756A2D6F6ELL && *(void *)(a1 + 3) == 0x73656C6261742D70) {
        return 1;
      }
      uint64_t v45 = *(void *)(a1 + 3);
      BOOL v46 = *(void *)a1 == 0x662D656661736E75;
      uint64_t v47 = 0x6874616D2D70662DLL;
      return v46 && v45 == v47;
    case 15:
      if (*(void *)a1 == 0x63696C706D696F6ELL && *(void *)((char *)a1 + 7) == 0x74616F6C66746963) {
        return 1;
      }
      if (*(void *)a1 == 0x657A6974696E6173 && *(void *)((char *)a1 + 7) == 0x6761746D656D5F65) {
        return 1;
      }
      if (*(void *)a1 == 0x657A6974696E6173 && *(void *)((char *)a1 + 7) == 0x79726F6D656D5F65) {
        return 1;
      }
      if (*(void *)a1 == 0x657A6974696E6173 && *(void *)((char *)a1 + 7) == 0x6461657268745F65) {
        return 1;
      }
      if (*(void *)a1 == 0x6163776F64616873 && *(void *)((char *)a1 + 7) == 0x6B636174736C6C61) {
        return 1;
      }
      if (*(void *)a1 == 0x6572656665726564 && *(void *)((char *)a1 + 7) == 0x656C626165636E65) {
        return 1;
      }
      uint64_t v61 = 0x6874616D2D70662DLL;
      if (*(void *)a1 == 0x2D73666E692D6F6ELL && *(void *)((char *)a1 + 7) == 0x6874616D2D70662DLL) {
        return 1;
      }
      uint64_t v63 = *(void *)((char *)a1 + 7);
      BOOL v64 = *(void *)a1 == 0x2D736E616E2D6F6ELL;
      return v64 && v63 == v61;
    case 16:
      uint64_t v45 = *((void *)a1 + 1);
      BOOL v46 = *(void *)a1 == 0x657A6974696E6173;
      uint64_t v47 = 0x737365726464615FLL;
      return v46 && v45 == v47;
    case 17:
      return *(void *)a1 == 0x6974696E61736F6ELL
          && *((void *)a1 + 1) == 0x646E756F625F657ALL
          && *((unsigned char *)a1 + 16) == 115;
    case 18:
      if (*(void *)a1 == 0x657A6974696E6173 && *((void *)a1 + 1) == 0x657264646177685FLL && a1[8] == 29555) {
        return 1;
      }
      BOOL v70 = *(void *)a1 == 0x6572702D7373656CLL && *((void *)a1 + 1) == 0x6D70662D65736963;
      if (v70 && a1[8] == 25697) {
        return 1;
      }
      return *(void *)a1 == 0x706D61732D657375 && *((void *)a1 + 1) == 0x69666F72702D656CLL && a1[8] == 25964;
    case 19:
      if (*(void *)a1 == 0x7373656363616E69
        && *((void *)a1 + 1) == 0x6F6D656D656C6269
        && *(void *)((char *)a1 + 11) == 0x796C6E6F6D656D65)
      {
        return 1;
      }
      BOOL v76 = *(void *)a1 == 0x6974696E61736F6ELL && *((void *)a1 + 1) == 0x7265766F635F657ALL;
      if (v76 && *(void *)((char *)a1 + 11) == 0x6567617265766F63) {
        return 1;
      }
      uint64_t v63 = *(void *)((char *)a1 + 11);
      BOOL v64 = *(void *)a1 == 0x662D786F72707061 && *((void *)a1 + 1) == 0x6D2D70662D636E75;
      uint64_t v61 = 0x6874616D2D70662DLL;
      return v64 && v63 == v61;
    case 21:
      if (*(void *)a1 == 0x696F705F6C6C756ELL
        && *((void *)a1 + 1) == 0x5F73695F7265746ELL
        && *(void *)((char *)a1 + 13) == 0x64696C61765F7369)
      {
        return 1;
      }
      uint64_t v63 = *(void *)((char *)a1 + 13);
      BOOL v64 = *(void *)a1 == 0x6E696C6E692D6F6ELL && *((void *)a1 + 1) == 0x742D656E696C2D65;
      uint64_t v61 = 0x73656C6261742D65;
      return v64 && v63 == v61;
    case 23:
      if (*(void *)a1 == 0x6572656665726564
        && *((void *)a1 + 1) == 0x5F656C626165636ELL
        && *(void *)((char *)a1 + 15) == 0x6C6C756E5F726F5FLL)
      {
        return 1;
      }
      BOOL v82 = *(void *)a1 == 0x656E6769732D6F6ELL && *((void *)a1 + 1) == 0x2D736F72657A2D64;
      if (v82 && *(void *)((char *)a1 + 15) == 0x6874616D2D70662DLL) {
        return 1;
      }
      uint64_t v63 = *(void *)((char *)a1 + 15);
      BOOL v64 = *(void *)a1 == 0x2D656C69666F7270 && *((void *)a1 + 1) == 0x612D656C706D6173;
      uint64_t v61 = 0x6574617275636361;
      return v64 && v63 == v61;
    case 26:
      return *(void *)a1 == 0x74616C7563657073
          && *((void *)a1 + 1) == 0x64616F6C5F657669
          && *((void *)a1 + 2) == 0x696E65647261685FLL
          && a1[12] == 26478;
    case 29:
      return *(void *)a1 == 0x7373656363616E69
          && *((void *)a1 + 1) == 0x5F6D656D656C6269
          && *((void *)a1 + 2) == 0x656D6772615F726FLL
          && *(void *)((char *)a1 + 21) == 0x796C6E6F6D656D67;
    case 33:
      return !memcmp(a1, "disable_sanitizer_instrumentation", 0x21uLL);
    default:
      return v2;
  }
}

BOOL llvm::Attribute::isEnumAttribute(llvm::Attribute *this)
{
  return *(void *)this && *(unsigned char *)(*(void *)this + 8) == 0;
}

BOOL llvm::Attribute::isIntAttribute(llvm::Attribute *this)
{
  return *(void *)this && *(unsigned char *)(*(void *)this + 8) == 1;
}

BOOL llvm::Attribute::isStringAttribute(llvm::Attribute *this)
{
  return *(void *)this && *(unsigned char *)(*(void *)this + 8) == 2;
}

BOOL llvm::Attribute::isTypeAttribute(llvm::Attribute *this)
{
  return *(void *)this && *(unsigned char *)(*(void *)this + 8) == 3;
}

uint64_t llvm::Attribute::getKindAsEnum(llvm::Attribute *this)
{
  if (*(void *)this) {
    return *(unsigned int *)(*(void *)this + 12);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeImpl::getKindAsEnum(llvm::AttributeImpl *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t llvm::Attribute::getValueAsInt(llvm::Attribute *this)
{
  if (*(void *)this) {
    return *(void *)(*(void *)this + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeImpl::getValueAsInt(llvm::AttributeImpl *this)
{
  return *((void *)this + 2);
}

BOOL llvm::Attribute::getValueAsBool(llvm::Attribute *this)
{
  uint64_t v1 = *(void *)this;
  return *(void *)this && *(_DWORD *)(v1 + 16) == 4 && *(_DWORD *)(v1 + *(unsigned int *)(v1 + 12) + 25) == 1702195828;
}

BOOL llvm::AttributeImpl::getValueAsBool(llvm::AttributeImpl *this)
{
  return *((_DWORD *)this + 4) == 4 && *(_DWORD *)((char *)this + *((unsigned int *)this + 3) + 25) == 1702195828;
}

uint64_t llvm::Attribute::getKindAsString(llvm::Attribute *this)
{
  if (*(void *)this) {
    return *(void *)this + 24;
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeImpl::getKindAsString(llvm::AttributeImpl *this)
{
  return (uint64_t)this + 24;
}

uint64_t llvm::Attribute::getValueAsString(llvm::Attribute *this)
{
  if (*(void *)this) {
    return *(void *)this + *(unsigned int *)(*(void *)this + 12) + 25;
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeImpl::getValueAsString(llvm::AttributeImpl *this)
{
  return (uint64_t)this + *((unsigned int *)this + 3) + 25;
}

uint64_t llvm::Attribute::getValueAsType(llvm::Attribute *this)
{
  if (*(void *)this) {
    return *(void *)(*(void *)this + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeImpl::getValueAsType(llvm::AttributeImpl *this)
{
  return *((void *)this + 2);
}

BOOL llvm::Attribute::hasAttribute(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  if (*a1 && *(unsigned char *)(v2 + 8) != 2 && *(_DWORD *)(v2 + 12) == a2) {
    return 1;
  }
  return !a2 && v2 == 0;
}

BOOL llvm::AttributeImpl::hasAttribute(uint64_t a1, int a2)
{
  return *(unsigned char *)(a1 + 8) != 2 && *(_DWORD *)(a1 + 12) == a2;
}

BOOL llvm::Attribute::hasAttribute(uint64_t *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*(unsigned char *)(v3 + 8) != 2) {
    return 0;
  }
  size_t v5 = *(unsigned int *)(v3 + 12);
  if (a3 != v5) {
    return 0;
  }
  if (v5) {
    return memcmp((const void *)(v3 + 24), a2, v5) == 0;
  }
  return 1;
}

BOOL llvm::AttributeImpl::hasAttribute(uint64_t a1, const void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 8) != 2) {
    return 0;
  }
  size_t v4 = *(unsigned int *)(a1 + 12);
  if (a3 != v4) {
    return 0;
  }
  if (v4) {
    return memcmp((const void *)(a1 + 24), a2, v4) == 0;
  }
  return 1;
}

uint64_t llvm::Attribute::getAlignment(llvm::Attribute *this)
{
  unint64_t v1 = *(void *)(*(void *)this + 16);
  unsigned int v2 = __clz(v1) ^ 0x3F | 0x100;
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Attribute::getStackAlignment(llvm::Attribute *this)
{
  unint64_t v1 = *(void *)(*(void *)this + 16);
  unsigned int v2 = __clz(v1) ^ 0x3F | 0x100;
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Attribute::getDereferenceableOrNullBytes(llvm::Attribute *this)
{
  return *(void *)(*(void *)this + 16);
}

uint64_t llvm::Attribute::getUWTableKind(llvm::Attribute *this)
{
  return *(unsigned int *)(*(void *)this + 16);
}

void llvm::Attribute::getAsString(llvm::Attribute *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_41;
  }
  int v5 = *(unsigned __int8 *)(v4 + 8);
  if (!*(unsigned char *)(v4 + 8))
  {
    NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (NameFromAttrKind)
    {
      size_t v8 = v7;
      if (v7 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      int v9 = NameFromAttrKind;
      if (v7 >= 0x17)
      {
        uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17) {
          uint64_t v10 = v7 | 7;
        }
        uint64_t v11 = v10 + 1;
        BOOL v12 = (std::string *)operator new(v10 + 1);
        a3->__r_.__value_.__l.__size_ = v8;
        a3->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
        a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        a3 = v12;
      }
      else
      {
        *((unsigned char *)&a3->__r_.__value_.__s + 23) = v7;
        if (!v7) {
          goto LABEL_12;
        }
      }
      memmove(a3, v9, v8);
LABEL_12:
      a3->__r_.__value_.__s.__data_[v8] = 0;
      return;
    }
LABEL_41:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (v5 == 2)
  {
LABEL_15:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    *(_DWORD *)&v60[8] = 0;
    char v64 = 0;
    uint64_t v65 = 0;
    uint64_t v67 = a3;
    int v66 = 0;
    *(void *)int v60 = &unk_1F2646F30;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v60, 34);
    uint64_t v14 = *(void *)this;
    int v15 = (char *)v63;
    if (*(void *)this)
    {
      unsigned int v16 = (const void *)(v14 + 24);
      size_t v17 = *(unsigned int *)(v14 + 12);
      if ((char *)v62 - (char *)v63 >= v17)
      {
        if (v17)
        {
          memcpy(v63, v16, v17);
          int v15 = (char *)v63 + v17;
          uint64_t v63 = (uint64_t *)((char *)v63 + v17);
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v60, (const char *)v16, v17);
        int v15 = (char *)v63;
      }
    }
    if (v15 < (char *)v62)
    {
      uint64_t v63 = (uint64_t *)(v15 + 1);
      *int v15 = 34;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v60, 34);
    }
    uint64_t v18 = *(unsigned int *)(*(void *)this + 16);
    if (v18)
    {
      uint64_t v19 = (llvm::raw_ostream *)(*(void *)this + *(unsigned int *)(*(void *)this + 12) + 25);
      if ((unint64_t)((char *)v62 - (char *)v63) > 1)
      {
        *(_WORD *)uint64_t v63 = 8765;
        uint64_t v63 = (uint64_t *)((char *)v63 + 2);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v60, "=\"", 2uLL);
      }
      llvm::printEscapedString(v19, v18, (llvm::raw_ostream *)v60);
      if (v62 == v63)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v60, "\"", 1uLL);
      }
      else
      {
        *(unsigned char *)uint64_t v63 = 34;
        uint64_t v63 = (uint64_t *)((char *)v63 + 1);
      }
    }
    *(void *)int v60 = &unk_1F2646B98;
    if (v66 == 1 && v61) {
      MEMORY[0x1D25D9CB0](v61, 0x1000C8077774924);
    }
  }
  else if (v5 == 3)
  {
    unsigned int v25 = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (v25)
    {
      std::string::__init(a3, v25, v26);
    }
    else
    {
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
    }
    std::string::push_back(a3, 40);
    *(_DWORD *)&v60[8] = 0;
    char v64 = 0;
    uint64_t v65 = 0;
    uint64_t v67 = a3;
    int v66 = 0;
    *(void *)int v60 = &unk_1F2646F30;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    if (*(void *)this) {
      uint64_t v27 = *(llvm::Type **)(*(void *)this + 16);
    }
    else {
      uint64_t v27 = 0;
    }
    llvm::Type::print(v27, (llvm::raw_ostream *)v60, 0, 1);
    if (v63 != v61) {
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)v60);
    }
    std::string::push_back(a3, 41);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v60);
  }
  else
  {
    int v20 = *(_DWORD *)(v4 + 12);
    if (v20 == 76)
    {
      if (a2)
      {
        v68[0] = *(void *)(v4 + 16);
        v70[0] = (uint64_t)"=";
        char v71 = v68;
        __int16 v72 = 3075;
        char v21 = 2;
        char v22 = 3;
        unsigned int v23 = (uint64_t *)"dereferenceable";
        uint64_t v24 = v70;
      }
      else
      {
        v58[0] = *(void *)(v4 + 16);
        v68[0] = (uint64_t)"(";
        v68[2] = (uint64_t)v58;
        __int16 v69 = 3075;
        v70[0] = (uint64_t)"dereferenceable";
        char v71 = v68;
        char v21 = 3;
        char v22 = 2;
        uint64_t v24 = (uint64_t *)")";
        __int16 v72 = 515;
        unsigned int v23 = v70;
      }
      *(void *)int v60 = v23;
      uint64_t v61 = v24;
      LOBYTE(v63) = v22;
      BYTE1(v63) = v21;
    }
    else
    {
      switch(v20)
      {
        case 'J':
          if (!a2)
          {
            v70[0] = *(void *)(v4 + 16);
            *(void *)int v60 = "align ";
            uint64_t v61 = v70;
            LOWORD(v63) = 3075;
            break;
          }
          v70[0] = (uint64_t)"align=";
          __int16 v72 = 259;
          v58[0] = *(void *)(v4 + 16);
          __int16 v69 = 268;
          v68[0] = (uint64_t)v58;
          uint64_t v45 = v68;
          goto LABEL_72;
        case 'K':
          unint64_t v32 = *(void *)(v4 + 16);
          unint64_t v28 = HIDWORD(v32);
          BOOL v29 = v32 == 0xFFFFFFFFLL;
          BOOL v30 = v32 != 0xFFFFFFFF;
          int v31 = v32 & 0xFFFFFF00;
          LODWORD(v32) = v32;
          if (v29) {
            LODWORD(v32) = 0;
          }
          *(_DWORD *)&v60[4] = v32 | v31;
          *(_DWORD *)int v60 = v28;
          *(_DWORD *)&v60[8] = v30;
          int v33 = v32 | v31;
          if ((*(void *)&v60[4] & 0xFF00000000) == 0)
          {
            v68[0] = (uint64_t)"allocsize(";
            __int16 v69 = 259;
            __int16 v59 = 264;
            LODWORD(v58[0]) = v28;
            goto LABEL_75;
          }
          v56[0] = (uint64_t)"allocsize(";
          __int16 v57 = 259;
          __int16 v55 = 264;
          LODWORD(v54[0]) = v28;
          sub_1CB8F1E58(v56, v54, (uint64_t)v58);
          v52[0] = (uint64_t)",";
          __int16 v53 = 259;
          sub_1CB8F1E58(v58, v52, (uint64_t)v68);
          __int16 v51 = 264;
          LODWORD(v50[0]) = v33;
LABEL_71:
          sub_1CB8F1E58(v68, v50, (uint64_t)v70);
          uint64_t v48 = ")";
          __int16 v49 = 259;
          uint64_t v45 = (uint64_t *)&v48;
          goto LABEL_72;
        case 'M':
          int v34 = "dereferenceable_or_null";
          goto LABEL_60;
        case 'N':
          int v34 = "alignstack";
LABEL_60:
          sub_1CC509504(a3, a2, v4, (unsigned __int8 *)v34);
          return;
        case 'O':
          int v35 = *(_DWORD *)(v4 + 16);
          if (!v35) {
            goto LABEL_15;
          }
          if (v35 == 2)
          {
            *((unsigned char *)&a3->__r_.__value_.__s + 23) = 7;
            strcpy((char *)a3, "uwtable");
            return;
          }
          v68[0] = (uint64_t)"uwtable(";
          BOOL v46 = "async";
          __int16 v69 = 259;
          if (v35 == 1) {
            BOOL v46 = "sync";
          }
          char v47 = 1;
          HIBYTE(v59) = 1;
          if (*v46)
          {
            v58[0] = (uint64_t)v46;
            char v47 = 3;
          }
          LOBYTE(v59) = v47;
LABEL_75:
          sub_1CB8F1E58(v68, v58, (uint64_t)v70);
          v56[0] = (uint64_t)")";
          __int16 v57 = 259;
          uint64_t v45 = v56;
LABEL_72:
          sub_1CB8F1E58(v70, v45, (uint64_t)v60);
          break;
        case 'P':
          unint64_t v39 = *(void *)(v4 + 16);
          unint64_t v36 = HIDWORD(v39);
          BOOL v29 = v39 == 0;
          uint64_t v37 = v39 != 0;
          uint64_t v38 = v39 & 0xFFFFFF00;
          unint64_t v39 = v39;
          *(_DWORD *)int v60 = v36;
          if (v29) {
            unint64_t v39 = 0;
          }
          uint64_t v40 = v39 | v38 | (v37 << 32);
          int v41 = *(_DWORD *)v60;
          *(_DWORD *)int v60 = v36;
          *(void *)&v60[4] = v40;
          *((void *)&v43 + 1) = v37;
          *(void *)&long long v43 = *(void *)v60;
          unint64_t v42 = v43 >> 32;
          v56[0] = (uint64_t)"vscale_range(";
          __int16 v57 = 259;
          __int16 v55 = 264;
          LODWORD(v54[0]) = v41;
          sub_1CB8F1E58(v56, v54, (uint64_t)v58);
          v52[0] = (uint64_t)",";
          __int16 v53 = 259;
          sub_1CB8F1E58(v58, v52, (uint64_t)v68);
          int v44 = 0;
          if (v42 > 0x100000000) {
            int v44 = v42;
          }
          __int16 v51 = 264;
          LODWORD(v50[0]) = v44;
          goto LABEL_71;
        default:
          goto LABEL_15;
      }
    }
    llvm::Twine::str((llvm::Twine *)v60, a3);
  }
}

void sub_1CC509504(void *a1, char a2, uint64_t a3, unsigned __int8 *a4)
{
  int v4 = *a4;
  if (a2)
  {
    if (a3) {
      uint64_t v5 = *(void *)(a3 + 16);
    }
    else {
      uint64_t v5 = 0;
    }
    *(void *)&long long v11 = v5;
    *(void *)&long long v14 = "=";
    *(void *)&long long v15 = &v11;
    LOWORD(v16) = 3075;
    if (!v4)
    {
      long long v17 = v14;
      long long v18 = v15;
      uint64_t v19 = v16;
      goto LABEL_19;
    }
    *(void *)&long long v17 = a4;
    *(void *)&long long v18 = &v14;
    __int16 v7 = 515;
    goto LABEL_9;
  }
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 16);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v10 = v6;
  *(void *)&long long v11 = "(";
  *(void *)&long long v12 = &v10;
  LOWORD(v13) = 3075;
  if (v4)
  {
    *(void *)&long long v14 = a4;
    *(void *)&long long v15 = &v11;
    LOWORD(v16) = 515;
    char v8 = 3;
  }
  else
  {
    long long v14 = v11;
    long long v15 = v12;
    uint64_t v16 = v13;
    char v8 = v13;
    if (v13 == 1)
    {
      *(void *)&long long v17 = ")";
      __int16 v7 = 259;
LABEL_9:
      LOWORD(v19) = v7;
      goto LABEL_19;
    }
  }
  if (BYTE1(v16) != 1) {
    char v8 = 2;
  }
  int v9 = &v14;
  if (BYTE1(v16) == 1) {
    int v9 = (long long *)v14;
  }
  *(void *)&long long v17 = v9;
  *((void *)&v17 + 1) = *((void *)&v14 + 1);
  *(void *)&long long v18 = ")";
  LOBYTE(v19) = v8;
  BYTE1(v19) = 3;
LABEL_19:
  llvm::Twine::str((llvm::Twine *)&v17, a1);
}

BOOL llvm::Attribute::hasParentContext(unsigned int **this, llvm::LLVMContext *a2)
{
  v18[16] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x2000000000;
  sub_1CC5097B4(*this, (unsigned int *)&v13);
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = sub_1CC13A6B8(v13, (uint64_t)v13 + 4 * v14);
  uint64_t v7 = *(void *)(v4 + 224);
  uint64_t v6 = v4 + 224;
  char v8 = *(unsigned int **)(v7 + 8 * ((*(_DWORD *)(v6 + 8) - 1) & v5));
  uint64_t v16 = v18;
  uint64_t v17 = 0x2000000000;
  if (v8) {
    BOOL v9 = (v8 & 1) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    while (!sub_1CC512084(v6, v8, (uint64_t)&v13, v5, (unsigned int *)&v16))
    {
      LODWORD(v17) = 0;
      char v8 = *(unsigned int **)v8;
      if (v8) {
        BOOL v10 = (v8 & 1) == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (!v10)
      {
        char v8 = 0;
        break;
      }
    }
    if (v16 != v18) {
      free(v16);
    }
  }
  else
  {
    char v8 = 0;
  }
  long long v11 = *this;
  if (v13 != v15) {
    free(v13);
  }
  return v8 == v11;
}

unsigned int *sub_1CC5097B4(unsigned int *result, unsigned int *a2)
{
  int v3 = *((unsigned __int8 *)result + 8);
  if (*((unsigned char *)result + 8))
  {
    if (v3 == 2)
    {
      unint64_t v5 = result + 6;
      uint64_t v7 = result[3];
      unsigned int v6 = result[4];
      unint64_t result = llvm::FoldingSetNodeID::AddString(a2, (unsigned __int8 *)result + 24, v7);
      if (v6)
      {
        return llvm::FoldingSetNodeID::AddString(a2, (unsigned __int8 *)v5 + v7 + 1, v6);
      }
    }
    else if (v3 == 1)
    {
      int v8 = result[3];
      uint64_t v9 = *((void *)result + 2);
      return (unsigned int *)sub_1CC511D4C((uint64_t)a2, v8, v9);
    }
    else
    {
      int v10 = result[3];
      uint64_t v11 = *((void *)result + 2);
      return (unsigned int *)sub_1CC511E5C((uint64_t)a2, v10, v11);
    }
  }
  else
  {
    unsigned int v4 = a2[2];
    if (v4 >= a2[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v4) = result[3];
    ++a2[2];
  }
  return result;
}

uint64_t llvm::Attribute::operator<(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (v2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = a2 == 0;
  }
  uint64_t v4 = !v3;
  if (v2) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return v4;
  }
  else {
    return llvm::AttributeImpl::operator<(v2, a2);
  }
}

uint64_t llvm::AttributeImpl::operator<(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) == 2)
  {
    if (v4 != 2) {
      return 0;
    }
    uint64_t v8 = a1 + 24;
    uint64_t v9 = *(unsigned int *)(a1 + 12);
    uint64_t v10 = a2 + 24;
    uint64_t v11 = *(unsigned int *)(a2 + 12);
    if (v9 == v11)
    {
      if (!v9
        || (v15 = memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), *(unsigned int *)(a2 + 12)), unsigned int v12 = v9, !v15))
      {
        unsigned int v16 = *(_DWORD *)(a1 + 16);
        unsigned int v17 = *(_DWORD *)(a2 + 16);
        if (v17 >= v16) {
          size_t v18 = v16;
        }
        else {
          size_t v18 = v17;
        }
        if (v18 && (int v19 = memcmp((const void *)(v8 + v9 + 1), (const void *)(v10 + v11 + 1), v18)) != 0)
        {
          int v14 = (v19 >> 31) | 1;
        }
        else
        {
          if (v16 < v17) {
            int v14 = -1;
          }
          else {
            int v14 = 1;
          }
          if (v16 == v17) {
            int v14 = 0;
          }
        }
        return v14 == -1;
      }
    }
    else
    {
      if (v11 >= v9) {
        unsigned int v12 = *(_DWORD *)(a1 + 12);
      }
      else {
        unsigned int v12 = *(_DWORD *)(a2 + 12);
      }
      if (!v12)
      {
LABEL_29:
        if (v9 < v11) {
          int v14 = -1;
        }
        else {
          int v14 = 1;
        }
        return v14 == -1;
      }
    }
    int v13 = memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), v12);
    int v14 = (v13 >> 31) | 1;
    if (!v13) {
      int v14 = 0;
    }
    if (v9 == v11 || v13) {
      return v14 == -1;
    }
    goto LABEL_29;
  }
  if (v4 == 2) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 12);
  int v6 = *(_DWORD *)(a2 + 12);
  if (v5 == v6) {
    return *(void *)(a1 + 16) < *(void *)(a2 + 16);
  }
  else {
    return v5 < v6;
  }
}

uint64_t *llvm::Attribute::Profile(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v3) = v2;
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  unsigned int v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v5) = HIDWORD(v2);
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t llvm::Attribute::canUseAsFnAttr(int a1)
{
  return byte_1CFAC7B70[a1 - 1] & 1;
}

uint64_t llvm::Attribute::canUseAsParamAttr(int a1)
{
  return (byte_1CFAC7B70[a1 - 1] >> 1) & 1;
}

uint64_t llvm::Attribute::canUseAsRetAttr(int a1)
{
  return (byte_1CFAC7B70[a1 - 1] >> 2) & 1;
}

uint64_t llvm::AttributeSet::get(llvm::AttributeSet *this, uint64_t **a2, const llvm::AttrBuilder *a3)
{
  return llvm::AttributeSetNode::getSorted((uint64_t *)this, a2[1], *((unsigned int *)a2 + 4));
}

uint64_t llvm::AttributeSetNode::get(llvm::AttributeSetNode *this, uint64_t **a2, const llvm::AttrBuilder *a3)
{
  return llvm::AttributeSetNode::getSorted((uint64_t *)this, a2[1], *((unsigned int *)a2 + 4));
}

uint64_t llvm::AttributeSetNode::get(uint64_t *a1, void *__src, uint64_t a3)
{
  v8[8] = *MEMORY[0x1E4F143B8];
  size_t v4 = 8 * a3;
  if ((unint64_t)(8 * a3) >= 0x41) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3) {
    memcpy(v8, __src, v4);
  }
  size_t v5 = (v4 >> 3);
  int v7 = v5;
  if (v5 >= 2)
  {
    qsort(v8, v5, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CC512664);
    LODWORD(v5) = v7;
  }
  return llvm::AttributeSetNode::getSorted(a1, v8, v5);
}

uint64_t llvm::AttributeSet::addAttribute(uint64_t *a1, uint64_t *a2, signed int a3)
{
  v12[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  if (!*a1 || ((*(unsigned __int8 *)(v6 + a3 / 8 + 12) >> (a3 & 7)) & 1) == 0)
  {
    uint64_t v10 = v12;
    uint64_t v11 = 0x800000000;
    unint64_t v7 = llvm::Attribute::get(a2, a3, 0);
    sub_1CC50F4B4((unsigned int *)&v10, a3, v7);
    uint64_t Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v10, v11);
    uint64_t v6 = llvm::AttributeSet::addAttributes(a1, a2, Sorted);
    if (v10 != v12) {
      free(v10);
    }
  }
  return v6;
}

uint64_t llvm::AttributeSet::hasAttribute(void *a1, int a2)
{
  if (*a1) {
    return (*(unsigned __int8 *)(*a1 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  }
  else {
    return 0;
  }
}

uint64_t **llvm::AttrBuilder::addAttribute(uint64_t **a1, unsigned int a2)
{
  size_t v4 = (unsigned int *)(a1 + 1);
  unint64_t v5 = llvm::Attribute::get(*a1, a2, 0);
  sub_1CC50F4B4(v4, a2, v5);
  return a1;
}

uint64_t llvm::AttributeSet::addAttributes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  void v17[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (a3)
    {
      uint64_t v5 = a3;
      int v14 = a2;
      int v15 = v17;
      uint64_t v16 = 0x800000000;
      sub_1CC512940((uint64_t)&v15, (uint64_t)v17, (char *)(v3 + 48), (char *)(v3 + 48 + 8 * *(unsigned int *)(v3 + 8)));
      uint64_t v11 = v13;
      uint64_t v12 = 0x800000000;
      sub_1CC512940((uint64_t)&v11, (uint64_t)v13, (char *)(v5 + 48), (char *)(v5 + 48 + 8 * *(unsigned int *)(v5 + 8)));
      uint64_t v6 = (uint64_t *)v11;
      if (v12)
      {
        uint64_t v7 = 8 * v12;
        do
        {
          uint64_t v8 = *v6++;
          llvm::AttrBuilder::addAttribute((uint64_t)&v14, v8);
          v7 -= 8;
        }
        while (v7);
        uint64_t v6 = (uint64_t *)v11;
      }
      if (v6 != (uint64_t *)v13) {
        free(v6);
      }
      uint64_t Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v15, v16);
      if (v15 != v17) {
        free(v15);
      }
      return Sorted;
    }
    else
    {
      return *a1;
    }
  }
  return a3;
}

uint64_t **llvm::AttrBuilder::addAttribute(uint64_t **a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t a5)
{
  uint64_t v8 = (uint64_t)(a1 + 1);
  uint64_t v9 = llvm::Attribute::get(*a1, a2, a3, a4, a5);
  sub_1CC50F2F8(v8, a2, a3, (uint64_t)v9);
  return a1;
}

void *llvm::AttrBuilder::AttrBuilder(void *a1, uint64_t a2, char *a3)
{
  *a1 = a2;
  uint64_t v4 = (uint64_t)(a1 + 3);
  a1[1] = a1 + 3;
  uint64_t v5 = (uint64_t)(a1 + 1);
  a1[2] = 0x800000000;
  if (a3)
  {
    uint64_t v8 = a3;
    a3 += 48;
    uint64_t v6 = &a3[8 * *((unsigned int *)v8 + 2)];
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_1CC512940(v5, v4, a3, v6);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;

  *a1 = a2;
  uint64_t v4 = (uint64_t)(a1 + 3);
  a1[1] = a1 + 3;
  uint64_t v5 = (uint64_t)(a1 + 1);
  a1[2] = 0x800000000;
  if (a3)
  {
    uint64_t v6 = a3;
    a3 += 48;
    uint64_t v7 = &a3[8 * *((unsigned int *)v6 + 2)];
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_1CC512940(v5, v4, a3, v7);
  return a1;
}

uint64_t llvm::AttributeSet::removeAttribute(uint64_t *a1, uint64_t *a2, int a3)
{
  v10[8] = *MEMORY[0x1E4F143B8];
  uint64_t Sorted = *a1;
  if (*a1)
  {
    if ((*(unsigned __int8 *)(Sorted + a3 / 8 + 12) >> (a3 & 7)))
    {
      uint64_t v7 = a2;
      uint64_t v8 = v10;
      uint64_t v9 = 0x800000000;
      sub_1CC512940((uint64_t)&v8, (uint64_t)v10, (char *)(Sorted + 48), (char *)(Sorted + 48 + 8 * *(unsigned int *)(Sorted + 8)));
      llvm::AttrBuilder::removeAttribute((uint64_t)&v7, a3);
      uint64_t Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v8, v9);
      if (v8 != v10) {
        free(v8);
      }
    }
  }
  return Sorted;
}

uint64_t llvm::AttrBuilder::removeAttribute(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(char **)(a1 + 8);
    unint64_t v6 = v4;
    while (1)
    {
      unint64_t v7 = v6 >> 1;
      uint64_t v8 = (uint64_t *)&v5[8 * (v6 >> 1)];
      uint64_t v9 = *v8;
      if (!*v8) {
        goto LABEL_6;
      }
      if (*(unsigned char *)(v9 + 8) != 2) {
        break;
      }
      v6 >>= 1;
LABEL_9:
      if (!v6) {
        goto LABEL_13;
      }
    }
    LODWORD(v9) = *(_DWORD *)(v9 + 12);
LABEL_6:
    uint64_t v10 = (char *)(v8 + 1);
    v6 += ~v7;
    if ((int)v9 < a2) {
      uint64_t v5 = v10;
    }
    else {
      unint64_t v6 = v7;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(char **)(a1 + 8);
LABEL_13:
  uint64_t v11 = (char *)(v3 + 8 * v4);
  if (v5 != v11)
  {
    uint64_t v12 = *(void *)v5;
    if (*(void *)v5)
    {
      if (*(unsigned char *)(v12 + 8) == 2 || *(_DWORD *)(v12 + 12) != a2) {
        return a1;
      }
    }
    else if (a2)
    {
      return a1;
    }
    if (v11 != v5 + 8)
    {
      memmove(v5, v5 + 8, v11 - (v5 + 8));
      LODWORD(v4) = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v4 - 1;
  }
  return a1;
}

uint64_t llvm::AttributeSet::removeAttribute(uint64_t *a1, uint64_t *a2, void *a3, size_t a4)
{
  v24[8] = *MEMORY[0x1E4F143B8];
  uint64_t Sorted = *a1;
  if (!*a1) {
    return Sorted;
  }
  int v5 = *(_DWORD *)(Sorted + 40);
  if (!v5) {
    return Sorted;
  }
  uint64_t v10 = *(void *)(Sorted + 24);
  int v11 = sub_1CD0B03C8(a3, (uint64_t)a3 + a4);
  unsigned int v12 = v5 - 1;
  for (int i = 1; ; ++i)
  {
    int v14 = v11 & v12;
    uint64_t v15 = v10 + 24 * (v11 & v12);
    uint64_t v16 = *(const void **)v15;
    if (*(void *)v15 == -1)
    {
      if (a3 == (void *)-1) {
        goto LABEL_13;
      }
      goto LABEL_6;
    }
    if (v16 != (const void *)-2) {
      break;
    }
    if (a3 == (void *)-2) {
      goto LABEL_13;
    }
LABEL_6:
    if (v16 == (const void *)-1) {
      return *a1;
    }
    int v11 = i + v14;
  }
  if (a4 != *(void *)(v15 + 8) || a4 && memcmp(a3, v16, a4)) {
    goto LABEL_6;
  }
LABEL_13:
  uint64_t v18 = *a1;
  char v21 = a2;
  char v22 = v24;
  uint64_t v23 = 0x800000000;
  if (v18)
  {
    int v19 = (char *)(v18 + 48);
    int v20 = (char *)(v18 + 48 + 8 * *(unsigned int *)(v18 + 8));
  }
  else
  {
    int v19 = 0;
    int v20 = 0;
  }
  sub_1CC512940((uint64_t)&v22, (uint64_t)v24, v19, v20);
  llvm::AttrBuilder::removeAttribute((uint64_t)&v21, a3, a4);
  uint64_t Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return Sorted;
}

uint64_t llvm::AttributeSet::hasAttribute(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v6 = 0;
  return sub_1CC5122C8((uint64_t *)(v3 + 24), (uint64_t)v5, &v6);
}

uint64_t llvm::AttrBuilder::removeAttribute(uint64_t a1, void *__s2, unint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = *(char **)(a1 + 8);
    unint64_t v9 = *(unsigned int *)(a1 + 16);
    while (1)
    {
      unint64_t v10 = v9 >> 1;
      int v11 = (uint64_t *)&v8[8 * (v9 >> 1)];
      uint64_t v12 = *v11;
      if (!*v11 || *(unsigned char *)(v12 + 8) != 2) {
        goto LABEL_11;
      }
      unint64_t v13 = *(unsigned int *)(v12 + 12);
      size_t v14 = a3 >= v13 ? *(unsigned int *)(v12 + 12) : a3;
      if (!v14) {
        break;
      }
      int v15 = memcmp((const void *)(v12 + 24), __s2, v14);
      if (!v15) {
        break;
      }
      if (v15 < 0) {
        goto LABEL_11;
      }
LABEL_12:
      unint64_t v9 = v10;
      if (!v10) {
        goto LABEL_21;
      }
    }
    if (a3 == v13 || a3 <= v13) {
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v10 = v9 + ~v10;
    uint64_t v8 = (char *)(v11 + 1);
    goto LABEL_12;
  }
  uint64_t v8 = *(char **)(a1 + 8);
LABEL_21:
  unsigned int v17 = (char *)(v6 + 8 * v7);
  if (v8 != v17 && llvm::Attribute::hasAttribute((uint64_t *)v8, __s2, a3))
  {
    if (v17 != v8 + 8)
    {
      memmove(v8, v8 + 8, v17 - (v8 + 8));
      LODWORD(v7) = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v7 - 1;
  }
  return a1;
}

uint64_t llvm::AttributeSet::removeAttributes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  void v20[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  unsigned int v17 = a2;
  uint64_t v18 = v20;
  uint64_t v19 = 0x800000000;
  if (v6)
  {
    uint64_t v7 = (char *)(v6 + 48);
    uint64_t v8 = (char *)(v6 + 48 + 8 * *(unsigned int *)(v6 + 8));
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  sub_1CC512940((uint64_t)&v18, (uint64_t)v20, v7, v8);
  if (v19)
  {
    unint64_t v9 = (unint64_t *)v18;
    uint64_t v10 = 8 * v19;
    while (1)
    {
      unint64_t v11 = *v9;
      if (!*v9) {
        goto LABEL_9;
      }
      if (*(unsigned char *)(v11 + 8) != 2) {
        break;
      }
      unint64_t v12 = v11 + 24;
      uint64_t v13 = *(unsigned int *)(v11 + 12);
      v16[0] = v12;
      v16[1] = v13;
      if (sub_1CC512B60(a3 + 16, (uint64_t)v16))
      {
LABEL_13:
        llvm::AttrBuilder::remove((uint64_t)&v17, a3);
        uint64_t Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v18, v19);
        goto LABEL_15;
      }
LABEL_10:
      ++v9;
      v10 -= 8;
      if (!v10) {
        goto LABEL_14;
      }
    }
    unint64_t v11 = *(unsigned int *)(v11 + 12);
LABEL_9:
    if (((1 << v11) & *(void *)(a3 + ((v11 >> 3) & 0x1FFFFFF8))) != 0) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
LABEL_14:
  uint64_t Sorted = *a1;
LABEL_15:
  if (v18 != v20) {
    free(v18);
  }
  return Sorted;
}

BOOL llvm::AttrBuilder::overlaps(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2)
  {
    unint64_t v4 = *(unint64_t **)(a1 + 8);
    uint64_t v5 = a2 + 16;
    for (uint64_t i = 8 * v2 - 8; ; i -= 8)
    {
      unint64_t v7 = *v4;
      if (*v4)
      {
        if (*(unsigned char *)(v7 + 8) == 2)
        {
          unint64_t v11 = v7 + 24;
          uint64_t v12 = *(unsigned int *)(v7 + 12);
          v13[0] = v11;
          v13[1] = v12;
          uint64_t v8 = sub_1CC512B60(v5, (uint64_t)v13);
          goto LABEL_7;
        }
        unint64_t v7 = *(unsigned int *)(v7 + 12);
      }
      uint64_t v8 = (1 << v7) & *(void *)(a2 + ((v7 >> 3) & 0x1FFFFFF8));
LABEL_7:
      BOOL result = v8 != 0;
      ++v4;
      if (v8) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = i == 0;
      }
      if (v10) {
        return result;
      }
    }
  }
  return 0;
}

uint64_t llvm::AttrBuilder::remove(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unint64_t **)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (!v4) {
    goto LABEL_2;
  }
  uint64_t v5 = &v3[v4];
  uint64_t v8 = 8 * v4 - 8;
  while (1)
  {
    unint64_t v9 = *v3;
    if (!*v3) {
      goto LABEL_8;
    }
    if (*(unsigned char *)(v9 + 8) != 2)
    {
      unint64_t v9 = *(unsigned int *)(v9 + 12);
LABEL_8:
      uint64_t v10 = (1 << v9) & *(void *)(a2 + ((v9 >> 3) & 0x1FFFFFF8));
      goto LABEL_9;
    }
    uint64_t v13 = *(unsigned int *)(v9 + 12);
    v14[0] = v9 + 24;
    v14[1] = v13;
    uint64_t v10 = sub_1CC512B60(a2 + 16, (uint64_t)v14);
LABEL_9:
    unint64_t v11 = v3 + 1;
    if (v10) {
      break;
    }
    v8 -= 8;
    ++v3;
    if (v11 == v5) {
      goto LABEL_3;
    }
  }
  if (v11 == v5)
  {
LABEL_2:
    uint64_t v5 = v3;
    goto LABEL_3;
  }
  uint64_t v12 = 1;
  uint64_t v5 = v3;
  do
  {
    if (!sub_1CC512AEC(a2, v3[v12])) {
      *v5++ = v3[v12];
    }
    ++v12;
    v8 -= 8;
  }
  while (v8);
LABEL_3:
  *(_DWORD *)(a1 + 16) = ((unint64_t)v5 - *(void *)(a1 + 8)) >> 3;
  return a1;
}

uint64_t llvm::AttributeSet::getNumAttributes(llvm::AttributeSet *this)
{
  if (*(void *)this) {
    return *(unsigned int *)(*(void *)this + 8);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeSetNode::hasAttribute(uint64_t a1, void *a2, size_t a3)
{
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    int v7 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
    unsigned int v8 = v3 - 1;
    for (int i = 1; ; ++i)
    {
      int v10 = v7 & v8;
      uint64_t v11 = v6 + 24 * (v7 & v8);
      uint64_t v12 = *(const void **)v11;
      if (*(void *)v11 == -1)
      {
        if (a2 == (void *)-1) {
          return 1;
        }
      }
      else if (v12 == (const void *)-2)
      {
        if (a2 == (void *)-2) {
          return 1;
        }
      }
      else if (a3 == *(void *)(v11 + 8) && (!a3 || !memcmp(a2, v12, a3)))
      {
        return 1;
      }
      if (v12 == (const void *)-1) {
        return 0;
      }
      int v7 = i + v10;
    }
  }
  return 0;
}

uint64_t llvm::AttributeSetNode::getAttribute(uint64_t a1, int a2)
{
  if (((*(unsigned __int8 *)(a1 + a2 / 8 + 12) >> (a2 & 7)) & 1) == 0) {
    return 0;
  }
  int v3 = (void *)(a1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      int v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      unint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < a2) {
        int v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  return *v3;
}

uint64_t llvm::AttributeSetNode::getAttribute(uint64_t a1, void *a2, size_t a3)
{
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    int v7 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
    unsigned int v8 = v3 - 1;
    for (int i = 1; ; ++i)
    {
      int v10 = v7 & v8;
      uint64_t v11 = v6 + 24 * (v7 & v8);
      uint64_t v12 = *(const void **)v11;
      if (*(void *)v11 == -1)
      {
        if (a2 == (void *)-1) {
          return *(void *)(v11 + 16);
        }
      }
      else if (v12 == (const void *)-2)
      {
        if (a2 == (void *)-2) {
          return *(void *)(v11 + 16);
        }
      }
      else if (a3 == *(void *)(v11 + 8) && (!a3 || !memcmp(a2, *(const void **)v11, a3)))
      {
        return *(void *)(v11 + 16);
      }
      if (v12 == (const void *)-1) {
        return 0;
      }
      int v7 = i + v10;
    }
  }
  return 0;
}

uint64_t llvm::AttributeSetNode::getAlignment(llvm::AttributeSetNode *this)
{
  if ((*((unsigned char *)this + 21) & 4) != 0)
  {
    uint64_t v4 = (char *)this + 48;
    uint64_t v5 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
    if (v5)
    {
      unint64_t v6 = v5 >> 3;
      do
      {
        unint64_t v7 = v6 >> 1;
        unsigned int v8 = &v4[8 * (v6 >> 1)];
        uint64_t v9 = *(void *)v8;
        if (*(void *)v8) {
          LODWORD(v9) = *(_DWORD *)(v9 + 12);
        }
        int v10 = v8 + 8;
        v6 += ~v7;
        if ((int)v9 < 74) {
          uint64_t v4 = v10;
        }
        else {
          unint64_t v6 = v7;
        }
      }
      while (v6);
    }
    unint64_t v11 = *(void *)(*(void *)v4 + 16);
    unsigned int v2 = __clz(v11) ^ 0x3F | 0x100;
    if (!v11) {
      unsigned int v2 = 0;
    }
    unsigned int v1 = v2 >> 8;
  }
  else
  {
    unsigned int v1 = 0;
    LOBYTE(v2) = 0;
  }
  return v2 | (v1 << 8);
}

uint64_t llvm::AttributeSet::getStackAlignment(llvm::AttributeSetNode **this)
{
  unsigned int v1 = *this;
  if (v1)
  {
    LOWORD(v1) = llvm::AttributeSetNode::getStackAlignment(v1);
    int v2 = BYTE1(v1);
  }
  else
  {
    int v2 = 0;
  }
  return v1 | (v2 << 8);
}

uint64_t llvm::AttributeSetNode::getStackAlignment(llvm::AttributeSetNode *this)
{
  if ((*((unsigned char *)this + 21) & 0x40) != 0)
  {
    uint64_t v4 = (char *)this + 48;
    uint64_t v5 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
    if (v5)
    {
      unint64_t v6 = v5 >> 3;
      do
      {
        unint64_t v7 = v6 >> 1;
        unsigned int v8 = &v4[8 * (v6 >> 1)];
        uint64_t v9 = *(void *)v8;
        if (*(void *)v8) {
          LODWORD(v9) = *(_DWORD *)(v9 + 12);
        }
        int v10 = v8 + 8;
        v6 += ~v7;
        if ((int)v9 < 78) {
          uint64_t v4 = v10;
        }
        else {
          unint64_t v6 = v7;
        }
      }
      while (v6);
    }
    unint64_t v11 = *(void *)(*(void *)v4 + 16);
    unsigned int v2 = __clz(v11) ^ 0x3F | 0x100;
    if (!v11) {
      unsigned int v2 = 0;
    }
    unsigned int v1 = v2 >> 8;
  }
  else
  {
    unsigned int v1 = 0;
    LOBYTE(v2) = 0;
  }
  return v2 | (v1 << 8);
}

uint64_t llvm::AttributeSet::getDereferenceableBytes(llvm::AttributeSet *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || (*(unsigned char *)(v1 + 21) & 0x10) == 0) {
    return 0;
  }
  int v3 = (void *)(v1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      unint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 76) {
        int v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  return *(void *)(*v3 + 16);
}

uint64_t llvm::AttributeSetNode::getDereferenceableBytes(llvm::AttributeSetNode *this)
{
  if ((*((unsigned char *)this + 21) & 0x10) == 0) {
    return 0;
  }
  unsigned int v2 = (char *)this + 48;
  uint64_t v3 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    do
    {
      unint64_t v5 = v4 >> 1;
      unint64_t v6 = &v2[8 * (v4 >> 1)];
      uint64_t v7 = *(void *)v6;
      if (*(void *)v6) {
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      }
      uint64_t v8 = v6 + 8;
      v4 += ~v5;
      if ((int)v7 < 76) {
        unsigned int v2 = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  return *(void *)(*(void *)v2 + 16);
}

uint64_t llvm::AttributeSet::getDereferenceableOrNullBytes(llvm::AttributeSet *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || (*(unsigned char *)(v1 + 21) & 0x20) == 0) {
    return 0;
  }
  uint64_t v3 = (void *)(v1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 77) {
        uint64_t v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  return *(void *)(*v3 + 16);
}

uint64_t llvm::AttributeSetNode::getDereferenceableOrNullBytes(llvm::AttributeSetNode *this)
{
  if ((*((unsigned char *)this + 21) & 0x20) == 0) {
    return 0;
  }
  unsigned int v2 = (char *)this + 48;
  uint64_t v3 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    do
    {
      unint64_t v5 = v4 >> 1;
      unint64_t v6 = &v2[8 * (v4 >> 1)];
      uint64_t v7 = *(void *)v6;
      if (*(void *)v6) {
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      }
      uint64_t v8 = v6 + 8;
      v4 += ~v5;
      if ((int)v7 < 77) {
        unsigned int v2 = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  return *(void *)(*(void *)v2 + 16);
}

uint64_t llvm::AttributeSet::getByRefType(llvm::AttributeSet *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || (*(unsigned char *)(v1 + 20) & 0x10) == 0) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(v1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 68) {
        uint64_t v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  uint64_t v10 = *v3;
  if (v10) {
    return *(void *)(v10 + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeSetNode::getAttributeType(uint64_t a1, int a2)
{
  if (((*(unsigned __int8 *)(a1 + a2 / 8 + 12) >> (a2 & 7)) & 1) == 0) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(a1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < a2) {
        uint64_t v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  uint64_t v10 = *v3;
  if (v10) {
    return *(void *)(v10 + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeSet::getByValType(llvm::AttributeSet *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || (*(unsigned char *)(v1 + 20) & 0x20) == 0) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(v1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 69) {
        uint64_t v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  uint64_t v10 = *v3;
  if (v10) {
    return *(void *)(v10 + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeSet::getStructRetType(llvm::AttributeSet *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || (*(unsigned char *)(v1 + 21) & 2) == 0) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(v1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 73) {
        uint64_t v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  uint64_t v10 = *v3;
  if (v10) {
    return *(void *)(v10 + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeSet::getPreallocatedType(llvm::AttributeSet *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || (*(unsigned char *)(v1 + 21) & 1) == 0) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(v1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 72) {
        uint64_t v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  uint64_t v10 = *v3;
  if (v10) {
    return *(void *)(v10 + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeSet::getInAllocaType(llvm::AttributeSet *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || (*(char *)(v1 + 20) & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(v1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 71) {
        uint64_t v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  uint64_t v10 = *v3;
  if (v10) {
    return *(void *)(v10 + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeSet::getUWTableKind(llvm::AttributeSet *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || (*(char *)(v1 + 21) & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v3 = (void *)(v1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 79) {
        uint64_t v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  return *(unsigned int *)(*v3 + 16);
}

uint64_t llvm::AttributeSetNode::getUWTableKind(llvm::AttributeSetNode *this)
{
  if ((*((char *)this + 21) & 0x80000000) == 0) {
    return 0;
  }
  unsigned int v2 = (char *)this + 48;
  uint64_t v3 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    do
    {
      unint64_t v5 = v4 >> 1;
      unint64_t v6 = &v2[8 * (v4 >> 1)];
      uint64_t v7 = *(void *)v6;
      if (*(void *)v6) {
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      }
      uint64_t v8 = v6 + 8;
      v4 += ~v5;
      if ((int)v7 < 79) {
        unsigned int v2 = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  return *(unsigned int *)(*(void *)v2 + 16);
}

void llvm::AttributeSet::getAsString(llvm::AttributeSetNode **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *this;
  if (v3)
  {
    llvm::AttributeSetNode::getAsString(v3, a2, (std::string *)a3);
  }
  else
  {
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

void llvm::AttributeSetNode::getAsString(llvm::AttributeSetNode *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (char *)this + 48;
    uint64_t v8 = 8 * v4;
    do
    {
      if (v6) {
        std::string::push_back(a3, 32);
      }
      llvm::Attribute::getAsString((llvm::Attribute *)&v7[v6], a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v6 += 8;
    }
    while (v8 != v6);
  }
}

BOOL llvm::AttributeSet::hasParentContext(llvm::AttributeSet *this, llvm::LLVMContext *a2)
{
  v23[16] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = v20;
  uint64_t v19 = 0x2000000000;
  uint64_t v3 = *(unsigned int *)(*(void *)this + 8);
  if (v3)
  {
    LODWORD(v4) = 0;
    unint64_t v5 = (uint64_t *)(*(void *)this + 48);
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *v5;
      if (v4 >= HIDWORD(v19)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v18 + v4) = v7;
      unsigned int v8 = v19 + 1;
      LODWORD(v19) = v8;
      if (v8 >= HIDWORD(v19)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v18 + v8) = HIDWORD(v7);
      uint64_t v4 = (v19 + 1);
      LODWORD(v19) = v19 + 1;
      ++v5;
      v6 -= 8;
    }
    while (v6);
    uint64_t v9 = v18;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v9 = v20;
  }
  uint64_t v10 = *(void *)a2;
  unint64_t v11 = sub_1CC13A6B8(v9, (uint64_t)v9 + 4 * v4);
  uint64_t v13 = *(void *)(*(void *)(v10 + 256) + 8 * ((*(_DWORD *)(v10 + 264) - 1) & v11));
  char v21 = v23;
  uint64_t v22 = 0x2000000000;
  if (v13) {
    BOOL v14 = (v13 & 1) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    while (1)
    {
      LOBYTE(v11) = sub_1CC5120E4(v11, v13, (uint64_t)&v18, v12, (uint64_t)&v21);
      if (v11) {
        break;
      }
      LODWORD(v22) = 0;
      uint64_t v13 = *(void *)v13;
      if (v13) {
        BOOL v15 = (v13 & 1) == 0;
      }
      else {
        BOOL v15 = 0;
      }
      if (!v15)
      {
        uint64_t v13 = 0;
        break;
      }
    }
    if (v21 != v23) {
      free(v21);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v16 = *(void *)this;
  if (v18 != v20) {
    free(v18);
  }
  return v13 == v16;
}

uint64_t llvm::AttributeSet::begin(llvm::AttributeSet *this)
{
  if (*(void *)this) {
    return *(void *)this + 48;
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeSet::end(llvm::AttributeSet *this)
{
  if (*(void *)this) {
    return *(void *)this + 8 * *(unsigned int *)(*(void *)this + 8) + 48;
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeSetNode::AttributeSetNode(uint64_t a1, const void *a2, uint64_t a3)
{
  int v3 = a3;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 12) = 0u;
  uint64_t v25 = a1 + 12;
  *(_OWORD *)(a1 + 28) = 0u;
  if (a3)
  {
    unint64_t v5 = (uint64_t *)(a1 + 48);
    memmove((void *)(a1 + 48), a2, 8 * a3);
    if (v3)
    {
      uint64_t v6 = &v5[v3];
      do
      {
        uint64_t v7 = *v5;
        if (*v5)
        {
          if (*(unsigned char *)(v7 + 8) == 2)
          {
            unsigned int v8 = (void *)*(unsigned int *)(v7 + 12);
            __s1[0] = (void *)(v7 + 24);
            __s1[1] = v8;
            uint64_t v27 = v7;
            int v9 = *(_DWORD *)(a1 + 40);
            if (v9)
            {
              uint64_t v10 = *(void *)(a1 + 24);
              unsigned int v11 = sub_1CD0B03C8((void *)(v7 + 24), (uint64_t)v8 + v7 + 24);
              uint64_t v12 = 0;
              int v13 = v9 - 1;
              int v14 = 1;
              BOOL v15 = __s1[0];
              while (1)
              {
                unsigned int v16 = v11 & v13;
                uint64_t v17 = v10 + 24 * (v11 & v13);
                uint64_t v18 = *(const void **)v17;
                if (*(void *)v17 == -1)
                {
                  if (v15 == (const void *)-1) {
                    goto LABEL_15;
                  }
                }
                else if (v18 == (const void *)-2)
                {
                  if (v15 == (const void *)-2) {
                    goto LABEL_15;
                  }
                }
                else if (__s1[1] == *(void **)(v17 + 8))
                {
                  if (!__s1[1]) {
                    goto LABEL_15;
                  }
                  int v24 = v14;
                  int v21 = memcmp(v15, *(const void **)v17, (size_t)__s1[1]);
                  int v14 = v24;
                  if (!v21) {
                    goto LABEL_15;
                  }
                }
                if (v18 == (const void *)-1) {
                  break;
                }
                if (v12) {
                  BOOL v23 = 0;
                }
                else {
                  BOOL v23 = v18 == (const void *)-2;
                }
                if (v23) {
                  uint64_t v12 = v10 + 24 * v16;
                }
                unsigned int v11 = v14 + v16;
                ++v14;
              }
              if (v12) {
                uint64_t v19 = v12;
              }
              else {
                uint64_t v19 = v10 + 24 * v16;
              }
            }
            else
            {
              uint64_t v19 = 0;
            }
            uint64_t v20 = sub_1CC5123DC(a1 + 24, (uint64_t)__s1, (uint64_t)__s1, v19);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)__s1;
            *(void *)(v20 + 16) = v27;
            goto LABEL_15;
          }
          LODWORD(v7) = *(_DWORD *)(v7 + 12);
        }
        *(unsigned char *)(v25 + (int)v7 / 8) |= 1 << (v7 & 7);
LABEL_15:
        ++v5;
      }
      while (v5 != v6);
    }
  }
  return a1;
}

uint64_t llvm::AttributeSetNode::getSorted(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned char v33[16] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  unsigned int v4 = 0;
  uint64_t v5 = *a1;
  unsigned int v28 = 0;
  uint64_t v6 = 8 * a3;
  uint64_t v7 = 8 * a3;
  unsigned int v8 = a2;
  do
  {
    uint64_t v9 = *v8;
    if (v4 >= 0x20) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v30 + v4) = v9;
    unsigned int v10 = v28 + 1;
    unsigned int v29 = v10;
    if (v10 >= 0x20) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v30 + v10) = HIDWORD(v9);
    unsigned int v4 = v10 + 1;
    unsigned int v28 = v29 + 1;
    ++v8;
    v7 -= 8;
  }
  while (v7);
  uint64_t v11 = *(void *)(v5 + 256)
      + 8 * ((*(_DWORD *)(v5 + 264) - 1) & sub_1CC13A6B8(v30, (uint64_t)v30 + 4 * v4));
  uint64_t v12 = *(void *)v11;
  __s1 = v33;
  uint64_t v32 = 0x2000000000;
  if (v12) {
    BOOL v13 = (v12 & 1) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13) {
    goto LABEL_29;
  }
  while (1)
  {
    uint64_t v14 = *(unsigned int *)(v12 + 8);
    if (v14)
    {
      unsigned int v15 = 0;
      unsigned int v16 = (uint64_t *)(v12 + 48);
      uint64_t v17 = 8 * v14;
      do
      {
        uint64_t v18 = *v16;
        if (v15 >= HIDWORD(v32)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)__s1 + v15) = v18;
        unsigned int v19 = v32 + 1;
        LODWORD(v32) = v19;
        if (v19 >= HIDWORD(v32)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)__s1 + v19) = HIDWORD(v18);
        unsigned int v15 = v32 + 1;
        LODWORD(v32) = v32 + 1;
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    else
    {
      unsigned int v15 = 0;
    }
    if (v28 == v15)
    {
      uint64_t v20 = __s1;
      if (!memcmp(__s1, v30, 4 * v15)) {
        break;
      }
    }
    LODWORD(v32) = 0;
    uint64_t v12 = *(void *)v12;
    if (v12) {
      BOOL v21 = (v12 & 1) == 0;
    }
    else {
      BOOL v21 = 0;
    }
    if (!v21)
    {
      uint64_t v12 = 0;
      uint64_t v20 = __s1;
      goto LABEL_25;
    }
  }
  uint64_t v11 = 0;
LABEL_25:
  if (v20 != v33) {
    free(v20);
  }
  if (!v12)
  {
LABEL_29:
    uint64_t v12 = (uint64_t)operator new(v6 + 48);
    llvm::AttributeSetNode::AttributeSetNode(v12, a2, a3);
    unsigned int v23 = *(_DWORD *)(v5 + 268) + 1;
    int v24 = *(_DWORD *)(v5 + 264);
    if (v23 > 2 * v24)
    {
      llvm::FoldingSetBase::GrowBucketCount(v5 + 256, 2 * v24, (uint64_t)off_1F2616230);
      __s1 = v33;
      uint64_t v32 = 0x2000000000;
      uint64_t v11 = *(void *)(v5 + 256)
          + 8 * ((*(_DWORD *)(v5 + 264) - 1) & sub_1CC5121EC(v26, v12, (uint64_t)&__s1));
      if (__s1 != v33) {
        free(__s1);
      }
      unsigned int v23 = *(_DWORD *)(v5 + 268) + 1;
    }
    *(_DWORD *)(v5 + 268) = v23;
    uint64_t v25 = *(void *)v11;
    if (!*(void *)v11) {
      uint64_t v25 = v11 | 1;
    }
    *(void *)uint64_t v12 = v25;
    *(void *)uint64_t v11 = v12;
  }
  return v12;
}

uint64_t llvm::AttributeSetNode::findEnumAttribute(uint64_t a1, int a2)
{
  if (((*(unsigned __int8 *)(a1 + a2 / 8 + 12) >> (a2 & 7)) & 1) == 0) {
    return 0;
  }
  int v3 = (void *)(a1 + 48);
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 32);
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (*v7) {
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      }
      uint64_t v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < a2) {
        int v3 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  return *v3;
}

uint64_t llvm::AttributeListImpl::AttributeListImpl(uint64_t a1, void *__src, uint64_t a3)
{
  uint64_t v4 = __src;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 12) = 0;
  uint64_t v6 = a1 + 12;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  if (a3) {
    memmove((void *)(a1 + 40), __src, 8 * a3);
  }
  uint64_t v7 = *v4;
  if (*v4) {
    uint64_t v8 = (uint64_t *)(*v4 + 48);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    uint64_t v9 = *v4 + 48 + 8 * *(unsigned int *)(v7 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 != (uint64_t *)v9)
  {
    while (1)
    {
      uint64_t v10 = *v8;
      if (!*v8) {
        goto LABEL_14;
      }
      if (*(unsigned char *)(v10 + 8) != 2) {
        break;
      }
LABEL_11:
      if (++v8 == (uint64_t *)v9) {
        goto LABEL_15;
      }
    }
    LODWORD(v10) = *(_DWORD *)(v10 + 12);
LABEL_14:
    *(unsigned char *)(v6 + (int)v10 / 8) |= 1 << (v10 & 7);
    goto LABEL_11;
  }
LABEL_15:
  if (a3)
  {
    uint64_t v11 = &v4[a3];
    do
    {
      uint64_t v12 = 0;
      uint64_t v13 = *v4;
      if (*v4) {
        uint64_t v14 = (uint64_t *)(*v4 + 48);
      }
      else {
        uint64_t v14 = 0;
      }
      if (v13) {
        uint64_t v12 = *v4 + 48 + 8 * *(unsigned int *)(v13 + 8);
      }
      while (v14 != (uint64_t *)v12)
      {
        uint64_t v15 = *v14;
        if (*v14)
        {
          if (*(unsigned char *)(v15 + 8) == 2) {
            goto LABEL_26;
          }
          LODWORD(v15) = *(_DWORD *)(v15 + 12);
        }
        *(unsigned char *)(a1 + 24 + (int)v15 / 8) |= 1 << (v15 & 7);
LABEL_26:
        ++v14;
      }
      ++v4;
    }
    while (v4 != v11);
  }
  return a1;
}

{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  uint64_t v4 = __src;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 12) = 0;
  uint64_t v6 = a1 + 12;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  if (a3) {
    memmove((void *)(a1 + 40), __src, 8 * a3);
  }
  uint64_t v7 = *v4;
  if (*v4) {
    uint64_t v8 = (uint64_t *)(*v4 + 48);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    uint64_t v9 = *v4 + 48 + 8 * *(unsigned int *)(v7 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 != (uint64_t *)v9)
  {
    while (1)
    {
      uint64_t v10 = *v8;
      if (!*v8) {
        goto LABEL_12;
      }
      if (*(unsigned char *)(v10 + 8) != 2) {
        break;
      }
LABEL_13:
      if (++v8 == (uint64_t *)v9) {
        goto LABEL_14;
      }
    }
    LODWORD(v10) = *(_DWORD *)(v10 + 12);
LABEL_12:
    *(unsigned char *)(v6 + (int)v10 / 8) |= 1 << (v10 & 7);
    goto LABEL_13;
  }
LABEL_14:
  if (a3)
  {
    uint64_t v11 = &v4[a3];
    do
    {
      uint64_t v12 = 0;
      uint64_t v13 = *v4;
      if (*v4) {
        uint64_t v14 = (uint64_t *)(*v4 + 48);
      }
      else {
        uint64_t v14 = 0;
      }
      if (v13) {
        uint64_t v12 = *v4 + 48 + 8 * *(unsigned int *)(v13 + 8);
      }
      while (v14 != (uint64_t *)v12)
      {
        uint64_t v15 = *v14;
        if (*v14)
        {
          if (*(unsigned char *)(v15 + 8) == 2) {
            goto LABEL_25;
          }
          LODWORD(v15) = *(_DWORD *)(v15 + 12);
        }
        *(unsigned char *)(a1 + 24 + (int)v15 / 8) |= 1 << (v15 & 7);
LABEL_25:
        ++v14;
      }
      ++v4;
    }
    while (v4 != v11);
  }
  return a1;
}

uint64_t llvm::AttributeListImpl::Profile(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    int v3 = (uint64_t *)(result + 40);
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v3;
      if (v4 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a2 + 4 * v4) = v6;
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      unsigned int v8 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v8;
      if (v8 >= v7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a2 + 4 * v8) = HIDWORD(v6);
      unsigned int v4 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v4;
      ++v3;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t llvm::AttributeListImpl::Profile(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v4 = *(_DWORD *)(result + 8);
    uint64_t v5 = 8 * a3;
    do
    {
      uint64_t v6 = *a2;
      if (v4 >= *(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v4) = v6;
      unsigned int v7 = *(_DWORD *)(result + 12);
      unsigned int v8 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v8;
      if (v8 >= v7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v8) = HIDWORD(v6);
      unsigned int v4 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v4;
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

BOOL llvm::AttributeListImpl::hasAttrSomewhere(uint64_t a1, int a2, int *a3)
{
  if (a2 >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = a2 + 7;
  }
  int v4 = 1 << (a2 & 7);
  int v5 = (v4 & *(unsigned char *)(a1 + (v3 >> 3) + 24));
  if (a3)
  {
    if ((v4 & *(unsigned char *)(a1 + (v3 >> 3) + 24)) != 0)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if (v6)
      {
        uint64_t v7 = (uint64_t)v3 >> 3;
        unsigned int v8 = (void *)(a1 + 40);
        int v9 = -1;
        while (!*v8 || (v4 & *(unsigned char *)(*v8 + v7 + 12)) == 0)
        {
          ++v9;
          ++v8;
          if (!--v6) {
            return v5 != 0;
          }
        }
        *a3 = v9;
      }
    }
  }
  return v5 != 0;
}

uint64_t llvm::AttributeList::getImpl(uint64_t *a1, void *a2, uint64_t a3)
{
  int v4 = a2;
  v44[16] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  unsigned int v39 = 0;
  if (a3)
  {
    LODWORD(v6) = 0;
    uint64_t v7 = 8 * a3;
    unsigned int v8 = a2;
    do
    {
      uint64_t v9 = *v8;
      if (v6 >= 0x20) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v41 + v6) = v9;
      unsigned int v10 = v39 + 1;
      unsigned int v40 = v10;
      if (v10 >= 0x20) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v41 + v10) = HIDWORD(v9);
      uint64_t v6 = v10 + 1;
      unsigned int v39 = v40 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v38 = v5;
  uint64_t v11 = v5 + 240;
  uint64_t v12 = *(void *)(v5 + 240)
      + 8 * ((*(_DWORD *)(v5 + 248) - 1) & sub_1CC13A6B8(v41, (uint64_t)v41 + 4 * v6));
  uint64_t v13 = *(void *)v12;
  __s1 = v44;
  uint64_t v43 = 0x2000000000;
  if (v13) {
    BOOL v14 = (v13 & 1) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_30;
  }
  while (1)
  {
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    if (v15)
    {
      unsigned int v16 = 0;
      uint64_t v17 = (uint64_t *)(v13 + 40);
      uint64_t v18 = 8 * v15;
      do
      {
        uint64_t v19 = *v17;
        if (v16 >= HIDWORD(v43)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)__s1 + v16) = v19;
        unsigned int v20 = v43 + 1;
        LODWORD(v43) = v20;
        if (v20 >= HIDWORD(v43)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)__s1 + v20) = HIDWORD(v19);
        unsigned int v16 = v43 + 1;
        LODWORD(v43) = v43 + 1;
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    else
    {
      unsigned int v16 = 0;
    }
    if (v39 == v16)
    {
      BOOL v21 = __s1;
      if (!memcmp(__s1, v41, 4 * v16)) {
        break;
      }
    }
    LODWORD(v43) = 0;
    uint64_t v13 = *(void *)v13;
    if (v13) {
      BOOL v22 = (v13 & 1) == 0;
    }
    else {
      BOOL v22 = 0;
    }
    if (!v22)
    {
      uint64_t v13 = 0;
      BOOL v21 = __s1;
      goto LABEL_25;
    }
  }
  uint64_t v12 = 0;
LABEL_25:
  if (v21 != v44) {
    free(v21);
  }
  if (!v13)
  {
LABEL_30:
    uint64_t v24 = sub_1CB906F34((uint64_t *)(v38 + 2040), 8 * a3 + 40, 3);
    uint64_t v13 = v24;
    *(void *)uint64_t v24 = 0;
    *(_DWORD *)(v24 + 8) = a3;
    *(void *)(v24 + 12) = 0;
    uint64_t v25 = v24 + 12;
    *(void *)(v24 + 28) = 0;
    *(void *)(v24 + 20) = 0;
    if (a3) {
      memmove((void *)(v24 + 40), v4, 8 * a3);
    }
    uint64_t v26 = *v4;
    if (*v4) {
      uint64_t v27 = (uint64_t *)(*v4 + 48);
    }
    else {
      uint64_t v27 = 0;
    }
    if (v26) {
      uint64_t v28 = *v4 + 48 + 8 * *(unsigned int *)(v26 + 8);
    }
    else {
      uint64_t v28 = 0;
    }
    if (v27 != (uint64_t *)v28)
    {
      while (1)
      {
        uint64_t v29 = *v27;
        if (!*v27) {
          goto LABEL_43;
        }
        if (*(unsigned char *)(v29 + 8) != 2) {
          break;
        }
LABEL_40:
        if (++v27 == (uint64_t *)v28) {
          goto LABEL_44;
        }
      }
      LODWORD(v29) = *(_DWORD *)(v29 + 12);
LABEL_43:
      *(unsigned char *)(v25 + (int)v29 / 8) |= 1 << (v29 & 7);
      goto LABEL_40;
    }
LABEL_44:
    if (!a3) {
      goto LABEL_58;
    }
    BOOL v30 = &v4[a3];
LABEL_46:
    uint64_t v31 = 0;
    uint64_t v32 = *v4;
    if (*v4) {
      int v33 = (uint64_t *)(*v4 + 48);
    }
    else {
      int v33 = 0;
    }
    if (v32) {
      uint64_t v31 = *v4 + 48 + 8 * *(unsigned int *)(v32 + 8);
    }
    while (1)
    {
      if (v33 == (uint64_t *)v31)
      {
        if (++v4 == v30)
        {
LABEL_58:
          int v35 = *(_DWORD *)(v38 + 248);
          unsigned int v36 = *(_DWORD *)(v38 + 252) + 1;
          if (v36 > 2 * v35)
          {
            llvm::FoldingSetBase::GrowBucketCount(v11, 2 * v35, (uint64_t)off_1F2616248);
            __s1 = v44;
            uint64_t v43 = 0x2000000000;
            uint64_t v12 = *(void *)(v38 + 240)
                + 8 * ((*(_DWORD *)(v38 + 248) - 1) & sub_1CC5127E8(v11, v13, (uint64_t)&__s1));
            if (__s1 != v44) {
              free(__s1);
            }
            unsigned int v36 = *(_DWORD *)(v38 + 252) + 1;
          }
          *(_DWORD *)(v38 + 252) = v36;
          uint64_t v37 = *(void *)v12;
          if (!*(void *)v12) {
            uint64_t v37 = v12 | 1;
          }
          *(void *)uint64_t v13 = v37;
          *(void *)uint64_t v12 = v13;
          return v13;
        }
        goto LABEL_46;
      }
      uint64_t v34 = *v33;
      if (*v33)
      {
        if (*(unsigned char *)(v34 + 8) == 2) {
          goto LABEL_55;
        }
        LODWORD(v34) = *(_DWORD *)(v34 + 12);
      }
      *(unsigned char *)(v13 + 24 + (int)v34 / 8) |= 1 << (v34 & 7);
LABEL_55:
      ++v33;
    }
  }
  return v13;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, int *a2, uint64_t a3)
{
  v29[8] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  int v3 = a2;
  uint64_t v24 = v26;
  uint64_t v25 = 0x800000000;
  uint64_t v5 = &a2[4 * a3];
  do
  {
    unsigned int v6 = 0;
    int v7 = *v3;
    int v22 = 0;
    while (*v3 == v7)
    {
      if (v6 >= 4) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v23[v6] = *((void *)v3 + 1);
      unsigned int v6 = ++v22;
      v3 += 4;
      if (v3 == v5)
      {
        int v3 = v5;
        break;
      }
    }
    uint64_t v27 = v29;
    uint64_t v28 = 0x800000000;
    if (v6 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v6)
    {
      memcpy(v29, v23, 8 * v6);
      int v8 = v28;
      uint64_t v9 = v27;
    }
    else
    {
      int v8 = 0;
      uint64_t v9 = v29;
    }
    size_t v10 = v8 + v6;
    LODWORD(v28) = v10;
    if (v10 >= 2)
    {
      qsort(v9, v10, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CC512664);
      uint64_t v9 = v27;
      LODWORD(v10) = v28;
    }
    uint64_t Sorted = llvm::AttributeSetNode::getSorted(a1, v9, v10);
    if (v27 != v29) {
      free(v27);
    }
    int v12 = v25;
    if (v25 >= HIDWORD(v25)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v13 = (char *)v24 + 16 * v25;
    *(_DWORD *)uint64_t v13 = v7;
    *((void *)v13 + 1) = Sorted;
    LODWORD(v25) = v12 + 1;
  }
  while (v3 != v5);
  BOOL v14 = (char *)v24;
  uint64_t v15 = v25;
  if (v25)
  {
    int v16 = *((_DWORD *)v24 + 4 * v25 - 4);
    if (v16 == -1)
    {
      if (v25 <= 1)
      {
        uint64_t v27 = v29;
        uint64_t v28 = 0x400000000;
        int v17 = 1;
        uint64_t v18 = 1;
        goto LABEL_26;
      }
      int v16 = *((_DWORD *)v24 + 4 * v25 - 8);
    }
    uint64_t v18 = (v16 + 2);
    int v17 = v18;
    uint64_t v27 = v29;
    uint64_t v28 = 0x400000000;
    if (v18 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v16 == -2)
    {
      uint64_t v18 = 0;
LABEL_27:
      LODWORD(v28) = v17;
      uint64_t v19 = &v14[16 * v15];
      do
      {
        *((void *)v27 + (*(_DWORD *)v14 + 1)) = *((void *)v14 + 1);
        v14 += 16;
      }
      while (v14 != v19);
      uint64_t Impl = llvm::AttributeList::getImpl(a1, v27, v18);
      if (v27 != v29) {
        free(v27);
      }
      BOOL v14 = (char *)v24;
      goto LABEL_32;
    }
LABEL_26:
    bzero(v29, 8 * v18);
    goto LABEL_27;
  }
  uint64_t Impl = 0;
LABEL_32:
  if (v14 != v26) {
    free(v14);
  }
  return Impl;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a2 + 16 * a3 - 16);
  if (v6 == -1)
  {
    if (a3 <= 1)
    {
      uint64_t v7 = 1;
LABEL_5:
      bzero(v11, 8 * v7);
      goto LABEL_6;
    }
    int v6 = *(_DWORD *)(a2 + 16 * a3 - 32);
  }
  uint64_t v7 = (v6 + 2);
  if (v7 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v6 != -2) {
    goto LABEL_5;
  }
  uint64_t v7 = 0;
LABEL_6:
  uint64_t v8 = v4 + 16 * a3;
  do
  {
    v11[*(_DWORD *)v4 + 1] = *(void *)(v4 + 8);
    v4 += 16;
  }
  while (v4 != v8);
  return llvm::AttributeList::getImpl(a1, v11, v7);
}

uint64_t llvm::AttributeList::get(uint64_t *a1, uint64_t a2, uint64_t a3, void *__src, size_t __n)
{
  uint64_t v6 = 0;
  v16[8] = *MEMORY[0x1E4F143B8];
  do
  {
    if (!(__n + v6)) {
      goto LABEL_15;
    }
  }
  while (!__src[__n - 1 + v6--]);
  int v8 = __n + v6;
  if (__n + v6 != -3)
  {
    unsigned int v9 = v8 + 3;
    HIDWORD(v14) = 8;
    if ((v8 + 3) >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v16[0] = a2;
    unsigned int v10 = 1;
    LODWORD(v14) = 1;
    if (v8 == -2) {
      return llvm::AttributeList::getImpl(a1, v16, v10);
    }
    goto LABEL_7;
  }
LABEL_15:
  if (a3)
  {
    v16[0] = a2;
    uint64_t v14 = 0x800000001;
    unsigned int v9 = 2;
LABEL_7:
    v16[1] = a3;
    unsigned int v10 = v14 + 1;
    unsigned int v15 = v14 + 1;
    if (v9 >= 3)
    {
      if (__n >= v9 - 2) {
        size_t v11 = v9 - 2;
      }
      else {
        size_t v11 = __n;
      }
      if (v11 + v10 > HIDWORD(v14)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v11)
      {
        memcpy(&v16[v10], __src, 8 * v11);
        unsigned int v10 = v15;
      }
      v10 += v11;
    }
    return llvm::AttributeList::getImpl(a1, v16, v10);
  }
  if (a2)
  {
    v16[0] = a2;
    unsigned int v10 = 1;
    return llvm::AttributeList::getImpl(a1, v16, v10);
  }
  return 0;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, int a2, uint64_t a3)
{
  v9[8] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  int v5 = a2 + 1;
  uint64_t v6 = (a2 + 2);
  if (v6 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != -2) {
    bzero(v9, 8 * v6);
  }
  v9[v5] = a3;
  return llvm::AttributeList::getImpl(a1, v9, v6);
}

uint64_t llvm::AttributeList::get(llvm::AttributeList *this, llvm::LLVMContext *a2, uint64_t a3, const llvm::AttrBuilder *a4)
{
  int v4 = (int)a2;
  uint64_t Sorted = llvm::AttributeSetNode::getSorted((uint64_t *)this, *(uint64_t **)(a3 + 8), *(unsigned int *)(a3 + 16));

  return llvm::AttributeList::get((uint64_t *)this, v4, Sorted);
}

uint64_t llvm::AttributeList::get(uint64_t *a1, unsigned int a2, unsigned int *a3, uint64_t a4)
{
  v16[16] = *MEMORY[0x1E4F143B8];
  unsigned int v13 = a2;
  uint64_t v14 = v16;
  uint64_t v15 = 0x800000000;
  if (a4)
  {
    uint64_t v6 = 4 * a4;
    do
    {
      unsigned int v7 = *a3++;
      unint64_t v12 = llvm::Attribute::get(a1, v7, 0);
      sub_1CC50CD44((uint64_t)&v14, &v13, (uint64_t *)&v12);
      v6 -= 4;
    }
    while (v6);
    int v8 = (int *)v14;
    uint64_t v9 = v15;
  }
  else
  {
    uint64_t v9 = 0;
    int v8 = (int *)v16;
  }
  uint64_t v10 = llvm::AttributeList::get(a1, v8, v9);
  if (v14 != v16) {
    free(v14);
  }
  return v10;
}

uint64_t sub_1CC50CD44(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return sub_1CB8462D0(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1 + 16 * v3;
  *(_DWORD *)uint64_t v4 = *a2;
  *(void *)(v4 + 8) = *a3;
  unsigned int v5 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(void *)a1 + 16 * v5 - 16;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t *a5)
{
  v20[16] = *MEMORY[0x1E4F143B8];
  unsigned int v17 = a2;
  uint64_t v18 = v20;
  uint64_t v19 = 0x800000000;
  if (a4)
  {
    uint64_t v8 = 4 * a4;
    do
    {
      unsigned int v10 = *a3++;
      unsigned int v9 = v10;
      uint64_t v11 = *a5++;
      unint64_t v16 = llvm::Attribute::get(a1, v9, v11);
      sub_1CC50CD44((uint64_t)&v18, &v17, (uint64_t *)&v16);
      v8 -= 4;
    }
    while (v8);
    unint64_t v12 = (int *)v18;
    uint64_t v13 = v19;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v12 = (int *)v20;
  }
  uint64_t v14 = llvm::AttributeList::get(a1, v12, v13);
  if (v18 != v20) {
    free(v18);
  }
  return v14;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  v37[16] = *MEMORY[0x1E4F143B8];
  unsigned int v28 = a2;
  uint64_t v29 = v31;
  uint64_t v30 = 0x800000000;
  if (a4)
  {
    uint64_t v4 = a3;
    uint64_t v26 = a3 + 16 * a4;
    while (1)
    {
      uint64_t v6 = *(unsigned __int8 **)v4;
      size_t v5 = *(void *)(v4 + 8);
      uint64_t v7 = *a1;
      uint64_t v32 = v34;
      uint64_t v33 = 0x2000000000;
      llvm::FoldingSetNodeID::AddString((unsigned int *)&v32, v6, v5);
      unint64_t v8 = sub_1CC13A6B8(v32, (uint64_t)&v32[4 * v33]);
      uint64_t v9 = *(void *)(v7 + 224) + 8 * ((*(_DWORD *)(v7 + 232) - 1) & v8);
      unsigned int v10 = *(unsigned int **)v9;
      int v35 = v37;
      uint64_t v36 = 0x2000000000;
      if (!v10 || (v10 & 1) != 0) {
        break;
      }
      while (!sub_1CC512084(v7 + 224, v10, (uint64_t)&v32, v8, (unsigned int *)&v35))
      {
        LODWORD(v36) = 0;
        unsigned int v10 = *(unsigned int **)v10;
        if (v10) {
          BOOL v12 = (v10 & 1) == 0;
        }
        else {
          BOOL v12 = 0;
        }
        if (!v12)
        {
          unsigned int v10 = 0;
          goto LABEL_15;
        }
      }
      uint64_t v9 = 0;
LABEL_15:
      if (v35 == v37)
      {
        if (!v10) {
          break;
        }
      }
      else
      {
        free(v35);
        if (!v10) {
          break;
        }
      }
LABEL_23:
      if (v32 != v34) {
        free(v32);
      }
      int v35 = v10;
      sub_1CC50CD44((uint64_t)&v29, &v28, (uint64_t *)&v35);
      v4 += 16;
      if (v4 == v26)
      {
        int v22 = (int *)v29;
        uint64_t v23 = v30;
        goto LABEL_33;
      }
    }
    uint64_t v13 = sub_1CB906F34((uint64_t *)(v7 + 2040), v5 + 26, 3);
    unsigned int v10 = (unsigned int *)v13;
    *(void *)uint64_t v13 = 0;
    *(unsigned char *)(v13 + 8) = 2;
    *(_DWORD *)(v13 + 12) = v5;
    *(_DWORD *)(v13 + 16) = 0;
    uint64_t v14 = v13 + 24;
    if (v5) {
      memmove((void *)(v13 + 24), v6, v5);
    }
    *(unsigned char *)(v14 + v5) = 0;
    *(unsigned char *)(v14 + (v5 + 1)) = 0;
    int v15 = *(_DWORD *)(v7 + 232);
    unsigned int v16 = *(_DWORD *)(v7 + 236) + 1;
    if (v16 > 2 * v15)
    {
      llvm::FoldingSetBase::GrowBucketCount(v7 + 224, 2 * v15, (uint64_t)off_1F2616218);
      int v35 = v37;
      uint64_t v36 = 0x2000000000;
      unsigned int v19 = sub_1CD5A5FD8(v18, v10, (unsigned int *)&v35);
      uint64_t v20 = *(void *)(v7 + 224);
      int v21 = *(_DWORD *)(v7 + 232);
      if (v35 != v37) {
        free(v35);
      }
      uint64_t v9 = v20 + 8 * ((v21 - 1) & v19);
      unsigned int v16 = *(_DWORD *)(v7 + 236) + 1;
    }
    *(_DWORD *)(v7 + 236) = v16;
    uint64_t v17 = *(void *)v9;
    if (!*(void *)v9) {
      uint64_t v17 = v9 | 1;
    }
    *(void *)unsigned int v10 = v17;
    *(void *)uint64_t v9 = v10;
    goto LABEL_23;
  }
  uint64_t v23 = 0;
  int v22 = (int *)v31;
LABEL_33:
  uint64_t v24 = llvm::AttributeList::get(a1, v22, v23);
  if (v29 != v31) {
    free(v29);
  }
  return v24;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _DWORD v32[8] = *MEMORY[0x1E4F143B8];
  if (a3 == 1) {
    return *a2;
  }
  uint64_t Impl = a3;
  if (!a3) {
    return Impl;
  }
  LODWORD(v7) = 0;
  uint64_t v8 = 8 * a3;
  uint64_t v9 = a2;
  unsigned int v10 = &a2[a3];
  do
  {
    uint64_t v11 = *v9;
    if (*v9) {
      LODWORD(v11) = *(_DWORD *)(v11 + 8);
    }
    if (v7 <= v11) {
      uint64_t v7 = v11;
    }
    else {
      uint64_t v7 = v7;
    }
    ++v9;
    v8 -= 8;
  }
  while (v8);
  if (!v7) {
    return 0;
  }
  uint64_t v29 = v32;
  int v31 = 8;
  if (v7 >= 9)
  {
    unsigned int v30 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  bzero(v32, 8 * v7);
  unint64_t v12 = 0;
  unsigned int v30 = v7;
  do
  {
    v25[8] = a1;
    uint64_t v26 = v28;
    uint64_t v13 = a2;
    uint64_t v27 = 0x800000000;
    do
    {
      uint64_t v14 = *v13;
      if (*v13 && v12 < *(unsigned int *)(v14 + 8))
      {
        uint64_t v15 = *(void *)(v14 + 8 * v12 + 40);
        uint64_t v23 = v25;
        uint64_t v24 = 0x800000000;
        if (v15)
        {
          unsigned int v16 = (char *)(v15 + 48);
          uint64_t v17 = (char *)(v15 + 48 + 8 * *(unsigned int *)(v15 + 8));
        }
        else
        {
          unsigned int v16 = 0;
          uint64_t v17 = 0;
        }
      }
      else
      {
        unsigned int v16 = 0;
        uint64_t v17 = 0;
        uint64_t v23 = v25;
        uint64_t v24 = 0x800000000;
      }
      sub_1CC512940((uint64_t)&v23, (uint64_t)v25, v16, v17);
      uint64_t v18 = (uint64_t *)v23;
      if (v24)
      {
        uint64_t v19 = 8 * v24;
        while (1)
        {
          uint64_t v20 = *v18;
          if (*v18)
          {
            if (*(unsigned char *)(v20 + 8) == 2)
            {
              sub_1CC50F2F8((uint64_t)&v26, (void *)(v20 + 24), *(unsigned int *)(v20 + 12), v20);
              goto LABEL_31;
            }
            int v21 = *(_DWORD *)(v20 + 12);
          }
          else
          {
            int v21 = 0;
          }
          sub_1CC50F4B4((unsigned int *)&v26, v21, *v18);
LABEL_31:
          ++v18;
          v19 -= 8;
          if (!v19)
          {
            uint64_t v18 = (uint64_t *)v23;
            break;
          }
        }
      }
      if (v18 != v25) {
        free(v18);
      }
      ++v13;
    }
    while (v13 != v10);
    uint64_t Sorted = llvm::AttributeSetNode::getSorted(a1, (uint64_t *)v26, v27);
    v29[v12] = Sorted;
    if (v26 != v28) {
      free(v26);
    }
    ++v12;
  }
  while (v12 != v7);
  uint64_t Impl = llvm::AttributeList::getImpl(a1, v29, v30);
  if (v29 != v32) {
    free(v29);
  }
  return Impl;
}

uint64_t llvm::AttributeList::getNumAttrSets(llvm::AttributeList *this)
{
  if (*(void *)this) {
    return *(unsigned int *)(*(void *)this + 8);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::getAttributes(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this && (a2 + 1) < *(_DWORD *)(v2 + 8)) {
    return *(void *)(v2 + 8 * (a2 + 1) + 40);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::addAttributeAtIndex(uint64_t *a1, uint64_t *a2, int a3, signed int a4)
{
  v21[8] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  if (*a1
    && (a3 + 1) < *(_DWORD *)(v8 + 8)
    && (uint64_t v15 = *(void *)(v8 + 8 * (a3 + 1) + 40)) != 0)
  {
    if ((*(unsigned __int8 *)(v15 + a4 / 8 + 12) >> (a4 & 7))) {
      return v8;
    }
    uint64_t v9 = (const void *)(v15 + 48);
    uint64_t v10 = v15 + 48 + 8 * *(unsigned int *)(v15 + 8);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  if ((unint64_t)(v10 - (void)v9) >= 0x41) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v9 != (const void *)v10) {
    memcpy(v18, v9, v10 - (void)v9);
  }
  unsigned int v17 = (unint64_t)(v10 - (void)v9) >> 3;
  unint64_t v11 = llvm::Attribute::get(a2, a4, 0);
  if (v17 >= 8) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v18[v17] = v11;
  uint64_t v19 = v21;
  uint64_t v20 = 0x800000000;
  if (v17 + 1 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  memcpy(v21, v18, 8 * (v17 + 1));
  unsigned int v16 = (uint64_t *)v19;
  size_t v12 = v20 + v17 + 1;
  LODWORD(v20) = v12;
  if (v12 >= 2)
  {
    qsort(v19, v12, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CC512664);
    unsigned int v16 = (uint64_t *)v19;
    LODWORD(v12) = v20;
  }
  uint64_t Sorted = llvm::AttributeSetNode::getSorted(a2, v16, v12);
  if (v19 != v21) {
    free(v19);
  }
  return llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, Sorted);
}

uint64_t llvm::AttributeList::hasAttributeAtIndex(uint64_t *a1, int a2, int a3)
{
  uint64_t v3 = *a1;
  if (*a1
    && (a2 + 1) < *(_DWORD *)(v3 + 8)
    && (uint64_t v5 = *(void *)(v3 + 8 * (a2 + 1) + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v5 + a3 / 8 + 12) >> (a3 & 7)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::AttributeList::setAttributesAtIndex(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7 = 0;
  void v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  if (*a1) {
    uint64_t v9 = (const void *)(*a1 + 40);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    uint64_t v7 = *a1 + 40 + 8 * *(unsigned int *)(v8 + 8);
  }
  uint64_t v15 = v17;
  uint64_t v16 = 0x400000000;
  if ((unint64_t)(v7 - (void)v9) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v10 = 0;
  uint64_t v11 = (a3 + 1);
  if (v9 != (const void *)v7)
  {
    memcpy(v15, v9, v7 - (void)v9);
    int v10 = v16;
  }
  unsigned int v12 = v10 + ((unint64_t)(v7 - (void)v9) >> 3);
  LODWORD(v16) = v12;
  if (v12 <= v11)
  {
    sub_1CC5128C4((uint64_t)&v15, (a3 + 2));
    unsigned int v12 = v16;
  }
  *((void *)v15 + v11) = a4;
  uint64_t Impl = llvm::AttributeList::getImpl(a2, v15, v12);
  if (v15 != v17) {
    free(v15);
  }
  return Impl;
}

uint64_t llvm::AttributeList::addAttributeAtIndex(llvm::AttributeList *a1, uint64_t *a2, int a3, unsigned __int8 *a4, size_t a5, unsigned __int8 *a6, size_t a7)
{
  void v17[8] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  v16[0] = v17;
  v16[1] = (void *)0x800000000;
  unsigned int v12 = llvm::Attribute::get(a2, a4, a5, a6, a7);
  sub_1CC50F2F8((uint64_t)v16, a4, a5, (uint64_t)v12);
  uint64_t result = llvm::AttributeList::addAttributesAtIndex(a1, (llvm::LLVMContext *)a2, a3, (const llvm::AttrBuilder *)&v15);
  if (v16[0] != v17)
  {
    uint64_t v14 = result;
    free(v16[0]);
    return v14;
  }
  return result;
}

uint64_t llvm::AttributeList::addAttributesAtIndex(llvm::AttributeList *this, llvm::LLVMContext *a2, int a3, const llvm::AttrBuilder *a4)
{
  v27[8] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((unsigned int *)a4 + 4);
  uint64_t Impl = *(void *)this;
  if (!v5) {
    return Impl;
  }
  if (Impl)
  {
    if ((a3 + 1) >= *(_DWORD *)(Impl + 8))
    {
      unsigned int v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = v27;
      uint64_t v25 = v27;
      uint64_t v26 = 0x800000000;
    }
    else
    {
      uint64_t v10 = *(void *)(Impl + 8 * (a3 + 1) + 40);
      uint64_t v11 = v27;
      uint64_t v25 = v27;
      uint64_t v26 = 0x800000000;
      if (v10)
      {
        unsigned int v12 = (char *)(v10 + 48);
        uint64_t v13 = (char *)(v10 + 48 + 8 * *(unsigned int *)(v10 + 8));
      }
      else
      {
        unsigned int v12 = 0;
        uint64_t v13 = 0;
      }
    }
    sub_1CC512940((uint64_t)&v25, (uint64_t)v27, v12, v13);
    uint64_t v14 = *((unsigned int *)a4 + 4);
    if (v14)
    {
      uint64_t v15 = (uint64_t *)*((void *)a4 + 1);
      for (uint64_t i = 8 * v14; i; i -= 8)
      {
        uint64_t v17 = *v15;
        if (*v15)
        {
          if (*(unsigned char *)(v17 + 8) == 2)
          {
            sub_1CC50F2F8((uint64_t)&v25, (void *)(v17 + 24), *(unsigned int *)(v17 + 12), v17);
            goto LABEL_12;
          }
          int v18 = *(_DWORD *)(v17 + 12);
        }
        else
        {
          int v18 = 0;
        }
        sub_1CC50F4B4((unsigned int *)&v25, v18, *v15);
LABEL_12:
        ++v15;
      }
    }
    uint64_t Sorted = llvm::AttributeSetNode::getSorted((uint64_t *)a2, (uint64_t *)v25, v26);
    uint64_t Impl = llvm::AttributeList::setAttributesAtIndex(this, (uint64_t *)a2, a3, Sorted);
    uint64_t v20 = (uint64_t *)v25;
    goto LABEL_16;
  }
  uint64_t v22 = llvm::AttributeSetNode::getSorted((uint64_t *)a2, *((uint64_t **)a4 + 1), v5);
  if (a3 == -1)
  {
    uint64_t v11 = &v26;
    uint64_t v25 = (void *)0x400000000;
    int v23 = 1;
    uint64_t v24 = 1;
  }
  else
  {
    uint64_t v24 = (a3 + 2);
    int v23 = v24;
    uint64_t v11 = &v26;
    uint64_t v25 = (void *)0x400000000;
    if (v24 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (a3 == -2)
    {
      uint64_t v24 = 0;
      goto LABEL_22;
    }
  }
  bzero(&v26, 8 * v24);
LABEL_22:
  LODWORD(v25) = v23;
  v27[(a3 + 1) - 1] = v22;
  uint64_t Impl = llvm::AttributeList::getImpl((uint64_t *)a2, &v26, v24);
  uint64_t v20 = &v26;
LABEL_16:
  if (v20 != v11) {
    free(v20);
  }
  return Impl;
}

uint64_t llvm::AttributeList::addAttributeAtIndex(llvm::AttributeList *a1, llvm::LLVMContext *a2, int a3, uint64_t a4)
{
  v12[8] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2;
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  if (!a4)
  {
    int v7 = 0;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a4 + 8) != 2)
  {
    int v7 = *(_DWORD *)(a4 + 12);
LABEL_4:
    sub_1CC50F4B4((unsigned int *)v11, v7, a4);
    goto LABEL_5;
  }
  sub_1CC50F2F8((uint64_t)v11, (void *)(a4 + 24), *(unsigned int *)(a4 + 12), a4);
LABEL_5:
  uint64_t v8 = llvm::AttributeList::addAttributesAtIndex(a1, a2, a3, (const llvm::AttrBuilder *)&v10);
  if (v11[0] != v12) {
    free(v11[0]);
  }
  return v8;
}

uint64_t llvm::AttrBuilder::addAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 8) == 2)
    {
      sub_1CC50F2F8(a1 + 8, (void *)(a2 + 24), *(unsigned int *)(a2 + 12), a2);
      return a1;
    }
    LODWORD(a2) = *(_DWORD *)(a2 + 12);
  }
  sub_1CC50F4B4((unsigned int *)(a1 + 8), a2, v2);
  return a1;
}

uint64_t llvm::AttributeList::begin(llvm::AttributeList *this)
{
  if (*(void *)this) {
    return *(void *)this + 40;
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::end(llvm::AttributeList *this)
{
  if (*(void *)this) {
    return *(void *)this + 8 * *(unsigned int *)(*(void *)this + 8) + 40;
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::addParamAttribute(void *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 0;
  void v28[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a1;
  if (*a1) {
    uint64_t v11 = (const void *)(*a1 + 40);
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10) {
    uint64_t v9 = *a1 + 40 + 8 * *(unsigned int *)(v10 + 8);
  }
  uint64_t v26 = v28;
  uint64_t v27 = 0x400000000;
  if ((unint64_t)(v9 - (void)v11) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v12 = 0;
  if (v11 != (const void *)v9)
  {
    memcpy(v26, v11, v9 - (void)v11);
    int v12 = v27;
  }
  LODWORD(v27) = v12 + ((unint64_t)(v9 - (void)v11) >> 3);
  int v13 = a3[a4 - 1];
  if (v27 <= v13 + 2) {
    sub_1CC5128C4((uint64_t)&v26, (v13 + 3));
  }
  if (a4)
  {
    for (uint64_t i = 4 * a4; i; i -= 4)
    {
      uint64_t v15 = (*a3 + 2);
      uint64_t v16 = *((void *)v26 + v15);
      int v23 = v25;
      uint64_t v24 = 0x800000000;
      if (v16)
      {
        uint64_t v17 = (char *)(v16 + 48);
        int v18 = (char *)(v16 + 48 + 8 * *(unsigned int *)(v16 + 8));
      }
      else
      {
        uint64_t v17 = 0;
        int v18 = 0;
      }
      sub_1CC512940((uint64_t)&v23, (uint64_t)v25, v17, v18);
      if (a5)
      {
        unint64_t v19 = *(unsigned int *)(a5 + 12);
        if (*(unsigned char *)(a5 + 8) == 2)
        {
          sub_1CC50F2F8((uint64_t)&v23, (void *)(a5 + 24), v19, a5);
          goto LABEL_18;
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
      sub_1CC50F4B4((unsigned int *)&v23, v19, a5);
LABEL_18:
      uint64_t Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v23, v24);
      *((void *)v26 + v15) = Sorted;
      if (v23 != v25) {
        free(v23);
      }
      ++a3;
    }
  }
  uint64_t Impl = llvm::AttributeList::getImpl(a2, v26, v27);
  if (v26 != v28) {
    free(v26);
  }
  return Impl;
}