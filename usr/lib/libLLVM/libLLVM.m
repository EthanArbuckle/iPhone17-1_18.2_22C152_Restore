void sub_1CB83116C()
{
  operator new();
}

void LLVMInitializeAGX3APSTraceSystem()
{
  qword_1EA61E9C0 = (uint64_t)sub_1CB83116C;
}

void sub_1CB8311D0()
{
}

void sub_1CB8311E4()
{
}

void sub_1CB831270()
{
}

void sub_1CB831284()
{
}

uint64_t sub_1CB831328(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

void sub_1CB831330(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  char v51 = 0;
  v52 = v54;
  uint64_t v53 = 0x2000000000;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 24))(&v43);
  if (!v45)
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
    char v51 = 1;
    *(unsigned char *)(a2 + 792) &= ~1u;
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = a2 + 24;
    uint64_t v35 = a2 + 8;
    *(void *)(a2 + 16) = 0x2000000000;
    if (v53) {
      goto LABEL_67;
    }
    goto LABEL_70;
  }
  v5 = (uint64_t *)(a1 + 8);
  llvm::agxapstrace::AddressTranslator::toSectionRelative(*(void *)(a1 + 32), *(void *)(a1 + 8), 1, (uint64_t)v42);
  if (!v42[16])
  {
    llvm::agxapstrace::to_string((unint64_t *)(a1 + 8), (uint64_t)&v48);
    v36 = std::string::insert(&v48, 0, "Invalid PC ");
    std::string::size_type v37 = v36->__r_.__value_.__r.__words[2];
    long long v55 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    std::string::size_type v56 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::generic_category();
    operator new();
  }
  int v6 = v43 + 1;
  while (--v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v49 = v9;
    if (!v8 || (unint64_t v10 = *(void *)(v8 + 56), v11 = v9 - v10, v9 < v10) || *(void *)(v8 + 64) <= v9)
    {
      llvm::agxapstrace::AddressTranslator::toSectionRelative(v7, v9, 1, (uint64_t)&v55);
      if (!(_BYTE)v56)
      {
        llvm::agxapstrace::to_string(&v49, (uint64_t)&v46);
        v38 = std::string::insert(&v46, 0, "Invalid PC ");
        std::string::size_type v39 = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        v40 = std::string::append(&v47, " after update");
        std::string::size_type v41 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        std::generic_category();
        operator new();
      }
      unint64_t v11 = *((void *)&v55 + 1);
      uint64_t v8 = v55;
      *(void *)(a1 + 56) = *(void *)v55;
      *(void *)(a1 + 64) = v8;
    }
    uint64_t v12 = v8 + 72;
    llvm::agxapstrace::CachedSectionDisassembler::getInstAt(v8 + 72, v11, (uint64_t)&v55);
    v13 = (unsigned int *)v55;
    if (BYTE8(v55))
    {
      *(unsigned char *)(a2 + 792) |= 1u;
      *(void *)a2 = v13;
      goto LABEL_70;
    }
    int v14 = v53;
    if (v53 >= HIDWORD(v53))
    {
      v50[0] = *v5;
      v50[1] = v55;
      v50[2] = v12;
      if (v52 > v50 || (char *)v52 + 24 * v53 <= (char *)v50) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v15 = (uint64_t *)((char *)v52 + 24 * v53);
    uint64_t *v15 = *v5;
    v15[1] = (uint64_t)v13;
    v15[2] = v12;
    LODWORD(v53) = v14 + 1;
    v48.__r_.__value_.__r.__words[0] = v11;
    char v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    unsigned int v17 = *v13;
    if (*v13 == 623) {
      goto LABEL_13;
    }
    uint64_t v25 = **(void **)(a1 + 48);
    uint64_t v26 = *(void *)(v25 + 48 * v17 + 8);
    if ((v26 & 0x800) != 0) {
      goto LABEL_41;
    }
    if ((v26 & 0x80) != 0)
    {
      uint64_t v29 = *(void *)(v25 + 48 * v17 + 16) & 0x1000000;
      if (v29 | v26 & 0x20)
      {
LABEL_41:
        if (*(unsigned char *)(a1 + 16))
        {
          uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
          if (!v31) {
            goto LABEL_49;
          }
          uint64_t *v5 = v30;
          unint64_t v18 = v2 & 0xFFFFFFFFFFFFFF00;
          unint64_t v19 = 1;
        }
        else
        {
          if ((v16 & 1) == 0) {
            goto LABEL_13;
          }
          uint64_t v32 = sub_1CBE52E8C(v17);
          if ((v32 & 0xFF00000000) == 0) {
            goto LABEL_73;
          }
          if (v32 == 11)
          {
            (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
            if (!v33)
            {
LABEL_49:
              std::generic_category();
              operator new();
            }
            unint64_t v18 = 1;
          }
          else
          {
LABEL_13:
            unint64_t v18 = 0;
          }
          *v5 += *((void *)v13 + 21);
          unint64_t v19 = v2 & 0xFFFFFFFFFFFFFF00;
        }
        unint64_t v2 = v18 | v19;
        goto LABEL_16;
      }
      if ((v26 & 0x400) == 0 && v29) {
        goto LABEL_13;
      }
    }
    else
    {
      if ((v26 & 0x20) != 0) {
        goto LABEL_41;
      }
      if ((v26 & 0x400) == 0) {
        goto LABEL_13;
      }
    }
    uint64_t v34 = sub_1CBE52E8C(v17);
    if ((v34 & 0xFF00000000) == 0) {
LABEL_73:
    }
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
    if ((v34 == 6) == (*(unsigned char *)(a1 + 16) != 0)) {
      goto LABEL_13;
    }
    v47.__r_.__value_.__r.__words[0] = 0;
    if (!llvm::agxapstrace::CachedSectionDisassembler::getBranchTarget(v12, &v48, (uint64_t)v13, *(void *)(a1 + 40), &v47))operator new(); {
    uint64_t *v5 = v47.__r_.__value_.__r.__words[0];
    }
    v2 &= 0xFFFFFFFFFFFFFF00;
LABEL_16:
    char v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    if ((v20 & 2) != 0)
    {
      if (*(unsigned char *)(a1 + 18))
      {
        if (!(_BYTE)v2)
        {
          (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
          if (!v21)
          {
            std::generic_category();
            operator new();
          }
        }
      }
    }
    *(unsigned char *)(a1 + 18) = 0;
    uint64_t v22 = *(void *)(**(void **)(a1 + 48) + 48 * *v13 + 16);
    if ((v22 & 0x2000) != 0)
    {
      if ((v22 & 0x400000000) != 0)
      {
        unsigned int v24 = 46;
        uint64_t v23 = 64;
LABEL_30:
        uint64_t v27 = sub_1CBDA6464((unsigned __int16)*v13, v24);
      }
      else
      {
        if ((v22 & 0x4000002) != 0)
        {
          uint64_t v23 = 0x4000000000000000;
          unsigned int v24 = 47;
          goto LABEL_30;
        }
        uint64_t v27 = 1;
        uint64_t v23 = 64;
      }
      if ((*(void *)(*((void *)v13 + 2) + 16 * v27 + 8) & v23) != 0)
      {
        if ((v20 & 2) != 0 && !*(unsigned char *)(a1 + 17)) {
          *(unsigned char *)(a1 + 18) = 1;
        }
        *(unsigned char *)(a1 + 17) = 1;
      }
    }
    if (BYTE8(v55))
    {
      uint64_t v28 = v55;
      *(void *)&long long v55 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
    }
  }
  *(unsigned char *)(a1 + 16) = v44;
  *(unsigned char *)(a2 + 792) &= ~1u;
  *(unsigned char *)a2 = v51;
  *(void *)(a2 + 8) = a2 + 24;
  uint64_t v35 = a2 + 8;
  *(void *)(a2 + 16) = 0x2000000000;
  if (!v53) {
    goto LABEL_70;
  }
LABEL_67:
  sub_1CB831C80(v35, (uint64_t)&v52);
LABEL_70:
  if (v52 != v54) {
    free(v52);
  }
}

uint64_t sub_1CB831C80(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if (v8) {
          memmove(*(void **)a1, v4, 24 * v8);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v8)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v9) {
          memmove(*(void **)a1, v4, 24 * v9);
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *v7;
        if (v9 != v10) {
          memcpy((void *)(*(void *)a1 + 24 * v9), (const void *)(*(void *)a2 + 24 * v9), *(void *)a2 + 24 * v10 - (*(void *)a2 + 24 * v9));
        }
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      int v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *uint64_t v7 = 0;
  }
  return a1;
}

void sub_1CB831DAC()
{
}

void LLVMInitializeAGX2ClauseAnalyzer()
{
  qword_1EBD02640 = (uint64_t)sub_1CB831DAC;
}

void sub_1CB831E3C()
{
}

uint64_t sub_1CB831E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, a3, a2, a4, a2, *(void *)(a2 + 16));
}

void sub_1CB831E88(uint64_t a1)
{
  v1[3] = *MEMORY[0x1E4F143B8];
  sub_1CB83265C((uint64_t)v1, *(void *)(*(void *)(a1 + 24) + 192));
}

void sub_1CB831FA0(uint64_t a1)
{
  v1[3] = *MEMORY[0x1E4F143B8];
  sub_1CB83265C((uint64_t)v1, *(void *)(*(void *)(a1 + 24) + 192));
}

uint64_t sub_1CB8325D8(uint64_t a1, uint64_t a2)
{
  return sub_1CB833624(*(_DWORD *)(a2 + 24));
}

uint64_t sub_1CB8325E0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 24);
  if (v2 == 4826 && (uint64_t v3 = *(void *)(a2 + 40), *(unsigned char *)(v3 + 16) == 2) && *(void *)(v3 + 24) == 3) {
    return 18;
  }
  else {
    return sub_1CB83364C(v2);
  }
}

uint64_t sub_1CB832618(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(**(void **)(a1 + 8) + 48 * *(unsigned int *)(a2 + 24) + 21) & 1;
}

BOOL sub_1CB832638(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 24);
  BOOL v3 = (v2 - 789) >= 3;
  unsigned int v4 = v2 - 4672;
  return !v3 || v4 <= 1;
}

void sub_1CB83265C(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x22000000000) != 0) {
    operator new();
  }
  operator new();
}

void sub_1CB832750()
{
}

uint64_t sub_1CB833028(uint64_t a1)
{
  *(void *)a1 = &unk_1F25E9168;
  int v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F25E9198;
  unsigned int v4 = (void **)(a1 + 8);
  sub_1CB833230(&v4);
  return a1;
}

void sub_1CB8330AC(uint64_t a1)
{
  *(void *)a1 = &unk_1F25E9168;
  int v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F25E9198;
  BOOL v3 = (void **)(a1 + 8);
  sub_1CB833230(&v3);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB833150(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_1CB833158(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_1CB833160(uint64_t a1)
{
  *(void *)a1 = &unk_1F25E9198;
  BOOL v3 = (void **)(a1 + 8);
  sub_1CB833230(&v3);
  return a1;
}

void sub_1CB8331B8(uint64_t a1)
{
  *(void *)a1 = &unk_1F25E9198;
  v1 = (void **)(a1 + 8);
  sub_1CB833230(&v1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CB833230(void ***a1)
{
  v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    unsigned int v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CB8332D8(uint64_t a1)
{
  *(void *)a1 = &unk_1F25E91B8;
  int v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  BOOL v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  *(void *)a1 = &unk_1F25E9198;
  v5 = (void **)(a1 + 8);
  sub_1CB833230(&v5);
  return a1;
}

void sub_1CB83336C(uint64_t a1)
{
  *(void *)a1 = &unk_1F25E91B8;
  int v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  BOOL v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  *(void *)a1 = &unk_1F25E9198;
  unsigned int v4 = (void **)(a1 + 8);
  sub_1CB833230(&v4);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB833420(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_1CB833428(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_1CB833430(unsigned int a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 48 * a1 + 8);
  if ((v3 & 0xD00) == 0x400) {
    return a3 ^ 1u;
  }
  return (v3 & 0x400) != 0 || a1 - 789 < 3 || a1 - 4672 <= 1;
}

void *sub_1CB833484(void *a1)
{
  *a1 = &unk_1F25E9210;
  int v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1CB8334D4(void *a1)
{
  *a1 = &unk_1F25E9210;
  int v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB833544(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 == v3) {
    return 0;
  }
  uint64_t result = 0;
  char v5 = 0;
  uint64_t v6 = *a2;
  do
  {
    if ((~*(_DWORD *)(v6 + 48 * *(unsigned int *)(*(void *)v2 + 24) + 16) & 0x1000010) != 0)
    {
      LOBYTE(v9) = 0;
    }
    else
    {
      unint64_t v7 = *(void *)(*(void *)(*(void *)v2 + 40) + 24);
      BOOL v8 = (~*(_WORD *)(v6 + 48 * *(unsigned int *)(*(void *)v2 + 24) + 16) & 0x1010) != 0
        || (v7 & 0x4000000000000000) == 0;
      uint64_t v9 = (v7 >> 3) & 1;
      if (!v8) {
        LOBYTE(v9) = 0;
      }
    }
    result += ((*(void *)(v6 + 48 * *(unsigned int *)(*(void *)v2 + 24) + 16) & 2) == 0) | ((v5 & 1) == 0);
    v2 += 8;
    char v5 = v9;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_1CB8335EC(int a1)
{
  if ((a1 - 360) >> 1 > 0xF9A) {
    return 0;
  }
  else {
    return dword_1CD902D50[a1 - 360];
  }
}

void sub_1CB833614()
{
}

uint64_t sub_1CB833624(int a1)
{
  if ((a1 - 360) >> 1 > 0xF9A) {
    return 0;
  }
  else {
    return dword_1CD90AA28[a1 - 360];
  }
}

uint64_t sub_1CB83364C(int a1)
{
  if ((a1 - 360) >> 1 > 0xF9A) {
    return 0;
  }
  else {
    return dword_1CD912700[a1 - 360];
  }
}

double sub_1CB833674@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

double sub_1CB8336A8@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

double sub_1CB8336DC@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1CB833718()
{
  return 0;
}

uint64_t sub_1CB833720()
{
  return 0;
}

void sub_1CB833728(uint64_t a1)
{
}

void *sub_1CB833780()
{
  v1 = (void *)v0[20];
  if (v1 != v0 + 22) {
    free(v1);
  }
  uint64_t v2 = (void *)v0[10];
  if (v2 != v0 + 12) {
    free(v2);
  }
  sub_1CB83414C((uint64_t)(v0 + 1));
  return v0;
}

void sub_1CB8337C4(void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unsigned int v4 = (void **)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0) {
          operator delete(*(v4 - 5));
        }
        v4 -= 9;
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CB833850(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1CB833850(a1, *(void *)a2);
    sub_1CB833850(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_1CB8338B8(void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unsigned int v4 = (void **)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CB833944(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CB833944(a1, *a2);
    sub_1CB833944(a1, a2[1]);
    sub_1CD3C4FA4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *sub_1CB8339A4(void *a1)
{
  uint64_t v2 = a1[11];
  if (v2)
  {
    sub_1CB833A08(a1[11], *(void **)(v2 + 8));
    MEMORY[0x1D25D9CE0](v2, 0x1060C40C2B13FB5);
  }

  return sub_1CB833A5C(a1);
}

void sub_1CB833A08(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CB833A08(a1, *a2);
    sub_1CB833A08(a1, a2[1]);
    operator delete(a2);
  }
}

void *sub_1CB833A5C(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = *a1;
    if (*a1) {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    else {
      MEMORY[0x1D25D9CB0](v2, 0x1000C8077774924);
    }
  }
  a1[5] = 0;
  if (*((unsigned char *)a1 + 8) && *a1) {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  *a1 = 0;
  *((unsigned char *)a1 + 8) = 0;
  return a1;
}

void sub_1CB833B3C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x1D25D9CB0);
  }
}

void sub_1CB833B60()
{
}

void sub_1CB833B74()
{
}

char *sub_1CB833B8C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, size_t a5, size_t a6)
{
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a1 + 24))(a1, a2, a3);
  return v12;
}

uint64_t sub_1CB833C60(uint64_t a1)
{
  sub_1CB833CC8(a1 + 72);
  uint64_t v3 = (void **)(a1 + 48);
  sub_1CB8338B8(&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1CB833CC8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v5 = *v3;
      if (*v3)
      {
        if (*(char *)(v5 + 55) < 0) {
          operator delete(*(void **)(v5 + 32));
        }
        MEMORY[0x1D25D9CE0](v5, 0x1032C40E9BF265ALL);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1CB833D70(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1CB833D70(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1CB833D70(a1, *(void *)a2);
    sub_1CB833D70(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t sub_1CB833DE8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        sub_1CB833CC8(v4 + 88);
        uint64_t v6 = (void **)(v4 + 24);
        sub_1CB8338B8(&v6);
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x1D25D9CE0](v4, 0x10B2C4072A4B994);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1CB833850(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1CB833EA8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        sub_1CB833F88((uint64_t *)(v4 + 224), 0);
        sub_1CB833FF0(v4 + 152);
        sub_1CB833CC8(v4 + 72);
        uint64_t v6 = (void **)(v4 + 48);
        sub_1CB8338B8(&v6);
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x1D25D9CE0](v4, 0x10B2C4058EA06FBLL);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1CD3C51C8(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t *sub_1CB833F88(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t sub_1CB833FF0(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 207) < 0) {
          operator delete(*(void **)(v4 + 184));
        }
        sub_1CB833CC8(v4 + 72);
        uint64_t v6 = (void **)(v4 + 48);
        sub_1CB8338B8(&v6);
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x1D25D9CE0](v4, 0x10B2C40559199D4);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1CD3C51C8(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1CB8340D0(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        MEMORY[0x1D25D9CE0](*v3, 0x1020C4001A1C0B8);
        uint64_t v2 = *(void **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(void **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1CD3C51C8(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1CB83414C(uint64_t result)
{
  if ((*(unsigned char *)result & 1) == 0) {
    llvm::deallocate_buffer(*(llvm **)(result + 8), (void *)(8 * *(unsigned int *)(result + 16)));
  }
  return result;
}

uint64_t sub_1CB834190()
{
  return 0;
}

uint64_t sub_1CB834198(uint64_t a1, void *a2)
{
  unsigned int v3 = sub_1CB8349E8((uint64_t)a2);
  if (*(unsigned char *)((*(uint64_t (**)(void, void))(*(void *)a2[1] + 16))(a2[1], *a2) + 289))
  {
    int v4 = *(unsigned __int8 *)((*(uint64_t (**)(void, void))(*(void *)a2[1] + 16))(a2[1], *a2) + 303);
    int v5 = v3 <= 1 ? 1 : v3;
    if (!v4) {
      unsigned int v3 = v5;
    }
  }
  unsigned int v6 = (v3 + 7) & 0xFFFFFFF8;
  if (v6 >= 0xF8) {
    return 248;
  }
  else {
    return v6;
  }
}

uint64_t sub_1CB834244()
{
  return 0;
}

uint64_t sub_1CB83424C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 328);
  if (v2 != a2 + 320)
  {
    while (2)
    {
      for (uint64_t i = *(void *)(v2 + 56); i != v2 + 48; uint64_t i = *(void *)(i + 8))
      {
        unsigned int v4 = **(unsigned __int16 **)(i + 16);
        if (v4 > 0x2FB6)
        {
          if (v4 == 12215 || v4 == 13429) {
            return 1;
          }
        }
        else if (v4 == 11875 || v4 == 12156)
        {
          return 1;
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 != a2 + 320) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t sub_1CB8342E8(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  int v3 = v2 + 2 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  int v4 = v3 + 3 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  int v5 = v4 + 4 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  int v6 = v5 + 5 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  int v7 = v6 + 6 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  int v8 = v7 + 8 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  int v9 = v8 + 12 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
  int v10 = v9 + 16 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  return v10 + 32 * (*(unsigned int (**)(uint64_t))(*(void *)a1 + 208))(a1);
}

uint64_t sub_1CB8344CC()
{
  return 0;
}

uint64_t sub_1CB8344D4()
{
  return 0;
}

uint64_t sub_1CB8344DC()
{
  return 0;
}

uint64_t sub_1CB8344E4()
{
  return 0;
}

uint64_t sub_1CB8344EC()
{
  return 0;
}

uint64_t sub_1CB8344F4()
{
  return 0;
}

uint64_t sub_1CB8344FC()
{
  return 0;
}

uint64_t sub_1CB834504()
{
  return 0;
}

uint64_t sub_1CB83450C()
{
  return 0;
}

uint64_t sub_1CB834514()
{
  return 0;
}

uint64_t sub_1CB83451C()
{
  return 0;
}

uint64_t sub_1CB834524()
{
  return 0;
}

uint64_t sub_1CB83452C()
{
  return 0;
}

uint64_t sub_1CB834534()
{
  return 0;
}

uint64_t sub_1CB83453C()
{
  return 0;
}

uint64_t sub_1CB834544()
{
  return 0;
}

uint64_t sub_1CB83454C()
{
  return 0;
}

uint64_t sub_1CB834554()
{
  return 0;
}

uint64_t sub_1CB83455C()
{
  return 0;
}

uint64_t sub_1CB834564()
{
  return 0;
}

uint64_t sub_1CB83456C()
{
  return 0;
}

uint64_t sub_1CB834574()
{
  return 0;
}

uint64_t sub_1CB83457C()
{
  return 0;
}

uint64_t sub_1CB834584()
{
  return 0;
}

uint64_t sub_1CB83458C()
{
  return 0;
}

uint64_t sub_1CB834594()
{
  return 0;
}

uint64_t sub_1CB83459C()
{
  return 0;
}

uint64_t sub_1CB8345A4()
{
  return 0;
}

uint64_t sub_1CB8345AC()
{
  return 0;
}

uint64_t sub_1CB8345B4()
{
  return 0;
}

uint64_t sub_1CB8345BC()
{
  return 0;
}

double sub_1CB8345C4()
{
  return 0.0;
}

double sub_1CB8345CC()
{
  return 0.0;
}

double sub_1CB8345D4()
{
  return 0.0;
}

double sub_1CB8345DC()
{
  return 0.0;
}

uint64_t sub_1CB8345E4()
{
  return 0;
}

uint64_t sub_1CB8345EC()
{
  return 0;
}

uint64_t sub_1CB8345F4()
{
  return 0;
}

uint64_t sub_1CB8345FC()
{
  return 0;
}

uint64_t sub_1CB834604()
{
  return 0;
}

uint64_t sub_1CB83460C()
{
  return 0;
}

uint64_t sub_1CB834614()
{
  return 0;
}

uint64_t sub_1CB83461C()
{
  return 0;
}

uint64_t sub_1CB834624()
{
  return 0;
}

uint64_t sub_1CB83462C()
{
  return 0;
}

uint64_t sub_1CB834634()
{
  return 0;
}

uint64_t sub_1CB83463C()
{
  return 0;
}

uint64_t sub_1CB834644()
{
  return 0;
}

uint64_t sub_1CB83474C()
{
  return 0;
}

uint64_t sub_1CB834754(uint64_t a1)
{
  v1 = *(unsigned __int16 **)(a1 + 16);
  int v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0) {
    return 1;
  }
  else {
    return (*((unsigned __int8 *)v1 + 8) >> 4) & 1;
  }
}

_DWORD *sub_1CB834798(_DWORD *result, _DWORD *a2)
{
  int v3 = result;
  int v4 = result + 2;
  if (*(unsigned char *)result)
  {
    int v5 = 4;
  }
  else
  {
    int v5 = result[4];
    if (!v5)
    {
      int v14 = 0;
      goto LABEL_16;
    }
    int v4 = (_DWORD *)*((void *)result + 1);
  }
  int v6 = v5 - 1;
  unsigned int v7 = (37 * *a2) & v6;
  int v8 = &v4[v7];
  int v9 = *v8;
  if (*a2 == *v8) {
    return result;
  }
  int v10 = 0;
  int v11 = 1;
  while (v9 != -1)
  {
    if (v10) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v9 == -2;
    }
    if (v12) {
      int v10 = v8;
    }
    unsigned int v13 = v7 + v11++;
    unsigned int v7 = v13 & v6;
    int v8 = &v4[v7];
    int v9 = *v8;
    if (*a2 == *v8) {
      return result;
    }
  }
  if (v10) {
    int v14 = v10;
  }
  else {
    int v14 = v8;
  }
LABEL_16:
  double result = sub_1CB834EC4((uint64_t)result, (uint64_t)a2, a2, v14);
  *double result = *a2;
  int v15 = *a2;
  unsigned int v16 = v3[8];
  if (v16 >= v3[9]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*((void *)v3 + 3) + 4 * v16) = v15;
  ++v3[8];
  return result;
}

uint64_t sub_1CB8348A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  uint64_t v4 = *(unsigned int *)(a2 + 40);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = v5 + 32 * v4;
  while (1)
  {
    unint64_t v7 = *(unsigned int *)(v5 + 4);
    BOOL v8 = *(unsigned char *)v5 || (v7 - 1) > 0x3FFFFFFE;
    if (!v8 && *(unsigned char *)(*(void *)(*(void *)(v3 + 216) + 16) + v7)) {
      break;
    }
    v5 += 32;
    if (v5 == v6) {
      return 0;
    }
  }
  int v10 = 0;
  int v11 = *(uint64_t ***)(v3 + 248);
  unint64_t v12 = v7 >> 3;
  int v13 = 1 << (v7 & 7);
  int v14 = *(uint64_t ***)(v3 + 240);
  do
  {
    uint64_t v15 = **v14;
    if (v12 < *(unsigned __int16 *)(v15 + 22)
      && (v13 & *(unsigned char *)(*(void *)(v15 + 8) + v12)) != 0
      && (!v10
       || *v14 != v10
       && ((*(_DWORD *)(v10[1] + ((*(unsigned __int16 *)(v15 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v15 + 24)) & 1) != 0))
    {
      int v10 = *v14;
    }
    ++v14;
  }
  while (v14 != v11);
  return *(_DWORD *)(*(void *)(v3 + 264)
                   + 24
                   * (*(unsigned __int16 *)(*v10 + 24)
                    + *(_DWORD *)(v3 + 272) * (((unint64_t)v11 - *(void *)(v3 + 240)) >> 3))
                   + 4) >> 3;
}

uint64_t sub_1CB8349E8(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16));
  int v3 = *(_DWORD *)(v2 + 44);
  std::string::size_type v41 = v44;
  int v43 = 6;
  if ((v3 + 63) >= 0x1C0)
  {
    unsigned int v42 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v3 + 63) >= 0x40) {
    bzero(v44, 8 * ((v3 + 63) >> 6));
  }
  unsigned int v42 = (v3 + 63) >> 6;
  int v45 = v3;
  for (uint64_t i = *(void *)(a1 + 328); i != a1 + 320; uint64_t i = *(void *)(i + 8))
  {
    for (uint64_t j = *(void *)(i + 56); j != i + 48; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v6 = *(unsigned int *)(j + 40);
      if (v6)
      {
        uint64_t v7 = *(void *)(j + 32);
        uint64_t v8 = v7 + 32 * v6;
        int v9 = v41;
        do
        {
          if (!*(unsigned char *)v7)
          {
            unsigned int v10 = *(_DWORD *)(v7 + 4);
            if (v10)
            {
              int v11 = (unsigned __int16 *)(*(void *)(v2 + 56)
                                       + (((unint64_t)*(unsigned int *)(*(void *)(v2 + 8) + 24 * v10 + 16) >> 3) & 0x1FFFFFFE));
              int v13 = *v11;
              unint64_t v12 = v11 + 1;
              int v14 = v13 + (*(_DWORD *)(*(void *)(v2 + 8) + 24 * v10 + 16) & 0xF) * v10;
              do
              {
                v9[(unsigned __int16)v14 >> 6] |= 1 << v14;
                int v15 = *v12++;
                v14 += v15;
              }
              while (v15);
            }
          }
          v7 += 32;
        }
        while (v7 != v8);
        if (!j) {
          goto LABEL_19;
        }
      }
      if ((*(unsigned char *)j & 4) == 0)
      {
LABEL_19:
        while ((*(_WORD *)(j + 44) & 8) != 0)
          uint64_t j = *(void *)(j + 8);
      }
    }
  }
  if (v2) {
    unsigned int v16 = (uint64_t *)(v2 + 8);
  }
  else {
    unsigned int v16 = 0;
  }
  uint64_t v17 = *v16;
  uint64_t v18 = v16[6];
  uint64_t v19 = 258;
  while (2)
  {
    unint64_t v20 = *(unsigned int *)(v17 + 24 * v19 + 16);
    uint64_t v21 = (v20 >> 3) & 0x1FFFFFFE;
    unsigned __int16 v22 = *(_WORD *)(v18 + v21) + (v20 & 0xF) * v19;
    uint64_t v23 = (unsigned __int16 *)(v18 + 2 + v21);
    do
    {
      if ((*((void *)v41 + (v22 >> 6)) >> v22))
      {
        uint64_t v25 = (v19 - 2);
        goto LABEL_32;
      }
      int v24 = *v23++;
      v22 += v24;
    }
    while (v24);
    if ((unint64_t)--v19 > 2) {
      continue;
    }
    break;
  }
  uint64_t v25 = 0;
LABEL_32:
  if (v41 != v44) {
    free(v41);
  }
  if (((*(unsigned __int16 *)(*(void *)a1 + 18) >> 4) & 0x3FFu) - 103 <= 1)
  {
    uint64_t v26 = *(void *)(a1 + 344);
    unsigned int v27 = (**(uint64_t (***)(uint64_t, void, void, uint64_t, uint64_t))v26)(v26, 0, 0, 1, 1);
    unsigned int v28 = v27;
    if (v25 >= v27) {
      unsigned int v29 = v27;
    }
    else {
      unsigned int v29 = 0;
    }
    uint64_t v30 = *(llvm::Module **)(*(void *)a1 + 40);
    std::string::size_type v41 = "agx.sample_rate";
    v44[8] = 259;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v30, (const char **)&v41);
    if (NamedMetadata
      && (uint64_t v32 = *(uint64_t ***)(NamedMetadata + 48), *((_DWORD *)v32 + 2))
      && (uint64_t v33 = **v32, v34 = *(unsigned int *)(v33 + 8), v34)
      && (uint64_t v35 = *(void *)(v33 - 8 * v34), *(unsigned char *)v35 == 1)
      && (uint64_t v36 = *(void *)(v35 + 128), *(unsigned char *)(v36 + 16) == 16))
    {
      std::string::size_type v37 = (void *)(v36 + 24);
      if (*(_DWORD *)(v36 + 32) >= 0x41u) {
        std::string::size_type v37 = (void *)*v37;
      }
      int v38 = *(_DWORD *)v37;
    }
    else
    {
      int v38 = 4;
    }
    int v39 = v25 - v29;
    if ((*(_WORD *)(*(void *)a1 + 18) & 0x3FF0) == 0x680
      && !(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 592))(v26, 105))
    {
      int v38 = 1;
    }
    return v28 + v38 * v39;
  }
  return v25;
}

uint64_t sub_1CB834D78(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          int v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_14;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

uint64_t sub_1CB834E14(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_14;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * *a2) & (v4 - 1);
  uint64_t v7 = (_DWORD *)(v3 + 4 * v6);
  int v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 4 * (v13 & v5));
      int v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_14;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CB834EC4(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CB83503C(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 4;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = (37 * *a3) & v13;
    a4 = (_DWORD *)(v11 + 4 * v14);
    int v15 = *a4;
    if (*a3 != *a4)
    {
      unsigned int v16 = 0;
      int v17 = 1;
      while (v15 != -1)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          unsigned int v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (_DWORD *)(v11 + 4 * v14);
        int v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CB83503C(a1, v8);
      unint64_t v20 = 0;
      sub_1CB834E14(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

void *sub_1CB83503C(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(int **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CB8351B8((void *)a1, v11, &v11[v12]);
    llvm::deallocate_buffer((llvm *)v11, (void *)(4 * v12));
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 24; i += 4)
  {
    unsigned int v8 = *(_DWORD *)(a1 + i);
    if (v8 <= 0xFFFFFFFD) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CB8351B8((void *)a1, v14, v6);
}

void *sub_1CB8351B8(void *result, int *a2, int *a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)result;
  *uint64_t result = *(_DWORD *)result & 1;
  int v7 = (char *)(result + 1);
  if (v6)
  {
    size_t v10 = 16;
    uint64_t v9 = result + 1;
  }
  else
  {
    uint64_t v8 = *((unsigned int *)result + 4);
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = (void *)result[1];
    size_t v10 = 4 * v8;
  }
  uint64_t result = memset(v9, 255, v10);
LABEL_5:
  while (a2 != a3)
  {
    int v11 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if (*(unsigned char *)v5)
      {
        int v12 = 4;
        uint64_t v13 = v7;
      }
      else
      {
        uint64_t v13 = (char *)v5[1];
        int v12 = *((_DWORD *)v5 + 4);
      }
      int v14 = v12 - 1;
      unsigned int v15 = (v12 - 1) & (37 * v11);
      unsigned int v16 = &v13[4 * v15];
      int v17 = *(_DWORD *)v16;
      if (v11 != *(_DWORD *)v16)
      {
        BOOL v18 = 0;
        int v19 = 1;
        while (v17 != -1)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            BOOL v18 = v16;
          }
          unsigned int v21 = v15 + v19++;
          unsigned int v15 = v21 & v14;
          unsigned int v16 = &v13[4 * (v21 & v14)];
          int v17 = *(_DWORD *)v16;
          if (v11 == *(_DWORD *)v16) {
            goto LABEL_21;
          }
        }
        if (v18) {
          unsigned int v16 = v18;
        }
      }
LABEL_21:
      *(_DWORD *)unsigned int v16 = v11;
      *(_DWORD *)v5 += 2;
    }
    ++a2;
  }
  return result;
}

void *sub_1CB8352D8(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 128))(&v9, a2, a3);
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 136))(&v8, a2, a3);
  uint64_t v7 = v8;
  *a1 = v9;
  a1[1] = v7;
  return result;
}

uint64_t *sub_1CB835378(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  if (*(void *)a2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v7);
    uint64_t v3 = v7;
    uint64_t v4 = *a1;
    uint64_t v7 = 0;
    *a1 = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1CB83544C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 8);
  uint64_t result = 16;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 2u:
      return 32;
    case 3u:
    case 0xAu:
      return 64;
    case 4u:
      return 80;
    case 5u:
    case 6u:
      return 128;
    case 7u:
    case 9u:
    case 0xCu:
    case 0xEu:
    case 0x14u:
      __break(1u);
      goto LABEL_26;
    case 8u:
LABEL_26:
      uint64_t v7 = *(void *)(a1 + 232);
      return *(unsigned int *)(v7 + 4);
    case 0xBu:
      return 0x2000;
    case 0xDu:
      return v3 >> 8;
    case 0xFu:
      if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
        LODWORD(v3) = *(_DWORD *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 < 0x100) {
        goto LABEL_16;
      }
      unsigned int v5 = v3 >> 8;
      uint64_t v6 = *(unsigned int *)(a1 + 240);
      uint64_t v7 = *(void *)(a1 + 232);
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 232);
        unint64_t v8 = *(unsigned int *)(a1 + 240);
        do
        {
          unint64_t v9 = v8 >> 1;
          uint64_t v10 = v7 + 16 * (v8 >> 1);
          unsigned int v11 = *(_DWORD *)(v10 + 8);
          uint64_t v12 = v10 + 16;
          v8 += ~(v8 >> 1);
          if (v11 < v5) {
            uint64_t v7 = v12;
          }
          else {
            unint64_t v8 = v9;
          }
        }
        while (v8);
      }
      if (v7 == *(void *)(a1 + 232) + 16 * v6 || *(_DWORD *)(v7 + 8) != v5) {
LABEL_16:
      }
        uint64_t v7 = *(void *)(a1 + 232);
      return *(unsigned int *)(v7 + 4);
    case 0x10u:
      uint64_t v18 = *(void *)llvm::DataLayout::getStructLayout((llvm::DataLayout *)a1, (llvm::StructType *)a2);
      goto LABEL_21;
    case 0x11u:
      int v14 = *(llvm::Type **)(a2 + 24);
      uint64_t v15 = *(void *)(a2 + 32);
      unint64_t v16 = (unint64_t)(sub_1CB83544C(a1, v14) + 7) >> 3;
      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)a1, v14, 1);
      uint64_t v18 = v15 * (((1 << Alignment) + v16 - 1) & -(1 << Alignment));
LABEL_21:
      uint64_t result = 8 * v18;
      break;
    case 0x12u:
    case 0x13u:
      uint64_t v13 = *(unsigned int *)(a2 + 32);
      uint64_t result = sub_1CB83544C(a1, *(void *)(a2 + 24)) * v13;
      break;
    case 0x15u:
      uint64_t LayoutType = llvm::TargetExtType::getLayoutType((llvm::TargetExtType *)a2);
      uint64_t result = sub_1CB83544C(a1, LayoutType);
      break;
    default:
      return result;
  }
  return result;
}

_OWORD *sub_1CB8356D4(uint64_t a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_1CB835798(a1, &v15, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v9 = v6;
    uint64_t v7 = operator new(0x40uLL);
    uint64_t v10 = *a4;
    uint64_t v11 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v11;
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = 0;
    *((_DWORD *)v7 + 14) = 0;
    uint64_t v12 = v15;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v12;
    *unint64_t v9 = v7;
    uint64_t v13 = **(void **)a1;
    int v14 = (uint64_t *)v7;
    if (v13)
    {
      *(void *)a1 = v13;
      int v14 = (uint64_t *)*v9;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 8), v14);
    ++*(void *)(a1 + 16);
  }
  return v7;
}

void *sub_1CB835798(uint64_t a1, void *a2, const void **a3)
{
  unsigned int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    int v6 = *((char *)a3 + 23);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v7 = (size_t)a3[1];
    }
    if (v6 >= 0) {
      unint64_t v8 = a3;
    }
    else {
      unint64_t v8 = *a3;
    }
    do
    {
      while (1)
      {
        unint64_t v9 = v4;
        uint64_t v12 = (const void *)v4[4];
        uint64_t v10 = v4 + 4;
        uint64_t v11 = v12;
        size_t v13 = *((unsigned __int8 *)v10 + 23);
        if ((v13 & 0x80u) == 0) {
          int v14 = v10;
        }
        else {
          int v14 = v11;
        }
        size_t v15 = v10[1];
        if ((v13 & 0x80u) == 0) {
          size_t v16 = v13 & 0x7F;
        }
        else {
          size_t v16 = v10[1];
        }
        if (v16 >= v7) {
          size_t v17 = v7;
        }
        else {
          size_t v17 = v16;
        }
        int v18 = memcmp(v8, v14, v17);
        BOOL v19 = v7 < v16;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v4 = (void *)*v9;
        unsigned int v5 = v9;
        if (!*v9) {
          goto LABEL_33;
        }
      }
      if ((v13 & 0x80u) != 0) {
        size_t v13 = v15;
      }
      if (v7 >= v13) {
        size_t v20 = v13;
      }
      else {
        size_t v20 = v7;
      }
      int v21 = memcmp(v14, v8, v20);
      BOOL v22 = v13 < v7;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      unsigned int v5 = v9 + 1;
      uint64_t v4 = (void *)v9[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v9 = (void *)(a1 + 8);
  }
LABEL_33:
  *a2 = v9;
  return v5;
}

uint64_t *sub_1CB8358B8(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *sub_1CB835A50(void *a1)
{
  return a1;
}

uint64_t sub_1CB835A84(void *a1, void *a2)
{
  *a2 = *a1;
  *a1 = a2;
  uint64_t result = a1[2];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)result + 24))(result, a2[1], a2[2], a2[5], a2[3], a2[4]);
  }
  return result;
}

void *sub_1CB835AD0(void *result, void *a2)
{
  uint64_t v2 = result;
  while (1)
  {
    unint64_t v3 = (void **)v2;
    uint64_t v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    if (v2 == a2)
    {
      uint64_t result = (void *)result[2];
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, void, void))(*result + 32))(result, a2[1], a2[2]);
        a2 = *v3;
      }
      *unint64_t v3 = (void *)*a2;
      return result;
    }
  }
  return result;
}

uint64_t sub_1CB835B44(uint64_t a1)
{
  *(void *)a1 = &unk_1F25E9830;
  uint64_t v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(void *)(a1 + 440) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 408), 4);
  uint64_t v11 = (void **)(a1 + 384);
  sub_1CB837E88(&v11);
  uint64_t v11 = (void **)(a1 + 360);
  sub_1CB837E88(&v11);
  unint64_t v3 = *(void **)(a1 + 336);
  if (v3)
  {
    *(void *)(a1 + 344) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 264);
  if (v4 != (void *)(a1 + 280)) {
    free(v4);
  }
  unsigned int v5 = *(void **)(a1 + 232);
  if (v5)
  {
    *(void *)(a1 + 240) = v5;
    operator delete(v5);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 208), 8);
  int v6 = *(void **)(a1 + 184);
  if (v6)
  {
    *(void *)(a1 + 192) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 160);
  if (v7)
  {
    *(void *)(a1 + 168) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 88);
  if (v8 != (void *)(a1 + 104)) {
    free(v8);
  }
  unint64_t v9 = *(void **)(a1 + 56);
  if (v9)
  {
    *(void *)(a1 + 64) = v9;
    operator delete(v9);
  }
  uint64_t v11 = (void **)(a1 + 32);
  sub_1CB837E88(&v11);
  return a1;
}

void sub_1CB835C5C(uint64_t a1)
{
  sub_1CB835B44(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB835C98()
{
  return 1;
}

uint64_t sub_1CB835CA0()
{
  return 0;
}

void sub_1CB835CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v337 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = -252645135 * ((*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
  *(void *)(a1 + 168) = *(void *)(a1 + 160);
  *(void *)(a1 + 192) = *(void *)(a1 + 184);
  v320 = (uint64_t *)(a1 + 208);
  sub_1CD3C7F68((_DWORD *)(a1 + 208));
  unint64_t v3 = (void *)(a1 + 232);
  *(void *)(a1 + 240) = *(void *)(a1 + 232);
  v324 = (uint64_t *)(a1 + 32);
  sub_1CD3C7FB8((uint64_t *)(a1 + 32), *(unsigned int *)(a1 + 16));
  unint64_t v4 = *(unsigned int *)(a1 + 16);
  unint64_t v5 = (uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 2;
  uint64_t v326 = a1;
  if (v4 > v5)
  {
    sub_1CD3C83A4((char **)(a1 + 232), v4 - v5);
    uint64_t v6 = a1;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    uint64_t v6 = a1;
    if (v4 < v5) {
      *(void *)(a1 + 240) = *(void *)(a1 + 232) + 4 * v4;
    }
  }
  uint64_t v7 = *(unsigned int *)(v6 + 272);
  if ((*(_DWORD *)(v6 + 328) & 0x3F) != 0)
  {
    uint64_t v313 = *(void *)(v6 + 264) + 8 * v7;
    *(void *)(v313 - 8) &= ~(-1 << (*(_DWORD *)(v6 + 328) & 0x3F));
  }
  unsigned int v8 = v7;
  unint64_t v9 = (uint64_t **)(v6 + 264);
  *(_DWORD *)(v6 + 328) = v4;
  unsigned int v10 = v4 + 63;
  if (v7 != (v4 + 63) >> 6)
  {
    uint64_t v11 = v10 >> 6;
    if (v7 > v11)
    {
      *(_DWORD *)(v6 + 272) = v11;
      unsigned int v8 = v10 >> 6;
    }
    else
    {
      if (v11 > *(_DWORD *)(v6 + 276)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v11 != v7)
      {
        bzero(&(*v9)[v7], 8 * (v11 - v7));
        uint64_t v6 = v326;
      }
      unsigned int v8 = v11;
      *(_DWORD *)(v6 + 272) = v11;
      LODWORD(v4) = *(_DWORD *)(v6 + 328);
    }
  }
  int v12 = v4 & 0x3F;
  if (v12) {
    (*v9)[v8 - 1] &= ~(-1 << v12);
  }
  uint64_t v13 = *(void *)(v6 + 8);
  uint64_t v14 = *(void *)(v13 + 48);
  uint64_t v15 = *(void *)(v13 + 56);
  if (v14 != v15)
  {
    while (1)
    {
      uint64_t v16 = *(void *)(v14 + 8);
      size_t v17 = *(unsigned __int16 **)(v16 + 16);
      if (*v17 - 1 <= 1 && (*(unsigned char *)(*(void *)(v16 + 32) + 48) & 8) != 0) {
        goto LABEL_28;
      }
      uint64_t v18 = *((void *)v17 + 1);
      BOOL v19 = (*(_WORD *)(v16 + 44) & 0xC) != 0 && (*(_WORD *)(v16 + 44) & 4) == 0;
      if (v19) {
        break;
      }
      if ((v18 & 0x80000) != 0) {
        goto LABEL_28;
      }
LABEL_21:
      v14 += 272;
      if (v14 == v15) {
        goto LABEL_29;
      }
    }
    if ((v18 & 0x80000) == 0)
    {
      while ((*(_WORD *)(v16 + 44) & 8) != 0)
      {
        uint64_t v16 = *(void *)(v16 + 8);
        if ((*(unsigned char *)(*(void *)(v16 + 16) + 10) & 8) != 0) {
          goto LABEL_28;
        }
      }
      goto LABEL_21;
    }
LABEL_28:
    __src = (void *)v14;
    size_t v20 = sub_1CD3C84D0(v320, &__src);
    uint64_t v6 = v326;
    *((_DWORD *)v20 + 2) = 1065353216;
    *(uint64_t *)((char *)*v9 + (((unint64_t)*(unsigned int *)(v14 + 192) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v14 + 192);
    goto LABEL_21;
  }
LABEL_29:
  *(void *)(v6 + 80) = 0;
  if (!*(_DWORD *)(v6 + 216)) {
    return;
  }
  *(void *)(v6 + 64) = *(void *)(v6 + 56);
  unsigned int v21 = *(_DWORD *)(v6 + 16);
  v328 = v331;
  int v330 = 6;
  if (v21 + 63 >= 0x1C0)
  {
    unsigned int v329 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v21 + 63 >= 0x40) {
    bzero(v331, 8 * ((v21 + 63) >> 6));
  }
  unsigned int v329 = (v21 + 63) >> 6;
  for (i = v21; ; unsigned int v21 = i)
  {
    unsigned int v22 = v21 >> 6;
    uint64_t v23 = v326;
    if (v21 < 0x40) {
      break;
    }
    uint64_t v24 = 0;
    uint64_t v25 = v328;
    if (v22 <= 1) {
      unsigned int v26 = 1;
    }
    else {
      unsigned int v26 = v21 >> 6;
    }
    uint64_t v27 = 8 * v26;
    while (*(void *)((char *)v328 + v24) == -1)
    {
      v24 += 8;
      if (v27 == v24) {
        goto LABEL_42;
      }
    }
LABEL_44:
    uint64_t v28 = *(void *)(v326 + 8);
    uint64_t v29 = v329;
    uint64_t v30 = 8 * v329;
    if (v329)
    {
      uint64_t v31 = 8 * v329;
      uint64_t v32 = v25;
      do
      {
        *uint64_t v32 = ~*v32;
        ++v32;
        v31 -= 8;
      }
      while (v31);
    }
    uint64_t v33 = &v25[v29];
    char v34 = v21 & 0x3F;
    if ((v21 & 0x3F) != 0)
    {
      *(v33 - 1) &= ~(-1 << v34);
    }
    else if (!v21)
    {
LABEL_56:
      int v42 = -1;
      goto LABEL_58;
    }
    uint64_t v35 = 0;
    uint64_t v36 = (v21 - 1) & 0xFFFFFFC0;
    std::string::size_type v37 = v25;
    while (1)
    {
      uint64_t v39 = *v37++;
      uint64_t v38 = v39;
      unint64_t v40 = v36 == v35 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v21 : -1;
      unint64_t v41 = v40 & v38;
      if (v41) {
        break;
      }
      v35 += 64;
      if (v36 + 64 == v35) {
        goto LABEL_56;
      }
    }
    int v42 = __clz(__rbit64(v41)) + v35;
LABEL_58:
    uint64_t v43 = *(void *)(v28 + 48);
    if (v29)
    {
      do
      {
        *uint64_t v25 = ~*v25;
        ++v25;
        v30 -= 8;
      }
      while (v30);
    }
    if ((v21 & 0x3F) != 0) {
      *(v33 - 1) &= ~(-1 << v34);
    }
    sub_1CB83803C((void *)v326, (uint64_t *)&v328, v43 + 272 * v42);
  }
LABEL_42:
  if ((v21 & 0x3F) != 0)
  {
    uint64_t v25 = v328;
    if (*((void *)v328 + v22) != ~(-1 << (v21 & 0x3F))) {
      goto LABEL_44;
    }
  }
  uint64_t v44 = *(void *)(v326 + 32);
  uint64_t v45 = *(void *)(v326 + 40);
  while (v45 != v44)
  {
    std::string v47 = *(void **)(v45 - 72);
    v45 -= 72;
    uint64_t v46 = v47;
    if ((void *)(v45 + 16) != v47)
    {
      free(v46);
      uint64_t v23 = v326;
    }
  }
  *(void *)(v23 + 40) = v44;
  uint64_t v48 = *(void *)(v23 + 360);
  uint64_t v49 = *(void *)(v23 + 368);
  while (v49 != v48)
  {
    char v51 = *(void **)(v49 - 72);
    v49 -= 72;
    v50 = v51;
    if ((void *)(v49 + 16) != v51)
    {
      free(v50);
      uint64_t v23 = v326;
    }
  }
  v319 = v9;
  v314 = v3;
  v52 = (uint64_t *)(v23 + 360);
  *(void *)(v23 + 368) = v48;
  unsigned int v53 = *(_DWORD *)(v23 + 16);
  v325 = (uint64_t *)(v23 + 360);
  if (v53)
  {
    for (unsigned int j = 0; j < v53; ++j)
    {
      __src = v335;
      HIDWORD(v334) = 6;
      if (v53 + 63 >= 0x1C0)
      {
        LODWORD(v334) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v53 + 63 >= 0x40)
      {
        bzero(v335, 8 * ((v53 + 63) >> 6));
        uint64_t v23 = v326;
      }
      LODWORD(v334) = (v53 + 63) >> 6;
      unsigned int v336 = v53;
      unint64_t v55 = *(void *)(v23 + 40);
      if (v55 >= *(void *)(v23 + 48))
      {
        uint64_t v57 = sub_1CB838200(v324, (uint64_t)&__src);
        uint64_t v23 = v326;
      }
      else
      {
        *(void *)unint64_t v55 = v55 + 16;
        *(void *)(v55 + 8) = 0x600000000;
        if ((void **)v55 != &__src)
        {
          int v56 = v334;
          if (v334)
          {
            if (v334 >= 7uLL) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v55 + 16), __src, 8 * v334);
            *(_DWORD *)(v55 + 8) = v56;
            unsigned int v53 = v336;
            uint64_t v23 = v326;
          }
        }
        *(_DWORD *)(v55 + 64) = v53;
        uint64_t v57 = v55 + 72;
      }
      *(void *)(v23 + 40) = v57;
      unint64_t v58 = *(void *)(v23 + 368);
      if (v58 >= *(void *)(v23 + 376))
      {
        v52 = v325;
        uint64_t v60 = sub_1CB838200(v325, (uint64_t)&__src);
        uint64_t v23 = v326;
      }
      else
      {
        *(void *)unint64_t v58 = v58 + 16;
        *(void *)(v58 + 8) = 0x600000000;
        if ((void **)v58 != &__src)
        {
          int v59 = v334;
          if (v334)
          {
            if (v334 >= 7uLL) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v58 + 16), __src, 8 * v334);
            *(_DWORD *)(v58 + 8) = v59;
            uint64_t v23 = v326;
          }
        }
        *(_DWORD *)(v58 + 64) = v336;
        uint64_t v60 = v58 + 72;
        v52 = v325;
      }
      *(void *)(v23 + 368) = v60;
      if (__src != v335)
      {
        free(__src);
        uint64_t v23 = v326;
      }
      unsigned int v53 = *(_DWORD *)(v23 + 16);
    }
  }
  v61 = *(uint64_t **)(v23 + 56);
  v321 = *(uint64_t **)(v23 + 64);
  v62 = v324;
  if (v61 != v321)
  {
    do
    {
      uint64_t v63 = *v61;
      uint64_t v64 = *(unsigned int *)(*v61 + 120);
      if (v64)
      {
        v65 = *(void **)(v63 + 112);
        v66 = &v65[2 * v64];
        do
        {
          unsigned int v67 = *(_DWORD *)((*v65 & 0xFFFFFFFFFFFFFFF8) + 192);
          if (v67 != -1)
          {
            uint64_t v68 = *v62;
            uint64_t v69 = *v62 + 72 * v67;
            unint64_t v70 = *(unsigned int *)(v63 + 192);
            v71 = *(void **)v69;
            *(void *)(*(void *)v69 + ((v70 >> 3) & 0x1FFFFFF8)) |= 1 << v70;
            uint64_t v72 = v68 + 72 * v70;
            v73 = (unsigned int *)(v69 + 64);
            unsigned int v74 = *(_DWORD *)(v72 + 64);
            if (*(_DWORD *)(v69 + 64) < v74)
            {
              int v79 = *(_DWORD *)(v69 + 64) & 0x3F;
              uint64_t v80 = *(unsigned int *)(v69 + 8);
              if (v79) {
                v71[v80 - 1] &= ~(-1 << v79);
              }
              unsigned int v81 = v80;
              unsigned int *v73 = v74;
              unsigned int v82 = v74 + 63;
              if (v80 != (v74 + 63) >> 6)
              {
                uint64_t v83 = v82 >> 6;
                if (v80 > v83)
                {
                  *(_DWORD *)(v69 + 8) = v83;
                  unsigned int v81 = v82 >> 6;
                  v52 = v325;
                }
                else
                {
                  if (v83 > *(_DWORD *)(v69 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v83 != v80)
                  {
                    v84 = v61;
                    bzero((void *)(*(void *)v69 + 8 * v80), 8 * (v83 - v80));
                    v61 = v84;
                  }
                  unsigned int v81 = v83;
                  *(_DWORD *)(v69 + 8) = v83;
                  unsigned int v74 = *v73;
                  v52 = v325;
                  uint64_t v23 = v326;
                  v62 = v324;
                }
              }
              int v85 = v74 & 0x3F;
              if (v85) {
                *(void *)(*(void *)v69 + 8 * v81 - 8) &= ~(-1 << v85);
              }
            }
            uint64_t v75 = *(unsigned int *)(v72 + 8);
            if (v75)
            {
              v76 = *(uint64_t **)v72;
              v77 = *(void **)v69;
              do
              {
                uint64_t v78 = *v76++;
                *v77++ |= v78;
                --v75;
              }
              while (v75);
            }
          }
          v65 += 2;
        }
        while (v65 != v66);
      }
      ++v61;
    }
    while (v61 != v321);
    uint64_t v86 = *(void *)(v23 + 64);
    uint64_t v322 = *(void *)(v23 + 56);
    while (v86 != v322)
    {
      uint64_t v88 = *(void *)(v86 - 8);
      v86 -= 8;
      uint64_t v87 = v88;
      uint64_t v89 = *(unsigned int *)(v88 + 40);
      if (v89)
      {
        v90 = *(void **)(v87 + 32);
        v91 = &v90[2 * v89];
        do
        {
          unsigned int v92 = *(_DWORD *)((*v90 & 0xFFFFFFFFFFFFFFF8) + 192);
          if (v92 != -1)
          {
            uint64_t v93 = *v52;
            uint64_t v94 = *v52 + 72 * v92;
            unint64_t v95 = *(unsigned int *)(v87 + 192);
            v96 = *(void **)v94;
            *(void *)(*(void *)v94 + ((v95 >> 3) & 0x1FFFFFF8)) |= 1 << v95;
            uint64_t v97 = v93 + 72 * v95;
            v98 = (unsigned int *)(v94 + 64);
            unsigned int v99 = *(_DWORD *)(v97 + 64);
            if (*(_DWORD *)(v94 + 64) < v99)
            {
              int v104 = *(_DWORD *)(v94 + 64) & 0x3F;
              uint64_t v105 = *(unsigned int *)(v94 + 8);
              if (v104) {
                v96[v105 - 1] &= ~(-1 << v104);
              }
              unsigned int v106 = v105;
              unsigned int *v98 = v99;
              unsigned int v107 = v99 + 63;
              if (v105 != (v99 + 63) >> 6)
              {
                uint64_t v108 = v107 >> 6;
                if (v105 > v108)
                {
                  *(_DWORD *)(v94 + 8) = v108;
                  unsigned int v106 = v107 >> 6;
                }
                else
                {
                  if (v108 > *(_DWORD *)(v94 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v108 != v105)
                  {
                    uint64_t v109 = v86;
                    bzero((void *)(*(void *)v94 + 8 * v105), 8 * (v108 - v105));
                    uint64_t v86 = v109;
                    v62 = v324;
                  }
                  unsigned int v106 = v108;
                  *(_DWORD *)(v94 + 8) = v108;
                  unsigned int v99 = *v98;
                  uint64_t v23 = v326;
                }
                v52 = v325;
              }
              int v110 = v99 & 0x3F;
              if (v110) {
                *(void *)(*(void *)v94 + 8 * v106 - 8) &= ~(-1 << v110);
              }
            }
            uint64_t v100 = *(unsigned int *)(v97 + 8);
            if (v100)
            {
              v101 = *(uint64_t **)v97;
              v102 = *(void **)v94;
              do
              {
                uint64_t v103 = *v101++;
                *v102++ |= v103;
                --v100;
              }
              while (v100);
            }
          }
          v90 += 2;
        }
        while (v90 != v91);
      }
    }
  }
  v111 = v319;
  if (*(_DWORD *)(v23 + 16))
  {
    unint64_t v112 = 0;
    uint64_t v113 = *v62;
    do
    {
      uint64_t v114 = *v52 + 72 * v112;
      unint64_t v115 = v113 + 72 * v112;
      v116 = (unsigned int *)(v115 + 64);
      unsigned int v117 = *(_DWORD *)(v114 + 64);
      if (*(_DWORD *)(v115 + 64) < v117)
      {
        int v127 = *(_DWORD *)(v115 + 64) & 0x3F;
        uint64_t v128 = *(unsigned int *)(v115 + 8);
        if (v127) {
          *(void *)(*(void *)v115 + 8 * v128 - 8) &= ~(-1 << v127);
        }
        unsigned int v129 = v128;
        unsigned int *v116 = v117;
        unsigned int v130 = v117 + 63;
        if (v128 != (v117 + 63) >> 6)
        {
          uint64_t v131 = v130 >> 6;
          if (v128 > v131)
          {
            *(_DWORD *)(v115 + 8) = v131;
            unsigned int v129 = v130 >> 6;
            v52 = v325;
          }
          else
          {
            if (v131 > *(_DWORD *)(v115 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v131 != v128) {
              bzero((void *)(*(void *)v115 + 8 * v128), 8 * (v131 - v128));
            }
            unsigned int v129 = v131;
            *(_DWORD *)(v115 + 8) = v131;
            unsigned int v117 = *v116;
            v52 = v325;
            uint64_t v23 = v326;
            v62 = v324;
          }
        }
        int v132 = v117 & 0x3F;
        v111 = v319;
        if (v132) {
          *(void *)(*(void *)v115 + 8 * v129 - 8) &= ~(-1 << v132);
        }
      }
      uint64_t v118 = *(unsigned int *)(v114 + 8);
      if (v118)
      {
        v119 = *(uint64_t **)v114;
        v120 = *(void **)v115;
        do
        {
          uint64_t v121 = *v119++;
          *v120++ |= v121;
          --v118;
        }
        while (v118);
      }
      uint64_t v113 = *v62;
      uint64_t v122 = *v62 + 72 * v112;
      v123 = *(void **)v122;
      uint64_t v124 = *(unsigned int *)(v122 + 8);
      if (v124)
      {
        uint64_t v125 = 8 * v124;
        v126 = v123;
        do
        {
          void *v126 = ~*v126;
          ++v126;
          v125 -= 8;
        }
        while (v125);
      }
      if ((*(_DWORD *)(v113 + 72 * v112 + 64) & 0x3F) != 0) {
        v123[v124 - 1] &= ~(-1 << (*(_DWORD *)(v113 + 72 * v112 + 64) & 0x3F));
      }
      v123[v112 >> 6] &= ~(1 << v112);
      ++v112;
    }
    while (v112 < *(unsigned int *)(v23 + 16));
  }
  uint64_t v133 = *(void *)(v23 + 56);
  uint64_t v318 = *(void *)(v23 + 64);
  if (v133 != v318)
  {
    v316 = (uint64_t *)(v23 + 384);
    v317 = (void **)(v23 + 88);
    v315 = (_DWORD *)(v23 + 408);
    do
    {
      uint64_t v134 = *(void *)(v23 + 80);
      unsigned int v135 = *(_DWORD *)(*(void *)v133 + 192);
      uint64_t v136 = *(void *)(v23 + 32);
      v137 = (void **)(v136 + 72 * v135);
      *(void *)(v23 + 80) = v137;
      uint64_t v138 = *((unsigned int *)v137 + 2);
      if (v138)
      {
        uint64_t v139 = 0;
        v140 = (char *)*v137;
        while (!*(void *)&v140[v139])
        {
          v139 += 8;
          if (8 * v138 == v139) {
            goto LABEL_182;
          }
        }
        unsigned int v141 = *(_DWORD *)(v23 + 272) >= v138 ? *((_DWORD *)v137 + 2) : *(_DWORD *)(v23 + 272);
        if (v141)
        {
          unint64_t v142 = 0;
          uint64_t v143 = 8 * v141;
          while (((*v111)[v142 / 8] & *(void *)&v140[v142]) == 0)
          {
            v142 += 8;
            if (v143 == v142) {
              goto LABEL_182;
            }
          }
          if (!v134
            || *(_DWORD *)(v136 + 72 * v135 + 64) != *(_DWORD *)(v134 + 64)
            || (v144 = memcmp(*v137, *(const void **)v134, 8 * v138), uint64_t v23 = v326, v144))
          {
            if (v317 != v137)
            {
              uint64_t v145 = *(unsigned int *)(v23 + 96);
              if (v145 >= v138)
              {
                memmove(*v317, v140, 8 * v138);
              }
              else
              {
                if (*(_DWORD *)(v23 + 100) < v138)
                {
                  *(_DWORD *)(v23 + 96) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v145) {
                  memmove(*v317, v140, 8 * v145);
                }
                else {
                  uint64_t v145 = 0;
                }
                uint64_t v146 = *((unsigned int *)v137 + 2);
                if (v145 != v146) {
                  memcpy((char *)*v317 + 8 * v145, (char *)*v137 + 8 * v145, (unsigned char *)*v137 + 8 * v146 - ((unsigned char *)*v137 + 8 * v145));
                }
              }
              uint64_t v23 = v326;
              *(_DWORD *)(v326 + 96) = v138;
            }
            int v147 = *(_DWORD *)(v136 + 72 * v135 + 64);
            *(_DWORD *)(v23 + 152) = v147;
            uint64_t v148 = *(void *)(v23 + 384);
            uint64_t v149 = *(void *)(v23 + 392);
            if (v149 == v148)
            {
              v150 = v325;
              v151 = v317;
            }
            else
            {
              v150 = v325;
              v151 = v317;
              do
              {
                v153 = *(void **)(v149 - 72);
                v149 -= 72;
                v152 = v153;
                if ((void *)(v149 + 16) != v153)
                {
                  free(v152);
                  uint64_t v23 = v326;
                }
              }
              while (v149 != v148);
              int v147 = *(_DWORD *)(v23 + 152);
            }
            *(void *)(v23 + 392) = v148;
            if (v147)
            {
              unsigned int v154 = 0;
              do
              {
                unsigned int v155 = v154 >> 6;
                unsigned int v156 = v147 - 1;
                if (v154 >> 6 > (v147 - 1) >> 6) {
                  break;
                }
                uint64_t v157 = 0;
                uint64_t v158 = v156 >> 6;
                int v159 = v154 & 0x3F;
                BOOL v19 = v159 == 0;
                unint64_t v160 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v159;
                uint64_t v161 = v19 ? -1 : ~v160;
                unint64_t v162 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v156;
                unsigned int v163 = v155 << 6;
                uint64_t v164 = v158 - v155;
                uint64_t v165 = (uint64_t)*v151 + 8 * v155;
                while (1)
                {
                  uint64_t v166 = v157 ? -1 : v161;
                  unint64_t v167 = v164 == v157 ? v162 : -1;
                  unint64_t v168 = v166 & v167 & *(void *)(v165 + 8 * v157);
                  if (v168) {
                    break;
                  }
                  v163 += 64;
                  if (v164 + 1 == ++v157) {
                    goto LABEL_265;
                  }
                }
                int v169 = __clz(__rbit64(v168));
                if (v169 + v163 == -1) {
                  break;
                }
                uint64_t v170 = *(void *)(*(void *)(v23 + 8) + 48);
                if (!v170) {
                  break;
                }
                unsigned int v171 = *(_DWORD *)(v170 + 272 * (int)(v169 + v163) + 192);
                uint64_t v172 = *v150;
                uint64_t v173 = *v150 + 72 * v171;
                v174 = v335;
                __src = v335;
                uint64_t v334 = 0x600000000;
                unsigned int v175 = *(_DWORD *)(v173 + 8);
                if (&__src == (void **)v173 || v175 == 0)
                {
                  unsigned int v175 = 0;
                }
                else
                {
                  if (v175 >= 7) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v335, *(const void **)v173, 8 * *(unsigned int *)(v173 + 8));
                  v174 = __src;
                  LODWORD(v334) = v175;
                  uint64_t v23 = v326;
                }
                unsigned int v177 = *(_DWORD *)(v172 + 72 * v171 + 64);
                unsigned int v336 = v177;
                uint64_t v178 = *(void *)(v23 + 80);
                unsigned int v179 = *(_DWORD *)(v178 + 8);
                if (v179 >= v175) {
                  uint64_t v180 = v175;
                }
                else {
                  uint64_t v180 = v179;
                }
                v150 = v325;
                if (v180)
                {
                  v181 = *(uint64_t **)v178;
                  v182 = v174;
                  uint64_t v183 = v180;
                  do
                  {
                    uint64_t v184 = *v181++;
                    *v182++ &= v184;
                    --v183;
                  }
                  while (v183);
                }
                if (v175 > v179)
                {
                  do
                  {
                    *(void *)&v174[8 * v180] = 0;
                    LODWORD(v180) = v180 + 1;
                  }
                  while (v175 != v180);
                }
                *(void *)&v174[8 * (v171 >> 6)] |= 1 << v171;
                unint64_t v185 = *(void *)(v23 + 392);
                if (v185 >= *(void *)(v23 + 400))
                {
                  uint64_t v187 = sub_1CB838200(v316, (uint64_t)&__src);
                  uint64_t v23 = v326;
                }
                else
                {
                  *(void *)unint64_t v185 = v185 + 16;
                  *(void *)(v185 + 8) = 0x600000000;
                  if ((void **)v185 != &__src)
                  {
                    int v186 = v334;
                    if (v334)
                    {
                      if (v334 >= 7uLL) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      memcpy((void *)(v185 + 16), __src, 8 * v334);
                      *(_DWORD *)(v185 + 8) = v186;
                      unsigned int v177 = v336;
                      uint64_t v23 = v326;
                    }
                  }
                  *(_DWORD *)(v185 + 64) = v177;
                  uint64_t v187 = v185 + 72;
                  v150 = v325;
                }
                *(void *)(v23 + 392) = v187;
                v188 = (uint64_t *)__src;
                uint64_t v189 = v334;
                if (v334)
                {
                  uint64_t v190 = 8 * v334;
                  v191 = __src;
                  do
                  {
                    void *v191 = ~*v191;
                    ++v191;
                    v190 -= 8;
                  }
                  while (v190);
                }
                if ((v336 & 0x3F) != 0) {
                  v188[v189 - 1] &= ~(-1 << (v336 & 0x3F));
                }
                unsigned int v192 = *(_DWORD *)(v23 + 96);
                if (v189 >= v192) {
                  uint64_t v193 = v192;
                }
                else {
                  uint64_t v193 = v189;
                }
                if (v193)
                {
                  v194 = *v151;
                  v195 = v188;
                  uint64_t v196 = v193;
                  do
                  {
                    uint64_t v197 = *v195++;
                    *v194++ &= v197;
                    --v196;
                  }
                  while (v196);
                }
                if (v192 > v189)
                {
                  v198 = *v151;
                  do
                  {
                    v198[v193] = 0;
                    LODWORD(v193) = v193 + 1;
                  }
                  while (v192 != v193);
                }
                if (v188 != (uint64_t *)v335)
                {
                  free(v188);
                  uint64_t v23 = v326;
                }
                unsigned int v154 = v169 + v163 + 1;
                int v147 = *(_DWORD *)(v23 + 152);
              }
              while (v169 - v147 + v163 != -1);
            }
LABEL_265:
            int v199 = *(_DWORD *)(v23 + 416);
            if (v199 || *(_DWORD *)(v23 + 420))
            {
              uint64_t v200 = *(unsigned int *)(v23 + 424);
              if (v200 <= 4 * v199 || v200 < 0x41)
              {
                if (v200)
                {
                  v201 = *(_DWORD **)v315;
                  uint64_t v202 = 8 * v200;
                  do
                  {
                    _DWORD *v201 = -1;
                    v201 += 2;
                    v202 -= 8;
                  }
                  while (v202);
                }
                *(void *)(v23 + 416) = 0;
              }
              else
              {
                sub_1CB83872C(v315);
                uint64_t v23 = v326;
              }
            }
            *(void *)(v23 + 344) = *(void *)(v23 + 336);
            uint64_t v204 = *(void *)(v23 + 384);
            uint64_t v203 = *(void *)(v23 + 392);
            uint64_t v323 = v203;
            while (2)
            {
              if (v204 == v203) {
                goto LABEL_182;
              }
              uint64_t v205 = *(unsigned int *)(v204 + 8);
              unsigned int v206 = *(_DWORD *)(v23 + 272);
              if (v206 >= v205) {
                uint64_t v207 = v205;
              }
              else {
                uint64_t v207 = v206;
              }
              if (v207)
              {
                v208 = *v111;
                v209 = *(void **)v204;
                uint64_t v210 = v207;
                do
                {
                  uint64_t v211 = *v208++;
                  *v209++ &= v211;
                  --v210;
                }
                while (v210);
              }
              if (v205 > v206)
              {
                v212 = *(void **)v204;
                do
                {
                  v212[v207] = 0;
                  LODWORD(v207) = v207 + 1;
                }
                while (v205 != v207);
              }
              int v213 = *(_DWORD *)(v204 + 64);
              if (v213)
              {
                uint64_t v214 = 0;
                uint64_t v215 = 0;
                v216 = *(void **)v204;
                uint64_t v217 = (v213 - 1) & 0xFFFFFFC0;
                while (1)
                {
                  unint64_t v218 = v217 + v214 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v213;
                  unint64_t v219 = v218 & v216[v215];
                  if (v219) {
                    break;
                  }
                  ++v215;
                  v214 -= 64;
                  if (v217 + v214 == -64) {
                    goto LABEL_389;
                  }
                }
                int v220 = __clz(__rbit64(v219));
                if (v214 - v220 != 1)
                {
                  signed int v221 = v220 - v214;
                  *(void *)(v23 + 440) = *(void *)(v23 + 432);
                  uint64_t v222 = *(void *)(v23 + 408);
                  uint64_t v223 = *(unsigned int *)(v23 + 424);
                  if (v223)
                  {
                    LODWORD(v224) = (v223 - 1) & (37 * v221);
                    v225 = (int *)(v222 + 8 * v224);
                    int v226 = *v225;
                    if (!(*v225 - v220 + v214))
                    {
LABEL_295:
                      if ((int *)(v222 + 8 * v223) == v225)
                      {
                        if (v317 != (void **)v204)
                        {
                          uint64_t v233 = *(unsigned int *)(v23 + 96);
                          if (v233 >= v205)
                          {
                            if (v205) {
                              memmove(*v317, v216, 8 * v205);
                            }
                          }
                          else
                          {
                            if (*(_DWORD *)(v23 + 100) < v205)
                            {
                              *(_DWORD *)(v23 + 96) = 0;
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            if (v233) {
                              memmove(*v317, v216, 8 * v233);
                            }
                            else {
                              uint64_t v233 = 0;
                            }
                            uint64_t v276 = *(unsigned int *)(v204 + 8);
                            if (v233 != v276) {
                              memcpy((char *)*v317 + 8 * v233, (const void *)(*(void *)v204 + 8 * v233), *(void *)v204 + 8 * v276 - (*(void *)v204 + 8 * v233));
                            }
                          }
                          uint64_t v23 = v326;
                          *(_DWORD *)(v326 + 96) = v205;
                          int v213 = *(_DWORD *)(v204 + 64);
                        }
                        *(_DWORD *)(v23 + 152) = v213;
                        *(void *)(*(void *)(v23 + 88) + v215 * 8) &= ~(1 << v220);
                        unsigned int v277 = sub_1CB8383C0((void *)v23, v221, v204);
                        uint64_t v23 = v326;
                        v278 = *(void ***)(v326 + 432);
                        v279 = *(void ***)(v326 + 440);
                        if (v278 != v279)
                        {
                          float v280 = 1.0 / (double)v277;
                          do
                          {
                            __src = 0;
                            __src = *v278;
                            v281 = (float *)sub_1CD3C84D0(v320, &__src);
                            uint64_t v23 = v326;
                            v281[2] = v281[2] + v280;
                            v283 = *(float **)(v326 + 344);
                            unint64_t v282 = *(void *)(v326 + 352);
                            if ((unint64_t)v283 >= v282)
                            {
                              v285 = *(float **)(v326 + 336);
                              uint64_t v286 = ((char *)v283 - (char *)v285) >> 4;
                              unint64_t v287 = v286 + 1;
                              if ((unint64_t)(v286 + 1) >> 60) {
LABEL_419:
                              }
                                abort();
                              uint64_t v288 = v282 - (void)v285;
                              if (v288 >> 3 > v287) {
                                unint64_t v287 = v288 >> 3;
                              }
                              if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFF0) {
                                unint64_t v289 = 0xFFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v289 = v287;
                              }
                              if (v289 >> 60) {
LABEL_420:
                              }
                                sub_1CB833614();
                              v290 = (char *)operator new(16 * v289);
                              v291 = (float *)&v290[16 * v286];
                              *(void *)v291 = __src;
                              v291[2] = v280;
                              if (v283 == v285)
                              {
                                v293 = &v290[16 * v286];
                                uint64_t v23 = v326;
                              }
                              else
                              {
                                v292 = &v290[16 * v286];
                                uint64_t v23 = v326;
                                do
                                {
                                  v293 = v292 - 16;
                                  *((_OWORD *)v292 - 1) = *((_OWORD *)v283 - 1);
                                  v283 -= 4;
                                  v292 -= 16;
                                }
                                while (v283 != v285);
                              }
                              v284 = v291 + 4;
                              *(void *)(v23 + 336) = v293;
                              *(void *)(v23 + 344) = v291 + 4;
                              *(void *)(v23 + 352) = &v290[16 * v289];
                              if (v285)
                              {
                                operator delete(v285);
                                uint64_t v23 = v326;
                              }
                            }
                            else
                            {
                              *(void *)v283 = __src;
                              v283[2] = v280;
                              v284 = v283 + 4;
                            }
                            *(void *)(v23 + 344) = v284;
                            ++v278;
                          }
                          while (v278 != v279);
                        }
                      }
                      else
                      {
                        unsigned int v227 = v225[1];
                        v228 = v335;
                        uint64_t v229 = *v325;
                        uint64_t v230 = *v325 + 72 * v221;
                        __src = v335;
                        uint64_t v334 = 0x600000000;
                        unsigned int v231 = *(_DWORD *)(v230 + 8);
                        if (&__src == (void **)v230 || v231 == 0)
                        {
                          unsigned int v231 = 0;
                        }
                        else
                        {
                          if (v231 >= 7) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          memcpy(v335, *(const void **)v230, 8 * *(unsigned int *)(v230 + 8));
                          v228 = __src;
                          LODWORD(v334) = v231;
                          uint64_t v23 = v326;
                        }
                        unsigned int v234 = *(_DWORD *)(v229 + 72 * v221 + 64);
                        unsigned int v336 = v234;
                        uint64_t v235 = *(void *)(v23 + 80);
                        unsigned int v236 = *(_DWORD *)(v235 + 8);
                        if (v236 >= v231) {
                          uint64_t v237 = v231;
                        }
                        else {
                          uint64_t v237 = v236;
                        }
                        v111 = v319;
                        if (v237)
                        {
                          v238 = *(uint64_t **)v235;
                          v239 = v228;
                          uint64_t v240 = v237;
                          do
                          {
                            uint64_t v241 = *v238++;
                            *v239++ &= v241;
                            --v240;
                          }
                          while (v240);
                        }
                        if (v231 > v236)
                        {
                          do
                          {
                            *(void *)&v228[8 * v237] = 0;
                            LODWORD(v237) = v237 + 1;
                          }
                          while (v231 != v237);
                        }
                        unsigned int v242 = *(_DWORD *)(v23 + 272);
                        if (v242 >= v231) {
                          uint64_t v243 = v231;
                        }
                        else {
                          uint64_t v243 = v242;
                        }
                        if (v243)
                        {
                          v244 = *v319;
                          v245 = v228;
                          uint64_t v246 = v243;
                          do
                          {
                            uint64_t v247 = *v244++;
                            *v245++ &= v247;
                            --v246;
                          }
                          while (v246);
                        }
                        if (v231 > v242)
                        {
                          do
                          {
                            *(void *)&v228[8 * v243] = 0;
                            LODWORD(v243) = v243 + 1;
                          }
                          while (v231 != v243);
                        }
                        *(void *)&v228[v215 * 8] |= 1 << v220;
                        if (v234)
                        {
                          unsigned int v248 = 0;
                          float v249 = 1.0 / (double)v227;
                          while (1)
                          {
                            unsigned int v250 = v248 >> 6;
                            unsigned int v251 = v234 - 1;
                            v228 = __src;
                            if (v248 >> 6 > (v234 - 1) >> 6) {
                              break;
                            }
                            uint64_t v252 = 0;
                            uint64_t v253 = v251 >> 6;
                            unint64_t v254 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v251;
                            unint64_t v255 = (v248 & 0x3F) != 0 ? ~(0xFFFFFFFFFFFFFFFFLL >> -(v248 & 0x3F)) : -1;
                            int v256 = (v250 << 6) | 1;
                            uint64_t v257 = v253 - v250;
                            v258 = (char *)__src + 8 * v250;
                            while (1)
                            {
                              uint64_t v259 = v252 ? -1 : v255;
                              unint64_t v260 = v257 == v252 ? v254 : -1;
                              unint64_t v261 = v259 & v260 & *(void *)&v258[8 * v252];
                              if (v261) {
                                break;
                              }
                              v256 += 64;
                              if (v257 + 1 == ++v252) {
                                goto LABEL_361;
                              }
                            }
                            int v262 = __clz(__rbit64(v261));
                            unsigned int v248 = v262 + v256;
                            if ((v262 + v256) < 2) {
                              break;
                            }
                            uint64_t v327 = *(void *)(*(void *)(v23 + 8) + 48) + 272 * (int)(v248 - 1);
                            v263 = (float *)sub_1CD3C84D0(v320, &v327);
                            uint64_t v23 = v326;
                            v263[2] = v263[2] + v249;
                            v265 = *(float **)(v326 + 344);
                            unint64_t v264 = *(void *)(v326 + 352);
                            if ((unint64_t)v265 >= v264)
                            {
                              v267 = *(float **)(v326 + 336);
                              uint64_t v268 = ((char *)v265 - (char *)v267) >> 4;
                              unint64_t v269 = v268 + 1;
                              if ((unint64_t)(v268 + 1) >> 60) {
                                goto LABEL_419;
                              }
                              uint64_t v270 = v264 - (void)v267;
                              if (v270 >> 3 > v269) {
                                unint64_t v269 = v270 >> 3;
                              }
                              if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFF0) {
                                unint64_t v271 = 0xFFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v271 = v269;
                              }
                              if (v271 >> 60) {
                                goto LABEL_420;
                              }
                              v272 = (char *)operator new(16 * v271);
                              v273 = (float *)&v272[16 * v268];
                              *(void *)v273 = v327;
                              v273[2] = v249;
                              if (v265 == v267)
                              {
                                v275 = &v272[16 * v268];
                                v111 = v319;
                                uint64_t v23 = v326;
                              }
                              else
                              {
                                v274 = &v272[16 * v268];
                                v111 = v319;
                                uint64_t v23 = v326;
                                do
                                {
                                  v275 = v274 - 16;
                                  *((_OWORD *)v274 - 1) = *((_OWORD *)v265 - 1);
                                  v265 -= 4;
                                  v274 -= 16;
                                }
                                while (v265 != v267);
                              }
                              v266 = v273 + 4;
                              *(void *)(v23 + 336) = v275;
                              *(void *)(v23 + 344) = v273 + 4;
                              *(void *)(v23 + 352) = &v272[16 * v271];
                              if (v267)
                              {
                                operator delete(v267);
                                uint64_t v23 = v326;
                              }
                            }
                            else
                            {
                              *(void *)v265 = v327;
                              v265[2] = v249;
                              v266 = v265 + 4;
                            }
                            *(void *)(v23 + 344) = v266;
                            unsigned int v234 = v336;
                            if (!(v262 - v336 + v256))
                            {
                              v228 = __src;
                              break;
                            }
                          }
                        }
LABEL_361:
                        if (v228 != v335)
                        {
                          free(v228);
                          uint64_t v23 = v326;
                        }
                      }
                      goto LABEL_389;
                    }
                    int v294 = v214 - v220;
                    int v295 = 1;
                    while (v226 != -1)
                    {
                      int v296 = v224 + v295++;
                      uint64_t v224 = v296 & (v223 - 1);
                      int v226 = *(_DWORD *)(v222 + 8 * v224);
                      if (!(v294 + v226))
                      {
                        v225 = (int *)(v222 + 8 * v224);
                        goto LABEL_295;
                      }
                    }
                  }
                  v225 = (int *)(v222 + 8 * v223);
                  goto LABEL_295;
                }
              }
LABEL_389:
              v204 += 72;
              uint64_t v203 = v323;
              continue;
            }
          }
          uint64_t v298 = *(void *)(v326 + 336);
          uint64_t v297 = *(void *)(v326 + 344);
          while (v298 != v297)
          {
            float v299 = *(float *)(v298 + 8);
            v300 = (float *)sub_1CD3C84D0(v320, (void *)v298);
            uint64_t v23 = v326;
            v300[2] = v299 + v300[2];
            v298 += 16;
          }
        }
      }
LABEL_182:
      v133 += 8;
    }
    while (v133 != v318);
  }
  if (v328 != v331)
  {
    free(v328);
    uint64_t v23 = v326;
  }
  if (*(_DWORD *)(v23 + 216))
  {
    uint64_t v302 = *(void *)(v23 + 56);
    uint64_t v301 = *(void *)(v23 + 64);
    while (v301 != v302)
    {
      v304 = *(unsigned int **)(v301 - 8);
      v301 -= 8;
      v303 = v304;
      __src = v304;
      float v305 = 0.0;
      float v306 = 0.0;
      if ((*(unint64_t *)((char *)*v111 + (((unint64_t)v304[48] >> 3) & 0x1FFFFFF8)) >> v304[48]))
      {
        float v306 = *((float *)sub_1CD3C84D0(v320, &__src) + 2);
        v303 = __src;
      }
      uint64_t v307 = *((unsigned int *)v303 + 30);
      if (v307)
      {
        v308 = (void *)v303[14];
        uint64_t v309 = 16 * v307;
        do
        {
          uint64_t v310 = *(unsigned int *)((*v308 & 0xFFFFFFFFFFFFFFF8) + 192);
          if (v310 != -1 && *(float *)(*v314 + 4 * v310) > v305) {
            float v305 = *(float *)(*v314 + 4 * v310);
          }
          v308 += 2;
          v309 -= 16;
        }
        while (v309);
      }
      float v311 = v306 + v305;
      uint64_t v312 = *((unsigned int *)v303 + 48);
      if (*(float *)(*v314 + 4 * v312) < v311) {
        *(float *)(*v314 + 4 * v312) = v311;
      }
    }
  }
}

BOOL sub_1CB8375F0(BOOL result)
{
  uint64_t v1 = *(void *)(result + 160);
  uint64_t v2 = *(void *)(result + 168) - v1;
  if (v2 >= 9)
  {
    uint64_t v3 = v2 >> 3;
    int64_t v4 = (unint64_t)((v2 >> 3) - 2) >> 1;
    size_t v20 = *(uint64_t **)(result + 256);
    int64_t v21 = v4;
    uint64_t v19 = v3;
    do
    {
      uint64_t v5 = v4;
      if (v21 >= v4)
      {
        uint64_t v6 = (2 * v4) | 1;
        uint64_t v7 = (uint64_t *)(v1 + 8 * v6);
        uint64_t v8 = *v7;
        if (2 * v4 + 2 >= v3)
        {
          uint64_t v10 = *v20;
        }
        else
        {
          uint64_t v9 = v7[1];
          uint64_t v10 = *v20;
          if (sub_1CB838BCC(*v20, *v7, v9))
          {
            uint64_t v8 = v9;
            ++v7;
            uint64_t v6 = 2 * v5 + 2;
          }
        }
        uint64_t v11 = (uint64_t *)(v1 + 8 * v5);
        uint64_t v12 = *v11;
        uint64_t result = sub_1CB838BCC(v10, v8, *v11);
        if (!result)
        {
          uint64_t v18 = v5;
          do
          {
            *uint64_t v11 = v8;
            uint64_t v11 = v7;
            if (v21 < v6) {
              break;
            }
            uint64_t v13 = (2 * v6) | 1;
            uint64_t v7 = (uint64_t *)(v1 + 8 * v13);
            uint64_t v14 = 2 * v6 + 2;
            uint64_t v8 = *v7;
            if (v14 >= v3)
            {
              uint64_t v16 = *v20;
              uint64_t v6 = (2 * v6) | 1;
            }
            else
            {
              uint64_t v15 = v7[1];
              uint64_t v16 = *v20;
              BOOL v17 = sub_1CB838BCC(*v20, *v7, v15);
              if (v17)
              {
                uint64_t v8 = v15;
                ++v7;
              }
              uint64_t v3 = v19;
              uint64_t v6 = v17 ? v14 : v13;
            }
            uint64_t result = sub_1CB838BCC(v16, v8, v12);
          }
          while (!result);
          *uint64_t v11 = v12;
          uint64_t v5 = v18;
        }
      }
      int64_t v4 = v5 - 1;
    }
    while (v5 > 0);
  }
  return result;
}

uint64_t sub_1CB83779C(void *a1, unsigned char *a2)
{
  uint64_t v5 = (char *)a1[20];
  int64_t v4 = (char *)a1[21];
  if (v5 == v4)
  {
    uint64_t v7 = a1[23];
    uint64_t v6 = a1[24];
    if (v7 == v6) {
      return 0;
    }
    for (uint64_t i = v7 + 16; i != v6; i += 16)
    {
      if (*(_DWORD *)(i + 8) < *(_DWORD *)(v7 + 8)) {
        uint64_t v7 = i;
      }
    }
    unint64_t v9 = a1[22];
    if ((unint64_t)v5 >= v9)
    {
      uint64_t v12 = v9 - (void)v5;
      uint64_t v13 = v12 >> 2;
      if ((unint64_t)(v12 >> 2) <= 1) {
        uint64_t v13 = 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14 >> 61) {
        sub_1CB833614();
      }
      uint64_t v15 = operator new(8 * v14);
      void *v15 = *(void *)v7;
      uint64_t v10 = (uint64_t)(v15 + 1);
      a1[20] = v15;
      a1[21] = v15 + 1;
      a1[22] = &v15[v14];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(void *)uint64_t v5 = *(void *)v7;
      uint64_t v10 = (uint64_t)(v5 + 8);
    }
    a1[21] = v10;
    uint64_t v16 = a1[20];
    std::string::size_type v37 = (uint64_t *)a1[32];
    sub_1CB838DCC(v16, v10, &v37, (v10 - v16) >> 3);
    uint64_t v17 = a1[24];
    if (v7 + 16 == v17)
    {
      uint64_t v18 = v7;
    }
    else
    {
      uint64_t v18 = v7;
      do
      {
        uint64_t v19 = *(void *)(v18 + 16);
        v18 += 16;
        *(void *)uint64_t v7 = v19;
        *(_DWORD *)(v7 + 8) = *(_DWORD *)(v7 + 24);
        uint64_t v20 = v7 + 32;
        uint64_t v7 = v18;
      }
      while (v20 != v17);
    }
    a1[24] = v18;
    uint64_t v5 = (char *)a1[20];
    int64_t v4 = (char *)a1[21];
  }
  std::string::size_type v37 = (uint64_t *)a1[32];
  if (v4 - v5 >= 9)
  {
    uint64_t v35 = v4;
    uint64_t v36 = a2;
    uint64_t v21 = 0;
    uint64_t v22 = (v4 - v5) >> 3;
    BOOL v33 = (BOOL)v5;
    uint64_t v34 = *(void *)v5;
    uint64_t v23 = (uint64_t *)v5;
    do
    {
      uint64_t v24 = &v23[v21];
      uint64_t v27 = v24[1];
      uint64_t v25 = v24 + 1;
      uint64_t v26 = v27;
      uint64_t v28 = (2 * v21) | 1;
      uint64_t v29 = 2 * v21 + 2;
      if (v29 < v22)
      {
        uint64_t v30 = v25[1];
        if (sub_1CB838BCC(*v37, v26, v30))
        {
          uint64_t v26 = v30;
          ++v25;
          uint64_t v28 = v29;
        }
      }
      *uint64_t v23 = v26;
      uint64_t v23 = v25;
      uint64_t v21 = v28;
    }
    while (v28 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
    uint64_t v31 = (uint64_t *)(v35 - 8);
    if (v25 == (uint64_t *)(v35 - 8))
    {
      *uint64_t v25 = v34;
    }
    else
    {
      *uint64_t v25 = *v31;
      *uint64_t v31 = v34;
      sub_1CB838DCC(v33, (uint64_t)(v25 + 1), &v37, ((uint64_t)v25 - v33 + 8) >> 3);
    }
    a2 = v36;
  }
  uint64_t v32 = a1[21];
  uint64_t result = *(void *)(v32 - 8);
  a1[21] = v32 - 8;
  *a2 = 0;
  return result;
}

void sub_1CB8379F4(void *a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(*(void *)(a2 + 8) + 16) + 16) & 0x20) == 0)
  {
    a1[3] = a2;
    uint64_t v4 = a1[23];
    uint64_t v3 = a1[24];
    while (v4 != v3)
    {
      unsigned int v5 = *(_DWORD *)(v4 + 8);
      unsigned int v6 = *(unsigned __int16 *)(a1[3] + 226);
      BOOL v7 = v5 >= v6;
      unsigned int v8 = v5 - v6;
      if (v7)
      {
        *(_DWORD *)(v4 + 8) = v8;
        v4 += 16;
      }
      else
      {
        uint64_t v10 = (void *)a1[21];
        unint64_t v9 = a1[22];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = (void *)a1[20];
          uint64_t v13 = v10 - v12;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            abort();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            if (v16 >> 61) {
              sub_1CB833614();
            }
            uint64_t v17 = (char *)operator new(8 * v16);
          }
          else
          {
            uint64_t v17 = 0;
          }
          uint64_t v18 = &v17[8 * v13];
          *(void *)uint64_t v18 = *(void *)v4;
          uint64_t v11 = v18 + 8;
          if (v10 != v12)
          {
            do
            {
              uint64_t v19 = *--v10;
              *((void *)v18 - 1) = v19;
              v18 -= 8;
            }
            while (v10 != v12);
            uint64_t v10 = (void *)a1[20];
          }
          a1[20] = v18;
          a1[21] = v11;
          a1[22] = &v17[8 * v16];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *uint64_t v10 = *(void *)v4;
          uint64_t v11 = v10 + 1;
        }
        a1[21] = v11;
        uint64_t v20 = a1[24];
        uint64_t v3 = v4;
        if (v4 + 16 != v20)
        {
          uint64_t v21 = v4;
          uint64_t v3 = v4;
          do
          {
            uint64_t v22 = *(void *)(v3 + 16);
            v3 += 16;
            *(void *)uint64_t v21 = v22;
            *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 24);
            uint64_t v23 = v21 + 32;
            uint64_t v21 = v3;
          }
          while (v23 != v20);
        }
        a1[24] = v3;
      }
    }
  }
}

void sub_1CB837B78(void *a1, uint64_t a2)
{
  int v4 = *(unsigned __int16 *)(a2 + 226);
  if (*(_WORD *)(a2 + 226))
  {
    unsigned int v6 = (char *)a1[24];
    unint64_t v5 = a1[25];
    if ((unint64_t)v6 < v5)
    {
      *(void *)unsigned int v6 = a2;
      *((_DWORD *)v6 + 2) = v4;
      BOOL v7 = v6 + 16;
LABEL_28:
      a1[24] = v7;
      return;
    }
    uint64_t v11 = (unsigned char *)a1[23];
    uint64_t v12 = (v6 - v11) >> 4;
    unint64_t v13 = v12 + 1;
    if (!((unint64_t)(v12 + 1) >> 60))
    {
      uint64_t v14 = v5 - (void)v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (!(v15 >> 60))
      {
        unint64_t v16 = (char *)operator new(16 * v15);
        uint64_t v17 = &v16[16 * v12];
        *(void *)uint64_t v17 = a2;
        *((_DWORD *)v17 + 2) = v4;
        BOOL v7 = v17 + 16;
        if (v6 == v11)
        {
          uint64_t v18 = &v16[16 * v12];
        }
        else
        {
          do
          {
            uint64_t v18 = v17 - 16;
            *((_OWORD *)v17 - 1) = *((_OWORD *)v6 - 1);
            v6 -= 16;
            v17 -= 16;
          }
          while (v6 != v11);
        }
        a1[23] = v18;
        a1[24] = v7;
        a1[25] = &v16[16 * v15];
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_28;
      }
LABEL_38:
      sub_1CB833614();
    }
LABEL_37:
    abort();
  }
  unint64_t v9 = (void *)a1[21];
  unint64_t v8 = a1[22];
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v19 = (void *)a1[20];
    uint64_t v20 = v9 - v19;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61) {
      goto LABEL_37;
    }
    uint64_t v22 = v8 - (void)v19;
    if (v22 >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        goto LABEL_38;
      }
      uint64_t v24 = (char *)operator new(8 * v23);
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = &v24[8 * v20];
    *(void *)uint64_t v25 = a2;
    uint64_t v10 = (uint64_t)(v25 + 8);
    if (v9 != v19)
    {
      do
      {
        uint64_t v26 = *--v9;
        *((void *)v25 - 1) = v26;
        v25 -= 8;
      }
      while (v9 != v19);
      unint64_t v9 = (void *)a1[20];
    }
    a1[20] = v25;
    a1[21] = v10;
    a1[22] = &v24[8 * v23];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *unint64_t v9 = a2;
    uint64_t v10 = (uint64_t)(v9 + 1);
  }
  a1[21] = v10;
  uint64_t v27 = a1[20];
  uint64_t v28 = (uint64_t *)a1[32];
  sub_1CB838DCC(v27, v10, &v28, (v10 - v27) >> 3);
}

_DWORD *sub_1CB837D60(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_DWORD *sub_1CB837DF4(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(8 * v4, (std::align_val_t)4uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 8 * v5;
      do
      {
        *uint64_t result = -1;
        result += 2;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CB837E88(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v7 = (char *)*((void *)v4 - 9);
        v4 -= 72;
        uint64_t v6 = v7;
        if (v4 + 16 != v7) {
          free(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CB837F14(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    unint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      BOOL v7 = (_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 < v6)
      {
        if (*(_DWORD *)(a1 + 12) < v6)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 8);
          memmove(*(void **)a1, v4, 8 * v8);
          uint64_t v10 = v13;
        }
        else
        {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v7;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 8 * v10), (const void *)(*(void *)a2 + 8 * v10), *(void *)a2 + 8 * v11 - (*(void *)a2 + 8 * v10));
        }
      }
      else if (v6)
      {
        memmove(*(void **)a1, v4, 8 * v6);
      }
      *(_DWORD *)(a1 + 8) = v6;
    }
    else
    {
      uint64_t v12 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v12);
        unint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      BOOL v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *BOOL v7 = 0;
  }
  return a1;
}

void sub_1CB83803C(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a3 + 40);
  uint64_t v7 = *a2;
  if (v6)
  {
    uint64_t v8 = *(void **)(a3 + 32);
    uint64_t v9 = 16 * v6;
    while (1)
    {
      unint64_t v10 = *(unsigned int *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 192);
      if (v10 != -1 && ((*(void *)(v7 + ((v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      v8 += 2;
      v9 -= 16;
      if (!v9) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    unint64_t v11 = *(unsigned int *)(a3 + 192);
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = 1 << v11;
    if (((1 << v11) & *(void *)(v7 + 8 * (v11 >> 6))) == 0)
    {
      unint64_t v15 = (void *)a1[8];
      unint64_t v14 = a1[9];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = (void *)a1[7];
        uint64_t v18 = v15 - v17;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          abort();
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 61) {
            sub_1CB833614();
          }
          uint64_t v22 = (char *)operator new(8 * v21);
        }
        else
        {
          uint64_t v22 = 0;
        }
        unint64_t v23 = &v22[8 * v18];
        *(void *)unint64_t v23 = a3;
        unint64_t v16 = v23 + 8;
        if (v15 != v17)
        {
          do
          {
            uint64_t v24 = *--v15;
            *((void *)v23 - 1) = v24;
            v23 -= 8;
          }
          while (v15 != v17);
          unint64_t v15 = (void *)a1[7];
        }
        a1[7] = v23;
        a1[8] = v16;
        a1[9] = &v22[8 * v21];
        if (v15)
        {
          operator delete(v15);
          unint64_t v25 = *(unsigned int *)(a3 + 192);
          uint64_t v13 = 1 << v25;
          unint64_t v12 = v25 >> 6;
        }
      }
      else
      {
        void *v15 = a3;
        unint64_t v16 = v15 + 1;
      }
      a1[8] = v16;
      *(void *)(*a2 + 8 * v12) |= v13;
      uint64_t v26 = *(unsigned int *)(a3 + 120);
      if (v26)
      {
        uint64_t v27 = *(void **)(a3 + 112);
        uint64_t v28 = 16 * v26;
        do
        {
          if (*(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 192) != -1) {
            sub_1CB83803C(a1, a2);
          }
          v27 += 2;
          v28 -= 16;
        }
        while (v28);
      }
    }
  }
}

uint64_t sub_1CB838200(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    abort();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v3;
  }
  unint64_t v21 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_1CB833614();
    }
    uint64_t v7 = (char *)operator new(72 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[72 * v2];
  __p = v7;
  uint64_t v18 = v8;
  uint64_t v20 = &v7[72 * v6];
  *(void *)uint64_t v8 = v8 + 16;
  *((void *)v8 + 1) = 0x600000000;
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  if (v8 != (char *)a2 && v9 != 0)
  {
    if (v9 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v8 + 16, *(const void **)a2, 8 * *(unsigned int *)(a2 + 8));
    *((_DWORD *)v8 + 2) = v9;
  }
  *(_DWORD *)&v7[72 * v2 + 64] = *(_DWORD *)(a2 + 64);
  unint64_t v19 = v8 + 72;
  sub_1CD3C82C8(a1, &__p);
  uint64_t v11 = a1[1];
  unint64_t v12 = v18;
LABEL_19:
  uint64_t v13 = v19;
  while (v13 != v12)
  {
    unint64_t v15 = (char *)*((void *)v13 - 9);
    v13 -= 72;
    unint64_t v14 = v15;
    unint64_t v19 = v13;
    if (v15 != v13 + 16)
    {
      free(v14);
      goto LABEL_19;
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

uint64_t sub_1CB8383C0(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unsigned int v52 = a2;
  uint64_t v4 = a2 >> 6;
  uint64_t v5 = *(void *)(*(void *)a3 + 8 * v4);
  if ((v5 & (1 << a2)) == 0) {
    return 0;
  }
  *(void *)(*(void *)a3 + 8 * v4) = v5 & ~(1 << a2);
  uint64_t v8 = *(void *)(a1[1] + 48) + 272 * a2;
  unint64_t v10 = (uint64_t *)a1[55];
  unint64_t v9 = a1[56];
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v13 = (void *)a1[54];
    uint64_t v14 = v10 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v16 = v9 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        sub_1CB833614();
      }
      uint64_t v18 = (char *)operator new(8 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    unint64_t v19 = (uint64_t *)&v18[8 * v14];
    *unint64_t v19 = v8;
    uint64_t v11 = v19 + 1;
    if (v10 != v13)
    {
      do
      {
        uint64_t v20 = *--v10;
        *--unint64_t v19 = v20;
      }
      while (v10 != v13);
      unint64_t v10 = (uint64_t *)a1[54];
    }
    a1[54] = v19;
    a1[55] = v11;
    a1[56] = &v18[8 * v17];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *unint64_t v10 = v8;
    uint64_t v11 = v10 + 1;
  }
  unsigned int v21 = 0;
  a1[55] = v11;
  __dst = v55;
  uint64_t v54 = 0x600000000;
  if (&__dst != (void **)a3)
  {
    unsigned int v22 = *(_DWORD *)(a3 + 8);
    if (v22)
    {
      if (v22 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v55, *(const void **)a3, 8 * *(unsigned int *)(a3 + 8));
      LODWORD(v54) = v22;
      unsigned int v21 = v22;
    }
  }
  int v23 = *(_DWORD *)(a3 + 64);
  int v56 = v23;
  uint64_t v24 = a1[45] + 72 * a2;
  unsigned int v25 = *(_DWORD *)(v24 + 8);
  if (v25 >= v21) {
    uint64_t v26 = v21;
  }
  else {
    uint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = *(uint64_t **)v24;
    uint64_t v28 = __dst;
    uint64_t v29 = v26;
    do
    {
      uint64_t v30 = *v27++;
      *v28++ &= v30;
      --v29;
    }
    while (v29);
  }
  if (v21 > v25)
  {
    uint64_t v31 = __dst;
    do
    {
      v31[v26] = 0;
      LODWORD(v26) = v26 + 1;
    }
    while (v21 != v26);
  }
  unsigned int v32 = 0;
  int v33 = -1;
LABEL_35:
  uint64_t v34 = (v23 - 1) >> 6;
  uint64_t v35 = __dst;
  while (1)
  {
    unsigned int v36 = (v33 + 1) >> 6;
    if (v33 + 1 == v23 || v36 > v34) {
      break;
    }
    uint64_t v38 = 0;
    unint64_t v39 = (((_BYTE)v33 + 1) & 0x3F) != 0 ? ~(0xFFFFFFFFFFFFFFFFLL >> -((v33 + 1) & 0x3F)) : -1;
    int v40 = -64 * v36;
    uint64_t v41 = v34 - v36;
    while (1)
    {
      uint64_t v42 = v38 ? -1 : v39;
      unint64_t v43 = v41 == v38 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v23 : -1;
      unint64_t v44 = v42 & v43 & *((void *)__dst + v36 + v38);
      if (v44) {
        break;
      }
      ++v38;
      v40 -= 64;
      if (v41 + 1 == v38) {
        goto LABEL_58;
      }
    }
    int v45 = __clz(__rbit64(v44));
    int v33 = v45 - v40;
    if ((v45 - v40 + 1) < 2) {
      break;
    }
    unsigned int v46 = v36 + v38;
    uint64_t v47 = a1[11];
    uint64_t v48 = *(void *)(v47 + 8 * v46);
    uint64_t v49 = 1 << v45;
    if ((v48 & (1 << v45)) != 0)
    {
      *(void *)(v47 + 8 * v46) = v48 & ~v49;
      v35[v46] &= ~v49;
      int v33 = v45 - v40;
      unsigned int v50 = sub_1CB8383C0(a1, (v45 - v40), a3);
      if (v50 > v32) {
        unsigned int v32 = v50;
      }
      int v23 = v56;
      goto LABEL_35;
    }
  }
LABEL_58:
  uint64_t v12 = v32 + 1;
  sub_1CB8387D8((uint64_t)(a1 + 51), &v52)[1] = v12;
  if (__dst != v55) {
    free(__dst);
  }
  return v12;
}

_DWORD *sub_1CB83872C(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      unint64_t v6 = *(_DWORD **)result;
      uint64_t v7 = 8 * v2;
      do
      {
        *unint64_t v6 = -1;
        v6 += 2;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 4);
    return sub_1CB837DF4(v1, v5);
  }
  return result;
}

_DWORD *sub_1CB8387D8(uint64_t a1, _DWORD *a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
  {
    uint64_t v12 = a2;
    uint64_t v13 = 0;
LABEL_14:
    int v5 = sub_1CB83889C(a1, (uint64_t)v12, v12, v13);
    *(void *)int v5 = *v12;
    return v5;
  }
  int v3 = v2 - 1;
  unsigned int v4 = (37 * *a2) & (v2 - 1);
  int v5 = (_DWORD *)(*(void *)a1 + 8 * v4);
  int v6 = *v5;
  if (*a2 != *v5)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v6 != -1)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v6 == -2;
      }
      if (v10) {
        uint64_t v8 = v5;
      }
      unsigned int v11 = v4 + v9++;
      unsigned int v4 = v11 & v3;
      int v5 = (_DWORD *)(*(void *)a1 + 8 * (v11 & v3));
      int v6 = *v5;
      if (*a2 == *v5) {
        return v5;
      }
    }
    uint64_t v12 = a2;
    if (v8) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v5;
    }
    goto LABEL_14;
  }
  return v5;
}

_DWORD *sub_1CB83889C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_3;
    }
    sub_1CB838A28(a1, v7);
    int v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      int v16 = v15 - 1;
      unsigned int v17 = (37 * *a3) & v16;
      a4 = (_DWORD *)(*(void *)a1 + 8 * v17);
      int v18 = *a4;
      if (*a3 == *a4) {
        goto LABEL_3;
      }
      uint64_t v13 = 0;
      int v19 = 1;
      while (v18 != -1)
      {
        if (v13) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -2;
        }
        if (v20) {
          uint64_t v13 = a4;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a4 = (_DWORD *)(*(void *)a1 + 8 * v17);
        int v18 = *a4;
        if (*a3 == *a4) {
          goto LABEL_3;
        }
      }
      goto LABEL_10;
    }
LABEL_24:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1CB838A28(a1, 2 * v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (!v9) {
    goto LABEL_24;
  }
  int v10 = v9 - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(void *)a1 + 8 * v11);
  int v12 = *a4;
  if (*a3 == *a4) {
    goto LABEL_3;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  while (v12 != -1)
  {
    if (v13) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v12 == -2;
    }
    if (v22) {
      uint64_t v13 = a4;
    }
    unsigned int v23 = v11 + v14++;
    unsigned int v11 = v23 & v10;
    a4 = (_DWORD *)(*(void *)a1 + 8 * v11);
    int v12 = *a4;
    if (*a3 == *a4) {
      goto LABEL_3;
    }
  }
LABEL_10:
  if (v13) {
    a4 = v13;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *sub_1CB838A28(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CB838AF4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CB838AF4(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(_DWORD **)result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    unint64_t v6 = *(_DWORD **)result;
    do
    {
      *unint64_t v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    int v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v8 = *(_DWORD *)(result + 16) - 1;
      unsigned int v9 = v8 & (37 * v7);
      uint64_t v10 = &v3[2 * v9];
      int v11 = *v10;
      if (v7 != *v10)
      {
        int v12 = 0;
        int v13 = 1;
        while (v11 != -1)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v11 == -2;
          }
          if (v14) {
            int v12 = v10;
          }
          unsigned int v15 = v9 + v13++;
          unsigned int v9 = v15 & v8;
          uint64_t v10 = &v3[2 * (v15 & v8)];
          int v11 = *v10;
          if (v7 == *v10) {
            goto LABEL_13;
          }
        }
        if (v12) {
          uint64_t v10 = v12;
        }
      }
LABEL_13:
      *uint64_t v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

BOOL sub_1CB838BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 192);
  float v4 = *(float *)(a1 + 4 * v3);
  uint64_t v5 = *(unsigned int *)(a3 + 192);
  float v6 = *(float *)(a1 + 4 * v5);
  if (v4 != v6) {
    return v6 > v4;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(v8 + 16);
  unsigned int v10 = *(unsigned __int8 *)(v9 + 4);
  int v11 = -v10;
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v13 = *(unsigned int *)(v8 + 40);
  if ((*(unsigned char *)(v9 + 8) & 2) != 0)
  {
    if (v13 == v10) {
      goto LABEL_10;
    }
    unsigned int v14 = *(unsigned __int8 *)(v9 + 4);
    do
    {
      int v39 = *(_DWORD *)(v12 + 32 * v10);
      if ((v39 & 0x10000FF) != 0x1000000) {
        break;
      }
      v14 += (v39 & 0x2000000) == 0;
      if (v13 - 1 == v10) {
        break;
      }
      ++v10;
    }
    while ((v39 & 0x2000000) == 0);
  }
  else
  {
    unsigned int v14 = *(unsigned __int8 *)(v9 + 4);
  }
  if (v14 != v13)
  {
    unsigned int v15 = (unsigned __int8 *)(v12 + 32 * v14);
    uint64_t v16 = 32 * v13 - 32 * v14;
    do
    {
      int v17 = *v15;
      v15 += 32;
      if (!v17) {
        ++v11;
      }
      v16 -= 32;
    }
    while (v16);
  }
LABEL_10:
  uint64_t v18 = *(void *)(a3 + 8);
  uint64_t v19 = *(void *)(v18 + 16);
  unsigned int v20 = *(unsigned __int8 *)(v19 + 4);
  int v21 = -v20;
  uint64_t v22 = *(void *)(v18 + 32);
  uint64_t v23 = *(unsigned int *)(v18 + 40);
  if ((*(unsigned char *)(v19 + 8) & 2) == 0)
  {
    unsigned int v24 = *(unsigned __int8 *)(v19 + 4);
    goto LABEL_12;
  }
  if (v23 != v20)
  {
    unsigned int v24 = *(unsigned __int8 *)(v19 + 4);
    do
    {
      int v40 = *(_DWORD *)(v22 + 32 * v20);
      if ((v40 & 0x10000FF) != 0x1000000) {
        break;
      }
      v24 += (v40 & 0x2000000) == 0;
      if (v23 - 1 == v20) {
        break;
      }
      ++v20;
    }
    while ((v40 & 0x2000000) == 0);
LABEL_12:
    if (v24 != v23)
    {
      unsigned int v25 = (unsigned __int8 *)(v22 + 32 * v24);
      uint64_t v26 = 32 * v23 - 32 * v24;
      do
      {
        int v27 = *v25;
        v25 += 32;
        if (!v27) {
          ++v21;
        }
        v26 -= 32;
      }
      while (v26);
    }
  }
  if (v11 != v21) {
    return v21 < v11;
  }
  uint64_t v28 = *(unsigned int *)(a2 + 40);
  if (v28)
  {
    unsigned int v29 = 0;
    uint64_t v30 = *(uint64_t **)(a2 + 32);
    uint64_t v31 = 16 * v28;
    do
    {
      uint64_t v32 = *v30;
      v30 += 2;
      if (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 212) == 1) {
        ++v29;
      }
      v31 -= 16;
    }
    while (v31);
  }
  else
  {
    unsigned int v29 = 0;
  }
  uint64_t v33 = *(unsigned int *)(a3 + 40);
  if (v33)
  {
    unsigned int v34 = 0;
    uint64_t v35 = *(uint64_t **)(a3 + 32);
    uint64_t v36 = 16 * v33;
    do
    {
      uint64_t v37 = *v35;
      v35 += 2;
      if (*(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 212) == 1) {
        ++v34;
      }
      v36 -= 16;
    }
    while (v36);
  }
  else
  {
    unsigned int v34 = 0;
  }
  BOOL v38 = v3 < v5;
  if (v29 == v34) {
    return v38;
  }
  else {
    return v29 < v34;
  }
}

BOOL sub_1CB838DCC(BOOL result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = *v8;
    int v11 = (uint64_t *)(a2 - 8);
    uint64_t v10 = *(void *)(a2 - 8);
    uint64_t result = sub_1CB838BCC(**a3, *v8, v10);
    if (result)
    {
      do
      {
        uint64_t v12 = v8;
        *int v11 = v9;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t v9 = *v8;
        uint64_t result = sub_1CB838BCC(**a3, *v8, v10);
        int v11 = v12;
      }
      while (result);
      *uint64_t v12 = v10;
    }
  }
  return result;
}

uint64_t sub_1CB838E7C()
{
  qword_1EBCBE810 = 0;
  *(void *)algn_1EBCBE818 = "balanced";
  qword_1EBCBE820 = 8;
  unk_1EBCBE828 = "Balanced scheduler for AGX1.";
  qword_1EBCBE830 = 28;
  unk_1EBCBE838 = sub_1CD3C7E1C;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCBE810);

  return __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCBE810, &dword_1CB82C000);
}

BOOL sub_1CB838F0C(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  LOBYTE(v8) = a4;
  unsigned __int8 v9 = a3;
  unsigned __int8 v17 = a2;
  unsigned __int8 v16 = a3;
  int v14 = a4;
  unsigned int v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 == 28) {
      goto LABEL_16;
    }
    if (a3 != 49)
    {
      if (a3 != 76) {
        return 1;
      }
      goto LABEL_16;
    }
    return !sub_1CB8392EC(&v15, &v17, &v16, &v14, a7);
  }
  switch(a3)
  {
    case 2u:
      unsigned __int8 v16 = 4;
      if ((a5 & 2) != 0)
      {
        int v8 = 1;
      }
      else if (a5)
      {
        int v8 = 2;
      }
      else
      {
        int v8 = 3;
      }
      int v14 = v8;
      unsigned __int8 v9 = 4;
      break;
    case 4u:
    case 9u:
      break;
    case 5u:
    case 0xAu:
      goto LABEL_16;
    case 6u:
      return !sub_1CB8392EC(&v15, &v17, &v16, &v14, a7);
    default:
      return 1;
  }
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD91A442, 0x200uLL);
  if (v12) {
    goto LABEL_17;
  }
  if (v9 == 6) {
    return !sub_1CB8392EC(&v15, &v17, &v16, &v14, a7);
  }
  if (v9 != 5) {
    return 1;
  }
LABEL_16:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD91A842, 0x100uLL);
  if (v12)
  {
LABEL_17:
    sub_1CB839378(*(void *)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6) {
    return !sub_1CB8392EC(&v15, &v17, &v16, &v14, a7);
  }
  return 1;
}

uint64_t sub_1CB8390A8(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  LOBYTE(v8) = a4;
  unsigned __int8 v19 = a2;
  unsigned __int8 v11 = a3;
  unsigned __int8 v18 = a3;
  int v16 = a4;
  unsigned int v17 = a1;
  switch(a3)
  {
    case 2u:
      unsigned __int8 v18 = 4;
      if ((a5 & 2) != 0)
      {
        int v8 = 1;
      }
      else if (a5)
      {
        int v8 = 2;
      }
      else
      {
        int v8 = 3;
      }
      int v16 = v8;
      unsigned __int8 v11 = 4;
      goto LABEL_17;
    case 3u:
    case 7u:
    case 8u:
      return 1;
    case 4u:
    case 9u:
LABEL_17:
      uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD91AC40, 0x200uLL);
      if (v12) {
        goto LABEL_18;
      }
      if (v11 == 6) {
        goto LABEL_12;
      }
      if (v11 != 5) {
        return 1;
      }
LABEL_7:
      uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD91B040, 0xFFuLL);
      if (v12)
      {
LABEL_18:
        sub_1CB839378(*(void *)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v11 << 16) | (4 * (v8 & 0x3F)));
      }
      else
      {
        if (v11 > 0x31u) {
          return 1;
        }
        uint64_t v13 = 1 << v11;
        uint64_t v14 = 0x2010000000040;
LABEL_11:
        if ((v13 & v14) == 0) {
          return 1;
        }
LABEL_12:
        if (!sub_1CB8392EC(&v17, &v19, &v18, &v16, a7)) {
          return 1;
        }
      }
      return 0;
    case 5u:
    case 0xAu:
      goto LABEL_7;
    case 6u:
      goto LABEL_12;
    default:
      if (a3 - 28 > 0x30) {
        return 1;
      }
      if (((1 << (a3 - 28)) & 0x1000000000401) != 0) {
        goto LABEL_7;
      }
      uint64_t v13 = 1 << (a3 - 28);
      uint64_t v14 = 2101248;
      goto LABEL_11;
  }
}

uint64_t sub_1CB839270(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    while (((*(_DWORD *)(*(void *)(a1 + 48) + ((*(unsigned __int16 *)(a2 + 2 * v3) >> 3) & 0x1FFCLL)) >> *(_WORD *)(a2 + 2 * v3)) & 1) != 0)
    {
      uint64_t v3 = ++v4;
      if (a3 <= v4) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    unsigned int v4 = a3;
  }
  if (a3 == v4) {
    return 0;
  }
  uint64_t v5 = *(unsigned __int16 *)(a2 + 2 * v4);
  llvm::CCState::MarkAllocated((unsigned __int16 *)a1, *(unsigned __int16 *)(a2 + 2 * v4));
  return v5;
}

BOOL sub_1CB8392EC(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10 = sub_1CB839270(a5, (uint64_t)&unk_1CD91AA42, 0xFFuLL);
  int v11 = v10;
  if (v10) {
    sub_1CB839378(*(void *)(a5 + 24), *a1 | (unint64_t)(v10 << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
  }
  return v11 != 0;
}

uint64_t sub_1CB839378(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = *(void *)result + 12 * v3;
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

void *sub_1CB8393F0(void *a1)
{
  int v2 = (void *)a1[32];
  if (v2 != a1 + 34) {
    free(v2);
  }
  unsigned int v3 = (void *)a1[24];
  if (v3 != a1 + 26) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[16];
  if (v4 != a1 + 18) {
    free(v4);
  }
  uint64_t v5 = (void *)a1[6];
  if (v5 != a1 + 8) {
    free(v5);
  }
  return a1;
}

uint64_t sub_1CB839470(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, unsigned int a6, uint64_t a7)
{
  return sub_1CB839480(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1CB839480(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v9 = a3;
  uint64_t result = 1;
  if (a3 <= 0x1Bu)
  {
    switch(a3)
    {
      case 2u:
        unsigned __int8 v9 = 4;
        if ((a5 & 2) != 0) {
          a4 = 1;
        }
        else {
          a4 = a5 & 1 ^ 3;
        }
        goto LABEL_6;
      case 4u:
      case 9u:
LABEL_6:
        uint64_t v13 = sub_1CB839270(a7, (uint64_t)&unk_1CD91B23E, 0x200uLL);
        if (v13) {
          goto LABEL_17;
        }
        if (v9 == 6) {
          goto LABEL_16;
        }
        if (v9 != 5) {
          return 1;
        }
        goto LABEL_13;
      case 5u:
      case 0xAu:
        goto LABEL_13;
      case 6u:
        goto LABEL_16;
      default:
        return result;
    }
  }
  if (a3 != 28)
  {
    if (a3 == 49)
    {
LABEL_16:
      uint64_t v13 = sub_1CB839270(a7, (uint64_t)&unk_1CD91B83E, 0xFFuLL);
      if (v13) {
        goto LABEL_17;
      }
      return 1;
    }
    if (a3 != 76) {
      return result;
    }
  }
LABEL_13:
  uint64_t v13 = sub_1CB839270(a7, (uint64_t)&unk_1CD91B63E, 0x100uLL);
  if (v13)
  {
LABEL_17:
    sub_1CB839378(*(void *)(a7 + 24), a1 | (unint64_t)(v13 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (a4 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6) {
    goto LABEL_16;
  }
  return 1;
}

uint64_t sub_1CB8395F8(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  LOBYTE(v8) = a4;
  unsigned __int8 v19 = a2;
  unsigned __int8 v11 = a3;
  unsigned __int8 v18 = a3;
  int v16 = a4;
  unsigned int v17 = a1;
  switch(a3)
  {
    case 2u:
      unsigned __int8 v18 = 4;
      if ((a5 & 2) != 0)
      {
        int v8 = 1;
      }
      else if (a5)
      {
        int v8 = 2;
      }
      else
      {
        int v8 = 3;
      }
      int v16 = v8;
      unsigned __int8 v11 = 4;
      goto LABEL_17;
    case 3u:
    case 7u:
    case 8u:
      return 1;
    case 4u:
    case 9u:
LABEL_17:
      uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD91BA3C, 0x200uLL);
      if (v12) {
        goto LABEL_18;
      }
      if (v11 == 6) {
        goto LABEL_12;
      }
      if (v11 != 5) {
        return 1;
      }
LABEL_7:
      uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD91BE3C, 0x100uLL);
      if (v12)
      {
LABEL_18:
        sub_1CB839378(*(void *)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v11 << 16) | (4 * (v8 & 0x3F)));
      }
      else
      {
        if (v11 > 0x31u) {
          return 1;
        }
        uint64_t v13 = 1 << v11;
        uint64_t v14 = 0x2010000000040;
LABEL_11:
        if ((v13 & v14) == 0) {
          return 1;
        }
LABEL_12:
        if (!sub_1CB8392EC(&v17, &v19, &v18, &v16, a7)) {
          return 1;
        }
      }
      return 0;
    case 5u:
    case 0xAu:
      goto LABEL_7;
    case 6u:
      goto LABEL_12;
    default:
      if (a3 - 28 > 0x30) {
        return 1;
      }
      if (((1 << (a3 - 28)) & 0x1000000000401) != 0) {
        goto LABEL_7;
      }
      uint64_t v13 = 1 << (a3 - 28);
      uint64_t v14 = 2101248;
      goto LABEL_11;
  }
}

void sub_1CB8397C0(uint64_t a1)
{
}

void sub_1CB839864(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB83989C()
{
  return "AGX1 Specific CodeGen Prepare";
}

uint64_t sub_1CB8398AC()
{
  return 0;
}

uint64_t sub_1CB8398B4()
{
  return 0;
}

void sub_1CB8398BC(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CB83998C(uint64_t a1, uint64_t a2)
{
  v1393[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_4:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::ScalarEvolutionWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  uint64_t v10 = *(uint64_t **)(a1 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_9:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_9;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  v1333 = (void **)(v4 + 272);
  uint64_t v14 = (const llvm::Instruction *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::DominatorTreeWrapperPass::ID)+ 32);
  unsigned int v15 = *(uint64_t **)(a1 + 8);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v16 == v17)
  {
LABEL_14:
    uint64_t v18 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v16 != &llvm::LoopInfoWrapperPass::ID)
    {
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_14;
      }
    }
    uint64_t v18 = *(void *)(v16 + 8);
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::LoopInfoWrapperPass::ID);
  unsigned int v20 = *(uint64_t **)(a1 + 8);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  if (v21 == v22)
  {
LABEL_19:
    uint64_t v23 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v21 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v21 += 16;
      if (v21 == v22) {
        goto LABEL_19;
      }
    }
    uint64_t v23 = *(void *)(v21 + 8);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v23 + 96))(v23, &llvm::FunctionGroupInfoWrapperPass::ID);
  uint64_t v25 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v24 + 32) + 24))(*(void *)(v24 + 32), a2);
  v1344 = v1348;
  v1345 = v1348;
  uint64_t v1346 = 8;
  int v1347 = 0;
  int v26 = sub_1CD1016B0(a2, v1333, v14);
  int v27 = v26 | sub_1CD102C90(a2);
  int v28 = v27 | sub_1CD105194(a2, v14);
  int v29 = v28 | sub_1CD105760(a2, *(unsigned char *)(a1 + 28), 0, 0, 0, 0);
  if (!*(unsigned char *)(a1 + 28)) {
    v29 |= sub_1CD106680(a2, v25, (uint64_t)v14, (uint64_t *)(v19 + 32));
  }
  uint64_t v1329 = a2;
  uint64_t v1330 = v9;
  uint64_t v30 = *(void *)(a2 + 80);
  uint64_t v1334 = a2 + 72;
  uint64_t v1331 = a1;
  int v1338 = v29;
  if (v30 != a2 + 72)
  {
    uint64_t v1328 = v25;
    while (1)
    {
      uint64_t v31 = v30 - 24;
      uint64_t v1335 = v30;
      if (!v30) {
        uint64_t v31 = 0;
      }
      uint64_t v32 = (void *)(v31 + 40);
      uint64_t v33 = *(void **)(v31 + 48);
      if (v33 != (void *)(v31 + 40)) {
        break;
      }
LABEL_2181:
      uint64_t v30 = *(void *)(v1335 + 8);
      if (v30 == v1334) {
        goto LABEL_2182;
      }
    }
    uint64_t v1332 = v31;
    v1337 = (void *)(v31 + 40);
    while (1)
    {
      v1341 = (void *)v33[1];
      unsigned int v34 = (llvm::ValueAsMetadata *)(v33 - 3);
      if (v33) {
        uint64_t v35 = (unsigned __int8 *)(v33 - 3);
      }
      else {
        uint64_t v35 = 0;
      }
      int v36 = v35[16];
      if (v33 && v36 == 85)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *((void *)v35 - 12);
        if (v38 && *(unsigned char *)(v38 + 16) == 82) {
          uint64_t v37 = **(void **)(v38 - 64);
        }
        int v39 = *(uint64_t **)v35;
        unsigned int v40 = *(unsigned __int8 *)(*(void *)v35 + 8);
        BOOL v41 = v40 > 6 || v40 == 0;
        BOOL v42 = v41 || v37 == 0;
        if (v42 || *(unsigned char *)(v37 + 8)) {
          goto LABEL_84;
        }
        v1372 = 0;
        v1371 = 0;
        v1371 = (llvm::Value *)*((void *)v35 - 8);
        v1372 = (llvm::Value *)*((void *)v35 - 4);
        if (sub_1CB8436A4((uint64_t)&v1371))
        {
          unint64_t v43 = 0;
          uint64_t v44 = **(void **)v35;
          v1376 = v1378;
          uint64_t v1377 = 0x200000000;
          uint64_t v1383 = v44;
          v1384 = &v1392;
          v1385 = v1393;
          uint64_t v1386 = 0;
          int v1387 = 0;
          __int16 v1388 = 512;
          char v1389 = 7;
          v1381 = 0;
          v1382 = 0;
          uint64_t v1390 = 0;
          uint64_t v1391 = 0;
          v1392 = &unk_1F2616E88;
          v1393[0] = &unk_1F2617008;
          v1381 = (uint64_t *)*((void *)v35 + 5);
          v1382 = v35 + 24;
          int v45 = (void *)*((void *)v35 + 6);
          v1368[0] = v45;
          if (v45)
          {
            llvm::MetadataTracking::track((uint64_t)v1368, (unsigned __int8 *)v45, 2);
            unint64_t v43 = v1368[0];
          }
          sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v43);
          if (!v1368[0]) {
            goto LABEL_49;
          }
          int v352 = *(unsigned __int8 *)v1368[0];
          if ((v352 - 4) > 0x1E)
          {
            if ((v352 - 3) >= 0xFFFFFFFE) {
              v411 = v1368[0];
            }
            else {
              v411 = 0;
            }
            if ((v352 - 3) < 0xFFFFFFFE)
            {
              if (v352 == 3) {
                *((void *)v1368[0] + 1) = 0;
              }
              goto LABEL_49;
            }
            unint64_t v354 = (unint64_t)v411 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1368[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1368[0] + 3)) {
              goto LABEL_49;
            }
            uint64_t v353 = *((void *)v1368[0] + 2);
            if ((v353 & 4) == 0) {
              goto LABEL_49;
            }
            unint64_t v354 = v353 & 0xFFFFFFFFFFFFFFF8;
            if (!v354) {
              goto LABEL_49;
            }
          }
          v1349 = v1368;
          sub_1CC5FA668(v354 + 16, &v1349);
LABEL_49:
          unsigned int v46 = (llvm::Value *)*((void *)v35 - 12);
          v1353[0] = 257;
          Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1376, v46, v1371, v1372, (const llvm::Twine *)&v1349, 0);
          v1353[0] = 257;
          uint64_t v48 = sub_1CB843944((uint64_t)&v1376, (uint64_t)Select, v39, (uint64_t)&v1349);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v35, v48, (llvm::Value *)1);
          uint64_t v49 = v1345;
          uint64_t v50 = HIDWORD(v1346);
          if (v1345 != v1344)
          {
            unsigned int v54 = v1346;
            goto LABEL_164;
          }
          if (HIDWORD(v1346))
          {
            char v51 = 0;
            uint64_t v52 = 8 * HIDWORD(v1346);
            unsigned int v53 = (unsigned __int8 **)v1345;
            while (*v53 != v35)
            {
              if (*v53 == (unsigned __int8 *)-2) {
                char v51 = v53;
              }
              ++v53;
              v52 -= 8;
              if (!v52)
              {
                if (v51) {
                  goto LABEL_1561;
                }
                goto LABEL_57;
              }
            }
            goto LABEL_1585;
          }
LABEL_57:
          unsigned int v54 = v1346;
          if (HIDWORD(v1346) >= v1346)
          {
LABEL_164:
            if (3 * v54 <= 4 * (HIDWORD(v1346) - v1347))
            {
              if (v54 >= 0x40) {
                v54 *= 2;
              }
              else {
                unsigned int v54 = 128;
              }
            }
            else if (v54 - HIDWORD(v1346) >= v54 >> 3)
            {
              goto LABEL_166;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v54);
            unsigned int v54 = v1346;
            uint64_t v49 = v1345;
LABEL_166:
            unsigned int v115 = v54 - 1;
            unsigned int v116 = (v54 - 1) & ((v35 >> 4) ^ (v35 >> 9));
            uint64_t v88 = (unsigned __int8 **)&v49[v116];
            unsigned int v117 = *v88;
            if (*v88 != (unsigned __int8 *)-1)
            {
              v90 = 0;
              int v118 = 1;
              while (v117 != v35)
              {
                if (v90) {
                  BOOL v119 = 0;
                }
                else {
                  BOOL v119 = v117 == (unsigned __int8 *)-2;
                }
                if (v119) {
                  v90 = v88;
                }
                unsigned int v120 = v116 + v118++;
                unsigned int v116 = v120 & v115;
                uint64_t v88 = (unsigned __int8 **)&v49[v120 & v115];
                unsigned int v117 = *v88;
                if (*v88 == (unsigned __int8 *)-1) {
                  goto LABEL_1578;
                }
              }
              goto LABEL_1585;
            }
            goto LABEL_1577;
          }
LABEL_110:
          HIDWORD(v1346) = v50 + 1;
          v49[v50] = v35;
          goto LABEL_1585;
        }
        int v36 = v35[16];
      }
      if (v36 == 82) {
        unint64_t v55 = v35;
      }
      else {
        unint64_t v55 = 0;
      }
      if (v33 && v36 == 82)
      {
        if (!*(unsigned char *)(**((void **)v55 - 8) + 8)) {
          goto LABEL_84;
        }
        v1372 = 0;
        v1371 = 0;
        v1371 = (llvm::Value *)*((void *)v55 - 8);
        v1372 = (llvm::Value *)*((void *)v55 - 4);
        if (sub_1CB8436A4((uint64_t)&v1371))
        {
          int v56 = 0;
          uint64_t v57 = **(void **)v35;
          v1376 = v1378;
          uint64_t v1377 = 0x200000000;
          uint64_t v1383 = v57;
          v1384 = &v1392;
          v1385 = v1393;
          uint64_t v1386 = 0;
          int v1387 = 0;
          __int16 v1388 = 512;
          char v1389 = 7;
          v1381 = 0;
          v1382 = 0;
          uint64_t v1390 = 0;
          uint64_t v1391 = 0;
          v1392 = &unk_1F2616E88;
          v1393[0] = &unk_1F2617008;
          v1381 = (uint64_t *)*((void *)v35 + 5);
          v1382 = v35 + 24;
          unint64_t v58 = (void *)*((void *)v35 + 6);
          v1368[0] = v58;
          if (v58)
          {
            llvm::MetadataTracking::track((uint64_t)v1368, (unsigned __int8 *)v58, 2);
            int v56 = v1368[0];
          }
          sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v56);
          if (!v1368[0])
          {
LABEL_70:
            uint64_t v59 = *((_WORD *)v55 + 9) & 0x3F;
            v1353[0] = 257;
            FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v1376, v59, (uint64_t)v1371, (uint64_t)v1372, (uint64_t)&v1349, 0, 0);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v35, FCmpHelper, (llvm::Value *)1);
            uint64_t v49 = v1345;
            uint64_t v50 = HIDWORD(v1346);
            if (v1345 == v1344)
            {
              if (HIDWORD(v1346))
              {
                char v51 = 0;
                uint64_t v61 = 8 * HIDWORD(v1346);
                v62 = (unsigned __int8 **)v1345;
                while (*v62 != v35)
                {
                  if (*v62 == (unsigned __int8 *)-2) {
                    char v51 = v62;
                  }
                  ++v62;
                  v61 -= 8;
                  if (!v61)
                  {
                    if (v51) {
                      goto LABEL_1561;
                    }
                    goto LABEL_78;
                  }
                }
                goto LABEL_1585;
              }
LABEL_78:
              unsigned int v63 = v1346;
              if (HIDWORD(v1346) < v1346) {
                goto LABEL_110;
              }
            }
            else
            {
              unsigned int v63 = v1346;
            }
            if (3 * v63 <= 4 * (HIDWORD(v1346) - v1347))
            {
              if (v63 >= 0x40) {
                v63 *= 2;
              }
              else {
                unsigned int v63 = 128;
              }
            }
            else if (v63 - HIDWORD(v1346) >= v63 >> 3)
            {
              goto LABEL_128;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v63);
            unsigned int v63 = v1346;
            uint64_t v49 = v1345;
LABEL_128:
            unsigned int v94 = v63 - 1;
            unsigned int v95 = (v63 - 1) & ((v35 >> 4) ^ (v35 >> 9));
            uint64_t v88 = (unsigned __int8 **)&v49[v95];
            v96 = *v88;
            if (*v88 != (unsigned __int8 *)-1)
            {
              v90 = 0;
              int v97 = 1;
              while (v96 != v35)
              {
                if (v90) {
                  BOOL v98 = 0;
                }
                else {
                  BOOL v98 = v96 == (unsigned __int8 *)-2;
                }
                if (v98) {
                  v90 = v88;
                }
                unsigned int v99 = v95 + v97++;
                unsigned int v95 = v99 & v94;
                uint64_t v88 = (unsigned __int8 **)&v49[v99 & v94];
                v96 = *v88;
                if (*v88 == (unsigned __int8 *)-1) {
                  goto LABEL_1578;
                }
              }
              goto LABEL_1585;
            }
            goto LABEL_1577;
          }
          int v300 = *(unsigned __int8 *)v1368[0];
          if ((v300 - 4) > 0x1E)
          {
            if ((v300 - 3) >= 0xFFFFFFFE) {
              v355 = v1368[0];
            }
            else {
              v355 = 0;
            }
            if ((v300 - 3) < 0xFFFFFFFE)
            {
              if (v300 == 3) {
                *((void *)v1368[0] + 1) = 0;
              }
              goto LABEL_70;
            }
            unint64_t v302 = (unint64_t)v355 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1368[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1368[0] + 3)) {
              goto LABEL_70;
            }
            uint64_t v301 = *((void *)v1368[0] + 2);
            if ((v301 & 4) == 0) {
              goto LABEL_70;
            }
            unint64_t v302 = v301 & 0xFFFFFFFFFFFFFFF8;
            if (!v302) {
              goto LABEL_70;
            }
          }
          v1349 = v1368;
          sub_1CC5FA668(v302 + 16, &v1349);
          goto LABEL_70;
        }
        int v36 = v35[16];
      }
      if (v36 == 52)
      {
        int v64 = *((_DWORD *)v35 + 5);
        if ((v64 & 0x40000000) != 0) {
          v65 = (uint64_t *)*((void *)v35 - 1);
        }
        else {
          v65 = (uint64_t *)&v35[-32 * (v64 & 0x7FFFFFF)];
        }
        uint64_t v75 = 0;
        uint64_t v76 = *v65;
        uint64_t v77 = v65[4];
        uint64_t v78 = **(void **)v35;
        v1376 = v1378;
        uint64_t v1377 = 0x200000000;
        uint64_t v1383 = v78;
        v1384 = &v1392;
        v1385 = v1393;
        uint64_t v1386 = 0;
        int v1387 = 0;
        __int16 v1388 = 512;
        char v1389 = 7;
        v1381 = 0;
        v1382 = 0;
        uint64_t v1390 = 0;
        uint64_t v1391 = 0;
        v1392 = &unk_1F2616E88;
        v1393[0] = &unk_1F2617008;
        v1381 = (uint64_t *)*((void *)v35 + 5);
        v1382 = v35 + 24;
        int v79 = (llvm::Value *)*((void *)v35 + 6);
        v1371 = v79;
        if (v79)
        {
          llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v79, 2);
          uint64_t v75 = v1371;
        }
        sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v75);
        if (!v1371)
        {
LABEL_101:
          v1353[0] = 257;
          uint64_t v80 = sub_1CB843AD0((uint64_t)&v1376, v76, v77, (uint64_t)&v1349, 0);
          v1353[0] = 257;
          uint64_t v81 = sub_1CB843C88((uint64_t)&v1376, v80, v77, (uint64_t)&v1349, 0);
          v1353[0] = 257;
          unsigned int v82 = (llvm::Value *)sub_1CB843E40((uint64_t)&v1376, v76, v81, (uint64_t)&v1349, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v35, v82, (llvm::Value *)1);
          uint64_t v49 = v1345;
          uint64_t v50 = HIDWORD(v1346);
          if (v1345 == v1344)
          {
            if (HIDWORD(v1346))
            {
              char v51 = 0;
              uint64_t v83 = 8 * HIDWORD(v1346);
              v84 = (unsigned __int8 **)v1345;
              while (*v84 != v35)
              {
                if (*v84 == (unsigned __int8 *)-2) {
                  char v51 = v84;
                }
                ++v84;
                v83 -= 8;
                if (!v83)
                {
                  if (v51) {
                    goto LABEL_1561;
                  }
                  goto LABEL_109;
                }
              }
              goto LABEL_1585;
            }
LABEL_109:
            unsigned int v85 = v1346;
            if (HIDWORD(v1346) < v1346) {
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v85 = v1346;
          }
          if (3 * v85 <= 4 * (HIDWORD(v1346) - v1347))
          {
            if (v85 >= 0x40) {
              v85 *= 2;
            }
            else {
              unsigned int v85 = 128;
            }
          }
          else if (v85 - HIDWORD(v1346) >= v85 >> 3)
          {
            goto LABEL_114;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v85);
          unsigned int v85 = v1346;
          uint64_t v49 = v1345;
LABEL_114:
          unsigned int v86 = v85 - 1;
          unsigned int v87 = (v85 - 1) & ((v35 >> 4) ^ (v35 >> 9));
          uint64_t v88 = (unsigned __int8 **)&v49[v87];
          uint64_t v89 = *v88;
          if (*v88 != (unsigned __int8 *)-1)
          {
            v90 = 0;
            int v91 = 1;
            while (v89 != v35)
            {
              if (v90) {
                BOOL v92 = 0;
              }
              else {
                BOOL v92 = v89 == (unsigned __int8 *)-2;
              }
              if (v92) {
                v90 = v88;
              }
              unsigned int v93 = v87 + v91++;
              unsigned int v87 = v93 & v86;
              uint64_t v88 = (unsigned __int8 **)&v49[v93 & v86];
              uint64_t v89 = *v88;
              if (*v88 == (unsigned __int8 *)-1) {
                goto LABEL_1578;
              }
            }
            goto LABEL_1585;
          }
          goto LABEL_1577;
        }
        int v112 = *(unsigned __int8 *)v1371;
        if ((v112 - 4) > 0x1E)
        {
          if ((v112 - 3) >= 0xFFFFFFFE) {
            v315 = v1371;
          }
          else {
            v315 = 0;
          }
          if ((v112 - 3) < 0xFFFFFFFE)
          {
            if (v112 == 3) {
              *((void *)v1371 + 1) = 0;
            }
            goto LABEL_101;
          }
          unint64_t v114 = (unint64_t)v315 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
            goto LABEL_101;
          }
          uint64_t v113 = *((void *)v1371 + 2);
          if ((v113 & 4) == 0) {
            goto LABEL_101;
          }
          unint64_t v114 = v113 & 0xFFFFFFFFFFFFFFF8;
          if (!v114) {
            goto LABEL_101;
          }
        }
        v1349 = &v1371;
        sub_1CC5FA668(v114 + 16, &v1349);
        goto LABEL_101;
      }
LABEL_84:
      v1376 = 0;
      v1349 = &v1376;
      if (!sub_1CC04C34C((void **)&v1349, (uint64_t)v35)) {
        goto LABEL_186;
      }
      unsigned int v67 = v1376;
      if (!v1376) {
        goto LABEL_186;
      }
      uint64_t v68 = *((void *)v1376 + 1);
      if (!v68 || *(void *)(v68 + 8)) {
        goto LABEL_186;
      }
      uint64_t v69 = 0;
      uint64_t v70 = **(void **)v35;
      v1376 = v1378;
      uint64_t v1377 = 0x200000000;
      uint64_t v1383 = v70;
      v1384 = &v1392;
      v1385 = v1393;
      uint64_t v1386 = 0;
      int v1387 = 0;
      __int16 v1388 = 512;
      char v1389 = 7;
      v1381 = 0;
      v1382 = 0;
      uint64_t v1390 = 0;
      uint64_t v1391 = 0;
      v1392 = &unk_1F2616E88;
      v1393[0] = &unk_1F2617008;
      v1381 = (uint64_t *)*((void *)v35 + 5);
      v1382 = v35 + 24;
      v71 = (llvm::Value *)*((void *)v35 + 6);
      v1371 = v71;
      if (v71)
      {
        llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v71, 2);
        uint64_t v69 = v1371;
      }
      sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v69);
      if (v1371)
      {
        int v297 = *(unsigned __int8 *)v1371;
        if ((v297 - 4) > 0x1E)
        {
          if ((v297 - 3) >= 0xFFFFFFFE) {
            v351 = v1371;
          }
          else {
            v351 = 0;
          }
          if ((v297 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v299 = (unint64_t)v351 + 8;
LABEL_519:
            v1349 = &v1371;
            sub_1CC5FA668(v299 + 16, &v1349);
            goto LABEL_91;
          }
          if (v297 == 3) {
            *((void *)v1371 + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v1371 + 1) & 0x7F) == 2 || *((_DWORD *)v1371 + 3))
        {
          uint64_t v298 = *((void *)v1371 + 2);
          if ((v298 & 4) != 0)
          {
            unint64_t v299 = v298 & 0xFFFFFFFFFFFFFFF8;
            if (v299) {
              goto LABEL_519;
            }
          }
        }
      }
LABEL_91:
      int v72 = *((unsigned __int8 *)v67 + 16);
      switch(v72)
      {
        case 5:
          int v102 = *((unsigned __int16 *)v67 + 9);
          if (v102 != 21)
          {
            if (v102 != 18) {
              goto LABEL_183;
            }
            uint64_t v103 = (uint64_t *)&v67[-8 * (v67[5] & 0x7FFFFFF)];
            uint64_t v73 = *v103;
            if (!*v103) {
              goto LABEL_183;
            }
            uint64_t v74 = v103[4];
            if (!v74) {
              goto LABEL_183;
            }
            goto LABEL_146;
          }
          uint64_t v121 = (uint64_t *)&v67[-8 * (v67[5] & 0x7FFFFFF)];
          uint64_t v100 = *v121;
          if (!*v121 || (uint64_t v101 = v121[4]) == 0)
          {
LABEL_181:
            int v122 = 1;
            goto LABEL_184;
          }
          break;
        case 49:
          uint64_t v100 = *((void *)v67 - 8);
          if (!v100) {
            goto LABEL_181;
          }
          uint64_t v101 = *((void *)v67 - 4);
          if (!v101) {
            goto LABEL_181;
          }
          break;
        case 46:
          uint64_t v73 = *((void *)v67 - 8);
          if (!v73) {
            goto LABEL_183;
          }
          uint64_t v74 = *((void *)v67 - 4);
          if (!v74) {
            goto LABEL_183;
          }
LABEL_146:
          v1353[0] = 257;
          int v104 = sub_1CB843FF8((uint64_t)&v1376, v73, (uint64_t)&v1349, 0);
          v1353[0] = 257;
          uint64_t v105 = (llvm::Value *)sub_1CB843C88((uint64_t)&v1376, (uint64_t)v104, v74, (uint64_t)&v1349, 0);
          if (!v105) {
            goto LABEL_183;
          }
          goto LABEL_147;
        default:
          goto LABEL_183;
      }
      if (*(unsigned char *)(v100 + 16) == 17 && (sub_1CB844168(v100, 1.0) & 1) != 0) {
        goto LABEL_181;
      }
      v1353[0] = 257;
      v123 = sub_1CB843FF8((uint64_t)&v1376, v100, (uint64_t)&v1349, 0);
      v1353[0] = 257;
      uint64_t v105 = (llvm::Value *)sub_1CB843AD0((uint64_t)&v1376, (uint64_t)v123, v101, (uint64_t)&v1349, 0);
      if (!v105)
      {
LABEL_183:
        int v122 = 1;
        goto LABEL_184;
      }
LABEL_147:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v35, v105, (llvm::Value *)1);
      unsigned int v106 = v1345;
      uint64_t v107 = HIDWORD(v1346);
      if (v1345 != v1344)
      {
        unsigned int v111 = v1346;
        goto LABEL_419;
      }
      if (!HIDWORD(v1346))
      {
LABEL_155:
        unsigned int v111 = v1346;
        if (HIDWORD(v1346) < v1346)
        {
          ++HIDWORD(v1346);
          *(void *)&v1345[8 * v107] = v35;
          goto LABEL_481;
        }
LABEL_419:
        if (3 * v111 <= 4 * (HIDWORD(v1346) - v1347))
        {
          if (v111 >= 0x40) {
            v111 *= 2;
          }
          else {
            unsigned int v111 = 128;
          }
        }
        else if (v111 - HIDWORD(v1346) >= v111 >> 3)
        {
          goto LABEL_421;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v111);
        unsigned int v111 = v1346;
        unsigned int v106 = v1345;
LABEL_421:
        unsigned int v303 = v111 - 1;
        unsigned int v304 = (v111 - 1) & ((v35 >> 4) ^ (v35 >> 9));
        float v305 = &v106[8 * v304];
        float v306 = *(unsigned __int8 **)v305;
        if (*(void *)v305 == -1)
        {
          uint64_t v307 = 0;
LABEL_474:
          if (v307) {
            v335 = v307;
          }
          else {
            v335 = (unsigned __int8 **)v305;
          }
          if (*v335 != v35)
          {
            if (*v335 == (unsigned __int8 *)-2) {
              --v1347;
            }
            else {
              ++HIDWORD(v1346);
            }
            *v335 = v35;
          }
        }
        else
        {
          uint64_t v307 = 0;
          int v308 = 1;
          while (v306 != v35)
          {
            if (v307) {
              BOOL v309 = 0;
            }
            else {
              BOOL v309 = v306 == (unsigned __int8 *)-2;
            }
            if (v309) {
              uint64_t v307 = (unsigned __int8 **)v305;
            }
            unsigned int v310 = v304 + v308++;
            unsigned int v304 = v310 & v303;
            float v305 = &v106[8 * (v310 & v303)];
            float v306 = *(unsigned __int8 **)v305;
            if (*(void *)v305 == -1) {
              goto LABEL_474;
            }
          }
        }
        goto LABEL_481;
      }
      uint64_t v108 = 0;
      uint64_t v109 = 8 * HIDWORD(v1346);
      int v110 = (unsigned __int8 **)v1345;
      while (*v110 != v35)
      {
        if (*v110 == (unsigned __int8 *)-2) {
          uint64_t v108 = v110;
        }
        ++v110;
        v109 -= 8;
        if (!v109)
        {
          if (!v108) {
            goto LABEL_155;
          }
          *uint64_t v108 = v35;
          --v1347;
          break;
        }
      }
LABEL_481:
      unsigned int v336 = v1345;
      uint64_t v337 = HIDWORD(v1346);
      unsigned int v338 = v1346;
      if (v1345 != v1344) {
        goto LABEL_491;
      }
      if (HIDWORD(v1346))
      {
        v339 = 0;
        uint64_t v340 = 8 * HIDWORD(v1346);
        v341 = v1345;
        while ((_DWORD *)*v341 != v67)
        {
          if (*v341 == -2) {
            v339 = v341;
          }
          ++v341;
          v340 -= 8;
          if (!v340)
          {
            if (!v339) {
              goto LABEL_489;
            }
            int v122 = 0;
            void *v339 = v67;
            --v1347;
            goto LABEL_513;
          }
        }
LABEL_512:
        int v122 = 0;
        goto LABEL_513;
      }
LABEL_489:
      if (v1346 <= HIDWORD(v1346))
      {
LABEL_491:
        if (3 * (int)v1346 <= (4 * (HIDWORD(v1346) - v1347)))
        {
          if (v1346 >= 0x40) {
            unsigned int v338 = 2 * v1346;
          }
          else {
            unsigned int v338 = 128;
          }
        }
        else if ((int)v1346 - HIDWORD(v1346) >= v1346 >> 3)
        {
          goto LABEL_493;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v338);
        unsigned int v338 = v1346;
        unsigned int v336 = v1345;
LABEL_493:
        unsigned int v342 = v338 - 1;
        unsigned int v343 = (v338 - 1) & ((v67 >> 4) ^ (v67 >> 9));
        v344 = &v336[8 * v343];
        v345 = *(_DWORD **)v344;
        if (*(void *)v344 == -1)
        {
          v346 = 0;
LABEL_505:
          if (v346) {
            v350 = v346;
          }
          else {
            v350 = (void **)v344;
          }
          if (*v350 != v67)
          {
            if (*v350 == (void *)-2) {
              --v1347;
            }
            else {
              ++HIDWORD(v1346);
            }
            int v122 = 0;
            *v350 = v67;
            goto LABEL_513;
          }
        }
        else
        {
          v346 = 0;
          int v347 = 1;
          while (v345 != v67)
          {
            if (v346) {
              BOOL v348 = 0;
            }
            else {
              BOOL v348 = v345 == (_DWORD *)-2;
            }
            if (v348) {
              v346 = (void **)v344;
            }
            unsigned int v349 = v343 + v347++;
            unsigned int v343 = v349 & v342;
            v344 = &v336[8 * (v349 & v342)];
            v345 = *(_DWORD **)v344;
            if (*(void *)v344 == -1) {
              goto LABEL_505;
            }
          }
        }
        goto LABEL_512;
      }
      int v122 = 0;
      ++HIDWORD(v1346);
      *(void *)&v1345[8 * v337] = v67;
LABEL_513:
      int v1338 = 1;
LABEL_184:
      if (v1376 == v1378)
      {
        if (!v122) {
          goto LABEL_1589;
        }
      }
      else
      {
        free(v1376);
        if (!v122) {
          goto LABEL_1589;
        }
      }
LABEL_186:
      int v124 = v35[16];
      if (v124 == 60) {
        uint64_t v125 = (llvm::ValueAsMetadata *)v35;
      }
      else {
        uint64_t v125 = 0;
      }
      if (v33 && v124 == 60)
      {
        v126 = *(llvm::PointerType **)v125;
        if ((*(_DWORD *)(*(void *)v125 + 8) & 0xFE) == 0x12
          && *(_DWORD *)(*((void *)v126 + 3) + 8) == 2061
          && *((_DWORD *)v126 + 8) == 3)
        {
          int v127 = 0;
          uint64_t v128 = **(void **)v35;
          v1376 = v1378;
          uint64_t v1377 = 0x200000000;
          uint64_t v1383 = v128;
          v1384 = &v1392;
          v1385 = v1393;
          uint64_t v1386 = 0;
          int v1387 = 0;
          __int16 v1388 = 512;
          char v1389 = 7;
          v1381 = 0;
          v1382 = 0;
          uint64_t v1390 = 0;
          uint64_t v1391 = 0;
          v1392 = &unk_1F2616E88;
          v1393[0] = &unk_1F2617008;
          v1381 = (uint64_t *)*((void *)v35 + 5);
          v1382 = v35 + 24;
          unsigned int v129 = (llvm::Value *)*((void *)v35 + 6);
          v1371 = v129;
          if (v129)
          {
            llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v129, 2);
            int v127 = v1371;
          }
          sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v127);
          if (!v1371)
          {
LABEL_197:
            unsigned int v130 = v126;
            if ((*((_DWORD *)v126 + 2) & 0xFE) == 0x12) {
              unsigned int v130 = (llvm::PointerType *)**((void **)v126 + 2);
            }
            uint64_t v131 = **((void **)v125 - 4);
            unsigned int v132 = *(_DWORD *)(v131 + 8);
            if ((v132 & 0xFE) == 0x12) {
              unsigned int v132 = *(_DWORD *)(**(void **)(v131 + 16) + 8);
            }
            unint64_t v133 = llvm::PointerType::get(v130, (llvm::Type *)(v132 >> 8));
            uint64_t v134 = (unsigned __int8 *)*((void *)v125 - 4);
            __int16 v1375 = 257;
            if (*(void *)v134 != v133)
            {
              if (v134[16] <= 0x14u)
              {
                uint64_t v205 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1384 + 28))(v1384, 49, v134, v133);
                uint64_t v134 = (unsigned __int8 *)v205;
                if (v205)
                {
                  if (*(unsigned __int8 *)(v205 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(void *, uint64_t, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v205, &v1371, v1381, v1382);
                    if (v1377)
                    {
                      v1095 = (llvm::MDNode **)v1376;
                      v1096 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v134, *(_DWORD *)v1095, v1095[1]);
                        v1095 += 2;
                      }
                      while (v1095 != v1096);
                    }
                  }
                }
              }
              else
              {
                v1353[0] = 257;
                uint64_t v134 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v134, v133, (const char **)&v1349, 0);
                (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v134, &v1371, v1381, v1382);
                if (v1377)
                {
                  unsigned int v135 = (llvm::MDNode **)v1376;
                  uint64_t v136 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v134, *(_DWORD *)v135, v135[1]);
                    v135 += 2;
                  }
                  while (v135 != v136);
                }
              }
            }
            v1353[0] = 257;
            unsigned int v206 = sub_1CB844364((uint64_t *)&v1376, (uint64_t)v130, (const llvm::APInt *)v134, 2, (uint64_t)&v1349);
            uint64_t v207 = **(llvm::Type ***)(*(void *)v206 + 16);
            __int16 v1375 = 257;
            char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1381[7] + 40) + 272), v207, 1);
            v209 = operator new(0x60uLL);
            v209[13] = v209[13] & 0x38000000 | 1;
            uint64_t v210 = (llvm::Instruction *)(v209 + 8);
            *(void *)v209 = 0;
            *((void *)v209 + 1) = 0;
            *((void *)v209 + 2) = 0;
            *((void *)v209 + 3) = v209 + 8;
            v1353[0] = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v209 + 8), (uint64_t)v207, (uint64_t)v206, (const char **)&v1349, 0, Alignment, 0);
            (*(void (**)(void *, llvm::Instruction *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v210, &v1371, v1381, v1382);
            if (v1377)
            {
              float v311 = (llvm::MDNode **)v1376;
              uint64_t v312 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
              do
              {
                llvm::Instruction::setMetadata(v210, *(_DWORD *)v311, v311[1]);
                v311 += 2;
              }
              while (v311 != v312);
            }
            llvm::FixedVectorType::get(v130, (llvm::Type *)2);
            uint64_t v212 = **((void **)v125 - 4);
            unsigned int v213 = *(_DWORD *)(v212 + 8);
            if ((v213 & 0xFE) == 0x12) {
              unsigned int v213 = *(_DWORD *)(**(void **)(v212 + 16) + 8);
            }
            unint64_t v214 = llvm::PointerType::get(v211, (llvm::Type *)(v213 >> 8));
            uint64_t v215 = (unsigned __int8 *)*((void *)v125 - 4);
            __int16 v1375 = 257;
            if (*(void *)v215 != v214)
            {
              if (v215[16] <= 0x14u)
              {
                uint64_t v215 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1384
                                           + 28))(v1384, 49, v215, v214);
                if (v215) {
                  BOOL v218 = v215[16] >= 0x1Cu;
                }
                else {
                  BOOL v218 = 0;
                }
                if (v218)
                {
                  (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v215, &v1371, v1381, v1382);
                  if (v1377)
                  {
                    v1093 = (llvm::MDNode **)v1376;
                    v1094 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v215, *(_DWORD *)v1093, v1093[1]);
                      v1093 += 2;
                    }
                    while (v1093 != v1094);
                  }
                }
              }
              else
              {
                v1353[0] = 257;
                uint64_t v215 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v215, v214, (const char **)&v1349, 0);
                (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v215, &v1371, v1381, v1382);
                if (v1377)
                {
                  v216 = (llvm::MDNode **)v1376;
                  uint64_t v217 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v215, *(_DWORD *)v216, v216[1]);
                    v216 += 2;
                  }
                  while (v216 != v217);
                }
              }
            }
            unint64_t v219 = **(llvm::Type ***)(*(void *)v215 + 16);
            __int16 v1375 = 257;
            char v220 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1381[7] + 40) + 272), v219, 1);
            signed int v221 = operator new(0x60uLL);
            v221[13] = v221[13] & 0x38000000 | 1;
            uint64_t v222 = (llvm::Instruction *)(v221 + 8);
            *(void *)signed int v221 = 0;
            *((void *)v221 + 1) = 0;
            *((void *)v221 + 2) = 0;
            *((void *)v221 + 3) = v221 + 8;
            v1353[0] = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v221 + 8), (uint64_t)v219, (uint64_t)v215, (const char **)&v1349, 0, v220, 0);
            (*(void (**)(void *, llvm::Instruction *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v222, &v1371, v1381, v1382);
            if (v1377)
            {
              uint64_t v313 = (llvm::MDNode **)v1376;
              v314 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
              do
              {
                llvm::Instruction::setMetadata(v222, *(_DWORD *)v313, v313[1]);
                v313 += 2;
              }
              while (v313 != v314);
            }
            uint64_t v223 = (llvm::ConstantInt *)(***(void ***)v35 + 1960);
            uint64_t v224 = (unsigned __int8 *)llvm::ConstantInt::get(v223, 0, 0);
            v1353[0] = 257;
            v225 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1376, (unsigned __int8 *)v222, v224, (uint64_t)&v1349);
            int v226 = (unsigned __int8 *)llvm::ConstantInt::get(v223, 1uLL, 0);
            v1353[0] = 257;
            unsigned int v227 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1376, (unsigned __int8 *)v222, v226, (uint64_t)&v1349);
            uint64_t v229 = (unsigned __int8 *)llvm::UndefValue::get(v126, v228);
            v1353[0] = 257;
            uint64_t v230 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1376, v229, v225, v224, (uint64_t)&v1349);
            v1353[0] = 257;
            unsigned int v231 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1376, v230, v227, v226, (uint64_t)&v1349);
            v232 = (unsigned __int8 *)llvm::ConstantInt::get(v223, 2uLL, 0);
            v1353[0] = 257;
            uint64_t v233 = sub_1CB84478C((uint64_t)&v1376, v231, (unsigned __int8 *)v210, v232, (uint64_t)&v1349);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v35, v233, (llvm::Value *)1);
            uint64_t v49 = v1345;
            uint64_t v50 = HIDWORD(v1346);
            if (v1345 == v1344)
            {
              uint64_t v32 = v1337;
              if (HIDWORD(v1346))
              {
                char v51 = 0;
                uint64_t v234 = 8 * HIDWORD(v1346);
                uint64_t v235 = (unsigned __int8 **)v1345;
                while (*v235 != v35)
                {
                  if (*v235 == (unsigned __int8 *)-2) {
                    char v51 = v235;
                  }
                  ++v235;
                  v234 -= 8;
                  if (!v234)
                  {
                    if (v51) {
                      goto LABEL_1561;
                    }
                    goto LABEL_336;
                  }
                }
                goto LABEL_1585;
              }
LABEL_336:
              unsigned int v236 = v1346;
              if (HIDWORD(v1346) < v1346) {
                goto LABEL_110;
              }
            }
            else
            {
              unsigned int v236 = v1346;
              uint64_t v32 = v1337;
            }
            if (3 * v236 <= 4 * (HIDWORD(v1346) - v1347))
            {
              if (v236 >= 0x40) {
                v236 *= 2;
              }
              else {
                unsigned int v236 = 128;
              }
            }
            else if (v236 - HIDWORD(v1346) >= v236 >> 3)
            {
              goto LABEL_381;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v236);
            unsigned int v236 = v1346;
            uint64_t v49 = v1345;
LABEL_381:
            unsigned int v285 = v236 - 1;
            unsigned int v286 = (v236 - 1) & ((v35 >> 4) ^ (v35 >> 9));
            uint64_t v88 = (unsigned __int8 **)&v49[v286];
            unint64_t v287 = *v88;
            if (*v88 != (unsigned __int8 *)-1)
            {
              v90 = 0;
              int v288 = 1;
              while (v287 != v35)
              {
                if (v90) {
                  BOOL v289 = 0;
                }
                else {
                  BOOL v289 = v287 == (unsigned __int8 *)-2;
                }
                if (v289) {
                  v90 = v88;
                }
                unsigned int v290 = v286 + v288++;
                unsigned int v286 = v290 & v285;
                uint64_t v88 = (unsigned __int8 **)&v49[v290 & v285];
                unint64_t v287 = *v88;
                if (*v88 == (unsigned __int8 *)-1) {
                  goto LABEL_1578;
                }
              }
              goto LABEL_1585;
            }
            goto LABEL_1577;
          }
          int v316 = *(unsigned __int8 *)v1371;
          if ((v316 - 4) > 0x1E)
          {
            if ((v316 - 3) >= 0xFFFFFFFE) {
              v368 = v1371;
            }
            else {
              v368 = 0;
            }
            if ((v316 - 3) < 0xFFFFFFFE)
            {
              if (v316 == 3) {
                *((void *)v1371 + 1) = 0;
              }
              goto LABEL_197;
            }
            unint64_t v318 = (unint64_t)v368 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
              goto LABEL_197;
            }
            uint64_t v317 = *((void *)v1371 + 2);
            if ((v317 & 4) == 0) {
              goto LABEL_197;
            }
            unint64_t v318 = v317 & 0xFFFFFFFFFFFFFFF8;
            if (!v318) {
              goto LABEL_197;
            }
          }
          v1349 = &v1371;
          sub_1CC5FA668(v318 + 16, &v1349);
          goto LABEL_197;
        }
        v137 = (llvm::Value *)*((void *)v125 - 4);
        int v138 = *(_DWORD *)(*(void *)v137 + 8);
        if ((v138 & 0xFE) == 0x12) {
          int v138 = *(_DWORD *)(**(void **)(*(void *)v137 + 16) + 8);
        }
        if ((v138 & 0xFFFFFF00) != 0x4000) {
          goto LABEL_273;
        }
        int v139 = *((unsigned __int8 *)v137 + 16);
        if (v139 == 77) {
          v140 = (uint64_t *)*((void *)v125 - 4);
        }
        else {
          v140 = 0;
        }
        if (v140)
        {
          uint64_t v141 = v140[1];
          if (v141)
          {
            if (!*(void *)(v141 + 8))
            {
              v137 = (llvm::Value *)*(v140 - 4);
              int v139 = *((unsigned __int8 *)v137 + 16);
            }
          }
        }
        if (v139 != 62)
        {
          v176 = (llvm::Instruction *)(v33 - 3);
          goto LABEL_258;
        }
        int v142 = *((_DWORD *)v137 + 5);
        uint64_t v143 = v142 & 0x7FFFFFF;
        if ((v142 & 0x7FFFFFFu) < 2) {
          goto LABEL_273;
        }
        int v144 = (char *)v137 - 32 * v143;
        uint64_t v145 = 1;
        uint64_t v146 = 0xFFFFFFFFLL;
        uint64_t v147 = -32 * v143;
        do
        {
          if (*(unsigned char *)(*(void *)((char *)v137 + v147 + 32) + 16) != 16)
          {
            BOOL v41 = v146 == 0xFFFFFFFFLL;
            uint64_t v146 = v145;
            if (!v41) {
              goto LABEL_273;
            }
          }
          v147 += 32;
          ++v145;
        }
        while (v147 != -32);
        if (v146 == 0xFFFFFFFFLL
          || (uint64_t v148 = *(void *)&v144[32 * v146]) == 0
          || *(unsigned char *)(v148 + 16) != 85
          || (uint64_t v149 = *(void *)(v148 + 8)) == 0
          || *(void *)(v149 + 8)
          || *(unsigned char *)(*(void *)(v148 - 64) + 16) != 16
          || *(unsigned char *)(*(void *)(v148 - 32) + 16) != 16)
        {
LABEL_273:
          int v124 = v35[16];
          uint64_t v32 = v1337;
          goto LABEL_274;
        }
        v150 = (llvm::Value *)llvm::Instruction::clone(v137);
        sub_1CC5C6C08((void *)(*((void *)v137 + 5) + 40), (uint64_t)v137 + 24, v150);
        uint64_t v151 = *(void *)(v148 - 64);
        v152 = (char *)v137 - 32 * (*((_DWORD *)v137 + 5) & 0x7FFFFFF);
        v153 = &v152[32 * v146];
        if (*(void *)v153)
        {
          **((void **)v153 + 2) = *((void *)v153 + 1);
          uint64_t v154 = *((void *)v153 + 1);
          if (v154) {
            *(void *)(v154 + 16) = *((void *)v153 + 2);
          }
        }
        *(void *)v153 = v151;
        if (v151)
        {
          uint64_t v157 = *(void *)(v151 + 8);
          unsigned int v155 = (char **)(v151 + 8);
          uint64_t v156 = v157;
          uint64_t v158 = &v152[32 * v146];
          *((void *)v158 + 1) = v157;
          if (v157) {
            *(void *)(v156 + 16) = v158 + 8;
          }
          *((void *)v158 + 2) = v155;
          *unsigned int v155 = v153;
        }
        uint64_t v159 = *(void *)(v148 - 32);
        int v160 = *((_DWORD *)v150 + 5);
        if ((v160 & 0x40000000) != 0) {
          uint64_t v161 = (_DWORD *)*((void *)v150 - 1);
        }
        else {
          uint64_t v161 = (_DWORD *)((char *)v150 - 32 * (v160 & 0x7FFFFFF));
        }
        unint64_t v162 = &v161[8 * v146];
        if (*(void *)v162)
        {
          **((void **)v162 + 2) = *((void *)v162 + 1);
          uint64_t v163 = *((void *)v162 + 1);
          if (v163) {
            *(void *)(v163 + 16) = *((void *)v162 + 2);
          }
        }
        *(void *)unint64_t v162 = v159;
        if (v159)
        {
          uint64_t v166 = *(void *)(v159 + 8);
          uint64_t v164 = (void *)(v159 + 8);
          uint64_t v165 = v166;
          unint64_t v167 = &v161[8 * v146];
          *((void *)v167 + 1) = v166;
          if (v166) {
            *(void *)(v165 + 16) = v167 + 2;
          }
          *((void *)v167 + 2) = v164;
          *uint64_t v164 = v162;
        }
        unint64_t v168 = 0;
        uint64_t v169 = **(void **)v125;
        v1376 = v1378;
        uint64_t v1377 = 0x200000000;
        uint64_t v1383 = v169;
        v1384 = &v1392;
        v1385 = v1393;
        uint64_t v1386 = 0;
        int v1387 = 0;
        __int16 v1388 = 512;
        char v1389 = 7;
        v1381 = 0;
        v1382 = 0;
        uint64_t v1390 = 0;
        uint64_t v1391 = 0;
        v1392 = &unk_1F2616E88;
        v1393[0] = &unk_1F2617008;
        v1381 = (uint64_t *)*((void *)v125 + 5);
        v1382 = (unsigned __int8 *)v125 + 24;
        uint64_t v170 = (llvm::Value *)*((void *)v125 + 6);
        v1371 = v170;
        if (v170)
        {
          llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v170, 2);
          unint64_t v168 = v1371;
        }
        sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v168);
        if (v1371)
        {
          int v658 = *(unsigned __int8 *)v1371;
          if ((v658 - 4) > 0x1E)
          {
            if ((v658 - 3) >= 0xFFFFFFFE) {
              v788 = v1371;
            }
            else {
              v788 = 0;
            }
            if ((v658 - 3) < 0xFFFFFFFE)
            {
              if (v658 == 3) {
                *((void *)v1371 + 1) = 0;
              }
              goto LABEL_250;
            }
            unint64_t v660 = (unint64_t)v788 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
              goto LABEL_250;
            }
            uint64_t v659 = *((void *)v1371 + 2);
            if ((v659 & 4) == 0) {
              goto LABEL_250;
            }
            unint64_t v660 = v659 & 0xFFFFFFFFFFFFFFF8;
            if (!v660) {
              goto LABEL_250;
            }
          }
          v1349 = &v1371;
          sub_1CC5FA668(v660 + 16, &v1349);
        }
LABEL_250:
        unsigned int v171 = *(llvm::Value **)(v148 - 96);
        v1353[0] = 257;
        uint64_t v172 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1376, v171, v137, v150, (const llvm::Twine *)&v1349, 0);
        v137 = v172;
        if (v140)
        {
          uint64_t v173 = *v140;
          __int16 v1375 = 257;
          if (*(void *)v172 != v173)
          {
            if (*((unsigned __int8 *)v172 + 16) <= 0x14u)
            {
              uint64_t v536 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v1384 + 28))(v1384, 49, v172, v173);
              v137 = (llvm::Value *)v536;
              if (v536)
              {
                if (*(unsigned __int8 *)(v536 + 16) >= 0x1Cu)
                {
                  (*(void (**)(void *, uint64_t, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v536, &v1371, v1381, v1382);
                  if (v1377)
                  {
                    v1103 = (llvm::MDNode **)v1376;
                    v1104 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                    do
                    {
                      llvm::Instruction::setMetadata(v137, *(_DWORD *)v1103, v1103[1]);
                      v1103 += 2;
                    }
                    while (v1103 != v1104);
                  }
                }
              }
            }
            else
            {
              v1353[0] = 257;
              v137 = llvm::CastInst::Create(49, (uint64_t)v172, v173, (const char **)&v1349, 0);
              (*(void (**)(void *, llvm::Value *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v137, &v1371, v1381, v1382);
              if (v1377)
              {
                v174 = (llvm::MDNode **)v1376;
                unsigned int v175 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                do
                {
                  llvm::Instruction::setMetadata(v137, *(_DWORD *)v174, v174[1]);
                  v174 += 2;
                }
                while (v174 != v175);
              }
            }
          }
          v140 = (uint64_t *)v137;
        }
        v537 = **(llvm::Type ***)(*(void *)v137 + 16);
        __int16 v1375 = 257;
        char v538 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1381[7] + 40) + 272), v537, 1);
        v539 = operator new(0x60uLL);
        v539[13] = v539[13] & 0x38000000 | 1;
        v176 = (llvm::Instruction *)(v539 + 8);
        *(void *)v539 = 0;
        *((void *)v539 + 1) = 0;
        *((void *)v539 + 2) = 0;
        *((void *)v539 + 3) = v539 + 8;
        v1353[0] = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v539 + 8), (uint64_t)v537, (uint64_t)v137, (const char **)&v1349, 0, v538, 0);
        (*(void (**)(void *, llvm::Instruction *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v176, &v1371, v1381, v1382);
        if (v1377)
        {
          v632 = (llvm::MDNode **)v1376;
          v633 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
          do
          {
            llvm::Instruction::setMetadata(v176, *(_DWORD *)v632, v632[1]);
            v632 += 2;
          }
          while (v632 != v633);
        }
        llvm::Value::doRAUW(v125, v176, (llvm::Value *)1);
        v540 = v1345;
        uint64_t v541 = HIDWORD(v1346);
        if (v1345 == v1344)
        {
          if (HIDWORD(v1346))
          {
            v542 = 0;
            uint64_t v543 = 8 * HIDWORD(v1346);
            v544 = (llvm::ValueAsMetadata **)v1345;
            while (*v544 != v125)
            {
              if (*v544 == (llvm::ValueAsMetadata *)-2) {
                v542 = v544;
              }
              ++v544;
              v543 -= 8;
              if (!v543)
              {
                if (!v542) {
                  goto LABEL_899;
                }
                *v542 = v125;
                --v1347;
                break;
              }
            }
LABEL_946:
            v559 = v1345;
            uint64_t v560 = HIDWORD(v1346);
            unsigned int v561 = v1346;
            if (v140)
            {
              if (v1345 == v1344)
              {
                if (HIDWORD(v1346))
                {
                  v562 = 0;
                  uint64_t v563 = 8 * HIDWORD(v1346);
                  v564 = (uint64_t **)v1345;
                  while (*v564 != v140)
                  {
                    if (*v564 == (uint64_t *)-2) {
                      v562 = v564;
                    }
                    ++v564;
                    v563 -= 8;
                    if (!v563)
                    {
                      if (!v562) {
                        goto LABEL_955;
                      }
                      *v562 = v140;
                      --v1347;
                      break;
                    }
                  }
LABEL_1065:
                  v611 = v1345;
                  uint64_t v612 = HIDWORD(v1346);
                  unsigned int v613 = v1346;
                  if (v1345 == v1344)
                  {
                    if (HIDWORD(v1346))
                    {
                      v614 = 0;
                      uint64_t v615 = 8 * HIDWORD(v1346);
                      v616 = v1345;
                      while (*v616 != v148)
                      {
                        if (*v616 == -2) {
                          v614 = v616;
                        }
                        ++v616;
                        v615 -= 8;
                        if (!v615)
                        {
                          if (!v614) {
                            goto LABEL_1073;
                          }
                          void *v614 = v148;
                          --v1347;
                          break;
                        }
                      }
LABEL_1096:
                      v137 = (llvm::Value *)*(v140 - 4);
LABEL_1097:
                      if (v1376 != v1378) {
                        free(v1376);
                      }
                      int v139 = *((unsigned __int8 *)v137 + 16);
                      int v1338 = 1;
LABEL_258:
                      if (v139 == 85)
                      {
                        uint64_t v177 = *((void *)v137 + 1);
                        if (v177)
                        {
                          if (!*(void *)(v177 + 8)
                            && sub_1CD0FF880(*((void *)v137 - 8), 0)
                            && sub_1CD0FF880(*((void *)v137 - 4), 0))
                          {
                            uint64_t v178 = 0;
                            uint64_t v179 = **(void **)v137;
                            v1376 = v1378;
                            uint64_t v1377 = 0x200000000;
                            uint64_t v1383 = v179;
                            v1384 = &v1392;
                            v1385 = v1393;
                            uint64_t v1386 = 0;
                            int v1387 = 0;
                            __int16 v1388 = 512;
                            char v1389 = 7;
                            v1381 = 0;
                            v1382 = 0;
                            uint64_t v1390 = 0;
                            uint64_t v1391 = 0;
                            v1392 = &unk_1F2616E88;
                            v1393[0] = &unk_1F2617008;
                            v1381 = (uint64_t *)*((void *)v137 + 5);
                            v1382 = (unsigned __int8 *)v137 + 24;
                            uint64_t v180 = (llvm::Value *)*((void *)v137 + 6);
                            v1371 = v180;
                            if (v180)
                            {
                              llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v180, 2);
                              uint64_t v178 = v1371;
                            }
                            sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v178);
                            if (!v1371)
                            {
LABEL_266:
                              v181 = (unsigned __int8 *)*((void *)v137 - 8);
                              v182 = (unsigned __int8 *)*((void *)v137 - 4);
                              if (v140)
                              {
                                uint64_t v183 = *v140;
                                __int16 v1375 = 257;
                                if (*(void *)v181 != v183)
                                {
                                  if (v181[16] <= 0x14u)
                                  {
                                    uint64_t v370 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1384
                                            + 28))(v1384, 49, v181, v183);
                                    v181 = (unsigned __int8 *)v370;
                                    if (v370)
                                    {
                                      if (*(unsigned __int8 *)(v370 + 16) >= 0x1Cu)
                                      {
                                        (*(void (**)(void *, uint64_t, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v370, &v1371, v1381, v1382);
                                        if (v1377)
                                        {
                                          v1101 = (llvm::MDNode **)v1376;
                                          v1102 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                                          do
                                          {
                                            llvm::Instruction::setMetadata((llvm::Instruction *)v181, *(_DWORD *)v1101, v1101[1]);
                                            v1101 += 2;
                                          }
                                          while (v1101 != v1102);
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    v1353[0] = 257;
                                    v181 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v181, v183, (const char **)&v1349, 0);
                                    (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v181, &v1371, v1381, v1382);
                                    if (v1377)
                                    {
                                      uint64_t v184 = (llvm::MDNode **)v1376;
                                      unint64_t v185 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                                      do
                                      {
                                        llvm::Instruction::setMetadata((llvm::Instruction *)v181, *(_DWORD *)v184, v184[1]);
                                        v184 += 2;
                                      }
                                      while (v184 != v185);
                                    }
                                  }
                                }
                                uint64_t v371 = *v140;
                                __int16 v1375 = 257;
                                if (*(void *)v182 != v371)
                                {
                                  if (v182[16] <= 0x14u)
                                  {
                                    v182 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1384
                                                               + 28))(v1384, 49, v182, v371);
                                    if (v182) {
                                      BOOL v374 = v182[16] >= 0x1Cu;
                                    }
                                    else {
                                      BOOL v374 = 0;
                                    }
                                    if (v374)
                                    {
                                      (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v182, &v1371, v1381, v1382);
                                      if (v1377)
                                      {
                                        v1105 = (llvm::MDNode **)v1376;
                                        v1106 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                                        do
                                        {
                                          llvm::Instruction::setMetadata((llvm::Instruction *)v182, *(_DWORD *)v1105, v1105[1]);
                                          v1105 += 2;
                                        }
                                        while (v1105 != v1106);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    v1353[0] = 257;
                                    v182 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v182, v371, (const char **)&v1349, 0);
                                    (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v182, &v1371, v1381, v1382);
                                    if (v1377)
                                    {
                                      v372 = (llvm::MDNode **)v1376;
                                      v373 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                                      do
                                      {
                                        llvm::Instruction::setMetadata((llvm::Instruction *)v182, *(_DWORD *)v372, v372[1]);
                                        v372 += 2;
                                      }
                                      while (v372 != v373);
                                    }
                                  }
                                }
                              }
                              v375 = v176;
                              v376 = **(llvm::Type ***)(*(void *)v181 + 16);
                              __int16 v1375 = 257;
                              char v377 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1381[7] + 40) + 272), v376, 1);
                              v378 = operator new(0x60uLL);
                              v378[13] = v378[13] & 0x38000000 | 1;
                              v379 = (llvm::Instruction *)(v378 + 8);
                              *(void *)v378 = 0;
                              *((void *)v378 + 1) = 0;
                              *((void *)v378 + 2) = 0;
                              *((void *)v378 + 3) = v378 + 8;
                              v1353[0] = 257;
                              llvm::LoadInst::LoadInst((llvm::Value *)(v378 + 8), (uint64_t)v376, (uint64_t)v181, (const char **)&v1349, 0, v377, 0);
                              (*(void (**)(void *, llvm::Instruction *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v379, &v1371, v1381, v1382);
                              if (v1377)
                              {
                                v491 = (llvm::MDNode **)v1376;
                                v492 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                                do
                                {
                                  llvm::Instruction::setMetadata(v379, *(_DWORD *)v491, v491[1]);
                                  v491 += 2;
                                }
                                while (v491 != v492);
                              }
                              v380 = **(llvm::Type ***)(*(void *)v182 + 16);
                              __int16 v1375 = 257;
                              char v381 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1381[7] + 40) + 272), v380, 1);
                              v382 = operator new(0x60uLL);
                              v382[13] = v382[13] & 0x38000000 | 1;
                              v383 = (llvm::Instruction *)(v382 + 8);
                              *(void *)v382 = 0;
                              *((void *)v382 + 1) = 0;
                              *((void *)v382 + 2) = 0;
                              *((void *)v382 + 3) = v382 + 8;
                              v1353[0] = 257;
                              llvm::LoadInst::LoadInst((llvm::Value *)(v382 + 8), (uint64_t)v380, (uint64_t)v182, (const char **)&v1349, 0, v381, 0);
                              (*(void (**)(void *, llvm::Instruction *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v383, &v1371, v1381, v1382);
                              if (v1377)
                              {
                                v493 = (llvm::MDNode **)v1376;
                                v494 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                                do
                                {
                                  llvm::Instruction::setMetadata(v383, *(_DWORD *)v493, v493[1]);
                                  v493 += 2;
                                }
                                while (v493 != v494);
                              }
                              v384 = (llvm::Value *)*((void *)v137 - 12);
                              v1353[0] = 257;
                              v385 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1376, v384, v379, v383, (const llvm::Twine *)&v1349, 0);
                              llvm::Value::doRAUW(v375, v385, (llvm::Value *)1);
                              v386 = v1345;
                              uint64_t v387 = HIDWORD(v1346);
                              if (v1345 == v1344)
                              {
                                if (HIDWORD(v1346))
                                {
                                  v388 = 0;
                                  uint64_t v389 = 8 * HIDWORD(v1346);
                                  v390 = (llvm::ValueAsMetadata **)v1345;
                                  do
                                  {
                                    if (*v390 == v375) {
                                      goto LABEL_645;
                                    }
                                    if (*v390 == (llvm::ValueAsMetadata *)-2) {
                                      v388 = v390;
                                    }
                                    ++v390;
                                    v389 -= 8;
                                  }
                                  while (v389);
                                  if (v388)
                                  {
                                    *v388 = v375;
                                    --v1347;
                                    goto LABEL_645;
                                  }
                                }
                                unsigned int v391 = v1346;
                                if (HIDWORD(v1346) < v1346)
                                {
                                  ++HIDWORD(v1346);
                                  *(void *)&v1345[8 * v387] = v375;
                                  goto LABEL_645;
                                }
                              }
                              else
                              {
                                unsigned int v391 = v1346;
                              }
                              if (3 * v391 <= 4 * (HIDWORD(v1346) - v1347))
                              {
                                if (v391 >= 0x40) {
                                  v391 *= 2;
                                }
                                else {
                                  unsigned int v391 = 128;
                                }
                              }
                              else if (v391 - HIDWORD(v1346) >= v391 >> 3)
                              {
                                goto LABEL_601;
                              }
                              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v391);
                              unsigned int v391 = v1346;
                              v386 = v1345;
LABEL_601:
                              unsigned int v392 = v391 - 1;
                              unsigned int v393 = (v391 - 1) & ((v375 >> 4) ^ (v375 >> 9));
                              v394 = &v386[8 * v393];
                              v395 = *(llvm::ValueAsMetadata **)v394;
                              if (*(void *)v394 == -1)
                              {
                                v396 = 0;
LABEL_638:
                                if (v396) {
                                  v412 = v396;
                                }
                                else {
                                  v412 = (llvm::ValueAsMetadata **)v394;
                                }
                                if (*v412 != v375)
                                {
                                  if (*v412 == (llvm::ValueAsMetadata *)-2) {
                                    --v1347;
                                  }
                                  else {
                                    ++HIDWORD(v1346);
                                  }
                                  *v412 = v375;
                                }
                              }
                              else
                              {
                                v396 = 0;
                                int v397 = 1;
                                while (v395 != v375)
                                {
                                  if (v396) {
                                    BOOL v398 = 0;
                                  }
                                  else {
                                    BOOL v398 = v395 == (llvm::ValueAsMetadata *)-2;
                                  }
                                  if (v398) {
                                    v396 = (llvm::ValueAsMetadata **)v394;
                                  }
                                  unsigned int v399 = v393 + v397++;
                                  unsigned int v393 = v399 & v392;
                                  v394 = &v386[8 * (v399 & v392)];
                                  v395 = *(llvm::ValueAsMetadata **)v394;
                                  if (*(void *)v394 == -1) {
                                    goto LABEL_638;
                                  }
                                }
                              }
LABEL_645:
                              v414 = (llvm::Value **)v1344;
                              v413 = (llvm::Value **)v1345;
                              uint64_t v415 = HIDWORD(v1346);
                              unsigned int v416 = v1346;
                              if (!v140) {
                                goto LABEL_769;
                              }
                              if (v1345 == v1344)
                              {
                                if (HIDWORD(v1346))
                                {
                                  v417 = 0;
                                  uint64_t v418 = 8 * HIDWORD(v1346);
                                  v419 = (uint64_t **)v1345;
                                  do
                                  {
                                    if (*v419 == v140) {
                                      goto LABEL_768;
                                    }
                                    if (*v419 == (uint64_t *)-2) {
                                      v417 = v419;
                                    }
                                    ++v419;
                                    v418 -= 8;
                                  }
                                  while (v418);
                                  if (v417)
                                  {
                                    *v417 = v140;
                                    --v1347;
                                    goto LABEL_768;
                                  }
                                }
                                if (v1346 > HIDWORD(v1346))
                                {
                                  ++HIDWORD(v1346);
                                  *(void *)&v1345[8 * v415] = v140;
LABEL_768:
                                  v414 = (llvm::Value **)v1344;
                                  v413 = (llvm::Value **)v1345;
                                  LODWORD(v415) = HIDWORD(v1346);
                                  unsigned int v416 = v1346;
LABEL_769:
                                  uint64_t v32 = v1337;
                                  if (v413 == v414)
                                  {
                                    if (v415)
                                    {
                                      v478 = 0;
                                      uint64_t v479 = 8 * v415;
                                      v480 = v414;
                                      do
                                      {
                                        if (*v480 == v137) {
                                          goto LABEL_800;
                                        }
                                        if (*v480 == (llvm::Value *)-2) {
                                          v478 = v480;
                                        }
                                        ++v480;
                                        v479 -= 8;
                                      }
                                      while (v479);
                                      if (v478)
                                      {
                                        *v478 = v137;
                                        --v1347;
                                        goto LABEL_800;
                                      }
                                    }
                                    if (v416 > v415)
                                    {
                                      HIDWORD(v1346) = v415 + 1;
                                      v414[v415] = v137;
LABEL_800:
                                      v490 = v1376;
                                      goto LABEL_1586;
                                    }
                                  }
                                  if (3 * v416 <= 4 * ((int)v415 - v1347))
                                  {
                                    if (v416 >= 0x40) {
                                      v416 *= 2;
                                    }
                                    else {
                                      unsigned int v416 = 128;
                                    }
                                  }
                                  else if (v416 - v415 >= v416 >> 3)
                                  {
                                    goto LABEL_781;
                                  }
                                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v416);
                                  unsigned int v416 = v1346;
                                  v413 = (llvm::Value **)v1345;
LABEL_781:
                                  unsigned int v481 = v416 - 1;
                                  unsigned int v482 = (v416 - 1) & ((v137 >> 4) ^ (v137 >> 9));
                                  v483 = (char *)&v413[v482];
                                  v484 = *(llvm::Value **)v483;
                                  if (*(void *)v483 == -1)
                                  {
                                    v485 = 0;
LABEL_793:
                                    if (v485) {
                                      v489 = v485;
                                    }
                                    else {
                                      v489 = (llvm::Value **)v483;
                                    }
                                    if (*v489 != v137)
                                    {
                                      if (*v489 == (llvm::Value *)-2) {
                                        --v1347;
                                      }
                                      else {
                                        ++HIDWORD(v1346);
                                      }
                                      *v489 = v137;
                                    }
                                  }
                                  else
                                  {
                                    v485 = 0;
                                    int v486 = 1;
                                    while (v484 != v137)
                                    {
                                      if (v485) {
                                        BOOL v487 = 0;
                                      }
                                      else {
                                        BOOL v487 = v484 == (llvm::Value *)-2;
                                      }
                                      if (v487) {
                                        v485 = (llvm::Value **)v483;
                                      }
                                      unsigned int v488 = v482 + v486++;
                                      unsigned int v482 = v488 & v481;
                                      v483 = (char *)&v413[v488 & v481];
                                      v484 = *(llvm::Value **)v483;
                                      if (*(void *)v483 == -1) {
                                        goto LABEL_793;
                                      }
                                    }
                                  }
                                  goto LABEL_800;
                                }
                              }
                              if (3 * (int)v1346 <= (4 * (HIDWORD(v1346) - v1347)))
                              {
                                if (v1346 >= 0x40) {
                                  unsigned int v416 = 2 * v1346;
                                }
                                else {
                                  unsigned int v416 = 128;
                                }
                              }
                              else if ((int)v1346 - HIDWORD(v1346) >= v1346 >> 3)
                              {
                                goto LABEL_658;
                              }
                              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v416);
                              unsigned int v416 = v1346;
                              v413 = (llvm::Value **)v1345;
LABEL_658:
                              unsigned int v420 = v416 - 1;
                              unsigned int v421 = (v416 - 1) & ((v140 >> 4) ^ (v140 >> 9));
                              v422 = (char *)&v413[v421];
                              v423 = *(uint64_t **)v422;
                              if (*(void *)v422 == -1)
                              {
                                v424 = 0;
LABEL_761:
                                if (v424) {
                                  v477 = v424;
                                }
                                else {
                                  v477 = (uint64_t **)v422;
                                }
                                if (*v477 != v140)
                                {
                                  if (*v477 == (uint64_t *)-2) {
                                    --v1347;
                                  }
                                  else {
                                    ++HIDWORD(v1346);
                                  }
                                  *v477 = v140;
                                }
                              }
                              else
                              {
                                v424 = 0;
                                int v425 = 1;
                                while (v423 != v140)
                                {
                                  if (v424) {
                                    BOOL v426 = 0;
                                  }
                                  else {
                                    BOOL v426 = v423 == (uint64_t *)-2;
                                  }
                                  if (v426) {
                                    v424 = (uint64_t **)v422;
                                  }
                                  unsigned int v427 = v421 + v425++;
                                  unsigned int v421 = v427 & v420;
                                  v422 = (char *)&v413[v427 & v420];
                                  v423 = *(uint64_t **)v422;
                                  if (*(void *)v422 == -1) {
                                    goto LABEL_761;
                                  }
                                }
                              }
                              goto LABEL_768;
                            }
                            int v533 = *(unsigned __int8 *)v1371;
                            if ((v533 - 4) > 0x1E)
                            {
                              if ((v533 - 3) >= 0xFFFFFFFE) {
                                v609 = v1371;
                              }
                              else {
                                v609 = 0;
                              }
                              if ((v533 - 3) < 0xFFFFFFFE)
                              {
                                if (v533 == 3) {
                                  *((void *)v1371 + 1) = 0;
                                }
                                goto LABEL_266;
                              }
                              unint64_t v535 = (unint64_t)v609 + 8;
                            }
                            else
                            {
                              if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
                                goto LABEL_266;
                              }
                              uint64_t v534 = *((void *)v1371 + 2);
                              if ((v534 & 4) == 0) {
                                goto LABEL_266;
                              }
                              unint64_t v535 = v534 & 0xFFFFFFFFFFFFFFF8;
                              if (!v535) {
                                goto LABEL_266;
                              }
                            }
                            v1349 = &v1371;
                            sub_1CC5FA668(v535 + 16, &v1349);
                            goto LABEL_266;
                          }
                        }
                      }
                      goto LABEL_273;
                    }
LABEL_1073:
                    if (v1346 > HIDWORD(v1346))
                    {
                      ++HIDWORD(v1346);
                      *(void *)&v1345[8 * v612] = v148;
                      goto LABEL_1096;
                    }
                  }
                  if (3 * (int)v1346 <= (4 * (HIDWORD(v1346) - v1347)))
                  {
                    if (v1346 >= 0x40) {
                      unsigned int v613 = 2 * v1346;
                    }
                    else {
                      unsigned int v613 = 128;
                    }
                  }
                  else if ((int)v1346 - HIDWORD(v1346) >= v1346 >> 3)
                  {
                    goto LABEL_1077;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v613);
                  unsigned int v613 = v1346;
                  v611 = v1345;
LABEL_1077:
                  unsigned int v617 = v613 - 1;
                  unsigned int v618 = (v613 - 1) & ((v148 >> 4) ^ (v148 >> 9));
                  v619 = &v611[8 * v618];
                  uint64_t v620 = *(void *)v619;
                  if (*(void *)v619 == -1)
                  {
                    v621 = 0;
LABEL_1089:
                    if (v621) {
                      v625 = v621;
                    }
                    else {
                      v625 = v619;
                    }
                    if (*(void *)v625 != v148)
                    {
                      if (*(void *)v625 == -2) {
                        --v1347;
                      }
                      else {
                        ++HIDWORD(v1346);
                      }
                      *(void *)v625 = v148;
                    }
                  }
                  else
                  {
                    v621 = 0;
                    int v622 = 1;
                    while (v620 != v148)
                    {
                      if (v621) {
                        BOOL v623 = 0;
                      }
                      else {
                        BOOL v623 = v620 == -2;
                      }
                      if (v623) {
                        v621 = v619;
                      }
                      unsigned int v624 = v618 + v622++;
                      unsigned int v618 = v624 & v617;
                      v619 = &v611[8 * (v624 & v617)];
                      uint64_t v620 = *(void *)v619;
                      if (*(void *)v619 == -1) {
                        goto LABEL_1089;
                      }
                    }
                  }
                  goto LABEL_1096;
                }
LABEL_955:
                if (v1346 > HIDWORD(v1346))
                {
                  ++HIDWORD(v1346);
                  *(void *)&v1345[8 * v560] = v140;
                  goto LABEL_1065;
                }
              }
              if (3 * (int)v1346 <= (4 * (HIDWORD(v1346) - v1347)))
              {
                if (v1346 >= 0x40) {
                  unsigned int v561 = 2 * v1346;
                }
                else {
                  unsigned int v561 = 128;
                }
              }
              else if ((int)v1346 - HIDWORD(v1346) >= v1346 >> 3)
              {
                goto LABEL_969;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v561);
              unsigned int v561 = v1346;
              v559 = v1345;
LABEL_969:
              unsigned int v568 = v561 - 1;
              unsigned int v569 = (v561 - 1) & ((v140 >> 4) ^ (v140 >> 9));
              v570 = &v559[8 * v569];
              v571 = *(uint64_t **)v570;
              if (*(void *)v570 == -1)
              {
                v572 = 0;
LABEL_1058:
                if (v572) {
                  v610 = v572;
                }
                else {
                  v610 = (uint64_t **)v570;
                }
                if (*v610 != v140)
                {
                  if (*v610 == (uint64_t *)-2) {
                    --v1347;
                  }
                  else {
                    ++HIDWORD(v1346);
                  }
                  *v610 = v140;
                }
              }
              else
              {
                v572 = 0;
                int v573 = 1;
                while (v571 != v140)
                {
                  if (v572) {
                    BOOL v574 = 0;
                  }
                  else {
                    BOOL v574 = v571 == (uint64_t *)-2;
                  }
                  if (v574) {
                    v572 = (uint64_t **)v570;
                  }
                  unsigned int v575 = v569 + v573++;
                  unsigned int v569 = v575 & v568;
                  v570 = &v559[8 * (v575 & v568)];
                  v571 = *(uint64_t **)v570;
                  if (*(void *)v570 == -1) {
                    goto LABEL_1058;
                  }
                }
              }
              goto LABEL_1065;
            }
            if (v1345 == v1344)
            {
              if (HIDWORD(v1346))
              {
                v565 = 0;
                uint64_t v566 = 8 * HIDWORD(v1346);
                v567 = v1345;
                while (*v567 != v148)
                {
                  if (*v567 == -2) {
                    v565 = v567;
                  }
                  ++v567;
                  v566 -= 8;
                  if (!v566)
                  {
                    if (!v565) {
                      goto LABEL_965;
                    }
                    void *v565 = v148;
                    --v1347;
                    goto LABEL_1097;
                  }
                }
                goto LABEL_1097;
              }
LABEL_965:
              if (v1346 > HIDWORD(v1346))
              {
                ++HIDWORD(v1346);
                *(void *)&v1345[8 * v560] = v148;
                goto LABEL_1097;
              }
            }
            if (3 * (int)v1346 <= (4 * (HIDWORD(v1346) - v1347)))
            {
              if (v1346 >= 0x40) {
                unsigned int v561 = 2 * v1346;
              }
              else {
                unsigned int v561 = 128;
              }
            }
            else if ((int)v1346 - HIDWORD(v1346) >= v1346 >> 3)
            {
              goto LABEL_982;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v561);
            unsigned int v561 = v1346;
            v559 = v1345;
LABEL_982:
            unsigned int v576 = v561 - 1;
            unsigned int v577 = (v561 - 1) & ((v148 >> 4) ^ (v148 >> 9));
            v578 = &v559[8 * v577];
            uint64_t v579 = *(void *)v578;
            if (*(void *)v578 == -1)
            {
              v580 = 0;
LABEL_1192:
              if (v580) {
                v667 = v580;
              }
              else {
                v667 = v578;
              }
              if (*(void *)v667 != v148)
              {
                if (*(void *)v667 == -2) {
                  --v1347;
                }
                else {
                  ++HIDWORD(v1346);
                }
                *(void *)v667 = v148;
              }
            }
            else
            {
              v580 = 0;
              int v581 = 1;
              while (v579 != v148)
              {
                if (v580) {
                  BOOL v582 = 0;
                }
                else {
                  BOOL v582 = v579 == -2;
                }
                if (v582) {
                  v580 = v578;
                }
                unsigned int v583 = v577 + v581++;
                unsigned int v577 = v583 & v576;
                v578 = &v559[8 * (v583 & v576)];
                uint64_t v579 = *(void *)v578;
                if (*(void *)v578 == -1) {
                  goto LABEL_1192;
                }
              }
            }
            goto LABEL_1097;
          }
LABEL_899:
          unsigned int v545 = v1346;
          if (HIDWORD(v1346) < v1346)
          {
            ++HIDWORD(v1346);
            *(void *)&v1345[8 * v541] = v125;
            goto LABEL_946;
          }
        }
        else
        {
          unsigned int v545 = v1346;
        }
        if (3 * v545 <= 4 * (HIDWORD(v1346) - v1347))
        {
          if (v545 >= 0x40) {
            v545 *= 2;
          }
          else {
            unsigned int v545 = 128;
          }
        }
        else if (v545 - HIDWORD(v1346) >= v545 >> 3)
        {
          goto LABEL_904;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v545);
        unsigned int v545 = v1346;
        v540 = v1345;
LABEL_904:
        unsigned int v546 = v545 - 1;
        unsigned int v547 = (v545 - 1) & ((v125 >> 4) ^ (v125 >> 9));
        v548 = &v540[8 * v547];
        v549 = *(llvm::ValueAsMetadata **)v548;
        if (*(void *)v548 == -1)
        {
          v550 = 0;
LABEL_939:
          if (v550) {
            v558 = v550;
          }
          else {
            v558 = (llvm::ValueAsMetadata **)v548;
          }
          if (*v558 != v125)
          {
            if (*v558 == (llvm::ValueAsMetadata *)-2) {
              --v1347;
            }
            else {
              ++HIDWORD(v1346);
            }
            *v558 = v125;
          }
        }
        else
        {
          v550 = 0;
          int v551 = 1;
          while (v549 != v125)
          {
            if (v550) {
              BOOL v552 = 0;
            }
            else {
              BOOL v552 = v549 == (llvm::ValueAsMetadata *)-2;
            }
            if (v552) {
              v550 = (llvm::ValueAsMetadata **)v548;
            }
            unsigned int v553 = v547 + v551++;
            unsigned int v547 = v553 & v546;
            v548 = &v540[8 * (v553 & v546)];
            v549 = *(llvm::ValueAsMetadata **)v548;
            if (*(void *)v548 == -1) {
              goto LABEL_939;
            }
          }
        }
        goto LABEL_946;
      }
LABEL_274:
      if (v124 == 61) {
        int v186 = v35;
      }
      else {
        int v186 = 0;
      }
      if (v33 && v124 == 61)
      {
        uint64_t v187 = **((void **)v186 - 8);
        if ((*(_DWORD *)(v187 + 8) & 0xFE) != 0x12
          || *(_DWORD *)(*(void *)(v187 + 24) + 8) != 2061
          || *(_DWORD *)(v187 + 32) != 3)
        {
          goto LABEL_1589;
        }
        v188 = 0;
        uint64_t v189 = **(void **)v35;
        v1376 = v1378;
        uint64_t v1377 = 0x200000000;
        uint64_t v1383 = v189;
        v1384 = &v1392;
        v1385 = v1393;
        uint64_t v1386 = 0;
        int v1387 = 0;
        __int16 v1388 = 512;
        char v1389 = 7;
        v1381 = 0;
        v1382 = 0;
        uint64_t v1390 = 0;
        uint64_t v1391 = 0;
        v1392 = &unk_1F2616E88;
        v1393[0] = &unk_1F2617008;
        v1381 = (uint64_t *)*((void *)v35 + 5);
        v1382 = v35 + 24;
        uint64_t v190 = (llvm::Value *)*((void *)v35 + 6);
        v1371 = v190;
        if (v190)
        {
          llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v190, 2);
          v188 = v1371;
        }
        sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v188);
        if (!v1371)
        {
LABEL_285:
          if ((*(_DWORD *)(v187 + 8) & 0xFE) == 0x12) {
            uint64_t v187 = **(void **)(v187 + 16);
          }
          uint64_t v191 = **((void **)v186 - 4);
          unsigned int v192 = *(_DWORD *)(v191 + 8);
          if ((v192 & 0xFE) == 0x12) {
            unsigned int v192 = *(_DWORD *)(**(void **)(v191 + 16) + 8);
          }
          unint64_t v193 = llvm::PointerType::get((llvm::PointerType *)v187, (llvm::Type *)(v192 >> 8));
          v194 = (unsigned __int8 *)*((void *)v186 - 4);
          __int16 v1375 = 257;
          if (*(void *)v194 != v193)
          {
            if (v194[16] <= 0x14u)
            {
              uint64_t v237 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1384 + 28))(v1384, 49, v194, v193);
              v194 = (unsigned __int8 *)v237;
              if (v237)
              {
                if (*(unsigned __int8 *)(v237 + 16) >= 0x1Cu)
                {
                  (*(void (**)(void *, uint64_t, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v237, &v1371, v1381, v1382);
                  if (v1377)
                  {
                    v1097 = (llvm::MDNode **)v1376;
                    v1098 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v194, *(_DWORD *)v1097, v1097[1]);
                      v1097 += 2;
                    }
                    while (v1097 != v1098);
                  }
                }
              }
            }
            else
            {
              v1353[0] = 257;
              v194 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v194, v193, (const char **)&v1349, 0);
              (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v194, &v1371, v1381, v1382);
              if (v1377)
              {
                v195 = (llvm::MDNode **)v1376;
                uint64_t v196 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v194, *(_DWORD *)v195, v195[1]);
                  v195 += 2;
                }
                while (v195 != v196);
              }
            }
          }
          v1353[0] = 257;
          v238 = sub_1CB844364((uint64_t *)&v1376, v187, (const llvm::APInt *)v194, 2, (uint64_t)&v1349);
          v239 = (llvm::ConstantInt *)(***(void ***)v35 + 1960);
          uint64_t v240 = (unsigned __int8 *)llvm::ConstantInt::get(v239, 2uLL, 0);
          uint64_t v241 = (unsigned __int8 *)*((void *)v186 - 8);
          v1353[0] = 257;
          unsigned int v242 = sub_1CB8445F4((uint64_t)&v1376, v241, v240, (uint64_t)&v1349);
          char v243 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1381[7] + 40) + 272), *(llvm::Type **)v242, 1);
          v244 = (char *)operator new(0x80uLL);
          *((_DWORD *)v244 + 21) = *((_DWORD *)v244 + 21) & 0x38000000 | 2;
          *(void *)v244 = 0;
          *((void *)v244 + 2) = 0;
          *((void *)v244 + 1) = 0;
          *((void *)v244 + 5) = 0;
          *((void *)v244 + 6) = 0;
          *((void *)v244 + 4) = 0;
          v245 = (llvm::Instruction **)(v244 + 32);
          *((void *)v244 + 8) = ***(void ***)v242 + 1576;
          uint64_t v246 = (llvm::Instruction *)(v244 + 64);
          *((void *)v244 + 3) = v244 + 64;
          *((void *)v244 + 7) = v244 + 64;
          *((void *)v244 + 9) = 0;
          v244[80] = 61;
          v244[81] = 0;
          *((_WORD *)v244 + 41) = 0;
          *((_DWORD *)v244 + 21) = 2;
          *(_OWORD *)(v244 + 88) = 0u;
          *(_OWORD *)(v244 + 104) = 0u;
          *((_DWORD *)v244 + 30) = 0;
          *(void *)v244 = v242;
          uint64_t v249 = *((void *)v242 + 1);
          unsigned int v248 = (void *)((char *)v242 + 8);
          uint64_t v247 = v249;
          *((void *)v244 + 1) = v249;
          if (v249) {
            *(void *)(v247 + 16) = v244 + 8;
          }
          *((void *)v244 + 2) = v248;
          *unsigned int v248 = v244;
          if (*((void *)v244 + 4))
          {
            **((void **)v244 + 6) = *((void *)v244 + 5);
            uint64_t v1091 = *((void *)v244 + 5);
            if (v1091) {
              *(void *)(v1091 + 16) = *((void *)v244 + 6);
            }
          }
          void *v245 = v238;
          if (v238)
          {
            uint64_t v252 = *((void *)v238 + 1);
            unsigned int v251 = (llvm::Instruction ***)((char *)v238 + 8);
            uint64_t v250 = v252;
            *((void *)v244 + 5) = v252;
            if (v252) {
              *(void *)(v250 + 16) = v244 + 40;
            }
            *((void *)v244 + 6) = v251;
            *unsigned int v251 = v245;
          }
          *((_WORD *)v244 + 41) = 2 * (v243 & 0x3F);
          v244[124] = 1;
          v1353[0] = 257;
          (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v246, &v1349, v1381, v1382);
          if (v1377)
          {
            v356 = (llvm::MDNode **)v1376;
            v357 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
            do
            {
              llvm::Instruction::setMetadata(v246, *(_DWORD *)v356, v356[1]);
              v356 += 2;
            }
            while (v356 != v357);
          }
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v187, (llvm::Type *)2);
          unint64_t v254 = v253;
          uint64_t v255 = **((void **)v186 - 4);
          unsigned int v256 = *(_DWORD *)(v255 + 8);
          if ((v256 & 0xFE) == 0x12) {
            unsigned int v256 = *(_DWORD *)(**(void **)(v255 + 16) + 8);
          }
          unint64_t v257 = llvm::PointerType::get(v253, (llvm::Type *)(v256 >> 8));
          v258 = (llvm::Value *)*((void *)v186 - 4);
          __int16 v1375 = 257;
          if (*(void *)v258 != v257)
          {
            if (*((unsigned __int8 *)v258 + 16) <= 0x14u)
            {
              v258 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, unint64_t))*v1384
                                     + 28))(v1384, 49, v258, v257);
              if (v258) {
                BOOL v261 = *((unsigned __int8 *)v258 + 16) >= 0x1Cu;
              }
              else {
                BOOL v261 = 0;
              }
              if (v261)
              {
                (*(void (**)(void *, llvm::Value *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v258, &v1371, v1381, v1382);
                if (v1377)
                {
                  v1099 = (llvm::MDNode **)v1376;
                  v1100 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                  do
                  {
                    llvm::Instruction::setMetadata(v258, *(_DWORD *)v1099, v1099[1]);
                    v1099 += 2;
                  }
                  while (v1099 != v1100);
                }
              }
            }
            else
            {
              v1353[0] = 257;
              v258 = llvm::CastInst::Create(49, (uint64_t)v258, v257, (const char **)&v1349, 0);
              (*(void (**)(void *, llvm::Value *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v258, &v1371, v1381, v1382);
              if (v1377)
              {
                uint64_t v259 = (llvm::MDNode **)v1376;
                unint64_t v260 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                do
                {
                  llvm::Instruction::setMetadata(v258, *(_DWORD *)v259, v259[1]);
                  v259 += 2;
                }
                while (v259 != v260);
              }
            }
          }
          int v262 = (unsigned __int8 *)llvm::ConstantInt::get(v239, 0, 0);
          v263 = (unsigned __int8 *)*((void *)v186 - 8);
          v1353[0] = 257;
          unint64_t v264 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1376, v263, v262, (uint64_t)&v1349);
          v265 = (unsigned __int8 *)llvm::ConstantInt::get(v239, 1uLL, 0);
          v266 = (unsigned __int8 *)*((void *)v186 - 8);
          v1353[0] = 257;
          v267 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1376, v266, v265, (uint64_t)&v1349);
          unint64_t v269 = (unsigned __int8 *)llvm::UndefValue::get(v254, v268);
          v1353[0] = 257;
          uint64_t v270 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1376, v269, v264, v262, (uint64_t)&v1349);
          v1353[0] = 257;
          unint64_t v271 = sub_1CB84478C((uint64_t)&v1376, v270, v267, v265, (uint64_t)&v1349);
          char v272 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1381[7] + 40) + 272), *(llvm::Type **)v271, 1);
          v273 = (char *)operator new(0x80uLL);
          *((_DWORD *)v273 + 21) = *((_DWORD *)v273 + 21) & 0x38000000 | 2;
          *(void *)v273 = 0;
          *((void *)v273 + 2) = 0;
          *((void *)v273 + 1) = 0;
          *((void *)v273 + 5) = 0;
          *((void *)v273 + 6) = 0;
          *((void *)v273 + 4) = 0;
          v274 = (llvm::Value **)(v273 + 32);
          *((void *)v273 + 8) = ***(void ***)v271 + 1576;
          v275 = (llvm::Instruction *)(v273 + 64);
          *((void *)v273 + 3) = v273 + 64;
          *((void *)v273 + 7) = v273 + 64;
          *((void *)v273 + 9) = 0;
          v273[80] = 61;
          v273[81] = 0;
          *((_WORD *)v273 + 41) = 0;
          *((_DWORD *)v273 + 21) = 2;
          *(_OWORD *)(v273 + 88) = 0u;
          *(_OWORD *)(v273 + 104) = 0u;
          *((_DWORD *)v273 + 30) = 0;
          *(void *)v273 = v271;
          uint64_t v278 = *((void *)v271 + 1);
          unsigned int v277 = (void *)((char *)v271 + 8);
          uint64_t v276 = v278;
          *((void *)v273 + 1) = v278;
          if (v278) {
            *(void *)(v276 + 16) = v273 + 8;
          }
          *((void *)v273 + 2) = v277;
          *unsigned int v277 = v273;
          uint64_t v32 = v1337;
          if (*((void *)v273 + 4))
          {
            **((void **)v273 + 6) = *((void *)v273 + 5);
            uint64_t v1092 = *((void *)v273 + 5);
            if (v1092) {
              *(void *)(v1092 + 16) = *((void *)v273 + 6);
            }
          }
          char *v274 = v258;
          if (v258)
          {
            uint64_t v281 = *((void *)v258 + 1);
            float v280 = (llvm::Value ***)((char *)v258 + 8);
            uint64_t v279 = v281;
            *((void *)v273 + 5) = v281;
            if (v281) {
              *(void *)(v279 + 16) = v273 + 40;
            }
            *((void *)v273 + 6) = v280;
            *float v280 = v274;
          }
          *((_WORD *)v273 + 41) = 2 * (v272 & 0x3F);
          v273[124] = 1;
          v1353[0] = 257;
          (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v275, &v1349, v1381, v1382);
          if (v1377)
          {
            v358 = (llvm::MDNode **)v1376;
            v359 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
            do
            {
              llvm::Instruction::setMetadata(v275, *(_DWORD *)v358, v358[1]);
              v358 += 2;
            }
            while (v358 != v359);
          }
          uint64_t v49 = v1345;
          uint64_t v50 = HIDWORD(v1346);
          if (v1345 == v1344)
          {
            if (HIDWORD(v1346))
            {
              char v51 = 0;
              uint64_t v282 = 8 * HIDWORD(v1346);
              v283 = (unsigned __int8 **)v1345;
              while (*v283 != v35)
              {
                if (*v283 == (unsigned __int8 *)-2) {
                  char v51 = v283;
                }
                ++v283;
                v282 -= 8;
                if (!v282)
                {
                  if (v51) {
                    goto LABEL_1561;
                  }
                  goto LABEL_376;
                }
              }
              goto LABEL_1585;
            }
LABEL_376:
            unsigned int v284 = v1346;
            if (HIDWORD(v1346) < v1346) {
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v284 = v1346;
          }
          if (3 * v284 <= 4 * (HIDWORD(v1346) - v1347))
          {
            if (v284 >= 0x40) {
              v284 *= 2;
            }
            else {
              unsigned int v284 = 128;
            }
          }
          else if (v284 - HIDWORD(v1346) >= v284 >> 3)
          {
            goto LABEL_395;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v284);
          unsigned int v284 = v1346;
          uint64_t v49 = v1345;
LABEL_395:
          unsigned int v291 = v284 - 1;
          unsigned int v292 = (v284 - 1) & ((v35 >> 4) ^ (v35 >> 9));
          uint64_t v88 = (unsigned __int8 **)&v49[v292];
          v293 = *v88;
          if (*v88 != (unsigned __int8 *)-1)
          {
            v90 = 0;
            int v294 = 1;
            while (v293 != v35)
            {
              if (v90) {
                BOOL v295 = 0;
              }
              else {
                BOOL v295 = v293 == (unsigned __int8 *)-2;
              }
              if (v295) {
                v90 = v88;
              }
              unsigned int v296 = v292 + v294++;
              unsigned int v292 = v296 & v291;
              uint64_t v88 = (unsigned __int8 **)&v49[v296 & v291];
              v293 = *v88;
              if (*v88 == (unsigned __int8 *)-1) {
                goto LABEL_1578;
              }
            }
            goto LABEL_1585;
          }
          goto LABEL_1577;
        }
        int v319 = *(unsigned __int8 *)v1371;
        if ((v319 - 4) > 0x1E)
        {
          if ((v319 - 3) >= 0xFFFFFFFE) {
            v369 = v1371;
          }
          else {
            v369 = 0;
          }
          if ((v319 - 3) < 0xFFFFFFFE)
          {
            if (v319 == 3) {
              *((void *)v1371 + 1) = 0;
            }
            goto LABEL_285;
          }
          unint64_t v321 = (unint64_t)v369 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
            goto LABEL_285;
          }
          uint64_t v320 = *((void *)v1371 + 2);
          if ((v320 & 4) == 0) {
            goto LABEL_285;
          }
          unint64_t v321 = v320 & 0xFFFFFFFFFFFFFFF8;
          if (!v321) {
            goto LABEL_285;
          }
        }
        v1349 = &v1371;
        sub_1CC5FA668(v321 + 16, &v1349);
        goto LABEL_285;
      }
      if (v124 != 84) {
        goto LABEL_1589;
      }
      uint64_t v197 = *((void *)v35 - 4);
      if (!v197
        || *(unsigned char *)(v197 + 16)
        || *(void *)(v197 + 24) != *((void *)v35 + 9)
        || (*(unsigned char *)(v197 + 33) & 0x20) == 0)
      {
        goto LABEL_1589;
      }
      int v198 = *(_DWORD *)(*(v33 - 7) + 36);
      if ((v198 - 1282) < 0x190)
      {
        if (!*(v33 - 2))
        {
          int v199 = v1345;
          uint64_t v200 = HIDWORD(v1346);
          if (v1345 == v1344)
          {
            if (HIDWORD(v1346))
            {
              v201 = 0;
              uint64_t v202 = 8 * HIDWORD(v1346);
              uint64_t v203 = (unsigned __int8 **)v1345;
              while (*v203 != v35)
              {
                if (*v203 == (unsigned __int8 *)-2) {
                  v201 = v203;
                }
                ++v203;
                v202 -= 8;
                if (!v202)
                {
                  if (!v201) {
                    goto LABEL_310;
                  }
                  _DWORD *v201 = v35;
                  --v1347;
                  goto LABEL_1588;
                }
              }
              goto LABEL_1588;
            }
LABEL_310:
            unsigned int v204 = v1346;
            if (HIDWORD(v1346) < v1346)
            {
              ++HIDWORD(v1346);
              *(void *)&v1345[8 * v200] = v35;
LABEL_1588:
              int v1338 = 1;
              goto LABEL_1589;
            }
          }
          else
          {
            unsigned int v204 = v1346;
          }
          if (3 * v204 <= 4 * (HIDWORD(v1346) - v1347))
          {
            if (v204 >= 0x40) {
              v204 *= 2;
            }
            else {
              unsigned int v204 = 128;
            }
          }
          else if (v204 - HIDWORD(v1346) >= v204 >> 3)
          {
            goto LABEL_547;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v204);
          unsigned int v204 = v1346;
          int v199 = v1345;
LABEL_547:
          unsigned int v360 = v204 - 1;
          unsigned int v361 = (v204 - 1) & ((v35 >> 4) ^ (v35 >> 9));
          v362 = &v199[8 * v361];
          v363 = *(unsigned __int8 **)v362;
          if (*(void *)v362 == -1)
          {
            v364 = 0;
LABEL_708:
            if (v364) {
              v448 = v364;
            }
            else {
              v448 = (unsigned __int8 **)v362;
            }
            if (*v448 != v35)
            {
              if (*v448 == (unsigned __int8 *)-2) {
                --v1347;
              }
              else {
                ++HIDWORD(v1346);
              }
              *v448 = v35;
            }
          }
          else
          {
            v364 = 0;
            int v365 = 1;
            while (v363 != v35)
            {
              if (v364) {
                BOOL v366 = 0;
              }
              else {
                BOOL v366 = v363 == (unsigned __int8 *)-2;
              }
              if (v366) {
                v364 = (unsigned __int8 **)v362;
              }
              unsigned int v367 = v361 + v365++;
              unsigned int v361 = v367 & v360;
              v362 = &v199[8 * (v367 & v360)];
              v363 = *(unsigned __int8 **)v362;
              if (*(void *)v362 == -1) {
                goto LABEL_708;
              }
            }
          }
          goto LABEL_1588;
        }
LABEL_458:
        if (!*(unsigned char *)(v1331 + 28)) {
          goto LABEL_1589;
        }
        llvm::SampleInfo::SampleInfo((uint64_t)&v1349, v198, 1);
        if (BYTE2(v1349)) {
          goto LABEL_1589;
        }
        unsigned int v322 = HIDWORD(v1349);
        uint64_t v323 = *((void *)v34 + 4 * v1354 + -4 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF));
        unsigned int v324 = *(unsigned __int8 *)(v323 + 16);
        if (v323 && v324 < 0x15)
        {
          v325 = 0;
          uint64_t v326 = *(void *)*(v33 - 3);
          v1376 = v1378;
          uint64_t v1377 = 0x200000000;
          uint64_t v1383 = v326;
          v1384 = &v1392;
          v1385 = v1393;
          uint64_t v1386 = 0;
          int v1387 = 0;
          __int16 v1388 = 512;
          char v1389 = 7;
          v1381 = 0;
          v1382 = 0;
          uint64_t v1390 = 0;
          uint64_t v1391 = 0;
          v1392 = &unk_1F2616E88;
          v1393[0] = &unk_1F2617008;
          v1381 = (uint64_t *)v33[2];
          v1382 = (unsigned __int8 *)v33;
          uint64_t v327 = (void *)v33[3];
          v1368[0] = v327;
          if (v327)
          {
            llvm::MetadataTracking::track((uint64_t)v1368, (unsigned __int8 *)v327, 2);
            v325 = v1368[0];
          }
          sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v325);
          if (v1368[0])
          {
            int v629 = *(unsigned __int8 *)v1368[0];
            if ((v629 - 4) > 0x1E)
            {
              if ((v629 - 3) >= 0xFFFFFFFE) {
                v772 = v1368[0];
              }
              else {
                v772 = 0;
              }
              if ((v629 - 3) < 0xFFFFFFFE)
              {
                if (v629 == 3) {
                  *((void *)v1368[0] + 1) = 0;
                }
                goto LABEL_465;
              }
              unint64_t v631 = (unint64_t)v772 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1368[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1368[0] + 3)) {
                goto LABEL_465;
              }
              uint64_t v630 = *((void *)v1368[0] + 2);
              if ((v630 & 4) == 0) {
                goto LABEL_465;
              }
              unint64_t v631 = v630 & 0xFFFFFFFFFFFFFFF8;
              if (!v631) {
                goto LABEL_465;
              }
            }
            v1371 = (llvm::Value *)v1368;
            sub_1CC5FA668(v631 + 16, &v1371);
          }
LABEL_465:
          uint64_t v328 = *(void *)v323;
          unsigned int v329 = (uint64_t *)(*(void *)v1383 + 1672);
          if ((*(_DWORD *)(*(void *)v323 + 8) & 0xFE) == 0x12)
          {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)v1383 + 1672), (llvm::Type *)*(unsigned int *)(v328 + 32));
            unsigned int v329 = v330;
          }
          __int16 v1375 = 257;
          v331 = sub_1CB845378((uint64_t)&v1376, v323, v329, (uint64_t)&v1371);
          v332 = v331;
          __int16 v1370 = 257;
          if (*(void *)v331 != v328)
          {
            if (*((unsigned __int8 *)v331 + 16) <= 0x14u)
            {
              uint64_t v449 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v1384 + 28))(v1384, 49, v331, v328);
              v332 = (llvm::Value *)v449;
              if (v449 && *(unsigned __int8 *)(v449 + 16) >= 0x1Cu)
              {
                (*(void (**)(void *, uint64_t, void **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v449, v1368, v1381, v1382);
                if (v1377)
                {
                  v1107 = (llvm::MDNode **)v1376;
                  v1108 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                  do
                  {
                    llvm::Instruction::setMetadata(v332, *(_DWORD *)v1107, v1107[1]);
                    v1107 += 2;
                  }
                  while (v1107 != v1108);
                }
                uint64_t v32 = v1337;
              }
            }
            else
            {
              __int16 v1375 = 257;
              v332 = llvm::CastInst::Create(49, (uint64_t)v331, v328, (const char **)&v1371, 0);
              (*(void (**)(void *, llvm::Value *, void **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v332, v1368, v1381, v1382);
              if (v1377)
              {
                v333 = (llvm::MDNode **)v1376;
                uint64_t v334 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                do
                {
                  llvm::Instruction::setMetadata(v332, *(_DWORD *)v333, v333[1]);
                  v333 += 2;
                }
                while (v333 != v334);
              }
            }
          }
          uint64_t v450 = v1354;
          v451 = (char *)v34 - 32 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF);
          v452 = &v451[32 * v1354];
          if (*(void *)v452)
          {
            **((void **)v452 + 2) = *((void *)v452 + 1);
            uint64_t v453 = *((void *)v452 + 1);
            if (v453) {
              *(void *)(v453 + 16) = *((void *)v452 + 2);
            }
          }
          *(void *)v452 = v332;
          if (v332)
          {
            uint64_t v456 = *((void *)v332 + 1);
            v455 = (char **)((char *)v332 + 8);
            uint64_t v454 = v456;
            v457 = &v451[32 * v450];
            *((void *)v457 + 1) = v456;
            if (v456) {
              *(void *)(v454 + 16) = v457 + 8;
            }
            *((void *)v457 + 2) = v455;
            *v455 = v452;
          }
          v458 = v1376;
          if (v1376 == v1378)
          {
LABEL_729:
            if (HIDWORD(v1357) == -1) {
              goto LABEL_1588;
            }
            v459 = (unsigned __int8 *)*((void *)v34 + 4 * HIDWORD(v1357) + -4 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF));
            v460 = 0;
            if (v459) {
              BOOL v461 = v459[16] >= 0x15u;
            }
            else {
              BOOL v461 = 1;
            }
            if (!v461)
            {
              uint64_t v468 = *(void *)*(v33 - 3);
              v1376 = v1378;
              uint64_t v1377 = 0x200000000;
              uint64_t v1383 = v468;
              v1384 = &v1392;
              v1385 = v1393;
              uint64_t v1386 = 0;
              int v1387 = 0;
              __int16 v1388 = 512;
              char v1389 = 7;
              v1381 = 0;
              v1382 = 0;
              uint64_t v1390 = 0;
              uint64_t v1391 = 0;
              v1392 = &unk_1F2616E88;
              v1393[0] = &unk_1F2617008;
              v1381 = (uint64_t *)v33[2];
              v1382 = (unsigned __int8 *)v33;
              v469 = (void *)v33[3];
              v1368[0] = v469;
              if (v469)
              {
                llvm::MetadataTracking::track((uint64_t)v1368, (unsigned __int8 *)v469, 2);
                v460 = v1368[0];
              }
              sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v460);
              if (v1368[0])
              {
                int v664 = *(unsigned __int8 *)v1368[0];
                if ((v664 - 4) > 0x1E)
                {
                  if ((v664 - 3) >= 0xFFFFFFFE) {
                    v790 = v1368[0];
                  }
                  else {
                    v790 = 0;
                  }
                  if ((v664 - 3) < 0xFFFFFFFE)
                  {
                    if (v664 == 3) {
                      *((void *)v1368[0] + 1) = 0;
                    }
                    goto LABEL_748;
                  }
                  unint64_t v666 = (unint64_t)v790 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v1368[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1368[0] + 3)) {
                    goto LABEL_748;
                  }
                  uint64_t v665 = *((void *)v1368[0] + 2);
                  if ((v665 & 4) == 0) {
                    goto LABEL_748;
                  }
                  unint64_t v666 = v665 & 0xFFFFFFFFFFFFFFF8;
                  if (!v666) {
                    goto LABEL_748;
                  }
                }
                v1371 = (llvm::Value *)v1368;
                sub_1CC5FA668(v666 + 16, &v1371);
              }
LABEL_748:
              uint64_t v470 = *(void *)v459;
              v471 = (uint64_t *)(*(void *)v1383 + 1672);
              if ((*(_DWORD *)(*(void *)v459 + 8) & 0xFE) == 0x12)
              {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)v1383 + 1672), (llvm::Type *)*(unsigned int *)(v470 + 32));
                v471 = v472;
              }
              __int16 v1375 = 257;
              v473 = sub_1CB845378((uint64_t)&v1376, (uint64_t)v459, v471, (uint64_t)&v1371);
              v474 = v473;
              __int16 v1370 = 257;
              if (*(void *)v473 != v470)
              {
                if (*((unsigned __int8 *)v473 + 16) <= 0x14u)
                {
                  uint64_t v495 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v1384 + 28))(v1384, 49, v473, v470);
                  v474 = (llvm::Value *)v495;
                  if (v495 && *(unsigned __int8 *)(v495 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(void *, uint64_t, void **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v495, v1368, v1381, v1382);
                    if (v1377)
                    {
                      v1109 = (llvm::MDNode **)v1376;
                      v1110 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                      do
                      {
                        llvm::Instruction::setMetadata(v474, *(_DWORD *)v1109, v1109[1]);
                        v1109 += 2;
                      }
                      while (v1109 != v1110);
                    }
                    uint64_t v32 = v1337;
                  }
                }
                else
                {
                  __int16 v1375 = 257;
                  v474 = llvm::CastInst::Create(49, (uint64_t)v473, v470, (const char **)&v1371, 0);
                  (*(void (**)(void *, llvm::Value *, void **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v474, v1368, v1381, v1382);
                  if (v1377)
                  {
                    v475 = (llvm::MDNode **)v1376;
                    v476 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                    do
                    {
                      llvm::Instruction::setMetadata(v474, *(_DWORD *)v475, v475[1]);
                      v475 += 2;
                    }
                    while (v475 != v476);
                  }
                }
              }
              uint64_t v496 = HIDWORD(v1357);
              v497 = (char *)v34 - 32 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF);
              v498 = &v497[32 * HIDWORD(v1357)];
              if (*(void *)v498)
              {
                **((void **)v498 + 2) = *((void *)v498 + 1);
                uint64_t v499 = *((void *)v498 + 1);
                if (v499) {
                  *(void *)(v499 + 16) = *((void *)v498 + 2);
                }
              }
              *(void *)v498 = v474;
              if (v474)
              {
                uint64_t v502 = *((void *)v474 + 1);
                v501 = (char **)((char *)v474 + 8);
                uint64_t v500 = v502;
                v503 = &v497[32 * v496];
                *((void *)v503 + 1) = v502;
                if (v502) {
                  *(void *)(v500 + 16) = v503 + 8;
                }
                *((void *)v503 + 2) = v501;
                *v501 = v498;
              }
LABEL_1585:
              v490 = v1376;
LABEL_1586:
              if (v490 != v1378) {
                free(v490);
              }
              goto LABEL_1588;
            }
            uint64_t v462 = *(void *)*(v33 - 3);
            v1376 = v1378;
            uint64_t v1377 = 0x200000000;
            uint64_t v1383 = v462;
            v1384 = &v1392;
            v1385 = v1393;
            uint64_t v1386 = 0;
            int v1387 = 0;
            __int16 v1388 = 512;
            char v1389 = 7;
            v1381 = 0;
            v1382 = 0;
            uint64_t v1390 = 0;
            uint64_t v1391 = 0;
            v1392 = &unk_1F2616E88;
            v1393[0] = &unk_1F2617008;
            v1381 = (uint64_t *)v33[2];
            v1382 = (unsigned __int8 *)v33;
            v463 = (void *)v33[3];
            v1368[0] = v463;
            if (v463)
            {
              llvm::MetadataTracking::track((uint64_t)v1368, (unsigned __int8 *)v463, 2);
              v460 = v1368[0];
            }
            sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v460);
            if (!v1368[0])
            {
LABEL_738:
              v464 = sub_1CB8451C0((void ***)v459, (uint64_t)&v1376);
              uint64_t v465 = *((void *)v459 + 1);
              if (v465)
              {
                while (1)
                {
                  v466 = *(llvm::ValueAsMetadata **)(v465 + 24);
                  if (*((unsigned __int8 *)v466 + 16) >= 0x1Cu && v466 == v34) {
                    break;
                  }
                  uint64_t v465 = *(void *)(v465 + 8);
                  if (!v465) {
                    goto LABEL_1585;
                  }
                }
                llvm::User::replaceUsesOfWith((llvm::User *)(v33 - 3), (llvm::Value *)v459, (llvm::Value *)v464);
              }
              goto LABEL_1585;
            }
            int v661 = *(unsigned __int8 *)v1368[0];
            if ((v661 - 4) > 0x1E)
            {
              if ((v661 - 3) >= 0xFFFFFFFE) {
                v789 = v1368[0];
              }
              else {
                v789 = 0;
              }
              if ((v661 - 3) < 0xFFFFFFFE)
              {
                if (v661 == 3) {
                  *((void *)v1368[0] + 1) = 0;
                }
                goto LABEL_738;
              }
              unint64_t v663 = (unint64_t)v789 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1368[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1368[0] + 3)) {
                goto LABEL_738;
              }
              uint64_t v662 = *((void *)v1368[0] + 2);
              if ((v662 & 4) == 0) {
                goto LABEL_738;
              }
              unint64_t v663 = v662 & 0xFFFFFFFFFFFFFFF8;
              if (!v663) {
                goto LABEL_738;
              }
            }
            v1371 = (llvm::Value *)v1368;
            sub_1CC5FA668(v663 + 16, &v1371);
            goto LABEL_738;
          }
LABEL_1240:
          free(v458);
          goto LABEL_729;
        }
        if (v324 >= 0x1C)
        {
          uint64_t v428 = *(void *)(v323 + 32);
          if (v428) {
            BOOL v429 = v428 == *(void *)(v323 + 40) + 40;
          }
          else {
            BOOL v429 = 1;
          }
          if (v429) {
            v401 = 0;
          }
          else {
            v401 = (uint64_t **)(v428 - 24);
          }
        }
        else
        {
          for (uint64_t i = *(void *)(v1332 + 48); ; uint64_t i = *(void *)(i + 8))
          {
            v401 = (uint64_t **)(i - 24);
            uint64_t v402 = i ? i - 24 : 0;
            if (*(unsigned char *)(v402 + 16) != 83) {
              break;
            }
          }
        }
        v430 = 0;
        v431 = *(llvm::UndefValue **)v323;
        v1371 = (llvm::Value *)&v1373;
        v1372 = (llvm::Value *)0x400000000;
        uint64_t v432 = **v401;
        v1376 = v1378;
        uint64_t v1377 = 0x200000000;
        uint64_t v1383 = v432;
        v1384 = &v1392;
        v1385 = v1393;
        uint64_t v1386 = 0;
        int v1387 = 0;
        __int16 v1388 = 512;
        char v1389 = 7;
        v1381 = 0;
        v1382 = 0;
        uint64_t v1390 = 0;
        uint64_t v1391 = 0;
        v1392 = &unk_1F2616E88;
        v1393[0] = &unk_1F2617008;
        v1381 = v401[5];
        v1382 = (unsigned __int8 *)(v401 + 3);
        v433 = v401[6];
        v1342[0] = v433;
        if (v433)
        {
          llvm::MetadataTracking::track((uint64_t)v1342, (unsigned __int8 *)v433, 2);
          v430 = v1342[0];
        }
        sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v430);
        if (v1342[0])
        {
          int v626 = *(unsigned __int8 *)v1342[0];
          if ((v626 - 4) > 0x1E)
          {
            if ((v626 - 3) >= 0xFFFFFFFE) {
              v771 = v1342[0];
            }
            else {
              v771 = 0;
            }
            if ((v626 - 3) < 0xFFFFFFFE)
            {
              if (v626 == 3) {
                v1342[0][1] = 0;
              }
              goto LABEL_680;
            }
            unint64_t v628 = (unint64_t)(v771 + 1);
          }
          else
          {
            if ((*((unsigned char *)v1342[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1342[0] + 3)) {
              goto LABEL_680;
            }
            uint64_t v627 = v1342[0][2];
            if ((v627 & 4) == 0) {
              goto LABEL_680;
            }
            unint64_t v628 = v627 & 0xFFFFFFFFFFFFFFF8;
            if (!v628) {
              goto LABEL_680;
            }
          }
          v1368[0] = v1342;
          sub_1CC5FA668(v628 + 16, v1368);
        }
LABEL_680:
        if (v324 == 90)
        {
          if (*(unsigned char *)(v323 + 16) != 90)
          {
            uint64_t v504 = 0xFFFFFFFFLL;
            v438 = (unsigned __int8 *)v323;
            goto LABEL_820;
          }
          unsigned int v436 = v1372;
          uint64_t v437 = v323;
          do
          {
            if (v436 >= HIDWORD(v1372)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v1371 + v436) = *(void *)(v437 - 64);
            unsigned int v436 = v1372 + 1;
            LODWORD(v1372) = v1372 + 1;
            v438 = *(unsigned __int8 **)(v437 - 96);
            if (*(unsigned char *)(*(void *)(v437 - 32) + 16) == 16) {
              uint64_t v439 = *(void *)(v437 - 32);
            }
            else {
              uint64_t v439 = 0;
            }
            v440 = (uint64_t *)(v439 + 24);
            if (*(_DWORD *)(v439 + 32) >= 0x41u) {
              v440 = (uint64_t *)*v440;
            }
            if (!v438) {
              break;
            }
            uint64_t v437 = *(void *)(v437 - 96);
          }
          while (v438[16] == 90);
          uint64_t v504 = *v440;
          if (*v440)
          {
LABEL_820:
            if (v438 != (unsigned __int8 *)llvm::UndefValue::get(v431, v434))
            {
              uint64_t v506 = v504 - 1;
              do
              {
                v507 = *(llvm::ConstantInt **)(*(void *)v1383 + 1960);
                unsigned int v508 = *(_DWORD *)(*(void *)v1383 + 1968);
                LODWORD(v1368[1]) = v508 >> 8;
                if (v508 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v508 <= 0xFF) {
                  LODWORD(v509) = 0;
                }
                else {
                  unint64_t v509 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v508) + 63);
                }
                v1368[0] = (void *)(v509 & v506);
                v510 = (unsigned __int8 *)llvm::ConstantInt::get(v507, (llvm::LLVMContext *)v1368, v505);
                if (LODWORD(v1368[1]) >= 0x41 && v1368[0]) {
                  MEMORY[0x1D25D9CB0](v1368[0], 0x1000C8000313F17);
                }
                __int16 v1370 = 257;
                v511 = sub_1CB8445F4((uint64_t)&v1376, v438, v510, (uint64_t)v1368);
                if (v1372 >= (unint64_t)HIDWORD(v1372)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v1371 + v1372) = v511;
                LODWORD(v1372) = v1372 + 1;
                --v506;
              }
              while (v506 != -1);
            }
          }
        }
        else if (v322 >= 2)
        {
          unsigned int v441 = v322 - 1;
          do
          {
            uint64_t v442 = v441;
            v443 = *(llvm::ConstantInt **)(*(void *)v1383 + 1960);
            unsigned int v444 = *(_DWORD *)(*(void *)v1383 + 1968);
            LODWORD(v1368[1]) = v444 >> 8;
            if (v444 >> 8 > 0x40) {
              operator new[]();
            }
            if (v444 <= 0xFF) {
              LODWORD(v445) = 0;
            }
            else {
              unint64_t v445 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v444) + 63);
            }
            v1368[0] = (void *)(v445 & v441);
            v446 = (unsigned __int8 *)llvm::ConstantInt::get(v443, (llvm::LLVMContext *)v1368, v435);
            if (LODWORD(v1368[1]) >= 0x41 && v1368[0]) {
              MEMORY[0x1D25D9CB0](v1368[0], 0x1000C8000313F17);
            }
            __int16 v1370 = 257;
            v447 = sub_1CB8445F4((uint64_t)&v1376, (unsigned __int8 *)v323, v446, (uint64_t)v1368);
            if (v1372 >= (unint64_t)HIDWORD(v1372)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v1371 + v1372) = v447;
            LODWORD(v1372) = v1372 + 1;
            --v441;
          }
          while (v442);
        }
        if (v322 >= v1372) {
          uint64_t v512 = v1372;
        }
        else {
          uint64_t v512 = v322;
        }
        if (v322 == 1)
        {
          v513 = sub_1CB8451C0((void ***)v323, (uint64_t)&v1376);
          uint64_t v32 = v1337;
        }
        else
        {
          v513 = (unsigned __int8 *)llvm::UndefValue::get(v431, v434);
          if (v1372)
          {
            v514 = (char *)v1371 + 8 * v1372 - 8;
            if (v1371 < (llvm::Value *)v514)
            {
              v515 = (char *)v1371 + 8;
              do
              {
                uint64_t v516 = *((void *)v515 - 1);
                *((void *)v515 - 1) = *(void *)v514;
                *(void *)v514 = v516;
                v514 -= 8;
                BOOL v218 = v515 >= v514;
                v515 += 8;
              }
              while (!v218);
            }
          }
          uint64_t v32 = v1337;
          if (v512)
          {
            for (uint64_t j = 0; j != v512; ++j)
            {
              v519 = sub_1CB8451C0(*((void ****)v1371 + j), (uint64_t)&v1376);
              v520 = *(llvm::ConstantInt **)(*(void *)v1383 + 1960);
              unsigned int v521 = *(_DWORD *)(*(void *)v1383 + 1968);
              LODWORD(v1368[1]) = v521 >> 8;
              if (v521 >> 8 > 0x40) {
                operator new[]();
              }
              if (v521 <= 0xFF) {
                unint64_t v522 = 0;
              }
              else {
                unint64_t v522 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v521) + 63);
              }
              v1368[0] = (void *)(v522 & j);
              v523 = (unsigned __int8 *)llvm::ConstantInt::get(v520, (llvm::LLVMContext *)v1368, v518);
              uint64_t v32 = v1337;
              if (LODWORD(v1368[1]) >= 0x41 && v1368[0]) {
                MEMORY[0x1D25D9CB0](v1368[0], 0x1000C8000313F17);
              }
              __int16 v1370 = 257;
              v513 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1376, v513, v519, v523, (uint64_t)v1368);
            }
          }
        }
        uint64_t v524 = *(void *)(v323 + 8);
        if (v524)
        {
          while (1)
          {
            v525 = *(llvm::ValueAsMetadata **)(v524 + 24);
            if (*((unsigned __int8 *)v525 + 16) >= 0x1Cu && v525 == v34) {
              break;
            }
            uint64_t v524 = *(void *)(v524 + 8);
            if (!v524) {
              goto LABEL_864;
            }
          }
          llvm::User::replaceUsesOfWith((llvm::User *)(v33 - 3), (llvm::Value *)v323, (llvm::Value *)v513);
        }
LABEL_864:
        if (*(unsigned __int8 *)(v323 + 16) < 0x1Cu || *(void *)(v323 + 8))
        {
LABEL_1237:
          if (v1376 != v1378) {
            free(v1376);
          }
          v458 = v1371;
          if (v1371 == (llvm::Value *)&v1373) {
            goto LABEL_729;
          }
          goto LABEL_1240;
        }
        v527 = v1345;
        uint64_t v528 = HIDWORD(v1346);
        if (v1345 == v1344)
        {
          if (HIDWORD(v1346))
          {
            v529 = 0;
            uint64_t v530 = 8 * HIDWORD(v1346);
            v531 = (uint64_t *)v1345;
            while (*v531 != v323)
            {
              if (*v531 == -2) {
                v529 = v531;
              }
              ++v531;
              v530 -= 8;
              if (!v530)
              {
                if (!v529) {
                  goto LABEL_874;
                }
                uint64_t *v529 = v323;
                --v1347;
                goto LABEL_1237;
              }
            }
            goto LABEL_1237;
          }
LABEL_874:
          unsigned int v532 = v1346;
          if (HIDWORD(v1346) < v1346)
          {
            ++HIDWORD(v1346);
            *(void *)&v1345[8 * v528] = v323;
            goto LABEL_1237;
          }
        }
        else
        {
          unsigned int v532 = v1346;
        }
        if (3 * v532 <= 4 * (HIDWORD(v1346) - v1347))
        {
          if (v532 >= 0x40) {
            v532 *= 2;
          }
          else {
            unsigned int v532 = 128;
          }
        }
        else if (v532 - HIDWORD(v1346) >= v532 >> 3)
        {
          goto LABEL_1039;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v532);
        unsigned int v532 = v1346;
        v527 = v1345;
LABEL_1039:
        unsigned int v601 = v532 - 1;
        unsigned int v602 = (v532 - 1) & ((v323 >> 4) ^ (v323 >> 9));
        v603 = &v527[8 * v602];
        uint64_t v604 = *(void *)v603;
        if (*(void *)v603 == -1)
        {
          v605 = 0;
LABEL_1230:
          if (v605) {
            v679 = v605;
          }
          else {
            v679 = (uint64_t *)v603;
          }
          if (*v679 != v323)
          {
            if (*v679 == -2) {
              --v1347;
            }
            else {
              ++HIDWORD(v1346);
            }
            uint64_t *v679 = v323;
          }
        }
        else
        {
          v605 = 0;
          int v606 = 1;
          while (v604 != v323)
          {
            if (v605) {
              BOOL v607 = 0;
            }
            else {
              BOOL v607 = v604 == -2;
            }
            if (v607) {
              v605 = (uint64_t *)v603;
            }
            unsigned int v608 = v602 + v606++;
            unsigned int v602 = v608 & v601;
            v603 = &v527[8 * (v608 & v601)];
            uint64_t v604 = *(void *)v603;
            if (*(void *)v603 == -1) {
              goto LABEL_1230;
            }
          }
        }
        goto LABEL_1237;
      }
      if (v198 > 1681)
      {
        switch(v198)
        {
          case 1682:
          case 1683:
          case 1684:
          case 1685:
          case 1686:
          case 1687:
          case 1688:
          case 1689:
          case 1690:
          case 1691:
          case 1692:
          case 1693:
          case 1694:
          case 1695:
          case 1696:
          case 1697:
          case 1698:
          case 1699:
          case 1700:
          case 1701:
          case 1702:
          case 1703:
          case 1704:
          case 1705:
          case 1706:
          case 1707:
          case 1708:
          case 1709:
          case 1710:
          case 1711:
          case 1712:
          case 1713:
          case 1714:
          case 1715:
          case 1716:
          case 1717:
          case 1718:
          case 1719:
          case 1720:
          case 1721:
          case 1722:
          case 1723:
          case 1724:
          case 1725:
          case 1726:
          case 1727:
          case 1728:
          case 1729:
          case 1730:
          case 1731:
          case 1732:
          case 1733:
          case 1734:
          case 1735:
          case 1736:
          case 1737:
          case 1738:
          case 1739:
          case 1740:
          case 1741:
          case 1742:
          case 1743:
          case 1744:
          case 1745:
          case 1746:
          case 1747:
          case 1748:
          case 1749:
          case 1750:
          case 1751:
          case 1752:
          case 1753:
          case 1754:
          case 1755:
          case 1756:
          case 1757:
          case 1758:
          case 1759:
          case 1760:
          case 1761:
          case 1762:
          case 1763:
          case 1764:
          case 1765:
          case 1766:
          case 1767:
          case 1768:
          case 1769:
          case 1770:
          case 1771:
          case 1772:
          case 1773:
          case 1774:
          case 1775:
          case 1776:
          case 1777:
          case 1778:
          case 1779:
          case 1780:
          case 1781:
          case 1782:
          case 1783:
          case 1784:
          case 1785:
          case 1786:
          case 1787:
          case 1788:
          case 1789:
          case 1790:
          case 1791:
          case 1792:
          case 1793:
          case 1794:
          case 1795:
          case 1796:
          case 1797:
          case 1798:
          case 1799:
          case 1800:
          case 1801:
          case 1802:
          case 1803:
          case 1804:
          case 1805:
          case 1806:
          case 1807:
          case 1808:
          case 1809:
          case 1810:
          case 1811:
          case 1812:
          case 1813:
          case 1814:
          case 1815:
          case 1816:
          case 1817:
          case 1818:
          case 1819:
          case 1820:
          case 1821:
            goto LABEL_458;
          case 1924:
          case 1925:
            uint64_t v634 = *((void *)v34 - 4 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF));
            if (*(unsigned char *)(v634 + 16) != 90) {
              goto LABEL_1589;
            }
            v635 = *(llvm::Type **)v634;
            v1371 = (llvm::Value *)&v1373;
            v1372 = (llvm::Value *)0x400000000;
            v1349 = v1353;
            uint64_t v1350 = (uint64_t)v1353;
            *(void *)v1351 = 4;
            int v1352 = 0;
            while (1)
            {
              if (v1372 >= (unint64_t)HIDWORD(v1372)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v1371 + v1372) = *(void *)(v634 - 64);
              LODWORD(v1372) = v1372 + 1;
              uint64_t v636 = *(void *)(v634 - 96);
              uint64_t v637 = v1350;
              uint64_t v638 = v1351[1];
              if ((void *)v1350 == v1349)
              {
                if (v1351[1])
                {
                  v639 = 0;
                  uint64_t v640 = 8 * v1351[1];
                  v641 = (void *)v1350;
                  do
                  {
                    if (*v641 == v634) {
                      goto LABEL_1152;
                    }
                    if (*v641 == -2) {
                      v639 = v641;
                    }
                    ++v641;
                    v640 -= 8;
                  }
                  while (v640);
                  if (v639)
                  {
                    void *v639 = v634;
                    --v1352;
                    if (!v636) {
                      goto LABEL_1249;
                    }
                    goto LABEL_1153;
                  }
                }
                unsigned int v642 = v1351[0];
                if (v1351[1] < v1351[0])
                {
                  ++v1351[1];
                  *(void *)(v1350 + 8 * v638) = v634;
                  if (!v636) {
                    goto LABEL_1249;
                  }
                  goto LABEL_1153;
                }
              }
              else
              {
                unsigned int v642 = v1351[0];
              }
              if (3 * v642 <= 4 * (v1351[1] - v1352))
              {
                if (v642 >= 0x40) {
                  v642 *= 2;
                }
                else {
                  unsigned int v642 = 128;
                }
              }
              else if (v642 - v1351[1] >= v642 >> 3)
              {
                goto LABEL_1133;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1349, v642);
              unsigned int v642 = v1351[0];
              uint64_t v637 = v1350;
LABEL_1133:
              unsigned int v643 = v642 - 1;
              unsigned int v644 = (v642 - 1) & ((v634 >> 4) ^ (v634 >> 9));
              v645 = (void *)(v637 + 8 * v644);
              uint64_t v646 = *v645;
              if (*v645 == -1)
              {
                v647 = 0;
LABEL_1145:
                if (v647) {
                  v651 = v647;
                }
                else {
                  v651 = v645;
                }
                if (*v651 != v634)
                {
                  if (*v651 == -2) {
                    --v1352;
                  }
                  else {
                    ++v1351[1];
                  }
                  void *v651 = v634;
                }
              }
              else
              {
                v647 = 0;
                int v648 = 1;
                while (v646 != v634)
                {
                  if (v647) {
                    BOOL v649 = 0;
                  }
                  else {
                    BOOL v649 = v646 == -2;
                  }
                  if (v649) {
                    v647 = v645;
                  }
                  unsigned int v650 = v644 + v648++;
                  unsigned int v644 = v650 & v643;
                  v645 = (void *)(v637 + 8 * (v650 & v643));
                  uint64_t v646 = *v645;
                  if (*v645 == -1) {
                    goto LABEL_1145;
                  }
                }
              }
LABEL_1152:
              if (!v636)
              {
LABEL_1249:
                int v680 = (int)v1372;
                if (!v1372) {
                  goto LABEL_1356;
                }
                v681 = (char *)v1371 + 8 * v1372 - 8;
                if (v1371 < (llvm::Value *)v681)
                {
                  v682 = (char *)v1371 + 8;
                  do
                  {
                    uint64_t v683 = *((void *)v682 - 1);
                    *((void *)v682 - 1) = *(void *)v681;
                    *(void *)v681 = v683;
                    v681 -= 8;
                    BOOL v218 = v682 >= v681;
                    v682 += 8;
                  }
                  while (!v218);
                }
                if (v680 != 3) {
                  goto LABEL_1356;
                }
                v1321 = v635;
                uint64_t v1322 = 0;
                unint64_t v684 = 0;
                int v685 = 0;
                int v686 = 0;
                int v687 = 0;
                v688 = 0;
                while (2)
                {
                  uint64_t v689 = *((void *)v1371 + v684);
                  int v690 = *(unsigned __int8 *)(v689 + 16);
                  if (v689 && v690 == 74)
                  {
                    uint64_t v689 = *(void *)(v689 - 32);
                    int v690 = *(unsigned __int8 *)(v689 + 16);
                  }
                  if (v690 != 84) {
                    goto LABEL_1356;
                  }
                  v1324 = v688;
                  uint64_t v691 = *(void *)(v689 - 32);
                  if (!v691) {
                    goto LABEL_1356;
                  }
                  if (*(unsigned char *)(v691 + 16)) {
                    goto LABEL_1356;
                  }
                  if (*(void *)(v691 + 24) != *(void *)(v689 + 72)) {
                    goto LABEL_1356;
                  }
                  int v1323 = v687;
                  if ((*(unsigned char *)(v691 + 33) & 0x20) == 0) {
                    goto LABEL_1356;
                  }
                  int ItrKind = llvm::GetItrKind((llvm *)*(unsigned int *)(v691 + 36));
                  if ((ItrKind - 4) < 0xFFFFFFFD || v684 && ItrKind != v685) {
                    goto LABEL_1356;
                  }
                  int v1326 = ItrKind;
                  v693 = *(unsigned __int8 **)(v689 - 32 * (*(_DWORD *)(v689 + 20) & 0x7FFFFFF));
                  int v694 = v693[16];
                  uint64_t v695 = v694 == 62 ? *(void *)(v689 - 32 * (*(_DWORD *)(v689 + 20) & 0x7FFFFFF)) : 0;
                  uint64_t v696 = v694 == 5 ? *(void *)(v689 - 32 * (*(_DWORD *)(v689 + 20) & 0x7FFFFFF)) : 0;
                  if (!(v696 | v695)) {
                    goto LABEL_1356;
                  }
                  if (v696 && *(_WORD *)(v696 + 18) == 34)
                  {
                    uint64_t v697 = 64;
                    if (*(unsigned char *)(v696 + 16) != 62) {
                      uint64_t v697 = 24;
                    }
                    int v698 = *(_DWORD *)(v696 + 20);
                    if ((v698 & 0x40000000) != 0)
                    {
                      v699 = *(void **)(v696 - 8);
                      v693 = (unsigned __int8 *)&v699[4 * (v698 & 0x7FFFFFF)];
                    }
                    else
                    {
                      v699 = (void *)(v696 - 32 * (v698 & 0x7FFFFFF));
                    }
                    uint64_t v700 = *(void *)(v696 + v697) | 4;
                    v701 = (llvm::Constant **)(v699 + 4);
                    v1376 = v699 + 4;
                    uint64_t v1377 = v700;
                    if (v699 + 4 != (void *)v693)
                    {
                      do
                      {
                        uint64_t v702 = v699[4];
                        v699 += 4;
                        if (*(unsigned __int8 *)(v702 + 16) - 11 >= 2)
                        {
                          unint64_t v703 = v1377 & 0xFFFFFFFFFFFFFFF8;
                          if ((v1377 & 4) == 0 || !v703)
                          {
                            AggregateElement = *v701;
                            if (*v701) {
                              BOOL v705 = *((unsigned char *)*v701 + 16) == 16;
                            }
                            else {
                              BOOL v705 = 0;
                            }
                            if (!v705) {
                              AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
                            }
                            v708 = (unsigned int *)*((void *)AggregateElement + 3);
                            v706 = (unsigned int *)((char *)AggregateElement + 24);
                            v707 = v708;
                            if (v706[2] < 0x41) {
                              v707 = v706;
                            }
                            unint64_t v703 = *(void *)(*(void *)(v703 + 16) + 8 * *v707);
                          }
                          int v709 = *(unsigned __int8 *)(v703 + 8);
                          if (v703) {
                            BOOL v710 = v709 == 17;
                          }
                          else {
                            BOOL v710 = 0;
                          }
                          if (v710 || (unint64_t v711 = 0, v703) && v709 == 18) {
                            unint64_t v711 = *(unsigned int *)(v703 + 32);
                          }
                          uint64_t v712 = *v699;
                          if (!*v699 || *(unsigned char *)(v712 + 16) != 16) {
                            goto LABEL_1322;
                          }
                          if ((v1377 & 4) != 0)
                          {
                            v713 = (unint64_t *)(v712 + 24);
                            uint64_t v714 = *(unsigned int *)(v712 + 32);
                            if (v714 >= 0x41)
                            {
                              int v715 = 0;
                              int64_t v716 = (unint64_t)(v714 + 63) >> 6;
                              do
                              {
                                BOOL v590 = v716-- < 1;
                                if (v590) {
                                  break;
                                }
                                unint64_t v717 = *(void *)(*v713 + 8 * v716);
                                v715 += __clz(v717);
                              }
                              while (!v717);
                              int v718 = v714 | 0xFFFFFFC0;
                              if ((v714 & 0x3F) == 0) {
                                int v718 = 0;
                              }
                              if ((v714 - v715 - v718) > 0x40) {
                                goto LABEL_1322;
                              }
                              v713 = (unint64_t *)*v713;
                            }
                            if (*v713 >= v711) {
                              goto LABEL_1322;
                            }
                          }
                        }
                        sub_1CB8460E4((uint64_t)&v1376);
                        v701 = (llvm::Constant **)v1376;
                      }
                      while (v1376 != v693);
                      int v698 = *(_DWORD *)(v696 + 20);
                    }
                    v719 = (uint64_t *)(v696 - 32 * (v698 & 0x7FFFFFF));
                    if (*(unsigned char *)(v719[8] + 16) == 16) {
                      uint64_t v720 = v719[8];
                    }
                    else {
                      uint64_t v720 = 0;
                    }
                    if (*(unsigned char *)(v719[4] + 16) == 16) {
                      uint64_t v721 = v719[4];
                    }
                    else {
                      uint64_t v721 = 0;
                    }
                    v722 = (void *)(v720 + 24);
                    int v685 = v1326;
                    if (*(_DWORD *)(v720 + 32) < 0x41u)
                    {
LABEL_1335:
                      v726 = (void *)*v722;
                      v727 = (void *)(v721 + 24);
                      if (*(_DWORD *)(v721 + 32) >= 0x41u) {
                        v727 = (void *)*v727;
                      }
                      uint64_t v728 = *v719;
                      if (*(unsigned char *)(v728 + 16) == 3) {
                        v729 = (uint64_t *)v728;
                      }
                      else {
                        v729 = 0;
                      }
                      if (v684)
                      {
                        BOOL v731 = v1324 == v729 && v686 + 1 == v726 && v1323 == *(_DWORD *)v727;
                        if (!v731 || *(void *)(v689 - 32 * (*(_DWORD *)(v689 + 20) & 0x7FFFFFF) + 32) != v1322) {
                          goto LABEL_1356;
                        }
                      }
                      else
                      {
                        uint64_t v1322 = *(void *)(v689 - 32 * (*(_DWORD *)(v689 + 20) & 0x7FFFFFF) + 32);
                      }
                      ++v684;
                      int v686 = (int)v726;
                      int v687 = *(_DWORD *)v727;
                      v688 = v729;
                      if (v684 >= v1372)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1328 + 176))(v1328, 18))
                        {
                          (*(void (**)(void **__return_ptr))(*(void *)v1328 + 128))(&v1376);
                          uint64_t v732 = *(void *)(*(uint64_t (**)(void *))(*(void *)v1376 + 32))(v1376);
                          v1028 = v1376;
                          v1376 = 0;
                          if (v1028) {
                            (*(void (**)(void *))(*(void *)v1028 + 8))(v1028);
                          }
                        }
                        else
                        {
                          uint64_t v732 = 0;
                        }
                        if (v732 != v1322) {
                          goto LABEL_1356;
                        }
                        if ((*((_DWORD *)v1321 + 2) & 0xFE) == 0x12) {
                          int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)v1321 + 2));
                        }
                        else {
                          int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v1321);
                        }
                        if (v1326 == 1)
                        {
                          BOOL v1030 = PrimitiveSizeInBits == 16;
                          int v1031 = 1920;
                        }
                        else
                        {
                          BOOL v1030 = PrimitiveSizeInBits == 16;
                          if (v1326 == 2) {
                            int v1031 = 1922;
                          }
                          else {
                            int v1031 = 1918;
                          }
                        }
                        if (v1030) {
                          int v1032 = v1031 + 1;
                        }
                        else {
                          int v1032 = v1031;
                        }
                        v1033 = 0;
                        uint64_t v1034 = *(void *)*(v33 - 3);
                        v1376 = v1378;
                        uint64_t v1377 = 0x200000000;
                        uint64_t v1383 = v1034;
                        v1384 = &v1392;
                        v1385 = v1393;
                        uint64_t v1386 = 0;
                        int v1387 = 0;
                        __int16 v1388 = 512;
                        char v1389 = 7;
                        v1381 = 0;
                        v1382 = 0;
                        uint64_t v1390 = 0;
                        uint64_t v1391 = 0;
                        v1392 = &unk_1F2616E88;
                        v1393[0] = &unk_1F2617008;
                        v1381 = (uint64_t *)v33[2];
                        v1382 = (unsigned __int8 *)v33;
                        v1035 = (void *)v33[3];
                        v1342[0] = v1035;
                        if (v1035)
                        {
                          llvm::MetadataTracking::track((uint64_t)v1342, (unsigned __int8 *)v1035, 2);
                          v1033 = v1342[0];
                        }
                        sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v1033);
                        if (v1342[0])
                        {
                          int v1087 = *(unsigned __int8 *)v1342[0];
                          if ((v1087 - 4) > 0x1E)
                          {
                            if ((v1087 - 3) >= 0xFFFFFFFE) {
                              v1090 = v1342[0];
                            }
                            else {
                              v1090 = 0;
                            }
                            if ((v1087 - 3) < 0xFFFFFFFE)
                            {
                              if (v1087 == 3) {
                                v1342[0][1] = 0;
                              }
                              goto LABEL_1993;
                            }
                            unint64_t v1089 = (unint64_t)(v1090 + 1);
                          }
                          else
                          {
                            if ((*((unsigned char *)v1342[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1342[0] + 3)) {
                              goto LABEL_1993;
                            }
                            uint64_t v1088 = v1342[0][2];
                            if ((v1088 & 4) == 0) {
                              goto LABEL_1993;
                            }
                            unint64_t v1089 = v1088 & 0xFFFFFFFFFFFFFFF8;
                            if (!v1089) {
                              goto LABEL_1993;
                            }
                          }
                          v1368[0] = v1342;
                          sub_1CC5FA668(v1089 + 16, v1368);
                        }
LABEL_1993:
                        v1036 = *(uint64_t ***)(v1329 + 40);
                        llvm::Intrinsic::getType(*v1036, v1032, 0, 0);
                        v1037 = (unsigned __int8 *)off_1E6830B58[v1032];
                        if (v1037) {
                          v1038 = (const char *)strlen(off_1E6830B58[v1032]);
                        }
                        else {
                          v1038 = 0;
                        }
                        Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v1036, v1032, 0, 0);
                        llvm::Module::getOrInsertFunction((uint64_t)v1036, v1037, v1038, Type, 0);
                        uint64_t v1041 = v1040;
                        v1368[0] = &v1369;
                        v1368[1] = (void *)0x400000000;
                        uint64_t v1042 = *v729;
                        if ((*(_DWORD *)(*v729 + 8) & 0xFE) == 0x12) {
                          uint64_t v1042 = **(void **)(v1042 + 16);
                        }
                        v1043 = **(llvm::LLVMContext ***)(v1042 + 16);
                        __int16 v1343 = 257;
                        v1044 = sub_1CD3C8B64((uint64_t)&v1376, v1043, v729, 0, 0, (uint64_t)v1342);
                        if (LODWORD(v1368[1]) >= (unint64_t)HIDWORD(v1368[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v1368[0] + LODWORD(v1368[1])) = v1044;
                        uint64_t v1045 = ++LODWORD(v1368[1]);
                        if (v1041) {
                          v1046 = *(uint64_t ***)(v1041 + 24);
                        }
                        else {
                          v1046 = 0;
                        }
                        __int16 v1343 = 257;
                        v1047 = (llvm::Value *)sub_1CB845BAC((uint64_t *)&v1376, v1046, (uint64_t **)v1041, (uint64_t *)v1368[0], v1045, (uint64_t)v1342, 0);
                        llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v33 - 3), v1047, (llvm::Value *)1);
                        v1048 = v1345;
                        uint64_t v1049 = HIDWORD(v1346);
                        if (v1345 == v1344)
                        {
                          if (HIDWORD(v1346))
                          {
                            v1050 = 0;
                            uint64_t v1051 = 8 * HIDWORD(v1346);
                            v1052 = (llvm::ValueAsMetadata **)v1345;
                            while (*v1052 != v34)
                            {
                              if (*v1052 == (llvm::ValueAsMetadata *)-2) {
                                v1050 = v1052;
                              }
                              ++v1052;
                              v1051 -= 8;
                              if (!v1051)
                              {
                                if (!v1050) {
                                  goto LABEL_2009;
                                }
                                *v1050 = v34;
                                --v1347;
                                break;
                              }
                            }
LABEL_2034:
                            v1064 = v1344;
                            v1063 = v1345;
                            unsigned int v1065 = HIDWORD(v1346);
                            unsigned int v1066 = v1346;
                            if ((void *)v1350 == v1349) {
                              v1067 = &v1351[1];
                            }
                            else {
                              v1067 = v1351;
                            }
                            uint64_t v1068 = *v1067;
                            if (v1068)
                            {
                              uint64_t v1069 = 8 * v1068;
                              v1070 = (unint64_t *)v1350;
                              while (*v1070 >= 0xFFFFFFFFFFFFFFFELL)
                              {
                                ++v1070;
                                v1069 -= 8;
                                if (!v1069) {
                                  goto LABEL_2088;
                                }
                              }
                            }
                            else
                            {
                              v1070 = (unint64_t *)v1350;
                            }
                            v1071 = (unint64_t *)(v1350 + 8 * v1068);
                            if (v1070 == v1071) {
                              goto LABEL_2088;
                            }
                            unint64_t v1072 = *v1070;
LABEL_2045:
                            if (*(void *)(v1072 + 8)) {
                              goto LABEL_2078;
                            }
                            if (v1063 == v1064)
                            {
                              if (v1065)
                              {
                                v1073 = 0;
                                uint64_t v1074 = 8 * v1065;
                                v1075 = (unint64_t *)v1064;
                                while (*v1075 != v1072)
                                {
                                  if (*v1075 == -2) {
                                    v1073 = v1075;
                                  }
                                  ++v1075;
                                  v1074 -= 8;
                                  if (!v1074)
                                  {
                                    if (!v1073) {
                                      goto LABEL_2054;
                                    }
                                    unint64_t *v1073 = v1072;
                                    --v1347;
                                    break;
                                  }
                                }
LABEL_2077:
                                v1064 = v1344;
                                v1063 = v1345;
                                unsigned int v1065 = HIDWORD(v1346);
                                unsigned int v1066 = v1346;
LABEL_2078:
                                v1085 = v1070 + 1;
                                while (v1085 != v1071)
                                {
                                  unint64_t v1086 = *v1085++;
                                  unint64_t v1072 = v1086;
                                  if (v1086 <= 0xFFFFFFFFFFFFFFFDLL)
                                  {
                                    v1070 = v1085 - 1;
                                    goto LABEL_2045;
                                  }
                                }
LABEL_2088:
                                if (v1368[0] != &v1369) {
                                  free(v1368[0]);
                                }
                                if (v1376 != v1378) {
                                  free(v1376);
                                }
                                int v1338 = 1;
                                goto LABEL_1356;
                              }
LABEL_2054:
                              if (v1066 > v1065)
                              {
                                HIDWORD(v1346) = v1065 + 1;
                                *(void *)&v1064[8 * v1065] = v1072;
                                goto LABEL_2077;
                              }
                            }
                            if (3 * v1066 <= 4 * (v1065 - v1347))
                            {
                              if (v1066 >= 0x40) {
                                v1066 *= 2;
                              }
                              else {
                                unsigned int v1066 = 128;
                              }
                            }
                            else if (v1066 - v1065 >= v1066 >> 3)
                            {
                              goto LABEL_2058;
                            }
                            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v1066);
                            unsigned int v1066 = v1346;
                            v1063 = v1345;
LABEL_2058:
                            unsigned int v1076 = v1066 - 1;
                            unsigned int v1077 = (v1066 - 1) & ((v1072 >> 4) ^ (v1072 >> 9));
                            v1078 = &v1063[8 * v1077];
                            uint64_t v1079 = *(void *)v1078;
                            if (*(void *)v1078 == -1)
                            {
                              v1080 = 0;
LABEL_2070:
                              if (v1080) {
                                v1084 = v1080;
                              }
                              else {
                                v1084 = (unint64_t *)v1078;
                              }
                              if (*v1084 != v1072)
                              {
                                if (*v1084 == -2) {
                                  --v1347;
                                }
                                else {
                                  ++HIDWORD(v1346);
                                }
                                unint64_t *v1084 = v1072;
                              }
                            }
                            else
                            {
                              v1080 = 0;
                              int v1081 = 1;
                              while (v1079 != v1072)
                              {
                                if (v1080) {
                                  BOOL v1082 = 0;
                                }
                                else {
                                  BOOL v1082 = v1079 == -2;
                                }
                                if (v1082) {
                                  v1080 = (unint64_t *)v1078;
                                }
                                unsigned int v1083 = v1077 + v1081++;
                                unsigned int v1077 = v1083 & v1076;
                                v1078 = &v1063[8 * (v1083 & v1076)];
                                uint64_t v1079 = *(void *)v1078;
                                if (*(void *)v1078 == -1) {
                                  goto LABEL_2070;
                                }
                              }
                            }
                            goto LABEL_2077;
                          }
LABEL_2009:
                          unsigned int v1053 = v1346;
                          if (HIDWORD(v1346) < v1346)
                          {
                            ++HIDWORD(v1346);
                            *(void *)&v1345[8 * v1049] = v34;
                            goto LABEL_2034;
                          }
                        }
                        else
                        {
                          unsigned int v1053 = v1346;
                        }
                        if (3 * v1053 <= 4 * (HIDWORD(v1346) - v1347))
                        {
                          if (v1053 >= 0x40) {
                            v1053 *= 2;
                          }
                          else {
                            unsigned int v1053 = 128;
                          }
                        }
                        else if (v1053 - HIDWORD(v1346) >= v1053 >> 3)
                        {
                          goto LABEL_2014;
                        }
                        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v1053);
                        unsigned int v1053 = v1346;
                        v1048 = v1345;
LABEL_2014:
                        unsigned int v1054 = v1053 - 1;
                        unsigned int v1055 = (v1053 - 1) & ((v34 >> 4) ^ (v34 >> 9));
                        v1056 = &v1048[8 * v1055];
                        v1057 = *(llvm::ValueAsMetadata **)v1056;
                        if (*(void *)v1056 == -1)
                        {
                          v1058 = 0;
LABEL_2027:
                          if (v1058) {
                            v1062 = v1058;
                          }
                          else {
                            v1062 = (llvm::ValueAsMetadata **)v1056;
                          }
                          if (*v1062 != v34)
                          {
                            if (*v1062 == (llvm::ValueAsMetadata *)-2) {
                              --v1347;
                            }
                            else {
                              ++HIDWORD(v1346);
                            }
                            *v1062 = v34;
                          }
                        }
                        else
                        {
                          v1058 = 0;
                          int v1059 = 1;
                          while (v1057 != v34)
                          {
                            if (v1058) {
                              BOOL v1060 = 0;
                            }
                            else {
                              BOOL v1060 = v1057 == (llvm::ValueAsMetadata *)-2;
                            }
                            if (v1060) {
                              v1058 = (llvm::ValueAsMetadata **)v1056;
                            }
                            unsigned int v1061 = v1055 + v1059++;
                            unsigned int v1055 = v1061 & v1054;
                            v1056 = &v1048[8 * (v1061 & v1054)];
                            v1057 = *(llvm::ValueAsMetadata **)v1056;
                            if (*(void *)v1056 == -1) {
                              goto LABEL_2027;
                            }
                          }
                        }
                        goto LABEL_2034;
                      }
                      continue;
                    }
                  }
                  else
                  {
LABEL_1322:
                    if (!v695) {
                      goto LABEL_1356;
                    }
                    uint64_t v723 = *(_DWORD *)(v695 + 20) & 0x7FFFFFF;
                    v719 = (uint64_t *)(v695 - 32 * v723);
                    int v685 = v1326;
                    if (v723 != 1)
                    {
                      unsigned int v724 = 1;
                      while (*(unsigned char *)(v719[4 * v724] + 16) == 16)
                      {
                        if (v723 == ++v724) {
                          goto LABEL_1327;
                        }
                      }
LABEL_1356:
                      if ((void *)v1350 != v1349) {
                        free((void *)v1350);
                      }
                      uint64_t v32 = v1337;
                      if (v1371 != (llvm::Value *)&v1373) {
                        free(v1371);
                      }
                      goto LABEL_1589;
                    }
LABEL_1327:
                    if (*(unsigned char *)(v719[8] + 16) == 16) {
                      uint64_t v725 = v719[8];
                    }
                    else {
                      uint64_t v725 = 0;
                    }
                    if (*(unsigned char *)(v719[4] + 16) == 16) {
                      uint64_t v721 = v719[4];
                    }
                    else {
                      uint64_t v721 = 0;
                    }
                    v722 = (void *)(v725 + 24);
                    if (*(_DWORD *)(v725 + 32) < 0x41u) {
                      goto LABEL_1335;
                    }
                  }
                  break;
                }
                v722 = (void *)*v722;
                goto LABEL_1335;
              }
LABEL_1153:
              uint64_t v634 = v636;
              if (*(unsigned char *)(v636 + 16) != 90) {
                goto LABEL_1249;
              }
            }
          case 2022:
          case 2025:
          case 2030:
          case 2031:
          case 2032:
          case 2035:
          case 2036:
          case 2037:
          case 2038:
          case 2041:
          case 2046:
          case 2047:
          case 2048:
          case 2051:
          case 2052:
          case 2053:
          case 2054:
          case 2057:
          case 2062:
          case 2063:
          case 2064:
          case 2067:
          case 2068:
          case 2069:
          case 2070:
          case 2073:
          case 2078:
          case 2079:
          case 2080:
          case 2083:
          case 2084:
          case 2085:
            v403 = (uint64_t *)((void *)v34 - 4 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF))[16];
            uint64_t v404 = v403[1];
            if (!v404 || *(void *)(v404 + 8)) {
              goto LABEL_1589;
            }
            *(_OWORD *)v1368 = 0u;
            long long v1369 = 0u;
            unsigned int v405 = *((unsigned __int8 *)v403 + 16);
            uint64_t v406 = *v403;
            int v407 = *(_DWORD *)(*v403 + 8);
            if (v405 < 0x1C)
            {
              v408 = 0;
              int v409 = 0;
              uint64_t v410 = 0;
              goto LABEL_1200;
            }
            if ((*(_DWORD *)(*v403 + 8) & 0xFE) != 0x12) {
              v1368[0] = v403;
            }
            do
            {
              if (v405 != 90) {
                break;
              }
              int v584 = *((_DWORD *)v403 + 5);
              v585 = (v584 & 0x40000000) != 0 ? (uint64_t *)*(v403 - 1) : &v403[-4 * (v584 & 0x7FFFFFF)];
              uint64_t v586 = v585[8];
              if (!v586 || *(unsigned char *)(v586 + 16) != 16) {
                break;
              }
              v588 = (void *)(v586 + 24);
              if (*(_DWORD *)(v586 + 32) >= 0x41u) {
                v588 = (void *)*v588;
              }
              v589 = (v584 & 0x40000000) != 0 ? (uint64_t *)*(v403 - 1) : &v403[-4 * (v584 & 0x7FFFFFF)];
              v1368[*v588] = (void *)v589[4];
              v403 = (uint64_t *)*v589;
              unsigned int v405 = *((unsigned __int8 *)v403 + 16);
              BOOL v590 = v403 && v405 > 0x1B;
            }
            while (v590);
            v408 = (char *)v1368[0];
            if (v1368[0])
            {
              unint64_t v591 = 0;
              uint64_t v410 = 0;
              v592 = v1368[0];
              do
              {
                uint64_t v593 = v592[1];
                if (!v593
                  || *(void *)(v593 + 8)
                  || *((unsigned char *)v592 + 16) != 74
                  || ((int v594 = *((_DWORD *)v592 + 5), (v594 & 0x40000000) != 0)
                    ? (v595 = (uint64_t *)*(v592 - 1))
                    : (v595 = &v592[-4 * (v594 & 0x7FFFFFF)]),
                      (uint64_t v596 = *v595, (v597 = *(void *)(v596 + 8)) == 0)
                   || *(void *)(v597 + 8)
                   || *(unsigned char *)(v596 + 16) != 49
                   || (int v598 = *(_DWORD *)(v596 + 20), v410)
                   && ((v598 & 0x40000000) != 0
                     ? (uint64_t v599 = *(void *)(v596 - 8))
                     : (uint64_t v599 = v596 - 32 * (v598 & 0x7FFFFFF)),
                       v410 != *(void *)(v599 + 32))))
                {
                  uint64_t v410 = 0;
                  int v409 = v591;
                  break;
                }
                if ((v598 & 0x40000000) != 0) {
                  uint64_t v600 = *(void *)(v596 - 8);
                }
                else {
                  uint64_t v600 = v596 - 32 * (v598 & 0x7FFFFFF);
                }
                uint64_t v410 = *(void *)(v600 + 32);
                int v409 = v591 + 1;
                if (v591 > 2) {
                  break;
                }
                v592 = v1368[++v591];
              }
              while (v592);
            }
            else
            {
              int v409 = 0;
              uint64_t v410 = 0;
            }
LABEL_1200:
            if ((v407 & 0xFE) == 0x12) {
              int v668 = *(_DWORD *)(v406 + 32);
            }
            else {
              int v668 = 1;
            }
            if (!v410 || v409 != v668 || *(unsigned __int8 *)(v410 + 16) < 0x1Cu)
            {
              if (!v408)
              {
LABEL_1597:
                int v678 = 0;
                goto LABEL_1598;
              }
LABEL_1207:
              unint64_t v669 = 0;
              v670 = v408;
              do
              {
                uint64_t v671 = *((void *)v670 + 1);
                if (!v671
                  || *(void *)(v671 + 8)
                  || v670[16] != 74
                  || ((int v672 = *((_DWORD *)v670 + 5), (v672 & 0x40000000) != 0)
                    ? (v673 = (uint64_t *)*((void *)v670 - 1))
                    : (v673 = (uint64_t *)&v670[-32 * (v672 & 0x7FFFFFF)]),
                      (uint64_t v674 = *v673, (v675 = *(void *)(v674 + 8)) == 0)
                   || *(void *)(v675 + 8)
                   || ((unsigned int v676 = *(unsigned __int8 *)(v674 + 16), v676 >= 0x1C)
                     ? (BOOL v677 = v676 - 59 >= 0xFFFFFFEE)
                     : (BOOL v677 = 0),
                       !v677)))
                {
                  int v678 = v669;
                  goto LABEL_1598;
                }
                int v678 = v669 + 1;
                if (v669 > 2) {
                  break;
                }
                v670 = (char *)v1368[++v669];
              }
              while (v670);
              goto LABEL_1598;
            }
            v792 = *(llvm::Type ****)v408;
            LOWORD(v1379) = 257;
            FPCast = llvm::CastInst::CreateFPCast((llvm::CastInst *)v410, v792, (const char **)&v1376, 0, v66);
            sub_1CC5C6C08((void *)(*(void *)(v410 + 40) + 40), v410 + 24, FPCast);
            v794 = v1368[0];
            if (!v1368[0])
            {
              v408 = 0;
              int v678 = 0;
              int v1338 = 1;
              uint64_t v32 = v1337;
LABEL_1598:
              if (v668 == v678)
              {
                unint64_t v859 = 0;
                v860 = *(uint64_t **)v408;
                v861 = v1368;
                while (1)
                {
                  int v862 = *((_DWORD *)v408 + 5);
                  if ((v862 & 0x40000000) != 0) {
                    v863 = (char *)*((void *)v408 - 1);
                  }
                  else {
                    v863 = &v408[-32 * (v862 & 0x7FFFFFF)];
                  }
                  v864 = 0;
                  v865 = *(void ***)v863;
                  int v866 = *(unsigned __int8 *)(*(void *)v863 + 16);
                  uint64_t v867 = ***(void ***)v863;
                  v1376 = v1378;
                  uint64_t v1377 = 0x200000000;
                  uint64_t v1383 = v867;
                  v1384 = &v1392;
                  v1385 = v1393;
                  uint64_t v1386 = 0;
                  int v1387 = 0;
                  __int16 v1388 = 512;
                  char v1389 = 7;
                  v1381 = 0;
                  v1382 = 0;
                  uint64_t v1390 = 0;
                  uint64_t v1391 = 0;
                  v1392 = &unk_1F2616E88;
                  v1393[0] = &unk_1F2617008;
                  v1381 = v865[5];
                  v1382 = (unsigned __int8 *)(v865 + 3);
                  v868 = (llvm::Value *)v865[6];
                  v1371 = v868;
                  if (v868)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v868, 2);
                    v864 = v1371;
                  }
                  sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v864);
                  if (v1371)
                  {
                    int v900 = *(unsigned __int8 *)v1371;
                    if ((v900 - 4) > 0x1E)
                    {
                      if ((v900 - 3) >= 0xFFFFFFFE) {
                        v903 = v1371;
                      }
                      else {
                        v903 = 0;
                      }
                      if ((v900 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v902 = (unint64_t)v903 + 8;
LABEL_1668:
                        v1349 = &v1371;
                        sub_1CC5FA668(v902 + 16, &v1349);
                        goto LABEL_1606;
                      }
                      if (v900 == 3) {
                        *((void *)v1371 + 1) = 0;
                      }
                    }
                    else if ((*((unsigned char *)v1371 + 1) & 0x7F) == 2 || *((_DWORD *)v1371 + 3))
                    {
                      uint64_t v901 = *((void *)v1371 + 2);
                      if ((v901 & 4) != 0)
                      {
                        unint64_t v902 = v901 & 0xFFFFFFFFFFFFFFF8;
                        if (v902) {
                          goto LABEL_1668;
                        }
                      }
                    }
                  }
LABEL_1606:
                  uint64_t v869 = (uint64_t)*(v865 - 8);
                  if ((v866 == 44 || v866 == 42)
                    && (uint64_t v870 = *(void *)(v869 + 8)) != 0
                    && !*(void *)(v870 + 8)
                    && *(unsigned char *)(v869 + 16) == 46)
                  {
                    uint64_t v871 = *(void *)(v869 - 64);
                    uint64_t v872 = *(void *)(v869 - 32);
                    v1353[0] = 257;
                    v873 = sub_1CB843944((uint64_t)&v1376, v871, v860, (uint64_t)&v1349);
                    v1353[0] = 257;
                    v874 = sub_1CB843944((uint64_t)&v1376, v872, v860, (uint64_t)&v1349);
                    v1353[0] = 257;
                    uint64_t v875 = sub_1CB843C88((uint64_t)&v1376, (uint64_t)v873, (uint64_t)v874, (uint64_t)&v1349, 0);
                    *(unsigned char *)(v875 + 17) = *(unsigned char *)(v869 + 17) & 0xFE | *(unsigned char *)(v875 + 17) & 1;
                    uint64_t v876 = (uint64_t)*(v865 - 4);
                  }
                  else
                  {
                    v1353[0] = 257;
                    uint64_t v875 = (uint64_t)sub_1CB843944((uint64_t)&v1376, v869, v860, (uint64_t)&v1349);
                    uint64_t v876 = (uint64_t)*(v865 - 4);
                    if (v866 == 44 || v866 == 42)
                    {
                      uint64_t v877 = *(void *)(v876 + 8);
                      if (v877)
                      {
                        if (!*(void *)(v877 + 8) && *(unsigned char *)(v876 + 16) == 46)
                        {
                          uint64_t v878 = *(void *)(v876 - 64);
                          uint64_t v879 = *(void *)(v876 - 32);
                          v1353[0] = 257;
                          v880 = sub_1CB843944((uint64_t)&v1376, v878, v860, (uint64_t)&v1349);
                          v1353[0] = 257;
                          v881 = sub_1CB843944((uint64_t)&v1376, v879, v860, (uint64_t)&v1349);
                          v1353[0] = 257;
                          uint64_t v882 = sub_1CB843C88((uint64_t)&v1376, (uint64_t)v880, (uint64_t)v881, (uint64_t)&v1349, 0);
                          *(unsigned char *)(v882 + 17) = *(unsigned char *)(v876 + 17) & 0xFE | *(unsigned char *)(v882 + 17) & 1;
                          goto LABEL_1619;
                        }
                      }
                    }
                  }
                  v1353[0] = 257;
                  uint64_t v882 = (uint64_t)sub_1CB843944((uint64_t)&v1376, v876, v860, (uint64_t)&v1349);
LABEL_1619:
                  char v883 = *((unsigned char *)v865 + 16) - 28;
                  v1353[0] = 257;
                  v884 = llvm::BinaryOperator::Create(v883, (void *)v875, v882, (const char **)&v1349, 0);
                  v1353[0] = 257;
                  sub_1CB844E0C((uint64_t *)&v1376, v884, (uint64_t)&v1349);
                  *((unsigned char *)v884 + 17) = *((unsigned char *)v865 + 17) & 0xFE | *((unsigned char *)v884 + 17) & 1;
                  *v861 = v884;
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v408, v884, (llvm::Value *)1);
                  v885 = v1345;
                  uint64_t v886 = HIDWORD(v1346);
                  if (v1345 != v1344)
                  {
                    unsigned int v890 = v1346;
                    uint64_t v32 = v1337;
LABEL_1630:
                    if (3 * v890 <= 4 * (HIDWORD(v1346) - v1347))
                    {
                      if (v890 >= 0x40) {
                        v890 *= 2;
                      }
                      else {
                        unsigned int v890 = 128;
                      }
                    }
                    else if (v890 - HIDWORD(v1346) >= v890 >> 3)
                    {
                      goto LABEL_1632;
                    }
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v890);
                    unsigned int v890 = v1346;
                    v885 = v1345;
LABEL_1632:
                    unsigned int v891 = v890 - 1;
                    unsigned int v892 = (v890 - 1) & ((v408 >> 4) ^ (v408 >> 9));
                    v893 = &v885[8 * v892];
                    v894 = *(char **)v893;
                    if (*(void *)v893 == -1)
                    {
                      v895 = 0;
LABEL_1644:
                      if (v895) {
                        v899 = v895;
                      }
                      else {
                        v899 = (void **)v893;
                      }
                      if (*v899 != v408)
                      {
                        if (*v899 == (void *)-2) {
                          --v1347;
                        }
                        else {
                          ++HIDWORD(v1346);
                        }
                        *v899 = v408;
                      }
                    }
                    else
                    {
                      v895 = 0;
                      int v896 = 1;
                      while (v894 != v408)
                      {
                        if (v895) {
                          BOOL v897 = 0;
                        }
                        else {
                          BOOL v897 = v894 == (char *)-2;
                        }
                        if (v897) {
                          v895 = (void **)v893;
                        }
                        unsigned int v898 = v892 + v896++;
                        unsigned int v892 = v898 & v891;
                        v893 = &v885[8 * (v898 & v891)];
                        v894 = *(char **)v893;
                        if (*(void *)v893 == -1) {
                          goto LABEL_1644;
                        }
                      }
                    }
                    goto LABEL_1651;
                  }
                  uint64_t v32 = v1337;
                  if (!HIDWORD(v1346)) {
                    goto LABEL_1627;
                  }
                  v887 = 0;
                  uint64_t v888 = 8 * HIDWORD(v1346);
                  v889 = (char **)v1345;
                  do
                  {
                    if (*v889 == v408) {
                      goto LABEL_1651;
                    }
                    if (*v889 == (char *)-2) {
                      v887 = v889;
                    }
                    ++v889;
                    v888 -= 8;
                  }
                  while (v888);
                  if (v887)
                  {
                    *v887 = v408;
                    --v1347;
                  }
                  else
                  {
LABEL_1627:
                    unsigned int v890 = v1346;
                    if (HIDWORD(v1346) >= v1346) {
                      goto LABEL_1630;
                    }
                    ++HIDWORD(v1346);
                    *(void *)&v1345[8 * v886] = v408;
                  }
LABEL_1651:
                  if (v1376 != v1378) {
                    free(v1376);
                  }
                  if (v859 <= 2)
                  {
                    v861 = &v1368[++v859];
                    v408 = (char *)*v861;
                    if (*v861) {
                      continue;
                    }
                  }
                  int v1338 = 1;
                  v408 = (char *)v1368[0];
                  break;
                }
              }
              if (!v408) {
                goto LABEL_1589;
              }
              unint64_t v904 = 0;
              while (1)
              {
                if (v408[16] != 74) {
                  goto LABEL_1589;
                }
                int v905 = *((_DWORD *)v408 + 5);
                v906 = (v905 & 0x40000000) != 0 ? (char *)*((void *)v408 - 1) : &v408[-32 * (v905 & 0x7FFFFFF)];
                int v907 = v1338;
                uint64_t v908 = *(void *)(*(void *)v906 + 8);
                if (v908)
                {
                  if (*(void *)(v908 + 8)) {
                    break;
                  }
                }
LABEL_1822:
                int v1338 = v907;
                if (v904 <= 2)
                {
                  v408 = (char *)v1368[++v904];
                  if (v408) {
                    continue;
                  }
                }
                goto LABEL_1589;
              }
              while (1)
              {
                v909 = *(llvm::ValueAsMetadata **)(v908 + 24);
                unsigned int v910 = *((unsigned __int8 *)v909 + 16);
                BOOL v911 = v909 && v910 >= 0x1C;
                if (v911 && v910 - 59 >= 0xFFFFFFEE) {
                  break;
                }
LABEL_1793:
                uint64_t v908 = *(void *)(v908 + 8);
                if (!v908) {
                  goto LABEL_1822;
                }
              }
              v913 = 0;
              uint64_t v914 = *((void *)v909 - 8);
              uint64_t v915 = *((void *)v909 - 4);
              v916 = *(uint64_t **)v408;
              uint64_t v917 = **(void **)v909;
              v1376 = v1378;
              uint64_t v1377 = 0x200000000;
              uint64_t v1383 = v917;
              v1384 = &v1392;
              v1385 = v1393;
              uint64_t v1386 = 0;
              int v1387 = 0;
              __int16 v1388 = 512;
              char v1389 = 7;
              v1381 = 0;
              v1382 = 0;
              uint64_t v1390 = 0;
              uint64_t v1391 = 0;
              v1392 = &unk_1F2616E88;
              v1393[0] = &unk_1F2617008;
              v1381 = (uint64_t *)*((void *)v909 + 5);
              v1382 = (unsigned __int8 *)v909 + 24;
              v918 = (llvm::Value *)*((void *)v909 + 6);
              v1371 = v918;
              if (v918)
              {
                llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v918, 2);
                v913 = v1371;
              }
              sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v913);
              if (!v1371)
              {
LABEL_1696:
                v1353[0] = 257;
                v919 = sub_1CB843944((uint64_t)&v1376, v914, v916, (uint64_t)&v1349);
                v1353[0] = 257;
                v920 = sub_1CB843944((uint64_t)&v1376, v915, v916, (uint64_t)&v1349);
                v921 = *(uint64_t **)v909;
                uint64_t v922 = *((unsigned __int8 *)v909 + 16) - 28;
                v1353[0] = 257;
                v923 = sub_1CB844E98((uint64_t)&v1376, v922, (uint64_t)v919, (uint64_t)v920, (uint64_t)&v1349, 0);
                *((unsigned char *)v923 + 17) = *((unsigned char *)v909 + 17) & 0xFE | *((unsigned char *)v923 + 17) & 1;
                uint64_t v924 = *((void *)v909 + 1);
                if (v924)
                {
                  if (!*(void *)(v924 + 8) && *((unsigned char *)v909 + 16) == 46)
                  {
                    v925 = *(llvm::ValueAsMetadata **)(v924 + 24);
                    int v926 = *((unsigned __int8 *)v925 + 16);
                    if (v926 == 44 || v926 == 42)
                    {
                      int v927 = *((_DWORD *)v925 + 5);
                      if ((v927 & 0x40000000) != 0) {
                        v928 = (uint64_t *)*((void *)v925 - 1);
                      }
                      else {
                        v928 = (uint64_t *)((char *)v925 - 32 * (v927 & 0x7FFFFFF));
                      }
                      v948 = 0;
                      uint64_t v949 = *v928;
                      uint64_t v950 = v928[4];
                      uint64_t v951 = **(void **)v925;
                      v1349 = v1351;
                      uint64_t v1350 = 0x200000000;
                      uint64_t v1357 = v951;
                      v1358 = &v1366;
                      v1359 = &v1367;
                      uint64_t v1360 = 0;
                      int v1361 = 0;
                      __int16 v1362 = 512;
                      char v1363 = 7;
                      uint64_t v1355 = 0;
                      v1356 = 0;
                      uint64_t v1364 = 0;
                      uint64_t v1365 = 0;
                      v1366 = &unk_1F2616E88;
                      v1367 = &unk_1F2617008;
                      uint64_t v1355 = *((void *)v925 + 5);
                      v1356 = (char *)v925 + 24;
                      v952 = (void *)*((void *)v925 + 6);
                      v1342[0] = v952;
                      if (v952)
                      {
                        llvm::MetadataTracking::track((uint64_t)v1342, (unsigned __int8 *)v952, 2);
                        v948 = v1342[0];
                      }
                      sub_1CB8461A4((uint64_t)&v1349, 0, (uint64_t)v948);
                      if (!v1342[0])
                      {
LABEL_1745:
                        __int16 v1375 = 257;
                        if ((llvm::ValueAsMetadata *)v949 == v909)
                        {
                          v954 = sub_1CB843944((uint64_t)&v1349, v950, v916, (uint64_t)&v1371);
                          v953 = v923;
                          v923 = v954;
                        }
                        else
                        {
                          v953 = sub_1CB843944((uint64_t)&v1349, v949, v916, (uint64_t)&v1371);
                        }
                        uint64_t v955 = *((unsigned __int8 *)v925 + 16) - 28;
                        __int16 v1375 = 257;
                        v956 = sub_1CB844E98((uint64_t)&v1349, v955, (uint64_t)v953, (uint64_t)v923, (uint64_t)&v1371, 0);
                        *((unsigned char *)v956 + 17) = *((unsigned char *)v925 + 17) & 0xFE | *((unsigned char *)v956 + 17) & 1;
                        __int16 v1375 = 257;
                        v957 = sub_1CB845034((uint64_t)&v1349, (uint64_t)v956, v921, (uint64_t)&v1371);
                        llvm::Value::doRAUW(v925, v957, (llvm::Value *)1);
                        v958 = v1345;
                        uint64_t v959 = HIDWORD(v1346);
                        if (v1345 == v1344)
                        {
                          if (HIDWORD(v1346))
                          {
                            v960 = 0;
                            uint64_t v961 = 8 * HIDWORD(v1346);
                            v962 = (llvm::ValueAsMetadata **)v1345;
                            do
                            {
                              if (*v962 == v925) {
                                goto LABEL_1787;
                              }
                              if (*v962 == (llvm::ValueAsMetadata *)-2) {
                                v960 = v962;
                              }
                              ++v962;
                              v961 -= 8;
                            }
                            while (v961);
                            if (v960)
                            {
                              *v960 = v925;
                              --v1347;
                              goto LABEL_1787;
                            }
                          }
                          unsigned int v963 = v1346;
                          if (HIDWORD(v1346) < v1346)
                          {
                            ++HIDWORD(v1346);
                            *(void *)&v1345[8 * v959] = v925;
LABEL_1787:
                            if (v1349 != v1351) {
                              free(v1349);
                            }
                            uint64_t v32 = v1337;
                            goto LABEL_1790;
                          }
                        }
                        else
                        {
                          unsigned int v963 = v1346;
                        }
                        if (3 * v963 <= 4 * (HIDWORD(v1346) - v1347))
                        {
                          if (v963 >= 0x40) {
                            v963 *= 2;
                          }
                          else {
                            unsigned int v963 = 128;
                          }
                        }
                        else if (v963 - HIDWORD(v1346) >= v963 >> 3)
                        {
                          goto LABEL_1761;
                        }
                        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v963);
                        unsigned int v963 = v1346;
                        v958 = v1345;
LABEL_1761:
                        unsigned int v964 = v963 - 1;
                        unsigned int v965 = (v963 - 1) & ((v925 >> 4) ^ (v925 >> 9));
                        v966 = &v958[8 * v965];
                        v967 = *(llvm::ValueAsMetadata **)v966;
                        if (*(void *)v966 == -1)
                        {
                          v968 = 0;
LABEL_1780:
                          if (v968) {
                            v973 = v968;
                          }
                          else {
                            v973 = (llvm::ValueAsMetadata **)v966;
                          }
                          if (*v973 != v925)
                          {
                            if (*v973 == (llvm::ValueAsMetadata *)-2) {
                              --v1347;
                            }
                            else {
                              ++HIDWORD(v1346);
                            }
                            *v973 = v925;
                          }
                        }
                        else
                        {
                          v968 = 0;
                          int v969 = 1;
                          while (v967 != v925)
                          {
                            if (v968) {
                              BOOL v970 = 0;
                            }
                            else {
                              BOOL v970 = v967 == (llvm::ValueAsMetadata *)-2;
                            }
                            if (v970) {
                              v968 = (llvm::ValueAsMetadata **)v966;
                            }
                            unsigned int v971 = v965 + v969++;
                            unsigned int v965 = v971 & v964;
                            v966 = &v958[8 * (v971 & v964)];
                            v967 = *(llvm::ValueAsMetadata **)v966;
                            if (*(void *)v966 == -1) {
                              goto LABEL_1780;
                            }
                          }
                        }
                        goto LABEL_1787;
                      }
                      int v974 = *(unsigned __int8 *)v1342[0];
                      if ((v974 - 4) > 0x1E)
                      {
                        if ((v974 - 3) >= 0xFFFFFFFE) {
                          v977 = v1342[0];
                        }
                        else {
                          v977 = 0;
                        }
                        if ((v974 - 3) < 0xFFFFFFFE)
                        {
                          if (v974 == 3) {
                            v1342[0][1] = 0;
                          }
                          goto LABEL_1745;
                        }
                        unint64_t v976 = (unint64_t)(v977 + 1);
                      }
                      else
                      {
                        if ((*((unsigned char *)v1342[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1342[0] + 3)) {
                          goto LABEL_1745;
                        }
                        uint64_t v975 = v1342[0][2];
                        if ((v975 & 4) == 0) {
                          goto LABEL_1745;
                        }
                        unint64_t v976 = v975 & 0xFFFFFFFFFFFFFFF8;
                        if (!v976) {
                          goto LABEL_1745;
                        }
                      }
                      v1371 = (llvm::Value *)v1342;
                      sub_1CC5FA668(v976 + 16, &v1371);
                      goto LABEL_1745;
                    }
                  }
                }
                v1353[0] = 257;
                v929 = sub_1CB845034((uint64_t)&v1376, (uint64_t)v923, v921, (uint64_t)&v1349);
                llvm::Value::doRAUW(v909, v929, (llvm::Value *)1);
                v930 = v1345;
                uint64_t v931 = HIDWORD(v1346);
                if (v1345 == v1344)
                {
                  uint64_t v32 = v1337;
                  if (HIDWORD(v1346))
                  {
                    v932 = 0;
                    uint64_t v933 = 8 * HIDWORD(v1346);
                    v934 = (llvm::ValueAsMetadata **)v1345;
                    do
                    {
                      if (*v934 == v909) {
                        goto LABEL_1790;
                      }
                      if (*v934 == (llvm::ValueAsMetadata *)-2) {
                        v932 = v934;
                      }
                      ++v934;
                      v933 -= 8;
                    }
                    while (v933);
                    if (v932)
                    {
                      *v932 = v909;
                      --v1347;
                      goto LABEL_1790;
                    }
                  }
                  unsigned int v935 = v1346;
                  if (HIDWORD(v1346) < v1346)
                  {
                    ++HIDWORD(v1346);
                    *(void *)&v1345[8 * v931] = v909;
LABEL_1790:
                    if (v1376 != v1378) {
                      free(v1376);
                    }
                    int v907 = 1;
                    goto LABEL_1793;
                  }
                }
                else
                {
                  unsigned int v935 = v1346;
                  uint64_t v32 = v1337;
                }
                if (3 * v935 <= 4 * (HIDWORD(v1346) - v1347))
                {
                  if (v935 >= 0x40) {
                    v935 *= 2;
                  }
                  else {
                    unsigned int v935 = 128;
                  }
                }
                else if (v935 - HIDWORD(v1346) >= v935 >> 3)
                {
                  goto LABEL_1716;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v935);
                unsigned int v935 = v1346;
                v930 = v1345;
LABEL_1716:
                unsigned int v936 = v935 - 1;
                unsigned int v937 = (v935 - 1) & ((v909 >> 4) ^ (v909 >> 9));
                v938 = &v930[8 * v937];
                v939 = *(llvm::ValueAsMetadata **)v938;
                if (*(void *)v938 == -1)
                {
                  v940 = 0;
LABEL_1728:
                  if (v940) {
                    v944 = v940;
                  }
                  else {
                    v944 = (llvm::ValueAsMetadata **)v938;
                  }
                  if (*v944 != v909)
                  {
                    if (*v944 == (llvm::ValueAsMetadata *)-2) {
                      --v1347;
                    }
                    else {
                      ++HIDWORD(v1346);
                    }
                    *v944 = v909;
                  }
                }
                else
                {
                  v940 = 0;
                  int v941 = 1;
                  while (v939 != v909)
                  {
                    if (v940) {
                      BOOL v942 = 0;
                    }
                    else {
                      BOOL v942 = v939 == (llvm::ValueAsMetadata *)-2;
                    }
                    if (v942) {
                      v940 = (llvm::ValueAsMetadata **)v938;
                    }
                    unsigned int v943 = v937 + v941++;
                    unsigned int v937 = v943 & v936;
                    v938 = &v930[8 * (v943 & v936)];
                    v939 = *(llvm::ValueAsMetadata **)v938;
                    if (*(void *)v938 == -1) {
                      goto LABEL_1728;
                    }
                  }
                }
                goto LABEL_1790;
              }
              int v945 = *(unsigned __int8 *)v1371;
              if ((v945 - 4) > 0x1E)
              {
                if ((v945 - 3) >= 0xFFFFFFFE) {
                  v972 = v1371;
                }
                else {
                  v972 = 0;
                }
                if ((v945 - 3) < 0xFFFFFFFE)
                {
                  if (v945 == 3) {
                    *((void *)v1371 + 1) = 0;
                  }
                  goto LABEL_1696;
                }
                unint64_t v947 = (unint64_t)v972 + 8;
              }
              else
              {
                if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
                  goto LABEL_1696;
                }
                uint64_t v946 = *((void *)v1371 + 2);
                if ((v946 & 4) == 0) {
                  goto LABEL_1696;
                }
                unint64_t v947 = v946 & 0xFFFFFFFFFFFFFFF8;
                if (!v947) {
                  goto LABEL_1696;
                }
              }
              v1349 = &v1371;
              sub_1CC5FA668(v947 + 16, &v1349);
              goto LABEL_1696;
            }
            unint64_t v795 = 0;
            v796 = v1368;
            break;
          default:
            goto LABEL_1589;
        }
        while (2)
        {
          int v797 = v794[5];
          if ((v797 & 0x40000000) != 0) {
            v798 = (uint64_t ***)*((void *)v794 - 1);
          }
          else {
            v798 = (uint64_t ***)&v794[-8 * (v797 & 0x7FFFFFF)];
          }
          v799 = 0;
          v800 = *v798;
          uint64_t v801 = ***v798;
          v1376 = v1378;
          uint64_t v1377 = 0x200000000;
          uint64_t v1383 = v801;
          v1384 = &v1392;
          v1385 = v1393;
          uint64_t v1386 = 0;
          int v1387 = 0;
          __int16 v1388 = 512;
          char v1389 = 7;
          v1381 = 0;
          v1382 = 0;
          uint64_t v1390 = 0;
          uint64_t v1391 = 0;
          v1392 = &unk_1F2616E88;
          v1393[0] = &unk_1F2617008;
          v1381 = v800[5];
          v1382 = (unsigned __int8 *)(v800 + 3);
          v802 = (llvm::Value *)v800[6];
          v1371 = v802;
          if (v802)
          {
            llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v802, 2);
            v799 = v1371;
          }
          sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v799);
          if (v1371)
          {
            int v823 = *(unsigned __int8 *)v1371;
            if ((v823 - 4) > 0x1E)
            {
              if ((v823 - 3) >= 0xFFFFFFFE) {
                v826 = v1371;
              }
              else {
                v826 = 0;
              }
              if ((v823 - 3) < 0xFFFFFFFE)
              {
                if (v823 == 3) {
                  *((void *)v1371 + 1) = 0;
                }
                goto LABEL_1471;
              }
              unint64_t v825 = (unint64_t)v826 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
                goto LABEL_1471;
              }
              uint64_t v824 = *((void *)v1371 + 2);
              if ((v824 & 4) == 0) {
                goto LABEL_1471;
              }
              unint64_t v825 = v824 & 0xFFFFFFFFFFFFFFF8;
              if (!v825) {
                goto LABEL_1471;
              }
            }
            v1349 = &v1371;
            sub_1CC5FA668(v825 + 16, &v1349);
          }
LABEL_1471:
          int v803 = *((_DWORD *)v800 + 5);
          if ((v803 & 0x40000000) != 0) {
            v804 = *(v800 - 1);
          }
          else {
            v804 = (uint64_t *)&v800[-4 * (v803 & 0x7FFFFFF)];
          }
          uint64_t v805 = *v804;
          v1353[0] = 257;
          v806 = sub_1CB843944((uint64_t)&v1376, v805, (uint64_t *)v792, (uint64_t)&v1349);
          v1353[0] = 257;
          v807 = (llvm::Value *)sub_1CB843AD0((uint64_t)&v1376, (uint64_t)v806, (uint64_t)FPCast, (uint64_t)&v1349, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v794, v807, (llvm::Value *)1);
          *v796 = v807;
          v808 = v1345;
          uint64_t v809 = HIDWORD(v1346);
          if (v1345 != v1344)
          {
            unsigned int v813 = v1346;
            goto LABEL_1485;
          }
          if (!HIDWORD(v1346)) {
            goto LABEL_1482;
          }
          v810 = 0;
          uint64_t v811 = 8 * HIDWORD(v1346);
          v812 = v1345;
          do
          {
            if ((_DWORD *)*v812 == v794) {
              goto LABEL_1506;
            }
            if (*v812 == -2) {
              v810 = v812;
            }
            ++v812;
            v811 -= 8;
          }
          while (v811);
          if (!v810)
          {
LABEL_1482:
            unsigned int v813 = v1346;
            if (HIDWORD(v1346) < v1346)
            {
              ++HIDWORD(v1346);
              *(void *)&v1345[8 * v809] = v794;
              goto LABEL_1506;
            }
LABEL_1485:
            if (3 * v813 <= 4 * (HIDWORD(v1346) - v1347))
            {
              if (v813 >= 0x40) {
                v813 *= 2;
              }
              else {
                unsigned int v813 = 128;
              }
            }
            else if (v813 - HIDWORD(v1346) >= v813 >> 3)
            {
LABEL_1487:
              unsigned int v814 = v813 - 1;
              unsigned int v815 = (v813 - 1) & ((v794 >> 4) ^ (v794 >> 9));
              v816 = &v808[8 * v815];
              v817 = *(_DWORD **)v816;
              if (*(void *)v816 == -1)
              {
                v818 = 0;
LABEL_1499:
                if (v818) {
                  v822 = v818;
                }
                else {
                  v822 = v816;
                }
                if (*(_DWORD **)v822 != v794)
                {
                  if (*(void *)v822 == -2) {
                    --v1347;
                  }
                  else {
                    ++HIDWORD(v1346);
                  }
                  *(void *)v822 = v794;
                }
              }
              else
              {
                v818 = 0;
                int v819 = 1;
                while (v817 != v794)
                {
                  if (v818) {
                    BOOL v820 = 0;
                  }
                  else {
                    BOOL v820 = v817 == (_DWORD *)-2;
                  }
                  if (v820) {
                    v818 = v816;
                  }
                  unsigned int v821 = v815 + v819++;
                  unsigned int v815 = v821 & v814;
                  v816 = &v808[8 * (v821 & v814)];
                  v817 = *(_DWORD **)v816;
                  if (*(void *)v816 == -1) {
                    goto LABEL_1499;
                  }
                }
              }
LABEL_1506:
              if (v1376 != v1378) {
                free(v1376);
              }
              if (v795 > 2 || (++v795, v796 = &v1368[v795], (v794 = *v796) == 0))
              {
                int v1338 = 1;
                v408 = (char *)v1368[0];
                uint64_t v32 = v1337;
                if (!v1368[0]) {
                  goto LABEL_1597;
                }
                goto LABEL_1207;
              }
              continue;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v813);
            unsigned int v813 = v1346;
            v808 = v1345;
            goto LABEL_1487;
          }
          break;
        }
        void *v810 = v794;
        --v1347;
        goto LABEL_1506;
      }
      if ((v198 - 167) >= 2)
      {
        if (v198 != 52)
        {
          if (v198 != 139) {
            goto LABEL_1589;
          }
          uint64_t v554 = *((void *)v34 - 4 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF));
          v1368[0] = 0;
          v1342[0] = 0;
          uint64_t v555 = *(void *)(v554 + 8);
          if (!v555 || *(void *)(v555 + 8)) {
            goto LABEL_1589;
          }
          int v556 = *(unsigned __int8 *)(v554 + 16);
          if (v556 == 5)
          {
            int v978 = *(unsigned __int16 *)(v554 + 18);
            if (v978 != 21 && v978 != 18) {
              goto LABEL_1589;
            }
            v979 = (void **)(v554 - 32 * (*(_DWORD *)(v554 + 20) & 0x7FFFFFF));
            if (!*v979) {
              goto LABEL_1589;
            }
            v1368[0] = *v979;
            v557 = v979[4];
            if (!v557) {
              goto LABEL_1589;
            }
          }
          else
          {
            if (v556 != 49 && v556 != 46) {
              goto LABEL_1589;
            }
            if (!*(void *)(v554 - 64)) {
              goto LABEL_1589;
            }
            v1368[0] = *(void **)(v554 - 64);
            v557 = *(void **)(v554 - 32);
            if (!v557) {
              goto LABEL_1589;
            }
          }
          v1342[0] = v557;
          v980 = 0;
          uint64_t v981 = **(void **)v35;
          v1376 = v1378;
          uint64_t v1377 = 0x200000000;
          uint64_t v1383 = v981;
          v1384 = &v1392;
          v1385 = v1393;
          uint64_t v1386 = 0;
          int v1387 = 0;
          __int16 v1388 = 512;
          char v1389 = 7;
          v1381 = 0;
          v1382 = 0;
          uint64_t v1390 = 0;
          uint64_t v1391 = 0;
          v1392 = &unk_1F2616E88;
          v1393[0] = &unk_1F2617008;
          v1381 = (uint64_t *)*((void *)v35 + 5);
          v1382 = v35 + 24;
          v982 = (llvm::Value *)*((void *)v35 + 6);
          v1371 = v982;
          if (v982)
          {
            llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v982, 2);
            v980 = v1371;
          }
          sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v980);
          if (v1371)
          {
            int v1024 = *(unsigned __int8 *)v1371;
            if ((v1024 - 4) > 0x1E)
            {
              if ((v1024 - 3) >= 0xFFFFFFFE) {
                v1027 = v1371;
              }
              else {
                v1027 = 0;
              }
              if ((v1024 - 3) < 0xFFFFFFFE)
              {
                uint64_t v32 = v1337;
                if (v1024 == 3) {
                  *((void *)v1371 + 1) = 0;
                }
                goto LABEL_1848;
              }
              unint64_t v1026 = (unint64_t)v1027 + 8;
            }
            else
            {
              uint64_t v32 = v1337;
              if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
                goto LABEL_1848;
              }
              uint64_t v1025 = *((void *)v1371 + 2);
              if ((v1025 & 4) == 0) {
                goto LABEL_1848;
              }
              unint64_t v1026 = v1025 & 0xFFFFFFFFFFFFFFF8;
              if (!v1026) {
                goto LABEL_1848;
              }
            }
            v1349 = &v1371;
            sub_1CC5FA668(v1026 + 16, &v1349);
            uint64_t v32 = v1337;
          }
LABEL_1848:
          v1371 = *(llvm::Value **)v554;
          uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(v1329 + 40), 139, (uint64_t)&v1371, 1);
          uint64_t v984 = Declaration;
          if (Declaration)
          {
            v985 = *(uint64_t ***)(Declaration + 24);
            v1353[0] = 257;
            uint64_t v986 = sub_1CB845BAC((uint64_t *)&v1376, v985, (uint64_t **)Declaration, (uint64_t *)v1368, 1, (uint64_t)&v1349, 0);
            v987 = *(uint64_t ***)(v984 + 24);
          }
          else
          {
            v1353[0] = 257;
            uint64_t v986 = sub_1CB845BAC((uint64_t *)&v1376, 0, 0, (uint64_t *)v1368, 1, (uint64_t)&v1349, 0);
            v987 = 0;
          }
          v1353[0] = 257;
          uint64_t v991 = sub_1CB845BAC((uint64_t *)&v1376, v987, (uint64_t **)v984, (uint64_t *)v1342, 1, (uint64_t)&v1349, 0);
          if (*(unsigned char *)(v554 + 16) == 46)
          {
            v1353[0] = 257;
            v992 = (llvm::Value *)sub_1CB843C88((uint64_t)&v1376, v986, v991, (uint64_t)&v1349, 0);
          }
          else
          {
            v1353[0] = 257;
            v992 = (llvm::Value *)sub_1CB843AD0((uint64_t)&v1376, v986, v991, (uint64_t)&v1349, 0);
          }
          *((unsigned char *)v992 + 17) = *(unsigned char *)(v554 + 17) & 0xFE | *((unsigned char *)v992 + 17) & 1;
          llvm::Value::doRAUW(v34, v992, (llvm::Value *)1);
          v993 = v1345;
          uint64_t v994 = HIDWORD(v1346);
          if (v1345 != v1344)
          {
            unsigned int v998 = v1346;
            goto LABEL_1877;
          }
          if (HIDWORD(v1346))
          {
            v995 = 0;
            uint64_t v996 = 8 * HIDWORD(v1346);
            v997 = (unsigned __int8 **)v1345;
            do
            {
              if (*v997 == v35) {
                goto LABEL_1909;
              }
              if (*v997 == (unsigned __int8 *)-2) {
                v995 = v997;
              }
              ++v997;
              v996 -= 8;
            }
            while (v996);
            if (v995)
            {
              *v995 = v35;
              --v1347;
              goto LABEL_1909;
            }
          }
          unsigned int v998 = v1346;
          if (HIDWORD(v1346) < v1346)
          {
            ++HIDWORD(v1346);
            *(void *)&v1345[8 * v994] = v35;
            goto LABEL_1909;
          }
LABEL_1877:
          if (3 * v998 <= 4 * (HIDWORD(v1346) - v1347))
          {
            if (v998 >= 0x40) {
              v998 *= 2;
            }
            else {
              unsigned int v998 = 128;
            }
          }
          else if (v998 - HIDWORD(v1346) >= v998 >> 3)
          {
LABEL_1879:
            unsigned int v999 = v998 - 1;
            unsigned int v1000 = (v998 - 1) & ((v35 >> 4) ^ (v35 >> 9));
            v1001 = &v993[8 * v1000];
            v1002 = *(unsigned __int8 **)v1001;
            if (*(void *)v1001 == -1)
            {
              v1003 = 0;
              uint64_t v32 = v1337;
LABEL_1902:
              if (v1003) {
                v1008 = v1003;
              }
              else {
                v1008 = (unsigned __int8 **)v1001;
              }
              if (*v1008 != v35)
              {
                if (*v1008 == (unsigned __int8 *)-2) {
                  --v1347;
                }
                else {
                  ++HIDWORD(v1346);
                }
                *v1008 = v35;
                uint64_t v32 = v1337;
              }
            }
            else
            {
              v1003 = 0;
              int v1004 = 1;
              uint64_t v32 = v1337;
              while (v1002 != v35)
              {
                if (v1003) {
                  BOOL v1005 = 0;
                }
                else {
                  BOOL v1005 = v1002 == (unsigned __int8 *)-2;
                }
                if (v1005) {
                  v1003 = (unsigned __int8 **)v1001;
                }
                unsigned int v1006 = v1000 + v1004++;
                unsigned int v1000 = v1006 & v999;
                v1001 = &v993[8 * (v1006 & v999)];
                v1002 = *(unsigned __int8 **)v1001;
                if (*(void *)v1001 == -1) {
                  goto LABEL_1902;
                }
              }
            }
LABEL_1909:
            v1009 = v1345;
            uint64_t v1010 = HIDWORD(v1346);
            unsigned int v1011 = v1346;
            if (v1345 == v1344)
            {
              if (!HIDWORD(v1346)) {
                goto LABEL_1917;
              }
              v1012 = 0;
              uint64_t v1013 = 8 * HIDWORD(v1346);
              v1014 = v1345;
              do
              {
                if (*v1014 == v554) {
                  goto LABEL_1585;
                }
                if (*v1014 == -2) {
                  v1012 = v1014;
                }
                ++v1014;
                v1013 -= 8;
              }
              while (v1013);
              if (!v1012)
              {
LABEL_1917:
                if (v1346 > HIDWORD(v1346))
                {
                  ++HIDWORD(v1346);
                  *(void *)&v1345[8 * v1010] = v554;
                  goto LABEL_1585;
                }
                goto LABEL_1919;
              }
              void *v1012 = v554;
LABEL_1562:
              --v1347;
              goto LABEL_1585;
            }
LABEL_1919:
            if (3 * (int)v1346 <= (4 * (HIDWORD(v1346) - v1347)))
            {
              if (v1346 >= 0x40) {
                unsigned int v1011 = 2 * v1346;
              }
              else {
                unsigned int v1011 = 128;
              }
            }
            else if ((int)v1346 - HIDWORD(v1346) >= v1346 >> 3)
            {
              goto LABEL_1921;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v1011);
            unsigned int v1011 = v1346;
            v1009 = v1345;
LABEL_1921:
            unsigned int v1015 = v1011 - 1;
            unsigned int v1016 = (v1011 - 1) & ((v554 >> 4) ^ (v554 >> 9));
            v1017 = &v1009[8 * v1016];
            uint64_t v1018 = *(void *)v1017;
            if (*(void *)v1017 == -1)
            {
              v1019 = 0;
              uint64_t v32 = v1337;
LABEL_1933:
              if (v1019) {
                v1023 = v1019;
              }
              else {
                v1023 = v1017;
              }
              if (*(void *)v1023 != v554)
              {
                if (*(void *)v1023 == -2) {
                  --v1347;
                }
                else {
                  ++HIDWORD(v1346);
                }
                *(void *)v1023 = v554;
                uint64_t v32 = v1337;
              }
            }
            else
            {
              v1019 = 0;
              int v1020 = 1;
              uint64_t v32 = v1337;
              while (v1018 != v554)
              {
                if (v1019) {
                  BOOL v1021 = 0;
                }
                else {
                  BOOL v1021 = v1018 == -2;
                }
                if (v1021) {
                  v1019 = v1017;
                }
                unsigned int v1022 = v1016 + v1020++;
                unsigned int v1016 = v1022 & v1015;
                v1017 = &v1009[8 * (v1022 & v1015)];
                uint64_t v1018 = *(void *)v1017;
                if (*(void *)v1017 == -1) {
                  goto LABEL_1933;
                }
              }
            }
            goto LABEL_1585;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v998);
          unsigned int v998 = v1346;
          v993 = v1345;
          goto LABEL_1879;
        }
        v733 = (llvm::Instruction *)llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)*(v33 - 3) + 1888), 1uLL, 0);
        v734 = 0;
        size_t v735 = ((void *)v34 - 4 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF))[4];
        unint64_t v736 = *(unsigned int *)(*(v33 - 3) + 8);
        uint64_t v737 = **(void **)v35;
        v1376 = v1378;
        uint64_t v1377 = 0x200000000;
        uint64_t v1383 = v737;
        v1384 = &v1392;
        v1385 = v1393;
        uint64_t v1386 = 0;
        int v1387 = 0;
        __int16 v1388 = 512;
        char v1389 = 7;
        v1381 = 0;
        v1382 = 0;
        uint64_t v1390 = 0;
        uint64_t v1391 = 0;
        v1392 = &unk_1F2616E88;
        v1393[0] = &unk_1F2617008;
        v1381 = (uint64_t *)*((void *)v35 + 5);
        v1382 = v35 + 24;
        v738 = (llvm::Value *)*((void *)v35 + 6);
        v1371 = v738;
        if (v738)
        {
          llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v738, 2);
          v734 = v1371;
        }
        sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v734);
        if (v1371)
        {
          int v988 = *(unsigned __int8 *)v1371;
          if ((v988 - 4) > 0x1E)
          {
            if ((v988 - 3) >= 0xFFFFFFFE) {
              v1007 = v1371;
            }
            else {
              v1007 = 0;
            }
            if ((v988 - 3) < 0xFFFFFFFE)
            {
              if (v988 == 3) {
                *((void *)v1371 + 1) = 0;
              }
              goto LABEL_1363;
            }
            unint64_t v990 = (unint64_t)v1007 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
              goto LABEL_1363;
            }
            uint64_t v989 = *((void *)v1371 + 2);
            if ((v989 & 4) == 0) {
              goto LABEL_1363;
            }
            unint64_t v990 = v989 & 0xFFFFFFFFFFFFFFF8;
            if (!v990) {
              goto LABEL_1363;
            }
          }
          v1349 = &v1371;
          sub_1CC5FA668(v990 + 16, &v1349);
        }
LABEL_1363:
        if (v736 >> 8 < 0x21)
        {
          uint64_t v773 = ***(void ***)v34;
          uint64_t v774 = ((*(_DWORD *)(*(void *)v34 + 8) >> 8) - 1);
          v775 = *(llvm::ConstantInt **)(v773 + 1960);
          unsigned int v776 = *(_DWORD *)(v773 + 1968);
          LODWORD(v1350) = v776 >> 8;
          if (v776 >> 8 > 0x40) {
            operator new[]();
          }
          if (v776 <= 0xFF) {
            unint64_t v777 = 0;
          }
          else {
            unint64_t v777 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v776) + 63);
          }
          v1349 = (void *)(v777 & v774);
          uint64_t v32 = v1337;
          v778 = llvm::ConstantInt::get(v775, (llvm::LLVMContext *)&v1349, v739);
          if (v1350 >= 0x41 && v1349) {
            MEMORY[0x1D25D9CB0](v1349, 0x1000C8000313F17);
          }
          v779 = *(uint64_t ***)(v1329 + 40);
          llvm::Intrinsic::getType(*v779, 1850, 0, 0);
          v780 = (llvm::PointerType *)llvm::Intrinsic::getType(*v779, 1850, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v779, "llvm.agx1.ft1", (const char *)0xD, v780, 0);
          uint64_t v782 = v781;
          v1371 = 0;
          v783 = (unsigned __int8 *)*((void *)v34 - 4 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF));
          uint64_t v784 = ***(void ***)v782 + 1960;
          v1353[0] = 257;
          v1371 = sub_1CB844B8C((uint64_t)&v1376, v783, v784, (uint64_t)&v1349);
          v785 = *(uint64_t ***)(v782 + 24);
          v1353[0] = 257;
          uint64_t v786 = sub_1CB845BAC((uint64_t *)&v1376, v785, (uint64_t **)v782, (uint64_t *)&v1371, 1, (uint64_t)&v1349, 0);
          v1353[0] = 257;
          v787 = sub_1CB84494C((uint64_t)&v1376, (uint64_t)v778, v786, (uint64_t)&v1349, 0, 0);
        }
        else
        {
          unint64_t v1325 = v736;
          size_t v1327 = v735;
          v1339 = v733;
          v740 = *(llvm::ConstantInt **)(*(void *)v1383 + 1960);
          unsigned int v741 = *(_DWORD *)(*(void *)v1383 + 1968);
          LODWORD(v1350) = v741 >> 8;
          if (v741 >> 8 >= 0x41) {
            operator new[]();
          }
          v1349 = 0;
          v743 = (unsigned __int8 *)llvm::ConstantInt::get(v740, (llvm::LLVMContext *)&v1349, v739);
          if (v1350 >= 0x41 && v1349) {
            MEMORY[0x1D25D9CB0](v1349, 0x1000C8000313F17);
          }
          v744 = *(llvm::ConstantInt **)(*(void *)v1383 + 1960);
          unsigned int v745 = *(_DWORD *)(*(void *)v1383 + 1968);
          LODWORD(v1350) = v745 >> 8;
          if (v745 >> 8 > 0x40) {
            operator new[]();
          }
          if (v745 <= 0xFF) {
            LOBYTE(v746) = 0;
          }
          else {
            unint64_t v746 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v745) + 63);
          }
          v1349 = (void *)(v746 & 1);
          v748 = (unsigned __int8 *)llvm::ConstantInt::get(v744, (llvm::LLVMContext *)&v1349, v742);
          if (v1350 >= 0x41 && v1349) {
            MEMORY[0x1D25D9CB0](v1349, 0x1000C8000313F17);
          }
          v749 = *(llvm::ConstantInt **)(*(void *)v1383 + 1960);
          unsigned int v750 = *(_DWORD *)(*(void *)v1383 + 1968);
          LODWORD(v1350) = v750 >> 8;
          if (v750 >> 8 > 0x40) {
            operator new[]();
          }
          if (v750 <= 0xFF) {
            LOBYTE(v751) = 0;
          }
          else {
            unint64_t v751 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v750) + 63);
          }
          v1349 = (void *)(v751 & 0x1F);
          v753 = llvm::ConstantInt::get(v749, (llvm::LLVMContext *)&v1349, v747);
          if (v1350 >= 0x41 && v1349) {
            MEMORY[0x1D25D9CB0](v1349, 0x1000C8000313F17);
          }
          v754 = *(llvm::ConstantInt **)(*(void *)v1383 + 1960);
          unsigned int v755 = *(_DWORD *)(*(void *)v1383 + 1968);
          LODWORD(v1350) = v755 >> 8;
          if (v755 >> 8 > 0x40) {
            operator new[]();
          }
          if (v755 <= 0xFF) {
            LOBYTE(v756) = 0;
          }
          else {
            unint64_t v756 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v755) + 63);
          }
          v1349 = (void *)(v756 & 0x20);
          v757 = llvm::ConstantInt::get(v754, (llvm::LLVMContext *)&v1349, v752);
          if (v1350 >= 0x41 && v1349) {
            MEMORY[0x1D25D9CB0](v1349, 0x1000C8000313F17);
          }
          double v759 = llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)*(v33 - 3) + 1960), (llvm::Type *)2);
          v760 = (unsigned __int8 *)*((void *)v34 - 4 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF));
          __int16 v1375 = 257;
          if (*(void *)v760 != v758)
          {
            if (v760[16] <= 0x14u)
            {
              uint64_t v827 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t, double))*v1384 + 28))(v1384, 49, v760, v758, v759);
              v760 = (unsigned __int8 *)v827;
              if (v827)
              {
                if (*(unsigned __int8 *)(v827 + 16) >= 0x1Cu)
                {
                  (*(void (**)(void *, uint64_t, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v827, &v1371, v1381, v1382);
                  if (v1377)
                  {
                    v1111 = (llvm::MDNode **)v1376;
                    v1112 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v760, *(_DWORD *)v1111, v1111[1]);
                      v1111 += 2;
                    }
                    while (v1111 != v1112);
                  }
                }
              }
            }
            else
            {
              v1353[0] = 257;
              v760 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v760, v758, (const char **)&v1349, 0);
              (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t *, unsigned __int8 *))(*v1385 + 16))(v1385, v760, &v1371, v1381, v1382);
              if (v1377)
              {
                v761 = (llvm::MDNode **)v1376;
                v762 = (llvm::MDNode **)((char *)v1376 + 16 * v1377);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v760, *(_DWORD *)v761, v761[1]);
                  v761 += 2;
                }
                while (v761 != v762);
              }
            }
          }
          v1368[0] = 0;
          v1353[0] = 257;
          v1368[0] = sub_1CB8445F4((uint64_t)&v1376, v760, v743, (uint64_t)&v1349);
          v1342[0] = 0;
          v1353[0] = 257;
          v1342[0] = sub_1CB8445F4((uint64_t)&v1376, v760, v748, (uint64_t)&v1349);
          v1353[0] = 257;
          uint64_t v828 = (uint64_t)v743;
          v829 = sub_1CB845F20((uint64_t)&v1376, 32, v1342[0], (uint64_t)v743, (uint64_t)&v1349);
          v830 = *(uint64_t ***)(v1329 + 40);
          llvm::Intrinsic::getType(*v830, 1850, 0, 0);
          v831 = (llvm::PointerType *)llvm::Intrinsic::getType(*v830, 1850, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v830, "llvm.agx1.ft1", (const char *)0xD, v831, 0);
          uint64_t v833 = v832;
          if (v832) {
            uint64_t v832 = *(void *)(v832 + 24);
          }
          v1353[0] = 257;
          uint64_t v834 = sub_1CB845BAC((uint64_t *)&v1376, (uint64_t **)v832, (uint64_t **)v833, (uint64_t *)v1342, 1, (uint64_t)&v1349, 0);
          v1353[0] = 257;
          v835 = sub_1CB84494C((uint64_t)&v1376, (uint64_t)v753, v834, (uint64_t)&v1349, 0, 0);
          if (v833) {
            v836 = *(uint64_t ***)(v833 + 24);
          }
          else {
            v836 = 0;
          }
          v1353[0] = 257;
          uint64_t v837 = sub_1CB845BAC((uint64_t *)&v1376, v836, (uint64_t **)v833, (uint64_t *)v1368, 1, (uint64_t)&v1349, 0);
          v1353[0] = 257;
          v838 = sub_1CB84494C((uint64_t)&v1376, (uint64_t)v753, v837, (uint64_t)&v1349, 0, 0);
          v1353[0] = 257;
          v839 = sub_1CB844A3C((uint64_t)&v1376, v757, (uint64_t)v838, (uint64_t)&v1349, 0, 0);
          v1353[0] = 257;
          v787 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1376, v829, v839, v835, (const llvm::Twine *)&v1349, 0);
          if (v1339 == (llvm::Instruction *)v1327)
          {
            uint64_t v32 = v1337;
          }
          else
          {
            v1353[0] = 257;
            v840 = sub_1CB844AF4((uint64_t)&v1376, v1342[0], (uint64_t)v1368[0], (uint64_t)&v1349);
            __int16 v1375 = 257;
            v842 = sub_1CB845F20((uint64_t)&v1376, 32, v840, v828, (uint64_t)&v1371);
            v843 = *(llvm::ConstantInt **)(*(void *)v1383 + 1960);
            unsigned int v844 = *(_DWORD *)(*(void *)v1383 + 1968);
            LODWORD(v1350) = v844 >> 8;
            if (v844 >> 8 > 0x40) {
              operator new[]();
            }
            if (v844 <= 0xFF) {
              unint64_t v845 = 0;
            }
            else {
              unint64_t v845 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v844) + 63);
            }
            v1349 = (void *)(v845 & (v1325 >> 8));
            v846 = (llvm::Value *)llvm::ConstantInt::get(v843, (llvm::LLVMContext *)&v1349, v841);
            uint64_t v32 = v1337;
            if (v1350 >= 0x41 && v1349) {
              MEMORY[0x1D25D9CB0](v1349, 0x1000C8000313F17);
            }
            v1353[0] = 257;
            v787 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1376, v842, v846, v787, (const llvm::Twine *)&v1349, 0);
          }
        }
        uint64_t v847 = *(void *)v34;
        v1353[0] = 257;
        v848 = sub_1CB844B8C((uint64_t)&v1376, (unsigned __int8 *)v787, v847, (uint64_t)&v1349);
        llvm::Value::doRAUW(v34, v848, (llvm::Value *)1);
        uint64_t v49 = v1345;
        uint64_t v50 = HIDWORD(v1346);
        if (v1345 == v1344)
        {
          if (HIDWORD(v1346))
          {
            char v51 = 0;
            uint64_t v849 = 8 * HIDWORD(v1346);
            v850 = (unsigned __int8 **)v1345;
            do
            {
              if (*v850 == v35) {
                goto LABEL_1585;
              }
              if (*v850 == (unsigned __int8 *)-2) {
                char v51 = v850;
              }
              ++v850;
              v849 -= 8;
            }
            while (v849);
            if (v51)
            {
LABEL_1561:
              *char v51 = v35;
              goto LABEL_1562;
            }
          }
          unsigned int v851 = v1346;
          if (HIDWORD(v1346) < v1346) {
            goto LABEL_110;
          }
        }
        else
        {
          unsigned int v851 = v1346;
        }
        if (3 * v851 <= 4 * (HIDWORD(v1346) - v1347))
        {
          if (v851 >= 0x40) {
            v851 *= 2;
          }
          else {
            unsigned int v851 = 128;
          }
        }
        else if (v851 - HIDWORD(v1346) >= v851 >> 3)
        {
          goto LABEL_1566;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v851);
        unsigned int v851 = v1346;
        uint64_t v49 = v1345;
LABEL_1566:
        unsigned int v852 = v851 - 1;
        unsigned int v853 = (v851 - 1) & ((v35 >> 4) ^ (v35 >> 9));
        uint64_t v88 = (unsigned __int8 **)&v49[v853];
        v854 = *v88;
        if (*v88 != (unsigned __int8 *)-1)
        {
          v90 = 0;
          int v855 = 1;
          while (v854 != v35)
          {
            if (v90) {
              BOOL v856 = 0;
            }
            else {
              BOOL v856 = v854 == (unsigned __int8 *)-2;
            }
            if (v856) {
              v90 = v88;
            }
            unsigned int v857 = v853 + v855++;
            unsigned int v853 = v857 & v852;
            uint64_t v88 = (unsigned __int8 **)&v49[v857 & v852];
            v854 = *v88;
            if (*v88 == (unsigned __int8 *)-1) {
              goto LABEL_1578;
            }
          }
          goto LABEL_1585;
        }
LABEL_1577:
        v90 = 0;
LABEL_1578:
        if (v90) {
          v858 = v90;
        }
        else {
          v858 = v88;
        }
        if (*v858 != v35)
        {
          if (*v858 == (unsigned __int8 *)-2) {
            --v1347;
          }
          else {
            ++HIDWORD(v1346);
          }
          *v858 = v35;
        }
        goto LABEL_1585;
      }
      v652 = v1345;
      uint64_t v653 = HIDWORD(v1346);
      if (v1345 == v1344)
      {
        if (HIDWORD(v1346))
        {
          v654 = 0;
          uint64_t v655 = 8 * HIDWORD(v1346);
          v656 = (unsigned __int8 **)v1345;
          do
          {
            if (*v656 == v35) {
              goto LABEL_1589;
            }
            if (*v656 == (unsigned __int8 *)-2) {
              v654 = v656;
            }
            ++v656;
            v655 -= 8;
          }
          while (v655);
          if (v654)
          {
            *v654 = v35;
            --v1347;
            goto LABEL_1589;
          }
        }
        unsigned int v657 = v1346;
        if (HIDWORD(v1346) < v1346)
        {
          ++HIDWORD(v1346);
          *(void *)&v1345[8 * v653] = v35;
          goto LABEL_1589;
        }
      }
      else
      {
        unsigned int v657 = v1346;
      }
      if (3 * v657 <= 4 * (HIDWORD(v1346) - v1347))
      {
        if (v657 >= 0x40) {
          v657 *= 2;
        }
        else {
          unsigned int v657 = 128;
        }
      }
      else if (v657 - HIDWORD(v1346) >= v657 >> 3)
      {
        goto LABEL_1393;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v657);
      unsigned int v657 = v1346;
      v652 = v1345;
LABEL_1393:
      unsigned int v763 = v657 - 1;
      unsigned int v764 = (v657 - 1) & ((v35 >> 4) ^ (v35 >> 9));
      v765 = &v652[8 * v764];
      v766 = *(unsigned __int8 **)v765;
      if (*(void *)v765 == -1)
      {
        v767 = 0;
      }
      else
      {
        v767 = 0;
        int v768 = 1;
        do
        {
          if (v766 == v35) {
            goto LABEL_1589;
          }
          if (v767) {
            BOOL v769 = 0;
          }
          else {
            BOOL v769 = v766 == (unsigned __int8 *)-2;
          }
          if (v769) {
            v767 = (unsigned __int8 **)v765;
          }
          unsigned int v770 = v764 + v768++;
          unsigned int v764 = v770 & v763;
          v765 = &v652[8 * (v770 & v763)];
          v766 = *(unsigned __int8 **)v765;
        }
        while (*(void *)v765 != -1);
      }
      if (v767) {
        v791 = v767;
      }
      else {
        v791 = (unsigned __int8 **)v765;
      }
      if (*v791 != v35)
      {
        if (*v791 == (unsigned __int8 *)-2) {
          --v1347;
        }
        else {
          ++HIDWORD(v1346);
        }
        *v791 = v35;
      }
LABEL_1589:
      uint64_t v33 = v1341;
      if (v1341 == v32) {
        goto LABEL_2181;
      }
    }
  }
LABEL_2182:
  v1114 = v1344;
  v1113 = v1345;
  unsigned int v1115 = HIDWORD(v1346);
  unsigned int v1116 = v1346;
  if (v1345 == v1344) {
    uint64_t v1117 = HIDWORD(v1346);
  }
  else {
    uint64_t v1117 = v1346;
  }
  v1118 = v1345;
  uint64_t v1119 = v1330;
  if (v1117)
  {
    uint64_t v1120 = 0;
    while (*(void *)&v1345[v1120] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v1120 += 8;
      if (8 * v1117 == v1120) {
        goto LABEL_2207;
      }
    }
    v1118 = &v1345[v1120];
  }
  v1121 = &v1345[8 * v1117];
  if (v1118 != v1121)
  {
    unint64_t v1122 = *(void *)v1118;
LABEL_2193:
    int v1123 = *(_DWORD *)(v1122 + 20);
    if ((v1123 & 0x40000000) != 0)
    {
      unint64_t v1125 = *(void *)(v1122 - 8);
      uint64_t v1124 = v1123 & 0x7FFFFFF;
      if (!v1124) {
        goto LABEL_2200;
      }
    }
    else
    {
      uint64_t v1124 = v1123 & 0x7FFFFFF;
      unint64_t v1125 = v1122 - 32 * v1124;
      if (!v1124) {
        goto LABEL_2200;
      }
    }
    uint64_t v1126 = 32 * v1124;
    v1127 = (void **)(v1125 + 16);
    do
    {
      if (*(v1127 - 2))
      {
        void **v1127 = *(v1127 - 1);
        uint64_t v1128 = (uint64_t)*(v1127 - 1);
        if (v1128) {
          *(void *)(v1128 + 16) = *v1127;
        }
      }
      *(v1127 - 2) = 0;
      v1127 += 4;
      v1126 -= 32;
    }
    while (v1126);
LABEL_2200:
    v1129 = (unint64_t *)(v1118 + 8);
    while (v1129 != (unint64_t *)v1121)
    {
      unint64_t v1130 = *v1129++;
      unint64_t v1122 = v1130;
      if (v1130 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v1118 = (char *)(v1129 - 1);
        goto LABEL_2193;
      }
    }
    v1114 = v1344;
    v1113 = v1345;
    unsigned int v1115 = HIDWORD(v1346);
    unsigned int v1116 = v1346;
  }
LABEL_2207:
  if (v1113 == v1114) {
    uint64_t v1131 = v1115;
  }
  else {
    uint64_t v1131 = v1116;
  }
  v1132 = v1113;
  if (v1131)
  {
    uint64_t v1133 = 0;
    while (*(void *)&v1113[v1133] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v1133 += 8;
      if (8 * v1131 == v1133) {
        goto LABEL_2218;
      }
    }
    v1132 = &v1113[v1133];
  }
  if (v1132 != &v1113[8 * v1131]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_2218:
  if (v1113 != v1114)
  {
    if (v1346 >= 0x21 && 4 * (HIDWORD(v1346) - v1347) < v1346)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v1344);
      goto LABEL_2220;
    }
    memset(v1113, 255, 8 * v1346);
  }
  int v1347 = 0;
  HIDWORD(v1346) = 0;
LABEL_2220:
  if (*(unsigned char *)(v1331 + 28)) {
    goto LABEL_2548;
  }
  uint64_t v1134 = *(void *)(v1329 + 80);
  if (v1134 == v1334) {
    goto LABEL_2548;
  }
  do
  {
    uint64_t v1135 = v1134 - 24;
    if (!v1134) {
      uint64_t v1135 = 0;
    }
    uint64_t v1136 = v1135 + 40;
    uint64_t v1137 = *(void *)(v1135 + 48);
    if (v1137 == v1135 + 40) {
      goto LABEL_2547;
    }
    uint64_t v1336 = v1135;
    do
    {
      uint64_t v1138 = v1137;
      uint64_t v1137 = *(void *)(v1137 + 8);
      uint64_t v1139 = v1138 - 24;
      if (v1138) {
        v1140 = (llvm::ValueAsMetadata *)(v1138 - 24);
      }
      else {
        v1140 = 0;
      }
      int v1141 = *((unsigned __int8 *)v1140 + 16);
      if (v1141 == 67) {
        unint64_t v1142 = (unint64_t)v1140;
      }
      else {
        unint64_t v1142 = 0;
      }
      if (v1138 && v1141 == 67 && *(_DWORD *)(*(void *)v1142 + 8) == 16397)
      {
        v1143 = (void *)*((void *)v1140 + 1);
        if (v1143)
        {
          while (*(unsigned char *)(v1143[3] + 16) == 62)
          {
            v1143 = (void *)v1143[1];
            if (!v1143) {
              goto LABEL_2238;
            }
          }
          goto LABEL_2304;
        }
LABEL_2238:
        uint64_t v1144 = *(void *)(v1142 - 32);
        if (!*((void *)v1140 + 5))
        {
          if (!v1144
            || *(unsigned __int8 *)(v1144 + 16) < 0x1Cu
            || (uint64_t v1139 = *(void *)(v1142 - 32), !*(void *)(v1144 + 40)))
          {
            uint64_t v1139 = 0;
          }
        }
        v1376 = v1333;
        uint64_t v1377 = 0;
        v1378[0] = v1139;
        v1378[1] = 0;
        uint64_t v1379 = 0;
        char v1380 = 1;
        sub_1CC16089C((uint64_t *)v1144, 0, (const llvm::DataLayout **)&v1376, (uint64_t)&v1371);
        v1145 = 0;
        unsigned int v1146 = v1372 - 1;
        v1147 = &v1371;
        if (v1372 >= 0x41) {
          v1147 = (llvm::Value **)((char *)v1371 + 8 * (v1146 >> 6));
        }
        v1148 = *v1147;
        uint64_t v1149 = **(void **)v1140;
        v1376 = v1378;
        uint64_t v1377 = 0x200000000;
        uint64_t v1383 = v1149;
        v1384 = &v1392;
        v1385 = v1393;
        uint64_t v1386 = 0;
        int v1387 = 0;
        __int16 v1388 = 512;
        char v1389 = 7;
        v1381 = 0;
        v1382 = 0;
        uint64_t v1390 = 0;
        uint64_t v1391 = 0;
        v1392 = &unk_1F2616E88;
        v1393[0] = &unk_1F2617008;
        v1381 = (uint64_t *)*((void *)v1140 + 5);
        v1382 = (unsigned __int8 *)v1140 + 24;
        v1150 = (void *)*((void *)v1140 + 6);
        v1368[0] = v1150;
        if (v1150)
        {
          llvm::MetadataTracking::track((uint64_t)v1368, (unsigned __int8 *)v1150, 2);
          v1145 = v1368[0];
        }
        sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v1145);
        if (v1368[0])
        {
          int v1219 = *(unsigned __int8 *)v1368[0];
          if ((v1219 - 4) > 0x1E)
          {
            if ((v1219 - 3) >= 0xFFFFFFFE) {
              v1255 = v1368[0];
            }
            else {
              v1255 = 0;
            }
            if ((v1219 - 3) < 0xFFFFFFFE)
            {
              if (v1219 == 3) {
                *((void *)v1368[0] + 1) = 0;
              }
              goto LABEL_2244;
            }
            unint64_t v1221 = (unint64_t)v1255 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1368[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1368[0] + 3)) {
              goto LABEL_2244;
            }
            uint64_t v1220 = *((void *)v1368[0] + 2);
            if ((v1220 & 4) == 0) {
              goto LABEL_2244;
            }
            unint64_t v1221 = v1220 & 0xFFFFFFFFFFFFFFF8;
            if (!v1221) {
              goto LABEL_2244;
            }
          }
          v1349 = v1368;
          sub_1CC5FA668(v1221 + 16, &v1349);
        }
LABEL_2244:
        uint64_t v1151 = (1 << v1146) & (unint64_t)v1148;
        v1152 = *(unsigned __int8 **)(v1142 - 32);
        uint64_t v1153 = *(void *)v1142;
        v1353[0] = 257;
        v1154 = sub_1CB845504((uint64_t)&v1376, v1152, v1153, (uint64_t)&v1349);
        v1155 = v1154;
        if (v1151)
        {
LABEL_2245:
          llvm::Value::doRAUW(v1140, v1155, (llvm::Value *)1);
          v1156 = v1345;
          uint64_t v1157 = HIDWORD(v1346);
          if (v1345 == v1344)
          {
            if (HIDWORD(v1346))
            {
              v1158 = 0;
              uint64_t v1159 = 8 * HIDWORD(v1346);
              v1160 = (llvm::ValueAsMetadata **)v1345;
              while (*v1160 != v1140)
              {
                if (*v1160 == (llvm::ValueAsMetadata *)-2) {
                  v1158 = v1160;
                }
                ++v1160;
                v1159 -= 8;
                if (!v1159)
                {
                  if (!v1158) {
                    goto LABEL_2253;
                  }
                  *v1158 = v1140;
                  --v1347;
                  goto LABEL_2299;
                }
              }
              goto LABEL_2299;
            }
LABEL_2253:
            unsigned int v1161 = v1346;
            if (HIDWORD(v1346) < v1346)
            {
              ++HIDWORD(v1346);
              *(void *)&v1345[8 * v1157] = v1140;
LABEL_2299:
              LOBYTE(v1338) = 1;
              if (v1376 != v1378) {
                free(v1376);
              }
              if (v1374 >= 0x41 && v1373) {
                MEMORY[0x1D25D9CB0](v1373, 0x1000C8000313F17);
              }
              if (v1372 >= 0x41 && v1371) {
                MEMORY[0x1D25D9CB0](v1371, 0x1000C8000313F17);
              }
              continue;
            }
          }
          else
          {
            unsigned int v1161 = v1346;
          }
          if (3 * v1161 <= 4 * (HIDWORD(v1346) - v1347))
          {
            if (v1161 >= 0x40) {
              v1161 *= 2;
            }
            else {
              unsigned int v1161 = 128;
            }
          }
          else if (v1161 - HIDWORD(v1346) >= v1161 >> 3)
          {
            goto LABEL_2264;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v1161);
          unsigned int v1161 = v1346;
          v1156 = v1345;
LABEL_2264:
          unsigned int v1170 = v1161 - 1;
          unsigned int v1171 = (v1161 - 1) & ((v1140 >> 4) ^ (v1140 >> 9));
          v1172 = &v1156[8 * v1171];
          v1173 = *(llvm::ValueAsMetadata **)v1172;
          if (*(void *)v1172 == -1)
          {
            v1174 = 0;
LABEL_2292:
            if (v1174) {
              v1187 = (llvm::ValueAsMetadata **)v1174;
            }
            else {
              v1187 = (llvm::ValueAsMetadata **)v1172;
            }
            if (*v1187 != v1140)
            {
              if (*v1187 == (llvm::ValueAsMetadata *)-2) {
                --v1347;
              }
              else {
                ++HIDWORD(v1346);
              }
              *v1187 = v1140;
            }
          }
          else
          {
            v1174 = 0;
            int v1175 = 1;
            while (v1173 != v1140)
            {
              if (v1174) {
                BOOL v1176 = 0;
              }
              else {
                BOOL v1176 = v1173 == (llvm::ValueAsMetadata *)-2;
              }
              if (v1176) {
                v1174 = v1172;
              }
              unsigned int v1177 = v1171 + v1175++;
              unsigned int v1171 = v1177 & v1170;
              v1172 = &v1156[8 * (v1177 & v1170)];
              v1173 = *(llvm::ValueAsMetadata **)v1172;
              if (*(void *)v1172 == -1) {
                goto LABEL_2292;
              }
            }
          }
          goto LABEL_2299;
        }
        uint64_t v1162 = *(void *)(v1119 + 104);
        unsigned int v1163 = *(_DWORD *)(v1119 + 120);
        if (v1163)
        {
          unsigned int v1164 = v1163 - 1;
          unsigned int v1165 = (v1163 - 1) & ((v1154 >> 4) ^ (v1154 >> 9));
          uint64_t v1166 = v1162 + 48 * v1165;
          v1167 = *(llvm::Instruction **)(v1166 + 24);
          if (v1167 != v1154)
          {
            int v1168 = 1;
            while (v1167 != (llvm::Instruction *)-4096)
            {
              unsigned int v1169 = v1165 + v1168++;
              unsigned int v1165 = v1169 & v1164;
              uint64_t v1166 = v1162 + 48 * (v1169 & v1164);
              v1167 = *(llvm::Instruction **)(v1166 + 24);
              if (v1167 == v1154) {
                goto LABEL_2276;
              }
            }
            goto LABEL_2275;
          }
        }
        else
        {
LABEL_2275:
          uint64_t v1166 = v1162 + 48 * v1163;
        }
LABEL_2276:
        if (v1166 == v1162 + 48 * v1163 || (uint64_t SCEVIter = *(void *)(v1166 + 40)) == 0)
        {
          uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v1119, (unint64_t)v1154);
          uint64_t v1162 = *(void *)(v1119 + 104);
          unsigned int v1163 = *(_DWORD *)(v1119 + 120);
        }
        uint64_t v1179 = v1162 + 48 * v1163;
        if (v1163)
        {
          unsigned int v1180 = v1163 - 1;
          unsigned int v1181 = v1180 & ((v1142 >> 4) ^ (v1142 >> 9));
          uint64_t v1182 = v1162 + 48 * v1181;
          uint64_t v1183 = *(void *)(v1182 + 24);
          if (v1183 != v1142)
          {
            int v1184 = 1;
            while (v1183 != -4096)
            {
              unsigned int v1185 = v1181 + v1184++;
              unsigned int v1181 = v1185 & v1180;
              uint64_t v1182 = v1162 + 48 * v1181;
              uint64_t v1183 = *(void *)(v1182 + 24);
              if (v1183 == v1142) {
                goto LABEL_2286;
              }
            }
            goto LABEL_2285;
          }
        }
        else
        {
LABEL_2285:
          uint64_t v1182 = v1179;
        }
LABEL_2286:
        if (v1182 == v1179 || (uint64_t v1186 = *(void *)(v1182 + 40)) == 0) {
          uint64_t v1186 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v1119, v1142);
        }
        if (SCEVIter != v1186) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        goto LABEL_2245;
      }
LABEL_2304:
      if (*(_DWORD *)(*(void *)v1140 + 8) != 269) {
        continue;
      }
      if (*((unsigned char *)v1140 + 16) == 82)
      {
        int v1188 = *((_DWORD *)v1140 + 5);
        v1189 = (v1188 & 0x40000000) != 0
              ? (llvm::ValueAsMetadata *)*((void *)v1140 - 1)
              : (llvm::ValueAsMetadata *)((char *)v1140 - 32 * (v1188 & 0x7FFFFFF));
        uint64_t v1190 = *((void *)v1189 + 4);
        if (*(unsigned char *)(v1190 + 16) == 17 && (sub_1CB844168(v1190, 0.0) & 1) != 0) {
          continue;
        }
      }
      v1191 = (void *)*((void *)v1140 + 1);
      if (!v1191) {
        continue;
      }
      int v1192 = 0;
      while (1)
      {
        v1193 = (llvm::ValueAsMetadata **)v1191[3];
        if (!v1193 || *((unsigned char *)v1193 + 16) != 85 || *(v1193 - 12) != v1140) {
          goto LABEL_2316;
        }
        int v1194 = *((unsigned __int8 *)v1140 + 16);
        if (*((unsigned char *)*v1193 + 8) || v1194 != 82)
        {
          uint64_t v1197 = (uint64_t)*(v1193 - 8);
          if ((v1194 - 81) > 1)
          {
            uint64_t v1200 = (uint64_t)*(v1193 - 4);
            goto LABEL_2328;
          }
          int v1195 = *((_DWORD *)v1140 + 5);
          if ((v1195 & 0x40000000) == 0)
          {
LABEL_2324:
            uint64_t v1198 = v1195 & 0x7FFFFFF;
            v1199 = (void *)*((void *)v1140 - 4 * v1198);
            if ((void *)v1197 == v1199) {
              goto LABEL_2316;
            }
            uint64_t v1200 = (uint64_t)*(v1193 - 4);
            if ((void *)v1200 == v1199) {
              goto LABEL_2316;
            }
            v1201 = (void *)((void *)v1140 - 4 * v1198)[4];
            goto LABEL_2351;
          }
        }
        else
        {
          int v1195 = *((_DWORD *)v1140 + 5);
          if ((v1195 & 0x40000000) != 0) {
            v1196 = (void **)*((void *)v1140 - 1);
          }
          else {
            v1196 = (void **)((char *)v1140 - 32 * (v1195 & 0x7FFFFFF));
          }
          int v1208 = *(_DWORD *)(**v1196 + 8);
          if (!(_BYTE)v1208 || v1208 == 4109) {
            goto LABEL_2316;
          }
          uint64_t v1197 = (uint64_t)*(v1193 - 8);
          if ((v1195 & 0x40000000) == 0) {
            goto LABEL_2324;
          }
        }
        v1209 = (void *)*((void *)v1140 - 1);
        if (v1197 == *v1209) {
          goto LABEL_2316;
        }
        uint64_t v1200 = (uint64_t)*(v1193 - 4);
        if (v1200 == *v1209) {
          goto LABEL_2316;
        }
        v1201 = (void *)v1209[4];
LABEL_2351:
        if ((void *)v1197 == v1201 || (void *)v1200 == v1201) {
          goto LABEL_2316;
        }
LABEL_2328:
        unsigned int v1202 = *(unsigned __int8 *)(v1197 + 16);
        if (*(unsigned __int8 *)(v1200 + 16) >= 0x15u) {
          uint64_t v1203 = 0;
        }
        else {
          uint64_t v1203 = v1200;
        }
        if (v1197) {
          BOOL v1204 = v1202 > 0x14;
        }
        else {
          BOOL v1204 = 1;
        }
        if (!v1204)
        {
          if (v1202 == 16)
          {
            uint64_t v1205 = *(unsigned int *)(v1197 + 32);
            if (v1205 >= 0x41)
            {
              int v1215 = 0;
              int64_t v1216 = (unint64_t)(v1205 + 63) >> 6;
              do
              {
                BOOL v590 = v1216-- < 1;
                if (v590) {
                  break;
                }
                unint64_t v1217 = *(void *)(*(void *)(v1197 + 24) + 8 * v1216);
                v1215 += __clz(v1217);
              }
              while (!v1217);
              int v1218 = v1205 | 0xFFFFFFC0;
              if ((v1205 & 0x3F) == 0) {
                int v1218 = 0;
              }
              if (v1215 + v1218 == v1205) {
                goto LABEL_2316;
              }
            }
            else if (!*(void *)(v1197 + 24))
            {
              goto LABEL_2316;
            }
          }
          else if (v1202 == 17)
          {
            if (sub_1CB844168(v1197, 0.0)) {
              goto LABEL_2316;
            }
          }
          else if (v1202 - 18 < 3 || v1202 == 13)
          {
            goto LABEL_2316;
          }
        }
        if (!v1203) {
          goto LABEL_2342;
        }
        int v1206 = *(unsigned __int8 *)(v1203 + 16);
        if (v1206 != 16) {
          break;
        }
        uint64_t v1207 = *(unsigned int *)(v1203 + 32);
        if (v1207 >= 0x41)
        {
          int v1211 = 0;
          int64_t v1212 = (unint64_t)(v1207 + 63) >> 6;
          do
          {
            BOOL v590 = v1212-- < 1;
            if (v590) {
              break;
            }
            unint64_t v1213 = *(void *)(*(void *)(v1203 + 24) + 8 * v1212);
            v1211 += __clz(v1213);
          }
          while (!v1213);
          int v1214 = v1207 | 0xFFFFFFC0;
          if ((v1207 & 0x3F) == 0) {
            int v1214 = 0;
          }
          if (v1211 + v1214 == v1207) {
            goto LABEL_2316;
          }
          goto LABEL_2342;
        }
        if (*(void *)(v1203 + 24)) {
          goto LABEL_2342;
        }
LABEL_2316:
        v1191 = (void *)v1191[1];
        if (!v1191) {
          goto LABEL_2383;
        }
      }
      if (v1206 == 17)
      {
        if (sub_1CB844168(v1203, 0.0)) {
          goto LABEL_2316;
        }
      }
      else if ((v1206 - 18) < 3 || v1206 == 13)
      {
        goto LABEL_2316;
      }
LABEL_2342:
      if (!v1192)
      {
        int v1192 = 1;
        goto LABEL_2316;
      }
      v1222 = (llvm::Value *)llvm::Instruction::clone(v1140);
      v1223 = 0;
      uint64_t v1224 = **(void **)v1140;
      v1376 = v1378;
      uint64_t v1377 = 0x200000000;
      uint64_t v1383 = v1224;
      v1384 = &v1392;
      v1385 = v1393;
      uint64_t v1386 = 0;
      int v1387 = 0;
      __int16 v1388 = 512;
      char v1389 = 7;
      v1381 = 0;
      v1382 = 0;
      uint64_t v1390 = 0;
      uint64_t v1391 = 0;
      v1392 = &unk_1F2616E88;
      v1393[0] = &unk_1F2617008;
      v1381 = (uint64_t *)*((void *)v1140 + 5);
      v1382 = (unsigned __int8 *)v1140 + 24;
      v1225 = (llvm::Value *)*((void *)v1140 + 6);
      v1371 = v1225;
      if (v1225)
      {
        llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v1225, 2);
        v1223 = v1371;
      }
      sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v1223);
      if (v1371)
      {
        int v1290 = *(unsigned __int8 *)v1371;
        if ((v1290 - 4) > 0x1E)
        {
          if ((v1290 - 3) >= 0xFFFFFFFE) {
            v1296 = v1371;
          }
          else {
            v1296 = 0;
          }
          if ((v1290 - 3) < 0xFFFFFFFE)
          {
            if (v1290 == 3) {
              *((void *)v1371 + 1) = 0;
            }
            goto LABEL_2394;
          }
          unint64_t v1292 = (unint64_t)v1296 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
            goto LABEL_2394;
          }
          uint64_t v1291 = *((void *)v1371 + 2);
          if ((v1291 & 4) == 0) {
            goto LABEL_2394;
          }
          unint64_t v1292 = v1291 & 0xFFFFFFFFFFFFFFF8;
          if (!v1292) {
            goto LABEL_2394;
          }
        }
        v1349 = &v1371;
        sub_1CC5FA668(v1292 + 16, &v1349);
      }
LABEL_2394:
      if (*((unsigned char *)v1140 + 16) == 83)
      {
        for (k = *(unsigned __int8 **)(v1336 + 48); ; k = (unsigned __int8 *)*((void *)k + 1))
        {
          v1228 = k - 24;
          if (!k) {
            v1228 = 0;
          }
          if (v1228[16] != 83) {
            break;
          }
        }
        v1381 = (uint64_t *)*((void *)k + 2);
        v1382 = k;
        v1229 = (llvm::Value *)*((void *)k + 3);
        v1371 = v1229;
        if (v1229)
        {
          llvm::MetadataTracking::track((uint64_t)&v1371, (unsigned __int8 *)v1229, 2);
          v1230 = v1371;
        }
        else
        {
          v1230 = 0;
        }
        sub_1CB8461A4((uint64_t)&v1376, 0, (uint64_t)v1230);
        if (v1371)
        {
          int v1293 = *(unsigned __int8 *)v1371;
          if ((v1293 - 4) > 0x1E)
          {
            if ((v1293 - 3) >= 0xFFFFFFFE) {
              v1297 = v1371;
            }
            else {
              v1297 = 0;
            }
            if ((v1293 - 3) < 0xFFFFFFFE)
            {
              if (v1293 == 3) {
                *((void *)v1371 + 1) = 0;
              }
              goto LABEL_2403;
            }
            unint64_t v1295 = (unint64_t)v1297 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1371 + 1) & 0x7F) != 2 && !*((_DWORD *)v1371 + 3)) {
              goto LABEL_2403;
            }
            uint64_t v1294 = *((void *)v1371 + 2);
            if ((v1294 & 4) == 0) {
              goto LABEL_2403;
            }
            unint64_t v1295 = v1294 & 0xFFFFFFFFFFFFFFF8;
            if (!v1295) {
              goto LABEL_2403;
            }
          }
          v1349 = &v1371;
          sub_1CC5FA668(v1295 + 16, &v1349);
        }
      }
LABEL_2403:
      v1231 = (llvm::ConstantFP **)(***(void ***)v1140 + 1624);
      v1232 = llvm::ConstantFP::get(v1231, v1226, 0.0);
      v1234 = llvm::ConstantFP::get(v1231, v1233, 1.0);
      v1353[0] = 257;
      v1235 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1376, v1222, v1232, v1234, (const llvm::Twine *)&v1349, 0);
      v1353[0] = 257;
      v1236 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v1376, 1, (uint64_t)v1235, (uint64_t)v1232, (uint64_t)&v1349, 0, 0);
      uint64_t v1237 = *((void *)v1235 + 5);
      *((void *)v1222 + 5) = v1237;
      *(_WORD *)(v1237 + 18) &= ~0x8000u;
      if ((*((unsigned char *)v1222 + 23) & 0x10) != 0)
      {
        uint64_t v1288 = *(void *)(v1237 + 56);
        if (v1288)
        {
          v1289 = *(llvm::ValueSymbolTable **)(v1288 + 104);
          if (v1289) {
            llvm::ValueSymbolTable::reinsertValue(v1289, v1222);
          }
        }
      }
      uint64_t v1239 = *((void *)v1235 + 3);
      v1238 = (void *)((char *)v1235 + 24);
      *((void *)v1222 + 3) = v1239;
      *((void *)v1222 + 4) = v1238;
      v1240 = (void *)((char *)v1222 + 24);
      *(void *)(v1239 + 8) = v1240;
      void *v1238 = v1240;
      llvm::Value::doRAUW(v1140, v1236, (llvm::Value *)1);
      v1241 = v1345;
      uint64_t v1242 = HIDWORD(v1346);
      if (v1345 != v1344)
      {
        unsigned int v1246 = v1346;
        goto LABEL_2416;
      }
      if (!HIDWORD(v1346))
      {
LABEL_2412:
        unsigned int v1246 = v1346;
        if (HIDWORD(v1346) < v1346)
        {
          ++HIDWORD(v1346);
          *(void *)&v1345[8 * v1242] = v1140;
          goto LABEL_2447;
        }
LABEL_2416:
        if (3 * v1246 <= 4 * (HIDWORD(v1346) - v1347))
        {
          if (v1246 >= 0x40) {
            v1246 *= 2;
          }
          else {
            unsigned int v1246 = 128;
          }
        }
        else if (v1246 - HIDWORD(v1346) >= v1246 >> 3)
        {
          goto LABEL_2418;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1344, v1246);
        unsigned int v1246 = v1346;
        v1241 = v1345;
LABEL_2418:
        unsigned int v1247 = v1246 - 1;
        unsigned int v1248 = (v1246 - 1) & ((v1140 >> 4) ^ (v1140 >> 9));
        v1249 = &v1241[8 * v1248];
        v1250 = *(llvm::ValueAsMetadata **)v1249;
        if (*(void *)v1249 == -1)
        {
          v1251 = 0;
LABEL_2440:
          if (v1251) {
            v1256 = (llvm::ValueAsMetadata **)v1251;
          }
          else {
            v1256 = (llvm::ValueAsMetadata **)v1249;
          }
          if (*v1256 != v1140)
          {
            if (*v1256 == (llvm::ValueAsMetadata *)-2) {
              --v1347;
            }
            else {
              ++HIDWORD(v1346);
            }
            *v1256 = v1140;
          }
        }
        else
        {
          v1251 = 0;
          int v1252 = 1;
          while (v1250 != v1140)
          {
            if (v1251) {
              BOOL v1253 = 0;
            }
            else {
              BOOL v1253 = v1250 == (llvm::ValueAsMetadata *)-2;
            }
            if (v1253) {
              v1251 = v1249;
            }
            unsigned int v1254 = v1248 + v1252++;
            unsigned int v1248 = v1254 & v1247;
            v1249 = &v1241[8 * (v1254 & v1247)];
            v1250 = *(llvm::ValueAsMetadata **)v1249;
            if (*(void *)v1249 == -1) {
              goto LABEL_2440;
            }
          }
        }
        goto LABEL_2447;
      }
      v1243 = 0;
      uint64_t v1244 = 8 * HIDWORD(v1346);
      v1245 = (llvm::ValueAsMetadata **)v1345;
      while (*v1245 != v1140)
      {
        if (*v1245 == (llvm::ValueAsMetadata *)-2) {
          v1243 = v1245;
        }
        ++v1245;
        v1244 -= 8;
        if (!v1244)
        {
          if (!v1243) {
            goto LABEL_2412;
          }
          *v1243 = v1140;
          --v1347;
          break;
        }
      }
LABEL_2447:
      v1257 = (llvm::Value *)*((void *)v1236 + 5);
      v1351[0] = 0;
      v1349 = 0;
      uint64_t v1350 = 0;
      v1340 = v1236;
      uint64_t v1258 = *((void *)v1236 + 1);
      if (!v1258) {
        goto LABEL_2494;
      }
      while (2)
      {
        v1259 = (void *)(v1258 + 8);
        uint64_t v1260 = *(void *)(v1258 + 8);
        uint64_t v1261 = *(void *)(v1258 + 24);
        if (*(unsigned char *)(v1261 + 16) != 83)
        {
          v1262 = *(llvm::Value **)(v1261 + 40);
          v1371 = v1262;
          if (v1262 != v1257)
          {
            if (!v1351[0])
            {
              v1270 = 0;
              goto LABEL_2465;
            }
            unsigned int v1263 = (v1351[0] - 1) & ((v1262 >> 4) ^ (v1262 >> 9));
            v1264 = (uint64_t *)((char *)v1349 + 16 * v1263);
            uint64_t v1265 = *v1264;
            if (v1262 != (llvm::Value *)*v1264)
            {
              v1266 = 0;
              int v1267 = 1;
              while (v1265 != -4096)
              {
                if (v1266) {
                  BOOL v1268 = 0;
                }
                else {
                  BOOL v1268 = v1265 == -8192;
                }
                if (v1268) {
                  v1266 = v1264;
                }
                unsigned int v1269 = v1263 + v1267++;
                unsigned int v1263 = v1269 & (v1351[0] - 1);
                v1264 = (uint64_t *)((char *)v1349 + 16 * v1263);
                uint64_t v1265 = *v1264;
                if (v1262 == (llvm::Value *)*v1264) {
                  goto LABEL_2466;
                }
              }
              if (v1266) {
                v1270 = v1266;
              }
              else {
                v1270 = v1264;
              }
LABEL_2465:
              v1264 = sub_1CB8463E8((uint64_t)&v1349, (uint64_t)&v1371, (uint64_t *)&v1371, v1270);
              uint64_t *v1264 = (uint64_t)v1371;
              v1264[1] = 0;
            }
LABEL_2466:
            uint64_t v1271 = v1264[1];
            if (!v1271)
            {
              v1272 = (uint64_t *)((char *)v1371 + 40);
              for (m = (uint64_t *)*((void *)v1371 + 6); m != v1272; m = (uint64_t *)m[1])
              {
                v1274 = m - 3;
                if (!m) {
                  v1274 = 0;
                }
                if (*((unsigned char *)v1274 + 16) != 83)
                {
                  unsigned int v1275 = *((unsigned __int8 *)m - 8) - 38;
                  BOOL v590 = v1275 > 0x38;
                  uint64_t v1276 = (1 << v1275) & 0x100060000000001;
                  if (v590 || v1276 == 0) {
                    v1272 = m;
                  }
                  else {
                    v1272 = (uint64_t *)m[1];
                  }
                  break;
                }
              }
              v1278 = (llvm::Value *)llvm::Instruction::clone(v1340);
              v1264[1] = (uint64_t)v1278;
              v1279 = v1371;
              *((void *)v1278 + 5) = v1371;
              *((_WORD *)v1279 + 9) &= ~0x8000u;
              if ((*((unsigned char *)v1278 + 23) & 0x10) != 0)
              {
                uint64_t v1286 = *((void *)v1279 + 7);
                if (v1286)
                {
                  v1287 = *(llvm::ValueSymbolTable **)(v1286 + 104);
                  if (v1287) {
                    llvm::ValueSymbolTable::reinsertValue(v1287, v1278);
                  }
                }
              }
              uint64_t v1280 = *v1272;
              *((void *)v1278 + 3) = *v1272;
              *((void *)v1278 + 4) = v1272;
              v1281 = (void *)((char *)v1278 + 24);
              *(void *)(v1280 + 8) = v1281;
              uint64_t *v1272 = (uint64_t)v1281;
              uint64_t v1271 = v1264[1];
            }
            if (*(void *)v1258)
            {
              **(void **)(v1258 + 16) = *(void *)(v1258 + 8);
              uint64_t v1282 = *(void *)(v1258 + 8);
              if (v1282) {
                *(void *)(v1282 + 16) = *(void *)(v1258 + 16);
              }
            }
            *(void *)uint64_t v1258 = v1271;
            if (v1271)
            {
              uint64_t v1285 = *(void *)(v1271 + 8);
              v1283 = (void *)(v1271 + 8);
              uint64_t v1284 = v1285;
              void *v1259 = v1285;
              if (v1285) {
                *(void *)(v1284 + 16) = v1259;
              }
              *(void *)(v1258 + 16) = v1283;
              void *v1283 = v1258;
            }
          }
        }
        uint64_t v1258 = v1260;
        if (v1260) {
          continue;
        }
        break;
      }
      uint64_t v1119 = v1330;
      if (!*((void *)v1340 + 1)) {
LABEL_2494:
      }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      MEMORY[0x1D25D9CD0](v1349, 8);
      if (v1376 != v1378) {
        free(v1376);
      }
      LOBYTE(v1338) = 1;
LABEL_2383:
      ;
    }
    while (v1137 != v1136);
LABEL_2547:
    uint64_t v1134 = *(void *)(v1134 + 8);
  }
  while (v1134 != v1334);
LABEL_2548:
  v1299 = v1344;
  v1298 = v1345;
  unsigned int v1300 = HIDWORD(v1346);
  unsigned int v1301 = v1346;
  if (v1345 == v1344) {
    uint64_t v1302 = HIDWORD(v1346);
  }
  else {
    uint64_t v1302 = v1346;
  }
  v1303 = v1345;
  if (v1302)
  {
    uint64_t v1304 = 0;
    while (*(void *)&v1345[v1304] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v1304 += 8;
      if (8 * v1302 == v1304) {
        goto LABEL_2573;
      }
    }
    v1303 = &v1345[v1304];
  }
  v1305 = &v1345[8 * v1302];
  if (v1303 != v1305)
  {
    unint64_t v1306 = *(void *)v1303;
LABEL_2559:
    int v1307 = *(_DWORD *)(v1306 + 20);
    if ((v1307 & 0x40000000) != 0)
    {
      unint64_t v1309 = *(void *)(v1306 - 8);
      uint64_t v1308 = v1307 & 0x7FFFFFF;
      if (v1308) {
        goto LABEL_2561;
      }
    }
    else
    {
      uint64_t v1308 = v1307 & 0x7FFFFFF;
      unint64_t v1309 = v1306 - 32 * v1308;
      if (v1308)
      {
LABEL_2561:
        uint64_t v1310 = 32 * v1308;
        v1311 = (void **)(v1309 + 16);
        do
        {
          if (*(v1311 - 2))
          {
            void **v1311 = *(v1311 - 1);
            uint64_t v1312 = (uint64_t)*(v1311 - 1);
            if (v1312) {
              *(void *)(v1312 + 16) = *v1311;
            }
          }
          *(v1311 - 2) = 0;
          v1311 += 4;
          v1310 -= 32;
        }
        while (v1310);
      }
    }
    v1313 = (unint64_t *)(v1303 + 8);
    while (v1313 != (unint64_t *)v1305)
    {
      unint64_t v1314 = *v1313++;
      unint64_t v1306 = v1314;
      if (v1314 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v1303 = (char *)(v1313 - 1);
        goto LABEL_2559;
      }
    }
    v1299 = v1344;
    v1298 = v1345;
    unsigned int v1300 = HIDWORD(v1346);
    unsigned int v1301 = v1346;
  }
LABEL_2573:
  if (v1298 == v1299) {
    uint64_t v1315 = v1300;
  }
  else {
    uint64_t v1315 = v1301;
  }
  v1316 = v1298;
  if (v1315)
  {
    uint64_t v1317 = 0;
    while (*(void *)&v1298[v1317] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v1317 += 8;
      if (8 * v1315 == v1317) {
        goto LABEL_2584;
      }
    }
    v1316 = &v1298[v1317];
  }
  if (v1316 != &v1298[8 * v1315]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_2584:
  if (v1298 == v1299)
  {
LABEL_2585:
    int v1347 = 0;
    HIDWORD(v1346) = 0;
  }
  else
  {
    if (v1346 < 0x21 || 4 * (HIDWORD(v1346) - v1347) >= v1346)
    {
      memset(v1298, 255, 8 * v1346);
      goto LABEL_2585;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v1344);
  }
  if (v1345 != v1344) {
    free(v1345);
  }
  return v1338 & 1;
}

void sub_1CB843600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  uint64_t v5 = *(void **)a2;
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    uint64_t v5 = *(void **)a2;
    while (*v5 != a3)
    {
      ++v5;
      v6 -= 8;
      if (!v6)
      {
        uint64_t v5 = &v3[v4];
        break;
      }
    }
  }
  if (v4 == v5 - v3)
  {
    if (v4 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v3[v4] = a3;
    ++*(_DWORD *)(a2 + 8);
  }
}

uint64_t sub_1CB8436A4(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  char v3 = 1;
  while (1)
  {
    char v4 = v3;
    uint64_t v5 = *(llvm::ConstantFP ****)(a1 + 8 * v2);
    int v6 = *((unsigned __int8 *)v5 + 16);
    if (v5 && v6 == 74)
    {
      uint64_t v7 = (const llvm::detail::DoubleAPFloat *)*(v5 - 4);
      if (*(unsigned char *)(*(void *)v7 + 8)) {
        return 0;
      }
      goto LABEL_43;
    }
    BOOL v8 = v5 && v6 == 17;
    if (!v8 || !*((unsigned char *)*v5 + 8)) {
      return 0;
    }
    uint64_t v9 = v5[4];
    if (v9 == (llvm::ConstantFP **)&unk_1CFB2E344)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v26, (const llvm::detail::DoubleAPFloat *)(v5 + 4));
    }
    else
    {
      int v26 = v5[4];
      if ((*((_DWORD *)v9 + 2) + 64) >= 0x80) {
        operator new[]();
      }
      char v10 = *((unsigned char *)v5 + 52);
      int v11 = v10 & 7;
      char v29 = v29 & 0xF0 | v10 & 0xF;
      int v28 = *((_DWORD *)v5 + 12);
      BOOL v13 = (v10 & 6) != 0 && v11 != 3;
      if (v11 == 1 || v13)
      {
        uint64_t v15 = *((unsigned int *)v26 + 2);
        uint64_t v16 = (uint64_t *)&v27;
        if ((v15 - 64) <= 0xFFFFFF7F) {
          uint64_t v16 = v27;
        }
        uint64_t v17 = (llvm::ConstantFP **)(v5 + 5);
        if ((*((_DWORD *)v5[4] + 2) - 64) < 0xFFFFFF80) {
          uint64_t v17 = v5[5];
        }
        if (v15 <= 0xFFFFFFBF)
        {
          unint64_t v18 = (unint64_t)(v15 + 64) >> 6;
          do
          {
            uint64_t v19 = (uint64_t)*v17++;
            *v16++ = v19;
            --v18;
          }
          while (v18);
        }
      }
    }
    char v24 = 0;
    if (llvm::APFloat::convert((uint64_t)v25, &unk_1CFB2E2E0, 1, &v24)
      || v24
      || sub_1CB8456FC((uint64_t)v25)
      || (v26 != (llvm::ConstantFP **)&unk_1CFB2E344 ? (uint64_t v21 = (uint64_t *)v25) : (uint64_t v21 = v27),
          (*((unsigned char *)v21 + 28) & 7) == 0))
    {
      uint64_t v7 = (const llvm::detail::DoubleAPFloat *)v5;
    }
    else
    {
      uint64_t v7 = llvm::ConstantFP::get(**v5, (llvm::LLVMContext *)v25, v20);
    }
    if (v26 == (llvm::ConstantFP **)&unk_1CFB2E344)
    {
      uint64_t v23 = v7;
      sub_1CB845718((uint64_t *)&v27);
LABEL_50:
      uint64_t v7 = v23;
      goto LABEL_42;
    }
    if ((*((_DWORD *)v26 + 2) - 64) <= 0xFFFFFF7F && v27)
    {
      uint64_t v23 = v7;
      MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
      goto LABEL_50;
    }
LABEL_42:
    if (v7 == (const llvm::detail::DoubleAPFloat *)v5) {
      return 0;
    }
LABEL_43:
    char v3 = 0;
    *(void *)(a1 + 8 * v2) = v7;
    uint64_t v2 = 1;
    if ((v4 & 1) == 0) {
      return v2;
    }
  }
}

llvm::Instruction *sub_1CB843944(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = (unsigned __int8 *)a2;
  if (*(unsigned char *)(a1 + 100)) {
    return (llvm::Instruction *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 91, (uint64_t *)a2, a3, 0, a4, 0, 0, 0);
  }
  if (*(uint64_t **)a2 == a3) {
    return (llvm::Instruction *)v5;
  }
  if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    __int16 v13 = 257;
    uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(46, a2, (uint64_t)a3, &v12, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v5, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = v10 + 16 * v7;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
        v10 += 16;
      }
      while (v10 != v11);
    }
    return (llvm::Instruction *)v5;
  }
  uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 46, a2, a3);
  if (v5) {
    BOOL v9 = v5[16] >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return (llvm::Instruction *)v5;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v5, a4);
}

uint64_t sub_1CB843AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::MDNode *a5)
{
  uint64_t v5 = a5;
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 86, (uint64_t *)a2, a3, 0, a4, a5, 0, 0);
  }
  if (*(unsigned __int8 *)(a2 + 16) >= 0x15u) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a3;
  }
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12
    || (v20 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), 21), (uint64_t v14 = (llvm::Instruction *)v20) != 0 ? (v21 = v20[16] >= 0x1Cu) : (v21 = 0), v21 && (uint64_t v14 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v20, a4)) == 0))
  {
    __int16 v23 = 257;
    __int16 v13 = (uint64_t ***)llvm::BinaryOperator::Create(21, (void *)a2, a3, &v22, 0);
    uint64_t v14 = (llvm::Instruction *)v13;
    int v15 = *(_DWORD *)(a1 + 96);
    if (v5 || (uint64_t v5 = *(llvm::MDNode **)(a1 + 88)) != 0) {
      llvm::Value::setMetadata(v13, 3, v5);
    }
    *((unsigned char *)v14 + 17) |= 2 * (_BYTE)v15;
    (*(void (**)(void, llvm::Instruction *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v14, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v16 = *(unsigned int *)(a1 + 8);
    if (v16)
    {
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = v18 + 16 * v16;
      do
      {
        llvm::Instruction::setMetadata(v14, *(_DWORD *)v18, *(llvm::MDNode **)(v18 + 8));
        v18 += 16;
      }
      while (v18 != v19);
    }
  }
  return (uint64_t)v14;
}

uint64_t sub_1CB843C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::MDNode *a5)
{
  uint64_t v5 = a5;
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 89, (uint64_t *)a2, a3, 0, a4, a5, 0, 0);
  }
  if (*(unsigned __int8 *)(a2 + 16) >= 0x15u) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a3;
  }
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    goto LABEL_13;
  }
  unsigned int v20 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), 18);
  uint64_t v14 = (llvm::Instruction *)v20;
  if (v20) {
    BOOL v21 = v20[16] >= 0x1Cu;
  }
  else {
    BOOL v21 = 0;
  }
  if (!v21) {
    return (uint64_t)v14;
  }
  uint64_t v22 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v20, a4);
  if (!v22)
  {
LABEL_13:
    __int16 v24 = 257;
    __int16 v13 = (uint64_t ***)llvm::BinaryOperator::Create(18, (void *)a2, a3, &v23, 0);
    uint64_t v14 = (llvm::Instruction *)v13;
    int v15 = *(_DWORD *)(a1 + 96);
    if (v5 || (uint64_t v5 = *(llvm::MDNode **)(a1 + 88)) != 0) {
      llvm::Value::setMetadata(v13, 3, v5);
    }
    *((unsigned char *)v14 + 17) |= 2 * (_BYTE)v15;
    (*(void (**)(void, llvm::Instruction *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v14, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v16 = *(unsigned int *)(a1 + 8);
    if (v16)
    {
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = v18 + 16 * v16;
      do
      {
        llvm::Instruction::setMetadata(v14, *(_DWORD *)v18, *(llvm::MDNode **)(v18 + 8));
        v18 += 16;
      }
      while (v18 != v19);
    }
    return (uint64_t)v14;
  }
  return (uint64_t)v22;
}

uint64_t sub_1CB843E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::MDNode *a5)
{
  uint64_t v5 = a5;
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 96, (uint64_t *)a2, a3, 0, a4, a5, 0, 0);
  }
  if (*(unsigned __int8 *)(a2 + 16) >= 0x15u) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a3;
  }
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    goto LABEL_13;
  }
  unsigned int v20 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), 16);
  uint64_t v14 = (llvm::Instruction *)v20;
  if (v20) {
    BOOL v21 = v20[16] >= 0x1Cu;
  }
  else {
    BOOL v21 = 0;
  }
  if (!v21) {
    return (uint64_t)v14;
  }
  uint64_t v22 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v20, a4);
  if (!v22)
  {
LABEL_13:
    __int16 v24 = 257;
    __int16 v13 = (uint64_t ***)llvm::BinaryOperator::Create(16, (void *)a2, a3, &v23, 0);
    uint64_t v14 = (llvm::Instruction *)v13;
    int v15 = *(_DWORD *)(a1 + 96);
    if (v5 || (uint64_t v5 = *(llvm::MDNode **)(a1 + 88)) != 0) {
      llvm::Value::setMetadata(v13, 3, v5);
    }
    *((unsigned char *)v14 + 17) |= 2 * (_BYTE)v15;
    (*(void (**)(void, llvm::Instruction *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v14, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v16 = *(unsigned int *)(a1 + 8);
    if (v16)
    {
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = v18 + 16 * v16;
      do
      {
        llvm::Instruction::setMetadata(v14, *(_DWORD *)v18, *(llvm::MDNode **)(v18 + 8));
        v18 += 16;
      }
      while (v18 != v19);
    }
    return (uint64_t)v14;
  }
  return (uint64_t)v22;
}

llvm::Instruction *sub_1CB843FF8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::MDNode *a4)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    __int16 v18 = 257;
    uint64_t v7 = (uint64_t ***)llvm::UnaryOperator::Create(12, (uint64_t *)a2, &v17, 0);
    BOOL v8 = (unsigned __int8 *)v7;
    int v9 = *(_DWORD *)(a1 + 96);
    if (a4 || (a4 = *(llvm::MDNode **)(a1 + 88)) != 0)
    {
      int v15 = a4;
      int v16 = *(_DWORD *)(a1 + 96);
      llvm::Value::setMetadata(v7, 3, v15);
      LOBYTE(v9) = v16;
    }
    v8[17] |= 2 * (_BYTE)v9;
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8, a3, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v12 = *(void *)a1;
      uint64_t v13 = v12 + 16 * v10;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
        v12 += 16;
      }
      while (v12 != v13);
    }
    return (llvm::Instruction *)v8;
  }
  BOOL v8 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 200))(*(void *)(a1 + 72));
  if (v8) {
    BOOL v14 = v8[16] >= 0x1Cu;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    return (llvm::Instruction *)v8;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v8, a3);
}

uint64_t sub_1CB844168(uint64_t a1, double a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v17 = 64;
  int v16 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v13, &v16);
  uint64_t v19 = v13[0];
  unsigned int v20 = (uint64_t *)v13[1];
  int v21 = v14;
  unsigned __int8 v22 = v15 & 0xF;
  llvm::APFloat::convert((uint64_t)v18, *(void **)(a1 + 32), 1, v13);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 != v19)
  {
    uint64_t result = 0;
    uint64_t v3 = v19;
    goto LABEL_20;
  }
  if ((_UNKNOWN *)v3 == &unk_1CFB2E344)
  {
    uint64_t result = llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(a1 + 32), (const llvm::detail::DoubleAPFloat *)&v19);
    uint64_t v3 = v19;
LABEL_20:
    if ((_UNKNOWN *)v3 == &unk_1CFB2E344)
    {
      uint64_t v11 = result;
      sub_1CB845718((uint64_t *)&v20);
      return v11;
    }
    goto LABEL_17;
  }
  if ((uint64_t *)(a1 + 32) == &v19)
  {
    uint64_t result = 1;
  }
  else
  {
    int v4 = *(unsigned __int8 *)(a1 + 52);
    if ((v4 & 7) != (v22 & 7) || ((v22 ^ v4) & 8) != 0)
    {
LABEL_16:
      uint64_t result = 0;
      goto LABEL_17;
    }
    uint64_t result = 1;
    if ((v4 & 7) != 3 && (v4 & 7) != 0)
    {
      if ((v4 & 6) == 0 || *(_DWORD *)(a1 + 48) == v21)
      {
        int v6 = *(_DWORD *)(v3 + 8);
        unsigned int v7 = v6 - 64;
        BOOL v8 = (void *)(a1 + 40);
        if ((v6 - 64) <= 0xFFFFFF7F) {
          BOOL v8 = (void *)*v8;
        }
        unsigned int v9 = v6 + 64;
        if (v7 >= 0xFFFFFF80) {
          uint64_t v10 = (uint64_t *)&v20;
        }
        else {
          uint64_t v10 = v20;
        }
        uint64_t result = memcmp(v8, v10, (v9 >> 3) & 0x1FFFFFF8) == 0;
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
LABEL_17:
  if ((*(_DWORD *)(v3 + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v12 = result;
    if (v20) {
      MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
    return v12;
  }
  return result;
}

llvm::Instruction *sub_1CB844364(uint64_t *a1, uint64_t a2, const llvm::APInt *a3, int a4, uint64_t a5)
{
  uint64_t v9 = *(void *)a1[8];
  uint64_t v10 = *(llvm::ConstantInt **)(v9 + 1960);
  unint64_t v11 = *(unsigned int *)(v9 + 1968);
  unsigned int v23 = v11 >> 8;
  if (v11 >> 8 > 0x40) {
    operator new[]();
  }
  if (v11 <= 0xFF) {
    LODWORD(v12) = 0;
  }
  else {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
  }
  unsigned __int8 v22 = (const char *)(v12 & a4);
  uint64_t v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v22, a3);
  if (v23 >= 0x41 && v22) {
    MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
  }
  uint64_t v25 = v13;
  int v14 = (llvm::Instruction *)(*(uint64_t (**)(uint64_t, uint64_t, const llvm::APInt *, void **, uint64_t, uint64_t))(*(void *)a1[9] + 48))(a1[9], a2, a3, &v25, 1, 1);
  if (!v14)
  {
    __int16 v24 = 257;
    int v16 = (char *)operator new(0x90uLL);
    *((_DWORD *)v16 + 21) = *((_DWORD *)v16 + 21) & 0x38000000 | 2;
    int v14 = (llvm::Instruction *)(v16 + 64);
    *(void *)int v16 = 0;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = v16 + 64;
    *((void *)v16 + 4) = 0;
    *((void *)v16 + 5) = 0;
    *((void *)v16 + 6) = 0;
    *((void *)v16 + 7) = v16 + 64;
    sub_1CB845A7C(a2, (uint64_t *)a3, (uint64_t)&v25, 1);
    *((void *)v16 + 8) = v17;
    *((void *)v16 + 9) = 0;
    unsigned int v18 = *((_DWORD *)v16 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v16 + 20) = 62;
    *((_DWORD *)v16 + 21) = v18;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *((_DWORD *)v16 + 30) = 0;
    *((void *)v16 + 16) = a2;
    *((void *)v16 + 17) = llvm::GetElementPtrInst::getIndexedType(a2, (uint64_t)&v25, 1);
    llvm::GetElementPtrInst::init((uint64_t ***)v16 + 8, (uint64_t **)a3, (uint64_t *)&v25, 1, &v22);
    v16[81] |= 2u;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v16 + 64, a5, a1[6], a1[7]);
    uint64_t v19 = *((unsigned int *)a1 + 2);
    if (v19)
    {
      uint64_t v20 = *a1;
      uint64_t v21 = v20 + 16 * v19;
      do
      {
        llvm::Instruction::setMetadata(v14, *(_DWORD *)v20, *(llvm::MDNode **)(v20 + 8));
        v20 += 16;
      }
      while (v20 != v21);
    }
  }
  return v14;
}

llvm::Instruction *sub_1CB8445F4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (!a2 || a2[16] > 0x14u || !a3 || a3[16] > 0x14u)
  {
    __int16 v16 = 257;
    BOOL v8 = (char *)operator new(0x80uLL);
    *((_DWORD *)v8 + 21) = *((_DWORD *)v8 + 21) & 0x38000000 | 2;
    uint64_t v9 = (unsigned __int8 *)(v8 + 64);
    *(void *)BOOL v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *((void *)v8 + 3) = v8 + 64;
    *((void *)v8 + 4) = 0;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 6) = 0;
    *((void *)v8 + 7) = v8 + 64;
    llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v8 + 64), (llvm::Value *)a2, (llvm::Value *)a3, &v15, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v9, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v12 = *(void *)a1;
      uint64_t v13 = v12 + 16 * v10;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v9, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
        v12 += 16;
      }
      while (v12 != v13);
    }
    return (llvm::Instruction *)v9;
  }
  uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(void, unsigned __int8 *, unsigned __int8 *))(**(void **)(a1 + 72)
                                                                                                  + 320))(*(void *)(a1 + 72), a2, a3);
  if (v9) {
    BOOL v14 = v9[16] >= 0x1Cu;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    return (llvm::Instruction *)v9;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v9, a4);
}

llvm::Instruction *sub_1CB84478C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5)
{
  if (!a2 || a2[16] > 0x14u || !a3 || a3[16] > 0x14u || !a4 || a4[16] > 0x14u)
  {
    __int16 v20 = 257;
    uint64_t v10 = (char *)operator new(0xA0uLL);
    uint64_t v11 = 0;
    uint64_t v12 = (unsigned __int8 *)(v10 + 96);
    *((_DWORD *)v10 + 29) = *((_DWORD *)v10 + 29) & 0x38000000 | 3;
    do
    {
      uint64_t v13 = &v10[v11];
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
      *((void *)v13 + 3) = v12;
      v11 += 32;
    }
    while (v11 != 96);
    llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v10 + 96), (llvm::Value *)a2, (llvm::Value *)a3, (llvm::Value *)a4, &v19, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v12, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v14 = *(unsigned int *)(a1 + 8);
    if (v14)
    {
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = v17 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
        v17 += 16;
      }
      while (v17 != v18);
    }
    return (llvm::Instruction *)v12;
  }
  uint64_t v12 = (unsigned __int8 *)(*(uint64_t (**)(void, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *))(**(void **)(a1 + 72) + 328))(*(void *)(a1 + 72), a2, a3, a4);
  if (v12) {
    BOOL v16 = v12[16] >= 0x1Cu;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16) {
    return (llvm::Instruction *)v12;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v12, a5);
}

llvm::Instruction *sub_1CB84494C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 72))(*(void *)(a1 + 72), a2, a3, a5, a6);
    if (result) {
      BOOL v9 = *((unsigned __int8 *)result + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      return sub_1CB844E0C((uint64_t *)a1, result, a4);
    }
  }
  else
  {
    return sub_1CB84604C((uint64_t *)a1, 15, (void *)a2, a3, a4, a5, a6);
  }
  return result;
}

llvm::Instruction *sub_1CB844A3C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = a6;
  int v7 = a5;
  uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, void *, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a2, a3, a5, a6);
  if (!result)
  {
    return sub_1CB84604C((uint64_t *)a1, 13, a2, a3, a4, v7, v6);
  }
  return result;
}

llvm::Instruction *sub_1CB844AF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
  if (!result)
  {
    __int16 v11 = 257;
    BOOL v9 = llvm::BinaryOperator::Create(29, a2, a3, &v10, 0);
    return sub_1CB844E0C((uint64_t *)a1, v9, a4);
  }
  return result;
}

llvm::Instruction *sub_1CB844B8C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v6 = a2;
  BOOL v8 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    BOOL v9 = (llvm::Type *)**((void **)v8 + 2);
  }
  else {
    BOOL v9 = *(llvm::Type **)a2;
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v9);
  __int16 v11 = (llvm::Type *)a3;
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    __int16 v11 = **(llvm::Type ***)(a3 + 16);
  }
  unsigned int v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  if (PrimitiveSizeInBits >= v12)
  {
    if (v8 != (llvm::Type *)a3 && PrimitiveSizeInBits > v12)
    {
      if (v6[16] > 0x14u)
      {
        __int16 v23 = 257;
        int v6 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v6, a3, v22, 0);
        (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v17 = *(unsigned int *)(a1 + 8);
        if (v17)
        {
          uint64_t v18 = *(void *)a1;
          uint64_t v19 = v18 + 16 * v17;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v18, *(llvm::MDNode **)(v18 + 8));
            v18 += 16;
          }
          while (v18 != v19);
        }
        return (llvm::Instruction *)v6;
      }
      char v15 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 224);
      goto LABEL_11;
    }
    return (llvm::Instruction *)v6;
  }
  if (v8 == (llvm::Type *)a3) {
    return (llvm::Instruction *)v6;
  }
  if (v6[16] > 0x14u)
  {
    __int16 v23 = 257;
    int v6 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v6, a3, v22, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13)
    {
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = v20 + 16 * v13;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v20, *(llvm::MDNode **)(v20 + 8));
        v20 += 16;
      }
      while (v20 != v21);
    }
    return (llvm::Instruction *)v6;
  }
  char v15 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 224);
LABEL_11:
  int v6 = (unsigned __int8 *)v15();
  if (v6) {
    BOOL v16 = v6[16] >= 0x1Cu;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16) {
    return (llvm::Instruction *)v6;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v6, a4);
}

llvm::Instruction *sub_1CB844E0C(uint64_t *a1, llvm::Instruction *a2, uint64_t a3)
{
  (*(void (**)(uint64_t, llvm::Instruction *, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v7 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata(a2, *(_DWORD *)v7, *(llvm::MDNode **)(v7 + 8));
      v7 += 16;
    }
    while (v7 != v8);
  }
  return a2;
}

llvm::Instruction *sub_1CB844E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::MDNode *a6)
{
  uint64_t v8 = a4;
  BOOL v9 = (void *)a3;
  char v10 = a2;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    a3 = 0;
  }
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u) {
    a4 = 0;
  }
  if (a3) {
    BOOL v12 = a4 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v19 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), a2);
    uint64_t v13 = (llvm::Value *)v19;
    if (v19) {
      BOOL v20 = v19[16] >= 0x1Cu;
    }
    else {
      BOOL v20 = 0;
    }
    if (!v20) {
      return v13;
    }
    uint64_t v21 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v19, a5);
    if (v21) {
      return v21;
    }
  }
  __int16 v23 = 257;
  uint64_t v13 = llvm::BinaryOperator::Create(v10, v9, v8, &v22, 0);
  if (sub_1CB845E74((uint64_t)v13))
  {
    int v16 = *(_DWORD *)(a1 + 96);
    if (a6 || (a6 = *(llvm::MDNode **)(a1 + 88)) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v13, 3, a6);
    }
    *((unsigned char *)v13 + 17) |= 2 * (_BYTE)v16;
  }
  (*(void (**)(void, llvm::Value *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v13, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v14 = *(unsigned int *)(a1 + 8);
  if (v14)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = v17 + 16 * v14;
    do
    {
      llvm::Instruction::setMetadata(v13, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
      v17 += 16;
    }
    while (v17 != v18);
  }
  return v13;
}

llvm::Instruction *sub_1CB845034(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = (unsigned __int8 *)a2;
  if (*(unsigned char *)(a1 + 100)) {
    return (llvm::Instruction *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 94, (uint64_t *)a2, a3, 0, a4, 0, 0, 0);
  }
  if (*(uint64_t **)a2 == a3) {
    return (llvm::Instruction *)v5;
  }
  if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    __int16 v13 = 257;
    uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(45, a2, (uint64_t)a3, &v12, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v5, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = v10 + 16 * v7;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
        v10 += 16;
      }
      while (v10 != v11);
    }
    return (llvm::Instruction *)v5;
  }
  uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 45, a2, a3);
  if (v5) {
    BOOL v9 = v5[16] >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return (llvm::Instruction *)v5;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v5, a4);
}

unsigned __int8 *sub_1CB8451C0(void ***a1, uint64_t a2)
{
  int v4 = (uint64_t *)(***a1 + 1672);
  __int16 v18 = 257;
  uint64_t v5 = sub_1CB845378(a2, (uint64_t)a1, v4, (uint64_t)v17);
  int v6 = (unsigned __int8 *)v5;
  uint64_t v7 = *a1;
  v16[16] = 257;
  if (*(void ***)v5 != v7)
  {
    if (*((unsigned __int8 *)v5 + 16) <= 0x14u)
    {
      int v6 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, void **))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 49, v5, v7);
      if (v6) {
        BOOL v11 = v6[16] >= 0x1Cu;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
        (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v6, v16, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v13 = *(unsigned int *)(a2 + 8);
        if (v13)
        {
          uint64_t v14 = *(void *)a2;
          uint64_t v15 = v14 + 16 * v13;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
            v14 += 16;
          }
          while (v14 != v15);
        }
      }
    }
    else
    {
      __int16 v18 = 257;
      int v6 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v5, (uint64_t)v7, v17, 0);
      (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v6, v16, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v8 = *(unsigned int *)(a2 + 8);
      if (v8)
      {
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = v9 + 16 * v8;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v9, *(llvm::MDNode **)(v9 + 8));
          v9 += 16;
        }
        while (v9 != v10);
      }
    }
  }
  return v6;
}

llvm::Instruction *sub_1CB845378(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = (unsigned __int8 *)a2;
  if (*(unsigned char *)(a1 + 100)) {
    return (llvm::Instruction *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 115, (uint64_t *)a2, a3, 0, a4, 0, 0, 0);
  }
  if (*(uint64_t **)a2 == a3) {
    return (llvm::Instruction *)v5;
  }
  if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    __int16 v13 = 257;
    uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(44, a2, (uint64_t)a3, &v12, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v5, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = v10 + 16 * v7;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
        v10 += 16;
      }
      while (v10 != v11);
    }
    return (llvm::Instruction *)v5;
  }
  uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 44, a2, a3);
  if (v5) {
    BOOL v9 = v5[16] >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return (llvm::Instruction *)v5;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v5, a4);
}

llvm::Instruction *sub_1CB845504(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v6 = a2;
  uint64_t v8 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    BOOL v9 = (llvm::Type *)**((void **)v8 + 2);
  }
  else {
    BOOL v9 = *(llvm::Type **)a2;
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v9);
  uint64_t v11 = (llvm::Type *)a3;
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    uint64_t v11 = **(llvm::Type ***)(a3 + 16);
  }
  unsigned int v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  if (PrimitiveSizeInBits >= v12)
  {
    if (PrimitiveSizeInBits > v12)
    {
      return sub_1CB84580C(a1, 38, (uint64_t)v6, a3, a4);
    }
    return (llvm::Instruction *)v6;
  }
  if (v8 == (llvm::Type *)a3) {
    return (llvm::Instruction *)v6;
  }
  if (v6[16] > 0x14u)
  {
    __int16 v19 = 257;
    int v6 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v6, a3, &v18, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13)
    {
      uint64_t v16 = *(void *)a1;
      uint64_t v17 = v16 + 16 * v13;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
        v16 += 16;
      }
      while (v16 != v17);
    }
    return (llvm::Instruction *)v6;
  }
  int v6 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 72)
                                                                                                 + 224))(*(void *)(a1 + 72), 40, v6, a3);
  if (v6) {
    BOOL v15 = v6[16] >= 0x1Cu;
  }
  else {
    BOOL v15 = 0;
  }
  if (!v15) {
    return (llvm::Instruction *)v6;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v6, a4);
}

BOOL sub_1CB8456FC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v1 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v2 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::isDenormal(v1);
  }
  else {
    return llvm::detail::IEEEFloat::isDenormal(v1);
  }
}

uint64_t *sub_1CB845718(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = v1 - 16;
    uint64_t v3 = *(void *)(v1 - 8);
    if (!v3)
    {
LABEL_12:
      JUMPOUT(0x1D25D9CB0);
    }
    uint64_t v4 = 32 * v3;
    while (1)
    {
      uint64_t v5 = *(void *)(v1 + v4 - 24);
      if ((_UNKNOWN *)v5 == &unk_1CFB2E344)
      {
        uint64_t v9 = v2;
        uint64_t v7 = v4;
        uint64_t v8 = v1;
        sub_1CB845718(v1 + v4 - 16, 0);
      }
      else
      {
        if ((*(_DWORD *)(v5 + 8) - 64) > 0xFFFFFF7F) {
          goto LABEL_6;
        }
        uint64_t v6 = *(void *)(v1 + v4 - 16);
        if (!v6) {
          goto LABEL_6;
        }
        uint64_t v9 = v2;
        uint64_t v7 = v4;
        uint64_t v8 = v1;
        MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
      }
      uint64_t v4 = v7;
      uint64_t v1 = v8;
      uint64_t v2 = v9;
LABEL_6:
      v4 -= 32;
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

llvm::Instruction *sub_1CB84580C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (unsigned __int8 *)a3;
  if (*(void *)a3 == a4) {
    return (llvm::Instruction *)v5;
  }
  if (*(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    __int16 v14 = 257;
    uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(a2, a3, a4, &v13, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v5, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v8 = *(unsigned int *)(a1 + 8);
    if (v8)
    {
      uint64_t v11 = *(void *)a1;
      uint64_t v12 = v11 + 16 * v8;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v11, *(llvm::MDNode **)(v11 + 8));
        v11 += 16;
      }
      while (v11 != v12);
    }
    return (llvm::Instruction *)v5;
  }
  uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), a2, a3, a4);
  if (v5) {
    BOOL v10 = v5[16] >= 0x1Cu;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10) {
    return (llvm::Instruction *)v5;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v5, a5);
}

uint64_t sub_1CB845960(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6, const char **a7, uint64_t a8)
{
  sub_1CB845A7C(a2, a3, (uint64_t)a4, a5);
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = 0;
  unsigned int v17 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a6 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 62;
  *(_DWORD *)(a1 + 20) = v17;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v18 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a8)
  {
    uint64_t v20 = *(void *)(a8 + 40);
    uint64_t v21 = (uint64_t *)(a8 + 24);
    *(void *)(a1 + 40) = v20;
    *(_WORD *)(v20 + 18) &= ~0x8000u;
    if ((*(unsigned char *)(a1 + 23) & 0x10) != 0)
    {
      uint64_t v23 = *(void *)(v20 + 56);
      if (v23)
      {
        __int16 v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
        if (v24) {
          llvm::ValueSymbolTable::reinsertValue(v24, (llvm::Value *)a1);
        }
      }
    }
    uint64_t v22 = *v21;
    *(void *)(a1 + 24) = *v21;
    *(void *)(a1 + 32) = v21;
    *(void *)(v22 + 8) = v18;
    *uint64_t v21 = v18;
  }
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = llvm::GetElementPtrInst::getIndexedType(a2, (uint64_t)a4, a5);
  llvm::GetElementPtrInst::init((uint64_t ***)a1, (uint64_t **)a3, a4, a5, a7);
  return a1;
}

double sub_1CB845A7C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t **)a3;
  uint64_t v7 = *a2;
  unsigned int v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12)
  {
    uint64_t v7 = **(void **)(v7 + 16);
    unsigned int v8 = *(_DWORD *)(v7 + 8);
  }
  uint64_t v9 = (llvm::Type *)(v8 >> 8);
  IndexedType = (llvm::PointerType *)llvm::GetElementPtrInst::getIndexedType(a1, a3, a4);
  if (*(void *)(v7 + 24)) {
    uint64_t v11 = (uint64_t **)llvm::PointerType::get(IndexedType, v9);
  }
  else {
    uint64_t v11 = (uint64_t **)llvm::PointerType::get(*(uint64_t ***)v7, v9);
  }
  uint64_t v13 = *a2;
  if (*a2 && (*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
  {
    int v14 = *(_DWORD *)(v13 + 8);
  }
  else
  {
    if (!a4) {
      return result;
    }
    uint64_t v15 = 8 * a4;
    while (1)
    {
      uint64_t v13 = **v5;
      if (v13 && (*(_DWORD *)(v13 + 8) & 0xFE) == 18) {
        break;
      }
      ++v5;
      v15 -= 8;
      if (!v15) {
        return result;
      }
    }
    int v14 = *(_DWORD *)(v13 + 8);
  }
  unsigned int v17 = (llvm::Type *)*(unsigned int *)(v13 + 32);
  if (v14 == 19)
  {
    return llvm::ScalableVectorType::get(v11, v17);
  }
  else
  {
    return llvm::FixedVectorType::get((llvm::FixedVectorType *)v11, v17);
  }
}

uint64_t sub_1CB845BAC(uint64_t *a1, uint64_t **a2, uint64_t **a3, uint64_t *a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7)
{
  uint64_t v12 = a1[13];
  uint64_t v13 = a1[14];
  __int16 v39 = 257;
  if (v13)
  {
    int v26 = 0;
    uint64_t v27 = 48 * v13;
    int v28 = (void *)(v12 + 32);
    do
    {
      v26 += (*v28 - *(v28 - 1)) >> 3;
      v28 += 6;
      v27 -= 48;
    }
    while (v27);
    LODWORD(v14) = a5 + 1;
    uint64_t v29 = (v26 + a5 + 1);
    uint64_t v35 = (16 * v13);
    if (v35) {
      uint64_t v30 = (16 * v13) | 8u;
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = (char *)operator new(v30 + 32 * v29 + 80);
    uint64_t v32 = &v31[v30];
    uint64_t v17 = (uint64_t)&v31[32 * v29 + v30];
    *(_DWORD *)(v17 + 20) = v29 & 0x7FFFFFF | ((v35 != 0) << 31) | *(_DWORD *)(v17 + 20) & 0x38000000;
    if (v29)
    {
      do
      {
        *(void *)uint64_t v32 = 0;
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = 0;
        *((void *)v32 + 3) = v17;
        v32 += 32;
      }
      while (v32 != (char *)v17);
    }
    if (v35) {
      *(void *)&v31[v35] = v35;
    }
    uint64_t v19 = *a2[2];
    int v18 = 0;
    uint64_t v33 = 48 * v13;
    unsigned int v34 = (void *)(v12 + 32);
    do
    {
      v18 += (*v34 - *(v34 - 1)) >> 3;
      v34 += 6;
      v33 -= 48;
    }
    while (v33);
  }
  else
  {
    uint64_t v14 = (a5 + 1);
    BOOL v15 = a5 == -1;
    uint64_t v16 = operator new(32 * v14 + 80);
    uint64_t v17 = (uint64_t)&v16[4 * v14];
    *(_DWORD *)(v17 + 20) = *(_DWORD *)(v17 + 20) & 0x38000000 | v14 & 0x7FFFFFF;
    if (!v15)
    {
      do
      {
        *uint64_t v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        v16[3] = v17;
        v16 += 4;
      }
      while (v16 != (void *)v17);
    }
    int v18 = 0;
    uint64_t v19 = *a2[2];
  }
  *(void *)uint64_t v17 = v19;
  *(void *)(v17 + 8) = 0;
  int v20 = *(_DWORD *)(v17 + 20) & 0xC0000000 | (v18 + v14) & 0x7FFFFFF;
  *(_DWORD *)(v17 + 16) = 84;
  *(_DWORD *)(v17 + 20) = v20;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_DWORD *)(v17 + 56) = 0;
  *(void *)(v17 + 64) = 0;
  llvm::CallInst::init((uint64_t ***)v17, a2, a3, a4, a5, v12, v13, &v38);
  if (*((unsigned char *)a1 + 100)) {
    *(void *)(v17 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v17 + 64), **(uint64_t ***)v17, -1, 61);
  }
  if (sub_1CB845E74(v17))
  {
    int v21 = *((_DWORD *)a1 + 24);
    if (a7 || (a7 = (llvm::MDNode *)a1[11]) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v17, 3, a7);
    }
    *(unsigned char *)(v17 + 17) |= 2 * (_BYTE)v21;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v17, a6, a1[6], a1[7]);
  uint64_t v22 = *((unsigned int *)a1 + 2);
  if (v22)
  {
    uint64_t v24 = *a1;
    uint64_t v25 = v24 + 16 * v22;
    do
    {
      llvm::Instruction::setMetadata((llvm::Instruction *)v17, *(_DWORD *)v24, *(llvm::MDNode **)(v24 + 8));
      v24 += 16;
    }
    while (v24 != v25);
  }
  return v17;
}

BOOL sub_1CB845E74(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || (unsigned int v2 = v1 - 28, v1 < 0x1C))
  {
    uint64_t v3 = 0;
    if (!a1 || v1 != 5) {
      return v3;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v2 > 0x39) {
    return 0;
  }
  if (((1 << v2) & 0x40000001255000) != 0) {
    return 1;
  }
  if (((1 << v2) & 0x380000000000000) == 0) {
    return 0;
  }
  do
  {
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = *(unsigned __int8 *)(*(void *)a1 + 8);
    a1 = *(void *)a1 + 24;
    if (v4) {
      BOOL v6 = v5 == 17;
    }
    else {
      BOOL v6 = 0;
    }
  }
  while (v6);
  if ((v5 & 0xFE) == 0x12) {
    unsigned int v5 = *(unsigned __int8 *)(**(void **)(v4 + 16) + 8);
  }
  return v5 < 7;
}

llvm::Instruction *sub_1CB845F20(uint64_t a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5)
{
  double result = (llvm::Instruction *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72));
  if (!result)
  {
    uint64_t v11 = operator new(0x80uLL);
    uint64_t v12 = (llvm::Value *)(v11 + 16);
    v11[21] = v11[21] & 0x38000000 | 2;
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *((void *)v11 + 3) = v11 + 16;
    *((void *)v11 + 4) = 0;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = v11 + 16;
    __int16 v19 = 257;
    uint64_t v13 = (void **)*a3;
    uint64_t v14 = **(void **)*a3 + 1888;
    if (*a3 && (v13[1] & 0xFE) == 0x12)
    {
      BOOL v15 = (uint64_t **)(**(void **)*a3 + 1888);
      uint64_t v16 = (llvm::Type *)*((unsigned int *)v13 + 8);
      if (*((_DWORD *)v13 + 2) == 19) {
        llvm::ScalableVectorType::get(v15, v16);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v16);
      }
      uint64_t v14 = v17;
    }
    llvm::CmpInst::CmpInst(v12, v14, 53, a2, (uint64_t)a3, a4, &v18, 0, 0);
    return sub_1CB844E0C((uint64_t *)a1, v12, a5);
  }
  return result;
}

llvm::Instruction *sub_1CB84604C(uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  __int16 v14 = 257;
  uint64_t v11 = llvm::BinaryOperator::Create(a2, a3, a4, &v13, 0);
  double result = sub_1CB844E0C(a1, v11, a5);
  if (a6) {
    *((unsigned char *)result + 17) |= 2u;
  }
  if (a7) {
    *((unsigned char *)result + 17) |= 4u;
  }
  return result;
}

uint64_t sub_1CB8460E4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) == 0 || !v2)
  {
    AggregateElement = **(void ***)result;
    if (AggregateElement) {
      BOOL v4 = *((unsigned char *)AggregateElement + 16) == 16;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4)
    {
      unint64_t v13 = v2;
      uint64_t v14 = result;
      AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)AggregateElement, 0);
      unint64_t v2 = v13;
      double result = v14;
    }
    uint64_t v7 = (unsigned int *)AggregateElement[3];
    unsigned int v5 = (unsigned int *)(AggregateElement + 3);
    BOOL v6 = v7;
    if (v5[2] >= 0x41) {
      unsigned int v5 = v6;
    }
    unint64_t v2 = *(void *)(*(void *)(v2 + 16) + 8 * *v5);
  }
  int v8 = *(unsigned __int8 *)(v2 + 8);
  if (v2) {
    BOOL v9 = v8 == 17;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9 || (v2 ? (BOOL v10 = (v8 & 0xFE) == 18) : (BOOL v10 = 0), v10))
  {
    uint64_t v12 = *(void *)(v2 + 24) | 4;
  }
  else
  {
    unint64_t v11 = v2 & 0xFFFFFFFFFFFFFFFBLL;
    if (v8 == 16) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  *(void *)result += 32;
  *(void *)(result + 8) = v12;
  return result;
}

uint64_t sub_1CB8461A4(uint64_t result, unsigned int a2, uint64_t a3)
{
  unsigned int v15 = a2;
  uint64_t v14 = a3;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (a3)
  {
    if (v4)
    {
      unsigned int v5 = (uint64_t *)(v3 + 8);
      uint64_t v6 = 16 * v4;
      while (*((_DWORD *)v5 - 2) != a2)
      {
        v5 += 2;
        v6 -= 16;
        if (!v6) {
          return sub_1CB846294(result, &v15, &v14);
        }
      }
      uint64_t *v5 = a3;
    }
    else
    {
      return sub_1CB846294(result, &v15, &v14);
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v8 = 0;
      uint64_t v7 = v3 + 16 * v4;
      uint64_t v9 = 16 * v4;
      uint64_t v10 = 16 * v4 - 16;
      while (*(_DWORD *)(v3 + v8) != a2)
      {
        v8 += 16;
        if (v9 == v8) {
          goto LABEL_9;
        }
      }
      uint64_t v7 = v3 + v8;
      if (v10 != v8)
      {
        unint64_t v11 = (void *)(v7 + 24);
        uint64_t v12 = v9 - v8 - 16;
        do
        {
          int v13 = *((_DWORD *)v11 - 2);
          if (v13 != a2)
          {
            *(_DWORD *)uint64_t v7 = v13;
            *(void *)(v7 + 8) = *v11;
            v7 += 16;
          }
          v11 += 2;
          v12 -= 16;
        }
        while (v12);
      }
    }
    else
    {
      uint64_t v7 = *(void *)result;
    }
LABEL_9:
    *(_DWORD *)(result + 8) = (unint64_t)(v7 - v3) >> 4;
  }
  return result;
}

uint64_t sub_1CB846294(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return sub_1CB8462D0(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)a1 + 16 * v3;
  *(_DWORD *)uint64_t v5 = *a2;
  *(void *)(v5 + 8) = *a3;
  unsigned int v6 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v4 + 16 * v6 - 16;
}

uint64_t sub_1CB8462D0(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v5 = (void *)(*(void *)a1 + 16 * v4);
  void *v5 = *a2;
  v5[1] = v3;
  LODWORD(v5) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(void *)a1 + 16 * v5 - 16;
}

uint64_t sub_1CB84634C(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_14;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

uint64_t *sub_1CB8463E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 < (3 * v7))
  {
    if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CB8465A8(a1, *(_DWORD *)(a1 + 16));
      uint64_t v25 = 0;
      sub_1CB84634C((uint64_t *)a1, a3, &v25);
      a4 = v25;
    }
  }
  else
  {
    uint64_t v8 = *(uint64_t **)a1;
    unint64_t v9 = (2 * v7 - 1) | ((unint64_t)(2 * v7 - 1) >> 1);
    unint64_t v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
    int v11 = ((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8);
    if ((v11 + 1) > 0x40) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 64;
    }
    *(_DWORD *)(a1 + 16) = v12;
    unsigned int v13 = (uint64_t *)operator new(16 * v12, (std::align_val_t)8uLL);
    *(void *)a1 = v13;
    if (v8)
    {
      sub_1CB846674(a1, v8, &v8[2 * v7]);
      MEMORY[0x1D25D9CD0](v8, 8);
      LODWORD(v15) = *(_DWORD *)(a1 + 16);
      unsigned int v13 = *(uint64_t **)a1;
    }
    else
    {
      uint64_t v14 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v15 = *(unsigned int *)(a1 + 16);
      do
      {
        v13[v14] = -4096;
        v14 += 2;
      }
      while (2 * v15 != v14);
    }
    uint64_t v16 = *a3;
    int v17 = v15 - 1;
    unsigned int v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = &v13[2 * v18];
    uint64_t v19 = *a4;
    if (*a3 == *a4) {
      goto LABEL_21;
    }
    int v20 = 0;
    int v21 = 1;
    while (v19 != -4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v19 == -8192;
      }
      if (v22) {
        int v20 = a4;
      }
      unsigned int v23 = v18 + v21++;
      unsigned int v18 = v23 & v17;
      a4 = &v13[2 * v18];
      uint64_t v19 = *a4;
      if (v16 == *a4) {
        goto LABEL_21;
      }
    }
    if (v20) {
      a4 = v20;
    }
  }
  uint64_t v16 = *a4;
LABEL_21:
  ++*(_DWORD *)(a1 + 8);
  if (v16 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CB8465A8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CB846674(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CB846674(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      void *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v6 = 0;
    int v7 = v3 - 1;
    do
    {
      uint64_t v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        uint64_t v10 = (void *)(*(void *)result + 16 * v9);
        uint64_t v11 = *v10;
        if (v8 != *v10)
        {
          unsigned int v12 = 0;
          int v13 = 1;
          while (v11 != -4096)
          {
            if (v12) {
              BOOL v14 = 0;
            }
            else {
              BOOL v14 = v11 == -8192;
            }
            if (v14) {
              unsigned int v12 = v10;
            }
            unsigned int v15 = v9 + v13++;
            unsigned int v9 = v15 & v7;
            uint64_t v10 = (void *)(*(void *)result + 16 * (v15 & v7));
            uint64_t v11 = *v10;
            if (v8 == *v10) {
              goto LABEL_19;
            }
          }
          if (v12) {
            uint64_t v10 = v12;
          }
        }
LABEL_19:
        *uint64_t v10 = v8;
        v10[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1CB846748(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB846780()
{
  return "AGX1 Specific CodeGen Prepare: CFG Modifying Part";
}

void sub_1CB846790(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CB8467F4(uint64_t a1, uint64_t a2)
{
  v234[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::TargetPassConfig::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::TargetPassConfig::ID);
  int v200 = *(unsigned __int8 *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 112) + 16))(*(void *)(v7 + 112), a2)+ 280);
  v232 = v234;
  uint64_t v233 = 0x400000000;
  char v8 = sub_1CD0FFA48(a2, 0);
  unsigned int v9 = (unint64_t *)v207;
  uint64_t v203 = (unint64_t *)v207;
  unsigned int v204 = (unint64_t *)v207;
  uint64_t v205 = (llvm::Type *)8;
  int v206 = 0;
  uint64_t v229 = (llvm::BasicBlock **)v231;
  uint64_t v230 = 0x400000000;
  uint64_t v10 = (void *)(a2 + 72);
  uint64_t v11 = *(void **)(a2 + 80);
  if (v11 != (void *)(a2 + 72))
  {
    uint64_t v197 = a2;
    while (1)
    {
      unsigned int v12 = v11 - 3;
      if (!v11) {
        unsigned int v12 = 0;
      }
      int v13 = v12 + 5;
      BOOL v14 = (void *)v12[6];
      if (v14 != v12 + 5) {
        break;
      }
LABEL_253:
      uint64_t v11 = (void *)v11[1];
      if (v11 == v10)
      {
        unsigned int v9 = v203;
        unsigned int v120 = v204;
        unsigned int v122 = v205;
        unsigned int v121 = HIDWORD(v205);
        goto LABEL_256;
      }
    }
    while (1)
    {
      unsigned int v15 = (void *)v14[1];
      uint64_t v16 = v14 - 3;
      if (v14) {
        int v17 = v14 - 3;
      }
      else {
        int v17 = 0;
      }
      if (*((unsigned char *)v17 + 16) != 84) {
        goto LABEL_202;
      }
      uint64_t v18 = *(v17 - 4);
      if (!v18 || *(unsigned char *)(v18 + 16) || *(void *)(v18 + 24) != v17[9] || (*(unsigned char *)(v18 + 33) & 0x20) == 0) {
        goto LABEL_202;
      }
      int v19 = *(_DWORD *)(*(v14 - 7) + 36);
      if ((v19 & 0xFFFFFFFE) == 0x7CC)
      {
        int v20 = &v16[-4 * (*((_DWORD *)v14 - 1) & 0x7FFFFFF)];
        int v21 = (unsigned int *)(*v20 + 24);
        if (*(_DWORD *)(*v20 + 32) >= 0x41u) {
          int v21 = *(unsigned int **)v21;
        }
        uint64_t v22 = *v21;
        uint64_t v23 = v20[4];
        int v24 = *(unsigned __int8 *)(v23 + 16);
        if (v19 == 1996)
        {
          if (v24 != 84) {
            goto LABEL_201;
          }
          uint64_t v25 = *(void *)(v23 - 32);
          if (!v25
            || *(unsigned char *)(v25 + 16)
            || *(void *)(v25 + 24) != *(void *)(v23 + 72)
            || (*(unsigned char *)(v25 + 33) & 0x20) == 0
            || *(_DWORD *)(v25 + 36) != 1994)
          {
            goto LABEL_201;
          }
        }
        else
        {
          if (v24 != 84) {
            goto LABEL_201;
          }
          uint64_t v26 = *(void *)(v23 - 32);
          if (!v26
            || *(unsigned char *)(v26 + 16)
            || *(void *)(v26 + 24) != *(void *)(v23 + 72)
            || (*(unsigned char *)(v26 + 33) & 0x20) == 0
            || *(_DWORD *)(v26 + 36) != 1995)
          {
            goto LABEL_201;
          }
        }
        uint64_t v27 = *(void *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF));
        int v28 = (void *)(v27 + 24);
        if (*(_DWORD *)(v27 + 32) >= 0x41u) {
          int v28 = (void *)*v28;
        }
        if (*v28 == v22) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        goto LABEL_201;
      }
      if (v19 == 1838)
      {
        if (v233 >= (unint64_t)HIDWORD(v233)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v232[v233] = v16;
        LODWORD(v233) = v233 + 1;
        goto LABEL_202;
      }
      if (v200 && ((v19 - 1282) < 0x190 || (v19 - 2824) <= 0xB))
      {
        llvm::SampleInfo::SampleInfo((uint64_t)&v226, v19, 1);
        if (v228 == -1) {
          goto LABEL_202;
        }
        uint64_t v29 = v16[4 * v228 + -4 * (*((_DWORD *)v14 - 1) & 0x7FFFFFF)];
        if (*(unsigned char *)(*(void *)v29 + 8)) {
          goto LABEL_202;
        }
        uint64_t v30 = 0;
        uint64_t v31 = *(void **)*(v14 - 3);
        v209 = &v211;
        uint64_t v210 = 0x200000000;
        uint64_t v215 = v31;
        v216 = &v224;
        uint64_t v217 = &v225;
        uint64_t v218 = 0;
        int v219 = 0;
        __int16 v220 = 512;
        char v221 = 7;
        uint64_t v213 = 0;
        unint64_t v214 = 0;
        uint64_t v222 = 0;
        uint64_t v223 = 0;
        uint64_t v224 = &unk_1F2616E88;
        v225 = &unk_1F2617008;
        uint64_t v213 = v14[2];
        unint64_t v214 = v14;
        uint64_t v32 = (unsigned __int8 *)v14[3];
        v208 = v32;
        if (v32)
        {
          llvm::MetadataTracking::track((uint64_t)&v208, v32, 2);
          uint64_t v30 = (uint64_t)v208;
        }
        sub_1CB8461A4((uint64_t)&v209, 0, v30);
        if (v208)
        {
          int v115 = *v208;
          if ((v115 - 4) > 0x1E)
          {
            if ((v115 - 3) >= 0xFFFFFFFE) {
              BOOL v119 = v208;
            }
            else {
              BOOL v119 = 0;
            }
            if ((v115 - 3) < 0xFFFFFFFE)
            {
              if (v115 == 3) {
                *((void *)v208 + 1) = 0;
              }
              goto LABEL_50;
            }
            unint64_t v117 = (unint64_t)(v119 + 8);
          }
          else
          {
            if ((v208[1] & 0x7F) != 2 && !*((_DWORD *)v208 + 3)) {
              goto LABEL_50;
            }
            uint64_t v116 = *((void *)v208 + 2);
            if ((v116 & 4) == 0) {
              goto LABEL_50;
            }
            unint64_t v117 = v116 & 0xFFFFFFFFFFFFFFF8;
            if (!v117) {
              goto LABEL_50;
            }
          }
          v201[0] = &v208;
          sub_1CC5FA668(v117 + 16, v201);
        }
LABEL_50:
        uint64_t v33 = (uint64_t *)(*v215 + 1672);
        __int16 v202 = 257;
        unsigned int v34 = (uint64_t *)sub_1CB843944((uint64_t)&v209, v29, v33, (uint64_t)v201);
        sub_1CD871E04((uint64_t)(v14 - 3), v228, v34);
        if (v209 != &v211) {
          free(v209);
        }
LABEL_201:
        char v8 = 1;
        goto LABEL_202;
      }
      if (v19 == 295) {
        break;
      }
LABEL_202:
      BOOL v14 = v15;
      if (v15 == v13) {
        goto LABEL_253;
      }
    }
    for (uint64_t i = *(void **)(v197 + 80); i != v10; uint64_t i = (void *)i[1])
    {
      if (i) {
        int v36 = i - 3;
      }
      else {
        int v36 = 0;
      }
      uint64_t v37 = v36[5];
      if (v37) {
        uint64_t v38 = v37 - 24;
      }
      else {
        uint64_t v38 = 0;
      }
      if (*(unsigned __int8 *)(v38 + 16) - 29 >= 0xB) {
        uint64_t v38 = 0;
      }
      if (*(unsigned char *)(v38 + 16) == 29)
      {
        __int16 v39 = (void *)*v13;
        if ((void *)*v13 == v13)
        {
          __p = 0;
        }
        else
        {
          __p = (llvm::Instruction *)(v39 - 3);
          if (v39) {
            unsigned int v40 = (llvm::Instruction *)(v39 - 3);
          }
          else {
            unsigned int v40 = 0;
          }
          unsigned int v41 = *((unsigned __int8 *)v40 + 16) - 40;
          if (v41 >= 0xFFFFFFF5) {
            BOOL v42 = v40;
          }
          else {
            BOOL v42 = 0;
          }
          if (v39)
          {
            if (*((unsigned char *)v42 + 16) == 30 && v41 >= 0xFFFFFFF5)
            {
              if (*((unsigned char *)v39 - 8) != 30)
              {
                int v114 = 2;
                switch(*((unsigned char *)v39 - 8))
                {
                  case 0x1E:
                    __break(1u);
                    JUMPOUT(0x1CB8482C0);
                  case 0x1F:
                    int v114 = (*((_DWORD *)v39 - 1) >> 1) & 0x3FFFFFF;
                    goto LABEL_214;
                  case 0x20:
                  case 0x26:
                    int v114 = (*((_DWORD *)v39 - 1) & 0x7FFFFFF) - 1;
                    goto LABEL_214;
                  case 0x21:
                    goto LABEL_84;
                  case 0x24:
                    int v114 = *((_WORD *)v39 - 3) & 1;
                    goto LABEL_214;
                  case 0x25:
                    int v114 = 1;
                    goto LABEL_84;
                  case 0x27:
                    int v114 = *((_DWORD *)v39 + 14) + 1;
LABEL_214:
                    if (!v114) {
                      goto LABEL_90;
                    }
                    goto LABEL_84;
                  default:
                    goto LABEL_90;
                }
              }
              if ((*((_DWORD *)v39 - 1) & 0x7FFFFFF) == 3) {
                int v114 = 2;
              }
              else {
                int v114 = 1;
              }
LABEL_84:
              uint64_t v196 = v42;
              for (unsigned int j = 0; j != v114; ++j)
              {
                uint64_t Successor = llvm::Instruction::getSuccessor(__p, j);
                if (v230 >= (unint64_t)HIDWORD(v230)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v229[v230] = (llvm::BasicBlock *)Successor;
                LODWORD(v230) = v230 + 1;
              }
              __p = v196;
            }
          }
        }
LABEL_90:
        uint64_t v46 = 0;
        uint64_t v47 = *(void **)*v17;
        v209 = &v211;
        uint64_t v210 = 0x200000000;
        uint64_t v215 = v47;
        v216 = &v224;
        uint64_t v217 = &v225;
        uint64_t v218 = 0;
        int v219 = 0;
        __int16 v220 = 512;
        char v221 = 7;
        uint64_t v213 = 0;
        unint64_t v214 = 0;
        uint64_t v222 = 0;
        uint64_t v223 = 0;
        uint64_t v224 = &unk_1F2616E88;
        v225 = &unk_1F2617008;
        uint64_t v213 = v17[5];
        unint64_t v214 = v17 + 3;
        uint64_t v48 = (unsigned __int8 *)v17[6];
        v201[0] = v48;
        if (v48)
        {
          llvm::MetadataTracking::track((uint64_t)v201, v48, 2);
          uint64_t v46 = v201[0];
        }
        sub_1CB8461A4((uint64_t)&v209, 0, v46);
        if (v201[0])
        {
          int v111 = *(unsigned __int8 *)v201[0];
          if ((v111 - 4) > 0x1E)
          {
            if ((v111 - 3) >= 0xFFFFFFFE) {
              uint64_t v118 = v201[0];
            }
            else {
              uint64_t v118 = 0;
            }
            if ((v111 - 3) < 0xFFFFFFFE)
            {
              if (v111 == 3) {
                *(void *)(v201[0] + 8) = 0;
              }
              goto LABEL_93;
            }
            unint64_t v113 = v118 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v201[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v201[0] + 12)) {
              goto LABEL_93;
            }
            uint64_t v112 = *(void *)(v201[0] + 16);
            if ((v112 & 4) == 0) {
              goto LABEL_93;
            }
            unint64_t v113 = v112 & 0xFFFFFFFFFFFFFFF8;
            if (!v113) {
              goto LABEL_93;
            }
          }
          int v226 = v201;
          sub_1CC5FA668(v113 + 16, &v226);
        }
LABEL_93:
        uint64_t v49 = (char *)operator new(0x60uLL);
        *((_DWORD *)v49 + 13) = *((_DWORD *)v49 + 13) & 0x38000000 | 1;
        *(void *)uint64_t v49 = 0;
        *((void *)v49 + 2) = 0;
        *((void *)v49 + 1) = 0;
        *((void *)v49 + 4) = **(void **)*(i - 3) + 1576;
        *((void *)v49 + 3) = v49 + 32;
        *((void *)v49 + 5) = 0;
        v49[48] = 30;
        v49[49] = 0;
        *((_WORD *)v49 + 25) = 0;
        *((_DWORD *)v49 + 13) = 1;
        *(_OWORD *)(v49 + 56) = 0u;
        *(_OWORD *)(v49 + 72) = 0u;
        *((_DWORD *)v49 + 22) = 0;
        *(void *)uint64_t v49 = i - 3;
        uint64_t v50 = i - 2;
        uint64_t v51 = *(i - 2);
        *((void *)v49 + 1) = v51;
        if (v51) {
          *(void *)(v51 + 16) = v49 + 8;
        }
        *((void *)v49 + 2) = v50;
        void *v50 = v49;
        __int16 v227 = 257;
        sub_1CB844E0C((uint64_t *)&v209, (llvm::Instruction *)(v49 + 32), (uint64_t)&v226);
        unsigned int v53 = (char *)v204;
        uint64_t v54 = HIDWORD(v205);
        if (v204 == v203)
        {
          if (HIDWORD(v205))
          {
            unint64_t v55 = 0;
            uint64_t v56 = 8 * HIDWORD(v205);
            uint64_t v57 = (llvm::Instruction **)v204;
            while (*v57 != __p)
            {
              if (*v57 == (llvm::Instruction *)-2) {
                unint64_t v55 = v57;
              }
              ++v57;
              v56 -= 8;
              if (!v56)
              {
                if (!v55) {
                  goto LABEL_103;
                }
                *unint64_t v55 = __p;
                --v206;
                goto LABEL_127;
              }
            }
            goto LABEL_127;
          }
LABEL_103:
          uint64_t v52 = (llvm::Type *)v205;
          if (HIDWORD(v205) < v205)
          {
            ++HIDWORD(v205);
            v204[v54] = (unint64_t)__p;
LABEL_127:
            if ((void *)i[2] != i + 2)
            {
              for (uint64_t k = i[3]; ; uint64_t k = *(void *)(v68 + 32))
              {
                uint64_t v68 = k - 24;
                uint64_t v69 = k ? k - 24 : 0;
                if (!k || *(unsigned char *)(v69 + 16) != 83) {
                  break;
                }
                uint64_t v70 = llvm::UndefValue::get(*(llvm::UndefValue **)v68, v52);
                uint64_t v71 = v17[5];
                int v72 = *(_DWORD *)(v68 + 20);
                uint64_t v73 = v72 & 0x7FFFFFF;
                if ((v72 & 0x7FFFFFF) == *(_DWORD *)(v68 + 60))
                {
                  unsigned int v86 = v73 + (v73 >> 1);
                  if (v86 <= 2) {
                    uint64_t v87 = 2;
                  }
                  else {
                    uint64_t v87 = v86;
                  }
                  *(_DWORD *)(v68 + 60) = v87;
                  if ((v72 & 0x40000000) != 0) {
                    uint64_t v88 = *(uint64_t **)(v68 - 8);
                  }
                  else {
                    uint64_t v88 = (uint64_t *)(v68 - 32 * v73);
                  }
                  __pa = v88;
                  uint64_t v89 = operator new(40 * v87);
                  *(void *)(v68 - 8) = v89;
                  v90 = v89;
                  do
                  {
                    void *v90 = 0;
                    v90[1] = 0;
                    v90[2] = 0;
                    v90[3] = v68;
                    v90 += 4;
                  }
                  while (v90 != &v89[4 * v87]);
                  int v91 = *(_DWORD *)(v68 + 20);
                  if ((v91 & 0x40000000) != 0) {
                    uint64_t v92 = (uint64_t)v89;
                  }
                  else {
                    uint64_t v92 = v68 - 32 * (v91 & 0x7FFFFFF);
                  }
                  uint64_t v195 = v92;
                  sub_1CC5E4108((uint64_t)&v226, __pa, &__pa[4 * v73], v92);
                  if (v73)
                  {
                    memmove((void *)(v195 + 32 * v87), &__pa[4 * v73], 8 * v73);
                    uint64_t v93 = 4 * v73;
                    do
                    {
                      unsigned int v94 = &__pa[v93];
                      if (__pa[v93 - 4])
                      {
                        *(void *)*(v94 - 2) = *(v94 - 3);
                        uint64_t v95 = *(v94 - 3);
                        if (v95) {
                          *(void *)(v95 + 16) = *(v94 - 2);
                        }
                      }
                      v93 -= 4;
                    }
                    while (v93 * 8);
                  }
                  operator delete(__pa);
                  int v72 = *(_DWORD *)(v68 + 20);
                }
                uint64_t v74 = (v72 + 1) & 0x7FFFFFF;
                *(_DWORD *)(v68 + 20) = v72 & 0xF8000000 | (v72 + 1) & 0x7FFFFFF;
                if ((v72 & 0x40000000) != 0) {
                  uint64_t v75 = *(void *)(v68 - 8);
                }
                else {
                  uint64_t v75 = v68 - 32 * v74;
                }
                uint64_t v76 = (v74 - 1);
                uint64_t v77 = v75 + 32 * v76;
                if (*(void *)v77)
                {
                  **(void **)(v77 + 16) = *(void *)(v77 + 8);
                  uint64_t v85 = *(void *)(v77 + 8);
                  if (v85) {
                    *(void *)(v85 + 16) = *(void *)(v77 + 16);
                  }
                }
                *(void *)uint64_t v77 = v70;
                if (v70)
                {
                  uint64_t v80 = *((void *)v70 + 1);
                  int v79 = (void *)((char *)v70 + 8);
                  uint64_t v78 = v80;
                  uint64_t v81 = v75 + 32 * v76;
                  *(void *)(v81 + 8) = v80;
                  if (v80) {
                    *(void *)(v78 + 16) = v81 + 8;
                  }
                  *(void *)(v81 + 16) = v79;
                  *int v79 = v77;
                }
                int v82 = *(_DWORD *)(v68 + 20);
                uint64_t v83 = v82 & 0x7FFFFFF;
                if ((v82 & 0x40000000) != 0) {
                  uint64_t v84 = *(void *)(v68 - 8);
                }
                else {
                  uint64_t v84 = v68 - 32 * v83;
                }
                *(void *)(v84 + 32 * *(unsigned int *)(v68 + 60) + 8 * (v83 - 1)) = v71;
              }
            }
            if (v209 != &v211) {
              free(v209);
            }
            break;
          }
        }
        else
        {
          uint64_t v52 = (llvm::Type *)v205;
        }
        if (3 * (int)v52 <= (4 * (HIDWORD(v205) - v206)))
        {
          if (v52 >= 0x40) {
            LODWORD(v52) = 2 * v52;
          }
          else {
            LODWORD(v52) = 128;
          }
        }
        else if ((int)v52 - HIDWORD(v205) >= v52 >> 3)
        {
          goto LABEL_108;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v203, v52);
        uint64_t v52 = (llvm::Type *)v205;
        unsigned int v53 = (char *)v204;
LABEL_108:
        int v58 = v52 - 1;
        unsigned int v59 = (v52 - 1) & ((__p >> 4) ^ (__p >> 9));
        uint64_t v60 = &v53[8 * v59];
        uint64_t v61 = *(llvm::Instruction **)v60;
        if (*(void *)v60 == -1)
        {
          v62 = 0;
LABEL_120:
          if (v62) {
            v66 = v62;
          }
          else {
            v66 = (llvm::Instruction **)v60;
          }
          if (*v66 != __p)
          {
            if (*v66 == (llvm::Instruction *)-2) {
              --v206;
            }
            else {
              ++HIDWORD(v205);
            }
            llvm::Instruction *v66 = __p;
          }
        }
        else
        {
          v62 = 0;
          int v63 = 1;
          while (v61 != __p)
          {
            if (v62) {
              BOOL v64 = 0;
            }
            else {
              BOOL v64 = v61 == (llvm::Instruction *)-2;
            }
            if (v64) {
              v62 = (llvm::Instruction **)v60;
            }
            unsigned int v65 = v59 + v63++;
            unsigned int v59 = v65 & v58;
            uint64_t v60 = &v53[8 * (v65 & v58)];
            uint64_t v61 = *(llvm::Instruction **)v60;
            if (*(void *)v60 == -1) {
              goto LABEL_120;
            }
          }
        }
        goto LABEL_127;
      }
    }
    v96 = (char *)v204;
    uint64_t v97 = HIDWORD(v205);
    if (v204 == v203)
    {
      if (HIDWORD(v205))
      {
        BOOL v98 = 0;
        uint64_t v99 = 8 * HIDWORD(v205);
        uint64_t v100 = v204;
        while ((void *)*v100 != v17)
        {
          if (*v100 == -2) {
            BOOL v98 = v100;
          }
          ++v100;
          v99 -= 8;
          if (!v99)
          {
            if (!v98) {
              goto LABEL_177;
            }
            unint64_t *v98 = (unint64_t)v17;
            --v206;
            goto LABEL_201;
          }
        }
        goto LABEL_201;
      }
LABEL_177:
      unsigned int v101 = v205;
      if (HIDWORD(v205) < v205)
      {
        ++HIDWORD(v205);
        v204[v97] = (unint64_t)v17;
        goto LABEL_201;
      }
    }
    else
    {
      unsigned int v101 = v205;
    }
    if (3 * v101 <= 4 * (HIDWORD(v205) - v206))
    {
      if (v101 >= 0x40) {
        v101 *= 2;
      }
      else {
        unsigned int v101 = 128;
      }
    }
    else if (v101 - HIDWORD(v205) >= v101 >> 3)
    {
      goto LABEL_182;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v203, v101);
    unsigned int v101 = v205;
    v96 = (char *)v204;
LABEL_182:
    unsigned int v102 = v101 - 1;
    unsigned int v103 = (v101 - 1) & ((v17 >> 4) ^ (v17 >> 9));
    int v104 = &v96[8 * v103];
    uint64_t v105 = *(void **)v104;
    if (*(void *)v104 == -1)
    {
      unsigned int v106 = 0;
LABEL_194:
      if (v106) {
        int v110 = v106;
      }
      else {
        int v110 = v104;
      }
      if (*(void **)v110 != v17)
      {
        if (*(void *)v110 == -2) {
          --v206;
        }
        else {
          ++HIDWORD(v205);
        }
        *(void *)int v110 = v17;
      }
    }
    else
    {
      unsigned int v106 = 0;
      int v107 = 1;
      while (v105 != v17)
      {
        if (v106) {
          BOOL v108 = 0;
        }
        else {
          BOOL v108 = v105 == (void *)-2;
        }
        if (v108) {
          unsigned int v106 = v104;
        }
        unsigned int v109 = v103 + v107++;
        unsigned int v103 = v109 & v102;
        int v104 = &v96[8 * (v109 & v102)];
        uint64_t v105 = *(void **)v104;
        if (*(void *)v104 == -1) {
          goto LABEL_194;
        }
      }
    }
    goto LABEL_201;
  }
  unsigned int v121 = 0;
  unsigned int v122 = 8;
  unsigned int v120 = (unint64_t *)v207;
LABEL_256:
  if (v120 == v9) {
    uint64_t v123 = v121;
  }
  else {
    uint64_t v123 = v122;
  }
  int v124 = v120;
  if (v123)
  {
    uint64_t v125 = 0;
    while (v120[v125] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v123 == ++v125) {
        goto LABEL_281;
      }
    }
    int v124 = &v120[v125];
  }
  v126 = &v120[v123];
  if (v124 != v126)
  {
    unint64_t v127 = *v124;
LABEL_267:
    int v128 = *(_DWORD *)(v127 + 20);
    if ((v128 & 0x40000000) != 0)
    {
      unint64_t v130 = *(void *)(v127 - 8);
      uint64_t v129 = v128 & 0x7FFFFFF;
      if (!v129) {
        goto LABEL_274;
      }
    }
    else
    {
      uint64_t v129 = v128 & 0x7FFFFFF;
      unint64_t v130 = v127 - 32 * v129;
      if (!v129) {
        goto LABEL_274;
      }
    }
    uint64_t v131 = 32 * v129;
    unsigned int v132 = (void **)(v130 + 16);
    do
    {
      if (*(v132 - 2))
      {
        **unsigned int v132 = *(v132 - 1);
        uint64_t v133 = (uint64_t)*(v132 - 1);
        if (v133) {
          *(void *)(v133 + 16) = *v132;
        }
      }
      *(v132 - 2) = 0;
      v132 += 4;
      v131 -= 32;
    }
    while (v131);
LABEL_274:
    uint64_t v134 = v124 + 1;
    while (v134 != v126)
    {
      unint64_t v135 = *v134++;
      unint64_t v127 = v135;
      if (v135 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v124 = v134 - 1;
        goto LABEL_267;
      }
    }
    unsigned int v9 = v203;
    unsigned int v120 = v204;
    unsigned int v122 = v205;
    unsigned int v121 = HIDWORD(v205);
  }
LABEL_281:
  if (v120 == v9) {
    uint64_t v136 = v121;
  }
  else {
    uint64_t v136 = v122;
  }
  v137 = v120;
  if (v136)
  {
    uint64_t v138 = 8 * v136;
    v137 = v120;
    while (*v137 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v137;
      v138 -= 8;
      if (!v138) {
        goto LABEL_291;
      }
    }
  }
  if (v137 != &v120[v136]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_291:
  unsigned int v139 = v230;
  v140 = v229;
  if (v230 >= 2)
  {
    qsort(v229, v230, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CB848318);
    unsigned int v139 = v230;
    v140 = v229;
  }
  uint64_t v141 = &v140[v139];
  int v142 = v140;
  if (v139)
  {
    int v142 = v140 - 1;
    uint64_t v143 = 8 * v139 - 8;
    while (v143)
    {
      int v144 = v142[1];
      uint64_t v145 = v142[2];
      ++v142;
      v143 -= 8;
      if (v144 == v145) {
        goto LABEL_297;
      }
    }
  }
  else
  {
LABEL_297:
    if (v142 != v141)
    {
      uint64_t v146 = v142 + 2;
      if (v142 + 2 != v141)
      {
        uint64_t v147 = *v142;
        do
        {
          uint64_t v148 = v147;
          uint64_t v147 = *v146;
          if (v148 != *v146)
          {
            v142[1] = v147;
            ++v142;
          }
          ++v146;
        }
        while (v146 != v141);
      }
      uint64_t v141 = v142 + 1;
    }
  }
  unint64_t v149 = (char *)v141 - (char *)v140;
  unint64_t v150 = (unint64_t)((char *)v141 - (char *)v140) >> 3;
  LODWORD(v230) = v150;
  if ((v149 >> 3))
  {
    uint64_t v151 = &v140[v150];
    do
    {
      uint64_t v152 = *((void *)*v140 + 1);
      if (v152)
      {
        while (1)
        {
          uint64_t v153 = *(void *)(v152 + 24);
          unsigned int v154 = *(unsigned __int8 *)(v153 + 16);
          BOOL v155 = v153 && v154 >= 0x1C;
          if (v155 && v154 - 29 < 0xB) {
            break;
          }
          uint64_t v152 = *(void *)(v152 + 8);
          if (!v152) {
            goto LABEL_316;
          }
        }
      }
      else
      {
LABEL_316:
        llvm::BasicBlock::eraseFromParent(*v140);
      }
      ++v140;
    }
    while (v140 != v151);
  }
  LODWORD(v230) = 0;
  if (v233)
  {
    uint64_t v157 = v232[v233 - 1];
    LODWORD(v233) = v233 - 1;
    int v158 = *(unsigned __int8 *)(v157 + 16);
    if (v158 == 84)
    {
      uint64_t v159 = 0;
    }
    else if (v158 == 39)
    {
      uint64_t v159 = (*(_DWORD *)(v157 + 80) + 1);
    }
    else
    {
      uint64_t v159 = 2;
    }
    int v160 = *(_DWORD *)(v157 + 20);
    if (v160 < 0
      && (uint64_t v192 = v157 - 32 * (v160 & 0x7FFFFFF), v193 = *(void *)(v192 - 8), (v193 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v162 = -(uint64_t)(v160 & 0x7FFFFFF);
      int v161 = *(_DWORD *)(v192 - 12) - *(_DWORD *)(v192 - v193);
    }
    else
    {
      int v161 = 0;
      uint64_t v162 = -(uint64_t)(v160 & 0x7FFFFFF);
    }
    uint64_t v163 = *(void *)(v157 + 40);
    uint64_t v164 = *(void *)(v163 + 56);
    uint64_t v165 = *(void *)(v157
                     + 32 * v162
                     + 32
                     * (((-32 * v159 + 32 * (unint64_t)-v161 - 32 * v162 - 32) >> 5)
                      - 1));
    if (*(unsigned char *)(v165 + 16) == 16)
    {
      uint64_t v166 = (void *)(v165 + 24);
      if (*(_DWORD *)(v165 + 32) >= 0x41u) {
        uint64_t v166 = (void *)*v166;
      }
      if (*v166) {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
    }
    uint64_t v167 = v164 + 72;
    for (uint64_t m = *(void *)(v164 + 80); m != v167; uint64_t m = *(void *)(m + 8))
    {
      uint64_t v169 = m - 24;
      if (m) {
        uint64_t v170 = m - 24;
      }
      else {
        uint64_t v170 = 0;
      }
      uint64_t v171 = *(void *)(v170 + 40);
      if (v171) {
        uint64_t v172 = v171 - 24;
      }
      else {
        uint64_t v172 = 0;
      }
      if (*(unsigned __int8 *)(v172 + 16) - 29 >= 0xB) {
        uint64_t v172 = 0;
      }
      if (*(unsigned char *)(v172 + 16) == 29) {
        goto LABEL_341;
      }
    }
    uint64_t v169 = 0;
LABEL_341:
    uint64_t v173 = *(void *)(v169 + 40);
    if (v173 == v169 + 40)
    {
      uint64_t v174 = 0;
    }
    else
    {
      if (v173) {
        uint64_t v174 = v173 - 24;
      }
      else {
        uint64_t v174 = 0;
      }
      if (*(unsigned __int8 *)(v174 + 16) - 29 >= 0xB) {
        uint64_t v174 = 0;
      }
    }
    for (uint64_t n = *(void *)(v169 + 48); n != v169 + 40; uint64_t n = *(void *)(n + 8))
    {
      uint64_t v176 = n - 24;
      if (n) {
        uint64_t v177 = n - 24;
      }
      else {
        uint64_t v177 = 0;
      }
      if (*(unsigned char *)(v177 + 16) != 83) {
        goto LABEL_357;
      }
    }
    uint64_t v176 = 0;
LABEL_357:
    if (v176 != v174)
    {
      if (v174) {
        uint64_t v178 = v174 + 24;
      }
      else {
        uint64_t v178 = 0;
      }
      v209 = "early.exit";
      LOWORD(v212) = 259;
      llvm::BasicBlock::splitBasicBlock(v169, v178, (uint64_t)&v209, 0);
    }
    uint64_t v179 = *(void *)(v163 + 8);
    if (v179)
    {
      while (1)
      {
        uint64_t v180 = *(void *)(v179 + 24);
        unsigned int v181 = *(unsigned __int8 *)(v180 + 16);
        BOOL v182 = v180 && v181 >= 0x1C;
        if (v182 && v181 - 29 <= 0xA) {
          break;
        }
        uint64_t v179 = *(void *)(v179 + 8);
        if (!v179) {
          goto LABEL_388;
        }
      }
      int v184 = 0;
LABEL_373:
      ++v184;
      while (1)
      {
        uint64_t v179 = *(void *)(v179 + 8);
        if (!v179) {
          break;
        }
        uint64_t v185 = *(void *)(v179 + 24);
        unsigned int v186 = *(unsigned __int8 *)(v185 + 16);
        if (v185) {
          BOOL v187 = v186 >= 0x1C;
        }
        else {
          BOOL v187 = 0;
        }
        if (v187 && v186 - 29 < 0xB) {
          goto LABEL_373;
        }
      }
      if ((v184 & 0xFFFFFFFE) != 0)
      {
        if (v157) {
          uint64_t v189 = v157 + 24;
        }
        else {
          uint64_t v189 = 0;
        }
        v209 = "early.exit.br";
        LOWORD(v212) = 259;
        llvm::BasicBlock::splitBasicBlock(v163, v189, (uint64_t)&v209, 0);
      }
    }
LABEL_388:
    if (v157) {
      uint64_t v190 = v157 + 24;
    }
    else {
      uint64_t v190 = 0;
    }
    uint64_t v191 = *(void *)(v190 + 8);
    v209 = "skip.early.exit";
    LOWORD(v212) = 259;
    llvm::BasicBlock::splitBasicBlock(v163, v191, (uint64_t)&v209, 0);
  }
  if (v229 != (llvm::BasicBlock **)v231) {
    free(v229);
  }
  if (v204 != v203) {
    free(v204);
  }
  if (v232 != v234) {
    free(v232);
  }
  return v8 & 1;
}

uint64_t sub_1CB848318(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

void sub_1CB848334()
{
}

uint64_t sub_1CB848390(uint64_t a1)
{
  return (**(uint64_t (***)(void))a1)(**(void **)(*(void *)a1 + 8));
}

double sub_1CB8483A0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F260E110;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  return result;
}

void sub_1CB848414(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  unint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB8484C8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  unint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB848574()
{
  return "AGX1 Common Store backfiller pass";
}

uint64_t sub_1CB848584(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (void **)(a1 + 32);
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 152))(&__src);
  uint64_t v3 = __src;
  if (v2 != &__src)
  {
    if (__src == v26)
    {
      int v4 = v25;
      uint64_t v5 = *(unsigned int *)(a1 + 40);
      if (v5 < v25)
      {
        if (*(_DWORD *)(a1 + 44) < v25)
        {
          *(_DWORD *)(a1 + 40) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v5)
        {
          uint64_t v21 = *(unsigned int *)(a1 + 40);
          memmove(*v2, __src, 8 * v5);
          uint64_t v15 = v21;
        }
        else
        {
          uint64_t v15 = 0;
        }
        if (v15 != v25) {
          memcpy((char *)*v2 + 8 * v15, (char *)__src + 8 * v15, 8 * v25 - 8 * v15);
        }
      }
      else if (v25)
      {
        memmove(*v2, __src, 8 * v25);
      }
      *(_DWORD *)(a1 + 40) = v4;
    }
    else
    {
      uint64_t v18 = *(void **)(a1 + 32);
      if (v18 != (void *)(a1 + 48))
      {
        free(v18);
        uint64_t v3 = __src;
      }
      *(void *)(a1 + 32) = v3;
      *(void *)(a1 + 40) = v25;
      __src = v26;
      HIDWORD(v25) = 0;
    }
    LODWORD(v25) = 0;
    uint64_t v3 = __src;
  }
  *(_DWORD *)(a1 + 96) = v27;
  if (v3 != v26) {
    free(v3);
  }
  uint64_t v6 = (void **)(a1 + 104);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&__src, a1);
  uint64_t v7 = __src;
  if ((void **)(a1 + 104) != &__src)
  {
    if (__src == v26)
    {
      int v8 = v25;
      uint64_t v9 = *(unsigned int *)(a1 + 112);
      if (v9 < v25)
      {
        if (*(_DWORD *)(a1 + 116) < v25)
        {
          *(_DWORD *)(a1 + 112) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v9)
        {
          uint64_t v22 = *(unsigned int *)(a1 + 112);
          memmove(*v6, __src, 8 * v9);
          uint64_t v16 = v22;
        }
        else
        {
          uint64_t v16 = 0;
        }
        if (v16 != v25) {
          memcpy((char *)*v6 + 8 * v16, (char *)__src + 8 * v16, 8 * v25 - 8 * v16);
        }
      }
      else if (v25)
      {
        memmove(*v6, __src, 8 * v25);
      }
      *(_DWORD *)(a1 + 112) = v8;
    }
    else
    {
      int v19 = *(void **)(a1 + 104);
      if (v19 != (void *)(a1 + 120))
      {
        free(v19);
        uint64_t v7 = __src;
      }
      *(void *)(a1 + 104) = v7;
      *(void *)(a1 + 112) = v25;
      __src = v26;
      HIDWORD(v25) = 0;
    }
    LODWORD(v25) = 0;
    uint64_t v7 = __src;
  }
  *(_DWORD *)(a1 + 168) = v27;
  if (v7 != v26) {
    free(v7);
  }
  uint64_t v10 = (void **)(a1 + 176);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 168))(&__src, a1);
  uint64_t v11 = __src;
  if ((void **)(a1 + 176) != &__src)
  {
    if (__src == v26)
    {
      int v12 = v25;
      uint64_t v13 = *(unsigned int *)(a1 + 184);
      if (v13 < v25)
      {
        if (*(_DWORD *)(a1 + 188) < v25)
        {
          *(_DWORD *)(a1 + 184) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v13)
        {
          uint64_t v23 = *(unsigned int *)(a1 + 184);
          memmove(*v10, __src, 8 * v13);
          uint64_t v17 = v23;
        }
        else
        {
          uint64_t v17 = 0;
        }
        if (v17 != v25) {
          memcpy((char *)*v10 + 8 * v17, (char *)__src + 8 * v17, 8 * v25 - 8 * v17);
        }
      }
      else if (v25)
      {
        memmove(*v10, __src, 8 * v25);
      }
      *(_DWORD *)(a1 + 184) = v12;
    }
    else
    {
      int v20 = *(void **)(a1 + 176);
      if (v20 != (void *)(a1 + 192))
      {
        free(v20);
        uint64_t v11 = __src;
      }
      *(void *)(a1 + 176) = v11;
      *(void *)(a1 + 184) = v25;
      __src = v26;
      HIDWORD(v25) = 0;
    }
    LODWORD(v25) = 0;
    uint64_t v11 = __src;
  }
  *(_DWORD *)(a1 + 240) = v27;
  if (v11 != v26) {
    free(v11);
  }
  return 0;
}

uint64_t sub_1CB8489A0(uint64_t a1, uint64_t a2)
{
  v264[4] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(a1 + 264) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 328);
  uint64_t v231 = a2 + 320;
  if (v4 != a2 + 320)
  {
    while (1)
    {
      int v262 = v264;
      uint64_t v263 = 0x400000000;
      uint64_t v245 = 0;
      int32x2_t v246 = 0;
      unsigned int v247 = 0;
      uint64_t v259 = v261;
      uint64_t v260 = 0x2000000000;
      uint64_t v5 = v4 + 48;
      uint64_t v232 = v4;
      uint64_t v6 = *(void *)(v4 + 56);
      uint64_t v235 = v4 + 48;
      if (v6 != v4 + 48) {
        break;
      }
LABEL_394:
      for (unsigned int i = v263; v263; unsigned int i = v263)
      {
        uint64_t v203 = (llvm::MachineInstr *)v262[i - 1];
        LODWORD(v263) = i - 1;
        if (**((_WORD **)v203 + 2) == 18)
        {
          uint64_t v204 = *(void *)(a1 + 264);
          uint64_t v205 = *((void *)v203 + 4);
          uint64_t v206 = *(unsigned int *)(v205 + 36);
          if ((v206 & 0x80000000) != 0) {
            uint64_t v207 = (uint64_t *)(*(void *)(v204 + 24) + 16 * (v206 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v207 = (uint64_t *)(*(void *)(v204 + 272) + 8 * v206);
          }
          uint64_t v208 = *v207;
          if (v208
            && ((*(unsigned char *)(v208 + 3) & 1) != 0
             || (uint64_t v228 = *(void *)(v208 + 24)) != 0 && (*(unsigned char *)(v228 + 3) & 1) != 0))
          {
            if ((v206 & 0x80000000) != 0) {
              uint64_t v222 = (uint64_t *)(*(void *)(v204 + 24) + 16 * (v206 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v222 = (uint64_t *)(*(void *)(v204 + 272) + 8 * v206);
            }
            uint64_t v223 = *v222;
            if (v223)
            {
              if ((*(unsigned char *)(v223 + 3) & 1) == 0)
              {
                uint64_t v223 = *(void *)(v223 + 24);
                if (v223)
                {
                  if ((*(unsigned char *)(v223 + 3) & 1) == 0) {
                    uint64_t v223 = 0;
                  }
                }
              }
            }
            uint64_t v224 = *(llvm::MachineInstr **)(v223 + 8);
            while (1)
            {
              uint64_t v223 = *(void *)(v223 + 24);
              if (!v223 || (*(unsigned char *)(v223 + 3) & 1) == 0) {
                break;
              }
              v209 = 0;
              if (*(llvm::MachineInstr **)(v223 + 8) != v224) {
                goto LABEL_401;
              }
            }
            v209 = v224;
          }
          else
          {
            v209 = 0;
          }
LABEL_401:
          uint64_t v210 = *(unsigned int *)(v205 + 100);
          if ((v210 & 0x80000000) != 0) {
            uint64_t v211 = (uint64_t *)(*(void *)(v204 + 24) + 16 * (v210 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v211 = (uint64_t *)(*(void *)(v204 + 272) + 8 * v210);
          }
          uint64_t v212 = *v211;
          if (v212
            && ((*(unsigned char *)(v212 + 3) & 1) != 0
             || (uint64_t v229 = *(void *)(v212 + 24)) != 0 && (*(unsigned char *)(v229 + 3) & 1) != 0))
          {
            if ((v210 & 0x80000000) != 0) {
              v225 = (uint64_t *)(*(void *)(v204 + 24) + 16 * (v210 & 0x7FFFFFFF) + 8);
            }
            else {
              v225 = (uint64_t *)(*(void *)(v204 + 272) + 8 * v210);
            }
            uint64_t v226 = *v225;
            if (v226)
            {
              if ((*(unsigned char *)(v226 + 3) & 1) == 0)
              {
                uint64_t v226 = *(void *)(v226 + 24);
                if (v226)
                {
                  if ((*(unsigned char *)(v226 + 3) & 1) == 0) {
                    uint64_t v226 = 0;
                  }
                }
              }
            }
            __int16 v227 = *(llvm::MachineInstr **)(v226 + 8);
            while (1)
            {
              uint64_t v226 = *(void *)(v226 + 24);
              if (!v226 || (*(unsigned char *)(v226 + 3) & 1) == 0) {
                break;
              }
              uint64_t v213 = 0;
              if (*(llvm::MachineInstr **)(v226 + 8) != v227) {
                goto LABEL_406;
              }
            }
            uint64_t v213 = v227;
          }
          else
          {
            uint64_t v213 = 0;
          }
LABEL_406:
          llvm::MachineInstr::eraseFromParent(v203);
          if (v209)
          {
            uint64_t v214 = *(void *)(a1 + 264);
            uint64_t v215 = *(unsigned int *)(*((void *)v209 + 4) + 4);
            if ((v215 & 0x80000000) != 0) {
              v216 = (uint64_t *)(*(void *)(v214 + 24) + 16 * (v215 & 0x7FFFFFFF) + 8);
            }
            else {
              v216 = (uint64_t *)(*(void *)(v214 + 272) + 8 * v215);
            }
            uint64_t v217 = *v216;
            if (v217)
            {
              while ((*(unsigned char *)(v217 + 3) & 1) != 0)
              {
                uint64_t v217 = *(void *)(v217 + 24);
                if (!v217) {
                  goto LABEL_412;
                }
              }
            }
            else
            {
LABEL_412:
              llvm::MachineInstr::eraseFromParent(v209);
            }
          }
          if (v209 == v213) {
            continue;
          }
          uint64_t v218 = *(void *)(a1 + 264);
          uint64_t v219 = *(unsigned int *)(*((void *)v213 + 4) + 4);
          if ((v219 & 0x80000000) != 0) {
            __int16 v220 = (uint64_t *)(*(void *)(v218 + 24) + 16 * (v219 & 0x7FFFFFFF) + 8);
          }
          else {
            __int16 v220 = (uint64_t *)(*(void *)(v218 + 272) + 8 * v219);
          }
          uint64_t v221 = *v220;
          if (v221)
          {
            while ((*(unsigned char *)(v221 + 3) & 1) != 0)
            {
              uint64_t v221 = *(void *)(v221 + 24);
              if (!v221) {
                goto LABEL_419;
              }
            }
            continue;
          }
LABEL_419:
          uint64_t v203 = v213;
        }
        llvm::MachineInstr::eraseFromParent(v203);
      }
      if (v259 != v261) {
        free(v259);
      }
      MEMORY[0x1D25D9CD0](v245, 4);
      if (v262 != v264) {
        free(v262);
      }
      uint64_t v4 = *(void *)(v232 + 8);
      if (v4 == v231) {
        return 0;
      }
    }
    while (1)
    {
      uint64_t v7 = *(unsigned __int16 **)(v6 + 16);
      int v8 = *v7;
      if ((v8 - 1) > 1 || (*(unsigned char *)(*(void *)(v6 + 32) + 48) & 8) == 0)
      {
        unsigned int v9 = *(unsigned __int16 *)(v6 + 44);
        BOOL v27 = (v9 & 0xC) == 0;
        int v10 = (v9 >> 2) & 1;
        char v11 = v27 ? 1 : v10;
        uint64_t v12 = *((void *)v7 + 1);
        if (v11)
        {
          if ((v12 & 0x80000) != 0) {
            goto LABEL_238;
          }
        }
        else
        {
          uint64_t v115 = v6;
          if ((v12 & 0x80000) != 0) {
            goto LABEL_238;
          }
          while ((*(_WORD *)(v115 + 44) & 8) != 0)
          {
            uint64_t v115 = *(void *)(v115 + 8);
            if ((*(unsigned char *)(*(void *)(v115 + 16) + 10) & 8) != 0) {
              goto LABEL_238;
            }
          }
        }
        if ((v8 - 1) > 1 || (*(unsigned char *)(*(void *)(v6 + 32) + 48) & 0x10) == 0) {
          break;
        }
      }
LABEL_238:
      if (*v7 <= 0x2E06u)
      {
        if (*v7 <= 0x9C6u)
        {
          if ((v8 - 404) > 0x3B || ((1 << (v8 + 108)) & 0xCC3300330033033) == 0)
          {
            unsigned int v116 = v8 - 753;
            if (v116 > 0x3B) {
              goto LABEL_275;
            }
            uint64_t v117 = 1 << v116;
            uint64_t v118 = 0xCC3300330033033;
            goto LABEL_252;
          }
          goto LABEL_265;
        }
        if (*v7 <= 0x2D55u)
        {
          if ((v8 - 2503) > 0x26 || ((1 << (v8 + 57)) & 0x5555000005) == 0)
          {
            int v123 = -11588;
LABEL_270:
            if ((v8 + v123) >= 4) {
              goto LABEL_275;
            }
          }
        }
        else if ((v8 - 11705) > 0x19 || ((1 << (v8 + 71)) & 0x3C0780F) == 0)
        {
          int v119 = -11606;
          goto LABEL_258;
        }
        goto LABEL_271;
      }
      if (*v7 > 0x2E87u)
      {
        if (*v7 <= 0x33AEu)
        {
          if ((v8 - 11912) > 0x2B || ((1 << (v8 + 120)) & 0xF0CC0033003) == 0)
          {
            int v123 = -13213;
            goto LABEL_270;
          }
          goto LABEL_265;
        }
        if ((v8 - 13330) > 0x19 || ((1 << (v8 - 18)) & 0x3C0780F) == 0)
        {
          int v119 = -13231;
LABEL_258:
          unsigned int v121 = v8 + v119;
          if (v121 > 0x31 || ((1 << v121) & 0x3C0000000000FLL) == 0) {
            goto LABEL_275;
          }
        }
LABEL_271:
        unsigned int v122 = *(_DWORD *)(*(void *)(v6 + 32) + 36);
        LOBYTE(v254) = 0;
        LOBYTE(__n) = 0;
        sub_1CB84A414((uint64_t)&v254, v122, *(void *)(a1 + 264));
        goto LABEL_272;
      }
      if ((v8 - 11783) > 0x3F || ((1 << (v8 - 7)) & 0xC003300330033033) == 0)
      {
        unsigned int v120 = v8 - 11849;
        if (v120 > 0x3C) {
          goto LABEL_275;
        }
        uint64_t v117 = 1 << v120;
        uint64_t v118 = 0x1801981983C00003;
LABEL_252:
        if ((v117 & v118) == 0) {
          goto LABEL_275;
        }
      }
LABEL_265:
      unsigned int v122 = *(_DWORD *)(*(void *)(v6 + 32) + 36);
      LOBYTE(v254) = 0;
      LOBYTE(__n) = 0;
      sub_1CB84AAE4((uint64_t)&v254, v122, *(void *)(a1 + 264), 1003, 2);
LABEL_272:
      if ((_BYTE)__n && (**(_DWORD **)(v6 + 32) & 0xFFF00) == 0)
      {
        sub_1CB84A5E4(v6, &v254, 1u);
        uint64_t v124 = *(void *)(a1 + 264);
        if ((v122 & 0x80000000) != 0) {
          uint64_t v125 = (uint64_t *)(*(void *)(v124 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v125 = (uint64_t *)(*(void *)(v124 + 272) + 8 * v122);
        }
        uint64_t v126 = *v125;
        if (v126)
        {
          while ((*(unsigned char *)(v126 + 3) & 1) != 0)
          {
            uint64_t v126 = *(void *)(v126 + 24);
            if (!v126) {
              goto LABEL_286;
            }
          }
        }
        else
        {
LABEL_286:
          if ((v122 & 0x80000000) != 0) {
            unint64_t v127 = (uint64_t *)(*(void *)(v124 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v127 = (uint64_t *)(*(void *)(v124 + 272) + 8 * v122);
          }
          uint64_t v128 = *v127;
          if (v128
            && ((*(unsigned char *)(v128 + 3) & 1) != 0
             || (uint64_t v133 = *(void *)(v128 + 24)) != 0 && (*(unsigned char *)(v133 + 3) & 1) != 0))
          {
            if ((v122 & 0x80000000) != 0) {
              unint64_t v130 = (uint64_t *)(*(void *)(v124 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8);
            }
            else {
              unint64_t v130 = (uint64_t *)(*(void *)(v124 + 272) + 8 * v122);
            }
            uint64_t v131 = *v130;
            if (v131 && (*(unsigned char *)(v131 + 3) & 1) == 0)
            {
              uint64_t v131 = *(void *)(v131 + 24);
              if (v131 && (*(unsigned char *)(v131 + 3) & 1) == 0) {
                uint64_t v131 = 0;
              }
              uint64_t v5 = v235;
            }
            uint64_t v132 = *(void *)(v131 + 8);
            while (1)
            {
              uint64_t v131 = *(void *)(v131 + 24);
              if (!v131 || (*(unsigned char *)(v131 + 3) & 1) == 0) {
                break;
              }
              uint64_t v129 = 0;
              if (*(void *)(v131 + 8) != v132) {
                goto LABEL_291;
              }
            }
            uint64_t v129 = v132;
          }
          else
          {
            uint64_t v129 = 0;
          }
LABEL_291:
          if (v263 >= (unint64_t)HIDWORD(v263)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v262[v263] = v129;
          LODWORD(v263) = v263 + 1;
        }
      }
LABEL_274:
      if (!v6) {
        goto LABEL_278;
      }
LABEL_275:
      if ((*(unsigned char *)v6 & 4) == 0)
      {
LABEL_278:
        while ((*(_WORD *)(v6 + 44) & 8) != 0)
          uint64_t v6 = *(void *)(v6 + 8);
      }
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == v5)
      {
        if (v260)
        {
          unint64_t v135 = (uint64_t **)v259;
          uint64_t v233 = &v259[8 * v260];
          while (1)
          {
            uint64_t v234 = v135;
            uint64_t v136 = *v135;
            uint64_t v137 = (*v135)[2];
            *(void *)&long long v254 = 1;
            *((void *)&v254 + 1) = -1;
            uint64_t v255 = -1;
            unsigned int v256 = (__int32 *)v258;
            __uint64_t n = 0x400000000;
            uint64_t v248 = 1;
            uint64_t v249 = -1;
            uint64_t v250 = -1;
            unsigned int v251 = v253;
            uint64_t v252 = 0x400000000;
            unsigned int v138 = sub_1CB84A6F4((uint64_t)v136, (uint64_t)&v254, (uint64_t)&v248);
            uint64_t v139 = v252;
            uint64_t v140 = __n;
            if (__n + (unint64_t)v252 > v138)
            {
              unint64_t v141 = v138;
              unsigned int v142 = v252;
              do
              {
                if (v142)
                {
                  sub_1CB84AFA0((uint64_t)&v248, v251[v139 - 1]);
                  unsigned int v142 = v252 - 1;
                  LODWORD(v252) = v252 - 1;
                }
                else
                {
                  __int32 v143 = 0;
                  if (v140)
                  {
                    unsigned int v144 = 0;
                    uint64_t v145 = v256;
                    uint64_t v146 = &v256[v140];
                    unsigned int v147 = v247 - 1;
                    do
                    {
                      if (v247)
                      {
                        LODWORD(v148) = (37 * *v145) & v147;
                        unint64_t v149 = (int *)(v245 + 8 * v148);
                        int v150 = *v149;
                        if (*v145 == *v149)
                        {
LABEL_328:
                          if ((int *)(v245 + 8 * v247) != v149 && v149[1] > v144)
                          {
                            __int32 v143 = *v145;
                            unsigned int v144 = v149[1];
                          }
                        }
                        else
                        {
                          int v151 = 1;
                          while (v150 != -1)
                          {
                            int v152 = v148 + v151++;
                            uint64_t v148 = v152 & v147;
                            int v150 = *(_DWORD *)(v245 + 8 * v148);
                            if (*v145 == v150)
                            {
                              unint64_t v149 = (int *)(v245 + 8 * v148);
                              goto LABEL_328;
                            }
                          }
                        }
                      }
                      ++v145;
                    }
                    while (v145 != v146);
                  }
                  if (sub_1CB84AFA0((uint64_t)&v254, v143))
                  {
                    uint64_t v153 = &v256[__n];
                    unsigned int v154 = wmemchr(v256, v143, __n);
                    if (!v154) {
                      unsigned int v154 = v153;
                    }
                    int v155 = __n;
                    uint64_t v156 = &v256[__n];
                    if (v156 != v154 + 1)
                    {
                      memmove(v154, v154 + 1, (char *)v156 - (char *)(v154 + 1));
                      int v155 = __n;
                    }
                    LODWORD(__n) = v155 - 1;
                  }
                  unsigned int v142 = v252;
                }
                uint64_t v139 = v142;
                uint64_t v140 = __n;
              }
              while (__n + (unint64_t)v142 > v141);
            }
            uint64_t v157 = *(unsigned __int8 *)(v137 + 4);
            if ((*(unsigned char *)(v137 + 10) & 0x40) == 0 || !*(_WORD *)(v137 + 2)) {
              break;
            }
            uint64_t v158 = 0;
            uint64_t v159 = (char *)(*(void *)(v137 + 40) + 2);
            while (1)
            {
              char v160 = *v159;
              v159 += 6;
              if ((v160 & 2) != 0) {
                break;
              }
              if (*(unsigned __int16 *)(v137 + 2) == ++v158) {
                goto LABEL_350;
              }
            }
            if (v158 > v157) {
              goto LABEL_351;
            }
LABEL_385:
            if (v251 != (_DWORD *)v253) {
              free(v251);
            }
            if ((v248 & 1) == 0) {
              MEMORY[0x1D25D9CD0](v249, 4);
            }
            if (v256 != (__int32 *)v258) {
              free(v256);
            }
            if ((v254 & 1) == 0) {
              MEMORY[0x1D25D9CD0](*((void *)&v254 + 1), 4);
            }
            unint64_t v135 = v234 + 1;
            if (v234 + 1 == (uint64_t **)v233) {
              goto LABEL_394;
            }
          }
LABEL_350:
          LODWORD(v158) = -1;
LABEL_351:
          uint64_t v161 = v158;
          uint64_t v236 = v158;
          uint64_t v237 = (unsigned __int8 **)(v136 + 7);
          while (1)
          {
            uint64_t v162 = v136[4];
            uint64_t v163 = (const llvm::MachineOperand *)(v162 + 32 * v157);
            int v164 = *(unsigned __int8 *)v163;
            if (*(unsigned char *)v163) {
              goto LABEL_366;
            }
            int v165 = *((_DWORD *)v163 + 1);
            if ((v165 - 259) > 0x1FF) {
              goto LABEL_366;
            }
            if (v248) {
              break;
            }
            int v166 = v250;
            if (v250)
            {
              uint64_t v167 = (uint64_t *)v249;
              goto LABEL_356;
            }
LABEL_363:
            uint64_t RegClassConstraint = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v136, v157, *(const llvm::TargetInstrInfo **)(a1 + 248), *(const llvm::TargetRegisterInfo **)(a1 + 256));
            uint64_t v174 = *(void *)(a1 + 264);
            uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v174, "", 0);
            *(void *)(*(void *)(v174 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = RegClassConstraint & 0xFFFFFFFFFFFFFFFBLL;
            uint64_t v176 = *(void *)(v174 + 8);
            if (v176) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v176 + 24))(v176, IncompleteVirtualRegister);
            }
            sub_1CC38D61C(*(void **)(a1 + 264), IncompleteVirtualRegister, *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A43C8, 0);
            uint64_t v177 = sub_1CB84B030(v136[3], (uint64_t)v136, v237, *(void *)(*(void *)(a1 + 248) + 8) + 66288, IncompleteVirtualRegister);
            uint64_t v179 = v178;
            LODWORD(v242) = 1;
            *((void *)&v242 + 1) = 0;
            *(void *)&long long v243 = 0;
            llvm::MachineInstr::addOperand(v178, v177, (const llvm::MachineOperand *)&v242);
            llvm::MachineInstr::addOperand(v179, v177, (const llvm::MachineOperand *)(v162 + 32 * v157));
            LODWORD(v242) = 1;
            *((void *)&v242 + 1) = 0;
            *(void *)&long long v243 = 0;
            llvm::MachineInstr::addOperand(v179, v177, (const llvm::MachineOperand *)&v242);
            llvm::MachineInstr::addOperand(v179, v177, (const llvm::MachineOperand *)(v162 + 32 * v157));
            LODWORD(v242) = 1;
            *((void *)&v242 + 1) = 0;
            *(void *)&long long v243 = 0;
            llvm::MachineInstr::addOperand(v179, v177, (const llvm::MachineOperand *)&v242);
            llvm::MachineInstr::addOperand(v179, v177, (const llvm::MachineOperand *)(v162 + 32 * v157));
            LODWORD(v242) = 1;
            *((void *)&v242 + 1) = 0;
            *(void *)&long long v243 = 0;
            llvm::MachineInstr::addOperand(v179, v177, (const llvm::MachineOperand *)&v242);
            long long v242 = 0u;
            long long v243 = 0u;
            llvm::MachineInstr::addOperand(v179, v177, (const llvm::MachineOperand *)&v242);
            LODWORD(v242) = 1;
            *((void *)&v242 + 1) = 0;
            *(void *)&long long v243 = 0;
            llvm::MachineInstr::addOperand(v179, v177, (const llvm::MachineOperand *)&v242);
            long long v242 = 0u;
            long long v243 = 0u;
            llvm::MachineInstr::addOperand(v179, v177, (const llvm::MachineOperand *)&v242);
            llvm::MachineOperand::ChangeToRegister(v162 + 32 * v157, IncompleteVirtualRegister, 0, 0, 0, 0, 0, 0);
            int v164 = *(unsigned __int8 *)v163;
            uint64_t v161 = v236;
LABEL_366:
            if (v164 == 7)
            {
              uint64_t v180 = v162 + 32 * v157;
              int v181 = *(_DWORD *)(v180 + 16);
              int v182 = *(_DWORD *)(v180 + 4);
              if (v254)
              {
                int v183 = 4;
                int v184 = (char *)&v254 + 8;
              }
              else
              {
                int v183 = v255;
                if (!v255) {
                  goto LABEL_376;
                }
                int v184 = (char *)*((void *)&v254 + 1);
              }
              int v185 = v182 + (v181 << 16);
              int v186 = v183 - 1;
              unsigned int v187 = (v183 - 1) & (37 * v185);
              int v188 = *(_DWORD *)&v184[4 * v187];
              if (v185 != v188)
              {
                int v189 = 1;
                while (v188 != -1)
                {
                  unsigned int v190 = v187 + v189++;
                  unsigned int v187 = v190 & v186;
                  int v188 = *(_DWORD *)&v184[4 * v187];
                  if (v185 == v188) {
                    goto LABEL_382;
                  }
                }
LABEL_376:
                uint64_t v191 = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v136, v157, *(const llvm::TargetInstrInfo **)(a1 + 248), *(const llvm::TargetRegisterInfo **)(a1 + 256));
                uint64_t v192 = *(void *)(a1 + 264);
                uint64_t v193 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v192, "", 0);
                *(void *)(*(void *)(v192 + 24) + 16 * (v193 & 0x7FFFFFFF)) = v191 & 0xFFFFFFFFFFFFFFFBLL;
                uint64_t v194 = *(void *)(v192 + 8);
                if (v194) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v194 + 24))(v194, v193);
                }
                sub_1CC38D61C(*(void **)(a1 + 264), v193, *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (v193 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A43C8, 0);
                uint64_t v195 = v136[3];
                uint64_t v196 = *(void *)(*(void *)(a1 + 248) + 8);
                if (*(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 264)
                               + 24
                               * (*(unsigned __int16 *)(*(void *)v191 + 24)
                                + *(_DWORD *)(*(void *)(a1 + 256) + 272)
                                * ((*(void *)(*(void *)(a1 + 256) + 248)
                                                - *(void *)(*(void *)(a1 + 256) + 240)) >> 3))) == 32)
                {
                  uint64_t v197 = sub_1CB84B030(v195, (uint64_t)v136, v237, v196 + 66288, v193);
                  int v199 = v198;
                  LODWORD(v242) = 1;
                  *((void *)&v242 + 1) = 0;
                  *(void *)&long long v243 = 0;
                  int v200 = v198;
                }
                else
                {
                  uint64_t v197 = sub_1CB84B030(v195, (uint64_t)v136, v237, v196 + 48144, v193);
                  int v199 = v201;
                  LODWORD(v242) = 1;
                  *((void *)&v242 + 1) = 0;
                  *(void *)&long long v243 = 0;
                  llvm::MachineInstr::addOperand(v201, v197, (const llvm::MachineOperand *)&v242);
                  llvm::MachineInstr::addOperand(v199, v197, v163);
                  LODWORD(v242) = 1;
                  *((void *)&v242 + 1) = 0;
                  *(void *)&long long v243 = 0;
                  int v200 = v199;
                }
                llvm::MachineInstr::addOperand(v200, v197, (const llvm::MachineOperand *)&v242);
                llvm::MachineInstr::addOperand(v199, v197, v163);
                LODWORD(v242) = 1;
                *((void *)&v242 + 1) = 0;
                *(void *)&long long v243 = 0;
                llvm::MachineInstr::addOperand(v199, v197, (const llvm::MachineOperand *)&v242);
                llvm::MachineInstr::addOperand(v199, v197, v163);
                LODWORD(v242) = 1;
                *((void *)&v242 + 1) = 0;
                *(void *)&long long v243 = 0;
                llvm::MachineInstr::addOperand(v199, v197, (const llvm::MachineOperand *)&v242);
                llvm::MachineInstr::addOperand(v199, v197, v163);
                LODWORD(v242) = 1;
                *((void *)&v242 + 1) = 0;
                *(void *)&long long v243 = 0;
                llvm::MachineInstr::addOperand(v199, v197, (const llvm::MachineOperand *)&v242);
                long long v242 = 0u;
                long long v243 = 0u;
                llvm::MachineInstr::addOperand(v199, v197, (const llvm::MachineOperand *)&v242);
                LODWORD(v242) = 1;
                *((void *)&v242 + 1) = 0;
                *(void *)&long long v243 = 0;
                llvm::MachineInstr::addOperand(v199, v197, (const llvm::MachineOperand *)&v242);
                long long v242 = 0u;
                long long v243 = 0u;
                llvm::MachineInstr::addOperand(v199, v197, (const llvm::MachineOperand *)&v242);
                llvm::MachineOperand::ChangeToRegister((uint64_t)v163, v193, 0, 0, 0, 0, 0, 0);
                uint64_t v161 = v236;
              }
            }
LABEL_382:
            if (++v157 == v161) {
              goto LABEL_385;
            }
          }
          int v166 = 4;
          uint64_t v167 = &v249;
LABEL_356:
          int v168 = v166 - 1;
          unsigned int v169 = v168 & (37 * v165);
          int v170 = *((_DWORD *)v167 + v169);
          if (v165 == v170) {
            goto LABEL_366;
          }
          int v171 = 1;
          while (v170 != -1)
          {
            unsigned int v172 = v169 + v171++;
            unsigned int v169 = v172 & v168;
            int v170 = *((_DWORD *)v167 + v169);
            if (v165 == v170) {
              goto LABEL_366;
            }
          }
          goto LABEL_363;
        }
        goto LABEL_394;
      }
    }
    if (v11)
    {
      if ((v12 & 0x100000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_238;
    }
    uint64_t v134 = v6;
    if ((v12 & 0x100000) != 0) {
      goto LABEL_238;
    }
    while ((*(_WORD *)(v134 + 44) & 8) != 0)
    {
      uint64_t v134 = *(void *)(v134 + 8);
      if ((*(unsigned char *)(*(void *)(v134 + 16) + 10) & 0x10) != 0) {
        goto LABEL_238;
      }
    }
LABEL_12:
    if ((*((void *)v7 + 2) & 1) == 0) {
      goto LABEL_275;
    }
    *(void *)&long long v254 = 1;
    *((void *)&v254 + 1) = -1;
    uint64_t v255 = -1;
    unsigned int v256 = (__int32 *)v258;
    __uint64_t n = 0x400000000;
    uint64_t v248 = 1;
    uint64_t v249 = -1;
    uint64_t v250 = -1;
    unsigned int v251 = v253;
    uint64_t v252 = 0x400000000;
    unsigned int v13 = sub_1CB84A6F4(v6, (uint64_t)&v254, (uint64_t)&v248);
    unint64_t v14 = v252 + (unint64_t)__n;
    if (v14 <= v13)
    {
      int v42 = v13 - v14;
    }
    else
    {
      if (v260 >= (unint64_t)HIDWORD(v260)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)&v259[8 * v260] = v6;
      LODWORD(v260) = v260 + 1;
      if (__n > v13)
      {
        uint64_t v15 = v256;
        uint64_t v16 = &v256[__n];
        while (1)
        {
          unsigned __int32 v17 = *v15;
          if (!v247)
          {
            uint64_t v29 = 0;
            *(void *)&long long v242 = v17 | 0x100000000;
LABEL_53:
            unsigned int v41 = sub_1CB83889C((uint64_t)&v245, (uint64_t)&v242, &v242, v29);
            *(void *)unsigned int v41 = v242;
            goto LABEL_54;
          }
          uint64_t v18 = v245;
          int v19 = 37 * v17;
          unsigned int v20 = v247 - 1;
          unsigned int v21 = (v247 - 1) & (37 * v17);
          uint64_t v22 = (_DWORD *)(v245 + 8 * v21);
          int v23 = *v22;
          if (v17 != *v22) {
            break;
          }
          if (v247 == v21) {
            goto LABEL_20;
          }
LABEL_39:
          int v33 = v22[1] + 1;
          *uint64_t v22 = -2;
          int32x2_t v246 = vadd_s32(v246, (int32x2_t)0x1FFFFFFFFLL);
          *(void *)&long long v242 = __PAIR64__(v33, v17);
          if (!v247)
          {
            uint64_t v29 = 0;
            goto LABEL_53;
          }
          unsigned int v34 = (v247 - 1) & v19;
          uint64_t v35 = (_DWORD *)(v18 + 8 * v34);
          int v36 = *v35;
          if (v17 != *v35)
          {
            uint64_t v37 = 0;
            int v38 = 1;
            while (v36 != -1)
            {
              if (v37) {
                BOOL v39 = 0;
              }
              else {
                BOOL v39 = v36 == -2;
              }
              if (v39) {
                uint64_t v37 = v35;
              }
              unsigned int v40 = v34 + v38++;
              unsigned int v34 = v40 & (v247 - 1);
              uint64_t v35 = (_DWORD *)(v18 + 8 * v34);
              int v36 = *v35;
              if (v17 == *v35) {
                goto LABEL_54;
              }
            }
            if (v37) {
              uint64_t v29 = v37;
            }
            else {
              uint64_t v29 = v35;
            }
            goto LABEL_53;
          }
LABEL_54:
          if (++v15 == v16) {
            goto LABEL_58;
          }
        }
        int v30 = 1;
        LODWORD(v31) = v20 & v19;
        while (v23 != -1)
        {
          int v32 = v31 + v30++;
          uint64_t v31 = v32 & v20;
          int v23 = *(_DWORD *)(v245 + 8 * v31);
          if (v17 == v23)
          {
            if (v31 == v247) {
              break;
            }
            uint64_t v22 = (_DWORD *)(v245 + 8 * v31);
            goto LABEL_39;
          }
        }
LABEL_20:
        LODWORD(v242) = *v15;
        DWORD1(v242) = 1;
        int v24 = *v22;
        if (v17 != *v22)
        {
          uint64_t v25 = 0;
          int v26 = 1;
          while (v24 != -1)
          {
            if (v25) {
              BOOL v27 = 0;
            }
            else {
              BOOL v27 = v24 == -2;
            }
            if (v27) {
              uint64_t v25 = v22;
            }
            unsigned int v28 = v21 + v26++;
            unsigned int v21 = v28 & v20;
            uint64_t v22 = (_DWORD *)(v245 + 8 * (v28 & v20));
            int v24 = *v22;
            if (v17 == *v22) {
              goto LABEL_54;
            }
          }
          if (v25) {
            uint64_t v29 = v25;
          }
          else {
            uint64_t v29 = v22;
          }
          goto LABEL_53;
        }
        goto LABEL_54;
      }
LABEL_58:
      int v42 = 0;
    }
    uint64_t v43 = *((unsigned __int8 *)v7 + 4);
    if ((v7[5] & 0x40) != 0 && v7[1])
    {
      uint64_t v44 = 0;
      int v45 = (char *)(*((void *)v7 + 5) + 2);
      while (1)
      {
        char v46 = *v45;
        v45 += 6;
        if ((v46 & 2) != 0) {
          break;
        }
        if (v7[1] == ++v44) {
          goto LABEL_64;
        }
      }
    }
    else
    {
LABEL_64:
      LODWORD(v44) = -1;
    }
    if (!v42 || v44 <= v43)
    {
LABEL_216:
      int v111 = v44 - v43;
      uint64_t v5 = v235;
      if (v44 > v43)
      {
        uint64_t v112 = 32 * v43;
        do
        {
          uint64_t v113 = *(void *)(v6 + 32);
          if (!*(unsigned char *)(v113 + v112))
          {
            int v114 = *(_DWORD *)(v113 + v112 + 4);
            if (v114 < 0) {
              sub_1CC38D61C(*(void **)(a1 + 264), v114, *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (v114 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A43C8, 0);
            }
          }
          v112 += 32;
          --v111;
        }
        while (v111);
      }
      if (v251 != (_DWORD *)v253) {
        free(v251);
      }
      if ((v248 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v249, 4);
      }
      if (v256 != (__int32 *)v258) {
        free(v256);
      }
      if ((v254 & 1) == 0) {
        MEMORY[0x1D25D9CD0](*((void *)&v254 + 1), 4);
      }
      goto LABEL_274;
    }
    unint64_t v47 = v44;
    while (1)
    {
      uint64_t v48 = *(void *)(v6 + 32);
      if ((*(_DWORD *)(v48 + 32 * v43) & 0xFFFFF) != 0) {
        goto LABEL_152;
      }
      uint64_t v49 = v48 + 32 * v43;
      unsigned int v52 = *(_DWORD *)(v49 + 4);
      uint64_t v50 = (int *)(v49 + 4);
      uint64_t v51 = v52;
      uint64_t v53 = *(void *)(a1 + 264);
      sub_1CB84A414((uint64_t)&v242, v52, v53);
      if (!v244)
      {
        sub_1CB84AAE4((uint64_t)&v242, v51, v53, 1381, 4);
        if (!v244) {
          sub_1CB84AAE4((uint64_t)&v242, v51, v53, 1003, 2);
        }
      }
      uint64_t v54 = *(void *)(a1 + 264);
      unint64_t v55 = (uint64_t *)((v51 & 0x80000000) != 0
                      ? *(void *)(v54 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8
                      : *(void *)(v54 + 272) + 8 * v51);
      uint64_t v56 = *v55;
      if (!v56) {
        goto LABEL_76;
      }
      if ((*(unsigned char *)(v56 + 3) & 1) == 0)
      {
        uint64_t v108 = *(void *)(v56 + 24);
        if (!v108 || (*(unsigned char *)(v108 + 3) & 1) == 0) {
          goto LABEL_76;
        }
      }
      if ((v51 & 0x80000000) != 0) {
        uint64_t v75 = (uint64_t *)(*(void *)(v54 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v75 = (uint64_t *)(*(void *)(v54 + 272) + 8 * v51);
      }
      uint64_t v76 = *v75;
      if (v76)
      {
        if ((*(unsigned char *)(v76 + 3) & 1) == 0)
        {
          uint64_t v76 = *(void *)(v76 + 24);
          if (v76)
          {
            if ((*(unsigned char *)(v76 + 3) & 1) == 0) {
              uint64_t v76 = 0;
            }
          }
        }
      }
      uint64_t v77 = *(void *)(v76 + 8);
      while (1)
      {
        uint64_t v76 = *(void *)(v76 + 24);
        if (!v76 || (*(unsigned char *)(v76 + 3) & 1) == 0) {
          break;
        }
        if (*(void *)(v76 + 8) != v77) {
          goto LABEL_76;
        }
      }
      if (v77
        && **(_WORD **)(v77 + 16) == 740
        && (uint64_t v78 = *(void *)(v77 + 32), !*(unsigned char *)(v78 + 32))
        && (*(_DWORD *)(v78 + 36) - 771) > 0xFFFFFDFF)
      {
        long long v79 = *(_OWORD *)(v78 + 48);
        long long v239 = *(_OWORD *)(v78 + 32);
        long long v240 = v79;
        LOBYTE(v241) = 1;
      }
      else
      {
LABEL_76:
        uint64_t v241 = 0;
        long long v239 = 0u;
        long long v240 = 0u;
      }
      if (v244) {
        break;
      }
LABEL_125:
      if ((_BYTE)v241)
      {
        sub_1CB84A5E4(v6, &v239, v43);
        int v82 = *v50;
        int v238 = *v50;
        if (v248)
        {
          int v83 = 4;
          uint64_t v84 = &v249;
          goto LABEL_128;
        }
        int v83 = v250;
        if (v250)
        {
          uint64_t v84 = (uint64_t *)v249;
LABEL_128:
          int v85 = v83 - 1;
          unsigned int v86 = v85 & (37 * v82);
          uint64_t v87 = (_DWORD *)v84 + v86;
          int v88 = *v87;
          if (v82 == *v87)
          {
            int v91 = 0;
          }
          else
          {
            uint64_t v89 = 0;
            int v90 = 1;
            while (v88 != -1)
            {
              int v91 = 0;
              if (v89) {
                BOOL v92 = 0;
              }
              else {
                BOOL v92 = v88 == -2;
              }
              if (v92) {
                uint64_t v89 = v87;
              }
              unsigned int v93 = v86 + v90++;
              unsigned int v86 = v93 & v85;
              uint64_t v87 = (_DWORD *)v84 + v86;
              int v88 = *v87;
              if (v82 == *v87) {
                goto LABEL_144;
              }
            }
            if (v89) {
              unsigned int v94 = v89;
            }
            else {
              unsigned int v94 = v87;
            }
LABEL_142:
            uint64_t v95 = sub_1CB834EC4((uint64_t)&v248, (uint64_t)&v238, &v238, v94);
            *uint64_t v95 = v238;
            if (v252 >= (unint64_t)HIDWORD(v252)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v251[v252] = v238;
            LODWORD(v252) = v252 + 1;
            int v91 = -1;
          }
LABEL_144:
          uint64_t v96 = *(void *)(a1 + 264);
          if ((v51 & 0x80000000) != 0) {
            uint64_t v97 = (uint64_t *)(*(void *)(v96 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v97 = (uint64_t *)(*(void *)(v96 + 272) + 8 * v51);
          }
          v42 += v91;
          uint64_t v98 = *v97;
          if (v98)
          {
            while ((*(unsigned char *)(v98 + 3) & 1) != 0)
            {
              uint64_t v98 = *(void *)(v98 + 24);
              if (!v98) {
                goto LABEL_149;
              }
            }
          }
          else
          {
LABEL_149:
            if ((v51 & 0x80000000) != 0) {
              uint64_t v99 = (uint64_t *)(*(void *)(v96 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v99 = (uint64_t *)(*(void *)(v96 + 272) + 8 * v51);
            }
            uint64_t v100 = *v99;
            if (v100
              && ((*(unsigned char *)(v100 + 3) & 1) != 0
               || (uint64_t v110 = *(void *)(v100 + 24)) != 0 && (*(unsigned char *)(v110 + 3) & 1) != 0))
            {
              if ((v51 & 0x80000000) != 0) {
                uint64_t v105 = (uint64_t *)(*(void *)(v96 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v105 = (uint64_t *)(*(void *)(v96 + 272) + 8 * v51);
              }
              uint64_t v106 = *v105;
              if (v106)
              {
                if ((*(unsigned char *)(v106 + 3) & 1) == 0)
                {
                  uint64_t v106 = *(void *)(v106 + 24);
                  if (v106)
                  {
                    if ((*(unsigned char *)(v106 + 3) & 1) == 0) {
                      uint64_t v106 = 0;
                    }
                  }
                }
              }
              uint64_t v107 = *(void *)(v106 + 8);
              while (1)
              {
                uint64_t v106 = *(void *)(v106 + 24);
                if (!v106 || (*(unsigned char *)(v106 + 3) & 1) == 0) {
                  break;
                }
                uint64_t v101 = 0;
                if (*(void *)(v106 + 8) != v107) {
                  goto LABEL_160;
                }
              }
              uint64_t v101 = v107;
            }
            else
            {
              uint64_t v101 = 0;
            }
LABEL_160:
            if (v263 >= (unint64_t)HIDWORD(v263)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v262[v263] = v101;
            LODWORD(v263) = v263 + 1;
          }
          goto LABEL_151;
        }
        unsigned int v94 = 0;
        goto LABEL_142;
      }
LABEL_151:
      unint64_t v47 = v44;
LABEL_152:
      if (++v43 >= v47 || !v42) {
        goto LABEL_216;
      }
    }
    sub_1CB84A5E4(v6, &v242, v43);
    int v57 = *v50 + (*(_DWORD *)(v48 + 32 * v43 + 16) << 16);
    int v238 = v57;
    if (v254)
    {
      int v58 = 4;
      unsigned int v59 = (char *)&v254 + 8;
    }
    else
    {
      int v58 = v255;
      if (!v255)
      {
        uint64_t v69 = 0;
        goto LABEL_94;
      }
      unsigned int v59 = (char *)*((void *)&v254 + 1);
    }
    int v60 = v58 - 1;
    unsigned int v61 = v60 & (37 * v57);
    v62 = &v59[4 * v61];
    int v63 = *(_DWORD *)v62;
    if (v57 == *(_DWORD *)v62)
    {
      int v66 = 0;
      goto LABEL_96;
    }
    BOOL v64 = 0;
    int v65 = 1;
    while (v63 != -1)
    {
      int v66 = 0;
      if (v64) {
        BOOL v67 = 0;
      }
      else {
        BOOL v67 = v63 == -2;
      }
      if (v67) {
        BOOL v64 = v62;
      }
      unsigned int v68 = v61 + v65++;
      unsigned int v61 = v68 & v60;
      v62 = &v59[4 * v61];
      int v63 = *(_DWORD *)v62;
      if (v57 == *(_DWORD *)v62) {
        goto LABEL_96;
      }
    }
    if (v64) {
      uint64_t v69 = v64;
    }
    else {
      uint64_t v69 = v62;
    }
LABEL_94:
    uint64_t v70 = sub_1CB834EC4((uint64_t)&v254, (uint64_t)&v238, &v238, v69);
    *uint64_t v70 = v238;
    if (__n >= (unint64_t)HIDWORD(__n)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v256[__n] = v238;
    LODWORD(__n) = __n + 1;
    int v66 = -1;
LABEL_96:
    uint64_t v71 = *(void *)(a1 + 264);
    if ((v51 & 0x80000000) != 0) {
      int v72 = (uint64_t *)(*(void *)(v71 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
    }
    else {
      int v72 = (uint64_t *)(*(void *)(v71 + 272) + 8 * v51);
    }
    v42 += v66;
    uint64_t v73 = *v72;
    if (v73)
    {
      while ((*(unsigned char *)(v73 + 3) & 1) != 0)
      {
        uint64_t v73 = *(void *)(v73 + 24);
        if (!v73) {
          goto LABEL_101;
        }
      }
    }
    else
    {
LABEL_101:
      if ((v51 & 0x80000000) != 0) {
        uint64_t v74 = (uint64_t *)(*(void *)(v71 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v74 = (uint64_t *)(*(void *)(v71 + 272) + 8 * v51);
      }
      uint64_t v80 = *v74;
      if (v80
        && ((*(unsigned char *)(v80 + 3) & 1) != 0 || (uint64_t v109 = *(void *)(v80 + 24)) != 0 && (*(unsigned char *)(v109 + 3) & 1) != 0))
      {
        if ((v51 & 0x80000000) != 0) {
          unsigned int v102 = (uint64_t *)(*(void *)(v71 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
        }
        else {
          unsigned int v102 = (uint64_t *)(*(void *)(v71 + 272) + 8 * v51);
        }
        uint64_t v103 = *v102;
        if (v103)
        {
          if ((*(unsigned char *)(v103 + 3) & 1) == 0)
          {
            uint64_t v103 = *(void *)(v103 + 24);
            if (v103)
            {
              if ((*(unsigned char *)(v103 + 3) & 1) == 0) {
                uint64_t v103 = 0;
              }
            }
          }
        }
        uint64_t v104 = *(void *)(v103 + 8);
        while (1)
        {
          uint64_t v103 = *(void *)(v103 + 24);
          if (!v103 || (*(unsigned char *)(v103 + 3) & 1) == 0) {
            break;
          }
          uint64_t v81 = 0;
          if (*(void *)(v103 + 8) != v104) {
            goto LABEL_123;
          }
        }
        uint64_t v81 = v104;
      }
      else
      {
        uint64_t v81 = 0;
      }
LABEL_123:
      if (v263 >= (unint64_t)HIDWORD(v263)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v262[v263] = v81;
      LODWORD(v263) = v263 + 1;
    }
    goto LABEL_125;
  }
  return 0;
}

double sub_1CB84A414(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a2);
  }
  uint64_t v6 = *v5;
  if (!v6) {
    goto LABEL_5;
  }
  if ((*(unsigned char *)(v6 + 3) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v6 + 24);
    if (!v13 || (*(unsigned char *)(v13 + 3) & 1) == 0) {
      goto LABEL_5;
    }
  }
  int v8 = (uint64_t *)((a2 & 0x80000000) != 0
                 ? *(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8
                 : *(void *)(a3 + 272) + 8 * a2);
  uint64_t v9 = *v8;
  if (v9)
  {
    if ((*(unsigned char *)(v9 + 3) & 1) == 0)
    {
      uint64_t v9 = *(void *)(v9 + 24);
      if (v9)
      {
        if ((*(unsigned char *)(v9 + 3) & 1) == 0) {
          uint64_t v9 = 0;
        }
      }
    }
  }
  uint64_t v10 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v9 = *(void *)(v9 + 24);
    if (!v9 || (*(unsigned char *)(v9 + 3) & 1) == 0) {
      break;
    }
    if (*(void *)(v9 + 8) != v10) {
      goto LABEL_5;
    }
  }
  if (v10
    && **(_WORD **)(v10 + 16) == 18
    && *(_DWORD *)(v10 + 40) == 5
    && (sub_1CB84AAE4((uint64_t)&v16, *(_DWORD *)(*(void *)(v10 + 32) + 36), a3, 1381, 4), v18)
    && (uint64_t v11 = *(void *)(v10 + 32), *(void *)(v11 + 80) == 33)
    && (sub_1CB84AAE4((uint64_t)v14, *(_DWORD *)(v11 + 100), a3, 1381, 4), v15)
    && *(void *)(*(void *)(v10 + 32) + 144) == 34
    && (*(unsigned int *)v17 | ((unint64_t)*(unsigned int *)&v17[20] << 32)) + 2 == (v14[1] | ((unint64_t)v14[6] << 32)))
  {
    int v12 = v16;
    *(_OWORD *)(a1 + 4) = *(_OWORD *)v17;
    double result = *(double *)&v17[12];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&v17[12];
    *(_DWORD *)a1 = v12 & 0xFFF000FF | 0x800;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
LABEL_5:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_1CB84A5E4(uint64_t a1, _OWORD *a2, unsigned int a3)
{
  v13[32] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (llvm::MachineOperand *)v13;
  uint64_t v12 = 0x800000000;
  sub_1CB84ACA0((unsigned int *)&v11, (uint64_t)v13, (unsigned char *)(*(void *)(a1 + 32) + 32 * a3), (unsigned char *)(*(void *)(a1 + 32) + 32 * *(unsigned int *)(a1 + 40)));
  uint64_t v6 = v11;
  long long v7 = a2[1];
  *(_OWORD *)uint64_t v11 = *a2;
  *((_OWORD *)v6 + 1) = v7;
  while (1)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 40);
    if (v8 <= a3) {
      break;
    }
    llvm::MachineInstr::removeOperand((char *)a1, v8 - 1);
  }
  uint64_t v9 = v11;
  if (v12)
  {
    uint64_t v10 = 32 * v12;
    do
    {
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)a1, *(llvm::MachineFunction **)(*(void *)(a1 + 24) + 32), v9);
      uint64_t v9 = (llvm::MachineOperand *)((char *)v9 + 32);
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = v11;
  }
  if (v9 != (llvm::MachineOperand *)v13) {
    free(v9);
  }
}

uint64_t sub_1CB84A6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v50 = *(void *)(v6 + 16);
  unsigned int v52 = &v54;
  uint64_t v53 = 0x200000000;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  unint64_t v55 = &v56;
  if ((*(unsigned char *)(v6 + 10) & 0x40) == 0 || !*(_WORD *)(v6 + 2))
  {
LABEL_6:
    unsigned int v10 = *(unsigned __int8 *)(v6 + 4);
    LODWORD(v7) = -1;
LABEL_7:
    int v11 = 0;
    uint64_t v49 = a3 + 8;
    int v12 = 1;
    while (1)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = *(unsigned __int8 *)(v13 + 32 * v10);
      if (v14 == 7) {
        break;
      }
      if (v14 != 5)
      {
        if (*(unsigned char *)(v13 + 32 * v10))
        {
          BOOL v37 = v14 != 1;
          if ((v37 | v12))
          {
            v12 &= v37;
          }
          else
          {
            if ((v50 & 0x10) == 0 || v10 + 1 != v7)
            {
              unsigned int v51 = *(void *)(v13 + 32 * v10 + 16);
              sub_1CD3C8DA0((uint64_t)&v52, &v51);
            }
            int v12 = 0;
          }
          goto LABEL_53;
        }
        unsigned int v15 = *(_DWORD *)(v13 + 32 * v10 + 4);
        if (v15 - 259 <= 0x1FF)
        {
          unsigned int v51 = v15;
          if (*(unsigned char *)a3)
          {
            int v16 = 4;
            uint64_t v17 = v49;
            goto LABEL_14;
          }
          int v16 = *(_DWORD *)(a3 + 16);
          if (!v16)
          {
            unsigned int v41 = 0;
            goto LABEL_50;
          }
          uint64_t v17 = *(void *)(a3 + 8);
LABEL_14:
          int v18 = v16 - 1;
          unsigned int v19 = v18 & (37 * v15);
          unsigned int v20 = (_DWORD *)(v17 + 4 * v19);
          int v21 = *v20;
          if (v15 != *v20)
          {
            uint64_t v22 = 0;
            int v23 = 1;
            while (v21 != -1)
            {
              if (v22) {
                BOOL v24 = 0;
              }
              else {
                BOOL v24 = v21 == -2;
              }
              if (v24) {
                uint64_t v22 = v20;
              }
              unsigned int v25 = v19 + v23++;
              unsigned int v19 = v25 & v18;
              unsigned int v20 = (_DWORD *)(v17 + 4 * v19);
              int v21 = *v20;
              if (v15 == *v20) {
                goto LABEL_52;
              }
            }
            if (v22) {
              unsigned int v41 = v22;
            }
            else {
              unsigned int v41 = v20;
            }
LABEL_50:
            int v42 = sub_1CB834EC4(a3, (uint64_t)&v51, &v51, v41);
            *int v42 = v51;
            unint64_t v43 = *(unsigned int *)(a3 + 32);
            if (v43 >= *(unsigned int *)(a3 + 36)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)(a3 + 24) + 4 * v43) = v51;
            ++*(_DWORD *)(a3 + 32);
          }
        }
LABEL_52:
        ++v10;
        goto LABEL_53;
      }
      ++v11;
LABEL_53:
      if (++v10 >= v7)
      {
        int v44 = v53;
        int v45 = v56;
        uint64_t v46 = v57;
        goto LABEL_64;
      }
    }
    int v26 = *(_DWORD *)(v13 + 32 * v10 + 4) + (*(_DWORD *)(v13 + 32 * v10 + 16) << 16);
    unsigned int v51 = v26;
    if (*(unsigned char *)a2)
    {
      int v27 = 4;
      uint64_t v28 = a2 + 8;
    }
    else
    {
      int v27 = *(_DWORD *)(a2 + 16);
      if (!v27)
      {
        int v38 = 0;
        goto LABEL_45;
      }
      uint64_t v28 = *(void *)(a2 + 8);
    }
    int v29 = v27 - 1;
    unsigned int v30 = v29 & (37 * v26);
    uint64_t v31 = (_DWORD *)(v28 + 4 * v30);
    int v32 = *v31;
    if (v26 == *v31) {
      goto LABEL_52;
    }
    int v33 = 0;
    int v34 = 1;
    while (v32 != -1)
    {
      if (v33) {
        BOOL v35 = 0;
      }
      else {
        BOOL v35 = v32 == -2;
      }
      if (v35) {
        int v33 = v31;
      }
      unsigned int v36 = v30 + v34++;
      unsigned int v30 = v36 & v29;
      uint64_t v31 = (_DWORD *)(v28 + 4 * v30);
      int v32 = *v31;
      if (v26 == *v31) {
        goto LABEL_52;
      }
    }
    if (v33) {
      int v38 = v33;
    }
    else {
      int v38 = v31;
    }
LABEL_45:
    BOOL v39 = sub_1CB834EC4(a2, (uint64_t)&v51, &v51, v38);
    *BOOL v39 = v51;
    unint64_t v40 = *(unsigned int *)(a2 + 32);
    if (v40 >= *(unsigned int *)(a2 + 36)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)(a2 + 24) + 4 * v40) = v51;
    ++*(_DWORD *)(a2 + 32);
    goto LABEL_52;
  }
  uint64_t v7 = 0;
  unsigned int v8 = (char *)(*(void *)(v6 + 40) + 2);
  while (1)
  {
    char v9 = *v8;
    v8 += 6;
    if ((v9 & 2) != 0) {
      break;
    }
    if (*(unsigned __int16 *)(v6 + 2) == ++v7) {
      goto LABEL_6;
    }
  }
  unsigned int v10 = *(unsigned __int8 *)(v6 + 4);
  if (v7 > v10) {
    goto LABEL_7;
  }
  int v45 = 0;
  int v44 = 0;
  uint64_t v46 = 0;
  int v11 = 0;
LABEL_64:
  sub_1CB833A08((uint64_t)&v55, v45);
  if (v52 != &v54) {
    free(v52);
  }
  if (v46) {
    int v47 = v46;
  }
  else {
    int v47 = v44;
  }
  return (2 - v11 - v47);
}

__n128 sub_1CB84AAE4(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v7 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a2);
  }
  uint64_t v8 = *v7;
  if (!v8) {
    goto LABEL_5;
  }
  if ((*(unsigned char *)(v8 + 3) & 1) == 0)
  {
    uint64_t v19 = *(void *)(v8 + 24);
    if (!v19 || (*(unsigned char *)(v19 + 3) & 1) == 0) {
      goto LABEL_5;
    }
  }
  if ((a2 & 0x80000000) != 0) {
    unsigned int v10 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v10 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a2);
  }
  uint64_t v11 = *v10;
  if (v11)
  {
    if ((*(unsigned char *)(v11 + 3) & 1) == 0)
    {
      uint64_t v11 = *(void *)(v11 + 24);
      if (v11)
      {
        if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
          uint64_t v11 = 0;
        }
      }
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11 || (*(unsigned char *)(v11 + 3) & 1) == 0) {
      break;
    }
    if (*(void *)(v11 + 8) != v12) {
      goto LABEL_5;
    }
  }
  if (v12
    && **(unsigned __int16 **)(v12 + 16) == a4
    && (uint64_t v13 = *(void *)(v12 + 32), !*(void *)(v13 + 48))
    && (int v14 = (const llvm::MachineOperand *)(v13 + 64), *(_DWORD *)(v13 + 64) == 7)
    && (*(_DWORD *)(v13 + 80) == 64 ? (BOOL v15 = ((*(_DWORD *)(v13 + 64) >> 8) & 0xFFF) == a5) : (BOOL v15 = 0),
        v15
     && (a5 != 2 || (*(unsigned char *)(v13 + 68) & 1) == 0)
     && !*(void *)(v13 + 112)
     && llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v13 + 128), (const llvm::MachineOperand *)(v13 + 64))&& (uint64_t v16 = *(void *)(v12 + 32), !*(void *)(v16 + 176))&& llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v16 + 192), v14)&& (v17 = *(void *)(v12 + 32), !*(void *)(v17 + 240))&& (a4 != 1003|| llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v17 + 256), v14)&& !*(void *)(*(void *)(v12 + 32) + 304))))
  {
    __n128 result = *(__n128 *)v14;
    long long v18 = *((_OWORD *)v14 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 16) = v18;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
LABEL_5:
    *(void *)(a1 + 32) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1CB84ACA0(unsigned int *a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (a2 - *(void *)a1) >> 5;
  uint64_t v7 = a1[2];
  if (*(void *)a1 + 32 * v7 == a2)
  {
    sub_1CB84AE28(a1, a3, a4);
    return *(void *)a1 + 32 * v6;
  }
  long long v18 = a3;
  size_t v10 = a4 - a3;
  unint64_t v11 = (a4 - a3) >> 5;
  if (v7 + v11 > a1[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v12 = (unsigned char *)(v5 + 32 * v7);
  __src = (unsigned char *)(v5 + 32 * v6);
  unint64_t v13 = (v12 - __src) >> 5;
  if (v13 < v11)
  {
    uint64_t v14 = v7 + (v10 >> 5);
    a1[2] = v14;
    if (v6 != v7)
    {
      BOOL v15 = (_OWORD *)(v5 + 32 * v6);
      memcpy((void *)(v5 + 32 * v14 - 32 * v13), __src, v12 - __src);
      do
      {
        long long v16 = v18[1];
        _OWORD *v15 = *v18;
        v15[1] = v16;
        v15 += 2;
        v18 += 2;
        --v13;
      }
      while (v13);
    }
    if (v18 != (_OWORD *)a4) {
      memcpy(v12, v18, a4 - (unsigned char *)v18);
    }
    return (uint64_t)__src;
  }
  sub_1CD3C8D18((uint64_t)a1, &v12[-32 * v11], (char *)(v5 + 32 * v7));
  if (&v12[-32 * v11] != __src) {
    memmove(&__src[32 * v11], __src, &v12[-32 * v11] - __src);
  }
  if (v18 == (_OWORD *)a4) {
    return (uint64_t)__src;
  }
  memmove(__src, v18, v10);
  return (uint64_t)__src;
}

unsigned int *sub_1CB84AE28(unsigned int *result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - a2;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - a2) >> 5) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    __n128 result = (unsigned int *)memcpy((void *)(*(void *)result + 32 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 5);
  return result;
}

uint64_t **sub_1CB84AEB8(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        return v8;
      }
      uint64_t v5 = v8[1];
    }
    while (v5);
    uint64_t v6 = v8 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_10:
  unint64_t v11 = (uint64_t *)v8;
  uint64_t v8 = (uint64_t **)operator new(0x20uLL);
  *((_DWORD *)v8 + 7) = *a3;
  *uint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *uint64_t v6 = (uint64_t *)v8;
  uint64_t v12 = (uint64_t *)**a1;
  unint64_t v13 = (uint64_t *)v8;
  if (v12)
  {
    *a1 = v12;
    unint64_t v13 = *v6;
  }
  sub_1CB8358B8(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t sub_1CB84AFA0(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v3 = 4;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & (37 * a2);
  uint64_t v6 = (int *)(v2 + 4 * v5);
  int v7 = *v6;
  if (*v6 == a2)
  {
LABEL_8:
    *uint64_t v6 = -2;
    int v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  int v8 = 1;
  while (v7 != -1)
  {
    int v9 = v5 + v8++;
    uint64_t v5 = v9 & v4;
    int v7 = *(_DWORD *)(v2 + 4 * v5);
    if (v7 == a2)
    {
      uint64_t v6 = (int *)(v2 + 4 * v5);
      goto LABEL_8;
    }
  }
  return 0;
}

llvm::MachineFunction *sub_1CB84B030(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, int a5)
{
  if ((*(_WORD *)(a2 + 44) & 4) != 0)
  {
    return sub_1CD3C8EB4(a1, a2, a3, a4, a5);
  }
  else
  {
    int v9 = *(llvm::MachineFunction **)(a1 + 32);
    int v10 = *a3;
    unsigned int v25 = v10;
    if (v10) {
      llvm::MetadataTracking::track((uint64_t)&v25, v10, 2);
    }
    unint64_t v11 = llvm::MachineFunction::CreateMachineInstr(v9, a4, &v25, 0);
    if (v25) {
      llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
    }
    uint64_t v12 = *(void *)(a1 + 40);
    *((void *)v11 + 3) = v12;
    uint64_t v13 = *(void *)(v12 + 32);
    uint64_t v14 = *((unsigned int *)v11 + 10);
    if (v14)
    {
      uint64_t v18 = *((void *)v11 + 4);
      uint64_t v19 = *(void *)(v13 + 40);
      uint64_t v20 = 32 * v14;
      do
      {
        if (!*(unsigned char *)v18)
        {
          uint64_t v21 = *(unsigned int *)(v18 + 4);
          if ((int)v21 >= 0) {
            uint64_t v22 = (uint64_t *)(*(void *)(v19 + 272) + 8 * v21);
          }
          else {
            uint64_t v22 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
          }
          uint64_t v23 = *v22;
          if (*v22)
          {
            uint64_t v24 = *(void *)(v23 + 16);
            *(void *)(v23 + 16) = v18;
            *(void *)(v18 + 16) = v24;
            if (*(unsigned char *)(v18 + 3))
            {
              *(void *)(v18 + 24) = v23;
            }
            else
            {
              *(void *)(v18 + 24) = 0;
              uint64_t v22 = (uint64_t *)(v24 + 24);
            }
          }
          else
          {
            *(void *)(v18 + 16) = v18;
            *(void *)(v18 + 24) = 0;
          }
          *uint64_t v22 = v18;
        }
        v18 += 32;
        v20 -= 32;
      }
      while (v20);
    }
    uint64_t v15 = *(void *)(v13 + 728);
    if (v15) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v15 + 24))(v15, v11);
    }
    unint64_t v16 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v11 = v16 | *(void *)v11 & 7;
    *((void *)v11 + 1) = a2;
    *(void *)(v16 + 8) = v11;
    *(void *)a2 = *(void *)a2 & 7 | (unint64_t)v11;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    v26[0] = 0x1000000;
    v26[1] = a5;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)v26);
    return v9;
  }
}

uint64_t sub_1CB84B218(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (****)(void, void, void, uint64_t, uint64_t))(a1 + 344);
  int v4 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    uint64_t v3 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 216))(*(void *)(a1 + 8), a1 + 128, a1);
    *(void *)(a1 + 48) = v3;
  }
  int v5 = *(_DWORD *)(v3 + 16) + 7;
  uint64_t v6 = v5 & 0xFFFFFFF8;
  if ((v5 & 0xFFFFFFF8) != 0)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v8 = (i + 1795);
      int v9 = (_DWORD *)v4[57];
      int v10 = (_DWORD *)v4[58];
      unint64_t v11 = v9;
      if (v10 == v9)
      {
        uint64_t v12 = (i + 1539);
        unsigned int v14 = i + 771;
LABEL_19:
        if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, v14, 0) & 1) == 0)
        {
          if (!llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)i + 1795, 0)) {
            return v8;
          }
          uint64_t v8 = v12;
          if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, v12, 0) & 1) == 0) {
            return v8;
          }
          break;
        }
      }
      else
      {
        while (*v11 != v8 && v11[1] != v8)
        {
          v11 += 2;
          if (v11 == v10)
          {
            uint64_t v12 = (i + 1539);
            uint64_t v13 = (_DWORD *)v4[57];
            while (*v13 != v12 && v13[1] != v12)
            {
              v13 += 2;
              if (v13 == v10)
              {
                unsigned int v14 = i + 771;
                while (*v9 != v14 && v9[1] != v14)
                {
                  v9 += 2;
                  if (v9 == v10) {
                    goto LABEL_19;
                  }
                }
                goto LABEL_20;
              }
            }
            break;
          }
        }
      }
LABEL_20:
      ;
    }
  }
  int v15 = (**v2)(v2, 0, 0, 1, 1);
  if ((v15 & 0xFFFFFF00) == 0)
  {
    uint64_t v8 = (v15 + 1283);
    unsigned int v16 = v15 + 1027;
    do
    {
      if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, v16 - 1024, 0) & 1) == 0)
      {
        if (!llvm::MachineRegisterInfo::isPhysRegModified(v4, v16, 0)) {
          return (v8 - 256);
        }
        if (!llvm::MachineRegisterInfo::isPhysRegModified(v4, v16 + 256, 0)) {
          return v8;
        }
      }
      uint64_t v8 = (v8 + 1);
    }
    while (v16++ != 1282);
  }
  return 1274;
}

uint64_t sub_1CB84B430(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1[7];
  if ((void *)v3 != a1 + 6)
  {
    int v4 = 0;
    do
    {
      int v5 = *(unsigned __int16 **)(v3 + 16);
      int v6 = *v5;
      if (((v6 - 9) > 0x3C || ((1 << (v6 - 9)) & 0x1000000000000605) == 0)
        && v6 != 0)
      {
        uint64_t v9 = *((void *)v5 + 1);
        if ((v9 & 0x10) == 0)
        {
          if ((*(_WORD *)(v3 + 44) & 0xC) != 0 && (*(_WORD *)(v3 + 44) & 4) == 0)
          {
            uint64_t v11 = v3;
            if ((v9 & 0x400) != 0) {
              goto LABEL_18;
            }
            while ((*(_WORD *)(v11 + 44) & 8) != 0)
            {
              uint64_t v11 = *(void *)(v11 + 8);
              if ((*(unsigned char *)(*(void *)(v11 + 16) + 9) & 4) != 0) {
                goto LABEL_18;
              }
            }
          }
          else if ((v9 & 0x400) != 0)
          {
            goto LABEL_18;
          }
          if ((v5[8] & 1) == 0)
          {
            *a3 = v3;
            return 1;
          }
          if (++v4 > 4) {
            return 1;
          }
        }
      }
LABEL_18:
      if ((*(unsigned char *)v3 & 4) == 0)
      {
        while ((*(_WORD *)(v3 + 44) & 8) != 0)
          uint64_t v3 = *(void *)(v3 + 8);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while ((void *)v3 != a1 + 6);
  }
  uint64_t v12 = (char *)a1[11];
  uint64_t v13 = (char *)a1[12];
  unsigned int v14 = v12;
  if (v12 != v13)
  {
    while (*(void *)v14 != a2)
    {
      v14 += 8;
      if (v14 == v13)
      {
        unsigned int v14 = (char *)a1[12];
        break;
      }
    }
  }
  if (v14 != v13) {
    return 0;
  }
  unsigned int v16 = (void *)a1[8];
  if (((a1[9] - (void)v16) & 0x7FFFFFFF8) == 8
    && (uint64_t v17 = *(void **)(a2 + 64), ((*(void *)(a2 + 72) - (void)v17) & 0x7FFFFFFF8) == 8)
    && *v17 == *v16
    && ((v13 - v12) & 0x7FFFFFFF0) == 0)
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

llvm::MachineFunction *sub_1CB84B588(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4)
{
  int v7 = *(llvm::MachineFunction **)(a1 + 32);
  uint64_t v8 = *a3;
  uint64_t v23 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v23, v8, 2);
  }
  uint64_t v9 = llvm::MachineFunction::CreateMachineInstr(v7, a4, &v23, 0);
  if (v23) {
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  *((void *)v9 + 3) = v10;
  uint64_t v11 = *(void *)(v10 + 32);
  uint64_t v12 = *((unsigned int *)v9 + 10);
  if (v12)
  {
    uint64_t v16 = *((void *)v9 + 4);
    uint64_t v17 = *(void *)(v11 + 40);
    uint64_t v18 = 32 * v12;
    do
    {
      if (!*(unsigned char *)v16)
      {
        uint64_t v19 = *(unsigned int *)(v16 + 4);
        if ((int)v19 >= 0) {
          uint64_t v20 = (uint64_t *)(*(void *)(v17 + 272) + 8 * v19);
        }
        else {
          uint64_t v20 = (uint64_t *)(*(void *)(v17 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
        }
        uint64_t v21 = *v20;
        if (*v20)
        {
          uint64_t v22 = *(void *)(v21 + 16);
          *(void *)(v21 + 16) = v16;
          *(void *)(v16 + 16) = v22;
          if (*(unsigned char *)(v16 + 3))
          {
            *(void *)(v16 + 24) = v21;
          }
          else
          {
            *(void *)(v16 + 24) = 0;
            uint64_t v20 = (uint64_t *)(v22 + 24);
          }
        }
        else
        {
          *(void *)(v16 + 16) = v16;
          *(void *)(v16 + 24) = 0;
        }
        *uint64_t v20 = v16;
      }
      v16 += 32;
      v18 -= 32;
    }
    while (v18);
  }
  uint64_t v13 = *(void *)(v11 + 728);
  if (v13) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v13 + 24))(v13, v9);
  }
  unint64_t v14 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v9 = v14 | *(void *)v9 & 7;
  *((void *)v9 + 1) = a2;
  *(void *)(v14 + 8) = v9;
  *a2 = *a2 & 7 | (unint64_t)v9;
  return v7;
}

llvm::MachineFunction **sub_1CB84B704(llvm::MachineFunction **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  LODWORD(v7) = 1;
  *((void *)&v7 + 1) = 0;
  *(void *)&long long v8 = 0;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)&v7);
  int v5 = *a1;
  int v4 = a1[1];
  long long v7 = 0u;
  long long v8 = 0u;
  llvm::MachineInstr::addOperand(v4, v5, (const llvm::MachineOperand *)&v7);
  return a1;
}

llvm::MachineFunction *sub_1CB84B760(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  long long v7 = *(llvm::MachineFunction **)(a1 + 32);
  long long v8 = *a3;
  uint64_t v11 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v11, v8, 2);
  }
  uint64_t v9 = llvm::MachineFunction::CreateMachineInstr(v7, a4, &v11, 0);
  if (v11) {
    llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
  }
  if (a1 + 48 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0) {
    *((_WORD *)v9 + 22) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(a1 + 40), (uint64_t *)a2, (uint64_t)v9);
  return v7;
}

uint64_t sub_1CB84B820()
{
  return __cxa_atexit((void (*)(void *))llvm::GPUConditionalizer::~GPUConditionalizer, off_1EC7DF9B0, &dword_1CB82C000);
}

void sub_1CB84B844(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB84B8F8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB84B9A4()
{
  return "AGX1 expand pseudo inst pass";
}

uint64_t sub_1CB84B9B4(uint64_t a1, uint64_t a2)
{
  v358[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)a2);
  *(void *)(a1 + 248) = v4;
  *(void *)(a1 + 264) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  *(void *)(a1 + 272) = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 176))(*(void *)(a1 + 248));
  uint64_t v5 = *(void *)(a2 + 48);
  v331 = (void *)a2;
  if (!v5)
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v5;
  }
  *(void *)(a1 + 256) = v5;
  *(void *)(a1 + 280) = *(void *)(a2 + 40);
  int v330 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
  BOOL v6 = (v330 - 102) > 5 || ((1 << ((*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) - 102)) & 0x31) == 0;
  if (v6)
  {
    v332 = (int *)(a1 + 288);
    *(_DWORD *)(a1 + 288) = -1;
    unsigned int v336 = (unsigned char *)(a1 + 292);
    *(unsigned char *)(a1 + 292) = 0;
    uint64_t v258 = *(void *)(a2 + 328);
    if (v258 != a2 + 320)
    {
      char v259 = 0;
      char v260 = 0;
      while (1)
      {
        for (uint64_t i = *(void *)(v258 + 56); i != v258 + 48; uint64_t i = *(void *)(i + 8))
        {
          int v262 = *(unsigned __int16 **)(i + 16);
          int v263 = *v262;
          if ((*((unsigned char *)v262 + 17) & 0x20) != 0 || sub_1CB84E50C(v263)) {
            char v259 = 1;
          }
          v260 |= (v263 & 0xFFFE) == 11972;
          if (v260 & 1) != 0 && (v259)
          {
            char v260 = 1;
            char v259 = 1;
            break;
          }
          if ((*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
        }
        if (v260 & 1) != 0 && (v259) {
          break;
        }
        uint64_t v258 = *(void *)(v258 + 8);
        if (v258 == a2 + 320) {
          goto LABEL_8;
        }
      }
      (***(void (****)(void, void, void, uint64_t, uint64_t))(a2 + 344))(*(void *)(a2 + 344), 0, 0, 1, 1);
      unint64_t v267 = 0;
      uint64_t v268 = *(void *)(a1 + 280);
      unint64_t v269 = *(_DWORD **)(v268 + 456);
      uint64_t v270 = *(_DWORD **)(v268 + 464);
      while (1)
      {
        int v271 = v267 + 1283;
        char v272 = v269;
        if (v270 == v269) {
          break;
        }
        while (*v272 != v271 && v272[1] != v271)
        {
          v272 += 2;
          if (v272 == v270)
          {
            int v273 = v267 + 1027;
            v274 = v269;
            while (*v274 != v273 && v274[1] != v273)
            {
              v274 += 2;
              if (v274 == v270)
              {
                int v275 = v267 | 3;
                uint64_t v276 = v269;
                while (*v276 != v275 && v276[1] != v275)
                {
                  v276 += 2;
                  if (v276 == v270) {
                    goto LABEL_606;
                  }
                }
                goto LABEL_602;
              }
            }
            break;
          }
        }
LABEL_602:
        BOOL v277 = v267 >= 0xFC;
        v267 += 4;
        if (v277)
        {
          LODWORD(v267) = 256;
          goto LABEL_606;
        }
      }
      LODWORD(v267) = 0;
LABEL_606:
      int v278 = v267 & 0xFFFFFFFC;
      do
      {
        char isPhysRegModified = llvm::MachineRegisterInfo::isPhysRegModified(*(void **)(a1 + 280), v278 + 3, 0);
        ++v278;
      }
      while ((isPhysRegModified & 1) != 0);
      int *v332 = v278 + 2;
      *unsigned int v336 = 1;
    }
  }
  else
  {
    v332 = (int *)(a1 + 288);
    *(_DWORD *)(a1 + 288) = -1;
    unsigned int v336 = (unsigned char *)(a1 + 292);
    *(unsigned char *)(a1 + 292) = 0;
  }
LABEL_8:
  char v349 = 1;
  v344 = v348;
  v345 = v348;
  uint64_t v346 = 4;
  int v347 = 0;
  long long v7 = v331 + 40;
  long long v8 = (void *)v331[41];
  if (v8 == v331 + 40) {
    goto LABEL_558;
  }
  int v9 = 0;
  do
  {
    uint64_t v10 = v344;
    if (v345 == v344)
    {
      int v11 = HIDWORD(v346);
      uint64_t v12 = &v345[8 * HIDWORD(v346)];
      if (HIDWORD(v346))
      {
        uint64_t v13 = 0;
        while (*(void **)&v345[v13] != v8)
        {
          v13 += 8;
          if (8 * HIDWORD(v346) == v13) {
            goto LABEL_29;
          }
        }
        uint64_t v12 = &v345[v13];
      }
LABEL_29:
      uint64_t v10 = v345;
    }
    else
    {
      int v14 = v346 - 1;
      unsigned int v15 = (v346 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      uint64_t v12 = &v345[8 * v15];
      uint64_t v16 = *(void **)v12;
      if (*(void *)v12 == -1)
      {
        uint64_t v17 = 0;
LABEL_551:
        if (v17) {
          uint64_t v12 = v17;
        }
        int v11 = HIDWORD(v346);
        if (*(void **)v12 != v8) {
          uint64_t v12 = &v345[8 * v346];
        }
      }
      else
      {
        uint64_t v17 = 0;
        int v18 = 1;
        while (v16 != v8)
        {
          if (v17) {
            BOOL v19 = 0;
          }
          else {
            BOOL v19 = v16 == (void *)-2;
          }
          if (v19) {
            uint64_t v17 = v12;
          }
          unsigned int v20 = v15 + v18++;
          unsigned int v15 = v20 & v14;
          uint64_t v12 = &v345[8 * (v20 & v14)];
          uint64_t v16 = *(void **)v12;
          if (*(void *)v12 == -1) {
            goto LABEL_551;
          }
        }
        int v11 = HIDWORD(v346);
      }
    }
    if (v345 == v10) {
      int v21 = v11;
    }
    else {
      int v21 = v346;
    }
    if (v12 != &v345[8 * v21]) {
      goto LABEL_548;
    }
    int v338 = v9;
    unint64_t v354 = &v356;
    uint64_t v355 = 0x400000000;
    uint64_t v340 = v8;
    unsigned int v342 = v8 + 6;
    uint64_t v22 = v8[7];
    if ((void *)v22 == v8 + 6)
    {
      int v23 = 0;
      goto LABEL_539;
    }
    int v23 = 0;
    uint64_t v24 = 0;
    while (1)
    {
      unsigned int v25 = v24;
      int v26 = *(unsigned __int8 **)(v22 + 56);
      v350 = v26;
      if (v26) {
        llvm::MetadataTracking::track((uint64_t)&v350, v26, 2);
      }
      size_t v27 = a1;
      int v28 = *(_DWORD *)(*(void *)(a1 + 256) + 8);
      uint64_t v29 = *(unsigned __int16 **)(v22 + 16);
      unsigned int v30 = *(void **)(v22 + 24);
      uint64_t v31 = (llvm::MachineFunction *)v30[4];
      uint64_t v32 = *((void *)v29 + 2);
      if (v24)
      {
        uint64_t v34 = *(unsigned int *)(v22 + 40);
        if (!v34) {
          goto LABEL_46;
        }
        BOOL v35 = (_DWORD *)(*(void *)(v22 + 32) + 4);
        while (*((unsigned char *)v35 - 4) || *v35 != 2)
        {
          v35 += 8;
          if (!--v34) {
            goto LABEL_46;
          }
        }
      }
      uint64_t v24 = 0;
LABEL_46:
      unsigned int v36 = *v29;
      if (v36 > 0x2D3B)
      {
        if (*v29 <= 0x3121u)
        {
          if (*v29 > 0x2DCDu)
          {
            if (*v29 <= 0x3099u)
            {
              if (v36 - 11972 < 2)
              {
                if (*v332 != -1)
                {
                  if (*v336)
                  {
                    sub_1CB84E530(v27, (unint64_t *)v22);
                    *(unsigned char *)(v27 + 292) = 0;
                    unsigned int v30 = *(void **)(v22 + 24);
                  }
                  uint64_t v46 = *(void *)(*(void *)(v22 + 32)
                                  + 32 * (llvm::MachineInstr::getNumExplicitOperands(v22) - 3)
                                  + 16);
                  uint64_t v47 = v22;
                  if ((*(unsigned char *)v22 & 4) == 0)
                  {
                    uint64_t v47 = v22;
                    if ((*(_WORD *)(v22 + 44) & 8) != 0)
                    {
                      uint64_t v47 = v22;
                      do
                        uint64_t v47 = *(void *)(v47 + 8);
                      while ((*(_WORD *)(v47 + 44) & 8) != 0);
                    }
                  }
                  uint64_t v48 = *(unint64_t **)(v47 + 8);
                  uint64_t v49 = *(void *)(*(void *)(v27 + 264) + 8);
                  uint64_t v50 = (llvm::MachineFunction *)v30[4];
                  v351 = v350;
                  if (v350) {
                    llvm::MetadataTracking::track((uint64_t)&v351, v350, 2);
                  }
                  unsigned int v51 = llvm::MachineFunction::CreateMachineInstr(v50, v49 + 644640, &v351, 0);
                  if (!v351)
                  {
LABEL_72:
                    uint64_t v52 = v30[5];
                    *((void *)v51 + 3) = v52;
                    uint64_t v53 = *(void *)(v52 + 32);
                    uint64_t v54 = *((unsigned int *)v51 + 10);
                    if (v54)
                    {
                      uint64_t v164 = *((void *)v51 + 4);
                      uint64_t v165 = *(void *)(v53 + 40);
                      uint64_t v166 = 32 * v54;
                      do
                      {
                        if (!*(unsigned char *)v164)
                        {
                          uint64_t v167 = *(unsigned int *)(v164 + 4);
                          if ((int)v167 >= 0) {
                            int v168 = (uint64_t *)(*(void *)(v165 + 272) + 8 * v167);
                          }
                          else {
                            int v168 = (uint64_t *)(*(void *)(v165 + 24) + 16 * (v167 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v169 = *v168;
                          if (*v168)
                          {
                            uint64_t v170 = *(void *)(v169 + 16);
                            *(void *)(v169 + 16) = v164;
                            *(void *)(v164 + 16) = v170;
                            if (*(unsigned char *)(v164 + 3))
                            {
                              *(void *)(v164 + 24) = v169;
                            }
                            else
                            {
                              *(void *)(v164 + 24) = 0;
                              int v168 = (uint64_t *)(v170 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v164 + 16) = v164;
                            *(void *)(v164 + 24) = 0;
                          }
                          *int v168 = v164;
                        }
                        v164 += 32;
                        v166 -= 32;
                      }
                      while (v166);
                    }
                    uint64_t v55 = *(void *)(v53 + 728);
                    if (v55) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v55 + 24))(v55, v51);
                    }
                    unint64_t v56 = *v48 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unsigned int v51 = v56 | *(void *)v51 & 7;
                    *((void *)v51 + 1) = v48;
                    *(void *)(v56 + 8) = v51;
                    *uint64_t v48 = *v48 & 7 | (unint64_t)v51;
                    LODWORD(v352) = 1;
                    *((void *)&v352 + 1) = 0;
                    *(void *)&long long v353 = (int)v46;
                    llvm::MachineInstr::addOperand(v51, v50, (const llvm::MachineOperand *)&v352);
                    uint64_t v57 = *(void *)(v22 + 24);
                    uint64_t v58 = v22;
                    if ((*(unsigned char *)v22 & 4) == 0)
                    {
                      uint64_t v58 = v22;
                      if ((*(_WORD *)(v22 + 44) & 8) != 0)
                      {
                        uint64_t v58 = v22;
                        do
                          uint64_t v58 = *(void *)(v58 + 8);
                        while ((*(_WORD *)(v58 + 44) & 8) != 0);
                      }
                    }
                    unsigned int v59 = *(unint64_t **)(v58 + 8);
                    uint64_t v60 = *(void *)(*(void *)(v27 + 264) + 8);
                    int v61 = *(_DWORD *)(v27 + 288);
                    v62 = *(llvm::MachineFunction **)(v57 + 32);
                    v351 = v350;
                    if (v350) {
                      llvm::MetadataTracking::track((uint64_t)&v351, v350, 2);
                    }
                    int v63 = llvm::MachineFunction::CreateMachineInstr(v62, v60 + 585984, &v351, 0);
                    if (!v351) {
                      goto LABEL_82;
                    }
                    int v222 = *v351;
                    if ((v222 - 4) > 0x1E)
                    {
                      if ((v222 - 3) >= 0xFFFFFFFE) {
                        __int16 v227 = v351;
                      }
                      else {
                        __int16 v227 = 0;
                      }
                      if ((v222 - 3) < 0xFFFFFFFE)
                      {
                        if (v222 == 3) {
                          *((void *)v351 + 1) = 0;
                        }
                        goto LABEL_82;
                      }
                      unint64_t v224 = (unint64_t)(v227 + 8);
                    }
                    else
                    {
                      if ((v351[1] & 0x7F) != 2 && !*((_DWORD *)v351 + 3)) {
                        goto LABEL_82;
                      }
                      uint64_t v223 = *((void *)v351 + 2);
                      if ((v223 & 4) == 0) {
                        goto LABEL_82;
                      }
                      unint64_t v224 = v223 & 0xFFFFFFFFFFFFFFF8;
                      if (!v224) {
                        goto LABEL_82;
                      }
                    }
                    *(void *)&long long v352 = &v351;
                    sub_1CC5FA668(v224 + 16, &v352);
LABEL_82:
                    uint64_t v64 = *(void *)(v57 + 40);
                    *((void *)v63 + 3) = v64;
                    uint64_t v65 = *(void *)(v64 + 32);
                    uint64_t v66 = *((unsigned int *)v63 + 10);
                    a1 = v27;
                    if (v66)
                    {
                      uint64_t v171 = *((void *)v63 + 4);
                      uint64_t v172 = *(void *)(v65 + 40);
                      uint64_t v173 = 32 * v66;
                      do
                      {
                        if (!*(unsigned char *)v171)
                        {
                          uint64_t v174 = *(unsigned int *)(v171 + 4);
                          if ((int)v174 >= 0) {
                            unsigned int v175 = (uint64_t *)(*(void *)(v172 + 272) + 8 * v174);
                          }
                          else {
                            unsigned int v175 = (uint64_t *)(*(void *)(v172 + 24) + 16 * (v174 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v176 = *v175;
                          if (*v175)
                          {
                            uint64_t v177 = *(void *)(v176 + 16);
                            *(void *)(v176 + 16) = v171;
                            *(void *)(v171 + 16) = v177;
                            if (*(unsigned char *)(v171 + 3))
                            {
                              *(void *)(v171 + 24) = v176;
                            }
                            else
                            {
                              *(void *)(v171 + 24) = 0;
                              unsigned int v175 = (uint64_t *)(v177 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v171 + 16) = v171;
                            *(void *)(v171 + 24) = 0;
                          }
                          *unsigned int v175 = v171;
                        }
                        v171 += 32;
                        v173 -= 32;
                      }
                      while (v173);
                    }
                    uint64_t v67 = *(void *)(v65 + 728);
                    if (v67) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v67 + 24))(v67, v63);
                    }
                    unint64_t v68 = *v59 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)int v63 = v68 | *(void *)v63 & 7;
                    *((void *)v63 + 1) = v59;
                    *(void *)(v68 + 8) = v63;
                    *unsigned int v59 = *v59 & 7 | (unint64_t)v63;
                    *((void *)&v352 + 1) = 0;
                    long long v353 = 0uLL;
                    LODWORD(v352) = 0x1000000;
                    DWORD1(v352) = v61;
                    llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v352);
                    LODWORD(v352) = 1;
                    *((void *)&v352 + 1) = 0;
                    *(void *)&long long v353 = (int)v46;
                    llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v352);
                    LODWORD(v352) = 1;
                    *((void *)&v352 + 1) = 0;
                    *(void *)&long long v353 = 0;
                    llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v352);
                    long long v352 = 0u;
                    long long v353 = 0u;
                    llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v352);
                    goto LABEL_163;
                  }
                  int v219 = *v351;
                  if ((v219 - 4) > 0x1E)
                  {
                    if ((v219 - 3) >= 0xFFFFFFFE) {
                      uint64_t v226 = v351;
                    }
                    else {
                      uint64_t v226 = 0;
                    }
                    if ((v219 - 3) < 0xFFFFFFFE)
                    {
                      if (v219 == 3) {
                        *((void *)v351 + 1) = 0;
                      }
                      goto LABEL_72;
                    }
                    unint64_t v221 = (unint64_t)(v226 + 8);
                  }
                  else
                  {
                    if ((v351[1] & 0x7F) != 2 && !*((_DWORD *)v351 + 3)) {
                      goto LABEL_72;
                    }
                    uint64_t v220 = *((void *)v351 + 2);
                    if ((v220 & 4) == 0) {
                      goto LABEL_72;
                    }
                    unint64_t v221 = v220 & 0xFFFFFFFFFFFFFFF8;
                    if (!v221) {
                      goto LABEL_72;
                    }
                  }
                  *(void *)&long long v352 = &v351;
                  sub_1CC5FA668(v221 + 16, &v352);
                  goto LABEL_72;
                }
LABEL_245:
                int v42 = 0;
LABEL_246:
                a1 = v27;
                goto LABEL_269;
              }
              int v75 = 11726;
              goto LABEL_152;
            }
            if (v36 - 12442 <= 0x3F && ((1 << (v36 + 102)) & 0xC02AA49249249249) != 0) {
              goto LABEL_244;
            }
            int v76 = -12514;
            goto LABEL_122;
          }
          if ((v36 - 11644 > 0x3C || ((1 << (v36 - 124)) & 0x1020408102040081) == 0)
            && (v36 - 11580 > 0x39 || ((1 << (v36 - 60)) & 0x204081002040081) == 0))
          {
            int v75 = 11715;
LABEL_152:
            if (v36 != v75) {
              goto LABEL_194;
            }
            goto LABEL_153;
          }
          goto LABEL_153;
        }
        if (*v29 > 0x33DBu)
        {
          if ((v36 - 13276 > 0x35 || ((1 << (v36 + 36)) & 0x20408102040801) == 0) && v36 != 13340)
          {
            int v75 = 13351;
            goto LABEL_152;
          }
LABEL_153:
          a1 = v27;
          if (!*(unsigned char *)(*(void *)(v27 + 248) + 280)) {
            goto LABEL_163;
          }
          if (v22 == v30[7])
          {
            sub_1CB84E8F0((void *)v27, v22, (uint64_t)&v344, &v349);
LABEL_268:
            int v42 = 1;
            goto LABEL_269;
          }
          unint64_t v74 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
          if (!v74 || (*(unsigned char *)v74 & 4) == 0)
          {
            while ((*(_WORD *)(v74 + 44) & 4) != 0)
              unint64_t v74 = *(void *)v74 & 0xFFFFFFFFFFFFFFF8;
          }
          sub_1CB84E8F0((void *)v27, v22, (uint64_t)&v344, &v349);
LABEL_161:
          int v42 = 1;
LABEL_162:
          uint64_t v22 = v74;
          goto LABEL_269;
        }
        if (*v29 > 0x31E5u)
        {
          if (v36 - 13212 > 0x39 || ((1 << (v36 + 100)) & 0x204081020040801) == 0)
          {
            if (v36 - 12774 <= 0x3B && ((1 << (v36 + 26)) & 0xC02B00C0300C02BLL) != 0) {
              goto LABEL_244;
            }
            if (v36 - 12842 > 0x29)
            {
LABEL_194:
              unsigned int v33 = ((*(unsigned __int16 *)(*(void *)v31 + 18) >> 4) & 0x3FF) - 102;
              if (!((v33 > 5) | (0xEu >> v33) & 1) || (v32 & 0x2000) == 0 && !sub_1CB84E50C(v36))
              {
LABEL_348:
                int v42 = 0;
                a1 = v27;
                if (*v336 && (v32 & 1) != 0)
                {
                  sub_1CB84E530(v27, (unint64_t *)v22);
                  int v42 = 0;
                  *(unsigned char *)(v27 + 292) = 0;
                }
                goto LABEL_269;
              }
              int v100 = v29[1];
              uint64_t v101 = (v100 - 2);
              uint64_t v102 = *(void *)(v22 + 32);
              if (*(void *)(v102 + 32 * v101 + 16))
              {
                int v42 = 0;
                uint64_t v24 = v25;
                goto LABEL_246;
              }
              if (v25)
              {
LABEL_341:
                *(void *)(v102 + 32 * v101 + 16) = 3;
                llvm::MachineOperand::setReg(*(void *)(v22 + 32) + 32 * (v100 - 1), 2u);
                unint64_t v185 = *(unsigned int *)(v22 + 40);
                if (v185)
                {
                  uint64_t v186 = 0;
                  for (unint64_t j = 0; j < v185; ++j)
                  {
                    uint64_t v188 = *(void *)(v22 + 32);
                    int v189 = *(_DWORD *)(v188 + v186);
                    if ((v189 & 0x10000FF) == 0x1000000 && *(_DWORD *)(v188 + v186 + 4) == 2)
                    {
                      *(_DWORD *)(v188 + v186) = v189 & 0xFBFFFFFF;
                      unint64_t v185 = *(unsigned int *)(v22 + 40);
                    }
                    v186 += 32;
                  }
                }
                uint64_t v24 = v25;
                goto LABEL_348;
              }
              uint64_t v178 = *(void *)(*(void *)(v27 + 264) + 8);
              v351 = v350;
              if (v350) {
                llvm::MetadataTracking::track((uint64_t)&v351, v350, 2);
              }
              unsigned int v25 = llvm::MachineFunction::CreateMachineInstr(v31, v178 + 239664, &v351, 0);
              if (v351)
              {
                int v248 = *v351;
                if ((v248 - 4) > 0x1E)
                {
                  if ((v248 - 3) >= 0xFFFFFFFE) {
                    unsigned int v251 = v351;
                  }
                  else {
                    unsigned int v251 = 0;
                  }
                  if ((v248 - 3) < 0xFFFFFFFE)
                  {
                    if (v248 == 3) {
                      *((void *)v351 + 1) = 0;
                    }
                    goto LABEL_335;
                  }
                  unint64_t v250 = (unint64_t)(v251 + 8);
                }
                else
                {
                  if ((v351[1] & 0x7F) != 2 && !*((_DWORD *)v351 + 3)) {
                    goto LABEL_335;
                  }
                  uint64_t v249 = *((void *)v351 + 2);
                  if ((v249 & 4) == 0) {
                    goto LABEL_335;
                  }
                  unint64_t v250 = v249 & 0xFFFFFFFFFFFFFFF8;
                  if (!v250) {
                    goto LABEL_335;
                  }
                }
                *(void *)&long long v352 = &v351;
                sub_1CC5FA668(v250 + 16, &v352);
              }
LABEL_335:
              uint64_t v179 = v30[5];
              *((void *)v25 + 3) = v179;
              uint64_t v180 = *(void *)(v179 + 32);
              uint64_t v181 = *((unsigned int *)v25 + 10);
              if (v181)
              {
                uint64_t v205 = *((void *)v25 + 4);
                uint64_t v206 = *(void *)(v180 + 40);
                uint64_t v207 = 32 * v181;
                do
                {
                  if (!*(unsigned char *)v205)
                  {
                    uint64_t v208 = *(unsigned int *)(v205 + 4);
                    if ((int)v208 >= 0) {
                      v209 = (uint64_t *)(*(void *)(v206 + 272) + 8 * v208);
                    }
                    else {
                      v209 = (uint64_t *)(*(void *)(v206 + 24) + 16 * (v208 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v210 = *v209;
                    if (*v209)
                    {
                      uint64_t v211 = *(void *)(v210 + 16);
                      *(void *)(v210 + 16) = v205;
                      *(void *)(v205 + 16) = v211;
                      if (*(unsigned char *)(v205 + 3))
                      {
                        *(void *)(v205 + 24) = v210;
                      }
                      else
                      {
                        *(void *)(v205 + 24) = 0;
                        v209 = (uint64_t *)(v211 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v205 + 16) = v205;
                      *(void *)(v205 + 24) = 0;
                    }
                    uint64_t *v209 = v205;
                  }
                  v205 += 32;
                  v207 -= 32;
                }
                while (v207);
              }
              uint64_t v182 = *(void *)(v180 + 728);
              if (v182) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v182 + 24))(v182, v25);
              }
              unint64_t v183 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
              *(void *)unsigned int v25 = v183 | *(void *)v25 & 7;
              *((void *)v25 + 1) = v22;
              *(void *)(v183 + 8) = v25;
              *(void *)uint64_t v22 = *(void *)v22 & 7 | (unint64_t)v25;
              LODWORD(v352) = 1;
              *((void *)&v352 + 1) = 0;
              *(void *)&long long v353 = 0;
              llvm::MachineInstr::addOperand(v25, v31, (const llvm::MachineOperand *)&v352);
              int v184 = *v332;
              if (*v332 == -1) {
                int v184 = 279;
              }
              *((void *)&v352 + 1) = 0;
              LODWORD(v352) = 0;
              DWORD1(v352) = v184;
              long long v353 = 0uLL;
              llvm::MachineInstr::addOperand(v25, v31, (const llvm::MachineOperand *)&v352);
              LODWORD(v352) = 1;
              *((void *)&v352 + 1) = 0;
              *(void *)&long long v353 = 0;
              llvm::MachineInstr::addOperand(v25, v31, (const llvm::MachineOperand *)&v352);
              LODWORD(v352) = 1;
              *((void *)&v352 + 1) = 0;
              *(void *)&long long v353 = 0;
              llvm::MachineInstr::addOperand(v25, v31, (const llvm::MachineOperand *)&v352);
              long long v353 = 0uLL;
              long long v352 = 0x201000000uLL;
              llvm::MachineInstr::addOperand(v25, v31, (const llvm::MachineOperand *)&v352);
              LODWORD(v352) = 1;
              *((void *)&v352 + 1) = 0;
              *(void *)&long long v353 = 0;
              llvm::MachineInstr::addOperand(v25, v31, (const llvm::MachineOperand *)&v352);
              long long v352 = 0u;
              long long v353 = 0u;
              llvm::MachineInstr::addOperand(v25, v31, (const llvm::MachineOperand *)&v352);
              uint64_t v102 = *(void *)(v22 + 32);
              goto LABEL_341;
            }
            uint64_t v71 = 1 << (v36 - 42);
            uint64_t v72 = 0x2AAAAB00C03;
LABEL_124:
            if ((v71 & v72) != 0) {
              goto LABEL_244;
            }
            goto LABEL_194;
          }
          goto LABEL_153;
        }
        if ((v36 - 12646 > 0x37 || ((1 << (v36 - 102)) & 0xC02AAAAAB00C03) == 0)
          && (v36 - 12578 > 0x3B || ((1 << (v36 - 34)) & 0xC02B00C0300C02BLL) == 0))
        {
          int v76 = -12710;
LABEL_122:
          unsigned int v77 = v36 + v76;
          if (v77 > 0x37) {
            goto LABEL_194;
          }
          uint64_t v71 = 1 << v77;
          uint64_t v72 = 0xC0300C02B00C03;
          goto LABEL_124;
        }
LABEL_244:
        unint64_t v127 = (const llvm::MachineOperand *)(*(void *)(v22 + 32) + 32 * sub_1CD3D2308(v36, 0xFu));
        if ((*((unsigned char *)v127 + 4) & 1) == 0) {
          goto LABEL_245;
        }
        uint64_t v128 = *((void *)v31 + 43);
        int v129 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v128 + 376))(v128, 1);
        (*(void (**)(uint64_t, void))(*(void *)v128 + 328))(v128, 0);
        uint64_t v130 = *(void *)(v22 + 24);
        uint64_t v131 = *(void *)(*(void *)(v27 + 264) + 8);
        uint64_t v132 = *(llvm::MachineFunction **)(v130 + 32);
        uint64_t v133 = *(unsigned __int8 **)(v22 + 56);
        v351 = v133;
        if (v133) {
          llvm::MetadataTracking::track((uint64_t)&v351, v133, 2);
        }
        uint64_t v134 = llvm::MachineFunction::CreateMachineInstr(v132, v131 + 48144, &v351, 0);
        if (v351)
        {
          int v215 = *v351;
          if ((v215 - 4) > 0x1E)
          {
            if ((v215 - 3) >= 0xFFFFFFFE) {
              v225 = v351;
            }
            else {
              v225 = 0;
            }
            if ((v215 - 3) < 0xFFFFFFFE)
            {
              if (v215 == 3) {
                *((void *)v351 + 1) = 0;
              }
              goto LABEL_250;
            }
            unint64_t v217 = (unint64_t)(v225 + 8);
          }
          else
          {
            if ((v351[1] & 0x7F) != 2 && !*((_DWORD *)v351 + 3)) {
              goto LABEL_250;
            }
            uint64_t v216 = *((void *)v351 + 2);
            if ((v216 & 4) == 0) {
              goto LABEL_250;
            }
            unint64_t v217 = v216 & 0xFFFFFFFFFFFFFFF8;
            if (!v217) {
              goto LABEL_250;
            }
          }
          *(void *)&long long v352 = &v351;
          sub_1CC5FA668(v217 + 16, &v352);
        }
LABEL_250:
        uint64_t v135 = *(void *)(v130 + 40);
        *((void *)v134 + 3) = v135;
        uint64_t v136 = *(void *)(v135 + 32);
        uint64_t v137 = *((unsigned int *)v134 + 10);
        if (v137)
        {
          uint64_t v157 = *((void *)v134 + 4);
          uint64_t v158 = *(void *)(v136 + 40);
          uint64_t v159 = 32 * v137;
          do
          {
            if (!*(unsigned char *)v157)
            {
              uint64_t v160 = *(unsigned int *)(v157 + 4);
              if ((int)v160 >= 0) {
                uint64_t v161 = (uint64_t *)(*(void *)(v158 + 272) + 8 * v160);
              }
              else {
                uint64_t v161 = (uint64_t *)(*(void *)(v158 + 24) + 16 * (v160 & 0x7FFFFFFF) + 8);
              }
              uint64_t v162 = *v161;
              if (*v161)
              {
                uint64_t v163 = *(void *)(v162 + 16);
                *(void *)(v162 + 16) = v157;
                *(void *)(v157 + 16) = v163;
                if (*(unsigned char *)(v157 + 3))
                {
                  *(void *)(v157 + 24) = v162;
                }
                else
                {
                  *(void *)(v157 + 24) = 0;
                  uint64_t v161 = (uint64_t *)(v163 + 24);
                }
              }
              else
              {
                *(void *)(v157 + 16) = v157;
                *(void *)(v157 + 24) = 0;
              }
              *uint64_t v161 = v157;
            }
            v157 += 32;
            v159 -= 32;
          }
          while (v159);
        }
        uint64_t v138 = *(void *)(v136 + 728);
        if (v138) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v138 + 24))(v138, v134);
        }
        int v139 = 2 * v129;
        unint64_t v140 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v134 = v140 | *(void *)v134 & 7;
        *((void *)v134 + 1) = v22;
        *(void *)(v140 + 8) = v134;
        *(void *)uint64_t v22 = *(void *)v22 & 7 | (unint64_t)v134;
        HIDWORD(v352) = 0;
        LODWORD(v353) = 64;
        DWORD2(v353) = 0;
        LODWORD(v352) = 519;
        *(void *)((char *)&v352 + 4) = (2 * v129);
        llvm::MachineInstr::addOperand(v134, v132, (const llvm::MachineOperand *)&v352);
        LODWORD(v352) = 1;
        *((void *)&v352 + 1) = 0;
        *(void *)&long long v353 = 0;
        llvm::MachineInstr::addOperand(v134, v132, (const llvm::MachineOperand *)&v352);
        llvm::MachineInstr::addOperand(v134, v132, v127);
        LODWORD(v352) = 1;
        *((void *)&v352 + 1) = 0;
        *(void *)&long long v353 = 0;
        llvm::MachineInstr::addOperand(v134, v132, (const llvm::MachineOperand *)&v352);
        llvm::MachineInstr::addOperand(v134, v132, v127);
        LODWORD(v352) = 1;
        *((void *)&v352 + 1) = 0;
        *(void *)&long long v353 = 0;
        llvm::MachineInstr::addOperand(v134, v132, (const llvm::MachineOperand *)&v352);
        llvm::MachineInstr::addOperand(v134, v132, v127);
        LODWORD(v352) = 1;
        *((void *)&v352 + 1) = 0;
        *(void *)&long long v353 = 0;
        llvm::MachineInstr::addOperand(v134, v132, (const llvm::MachineOperand *)&v352);
        llvm::MachineInstr::addOperand(v134, v132, v127);
        LODWORD(v352) = 1;
        *((void *)&v352 + 1) = 0;
        *(void *)&long long v353 = 0;
        llvm::MachineInstr::addOperand(v134, v132, (const llvm::MachineOperand *)&v352);
        long long v352 = 0u;
        long long v353 = 0u;
        llvm::MachineInstr::addOperand(v134, v132, (const llvm::MachineOperand *)&v352);
        LODWORD(v352) = 1;
        *((void *)&v352 + 1) = 0;
        *(void *)&long long v353 = 0;
        llvm::MachineInstr::addOperand(v134, v132, (const llvm::MachineOperand *)&v352);
        long long v352 = 0u;
        long long v353 = 0u;
        llvm::MachineInstr::addOperand(v134, v132, (const llvm::MachineOperand *)&v352);
        uint64_t v141 = *(void *)(v22 + 32);
        int v142 = *(_DWORD *)(v141 + 160);
        if ((_BYTE)v142)
        {
          a1 = v27;
        }
        else
        {
          uint64_t v143 = *(void *)(v141 + 176);
          a1 = v27;
          if (v143)
          {
            uint64_t v144 = *(void *)(v141 + 168);
            if (v144)
            {
              uint64_t v145 = *(void *)(v144 + 24);
              if (v145)
              {
                uint64_t v146 = *(void *)(v145 + 32);
                if (v146)
                {
                  uint64_t v147 = *(void *)(v146 + 40);
                  uint64_t v148 = *(unsigned int *)(v141 + 164);
                  if ((v148 & 0x80000000) != 0) {
                    unint64_t v149 = (void *)(*(void *)(v147 + 24) + 16 * (v148 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    unint64_t v149 = (void *)(*(void *)(v147 + 272) + 8 * v148);
                  }
                  uint64_t v150 = *v149;
                  uint64_t v151 = *(void *)(v141 + 184);
                  if (*v149 == v141 + 160) {
                    int v152 = v149;
                  }
                  else {
                    int v152 = (void *)(v143 + 24);
                  }
                  void *v152 = v151;
                  if (v151) {
                    uint64_t v153 = v151;
                  }
                  else {
                    uint64_t v153 = v150;
                  }
                  *(void *)(v153 + 16) = v143;
                  *(void *)(v141 + 176) = 0;
                  *(void *)(v141 + 184) = 0;
                  int v142 = *(_DWORD *)(v141 + 160);
                }
              }
            }
          }
        }
        *(_DWORD *)(v141 + 176) = 64;
        *(_DWORD *)(v141 + 184) = 0;
        *(_DWORD *)(v141 + 160) = v142 & 0xFFF00000 | 0x207;
        *(_DWORD *)(v141 + 164) = v139;
        goto LABEL_268;
      }
      if (*v29 <= 0x2C1u)
      {
        switch(*v29)
        {
          case 0x106u:
          case 0x107u:
            if (v22 == v30[7])
            {
              a1 = v27;
              sub_1CB850030((void *)v27, v22, (size_t)&v354, (uint64_t)&v344, &v349, 0, 0);
              goto LABEL_268;
            }
            unint64_t v74 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
            a1 = v27;
            if (!v74 || (*(unsigned char *)v74 & 4) == 0)
            {
              while ((*(_WORD *)(v74 + 44) & 4) != 0)
                unint64_t v74 = *(void *)v74 & 0xFFFFFFFFFFFFFFF8;
            }
            sub_1CB850030((void *)v27, v22, (size_t)&v354, (uint64_t)&v344, &v349, 0, 0);
            goto LABEL_161;
          case 0x108u:
            if (v22 == v30[7])
            {
              int v42 = 1;
              a1 = v27;
              unint64_t v43 = (void *)v27;
              uint64_t v44 = v22;
              uint64_t v45 = 0;
              goto LABEL_57;
            }
            unint64_t v74 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
            a1 = v27;
            if (!v74 || (*(unsigned char *)v74 & 4) == 0)
            {
              while ((*(_WORD *)(v74 + 44) & 4) != 0)
                unint64_t v74 = *(void *)v74 & 0xFFFFFFFFFFFFFFF8;
            }
            int v42 = 1;
            sub_1CB850030((void *)v27, v22, (size_t)&v354, (uint64_t)&v344, &v349, 1, 0);
            goto LABEL_162;
          case 0x109u:
          case 0x10Au:
          case 0x123u:
          case 0x124u:
          case 0x125u:
          case 0x126u:
          case 0x127u:
          case 0x128u:
          case 0x129u:
          case 0x12Au:
          case 0x12Bu:
          case 0x12Cu:
          case 0x12Du:
          case 0x12Eu:
          case 0x12Fu:
          case 0x130u:
          case 0x131u:
          case 0x132u:
          case 0x133u:
          case 0x134u:
          case 0x135u:
          case 0x136u:
          case 0x137u:
            goto LABEL_194;
          case 0x10Bu:
          case 0x10Cu:
          case 0x10Du:
          case 0x10Eu:
          case 0x10Fu:
          case 0x110u:
          case 0x111u:
          case 0x112u:
          case 0x113u:
          case 0x114u:
          case 0x115u:
          case 0x116u:
          case 0x117u:
          case 0x118u:
          case 0x119u:
          case 0x11Au:
          case 0x11Bu:
          case 0x11Cu:
          case 0x11Du:
          case 0x11Eu:
          case 0x11Fu:
          case 0x120u:
          case 0x121u:
          case 0x122u:
            unsigned __int16 v37 = v36 - 267;
            if (v36 - 267 >= 0x18) {
              llvm::llvm_unreachable_internal((llvm *)"Unexpected OpCode", 0, 0);
            }
            a1 = v27;
            uint64_t v38 = *(void *)(*(void *)(v27 + 264) + 8);
            v351 = v350;
            if (v350) {
              llvm::MetadataTracking::track((uint64_t)&v351, v350, 2);
            }
            BOOL v39 = llvm::MachineFunction::CreateMachineInstr(v31, v38 + 48 * (v37 + 3745), &v351, 0);
            if (!v351) {
              goto LABEL_53;
            }
            int v212 = *v351;
            if ((v212 - 4) > 0x1E)
            {
              if ((v212 - 3) >= 0xFFFFFFFE) {
                uint64_t v218 = v351;
              }
              else {
                uint64_t v218 = 0;
              }
              if ((v212 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v214 = (unint64_t)(v218 + 8);
LABEL_414:
                *(void *)&long long v352 = &v351;
                sub_1CC5FA668(v214 + 16, &v352);
                a1 = v27;
                goto LABEL_53;
              }
              a1 = v27;
              if (v212 == 3) {
                *((void *)v351 + 1) = 0;
              }
            }
            else
            {
              a1 = v27;
              if ((v351[1] & 0x7F) == 2 || *((_DWORD *)v351 + 3))
              {
                uint64_t v213 = *((void *)v351 + 2);
                if ((v213 & 4) != 0)
                {
                  unint64_t v214 = v213 & 0xFFFFFFFFFFFFFFF8;
                  if (v214) {
                    goto LABEL_414;
                  }
                }
              }
            }
LABEL_53:
            if (*(int *)(v22 + 40) >= 6)
            {
              uint64_t v40 = 160;
              uint64_t v41 = 5;
              do
              {
                llvm::MachineInstr::addOperand(v39, v31, (const llvm::MachineOperand *)(*(void *)(v22 + 32) + v40));
                ++v41;
                v40 += 32;
              }
              while (v41 < *(int *)(v22 + 40));
            }
            int v42 = 1;
            unint64_t v43 = (void *)a1;
            uint64_t v44 = v22;
            uint64_t v45 = (uint64_t)v39;
LABEL_57:
            sub_1CB850030(v43, v44, (size_t)&v354, (uint64_t)&v344, &v349, 1, v45);
            goto LABEL_269;
          case 0x138u:
            int v119 = *(_DWORD *)(*(void *)(v22 + 32) + 4);
            a1 = v27;
            uint64_t v120 = *(void *)(*(void *)(v27 + 264) + 8);
            v351 = v350;
            if (v350) {
              llvm::MetadataTracking::track((uint64_t)&v351, v350, 2);
            }
            unsigned int v121 = llvm::MachineFunction::CreateMachineInstr(v31, v120 + 66288, &v351, 0);
            if (!v351) {
              goto LABEL_238;
            }
            int v228 = *v351;
            if ((v228 - 4) > 0x1E)
            {
              if ((v228 - 3) >= 0xFFFFFFFE) {
                long long v243 = v351;
              }
              else {
                long long v243 = 0;
              }
              if ((v228 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v230 = (unint64_t)(v243 + 8);
LABEL_488:
                *(void *)&long long v352 = &v351;
                sub_1CC5FA668(v230 + 16, &v352);
                a1 = v27;
                goto LABEL_238;
              }
              a1 = v27;
              if (v228 == 3) {
                *((void *)v351 + 1) = 0;
              }
            }
            else
            {
              a1 = v27;
              if ((v351[1] & 0x7F) == 2 || *((_DWORD *)v351 + 3))
              {
                uint64_t v229 = *((void *)v351 + 2);
                if ((v229 & 4) != 0)
                {
                  unint64_t v230 = v229 & 0xFFFFFFFFFFFFFFF8;
                  if (v230) {
                    goto LABEL_488;
                  }
                }
              }
            }
LABEL_238:
            uint64_t v122 = v30[5];
            *((void *)v121 + 3) = v122;
            uint64_t v123 = *(void *)(v122 + 32);
            uint64_t v124 = *((unsigned int *)v121 + 10);
            if (v124)
            {
              uint64_t v190 = *((void *)v121 + 4);
              uint64_t v191 = *(void *)(v123 + 40);
              uint64_t v192 = 32 * v124;
              do
              {
                if (!*(unsigned char *)v190)
                {
                  uint64_t v193 = *(unsigned int *)(v190 + 4);
                  if ((int)v193 >= 0) {
                    uint64_t v194 = (uint64_t *)(*(void *)(v191 + 272) + 8 * v193);
                  }
                  else {
                    uint64_t v194 = (uint64_t *)(*(void *)(v191 + 24) + 16 * (v193 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v195 = *v194;
                  if (*v194)
                  {
                    uint64_t v196 = *(void *)(v195 + 16);
                    *(void *)(v195 + 16) = v190;
                    *(void *)(v190 + 16) = v196;
                    if (*(unsigned char *)(v190 + 3))
                    {
                      *(void *)(v190 + 24) = v195;
                    }
                    else
                    {
                      *(void *)(v190 + 24) = 0;
                      uint64_t v194 = (uint64_t *)(v196 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v190 + 16) = v190;
                    *(void *)(v190 + 24) = 0;
                  }
                  uint64_t *v194 = v190;
                }
                v190 += 32;
                v192 -= 32;
              }
              while (v192);
            }
            uint64_t v125 = *(void *)(v123 + 728);
            if (v125) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v125 + 24))(v125, v121);
            }
            unint64_t v126 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unsigned int v121 = v126 | *(void *)v121 & 7;
            *((void *)v121 + 1) = v22;
            *(void *)(v126 + 8) = v121;
            *(void *)uint64_t v22 = *(void *)v22 & 7 | (unint64_t)v121;
            long long v353 = 0uLL;
            long long v352 = 0x10701000000uLL;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            LODWORD(v352) = 1;
            *((void *)&v352 + 1) = 0;
            *(void *)&long long v353 = 0;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            *((void *)&v352 + 1) = 0;
            LODWORD(v352) = 0;
            DWORD1(v352) = v119;
            long long v353 = 0uLL;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            LODWORD(v352) = 1;
            *((void *)&v352 + 1) = 0;
            *(void *)&long long v353 = 0;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            *((void *)&v352 + 1) = 0;
            LODWORD(v352) = 0;
            DWORD1(v352) = v119;
            long long v353 = 0uLL;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            LODWORD(v352) = 1;
            *((void *)&v352 + 1) = 0;
            *(void *)&long long v353 = 0;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            *((void *)&v352 + 1) = 0;
            LODWORD(v352) = 0;
            DWORD1(v352) = v119;
            long long v353 = 0uLL;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            LODWORD(v352) = 1;
            *((void *)&v352 + 1) = 0;
            *(void *)&long long v353 = 0;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            long long v352 = 0u;
            long long v353 = 0u;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            LODWORD(v352) = 1;
            *((void *)&v352 + 1) = 0;
            *(void *)&long long v353 = 0;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            long long v352 = 0u;
            long long v353 = 0u;
            llvm::MachineInstr::addOperand(v121, v31, (const llvm::MachineOperand *)&v352);
            uint64_t v118 = v355;
            if (v355 >= (unint64_t)HIDWORD(v355)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            goto LABEL_242;
          case 0x139u:
            if (v355 >= (unint64_t)HIDWORD(v355)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v42 = 0;
            *((void *)v354 + v355) = v22;
            LODWORD(v355) = v355 + 1;
            goto LABEL_246;
          default:
            if (v36 != 690) {
              goto LABEL_194;
            }
            if (v349) {
              goto LABEL_245;
            }
            uint64_t v90 = *(void *)(*(void *)(v27 + 264) + 8);
            v351 = v350;
            if (v350) {
              llvm::MetadataTracking::track((uint64_t)&v351, v350, 2);
            }
            long long v79 = llvm::MachineFunction::CreateMachineInstr(v31, v90 + 32928, &v351, 0);
            if (!v351) {
              goto LABEL_180;
            }
            int v240 = *v351;
            if ((v240 - 4) > 0x1E)
            {
              if ((v240 - 3) >= 0xFFFFFFFE) {
                unsigned int v247 = v351;
              }
              else {
                unsigned int v247 = 0;
              }
              if ((v240 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v242 = (unint64_t)(v247 + 8);
LABEL_514:
                *(void *)&long long v352 = &v351;
                sub_1CC5FA668(v242 + 16, &v352);
                goto LABEL_180;
              }
              if (v240 == 3) {
                *((void *)v351 + 1) = 0;
              }
            }
            else if ((v351[1] & 0x7F) == 2 || *((_DWORD *)v351 + 3))
            {
              uint64_t v241 = *((void *)v351 + 2);
              if ((v241 & 4) != 0)
              {
                unint64_t v242 = v241 & 0xFFFFFFFFFFFFFFF8;
                if (v242) {
                  goto LABEL_514;
                }
              }
            }
LABEL_180:
            uint64_t v91 = v30[5];
            *((void *)v79 + 3) = v91;
            uint64_t v81 = *(void *)(v91 + 32);
            uint64_t v92 = *((unsigned int *)v79 + 10);
            if (v92)
            {
              uint64_t v93 = *((void *)v79 + 4);
              uint64_t v94 = *(void *)(v81 + 40);
              uint64_t v95 = 32 * v92;
              do
              {
                if (!*(unsigned char *)v93)
                {
                  uint64_t v96 = *(unsigned int *)(v93 + 4);
                  if ((int)v96 >= 0) {
                    uint64_t v97 = (uint64_t *)(*(void *)(v94 + 272) + 8 * v96);
                  }
                  else {
                    uint64_t v97 = (uint64_t *)(*(void *)(v94 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v98 = *v97;
                  if (*v97)
                  {
                    uint64_t v99 = *(void *)(v98 + 16);
                    *(void *)(v98 + 16) = v93;
                    *(void *)(v93 + 16) = v99;
                    if (*(unsigned char *)(v93 + 3))
                    {
                      *(void *)(v93 + 24) = v98;
                    }
                    else
                    {
                      *(void *)(v93 + 24) = 0;
                      uint64_t v97 = (uint64_t *)(v99 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v93 + 16) = v93;
                    *(void *)(v93 + 24) = 0;
                  }
                  *uint64_t v97 = v93;
                }
                v93 += 32;
                v95 -= 32;
              }
              while (v95);
            }
            break;
        }
        goto LABEL_222;
      }
      if (*v29 > 0x9C9u)
      {
        if (v36 - 2506 > 0x13) {
          goto LABEL_194;
        }
        a1 = v27;
        if (((1 << (v36 + 54)) & 0x55555) != 0)
        {
          uint64_t v69 = *(void *)(v27 + 248);
          if (*(unsigned char *)(v69 + 287)) {
            BOOL v70 = *(unsigned __int8 *)(v69 + 288) == 0;
          }
          else {
            BOOL v70 = 0;
          }
          (*(void (**)(void, uint64_t, BOOL, uint64_t, void, uint64_t, uint64_t))(**((void **)v31 + 43)
                                                                                             + 8))(*((void *)v31 + 43), 36, v70, 1, 0, 1, 2);
LABEL_163:
          int v42 = 0;
          goto LABEL_269;
        }
        uint64_t v73 = *(void *)(v27 + 248);
        if (!*(unsigned char *)(v73 + 287) || !*(unsigned char *)(v73 + 288)) {
          goto LABEL_163;
        }
        if (v22 == v30[7])
        {
          sub_1CB856134(v27, v22, (uint64_t)&v344, &v349);
          goto LABEL_268;
        }
        unint64_t v74 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
        if (!v74 || (*(unsigned char *)v74 & 4) == 0)
        {
          while ((*(_WORD *)(v74 + 44) & 4) != 0)
            unint64_t v74 = *(void *)v74 & 0xFFFFFFFFFFFFFFF8;
        }
        sub_1CB856134(v27, v22, (uint64_t)&v344, &v349);
        goto LABEL_161;
      }
      if (v36 != 706)
      {
        if (v36 != 722)
        {
          if (v36 != 738) {
            goto LABEL_194;
          }
          if (v349) {
            goto LABEL_245;
          }
          uint64_t v78 = *(void *)(*(void *)(v27 + 264) + 8);
          v351 = v350;
          if (v350) {
            llvm::MetadataTracking::track((uint64_t)&v351, v350, 2);
          }
          long long v79 = llvm::MachineFunction::CreateMachineInstr(v31, v78 + 35232, &v351, 0);
          if (!v351) {
            goto LABEL_137;
          }
          int v231 = *v351;
          if ((v231 - 4) > 0x1E)
          {
            if ((v231 - 3) >= 0xFFFFFFFE) {
              char v244 = v351;
            }
            else {
              char v244 = 0;
            }
            if ((v231 - 3) < 0xFFFFFFFE)
            {
              if (v231 == 3) {
                *((void *)v351 + 1) = 0;
              }
              goto LABEL_137;
            }
            unint64_t v233 = (unint64_t)(v244 + 8);
          }
          else if ((v351[1] & 0x7F) != 2 && !*((_DWORD *)v351 + 3) {
                 || (uint64_t v232 = *((void *)v351 + 2), (v232 & 4) == 0)
          }
                 || (unint64_t v233 = v232 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
LABEL_137:
            uint64_t v80 = v30[5];
            *((void *)v79 + 3) = v80;
            uint64_t v81 = *(void *)(v80 + 32);
            uint64_t v82 = *((unsigned int *)v79 + 10);
            if (v82)
            {
              uint64_t v83 = *((void *)v79 + 4);
              uint64_t v84 = *(void *)(v81 + 40);
              uint64_t v85 = 32 * v82;
              do
              {
                if (!*(unsigned char *)v83)
                {
                  uint64_t v86 = *(unsigned int *)(v83 + 4);
                  if ((int)v86 >= 0) {
                    uint64_t v87 = (uint64_t *)(*(void *)(v84 + 272) + 8 * v86);
                  }
                  else {
                    uint64_t v87 = (uint64_t *)(*(void *)(v84 + 24) + 16 * (v86 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v88 = *v87;
                  if (*v87)
                  {
                    uint64_t v89 = *(void *)(v88 + 16);
                    *(void *)(v88 + 16) = v83;
                    *(void *)(v83 + 16) = v89;
                    if (*(unsigned char *)(v83 + 3))
                    {
                      *(void *)(v83 + 24) = v88;
                    }
                    else
                    {
                      *(void *)(v83 + 24) = 0;
                      uint64_t v87 = (uint64_t *)(v89 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v83 + 16) = v83;
                    *(void *)(v83 + 24) = 0;
                  }
                  *uint64_t v87 = v83;
                }
                v83 += 32;
                v85 -= 32;
              }
              while (v85);
            }
            goto LABEL_222;
          }
          *(void *)&long long v352 = &v351;
          sub_1CC5FA668(v233 + 16, &v352);
          goto LABEL_137;
        }
        if (v349) {
          goto LABEL_245;
        }
        uint64_t v113 = *(void *)(*(void *)(v27 + 264) + 8);
        v351 = v350;
        if (v350) {
          llvm::MetadataTracking::track((uint64_t)&v351, v350, 2);
        }
        long long v79 = llvm::MachineFunction::CreateMachineInstr(v31, v113 + 34464, &v351, 0);
        if (!v351) {
          goto LABEL_221;
        }
        int v237 = *v351;
        if ((v237 - 4) > 0x1E)
        {
          if ((v237 - 3) >= 0xFFFFFFFE) {
            int32x2_t v246 = v351;
          }
          else {
            int32x2_t v246 = 0;
          }
          if ((v237 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v239 = (unint64_t)(v246 + 8);
            goto LABEL_508;
          }
          if (v237 == 3) {
            *((void *)v351 + 1) = 0;
          }
        }
        else if ((v351[1] & 0x7F) == 2 || *((_DWORD *)v351 + 3))
        {
          uint64_t v238 = *((void *)v351 + 2);
          if ((v238 & 4) != 0)
          {
            unint64_t v239 = v238 & 0xFFFFFFFFFFFFFFF8;
            if (v239)
            {
LABEL_508:
              *(void *)&long long v352 = &v351;
              sub_1CC5FA668(v239 + 16, &v352);
            }
          }
        }
LABEL_221:
        uint64_t v114 = v30[5];
        *((void *)v79 + 3) = v114;
        uint64_t v81 = *(void *)(v114 + 32);
        uint64_t v115 = *((unsigned int *)v79 + 10);
        if (v115)
        {
          uint64_t v197 = *((void *)v79 + 4);
          uint64_t v198 = *(void *)(v81 + 40);
          uint64_t v199 = 32 * v115;
          do
          {
            if (!*(unsigned char *)v197)
            {
              uint64_t v200 = *(unsigned int *)(v197 + 4);
              if ((int)v200 >= 0) {
                v201 = (uint64_t *)(*(void *)(v198 + 272) + 8 * v200);
              }
              else {
                v201 = (uint64_t *)(*(void *)(v198 + 24) + 16 * (v200 & 0x7FFFFFFF) + 8);
              }
              uint64_t v202 = *v201;
              if (*v201)
              {
                uint64_t v203 = *(void *)(v202 + 16);
                *(void *)(v202 + 16) = v197;
                *(void *)(v197 + 16) = v203;
                if (*(unsigned char *)(v197 + 3))
                {
                  *(void *)(v197 + 24) = v202;
                }
                else
                {
                  *(void *)(v197 + 24) = 0;
                  v201 = (uint64_t *)(v203 + 24);
                }
              }
              else
              {
                *(void *)(v197 + 16) = v197;
                *(void *)(v197 + 24) = 0;
              }
              uint64_t *v201 = v197;
            }
            v197 += 32;
            v199 -= 32;
          }
          while (v199);
        }
        goto LABEL_222;
      }
      if (v349) {
        goto LABEL_245;
      }
      uint64_t v103 = *(void *)(*(void *)(v27 + 264) + 8);
      v351 = v350;
      if (v350) {
        llvm::MetadataTracking::track((uint64_t)&v351, v350, 2);
      }
      long long v79 = llvm::MachineFunction::CreateMachineInstr(v31, v103 + 33696, &v351, 0);
      if (v351)
      {
        int v234 = *v351;
        if ((v234 - 4) > 0x1E)
        {
          if ((v234 - 3) >= 0xFFFFFFFE) {
            uint64_t v245 = v351;
          }
          else {
            uint64_t v245 = 0;
          }
          if ((v234 - 3) < 0xFFFFFFFE)
          {
            if (v234 == 3) {
              *((void *)v351 + 1) = 0;
            }
            goto LABEL_203;
          }
          unint64_t v236 = (unint64_t)(v245 + 8);
LABEL_502:
          *(void *)&long long v352 = &v351;
          sub_1CC5FA668(v236 + 16, &v352);
          goto LABEL_203;
        }
        if ((v351[1] & 0x7F) == 2 || *((_DWORD *)v351 + 3))
        {
          uint64_t v235 = *((void *)v351 + 2);
          if ((v235 & 4) != 0)
          {
            unint64_t v236 = v235 & 0xFFFFFFFFFFFFFFF8;
            if (v236) {
              goto LABEL_502;
            }
          }
        }
      }
LABEL_203:
      uint64_t v104 = v30[5];
      *((void *)v79 + 3) = v104;
      uint64_t v81 = *(void *)(v104 + 32);
      uint64_t v105 = *((unsigned int *)v79 + 10);
      if (v105)
      {
        uint64_t v106 = *((void *)v79 + 4);
        uint64_t v107 = *(void *)(v81 + 40);
        uint64_t v108 = 32 * v105;
        do
        {
          if (!*(unsigned char *)v106)
          {
            uint64_t v109 = *(unsigned int *)(v106 + 4);
            if ((int)v109 >= 0) {
              uint64_t v110 = (uint64_t *)(*(void *)(v107 + 272) + 8 * v109);
            }
            else {
              uint64_t v110 = (uint64_t *)(*(void *)(v107 + 24) + 16 * (v109 & 0x7FFFFFFF) + 8);
            }
            uint64_t v111 = *v110;
            if (*v110)
            {
              uint64_t v112 = *(void *)(v111 + 16);
              *(void *)(v111 + 16) = v106;
              *(void *)(v106 + 16) = v112;
              if (*(unsigned char *)(v106 + 3))
              {
                *(void *)(v106 + 24) = v111;
              }
              else
              {
                *(void *)(v106 + 24) = 0;
                uint64_t v110 = (uint64_t *)(v112 + 24);
              }
            }
            else
            {
              *(void *)(v106 + 16) = v106;
              *(void *)(v106 + 24) = 0;
            }
            *uint64_t v110 = v106;
          }
          v106 += 32;
          v108 -= 32;
        }
        while (v108);
      }
LABEL_222:
      uint64_t v116 = *(void *)(v81 + 728);
      if (v116) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v116 + 24))(v116, v79);
      }
      unint64_t v117 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
      *(void *)long long v79 = v117 | *(void *)v79 & 7;
      *((void *)v79 + 1) = v22;
      *(void *)(v117 + 8) = v79;
      *(void *)uint64_t v22 = *(void *)v22 & 7 | (unint64_t)v79;
      llvm::MachineInstr::addOperand(v79, v31, *(const llvm::MachineOperand **)(v22 + 32));
      llvm::MachineInstr::addOperand(v79, v31, (const llvm::MachineOperand *)(*(void *)(v22 + 32) + 32));
      *((void *)&v352 + 1) = 0;
      LODWORD(v352) = 0;
      DWORD1(v352) = v28;
      long long v353 = 0uLL;
      llvm::MachineInstr::addOperand(v79, v31, (const llvm::MachineOperand *)&v352);
      LODWORD(v352) = 1;
      *((void *)&v352 + 1) = 0;
      *(void *)&long long v353 = 0;
      llvm::MachineInstr::addOperand(v79, v31, (const llvm::MachineOperand *)&v352);
      llvm::MachineInstr::addOperand(v79, v31, (const llvm::MachineOperand *)(*(void *)(v22 + 32) + 96));
      llvm::MachineInstr::addOperand(v79, v31, (const llvm::MachineOperand *)(*(void *)(v22 + 32) + 128));
      llvm::MachineInstr::addOperand(v79, v31, (const llvm::MachineOperand *)(*(void *)(v22 + 32) + 160));
      uint64_t v118 = v355;
      if (v355 >= (unint64_t)HIDWORD(v355)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      a1 = v27;
LABEL_242:
      int v42 = 0;
      *((void *)v354 + v118) = v22;
      LODWORD(v355) = v355 + 1;
LABEL_269:
      if (!v350) {
        goto LABEL_273;
      }
      int v154 = *v350;
      if ((v154 - 4) > 0x1E)
      {
        if ((v154 - 3) >= 0xFFFFFFFE) {
          int v155 = v350;
        }
        else {
          int v155 = 0;
        }
        if ((v154 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v156 = (unint64_t)(v155 + 8);
LABEL_286:
          *(void *)&long long v352 = &v350;
          sub_1CC5FA668(v156 + 16, &v352);
          goto LABEL_273;
        }
        if (v154 == 3) {
          *((void *)v350 + 1) = 0;
        }
      }
      else if ((v350[1] & 0x7F) == 2 || *((_DWORD *)v350 + 3))
      {
        uint64_t v204 = *((void *)v350 + 2);
        if ((v204 & 4) != 0)
        {
          unint64_t v156 = v204 & 0xFFFFFFFFFFFFFFF8;
          if (v156) {
            goto LABEL_286;
          }
        }
      }
LABEL_273:
      if (v42) {
        break;
      }
      if (!v22 || (*(unsigned char *)v22 & 4) == 0)
      {
        while ((*(_WORD *)(v22 + 44) & 8) != 0)
          uint64_t v22 = *(void *)(v22 + 8);
      }
      v23 |= v42;
      uint64_t v22 = *(void *)(v22 + 8);
      if ((unint64_t *)v22 == v342) {
        goto LABEL_539;
      }
    }
    int v23 = 1;
LABEL_539:
    if (*v336)
    {
      sub_1CB84E530(a1, v342);
      *(unsigned char *)(a1 + 292) = 0;
    }
    uint64_t v252 = (llvm::MachineInstr **)v354;
    if (v355)
    {
      uint64_t v253 = 8 * v355;
      do
      {
        long long v254 = *v252++;
        llvm::MachineInstr::eraseFromParent(v254);
        v253 -= 8;
      }
      while (v253);
      uint64_t v252 = (llvm::MachineInstr **)v354;
    }
    if (v252 != (llvm::MachineInstr **)&v356) {
      free(v252);
    }
    int v9 = v338 | v23;
    long long v7 = v331 + 40;
    long long v8 = v340;
LABEL_548:
    long long v8 = (void *)v8[1];
  }
  while (v8 != v7);
  if (v9)
  {
    uint64_t v255 = *(void **)(**(void **)(a1 + 280) + 360);
    *v255 &= ~4uLL;
    uint64_t v256 = 1;
    goto LABEL_559;
  }
LABEL_558:
  uint64_t v256 = 0;
LABEL_559:
  if ((v330 - 100) <= 7 && ((1 << (v330 - 100)) & 0xC5) != 0
    || !*(unsigned char *)(*(void *)(a1 + 248) + 297)
    || (*(_WORD *)(*v331 + 18) & 0x3FF0) == 0x690)
  {
    goto LABEL_561;
  }
  unint64_t v264 = (llvm::MachineBasicBlock *)v331[40];
  v265 = (llvm::MachineBasicBlock *)v331[41];
  *(void *)&long long v352 = 0;
  if (v264 == v265)
  {
    v266 = v264;
  }
  else
  {
    do
    {
      v266 = v264;
      if (((*((void *)v264 + 12) - *((void *)v264 + 11)) & 0x7FFFFFFF8) == 0) {
        break;
      }
      unint64_t v264 = *(llvm::MachineBasicBlock **)v264;
    }
    while (*(llvm::MachineBasicBlock **)v266 != v265);
  }
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v266);
  if (((*((void *)v266 + 12) - *((void *)v266 + 11)) & 0x7FFFFFFF8) != 0
    || (llvm::MachineBasicBlock *)((char *)v266 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
    goto LABEL_746;
  }
  unint64_t v282 = FirstTerminator;
  unint64_t v283 = *((void *)v266 + 7);
  if (v283 != FirstTerminator)
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(v282 + 16) + 18) & 4) != 0 && sub_1CD3D463C(v282))
      {
LABEL_624:
        sub_1CB859840(v282);
        goto LABEL_746;
      }
      unint64_t v282 = *(void *)v282 & 0xFFFFFFFFFFFFFFF8;
      if (!v282 || (*(unsigned char *)v282 & 4) == 0)
      {
        while ((*(_WORD *)(v282 + 44) & 4) != 0)
          unint64_t v282 = *(void *)v282 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while (v282 != v283);
    unint64_t v282 = v283;
  }
  if (v266 == v265) {
    goto LABEL_745;
  }
  unsigned int v284 = *(llvm::MachineBasicBlock **)v266;
  unint64_t v285 = *(void *)v266 + 48;
  unint64_t v354 = v358;
  uint64_t v355 = (uint64_t)v358;
  int v357 = 0;
  uint64_t v356 = 0x100000010;
  v358[0] = v266;
  unsigned int v286 = (void *)*((void *)v265 + 7);
  if ((void *)v285 == v286)
  {
LABEL_735:
    int v325 = 1;
    goto LABEL_736;
  }
  uint64_t v287 = 0;
  v339 = v265;
  while (2)
  {
    uint64_t v288 = v355;
    v341 = (char *)v354;
    uint64_t v343 = *((void *)v284 + 7);
    unsigned int v290 = v356;
    uint64_t v289 = HIDWORD(v356);
    int v337 = v356 - 1;
    v335 = (llvm::MachineBasicBlock **)(v355 + 8 * HIDWORD(v356));
    if (v285 == v343)
    {
LABEL_695:
      if ((char *)v288 == v341)
      {
        if (v289)
        {
          v315 = 0;
          uint64_t v316 = 8 * v289;
          uint64_t v317 = (llvm::MachineBasicBlock **)v288;
          while (*v317 != v284)
          {
            if (*v317 == (llvm::MachineBasicBlock *)-2) {
              v315 = v317;
            }
            ++v317;
            v316 -= 8;
            if (!v316)
            {
              if (!v315) {
                goto LABEL_703;
              }
              llvm::Value *v315 = v284;
              --v357;
              goto LABEL_725;
            }
          }
          goto LABEL_725;
        }
LABEL_703:
        if (v290 > v289)
        {
          HIDWORD(v356) = v289 + 1;
          unint64_t v318 = v335;
          goto LABEL_724;
        }
      }
      if (3 * v290 <= 4 * ((int)v289 - v357))
      {
        if (v290 >= 0x40) {
          v290 *= 2;
        }
        else {
          unsigned int v290 = 128;
        }
      }
      else if (v290 - v289 >= v290 >> 3)
      {
LABEL_707:
        unsigned int v319 = v337 & ((v284 >> 4) ^ (v284 >> 9));
        unint64_t v318 = (llvm::MachineBasicBlock **)(v288 + 8 * v319);
        uint64_t v320 = *v318;
        if (*v318 != (llvm::MachineBasicBlock *)-1)
        {
          unint64_t v321 = 0;
          int v322 = 1;
          while (v320 != v284)
          {
            if (v321) {
              BOOL v323 = 0;
            }
            else {
              BOOL v323 = v320 == (llvm::MachineBasicBlock *)-2;
            }
            if (v323) {
              unint64_t v321 = v318;
            }
            unsigned int v324 = v319 + v322++;
            unsigned int v319 = v324 & v337;
            unint64_t v318 = (llvm::MachineBasicBlock **)(v288 + 8 * (v324 & v337));
            uint64_t v320 = *v318;
            if (*v318 == (llvm::MachineBasicBlock *)-1) {
              goto LABEL_719;
            }
          }
          goto LABEL_725;
        }
        unint64_t v321 = 0;
LABEL_719:
        if (v321) {
          unint64_t v318 = v321;
        }
        if (*v318 == v284)
        {
LABEL_725:
          unsigned int v284 = *(llvm::MachineBasicBlock **)v284;
          unint64_t v285 = (unint64_t)v284 + 48;
          unsigned int v286 = (void *)*((void *)v265 + 7);
          if ((void *)((char *)v284 + 48) == v286) {
            goto LABEL_735;
          }
          continue;
        }
        if (*v318 == (llvm::MachineBasicBlock *)-2) {
          --v357;
        }
        else {
          ++HIDWORD(v356);
        }
LABEL_724:
        *unint64_t v318 = v284;
        goto LABEL_725;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v354, v290);
      uint64_t v288 = v355;
      int v337 = v356 - 1;
      goto LABEL_707;
    }
    break;
  }
  v333 = (char *)(v355 + 8 * v356);
  uint64_t v334 = 8 * HIDWORD(v356);
  while (1)
  {
    unint64_t v285 = *(void *)v285 & 0xFFFFFFFFFFFFFFF8;
    if (!v285 || (*(unsigned char *)v285 & 4) == 0)
    {
      while ((*(_WORD *)(v285 + 44) & 4) != 0)
        unint64_t v285 = *(void *)v285 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v291 = *(void *)(v285 + 16);
    if ((*(unsigned char *)(v291 + 18) & 4) != 0) {
      uint64_t v287 = v285;
    }
    if ((void *)v285 == v286) {
      break;
    }
    unsigned int v292 = (char *)v288;
    uint64_t v293 = v287;
    int v294 = v286;
    BOOL v295 = sub_1CD3D463C(v285);
    unsigned int v286 = v294;
    uint64_t v287 = v293;
    v265 = v339;
    if (v295) {
      break;
    }
    uint64_t v288 = (uint64_t)v292;
    uint64_t v296 = *(void *)(v291 + 8);
    if ((*(_WORD *)(v285 + 44) & 0xC) != 0 && (*(_WORD *)(v285 + 44) & 4) == 0)
    {
      unint64_t v301 = v285;
      if ((v296 & 0x80) != 0) {
        break;
      }
      while ((*(_WORD *)(v301 + 44) & 8) != 0)
      {
        unint64_t v301 = *(void *)(v301 + 8);
        if ((*(unsigned char *)(*(void *)(v301 + 16) + 8) & 0x80) != 0) {
          goto LABEL_733;
        }
      }
      if ((v296 & 0x20) != 0) {
        break;
      }
      unint64_t v302 = v285;
      while ((*(_WORD *)(v302 + 44) & 8) != 0)
      {
        unint64_t v302 = *(void *)(v302 + 8);
        if ((*(unsigned char *)(*(void *)(v302 + 16) + 8) & 0x20) != 0) {
          goto LABEL_733;
        }
      }
      if ((v296 & 0x800) != 0) {
        break;
      }
      unint64_t v303 = v285;
      while ((*(_WORD *)(v303 + 44) & 8) != 0)
      {
        unint64_t v303 = *(void *)(v303 + 8);
        if ((*(unsigned char *)(*(void *)(v303 + 16) + 9) & 8) != 0) {
          goto LABEL_733;
        }
      }
      unint64_t v304 = v285;
      if ((v296 & 0x400) == 0)
      {
        while ((*(_WORD *)(v304 + 44) & 8) != 0)
        {
          unint64_t v304 = *(void *)(v304 + 8);
          if ((*(unsigned char *)(*(void *)(v304 + 16) + 9) & 4) != 0) {
            goto LABEL_645;
          }
        }
        goto LABEL_694;
      }
    }
    else
    {
      if ((v296 & 0x8A0) != 0) {
        break;
      }
      if ((v296 & 0x400) == 0) {
        goto LABEL_694;
      }
    }
LABEL_645:
    uint64_t v298 = *(void *)(*(void *)(v285 + 32) + 16);
    if (v292 == v341)
    {
      if (v289)
      {
        uint64_t v299 = 0;
        while (*(void *)&v292[v299] != v298)
        {
          v299 += 8;
          if (v334 == v299)
          {
            unsigned int v300 = v289;
            goto LABEL_683;
          }
        }
        uint64_t v313 = &v292[v299];
        unsigned int v300 = v289;
        v314 = v292;
      }
      else
      {
        unsigned int v300 = 0;
LABEL_683:
        v314 = v292;
        uint64_t v313 = (char *)v335;
      }
    }
    else
    {
      unsigned int v305 = v337 & ((v298 >> 4) ^ (v298 >> 9));
      float v306 = &v292[8 * v305];
      uint64_t v307 = *(void *)v306;
      if (*(void *)v306 == -1)
      {
        int v308 = 0;
LABEL_685:
        if (v308) {
          float v306 = v308;
        }
        uint64_t v312 = *(void *)v306;
      }
      else
      {
        int v308 = 0;
        int v309 = 1;
        while (v307 != v298)
        {
          if (v308) {
            BOOL v310 = 0;
          }
          else {
            BOOL v310 = v307 == -2;
          }
          if (v310) {
            int v308 = v306;
          }
          unsigned int v311 = v305 + v309++;
          unsigned int v305 = v311 & v337;
          float v306 = &v292[8 * (v311 & v337)];
          uint64_t v307 = *(void *)v306;
          if (*(void *)v306 == -1) {
            goto LABEL_685;
          }
        }
        uint64_t v312 = *(void *)(*(void *)(v285 + 32) + 16);
      }
      BOOL v6 = v312 == v298;
      uint64_t v313 = v333;
      if (v6) {
        uint64_t v313 = v306;
      }
      unsigned int v300 = v289;
      v314 = v341;
    }
    if (v292 != v314) {
      unsigned int v300 = v290;
    }
    if (v313 == &v292[8 * v300]) {
      break;
    }
LABEL_694:
    if (v285 == v343) {
      goto LABEL_695;
    }
  }
LABEL_733:
  if (!v287) {
    goto LABEL_735;
  }
  sub_1CB859840(v287);
  if (v284 != v265) {
    goto LABEL_735;
  }
  int v325 = 0;
LABEL_736:
  if ((void *)v355 != v354) {
    free((void *)v355);
  }
  if (v325)
  {
    unint64_t v282 = *((void *)v266 + 7);
LABEL_745:
    while (v282 != llvm::MachineBasicBlock::getFirstTerminator(v266))
    {
      if ((*(unsigned char *)(*(void *)(v282 + 16) + 18) & 4) != 0) {
        goto LABEL_624;
      }
      if ((*(unsigned char *)v282 & 4) == 0)
      {
        while ((*(_WORD *)(v282 + 44) & 8) != 0)
          unint64_t v282 = *(void *)(v282 + 8);
      }
      unint64_t v282 = *(void *)(v282 + 8);
    }
  }
LABEL_746:
  if ((void)v352)
  {
    int v326 = *(unsigned __int8 *)v352;
    if ((v326 - 4) > 0x1E)
    {
      if ((v326 - 3) >= 0xFFFFFFFE) {
        uint64_t v329 = v352;
      }
      else {
        uint64_t v329 = 0;
      }
      if ((v326 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v328 = v329 + 8;
        goto LABEL_758;
      }
      if (v326 == 3) {
        *(void *)(v352 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v352 + 1) & 0x7F) == 2 || *(_DWORD *)(v352 + 12))
    {
      uint64_t v327 = *(void *)(v352 + 16);
      if ((v327 & 4) != 0)
      {
        unint64_t v328 = v327 & 0xFFFFFFFFFFFFFFF8;
        if (v328)
        {
LABEL_758:
          unint64_t v354 = &v352;
          sub_1CC5FA668(v328 + 16, &v354);
        }
      }
    }
  }
LABEL_561:
  if (v345 != v344) {
    free(v345);
  }
  return v256;
}

BOOL sub_1CB84E50C(int a1)
{
  return (a1 - 12440) < 0x30 || (a1 - 12868) < 4;
}

void sub_1CB84E530(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = (unsigned __int8 *)a2[7];
  unsigned int v30 = v4;
  if (v4)
  {
    llvm::MetadataTracking::track((uint64_t)&v30, v4, 2);
    uint64_t v4 = v30;
  }
  unint64_t v5 = a2[3];
  uint64_t v6 = *(void *)(*(void *)(a1 + 264) + 8) + 66288;
  int v7 = *(_DWORD *)(a1 + 288);
  long long v8 = *(llvm::MachineFunction **)(v5 + 32);
  uint64_t v31 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)&v31, v4, 2);
  }
  int v9 = llvm::MachineFunction::CreateMachineInstr(v8, v6, &v31, 0);
  if (v31)
  {
    int v26 = *v31;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = v31;
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v26 - 3) < 0xFFFFFFFE)
      {
        if (v26 == 3) {
          *((void *)v31 + 1) = 0;
        }
        goto LABEL_6;
      }
      unint64_t v28 = (unint64_t)(v29 + 8);
    }
    else
    {
      if ((v31[1] & 0x7F) != 2 && !*((_DWORD *)v31 + 3)) {
        goto LABEL_6;
      }
      uint64_t v27 = *((void *)v31 + 2);
      if ((v27 & 4) == 0) {
        goto LABEL_6;
      }
      unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if (!v28) {
        goto LABEL_6;
      }
    }
    *(void *)&long long v32 = &v31;
    sub_1CC5FA668(v28 + 16, &v32);
  }
LABEL_6:
  uint64_t v10 = *(void *)(v5 + 40);
  *((void *)v9 + 3) = v10;
  uint64_t v11 = *(void *)(v10 + 32);
  uint64_t v12 = *((unsigned int *)v9 + 10);
  if (v12)
  {
    uint64_t v18 = *((void *)v9 + 4);
    uint64_t v19 = *(void *)(v11 + 40);
    uint64_t v20 = 32 * v12;
    do
    {
      if (!*(unsigned char *)v18)
      {
        uint64_t v21 = *(unsigned int *)(v18 + 4);
        if ((int)v21 >= 0) {
          uint64_t v22 = (uint64_t *)(*(void *)(v19 + 272) + 8 * v21);
        }
        else {
          uint64_t v22 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
        }
        uint64_t v23 = *v22;
        if (*v22)
        {
          uint64_t v24 = *(void *)(v23 + 16);
          *(void *)(v23 + 16) = v18;
          *(void *)(v18 + 16) = v24;
          if (*(unsigned char *)(v18 + 3))
          {
            *(void *)(v18 + 24) = v23;
          }
          else
          {
            *(void *)(v18 + 24) = 0;
            uint64_t v22 = (uint64_t *)(v24 + 24);
          }
        }
        else
        {
          *(void *)(v18 + 16) = v18;
          *(void *)(v18 + 24) = 0;
        }
        *uint64_t v22 = v18;
      }
      v18 += 32;
      v20 -= 32;
    }
    while (v20);
  }
  uint64_t v13 = *(void *)(v11 + 728);
  if (v13) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v13 + 24))(v13, v9);
  }
  unint64_t v14 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v9 = v14 | *(void *)v9 & 7;
  *((void *)v9 + 1) = a2;
  *(void *)(v14 + 8) = v9;
  *a2 = *a2 & 7 | (unint64_t)v9;
  *((void *)&v32 + 1) = 0;
  long long v33 = 0uLL;
  LODWORD(v32) = 0x1000000;
  DWORD1(v32) = v7;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  *((void *)&v32 + 1) = 0;
  *(void *)&long long v33 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  long long v33 = 0uLL;
  long long v32 = 0x11700000000uLL;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  *((void *)&v32 + 1) = 0;
  *(void *)&long long v33 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  long long v33 = 0uLL;
  long long v32 = 0x11700000000uLL;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  *((void *)&v32 + 1) = 0;
  *(void *)&long long v33 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  long long v33 = 0uLL;
  long long v32 = 0x11700000000uLL;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  *((void *)&v32 + 1) = 0;
  *(void *)&long long v33 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  long long v32 = 0u;
  long long v33 = 0u;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  *((void *)&v32 + 1) = 0;
  *(void *)&long long v33 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  long long v32 = 0u;
  long long v33 = 0u;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v32);
  if (v30)
  {
    int v15 = *v30;
    if ((v15 - 4) > 0x1E)
    {
      if ((v15 - 3) >= 0xFFFFFFFE) {
        uint64_t v16 = v30;
      }
      else {
        uint64_t v16 = 0;
      }
      if ((v15 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v17 = (unint64_t)(v16 + 8);
LABEL_19:
        *(void *)&long long v32 = &v30;
        sub_1CC5FA668(v17 + 16, &v32);
        return;
      }
      if (v15 == 3) {
        *((void *)v30 + 1) = 0;
      }
    }
    else if ((v30[1] & 0x7F) == 2 || *((_DWORD *)v30 + 3))
    {
      uint64_t v25 = *((void *)v30 + 2);
      if ((v25 & 4) != 0)
      {
        unint64_t v17 = v25 & 0xFFFFFFFFFFFFFFF8;
        if (v17) {
          goto LABEL_19;
        }
      }
    }
  }
}

void sub_1CB84E8F0(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (!*(unsigned char *)(a1[31] + 290)) {
    return;
  }
  int v7 = *(llvm::MachineBasicBlock **)(a2 + 24);
  uint64_t v8 = *((void *)v7 + 4);
  if (*a4) {
    BOOL v9 = v7 != *(llvm::MachineBasicBlock **)(v8 + 328);
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = *(_DWORD *)(a1[32] + 8);
  *a4 = 0;
  uint64_t v11 = *(unsigned __int8 **)(a2 + 56);
  uint64_t v211 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v211, v11, 2);
  }
  uint64_t v12 = (const llvm::BasicBlock *)*((void *)v7 + 2);
  uint64_t v13 = *(llvm::MachineBasicBlock **)(v8 + 312);
  if (v13)
  {
    *(void *)(v8 + 312) = *(void *)v13;
  }
  else
  {
    *(void *)(v8 + 208) += 232;
    uint64_t v14 = *(void *)(v8 + 128);
    if (((v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v14 + 232 > *(void *)(v8 + 136) - v14)
    {
      unsigned int v176 = *(_DWORD *)(v8 + 152) >> 7;
      if (v176 >= 0x1E) {
        LOBYTE(v176) = 30;
      }
      uint64_t v177 = 4096 << v176;
      uint64_t v13 = (llvm::MachineBasicBlock *)operator new(4096 << v176, (std::align_val_t)8uLL);
      unsigned int v178 = *(_DWORD *)(v8 + 152);
      if (v178 >= *(_DWORD *)(v8 + 156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v8 + 144) + 8 * v178) = v13;
      ++*(_DWORD *)(v8 + 152);
      *(void *)(v8 + 128) = (char *)v13 + 232;
      *(void *)(v8 + 136) = (char *)v13 + v177;
    }
    else
    {
      uint64_t v13 = (llvm::MachineBasicBlock *)((v14 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v8 + 128) = (char *)v13 + 232;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock(v13, (llvm::MachineFunction *)v8, v12);
  int v15 = *(llvm::MachineBasicBlock **)(v8 + 312);
  if (v15)
  {
    *(void *)(v8 + 312) = *(void *)v15;
  }
  else
  {
    *(void *)(v8 + 208) += 232;
    uint64_t v16 = *(void *)(v8 + 128);
    if (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) - v16 + 232 > *(void *)(v8 + 136) - v16)
    {
      unsigned int v179 = *(_DWORD *)(v8 + 152) >> 7;
      if (v179 >= 0x1E) {
        LOBYTE(v179) = 30;
      }
      uint64_t v210 = 4096 << v179;
      int v15 = (llvm::MachineBasicBlock *)operator new(4096 << v179, (std::align_val_t)8uLL);
      unsigned int v180 = *(_DWORD *)(v8 + 152);
      if (v180 >= *(_DWORD *)(v8 + 156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v8 + 144) + 8 * v180) = v15;
      ++*(_DWORD *)(v8 + 152);
      *(void *)(v8 + 128) = (char *)v15 + 232;
      *(void *)(v8 + 136) = (char *)v15 + v210;
    }
    else
    {
      int v15 = (llvm::MachineBasicBlock *)((v16 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v8 + 128) = (char *)v15 + 232;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock(v15, (llvm::MachineFunction *)v8, v12);
  uint64_t v17 = *(void *)(a3 + 8);
  uint64_t v18 = *(unsigned int *)(a3 + 20);
  if (v17 != *(void *)a3)
  {
    unsigned int v22 = *(_DWORD *)(a3 + 16);
    goto LABEL_24;
  }
  if (!v18)
  {
LABEL_21:
    unsigned int v22 = *(_DWORD *)(a3 + 16);
    if (v18 < v22)
    {
      *(_DWORD *)(a3 + 20) = v18 + 1;
      *(void *)(v17 + 8 * v18) = v13;
      goto LABEL_45;
    }
LABEL_24:
    if (3 * v22 <= 4 * ((int)v18 - *(_DWORD *)(a3 + 24)))
    {
      if (v22 >= 0x40) {
        v22 *= 2;
      }
      else {
        unsigned int v22 = 128;
      }
    }
    else if (v22 - v18 >= v22 >> 3)
    {
      goto LABEL_26;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v22);
    unsigned int v22 = *(_DWORD *)(a3 + 16);
    uint64_t v17 = *(void *)(a3 + 8);
LABEL_26:
    unsigned int v23 = v22 - 1;
    unsigned int v24 = (v22 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    uint64_t v25 = (llvm::MachineBasicBlock **)(v17 + 8 * v24);
    int v26 = *v25;
    if (*v25 == (llvm::MachineBasicBlock *)-1)
    {
      uint64_t v27 = 0;
LABEL_38:
      if (v27) {
        uint64_t v31 = v27;
      }
      else {
        uint64_t v31 = v25;
      }
      if (*v31 != v13)
      {
        if (*v31 == (llvm::MachineBasicBlock *)-2) {
          --*(_DWORD *)(a3 + 24);
        }
        else {
          ++*(_DWORD *)(a3 + 20);
        }
        *uint64_t v31 = v13;
      }
    }
    else
    {
      uint64_t v27 = 0;
      int v28 = 1;
      while (v26 != v13)
      {
        if (v27) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v26 == (llvm::MachineBasicBlock *)-2;
        }
        if (v29) {
          uint64_t v27 = v25;
        }
        unsigned int v30 = v24 + v28++;
        unsigned int v24 = v30 & v23;
        uint64_t v25 = (llvm::MachineBasicBlock **)(v17 + 8 * (v30 & v23));
        int v26 = *v25;
        if (*v25 == (llvm::MachineBasicBlock *)-1) {
          goto LABEL_38;
        }
      }
    }
    goto LABEL_45;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 8 * v18;
  uint64_t v21 = *(llvm::MachineBasicBlock ***)(a3 + 8);
  while (*v21 != v13)
  {
    if (*v21 == (llvm::MachineBasicBlock *)-2) {
      uint64_t v19 = v21;
    }
    ++v21;
    v20 -= 8;
    if (!v20)
    {
      if (!v19) {
        goto LABEL_21;
      }
      *uint64_t v19 = v13;
      --*(_DWORD *)(a3 + 24);
      break;
    }
  }
LABEL_45:
  long long v32 = (llvm::MachineBasicBlock **)*((void *)v7 + 1);
  uint64_t v33 = v8 + 320;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v33, (uint64_t)v13);
  uint64_t v34 = *v32;
  *(void *)uint64_t v13 = *v32;
  *((void *)v13 + 1) = v32;
  *((void *)v34 + 1) = v13;
  *long long v32 = v13;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v33, (uint64_t)v15);
  BOOL v35 = *v32;
  *(void *)int v15 = *v32;
  *((void *)v15 + 1) = v32;
  *((void *)v35 + 1) = v15;
  *long long v32 = v15;
  unsigned int v36 = (unint64_t *)*((void *)v15 + 7);
  if (!a2)
  {
    uint64_t v37 = 0;
LABEL_50:
    while ((*(_WORD *)(v37 + 44) & 8) != 0)
      uint64_t v37 = *(void *)(v37 + 8);
    goto LABEL_51;
  }
  uint64_t v37 = a2;
  if ((*(unsigned char *)a2 & 4) == 0) {
    goto LABEL_50;
  }
LABEL_51:
  uint64_t v38 = *(unint64_t **)(v37 + 8);
  BOOL v39 = (unint64_t *)((char *)v7 + 48);
  if (v38 != (unint64_t *)((char *)v7 + 48) && v36 != v39)
  {
    if (v15 != v7)
    {
      unint64_t v158 = *((void *)v15 + 5);
      uint64_t v159 = v38;
      do
      {
        v159[3] = v158;
        uint64_t v159 = (unint64_t *)v159[1];
      }
      while (v159 != v39);
    }
    unint64_t v41 = *v39;
    unint64_t v42 = *v39 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v43 = *v38 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v43 + 8) = v39;
    *BOOL v39 = v43 | v41 & 7;
    unint64_t v44 = *v36 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v42 + 8) = v36;
    unint64_t *v38 = v44 | *v38 & 7;
    *(void *)(v44 + 8) = v38;
    unint64_t *v36 = v41 & 0xFFFFFFFFFFFFFFF8 | *v36 & 7;
  }
  llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v15, v7);
  if (v39 != (unint64_t *)a2)
  {
    uint64_t v45 = (unint64_t *)*((void *)v13 + 7);
    if (v45 != v39)
    {
      if (v13 != v7)
      {
        unint64_t v160 = *((void *)v13 + 5);
        uint64_t v161 = (unint64_t *)a2;
        do
        {
          v161[3] = v160;
          uint64_t v161 = (unint64_t *)v161[1];
        }
        while (v161 != v39);
      }
      unint64_t v46 = *v39;
      unint64_t v47 = *v39 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v48 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v48 + 8) = v39;
      *BOOL v39 = v48 | v46 & 7;
      unint64_t v49 = *v45 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v47 + 8) = v45;
      *(void *)a2 = v49 | *(void *)a2 & 7;
      *(void *)(v49 + 8) = a2;
      *uint64_t v45 = v46 & 0xFFFFFFFFFFFFFFF8 | *v45 & 7;
    }
  }
  llvm::MachineBasicBlock::addSuccessor(v7, v13, -1);
  llvm::MachineBasicBlock::addSuccessor(v13, v13, -1);
  llvm::MachineBasicBlock::addSuccessor(v13, v15, -1);
  uint64_t v50 = *(void *)(a1[33] + 8);
  if (v9)
  {
    uint64_t v51 = v50 + 35232;
    uint64_t v52 = (llvm::MachineFunction *)*((void *)v7 + 4);
    int v212 = v211;
    if (v211) {
      llvm::MetadataTracking::track((uint64_t)&v212, v211, 2);
    }
    uint64_t v53 = llvm::MachineFunction::CreateMachineInstr(v52, v51, &v212, 0);
    if (!v212) {
      goto LABEL_65;
    }
    int v197 = *v212;
    if ((v197 - 4) > 0x1E)
    {
      if ((v197 - 3) >= 0xFFFFFFFE) {
        uint64_t v208 = v212;
      }
      else {
        uint64_t v208 = 0;
      }
      if ((v197 - 3) < 0xFFFFFFFE)
      {
        if (v197 == 3) {
          *((void *)v212 + 1) = 0;
        }
        goto LABEL_65;
      }
      unint64_t v199 = (unint64_t)(v208 + 8);
    }
    else
    {
      if ((v212[1] & 0x7F) != 2 && !*((_DWORD *)v212 + 3)) {
        goto LABEL_65;
      }
      uint64_t v198 = *((void *)v212 + 2);
      if ((v198 & 4) == 0) {
        goto LABEL_65;
      }
      unint64_t v199 = v198 & 0xFFFFFFFFFFFFFFF8;
      if (!v199) {
        goto LABEL_65;
      }
    }
    *(void *)&long long v213 = &v212;
    sub_1CC5FA668(v199 + 16, &v213);
LABEL_65:
    uint64_t v54 = *((void *)v7 + 5);
    *((void *)v53 + 3) = v54;
    uint64_t v55 = *(void *)(v54 + 32);
    uint64_t v56 = *((unsigned int *)v53 + 10);
    if (v56)
    {
      uint64_t v162 = *((void *)v53 + 4);
      uint64_t v163 = *(void *)(v55 + 40);
      uint64_t v164 = 32 * v56;
      do
      {
        if (!*(unsigned char *)v162)
        {
          uint64_t v165 = *(unsigned int *)(v162 + 4);
          if ((int)v165 >= 0) {
            uint64_t v166 = (uint64_t *)(*(void *)(v163 + 272) + 8 * v165);
          }
          else {
            uint64_t v166 = (uint64_t *)(*(void *)(v163 + 24) + 16 * (v165 & 0x7FFFFFFF) + 8);
          }
          uint64_t v167 = *v166;
          if (*v166)
          {
            uint64_t v168 = *(void *)(v167 + 16);
            *(void *)(v167 + 16) = v162;
            *(void *)(v162 + 16) = v168;
            if (*(unsigned char *)(v162 + 3))
            {
              *(void *)(v162 + 24) = v167;
            }
            else
            {
              *(void *)(v162 + 24) = 0;
              uint64_t v166 = (uint64_t *)(v168 + 24);
            }
          }
          else
          {
            *(void *)(v162 + 16) = v162;
            *(void *)(v162 + 24) = 0;
          }
          *uint64_t v166 = v162;
        }
        v162 += 32;
        v164 -= 32;
      }
      while (v164);
    }
    uint64_t v57 = *(void *)(v55 + 728);
    if (v57) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v57 + 24))(v57, v53);
    }
    unint64_t v58 = *v39 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v53 = v58 | *(void *)v53 & 7;
    *((void *)v53 + 1) = v39;
    *(void *)(v58 + 8) = v53;
    *BOOL v39 = *v39 & 7 | (unint64_t)v53;
    *((void *)&v213 + 1) = 0;
    long long v214 = 0uLL;
    LODWORD(v213) = 0x1000000;
    DWORD1(v213) = v10;
    llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v213);
    LODWORD(v213) = 1;
    *((void *)&v213 + 1) = 0;
    *(void *)&long long v214 = 0;
    llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v213);
    *((void *)&v213 + 1) = 0;
    long long v214 = 0uLL;
    LODWORD(v213) = 0;
    DWORD1(v213) = v10;
    goto LABEL_76;
  }
  uint64_t v59 = v50 + 35424;
  uint64_t v52 = (llvm::MachineFunction *)*((void *)v7 + 4);
  int v212 = v211;
  if (v211) {
    llvm::MetadataTracking::track((uint64_t)&v212, v211, 2);
  }
  uint64_t v53 = llvm::MachineFunction::CreateMachineInstr(v52, v59, &v212, 0);
  if (v212)
  {
    int v200 = *v212;
    if ((v200 - 4) > 0x1E)
    {
      if ((v200 - 3) >= 0xFFFFFFFE) {
        v209 = v212;
      }
      else {
        v209 = 0;
      }
      if ((v200 - 3) < 0xFFFFFFFE)
      {
        if (v200 == 3) {
          *((void *)v212 + 1) = 0;
        }
        goto LABEL_72;
      }
      unint64_t v202 = (unint64_t)(v209 + 8);
    }
    else
    {
      if ((v212[1] & 0x7F) != 2 && !*((_DWORD *)v212 + 3)) {
        goto LABEL_72;
      }
      uint64_t v201 = *((void *)v212 + 2);
      if ((v201 & 4) == 0) {
        goto LABEL_72;
      }
      unint64_t v202 = v201 & 0xFFFFFFFFFFFFFFF8;
      if (!v202) {
        goto LABEL_72;
      }
    }
    *(void *)&long long v213 = &v212;
    sub_1CC5FA668(v202 + 16, &v213);
  }
LABEL_72:
  uint64_t v60 = *((void *)v7 + 5);
  *((void *)v53 + 3) = v60;
  uint64_t v61 = *(void *)(v60 + 32);
  uint64_t v62 = *((unsigned int *)v53 + 10);
  if (v62)
  {
    uint64_t v169 = *((void *)v53 + 4);
    uint64_t v170 = *(void *)(v61 + 40);
    uint64_t v171 = 32 * v62;
    do
    {
      if (!*(unsigned char *)v169)
      {
        uint64_t v172 = *(unsigned int *)(v169 + 4);
        if ((int)v172 >= 0) {
          uint64_t v173 = (uint64_t *)(*(void *)(v170 + 272) + 8 * v172);
        }
        else {
          uint64_t v173 = (uint64_t *)(*(void *)(v170 + 24) + 16 * (v172 & 0x7FFFFFFF) + 8);
        }
        uint64_t v174 = *v173;
        if (*v173)
        {
          uint64_t v175 = *(void *)(v174 + 16);
          *(void *)(v174 + 16) = v169;
          *(void *)(v169 + 16) = v175;
          if (*(unsigned char *)(v169 + 3))
          {
            *(void *)(v169 + 24) = v174;
          }
          else
          {
            *(void *)(v169 + 24) = 0;
            uint64_t v173 = (uint64_t *)(v175 + 24);
          }
        }
        else
        {
          *(void *)(v169 + 16) = v169;
          *(void *)(v169 + 24) = 0;
        }
        *uint64_t v173 = v169;
      }
      v169 += 32;
      v171 -= 32;
    }
    while (v171);
  }
  uint64_t v63 = *(void *)(v61 + 728);
  if (v63) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v63 + 24))(v63, v53);
  }
  unint64_t v64 = *v39 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v53 = v64 | *(void *)v53 & 7;
  *((void *)v53 + 1) = v39;
  *(void *)(v64 + 8) = v53;
  *BOOL v39 = *v39 & 7 | (unint64_t)v53;
  *((void *)&v213 + 1) = 0;
  long long v214 = 0uLL;
  LODWORD(v213) = 0x1000000;
  DWORD1(v213) = v10;
  llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
LABEL_76:
  llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 1;
  llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 2;
  llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v213);
  long long v213 = 0u;
  long long v214 = 0u;
  llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v213);
  unsigned int v65 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
  uint64_t v66 = (void *)a1[34];
  uint64_t v67 = v66[1];
  uint64_t v68 = v66[7];
  uint64_t v69 = *(unsigned int *)(v67 + 24 * v65 + 4);
  if (*(_WORD *)(v68 + 2 * v69))
  {
    unsigned __int16 v70 = *(_WORD *)(v68 + 2 * v69) + v65;
    uint64_t v71 = (_WORD *)(v66[11] + 2 * *(unsigned int *)(v67 + 24 * v65 + 12));
    uint64_t v72 = (unsigned __int16 *)(v68 + 2 * v69 + 2);
    while (*v71 != 33)
    {
      int v73 = *v72++;
      v70 += v73;
      ++v71;
      if (!v73) {
        goto LABEL_80;
      }
    }
    int v74 = v70;
  }
  else
  {
LABEL_80:
    int v74 = 0;
  }
  int v75 = (unint64_t *)*((void *)v13 + 7);
  uint64_t v76 = *(void *)(a1[33] + 8) + 66288;
  unsigned int v77 = (llvm::MachineFunction *)*((void *)v13 + 4);
  int v212 = v211;
  if (v211) {
    llvm::MetadataTracking::track((uint64_t)&v212, v211, 2);
  }
  uint64_t v78 = llvm::MachineFunction::CreateMachineInstr(v77, v76, &v212, 0);
  if (v212)
  {
    int v182 = *v212;
    if ((v182 - 4) > 0x1E)
    {
      if ((v182 - 3) >= 0xFFFFFFFE) {
        uint64_t v203 = v212;
      }
      else {
        uint64_t v203 = 0;
      }
      if ((v182 - 3) < 0xFFFFFFFE)
      {
        if (v182 == 3) {
          *((void *)v212 + 1) = 0;
        }
        goto LABEL_85;
      }
      unint64_t v184 = (unint64_t)(v203 + 8);
    }
    else
    {
      if ((v212[1] & 0x7F) != 2 && !*((_DWORD *)v212 + 3)) {
        goto LABEL_85;
      }
      uint64_t v183 = *((void *)v212 + 2);
      if ((v183 & 4) == 0) {
        goto LABEL_85;
      }
      unint64_t v184 = v183 & 0xFFFFFFFFFFFFFFF8;
      if (!v184) {
        goto LABEL_85;
      }
    }
    *(void *)&long long v213 = &v212;
    sub_1CC5FA668(v184 + 16, &v213);
  }
LABEL_85:
  uint64_t v79 = *((void *)v13 + 5);
  *((void *)v78 + 3) = v79;
  uint64_t v80 = *(void *)(v79 + 32);
  uint64_t v81 = *((unsigned int *)v78 + 10);
  if (v81)
  {
    uint64_t v123 = *((void *)v78 + 4);
    uint64_t v124 = *(void *)(v80 + 40);
    uint64_t v125 = 32 * v81;
    do
    {
      if (!*(unsigned char *)v123)
      {
        uint64_t v126 = *(unsigned int *)(v123 + 4);
        if ((int)v126 >= 0) {
          unint64_t v127 = (uint64_t *)(*(void *)(v124 + 272) + 8 * v126);
        }
        else {
          unint64_t v127 = (uint64_t *)(*(void *)(v124 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8);
        }
        uint64_t v128 = *v127;
        if (*v127)
        {
          uint64_t v129 = *(void *)(v128 + 16);
          *(void *)(v128 + 16) = v123;
          *(void *)(v123 + 16) = v129;
          if (*(unsigned char *)(v123 + 3))
          {
            *(void *)(v123 + 24) = v128;
          }
          else
          {
            *(void *)(v123 + 24) = 0;
            unint64_t v127 = (uint64_t *)(v129 + 24);
          }
        }
        else
        {
          *(void *)(v123 + 16) = v123;
          *(void *)(v123 + 24) = 0;
        }
        *unint64_t v127 = v123;
      }
      v123 += 32;
      v125 -= 32;
    }
    while (v125);
  }
  uint64_t v82 = *(void *)(v80 + 728);
  if (v82) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v82 + 24))(v82, v78);
  }
  unint64_t v83 = *v75 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v78 = v83 | *(void *)v78 & 7;
  *((void *)v78 + 1) = v75;
  *(void *)(v83 + 8) = v78;
  *int v75 = *v75 & 7 | (unint64_t)v78;
  long long v214 = 0uLL;
  long long v213 = 0x10701000000uLL;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  *((void *)&v213 + 1) = 0;
  long long v214 = 0uLL;
  LODWORD(v213) = 0;
  DWORD1(v213) = v74;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  *((void *)&v213 + 1) = 0;
  long long v214 = 0uLL;
  LODWORD(v213) = 0;
  DWORD1(v213) = v74;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  *((void *)&v213 + 1) = 0;
  long long v214 = 0uLL;
  LODWORD(v213) = 0;
  DWORD1(v213) = v74;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  long long v213 = 0u;
  long long v214 = 0u;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  long long v213 = 0u;
  long long v214 = 0u;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v213);
  uint64_t v84 = *(void *)(a1[33] + 8) + 239568;
  uint64_t v85 = (llvm::MachineFunction *)*((void *)v13 + 4);
  int v212 = v211;
  if (v211) {
    llvm::MetadataTracking::track((uint64_t)&v212, v211, 2);
  }
  uint64_t v86 = llvm::MachineFunction::CreateMachineInstr(v85, v84, &v212, 0);
  if (v212)
  {
    int v185 = *v212;
    if ((v185 - 4) > 0x1E)
    {
      if ((v185 - 3) >= 0xFFFFFFFE) {
        uint64_t v204 = v212;
      }
      else {
        uint64_t v204 = 0;
      }
      if ((v185 - 3) < 0xFFFFFFFE)
      {
        if (v185 == 3) {
          *((void *)v212 + 1) = 0;
        }
        goto LABEL_91;
      }
      unint64_t v187 = (unint64_t)(v204 + 8);
    }
    else
    {
      if ((v212[1] & 0x7F) != 2 && !*((_DWORD *)v212 + 3)) {
        goto LABEL_91;
      }
      uint64_t v186 = *((void *)v212 + 2);
      if ((v186 & 4) == 0) {
        goto LABEL_91;
      }
      unint64_t v187 = v186 & 0xFFFFFFFFFFFFFFF8;
      if (!v187) {
        goto LABEL_91;
      }
    }
    *(void *)&long long v213 = &v212;
    sub_1CC5FA668(v187 + 16, &v213);
  }
LABEL_91:
  uint64_t v87 = *((void *)v13 + 5);
  *((void *)v86 + 3) = v87;
  uint64_t v88 = *(void *)(v87 + 32);
  uint64_t v89 = *((unsigned int *)v86 + 10);
  if (v89)
  {
    uint64_t v130 = *((void *)v86 + 4);
    uint64_t v131 = *(void *)(v88 + 40);
    uint64_t v132 = 32 * v89;
    do
    {
      if (!*(unsigned char *)v130)
      {
        uint64_t v133 = *(unsigned int *)(v130 + 4);
        if ((int)v133 >= 0) {
          uint64_t v134 = (uint64_t *)(*(void *)(v131 + 272) + 8 * v133);
        }
        else {
          uint64_t v134 = (uint64_t *)(*(void *)(v131 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
        }
        uint64_t v135 = *v134;
        if (*v134)
        {
          uint64_t v136 = *(void *)(v135 + 16);
          *(void *)(v135 + 16) = v130;
          *(void *)(v130 + 16) = v136;
          if (*(unsigned char *)(v130 + 3))
          {
            *(void *)(v130 + 24) = v135;
          }
          else
          {
            *(void *)(v130 + 24) = 0;
            uint64_t v134 = (uint64_t *)(v136 + 24);
          }
        }
        else
        {
          *(void *)(v130 + 16) = v130;
          *(void *)(v130 + 24) = 0;
        }
        *uint64_t v134 = v130;
      }
      v130 += 32;
      v132 -= 32;
    }
    while (v132);
  }
  uint64_t v90 = *(void *)(v88 + 728);
  if (v90) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v90 + 24))(v90, v86);
  }
  unint64_t v91 = *v75 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v86 = v91 | *(void *)v86 & 7;
  *((void *)v86 + 1) = v75;
  *(void *)(v91 + 8) = v86;
  *int v75 = *v75 & 7 | (unint64_t)v86;
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v213);
  long long v214 = 0uLL;
  long long v213 = 0x10700000000uLL;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v213);
  *((void *)&v213 + 1) = 0;
  long long v214 = 0uLL;
  LODWORD(v213) = 0;
  DWORD1(v213) = v74;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v213);
  long long v214 = 0uLL;
  long long v213 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v213);
  long long v213 = 0u;
  long long v214 = 0u;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v213);
  *(_DWORD *)(*(void *)(a2 + 32) + 32) &= ~0x4000000u;
  uint64_t v92 = 160;
  if (**(_WORD **)(a2 + 16) == 11580) {
    uint64_t v92 = 96;
  }
  uint64_t v93 = 192;
  if (**(_WORD **)(a2 + 16) == 11580) {
    uint64_t v93 = 128;
  }
  *(void *)(*(void *)(a2 + 32) + v92 + 16) = 1;
  llvm::MachineOperand::setReg(*(void *)(a2 + 32) + v93, 2u);
  uint64_t v94 = *(void *)(a1[33] + 8) + 30624;
  uint64_t v95 = (llvm::MachineFunction *)*((void *)v13 + 4);
  int v212 = v211;
  if (v211) {
    llvm::MetadataTracking::track((uint64_t)&v212, v211, 2);
  }
  uint64_t v96 = llvm::MachineFunction::CreateMachineInstr(v95, v94, &v212, 0);
  if (v212)
  {
    int v188 = *v212;
    if ((v188 - 4) > 0x1E)
    {
      if ((v188 - 3) >= 0xFFFFFFFE) {
        uint64_t v205 = v212;
      }
      else {
        uint64_t v205 = 0;
      }
      if ((v188 - 3) < 0xFFFFFFFE)
      {
        if (v188 == 3) {
          *((void *)v212 + 1) = 0;
        }
        goto LABEL_101;
      }
      unint64_t v190 = (unint64_t)(v205 + 8);
    }
    else
    {
      if ((v212[1] & 0x7F) != 2 && !*((_DWORD *)v212 + 3)) {
        goto LABEL_101;
      }
      uint64_t v189 = *((void *)v212 + 2);
      if ((v189 & 4) == 0) {
        goto LABEL_101;
      }
      unint64_t v190 = v189 & 0xFFFFFFFFFFFFFFF8;
      if (!v190) {
        goto LABEL_101;
      }
    }
    *(void *)&long long v213 = &v212;
    sub_1CC5FA668(v190 + 16, &v213);
  }
LABEL_101:
  uint64_t v97 = (void *)((char *)v13 + 48);
  uint64_t v98 = *((void *)v13 + 5);
  *((void *)v96 + 3) = v98;
  uint64_t v99 = *(void *)(v98 + 32);
  uint64_t v100 = *((unsigned int *)v96 + 10);
  if (v100)
  {
    uint64_t v137 = *((void *)v96 + 4);
    uint64_t v138 = *(void *)(v99 + 40);
    uint64_t v139 = 32 * v100;
    do
    {
      if (!*(unsigned char *)v137)
      {
        uint64_t v140 = *(unsigned int *)(v137 + 4);
        if ((int)v140 >= 0) {
          uint64_t v141 = (uint64_t *)(*(void *)(v138 + 272) + 8 * v140);
        }
        else {
          uint64_t v141 = (uint64_t *)(*(void *)(v138 + 24) + 16 * (v140 & 0x7FFFFFFF) + 8);
        }
        uint64_t v142 = *v141;
        if (*v141)
        {
          uint64_t v143 = *(void *)(v142 + 16);
          *(void *)(v142 + 16) = v137;
          *(void *)(v137 + 16) = v143;
          if (*(unsigned char *)(v137 + 3))
          {
            *(void *)(v137 + 24) = v142;
          }
          else
          {
            *(void *)(v137 + 24) = 0;
            uint64_t v141 = (uint64_t *)(v143 + 24);
          }
        }
        else
        {
          *(void *)(v137 + 16) = v137;
          *(void *)(v137 + 24) = 0;
        }
        *uint64_t v141 = v137;
      }
      v137 += 32;
      v139 -= 32;
    }
    while (v139);
  }
  uint64_t v101 = *(void *)(v99 + 728);
  if (v101) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v101 + 24))(v101, v96);
  }
  unint64_t v102 = *((void *)v13 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v96 = v102 | *(void *)v96 & 7;
  *((void *)v96 + 1) = v97;
  *(void *)(v102 + 8) = v96;
  *((void *)v13 + 6) = *((void *)v13 + 6) & 7 | (unint64_t)v96;
  *((void *)&v213 + 1) = 0;
  long long v214 = 0uLL;
  LODWORD(v213) = 0x1000000;
  DWORD1(v213) = v10;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v213);
  *((void *)&v213 + 1) = 0;
  long long v214 = 0uLL;
  LODWORD(v213) = 0;
  DWORD1(v213) = v10;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 1;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 2;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v213);
  long long v213 = 0u;
  long long v214 = 0u;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v213);
  uint64_t v103 = *(void *)(a1[33] + 8) + 18960;
  uint64_t v104 = (llvm::MachineFunction *)*((void *)v13 + 4);
  int v212 = v211;
  if (v211) {
    llvm::MetadataTracking::track((uint64_t)&v212, v211, 2);
  }
  uint64_t v105 = llvm::MachineFunction::CreateMachineInstr(v104, v103, &v212, 0);
  if (v212)
  {
    int v191 = *v212;
    if ((v191 - 4) > 0x1E)
    {
      if ((v191 - 3) >= 0xFFFFFFFE) {
        uint64_t v206 = v212;
      }
      else {
        uint64_t v206 = 0;
      }
      if ((v191 - 3) < 0xFFFFFFFE)
      {
        if (v191 == 3) {
          *((void *)v212 + 1) = 0;
        }
        goto LABEL_107;
      }
      unint64_t v193 = (unint64_t)(v206 + 8);
    }
    else
    {
      if ((v212[1] & 0x7F) != 2 && !*((_DWORD *)v212 + 3)) {
        goto LABEL_107;
      }
      uint64_t v192 = *((void *)v212 + 2);
      if ((v192 & 4) == 0) {
        goto LABEL_107;
      }
      unint64_t v193 = v192 & 0xFFFFFFFFFFFFFFF8;
      if (!v193) {
        goto LABEL_107;
      }
    }
    *(void *)&long long v213 = &v212;
    sub_1CC5FA668(v193 + 16, &v213);
  }
LABEL_107:
  uint64_t v106 = *((void *)v13 + 5);
  *((void *)v105 + 3) = v106;
  uint64_t v107 = *(void *)(v106 + 32);
  uint64_t v108 = *((unsigned int *)v105 + 10);
  if (v108)
  {
    uint64_t v144 = *((void *)v105 + 4);
    uint64_t v145 = *(void *)(v107 + 40);
    uint64_t v146 = 32 * v108;
    do
    {
      if (!*(unsigned char *)v144)
      {
        uint64_t v147 = *(unsigned int *)(v144 + 4);
        if ((int)v147 >= 0) {
          uint64_t v148 = (uint64_t *)(*(void *)(v145 + 272) + 8 * v147);
        }
        else {
          uint64_t v148 = (uint64_t *)(*(void *)(v145 + 24) + 16 * (v147 & 0x7FFFFFFF) + 8);
        }
        uint64_t v149 = *v148;
        if (*v148)
        {
          uint64_t v150 = *(void *)(v149 + 16);
          *(void *)(v149 + 16) = v144;
          *(void *)(v144 + 16) = v150;
          if (*(unsigned char *)(v144 + 3))
          {
            *(void *)(v144 + 24) = v149;
          }
          else
          {
            *(void *)(v144 + 24) = 0;
            uint64_t v148 = (uint64_t *)(v150 + 24);
          }
        }
        else
        {
          *(void *)(v144 + 16) = v144;
          *(void *)(v144 + 24) = 0;
        }
        *uint64_t v148 = v144;
      }
      v144 += 32;
      v146 -= 32;
    }
    while (v146);
  }
  uint64_t v109 = *(void *)(v107 + 728);
  if (v109) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v109 + 24))(v109, v105);
  }
  unint64_t v110 = *((void *)v13 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v105 = v110 | *(void *)v105 & 7;
  *((void *)v105 + 1) = v97;
  *(void *)(v110 + 8) = v105;
  *((void *)v13 + 6) = *((void *)v13 + 6) & 7 | (unint64_t)v105;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = v13;
  LODWORD(v213) = 4;
  llvm::MachineInstr::addOperand(v105, v104, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v105, v104, (const llvm::MachineOperand *)&v213);
  long long v213 = 0u;
  long long v214 = 0u;
  llvm::MachineInstr::addOperand(v105, v104, (const llvm::MachineOperand *)&v213);
  uint64_t v111 = (unint64_t *)*((void *)v15 + 7);
  uint64_t v112 = *(void *)(a1[33] + 8) + 28320;
  uint64_t v113 = (llvm::MachineFunction *)*((void *)v15 + 4);
  int v212 = v211;
  if (v211) {
    llvm::MetadataTracking::track((uint64_t)&v212, v211, 2);
  }
  uint64_t v114 = llvm::MachineFunction::CreateMachineInstr(v113, v112, &v212, 0);
  if (v212)
  {
    int v194 = *v212;
    if ((v194 - 4) > 0x1E)
    {
      if ((v194 - 3) >= 0xFFFFFFFE) {
        uint64_t v207 = v212;
      }
      else {
        uint64_t v207 = 0;
      }
      if ((v194 - 3) < 0xFFFFFFFE)
      {
        if (v194 == 3) {
          *((void *)v212 + 1) = 0;
        }
        goto LABEL_113;
      }
      unint64_t v196 = (unint64_t)(v207 + 8);
    }
    else
    {
      if ((v212[1] & 0x7F) != 2 && !*((_DWORD *)v212 + 3)) {
        goto LABEL_113;
      }
      uint64_t v195 = *((void *)v212 + 2);
      if ((v195 & 4) == 0) {
        goto LABEL_113;
      }
      unint64_t v196 = v195 & 0xFFFFFFFFFFFFFFF8;
      if (!v196) {
        goto LABEL_113;
      }
    }
    *(void *)&long long v213 = &v212;
    sub_1CC5FA668(v196 + 16, &v213);
  }
LABEL_113:
  uint64_t v115 = *((void *)v15 + 5);
  *((void *)v114 + 3) = v115;
  uint64_t v116 = *(void *)(v115 + 32);
  uint64_t v117 = *((unsigned int *)v114 + 10);
  if (v117)
  {
    uint64_t v151 = *((void *)v114 + 4);
    uint64_t v152 = *(void *)(v116 + 40);
    uint64_t v153 = 32 * v117;
    do
    {
      if (!*(unsigned char *)v151)
      {
        uint64_t v154 = *(unsigned int *)(v151 + 4);
        if ((int)v154 >= 0) {
          int v155 = (uint64_t *)(*(void *)(v152 + 272) + 8 * v154);
        }
        else {
          int v155 = (uint64_t *)(*(void *)(v152 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8);
        }
        uint64_t v156 = *v155;
        if (*v155)
        {
          uint64_t v157 = *(void *)(v156 + 16);
          *(void *)(v156 + 16) = v151;
          *(void *)(v151 + 16) = v157;
          if (*(unsigned char *)(v151 + 3))
          {
            *(void *)(v151 + 24) = v156;
          }
          else
          {
            *(void *)(v151 + 24) = 0;
            int v155 = (uint64_t *)(v157 + 24);
          }
        }
        else
        {
          *(void *)(v151 + 16) = v151;
          *(void *)(v151 + 24) = 0;
        }
        *int v155 = v151;
      }
      v151 += 32;
      v153 -= 32;
    }
    while (v153);
  }
  uint64_t v118 = *(void *)(v116 + 728);
  if (v118) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v118 + 24))(v118, v114);
  }
  unint64_t v119 = *v111 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v114 = v119 | *(void *)v114 & 7;
  *((void *)v114 + 1) = v111;
  *(void *)(v119 + 8) = v114;
  *uint64_t v111 = *v111 & 7 | (unint64_t)v114;
  *((void *)&v213 + 1) = 0;
  long long v214 = 0uLL;
  LODWORD(v213) = 0x1000000;
  DWORD1(v213) = v10;
  llvm::MachineInstr::addOperand(v114, v113, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v114, v113, (const llvm::MachineOperand *)&v213);
  *((void *)&v213 + 1) = 0;
  long long v214 = 0uLL;
  LODWORD(v213) = 0;
  DWORD1(v213) = v10;
  llvm::MachineInstr::addOperand(v114, v113, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 0;
  llvm::MachineInstr::addOperand(v114, v113, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 1;
  llvm::MachineInstr::addOperand(v114, v113, (const llvm::MachineOperand *)&v213);
  LODWORD(v213) = 1;
  *((void *)&v213 + 1) = 0;
  *(void *)&long long v214 = 2;
  llvm::MachineInstr::addOperand(v114, v113, (const llvm::MachineOperand *)&v213);
  long long v213 = 0u;
  long long v214 = 0u;
  llvm::MachineInstr::addOperand(v114, v113, (const llvm::MachineOperand *)&v213);
  if (v211)
  {
    int v120 = *v211;
    if ((v120 - 4) > 0x1E)
    {
      if ((v120 - 3) >= 0xFFFFFFFE) {
        unsigned int v121 = v211;
      }
      else {
        unsigned int v121 = 0;
      }
      if ((v120 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v122 = (unint64_t)(v121 + 8);
LABEL_126:
        *(void *)&long long v213 = &v211;
        sub_1CC5FA668(v122 + 16, &v213);
        return;
      }
      if (v120 == 3) {
        *((void *)v211 + 1) = 0;
      }
    }
    else if ((v211[1] & 0x7F) == 2 || *((_DWORD *)v211 + 3))
    {
      uint64_t v181 = *((void *)v211 + 2);
      if ((v181 & 4) != 0)
      {
        unint64_t v122 = v181 & 0xFFFFFFFFFFFFFFF8;
        if (v122) {
          goto LABEL_126;
        }
      }
    }
  }
}

void sub_1CB850030(void *a1, uint64_t a2, size_t __sz, uint64_t a4, unsigned char *a5, char a6, uint64_t a7)
{
  unsigned int v10 = *(_DWORD *)(__sz + 8);
  if (v10 >= *(_DWORD *)(__sz + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)__sz + 8 * v10) = a2;
  ++*(_DWORD *)(__sz + 8);
  uint64_t v11 = *(llvm::MachineBasicBlock **)(a2 + 24);
  uint64_t v935 = *(void *)(a2 + 32);
  uint64_t v12 = (void *)*((void *)v11 + 4);
  unsigned int v933 = 2;
  if ((a6 & 1) == 0)
  {
    if (**(_WORD **)(a2 + 16) == 262) {
      int v13 = 3;
    }
    else {
      int v13 = 2;
    }
    unsigned int v933 = v13;
  }
  if (*a5) {
    BOOL v14 = v11 != (llvm::MachineBasicBlock *)v12[41];
  }
  else {
    BOOL v14 = 1;
  }
  BOOL v929 = v14;
  int v15 = *(_DWORD *)(a1[32] + 8);
  *a5 = 0;
  uint64_t v16 = *(unsigned __int8 **)(a2 + 56);
  v939 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v939, v16, 2);
  }
  uint64_t v17 = (const llvm::BasicBlock *)*((void *)v11 + 2);
  uint64_t v18 = (unint64_t *)v12[39];
  char v926 = a6;
  if (v18)
  {
    v12[39] = *v18;
  }
  else
  {
    v12[26] += 232;
    uint64_t v19 = v12[16];
    if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8) - v19 + 232 > v12[17] - v19)
    {
      unsigned int v774 = *((_DWORD *)v12 + 38) >> 7;
      if (v774 >= 0x1E) {
        LOBYTE(v774) = 30;
      }
      uint64_t v775 = 4096 << v774;
      uint64_t v18 = (unint64_t *)operator new(4096 << v774, (std::align_val_t)8uLL);
      unsigned int v776 = *((_DWORD *)v12 + 38);
      if (v776 >= *((_DWORD *)v12 + 39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v12[18] + 8 * v776) = v18;
      ++*((_DWORD *)v12 + 38);
      v12[16] = v18 + 29;
      v12[17] = (char *)v18 + v775;
    }
    else
    {
      uint64_t v18 = (unint64_t *)((v19 + 7) & 0xFFFFFFFFFFFFFFF8);
      v12[16] = v18 + 29;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock((llvm::MachineBasicBlock *)v18, (llvm::MachineFunction *)v12, v17);
  uint64_t v20 = (unint64_t *)v12[39];
  if (v20)
  {
    v12[39] = *v20;
  }
  else
  {
    v12[26] += 232;
    uint64_t v21 = v12[16];
    if (((v21 + 7) & 0xFFFFFFFFFFFFFFF8) - v21 + 232 > v12[17] - v21)
    {
      unsigned int v777 = *((_DWORD *)v12 + 38) >> 7;
      if (v777 >= 0x1E) {
        LOBYTE(v777) = 30;
      }
      uint64_t v778 = 4096 << v777;
      uint64_t v20 = (unint64_t *)operator new(4096 << v777, (std::align_val_t)8uLL);
      unsigned int v779 = *((_DWORD *)v12 + 38);
      if (v779 >= *((_DWORD *)v12 + 39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v12[18] + 8 * v779) = v20;
      ++*((_DWORD *)v12 + 38);
      v12[16] = v20 + 29;
      v12[17] = (char *)v20 + v778;
    }
    else
    {
      uint64_t v20 = (unint64_t *)((v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      v12[16] = v20 + 29;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock((llvm::MachineBasicBlock *)v20, (llvm::MachineFunction *)v12, v17);
  unsigned int v22 = (llvm::MachineBasicBlock *)v12[39];
  uint64_t v927 = a7;
  if (v22)
  {
    v12[39] = *(void *)v22;
  }
  else
  {
    v12[26] += 232;
    uint64_t v23 = v12[16];
    if (((v23 + 7) & 0xFFFFFFFFFFFFFFF8) - v23 + 232 > v12[17] - v23)
    {
      unsigned int v780 = *((_DWORD *)v12 + 38) >> 7;
      if (v780 >= 0x1E) {
        LOBYTE(v780) = 30;
      }
      uint64_t v781 = 4096 << v780;
      unsigned int v22 = (llvm::MachineBasicBlock *)operator new(4096 << v780, (std::align_val_t)8uLL);
      unsigned int v782 = *((_DWORD *)v12 + 38);
      if (v782 >= *((_DWORD *)v12 + 39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v12[18] + 8 * v782) = v22;
      ++*((_DWORD *)v12 + 38);
      v12[16] = (char *)v22 + 232;
      v12[17] = (char *)v22 + v781;
    }
    else
    {
      unsigned int v22 = (llvm::MachineBasicBlock *)((v23 + 7) & 0xFFFFFFFFFFFFFFF8);
      v12[16] = (char *)v22 + 232;
    }
  }
  unsigned int v937 = v22;
  llvm::MachineBasicBlock::MachineBasicBlock(v22, (llvm::MachineFunction *)v12, v17);
  unsigned int v24 = (llvm::MachineBasicBlock *)v12[39];
  if (v24)
  {
    v12[39] = *(void *)v24;
  }
  else
  {
    v12[26] += 232;
    uint64_t v25 = v12[16];
    if (((v25 + 7) & 0xFFFFFFFFFFFFFFF8) - v25 + 232 > v12[17] - v25)
    {
      unsigned int v783 = *((_DWORD *)v12 + 38) >> 7;
      if (v783 >= 0x1E) {
        LOBYTE(v783) = 30;
      }
      uint64_t v784 = 4096 << v783;
      unsigned int v24 = (llvm::MachineBasicBlock *)operator new(4096 << v783, (std::align_val_t)8uLL);
      unsigned int v785 = *((_DWORD *)v12 + 38);
      if (v785 >= *((_DWORD *)v12 + 39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v12[18] + 8 * v785) = v24;
      ++*((_DWORD *)v12 + 38);
      v12[16] = (char *)v24 + 232;
      v12[17] = (char *)v24 + v784;
    }
    else
    {
      unsigned int v24 = (llvm::MachineBasicBlock *)((v25 + 7) & 0xFFFFFFFFFFFFFFF8);
      v12[16] = (char *)v24 + 232;
    }
  }
  unsigned int v936 = v24;
  llvm::MachineBasicBlock::MachineBasicBlock(v24, (llvm::MachineFunction *)v12, v17);
  int v26 = (llvm::MachineBasicBlock *)v12[39];
  if (v26)
  {
    v12[39] = *(void *)v26;
  }
  else
  {
    v12[26] += 232;
    uint64_t v27 = v12[16];
    if (((v27 + 7) & 0xFFFFFFFFFFFFFFF8) - v27 + 232 > v12[17] - v27)
    {
      unsigned int v786 = *((_DWORD *)v12 + 38) >> 7;
      if (v786 >= 0x1E) {
        LOBYTE(v786) = 30;
      }
      uint64_t v787 = 4096 << v786;
      int v26 = (llvm::MachineBasicBlock *)operator new(4096 << v786, (std::align_val_t)8uLL);
      unsigned int v788 = *((_DWORD *)v12 + 38);
      if (v788 >= *((_DWORD *)v12 + 39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v12[18] + 8 * v788) = v26;
      ++*((_DWORD *)v12 + 38);
      v12[16] = (char *)v26 + 232;
      v12[17] = (char *)v26 + v787;
    }
    else
    {
      int v26 = (llvm::MachineBasicBlock *)((v27 + 7) & 0xFFFFFFFFFFFFFFF8);
      v12[16] = (char *)v26 + 232;
    }
  }
  v934 = v26;
  llvm::MachineBasicBlock::MachineBasicBlock(v26, (llvm::MachineFunction *)v12, v17);
  int v28 = (llvm::MachineBasicBlock *)v12[39];
  if (v28)
  {
    v12[39] = *(void *)v28;
  }
  else
  {
    v12[26] += 232;
    uint64_t v29 = v12[16];
    if (((v29 + 7) & 0xFFFFFFFFFFFFFFF8) - v29 + 232 > v12[17] - v29)
    {
      unsigned int v789 = *((_DWORD *)v12 + 38) >> 7;
      if (v789 >= 0x1E) {
        LOBYTE(v789) = 30;
      }
      uint64_t v790 = 4096 << v789;
      int v28 = (llvm::MachineBasicBlock *)operator new(4096 << v789, (std::align_val_t)8uLL);
      unsigned int v791 = *((_DWORD *)v12 + 38);
      if (v791 >= *((_DWORD *)v12 + 39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v12[18] + 8 * v791) = v28;
      ++*((_DWORD *)v12 + 38);
      v12[16] = (char *)v28 + 232;
      v12[17] = (char *)v28 + v790;
    }
    else
    {
      int v28 = (llvm::MachineBasicBlock *)((v29 + 7) & 0xFFFFFFFFFFFFFFF8);
      v12[16] = (char *)v28 + 232;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock(v28, (llvm::MachineFunction *)v12, v17);
  unsigned int v30 = (llvm::MachineBasicBlock *)v12[39];
  if (v30)
  {
    v12[39] = *(void *)v30;
  }
  else
  {
    v12[26] += 232;
    uint64_t v31 = v12[16];
    if (((v31 + 7) & 0xFFFFFFFFFFFFFFF8) - v31 + 232 > v12[17] - v31)
    {
      unsigned int v792 = *((_DWORD *)v12 + 38) >> 7;
      if (v792 >= 0x1E) {
        LOBYTE(v792) = 30;
      }
      uint64_t v793 = 4096 << v792;
      unsigned int v30 = (llvm::MachineBasicBlock *)operator new(4096 << v792, (std::align_val_t)8uLL);
      unsigned int v794 = *((_DWORD *)v12 + 38);
      if (v794 >= *((_DWORD *)v12 + 39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v12[18] + 8 * v794) = v30;
      ++*((_DWORD *)v12 + 38);
      v12[16] = (char *)v30 + 232;
      v12[17] = (char *)v30 + v793;
    }
    else
    {
      unsigned int v30 = (llvm::MachineBasicBlock *)((v31 + 7) & 0xFFFFFFFFFFFFFFF8);
      v12[16] = (char *)v30 + 232;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock(v30, (llvm::MachineFunction *)v12, v17);
  uint64_t v32 = *(void *)(a4 + 8);
  uint64_t v33 = *(unsigned int *)(a4 + 20);
  if (v32 != *(void *)a4)
  {
    unsigned int v37 = *(_DWORD *)(a4 + 16);
    goto LABEL_44;
  }
  if (!v33)
  {
LABEL_41:
    unsigned int v37 = *(_DWORD *)(a4 + 16);
    if (v33 < v37)
    {
      *(_DWORD *)(a4 + 20) = v33 + 1;
      *(void *)(v32 + 8 * v33) = v18;
      goto LABEL_65;
    }
LABEL_44:
    if (3 * v37 <= 4 * ((int)v33 - *(_DWORD *)(a4 + 24)))
    {
      if (v37 >= 0x40) {
        v37 *= 2;
      }
      else {
        unsigned int v37 = 128;
      }
    }
    else if (v37 - v33 >= v37 >> 3)
    {
      goto LABEL_46;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v37);
    unsigned int v37 = *(_DWORD *)(a4 + 16);
    uint64_t v32 = *(void *)(a4 + 8);
LABEL_46:
    unsigned int v38 = v37 - 1;
    unsigned int v39 = (v37 - 1) & ((v18 >> 4) ^ (v18 >> 9));
    uint64_t v40 = (unint64_t **)(v32 + 8 * v39);
    unint64_t v41 = *v40;
    if (*v40 == (unint64_t *)-1)
    {
      unint64_t v42 = 0;
LABEL_58:
      if (v42) {
        unint64_t v46 = v42;
      }
      else {
        unint64_t v46 = v40;
      }
      if (*v46 != v18)
      {
        if (*v46 == (unint64_t *)-2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        *unint64_t v46 = v18;
      }
    }
    else
    {
      unint64_t v42 = 0;
      int v43 = 1;
      while (v41 != v18)
      {
        if (v42) {
          BOOL v44 = 0;
        }
        else {
          BOOL v44 = v41 == (unint64_t *)-2;
        }
        if (v44) {
          unint64_t v42 = v40;
        }
        unsigned int v45 = v39 + v43++;
        unsigned int v39 = v45 & v38;
        uint64_t v40 = (unint64_t **)(v32 + 8 * (v45 & v38));
        unint64_t v41 = *v40;
        if (*v40 == (unint64_t *)-1) {
          goto LABEL_58;
        }
      }
    }
    goto LABEL_65;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 8 * v33;
  unsigned int v36 = *(unint64_t ***)(a4 + 8);
  while (*v36 != v18)
  {
    if (*v36 == (unint64_t *)-2) {
      uint64_t v34 = v36;
    }
    ++v36;
    v35 -= 8;
    if (!v35)
    {
      if (!v34) {
        goto LABEL_41;
      }
      *uint64_t v34 = v18;
      --*(_DWORD *)(a4 + 24);
      break;
    }
  }
LABEL_65:
  uint64_t v47 = *(void *)(a4 + 8);
  unsigned int v48 = *(_DWORD *)(a4 + 16);
  uint64_t v49 = *(unsigned int *)(a4 + 20);
  if (v47 != *(void *)a4) {
    goto LABEL_75;
  }
  if (!v49)
  {
LABEL_73:
    if (v48 > v49)
    {
      *(_DWORD *)(a4 + 20) = v49 + 1;
      *(void *)(v47 + 8 * v49) = v20;
      goto LABEL_96;
    }
LABEL_75:
    if (3 * v48 <= 4 * ((int)v49 - *(_DWORD *)(a4 + 24)))
    {
      if (v48 >= 0x40) {
        v48 *= 2;
      }
      else {
        unsigned int v48 = 128;
      }
    }
    else if (v48 - v49 >= v48 >> 3)
    {
      goto LABEL_77;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v48);
    unsigned int v48 = *(_DWORD *)(a4 + 16);
    uint64_t v47 = *(void *)(a4 + 8);
LABEL_77:
    unsigned int v53 = v48 - 1;
    unsigned int v54 = (v48 - 1) & ((v20 >> 4) ^ (v20 >> 9));
    uint64_t v55 = (unint64_t **)(v47 + 8 * v54);
    uint64_t v56 = *v55;
    if (*v55 == (unint64_t *)-1)
    {
      uint64_t v57 = 0;
LABEL_89:
      if (v57) {
        uint64_t v61 = v57;
      }
      else {
        uint64_t v61 = v55;
      }
      if (*v61 != v20)
      {
        if (*v61 == (unint64_t *)-2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        llvm::Instruction *v61 = v20;
      }
    }
    else
    {
      uint64_t v57 = 0;
      int v58 = 1;
      while (v56 != v20)
      {
        if (v57) {
          BOOL v59 = 0;
        }
        else {
          BOOL v59 = v56 == (unint64_t *)-2;
        }
        if (v59) {
          uint64_t v57 = v55;
        }
        unsigned int v60 = v54 + v58++;
        unsigned int v54 = v60 & v53;
        uint64_t v55 = (unint64_t **)(v47 + 8 * (v60 & v53));
        uint64_t v56 = *v55;
        if (*v55 == (unint64_t *)-1) {
          goto LABEL_89;
        }
      }
    }
    goto LABEL_96;
  }
  uint64_t v50 = 0;
  uint64_t v51 = 8 * v49;
  uint64_t v52 = *(unint64_t ***)(a4 + 8);
  while (*v52 != v20)
  {
    if (*v52 == (unint64_t *)-2) {
      uint64_t v50 = v52;
    }
    ++v52;
    v51 -= 8;
    if (!v51)
    {
      if (!v50) {
        goto LABEL_73;
      }
      llvm::MachineFunction *v50 = v20;
      --*(_DWORD *)(a4 + 24);
      break;
    }
  }
LABEL_96:
  uint64_t v62 = *(void *)(a4 + 8);
  unsigned int v63 = *(_DWORD *)(a4 + 16);
  uint64_t v64 = *(unsigned int *)(a4 + 20);
  if (v62 != *(void *)a4) {
    goto LABEL_106;
  }
  if (!v64)
  {
LABEL_104:
    if (v63 > v64)
    {
      *(_DWORD *)(a4 + 20) = v64 + 1;
      *(void *)(v62 + 8 * v64) = v937;
      goto LABEL_127;
    }
LABEL_106:
    if (3 * v63 <= 4 * ((int)v64 - *(_DWORD *)(a4 + 24)))
    {
      if (v63 >= 0x40) {
        v63 *= 2;
      }
      else {
        unsigned int v63 = 128;
      }
    }
    else if (v63 - v64 >= v63 >> 3)
    {
      goto LABEL_108;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v63);
    unsigned int v63 = *(_DWORD *)(a4 + 16);
    uint64_t v62 = *(void *)(a4 + 8);
LABEL_108:
    unsigned int v68 = v63 - 1;
    unsigned int v69 = (v63 - 1) & ((v937 >> 4) ^ (v937 >> 9));
    unsigned __int16 v70 = (llvm::MachineBasicBlock **)(v62 + 8 * v69);
    uint64_t v71 = *v70;
    if (*v70 == (llvm::MachineBasicBlock *)-1)
    {
      uint64_t v72 = 0;
LABEL_120:
      if (v72) {
        uint64_t v76 = v72;
      }
      else {
        uint64_t v76 = v70;
      }
      if (*v76 != v937)
      {
        if (*v76 == (llvm::MachineBasicBlock *)-2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        uint64_t *v76 = v937;
      }
    }
    else
    {
      uint64_t v72 = 0;
      int v73 = 1;
      while (v71 != v937)
      {
        if (v72) {
          BOOL v74 = 0;
        }
        else {
          BOOL v74 = v71 == (llvm::MachineBasicBlock *)-2;
        }
        if (v74) {
          uint64_t v72 = v70;
        }
        unsigned int v75 = v69 + v73++;
        unsigned int v69 = v75 & v68;
        unsigned __int16 v70 = (llvm::MachineBasicBlock **)(v62 + 8 * (v75 & v68));
        uint64_t v71 = *v70;
        if (*v70 == (llvm::MachineBasicBlock *)-1) {
          goto LABEL_120;
        }
      }
    }
    goto LABEL_127;
  }
  unsigned int v65 = 0;
  uint64_t v66 = 8 * v64;
  uint64_t v67 = *(llvm::MachineBasicBlock ***)(a4 + 8);
  while (*v67 != v937)
  {
    if (*v67 == (llvm::MachineBasicBlock *)-2) {
      unsigned int v65 = v67;
    }
    ++v67;
    v66 -= 8;
    if (!v66)
    {
      if (!v65) {
        goto LABEL_104;
      }
      uint64_t *v65 = v937;
      --*(_DWORD *)(a4 + 24);
      break;
    }
  }
LABEL_127:
  uint64_t v77 = *(void *)(a4 + 8);
  unsigned int v78 = *(_DWORD *)(a4 + 16);
  uint64_t v79 = *(unsigned int *)(a4 + 20);
  if (v77 != *(void *)a4) {
    goto LABEL_137;
  }
  if (!v79)
  {
LABEL_135:
    if (v78 > v79)
    {
      *(_DWORD *)(a4 + 20) = v79 + 1;
      *(void *)(v77 + 8 * v79) = v936;
      goto LABEL_158;
    }
LABEL_137:
    if (3 * v78 <= 4 * ((int)v79 - *(_DWORD *)(a4 + 24)))
    {
      if (v78 >= 0x40) {
        v78 *= 2;
      }
      else {
        unsigned int v78 = 128;
      }
    }
    else if (v78 - v79 >= v78 >> 3)
    {
      goto LABEL_139;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v78);
    unsigned int v78 = *(_DWORD *)(a4 + 16);
    uint64_t v77 = *(void *)(a4 + 8);
LABEL_139:
    unsigned int v83 = v78 - 1;
    unsigned int v84 = (v78 - 1) & ((v936 >> 4) ^ (v936 >> 9));
    uint64_t v85 = (llvm::MachineBasicBlock **)(v77 + 8 * v84);
    uint64_t v86 = *v85;
    if (*v85 == (llvm::MachineBasicBlock *)-1)
    {
      uint64_t v87 = 0;
LABEL_151:
      if (v87) {
        unint64_t v91 = v87;
      }
      else {
        unint64_t v91 = v85;
      }
      if (*v91 != v936)
      {
        if (*v91 == (llvm::MachineBasicBlock *)-2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        void *v91 = v936;
      }
    }
    else
    {
      uint64_t v87 = 0;
      int v88 = 1;
      while (v86 != v936)
      {
        if (v87) {
          BOOL v89 = 0;
        }
        else {
          BOOL v89 = v86 == (llvm::MachineBasicBlock *)-2;
        }
        if (v89) {
          uint64_t v87 = v85;
        }
        unsigned int v90 = v84 + v88++;
        unsigned int v84 = v90 & v83;
        uint64_t v85 = (llvm::MachineBasicBlock **)(v77 + 8 * (v90 & v83));
        uint64_t v86 = *v85;
        if (*v85 == (llvm::MachineBasicBlock *)-1) {
          goto LABEL_151;
        }
      }
    }
    goto LABEL_158;
  }
  uint64_t v80 = 0;
  uint64_t v81 = 8 * v79;
  uint64_t v82 = *(llvm::MachineBasicBlock ***)(a4 + 8);
  while (*v82 != v936)
  {
    if (*v82 == (llvm::MachineBasicBlock *)-2) {
      uint64_t v80 = v82;
    }
    ++v82;
    v81 -= 8;
    if (!v81)
    {
      if (!v80) {
        goto LABEL_135;
      }
      *uint64_t v80 = v936;
      --*(_DWORD *)(a4 + 24);
      break;
    }
  }
LABEL_158:
  uint64_t v92 = *(void *)(a4 + 8);
  unsigned int v93 = *(_DWORD *)(a4 + 16);
  uint64_t v94 = *(unsigned int *)(a4 + 20);
  if (v92 != *(void *)a4) {
    goto LABEL_168;
  }
  if (!v94)
  {
LABEL_166:
    if (v93 > v94)
    {
      *(_DWORD *)(a4 + 20) = v94 + 1;
      *(void *)(v92 + 8 * v94) = v934;
      goto LABEL_189;
    }
LABEL_168:
    if (3 * v93 <= 4 * ((int)v94 - *(_DWORD *)(a4 + 24)))
    {
      if (v93 >= 0x40) {
        v93 *= 2;
      }
      else {
        unsigned int v93 = 128;
      }
    }
    else if (v93 - v94 >= v93 >> 3)
    {
      goto LABEL_170;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v93);
    unsigned int v93 = *(_DWORD *)(a4 + 16);
    uint64_t v92 = *(void *)(a4 + 8);
LABEL_170:
    unsigned int v98 = v93 - 1;
    unsigned int v99 = (v93 - 1) & ((v934 >> 4) ^ (v934 >> 9));
    uint64_t v100 = (llvm::MachineBasicBlock **)(v92 + 8 * v99);
    uint64_t v101 = *v100;
    if (*v100 == (llvm::MachineBasicBlock *)-1)
    {
      unint64_t v102 = 0;
LABEL_182:
      if (v102) {
        uint64_t v106 = v102;
      }
      else {
        uint64_t v106 = v100;
      }
      if (*v106 != v934)
      {
        if (*v106 == (llvm::MachineBasicBlock *)-2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        *uint64_t v106 = v934;
      }
    }
    else
    {
      unint64_t v102 = 0;
      int v103 = 1;
      while (v101 != v934)
      {
        if (v102) {
          BOOL v104 = 0;
        }
        else {
          BOOL v104 = v101 == (llvm::MachineBasicBlock *)-2;
        }
        if (v104) {
          unint64_t v102 = v100;
        }
        unsigned int v105 = v99 + v103++;
        unsigned int v99 = v105 & v98;
        uint64_t v100 = (llvm::MachineBasicBlock **)(v92 + 8 * (v105 & v98));
        uint64_t v101 = *v100;
        if (*v100 == (llvm::MachineBasicBlock *)-1) {
          goto LABEL_182;
        }
      }
    }
    goto LABEL_189;
  }
  uint64_t v95 = 0;
  uint64_t v96 = 8 * v94;
  uint64_t v97 = *(llvm::MachineBasicBlock ***)(a4 + 8);
  while (*v97 != v934)
  {
    if (*v97 == (llvm::MachineBasicBlock *)-2) {
      uint64_t v95 = v97;
    }
    ++v97;
    v96 -= 8;
    if (!v96)
    {
      if (!v95) {
        goto LABEL_166;
      }
      *uint64_t v95 = v934;
      --*(_DWORD *)(a4 + 24);
      break;
    }
  }
LABEL_189:
  uint64_t v107 = *(void *)(a4 + 8);
  unsigned int v108 = *(_DWORD *)(a4 + 16);
  uint64_t v109 = *(unsigned int *)(a4 + 20);
  if (v107 != *(void *)a4) {
    goto LABEL_199;
  }
  if (!v109)
  {
LABEL_197:
    if (v108 > v109)
    {
      *(_DWORD *)(a4 + 20) = v109 + 1;
      *(void *)(v107 + 8 * v109) = v30;
      goto LABEL_220;
    }
LABEL_199:
    if (3 * v108 <= 4 * ((int)v109 - *(_DWORD *)(a4 + 24)))
    {
      if (v108 >= 0x40) {
        v108 *= 2;
      }
      else {
        unsigned int v108 = 128;
      }
    }
    else if (v108 - v109 >= v108 >> 3)
    {
      goto LABEL_201;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v108);
    unsigned int v108 = *(_DWORD *)(a4 + 16);
    uint64_t v107 = *(void *)(a4 + 8);
LABEL_201:
    unsigned int v113 = v108 - 1;
    unsigned int v114 = (v108 - 1) & ((v30 >> 4) ^ (v30 >> 9));
    uint64_t v115 = (llvm::MachineBasicBlock **)(v107 + 8 * v114);
    uint64_t v116 = *v115;
    if (*v115 == (llvm::MachineBasicBlock *)-1)
    {
      uint64_t v117 = 0;
LABEL_213:
      if (v117) {
        unsigned int v121 = v117;
      }
      else {
        unsigned int v121 = v115;
      }
      if (*v121 != v30)
      {
        if (*v121 == (llvm::MachineBasicBlock *)-2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        *unsigned int v121 = v30;
      }
    }
    else
    {
      uint64_t v117 = 0;
      int v118 = 1;
      while (v116 != v30)
      {
        if (v117) {
          BOOL v119 = 0;
        }
        else {
          BOOL v119 = v116 == (llvm::MachineBasicBlock *)-2;
        }
        if (v119) {
          uint64_t v117 = v115;
        }
        unsigned int v120 = v114 + v118++;
        unsigned int v114 = v120 & v113;
        uint64_t v115 = (llvm::MachineBasicBlock **)(v107 + 8 * (v120 & v113));
        uint64_t v116 = *v115;
        if (*v115 == (llvm::MachineBasicBlock *)-1) {
          goto LABEL_213;
        }
      }
    }
    goto LABEL_220;
  }
  unint64_t v110 = 0;
  uint64_t v111 = 8 * v109;
  uint64_t v112 = *(llvm::MachineBasicBlock ***)(a4 + 8);
  while (*v112 != v30)
  {
    if (*v112 == (llvm::MachineBasicBlock *)-2) {
      unint64_t v110 = v112;
    }
    ++v112;
    v111 -= 8;
    if (!v111)
    {
      if (!v110) {
        goto LABEL_197;
      }
      *unint64_t v110 = v30;
      --*(_DWORD *)(a4 + 24);
      break;
    }
  }
LABEL_220:
  int v932 = *(unsigned __int8 *)((*(uint64_t (**)(void, void))(**(void **)(*((void *)v11 + 4) + 8)
                                                                        + 16))(*(void *)(*((void *)v11 + 4) + 8), *v12)+ 280);
  unint64_t v122 = (llvm::MachineBasicBlock **)*((void *)v11 + 1);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v12 + 40), (uint64_t)v18);
  uint64_t v123 = *v122;
  *uint64_t v18 = (unint64_t)*v122;
  v18[1] = (unint64_t)v122;
  *((void *)v123 + 1) = v18;
  *unint64_t v122 = (llvm::MachineBasicBlock *)v18;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v12 + 40), (uint64_t)v20);
  uint64_t v124 = *v122;
  *uint64_t v20 = (unint64_t)*v122;
  v20[1] = (unint64_t)v122;
  *((void *)v124 + 1) = v20;
  *unint64_t v122 = (llvm::MachineBasicBlock *)v20;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v12 + 40), (uint64_t)v937);
  uint64_t v125 = *v122;
  *(void *)unsigned int v937 = *v122;
  *((void *)v937 + 1) = v122;
  *((void *)v125 + 1) = v937;
  *unint64_t v122 = v937;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v12 + 40), (uint64_t)v936);
  uint64_t v126 = *v122;
  *(void *)unsigned int v936 = *v122;
  *((void *)v936 + 1) = v122;
  *((void *)v126 + 1) = v936;
  *unint64_t v122 = v936;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v12 + 40), (uint64_t)v30);
  unint64_t v127 = *v122;
  *(void *)unsigned int v30 = *v122;
  *((void *)v30 + 1) = v122;
  *((void *)v127 + 1) = v30;
  *unint64_t v122 = v30;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v12 + 40), (uint64_t)v934);
  uint64_t v128 = *v122;
  *(void *)v934 = *v122;
  *((void *)v934 + 1) = v122;
  *((void *)v128 + 1) = v934;
  *unint64_t v122 = v934;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v12 + 40), (uint64_t)v28);
  uint64_t v129 = *v122;
  *(void *)int v28 = *v122;
  *((void *)v28 + 1) = v122;
  *((void *)v129 + 1) = v28;
  *unint64_t v122 = v28;
  uint64_t v130 = (unint64_t *)*((void *)v28 + 7);
  uint64_t v131 = a2;
  if (!a2 || (*(unsigned char *)a2 & 4) == 0)
  {
    while ((*(_WORD *)(v131 + 44) & 8) != 0)
      uint64_t v131 = *(void *)(v131 + 8);
  }
  uint64_t v132 = *(unint64_t **)(v131 + 8);
  uint64_t v133 = (unint64_t *)((char *)v11 + 48);
  if (v132 != (unint64_t *)((char *)v11 + 48) && v130 != v133)
  {
    if (v28 != v11)
    {
      unint64_t v616 = *((void *)v28 + 5);
      unsigned int v617 = v132;
      do
      {
        v617[3] = v616;
        unsigned int v617 = (unint64_t *)v617[1];
      }
      while (v617 != v133);
    }
    unint64_t v135 = *v133;
    unint64_t v136 = *v133 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v137 = *v132 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v137 + 8) = v133;
    *uint64_t v133 = v137 | v135 & 7;
    unint64_t v138 = *v130 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v136 + 8) = v130;
    *uint64_t v132 = v138 | *v132 & 7;
    *(void *)(v138 + 8) = v132;
    *uint64_t v130 = v135 & 0xFFFFFFFFFFFFFFF8 | *v130 & 7;
  }
  int v931 = v15;
  llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v28, v11);
  llvm::MachineBasicBlock::addSuccessor(v11, v18, -1);
  llvm::MachineBasicBlock::addSuccessor(v11, v28, -1);
  llvm::MachineBasicBlock::addSuccessor(v18, v20, -1);
  llvm::MachineBasicBlock::addSuccessor(v20, v20, -1);
  llvm::MachineBasicBlock::addSuccessor(v20, v937, -1);
  llvm::MachineBasicBlock::addSuccessor(v937, v934, -1);
  llvm::MachineBasicBlock::addSuccessor(v937, v936, -1);
  llvm::MachineBasicBlock::addSuccessor(v936, v936, -1);
  llvm::MachineBasicBlock::addSuccessor(v936, v30, -1);
  llvm::MachineBasicBlock::addSuccessor(v30, v28, -1);
  llvm::MachineBasicBlock::addSuccessor(v934, v28, -1);
  if (!v929)
  {
    uint64_t v139 = *(void *)(a1[33] + 8) + 48720;
    uint64_t v140 = (llvm::MachineFunction *)*((void *)v11 + 4);
    v942[0] = v939;
    int v141 = v15;
    if (v939) {
      llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
    }
    MachineInstr = llvm::MachineFunction::CreateMachineInstr(v140, v139, v942, 0);
    if (!v942[0]) {
      goto LABEL_235;
    }
    int v879 = *v942[0];
    if ((v879 - 4) > 0x1E)
    {
      if ((v879 - 3) >= 0xFFFFFFFE) {
        BOOL v911 = v942[0];
      }
      else {
        BOOL v911 = 0;
      }
      if ((v879 - 3) < 0xFFFFFFFE)
      {
        int v141 = v15;
        if (v879 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_235;
      }
      unint64_t v881 = (unint64_t)(v911 + 8);
    }
    else
    {
      int v141 = v15;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_235;
      }
      uint64_t v880 = *((void *)v942[0] + 2);
      if ((v880 & 4) == 0) {
        goto LABEL_235;
      }
      unint64_t v881 = v880 & 0xFFFFFFFFFFFFFFF8;
      if (!v881) {
        goto LABEL_235;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v881 + 16, &v940);
    int v141 = v15;
LABEL_235:
    uint64_t v143 = *((void *)v11 + 5);
    *((void *)MachineInstr + 3) = v143;
    uint64_t v144 = *(void *)(v143 + 32);
    uint64_t v145 = *((unsigned int *)MachineInstr + 10);
    if (v145)
    {
      uint64_t v753 = *((void *)MachineInstr + 4);
      uint64_t v754 = *(void *)(v144 + 40);
      uint64_t v755 = 32 * v145;
      do
      {
        if (!*(unsigned char *)v753)
        {
          uint64_t v756 = *(unsigned int *)(v753 + 4);
          if ((int)v756 >= 0) {
            v757 = (uint64_t *)(*(void *)(v754 + 272) + 8 * v756);
          }
          else {
            v757 = (uint64_t *)(*(void *)(v754 + 24) + 16 * (v756 & 0x7FFFFFFF) + 8);
          }
          uint64_t v758 = *v757;
          if (*v757)
          {
            uint64_t v759 = *(void *)(v758 + 16);
            *(void *)(v758 + 16) = v753;
            *(void *)(v753 + 16) = v759;
            if (*(unsigned char *)(v753 + 3))
            {
              *(void *)(v753 + 24) = v758;
            }
            else
            {
              *(void *)(v753 + 24) = 0;
              v757 = (uint64_t *)(v759 + 24);
            }
          }
          else
          {
            *(void *)(v753 + 16) = v753;
            *(void *)(v753 + 24) = 0;
          }
          uint64_t *v757 = v753;
        }
        v753 += 32;
        v755 -= 32;
      }
      while (v755);
    }
    uint64_t v146 = *(void *)(v144 + 728);
    if (v146) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v146 + 24))(v146, MachineInstr);
    }
    unint64_t v147 = *v133 & 0xFFFFFFFFFFFFFFF8;
    *(void *)MachineInstr = v147 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v133;
    *(void *)(v147 + 8) = MachineInstr;
    *uint64_t v133 = *v133 & 7 | (unint64_t)MachineInstr;
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 0x1000000;
    DWORD1(v940) = v141;
    llvm::MachineInstr::addOperand(MachineInstr, v140, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v140, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0x100000000;
    llvm::MachineInstr::addOperand(MachineInstr, v140, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0x100000000;
    llvm::MachineInstr::addOperand(MachineInstr, v140, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0x100000000;
    llvm::MachineInstr::addOperand(MachineInstr, v140, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0x100000000;
    llvm::MachineInstr::addOperand(MachineInstr, v140, (const llvm::MachineOperand *)&v940);
    long long v940 = 0u;
    long long v941 = 0u;
    llvm::MachineInstr::addOperand(MachineInstr, v140, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v140, (const llvm::MachineOperand *)&v940);
    long long v940 = 0u;
    long long v941 = 0u;
    llvm::MachineInstr::addOperand(MachineInstr, v140, (const llvm::MachineOperand *)&v940);
  }
  uint64_t v148 = 19776;
  if (!v932) {
    uint64_t v148 = 19872;
  }
  uint64_t v149 = *(void *)(a1[33] + 8) + v148;
  int v150 = *(_DWORD *)(v935 + 36);
  uint64_t v151 = (llvm::MachineFunction *)*((void *)v11 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v152 = llvm::MachineFunction::CreateMachineInstr(v151, v149, v942, 0);
  if (v942[0])
  {
    int v810 = *v942[0];
    if ((v810 - 4) > 0x1E)
    {
      if ((v810 - 3) >= 0xFFFFFFFE) {
        uint64_t v888 = v942[0];
      }
      else {
        uint64_t v888 = 0;
      }
      if ((v810 - 3) < 0xFFFFFFFE)
      {
        if (v810 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_244;
      }
      unint64_t v812 = (unint64_t)(v888 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_244;
      }
      uint64_t v811 = *((void *)v942[0] + 2);
      if ((v811 & 4) == 0) {
        goto LABEL_244;
      }
      unint64_t v812 = v811 & 0xFFFFFFFFFFFFFFF8;
      if (!v812) {
        goto LABEL_244;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v812 + 16, &v940);
  }
LABEL_244:
  uint64_t v153 = *((void *)v11 + 5);
  *((void *)v152 + 3) = v153;
  uint64_t v154 = *(void *)(v153 + 32);
  uint64_t v155 = *((unsigned int *)v152 + 10);
  if (v155)
  {
    uint64_t v462 = *((void *)v152 + 4);
    uint64_t v463 = *(void *)(v154 + 40);
    uint64_t v464 = 32 * v155;
    do
    {
      if (!*(unsigned char *)v462)
      {
        uint64_t v465 = *(unsigned int *)(v462 + 4);
        if ((int)v465 >= 0) {
          v466 = (uint64_t *)(*(void *)(v463 + 272) + 8 * v465);
        }
        else {
          v466 = (uint64_t *)(*(void *)(v463 + 24) + 16 * (v465 & 0x7FFFFFFF) + 8);
        }
        uint64_t v467 = *v466;
        if (*v466)
        {
          uint64_t v468 = *(void *)(v467 + 16);
          *(void *)(v467 + 16) = v462;
          *(void *)(v462 + 16) = v468;
          if (*(unsigned char *)(v462 + 3))
          {
            *(void *)(v462 + 24) = v467;
          }
          else
          {
            *(void *)(v462 + 24) = 0;
            v466 = (uint64_t *)(v468 + 24);
          }
        }
        else
        {
          *(void *)(v462 + 16) = v462;
          *(void *)(v462 + 24) = 0;
        }
        uint64_t *v466 = v462;
      }
      v462 += 32;
      v464 -= 32;
    }
    while (v464);
  }
  uint64_t v156 = *(void *)(v154 + 728);
  if (v156) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v156 + 24))(v156, v152);
  }
  unint64_t v157 = *((void *)v11 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v152 = v157 | *(void *)v152 & 7;
  *((void *)v152 + 1) = v133;
  *(void *)(v157 + 8) = v152;
  *((void *)v11 + 6) = *((void *)v11 + 6) & 7 | (unint64_t)v152;
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v150;
  llvm::MachineInstr::addOperand(v152, v151, (const llvm::MachineOperand *)&v940);
  uint64_t v158 = *(void *)(v935 + 32 * (v933 + 1) + 16);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v158;
  llvm::MachineInstr::addOperand(v152, v151, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v152, v151, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v152, v151, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v152, v151, (const llvm::MachineOperand *)&v940);
  uint64_t v159 = *(void *)(a1[33] + 8) + 644640;
  unint64_t v160 = (llvm::MachineFunction *)*((void *)v11 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v161 = llvm::MachineFunction::CreateMachineInstr(v160, v159, v942, 0);
  if (v942[0])
  {
    int v813 = *v942[0];
    if ((v813 - 4) > 0x1E)
    {
      if ((v813 - 3) >= 0xFFFFFFFE) {
        v889 = v942[0];
      }
      else {
        v889 = 0;
      }
      if ((v813 - 3) < 0xFFFFFFFE)
      {
        if (v813 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_250;
      }
      unint64_t v815 = (unint64_t)(v889 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_250;
      }
      uint64_t v814 = *((void *)v942[0] + 2);
      if ((v814 & 4) == 0) {
        goto LABEL_250;
      }
      unint64_t v815 = v814 & 0xFFFFFFFFFFFFFFF8;
      if (!v815) {
        goto LABEL_250;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v815 + 16, &v940);
  }
LABEL_250:
  uint64_t v162 = *((void *)v11 + 5);
  *((void *)v161 + 3) = v162;
  uint64_t v163 = *(void *)(v162 + 32);
  uint64_t v164 = *((unsigned int *)v161 + 10);
  if (v164)
  {
    uint64_t v469 = *((void *)v161 + 4);
    uint64_t v470 = *(void *)(v163 + 40);
    uint64_t v471 = 32 * v164;
    do
    {
      if (!*(unsigned char *)v469)
      {
        uint64_t v472 = *(unsigned int *)(v469 + 4);
        if ((int)v472 >= 0) {
          v473 = (uint64_t *)(*(void *)(v470 + 272) + 8 * v472);
        }
        else {
          v473 = (uint64_t *)(*(void *)(v470 + 24) + 16 * (v472 & 0x7FFFFFFF) + 8);
        }
        uint64_t v474 = *v473;
        if (*v473)
        {
          uint64_t v475 = *(void *)(v474 + 16);
          *(void *)(v474 + 16) = v469;
          *(void *)(v469 + 16) = v475;
          if (*(unsigned char *)(v469 + 3))
          {
            *(void *)(v469 + 24) = v474;
          }
          else
          {
            *(void *)(v469 + 24) = 0;
            v473 = (uint64_t *)(v475 + 24);
          }
        }
        else
        {
          *(void *)(v469 + 16) = v469;
          *(void *)(v469 + 24) = 0;
        }
        uint64_t *v473 = v469;
      }
      v469 += 32;
      v471 -= 32;
    }
    while (v471);
  }
  uint64_t v165 = *(void *)(v163 + 728);
  if (v165) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v165 + 24))(v165, v161);
  }
  unint64_t v166 = *((void *)v11 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v161 = v166 | *(void *)v161 & 7;
  *((void *)v161 + 1) = v133;
  *(void *)(v166 + 8) = v161;
  *((void *)v11 + 6) = *((void *)v11 + 6) & 7 | (unint64_t)v161;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v161, v160, (const llvm::MachineOperand *)&v940);
  uint64_t v167 = *(void *)(a1[33] + 8) + 239856;
  uint64_t v168 = (llvm::MachineFunction *)*((void *)v11 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v169 = llvm::MachineFunction::CreateMachineInstr(v168, v167, v942, 0);
  if (v942[0])
  {
    int v816 = *v942[0];
    if ((v816 - 4) > 0x1E)
    {
      if ((v816 - 3) >= 0xFFFFFFFE) {
        unsigned int v890 = v942[0];
      }
      else {
        unsigned int v890 = 0;
      }
      if ((v816 - 3) < 0xFFFFFFFE)
      {
        if (v816 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_256;
      }
      unint64_t v818 = (unint64_t)(v890 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_256;
      }
      uint64_t v817 = *((void *)v942[0] + 2);
      if ((v817 & 4) == 0) {
        goto LABEL_256;
      }
      unint64_t v818 = v817 & 0xFFFFFFFFFFFFFFF8;
      if (!v818) {
        goto LABEL_256;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v818 + 16, &v940);
  }
LABEL_256:
  uint64_t v170 = *((void *)v11 + 5);
  *((void *)v169 + 3) = v170;
  uint64_t v171 = *(void *)(v170 + 32);
  uint64_t v172 = *((unsigned int *)v169 + 10);
  if (v172)
  {
    uint64_t v476 = *((void *)v169 + 4);
    uint64_t v477 = *(void *)(v171 + 40);
    uint64_t v478 = 32 * v172;
    do
    {
      if (!*(unsigned char *)v476)
      {
        uint64_t v479 = *(unsigned int *)(v476 + 4);
        if ((int)v479 >= 0) {
          v480 = (uint64_t *)(*(void *)(v477 + 272) + 8 * v479);
        }
        else {
          v480 = (uint64_t *)(*(void *)(v477 + 24) + 16 * (v479 & 0x7FFFFFFF) + 8);
        }
        uint64_t v481 = *v480;
        if (*v480)
        {
          uint64_t v482 = *(void *)(v481 + 16);
          *(void *)(v481 + 16) = v476;
          *(void *)(v476 + 16) = v482;
          if (*(unsigned char *)(v476 + 3))
          {
            *(void *)(v476 + 24) = v481;
          }
          else
          {
            *(void *)(v476 + 24) = 0;
            v480 = (uint64_t *)(v482 + 24);
          }
        }
        else
        {
          *(void *)(v476 + 16) = v476;
          *(void *)(v476 + 24) = 0;
        }
        uint64_t *v480 = v476;
      }
      v476 += 32;
      v478 -= 32;
    }
    while (v478);
  }
  uint64_t v173 = *(void *)(v171 + 728);
  if (v173) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v173 + 24))(v173, v169);
  }
  unint64_t v174 = *((void *)v11 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v169 = v174 | *(void *)v169 & 7;
  *((void *)v169 + 1) = v133;
  *(void *)(v174 + 8) = v169;
  *((void *)v11 + 6) = *((void *)v11 + 6) & 7 | (unint64_t)v169;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v169, v168, (const llvm::MachineOperand *)&v940);
  int v175 = *(_DWORD *)(v935 + 36);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v175;
  llvm::MachineInstr::addOperand(v169, v168, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v169, v168, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v169, v168, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v169, v168, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v169, v168, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v169, v168, (const llvm::MachineOperand *)&v940);
  uint64_t v176 = *(void *)(a1[33] + 8) + 18960;
  uint64_t v177 = (llvm::MachineFunction *)*((void *)v11 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  unsigned int v178 = llvm::MachineFunction::CreateMachineInstr(v177, v176, v942, 0);
  if (v942[0])
  {
    int v819 = *v942[0];
    if ((v819 - 4) > 0x1E)
    {
      if ((v819 - 3) >= 0xFFFFFFFE) {
        unsigned int v891 = v942[0];
      }
      else {
        unsigned int v891 = 0;
      }
      if ((v819 - 3) < 0xFFFFFFFE)
      {
        if (v819 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_262;
      }
      unint64_t v821 = (unint64_t)(v891 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_262;
      }
      uint64_t v820 = *((void *)v942[0] + 2);
      if ((v820 & 4) == 0) {
        goto LABEL_262;
      }
      unint64_t v821 = v820 & 0xFFFFFFFFFFFFFFF8;
      if (!v821) {
        goto LABEL_262;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v821 + 16, &v940);
  }
LABEL_262:
  uint64_t v179 = *((void *)v11 + 5);
  *((void *)v178 + 3) = v179;
  uint64_t v180 = *(void *)(v179 + 32);
  uint64_t v181 = *((unsigned int *)v178 + 10);
  int v182 = v932;
  if (v181)
  {
    uint64_t v483 = *((void *)v178 + 4);
    uint64_t v484 = *(void *)(v180 + 40);
    uint64_t v485 = 32 * v181;
    do
    {
      if (!*(unsigned char *)v483)
      {
        uint64_t v486 = *(unsigned int *)(v483 + 4);
        if ((int)v486 >= 0) {
          BOOL v487 = (uint64_t *)(*(void *)(v484 + 272) + 8 * v486);
        }
        else {
          BOOL v487 = (uint64_t *)(*(void *)(v484 + 24) + 16 * (v486 & 0x7FFFFFFF) + 8);
        }
        uint64_t v488 = *v487;
        if (*v487)
        {
          uint64_t v489 = *(void *)(v488 + 16);
          *(void *)(v488 + 16) = v483;
          *(void *)(v483 + 16) = v489;
          if (*(unsigned char *)(v483 + 3))
          {
            *(void *)(v483 + 24) = v488;
          }
          else
          {
            *(void *)(v483 + 24) = 0;
            BOOL v487 = (uint64_t *)(v489 + 24);
          }
        }
        else
        {
          *(void *)(v483 + 16) = v483;
          *(void *)(v483 + 24) = 0;
        }
        *BOOL v487 = v483;
      }
      v483 += 32;
      v485 -= 32;
    }
    while (v485);
  }
  uint64_t v183 = *(void *)(v180 + 728);
  if (v183) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v183 + 24))(v183, v178);
  }
  unint64_t v184 = *v133 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unsigned int v178 = v184 | *(void *)v178 & 7;
  *((void *)v178 + 1) = v133;
  *(void *)(v184 + 8) = v178;
  *uint64_t v133 = *v133 & 7 | (unint64_t)v178;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v28;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v178, v177, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v178, v177, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v178, v177, (const llvm::MachineOperand *)&v940);
  uint64_t v185 = *(void *)(a1[33] + 8) + 239664;
  uint64_t v186 = (llvm::MachineFunction *)v18[4];
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  unint64_t v187 = llvm::MachineFunction::CreateMachineInstr(v186, v185, v942, 0);
  if (v942[0])
  {
    int v822 = *v942[0];
    if ((v822 - 4) > 0x1E)
    {
      if ((v822 - 3) >= 0xFFFFFFFE) {
        unsigned int v892 = v942[0];
      }
      else {
        unsigned int v892 = 0;
      }
      if ((v822 - 3) < 0xFFFFFFFE)
      {
        int v182 = v932;
        if (v822 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_268;
      }
      unint64_t v824 = (unint64_t)(v892 + 8);
    }
    else
    {
      int v182 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_268;
      }
      uint64_t v823 = *((void *)v942[0] + 2);
      if ((v823 & 4) == 0) {
        goto LABEL_268;
      }
      unint64_t v824 = v823 & 0xFFFFFFFFFFFFFFF8;
      if (!v824) {
        goto LABEL_268;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v824 + 16, &v940);
    int v182 = v932;
  }
LABEL_268:
  int v188 = v18 + 6;
  unint64_t v189 = v18[5];
  *((void *)v187 + 3) = v189;
  uint64_t v190 = *(void *)(v189 + 32);
  uint64_t v191 = *((unsigned int *)v187 + 10);
  if (v191)
  {
    uint64_t v490 = *((void *)v187 + 4);
    uint64_t v491 = *(void *)(v190 + 40);
    uint64_t v492 = 32 * v191;
    do
    {
      if (!*(unsigned char *)v490)
      {
        uint64_t v493 = *(unsigned int *)(v490 + 4);
        if ((int)v493 >= 0) {
          v494 = (uint64_t *)(*(void *)(v491 + 272) + 8 * v493);
        }
        else {
          v494 = (uint64_t *)(*(void *)(v491 + 24) + 16 * (v493 & 0x7FFFFFFF) + 8);
        }
        uint64_t v495 = *v494;
        if (*v494)
        {
          uint64_t v496 = *(void *)(v495 + 16);
          *(void *)(v495 + 16) = v490;
          *(void *)(v490 + 16) = v496;
          if (*(unsigned char *)(v490 + 3))
          {
            *(void *)(v490 + 24) = v495;
          }
          else
          {
            *(void *)(v490 + 24) = 0;
            v494 = (uint64_t *)(v496 + 24);
          }
        }
        else
        {
          *(void *)(v490 + 16) = v490;
          *(void *)(v490 + 24) = 0;
        }
        uint64_t *v494 = v490;
      }
      v490 += 32;
      v492 -= 32;
    }
    while (v492);
  }
  uint64_t v192 = *(void *)(v190 + 728);
  if (v192) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v192 + 24))(v192, v187);
  }
  unint64_t v193 = v18[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v187 = v193 | *(void *)v187 & 7;
  *((void *)v187 + 1) = v188;
  *(void *)(v193 + 8) = v187;
  v18[6] = v18[6] & 7 | (unint64_t)v187;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v187, v186, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x11300000000uLL;
  llvm::MachineInstr::addOperand(v187, v186, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v187, v186, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v187, v186, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v187, v186, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v187, v186, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v187, v186, (const llvm::MachineOperand *)&v940);
  uint64_t v194 = *(void *)(a1[33] + 8) + 34464;
  uint64_t v195 = (llvm::MachineFunction *)v18[4];
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  unint64_t v196 = llvm::MachineFunction::CreateMachineInstr(v195, v194, v942, 0);
  if (v942[0])
  {
    int v825 = *v942[0];
    if ((v825 - 4) > 0x1E)
    {
      if ((v825 - 3) >= 0xFFFFFFFE) {
        v893 = v942[0];
      }
      else {
        v893 = 0;
      }
      if ((v825 - 3) < 0xFFFFFFFE)
      {
        int v182 = v932;
        if (v825 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_274;
      }
      unint64_t v827 = (unint64_t)(v893 + 8);
    }
    else
    {
      int v182 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_274;
      }
      uint64_t v826 = *((void *)v942[0] + 2);
      if ((v826 & 4) == 0) {
        goto LABEL_274;
      }
      unint64_t v827 = v826 & 0xFFFFFFFFFFFFFFF8;
      if (!v827) {
        goto LABEL_274;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v827 + 16, &v940);
    int v182 = v932;
  }
LABEL_274:
  unint64_t v197 = v18[5];
  *((void *)v196 + 3) = v197;
  uint64_t v198 = *(void *)(v197 + 32);
  uint64_t v199 = *((unsigned int *)v196 + 10);
  if (v199)
  {
    uint64_t v497 = *((void *)v196 + 4);
    uint64_t v498 = *(void *)(v198 + 40);
    uint64_t v499 = 32 * v199;
    do
    {
      if (!*(unsigned char *)v497)
      {
        uint64_t v500 = *(unsigned int *)(v497 + 4);
        if ((int)v500 >= 0) {
          v501 = (uint64_t *)(*(void *)(v498 + 272) + 8 * v500);
        }
        else {
          v501 = (uint64_t *)(*(void *)(v498 + 24) + 16 * (v500 & 0x7FFFFFFF) + 8);
        }
        uint64_t v502 = *v501;
        if (*v501)
        {
          uint64_t v503 = *(void *)(v502 + 16);
          *(void *)(v502 + 16) = v497;
          *(void *)(v497 + 16) = v503;
          if (*(unsigned char *)(v497 + 3))
          {
            *(void *)(v497 + 24) = v502;
          }
          else
          {
            *(void *)(v497 + 24) = 0;
            v501 = (uint64_t *)(v503 + 24);
          }
        }
        else
        {
          *(void *)(v497 + 16) = v497;
          *(void *)(v497 + 24) = 0;
        }
        uint64_t *v501 = v497;
      }
      v497 += 32;
      v499 -= 32;
    }
    while (v499);
  }
  uint64_t v200 = *(void *)(v198 + 728);
  if (v200) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v200 + 24))(v200, v196);
  }
  unint64_t v201 = *v188 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v196 = v201 | *(void *)v196 & 7;
  *((void *)v196 + 1) = v188;
  *(void *)(v201 + 8) = v196;
  unint64_t *v188 = *v188 & 7 | (unint64_t)v196;
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v931;
  llvm::MachineInstr::addOperand(v196, v195, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v196, v195, (const llvm::MachineOperand *)&v940);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v931;
  llvm::MachineInstr::addOperand(v196, v195, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v196, v195, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 2;
  llvm::MachineInstr::addOperand(v196, v195, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 2;
  llvm::MachineInstr::addOperand(v196, v195, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v196, v195, (const llvm::MachineOperand *)&v940);
  uint64_t v202 = 569712;
  if (!v182) {
    uint64_t v202 = 569808;
  }
  uint64_t v203 = *(void *)(a1[33] + 8) + v202;
  uint64_t v204 = (llvm::MachineFunction *)v20[4];
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v205 = llvm::MachineFunction::CreateMachineInstr(v204, v203, v942, 0);
  if (v942[0])
  {
    int v828 = *v942[0];
    if ((v828 - 4) > 0x1E)
    {
      if ((v828 - 3) >= 0xFFFFFFFE) {
        v894 = v942[0];
      }
      else {
        v894 = 0;
      }
      if ((v828 - 3) < 0xFFFFFFFE)
      {
        int v182 = v932;
        if (v828 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_282;
      }
      unint64_t v830 = (unint64_t)(v894 + 8);
    }
    else
    {
      int v182 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_282;
      }
      uint64_t v829 = *((void *)v942[0] + 2);
      if ((v829 & 4) == 0) {
        goto LABEL_282;
      }
      unint64_t v830 = v829 & 0xFFFFFFFFFFFFFFF8;
      if (!v830) {
        goto LABEL_282;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v830 + 16, &v940);
    int v182 = v932;
  }
LABEL_282:
  uint64_t v206 = v20 + 6;
  unint64_t v207 = v20[5];
  *((void *)v205 + 3) = v207;
  uint64_t v208 = *(void *)(v207 + 32);
  uint64_t v209 = *((unsigned int *)v205 + 10);
  if (v209)
  {
    uint64_t v504 = *((void *)v205 + 4);
    uint64_t v505 = *(void *)(v208 + 40);
    uint64_t v506 = 32 * v209;
    do
    {
      if (!*(unsigned char *)v504)
      {
        uint64_t v507 = *(unsigned int *)(v504 + 4);
        if ((int)v507 >= 0) {
          unsigned int v508 = (uint64_t *)(*(void *)(v505 + 272) + 8 * v507);
        }
        else {
          unsigned int v508 = (uint64_t *)(*(void *)(v505 + 24) + 16 * (v507 & 0x7FFFFFFF) + 8);
        }
        uint64_t v509 = *v508;
        if (*v508)
        {
          uint64_t v510 = *(void *)(v509 + 16);
          *(void *)(v509 + 16) = v504;
          *(void *)(v504 + 16) = v510;
          if (*(unsigned char *)(v504 + 3))
          {
            *(void *)(v504 + 24) = v509;
          }
          else
          {
            *(void *)(v504 + 24) = 0;
            unsigned int v508 = (uint64_t *)(v510 + 24);
          }
        }
        else
        {
          *(void *)(v504 + 16) = v504;
          *(void *)(v504 + 24) = 0;
        }
        *unsigned int v508 = v504;
      }
      v504 += 32;
      v506 -= 32;
    }
    while (v506);
  }
  uint64_t v210 = *(void *)(v208 + 728);
  if (v210) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v210 + 24))(v210, v205);
  }
  unint64_t v211 = v20[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v205 = v211 | *(void *)v205 & 7;
  *((void *)v205 + 1) = v206;
  *(void *)(v211 + 8) = v205;
  v20[6] = v20[6] & 7 | (unint64_t)v205;
  int v212 = *(_DWORD *)(v935 + 4);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v212;
  llvm::MachineInstr::addOperand(v205, v204, (const llvm::MachineOperand *)&v940);
  uint64_t v213 = v935 + 32 * v933;
  uint64_t v214 = *(void *)(v213 + 16);
  v930 = (uint64_t *)(v213 + 16);
  char v215 = v182 == 0;
  if (v182) {
    unsigned int v216 = 11950;
  }
  else {
    unsigned int v216 = 11952;
  }
  if (v182) {
    unsigned int v217 = 2781;
  }
  else {
    unsigned int v217 = 2898;
  }
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v214 >> v215;
  llvm::MachineInstr::addOperand(v205, v204, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v205, v204, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v205, v204, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v205, v204, (const llvm::MachineOperand *)&v940);
  uint64_t v218 = *(void *)(a1[33] + 8) + 644640;
  int v219 = (llvm::MachineFunction *)v20[4];
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v220 = llvm::MachineFunction::CreateMachineInstr(v219, v218, v942, 0);
  if (v942[0])
  {
    int v831 = *v942[0];
    if ((v831 - 4) > 0x1E)
    {
      if ((v831 - 3) >= 0xFFFFFFFE) {
        v895 = v942[0];
      }
      else {
        v895 = 0;
      }
      if ((v831 - 3) < 0xFFFFFFFE)
      {
        if (v831 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_294;
      }
      unint64_t v833 = (unint64_t)(v895 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_294;
      }
      uint64_t v832 = *((void *)v942[0] + 2);
      if ((v832 & 4) == 0) {
        goto LABEL_294;
      }
      unint64_t v833 = v832 & 0xFFFFFFFFFFFFFFF8;
      if (!v833) {
        goto LABEL_294;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v833 + 16, &v940);
  }
LABEL_294:
  unint64_t v221 = v20[5];
  *((void *)v220 + 3) = v221;
  uint64_t v222 = *(void *)(v221 + 32);
  uint64_t v223 = *((unsigned int *)v220 + 10);
  if (v223)
  {
    uint64_t v511 = *((void *)v220 + 4);
    uint64_t v512 = *(void *)(v222 + 40);
    uint64_t v513 = 32 * v223;
    do
    {
      if (!*(unsigned char *)v511)
      {
        uint64_t v514 = *(unsigned int *)(v511 + 4);
        if ((int)v514 >= 0) {
          v515 = (uint64_t *)(*(void *)(v512 + 272) + 8 * v514);
        }
        else {
          v515 = (uint64_t *)(*(void *)(v512 + 24) + 16 * (v514 & 0x7FFFFFFF) + 8);
        }
        uint64_t v516 = *v515;
        if (*v515)
        {
          uint64_t v517 = *(void *)(v516 + 16);
          *(void *)(v516 + 16) = v511;
          *(void *)(v511 + 16) = v517;
          if (*(unsigned char *)(v511 + 3))
          {
            *(void *)(v511 + 24) = v516;
          }
          else
          {
            *(void *)(v511 + 24) = 0;
            v515 = (uint64_t *)(v517 + 24);
          }
        }
        else
        {
          *(void *)(v511 + 16) = v511;
          *(void *)(v511 + 24) = 0;
        }
        uint64_t *v515 = v511;
      }
      v511 += 32;
      v513 -= 32;
    }
    while (v513);
  }
  uint64_t v224 = *(void *)(v222 + 728);
  if (v224) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v224 + 24))(v224, v220);
  }
  unint64_t v225 = v20[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v220 = v225 | *(void *)v220 & 7;
  *((void *)v220 + 1) = v206;
  *(void *)(v225 + 8) = v220;
  v20[6] = v20[6] & 7 | (unint64_t)v220;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v220, v219, (const llvm::MachineOperand *)&v940);
  uint64_t v226 = *(void *)(a1[33] + 8) + 236208;
  __int16 v227 = (llvm::MachineFunction *)v20[4];
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  int v228 = llvm::MachineFunction::CreateMachineInstr(v227, v226, v942, 0);
  if (v942[0])
  {
    int v834 = *v942[0];
    if ((v834 - 4) > 0x1E)
    {
      if ((v834 - 3) >= 0xFFFFFFFE) {
        int v896 = v942[0];
      }
      else {
        int v896 = 0;
      }
      if ((v834 - 3) < 0xFFFFFFFE)
      {
        if (v834 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_300;
      }
      unint64_t v836 = (unint64_t)(v896 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_300;
      }
      uint64_t v835 = *((void *)v942[0] + 2);
      if ((v835 & 4) == 0) {
        goto LABEL_300;
      }
      unint64_t v836 = v835 & 0xFFFFFFFFFFFFFFF8;
      if (!v836) {
        goto LABEL_300;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v836 + 16, &v940);
  }
LABEL_300:
  unint64_t v229 = v20[5];
  *((void *)v228 + 3) = v229;
  uint64_t v230 = *(void *)(v229 + 32);
  uint64_t v231 = *((unsigned int *)v228 + 10);
  if (v231)
  {
    uint64_t v518 = *((void *)v228 + 4);
    uint64_t v519 = *(void *)(v230 + 40);
    uint64_t v520 = 32 * v231;
    do
    {
      if (!*(unsigned char *)v518)
      {
        uint64_t v521 = *(unsigned int *)(v518 + 4);
        if ((int)v521 >= 0) {
          unint64_t v522 = (uint64_t *)(*(void *)(v519 + 272) + 8 * v521);
        }
        else {
          unint64_t v522 = (uint64_t *)(*(void *)(v519 + 24) + 16 * (v521 & 0x7FFFFFFF) + 8);
        }
        uint64_t v523 = *v522;
        if (*v522)
        {
          uint64_t v524 = *(void *)(v523 + 16);
          *(void *)(v523 + 16) = v518;
          *(void *)(v518 + 16) = v524;
          if (*(unsigned char *)(v518 + 3))
          {
            *(void *)(v518 + 24) = v523;
          }
          else
          {
            *(void *)(v518 + 24) = 0;
            unint64_t v522 = (uint64_t *)(v524 + 24);
          }
        }
        else
        {
          *(void *)(v518 + 16) = v518;
          *(void *)(v518 + 24) = 0;
        }
        *unint64_t v522 = v518;
      }
      v518 += 32;
      v520 -= 32;
    }
    while (v520);
  }
  uint64_t v232 = *(void *)(v230 + 728);
  if (v232) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v232 + 24))(v232, v228);
  }
  unint64_t v233 = *v206 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v228 = v233 | *(void *)v228 & 7;
  *((void *)v228 + 1) = v206;
  *(void *)(v233 + 8) = v228;
  *uint64_t v206 = *v206 & 7 | (unint64_t)v228;
  int v234 = (void *)a1[34];
  unsigned int v235 = *(_DWORD *)(v935 + 4);
  uint64_t v236 = v234[1];
  uint64_t v237 = v234[7];
  uint64_t v238 = *(unsigned int *)(v236 + 24 * v235 + 4);
  int v239 = *(unsigned __int16 *)(v237 + 2 * v238);
  if (*(_WORD *)(v237 + 2 * v238))
  {
    LOWORD(v239) = v239 + v235;
    int v240 = (_WORD *)(v234[11] + 2 * *(unsigned int *)(v236 + 24 * v235 + 12));
    uint64_t v241 = (unsigned __int16 *)(v237 + 2 * v238 + 2);
    while (*v240 != 1)
    {
      int v242 = *v241++;
      LOWORD(v239) = v242 + v239;
      ++v240;
      if (!v242)
      {
        int v239 = 0;
        goto LABEL_309;
      }
    }
    int v239 = (unsigned __int16)v239;
  }
LABEL_309:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v239;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  int v243 = *(_DWORD *)(v935 + 36);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v243;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  char v244 = (void *)a1[34];
  unsigned int v245 = *(_DWORD *)(v935 + 4);
  uint64_t v246 = v244[1];
  uint64_t v247 = v244[7];
  uint64_t v248 = *(unsigned int *)(v246 + 24 * v245 + 4);
  int v249 = *(unsigned __int16 *)(v247 + 2 * v248);
  if (*(_WORD *)(v247 + 2 * v248))
  {
    LOWORD(v249) = v249 + v245;
    unint64_t v250 = (_WORD *)(v244[11] + 2 * *(unsigned int *)(v246 + 24 * v245 + 12));
    unsigned int v251 = (unsigned __int16 *)(v247 + 2 * v248 + 2);
    while (*v250 != 1)
    {
      int v252 = *v251++;
      LOWORD(v249) = v252 + v249;
      ++v250;
      if (!v252)
      {
        int v249 = 0;
        goto LABEL_315;
      }
    }
    int v249 = (unsigned __int16)v249;
  }
LABEL_315:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x4000000;
  DWORD1(v940) = v249;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0x10000FFFFLL;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v228, v227, (const llvm::MachineOperand *)&v940);
  uint64_t v253 = *(void *)(a1[33] + 8) + 48 * v217;
  long long v254 = (llvm::MachineFunction *)v20[4];
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v255 = llvm::MachineFunction::CreateMachineInstr(v254, v253, v942, 0);
  int v256 = v932;
  if (v942[0])
  {
    int v837 = *v942[0];
    if ((v837 - 4) > 0x1E)
    {
      if ((v837 - 3) >= 0xFFFFFFFE) {
        BOOL v897 = v942[0];
      }
      else {
        BOOL v897 = 0;
      }
      if ((v837 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v837 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_318;
      }
      unint64_t v839 = (unint64_t)(v897 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_318;
      }
      uint64_t v838 = *((void *)v942[0] + 2);
      if ((v838 & 4) == 0) {
        goto LABEL_318;
      }
      unint64_t v839 = v838 & 0xFFFFFFFFFFFFFFF8;
      if (!v839) {
        goto LABEL_318;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v839 + 16, &v940);
    int v256 = v932;
  }
LABEL_318:
  unint64_t v257 = v20[5];
  *((void *)v255 + 3) = v257;
  uint64_t v258 = *(void *)(v257 + 32);
  uint64_t v259 = *((unsigned int *)v255 + 10);
  if (v259)
  {
    uint64_t v525 = *((void *)v255 + 4);
    uint64_t v526 = *(void *)(v258 + 40);
    uint64_t v527 = 32 * v259;
    do
    {
      if (!*(unsigned char *)v525)
      {
        uint64_t v528 = *(unsigned int *)(v525 + 4);
        if ((int)v528 >= 0) {
          v529 = (uint64_t *)(*(void *)(v526 + 272) + 8 * v528);
        }
        else {
          v529 = (uint64_t *)(*(void *)(v526 + 24) + 16 * (v528 & 0x7FFFFFFF) + 8);
        }
        uint64_t v530 = *v529;
        if (*v529)
        {
          uint64_t v531 = *(void *)(v530 + 16);
          *(void *)(v530 + 16) = v525;
          *(void *)(v525 + 16) = v531;
          if (*(unsigned char *)(v525 + 3))
          {
            *(void *)(v525 + 24) = v530;
          }
          else
          {
            *(void *)(v525 + 24) = 0;
            v529 = (uint64_t *)(v531 + 24);
          }
        }
        else
        {
          *(void *)(v525 + 16) = v525;
          *(void *)(v525 + 24) = 0;
        }
        uint64_t *v529 = v525;
      }
      v525 += 32;
      v527 -= 32;
    }
    while (v527);
  }
  uint64_t v260 = *(void *)(v258 + 728);
  if (v260) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v260 + 24))(v260, v255);
  }
  unint64_t v261 = *v206 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v255 = v261 | *(void *)v255 & 7;
  *((void *)v255 + 1) = v206;
  *(void *)(v261 + 8) = v255;
  *uint64_t v206 = *v206 & 7 | (unint64_t)v255;
  int v262 = (void *)a1[34];
  unsigned int v263 = *(_DWORD *)(v935 + 4);
  uint64_t v264 = v262[1];
  uint64_t v265 = v262[7];
  uint64_t v266 = *(unsigned int *)(v264 + 24 * v263 + 4);
  int v267 = *(unsigned __int16 *)(v265 + 2 * v266);
  if (*(_WORD *)(v265 + 2 * v266))
  {
    LOWORD(v267) = v267 + v263;
    uint64_t v268 = (_WORD *)(v262[11] + 2 * *(unsigned int *)(v264 + 24 * v263 + 12));
    unint64_t v269 = (unsigned __int16 *)(v265 + 2 * v266 + 2);
    while (*v268 != 1)
    {
      int v270 = *v269++;
      LOWORD(v267) = v270 + v267;
      ++v268;
      if (!v270)
      {
        int v267 = 0;
        goto LABEL_327;
      }
    }
    int v267 = (unsigned __int16)v267;
  }
LABEL_327:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v267;
  llvm::MachineInstr::addOperand(v255, v254, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v255, v254, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v255, v254, (const llvm::MachineOperand *)&v940);
  int v271 = (void *)a1[34];
  unsigned int v272 = *(_DWORD *)(v935 + 4);
  uint64_t v273 = v271[1];
  uint64_t v274 = v271[7];
  uint64_t v275 = *(unsigned int *)(v273 + 24 * v272 + 4);
  int v276 = *(unsigned __int16 *)(v274 + 2 * v275);
  if (*(_WORD *)(v274 + 2 * v275))
  {
    LOWORD(v276) = v276 + v272;
    BOOL v277 = (_WORD *)(v271[11] + 2 * *(unsigned int *)(v273 + 24 * v272 + 12));
    int v278 = (unsigned __int16 *)(v274 + 2 * v275 + 2);
    while (*v277 != 1)
    {
      int v279 = *v278++;
      LOWORD(v276) = v279 + v276;
      ++v277;
      if (!v279)
      {
        int v276 = 0;
        goto LABEL_333;
      }
    }
    int v276 = (unsigned __int16)v276;
  }
LABEL_333:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x4000000;
  DWORD1(v940) = v276;
  llvm::MachineInstr::addOperand(v255, v254, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v255, v254, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v255, v254, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v255, v254, (const llvm::MachineOperand *)&v940);
  uint64_t v280 = *(void *)(a1[33] + 8) + 227184;
  uint64_t v281 = (llvm::MachineFunction *)v20[4];
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  unint64_t v282 = llvm::MachineFunction::CreateMachineInstr(v281, v280, v942, 0);
  if (v942[0])
  {
    int v840 = *v942[0];
    if ((v840 - 4) > 0x1E)
    {
      if ((v840 - 3) >= 0xFFFFFFFE) {
        unsigned int v898 = v942[0];
      }
      else {
        unsigned int v898 = 0;
      }
      if ((v840 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v840 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_336;
      }
      unint64_t v842 = (unint64_t)(v898 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_336;
      }
      uint64_t v841 = *((void *)v942[0] + 2);
      if ((v841 & 4) == 0) {
        goto LABEL_336;
      }
      unint64_t v842 = v841 & 0xFFFFFFFFFFFFFFF8;
      if (!v842) {
        goto LABEL_336;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v842 + 16, &v940);
    int v256 = v932;
  }
LABEL_336:
  unint64_t v283 = v20[5];
  *((void *)v282 + 3) = v283;
  uint64_t v284 = *(void *)(v283 + 32);
  uint64_t v285 = *((unsigned int *)v282 + 10);
  if (v285)
  {
    uint64_t v532 = *((void *)v282 + 4);
    uint64_t v533 = *(void *)(v284 + 40);
    uint64_t v534 = 32 * v285;
    do
    {
      if (!*(unsigned char *)v532)
      {
        uint64_t v535 = *(unsigned int *)(v532 + 4);
        if ((int)v535 >= 0) {
          uint64_t v536 = (uint64_t *)(*(void *)(v533 + 272) + 8 * v535);
        }
        else {
          uint64_t v536 = (uint64_t *)(*(void *)(v533 + 24) + 16 * (v535 & 0x7FFFFFFF) + 8);
        }
        uint64_t v537 = *v536;
        if (*v536)
        {
          uint64_t v538 = *(void *)(v537 + 16);
          *(void *)(v537 + 16) = v532;
          *(void *)(v532 + 16) = v538;
          if (*(unsigned char *)(v532 + 3))
          {
            *(void *)(v532 + 24) = v537;
          }
          else
          {
            *(void *)(v532 + 24) = 0;
            uint64_t v536 = (uint64_t *)(v538 + 24);
          }
        }
        else
        {
          *(void *)(v532 + 16) = v532;
          *(void *)(v532 + 24) = 0;
        }
        *uint64_t v536 = v532;
      }
      v532 += 32;
      v534 -= 32;
    }
    while (v534);
  }
  uint64_t v286 = *(void *)(v284 + 728);
  if (v286) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v286 + 24))(v286, v282);
  }
  unint64_t v287 = *v206 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v282 = v287 | *(void *)v282 & 7;
  *((void *)v282 + 1) = v206;
  *(void *)(v287 + 8) = v282;
  *uint64_t v206 = *v206 & 7 | (unint64_t)v282;
  uint64_t v288 = (void *)a1[34];
  unsigned int v289 = *(_DWORD *)(v935 + 4);
  uint64_t v290 = v288[1];
  uint64_t v291 = v288[7];
  uint64_t v292 = *(unsigned int *)(v290 + 24 * v289 + 4);
  int v293 = *(unsigned __int16 *)(v291 + 2 * v292);
  if (*(_WORD *)(v291 + 2 * v292))
  {
    LOWORD(v293) = v293 + v289;
    int v294 = (_WORD *)(v288[11] + 2 * *(unsigned int *)(v290 + 24 * v289 + 12));
    BOOL v295 = (unsigned __int16 *)(v291 + 2 * v292 + 2);
    while (*v294 != 2)
    {
      int v296 = *v295++;
      LOWORD(v293) = v296 + v293;
      ++v294;
      if (!v296)
      {
        int v293 = 0;
        goto LABEL_345;
      }
    }
    int v293 = (unsigned __int16)v293;
  }
LABEL_345:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v293;
  llvm::MachineInstr::addOperand(v282, v281, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v282, v281, (const llvm::MachineOperand *)&v940);
  int v297 = (void *)a1[34];
  unsigned int v298 = *(_DWORD *)(v935 + 4);
  uint64_t v299 = v297[1];
  uint64_t v300 = v297[7];
  uint64_t v301 = *(unsigned int *)(v299 + 24 * v298 + 4);
  int v302 = *(unsigned __int16 *)(v300 + 2 * v301);
  if (*(_WORD *)(v300 + 2 * v301))
  {
    LOWORD(v302) = v302 + v298;
    unint64_t v303 = (_WORD *)(v297[11] + 2 * *(unsigned int *)(v299 + 24 * v298 + 12));
    unint64_t v304 = (unsigned __int16 *)(v300 + 2 * v301 + 2);
    while (*v303 != 2)
    {
      int v305 = *v304++;
      LOWORD(v302) = v305 + v302;
      ++v303;
      if (!v305)
      {
        int v302 = 0;
        goto LABEL_351;
      }
    }
    int v302 = (unsigned __int16)v302;
  }
LABEL_351:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x4000000;
  DWORD1(v940) = v302;
  llvm::MachineInstr::addOperand(v282, v281, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v282, v281, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v282, v281, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v282, v281, (const llvm::MachineOperand *)&v940);
  uint64_t v306 = *(void *)(a1[33] + 8) + 48 * v216;
  uint64_t v307 = (llvm::MachineFunction *)v20[4];
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  int v308 = llvm::MachineFunction::CreateMachineInstr(v307, v306, v942, 0);
  if (v942[0])
  {
    int v843 = *v942[0];
    if ((v843 - 4) > 0x1E)
    {
      if ((v843 - 3) >= 0xFFFFFFFE) {
        v899 = v942[0];
      }
      else {
        v899 = 0;
      }
      if ((v843 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v843 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_354;
      }
      unint64_t v845 = (unint64_t)(v899 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_354;
      }
      uint64_t v844 = *((void *)v942[0] + 2);
      if ((v844 & 4) == 0) {
        goto LABEL_354;
      }
      unint64_t v845 = v844 & 0xFFFFFFFFFFFFFFF8;
      if (!v845) {
        goto LABEL_354;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v845 + 16, &v940);
    int v256 = v932;
  }
LABEL_354:
  unint64_t v309 = v20[5];
  *((void *)v308 + 3) = v309;
  uint64_t v310 = *(void *)(v309 + 32);
  uint64_t v311 = *((unsigned int *)v308 + 10);
  if (v311)
  {
    uint64_t v539 = *((void *)v308 + 4);
    uint64_t v540 = *(void *)(v310 + 40);
    uint64_t v541 = 32 * v311;
    do
    {
      if (!*(unsigned char *)v539)
      {
        uint64_t v542 = *(unsigned int *)(v539 + 4);
        if ((int)v542 >= 0) {
          uint64_t v543 = (uint64_t *)(*(void *)(v540 + 272) + 8 * v542);
        }
        else {
          uint64_t v543 = (uint64_t *)(*(void *)(v540 + 24) + 16 * (v542 & 0x7FFFFFFF) + 8);
        }
        uint64_t v544 = *v543;
        if (*v543)
        {
          uint64_t v545 = *(void *)(v544 + 16);
          *(void *)(v544 + 16) = v539;
          *(void *)(v539 + 16) = v545;
          if (*(unsigned char *)(v539 + 3))
          {
            *(void *)(v539 + 24) = v544;
          }
          else
          {
            *(void *)(v539 + 24) = 0;
            uint64_t v543 = (uint64_t *)(v545 + 24);
          }
        }
        else
        {
          *(void *)(v539 + 16) = v539;
          *(void *)(v539 + 24) = 0;
        }
        *uint64_t v543 = v539;
      }
      v539 += 32;
      v541 -= 32;
    }
    while (v541);
  }
  uint64_t v312 = *(void *)(v310 + 728);
  if (v312) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v312 + 24))(v312, v308);
  }
  unint64_t v313 = *v206 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v308 = v313 | *(void *)v308 & 7;
  *((void *)v308 + 1) = v206;
  *(void *)(v313 + 8) = v308;
  *uint64_t v206 = *v206 & 7 | (unint64_t)v308;
  int v314 = *(_DWORD *)(v935 + 4);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v314;
  llvm::MachineInstr::addOperand(v308, v307, (const llvm::MachineOperand *)&v940);
  uint64_t v315 = *v930 >> v215;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v315;
  llvm::MachineInstr::addOperand(v308, v307, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v308, v307, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v308, v307, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v308, v307, (const llvm::MachineOperand *)&v940);
  if (v256)
  {
    uint64_t v316 = *(void *)(a1[33] + 8) + 644640;
    uint64_t v317 = (llvm::MachineFunction *)v20[4];
    v942[0] = v939;
    if (v939) {
      llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
    }
    unint64_t v318 = llvm::MachineFunction::CreateMachineInstr(v317, v316, v942, 0);
    if (!v942[0]) {
      goto LABEL_361;
    }
    int v876 = *v942[0];
    if ((v876 - 4) > 0x1E)
    {
      if ((v876 - 3) >= 0xFFFFFFFE) {
        unsigned int v910 = v942[0];
      }
      else {
        unsigned int v910 = 0;
      }
      if ((v876 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v876 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_361;
      }
      unint64_t v878 = (unint64_t)(v910 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_361;
      }
      uint64_t v877 = *((void *)v942[0] + 2);
      if ((v877 & 4) == 0) {
        goto LABEL_361;
      }
      unint64_t v878 = v877 & 0xFFFFFFFFFFFFFFF8;
      if (!v878) {
        goto LABEL_361;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v878 + 16, &v940);
    int v256 = v932;
LABEL_361:
    unint64_t v319 = v20[5];
    *((void *)v318 + 3) = v319;
    uint64_t v320 = *(void *)(v319 + 32);
    uint64_t v321 = *((unsigned int *)v318 + 10);
    if (v321)
    {
      uint64_t v618 = *((void *)v318 + 4);
      uint64_t v619 = *(void *)(v320 + 40);
      uint64_t v620 = 32 * v321;
      do
      {
        if (!*(unsigned char *)v618)
        {
          uint64_t v621 = *(unsigned int *)(v618 + 4);
          if ((int)v621 >= 0) {
            int v622 = (uint64_t *)(*(void *)(v619 + 272) + 8 * v621);
          }
          else {
            int v622 = (uint64_t *)(*(void *)(v619 + 24) + 16 * (v621 & 0x7FFFFFFF) + 8);
          }
          uint64_t v623 = *v622;
          if (*v622)
          {
            uint64_t v624 = *(void *)(v623 + 16);
            *(void *)(v623 + 16) = v618;
            *(void *)(v618 + 16) = v624;
            if (*(unsigned char *)(v618 + 3))
            {
              *(void *)(v618 + 24) = v623;
            }
            else
            {
              *(void *)(v618 + 24) = 0;
              int v622 = (uint64_t *)(v624 + 24);
            }
          }
          else
          {
            *(void *)(v618 + 16) = v618;
            *(void *)(v618 + 24) = 0;
          }
          *int v622 = v618;
        }
        v618 += 32;
        v620 -= 32;
      }
      while (v620);
    }
    uint64_t v322 = *(void *)(v320 + 728);
    if (v322) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v322 + 24))(v322, v318);
    }
    unint64_t v323 = *v206 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v318 = v323 | *(void *)v318 & 7;
    *((void *)v318 + 1) = v206;
    *(void *)(v323 + 8) = v318;
    *uint64_t v206 = *v206 & 7 | (unint64_t)v318;
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(v318, v317, (const llvm::MachineOperand *)&v940);
  }
  uint64_t v324 = *(void *)(a1[33] + 8) + 18960;
  int v325 = (llvm::MachineFunction *)v20[4];
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  int v326 = llvm::MachineFunction::CreateMachineInstr(v325, v324, v942, 0);
  if (v942[0])
  {
    int v846 = *v942[0];
    if ((v846 - 4) > 0x1E)
    {
      if ((v846 - 3) >= 0xFFFFFFFE) {
        int v900 = v942[0];
      }
      else {
        int v900 = 0;
      }
      if ((v846 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v846 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_368;
      }
      unint64_t v848 = (unint64_t)(v900 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_368;
      }
      uint64_t v847 = *((void *)v942[0] + 2);
      if ((v847 & 4) == 0) {
        goto LABEL_368;
      }
      unint64_t v848 = v847 & 0xFFFFFFFFFFFFFFF8;
      if (!v848) {
        goto LABEL_368;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v848 + 16, &v940);
    int v256 = v932;
  }
LABEL_368:
  unint64_t v327 = v20[5];
  *((void *)v326 + 3) = v327;
  uint64_t v328 = *(void *)(v327 + 32);
  uint64_t v329 = *((unsigned int *)v326 + 10);
  if (v329)
  {
    uint64_t v546 = *((void *)v326 + 4);
    uint64_t v547 = *(void *)(v328 + 40);
    uint64_t v548 = 32 * v329;
    do
    {
      if (!*(unsigned char *)v546)
      {
        uint64_t v549 = *(unsigned int *)(v546 + 4);
        if ((int)v549 >= 0) {
          v550 = (uint64_t *)(*(void *)(v547 + 272) + 8 * v549);
        }
        else {
          v550 = (uint64_t *)(*(void *)(v547 + 24) + 16 * (v549 & 0x7FFFFFFF) + 8);
        }
        uint64_t v551 = *v550;
        if (*v550)
        {
          uint64_t v552 = *(void *)(v551 + 16);
          *(void *)(v551 + 16) = v546;
          *(void *)(v546 + 16) = v552;
          if (*(unsigned char *)(v546 + 3))
          {
            *(void *)(v546 + 24) = v551;
          }
          else
          {
            *(void *)(v546 + 24) = 0;
            v550 = (uint64_t *)(v552 + 24);
          }
        }
        else
        {
          *(void *)(v546 + 16) = v546;
          *(void *)(v546 + 24) = 0;
        }
        uint64_t *v550 = v546;
      }
      v546 += 32;
      v548 -= 32;
    }
    while (v548);
  }
  uint64_t v330 = *(void *)(v328 + 728);
  if (v330) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v330 + 24))(v330, v326);
  }
  unint64_t v331 = v20[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v326 = v331 | *(void *)v326 & 7;
  *((void *)v326 + 1) = v206;
  *(void *)(v331 + 8) = v326;
  v20[6] = v20[6] & 7 | (unint64_t)v326;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v20;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v326, v325, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 3;
  llvm::MachineInstr::addOperand(v326, v325, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v326, v325, (const llvm::MachineOperand *)&v940);
  uint64_t v332 = *(void *)(a1[33] + 8) + 239856;
  v333 = (llvm::MachineFunction *)*((void *)v937 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v334 = llvm::MachineFunction::CreateMachineInstr(v333, v332, v942, 0);
  if (v942[0])
  {
    int v849 = *v942[0];
    if ((v849 - 4) > 0x1E)
    {
      if ((v849 - 3) >= 0xFFFFFFFE) {
        uint64_t v901 = v942[0];
      }
      else {
        uint64_t v901 = 0;
      }
      if ((v849 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v849 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_374;
      }
      unint64_t v851 = (unint64_t)(v901 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_374;
      }
      uint64_t v850 = *((void *)v942[0] + 2);
      if ((v850 & 4) == 0) {
        goto LABEL_374;
      }
      unint64_t v851 = v850 & 0xFFFFFFFFFFFFFFF8;
      if (!v851) {
        goto LABEL_374;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v851 + 16, &v940);
    int v256 = v932;
  }
LABEL_374:
  v335 = (void *)((char *)v937 + 48);
  uint64_t v336 = *((void *)v937 + 5);
  *((void *)v334 + 3) = v336;
  uint64_t v337 = *(void *)(v336 + 32);
  uint64_t v338 = *((unsigned int *)v334 + 10);
  if (v338)
  {
    uint64_t v553 = *((void *)v334 + 4);
    uint64_t v554 = *(void *)(v337 + 40);
    uint64_t v555 = 32 * v338;
    do
    {
      if (!*(unsigned char *)v553)
      {
        uint64_t v556 = *(unsigned int *)(v553 + 4);
        if ((int)v556 >= 0) {
          v557 = (uint64_t *)(*(void *)(v554 + 272) + 8 * v556);
        }
        else {
          v557 = (uint64_t *)(*(void *)(v554 + 24) + 16 * (v556 & 0x7FFFFFFF) + 8);
        }
        uint64_t v558 = *v557;
        if (*v557)
        {
          uint64_t v559 = *(void *)(v558 + 16);
          *(void *)(v558 + 16) = v553;
          *(void *)(v553 + 16) = v559;
          if (*(unsigned char *)(v553 + 3))
          {
            *(void *)(v553 + 24) = v558;
          }
          else
          {
            *(void *)(v553 + 24) = 0;
            v557 = (uint64_t *)(v559 + 24);
          }
        }
        else
        {
          *(void *)(v553 + 16) = v553;
          *(void *)(v553 + 24) = 0;
        }
        uint64_t *v557 = v553;
      }
      v553 += 32;
      v555 -= 32;
    }
    while (v555);
  }
  uint64_t v339 = *(void *)(v337 + 728);
  if (v339) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v339 + 24))(v339, v334);
  }
  unint64_t v340 = *v335 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v334 = v340 | *(void *)v334 & 7;
  *((void *)v334 + 1) = v335;
  *(void *)(v340 + 8) = v334;
  void *v335 = *v335 & 7 | (unint64_t)v334;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v334, v333, (const llvm::MachineOperand *)&v940);
  v341 = (void *)a1[34];
  unsigned int v342 = *(_DWORD *)(v935 + 4);
  uint64_t v343 = v341[1];
  uint64_t v344 = v341[7];
  uint64_t v345 = *(unsigned int *)(v343 + 24 * v342 + 4);
  int v346 = *(unsigned __int16 *)(v344 + 2 * v345);
  if (*(_WORD *)(v344 + 2 * v345))
  {
    LOWORD(v346) = v346 + v342;
    int v347 = (_WORD *)(v341[11] + 2 * *(unsigned int *)(v343 + 24 * v342 + 12));
    BOOL v348 = (unsigned __int16 *)(v344 + 2 * v345 + 2);
    while (*v347 != 1)
    {
      int v349 = *v348++;
      LOWORD(v346) = v349 + v346;
      ++v347;
      if (!v349)
      {
        int v346 = 0;
        goto LABEL_383;
      }
    }
    int v346 = (unsigned __int16)v346;
  }
LABEL_383:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x4000000;
  DWORD1(v940) = v346;
  llvm::MachineInstr::addOperand(v334, v333, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v334, v333, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v334, v333, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v334, v333, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v334, v333, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v334, v333, (const llvm::MachineOperand *)&v940);
  if (v926) {
    goto LABEL_398;
  }
  uint64_t v350 = v933 + 3;
  uint64_t v351 = *(void *)(a2 + 32);
  uint64_t v352 = *(void *)(a1[33] + 8);
  if (!v256)
  {
    uint64_t v353 = v352 + 139344;
    unint64_t v354 = (llvm::MachineFunction *)*((void *)v937 + 4);
    v942[0] = v939;
    if (v939) {
      llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
    }
    uint64_t v355 = llvm::MachineFunction::CreateMachineInstr(v354, v353, v942, 0);
    if (!v942[0])
    {
LABEL_388:
      uint64_t v356 = *((void *)v937 + 5);
      *((void *)v355 + 3) = v356;
      uint64_t v357 = *(void *)(v356 + 32);
      uint64_t v358 = *((unsigned int *)v355 + 10);
      if (v358)
      {
        uint64_t v760 = *((void *)v355 + 4);
        uint64_t v761 = *(void *)(v357 + 40);
        uint64_t v762 = 32 * v358;
        do
        {
          if (!*(unsigned char *)v760)
          {
            uint64_t v763 = *(unsigned int *)(v760 + 4);
            if ((int)v763 >= 0) {
              unsigned int v764 = (uint64_t *)(*(void *)(v761 + 272) + 8 * v763);
            }
            else {
              unsigned int v764 = (uint64_t *)(*(void *)(v761 + 24) + 16 * (v763 & 0x7FFFFFFF) + 8);
            }
            uint64_t v765 = *v764;
            if (*v764)
            {
              uint64_t v766 = *(void *)(v765 + 16);
              *(void *)(v765 + 16) = v760;
              *(void *)(v760 + 16) = v766;
              if (*(unsigned char *)(v760 + 3))
              {
                *(void *)(v760 + 24) = v765;
              }
              else
              {
                *(void *)(v760 + 24) = 0;
                unsigned int v764 = (uint64_t *)(v766 + 24);
              }
            }
            else
            {
              *(void *)(v760 + 16) = v760;
              *(void *)(v760 + 24) = 0;
            }
            *unsigned int v764 = v760;
          }
          v760 += 32;
          v762 -= 32;
        }
        while (v762);
      }
      uint64_t v359 = *(void *)(v357 + 728);
      if (v359) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v359 + 24))(v359, v355);
      }
      unint64_t v360 = *((void *)v937 + 6) & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v355 = v360 | *(void *)v355 & 7;
      *((void *)v355 + 1) = v335;
      *(void *)(v360 + 8) = v355;
      *((void *)v937 + 6) = *((void *)v937 + 6) & 7 | (unint64_t)v355;
      int v361 = *(_DWORD *)(v351 + 32 * v350 + 4);
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0;
      DWORD1(v940) = v361;
      llvm::MachineInstr::addOperand(v355, v354, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v355, v354, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v355, v354, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 1;
      llvm::MachineInstr::addOperand(v355, v354, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v355, v354, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v355, v354, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 1;
      llvm::MachineInstr::addOperand(v355, v354, (const llvm::MachineOperand *)&v940);
      long long v941 = 0uLL;
      long long v940 = 0x200000000uLL;
      llvm::MachineInstr::addOperand(v355, v354, (const llvm::MachineOperand *)&v940);
      uint64_t v362 = *(void *)(a1[33] + 8) + 644640;
      v363 = (llvm::MachineFunction *)*((void *)v937 + 4);
      v942[0] = v939;
      if (v939) {
        llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
      }
      v364 = llvm::MachineFunction::CreateMachineInstr(v363, v362, v942, 0);
      if (!v942[0]) {
        goto LABEL_394;
      }
      int v885 = *v942[0];
      if ((v885 - 4) > 0x1E)
      {
        if ((v885 - 3) >= 0xFFFFFFFE) {
          v913 = v942[0];
        }
        else {
          v913 = 0;
        }
        if ((v885 - 3) < 0xFFFFFFFE)
        {
          int v256 = v932;
          if (v885 == 3) {
            *((void *)v942[0] + 1) = 0;
          }
          goto LABEL_394;
        }
        unint64_t v887 = (unint64_t)(v913 + 8);
      }
      else
      {
        int v256 = v932;
        if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)
          || (uint64_t v886 = *((void *)v942[0] + 2), (v886 & 4) == 0)
          || (unint64_t v887 = v886 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_394:
          uint64_t v365 = *((void *)v937 + 5);
          *((void *)v364 + 3) = v365;
          uint64_t v366 = *(void *)(v365 + 32);
          uint64_t v367 = *((unsigned int *)v364 + 10);
          if (v367)
          {
            uint64_t v767 = *((void *)v364 + 4);
            uint64_t v768 = *(void *)(v366 + 40);
            uint64_t v769 = 32 * v367;
            do
            {
              if (!*(unsigned char *)v767)
              {
                uint64_t v770 = *(unsigned int *)(v767 + 4);
                if ((int)v770 >= 0) {
                  v771 = (uint64_t *)(*(void *)(v768 + 272) + 8 * v770);
                }
                else {
                  v771 = (uint64_t *)(*(void *)(v768 + 24) + 16 * (v770 & 0x7FFFFFFF) + 8);
                }
                uint64_t v772 = *v771;
                if (*v771)
                {
                  uint64_t v773 = *(void *)(v772 + 16);
                  *(void *)(v772 + 16) = v767;
                  *(void *)(v767 + 16) = v773;
                  if (*(unsigned char *)(v767 + 3))
                  {
                    *(void *)(v767 + 24) = v772;
                  }
                  else
                  {
                    *(void *)(v767 + 24) = 0;
                    v771 = (uint64_t *)(v773 + 24);
                  }
                }
                else
                {
                  *(void *)(v767 + 16) = v767;
                  *(void *)(v767 + 24) = 0;
                }
                uint64_t *v771 = v767;
              }
              v767 += 32;
              v769 -= 32;
            }
            while (v769);
          }
          goto LABEL_395;
        }
      }
      *(void *)&long long v940 = v942;
      sub_1CC5FA668(v887 + 16, &v940);
      int v256 = v932;
      goto LABEL_394;
    }
    int v882 = *v942[0];
    if ((v882 - 4) > 0x1E)
    {
      if ((v882 - 3) >= 0xFFFFFFFE) {
        v912 = v942[0];
      }
      else {
        v912 = 0;
      }
      if ((v882 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v882 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_388;
      }
      unint64_t v884 = (unint64_t)(v912 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_388;
      }
      uint64_t v883 = *((void *)v942[0] + 2);
      if ((v883 & 4) == 0) {
        goto LABEL_388;
      }
      unint64_t v884 = v883 & 0xFFFFFFFFFFFFFFF8;
      if (!v884) {
        goto LABEL_388;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v884 + 16, &v940);
    int v256 = v932;
    goto LABEL_388;
  }
  uint64_t v632 = v352 + 17904;
  v633 = (llvm::MachineFunction *)*((void *)v937 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v634 = llvm::MachineFunction::CreateMachineInstr(v633, v632, v942, 0);
  if (v942[0])
  {
    int v914 = *v942[0];
    if ((v914 - 4) > 0x1E)
    {
      if ((v914 - 3) >= 0xFFFFFFFE) {
        v923 = v942[0];
      }
      else {
        v923 = 0;
      }
      if ((v914 - 3) < 0xFFFFFFFE)
      {
        if (v914 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_790;
      }
      unint64_t v916 = (unint64_t)(v923 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_790;
      }
      uint64_t v915 = *((void *)v942[0] + 2);
      if ((v915 & 4) == 0) {
        goto LABEL_790;
      }
      unint64_t v916 = v915 & 0xFFFFFFFFFFFFFFF8;
      if (!v916) {
        goto LABEL_790;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v916 + 16, &v940);
  }
LABEL_790:
  uint64_t v635 = *((void *)v937 + 5);
  *((void *)v634 + 3) = v635;
  uint64_t v636 = *(void *)(v635 + 32);
  uint64_t v637 = *((unsigned int *)v634 + 10);
  if (v637)
  {
    uint64_t v795 = *((void *)v634 + 4);
    uint64_t v796 = *(void *)(v636 + 40);
    uint64_t v797 = 32 * v637;
    do
    {
      if (!*(unsigned char *)v795)
      {
        uint64_t v798 = *(unsigned int *)(v795 + 4);
        if ((int)v798 >= 0) {
          v799 = (uint64_t *)(*(void *)(v796 + 272) + 8 * v798);
        }
        else {
          v799 = (uint64_t *)(*(void *)(v796 + 24) + 16 * (v798 & 0x7FFFFFFF) + 8);
        }
        uint64_t v800 = *v799;
        if (*v799)
        {
          uint64_t v801 = *(void *)(v800 + 16);
          *(void *)(v800 + 16) = v795;
          *(void *)(v795 + 16) = v801;
          if (*(unsigned char *)(v795 + 3))
          {
            *(void *)(v795 + 24) = v800;
          }
          else
          {
            *(void *)(v795 + 24) = 0;
            v799 = (uint64_t *)(v801 + 24);
          }
        }
        else
        {
          *(void *)(v795 + 16) = v795;
          *(void *)(v795 + 24) = 0;
        }
        uint64_t *v799 = v795;
      }
      v795 += 32;
      v797 -= 32;
    }
    while (v797);
  }
  uint64_t v638 = *(void *)(v636 + 728);
  if (v638) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v638 + 24))(v638, v634);
  }
  unint64_t v639 = *v335 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v634 = v639 | *(void *)v634 & 7;
  *((void *)v634 + 1) = v335;
  *(void *)(v639 + 8) = v634;
  void *v335 = *v335 & 7 | (unint64_t)v634;
  uint64_t v640 = (void *)a1[34];
  uint64_t v641 = v351 + 32 * v350;
  unsigned int v644 = *(_DWORD *)(v641 + 4);
  unsigned int v643 = (unsigned int *)(v641 + 4);
  unsigned int v642 = v644;
  uint64_t v645 = v640[1];
  uint64_t v646 = v640[7];
  uint64_t v647 = *(unsigned int *)(v645 + 24 * v644 + 4);
  int v648 = *(unsigned __int16 *)(v646 + 2 * v647);
  if (*(_WORD *)(v646 + 2 * v647))
  {
    LOWORD(v648) = v648 + v642;
    BOOL v649 = (_WORD *)(v640[11] + 2 * *(unsigned int *)(v645 + 24 * v642 + 12));
    unsigned int v650 = (unsigned __int16 *)(v646 + 2 * v647 + 2);
    while (*v649 != 1)
    {
      int v651 = *v650++;
      LOWORD(v648) = v651 + v648;
      ++v649;
      if (!v651)
      {
        int v648 = 0;
        goto LABEL_805;
      }
    }
    int v648 = (unsigned __int16)v648;
  }
LABEL_805:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v648;
  llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 32;
  llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v940);
  v652 = (void *)a1[34];
  unsigned int v653 = *v643;
  uint64_t v654 = v652[1];
  uint64_t v655 = v652[7];
  uint64_t v656 = *(unsigned int *)(v654 + 24 * *v643 + 4);
  int v657 = *(unsigned __int16 *)(v655 + 2 * v656);
  if (*(_WORD *)(v655 + 2 * v656))
  {
    LOWORD(v657) = v657 + v653;
    int v658 = (_WORD *)(v652[11] + 2 * *(unsigned int *)(v654 + 24 * v653 + 12));
    uint64_t v659 = (unsigned __int16 *)(v655 + 2 * v656 + 2);
    while (*v658 != 1)
    {
      int v660 = *v659++;
      LOWORD(v657) = v660 + v657;
      ++v658;
      if (!v660)
      {
        int v657 = 0;
        goto LABEL_811;
      }
    }
    int v657 = (unsigned __int16)v657;
  }
LABEL_811:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v657;
  llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 16;
  llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0x10000FF0FLL;
  llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v940);
  unsigned int v661 = *v643;
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 100663296;
  DWORD1(v940) = v661;
  llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v940);
  unsigned int v662 = *v643;
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 50331648;
  DWORD1(v940) = v662;
  llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v940);
  uint64_t v663 = a1[31];
  uint64_t v664 = *v12;
  LODWORD(v940) = 0;
  BOOL v665 = sub_1CD3CA314(v663, v664, "IDFCMode", &v940);
  uint64_t v666 = v940;
  uint64_t v667 = a1[31];
  uint64_t v668 = *v12;
  LODWORD(v940) = 0;
  BOOL v669 = sub_1CD3CA314(v667, v668, "IDFSLCMode", &v940);
  uint64_t v670 = v940;
  uint64_t v671 = *(void *)(a1[33] + 8) + 139296;
  int v672 = (llvm::MachineFunction *)*((void *)v937 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  v673 = llvm::MachineFunction::CreateMachineInstr(v672, v671, v942, 0);
  if (!v942[0]) {
    goto LABEL_814;
  }
  int v917 = *v942[0];
  if ((v917 - 4) > 0x1E)
  {
    if ((v917 - 3) >= 0xFFFFFFFE) {
      uint64_t v924 = v942[0];
    }
    else {
      uint64_t v924 = 0;
    }
    if ((v917 - 3) < 0xFFFFFFFE)
    {
      if (v917 == 3) {
        *((void *)v942[0] + 1) = 0;
      }
      goto LABEL_814;
    }
    unint64_t v919 = (unint64_t)(v924 + 8);
  }
  else
  {
    if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
      goto LABEL_814;
    }
    uint64_t v918 = *((void *)v942[0] + 2);
    if ((v918 & 4) == 0) {
      goto LABEL_814;
    }
    unint64_t v919 = v918 & 0xFFFFFFFFFFFFFFF8;
    if (!v919) {
      goto LABEL_814;
    }
  }
  *(void *)&long long v940 = v942;
  sub_1CC5FA668(v919 + 16, &v940);
LABEL_814:
  uint64_t v674 = *((void *)v937 + 5);
  *((void *)v673 + 3) = v674;
  uint64_t v675 = *(void *)(v674 + 32);
  uint64_t v676 = *((unsigned int *)v673 + 10);
  if (v676)
  {
    uint64_t v802 = *((void *)v673 + 4);
    uint64_t v803 = *(void *)(v675 + 40);
    uint64_t v804 = 32 * v676;
    do
    {
      if (!*(unsigned char *)v802)
      {
        uint64_t v805 = *(unsigned int *)(v802 + 4);
        if ((int)v805 >= 0) {
          v806 = (uint64_t *)(*(void *)(v803 + 272) + 8 * v805);
        }
        else {
          v806 = (uint64_t *)(*(void *)(v803 + 24) + 16 * (v805 & 0x7FFFFFFF) + 8);
        }
        uint64_t v807 = *v806;
        if (*v806)
        {
          uint64_t v808 = *(void *)(v807 + 16);
          *(void *)(v807 + 16) = v802;
          *(void *)(v802 + 16) = v808;
          if (*(unsigned char *)(v802 + 3))
          {
            *(void *)(v802 + 24) = v807;
          }
          else
          {
            *(void *)(v802 + 24) = 0;
            v806 = (uint64_t *)(v808 + 24);
          }
        }
        else
        {
          *(void *)(v802 + 16) = v802;
          *(void *)(v802 + 24) = 0;
        }
        uint64_t *v806 = v802;
      }
      v802 += 32;
      v804 -= 32;
    }
    while (v804);
  }
  uint64_t v677 = *(void *)(v675 + 728);
  if (v677) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v677 + 24))(v677, v673);
  }
  unint64_t v678 = *v335 & 0xFFFFFFFFFFFFFFF8;
  *(void *)v673 = v678 | *(void *)v673 & 7;
  *((void *)v673 + 1) = v335;
  *(void *)(v678 + 8) = v673;
  void *v335 = *v335 & 7 | (unint64_t)v673;
  unsigned int v679 = *v643;
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v679;
  llvm::MachineInstr::addOperand(v673, v672, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  if (v665) {
    uint64_t v680 = v666;
  }
  else {
    uint64_t v680 = 0;
  }
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v680;
  llvm::MachineInstr::addOperand(v673, v672, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  if (v669) {
    uint64_t v681 = v670;
  }
  else {
    uint64_t v681 = 0;
  }
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v681;
  llvm::MachineInstr::addOperand(v673, v672, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v673, v672, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v673, v672, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v673, v672, (const llvm::MachineOperand *)&v940);
  uint64_t v682 = v681;
  for (int i = 1; i != 16; ++i)
  {
    uint64_t v684 = *(void *)(a1[33] + 8);
    int v685 = (llvm::MachineFunction *)*((void *)v937 + 4);
    v942[0] = v939;
    if (v939) {
      llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
    }
    int v686 = llvm::MachineFunction::CreateMachineInstr(v685, v684 + 133392, v942, 0);
    if (v942[0])
    {
      int v735 = *v942[0];
      if ((v735 - 4) > 0x1E)
      {
        if ((v735 - 3) >= 0xFFFFFFFE) {
          unsigned int v741 = v942[0];
        }
        else {
          unsigned int v741 = 0;
        }
        if ((v735 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v737 = (unint64_t)(v741 + 8);
LABEL_893:
          *(void *)&long long v940 = v942;
          sub_1CC5FA668(v737 + 16, &v940);
          goto LABEL_827;
        }
        if (v735 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
      }
      else if ((v942[0][1] & 0x7F) == 2 || *((_DWORD *)v942[0] + 3))
      {
        uint64_t v736 = *((void *)v942[0] + 2);
        if ((v736 & 4) != 0)
        {
          unint64_t v737 = v736 & 0xFFFFFFFFFFFFFFF8;
          if (v737) {
            goto LABEL_893;
          }
        }
      }
    }
LABEL_827:
    uint64_t v687 = *((void *)v937 + 5);
    *((void *)v686 + 3) = v687;
    uint64_t v688 = *(void *)(v687 + 32);
    uint64_t v689 = *((unsigned int *)v686 + 10);
    if (v689)
    {
      uint64_t v721 = *((void *)v686 + 4);
      uint64_t v722 = *(void *)(v688 + 40);
      uint64_t v723 = 32 * v689;
      do
      {
        if (!*(unsigned char *)v721)
        {
          uint64_t v724 = *(unsigned int *)(v721 + 4);
          if ((int)v724 >= 0) {
            uint64_t v725 = (uint64_t *)(*(void *)(v722 + 272) + 8 * v724);
          }
          else {
            uint64_t v725 = (uint64_t *)(*(void *)(v722 + 24) + 16 * (v724 & 0x7FFFFFFF) + 8);
          }
          uint64_t v726 = *v725;
          if (*v725)
          {
            uint64_t v727 = *(void *)(v726 + 16);
            *(void *)(v726 + 16) = v721;
            *(void *)(v721 + 16) = v727;
            if (*(unsigned char *)(v721 + 3))
            {
              *(void *)(v721 + 24) = v726;
            }
            else
            {
              *(void *)(v721 + 24) = 0;
              uint64_t v725 = (uint64_t *)(v727 + 24);
            }
          }
          else
          {
            *(void *)(v721 + 16) = v721;
            *(void *)(v721 + 24) = 0;
          }
          *uint64_t v725 = v721;
        }
        v721 += 32;
        v723 -= 32;
      }
      while (v723);
    }
    uint64_t v690 = *(void *)(v688 + 728);
    if (v690) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v690 + 24))(v690, v686);
    }
    unint64_t v691 = *v335 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v686 = v691 | *(void *)v686 & 7;
    *((void *)v686 + 1) = v335;
    *(void *)(v691 + 8) = v686;
    void *v335 = *v335 & 7 | (unint64_t)v686;
    v692 = (void *)a1[34];
    unsigned int v693 = *v643;
    uint64_t v694 = v692[1];
    uint64_t v695 = v692[7];
    uint64_t v696 = *(unsigned int *)(v694 + 24 * *v643 + 4);
    int v697 = *(unsigned __int16 *)(v695 + 2 * v696);
    if (*(_WORD *)(v695 + 2 * v696))
    {
      LOWORD(v697) = v697 + v693;
      int v698 = (_WORD *)(v692[11] + 2 * *(unsigned int *)(v694 + 24 * v693 + 12));
      v699 = (unsigned __int16 *)(v695 + 2 * v696 + 2);
      while (*v698 != 1)
      {
        int v700 = *v699++;
        LOWORD(v697) = v700 + v697;
        ++v698;
        if (!v700)
        {
          int v697 = 0;
          goto LABEL_836;
        }
      }
      int v697 = (unsigned __int16)v697;
    }
LABEL_836:
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    DWORD1(v940) = v697;
    LODWORD(v940) = 0x1000000;
    llvm::MachineInstr::addOperand(v686, v685, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(v686, v685, (const llvm::MachineOperand *)&v940);
    v701 = (void *)a1[34];
    unsigned int v702 = *v643;
    uint64_t v703 = v701[1];
    uint64_t v704 = v701[7];
    uint64_t v705 = *(unsigned int *)(v703 + 24 * *v643 + 4);
    int v706 = *(unsigned __int16 *)(v704 + 2 * v705);
    if (*(_WORD *)(v704 + 2 * v705))
    {
      LOWORD(v706) = v706 + v702;
      v707 = (_WORD *)(v701[11] + 2 * *(unsigned int *)(v703 + 24 * v702 + 12));
      v708 = (unsigned __int16 *)(v704 + 2 * v705 + 2);
      while (*v707 != 1)
      {
        int v709 = *v708++;
        LOWORD(v706) = v709 + v706;
        ++v707;
        if (!v709)
        {
          int v706 = 0;
          goto LABEL_842;
        }
      }
      int v706 = (unsigned __int16)v706;
    }
LABEL_842:
    *((void *)&v940 + 1) = 0;
    LODWORD(v940) = 0;
    DWORD1(v940) = v706;
    long long v941 = 0uLL;
    llvm::MachineInstr::addOperand(v686, v685, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(v686, v685, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0x100000010;
    llvm::MachineInstr::addOperand(v686, v685, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 1;
    llvm::MachineInstr::addOperand(v686, v685, (const llvm::MachineOperand *)&v940);
    long long v940 = 0x200000000uLL;
    long long v941 = 0uLL;
    llvm::MachineInstr::addOperand(v686, v685, (const llvm::MachineOperand *)&v940);
    unsigned int v710 = *v643;
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 100663296;
    DWORD1(v940) = v710;
    llvm::MachineInstr::addOperand(v686, v685, (const llvm::MachineOperand *)&v940);
    unsigned int v711 = *v643;
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 50331648;
    DWORD1(v940) = v711;
    llvm::MachineInstr::addOperand(v686, v685, (const llvm::MachineOperand *)&v940);
    uint64_t v712 = *(void *)(a1[33] + 8);
    v713 = (llvm::MachineFunction *)*((void *)v937 + 4);
    v942[0] = v939;
    if (v939) {
      llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
    }
    uint64_t v714 = llvm::MachineFunction::CreateMachineInstr(v713, v712 + 139296, v942, 0);
    if (v942[0])
    {
      int v738 = *v942[0];
      if ((v738 - 4) > 0x1E)
      {
        if ((v738 - 3) >= 0xFFFFFFFE) {
          v742 = v942[0];
        }
        else {
          v742 = 0;
        }
        if ((v738 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v740 = (unint64_t)(v742 + 8);
LABEL_899:
          *(void *)&long long v940 = v942;
          sub_1CC5FA668(v740 + 16, &v940);
          goto LABEL_845;
        }
        if (v738 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
      }
      else if ((v942[0][1] & 0x7F) == 2 || *((_DWORD *)v942[0] + 3))
      {
        uint64_t v739 = *((void *)v942[0] + 2);
        if ((v739 & 4) != 0)
        {
          unint64_t v740 = v739 & 0xFFFFFFFFFFFFFFF8;
          if (v740) {
            goto LABEL_899;
          }
        }
      }
    }
LABEL_845:
    uint64_t v715 = *((void *)v937 + 5);
    *((void *)v714 + 3) = v715;
    uint64_t v716 = *(void *)(v715 + 32);
    uint64_t v717 = *((unsigned int *)v714 + 10);
    if (v717)
    {
      uint64_t v728 = *((void *)v714 + 4);
      uint64_t v729 = *(void *)(v716 + 40);
      uint64_t v730 = 32 * v717;
      do
      {
        if (!*(unsigned char *)v728)
        {
          uint64_t v731 = *(unsigned int *)(v728 + 4);
          if ((int)v731 >= 0) {
            uint64_t v732 = (uint64_t *)(*(void *)(v729 + 272) + 8 * v731);
          }
          else {
            uint64_t v732 = (uint64_t *)(*(void *)(v729 + 24) + 16 * (v731 & 0x7FFFFFFF) + 8);
          }
          uint64_t v733 = *v732;
          if (*v732)
          {
            uint64_t v734 = *(void *)(v733 + 16);
            *(void *)(v733 + 16) = v728;
            *(void *)(v728 + 16) = v734;
            if (*(unsigned char *)(v728 + 3))
            {
              *(void *)(v728 + 24) = v733;
            }
            else
            {
              *(void *)(v728 + 24) = 0;
              uint64_t v732 = (uint64_t *)(v734 + 24);
            }
          }
          else
          {
            *(void *)(v728 + 16) = v728;
            *(void *)(v728 + 24) = 0;
          }
          *uint64_t v732 = v728;
        }
        v728 += 32;
        v730 -= 32;
      }
      while (v730);
    }
    uint64_t v718 = *(void *)(v716 + 728);
    if (v718) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v718 + 24))(v718, v714);
    }
    unint64_t v719 = *v335 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v714 = v719 | *(void *)v714 & 7;
    *((void *)v714 + 1) = v335;
    *(void *)(v719 + 8) = v714;
    void *v335 = *v335 & 7 | (unint64_t)v714;
    unsigned int v720 = *v643;
    *((void *)&v940 + 1) = 0;
    LODWORD(v940) = 0;
    DWORD1(v940) = v720;
    long long v941 = 0uLL;
    llvm::MachineInstr::addOperand(v714, v713, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = v680;
    llvm::MachineInstr::addOperand(v714, v713, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = v682;
    llvm::MachineInstr::addOperand(v714, v713, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(v714, v713, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 1;
    llvm::MachineInstr::addOperand(v714, v713, (const llvm::MachineOperand *)&v940);
    long long v940 = 0x200000000uLL;
    long long v941 = 0uLL;
    llvm::MachineInstr::addOperand(v714, v713, (const llvm::MachineOperand *)&v940);
  }
  uint64_t v743 = *(void *)(a1[33] + 8) + 644640;
  v363 = (llvm::MachineFunction *)*((void *)v937 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  v364 = llvm::MachineFunction::CreateMachineInstr(v363, v743, v942, 0);
  int v256 = v932;
  if (v942[0])
  {
    int v920 = *v942[0];
    if ((v920 - 4) > 0x1E)
    {
      if ((v920 - 3) >= 0xFFFFFFFE) {
        v925 = v942[0];
      }
      else {
        v925 = 0;
      }
      if ((v920 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v920 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_907;
      }
      unint64_t v922 = (unint64_t)(v925 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_907;
      }
      uint64_t v921 = *((void *)v942[0] + 2);
      if ((v921 & 4) == 0) {
        goto LABEL_907;
      }
      unint64_t v922 = v921 & 0xFFFFFFFFFFFFFFF8;
      if (!v922) {
        goto LABEL_907;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v922 + 16, &v940);
    int v256 = v932;
  }
LABEL_907:
  uint64_t v744 = *((void *)v937 + 5);
  *((void *)v364 + 3) = v744;
  uint64_t v366 = *(void *)(v744 + 32);
  uint64_t v745 = *((unsigned int *)v364 + 10);
  if (v745)
  {
    uint64_t v746 = *((void *)v364 + 4);
    uint64_t v747 = *(void *)(v366 + 40);
    uint64_t v748 = 32 * v745;
    do
    {
      if (!*(unsigned char *)v746)
      {
        uint64_t v749 = *(unsigned int *)(v746 + 4);
        if ((int)v749 >= 0) {
          unsigned int v750 = (uint64_t *)(*(void *)(v747 + 272) + 8 * v749);
        }
        else {
          unsigned int v750 = (uint64_t *)(*(void *)(v747 + 24) + 16 * (v749 & 0x7FFFFFFF) + 8);
        }
        uint64_t v751 = *v750;
        if (*v750)
        {
          uint64_t v752 = *(void *)(v751 + 16);
          *(void *)(v751 + 16) = v746;
          *(void *)(v746 + 16) = v752;
          if (*(unsigned char *)(v746 + 3))
          {
            *(void *)(v746 + 24) = v751;
          }
          else
          {
            *(void *)(v746 + 24) = 0;
            unsigned int v750 = (uint64_t *)(v752 + 24);
          }
        }
        else
        {
          *(void *)(v746 + 16) = v746;
          *(void *)(v746 + 24) = 0;
        }
        *unsigned int v750 = v746;
      }
      v746 += 32;
      v748 -= 32;
    }
    while (v748);
  }
LABEL_395:
  uint64_t v368 = *(void *)(v366 + 728);
  if (v368) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v368 + 24))(v368, v364);
  }
  unint64_t v369 = *v335 & 0xFFFFFFFFFFFFFFF8;
  *(void *)v364 = v369 | *(void *)v364 & 7;
  *((void *)v364 + 1) = v335;
  *(void *)(v369 + 8) = v364;
  void *v335 = *v335 & 7 | (unint64_t)v364;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v364, v363, (const llvm::MachineOperand *)&v940);
LABEL_398:
  uint64_t v370 = *(void *)(a1[33] + 8) + 644592;
  uint64_t v371 = (llvm::MachineFunction *)*((void *)v937 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  v372 = llvm::MachineFunction::CreateMachineInstr(v371, v370, v942, 0);
  if (v942[0])
  {
    int v852 = *v942[0];
    if ((v852 - 4) > 0x1E)
    {
      if ((v852 - 3) >= 0xFFFFFFFE) {
        unint64_t v902 = v942[0];
      }
      else {
        unint64_t v902 = 0;
      }
      if ((v852 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v852 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_401;
      }
      unint64_t v854 = (unint64_t)(v902 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_401;
      }
      uint64_t v853 = *((void *)v942[0] + 2);
      if ((v853 & 4) == 0) {
        goto LABEL_401;
      }
      unint64_t v854 = v853 & 0xFFFFFFFFFFFFFFF8;
      if (!v854) {
        goto LABEL_401;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v854 + 16, &v940);
    int v256 = v932;
  }
LABEL_401:
  uint64_t v373 = *((void *)v937 + 5);
  *((void *)v372 + 3) = v373;
  uint64_t v374 = *(void *)(v373 + 32);
  uint64_t v375 = *((unsigned int *)v372 + 10);
  if (v375)
  {
    uint64_t v560 = *((void *)v372 + 4);
    uint64_t v561 = *(void *)(v374 + 40);
    uint64_t v562 = 32 * v375;
    do
    {
      if (!*(unsigned char *)v560)
      {
        uint64_t v563 = *(unsigned int *)(v560 + 4);
        if ((int)v563 >= 0) {
          v564 = (uint64_t *)(*(void *)(v561 + 272) + 8 * v563);
        }
        else {
          v564 = (uint64_t *)(*(void *)(v561 + 24) + 16 * (v563 & 0x7FFFFFFF) + 8);
        }
        uint64_t v565 = *v564;
        if (*v564)
        {
          uint64_t v566 = *(void *)(v565 + 16);
          *(void *)(v565 + 16) = v560;
          *(void *)(v560 + 16) = v566;
          if (*(unsigned char *)(v560 + 3))
          {
            *(void *)(v560 + 24) = v565;
          }
          else
          {
            *(void *)(v560 + 24) = 0;
            v564 = (uint64_t *)(v566 + 24);
          }
        }
        else
        {
          *(void *)(v560 + 16) = v560;
          *(void *)(v560 + 24) = 0;
        }
        uint64_t *v564 = v560;
      }
      v560 += 32;
      v562 -= 32;
    }
    while (v562);
  }
  uint64_t v376 = *(void *)(v374 + 728);
  if (v376) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v376 + 24))(v376, v372);
  }
  unint64_t v377 = *v335 & 0xFFFFFFFFFFFFFFF8;
  *(void *)v372 = v377 | *(void *)v372 & 7;
  *((void *)v372 + 1) = v335;
  *(void *)(v377 + 8) = v372;
  void *v335 = *v335 & 7 | (unint64_t)v372;
  uint64_t v378 = v935 + 32 * (v933 + 2);
  uint64_t v380 = *(void *)(v378 + 16);
  v379 = (uint64_t *)(v378 + 16);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v380;
  llvm::MachineInstr::addOperand(v372, v371, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v372, v371, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v372, v371, (const llvm::MachineOperand *)&v940);
  if (v927)
  {
    uint64_t v381 = *((void *)v937 + 5);
    *(void *)(v927 + 24) = v381;
    uint64_t v382 = *(void *)(v381 + 32);
    uint64_t v383 = *(unsigned int *)(v927 + 40);
    if (v383)
    {
      uint64_t v625 = *(void *)(v927 + 32);
      uint64_t v626 = *(void *)(v382 + 40);
      uint64_t v627 = 32 * v383;
      do
      {
        if (!*(unsigned char *)v625)
        {
          uint64_t v628 = *(unsigned int *)(v625 + 4);
          if ((int)v628 >= 0) {
            int v629 = (uint64_t *)(*(void *)(v626 + 272) + 8 * v628);
          }
          else {
            int v629 = (uint64_t *)(*(void *)(v626 + 24) + 16 * (v628 & 0x7FFFFFFF) + 8);
          }
          uint64_t v630 = *v629;
          if (*v629)
          {
            uint64_t v631 = *(void *)(v630 + 16);
            *(void *)(v630 + 16) = v625;
            *(void *)(v625 + 16) = v631;
            if (*(unsigned char *)(v625 + 3))
            {
              *(void *)(v625 + 24) = v630;
            }
            else
            {
              *(void *)(v625 + 24) = 0;
              int v629 = (uint64_t *)(v631 + 24);
            }
          }
          else
          {
            *(void *)(v625 + 16) = v625;
            *(void *)(v625 + 24) = 0;
          }
          *int v629 = v625;
        }
        v625 += 32;
        v627 -= 32;
      }
      while (v627);
    }
    uint64_t v384 = *(void *)(v382 + 728);
    if (v384) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v384 + 24))(v384, v927);
    }
    unint64_t v385 = *v335 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v927 = v385 | *(void *)v927 & 7;
    *(void *)(v927 + 8) = v335;
    *(void *)(v385 + 8) = v927;
    void *v335 = *v335 & 7 | v927;
    int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v927);
    *(void *)(*(void *)(v927 + 32) + 32 * (NumExplicitOperands - 2) + 16) = 1;
    llvm::MachineOperand::setReg(*(void *)(v927 + 32) + 32 * (NumExplicitOperands - 1), 2u);
  }
  uint64_t v387 = *(void *)(a1[33] + 8) + 18960;
  v388 = (llvm::MachineFunction *)*((void *)v937 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v389 = llvm::MachineFunction::CreateMachineInstr(v388, v387, v942, 0);
  if (v942[0])
  {
    int v855 = *v942[0];
    if ((v855 - 4) > 0x1E)
    {
      if ((v855 - 3) >= 0xFFFFFFFE) {
        v903 = v942[0];
      }
      else {
        v903 = 0;
      }
      if ((v855 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v855 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_412;
      }
      unint64_t v857 = (unint64_t)(v903 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_412;
      }
      uint64_t v856 = *((void *)v942[0] + 2);
      if ((v856 & 4) == 0) {
        goto LABEL_412;
      }
      unint64_t v857 = v856 & 0xFFFFFFFFFFFFFFF8;
      if (!v857) {
        goto LABEL_412;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v857 + 16, &v940);
    int v256 = v932;
  }
LABEL_412:
  uint64_t v390 = *((void *)v937 + 5);
  *((void *)v389 + 3) = v390;
  uint64_t v391 = *(void *)(v390 + 32);
  uint64_t v392 = *((unsigned int *)v389 + 10);
  if (v392)
  {
    uint64_t v567 = *((void *)v389 + 4);
    uint64_t v568 = *(void *)(v391 + 40);
    uint64_t v569 = 32 * v392;
    do
    {
      if (!*(unsigned char *)v567)
      {
        uint64_t v570 = *(unsigned int *)(v567 + 4);
        if ((int)v570 >= 0) {
          v571 = (uint64_t *)(*(void *)(v568 + 272) + 8 * v570);
        }
        else {
          v571 = (uint64_t *)(*(void *)(v568 + 24) + 16 * (v570 & 0x7FFFFFFF) + 8);
        }
        uint64_t v572 = *v571;
        if (*v571)
        {
          uint64_t v573 = *(void *)(v572 + 16);
          *(void *)(v572 + 16) = v567;
          *(void *)(v567 + 16) = v573;
          if (*(unsigned char *)(v567 + 3))
          {
            *(void *)(v567 + 24) = v572;
          }
          else
          {
            *(void *)(v567 + 24) = 0;
            v571 = (uint64_t *)(v573 + 24);
          }
        }
        else
        {
          *(void *)(v567 + 16) = v567;
          *(void *)(v567 + 24) = 0;
        }
        uint64_t *v571 = v567;
      }
      v567 += 32;
      v569 -= 32;
    }
    while (v569);
  }
  uint64_t v393 = *(void *)(v391 + 728);
  if (v393) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v393 + 24))(v393, v389);
  }
  unint64_t v394 = *v335 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v389 = v394 | *(void *)v389 & 7;
  *((void *)v389 + 1) = v335;
  *(void *)(v394 + 8) = v389;
  void *v335 = *v335 & 7 | (unint64_t)v389;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v934;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v389, v388, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v389, v388, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v389, v388, (const llvm::MachineOperand *)&v940);
  uint64_t v395 = *(void *)(a1[33] + 8) + 586320;
  v396 = (llvm::MachineFunction *)*((void *)v936 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  int v397 = llvm::MachineFunction::CreateMachineInstr(v396, v395, v942, 0);
  if (v942[0])
  {
    int v858 = *v942[0];
    if ((v858 - 4) > 0x1E)
    {
      if ((v858 - 3) >= 0xFFFFFFFE) {
        unint64_t v904 = v942[0];
      }
      else {
        unint64_t v904 = 0;
      }
      if ((v858 - 3) < 0xFFFFFFFE)
      {
        int v256 = v932;
        if (v858 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_418;
      }
      unint64_t v860 = (unint64_t)(v904 + 8);
    }
    else
    {
      int v256 = v932;
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_418;
      }
      uint64_t v859 = *((void *)v942[0] + 2);
      if ((v859 & 4) == 0) {
        goto LABEL_418;
      }
      unint64_t v860 = v859 & 0xFFFFFFFFFFFFFFF8;
      if (!v860) {
        goto LABEL_418;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v860 + 16, &v940);
    int v256 = v932;
  }
LABEL_418:
  BOOL v398 = (unint64_t *)((char *)v936 + 48);
  uint64_t v399 = *((void *)v936 + 5);
  *((void *)v397 + 3) = v399;
  uint64_t v400 = *(void *)(v399 + 32);
  uint64_t v401 = *((unsigned int *)v397 + 10);
  if (v401)
  {
    uint64_t v574 = *((void *)v397 + 4);
    uint64_t v575 = *(void *)(v400 + 40);
    uint64_t v576 = 32 * v401;
    do
    {
      if (!*(unsigned char *)v574)
      {
        uint64_t v577 = *(unsigned int *)(v574 + 4);
        if ((int)v577 >= 0) {
          v578 = (uint64_t *)(*(void *)(v575 + 272) + 8 * v577);
        }
        else {
          v578 = (uint64_t *)(*(void *)(v575 + 24) + 16 * (v577 & 0x7FFFFFFF) + 8);
        }
        uint64_t v579 = *v578;
        if (*v578)
        {
          uint64_t v580 = *(void *)(v579 + 16);
          *(void *)(v579 + 16) = v574;
          *(void *)(v574 + 16) = v580;
          if (*(unsigned char *)(v574 + 3))
          {
            *(void *)(v574 + 24) = v579;
          }
          else
          {
            *(void *)(v574 + 24) = 0;
            v578 = (uint64_t *)(v580 + 24);
          }
        }
        else
        {
          *(void *)(v574 + 16) = v574;
          *(void *)(v574 + 24) = 0;
        }
        uint64_t *v578 = v574;
      }
      v574 += 32;
      v576 -= 32;
    }
    while (v576);
  }
  uint64_t v402 = *(void *)(v400 + 728);
  if (v402) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v402 + 24))(v402, v397);
  }
  unint64_t v403 = *((void *)v936 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v397 = v403 | *(void *)v397 & 7;
  *((void *)v397 + 1) = v398;
  *(void *)(v403 + 8) = v397;
  *((void *)v936 + 6) = *((void *)v936 + 6) & 7 | (unint64_t)v397;
  uint64_t v404 = *v379;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v404;
  llvm::MachineInstr::addOperand(v397, v396, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v397, v396, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v397, v396, (const llvm::MachineOperand *)&v940);
  uint64_t v405 = 565968;
  if (!v256) {
    uint64_t v405 = 566064;
  }
  uint64_t v406 = *(void *)(a1[33] + 8) + v405;
  int v407 = (llvm::MachineFunction *)*((void *)v936 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  v408 = llvm::MachineFunction::CreateMachineInstr(v407, v406, v942, 0);
  if (v942[0])
  {
    int v861 = *v942[0];
    if ((v861 - 4) > 0x1E)
    {
      if ((v861 - 3) >= 0xFFFFFFFE) {
        int v905 = v942[0];
      }
      else {
        int v905 = 0;
      }
      if ((v861 - 3) < 0xFFFFFFFE)
      {
        if (v861 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_426;
      }
      unint64_t v863 = (unint64_t)(v905 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_426;
      }
      uint64_t v862 = *((void *)v942[0] + 2);
      if ((v862 & 4) == 0) {
        goto LABEL_426;
      }
      unint64_t v863 = v862 & 0xFFFFFFFFFFFFFFF8;
      if (!v863) {
        goto LABEL_426;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v863 + 16, &v940);
  }
LABEL_426:
  uint64_t v409 = *((void *)v936 + 5);
  *((void *)v408 + 3) = v409;
  uint64_t v410 = *(void *)(v409 + 32);
  uint64_t v411 = *((unsigned int *)v408 + 10);
  if (v411)
  {
    uint64_t v581 = *((void *)v408 + 4);
    uint64_t v582 = *(void *)(v410 + 40);
    uint64_t v583 = 32 * v411;
    do
    {
      if (!*(unsigned char *)v581)
      {
        uint64_t v584 = *(unsigned int *)(v581 + 4);
        if ((int)v584 >= 0) {
          v585 = (uint64_t *)(*(void *)(v582 + 272) + 8 * v584);
        }
        else {
          v585 = (uint64_t *)(*(void *)(v582 + 24) + 16 * (v584 & 0x7FFFFFFF) + 8);
        }
        uint64_t v586 = *v585;
        if (*v585)
        {
          uint64_t v587 = *(void *)(v586 + 16);
          *(void *)(v586 + 16) = v581;
          *(void *)(v581 + 16) = v587;
          if (*(unsigned char *)(v581 + 3))
          {
            *(void *)(v581 + 24) = v586;
          }
          else
          {
            *(void *)(v581 + 24) = 0;
            v585 = (uint64_t *)(v587 + 24);
          }
        }
        else
        {
          *(void *)(v581 + 16) = v581;
          *(void *)(v581 + 24) = 0;
        }
        uint64_t *v585 = v581;
      }
      v581 += 32;
      v583 -= 32;
    }
    while (v583);
  }
  uint64_t v412 = *(void *)(v410 + 728);
  if (v412) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v412 + 24))(v412, v408);
  }
  unint64_t v413 = *((void *)v936 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)v408 = v413 | *(void *)v408 & 7;
  *((void *)v408 + 1) = v398;
  *(void *)(v413 + 8) = v408;
  *((void *)v936 + 6) = *((void *)v936 + 6) & 7 | (unint64_t)v408;
  int v414 = *(_DWORD *)(v935 + 36);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v414;
  llvm::MachineInstr::addOperand(v408, v407, (const llvm::MachineOperand *)&v940);
  uint64_t v415 = *v930 + 1;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v415;
  llvm::MachineInstr::addOperand(v408, v407, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v408, v407, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v408, v407, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v408, v407, (const llvm::MachineOperand *)&v940);
  uint64_t v416 = *(void *)(a1[33] + 8) + 644640;
  v417 = (llvm::MachineFunction *)*((void *)v936 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v418 = llvm::MachineFunction::CreateMachineInstr(v417, v416, v942, 0);
  if (v942[0])
  {
    int v864 = *v942[0];
    if ((v864 - 4) > 0x1E)
    {
      if ((v864 - 3) >= 0xFFFFFFFE) {
        v906 = v942[0];
      }
      else {
        v906 = 0;
      }
      if ((v864 - 3) < 0xFFFFFFFE)
      {
        if (v864 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_432;
      }
      unint64_t v866 = (unint64_t)(v906 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_432;
      }
      uint64_t v865 = *((void *)v942[0] + 2);
      if ((v865 & 4) == 0) {
        goto LABEL_432;
      }
      unint64_t v866 = v865 & 0xFFFFFFFFFFFFFFF8;
      if (!v866) {
        goto LABEL_432;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v866 + 16, &v940);
  }
LABEL_432:
  uint64_t v419 = *((void *)v936 + 5);
  *((void *)v418 + 3) = v419;
  uint64_t v420 = *(void *)(v419 + 32);
  uint64_t v421 = *((unsigned int *)v418 + 10);
  if (v421)
  {
    uint64_t v588 = *((void *)v418 + 4);
    uint64_t v589 = *(void *)(v420 + 40);
    uint64_t v590 = 32 * v421;
    do
    {
      if (!*(unsigned char *)v588)
      {
        uint64_t v591 = *(unsigned int *)(v588 + 4);
        if ((int)v591 >= 0) {
          v592 = (uint64_t *)(*(void *)(v589 + 272) + 8 * v591);
        }
        else {
          v592 = (uint64_t *)(*(void *)(v589 + 24) + 16 * (v591 & 0x7FFFFFFF) + 8);
        }
        uint64_t v593 = *v592;
        if (*v592)
        {
          uint64_t v594 = *(void *)(v593 + 16);
          *(void *)(v593 + 16) = v588;
          *(void *)(v588 + 16) = v594;
          if (*(unsigned char *)(v588 + 3))
          {
            *(void *)(v588 + 24) = v593;
          }
          else
          {
            *(void *)(v588 + 24) = 0;
            v592 = (uint64_t *)(v594 + 24);
          }
        }
        else
        {
          *(void *)(v588 + 16) = v588;
          *(void *)(v588 + 24) = 0;
        }
        uint64_t *v592 = v588;
      }
      v588 += 32;
      v590 -= 32;
    }
    while (v590);
  }
  uint64_t v422 = *(void *)(v420 + 728);
  if (v422) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v422 + 24))(v422, v418);
  }
  unint64_t v423 = *((void *)v936 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v418 = v423 | *(void *)v418 & 7;
  *((void *)v418 + 1) = v398;
  *(void *)(v423 + 8) = v418;
  *((void *)v936 + 6) = *((void *)v936 + 6) & 7 | (unint64_t)v418;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v418, v417, (const llvm::MachineOperand *)&v940);
  uint64_t v424 = *(void *)(a1[33] + 8) + 239808;
  int v425 = (llvm::MachineFunction *)*((void *)v936 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  BOOL v426 = llvm::MachineFunction::CreateMachineInstr(v425, v424, v942, 0);
  if (v942[0])
  {
    int v867 = *v942[0];
    if ((v867 - 4) > 0x1E)
    {
      if ((v867 - 3) >= 0xFFFFFFFE) {
        int v907 = v942[0];
      }
      else {
        int v907 = 0;
      }
      if ((v867 - 3) < 0xFFFFFFFE)
      {
        if (v867 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_438;
      }
      unint64_t v869 = (unint64_t)(v907 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_438;
      }
      uint64_t v868 = *((void *)v942[0] + 2);
      if ((v868 & 4) == 0) {
        goto LABEL_438;
      }
      unint64_t v869 = v868 & 0xFFFFFFFFFFFFFFF8;
      if (!v869) {
        goto LABEL_438;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v869 + 16, &v940);
  }
LABEL_438:
  uint64_t v427 = *((void *)v936 + 5);
  *((void *)v426 + 3) = v427;
  uint64_t v428 = *(void *)(v427 + 32);
  uint64_t v429 = *((unsigned int *)v426 + 10);
  if (v429)
  {
    uint64_t v595 = *((void *)v426 + 4);
    uint64_t v596 = *(void *)(v428 + 40);
    uint64_t v597 = 32 * v429;
    do
    {
      if (!*(unsigned char *)v595)
      {
        uint64_t v598 = *(unsigned int *)(v595 + 4);
        if ((int)v598 >= 0) {
          uint64_t v599 = (uint64_t *)(*(void *)(v596 + 272) + 8 * v598);
        }
        else {
          uint64_t v599 = (uint64_t *)(*(void *)(v596 + 24) + 16 * (v598 & 0x7FFFFFFF) + 8);
        }
        uint64_t v600 = *v599;
        if (*v599)
        {
          uint64_t v601 = *(void *)(v600 + 16);
          *(void *)(v600 + 16) = v595;
          *(void *)(v595 + 16) = v601;
          if (*(unsigned char *)(v595 + 3))
          {
            *(void *)(v595 + 24) = v600;
          }
          else
          {
            *(void *)(v595 + 24) = 0;
            uint64_t v599 = (uint64_t *)(v601 + 24);
          }
        }
        else
        {
          *(void *)(v595 + 16) = v595;
          *(void *)(v595 + 24) = 0;
        }
        *uint64_t v599 = v595;
      }
      v595 += 32;
      v597 -= 32;
    }
    while (v597);
  }
  uint64_t v430 = *(void *)(v428 + 728);
  if (v430) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v430 + 24))(v430, v426);
  }
  unint64_t v431 = *v398 & 0xFFFFFFFFFFFFFFF8;
  *(void *)BOOL v426 = v431 | *(void *)v426 & 7;
  *((void *)v426 + 1) = v398;
  *(void *)(v431 + 8) = v426;
  *BOOL v398 = *v398 & 7 | (unint64_t)v426;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v426, v425, (const llvm::MachineOperand *)&v940);
  uint64_t v432 = (void *)a1[34];
  unsigned int v433 = *(_DWORD *)(v935 + 4);
  uint64_t v434 = v432[1];
  uint64_t v435 = v432[7];
  uint64_t v436 = *(unsigned int *)(v434 + 24 * v433 + 4);
  int v437 = *(unsigned __int16 *)(v435 + 2 * v436);
  if (*(_WORD *)(v435 + 2 * v436))
  {
    LOWORD(v437) = v437 + v433;
    v438 = (_WORD *)(v432[11] + 2 * *(unsigned int *)(v434 + 24 * v433 + 12));
    uint64_t v439 = (unsigned __int16 *)(v435 + 2 * v436 + 2);
    while (*v438 != 2)
    {
      int v440 = *v439++;
      LOWORD(v437) = v440 + v437;
      ++v438;
      if (!v440)
      {
        int v437 = 0;
        goto LABEL_447;
      }
    }
    int v437 = (unsigned __int16)v437;
  }
LABEL_447:
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v437;
  llvm::MachineInstr::addOperand(v426, v425, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v426, v425, (const llvm::MachineOperand *)&v940);
  int v441 = *(_DWORD *)(v935 + 36);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x4000000;
  DWORD1(v940) = v441;
  llvm::MachineInstr::addOperand(v426, v425, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v426, v425, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v426, v425, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v426, v425, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v426, v425, (const llvm::MachineOperand *)&v940);
  uint64_t v442 = *(void *)(a1[33] + 8) + 18960;
  v443 = (llvm::MachineFunction *)*((void *)v936 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  unsigned int v444 = llvm::MachineFunction::CreateMachineInstr(v443, v442, v942, 0);
  if (v942[0])
  {
    int v870 = *v942[0];
    if ((v870 - 4) > 0x1E)
    {
      if ((v870 - 3) >= 0xFFFFFFFE) {
        uint64_t v908 = v942[0];
      }
      else {
        uint64_t v908 = 0;
      }
      if ((v870 - 3) < 0xFFFFFFFE)
      {
        if (v870 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_450;
      }
      unint64_t v872 = (unint64_t)(v908 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_450;
      }
      uint64_t v871 = *((void *)v942[0] + 2);
      if ((v871 & 4) == 0) {
        goto LABEL_450;
      }
      unint64_t v872 = v871 & 0xFFFFFFFFFFFFFFF8;
      if (!v872) {
        goto LABEL_450;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v872 + 16, &v940);
  }
LABEL_450:
  uint64_t v445 = *((void *)v936 + 5);
  *((void *)v444 + 3) = v445;
  uint64_t v446 = *(void *)(v445 + 32);
  uint64_t v447 = *((unsigned int *)v444 + 10);
  if (v447)
  {
    uint64_t v602 = *((void *)v444 + 4);
    uint64_t v603 = *(void *)(v446 + 40);
    uint64_t v604 = 32 * v447;
    do
    {
      if (!*(unsigned char *)v602)
      {
        uint64_t v605 = *(unsigned int *)(v602 + 4);
        if ((int)v605 >= 0) {
          int v606 = (uint64_t *)(*(void *)(v603 + 272) + 8 * v605);
        }
        else {
          int v606 = (uint64_t *)(*(void *)(v603 + 24) + 16 * (v605 & 0x7FFFFFFF) + 8);
        }
        uint64_t v607 = *v606;
        if (*v606)
        {
          uint64_t v608 = *(void *)(v607 + 16);
          *(void *)(v607 + 16) = v602;
          *(void *)(v602 + 16) = v608;
          if (*(unsigned char *)(v602 + 3))
          {
            *(void *)(v602 + 24) = v607;
          }
          else
          {
            *(void *)(v602 + 24) = 0;
            int v606 = (uint64_t *)(v608 + 24);
          }
        }
        else
        {
          *(void *)(v602 + 16) = v602;
          *(void *)(v602 + 24) = 0;
        }
        *int v606 = v602;
      }
      v602 += 32;
      v604 -= 32;
    }
    while (v604);
  }
  uint64_t v448 = *(void *)(v446 + 728);
  if (v448) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v448 + 24))(v448, v444);
  }
  unint64_t v449 = *((void *)v936 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unsigned int v444 = v449 | *(void *)v444 & 7;
  *((void *)v444 + 1) = v398;
  *(void *)(v449 + 8) = v444;
  *((void *)v936 + 6) = *((void *)v936 + 6) & 7 | (unint64_t)v444;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v936;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v444, v443, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v444, v443, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v444, v443, (const llvm::MachineOperand *)&v940);
  uint64_t v450 = (unint64_t *)*((void *)v934 + 7);
  uint64_t v451 = *(void *)(a1[33] + 8) + 28320;
  v452 = (llvm::MachineFunction *)*((void *)v934 + 4);
  v942[0] = v939;
  if (v939) {
    llvm::MetadataTracking::track((uint64_t)v942, v939, 2);
  }
  uint64_t v453 = llvm::MachineFunction::CreateMachineInstr(v452, v451, v942, 0);
  if (v942[0])
  {
    int v873 = *v942[0];
    if ((v873 - 4) > 0x1E)
    {
      if ((v873 - 3) >= 0xFFFFFFFE) {
        v909 = v942[0];
      }
      else {
        v909 = 0;
      }
      if ((v873 - 3) < 0xFFFFFFFE)
      {
        if (v873 == 3) {
          *((void *)v942[0] + 1) = 0;
        }
        goto LABEL_456;
      }
      unint64_t v875 = (unint64_t)(v909 + 8);
    }
    else
    {
      if ((v942[0][1] & 0x7F) != 2 && !*((_DWORD *)v942[0] + 3)) {
        goto LABEL_456;
      }
      uint64_t v874 = *((void *)v942[0] + 2);
      if ((v874 & 4) == 0) {
        goto LABEL_456;
      }
      unint64_t v875 = v874 & 0xFFFFFFFFFFFFFFF8;
      if (!v875) {
        goto LABEL_456;
      }
    }
    *(void *)&long long v940 = v942;
    sub_1CC5FA668(v875 + 16, &v940);
  }
LABEL_456:
  uint64_t v454 = *((void *)v934 + 5);
  *((void *)v453 + 3) = v454;
  uint64_t v455 = *(void *)(v454 + 32);
  uint64_t v456 = *((unsigned int *)v453 + 10);
  if (v456)
  {
    uint64_t v609 = *((void *)v453 + 4);
    uint64_t v610 = *(void *)(v455 + 40);
    uint64_t v611 = 32 * v456;
    do
    {
      if (!*(unsigned char *)v609)
      {
        uint64_t v612 = *(unsigned int *)(v609 + 4);
        if ((int)v612 >= 0) {
          unsigned int v613 = (uint64_t *)(*(void *)(v610 + 272) + 8 * v612);
        }
        else {
          unsigned int v613 = (uint64_t *)(*(void *)(v610 + 24) + 16 * (v612 & 0x7FFFFFFF) + 8);
        }
        uint64_t v614 = *v613;
        if (*v613)
        {
          uint64_t v615 = *(void *)(v614 + 16);
          *(void *)(v614 + 16) = v609;
          *(void *)(v609 + 16) = v615;
          if (*(unsigned char *)(v609 + 3))
          {
            *(void *)(v609 + 24) = v614;
          }
          else
          {
            *(void *)(v609 + 24) = 0;
            unsigned int v613 = (uint64_t *)(v615 + 24);
          }
        }
        else
        {
          *(void *)(v609 + 16) = v609;
          *(void *)(v609 + 24) = 0;
        }
        *unsigned int v613 = v609;
      }
      v609 += 32;
      v611 -= 32;
    }
    while (v611);
  }
  uint64_t v457 = *(void *)(v455 + 728);
  if (v457) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v457 + 24))(v457, v453);
  }
  unint64_t v458 = *v450 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v453 = v458 | *(void *)v453 & 7;
  *((void *)v453 + 1) = v450;
  *(void *)(v458 + 8) = v453;
  *uint64_t v450 = *v450 & 7 | (unint64_t)v453;
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v931;
  llvm::MachineInstr::addOperand(v453, v452, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v453, v452, (const llvm::MachineOperand *)&v940);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v931;
  llvm::MachineInstr::addOperand(v453, v452, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v453, v452, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 2;
  llvm::MachineInstr::addOperand(v453, v452, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 2;
  llvm::MachineInstr::addOperand(v453, v452, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v453, v452, (const llvm::MachineOperand *)&v940);
  if (v939)
  {
    int v459 = *v939;
    if ((v459 - 4) > 0x1E)
    {
      if ((v459 - 3) >= 0xFFFFFFFE) {
        v460 = v939;
      }
      else {
        v460 = 0;
      }
      if ((v459 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v461 = (unint64_t)(v460 + 8);
        goto LABEL_469;
      }
      if (v459 == 3) {
        *((void *)v939 + 1) = 0;
      }
    }
    else if ((v939[1] & 0x7F) == 2 || *((_DWORD *)v939 + 3))
    {
      uint64_t v809 = *((void *)v939 + 2);
      if ((v809 & 4) != 0)
      {
        unint64_t v461 = v809 & 0xFFFFFFFFFFFFFFF8;
        if (v461)
        {
LABEL_469:
          *(void *)&long long v940 = &v939;
          sub_1CC5FA668(v461 + 16, &v940);
        }
      }
    }
  }
}

void sub_1CB856134(size_t __sz, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  size_t v6 = __sz;
  int v7 = *(unint64_t **)(a2 + 24);
  unint64_t v8 = v7[4];
  if (*a4) {
    BOOL v9 = v7 != *(unint64_t **)(v8 + 328);
  }
  else {
    BOOL v9 = 1;
  }
  uint64_t v495 = *(void *)(a2 + 32);
  int v492 = *(_DWORD *)(*(void *)(__sz + 256) + 8);
  *a4 = 0;
  unsigned int v10 = *(unsigned __int8 **)(a2 + 56);
  uint64_t v497 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v497, v10, 2);
  }
  uint64_t v11 = (const llvm::BasicBlock *)v7[2];
  uint64_t v12 = *(llvm::MachineBasicBlock **)(v8 + 312);
  size_t v496 = v6;
  if (v12)
  {
    *(void *)(v8 + 312) = *(void *)v12;
  }
  else
  {
    *(void *)(v8 + 208) += 232;
    uint64_t v13 = *(void *)(v8 + 128);
    if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 232 > *(void *)(v8 + 136) - v13)
    {
      unsigned int v402 = *(_DWORD *)(v8 + 152) >> 7;
      if (v402 >= 0x1E) {
        LOBYTE(v402) = 30;
      }
      uint64_t v403 = 4096 << v402;
      uint64_t v12 = (llvm::MachineBasicBlock *)operator new(4096 << v402, (std::align_val_t)8uLL);
      unsigned int v404 = *(_DWORD *)(v8 + 152);
      if (v404 >= *(_DWORD *)(v8 + 156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v8 + 144) + 8 * v404) = v12;
      ++*(_DWORD *)(v8 + 152);
      *(void *)(v8 + 128) = (char *)v12 + 232;
      *(void *)(v8 + 136) = (char *)v12 + v403;
      size_t v6 = v496;
    }
    else
    {
      uint64_t v12 = (llvm::MachineBasicBlock *)((v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v8 + 128) = (char *)v12 + 232;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock(v12, (llvm::MachineFunction *)v8, v11);
  BOOL v14 = *(unint64_t **)(v8 + 312);
  if (v14)
  {
    *(void *)(v8 + 312) = *v14;
  }
  else
  {
    *(void *)(v8 + 208) += 232;
    uint64_t v15 = *(void *)(v8 + 128);
    if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 232 > *(void *)(v8 + 136) - v15)
    {
      unsigned int v405 = *(_DWORD *)(v8 + 152) >> 7;
      if (v405 >= 0x1E) {
        LOBYTE(v405) = 30;
      }
      uint64_t v406 = 4096 << v405;
      BOOL v14 = (unint64_t *)operator new(4096 << v405, (std::align_val_t)8uLL);
      unsigned int v407 = *(_DWORD *)(v8 + 152);
      if (v407 >= *(_DWORD *)(v8 + 156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v8 + 144) + 8 * v407) = v14;
      ++*(_DWORD *)(v8 + 152);
      *(void *)(v8 + 128) = v14 + 29;
      *(void *)(v8 + 136) = (char *)v14 + v406;
      size_t v6 = v496;
    }
    else
    {
      BOOL v14 = (unint64_t *)((v15 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v8 + 128) = v14 + 29;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock((llvm::MachineBasicBlock *)v14, (llvm::MachineFunction *)v8, v11);
  uint64_t v16 = *(llvm::MachineBasicBlock **)(v8 + 312);
  BOOL v491 = v9;
  if (v16)
  {
    *(void *)(v8 + 312) = *(void *)v16;
  }
  else
  {
    *(void *)(v8 + 208) += 232;
    uint64_t v17 = *(void *)(v8 + 128);
    if (((v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v17 + 232 > *(void *)(v8 + 136) - v17)
    {
      unsigned int v408 = *(_DWORD *)(v8 + 152) >> 7;
      if (v408 >= 0x1E) {
        LOBYTE(v408) = 30;
      }
      uint64_t v409 = 4096 << v408;
      uint64_t v16 = (llvm::MachineBasicBlock *)operator new(4096 << v408, (std::align_val_t)8uLL);
      unsigned int v410 = *(_DWORD *)(v8 + 152);
      if (v410 >= *(_DWORD *)(v8 + 156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v8 + 144) + 8 * v410) = v16;
      ++*(_DWORD *)(v8 + 152);
      *(void *)(v8 + 128) = (char *)v16 + 232;
      *(void *)(v8 + 136) = (char *)v16 + v409;
      size_t v6 = v496;
    }
    else
    {
      uint64_t v16 = (llvm::MachineBasicBlock *)((v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v8 + 128) = (char *)v16 + 232;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock(v16, (llvm::MachineFunction *)v8, v11);
  uint64_t v18 = *(llvm::MachineBasicBlock **)(v8 + 312);
  if (v18)
  {
    *(void *)(v8 + 312) = *(void *)v18;
  }
  else
  {
    *(void *)(v8 + 208) += 232;
    uint64_t v19 = *(void *)(v8 + 128);
    if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8) - v19 + 232 > *(void *)(v8 + 136) - v19)
    {
      unsigned int v411 = *(_DWORD *)(v8 + 152) >> 7;
      if (v411 >= 0x1E) {
        LOBYTE(v411) = 30;
      }
      uint64_t v494 = 4096 << v411;
      uint64_t v18 = (llvm::MachineBasicBlock *)operator new(4096 << v411, (std::align_val_t)8uLL);
      unsigned int v412 = *(_DWORD *)(v8 + 152);
      if (v412 >= *(_DWORD *)(v8 + 156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v8 + 144) + 8 * v412) = v18;
      ++*(_DWORD *)(v8 + 152);
      *(void *)(v8 + 128) = (char *)v18 + 232;
      *(void *)(v8 + 136) = (char *)v18 + v494;
    }
    else
    {
      uint64_t v18 = (llvm::MachineBasicBlock *)((v19 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v8 + 128) = (char *)v18 + 232;
    }
  }
  uint64_t v493 = (uint64_t)v18;
  llvm::MachineBasicBlock::MachineBasicBlock(v18, (llvm::MachineFunction *)v8, v11);
  uint64_t v20 = *(void *)(a3 + 8);
  uint64_t v21 = *(unsigned int *)(a3 + 20);
  if (v20 != *(void *)a3)
  {
    unsigned int v25 = *(_DWORD *)(a3 + 16);
    goto LABEL_29;
  }
  if (!v21)
  {
LABEL_26:
    unsigned int v25 = *(_DWORD *)(a3 + 16);
    if (v21 < v25)
    {
      *(_DWORD *)(a3 + 20) = v21 + 1;
      *(void *)(v20 + 8 * v21) = v12;
      goto LABEL_50;
    }
LABEL_29:
    if (3 * v25 <= 4 * ((int)v21 - *(_DWORD *)(a3 + 24)))
    {
      if (v25 >= 0x40) {
        v25 *= 2;
      }
      else {
        unsigned int v25 = 128;
      }
    }
    else if (v25 - v21 >= v25 >> 3)
    {
      goto LABEL_31;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v25);
    unsigned int v25 = *(_DWORD *)(a3 + 16);
    uint64_t v20 = *(void *)(a3 + 8);
LABEL_31:
    unsigned int v26 = v25 - 1;
    unsigned int v27 = (v25 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    int v28 = (llvm::MachineBasicBlock **)(v20 + 8 * v27);
    uint64_t v29 = *v28;
    if (*v28 == (llvm::MachineBasicBlock *)-1)
    {
      unsigned int v30 = 0;
LABEL_43:
      if (v30) {
        uint64_t v34 = v30;
      }
      else {
        uint64_t v34 = v28;
      }
      if (*v34 != v12)
      {
        if (*v34 == (llvm::MachineBasicBlock *)-2) {
          --*(_DWORD *)(a3 + 24);
        }
        else {
          ++*(_DWORD *)(a3 + 20);
        }
        *uint64_t v34 = v12;
      }
    }
    else
    {
      unsigned int v30 = 0;
      int v31 = 1;
      while (v29 != v12)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == (llvm::MachineBasicBlock *)-2;
        }
        if (v32) {
          unsigned int v30 = v28;
        }
        unsigned int v33 = v27 + v31++;
        unsigned int v27 = v33 & v26;
        int v28 = (llvm::MachineBasicBlock **)(v20 + 8 * (v33 & v26));
        uint64_t v29 = *v28;
        if (*v28 == (llvm::MachineBasicBlock *)-1) {
          goto LABEL_43;
        }
      }
    }
    goto LABEL_50;
  }
  unsigned int v22 = 0;
  uint64_t v23 = 8 * v21;
  unsigned int v24 = *(llvm::MachineBasicBlock ***)(a3 + 8);
  while (*v24 != v12)
  {
    if (*v24 == (llvm::MachineBasicBlock *)-2) {
      unsigned int v22 = v24;
    }
    ++v24;
    v23 -= 8;
    if (!v23)
    {
      if (!v22) {
        goto LABEL_26;
      }
      *unsigned int v22 = v12;
      --*(_DWORD *)(a3 + 24);
      break;
    }
  }
LABEL_50:
  uint64_t v35 = *(void *)(a3 + 8);
  unsigned int v36 = *(_DWORD *)(a3 + 16);
  uint64_t v37 = *(unsigned int *)(a3 + 20);
  if (v35 != *(void *)a3) {
    goto LABEL_60;
  }
  if (!v37)
  {
LABEL_58:
    if (v36 > v37)
    {
      *(_DWORD *)(a3 + 20) = v37 + 1;
      *(void *)(v35 + 8 * v37) = v16;
      goto LABEL_81;
    }
LABEL_60:
    if (3 * v36 <= 4 * ((int)v37 - *(_DWORD *)(a3 + 24)))
    {
      if (v36 >= 0x40) {
        v36 *= 2;
      }
      else {
        unsigned int v36 = 128;
      }
    }
    else if (v36 - v37 >= v36 >> 3)
    {
      goto LABEL_62;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v36);
    unsigned int v36 = *(_DWORD *)(a3 + 16);
    uint64_t v35 = *(void *)(a3 + 8);
LABEL_62:
    unsigned int v41 = v36 - 1;
    unsigned int v42 = (v36 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    int v43 = (llvm::MachineBasicBlock **)(v35 + 8 * v42);
    BOOL v44 = *v43;
    if (*v43 == (llvm::MachineBasicBlock *)-1)
    {
      unsigned int v45 = 0;
LABEL_74:
      if (v45) {
        uint64_t v49 = v45;
      }
      else {
        uint64_t v49 = v43;
      }
      if (*v49 != v16)
      {
        if (*v49 == (llvm::MachineBasicBlock *)-2) {
          --*(_DWORD *)(a3 + 24);
        }
        else {
          ++*(_DWORD *)(a3 + 20);
        }
        *uint64_t v49 = v16;
      }
    }
    else
    {
      unsigned int v45 = 0;
      int v46 = 1;
      while (v44 != v16)
      {
        if (v45) {
          BOOL v47 = 0;
        }
        else {
          BOOL v47 = v44 == (llvm::MachineBasicBlock *)-2;
        }
        if (v47) {
          unsigned int v45 = v43;
        }
        unsigned int v48 = v42 + v46++;
        unsigned int v42 = v48 & v41;
        int v43 = (llvm::MachineBasicBlock **)(v35 + 8 * (v48 & v41));
        BOOL v44 = *v43;
        if (*v43 == (llvm::MachineBasicBlock *)-1) {
          goto LABEL_74;
        }
      }
    }
    goto LABEL_81;
  }
  unsigned int v38 = 0;
  uint64_t v39 = 8 * v37;
  uint64_t v40 = *(llvm::MachineBasicBlock ***)(a3 + 8);
  while (*v40 != v16)
  {
    if (*v40 == (llvm::MachineBasicBlock *)-2) {
      unsigned int v38 = v40;
    }
    ++v40;
    v39 -= 8;
    if (!v39)
    {
      if (!v38) {
        goto LABEL_58;
      }
      unint64_t *v38 = v16;
      --*(_DWORD *)(a3 + 24);
      break;
    }
  }
LABEL_81:
  uint64_t v50 = *(void *)(a3 + 8);
  unsigned int v51 = *(_DWORD *)(a3 + 16);
  uint64_t v52 = *(unsigned int *)(a3 + 20);
  if (v50 != *(void *)a3) {
    goto LABEL_91;
  }
  if (!v52)
  {
LABEL_89:
    if (v51 > v52)
    {
      *(_DWORD *)(a3 + 20) = v52 + 1;
      *(void *)(v50 + 8 * v52) = v14;
      goto LABEL_112;
    }
LABEL_91:
    if (3 * v51 <= 4 * ((int)v52 - *(_DWORD *)(a3 + 24)))
    {
      if (v51 >= 0x40) {
        v51 *= 2;
      }
      else {
        unsigned int v51 = 128;
      }
    }
    else if (v51 - v52 >= v51 >> 3)
    {
      goto LABEL_93;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v51);
    unsigned int v51 = *(_DWORD *)(a3 + 16);
    uint64_t v50 = *(void *)(a3 + 8);
LABEL_93:
    unsigned int v56 = v51 - 1;
    unsigned int v57 = (v51 - 1) & ((v14 >> 4) ^ (v14 >> 9));
    int v58 = (unint64_t **)(v50 + 8 * v57);
    BOOL v59 = *v58;
    if (*v58 == (unint64_t *)-1)
    {
      unsigned int v60 = 0;
LABEL_105:
      if (v60) {
        uint64_t v64 = v60;
      }
      else {
        uint64_t v64 = v58;
      }
      if (*v64 != v14)
      {
        if (*v64 == (unint64_t *)-2) {
          --*(_DWORD *)(a3 + 24);
        }
        else {
          ++*(_DWORD *)(a3 + 20);
        }
        *uint64_t v64 = v14;
      }
    }
    else
    {
      unsigned int v60 = 0;
      int v61 = 1;
      while (v59 != v14)
      {
        if (v60) {
          BOOL v62 = 0;
        }
        else {
          BOOL v62 = v59 == (unint64_t *)-2;
        }
        if (v62) {
          unsigned int v60 = v58;
        }
        unsigned int v63 = v57 + v61++;
        unsigned int v57 = v63 & v56;
        int v58 = (unint64_t **)(v50 + 8 * (v63 & v56));
        BOOL v59 = *v58;
        if (*v58 == (unint64_t *)-1) {
          goto LABEL_105;
        }
      }
    }
    goto LABEL_112;
  }
  unsigned int v53 = 0;
  uint64_t v54 = 8 * v52;
  uint64_t v55 = *(unint64_t ***)(a3 + 8);
  while (*v55 != v14)
  {
    if (*v55 == (unint64_t *)-2) {
      unsigned int v53 = v55;
    }
    ++v55;
    v54 -= 8;
    if (!v54)
    {
      if (!v53) {
        goto LABEL_89;
      }
      *unsigned int v53 = v14;
      --*(_DWORD *)(a3 + 24);
      break;
    }
  }
LABEL_112:
  unsigned int v65 = (uint64_t *)v7[1];
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v8 + 320, (uint64_t)v12);
  uint64_t v66 = *v65;
  *(void *)uint64_t v12 = *v65;
  *((void *)v12 + 1) = v65;
  *(void *)(v66 + 8) = v12;
  uint64_t *v65 = (uint64_t)v12;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v8 + 320, (uint64_t)v14);
  uint64_t v67 = *v65;
  *BOOL v14 = *v65;
  v14[1] = (unint64_t)v65;
  *(void *)(v67 + 8) = v14;
  uint64_t *v65 = (uint64_t)v14;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v8 + 320, (uint64_t)v16);
  uint64_t v68 = *v65;
  *(void *)uint64_t v16 = *v65;
  *((void *)v16 + 1) = v65;
  *(void *)(v68 + 8) = v16;
  uint64_t *v65 = (uint64_t)v16;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v8 + 320, v493);
  uint64_t v69 = *v65;
  *(void *)uint64_t v493 = *v65;
  *(void *)(v493 + 8) = v65;
  *(void *)(v69 + 8) = v493;
  uint64_t *v65 = v493;
  unsigned __int16 v70 = *(unint64_t **)(v493 + 56);
  if (!a2)
  {
    uint64_t v71 = 0;
    goto LABEL_117;
  }
  uint64_t v71 = a2;
  if ((*(unsigned char *)a2 & 4) == 0)
  {
LABEL_117:
    while ((*(_WORD *)(v71 + 44) & 8) != 0)
      uint64_t v71 = *(void *)(v71 + 8);
  }
  uint64_t v72 = *(unint64_t **)(v71 + 8);
  int v73 = v7 + 6;
  if (v72 != v7 + 6 && v70 != v73)
  {
    if ((unint64_t *)v493 != v7)
    {
      unint64_t v384 = *(void *)(v493 + 40);
      unint64_t v385 = v72;
      do
      {
        v385[3] = v384;
        unint64_t v385 = (unint64_t *)v385[1];
      }
      while (v385 != v73);
    }
    unint64_t v75 = *v73;
    unint64_t v76 = *v73 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v77 = *v72 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v77 + 8) = v73;
    unint64_t *v73 = v77 | v75 & 7;
    unint64_t v78 = *v70 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v76 + 8) = v70;
    *uint64_t v72 = v78 | *v72 & 7;
    *(void *)(v78 + 8) = v72;
    *unsigned __int16 v70 = v75 & 0xFFFFFFFFFFFFFFF8 | *v70 & 7;
  }
  llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v493, (llvm::MachineBasicBlock *)v7);
  if (v73 != (unint64_t *)a2)
  {
    uint64_t v79 = (unint64_t *)v14[7];
    if (v79 != v73)
    {
      if (v14 != v7)
      {
        unint64_t v386 = v14[5];
        uint64_t v387 = (unint64_t *)a2;
        do
        {
          v387[3] = v386;
          uint64_t v387 = (unint64_t *)v387[1];
        }
        while (v387 != v73);
      }
      unint64_t v80 = *v73;
      unint64_t v81 = *v73 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v82 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v82 + 8) = v73;
      unint64_t *v73 = v82 | v80 & 7;
      unint64_t v83 = *v79 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v81 + 8) = v79;
      *(void *)a2 = v83 | *(void *)a2 & 7;
      *(void *)(v83 + 8) = a2;
      *uint64_t v79 = v80 & 0xFFFFFFFFFFFFFFF8 | *v79 & 7;
    }
  }
  llvm::MachineBasicBlock::addSuccessor(v7, v12, -1);
  llvm::MachineBasicBlock::addSuccessor(v12, v12, -1);
  llvm::MachineBasicBlock::addSuccessor(v12, v14, -1);
  llvm::MachineBasicBlock::addSuccessor(v14, v16, -1);
  llvm::MachineBasicBlock::addSuccessor(v16, v16, -1);
  llvm::MachineBasicBlock::addSuccessor(v16, (void *)v493, -1);
  uint64_t v84 = *(void *)(*(void *)(v6 + 264) + 8) + 570000;
  uint64_t v85 = (llvm::MachineFunction *)v7[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  uint64_t v86 = llvm::MachineFunction::CreateMachineInstr(v85, v84, &v498, 0);
  uint64_t v490 = (unint64_t *)a2;
  if (v498)
  {
    int v414 = *v498;
    if ((v414 - 4) > 0x1E)
    {
      if ((v414 - 3) >= 0xFFFFFFFE) {
        uint64_t v471 = v498;
      }
      else {
        uint64_t v471 = 0;
      }
      if ((v414 - 3) < 0xFFFFFFFE)
      {
        if (v414 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_131;
      }
      unint64_t v416 = (unint64_t)(v471 + 8);
    }
    else
    {
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_131;
      }
      uint64_t v415 = *((void *)v498 + 2);
      if ((v415 & 4) == 0) {
        goto LABEL_131;
      }
      unint64_t v416 = v415 & 0xFFFFFFFFFFFFFFF8;
      if (!v416) {
        goto LABEL_131;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v416 + 16, &v499);
  }
LABEL_131:
  unint64_t v87 = v7[5];
  *((void *)v86 + 3) = v87;
  uint64_t v88 = *(void *)(v87 + 32);
  uint64_t v89 = *((unsigned int *)v86 + 10);
  if (v89)
  {
    uint64_t v265 = *((void *)v86 + 4);
    uint64_t v266 = *(void *)(v88 + 40);
    uint64_t v267 = 32 * v89;
    do
    {
      if (!*(unsigned char *)v265)
      {
        uint64_t v268 = *(unsigned int *)(v265 + 4);
        if ((int)v268 >= 0) {
          unint64_t v269 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v268);
        }
        else {
          unint64_t v269 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v268 & 0x7FFFFFFF) + 8);
        }
        uint64_t v270 = *v269;
        if (*v269)
        {
          uint64_t v271 = *(void *)(v270 + 16);
          *(void *)(v270 + 16) = v265;
          *(void *)(v265 + 16) = v271;
          if (*(unsigned char *)(v265 + 3))
          {
            *(void *)(v265 + 24) = v270;
          }
          else
          {
            *(void *)(v265 + 24) = 0;
            unint64_t v269 = (uint64_t *)(v271 + 24);
          }
        }
        else
        {
          *(void *)(v265 + 16) = v265;
          *(void *)(v265 + 24) = 0;
        }
        *unint64_t v269 = v265;
      }
      v265 += 32;
      v267 -= 32;
    }
    while (v267);
  }
  uint64_t v90 = *(void *)(v88 + 728);
  if (v90) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v90 + 24))(v90, v86);
  }
  unint64_t v91 = *v73 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v86 = v91 | *(void *)v86 & 7;
  *((void *)v86 + 1) = v73;
  *(void *)(v91 + 8) = v86;
  unint64_t *v73 = *v73 & 7 | (unint64_t)v86;
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v499);
  size_t v92 = v496;
  uint64_t v93 = *(void *)(*(void *)(v496 + 264) + 8);
  if (v491)
  {
    uint64_t v94 = v93 + 35232;
    uint64_t v95 = (llvm::MachineFunction *)v7[4];
    uint64_t v498 = v497;
    if (v497) {
      llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
    }
    uint64_t v96 = llvm::MachineFunction::CreateMachineInstr(v95, v94, &v498, 0);
    if (!v498) {
      goto LABEL_138;
    }
    int v465 = *v498;
    if ((v465 - 4) > 0x1E)
    {
      if ((v465 - 3) >= 0xFFFFFFFE) {
        uint64_t v488 = v498;
      }
      else {
        uint64_t v488 = 0;
      }
      if ((v465 - 3) < 0xFFFFFFFE)
      {
        size_t v92 = v496;
        if (v465 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_138;
      }
      unint64_t v467 = (unint64_t)(v488 + 8);
    }
    else
    {
      size_t v92 = v496;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_138;
      }
      uint64_t v466 = *((void *)v498 + 2);
      if ((v466 & 4) == 0) {
        goto LABEL_138;
      }
      unint64_t v467 = v466 & 0xFFFFFFFFFFFFFFF8;
      if (!v467) {
        goto LABEL_138;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v467 + 16, &v499);
    size_t v92 = v496;
LABEL_138:
    unint64_t v97 = v7[5];
    *((void *)v96 + 3) = v97;
    uint64_t v98 = *(void *)(v97 + 32);
    uint64_t v99 = *((unsigned int *)v96 + 10);
    if (v99)
    {
      uint64_t v388 = *((void *)v96 + 4);
      uint64_t v389 = *(void *)(v98 + 40);
      uint64_t v390 = 32 * v99;
      do
      {
        if (!*(unsigned char *)v388)
        {
          uint64_t v391 = *(unsigned int *)(v388 + 4);
          if ((int)v391 >= 0) {
            uint64_t v392 = (uint64_t *)(*(void *)(v389 + 272) + 8 * v391);
          }
          else {
            uint64_t v392 = (uint64_t *)(*(void *)(v389 + 24) + 16 * (v391 & 0x7FFFFFFF) + 8);
          }
          uint64_t v393 = *v392;
          if (*v392)
          {
            uint64_t v394 = *(void *)(v393 + 16);
            *(void *)(v393 + 16) = v388;
            *(void *)(v388 + 16) = v394;
            if (*(unsigned char *)(v388 + 3))
            {
              *(void *)(v388 + 24) = v393;
            }
            else
            {
              *(void *)(v388 + 24) = 0;
              uint64_t v392 = (uint64_t *)(v394 + 24);
            }
          }
          else
          {
            *(void *)(v388 + 16) = v388;
            *(void *)(v388 + 24) = 0;
          }
          *uint64_t v392 = v388;
        }
        v388 += 32;
        v390 -= 32;
      }
      while (v390);
    }
    uint64_t v100 = *(void *)(v98 + 728);
    if (v100) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v100 + 24))(v100, v96);
    }
    unint64_t v101 = *v73 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v96 = v101 | *(void *)v96 & 7;
    *((void *)v96 + 1) = v73;
    *(void *)(v101 + 8) = v96;
    unint64_t *v73 = *v73 & 7 | (unint64_t)v96;
    *((void *)&v499 + 1) = 0;
    long long v500 = 0uLL;
    LODWORD(v499) = 0x1000000;
    DWORD1(v499) = v492;
    llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v499);
    LODWORD(v499) = 1;
    *((void *)&v499 + 1) = 0;
    *(void *)&long long v500 = 0;
    llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v499);
    *((void *)&v499 + 1) = 0;
    long long v500 = 0uLL;
    LODWORD(v499) = 0;
    DWORD1(v499) = v492;
    goto LABEL_149;
  }
  uint64_t v102 = v93 + 35424;
  uint64_t v95 = (llvm::MachineFunction *)v7[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  uint64_t v96 = llvm::MachineFunction::CreateMachineInstr(v95, v102, &v498, 0);
  if (v498)
  {
    int v468 = *v498;
    if ((v468 - 4) > 0x1E)
    {
      if ((v468 - 3) >= 0xFFFFFFFE) {
        uint64_t v489 = v498;
      }
      else {
        uint64_t v489 = 0;
      }
      if ((v468 - 3) < 0xFFFFFFFE)
      {
        size_t v92 = v496;
        if (v468 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_145;
      }
      unint64_t v470 = (unint64_t)(v489 + 8);
    }
    else
    {
      size_t v92 = v496;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_145;
      }
      uint64_t v469 = *((void *)v498 + 2);
      if ((v469 & 4) == 0) {
        goto LABEL_145;
      }
      unint64_t v470 = v469 & 0xFFFFFFFFFFFFFFF8;
      if (!v470) {
        goto LABEL_145;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v470 + 16, &v499);
    size_t v92 = v496;
  }
LABEL_145:
  unint64_t v103 = v7[5];
  *((void *)v96 + 3) = v103;
  uint64_t v104 = *(void *)(v103 + 32);
  uint64_t v105 = *((unsigned int *)v96 + 10);
  if (v105)
  {
    uint64_t v395 = *((void *)v96 + 4);
    uint64_t v396 = *(void *)(v104 + 40);
    uint64_t v397 = 32 * v105;
    do
    {
      if (!*(unsigned char *)v395)
      {
        uint64_t v398 = *(unsigned int *)(v395 + 4);
        if ((int)v398 >= 0) {
          uint64_t v399 = (uint64_t *)(*(void *)(v396 + 272) + 8 * v398);
        }
        else {
          uint64_t v399 = (uint64_t *)(*(void *)(v396 + 24) + 16 * (v398 & 0x7FFFFFFF) + 8);
        }
        uint64_t v400 = *v399;
        if (*v399)
        {
          uint64_t v401 = *(void *)(v400 + 16);
          *(void *)(v400 + 16) = v395;
          *(void *)(v395 + 16) = v401;
          if (*(unsigned char *)(v395 + 3))
          {
            *(void *)(v395 + 24) = v400;
          }
          else
          {
            *(void *)(v395 + 24) = 0;
            uint64_t v399 = (uint64_t *)(v401 + 24);
          }
        }
        else
        {
          *(void *)(v395 + 16) = v395;
          *(void *)(v395 + 24) = 0;
        }
        *uint64_t v399 = v395;
      }
      v395 += 32;
      v397 -= 32;
    }
    while (v397);
  }
  uint64_t v106 = *(void *)(v104 + 728);
  if (v106) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v106 + 24))(v106, v96);
  }
  unint64_t v107 = *v73 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v96 = v107 | *(void *)v96 & 7;
  *((void *)v96 + 1) = v73;
  *(void *)(v107 + 8) = v96;
  unint64_t *v73 = *v73 & 7 | (unint64_t)v96;
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0x1000000;
  DWORD1(v499) = v492;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
LABEL_149:
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 2;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v96, v95, (const llvm::MachineOperand *)&v499);
  uint64_t v108 = *(void *)(*(void *)(v92 + 264) + 8) + 239664;
  uint64_t v109 = (llvm::MachineFunction *)*((void *)v12 + 4);
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  unint64_t v110 = llvm::MachineFunction::CreateMachineInstr(v109, v108, &v498, 0);
  if (v498)
  {
    int v417 = *v498;
    if ((v417 - 4) > 0x1E)
    {
      if ((v417 - 3) >= 0xFFFFFFFE) {
        uint64_t v472 = v498;
      }
      else {
        uint64_t v472 = 0;
      }
      if ((v417 - 3) < 0xFFFFFFFE)
      {
        size_t v92 = v496;
        if (v417 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_152;
      }
      unint64_t v419 = (unint64_t)(v472 + 8);
    }
    else
    {
      size_t v92 = v496;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_152;
      }
      uint64_t v418 = *((void *)v498 + 2);
      if ((v418 & 4) == 0) {
        goto LABEL_152;
      }
      unint64_t v419 = v418 & 0xFFFFFFFFFFFFFFF8;
      if (!v419) {
        goto LABEL_152;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v419 + 16, &v499);
    size_t v92 = v496;
  }
LABEL_152:
  uint64_t v111 = (void *)((char *)v12 + 48);
  uint64_t v112 = *((void *)v12 + 5);
  *((void *)v110 + 3) = v112;
  uint64_t v113 = *(void *)(v112 + 32);
  uint64_t v114 = *((unsigned int *)v110 + 10);
  if (v114)
  {
    uint64_t v272 = *((void *)v110 + 4);
    uint64_t v273 = *(void *)(v113 + 40);
    uint64_t v274 = 32 * v114;
    do
    {
      if (!*(unsigned char *)v272)
      {
        uint64_t v275 = *(unsigned int *)(v272 + 4);
        if ((int)v275 >= 0) {
          int v276 = (uint64_t *)(*(void *)(v273 + 272) + 8 * v275);
        }
        else {
          int v276 = (uint64_t *)(*(void *)(v273 + 24) + 16 * (v275 & 0x7FFFFFFF) + 8);
        }
        uint64_t v277 = *v276;
        if (*v276)
        {
          uint64_t v278 = *(void *)(v277 + 16);
          *(void *)(v277 + 16) = v272;
          *(void *)(v272 + 16) = v278;
          if (*(unsigned char *)(v272 + 3))
          {
            *(void *)(v272 + 24) = v277;
          }
          else
          {
            *(void *)(v272 + 24) = 0;
            int v276 = (uint64_t *)(v278 + 24);
          }
        }
        else
        {
          *(void *)(v272 + 16) = v272;
          *(void *)(v272 + 24) = 0;
        }
        *int v276 = v272;
      }
      v272 += 32;
      v274 -= 32;
    }
    while (v274);
  }
  uint64_t v115 = *(void *)(v113 + 728);
  if (v115) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v115 + 24))(v115, v110);
  }
  unint64_t v116 = *((void *)v12 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v110 = v116 | *(void *)v110 & 7;
  *((void *)v110 + 1) = v111;
  *(void *)(v116 + 8) = v110;
  *((void *)v12 + 6) = *((void *)v12 + 6) & 7 | (unint64_t)v110;
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v110, v109, (const llvm::MachineOperand *)&v499);
  long long v500 = 0uLL;
  long long v499 = 0x11400000000uLL;
  llvm::MachineInstr::addOperand(v110, v109, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v110, v109, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v110, v109, (const llvm::MachineOperand *)&v499);
  long long v500 = 0uLL;
  long long v499 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v110, v109, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v110, v109, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v110, v109, (const llvm::MachineOperand *)&v499);
  uint64_t v117 = *(void *)(v92 + 248);
  uint64_t v118 = *(void *)v8;
  LODWORD(v499) = 0;
  BOOL v119 = sub_1CD3CA314(v117, v118, "IDFSLCMode", &v499);
  uint64_t v120 = v499;
  uint64_t v121 = *(void *)(*(void *)(v92 + 264) + 8) + 139296;
  unint64_t v122 = (llvm::MachineFunction *)*((void *)v12 + 4);
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  uint64_t v123 = llvm::MachineFunction::CreateMachineInstr(v122, v121, &v498, 0);
  if (v498)
  {
    int v420 = *v498;
    if ((v420 - 4) > 0x1E)
    {
      if ((v420 - 3) >= 0xFFFFFFFE) {
        v473 = v498;
      }
      else {
        v473 = 0;
      }
      if ((v420 - 3) < 0xFFFFFFFE)
      {
        if (v420 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_158;
      }
      unint64_t v422 = (unint64_t)(v473 + 8);
    }
    else
    {
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_158;
      }
      uint64_t v421 = *((void *)v498 + 2);
      if ((v421 & 4) == 0) {
        goto LABEL_158;
      }
      unint64_t v422 = v421 & 0xFFFFFFFFFFFFFFF8;
      if (!v422) {
        goto LABEL_158;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v422 + 16, &v499);
    uint64_t v111 = (void *)((char *)v12 + 48);
  }
LABEL_158:
  uint64_t v124 = *((void *)v12 + 5);
  *((void *)v123 + 3) = v124;
  uint64_t v125 = *(void *)(v124 + 32);
  uint64_t v126 = *((unsigned int *)v123 + 10);
  if (v126)
  {
    uint64_t v279 = *((void *)v123 + 4);
    uint64_t v280 = *(void *)(v125 + 40);
    uint64_t v281 = 32 * v126;
    do
    {
      if (!*(unsigned char *)v279)
      {
        uint64_t v282 = *(unsigned int *)(v279 + 4);
        if ((int)v282 >= 0) {
          unint64_t v283 = (uint64_t *)(*(void *)(v280 + 272) + 8 * v282);
        }
        else {
          unint64_t v283 = (uint64_t *)(*(void *)(v280 + 24) + 16 * (v282 & 0x7FFFFFFF) + 8);
        }
        uint64_t v284 = *v283;
        if (*v283)
        {
          uint64_t v285 = *(void *)(v284 + 16);
          *(void *)(v284 + 16) = v279;
          *(void *)(v279 + 16) = v285;
          if (*(unsigned char *)(v279 + 3))
          {
            *(void *)(v279 + 24) = v284;
          }
          else
          {
            *(void *)(v279 + 24) = 0;
            unint64_t v283 = (uint64_t *)(v285 + 24);
          }
        }
        else
        {
          *(void *)(v279 + 16) = v279;
          *(void *)(v279 + 24) = 0;
        }
        uint64_t *v283 = v279;
      }
      v279 += 32;
      v281 -= 32;
    }
    while (v281);
  }
  uint64_t v127 = *(void *)(v125 + 728);
  if (v127) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v127 + 24))(v127, v123);
  }
  unint64_t v128 = *((void *)v12 + 6) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v129 = v111;
  *(void *)uint64_t v123 = v128 | *(void *)v123 & 7;
  *((void *)v123 + 1) = v111;
  *(void *)(v128 + 8) = v123;
  *((void *)v12 + 6) = *((void *)v12 + 6) & 7 | (unint64_t)v123;
  int v130 = *(_DWORD *)(v495 + 68);
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0;
  DWORD1(v499) = v130;
  llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  if (v119) {
    uint64_t v131 = v120;
  }
  else {
    uint64_t v131 = 0;
  }
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v131;
  llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v499);
  uint64_t v132 = *(void *)(v495 + 208);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v132;
  llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v499);
  long long v500 = 0uLL;
  long long v499 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v499);
  size_t v133 = v496;
  uint64_t v134 = *(void *)(*(void *)(v496 + 264) + 8) + 30624;
  unint64_t v135 = (llvm::MachineFunction *)*((void *)v12 + 4);
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  unint64_t v136 = llvm::MachineFunction::CreateMachineInstr(v135, v134, &v498, 0);
  int v137 = v492;
  if (v498)
  {
    int v423 = *v498;
    if ((v423 - 4) > 0x1E)
    {
      if ((v423 - 3) >= 0xFFFFFFFE) {
        uint64_t v474 = v498;
      }
      else {
        uint64_t v474 = 0;
      }
      if ((v423 - 3) < 0xFFFFFFFE)
      {
        size_t v133 = v496;
        int v137 = v492;
        if (v423 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_167;
      }
      unint64_t v425 = (unint64_t)(v474 + 8);
    }
    else
    {
      size_t v133 = v496;
      int v137 = v492;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_167;
      }
      uint64_t v424 = *((void *)v498 + 2);
      if ((v424 & 4) == 0) {
        goto LABEL_167;
      }
      unint64_t v425 = v424 & 0xFFFFFFFFFFFFFFF8;
      if (!v425) {
        goto LABEL_167;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v425 + 16, &v499);
    size_t v133 = v496;
    int v137 = v492;
  }
LABEL_167:
  uint64_t v138 = *((void *)v12 + 5);
  *((void *)v136 + 3) = v138;
  uint64_t v139 = *(void *)(v138 + 32);
  uint64_t v140 = *((unsigned int *)v136 + 10);
  if (v140)
  {
    uint64_t v286 = *((void *)v136 + 4);
    uint64_t v287 = *(void *)(v139 + 40);
    uint64_t v288 = 32 * v140;
    do
    {
      if (!*(unsigned char *)v286)
      {
        uint64_t v289 = *(unsigned int *)(v286 + 4);
        if ((int)v289 >= 0) {
          uint64_t v290 = (uint64_t *)(*(void *)(v287 + 272) + 8 * v289);
        }
        else {
          uint64_t v290 = (uint64_t *)(*(void *)(v287 + 24) + 16 * (v289 & 0x7FFFFFFF) + 8);
        }
        uint64_t v291 = *v290;
        if (*v290)
        {
          uint64_t v292 = *(void *)(v291 + 16);
          *(void *)(v291 + 16) = v286;
          *(void *)(v286 + 16) = v292;
          if (*(unsigned char *)(v286 + 3))
          {
            *(void *)(v286 + 24) = v291;
          }
          else
          {
            *(void *)(v286 + 24) = 0;
            uint64_t v290 = (uint64_t *)(v292 + 24);
          }
        }
        else
        {
          *(void *)(v286 + 16) = v286;
          *(void *)(v286 + 24) = 0;
        }
        uint64_t *v290 = v286;
      }
      v286 += 32;
      v288 -= 32;
    }
    while (v288);
  }
  uint64_t v141 = *(void *)(v139 + 728);
  if (v141) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v141 + 24))(v141, v136);
  }
  unint64_t v142 = *((void *)v12 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v136 = v142 | *(void *)v136 & 7;
  *((void *)v136 + 1) = v129;
  *(void *)(v142 + 8) = v136;
  *((void *)v12 + 6) = *((void *)v12 + 6) & 7 | (unint64_t)v136;
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0x1000000;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v136, v135, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v136, v135, (const llvm::MachineOperand *)&v499);
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v136, v135, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v136, v135, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v136, v135, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 2;
  llvm::MachineInstr::addOperand(v136, v135, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v136, v135, (const llvm::MachineOperand *)&v499);
  uint64_t v143 = *(void *)(*(void *)(v133 + 264) + 8) + 18960;
  uint64_t v144 = (llvm::MachineFunction *)*((void *)v12 + 4);
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  uint64_t v145 = llvm::MachineFunction::CreateMachineInstr(v144, v143, &v498, 0);
  if (v498)
  {
    int v426 = *v498;
    if ((v426 - 4) > 0x1E)
    {
      if ((v426 - 3) >= 0xFFFFFFFE) {
        uint64_t v475 = v498;
      }
      else {
        uint64_t v475 = 0;
      }
      if ((v426 - 3) < 0xFFFFFFFE)
      {
        size_t v133 = v496;
        int v137 = v492;
        if (v426 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_173;
      }
      unint64_t v428 = (unint64_t)(v475 + 8);
    }
    else
    {
      size_t v133 = v496;
      int v137 = v492;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_173;
      }
      uint64_t v427 = *((void *)v498 + 2);
      if ((v427 & 4) == 0) {
        goto LABEL_173;
      }
      unint64_t v428 = v427 & 0xFFFFFFFFFFFFFFF8;
      if (!v428) {
        goto LABEL_173;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v428 + 16, &v499);
    size_t v133 = v496;
    int v137 = v492;
  }
LABEL_173:
  uint64_t v146 = *((void *)v12 + 5);
  *((void *)v145 + 3) = v146;
  uint64_t v147 = *(void *)(v146 + 32);
  uint64_t v148 = *((unsigned int *)v145 + 10);
  if (v148)
  {
    uint64_t v293 = *((void *)v145 + 4);
    uint64_t v294 = *(void *)(v147 + 40);
    uint64_t v295 = 32 * v148;
    do
    {
      if (!*(unsigned char *)v293)
      {
        uint64_t v296 = *(unsigned int *)(v293 + 4);
        if ((int)v296 >= 0) {
          int v297 = (uint64_t *)(*(void *)(v294 + 272) + 8 * v296);
        }
        else {
          int v297 = (uint64_t *)(*(void *)(v294 + 24) + 16 * (v296 & 0x7FFFFFFF) + 8);
        }
        uint64_t v298 = *v297;
        if (*v297)
        {
          uint64_t v299 = *(void *)(v298 + 16);
          *(void *)(v298 + 16) = v293;
          *(void *)(v293 + 16) = v299;
          if (*(unsigned char *)(v293 + 3))
          {
            *(void *)(v293 + 24) = v298;
          }
          else
          {
            *(void *)(v293 + 24) = 0;
            int v297 = (uint64_t *)(v299 + 24);
          }
        }
        else
        {
          *(void *)(v293 + 16) = v293;
          *(void *)(v293 + 24) = 0;
        }
        *int v297 = v293;
      }
      v293 += 32;
      v295 -= 32;
    }
    while (v295);
  }
  uint64_t v149 = *(void *)(v147 + 728);
  if (v149) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v149 + 24))(v149, v145);
  }
  unint64_t v150 = *((void *)v12 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v145 = v150 | *(void *)v145 & 7;
  *((void *)v145 + 1) = v129;
  *(void *)(v150 + 8) = v145;
  *((void *)v12 + 6) = *((void *)v12 + 6) & 7 | (unint64_t)v145;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v12;
  LODWORD(v499) = 4;
  llvm::MachineInstr::addOperand(v145, v144, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v145, v144, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v145, v144, (const llvm::MachineOperand *)&v499);
  uint64_t v151 = (unint64_t *)v14[7];
  uint64_t v152 = *(void *)(*(void *)(v133 + 264) + 8) + 28320;
  uint64_t v153 = (llvm::MachineFunction *)v14[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  uint64_t v154 = llvm::MachineFunction::CreateMachineInstr(v153, v152, &v498, 0);
  uint64_t v155 = v495;
  uint64_t v156 = v490;
  if (v498)
  {
    int v429 = *v498;
    if ((v429 - 4) > 0x1E)
    {
      if ((v429 - 3) >= 0xFFFFFFFE) {
        uint64_t v476 = v498;
      }
      else {
        uint64_t v476 = 0;
      }
      if ((v429 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        int v137 = v492;
        uint64_t v156 = v490;
        if (v429 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_179;
      }
      unint64_t v431 = (unint64_t)(v476 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      int v137 = v492;
      uint64_t v156 = v490;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_179;
      }
      uint64_t v430 = *((void *)v498 + 2);
      if ((v430 & 4) == 0) {
        goto LABEL_179;
      }
      unint64_t v431 = v430 & 0xFFFFFFFFFFFFFFF8;
      if (!v431) {
        goto LABEL_179;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v431 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    int v137 = v492;
    uint64_t v156 = v490;
  }
LABEL_179:
  unint64_t v157 = v14[5];
  *((void *)v154 + 3) = v157;
  uint64_t v158 = *(void *)(v157 + 32);
  uint64_t v159 = *((unsigned int *)v154 + 10);
  if (v159)
  {
    uint64_t v300 = *((void *)v154 + 4);
    uint64_t v301 = *(void *)(v158 + 40);
    uint64_t v302 = 32 * v159;
    do
    {
      if (!*(unsigned char *)v300)
      {
        uint64_t v303 = *(unsigned int *)(v300 + 4);
        if ((int)v303 >= 0) {
          unint64_t v304 = (uint64_t *)(*(void *)(v301 + 272) + 8 * v303);
        }
        else {
          unint64_t v304 = (uint64_t *)(*(void *)(v301 + 24) + 16 * (v303 & 0x7FFFFFFF) + 8);
        }
        uint64_t v305 = *v304;
        if (*v304)
        {
          uint64_t v306 = *(void *)(v305 + 16);
          *(void *)(v305 + 16) = v300;
          *(void *)(v300 + 16) = v306;
          if (*(unsigned char *)(v300 + 3))
          {
            *(void *)(v300 + 24) = v305;
          }
          else
          {
            *(void *)(v300 + 24) = 0;
            unint64_t v304 = (uint64_t *)(v306 + 24);
          }
        }
        else
        {
          *(void *)(v300 + 16) = v300;
          *(void *)(v300 + 24) = 0;
        }
        uint64_t *v304 = v300;
      }
      v300 += 32;
      v302 -= 32;
    }
    while (v302);
  }
  uint64_t v160 = *(void *)(v158 + 728);
  if (v160) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v160 + 24))(v160, v154);
  }
  unint64_t v161 = *v151 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v154 = v161 | *(void *)v154 & 7;
  *((void *)v154 + 1) = v151;
  *(void *)(v161 + 8) = v154;
  *uint64_t v151 = *v151 & 7 | (unint64_t)v154;
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0x1000000;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v154, v153, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v154, v153, (const llvm::MachineOperand *)&v499);
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v154, v153, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v154, v153, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v154, v153, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 2;
  llvm::MachineInstr::addOperand(v154, v153, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v154, v153, (const llvm::MachineOperand *)&v499);
  uint64_t v162 = *(void *)(*(void *)(v133 + 264) + 8) + 644640;
  uint64_t v163 = (llvm::MachineFunction *)v14[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  uint64_t v164 = llvm::MachineFunction::CreateMachineInstr(v163, v162, &v498, 0);
  if (v498)
  {
    int v432 = *v498;
    if ((v432 - 4) > 0x1E)
    {
      if ((v432 - 3) >= 0xFFFFFFFE) {
        uint64_t v477 = v498;
      }
      else {
        uint64_t v477 = 0;
      }
      if ((v432 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        int v137 = v492;
        uint64_t v156 = v490;
        if (v432 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_185;
      }
      unint64_t v434 = (unint64_t)(v477 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      int v137 = v492;
      uint64_t v156 = v490;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_185;
      }
      uint64_t v433 = *((void *)v498 + 2);
      if ((v433 & 4) == 0) {
        goto LABEL_185;
      }
      unint64_t v434 = v433 & 0xFFFFFFFFFFFFFFF8;
      if (!v434) {
        goto LABEL_185;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v434 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    int v137 = v492;
    uint64_t v156 = v490;
  }
LABEL_185:
  unint64_t v165 = v14[5];
  *((void *)v164 + 3) = v165;
  uint64_t v166 = *(void *)(v165 + 32);
  uint64_t v167 = *((unsigned int *)v164 + 10);
  if (v167)
  {
    uint64_t v307 = *((void *)v164 + 4);
    uint64_t v308 = *(void *)(v166 + 40);
    uint64_t v309 = 32 * v167;
    do
    {
      if (!*(unsigned char *)v307)
      {
        uint64_t v310 = *(unsigned int *)(v307 + 4);
        if ((int)v310 >= 0) {
          uint64_t v311 = (uint64_t *)(*(void *)(v308 + 272) + 8 * v310);
        }
        else {
          uint64_t v311 = (uint64_t *)(*(void *)(v308 + 24) + 16 * (v310 & 0x7FFFFFFF) + 8);
        }
        uint64_t v312 = *v311;
        if (*v311)
        {
          uint64_t v313 = *(void *)(v312 + 16);
          *(void *)(v312 + 16) = v307;
          *(void *)(v307 + 16) = v313;
          if (*(unsigned char *)(v307 + 3))
          {
            *(void *)(v307 + 24) = v312;
          }
          else
          {
            *(void *)(v307 + 24) = 0;
            uint64_t v311 = (uint64_t *)(v313 + 24);
          }
        }
        else
        {
          *(void *)(v307 + 16) = v307;
          *(void *)(v307 + 24) = 0;
        }
        *uint64_t v311 = v307;
      }
      v307 += 32;
      v309 -= 32;
    }
    while (v309);
  }
  uint64_t v168 = *(void *)(v166 + 728);
  if (v168) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v168 + 24))(v168, v164);
  }
  unint64_t v169 = *v156 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v164 = v169 | *(void *)v164 & 7;
  *((void *)v164 + 1) = v156;
  *(void *)(v169 + 8) = v164;
  *uint64_t v156 = *v156 & 7 | (unint64_t)v164;
  uint64_t v170 = *(void *)(v155 + 208);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v170;
  llvm::MachineInstr::addOperand(v164, v163, (const llvm::MachineOperand *)&v499);
  uint64_t v171 = *(void *)(*(void *)(v133 + 264) + 8) + 558960;
  int v172 = *(_DWORD *)(v155 + 4);
  uint64_t v173 = (llvm::MachineFunction *)v14[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  unint64_t v174 = llvm::MachineFunction::CreateMachineInstr(v173, v171, &v498, 0);
  if (v498)
  {
    int v435 = *v498;
    if ((v435 - 4) > 0x1E)
    {
      if ((v435 - 3) >= 0xFFFFFFFE) {
        uint64_t v478 = v498;
      }
      else {
        uint64_t v478 = 0;
      }
      if ((v435 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        int v137 = v492;
        uint64_t v156 = v490;
        if (v435 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_191;
      }
      unint64_t v437 = (unint64_t)(v478 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      int v137 = v492;
      uint64_t v156 = v490;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_191;
      }
      uint64_t v436 = *((void *)v498 + 2);
      if ((v436 & 4) == 0) {
        goto LABEL_191;
      }
      unint64_t v437 = v436 & 0xFFFFFFFFFFFFFFF8;
      if (!v437) {
        goto LABEL_191;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v437 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    int v137 = v492;
    uint64_t v156 = v490;
  }
LABEL_191:
  unint64_t v175 = v14[5];
  *((void *)v174 + 3) = v175;
  uint64_t v176 = *(void *)(v175 + 32);
  uint64_t v177 = *((unsigned int *)v174 + 10);
  if (v177)
  {
    uint64_t v314 = *((void *)v174 + 4);
    uint64_t v315 = *(void *)(v176 + 40);
    uint64_t v316 = 32 * v177;
    do
    {
      if (!*(unsigned char *)v314)
      {
        uint64_t v317 = *(unsigned int *)(v314 + 4);
        if ((int)v317 >= 0) {
          unint64_t v318 = (uint64_t *)(*(void *)(v315 + 272) + 8 * v317);
        }
        else {
          unint64_t v318 = (uint64_t *)(*(void *)(v315 + 24) + 16 * (v317 & 0x7FFFFFFF) + 8);
        }
        uint64_t v319 = *v318;
        if (*v318)
        {
          uint64_t v320 = *(void *)(v319 + 16);
          *(void *)(v319 + 16) = v314;
          *(void *)(v314 + 16) = v320;
          if (*(unsigned char *)(v314 + 3))
          {
            *(void *)(v314 + 24) = v319;
          }
          else
          {
            *(void *)(v314 + 24) = 0;
            unint64_t v318 = (uint64_t *)(v320 + 24);
          }
        }
        else
        {
          *(void *)(v314 + 16) = v314;
          *(void *)(v314 + 24) = 0;
        }
        *unint64_t v318 = v314;
      }
      v314 += 32;
      v316 -= 32;
    }
    while (v316);
  }
  uint64_t v178 = *(void *)(v176 + 728);
  if (v178) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v178 + 24))(v178, v174);
  }
  unint64_t v179 = *v156 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v174 = v179 | *(void *)v174 & 7;
  *((void *)v174 + 1) = v156;
  *(void *)(v179 + 8) = v174;
  *uint64_t v156 = *v156 & 7 | (unint64_t)v174;
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0x1000000;
  DWORD1(v499) = v172;
  llvm::MachineInstr::addOperand(v174, v173, (const llvm::MachineOperand *)&v499);
  int v180 = *(_DWORD *)(v155 + 36);
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0;
  DWORD1(v499) = v180;
  llvm::MachineInstr::addOperand(v174, v173, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v174, v173, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v174, v173, (const llvm::MachineOperand *)&v499);
  uint64_t v181 = *(void *)(v155 + 208);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v181;
  llvm::MachineInstr::addOperand(v174, v173, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v174, v173, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v174, v173, (const llvm::MachineOperand *)&v499);
  uint64_t v182 = *(void *)(*(void *)(v133 + 264) + 8) + 644640;
  uint64_t v183 = (llvm::MachineFunction *)v14[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  unint64_t v184 = llvm::MachineFunction::CreateMachineInstr(v183, v182, &v498, 0);
  if (v498)
  {
    int v438 = *v498;
    if ((v438 - 4) > 0x1E)
    {
      if ((v438 - 3) >= 0xFFFFFFFE) {
        uint64_t v479 = v498;
      }
      else {
        uint64_t v479 = 0;
      }
      if ((v438 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        int v137 = v492;
        uint64_t v156 = v490;
        if (v438 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_197;
      }
      unint64_t v440 = (unint64_t)(v479 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      int v137 = v492;
      uint64_t v156 = v490;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_197;
      }
      uint64_t v439 = *((void *)v498 + 2);
      if ((v439 & 4) == 0) {
        goto LABEL_197;
      }
      unint64_t v440 = v439 & 0xFFFFFFFFFFFFFFF8;
      if (!v440) {
        goto LABEL_197;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v440 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    int v137 = v492;
    uint64_t v156 = v490;
  }
LABEL_197:
  unint64_t v185 = v14[5];
  *((void *)v184 + 3) = v185;
  uint64_t v186 = *(void *)(v185 + 32);
  uint64_t v187 = *((unsigned int *)v184 + 10);
  if (v187)
  {
    uint64_t v321 = *((void *)v184 + 4);
    uint64_t v322 = *(void *)(v186 + 40);
    uint64_t v323 = 32 * v187;
    do
    {
      if (!*(unsigned char *)v321)
      {
        uint64_t v324 = *(unsigned int *)(v321 + 4);
        if ((int)v324 >= 0) {
          int v325 = (uint64_t *)(*(void *)(v322 + 272) + 8 * v324);
        }
        else {
          int v325 = (uint64_t *)(*(void *)(v322 + 24) + 16 * (v324 & 0x7FFFFFFF) + 8);
        }
        uint64_t v326 = *v325;
        if (*v325)
        {
          uint64_t v327 = *(void *)(v326 + 16);
          *(void *)(v326 + 16) = v321;
          *(void *)(v321 + 16) = v327;
          if (*(unsigned char *)(v321 + 3))
          {
            *(void *)(v321 + 24) = v326;
          }
          else
          {
            *(void *)(v321 + 24) = 0;
            int v325 = (uint64_t *)(v327 + 24);
          }
        }
        else
        {
          *(void *)(v321 + 16) = v321;
          *(void *)(v321 + 24) = 0;
        }
        uint64_t *v325 = v321;
      }
      v321 += 32;
      v323 -= 32;
    }
    while (v323);
  }
  uint64_t v188 = *(void *)(v186 + 728);
  if (v188) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v188 + 24))(v188, v184);
  }
  unint64_t v189 = *v156 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v184 = v189 | *(void *)v184 & 7;
  *((void *)v184 + 1) = v156;
  *(void *)(v189 + 8) = v184;
  *uint64_t v156 = *v156 & 7 | (unint64_t)v184;
  uint64_t v190 = *(void *)(v155 + 208);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v190;
  llvm::MachineInstr::addOperand(v184, v183, (const llvm::MachineOperand *)&v499);
  *(_DWORD *)(v155 + 32) &= ~0x4000000u;
  uint64_t v191 = *(void *)(*(void *)(v133 + 264) + 8) + 35232;
  uint64_t v192 = (llvm::MachineFunction *)v14[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  unint64_t v193 = llvm::MachineFunction::CreateMachineInstr(v192, v191, &v498, 0);
  if (v498)
  {
    int v441 = *v498;
    if ((v441 - 4) > 0x1E)
    {
      if ((v441 - 3) >= 0xFFFFFFFE) {
        v480 = v498;
      }
      else {
        v480 = 0;
      }
      if ((v441 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        int v137 = v492;
        if (v441 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_203;
      }
      unint64_t v443 = (unint64_t)(v480 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      int v137 = v492;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_203;
      }
      uint64_t v442 = *((void *)v498 + 2);
      if ((v442 & 4) == 0) {
        goto LABEL_203;
      }
      unint64_t v443 = v442 & 0xFFFFFFFFFFFFFFF8;
      if (!v443) {
        goto LABEL_203;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v443 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    int v137 = v492;
  }
LABEL_203:
  uint64_t v194 = v14 + 6;
  unint64_t v195 = v14[5];
  *((void *)v193 + 3) = v195;
  uint64_t v196 = *(void *)(v195 + 32);
  uint64_t v197 = *((unsigned int *)v193 + 10);
  if (v197)
  {
    uint64_t v328 = *((void *)v193 + 4);
    uint64_t v329 = *(void *)(v196 + 40);
    uint64_t v330 = 32 * v197;
    do
    {
      if (!*(unsigned char *)v328)
      {
        uint64_t v331 = *(unsigned int *)(v328 + 4);
        if ((int)v331 >= 0) {
          uint64_t v332 = (uint64_t *)(*(void *)(v329 + 272) + 8 * v331);
        }
        else {
          uint64_t v332 = (uint64_t *)(*(void *)(v329 + 24) + 16 * (v331 & 0x7FFFFFFF) + 8);
        }
        uint64_t v333 = *v332;
        if (*v332)
        {
          uint64_t v334 = *(void *)(v333 + 16);
          *(void *)(v333 + 16) = v328;
          *(void *)(v328 + 16) = v334;
          if (*(unsigned char *)(v328 + 3))
          {
            *(void *)(v328 + 24) = v333;
          }
          else
          {
            *(void *)(v328 + 24) = 0;
            uint64_t v332 = (uint64_t *)(v334 + 24);
          }
        }
        else
        {
          *(void *)(v328 + 16) = v328;
          *(void *)(v328 + 24) = 0;
        }
        uint64_t *v332 = v328;
      }
      v328 += 32;
      v330 -= 32;
    }
    while (v330);
  }
  uint64_t v198 = *(void *)(v196 + 728);
  if (v198) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v198 + 24))(v198, v193);
  }
  unint64_t v199 = *v194 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v193 = v199 | *(void *)v193 & 7;
  *((void *)v193 + 1) = v194;
  *(void *)(v199 + 8) = v193;
  unint64_t *v194 = *v194 & 7 | (unint64_t)v193;
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0x1000000;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v193, v192, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v193, v192, (const llvm::MachineOperand *)&v499);
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v193, v192, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v193, v192, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v193, v192, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 2;
  llvm::MachineInstr::addOperand(v193, v192, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v193, v192, (const llvm::MachineOperand *)&v499);
  uint64_t v200 = *(void *)(*(void *)(v133 + 264) + 8) + 239664;
  unint64_t v201 = (llvm::MachineFunction *)*((void *)v16 + 4);
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  uint64_t v202 = llvm::MachineFunction::CreateMachineInstr(v201, v200, &v498, 0);
  if (v498)
  {
    int v444 = *v498;
    if ((v444 - 4) > 0x1E)
    {
      if ((v444 - 3) >= 0xFFFFFFFE) {
        uint64_t v481 = v498;
      }
      else {
        uint64_t v481 = 0;
      }
      if ((v444 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        int v137 = v492;
        if (v444 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_209;
      }
      unint64_t v446 = (unint64_t)(v481 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      int v137 = v492;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_209;
      }
      uint64_t v445 = *((void *)v498 + 2);
      if ((v445 & 4) == 0) {
        goto LABEL_209;
      }
      unint64_t v446 = v445 & 0xFFFFFFFFFFFFFFF8;
      if (!v446) {
        goto LABEL_209;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v446 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    int v137 = v492;
  }
LABEL_209:
  uint64_t v203 = (void *)((char *)v16 + 48);
  uint64_t v204 = *((void *)v16 + 5);
  *((void *)v202 + 3) = v204;
  uint64_t v205 = *(void *)(v204 + 32);
  uint64_t v206 = *((unsigned int *)v202 + 10);
  if (v206)
  {
    uint64_t v335 = *((void *)v202 + 4);
    uint64_t v336 = *(void *)(v205 + 40);
    uint64_t v337 = 32 * v206;
    do
    {
      if (!*(unsigned char *)v335)
      {
        uint64_t v338 = *(unsigned int *)(v335 + 4);
        if ((int)v338 >= 0) {
          uint64_t v339 = (uint64_t *)(*(void *)(v336 + 272) + 8 * v338);
        }
        else {
          uint64_t v339 = (uint64_t *)(*(void *)(v336 + 24) + 16 * (v338 & 0x7FFFFFFF) + 8);
        }
        uint64_t v340 = *v339;
        if (*v339)
        {
          uint64_t v341 = *(void *)(v340 + 16);
          *(void *)(v340 + 16) = v335;
          *(void *)(v335 + 16) = v341;
          if (*(unsigned char *)(v335 + 3))
          {
            *(void *)(v335 + 24) = v340;
          }
          else
          {
            *(void *)(v335 + 24) = 0;
            uint64_t v339 = (uint64_t *)(v341 + 24);
          }
        }
        else
        {
          *(void *)(v335 + 16) = v335;
          *(void *)(v335 + 24) = 0;
        }
        uint64_t *v339 = v335;
      }
      v335 += 32;
      v337 -= 32;
    }
    while (v337);
  }
  uint64_t v207 = *(void *)(v205 + 728);
  if (v207) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v207 + 24))(v207, v202);
  }
  unint64_t v208 = *((void *)v16 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v202 = v208 | *(void *)v202 & 7;
  *((void *)v202 + 1) = v203;
  *(void *)(v208 + 8) = v202;
  *((void *)v16 + 6) = *((void *)v16 + 6) & 7 | (unint64_t)v202;
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v202, v201, (const llvm::MachineOperand *)&v499);
  long long v500 = 0uLL;
  long long v499 = 0x11400000000uLL;
  llvm::MachineInstr::addOperand(v202, v201, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v202, v201, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v202, v201, (const llvm::MachineOperand *)&v499);
  long long v500 = 0uLL;
  long long v499 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v202, v201, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v202, v201, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v202, v201, (const llvm::MachineOperand *)&v499);
  uint64_t v209 = *(void *)(*(void *)(v133 + 264) + 8) + 139296;
  uint64_t v210 = (llvm::MachineFunction *)*((void *)v16 + 4);
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  unint64_t v211 = llvm::MachineFunction::CreateMachineInstr(v210, v209, &v498, 0);
  if (v498)
  {
    int v447 = *v498;
    if ((v447 - 4) > 0x1E)
    {
      if ((v447 - 3) >= 0xFFFFFFFE) {
        uint64_t v482 = v498;
      }
      else {
        uint64_t v482 = 0;
      }
      if ((v447 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        int v137 = v492;
        if (v447 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_215;
      }
      unint64_t v449 = (unint64_t)(v482 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      int v137 = v492;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_215;
      }
      uint64_t v448 = *((void *)v498 + 2);
      if ((v448 & 4) == 0) {
        goto LABEL_215;
      }
      unint64_t v449 = v448 & 0xFFFFFFFFFFFFFFF8;
      if (!v449) {
        goto LABEL_215;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v449 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    int v137 = v492;
  }
LABEL_215:
  uint64_t v212 = *((void *)v16 + 5);
  *((void *)v211 + 3) = v212;
  uint64_t v213 = *(void *)(v212 + 32);
  uint64_t v214 = *((unsigned int *)v211 + 10);
  if (v214)
  {
    uint64_t v342 = *((void *)v211 + 4);
    uint64_t v343 = *(void *)(v213 + 40);
    uint64_t v344 = 32 * v214;
    do
    {
      if (!*(unsigned char *)v342)
      {
        uint64_t v345 = *(unsigned int *)(v342 + 4);
        if ((int)v345 >= 0) {
          int v346 = (uint64_t *)(*(void *)(v343 + 272) + 8 * v345);
        }
        else {
          int v346 = (uint64_t *)(*(void *)(v343 + 24) + 16 * (v345 & 0x7FFFFFFF) + 8);
        }
        uint64_t v347 = *v346;
        if (*v346)
        {
          uint64_t v348 = *(void *)(v347 + 16);
          *(void *)(v347 + 16) = v342;
          *(void *)(v342 + 16) = v348;
          if (*(unsigned char *)(v342 + 3))
          {
            *(void *)(v342 + 24) = v347;
          }
          else
          {
            *(void *)(v342 + 24) = 0;
            int v346 = (uint64_t *)(v348 + 24);
          }
        }
        else
        {
          *(void *)(v342 + 16) = v342;
          *(void *)(v342 + 24) = 0;
        }
        *int v346 = v342;
      }
      v342 += 32;
      v344 -= 32;
    }
    while (v344);
  }
  uint64_t v215 = *(void *)(v213 + 728);
  if (v215) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v215 + 24))(v215, v211);
  }
  unint64_t v216 = *((void *)v16 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v211 = v216 | *(void *)v211 & 7;
  *((void *)v211 + 1) = v203;
  *(void *)(v216 + 8) = v211;
  *((void *)v16 + 6) = *((void *)v16 + 6) & 7 | (unint64_t)v211;
  int v217 = *(_DWORD *)(v155 + 68);
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0;
  DWORD1(v499) = v217;
  llvm::MachineInstr::addOperand(v211, v210, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v211, v210, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v131;
  llvm::MachineInstr::addOperand(v211, v210, (const llvm::MachineOperand *)&v499);
  uint64_t v218 = *(void *)(v155 + 208);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v218;
  llvm::MachineInstr::addOperand(v211, v210, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v211, v210, (const llvm::MachineOperand *)&v499);
  long long v500 = 0uLL;
  long long v499 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v211, v210, (const llvm::MachineOperand *)&v499);
  uint64_t v219 = *(void *)(*(void *)(v133 + 264) + 8) + 30624;
  uint64_t v220 = (llvm::MachineFunction *)*((void *)v16 + 4);
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  unint64_t v221 = llvm::MachineFunction::CreateMachineInstr(v220, v219, &v498, 0);
  uint64_t v222 = (void *)v493;
  if (v498)
  {
    int v450 = *v498;
    if ((v450 - 4) > 0x1E)
    {
      if ((v450 - 3) >= 0xFFFFFFFE) {
        uint64_t v483 = v498;
      }
      else {
        uint64_t v483 = 0;
      }
      if ((v450 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        uint64_t v222 = (void *)v493;
        int v137 = v492;
        if (v450 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_221;
      }
      unint64_t v452 = (unint64_t)(v483 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      uint64_t v222 = (void *)v493;
      int v137 = v492;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_221;
      }
      uint64_t v451 = *((void *)v498 + 2);
      if ((v451 & 4) == 0) {
        goto LABEL_221;
      }
      unint64_t v452 = v451 & 0xFFFFFFFFFFFFFFF8;
      if (!v452) {
        goto LABEL_221;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v452 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    uint64_t v222 = (void *)v493;
    int v137 = v492;
  }
LABEL_221:
  uint64_t v223 = *((void *)v16 + 5);
  *((void *)v221 + 3) = v223;
  uint64_t v224 = *(void *)(v223 + 32);
  uint64_t v225 = *((unsigned int *)v221 + 10);
  if (v225)
  {
    uint64_t v349 = *((void *)v221 + 4);
    uint64_t v350 = *(void *)(v224 + 40);
    uint64_t v351 = 32 * v225;
    do
    {
      if (!*(unsigned char *)v349)
      {
        uint64_t v352 = *(unsigned int *)(v349 + 4);
        if ((int)v352 >= 0) {
          uint64_t v353 = (uint64_t *)(*(void *)(v350 + 272) + 8 * v352);
        }
        else {
          uint64_t v353 = (uint64_t *)(*(void *)(v350 + 24) + 16 * (v352 & 0x7FFFFFFF) + 8);
        }
        uint64_t v354 = *v353;
        if (*v353)
        {
          uint64_t v355 = *(void *)(v354 + 16);
          *(void *)(v354 + 16) = v349;
          *(void *)(v349 + 16) = v355;
          if (*(unsigned char *)(v349 + 3))
          {
            *(void *)(v349 + 24) = v354;
          }
          else
          {
            *(void *)(v349 + 24) = 0;
            uint64_t v353 = (uint64_t *)(v355 + 24);
          }
        }
        else
        {
          *(void *)(v349 + 16) = v349;
          *(void *)(v349 + 24) = 0;
        }
        *uint64_t v353 = v349;
      }
      v349 += 32;
      v351 -= 32;
    }
    while (v351);
  }
  uint64_t v226 = *(void *)(v224 + 728);
  if (v226) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v226 + 24))(v226, v221);
  }
  unint64_t v227 = *((void *)v16 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v221 = v227 | *(void *)v221 & 7;
  *((void *)v221 + 1) = v203;
  *(void *)(v227 + 8) = v221;
  *((void *)v16 + 6) = *((void *)v16 + 6) & 7 | (unint64_t)v221;
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0x1000000;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v221, v220, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v221, v220, (const llvm::MachineOperand *)&v499);
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v221, v220, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v221, v220, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v221, v220, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 2;
  llvm::MachineInstr::addOperand(v221, v220, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v221, v220, (const llvm::MachineOperand *)&v499);
  uint64_t v228 = *(void *)(*(void *)(v133 + 264) + 8) + 18960;
  unint64_t v229 = (llvm::MachineFunction *)*((void *)v16 + 4);
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  uint64_t v230 = llvm::MachineFunction::CreateMachineInstr(v229, v228, &v498, 0);
  if (v498)
  {
    int v453 = *v498;
    if ((v453 - 4) > 0x1E)
    {
      if ((v453 - 3) >= 0xFFFFFFFE) {
        uint64_t v484 = v498;
      }
      else {
        uint64_t v484 = 0;
      }
      if ((v453 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        uint64_t v222 = (void *)v493;
        int v137 = v492;
        if (v453 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_227;
      }
      unint64_t v455 = (unint64_t)(v484 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      uint64_t v222 = (void *)v493;
      int v137 = v492;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_227;
      }
      uint64_t v454 = *((void *)v498 + 2);
      if ((v454 & 4) == 0) {
        goto LABEL_227;
      }
      unint64_t v455 = v454 & 0xFFFFFFFFFFFFFFF8;
      if (!v455) {
        goto LABEL_227;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v455 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    uint64_t v222 = (void *)v493;
    int v137 = v492;
  }
LABEL_227:
  uint64_t v231 = *((void *)v16 + 5);
  *((void *)v230 + 3) = v231;
  uint64_t v232 = *(void *)(v231 + 32);
  uint64_t v233 = *((unsigned int *)v230 + 10);
  if (v233)
  {
    uint64_t v356 = *((void *)v230 + 4);
    uint64_t v357 = *(void *)(v232 + 40);
    uint64_t v358 = 32 * v233;
    do
    {
      if (!*(unsigned char *)v356)
      {
        uint64_t v359 = *(unsigned int *)(v356 + 4);
        if ((int)v359 >= 0) {
          unint64_t v360 = (uint64_t *)(*(void *)(v357 + 272) + 8 * v359);
        }
        else {
          unint64_t v360 = (uint64_t *)(*(void *)(v357 + 24) + 16 * (v359 & 0x7FFFFFFF) + 8);
        }
        uint64_t v361 = *v360;
        if (*v360)
        {
          uint64_t v362 = *(void *)(v361 + 16);
          *(void *)(v361 + 16) = v356;
          *(void *)(v356 + 16) = v362;
          if (*(unsigned char *)(v356 + 3))
          {
            *(void *)(v356 + 24) = v361;
          }
          else
          {
            *(void *)(v356 + 24) = 0;
            unint64_t v360 = (uint64_t *)(v362 + 24);
          }
        }
        else
        {
          *(void *)(v356 + 16) = v356;
          *(void *)(v356 + 24) = 0;
        }
        *unint64_t v360 = v356;
      }
      v356 += 32;
      v358 -= 32;
    }
    while (v358);
  }
  uint64_t v234 = *(void *)(v232 + 728);
  if (v234) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v234 + 24))(v234, v230);
  }
  unint64_t v235 = *((void *)v16 + 6) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v230 = v235 | *(void *)v230 & 7;
  *((void *)v230 + 1) = v203;
  *(void *)(v235 + 8) = v230;
  *((void *)v16 + 6) = *((void *)v16 + 6) & 7 | (unint64_t)v230;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v16;
  LODWORD(v499) = 4;
  llvm::MachineInstr::addOperand(v230, v229, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v230, v229, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v230, v229, (const llvm::MachineOperand *)&v499);
  uint64_t v236 = (unint64_t *)v222[7];
  uint64_t v237 = *(void *)(*(void *)(v133 + 264) + 8) + 28320;
  uint64_t v238 = (llvm::MachineFunction *)v222[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  int v239 = llvm::MachineFunction::CreateMachineInstr(v238, v237, &v498, 0);
  if (v498)
  {
    int v456 = *v498;
    if ((v456 - 4) > 0x1E)
    {
      if ((v456 - 3) >= 0xFFFFFFFE) {
        uint64_t v485 = v498;
      }
      else {
        uint64_t v485 = 0;
      }
      if ((v456 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        uint64_t v222 = (void *)v493;
        int v137 = v492;
        if (v456 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_233;
      }
      unint64_t v458 = (unint64_t)(v485 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      uint64_t v222 = (void *)v493;
      int v137 = v492;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_233;
      }
      uint64_t v457 = *((void *)v498 + 2);
      if ((v457 & 4) == 0) {
        goto LABEL_233;
      }
      unint64_t v458 = v457 & 0xFFFFFFFFFFFFFFF8;
      if (!v458) {
        goto LABEL_233;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v458 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    uint64_t v222 = (void *)v493;
    int v137 = v492;
  }
LABEL_233:
  uint64_t v240 = v222[5];
  *((void *)v239 + 3) = v240;
  uint64_t v241 = *(void *)(v240 + 32);
  uint64_t v242 = *((unsigned int *)v239 + 10);
  if (v242)
  {
    uint64_t v363 = *((void *)v239 + 4);
    uint64_t v364 = *(void *)(v241 + 40);
    uint64_t v365 = 32 * v242;
    do
    {
      if (!*(unsigned char *)v363)
      {
        uint64_t v366 = *(unsigned int *)(v363 + 4);
        if ((int)v366 >= 0) {
          uint64_t v367 = (uint64_t *)(*(void *)(v364 + 272) + 8 * v366);
        }
        else {
          uint64_t v367 = (uint64_t *)(*(void *)(v364 + 24) + 16 * (v366 & 0x7FFFFFFF) + 8);
        }
        uint64_t v368 = *v367;
        if (*v367)
        {
          uint64_t v369 = *(void *)(v368 + 16);
          *(void *)(v368 + 16) = v363;
          *(void *)(v363 + 16) = v369;
          if (*(unsigned char *)(v363 + 3))
          {
            *(void *)(v363 + 24) = v368;
          }
          else
          {
            *(void *)(v363 + 24) = 0;
            uint64_t v367 = (uint64_t *)(v369 + 24);
          }
        }
        else
        {
          *(void *)(v363 + 16) = v363;
          *(void *)(v363 + 24) = 0;
        }
        *uint64_t v367 = v363;
      }
      v363 += 32;
      v365 -= 32;
    }
    while (v365);
  }
  uint64_t v243 = *(void *)(v241 + 728);
  if (v243) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v243 + 24))(v243, v239);
  }
  unint64_t v244 = *v236 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v239 = v244 | *(void *)v239 & 7;
  *((void *)v239 + 1) = v236;
  *(void *)(v244 + 8) = v239;
  *uint64_t v236 = *v236 & 7 | (unint64_t)v239;
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0x1000000;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v239, v238, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v239, v238, (const llvm::MachineOperand *)&v499);
  *((void *)&v499 + 1) = 0;
  long long v500 = 0uLL;
  LODWORD(v499) = 0;
  DWORD1(v499) = v137;
  llvm::MachineInstr::addOperand(v239, v238, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v239, v238, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 1;
  llvm::MachineInstr::addOperand(v239, v238, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 2;
  llvm::MachineInstr::addOperand(v239, v238, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v239, v238, (const llvm::MachineOperand *)&v499);
  uint64_t v245 = *(void *)(*(void *)(v133 + 264) + 8) + 644640;
  uint64_t v246 = (llvm::MachineFunction *)v222[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  uint64_t v247 = llvm::MachineFunction::CreateMachineInstr(v246, v245, &v498, 0);
  if (v498)
  {
    int v459 = *v498;
    if ((v459 - 4) > 0x1E)
    {
      if ((v459 - 3) >= 0xFFFFFFFE) {
        uint64_t v486 = v498;
      }
      else {
        uint64_t v486 = 0;
      }
      if ((v459 - 3) < 0xFFFFFFFE)
      {
        uint64_t v155 = v495;
        size_t v133 = v496;
        uint64_t v222 = (void *)v493;
        if (v459 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_239;
      }
      unint64_t v461 = (unint64_t)(v486 + 8);
    }
    else
    {
      uint64_t v155 = v495;
      size_t v133 = v496;
      uint64_t v222 = (void *)v493;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_239;
      }
      uint64_t v460 = *((void *)v498 + 2);
      if ((v460 & 4) == 0) {
        goto LABEL_239;
      }
      unint64_t v461 = v460 & 0xFFFFFFFFFFFFFFF8;
      if (!v461) {
        goto LABEL_239;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v461 + 16, &v499);
    uint64_t v155 = v495;
    size_t v133 = v496;
    uint64_t v222 = (void *)v493;
  }
LABEL_239:
  uint64_t v248 = v222[5];
  *((void *)v247 + 3) = v248;
  uint64_t v249 = *(void *)(v248 + 32);
  uint64_t v250 = *((unsigned int *)v247 + 10);
  if (v250)
  {
    uint64_t v370 = *((void *)v247 + 4);
    uint64_t v371 = *(void *)(v249 + 40);
    uint64_t v372 = 32 * v250;
    do
    {
      if (!*(unsigned char *)v370)
      {
        uint64_t v373 = *(unsigned int *)(v370 + 4);
        if ((int)v373 >= 0) {
          uint64_t v374 = (uint64_t *)(*(void *)(v371 + 272) + 8 * v373);
        }
        else {
          uint64_t v374 = (uint64_t *)(*(void *)(v371 + 24) + 16 * (v373 & 0x7FFFFFFF) + 8);
        }
        uint64_t v375 = *v374;
        if (*v374)
        {
          uint64_t v376 = *(void *)(v375 + 16);
          *(void *)(v375 + 16) = v370;
          *(void *)(v370 + 16) = v376;
          if (*(unsigned char *)(v370 + 3))
          {
            *(void *)(v370 + 24) = v375;
          }
          else
          {
            *(void *)(v370 + 24) = 0;
            uint64_t v374 = (uint64_t *)(v376 + 24);
          }
        }
        else
        {
          *(void *)(v370 + 16) = v370;
          *(void *)(v370 + 24) = 0;
        }
        *uint64_t v374 = v370;
      }
      v370 += 32;
      v372 -= 32;
    }
    while (v372);
  }
  uint64_t v251 = *(void *)(v249 + 728);
  if (v251) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v251 + 24))(v251, v247);
  }
  unint64_t v252 = *v236 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v247 = v252 | *(void *)v247 & 7;
  *((void *)v247 + 1) = v236;
  *(void *)(v252 + 8) = v247;
  *uint64_t v236 = *v236 & 7 | (unint64_t)v247;
  uint64_t v253 = *(void *)(v155 + 208);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = v253;
  llvm::MachineInstr::addOperand(v247, v246, (const llvm::MachineOperand *)&v499);
  uint64_t v254 = *(void *)(*(void *)(v133 + 264) + 8) + 583488;
  uint64_t v255 = (llvm::MachineFunction *)v222[4];
  uint64_t v498 = v497;
  if (v497) {
    llvm::MetadataTracking::track((uint64_t)&v498, v497, 2);
  }
  int v256 = llvm::MachineFunction::CreateMachineInstr(v255, v254, &v498, 0);
  if (v498)
  {
    int v462 = *v498;
    if ((v462 - 4) > 0x1E)
    {
      if ((v462 - 3) >= 0xFFFFFFFE) {
        BOOL v487 = v498;
      }
      else {
        BOOL v487 = 0;
      }
      if ((v462 - 3) < 0xFFFFFFFE)
      {
        uint64_t v222 = (void *)v493;
        if (v462 == 3) {
          *((void *)v498 + 1) = 0;
        }
        goto LABEL_245;
      }
      unint64_t v464 = (unint64_t)(v487 + 8);
    }
    else
    {
      uint64_t v222 = (void *)v493;
      if ((v498[1] & 0x7F) != 2 && !*((_DWORD *)v498 + 3)) {
        goto LABEL_245;
      }
      uint64_t v463 = *((void *)v498 + 2);
      if ((v463 & 4) == 0) {
        goto LABEL_245;
      }
      unint64_t v464 = v463 & 0xFFFFFFFFFFFFFFF8;
      if (!v464) {
        goto LABEL_245;
      }
    }
    *(void *)&long long v499 = &v498;
    sub_1CC5FA668(v464 + 16, &v499);
    uint64_t v222 = (void *)v493;
  }
LABEL_245:
  uint64_t v257 = v222[5];
  *((void *)v256 + 3) = v257;
  uint64_t v258 = *(void *)(v257 + 32);
  uint64_t v259 = *((unsigned int *)v256 + 10);
  if (v259)
  {
    uint64_t v377 = *((void *)v256 + 4);
    uint64_t v378 = *(void *)(v258 + 40);
    uint64_t v379 = 32 * v259;
    do
    {
      if (!*(unsigned char *)v377)
      {
        uint64_t v380 = *(unsigned int *)(v377 + 4);
        if ((int)v380 >= 0) {
          uint64_t v381 = (uint64_t *)(*(void *)(v378 + 272) + 8 * v380);
        }
        else {
          uint64_t v381 = (uint64_t *)(*(void *)(v378 + 24) + 16 * (v380 & 0x7FFFFFFF) + 8);
        }
        uint64_t v382 = *v381;
        if (*v381)
        {
          uint64_t v383 = *(void *)(v382 + 16);
          *(void *)(v382 + 16) = v377;
          *(void *)(v377 + 16) = v383;
          if (*(unsigned char *)(v377 + 3))
          {
            *(void *)(v377 + 24) = v382;
          }
          else
          {
            *(void *)(v377 + 24) = 0;
            uint64_t v381 = (uint64_t *)(v383 + 24);
          }
        }
        else
        {
          *(void *)(v377 + 16) = v377;
          *(void *)(v377 + 24) = 0;
        }
        *uint64_t v381 = v377;
      }
      v377 += 32;
      v379 -= 32;
    }
    while (v379);
  }
  uint64_t v260 = *(void *)(v258 + 728);
  if (v260) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v260 + 24))(v260, v256);
  }
  unint64_t v261 = *v236 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v256 = v261 | *(void *)v256 & 7;
  *((void *)v256 + 1) = v236;
  *(void *)(v261 + 8) = v256;
  *uint64_t v236 = *v236 & 7 | (unint64_t)v256;
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v256, v255, (const llvm::MachineOperand *)&v499);
  LODWORD(v499) = 1;
  *((void *)&v499 + 1) = 0;
  *(void *)&long long v500 = 0;
  llvm::MachineInstr::addOperand(v256, v255, (const llvm::MachineOperand *)&v499);
  long long v499 = 0u;
  long long v500 = 0u;
  llvm::MachineInstr::addOperand(v256, v255, (const llvm::MachineOperand *)&v499);
  if (v497)
  {
    int v262 = *v497;
    if ((v262 - 4) > 0x1E)
    {
      if ((v262 - 3) >= 0xFFFFFFFE) {
        unsigned int v263 = v497;
      }
      else {
        unsigned int v263 = 0;
      }
      if ((v262 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v264 = (unint64_t)(v263 + 8);
LABEL_258:
        *(void *)&long long v499 = &v497;
        sub_1CC5FA668(v264 + 16, &v499);
        return;
      }
      if (v262 == 3) {
        *((void *)v497 + 1) = 0;
      }
    }
    else if ((v497[1] & 0x7F) == 2 || *((_DWORD *)v497 + 3))
    {
      uint64_t v413 = *((void *)v497 + 2);
      if ((v413 & 4) != 0)
      {
        unint64_t v264 = v413 & 0xFFFFFFFFFFFFFFF8;
        if (v264) {
          goto LABEL_258;
        }
      }
    }
  }
}

uint64_t sub_1CB859840(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned __int16 **)(result + 16);
  uint64_t v3 = *((void *)v2 + 2);
  if ((v3 & 0x200) != 0 || (v3 & 0x20) != 0)
  {
    __n128 result = sub_1CD3D2308(*v2, 4u);
    *(void *)(*(void *)(v1 + 32) + 32 * result + 16) = 1;
  }
  else
  {
    *(void *)(*(void *)(result + 32) + 48) |= 0x800uLL;
  }
  return result;
}

void *sub_1CB8598A4(void *a1)
{
  *a1 = &unk_1F2643F00;
  uint64_t v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

uint64_t sub_1CB859958(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 40);
  while (1)
  {
    uint64_t v5 = *(void *)(v2 + 24);
    if (*(void *)(v5 + 40) != v4) {
      goto LABEL_14;
    }
    int v6 = *(unsigned __int8 *)(v5 + 16);
    if ((v6 - 73) >= 2 && v6 != 90) {
      break;
    }
    if (sub_1CB859958(a1)) {
      return 1;
    }
LABEL_14:
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
  if (v6 != 84) {
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(v5 - 32);
  if (!v7
    || *(unsigned char *)(v7 + 16)
    || *(void *)(v7 + 24) != *(void *)(v5 + 72)
    || (*(unsigned char *)(v7 + 33) & 0x20) == 0
    || !sub_1CB859A14(*(_DWORD *)(v7 + 36)))
  {
    goto LABEL_14;
  }
  return 1;
}

BOOL sub_1CB859A14(int a1)
{
  return (a1 - 1282) < 0x190 || (a1 - 2824) <= 0xB;
}

uint64_t sub_1CB859A78(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v4 = *(void *)(a2 - 32);
    if (v4)
    {
      if (!*(unsigned char *)(v4 + 16) && *(void *)(v4 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v4 + 33) & 0x20) != 0)
      {
        uint64_t v8 = *(unsigned int *)(v4 + 36);
        uint64_t result = llvm::GetItrKind((llvm *)v8);
        if (!result) {
          return result;
        }
        int v10 = result;
        uint64_t v14 = 0;
        sub_1CB859BA0(v8, (int *)&v14 + 1, (int *)&v14, &v13, &v12);
        if ((v10 - 7) < 3 || (v10 - 1) <= 2)
        {
          if (*(unsigned char *)(*(void *)(a1 + 256) + 281)) {
            return sub_1CD3CA524(v14, SHIDWORD(v14), a4 == 1, a3);
          }
        }
        else
        {
          uint64_t v11 = *(void *)(a1 + 256);
          if (*(unsigned char *)(v11 + 280)) {
            return sub_1CD3CA3C4(v14, SHIDWORD(v14), a4 == 1, a3);
          }
          if (*(unsigned char *)(v11 + 281)) {
            return sub_1CD3CA474(v14, SHIDWORD(v14), a4 == 1, a3);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CB859BA0(uint64_t result, int *a2, int *a3, int *a4, int *a5)
{
  int v5 = 397;
  int v6 = -1;
  int v7 = 1;
  int v8 = 0;
  switch((int)result)
  {
    case 1840:
      goto LABEL_31;
    case 1841:
      goto LABEL_16;
    case 1842:
      goto LABEL_33;
    case 1843:
      goto LABEL_9;
    case 1844:
      goto LABEL_25;
    case 1845:
      goto LABEL_38;
    case 1846:
      goto LABEL_27;
    case 1847:
    case 1848:
    case 1849:
    case 1850:
    case 1851:
    case 1852:
    case 1853:
    case 1854:
    case 1855:
    case 1856:
    case 1857:
    case 1858:
    case 1859:
    case 1860:
    case 1861:
    case 1862:
    case 1863:
    case 1864:
    case 1865:
    case 1866:
    case 1867:
    case 1868:
    case 1869:
    case 1870:
    case 1871:
    case 1872:
    case 1873:
    case 1874:
    case 1875:
    case 1876:
    case 1877:
    case 1878:
    case 1879:
    case 1880:
    case 1881:
    case 1882:
    case 1883:
    case 1884:
    case 1885:
      __break(1u);
      JUMPOUT(0x1CB859DF0);
    case 1886:
    case 1887:
      int v8 = 0;
      goto LABEL_13;
    case 1888:
    case 1889:
      int v8 = 0;
      goto LABEL_12;
    case 1890:
    case 1891:
      int v8 = 0;
      goto LABEL_50;
    case 1892:
    case 1893:
      int v8 = 0;
      goto LABEL_53;
    case 1894:
    case 1895:
      int v6 = 0;
      int v8 = 0;
      break;
    case 1896:
    case 1897:
      int v6 = 0;
LABEL_31:
      int v8 = 0;
      goto LABEL_42;
    case 1898:
    case 1899:
      int v6 = 0;
LABEL_16:
      int v8 = 0;
      goto LABEL_51;
    case 1900:
    case 1901:
      int v6 = 0;
LABEL_33:
      int v8 = 0;
      goto LABEL_54;
    case 1902:
    case 1903:
      int v8 = 0;
      int v6 = 1;
      break;
    case 1904:
    case 1905:
      int v8 = 0;
      int v6 = 1;
      goto LABEL_42;
    case 1906:
    case 1907:
      int v8 = 0;
      goto LABEL_36;
    case 1908:
    case 1909:
      int v8 = 0;
      int v6 = 1;
      goto LABEL_54;
    case 1910:
    case 1911:
      int v8 = 0;
      int v5 = 403;
      goto LABEL_48;
    case 1912:
    case 1913:
      int v8 = 0;
      int v5 = 403;
      goto LABEL_41;
    case 1914:
    case 1915:
      int v8 = 0;
      int v5 = 403;
      goto LABEL_47;
    case 1916:
    case 1917:
      int v8 = 0;
      int v5 = 403;
      goto LABEL_45;
    case 1918:
    case 1919:
      int v5 = 399;
      int v6 = 2;
      int v7 = 3;
      int v8 = 2;
      break;
    case 1920:
    case 1921:
      int v6 = 0;
      int v5 = 399;
      int v8 = 2;
      goto LABEL_51;
    case 1922:
    case 1923:
      int v5 = 399;
      int v8 = 2;
LABEL_36:
      int v6 = 1;
      goto LABEL_51;
    case 1924:
    case 1925:
      int v5 = 405;
      int v8 = 2;
      goto LABEL_47;
    case 1926:
      int v5 = 406;
      int v7 = 3;
      int v6 = 3;
      int v8 = 3;
      break;
    case 1927:
    case 1928:
      int v5 = 398;
      int v6 = 2;
      goto LABEL_57;
    case 1929:
    case 1930:
      int v5 = 398;
      int v8 = 1;
LABEL_12:
      int v7 = 2;
LABEL_13:
      int v6 = 2;
      break;
    case 1931:
    case 1932:
      int v5 = 398;
      int v8 = 1;
LABEL_50:
      int v6 = 2;
      goto LABEL_51;
    case 1933:
    case 1934:
      int v5 = 398;
      int v8 = 1;
LABEL_53:
      int v6 = 2;
      goto LABEL_54;
    case 1935:
    case 1936:
      int v6 = 0;
LABEL_9:
      int v5 = 398;
      goto LABEL_57;
    case 1937:
    case 1938:
      int v6 = 0;
LABEL_25:
      int v5 = 398;
      int v8 = 1;
      goto LABEL_42;
    case 1939:
    case 1940:
      int v6 = 0;
LABEL_38:
      int v5 = 398;
      int v8 = 1;
LABEL_51:
      int v7 = 3;
      break;
    case 1941:
    case 1942:
      int v6 = 0;
LABEL_27:
      int v5 = 398;
      int v8 = 1;
      goto LABEL_54;
    case 1943:
    case 1944:
      int v5 = 398;
      int v6 = 1;
      goto LABEL_57;
    case 1945:
    case 1946:
      int v5 = 398;
      int v6 = 1;
      int v7 = 2;
      goto LABEL_57;
    case 1947:
    case 1948:
      int v5 = 398;
      int v6 = 1;
      int v7 = 3;
      goto LABEL_57;
    case 1949:
    case 1950:
      int v5 = 398;
      int v6 = 1;
      int v7 = 4;
      goto LABEL_57;
    case 1951:
    case 1952:
      int v5 = 404;
      int v6 = 3;
LABEL_57:
      int v8 = 1;
      break;
    case 1953:
    case 1954:
      int v5 = 404;
      int v8 = 1;
LABEL_41:
      int v6 = 3;
LABEL_42:
      int v7 = 2;
      break;
    case 1955:
    case 1956:
      int v5 = 404;
      int v8 = 1;
LABEL_47:
      int v7 = 3;
LABEL_48:
      int v6 = 3;
      break;
    case 1957:
    case 1958:
      int v5 = 404;
      int v8 = 1;
LABEL_45:
      int v6 = 3;
LABEL_54:
      int v7 = 4;
      break;
    default:
      break;
  }
  *a2 = v7;
  *a3 = v6;
  *a4 = v8;
  *a5 = v5;
  return result;
}

uint64_t sub_1CB859FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v63[6] = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 232) + 4);
  unsigned int v60 = v9;
  if (v9 > 0x40) {
    operator new[]();
  }
  BOOL v59 = 0;
  while (1)
  {
    unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
    if (v10 != 62) {
      break;
    }
LABEL_7:
    int v12 = *(_DWORD *)(a2 + 20);
    if ((v12 & 0x40000000) != 0) {
      int v13 = *(uint64_t ***)(a2 - 8);
    }
    else {
      int v13 = (uint64_t **)(a2 - 32 * (v12 & 0x7FFFFFF));
    }
    uint64_t v14 = **v13;
    unsigned int v15 = *(_DWORD *)(v14 + 8);
    if ((v15 & 0xFE) == 0x12) {
      unsigned int v15 = *(_DWORD *)(**(void **)(v14 + 16) + 8);
    }
    uint64_t v16 = *(void *)(a1 + 88);
    if (v15 < 0x100) {
      goto LABEL_24;
    }
    unsigned int v17 = v15 >> 8;
    uint64_t v18 = *(unsigned int *)(v16 + 240);
    uint64_t v19 = *(void *)(v16 + 232);
    if (v18)
    {
      uint64_t v19 = *(void *)(v16 + 232);
      unint64_t v20 = *(unsigned int *)(v16 + 240);
      do
      {
        unint64_t v21 = v20 >> 1;
        uint64_t v22 = v19 + 16 * (v20 >> 1);
        unsigned int v23 = *(_DWORD *)(v22 + 8);
        uint64_t v24 = v22 + 16;
        v20 += ~(v20 >> 1);
        if (v23 < v17) {
          uint64_t v19 = v24;
        }
        else {
          unint64_t v20 = v21;
        }
      }
      while (v20);
    }
    if (v19 == *(void *)(v16 + 232) + 16 * v18 || *(_DWORD *)(v19 + 8) != v17) {
LABEL_24:
    }
      uint64_t v19 = *(void *)(v16 + 232);
    unsigned int v25 = *(_DWORD *)(v19 + 4);
    if (v25 != v9)
    {
      if (v25 >= 0x41) {
        operator new[]();
      }
      if (v60 >= 0x41 && v59) {
        MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
      }
      BOOL v59 = 0;
      unsigned int v60 = v25;
      uint64_t v16 = *(void *)(a1 + 88);
      unsigned int v9 = v25;
      int v12 = *(_DWORD *)(a2 + 20);
    }
    if ((v12 & 0x40000000) != 0)
    {
      uint64_t v27 = *(void *)(a2 - 8);
      uint64_t v26 = v12 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v26 = v12 & 0x7FFFFFF;
      uint64_t v27 = a2 - 32 * v26;
    }
    int v61 = v63;
    uint64_t v62 = 0x600000000;
    unint64_t v28 = 32 * v26 - 32;
    if (v28 >= 0xC1) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v29 = (llvm::Constant **)v63;
    if (v26 != 1)
    {
      unsigned int v30 = (uint64_t *)(v27 + 32);
      int v31 = v63;
      uint64_t v32 = 32 * v26 - 32;
      do
      {
        uint64_t v33 = *v30;
        v30 += 4;
        *v31++ = v33;
        v32 -= 32;
      }
      while (v32);
      uint64_t v29 = (llvm::Constant **)v61;
    }
    LODWORD(v62) = v28 >> 5;
    BOOL v34 = *(unsigned char *)(a2 + 16) != 62 || a2 == 0;
    uint64_t v35 = 64;
    if (v34) {
      uint64_t v35 = 24;
    }
    int v36 = llvm::GEPOperator::accumulateConstantOffset(*(void *)(a2 + v35), v29, (v28 >> 5), (llvm::DataLayout *)v16, (llvm::APInt *)&v59, 0, a7);
    if (v61 == v63)
    {
      if (!v36) {
        goto LABEL_76;
      }
    }
    else
    {
      free(v61);
      if (!v36) {
        goto LABEL_76;
      }
    }
LABEL_45:
    int v37 = *(_DWORD *)(a2 + 20);
    if ((v37 & 0x40000000) != 0) {
      unsigned int v38 = *(uint64_t **)(a2 - 8);
    }
    else {
      unsigned int v38 = (uint64_t *)(a2 - 32 * (v37 & 0x7FFFFFF));
    }
    a2 = *v38;
  }
  if (v10 == 5)
  {
    unsigned int v11 = *(unsigned __int16 *)(a2 + 18);
    if (v11 - 47 < 3) {
      goto LABEL_45;
    }
    if (v11 != 34) {
      goto LABEL_54;
    }
    goto LABEL_7;
  }
  if (v10 < 0x1C) {
    goto LABEL_57;
  }
  if (v10 - 75 <= 2) {
    goto LABEL_45;
  }
  unsigned int v11 = v10 - 28;
LABEL_54:
  if (v11 == 13)
  {
    int v39 = *(_DWORD *)(a2 + 20);
    if ((v39 & 0x40000000) != 0) {
      uint64_t v40 = *(void **)(a2 - 8);
    }
    else {
      uint64_t v40 = (void *)(a2 - 32 * (v39 & 0x7FFFFFF));
    }
    int v51 = sub_1CB859FD0(a1, *v40, a3);
    if (v51 != -1)
    {
      int v52 = v51;
      int v53 = *(_DWORD *)(a2 + 20);
      uint64_t v54 = (v53 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v53 & 0x7FFFFFF);
      int v55 = sub_1CB859FD0(a1, *(void *)(v54 + 32), a3);
      if (v55 != -1)
      {
        unsigned int v56 = &v59;
        if (v60 >= 0x41) {
          unsigned int v56 = v59;
        }
        uint64_t v44 = (v55 + v52 + *v56);
        goto LABEL_77;
      }
    }
LABEL_76:
    uint64_t v44 = 0xFFFFFFFFLL;
    goto LABEL_77;
  }
LABEL_57:
  if (v10 <= 3)
  {
    int v45 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 400))(a3, a2);
    uint64_t v47 = v46;
    uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 336))(a3);
    int v49 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v48 + 24))(v48, v47);
    uint64_t v50 = &v59;
    if (v60 >= 0x41) {
      uint64_t v50 = v59;
    }
    uint64_t v44 = (*v50 + v49 * v45);
  }
  else
  {
    if (v10 != 16) {
      goto LABEL_76;
    }
    unsigned int v41 = (void *)(a2 + 24);
    if (*(_DWORD *)(a2 + 32) >= 0x41u) {
      unsigned int v41 = (void *)*v41;
    }
    int v42 = *(_DWORD *)v41;
    int v43 = &v59;
    if (v60 >= 0x41) {
      int v43 = v59;
    }
    uint64_t v44 = (*v43 + v42);
  }
LABEL_77:
  if (v60 >= 0x41 && v59) {
    MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
  }
  return v44;
}

BOOL sub_1CB85A548(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v44[6] = *MEMORY[0x1E4F143B8];
  unsigned int v41 = *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 232) + 4);
  if (v41 > 0x40) {
    operator new[]();
  }
  uint64_t v40 = 0;
  while (1)
  {
    unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
    if (v10 != 62) {
      break;
    }
LABEL_7:
    int v12 = *(_DWORD *)(a2 + 20);
    if ((v12 & 0x40000000) != 0)
    {
      uint64_t v14 = *(void *)(a2 - 8);
      uint64_t v13 = v12 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v13 = v12 & 0x7FFFFFF;
      uint64_t v14 = a2 - 32 * v13;
    }
    unsigned int v15 = *(llvm::DataLayout **)(a1 + 88);
    int v42 = v44;
    uint64_t v43 = 0x600000000;
    unint64_t v16 = 32 * v13 - 32;
    if (v16 >= 0xC1) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v17 = (llvm::Constant **)v44;
    if (v13 != 1)
    {
      uint64_t v18 = (uint64_t *)(v14 + 32);
      uint64_t v19 = v44;
      uint64_t v20 = 32 * v13 - 32;
      do
      {
        uint64_t v21 = *v18;
        v18 += 4;
        *v19++ = v21;
        v20 -= 32;
      }
      while (v20);
      unsigned int v17 = (llvm::Constant **)v42;
    }
    LODWORD(v43) = v16 >> 5;
    if (*(unsigned char *)(a2 + 16) != 62 || a2 == 0) {
      uint64_t v23 = 24;
    }
    else {
      uint64_t v23 = 64;
    }
    int v24 = llvm::GEPOperator::accumulateConstantOffset(*(void *)(a2 + v23), v17, (v16 >> 5), v15, (llvm::APInt *)&v40, 0, a7);
    if (v42 == v44)
    {
      if (!v24) {
        goto LABEL_57;
      }
    }
    else
    {
      free(v42);
      if (!v24) {
        goto LABEL_57;
      }
    }
LABEL_25:
    int v25 = *(_DWORD *)(a2 + 20);
    if ((v25 & 0x40000000) != 0) {
      uint64_t v26 = *(uint64_t **)(a2 - 8);
    }
    else {
      uint64_t v26 = (uint64_t *)(a2 - 32 * (v25 & 0x7FFFFFF));
    }
    a2 = *v26;
  }
  if (v10 == 5)
  {
    unsigned int v11 = *(unsigned __int16 *)(a2 + 18);
    if (v11 - 47 < 3) {
      goto LABEL_25;
    }
    if (v11 != 34) {
      goto LABEL_34;
    }
    goto LABEL_7;
  }
  if (v10 < 0x1C) {
    goto LABEL_37;
  }
  if (v10 - 75 <= 2) {
    goto LABEL_25;
  }
  unsigned int v11 = v10 - 28;
LABEL_34:
  if (v11 == 13)
  {
    LODWORD(v42) = 0;
    int v39 = 0;
    int v27 = *(_DWORD *)(a2 + 20);
    if ((v27 & 0x40000000) != 0) {
      unint64_t v28 = *(void **)(a2 - 8);
    }
    else {
      unint64_t v28 = (void *)(a2 - 32 * (v27 & 0x7FFFFFF));
    }
    if (sub_1CB85A548(a1, *v28, a3, &v42))
    {
      int v34 = *(_DWORD *)(a2 + 20);
      uint64_t v35 = (v34 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v34 & 0x7FFFFFF);
      if (sub_1CB85A548(a1, *(void *)(v35 + 32), a3, &v39))
      {
        int v36 = &v40;
        if (v41 >= 0x41) {
          int v36 = v40;
        }
        *a4 = v39 + v42 + *v36;
LABEL_56:
        BOOL v30 = 1;
        goto LABEL_58;
      }
    }
    goto LABEL_57;
  }
LABEL_37:
  if (v10 == 16)
  {
    int v31 = (void *)(a2 + 24);
    if (*(_DWORD *)(a2 + 32) >= 0x41u) {
      int v31 = (void *)*v31;
    }
    int v32 = *(_DWORD *)v31;
    uint64_t v33 = &v40;
    if (v41 >= 0x41) {
      uint64_t v33 = v40;
    }
    *a4 = *v33 + v32;
    goto LABEL_56;
  }
  if (v10 == 59)
  {
    uint64_t v29 = &v40;
    if (v41 >= 0x41) {
      uint64_t v29 = v40;
    }
    *a4 = *v29;
    BOOL v30 = sub_1CB85A908(a1, a2, a3);
  }
  else
  {
LABEL_57:
    BOOL v30 = 0;
  }
LABEL_58:
  if (v41 >= 0x41 && v40) {
    MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
  }
  return v30;
}

BOOL sub_1CB85A908(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v9 = a2;
  uint64_t v10 = 0;
  if (sub_1CB87DF68(v5 + 176, &v9, &v10)) {
    uint64_t v6 = v10;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 176) + 16 * *(unsigned int *)(v5 + 192);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 176) + 16 * *(unsigned int *)(*(void *)(a1 + 32) + 192);
  if (v6 != v7) {
    *a3 = *(_DWORD *)(v6 + 8);
  }
  return v6 != v7;
}

uint64_t sub_1CB85A994(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 && (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    int v8 = 0;
    uint64_t result = sub_1CB85A994(a1, *(void *)(a2 + 24), &v8);
    if (result) {
      *a3 = *(_DWORD *)(a2 + 32) * v8;
    }
  }
  else
  {
    int v6 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a2 + 8))
    {
      if (v6 == 15)
      {
        int v7 = 64;
      }
      else if (v6 == 2)
      {
        int v7 = 32;
      }
      else
      {
        if (*(_DWORD *)(a2 + 8) != 13) {
          return 0;
        }
        int v7 = *(_DWORD *)(a2 + 8) >> 8;
      }
    }
    else
    {
      int v7 = 16;
    }
    *a3 = v7;
    return 1;
  }
  return result;
}

llvm::MachineFunction *sub_1CB85AA4C(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4, int a5)
{
  uint64_t v9 = *(llvm::MachineFunction **)(a1 + 32);
  uint64_t v10 = *a3;
  int v25 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v25, v10, 2);
  }
  unsigned int v11 = llvm::MachineFunction::CreateMachineInstr(v9, a4, &v25, 0);
  if (v25) {
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  }
  uint64_t v12 = *(void *)(a1 + 40);
  *((void *)v11 + 3) = v12;
  uint64_t v13 = *(void *)(v12 + 32);
  uint64_t v14 = *((unsigned int *)v11 + 10);
  if (v14)
  {
    uint64_t v18 = *((void *)v11 + 4);
    uint64_t v19 = *(void *)(v13 + 40);
    uint64_t v20 = 32 * v14;
    do
    {
      if (!*(unsigned char *)v18)
      {
        uint64_t v21 = *(unsigned int *)(v18 + 4);
        if ((int)v21 >= 0) {
          uint64_t v22 = (uint64_t *)(*(void *)(v19 + 272) + 8 * v21);
        }
        else {
          uint64_t v22 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
        }
        uint64_t v23 = *v22;
        if (*v22)
        {
          uint64_t v24 = *(void *)(v23 + 16);
          *(void *)(v23 + 16) = v18;
          *(void *)(v18 + 16) = v24;
          if (*(unsigned char *)(v18 + 3))
          {
            *(void *)(v18 + 24) = v23;
          }
          else
          {
            *(void *)(v18 + 24) = 0;
            uint64_t v22 = (uint64_t *)(v24 + 24);
          }
        }
        else
        {
          *(void *)(v18 + 16) = v18;
          *(void *)(v18 + 24) = 0;
        }
        *uint64_t v22 = v18;
      }
      v18 += 32;
      v20 -= 32;
    }
    while (v20);
  }
  uint64_t v15 = *(void *)(v13 + 728);
  if (v15) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v15 + 24))(v15, v11);
  }
  unint64_t v16 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unsigned int v11 = v16 | *(void *)v11 & 7;
  *((void *)v11 + 1) = a2;
  *(void *)(v16 + 8) = v11;
  *a2 = *a2 & 7 | (unint64_t)v11;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  v26[0] = 0x1000000;
  v26[1] = a5;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)v26);
  return v9;
}

uint64_t sub_1CB85ABF4(uint64_t *a1, uint64_t a2)
{
  v395[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  int v5 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if (*(void *)a2) {
    BOOL v6 = v5 == 18;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    if ((v5 & 0xFE) == 0x12) {
      uint64_t v4 = **(void **)(v4 + 16);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
    if (PrimitiveSizeInBits != 32)
    {
      if (PrimitiveSizeInBits == 64)
      {
        LODWORD(v394) = 1;
        uint64_t v393 = 0;
        if (sub_1CB85D874(a2, &v393))
        {
          if (v394 >= 0x41) {
            int v8 = (unint64_t *)v393;
          }
          else {
            int v8 = (unint64_t *)&v393;
          }
          unint64_t v9 = *v8;
          if (*(unsigned char *)(a1[32] + 280))
          {
            uint64_t v10 = sub_1CB87DFFC(a1, (unsigned __int8 *)a2);
            if (v10)
            {
              uint64_t IncompleteVirtualRegister = v10;
              int v12 = v10 + 1;
              int v13 = v10;
              goto LABEL_92;
            }
            goto LABEL_407;
          }
          uint64_t v69 = a1[6];
          uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v69, "", 0);
          *(void *)(*(void *)(v69 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4990;
          uint64_t v70 = *(void *)(v69 + 8);
          if (v70)
          {
            (*(void (**)(uint64_t))(*(void *)v70 + 24))(v70);
            if (IncompleteVirtualRegister)
            {
LABEL_86:
              uint64_t v71 = a1[6];
              int v13 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v71, "", 0);
              *(void *)(*(void *)(v71 + 24) + 16 * (v13 & 0x7FFFFFFF)) = &off_1E66A4340;
              uint64_t v72 = *(void *)(v71 + 8);
              if (v72) {
                (*(void (**)(uint64_t))(*(void *)v72 + 24))(v72);
              }
              uint64_t v73 = a1[6];
              int v12 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v73, "", 0);
              *(void *)(*(void *)(v73 + 24) + 16 * (v12 & 0x7FFFFFFF)) = &off_1E66A4340;
              uint64_t v74 = *(void *)(v73 + 8);
              if (v74) {
                (*(void (**)(uint64_t))(*(void *)v74 + 24))(v74);
              }
              uint64_t v27 = 0;
              if (!v13 || !v12) {
                goto LABEL_408;
              }
LABEL_92:
              uint64_t v75 = a1[4];
              uint64_t v76 = *(void *)(v75 + 640);
              unint64_t v77 = *(unint64_t **)(v75 + 648);
              uint64_t v78 = *(void *)(a1[12] + 8) + 69360;
              uint64_t v79 = *(llvm::MachineFunction **)(v76 + 32);
              unint64_t v80 = (unsigned __int8 *)a1[9];
              uint64_t v390 = v80;
              if (v80) {
                llvm::MetadataTracking::track((uint64_t)&v390, v80, 2);
              }
              unint64_t v81 = llvm::MachineFunction::CreateMachineInstr(v79, v78, &v390, 0);
              if (!v390)
              {
LABEL_95:
                uint64_t v82 = *(void *)(v76 + 40);
                *((void *)v81 + 3) = v82;
                uint64_t v83 = *(void *)(v82 + 32);
                uint64_t v84 = *((unsigned int *)v81 + 10);
                if (v84)
                {
                  uint64_t v273 = *((void *)v81 + 4);
                  uint64_t v274 = *(void *)(v83 + 40);
                  uint64_t v275 = 32 * v84;
                  do
                  {
                    if (!*(unsigned char *)v273)
                    {
                      uint64_t v276 = *(unsigned int *)(v273 + 4);
                      if ((int)v276 >= 0) {
                        uint64_t v277 = (uint64_t *)(*(void *)(v274 + 272) + 8 * v276);
                      }
                      else {
                        uint64_t v277 = (uint64_t *)(*(void *)(v274 + 24) + 16 * (v276 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v278 = *v277;
                      if (*v277)
                      {
                        uint64_t v279 = *(void *)(v278 + 16);
                        *(void *)(v278 + 16) = v273;
                        *(void *)(v273 + 16) = v279;
                        if (*(unsigned char *)(v273 + 3))
                        {
                          *(void *)(v273 + 24) = v278;
                        }
                        else
                        {
                          *(void *)(v273 + 24) = 0;
                          uint64_t v277 = (uint64_t *)(v279 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v273 + 16) = v273;
                        *(void *)(v273 + 24) = 0;
                      }
                      *uint64_t v277 = v273;
                    }
                    v273 += 32;
                    v275 -= 32;
                  }
                  while (v275);
                }
                uint64_t v85 = *(void *)(v83 + 728);
                if (v85) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v85 + 24))(v85, v81);
                }
                unint64_t v86 = *v77 & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v81 = v86 | *(void *)v81 & 7;
                *((void *)v81 + 1) = v77;
                *(void *)(v86 + 8) = v81;
                unint64_t *v77 = *v77 & 7 | (unint64_t)v81;
                *((void *)&v391 + 1) = 0;
                long long v392 = 0uLL;
                LODWORD(v391) = 0x1000000;
                DWORD1(v391) = v12;
                llvm::MachineInstr::addOperand(v81, v79, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = 0;
                llvm::MachineInstr::addOperand(v81, v79, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = HIDWORD(v9);
                llvm::MachineInstr::addOperand(v81, v79, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = HIDWORD(v9);
                llvm::MachineInstr::addOperand(v81, v79, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = HIDWORD(v9);
                llvm::MachineInstr::addOperand(v81, v79, (const llvm::MachineOperand *)&v391);
                long long v391 = 0u;
                long long v392 = 0u;
                llvm::MachineInstr::addOperand(v81, v79, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = 0;
                llvm::MachineInstr::addOperand(v81, v79, (const llvm::MachineOperand *)&v391);
                long long v391 = 0u;
                long long v392 = 0u;
                llvm::MachineInstr::addOperand(v81, v79, (const llvm::MachineOperand *)&v391);
                uint64_t v87 = a1[4];
                uint64_t v88 = *(void *)(v87 + 640);
                uint64_t v89 = *(unint64_t **)(v87 + 648);
                uint64_t v90 = *(void *)(a1[12] + 8) + 69360;
                unint64_t v91 = *(llvm::MachineFunction **)(v88 + 32);
                size_t v92 = (unsigned __int8 *)a1[9];
                uint64_t v390 = v92;
                if (v92) {
                  llvm::MetadataTracking::track((uint64_t)&v390, v92, 2);
                }
                uint64_t v93 = llvm::MachineFunction::CreateMachineInstr(v91, v90, &v390, 0);
                if (!v390) {
                  goto LABEL_101;
                }
                int v349 = *v390;
                if ((v349 - 4) > 0x1E)
                {
                  if ((v349 - 3) >= 0xFFFFFFFE) {
                    uint64_t v363 = v390;
                  }
                  else {
                    uint64_t v363 = 0;
                  }
                  if ((v349 - 3) < 0xFFFFFFFE)
                  {
                    if (v349 == 3) {
                      *((void *)v390 + 1) = 0;
                    }
                    goto LABEL_101;
                  }
                  unint64_t v351 = (unint64_t)(v363 + 8);
                }
                else
                {
                  if ((v390[1] & 0x7F) != 2 && !*((_DWORD *)v390 + 3)) {
                    goto LABEL_101;
                  }
                  uint64_t v350 = *((void *)v390 + 2);
                  if ((v350 & 4) == 0) {
                    goto LABEL_101;
                  }
                  unint64_t v351 = v350 & 0xFFFFFFFFFFFFFFF8;
                  if (!v351) {
                    goto LABEL_101;
                  }
                }
                *(void *)&long long v391 = &v390;
                sub_1CC5FA668(v351 + 16, &v391);
LABEL_101:
                uint64_t v94 = *(void *)(v88 + 40);
                *((void *)v93 + 3) = v94;
                uint64_t v95 = *(void *)(v94 + 32);
                uint64_t v96 = *((unsigned int *)v93 + 10);
                if (v96)
                {
                  uint64_t v280 = *((void *)v93 + 4);
                  uint64_t v281 = *(void *)(v95 + 40);
                  uint64_t v282 = 32 * v96;
                  do
                  {
                    if (!*(unsigned char *)v280)
                    {
                      uint64_t v283 = *(unsigned int *)(v280 + 4);
                      if ((int)v283 >= 0) {
                        uint64_t v284 = (uint64_t *)(*(void *)(v281 + 272) + 8 * v283);
                      }
                      else {
                        uint64_t v284 = (uint64_t *)(*(void *)(v281 + 24) + 16 * (v283 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v285 = *v284;
                      if (*v284)
                      {
                        uint64_t v286 = *(void *)(v285 + 16);
                        *(void *)(v285 + 16) = v280;
                        *(void *)(v280 + 16) = v286;
                        if (*(unsigned char *)(v280 + 3))
                        {
                          *(void *)(v280 + 24) = v285;
                        }
                        else
                        {
                          *(void *)(v280 + 24) = 0;
                          uint64_t v284 = (uint64_t *)(v286 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v280 + 16) = v280;
                        *(void *)(v280 + 24) = 0;
                      }
                      uint64_t *v284 = v280;
                    }
                    v280 += 32;
                    v282 -= 32;
                  }
                  while (v282);
                }
                uint64_t v97 = *(void *)(v95 + 728);
                if (v97) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v97 + 24))(v97, v93);
                }
                unint64_t v98 = *v89 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v93 = v98 | *(void *)v93 & 7;
                *((void *)v93 + 1) = v89;
                *(void *)(v98 + 8) = v93;
                *uint64_t v89 = *v89 & 7 | (unint64_t)v93;
                *((void *)&v391 + 1) = 0;
                long long v392 = 0uLL;
                LODWORD(v391) = 0x1000000;
                DWORD1(v391) = v13;
                llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = 0;
                llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = v9;
                llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = v9;
                llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = v9;
                llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v391);
                long long v391 = 0u;
                long long v392 = 0u;
                llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v391);
                LODWORD(v391) = 1;
                *((void *)&v391 + 1) = 0;
                *(void *)&long long v392 = 0;
                llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v391);
                long long v391 = 0u;
                long long v392 = 0u;
                llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v391);
                if (v13 != IncompleteVirtualRegister) {
                  sub_1CB85D99C(a1, IncompleteVirtualRegister, v13, 0x40u);
                }
                uint64_t v27 = IncompleteVirtualRegister;
                goto LABEL_408;
              }
              int v346 = *v390;
              if ((v346 - 4) > 0x1E)
              {
                if ((v346 - 3) >= 0xFFFFFFFE) {
                  uint64_t v362 = v390;
                }
                else {
                  uint64_t v362 = 0;
                }
                if ((v346 - 3) < 0xFFFFFFFE)
                {
                  if (v346 == 3) {
                    *((void *)v390 + 1) = 0;
                  }
                  goto LABEL_95;
                }
                unint64_t v348 = (unint64_t)(v362 + 8);
              }
              else
              {
                if ((v390[1] & 0x7F) != 2 && !*((_DWORD *)v390 + 3)) {
                  goto LABEL_95;
                }
                uint64_t v347 = *((void *)v390 + 2);
                if ((v347 & 4) == 0) {
                  goto LABEL_95;
                }
                unint64_t v348 = v347 & 0xFFFFFFFFFFFFFFF8;
                if (!v348) {
                  goto LABEL_95;
                }
              }
              *(void *)&long long v391 = &v390;
              sub_1CC5FA668(v348 + 16, &v391);
              goto LABEL_95;
            }
          }
          else if (IncompleteVirtualRegister)
          {
            goto LABEL_86;
          }
        }
LABEL_407:
        uint64_t v27 = 0;
        goto LABEL_408;
      }
      if (PrimitiveSizeInBits <= 0x10)
      {
        LODWORD(v394) = 1;
        uint64_t v393 = 0;
        if (!sub_1CB85D874(a2, &v393)) {
          goto LABEL_407;
        }
        if (v394 >= 0x41) {
          unsigned int v41 = (uint64_t *)v393;
        }
        else {
          unsigned int v41 = (uint64_t *)&v393;
        }
        uint64_t v42 = *v41;
        uint64_t v43 = a1[6];
        uint64_t v27 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v43, (unsigned __int8 *)&unk_1CFC22BC5, 0);
        *(void *)(*(void *)(v43 + 24) + 16 * (v27 & 0x7FFFFFFF)) = &off_1E66A4180;
        uint64_t v44 = *(void *)(v43 + 8);
        if (v44) {
          (*(void (**)(uint64_t))(*(void *)v44 + 24))(v44);
        }
        uint64_t v45 = a1[4];
        uint64_t v46 = *(void *)(v45 + 640);
        uint64_t v47 = *(unint64_t **)(v45 + 648);
        uint64_t v48 = *(void *)(a1[12] + 8) + 48720;
        uint64_t v33 = *(llvm::MachineFunction **)(v46 + 32);
        int v49 = (unsigned __int8 *)a1[9];
        uint64_t v390 = v49;
        if (v49) {
          llvm::MetadataTracking::track((uint64_t)&v390, v49, 2);
        }
        uint64_t v35 = llvm::MachineFunction::CreateMachineInstr(v33, v48, &v390, 0);
        if (!v390) {
          goto LABEL_59;
        }
        int v352 = *v390;
        if ((v352 - 4) > 0x1E)
        {
          if ((v352 - 3) >= 0xFFFFFFFE) {
            uint64_t v364 = v390;
          }
          else {
            uint64_t v364 = 0;
          }
          if ((v352 - 3) < 0xFFFFFFFE)
          {
            if (v352 == 3) {
              *((void *)v390 + 1) = 0;
            }
            goto LABEL_59;
          }
          unint64_t v354 = (unint64_t)(v364 + 8);
        }
        else
        {
          if ((v390[1] & 0x7F) != 2 && !*((_DWORD *)v390 + 3)) {
            goto LABEL_59;
          }
          uint64_t v353 = *((void *)v390 + 2);
          if ((v353 & 4) == 0) {
            goto LABEL_59;
          }
          unint64_t v354 = v353 & 0xFFFFFFFFFFFFFFF8;
          if (!v354) {
            goto LABEL_59;
          }
        }
        *(void *)&long long v391 = &v390;
        sub_1CC5FA668(v354 + 16, &v391);
LABEL_59:
        uint64_t v50 = *(void *)(v46 + 40);
        *((void *)v35 + 3) = v50;
        uint64_t v51 = *(void *)(v50 + 32);
        uint64_t v52 = *((unsigned int *)v35 + 10);
        if (v52)
        {
          uint64_t v287 = *((void *)v35 + 4);
          uint64_t v288 = *(void *)(v51 + 40);
          uint64_t v289 = 32 * v52;
          do
          {
            if (!*(unsigned char *)v287)
            {
              uint64_t v290 = *(unsigned int *)(v287 + 4);
              if ((int)v290 >= 0) {
                uint64_t v291 = (uint64_t *)(*(void *)(v288 + 272) + 8 * v290);
              }
              else {
                uint64_t v291 = (uint64_t *)(*(void *)(v288 + 24) + 16 * (v290 & 0x7FFFFFFF) + 8);
              }
              uint64_t v292 = *v291;
              if (*v291)
              {
                uint64_t v293 = *(void *)(v292 + 16);
                *(void *)(v292 + 16) = v287;
                *(void *)(v287 + 16) = v293;
                if (*(unsigned char *)(v287 + 3))
                {
                  *(void *)(v287 + 24) = v292;
                }
                else
                {
                  *(void *)(v287 + 24) = 0;
                  uint64_t v291 = (uint64_t *)(v293 + 24);
                }
              }
              else
              {
                *(void *)(v287 + 16) = v287;
                *(void *)(v287 + 24) = 0;
              }
              uint64_t *v291 = v287;
            }
            v287 += 32;
            v289 -= 32;
          }
          while (v289);
        }
        uint64_t v53 = *(void *)(v51 + 728);
        if (v53) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v53 + 24))(v53, v35);
        }
        unint64_t v54 = *v47 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v35 = v54 | *(void *)v35 & 7;
        *((void *)v35 + 1) = v47;
        *(void *)(v54 + 8) = v35;
        *uint64_t v47 = *v47 & 7 | (unint64_t)v35;
        *((void *)&v391 + 1) = 0;
        long long v392 = 0uLL;
        LODWORD(v391) = 0x1000000;
        DWORD1(v391) = v27;
        llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 0;
        llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = v42 | 0x100000000;
        llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = v42 | 0x100000000;
        llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = v42 | 0x100000000;
        llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = v42 | 0x100000000;
        llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
        long long v391 = 0u;
        long long v392 = 0u;
        llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
LABEL_63:
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 0;
        llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
        long long v391 = 0u;
        long long v392 = 0u;
        llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
LABEL_408:
        if (v394 >= 0x41 && v393) {
          MEMORY[0x1D25D9CB0](v393, 0x1000C8000313F17);
        }
        return v27;
      }
      return 0;
    }
    LODWORD(v394) = 1;
    uint64_t v393 = 0;
    if (!sub_1CB85D874(a2, &v393)) {
      goto LABEL_407;
    }
    if (v394 >= 0x41) {
      uint64_t v24 = (uint64_t *)v393;
    }
    else {
      uint64_t v24 = (uint64_t *)&v393;
    }
    uint64_t v25 = *v24;
    uint64_t v26 = a1[6];
    uint64_t v27 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v26, (unsigned __int8 *)&unk_1CFC22BC5, 0);
    *(void *)(*(void *)(v26 + 24) + 16 * (v27 & 0x7FFFFFFF)) = &off_1E66A4340;
    uint64_t v28 = *(void *)(v26 + 8);
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
    }
    uint64_t v29 = a1[4];
    uint64_t v30 = *(void *)(v29 + 640);
    int v31 = *(unint64_t **)(v29 + 648);
    uint64_t v32 = *(void *)(a1[12] + 8) + 69360;
    uint64_t v33 = *(llvm::MachineFunction **)(v30 + 32);
    int v34 = (unsigned __int8 *)a1[9];
    uint64_t v390 = v34;
    if (v34) {
      llvm::MetadataTracking::track((uint64_t)&v390, v34, 2);
    }
    uint64_t v35 = llvm::MachineFunction::CreateMachineInstr(v33, v32, &v390, 0);
    if (v390)
    {
      int v343 = *v390;
      if ((v343 - 4) > 0x1E)
      {
        if ((v343 - 3) >= 0xFFFFFFFE) {
          uint64_t v355 = v390;
        }
        else {
          uint64_t v355 = 0;
        }
        if ((v343 - 3) < 0xFFFFFFFE)
        {
          if (v343 == 3) {
            *((void *)v390 + 1) = 0;
          }
          goto LABEL_45;
        }
        unint64_t v345 = (unint64_t)(v355 + 8);
      }
      else
      {
        if ((v390[1] & 0x7F) != 2 && !*((_DWORD *)v390 + 3)) {
          goto LABEL_45;
        }
        uint64_t v344 = *((void *)v390 + 2);
        if ((v344 & 4) == 0) {
          goto LABEL_45;
        }
        unint64_t v345 = v344 & 0xFFFFFFFFFFFFFFF8;
        if (!v345) {
          goto LABEL_45;
        }
      }
      *(void *)&long long v391 = &v390;
      sub_1CC5FA668(v345 + 16, &v391);
    }
LABEL_45:
    uint64_t v36 = *(void *)(v30 + 40);
    *((void *)v35 + 3) = v36;
    uint64_t v37 = *(void *)(v36 + 32);
    uint64_t v38 = *((unsigned int *)v35 + 10);
    if (v38)
    {
      uint64_t v196 = *((void *)v35 + 4);
      uint64_t v197 = *(void *)(v37 + 40);
      uint64_t v198 = 32 * v38;
      do
      {
        if (!*(unsigned char *)v196)
        {
          uint64_t v199 = *(unsigned int *)(v196 + 4);
          if ((int)v199 >= 0) {
            uint64_t v200 = (uint64_t *)(*(void *)(v197 + 272) + 8 * v199);
          }
          else {
            uint64_t v200 = (uint64_t *)(*(void *)(v197 + 24) + 16 * (v199 & 0x7FFFFFFF) + 8);
          }
          uint64_t v201 = *v200;
          if (*v200)
          {
            uint64_t v202 = *(void *)(v201 + 16);
            *(void *)(v201 + 16) = v196;
            *(void *)(v196 + 16) = v202;
            if (*(unsigned char *)(v196 + 3))
            {
              *(void *)(v196 + 24) = v201;
            }
            else
            {
              *(void *)(v196 + 24) = 0;
              uint64_t v200 = (uint64_t *)(v202 + 24);
            }
          }
          else
          {
            *(void *)(v196 + 16) = v196;
            *(void *)(v196 + 24) = 0;
          }
          *uint64_t v200 = v196;
        }
        v196 += 32;
        v198 -= 32;
      }
      while (v198);
    }
    uint64_t v39 = *(void *)(v37 + 728);
    if (v39) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, v35);
    }
    unint64_t v40 = *v31 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v35 = v40 | *(void *)v35 & 7;
    *((void *)v35 + 1) = v31;
    *(void *)(v40 + 8) = v35;
    *int v31 = *v31 & 7 | (unint64_t)v35;
    *((void *)&v391 + 1) = 0;
    long long v392 = 0uLL;
    LODWORD(v391) = 0x1000000;
    DWORD1(v391) = v27;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
    LODWORD(v391) = 1;
    *((void *)&v391 + 1) = 0;
    *(void *)&long long v392 = 0;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
    LODWORD(v391) = 1;
    *((void *)&v391 + 1) = 0;
    *(void *)&long long v392 = v25;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
    LODWORD(v391) = 1;
    *((void *)&v391 + 1) = 0;
    *(void *)&long long v392 = v25;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
    LODWORD(v391) = 1;
    *((void *)&v391 + 1) = 0;
    *(void *)&long long v392 = v25;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
    long long v391 = 0u;
    long long v392 = 0u;
    llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v391);
    LODWORD(v391) = 1;
    goto LABEL_63;
  }
  LODWORD(v14) = *(_DWORD *)(v4 + 32);
  if ((v14 - 5) < 0xFFFFFFFD) {
    return 0;
  }
  int v15 = *(_DWORD *)(*(void *)(v4 + 24) + 8);
  if ((_BYTE)v15) {
    BOOL v16 = v15 == 4109;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = v16;
  if (v15 == 2061)
  {
    int v18 = *(unsigned __int8 *)(a2 + 16);
    if (v18 == 17)
    {
      if (*(_UNKNOWN **)(a2 + 32) == &unk_1CFB2E344) {
        uint64_t v341 = *(void *)(a2 + 40);
      }
      else {
        uint64_t v341 = a2 + 24;
      }
      if ((*(unsigned char *)(v341 + 28) & 7) != 3) {
        goto LABEL_30;
      }
      goto LABEL_317;
    }
    if ((v5 & 0xFE) == 0x12)
    {
      SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
      if (SplatValue && *((unsigned char *)SplatValue + 16) == 17)
      {
        if ((_UNKNOWN *)SplatValue[4] == &unk_1CFB2E344) {
          uint64_t v383 = (char *)SplatValue[5];
        }
        else {
          uint64_t v383 = (char *)(SplatValue + 3);
        }
        LODWORD(v14) = *(_DWORD *)(v4 + 32);
        if ((v383[28] & 7) == 3) {
          goto LABEL_317;
        }
        goto LABEL_29;
      }
      int v18 = *(unsigned __int8 *)(a2 + 16);
    }
    if (v18 == 16)
    {
      uint64_t v19 = *(unsigned int *)(a2 + 32);
      if (v19 < 0x41)
      {
        LODWORD(v14) = *(_DWORD *)(v4 + 32);
        if (*(void *)(a2 + 24)) {
          goto LABEL_29;
        }
        goto LABEL_317;
      }
      int v337 = 0;
      int64_t v338 = (unint64_t)(v19 + 63) >> 6;
      do
      {
        BOOL v161 = v338-- < 1;
        if (v161) {
          break;
        }
        unint64_t v339 = *(void *)(*(void *)(a2 + 24) + 8 * v338);
        v337 += __clz(v339);
      }
      while (!v339);
      int v340 = v19 | 0xFFFFFFC0;
      if ((v19 & 0x3F) == 0) {
        int v340 = 0;
      }
      LODWORD(v14) = *(_DWORD *)(v4 + 32);
      if (v337 + v340 == v19)
      {
LABEL_317:
        uint64_t v21 = 0;
        goto LABEL_318;
      }
    }
    else
    {
      if (v18 != 17)
      {
        if ((v18 - 18) >= 3 && v18 != 13)
        {
          if (!*(_DWORD *)(v4 + 32)) {
            return 0;
          }
          goto LABEL_30;
        }
        uint64_t v21 = 0;
        LODWORD(v14) = *(_DWORD *)(v4 + 32);
LABEL_318:
        if (v14 != 2)
        {
          if (v14 != 4) {
            return 0;
          }
          uint64_t v247 = a1[6];
          uint64_t v27 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v247, (unsigned __int8 *)&unk_1CFC22BC5, 0);
          *(void *)(*(void *)(v247 + 24) + 16 * (v27 & 0x7FFFFFFF)) = &off_1E66A4340;
          uint64_t v248 = *(void *)(v247 + 8);
          if (v248)
          {
            (*(void (**)(uint64_t))(*(void *)v248 + 24))(v248);
            if (!v27) {
              return v27;
            }
          }
          else if (!v27)
          {
            return v27;
          }
          uint64_t v249 = a1[4];
          uint64_t v250 = *(void *)(v249 + 640);
          uint64_t v251 = *(unint64_t **)(v249 + 648);
          uint64_t v252 = *(void *)(a1[12] + 8) + 69360;
          uint64_t v253 = *(llvm::MachineFunction **)(v250 + 32);
          uint64_t v254 = (void *)a1[9];
          uint64_t v393 = v254;
          if (v254) {
            llvm::MetadataTracking::track((uint64_t)&v393, (unsigned __int8 *)v254, 2);
          }
          MachineInstr = llvm::MachineFunction::CreateMachineInstr(v253, v252, (unsigned __int8 **)&v393, 0);
          if (!v393) {
            goto LABEL_325;
          }
          int v356 = *(unsigned __int8 *)v393;
          if ((v356 - 4) > 0x1E)
          {
            if ((v356 - 3) >= 0xFFFFFFFE) {
              uint64_t v365 = v393;
            }
            else {
              uint64_t v365 = 0;
            }
            if ((v356 - 3) < 0xFFFFFFFE)
            {
              if (v356 == 3) {
                *((void *)v393 + 1) = 0;
              }
              goto LABEL_325;
            }
            unint64_t v358 = (unint64_t)v365 + 8;
          }
          else
          {
            if ((*((unsigned char *)v393 + 1) & 0x7F) != 2 && !*((_DWORD *)v393 + 3)) {
              goto LABEL_325;
            }
            uint64_t v357 = *((void *)v393 + 2);
            if ((v357 & 4) == 0) {
              goto LABEL_325;
            }
            unint64_t v358 = v357 & 0xFFFFFFFFFFFFFFF8;
            if (!v358) {
              goto LABEL_325;
            }
          }
          *(void *)&long long v391 = &v393;
          sub_1CC5FA668(v358 + 16, &v391);
LABEL_325:
          uint64_t v256 = *(void *)(v250 + 40);
          *((void *)MachineInstr + 3) = v256;
          uint64_t v257 = *(void *)(v256 + 32);
          uint64_t v258 = *((unsigned int *)MachineInstr + 10);
          if (v258)
          {
            uint64_t v294 = *((void *)MachineInstr + 4);
            uint64_t v295 = *(void *)(v257 + 40);
            uint64_t v296 = 32 * v258;
            do
            {
              if (!*(unsigned char *)v294)
              {
                uint64_t v297 = *(unsigned int *)(v294 + 4);
                if ((int)v297 >= 0) {
                  uint64_t v298 = (uint64_t *)(*(void *)(v295 + 272) + 8 * v297);
                }
                else {
                  uint64_t v298 = (uint64_t *)(*(void *)(v295 + 24) + 16 * (v297 & 0x7FFFFFFF) + 8);
                }
                uint64_t v299 = *v298;
                if (*v298)
                {
                  uint64_t v300 = *(void *)(v299 + 16);
                  *(void *)(v299 + 16) = v294;
                  *(void *)(v294 + 16) = v300;
                  if (*(unsigned char *)(v294 + 3))
                  {
                    *(void *)(v294 + 24) = v299;
                  }
                  else
                  {
                    *(void *)(v294 + 24) = 0;
                    uint64_t v298 = (uint64_t *)(v300 + 24);
                  }
                }
                else
                {
                  *(void *)(v294 + 16) = v294;
                  *(void *)(v294 + 24) = 0;
                }
                *uint64_t v298 = v294;
              }
              v294 += 32;
              v296 -= 32;
            }
            while (v296);
          }
          uint64_t v259 = *(void *)(v257 + 728);
          if (v259) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v259 + 24))(v259, MachineInstr);
          }
          unint64_t v260 = *v251 & 0xFFFFFFFFFFFFFFF8;
          *(void *)MachineInstr = v260 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v251;
          *(void *)(v260 + 8) = MachineInstr;
          *uint64_t v251 = *v251 & 7 | (unint64_t)MachineInstr;
          *((void *)&v391 + 1) = 0;
          long long v392 = 0uLL;
          LODWORD(v391) = 0x1000000;
          DWORD1(v391) = v27;
          llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
          LODWORD(v391) = 1;
          *((void *)&v391 + 1) = 0;
          *(void *)&long long v392 = 0;
          llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
          LODWORD(v391) = 1;
          *((void *)&v391 + 1) = 0;
          *(void *)&long long v392 = v21;
          llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
          LODWORD(v391) = 1;
          *((void *)&v391 + 1) = 0;
          *(void *)&long long v392 = v21;
          llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
          LODWORD(v391) = 1;
          *((void *)&v391 + 1) = 0;
          *(void *)&long long v392 = v21;
          llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
          long long v391 = 0u;
          long long v392 = 0u;
          llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
          LODWORD(v391) = 1;
LABEL_339:
          *((void *)&v391 + 1) = 0;
          *(void *)&long long v392 = 0;
          llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
          long long v391 = 0u;
          long long v392 = 0u;
          llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
          return v27;
        }
        uint64_t v261 = a1[6];
        uint64_t v27 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v261, (unsigned __int8 *)&unk_1CFC22BC5, 0);
        *(void *)(*(void *)(v261 + 24) + 16 * (v27 & 0x7FFFFFFF)) = &off_1E66A4180;
        uint64_t v262 = *(void *)(v261 + 8);
        if (v262)
        {
          (*(void (**)(uint64_t))(*(void *)v262 + 24))(v262);
          if (!v27) {
            return v27;
          }
        }
        else if (!v27)
        {
          return v27;
        }
        uint64_t v263 = a1[4];
        uint64_t v264 = *(void *)(v263 + 640);
        uint64_t v265 = *(unint64_t **)(v263 + 648);
        uint64_t v266 = *(void *)(a1[12] + 8) + 48720;
        uint64_t v253 = *(llvm::MachineFunction **)(v264 + 32);
        uint64_t v267 = (void *)a1[9];
        uint64_t v393 = v267;
        if (v267) {
          llvm::MetadataTracking::track((uint64_t)&v393, (unsigned __int8 *)v267, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr(v253, v266, (unsigned __int8 **)&v393, 0);
        if (v393)
        {
          int v359 = *(unsigned __int8 *)v393;
          if ((v359 - 4) > 0x1E)
          {
            if ((v359 - 3) >= 0xFFFFFFFE) {
              uint64_t v366 = v393;
            }
            else {
              uint64_t v366 = 0;
            }
            if ((v359 - 3) < 0xFFFFFFFE)
            {
              if (v359 == 3) {
                *((void *)v393 + 1) = 0;
              }
              goto LABEL_335;
            }
            unint64_t v361 = (unint64_t)v366 + 8;
          }
          else
          {
            if ((*((unsigned char *)v393 + 1) & 0x7F) != 2 && !*((_DWORD *)v393 + 3)) {
              goto LABEL_335;
            }
            uint64_t v360 = *((void *)v393 + 2);
            if ((v360 & 4) == 0) {
              goto LABEL_335;
            }
            unint64_t v361 = v360 & 0xFFFFFFFFFFFFFFF8;
            if (!v361) {
              goto LABEL_335;
            }
          }
          *(void *)&long long v391 = &v393;
          sub_1CC5FA668(v361 + 16, &v391);
        }
LABEL_335:
        uint64_t v268 = *(void *)(v264 + 40);
        *((void *)MachineInstr + 3) = v268;
        uint64_t v269 = *(void *)(v268 + 32);
        uint64_t v270 = *((unsigned int *)MachineInstr + 10);
        if (v270)
        {
          uint64_t v301 = *((void *)MachineInstr + 4);
          uint64_t v302 = *(void *)(v269 + 40);
          uint64_t v303 = 32 * v270;
          do
          {
            if (!*(unsigned char *)v301)
            {
              uint64_t v304 = *(unsigned int *)(v301 + 4);
              if ((int)v304 >= 0) {
                uint64_t v305 = (uint64_t *)(*(void *)(v302 + 272) + 8 * v304);
              }
              else {
                uint64_t v305 = (uint64_t *)(*(void *)(v302 + 24) + 16 * (v304 & 0x7FFFFFFF) + 8);
              }
              uint64_t v306 = *v305;
              if (*v305)
              {
                uint64_t v307 = *(void *)(v306 + 16);
                *(void *)(v306 + 16) = v301;
                *(void *)(v301 + 16) = v307;
                if (*(unsigned char *)(v301 + 3))
                {
                  *(void *)(v301 + 24) = v306;
                }
                else
                {
                  *(void *)(v301 + 24) = 0;
                  uint64_t v305 = (uint64_t *)(v307 + 24);
                }
              }
              else
              {
                *(void *)(v301 + 16) = v301;
                *(void *)(v301 + 24) = 0;
              }
              *uint64_t v305 = v301;
            }
            v301 += 32;
            v303 -= 32;
          }
          while (v303);
        }
        uint64_t v271 = *(void *)(v269 + 728);
        if (v271) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v271 + 24))(v271, MachineInstr);
        }
        unint64_t v272 = *v265 & 0xFFFFFFFFFFFFFFF8;
        *(void *)MachineInstr = v272 | *(void *)MachineInstr & 7;
        *((void *)MachineInstr + 1) = v265;
        *(void *)(v272 + 8) = MachineInstr;
        unint64_t *v265 = *v265 & 7 | (unint64_t)MachineInstr;
        *((void *)&v391 + 1) = 0;
        long long v392 = 0uLL;
        LODWORD(v391) = 0x1000000;
        DWORD1(v391) = v27;
        llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 0;
        llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = v21 | 0x100000000;
        llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = v21 | 0x100000000;
        llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = v21 | 0x100000000;
        llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = v21 | 0x100000000;
        llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
        long long v391 = 0u;
        long long v392 = 0u;
        llvm::MachineInstr::addOperand(MachineInstr, v253, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        goto LABEL_339;
      }
      char v246 = sub_1CB844168(a2, 0.0);
      LODWORD(v14) = *(_DWORD *)(v4 + 32);
      if (v246) {
        goto LABEL_317;
      }
    }
LABEL_29:
    if (!v14) {
      return 0;
    }
LABEL_30:
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v14 = 0;
    while (1)
    {
      AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v14);
      if (*((unsigned char *)AggregateElement + 16) != 16) {
        return 0;
      }
      uint64_t v23 = (unsigned __int8 *)(AggregateElement + 3);
      if (*((_DWORD *)AggregateElement + 8) >= 0x41u) {
        uint64_t v23 = *(unsigned __int8 **)v23;
      }
      v21 |= (unint64_t)*v23 << v20;
      uint64_t v14 = (llvm::Type *)(v14 + 1);
      v20 += 8;
      if (v14 == *(_DWORD *)(v4 + 32)) {
        goto LABEL_318;
      }
    }
  }
  int v55 = *(llvm::Type **)a2;
  if ((v5 & 0xFE) == 0x12) {
    int v55 = **(llvm::Type ***)(v4 + 16);
  }
  unsigned int v56 = llvm::Type::getPrimitiveSizeInBits(v55);
  unint64_t v57 = ((unint64_t)v56 >> 3) + 0xFFFFFFFF;
  if (v56 >= 0x20) {
    LODWORD(v57) = (v56 >> 5) + 1;
  }
  unint64_t v58 = (unint64_t)&off_1E66A4690;
  if (v56 != 8 && v56 != 16)
  {
    if (v56 == 48) {
      goto LABEL_74;
    }
    if ((v56 & 0x1F) != 0) {
      return 0;
    }
  }
  if (v57 > 0x11uLL) {
    return 0;
  }
  unint64_t v58 = (unint64_t)off_1E66A3B08[v57];
LABEL_74:
  int v385 = v17;
  uint64_t v59 = a1[6];
  uint64_t v60 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v59, "", 0);
  unint64_t v61 = v58 & 0xFFFFFFFFFFFFFFFBLL;
  *(void *)(*(void *)(v59 + 24) + 16 * (v60 & 0x7FFFFFFF)) = v61;
  uint64_t v62 = *(void *)(v59 + 8);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 24))(v62);
  }
  int v63 = v385;
  if (!v60) {
    return 0;
  }
  uint64_t v64 = v60;
  int v65 = *(_DWORD *)(v4 + 32);
  if (v65)
  {
    unsigned int v388 = v64;
    do
    {
      uint64_t v66 = a1[6];
      uint64_t v67 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v66, "", 0);
      *(void *)(*(void *)(v66 + 24) + 16 * (v67 & 0x7FFFFFFF)) = v61;
      uint64_t v68 = *(void *)(v66 + 8);
      if (v68) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v68 + 24))(v68, v67);
      }
      if (!v67) {
        return 0;
      }
      --v65;
    }
    while (v65);
    int v99 = *(_DWORD *)(v4 + 32);
    uint64_t v393 = v395;
    uint64_t v394 = 0x400000000;
    int v387 = v99;
    if (v99)
    {
      uint64_t v100 = 0;
      int v386 = 0;
      unint64_t v384 = (void *)(a2 + 24);
      while (!a2 || *(unsigned char *)(a2 + 16) != 17)
      {
        if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
        {
          uint64_t v166 = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
          if (v166)
          {
            if (*((unsigned char *)v166 + 16) == 17)
            {
              if ((_UNKNOWN *)v166[4] == &unk_1CFB2E344) {
                unint64_t v165 = (char *)v166[5];
              }
              else {
                unint64_t v165 = (char *)(v166 + 3);
              }
              goto LABEL_213;
            }
          }
        }
        int v101 = *(unsigned __int8 *)(a2 + 16);
        if (v101 == 16)
        {
          uint64_t v102 = *(unsigned int *)(a2 + 32);
          if (v102 < 0x41)
          {
            if (*v384) {
              goto LABEL_121;
            }
            goto LABEL_158;
          }
          int v159 = 0;
          int64_t v160 = (unint64_t)(v102 + 63) >> 6;
          do
          {
            BOOL v161 = v160-- < 1;
            if (v161) {
              break;
            }
            unint64_t v162 = *(void *)(*v384 + 8 * v160);
            v159 += __clz(v162);
          }
          while (!v162);
          int v163 = v102 | 0xFFFFFFC0;
          if ((v102 & 0x3F) == 0) {
            int v163 = 0;
          }
          BOOL v164 = v159 + v163 == v102;
          goto LABEL_208;
        }
        if (v101 == 17)
        {
          if ((sub_1CB844168(a2, 0.0) & 1) == 0) {
            goto LABEL_121;
          }
        }
        else if ((v101 - 18) >= 3 && v101 != 13)
        {
LABEL_121:
          unint64_t v103 = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v100);
          unsigned int v104 = *((unsigned __int8 *)v103 + 16) - 11;
          if (v104 <= 1 && v386 == 0)
          {
            int v106 = sub_1CD3CAE48((uint64_t)a1, v385, 1);
            int v386 = v106;
            if (!v106)
            {
              uint64_t v27 = 0;
              goto LABEL_476;
            }
          }
          else if (v104 >= 2)
          {
            int v106 = (*(uint64_t (**)(uint64_t *, void *))(*a1 + 104))(a1, v103);
          }
          else
          {
            int v106 = v386;
          }
          uint64_t v107 = a1[4];
          uint64_t v108 = *(void *)(v107 + 640);
          uint64_t v109 = *(unint64_t **)(v107 + 648);
          uint64_t v110 = *(void *)(a1[12] + 8);
          uint64_t v111 = *(llvm::MachineFunction **)(v108 + 32);
          uint64_t v112 = (unsigned __int8 *)a1[9];
          uint64_t v390 = v112;
          if (v112) {
            llvm::MetadataTracking::track((uint64_t)&v390, v112, 2);
          }
          uint64_t v113 = llvm::MachineFunction::CreateMachineInstr(v111, v110 + 912, &v390, 0);
          if (!v390) {
            goto LABEL_131;
          }
          int v167 = *v390;
          if ((v167 - 4) > 0x1E)
          {
            if ((v167 - 3) >= 0xFFFFFFFE) {
              uint64_t v170 = v390;
            }
            else {
              uint64_t v170 = 0;
            }
            if ((v167 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v169 = (unint64_t)(v170 + 8);
              goto LABEL_229;
            }
            if (v167 == 3) {
              *((void *)v390 + 1) = 0;
            }
          }
          else if ((v390[1] & 0x7F) == 2 || *((_DWORD *)v390 + 3))
          {
            uint64_t v168 = *((void *)v390 + 2);
            if ((v168 & 4) != 0)
            {
              unint64_t v169 = v168 & 0xFFFFFFFFFFFFFFF8;
              if (v169)
              {
LABEL_229:
                *(void *)&long long v391 = &v390;
                sub_1CC5FA668(v169 + 16, &v391);
              }
            }
          }
LABEL_131:
          uint64_t v114 = *(void *)(v108 + 40);
          *((void *)v113 + 3) = v114;
          uint64_t v115 = *(void *)(v114 + 32);
          uint64_t v116 = *((unsigned int *)v113 + 10);
          if (v116)
          {
            uint64_t v120 = *((void *)v113 + 4);
            uint64_t v121 = *(void *)(v115 + 40);
            uint64_t v122 = 32 * v116;
            do
            {
              if (!*(unsigned char *)v120)
              {
                uint64_t v123 = *(unsigned int *)(v120 + 4);
                if ((int)v123 >= 0) {
                  uint64_t v124 = (uint64_t *)(*(void *)(v121 + 272) + 8 * v123);
                }
                else {
                  uint64_t v124 = (uint64_t *)(*(void *)(v121 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8);
                }
                uint64_t v125 = *v124;
                if (*v124)
                {
                  uint64_t v126 = *(void *)(v125 + 16);
                  *(void *)(v125 + 16) = v120;
                  *(void *)(v120 + 16) = v126;
                  if (*(unsigned char *)(v120 + 3))
                  {
                    *(void *)(v120 + 24) = v125;
                  }
                  else
                  {
                    *(void *)(v120 + 24) = 0;
                    uint64_t v124 = (uint64_t *)(v126 + 24);
                  }
                }
                else
                {
                  *(void *)(v120 + 16) = v120;
                  *(void *)(v120 + 24) = 0;
                }
                *uint64_t v124 = v120;
              }
              v120 += 32;
              v122 -= 32;
            }
            while (v122);
          }
          uint64_t v117 = *(void *)(v115 + 728);
          if (v117) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v117 + 24))(v117, v113);
          }
          unint64_t v118 = *v109 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v113 = v118 | *(void *)v113 & 7;
          *((void *)v113 + 1) = v109;
          *(void *)(v118 + 8) = v113;
          *uint64_t v109 = *v109 & 7 | (unint64_t)v113;
          HIDWORD(v391) = 0;
          long long v392 = 0uLL;
          *(void *)((char *)&v391 + 4) = v100 + v388;
          LODWORD(v391) = 0x1000000;
          llvm::MachineInstr::addOperand(v113, v111, (const llvm::MachineOperand *)&v391);
          *((void *)&v391 + 1) = 0;
          LODWORD(v391) = 0;
          DWORD1(v391) = v106;
          long long v392 = 0uLL;
          llvm::MachineInstr::addOperand(v113, v111, (const llvm::MachineOperand *)&v391);
          goto LABEL_174;
        }
LABEL_158:
        uint64_t v127 = a1[4];
        uint64_t v128 = *(void *)(v127 + 640);
        uint64_t v129 = *(unint64_t **)(v127 + 648);
        uint64_t v130 = *(void *)(a1[12] + 8);
        if (!v385)
        {
          uint64_t v131 = *(llvm::MachineFunction **)(v128 + 32);
          uint64_t v139 = (unsigned __int8 *)a1[9];
          uint64_t v390 = v139;
          if (v139) {
            llvm::MetadataTracking::track((uint64_t)&v390, v139, 2);
          }
          size_t v133 = llvm::MachineFunction::CreateMachineInstr(v131, v130 + 69360, &v390, 0);
          if (!v390) {
            goto LABEL_169;
          }
          int v174 = *v390;
          if ((v174 - 4) > 0x1E)
          {
            if ((v174 - 3) >= 0xFFFFFFFE) {
              uint64_t v178 = v390;
            }
            else {
              uint64_t v178 = 0;
            }
            if ((v174 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v176 = (unint64_t)(v178 + 8);
              goto LABEL_255;
            }
            if (v174 == 3) {
              *((void *)v390 + 1) = 0;
            }
          }
          else if ((v390[1] & 0x7F) == 2 || *((_DWORD *)v390 + 3))
          {
            uint64_t v175 = *((void *)v390 + 2);
            if ((v175 & 4) != 0)
            {
              unint64_t v176 = v175 & 0xFFFFFFFFFFFFFFF8;
              if (v176)
              {
LABEL_255:
                *(void *)&long long v391 = &v390;
                sub_1CC5FA668(v176 + 16, &v391);
              }
            }
          }
LABEL_169:
          uint64_t v140 = *(void *)(v128 + 40);
          *((void *)v133 + 3) = v140;
          uint64_t v141 = *(void *)(v140 + 32);
          uint64_t v142 = *((unsigned int *)v133 + 10);
          if (v142)
          {
            uint64_t v152 = *((void *)v133 + 4);
            uint64_t v153 = *(void *)(v141 + 40);
            uint64_t v154 = 32 * v142;
            do
            {
              if (!*(unsigned char *)v152)
              {
                uint64_t v155 = *(unsigned int *)(v152 + 4);
                if ((int)v155 >= 0) {
                  uint64_t v156 = (uint64_t *)(*(void *)(v153 + 272) + 8 * v155);
                }
                else {
                  uint64_t v156 = (uint64_t *)(*(void *)(v153 + 24) + 16 * (v155 & 0x7FFFFFFF) + 8);
                }
                uint64_t v157 = *v156;
                if (*v156)
                {
                  uint64_t v158 = *(void *)(v157 + 16);
                  *(void *)(v157 + 16) = v152;
                  *(void *)(v152 + 16) = v158;
                  if (*(unsigned char *)(v152 + 3))
                  {
                    *(void *)(v152 + 24) = v157;
                  }
                  else
                  {
                    *(void *)(v152 + 24) = 0;
                    uint64_t v156 = (uint64_t *)(v158 + 24);
                  }
                }
                else
                {
                  *(void *)(v152 + 16) = v152;
                  *(void *)(v152 + 24) = 0;
                }
                *uint64_t v156 = v152;
              }
              v152 += 32;
              v154 -= 32;
            }
            while (v154);
          }
          uint64_t v143 = *(void *)(v141 + 728);
          if (v143) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v143 + 24))(v143, v133);
          }
          unint64_t v144 = *v129 & 0xFFFFFFFFFFFFFFF8;
          *(void *)size_t v133 = v144 | *(void *)v133 & 7;
          *((void *)v133 + 1) = v129;
          *(void *)(v144 + 8) = v133;
          *uint64_t v129 = *v129 & 7 | (unint64_t)v133;
          HIDWORD(v391) = 0;
          long long v392 = 0uLL;
          LODWORD(v391) = 0x1000000;
          *(void *)((char *)&v391 + 4) = v100 + v388;
          llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
          uint64_t v389 = v133;
          uint64_t v390 = (unsigned __int8 *)v131;
          LODWORD(v391) = 1;
          *((void *)&v391 + 1) = 0;
          *(void *)&long long v392 = 0;
          llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
          LODWORD(v391) = 1;
          *((void *)&v391 + 1) = 0;
          *(void *)&long long v392 = 0;
          llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
          LODWORD(v391) = 1;
          *((void *)&v391 + 1) = 0;
          *(void *)&long long v392 = 0;
          llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
          LODWORD(v391) = 1;
          *((void *)&v391 + 1) = 0;
          *(void *)&long long v392 = 0;
          goto LABEL_173;
        }
        uint64_t v131 = *(llvm::MachineFunction **)(v128 + 32);
        uint64_t v132 = (unsigned __int8 *)a1[9];
        uint64_t v390 = v132;
        if (v132) {
          llvm::MetadataTracking::track((uint64_t)&v390, v132, 2);
        }
        size_t v133 = llvm::MachineFunction::CreateMachineInstr(v131, v130 + 48720, &v390, 0);
        if (v390)
        {
          int v171 = *v390;
          if ((v171 - 4) > 0x1E)
          {
            if ((v171 - 3) >= 0xFFFFFFFE) {
              uint64_t v177 = v390;
            }
            else {
              uint64_t v177 = 0;
            }
            if ((v171 - 3) < 0xFFFFFFFE)
            {
              if (v171 == 3) {
                *((void *)v390 + 1) = 0;
              }
              goto LABEL_162;
            }
            unint64_t v173 = (unint64_t)(v177 + 8);
          }
          else
          {
            if ((v390[1] & 0x7F) != 2 && !*((_DWORD *)v390 + 3)) {
              goto LABEL_162;
            }
            uint64_t v172 = *((void *)v390 + 2);
            if ((v172 & 4) == 0) {
              goto LABEL_162;
            }
            unint64_t v173 = v172 & 0xFFFFFFFFFFFFFFF8;
            if (!v173) {
              goto LABEL_162;
            }
          }
          *(void *)&long long v391 = &v390;
          sub_1CC5FA668(v173 + 16, &v391);
        }
LABEL_162:
        uint64_t v134 = *(void *)(v128 + 40);
        *((void *)v133 + 3) = v134;
        uint64_t v135 = *(void *)(v134 + 32);
        uint64_t v136 = *((unsigned int *)v133 + 10);
        if (v136)
        {
          uint64_t v145 = *((void *)v133 + 4);
          uint64_t v146 = *(void *)(v135 + 40);
          uint64_t v147 = 32 * v136;
          do
          {
            if (!*(unsigned char *)v145)
            {
              uint64_t v148 = *(unsigned int *)(v145 + 4);
              if ((int)v148 >= 0) {
                uint64_t v149 = (uint64_t *)(*(void *)(v146 + 272) + 8 * v148);
              }
              else {
                uint64_t v149 = (uint64_t *)(*(void *)(v146 + 24) + 16 * (v148 & 0x7FFFFFFF) + 8);
              }
              uint64_t v150 = *v149;
              if (*v149)
              {
                uint64_t v151 = *(void *)(v150 + 16);
                *(void *)(v150 + 16) = v145;
                *(void *)(v145 + 16) = v151;
                if (*(unsigned char *)(v145 + 3))
                {
                  *(void *)(v145 + 24) = v150;
                }
                else
                {
                  *(void *)(v145 + 24) = 0;
                  uint64_t v149 = (uint64_t *)(v151 + 24);
                }
              }
              else
              {
                *(void *)(v145 + 16) = v145;
                *(void *)(v145 + 24) = 0;
              }
              *uint64_t v149 = v145;
            }
            v145 += 32;
            v147 -= 32;
          }
          while (v147);
        }
        uint64_t v137 = *(void *)(v135 + 728);
        if (v137) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v137 + 24))(v137, v133);
        }
        unint64_t v138 = *v129 & 0xFFFFFFFFFFFFFFF8;
        *(void *)size_t v133 = v138 | *(void *)v133 & 7;
        *((void *)v133 + 1) = v129;
        *(void *)(v138 + 8) = v133;
        *uint64_t v129 = *v129 & 7 | (unint64_t)v133;
        HIDWORD(v391) = 0;
        long long v392 = 0uLL;
        LODWORD(v391) = 0x1000000;
        *(void *)((char *)&v391 + 4) = v100 + v388;
        llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
        uint64_t v389 = v133;
        uint64_t v390 = (unsigned __int8 *)v131;
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 0;
        llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 0x100000000;
        llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 0x100000000;
        llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 0x100000000;
        llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 0x100000000;
LABEL_173:
        llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
        long long v391 = 0u;
        long long v392 = 0u;
        llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 0;
        llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)&v391);
        long long v391 = 0u;
        long long v392 = 0u;
        llvm::MachineInstr::addOperand(v389, (llvm::MachineFunction *)v390, (const llvm::MachineOperand *)&v391);
LABEL_174:
        uint64_t v100 = (llvm::Type *)(v100 + 1);
        if (v100 == v387) {
          goto LABEL_261;
        }
      }
      unint64_t v165 = (char *)(a2 + 24);
      if (*(_UNKNOWN **)(a2 + 32) == &unk_1CFB2E344) {
        unint64_t v165 = *(char **)(a2 + 40);
      }
LABEL_213:
      BOOL v164 = (v165[28] & 7) == 3;
LABEL_208:
      if (!v164) {
        goto LABEL_121;
      }
      goto LABEL_158;
    }
LABEL_261:
    uint64_t v64 = v388;
    int v63 = v385;
  }
  else
  {
    uint64_t v393 = v395;
    uint64_t v394 = 0x400000000;
  }
  if (!v63)
  {
    uint64_t v27 = v64;
    goto LABEL_476;
  }
  int v179 = *(_DWORD *)(v4 + 32);
  if (v179 != 4)
  {
    if (v179 != 3)
    {
      if (v179 == 2)
      {
        uint64_t v180 = a1[6];
        uint64_t v27 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v180, "", 0);
        *(void *)(*(void *)(v180 + 24) + 16 * (v27 & 0x7FFFFFFF)) = &off_1E66A43C8;
        uint64_t v181 = *(void *)(v180 + 8);
        if (v181)
        {
          (*(void (**)(uint64_t))(*(void *)v181 + 24))(v181);
          if (!v27) {
            goto LABEL_476;
          }
        }
        else if (!v27)
        {
          goto LABEL_476;
        }
        uint64_t v182 = a1[4];
        uint64_t v183 = *(void *)(v182 + 640);
        unint64_t v184 = *(unint64_t **)(v182 + 648);
        uint64_t v185 = *(void *)(a1[12] + 8) + 864;
        uint64_t v186 = *(llvm::MachineFunction **)(v183 + 32);
        uint64_t v187 = (unsigned __int8 *)a1[9];
        uint64_t v390 = v187;
        if (v187) {
          llvm::MetadataTracking::track((uint64_t)&v390, v187, 2);
        }
        uint64_t v188 = llvm::MachineFunction::CreateMachineInstr(v186, v185, &v390, 0);
        if (!v390) {
          goto LABEL_271;
        }
        int v367 = *v390;
        if ((v367 - 4) > 0x1E)
        {
          if ((v367 - 3) >= 0xFFFFFFFE) {
            uint64_t v379 = v390;
          }
          else {
            uint64_t v379 = 0;
          }
          if ((v367 - 3) < 0xFFFFFFFE)
          {
            if (v367 == 3) {
              *((void *)v390 + 1) = 0;
            }
            goto LABEL_271;
          }
          unint64_t v369 = (unint64_t)(v379 + 8);
        }
        else
        {
          if ((v390[1] & 0x7F) != 2 && !*((_DWORD *)v390 + 3)) {
            goto LABEL_271;
          }
          uint64_t v368 = *((void *)v390 + 2);
          if ((v368 & 4) == 0) {
            goto LABEL_271;
          }
          unint64_t v369 = v368 & 0xFFFFFFFFFFFFFFF8;
          if (!v369) {
            goto LABEL_271;
          }
        }
        *(void *)&long long v391 = &v390;
        sub_1CC5FA668(v369 + 16, &v391);
LABEL_271:
        uint64_t v189 = *(void *)(v183 + 40);
        *((void *)v188 + 3) = v189;
        uint64_t v190 = *(void *)(v189 + 32);
        uint64_t v191 = *((unsigned int *)v188 + 10);
        int v192 = v64;
        if (v191)
        {
          uint64_t v316 = *((void *)v188 + 4);
          uint64_t v317 = *(void *)(v190 + 40);
          uint64_t v318 = 32 * v191;
          do
          {
            if (!*(unsigned char *)v316)
            {
              uint64_t v319 = *(unsigned int *)(v316 + 4);
              if ((int)v319 >= 0) {
                uint64_t v320 = (uint64_t *)(*(void *)(v317 + 272) + 8 * v319);
              }
              else {
                uint64_t v320 = (uint64_t *)(*(void *)(v317 + 24) + 16 * (v319 & 0x7FFFFFFF) + 8);
              }
              uint64_t v321 = *v320;
              if (*v320)
              {
                uint64_t v322 = *(void *)(v321 + 16);
                *(void *)(v321 + 16) = v316;
                *(void *)(v316 + 16) = v322;
                if (*(unsigned char *)(v316 + 3))
                {
                  *(void *)(v316 + 24) = v321;
                }
                else
                {
                  *(void *)(v316 + 24) = 0;
                  uint64_t v320 = (uint64_t *)(v322 + 24);
                }
              }
              else
              {
                *(void *)(v316 + 16) = v316;
                *(void *)(v316 + 24) = 0;
              }
              uint64_t *v320 = v316;
              int v192 = v64;
            }
            v316 += 32;
            v318 -= 32;
          }
          while (v318);
        }
        uint64_t v193 = *(void *)(v190 + 728);
        if (v193) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v193 + 24))(v193, v188);
        }
        unint64_t v194 = *v184 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v188 = v194 | *(void *)v188 & 7;
        *((void *)v188 + 1) = v184;
        *(void *)(v194 + 8) = v188;
        *unint64_t v184 = *v184 & 7 | (unint64_t)v188;
        *((void *)&v391 + 1) = 0;
        long long v392 = 0uLL;
        LODWORD(v391) = 0x1000000;
        DWORD1(v391) = v27;
        llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
        *((void *)&v391 + 1) = 0;
        long long v392 = 0uLL;
        LODWORD(v391) = 0;
        DWORD1(v391) = v192;
        llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = 1;
        llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
        HIDWORD(v391) = 0;
        long long v392 = 0uLL;
        LODWORD(v391) = 0;
        *(void *)((char *)&v391 + 4) = (v192 + 1);
        llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
        LODWORD(v391) = 1;
        uint64_t v195 = 2;
LABEL_298:
        *((void *)&v391 + 1) = 0;
        *(void *)&long long v392 = v195;
        llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
        goto LABEL_476;
      }
LABEL_475:
      uint64_t v27 = 0;
      goto LABEL_476;
    }
    uint64_t v203 = a1[6];
    uint64_t v27 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v203, "", 0);
    *(void *)(*(void *)(v203 + 24) + 16 * (v27 & 0x7FFFFFFF)) = &off_1E66A4690;
    uint64_t v204 = *(void *)(v203 + 8);
    if (v204)
    {
      (*(void (**)(uint64_t))(*(void *)v204 + 24))(v204);
      if (!v27) {
        goto LABEL_476;
      }
    }
    else if (!v27)
    {
      goto LABEL_476;
    }
    uint64_t v205 = a1[4];
    uint64_t v206 = *(void *)(v205 + 640);
    uint64_t v207 = *(unint64_t **)(v205 + 648);
    uint64_t v208 = *(void *)(a1[12] + 8) + 864;
    uint64_t v186 = *(llvm::MachineFunction **)(v206 + 32);
    uint64_t v209 = (unsigned __int8 *)a1[9];
    uint64_t v390 = v209;
    if (v209) {
      llvm::MetadataTracking::track((uint64_t)&v390, v209, 2);
    }
    uint64_t v188 = llvm::MachineFunction::CreateMachineInstr(v186, v208, &v390, 0);
    if (v390)
    {
      int v370 = *v390;
      if ((v370 - 4) > 0x1E)
      {
        if ((v370 - 3) >= 0xFFFFFFFE) {
          uint64_t v380 = v390;
        }
        else {
          uint64_t v380 = 0;
        }
        if ((v370 - 3) < 0xFFFFFFFE)
        {
          if (v370 == 3) {
            *((void *)v390 + 1) = 0;
          }
          goto LABEL_294;
        }
        unint64_t v372 = (unint64_t)(v380 + 8);
      }
      else
      {
        if ((v390[1] & 0x7F) != 2 && !*((_DWORD *)v390 + 3)) {
          goto LABEL_294;
        }
        uint64_t v371 = *((void *)v390 + 2);
        if ((v371 & 4) == 0) {
          goto LABEL_294;
        }
        unint64_t v372 = v371 & 0xFFFFFFFFFFFFFFF8;
        if (!v372) {
          goto LABEL_294;
        }
      }
      *(void *)&long long v391 = &v390;
      sub_1CC5FA668(v372 + 16, &v391);
    }
LABEL_294:
    uint64_t v210 = *(void *)(v206 + 40);
    *((void *)v188 + 3) = v210;
    uint64_t v211 = *(void *)(v210 + 32);
    uint64_t v212 = *((unsigned int *)v188 + 10);
    int v213 = v64;
    if (v212)
    {
      uint64_t v309 = *((void *)v188 + 4);
      uint64_t v310 = *(void *)(v211 + 40);
      uint64_t v311 = 32 * v212;
      do
      {
        if (!*(unsigned char *)v309)
        {
          uint64_t v312 = *(unsigned int *)(v309 + 4);
          if ((int)v312 >= 0) {
            uint64_t v313 = (uint64_t *)(*(void *)(v310 + 272) + 8 * v312);
          }
          else {
            uint64_t v313 = (uint64_t *)(*(void *)(v310 + 24) + 16 * (v312 & 0x7FFFFFFF) + 8);
          }
          uint64_t v314 = *v313;
          if (*v313)
          {
            uint64_t v315 = *(void *)(v314 + 16);
            *(void *)(v314 + 16) = v309;
            *(void *)(v309 + 16) = v315;
            if (*(unsigned char *)(v309 + 3))
            {
              *(void *)(v309 + 24) = v314;
            }
            else
            {
              *(void *)(v309 + 24) = 0;
              uint64_t v313 = (uint64_t *)(v315 + 24);
            }
          }
          else
          {
            *(void *)(v309 + 16) = v309;
            *(void *)(v309 + 24) = 0;
          }
          *uint64_t v313 = v309;
          int v213 = v64;
        }
        v309 += 32;
        v311 -= 32;
      }
      while (v311);
    }
    uint64_t v214 = *(void *)(v211 + 728);
    if (v214) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v214 + 24))(v214, v188);
    }
    unint64_t v215 = *v207 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v188 = v215 | *(void *)v188 & 7;
    *((void *)v188 + 1) = v207;
    *(void *)(v215 + 8) = v188;
    *uint64_t v207 = *v207 & 7 | (unint64_t)v188;
    *((void *)&v391 + 1) = 0;
    long long v392 = 0uLL;
    LODWORD(v391) = 0x1000000;
    DWORD1(v391) = v27;
    llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
    *((void *)&v391 + 1) = 0;
    long long v392 = 0uLL;
    LODWORD(v391) = 0;
    DWORD1(v391) = v213;
    llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
    LODWORD(v391) = 1;
    *((void *)&v391 + 1) = 0;
    *(void *)&long long v392 = 1;
    llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
    HIDWORD(v391) = 0;
    long long v392 = 0uLL;
    LODWORD(v391) = 0;
    *(void *)((char *)&v391 + 4) = (v213 + 1);
    llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
    LODWORD(v391) = 1;
    *((void *)&v391 + 1) = 0;
    *(void *)&long long v392 = 2;
    llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
    HIDWORD(v391) = 0;
    long long v392 = 0uLL;
    LODWORD(v391) = 0;
    *(void *)((char *)&v391 + 4) = (v213 + 2);
    llvm::MachineInstr::addOperand(v188, v186, (const llvm::MachineOperand *)&v391);
    LODWORD(v391) = 1;
    uint64_t v195 = 3;
    goto LABEL_298;
  }
  uint64_t v216 = a1[6];
  uint64_t v27 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v216, "", 0);
  *(void *)(*(void *)(v216 + 24) + 16 * (v27 & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v217 = *(void *)(v216 + 8);
  if (v217)
  {
    (*(void (**)(uint64_t))(*(void *)v217 + 24))(v217);
    if (!v27) {
      goto LABEL_476;
    }
  }
  else if (!v27)
  {
    goto LABEL_476;
  }
  uint64_t v218 = a1[6];
  int v219 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v218, "", 0);
  *(void *)(*(void *)(v218 + 24) + 16 * (v219 & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v220 = *(void *)(v218 + 8);
  if (v220)
  {
    (*(void (**)(uint64_t))(*(void *)v220 + 24))(v220);
    if (!v219) {
      goto LABEL_475;
    }
  }
  else if (!v219)
  {
    goto LABEL_475;
  }
  uint64_t v221 = a1[4];
  uint64_t v222 = *(void *)(v221 + 640);
  uint64_t v223 = *(unint64_t **)(v221 + 648);
  uint64_t v224 = *(void *)(a1[12] + 8) + 864;
  uint64_t v225 = *(llvm::MachineFunction **)(v222 + 32);
  uint64_t v226 = (unsigned __int8 *)a1[9];
  uint64_t v390 = v226;
  if (v226) {
    llvm::MetadataTracking::track((uint64_t)&v390, v226, 2);
  }
  unint64_t v227 = llvm::MachineFunction::CreateMachineInstr(v225, v224, &v390, 0);
  if (v390)
  {
    int v373 = *v390;
    if ((v373 - 4) > 0x1E)
    {
      if ((v373 - 3) >= 0xFFFFFFFE) {
        uint64_t v381 = v390;
      }
      else {
        uint64_t v381 = 0;
      }
      if ((v373 - 3) < 0xFFFFFFFE)
      {
        if (v373 == 3) {
          *((void *)v390 + 1) = 0;
        }
        goto LABEL_306;
      }
      unint64_t v375 = (unint64_t)(v381 + 8);
    }
    else
    {
      if ((v390[1] & 0x7F) != 2 && !*((_DWORD *)v390 + 3)) {
        goto LABEL_306;
      }
      uint64_t v374 = *((void *)v390 + 2);
      if ((v374 & 4) == 0) {
        goto LABEL_306;
      }
      unint64_t v375 = v374 & 0xFFFFFFFFFFFFFFF8;
      if (!v375) {
        goto LABEL_306;
      }
    }
    *(void *)&long long v391 = &v390;
    sub_1CC5FA668(v375 + 16, &v391);
  }
LABEL_306:
  uint64_t v228 = *(void *)(v222 + 40);
  *((void *)v227 + 3) = v228;
  uint64_t v229 = *(void *)(v228 + 32);
  uint64_t v230 = *((unsigned int *)v227 + 10);
  if (v230)
  {
    uint64_t v323 = *((void *)v227 + 4);
    uint64_t v324 = *(void *)(v229 + 40);
    uint64_t v325 = 32 * v230;
    do
    {
      if (!*(unsigned char *)v323)
      {
        uint64_t v326 = *(unsigned int *)(v323 + 4);
        if ((int)v326 >= 0) {
          uint64_t v327 = (uint64_t *)(*(void *)(v324 + 272) + 8 * v326);
        }
        else {
          uint64_t v327 = (uint64_t *)(*(void *)(v324 + 24) + 16 * (v326 & 0x7FFFFFFF) + 8);
        }
        uint64_t v328 = *v327;
        if (*v327)
        {
          uint64_t v329 = *(void *)(v328 + 16);
          *(void *)(v328 + 16) = v323;
          *(void *)(v323 + 16) = v329;
          if (*(unsigned char *)(v323 + 3))
          {
            *(void *)(v323 + 24) = v328;
          }
          else
          {
            *(void *)(v323 + 24) = 0;
            uint64_t v327 = (uint64_t *)(v329 + 24);
          }
        }
        else
        {
          *(void *)(v323 + 16) = v323;
          *(void *)(v323 + 24) = 0;
        }
        *uint64_t v327 = v323;
      }
      v323 += 32;
      v325 -= 32;
    }
    while (v325);
  }
  uint64_t v231 = *(void *)(v229 + 728);
  if (v231) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v231 + 24))(v231, v227);
  }
  unint64_t v232 = *v223 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v227 = v232 | *(void *)v227 & 7;
  *((void *)v227 + 1) = v223;
  *(void *)(v232 + 8) = v227;
  *uint64_t v223 = *v223 & 7 | (unint64_t)v227;
  *((void *)&v391 + 1) = 0;
  long long v392 = 0uLL;
  LODWORD(v391) = 0x1000000;
  DWORD1(v391) = v27;
  llvm::MachineInstr::addOperand(v227, v225, (const llvm::MachineOperand *)&v391);
  *((void *)&v391 + 1) = 0;
  long long v392 = 0uLL;
  LODWORD(v391) = 0;
  DWORD1(v391) = v64;
  llvm::MachineInstr::addOperand(v227, v225, (const llvm::MachineOperand *)&v391);
  LODWORD(v391) = 1;
  *((void *)&v391 + 1) = 0;
  *(void *)&long long v392 = 1;
  llvm::MachineInstr::addOperand(v227, v225, (const llvm::MachineOperand *)&v391);
  HIDWORD(v391) = 0;
  long long v392 = 0uLL;
  LODWORD(v391) = 0;
  *(void *)((char *)&v391 + 4) = (v64 + 1);
  llvm::MachineInstr::addOperand(v227, v225, (const llvm::MachineOperand *)&v391);
  LODWORD(v391) = 1;
  *((void *)&v391 + 1) = 0;
  *(void *)&long long v392 = 2;
  llvm::MachineInstr::addOperand(v227, v225, (const llvm::MachineOperand *)&v391);
  uint64_t v233 = a1[4];
  uint64_t v234 = *(void *)(v233 + 640);
  unint64_t v235 = *(unint64_t **)(v233 + 648);
  uint64_t v236 = *(void *)(a1[12] + 8) + 864;
  uint64_t v237 = *(llvm::MachineFunction **)(v234 + 32);
  uint64_t v238 = (unsigned __int8 *)a1[9];
  uint64_t v390 = v238;
  if (v238) {
    llvm::MetadataTracking::track((uint64_t)&v390, v238, 2);
  }
  int v239 = llvm::MachineFunction::CreateMachineInstr(v237, v236, &v390, 0);
  if (v390)
  {
    int v376 = *v390;
    if ((v376 - 4) > 0x1E)
    {
      if ((v376 - 3) >= 0xFFFFFFFE) {
        uint64_t v382 = v390;
      }
      else {
        uint64_t v382 = 0;
      }
      if ((v376 - 3) < 0xFFFFFFFE)
      {
        if (v376 == 3) {
          *((void *)v390 + 1) = 0;
        }
        goto LABEL_312;
      }
      unint64_t v378 = (unint64_t)(v382 + 8);
    }
    else
    {
      if ((v390[1] & 0x7F) != 2 && !*((_DWORD *)v390 + 3)) {
        goto LABEL_312;
      }
      uint64_t v377 = *((void *)v390 + 2);
      if ((v377 & 4) == 0) {
        goto LABEL_312;
      }
      unint64_t v378 = v377 & 0xFFFFFFFFFFFFFFF8;
      if (!v378) {
        goto LABEL_312;
      }
    }
    *(void *)&long long v391 = &v390;
    sub_1CC5FA668(v378 + 16, &v391);
  }
LABEL_312:
  uint64_t v240 = *(void *)(v234 + 40);
  *((void *)v239 + 3) = v240;
  uint64_t v241 = *(void *)(v240 + 32);
  uint64_t v242 = *((unsigned int *)v239 + 10);
  int v243 = v64;
  if (v242)
  {
    uint64_t v330 = *((void *)v239 + 4);
    uint64_t v331 = *(void *)(v241 + 40);
    uint64_t v332 = 32 * v242;
    do
    {
      if (!*(unsigned char *)v330)
      {
        uint64_t v333 = *(unsigned int *)(v330 + 4);
        if ((int)v333 >= 0) {
          uint64_t v334 = (uint64_t *)(*(void *)(v331 + 272) + 8 * v333);
        }
        else {
          uint64_t v334 = (uint64_t *)(*(void *)(v331 + 24) + 16 * (v333 & 0x7FFFFFFF) + 8);
        }
        uint64_t v335 = *v334;
        if (*v334)
        {
          uint64_t v336 = *(void *)(v335 + 16);
          *(void *)(v335 + 16) = v330;
          *(void *)(v330 + 16) = v336;
          if (*(unsigned char *)(v330 + 3))
          {
            *(void *)(v330 + 24) = v335;
          }
          else
          {
            *(void *)(v330 + 24) = 0;
            uint64_t v334 = (uint64_t *)(v336 + 24);
          }
        }
        else
        {
          *(void *)(v330 + 16) = v330;
          *(void *)(v330 + 24) = 0;
        }
        *uint64_t v334 = v330;
        int v243 = v64;
      }
      v330 += 32;
      v332 -= 32;
    }
    while (v332);
  }
  uint64_t v244 = *(void *)(v241 + 728);
  if (v244) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v244 + 24))(v244, v239);
  }
  unint64_t v245 = *v235 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v239 = v245 | *(void *)v239 & 7;
  *((void *)v239 + 1) = v235;
  *(void *)(v245 + 8) = v239;
  *unint64_t v235 = *v235 & 7 | (unint64_t)v239;
  *((void *)&v391 + 1) = 0;
  long long v392 = 0uLL;
  LODWORD(v391) = 0x1000000;
  DWORD1(v391) = v219;
  llvm::MachineInstr::addOperand(v239, v237, (const llvm::MachineOperand *)&v391);
  HIDWORD(v391) = 0;
  long long v392 = 0uLL;
  LODWORD(v391) = 0;
  *(void *)((char *)&v391 + 4) = (v243 + 2);
  llvm::MachineInstr::addOperand(v239, v237, (const llvm::MachineOperand *)&v391);
  LODWORD(v391) = 1;
  *((void *)&v391 + 1) = 0;
  *(void *)&long long v392 = 1;
  llvm::MachineInstr::addOperand(v239, v237, (const llvm::MachineOperand *)&v391);
  HIDWORD(v391) = 0;
  long long v392 = 0uLL;
  LODWORD(v391) = 0;
  *(void *)((char *)&v391 + 4) = (v243 + 3);
  llvm::MachineInstr::addOperand(v239, v237, (const llvm::MachineOperand *)&v391);
  LODWORD(v391) = 1;
  *((void *)&v391 + 1) = 0;
  *(void *)&long long v392 = 2;
  llvm::MachineInstr::addOperand(v239, v237, (const llvm::MachineOperand *)&v391);
LABEL_476:
  if (v393 != v395) {
    free(v393);
  }
  return v27;
}

uint64_t sub_1CB85D874(uint64_t a1, void **this)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v3 == 16)
  {
    if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(a1 + 32) > 0x40u)
    {
      int v8 = (const void **)(a1 + 24);
      if ((void **)(a1 + 24) != this)
      {
        llvm::APInt::reallocate((uint64_t)this, *(_DWORD *)(a1 + 32));
        uint64_t v10 = *((unsigned int *)this + 2);
        if (v10 <= 0x40) {
          *this = (void *)*v8;
        }
        else {
          memcpy(*this, *v8, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
      return 1;
    }
    *this = *(void **)(a1 + 24);
    int v4 = *(_DWORD *)(a1 + 32);
LABEL_14:
    *((_DWORD *)this + 2) = v4;
    return 1;
  }
  uint64_t v5 = 0;
  if (a1 && v3 == 17)
  {
    int v7 = *(void **)(a1 + 32);
    BOOL v6 = (llvm::detail::DoubleAPFloat *)(a1 + 32);
    if (v7 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v6, (llvm::APInt *)&v11);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v6, (uint64_t)&v11);
    }
    if (*((_DWORD *)this + 2) >= 0x41u && *this) {
      MEMORY[0x1D25D9CB0](*this, 0x1000C8000313F17);
    }
    *this = v11;
    int v4 = v12;
    goto LABEL_14;
  }
  return v5;
}

uint64_t sub_1CB85D99C(void *a1, int a2, int a3, unsigned int a4)
{
  BOOL v6 = (void *)a1[6];
  uint64_t v7 = v6[3];
  uint64_t v188 = (_UNKNOWN ***)(*(void *)(v7 + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (a3) {
    int v8 = (_UNKNOWN ***)(*(void *)(v7 + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  }
  else {
    int v8 = (_UNKNOWN ***)(*(void *)(v7 + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*v6 + 16) + 176))(*(void *)(*v6 + 16));
  unsigned int v10 = *(_DWORD *)(*(void *)(v9 + 264)
                  + 24
                  * (*((unsigned __int16 *)*v188 + 12)
                   + *(_DWORD *)(v9 + 272) * ((*(void *)(v9 + 248) - *(void *)(v9 + 240)) >> 3)));
  uint64_t v11 = *(void *)(*(void *)a1[6] + 16);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 176))(v11);
  unsigned int v13 = *(_DWORD *)(*(void *)(v12 + 264)
                  + 24
                  * (*((unsigned __int16 *)*v8 + 12)
                   + *(_DWORD *)(v12 + 272) * ((*(void *)(v12 + 248) - *(void *)(v12 + 240)) >> 3)));
  if (v10) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    return 0;
  }
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  int v16 = sub_1CB85F2B0(v8, (int *)&v191 + 1, (int *)&v190 + 1);
  uint64_t v15 = 0;
  if (!v16) {
    return v15;
  }
  if (!sub_1CB85F2B0(v188, (int *)&v191, (int *)&v190)) {
    return 0;
  }
  unsigned int v185 = 0;
  if (a3 || v10 > v13) {
    goto LABEL_25;
  }
  uint64_t v17 = a1[6];
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v17, "", 0);
  int v19 = IncompleteVirtualRegister;
  uint64_t v20 = 16 * (IncompleteVirtualRegister & 0x7FFFFFFF);
  *(void *)(*(void *)(v17 + 24) + v20) = v188;
  uint64_t v21 = *(void *)(v17 + 8);
  if (v21) {
    (*(void (**)(uint64_t, void))(*(void *)v21 + 24))(v21, IncompleteVirtualRegister);
  }
  unsigned int v185 = IncompleteVirtualRegister;
  if (!IncompleteVirtualRegister) {
    return 0;
  }
  uint64_t v22 = a1[4];
  uint64_t v23 = *(void *)(v22 + 640);
  uint64_t v24 = *(unint64_t **)(v22 + 648);
  uint64_t v25 = *(void *)(a1[12] + 8) + 480;
  uint64_t v26 = *(llvm::MachineFunction **)(v23 + 32);
  uint64_t v27 = (unsigned __int8 *)a1[9];
  int v192 = v27;
  if (v27) {
    llvm::MetadataTracking::track((uint64_t)&v192, v27, 2);
  }
  uint64_t v28 = llvm::MachineFunction::CreateMachineInstr(v26, v25, &v192, 0);
  if (v192)
  {
    int v174 = *v192;
    if ((v174 - 4) > 0x1E)
    {
      if ((v174 - 3) >= 0xFFFFFFFE) {
        uint64_t v177 = v192;
      }
      else {
        uint64_t v177 = 0;
      }
      if ((v174 - 3) < 0xFFFFFFFE)
      {
        if (v174 == 3) {
          *((void *)v192 + 1) = 0;
        }
        goto LABEL_20;
      }
      unint64_t v176 = (unint64_t)(v177 + 8);
    }
    else
    {
      if ((v192[1] & 0x7F) != 2 && !*((_DWORD *)v192 + 3)) {
        goto LABEL_20;
      }
      uint64_t v175 = *((void *)v192 + 2);
      if ((v175 & 4) == 0) {
        goto LABEL_20;
      }
      unint64_t v176 = v175 & 0xFFFFFFFFFFFFFFF8;
      if (!v176) {
        goto LABEL_20;
      }
    }
    *(void *)&long long v193 = &v192;
    sub_1CC5FA668(v176 + 16, &v193);
  }
LABEL_20:
  uint64_t v29 = *(void *)(v23 + 40);
  *((void *)v28 + 3) = v29;
  uint64_t v30 = *(void *)(v29 + 32);
  uint64_t v31 = *((unsigned int *)v28 + 10);
  if (v31)
  {
    uint64_t v167 = *((void *)v28 + 4);
    uint64_t v168 = *(void *)(v30 + 40);
    uint64_t v169 = 32 * v31;
    do
    {
      if (!*(unsigned char *)v167)
      {
        uint64_t v170 = *(unsigned int *)(v167 + 4);
        if ((int)v170 >= 0) {
          int v171 = (uint64_t *)(*(void *)(v168 + 272) + 8 * v170);
        }
        else {
          int v171 = (uint64_t *)(*(void *)(v168 + 24) + 16 * (v170 & 0x7FFFFFFF) + 8);
        }
        uint64_t v172 = *v171;
        if (*v171)
        {
          uint64_t v173 = *(void *)(v172 + 16);
          *(void *)(v172 + 16) = v167;
          *(void *)(v167 + 16) = v173;
          if (*(unsigned char *)(v167 + 3))
          {
            *(void *)(v167 + 24) = v172;
          }
          else
          {
            *(void *)(v167 + 24) = 0;
            int v171 = (uint64_t *)(v173 + 24);
          }
        }
        else
        {
          *(void *)(v167 + 16) = v167;
          *(void *)(v167 + 24) = 0;
        }
        *int v171 = v167;
      }
      v167 += 32;
      v169 -= 32;
    }
    while (v169);
  }
  uint64_t v32 = *(void *)(v30 + 728);
  if (v32) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v32 + 24))(v32, v28);
  }
  unint64_t v33 = *v24 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v28 = v33 | *(void *)v28 & 7;
  *((void *)v28 + 1) = v24;
  *(void *)(v33 + 8) = v28;
  *uint64_t v24 = *v24 & 7 | (unint64_t)v28;
  *((void *)&v193 + 1) = 0;
  uint64_t v194 = 0;
  uint64_t v195 = 0;
  LODWORD(v193) = 0x1000000;
  DWORD1(v193) = v185;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v193);
  int v34 = (void *)a1[6];
  if ((_UNKNOWN ***)(*(void *)(v34[3] + v20) & 0xFFFFFFFFFFFFFFF8) == &off_1E66A4340) {
    sub_1CC38D61C(v34, v19, (uint64_t)&off_1E66A4340, (uint64_t)&off_1E66A43C8, 0);
  }
LABEL_25:
  if (v10 <= v13)
  {
    int v189 = a4 / v10;
    if (v10 < v13)
    {
      if (v10 == 64)
      {
        HIDWORD(v191) = 50;
        HIDWORD(v190) = 64;
      }
      if (v10 <= a4)
      {
        unsigned int v35 = 0;
        unsigned int v36 = HIDWORD(v190);
        int v37 = HIDWORD(v191);
        while (1)
        {
          int v38 = v35 / v36;
          int v39 = v35 % v36 + v37;
          if (v35) {
            __int16 v40 = 72;
          }
          else {
            __int16 v40 = 50;
          }
          if (v37 == 50) {
            LOWORD(v39) = v40;
          }
          __int16 v182 = v39;
          uint64_t v41 = a1[4];
          uint64_t v42 = *(void *)(v41 + 640);
          uint64_t v43 = *(unint64_t **)(v41 + 648);
          uint64_t v44 = *(void *)(a1[12] + 8);
          uint64_t v45 = *(llvm::MachineFunction **)(v42 + 32);
          uint64_t v46 = (unsigned __int8 *)a1[9];
          int v192 = v46;
          if (v46) {
            llvm::MetadataTracking::track((uint64_t)&v192, v46, 2);
          }
          uint64_t v47 = llvm::MachineFunction::CreateMachineInstr(v45, v44 + 912, &v192, 0);
          if (!v192) {
            goto LABEL_39;
          }
          int v60 = *v192;
          if ((v60 - 4) > 0x1E)
          {
            if ((v60 - 3) >= 0xFFFFFFFE) {
              int v63 = v192;
            }
            else {
              int v63 = 0;
            }
            if ((v60 - 3) < 0xFFFFFFFE)
            {
              if (v60 == 3) {
                *((void *)v192 + 1) = 0;
              }
              goto LABEL_39;
            }
            unint64_t v62 = (unint64_t)(v63 + 8);
          }
          else
          {
            if ((v192[1] & 0x7F) != 2 && !*((_DWORD *)v192 + 3)) {
              goto LABEL_39;
            }
            uint64_t v61 = *((void *)v192 + 2);
            if ((v61 & 4) == 0) {
              goto LABEL_39;
            }
            unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFF8;
            if (!v62) {
              goto LABEL_39;
            }
          }
          *(void *)&long long v193 = &v192;
          sub_1CC5FA668(v62 + 16, &v193);
LABEL_39:
          uint64_t v48 = *(void *)(v42 + 40);
          *((void *)v47 + 3) = v48;
          uint64_t v49 = *(void *)(v48 + 32);
          uint64_t v50 = *((unsigned int *)v47 + 10);
          if (v50)
          {
            uint64_t v53 = *((void *)v47 + 4);
            uint64_t v54 = *(void *)(v49 + 40);
            uint64_t v55 = 32 * v50;
            do
            {
              if (!*(unsigned char *)v53)
              {
                uint64_t v56 = *(unsigned int *)(v53 + 4);
                if ((int)v56 >= 0) {
                  unint64_t v57 = (uint64_t *)(*(void *)(v54 + 272) + 8 * v56);
                }
                else {
                  unint64_t v57 = (uint64_t *)(*(void *)(v54 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
                }
                uint64_t v58 = *v57;
                if (*v57)
                {
                  uint64_t v59 = *(void *)(v58 + 16);
                  *(void *)(v58 + 16) = v53;
                  *(void *)(v53 + 16) = v59;
                  if (*(unsigned char *)(v53 + 3))
                  {
                    *(void *)(v53 + 24) = v58;
                  }
                  else
                  {
                    *(void *)(v53 + 24) = 0;
                    unint64_t v57 = (uint64_t *)(v59 + 24);
                  }
                }
                else
                {
                  *(void *)(v53 + 16) = v53;
                  *(void *)(v53 + 24) = 0;
                }
                *unint64_t v57 = v53;
              }
              v53 += 32;
              v55 -= 32;
            }
            while (v55);
          }
          uint64_t v51 = *(void *)(v49 + 728);
          if (v51) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v51 + 24))(v51, v47);
          }
          unint64_t v52 = *v43 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v47 = v52 | *(void *)v47 & 7;
          *((void *)v47 + 1) = v43;
          *(void *)(v52 + 8) = v47;
          *uint64_t v43 = *v43 & 7 | (unint64_t)v47;
          HIDWORD(v193) = 0;
          uint64_t v194 = 0;
          uint64_t v195 = 0;
          *(void *)((char *)&v193 + 4) = v35 + a2;
          LODWORD(v193) = 0x1000000;
          llvm::MachineInstr::addOperand(v47, v45, (const llvm::MachineOperand *)&v193);
          if (a3 && v38 + a3)
          {
            HIDWORD(v193) = 0;
            uint64_t v194 = 0;
            uint64_t v195 = 0;
            LODWORD(v193) = (v182 & 0xFFF) << 8;
            *(void *)((char *)&v193 + 4) = (v38 + a3);
          }
          else
          {
            *((void *)&v193 + 1) = 0;
            LODWORD(v193) = 0;
            DWORD1(v193) = v185;
            uint64_t v194 = 0;
            uint64_t v195 = 0;
          }
          llvm::MachineInstr::addOperand(v47, v45, (const llvm::MachineOperand *)&v193);
          ++v35;
          uint64_t v15 = 1;
          if (v35 == v189) {
            return v15;
          }
        }
      }
      return 1;
    }
    if (v10 > a4) {
      return 1;
    }
    int v142 = 0;
    while (1)
    {
      if (a3) {
        unsigned int v143 = v142 + a3;
      }
      else {
        unsigned int v143 = v185;
      }
      uint64_t v144 = a1[4];
      uint64_t v145 = *(void *)(v144 + 640);
      uint64_t v146 = *(unint64_t **)(v144 + 648);
      uint64_t v147 = *(void *)(a1[12] + 8);
      uint64_t v148 = *(llvm::MachineFunction **)(v145 + 32);
      uint64_t v149 = (unsigned __int8 *)a1[9];
      int v192 = v149;
      if (v149) {
        llvm::MetadataTracking::track((uint64_t)&v192, v149, 2);
      }
      uint64_t v150 = llvm::MachineFunction::CreateMachineInstr(v148, v147 + 912, &v192, 0);
      if (!v192) {
        goto LABEL_201;
      }
      int v163 = *v192;
      if ((v163 - 4) > 0x1E)
      {
        if ((v163 - 3) >= 0xFFFFFFFE) {
          uint64_t v166 = v192;
        }
        else {
          uint64_t v166 = 0;
        }
        if ((v163 - 3) < 0xFFFFFFFE)
        {
          if (v163 == 3) {
            *((void *)v192 + 1) = 0;
          }
          goto LABEL_201;
        }
        unint64_t v165 = (unint64_t)(v166 + 8);
      }
      else
      {
        if ((v192[1] & 0x7F) != 2 && !*((_DWORD *)v192 + 3)) {
          goto LABEL_201;
        }
        uint64_t v164 = *((void *)v192 + 2);
        if ((v164 & 4) == 0) {
          goto LABEL_201;
        }
        unint64_t v165 = v164 & 0xFFFFFFFFFFFFFFF8;
        if (!v165) {
          goto LABEL_201;
        }
      }
      *(void *)&long long v193 = &v192;
      sub_1CC5FA668(v165 + 16, &v193);
LABEL_201:
      uint64_t v151 = *(void *)(v145 + 40);
      *((void *)v150 + 3) = v151;
      uint64_t v152 = *(void *)(v151 + 32);
      uint64_t v153 = *((unsigned int *)v150 + 10);
      if (v153)
      {
        uint64_t v156 = *((void *)v150 + 4);
        uint64_t v157 = *(void *)(v152 + 40);
        uint64_t v158 = 32 * v153;
        do
        {
          if (!*(unsigned char *)v156)
          {
            uint64_t v159 = *(unsigned int *)(v156 + 4);
            if ((int)v159 >= 0) {
              int64_t v160 = (uint64_t *)(*(void *)(v157 + 272) + 8 * v159);
            }
            else {
              int64_t v160 = (uint64_t *)(*(void *)(v157 + 24) + 16 * (v159 & 0x7FFFFFFF) + 8);
            }
            uint64_t v161 = *v160;
            if (*v160)
            {
              uint64_t v162 = *(void *)(v161 + 16);
              *(void *)(v161 + 16) = v156;
              *(void *)(v156 + 16) = v162;
              if (*(unsigned char *)(v156 + 3))
              {
                *(void *)(v156 + 24) = v161;
              }
              else
              {
                *(void *)(v156 + 24) = 0;
                int64_t v160 = (uint64_t *)(v162 + 24);
              }
            }
            else
            {
              *(void *)(v156 + 16) = v156;
              *(void *)(v156 + 24) = 0;
            }
            *int64_t v160 = v156;
          }
          v156 += 32;
          v158 -= 32;
        }
        while (v158);
      }
      uint64_t v154 = *(void *)(v152 + 728);
      if (v154) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v154 + 24))(v154, v150);
      }
      unint64_t v155 = *v146 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v150 = v155 | *(void *)v150 & 7;
      *((void *)v150 + 1) = v146;
      *(void *)(v155 + 8) = v150;
      *uint64_t v146 = *v146 & 7 | (unint64_t)v150;
      HIDWORD(v193) = 0;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      LODWORD(v193) = 0x1000000;
      *(void *)((char *)&v193 + 4) = (v142 + a2);
      llvm::MachineInstr::addOperand(v150, v148, (const llvm::MachineOperand *)&v193);
      *((void *)&v193 + 1) = 0;
      LODWORD(v193) = 0;
      DWORD1(v193) = v143;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      llvm::MachineInstr::addOperand(v150, v148, (const llvm::MachineOperand *)&v193);
      ++v142;
      uint64_t v15 = 1;
      if (v142 == v189) {
        return v15;
      }
    }
  }
  uint64_t v15 = 1;
  if (v13 <= a4)
  {
    int v186 = 0;
    unsigned int v64 = 0;
    unsigned int v181 = HIDWORD(v190);
    unsigned int v180 = v190;
    int v178 = a4 / v13;
    int v179 = v190 - 1;
    while (1)
    {
      int v65 = v64 % v180;
      int v66 = v64 / v181 + a3;
      if (!a3) {
        int v66 = 0;
      }
      int v183 = v66;
      if (!v65) {
        break;
      }
LABEL_89:
      if (!v183)
      {
        int v186 = 0;
        goto LABEL_100;
      }
      uint64_t v81 = a1[6];
      int v82 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v81, "", 0);
      *(void *)(*(void *)(v81 + 24) + 16 * (v82 & 0x7FFFFFFF)) = v188;
      uint64_t v83 = *(void *)(v81 + 8);
      if (v83) {
        (*(void (**)(uint64_t))(*(void *)v83 + 24))(v83);
      }
      uint64_t v84 = a1[4];
      uint64_t v85 = *(void *)(v84 + 640);
      unint64_t v86 = *(unint64_t **)(v84 + 648);
      uint64_t v87 = *(void *)(a1[12] + 8);
      uint64_t v88 = *(llvm::MachineFunction **)(v85 + 32);
      uint64_t v89 = (unsigned __int8 *)a1[9];
      int v192 = v89;
      if (v89) {
        llvm::MetadataTracking::track((uint64_t)&v192, v89, 2);
      }
      uint64_t v90 = llvm::MachineFunction::CreateMachineInstr(v88, v87 + 432, &v192, 0);
      if (v192)
      {
        int v129 = *v192;
        if ((v129 - 4) > 0x1E)
        {
          if ((v129 - 3) >= 0xFFFFFFFE) {
            unint64_t v138 = v192;
          }
          else {
            unint64_t v138 = 0;
          }
          if ((v129 - 3) < 0xFFFFFFFE)
          {
            if (v129 == 3) {
              *((void *)v192 + 1) = 0;
            }
            goto LABEL_95;
          }
          unint64_t v131 = (unint64_t)(v138 + 8);
        }
        else
        {
          if ((v192[1] & 0x7F) != 2 && !*((_DWORD *)v192 + 3)) {
            goto LABEL_95;
          }
          uint64_t v130 = *((void *)v192 + 2);
          if ((v130 & 4) == 0) {
            goto LABEL_95;
          }
          unint64_t v131 = v130 & 0xFFFFFFFFFFFFFFF8;
          if (!v131) {
            goto LABEL_95;
          }
        }
        *(void *)&long long v193 = &v192;
        sub_1CC5FA668(v131 + 16, &v193);
      }
LABEL_95:
      uint64_t v91 = *(void *)(v85 + 40);
      *((void *)v90 + 3) = v91;
      uint64_t v92 = *(void *)(v91 + 32);
      uint64_t v93 = *((unsigned int *)v90 + 10);
      if (v93)
      {
        uint64_t v108 = *((void *)v90 + 4);
        uint64_t v109 = *(void *)(v92 + 40);
        uint64_t v110 = 32 * v93;
        do
        {
          if (!*(unsigned char *)v108)
          {
            uint64_t v111 = *(unsigned int *)(v108 + 4);
            if ((int)v111 >= 0) {
              uint64_t v112 = (uint64_t *)(*(void *)(v109 + 272) + 8 * v111);
            }
            else {
              uint64_t v112 = (uint64_t *)(*(void *)(v109 + 24) + 16 * (v111 & 0x7FFFFFFF) + 8);
            }
            uint64_t v113 = *v112;
            if (*v112)
            {
              uint64_t v114 = *(void *)(v113 + 16);
              *(void *)(v113 + 16) = v108;
              *(void *)(v108 + 16) = v114;
              if (*(unsigned char *)(v108 + 3))
              {
                *(void *)(v108 + 24) = v113;
              }
              else
              {
                *(void *)(v108 + 24) = 0;
                uint64_t v112 = (uint64_t *)(v114 + 24);
              }
            }
            else
            {
              *(void *)(v108 + 16) = v108;
              *(void *)(v108 + 24) = 0;
            }
            *uint64_t v112 = v108;
          }
          v108 += 32;
          v110 -= 32;
        }
        while (v110);
      }
      uint64_t v94 = *(void *)(v92 + 728);
      if (v94) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v94 + 24))(v94, v90);
      }
      unint64_t v95 = *v86 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v90 = v95 | *(void *)v90 & 7;
      *((void *)v90 + 1) = v86;
      *(void *)(v95 + 8) = v90;
      *unint64_t v86 = *v86 & 7 | (unint64_t)v90;
      *((void *)&v193 + 1) = 0;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      LODWORD(v193) = 0x1000000;
      DWORD1(v193) = v82;
      llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v193);
      *((void *)&v193 + 1) = 0;
      LODWORD(v193) = 0;
      DWORD1(v193) = v186;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v193);
      *((void *)&v193 + 1) = 0;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      LODWORD(v193) = ((WORD2(v191) + (unsigned __int16)(v64 % v181)) & 0xFFF) << 8;
      DWORD1(v193) = v183;
      llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      *((void *)&v193 + 1) = 0;
      uint64_t v194 = (v191 + v65);
      llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v193);
      int v186 = v82;
LABEL_100:
      if (v65 == v179)
      {
        uint64_t v96 = a1[4];
        uint64_t v97 = *(void *)(v96 + 640);
        unint64_t v98 = *(unint64_t **)(v96 + 648);
        uint64_t v99 = *(void *)(a1[12] + 8);
        uint64_t v100 = *(llvm::MachineFunction **)(v97 + 32);
        int v101 = (unsigned __int8 *)a1[9];
        int v192 = v101;
        if (v101) {
          llvm::MetadataTracking::track((uint64_t)&v192, v101, 2);
        }
        uint64_t v102 = llvm::MachineFunction::CreateMachineInstr(v100, v99 + 912, &v192, 0);
        if (!v192) {
          goto LABEL_104;
        }
        int v132 = *v192;
        if ((v132 - 4) > 0x1E)
        {
          if ((v132 - 3) >= 0xFFFFFFFE) {
            uint64_t v139 = v192;
          }
          else {
            uint64_t v139 = 0;
          }
          if ((v132 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v134 = (unint64_t)(v139 + 8);
            goto LABEL_178;
          }
          if (v132 == 3) {
            *((void *)v192 + 1) = 0;
          }
        }
        else if ((v192[1] & 0x7F) == 2 || *((_DWORD *)v192 + 3))
        {
          uint64_t v133 = *((void *)v192 + 2);
          if ((v133 & 4) != 0)
          {
            unint64_t v134 = v133 & 0xFFFFFFFFFFFFFFF8;
            if (v134)
            {
LABEL_178:
              *(void *)&long long v193 = &v192;
              sub_1CC5FA668(v134 + 16, &v193);
            }
          }
        }
LABEL_104:
        uint64_t v103 = *(void *)(v97 + 40);
        *((void *)v102 + 3) = v103;
        uint64_t v104 = *(void *)(v103 + 32);
        uint64_t v105 = *((unsigned int *)v102 + 10);
        if (v105)
        {
          uint64_t v115 = *((void *)v102 + 4);
          uint64_t v116 = *(void *)(v104 + 40);
          uint64_t v117 = 32 * v105;
          do
          {
            if (!*(unsigned char *)v115)
            {
              uint64_t v118 = *(unsigned int *)(v115 + 4);
              if ((int)v118 >= 0) {
                BOOL v119 = (uint64_t *)(*(void *)(v116 + 272) + 8 * v118);
              }
              else {
                BOOL v119 = (uint64_t *)(*(void *)(v116 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
              }
              uint64_t v120 = *v119;
              if (*v119)
              {
                uint64_t v121 = *(void *)(v120 + 16);
                *(void *)(v120 + 16) = v115;
                *(void *)(v115 + 16) = v121;
                if (*(unsigned char *)(v115 + 3))
                {
                  *(void *)(v115 + 24) = v120;
                }
                else
                {
                  *(void *)(v115 + 24) = 0;
                  BOOL v119 = (uint64_t *)(v121 + 24);
                }
              }
              else
              {
                *(void *)(v115 + 16) = v115;
                *(void *)(v115 + 24) = 0;
              }
              uint64_t *v119 = v115;
            }
            v115 += 32;
            v117 -= 32;
          }
          while (v117);
        }
        uint64_t v106 = *(void *)(v104 + 728);
        if (v106) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v106 + 24))(v106, v102);
        }
        unint64_t v107 = *v98 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v102 = v107 | *(void *)v102 & 7;
        *((void *)v102 + 1) = v98;
        *(void *)(v107 + 8) = v102;
        unint64_t *v98 = *v98 & 7 | (unint64_t)v102;
        HIDWORD(v193) = 0;
        uint64_t v194 = 0;
        uint64_t v195 = 0;
        *(void *)((char *)&v193 + 4) = v64 / v180 + a2;
        LODWORD(v193) = 0x1000000;
        llvm::MachineInstr::addOperand(v102, v100, (const llvm::MachineOperand *)&v193);
        *((void *)&v193 + 1) = 0;
        LODWORD(v193) = 0;
        DWORD1(v193) = v186;
        uint64_t v194 = 0;
        uint64_t v195 = 0;
        llvm::MachineInstr::addOperand(v102, v100, (const llvm::MachineOperand *)&v193);
      }
      if (++v64 == v178) {
        return 1;
      }
    }
    uint64_t v67 = a1[6];
    int v186 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v67, "", 0);
    *(void *)(*(void *)(v67 + 24) + 16 * (v186 & 0x7FFFFFFF)) = v188;
    uint64_t v68 = *(void *)(v67 + 8);
    if (v68) {
      (*(void (**)(uint64_t))(*(void *)v68 + 24))(v68);
    }
    uint64_t v69 = a1[4];
    uint64_t v70 = *(void *)(v69 + 640);
    uint64_t v71 = *(unint64_t **)(v69 + 648);
    uint64_t v72 = *(void *)(a1[12] + 8);
    uint64_t v73 = *(llvm::MachineFunction **)(v70 + 32);
    uint64_t v74 = (unsigned __int8 *)a1[9];
    int v192 = v74;
    if (v74) {
      llvm::MetadataTracking::track((uint64_t)&v192, v74, 2);
    }
    uint64_t v75 = llvm::MachineFunction::CreateMachineInstr(v73, v72 + 480, &v192, 0);
    if (v192)
    {
      int v135 = *v192;
      if ((v135 - 4) > 0x1E)
      {
        if ((v135 - 3) >= 0xFFFFFFFE) {
          uint64_t v140 = v192;
        }
        else {
          uint64_t v140 = 0;
        }
        if ((v135 - 3) < 0xFFFFFFFE)
        {
          if (v135 == 3) {
            *((void *)v192 + 1) = 0;
          }
          goto LABEL_85;
        }
        unint64_t v137 = (unint64_t)(v140 + 8);
      }
      else
      {
        if ((v192[1] & 0x7F) != 2 && !*((_DWORD *)v192 + 3)) {
          goto LABEL_85;
        }
        uint64_t v136 = *((void *)v192 + 2);
        if ((v136 & 4) == 0) {
          goto LABEL_85;
        }
        unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFF8;
        if (!v137) {
          goto LABEL_85;
        }
      }
      *(void *)&long long v193 = &v192;
      sub_1CC5FA668(v137 + 16, &v193);
    }
LABEL_85:
    uint64_t v76 = *(void *)(v70 + 40);
    *((void *)v75 + 3) = v76;
    uint64_t v77 = *(void *)(v76 + 32);
    uint64_t v78 = *((unsigned int *)v75 + 10);
    if (v78)
    {
      uint64_t v122 = *((void *)v75 + 4);
      uint64_t v123 = *(void *)(v77 + 40);
      uint64_t v124 = 32 * v78;
      do
      {
        if (!*(unsigned char *)v122)
        {
          uint64_t v125 = *(unsigned int *)(v122 + 4);
          if ((int)v125 >= 0) {
            uint64_t v126 = (uint64_t *)(*(void *)(v123 + 272) + 8 * v125);
          }
          else {
            uint64_t v126 = (uint64_t *)(*(void *)(v123 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
          }
          uint64_t v127 = *v126;
          if (*v126)
          {
            uint64_t v128 = *(void *)(v127 + 16);
            *(void *)(v127 + 16) = v122;
            *(void *)(v122 + 16) = v128;
            if (*(unsigned char *)(v122 + 3))
            {
              *(void *)(v122 + 24) = v127;
            }
            else
            {
              *(void *)(v122 + 24) = 0;
              uint64_t v126 = (uint64_t *)(v128 + 24);
            }
          }
          else
          {
            *(void *)(v122 + 16) = v122;
            *(void *)(v122 + 24) = 0;
          }
          uint64_t *v126 = v122;
        }
        v122 += 32;
        v124 -= 32;
      }
      while (v124);
    }
    uint64_t v79 = *(void *)(v77 + 728);
    if (v79) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v79 + 24))(v79, v75);
    }
    unint64_t v80 = *v71 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v75 = v80 | *(void *)v75 & 7;
    *((void *)v75 + 1) = v71;
    *(void *)(v80 + 8) = v75;
    unint64_t *v71 = *v71 & 7 | (unint64_t)v75;
    *((void *)&v193 + 1) = 0;
    uint64_t v194 = 0;
    uint64_t v195 = 0;
    LODWORD(v193) = 0x1000000;
    DWORD1(v193) = v186;
    llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v193);
    goto LABEL_89;
  }
  return v15;
}

uint64_t sub_1CB85EA50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)a2;
  if ((*(unsigned __int8 *)(*(void *)a2 + 8) | 2) != 2) {
    return 0;
  }
  int v5 = a4;
  int v6 = a3;
  if (sub_1CB85EDF4(a1, a2, a3, a4)) {
    return 1;
  }
  BOOL v10 = *(unsigned char *)(v4 + 8) == 0;
  if (*(unsigned char *)(v4 + 8)) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v5 == 1;
  }
  BOOL v43 = v10;
  uint64_t v42 = *(unsigned char **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  unsigned int v41 = 0;
  int v12 = sub_1CB88467C((uint64_t)a1, (uint64_t *)&v42, (int *)&v41, &v43, v11, *(void *)(a2 + 40), 7, 1);
  BOOL v9 = v12 != 0;
  if (v12)
  {
    int v13 = v12;
    if (v11) {
      unsigned int v14 = 946;
    }
    else {
      unsigned int v14 = word_1CD91C0D0[2 * (v5 == 1) + v43];
    }
    uint64_t v15 = a1[4];
    uint64_t v16 = *(void *)(v15 + 640);
    uint64_t v17 = *(unint64_t **)(v15 + 648);
    uint64_t v18 = *(void *)(a1[12] + 8) + 48 * v14;
    int v19 = *(llvm::MachineFunction **)(v16 + 32);
    uint64_t v20 = (unsigned __int8 *)a1[9];
    int v39 = v20;
    if (v20) {
      llvm::MetadataTracking::track((uint64_t)&v39, v20, 2);
    }
    uint64_t v21 = llvm::MachineFunction::CreateMachineInstr(v19, v18, &v39, 0);
    if (!v39) {
      goto LABEL_15;
    }
    int v35 = *v39;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        int v38 = v39;
      }
      else {
        int v38 = 0;
      }
      if ((v35 - 3) < 0xFFFFFFFE)
      {
        if (v35 == 3) {
          *((void *)v39 + 1) = 0;
        }
        goto LABEL_15;
      }
      unint64_t v37 = (unint64_t)(v38 + 8);
    }
    else
    {
      if ((v39[1] & 0x7F) != 2 && !*((_DWORD *)v39 + 3)) {
        goto LABEL_15;
      }
      uint64_t v36 = *((void *)v39 + 2);
      if ((v36 & 4) == 0) {
        goto LABEL_15;
      }
      unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
      if (!v37) {
        goto LABEL_15;
      }
    }
    *(void *)&long long v44 = &v39;
    sub_1CC5FA668(v37 + 16, &v44);
LABEL_15:
    uint64_t v22 = *(void *)(v16 + 40);
    *((void *)v21 + 3) = v22;
    uint64_t v23 = *(void *)(v22 + 32);
    uint64_t v24 = *((unsigned int *)v21 + 10);
    if (v24)
    {
      uint64_t v28 = *((void *)v21 + 4);
      uint64_t v29 = *(void *)(v23 + 40);
      uint64_t v30 = 32 * v24;
      do
      {
        if (!*(unsigned char *)v28)
        {
          uint64_t v31 = *(unsigned int *)(v28 + 4);
          if ((int)v31 >= 0) {
            uint64_t v32 = (uint64_t *)(*(void *)(v29 + 272) + 8 * v31);
          }
          else {
            uint64_t v32 = (uint64_t *)(*(void *)(v29 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
          }
          uint64_t v33 = *v32;
          if (*v32)
          {
            uint64_t v34 = *(void *)(v33 + 16);
            *(void *)(v33 + 16) = v28;
            *(void *)(v28 + 16) = v34;
            if (*(unsigned char *)(v28 + 3))
            {
              *(void *)(v28 + 24) = v33;
            }
            else
            {
              *(void *)(v28 + 24) = 0;
              uint64_t v32 = (uint64_t *)(v34 + 24);
            }
          }
          else
          {
            *(void *)(v28 + 16) = v28;
            *(void *)(v28 + 24) = 0;
          }
          *uint64_t v32 = v28;
        }
        v28 += 32;
        v30 -= 32;
      }
      while (v30);
    }
    uint64_t v25 = *(void *)(v23 + 728);
    if (v25) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v25 + 24))(v25, v21);
    }
    unint64_t v26 = *v17 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v21 = v26 | *(void *)v21 & 7;
    *((void *)v21 + 1) = v17;
    *(void *)(v26 + 8) = v21;
    *uint64_t v17 = *v17 & 7 | (unint64_t)v21;
    *((void *)&v44 + 1) = 0;
    long long v45 = 0uLL;
    LODWORD(v44) = 0x1000000;
    DWORD1(v44) = v6;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v44);
    int v39 = (unsigned __int8 *)v19;
    __int16 v40 = v21;
    LODWORD(v44) = 1;
    *((void *)&v44 + 1) = 0;
    *(void *)&long long v45 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v44);
    if ((sub_1CB8843D8((uint64_t)a1, v42, v11, (llvm::MachineFunction **)&v39, 0) & 1) == 0)
    {
      *((void *)&v44 + 1) = 0;
      long long v45 = 0uLL;
      LODWORD(v44) = 0;
      DWORD1(v44) = v13;
      llvm::MachineInstr::addOperand(v40, (llvm::MachineFunction *)v39, (const llvm::MachineOperand *)&v44);
    }
    LODWORD(v44) = 1;
    *((void *)&v44 + 1) = 0;
    *(void *)&long long v45 = v41;
    llvm::MachineInstr::addOperand(v40, (llvm::MachineFunction *)v39, (const llvm::MachineOperand *)&v44);
    LODWORD(v44) = 1;
    *((void *)&v44 + 1) = 0;
    *(void *)&long long v45 = 0x100008000;
    llvm::MachineInstr::addOperand(v40, (llvm::MachineFunction *)v39, (const llvm::MachineOperand *)&v44);
    LODWORD(v44) = 1;
    *((void *)&v44 + 1) = 0;
    *(void *)&long long v45 = 0;
    llvm::MachineInstr::addOperand(v40, (llvm::MachineFunction *)v39, (const llvm::MachineOperand *)&v44);
    long long v44 = 0u;
    long long v45 = 0u;
    llvm::MachineInstr::addOperand(v40, (llvm::MachineFunction *)v39, (const llvm::MachineOperand *)&v44);
  }
  return v9;
}

uint64_t sub_1CB85EDF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0) {
    BOOL v9 = *(uint64_t **)(a2 - 8);
  }
  else {
    BOOL v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
  }
  uint64_t v10 = *v9;
  unsigned int v11 = *(unsigned __int8 *)(*v9 + 16);
  if (v10) {
    BOOL v12 = v11 >= 0x1C;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    if (*(void *)(v10 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if (v11 < 0x1C)
  {
    return 0;
  }
  uint64_t v13 = *(void *)(v10 + 8);
  if (!v13 || *(void *)(v13 + 8)) {
    return 0;
  }
  uint64_t v14 = sub_1CB88CBF4((uint64_t)a1, v10, *(void *)(v10 + 40));
  unsigned int v15 = *(unsigned __int8 *)(v14 + 16);
  if (!v14 || v15 < 0x1C) {
    return 0;
  }
  uint64_t v17 = *(void *)(v14 + 8);
  if (!v17) {
    return 0;
  }
  if (*(void *)(v17 + 8)) {
    return 0;
  }
  uint64_t v19 = v15 - 40;
  if (v19 > 0x2C) {
    return 0;
  }
  if (((1 << v19) & 0x255) != 0)
  {
    return sub_1CB88AA74((uint64_t)a1, (unsigned __int8 *)v14, a3, a4, 1u, 0);
  }
  if (v19 == 33)
  {
    if ((*(unsigned char *)(*(void *)v14 + 8) != 2) == a4)
    {
      return sub_1CB863AC4(a1, v14, a3, 1);
    }
    return 0;
  }
  if (v19 != 44) {
    return 0;
  }
  uint64_t v20 = *(void *)(v14 - 32);
  if (!v20
    || *(unsigned char *)(v20 + 16)
    || *(void *)(v20 + 24) != *(void *)(v14 + 72)
    || (*(unsigned char *)(v20 + 33) & 0x20) == 0)
  {
    return 0;
  }
  uint64_t v31 = (llvm *)v14;
  int v21 = *(_DWORD *)(v20 + 36);
  unsigned int v30 = v21;
  if (v21 > 1850)
  {
    unsigned int v25 = v21 - 1990;
    if (v25 <= 0x1A)
    {
      if (((1 << v25) & 3) != 0)
      {
        return sub_1CB861F38(a1, v14, a3, a4, 1);
      }
      if (((1 << v25) & 0xA00) != 0)
      {
        return sub_1CB862294(a1, v14, a3, a4, 1);
      }
      if (((1 << v25) & 0x6000000) != 0)
      {
        return sub_1CB863004(a1, v14, a3, a4, 1);
      }
    }
    if (v30 == 1851)
    {
      uint64_t v29 = *(unsigned char **)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF));
      return sub_1CD3CB7E4((uint64_t)a1, (uint64_t *)v14, v29, 0, a3, a4, 1, 1);
    }
  }
  else
  {
    if ((v21 - 1839) < 8)
    {
      uint64_t v34 = 0;
      unsigned int v33 = 0;
      sub_1CB859BA0(v21, (int *)&v34 + 1, (int *)&v34, (int *)&v33, &v32);
      uint64_t v23 = v34;
      uint64_t v22 = HIDWORD(v34);
      uint64_t v24 = v33;
      return sub_1CB861360((uint64_t)a1, (uint64_t)v31, a3, v22, v23, v24, a4, 1u);
    }
    if (v21 == 139)
    {
      return sub_1CB862C5C(a1, v14, a3, a4, 1u);
    }
    if (v21 == 1830)
    {
      return sub_1CB85EA50(a1, v14, a3, a4);
    }
  }
  if (*(unsigned char *)(a1[32] + 280)) {
    return 0;
  }
  uint64_t v26 = v14;
  if (!llvm::GetItrKind((llvm *)v30)) {
    return 0;
  }
  uint64_t v34 = 0;
  sub_1CB859BA0(v30, (int *)&v34 + 1, (int *)&v34, (int *)&v33, &v32);
  int v28 = v34;
  unsigned int v27 = HIDWORD(v34);

  return sub_1CD3CB450((uint64_t)a1, v26, a3, v27, v28, a4, 1);
}

uint64_t sub_1CB85F248(uint64_t a1, int a2)
{
  uint64_t v2 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (v2 == &off_1E66A4180 || v2 == &off_1E66A41C8) {
    return 0;
  }
  uint64_t v5 = 1;
  sub_1CD3CB380(a1, a2, 1);
  return v5;
}

uint64_t sub_1CB85F2B0(_UNKNOWN ***a1, int *a2, int *a3)
{
  *a2 = 0;
  *a3 = 0;
  if (a1 != &off_1E66A4548 && a1 != &off_1E66A4340 && a1 != &off_1E66A43C8)
  {
    BOOL v5 = a1 == &off_1E66A42B0 || a1 == &off_1E66A41C8;
    if (!v5 && a1 != &off_1E66A4180)
    {
      if (a1 != &off_1E66A4378)
      {
        if (a1 == &off_1E66A4990)
        {
          int v7 = 2;
        }
        else
        {
          int v7 = 3;
          int v8 = 1;
          if (a1 == &off_1E66A4690 || a1 == &off_1E66A46D8) {
            goto LABEL_31;
          }
          if (a1 != &off_1E66A4F00)
          {
            if (a1 != &off_1E66A4948)
            {
              if (a1 != &off_1E66A5470) {
                return 0;
              }
              int v7 = 4;
              goto LABEL_30;
            }
            int v7 = 4;
LABEL_31:
            *a2 = v8;
            goto LABEL_32;
          }
          int v7 = 3;
        }
LABEL_30:
        int v8 = 33;
        goto LABEL_31;
      }
      int v7 = 2;
      int v8 = 1;
      goto LABEL_31;
    }
  }
  int v7 = 1;
LABEL_32:
  *a3 = v7;
  return 1;
}

uint64_t sub_1CB85F3CC(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int *a5, _DWORD *a6)
{
  BOOL v12 = *(void **)(a1 + 48);
  unint64_t v13 = *(void *)(v12[3] + 16 * (*a5 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*v12 + 16) + 176))(*(void *)(*v12 + 16));
  unsigned int v15 = *(_DWORD *)(*(void *)(result + 264)
                  + 24
                  * (*(unsigned __int16 *)(*(void *)v13 + 24)
                   + *(_DWORD *)(result + 272)
                   * ((*(void *)(result + 248) - *(void *)(result + 240)) >> 3)));
  if (v15 == a3)
  {
    *a5 += a4;
    *a6 = 0;
  }
  else
  {
    *a5 += a4 * a3 / v15;
    if (a3 == 16) {
      int v16 = 1;
    }
    else {
      int v16 = 33;
    }
    if (v15 != a3 * a2) {
      a4 %= v15 / a3;
    }
    uint64_t v17 = a4 + v16;
    *a6 = v17;
    int v18 = *a5;
    return sub_1CD3CB380(a1, v18, v17);
  }
  return result;
}

uint64_t sub_1CB85F514(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = 0;
  if (a2)
  {
    if (!*(unsigned char *)(a1[32] + 280))
    {
      uint64_t v5 = 0;
      if (a4)
      {
        if (a5)
        {
          uint64_t v9 = *(void *)(a1[6] + 24);
          if ((_UNKNOWN ***)(*(void *)(v9 + 16 * (a4 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != &off_1E66A4F00
            || (_UNKNOWN ***)(*(void *)(v9 + 16 * (a5 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != &off_1E66A5470)
          {
            return 0;
          }
          uint64_t v5 = 0;
          BOOL v11 = !*(unsigned char *)(a3 + 60) && *(_DWORD *)(a3 + 48) == -1;
          BOOL v12 = v11 && *(unsigned char *)(a3 + 61) == 0;
          if (!v12 && *(_DWORD *)(a3 + 72) != -1)
          {
            uint64_t v13 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
            uint64_t v14 = *(unsigned int *)(a3 + 44);
            unsigned int v15 = *(unsigned __int8 **)(v13 + 32 * v14);
            if (*(_DWORD *)(a3 + 64) != -1) {
              LODWORD(v14) = v14 + 1;
            }
            int v16 = *(unsigned __int8 **)(v13 + 32 * (v14 + 1));
            uint64_t v17 = *(unsigned __int8 **)(v13 + 32 * (v14 + 2));
            int v18 = *(unsigned __int8 **)(v13 + 32 * (v14 + 3));
            int v19 = sub_1CB87DFFC(a1, v15);
            if (!v19) {
              return 0;
            }
            int v20 = v19;
            int v21 = sub_1CB87DFFC(a1, v16);
            if (!v21) {
              return 0;
            }
            int v22 = v21;
            int v23 = sub_1CB87DFFC(a1, v17);
            if (!v23) {
              return 0;
            }
            int v24 = v23;
            int v25 = sub_1CB87DFFC(a1, v18);
            if (!v25) {
              return 0;
            }
            int v26 = v25;
            uint64_t v27 = a1[6];
            int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, "", 0);
            *(void *)(*(void *)(v27 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A64C0;
            uint64_t v29 = *(void *)(v27 + 8);
            if (v29)
            {
              (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
              if (!IncompleteVirtualRegister) {
                return 0;
              }
            }
            else if (!IncompleteVirtualRegister)
            {
              return 0;
            }
            uint64_t v30 = a1[6];
            int v31 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, "", 0);
            *(void *)(*(void *)(v30 + 24) + 16 * (v31 & 0x7FFFFFFF)) = &off_1E66A5088;
            uint64_t v32 = *(void *)(v30 + 8);
            if (v32)
            {
              (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
              if (!v31) {
                return 0;
              }
            }
            else if (!v31)
            {
              return 0;
            }
            uint64_t v33 = a1[6];
            int v34 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v33, "", 0);
            *(void *)(*(void *)(v33 + 24) + 16 * (v34 & 0x7FFFFFFF)) = &off_1E66A60D8;
            uint64_t v35 = *(void *)(v33 + 8);
            if (v35)
            {
              int v129 = v34;
              (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
              int v34 = v129;
              if (v129)
              {
LABEL_29:
                int v152 = v34;
                int v153 = v31;
                int v154 = IncompleteVirtualRegister;
                uint64_t v36 = a1[4];
                uint64_t v37 = *(void *)(v36 + 640);
                uint64_t v150 = *(unint64_t **)(v36 + 648);
                uint64_t v38 = *(void *)(a1[12] + 8) + 864;
                int v39 = *(llvm::MachineFunction **)(v37 + 32);
                __int16 v40 = (unsigned __int8 *)a1[9];
                unint64_t v155 = v40;
                if (v40) {
                  llvm::MetadataTracking::track((uint64_t)&v155, v40, 2);
                }
                unsigned int v41 = llvm::MachineFunction::CreateMachineInstr(v39, v38, &v155, 0);
                if (!v155)
                {
LABEL_32:
                  uint64_t v42 = *(void *)(v37 + 40);
                  *((void *)v41 + 3) = v42;
                  uint64_t v43 = *(void *)(v42 + 32);
                  uint64_t v44 = *((unsigned int *)v41 + 10);
                  if (v44)
                  {
                    uint64_t v94 = *((void *)v41 + 4);
                    uint64_t v95 = *(void *)(v43 + 40);
                    uint64_t v96 = 32 * v44;
                    do
                    {
                      if (!*(unsigned char *)v94)
                      {
                        uint64_t v97 = *(unsigned int *)(v94 + 4);
                        if ((int)v97 >= 0) {
                          unint64_t v98 = (uint64_t *)(*(void *)(v95 + 272) + 8 * v97);
                        }
                        else {
                          unint64_t v98 = (uint64_t *)(*(void *)(v95 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v99 = *v98;
                        if (*v98)
                        {
                          uint64_t v100 = *(void *)(v99 + 16);
                          *(void *)(v99 + 16) = v94;
                          *(void *)(v94 + 16) = v100;
                          if (*(unsigned char *)(v94 + 3))
                          {
                            *(void *)(v94 + 24) = v99;
                          }
                          else
                          {
                            *(void *)(v94 + 24) = 0;
                            unint64_t v98 = (uint64_t *)(v100 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v94 + 16) = v94;
                          *(void *)(v94 + 24) = 0;
                        }
                        uint64_t *v98 = v94;
                      }
                      v94 += 32;
                      v96 -= 32;
                    }
                    while (v96);
                  }
                  uint64_t v45 = *(void *)(v43 + 728);
                  if (v45) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v45 + 24))(v45, v41);
                  }
                  unint64_t v46 = *v150 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unsigned int v41 = v46 | *(void *)v41 & 7;
                  *((void *)v41 + 1) = v150;
                  *(void *)(v46 + 8) = v41;
                  unint64_t *v150 = *v150 & 7 | (unint64_t)v41;
                  *((void *)&v156 + 1) = 0;
                  long long v157 = 0uLL;
                  LODWORD(v156) = 0x1000000;
                  DWORD1(v156) = v153;
                  llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v156);
                  *((void *)&v156 + 1) = 0;
                  long long v157 = 0uLL;
                  LODWORD(v156) = 0;
                  DWORD1(v156) = v20;
                  llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v156);
                  LODWORD(v156) = 1;
                  *((void *)&v156 + 1) = 0;
                  *(void *)&long long v157 = 33;
                  llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v156);
                  HIDWORD(v156) = 0;
                  long long v157 = 0uLL;
                  LODWORD(v156) = 0;
                  *(void *)((char *)&v156 + 4) = (v20 + 1);
                  llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v156);
                  LODWORD(v156) = 1;
                  *((void *)&v156 + 1) = 0;
                  *(void *)&long long v157 = 34;
                  llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v156);
                  HIDWORD(v156) = 0;
                  long long v157 = 0uLL;
                  LODWORD(v156) = 0;
                  *(void *)((char *)&v156 + 4) = (v20 + 2);
                  llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v156);
                  LODWORD(v156) = 1;
                  *((void *)&v156 + 1) = 0;
                  *(void *)&long long v157 = 35;
                  llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v156);
                  uint64_t v47 = a1[4];
                  uint64_t v48 = *(void *)(v47 + 640);
                  uint64_t v151 = *(unint64_t **)(v47 + 648);
                  uint64_t v49 = *(void *)(a1[12] + 8) + 864;
                  uint64_t v50 = *(llvm::MachineFunction **)(v48 + 32);
                  uint64_t v51 = (unsigned __int8 *)a1[9];
                  unint64_t v155 = v51;
                  if (v51) {
                    llvm::MetadataTracking::track((uint64_t)&v155, v51, 2);
                  }
                  unint64_t v52 = llvm::MachineFunction::CreateMachineInstr(v50, v49, &v155, 0);
                  if (!v155)
                  {
LABEL_38:
                    uint64_t v53 = *(void *)(v48 + 40);
                    *((void *)v52 + 3) = v53;
                    uint64_t v54 = *(void *)(v53 + 32);
                    uint64_t v55 = *((unsigned int *)v52 + 10);
                    if (v55)
                    {
                      uint64_t v101 = *((void *)v52 + 4);
                      uint64_t v102 = *(void *)(v54 + 40);
                      uint64_t v103 = 32 * v55;
                      do
                      {
                        if (!*(unsigned char *)v101)
                        {
                          uint64_t v104 = *(unsigned int *)(v101 + 4);
                          if ((int)v104 >= 0) {
                            uint64_t v105 = (uint64_t *)(*(void *)(v102 + 272) + 8 * v104);
                          }
                          else {
                            uint64_t v105 = (uint64_t *)(*(void *)(v102 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v106 = *v105;
                          if (*v105)
                          {
                            uint64_t v107 = *(void *)(v106 + 16);
                            *(void *)(v106 + 16) = v101;
                            *(void *)(v101 + 16) = v107;
                            if (*(unsigned char *)(v101 + 3))
                            {
                              *(void *)(v101 + 24) = v106;
                            }
                            else
                            {
                              *(void *)(v101 + 24) = 0;
                              uint64_t v105 = (uint64_t *)(v107 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v101 + 16) = v101;
                            *(void *)(v101 + 24) = 0;
                          }
                          *uint64_t v105 = v101;
                        }
                        v101 += 32;
                        v103 -= 32;
                      }
                      while (v103);
                    }
                    uint64_t v56 = *(void *)(v54 + 728);
                    if (v56) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v56 + 24))(v56, v52);
                    }
                    unint64_t v57 = *v151 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v52 = v57 | *(void *)v52 & 7;
                    *((void *)v52 + 1) = v151;
                    *(void *)(v57 + 8) = v52;
                    *uint64_t v151 = *v151 & 7 | (unint64_t)v52;
                    *((void *)&v156 + 1) = 0;
                    long long v157 = 0uLL;
                    LODWORD(v156) = 0x1000000;
                    DWORD1(v156) = v152;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    *((void *)&v156 + 1) = 0;
                    long long v157 = 0uLL;
                    LODWORD(v156) = 0;
                    DWORD1(v156) = v26;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    LODWORD(v156) = 1;
                    *((void *)&v156 + 1) = 0;
                    *(void *)&long long v157 = 33;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    HIDWORD(v156) = 0;
                    long long v157 = 0uLL;
                    LODWORD(v156) = 0;
                    *(void *)((char *)&v156 + 4) = (v26 + 1);
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    LODWORD(v156) = 1;
                    *((void *)&v156 + 1) = 0;
                    *(void *)&long long v157 = 34;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    *((void *)&v156 + 1) = 0;
                    long long v157 = 0uLL;
                    LODWORD(v156) = 0;
                    DWORD1(v156) = v22;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    LODWORD(v156) = 1;
                    *((void *)&v156 + 1) = 0;
                    *(void *)&long long v157 = 35;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    HIDWORD(v156) = 0;
                    long long v157 = 0uLL;
                    LODWORD(v156) = 0;
                    *(void *)((char *)&v156 + 4) = (v22 + 1);
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    LODWORD(v156) = 1;
                    *((void *)&v156 + 1) = 0;
                    *(void *)&long long v157 = 36;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    *((void *)&v156 + 1) = 0;
                    long long v157 = 0uLL;
                    LODWORD(v156) = 0;
                    DWORD1(v156) = v24;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    LODWORD(v156) = 1;
                    *((void *)&v156 + 1) = 0;
                    *(void *)&long long v157 = 37;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    HIDWORD(v156) = 0;
                    long long v157 = 0uLL;
                    LODWORD(v156) = 0;
                    *(void *)((char *)&v156 + 4) = (v24 + 1);
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    LODWORD(v156) = 1;
                    *((void *)&v156 + 1) = 0;
                    *(void *)&long long v157 = 38;
                    llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v156);
                    uint64_t v58 = a1[4];
                    uint64_t v59 = *(void *)(v58 + 640);
                    int v60 = *(unint64_t **)(v58 + 648);
                    uint64_t v61 = *(void *)(a1[12] + 8) + 499536;
                    unint64_t v62 = *(llvm::MachineFunction **)(v59 + 32);
                    int v63 = (unsigned __int8 *)a1[9];
                    unint64_t v155 = v63;
                    if (v63) {
                      llvm::MetadataTracking::track((uint64_t)&v155, v63, 2);
                    }
                    unsigned int v64 = llvm::MachineFunction::CreateMachineInstr(v62, v61, &v155, 0);
                    if (!v155)
                    {
LABEL_44:
                      uint64_t v65 = *(void *)(v59 + 40);
                      *((void *)v64 + 3) = v65;
                      uint64_t v66 = *(void *)(v65 + 32);
                      uint64_t v67 = *((unsigned int *)v64 + 10);
                      if (v67)
                      {
                        uint64_t v108 = *((void *)v64 + 4);
                        uint64_t v109 = *(void *)(v66 + 40);
                        uint64_t v110 = 32 * v67;
                        do
                        {
                          if (!*(unsigned char *)v108)
                          {
                            uint64_t v111 = *(unsigned int *)(v108 + 4);
                            if ((int)v111 >= 0) {
                              uint64_t v112 = (uint64_t *)(*(void *)(v109 + 272) + 8 * v111);
                            }
                            else {
                              uint64_t v112 = (uint64_t *)(*(void *)(v109 + 24) + 16 * (v111 & 0x7FFFFFFF) + 8);
                            }
                            uint64_t v113 = *v112;
                            if (*v112)
                            {
                              uint64_t v114 = *(void *)(v113 + 16);
                              *(void *)(v113 + 16) = v108;
                              *(void *)(v108 + 16) = v114;
                              if (*(unsigned char *)(v108 + 3))
                              {
                                *(void *)(v108 + 24) = v113;
                              }
                              else
                              {
                                *(void *)(v108 + 24) = 0;
                                uint64_t v112 = (uint64_t *)(v114 + 24);
                              }
                            }
                            else
                            {
                              *(void *)(v108 + 16) = v108;
                              *(void *)(v108 + 24) = 0;
                            }
                            *uint64_t v112 = v108;
                          }
                          v108 += 32;
                          v110 -= 32;
                        }
                        while (v110);
                      }
                      uint64_t v68 = *(void *)(v66 + 728);
                      if (v68) {
                        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v68 + 24))(v68, v64);
                      }
                      unint64_t v69 = *v60 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unsigned int v64 = v69 | *(void *)v64 & 7;
                      *((void *)v64 + 1) = v60;
                      *(void *)(v69 + 8) = v64;
                      *int v60 = *v60 & 7 | (unint64_t)v64;
                      *((void *)&v156 + 1) = 0;
                      long long v157 = 0uLL;
                      LODWORD(v156) = 0x1000000;
                      DWORD1(v156) = v154;
                      llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v156);
                      *((void *)&v156 + 1) = 0;
                      long long v157 = 0uLL;
                      LODWORD(v156) = 0;
                      DWORD1(v156) = v153;
                      llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v156);
                      *((void *)&v156 + 1) = 0;
                      long long v157 = 0uLL;
                      LODWORD(v156) = 0;
                      DWORD1(v156) = v152;
                      llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v156);
                      LODWORD(v156) = 1;
                      *((void *)&v156 + 1) = 0;
                      *(void *)&long long v157 = 0;
                      llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v156);
                      LODWORD(v156) = 1;
                      *((void *)&v156 + 1) = 0;
                      *(void *)&long long v157 = 0;
                      llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v156);
                      LODWORD(v156) = 1;
                      *((void *)&v156 + 1) = 0;
                      *(void *)&long long v157 = 0;
                      llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v156);
                      LODWORD(v156) = 1;
                      *((void *)&v156 + 1) = 0;
                      *(void *)&long long v157 = 0;
                      llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v156);
                      long long v156 = 0u;
                      long long v157 = 0u;
                      llvm::MachineInstr::addOperand(v64, v62, (const llvm::MachineOperand *)&v156);
                      uint64_t v70 = a1[4];
                      uint64_t v71 = *(void *)(v70 + 640);
                      uint64_t v72 = *(unint64_t **)(v70 + 648);
                      uint64_t v73 = *(void *)(a1[12] + 8) + 864;
                      uint64_t v74 = *(llvm::MachineFunction **)(v71 + 32);
                      uint64_t v75 = (unsigned __int8 *)a1[9];
                      unint64_t v155 = v75;
                      if (v75) {
                        llvm::MetadataTracking::track((uint64_t)&v155, v75, 2);
                      }
                      uint64_t v76 = llvm::MachineFunction::CreateMachineInstr(v74, v73, &v155, 0);
                      if (!v155)
                      {
LABEL_50:
                        uint64_t v77 = *(void *)(v71 + 40);
                        *((void *)v76 + 3) = v77;
                        uint64_t v78 = *(void *)(v77 + 32);
                        uint64_t v79 = *((unsigned int *)v76 + 10);
                        if (v79)
                        {
                          uint64_t v115 = *((void *)v76 + 4);
                          uint64_t v116 = *(void *)(v78 + 40);
                          uint64_t v117 = 32 * v79;
                          do
                          {
                            if (!*(unsigned char *)v115)
                            {
                              uint64_t v118 = *(unsigned int *)(v115 + 4);
                              if ((int)v118 >= 0) {
                                BOOL v119 = (uint64_t *)(*(void *)(v116 + 272) + 8 * v118);
                              }
                              else {
                                BOOL v119 = (uint64_t *)(*(void *)(v116 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
                              }
                              uint64_t v120 = *v119;
                              if (*v119)
                              {
                                uint64_t v121 = *(void *)(v120 + 16);
                                *(void *)(v120 + 16) = v115;
                                *(void *)(v115 + 16) = v121;
                                if (*(unsigned char *)(v115 + 3))
                                {
                                  *(void *)(v115 + 24) = v120;
                                }
                                else
                                {
                                  *(void *)(v115 + 24) = 0;
                                  BOOL v119 = (uint64_t *)(v121 + 24);
                                }
                              }
                              else
                              {
                                *(void *)(v115 + 16) = v115;
                                *(void *)(v115 + 24) = 0;
                              }
                              uint64_t *v119 = v115;
                            }
                            v115 += 32;
                            v117 -= 32;
                          }
                          while (v117);
                        }
                        uint64_t v80 = *(void *)(v78 + 728);
                        if (v80) {
                          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v80 + 24))(v80, v76);
                        }
                        unint64_t v81 = *v72 & 0xFFFFFFFFFFFFFFF8;
                        *(void *)uint64_t v76 = v81 | *(void *)v76 & 7;
                        *((void *)v76 + 1) = v72;
                        *(void *)(v81 + 8) = v76;
                        *uint64_t v72 = *v72 & 7 | (unint64_t)v76;
                        *((void *)&v156 + 1) = 0;
                        long long v157 = 0uLL;
                        LODWORD(v156) = 0x1000000;
                        DWORD1(v156) = a4;
                        llvm::MachineInstr::addOperand(v76, v74, (const llvm::MachineOperand *)&v156);
                        *((void *)&v156 + 1) = 0;
                        long long v157 = 0uLL;
                        LODWORD(v156) = 8448;
                        DWORD1(v156) = v154;
                        llvm::MachineInstr::addOperand(v76, v74, (const llvm::MachineOperand *)&v156);
                        LODWORD(v156) = 1;
                        *((void *)&v156 + 1) = 0;
                        *(void *)&long long v157 = 33;
                        llvm::MachineInstr::addOperand(v76, v74, (const llvm::MachineOperand *)&v156);
                        *((void *)&v156 + 1) = 0;
                        long long v157 = 0uLL;
                        LODWORD(v156) = 8704;
                        DWORD1(v156) = v154;
                        llvm::MachineInstr::addOperand(v76, v74, (const llvm::MachineOperand *)&v156);
                        LODWORD(v156) = 1;
                        *((void *)&v156 + 1) = 0;
                        *(void *)&long long v157 = 34;
                        llvm::MachineInstr::addOperand(v76, v74, (const llvm::MachineOperand *)&v156);
                        *((void *)&v156 + 1) = 0;
                        long long v157 = 0uLL;
                        LODWORD(v156) = 8960;
                        DWORD1(v156) = v154;
                        llvm::MachineInstr::addOperand(v76, v74, (const llvm::MachineOperand *)&v156);
                        LODWORD(v156) = 1;
                        *((void *)&v156 + 1) = 0;
                        *(void *)&long long v157 = 35;
                        llvm::MachineInstr::addOperand(v76, v74, (const llvm::MachineOperand *)&v156);
                        uint64_t v82 = a1[4];
                        uint64_t v83 = *(void *)(v82 + 640);
                        uint64_t v84 = *(unint64_t **)(v82 + 648);
                        uint64_t v85 = *(void *)(a1[12] + 8) + 864;
                        unint64_t v86 = *(llvm::MachineFunction **)(v83 + 32);
                        uint64_t v87 = (unsigned __int8 *)a1[9];
                        unint64_t v155 = v87;
                        if (v87) {
                          llvm::MetadataTracking::track((uint64_t)&v155, v87, 2);
                        }
                        uint64_t v88 = llvm::MachineFunction::CreateMachineInstr(v86, v85, &v155, 0);
                        if (!v155) {
                          goto LABEL_56;
                        }
                        int v142 = *v155;
                        if ((v142 - 4) > 0x1E)
                        {
                          if ((v142 - 3) >= 0xFFFFFFFE) {
                            uint64_t v149 = v155;
                          }
                          else {
                            uint64_t v149 = 0;
                          }
                          if ((v142 - 3) < 0xFFFFFFFE)
                          {
                            if (v142 == 3) {
                              *((void *)v155 + 1) = 0;
                            }
                            goto LABEL_56;
                          }
                          unint64_t v144 = (unint64_t)(v149 + 8);
                        }
                        else
                        {
                          if ((v155[1] & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
                            goto LABEL_56;
                          }
                          uint64_t v143 = *((void *)v155 + 2);
                          if ((v143 & 4) == 0) {
                            goto LABEL_56;
                          }
                          unint64_t v144 = v143 & 0xFFFFFFFFFFFFFFF8;
                          if (!v144) {
                            goto LABEL_56;
                          }
                        }
                        *(void *)&long long v156 = &v155;
                        sub_1CC5FA668(v144 + 16, &v156);
LABEL_56:
                        uint64_t v89 = *(void *)(v83 + 40);
                        *((void *)v88 + 3) = v89;
                        uint64_t v90 = *(void *)(v89 + 32);
                        uint64_t v91 = *((unsigned int *)v88 + 10);
                        if (v91)
                        {
                          uint64_t v122 = *((void *)v88 + 4);
                          uint64_t v123 = *(void *)(v90 + 40);
                          uint64_t v124 = 32 * v91;
                          do
                          {
                            if (!*(unsigned char *)v122)
                            {
                              uint64_t v125 = *(unsigned int *)(v122 + 4);
                              if ((int)v125 >= 0) {
                                uint64_t v126 = (uint64_t *)(*(void *)(v123 + 272) + 8 * v125);
                              }
                              else {
                                uint64_t v126 = (uint64_t *)(*(void *)(v123 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
                              }
                              uint64_t v127 = *v126;
                              if (*v126)
                              {
                                uint64_t v128 = *(void *)(v127 + 16);
                                *(void *)(v127 + 16) = v122;
                                *(void *)(v122 + 16) = v128;
                                if (*(unsigned char *)(v122 + 3))
                                {
                                  *(void *)(v122 + 24) = v127;
                                }
                                else
                                {
                                  *(void *)(v122 + 24) = 0;
                                  uint64_t v126 = (uint64_t *)(v128 + 24);
                                }
                              }
                              else
                              {
                                *(void *)(v122 + 16) = v122;
                                *(void *)(v122 + 24) = 0;
                              }
                              uint64_t *v126 = v122;
                            }
                            v122 += 32;
                            v124 -= 32;
                          }
                          while (v124);
                        }
                        uint64_t v92 = *(void *)(v90 + 728);
                        if (v92) {
                          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v92 + 24))(v92, v88);
                        }
                        unint64_t v93 = *v84 & 0xFFFFFFFFFFFFFFF8;
                        *(void *)uint64_t v88 = v93 | *(void *)v88 & 7;
                        *((void *)v88 + 1) = v84;
                        *(void *)(v93 + 8) = v88;
                        unint64_t *v84 = *v84 & 7 | (unint64_t)v88;
                        *((void *)&v156 + 1) = 0;
                        long long v157 = 0uLL;
                        LODWORD(v156) = 0x1000000;
                        DWORD1(v156) = a5;
                        llvm::MachineInstr::addOperand(v88, v86, (const llvm::MachineOperand *)&v156);
                        *((void *)&v156 + 1) = 0;
                        long long v157 = 0uLL;
                        LODWORD(v156) = 9216;
                        DWORD1(v156) = v154;
                        llvm::MachineInstr::addOperand(v88, v86, (const llvm::MachineOperand *)&v156);
                        uint64_t v5 = 1;
                        LODWORD(v156) = 1;
                        *((void *)&v156 + 1) = 0;
                        *(void *)&long long v157 = 33;
                        llvm::MachineInstr::addOperand(v88, v86, (const llvm::MachineOperand *)&v156);
                        *((void *)&v156 + 1) = 0;
                        long long v157 = 0uLL;
                        LODWORD(v156) = 9472;
                        DWORD1(v156) = v154;
                        llvm::MachineInstr::addOperand(v88, v86, (const llvm::MachineOperand *)&v156);
                        LODWORD(v156) = 1;
                        *((void *)&v156 + 1) = 0;
                        *(void *)&long long v157 = 34;
                        llvm::MachineInstr::addOperand(v88, v86, (const llvm::MachineOperand *)&v156);
                        *((void *)&v156 + 1) = 0;
                        long long v157 = 0uLL;
                        LODWORD(v156) = 9728;
                        DWORD1(v156) = v154;
                        llvm::MachineInstr::addOperand(v88, v86, (const llvm::MachineOperand *)&v156);
                        LODWORD(v156) = 1;
                        *((void *)&v156 + 1) = 0;
                        *(void *)&long long v157 = 35;
                        llvm::MachineInstr::addOperand(v88, v86, (const llvm::MachineOperand *)&v156);
                        *((void *)&v156 + 1) = 0;
                        long long v157 = 0uLL;
                        LODWORD(v156) = 9984;
                        DWORD1(v156) = v154;
                        llvm::MachineInstr::addOperand(v88, v86, (const llvm::MachineOperand *)&v156);
                        LODWORD(v156) = 1;
                        *((void *)&v156 + 1) = 0;
                        *(void *)&long long v157 = 36;
                        llvm::MachineInstr::addOperand(v88, v86, (const llvm::MachineOperand *)&v156);
                        return v5;
                      }
                      int v139 = *v155;
                      if ((v139 - 4) > 0x1E)
                      {
                        if ((v139 - 3) >= 0xFFFFFFFE) {
                          uint64_t v148 = v155;
                        }
                        else {
                          uint64_t v148 = 0;
                        }
                        if ((v139 - 3) < 0xFFFFFFFE)
                        {
                          if (v139 == 3) {
                            *((void *)v155 + 1) = 0;
                          }
                          goto LABEL_50;
                        }
                        unint64_t v141 = (unint64_t)(v148 + 8);
                      }
                      else
                      {
                        if ((v155[1] & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
                          goto LABEL_50;
                        }
                        uint64_t v140 = *((void *)v155 + 2);
                        if ((v140 & 4) == 0) {
                          goto LABEL_50;
                        }
                        unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFF8;
                        if (!v141) {
                          goto LABEL_50;
                        }
                      }
                      *(void *)&long long v156 = &v155;
                      sub_1CC5FA668(v141 + 16, &v156);
                      goto LABEL_50;
                    }
                    int v136 = *v155;
                    if ((v136 - 4) > 0x1E)
                    {
                      if ((v136 - 3) >= 0xFFFFFFFE) {
                        uint64_t v147 = v155;
                      }
                      else {
                        uint64_t v147 = 0;
                      }
                      if ((v136 - 3) < 0xFFFFFFFE)
                      {
                        if (v136 == 3) {
                          *((void *)v155 + 1) = 0;
                        }
                        goto LABEL_44;
                      }
                      unint64_t v138 = (unint64_t)(v147 + 8);
                    }
                    else
                    {
                      if ((v155[1] & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
                        goto LABEL_44;
                      }
                      uint64_t v137 = *((void *)v155 + 2);
                      if ((v137 & 4) == 0) {
                        goto LABEL_44;
                      }
                      unint64_t v138 = v137 & 0xFFFFFFFFFFFFFFF8;
                      if (!v138) {
                        goto LABEL_44;
                      }
                    }
                    *(void *)&long long v156 = &v155;
                    sub_1CC5FA668(v138 + 16, &v156);
                    goto LABEL_44;
                  }
                  int v133 = *v155;
                  if ((v133 - 4) > 0x1E)
                  {
                    if ((v133 - 3) >= 0xFFFFFFFE) {
                      uint64_t v146 = v155;
                    }
                    else {
                      uint64_t v146 = 0;
                    }
                    if ((v133 - 3) < 0xFFFFFFFE)
                    {
                      if (v133 == 3) {
                        *((void *)v155 + 1) = 0;
                      }
                      goto LABEL_38;
                    }
                    unint64_t v135 = (unint64_t)(v146 + 8);
                  }
                  else
                  {
                    if ((v155[1] & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
                      goto LABEL_38;
                    }
                    uint64_t v134 = *((void *)v155 + 2);
                    if ((v134 & 4) == 0) {
                      goto LABEL_38;
                    }
                    unint64_t v135 = v134 & 0xFFFFFFFFFFFFFFF8;
                    if (!v135) {
                      goto LABEL_38;
                    }
                  }
                  *(void *)&long long v156 = &v155;
                  sub_1CC5FA668(v135 + 16, &v156);
                  goto LABEL_38;
                }
                int v130 = *v155;
                if ((v130 - 4) > 0x1E)
                {
                  if ((v130 - 3) >= 0xFFFFFFFE) {
                    uint64_t v145 = v155;
                  }
                  else {
                    uint64_t v145 = 0;
                  }
                  if ((v130 - 3) < 0xFFFFFFFE)
                  {
                    if (v130 == 3) {
                      *((void *)v155 + 1) = 0;
                    }
                    goto LABEL_32;
                  }
                  unint64_t v132 = (unint64_t)(v145 + 8);
                }
                else
                {
                  if ((v155[1] & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
                    goto LABEL_32;
                  }
                  uint64_t v131 = *((void *)v155 + 2);
                  if ((v131 & 4) == 0) {
                    goto LABEL_32;
                  }
                  unint64_t v132 = v131 & 0xFFFFFFFFFFFFFFF8;
                  if (!v132) {
                    goto LABEL_32;
                  }
                }
                *(void *)&long long v156 = &v155;
                sub_1CC5FA668(v132 + 16, &v156);
                goto LABEL_32;
              }
            }
            else if (v34)
            {
              goto LABEL_29;
            }
            return 0;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_1CB8605EC(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  if (*(unsigned char *)(a1[32] + 280)) {
    return 0;
  }
  uint64_t IncompleteVirtualRegister = 0;
  if (a2)
  {
    if ((_UNKNOWN ***)(*(void *)(*(void *)(a1[6] + 24) + 16 * (a4 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66A4F00)
    {
      uint64_t IncompleteVirtualRegister = 0;
      if (a4)
      {
        uint64_t v8 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
        if (v8 >= 4)
        {
          uint64_t v9 = *(void *)(a2 - 32 * v8 + 32 * a3);
          if (*(unsigned char *)(v9 + 16) != 84) {
            goto LABEL_15;
          }
          uint64_t v10 = *(void *)(v9 - 32);
          if (!v10
            || *(unsigned char *)(v10 + 16)
            || *(void *)(v10 + 24) != *(void *)(v9 + 72)
            || (*(unsigned char *)(v10 + 33) & 0x20) == 0)
          {
            goto LABEL_15;
          }
          uint64_t v11 = *(unsigned int *)(v10 + 36);
          int v114 = 0;
          int v112 = 0;
          sub_1CB859BA0(v11, (int *)&v115, &v114, &v113, &v112);
          LODWORD(v12) = 0;
          if (v112 == 398)
          {
            uint64_t v13 = a1[34];
            if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 176))(v13, 18))
            {
LABEL_15:
              LODWORD(v12) = 0;
              goto LABEL_16;
            }
            (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 128))(&v116, v13, 18);
            uint64_t v12 = *(void *)(*(uint64_t (**)(void))(*(void *)v116 + 32))(v116);
            uint64_t v69 = v116;
            *(void *)&long long v116 = 0;
            if (v69) {
              (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
            }
            if (v12)
            {
              uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)a1[34] + 336))(a1[34]);
              unsigned int v71 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v70 + 24))(v70, 16);
              LODWORD(v12) = sub_1CB859FD0((uint64_t)a1, *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)), a1[34], v72, v73, v74, v75);
              int v80 = sub_1CB859FD0((uint64_t)a1, *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32), a1[34], v76, v77, v78, v79);
              uint64_t v81 = a1[34];
              if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v81 + 176))(v81, 18))
              {
                (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v81 + 128))(&v116, v81, 18);
                uint64_t v82 = *(void *)(*(uint64_t (**)(void))(*(void *)v116 + 32))(v116);
                uint64_t v98 = v116;
                *(void *)&long long v116 = 0;
                if (v98) {
                  (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
                }
              }
              else
              {
                uint64_t v82 = 0;
              }
              int v83 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v81 + 400))(v81, v82);
              if (v12 != -1 && v80 == v71 * v83)
              {
                int v32 = 0;
                LODWORD(IncompleteVirtualRegister) = 0;
                uint64_t v33 = qword_1CD91CA78[v114];
                LODWORD(v12) = v12 / v71;
                goto LABEL_33;
              }
            }
          }
LABEL_16:
          int v14 = sub_1CB87DFFC(a1, (unsigned __int8 *)v9);
          if (!v14) {
            return 0;
          }
          int v15 = v14;
          uint64_t v16 = a1[6];
          uint64_t v17 = (_UNKNOWN ***)(*(void *)(*(void *)(v16 + 24) + 16 * (v14 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          if (v17 != &off_1E66A5088)
          {
            if (v17 != &off_1E66A4340 && v17 != &off_1E66A43C8) {
              return 0;
            }
            uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1[6], "", 0);
            *(void *)(*(void *)(v16 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A5088;
            uint64_t v19 = *(void *)(v16 + 8);
            if (v19)
            {
              (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
              if (!IncompleteVirtualRegister) {
                return IncompleteVirtualRegister;
              }
            }
            else if (!IncompleteVirtualRegister)
            {
              return IncompleteVirtualRegister;
            }
            uint64_t v20 = a1[4];
            uint64_t v21 = *(void *)(v20 + 640);
            int v22 = *(unint64_t **)(v20 + 648);
            uint64_t v23 = *(void *)(a1[12] + 8) + 864;
            int v24 = *(llvm::MachineFunction **)(v21 + 32);
            int v25 = (unsigned __int8 *)a1[9];
            uint64_t v115 = v25;
            if (v25) {
              llvm::MetadataTracking::track((uint64_t)&v115, v25, 2);
            }
            int v26 = llvm::MachineFunction::CreateMachineInstr(v24, v23, &v115, 0);
            if (!v115) {
              goto LABEL_28;
            }
            int v99 = *v115;
            if ((v99 - 4) > 0x1E)
            {
              if ((v99 - 3) >= 0xFFFFFFFE) {
                uint64_t v102 = v115;
              }
              else {
                uint64_t v102 = 0;
              }
              if ((v99 - 3) < 0xFFFFFFFE)
              {
                if (v99 == 3) {
                  *((void *)v115 + 1) = 0;
                }
                goto LABEL_28;
              }
              unint64_t v101 = (unint64_t)(v102 + 8);
            }
            else
            {
              if ((v115[1] & 0x7F) != 2 && !*((_DWORD *)v115 + 3)) {
                goto LABEL_28;
              }
              uint64_t v100 = *((void *)v115 + 2);
              if ((v100 & 4) == 0) {
                goto LABEL_28;
              }
              unint64_t v101 = v100 & 0xFFFFFFFFFFFFFFF8;
              if (!v101) {
                goto LABEL_28;
              }
            }
            *(void *)&long long v116 = &v115;
            sub_1CC5FA668(v101 + 16, &v116);
LABEL_28:
            uint64_t v27 = *(void *)(v21 + 40);
            *((void *)v26 + 3) = v27;
            uint64_t v28 = *(void *)(v27 + 32);
            uint64_t v29 = *((unsigned int *)v26 + 10);
            if (v29)
            {
              uint64_t v62 = *((void *)v26 + 4);
              uint64_t v63 = *(void *)(v28 + 40);
              uint64_t v64 = 32 * v29;
              do
              {
                if (!*(unsigned char *)v62)
                {
                  uint64_t v65 = *(unsigned int *)(v62 + 4);
                  if ((int)v65 >= 0) {
                    uint64_t v66 = (uint64_t *)(*(void *)(v63 + 272) + 8 * v65);
                  }
                  else {
                    uint64_t v66 = (uint64_t *)(*(void *)(v63 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v67 = *v66;
                  if (*v66)
                  {
                    uint64_t v68 = *(void *)(v67 + 16);
                    *(void *)(v67 + 16) = v62;
                    *(void *)(v62 + 16) = v68;
                    if (*(unsigned char *)(v62 + 3))
                    {
                      *(void *)(v62 + 24) = v67;
                    }
                    else
                    {
                      *(void *)(v62 + 24) = 0;
                      uint64_t v66 = (uint64_t *)(v68 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v62 + 16) = v62;
                    *(void *)(v62 + 24) = 0;
                  }
                  uint64_t *v66 = v62;
                }
                v62 += 32;
                v64 -= 32;
              }
              while (v64);
            }
            uint64_t v30 = *(void *)(v28 + 728);
            if (v30) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v30 + 24))(v30, v26);
            }
            unint64_t v31 = *v22 & 0xFFFFFFFFFFFFFFF8;
            *(void *)int v26 = v31 | *(void *)v26 & 7;
            *((void *)v26 + 1) = v22;
            *(void *)(v31 + 8) = v26;
            *int v22 = *v22 & 7 | (unint64_t)v26;
            *((void *)&v116 + 1) = 0;
            long long v117 = 0uLL;
            LODWORD(v116) = 0x1000000;
            DWORD1(v116) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v116);
            *((void *)&v116 + 1) = 0;
            long long v117 = 0uLL;
            LODWORD(v116) = 0;
            DWORD1(v116) = v15;
            llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v116);
            int v32 = 1;
            LODWORD(v116) = 1;
            *((void *)&v116 + 1) = 0;
            *(void *)&long long v117 = 33;
            llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v116);
            HIDWORD(v116) = 0;
            long long v117 = 0uLL;
            LODWORD(v116) = 0;
            *(void *)((char *)&v116 + 4) = (v15 + 1);
            llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v116);
            LODWORD(v116) = 1;
            *((void *)&v116 + 1) = 0;
            *(void *)&long long v117 = 34;
            llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v116);
            HIDWORD(v116) = 0;
            long long v117 = 0uLL;
            LODWORD(v116) = 0;
            *(void *)((char *)&v116 + 4) = (v15 + 2);
            llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v116);
            LODWORD(v116) = 1;
            *((void *)&v116 + 1) = 0;
            *(void *)&long long v117 = 35;
            llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v116);
            uint64_t v33 = 10421;
            goto LABEL_33;
          }
          int v32 = 1;
          uint64_t v33 = 10421;
          LODWORD(IncompleteVirtualRegister) = v14;
LABEL_33:
          uint64_t v34 = a1[6];
          int v35 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v34, "", 0);
          *(void *)(*(void *)(v34 + 24) + 16 * (v35 & 0x7FFFFFFF)) = &off_1E66A4C00;
          uint64_t v36 = *(void *)(v34 + 8);
          if (v36)
          {
            (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
            if (!v35) {
              return 0;
            }
          }
          else if (!v35)
          {
            return 0;
          }
          int v37 = sub_1CD3CAE48((uint64_t)a1, 1, 1);
          if (v37)
          {
            int v111 = v37;
            uint64_t v38 = a1[4];
            uint64_t v39 = *(void *)(v38 + 640);
            __int16 v40 = *(unint64_t **)(v38 + 648);
            uint64_t v41 = *(void *)(a1[12] + 8) + 48 * v33;
            uint64_t v42 = *(llvm::MachineFunction **)(v39 + 32);
            uint64_t v43 = (unsigned __int8 *)a1[9];
            uint64_t v115 = v43;
            if (v43) {
              llvm::MetadataTracking::track((uint64_t)&v115, v43, 2);
            }
            uint64_t v44 = llvm::MachineFunction::CreateMachineInstr(v42, v41, &v115, 0);
            if (!v115)
            {
LABEL_39:
              uint64_t v45 = *(void *)(v39 + 40);
              *((void *)v44 + 3) = v45;
              uint64_t v46 = *(void *)(v45 + 32);
              uint64_t v47 = *((unsigned int *)v44 + 10);
              if (v47)
              {
                uint64_t v84 = *((void *)v44 + 4);
                uint64_t v85 = *(void *)(v46 + 40);
                uint64_t v86 = 32 * v47;
                do
                {
                  if (!*(unsigned char *)v84)
                  {
                    uint64_t v87 = *(unsigned int *)(v84 + 4);
                    if ((int)v87 >= 0) {
                      uint64_t v88 = (uint64_t *)(*(void *)(v85 + 272) + 8 * v87);
                    }
                    else {
                      uint64_t v88 = (uint64_t *)(*(void *)(v85 + 24) + 16 * (v87 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v89 = *v88;
                    if (*v88)
                    {
                      uint64_t v90 = *(void *)(v89 + 16);
                      *(void *)(v89 + 16) = v84;
                      *(void *)(v84 + 16) = v90;
                      if (*(unsigned char *)(v84 + 3))
                      {
                        *(void *)(v84 + 24) = v89;
                      }
                      else
                      {
                        *(void *)(v84 + 24) = 0;
                        uint64_t v88 = (uint64_t *)(v90 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v84 + 16) = v84;
                      *(void *)(v84 + 24) = 0;
                    }
                    *uint64_t v88 = v84;
                  }
                  v84 += 32;
                  v86 -= 32;
                }
                while (v86);
              }
              uint64_t v48 = *(void *)(v46 + 728);
              if (v48) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v48 + 24))(v48, v44);
              }
              unint64_t v49 = *v40 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v44 = v49 | *(void *)v44 & 7;
              *((void *)v44 + 1) = v40;
              *(void *)(v49 + 8) = v44;
              unint64_t *v40 = *v40 & 7 | (unint64_t)v44;
              *((void *)&v116 + 1) = 0;
              long long v117 = 0uLL;
              LODWORD(v116) = 0x1000000;
              DWORD1(v116) = v35;
              llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v116);
              if (v32)
              {
                *((void *)&v116 + 1) = 0;
                long long v117 = 0uLL;
                LODWORD(v116) = 0;
                DWORD1(v116) = IncompleteVirtualRegister;
              }
              else
              {
                LODWORD(v116) = 1;
                *((void *)&v116 + 1) = 0;
                *(void *)&long long v117 = v12;
              }
              llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v116);
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 0;
              llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v116);
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 0;
              llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v116);
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 0;
              llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v116);
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 0;
              llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v116);
              long long v116 = 0u;
              long long v117 = 0u;
              llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v116);
              uint64_t v50 = a1[4];
              uint64_t v51 = *(void *)(v50 + 640);
              unint64_t v52 = *(unint64_t **)(v50 + 648);
              uint64_t v53 = *(void *)(a1[12] + 8) + 864;
              uint64_t v54 = *(llvm::MachineFunction **)(v51 + 32);
              uint64_t v55 = (unsigned __int8 *)a1[9];
              uint64_t v115 = v55;
              if (v55) {
                llvm::MetadataTracking::track((uint64_t)&v115, v55, 2);
              }
              uint64_t v56 = llvm::MachineFunction::CreateMachineInstr(v54, v53, &v115, 0);
              if (!v115) {
                goto LABEL_50;
              }
              int v106 = *v115;
              if ((v106 - 4) > 0x1E)
              {
                if ((v106 - 3) >= 0xFFFFFFFE) {
                  uint64_t v110 = v115;
                }
                else {
                  uint64_t v110 = 0;
                }
                if ((v106 - 3) < 0xFFFFFFFE)
                {
                  if (v106 == 3) {
                    *((void *)v115 + 1) = 0;
                  }
                  goto LABEL_50;
                }
                unint64_t v108 = (unint64_t)(v110 + 8);
              }
              else
              {
                if ((v115[1] & 0x7F) != 2 && !*((_DWORD *)v115 + 3)) {
                  goto LABEL_50;
                }
                uint64_t v107 = *((void *)v115 + 2);
                if ((v107 & 4) == 0) {
                  goto LABEL_50;
                }
                unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
                if (!v108) {
                  goto LABEL_50;
                }
              }
              *(void *)&long long v116 = &v115;
              sub_1CC5FA668(v108 + 16, &v116);
LABEL_50:
              uint64_t v57 = *(void *)(v51 + 40);
              *((void *)v56 + 3) = v57;
              uint64_t v58 = *(void *)(v57 + 32);
              uint64_t v59 = *((unsigned int *)v56 + 10);
              if (v59)
              {
                uint64_t v91 = *((void *)v56 + 4);
                uint64_t v92 = *(void *)(v58 + 40);
                uint64_t v93 = 32 * v59;
                do
                {
                  if (!*(unsigned char *)v91)
                  {
                    uint64_t v94 = *(unsigned int *)(v91 + 4);
                    if ((int)v94 >= 0) {
                      uint64_t v95 = (uint64_t *)(*(void *)(v92 + 272) + 8 * v94);
                    }
                    else {
                      uint64_t v95 = (uint64_t *)(*(void *)(v92 + 24) + 16 * (v94 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v96 = *v95;
                    if (*v95)
                    {
                      uint64_t v97 = *(void *)(v96 + 16);
                      *(void *)(v96 + 16) = v91;
                      *(void *)(v91 + 16) = v97;
                      if (*(unsigned char *)(v91 + 3))
                      {
                        *(void *)(v91 + 24) = v96;
                      }
                      else
                      {
                        *(void *)(v91 + 24) = 0;
                        uint64_t v95 = (uint64_t *)(v97 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v91 + 16) = v91;
                      *(void *)(v91 + 24) = 0;
                    }
                    *uint64_t v95 = v91;
                  }
                  v91 += 32;
                  v93 -= 32;
                }
                while (v93);
              }
              uint64_t v60 = *(void *)(v58 + 728);
              if (v60) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v60 + 24))(v60, v56);
              }
              unint64_t v61 = *v52 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v56 = v61 | *(void *)v56 & 7;
              *((void *)v56 + 1) = v52;
              *(void *)(v61 + 8) = v56;
              unint64_t *v52 = *v52 & 7 | (unint64_t)v56;
              *((void *)&v116 + 1) = 0;
              long long v117 = 0uLL;
              LODWORD(v116) = 0x1000000;
              DWORD1(v116) = a4;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              *((void *)&v116 + 1) = 0;
              long long v117 = 0uLL;
              LODWORD(v116) = 256;
              DWORD1(v116) = v35;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              uint64_t IncompleteVirtualRegister = 1;
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 1;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              *((void *)&v116 + 1) = 0;
              long long v117 = 0uLL;
              LODWORD(v116) = 512;
              DWORD1(v116) = v35;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 2;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              *((void *)&v116 + 1) = 0;
              long long v117 = 0uLL;
              LODWORD(v116) = 768;
              DWORD1(v116) = v35;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 3;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              *((void *)&v116 + 1) = 0;
              long long v117 = 0uLL;
              LODWORD(v116) = 1024;
              DWORD1(v116) = v35;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 4;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              *((void *)&v116 + 1) = 0;
              long long v117 = 0uLL;
              LODWORD(v116) = 1280;
              DWORD1(v116) = v35;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 5;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              *((void *)&v116 + 1) = 0;
              long long v117 = 0uLL;
              LODWORD(v116) = 0;
              DWORD1(v116) = v111;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              LODWORD(v116) = 1;
              *((void *)&v116 + 1) = 0;
              *(void *)&long long v117 = 6;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v116);
              return IncompleteVirtualRegister;
            }
            int v103 = *v115;
            if ((v103 - 4) > 0x1E)
            {
              if ((v103 - 3) >= 0xFFFFFFFE) {
                uint64_t v109 = v115;
              }
              else {
                uint64_t v109 = 0;
              }
              if ((v103 - 3) < 0xFFFFFFFE)
              {
                if (v103 == 3) {
                  *((void *)v115 + 1) = 0;
                }
                goto LABEL_39;
              }
              unint64_t v105 = (unint64_t)(v109 + 8);
            }
            else
            {
              if ((v115[1] & 0x7F) != 2 && !*((_DWORD *)v115 + 3)) {
                goto LABEL_39;
              }
              uint64_t v104 = *((void *)v115 + 2);
              if ((v104 & 4) == 0) {
                goto LABEL_39;
              }
              unint64_t v105 = v104 & 0xFFFFFFFFFFFFFFF8;
              if (!v105) {
                goto LABEL_39;
              }
            }
            *(void *)&long long v116 = &v115;
            sub_1CC5FA668(v105 + 16, &v116);
            goto LABEL_39;
          }
          return 0;
        }
      }
    }
  }
  return IncompleteVirtualRegister;
}

uint64_t sub_1CB861360(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  int v62 = a6;
  if (!*(unsigned char *)(*(void *)(a1 + 256) + 280)) {
    return 0;
  }
  int v9 = a7;
  unsigned int v10 = a5;
  unsigned int v11 = a4;
  unsigned int v14 = sub_1CB859FD0(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32), *(void *)(a1 + 272), a4, a5, a6, a7);
  if (v14 == -1) {
    return 0;
  }
  unsigned int v19 = v14;
  if (v62 == 1)
  {
    unsigned int v20 = sub_1CB859FD0(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64), *(void *)(a1 + 272), v15, v16, v17, v18);
    if (v20 == -1) {
      return 0;
    }
    uint64_t v57 = v20 >> 2;
  }
  else
  {
    uint64_t v57 = 0;
  }
  unsigned int v59 = a8;
  if (v9 == 1)
  {
    if (v11)
    {
      uint64_t v21 = v11;
      int v22 = a3;
      uint64_t v23 = (a3 & ~(a3 >> 31)) - a3;
      while (v23)
      {
        sub_1CC38D61C(*(void **)(a1 + 48), v22, *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A41C8, 0);
        ++v22;
        --v23;
        if (!--v21) {
          goto LABEL_17;
        }
      }
      return 0;
    }
  }
  else if (v11)
  {
    uint64_t v24 = v11;
    int v25 = a3;
    uint64_t v26 = (a3 & ~(a3 >> 31)) - a3;
    while (v26)
    {
      sub_1CC38D61C(*(void **)(a1 + 48), v25, *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v25 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A43C8, 0);
      ++v25;
      --v26;
      if (!--v24) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  if (v10 == -1)
  {
    uint64_t v27 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (v27) {
      BOOL v28 = *(unsigned char *)(v27 + 16) == 16;
    }
    else {
      BOOL v28 = 0;
    }
    if (!v28) {
      return 0;
    }
    uint64_t v29 = (void *)(v27 + 24);
    if (*(_DWORD *)(v27 + 32) >= 0x41u) {
      uint64_t v29 = (void *)*v29;
    }
    unsigned int v10 = *(_DWORD *)v29;
  }
  if (v10 > 3) {
    return 0;
  }
  uint64_t v30 = (uint64_t)*(&off_1E66A3BF8 + (int)v10);
  qword_1EA6189E0 = v30;
  uint64_t v31 = 1;
  if (v11)
  {
    uint64_t v32 = 0;
    unsigned int v60 = *(unsigned __int16 *)(v30 + 8 * (v9 == 0) + 4 * v59 + 2 * (v62 == 1));
    uint64_t v58 = v11;
    while (1)
    {
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = *(void *)(v33 + 640);
      int v35 = *(unint64_t **)(v33 + 648);
      uint64_t v36 = *(void *)(*(void *)(a1 + 96) + 8);
      int v37 = *(llvm::MachineFunction **)(v34 + 32);
      uint64_t v38 = *(unsigned __int8 **)(a1 + 72);
      uint64_t v63 = v38;
      if (v38) {
        llvm::MetadataTracking::track((uint64_t)&v63, v38, 2);
      }
      uint64_t v39 = llvm::MachineFunction::CreateMachineInstr(v37, v36 + 48 * v60, &v63, 0);
      if (!v63) {
        goto LABEL_32;
      }
      int v52 = *v63;
      if ((v52 - 4) > 0x1E)
      {
        if ((v52 - 3) >= 0xFFFFFFFE) {
          uint64_t v55 = v63;
        }
        else {
          uint64_t v55 = 0;
        }
        if ((v52 - 3) < 0xFFFFFFFE)
        {
          if (v52 == 3) {
            *((void *)v63 + 1) = 0;
          }
          goto LABEL_32;
        }
        unint64_t v54 = (unint64_t)(v55 + 8);
      }
      else
      {
        if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
          goto LABEL_32;
        }
        uint64_t v53 = *((void *)v63 + 2);
        if ((v53 & 4) == 0) {
          goto LABEL_32;
        }
        unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF8;
        if (!v54) {
          goto LABEL_32;
        }
      }
      *(void *)&long long v64 = &v63;
      sub_1CC5FA668(v54 + 16, &v64);
LABEL_32:
      uint64_t v40 = *(void *)(v34 + 40);
      *((void *)v39 + 3) = v40;
      uint64_t v41 = *(void *)(v40 + 32);
      uint64_t v42 = *((unsigned int *)v39 + 10);
      if (v42)
      {
        uint64_t v45 = *((void *)v39 + 4);
        uint64_t v46 = *(void *)(v41 + 40);
        uint64_t v47 = 32 * v42;
        do
        {
          if (!*(unsigned char *)v45)
          {
            uint64_t v48 = *(unsigned int *)(v45 + 4);
            if ((int)v48 >= 0) {
              unint64_t v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v48);
            }
            else {
              unint64_t v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
            }
            uint64_t v50 = *v49;
            if (*v49)
            {
              uint64_t v51 = *(void *)(v50 + 16);
              *(void *)(v50 + 16) = v45;
              *(void *)(v45 + 16) = v51;
              if (*(unsigned char *)(v45 + 3))
              {
                *(void *)(v45 + 24) = v50;
              }
              else
              {
                *(void *)(v45 + 24) = 0;
                unint64_t v49 = (uint64_t *)(v51 + 24);
              }
            }
            else
            {
              *(void *)(v45 + 16) = v45;
              *(void *)(v45 + 24) = 0;
            }
            *unint64_t v49 = v45;
          }
          v45 += 32;
          v47 -= 32;
        }
        while (v47);
      }
      uint64_t v43 = *(void *)(v41 + 728);
      if (v43) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v43 + 24))(v43, v39);
      }
      unint64_t v44 = *v35 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v39 = v44 | *(void *)v39 & 7;
      *((void *)v39 + 1) = v35;
      *(void *)(v44 + 8) = v39;
      *int v35 = *v35 & 7 | (unint64_t)v39;
      HIDWORD(v64) = 0;
      long long v65 = 0uLL;
      *(void *)((char *)&v64 + 4) = (v32 + a3);
      LODWORD(v64) = 0x1000000;
      llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v64);
      LODWORD(v64) = 1;
      *((void *)&v64 + 1) = 0;
      *(void *)&long long v65 = (v19 >> 2) + 4 * v32;
      llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v64);
      if (v62 == 1)
      {
        LODWORD(v64) = 1;
        *((void *)&v64 + 1) = 0;
        *(void *)&long long v65 = v57;
        llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v64);
      }
      LODWORD(v64) = 1;
      *((void *)&v64 + 1) = 0;
      *(void *)&long long v65 = 0;
      llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v64);
      LODWORD(v64) = 1;
      *((void *)&v64 + 1) = 0;
      *(void *)&long long v65 = 0;
      llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v64);
      long long v64 = 0u;
      long long v65 = 0u;
      llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v64);
      if (++v32 == v58) {
        return 1;
      }
    }
  }
  return v31;
}

uint64_t sub_1CB861840(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned int a5)
{
  if ((a4 & 1) == 0 && !*(unsigned char *)(a1 + 280)) {
    return 0;
  }
  int v9 = *(_DWORD *)(a2 + 20);
  uint64_t v10 = (v9 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v9 & 0x7FFFFFF);
  uint64_t v11 = *(void *)(*(void *)v10 + 8);
  if (!v11 || *(void *)(v11 + 8)) {
    return 0;
  }
  BOOL v13 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
  unsigned int v14 = (v9 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
  if (sub_1CD789364(a1, *v14)) {
    return 0;
  }
  int v15 = *(_DWORD *)(a2 + 20);
  if ((v15 & 0x40000000) != 0) {
    uint64_t v16 = *(uint64_t **)(a2 - 8);
  }
  else {
    uint64_t v16 = (uint64_t *)(a2 - 32 * (v15 & 0x7FFFFFF));
  }
  uint64_t v17 = *v16;
  unsigned int v18 = *(unsigned __int8 *)(*v16 + 16);
  if (v17 && v18 >= 0x1C)
  {
    if (*(void *)(v17 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if (v18 < 0x1C)
  {
    return 0;
  }
  uint64_t v19 = v18 - 40;
  if (v19 > 0x2C) {
    return 0;
  }
  if (((1 << v19) & 0x255) != 0)
  {
    return sub_1CB88AA74(a1, (unsigned __int8 *)v17, a3, v13, a5, 0);
  }
  if (((1 << v19) & 0x180000000) != 0)
  {
    if (a5 != 1)
    {
      return sub_1CB866354((uint64_t *)a1, v17, a3, v13);
    }
    return 0;
  }
  if (v19 != 44) {
    return 0;
  }
  uint64_t v20 = *(void *)(v17 - 32);
  if (!v20
    || *(unsigned char *)(v20 + 16)
    || *(void *)(v20 + 24) != *(void *)(v17 + 72)
    || (*(unsigned char *)(v20 + 33) & 0x20) == 0)
  {
    return 0;
  }
  uint64_t v21 = *(unsigned int *)(v20 + 36);
  if ((int)v21 > 1826)
  {
    if ((int)v21 <= 1998)
    {
      switch((int)v21)
      {
        case 1827:
          if (a5 == 1) {
            return 0;
          }
          uint64_t v26 = *(unsigned char **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
          uint64_t v27 = a1;
          int v28 = a3;
          int v29 = 445;
          goto LABEL_102;
        case 1828:
        case 1829:
        case 1831:
        case 1832:
        case 1833:
        case 1834:
        case 1835:
        case 1836:
        case 1837:
        case 1838:
        case 1847:
        case 1848:
        case 1849:
        case 1850:
          return 0;
        case 1830:
          return sub_1CB85EA50((void *)a1, v17, a3, v13);
        case 1839:
        case 1840:
        case 1841:
        case 1842:
        case 1843:
        case 1844:
        case 1845:
        case 1846:
          uint64_t v35 = 0;
          unsigned int v34 = 0;
          uint64_t v22 = v17;
          sub_1CB859BA0(v21, (int *)&v35 + 1, (int *)&v35, (int *)&v34, &v33);
          uint64_t v24 = v35;
          uint64_t v23 = HIDWORD(v35);
          uint64_t v25 = v34;
          return sub_1CB861360(a1, v22, a3, v23, v24, v25, v13, a5);
        case 1851:
          uint64_t v32 = *(unsigned char **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
          return sub_1CD3CB7E4(a1, (uint64_t *)v17, v32, 0, a3, v13, 1, 1);
        default:
          if ((v21 - 1990) >= 2) {
            return 0;
          }
          return sub_1CB861F38((void *)a1, v17, a3, v13, a5);
      }
    }
    switch((int)v21)
    {
      case 2093:
      case 2095:
        if (a5 == 1) {
          return 0;
        }
        if (v21 == 2095) {
          unsigned int v30 = 6;
        }
        else {
          unsigned int v30 = 7;
        }
        uint64_t result = sub_1CB865F04((uint64_t *)a1, v17, a3, v30, v13);
        break;
      case 2094:
      case 2096:
        if (a5 == 1) {
          return 0;
        }
        if (v21 == 2096) {
          unsigned int v31 = 2;
        }
        else {
          unsigned int v31 = 3;
        }
        uint64_t result = sub_1CB8657A8((uint64_t *)a1, v17, a3, v31, v13);
        break;
      default:
        if (v21 != 1999 && v21 != 2001) {
          return 0;
        }
        uint64_t result = sub_1CB862294((void *)a1, v17, a3, v13, a5);
        break;
    }
    return result;
  }
  if ((int)v21 > 174)
  {
    if ((int)v21 > 260)
    {
      if (v21 != 261)
      {
        if (v21 != 280) {
          return 0;
        }
        return sub_1CB8640DC(a1, (uint64_t *)v17, a3, 0, v13, a5);
      }
      uint64_t v26 = *(unsigned char **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
      uint64_t v27 = a1;
      int v28 = a3;
      int v29 = 424;
    }
    else
    {
      if (v21 == 175)
      {
        if (a5 == 1) {
          return 0;
        }
        return sub_1CB889C40((void *)a1, v17, a3, v13);
      }
      if (v21 != 177 || a5 == 1) {
        return 0;
      }
      uint64_t v26 = *(unsigned char **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
      uint64_t v27 = a1;
      int v28 = a3;
      int v29 = 231;
    }
LABEL_102:
    return sub_1CD3CEE74(v27, (uint64_t *)v17, v26, v28, v29, v13);
  }
  if ((int)v21 > 138)
  {
    if (v21 == 139)
    {
      return sub_1CB862C5C((void *)a1, v17, a3, v13, a5);
    }
    else
    {
      if (v21 != 140 || a5 == 1) {
        return 0;
      }
      return sub_1CB86545C((void *)a1, v17, a3, v13);
    }
  }
  else
  {
    if (v21 != 75)
    {
      if (v21 != 76 || a5 == 1) {
        return 0;
      }
      uint64_t v26 = *(unsigned char **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
      uint64_t v27 = a1;
      int v28 = a3;
      int v29 = 234;
      goto LABEL_102;
    }
    if (a5 == 1) {
      return 0;
    }
    return sub_1CB8894C0((void *)a1, v17, a3, v13);
  }
}

BOOL sub_1CB861F38(void *a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if ((v5 | 2) != 2) {
    return 0;
  }
  BOOL v41 = v5 == 0;
  uint64_t v40 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  unsigned int v39 = 0;
  int v11 = sub_1CB88467C((uint64_t)a1, &v40, (int *)&v39, &v41, 0, *(void *)(a2 + 40), 0, 1);
  BOOL v12 = v11 != 0;
  if (v11)
  {
    int v13 = v11;
    unsigned int v14 = word_1CD91C440[8 * (*(_DWORD *)(*(void *)(a2 - 32) + 36) == 1991) + 4 * (a4 == 1) + 2 * v41 + a5];
    uint64_t v15 = a1[4];
    uint64_t v16 = *(void *)(v15 + 640);
    uint64_t v17 = *(unint64_t **)(v15 + 648);
    uint64_t v18 = *(void *)(a1[12] + 8) + 48 * v14;
    uint64_t v19 = *(llvm::MachineFunction **)(v16 + 32);
    uint64_t v20 = (unsigned __int8 *)a1[9];
    uint64_t v42 = v20;
    if (v20) {
      llvm::MetadataTracking::track((uint64_t)&v42, v20, 2);
    }
    uint64_t v21 = llvm::MachineFunction::CreateMachineInstr(v19, v18, &v42, 0);
    if (!v42) {
      goto LABEL_6;
    }
    int v35 = *v42;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        uint64_t v38 = v42;
      }
      else {
        uint64_t v38 = 0;
      }
      if ((v35 - 3) < 0xFFFFFFFE)
      {
        if (v35 == 3) {
          *((void *)v42 + 1) = 0;
        }
        goto LABEL_6;
      }
      unint64_t v37 = (unint64_t)(v38 + 8);
    }
    else
    {
      if ((v42[1] & 0x7F) != 2 && !*((_DWORD *)v42 + 3)) {
        goto LABEL_6;
      }
      uint64_t v36 = *((void *)v42 + 2);
      if ((v36 & 4) == 0) {
        goto LABEL_6;
      }
      unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
      if (!v37) {
        goto LABEL_6;
      }
    }
    *(void *)&long long v43 = &v42;
    sub_1CC5FA668(v37 + 16, &v43);
LABEL_6:
    uint64_t v22 = *(void *)(v16 + 40);
    *((void *)v21 + 3) = v22;
    uint64_t v23 = *(void *)(v22 + 32);
    uint64_t v24 = *((unsigned int *)v21 + 10);
    if (v24)
    {
      uint64_t v28 = *((void *)v21 + 4);
      uint64_t v29 = *(void *)(v23 + 40);
      uint64_t v30 = 32 * v24;
      do
      {
        if (!*(unsigned char *)v28)
        {
          uint64_t v31 = *(unsigned int *)(v28 + 4);
          if ((int)v31 >= 0) {
            uint64_t v32 = (uint64_t *)(*(void *)(v29 + 272) + 8 * v31);
          }
          else {
            uint64_t v32 = (uint64_t *)(*(void *)(v29 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
          }
          uint64_t v33 = *v32;
          if (*v32)
          {
            uint64_t v34 = *(void *)(v33 + 16);
            *(void *)(v33 + 16) = v28;
            *(void *)(v28 + 16) = v34;
            if (*(unsigned char *)(v28 + 3))
            {
              *(void *)(v28 + 24) = v33;
            }
            else
            {
              *(void *)(v28 + 24) = 0;
              uint64_t v32 = (uint64_t *)(v34 + 24);
            }
          }
          else
          {
            *(void *)(v28 + 16) = v28;
            *(void *)(v28 + 24) = 0;
          }
          *uint64_t v32 = v28;
        }
        v28 += 32;
        v30 -= 32;
      }
      while (v30);
    }
    uint64_t v25 = *(void *)(v23 + 728);
    if (v25) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v25 + 24))(v25, v21);
    }
    unint64_t v26 = *v17 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v21 = v26 | *(void *)v21 & 7;
    *((void *)v21 + 1) = v17;
    *(void *)(v26 + 8) = v21;
    *uint64_t v17 = *v17 & 7 | (unint64_t)v21;
    *((void *)&v43 + 1) = 0;
    long long v44 = 0uLL;
    LODWORD(v43) = 0x1000000;
    DWORD1(v43) = a3;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v43);
    LODWORD(v43) = 1;
    *((void *)&v43 + 1) = 0;
    *(void *)&long long v44 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v43);
    *((void *)&v43 + 1) = 0;
    long long v44 = 0uLL;
    LODWORD(v43) = 0;
    DWORD1(v43) = v13;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v43);
    LODWORD(v43) = 1;
    *((void *)&v43 + 1) = 0;
    *(void *)&long long v44 = v39;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v43);
    LODWORD(v43) = 1;
    *((void *)&v43 + 1) = 0;
    *(void *)&long long v44 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v43);
    long long v43 = 0u;
    long long v44 = 0u;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v43);
  }
  return v12;
}

uint64_t sub_1CB862294(void *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)a2 + 8) != 2) {
    return 0;
  }
  uint64_t v10 = a1[6];
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(void *)(*(void *)(v10 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v12 = *(void *)(v10 + 8);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
    if (!IncompleteVirtualRegister) {
      return 0;
    }
  }
  else if (!IncompleteVirtualRegister)
  {
    return 0;
  }
  uint64_t v13 = a1[6];
  int v14 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v13, "", 0);
  *(void *)(*(void *)(v13 + 24) + 16 * (v14 & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v15 = *(void *)(v13 + 8);
  if (!v15)
  {
    if (v14) {
      goto LABEL_6;
    }
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  if (!v14) {
    return 0;
  }
LABEL_6:
  int v90 = a3;
  BOOL v16 = *(_DWORD *)(*(void *)(a2 - 32) + 36) != 1999;
  uint64_t v17 = a1[4];
  uint64_t v18 = *(void *)(v17 + 640);
  uint64_t v19 = *(unint64_t **)(v17 + 648);
  uint64_t v20 = *(void *)(a1[12] + 8) + 583296;
  uint64_t v21 = *(llvm::MachineFunction **)(v18 + 32);
  uint64_t v22 = (unsigned __int8 *)a1[9];
  uint64_t v95 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v95, v22, 2);
  }
  uint64_t v23 = llvm::MachineFunction::CreateMachineInstr(v21, v20, &v95, 0);
  if (v95)
  {
    int v78 = *v95;
    if ((v78 - 4) > 0x1E)
    {
      if ((v78 - 3) >= 0xFFFFFFFE) {
        uint64_t v87 = v95;
      }
      else {
        uint64_t v87 = 0;
      }
      if ((v78 - 3) < 0xFFFFFFFE)
      {
        if (v78 == 3) {
          *((void *)v95 + 1) = 0;
        }
        goto LABEL_9;
      }
      unint64_t v80 = (unint64_t)(v87 + 8);
    }
    else
    {
      if ((v95[1] & 0x7F) != 2 && !*((_DWORD *)v95 + 3)) {
        goto LABEL_9;
      }
      uint64_t v79 = *((void *)v95 + 2);
      if ((v79 & 4) == 0) {
        goto LABEL_9;
      }
      unint64_t v80 = v79 & 0xFFFFFFFFFFFFFFF8;
      if (!v80) {
        goto LABEL_9;
      }
    }
    *(void *)&long long v91 = &v95;
    sub_1CC5FA668(v80 + 16, &v91);
  }
LABEL_9:
  uint64_t v24 = *(void *)(v18 + 40);
  *((void *)v23 + 3) = v24;
  uint64_t v25 = *(void *)(v24 + 32);
  uint64_t v26 = *((unsigned int *)v23 + 10);
  if (v26)
  {
    uint64_t v57 = *((void *)v23 + 4);
    uint64_t v58 = *(void *)(v25 + 40);
    uint64_t v59 = 32 * v26;
    do
    {
      if (!*(unsigned char *)v57)
      {
        uint64_t v60 = *(unsigned int *)(v57 + 4);
        if ((int)v60 >= 0) {
          unint64_t v61 = (uint64_t *)(*(void *)(v58 + 272) + 8 * v60);
        }
        else {
          unint64_t v61 = (uint64_t *)(*(void *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
        }
        uint64_t v62 = *v61;
        if (*v61)
        {
          uint64_t v63 = *(void *)(v62 + 16);
          *(void *)(v62 + 16) = v57;
          *(void *)(v57 + 16) = v63;
          if (*(unsigned char *)(v57 + 3))
          {
            *(void *)(v57 + 24) = v62;
          }
          else
          {
            *(void *)(v57 + 24) = 0;
            unint64_t v61 = (uint64_t *)(v63 + 24);
          }
        }
        else
        {
          *(void *)(v57 + 16) = v57;
          *(void *)(v57 + 24) = 0;
        }
        uint64_t *v61 = v57;
      }
      v57 += 32;
      v59 -= 32;
    }
    while (v59);
  }
  uint64_t v27 = *(void *)(v25 + 728);
  if (v27) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v27 + 24))(v27, v23);
  }
  unint64_t v28 = *v19 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v23 = v28 | *(void *)v23 & 7;
  *((void *)v23 + 1) = v19;
  *(void *)(v28 + 8) = v23;
  *uint64_t v19 = *v19 & 7 | (unint64_t)v23;
  *((void *)&v91 + 1) = 0;
  long long v92 = 0uLL;
  LODWORD(v91) = 0x1000000;
  DWORD1(v91) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 2 * v16;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v91);
  long long v91 = 0u;
  long long v92 = 0u;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v91);
  uint64_t v29 = a1[4];
  uint64_t v30 = *(void *)(v29 + 640);
  uint64_t v31 = *(unint64_t **)(v29 + 648);
  uint64_t v32 = *(void *)(a1[12] + 8) + 643872;
  uint64_t v33 = *(llvm::MachineFunction **)(v30 + 32);
  uint64_t v34 = (unsigned __int8 *)a1[9];
  uint64_t v95 = v34;
  if (v34) {
    llvm::MetadataTracking::track((uint64_t)&v95, v34, 2);
  }
  int v35 = llvm::MachineFunction::CreateMachineInstr(v33, v32, &v95, 0);
  if (v95)
  {
    int v81 = *v95;
    if ((v81 - 4) > 0x1E)
    {
      if ((v81 - 3) >= 0xFFFFFFFE) {
        uint64_t v88 = v95;
      }
      else {
        uint64_t v88 = 0;
      }
      if ((v81 - 3) < 0xFFFFFFFE)
      {
        if (v81 == 3) {
          *((void *)v95 + 1) = 0;
        }
        goto LABEL_15;
      }
      unint64_t v83 = (unint64_t)(v88 + 8);
    }
    else
    {
      if ((v95[1] & 0x7F) != 2 && !*((_DWORD *)v95 + 3)) {
        goto LABEL_15;
      }
      uint64_t v82 = *((void *)v95 + 2);
      if ((v82 & 4) == 0) {
        goto LABEL_15;
      }
      unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
      if (!v83) {
        goto LABEL_15;
      }
    }
    *(void *)&long long v91 = &v95;
    sub_1CC5FA668(v83 + 16, &v91);
  }
LABEL_15:
  uint64_t v36 = *(void *)(v30 + 40);
  *((void *)v35 + 3) = v36;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *((unsigned int *)v35 + 10);
  if (v38)
  {
    uint64_t v64 = *((void *)v35 + 4);
    uint64_t v65 = *(void *)(v37 + 40);
    uint64_t v66 = 32 * v38;
    do
    {
      if (!*(unsigned char *)v64)
      {
        uint64_t v67 = *(unsigned int *)(v64 + 4);
        if ((int)v67 >= 0) {
          uint64_t v68 = (uint64_t *)(*(void *)(v65 + 272) + 8 * v67);
        }
        else {
          uint64_t v68 = (uint64_t *)(*(void *)(v65 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
        }
        uint64_t v69 = *v68;
        if (*v68)
        {
          uint64_t v70 = *(void *)(v69 + 16);
          *(void *)(v69 + 16) = v64;
          *(void *)(v64 + 16) = v70;
          if (*(unsigned char *)(v64 + 3))
          {
            *(void *)(v64 + 24) = v69;
          }
          else
          {
            *(void *)(v64 + 24) = 0;
            uint64_t v68 = (uint64_t *)(v70 + 24);
          }
        }
        else
        {
          *(void *)(v64 + 16) = v64;
          *(void *)(v64 + 24) = 0;
        }
        *uint64_t v68 = v64;
      }
      v64 += 32;
      v66 -= 32;
    }
    while (v66);
  }
  uint64_t v39 = *(void *)(v37 + 728);
  if (v39) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, v35);
  }
  unint64_t v40 = *v31 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v35 = v40 | *(void *)v35 & 7;
  *((void *)v35 + 1) = v31;
  *(void *)(v40 + 8) = v35;
  *uint64_t v31 = *v31 & 7 | (unint64_t)v35;
  *((void *)&v91 + 1) = 0;
  long long v92 = 0uLL;
  LODWORD(v91) = 0x1000000;
  DWORD1(v91) = v14;
  llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 10;
  llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v91);
  *((void *)&v91 + 1) = 0;
  long long v92 = 0uLL;
  LODWORD(v91) = 0;
  DWORD1(v91) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v91);
  long long v91 = 0u;
  long long v92 = 0u;
  llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v91);
  unsigned int v41 = word_1CD91C110[2 * a4 + a5];
  int v94 = 32;
  uint64_t v93 = 1031798784;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v91, (const llvm::APInt **)&v93);
  long long v96 = v91;
  int v97 = v92;
  char v98 = v98 & 0xF0 | BYTE4(v92) & 0xF;
  if ((_UNKNOWN *)v91 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v96, (llvm::APInt *)&v91);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v96, (uint64_t)&v91);
  }
  if (DWORD2(v91) >= 0x41) {
    uint64_t v42 = (uint64_t *)v91;
  }
  else {
    uint64_t v42 = (uint64_t *)&v91;
  }
  uint64_t v43 = *v42;
  if (DWORD2(v91) >= 0x41 && (void)v91) {
    MEMORY[0x1D25D9CB0]();
  }
  uint64_t v44 = a1[4];
  uint64_t v45 = *(void *)(v44 + 640);
  uint64_t v46 = *(unint64_t **)(v44 + 648);
  uint64_t v47 = *(void *)(a1[12] + 8) + 48 * v41;
  uint64_t v48 = *(llvm::MachineFunction **)(v45 + 32);
  unint64_t v49 = (unsigned __int8 *)a1[9];
  uint64_t v93 = (uint64_t)v49;
  if (v49) {
    llvm::MetadataTracking::track((uint64_t)&v93, v49, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v48, v47, (unsigned __int8 **)&v93, 0);
  if (!v93) {
    goto LABEL_29;
  }
  int v84 = *(unsigned __int8 *)v93;
  if ((v84 - 4) > 0x1E)
  {
    if ((v84 - 3) >= 0xFFFFFFFE) {
      uint64_t v89 = v93;
    }
    else {
      uint64_t v89 = 0;
    }
    if ((v84 - 3) < 0xFFFFFFFE)
    {
      if (v84 == 3) {
        *(void *)(v93 + 8) = 0;
      }
      goto LABEL_29;
    }
    unint64_t v86 = v89 + 8;
  }
  else
  {
    if ((*(unsigned char *)(v93 + 1) & 0x7F) != 2 && !*(_DWORD *)(v93 + 12)) {
      goto LABEL_29;
    }
    uint64_t v85 = *(void *)(v93 + 16);
    if ((v85 & 4) == 0) {
      goto LABEL_29;
    }
    unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF8;
    if (!v86) {
      goto LABEL_29;
    }
  }
  *(void *)&long long v91 = &v93;
  sub_1CC5FA668(v86 + 16, &v91);
LABEL_29:
  uint64_t v51 = *(void *)(v45 + 40);
  *((void *)MachineInstr + 3) = v51;
  uint64_t v52 = *(void *)(v51 + 32);
  uint64_t v53 = *((unsigned int *)MachineInstr + 10);
  if (v53)
  {
    uint64_t v71 = *((void *)MachineInstr + 4);
    uint64_t v72 = *(void *)(v52 + 40);
    uint64_t v73 = 32 * v53;
    do
    {
      if (!*(unsigned char *)v71)
      {
        uint64_t v74 = *(unsigned int *)(v71 + 4);
        if ((int)v74 >= 0) {
          uint64_t v75 = (uint64_t *)(*(void *)(v72 + 272) + 8 * v74);
        }
        else {
          uint64_t v75 = (uint64_t *)(*(void *)(v72 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
        }
        uint64_t v76 = *v75;
        if (*v75)
        {
          uint64_t v77 = *(void *)(v76 + 16);
          *(void *)(v76 + 16) = v71;
          *(void *)(v71 + 16) = v77;
          if (*(unsigned char *)(v71 + 3))
          {
            *(void *)(v71 + 24) = v76;
          }
          else
          {
            *(void *)(v71 + 24) = 0;
            uint64_t v75 = (uint64_t *)(v77 + 24);
          }
        }
        else
        {
          *(void *)(v71 + 16) = v71;
          *(void *)(v71 + 24) = 0;
        }
        *uint64_t v75 = v71;
      }
      v71 += 32;
      v73 -= 32;
    }
    while (v73);
  }
  uint64_t v54 = *(void *)(v52 + 728);
  if (v54) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v54 + 24))(v54, MachineInstr);
  }
  unint64_t v55 = *v46 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v55 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v46;
  *(void *)(v55 + 8) = MachineInstr;
  *uint64_t v46 = *v46 & 7 | (unint64_t)MachineInstr;
  *((void *)&v91 + 1) = 0;
  long long v92 = 0uLL;
  LODWORD(v91) = 0x1000000;
  DWORD1(v91) = v90;
  llvm::MachineInstr::addOperand(MachineInstr, v48, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v48, (const llvm::MachineOperand *)&v91);
  *((void *)&v91 + 1) = 0;
  long long v92 = 0uLL;
  LODWORD(v91) = 0;
  DWORD1(v91) = v14;
  llvm::MachineInstr::addOperand(MachineInstr, v48, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v48, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = v43;
  llvm::MachineInstr::addOperand(MachineInstr, v48, (const llvm::MachineOperand *)&v91);
  LODWORD(v91) = 1;
  *((void *)&v91 + 1) = 0;
  *(void *)&long long v92 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v48, (const llvm::MachineOperand *)&v91);
  long long v91 = 0u;
  long long v92 = 0u;
  llvm::MachineInstr::addOperand(MachineInstr, v48, (const llvm::MachineOperand *)&v91);
  if ((_UNKNOWN *)v96 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v96 + 1);
  }
  else if ((*(_DWORD *)(v96 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (*((void *)&v96 + 1)) {
      MEMORY[0x1D25D9CB0](*((void *)&v96 + 1), 0x1000C8000313F17);
    }
  }
  return 1;
}

BOOL sub_1CB862C5C(void *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  int v5 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if ((v5 | 2) != 2) {
    return 0;
  }
  BOOL v10 = v5 == 0;
  BOOL v11 = v10 && a4 == 1;
  BOOL v46 = v10;
  int v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x40000000) != 0) {
    uint64_t v13 = *(uint64_t **)(a2 - 8);
  }
  else {
    uint64_t v13 = (uint64_t *)(a2 - 32 * (v12 & 0x7FFFFFF));
  }
  uint64_t v45 = *v13;
  int v44 = 0;
  int v15 = sub_1CB88467C((uint64_t)a1, &v45, &v44, &v46, v11, *(void *)(a2 + 40), 0, 1);
  BOOL v14 = v15 != 0;
  if (v15)
  {
    int v16 = v15;
    uint64_t v17 = (char *)&unk_1CD91C180 + 8 * (a4 == 1) + 4 * v46 + 2 * a5;
    BOOL v18 = !v11;
    if (v11) {
      uint64_t v19 = 0x100008000;
    }
    else {
      uint64_t v19 = 0x80000000;
    }
    if (!v18) {
      uint64_t v17 = (char *)&unk_1CD91CB18 + 2 * a5;
    }
    uint64_t v20 = a1[4];
    uint64_t v21 = *(void *)(v20 + 640);
    uint64_t v22 = *(unint64_t **)(v20 + 648);
    uint64_t v23 = *(void *)(a1[12] + 8) + 48 * *(unsigned __int16 *)v17;
    uint64_t v24 = *(llvm::MachineFunction **)(v21 + 32);
    uint64_t v25 = (unsigned __int8 *)a1[9];
    uint64_t v47 = v25;
    if (v25) {
      llvm::MetadataTracking::track((uint64_t)&v47, v25, 2);
    }
    uint64_t v26 = llvm::MachineFunction::CreateMachineInstr(v24, v23, &v47, 0);
    if (!v47) {
      goto LABEL_18;
    }
    int v40 = *v47;
    if ((v40 - 4) > 0x1E)
    {
      if ((v40 - 3) >= 0xFFFFFFFE) {
        uint64_t v43 = v47;
      }
      else {
        uint64_t v43 = 0;
      }
      if ((v40 - 3) < 0xFFFFFFFE)
      {
        if (v40 == 3) {
          *((void *)v47 + 1) = 0;
        }
        goto LABEL_18;
      }
      unint64_t v42 = (unint64_t)(v43 + 8);
    }
    else
    {
      if ((v47[1] & 0x7F) != 2 && !*((_DWORD *)v47 + 3)) {
        goto LABEL_18;
      }
      uint64_t v41 = *((void *)v47 + 2);
      if ((v41 & 4) == 0) {
        goto LABEL_18;
      }
      unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
      if (!v42) {
        goto LABEL_18;
      }
    }
    *(void *)&long long v48 = &v47;
    sub_1CC5FA668(v42 + 16, &v48);
LABEL_18:
    uint64_t v27 = *(void *)(v21 + 40);
    *((void *)v26 + 3) = v27;
    uint64_t v28 = *(void *)(v27 + 32);
    uint64_t v29 = *((unsigned int *)v26 + 10);
    if (v29)
    {
      uint64_t v33 = *((void *)v26 + 4);
      uint64_t v34 = *(void *)(v28 + 40);
      uint64_t v35 = 32 * v29;
      do
      {
        if (!*(unsigned char *)v33)
        {
          uint64_t v36 = *(unsigned int *)(v33 + 4);
          if ((int)v36 >= 0) {
            uint64_t v37 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v36);
          }
          else {
            uint64_t v37 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
          }
          uint64_t v38 = *v37;
          if (*v37)
          {
            uint64_t v39 = *(void *)(v38 + 16);
            *(void *)(v38 + 16) = v33;
            *(void *)(v33 + 16) = v39;
            if (*(unsigned char *)(v33 + 3))
            {
              *(void *)(v33 + 24) = v38;
            }
            else
            {
              *(void *)(v33 + 24) = 0;
              uint64_t v37 = (uint64_t *)(v39 + 24);
            }
          }
          else
          {
            *(void *)(v33 + 16) = v33;
            *(void *)(v33 + 24) = 0;
          }
          *uint64_t v37 = v33;
        }
        v33 += 32;
        v35 -= 32;
      }
      while (v35);
    }
    uint64_t v30 = *(void *)(v28 + 728);
    if (v30) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v30 + 24))(v30, v26);
    }
    unint64_t v31 = *v22 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v26 = v31 | *(void *)v26 & 7;
    *((void *)v26 + 1) = v22;
    *(void *)(v31 + 8) = v26;
    *uint64_t v22 = *v22 & 7 | (unint64_t)v26;
    *((void *)&v48 + 1) = 0;
    long long v49 = 0uLL;
    LODWORD(v48) = 0x1000000;
    DWORD1(v48) = a3;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v48);
    LODWORD(v48) = 1;
    *((void *)&v48 + 1) = 0;
    *(void *)&long long v49 = 0;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v48);
    *((void *)&v48 + 1) = 0;
    long long v49 = 0uLL;
    LODWORD(v48) = 0;
    DWORD1(v48) = v16;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v48);
    LODWORD(v48) = 1;
    *((void *)&v48 + 1) = 0;
    *(void *)&long long v49 = 4;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v48);
    LODWORD(v48) = 1;
    *((void *)&v48 + 1) = 0;
    *(void *)&long long v49 = v19;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v48);
    LODWORD(v48) = 1;
    *((void *)&v48 + 1) = 0;
    *(void *)&long long v49 = 0;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v48);
    long long v48 = 0u;
    long long v49 = 0u;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v48);
  }
  return v14;
}

BOOL sub_1CB863004(void *a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if ((v5 | 2) != 2
    || (*(unsigned char *)(a1[32] + 280) != 0) == (*(_DWORD *)(*(void *)(a2 - 32) + 36) != 2015)
    || a5 == 1 && *(unsigned char *)(a1[32] + 280))
  {
    return 0;
  }
  BOOL v12 = v5 == 0;
  BOOL v101 = v5 == 0;
  uint64_t v100 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  unsigned int v99 = 0;
  int v13 = sub_1CB88467C((uint64_t)a1, &v100, (int *)&v99, &v101, 0, *(void *)(a2 + 40), 7, 1);
  BOOL v10 = v13 != 0;
  if (!v13) {
    return v10;
  }
  int v14 = v13;
  BOOL v15 = v5 == 0;
  BOOL v97 = v15;
  if (*(unsigned char *)(a1[32] + 280))
  {
    if (v5) {
      int v16 = &off_1E66A4340;
    }
    else {
      int v16 = &off_1E66A4180;
    }
    BOOL v12 = v101;
    int v98 = v13;
    goto LABEL_24;
  }
  unsigned int v17 = word_1CD91C0E8[2 * v15 + v101];
  uint64_t v18 = a1[6];
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v18, "", 0);
  int v98 = IncompleteVirtualRegister;
  uint64_t v20 = &off_1E66A4340;
  if (!v5) {
    uint64_t v20 = &off_1E66A4180;
  }
  long long v96 = v20;
  *(void *)(*(void *)(v18 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v20;
  uint64_t v21 = *(void *)(v18 + 8);
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
  }
  uint64_t v22 = a1[4];
  uint64_t v95 = *(unint64_t **)(v22 + 648);
  uint64_t v23 = *(void *)(a1[12] + 8) + 48 * v17;
  uint64_t v24 = *(void *)(v22 + 640);
  uint64_t v25 = *(llvm::MachineFunction **)(v24 + 32);
  uint64_t v26 = (unsigned __int8 *)a1[9];
  uint64_t v102 = v26;
  if (v26) {
    llvm::MetadataTracking::track((uint64_t)&v102, v26, 2);
  }
  uint64_t v27 = llvm::MachineFunction::CreateMachineInstr(v25, v23, &v102, 0);
  if (v102)
  {
    int v89 = *v102;
    if ((v89 - 4) > 0x1E)
    {
      if ((v89 - 3) >= 0xFFFFFFFE) {
        int v94 = v102;
      }
      else {
        int v94 = 0;
      }
      if ((v89 - 3) < 0xFFFFFFFE)
      {
        if (v89 == 3) {
          *((void *)v102 + 1) = 0;
        }
        goto LABEL_20;
      }
      unint64_t v91 = (unint64_t)(v94 + 8);
    }
    else
    {
      if ((v102[1] & 0x7F) != 2 && !*((_DWORD *)v102 + 3)) {
        goto LABEL_20;
      }
      uint64_t v90 = *((void *)v102 + 2);
      if ((v90 & 4) == 0) {
        goto LABEL_20;
      }
      unint64_t v91 = v90 & 0xFFFFFFFFFFFFFFF8;
      if (!v91) {
        goto LABEL_20;
      }
    }
    *(void *)&long long v103 = &v102;
    sub_1CC5FA668(v91 + 16, &v103);
  }
LABEL_20:
  uint64_t v28 = *(void *)(v24 + 40);
  *((void *)v27 + 3) = v28;
  uint64_t v29 = *(void *)(v28 + 32);
  uint64_t v30 = *((unsigned int *)v27 + 10);
  if (v30)
  {
    uint64_t v76 = *((void *)v27 + 4);
    uint64_t v77 = *(void *)(v29 + 40);
    uint64_t v78 = 32 * v30;
    do
    {
      if (!*(unsigned char *)v76)
      {
        uint64_t v79 = *(unsigned int *)(v76 + 4);
        if ((int)v79 >= 0) {
          unint64_t v80 = (uint64_t *)(*(void *)(v77 + 272) + 8 * v79);
        }
        else {
          unint64_t v80 = (uint64_t *)(*(void *)(v77 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
        }
        uint64_t v81 = *v80;
        if (*v80)
        {
          uint64_t v82 = *(void *)(v81 + 16);
          *(void *)(v81 + 16) = v76;
          *(void *)(v76 + 16) = v82;
          if (*(unsigned char *)(v76 + 3))
          {
            *(void *)(v76 + 24) = v81;
          }
          else
          {
            *(void *)(v76 + 24) = 0;
            unint64_t v80 = (uint64_t *)(v82 + 24);
          }
        }
        else
        {
          *(void *)(v76 + 16) = v76;
          *(void *)(v76 + 24) = 0;
        }
        *unint64_t v80 = v76;
      }
      v76 += 32;
      v78 -= 32;
    }
    while (v78);
  }
  uint64_t v31 = *(void *)(v29 + 728);
  if (v31) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v31 + 24))(v31, v27);
  }
  unint64_t v32 = *v95 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v27 = v32 | *(void *)v27 & 7;
  *((void *)v27 + 1) = v95;
  *(void *)(v32 + 8) = v27;
  *uint64_t v95 = *v95 & 7 | (unint64_t)v27;
  *((void *)&v103 + 1) = 0;
  long long v104 = 0uLL;
  LODWORD(v103) = 0x1000000;
  DWORD1(v103) = v98;
  llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = 0;
  llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v103);
  *((void *)&v103 + 1) = 0;
  long long v104 = 0uLL;
  LODWORD(v103) = 0;
  DWORD1(v103) = v14;
  llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = v99;
  llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = 0;
  llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v103);
  long long v103 = 0u;
  long long v104 = 0u;
  llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v103);
  unsigned int v99 = 0;
  BOOL v101 = v12;
  int v16 = v96;
  BOOL v15 = v97;
LABEL_24:
  unsigned int v33 = word_1CD91C0F0[2 * v15 + v12];
  uint64_t v34 = a1[6];
  int v35 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v34, "", 0);
  *(void *)(*(void *)(v34 + 24) + 16 * (v35 & 0x7FFFFFFF)) = v16;
  uint64_t v36 = *(void *)(v34 + 8);
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
  }
  uint64_t v37 = a1[4];
  uint64_t v38 = *(void *)(v37 + 640);
  uint64_t v39 = *(unint64_t **)(v37 + 648);
  uint64_t v40 = *(void *)(a1[12] + 8) + 48 * v33;
  uint64_t v41 = *(llvm::MachineFunction **)(v38 + 32);
  unint64_t v42 = (unsigned __int8 *)a1[9];
  uint64_t v102 = v42;
  if (v42) {
    llvm::MetadataTracking::track((uint64_t)&v102, v42, 2);
  }
  uint64_t v43 = llvm::MachineFunction::CreateMachineInstr(v41, v40, &v102, 0);
  if (v102)
  {
    int v83 = *v102;
    if ((v83 - 4) > 0x1E)
    {
      if ((v83 - 3) >= 0xFFFFFFFE) {
        long long v92 = v102;
      }
      else {
        long long v92 = 0;
      }
      if ((v83 - 3) < 0xFFFFFFFE)
      {
        if (v83 == 3) {
          *((void *)v102 + 1) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v85 = (unint64_t)(v92 + 8);
    }
    else
    {
      if ((v102[1] & 0x7F) != 2 && !*((_DWORD *)v102 + 3)) {
        goto LABEL_29;
      }
      uint64_t v84 = *((void *)v102 + 2);
      if ((v84 & 4) == 0) {
        goto LABEL_29;
      }
      unint64_t v85 = v84 & 0xFFFFFFFFFFFFFFF8;
      if (!v85) {
        goto LABEL_29;
      }
    }
    *(void *)&long long v103 = &v102;
    sub_1CC5FA668(v85 + 16, &v103);
  }
LABEL_29:
  uint64_t v44 = *(void *)(v38 + 40);
  *((void *)v43 + 3) = v44;
  uint64_t v45 = *(void *)(v44 + 32);
  uint64_t v46 = *((unsigned int *)v43 + 10);
  if (v46)
  {
    uint64_t v62 = *((void *)v43 + 4);
    uint64_t v63 = *(void *)(v45 + 40);
    uint64_t v64 = 32 * v46;
    do
    {
      if (!*(unsigned char *)v62)
      {
        uint64_t v65 = *(unsigned int *)(v62 + 4);
        if ((int)v65 >= 0) {
          uint64_t v66 = (uint64_t *)(*(void *)(v63 + 272) + 8 * v65);
        }
        else {
          uint64_t v66 = (uint64_t *)(*(void *)(v63 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
        }
        uint64_t v67 = *v66;
        if (*v66)
        {
          uint64_t v68 = *(void *)(v67 + 16);
          *(void *)(v67 + 16) = v62;
          *(void *)(v62 + 16) = v68;
          if (*(unsigned char *)(v62 + 3))
          {
            *(void *)(v62 + 24) = v67;
          }
          else
          {
            *(void *)(v62 + 24) = 0;
            uint64_t v66 = (uint64_t *)(v68 + 24);
          }
        }
        else
        {
          *(void *)(v62 + 16) = v62;
          *(void *)(v62 + 24) = 0;
        }
        uint64_t *v66 = v62;
      }
      v62 += 32;
      v64 -= 32;
    }
    while (v64);
  }
  uint64_t v47 = *(void *)(v45 + 728);
  if (v47) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v47 + 24))(v47, v43);
  }
  unint64_t v48 = *v39 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v43 = v48 | *(void *)v43 & 7;
  *((void *)v43 + 1) = v39;
  *(void *)(v48 + 8) = v43;
  *uint64_t v39 = *v39 & 7 | (unint64_t)v43;
  *((void *)&v103 + 1) = 0;
  long long v104 = 0uLL;
  LODWORD(v103) = 0x1000000;
  DWORD1(v103) = v35;
  llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = 0;
  llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v103);
  *((void *)&v103 + 1) = 0;
  long long v104 = 0uLL;
  LODWORD(v103) = 0;
  DWORD1(v103) = v98;
  llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = v99;
  llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = 0;
  llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v103);
  long long v103 = 0u;
  long long v104 = 0u;
  llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v103);
  if (*(unsigned char *)(a1[32] + 280))
  {
    long long v104 = 0uLL;
    long long v103 = 0x203000000uLL;
    llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v103);
  }
  uint64_t v49 = a1[4];
  uint64_t v50 = *(void *)(v49 + 640);
  uint64_t v51 = *(unint64_t **)(v49 + 648);
  uint64_t v52 = *(void *)(a1[12] + 8) + 48 * word_1CD91C460[8 * (a4 == 1) + 4 * v101 + 2 * v97 + (a5 == 1)];
  uint64_t v53 = *(llvm::MachineFunction **)(v50 + 32);
  uint64_t v54 = (unsigned __int8 *)a1[9];
  uint64_t v102 = v54;
  if (v54) {
    llvm::MetadataTracking::track((uint64_t)&v102, v54, 2);
  }
  unint64_t v55 = llvm::MachineFunction::CreateMachineInstr(v53, v52, &v102, 0);
  if (!v102) {
    goto LABEL_37;
  }
  int v86 = *v102;
  if ((v86 - 4) > 0x1E)
  {
    if ((v86 - 3) >= 0xFFFFFFFE) {
      uint64_t v93 = v102;
    }
    else {
      uint64_t v93 = 0;
    }
    if ((v86 - 3) < 0xFFFFFFFE)
    {
      if (v86 == 3) {
        *((void *)v102 + 1) = 0;
      }
      goto LABEL_37;
    }
    unint64_t v88 = (unint64_t)(v93 + 8);
  }
  else
  {
    if ((v102[1] & 0x7F) != 2 && !*((_DWORD *)v102 + 3)) {
      goto LABEL_37;
    }
    uint64_t v87 = *((void *)v102 + 2);
    if ((v87 & 4) == 0) {
      goto LABEL_37;
    }
    unint64_t v88 = v87 & 0xFFFFFFFFFFFFFFF8;
    if (!v88) {
      goto LABEL_37;
    }
  }
  *(void *)&long long v103 = &v102;
  sub_1CC5FA668(v88 + 16, &v103);
LABEL_37:
  uint64_t v56 = *(void *)(v50 + 40);
  *((void *)v55 + 3) = v56;
  uint64_t v57 = *(void *)(v56 + 32);
  uint64_t v58 = *((unsigned int *)v55 + 10);
  if (v58)
  {
    uint64_t v69 = *((void *)v55 + 4);
    uint64_t v70 = *(void *)(v57 + 40);
    uint64_t v71 = 32 * v58;
    do
    {
      if (!*(unsigned char *)v69)
      {
        uint64_t v72 = *(unsigned int *)(v69 + 4);
        if ((int)v72 >= 0) {
          uint64_t v73 = (uint64_t *)(*(void *)(v70 + 272) + 8 * v72);
        }
        else {
          uint64_t v73 = (uint64_t *)(*(void *)(v70 + 24) + 16 * (v72 & 0x7FFFFFFF) + 8);
        }
        uint64_t v74 = *v73;
        if (*v73)
        {
          uint64_t v75 = *(void *)(v74 + 16);
          *(void *)(v74 + 16) = v69;
          *(void *)(v69 + 16) = v75;
          if (*(unsigned char *)(v69 + 3))
          {
            *(void *)(v69 + 24) = v74;
          }
          else
          {
            *(void *)(v69 + 24) = 0;
            uint64_t v73 = (uint64_t *)(v75 + 24);
          }
        }
        else
        {
          *(void *)(v69 + 16) = v69;
          *(void *)(v69 + 24) = 0;
        }
        uint64_t *v73 = v69;
      }
      v69 += 32;
      v71 -= 32;
    }
    while (v71);
  }
  uint64_t v59 = *(void *)(v57 + 728);
  if (v59) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v59 + 24))(v59, v55);
  }
  unint64_t v60 = *v51 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v55 = v60 | *(void *)v55 & 7;
  *((void *)v55 + 1) = v51;
  *(void *)(v60 + 8) = v55;
  *uint64_t v51 = *v51 & 7 | (unint64_t)v55;
  *((void *)&v103 + 1) = 0;
  long long v104 = 0uLL;
  LODWORD(v103) = 0x1000000;
  DWORD1(v103) = a3;
  llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = 0;
  llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
  *((void *)&v103 + 1) = 0;
  long long v104 = 0uLL;
  LODWORD(v103) = 0;
  DWORD1(v103) = v98;
  llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = v99;
  llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
  *((void *)&v103 + 1) = 0;
  long long v104 = 0uLL;
  LODWORD(v103) = 0;
  DWORD1(v103) = v35;
  llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = 0;
  llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
  if (*(unsigned char *)(a1[32] + 280))
  {
    LODWORD(v103) = 1;
    *((void *)&v103 + 1) = 0;
    *(void *)&long long v104 = 1;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
    long long v104 = 0uLL;
    long long v103 = 0x200000000uLL;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
    *((void *)&v103 + 1) = 0;
    long long v104 = 0uLL;
    LODWORD(v103) = 0x2000000;
    DWORD1(v103) = v35;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
    unint64_t v61 = (unsigned int *)*((void *)v55 + 4);
    v61[64] = v61[64] & 0xFF0FFFFF | 0x100000;
    unsigned int *v61 = *v61 & 0xFF0FFFFF | 0x900000;
  }
  else
  {
    LODWORD(v103) = 1;
    *((void *)&v103 + 1) = 0;
    *(void *)&long long v104 = 0;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
    long long v103 = 0u;
    long long v104 = 0u;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v103);
  }
  return v10;
}

BOOL sub_1CB863AC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(*(void *)a2 + 8)) {
    return 0;
  }
  int v4 = a4;
  int v5 = a3;
  int v8 = *(_DWORD *)(a2 + 20);
  uint64_t v9 = (v8 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v8 & 0x7FFFFFF);
  if (*(unsigned char *)(**(void **)v9 + 8) != 2) {
    return 0;
  }
  BOOL v10 = 1;
  if ((sub_1CB861840(a1, a2, a3, 1, a4) & 1) == 0)
  {
    unsigned __int8 v72 = 0;
    int v11 = *(_DWORD *)(a2 + 20);
    BOOL v12 = (v11 & 0x40000000) != 0 ? *(unsigned char ***)(a2 - 8) : (unsigned char **)(a2 - 32 * (v11 & 0x7FFFFFF));
    int v14 = sub_1CB8843D8((uint64_t)a1, *v12, 1, 0, 0);
    int v15 = *(_DWORD *)(a2 + 20);
    int v16 = (v15 & 0x40000000) != 0 ? *(unsigned char ***)(a2 - 8) : (unsigned char **)(a2 - 32 * (v15 & 0x7FFFFFF));
    uint64_t v71 = *v16;
    unsigned int v70 = 0;
    int v17 = sub_1CB88467C((uint64_t)a1, (uint64_t *)&v71, (int *)&v70, &v72, v14, *(void *)(a2 + 40), 7, 1);
    BOOL v10 = v17 != 0;
    if (v17)
    {
      int v18 = v17;
      if (v14)
      {
        unsigned int v19 = 949;
        if (v4 == 1) {
          unsigned int v19 = 946;
        }
LABEL_19:
        uint64_t v20 = a1[4];
        uint64_t v21 = *(void *)(v20 + 640);
        uint64_t v22 = *(unint64_t **)(v20 + 648);
        uint64_t v23 = *(void *)(a1[12] + 8) + 48 * v19;
        uint64_t v24 = *(llvm::MachineFunction **)(v21 + 32);
        uint64_t v25 = (unsigned __int8 *)a1[9];
        uint64_t v68 = v25;
        if (v25) {
          llvm::MetadataTracking::track((uint64_t)&v68, v25, 2);
        }
        uint64_t v26 = llvm::MachineFunction::CreateMachineInstr(v24, v23, &v68, 0);
        if (!v68) {
          goto LABEL_22;
        }
        int v60 = *v68;
        if ((v60 - 4) > 0x1E)
        {
          if ((v60 - 3) >= 0xFFFFFFFE) {
            uint64_t v66 = v68;
          }
          else {
            uint64_t v66 = 0;
          }
          if ((v60 - 3) < 0xFFFFFFFE)
          {
            if (v60 == 3) {
              *((void *)v68 + 1) = 0;
            }
            goto LABEL_22;
          }
          unint64_t v62 = (unint64_t)(v66 + 8);
        }
        else
        {
          if ((v68[1] & 0x7F) != 2 && !*((_DWORD *)v68 + 3)) {
            goto LABEL_22;
          }
          uint64_t v61 = *((void *)v68 + 2);
          if ((v61 & 4) == 0) {
            goto LABEL_22;
          }
          unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFF8;
          if (!v62) {
            goto LABEL_22;
          }
        }
        *(void *)&long long v73 = &v68;
        sub_1CC5FA668(v62 + 16, &v73);
LABEL_22:
        uint64_t v27 = *(void *)(v21 + 40);
        *((void *)v26 + 3) = v27;
        uint64_t v28 = *(void *)(v27 + 32);
        uint64_t v29 = *((unsigned int *)v26 + 10);
        if (v29)
        {
          uint64_t v46 = *((void *)v26 + 4);
          uint64_t v47 = *(void *)(v28 + 40);
          uint64_t v48 = 32 * v29;
          do
          {
            if (!*(unsigned char *)v46)
            {
              uint64_t v49 = *(unsigned int *)(v46 + 4);
              if ((int)v49 >= 0) {
                uint64_t v50 = (uint64_t *)(*(void *)(v47 + 272) + 8 * v49);
              }
              else {
                uint64_t v50 = (uint64_t *)(*(void *)(v47 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
              }
              uint64_t v51 = *v50;
              if (*v50)
              {
                uint64_t v52 = *(void *)(v51 + 16);
                *(void *)(v51 + 16) = v46;
                *(void *)(v46 + 16) = v52;
                if (*(unsigned char *)(v46 + 3))
                {
                  *(void *)(v46 + 24) = v51;
                }
                else
                {
                  *(void *)(v46 + 24) = 0;
                  uint64_t v50 = (uint64_t *)(v52 + 24);
                }
              }
              else
              {
                *(void *)(v46 + 16) = v46;
                *(void *)(v46 + 24) = 0;
              }
              uint64_t *v50 = v46;
            }
            v46 += 32;
            v48 -= 32;
          }
          while (v48);
        }
        uint64_t v30 = *(void *)(v28 + 728);
        if (v30) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v30 + 24))(v30, v26);
        }
        unint64_t v31 = *v22 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v26 = v31 | *(void *)v26 & 7;
        *((void *)v26 + 1) = v22;
        *(void *)(v31 + 8) = v26;
        *uint64_t v22 = *v22 & 7 | (unint64_t)v26;
        *((void *)&v73 + 1) = 0;
        long long v74 = 0uLL;
        LODWORD(v73) = 0x1000000;
        DWORD1(v73) = v5;
        llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v73);
        LODWORD(v73) = 1;
        *((void *)&v73 + 1) = 0;
        *(void *)&long long v74 = 0;
        llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v73);
        uint64_t v68 = (unsigned __int8 *)v24;
        uint64_t v69 = v26;
        if ((sub_1CB8843D8((uint64_t)a1, v71, v14, (llvm::MachineFunction **)&v68, 0) & 1) == 0)
        {
          *((void *)&v73 + 1) = 0;
          long long v74 = 0uLL;
          LODWORD(v73) = 0;
          DWORD1(v73) = v18;
          llvm::MachineInstr::addOperand(v69, (llvm::MachineFunction *)v68, (const llvm::MachineOperand *)&v73);
        }
        LODWORD(v73) = 1;
        *((void *)&v73 + 1) = 0;
        *(void *)&long long v74 = v70;
        llvm::MachineInstr::addOperand(v69, (llvm::MachineFunction *)v68, (const llvm::MachineOperand *)&v73);
        LODWORD(v73) = 1;
        *((void *)&v73 + 1) = 0;
        *(void *)&long long v74 = 0x100008000;
        llvm::MachineInstr::addOperand(v69, (llvm::MachineFunction *)v68, (const llvm::MachineOperand *)&v73);
        LODWORD(v73) = 1;
        *((void *)&v73 + 1) = 0;
        *(void *)&long long v74 = 0;
        llvm::MachineInstr::addOperand(v69, (llvm::MachineFunction *)v68, (const llvm::MachineOperand *)&v73);
        unsigned int v33 = (llvm::MachineFunction *)v68;
        unint64_t v32 = v69;
        long long v73 = 0u;
        long long v74 = 0u;
        goto LABEL_28;
      }
      unsigned int v19 = word_1CD91C0D8[2 * v4 + v72];
      if (v4 || !v72) {
        goto LABEL_19;
      }
      uint64_t v34 = a1[4];
      uint64_t v35 = *(void *)(v34 + 640);
      uint64_t v36 = *(unint64_t **)(v34 + 648);
      uint64_t v37 = *(void *)(a1[12] + 8) + 912;
      uint64_t v38 = *(llvm::MachineFunction **)(v35 + 32);
      uint64_t v39 = (unsigned __int8 *)a1[9];
      uint64_t v68 = v39;
      if (v39) {
        llvm::MetadataTracking::track((uint64_t)&v68, v39, 2);
      }
      uint64_t v40 = llvm::MachineFunction::CreateMachineInstr(v38, v37, &v68, 0);
      if (!v68) {
        goto LABEL_34;
      }
      int v63 = *v68;
      if ((v63 - 4) > 0x1E)
      {
        if ((v63 - 3) >= 0xFFFFFFFE) {
          uint64_t v67 = v68;
        }
        else {
          uint64_t v67 = 0;
        }
        if ((v63 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v65 = (unint64_t)(v67 + 8);
LABEL_90:
          *(void *)&long long v73 = &v68;
          sub_1CC5FA668(v65 + 16, &v73);
          goto LABEL_34;
        }
        if (v63 == 3) {
          *((void *)v68 + 1) = 0;
        }
      }
      else if ((v68[1] & 0x7F) == 2 || *((_DWORD *)v68 + 3))
      {
        uint64_t v64 = *((void *)v68 + 2);
        if ((v64 & 4) != 0)
        {
          unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
          if (v65) {
            goto LABEL_90;
          }
        }
      }
LABEL_34:
      uint64_t v41 = *(void *)(v35 + 40);
      *((void *)v40 + 3) = v41;
      uint64_t v42 = *(void *)(v41 + 32);
      uint64_t v43 = *((unsigned int *)v40 + 10);
      if (v43)
      {
        uint64_t v53 = *((void *)v40 + 4);
        uint64_t v54 = *(void *)(v42 + 40);
        uint64_t v55 = 32 * v43;
        do
        {
          if (!*(unsigned char *)v53)
          {
            uint64_t v56 = *(unsigned int *)(v53 + 4);
            if ((int)v56 >= 0) {
              uint64_t v57 = (uint64_t *)(*(void *)(v54 + 272) + 8 * v56);
            }
            else {
              uint64_t v57 = (uint64_t *)(*(void *)(v54 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
            }
            uint64_t v58 = *v57;
            if (*v57)
            {
              uint64_t v59 = *(void *)(v58 + 16);
              *(void *)(v58 + 16) = v53;
              *(void *)(v53 + 16) = v59;
              if (*(unsigned char *)(v53 + 3))
              {
                *(void *)(v53 + 24) = v58;
              }
              else
              {
                *(void *)(v53 + 24) = 0;
                uint64_t v57 = (uint64_t *)(v59 + 24);
              }
            }
            else
            {
              *(void *)(v53 + 16) = v53;
              *(void *)(v53 + 24) = 0;
            }
            *uint64_t v57 = v53;
          }
          v53 += 32;
          v55 -= 32;
        }
        while (v55);
      }
      uint64_t v44 = *(void *)(v42 + 728);
      if (v44) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v44 + 24))(v44, v40);
      }
      unint64_t v45 = *v36 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v40 = v45 | *(void *)v40 & 7;
      *((void *)v40 + 1) = v36;
      *(void *)(v45 + 8) = v40;
      unint64_t *v36 = *v36 & 7 | (unint64_t)v40;
      *((void *)&v73 + 1) = 0;
      long long v74 = 0uLL;
      LODWORD(v73) = 0x1000000;
      DWORD1(v73) = v5;
      llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v73);
      uint64_t v68 = (unsigned __int8 *)v38;
      uint64_t v69 = v40;
      if ((sub_1CB8843D8((uint64_t)a1, v71, 0, (llvm::MachineFunction **)&v68, 0) & 1) == 0)
      {
        unsigned int v33 = (llvm::MachineFunction *)v68;
        unint64_t v32 = v69;
        *((void *)&v73 + 1) = 0;
        long long v74 = 0uLL;
        LODWORD(v73) = 0;
        DWORD1(v73) = v18;
LABEL_28:
        llvm::MachineInstr::addOperand(v32, v33, (const llvm::MachineOperand *)&v73);
      }
    }
  }
  return v10;
}

uint64_t sub_1CB8640DC(uint64_t a1, uint64_t *a2, int a3, char a4, int a5, unsigned int a6)
{
  uint64_t v195 = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int8 *)(*a2 + 8);
  if ((v6 | 2) != 2) {
    return 0;
  }
  uint64_t v13 = **(void **)*a2;
  int v14 = *(unsigned __int8 *)(a1 + 280);
  if (a6 != 1) {
    goto LABEL_5;
  }
  if (!*(unsigned char *)(a1 + 280)) {
    return 0;
  }
  int v14 = 1;
LABEL_5:
  if (v14) {
    BOOL v15 = a5 == 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15 && (a4 & 1) != 0) {
    return 0;
  }
  int v17 = *((_DWORD *)a2 + 5);
  if ((v17 & 0x40000000) != 0) {
    int v18 = (uint64_t *)*(a2 - 1);
  }
  else {
    int v18 = &a2[-4 * (v17 & 0x7FFFFFF)];
  }
  BOOL v175 = *(unsigned char *)(*(void *)*v18 + 8) == 0;
  int v19 = *(unsigned __int8 *)(*(void *)(a1 + 256) + 281);
  int v174 = 0;
  if ((v17 & 0x40000000) != 0) {
    uint64_t v20 = (unsigned __int8 **)*(a2 - 1);
  }
  else {
    uint64_t v20 = (unsigned __int8 **)&a2[-4 * (v17 & 0x7FFFFFF)];
  }
  int v174 = *v20;
  unsigned int v173 = 0;
  uint64_t result = sub_1CB88467C(a1, (uint64_t *)&v174, (int *)&v173, &v175, 0, a2[5], 7, 1);
  unsigned int v172 = result;
  if (result)
  {
    int v166 = v19;
    int v169 = a5;
    uint64_t v21 = &unk_1CFB2E2E0;
    BOOL v22 = v175;
    if (v175) {
      uint64_t v23 = &unk_1CFB2E2E0;
    }
    else {
      uint64_t v23 = &unk_1CFB2E308;
    }
    uint64_t v170 = v23;
    if (a5 != 1) {
      uint64_t v21 = &unk_1CFB2E308;
    }
    unint64_t v165 = v21;
    uint64_t v24 = *(void *)(a1 + 48);
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v24, "", 0);
    *(void *)(*(void *)(v24 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4340;
    uint64_t v26 = *(void *)(v24 + 8);
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
    }
    if (*(unsigned char *)(a1 + 280) && (uint64_t v27 = a2[1]) != 0 && *(void *)(v27 + 8))
    {
      int v28 = 426;
      do
      {
        uint64_t v29 = *(void *)(v27 + 24);
        if (v29 && *(unsigned char *)(v29 + 16) == 74)
        {
          while (1)
          {
            uint64_t v29 = *(void *)(v29 + 8);
            if (!v29) {
              break;
            }
            uint64_t v30 = *(void *)(v29 + 24);
            unsigned int v31 = *(unsigned __int8 *)(v30 + 16);
            if (v31 == 49) {
              int v32 = 424;
            }
            else {
              int v32 = v28;
            }
            if (v31 >= 0x1C && v30 != 0) {
              int v28 = v32;
            }
          }
        }
        uint64_t v27 = *(void *)(v27 + 8);
      }
      while (v27);
    }
    else
    {
      int v28 = 426;
    }
    int v34 = *((_DWORD *)a2 + 5);
    uint64_t v35 = (v34 & 0x40000000) != 0 ? (uint64_t *)*(a2 - 1) : &a2[-4 * (v34 & 0x7FFFFFF)];
    int v36 = sub_1CD3CEE74(a1, a2, (unsigned char *)*v35, IncompleteVirtualRegister, v28, 0);
    uint64_t result = 0;
    if (v36)
    {
      int v171 = a3;
      BYTE12(v194) = BYTE12(v194) & 0xF0 | 3;
      if (v22) {
        int v37 = -15;
      }
      else {
        int v37 = -127;
      }
      int v164 = v37;
      DWORD2(v194) = v37;
      *((void *)&v193 + 1) = v170;
      *(void *)&long long v194 = 0;
      sub_1CB87E670((uint64_t)&v193, 0);
      uint64_t v39 = llvm::ConstantFP::get(*(llvm::ConstantFP **)*a2, (llvm::LLVMContext *)&v193, v38);
      uint64_t v41 = llvm::ConstantFP::get((llvm::ConstantFP **)(v13 + 1672), v40, 0.0);
      BOOL v42 = v175;
      if (v175) {
        unsigned int v43 = 3;
      }
      else {
        unsigned int v43 = 0;
      }
      uint64_t v191 = 0;
      uint64_t v192 = 0;
      int v189 = v174;
      uint64_t v190 = 0;
      uint64_t v179 = v172;
      LODWORD(v180) = 0;
      HIDWORD(v180) = IncompleteVirtualRegister;
      unsigned int v185 = 0;
      int v186 = v39;
      uint64_t v187 = v41;
      uint64_t v188 = 0;
      long long v184 = xmmword_1CD91C160;
      if (v166)
      {
        uint64_t v187 = 0;
        uint64_t v188 = v41;
        unsigned int v44 = 10;
        int v45 = 3;
        unsigned int v180 = (const llvm::detail::DoubleAPFloat *)IncompleteVirtualRegister;
      }
      else
      {
        unsigned int v44 = 6;
        int v45 = 4;
      }
      int v46 = v171;
      if ((a4 & 1) == 0)
      {
        unsigned int v167 = v43;
        uint64_t v47 = *(void *)(a1 + 48);
        int v46 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v47, "", 0);
        *(void *)(*(void *)(v47 + 24) + 16 * (v46 & 0x7FFFFFFF)) = &off_1E66A4340;
        uint64_t v48 = *(void *)(v47 + 8);
        if (v48) {
          (*(void (**)(uint64_t))(*(void *)v48 + 24))(v48);
        }
        unsigned int v43 = v167;
      }
      sub_1CB887A74((void *)a1, v45, v44, v43, v46, v42, 0, (uint64_t)&v189, (int *)&v179, &v185, (unsigned int *)&v184);
      if (*((_UNKNOWN **)&v193 + 1) == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v194);
        int v49 = v171;
      }
      else
      {
        int v49 = v171;
        if ((*(_DWORD *)(*((void *)&v193 + 1) + 8) - 64) <= 0xFFFFFF7F && (void)v194) {
          MEMORY[0x1D25D9CB0](v194, 0x1000C8000313F17);
        }
      }
      if (a4) {
        return 1;
      }
      if (!*(unsigned char *)(a1 + 280))
      {
        uint64_t v50 = *(void *)(a1 + 48);
        int v51 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v50, "", 0);
        int v49 = v51;
        uint64_t v52 = &off_1E66A4180;
        if (v169 != 1) {
          uint64_t v52 = &off_1E66A4340;
        }
        *(void *)(*(void *)(v50 + 24) + 16 * (v51 & 0x7FFFFFFF)) = v52;
        uint64_t v53 = *(void *)(v50 + 8);
        if (v53) {
          (*(void (**)(uint64_t))(*(void *)v53 + 24))(v53);
        }
      }
      int v168 = v49;
      int v54 = v46;
      uint64_t v55 = *(void *)(a1 + 32);
      uint64_t v56 = *(void *)(v55 + 640);
      uint64_t v57 = *(unint64_t **)(v55 + 648);
      uint64_t v58 = *(void *)(*(void *)(a1 + 96) + 8) + 48 * word_1CD91C170[4 * (v169 == 1) + 2 * v175 + a6];
      uint64_t v59 = *(llvm::MachineFunction **)(v56 + 32);
      int v60 = *(unsigned __int8 **)(a1 + 72);
      int v189 = v60;
      if (v60) {
        llvm::MetadataTracking::track((uint64_t)&v189, v60, 2);
      }
      uint64_t v61 = llvm::MachineFunction::CreateMachineInstr(v59, v58, &v189, 0);
      if (!v189)
      {
LABEL_74:
        uint64_t v62 = *(void *)(v56 + 40);
        *((void *)v61 + 3) = v62;
        uint64_t v63 = *(void *)(v62 + 32);
        uint64_t v64 = *((unsigned int *)v61 + 10);
        if (v64)
        {
          uint64_t v119 = *((void *)v61 + 4);
          uint64_t v120 = *(void *)(v63 + 40);
          uint64_t v121 = 32 * v64;
          do
          {
            if (!*(unsigned char *)v119)
            {
              uint64_t v122 = *(unsigned int *)(v119 + 4);
              if ((int)v122 >= 0) {
                uint64_t v123 = (uint64_t *)(*(void *)(v120 + 272) + 8 * v122);
              }
              else {
                uint64_t v123 = (uint64_t *)(*(void *)(v120 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8);
              }
              uint64_t v124 = *v123;
              if (*v123)
              {
                uint64_t v125 = *(void *)(v124 + 16);
                *(void *)(v124 + 16) = v119;
                *(void *)(v119 + 16) = v125;
                if (*(unsigned char *)(v119 + 3))
                {
                  *(void *)(v119 + 24) = v124;
                }
                else
                {
                  *(void *)(v119 + 24) = 0;
                  uint64_t v123 = (uint64_t *)(v125 + 24);
                }
              }
              else
              {
                *(void *)(v119 + 16) = v119;
                *(void *)(v119 + 24) = 0;
              }
              uint64_t *v123 = v119;
            }
            v119 += 32;
            v121 -= 32;
          }
          while (v121);
        }
        uint64_t v65 = *(void *)(v63 + 728);
        if (v65) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v65 + 24))(v65, v61);
        }
        unint64_t v66 = *v57 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v61 = v66 | *(void *)v61 & 7;
        *((void *)v61 + 1) = v57;
        *(void *)(v66 + 8) = v61;
        *uint64_t v57 = *v57 & 7 | (unint64_t)v61;
        *((void *)&v193 + 1) = 0;
        long long v194 = 0uLL;
        LODWORD(v193) = 0x1000000;
        DWORD1(v193) = v168;
        llvm::MachineInstr::addOperand(v61, v59, (const llvm::MachineOperand *)&v193);
        LODWORD(v193) = 1;
        *((void *)&v193 + 1) = 0;
        *(void *)&long long v194 = 0;
        llvm::MachineInstr::addOperand(v61, v59, (const llvm::MachineOperand *)&v193);
        *((void *)&v193 + 1) = 0;
        long long v194 = 0uLL;
        LODWORD(v193) = 0;
        DWORD1(v193) = v54;
        llvm::MachineInstr::addOperand(v61, v59, (const llvm::MachineOperand *)&v193);
        LODWORD(v193) = 1;
        *((void *)&v193 + 1) = 0;
        *(void *)&long long v194 = 0;
        llvm::MachineInstr::addOperand(v61, v59, (const llvm::MachineOperand *)&v193);
        *(void *)&long long v184 = v59;
        *((void *)&v184 + 1) = v61;
        if ((sub_1CB8843D8(a1, v174, 0, (llvm::MachineFunction **)&v184, 0) & 1) == 0)
        {
          *((void *)&v193 + 1) = 0;
          long long v194 = 0uLL;
          LODWORD(v193) = 0;
          DWORD1(v193) = v172;
          llvm::MachineInstr::addOperand(*((llvm::MachineInstr **)&v184 + 1), (llvm::MachineFunction *)v184, (const llvm::MachineOperand *)&v193);
        }
        LODWORD(v193) = 1;
        *((void *)&v193 + 1) = 0;
        *(void *)&long long v194 = v173;
        llvm::MachineInstr::addOperand(*((llvm::MachineInstr **)&v184 + 1), (llvm::MachineFunction *)v184, (const llvm::MachineOperand *)&v193);
        LODWORD(v193) = 1;
        *((void *)&v193 + 1) = 0;
        *(void *)&long long v194 = 0;
        llvm::MachineInstr::addOperand(*((llvm::MachineInstr **)&v184 + 1), (llvm::MachineFunction *)v184, (const llvm::MachineOperand *)&v193);
        long long v193 = 0u;
        long long v194 = 0u;
        llvm::MachineInstr::addOperand(*((llvm::MachineInstr **)&v184 + 1), (llvm::MachineFunction *)v184, (const llvm::MachineOperand *)&v193);
        if (*(unsigned char *)(a1 + 280)) {
          return 1;
        }
        if (v169 == 1 || !v6 || !*(unsigned char *)(*(void *)(a1 + 256) + 300))
        {
          int v98 = v168;
LABEL_109:
          BYTE12(v194) = BYTE12(v194) & 0xF0 | 3;
          DWORD2(v194) = v164;
          *((void *)&v193 + 1) = v170;
          *(void *)&long long v194 = 0;
          sub_1CB87E774((uint64_t)&v193, 0);
          BYTE4(v192) = BYTE4(v192) & 0xF0 | 3;
          if (v169 == 1) {
            int v112 = -15;
          }
          else {
            int v112 = -127;
          }
          LODWORD(v192) = v112;
          uint64_t v190 = v165;
          uint64_t v191 = 0;
          sub_1CB87E790((uint64_t)&v189, 0);
          int v114 = llvm::ConstantFP::get(*(llvm::ConstantFP **)*a2, (llvm::LLVMContext *)&v193, v113);
          long long v116 = llvm::ConstantFP::get(*(llvm::ConstantFP **)*a2, (llvm::LLVMContext *)&v189, v115);
          uint64_t v187 = 0;
          uint64_t v188 = 0;
          unsigned int v185 = v174;
          int v186 = 0;
          v183[0] = v172;
          v183[1] = 0;
          v183[2] = 0;
          v183[3] = v98;
          uint64_t v179 = 0;
          unsigned int v180 = v114;
          unsigned int v181 = v116;
          uint64_t v182 = 0;
          unsigned int v176 = v173;
          uint64_t v177 = 2;
          int v178 = 0;
          if (v169 == 1 && v175)
          {
            sub_1CB88E8A4((void *)a1, 2, 6u, 0, v171, (uint64_t)&v185, (uint64_t)v183, (uint64_t)&v179, (uint64_t)&v176);
          }
          else
          {
            if (v175) {
              int v117 = 3;
            }
            else {
              int v117 = 0;
            }
            if (v169 == 1) {
              int v118 = 12;
            }
            else {
              int v118 = 0;
            }
            sub_1CB887A74((void *)a1, 2, 6u, v117 | v118, v171, v175, v169 == 1, (uint64_t)&v185, v183, &v179, &v176);
          }
          if (v190 == (_DWORD *)&unk_1CFB2E344)
          {
            sub_1CB845718(&v191);
          }
          else if ((v190[2] - 64) <= 0xFFFFFF7F && v191)
          {
            MEMORY[0x1D25D9CB0](v191, 0x1000C8000313F17);
          }
          if (*((_UNKNOWN **)&v193 + 1) == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v194);
          }
          else if ((*(_DWORD *)(*((void *)&v193 + 1) + 8) - 64) <= 0xFFFFFF7F)
          {
            if ((void)v194) {
              MEMORY[0x1D25D9CB0](v194, 0x1000C8000313F17);
            }
          }
          return 1;
        }
        uint64_t v67 = *(void *)(a1 + 48);
        int v163 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v67, "", 0);
        *(void *)(*(void *)(v67 + 24) + 16 * (v163 & 0x7FFFFFFF)) = &off_1E66A4340;
        uint64_t v68 = *(void *)(v67 + 8);
        if (v68) {
          (*(void (**)(uint64_t))(*(void *)v68 + 24))(v68);
        }
        uint64_t v69 = *(void *)(a1 + 32);
        uint64_t v70 = *(void *)(v69 + 640);
        uint64_t v71 = *(unint64_t **)(v69 + 648);
        uint64_t v72 = *(void *)(*(void *)(a1 + 96) + 8) + 61872;
        long long v73 = *(llvm::MachineFunction **)(v70 + 32);
        long long v74 = *(unsigned __int8 **)(a1 + 72);
        int v189 = v74;
        if (v74) {
          llvm::MetadataTracking::track((uint64_t)&v189, v74, 2);
        }
        uint64_t v75 = llvm::MachineFunction::CreateMachineInstr(v73, v72, &v189, 0);
        if (!v189)
        {
LABEL_88:
          uint64_t v76 = *(void *)(v70 + 40);
          *((void *)v75 + 3) = v76;
          uint64_t v77 = *(void *)(v76 + 32);
          uint64_t v78 = *((unsigned int *)v75 + 10);
          int v79 = v163;
          if (v78)
          {
            uint64_t v126 = *((void *)v75 + 4);
            uint64_t v127 = *(void *)(v77 + 40);
            uint64_t v128 = 32 * v78;
            do
            {
              if (!*(unsigned char *)v126)
              {
                uint64_t v129 = *(unsigned int *)(v126 + 4);
                if ((int)v129 >= 0) {
                  int v130 = (uint64_t *)(*(void *)(v127 + 272) + 8 * v129);
                }
                else {
                  int v130 = (uint64_t *)(*(void *)(v127 + 24) + 16 * (v129 & 0x7FFFFFFF) + 8);
                }
                uint64_t v131 = *v130;
                if (*v130)
                {
                  uint64_t v132 = *(void *)(v131 + 16);
                  *(void *)(v131 + 16) = v126;
                  *(void *)(v126 + 16) = v132;
                  if (*(unsigned char *)(v126 + 3))
                  {
                    *(void *)(v126 + 24) = v131;
                  }
                  else
                  {
                    *(void *)(v126 + 24) = 0;
                    int v130 = (uint64_t *)(v132 + 24);
                  }
                }
                else
                {
                  *(void *)(v126 + 16) = v126;
                  *(void *)(v126 + 24) = 0;
                }
                *int v130 = v126;
              }
              v126 += 32;
              v128 -= 32;
            }
            while (v128);
          }
          uint64_t v80 = *(void *)(v77 + 728);
          if (v80) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v80 + 24))(v80, v75);
          }
          unint64_t v81 = *v71 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v75 = v81 | *(void *)v75 & 7;
          *((void *)v75 + 1) = v71;
          *(void *)(v81 + 8) = v75;
          unint64_t *v71 = *v71 & 7 | (unint64_t)v75;
          *((void *)&v193 + 1) = 0;
          long long v194 = 0uLL;
          LODWORD(v193) = 0x1000000;
          DWORD1(v193) = v163;
          llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v193);
          LODWORD(v193) = 1;
          *((void *)&v193 + 1) = 0;
          *(void *)&long long v194 = 0;
          llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v193);
          *((void *)&v193 + 1) = 0;
          long long v194 = 0uLL;
          LODWORD(v193) = 0;
          DWORD1(v193) = v54;
          llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v193);
          LODWORD(v193) = 1;
          *((void *)&v193 + 1) = 0;
          *(void *)&long long v194 = 0;
          llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v193);
          LODWORD(v193) = 1;
          *((void *)&v193 + 1) = 0;
          *(void *)&long long v194 = 0x10000B800;
          llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v193);
          LODWORD(v193) = 1;
          *((void *)&v193 + 1) = 0;
          *(void *)&long long v194 = 0;
          llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v193);
          long long v193 = 0u;
          long long v194 = 0u;
          llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v193);
          uint64_t v82 = *(void *)(a1 + 48);
          int v83 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v82, "", 0);
          *(void *)(*(void *)(v82 + 24) + 16 * (v83 & 0x7FFFFFFF)) = &off_1E66A4340;
          uint64_t v84 = *(void *)(v82 + 8);
          if (v84) {
            (*(void (**)(uint64_t))(*(void *)v84 + 24))(v84);
          }
          uint64_t v85 = *(void *)(a1 + 32);
          uint64_t v86 = *(void *)(v85 + 640);
          uint64_t v87 = *(unint64_t **)(v85 + 648);
          uint64_t v88 = *(void *)(*(void *)(a1 + 96) + 8) + 58416;
          int v89 = *(llvm::MachineFunction **)(v86 + 32);
          uint64_t v90 = *(unsigned __int8 **)(a1 + 72);
          int v189 = v90;
          if (v90) {
            llvm::MetadataTracking::track((uint64_t)&v189, v90, 2);
          }
          unint64_t v91 = llvm::MachineFunction::CreateMachineInstr(v89, v88, &v189, 0);
          if (!v189)
          {
LABEL_96:
            uint64_t v92 = *(void *)(v86 + 40);
            *((void *)v91 + 3) = v92;
            uint64_t v93 = *(void *)(v92 + 32);
            uint64_t v94 = *((unsigned int *)v91 + 10);
            if (v94)
            {
              uint64_t v133 = *((void *)v91 + 4);
              uint64_t v134 = *(void *)(v93 + 40);
              uint64_t v135 = 32 * v94;
              do
              {
                if (!*(unsigned char *)v133)
                {
                  uint64_t v136 = *(unsigned int *)(v133 + 4);
                  if ((int)v136 >= 0) {
                    uint64_t v137 = (uint64_t *)(*(void *)(v134 + 272) + 8 * v136);
                  }
                  else {
                    uint64_t v137 = (uint64_t *)(*(void *)(v134 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v138 = *v137;
                  if (*v137)
                  {
                    uint64_t v139 = *(void *)(v138 + 16);
                    *(void *)(v138 + 16) = v133;
                    *(void *)(v133 + 16) = v139;
                    if (*(unsigned char *)(v133 + 3))
                    {
                      *(void *)(v133 + 24) = v138;
                    }
                    else
                    {
                      *(void *)(v133 + 24) = 0;
                      uint64_t v137 = (uint64_t *)(v139 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v133 + 16) = v133;
                    *(void *)(v133 + 24) = 0;
                  }
                  uint64_t *v137 = v133;
                }
                v133 += 32;
                v135 -= 32;
              }
              while (v135);
            }
            uint64_t v95 = *(void *)(v93 + 728);
            if (v95) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v95 + 24))(v95, v91);
            }
            unint64_t v96 = *v87 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v91 = v96 | *(void *)v91 & 7;
            *((void *)v91 + 1) = v87;
            *(void *)(v96 + 8) = v91;
            *uint64_t v87 = *v87 & 7 | (unint64_t)v91;
            *((void *)&v193 + 1) = 0;
            long long v194 = 0uLL;
            LODWORD(v193) = 0x1000000;
            DWORD1(v193) = v83;
            llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0;
            llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v193);
            *((void *)&v193 + 1) = 0;
            long long v194 = 0uLL;
            LODWORD(v193) = 0;
            DWORD1(v193) = v79;
            llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0;
            llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v193);
            *((void *)&v193 + 1) = 0;
            long long v194 = 0uLL;
            LODWORD(v193) = 0;
            DWORD1(v193) = v168;
            llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0;
            llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0x100003800;
            llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0;
            llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v193);
            long long v193 = 0u;
            long long v194 = 0u;
            llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v193);
            uint64_t v97 = *(void *)(a1 + 48);
            int v98 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v97, "", 0);
            *(void *)(*(void *)(v97 + 24) + 16 * (v98 & 0x7FFFFFFF)) = &off_1E66A4340;
            uint64_t v99 = *(void *)(v97 + 8);
            if (v99) {
              (*(void (**)(uint64_t))(*(void *)v99 + 24))(v99);
            }
            uint64_t v100 = *(void *)(a1 + 32);
            uint64_t v101 = *(void *)(v100 + 640);
            uint64_t v102 = *(unint64_t **)(v100 + 648);
            uint64_t v103 = *(void *)(*(void *)(a1 + 96) + 8) + 58320;
            long long v104 = *(llvm::MachineFunction **)(v101 + 32);
            unint64_t v105 = *(unsigned __int8 **)(a1 + 72);
            int v189 = v105;
            if (v105) {
              llvm::MetadataTracking::track((uint64_t)&v189, v105, 2);
            }
            int v106 = llvm::MachineFunction::CreateMachineInstr(v104, v103, &v189, 0);
            if (!v189) {
              goto LABEL_104;
            }
            int v157 = *v189;
            if ((v157 - 4) > 0x1E)
            {
              if ((v157 - 3) >= 0xFFFFFFFE) {
                uint64_t v162 = v189;
              }
              else {
                uint64_t v162 = 0;
              }
              if ((v157 - 3) < 0xFFFFFFFE)
              {
                if (v157 == 3) {
                  *((void *)v189 + 1) = 0;
                }
                goto LABEL_104;
              }
              unint64_t v159 = (unint64_t)(v162 + 8);
            }
            else
            {
              if ((v189[1] & 0x7F) != 2 && !*((_DWORD *)v189 + 3)) {
                goto LABEL_104;
              }
              uint64_t v158 = *((void *)v189 + 2);
              if ((v158 & 4) == 0) {
                goto LABEL_104;
              }
              unint64_t v159 = v158 & 0xFFFFFFFFFFFFFFF8;
              if (!v159) {
                goto LABEL_104;
              }
            }
            *(void *)&long long v193 = &v189;
            sub_1CC5FA668(v159 + 16, &v193);
LABEL_104:
            uint64_t v107 = *(void *)(v101 + 40);
            *((void *)v106 + 3) = v107;
            uint64_t v108 = *(void *)(v107 + 32);
            uint64_t v109 = *((unsigned int *)v106 + 10);
            if (v109)
            {
              uint64_t v140 = *((void *)v106 + 4);
              uint64_t v141 = *(void *)(v108 + 40);
              uint64_t v142 = 32 * v109;
              do
              {
                if (!*(unsigned char *)v140)
                {
                  uint64_t v143 = *(unsigned int *)(v140 + 4);
                  if ((int)v143 >= 0) {
                    unint64_t v144 = (uint64_t *)(*(void *)(v141 + 272) + 8 * v143);
                  }
                  else {
                    unint64_t v144 = (uint64_t *)(*(void *)(v141 + 24) + 16 * (v143 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v145 = *v144;
                  if (*v144)
                  {
                    uint64_t v146 = *(void *)(v145 + 16);
                    *(void *)(v145 + 16) = v140;
                    *(void *)(v140 + 16) = v146;
                    if (*(unsigned char *)(v140 + 3))
                    {
                      *(void *)(v140 + 24) = v145;
                    }
                    else
                    {
                      *(void *)(v140 + 24) = 0;
                      unint64_t v144 = (uint64_t *)(v146 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v140 + 16) = v140;
                    *(void *)(v140 + 24) = 0;
                  }
                  *unint64_t v144 = v140;
                }
                v140 += 32;
                v142 -= 32;
              }
              while (v142);
            }
            uint64_t v110 = *(void *)(v108 + 728);
            if (v110) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v110 + 24))(v110, v106);
            }
            unint64_t v111 = *v102 & 0xFFFFFFFFFFFFFFF8;
            *(void *)int v106 = v111 | *(void *)v106 & 7;
            *((void *)v106 + 1) = v102;
            *(void *)(v111 + 8) = v106;
            unint64_t *v102 = *v102 & 7 | (unint64_t)v106;
            *((void *)&v193 + 1) = 0;
            long long v194 = 0uLL;
            LODWORD(v193) = 0x1000000;
            DWORD1(v193) = v98;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            *((void *)&v193 + 1) = 0;
            long long v194 = 0uLL;
            LODWORD(v193) = 0;
            DWORD1(v193) = v168;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            *((void *)&v193 + 1) = 0;
            long long v194 = 0uLL;
            LODWORD(v193) = 0;
            DWORD1(v193) = v83;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            *((void *)&v193 + 1) = 0;
            long long v194 = 0uLL;
            LODWORD(v193) = 0;
            DWORD1(v193) = v168;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            LODWORD(v193) = 1;
            *((void *)&v193 + 1) = 0;
            *(void *)&long long v194 = 0;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            long long v193 = 0u;
            long long v194 = 0u;
            llvm::MachineInstr::addOperand(v106, v104, (const llvm::MachineOperand *)&v193);
            goto LABEL_109;
          }
          int v154 = *v189;
          if ((v154 - 4) > 0x1E)
          {
            if ((v154 - 3) >= 0xFFFFFFFE) {
              uint64_t v161 = v189;
            }
            else {
              uint64_t v161 = 0;
            }
            if ((v154 - 3) < 0xFFFFFFFE)
            {
              int v79 = v163;
              if (v154 == 3) {
                *((void *)v189 + 1) = 0;
              }
              goto LABEL_96;
            }
            unint64_t v156 = (unint64_t)(v161 + 8);
          }
          else
          {
            int v79 = v163;
            if ((v189[1] & 0x7F) != 2 && !*((_DWORD *)v189 + 3)) {
              goto LABEL_96;
            }
            uint64_t v155 = *((void *)v189 + 2);
            if ((v155 & 4) == 0) {
              goto LABEL_96;
            }
            unint64_t v156 = v155 & 0xFFFFFFFFFFFFFFF8;
            if (!v156) {
              goto LABEL_96;
            }
          }
          *(void *)&long long v193 = &v189;
          sub_1CC5FA668(v156 + 16, &v193);
          int v79 = v163;
          goto LABEL_96;
        }
        int v151 = *v189;
        if ((v151 - 4) > 0x1E)
        {
          if ((v151 - 3) >= 0xFFFFFFFE) {
            int64_t v160 = v189;
          }
          else {
            int64_t v160 = 0;
          }
          if ((v151 - 3) < 0xFFFFFFFE)
          {
            if (v151 == 3) {
              *((void *)v189 + 1) = 0;
            }
            goto LABEL_88;
          }
          unint64_t v153 = (unint64_t)(v160 + 8);
        }
        else
        {
          if ((v189[1] & 0x7F) != 2 && !*((_DWORD *)v189 + 3)) {
            goto LABEL_88;
          }
          uint64_t v152 = *((void *)v189 + 2);
          if ((v152 & 4) == 0) {
            goto LABEL_88;
          }
          unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFF8;
          if (!v153) {
            goto LABEL_88;
          }
        }
        *(void *)&long long v193 = &v189;
        sub_1CC5FA668(v153 + 16, &v193);
        goto LABEL_88;
      }
      int v147 = *v189;
      if ((v147 - 4) > 0x1E)
      {
        if ((v147 - 3) >= 0xFFFFFFFE) {
          uint64_t v150 = v189;
        }
        else {
          uint64_t v150 = 0;
        }
        if ((v147 - 3) < 0xFFFFFFFE)
        {
          if (v147 == 3) {
            *((void *)v189 + 1) = 0;
          }
          goto LABEL_74;
        }
        unint64_t v149 = (unint64_t)(v150 + 8);
      }
      else
      {
        if ((v189[1] & 0x7F) != 2 && !*((_DWORD *)v189 + 3)) {
          goto LABEL_74;
        }
        uint64_t v148 = *((void *)v189 + 2);
        if ((v148 & 4) == 0) {
          goto LABEL_74;
        }
        unint64_t v149 = v148 & 0xFFFFFFFFFFFFFFF8;
        if (!v149) {
          goto LABEL_74;
        }
      }
      *(void *)&long long v193 = &v189;
      sub_1CC5FA668(v149 + 16, &v193);
      goto LABEL_74;
    }
  }
  return result;
}

BOOL sub_1CB86545C(void *a1, uint64_t a2, int a3, int a4)
{
  int v4 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if ((v4 | 2) != 2) {
    return 0;
  }
  BOOL v39 = v4 == 0;
  uint64_t v38 = *(unsigned char **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  unsigned int v37 = 0;
  int v8 = sub_1CB88467C((uint64_t)a1, (uint64_t *)&v38, (int *)&v37, &v39, 0, *(void *)(a2 + 40), 7, 1);
  BOOL v9 = v8 != 0;
  if (v8)
  {
    int v10 = v8;
    uint64_t v11 = a1[4];
    uint64_t v12 = *(void *)(v11 + 640);
    uint64_t v13 = *(unint64_t **)(v11 + 648);
    uint64_t v14 = *(void *)(a1[12] + 8) + 48 * word_1CD91C0E0[2 * (a4 == 1) + v39];
    BOOL v15 = *(llvm::MachineFunction **)(v12 + 32);
    int v16 = (unsigned __int8 *)a1[9];
    uint64_t v35 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v35, v16, 2);
    }
    int v17 = llvm::MachineFunction::CreateMachineInstr(v15, v14, &v35, 0);
    if (!v35) {
      goto LABEL_6;
    }
    int v31 = *v35;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        int v34 = v35;
      }
      else {
        int v34 = 0;
      }
      if ((v31 - 3) < 0xFFFFFFFE)
      {
        if (v31 == 3) {
          *((void *)v35 + 1) = 0;
        }
        goto LABEL_6;
      }
      unint64_t v33 = (unint64_t)(v34 + 8);
    }
    else
    {
      if ((v35[1] & 0x7F) != 2 && !*((_DWORD *)v35 + 3)) {
        goto LABEL_6;
      }
      uint64_t v32 = *((void *)v35 + 2);
      if ((v32 & 4) == 0) {
        goto LABEL_6;
      }
      unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
      if (!v33) {
        goto LABEL_6;
      }
    }
    *(void *)&long long v40 = &v35;
    sub_1CC5FA668(v33 + 16, &v40);
LABEL_6:
    uint64_t v18 = *(void *)(v12 + 40);
    *((void *)v17 + 3) = v18;
    uint64_t v19 = *(void *)(v18 + 32);
    uint64_t v20 = *((unsigned int *)v17 + 10);
    if (v20)
    {
      uint64_t v24 = *((void *)v17 + 4);
      uint64_t v25 = *(void *)(v19 + 40);
      uint64_t v26 = 32 * v20;
      do
      {
        if (!*(unsigned char *)v24)
        {
          uint64_t v27 = *(unsigned int *)(v24 + 4);
          if ((int)v27 >= 0) {
            int v28 = (uint64_t *)(*(void *)(v25 + 272) + 8 * v27);
          }
          else {
            int v28 = (uint64_t *)(*(void *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
          }
          uint64_t v29 = *v28;
          if (*v28)
          {
            uint64_t v30 = *(void *)(v29 + 16);
            *(void *)(v29 + 16) = v24;
            *(void *)(v24 + 16) = v30;
            if (*(unsigned char *)(v24 + 3))
            {
              *(void *)(v24 + 24) = v29;
            }
            else
            {
              *(void *)(v24 + 24) = 0;
              int v28 = (uint64_t *)(v30 + 24);
            }
          }
          else
          {
            *(void *)(v24 + 16) = v24;
            *(void *)(v24 + 24) = 0;
          }
          *int v28 = v24;
        }
        v24 += 32;
        v26 -= 32;
      }
      while (v26);
    }
    uint64_t v21 = *(void *)(v19 + 728);
    if (v21) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v21 + 24))(v21, v17);
    }
    unint64_t v22 = *v13 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v17 = v22 | *(void *)v17 & 7;
    *((void *)v17 + 1) = v13;
    *(void *)(v22 + 8) = v17;
    unint64_t *v13 = *v13 & 7 | (unint64_t)v17;
    *((void *)&v40 + 1) = 0;
    long long v41 = 0uLL;
    LODWORD(v40) = 0x1000000;
    DWORD1(v40) = a3;
    llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v40);
    LODWORD(v40) = 1;
    *((void *)&v40 + 1) = 0;
    *(void *)&long long v41 = 0;
    llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v40);
    uint64_t v35 = (unsigned __int8 *)v15;
    int v36 = v17;
    if ((sub_1CB8843D8((uint64_t)a1, v38, 0, (llvm::MachineFunction **)&v35, 0) & 1) == 0)
    {
      *((void *)&v40 + 1) = 0;
      long long v41 = 0uLL;
      LODWORD(v40) = 0;
      DWORD1(v40) = v10;
      llvm::MachineInstr::addOperand(v36, (llvm::MachineFunction *)v35, (const llvm::MachineOperand *)&v40);
    }
    LODWORD(v40) = 1;
    *((void *)&v40 + 1) = 0;
    *(void *)&long long v41 = v37;
    llvm::MachineInstr::addOperand(v36, (llvm::MachineFunction *)v35, (const llvm::MachineOperand *)&v40);
    LODWORD(v40) = 1;
    *((void *)&v40 + 1) = 0;
    *(void *)&long long v41 = 0;
    llvm::MachineInstr::addOperand(v36, (llvm::MachineFunction *)v35, (const llvm::MachineOperand *)&v40);
    long long v40 = 0u;
    long long v41 = 0u;
    llvm::MachineInstr::addOperand(v36, (llvm::MachineFunction *)v35, (const llvm::MachineOperand *)&v40);
  }
  return v9;
}

uint64_t sub_1CB8657A8(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  }
  uint64_t v11 = *(void **)v10;
  unsigned int v12 = *(unsigned __int8 *)(*(void *)v10 + 16);
  if (v12 < 0x1C || v11[5] == *(void *)(a2 + 40))
  {
    char v15 = 0;
    if (v12 == 89) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v13 = v11;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    char v15 = 1;
  }
  uint64_t v16 = *v11;
  if (*(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v17 = *(void *)(a2 - 32);
    if (v17)
    {
      if (!*(unsigned char *)(v17 + 16) && *(void *)(v17 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v17 + 33) & 0x20) != 0)
      {
        int v18 = *(_DWORD *)(v17 + 36);
        if (v18 == 2094 || v18 == 2096)
        {
          uint64_t v14 = (void *)a2;
          goto LABEL_22;
        }
      }
    }
  }
  if (v14 && *(_DWORD *)(v16 + 8) == 2061)
  {
    int v9 = *((_DWORD *)v14 + 5);
LABEL_22:
    if ((v9 & 0x40000000) != 0) {
      uint64_t v19 = (uint64_t **)*(v14 - 1);
    }
    else {
      uint64_t v19 = (uint64_t **)&v14[-4 * (v9 & 0x7FFFFFF)];
    }
    uint64_t v20 = **v19;
    if (v20) {
      BOOL v21 = *(unsigned char *)(v20 + 8) == 18;
    }
    else {
      BOOL v21 = 0;
    }
    if (!v21 || *(_DWORD *)(v20 + 32) != 4 || *(_DWORD *)(*(void *)(v20 + 24) + 8) != 2061) {
      return 0;
    }
    if ((v9 & 0x40000000) != 0) {
      unint64_t v22 = (void *)*(v14 - 1);
    }
    else {
      unint64_t v22 = &v14[-4 * (v9 & 0x7FFFFFF)];
    }
    uint64_t v23 = 0;
    uint64_t v41 = v22[4];
    if (!v41 || *(unsigned char *)(v41 + 16) != 16) {
      return v23;
    }
    BOOL v42 = (unint64_t *)(v41 + 24);
    if (*(_DWORD *)(v41 + 32) >= 0x41u) {
      BOOL v42 = (unint64_t *)*v42;
    }
    unint64_t v24 = *v42;
    if (*v42 > 3) {
      return 0;
    }
    if ((v9 & 0x40000000) != 0) {
      unsigned int v43 = (uint64_t *)*(v14 - 1);
    }
    else {
      unsigned int v43 = &v14[-4 * (v9 & 0x7FFFFFF)];
    }
    uint64_t v23 = sub_1CD789230(a1, *v43);
    if (!v23) {
      return v23;
    }
    goto LABEL_38;
  }
  if ((v15 & 1) != 0 || *((unsigned char *)v13 + 16) != 66)
  {
    if ((v9 & 0x40000000) != 0) {
      long long v40 = *(uint64_t **)(a2 - 8);
    }
    else {
      long long v40 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
    }
    int v44 = sub_1CD789230(a1, *v40);
    if (v44)
    {
      int IncompleteVirtualRegister = v44;
      LOBYTE(v24) = 0;
      goto LABEL_60;
    }
    return 0;
  }
  uint64_t v23 = sub_1CD789230(a1, *(v13 - 4));
  if (!v23) {
    return v23;
  }
  unint64_t v24 = 0;
LABEL_38:
  uint64_t v25 = a1[6];
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v25, "", 0);
  *(void *)(*(void *)(v25 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v27 = *(void *)(v25 + 8);
  if (!v27)
  {
    if (IncompleteVirtualRegister) {
      goto LABEL_40;
    }
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  if (!IncompleteVirtualRegister) {
    return 0;
  }
LABEL_40:
  sub_1CD3CB380((uint64_t)a1, v23, (v24 >> 1) + 1);
  uint64_t v28 = a1[4];
  uint64_t v29 = *(void *)(v28 + 640);
  uint64_t v30 = *(unint64_t **)(v28 + 648);
  uint64_t v31 = *(void *)(a1[12] + 8) + 912;
  uint64_t v32 = *(llvm::MachineFunction **)(v29 + 32);
  unint64_t v33 = (unsigned __int8 *)a1[9];
  uint64_t v80 = v32;
  unint64_t v81 = v33;
  if (v33)
  {
    llvm::MetadataTracking::track((uint64_t)&v81, v33, 2);
    uint64_t v32 = v80;
  }
  int v34 = llvm::MachineFunction::CreateMachineInstr(v32, v31, &v81, 0);
  if (!v81) {
    goto LABEL_43;
  }
  int v76 = *v81;
  if ((v76 - 4) > 0x1E)
  {
    if ((v76 - 3) >= 0xFFFFFFFE) {
      int v79 = v81;
    }
    else {
      int v79 = 0;
    }
    if ((v76 - 3) < 0xFFFFFFFE)
    {
      if (v76 == 3) {
        *((void *)v81 + 1) = 0;
      }
      goto LABEL_43;
    }
    unint64_t v78 = (unint64_t)(v79 + 8);
  }
  else
  {
    if ((v81[1] & 0x7F) != 2 && !*((_DWORD *)v81 + 3)) {
      goto LABEL_43;
    }
    uint64_t v77 = *((void *)v81 + 2);
    if ((v77 & 4) == 0) {
      goto LABEL_43;
    }
    unint64_t v78 = v77 & 0xFFFFFFFFFFFFFFF8;
    if (!v78) {
      goto LABEL_43;
    }
  }
  *(void *)&long long v82 = &v81;
  sub_1CC5FA668(v78 + 16, &v82);
LABEL_43:
  uint64_t v35 = *(void *)(v29 + 40);
  *((void *)v34 + 3) = v35;
  uint64_t v36 = *(void *)(v35 + 32);
  uint64_t v37 = *((unsigned int *)v34 + 10);
  if (v37)
  {
    uint64_t v65 = *((void *)v34 + 4);
    uint64_t v66 = *(void *)(v36 + 40);
    uint64_t v67 = 32 * v37;
    do
    {
      if (!*(unsigned char *)v65)
      {
        uint64_t v68 = *(unsigned int *)(v65 + 4);
        if ((int)v68 >= 0) {
          uint64_t v69 = (uint64_t *)(*(void *)(v66 + 272) + 8 * v68);
        }
        else {
          uint64_t v69 = (uint64_t *)(*(void *)(v66 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8);
        }
        uint64_t v70 = *v69;
        if (*v69)
        {
          uint64_t v71 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = v65;
          *(void *)(v65 + 16) = v71;
          if (*(unsigned char *)(v65 + 3))
          {
            *(void *)(v65 + 24) = v70;
          }
          else
          {
            *(void *)(v65 + 24) = 0;
            uint64_t v69 = (uint64_t *)(v71 + 24);
          }
        }
        else
        {
          *(void *)(v65 + 16) = v65;
          *(void *)(v65 + 24) = 0;
        }
        *uint64_t v69 = v65;
      }
      v65 += 32;
      v67 -= 32;
    }
    while (v67);
  }
  uint64_t v38 = *(void *)(v36 + 728);
  if (v38) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v38 + 24))(v38, v34);
  }
  unint64_t v39 = *v30 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v34 = v39 | *(void *)v34 & 7;
  *((void *)v34 + 1) = v30;
  *(void *)(v39 + 8) = v34;
  *uint64_t v30 = *v30 & 7 | (unint64_t)v34;
  *((void *)&v82 + 1) = 0;
  long long v83 = 0uLL;
  LODWORD(v82) = 0x1000000;
  DWORD1(v82) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v34, v80, (const llvm::MachineOperand *)&v82);
  *((void *)&v82 + 1) = 0;
  long long v83 = 0uLL;
  LODWORD(v82) = (((unsigned __int16)(v24 >> 1) + 1) & 0xFFF) << 8;
  DWORD1(v82) = v23;
  llvm::MachineInstr::addOperand(v34, v80, (const llvm::MachineOperand *)&v82);
LABEL_60:
  uint64_t v45 = a1[4];
  uint64_t v46 = *(void *)(v45 + 640);
  uint64_t v47 = *(unint64_t **)(v45 + 648);
  uint64_t v48 = *(void *)(a1[12] + 8) + 48 * word_1CD91C100[2 * (a5 == 1) + (v24 & 1)];
  int v49 = *(llvm::MachineFunction **)(v46 + 32);
  uint64_t v50 = (unsigned __int8 *)a1[9];
  unint64_t v81 = v50;
  if (v50) {
    llvm::MetadataTracking::track((uint64_t)&v81, v50, 2);
  }
  int v51 = llvm::MachineFunction::CreateMachineInstr(v49, v48, &v81, 0);
  if (!v81) {
    goto LABEL_63;
  }
  int v72 = *v81;
  if ((v72 - 4) > 0x1E)
  {
    if ((v72 - 3) >= 0xFFFFFFFE) {
      uint64_t v75 = v81;
    }
    else {
      uint64_t v75 = 0;
    }
    if ((v72 - 3) < 0xFFFFFFFE)
    {
      if (v72 == 3) {
        *((void *)v81 + 1) = 0;
      }
      goto LABEL_63;
    }
    unint64_t v74 = (unint64_t)(v75 + 8);
  }
  else
  {
    if ((v81[1] & 0x7F) != 2 && !*((_DWORD *)v81 + 3)) {
      goto LABEL_63;
    }
    uint64_t v73 = *((void *)v81 + 2);
    if ((v73 & 4) == 0) {
      goto LABEL_63;
    }
    unint64_t v74 = v73 & 0xFFFFFFFFFFFFFFF8;
    if (!v74) {
      goto LABEL_63;
    }
  }
  *(void *)&long long v82 = &v81;
  sub_1CC5FA668(v74 + 16, &v82);
LABEL_63:
  uint64_t v52 = *(void *)(v46 + 40);
  *((void *)v51 + 3) = v52;
  uint64_t v53 = *(void *)(v52 + 32);
  uint64_t v54 = *((unsigned int *)v51 + 10);
  if (v54)
  {
    uint64_t v57 = *((void *)v51 + 4);
    uint64_t v58 = *(void *)(v53 + 40);
    uint64_t v59 = 32 * v54;
    do
    {
      if (!*(unsigned char *)v57)
      {
        uint64_t v60 = *(unsigned int *)(v57 + 4);
        if ((int)v60 >= 0) {
          uint64_t v61 = (uint64_t *)(*(void *)(v58 + 272) + 8 * v60);
        }
        else {
          uint64_t v61 = (uint64_t *)(*(void *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
        }
        uint64_t v62 = *v61;
        if (*v61)
        {
          uint64_t v63 = *(void *)(v62 + 16);
          *(void *)(v62 + 16) = v57;
          *(void *)(v57 + 16) = v63;
          if (*(unsigned char *)(v57 + 3))
          {
            *(void *)(v57 + 24) = v62;
          }
          else
          {
            *(void *)(v57 + 24) = 0;
            uint64_t v61 = (uint64_t *)(v63 + 24);
          }
        }
        else
        {
          *(void *)(v57 + 16) = v57;
          *(void *)(v57 + 24) = 0;
        }
        uint64_t *v61 = v57;
      }
      v57 += 32;
      v59 -= 32;
    }
    while (v59);
  }
  uint64_t v55 = *(void *)(v53 + 728);
  if (v55) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v55 + 24))(v55, v51);
  }
  unint64_t v56 = *v47 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v51 = v56 | *(void *)v51 & 7;
  *((void *)v51 + 1) = v47;
  *(void *)(v56 + 8) = v51;
  *uint64_t v47 = *v47 & 7 | (unint64_t)v51;
  *((void *)&v82 + 1) = 0;
  long long v83 = 0uLL;
  LODWORD(v82) = 0x1000000;
  DWORD1(v82) = a3;
  llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v82);
  uint64_t v23 = 1;
  LODWORD(v82) = 1;
  *((void *)&v82 + 1) = 0;
  *(void *)&long long v83 = 0;
  llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v82);
  LODWORD(v82) = 1;
  *((void *)&v82 + 1) = 0;
  *(void *)&long long v83 = a4 | 0x100000000;
  llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v82);
  *((void *)&v82 + 1) = 0;
  long long v83 = 0uLL;
  LODWORD(v82) = 0;
  DWORD1(v82) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v82);
  LODWORD(v82) = 1;
  *((void *)&v82 + 1) = 0;
  *(void *)&long long v83 = 0;
  llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v82);
  LODWORD(v82) = 1;
  *((void *)&v82 + 1) = 0;
  *(void *)&long long v83 = 0;
  llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v82);
  long long v82 = 0u;
  long long v83 = 0u;
  llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v82);
  return v23;
}

uint64_t sub_1CB865F04(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(uint64_t **)(a2 - 8);
  }
  else {
    uint64_t v11 = (uint64_t *)(a2 - 32 * (v10 & 0x7FFFFFF));
  }
  if ((*(unsigned __int8 *)(*(void *)a2 + 8) | 2) != 2) {
    return 0;
  }
  uint64_t v14 = (void *)*v11;
  uint64_t v15 = *(void *)*v11;
  int v16 = sub_1CD789230(a1, *v11);
  if (!v16) {
    return 0;
  }
  int v17 = v16;
  int v18 = *(_DWORD *)(v15 + 8);
  int v19 = *(_DWORD *)(v15 + 8) >> 8;
  BOOL v21 = v18 == 13 && v19 == 32;
  if (*(unsigned char *)(a2 + 16) == 84
    && (uint64_t v22 = *(void *)(a2 - 32)) != 0
    && !*(unsigned char *)(v22 + 16)
    && *(void *)(v22 + 24) == *(void *)(a2 + 72)
    && (*(unsigned char *)(v22 + 33) & 0x20) != 0
    && (*(_DWORD *)(v22 + 36) | 2) == 0x82F)
  {
    uint64_t v12 = 0;
    uint64_t v23 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    if (v23 && *(unsigned char *)(v23 + 16) == 16)
    {
      if (*(_DWORD *)(v23 + 32) > 0x40u) {
        unint64_t v24 = **(void **)(v23 + 24);
      }
      else {
        unint64_t v24 = *(void *)(v23 + 24);
      }
      if (v24 <= 1)
      {
        int v28 = v24 + 1;
        sub_1CD3CB380((uint64_t)a1, v16, (v24 + 1));
        unsigned int v27 = 1;
LABEL_35:
        uint64_t v29 = a1[4];
        uint64_t v30 = *(void *)(v29 + 640);
        uint64_t v31 = *(unint64_t **)(v29 + 648);
        uint64_t v32 = *(void *)(a1[12] + 8) + 48 * word_1CD91C108[2 * (a5 == 1) + v27];
        unint64_t v33 = *(llvm::MachineFunction **)(v30 + 32);
        int v34 = (unsigned __int8 *)a1[9];
        uint64_t v52 = (llvm::MachineFunction *)v34;
        if (v34) {
          llvm::MetadataTracking::track((uint64_t)&v52, v34, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr(v33, v32, (unsigned __int8 **)&v52, 0);
        if (!v52)
        {
LABEL_38:
          uint64_t v36 = *(void *)(v30 + 40);
          *((void *)MachineInstr + 3) = v36;
          uint64_t v37 = *(void *)(v36 + 32);
          uint64_t v38 = *((unsigned int *)MachineInstr + 10);
          if (v38)
          {
            uint64_t v41 = *((void *)MachineInstr + 4);
            uint64_t v42 = *(void *)(v37 + 40);
            uint64_t v43 = 32 * v38;
            do
            {
              if (!*(unsigned char *)v41)
              {
                uint64_t v44 = *(unsigned int *)(v41 + 4);
                if ((int)v44 >= 0) {
                  uint64_t v45 = (uint64_t *)(*(void *)(v42 + 272) + 8 * v44);
                }
                else {
                  uint64_t v45 = (uint64_t *)(*(void *)(v42 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
                }
                uint64_t v46 = *v45;
                if (*v45)
                {
                  uint64_t v47 = *(void *)(v46 + 16);
                  *(void *)(v46 + 16) = v41;
                  *(void *)(v41 + 16) = v47;
                  if (*(unsigned char *)(v41 + 3))
                  {
                    *(void *)(v41 + 24) = v46;
                  }
                  else
                  {
                    *(void *)(v41 + 24) = 0;
                    uint64_t v45 = (uint64_t *)(v47 + 24);
                  }
                }
                else
                {
                  *(void *)(v41 + 16) = v41;
                  *(void *)(v41 + 24) = 0;
                }
                *uint64_t v45 = v41;
              }
              v41 += 32;
              v43 -= 32;
            }
            while (v43);
          }
          uint64_t v39 = *(void *)(v37 + 728);
          if (v39) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, MachineInstr);
          }
          unint64_t v40 = *v31 & 0xFFFFFFFFFFFFFFF8;
          *(void *)MachineInstr = v40 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v31;
          *(void *)(v40 + 8) = MachineInstr;
          *uint64_t v31 = *v31 & 7 | (unint64_t)MachineInstr;
          *((void *)&v54 + 1) = 0;
          long long v55 = 0uLL;
          LODWORD(v54) = 0x1000000;
          DWORD1(v54) = a3;
          llvm::MachineInstr::addOperand(MachineInstr, v33, (const llvm::MachineOperand *)&v54);
          LODWORD(v54) = 1;
          *((void *)&v54 + 1) = 0;
          *(void *)&long long v55 = 0;
          llvm::MachineInstr::addOperand(MachineInstr, v33, (const llvm::MachineOperand *)&v54);
          LODWORD(v54) = 1;
          *((void *)&v54 + 1) = 0;
          *(void *)&long long v55 = a4 | 0x100000000;
          llvm::MachineInstr::addOperand(MachineInstr, v33, (const llvm::MachineOperand *)&v54);
          uint64_t v52 = v33;
          uint64_t v53 = MachineInstr;
          if (!v28)
          {
            if (sub_1CB8843D8((uint64_t)a1, v14, 0, &v52, 0))
            {
LABEL_45:
              uint64_t v12 = 1;
              LODWORD(v54) = 1;
              *((void *)&v54 + 1) = 0;
              *(void *)&long long v55 = 0;
              llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v54);
              LODWORD(v54) = 1;
              *((void *)&v54 + 1) = 0;
              *(void *)&long long v55 = 0;
              llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v54);
              long long v54 = 0u;
              long long v55 = 0u;
              llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v54);
              return v12;
            }
            unint64_t v33 = v52;
            MachineInstr = v53;
          }
          *((void *)&v54 + 1) = 0;
          long long v55 = 0uLL;
          LODWORD(v54) = (v28 & 0xFFF) << 8;
          DWORD1(v54) = v17;
          llvm::MachineInstr::addOperand(MachineInstr, v33, (const llvm::MachineOperand *)&v54);
          goto LABEL_45;
        }
        int v48 = *(unsigned __int8 *)v52;
        if ((v48 - 4) > 0x1E)
        {
          if ((v48 - 3) >= 0xFFFFFFFE) {
            int v51 = v52;
          }
          else {
            int v51 = 0;
          }
          if ((v48 - 3) < 0xFFFFFFFE)
          {
            if (v48 == 3) {
              *((void *)v52 + 1) = 0;
            }
            goto LABEL_38;
          }
          unint64_t v50 = (unint64_t)v51 + 8;
        }
        else
        {
          if ((*((unsigned char *)v52 + 1) & 0x7F) != 2 && !*((_DWORD *)v52 + 3)) {
            goto LABEL_38;
          }
          uint64_t v49 = *((void *)v52 + 2);
          if ((v49 & 4) == 0) {
            goto LABEL_38;
          }
          unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
          if (!v50) {
            goto LABEL_38;
          }
        }
        *(void *)&long long v54 = &v52;
        sub_1CC5FA668(v50 + 16, &v54);
        goto LABEL_38;
      }
      return 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    BOOL v25 = v18 == 13 && v19 == 16;
    int v26 = v25 || v21;
    unsigned int v27 = v25 && !v21;
    if (v26 == 1)
    {
      int v28 = 0;
      goto LABEL_35;
    }
  }
  return v12;
}

uint64_t sub_1CB866354(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  int v8 = *(llvm::ConstantFP ***)a2;
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0) {
    int v10 = *(uint64_t **)(a2 - 8);
  }
  else {
    int v10 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
  }
  int v11 = *((unsigned __int8 *)v8 + 8);
  if ((v11 | 2) != 2) {
    return 0;
  }
  uint64_t v12 = *v10;
  unsigned int v13 = *(_DWORD *)(*(void *)*v10 + 8);
  if (v13 != 13) {
    return 0;
  }
  int v14 = *(unsigned __int8 *)(a2 + 16);
  int v15 = v13 >> 8;
  if (v15 > 15)
  {
    if (v15 == 16)
    {
      if (v14 == 72) {
        unsigned int v19 = 5;
      }
      else {
        unsigned int v19 = 4;
      }
    }
    else
    {
      if (v15 != 32) {
        return 0;
      }
      if (v14 == 72) {
        int v17 = 11;
      }
      else {
        int v17 = 10;
      }
      if (v14 == 72) {
        int v18 = 9;
      }
      else {
        int v18 = 8;
      }
      if (a4) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v17;
      }
    }
    return sub_1CB865F04(a1, a2, a3, v19, a4);
  }
  else
  {
    if (v15 != 1)
    {
      if (v15 == 8)
      {
        unsigned int v16 = v14 == 72;
LABEL_40:
        return sub_1CB8657A8(a1, a2, a3, v16, a4);
      }
      return 0;
    }
    if ((v9 & 0x40000000) != 0) {
      uint64_t v20 = *(uint64_t **)(a2 - 8);
    }
    else {
      uint64_t v20 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
    }
    uint64_t v22 = *v20;
    if (v22 && *(unsigned __int8 *)(v22 + 16) >= 0x1Cu && *(void *)(v22 + 40) != *(void *)(a2 + 40)
      || *(unsigned char *)(v12 + 16) != 82)
    {
      unsigned int v16 = 0;
      goto LABEL_40;
    }
    if ((a4 != 0) == (v11 == 2)) {
      return 0;
    }
    uint64_t v23 = *(unsigned __int8 **)(v12 - 64);
    unint64_t v24 = *(llvm::ConstantFP ****)(v12 - 32);
    BOOL v25 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)a2, (llvm::Type *)a2, 1.0);
    unsigned int v27 = llvm::ConstantFP::get(v8, v26, 0.0);
    return sub_1CB88D14C((uint64_t)a1, (llvm::Type **)a2, v12, v23, v24, (uint64_t)v25, (uint64_t)v27, a3);
  }
}

BOOL sub_1CB866588(uint64_t a1)
{
  BOOL result = 0;
  if (a1 && *(unsigned char *)(a1 + 16) == 58)
  {
    int v3 = *(llvm::Type **)a1;
    if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
      int v3 = (llvm::Type *)**((void **)v3 + 2);
    }
    if ((llvm::Type::getPrimitiveSizeInBits(v3) & 0xFFFFFFF0) != 0
      && ((int v4 = *(_DWORD *)(a1 + 20), (v4 & 0x40000000) != 0)
        ? (uint64_t v5 = *(void *)(a1 - 8))
        : (uint64_t v5 = a1 - 32 * (v4 & 0x7FFFFFF)),
          (uint64_t v6 = *(void *)(v5 + 32)) != 0 ? (v7 = *(unsigned char *)(v6 + 16) == 16) : (v7 = 0),
          v7))
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      if (v8)
      {
        int v9 = (llvm::APInt *)(v6 + 24);
        if (v8 > 0x40) {
          return llvm::APInt::countTrailingOnesSlowCase(v9) == v8;
        }
        else {
          return *(void *)v9 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CB86665C(void *a1, int a2, int a3)
{
  uint64_t v6 = (_UNKNOWN ***)(*(void *)(*(void *)(a1[6] + 24) + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (v6 == &off_1E66A4180 || v6 == &off_1E66A41C8)
  {
    int v42 = 0;
  }
  else
  {
    sub_1CD3CB380((uint64_t)a1, a2, 1);
    int v42 = 256;
  }
  uint64_t v8 = 0x100000008;
  if (a3 == 16)
  {
    int v9 = &off_1E66A4180;
    unsigned int v10 = 12435;
    int v11 = 12977;
  }
  else
  {
    if (a3 != 32) {
      return 0;
    }
    uint64_t v8 = 0x100000018;
    int v9 = &off_1E66A4340;
    unsigned int v10 = 12379;
    int v11 = 12961;
  }
  uint64_t v12 = a1[6];
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v12, "", 0);
  *(void *)(*(void *)(v12 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v9;
  uint64_t v14 = *(void *)(v12 + 8);
  if (!v14)
  {
    if (IncompleteVirtualRegister) {
      goto LABEL_13;
    }
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  if (!IncompleteVirtualRegister) {
    return 0;
  }
LABEL_13:
  uint64_t v15 = a1[6];
  uint64_t v16 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v15, "", 0);
  *(void *)(*(void *)(v15 + 24) + 16 * (v16 & 0x7FFFFFFF)) = v9;
  uint64_t v17 = *(void *)(v15 + 8);
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
    if (!v16) {
      return v16;
    }
  }
  else if (!v16)
  {
    return v16;
  }
  unsigned int v66 = v11;
  uint64_t v18 = a1[4];
  uint64_t v19 = *(void *)(v18 + 640);
  uint64_t v20 = *(unint64_t **)(v18 + 648);
  uint64_t v21 = *(void *)(a1[12] + 8) + 48 * v10;
  uint64_t v22 = *(llvm::MachineFunction **)(v19 + 32);
  uint64_t v23 = (unsigned __int8 *)a1[9];
  uint64_t v67 = v23;
  if (v23) {
    llvm::MetadataTracking::track((uint64_t)&v67, v23, 2);
  }
  unint64_t v24 = llvm::MachineFunction::CreateMachineInstr(v22, v21, &v67, 0);
  if (v67)
  {
    int v58 = *v67;
    if ((v58 - 4) > 0x1E)
    {
      if ((v58 - 3) >= 0xFFFFFFFE) {
        uint64_t v64 = v67;
      }
      else {
        uint64_t v64 = 0;
      }
      if ((v58 - 3) < 0xFFFFFFFE)
      {
        if (v58 == 3) {
          *((void *)v67 + 1) = 0;
        }
        goto LABEL_18;
      }
      unint64_t v60 = (unint64_t)(v64 + 8);
    }
    else
    {
      if ((v67[1] & 0x7F) != 2 && !*((_DWORD *)v67 + 3)) {
        goto LABEL_18;
      }
      uint64_t v59 = *((void *)v67 + 2);
      if ((v59 & 4) == 0) {
        goto LABEL_18;
      }
      unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
      if (!v60) {
        goto LABEL_18;
      }
    }
    *(void *)&long long v68 = &v67;
    sub_1CC5FA668(v60 + 16, &v68);
  }
LABEL_18:
  uint64_t v25 = *(void *)(v19 + 40);
  *((void *)v24 + 3) = v25;
  uint64_t v26 = *(void *)(v25 + 32);
  uint64_t v27 = *((unsigned int *)v24 + 10);
  if (v27)
  {
    uint64_t v44 = *((void *)v24 + 4);
    uint64_t v45 = *(void *)(v26 + 40);
    uint64_t v46 = 32 * v27;
    do
    {
      if (!*(unsigned char *)v44)
      {
        uint64_t v47 = *(unsigned int *)(v44 + 4);
        if ((int)v47 >= 0) {
          int v48 = (uint64_t *)(*(void *)(v45 + 272) + 8 * v47);
        }
        else {
          int v48 = (uint64_t *)(*(void *)(v45 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
        }
        uint64_t v49 = *v48;
        if (*v48)
        {
          uint64_t v50 = *(void *)(v49 + 16);
          *(void *)(v49 + 16) = v44;
          *(void *)(v44 + 16) = v50;
          if (*(unsigned char *)(v44 + 3))
          {
            *(void *)(v44 + 24) = v49;
          }
          else
          {
            *(void *)(v44 + 24) = 0;
            int v48 = (uint64_t *)(v50 + 24);
          }
        }
        else
        {
          *(void *)(v44 + 16) = v44;
          *(void *)(v44 + 24) = 0;
        }
        *int v48 = v44;
      }
      v44 += 32;
      v46 -= 32;
    }
    while (v46);
  }
  uint64_t v28 = *(void *)(v26 + 728);
  if (v28) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v28 + 24))(v28, v24);
  }
  unint64_t v29 = *v20 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = v29 | *(void *)v24 & 7;
  *((void *)v24 + 1) = v20;
  *(void *)(v29 + 8) = v24;
  *uint64_t v20 = *v20 & 7 | (unint64_t)v24;
  *((void *)&v68 + 1) = 0;
  long long v69 = 0uLL;
  LODWORD(v68) = 0x1000000;
  DWORD1(v68) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0;
  llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0x100000000;
  llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v68);
  long long v69 = 0uLL;
  long long v68 = __PAIR64__(a2, v42);
  llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0;
  llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = v8;
  llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0;
  llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0;
  llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v68);
  long long v68 = 0u;
  long long v69 = 0u;
  llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v68);
  uint64_t v30 = a1[4];
  uint64_t v31 = *(void *)(v30 + 640);
  uint64_t v32 = *(unint64_t **)(v30 + 648);
  uint64_t v33 = *(void *)(a1[12] + 8) + 48 * v66;
  int v34 = *(llvm::MachineFunction **)(v31 + 32);
  uint64_t v35 = (unsigned __int8 *)a1[9];
  uint64_t v67 = v35;
  if (v35) {
    llvm::MetadataTracking::track((uint64_t)&v67, v35, 2);
  }
  uint64_t v36 = llvm::MachineFunction::CreateMachineInstr(v34, v33, &v67, 0);
  if (!v67) {
    goto LABEL_24;
  }
  int v61 = *v67;
  if ((v61 - 4) > 0x1E)
  {
    if ((v61 - 3) >= 0xFFFFFFFE) {
      uint64_t v65 = v67;
    }
    else {
      uint64_t v65 = 0;
    }
    if ((v61 - 3) < 0xFFFFFFFE)
    {
      if (v61 == 3) {
        *((void *)v67 + 1) = 0;
      }
      goto LABEL_24;
    }
    unint64_t v63 = (unint64_t)(v65 + 8);
  }
  else
  {
    if ((v67[1] & 0x7F) != 2 && !*((_DWORD *)v67 + 3)) {
      goto LABEL_24;
    }
    uint64_t v62 = *((void *)v67 + 2);
    if ((v62 & 4) == 0) {
      goto LABEL_24;
    }
    unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
    if (!v63) {
      goto LABEL_24;
    }
  }
  *(void *)&long long v68 = &v67;
  sub_1CC5FA668(v63 + 16, &v68);
LABEL_24:
  uint64_t v37 = *(void *)(v31 + 40);
  *((void *)v36 + 3) = v37;
  uint64_t v38 = *(void *)(v37 + 32);
  uint64_t v39 = *((unsigned int *)v36 + 10);
  if (v39)
  {
    uint64_t v51 = *((void *)v36 + 4);
    uint64_t v52 = *(void *)(v38 + 40);
    uint64_t v53 = 32 * v39;
    do
    {
      if (!*(unsigned char *)v51)
      {
        uint64_t v54 = *(unsigned int *)(v51 + 4);
        if ((int)v54 >= 0) {
          long long v55 = (uint64_t *)(*(void *)(v52 + 272) + 8 * v54);
        }
        else {
          long long v55 = (uint64_t *)(*(void *)(v52 + 24) + 16 * (v54 & 0x7FFFFFFF) + 8);
        }
        uint64_t v56 = *v55;
        if (*v55)
        {
          uint64_t v57 = *(void *)(v56 + 16);
          *(void *)(v56 + 16) = v51;
          *(void *)(v51 + 16) = v57;
          if (*(unsigned char *)(v51 + 3))
          {
            *(void *)(v51 + 24) = v56;
          }
          else
          {
            *(void *)(v51 + 24) = 0;
            long long v55 = (uint64_t *)(v57 + 24);
          }
        }
        else
        {
          *(void *)(v51 + 16) = v51;
          *(void *)(v51 + 24) = 0;
        }
        *long long v55 = v51;
      }
      v51 += 32;
      v53 -= 32;
    }
    while (v53);
  }
  uint64_t v40 = *(void *)(v38 + 728);
  if (v40) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v40 + 24))(v40, v36);
  }
  unint64_t v41 = *v32 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v36 = v41 | *(void *)v36 & 7;
  *((void *)v36 + 1) = v32;
  *(void *)(v41 + 8) = v36;
  *uint64_t v32 = *v32 & 7 | (unint64_t)v36;
  *((void *)&v68 + 1) = 0;
  long long v69 = 0uLL;
  LODWORD(v68) = 0x1000000;
  DWORD1(v68) = v16;
  llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0;
  llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v68);
  *((void *)&v68 + 1) = 0;
  long long v69 = 0uLL;
  LODWORD(v68) = 0;
  DWORD1(v68) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0;
  llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = v8;
  llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v68);
  LODWORD(v68) = 1;
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0;
  llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v68);
  long long v68 = 0u;
  long long v69 = 0u;
  llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v68);
  return v16;
}

uint64_t sub_1CB866D40(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unsigned int a6)
{
  unsigned int v8 = a4;
  int v9 = a3;
  uint64_t v10 = a2;
  int v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x40000000) != 0) {
    unsigned int v13 = *(uint64_t **)(a2 - 8);
  }
  else {
    unsigned int v13 = (uint64_t *)(a2 - 32 * (v12 & 0x7FFFFFF));
  }
  uint64_t v14 = *v13;
  uint64_t v95 = (unsigned char *)v14;
  if ((a4 & 0x80000000) != 0)
  {
    if ((*(unsigned char *)(*(void *)(a2 - 32) + 33) & 0x20) != 0) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + 32);
    if (v16) {
      BOOL v17 = *(unsigned char *)(v16 + 16) == 16;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      uint64_t v18 = (void *)(v16 + 24);
      if (*(_DWORD *)(v16 + 32) >= 0x41u) {
        uint64_t v18 = (void *)*v18;
      }
      unsigned int v8 = *(_DWORD *)v18;
    }
    else
    {
      unsigned int v8 = -1;
    }
  }
  int v19 = *(unsigned __int8 *)(*(void *)v14 + 8);
  if ((v19 | 2) != 2) {
    return 0;
  }
  int v20 = *(_DWORD *)(*(void *)a2 + 8);
  int v21 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
  BOOL v22 = v20 == 13 && v21 == 32;
  int v23 = v22;
  if (v22)
  {
    if (v8 < 4) {
      return 0;
    }
  }
  else
  {
    uint64_t v24 = 0;
    BOOL v26 = v21 == 16 || v21 == 8;
    if (v20 != 13 || !v26) {
      return v24;
    }
  }
  BOOL v94 = v19 == 0;
  if (v8 != 12) {
    goto LABEL_45;
  }
  if (*(unsigned char *)(v14 + 16) == 74)
  {
    a2 = *(void *)(v14 - 32);
    if (a2 && *(unsigned char *)(a2 + 16) == 73)
    {
      uint64_t v27 = *(void *)(v10 + 40);
      uint64_t v28 = v10;
      if (*(void *)(a2 + 40) == v27)
      {
        uint64_t v14 = *(void *)(a2 - 32);
        if (*(unsigned char *)(v14 + 16) != 74) {
          goto LABEL_44;
        }
        uint64_t v27 = *(void *)(a2 + 40);
        uint64_t v28 = a2;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(v10 + 40);
      uint64_t v28 = v10;
    }
    a2 = v28;
    if (*(void *)(v14 + 40) == v27)
    {
      int v60 = sub_1CD789230(a1, *(void *)(v14 - 32));
      if (!v60) {
        return 0;
      }
      int v61 = v60;
      uint64_t v62 = a1[4];
      uint64_t v63 = *(void *)(v62 + 640);
      uint64_t v64 = *(unint64_t **)(v62 + 648);
      uint64_t v65 = *(void *)(a1[12] + 8) + 912;
      unsigned int v66 = *(llvm::MachineFunction **)(v63 + 32);
      uint64_t v67 = (unsigned __int8 *)a1[9];
      unint64_t v91 = v67;
      if (v67) {
        llvm::MetadataTracking::track((uint64_t)&v91, v67, 2);
      }
      long long v68 = llvm::MachineFunction::CreateMachineInstr(v66, v65, &v91, 0);
      if (!v91) {
        goto LABEL_96;
      }
      int v85 = *v91;
      if ((v85 - 4) > 0x1E)
      {
        if ((v85 - 3) >= 0xFFFFFFFE) {
          uint64_t v88 = v91;
        }
        else {
          uint64_t v88 = 0;
        }
        if ((v85 - 3) < 0xFFFFFFFE)
        {
          if (v85 == 3) {
            *((void *)v91 + 1) = 0;
          }
          goto LABEL_96;
        }
        unint64_t v87 = (unint64_t)(v88 + 8);
      }
      else
      {
        if ((v91[1] & 0x7F) != 2 && !*((_DWORD *)v91 + 3)) {
          goto LABEL_96;
        }
        uint64_t v86 = *((void *)v91 + 2);
        if ((v86 & 4) == 0) {
          goto LABEL_96;
        }
        unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
        if (!v87) {
          goto LABEL_96;
        }
      }
      *(void *)&long long v96 = &v91;
      sub_1CC5FA668(v87 + 16, &v96);
LABEL_96:
      uint64_t v69 = *(void *)(v63 + 40);
      *((void *)v68 + 3) = v69;
      uint64_t v70 = *(void *)(v69 + 32);
      uint64_t v71 = *((unsigned int *)v68 + 10);
      if (v71)
      {
        uint64_t v74 = *((void *)v68 + 4);
        uint64_t v75 = *(void *)(v70 + 40);
        uint64_t v76 = 32 * v71;
        do
        {
          if (!*(unsigned char *)v74)
          {
            uint64_t v77 = *(unsigned int *)(v74 + 4);
            if ((int)v77 >= 0) {
              unint64_t v78 = (uint64_t *)(*(void *)(v75 + 272) + 8 * v77);
            }
            else {
              unint64_t v78 = (uint64_t *)(*(void *)(v75 + 24) + 16 * (v77 & 0x7FFFFFFF) + 8);
            }
            uint64_t v79 = *v78;
            if (*v78)
            {
              uint64_t v80 = *(void *)(v79 + 16);
              *(void *)(v79 + 16) = v74;
              *(void *)(v74 + 16) = v80;
              if (*(unsigned char *)(v74 + 3))
              {
                *(void *)(v74 + 24) = v79;
              }
              else
              {
                *(void *)(v74 + 24) = 0;
                unint64_t v78 = (uint64_t *)(v80 + 24);
              }
            }
            else
            {
              *(void *)(v74 + 16) = v74;
              *(void *)(v74 + 24) = 0;
            }
            *unint64_t v78 = v74;
          }
          v74 += 32;
          v76 -= 32;
        }
        while (v76);
      }
      uint64_t v72 = *(void *)(v70 + 728);
      if (v72) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v72 + 24))(v72, v68);
      }
      unint64_t v73 = *v64 & 0xFFFFFFFFFFFFFFF8;
      *(void *)long long v68 = v73 | *(void *)v68 & 7;
      *((void *)v68 + 1) = v64;
      *(void *)(v73 + 8) = v68;
      *uint64_t v64 = *v64 & 7 | (unint64_t)v68;
      *((void *)&v96 + 1) = 0;
      long long v97 = 0uLL;
      LODWORD(v96) = 0x1000000;
      DWORD1(v96) = v9;
      llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v96);
      *((void *)&v96 + 1) = 0;
      long long v97 = 0uLL;
      LODWORD(v96) = 0;
      DWORD1(v96) = v61;
      llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v96);
      return 1;
    }
  }
LABEL_44:
  uint64_t v24 = 1;
  if (sub_1CB861840((uint64_t)a1, a2, a3, 1, 0)) {
    return v24;
  }
LABEL_45:
  int v93 = 0;
  uint64_t v24 = sub_1CB88467C((uint64_t)a1, (uint64_t *)&v95, &v93, &v94, 0, *(void *)(v10 + 40), 0, 1);
  if (v24)
  {
    if ((v8 & 0x80000000) == 0)
    {
      uint64_t v29 = 0;
      int v30 = 0;
      goto LABEL_48;
    }
    int v33 = *(_DWORD *)(v10 + 20);
    if ((v33 & 0x40000000) != 0) {
      uint64_t v34 = *(void *)(v10 - 8);
    }
    else {
      uint64_t v34 = v10 - 32 * (v33 & 0x7FFFFFF);
    }
    uint64_t v29 = *(void *)(v34 + 32);
    if (*(_DWORD *)(*(void *)v29 + 8) == 4109)
    {
      int v30 = sub_1CD789230(a1, v29);
      if (v30)
      {
LABEL_48:
        uint64_t v90 = (unsigned char *)v29;
        int v89 = v30;
        if (a5)
        {
          BOOL v31 = v94;
          uint64_t v32 = (char *)&unk_1CD91C0F8 + 4 * a6;
        }
        else
        {
          if (!a6)
          {
            uint64_t v35 = (char *)&unk_1CD91C190 + 8 * (v8 >> 31) + 4 * v94 + 2 * (v23 ^ 1);
LABEL_55:
            uint64_t v36 = a1[4];
            uint64_t v37 = *(void *)(v36 + 640);
            uint64_t v38 = *(unint64_t **)(v36 + 648);
            uint64_t v39 = *(void *)(a1[12] + 8) + 48 * *(unsigned __int16 *)v35;
            uint64_t v40 = *(llvm::MachineFunction **)(v37 + 32);
            unint64_t v41 = (unsigned __int8 *)a1[9];
            unint64_t v91 = v41;
            if (v41) {
              llvm::MetadataTracking::track((uint64_t)&v91, v41, 2);
            }
            int v42 = llvm::MachineFunction::CreateMachineInstr(v40, v39, &v91, 0);
            if (!v91)
            {
LABEL_58:
              uint64_t v43 = *(void *)(v37 + 40);
              *((void *)v42 + 3) = v43;
              uint64_t v44 = *(void *)(v43 + 32);
              uint64_t v45 = *((unsigned int *)v42 + 10);
              if (v45)
              {
                uint64_t v53 = *((void *)v42 + 4);
                uint64_t v54 = *(void *)(v44 + 40);
                uint64_t v55 = 32 * v45;
                do
                {
                  if (!*(unsigned char *)v53)
                  {
                    uint64_t v56 = *(unsigned int *)(v53 + 4);
                    if ((int)v56 >= 0) {
                      uint64_t v57 = (uint64_t *)(*(void *)(v54 + 272) + 8 * v56);
                    }
                    else {
                      uint64_t v57 = (uint64_t *)(*(void *)(v54 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v58 = *v57;
                    if (*v57)
                    {
                      uint64_t v59 = *(void *)(v58 + 16);
                      *(void *)(v58 + 16) = v53;
                      *(void *)(v53 + 16) = v59;
                      if (*(unsigned char *)(v53 + 3))
                      {
                        *(void *)(v53 + 24) = v58;
                      }
                      else
                      {
                        *(void *)(v53 + 24) = 0;
                        uint64_t v57 = (uint64_t *)(v59 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v53 + 16) = v53;
                      *(void *)(v53 + 24) = 0;
                    }
                    *uint64_t v57 = v53;
                  }
                  v53 += 32;
                  v55 -= 32;
                }
                while (v55);
              }
              uint64_t v46 = *(void *)(v44 + 728);
              if (v46) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v46 + 24))(v46, v42);
              }
              unint64_t v47 = *v38 & 0xFFFFFFFFFFFFFFF8;
              *(void *)int v42 = v47 | *(void *)v42 & 7;
              *((void *)v42 + 1) = v38;
              *(void *)(v47 + 8) = v42;
              unint64_t *v38 = *v38 & 7 | (unint64_t)v42;
              *((void *)&v96 + 1) = 0;
              long long v97 = 0uLL;
              LODWORD(v96) = 0x1000000;
              DWORD1(v96) = v9;
              llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v96);
              unint64_t v91 = (unsigned __int8 *)v40;
              uint64_t v92 = v42;
              LODWORD(v96) = 1;
              *((void *)&v96 + 1) = 0;
              *(void *)&long long v97 = 0;
              llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v96);
              if ((v8 & 0x80000000) != 0)
              {
                if ((sub_1CB8843D8((uint64_t)a1, v90, 0, (llvm::MachineFunction **)&v91, 0) & 1) == 0)
                {
                  *((void *)&v96 + 1) = 0;
                  long long v97 = 0uLL;
                  LODWORD(v96) = 0;
                  DWORD1(v96) = v89;
                  llvm::MachineInstr::addOperand(v92, (llvm::MachineFunction *)v91, (const llvm::MachineOperand *)&v96);
                }
                uint64_t v49 = (llvm::MachineFunction *)v91;
                int v48 = v92;
                LODWORD(v96) = 1;
                *((void *)&v96 + 1) = 0;
                *(void *)&long long v97 = 0;
              }
              else
              {
                LODWORD(v96) = 1;
                *((void *)&v96 + 1) = 0;
                *(void *)&long long v97 = v8 | 0x100000000;
                int v48 = v42;
                uint64_t v49 = v40;
              }
              llvm::MachineInstr::addOperand(v48, v49, (const llvm::MachineOperand *)&v96);
              if ((sub_1CB8843D8((uint64_t)a1, v95, 0, (llvm::MachineFunction **)&v91, 0) & 1) == 0)
              {
                *((void *)&v96 + 1) = 0;
                long long v97 = 0uLL;
                LODWORD(v96) = 0;
                DWORD1(v96) = v24;
                llvm::MachineInstr::addOperand(v92, (llvm::MachineFunction *)v91, (const llvm::MachineOperand *)&v96);
              }
              LODWORD(v96) = 1;
              *((void *)&v96 + 1) = 0;
              *(void *)&long long v97 = 0;
              llvm::MachineInstr::addOperand(v92, (llvm::MachineFunction *)v91, (const llvm::MachineOperand *)&v96);
              if (a5)
              {
                *((void *)&v96 + 1) = 0;
                long long v97 = 0uLL;
                LODWORD(v96) = 0;
                DWORD1(v96) = a5;
                llvm::MachineInstr::addOperand(v92, (llvm::MachineFunction *)v91, (const llvm::MachineOperand *)&v96);
                uint64_t v51 = (llvm::MachineFunction *)v91;
                uint64_t v50 = v92;
                LODWORD(v96) = 1;
              }
              else
              {
                if (!a6)
                {
LABEL_73:
                  uint64_t v24 = 1;
                  LODWORD(v96) = 1;
                  *((void *)&v96 + 1) = 0;
                  *(void *)&long long v97 = 0;
                  llvm::MachineInstr::addOperand(v92, (llvm::MachineFunction *)v91, (const llvm::MachineOperand *)&v96);
                  long long v96 = 0u;
                  long long v97 = 0u;
                  llvm::MachineInstr::addOperand(v92, (llvm::MachineFunction *)v91, (const llvm::MachineOperand *)&v96);
                  return v24;
                }
                uint64_t v51 = (llvm::MachineFunction *)v91;
                uint64_t v50 = v92;
                LODWORD(v96) = 1;
              }
              *((void *)&v96 + 1) = 0;
              *(void *)&long long v97 = 0;
              llvm::MachineInstr::addOperand(v50, v51, (const llvm::MachineOperand *)&v96);
              goto LABEL_73;
            }
            int v81 = *v91;
            if ((v81 - 4) > 0x1E)
            {
              if ((v81 - 3) >= 0xFFFFFFFE) {
                uint64_t v84 = v91;
              }
              else {
                uint64_t v84 = 0;
              }
              if ((v81 - 3) < 0xFFFFFFFE)
              {
                if (v81 == 3) {
                  *((void *)v91 + 1) = 0;
                }
                goto LABEL_58;
              }
              unint64_t v83 = (unint64_t)(v84 + 8);
            }
            else
            {
              if ((v91[1] & 0x7F) != 2 && !*((_DWORD *)v91 + 3)) {
                goto LABEL_58;
              }
              uint64_t v82 = *((void *)v91 + 2);
              if ((v82 & 4) == 0) {
                goto LABEL_58;
              }
              unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
              if (!v83) {
                goto LABEL_58;
              }
            }
            *(void *)&long long v96 = &v91;
            sub_1CC5FA668(v83 + 16, &v96);
            goto LABEL_58;
          }
          BOOL v31 = v94;
        }
        uint64_t v35 = &v32[2 * v31];
        goto LABEL_55;
      }
    }
    return 0;
  }
  return v24;
}

uint64_t sub_1CB867534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::bitcastToAPInt(v2);
  }
  else {
    return llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, a2);
  }
}

uint64_t sub_1CB867550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 32);
  uint64_t v5 = *(unsigned int *)(v4 + 36);
  BOOL v6 = sub_1CB859A14(*(_DWORD *)(v4 + 36));
  uint64_t v7 = *(void *)(a1 + 256);
  int v8 = *(unsigned __int8 *)(v7 + 280);
  if (v6)
  {
    if (*(unsigned char *)(v7 + 280))
    {
      uint64_t v497 = (unsigned __int8 *)&unk_1F25E9CD0;
      char v498 = *(unsigned char *)(v7 + 306);
      int v9 = *(void **)(a1 + 32);
      uint64_t v10 = v9[80];
      uint64_t v11 = v9[81];
      uint64_t v12 = v9[1];
      *((void *)&v492 + 1) = &v497;
      *(void *)&long long v493 = v10;
      *((void *)&v493 + 1) = v11;
      uint64_t v494 = v12;
      long long v495 = *(_OWORD *)(a1 + 88);
      *(void *)&long long v492 = &unk_1F25E9E68;
      uint64_t v496 = a1;
      uint64_t v13 = *(void *)(v12 + 344);
    }
    else
    {
      char v498 = 0;
      uint64_t v497 = (unsigned __int8 *)&unk_1F25E9FD0;
      uint64_t v18 = *(void **)(a1 + 32);
      uint64_t v19 = v18[80];
      uint64_t v20 = v18[81];
      uint64_t v21 = v18[1];
      *((void *)&v492 + 1) = &v497;
      *(void *)&long long v493 = v19;
      *((void *)&v493 + 1) = v20;
      uint64_t v494 = v21;
      long long v495 = *(_OWORD *)(a1 + 88);
      *(void *)&long long v492 = &unk_1F25E9E68;
      uint64_t v496 = a1;
      uint64_t v13 = *(void *)(v21 + 344);
    }
    return sub_1CB86A734(&v492, a2, v5, v13);
  }
  if (!*(unsigned char *)(v7 + 280) && llvm::GetItrKind((llvm *)v5))
  {
    LODWORD(v492) = 0;
    LODWORD(v497) = 0;
    sub_1CB859BA0(v5, (int *)&v492, (int *)&v497, (int *)&v491, &v490);
    int v22 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)a2);
    uint64_t v14 = 0;
    if (!v22) {
      return v14;
    }
    int v23 = v22;
    int IsHalfItr = llvm::IsHalfItr((llvm *)*(unsigned int *)(*(void *)(a2 - 32) + 36));
    return sub_1CD3CB450(a1, a2, v23, v492, (int)v497, IsHalfItr, 0);
  }
  uint64_t v14 = 0;
  if ((int)v5 > 1884)
  {
    switch((int)v5)
    {
      case 1982:
        uint64_t v211 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v211) {
          return 0;
        }
        uint64_t v203 = v211;
        uint64_t v204 = (uint64_t *)a1;
        uint64_t v205 = a2;
        unsigned int v206 = -1;
        goto LABEL_219;
      case 1983:
        uint64_t v208 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v208) {
          return 0;
        }
        uint64_t v203 = v208;
        uint64_t v204 = (uint64_t *)a1;
        uint64_t v205 = a2;
        unsigned int v206 = 11;
        goto LABEL_219;
      case 1984:
        uint64_t v209 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v209) {
          return 0;
        }
        uint64_t v203 = v209;
        uint64_t v204 = (uint64_t *)a1;
        uint64_t v205 = a2;
        unsigned int v206 = 10;
        goto LABEL_219;
      case 1985:
        uint64_t v210 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v210) {
          return 0;
        }
        uint64_t v203 = v210;
        uint64_t v204 = (uint64_t *)a1;
        uint64_t v205 = a2;
        unsigned int v206 = 7;
        goto LABEL_219;
      case 1986:
        uint64_t v202 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v202) {
          return 0;
        }
        uint64_t v203 = v202;
        uint64_t v204 = (uint64_t *)a1;
        uint64_t v205 = a2;
        unsigned int v206 = 3;
        goto LABEL_219;
      case 1987:
        uint64_t v212 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v212) {
          return 0;
        }
        uint64_t v203 = v212;
        uint64_t v204 = (uint64_t *)a1;
        uint64_t v205 = a2;
        unsigned int v206 = 6;
        goto LABEL_219;
      case 1988:
        uint64_t v207 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v207) {
          return 0;
        }
        uint64_t v203 = v207;
        uint64_t v204 = (uint64_t *)a1;
        uint64_t v205 = a2;
        unsigned int v206 = 2;
LABEL_219:
        return sub_1CB866D40(v204, v205, v203, v206, 0, 0);
      case 1989:
        if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 2) {
          return 0;
        }
        int v44 = sub_1CD789230((uint64_t *)a1, *(void *)(a2 - 64));
        if ((v44 & 0x80000000) == 0) {
          return 0;
        }
        int v45 = v44;
        sub_1CC38D61C(*(void **)(a1 + 48), v45, *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v45 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A4548, 0);
        uint64_t v46 = *(void *)(a1 + 32);
        uint64_t v47 = *(void *)(v46 + 640);
        int v48 = *(unint64_t **)(v46 + 648);
        uint64_t v49 = *(void *)(*(void *)(a1 + 96) + 8) + 39024;
        uint64_t v50 = *(llvm::MachineFunction **)(v47 + 32);
        uint64_t v51 = *(unsigned __int8 **)(a1 + 72);
        uint64_t v497 = v51;
        if (v51) {
          llvm::MetadataTracking::track((uint64_t)&v497, v51, 2);
        }
        uint64_t v52 = llvm::MachineFunction::CreateMachineInstr(v50, v49, &v497, 0);
        if (!v497) {
          goto LABEL_45;
        }
        int v433 = *v497;
        if ((v433 - 4) > 0x1E)
        {
          if ((v433 - 3) >= 0xFFFFFFFE) {
            unint64_t v446 = v497;
          }
          else {
            unint64_t v446 = 0;
          }
          if ((v433 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v435 = (unint64_t)(v446 + 8);
LABEL_576:
            *(void *)&long long v492 = &v497;
            sub_1CC5FA668(v435 + 16, &v492);
            goto LABEL_45;
          }
          if (v433 == 3) {
            *((void *)v497 + 1) = 0;
          }
        }
        else if ((v497[1] & 0x7F) == 2 || *((_DWORD *)v497 + 3))
        {
          uint64_t v434 = *((void *)v497 + 2);
          if ((v434 & 4) != 0)
          {
            unint64_t v435 = v434 & 0xFFFFFFFFFFFFFFF8;
            if (v435) {
              goto LABEL_576;
            }
          }
        }
LABEL_45:
        uint64_t v53 = *(void *)(v47 + 40);
        *((void *)v52 + 3) = v53;
        uint64_t v54 = *(void *)(v53 + 32);
        uint64_t v55 = *((unsigned int *)v52 + 10);
        if (v55)
        {
          uint64_t v338 = *((void *)v52 + 4);
          uint64_t v339 = *(void *)(v54 + 40);
          uint64_t v340 = 32 * v55;
          do
          {
            if (!*(unsigned char *)v338)
            {
              uint64_t v341 = *(unsigned int *)(v338 + 4);
              if ((int)v341 >= 0) {
                uint64_t v342 = (uint64_t *)(*(void *)(v339 + 272) + 8 * v341);
              }
              else {
                uint64_t v342 = (uint64_t *)(*(void *)(v339 + 24) + 16 * (v341 & 0x7FFFFFFF) + 8);
              }
              uint64_t v343 = *v342;
              if (*v342)
              {
                uint64_t v344 = *(void *)(v343 + 16);
                *(void *)(v343 + 16) = v338;
                *(void *)(v338 + 16) = v344;
                if (*(unsigned char *)(v338 + 3))
                {
                  *(void *)(v338 + 24) = v343;
                }
                else
                {
                  *(void *)(v338 + 24) = 0;
                  uint64_t v342 = (uint64_t *)(v344 + 24);
                }
              }
              else
              {
                *(void *)(v338 + 16) = v338;
                *(void *)(v338 + 24) = 0;
              }
              *uint64_t v342 = v338;
            }
            v338 += 32;
            v340 -= 32;
          }
          while (v340);
        }
        uint64_t v56 = *(void *)(v54 + 728);
        if (v56) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v56 + 24))(v56, v52);
        }
        unint64_t v57 = *v48 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v52 = v57 | *(void *)v52 & 7;
        *((void *)v52 + 1) = v48;
        *(void *)(v57 + 8) = v52;
        *int v48 = *v48 & 7 | (unint64_t)v52;
        *((void *)&v492 + 1) = 0;
        long long v493 = 0uLL;
        LODWORD(v492) = 0;
        DWORD1(v492) = v45;
        llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v492);
        uint64_t v14 = 1;
LABEL_63:
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 0;
        llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v492);
        long long v492 = 0u;
        long long v493 = 0u;
        uint64_t v72 = v52;
        unint64_t v73 = v50;
        goto LABEL_110;
      case 1990:
      case 1991:
        int v124 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v124) {
          return 0;
        }
        BOOL v125 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        return sub_1CB861F38((void *)a1, a2, v124, v125, 0);
      case 1992:
      case 1993:
        if (v5 != 1993) {
          goto LABEL_21;
        }
        int v128 = sub_1CD789230((uint64_t *)a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
        if ((v128 & 0x80000000) == 0) {
          return 0;
        }
        int v129 = v128;
        uint64_t v130 = *(void *)(a1 + 32);
        uint64_t v131 = *(void *)(v130 + 640);
        uint64_t v132 = *(unint64_t **)(v130 + 648);
        uint64_t v133 = *(void *)(*(void *)(a1 + 96) + 8) + 239904;
        uint64_t v134 = *(llvm::MachineFunction **)(v131 + 32);
        uint64_t v135 = *(unsigned __int8 **)(a1 + 72);
        uint64_t v497 = v135;
        if (v135) {
          llvm::MetadataTracking::track((uint64_t)&v497, v135, 2);
        }
        uint64_t v136 = llvm::MachineFunction::CreateMachineInstr(v134, v133, &v497, 0);
        if (!v497) {
          goto LABEL_134;
        }
        int v430 = *v497;
        if ((v430 - 4) > 0x1E)
        {
          if ((v430 - 3) >= 0xFFFFFFFE) {
            uint64_t v442 = v497;
          }
          else {
            uint64_t v442 = 0;
          }
          if ((v430 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v432 = (unint64_t)(v442 + 8);
LABEL_564:
            *(void *)&long long v492 = &v497;
            sub_1CC5FA668(v432 + 16, &v492);
            goto LABEL_134;
          }
          if (v430 == 3) {
            *((void *)v497 + 1) = 0;
          }
        }
        else if ((v497[1] & 0x7F) == 2 || *((_DWORD *)v497 + 3))
        {
          uint64_t v431 = *((void *)v497 + 2);
          if ((v431 & 4) != 0)
          {
            unint64_t v432 = v431 & 0xFFFFFFFFFFFFFFF8;
            if (v432) {
              goto LABEL_564;
            }
          }
        }
LABEL_134:
        uint64_t v137 = *(void *)(v131 + 40);
        *((void *)v136 + 3) = v137;
        uint64_t v138 = *(void *)(v137 + 32);
        uint64_t v139 = *((unsigned int *)v136 + 10);
        if (v139)
        {
          uint64_t v271 = *((void *)v136 + 4);
          uint64_t v272 = *(void *)(v138 + 40);
          uint64_t v273 = 32 * v139;
          do
          {
            if (!*(unsigned char *)v271)
            {
              uint64_t v274 = *(unsigned int *)(v271 + 4);
              if ((int)v274 >= 0) {
                uint64_t v275 = (uint64_t *)(*(void *)(v272 + 272) + 8 * v274);
              }
              else {
                uint64_t v275 = (uint64_t *)(*(void *)(v272 + 24) + 16 * (v274 & 0x7FFFFFFF) + 8);
              }
              uint64_t v276 = *v275;
              if (*v275)
              {
                uint64_t v277 = *(void *)(v276 + 16);
                *(void *)(v276 + 16) = v271;
                *(void *)(v271 + 16) = v277;
                if (*(unsigned char *)(v271 + 3))
                {
                  *(void *)(v271 + 24) = v276;
                }
                else
                {
                  *(void *)(v271 + 24) = 0;
                  uint64_t v275 = (uint64_t *)(v277 + 24);
                }
              }
              else
              {
                *(void *)(v271 + 16) = v271;
                *(void *)(v271 + 24) = 0;
              }
              uint64_t *v275 = v271;
            }
            v271 += 32;
            v273 -= 32;
          }
          while (v273);
        }
        uint64_t v140 = *(void *)(v138 + 728);
        if (v140) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v140 + 24))(v140, v136);
        }
        unint64_t v141 = *v132 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v136 = v141 | *(void *)v136 & 7;
        *((void *)v136 + 1) = v132;
        *(void *)(v141 + 8) = v136;
        *uint64_t v132 = *v132 & 7 | (unint64_t)v136;
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 0;
        llvm::MachineInstr::addOperand(v136, v134, (const llvm::MachineOperand *)&v492);
        *((void *)&v492 + 1) = 0;
        long long v493 = 0uLL;
        LODWORD(v492) = 0;
        DWORD1(v492) = v129;
        llvm::MachineInstr::addOperand(v136, v134, (const llvm::MachineOperand *)&v492);
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 0;
        llvm::MachineInstr::addOperand(v136, v134, (const llvm::MachineOperand *)&v492);
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 0x100000000;
        llvm::MachineInstr::addOperand(v136, v134, (const llvm::MachineOperand *)&v492);
        long long v493 = 0uLL;
        long long v492 = 0x201000000uLL;
        llvm::MachineInstr::addOperand(v136, v134, (const llvm::MachineOperand *)&v492);
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 0;
        llvm::MachineInstr::addOperand(v136, v134, (const llvm::MachineOperand *)&v492);
        long long v492 = 0u;
        long long v493 = 0u;
        llvm::MachineInstr::addOperand(v136, v134, (const llvm::MachineOperand *)&v492);
LABEL_21:
        uint64_t v25 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v25) {
          BOOL v26 = *(unsigned char *)(v25 + 16) == 16;
        }
        else {
          BOOL v26 = 0;
        }
        int v27 = v26;
        if (v26)
        {
          uint64_t v28 = (void *)(v25 + 24);
          if (*(_DWORD *)(v25 + 32) >= 0x41u) {
            uint64_t v28 = (void *)*v28;
          }
          int v29 = 0;
          int v30 = (void *)*v28;
          unsigned int v31 = 11972;
        }
        else
        {
          int v142 = sub_1CD789230((uint64_t *)a1, v25);
          if ((v142 & 0x80000000) == 0) {
            return 0;
          }
          int v29 = v142;
          sub_1CC38D61C(*(void **)(a1 + 48), v29, *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v29 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A42B0, 0);
          int v30 = 0;
          unsigned int v31 = 11973;
        }
        uint64_t v32 = *(void *)(a1 + 32);
        uint64_t v33 = *(void *)(v32 + 640);
        uint64_t v34 = *(unint64_t **)(v32 + 648);
        uint64_t v35 = *(void *)(*(void *)(a1 + 96) + 8) + 48 * v31;
        uint64_t v36 = *(llvm::MachineFunction **)(v33 + 32);
        uint64_t v37 = *(unsigned __int8 **)(a1 + 72);
        uint64_t v497 = v37;
        if (v37) {
          llvm::MetadataTracking::track((uint64_t)&v497, v37, 2);
        }
        uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v35, &v497, 0);
        if (!v497) {
          goto LABEL_35;
        }
        int v422 = *v497;
        if ((v422 - 4) > 0x1E)
        {
          if ((v422 - 3) >= 0xFFFFFFFE) {
            unint64_t v425 = v497;
          }
          else {
            unint64_t v425 = 0;
          }
          if ((v422 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v424 = (unint64_t)(v425 + 8);
LABEL_518:
            *(void *)&long long v492 = &v497;
            sub_1CC5FA668(v424 + 16, &v492);
            goto LABEL_35;
          }
          if (v422 == 3) {
            *((void *)v497 + 1) = 0;
          }
        }
        else if ((v497[1] & 0x7F) == 2 || *((_DWORD *)v497 + 3))
        {
          uint64_t v423 = *((void *)v497 + 2);
          if ((v423 & 4) != 0)
          {
            unint64_t v424 = v423 & 0xFFFFFFFFFFFFFFF8;
            if (v424) {
              goto LABEL_518;
            }
          }
        }
LABEL_35:
        uint64_t v39 = *(void *)(v33 + 40);
        *((void *)v38 + 3) = v39;
        uint64_t v40 = *(void *)(v39 + 32);
        uint64_t v41 = *((unsigned int *)v38 + 10);
        if (v41)
        {
          uint64_t v143 = *((void *)v38 + 4);
          uint64_t v144 = *(void *)(v40 + 40);
          uint64_t v145 = 32 * v41;
          do
          {
            if (!*(unsigned char *)v143)
            {
              uint64_t v146 = *(unsigned int *)(v143 + 4);
              if ((int)v146 >= 0) {
                int v147 = (uint64_t *)(*(void *)(v144 + 272) + 8 * v146);
              }
              else {
                int v147 = (uint64_t *)(*(void *)(v144 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8);
              }
              uint64_t v148 = *v147;
              if (*v147)
              {
                uint64_t v149 = *(void *)(v148 + 16);
                *(void *)(v148 + 16) = v143;
                *(void *)(v143 + 16) = v149;
                if (*(unsigned char *)(v143 + 3))
                {
                  *(void *)(v143 + 24) = v148;
                }
                else
                {
                  *(void *)(v143 + 24) = 0;
                  int v147 = (uint64_t *)(v149 + 24);
                }
              }
              else
              {
                *(void *)(v143 + 16) = v143;
                *(void *)(v143 + 24) = 0;
              }
              *int v147 = v143;
            }
            v143 += 32;
            v145 -= 32;
          }
          while (v145);
        }
        uint64_t v42 = *(void *)(v40 + 728);
        if (v42) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v42 + 24))(v42, v38);
        }
        unint64_t v43 = *v34 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v38 = v43 | *(void *)v38 & 7;
        *((void *)v38 + 1) = v34;
        *(void *)(v43 + 8) = v38;
        *uint64_t v34 = *v34 & 7 | (unint64_t)v38;
        if (v27)
        {
          LODWORD(v492) = 1;
          *((void *)&v492 + 1) = 0;
          *(void *)&long long v493 = v30;
        }
        else
        {
          *((void *)&v492 + 1) = 0;
          long long v493 = 0uLL;
          LODWORD(v492) = 0;
          DWORD1(v492) = v29;
        }
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        uint64_t v14 = 1;
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 0;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        if (v5 == 1993)
        {
          LODWORD(v492) = 1;
          *((void *)&v492 + 1) = 0;
          *(void *)&long long v493 = 1;
          llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
          long long v493 = 0uLL;
          long long v492 = 0x200000000uLL;
LABEL_109:
          uint64_t v72 = v38;
          unint64_t v73 = v36;
LABEL_110:
          llvm::MachineInstr::addOperand(v72, v73, (const llvm::MachineOperand *)&v492);
          return v14;
        }
LABEL_108:
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 0;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        long long v492 = 0u;
        long long v493 = 0u;
        goto LABEL_109;
      case 1994:
        uint64_t v235 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t v236 = (void *)(v235 + 24);
        if (*(_DWORD *)(v235 + 32) >= 0x41u) {
          uint64_t v236 = (void *)*v236;
        }
        int v163 = (void *)*v236;
        uint64_t v14 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v14) {
          return v14;
        }
        uint64_t v237 = *(void *)(*(void *)(a2 + 40) + 56);
        uint64_t v238 = *(void *)(a1 + 256);
        if (!*(unsigned char *)(v238 + 280))
        {
          LODWORD(v492) = 0;
          BOOL v166 = sub_1CD3CA314(v238, v237, "LoadMCUCohMode", &v492);
          uint64_t v484 = v492;
          uint64_t v239 = *(void *)(a1 + 256);
          LODWORD(v492) = 0;
          BOOL v168 = sub_1CD3CA314(v239, v237, "LoadSLCCohMode", &v492);
          uint64_t v169 = v492;
          uint64_t v240 = *(void *)(a1 + 32);
          uint64_t v241 = *(void *)(v240 + 640);
          uint64_t v242 = *(unint64_t **)(v240 + 648);
          uint64_t v243 = *(void *)(*(void *)(a1 + 96) + 8) + 564672;
          uint64_t v36 = *(llvm::MachineFunction **)(v241 + 32);
          uint64_t v244 = *(unsigned __int8 **)(a1 + 72);
          uint64_t v497 = v244;
          if (v244) {
            llvm::MetadataTracking::track((uint64_t)&v497, v244, 2);
          }
          uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v243, &v497, 0);
          if (!v497) {
            goto LABEL_248;
          }
          int v459 = *v497;
          if ((v459 - 4) > 0x1E)
          {
            if ((v459 - 3) >= 0xFFFFFFFE) {
              uint64_t v477 = v497;
            }
            else {
              uint64_t v477 = 0;
            }
            if ((v459 - 3) < 0xFFFFFFFE)
            {
              if (v459 == 3) {
                *((void *)v497 + 1) = 0;
              }
              goto LABEL_248;
            }
            unint64_t v461 = (unint64_t)(v477 + 8);
          }
          else
          {
            if ((v497[1] & 0x7F) != 2 && !*((_DWORD *)v497 + 3)) {
              goto LABEL_248;
            }
            uint64_t v460 = *((void *)v497 + 2);
            if ((v460 & 4) == 0) {
              goto LABEL_248;
            }
            unint64_t v461 = v460 & 0xFFFFFFFFFFFFFFF8;
            if (!v461) {
              goto LABEL_248;
            }
          }
          *(void *)&long long v492 = &v497;
          sub_1CC5FA668(v461 + 16, &v492);
LABEL_248:
          uint64_t v245 = *(void *)(v241 + 40);
          *((void *)v38 + 3) = v245;
          uint64_t v246 = *(void *)(v245 + 32);
          uint64_t v247 = *((unsigned int *)v38 + 10);
          if (v247)
          {
            uint64_t v408 = *((void *)v38 + 4);
            uint64_t v409 = *(void *)(v246 + 40);
            uint64_t v410 = 32 * v247;
            do
            {
              if (!*(unsigned char *)v408)
              {
                uint64_t v411 = *(unsigned int *)(v408 + 4);
                if ((int)v411 >= 0) {
                  unsigned int v412 = (uint64_t *)(*(void *)(v409 + 272) + 8 * v411);
                }
                else {
                  unsigned int v412 = (uint64_t *)(*(void *)(v409 + 24) + 16 * (v411 & 0x7FFFFFFF) + 8);
                }
                uint64_t v413 = *v412;
                if (*v412)
                {
                  uint64_t v414 = *(void *)(v413 + 16);
                  *(void *)(v413 + 16) = v408;
                  *(void *)(v408 + 16) = v414;
                  if (*(unsigned char *)(v408 + 3))
                  {
                    *(void *)(v408 + 24) = v413;
                  }
                  else
                  {
                    *(void *)(v408 + 24) = 0;
                    unsigned int v412 = (uint64_t *)(v414 + 24);
                  }
                }
                else
                {
                  *(void *)(v408 + 16) = v408;
                  *(void *)(v408 + 24) = 0;
                }
                *unsigned int v412 = v408;
              }
              v408 += 32;
              v410 -= 32;
            }
            while (v410);
          }
          uint64_t v248 = *(void *)(v246 + 728);
          if (v248) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v248 + 24))(v248, v38);
          }
          unint64_t v249 = *v242 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v38 = v249 | *(void *)v38 & 7;
          *((void *)v38 + 1) = v242;
          *(void *)(v249 + 8) = v38;
          *uint64_t v242 = *v242 & 7 | (unint64_t)v38;
          *((void *)&v492 + 1) = 0;
          long long v493 = 0uLL;
          LODWORD(v492) = 0x1000000;
          DWORD1(v492) = v14;
          goto LABEL_252;
        }
        LODWORD(v492) = 0;
        BOOL v324 = sub_1CD3CA314(v238, v237, "LoadCMode", &v492);
        uint64_t v489 = v492;
        uint64_t v325 = *(void *)(a1 + 256);
        LODWORD(v492) = 0;
        BOOL v326 = sub_1CD3CA314(v325, v237, "LoadSLCMode", &v492);
        uint64_t v281 = v492;
        uint64_t v327 = *(void *)(a1 + 32);
        uint64_t v328 = *(void *)(v327 + 640);
        uint64_t v329 = *(unint64_t **)(v327 + 648);
        uint64_t v330 = *(void *)(*(void *)(a1 + 96) + 8) + 564624;
        uint64_t v36 = *(llvm::MachineFunction **)(v328 + 32);
        uint64_t v331 = *(unsigned __int8 **)(a1 + 72);
        uint64_t v497 = v331;
        if (v331) {
          llvm::MetadataTracking::track((uint64_t)&v497, v331, 2);
        }
        uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v330, &v497, 0);
        if (!v497) {
          goto LABEL_340;
        }
        int v471 = *v497;
        if ((v471 - 4) > 0x1E)
        {
          if ((v471 - 3) >= 0xFFFFFFFE) {
            uint64_t v481 = v497;
          }
          else {
            uint64_t v481 = 0;
          }
          if ((v471 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v473 = (unint64_t)(v481 + 8);
LABEL_700:
            *(void *)&long long v492 = &v497;
            sub_1CC5FA668(v473 + 16, &v492);
            goto LABEL_340;
          }
          if (v471 == 3) {
            *((void *)v497 + 1) = 0;
          }
        }
        else if ((v497[1] & 0x7F) == 2 || *((_DWORD *)v497 + 3))
        {
          uint64_t v472 = *((void *)v497 + 2);
          if ((v472 & 4) != 0)
          {
            unint64_t v473 = v472 & 0xFFFFFFFFFFFFFFF8;
            if (v473) {
              goto LABEL_700;
            }
          }
        }
LABEL_340:
        uint64_t v332 = *(void *)(v328 + 40);
        *((void *)v38 + 3) = v332;
        uint64_t v333 = *(void *)(v332 + 32);
        uint64_t v334 = *((unsigned int *)v38 + 10);
        if (v334)
        {
          uint64_t v415 = *((void *)v38 + 4);
          uint64_t v416 = *(void *)(v333 + 40);
          uint64_t v417 = 32 * v334;
          do
          {
            if (!*(unsigned char *)v415)
            {
              uint64_t v418 = *(unsigned int *)(v415 + 4);
              if ((int)v418 >= 0) {
                unint64_t v419 = (uint64_t *)(*(void *)(v416 + 272) + 8 * v418);
              }
              else {
                unint64_t v419 = (uint64_t *)(*(void *)(v416 + 24) + 16 * (v418 & 0x7FFFFFFF) + 8);
              }
              uint64_t v420 = *v419;
              if (*v419)
              {
                uint64_t v421 = *(void *)(v420 + 16);
                *(void *)(v420 + 16) = v415;
                *(void *)(v415 + 16) = v421;
                if (*(unsigned char *)(v415 + 3))
                {
                  *(void *)(v415 + 24) = v420;
                }
                else
                {
                  *(void *)(v415 + 24) = 0;
                  unint64_t v419 = (uint64_t *)(v421 + 24);
                }
              }
              else
              {
                *(void *)(v415 + 16) = v415;
                *(void *)(v415 + 24) = 0;
              }
              *unint64_t v419 = v415;
            }
            v415 += 32;
            v417 -= 32;
          }
          while (v417);
        }
        uint64_t v335 = *(void *)(v333 + 728);
        if (v335) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v335 + 24))(v335, v38);
        }
        unint64_t v336 = *v329 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v38 = v336 | *(void *)v38 & 7;
        *((void *)v38 + 1) = v329;
        *(void *)(v336 + 8) = v38;
        *uint64_t v329 = *v329 & 7 | (unint64_t)v38;
        *((void *)&v492 + 1) = 0;
        long long v493 = 0uLL;
        LODWORD(v492) = 0x1000000;
        DWORD1(v492) = v14;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        uint64_t v14 = 1;
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 2 * (void)v163;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        LODWORD(v492) = 1;
        uint64_t v337 = v489;
        if (!v324) {
          uint64_t v337 = 0;
        }
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = v337;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        BOOL v293 = !v326;
LABEL_346:
        LODWORD(v492) = 1;
        if (v293) {
          uint64_t v323 = 1;
        }
        else {
          uint64_t v323 = v281;
        }
LABEL_349:
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = v323;
        goto LABEL_350;
      case 1995:
        uint64_t v180 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        unsigned int v181 = (void *)(v180 + 24);
        if (*(_DWORD *)(v180 + 32) >= 0x41u) {
          unsigned int v181 = (void *)*v181;
        }
        uint64_t v182 = (void *)*v181;
        uint64_t v14 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v14) {
          return v14;
        }
        uint64_t v183 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        long long v184 = (void *)(v183 + 24);
        if (*(_DWORD *)(v183 + 32) >= 0x41u) {
          long long v184 = (void *)*v184;
        }
        unsigned int v185 = (void *)*v184;
        uint64_t v186 = *(void *)(*(void *)(a2 + 40) + 56);
        uint64_t v187 = *(void *)(a1 + 256);
        if (!*(unsigned char *)(v187 + 280))
        {
          LODWORD(v492) = 0;
          BOOL v188 = sub_1CD3CA314(v187, v186, "LoadMCUCohMode", &v492);
          uint64_t v485 = v492;
          uint64_t v189 = *(void *)(a1 + 256);
          LODWORD(v492) = 0;
          BOOL v190 = sub_1CD3CA314(v189, v186, "LoadSLCCohMode", &v492);
          uint64_t v482 = v492;
          uint64_t v191 = *(void *)(a1 + 32);
          uint64_t v192 = *(void *)(v191 + 640);
          long long v193 = *(unint64_t **)(v191 + 648);
          uint64_t v194 = *(void *)(*(void *)(a1 + 96) + 8) + 14016;
          uint64_t v36 = *(llvm::MachineFunction **)(v192 + 32);
          uint64_t v195 = *(unsigned __int8 **)(a1 + 72);
          uint64_t v497 = v195;
          if (v195) {
            llvm::MetadataTracking::track((uint64_t)&v497, v195, 2);
          }
          uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v194, &v497, 0);
          if (!v497) {
            goto LABEL_201;
          }
          int v453 = *v497;
          if ((v453 - 4) > 0x1E)
          {
            if ((v453 - 3) >= 0xFFFFFFFE) {
              uint64_t v475 = v497;
            }
            else {
              uint64_t v475 = 0;
            }
            if ((v453 - 3) < 0xFFFFFFFE)
            {
              if (v453 == 3) {
                *((void *)v497 + 1) = 0;
              }
              goto LABEL_201;
            }
            unint64_t v455 = (unint64_t)(v475 + 8);
          }
          else
          {
            if ((v497[1] & 0x7F) != 2 && !*((_DWORD *)v497 + 3)) {
              goto LABEL_201;
            }
            uint64_t v454 = *((void *)v497 + 2);
            if ((v454 & 4) == 0) {
              goto LABEL_201;
            }
            unint64_t v455 = v454 & 0xFFFFFFFFFFFFFFF8;
            if (!v455) {
              goto LABEL_201;
            }
          }
          *(void *)&long long v492 = &v497;
          sub_1CC5FA668(v455 + 16, &v492);
LABEL_201:
          uint64_t v196 = *(void *)(v192 + 40);
          *((void *)v38 + 3) = v196;
          uint64_t v197 = *(void *)(v196 + 32);
          uint64_t v198 = *((unsigned int *)v38 + 10);
          if (v198)
          {
            uint64_t v380 = *((void *)v38 + 4);
            uint64_t v381 = *(void *)(v197 + 40);
            uint64_t v382 = 32 * v198;
            do
            {
              if (!*(unsigned char *)v380)
              {
                uint64_t v383 = *(unsigned int *)(v380 + 4);
                if ((int)v383 >= 0) {
                  unint64_t v384 = (uint64_t *)(*(void *)(v381 + 272) + 8 * v383);
                }
                else {
                  unint64_t v384 = (uint64_t *)(*(void *)(v381 + 24) + 16 * (v383 & 0x7FFFFFFF) + 8);
                }
                uint64_t v385 = *v384;
                if (*v384)
                {
                  uint64_t v386 = *(void *)(v385 + 16);
                  *(void *)(v385 + 16) = v380;
                  *(void *)(v380 + 16) = v386;
                  if (*(unsigned char *)(v380 + 3))
                  {
                    *(void *)(v380 + 24) = v385;
                  }
                  else
                  {
                    *(void *)(v380 + 24) = 0;
                    unint64_t v384 = (uint64_t *)(v386 + 24);
                  }
                }
                else
                {
                  *(void *)(v380 + 16) = v380;
                  *(void *)(v380 + 24) = 0;
                }
                uint64_t *v384 = v380;
              }
              v380 += 32;
              v382 -= 32;
            }
            while (v382);
          }
          uint64_t v199 = *(void *)(v197 + 728);
          if (v199) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v199 + 24))(v199, v38);
          }
          unint64_t v200 = *v193 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v38 = v200 | *(void *)v38 & 7;
          *((void *)v38 + 1) = v193;
          *(void *)(v200 + 8) = v38;
          *long long v193 = *v193 & 7 | (unint64_t)v38;
          *((void *)&v492 + 1) = 0;
          long long v493 = 0uLL;
          LODWORD(v492) = 0x1000000;
          DWORD1(v492) = v14;
          llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
          uint64_t v14 = 1;
          LODWORD(v492) = 1;
          *((void *)&v492 + 1) = 0;
          *(void *)&long long v493 = 2 * (void)v182;
          llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
          LODWORD(v492) = 1;
          *((void *)&v492 + 1) = 0;
          *(void *)&long long v493 = 2 * (void)v185;
          llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
          BOOL v201 = !v188;
          goto LABEL_235;
        }
        LODWORD(v492) = 0;
        BOOL v294 = sub_1CD3CA314(v187, v186, "LoadCMode", &v492);
        uint64_t v487 = v492;
        uint64_t v295 = *(void *)(a1 + 256);
        LODWORD(v492) = 0;
        BOOL v296 = sub_1CD3CA314(v295, v186, "LoadSLCMode", &v492);
        uint64_t v483 = v492;
        uint64_t v297 = *(void *)(a1 + 32);
        uint64_t v298 = *(void *)(v297 + 640);
        uint64_t v299 = *(unint64_t **)(v297 + 648);
        uint64_t v300 = *(void *)(*(void *)(a1 + 96) + 8) + 13968;
        uint64_t v36 = *(llvm::MachineFunction **)(v298 + 32);
        uint64_t v301 = *(unsigned __int8 **)(a1 + 72);
        uint64_t v497 = v301;
        if (v301) {
          llvm::MetadataTracking::track((uint64_t)&v497, v301, 2);
        }
        uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v300, &v497, 0);
        if (!v497) {
          goto LABEL_319;
        }
        int v465 = *v497;
        if ((v465 - 4) > 0x1E)
        {
          if ((v465 - 3) >= 0xFFFFFFFE) {
            uint64_t v479 = v497;
          }
          else {
            uint64_t v479 = 0;
          }
          if ((v465 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v467 = (unint64_t)(v479 + 8);
LABEL_688:
            *(void *)&long long v492 = &v497;
            sub_1CC5FA668(v467 + 16, &v492);
            goto LABEL_319;
          }
          if (v465 == 3) {
            *((void *)v497 + 1) = 0;
          }
        }
        else if ((v497[1] & 0x7F) == 2 || *((_DWORD *)v497 + 3))
        {
          uint64_t v466 = *((void *)v497 + 2);
          if ((v466 & 4) != 0)
          {
            unint64_t v467 = v466 & 0xFFFFFFFFFFFFFFF8;
            if (v467) {
              goto LABEL_688;
            }
          }
        }
LABEL_319:
        uint64_t v302 = *(void *)(v298 + 40);
        *((void *)v38 + 3) = v302;
        uint64_t v303 = *(void *)(v302 + 32);
        uint64_t v304 = *((unsigned int *)v38 + 10);
        if (v304)
        {
          uint64_t v387 = *((void *)v38 + 4);
          uint64_t v388 = *(void *)(v303 + 40);
          uint64_t v389 = 32 * v304;
          do
          {
            if (!*(unsigned char *)v387)
            {
              uint64_t v390 = *(unsigned int *)(v387 + 4);
              if ((int)v390 >= 0) {
                long long v391 = (uint64_t *)(*(void *)(v388 + 272) + 8 * v390);
              }
              else {
                long long v391 = (uint64_t *)(*(void *)(v388 + 24) + 16 * (v390 & 0x7FFFFFFF) + 8);
              }
              uint64_t v392 = *v391;
              if (*v391)
              {
                uint64_t v393 = *(void *)(v392 + 16);
                *(void *)(v392 + 16) = v387;
                *(void *)(v387 + 16) = v393;
                if (*(unsigned char *)(v387 + 3))
                {
                  *(void *)(v387 + 24) = v392;
                }
                else
                {
                  *(void *)(v387 + 24) = 0;
                  long long v391 = (uint64_t *)(v393 + 24);
                }
              }
              else
              {
                *(void *)(v387 + 16) = v387;
                *(void *)(v387 + 24) = 0;
              }
              *long long v391 = v387;
            }
            v387 += 32;
            v389 -= 32;
          }
          while (v389);
        }
        uint64_t v305 = *(void *)(v303 + 728);
        if (v305) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v305 + 24))(v305, v38);
        }
        unint64_t v306 = *v299 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v38 = v306 | *(void *)v38 & 7;
        *((void *)v38 + 1) = v299;
        *(void *)(v306 + 8) = v38;
        *uint64_t v299 = *v299 & 7 | (unint64_t)v38;
        *((void *)&v492 + 1) = 0;
        long long v493 = 0uLL;
        LODWORD(v492) = 0x1000000;
        DWORD1(v492) = v14;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        uint64_t v14 = 1;
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 2 * (void)v182;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 2 * (void)v185;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        LODWORD(v492) = 1;
        uint64_t v307 = v487;
        if (!v294) {
          uint64_t v307 = 0;
        }
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = v307;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        BOOL v308 = !v296;
LABEL_334:
        LODWORD(v492) = 1;
        uint64_t v323 = v483;
        if (v308) {
          uint64_t v323 = 1;
        }
        goto LABEL_349;
      case 1996:
        uint64_t v161 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t v162 = (void *)(*v161 + 24);
        if (*(_DWORD *)(*v161 + 32) >= 0x41u) {
          uint64_t v162 = (void *)*v162;
        }
        int v163 = (void *)*v162;
        uint64_t v14 = sub_1CD789230((uint64_t *)a1, v161[4]);
        if (!v14) {
          return v14;
        }
        uint64_t v164 = *(void *)(*(void *)(a2 + 40) + 56);
        uint64_t v165 = *(void *)(a1 + 256);
        if (!*(unsigned char *)(v165 + 280))
        {
          LODWORD(v492) = 0;
          BOOL v166 = sub_1CD3CA314(v165, v164, "StoreMCUCohMode", &v492);
          uint64_t v484 = v492;
          uint64_t v167 = *(void *)(a1 + 256);
          LODWORD(v492) = 0;
          BOOL v168 = sub_1CD3CA314(v167, v164, "StoreSLCCohMode", &v492);
          uint64_t v169 = v492;
          uint64_t v170 = *(void *)(a1 + 32);
          uint64_t v171 = *(void *)(v170 + 640);
          unsigned int v172 = *(unint64_t **)(v170 + 648);
          uint64_t v173 = *(void *)(*(void *)(a1 + 96) + 8) + 642768;
          uint64_t v36 = *(llvm::MachineFunction **)(v171 + 32);
          int v174 = *(unsigned __int8 **)(a1 + 72);
          uint64_t v497 = v174;
          if (v174) {
            llvm::MetadataTracking::track((uint64_t)&v497, v174, 2);
          }
          uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v173, &v497, 0);
          if (!v497)
          {
LABEL_188:
            uint64_t v175 = *(void *)(v171 + 40);
            *((void *)v38 + 3) = v175;
            uint64_t v176 = *(void *)(v175 + 32);
            uint64_t v177 = *((unsigned int *)v38 + 10);
            if (v177)
            {
              uint64_t v366 = *((void *)v38 + 4);
              uint64_t v367 = *(void *)(v176 + 40);
              uint64_t v368 = 32 * v177;
              do
              {
                if (!*(unsigned char *)v366)
                {
                  uint64_t v369 = *(unsigned int *)(v366 + 4);
                  if ((int)v369 >= 0) {
                    int v370 = (uint64_t *)(*(void *)(v367 + 272) + 8 * v369);
                  }
                  else {
                    int v370 = (uint64_t *)(*(void *)(v367 + 24) + 16 * (v369 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v371 = *v370;
                  if (*v370)
                  {
                    uint64_t v372 = *(void *)(v371 + 16);
                    *(void *)(v371 + 16) = v366;
                    *(void *)(v366 + 16) = v372;
                    if (*(unsigned char *)(v366 + 3))
                    {
                      *(void *)(v366 + 24) = v371;
                    }
                    else
                    {
                      *(void *)(v366 + 24) = 0;
                      int v370 = (uint64_t *)(v372 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v366 + 16) = v366;
                    *(void *)(v366 + 24) = 0;
                  }
                  *int v370 = v366;
                }
                v366 += 32;
                v368 -= 32;
              }
              while (v368);
            }
            uint64_t v178 = *(void *)(v176 + 728);
            if (v178) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v178 + 24))(v178, v38);
            }
            unint64_t v179 = *v172 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v38 = v179 | *(void *)v38 & 7;
            *((void *)v38 + 1) = v172;
            *(void *)(v179 + 8) = v38;
            *unsigned int v172 = *v172 & 7 | (unint64_t)v38;
            *((void *)&v492 + 1) = 0;
            long long v493 = 0uLL;
            LODWORD(v492) = 0;
            DWORD1(v492) = v14;
LABEL_252:
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            uint64_t v14 = 1;
            LODWORD(v492) = 1;
            *((void *)&v492 + 1) = 0;
            *(void *)&long long v493 = 2 * (void)v163;
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            LODWORD(v492) = 1;
            uint64_t v250 = v484;
            if (!v166) {
              uint64_t v250 = 0;
            }
            *((void *)&v492 + 1) = 0;
            *(void *)&long long v493 = v250;
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            LODWORD(v492) = 1;
            if (v168) {
              uint64_t v234 = v169;
            }
            else {
              uint64_t v234 = 0;
            }
LABEL_257:
            *((void *)&v492 + 1) = 0;
            *(void *)&long long v493 = v234;
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            LODWORD(v492) = 1;
            *((void *)&v492 + 1) = 0;
            *(void *)&long long v493 = 0;
LABEL_350:
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            LODWORD(v492) = 1;
            *((void *)&v492 + 1) = 0;
            *(void *)&long long v493 = 0;
LABEL_107:
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            goto LABEL_108;
          }
          int v450 = *v497;
          if ((v450 - 4) > 0x1E)
          {
            if ((v450 - 3) >= 0xFFFFFFFE) {
              uint64_t v474 = v497;
            }
            else {
              uint64_t v474 = 0;
            }
            if ((v450 - 3) < 0xFFFFFFFE)
            {
              if (v450 == 3) {
                *((void *)v497 + 1) = 0;
              }
              goto LABEL_188;
            }
            unint64_t v452 = (unint64_t)(v474 + 8);
          }
          else
          {
            if ((v497[1] & 0x7F) != 2 && !*((_DWORD *)v497 + 3)) {
              goto LABEL_188;
            }
            uint64_t v451 = *((void *)v497 + 2);
            if ((v451 & 4) == 0) {
              goto LABEL_188;
            }
            unint64_t v452 = v451 & 0xFFFFFFFFFFFFFFF8;
            if (!v452) {
              goto LABEL_188;
            }
          }
          *(void *)&long long v492 = &v497;
          sub_1CC5FA668(v452 + 16, &v492);
          goto LABEL_188;
        }
        LODWORD(v492) = 0;
        BOOL v278 = sub_1CD3CA314(v165, v164, "StoreCMode", &v492);
        uint64_t v486 = v492;
        uint64_t v279 = *(void *)(a1 + 256);
        LODWORD(v492) = 0;
        BOOL v280 = sub_1CD3CA314(v279, v164, "StoreSLCMode", &v492);
        uint64_t v281 = v492;
        uint64_t v282 = *(void *)(a1 + 32);
        uint64_t v283 = *(void *)(v282 + 640);
        uint64_t v284 = *(unint64_t **)(v282 + 648);
        uint64_t v285 = *(void *)(*(void *)(a1 + 96) + 8) + 642720;
        uint64_t v36 = *(llvm::MachineFunction **)(v283 + 32);
        uint64_t v286 = *(unsigned __int8 **)(a1 + 72);
        uint64_t v497 = v286;
        if (v286) {
          llvm::MetadataTracking::track((uint64_t)&v497, v286, 2);
        }
        uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v285, &v497, 0);
        if (!v497) {
          goto LABEL_310;
        }
        int v462 = *v497;
        if ((v462 - 4) > 0x1E)
        {
          if ((v462 - 3) >= 0xFFFFFFFE) {
            uint64_t v478 = v497;
          }
          else {
            uint64_t v478 = 0;
          }
          if ((v462 - 3) < 0xFFFFFFFE)
          {
            if (v462 == 3) {
              *((void *)v497 + 1) = 0;
            }
            goto LABEL_310;
          }
          unint64_t v464 = (unint64_t)(v478 + 8);
        }
        else
        {
          if ((v497[1] & 0x7F) != 2 && !*((_DWORD *)v497 + 3)) {
            goto LABEL_310;
          }
          uint64_t v463 = *((void *)v497 + 2);
          if ((v463 & 4) == 0) {
            goto LABEL_310;
          }
          unint64_t v464 = v463 & 0xFFFFFFFFFFFFFFF8;
          if (!v464) {
            goto LABEL_310;
          }
        }
        *(void *)&long long v492 = &v497;
        sub_1CC5FA668(v464 + 16, &v492);
LABEL_310:
        uint64_t v287 = *(void *)(v283 + 40);
        *((void *)v38 + 3) = v287;
        uint64_t v288 = *(void *)(v287 + 32);
        uint64_t v289 = *((unsigned int *)v38 + 10);
        if (v289)
        {
          uint64_t v373 = *((void *)v38 + 4);
          uint64_t v374 = *(void *)(v288 + 40);
          uint64_t v375 = 32 * v289;
          do
          {
            if (!*(unsigned char *)v373)
            {
              uint64_t v376 = *(unsigned int *)(v373 + 4);
              if ((int)v376 >= 0) {
                uint64_t v377 = (uint64_t *)(*(void *)(v374 + 272) + 8 * v376);
              }
              else {
                uint64_t v377 = (uint64_t *)(*(void *)(v374 + 24) + 16 * (v376 & 0x7FFFFFFF) + 8);
              }
              uint64_t v378 = *v377;
              if (*v377)
              {
                uint64_t v379 = *(void *)(v378 + 16);
                *(void *)(v378 + 16) = v373;
                *(void *)(v373 + 16) = v379;
                if (*(unsigned char *)(v373 + 3))
                {
                  *(void *)(v373 + 24) = v378;
                }
                else
                {
                  *(void *)(v373 + 24) = 0;
                  uint64_t v377 = (uint64_t *)(v379 + 24);
                }
              }
              else
              {
                *(void *)(v373 + 16) = v373;
                *(void *)(v373 + 24) = 0;
              }
              *uint64_t v377 = v373;
            }
            v373 += 32;
            v375 -= 32;
          }
          while (v375);
        }
        uint64_t v290 = *(void *)(v288 + 728);
        if (v290) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v290 + 24))(v290, v38);
        }
        unint64_t v291 = *v284 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v38 = v291 | *(void *)v38 & 7;
        *((void *)v38 + 1) = v284;
        *(void *)(v291 + 8) = v38;
        unint64_t *v284 = *v284 & 7 | (unint64_t)v38;
        *((void *)&v492 + 1) = 0;
        long long v493 = 0uLL;
        LODWORD(v492) = 0;
        DWORD1(v492) = v14;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        uint64_t v14 = 1;
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 2 * (void)v163;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        uint64_t v292 = 2;
        LODWORD(v492) = 1;
        if (v278) {
          uint64_t v292 = v486;
        }
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = v292;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        BOOL v293 = !v280;
        goto LABEL_346;
      case 1997:
        int v213 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t v214 = (void *)(*v213 + 24);
        if (*(_DWORD *)(*v213 + 32) >= 0x41u) {
          uint64_t v214 = (void *)*v214;
        }
        unint64_t v215 = (void *)*v214;
        uint64_t v14 = sub_1CD789230((uint64_t *)a1, v213[4]);
        if (!v14) {
          return v14;
        }
        uint64_t v216 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
        uint64_t v217 = (void *)(v216 + 24);
        if (*(_DWORD *)(v216 + 32) >= 0x41u) {
          uint64_t v217 = (void *)*v217;
        }
        uint64_t v218 = (void *)*v217;
        uint64_t v219 = *(void *)(*(void *)(a2 + 40) + 56);
        uint64_t v220 = *(void *)(a1 + 256);
        if (!*(unsigned char *)(v220 + 280))
        {
          LODWORD(v492) = 0;
          BOOL v221 = sub_1CD3CA314(v220, v219, "StoreMCUCohMode", &v492);
          uint64_t v485 = v492;
          uint64_t v222 = *(void *)(a1 + 256);
          LODWORD(v492) = 0;
          BOOL v190 = sub_1CD3CA314(v222, v219, "StoreSLCCohMode", &v492);
          uint64_t v482 = v492;
          uint64_t v223 = *(void *)(a1 + 32);
          uint64_t v224 = *(void *)(v223 + 640);
          uint64_t v225 = *(unint64_t **)(v223 + 648);
          uint64_t v226 = *(void *)(*(void *)(a1 + 96) + 8) + 15120;
          uint64_t v36 = *(llvm::MachineFunction **)(v224 + 32);
          unint64_t v227 = *(unsigned __int8 **)(a1 + 72);
          uint64_t v497 = v227;
          if (v227) {
            llvm::MetadataTracking::track((uint64_t)&v497, v227, 2);
          }
          uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v226, &v497, 0);
          if (!v497)
          {
LABEL_231:
            uint64_t v228 = *(void *)(v224 + 40);
            *((void *)v38 + 3) = v228;
            uint64_t v229 = *(void *)(v228 + 32);
            uint64_t v230 = *((unsigned int *)v38 + 10);
            if (v230)
            {
              uint64_t v394 = *((void *)v38 + 4);
              uint64_t v395 = *(void *)(v229 + 40);
              uint64_t v396 = 32 * v230;
              do
              {
                if (!*(unsigned char *)v394)
                {
                  uint64_t v397 = *(unsigned int *)(v394 + 4);
                  if ((int)v397 >= 0) {
                    uint64_t v398 = (uint64_t *)(*(void *)(v395 + 272) + 8 * v397);
                  }
                  else {
                    uint64_t v398 = (uint64_t *)(*(void *)(v395 + 24) + 16 * (v397 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v399 = *v398;
                  if (*v398)
                  {
                    uint64_t v400 = *(void *)(v399 + 16);
                    *(void *)(v399 + 16) = v394;
                    *(void *)(v394 + 16) = v400;
                    if (*(unsigned char *)(v394 + 3))
                    {
                      *(void *)(v394 + 24) = v399;
                    }
                    else
                    {
                      *(void *)(v394 + 24) = 0;
                      uint64_t v398 = (uint64_t *)(v400 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v394 + 16) = v394;
                    *(void *)(v394 + 24) = 0;
                  }
                  *uint64_t v398 = v394;
                }
                v394 += 32;
                v396 -= 32;
              }
              while (v396);
            }
            uint64_t v231 = *(void *)(v229 + 728);
            if (v231) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v231 + 24))(v231, v38);
            }
            unint64_t v232 = *v225 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v38 = v232 | *(void *)v38 & 7;
            *((void *)v38 + 1) = v225;
            *(void *)(v232 + 8) = v38;
            unint64_t *v225 = *v225 & 7 | (unint64_t)v38;
            *((void *)&v492 + 1) = 0;
            long long v493 = 0uLL;
            LODWORD(v492) = 0;
            DWORD1(v492) = v14;
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            uint64_t v14 = 1;
            LODWORD(v492) = 1;
            *((void *)&v492 + 1) = 0;
            *(void *)&long long v493 = 2 * (void)v215;
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            LODWORD(v492) = 1;
            *((void *)&v492 + 1) = 0;
            *(void *)&long long v493 = 2 * (void)v218;
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            BOOL v201 = !v221;
LABEL_235:
            LODWORD(v492) = 1;
            uint64_t v233 = v485;
            if (v201) {
              uint64_t v233 = 0;
            }
            *((void *)&v492 + 1) = 0;
            *(void *)&long long v493 = v233;
            llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
            LODWORD(v492) = 1;
            uint64_t v234 = v482;
            if (!v190) {
              uint64_t v234 = 0;
            }
            goto LABEL_257;
          }
          int v456 = *v497;
          if ((v456 - 4) > 0x1E)
          {
            if ((v456 - 3) >= 0xFFFFFFFE) {
              uint64_t v476 = v497;
            }
            else {
              uint64_t v476 = 0;
            }
            if ((v456 - 3) < 0xFFFFFFFE)
            {
              if (v456 == 3) {
                *((void *)v497 + 1) = 0;
              }
              goto LABEL_231;
            }
            unint64_t v458 = (unint64_t)(v476 + 8);
          }
          else
          {
            if ((v497[1] & 0x7F) != 2 && !*((_DWORD *)v497 + 3)) {
              goto LABEL_231;
            }
            uint64_t v457 = *((void *)v497 + 2);
            if ((v457 & 4) == 0) {
              goto LABEL_231;
            }
            unint64_t v458 = v457 & 0xFFFFFFFFFFFFFFF8;
            if (!v458) {
              goto LABEL_231;
            }
          }
          *(void *)&long long v492 = &v497;
          sub_1CC5FA668(v458 + 16, &v492);
          goto LABEL_231;
        }
        LODWORD(v492) = 0;
        BOOL v309 = sub_1CD3CA314(v220, v219, "StoreCMode", &v492);
        uint64_t v488 = v492;
        uint64_t v310 = *(void *)(a1 + 256);
        LODWORD(v492) = 0;
        BOOL v311 = sub_1CD3CA314(v310, v219, "StoreSLCMode", &v492);
        uint64_t v483 = v492;
        uint64_t v312 = *(void *)(a1 + 32);
        uint64_t v313 = *(void *)(v312 + 640);
        uint64_t v314 = *(unint64_t **)(v312 + 648);
        uint64_t v315 = *(void *)(*(void *)(a1 + 96) + 8) + 15072;
        uint64_t v36 = *(llvm::MachineFunction **)(v313 + 32);
        uint64_t v316 = *(unsigned __int8 **)(a1 + 72);
        uint64_t v497 = v316;
        if (v316) {
          llvm::MetadataTracking::track((uint64_t)&v497, v316, 2);
        }
        uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v315, &v497, 0);
        if (!v497) {
          goto LABEL_328;
        }
        int v468 = *v497;
        if ((v468 - 4) > 0x1E)
        {
          if ((v468 - 3) >= 0xFFFFFFFE) {
            v480 = v497;
          }
          else {
            v480 = 0;
          }
          if ((v468 - 3) < 0xFFFFFFFE)
          {
            if (v468 == 3) {
              *((void *)v497 + 1) = 0;
            }
            goto LABEL_328;
          }
          unint64_t v470 = (unint64_t)(v480 + 8);
        }
        else
        {
          if ((v497[1] & 0x7F) != 2 && !*((_DWORD *)v497 + 3)) {
            goto LABEL_328;
          }
          uint64_t v469 = *((void *)v497 + 2);
          if ((v469 & 4) == 0) {
            goto LABEL_328;
          }
          unint64_t v470 = v469 & 0xFFFFFFFFFFFFFFF8;
          if (!v470) {
            goto LABEL_328;
          }
        }
        *(void *)&long long v492 = &v497;
        sub_1CC5FA668(v470 + 16, &v492);
LABEL_328:
        uint64_t v317 = *(void *)(v313 + 40);
        *((void *)v38 + 3) = v317;
        uint64_t v318 = *(void *)(v317 + 32);
        uint64_t v319 = *((unsigned int *)v38 + 10);
        if (v319)
        {
          uint64_t v401 = *((void *)v38 + 4);
          uint64_t v402 = *(void *)(v318 + 40);
          uint64_t v403 = 32 * v319;
          do
          {
            if (!*(unsigned char *)v401)
            {
              uint64_t v404 = *(unsigned int *)(v401 + 4);
              if ((int)v404 >= 0) {
                unsigned int v405 = (uint64_t *)(*(void *)(v402 + 272) + 8 * v404);
              }
              else {
                unsigned int v405 = (uint64_t *)(*(void *)(v402 + 24) + 16 * (v404 & 0x7FFFFFFF) + 8);
              }
              uint64_t v406 = *v405;
              if (*v405)
              {
                uint64_t v407 = *(void *)(v406 + 16);
                *(void *)(v406 + 16) = v401;
                *(void *)(v401 + 16) = v407;
                if (*(unsigned char *)(v401 + 3))
                {
                  *(void *)(v401 + 24) = v406;
                }
                else
                {
                  *(void *)(v401 + 24) = 0;
                  unsigned int v405 = (uint64_t *)(v407 + 24);
                }
              }
              else
              {
                *(void *)(v401 + 16) = v401;
                *(void *)(v401 + 24) = 0;
              }
              *unsigned int v405 = v401;
            }
            v401 += 32;
            v403 -= 32;
          }
          while (v403);
        }
        uint64_t v320 = *(void *)(v318 + 728);
        if (v320) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v320 + 24))(v320, v38);
        }
        unint64_t v321 = *v314 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v38 = v321 | *(void *)v38 & 7;
        *((void *)v38 + 1) = v314;
        *(void *)(v321 + 8) = v38;
        unint64_t *v314 = *v314 & 7 | (unint64_t)v38;
        *((void *)&v492 + 1) = 0;
        long long v493 = 0uLL;
        LODWORD(v492) = 0;
        DWORD1(v492) = v14;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        uint64_t v14 = 1;
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 2 * (void)v215;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 2 * (void)v218;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        uint64_t v322 = 2;
        LODWORD(v492) = 1;
        if (v309) {
          uint64_t v322 = v488;
        }
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = v322;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        BOOL v308 = !v311;
        goto LABEL_334;
      case 1998:
      case 2000:
      case 2002:
      case 2003:
      case 2004:
      case 2005:
      case 2006:
      case 2007:
      case 2008:
      case 2009:
      case 2010:
      case 2011:
      case 2012:
      case 2013:
      case 2014:
        return v14;
      case 1999:
      case 2001:
        int v122 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v122) {
          return 0;
        }
        BOOL v123 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        return sub_1CB862294((void *)a1, a2, v122, v123, 0);
      case 2015:
      case 2016:
        int v126 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v126) {
          return 0;
        }
        BOOL v127 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        return sub_1CB863004((void *)a1, a2, v126, v127, 0);
      default:
        char v58 = v5 - 45;
        if ((v5 - 2093) > 0xB) {
          goto LABEL_53;
        }
        if (((1 << v58) & 0xFE0) == 0)
        {
          if (((1 << v58) & 5) != 0)
          {
            int v150 = sub_1CD789230((uint64_t *)a1, a2);
            if (!v150) {
              return 0;
            }
            if (v5 == 2095) {
              unsigned int v151 = 6;
            }
            else {
              unsigned int v151 = 7;
            }
            return sub_1CB865F04((uint64_t *)a1, a2, v150, v151, 0);
          }
          if (((1 << v58) & 0xA) != 0)
          {
            int v152 = sub_1CD789230((uint64_t *)a1, a2);
            if (!v152) {
              return 0;
            }
            if (v5 == 2096) {
              unsigned int v153 = 2;
            }
            else {
              unsigned int v153 = 3;
            }
            return sub_1CB8657A8((uint64_t *)a1, a2, v152, v153, 0);
          }
LABEL_53:
          if (v5 != 1885) {
            return v14;
          }
          int v59 = sub_1CD789230((uint64_t *)a1, a2);
          if (!v59) {
            return 0;
          }
          int v60 = v59;
          uint64_t v61 = *(void *)(a1 + 32);
          uint64_t v62 = *(void *)(v61 + 640);
          uint64_t v63 = *(unint64_t **)(v61 + 648);
          uint64_t v64 = *(void *)(*(void *)(a1 + 96) + 8);
          if (*(unsigned char *)(*(void *)(a1 + 256) + 280))
          {
            uint64_t v65 = v64 + 532560;
            uint64_t v50 = *(llvm::MachineFunction **)(v62 + 32);
            unsigned int v66 = *(unsigned __int8 **)(a1 + 72);
            uint64_t v497 = v66;
            if (v66) {
              llvm::MetadataTracking::track((uint64_t)&v497, v66, 2);
            }
            uint64_t v52 = llvm::MachineFunction::CreateMachineInstr(v50, v65, &v497, 0);
            if (!v497) {
              goto LABEL_59;
            }
            int v436 = *v497;
            if ((v436 - 4) > 0x1E)
            {
              if ((v436 - 3) >= 0xFFFFFFFE) {
                int v447 = v497;
              }
              else {
                int v447 = 0;
              }
              if ((v436 - 3) < 0xFFFFFFFE)
              {
                if (v436 == 3) {
                  *((void *)v497 + 1) = 0;
                }
                goto LABEL_59;
              }
              unint64_t v438 = (unint64_t)(v447 + 8);
            }
            else
            {
              if ((v497[1] & 0x7F) != 2 && !*((_DWORD *)v497 + 3)) {
                goto LABEL_59;
              }
              uint64_t v437 = *((void *)v497 + 2);
              if ((v437 & 4) == 0) {
                goto LABEL_59;
              }
              unint64_t v438 = v437 & 0xFFFFFFFFFFFFFFF8;
              if (!v438) {
                goto LABEL_59;
              }
            }
            *(void *)&long long v492 = &v497;
            sub_1CC5FA668(v438 + 16, &v492);
LABEL_59:
            uint64_t v67 = *(void *)(v62 + 40);
            *((void *)v52 + 3) = v67;
            uint64_t v68 = *(void *)(v67 + 32);
            uint64_t v69 = *((unsigned int *)v52 + 10);
            if (v69)
            {
              uint64_t v345 = *((void *)v52 + 4);
              uint64_t v346 = *(void *)(v68 + 40);
              uint64_t v347 = 32 * v69;
              do
              {
                if (!*(unsigned char *)v345)
                {
                  uint64_t v348 = *(unsigned int *)(v345 + 4);
                  if ((int)v348 >= 0) {
                    int v349 = (uint64_t *)(*(void *)(v346 + 272) + 8 * v348);
                  }
                  else {
                    int v349 = (uint64_t *)(*(void *)(v346 + 24) + 16 * (v348 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v350 = *v349;
                  if (*v349)
                  {
                    uint64_t v351 = *(void *)(v350 + 16);
                    *(void *)(v350 + 16) = v345;
                    *(void *)(v345 + 16) = v351;
                    if (*(unsigned char *)(v345 + 3))
                    {
                      *(void *)(v345 + 24) = v350;
                    }
                    else
                    {
                      *(void *)(v345 + 24) = 0;
                      int v349 = (uint64_t *)(v351 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v345 + 16) = v345;
                    *(void *)(v345 + 24) = 0;
                  }
                  *int v349 = v345;
                }
                v345 += 32;
                v347 -= 32;
              }
              while (v347);
            }
            uint64_t v70 = *(void *)(v68 + 728);
            if (v70) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v70 + 24))(v70, v52);
            }
            unint64_t v71 = *v63 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v52 = v71 | *(void *)v52 & 7;
            *((void *)v52 + 1) = v63;
            *(void *)(v71 + 8) = v52;
            *uint64_t v63 = *v63 & 7 | (unint64_t)v52;
            *((void *)&v492 + 1) = 0;
            long long v493 = 0uLL;
            LODWORD(v492) = 0x1000000;
            DWORD1(v492) = v60;
            llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v492);
            uint64_t v14 = 1;
            LODWORD(v492) = 1;
            *((void *)&v492 + 1) = 0;
            *(void *)&long long v493 = 0;
            llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v492);
            goto LABEL_63;
          }
          uint64_t v255 = v64 + 912;
          uint64_t v256 = *(llvm::MachineFunction **)(v62 + 32);
          uint64_t v257 = *(unsigned __int8 **)(a1 + 72);
          uint64_t v497 = v257;
          if (v257) {
            llvm::MetadataTracking::track((uint64_t)&v497, v257, 2);
          }
          uint64_t v258 = llvm::MachineFunction::CreateMachineInstr(v256, v255, &v497, 0);
          if (v497)
          {
            int v443 = *v497;
            if ((v443 - 4) > 0x1E)
            {
              if ((v443 - 3) >= 0xFFFFFFFE) {
                unint64_t v449 = v497;
              }
              else {
                unint64_t v449 = 0;
              }
              if ((v443 - 3) < 0xFFFFFFFE)
              {
                if (v443 == 3) {
                  *((void *)v497 + 1) = 0;
                }
                goto LABEL_277;
              }
              unint64_t v445 = (unint64_t)(v449 + 8);
            }
            else
            {
              if ((v497[1] & 0x7F) != 2 && !*((_DWORD *)v497 + 3)) {
                goto LABEL_277;
              }
              uint64_t v444 = *((void *)v497 + 2);
              if ((v444 & 4) == 0) {
                goto LABEL_277;
              }
              unint64_t v445 = v444 & 0xFFFFFFFFFFFFFFF8;
              if (!v445) {
                goto LABEL_277;
              }
            }
            *(void *)&long long v492 = &v497;
            sub_1CC5FA668(v445 + 16, &v492);
          }
LABEL_277:
          uint64_t v259 = *(void *)(v62 + 40);
          *((void *)v258 + 3) = v259;
          uint64_t v260 = *(void *)(v259 + 32);
          uint64_t v261 = *((unsigned int *)v258 + 10);
          if (v261)
          {
            uint64_t v359 = *((void *)v258 + 4);
            uint64_t v360 = *(void *)(v260 + 40);
            uint64_t v361 = 32 * v261;
            do
            {
              if (!*(unsigned char *)v359)
              {
                uint64_t v362 = *(unsigned int *)(v359 + 4);
                if ((int)v362 >= 0) {
                  uint64_t v363 = (uint64_t *)(*(void *)(v360 + 272) + 8 * v362);
                }
                else {
                  uint64_t v363 = (uint64_t *)(*(void *)(v360 + 24) + 16 * (v362 & 0x7FFFFFFF) + 8);
                }
                uint64_t v364 = *v363;
                if (*v363)
                {
                  uint64_t v365 = *(void *)(v364 + 16);
                  *(void *)(v364 + 16) = v359;
                  *(void *)(v359 + 16) = v365;
                  if (*(unsigned char *)(v359 + 3))
                  {
                    *(void *)(v359 + 24) = v364;
                  }
                  else
                  {
                    *(void *)(v359 + 24) = 0;
                    uint64_t v363 = (uint64_t *)(v365 + 24);
                  }
                }
                else
                {
                  *(void *)(v359 + 16) = v359;
                  *(void *)(v359 + 24) = 0;
                }
                uint64_t *v363 = v359;
              }
              v359 += 32;
              v361 -= 32;
            }
            while (v361);
          }
          uint64_t v262 = *(void *)(v260 + 728);
          if (v262) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v262 + 24))(v262, v258);
          }
          unint64_t v263 = *v63 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v258 = v263 | *(void *)v258 & 7;
          *((void *)v258 + 1) = v63;
          *(void *)(v263 + 8) = v258;
          *uint64_t v63 = *v63 & 7 | (unint64_t)v258;
          *((void *)&v492 + 1) = 0;
          long long v493 = 0uLL;
          LODWORD(v492) = 0x1000000;
          DWORD1(v492) = v60;
          llvm::MachineInstr::addOperand(v258, v256, (const llvm::MachineOperand *)&v492);
          long long v493 = 0uLL;
          long long v492 = 0x11B00000000uLL;
          llvm::MachineInstr::addOperand(v258, v256, (const llvm::MachineOperand *)&v492);
          return 1;
        }
        uint64_t v107 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t v108 = (void *)(*v107 + 24);
        if (*(_DWORD *)(*v107 + 32) >= 0x41u) {
          uint64_t v108 = (void *)*v108;
        }
        uint64_t v109 = (void *)*v108;
        uint64_t v14 = sub_1CD789230((uint64_t *)a1, v107[4]);
        if (!v14) {
          return v14;
        }
        uint64_t v110 = *(void *)(a1 + 32);
        uint64_t v111 = *(void *)(v110 + 640);
        int v112 = *(unint64_t **)(v110 + 648);
        uint64_t v113 = *(void *)(*(void *)(a1 + 96) + 8) + 644496;
        uint64_t v36 = *(llvm::MachineFunction **)(v111 + 32);
        int v114 = *(unsigned __int8 **)(a1 + 72);
        uint64_t v497 = v114;
        if (v114) {
          llvm::MetadataTracking::track((uint64_t)&v497, v114, 2);
        }
        uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v113, &v497, 0);
        if (!v497) {
          goto LABEL_103;
        }
        int v426 = *v497;
        if ((v426 - 4) > 0x1E)
        {
          if ((v426 - 3) >= 0xFFFFFFFE) {
            int v429 = v497;
          }
          else {
            int v429 = 0;
          }
          if ((v426 - 3) < 0xFFFFFFFE)
          {
            if (v426 == 3) {
              *((void *)v497 + 1) = 0;
            }
            goto LABEL_103;
          }
          unint64_t v428 = (unint64_t)(v429 + 8);
        }
        else
        {
          if ((v497[1] & 0x7F) != 2 && !*((_DWORD *)v497 + 3)) {
            goto LABEL_103;
          }
          uint64_t v427 = *((void *)v497 + 2);
          if ((v427 & 4) == 0) {
            goto LABEL_103;
          }
          unint64_t v428 = v427 & 0xFFFFFFFFFFFFFFF8;
          if (!v428) {
            goto LABEL_103;
          }
        }
        *(void *)&long long v492 = &v497;
        sub_1CC5FA668(v428 + 16, &v492);
LABEL_103:
        uint64_t v115 = *(void *)(v111 + 40);
        *((void *)v38 + 3) = v115;
        uint64_t v116 = *(void *)(v115 + 32);
        uint64_t v117 = *((unsigned int *)v38 + 10);
        if (v117)
        {
          uint64_t v264 = *((void *)v38 + 4);
          uint64_t v265 = *(void *)(v116 + 40);
          uint64_t v266 = 32 * v117;
          do
          {
            if (!*(unsigned char *)v264)
            {
              uint64_t v267 = *(unsigned int *)(v264 + 4);
              if ((int)v267 >= 0) {
                uint64_t v268 = (uint64_t *)(*(void *)(v265 + 272) + 8 * v267);
              }
              else {
                uint64_t v268 = (uint64_t *)(*(void *)(v265 + 24) + 16 * (v267 & 0x7FFFFFFF) + 8);
              }
              uint64_t v269 = *v268;
              if (*v268)
              {
                uint64_t v270 = *(void *)(v269 + 16);
                *(void *)(v269 + 16) = v264;
                *(void *)(v264 + 16) = v270;
                if (*(unsigned char *)(v264 + 3))
                {
                  *(void *)(v264 + 24) = v269;
                }
                else
                {
                  *(void *)(v264 + 24) = 0;
                  uint64_t v268 = (uint64_t *)(v270 + 24);
                }
              }
              else
              {
                *(void *)(v264 + 16) = v264;
                *(void *)(v264 + 24) = 0;
              }
              *uint64_t v268 = v264;
            }
            v264 += 32;
            v266 -= 32;
          }
          while (v266);
        }
        uint64_t v118 = *(void *)(v116 + 728);
        if (v118) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v118 + 24))(v118, v38);
        }
        unint64_t v119 = *v112 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v38 = v119 | *(void *)v38 & 7;
        *((void *)v38 + 1) = v112;
        *(void *)(v119 + 8) = v38;
        *int v112 = *v112 & 7 | (unint64_t)v38;
        *((void *)&v492 + 1) = 0;
        long long v493 = 0uLL;
        LODWORD(v492) = 0;
        DWORD1(v492) = v14;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        uint64_t v14 = 1;
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = v109;
        goto LABEL_107;
    }
  }
  if ((int)v5 > 260)
  {
    switch((int)v5)
    {
      case 1827:
        int v253 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v253) {
          return 0;
        }
        int v101 = v253;
        uint64_t v102 = *(unsigned char **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        BOOL v103 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        uint64_t v104 = a1;
        unint64_t v105 = (uint64_t *)a2;
        int v106 = 445;
        goto LABEL_269;
      case 1828:
      case 1829:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1838:
      case 1848:
      case 1849:
        return v14;
      case 1830:
        uint64_t v251 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v251) {
          return 0;
        }
        BOOL v252 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        return sub_1CB85EA50((void *)a1, a2, v251, v252);
      case 1831:
        return sub_1CD3CC440(a1, a2);
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
        if (!v8) {
          return 0;
        }
        unsigned int v491 = 0;
        LODWORD(v492) = 0;
        LODWORD(v497) = 0;
        sub_1CB859BA0(v5, (int *)&v492, (int *)&v497, (int *)&v491, &v490);
        uint64_t v15 = v492;
        int v16 = v492 == 1 ? sub_1CD789230((uint64_t *)a1, a2) : sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)a2);
        if (!v16) {
          return 0;
        }
        return sub_1CB861360(a1, a2, v16, v15, v497, v491, 0, 0);
      case 1847:
        int v83 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)a2);
        if (!v83) {
          return 0;
        }
        int v75 = v83;
        uint64_t v84 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        uint64_t v76 = *(unsigned char **)v84;
        uint64_t v80 = *(uint64_t **)(v84 + 32);
        BOOL v77 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        uint64_t v78 = a1;
        uint64_t v79 = (uint64_t *)a2;
        int v81 = 0;
        int v82 = 0;
        goto LABEL_68;
      case 1850:
        if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 2) {
          return 0;
        }
        uint64_t v14 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)a2);
        if (!v14) {
          return v14;
        }
        int v86 = sub_1CD789230((uint64_t *)a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
        if (!v86) {
          return 0;
        }
        int v87 = v86;
        uint64_t v88 = *(void *)(a1 + 32);
        uint64_t v89 = *(void *)(v88 + 640);
        uint64_t v90 = *(unint64_t **)(v88 + 648);
        uint64_t v91 = *(void *)(*(void *)(a1 + 96) + 8) + 120048;
        uint64_t v36 = *(llvm::MachineFunction **)(v89 + 32);
        uint64_t v92 = *(unsigned __int8 **)(a1 + 72);
        uint64_t v497 = v92;
        if (v92) {
          llvm::MetadataTracking::track((uint64_t)&v497, v92, 2);
        }
        uint64_t v38 = llvm::MachineFunction::CreateMachineInstr(v36, v91, &v497, 0);
        if (!v497) {
          goto LABEL_77;
        }
        int v439 = *v497;
        if ((v439 - 4) > 0x1E)
        {
          if ((v439 - 3) >= 0xFFFFFFFE) {
            uint64_t v448 = v497;
          }
          else {
            uint64_t v448 = 0;
          }
          if ((v439 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v441 = (unint64_t)(v448 + 8);
LABEL_590:
            *(void *)&long long v492 = &v497;
            sub_1CC5FA668(v441 + 16, &v492);
            goto LABEL_77;
          }
          if (v439 == 3) {
            *((void *)v497 + 1) = 0;
          }
        }
        else if ((v497[1] & 0x7F) == 2 || *((_DWORD *)v497 + 3))
        {
          uint64_t v440 = *((void *)v497 + 2);
          if ((v440 & 4) != 0)
          {
            unint64_t v441 = v440 & 0xFFFFFFFFFFFFFFF8;
            if (v441) {
              goto LABEL_590;
            }
          }
        }
LABEL_77:
        uint64_t v93 = *(void *)(v89 + 40);
        *((void *)v38 + 3) = v93;
        uint64_t v94 = *(void *)(v93 + 32);
        uint64_t v95 = *((unsigned int *)v38 + 10);
        if (v95)
        {
          uint64_t v352 = *((void *)v38 + 4);
          uint64_t v353 = *(void *)(v94 + 40);
          uint64_t v354 = 32 * v95;
          do
          {
            if (!*(unsigned char *)v352)
            {
              uint64_t v355 = *(unsigned int *)(v352 + 4);
              if ((int)v355 >= 0) {
                int v356 = (uint64_t *)(*(void *)(v353 + 272) + 8 * v355);
              }
              else {
                int v356 = (uint64_t *)(*(void *)(v353 + 24) + 16 * (v355 & 0x7FFFFFFF) + 8);
              }
              uint64_t v357 = *v356;
              if (*v356)
              {
                uint64_t v358 = *(void *)(v357 + 16);
                *(void *)(v357 + 16) = v352;
                *(void *)(v352 + 16) = v358;
                if (*(unsigned char *)(v352 + 3))
                {
                  *(void *)(v352 + 24) = v357;
                }
                else
                {
                  *(void *)(v352 + 24) = 0;
                  int v356 = (uint64_t *)(v358 + 24);
                }
              }
              else
              {
                *(void *)(v352 + 16) = v352;
                *(void *)(v352 + 24) = 0;
              }
              *int v356 = v352;
            }
            v352 += 32;
            v354 -= 32;
          }
          while (v354);
        }
        uint64_t v96 = *(void *)(v94 + 728);
        if (v96) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v96 + 24))(v96, v38);
        }
        unint64_t v97 = *v90 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v38 = v97 | *(void *)v38 & 7;
        *((void *)v38 + 1) = v90;
        *(void *)(v97 + 8) = v38;
        unint64_t *v90 = *v90 & 7 | (unint64_t)v38;
        *((void *)&v492 + 1) = 0;
        long long v493 = 0uLL;
        LODWORD(v492) = 0x1000000;
        DWORD1(v492) = v14;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        uint64_t v14 = 1;
        LODWORD(v492) = 1;
        *((void *)&v492 + 1) = 0;
        *(void *)&long long v493 = 0;
        llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v492);
        *((void *)&v492 + 1) = 0;
        long long v493 = 0uLL;
        LODWORD(v492) = 0;
        DWORD1(v492) = v87;
        break;
      case 1851:
        int v74 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)a2);
        if (!v74) {
          return 0;
        }
        int v75 = v74;
        uint64_t v76 = *(unsigned char **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        BOOL v77 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        uint64_t v78 = a1;
        uint64_t v79 = (uint64_t *)a2;
        uint64_t v80 = 0;
        int v81 = 1;
        int v82 = 1;
LABEL_68:
        return sub_1CD3CB7E4(v78, v79, v76, v80, v75, v77, v81, v82);
      default:
        if (v5 == 261)
        {
          int v254 = sub_1CD789230((uint64_t *)a1, a2);
          if (!v254) {
            return 0;
          }
          int v101 = v254;
          uint64_t v102 = *(unsigned char **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          BOOL v103 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
          uint64_t v104 = a1;
          unint64_t v105 = (uint64_t *)a2;
          int v106 = 424;
          goto LABEL_269;
        }
        if (v5 != 280) {
          return v14;
        }
        int v120 = sub_1CD789230((uint64_t *)a1, a2);
        if (v120)
        {
          BOOL v121 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
          return sub_1CB8640DC(a1, (uint64_t *)a2, v120, 0, v121, 0);
        }
        return 0;
    }
    goto LABEL_350;
  }
  if ((int)v5 > 139)
  {
    switch(v5)
    {
      case 0x8C:
        int v156 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v156) {
          return 0;
        }
        BOOL v157 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        return sub_1CB86545C((void *)a1, a2, v156, v157);
      case 0xAF:
        int v159 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v159) {
          return 0;
        }
        BOOL v160 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        return sub_1CB889C40((void *)a1, a2, v159, v160);
      case 0xB1:
        int v100 = sub_1CD789230((uint64_t *)a1, a2);
        if (!v100) {
          return 0;
        }
        int v101 = v100;
        uint64_t v102 = *(unsigned char **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        BOOL v103 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
        uint64_t v104 = a1;
        unint64_t v105 = (uint64_t *)a2;
        int v106 = 231;
        goto LABEL_269;
      default:
        return v14;
    }
  }
  else
  {
    if (v5 != 75)
    {
      if (v5 != 76)
      {
        if (v5 != 139) {
          return v14;
        }
        int v98 = sub_1CD789230((uint64_t *)a1, a2);
        if (v98)
        {
          BOOL v99 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
          return sub_1CB862C5C((void *)a1, a2, v98, v99, 0);
        }
        return 0;
      }
      int v158 = sub_1CD789230((uint64_t *)a1, a2);
      if (!v158) {
        return 0;
      }
      int v101 = v158;
      uint64_t v102 = *(unsigned char **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      BOOL v103 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
      uint64_t v104 = a1;
      unint64_t v105 = (uint64_t *)a2;
      int v106 = 234;
LABEL_269:
      return sub_1CD3CEE74(v104, v105, v102, v101, v106, v103);
    }
    int v154 = sub_1CD789230((uint64_t *)a1, a2);
    if (!v154) {
      return 0;
    }
    BOOL v155 = *(unsigned __int8 *)(*(void *)a2 + 8) != 2;
    return sub_1CB8894C0((void *)a1, a2, v154, v155);
  }
}

BOOL sub_1CB86A734(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  v130[1] = *MEMORY[0x1E4F143B8];
  llvm::SampleInfo::SampleInfo((uint64_t)v94, a3, 2);
  char v93 = 0;
  (*(void (**)(_OWORD *__return_ptr, void *, uint64_t, uint64_t, void, void, void, char *))(*a1 + 48))(v80, a1, a4, a2, v101, v102, v103, &v93);
  BOOL v7 = 0;
  if (v93) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v92 == 0;
  }
  if (v8) {
    return v7;
  }
  int v79 = v88;
  long long v76 = v80[0];
  long long v77 = v80[1];
  uint64_t v78 = v81;
  long long v73 = v82;
  long long v74 = v83;
  uint64_t v75 = v84;
  long long v70 = v85;
  long long v71 = v86;
  uint64_t v72 = v87;
  long long v67 = v89;
  long long v68 = v90;
  uint64_t v69 = v91;
  BOOL v125 = v127;
  uint64_t v126 = 0x400000000;
  int v9 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, v104);
  uint64_t v10 = v96 + v107;
  char v11 = (*(uint64_t (**)(void))(*(void *)a1[1] + 200))(a1[1]);
  if (v95) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  int v13 = (*(uint64_t (**)(void))(*(void *)a1[1] + 168))(a1[1]);
  if (v106 == -1) {
    int v14 = 0;
  }
  else {
    int v14 = v13;
  }
  char v15 = v14 & v12;
  if ((v113 & v105) == 0xFFFFFFFF) {
    char v15 = v12;
  }
  if (v10 == 2) {
    char v16 = ((v111 == -1) | ~(_BYTE)v14) & v15;
  }
  else {
    char v16 = v15;
  }
  if (v10 == 1)
  {
    if (v113 == -1)
    {
      if (v105 == -1) {
        LOBYTE(v14) = 0;
      }
      if (v14)
      {
LABEL_19:
        if ((v110 & v112) == 0xFFFFFFFF) {
          char v17 = v16;
        }
        else {
          char v17 = 0;
        }
        uint64_t v123 = 0;
        v124[0] = 0;
        int v122 = v9;
        if ((v17 & 1) == 0)
        {
LABEL_54:
          BOOL v26 = &v122;
          do
          {
            int v27 = (*(uint64_t (**)(void *, void))(*a1 + 168))(a1, *v26);
            v93 |= v27 == 0;
            if (v126 >= (unint64_t)HIDWORD(v126)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v125[v126] = v27;
            LODWORD(v126) = v126 + 1;
            ++v26;
            --v10;
          }
          while (v10);
          goto LABEL_61;
        }
        goto LABEL_34;
      }
    }
    else if (v14)
    {
      goto LABEL_19;
    }
    uint64_t v123 = 0;
    v124[0] = 0;
    int v122 = v9;
    if ((v16 & 1) == 0) {
      goto LABEL_54;
    }
LABEL_34:
    uint64_t v20 = 1;
    goto LABEL_35;
  }
  int v122 = 0;
  uint64_t v123 = 0;
  v124[0] = 0;
  if (!v10)
  {
    int v122 = v9;
    if ((v16 & 1) == 0)
    {
LABEL_60:
      uint64_t v10 = 0;
      goto LABEL_61;
    }
    int v22 = 0;
    int v128 = 0;
    uint64_t v129 = 0;
    v130[0] = 0;
    goto LABEL_46;
  }
  uint64_t v18 = &v122;
  (*(void (**)(void *, void *, void **, uint64_t))(*a1 + 120))(a1, v9, &v122, v10);
  uint64_t v19 = v10;
  do
  {
    if (!*v18)
    {
      (*(void (**)(void *, void *, _DWORD **, uint64_t))(*a1 + 80))(a1, v9, &v125, v10);
      goto LABEL_60;
    }
    ++v18;
    --v19;
  }
  while (v19);
  if ((v16 & 1) == 0) {
    goto LABEL_54;
  }
  uint64_t v20 = v10;
LABEL_35:
  uint64_t v21 = 0;
  int v22 = 0;
  int v128 = 0;
  uint64_t v129 = 0;
  v130[0] = 0;
  while (1)
  {
    unint64_t v119 = 0;
    uint64_t v116 = 0;
    if (!(*(unsigned int (**)(void *, void *, uint64_t **, uint64_t **))(*a1 + 128))(a1, (&v122)[v21], &v119, &v116))
    {
      unint64_t v119 = 0;
      uint64_t v116 = 0;
      if (!(*(unsigned int (**)(void *, void *, uint64_t **, uint64_t **))(*a1 + 136))(a1, (&v122)[v21], &v119, &v116))break; {
    }
      }
    (&v128)[v21] = v119;
    if (v22)
    {
      if (v22 != v116) {
        break;
      }
    }
    else
    {
      int v22 = v116;
    }
    if (v20 == ++v21) {
      goto LABEL_49;
    }
  }
  if (v10 != v21) {
    goto LABEL_54;
  }
LABEL_49:
  uint64_t v24 = &v128;
  do
  {
    int v25 = (*(uint64_t (**)(void *, void))(*a1 + 168))(a1, *v24);
    v93 |= v25 == 0;
    if (v126 >= (unint64_t)HIDWORD(v126)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v125[v126] = v25;
    LODWORD(v126) = v126 + 1;
    ++v24;
    --v20;
  }
  while (v20);
LABEL_46:
  int v23 = (*(uint64_t (**)(void *, uint64_t *))(*a1 + 168))(a1, v22);
  v93 |= v23 == 0;
  if (v126 >= HIDWORD(v126)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v125[v126] = v23;
  LODWORD(v126) = v126 + 1;
  uint64_t v10 = 1;
LABEL_61:
  if (!v93)
  {
    unsigned int v66 = -1;
    int v122 = v124;
    uint64_t v123 = 0x400000000;
    (*(void (**)(void *, unsigned char *, uint64_t, uint64_t, unsigned int *, void **, char *))(*a1 + 256))(a1, v94, a4, a2, &v66, &v122, &v93);
    if (v93)
    {
      BOOL v7 = 0;
LABEL_93:
      if (v122 != v124) {
        free(v122);
      }
      goto LABEL_95;
    }
    int v128 = v130;
    uint64_t v129 = 0x200000000;
    if (v106 != -1 && (*(unsigned int (**)(void))(*(void *)a1[1] + 168))(a1[1]))
    {
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, v106);
      (*(void (**)(void *, uint64_t, void **, uint64_t))(*a1 + 80))(a1, v28, &v128, 0xFFFFFFFFLL);
    }
    if (v93)
    {
      BOOL v7 = 0;
LABEL_91:
      if (v128 != v130) {
        free(v128);
      }
      goto LABEL_93;
    }
    BOOL v29 = (v113 & v109) != -1;
    unint64_t v119 = &v121;
    uint64_t v120 = 0x200000000;
    (*(void (**)(void *, unsigned char *, uint64_t, uint64_t **))(*a1 + 264))(a1, v94, a2, &v119);
    int v30 = v97;
    unsigned int v65 = -1;
    int v31 = v108;
    unsigned int v53 = v96;
    if (!v108 || v114 == -1)
    {
      if (!v108)
      {
LABEL_77:
        if (v108) {
          int v31 = 1;
        }
        unsigned int v52 = v31;
        uint64_t v116 = &v118;
        uint64_t v117 = 0x200000000;
        if (v99 != -1)
        {
          uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, v115);
          (*(void (**)(void *, uint64_t, uint64_t **, uint64_t))(*a1 + 80))(a1, v33, &v116, 0xFFFFFFFFLL);
        }
        if (v93)
        {
          BOOL v7 = 0;
        }
        else
        {
          BOOL v51 = v29;
          (*(void (**)(void *, unsigned char *, uint64_t, _DWORD **, void **, void, uint64_t **, void **, uint64_t **))(*a1 + 272))(a1, v94, a2, &v125, &v122, v66, &v119, &v128, &v116);
          unsigned int v64 = -1;
          if (v100 != -1)
          {
            uint64_t v34 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
            (*(void (**)(void *, uint64_t, unsigned int *, void))(*a1 + 144))(a1, v34, &v64, 0);
          }
          char v50 = (*(uint64_t (**)(void *, unsigned char *, uint64_t))(*a1 + 200))(a1, v94, a2);
          char v49 = (*(uint64_t (**)(void *, unsigned char *, uint64_t))(*a1 + 208))(a1, v94, a2);
          uint64_t v35 = a1[1];
          uint64_t v36 = v66;
          unsigned int v46 = v99;
          unsigned int v47 = v98;
          unsigned int v48 = v65;
          BOOL v44 = v109 != -1;
          unsigned int v45 = v95;
          char v43 = v94[1];
          char v37 = (*(uint64_t (**)(uint64_t, void, unsigned char *, uint64_t))(*(void *)v35 + 104))(v35, v66, v94, v10);
          HIDWORD(v41) = v64;
          BYTE1(v41) = v49;
          LOBYTE(v41) = v50;
          HIBYTE(v40) = v43;
          BYTE2(v40) = v30 == 0;
          BYTE1(v40) = v44;
          LOBYTE(v40) = v51;
          uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void, void, int, int *, char, uint64_t))(*(void *)v35 + 112))(v35, v36, v53, v47, v46, v45, v52, v48, v40, &v79, v37, v41);
          v60[0] = v76;
          v60[1] = v77;
          uint64_t v61 = v78;
          v58[0] = v73;
          v58[1] = v74;
          uint64_t v59 = v75;
          v56[0] = v70;
          v56[1] = v71;
          uint64_t v57 = v72;
          v54[0] = v67;
          v54[1] = v68;
          uint64_t v55 = v69;
          HIDWORD(v42) = v66;
          BYTE2(v42) = v49;
          BYTE1(v42) = v50;
          LOBYTE(v42) = v10;
          (*(void (**)(void *__return_ptr, void *, unsigned char *, uint64_t, uint64_t, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _DWORD *, void, void *, void, uint64_t *, void, uint64_t *, void, uint64_t, unsigned int))(*a1 + 88))(v62, a1, v94, a2, v38, v60, v58, v56, v54, v125, v126, v122, v123, v119, v120, v116, v117, v42, v65);
          BOOL v7 = v63 != 0;
          if (v63)
          {
            (*(void (**)(void *, unsigned char *, uint64_t, void *))(*a1 + 104))(a1, v94, a2, v62);
            (*(void (**)(void *, unsigned char *, uint64_t, void, void, void, void))(*a1 + 112))(a1, v94, a2, v62[0], v62[1], v65, v64);
          }
        }
        if (v116 != &v118) {
          free(v116);
        }
        if (v119 != &v121) {
          free(v119);
        }
        goto LABEL_91;
      }
    }
    else
    {
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
      (*(void (**)(void *, uint64_t, unsigned int *, void))(*a1 + 144))(a1, v32, &v65, 0);
      if (v65 < 4) {
        goto LABEL_76;
      }
    }
    unsigned int v65 = 0;
LABEL_76:
    int v31 = -1;
    goto LABEL_77;
  }
  BOOL v7 = 0;
LABEL_95:
  if (v125 != (_DWORD *)v127) {
    free(v125);
  }
  return v7;
}

uint64_t sub_1CB86B3C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  int v8 = a5;
  int v9 = a4;
  uint64_t v11 = a2;
  uint64_t v12 = a1;
  int v13 = *(unsigned __int8 *)(*(void *)(a1 + 256) + 281);
  if (a6) {
    *a6 = 0;
  }
  unsigned int v14 = sub_1CB859FD0(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), *(void *)(a1 + 272), a4, a5, (uint64_t)a6, a7);
  BOOL v388 = v14 != -1;
  if (v14 == -1)
  {
    int v16 = sub_1CB87DFFC((uint64_t *)v12, *(unsigned __int8 **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)));
    if (!v16) {
      return 0;
    }
    int v17 = v16;
    uint64_t v383 = a6;
    unint64_t v386 = 0xFFFFFFFFLL;
  }
  else
  {
    if (v8)
    {
      if (v14) {
        return 0;
      }
      uint64_t v383 = a6;
      unint64_t v386 = (unint64_t)v14 >> 1;
    }
    else
    {
      unint64_t v386 = v14;
      uint64_t v383 = a6;
    }
    int v210 = *(_DWORD *)(v11 + 20);
    uint64_t v211 = *****(void *****)(v12 + 32);
    uint64_t v212 = *(llvm::ConstantInt **)(v211 + 1936);
    unint64_t v213 = *(unsigned int *)(v211 + 1944);
    DWORD2(v390) = v213 >> 8;
    if (v213 >> 8 > 0x40) {
      operator new[]();
    }
    if (v213 <= 0xFF) {
      unint64_t v214 = 0;
    }
    else {
      unint64_t v214 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v213) + 63);
    }
    *(void *)&long long v390 = v214 & v386;
    int v215 = v210 & 0x7FFFFFF;
    uint64_t v216 = (unsigned __int8 *)llvm::ConstantInt::get(v212, (llvm::LLVMContext *)&v390, v15);
    if (DWORD2(v390) >= 0x41 && (void)v390) {
      MEMORY[0x1D25D9CB0](v390, 0x1000C8000313F17);
    }
    int v217 = sub_1CD3CAD7C((uint64_t *)v12, v216);
    int v17 = v217;
    if (v215 == 1)
    {
      if (!v217) {
        return 0;
      }
      if (v9)
      {
        uint64_t v218 = *(void *)(v12 + 32);
        uint64_t v219 = *(void *)(v218 + 640);
        uint64_t v220 = *(unint64_t **)(v218 + 648);
        uint64_t v221 = *(void *)(*(void *)(v12 + 96) + 8) + 912;
        BOOL v160 = *(llvm::MachineFunction **)(v219 + 32);
        uint64_t v222 = *(unsigned __int8 **)(v12 + 72);
        uint64_t v389 = v222;
        if (v222) {
          llvm::MetadataTracking::track((uint64_t)&v389, v222, 2);
        }
        uint64_t v162 = llvm::MachineFunction::CreateMachineInstr(v160, v221, &v389, 0);
        if (!v389) {
          goto LABEL_318;
        }
        int v348 = *v389;
        if ((v348 - 4) > 0x1E)
        {
          if ((v348 - 3) >= 0xFFFFFFFE) {
            uint64_t v361 = v389;
          }
          else {
            uint64_t v361 = 0;
          }
          if ((v348 - 3) < 0xFFFFFFFE)
          {
            if (v348 == 3) {
              *((void *)v389 + 1) = 0;
            }
            goto LABEL_318;
          }
          unint64_t v350 = (unint64_t)(v361 + 8);
        }
        else
        {
          if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
            goto LABEL_318;
          }
          uint64_t v349 = *((void *)v389 + 2);
          if ((v349 & 4) == 0) {
            goto LABEL_318;
          }
          unint64_t v350 = v349 & 0xFFFFFFFFFFFFFFF8;
          if (!v350) {
            goto LABEL_318;
          }
        }
        *(void *)&long long v390 = &v389;
        sub_1CC5FA668(v350 + 16, &v390);
LABEL_318:
        uint64_t v223 = *(void *)(v219 + 40);
        *((void *)v162 + 3) = v223;
        uint64_t v224 = *(void *)(v223 + 32);
        uint64_t v225 = *((unsigned int *)v162 + 10);
        if (v225)
        {
          uint64_t v304 = *((void *)v162 + 4);
          uint64_t v305 = *(void *)(v224 + 40);
          uint64_t v306 = 32 * v225;
          do
          {
            if (!*(unsigned char *)v304)
            {
              uint64_t v307 = *(unsigned int *)(v304 + 4);
              if ((int)v307 >= 0) {
                BOOL v308 = (uint64_t *)(*(void *)(v305 + 272) + 8 * v307);
              }
              else {
                BOOL v308 = (uint64_t *)(*(void *)(v305 + 24) + 16 * (v307 & 0x7FFFFFFF) + 8);
              }
              uint64_t v309 = *v308;
              if (*v308)
              {
                uint64_t v310 = *(void *)(v309 + 16);
                *(void *)(v309 + 16) = v304;
                *(void *)(v304 + 16) = v310;
                if (*(unsigned char *)(v304 + 3))
                {
                  *(void *)(v304 + 24) = v309;
                }
                else
                {
                  *(void *)(v304 + 24) = 0;
                  BOOL v308 = (uint64_t *)(v310 + 24);
                }
              }
              else
              {
                *(void *)(v304 + 16) = v304;
                *(void *)(v304 + 24) = 0;
              }
              uint64_t *v308 = v304;
            }
            v304 += 32;
            v306 -= 32;
          }
          while (v306);
        }
        uint64_t v226 = *(void *)(v224 + 728);
        if (v226) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v226 + 24))(v226, v162);
        }
        unint64_t v227 = *v220 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v162 = v227 | *(void *)v162 & 7;
        *((void *)v162 + 1) = v220;
        *(void *)(v227 + 8) = v162;
        *uint64_t v220 = *v220 & 7 | (unint64_t)v162;
        *((void *)&v390 + 1) = 0;
        long long v391 = 0uLL;
        LODWORD(v390) = 0x1000000;
        DWORD1(v390) = a3;
        llvm::MachineInstr::addOperand(v162, v160, (const llvm::MachineOperand *)&v390);
        *((void *)&v390 + 1) = 0;
        *(void *)&long long v391 = 0;
        DWORD1(v390) = v17;
LABEL_275:
        LODWORD(v390) = 0;
        *((void *)&v391 + 1) = 0;
LABEL_276:
        llvm::MachineInstr::addOperand(v162, v160, (const llvm::MachineOperand *)&v390);
        return 1;
      }
      uint64_t v239 = *(void *)(v12 + 48);
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v239, "", 0);
      *(void *)(*(void *)(v239 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4180;
      uint64_t v240 = *(void *)(v239 + 8);
      if (v240)
      {
        (*(void (**)(uint64_t))(*(void *)v240 + 24))(v240);
        if (!IncompleteVirtualRegister) {
          return 0;
        }
      }
      else if (!IncompleteVirtualRegister)
      {
        return 0;
      }
      uint64_t v241 = *(void *)(v12 + 32);
      uint64_t v242 = *(void *)(v241 + 640);
      uint64_t v243 = *(unint64_t **)(v241 + 648);
      uint64_t v244 = *(void *)(*(void *)(v12 + 96) + 8) + 480;
      uint64_t v245 = *(llvm::MachineFunction **)(v242 + 32);
      uint64_t v246 = *(unsigned __int8 **)(v12 + 72);
      uint64_t v389 = v246;
      if (v246) {
        llvm::MetadataTracking::track((uint64_t)&v389, v246, 2);
      }
      uint64_t v247 = llvm::MachineFunction::CreateMachineInstr(v245, v244, &v389, 0);
      if (!v389)
      {
LABEL_336:
        uint64_t v248 = *(void *)(v242 + 40);
        *((void *)v247 + 3) = v248;
        uint64_t v249 = *(void *)(v248 + 32);
        uint64_t v250 = *((unsigned int *)v247 + 10);
        if (v250)
        {
          uint64_t v318 = *((void *)v247 + 4);
          uint64_t v319 = *(void *)(v249 + 40);
          uint64_t v320 = 32 * v250;
          do
          {
            if (!*(unsigned char *)v318)
            {
              uint64_t v321 = *(unsigned int *)(v318 + 4);
              if ((int)v321 >= 0) {
                uint64_t v322 = (uint64_t *)(*(void *)(v319 + 272) + 8 * v321);
              }
              else {
                uint64_t v322 = (uint64_t *)(*(void *)(v319 + 24) + 16 * (v321 & 0x7FFFFFFF) + 8);
              }
              uint64_t v323 = *v322;
              if (*v322)
              {
                uint64_t v324 = *(void *)(v323 + 16);
                *(void *)(v323 + 16) = v318;
                *(void *)(v318 + 16) = v324;
                if (*(unsigned char *)(v318 + 3))
                {
                  *(void *)(v318 + 24) = v323;
                }
                else
                {
                  *(void *)(v318 + 24) = 0;
                  uint64_t v322 = (uint64_t *)(v324 + 24);
                }
              }
              else
              {
                *(void *)(v318 + 16) = v318;
                *(void *)(v318 + 24) = 0;
              }
              *uint64_t v322 = v318;
            }
            v318 += 32;
            v320 -= 32;
          }
          while (v320);
        }
        uint64_t v251 = *(void *)(v249 + 728);
        if (v251) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v251 + 24))(v251, v247);
        }
        unint64_t v252 = *v243 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v247 = v252 | *(void *)v247 & 7;
        *((void *)v247 + 1) = v243;
        *(void *)(v252 + 8) = v247;
        *uint64_t v243 = *v243 & 7 | (unint64_t)v247;
        *((void *)&v390 + 1) = 0;
        long long v391 = 0uLL;
        LODWORD(v390) = 0x1000000;
        DWORD1(v390) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand(v247, v245, (const llvm::MachineOperand *)&v390);
        uint64_t v253 = *(void *)(v12 + 32);
        uint64_t v254 = *(void *)(v253 + 640);
        uint64_t v255 = *(unint64_t **)(v253 + 648);
        uint64_t v256 = *(void *)(*(void *)(v12 + 96) + 8) + 864;
        uint64_t v202 = *(llvm::MachineFunction **)(v254 + 32);
        uint64_t v257 = *(unsigned __int8 **)(v12 + 72);
        uint64_t v389 = v257;
        if (v257) {
          llvm::MetadataTracking::track((uint64_t)&v389, v257, 2);
        }
        uint64_t v204 = llvm::MachineFunction::CreateMachineInstr(v202, v256, &v389, 0);
        if (!v389)
        {
LABEL_342:
          uint64_t v258 = *(void *)(v254 + 40);
          *((void *)v204 + 3) = v258;
          uint64_t v259 = *(void *)(v258 + 32);
          uint64_t v260 = *((unsigned int *)v204 + 10);
          if (v260)
          {
            uint64_t v325 = *((void *)v204 + 4);
            uint64_t v326 = *(void *)(v259 + 40);
            uint64_t v327 = 32 * v260;
            do
            {
              if (!*(unsigned char *)v325)
              {
                uint64_t v328 = *(unsigned int *)(v325 + 4);
                if ((int)v328 >= 0) {
                  uint64_t v329 = (uint64_t *)(*(void *)(v326 + 272) + 8 * v328);
                }
                else {
                  uint64_t v329 = (uint64_t *)(*(void *)(v326 + 24) + 16 * (v328 & 0x7FFFFFFF) + 8);
                }
                uint64_t v330 = *v329;
                if (*v329)
                {
                  uint64_t v331 = *(void *)(v330 + 16);
                  *(void *)(v330 + 16) = v325;
                  *(void *)(v325 + 16) = v331;
                  if (*(unsigned char *)(v325 + 3))
                  {
                    *(void *)(v325 + 24) = v330;
                  }
                  else
                  {
                    *(void *)(v325 + 24) = 0;
                    uint64_t v329 = (uint64_t *)(v331 + 24);
                  }
                }
                else
                {
                  *(void *)(v325 + 16) = v325;
                  *(void *)(v325 + 24) = 0;
                }
                *uint64_t v329 = v325;
              }
              v325 += 32;
              v327 -= 32;
            }
            while (v327);
          }
          uint64_t v261 = *(void *)(v259 + 728);
          if (v261) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v261 + 24))(v261, v204);
          }
          unint64_t v262 = *v255 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v204 = v262 | *(void *)v204 & 7;
          *((void *)v204 + 1) = v255;
          *(void *)(v262 + 8) = v204;
          *uint64_t v255 = *v255 & 7 | (unint64_t)v204;
          *((void *)&v390 + 1) = 0;
          long long v391 = 0uLL;
          LODWORD(v390) = 0x1000000;
          DWORD1(v390) = a3;
          llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
          *((void *)&v390 + 1) = 0;
          long long v391 = 0uLL;
          LODWORD(v390) = 0;
          DWORD1(v390) = v17;
          llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
          uint64_t v168 = 1;
          LODWORD(v390) = 1;
          *((void *)&v390 + 1) = 0;
          *(void *)&long long v391 = 1;
          llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
          *((void *)&v390 + 1) = 0;
          long long v391 = 0uLL;
          LODWORD(v390) = 0;
          DWORD1(v390) = IncompleteVirtualRegister;
          llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
          LODWORD(v390) = 1;
          *((void *)&v390 + 1) = 0;
          *(void *)&long long v391 = 2;
          llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
          if (v13)
          {
LABEL_305:
            *((void *)&v390 + 1) = 0;
            long long v391 = 0uLL;
            LODWORD(v390) = 0;
            DWORD1(v390) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
            LODWORD(v390) = 1;
            *((void *)&v390 + 1) = 0;
            *(void *)&long long v391 = 3;
            llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
            *((void *)&v390 + 1) = 0;
            long long v391 = 0uLL;
            LODWORD(v390) = 0;
            DWORD1(v390) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
            LODWORD(v390) = 1;
            *((void *)&v390 + 1) = 0;
            *(void *)&long long v391 = 4;
            llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
            return v168;
          }
          uint64_t v284 = *(void *)(v12 + 32);
          uint64_t v285 = *(void *)(v284 + 640);
          uint64_t v230 = *(unint64_t **)(v284 + 648);
          uint64_t v286 = *(void *)(*(void *)(v12 + 96) + 8) + 480;
          BOOL v160 = *(llvm::MachineFunction **)(v285 + 32);
          uint64_t v287 = *(unsigned __int8 **)(v12 + 72);
          uint64_t v389 = v287;
          if (v287) {
            llvm::MetadataTracking::track((uint64_t)&v389, v287, 2);
          }
          uint64_t v162 = llvm::MachineFunction::CreateMachineInstr(v160, v286, &v389, 0);
          if (!v389) {
            goto LABEL_389;
          }
          int v363 = *v389;
          if ((v363 - 4) > 0x1E)
          {
            if ((v363 - 3) >= 0xFFFFFFFE) {
              uint64_t v368 = v389;
            }
            else {
              uint64_t v368 = 0;
            }
            if ((v363 - 3) < 0xFFFFFFFE)
            {
              if (v363 == 3) {
                *((void *)v389 + 1) = 0;
              }
              goto LABEL_389;
            }
            unint64_t v365 = (unint64_t)(v368 + 8);
          }
          else if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3) {
                 || (uint64_t v364 = *((void *)v389 + 2), (v364 & 4) == 0)
          }
                 || (unint64_t v365 = v364 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
LABEL_389:
            int v233 = a3 + 1;
            uint64_t v288 = *(void *)(v285 + 40);
            *((void *)v162 + 3) = v288;
            uint64_t v235 = *(void *)(v288 + 32);
            uint64_t v289 = *((unsigned int *)v162 + 10);
            if (v289)
            {
              uint64_t v290 = *((void *)v162 + 4);
              uint64_t v291 = *(void *)(v235 + 40);
              uint64_t v292 = 32 * v289;
              do
              {
                if (!*(unsigned char *)v290)
                {
                  uint64_t v293 = *(unsigned int *)(v290 + 4);
                  if ((int)v293 >= 0) {
                    BOOL v294 = (uint64_t *)(*(void *)(v291 + 272) + 8 * v293);
                  }
                  else {
                    BOOL v294 = (uint64_t *)(*(void *)(v291 + 24) + 16 * (v293 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v295 = *v294;
                  if (*v294)
                  {
                    uint64_t v296 = *(void *)(v295 + 16);
                    *(void *)(v295 + 16) = v290;
                    *(void *)(v290 + 16) = v296;
                    if (*(unsigned char *)(v290 + 3))
                    {
                      *(void *)(v290 + 24) = v295;
                    }
                    else
                    {
                      *(void *)(v290 + 24) = 0;
                      BOOL v294 = (uint64_t *)(v296 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v290 + 16) = v290;
                    *(void *)(v290 + 24) = 0;
                  }
                  *BOOL v294 = v290;
                }
                v290 += 32;
                v292 -= 32;
              }
              while (v292);
            }
LABEL_328:
            uint64_t v237 = *(void *)(v235 + 728);
            if (v237) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v237 + 24))(v237, v162);
            }
            unint64_t v238 = *v230 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v162 = v238 | *(void *)v162 & 7;
            *((void *)v162 + 1) = v230;
            *(void *)(v238 + 8) = v162;
            *uint64_t v230 = *v230 & 7 | (unint64_t)v162;
            *((void *)&v390 + 1) = 0;
            long long v391 = 0uLL;
            LODWORD(v390) = 0x1000000;
            DWORD1(v390) = v233;
            goto LABEL_276;
          }
          *(void *)&long long v390 = &v389;
          sub_1CC5FA668(v365 + 16, &v390);
          goto LABEL_389;
        }
        int v357 = *v389;
        if ((v357 - 4) > 0x1E)
        {
          if ((v357 - 3) >= 0xFFFFFFFE) {
            uint64_t v367 = v389;
          }
          else {
            uint64_t v367 = 0;
          }
          if ((v357 - 3) < 0xFFFFFFFE)
          {
            if (v357 == 3) {
              *((void *)v389 + 1) = 0;
            }
            goto LABEL_342;
          }
          unint64_t v359 = (unint64_t)(v367 + 8);
        }
        else
        {
          if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
            goto LABEL_342;
          }
          uint64_t v358 = *((void *)v389 + 2);
          if ((v358 & 4) == 0) {
            goto LABEL_342;
          }
          unint64_t v359 = v358 & 0xFFFFFFFFFFFFFFF8;
          if (!v359) {
            goto LABEL_342;
          }
        }
        *(void *)&long long v390 = &v389;
        sub_1CC5FA668(v359 + 16, &v390);
        goto LABEL_342;
      }
      int v354 = *v389;
      if ((v354 - 4) > 0x1E)
      {
        if ((v354 - 3) >= 0xFFFFFFFE) {
          uint64_t v366 = v389;
        }
        else {
          uint64_t v366 = 0;
        }
        if ((v354 - 3) < 0xFFFFFFFE)
        {
          if (v354 == 3) {
            *((void *)v389 + 1) = 0;
          }
          goto LABEL_336;
        }
        unint64_t v356 = (unint64_t)(v366 + 8);
      }
      else
      {
        if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
          goto LABEL_336;
        }
        uint64_t v355 = *((void *)v389 + 2);
        if ((v355 & 4) == 0) {
          goto LABEL_336;
        }
        unint64_t v356 = v355 & 0xFFFFFFFFFFFFFFF8;
        if (!v356) {
          goto LABEL_336;
        }
      }
      *(void *)&long long v390 = &v389;
      sub_1CC5FA668(v356 + 16, &v390);
      goto LABEL_336;
    }
    if (!v217) {
      return 0;
    }
  }
  int v381 = v8;
  uint64_t v18 = (uint64_t **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
  uint64_t v19 = (unsigned __int8 **)(v18 + 4);
  if (v18 + 4 == (uint64_t **)v11)
  {
    if (v383)
    {
      LOWORD(v154) = 0;
LABEL_266:
      _DWORD *v383 = (unsigned __int16)(*v383 + v154);
    }
LABEL_267:
    int v155 = v17;
    if (!v9) {
      goto LABEL_290;
    }
    goto LABEL_268;
  }
  int v370 = a3;
  int v371 = v9;
  unint64_t v20 = 0;
  int v369 = v13;
  BOOL v21 = v13 == 0;
  uint64_t v22 = **v18;
  if (v21) {
    int v23 = 3356;
  }
  else {
    int v23 = 3677;
  }
  int v24 = 3680;
  if (v21) {
    int v24 = 3357;
  }
  int v375 = v24;
  int v376 = v23;
  if (v21) {
    int v25 = 4679;
  }
  else {
    int v25 = 4720;
  }
  uint64_t v377 = v12;
  int v26 = 2885;
  if (v21) {
    int v26 = 2779;
  }
  int v373 = v26;
  int v374 = v25;
  int v27 = 2882;
  if (v21) {
    int v27 = 2778;
  }
  int v372 = v27;
  uint64_t v382 = v11;
  do
  {
    uint64_t v28 = *v19;
    int v29 = *(unsigned __int8 *)(v22 + 8);
    if (v22 && v29 == 16)
    {
      int v30 = (unsigned int *)(v28 + 24);
      if (*((_DWORD *)v28 + 8) >= 0x41u) {
        int v30 = *(unsigned int **)v30;
      }
      uint64_t v31 = *v30;
      if (*v30) {
        v20 += *((void *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(v12 + 88), (llvm::StructType *)v22)
      }
               + v31
               + 2);
      uint64_t v22 = *(void *)(*(void *)(v22 + 16) + 8 * v31);
      goto LABEL_172;
    }
    if (v22 && v29 == 15)
    {
      uint64_t v32 = *(uint64_t **)(v22 + 16);
LABEL_38:
      uint64_t v22 = *v32;
      goto LABEL_39;
    }
    if (v22 && v29 == 17 || v22 && (v29 & 0xFE) == 0x12)
    {
      uint64_t v32 = (uint64_t *)(v22 + 24);
      goto LABEL_38;
    }
LABEL_39:
    if (!v28 || v28[16] != 16)
    {
      uint64_t v34 = *(llvm::DataLayout **)(v12 + 88);
      uint64_t v35 = sub_1CB83544C((uint64_t)v34, v22);
      BOOL v37 = v36 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v34, (llvm::Type *)v22, 1);
      if (v37) {
      unint64_t v40 = 0;
      }
      unint64_t v41 = ((1 << Alignment) + ((unint64_t)(v35 + 7) >> 3) - 1) & -(1 << Alignment);
      if (v28 && v28[16] >= 0x1Cu)
      {
        uint64_t v42 = *(void *)(v382 + 40);
        if (*((void *)v28 + 5) != v42)
        {
          unint64_t v40 = 0;
          goto LABEL_50;
        }
        unint64_t v40 = 0;
        while (2)
        {
          int v65 = v28[16];
          if ((v65 - 67) > 1)
          {
            if (v65 != 41 || !v388) {
              goto LABEL_92;
            }
            int v68 = *((_DWORD *)v28 + 5);
            if ((v68 & 0x40000000) != 0) {
              uint64_t v69 = (unsigned __int8 *)*((void *)v28 - 1);
            }
            else {
              uint64_t v69 = &v28[-32 * (v68 & 0x7FFFFFF)];
            }
            uint64_t v77 = *((void *)v69 + 4);
            if (v77) {
              BOOL v78 = *(unsigned char *)(v77 + 16) == 16;
            }
            else {
              BOOL v78 = 0;
            }
            if (!v78) {
              goto LABEL_50;
            }
            int v79 = (void *)(v77 + 24);
            if (*(_DWORD *)(v77 + 32) >= 0x41u) {
              int v79 = (void *)*v79;
            }
            if ((v68 & 0x40000000) != 0) {
              long long v76 = (unsigned __int8 *)*((void *)v28 - 1);
            }
            else {
              long long v76 = &v28[-32 * (v68 & 0x7FFFFFF)];
            }
            v40 += *v79 * v41;
          }
          else
          {
            int v66 = *((_DWORD *)v28 + 5);
            if ((v66 & 0x40000000) == 0)
            {
              long long v67 = *(unsigned __int8 **)&v28[-32 * (v66 & 0x7FFFFFF)];
              if (*(_DWORD *)(*(void *)v67 + 8) <= 0xFFFu) {
                goto LABEL_92;
              }
LABEL_90:
              uint64_t v28 = v67;
              if (v67[16] < 0x1Cu) {
                goto LABEL_50;
              }
LABEL_124:
              if (*((void *)v28 + 5) != v42) {
                goto LABEL_50;
              }
              continue;
            }
            long long v67 = (unsigned __int8 *)**((void **)v28 - 1);
            if (*(_DWORD *)(*(void *)v67 + 8) >= 0x1000u) {
              goto LABEL_90;
            }
LABEL_92:
            if (v65 != 45 && v65 != 53)
            {
              if (v65 == 67)
              {
                int v119 = *((_DWORD *)v28 + 5);
                if ((v119 & 0x40000000) != 0) {
                  uint64_t v120 = (unsigned __int8 **)*((void *)v28 - 1);
                }
                else {
                  uint64_t v120 = (unsigned __int8 **)&v28[-32 * (v119 & 0x7FFFFFF)];
                }
                uint64_t v28 = *v120;
              }
              goto LABEL_50;
            }
            int v70 = *((_DWORD *)v28 + 5);
            if ((v70 & 0x40000000) != 0) {
              long long v71 = (unsigned __int8 *)*((void *)v28 - 1);
            }
            else {
              long long v71 = &v28[-32 * (v70 & 0x7FFFFFF)];
            }
            uint64_t v72 = *((void *)v71 + 4);
            if (v72) {
              BOOL v73 = *(unsigned char *)(v72 + 16) == 16;
            }
            else {
              BOOL v73 = 0;
            }
            if (!v73) {
              goto LABEL_50;
            }
            long long v74 = (void *)(v72 + 24);
            unsigned int v75 = *(_DWORD *)(v72 + 32);
            if (v65 == 53)
            {
              if (v75 >= 0x41) {
                long long v74 = (void *)*v74;
              }
              v41 <<= *v74;
              if ((v70 & 0x40000000) != 0) {
                goto LABEL_106;
              }
LABEL_110:
              long long v76 = &v28[-32 * (v70 & 0x7FFFFFF)];
            }
            else
            {
              if (v75 >= 0x41) {
                long long v74 = (void *)*v74;
              }
              v41 *= *v74;
              if ((v70 & 0x40000000) == 0) {
                goto LABEL_110;
              }
LABEL_106:
              long long v76 = (unsigned __int8 *)*((void *)v28 - 1);
            }
          }
          break;
        }
        uint64_t v28 = *(unsigned __int8 **)v76;
        if (*(unsigned __int8 *)(*(void *)v76 + 16) <= 0x1Bu) {
          goto LABEL_50;
        }
        goto LABEL_124;
      }
LABEL_50:
      int v380 = v17;
      if (v381)
      {
        if ((v41 | v40)) {
          return 0;
        }
        v41 >>= 1;
        v40 >>= 1;
      }
      int v43 = sub_1CB87DFFC((uint64_t *)v12, v28);
      if (!v43) {
        return 0;
      }
      int v44 = v43;
      uint64_t v45 = *(void *)(v12 + 48);
      unsigned int v46 = (_UNKNOWN ***)(*(void *)(*(void *)(v45 + 24) + 16 * (v43 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      if (v46 == &off_1E66A4180 || v46 == &off_1E66A41C8)
      {
        int v384 = 0;
      }
      else
      {
        sub_1CD3CB380(v12, v43, 1);
        uint64_t v45 = *(void *)(v12 + 48);
        int v384 = 256;
      }
      int v48 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v45, "", 0);
      *(void *)(*(void *)(v45 + 24) + 16 * (v48 & 0x7FFFFFFF)) = &off_1E66A4180;
      uint64_t v49 = *(void *)(v45 + 8);
      if (v49)
      {
        (*(void (**)(uint64_t))(*(void *)v49 + 24))(v49);
        if (!v48) {
          return 0;
        }
      }
      else if (!v48)
      {
        return 0;
      }
      unint64_t v387 = v40 + v386;
      if (v388 && v20 != 0)
      {
        if (v41 <= 1 && !v387)
        {
          unint64_t v50 = 0;
          goto LABEL_132;
        }
        if (!v381 || (v20 & 1) != 0) {
          unint64_t v64 = v387 + v20;
        }
        else {
          unint64_t v64 = v387 + (v20 >> 1);
        }
        unint64_t v387 = v64;
        unint64_t v20 = 0;
      }
      if (v383 && v388 && v387 != 0)
      {
        unint64_t v50 = 0;
        *v383 += v387;
      }
      else
      {
        unint64_t v50 = v387;
      }
LABEL_132:
      unint64_t v386 = v50;
      int v385 = v48;
      if (v41 == 1)
      {
        if (v388 && v50 == 0)
        {
          uint64_t v80 = *(void *)(v12 + 32);
          uint64_t v81 = *(void *)(v80 + 640);
          long long v82 = *(unint64_t **)(v80 + 648);
          uint64_t v83 = *(void *)(*(void *)(v12 + 96) + 8);
          uint64_t v84 = *(llvm::MachineFunction **)(v81 + 32);
          long long v85 = *(unsigned __int8 **)(v12 + 72);
          uint64_t v389 = v85;
          if (v85) {
            llvm::MetadataTracking::track((uint64_t)&v389, v85, 2);
          }
          long long v86 = llvm::MachineFunction::CreateMachineInstr(v84, v83 + 912, &v389, 0);
          if (!v389) {
            goto LABEL_137;
          }
          int v145 = *v389;
          if ((v145 - 4) > 0x1E)
          {
            if ((v145 - 3) >= 0xFFFFFFFE) {
              int v152 = v389;
            }
            else {
              int v152 = 0;
            }
            if ((v145 - 3) < 0xFFFFFFFE)
            {
              if (v145 == 3) {
                *((void *)v389 + 1) = 0;
              }
              goto LABEL_137;
            }
            unint64_t v147 = (unint64_t)(v152 + 8);
          }
          else
          {
            if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
              goto LABEL_137;
            }
            uint64_t v146 = *((void *)v389 + 2);
            if ((v146 & 4) == 0) {
              goto LABEL_137;
            }
            unint64_t v147 = v146 & 0xFFFFFFFFFFFFFFF8;
            if (!v147) {
              goto LABEL_137;
            }
          }
          *(void *)&long long v390 = &v389;
          sub_1CC5FA668(v147 + 16, &v390);
LABEL_137:
          uint64_t v87 = *(void *)(v81 + 40);
          *((void *)v86 + 3) = v87;
          uint64_t v88 = *(void *)(v87 + 32);
          uint64_t v89 = *((unsigned int *)v86 + 10);
          uint64_t v11 = v382;
          if (v89)
          {
            uint64_t v128 = *((void *)v86 + 4);
            uint64_t v129 = *(void *)(v88 + 40);
            uint64_t v130 = 32 * v89;
            do
            {
              if (!*(unsigned char *)v128)
              {
                uint64_t v131 = *(unsigned int *)(v128 + 4);
                if ((int)v131 >= 0) {
                  uint64_t v132 = (uint64_t *)(*(void *)(v129 + 272) + 8 * v131);
                }
                else {
                  uint64_t v132 = (uint64_t *)(*(void *)(v129 + 24) + 16 * (v131 & 0x7FFFFFFF) + 8);
                }
                uint64_t v133 = *v132;
                if (*v132)
                {
                  uint64_t v134 = *(void *)(v133 + 16);
                  *(void *)(v133 + 16) = v128;
                  *(void *)(v128 + 16) = v134;
                  if (*(unsigned char *)(v128 + 3))
                  {
                    *(void *)(v128 + 24) = v133;
                  }
                  else
                  {
                    *(void *)(v128 + 24) = 0;
                    uint64_t v132 = (uint64_t *)(v134 + 24);
                  }
                }
                else
                {
                  *(void *)(v128 + 16) = v128;
                  *(void *)(v128 + 24) = 0;
                }
                *uint64_t v132 = v128;
              }
              v128 += 32;
              v130 -= 32;
            }
            while (v130);
          }
          uint64_t v90 = *(void *)(v88 + 728);
          if (v90) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v90 + 24))(v90, v86);
          }
          unint64_t v91 = *v82 & 0xFFFFFFFFFFFFFFF8;
          *(void *)long long v86 = v91 | *(void *)v86 & 7;
          *((void *)v86 + 1) = v82;
          *(void *)(v91 + 8) = v86;
          *long long v82 = *v82 & 7 | (unint64_t)v86;
          *((void *)&v390 + 1) = 0;
          long long v391 = 0uLL;
          LODWORD(v390) = 0x1000000;
          DWORD1(v390) = v385;
          llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v390);
          long long v391 = 0uLL;
          long long v390 = __PAIR64__(v44, v384);
          llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v390);
          unint64_t v386 = 0;
          BOOL v388 = 0;
          int v17 = v385;
          goto LABEL_172;
        }
        if (v388) {
          unsigned int v108 = v373;
        }
        else {
          unsigned int v108 = v372;
        }
        uint64_t v109 = *(void *)(v12 + 32);
        uint64_t v110 = *(void *)(v109 + 640);
        int v111 = *(unint64_t **)(v109 + 648);
        uint64_t v112 = *(void *)(*(void *)(v12 + 96) + 8);
        unsigned int v99 = *(llvm::MachineFunction **)(v110 + 32);
        int v113 = *(unsigned __int8 **)(v12 + 72);
        uint64_t v389 = v113;
        if (v113) {
          llvm::MetadataTracking::track((uint64_t)&v389, v113, 2);
        }
        unsigned int v101 = llvm::MachineFunction::CreateMachineInstr(v99, v112 + 48 * v108, &v389, 0);
        if (!v389) {
          goto LABEL_161;
        }
        int v148 = *v389;
        if ((v148 - 4) > 0x1E)
        {
          if ((v148 - 3) >= 0xFFFFFFFE) {
            unsigned int v153 = v389;
          }
          else {
            unsigned int v153 = 0;
          }
          if ((v148 - 3) < 0xFFFFFFFE)
          {
            if (v148 == 3) {
              *((void *)v389 + 1) = 0;
            }
            goto LABEL_161;
          }
          unint64_t v150 = (unint64_t)(v153 + 8);
        }
        else
        {
          if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
            goto LABEL_161;
          }
          uint64_t v149 = *((void *)v389 + 2);
          if ((v149 & 4) == 0) {
            goto LABEL_161;
          }
          unint64_t v150 = v149 & 0xFFFFFFFFFFFFFFF8;
          if (!v150) {
            goto LABEL_161;
          }
        }
        *(void *)&long long v390 = &v389;
        sub_1CC5FA668(v150 + 16, &v390);
LABEL_161:
        uint64_t v114 = *(void *)(v110 + 40);
        *((void *)v101 + 3) = v114;
        uint64_t v115 = *(void *)(v114 + 32);
        uint64_t v116 = *((unsigned int *)v101 + 10);
        uint64_t v11 = v382;
        if (v116)
        {
          uint64_t v135 = *((void *)v101 + 4);
          uint64_t v136 = *(void *)(v115 + 40);
          uint64_t v137 = 32 * v116;
          do
          {
            if (!*(unsigned char *)v135)
            {
              uint64_t v138 = *(unsigned int *)(v135 + 4);
              if ((int)v138 >= 0) {
                uint64_t v139 = (uint64_t *)(*(void *)(v136 + 272) + 8 * v138);
              }
              else {
                uint64_t v139 = (uint64_t *)(*(void *)(v136 + 24) + 16 * (v138 & 0x7FFFFFFF) + 8);
              }
              uint64_t v140 = *v139;
              if (*v139)
              {
                uint64_t v141 = *(void *)(v140 + 16);
                *(void *)(v140 + 16) = v135;
                *(void *)(v135 + 16) = v141;
                if (*(unsigned char *)(v135 + 3))
                {
                  *(void *)(v135 + 24) = v140;
                }
                else
                {
                  *(void *)(v135 + 24) = 0;
                  uint64_t v139 = (uint64_t *)(v141 + 24);
                }
              }
              else
              {
                *(void *)(v135 + 16) = v135;
                *(void *)(v135 + 24) = 0;
              }
              *uint64_t v139 = v135;
            }
            v135 += 32;
            v137 -= 32;
          }
          while (v137);
        }
        unint64_t v105 = v20;
        uint64_t v117 = *(void *)(v115 + 728);
        if (v117) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v117 + 24))(v117, v101);
        }
        unint64_t v118 = *v111 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unsigned int v101 = v118 | *(void *)v101 & 7;
        *((void *)v101 + 1) = v111;
        *(void *)(v118 + 8) = v101;
        *int v111 = *v111 & 7 | (unint64_t)v101;
        *((void *)&v390 + 1) = 0;
        long long v391 = 0uLL;
        LODWORD(v390) = 0x1000000;
        DWORD1(v390) = v385;
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
        LODWORD(v390) = 1;
        *((void *)&v390 + 1) = 0;
        *(void *)&long long v391 = 0;
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
        long long v391 = 0uLL;
        long long v390 = __PAIR64__(v44, v384);
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
        LODWORD(v390) = 1;
        *((void *)&v390 + 1) = 0;
        *(void *)&long long v391 = 0;
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
        if (v388)
        {
          LODWORD(v390) = 1;
          *((void *)&v390 + 1) = 0;
          *(void *)&long long v391 = (unsigned __int16)v386 | 0x100000000;
        }
        else
        {
          *((void *)&v390 + 1) = 0;
          LODWORD(v390) = 0;
          DWORD1(v390) = v380;
          long long v391 = 0uLL;
          llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
          LODWORD(v390) = 1;
          *((void *)&v390 + 1) = 0;
          *(void *)&long long v391 = 0;
        }
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
        LODWORD(v390) = 1;
        *((void *)&v390 + 1) = 0;
        *(void *)&long long v391 = 0;
LABEL_171:
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
        long long v390 = 0u;
        long long v391 = 0u;
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
        BOOL v388 = 0;
        int v17 = v385;
        unint64_t v20 = v105;
        uint64_t v12 = v377;
        goto LABEL_172;
      }
      BOOL v378 = v388 && v50 == 0;
      unint64_t v379 = v20;
      int v92 = v375;
      if (!v50) {
        int v92 = v374;
      }
      if (v388) {
        unsigned int v93 = v92;
      }
      else {
        unsigned int v93 = v376;
      }
      uint64_t v94 = *(void *)(v12 + 32);
      uint64_t v95 = v12;
      uint64_t v96 = *(void *)(v94 + 640);
      unsigned __int8 v97 = *(unint64_t **)(v94 + 648);
      uint64_t v98 = *(void *)(*(void *)(v95 + 96) + 8);
      unsigned int v99 = *(llvm::MachineFunction **)(v96 + 32);
      int v100 = *(unsigned __int8 **)(v95 + 72);
      uint64_t v389 = v100;
      if (v100) {
        llvm::MetadataTracking::track((uint64_t)&v389, v100, 2);
      }
      unsigned int v101 = llvm::MachineFunction::CreateMachineInstr(v99, v98 + 48 * v93, &v389, 0);
      if (v389)
      {
        int v142 = *v389;
        if ((v142 - 4) > 0x1E)
        {
          if ((v142 - 3) >= 0xFFFFFFFE) {
            unsigned int v151 = v389;
          }
          else {
            unsigned int v151 = 0;
          }
          if ((v142 - 3) < 0xFFFFFFFE)
          {
            if (v142 == 3) {
              *((void *)v389 + 1) = 0;
            }
            goto LABEL_149;
          }
          unint64_t v144 = (unint64_t)(v151 + 8);
        }
        else
        {
          if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
            goto LABEL_149;
          }
          uint64_t v143 = *((void *)v389 + 2);
          if ((v143 & 4) == 0) {
            goto LABEL_149;
          }
          unint64_t v144 = v143 & 0xFFFFFFFFFFFFFFF8;
          if (!v144) {
            goto LABEL_149;
          }
        }
        *(void *)&long long v390 = &v389;
        sub_1CC5FA668(v144 + 16, &v390);
      }
LABEL_149:
      uint64_t v102 = *(void *)(v96 + 40);
      *((void *)v101 + 3) = v102;
      uint64_t v103 = *(void *)(v102 + 32);
      uint64_t v104 = *((unsigned int *)v101 + 10);
      unint64_t v105 = v379;
      if (v104)
      {
        uint64_t v121 = *((void *)v101 + 4);
        uint64_t v122 = *(void *)(v103 + 40);
        uint64_t v123 = 32 * v104;
        do
        {
          if (!*(unsigned char *)v121)
          {
            uint64_t v124 = *(unsigned int *)(v121 + 4);
            if ((int)v124 >= 0) {
              BOOL v125 = (uint64_t *)(*(void *)(v122 + 272) + 8 * v124);
            }
            else {
              BOOL v125 = (uint64_t *)(*(void *)(v122 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
            }
            uint64_t v126 = *v125;
            if (*v125)
            {
              uint64_t v127 = *(void *)(v126 + 16);
              *(void *)(v126 + 16) = v121;
              *(void *)(v121 + 16) = v127;
              if (*(unsigned char *)(v121 + 3))
              {
                *(void *)(v121 + 24) = v126;
              }
              else
              {
                *(void *)(v121 + 24) = 0;
                BOOL v125 = (uint64_t *)(v127 + 24);
              }
            }
            else
            {
              *(void *)(v121 + 16) = v121;
              *(void *)(v121 + 24) = 0;
            }
            *BOOL v125 = v121;
          }
          v121 += 32;
          v123 -= 32;
        }
        while (v123);
      }
      uint64_t v106 = *(void *)(v103 + 728);
      if (v106) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v106 + 24))(v106, v101);
      }
      unint64_t v107 = *v97 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unsigned int v101 = v107 | *(void *)v101 & 7;
      *((void *)v101 + 1) = v97;
      *(void *)(v107 + 8) = v101;
      *unsigned __int8 v97 = *v97 & 7 | (unint64_t)v101;
      *((void *)&v390 + 1) = 0;
      long long v391 = 0uLL;
      LODWORD(v390) = 0x1000000;
      DWORD1(v390) = v385;
      llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
      LODWORD(v390) = 1;
      *((void *)&v390 + 1) = 0;
      *(void *)&long long v391 = 0;
      llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
      long long v391 = 0uLL;
      long long v390 = __PAIR64__(v44, v384);
      llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
      LODWORD(v390) = 1;
      *((void *)&v390 + 1) = 0;
      *(void *)&long long v391 = 0;
      llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
      LODWORD(v390) = 1;
      *((void *)&v390 + 1) = 0;
      *(void *)&long long v391 = (unsigned __int16)v41 | 0x100000000;
      llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
      uint64_t v11 = v382;
      if (!v378)
      {
        if (v388)
        {
          LODWORD(v390) = 1;
          *((void *)&v390 + 1) = 0;
          *(void *)&long long v391 = (unsigned __int16)v386 | 0x100000000;
        }
        else
        {
          *((void *)&v390 + 1) = 0;
          LODWORD(v390) = 0;
          DWORD1(v390) = v380;
          long long v391 = 0uLL;
          llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
          LODWORD(v390) = 1;
          *((void *)&v390 + 1) = 0;
          *(void *)&long long v391 = 0;
        }
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v390);
      }
      LODWORD(v390) = 1;
      *((void *)&v390 + 1) = 0;
      *(void *)&long long v391 = 0;
      goto LABEL_171;
    }
    uint64_t v33 = *((unsigned int *)v28 + 8);
    if (v33 <= 0x40)
    {
      if (!*((void *)v28 + 3)) {
        goto LABEL_172;
      }
LABEL_72:
      uint64_t v56 = *(llvm::DataLayout **)(v12 + 88);
      uint64_t v57 = sub_1CB83544C((uint64_t)v56, v22);
      BOOL v59 = v58 == 1;
      char v61 = llvm::DataLayout::getAlignment(v56, (llvm::Type *)v22, 1);
      unsigned int v62 = *((_DWORD *)v28 + 8);
      if (v62 > 0x40) {
        uint64_t v63 = **((void **)v28 + 3);
      }
      else {
        uint64_t v63 = (uint64_t)(*((void *)v28 + 3) << -(char)v62) >> -(char)v62;
      }
      if (v59) {
      v20 += v63 * (((1 << v61) + ((unint64_t)(v57 + 7) >> 3) - 1) & -(1 << v61));
      }
      goto LABEL_172;
    }
    int v51 = 0;
    int64_t v52 = (unint64_t)(v33 + 63) >> 6;
    do
    {
      if (v52-- < 1) {
        break;
      }
      unint64_t v54 = *(void *)(*((void *)v28 + 3) + 8 * v52);
      v51 += __clz(v54);
    }
    while (!v54);
    int v55 = v33 | 0xFFFFFFC0;
    if ((v33 & 0x3F) == 0) {
      int v55 = 0;
    }
    if (v51 + v55 != v33) {
      goto LABEL_72;
    }
LABEL_172:
    v19 += 4;
  }
  while (v19 != (unsigned __int8 **)v11);
  unint64_t v154 = v20;
  if (v383)
  {
    int v13 = v369;
    a3 = v370;
    int v9 = v371;
    goto LABEL_266;
  }
  int v13 = v369;
  a3 = v370;
  int v9 = v371;
  if (!v154) {
    goto LABEL_267;
  }
  uint64_t v169 = *(void *)(v12 + 48);
  int v155 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v169, "", 0);
  *(void *)(*(void *)(v169 + 24) + 16 * (v155 & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v170 = *(void *)(v169 + 8);
  if (v170)
  {
    (*(void (**)(uint64_t))(*(void *)v170 + 24))(v170);
    if (!v155) {
      return 0;
    }
LABEL_280:
    if (v381)
    {
      if (v154) {
        return 0;
      }
      v154 >>= 1;
    }
    uint64_t v171 = *(void *)(v12 + 32);
    uint64_t v172 = *(void *)(v171 + 640);
    uint64_t v173 = *(unint64_t **)(v171 + 648);
    uint64_t v174 = *(void *)(*(void *)(v12 + 96) + 8) + 133392;
    uint64_t v175 = *(llvm::MachineFunction **)(v172 + 32);
    uint64_t v176 = *(unsigned __int8 **)(v12 + 72);
    uint64_t v389 = v176;
    if (v176) {
      llvm::MetadataTracking::track((uint64_t)&v389, v176, 2);
    }
    uint64_t v177 = llvm::MachineFunction::CreateMachineInstr(v175, v174, &v389, 0);
    if (!v389)
    {
LABEL_286:
      uint64_t v178 = *(void *)(v172 + 40);
      *((void *)v177 + 3) = v178;
      uint64_t v179 = *(void *)(v178 + 32);
      uint64_t v180 = *((unsigned int *)v177 + 10);
      if (v180)
      {
        uint64_t v311 = *((void *)v177 + 4);
        uint64_t v312 = *(void *)(v179 + 40);
        uint64_t v313 = 32 * v180;
        do
        {
          if (!*(unsigned char *)v311)
          {
            uint64_t v314 = *(unsigned int *)(v311 + 4);
            if ((int)v314 >= 0) {
              uint64_t v315 = (uint64_t *)(*(void *)(v312 + 272) + 8 * v314);
            }
            else {
              uint64_t v315 = (uint64_t *)(*(void *)(v312 + 24) + 16 * (v314 & 0x7FFFFFFF) + 8);
            }
            uint64_t v316 = *v315;
            if (*v315)
            {
              uint64_t v317 = *(void *)(v316 + 16);
              *(void *)(v316 + 16) = v311;
              *(void *)(v311 + 16) = v317;
              if (*(unsigned char *)(v311 + 3))
              {
                *(void *)(v311 + 24) = v316;
              }
              else
              {
                *(void *)(v311 + 24) = 0;
                uint64_t v315 = (uint64_t *)(v317 + 24);
              }
            }
            else
            {
              *(void *)(v311 + 16) = v311;
              *(void *)(v311 + 24) = 0;
            }
            uint64_t *v315 = v311;
          }
          v311 += 32;
          v313 -= 32;
        }
        while (v313);
      }
      uint64_t v181 = *(void *)(v179 + 728);
      if (v181) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v181 + 24))(v181, v177);
      }
      unint64_t v182 = *v173 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v177 = v182 | *(void *)v177 & 7;
      *((void *)v177 + 1) = v173;
      *(void *)(v182 + 8) = v177;
      *uint64_t v173 = *v173 & 7 | (unint64_t)v177;
      *((void *)&v390 + 1) = 0;
      long long v391 = 0uLL;
      LODWORD(v390) = 0x1000000;
      DWORD1(v390) = v155;
      llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v390);
      LODWORD(v390) = 1;
      *((void *)&v390 + 1) = 0;
      *(void *)&long long v391 = 0;
      llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v390);
      *((void *)&v390 + 1) = 0;
      long long v391 = 0uLL;
      LODWORD(v390) = 0;
      DWORD1(v390) = v17;
      llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v390);
      LODWORD(v390) = 1;
      *((void *)&v390 + 1) = 0;
      *(void *)&long long v391 = 0;
      llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v390);
      LODWORD(v390) = 1;
      *((void *)&v390 + 1) = 0;
      *(void *)&long long v391 = (unsigned __int16)v154 | 0x100000000;
      llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v390);
      LODWORD(v390) = 1;
      *((void *)&v390 + 1) = 0;
      *(void *)&long long v391 = 0;
      llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v390);
      long long v390 = 0u;
      long long v391 = 0u;
      llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v390);
      if (!v371)
      {
LABEL_290:
        uint64_t v183 = *(void *)(v12 + 48);
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v183, "", 0);
        *(void *)(*(void *)(v183 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4180;
        uint64_t v185 = *(void *)(v183 + 8);
        if (v185)
        {
          (*(void (**)(uint64_t))(*(void *)v185 + 24))(v185);
          if (!IncompleteVirtualRegister) {
            return 0;
          }
        }
        else if (!IncompleteVirtualRegister)
        {
          return 0;
        }
        uint64_t v186 = *(void *)(v12 + 32);
        uint64_t v187 = *(void *)(v186 + 640);
        BOOL v188 = *(unint64_t **)(v186 + 648);
        uint64_t v189 = *(void *)(*(void *)(v12 + 96) + 8) + 480;
        BOOL v190 = *(llvm::MachineFunction **)(v187 + 32);
        uint64_t v191 = *(unsigned __int8 **)(v12 + 72);
        uint64_t v389 = v191;
        if (v191) {
          llvm::MetadataTracking::track((uint64_t)&v389, v191, 2);
        }
        uint64_t v192 = llvm::MachineFunction::CreateMachineInstr(v190, v189, &v389, 0);
        if (!v389)
        {
LABEL_295:
          uint64_t v193 = *(void *)(v187 + 40);
          *((void *)v192 + 3) = v193;
          uint64_t v194 = *(void *)(v193 + 32);
          uint64_t v195 = *((unsigned int *)v192 + 10);
          if (v195)
          {
            uint64_t v270 = *((void *)v192 + 4);
            uint64_t v271 = *(void *)(v194 + 40);
            uint64_t v272 = 32 * v195;
            do
            {
              if (!*(unsigned char *)v270)
              {
                uint64_t v273 = *(unsigned int *)(v270 + 4);
                if ((int)v273 >= 0) {
                  uint64_t v274 = (uint64_t *)(*(void *)(v271 + 272) + 8 * v273);
                }
                else {
                  uint64_t v274 = (uint64_t *)(*(void *)(v271 + 24) + 16 * (v273 & 0x7FFFFFFF) + 8);
                }
                uint64_t v275 = *v274;
                if (*v274)
                {
                  uint64_t v276 = *(void *)(v275 + 16);
                  *(void *)(v275 + 16) = v270;
                  *(void *)(v270 + 16) = v276;
                  if (*(unsigned char *)(v270 + 3))
                  {
                    *(void *)(v270 + 24) = v275;
                  }
                  else
                  {
                    *(void *)(v270 + 24) = 0;
                    uint64_t v274 = (uint64_t *)(v276 + 24);
                  }
                }
                else
                {
                  *(void *)(v270 + 16) = v270;
                  *(void *)(v270 + 24) = 0;
                }
                uint64_t *v274 = v270;
              }
              v270 += 32;
              v272 -= 32;
            }
            while (v272);
          }
          uint64_t v196 = *(void *)(v194 + 728);
          if (v196) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v196 + 24))(v196, v192);
          }
          unint64_t v197 = *v188 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v192 = v197 | *(void *)v192 & 7;
          *((void *)v192 + 1) = v188;
          *(void *)(v197 + 8) = v192;
          unint64_t *v188 = *v188 & 7 | (unint64_t)v192;
          *((void *)&v390 + 1) = 0;
          long long v391 = 0uLL;
          LODWORD(v390) = 0x1000000;
          DWORD1(v390) = IncompleteVirtualRegister;
          llvm::MachineInstr::addOperand(v192, v190, (const llvm::MachineOperand *)&v390);
          uint64_t v198 = *(void *)(v12 + 32);
          uint64_t v199 = *(void *)(v198 + 640);
          unint64_t v200 = *(unint64_t **)(v198 + 648);
          uint64_t v201 = *(void *)(*(void *)(v12 + 96) + 8) + 864;
          uint64_t v202 = *(llvm::MachineFunction **)(v199 + 32);
          uint64_t v203 = *(unsigned __int8 **)(v12 + 72);
          uint64_t v389 = v203;
          if (v203) {
            llvm::MetadataTracking::track((uint64_t)&v389, v203, 2);
          }
          uint64_t v204 = llvm::MachineFunction::CreateMachineInstr(v202, v201, &v389, 0);
          if (!v389)
          {
LABEL_301:
            uint64_t v205 = *(void *)(v199 + 40);
            *((void *)v204 + 3) = v205;
            uint64_t v206 = *(void *)(v205 + 32);
            uint64_t v207 = *((unsigned int *)v204 + 10);
            if (v207)
            {
              uint64_t v277 = *((void *)v204 + 4);
              uint64_t v278 = *(void *)(v206 + 40);
              uint64_t v279 = 32 * v207;
              do
              {
                if (!*(unsigned char *)v277)
                {
                  uint64_t v280 = *(unsigned int *)(v277 + 4);
                  if ((int)v280 >= 0) {
                    uint64_t v281 = (uint64_t *)(*(void *)(v278 + 272) + 8 * v280);
                  }
                  else {
                    uint64_t v281 = (uint64_t *)(*(void *)(v278 + 24) + 16 * (v280 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v282 = *v281;
                  if (*v281)
                  {
                    uint64_t v283 = *(void *)(v282 + 16);
                    *(void *)(v282 + 16) = v277;
                    *(void *)(v277 + 16) = v283;
                    if (*(unsigned char *)(v277 + 3))
                    {
                      *(void *)(v277 + 24) = v282;
                    }
                    else
                    {
                      *(void *)(v277 + 24) = 0;
                      uint64_t v281 = (uint64_t *)(v283 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v277 + 16) = v277;
                    *(void *)(v277 + 24) = 0;
                  }
                  uint64_t *v281 = v277;
                }
                v277 += 32;
                v279 -= 32;
              }
              while (v279);
            }
            uint64_t v208 = *(void *)(v206 + 728);
            if (v208) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v208 + 24))(v208, v204);
            }
            unint64_t v209 = *v200 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v204 = v209 | *(void *)v204 & 7;
            *((void *)v204 + 1) = v200;
            *(void *)(v209 + 8) = v204;
            *unint64_t v200 = *v200 & 7 | (unint64_t)v204;
            *((void *)&v390 + 1) = 0;
            long long v391 = 0uLL;
            LODWORD(v390) = 0x1000000;
            DWORD1(v390) = a3;
            llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
            *((void *)&v390 + 1) = 0;
            long long v391 = 0uLL;
            LODWORD(v390) = 0;
            DWORD1(v390) = v155;
            llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
            uint64_t v168 = 1;
            LODWORD(v390) = 1;
            *((void *)&v390 + 1) = 0;
            *(void *)&long long v391 = 1;
            llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
            *((void *)&v390 + 1) = 0;
            long long v391 = 0uLL;
            LODWORD(v390) = 0;
            DWORD1(v390) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
            LODWORD(v390) = 1;
            *((void *)&v390 + 1) = 0;
            *(void *)&long long v391 = 2;
            llvm::MachineInstr::addOperand(v204, v202, (const llvm::MachineOperand *)&v390);
            if (v13) {
              goto LABEL_305;
            }
            uint64_t v228 = *(void *)(v12 + 32);
            uint64_t v229 = *(void *)(v228 + 640);
            uint64_t v230 = *(unint64_t **)(v228 + 648);
            uint64_t v231 = *(void *)(*(void *)(v12 + 96) + 8) + 480;
            BOOL v160 = *(llvm::MachineFunction **)(v229 + 32);
            unint64_t v232 = *(unsigned __int8 **)(v12 + 72);
            uint64_t v389 = v232;
            if (v232) {
              llvm::MetadataTracking::track((uint64_t)&v389, v232, 2);
            }
            uint64_t v162 = llvm::MachineFunction::CreateMachineInstr(v160, v231, &v389, 0);
            if (!v389) {
              goto LABEL_327;
            }
            int v343 = *v389;
            if ((v343 - 4) > 0x1E)
            {
              if ((v343 - 3) >= 0xFFFFFFFE) {
                uint64_t v360 = v389;
              }
              else {
                uint64_t v360 = 0;
              }
              if ((v343 - 3) < 0xFFFFFFFE)
              {
                if (v343 == 3) {
                  *((void *)v389 + 1) = 0;
                }
                goto LABEL_327;
              }
              unint64_t v345 = (unint64_t)(v360 + 8);
            }
            else if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3) {
                   || (uint64_t v344 = *((void *)v389 + 2), (v344 & 4) == 0)
            }
                   || (unint64_t v345 = v344 & 0xFFFFFFFFFFFFFFF8) == 0)
            {
LABEL_327:
              int v233 = a3 + 1;
              uint64_t v234 = *(void *)(v229 + 40);
              *((void *)v162 + 3) = v234;
              uint64_t v235 = *(void *)(v234 + 32);
              uint64_t v236 = *((unsigned int *)v162 + 10);
              if (v236)
              {
                uint64_t v297 = *((void *)v162 + 4);
                uint64_t v298 = *(void *)(v235 + 40);
                uint64_t v299 = 32 * v236;
                do
                {
                  if (!*(unsigned char *)v297)
                  {
                    uint64_t v300 = *(unsigned int *)(v297 + 4);
                    if ((int)v300 >= 0) {
                      uint64_t v301 = (uint64_t *)(*(void *)(v298 + 272) + 8 * v300);
                    }
                    else {
                      uint64_t v301 = (uint64_t *)(*(void *)(v298 + 24) + 16 * (v300 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v302 = *v301;
                    if (*v301)
                    {
                      uint64_t v303 = *(void *)(v302 + 16);
                      *(void *)(v302 + 16) = v297;
                      *(void *)(v297 + 16) = v303;
                      if (*(unsigned char *)(v297 + 3))
                      {
                        *(void *)(v297 + 24) = v302;
                      }
                      else
                      {
                        *(void *)(v297 + 24) = 0;
                        uint64_t v301 = (uint64_t *)(v303 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v297 + 16) = v297;
                      *(void *)(v297 + 24) = 0;
                    }
                    *uint64_t v301 = v297;
                  }
                  v297 += 32;
                  v299 -= 32;
                }
                while (v299);
              }
              goto LABEL_328;
            }
            *(void *)&long long v390 = &v389;
            sub_1CC5FA668(v345 + 16, &v390);
            goto LABEL_327;
          }
          int v339 = *v389;
          if ((v339 - 4) > 0x1E)
          {
            if ((v339 - 3) >= 0xFFFFFFFE) {
              uint64_t v347 = v389;
            }
            else {
              uint64_t v347 = 0;
            }
            if ((v339 - 3) < 0xFFFFFFFE)
            {
              if (v339 == 3) {
                *((void *)v389 + 1) = 0;
              }
              goto LABEL_301;
            }
            unint64_t v341 = (unint64_t)(v347 + 8);
          }
          else
          {
            if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
              goto LABEL_301;
            }
            uint64_t v340 = *((void *)v389 + 2);
            if ((v340 & 4) == 0) {
              goto LABEL_301;
            }
            unint64_t v341 = v340 & 0xFFFFFFFFFFFFFFF8;
            if (!v341) {
              goto LABEL_301;
            }
          }
          *(void *)&long long v390 = &v389;
          sub_1CC5FA668(v341 + 16, &v390);
          goto LABEL_301;
        }
        int v336 = *v389;
        if ((v336 - 4) > 0x1E)
        {
          if ((v336 - 3) >= 0xFFFFFFFE) {
            uint64_t v346 = v389;
          }
          else {
            uint64_t v346 = 0;
          }
          if ((v336 - 3) < 0xFFFFFFFE)
          {
            if (v336 == 3) {
              *((void *)v389 + 1) = 0;
            }
            goto LABEL_295;
          }
          unint64_t v338 = (unint64_t)(v346 + 8);
        }
        else
        {
          if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
            goto LABEL_295;
          }
          uint64_t v337 = *((void *)v389 + 2);
          if ((v337 & 4) == 0) {
            goto LABEL_295;
          }
          unint64_t v338 = v337 & 0xFFFFFFFFFFFFFFF8;
          if (!v338) {
            goto LABEL_295;
          }
        }
        *(void *)&long long v390 = &v389;
        sub_1CC5FA668(v338 + 16, &v390);
        goto LABEL_295;
      }
LABEL_268:
      uint64_t v156 = *(void *)(v12 + 32);
      uint64_t v157 = *(void *)(v156 + 640);
      int v158 = *(unint64_t **)(v156 + 648);
      uint64_t v159 = *(void *)(*(void *)(v12 + 96) + 8) + 912;
      BOOL v160 = *(llvm::MachineFunction **)(v157 + 32);
      uint64_t v161 = *(unsigned __int8 **)(v12 + 72);
      uint64_t v389 = v161;
      if (v161) {
        llvm::MetadataTracking::track((uint64_t)&v389, v161, 2);
      }
      uint64_t v162 = llvm::MachineFunction::CreateMachineInstr(v160, v159, &v389, 0);
      if (!v389) {
        goto LABEL_271;
      }
      int v333 = *v389;
      if ((v333 - 4) > 0x1E)
      {
        if ((v333 - 3) >= 0xFFFFFFFE) {
          uint64_t v342 = v389;
        }
        else {
          uint64_t v342 = 0;
        }
        if ((v333 - 3) < 0xFFFFFFFE)
        {
          if (v333 == 3) {
            *((void *)v389 + 1) = 0;
          }
          goto LABEL_271;
        }
        unint64_t v335 = (unint64_t)(v342 + 8);
      }
      else
      {
        if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
          goto LABEL_271;
        }
        uint64_t v334 = *((void *)v389 + 2);
        if ((v334 & 4) == 0) {
          goto LABEL_271;
        }
        unint64_t v335 = v334 & 0xFFFFFFFFFFFFFFF8;
        if (!v335) {
          goto LABEL_271;
        }
      }
      *(void *)&long long v390 = &v389;
      sub_1CC5FA668(v335 + 16, &v390);
LABEL_271:
      uint64_t v163 = *(void *)(v157 + 40);
      *((void *)v162 + 3) = v163;
      uint64_t v164 = *(void *)(v163 + 32);
      uint64_t v165 = *((unsigned int *)v162 + 10);
      if (v165)
      {
        uint64_t v263 = *((void *)v162 + 4);
        uint64_t v264 = *(void *)(v164 + 40);
        uint64_t v265 = 32 * v165;
        do
        {
          if (!*(unsigned char *)v263)
          {
            uint64_t v266 = *(unsigned int *)(v263 + 4);
            if ((int)v266 >= 0) {
              uint64_t v267 = (uint64_t *)(*(void *)(v264 + 272) + 8 * v266);
            }
            else {
              uint64_t v267 = (uint64_t *)(*(void *)(v264 + 24) + 16 * (v266 & 0x7FFFFFFF) + 8);
            }
            uint64_t v268 = *v267;
            if (*v267)
            {
              uint64_t v269 = *(void *)(v268 + 16);
              *(void *)(v268 + 16) = v263;
              *(void *)(v263 + 16) = v269;
              if (*(unsigned char *)(v263 + 3))
              {
                *(void *)(v263 + 24) = v268;
              }
              else
              {
                *(void *)(v263 + 24) = 0;
                uint64_t v267 = (uint64_t *)(v269 + 24);
              }
            }
            else
            {
              *(void *)(v263 + 16) = v263;
              *(void *)(v263 + 24) = 0;
            }
            uint64_t *v267 = v263;
          }
          v263 += 32;
          v265 -= 32;
        }
        while (v265);
      }
      uint64_t v166 = *(void *)(v164 + 728);
      if (v166) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v166 + 24))(v166, v162);
      }
      unint64_t v167 = *v158 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v162 = v167 | *(void *)v162 & 7;
      *((void *)v162 + 1) = v158;
      *(void *)(v167 + 8) = v162;
      *int v158 = *v158 & 7 | (unint64_t)v162;
      *((void *)&v390 + 1) = 0;
      long long v391 = 0uLL;
      LODWORD(v390) = 0x1000000;
      DWORD1(v390) = a3;
      llvm::MachineInstr::addOperand(v162, v160, (const llvm::MachineOperand *)&v390);
      *((void *)&v390 + 1) = 0;
      *(void *)&long long v391 = 0;
      DWORD1(v390) = v155;
      goto LABEL_275;
    }
    int v351 = *v389;
    if ((v351 - 4) > 0x1E)
    {
      if ((v351 - 3) >= 0xFFFFFFFE) {
        uint64_t v362 = v389;
      }
      else {
        uint64_t v362 = 0;
      }
      if ((v351 - 3) < 0xFFFFFFFE)
      {
        int v13 = v369;
        a3 = v370;
        uint64_t v12 = v377;
        if (v351 == 3) {
          *((void *)v389 + 1) = 0;
        }
        goto LABEL_286;
      }
      unint64_t v353 = (unint64_t)(v362 + 8);
    }
    else
    {
      int v13 = v369;
      a3 = v370;
      uint64_t v12 = v377;
      if ((v389[1] & 0x7F) != 2 && !*((_DWORD *)v389 + 3)) {
        goto LABEL_286;
      }
      uint64_t v352 = *((void *)v389 + 2);
      if ((v352 & 4) == 0) {
        goto LABEL_286;
      }
      unint64_t v353 = v352 & 0xFFFFFFFFFFFFFFF8;
      if (!v353) {
        goto LABEL_286;
      }
    }
    *(void *)&long long v390 = &v389;
    sub_1CC5FA668(v353 + 16, &v390);
    int v13 = v369;
    a3 = v370;
    uint64_t v12 = v377;
    goto LABEL_286;
  }
  if (v155) {
    goto LABEL_280;
  }
  return 0;
}

uint64_t sub_1CB86D9D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  int v288 = *(unsigned __int8 *)(*(void *)(a1 + 256) + 280);
  int v299 = 0;
  int v298 = 0;
  int v295 = 0;
  if (!sub_1CB85A548(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), &v298, &v299, a5, a6, a7))
  {
    int v295 = sub_1CB87DFFC((uint64_t *)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
    if (!v295) {
      return 0;
    }
  }
  int v283 = a3;
  uint64_t v10 = v299;
  uint64_t v11 = (uint64_t **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
  uint64_t v12 = (uint64_t *)(v11 + 4);
  uint64_t v289 = (void *)v9;
  if (v11 + 4 != (uint64_t **)v8)
  {
    uint64_t v13 = **v11;
    if (v288) {
      int v14 = 2764;
    }
    else {
      int v14 = 2832;
    }
    int v15 = 2848;
    if (v288) {
      int v15 = 2771;
    }
    int v284 = v15;
    int v285 = v14;
    if (v288) {
      int v16 = 3346;
    }
    else {
      int v16 = 3547;
    }
    int v17 = 3551;
    if (v288) {
      int v17 = 3348;
    }
    int v286 = v17;
    int v287 = v16;
    uint64_t v292 = v8;
    do
    {
      uint64_t v18 = *v12;
      int v19 = *(unsigned __int8 *)(v13 + 8);
      if (v13 && v19 == 16)
      {
        unint64_t v20 = (unsigned int *)(v18 + 24);
        if (*(_DWORD *)(v18 + 32) >= 0x41u) {
          unint64_t v20 = *(unsigned int **)v20;
        }
        uint64_t v21 = *v20;
        if (*v20) {
          v10 += *((void *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(v9 + 88), (llvm::StructType *)v13)
        }
                 + v21
                 + 2);
        uint64_t v13 = *(void *)(*(void *)(v13 + 16) + 8 * v21);
        goto LABEL_146;
      }
      if (v13 && v19 == 15)
      {
        uint64_t v22 = *(uint64_t **)(v13 + 16);
      }
      else
      {
        if ((!v13 || v19 != 17) && (!v13 || (v19 & 0xFE) != 0x12)) {
          goto LABEL_31;
        }
        uint64_t v22 = (uint64_t *)(v13 + 24);
      }
      uint64_t v13 = *v22;
LABEL_31:
      unsigned int v23 = *(unsigned __int8 *)(v18 + 16);
      if (v23 != 16 || v18 == 0)
      {
        if (v23 <= 0x1B) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = *v12;
        }
        BOOL v26 = v23 - 67 > 1 || v25 == 0;
        if (v26
          || ((int v27 = *(_DWORD *)(v25 + 20), (v27 & 0x40000000) != 0)
            ? (uint64_t v28 = *(void *)(v25 - 8))
            : (uint64_t v28 = v25 - 32 * (v27 & 0x7FFFFFF)),
              unsigned int v43 = *(_DWORD *)(**(void **)v28 + 8),
              v43 < 0x1000))
        {
          BOOL v47 = 0;
          BOOL v46 = 0;
        }
        else
        {
          unsigned int v44 = v43 & 0xFFFFFF00;
          BOOL v45 = v23 == 68;
          BOOL v46 = v44 == 4096;
          BOOL v47 = v44 == 4096 && v45;
          if ((v27 & 0x40000000) != 0) {
            int v48 = *(uint64_t **)(v25 - 8);
          }
          else {
            int v48 = (uint64_t *)(v25 - 32 * (v27 & 0x7FFFFFF));
          }
          uint64_t v18 = *v48;
        }
        uint64_t v293 = v10;
        uint64_t v49 = *(llvm::DataLayout **)(v9 + 88);
        uint64_t v50 = sub_1CB83544C((uint64_t)v49, v13);
        BOOL v52 = v51 == 1;
        char Alignment = llvm::DataLayout::getAlignment(v49, (llvm::Type *)v13, 1);
        if (v52) {
        int v55 = sub_1CB87DFFC((uint64_t *)v9, (unsigned __int8 *)v18);
        }
        if (!v55) {
          return 0;
        }
        int v56 = v55;
        BOOL v290 = v47;
        uint64_t v57 = *(void *)(v9 + 48);
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v57, "", 0);
        *(void *)(*(void *)(v57 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4340;
        uint64_t v59 = *(void *)(v57 + 8);
        if (v59)
        {
          int v130 = IncompleteVirtualRegister;
          (*(void (**)(uint64_t))(*(void *)v59 + 24))(v59);
          int IncompleteVirtualRegister = v130;
          if (!v130) {
            return 0;
          }
        }
        else if (!IncompleteVirtualRegister)
        {
          return 0;
        }
        unint64_t v60 = ((1 << Alignment) + ((unint64_t)(v50 + 7) >> 3) - 1) & -(1 << Alignment);
        int v294 = IncompleteVirtualRegister;
        if (!v46)
        {
          uint8x8_t v78 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
          v78.i16[0] = vaddlv_u8(v78);
          if (v78.u32[0] != 1) {
            return 0;
          }
          unsigned int v79 = __clz(v60);
          BOOL v80 = v79 == 31 || v288 == 0;
          uint64_t v291 = 31 - v79;
          if (v80 && 31 - v79 < 5)
          {
            int v81 = v56;
            goto LABEL_117;
          }
          uint64_t v82 = *(void *)(v9 + 48);
          int v81 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v82, "", 0);
          *(void *)(*(void *)(v82 + 24) + 16 * (v81 & 0x7FFFFFFF)) = &off_1E66A4340;
          uint64_t v83 = *(void *)(v82 + 8);
          if (v83)
          {
            (*(void (**)(uint64_t))(*(void *)v83 + 24))(v83);
            if (!v81) {
              return 0;
            }
          }
          else if (!v81)
          {
            return 0;
          }
          uint64_t v84 = *(void *)(v9 + 32);
          uint64_t v85 = *(void *)(v84 + 640);
          long long v86 = *(unint64_t **)(v84 + 648);
          uint64_t v87 = *(void *)(*(void *)(v9 + 96) + 8);
          uint64_t v88 = *(llvm::MachineFunction **)(v85 + 32);
          uint64_t v89 = *(unsigned __int8 **)(v9 + 72);
          uint64_t v296 = v89;
          if (v89) {
            llvm::MetadataTracking::track((uint64_t)&v296, v89, 2);
          }
          uint64_t v90 = llvm::MachineFunction::CreateMachineInstr(v88, v87 + 594000, &v296, 0);
          if (v296)
          {
            int v146 = *v296;
            if ((v146 - 4) > 0x1E)
            {
              if ((v146 - 3) >= 0xFFFFFFFE) {
                unsigned int v151 = v296;
              }
              else {
                unsigned int v151 = 0;
              }
              if ((v146 - 3) < 0xFFFFFFFE)
              {
                uint64_t v9 = (uint64_t)v289;
                if (v146 == 3) {
                  *((void *)v296 + 1) = 0;
                }
                goto LABEL_107;
              }
              unint64_t v148 = (unint64_t)(v151 + 8);
            }
            else
            {
              uint64_t v9 = (uint64_t)v289;
              if ((v296[1] & 0x7F) != 2 && !*((_DWORD *)v296 + 3)) {
                goto LABEL_107;
              }
              uint64_t v147 = *((void *)v296 + 2);
              if ((v147 & 4) == 0) {
                goto LABEL_107;
              }
              unint64_t v148 = v147 & 0xFFFFFFFFFFFFFFF8;
              if (!v148) {
                goto LABEL_107;
              }
            }
            *(void *)&long long v300 = &v296;
            sub_1CC5FA668(v148 + 16, &v300);
            uint64_t v9 = (uint64_t)v289;
          }
LABEL_107:
          uint64_t v91 = *(void *)(v85 + 40);
          *((void *)v90 + 3) = v91;
          uint64_t v92 = *(void *)(v91 + 32);
          uint64_t v93 = *((unsigned int *)v90 + 10);
          if (v93)
          {
            uint64_t v133 = *((void *)v90 + 4);
            uint64_t v134 = *(void *)(v92 + 40);
            uint64_t v135 = 32 * v93;
            do
            {
              if (!*(unsigned char *)v133)
              {
                uint64_t v136 = *(unsigned int *)(v133 + 4);
                if ((int)v136 >= 0) {
                  uint64_t v137 = (uint64_t *)(*(void *)(v134 + 272) + 8 * v136);
                }
                else {
                  uint64_t v137 = (uint64_t *)(*(void *)(v134 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
                }
                uint64_t v138 = *v137;
                if (*v137)
                {
                  uint64_t v139 = *(void *)(v138 + 16);
                  *(void *)(v138 + 16) = v133;
                  *(void *)(v133 + 16) = v139;
                  if (*(unsigned char *)(v133 + 3))
                  {
                    *(void *)(v133 + 24) = v138;
                  }
                  else
                  {
                    *(void *)(v133 + 24) = 0;
                    uint64_t v137 = (uint64_t *)(v139 + 24);
                  }
                }
                else
                {
                  *(void *)(v133 + 16) = v133;
                  *(void *)(v133 + 24) = 0;
                }
                uint64_t *v137 = v133;
              }
              v133 += 32;
              v135 -= 32;
            }
            while (v135);
          }
          uint64_t v94 = *(void *)(v92 + 728);
          if (v94) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v94 + 24))(v94, v90);
          }
          unint64_t v95 = *v86 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v90 = v95 | *(void *)v90 & 7;
          *((void *)v90 + 1) = v86;
          *(void *)(v95 + 8) = v90;
          *long long v86 = *v86 & 7 | (unint64_t)v90;
          *((void *)&v300 + 1) = 0;
          long long v301 = 0uLL;
          LODWORD(v300) = 0x1000000;
          DWORD1(v300) = v81;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = 0;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = 0x100000000;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v300);
          uint64_t v96 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(v9 + 48) + 24) + 16 * (v56 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          if (v96 == &off_1E66A4340 || v96 == &off_1E66A43C8)
          {
            int v132 = 0;
          }
          else
          {
            sub_1CD3CB380(v9, v56, 33);
            int v132 = 8448;
          }
          long long v301 = 0uLL;
          long long v300 = __PAIR64__(v56, v132);
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = 0;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = v291 | 0x100000000;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = 0;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = 0;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v300);
          long long v300 = 0u;
          long long v301 = 0u;
          llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v300);
          LODWORD(v291) = 0;
LABEL_117:
          if (v295) {
            unsigned int v98 = v285;
          }
          else {
            unsigned int v98 = v284;
          }
          uint64_t v99 = *(void *)(v9 + 32);
          uint64_t v100 = *(void *)(v99 + 640);
          unsigned int v101 = *(unint64_t **)(v99 + 648);
          uint64_t v102 = *(void *)(*(void *)(v9 + 96) + 8);
          uint64_t v103 = *(llvm::MachineFunction **)(v100 + 32);
          uint64_t v104 = *(unsigned __int8 **)(v9 + 72);
          uint64_t v296 = v104;
          if (v104) {
            llvm::MetadataTracking::track((uint64_t)&v296, v104, 2);
          }
          unint64_t v105 = llvm::MachineFunction::CreateMachineInstr(v103, v102 + 48 * v98, &v296, 0);
          if (v296)
          {
            int v143 = *v296;
            if ((v143 - 4) > 0x1E)
            {
              if ((v143 - 3) >= 0xFFFFFFFE) {
                unint64_t v150 = v296;
              }
              else {
                unint64_t v150 = 0;
              }
              if ((v143 - 3) < 0xFFFFFFFE)
              {
                uint64_t v9 = (uint64_t)v289;
                if (v143 == 3) {
                  *((void *)v296 + 1) = 0;
                }
                goto LABEL_123;
              }
              unint64_t v145 = (unint64_t)(v150 + 8);
            }
            else
            {
              uint64_t v9 = (uint64_t)v289;
              if ((v296[1] & 0x7F) != 2 && !*((_DWORD *)v296 + 3)) {
                goto LABEL_123;
              }
              uint64_t v144 = *((void *)v296 + 2);
              if ((v144 & 4) == 0) {
                goto LABEL_123;
              }
              unint64_t v145 = v144 & 0xFFFFFFFFFFFFFFF8;
              if (!v145) {
                goto LABEL_123;
              }
            }
            *(void *)&long long v300 = &v296;
            sub_1CC5FA668(v145 + 16, &v300);
            uint64_t v9 = (uint64_t)v289;
          }
LABEL_123:
          uint64_t v106 = *(void *)(v100 + 40);
          *((void *)v105 + 3) = v106;
          uint64_t v107 = *(void *)(v106 + 32);
          uint64_t v108 = *((unsigned int *)v105 + 10);
          uint64_t v8 = v292;
          if (v108)
          {
            uint64_t v123 = *((void *)v105 + 4);
            uint64_t v124 = *(void *)(v107 + 40);
            uint64_t v125 = 32 * v108;
            do
            {
              if (!*(unsigned char *)v123)
              {
                uint64_t v126 = *(unsigned int *)(v123 + 4);
                if ((int)v126 >= 0) {
                  uint64_t v127 = (uint64_t *)(*(void *)(v124 + 272) + 8 * v126);
                }
                else {
                  uint64_t v127 = (uint64_t *)(*(void *)(v124 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8);
                }
                uint64_t v128 = *v127;
                if (*v127)
                {
                  uint64_t v129 = *(void *)(v128 + 16);
                  *(void *)(v128 + 16) = v123;
                  *(void *)(v123 + 16) = v129;
                  if (*(unsigned char *)(v123 + 3))
                  {
                    *(void *)(v123 + 24) = v128;
                  }
                  else
                  {
                    *(void *)(v123 + 24) = 0;
                    uint64_t v127 = (uint64_t *)(v129 + 24);
                  }
                }
                else
                {
                  *(void *)(v123 + 16) = v123;
                  *(void *)(v123 + 24) = 0;
                }
                *uint64_t v127 = v123;
              }
              v123 += 32;
              v125 -= 32;
            }
            while (v125);
          }
          uint64_t v109 = *(void *)(v107 + 728);
          if (v109) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v109 + 24))(v109, v105);
          }
          unint64_t v110 = *v101 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v105 = v110 | *(void *)v105 & 7;
          *((void *)v105 + 1) = v101;
          *(void *)(v110 + 8) = v105;
          unint64_t *v101 = *v101 & 7 | (unint64_t)v105;
          *((void *)&v300 + 1) = 0;
          long long v301 = 0uLL;
          LODWORD(v300) = 0x1000000;
          DWORD1(v300) = v294;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = 0;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v300);
          if (v295)
          {
            int v111 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(v9 + 48) + 24) + 16 * (v295 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
            if (v111 == &off_1E66A4340 || v111 == &off_1E66A43C8)
            {
              int v131 = 0;
            }
            else
            {
              sub_1CD3CB380(v9, v295, 33);
              int v131 = 8448;
            }
            long long v301 = 0uLL;
            long long v300 = __PAIR64__(v295, v131);
            llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v300);
            LODWORD(v300) = 1;
            *((void *)&v300 + 1) = 0;
            *(void *)&long long v301 = 0;
          }
          else
          {
            LODWORD(v300) = 5;
            *((void *)&v300 + 1) = 0;
            LODWORD(v301) = v298;
          }
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v300);
          int v113 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(v9 + 48) + 24) + 16 * (v81 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          if (v113 == &off_1E66A4340 || v113 == &off_1E66A43C8)
          {
            int v115 = 0;
          }
          else
          {
            sub_1CD3CB380(v9, v81, 33);
            int v115 = 8448;
          }
          long long v301 = 0uLL;
          long long v300 = __PAIR64__(v81, v115);
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = (v291 << 6);
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = 0;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v300);
          long long v300 = 0u;
          long long v301 = 0u;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v300);
          int v295 = v294;
          uint64_t v10 = v293;
          goto LABEL_146;
        }
        if (v60 >> 16) {
          return 0;
        }
        if (v295) {
          unsigned int v61 = v287;
        }
        else {
          unsigned int v61 = v286;
        }
        uint64_t v62 = *(void *)(v9 + 32);
        uint64_t v63 = v9;
        uint64_t v64 = *(void *)(v62 + 640);
        int v65 = *(unint64_t **)(v62 + 648);
        uint64_t v66 = *(void *)(*(void *)(v63 + 96) + 8);
        long long v67 = *(llvm::MachineFunction **)(v64 + 32);
        int v68 = *(unsigned __int8 **)(v63 + 72);
        uint64_t v296 = v68;
        if (v68) {
          llvm::MetadataTracking::track((uint64_t)&v296, v68, 2);
        }
        uint64_t v69 = llvm::MachineFunction::CreateMachineInstr(v67, v66 + 48 * v61, &v296, 0);
        if (!v296) {
          goto LABEL_83;
        }
        int v140 = *v296;
        if ((v140 - 4) > 0x1E)
        {
          if ((v140 - 3) >= 0xFFFFFFFE) {
            uint64_t v149 = v296;
          }
          else {
            uint64_t v149 = 0;
          }
          if ((v140 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v142 = (unint64_t)(v149 + 8);
            goto LABEL_214;
          }
          if (v140 == 3) {
            *((void *)v296 + 1) = 0;
          }
        }
        else if ((v296[1] & 0x7F) == 2 || *((_DWORD *)v296 + 3))
        {
          uint64_t v141 = *((void *)v296 + 2);
          if ((v141 & 4) != 0)
          {
            unint64_t v142 = v141 & 0xFFFFFFFFFFFFFFF8;
            if (v142)
            {
LABEL_214:
              *(void *)&long long v300 = &v296;
              sub_1CC5FA668(v142 + 16, &v300);
            }
          }
        }
LABEL_83:
        uint64_t v70 = *(void *)(v64 + 40);
        *((void *)v69 + 3) = v70;
        uint64_t v71 = *(void *)(v70 + 32);
        uint64_t v72 = *((unsigned int *)v69 + 10);
        uint64_t v9 = (uint64_t)v289;
        if (v72)
        {
          uint64_t v116 = *((void *)v69 + 4);
          uint64_t v117 = *(void *)(v71 + 40);
          uint64_t v118 = 32 * v72;
          do
          {
            if (!*(unsigned char *)v116)
            {
              uint64_t v119 = *(unsigned int *)(v116 + 4);
              if ((int)v119 >= 0) {
                uint64_t v120 = (uint64_t *)(*(void *)(v117 + 272) + 8 * v119);
              }
              else {
                uint64_t v120 = (uint64_t *)(*(void *)(v117 + 24) + 16 * (v119 & 0x7FFFFFFF) + 8);
              }
              uint64_t v121 = *v120;
              if (*v120)
              {
                uint64_t v122 = *(void *)(v121 + 16);
                *(void *)(v121 + 16) = v116;
                *(void *)(v116 + 16) = v122;
                if (*(unsigned char *)(v116 + 3))
                {
                  *(void *)(v116 + 24) = v121;
                }
                else
                {
                  *(void *)(v116 + 24) = 0;
                  uint64_t v120 = (uint64_t *)(v122 + 24);
                }
              }
              else
              {
                *(void *)(v116 + 16) = v116;
                *(void *)(v116 + 24) = 0;
              }
              uint64_t *v120 = v116;
            }
            v116 += 32;
            v118 -= 32;
          }
          while (v118);
        }
        uint64_t v73 = *(void *)(v71 + 728);
        if (v73) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v73 + 24))(v73, v69);
        }
        unint64_t v74 = *v65 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v69 = v74 | *(void *)v69 & 7;
        *((void *)v69 + 1) = v65;
        *(void *)(v74 + 8) = v69;
        unint64_t *v65 = *v65 & 7 | (unint64_t)v69;
        *((void *)&v300 + 1) = 0;
        long long v301 = 0uLL;
        LODWORD(v300) = 0x1000000;
        DWORD1(v300) = v294;
        llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v300);
        LODWORD(v300) = 1;
        *((void *)&v300 + 1) = 0;
        *(void *)&long long v301 = 0;
        llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v300);
        uint64_t v296 = (unsigned __int8 *)v67;
        uint64_t v297 = v69;
        if ((sub_1CB8843D8((uint64_t)v289, (unsigned char *)v18, 0, (llvm::MachineFunction **)&v296, 0) & 1) == 0)
        {
          *((void *)&v300 + 1) = 0;
          LODWORD(v300) = 0;
          DWORD1(v300) = v56;
          long long v301 = 0uLL;
          llvm::MachineInstr::addOperand(v297, (llvm::MachineFunction *)v296, (const llvm::MachineOperand *)&v300);
        }
        uint64_t v75 = 8;
        if (!v290) {
          uint64_t v75 = 0;
        }
        LODWORD(v300) = 1;
        *((void *)&v300 + 1) = 0;
        *(void *)&long long v301 = v75;
        llvm::MachineInstr::addOperand(v297, (llvm::MachineFunction *)v296, (const llvm::MachineOperand *)&v300);
        LODWORD(v300) = 1;
        *((void *)&v300 + 1) = 0;
        *(void *)&long long v301 = v60 | 0x100000000;
        llvm::MachineInstr::addOperand(v297, (llvm::MachineFunction *)v296, (const llvm::MachineOperand *)&v300);
        if (v295)
        {
          int v76 = 0;
          uint64_t v77 = (_UNKNOWN ***)(*(void *)(*(void *)(v289[6] + 24) + 16 * (v295 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v10 = v293;
          if (v77 == &off_1E66A4340)
          {
            uint64_t v8 = v292;
          }
          else
          {
            uint64_t v8 = v292;
            if (v77 != &off_1E66A43C8)
            {
              sub_1CD3CB380((uint64_t)v289, v295, 33);
              int v76 = 8448;
            }
          }
          long long v301 = 0uLL;
          long long v300 = __PAIR64__(v295, v76);
          llvm::MachineInstr::addOperand(v297, (llvm::MachineFunction *)v296, (const llvm::MachineOperand *)&v300);
          LODWORD(v300) = 1;
          *((void *)&v300 + 1) = 0;
          *(void *)&long long v301 = 0;
          llvm::MachineInstr::addOperand(v297, (llvm::MachineFunction *)v296, (const llvm::MachineOperand *)&v300);
        }
        else
        {
          LODWORD(v300) = 5;
          *((void *)&v300 + 1) = 0;
          LODWORD(v301) = v298;
          llvm::MachineInstr::addOperand(v297, (llvm::MachineFunction *)v296, (const llvm::MachineOperand *)&v300);
          uint64_t v8 = v292;
          uint64_t v10 = v293;
        }
        LODWORD(v300) = 1;
        *((void *)&v300 + 1) = 0;
        *(void *)&long long v301 = 0;
        llvm::MachineInstr::addOperand(v297, (llvm::MachineFunction *)v296, (const llvm::MachineOperand *)&v300);
        long long v300 = 0u;
        long long v301 = 0u;
        llvm::MachineInstr::addOperand(v297, (llvm::MachineFunction *)v296, (const llvm::MachineOperand *)&v300);
        int v295 = v294;
        goto LABEL_146;
      }
      uint64_t v29 = *(unsigned int *)(v18 + 32);
      if (v29 > 0x40)
      {
        int v30 = 0;
        int64_t v31 = (unint64_t)(v29 + 63) >> 6;
        do
        {
          if (v31-- < 1) {
            break;
          }
          unint64_t v33 = *(void *)(*(void *)(v18 + 24) + 8 * v31);
          v30 += __clz(v33);
        }
        while (!v33);
        int v34 = v29 | 0xFFFFFFC0;
        if ((v29 & 0x3F) == 0) {
          int v34 = 0;
        }
        if (v30 + v34 == v29) {
          goto LABEL_146;
        }
LABEL_54:
        uint64_t v35 = *(llvm::DataLayout **)(v9 + 88);
        uint64_t v36 = sub_1CB83544C((uint64_t)v35, v13);
        BOOL v38 = v37 == 1;
        char v40 = llvm::DataLayout::getAlignment(v35, (llvm::Type *)v13, 1);
        unsigned int v41 = *(_DWORD *)(v18 + 32);
        if (v41 > 0x40) {
          uint64_t v42 = **(void **)(v18 + 24);
        }
        else {
          uint64_t v42 = (uint64_t)(*(void *)(v18 + 24) << -(char)v41) >> -(char)v41;
        }
        if (v38) {
        v10 += v42 * (((1 << v40) + ((unint64_t)(v36 + 7) >> 3) - 1) & -(1 << v40));
        }
        uint64_t v8 = v292;
        goto LABEL_146;
      }
      if (*(void *)(v18 + 24)) {
        goto LABEL_54;
      }
LABEL_146:
      v12 += 4;
    }
    while (v12 != (uint64_t *)v8);
  }
  if (!v295)
  {
    int v295 = sub_1CB87DFFC((uint64_t *)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)));
    if (!v295) {
      return 0;
    }
  }
  if (!v10)
  {
    int v153 = v295;
    int v155 = v283;
    goto LABEL_254;
  }
  uint64_t v152 = *(void *)(v9 + 48);
  int v153 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v152, "", 0);
  *(void *)(*(void *)(v152 + 24) + 16 * (v153 & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v154 = *(void *)(v152 + 8);
  int v155 = v283;
  if (v154)
  {
    (*(void (**)(uint64_t))(*(void *)v154 + 24))(v154);
    if (!v153) {
      return 0;
    }
  }
  else if (!v153)
  {
    return 0;
  }
  uint64_t v156 = v289[4];
  uint64_t v157 = *(void *)(v156 + 640);
  int v158 = *(unint64_t **)(v156 + 648);
  uint64_t v159 = 136128;
  if (v288) {
    uint64_t v159 = 132768;
  }
  uint64_t v160 = *(void *)(v289[12] + 8) + v159;
  uint64_t v161 = *(llvm::MachineFunction **)(v157 + 32);
  uint64_t v162 = (unsigned __int8 *)v289[9];
  uint64_t v296 = v162;
  if (v162) {
    llvm::MetadataTracking::track((uint64_t)&v296, v162, 2);
  }
  uint64_t v163 = llvm::MachineFunction::CreateMachineInstr(v161, v160, &v296, 0);
  if (v296)
  {
    int v269 = *v296;
    if ((v269 - 4) > 0x1E)
    {
      if ((v269 - 3) >= 0xFFFFFFFE) {
        uint64_t v280 = v296;
      }
      else {
        uint64_t v280 = 0;
      }
      if ((v269 - 3) < 0xFFFFFFFE)
      {
        int v155 = v283;
        if (v269 == 3) {
          *((void *)v296 + 1) = 0;
        }
        goto LABEL_243;
      }
      unint64_t v271 = (unint64_t)(v280 + 8);
    }
    else
    {
      int v155 = v283;
      if ((v296[1] & 0x7F) != 2 && !*((_DWORD *)v296 + 3)) {
        goto LABEL_243;
      }
      uint64_t v270 = *((void *)v296 + 2);
      if ((v270 & 4) == 0) {
        goto LABEL_243;
      }
      unint64_t v271 = v270 & 0xFFFFFFFFFFFFFFF8;
      if (!v271) {
        goto LABEL_243;
      }
    }
    *(void *)&long long v300 = &v296;
    sub_1CC5FA668(v271 + 16, &v300);
    int v155 = v283;
  }
LABEL_243:
  uint64_t v164 = *(void *)(v157 + 40);
  *((void *)v163 + 3) = v164;
  uint64_t v165 = *(void *)(v164 + 32);
  uint64_t v166 = *((unsigned int *)v163 + 10);
  if (v166)
  {
    uint64_t v241 = *((void *)v163 + 4);
    uint64_t v242 = *(void *)(v165 + 40);
    uint64_t v243 = 32 * v166;
    do
    {
      if (!*(unsigned char *)v241)
      {
        uint64_t v244 = *(unsigned int *)(v241 + 4);
        if ((int)v244 >= 0) {
          uint64_t v245 = (uint64_t *)(*(void *)(v242 + 272) + 8 * v244);
        }
        else {
          uint64_t v245 = (uint64_t *)(*(void *)(v242 + 24) + 16 * (v244 & 0x7FFFFFFF) + 8);
        }
        uint64_t v246 = *v245;
        if (*v245)
        {
          uint64_t v247 = *(void *)(v246 + 16);
          *(void *)(v246 + 16) = v241;
          *(void *)(v241 + 16) = v247;
          if (*(unsigned char *)(v241 + 3))
          {
            *(void *)(v241 + 24) = v246;
          }
          else
          {
            *(void *)(v241 + 24) = 0;
            uint64_t v245 = (uint64_t *)(v247 + 24);
          }
        }
        else
        {
          *(void *)(v241 + 16) = v241;
          *(void *)(v241 + 24) = 0;
        }
        uint64_t *v245 = v241;
      }
      v241 += 32;
      v243 -= 32;
    }
    while (v243);
  }
  uint64_t v167 = *(void *)(v165 + 728);
  if (v167) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v167 + 24))(v167, v163);
  }
  unint64_t v168 = *v158 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v163 = v168 | *(void *)v163 & 7;
  *((void *)v163 + 1) = v158;
  *(void *)(v168 + 8) = v163;
  *int v158 = *v158 & 7 | (unint64_t)v163;
  *((void *)&v300 + 1) = 0;
  long long v301 = 0uLL;
  LODWORD(v300) = 0x1000000;
  DWORD1(v300) = v153;
  llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v300);
  LODWORD(v300) = 1;
  *((void *)&v300 + 1) = 0;
  *(void *)&long long v301 = 0;
  llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v300);
  uint64_t v169 = (_UNKNOWN ***)(*(void *)(*(void *)(v289[6] + 24) + 16 * (v295 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (v169 == &off_1E66A4340 || v169 == &off_1E66A43C8)
  {
    int v240 = 0;
  }
  else
  {
    sub_1CD3CB380((uint64_t)v289, v295, 33);
    int v240 = 8448;
  }
  long long v301 = 0uLL;
  long long v300 = __PAIR64__(v295, v240);
  llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v300);
  LODWORD(v300) = 1;
  *((void *)&v300 + 1) = 0;
  *(void *)&long long v301 = 0;
  llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v300);
  LODWORD(v300) = 1;
  *((void *)&v300 + 1) = 0;
  *(void *)&long long v301 = v10;
  llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v300);
  LODWORD(v300) = 1;
  *((void *)&v300 + 1) = 0;
  *(void *)&long long v301 = 0;
  llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v300);
  long long v300 = 0u;
  long long v301 = 0u;
  llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v300);
LABEL_254:
  uint64_t v171 = v289[6];
  if ((_UNKNOWN ***)(*(void *)(*(void *)(v171 + 24) + 16 * (v155 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != &off_1E66A4990)
  {
    uint64_t v172 = v289[4];
    uint64_t v173 = *(void *)(v172 + 640);
    uint64_t v174 = *(unint64_t **)(v172 + 648);
    uint64_t v175 = *(void *)(v289[12] + 8) + 912;
    uint64_t v176 = *(llvm::MachineFunction **)(v173 + 32);
    uint64_t v177 = (unsigned __int8 *)v289[9];
    uint64_t v296 = v177;
    if (v177) {
      llvm::MetadataTracking::track((uint64_t)&v296, v177, 2);
    }
    uint64_t v178 = llvm::MachineFunction::CreateMachineInstr(v176, v175, &v296, 0);
    if (!v296)
    {
LABEL_258:
      uint64_t v179 = *(void *)(v173 + 40);
      *((void *)v178 + 3) = v179;
      uint64_t v180 = *(void *)(v179 + 32);
      uint64_t v181 = *((unsigned int *)v178 + 10);
      if (v181)
      {
        uint64_t v226 = *((void *)v178 + 4);
        uint64_t v227 = *(void *)(v180 + 40);
        uint64_t v228 = 32 * v181;
        do
        {
          if (!*(unsigned char *)v226)
          {
            uint64_t v229 = *(unsigned int *)(v226 + 4);
            if ((int)v229 >= 0) {
              uint64_t v230 = (uint64_t *)(*(void *)(v227 + 272) + 8 * v229);
            }
            else {
              uint64_t v230 = (uint64_t *)(*(void *)(v227 + 24) + 16 * (v229 & 0x7FFFFFFF) + 8);
            }
            uint64_t v231 = *v230;
            if (*v230)
            {
              uint64_t v232 = *(void *)(v231 + 16);
              *(void *)(v231 + 16) = v226;
              *(void *)(v226 + 16) = v232;
              if (*(unsigned char *)(v226 + 3))
              {
                *(void *)(v226 + 24) = v231;
              }
              else
              {
                *(void *)(v226 + 24) = 0;
                uint64_t v230 = (uint64_t *)(v232 + 24);
              }
            }
            else
            {
              *(void *)(v226 + 16) = v226;
              *(void *)(v226 + 24) = 0;
            }
            *uint64_t v230 = v226;
          }
          v226 += 32;
          v228 -= 32;
        }
        while (v228);
      }
      uint64_t v182 = *(void *)(v180 + 728);
      if (v182) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v182 + 24))(v182, v178);
      }
      unint64_t v183 = *v174 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v178 = v183 | *(void *)v178 & 7;
      *((void *)v178 + 1) = v174;
      *(void *)(v183 + 8) = v178;
      unint64_t *v174 = *v174 & 7 | (unint64_t)v178;
      *((void *)&v300 + 1) = 0;
      long long v301 = 0uLL;
      LODWORD(v300) = 0x1000000;
      DWORD1(v300) = v155;
      llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v300);
      *((void *)&v300 + 1) = 0;
      long long v301 = 0uLL;
      LODWORD(v300) = 0;
      DWORD1(v300) = v153;
      llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v300);
      uint64_t v184 = v289[4];
      uint64_t v185 = *(void *)(v184 + 640);
      uint64_t v186 = *(unint64_t **)(v184 + 648);
      uint64_t v187 = *(void *)(v289[12] + 8) + 480;
      BOOL v188 = *(llvm::MachineFunction **)(v185 + 32);
      uint64_t v189 = (unsigned __int8 *)v289[9];
      uint64_t v296 = v189;
      if (v189) {
        llvm::MetadataTracking::track((uint64_t)&v296, v189, 2);
      }
      BOOL v190 = llvm::MachineFunction::CreateMachineInstr(v188, v187, &v296, 0);
      if (!v296) {
        goto LABEL_264;
      }
      int v266 = *v296;
      if ((v266 - 4) > 0x1E)
      {
        if ((v266 - 3) >= 0xFFFFFFFE) {
          uint64_t v279 = v296;
        }
        else {
          uint64_t v279 = 0;
        }
        if ((v266 - 3) < 0xFFFFFFFE)
        {
          int v155 = v283;
          if (v266 == 3) {
            *((void *)v296 + 1) = 0;
          }
          goto LABEL_264;
        }
        unint64_t v268 = (unint64_t)(v279 + 8);
      }
      else
      {
        int v155 = v283;
        if ((v296[1] & 0x7F) != 2 && !*((_DWORD *)v296 + 3)) {
          goto LABEL_264;
        }
        uint64_t v267 = *((void *)v296 + 2);
        if ((v267 & 4) == 0) {
          goto LABEL_264;
        }
        unint64_t v268 = v267 & 0xFFFFFFFFFFFFFFF8;
        if (!v268) {
          goto LABEL_264;
        }
      }
      *(void *)&long long v300 = &v296;
      sub_1CC5FA668(v268 + 16, &v300);
      int v155 = v283;
LABEL_264:
      uint64_t v191 = *(void *)(v185 + 40);
      *((void *)v190 + 3) = v191;
      uint64_t v192 = *(void *)(v191 + 32);
      uint64_t v193 = *((unsigned int *)v190 + 10);
      if (v193)
      {
        uint64_t v233 = *((void *)v190 + 4);
        uint64_t v234 = *(void *)(v192 + 40);
        uint64_t v235 = 32 * v193;
        do
        {
          if (!*(unsigned char *)v233)
          {
            uint64_t v236 = *(unsigned int *)(v233 + 4);
            if ((int)v236 >= 0) {
              uint64_t v237 = (uint64_t *)(*(void *)(v234 + 272) + 8 * v236);
            }
            else {
              uint64_t v237 = (uint64_t *)(*(void *)(v234 + 24) + 16 * (v236 & 0x7FFFFFFF) + 8);
            }
            uint64_t v238 = *v237;
            if (*v237)
            {
              uint64_t v239 = *(void *)(v238 + 16);
              *(void *)(v238 + 16) = v233;
              *(void *)(v233 + 16) = v239;
              if (*(unsigned char *)(v233 + 3))
              {
                *(void *)(v233 + 24) = v238;
              }
              else
              {
                *(void *)(v233 + 24) = 0;
                uint64_t v237 = (uint64_t *)(v239 + 24);
              }
            }
            else
            {
              *(void *)(v233 + 16) = v233;
              *(void *)(v233 + 24) = 0;
            }
            *uint64_t v237 = v233;
          }
          v233 += 32;
          v235 -= 32;
        }
        while (v235);
      }
      uint64_t v194 = *(void *)(v192 + 728);
      if (v194) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v194 + 24))(v194, v190);
      }
      unint64_t v195 = *v186 & 0xFFFFFFFFFFFFFFF8;
      *(void *)BOOL v190 = v195 | *(void *)v190 & 7;
      *((void *)v190 + 1) = v186;
      *(void *)(v195 + 8) = v190;
      *uint64_t v186 = *v186 & 7 | (unint64_t)v190;
      HIDWORD(v300) = 0;
      long long v301 = 0uLL;
      LODWORD(v300) = 0x1000000;
      *(void *)((char *)&v300 + 4) = (v155 + 1);
      llvm::MachineInstr::addOperand(v190, v188, (const llvm::MachineOperand *)&v300);
      return 1;
    }
    int v263 = *v296;
    if ((v263 - 4) > 0x1E)
    {
      if ((v263 - 3) >= 0xFFFFFFFE) {
        uint64_t v278 = v296;
      }
      else {
        uint64_t v278 = 0;
      }
      if ((v263 - 3) < 0xFFFFFFFE)
      {
        int v155 = v283;
        if (v263 == 3) {
          *((void *)v296 + 1) = 0;
        }
        goto LABEL_258;
      }
      unint64_t v265 = (unint64_t)(v278 + 8);
    }
    else
    {
      int v155 = v283;
      if ((v296[1] & 0x7F) != 2 && !*((_DWORD *)v296 + 3)) {
        goto LABEL_258;
      }
      uint64_t v264 = *((void *)v296 + 2);
      if ((v264 & 4) == 0) {
        goto LABEL_258;
      }
      unint64_t v265 = v264 & 0xFFFFFFFFFFFFFFF8;
      if (!v265) {
        goto LABEL_258;
      }
    }
    *(void *)&long long v300 = &v296;
    sub_1CC5FA668(v265 + 16, &v300);
    int v155 = v283;
    goto LABEL_258;
  }
  int v197 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v289[6], "", 0);
  *(void *)(*(void *)(v171 + 24) + 16 * (v197 & 0x7FFFFFFF)) = &off_1E66A4990;
  uint64_t v198 = *(void *)(v171 + 8);
  if (!v198)
  {
    if (v197) {
      goto LABEL_270;
    }
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v198 + 24))(v198);
  if (!v197) {
    return 0;
  }
LABEL_270:
  uint64_t v199 = v289[4];
  uint64_t v200 = *(void *)(v199 + 640);
  uint64_t v201 = *(unint64_t **)(v199 + 648);
  uint64_t v202 = *(void *)(v289[12] + 8) + 480;
  uint64_t v203 = *(llvm::MachineFunction **)(v200 + 32);
  uint64_t v204 = (unsigned __int8 *)v289[9];
  uint64_t v296 = v204;
  if (v204) {
    llvm::MetadataTracking::track((uint64_t)&v296, v204, 2);
  }
  uint64_t v205 = llvm::MachineFunction::CreateMachineInstr(v203, v202, &v296, 0);
  if (v296)
  {
    int v272 = *v296;
    if ((v272 - 4) > 0x1E)
    {
      if ((v272 - 3) >= 0xFFFFFFFE) {
        uint64_t v281 = v296;
      }
      else {
        uint64_t v281 = 0;
      }
      if ((v272 - 3) < 0xFFFFFFFE)
      {
        int v155 = v283;
        if (v272 == 3) {
          *((void *)v296 + 1) = 0;
        }
        goto LABEL_273;
      }
      unint64_t v274 = (unint64_t)(v281 + 8);
    }
    else
    {
      int v155 = v283;
      if ((v296[1] & 0x7F) != 2 && !*((_DWORD *)v296 + 3)) {
        goto LABEL_273;
      }
      uint64_t v273 = *((void *)v296 + 2);
      if ((v273 & 4) == 0) {
        goto LABEL_273;
      }
      unint64_t v274 = v273 & 0xFFFFFFFFFFFFFFF8;
      if (!v274) {
        goto LABEL_273;
      }
    }
    *(void *)&long long v300 = &v296;
    sub_1CC5FA668(v274 + 16, &v300);
    int v155 = v283;
  }
LABEL_273:
  uint64_t v206 = *(void *)(v200 + 40);
  *((void *)v205 + 3) = v206;
  uint64_t v207 = *(void *)(v206 + 32);
  uint64_t v208 = *((unsigned int *)v205 + 10);
  if (v208)
  {
    uint64_t v248 = *((void *)v205 + 4);
    uint64_t v249 = *(void *)(v207 + 40);
    uint64_t v250 = 32 * v208;
    do
    {
      if (!*(unsigned char *)v248)
      {
        uint64_t v251 = *(unsigned int *)(v248 + 4);
        if ((int)v251 >= 0) {
          unint64_t v252 = (uint64_t *)(*(void *)(v249 + 272) + 8 * v251);
        }
        else {
          unint64_t v252 = (uint64_t *)(*(void *)(v249 + 24) + 16 * (v251 & 0x7FFFFFFF) + 8);
        }
        uint64_t v253 = *v252;
        if (*v252)
        {
          uint64_t v254 = *(void *)(v253 + 16);
          *(void *)(v253 + 16) = v248;
          *(void *)(v248 + 16) = v254;
          if (*(unsigned char *)(v248 + 3))
          {
            *(void *)(v248 + 24) = v253;
          }
          else
          {
            *(void *)(v248 + 24) = 0;
            unint64_t v252 = (uint64_t *)(v254 + 24);
          }
        }
        else
        {
          *(void *)(v248 + 16) = v248;
          *(void *)(v248 + 24) = 0;
        }
        *unint64_t v252 = v248;
      }
      v248 += 32;
      v250 -= 32;
    }
    while (v250);
  }
  uint64_t v209 = *(void *)(v207 + 728);
  if (v209) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v209 + 24))(v209, v205);
  }
  unint64_t v210 = *v201 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v205 = v210 | *(void *)v205 & 7;
  *((void *)v205 + 1) = v201;
  *(void *)(v210 + 8) = v205;
  unint64_t *v201 = *v201 & 7 | (unint64_t)v205;
  *((void *)&v300 + 1) = 0;
  long long v301 = 0uLL;
  LODWORD(v300) = 0x1000000;
  DWORD1(v300) = v197;
  llvm::MachineInstr::addOperand(v205, v203, (const llvm::MachineOperand *)&v300);
  uint64_t v211 = v289[4];
  uint64_t v212 = *(void *)(v211 + 640);
  unint64_t v213 = *(unint64_t **)(v211 + 648);
  uint64_t v214 = *(void *)(v289[12] + 8) + 432;
  int v215 = *(llvm::MachineFunction **)(v212 + 32);
  uint64_t v216 = (unsigned __int8 *)v289[9];
  uint64_t v296 = v216;
  if (v216) {
    llvm::MetadataTracking::track((uint64_t)&v296, v216, 2);
  }
  int v217 = llvm::MachineFunction::CreateMachineInstr(v215, v214, &v296, 0);
  if (!v296) {
    goto LABEL_279;
  }
  int v275 = *v296;
  if ((v275 - 4) > 0x1E)
  {
    if ((v275 - 3) >= 0xFFFFFFFE) {
      uint64_t v282 = v296;
    }
    else {
      uint64_t v282 = 0;
    }
    if ((v275 - 3) < 0xFFFFFFFE)
    {
      int v155 = v283;
      if (v275 == 3) {
        *((void *)v296 + 1) = 0;
      }
      goto LABEL_279;
    }
    unint64_t v277 = (unint64_t)(v282 + 8);
  }
  else
  {
    int v155 = v283;
    if ((v296[1] & 0x7F) != 2 && !*((_DWORD *)v296 + 3)) {
      goto LABEL_279;
    }
    uint64_t v276 = *((void *)v296 + 2);
    if ((v276 & 4) == 0) {
      goto LABEL_279;
    }
    unint64_t v277 = v276 & 0xFFFFFFFFFFFFFFF8;
    if (!v277) {
      goto LABEL_279;
    }
  }
  *(void *)&long long v300 = &v296;
  sub_1CC5FA668(v277 + 16, &v300);
  int v155 = v283;
LABEL_279:
  uint64_t v218 = *(void *)(v212 + 40);
  *((void *)v217 + 3) = v218;
  uint64_t v219 = *(void *)(v218 + 32);
  uint64_t v220 = *((unsigned int *)v217 + 10);
  if (v220)
  {
    uint64_t v255 = *((void *)v217 + 4);
    uint64_t v256 = *(void *)(v219 + 40);
    uint64_t v257 = 32 * v220;
    do
    {
      if (!*(unsigned char *)v255)
      {
        uint64_t v258 = *(unsigned int *)(v255 + 4);
        if ((int)v258 >= 0) {
          uint64_t v259 = (uint64_t *)(*(void *)(v256 + 272) + 8 * v258);
        }
        else {
          uint64_t v259 = (uint64_t *)(*(void *)(v256 + 24) + 16 * (v258 & 0x7FFFFFFF) + 8);
        }
        uint64_t v260 = *v259;
        if (*v259)
        {
          uint64_t v261 = *(void *)(v260 + 16);
          *(void *)(v260 + 16) = v255;
          *(void *)(v255 + 16) = v261;
          if (*(unsigned char *)(v255 + 3))
          {
            *(void *)(v255 + 24) = v260;
          }
          else
          {
            *(void *)(v255 + 24) = 0;
            uint64_t v259 = (uint64_t *)(v261 + 24);
          }
        }
        else
        {
          *(void *)(v255 + 16) = v255;
          *(void *)(v255 + 24) = 0;
        }
        *uint64_t v259 = v255;
      }
      v255 += 32;
      v257 -= 32;
    }
    while (v257);
  }
  uint64_t v221 = *(void *)(v219 + 728);
  if (v221) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v221 + 24))(v221, v217);
  }
  unint64_t v222 = *v213 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v217 = v222 | *(void *)v217 & 7;
  *((void *)v217 + 1) = v213;
  *(void *)(v222 + 8) = v217;
  *unint64_t v213 = *v213 & 7 | (unint64_t)v217;
  *((void *)&v300 + 1) = 0;
  long long v301 = 0uLL;
  LODWORD(v300) = 0x1000000;
  DWORD1(v300) = v155;
  llvm::MachineInstr::addOperand(v217, v215, (const llvm::MachineOperand *)&v300);
  *((void *)&v300 + 1) = 0;
  long long v301 = 0uLL;
  LODWORD(v300) = 0;
  DWORD1(v300) = v197;
  llvm::MachineInstr::addOperand(v217, v215, (const llvm::MachineOperand *)&v300);
  int v223 = 0;
  uint64_t v224 = (_UNKNOWN ***)(*(void *)(*(void *)(v289[6] + 24) + 16 * (v153 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (v224 != &off_1E66A4340 && v224 != &off_1E66A43C8)
  {
    sub_1CD3CB380((uint64_t)v289, v153, 33);
    int v223 = 8448;
  }
  long long v301 = 0uLL;
  long long v300 = __PAIR64__(v153, v223);
  llvm::MachineInstr::addOperand(v217, v215, (const llvm::MachineOperand *)&v300);
  uint64_t v196 = 1;
  LODWORD(v300) = 1;
  *((void *)&v300 + 1) = 0;
  *(void *)&long long v301 = 33;
  llvm::MachineInstr::addOperand(v217, v215, (const llvm::MachineOperand *)&v300);
  return v196;
}

uint64_t sub_1CB86F64C(uint64_t *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1[32] + 280)) {
    return 0;
  }
  int v167 = 0;
  uint64_t v4 = 0;
  if (!sub_1CB85A994((uint64_t)a1, *(void *)a2, &v167)) {
    return v4;
  }
  int v5 = v167;
  if (v167 == 8) {
    return 0;
  }
  if (v167 == 16)
  {
    BOOL v6 = *(unsigned __int8 **)(a2 - 32);
    if (v6[16] - 11 < 2) {
      return 0;
    }
LABEL_6:
    unsigned int v7 = v167 / 8 - 1;
    goto LABEL_7;
  }
  uint64_t v4 = 0;
  if (v167 > 512 || (v167 & 0x1F) != 0) {
    return v4;
  }
  BOOL v6 = *(unsigned __int8 **)(a2 - 32);
  if (v6[16] - 11 < 2) {
    return 0;
  }
  if (v167 <= 31) {
    goto LABEL_6;
  }
  unsigned int v7 = (v167 >> 5) + 1;
LABEL_7:
  uint64_t v8 = (char *)&unk_1E66A38C8 + 16 * v7;
  unsigned int v9 = *(_DWORD *)v8;
  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = a1[6];
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v11, "", 0);
  *(void *)(*(void *)(v11 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4990;
  uint64_t v13 = *(void *)(v11 + 8);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
    if (!IncompleteVirtualRegister) {
      return 0;
    }
  }
  else if (!IncompleteVirtualRegister)
  {
    return 0;
  }
  int v14 = sub_1CB87DFFC(a1, (unsigned __int8 *)a2);
  if (!v14) {
    return 0;
  }
  int v15 = v14;
  uint64_t v16 = a1[6];
  if (v5 > 32
    || v5 == 16
    || (int v17 = v14,
        (_UNKNOWN ***)(*(void *)(*(void *)(v16 + 24) + 16 * (v14 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != &off_1E66A43C8))
  {
    int v17 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1[6], "", 0);
    *(void *)(*(void *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF)) = v10 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v18 = *(void *)(v16 + 8);
    if (v18)
    {
      (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
      if (!v17) {
        return 0;
      }
    }
    else if (!v17)
    {
      return 0;
    }
  }
  int v19 = sub_1CB87DFFC(a1, v6);
  if (!v19) {
    return 0;
  }
  int v20 = v19;
  uint64_t v21 = a1[6];
  int v22 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v21, "", 0);
  *(void *)(*(void *)(v21 + 24) + 16 * (v22 & 0x7FFFFFFF)) = &off_1E66A43C8;
  uint64_t v23 = *(void *)(v21 + 8);
  if (v23)
  {
    int v100 = v22;
    (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
    int v22 = v100;
    if (!v100) {
      return 0;
    }
  }
  else if (!v22)
  {
    return 0;
  }
  int v161 = v22;
  int v163 = v17;
  uint64_t v24 = a1[6];
  int v25 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v24, "", 0);
  *(void *)(*(void *)(v24 + 24) + 16 * (v25 & 0x7FFFFFFF)) = &off_1E66A43C8;
  uint64_t v26 = *(void *)(v24 + 8);
  if (!v26)
  {
    if (v25) {
      goto LABEL_20;
    }
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
  if (!v25) {
    return 0;
  }
LABEL_20:
  uint64_t v27 = a1[4];
  uint64_t v28 = *(unint64_t **)(v27 + 648);
  uint64_t v29 = *(void *)(a1[12] + 8) + 912;
  uint64_t v30 = *(void *)(v27 + 640);
  int64_t v31 = *(llvm::MachineFunction **)(v30 + 32);
  uint64_t v32 = (unsigned __int8 *)a1[9];
  unint64_t v168 = v32;
  uint64_t v156 = v28;
  int v158 = v31;
  if (v32)
  {
    llvm::MetadataTracking::track((uint64_t)&v168, v32, 2);
    int64_t v31 = v158;
  }
  unint64_t v33 = llvm::MachineFunction::CreateMachineInstr(v31, v29, &v168, 0);
  if (v168)
  {
    int v136 = *v168;
    if ((v136 - 4) > 0x1E)
    {
      if ((v136 - 3) >= 0xFFFFFFFE) {
        unint64_t v148 = v168;
      }
      else {
        unint64_t v148 = 0;
      }
      if ((v136 - 3) < 0xFFFFFFFE)
      {
        if (v136 == 3) {
          *((void *)v168 + 1) = 0;
        }
        goto LABEL_23;
      }
      unint64_t v138 = (unint64_t)(v148 + 8);
    }
    else
    {
      if ((v168[1] & 0x7F) != 2 && !*((_DWORD *)v168 + 3)) {
        goto LABEL_23;
      }
      uint64_t v137 = *((void *)v168 + 2);
      if ((v137 & 4) == 0) {
        goto LABEL_23;
      }
      unint64_t v138 = v137 & 0xFFFFFFFFFFFFFFF8;
      if (!v138) {
        goto LABEL_23;
      }
    }
    *(void *)&long long v169 = &v168;
    sub_1CC5FA668(v138 + 16, &v169);
  }
LABEL_23:
  uint64_t v34 = *(void *)(v30 + 40);
  *((void *)v33 + 3) = v34;
  uint64_t v35 = *(void *)(v34 + 32);
  uint64_t v36 = *((unsigned int *)v33 + 10);
  if (v36)
  {
    uint64_t v101 = *((void *)v33 + 4);
    uint64_t v102 = *(void *)(v35 + 40);
    uint64_t v103 = 32 * v36;
    do
    {
      if (!*(unsigned char *)v101)
      {
        uint64_t v104 = *(unsigned int *)(v101 + 4);
        if ((int)v104 >= 0) {
          unint64_t v105 = (uint64_t *)(*(void *)(v102 + 272) + 8 * v104);
        }
        else {
          unint64_t v105 = (uint64_t *)(*(void *)(v102 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8);
        }
        uint64_t v106 = *v105;
        if (*v105)
        {
          uint64_t v107 = *(void *)(v106 + 16);
          *(void *)(v106 + 16) = v101;
          *(void *)(v101 + 16) = v107;
          if (*(unsigned char *)(v101 + 3))
          {
            *(void *)(v101 + 24) = v106;
          }
          else
          {
            *(void *)(v101 + 24) = 0;
            unint64_t v105 = (uint64_t *)(v107 + 24);
          }
        }
        else
        {
          *(void *)(v101 + 16) = v101;
          *(void *)(v101 + 24) = 0;
        }
        *unint64_t v105 = v101;
      }
      v101 += 32;
      v103 -= 32;
    }
    while (v103);
  }
  uint64_t v37 = *(void *)(v35 + 728);
  if (v37) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v37 + 24))(v37, v33);
  }
  unint64_t v38 = *v156 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v33 = v38 | *(void *)v33 & 7;
  *((void *)v33 + 1) = v156;
  *(void *)(v38 + 8) = v33;
  *uint64_t v156 = *v156 & 7 | (unint64_t)v33;
  *((void *)&v169 + 1) = 0;
  long long v170 = 0uLL;
  LODWORD(v169) = 0x1000000;
  DWORD1(v169) = v25;
  llvm::MachineInstr::addOperand(v33, v158, (const llvm::MachineOperand *)&v169);
  *((void *)&v169 + 1) = 0;
  long long v170 = 0uLL;
  LODWORD(v169) = 0;
  DWORD1(v169) = v20;
  llvm::MachineInstr::addOperand(v33, v158, (const llvm::MachineOperand *)&v169);
  uint64_t v39 = a1[4];
  char v40 = *(unint64_t **)(v39 + 648);
  uint64_t v41 = *(void *)(a1[12] + 8) + 912;
  uint64_t v42 = *(void *)(v39 + 640);
  unsigned int v43 = *(llvm::MachineFunction **)(v42 + 32);
  unsigned int v44 = (unsigned __int8 *)a1[9];
  unint64_t v168 = v44;
  uint64_t v157 = v40;
  uint64_t v159 = v43;
  if (v44)
  {
    llvm::MetadataTracking::track((uint64_t)&v168, v44, 2);
    unsigned int v43 = v159;
  }
  BOOL v45 = llvm::MachineFunction::CreateMachineInstr(v43, v41, &v168, 0);
  if (v168)
  {
    int v139 = *v168;
    if ((v139 - 4) > 0x1E)
    {
      if ((v139 - 3) >= 0xFFFFFFFE) {
        uint64_t v149 = v168;
      }
      else {
        uint64_t v149 = 0;
      }
      if ((v139 - 3) < 0xFFFFFFFE)
      {
        if (v139 == 3) {
          *((void *)v168 + 1) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v141 = (unint64_t)(v149 + 8);
    }
    else
    {
      if ((v168[1] & 0x7F) != 2 && !*((_DWORD *)v168 + 3)) {
        goto LABEL_29;
      }
      uint64_t v140 = *((void *)v168 + 2);
      if ((v140 & 4) == 0) {
        goto LABEL_29;
      }
      unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFF8;
      if (!v141) {
        goto LABEL_29;
      }
    }
    *(void *)&long long v169 = &v168;
    sub_1CC5FA668(v141 + 16, &v169);
  }
LABEL_29:
  uint64_t v46 = *(void *)(v42 + 40);
  *((void *)v45 + 3) = v46;
  uint64_t v47 = *(void *)(v46 + 32);
  uint64_t v48 = *((unsigned int *)v45 + 10);
  if (v48)
  {
    uint64_t v108 = *((void *)v45 + 4);
    uint64_t v109 = *(void *)(v47 + 40);
    uint64_t v110 = 32 * v48;
    do
    {
      if (!*(unsigned char *)v108)
      {
        uint64_t v111 = *(unsigned int *)(v108 + 4);
        if ((int)v111 >= 0) {
          uint64_t v112 = (uint64_t *)(*(void *)(v109 + 272) + 8 * v111);
        }
        else {
          uint64_t v112 = (uint64_t *)(*(void *)(v109 + 24) + 16 * (v111 & 0x7FFFFFFF) + 8);
        }
        uint64_t v113 = *v112;
        if (*v112)
        {
          uint64_t v114 = *(void *)(v113 + 16);
          *(void *)(v113 + 16) = v108;
          *(void *)(v108 + 16) = v114;
          if (*(unsigned char *)(v108 + 3))
          {
            *(void *)(v108 + 24) = v113;
          }
          else
          {
            *(void *)(v108 + 24) = 0;
            uint64_t v112 = (uint64_t *)(v114 + 24);
          }
        }
        else
        {
          *(void *)(v108 + 16) = v108;
          *(void *)(v108 + 24) = 0;
        }
        *uint64_t v112 = v108;
      }
      v108 += 32;
      v110 -= 32;
    }
    while (v110);
  }
  uint64_t v49 = *(void *)(v47 + 728);
  if (v49) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v49 + 24))(v49, v45);
  }
  unint64_t v50 = *v157 & 0xFFFFFFFFFFFFFFF8;
  *(void *)BOOL v45 = v50 | *(void *)v45 & 7;
  *((void *)v45 + 1) = v157;
  *(void *)(v50 + 8) = v45;
  *uint64_t v157 = *v157 & 7 | (unint64_t)v45;
  *((void *)&v169 + 1) = 0;
  long long v170 = 0uLL;
  LODWORD(v169) = 0x1000000;
  DWORD1(v169) = v161;
  llvm::MachineInstr::addOperand(v45, v159, (const llvm::MachineOperand *)&v169);
  HIDWORD(v169) = 0;
  long long v170 = 0uLL;
  LODWORD(v169) = 0;
  *(void *)((char *)&v169 + 4) = (v20 + 1);
  llvm::MachineInstr::addOperand(v45, v159, (const llvm::MachineOperand *)&v169);
  uint64_t v51 = a1[4];
  BOOL v52 = *(unint64_t **)(v51 + 648);
  uint64_t v53 = *(void *)(a1[12] + 8) + 864;
  uint64_t v160 = *(void *)(v51 + 640);
  unint64_t v54 = *(llvm::MachineFunction **)(v160 + 32);
  int v55 = (unsigned __int8 *)a1[9];
  unint64_t v168 = v55;
  if (v55) {
    llvm::MetadataTracking::track((uint64_t)&v168, v55, 2);
  }
  int v56 = llvm::MachineFunction::CreateMachineInstr(v54, v53, &v168, 0);
  if (v168)
  {
    int v142 = *v168;
    if ((v142 - 4) > 0x1E)
    {
      if ((v142 - 3) >= 0xFFFFFFFE) {
        unint64_t v150 = v168;
      }
      else {
        unint64_t v150 = 0;
      }
      if ((v142 - 3) < 0xFFFFFFFE)
      {
        if (v142 == 3) {
          *((void *)v168 + 1) = 0;
        }
        goto LABEL_35;
      }
      unint64_t v144 = (unint64_t)(v150 + 8);
    }
    else
    {
      if ((v168[1] & 0x7F) != 2 && !*((_DWORD *)v168 + 3)) {
        goto LABEL_35;
      }
      uint64_t v143 = *((void *)v168 + 2);
      if ((v143 & 4) == 0) {
        goto LABEL_35;
      }
      unint64_t v144 = v143 & 0xFFFFFFFFFFFFFFF8;
      if (!v144) {
        goto LABEL_35;
      }
    }
    *(void *)&long long v169 = &v168;
    sub_1CC5FA668(v144 + 16, &v169);
  }
LABEL_35:
  uint64_t v57 = *(void *)(v160 + 40);
  *((void *)v56 + 3) = v57;
  uint64_t v58 = *(void *)(v57 + 32);
  uint64_t v59 = *((unsigned int *)v56 + 10);
  if (v59)
  {
    uint64_t v115 = *((void *)v56 + 4);
    uint64_t v116 = *(void *)(v58 + 40);
    uint64_t v117 = 32 * v59;
    do
    {
      if (!*(unsigned char *)v115)
      {
        uint64_t v118 = *(unsigned int *)(v115 + 4);
        if ((int)v118 >= 0) {
          uint64_t v119 = (uint64_t *)(*(void *)(v116 + 272) + 8 * v118);
        }
        else {
          uint64_t v119 = (uint64_t *)(*(void *)(v116 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
        }
        uint64_t v120 = *v119;
        if (*v119)
        {
          uint64_t v121 = *(void *)(v120 + 16);
          *(void *)(v120 + 16) = v115;
          *(void *)(v115 + 16) = v121;
          if (*(unsigned char *)(v115 + 3))
          {
            *(void *)(v115 + 24) = v120;
          }
          else
          {
            *(void *)(v115 + 24) = 0;
            uint64_t v119 = (uint64_t *)(v121 + 24);
          }
        }
        else
        {
          *(void *)(v115 + 16) = v115;
          *(void *)(v115 + 24) = 0;
        }
        uint64_t *v119 = v115;
      }
      v115 += 32;
      v117 -= 32;
    }
    while (v117);
  }
  uint64_t v60 = *(void *)(v58 + 728);
  if (v60) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v60 + 24))(v60, v56);
  }
  unint64_t v61 = *v52 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v56 = v61 | *(void *)v56 & 7;
  *((void *)v56 + 1) = v52;
  *(void *)(v61 + 8) = v56;
  unint64_t *v52 = *v52 & 7 | (unint64_t)v56;
  *((void *)&v169 + 1) = 0;
  long long v170 = 0uLL;
  LODWORD(v169) = 0x1000000;
  DWORD1(v169) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v169);
  *((void *)&v169 + 1) = 0;
  long long v170 = 0uLL;
  LODWORD(v169) = 0;
  DWORD1(v169) = v25;
  llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v169);
  LODWORD(v169) = 1;
  *((void *)&v169 + 1) = 0;
  *(void *)&long long v170 = 33;
  llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v169);
  *((void *)&v169 + 1) = 0;
  long long v170 = 0uLL;
  LODWORD(v169) = 0;
  DWORD1(v169) = v161;
  llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v169);
  LODWORD(v169) = 1;
  *((void *)&v169 + 1) = 0;
  *(void *)&long long v170 = 34;
  llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v169);
  uint64_t v162 = *(void *)(*(void *)(a2 + 40) + 56);
  uint64_t v62 = a1[4];
  uint64_t v63 = *(void *)(v62 + 640);
  uint64_t v64 = *(unint64_t **)(v62 + 648);
  uint64_t v65 = *(void *)(a1[12] + 8) + 48 * v9;
  uint64_t v66 = *(llvm::MachineFunction **)(v63 + 32);
  long long v67 = (unsigned __int8 *)a1[9];
  unint64_t v168 = v67;
  if (v67) {
    llvm::MetadataTracking::track((uint64_t)&v168, v67, 2);
  }
  int v68 = llvm::MachineFunction::CreateMachineInstr(v66, v65, &v168, 0);
  if (v168)
  {
    int v145 = *v168;
    if ((v145 - 4) > 0x1E)
    {
      if ((v145 - 3) >= 0xFFFFFFFE) {
        unsigned int v151 = v168;
      }
      else {
        unsigned int v151 = 0;
      }
      if ((v145 - 3) < 0xFFFFFFFE)
      {
        if (v145 == 3) {
          *((void *)v168 + 1) = 0;
        }
        goto LABEL_41;
      }
      unint64_t v147 = (unint64_t)(v151 + 8);
    }
    else
    {
      if ((v168[1] & 0x7F) != 2 && !*((_DWORD *)v168 + 3)) {
        goto LABEL_41;
      }
      uint64_t v146 = *((void *)v168 + 2);
      if ((v146 & 4) == 0) {
        goto LABEL_41;
      }
      unint64_t v147 = v146 & 0xFFFFFFFFFFFFFFF8;
      if (!v147) {
        goto LABEL_41;
      }
    }
    *(void *)&long long v169 = &v168;
    sub_1CC5FA668(v147 + 16, &v169);
  }
LABEL_41:
  uint64_t v69 = *(void *)(v63 + 40);
  *((void *)v68 + 3) = v69;
  uint64_t v70 = *(void *)(v69 + 32);
  uint64_t v71 = *((unsigned int *)v68 + 10);
  if (v71)
  {
    uint64_t v122 = *((void *)v68 + 4);
    uint64_t v123 = *(void *)(v70 + 40);
    uint64_t v124 = 32 * v71;
    do
    {
      if (!*(unsigned char *)v122)
      {
        uint64_t v125 = *(unsigned int *)(v122 + 4);
        if ((int)v125 >= 0) {
          uint64_t v126 = (uint64_t *)(*(void *)(v123 + 272) + 8 * v125);
        }
        else {
          uint64_t v126 = (uint64_t *)(*(void *)(v123 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
        }
        uint64_t v127 = *v126;
        if (*v126)
        {
          uint64_t v128 = *(void *)(v127 + 16);
          *(void *)(v127 + 16) = v122;
          *(void *)(v122 + 16) = v128;
          if (*(unsigned char *)(v122 + 3))
          {
            *(void *)(v122 + 24) = v127;
          }
          else
          {
            *(void *)(v122 + 24) = 0;
            uint64_t v126 = (uint64_t *)(v128 + 24);
          }
        }
        else
        {
          *(void *)(v122 + 16) = v122;
          *(void *)(v122 + 24) = 0;
        }
        uint64_t *v126 = v122;
      }
      v122 += 32;
      v124 -= 32;
    }
    while (v124);
  }
  uint64_t v72 = *(void *)(v70 + 728);
  if (v72) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v72 + 24))(v72, v68);
  }
  unint64_t v73 = *v64 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v68 = v73 | *(void *)v68 & 7;
  *((void *)v68 + 1) = v64;
  *(void *)(v73 + 8) = v68;
  *uint64_t v64 = *v64 & 7 | (unint64_t)v68;
  *((void *)&v169 + 1) = 0;
  long long v170 = 0uLL;
  LODWORD(v169) = 0x1000000;
  DWORD1(v169) = v163;
  llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v169);
  *((void *)&v169 + 1) = 0;
  long long v170 = 0uLL;
  LODWORD(v169) = 0;
  DWORD1(v169) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v169);
  uint64_t v74 = a1[32];
  LODWORD(v169) = 0;
  BOOL v75 = sub_1CD3CA314(v74, v162, "LoadCMode", &v169);
  uint64_t v76 = v169;
  LODWORD(v169) = 1;
  if (!v75) {
    uint64_t v76 = 0;
  }
  *((void *)&v169 + 1) = 0;
  *(void *)&long long v170 = v76;
  llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v169);
  uint64_t v77 = a1[32];
  LODWORD(v169) = 0;
  BOOL v78 = sub_1CD3CA314(v77, v162, "LoadSLCMode", &v169);
  uint64_t v79 = v169;
  if (!v78) {
    uint64_t v79 = 1;
  }
  LODWORD(v169) = 1;
  *((void *)&v169 + 1) = 0;
  *(void *)&long long v170 = v79;
  llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v169);
  LODWORD(v169) = 1;
  *((void *)&v169 + 1) = 0;
  *(void *)&long long v170 = 0;
  llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v169);
  LODWORD(v169) = 1;
  *((void *)&v169 + 1) = 0;
  *(void *)&long long v170 = 0;
  llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v169);
  long long v169 = 0u;
  long long v170 = 0u;
  llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v169);
  unsigned int v80 = *(_DWORD *)(*(void *)v6 + 8);
  if ((v80 & 0xFE) == 0x12) {
    unsigned int v80 = *(_DWORD *)(**(void **)(*(void *)v6 + 16) + 8);
  }
  int v81 = *(llvm::MachineFunction **)(*((void *)v68 + 3) + 32);
  v164[0] = (unint64_t)v6 & 0xFFFFFFFFFFFFFFFBLL;
  v164[1] = 0;
  unsigned int v165 = v80 >> 8;
  char v166 = 0;
  unsigned int v82 = v167;
  int v83 = v167 + 7;
  if (v167 >= 0) {
    int v83 = v167;
  }
  uint64_t v84 = (uint64_t)v83 >> 3;
  unint64_t v85 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, &v169);
  uint64_t v4 = 1;
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v81, (uint64_t)v164, 1, v84, v85, &v169, 0, 1, 0, 0, 0);
  llvm::MachineInstr::addMemOperand(v68, v81, MachineMemOperand);
  if (v163 != v15)
  {
    if (v82 != 16)
    {
      sub_1CB85D99C(a1, v15, v163, v82);
      return v4;
    }
    uint64_t v87 = a1[4];
    uint64_t v88 = *(void *)(v87 + 640);
    uint64_t v89 = *(unint64_t **)(v87 + 648);
    uint64_t v90 = *(void *)(a1[12] + 8) + 912;
    uint64_t v91 = *(llvm::MachineFunction **)(v88 + 32);
    uint64_t v92 = (unsigned __int8 *)a1[9];
    unint64_t v168 = v92;
    if (v92) {
      llvm::MetadataTracking::track((uint64_t)&v168, v92, 2);
    }
    uint64_t v93 = llvm::MachineFunction::CreateMachineInstr(v91, v90, &v168, 0);
    if (!v168) {
      goto LABEL_57;
    }
    int v152 = *v168;
    if ((v152 - 4) > 0x1E)
    {
      if ((v152 - 3) >= 0xFFFFFFFE) {
        int v155 = v168;
      }
      else {
        int v155 = 0;
      }
      if ((v152 - 3) < 0xFFFFFFFE)
      {
        if (v152 == 3) {
          *((void *)v168 + 1) = 0;
        }
        goto LABEL_57;
      }
      unint64_t v154 = (unint64_t)(v155 + 8);
    }
    else
    {
      if ((v168[1] & 0x7F) != 2 && !*((_DWORD *)v168 + 3)) {
        goto LABEL_57;
      }
      uint64_t v153 = *((void *)v168 + 2);
      if ((v153 & 4) == 0) {
        goto LABEL_57;
      }
      unint64_t v154 = v153 & 0xFFFFFFFFFFFFFFF8;
      if (!v154) {
        goto LABEL_57;
      }
    }
    *(void *)&long long v169 = &v168;
    sub_1CC5FA668(v154 + 16, &v169);
LABEL_57:
    uint64_t v94 = *(void *)(v88 + 40);
    *((void *)v93 + 3) = v94;
    uint64_t v95 = *(void *)(v94 + 32);
    uint64_t v96 = *((unsigned int *)v93 + 10);
    if (v96)
    {
      uint64_t v129 = *((void *)v93 + 4);
      uint64_t v130 = *(void *)(v95 + 40);
      uint64_t v131 = 32 * v96;
      do
      {
        if (!*(unsigned char *)v129)
        {
          uint64_t v132 = *(unsigned int *)(v129 + 4);
          if ((int)v132 >= 0) {
            uint64_t v133 = (uint64_t *)(*(void *)(v130 + 272) + 8 * v132);
          }
          else {
            uint64_t v133 = (uint64_t *)(*(void *)(v130 + 24) + 16 * (v132 & 0x7FFFFFFF) + 8);
          }
          uint64_t v134 = *v133;
          if (*v133)
          {
            uint64_t v135 = *(void *)(v134 + 16);
            *(void *)(v134 + 16) = v129;
            *(void *)(v129 + 16) = v135;
            if (*(unsigned char *)(v129 + 3))
            {
              *(void *)(v129 + 24) = v134;
            }
            else
            {
              *(void *)(v129 + 24) = 0;
              uint64_t v133 = (uint64_t *)(v135 + 24);
            }
          }
          else
          {
            *(void *)(v129 + 16) = v129;
            *(void *)(v129 + 24) = 0;
          }
          *uint64_t v133 = v129;
        }
        v129 += 32;
        v131 -= 32;
      }
      while (v131);
    }
    uint64_t v97 = *(void *)(v95 + 728);
    if (v97) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v97 + 24))(v97, v93);
    }
    unint64_t v98 = *v89 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v93 = v98 | *(void *)v93 & 7;
    *((void *)v93 + 1) = v89;
    *(void *)(v98 + 8) = v93;
    *uint64_t v89 = *v89 & 7 | (unint64_t)v93;
    *((void *)&v169 + 1) = 0;
    long long v170 = 0uLL;
    LODWORD(v169) = 0x1000000;
    DWORD1(v169) = v15;
    llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v169);
    *((void *)&v169 + 1) = 0;
    long long v170 = 0uLL;
    LODWORD(v169) = 256;
    DWORD1(v169) = v163;
    llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v169);
    return 1;
  }
  return v4;
}

uint64_t sub_1CB870594(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1[32] + 280);
  uint64_t v5 = *(void *)a2;
  unsigned int v186 = 0;
  if (!sub_1CB85A994((uint64_t)a1, v5, (int *)&v186)) {
    goto LABEL_69;
  }
  unint64_t v6 = v186;
  BOOL v7 = v186 > 0x30 || ((1 << v186) & 0x1000000010100) == 0;
  if (v7 && ((int)v186 > 512 || (v186 & 0x1F) != 0)) {
    goto LABEL_69;
  }
  int v8 = sub_1CB87DFFC(a1, (unsigned __int8 *)a2);
  if (!v8) {
    goto LABEL_69;
  }
  int v12 = v8;
  uint64_t v13 = *(void *)(a2 - 32);
  int v184 = 0;
  int v185 = 0;
  if (!sub_1CB85A548((uint64_t)a1, v13, &v184, &v185, v9, v10, v11)) {
    goto LABEL_69;
  }
  if ((int)v6 > 31)
  {
    if (v6 > 0x3F)
    {
      uint64_t v14 = (v6 >> 5) + 2;
      unsigned int v16 = *((_DWORD *)&unk_1E66A35E8 + 4 * v14 + v4);
      goto LABEL_21;
    }
    LODWORD(v14) = v6 >> 4;
  }
  else
  {
    LODWORD(v14) = (int)v6 / 8 - 1;
  }
  unsigned int v16 = *((_DWORD *)&unk_1E66A35E8 + 4 * v14 + v4);
  uint64_t v14 = v14;
  if ((int)v6 <= 32)
  {
    int IncompleteVirtualRegister = v12;
    if (v6 != 16) {
      goto LABEL_23;
    }
  }
LABEL_21:
  uint64_t v18 = *((void *)&unk_1E66A35E8 + 2 * v14 + 1);
  uint64_t v19 = a1[6];
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v19, "", 0);
  *(void *)(*(void *)(v19 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v18 & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v20 = *(void *)(v19 + 8);
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
    if (!IncompleteVirtualRegister) {
      goto LABEL_69;
    }
LABEL_23:
    uint64_t v179 = *(void *)(*(void *)(a2 + 40) + 56);
    uint64_t v21 = a1[4];
    uint64_t v22 = *(void *)(v21 + 640);
    uint64_t v23 = *(unint64_t **)(v21 + 648);
    uint64_t v24 = *(void *)(a1[12] + 8) + 48 * v16;
    int v25 = *(llvm::MachineFunction **)(v22 + 32);
    uint64_t v26 = (unsigned __int8 *)a1[9];
    uint64_t v187 = v26;
    if (v26) {
      llvm::MetadataTracking::track((uint64_t)&v187, v26, 2);
    }
    uint64_t v27 = llvm::MachineFunction::CreateMachineInstr(v25, v24, &v187, 0);
    if (!v187) {
      goto LABEL_26;
    }
    int v161 = *v187;
    if ((v161 - 4) > 0x1E)
    {
      if ((v161 - 3) >= 0xFFFFFFFE) {
        uint64_t v164 = v187;
      }
      else {
        uint64_t v164 = 0;
      }
      if ((v161 - 3) < 0xFFFFFFFE)
      {
        if (v161 == 3) {
          *((void *)v187 + 1) = 0;
        }
        goto LABEL_26;
      }
      unint64_t v163 = (unint64_t)(v164 + 8);
    }
    else
    {
      if ((v187[1] & 0x7F) != 2 && !*((_DWORD *)v187 + 3)) {
        goto LABEL_26;
      }
      uint64_t v162 = *((void *)v187 + 2);
      if ((v162 & 4) == 0) {
        goto LABEL_26;
      }
      unint64_t v163 = v162 & 0xFFFFFFFFFFFFFFF8;
      if (!v163) {
        goto LABEL_26;
      }
    }
    *(void *)&long long v188 = &v187;
    sub_1CC5FA668(v163 + 16, &v188);
LABEL_26:
    uint64_t v28 = *(void *)(v22 + 40);
    *((void *)v27 + 3) = v28;
    uint64_t v29 = *(void *)(v28 + 32);
    uint64_t v30 = *((unsigned int *)v27 + 10);
    if (v30)
    {
      uint64_t v55 = *((void *)v27 + 4);
      uint64_t v56 = *(void *)(v29 + 40);
      uint64_t v57 = 32 * v30;
      do
      {
        if (!*(unsigned char *)v55)
        {
          uint64_t v58 = *(unsigned int *)(v55 + 4);
          if ((int)v58 >= 0) {
            uint64_t v59 = (uint64_t *)(*(void *)(v56 + 272) + 8 * v58);
          }
          else {
            uint64_t v59 = (uint64_t *)(*(void *)(v56 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
          }
          uint64_t v60 = *v59;
          if (*v59)
          {
            uint64_t v61 = *(void *)(v60 + 16);
            *(void *)(v60 + 16) = v55;
            *(void *)(v55 + 16) = v61;
            if (*(unsigned char *)(v55 + 3))
            {
              *(void *)(v55 + 24) = v60;
            }
            else
            {
              *(void *)(v55 + 24) = 0;
              uint64_t v59 = (uint64_t *)(v61 + 24);
            }
          }
          else
          {
            *(void *)(v55 + 16) = v55;
            *(void *)(v55 + 24) = 0;
          }
          *uint64_t v59 = v55;
        }
        v55 += 32;
        v57 -= 32;
      }
      while (v57);
    }
    uint64_t v31 = *(void *)(v29 + 728);
    if (v31) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v31 + 24))(v31, v27);
    }
    unint64_t v32 = *v23 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v27 = v32 | *(void *)v27 & 7;
    *((void *)v27 + 1) = v23;
    *(void *)(v32 + 8) = v27;
    *uint64_t v23 = *v23 & 7 | (unint64_t)v27;
    *((void *)&v188 + 1) = 0;
    long long v189 = 0uLL;
    LODWORD(v188) = 0x1000000;
    DWORD1(v188) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
    LODWORD(v188) = 5;
    *((void *)&v188 + 1) = 0;
    LODWORD(v189) = v184;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
    LODWORD(v188) = 1;
    *((void *)&v188 + 1) = 0;
    *(void *)&long long v189 = v185;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
    unint64_t v33 = (unsigned char *)a1[32];
    if (v4)
    {
      LODWORD(v188) = 0;
      BOOL v50 = sub_1CD3CA314((int)v33, v179, "LoadCMode", &v188);
      uint64_t v51 = v188;
      if (!v50) {
        uint64_t v51 = 0;
      }
      LODWORD(v188) = 1;
      *((void *)&v188 + 1) = 0;
      *(void *)&long long v189 = v51;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
      uint64_t v52 = a1[32];
      LODWORD(v188) = 0;
      BOOL v53 = sub_1CD3CA314(v52, v179, "LoadSLCMode", &v188);
      uint64_t v54 = v188;
      if (!v53) {
        uint64_t v54 = 1;
      }
      LODWORD(v188) = 1;
      *((void *)&v188 + 1) = 0;
      *(void *)&long long v189 = v54;
    }
    else
    {
      if (v33[310])
      {
        uint64_t v34 = 1;
      }
      else if (v33[311])
      {
        uint64_t v34 = 2;
      }
      else
      {
        uint64_t v34 = 3;
        if (!v33[312]) {
          uint64_t v34 = 0;
        }
      }
      LODWORD(v188) = 1;
      *((void *)&v188 + 1) = 0;
      *(void *)&long long v189 = v34;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
      LODWORD(v188) = 1;
      *((void *)&v188 + 1) = 0;
      *(void *)&long long v189 = 0;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
      LODWORD(v188) = 1;
      *((void *)&v188 + 1) = 0;
      *(void *)&long long v189 = 0;
    }
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
    LODWORD(v188) = 1;
    *((void *)&v188 + 1) = 0;
    *(void *)&long long v189 = 0;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
    LODWORD(v188) = 1;
    *((void *)&v188 + 1) = 0;
    *(void *)&long long v189 = 0;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
    long long v188 = 0u;
    long long v189 = 0u;
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v188);
    if (IncompleteVirtualRegister == v12) {
      return 1;
    }
    if (v6 == 16)
    {
      uint64_t v35 = a1[4];
      uint64_t v36 = *(void *)(v35 + 640);
      uint64_t v37 = *(unint64_t **)(v35 + 648);
      uint64_t v38 = *(void *)(a1[12] + 8) + 912;
      uint64_t v39 = *(llvm::MachineFunction **)(v36 + 32);
      char v40 = (unsigned __int8 *)a1[9];
      uint64_t v187 = v40;
      if (v40) {
        llvm::MetadataTracking::track((uint64_t)&v187, v40, 2);
      }
      uint64_t v41 = llvm::MachineFunction::CreateMachineInstr(v39, v38, &v187, 0);
      if (!v187) {
        goto LABEL_42;
      }
      int v165 = *v187;
      if ((v165 - 4) > 0x1E)
      {
        if ((v165 - 3) >= 0xFFFFFFFE) {
          uint64_t v171 = v187;
        }
        else {
          uint64_t v171 = 0;
        }
        if ((v165 - 3) < 0xFFFFFFFE)
        {
          if (v165 == 3) {
            *((void *)v187 + 1) = 0;
          }
          goto LABEL_42;
        }
        unint64_t v167 = (unint64_t)(v171 + 8);
      }
      else
      {
        if ((v187[1] & 0x7F) != 2 && !*((_DWORD *)v187 + 3)) {
          goto LABEL_42;
        }
        uint64_t v166 = *((void *)v187 + 2);
        if ((v166 & 4) == 0) {
          goto LABEL_42;
        }
        unint64_t v167 = v166 & 0xFFFFFFFFFFFFFFF8;
        if (!v167) {
          goto LABEL_42;
        }
      }
      *(void *)&long long v188 = &v187;
      sub_1CC5FA668(v167 + 16, &v188);
LABEL_42:
      uint64_t v42 = *(void *)(v36 + 40);
      *((void *)v41 + 3) = v42;
      uint64_t v43 = *(void *)(v42 + 32);
      uint64_t v44 = *((unsigned int *)v41 + 10);
      if (v44)
      {
        uint64_t v132 = *((void *)v41 + 4);
        uint64_t v133 = *(void *)(v43 + 40);
        uint64_t v134 = 32 * v44;
        do
        {
          if (!*(unsigned char *)v132)
          {
            uint64_t v135 = *(unsigned int *)(v132 + 4);
            if ((int)v135 >= 0) {
              int v136 = (uint64_t *)(*(void *)(v133 + 272) + 8 * v135);
            }
            else {
              int v136 = (uint64_t *)(*(void *)(v133 + 24) + 16 * (v135 & 0x7FFFFFFF) + 8);
            }
            uint64_t v137 = *v136;
            if (*v136)
            {
              uint64_t v138 = *(void *)(v137 + 16);
              *(void *)(v137 + 16) = v132;
              *(void *)(v132 + 16) = v138;
              if (*(unsigned char *)(v132 + 3))
              {
                *(void *)(v132 + 24) = v137;
              }
              else
              {
                *(void *)(v132 + 24) = 0;
                int v136 = (uint64_t *)(v138 + 24);
              }
            }
            else
            {
              *(void *)(v132 + 16) = v132;
              *(void *)(v132 + 24) = 0;
            }
            *int v136 = v132;
          }
          v132 += 32;
          v134 -= 32;
        }
        while (v134);
      }
      uint64_t v45 = *(void *)(v43 + 728);
      if (v45) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v45 + 24))(v45, v41);
      }
      unint64_t v46 = *v37 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v41 = v46 | *(void *)v41 & 7;
      *((void *)v41 + 1) = v37;
      *(void *)(v46 + 8) = v41;
      *uint64_t v37 = *v37 & 7 | (unint64_t)v41;
      *((void *)&v188 + 1) = 0;
      long long v189 = 0uLL;
      LODWORD(v188) = 0x1000000;
      DWORD1(v188) = v12;
      llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v188);
      *((void *)&v188 + 1) = 0;
      long long v189 = 0uLL;
      DWORD1(v188) = IncompleteVirtualRegister;
LABEL_46:
      LODWORD(v188) = 256;
      llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v188);
      return 1;
    }
    uint64_t v47 = a1;
    int v48 = v12;
LABEL_48:
    sub_1CB85D99C(v47, v48, IncompleteVirtualRegister, v6);
    return 1;
  }
  if (IncompleteVirtualRegister) {
    goto LABEL_23;
  }
LABEL_69:
  uint64_t v62 = *(unsigned __int8 *)(a1[32] + 280);
  unsigned int v186 = 0;
  int v63 = sub_1CB85A994((uint64_t)a1, *(void *)a2, (int *)&v186);
  uint64_t result = 0;
  if (!v63) {
    return result;
  }
  unint64_t v6 = v186;
  if ((v186 > 0x30 || ((1 << v186) & 0x1000000010100) == 0) && (v186 & 0x1F) != 0) {
    return 0;
  }
  int v66 = v62 ? 512 : 128;
  if ((int)v186 > v66 || (int)v186 < 16) {
    return 0;
  }
  int v68 = *(unsigned __int8 **)(a2 - 32);
  if (v68[16] - 11 < 2) {
    return 0;
  }
  uint64_t v69 = v186 > 0x1F ? ((v186 + 16) >> 5) + 1 : (v186 >> 3) - 1;
  unsigned int v70 = *((_DWORD *)&unk_1E66A39E8 + 4 * v69 + v62);
  if (!v70) {
    return 0;
  }
  uint64_t v71 = *((void *)&unk_1E66A39E8 + 2 * v69 + 1);
  uint64_t result = sub_1CB87DFFC(a1, (unsigned __int8 *)a2);
  int v178 = result;
  if (result)
  {
    uint64_t result = sub_1CB87DFFC(a1, v68);
    if (result)
    {
      int v72 = result;
      if (v62)
      {
        uint64_t result = sub_1CD3CC6CC((uint64_t)a1, result);
        if (!result) {
          return result;
        }
      }
      else
      {
        LODWORD(result) = 0;
      }
      int v177 = result;
      uint64_t v73 = a1[6];
      int v74 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v73, "", 0);
      *(void *)(*(void *)(v73 + 24) + 16 * (v74 & 0x7FFFFFFF)) = v71 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v75 = *(void *)(v73 + 8);
      if (v75)
      {
        (*(void (**)(uint64_t))(*(void *)v75 + 24))(v75);
        if (v74)
        {
LABEL_96:
          int v180 = v74;
          uint64_t v76 = a1[4];
          uint64_t v77 = *(void *)(v76 + 640);
          BOOL v78 = *(unint64_t **)(v76 + 648);
          uint64_t v79 = *(void *)(a1[12] + 8) + 48 * v70;
          unsigned int v80 = *(llvm::MachineFunction **)(v77 + 32);
          int v81 = (unsigned __int8 *)a1[9];
          uint64_t v187 = v81;
          if (v81) {
            llvm::MetadataTracking::track((uint64_t)&v187, v81, 2);
          }
          unsigned int v82 = llvm::MachineFunction::CreateMachineInstr(v80, v79, &v187, 0);
          if (!v187)
          {
LABEL_99:
            uint64_t v83 = *(void *)(v77 + 40);
            *((void *)v82 + 3) = v83;
            uint64_t v84 = *(void *)(v83 + 32);
            uint64_t v85 = *((unsigned int *)v82 + 10);
            if (v85)
            {
              uint64_t v147 = *((void *)v82 + 4);
              uint64_t v148 = *(void *)(v84 + 40);
              uint64_t v149 = 32 * v85;
              do
              {
                if (!*(unsigned char *)v147)
                {
                  uint64_t v150 = *(unsigned int *)(v147 + 4);
                  if ((int)v150 >= 0) {
                    unsigned int v151 = (uint64_t *)(*(void *)(v148 + 272) + 8 * v150);
                  }
                  else {
                    unsigned int v151 = (uint64_t *)(*(void *)(v148 + 24) + 16 * (v150 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v152 = *v151;
                  if (*v151)
                  {
                    uint64_t v153 = *(void *)(v152 + 16);
                    *(void *)(v152 + 16) = v147;
                    *(void *)(v147 + 16) = v153;
                    if (*(unsigned char *)(v147 + 3))
                    {
                      *(void *)(v147 + 24) = v152;
                    }
                    else
                    {
                      *(void *)(v147 + 24) = 0;
                      unsigned int v151 = (uint64_t *)(v153 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v147 + 16) = v147;
                    *(void *)(v147 + 24) = 0;
                  }
                  *unsigned int v151 = v147;
                }
                v147 += 32;
                v149 -= 32;
              }
              while (v149);
            }
            uint64_t v86 = *(void *)(v84 + 728);
            if (v86) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v86 + 24))(v86, v82);
            }
            unint64_t v87 = *v78 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unsigned int v82 = v87 | *(void *)v82 & 7;
            *((void *)v82 + 1) = v78;
            *(void *)(v87 + 8) = v82;
            *BOOL v78 = *v78 & 7 | (unint64_t)v82;
            *((void *)&v188 + 1) = 0;
            long long v189 = 0uLL;
            int IncompleteVirtualRegister = v180;
            LODWORD(v188) = 0x1000000;
            DWORD1(v188) = v180;
            llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
            if (v62)
            {
              uint64_t v139 = *(void *)(*(void *)(a2 + 40) + 56);
              *((void *)&v188 + 1) = 0;
              long long v189 = 0uLL;
              LODWORD(v188) = 0;
              DWORD1(v188) = v177;
              llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
              uint64_t v140 = a1[32];
              LODWORD(v188) = 0;
              BOOL v141 = sub_1CD3CA314(v140, v139, "LoadCMode", &v188);
              uint64_t v142 = v188;
              LODWORD(v188) = 1;
              if (!v141) {
                uint64_t v142 = 0;
              }
              *((void *)&v188 + 1) = 0;
              *(void *)&long long v189 = v142;
              llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
              uint64_t v143 = a1[32];
              LODWORD(v188) = 0;
              BOOL v144 = sub_1CD3CA314(v143, v139, "LoadSLCMode", &v188);
              uint64_t v145 = v188;
              if (!v144) {
                uint64_t v145 = 1;
              }
              LODWORD(v188) = 1;
              *((void *)&v188 + 1) = 0;
              *(void *)&long long v189 = v145;
              llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
              int v91 = v178;
            }
            else
            {
              uint64_t v88 = (_UNKNOWN ***)(*(void *)(*(void *)(a1[6] + 24) + 16 * (v72 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
              if (v88 == &off_1E66A4340 || v88 == &off_1E66A43C8)
              {
                int v146 = 0;
              }
              else
              {
                sub_1CD3CB380((uint64_t)a1, v72, 33);
                int v146 = 8448;
              }
              long long v189 = 0uLL;
              long long v188 = __PAIR64__(v72, v146);
              llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
              uint64_t v90 = (unsigned char *)a1[32];
              int v91 = v178;
              if (v90[310])
              {
                uint64_t v92 = 1;
              }
              else if (v90[311])
              {
                uint64_t v92 = 2;
              }
              else
              {
                BOOL v7 = v90[312] == 0;
                uint64_t v92 = 3;
                if (v7) {
                  uint64_t v92 = 0;
                }
              }
              LODWORD(v188) = 1;
              *((void *)&v188 + 1) = 0;
              *(void *)&long long v189 = v92;
              llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
              LODWORD(v188) = 1;
              *((void *)&v188 + 1) = 0;
              *(void *)&long long v189 = 0;
              llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
              LODWORD(v188) = 1;
              *((void *)&v188 + 1) = 0;
              *(void *)&long long v189 = 0;
              llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
            }
            LODWORD(v188) = 1;
            *((void *)&v188 + 1) = 0;
            *(void *)&long long v189 = 0;
            llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
            LODWORD(v188) = 1;
            *((void *)&v188 + 1) = 0;
            *(void *)&long long v189 = 0;
            llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
            long long v188 = 0u;
            long long v189 = 0u;
            llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v188);
            unint64_t v93 = (unint64_t)v68 & 0xFFFFFFFFFFFFFFFBLL;
            unsigned int v94 = *(_DWORD *)(*(void *)v68 + 8);
            if ((v94 & 0xFE) == 0x12) {
              unsigned int v94 = *(_DWORD *)(**(void **)(*(void *)v68 + 16) + 8);
            }
            uint64_t v95 = *(llvm::MachineFunction **)(*((void *)v82 + 3) + 32);
            v181[0] = v93;
            v181[1] = 0;
            unsigned int v182 = v94 >> 8;
            char v183 = 0;
            unint64_t v96 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F;
            long long v188 = 0u;
            long long v189 = 0u;
            MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v95, (uint64_t)v181, 1, v6 >> 3, v96, &v188, 0, 1, 0, 0, 0);
            llvm::MachineInstr::addMemOperand(v82, v95, MachineMemOperand);
            if (v6 != 16)
            {
              if (v6 != 48)
              {
                uint64_t v47 = a1;
                int v48 = v91;
                goto LABEL_48;
              }
              int v98 = 0;
              while (1)
              {
                uint64_t v99 = a1[4];
                uint64_t v100 = *(void *)(v99 + 640);
                uint64_t v101 = *(unint64_t **)(v99 + 648);
                uint64_t v102 = *(void *)(a1[12] + 8);
                uint64_t v103 = *(llvm::MachineFunction **)(v100 + 32);
                uint64_t v104 = (unsigned __int8 *)a1[9];
                uint64_t v187 = v104;
                if (v104) {
                  llvm::MetadataTracking::track((uint64_t)&v187, v104, 2);
                }
                unint64_t v105 = llvm::MachineFunction::CreateMachineInstr(v103, v102 + 912, &v187, 0);
                if (!v187) {
                  goto LABEL_124;
                }
                int v118 = *v187;
                if ((v118 - 4) > 0x1E)
                {
                  if ((v118 - 3) >= 0xFFFFFFFE) {
                    uint64_t v121 = v187;
                  }
                  else {
                    uint64_t v121 = 0;
                  }
                  if ((v118 - 3) < 0xFFFFFFFE)
                  {
                    int v91 = v178;
                    if (v118 == 3) {
                      *((void *)v187 + 1) = 0;
                    }
                    goto LABEL_124;
                  }
                  unint64_t v120 = (unint64_t)(v121 + 8);
                }
                else
                {
                  int v91 = v178;
                  if ((v187[1] & 0x7F) != 2 && !*((_DWORD *)v187 + 3)) {
                    goto LABEL_124;
                  }
                  uint64_t v119 = *((void *)v187 + 2);
                  if ((v119 & 4) == 0) {
                    goto LABEL_124;
                  }
                  unint64_t v120 = v119 & 0xFFFFFFFFFFFFFFF8;
                  if (!v120) {
                    goto LABEL_124;
                  }
                }
                *(void *)&long long v188 = &v187;
                sub_1CC5FA668(v120 + 16, &v188);
                int v91 = v178;
LABEL_124:
                uint64_t v106 = *(void *)(v100 + 40);
                *((void *)v105 + 3) = v106;
                uint64_t v107 = *(void *)(v106 + 32);
                uint64_t v108 = *((unsigned int *)v105 + 10);
                if (v108)
                {
                  uint64_t v111 = *((void *)v105 + 4);
                  uint64_t v112 = *(void *)(v107 + 40);
                  uint64_t v113 = 32 * v108;
                  do
                  {
                    if (!*(unsigned char *)v111)
                    {
                      uint64_t v114 = *(unsigned int *)(v111 + 4);
                      if ((int)v114 >= 0) {
                        uint64_t v115 = (uint64_t *)(*(void *)(v112 + 272) + 8 * v114);
                      }
                      else {
                        uint64_t v115 = (uint64_t *)(*(void *)(v112 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v116 = *v115;
                      if (*v115)
                      {
                        uint64_t v117 = *(void *)(v116 + 16);
                        *(void *)(v116 + 16) = v111;
                        *(void *)(v111 + 16) = v117;
                        if (*(unsigned char *)(v111 + 3))
                        {
                          *(void *)(v111 + 24) = v116;
                        }
                        else
                        {
                          *(void *)(v111 + 24) = 0;
                          uint64_t v115 = (uint64_t *)(v117 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v111 + 16) = v111;
                        *(void *)(v111 + 24) = 0;
                      }
                      *uint64_t v115 = v111;
                    }
                    v111 += 32;
                    v113 -= 32;
                  }
                  while (v113);
                }
                uint64_t v109 = *(void *)(v107 + 728);
                if (v109) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v109 + 24))(v109, v105);
                }
                unint64_t v110 = *v101 & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v105 = v110 | *(void *)v105 & 7;
                *((void *)v105 + 1) = v101;
                *(void *)(v110 + 8) = v105;
                unint64_t *v101 = *v101 & 7 | (unint64_t)v105;
                HIDWORD(v188) = 0;
                long long v189 = 0uLL;
                LODWORD(v188) = 0x1000000;
                *(void *)((char *)&v188 + 4) = (v98 + v91);
                llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v188);
                ++v98;
                *((void *)&v188 + 1) = 0;
                long long v189 = 0uLL;
                LODWORD(v188) = v98 << 8;
                DWORD1(v188) = v180;
                llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v188);
                uint64_t result = 1;
                if (v98 == 3) {
                  return result;
                }
              }
            }
            uint64_t v122 = a1[4];
            uint64_t v123 = *(void *)(v122 + 640);
            uint64_t v124 = *(unint64_t **)(v122 + 648);
            uint64_t v125 = *(void *)(a1[12] + 8) + 912;
            uint64_t v39 = *(llvm::MachineFunction **)(v123 + 32);
            uint64_t v126 = (unsigned __int8 *)a1[9];
            uint64_t v187 = v126;
            if (v126) {
              llvm::MetadataTracking::track((uint64_t)&v187, v126, 2);
            }
            uint64_t v41 = llvm::MachineFunction::CreateMachineInstr(v39, v125, &v187, 0);
            if (v187)
            {
              int v172 = *v187;
              if ((v172 - 4) > 0x1E)
              {
                if ((v172 - 3) >= 0xFFFFFFFE) {
                  uint64_t v176 = v187;
                }
                else {
                  uint64_t v176 = 0;
                }
                if ((v172 - 3) < 0xFFFFFFFE)
                {
                  int v91 = v178;
                  if (v172 == 3) {
                    *((void *)v187 + 1) = 0;
                  }
                  goto LABEL_159;
                }
                unint64_t v174 = (unint64_t)(v176 + 8);
              }
              else
              {
                int v91 = v178;
                if ((v187[1] & 0x7F) != 2 && !*((_DWORD *)v187 + 3)) {
                  goto LABEL_159;
                }
                uint64_t v173 = *((void *)v187 + 2);
                if ((v173 & 4) == 0) {
                  goto LABEL_159;
                }
                unint64_t v174 = v173 & 0xFFFFFFFFFFFFFFF8;
                if (!v174) {
                  goto LABEL_159;
                }
              }
              *(void *)&long long v188 = &v187;
              sub_1CC5FA668(v174 + 16, &v188);
              int v91 = v178;
            }
LABEL_159:
            uint64_t v127 = *(void *)(v123 + 40);
            *((void *)v41 + 3) = v127;
            uint64_t v128 = *(void *)(v127 + 32);
            uint64_t v129 = *((unsigned int *)v41 + 10);
            if (v129)
            {
              uint64_t v154 = *((void *)v41 + 4);
              uint64_t v155 = *(void *)(v128 + 40);
              uint64_t v156 = 32 * v129;
              do
              {
                if (!*(unsigned char *)v154)
                {
                  uint64_t v157 = *(unsigned int *)(v154 + 4);
                  if ((int)v157 >= 0) {
                    int v158 = (uint64_t *)(*(void *)(v155 + 272) + 8 * v157);
                  }
                  else {
                    int v158 = (uint64_t *)(*(void *)(v155 + 24) + 16 * (v157 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v159 = *v158;
                  if (*v158)
                  {
                    uint64_t v160 = *(void *)(v159 + 16);
                    *(void *)(v159 + 16) = v154;
                    *(void *)(v154 + 16) = v160;
                    if (*(unsigned char *)(v154 + 3))
                    {
                      *(void *)(v154 + 24) = v159;
                    }
                    else
                    {
                      *(void *)(v154 + 24) = 0;
                      int v158 = (uint64_t *)(v160 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v154 + 16) = v154;
                    *(void *)(v154 + 24) = 0;
                  }
                  *int v158 = v154;
                  int v91 = v178;
                }
                v154 += 32;
                v156 -= 32;
              }
              while (v156);
            }
            uint64_t v130 = *(void *)(v128 + 728);
            if (v130) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v130 + 24))(v130, v41);
            }
            unint64_t v131 = *v124 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v41 = v131 | *(void *)v41 & 7;
            *((void *)v41 + 1) = v124;
            *(void *)(v131 + 8) = v41;
            *uint64_t v124 = *v124 & 7 | (unint64_t)v41;
            *((void *)&v188 + 1) = 0;
            long long v189 = 0uLL;
            LODWORD(v188) = 0x1000000;
            DWORD1(v188) = v91;
            llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v188);
            *((void *)&v188 + 1) = 0;
            long long v189 = 0uLL;
            DWORD1(v188) = v180;
            goto LABEL_46;
          }
          int v168 = *v187;
          if ((v168 - 4) > 0x1E)
          {
            if ((v168 - 3) >= 0xFFFFFFFE) {
              uint64_t v175 = v187;
            }
            else {
              uint64_t v175 = 0;
            }
            if ((v168 - 3) < 0xFFFFFFFE)
            {
              if (v168 == 3) {
                *((void *)v187 + 1) = 0;
              }
              goto LABEL_99;
            }
            unint64_t v170 = (unint64_t)(v175 + 8);
          }
          else
          {
            if ((v187[1] & 0x7F) != 2 && !*((_DWORD *)v187 + 3)) {
              goto LABEL_99;
            }
            uint64_t v169 = *((void *)v187 + 2);
            if ((v169 & 4) == 0) {
              goto LABEL_99;
            }
            unint64_t v170 = v169 & 0xFFFFFFFFFFFFFFF8;
            if (!v170) {
              goto LABEL_99;
            }
          }
          *(void *)&long long v188 = &v187;
          sub_1CC5FA668(v170 + 16, &v188);
          goto LABEL_99;
        }
      }
      else if (v74)
      {
        goto LABEL_96;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CB8716F4(uint64_t *a1, uint64_t a2)
{
  int v408 = 0;
  uint64_t v4 = 0;
  if (!sub_1CB85A994((uint64_t)a1, *(void *)a2, &v408)) {
    return v4;
  }
  int v5 = sub_1CB87DFFC(a1, (unsigned __int8 *)a2);
  if (!v5) {
    return 0;
  }
  int v10 = v5;
  uint64_t v11 = *(void *)a2;
  unsigned int v12 = sub_1CB859FD0((uint64_t)a1, *(void *)(a2 - 32), a1[34], v6, v7, v8, v9);
  uint64_t v407 = a1;
  if (v12 != -1)
  {
    if ((v12 & 1) != 0 && *(_DWORD *)(v11 + 8) != 2061) {
      return 0;
    }
    uint64_t v13 = **(void **)(a2 - 32);
    unsigned int v14 = *(_DWORD *)(v13 + 8);
    if ((v14 & 0xFE) == 0x12) {
      unsigned int v14 = *(_DWORD *)(**(void **)(v13 + 16) + 8);
    }
    unsigned int v401 = v14 >> 8;
    unsigned int v403 = v12 >> 1;
    int v15 = *(_DWORD *)(v11 + 8);
    if (v15 == 18 && v11 != 0)
    {
      int v40 = *(_DWORD *)(v11 + 32);
      if ((v40 - 5) < 0xFFFFFFFD) {
        return 0;
      }
      unsigned int v42 = *(_DWORD *)(*(void *)(v11 + 24) + 8);
      if (v42 == 2
        || (v42 >> 8 != 32 ? (BOOL v43 = v42 >> 8 == 16) : (BOOL v43 = 1),
            !v43 ? (char v44 = 0) : (char v44 = 1),
            v42 == 13 && (v44 & 1) != 0))
      {
        if ((v40 & 1) != 0 && v42 == 4109) {
          goto LABEL_49;
        }
      }
      else
      {
        if (*(_DWORD *)(*(void *)(v11 + 24) + 8)) {
          return 0;
        }
        if (v40)
        {
LABEL_49:
          if (v408 >= 1)
          {
            int v45 = 0;
            int v46 = 0;
            uint64_t v47 = a1;
            while (1)
            {
              uint64_t v48 = v47[4];
              uint64_t v49 = *(void *)(v48 + 640);
              BOOL v50 = *(unint64_t **)(v48 + 648);
              uint64_t v51 = *(void *)(v47[12] + 8);
              uint64_t v52 = *(llvm::MachineFunction **)(v49 + 32);
              BOOL v53 = (unsigned __int8 *)v47[9];
              v409[0] = v53;
              if (v53) {
                llvm::MetadataTracking::track((uint64_t)v409, v53, 2);
              }
              MachineInstr = llvm::MachineFunction::CreateMachineInstr(v52, v51 + 48144, v409, 0);
              if (!v409[0]) {
                goto LABEL_54;
              }
              int v67 = *v409[0];
              if ((v67 - 4) > 0x1E)
              {
                if ((v67 - 3) >= 0xFFFFFFFE) {
                  unsigned int v70 = v409[0];
                }
                else {
                  unsigned int v70 = 0;
                }
                if ((v67 - 3) < 0xFFFFFFFE)
                {
                  if (v67 == 3) {
                    *((void *)v409[0] + 1) = 0;
                  }
                  goto LABEL_54;
                }
                unint64_t v69 = (unint64_t)(v70 + 8);
              }
              else
              {
                if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
                  goto LABEL_54;
                }
                uint64_t v68 = *((void *)v409[0] + 2);
                if ((v68 & 4) == 0) {
                  goto LABEL_54;
                }
                unint64_t v69 = v68 & 0xFFFFFFFFFFFFFFF8;
                if (!v69) {
                  goto LABEL_54;
                }
              }
              *(void *)&long long v413 = v409;
              sub_1CC5FA668(v69 + 16, &v413);
LABEL_54:
              uint64_t v55 = *(void *)(v49 + 40);
              *((void *)MachineInstr + 3) = v55;
              uint64_t v56 = *(void *)(v55 + 32);
              uint64_t v57 = *((unsigned int *)MachineInstr + 10);
              if (v57)
              {
                uint64_t v60 = *((void *)MachineInstr + 4);
                uint64_t v61 = *(void *)(v56 + 40);
                uint64_t v62 = 32 * v57;
                do
                {
                  if (!*(unsigned char *)v60)
                  {
                    uint64_t v63 = *(unsigned int *)(v60 + 4);
                    if ((int)v63 >= 0) {
                      uint64_t v64 = (uint64_t *)(*(void *)(v61 + 272) + 8 * v63);
                    }
                    else {
                      uint64_t v64 = (uint64_t *)(*(void *)(v61 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v65 = *v64;
                    if (*v64)
                    {
                      uint64_t v66 = *(void *)(v65 + 16);
                      *(void *)(v65 + 16) = v60;
                      *(void *)(v60 + 16) = v66;
                      if (*(unsigned char *)(v60 + 3))
                      {
                        *(void *)(v60 + 24) = v65;
                      }
                      else
                      {
                        *(void *)(v60 + 24) = 0;
                        uint64_t v64 = (uint64_t *)(v66 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v60 + 16) = v60;
                      *(void *)(v60 + 24) = 0;
                    }
                    *uint64_t v64 = v60;
                  }
                  v60 += 32;
                  v62 -= 32;
                }
                while (v62);
              }
              uint64_t v58 = *(void *)(v56 + 728);
              if (v58) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v58 + 24))(v58, MachineInstr);
              }
              unint64_t v59 = *v50 & 0xFFFFFFFFFFFFFFF8;
              *(void *)MachineInstr = v59 | *(void *)MachineInstr & 7;
              *((void *)MachineInstr + 1) = v50;
              *(void *)(v59 + 8) = MachineInstr;
              unint64_t *v50 = *v50 & 7 | (unint64_t)MachineInstr;
              HIDWORD(v413) = 0;
              long long v414 = 0uLL;
              *(void *)((char *)&v413 + 4) = (v45 + v10);
              LODWORD(v413) = 0x1000000;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              uint64_t v4 = 1;
              LODWORD(v413) = 1;
              *((void *)&v413 + 1) = 0;
              *(void *)&long long v414 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              HIDWORD(v413) = 0;
              LODWORD(v414) = v401;
              DWORD2(v414) = 0;
              LODWORD(v413) = 519;
              *(void *)((char *)&v413 + 4) = v45 + v403;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              LODWORD(v413) = 1;
              *((void *)&v413 + 1) = 0;
              *(void *)&long long v414 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              HIDWORD(v413) = 0;
              LODWORD(v414) = v401;
              DWORD2(v414) = 0;
              LODWORD(v413) = 519;
              *(void *)((char *)&v413 + 4) = v45 + v403;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              LODWORD(v413) = 1;
              *((void *)&v413 + 1) = 0;
              *(void *)&long long v414 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              HIDWORD(v413) = 0;
              LODWORD(v414) = v401;
              DWORD2(v414) = 0;
              LODWORD(v413) = 519;
              *(void *)((char *)&v413 + 4) = v45 + v403;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              LODWORD(v413) = 1;
              *((void *)&v413 + 1) = 0;
              *(void *)&long long v414 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              HIDWORD(v413) = 0;
              LODWORD(v414) = v401;
              DWORD2(v414) = 0;
              LODWORD(v413) = 519;
              *(void *)((char *)&v413 + 4) = v45 + v403;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              LODWORD(v413) = 1;
              *((void *)&v413 + 1) = 0;
              *(void *)&long long v414 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              long long v413 = 0u;
              long long v414 = 0u;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              LODWORD(v413) = 1;
              *((void *)&v413 + 1) = 0;
              *(void *)&long long v414 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              long long v413 = 0u;
              long long v414 = 0u;
              llvm::MachineInstr::addOperand(MachineInstr, v52, (const llvm::MachineOperand *)&v413);
              v46 += 16;
              ++v45;
              uint64_t v47 = a1;
              if (v46 >= v408) {
                return v4;
              }
            }
          }
          return 1;
        }
      }
      int v74 = (void *)a1[6];
      unint64_t v75 = *(void *)(v74[3] + 16 * (v10 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v76 = (*(uint64_t (**)(void))(**(void **)(*v74 + 16) + 176))(*(void *)(*v74 + 16));
      int v77 = *(_DWORD *)(*(void *)(v76 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*(void *)v75 + 24)
                       + *(_DWORD *)(v76 + 272) * ((*(void *)(v76 + 248) - *(void *)(v76 + 240)) >> 3)));
      if (v77 == 64)
      {
        if (v408 < 1) {
          return 1;
        }
        int v397 = v10;
        unsigned int v78 = 0;
        int v79 = 0;
        unsigned int v80 = v407;
        while (1)
        {
          uint64_t v81 = v80[6];
          int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v81, "", 0);
          *(void *)(*(void *)(v81 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A43C8;
          uint64_t v83 = *(void *)(v81 + 8);
          if (v83)
          {
            (*(void (**)(uint64_t))(*(void *)v83 + 24))(v83);
            if (!IncompleteVirtualRegister) {
              return 0;
            }
          }
          else if (!IncompleteVirtualRegister)
          {
            return 0;
          }
          uint64_t v84 = v407[6];
          int v85 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v84, "", 0);
          *(void *)(*(void *)(v84 + 24) + 16 * (v85 & 0x7FFFFFFF)) = &off_1E66A43C8;
          uint64_t v86 = *(void *)(v84 + 8);
          if (v86)
          {
            (*(void (**)(uint64_t))(*(void *)v86 + 24))(v86);
            if (!v85) {
              return 0;
            }
          }
          else if (!v85)
          {
            return 0;
          }
          int v394 = v79;
          uint64_t v87 = v407[4];
          uint64_t v88 = *(void *)(v87 + 640);
          uint64_t v89 = *(unint64_t **)(v87 + 648);
          uint64_t v90 = *(void *)(v407[12] + 8);
          int v91 = *(llvm::MachineFunction **)(v88 + 32);
          uint64_t v92 = (unsigned __int8 *)v407[9];
          v409[0] = v92;
          if (v92) {
            llvm::MetadataTracking::track((uint64_t)v409, v92, 2);
          }
          unint64_t v93 = llvm::MachineFunction::CreateMachineInstr(v91, v90 + 66288, v409, 0);
          if (v409[0])
          {
            int v145 = *v409[0];
            if ((v145 - 4) > 0x1E)
            {
              if ((v145 - 3) >= 0xFFFFFFFE) {
                uint64_t v154 = v409[0];
              }
              else {
                uint64_t v154 = 0;
              }
              if ((v145 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v147 = (unint64_t)(v154 + 8);
LABEL_184:
                *(void *)&long long v413 = v409;
                sub_1CC5FA668(v147 + 16, &v413);
                goto LABEL_101;
              }
              if (v145 == 3) {
                *((void *)v409[0] + 1) = 0;
              }
            }
            else if ((v409[0][1] & 0x7F) == 2 || *((_DWORD *)v409[0] + 3))
            {
              uint64_t v146 = *((void *)v409[0] + 2);
              if ((v146 & 4) != 0)
              {
                unint64_t v147 = v146 & 0xFFFFFFFFFFFFFFF8;
                if (v147) {
                  goto LABEL_184;
                }
              }
            }
          }
LABEL_101:
          uint64_t v94 = *(void *)(v88 + 40);
          *((void *)v93 + 3) = v94;
          uint64_t v95 = *(void *)(v94 + 32);
          uint64_t v96 = *((unsigned int *)v93 + 10);
          if (v96)
          {
            uint64_t v124 = *((void *)v93 + 4);
            uint64_t v125 = *(void *)(v95 + 40);
            uint64_t v126 = 32 * v96;
            do
            {
              if (!*(unsigned char *)v124)
              {
                uint64_t v127 = *(unsigned int *)(v124 + 4);
                if ((int)v127 >= 0) {
                  uint64_t v128 = (uint64_t *)(*(void *)(v125 + 272) + 8 * v127);
                }
                else {
                  uint64_t v128 = (uint64_t *)(*(void *)(v125 + 24) + 16 * (v127 & 0x7FFFFFFF) + 8);
                }
                uint64_t v129 = *v128;
                if (*v128)
                {
                  uint64_t v130 = *(void *)(v129 + 16);
                  *(void *)(v129 + 16) = v124;
                  *(void *)(v124 + 16) = v130;
                  if (*(unsigned char *)(v124 + 3))
                  {
                    *(void *)(v124 + 24) = v129;
                  }
                  else
                  {
                    *(void *)(v124 + 24) = 0;
                    uint64_t v128 = (uint64_t *)(v130 + 24);
                  }
                }
                else
                {
                  *(void *)(v124 + 16) = v124;
                  *(void *)(v124 + 24) = 0;
                }
                *uint64_t v128 = v124;
              }
              v124 += 32;
              v126 -= 32;
            }
            while (v126);
          }
          uint64_t v97 = *(void *)(v95 + 728);
          if (v97) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v97 + 24))(v97, v93);
          }
          unint64_t v98 = *v89 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v93 = v98 | *(void *)v93 & 7;
          *((void *)v93 + 1) = v89;
          *(void *)(v98 + 8) = v93;
          *uint64_t v89 = *v89 & 7 | (unint64_t)v93;
          *((void *)&v413 + 1) = 0;
          long long v414 = 0uLL;
          LODWORD(v413) = 0x1000000;
          DWORD1(v413) = IncompleteVirtualRegister;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          HIDWORD(v413) = 0;
          LODWORD(v414) = v401;
          DWORD2(v414) = 0;
          LODWORD(v413) = 1031;
          *(void *)((char *)&v413 + 4) = v403 + 2 * v78;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          HIDWORD(v413) = 0;
          LODWORD(v414) = v401;
          DWORD2(v414) = 0;
          LODWORD(v413) = 1031;
          *(void *)((char *)&v413 + 4) = v403 + 2 * v78;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          HIDWORD(v413) = 0;
          LODWORD(v414) = v401;
          DWORD2(v414) = 0;
          LODWORD(v413) = 1031;
          *(void *)((char *)&v413 + 4) = v403 + 2 * v78;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          long long v413 = 0u;
          long long v414 = 0u;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          long long v413 = 0u;
          long long v414 = 0u;
          llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v413);
          uint64_t v99 = v407[4];
          uint64_t v100 = *(void *)(v99 + 640);
          uint64_t v101 = *(unint64_t **)(v99 + 648);
          uint64_t v102 = *(void *)(v407[12] + 8);
          uint64_t v103 = *(llvm::MachineFunction **)(v100 + 32);
          uint64_t v104 = (unsigned __int8 *)v407[9];
          v409[0] = v104;
          if (v104) {
            llvm::MetadataTracking::track((uint64_t)v409, v104, 2);
          }
          unint64_t v105 = llvm::MachineFunction::CreateMachineInstr(v103, v102 + 66288, v409, 0);
          if (v409[0])
          {
            int v148 = *v409[0];
            if ((v148 - 4) > 0x1E)
            {
              if ((v148 - 3) >= 0xFFFFFFFE) {
                uint64_t v155 = v409[0];
              }
              else {
                uint64_t v155 = 0;
              }
              if ((v148 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v150 = (unint64_t)(v155 + 8);
LABEL_190:
                *(void *)&long long v413 = v409;
                sub_1CC5FA668(v150 + 16, &v413);
                goto LABEL_107;
              }
              if (v148 == 3) {
                *((void *)v409[0] + 1) = 0;
              }
            }
            else if ((v409[0][1] & 0x7F) == 2 || *((_DWORD *)v409[0] + 3))
            {
              uint64_t v149 = *((void *)v409[0] + 2);
              if ((v149 & 4) != 0)
              {
                unint64_t v150 = v149 & 0xFFFFFFFFFFFFFFF8;
                if (v150) {
                  goto LABEL_190;
                }
              }
            }
          }
LABEL_107:
          uint64_t v106 = *(void *)(v100 + 40);
          *((void *)v105 + 3) = v106;
          uint64_t v107 = *(void *)(v106 + 32);
          uint64_t v108 = *((unsigned int *)v105 + 10);
          if (v108)
          {
            uint64_t v131 = *((void *)v105 + 4);
            uint64_t v132 = *(void *)(v107 + 40);
            uint64_t v133 = 32 * v108;
            do
            {
              if (!*(unsigned char *)v131)
              {
                uint64_t v134 = *(unsigned int *)(v131 + 4);
                if ((int)v134 >= 0) {
                  uint64_t v135 = (uint64_t *)(*(void *)(v132 + 272) + 8 * v134);
                }
                else {
                  uint64_t v135 = (uint64_t *)(*(void *)(v132 + 24) + 16 * (v134 & 0x7FFFFFFF) + 8);
                }
                uint64_t v136 = *v135;
                if (*v135)
                {
                  uint64_t v137 = *(void *)(v136 + 16);
                  *(void *)(v136 + 16) = v131;
                  *(void *)(v131 + 16) = v137;
                  if (*(unsigned char *)(v131 + 3))
                  {
                    *(void *)(v131 + 24) = v136;
                  }
                  else
                  {
                    *(void *)(v131 + 24) = 0;
                    uint64_t v135 = (uint64_t *)(v137 + 24);
                  }
                }
                else
                {
                  *(void *)(v131 + 16) = v131;
                  *(void *)(v131 + 24) = 0;
                }
                *uint64_t v135 = v131;
              }
              v131 += 32;
              v133 -= 32;
            }
            while (v133);
          }
          uint64_t v109 = *(void *)(v107 + 728);
          if (v109) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v109 + 24))(v109, v105);
          }
          unint64_t v110 = *v101 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v105 = v110 | *(void *)v105 & 7;
          *((void *)v105 + 1) = v101;
          *(void *)(v110 + 8) = v105;
          unint64_t *v101 = *v101 & 7 | (unint64_t)v105;
          *((void *)&v413 + 1) = 0;
          long long v414 = 0uLL;
          LODWORD(v413) = 0x1000000;
          DWORD1(v413) = v85;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          HIDWORD(v413) = 0;
          LODWORD(v414) = v401;
          DWORD2(v414) = 0;
          LODWORD(v413) = 1031;
          *(void *)((char *)&v413 + 4) = ((2 * v78) | 2) + v403;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          HIDWORD(v413) = 0;
          LODWORD(v414) = v401;
          DWORD2(v414) = 0;
          LODWORD(v413) = 1031;
          *(void *)((char *)&v413 + 4) = ((2 * v78) | 2) + v403;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          HIDWORD(v413) = 0;
          LODWORD(v414) = v401;
          DWORD2(v414) = 0;
          LODWORD(v413) = 1031;
          *(void *)((char *)&v413 + 4) = ((2 * v78) | 2) + v403;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          long long v413 = 0u;
          long long v414 = 0u;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          long long v413 = 0u;
          long long v414 = 0u;
          llvm::MachineInstr::addOperand(v105, v103, (const llvm::MachineOperand *)&v413);
          uint64_t v111 = v407[4];
          uint64_t v112 = *(void *)(v111 + 640);
          uint64_t v113 = *(unint64_t **)(v111 + 648);
          uint64_t v114 = *(void *)(v407[12] + 8);
          uint64_t v115 = *(llvm::MachineFunction **)(v112 + 32);
          uint64_t v116 = (unsigned __int8 *)v407[9];
          v409[0] = v116;
          if (v116) {
            llvm::MetadataTracking::track((uint64_t)v409, v116, 2);
          }
          uint64_t v117 = llvm::MachineFunction::CreateMachineInstr(v115, v114 + 864, v409, 0);
          int v118 = IncompleteVirtualRegister;
          if (!v409[0]) {
            goto LABEL_113;
          }
          int v151 = *v409[0];
          if ((v151 - 4) > 0x1E)
          {
            if ((v151 - 3) >= 0xFFFFFFFE) {
              uint64_t v156 = v409[0];
            }
            else {
              uint64_t v156 = 0;
            }
            if ((v151 - 3) < 0xFFFFFFFE)
            {
              int v118 = IncompleteVirtualRegister;
              if (v151 == 3) {
                *((void *)v409[0] + 1) = 0;
              }
              goto LABEL_113;
            }
            unint64_t v153 = (unint64_t)(v156 + 8);
          }
          else
          {
            int v118 = IncompleteVirtualRegister;
            if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
              goto LABEL_113;
            }
            uint64_t v152 = *((void *)v409[0] + 2);
            if ((v152 & 4) == 0) {
              goto LABEL_113;
            }
            unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFF8;
            if (!v153) {
              goto LABEL_113;
            }
          }
          *(void *)&long long v413 = v409;
          sub_1CC5FA668(v153 + 16, &v413);
          int v118 = IncompleteVirtualRegister;
LABEL_113:
          uint64_t v119 = *(void *)(v112 + 40);
          *((void *)v117 + 3) = v119;
          uint64_t v120 = *(void *)(v119 + 32);
          uint64_t v121 = *((unsigned int *)v117 + 10);
          if (v121)
          {
            uint64_t v138 = *((void *)v117 + 4);
            uint64_t v139 = *(void *)(v120 + 40);
            uint64_t v140 = 32 * v121;
            do
            {
              if (!*(unsigned char *)v138)
              {
                uint64_t v141 = *(unsigned int *)(v138 + 4);
                if ((int)v141 >= 0) {
                  uint64_t v142 = (uint64_t *)(*(void *)(v139 + 272) + 8 * v141);
                }
                else {
                  uint64_t v142 = (uint64_t *)(*(void *)(v139 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8);
                }
                uint64_t v143 = *v142;
                if (*v142)
                {
                  uint64_t v144 = *(void *)(v143 + 16);
                  *(void *)(v143 + 16) = v138;
                  *(void *)(v138 + 16) = v144;
                  if (*(unsigned char *)(v138 + 3))
                  {
                    *(void *)(v138 + 24) = v143;
                  }
                  else
                  {
                    *(void *)(v138 + 24) = 0;
                    uint64_t v142 = (uint64_t *)(v144 + 24);
                  }
                }
                else
                {
                  *(void *)(v138 + 16) = v138;
                  *(void *)(v138 + 24) = 0;
                }
                *uint64_t v142 = v138;
              }
              v138 += 32;
              v140 -= 32;
            }
            while (v140);
          }
          uint64_t v122 = *(void *)(v120 + 728);
          if (v122) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v122 + 24))(v122, v117);
          }
          unint64_t v123 = *v113 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v117 = v123 | *(void *)v117 & 7;
          *((void *)v117 + 1) = v113;
          *(void *)(v123 + 8) = v117;
          *uint64_t v113 = *v113 & 7 | (unint64_t)v117;
          HIDWORD(v413) = 0;
          long long v414 = 0uLL;
          *(void *)((char *)&v413 + 4) = v397 + (v78 >> 1);
          LODWORD(v413) = 0x1000000;
          llvm::MachineInstr::addOperand(v117, v115, (const llvm::MachineOperand *)&v413);
          *((void *)&v413 + 1) = 0;
          LODWORD(v413) = 0;
          DWORD1(v413) = v118;
          long long v414 = 0uLL;
          llvm::MachineInstr::addOperand(v117, v115, (const llvm::MachineOperand *)&v413);
          uint64_t v4 = 1;
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 33;
          llvm::MachineInstr::addOperand(v117, v115, (const llvm::MachineOperand *)&v413);
          *((void *)&v413 + 1) = 0;
          LODWORD(v413) = 0;
          DWORD1(v413) = v85;
          long long v414 = 0uLL;
          llvm::MachineInstr::addOperand(v117, v115, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 34;
          llvm::MachineInstr::addOperand(v117, v115, (const llvm::MachineOperand *)&v413);
          int v79 = v394 + 64;
          v78 += 2;
          unsigned int v80 = v407;
          if (v394 + 64 >= v408) {
            return v4;
          }
        }
      }
      if (v77 != 32 && *(unsigned char *)(a1[32] + 280) == 0) {
        return 0;
      }
      int v395 = v408;
      if (v408 < 1) {
        return 1;
      }
      int v169 = 0;
      int v170 = 0;
      uint64_t v171 = a1;
      while (1)
      {
        uint64_t v172 = v171[4];
        uint64_t v173 = *(void *)(v172 + 640);
        unint64_t v174 = *(unint64_t **)(v172 + 648);
        uint64_t v175 = *(void *)(v171[12] + 8);
        uint64_t v176 = *(llvm::MachineFunction **)(v173 + 32);
        int v177 = (unsigned __int8 *)v171[9];
        v409[0] = v177;
        if (v177) {
          llvm::MetadataTracking::track((uint64_t)v409, v177, 2);
        }
        int v178 = llvm::MachineFunction::CreateMachineInstr(v176, v175 + 66288, v409, 0);
        if (!v409[0]) {
          goto LABEL_222;
        }
        int v191 = *v409[0];
        if ((v191 - 4) > 0x1E)
        {
          if ((v191 - 3) >= 0xFFFFFFFE) {
            uint64_t v194 = v409[0];
          }
          else {
            uint64_t v194 = 0;
          }
          if ((v191 - 3) < 0xFFFFFFFE)
          {
            if (v191 == 3) {
              *((void *)v409[0] + 1) = 0;
            }
            goto LABEL_222;
          }
          unint64_t v193 = (unint64_t)(v194 + 8);
        }
        else
        {
          if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
            goto LABEL_222;
          }
          uint64_t v192 = *((void *)v409[0] + 2);
          if ((v192 & 4) == 0) {
            goto LABEL_222;
          }
          unint64_t v193 = v192 & 0xFFFFFFFFFFFFFFF8;
          if (!v193) {
            goto LABEL_222;
          }
        }
        *(void *)&long long v413 = v409;
        sub_1CC5FA668(v193 + 16, &v413);
LABEL_222:
        uint64_t v179 = *(void *)(v173 + 40);
        *((void *)v178 + 3) = v179;
        uint64_t v180 = *(void *)(v179 + 32);
        uint64_t v181 = *((unsigned int *)v178 + 10);
        if (v181)
        {
          uint64_t v184 = *((void *)v178 + 4);
          uint64_t v185 = *(void *)(v180 + 40);
          uint64_t v186 = 32 * v181;
          do
          {
            if (!*(unsigned char *)v184)
            {
              uint64_t v187 = *(unsigned int *)(v184 + 4);
              if ((int)v187 >= 0) {
                long long v188 = (uint64_t *)(*(void *)(v185 + 272) + 8 * v187);
              }
              else {
                long long v188 = (uint64_t *)(*(void *)(v185 + 24) + 16 * (v187 & 0x7FFFFFFF) + 8);
              }
              uint64_t v189 = *v188;
              if (*v188)
              {
                uint64_t v190 = *(void *)(v189 + 16);
                *(void *)(v189 + 16) = v184;
                *(void *)(v184 + 16) = v190;
                if (*(unsigned char *)(v184 + 3))
                {
                  *(void *)(v184 + 24) = v189;
                }
                else
                {
                  *(void *)(v184 + 24) = 0;
                  long long v188 = (uint64_t *)(v190 + 24);
                }
              }
              else
              {
                *(void *)(v184 + 16) = v184;
                *(void *)(v184 + 24) = 0;
              }
              uint64_t *v188 = v184;
            }
            v184 += 32;
            v186 -= 32;
          }
          while (v186);
        }
        uint64_t v182 = *(void *)(v180 + 728);
        if (v182) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v182 + 24))(v182, v178);
        }
        unint64_t v183 = *v174 & 0xFFFFFFFFFFFFFFF8;
        *(void *)int v178 = v183 | *(void *)v178 & 7;
        *((void *)v178 + 1) = v174;
        *(void *)(v183 + 8) = v178;
        unint64_t *v174 = *v174 & 7 | (unint64_t)v178;
        HIDWORD(v413) = 0;
        long long v414 = 0uLL;
        *(void *)((char *)&v413 + 4) = (v169 + v10);
        LODWORD(v413) = 0x1000000;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        uint64_t v4 = 1;
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        HIDWORD(v413) = 0;
        LODWORD(v414) = v401;
        DWORD2(v414) = 0;
        LODWORD(v413) = 1031;
        *(void *)((char *)&v413 + 4) = v403 + 2 * v169;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        HIDWORD(v413) = 0;
        LODWORD(v414) = v401;
        DWORD2(v414) = 0;
        LODWORD(v413) = 1031;
        *(void *)((char *)&v413 + 4) = v403 + 2 * v169;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        HIDWORD(v413) = 0;
        LODWORD(v414) = v401;
        DWORD2(v414) = 0;
        LODWORD(v413) = 1031;
        *(void *)((char *)&v413 + 4) = v403 + 2 * v169;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        long long v413 = 0u;
        long long v414 = 0u;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        long long v413 = 0u;
        long long v414 = 0u;
        llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v413);
        v170 += 32;
        ++v169;
        uint64_t v171 = a1;
        if (v170 >= v395) {
          return v4;
        }
      }
    }
    if (v15 == 2 || (int v17 = *(_DWORD *)(v11 + 8) >> 8, v15 == 13) && v17 == 32)
    {
      uint64_t v18 = a1[4];
      uint64_t v19 = *(void *)(v18 + 640);
      uint64_t v20 = *(unint64_t **)(v18 + 648);
      uint64_t v21 = *(void *)(a1[12] + 8) + 66288;
      uint64_t v22 = *(llvm::MachineFunction **)(v19 + 32);
      uint64_t v23 = (unsigned __int8 *)a1[9];
      v409[0] = v23;
      if (v23) {
        llvm::MetadataTracking::track((uint64_t)v409, v23, 2);
      }
      uint64_t v24 = llvm::MachineFunction::CreateMachineInstr(v22, v21, v409, 0);
      if (!v409[0]) {
        goto LABEL_19;
      }
      int v360 = *v409[0];
      if ((v360 - 4) > 0x1E)
      {
        if ((v360 - 3) >= 0xFFFFFFFE) {
          int v363 = v409[0];
        }
        else {
          int v363 = 0;
        }
        if ((v360 - 3) < 0xFFFFFFFE)
        {
          if (v360 == 3) {
            *((void *)v409[0] + 1) = 0;
          }
          goto LABEL_19;
        }
        unint64_t v362 = (unint64_t)(v363 + 8);
      }
      else
      {
        if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
          goto LABEL_19;
        }
        uint64_t v361 = *((void *)v409[0] + 2);
        if ((v361 & 4) == 0) {
          goto LABEL_19;
        }
        unint64_t v362 = v361 & 0xFFFFFFFFFFFFFFF8;
        if (!v362) {
          goto LABEL_19;
        }
      }
      *(void *)&long long v413 = v409;
      sub_1CC5FA668(v362 + 16, &v413);
LABEL_19:
      uint64_t v25 = *(void *)(v19 + 40);
      *((void *)v24 + 3) = v25;
      uint64_t v26 = *(void *)(v25 + 32);
      uint64_t v27 = *((unsigned int *)v24 + 10);
      if (v27)
      {
        uint64_t v238 = *((void *)v24 + 4);
        uint64_t v239 = *(void *)(v26 + 40);
        uint64_t v240 = 32 * v27;
        do
        {
          if (!*(unsigned char *)v238)
          {
            uint64_t v241 = *(unsigned int *)(v238 + 4);
            if ((int)v241 >= 0) {
              uint64_t v242 = (uint64_t *)(*(void *)(v239 + 272) + 8 * v241);
            }
            else {
              uint64_t v242 = (uint64_t *)(*(void *)(v239 + 24) + 16 * (v241 & 0x7FFFFFFF) + 8);
            }
            uint64_t v243 = *v242;
            if (*v242)
            {
              uint64_t v244 = *(void *)(v243 + 16);
              *(void *)(v243 + 16) = v238;
              *(void *)(v238 + 16) = v244;
              if (*(unsigned char *)(v238 + 3))
              {
                *(void *)(v238 + 24) = v243;
              }
              else
              {
                *(void *)(v238 + 24) = 0;
                uint64_t v242 = (uint64_t *)(v244 + 24);
              }
            }
            else
            {
              *(void *)(v238 + 16) = v238;
              *(void *)(v238 + 24) = 0;
            }
            *uint64_t v242 = v238;
          }
          v238 += 32;
          v240 -= 32;
        }
        while (v240);
      }
      uint64_t v28 = *(void *)(v26 + 728);
      if (v28) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v28 + 24))(v28, v24);
      }
      unint64_t v29 = *v20 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v24 = v29 | *(void *)v24 & 7;
      *((void *)v24 + 1) = v20;
      *(void *)(v29 + 8) = v24;
      *uint64_t v20 = *v20 & 7 | (unint64_t)v24;
      *((void *)&v413 + 1) = 0;
      long long v414 = 0uLL;
      LODWORD(v413) = 0x1000000;
      DWORD1(v413) = v10;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      uint64_t v4 = 1;
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      *((void *)&v413 + 1) = 0;
      unsigned int v31 = v401;
      unsigned int v30 = v403;
      LODWORD(v414) = v401;
      DWORD2(v414) = 0;
      int v32 = 1031;
LABEL_23:
      *(void *)&long long v413 = __PAIR64__(v30, v32);
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v414) = v31;
      DWORD2(v414) = 0;
      long long v413 = __PAIR64__(v30, v32);
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v414) = v31;
      DWORD2(v414) = 0;
      long long v413 = __PAIR64__(v30, v32);
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      long long v413 = 0u;
      long long v414 = 0u;
LABEL_24:
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      long long v413 = 0u;
      long long v414 = 0u;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      return v4;
    }
    if (v15 == 15)
    {
      uint64_t v71 = a1[6];
      if ((_UNKNOWN ***)(*(void *)(*(void *)(v71 + 24) + 16 * (v10 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66A4990)
      {
        int v73 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1[6], "", 0);
        *(void *)(*(void *)(v71 + 24) + 16 * (v73 & 0x7FFFFFFF)) = &off_1E66A4340;
        uint64_t v207 = *(void *)(v71 + 8);
        if (v207) {
          (*(void (**)(uint64_t))(*(void *)v207 + 24))(v207);
        }
        uint64_t v208 = a1[6];
        int v72 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v208, "", 0);
        *(void *)(*(void *)(v208 + 24) + 16 * (v72 & 0x7FFFFFFF)) = &off_1E66A4340;
        uint64_t v209 = *(void *)(v208 + 8);
        if (v209) {
          (*(void (**)(uint64_t))(*(void *)v209 + 24))(v209);
        }
      }
      else
      {
        int v72 = v10 + 1;
        int v73 = v10;
      }
      uint64_t v210 = a1[4];
      uint64_t v211 = *(void *)(v210 + 640);
      uint64_t v212 = *(unint64_t **)(v210 + 648);
      uint64_t v213 = *(void *)(a1[12] + 8) + 66288;
      uint64_t v214 = *(llvm::MachineFunction **)(v211 + 32);
      int v215 = (unsigned __int8 *)a1[9];
      v409[0] = v215;
      if (v215) {
        llvm::MetadataTracking::track((uint64_t)v409, v215, 2);
      }
      uint64_t v216 = llvm::MachineFunction::CreateMachineInstr(v214, v213, v409, 0);
      if (!v409[0])
      {
LABEL_287:
        uint64_t v217 = *(void *)(v211 + 40);
        *((void *)v216 + 3) = v217;
        uint64_t v218 = *(void *)(v217 + 32);
        uint64_t v219 = *((unsigned int *)v216 + 10);
        if (v219)
        {
          uint64_t v311 = *((void *)v216 + 4);
          uint64_t v312 = *(void *)(v218 + 40);
          uint64_t v313 = 32 * v219;
          do
          {
            if (!*(unsigned char *)v311)
            {
              uint64_t v314 = *(unsigned int *)(v311 + 4);
              if ((int)v314 >= 0) {
                uint64_t v315 = (uint64_t *)(*(void *)(v312 + 272) + 8 * v314);
              }
              else {
                uint64_t v315 = (uint64_t *)(*(void *)(v312 + 24) + 16 * (v314 & 0x7FFFFFFF) + 8);
              }
              uint64_t v316 = *v315;
              if (*v315)
              {
                uint64_t v317 = *(void *)(v316 + 16);
                *(void *)(v316 + 16) = v311;
                *(void *)(v311 + 16) = v317;
                if (*(unsigned char *)(v311 + 3))
                {
                  *(void *)(v311 + 24) = v316;
                }
                else
                {
                  *(void *)(v311 + 24) = 0;
                  uint64_t v315 = (uint64_t *)(v317 + 24);
                }
              }
              else
              {
                *(void *)(v311 + 16) = v311;
                *(void *)(v311 + 24) = 0;
              }
              uint64_t *v315 = v311;
            }
            v311 += 32;
            v313 -= 32;
          }
          while (v313);
        }
        uint64_t v220 = *(void *)(v218 + 728);
        if (v220) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v220 + 24))(v220, v216);
        }
        unint64_t v221 = *v212 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v216 = v221 | *(void *)v216 & 7;
        *((void *)v216 + 1) = v212;
        *(void *)(v221 + 8) = v216;
        unint64_t *v212 = *v212 & 7 | (unint64_t)v216;
        *((void *)&v413 + 1) = 0;
        long long v414 = 0uLL;
        LODWORD(v413) = 0x1000000;
        DWORD1(v413) = v72;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        HIDWORD(v413) = 0;
        LODWORD(v414) = v401;
        DWORD2(v414) = 0;
        LODWORD(v413) = 1031;
        *(void *)((char *)&v413 + 4) = v403 + 2;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        HIDWORD(v413) = 0;
        LODWORD(v414) = v401;
        DWORD2(v414) = 0;
        LODWORD(v413) = 1031;
        *(void *)((char *)&v413 + 4) = v403 + 2;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        HIDWORD(v413) = 0;
        LODWORD(v414) = v401;
        DWORD2(v414) = 0;
        LODWORD(v413) = 1031;
        *(void *)((char *)&v413 + 4) = v403 + 2;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        long long v413 = 0u;
        long long v414 = 0u;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        long long v413 = 0u;
        long long v414 = 0u;
        llvm::MachineInstr::addOperand(v216, v214, (const llvm::MachineOperand *)&v413);
        uint64_t v222 = a1[4];
        uint64_t v223 = *(void *)(v222 + 640);
        uint64_t v224 = *(unint64_t **)(v222 + 648);
        uint64_t v225 = *(void *)(a1[12] + 8) + 66288;
        uint64_t v226 = *(llvm::MachineFunction **)(v223 + 32);
        uint64_t v227 = (unsigned __int8 *)a1[9];
        v409[0] = v227;
        if (v227) {
          llvm::MetadataTracking::track((uint64_t)v409, v227, 2);
        }
        uint64_t v228 = llvm::MachineFunction::CreateMachineInstr(v226, v225, v409, 0);
        if (!v409[0])
        {
LABEL_293:
          uint64_t v229 = *(void *)(v223 + 40);
          *((void *)v228 + 3) = v229;
          uint64_t v230 = *(void *)(v229 + 32);
          uint64_t v231 = *((unsigned int *)v228 + 10);
          if (v231)
          {
            uint64_t v318 = *((void *)v228 + 4);
            uint64_t v319 = *(void *)(v230 + 40);
            uint64_t v320 = 32 * v231;
            do
            {
              if (!*(unsigned char *)v318)
              {
                uint64_t v321 = *(unsigned int *)(v318 + 4);
                if ((int)v321 >= 0) {
                  uint64_t v322 = (uint64_t *)(*(void *)(v319 + 272) + 8 * v321);
                }
                else {
                  uint64_t v322 = (uint64_t *)(*(void *)(v319 + 24) + 16 * (v321 & 0x7FFFFFFF) + 8);
                }
                uint64_t v323 = *v322;
                if (*v322)
                {
                  uint64_t v324 = *(void *)(v323 + 16);
                  *(void *)(v323 + 16) = v318;
                  *(void *)(v318 + 16) = v324;
                  if (*(unsigned char *)(v318 + 3))
                  {
                    *(void *)(v318 + 24) = v323;
                  }
                  else
                  {
                    *(void *)(v318 + 24) = 0;
                    uint64_t v322 = (uint64_t *)(v324 + 24);
                  }
                }
                else
                {
                  *(void *)(v318 + 16) = v318;
                  *(void *)(v318 + 24) = 0;
                }
                *uint64_t v322 = v318;
              }
              v318 += 32;
              v320 -= 32;
            }
            while (v320);
          }
          uint64_t v232 = *(void *)(v230 + 728);
          if (v232) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v232 + 24))(v232, v228);
          }
          unint64_t v233 = *v224 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v228 = v233 | *(void *)v228 & 7;
          *((void *)v228 + 1) = v224;
          *(void *)(v233 + 8) = v228;
          *uint64_t v224 = *v224 & 7 | (unint64_t)v228;
          *((void *)&v413 + 1) = 0;
          long long v414 = 0uLL;
          LODWORD(v413) = 0x1000000;
          DWORD1(v413) = v73;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          uint64_t v4 = 1;
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          *((void *)&v413 + 1) = 0;
          LODWORD(v414) = v401;
          DWORD2(v414) = 0;
          LODWORD(v413) = 1031;
          DWORD1(v413) = v403;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          *((void *)&v413 + 1) = 0;
          LODWORD(v414) = v401;
          DWORD2(v414) = 0;
          LODWORD(v413) = 1031;
          DWORD1(v413) = v403;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          *((void *)&v413 + 1) = 0;
          LODWORD(v414) = v401;
          DWORD2(v414) = 0;
          LODWORD(v413) = 1031;
          DWORD1(v413) = v403;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          long long v413 = 0u;
          long long v414 = 0u;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          LODWORD(v413) = 1;
          *((void *)&v413 + 1) = 0;
          *(void *)&long long v414 = 0;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          long long v413 = 0u;
          long long v414 = 0u;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v413);
          uint64_t v234 = a1;
          if (v73 != v10)
          {
            int v235 = v10;
            int v236 = v73;
            unsigned int v237 = 64;
LABEL_381:
            sub_1CB85D99C(v234, v235, v236, v237);
            return v4;
          }
          return v4;
        }
        int v367 = *v409[0];
        if ((v367 - 4) > 0x1E)
        {
          if ((v367 - 3) >= 0xFFFFFFFE) {
            int v374 = v409[0];
          }
          else {
            int v374 = 0;
          }
          if ((v367 - 3) < 0xFFFFFFFE)
          {
            if (v367 == 3) {
              *((void *)v409[0] + 1) = 0;
            }
            goto LABEL_293;
          }
          unint64_t v369 = (unint64_t)(v374 + 8);
        }
        else
        {
          if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
            goto LABEL_293;
          }
          uint64_t v368 = *((void *)v409[0] + 2);
          if ((v368 & 4) == 0) {
            goto LABEL_293;
          }
          unint64_t v369 = v368 & 0xFFFFFFFFFFFFFFF8;
          if (!v369) {
            goto LABEL_293;
          }
        }
        *(void *)&long long v413 = v409;
        sub_1CC5FA668(v369 + 16, &v413);
        goto LABEL_293;
      }
      int v364 = *v409[0];
      if ((v364 - 4) > 0x1E)
      {
        if ((v364 - 3) >= 0xFFFFFFFE) {
          int v373 = v409[0];
        }
        else {
          int v373 = 0;
        }
        if ((v364 - 3) < 0xFFFFFFFE)
        {
          if (v364 == 3) {
            *((void *)v409[0] + 1) = 0;
          }
          goto LABEL_287;
        }
        unint64_t v366 = (unint64_t)(v373 + 8);
      }
      else
      {
        if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
          goto LABEL_287;
        }
        uint64_t v365 = *((void *)v409[0] + 2);
        if ((v365 & 4) == 0) {
          goto LABEL_287;
        }
        unint64_t v366 = v365 & 0xFFFFFFFFFFFFFFF8;
        if (!v366) {
          goto LABEL_287;
        }
      }
      *(void *)&long long v413 = v409;
      sub_1CC5FA668(v366 + 16, &v413);
      goto LABEL_287;
    }
    if (v15 == 13 && v17 == 8)
    {
      uint64_t v157 = a1[4];
      uint64_t v158 = *(void *)(v157 + 640);
      uint64_t v159 = *(unint64_t **)(v157 + 648);
      uint64_t v160 = *(void *)(a1[12] + 8);
      if ((v12 & 1) == 0)
      {
        uint64_t v161 = v160 + 17904;
        uint64_t v22 = *(llvm::MachineFunction **)(v158 + 32);
        uint64_t v162 = (unsigned __int8 *)a1[9];
        v409[0] = v162;
        if (v162) {
          llvm::MetadataTracking::track((uint64_t)v409, v162, 2);
        }
        uint64_t v24 = llvm::MachineFunction::CreateMachineInstr(v22, v161, v409, 0);
        if (!v409[0]) {
          goto LABEL_209;
        }
        int v375 = *v409[0];
        if ((v375 - 4) > 0x1E)
        {
          if ((v375 - 3) >= 0xFFFFFFFE) {
            BOOL v388 = v409[0];
          }
          else {
            BOOL v388 = 0;
          }
          if ((v375 - 3) < 0xFFFFFFFE)
          {
            if (v375 == 3) {
              *((void *)v409[0] + 1) = 0;
            }
            goto LABEL_209;
          }
          unint64_t v377 = (unint64_t)(v388 + 8);
        }
        else
        {
          if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
            goto LABEL_209;
          }
          uint64_t v376 = *((void *)v409[0] + 2);
          if ((v376 & 4) == 0) {
            goto LABEL_209;
          }
          unint64_t v377 = v376 & 0xFFFFFFFFFFFFFFF8;
          if (!v377) {
            goto LABEL_209;
          }
        }
        *(void *)&long long v413 = v409;
        sub_1CC5FA668(v377 + 16, &v413);
LABEL_209:
        uint64_t v163 = *(void *)(v158 + 40);
        *((void *)v24 + 3) = v163;
        uint64_t v164 = *(void *)(v163 + 32);
        uint64_t v165 = *((unsigned int *)v24 + 10);
        if (v165)
        {
          uint64_t v339 = *((void *)v24 + 4);
          uint64_t v340 = *(void *)(v164 + 40);
          uint64_t v341 = 32 * v165;
          do
          {
            if (!*(unsigned char *)v339)
            {
              uint64_t v342 = *(unsigned int *)(v339 + 4);
              if ((int)v342 >= 0) {
                int v343 = (uint64_t *)(*(void *)(v340 + 272) + 8 * v342);
              }
              else {
                int v343 = (uint64_t *)(*(void *)(v340 + 24) + 16 * (v342 & 0x7FFFFFFF) + 8);
              }
              uint64_t v344 = *v343;
              if (*v343)
              {
                uint64_t v345 = *(void *)(v344 + 16);
                *(void *)(v344 + 16) = v339;
                *(void *)(v339 + 16) = v345;
                if (*(unsigned char *)(v339 + 3))
                {
                  *(void *)(v339 + 24) = v344;
                }
                else
                {
                  *(void *)(v339 + 24) = 0;
                  int v343 = (uint64_t *)(v345 + 24);
                }
              }
              else
              {
                *(void *)(v339 + 16) = v339;
                *(void *)(v339 + 24) = 0;
              }
              *int v343 = v339;
            }
            v339 += 32;
            v341 -= 32;
          }
          while (v341);
        }
        uint64_t v166 = *(void *)(v164 + 728);
        if (v166) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v166 + 24))(v166, v24);
        }
        unint64_t v167 = *v159 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v24 = v167 | *(void *)v24 & 7;
        *((void *)v24 + 1) = v159;
        *(void *)(v167 + 8) = v24;
        *uint64_t v159 = *v159 & 7 | (unint64_t)v24;
        *((void *)&v413 + 1) = 0;
        long long v414 = 0uLL;
        LODWORD(v413) = 0x1000000;
        DWORD1(v413) = v10;
        llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
        uint64_t v4 = 1;
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
        *((void *)&v413 + 1) = 0;
        LODWORD(v414) = v401;
        DWORD2(v414) = 0;
        LODWORD(v413) = 519;
        DWORD1(v413) = v403;
        llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0;
        llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
        LODWORD(v413) = 1;
        *((void *)&v413 + 1) = 0;
        *(void *)&long long v414 = 0x1000000FFLL;
        goto LABEL_24;
      }
      uint64_t v245 = v160 + 633648;
      uint64_t v22 = *(llvm::MachineFunction **)(v158 + 32);
      uint64_t v246 = (unsigned __int8 *)a1[9];
      v409[0] = v246;
      if (v246) {
        llvm::MetadataTracking::track((uint64_t)v409, v246, 2);
      }
      uint64_t v24 = llvm::MachineFunction::CreateMachineInstr(v22, v245, v409, 0);
      if (v409[0])
      {
        int v381 = *v409[0];
        if ((v381 - 4) > 0x1E)
        {
          if ((v381 - 3) >= 0xFFFFFFFE) {
            long long v390 = v409[0];
          }
          else {
            long long v390 = 0;
          }
          if ((v381 - 3) < 0xFFFFFFFE)
          {
            if (v381 == 3) {
              *((void *)v409[0] + 1) = 0;
            }
            goto LABEL_314;
          }
          unint64_t v383 = (unint64_t)(v390 + 8);
        }
        else
        {
          if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
            goto LABEL_314;
          }
          uint64_t v382 = *((void *)v409[0] + 2);
          if ((v382 & 4) == 0) {
            goto LABEL_314;
          }
          unint64_t v383 = v382 & 0xFFFFFFFFFFFFFFF8;
          if (!v383) {
            goto LABEL_314;
          }
        }
        *(void *)&long long v413 = v409;
        sub_1CC5FA668(v383 + 16, &v413);
      }
LABEL_314:
      uint64_t v247 = *(void *)(v158 + 40);
      *((void *)v24 + 3) = v247;
      uint64_t v248 = *(void *)(v247 + 32);
      uint64_t v249 = *((unsigned int *)v24 + 10);
      if (v249)
      {
        uint64_t v346 = *((void *)v24 + 4);
        uint64_t v347 = *(void *)(v248 + 40);
        uint64_t v348 = 32 * v249;
        do
        {
          if (!*(unsigned char *)v346)
          {
            uint64_t v349 = *(unsigned int *)(v346 + 4);
            if ((int)v349 >= 0) {
              unint64_t v350 = (uint64_t *)(*(void *)(v347 + 272) + 8 * v349);
            }
            else {
              unint64_t v350 = (uint64_t *)(*(void *)(v347 + 24) + 16 * (v349 & 0x7FFFFFFF) + 8);
            }
            uint64_t v351 = *v350;
            if (*v350)
            {
              uint64_t v352 = *(void *)(v351 + 16);
              *(void *)(v351 + 16) = v346;
              *(void *)(v346 + 16) = v352;
              if (*(unsigned char *)(v346 + 3))
              {
                *(void *)(v346 + 24) = v351;
              }
              else
              {
                *(void *)(v346 + 24) = 0;
                unint64_t v350 = (uint64_t *)(v352 + 24);
              }
            }
            else
            {
              *(void *)(v346 + 16) = v346;
              *(void *)(v346 + 24) = 0;
            }
            uint64_t *v350 = v346;
          }
          v346 += 32;
          v348 -= 32;
        }
        while (v348);
      }
      uint64_t v250 = *(void *)(v248 + 728);
      if (v250) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v250 + 24))(v250, v24);
      }
      unint64_t v251 = *v159 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v24 = v251 | *(void *)v24 & 7;
      *((void *)v24 + 1) = v159;
      *(void *)(v251 + 8) = v24;
      *uint64_t v159 = *v159 & 7 | (unint64_t)v24;
      *((void *)&v413 + 1) = 0;
      long long v414 = 0uLL;
      LODWORD(v413) = 0x1000000;
      DWORD1(v413) = v10;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      uint64_t v4 = 1;
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0x100000008;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      *((void *)&v413 + 1) = 0;
      LODWORD(v414) = v401;
      DWORD2(v414) = 0;
      LODWORD(v413) = 519;
      DWORD1(v413) = v403;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0x100000008;
      llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
      LODWORD(v413) = 1;
      *((void *)&v413 + 1) = 0;
      *(void *)&long long v414 = 0;
      goto LABEL_24;
    }
    BOOL v196 = v15 == 13 && v17 == 16;
    if (*(_DWORD *)(v11 + 8) && !v196) {
      return 0;
    }
    uint64_t v197 = a1[4];
    uint64_t v198 = *(void *)(v197 + 640);
    uint64_t v199 = *(unint64_t **)(v197 + 648);
    uint64_t v200 = *(void *)(a1[12] + 8) + 48144;
    uint64_t v22 = *(llvm::MachineFunction **)(v198 + 32);
    uint64_t v201 = (unsigned __int8 *)a1[9];
    v409[0] = v201;
    if (v201) {
      llvm::MetadataTracking::track((uint64_t)v409, v201, 2);
    }
    uint64_t v24 = llvm::MachineFunction::CreateMachineInstr(v22, v200, v409, 0);
    if (v409[0])
    {
      int v378 = *v409[0];
      if ((v378 - 4) > 0x1E)
      {
        if ((v378 - 3) >= 0xFFFFFFFE) {
          uint64_t v389 = v409[0];
        }
        else {
          uint64_t v389 = 0;
        }
        if ((v378 - 3) < 0xFFFFFFFE)
        {
          if (v378 == 3) {
            *((void *)v409[0] + 1) = 0;
          }
          goto LABEL_270;
        }
        unint64_t v380 = (unint64_t)(v389 + 8);
      }
      else
      {
        if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
          goto LABEL_270;
        }
        uint64_t v379 = *((void *)v409[0] + 2);
        if ((v379 & 4) == 0) {
          goto LABEL_270;
        }
        unint64_t v380 = v379 & 0xFFFFFFFFFFFFFFF8;
        if (!v380) {
          goto LABEL_270;
        }
      }
      *(void *)&long long v413 = v409;
      sub_1CC5FA668(v380 + 16, &v413);
    }
LABEL_270:
    uint64_t v202 = *(void *)(v198 + 40);
    *((void *)v24 + 3) = v202;
    uint64_t v203 = *(void *)(v202 + 32);
    uint64_t v204 = *((unsigned int *)v24 + 10);
    if (v204)
    {
      uint64_t v332 = *((void *)v24 + 4);
      uint64_t v333 = *(void *)(v203 + 40);
      uint64_t v334 = 32 * v204;
      do
      {
        if (!*(unsigned char *)v332)
        {
          uint64_t v335 = *(unsigned int *)(v332 + 4);
          if ((int)v335 >= 0) {
            int v336 = (uint64_t *)(*(void *)(v333 + 272) + 8 * v335);
          }
          else {
            int v336 = (uint64_t *)(*(void *)(v333 + 24) + 16 * (v335 & 0x7FFFFFFF) + 8);
          }
          uint64_t v337 = *v336;
          if (*v336)
          {
            uint64_t v338 = *(void *)(v337 + 16);
            *(void *)(v337 + 16) = v332;
            *(void *)(v332 + 16) = v338;
            if (*(unsigned char *)(v332 + 3))
            {
              *(void *)(v332 + 24) = v337;
            }
            else
            {
              *(void *)(v332 + 24) = 0;
              int v336 = (uint64_t *)(v338 + 24);
            }
          }
          else
          {
            *(void *)(v332 + 16) = v332;
            *(void *)(v332 + 24) = 0;
          }
          *int v336 = v332;
        }
        v332 += 32;
        v334 -= 32;
      }
      while (v334);
    }
    uint64_t v205 = *(void *)(v203 + 728);
    if (v205) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v205 + 24))(v205, v24);
    }
    unint64_t v206 = *v199 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v24 = v206 | *(void *)v24 & 7;
    *((void *)v24 + 1) = v199;
    *(void *)(v206 + 8) = v24;
    *uint64_t v199 = *v199 & 7 | (unint64_t)v24;
    *((void *)&v413 + 1) = 0;
    long long v414 = 0uLL;
    LODWORD(v413) = 0x1000000;
    DWORD1(v413) = v10;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
    uint64_t v4 = 1;
    LODWORD(v413) = 1;
    *((void *)&v413 + 1) = 0;
    *(void *)&long long v414 = 0;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
    *((void *)&v413 + 1) = 0;
    unsigned int v31 = v401;
    unsigned int v30 = v403;
    LODWORD(v414) = v401;
    DWORD2(v414) = 0;
    int v32 = 519;
    LODWORD(v413) = 519;
    DWORD1(v413) = v403;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
    LODWORD(v413) = 1;
    *((void *)&v413 + 1) = 0;
    *(void *)&long long v414 = 0;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v413);
    *((void *)&v413 + 1) = 0;
    LODWORD(v414) = v401;
    DWORD2(v414) = 0;
    goto LABEL_23;
  }
  uint64_t v33 = a1[32];
  int v34 = *(unsigned __int8 *)(v33 + 280);
  BOOL v35 = *(unsigned char *)(v33 + 280) != 0;
  uint64_t v36 = *(void *)(a2 - 32);
  int v37 = *(_DWORD *)(*(void *)v36 + 8);
  if ((v37 & 0xFE) == 0x12) {
    int v37 = *(_DWORD *)(**(void **)(*(void *)v36 + 16) + 8);
  }
  if ((v37 & 0xFFFFFF00) != 0x4000 || *(unsigned __int8 *)(v36 + 16) - 11 < 2) {
    return 0;
  }
  int v412 = 0;
  uint64_t v4 = 0;
  if (!sub_1CB85A994((uint64_t)a1, *(void *)a2, &v412)) {
    return v4;
  }
  uint64_t v4 = 0;
  unsigned int v38 = v412;
  if (v412 > 95)
  {
    if (v412 > 255)
    {
      if (v412 == 256)
      {
        unsigned int v39 = 6;
      }
      else
      {
        if (v412 != 512) {
          return v4;
        }
        unsigned int v39 = 7;
      }
    }
    else if (v412 == 96)
    {
      unsigned int v39 = 4;
    }
    else
    {
      if (v412 != 128) {
        return v4;
      }
      unsigned int v39 = 5;
    }
  }
  else if (v412 > 47)
  {
    if (v412 == 48)
    {
      unsigned int v39 = 2;
    }
    else
    {
      if (v412 != 64) {
        return v4;
      }
      unsigned int v39 = 3;
    }
  }
  else if (v412 == 16)
  {
    unsigned int v39 = 0;
  }
  else
  {
    if (v412 != 32) {
      return v4;
    }
    unsigned int v39 = 1;
  }
  unint64_t v252 = (char *)&dword_1E66A3718[6 * v39];
  unsigned int v253 = *(_DWORD *)&v252[8 * (v34 != 0)];
  if (!v253) {
    return 0;
  }
  uint64_t v404 = *((void *)v252 + 2);
  int v254 = sub_1CB87DFFC(a1, (unsigned __int8 *)a2);
  if (!v254) {
    return 0;
  }
  int v255 = v254;
  int v256 = *(unsigned __int8 *)(v36 + 16);
  if (v256 == 77)
  {
    if (*(void *)(a2 + 40) != *(void *)(v36 + 40)) {
      goto LABEL_347;
    }
    uint64_t v36 = *(void *)(v36 - 32);
    int v256 = *(unsigned __int8 *)(v36 + 16);
  }
  if (v256 == 62)
  {
    uint64_t v257 = *(void *)(v36 + 8);
    if (v257)
    {
      if (!*(void *)(v257 + 8) && *(void *)(v36 + 40) == *(void *)(a2 + 40))
      {
        uint64_t v258 = **(void **)(v36 - 32 * (*(_DWORD *)(v36 + 20) & 0x7FFFFFF));
        int v259 = *(_DWORD *)(v258 + 8);
        if ((v259 & 0xFE) == 0x12) {
          int v259 = *(_DWORD *)(**(void **)(v258 + 16) + 8);
        }
        if ((v259 & 0xFFFFFF00) == 0x4000)
        {
          int v392 = v254;
          if (!v34)
          {
            LODWORD(v413) = 0;
            uint64_t v260 = v407[6];
            int v398 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v260, "", 0);
            *(void *)(*(void *)(v260 + 24) + 16 * (v398 & 0x7FFFFFFF)) = &off_1E66A4180;
            uint64_t v262 = *(void *)(v260 + 8);
            if (v262) {
              (*(void (**)(uint64_t))(*(void *)v262 + 24))(v262);
            }
            if (sub_1CB86B3C8((uint64_t)v407, v36, v398, 1, 0, &v413, v261))
            {
              unsigned int v263 = dword_1E66A3718[6 * v39 + 3];
              if (v413 % v263)
              {
                if ((v413 & 3) != 0) {
                  goto LABEL_340;
                }
                unsigned int v268 = v413 >> 2;
                unsigned int v253 = *((_DWORD *)v252 + 1);
              }
              else
              {
                unsigned int v268 = v413 / v263;
              }
              BOOL v35 = 0;
              goto LABEL_478;
            }
          }
LABEL_340:
          uint64_t v264 = v407[6];
          int v266 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v264, "", 0);
          *(void *)(*(void *)(v264 + 24) + 16 * (v266 & 0x7FFFFFFF)) = &off_1E66A4180;
          uint64_t v267 = *(void *)(v264 + 8);
          if (v267) {
            (*(void (**)(uint64_t))(*(void *)v267 + 24))(v267);
          }
          int v398 = v266;
          unsigned int v268 = 0;
          int v269 = sub_1CB86B3C8((uint64_t)v407, v36, v266, 1, v34 != 0, 0, v265) ^ 1;
          if (v34) {
            BOOL v35 = v269;
          }
          else {
            BOOL v35 = 0;
          }
          if (v269)
          {
            int v255 = v392;
            goto LABEL_348;
          }
LABEL_478:
          int v255 = v392;
          int v270 = v398;
          if (v398) {
            goto LABEL_349;
          }
          goto LABEL_348;
        }
      }
    }
  }
LABEL_347:
  unsigned int v268 = 0;
LABEL_348:
  int v270 = sub_1CB87DFFC(v407, (unsigned __int8 *)v36);
  if (!v270) {
    return 0;
  }
LABEL_349:
  unsigned int v396 = v268;
  int v271 = v255;
  if (v38 >= 0x21)
  {
    uint64_t v272 = v407[6];
    int v271 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v272, "", 0);
    *(void *)(*(void *)(v272 + 24) + 16 * (v271 & 0x7FFFFFFF)) = v404 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v273 = *(void *)(v272 + 8);
    if (v273)
    {
      (*(void (**)(uint64_t))(*(void *)v273 + 24))(v273);
      if (!v271) {
        return 0;
      }
    }
    else if (!v271)
    {
      return 0;
    }
  }
  int v402 = v271;
  if (!v35)
  {
    int v288 = v270;
    goto LABEL_366;
  }
  int v274 = 0;
  uint64_t v275 = v407[6];
  uint64_t v276 = (_UNKNOWN ***)(*(void *)(*(void *)(v275 + 24) + 16 * (v270 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (v276 != &off_1E66A4180 && v276 != &off_1E66A41C8)
  {
    sub_1CD3CB380((uint64_t)v407, v270, 1);
    uint64_t v275 = v407[6];
    int v274 = 256;
  }
  int v393 = v274;
  int v399 = v270;
  int v405 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v275, "", 0);
  *(void *)(*(void *)(v275 + 24) + 16 * (v405 & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v277 = *(void *)(v275 + 8);
  if (v277) {
    (*(void (**)(uint64_t))(*(void *)v277 + 24))(v277);
  }
  uint64_t v278 = v407[4];
  uint64_t v279 = *(void *)(v278 + 640);
  uint64_t v280 = *(unint64_t **)(v278 + 648);
  uint64_t v281 = *(void *)(v407[12] + 8) + 622896;
  uint64_t v282 = *(llvm::MachineFunction **)(v279 + 32);
  int v283 = (unsigned __int8 *)v407[9];
  v409[0] = v283;
  if (v283) {
    llvm::MetadataTracking::track((uint64_t)v409, v283, 2);
  }
  int v284 = llvm::MachineFunction::CreateMachineInstr(v282, v281, v409, 0);
  if (v409[0])
  {
    int v384 = *v409[0];
    if ((v384 - 4) > 0x1E)
    {
      if ((v384 - 3) >= 0xFFFFFFFE) {
        long long v391 = v409[0];
      }
      else {
        long long v391 = 0;
      }
      if ((v384 - 3) < 0xFFFFFFFE)
      {
        if (v384 == 3) {
          *((void *)v409[0] + 1) = 0;
        }
        goto LABEL_361;
      }
      unint64_t v386 = (unint64_t)(v391 + 8);
    }
    else
    {
      if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
        goto LABEL_361;
      }
      uint64_t v385 = *((void *)v409[0] + 2);
      if ((v385 & 4) == 0) {
        goto LABEL_361;
      }
      unint64_t v386 = v385 & 0xFFFFFFFFFFFFFFF8;
      if (!v386) {
        goto LABEL_361;
      }
    }
    *(void *)&long long v413 = v409;
    sub_1CC5FA668(v386 + 16, &v413);
  }
LABEL_361:
  uint64_t v285 = *(void *)(v279 + 40);
  *((void *)v284 + 3) = v285;
  uint64_t v286 = *(void *)(v285 + 32);
  uint64_t v287 = *((unsigned int *)v284 + 10);
  int v288 = v405;
  if (v287)
  {
    uint64_t v353 = *((void *)v284 + 4);
    uint64_t v354 = *(void *)(v286 + 40);
    uint64_t v355 = 32 * v287;
    do
    {
      if (!*(unsigned char *)v353)
      {
        uint64_t v356 = *(unsigned int *)(v353 + 4);
        if ((int)v356 >= 0) {
          int v357 = (uint64_t *)(*(void *)(v354 + 272) + 8 * v356);
        }
        else {
          int v357 = (uint64_t *)(*(void *)(v354 + 24) + 16 * (v356 & 0x7FFFFFFF) + 8);
        }
        uint64_t v358 = *v357;
        if (*v357)
        {
          uint64_t v359 = *(void *)(v358 + 16);
          *(void *)(v358 + 16) = v353;
          *(void *)(v353 + 16) = v359;
          if (*(unsigned char *)(v353 + 3))
          {
            *(void *)(v353 + 24) = v358;
          }
          else
          {
            *(void *)(v353 + 24) = 0;
            int v357 = (uint64_t *)(v359 + 24);
          }
        }
        else
        {
          *(void *)(v353 + 16) = v353;
          *(void *)(v353 + 24) = 0;
        }
        *int v357 = v353;
        int v288 = v405;
      }
      v353 += 32;
      v355 -= 32;
    }
    while (v355);
  }
  uint64_t v289 = *(void *)(v286 + 728);
  if (v289) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v289 + 24))(v289, v284);
  }
  unint64_t v290 = *v280 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v284 = v290 | *(void *)v284 & 7;
  *((void *)v284 + 1) = v280;
  *(void *)(v290 + 8) = v284;
  *uint64_t v280 = *v280 & 7 | (unint64_t)v284;
  *((void *)&v413 + 1) = 0;
  long long v414 = 0uLL;
  LODWORD(v413) = 0x1000000;
  DWORD1(v413) = v288;
  llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)&v413);
  LODWORD(v413) = 1;
  *((void *)&v413 + 1) = 0;
  *(void *)&long long v414 = 0;
  llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)&v413);
  long long v414 = 0uLL;
  long long v413 = __PAIR64__(v399, v393);
  llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)&v413);
  LODWORD(v413) = 1;
  *((void *)&v413 + 1) = 0;
  *(void *)&long long v414 = 0;
  llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)&v413);
  LODWORD(v413) = 1;
  *((void *)&v413 + 1) = 0;
  *(void *)&long long v414 = 0x100000001;
  llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)&v413);
  LODWORD(v413) = 1;
  *((void *)&v413 + 1) = 0;
  *(void *)&long long v414 = 0;
  llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)&v413);
  long long v413 = 0u;
  long long v414 = 0u;
  llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)&v413);
LABEL_366:
  int v291 = 0;
  uint64_t v292 = (_UNKNOWN ***)(*(void *)(*(void *)(v407[6] + 24) + 16 * (v288 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (v292 != &off_1E66A4180 && v292 != &off_1E66A41C8)
  {
    sub_1CD3CB380((uint64_t)v407, v288, 1);
    int v291 = 256;
  }
  int v400 = v291;
  int v406 = v288;
  uint64_t v293 = v407[4];
  uint64_t v294 = *(void *)(v293 + 640);
  int v295 = *(unint64_t **)(v293 + 648);
  uint64_t v296 = *(void *)(v407[12] + 8) + 48 * v253;
  uint64_t v297 = *(llvm::MachineFunction **)(v294 + 32);
  int v298 = (unsigned __int8 *)v407[9];
  v409[0] = v298;
  if (v298) {
    llvm::MetadataTracking::track((uint64_t)v409, v298, 2);
  }
  int v299 = llvm::MachineFunction::CreateMachineInstr(v297, v296, v409, 0);
  if (v409[0])
  {
    int v370 = *v409[0];
    if ((v370 - 4) > 0x1E)
    {
      if ((v370 - 3) >= 0xFFFFFFFE) {
        unint64_t v387 = v409[0];
      }
      else {
        unint64_t v387 = 0;
      }
      if ((v370 - 3) < 0xFFFFFFFE)
      {
        if (v370 == 3) {
          *((void *)v409[0] + 1) = 0;
        }
        goto LABEL_372;
      }
      unint64_t v372 = (unint64_t)(v387 + 8);
    }
    else
    {
      if ((v409[0][1] & 0x7F) != 2 && !*((_DWORD *)v409[0] + 3)) {
        goto LABEL_372;
      }
      uint64_t v371 = *((void *)v409[0] + 2);
      if ((v371 & 4) == 0) {
        goto LABEL_372;
      }
      unint64_t v372 = v371 & 0xFFFFFFFFFFFFFFF8;
      if (!v372) {
        goto LABEL_372;
      }
    }
    *(void *)&long long v413 = v409;
    sub_1CC5FA668(v372 + 16, &v413);
  }
LABEL_372:
  uint64_t v300 = *(void *)(v294 + 40);
  *((void *)v299 + 3) = v300;
  uint64_t v301 = *(void *)(v300 + 32);
  uint64_t v302 = *((unsigned int *)v299 + 10);
  int v303 = v402;
  if (v302)
  {
    uint64_t v325 = *((void *)v299 + 4);
    uint64_t v326 = *(void *)(v301 + 40);
    uint64_t v327 = 32 * v302;
    do
    {
      if (!*(unsigned char *)v325)
      {
        uint64_t v328 = *(unsigned int *)(v325 + 4);
        if ((int)v328 >= 0) {
          uint64_t v329 = (uint64_t *)(*(void *)(v326 + 272) + 8 * v328);
        }
        else {
          uint64_t v329 = (uint64_t *)(*(void *)(v326 + 24) + 16 * (v328 & 0x7FFFFFFF) + 8);
        }
        uint64_t v330 = *v329;
        if (*v329)
        {
          uint64_t v331 = *(void *)(v330 + 16);
          *(void *)(v330 + 16) = v325;
          *(void *)(v325 + 16) = v331;
          if (*(unsigned char *)(v325 + 3))
          {
            *(void *)(v325 + 24) = v330;
          }
          else
          {
            *(void *)(v325 + 24) = 0;
            uint64_t v329 = (uint64_t *)(v331 + 24);
          }
        }
        else
        {
          *(void *)(v325 + 16) = v325;
          *(void *)(v325 + 24) = 0;
        }
        *uint64_t v329 = v325;
        int v303 = v402;
      }
      v325 += 32;
      v327 -= 32;
    }
    while (v327);
  }
  uint64_t v304 = *(void *)(v301 + 728);
  if (v304) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v304 + 24))(v304, v299);
  }
  unint64_t v305 = *v295 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v299 = v305 | *(void *)v299 & 7;
  *((void *)v299 + 1) = v295;
  *(void *)(v305 + 8) = v299;
  *int v295 = *v295 & 7 | (unint64_t)v299;
  *((void *)&v413 + 1) = 0;
  long long v414 = 0uLL;
  LODWORD(v413) = 0x1000000;
  DWORD1(v413) = v303;
  llvm::MachineInstr::addOperand(v299, v297, (const llvm::MachineOperand *)&v413);
  long long v414 = 0uLL;
  long long v413 = __PAIR64__(v406, v400);
  llvm::MachineInstr::addOperand(v299, v297, (const llvm::MachineOperand *)&v413);
  if (!v34)
  {
    LODWORD(v413) = 1;
    *((void *)&v413 + 1) = 0;
    *(void *)&long long v414 = v396;
    llvm::MachineInstr::addOperand(v299, v297, (const llvm::MachineOperand *)&v413);
  }
  LODWORD(v413) = 1;
  *((void *)&v413 + 1) = 0;
  *(void *)&long long v414 = 0;
  llvm::MachineInstr::addOperand(v299, v297, (const llvm::MachineOperand *)&v413);
  LODWORD(v413) = 1;
  *((void *)&v413 + 1) = 0;
  *(void *)&long long v414 = 0;
  llvm::MachineInstr::addOperand(v299, v297, (const llvm::MachineOperand *)&v413);
  long long v413 = 0u;
  long long v414 = 0u;
  llvm::MachineInstr::addOperand(v299, v297, (const llvm::MachineOperand *)&v413);
  uint64_t v306 = (unsigned __int8 *)(v36 & 0xFFFFFFFFFFFFFFFBLL);
  unsigned int v307 = *(_DWORD *)(*(void *)v36 + 8);
  if ((v307 & 0xFE) == 0x12) {
    unsigned int v307 = *(_DWORD *)(**(void **)(*(void *)v36 + 16) + 8);
  }
  BOOL v308 = *(llvm::MachineFunction **)(*((void *)v299 + 3) + 32);
  v409[0] = v306;
  v409[1] = 0;
  unsigned int v410 = v307 >> 8;
  char v411 = 0;
  unint64_t v309 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F;
  long long v413 = 0u;
  long long v414 = 0u;
  uint64_t v4 = 1;
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v308, (uint64_t)v409, 1, (unsigned __int16)v38 >> 3, v309, &v413, 0, 1, 0, 0, 0);
  *((_WORD *)MachineMemOperand + 16) |= 0x20u;
  llvm::MachineInstr::addMemOperand(v299, v308, MachineMemOperand);
  if (v303 != v255)
  {
    uint64_t v234 = v407;
    int v235 = v255;
    int v236 = v303;
    unsigned int v237 = v38;
    goto LABEL_381;
  }
  return v4;
}

uint64_t sub_1CB874650(uint64_t **a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v36 = 0;
  uint64_t IncompleteVirtualRegister = 0;
  if (!sub_1CB874980(a1, a4, (const llvm::APFloat *)((char *)&v36 + 4), &v36)) {
    return IncompleteVirtualRegister;
  }
  int v9 = HIDWORD(v36);
  if (!HIDWORD(v36)) {
    return a3;
  }
  uint64_t v10 = a2[6];
  uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(void *)(*(void *)(v10 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A43C8;
  uint64_t v11 = *(void *)(v10 + 8);
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
    if (!IncompleteVirtualRegister) {
      return IncompleteVirtualRegister;
    }
  }
  else if (!IncompleteVirtualRegister)
  {
    return IncompleteVirtualRegister;
  }
  uint64_t v12 = a2[4];
  uint64_t v13 = *(void *)(v12 + 640);
  unsigned int v14 = *(unint64_t **)(v12 + 648);
  uint64_t v15 = *(void *)(a2[12] + 8) + 432;
  unsigned int v16 = *(llvm::MachineFunction **)(v13 + 32);
  int v17 = (unsigned __int8 *)a2[9];
  int v37 = v17;
  if (v17) {
    llvm::MetadataTracking::track((uint64_t)&v37, v17, 2);
  }
  uint64_t v18 = llvm::MachineFunction::CreateMachineInstr(v16, v15, &v37, 0);
  if (v37)
  {
    int v32 = *v37;
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        BOOL v35 = v37;
      }
      else {
        BOOL v35 = 0;
      }
      if ((v32 - 3) < 0xFFFFFFFE)
      {
        if (v32 == 3) {
          *((void *)v37 + 1) = 0;
        }
        goto LABEL_8;
      }
      unint64_t v34 = (unint64_t)(v35 + 8);
    }
    else
    {
      if ((v37[1] & 0x7F) != 2 && !*((_DWORD *)v37 + 3)) {
        goto LABEL_8;
      }
      uint64_t v33 = *((void *)v37 + 2);
      if ((v33 & 4) == 0) {
        goto LABEL_8;
      }
      unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      if (!v34) {
        goto LABEL_8;
      }
    }
    unsigned int v38 = &v37;
    sub_1CC5FA668(v34 + 16, &v38);
  }
LABEL_8:
  uint64_t v19 = *(void *)(v13 + 40);
  *((void *)v18 + 3) = v19;
  uint64_t v20 = *(void *)(v19 + 32);
  uint64_t v21 = *((unsigned int *)v18 + 10);
  if (v21)
  {
    uint64_t v25 = *((void *)v18 + 4);
    uint64_t v26 = *(void *)(v20 + 40);
    uint64_t v27 = 32 * v21;
    do
    {
      if (!*(unsigned char *)v25)
      {
        uint64_t v28 = *(unsigned int *)(v25 + 4);
        if ((int)v28 >= 0) {
          unint64_t v29 = (uint64_t *)(*(void *)(v26 + 272) + 8 * v28);
        }
        else {
          unint64_t v29 = (uint64_t *)(*(void *)(v26 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
        }
        uint64_t v30 = *v29;
        if (*v29)
        {
          uint64_t v31 = *(void *)(v30 + 16);
          *(void *)(v30 + 16) = v25;
          *(void *)(v25 + 16) = v31;
          if (*(unsigned char *)(v25 + 3))
          {
            *(void *)(v25 + 24) = v30;
          }
          else
          {
            *(void *)(v25 + 24) = 0;
            unint64_t v29 = (uint64_t *)(v31 + 24);
          }
        }
        else
        {
          *(void *)(v25 + 16) = v25;
          *(void *)(v25 + 24) = 0;
        }
        *unint64_t v29 = v25;
      }
      v25 += 32;
      v27 -= 32;
    }
    while (v27);
  }
  uint64_t v22 = *(void *)(v20 + 728);
  if (v22) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, v18);
  }
  unint64_t v23 = *v14 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v18 = v23 | *(void *)v18 & 7;
  *((void *)v18 + 1) = v14;
  *(void *)(v23 + 8) = v18;
  *unsigned int v14 = *v14 & 7 | (unint64_t)v18;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  LODWORD(v38) = 0x1000000;
  HIDWORD(v38) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v38);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  LODWORD(v38) = 0;
  HIDWORD(v38) = a3;
  uint64_t v41 = 0;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v38);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  LODWORD(v38) = (v36 & 0xFFF) << 8;
  HIDWORD(v38) = v9;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v38);
  LODWORD(v38) = 1;
  uint64_t v39 = 0;
  uint64_t v40 = a5;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v38);
  return IncompleteVirtualRegister;
}

uint64_t sub_1CB874980(uint64_t **a1, unsigned int a2, const llvm::APFloat *a3, _DWORD *a4)
{
  uint64_t v4 = a1[3];
  *(_DWORD *)a3 = 0;
  *a4 = 0;
  uint64_t v5 = **a1;
  unsigned int v6 = *(_DWORD *)(*(void *)(v5 + 64) + 4 * a2);
  if (v6 == -1) {
    return 1;
  }
  unsigned int v8 = *(_DWORD *)a1[1];
  int v9 = *(unsigned __int8 **)(v5 + 32 * (v6 / v8) - 64);
  int v10 = v9[16];
  if ((v10 - 11) < 2) {
    return 1;
  }
  unsigned int v13 = v6 % v8;
  if (v10 == 13)
  {
    uint64_t v16 = *(void *)v9;
    if (*(_DWORD *)(*(void *)v9 + 8) == 17 || (*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 18) {
      uint64_t v24 = (llvm::Constant **)(v16 + 24);
    }
    else {
      uint64_t v24 = (llvm::Constant **)(*(void *)(v16 + 16) + 8 * v13);
    }
    NullValue = llvm::Constant::getNullValue(*v24, (llvm::Type *)v9, a3);
    uint64_t v19 = a1[2];
    uint64_t v25 = NullValue;
    uint64_t v20 = (uint64_t *)*v19;
    uint64_t v21 = v19[1];
    goto LABEL_18;
  }
  if (v10 == 10)
  {
    uint64_t v22 = a1[2];
    uint64_t v25 = *(llvm::Value **)&v9[32 * (v6 % v8) + -32 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
    uint64_t v20 = (uint64_t *)*v22;
    uint64_t v21 = v22[1];
LABEL_18:
    unint64_t v23 = sub_1CD3CDD24(v20, &v25);
    int v15 = *((_DWORD *)v23 + 2);
    if (!v15)
    {
      int v15 = (*(uint64_t (**)(uint64_t, llvm::Value *))(*(void *)v21 + 104))(v21, v25);
      *((_DWORD *)v23 + 2) = v15;
    }
    *(_DWORD *)a3 = v15;
    return v15 != 0;
  }
  uint64_t result = sub_1CB87DFFC(v4, v9);
  *(_DWORD *)a3 = result;
  if (!result) {
    return result;
  }
  sub_1CB85F3CC((uint64_t)v4, *(_DWORD *)a1[1], *(_DWORD *)a1[4], v13, (int *)a3, a4);
  int v15 = *(_DWORD *)a3;
  return v15 != 0;
}

uint64_t sub_1CB874B14(uint64_t a1, uint64_t ***a2)
{
  uint64_t v1447 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = dword_1EBCBE848++;
  if (v2 > dword_1EBCBE8D0) {
    return 0;
  }
  uint64_t v5 = a2;
  int v9 = *(void **)(a1 + 160);
  unsigned int v8 = *(void **)(a1 + 168);
  uint64_t v7 = (llvm::SmallPtrSetImplBase *)(a1 + 160);
  int v10 = a2[5];
  if (v8 == v9)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 180);
    uint64_t v12 = (uint64_t ***)&v8[v11];
    if (v11)
    {
      unint64_t v13 = 0;
      uint64_t v14 = 8 * v11;
      while ((uint64_t **)v8[v13 / 8] != v10)
      {
        v13 += 8;
        if (v14 == v13) {
          goto LABEL_22;
        }
      }
      uint64_t v12 = (uint64_t ***)&v8[v13 / 8];
    }
LABEL_22:
    int v9 = v8;
  }
  else
  {
    uint64_t v15 = *(unsigned int *)(a1 + 176);
    int v16 = v15 - 1;
    unsigned int v17 = (v15 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v12 = (uint64_t ***)&v8[v17];
    uint64_t v18 = *v12;
    if (*v12 == (uint64_t **)-1)
    {
      uint64_t v19 = 0;
LABEL_61:
      if (v19) {
        uint64_t v12 = v19;
      }
      if (*v12 != v10) {
        uint64_t v12 = (uint64_t ***)&v8[v15];
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 1;
      while (v18 != v10)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v18 == (uint64_t **)-2;
        }
        if (v21) {
          uint64_t v19 = v12;
        }
        unsigned int v22 = v17 + v20++;
        unsigned int v17 = v22 & v16;
        uint64_t v12 = (uint64_t ***)&v8[v22 & v16];
        uint64_t v18 = *v12;
        if (*v12 == (uint64_t **)-1) {
          goto LABEL_61;
        }
      }
    }
  }
  uint64_t v23 = 176;
  if (v8 == v9) {
    uint64_t v23 = 180;
  }
  if (v12 == &v8[*(unsigned int *)(a1 + v23)])
  {
    uint64_t v24 = *(unsigned int *)(a1 + 180);
    if (v8 == v9)
    {
      if (v24)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 8 * v24;
        uint64_t v27 = (uint64_t ***)v8;
        while (*v27 != v10)
        {
          if (*v27 == (uint64_t **)-2) {
            uint64_t v25 = v27;
          }
          ++v27;
          v26 -= 8;
          if (!v26)
          {
            if (!v25) {
              goto LABEL_38;
            }
            *uint64_t v25 = v10;
            --*(_DWORD *)(a1 + 184);
            break;
          }
        }
LABEL_73:
        int v10 = v5[5];
        unsigned int v42 = (uint64_t **)v10[6];
        if (v42 == v10 + 5) {
          goto LABEL_26;
        }
        while (1)
        {
          BOOL v43 = v42 - 3;
          if (!v42) {
            BOOL v43 = 0;
          }
          int v44 = *((unsigned __int8 *)v43 + 16);
          switch(*((unsigned char *)v43 + 16))
          {
            case 'T':
              uint64_t v45 = (uint64_t)*(v43 - 4);
              if (v45
                && !*(unsigned char *)(v45 + 16)
                && *(uint64_t **)(v45 + 24) == v43[9]
                && (*(unsigned char *)(v45 + 33) & 0x20) != 0
                && (*((_DWORD *)*(v42 - 7) + 9) - 2022) < 0x40
                && ((0xEF7FEF7FEF7FEF7FLL >> (*((unsigned char *)*(v42 - 7) + 36) + 26)) & 1) != 0)
              {
                return 0;
              }
              goto LABEL_117;
            case 'U':
            case 'V':
            case 'W':
            case 'X':
              goto LABEL_117;
            case 'Y':
              int v48 = *((_DWORD *)v43 + 5);
              if ((v48 & 0x40000000) != 0) {
                uint64_t v49 = *(v43 - 1);
              }
              else {
                uint64_t v49 = (uint64_t *)&v43[-4 * (v48 & 0x7FFFFFF)];
              }
              BOOL v43 = (uint64_t **)*v49;
              goto LABEL_115;
            case 'Z':
              goto LABEL_115;
            case '[':
              BOOL v50 = *v43;
              if (((*v43)[1] & 0xFE) != 0x12) {
                goto LABEL_95;
              }
              if (*((_DWORD *)v50 + 8) > 4u) {
                return 0;
              }
              BOOL v50 = *(uint64_t **)v50[2];
LABEL_95:
              if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v50) < 9) {
                return 0;
              }
              goto LABEL_117;
            case '\\':
              uint64_t v51 = **(v43 - 4);
              if (*(_DWORD *)(v51 + 12) != 2) {
                return 0;
              }
              uint64_t v52 = *(void **)(v51 + 16);
              uint64_t v53 = *v52;
              BOOL v54 = *v52 && *(unsigned char *)(*v52 + 8) == 18;
              if (!v54
                || *(_DWORD *)(v53 + 32) != 4
                || (*(unsigned __int8 *)(*(void *)(v53 + 24) + 8) | 2) != 2
                || *(_DWORD *)(v52[1] + 8) != 2061
                || *((_DWORD *)v43 + 18) != 1
                || *(_DWORD *)v43[8])
              {
                return 0;
              }
              goto LABEL_117;
            default:
              if (v44 == 60)
              {
                uint64_t v55 = **(v43 - 4);
                int v56 = *(_DWORD *)(v55 + 8);
                if ((v56 & 0xFE) == 0x12) {
                  int v56 = *(_DWORD *)(**(void **)(v55 + 16) + 8);
                }
                if ((v56 & 0xFFFFBF00) != 0) {
                  return 0;
                }
              }
              else
              {
                if (v44 != 61) {
                  goto LABEL_117;
                }
                uint64_t v46 = **(v43 - 4);
                unsigned int v47 = *(_DWORD *)(v46 + 8);
                if ((v47 & 0xFE) == 0x12) {
                  unsigned int v47 = *(_DWORD *)(**(void **)(v46 + 16) + 8);
                }
                if (v47 > 0xFF) {
                  return 0;
                }
                BOOL v43 = (uint64_t **)*(v43 - 8);
              }
LABEL_115:
              uint64_t v57 = *v43;
              if ((v57[1] & 0xFE) == 0x12 && *((_DWORD *)v57 + 8) > 4u) {
                return 0;
              }
LABEL_117:
              unsigned int v42 = (uint64_t **)v42[1];
              if (v42 == v10 + 5) {
                goto LABEL_26;
              }
              break;
          }
        }
      }
LABEL_38:
      unsigned int v28 = *(_DWORD *)(a1 + 176);
      if (v24 < v28)
      {
        *(_DWORD *)(a1 + 180) = v24 + 1;
        v8[v24] = v10;
        goto LABEL_73;
      }
    }
    else
    {
      unsigned int v28 = *(_DWORD *)(a1 + 176);
    }
    if (3 * v28 <= 4 * ((int)v24 - *(_DWORD *)(a1 + 184)))
    {
      if (v28 >= 0x40) {
        v28 *= 2;
      }
      else {
        unsigned int v28 = 128;
      }
    }
    else if (v28 - v24 >= v28 >> 3)
    {
      goto LABEL_43;
    }
    llvm::SmallPtrSetImplBase::Grow(v7, v28);
    unsigned int v28 = *(_DWORD *)(a1 + 176);
    unsigned int v8 = *(void **)(a1 + 168);
LABEL_43:
    unsigned int v29 = v28 - 1;
    unsigned int v30 = (v28 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v31 = (uint64_t ***)&v8[v30];
    int v32 = *v31;
    if (*v31 == (uint64_t **)-1)
    {
      uint64_t v33 = 0;
LABEL_66:
      if (v33) {
        uint64_t v41 = v33;
      }
      else {
        uint64_t v41 = v31;
      }
      if (*v41 != v10)
      {
        if (*v41 == (uint64_t **)-2) {
          --*(_DWORD *)(a1 + 184);
        }
        else {
          ++*(_DWORD *)(a1 + 180);
        }
        *uint64_t v41 = v10;
      }
    }
    else
    {
      uint64_t v33 = 0;
      int v34 = 1;
      while (v32 != v10)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v32 == (uint64_t **)-2;
        }
        if (v35) {
          uint64_t v33 = v31;
        }
        unsigned int v36 = v30 + v34++;
        unsigned int v30 = v36 & v29;
        uint64_t v31 = (uint64_t ***)&v8[v36 & v29];
        int v32 = *v31;
        if (*v31 == (uint64_t **)-1) {
          goto LABEL_66;
        }
      }
    }
    goto LABEL_73;
  }
LABEL_26:
  uint64_t v3 = 0;
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(*(void *)(a1 + 80) + 1020) & 1;
  switch(*((unsigned char *)v5 + 16))
  {
    case 0x1D:
      sub_1CD3CD174(a1, (uint64_t)v5);
      return 1;
    case 0x1E:
      if ((*((_DWORD *)v5 + 5) & 0x7FFFFFF) != 1)
      {
        uint64_t v112 = (uint64_t)*(v5 - 12);
        if (v112 && *(unsigned __int8 *)(v112 + 16) >= 0x1Cu && *(uint64_t ***)(v112 + 40) != v10) {
          uint64_t v112 = 0;
        }
        uint64_t v113 = *(void *)(a1 + 32);
        uint64_t v114 = (_DWORD *)(v113 + 56);
        uint64_t v115 = *(void *)(v113 + 56);
        uint64_t v116 = *(v5 - 4);
        v1438[0] = v116;
        int v117 = *(_DWORD *)(v113 + 72);
        if (v117)
        {
          int v118 = v117 - 1;
          unsigned int v119 = ((v116 >> 4) ^ (v116 >> 9)) & (v117 - 1);
          uint64_t v120 = (void *)(v115 + 16 * v119);
          uint64_t v121 = (void *)*v120;
          if (v116 == (void *)*v120)
          {
            uint64_t v126 = (void *)v120[1];
            uint64_t v127 = *(v5 - 8);
            v1438[0] = v127;
            goto LABEL_193;
          }
          uint64_t v122 = 0;
          int v123 = 1;
          while (v121 != (void *)-4096)
          {
            if (v122) {
              BOOL v124 = 0;
            }
            else {
              BOOL v124 = v121 == (void *)-8192;
            }
            if (v124) {
              uint64_t v122 = v120;
            }
            unsigned int v125 = v119 + v123++;
            unsigned int v119 = v125 & v118;
            uint64_t v120 = (void *)(v115 + 16 * v119);
            uint64_t v121 = (void *)*v120;
            if (v116 == (void *)*v120)
            {
              uint64_t v126 = (void *)v120[1];
              goto LABEL_191;
            }
          }
          if (v122) {
            uint64_t v296 = v122;
          }
          else {
            uint64_t v296 = v120;
          }
        }
        else
        {
          uint64_t v296 = 0;
        }
        uint64_t v297 = sub_1CB883BA0(v114, (uint64_t)v1438, v1438, v296);
        uint64_t v126 = 0;
        *uint64_t v297 = v1438[0];
        v297[1] = 0;
        uint64_t v113 = *(void *)(a1 + 32);
        uint64_t v115 = *(void *)(v113 + 56);
        int v117 = *(_DWORD *)(v113 + 72);
LABEL_191:
        uint64_t v114 = (_DWORD *)(v113 + 56);
        uint64_t v127 = *(v5 - 8);
        v1438[0] = v127;
        if (!v117)
        {
          int v295 = 0;
          goto LABEL_407;
        }
        int v118 = v117 - 1;
LABEL_193:
        unsigned int v128 = ((v127 >> 4) ^ (v127 >> 9)) & v118;
        uint64_t v129 = (void *)(v115 + 16 * v128);
        uint64_t v130 = (void *)*v129;
        if (v127 == (void *)*v129) {
          goto LABEL_202;
        }
        uint64_t v131 = 0;
        int v132 = 1;
        while (v130 != (void *)-4096)
        {
          if (v131) {
            BOOL v133 = 0;
          }
          else {
            BOOL v133 = v130 == (void *)-8192;
          }
          if (v133) {
            uint64_t v131 = v129;
          }
          unsigned int v134 = v128 + v132++;
          unsigned int v128 = v134 & v118;
          uint64_t v129 = (void *)(v115 + 16 * (v134 & v118));
          uint64_t v130 = (void *)*v129;
          if (v127 == (void *)*v129) {
            goto LABEL_202;
          }
        }
        if (v131) {
          int v295 = v131;
        }
        else {
          int v295 = v129;
        }
LABEL_407:
        uint64_t v129 = sub_1CB883BA0(v114, (uint64_t)v1438, v1438, v295);
        *uint64_t v129 = v1438[0];
        v129[1] = 0;
LABEL_202:
        uint64_t v135 = (void *)v129[1];
        if (v112)
        {
          int v136 = *(unsigned __int8 *)(v112 + 16);
          if (v136 == 81) {
            return sub_1CB8908FC((uint64_t *)a1, (uint64_t)v5, v112, *(void *)(v112 - 64), *(void *)(v112 - 32), v126, v135);
          }
          if (v136 == 82) {
            return sub_1CB88FFDC((void *)a1, (uint64_t)v5, v112, *(void *)(v112 - 64), *(void *)(v112 - 32), v126, v135);
          }
        }
        int v298 = sub_1CD789230((uint64_t *)a1, (uint64_t)*(v5 - 12));
        if (v298)
        {
          int v299 = v298;
          uint64_t v300 = *(void *)(a1 + 32);
          uint64_t v301 = *(void *)(v300 + 640);
          uint64_t v302 = *(unint64_t **)(v300 + 648);
          uint64_t v303 = *(void *)(*(void *)(a1 + 96) + 8) + 239904;
          uint64_t v304 = *(llvm::MachineFunction **)(v301 + 32);
          unint64_t v305 = *(void **)(a1 + 72);
          v1435[0] = v305;
          if (v305) {
            llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v305, 2);
          }
          MachineInstr = llvm::MachineFunction::CreateMachineInstr(v304, v303, (unsigned __int8 **)v1435, 0);
          if (!v1435[0])
          {
LABEL_416:
            uint64_t v307 = *(void *)(v301 + 40);
            *((void *)MachineInstr + 3) = v307;
            uint64_t v308 = *(void *)(v307 + 32);
            uint64_t v309 = *((unsigned int *)MachineInstr + 10);
            if (v309)
            {
              uint64_t v827 = *((void *)MachineInstr + 4);
              uint64_t v828 = *(void *)(v308 + 40);
              uint64_t v829 = 32 * v309;
              do
              {
                if (!*(unsigned char *)v827)
                {
                  uint64_t v830 = *(unsigned int *)(v827 + 4);
                  if ((int)v830 >= 0) {
                    int v831 = (uint64_t *)(*(void *)(v828 + 272) + 8 * v830);
                  }
                  else {
                    int v831 = (uint64_t *)(*(void *)(v828 + 24) + 16 * (v830 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v832 = *v831;
                  if (*v831)
                  {
                    uint64_t v833 = *(void *)(v832 + 16);
                    *(void *)(v832 + 16) = v827;
                    *(void *)(v827 + 16) = v833;
                    if (*(unsigned char *)(v827 + 3))
                    {
                      *(void *)(v827 + 24) = v832;
                    }
                    else
                    {
                      *(void *)(v827 + 24) = 0;
                      int v831 = (uint64_t *)(v833 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v827 + 16) = v827;
                    *(void *)(v827 + 24) = 0;
                  }
                  uint64_t *v831 = v827;
                }
                v827 += 32;
                v829 -= 32;
              }
              while (v829);
            }
            uint64_t v310 = *(void *)(v308 + 728);
            if (v310) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v310 + 24))(v310, MachineInstr);
            }
            unint64_t v311 = *v302 & 0xFFFFFFFFFFFFFFF8;
            *(void *)MachineInstr = v311 | *(void *)MachineInstr & 7;
            *((void *)MachineInstr + 1) = v302;
            *(void *)(v311 + 8) = MachineInstr;
            *uint64_t v302 = *v302 & 7 | (unint64_t)MachineInstr;
            LODWORD(v1438[0]) = 1;
            v1438[1] = 0;
            *(void *)&v1439[0] = 0;
            llvm::MachineInstr::addOperand(MachineInstr, v304, (const llvm::MachineOperand *)v1438);
            v1438[1] = 0;
            v1439[0] = 0uLL;
            LODWORD(v1438[0]) = 0;
            HIDWORD(v1438[0]) = v299;
            llvm::MachineInstr::addOperand(MachineInstr, v304, (const llvm::MachineOperand *)v1438);
            LODWORD(v1438[0]) = 1;
            v1438[1] = 0;
            *(void *)&v1439[0] = 0;
            llvm::MachineInstr::addOperand(MachineInstr, v304, (const llvm::MachineOperand *)v1438);
            LODWORD(v1438[0]) = 1;
            v1438[1] = 0;
            *(void *)&v1439[0] = 0x100000000;
            llvm::MachineInstr::addOperand(MachineInstr, v304, (const llvm::MachineOperand *)v1438);
            v1438[1] = 0;
            v1439[0] = 0uLL;
            v1438[0] = (void *)0x201000000;
            llvm::MachineInstr::addOperand(MachineInstr, v304, (const llvm::MachineOperand *)v1438);
            LODWORD(v1438[0]) = 1;
            v1438[1] = 0;
            *(void *)&v1439[0] = 0;
            llvm::MachineInstr::addOperand(MachineInstr, v304, (const llvm::MachineOperand *)v1438);
            *(_OWORD *)v1438 = 0u;
            v1439[0] = 0u;
            llvm::MachineInstr::addOperand(MachineInstr, v304, (const llvm::MachineOperand *)v1438);
            uint64_t v312 = *(void *)(a1 + 32);
            uint64_t v313 = *(void *)(v312 + 640);
            uint64_t v314 = *(unint64_t **)(v312 + 648);
            uint64_t v315 = *(void *)(*(void *)(a1 + 96) + 8) + 555648;
            uint64_t v316 = *(llvm::MachineFunction **)(v313 + 32);
            uint64_t v317 = *(void **)(a1 + 72);
            v1435[0] = v317;
            if (v317) {
              llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v317, 2);
            }
            uint64_t v318 = llvm::MachineFunction::CreateMachineInstr(v316, v315, (unsigned __int8 **)v1435, 0);
            if (!v1435[0]) {
              goto LABEL_422;
            }
            int v1282 = *(unsigned __int8 *)v1435[0];
            if ((v1282 - 4) > 0x1E)
            {
              if ((v1282 - 3) >= 0xFFFFFFFE) {
                v1305 = v1435[0];
              }
              else {
                v1305 = 0;
              }
              if ((v1282 - 3) < 0xFFFFFFFE)
              {
                if (v1282 == 3) {
                  *((void *)v1435[0] + 1) = 0;
                }
                goto LABEL_422;
              }
              unint64_t v1284 = (unint64_t)v1305 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                goto LABEL_422;
              }
              uint64_t v1283 = *((void *)v1435[0] + 2);
              if ((v1283 & 4) == 0) {
                goto LABEL_422;
              }
              unint64_t v1284 = v1283 & 0xFFFFFFFFFFFFFFF8;
              if (!v1284) {
                goto LABEL_422;
              }
            }
            v1438[0] = v1435;
            sub_1CC5FA668(v1284 + 16, v1438);
LABEL_422:
            uint64_t v319 = *(void *)(v313 + 40);
            *((void *)v318 + 3) = v319;
            uint64_t v320 = *(void *)(v319 + 32);
            uint64_t v321 = *((unsigned int *)v318 + 10);
            if (v321)
            {
              uint64_t v834 = *((void *)v318 + 4);
              uint64_t v835 = *(void *)(v320 + 40);
              uint64_t v836 = 32 * v321;
              do
              {
                if (!*(unsigned char *)v834)
                {
                  uint64_t v837 = *(unsigned int *)(v834 + 4);
                  if ((int)v837 >= 0) {
                    uint64_t v838 = (uint64_t *)(*(void *)(v835 + 272) + 8 * v837);
                  }
                  else {
                    uint64_t v838 = (uint64_t *)(*(void *)(v835 + 24) + 16 * (v837 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v839 = *v838;
                  if (*v838)
                  {
                    uint64_t v840 = *(void *)(v839 + 16);
                    *(void *)(v839 + 16) = v834;
                    *(void *)(v834 + 16) = v840;
                    if (*(unsigned char *)(v834 + 3))
                    {
                      *(void *)(v834 + 24) = v839;
                    }
                    else
                    {
                      *(void *)(v834 + 24) = 0;
                      uint64_t v838 = (uint64_t *)(v840 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v834 + 16) = v834;
                    *(void *)(v834 + 24) = 0;
                  }
                  uint64_t *v838 = v834;
                }
                v834 += 32;
                v836 -= 32;
              }
              while (v836);
            }
            uint64_t v322 = *(void *)(v320 + 728);
            if (v322) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v322 + 24))(v322, v318);
            }
            unint64_t v323 = *v314 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v318 = v323 | *(void *)v318 & 7;
            *((void *)v318 + 1) = v314;
            *(void *)(v323 + 8) = v318;
            unint64_t *v314 = *v314 & 7 | (unint64_t)v318;
            v1438[1] = 0;
            *(void *)&v1439[0] = v126;
            LODWORD(v1438[0]) = 4;
            llvm::MachineInstr::addOperand(v318, v316, (const llvm::MachineOperand *)v1438);
            LODWORD(v1438[0]) = 1;
            v1438[1] = 0;
            *(void *)&v1439[0] = 1;
            llvm::MachineInstr::addOperand(v318, v316, (const llvm::MachineOperand *)v1438);
            uint64_t v324 = *(void *)(a1 + 96);
            v1438[0] = v1439;
            v1438[1] = 0;
            (*(void (**)(void))(*(void *)v324 + 272))();
            if (v1438[0] != v1439) {
              free(v1438[0]);
            }
            llvm::MachineBasicBlock::addSuccessor(*(void **)(*(void *)(a1 + 32) + 640), v135, -1);
            llvm::MachineBasicBlock::addSuccessor(*(void **)(*(void *)(a1 + 32) + 640), v126, -1);
            return 1;
          }
          int v1279 = *(unsigned __int8 *)v1435[0];
          if ((v1279 - 4) > 0x1E)
          {
            if ((v1279 - 3) >= 0xFFFFFFFE) {
              uint64_t v1304 = v1435[0];
            }
            else {
              uint64_t v1304 = 0;
            }
            if ((v1279 - 3) < 0xFFFFFFFE)
            {
              if (v1279 == 3) {
                *((void *)v1435[0] + 1) = 0;
              }
              goto LABEL_416;
            }
            unint64_t v1281 = (unint64_t)v1304 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
              goto LABEL_416;
            }
            uint64_t v1280 = *((void *)v1435[0] + 2);
            if ((v1280 & 4) == 0) {
              goto LABEL_416;
            }
            unint64_t v1281 = v1280 & 0xFFFFFFFFFFFFFFF8;
            if (!v1281) {
              goto LABEL_416;
            }
          }
          v1438[0] = v1435;
          sub_1CC5FA668(v1281 + 16, v1438);
          goto LABEL_416;
        }
        return 0;
      }
      v1438[0] = *(v5 - 4);
      int v370 = sub_1CD3CE844((_DWORD *)(*(void *)(a1 + 32) + 56), v1438);
      sub_1CD78B880(a1, (uint64_t *)v370[1], (uint64_t)(v5 + 6));
      return 1;
    case 0x28:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x31:
      int v245 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v245) {
        return 0;
      }
      BOOL v246 = *((unsigned __int8 *)*v5 + 8) != 2;
      return sub_1CB88AA74(a1, (unsigned __int8 *)v5, v245, v246, 0, 0);
    case 0x29:
    case 0x2B:
      uint64_t v275 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v275) {
        return 0;
      }
      uint64_t v276 = (const llvm::APInt *)v275;
      if (sub_1CD3CEC94((uint64_t *)a1, (uint64_t)v5, v275)) {
        return 1;
      }
      return sub_1CB884E4C((uint64_t *)a1, (uint64_t *)v5, v276);
    case 0x2D:
      return sub_1CB891AF8((uint64_t *)a1, v5);
    case 0x35:
    case 0x36:
    case 0x37:
      return sub_1CB8911DC((uint64_t *)a1, (uint64_t)v5);
    case 0x38:
    case 0x39:
    case 0x3A:
      uint64_t v3 = 0;
      int v37 = (llvm::MachineInstr *)*v5;
      if (*((_DWORD *)*v5 + 2) != 13
        || (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(vdupq_n_s32(*((_DWORD *)*v5 + 2) >> 8), (int32x4_t)xmmword_1CD91C120), (int8x16_t)xmmword_1CD91C130)) & 0xF) == 0)
      {
        return v3;
      }
      int v38 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v38) {
        return 0;
      }
      int v1426 = v38;
      if (sub_1CB866588((uint64_t)v5))
      {
        int v39 = *((_DWORD *)v5 + 5);
        if ((v39 & 0x40000000) != 0) {
          uint64_t v40 = (uint64_t *)*(v5 - 1);
        }
        else {
          uint64_t v40 = (uint64_t *)&v5[-4 * (v39 & 0x7FFFFFF)];
        }
        uint64_t v463 = *v40;
        if (!v463
          || ((v464 = *(unsigned __int8 *)(v463 + 16), v464 >= 0x1C) ? (BOOL v465 = v464 - 56 >= 3) : (BOOL v465 = 1), v465))
        {
          int v377 = 0;
          char v1417 = 1;
          int v376 = 10;
          uint64_t v378 = 1;
        }
        else
        {
          char v1417 = 0;
          int v376 = 1;
          uint64_t v378 = 2;
          int v377 = 1;
          uint64_t v5 = (uint64_t ***)v463;
        }
      }
      else
      {
        int v376 = 0;
        char v1417 = 0;
        int v377 = 1;
        uint64_t v378 = 2;
      }
      v1435[0] = 0;
      v1435[1] = 0;
      int v466 = *((_DWORD *)v5 + 5);
      if ((v466 & 0x40000000) != 0) {
        unint64_t v467 = (uint64_t *)*(v5 - 1);
      }
      else {
        unint64_t v467 = (uint64_t *)&v5[-4 * (v466 & 0x7FFFFFF)];
      }
      uint64_t v468 = *v467;
      uint64_t v469 = v467[4];
      v1440.i64[0] = *v467;
      v1440.i64[1] = v469;
      int8x16_t v1446 = 0uLL;
      v1444 = v37;
      int32x2_t v1445 = 0;
      int32x2_t v1434 = 0;
      v1443 = v37;
      int v1412 = v377;
      if (v377)
      {
        if (sub_1CB866588(v469))
        {
          v1440.i64[0] = v469;
          v1440.i64[1] = v468;
        }
        else
        {
          uint64_t v469 = v468;
        }
        if (sub_1CB866588(v469))
        {
          v376 |= 2u;
          int v470 = *(_DWORD *)(v469 + 20);
          if ((v470 & 0x40000000) != 0) {
            int v471 = *(uint64_t **)(v469 - 8);
          }
          else {
            int v471 = (uint64_t *)(v469 - 32 * (v470 & 0x7FFFFFF));
          }
          v1440.i64[0] = *v471;
        }
        int v512 = *((unsigned __int8 *)v5 + 16);
        int v513 = v376 + 4;
        if (v512 != 57) {
          int v513 = v376 + 8;
        }
        if (v512 != 56) {
          int v376 = v513;
        }
      }
      uint64_t v514 = 0;
      v515 = &v1445;
      uint64_t v516 = &v1434;
      do
      {
        uint64_t v517 = (unsigned char *)v1440.i64[v514];
        if (v517) {
          BOOL v518 = v517[16] == 16;
        }
        else {
          BOOL v518 = 0;
        }
        if (v518)
        {
          v1435[v514] = v517;
        }
        else
        {
          v1446.i64[v514] = (uint64_t)v517;
          __int32 v519 = sub_1CD3CE8A4((uint64_t *)a1, &v1446.i64[v514], v516, (llvm::MachineFunction **)((char *)&v1443 + v514 * 8), (uint64_t)v5[5], 0, 0);
          v515->i32[0] = v519;
          if (!v519) {
            return 0;
          }
        }
        v515 = (int32x2_t *)((char *)v515 + 4);
        ++v514;
        uint64_t v516 = (int32x2_t *)((char *)v516 + 4);
      }
      while (v378 != v514);
      uint64_t v520 = v1435[0];
      if (v1435[0])
      {
        if (v1435[1]) {
          char v521 = 1;
        }
        else {
          char v521 = v1417;
        }
        if (v521) {
          return 0;
        }
        unint64_t v522 = v1443;
        uint64_t v523 = v1444;
        int v524 = v376;
        if (v1412)
        {
          BOOL v525 = 0;
          int8x16_t v1446 = vextq_s8(v1446, v1446, 8uLL);
          int32x2_t v1445 = vrev64_s32(v1445);
          v1435[0] = 0;
          v1435[1] = v520;
          int32x2_t v1434 = vrev64_s32(v1434);
          v1443 = v1444;
          v1444 = v522;
          uint64_t v526 = v522;
          unint64_t v522 = v523;
        }
        else
        {
          BOOL v525 = 1;
          uint64_t v526 = v1444;
        }
      }
      else
      {
        BOOL v525 = v1435[1] == 0;
        unint64_t v522 = v1443;
        uint64_t v526 = v1444;
        int v524 = v376;
      }
      int v549 = *((_DWORD *)v37 + 2) >> 8;
      BOOL v550 = v549 == 64;
      int v551 = v549 == 32 && *((_DWORD *)v37 + 2) == 13;
      unsigned int v552 = *((_DWORD *)v522 + 2);
      BOOL v553 = v552 == 13;
      v552 >>= 8;
      BOOL v554 = v552 == 64;
      unsigned int v555 = v552 == 32 && v553;
      unsigned int v556 = *((_DWORD *)v526 + 2);
      BOOL v557 = v556 == 13;
      v556 >>= 8;
      BOOL v558 = v556 == 64;
      uint64_t v559 = v556 == 32 && v557;
      if (v557 && v558) {
        uint64_t v559 = 2;
      }
      if (*((_DWORD *)v37 + 2) == 13 && v550) {
        int v551 = 2;
      }
      if (v553 && v554) {
        unsigned int v555 = 2;
      }
      if (v525) {
        uint64_t v560 = v559;
      }
      else {
        uint64_t v560 = 2;
      }
      unsigned int v561 = *((unsigned __int16 *)&word_1CD91C480 + 12 * v524 + 6 * v551 + 3 * v555 + v560);
      uint64_t v562 = *(void *)(a1 + 32);
      uint64_t v563 = *(void *)(v562 + 640);
      v564 = *(unint64_t **)(v562 + 648);
      uint64_t v565 = *(void *)(*(void *)(a1 + 96) + 8) + 48 * v561;
      uint64_t v566 = *(llvm::MachineFunction **)(v563 + 32);
      uint64_t v567 = *(unsigned __int8 **)(a1 + 72);
      v1432 = v567;
      if (v567) {
        llvm::MetadataTracking::track((uint64_t)&v1432, v567, 2);
      }
      uint64_t v568 = llvm::MachineFunction::CreateMachineInstr(v566, v565, &v1432, 0);
      if (!v1432) {
        goto LABEL_734;
      }
      int v1285 = *v1432;
      if ((v1285 - 4) > 0x1E)
      {
        if ((v1285 - 3) >= 0xFFFFFFFE) {
          unint64_t v1306 = v1432;
        }
        else {
          unint64_t v1306 = 0;
        }
        if ((v1285 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1287 = (unint64_t)(v1306 + 8);
LABEL_1909:
          v1438[0] = &v1432;
          sub_1CC5FA668(v1287 + 16, v1438);
          goto LABEL_734;
        }
        if (v1285 == 3) {
          *((void *)v1432 + 1) = 0;
        }
      }
      else if ((v1432[1] & 0x7F) == 2 || *((_DWORD *)v1432 + 3))
      {
        uint64_t v1286 = *((void *)v1432 + 2);
        if ((v1286 & 4) != 0)
        {
          unint64_t v1287 = v1286 & 0xFFFFFFFFFFFFFFF8;
          if (v1287) {
            goto LABEL_1909;
          }
        }
      }
LABEL_734:
      uint64_t v569 = *(void *)(v563 + 40);
      *((void *)v568 + 3) = v569;
      uint64_t v570 = *(void *)(v569 + 32);
      uint64_t v571 = *((unsigned int *)v568 + 10);
      if (v571)
      {
        uint64_t v841 = *((void *)v568 + 4);
        uint64_t v842 = *(void *)(v570 + 40);
        uint64_t v843 = 32 * v571;
        do
        {
          if (!*(unsigned char *)v841)
          {
            uint64_t v844 = *(unsigned int *)(v841 + 4);
            if ((int)v844 >= 0) {
              unint64_t v845 = (uint64_t *)(*(void *)(v842 + 272) + 8 * v844);
            }
            else {
              unint64_t v845 = (uint64_t *)(*(void *)(v842 + 24) + 16 * (v844 & 0x7FFFFFFF) + 8);
            }
            uint64_t v846 = *v845;
            if (*v845)
            {
              uint64_t v847 = *(void *)(v846 + 16);
              *(void *)(v846 + 16) = v841;
              *(void *)(v841 + 16) = v847;
              if (*(unsigned char *)(v841 + 3))
              {
                *(void *)(v841 + 24) = v846;
              }
              else
              {
                *(void *)(v841 + 24) = 0;
                unint64_t v845 = (uint64_t *)(v847 + 24);
              }
            }
            else
            {
              *(void *)(v841 + 16) = v841;
              *(void *)(v841 + 24) = 0;
            }
            *unint64_t v845 = v841;
          }
          v841 += 32;
          v843 -= 32;
        }
        while (v843);
      }
      uint64_t v572 = *(void *)(v570 + 728);
      if (v572) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v572 + 24))(v572, v568);
      }
      unint64_t v573 = *v564 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v568 = v573 | *(void *)v568 & 7;
      *((void *)v568 + 1) = v564;
      *(void *)(v573 + 8) = v568;
      unint64_t *v564 = *v564 & 7 | (unint64_t)v568;
      v1438[1] = 0;
      v1439[0] = 0uLL;
      LODWORD(v1438[0]) = 0x1000000;
      HIDWORD(v1438[0]) = v1426;
      llvm::MachineInstr::addOperand(v568, v566, (const llvm::MachineOperand *)v1438);
      LODWORD(v1438[0]) = 1;
      v1438[1] = 0;
      *(void *)&v1439[0] = 0;
      llvm::MachineInstr::addOperand(v568, v566, (const llvm::MachineOperand *)v1438);
      v1432 = (unsigned __int8 *)v566;
      v1433 = v568;
      uint64_t v574 = &v1445;
      uint64_t v575 = &v1446;
      uint64_t v576 = v1435;
      do
      {
        uint64_t v577 = (char *)*v576;
        if (*v576)
        {
          v578 = (unint64_t *)(v577 + 24);
          if (*((_DWORD *)v577 + 8) >= 0x41u) {
            v578 = (unint64_t *)*v578;
          }
          unint64_t v579 = *v578;
          if (v579 < 0x10000) {
            v579 |= 0x100000000uLL;
          }
          uint64_t v581 = (llvm::MachineFunction *)v1432;
          uint64_t v580 = v1433;
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = v579;
        }
        else
        {
          if ((sub_1CB8843D8(a1, v575->i64[0], 0, (llvm::MachineFunction **)&v1432, 0) & 1) == 0)
          {
            __int32 v582 = v574->i32[0];
            v1438[1] = 0;
            LODWORD(v1438[0]) = 0;
            HIDWORD(v1438[0]) = v582;
            v1439[0] = 0uLL;
            llvm::MachineInstr::addOperand(v1433, (llvm::MachineFunction *)v1432, (const llvm::MachineOperand *)v1438);
          }
          uint64_t v581 = (llvm::MachineFunction *)v1432;
          uint64_t v580 = v1433;
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
        }
        llvm::MachineInstr::addOperand(v580, v581, (const llvm::MachineOperand *)v1438);
        uint64_t v574 = (int32x2_t *)((char *)v574 + 4);
        uint64_t v575 = (int8x16_t *)((char *)v575 + 8);
        ++v576;
        --v378;
      }
      while (v378);
      uint64_t v3 = 1;
      LODWORD(v1438[0]) = 1;
      v1438[1] = 0;
      *(void *)&v1439[0] = 0;
      llvm::MachineInstr::addOperand(v1433, (llvm::MachineFunction *)v1432, (const llvm::MachineOperand *)v1438);
      uint64_t v294 = (llvm::MachineFunction *)v1432;
      uint64_t v293 = v1433;
      goto LABEL_882;
    case 0x3C:
      return sub_1CD3CC9B8((uint64_t *)a1, (uint64_t)v5);
    case 0x3D:
      uint64_t v154 = (uint64_t)*(v5 - 4);
      unsigned int v155 = *(_DWORD *)(*(void *)v154 + 8);
      if ((v155 & 0xFE) == 0x12) {
        unsigned int v155 = *(_DWORD *)(**(void **)(*(void *)v154 + 16) + 8);
      }
      if (v155 > 0xFF) {
        return 0;
      }
      uint64_t v156 = *(unsigned __int8 *)(*(void *)(a1 + 256) + 280);
      uint64_t v157 = (uint64_t *)*(v5 - 8);
      uint64_t v158 = *v157;
      LODWORD(v1443) = 0;
      LODWORD(v1432) = 0;
      v1445.i32[0] = 0;
      if (sub_1CB85A994(a1, v158, (int *)&v1443))
      {
        if ((int v162 = (int)v1443, v1443 <= 0x30) && ((1 << (char)v1443) & 0x1000000010100) != 0
          || (int)v1443 <= 512 && (v1443 & 0x1F) == 0)
        {
          if (sub_1CB85A548(a1, v154, &v1445, &v1432, v159, v160, v161))
          {
            unsigned int v531 = (v162 >> 5) + 2;
            if (v162 <= 0x3F) {
              unsigned int v531 = v162 >> 4;
            }
            if (v162 <= 31) {
              unsigned int v531 = v162 / 8 - 1;
            }
            unsigned int v532 = *((_DWORD *)&dword_1CD91C588 + 2 * v531 + v156);
            int v533 = sub_1CD3CA6C8(a1, (uint64_t)v157, 0);
            if (v533)
            {
              int v534 = v533;
              uint64_t v535 = *(void *)(a1 + 32);
              uint64_t v536 = *(void *)(v535 + 640);
              uint64_t v537 = *(unint64_t **)(v535 + 648);
              uint64_t v538 = *(void *)(*(void *)(a1 + 96) + 8) + 48 * v532;
              uint64_t v539 = *(llvm::MachineFunction **)(v536 + 32);
              uint64_t v540 = *(unsigned __int8 **)(a1 + 72);
              v1446.i64[0] = (uint64_t)v540;
              if (v540) {
                llvm::MetadataTracking::track((uint64_t)&v1446, v540, 2);
              }
              uint64_t v541 = llvm::MachineFunction::CreateMachineInstr(v539, v538, (unsigned __int8 **)&v1446, 0);
              if (!v1446.i64[0]) {
                goto LABEL_706;
              }
              int v1320 = *(unsigned __int8 *)v1446.i64[0];
              if ((v1320 - 4) > 0x1E)
              {
                if ((v1320 - 3) >= 0xFFFFFFFE) {
                  uint64_t v1355 = v1446.i64[0];
                }
                else {
                  uint64_t v1355 = 0;
                }
                if ((v1320 - 3) < 0xFFFFFFFE)
                {
                  if (v1320 == 3) {
                    *(void *)(v1446.i64[0] + 8) = 0;
                  }
                  goto LABEL_706;
                }
                unint64_t v1322 = v1355 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v1446.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1446.i64[0] + 12)) {
                  goto LABEL_706;
                }
                uint64_t v1321 = *(void *)(v1446.i64[0] + 16);
                if ((v1321 & 4) == 0) {
                  goto LABEL_706;
                }
                unint64_t v1322 = v1321 & 0xFFFFFFFFFFFFFFF8;
                if (!v1322) {
                  goto LABEL_706;
                }
              }
              v1438[0] = &v1446;
              sub_1CC5FA668(v1322 + 16, v1438);
LABEL_706:
              uint64_t v542 = *(void *)(v536 + 40);
              *((void *)v541 + 3) = v542;
              uint64_t v543 = *(void *)(v542 + 32);
              uint64_t v544 = *((unsigned int *)v541 + 10);
              if (v544)
              {
                uint64_t v1045 = *((void *)v541 + 4);
                uint64_t v1046 = *(void *)(v543 + 40);
                uint64_t v1047 = 32 * v544;
                do
                {
                  if (!*(unsigned char *)v1045)
                  {
                    uint64_t v1048 = *(unsigned int *)(v1045 + 4);
                    if ((int)v1048 >= 0) {
                      uint64_t v1049 = (uint64_t *)(*(void *)(v1046 + 272) + 8 * v1048);
                    }
                    else {
                      uint64_t v1049 = (uint64_t *)(*(void *)(v1046 + 24) + 16 * (v1048 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v1050 = *v1049;
                    if (*v1049)
                    {
                      uint64_t v1051 = *(void *)(v1050 + 16);
                      *(void *)(v1050 + 16) = v1045;
                      *(void *)(v1045 + 16) = v1051;
                      if (*(unsigned char *)(v1045 + 3))
                      {
                        *(void *)(v1045 + 24) = v1050;
                      }
                      else
                      {
                        *(void *)(v1045 + 24) = 0;
                        uint64_t v1049 = (uint64_t *)(v1051 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v1045 + 16) = v1045;
                      *(void *)(v1045 + 24) = 0;
                    }
                    *uint64_t v1049 = v1045;
                  }
                  v1045 += 32;
                  v1047 -= 32;
                }
                while (v1047);
              }
              uint64_t v545 = *(void *)(v543 + 728);
              if (v545) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v545 + 24))(v545, v541);
              }
              unint64_t v546 = *v537 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v541 = v546 | *(void *)v541 & 7;
              *((void *)v541 + 1) = v537;
              *(void *)(v546 + 8) = v541;
              unint64_t *v537 = *v537 & 7 | (unint64_t)v541;
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0;
              HIDWORD(v1438[0]) = v534;
              llvm::MachineInstr::addOperand(v541, v539, (const llvm::MachineOperand *)v1438);
              LODWORD(v1438[0]) = 5;
              v1438[1] = 0;
              LODWORD(v1439[0]) = v1445.i32[0];
              llvm::MachineInstr::addOperand(v541, v539, (const llvm::MachineOperand *)v1438);
              uint64_t v3 = 1;
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = (int)v1432;
              llvm::MachineInstr::addOperand(v541, v539, (const llvm::MachineOperand *)v1438);
              if (v156)
              {
                uint64_t v1031 = (uint64_t)v5[5][7];
                uint64_t v1032 = *(void *)(a1 + 256);
                LODWORD(v1438[0]) = 0;
                BOOL v1033 = sub_1CD3CA314(v1032, v1031, "StoreCMode", v1438);
                uint64_t v1034 = LODWORD(v1438[0]);
                LODWORD(v1438[0]) = 1;
                if (!v1033) {
                  uint64_t v1034 = 2;
                }
                v1438[1] = 0;
                *(void *)&v1439[0] = v1034;
                llvm::MachineInstr::addOperand(v541, v539, (const llvm::MachineOperand *)v1438);
                uint64_t v1035 = *(void *)(a1 + 256);
                LODWORD(v1438[0]) = 0;
                BOOL v1036 = sub_1CD3CA314(v1035, v1031, "StoreSLCMode", v1438);
                uint64_t v1037 = LODWORD(v1438[0]);
                if (!v1036) {
                  uint64_t v1037 = 1;
                }
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = v1037;
              }
              else
              {
                uint64_t v547 = *(unsigned char **)(a1 + 256);
                if (v547[310])
                {
                  uint64_t v548 = 1;
                }
                else if (v547[311])
                {
                  uint64_t v548 = 2;
                }
                else
                {
                  BOOL v21 = v547[312] == 0;
                  uint64_t v548 = 3;
                  if (v21) {
                    uint64_t v548 = 0;
                  }
                }
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = v548;
                llvm::MachineInstr::addOperand(v541, v539, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0;
                llvm::MachineInstr::addOperand(v541, v539, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0;
              }
              llvm::MachineInstr::addOperand(v541, v539, (const llvm::MachineOperand *)v1438);
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = 0;
              llvm::MachineInstr::addOperand(v541, v539, (const llvm::MachineOperand *)v1438);
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = 0;
              llvm::MachineInstr::addOperand(v541, v539, (const llvm::MachineOperand *)v1438);
              *(_OWORD *)v1438 = 0u;
              v1439[0] = 0u;
              uint64_t v293 = v541;
LABEL_1298:
              uint64_t v294 = v539;
              goto LABEL_883;
            }
          }
        }
      }
      uint64_t v163 = *(unsigned __int8 *)(*(void *)(a1 + 256) + 280);
      uint64_t v164 = (unsigned __int8 *)*(v5 - 8);
      uint64_t v165 = (unsigned __int8 *)*(v5 - 4);
      uint64_t v166 = *(void *)v164;
      LODWORD(v1443) = 0;
      uint64_t v3 = 0;
      if (!sub_1CB85A994(a1, v166, (int *)&v1443)) {
        return v3;
      }
      if (v165[16] - 11 < 2) {
        return 0;
      }
      int v167 = (int)v1443;
      if (v1443 > 0x30 || ((1 << (char)v1443) & 0x1000000010100) == 0)
      {
        uint64_t v3 = 0;
        int v168 = v163 ? 513 : 129;
        if ((int)v1443 >= v168 || (v1443 & 0x1F) != 0) {
          return v3;
        }
      }
      LODWORD(v1432) = 0;
      uint64_t v3 = sub_1CD3CA6C8(a1, (uint64_t)v164, (int *)&v1432);
      if (!v3) {
        return v3;
      }
      int v169 = *(void **)(a1 + 48);
      if ((_UNKNOWN ***)(*(void *)(v169[3] + 16 * (v3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66A4340) {
        sub_1CC38D61C(v169, v3, (uint64_t)&off_1E66A4340, (uint64_t)&off_1E66A43C8, 0);
      }
      if (v1432)
      {
        int v170 = v167 - v1432;
        LODWORD(v1443) = v167 - v1432;
        if ((v1432 & 0xFFFFFFEF) != 0) {
          return 0;
        }
      }
      else
      {
        int v170 = v167;
      }
      int v608 = v170 > 31 ? (v170 >> 5) + 1 : v170 / 8 - 1;
      unsigned int v614 = *((_DWORD *)&dword_1CD91C620 + 2 * v608 + v163);
      if (!v614) {
        return 0;
      }
      unsigned int v1429 = sub_1CB87DFFC((uint64_t *)a1, v165);
      if (!v1429) {
        return 0;
      }
      unsigned int v615 = v167 - v1432;
      uint64_t v1418 = (v167 - v1432) >> 3;
      if (v1432 != 16)
      {
        int v1414 = 0;
        int v1407 = 0;
        unsigned int IncompleteVirtualRegister = 0;
        int v1411 = 0;
        if (!v163) {
          goto LABEL_1170;
        }
        goto LABEL_1741;
      }
      uint64_t v616 = *(void *)(a1 + 48);
      unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v616, "", 0);
      *(void *)(*(void *)(v616 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4340;
      uint64_t v617 = *(void *)(v616 + 8);
      if (v617) {
        (*(void (**)(uint64_t))(*(void *)v617 + 24))(v617);
      }
      if (!IncompleteVirtualRegister) {
        return 0;
      }
      int v1413 = sub_1CB87DFFC((uint64_t *)a1, v164);
      if (!v1413) {
        return 0;
      }
      uint64_t v618 = *(void *)(a1 + 32);
      uint64_t v1406 = *(void *)(v618 + 640);
      v1410 = *(unint64_t **)(v618 + 648);
      uint64_t v619 = 132768;
      if (!v163) {
        uint64_t v619 = 136128;
      }
      uint64_t v620 = *(void *)(*(void *)(a1 + 96) + 8) + v619;
      uint64_t v621 = *(llvm::MachineFunction **)(*(void *)(v618 + 640) + 32);
      int v622 = *(unsigned __int8 **)(a1 + 72);
      v1446.i64[0] = (uint64_t)v622;
      if (v622) {
        llvm::MetadataTracking::track((uint64_t)&v1446, v622, 2);
      }
      uint64_t v623 = llvm::MachineFunction::CreateMachineInstr(v621, v620, (unsigned __int8 **)&v1446, 0);
      if (!v1446.i64[0]) {
        goto LABEL_848;
      }
      int v1372 = *(unsigned __int8 *)v1446.i64[0];
      if ((v1372 - 4) > 0x1E)
      {
        if ((v1372 - 3) >= 0xFFFFFFFE) {
          uint64_t v1394 = v1446.i64[0];
        }
        else {
          uint64_t v1394 = 0;
        }
        if ((v1372 - 3) < 0xFFFFFFFE)
        {
          if (v1372 == 3) {
            *(void *)(v1446.i64[0] + 8) = 0;
          }
          goto LABEL_848;
        }
        unint64_t v1374 = v1394 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v1446.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1446.i64[0] + 12)) {
          goto LABEL_848;
        }
        uint64_t v1373 = *(void *)(v1446.i64[0] + 16);
        if ((v1373 & 4) == 0) {
          goto LABEL_848;
        }
        unint64_t v1374 = v1373 & 0xFFFFFFFFFFFFFFF8;
        if (!v1374) {
          goto LABEL_848;
        }
      }
      v1438[0] = &v1446;
      sub_1CC5FA668(v1374 + 16, v1438);
LABEL_848:
      uint64_t v624 = *(void *)(v1406 + 40);
      *((void *)v623 + 3) = v624;
      uint64_t v625 = *(void *)(v624 + 32);
      uint64_t v626 = *((unsigned int *)v623 + 10);
      if (v626)
      {
        uint64_t v1233 = *((void *)v623 + 4);
        uint64_t v1234 = *(void *)(v625 + 40);
        uint64_t v1235 = 32 * v626;
        do
        {
          if (!*(unsigned char *)v1233)
          {
            uint64_t v1236 = *(unsigned int *)(v1233 + 4);
            if ((int)v1236 >= 0) {
              uint64_t v1237 = (uint64_t *)(*(void *)(v1234 + 272) + 8 * v1236);
            }
            else {
              uint64_t v1237 = (uint64_t *)(*(void *)(v1234 + 24) + 16 * (v1236 & 0x7FFFFFFF) + 8);
            }
            uint64_t v1238 = *v1237;
            if (*v1237)
            {
              uint64_t v1239 = *(void *)(v1238 + 16);
              *(void *)(v1238 + 16) = v1233;
              *(void *)(v1233 + 16) = v1239;
              if (*(unsigned char *)(v1233 + 3))
              {
                *(void *)(v1233 + 24) = v1238;
              }
              else
              {
                *(void *)(v1233 + 24) = 0;
                uint64_t v1237 = (uint64_t *)(v1239 + 24);
              }
            }
            else
            {
              *(void *)(v1233 + 16) = v1233;
              *(void *)(v1233 + 24) = 0;
            }
            *uint64_t v1237 = v1233;
          }
          v1233 += 32;
          v1235 -= 32;
        }
        while (v1235);
      }
      unsigned int v627 = v615 >> 4;
      uint64_t v628 = *(void *)(v625 + 728);
      if (v628) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v628 + 24))(v628, v623);
      }
      int v1414 = v1413 + v627;
      unint64_t v629 = *v1410 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v623 = v629 | *(void *)v623 & 7;
      *((void *)v623 + 1) = v1410;
      *(void *)(v629 + 8) = v623;
      unint64_t *v1410 = *v1410 & 7 | (unint64_t)v623;
      v1438[1] = 0;
      v1439[0] = 0uLL;
      LODWORD(v1438[0]) = 0x1000000;
      HIDWORD(v1438[0]) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v623, v621, (const llvm::MachineOperand *)v1438);
      LODWORD(v1438[0]) = 1;
      v1438[1] = 0;
      *(void *)&v1439[0] = 0;
      llvm::MachineInstr::addOperand(v623, v621, (const llvm::MachineOperand *)v1438);
      uint64_t v630 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v1429 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      if (v630 == &off_1E66A4340 || v630 == &off_1E66A43C8)
      {
        int v1231 = 0;
      }
      else
      {
        sub_1CD3CB380(a1, v1429, 33);
        int v1231 = 8448;
      }
      v1438[1] = 0;
      v1439[0] = 0uLL;
      v1438[0] = (void *)__PAIR64__(v1429, v1231);
      llvm::MachineInstr::addOperand(v623, v621, (const llvm::MachineOperand *)v1438);
      LODWORD(v1438[0]) = 1;
      v1438[1] = 0;
      *(void *)&v1439[0] = 0;
      llvm::MachineInstr::addOperand(v623, v621, (const llvm::MachineOperand *)v1438);
      LODWORD(v1438[0]) = 1;
      v1438[1] = 0;
      *(void *)&v1439[0] = v1418;
      llvm::MachineInstr::addOperand(v623, v621, (const llvm::MachineOperand *)v1438);
      LODWORD(v1438[0]) = 1;
      v1438[1] = 0;
      *(void *)&v1439[0] = 0;
      llvm::MachineInstr::addOperand(v623, v621, (const llvm::MachineOperand *)v1438);
      *(_OWORD *)v1438 = 0u;
      v1439[0] = 0u;
      llvm::MachineInstr::addOperand(v623, v621, (const llvm::MachineOperand *)v1438);
      if (!v163)
      {
        int v1407 = 0;
        int v1411 = 0;
        goto LABEL_1170;
      }
      int v1407 = sub_1CD3CC6CC(a1, IncompleteVirtualRegister);
      if (!v1407) {
        return 0;
      }
LABEL_1741:
      int v1411 = sub_1CD3CC6CC(a1, v1429);
      if (!v1411) {
        return 0;
      }
LABEL_1170:
      uint64_t v859 = *(void *)(a1 + 32);
      uint64_t v860 = *(void *)(v859 + 640);
      int v861 = *(llvm::MachineFunction **)(v860 + 32);
      uint64_t v862 = *(unint64_t **)(v859 + 648);
      uint64_t v863 = *(void *)(*(void *)(a1 + 96) + 8) + 48 * v614;
      int v864 = *(unsigned __int8 **)(a1 + 72);
      v1446.i64[0] = (uint64_t)v864;
      if (v864) {
        llvm::MetadataTracking::track((uint64_t)&v1446, v864, 2);
      }
      uint64_t v865 = llvm::MachineFunction::CreateMachineInstr(v861, v863, (unsigned __int8 **)&v1446, 0);
      if (!v1446.i64[0])
      {
LABEL_1173:
        uint64_t v866 = *(void *)(v860 + 40);
        *((void *)v865 + 3) = v866;
        uint64_t v867 = *(void *)(v866 + 32);
        uint64_t v868 = *((unsigned int *)v865 + 10);
        if (v868)
        {
          uint64_t v1194 = *((void *)v865 + 4);
          uint64_t v1195 = *(void *)(v867 + 40);
          uint64_t v1196 = 32 * v868;
          do
          {
            if (!*(unsigned char *)v1194)
            {
              uint64_t v1197 = *(unsigned int *)(v1194 + 4);
              if ((int)v1197 >= 0) {
                uint64_t v1198 = (uint64_t *)(*(void *)(v1195 + 272) + 8 * v1197);
              }
              else {
                uint64_t v1198 = (uint64_t *)(*(void *)(v1195 + 24) + 16 * (v1197 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1199 = *v1198;
              if (*v1198)
              {
                uint64_t v1200 = *(void *)(v1199 + 16);
                *(void *)(v1199 + 16) = v1194;
                *(void *)(v1194 + 16) = v1200;
                if (*(unsigned char *)(v1194 + 3))
                {
                  *(void *)(v1194 + 24) = v1199;
                }
                else
                {
                  *(void *)(v1194 + 24) = 0;
                  uint64_t v1198 = (uint64_t *)(v1200 + 24);
                }
              }
              else
              {
                *(void *)(v1194 + 16) = v1194;
                *(void *)(v1194 + 24) = 0;
              }
              *uint64_t v1198 = v1194;
            }
            v1194 += 32;
            v1196 -= 32;
          }
          while (v1196);
        }
        uint64_t v869 = *(void *)(v867 + 728);
        if (v869) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v869 + 24))(v869, v865);
        }
        unint64_t v870 = *v862 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v865 = v870 | *(void *)v865 & 7;
        *((void *)v865 + 1) = v862;
        *(void *)(v870 + 8) = v865;
        *uint64_t v862 = *v862 & 7 | (unint64_t)v865;
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0;
        HIDWORD(v1438[0]) = v3;
        llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
        if (v163)
        {
          uint64_t v1186 = (uint64_t)v5[5][7];
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0;
          HIDWORD(v1438[0]) = v1411;
          llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
          uint64_t v1187 = *(void *)(a1 + 256);
          LODWORD(v1438[0]) = 0;
          BOOL v1188 = sub_1CD3CA314(v1187, v1186, "StoreCMode", v1438);
          uint64_t v1189 = LODWORD(v1438[0]);
          LODWORD(v1438[0]) = 1;
          if (!v1188) {
            uint64_t v1189 = 2;
          }
          v1438[1] = 0;
          *(void *)&v1439[0] = v1189;
          llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
          uint64_t v1190 = *(void *)(a1 + 256);
          LODWORD(v1438[0]) = 0;
          BOOL v1191 = sub_1CD3CA314(v1190, v1186, "StoreSLCMode", v1438);
          uint64_t v1192 = LODWORD(v1438[0]);
          if (!v1191) {
            uint64_t v1192 = 1;
          }
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = v1192;
        }
        else
        {
          uint64_t v871 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v1429 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          if (v871 == &off_1E66A4340 || v871 == &off_1E66A43C8)
          {
            int v1193 = 0;
          }
          else
          {
            sub_1CD3CB380(a1, v1429, 33);
            int v1193 = 8448;
          }
          v1438[1] = 0;
          v1439[0] = 0uLL;
          v1438[0] = (void *)__PAIR64__(v1429, v1193);
          llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
          int v873 = *(unsigned char **)(a1 + 256);
          if (v873[310])
          {
            uint64_t v874 = 1;
          }
          else if (v873[311])
          {
            uint64_t v874 = 2;
          }
          else
          {
            BOOL v21 = v873[312] == 0;
            uint64_t v874 = 3;
            if (v21) {
              uint64_t v874 = 0;
            }
          }
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = v874;
          llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
        }
        llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
        uint64_t v3 = 1;
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
        *(_OWORD *)v1438 = 0u;
        v1439[0] = 0u;
        llvm::MachineInstr::addOperand(v865, v861, (const llvm::MachineOperand *)v1438);
        unsigned int v1074 = *(_DWORD *)(*(void *)v165 + 8);
        if ((v1074 & 0xFE) == 0x12) {
          unsigned int v1074 = *(_DWORD *)(**(void **)(*(void *)v165 + 16) + 8);
        }
        v1435[0] = (void *)((unint64_t)v165 & 0xFFFFFFFFFFFFFFFBLL);
        v1435[1] = 0;
        unsigned int v1436 = v1074 >> 8;
        char v1437 = 0;
        int v1075 = v170 + 7;
        if (v170 >= 0) {
          int v1075 = v170;
        }
        unint64_t v1076 = ((unint64_t)*((unsigned __int16 *)v5 + 9) >> 1) & 0x3F;
        *(_OWORD *)v1438 = 0u;
        v1439[0] = 0u;
        MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v861, (uint64_t)v1435, 2, (uint64_t)v1075 >> 3, v1076, (long long *)v1438, 0, 1, 0, 0, 0);
        llvm::MachineInstr::addMemOperand(v865, v861, MachineMemOperand);
        if (!v1432) {
          return v3;
        }
        uint64_t v1078 = *(void *)(a1 + 32);
        uint64_t v1079 = *(void *)(v1078 + 640);
        v1080 = *(unint64_t **)(v1078 + 648);
        uint64_t v1081 = 635040;
        if (!v163) {
          uint64_t v1081 = 123504;
        }
        uint64_t v1082 = *(void *)(*(void *)(a1 + 96) + 8) + v1081;
        unsigned int v1083 = *(llvm::MachineFunction **)(v1079 + 32);
        v1084 = *(unsigned __int8 **)(a1 + 72);
        v1446.i64[0] = (uint64_t)v1084;
        if (v1084) {
          llvm::MetadataTracking::track((uint64_t)&v1446, v1084, 2);
        }
        v1085 = llvm::MachineFunction::CreateMachineInstr(v1083, v1082, (unsigned __int8 **)&v1446, 0);
        if (v1446.i64[0])
        {
          int v1357 = *(unsigned __int8 *)v1446.i64[0];
          if ((v1357 - 4) > 0x1E)
          {
            if ((v1357 - 3) >= 0xFFFFFFFE) {
              uint64_t v1388 = v1446.i64[0];
            }
            else {
              uint64_t v1388 = 0;
            }
            if ((v1357 - 3) < 0xFFFFFFFE)
            {
              if (v1357 == 3) {
                *(void *)(v1446.i64[0] + 8) = 0;
              }
              goto LABEL_1509;
            }
            unint64_t v1359 = v1388 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1446.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1446.i64[0] + 12)) {
              goto LABEL_1509;
            }
            uint64_t v1358 = *(void *)(v1446.i64[0] + 16);
            if ((v1358 & 4) == 0) {
              goto LABEL_1509;
            }
            unint64_t v1359 = v1358 & 0xFFFFFFFFFFFFFFF8;
            if (!v1359) {
              goto LABEL_1509;
            }
          }
          v1438[0] = &v1446;
          sub_1CC5FA668(v1359 + 16, v1438);
        }
LABEL_1509:
        uint64_t v1086 = *(void *)(v1079 + 40);
        *((void *)v1085 + 3) = v1086;
        uint64_t v1087 = *(void *)(v1086 + 32);
        uint64_t v1088 = *((unsigned int *)v1085 + 10);
        if (v1088)
        {
          uint64_t v1210 = *((void *)v1085 + 4);
          uint64_t v1211 = *(void *)(v1087 + 40);
          uint64_t v1212 = 32 * v1088;
          do
          {
            if (!*(unsigned char *)v1210)
            {
              uint64_t v1213 = *(unsigned int *)(v1210 + 4);
              if ((int)v1213 >= 0) {
                int v1214 = (uint64_t *)(*(void *)(v1211 + 272) + 8 * v1213);
              }
              else {
                int v1214 = (uint64_t *)(*(void *)(v1211 + 24) + 16 * (v1213 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1215 = *v1214;
              if (*v1214)
              {
                uint64_t v1216 = *(void *)(v1215 + 16);
                *(void *)(v1215 + 16) = v1210;
                *(void *)(v1210 + 16) = v1216;
                if (*(unsigned char *)(v1210 + 3))
                {
                  *(void *)(v1210 + 24) = v1215;
                }
                else
                {
                  *(void *)(v1210 + 24) = 0;
                  int v1214 = (uint64_t *)(v1216 + 24);
                }
              }
              else
              {
                *(void *)(v1210 + 16) = v1210;
                *(void *)(v1210 + 24) = 0;
              }
              *int v1214 = v1210;
            }
            v1210 += 32;
            v1212 -= 32;
          }
          while (v1212);
        }
        uint64_t v1089 = *(void *)(v1087 + 728);
        if (v1089) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1089 + 24))(v1089, v1085);
        }
        unint64_t v1090 = *v1080 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v1085 = v1090 | *(void *)v1085 & 7;
        *((void *)v1085 + 1) = v1080;
        *(void *)(v1090 + 8) = v1085;
        unint64_t *v1080 = *v1080 & 7 | (unint64_t)v1085;
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0;
        HIDWORD(v1438[0]) = v1414;
        llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
        if (v163)
        {
          uint64_t v1203 = (uint64_t)v5[5][7];
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0;
          HIDWORD(v1438[0]) = v1407;
          llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
          uint64_t v1204 = *(void *)(a1 + 256);
          LODWORD(v1438[0]) = 0;
          BOOL v1205 = sub_1CD3CA314(v1204, v1203, "StoreCMode", v1438);
          uint64_t v1206 = LODWORD(v1438[0]);
          LODWORD(v1438[0]) = 1;
          if (!v1205) {
            uint64_t v1206 = 2;
          }
          v1438[1] = 0;
          *(void *)&v1439[0] = v1206;
          llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
          uint64_t v1207 = *(void *)(a1 + 256);
          LODWORD(v1438[0]) = 0;
          BOOL v1208 = sub_1CD3CA314(v1207, v1203, "StoreSLCMode", v1438);
          uint64_t v1209 = LODWORD(v1438[0]);
          if (!v1208) {
            uint64_t v1209 = 1;
          }
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = v1209;
        }
        else
        {
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0;
          HIDWORD(v1438[0]) = IncompleteVirtualRegister;
          llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
          uint64_t v1091 = *(unsigned char **)(a1 + 256);
          if (v1091[310])
          {
            uint64_t v1092 = 1;
          }
          else if (v1091[311])
          {
            uint64_t v1092 = 2;
          }
          else
          {
            BOOL v21 = v1091[312] == 0;
            uint64_t v1092 = 3;
            if (v21) {
              uint64_t v1092 = 0;
            }
          }
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = v1092;
          llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
        }
        llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
        *(_OWORD *)v1438 = 0u;
        v1439[0] = 0u;
        llvm::MachineInstr::addOperand(v1085, v1083, (const llvm::MachineOperand *)v1438);
        unsigned int v1146 = *(_DWORD *)(*(void *)v165 + 8);
        if ((v1146 & 0xFE) == 0x12) {
          unsigned int v1146 = *(_DWORD *)(**(void **)(*(void *)v165 + 16) + 8);
        }
        v1440.i64[0] = (unint64_t)v165 & 0xFFFFFFFFFFFFFFFBLL;
        v1440.i64[1] = v1418;
        LODWORD(v1441) = v1146 >> 8;
        BYTE4(v1441) = 0;
        unint64_t v1147 = ((unint64_t)*((unsigned __int16 *)v5 + 9) >> 1) & 0x3F;
        *(_OWORD *)v1438 = 0u;
        v1439[0] = 0u;
        uint64_t v3 = 1;
        v1148 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v861, (uint64_t)&v1440, 2, (unint64_t)v1432 >> 3, v1147, (long long *)v1438, 0, 1, 0, 0, 0);
        llvm::MachineInstr::addMemOperand(v1085, v861, v1148);
        return v3;
      }
      int v1351 = *(unsigned __int8 *)v1446.i64[0];
      if ((v1351 - 4) > 0x1E)
      {
        if ((v1351 - 3) >= 0xFFFFFFFE) {
          uint64_t v1375 = v1446.i64[0];
        }
        else {
          uint64_t v1375 = 0;
        }
        if ((v1351 - 3) < 0xFFFFFFFE)
        {
          if (v1351 == 3) {
            *(void *)(v1446.i64[0] + 8) = 0;
          }
          goto LABEL_1173;
        }
        unint64_t v1353 = v1375 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v1446.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1446.i64[0] + 12)) {
          goto LABEL_1173;
        }
        uint64_t v1352 = *(void *)(v1446.i64[0] + 16);
        if ((v1352 & 4) == 0) {
          goto LABEL_1173;
        }
        unint64_t v1353 = v1352 & 0xFFFFFFFFFFFFFFF8;
        if (!v1353) {
          goto LABEL_1173;
        }
      }
      v1438[0] = &v1446;
      sub_1CC5FA668(v1353 + 16, v1438);
      goto LABEL_1173;
    case 0x3E:
      return sub_1CD3CC604((uint64_t *)a1, (uint64_t)v5);
    case 0x42:
      int v110 = *((_DWORD *)v5 + 5);
      if ((v110 & 0x40000000) != 0) {
        uint64_t v111 = (unsigned __int8 **)*(v5 - 1);
      }
      else {
        uint64_t v111 = (unsigned __int8 **)&v5[-4 * (v110 & 0x7FFFFFF)];
      }
      unsigned int v185 = *((_DWORD *)*v5 + 2);
      if (v185 != 13) {
        return 0;
      }
      uint64_t v186 = *v111;
      unint64_t v187 = *(unsigned int *)(*(void *)*v111 + 8);
      if (*(_DWORD *)(*(void *)*v111 + 8) != 13) {
        return 0;
      }
      if ((v187 >> 8) - 16 > 0x30 || ((1 << (BYTE1(v187) - 16)) & 0x1000000010001) == 0) {
        return 0;
      }
      uint64_t v3 = 0;
      unsigned int v189 = v185 >> 8;
      if (v185 >> 8 > 0x20 || ((1 << SBYTE1(v185)) & 0x100010100) == 0) {
        return v3;
      }
      int v190 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v190) {
        return 0;
      }
      int v191 = v190;
      int v192 = sub_1CB8843D8(a1, v5, 0, 0, 0);
      if (v189 == 16 && v192)
      {
        uint64_t v193 = *(void *)(a1 + 32);
        uint64_t v194 = *(void *)(v193 + 640);
        unint64_t v195 = *(unint64_t **)(v193 + 648);
        uint64_t v196 = *(void *)(*(void *)(a1 + 96) + 8) + 48144;
        uint64_t v197 = *(llvm::MachineFunction **)(v194 + 32);
        uint64_t v198 = *(void **)(a1 + 72);
        v1435[0] = v198;
        if (v198) {
          llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v198, 2);
        }
        uint64_t v199 = llvm::MachineFunction::CreateMachineInstr(v197, v196, (unsigned __int8 **)v1435, 0);
        if (!v1435[0]) {
          goto LABEL_284;
        }
        int v1314 = *(unsigned __int8 *)v1435[0];
        if ((v1314 - 4) > 0x1E)
        {
          if ((v1314 - 3) >= 0xFFFFFFFE) {
            uint64_t v1350 = v1435[0];
          }
          else {
            uint64_t v1350 = 0;
          }
          if ((v1314 - 3) < 0xFFFFFFFE)
          {
            if (v1314 == 3) {
              *((void *)v1435[0] + 1) = 0;
            }
            goto LABEL_284;
          }
          unint64_t v1316 = (unint64_t)v1350 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
            goto LABEL_284;
          }
          uint64_t v1315 = *((void *)v1435[0] + 2);
          if ((v1315 & 4) == 0) {
            goto LABEL_284;
          }
          unint64_t v1316 = v1315 & 0xFFFFFFFFFFFFFFF8;
          if (!v1316) {
            goto LABEL_284;
          }
        }
        v1438[0] = v1435;
        sub_1CC5FA668(v1316 + 16, v1438);
LABEL_284:
        uint64_t v200 = *(void *)(v194 + 40);
        *((void *)v199 + 3) = v200;
        uint64_t v201 = *(void *)(v200 + 32);
        uint64_t v202 = *((unsigned int *)v199 + 10);
        if (v202)
        {
          uint64_t v1024 = *((void *)v199 + 4);
          uint64_t v1025 = *(void *)(v201 + 40);
          uint64_t v1026 = 32 * v202;
          do
          {
            if (!*(unsigned char *)v1024)
            {
              uint64_t v1027 = *(unsigned int *)(v1024 + 4);
              if ((int)v1027 >= 0) {
                v1028 = (uint64_t *)(*(void *)(v1025 + 272) + 8 * v1027);
              }
              else {
                v1028 = (uint64_t *)(*(void *)(v1025 + 24) + 16 * (v1027 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1029 = *v1028;
              if (*v1028)
              {
                uint64_t v1030 = *(void *)(v1029 + 16);
                *(void *)(v1029 + 16) = v1024;
                *(void *)(v1024 + 16) = v1030;
                if (*(unsigned char *)(v1024 + 3))
                {
                  *(void *)(v1024 + 24) = v1029;
                }
                else
                {
                  *(void *)(v1024 + 24) = 0;
                  v1028 = (uint64_t *)(v1030 + 24);
                }
              }
              else
              {
                *(void *)(v1024 + 16) = v1024;
                *(void *)(v1024 + 24) = 0;
              }
              uint64_t *v1028 = v1024;
            }
            v1024 += 32;
            v1026 -= 32;
          }
          while (v1026);
        }
        uint64_t v203 = *(void *)(v201 + 728);
        if (v203) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v203 + 24))(v203, v199);
        }
        unint64_t v204 = *v195 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v199 = v204 | *(void *)v199 & 7;
        *((void *)v199 + 1) = v195;
        *(void *)(v204 + 8) = v199;
        unint64_t *v195 = *v195 & 7 | (unint64_t)v199;
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0x1000000;
        HIDWORD(v1438[0]) = v191;
        llvm::MachineInstr::addOperand(v199, v197, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v199, v197, (const llvm::MachineOperand *)v1438);
        v1435[0] = v197;
        v1435[1] = v199;
        int v205 = 4;
        do
        {
          sub_1CB8843D8(a1, v5, 0, (llvm::MachineFunction **)v1435, 0);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1435[1], (llvm::MachineFunction *)v1435[0], (const llvm::MachineOperand *)v1438);
          --v205;
        }
        while (v205);
        *(_OWORD *)v1438 = 0u;
        v1439[0] = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1435[1], (llvm::MachineFunction *)v1435[0], (const llvm::MachineOperand *)v1438);
        uint64_t v207 = (llvm::MachineFunction *)v1435[0];
        unint64_t v206 = (llvm::MachineInstr *)v1435[1];
        uint64_t v3 = 1;
        goto LABEL_290;
      }
      int v594 = *((_DWORD *)v5 + 5);
      if ((v594 & 0x40000000) != 0) {
        uint64_t v595 = (uint64_t *)*(v5 - 1);
      }
      else {
        uint64_t v595 = (uint64_t *)&v5[-4 * (v594 & 0x7FFFFFF)];
      }
      uint64_t v632 = *v595;
      unsigned int v633 = *(unsigned __int8 *)(v632 + 16);
      if (v632 && v633 >= 0x1C && *(uint64_t ***)(v632 + 40) != v5[5]) {
        goto LABEL_1321;
      }
      if (v633 <= 0x1B) {
        uint64_t v632 = 0;
      }
      if (v187 < 0x2000 || !v632 || (*(unsigned char *)(v632 + 16) & 0xFE) != 0x36) {
        goto LABEL_1321;
      }
      int v634 = *(_DWORD *)(v632 + 20);
      uint64_t v635 = (v634 & 0x40000000) != 0 ? *(void *)(v632 - 8) : v632 - 32 * (v634 & 0x7FFFFFF);
      uint64_t v951 = *(void *)(v635 + 32);
      if (*(unsigned char *)(v951 + 16) != 16) {
        goto LABEL_1321;
      }
      v952 = (void *)(v951 + 24);
      if (*(_DWORD *)(v951 + 32) >= 0x41u) {
        v952 = (void *)*v952;
      }
      if (*v952 == v187 >> 9)
      {
        if ((v634 & 0x40000000) != 0) {
          v953 = *(unsigned __int8 ***)(v632 - 8);
        }
        else {
          v953 = (unsigned __int8 **)(v632 - 32 * (v634 & 0x7FFFFFF));
        }
        int v1156 = sub_1CB87DFFC((uint64_t *)a1, *v953);
        if (!v1156) {
          return 0;
        }
        int v955 = v1156;
        if (v187 >> 8 == 64)
        {
          if ((_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v1156 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66A4990)
          {
            if (v189 == 32) {
              uint64_t v957 = 34;
            }
            else {
              uint64_t v957 = 3;
            }
          }
          else
          {
            int v955 = v1156 + 1;
            if (v189 == 32)
            {
              LODWORD(v957) = 0;
              goto LABEL_1629;
            }
            uint64_t v957 = 1;
          }
        }
        else
        {
          uint64_t v957 = 2;
        }
        uint64_t v1183 = a1;
        int v1184 = v955;
        uint64_t v1185 = v957;
      }
      else
      {
LABEL_1321:
        int v954 = sub_1CB87DFFC((uint64_t *)a1, v186);
        if (!v954) {
          return 0;
        }
        int v955 = v954;
        v956 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v954 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
        if (v189 == 32)
        {
          LODWORD(v957) = 0;
          if (v956 != &off_1E66A4340 && v956 != &off_1E66A43C8)
          {
            LODWORD(v957) = 33;
            sub_1CD3CB380(a1, v954, 33);
          }
LABEL_1629:
          uint64_t v1157 = *(void *)(a1 + 32);
          uint64_t v1158 = *(void *)(v1157 + 640);
          uint64_t v1159 = *(unint64_t **)(v1157 + 648);
          uint64_t v1160 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
          unsigned int v1161 = *(llvm::MachineFunction **)(v1158 + 32);
          uint64_t v1162 = *(void **)(a1 + 72);
          v1435[0] = v1162;
          if (v1162) {
            llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v1162, 2);
          }
          unsigned int v1163 = llvm::MachineFunction::CreateMachineInstr(v1161, v1160, (unsigned __int8 **)v1435, 0);
          if (!v1435[0]) {
            goto LABEL_1632;
          }
          int v1339 = *(unsigned __int8 *)v1435[0];
          if ((v1339 - 4) > 0x1E)
          {
            if ((v1339 - 3) >= 0xFFFFFFFE) {
              long long v1369 = v1435[0];
            }
            else {
              long long v1369 = 0;
            }
            if ((v1339 - 3) < 0xFFFFFFFE)
            {
              if (v1339 == 3) {
                *((void *)v1435[0] + 1) = 0;
              }
              goto LABEL_1632;
            }
            unint64_t v1341 = (unint64_t)v1369 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
              goto LABEL_1632;
            }
            uint64_t v1340 = *((void *)v1435[0] + 2);
            if ((v1340 & 4) == 0) {
              goto LABEL_1632;
            }
            unint64_t v1341 = v1340 & 0xFFFFFFFFFFFFFFF8;
            if (!v1341) {
              goto LABEL_1632;
            }
          }
          v1438[0] = v1435;
          sub_1CC5FA668(v1341 + 16, v1438);
LABEL_1632:
          uint64_t v1164 = *(void *)(v1158 + 40);
          *((void *)v1163 + 3) = v1164;
          uint64_t v1165 = *(void *)(v1164 + 32);
          uint64_t v1166 = *((unsigned int *)v1163 + 10);
          if (v1166)
          {
            uint64_t v1169 = *((void *)v1163 + 4);
            uint64_t v1170 = *(void *)(v1165 + 40);
            uint64_t v1171 = 32 * v1166;
            do
            {
              if (!*(unsigned char *)v1169)
              {
                uint64_t v1172 = *(unsigned int *)(v1169 + 4);
                if ((int)v1172 >= 0) {
                  v1173 = (uint64_t *)(*(void *)(v1170 + 272) + 8 * v1172);
                }
                else {
                  v1173 = (uint64_t *)(*(void *)(v1170 + 24) + 16 * (v1172 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1174 = *v1173;
                if (*v1173)
                {
                  uint64_t v1175 = *(void *)(v1174 + 16);
                  *(void *)(v1174 + 16) = v1169;
                  *(void *)(v1169 + 16) = v1175;
                  if (*(unsigned char *)(v1169 + 3))
                  {
                    *(void *)(v1169 + 24) = v1174;
                  }
                  else
                  {
                    *(void *)(v1169 + 24) = 0;
                    v1173 = (uint64_t *)(v1175 + 24);
                  }
                }
                else
                {
                  *(void *)(v1169 + 16) = v1169;
                  *(void *)(v1169 + 24) = 0;
                }
                uint64_t *v1173 = v1169;
              }
              v1169 += 32;
              v1171 -= 32;
            }
            while (v1171);
          }
          uint64_t v1167 = *(void *)(v1165 + 728);
          if (v1167) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1167 + 24))(v1167, v1163);
          }
          unint64_t v1168 = *v1159 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unsigned int v1163 = v1168 | *(void *)v1163 & 7;
          *((void *)v1163 + 1) = v1159;
          *(void *)(v1168 + 8) = v1163;
          *uint64_t v1159 = *v1159 & 7 | (unint64_t)v1163;
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0x1000000;
          HIDWORD(v1438[0]) = v191;
          llvm::MachineInstr::addOperand(v1163, v1161, (const llvm::MachineOperand *)v1438);
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = v957 << 8;
          HIDWORD(v1438[0]) = v955;
          int v447 = v1163;
          uint64_t v448 = v1161;
LABEL_1636:
          llvm::MachineInstr::addOperand(v447, v448, (const llvm::MachineOperand *)v1438);
          return 1;
        }
        LODWORD(v957) = 0;
        if (v956 == &off_1E66A4180 || v956 == &off_1E66A41C8)
        {
LABEL_1328:
          if (v189 != 8) {
            goto LABEL_1629;
          }
          uint64_t v958 = *(void *)(a1 + 32);
          uint64_t v959 = *(void *)(v958 + 640);
          v960 = *(unint64_t **)(v958 + 648);
          uint64_t v961 = *(void *)(*(void *)(a1 + 96) + 8) + 17904;
          v962 = *(llvm::MachineFunction **)(v959 + 32);
          unsigned int v963 = *(void **)(a1 + 72);
          v1435[0] = v963;
          if (v963) {
            llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v963, 2);
          }
          unsigned int v964 = llvm::MachineFunction::CreateMachineInstr(v962, v961, (unsigned __int8 **)v1435, 0);
          if (v1435[0])
          {
            int v1363 = *(unsigned __int8 *)v1435[0];
            if ((v1363 - 4) > 0x1E)
            {
              if ((v1363 - 3) >= 0xFFFFFFFE) {
                char v1389 = v1435[0];
              }
              else {
                char v1389 = 0;
              }
              if ((v1363 - 3) < 0xFFFFFFFE)
              {
                if (v1363 == 3) {
                  *((void *)v1435[0] + 1) = 0;
                }
                goto LABEL_1332;
              }
              unint64_t v1365 = (unint64_t)v1389 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                goto LABEL_1332;
              }
              uint64_t v1364 = *((void *)v1435[0] + 2);
              if ((v1364 & 4) == 0) {
                goto LABEL_1332;
              }
              unint64_t v1365 = v1364 & 0xFFFFFFFFFFFFFFF8;
              if (!v1365) {
                goto LABEL_1332;
              }
            }
            v1438[0] = v1435;
            sub_1CC5FA668(v1365 + 16, v1438);
          }
LABEL_1332:
          uint64_t v965 = *(void *)(v959 + 40);
          *((void *)v964 + 3) = v965;
          uint64_t v966 = *(void *)(v965 + 32);
          uint64_t v967 = *((unsigned int *)v964 + 10);
          if (v967)
          {
            uint64_t v1217 = *((void *)v964 + 4);
            uint64_t v1218 = *(void *)(v966 + 40);
            uint64_t v1219 = 32 * v967;
            do
            {
              if (!*(unsigned char *)v1217)
              {
                uint64_t v1220 = *(unsigned int *)(v1217 + 4);
                if ((int)v1220 >= 0) {
                  unint64_t v1221 = (uint64_t *)(*(void *)(v1218 + 272) + 8 * v1220);
                }
                else {
                  unint64_t v1221 = (uint64_t *)(*(void *)(v1218 + 24) + 16 * (v1220 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1222 = *v1221;
                if (*v1221)
                {
                  uint64_t v1223 = *(void *)(v1222 + 16);
                  *(void *)(v1222 + 16) = v1217;
                  *(void *)(v1217 + 16) = v1223;
                  if (*(unsigned char *)(v1217 + 3))
                  {
                    *(void *)(v1217 + 24) = v1222;
                  }
                  else
                  {
                    *(void *)(v1217 + 24) = 0;
                    unint64_t v1221 = (uint64_t *)(v1223 + 24);
                  }
                }
                else
                {
                  *(void *)(v1217 + 16) = v1217;
                  *(void *)(v1217 + 24) = 0;
                }
                *unint64_t v1221 = v1217;
              }
              v1217 += 32;
              v1219 -= 32;
            }
            while (v1219);
          }
          uint64_t v968 = *(void *)(v966 + 728);
          if (v968) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v968 + 24))(v968, v964);
          }
          unint64_t v969 = *v960 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unsigned int v964 = v969 | *(void *)v964 & 7;
          *((void *)v964 + 1) = v960;
          *(void *)(v969 + 8) = v964;
          unint64_t *v960 = *v960 & 7 | (unint64_t)v964;
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0x1000000;
          HIDWORD(v1438[0]) = v191;
          llvm::MachineInstr::addOperand(v964, v962, (const llvm::MachineOperand *)v1438);
          uint64_t v3 = 1;
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v964, v962, (const llvm::MachineOperand *)v1438);
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = v957 << 8;
          HIDWORD(v1438[0]) = v955;
          llvm::MachineInstr::addOperand(v964, v962, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v964, v962, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0x1000000FFLL;
          llvm::MachineInstr::addOperand(v964, v962, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v964, v962, (const llvm::MachineOperand *)v1438);
          *(_OWORD *)v1438 = 0u;
          v1439[0] = 0u;
          uint64_t v293 = v964;
          uint64_t v294 = v962;
          goto LABEL_883;
        }
        LODWORD(v957) = 1;
        uint64_t v1183 = a1;
        int v1184 = v955;
        uint64_t v1185 = 1;
      }
      sub_1CD3CB380(v1183, v1184, v1185);
      goto LABEL_1328;
    case 0x43:
      int v60 = *((_DWORD *)v5 + 5);
      if ((v60 & 0x40000000) != 0) {
        uint64_t v61 = (uint64_t *)*(v5 - 1);
      }
      else {
        uint64_t v61 = (uint64_t *)&v5[-4 * (v60 & 0x7FFFFFF)];
      }
      unsigned int v172 = *((_DWORD *)*v5 + 2) >> 8;
      HIDWORD(v174) = v172;
      LODWORD(v174) = v172 - 8;
      unsigned int v173 = v174 >> 3;
      BOOL v221 = v173 > 7;
      int v175 = (1 << v173) & 0x8B;
      if (v221 || v175 == 0) {
        return 0;
      }
      uint64_t v177 = *v61;
      unint64_t v178 = *(unsigned int *)(*(void *)*v61 + 8);
      unint64_t v179 = v178 >> 8;
      if (*(_DWORD *)(*(void *)*v61 + 8) >> 8 > 0x20u || ((1 << SBYTE1(v178)) & 0x100010102) == 0) {
        return 0;
      }
      if (v172 == 64)
      {
        if (v179 != 32) {
          return 0;
        }
        int v181 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)v5);
        if (!v181) {
          return 0;
        }
        int v182 = v181;
        int v183 = *((_DWORD *)v5 + 5);
        uint64_t v184 = (v183 & 0x40000000) != 0 ? (uint64_t *)*(v5 - 1) : (uint64_t *)&v5[-4 * (v183 & 0x7FFFFFF)];
        int v596 = sub_1CD789230((uint64_t *)a1, *v184);
        if (!v596) {
          return 0;
        }
        int v597 = v596;
        uint64_t v598 = *(void *)(a1 + 48);
        if ((_UNKNOWN ***)(*(void *)(*(void *)(v598 + 24) + 16 * (v182 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66A4990)
        {
          int v599 = v182;
        }
        else
        {
          int v599 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*(void *)(a1 + 48), "", 0);
          *(void *)(*(void *)(v598 + 24) + 16 * (v599 & 0x7FFFFFFF)) = &off_1E66A4990;
          uint64_t v600 = *(void *)(v598 + 8);
          if (v600)
          {
            (*(void (**)(uint64_t))(*(void *)v600 + 24))(v600);
            if (!v599) {
              return 0;
            }
          }
          else if (!v599)
          {
            return 0;
          }
          uint64_t v598 = *(void *)(a1 + 48);
        }
        int v655 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v598, "", 0);
        *(void *)(*(void *)(v598 + 24) + 16 * (v655 & 0x7FFFFFFF)) = &off_1E66A4340;
        uint64_t v656 = *(void *)(v598 + 8);
        if (v656)
        {
          (*(void (**)(uint64_t))(*(void *)v656 + 24))(v656);
          if (!v655) {
            return 0;
          }
        }
        else if (!v655)
        {
          return 0;
        }
        int v1430 = v599;
        uint64_t v657 = *(void *)(a1 + 32);
        uint64_t v658 = *(void *)(v657 + 640);
        uint64_t v659 = *(unint64_t **)(v657 + 648);
        uint64_t v660 = *(void *)(*(void *)(a1 + 96) + 8) + 69360;
        unsigned int v661 = *(llvm::MachineFunction **)(v658 + 32);
        unsigned int v662 = *(void **)(a1 + 72);
        v1435[0] = v662;
        if (v662) {
          llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v662, 2);
        }
        uint64_t v663 = llvm::MachineFunction::CreateMachineInstr(v661, v660, (unsigned __int8 **)v1435, 0);
        if (!v1435[0])
        {
LABEL_898:
          uint64_t v664 = *(void *)(v658 + 40);
          *((void *)v663 + 3) = v664;
          uint64_t v665 = *(void *)(v664 + 32);
          uint64_t v666 = *((unsigned int *)v663 + 10);
          if (v666)
          {
            uint64_t v1118 = *((void *)v663 + 4);
            uint64_t v1119 = *(void *)(v665 + 40);
            uint64_t v1120 = 32 * v666;
            do
            {
              if (!*(unsigned char *)v1118)
              {
                uint64_t v1121 = *(unsigned int *)(v1118 + 4);
                if ((int)v1121 >= 0) {
                  unint64_t v1122 = (uint64_t *)(*(void *)(v1119 + 272) + 8 * v1121);
                }
                else {
                  unint64_t v1122 = (uint64_t *)(*(void *)(v1119 + 24) + 16 * (v1121 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1123 = *v1122;
                if (*v1122)
                {
                  uint64_t v1124 = *(void *)(v1123 + 16);
                  *(void *)(v1123 + 16) = v1118;
                  *(void *)(v1118 + 16) = v1124;
                  if (*(unsigned char *)(v1118 + 3))
                  {
                    *(void *)(v1118 + 24) = v1123;
                  }
                  else
                  {
                    *(void *)(v1118 + 24) = 0;
                    unint64_t v1122 = (uint64_t *)(v1124 + 24);
                  }
                }
                else
                {
                  *(void *)(v1118 + 16) = v1118;
                  *(void *)(v1118 + 24) = 0;
                }
                *unint64_t v1122 = v1118;
              }
              v1118 += 32;
              v1120 -= 32;
            }
            while (v1120);
          }
          uint64_t v667 = *(void *)(v665 + 728);
          if (v667) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v667 + 24))(v667, v663);
          }
          unint64_t v668 = *v659 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v663 = v668 | *(void *)v663 & 7;
          *((void *)v663 + 1) = v659;
          *(void *)(v668 + 8) = v663;
          *uint64_t v659 = *v659 & 7 | (unint64_t)v663;
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0x1000000;
          HIDWORD(v1438[0]) = v655;
          llvm::MachineInstr::addOperand(v663, v661, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v663, v661, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v663, v661, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v663, v661, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v663, v661, (const llvm::MachineOperand *)v1438);
          *(_OWORD *)v1438 = 0u;
          v1439[0] = 0u;
          llvm::MachineInstr::addOperand(v663, v661, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v663, v661, (const llvm::MachineOperand *)v1438);
          *(_OWORD *)v1438 = 0u;
          v1439[0] = 0u;
          llvm::MachineInstr::addOperand(v663, v661, (const llvm::MachineOperand *)v1438);
          uint64_t v669 = *(void *)(a1 + 32);
          uint64_t v670 = *(void *)(v669 + 640);
          uint64_t v671 = *(unint64_t **)(v669 + 648);
          uint64_t v672 = *(void *)(*(void *)(a1 + 96) + 8) + 864;
          v673 = *(llvm::MachineFunction **)(v670 + 32);
          uint64_t v674 = *(void **)(a1 + 72);
          v1435[0] = v674;
          if (v674) {
            llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v674, 2);
          }
          uint64_t v675 = llvm::MachineFunction::CreateMachineInstr(v673, v672, (unsigned __int8 **)v1435, 0);
          if (!v1435[0]) {
            goto LABEL_904;
          }
          int v1335 = *(unsigned __int8 *)v1435[0];
          if ((v1335 - 4) > 0x1E)
          {
            if ((v1335 - 3) >= 0xFFFFFFFE) {
              __int16 v1362 = v1435[0];
            }
            else {
              __int16 v1362 = 0;
            }
            if ((v1335 - 3) < 0xFFFFFFFE)
            {
              if (v1335 == 3) {
                *((void *)v1435[0] + 1) = 0;
              }
              goto LABEL_904;
            }
            unint64_t v1337 = (unint64_t)v1362 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
              goto LABEL_904;
            }
            uint64_t v1336 = *((void *)v1435[0] + 2);
            if ((v1336 & 4) == 0) {
              goto LABEL_904;
            }
            unint64_t v1337 = v1336 & 0xFFFFFFFFFFFFFFF8;
            if (!v1337) {
              goto LABEL_904;
            }
          }
          v1438[0] = v1435;
          sub_1CC5FA668(v1337 + 16, v1438);
LABEL_904:
          uint64_t v676 = *(void *)(v670 + 40);
          *((void *)v675 + 3) = v676;
          uint64_t v677 = *(void *)(v676 + 32);
          uint64_t v678 = *((unsigned int *)v675 + 10);
          if (v678)
          {
            uint64_t v1125 = *((void *)v675 + 4);
            uint64_t v1126 = *(void *)(v677 + 40);
            uint64_t v1127 = 32 * v678;
            do
            {
              if (!*(unsigned char *)v1125)
              {
                uint64_t v1128 = *(unsigned int *)(v1125 + 4);
                if ((int)v1128 >= 0) {
                  v1129 = (uint64_t *)(*(void *)(v1126 + 272) + 8 * v1128);
                }
                else {
                  v1129 = (uint64_t *)(*(void *)(v1126 + 24) + 16 * (v1128 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1130 = *v1129;
                if (*v1129)
                {
                  uint64_t v1131 = *(void *)(v1130 + 16);
                  *(void *)(v1130 + 16) = v1125;
                  *(void *)(v1125 + 16) = v1131;
                  if (*(unsigned char *)(v1125 + 3))
                  {
                    *(void *)(v1125 + 24) = v1130;
                  }
                  else
                  {
                    *(void *)(v1125 + 24) = 0;
                    v1129 = (uint64_t *)(v1131 + 24);
                  }
                }
                else
                {
                  *(void *)(v1125 + 16) = v1125;
                  *(void *)(v1125 + 24) = 0;
                }
                uint64_t *v1129 = v1125;
              }
              v1125 += 32;
              v1127 -= 32;
            }
            while (v1127);
          }
          uint64_t v679 = *(void *)(v677 + 728);
          if (v679) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v679 + 24))(v679, v675);
          }
          unint64_t v680 = *v671 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v675 = v680 | *(void *)v675 & 7;
          *((void *)v675 + 1) = v671;
          *(void *)(v680 + 8) = v675;
          *uint64_t v671 = *v671 & 7 | (unint64_t)v675;
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0x1000000;
          HIDWORD(v1438[0]) = v1430;
          llvm::MachineInstr::addOperand(v675, v673, (const llvm::MachineOperand *)v1438);
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0;
          HIDWORD(v1438[0]) = v597;
          llvm::MachineInstr::addOperand(v675, v673, (const llvm::MachineOperand *)v1438);
          uint64_t v3 = 1;
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 33;
          llvm::MachineInstr::addOperand(v675, v673, (const llvm::MachineOperand *)v1438);
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0;
          HIDWORD(v1438[0]) = v655;
          llvm::MachineInstr::addOperand(v675, v673, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 34;
          llvm::MachineInstr::addOperand(v675, v673, (const llvm::MachineOperand *)v1438);
          if (v1430 == v182) {
            return v3;
          }
          LODWORD(v3) = 0;
          while (1)
          {
            char v681 = v3;
            uint64_t v682 = *(void *)(a1 + 32);
            uint64_t v683 = *(void *)(v682 + 640);
            uint64_t v684 = *(unint64_t **)(v682 + 648);
            uint64_t v685 = *(void *)(*(void *)(a1 + 96) + 8);
            int v686 = *(llvm::MachineFunction **)(v683 + 32);
            uint64_t v687 = *(void **)(a1 + 72);
            v1435[0] = v687;
            if (v687) {
              llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v687, 2);
            }
            uint64_t v688 = llvm::MachineFunction::CreateMachineInstr(v686, v685 + 912, (unsigned __int8 **)v1435, 0);
            if (!v1435[0]) {
              goto LABEL_912;
            }
            int v701 = *(unsigned __int8 *)v1435[0];
            if ((v701 - 4) > 0x1E)
            {
              if ((v701 - 3) >= 0xFFFFFFFE) {
                uint64_t v704 = v1435[0];
              }
              else {
                uint64_t v704 = 0;
              }
              if ((v701 - 3) < 0xFFFFFFFE)
              {
                if (v701 == 3) {
                  *((void *)v1435[0] + 1) = 0;
                }
                goto LABEL_912;
              }
              unint64_t v703 = (unint64_t)v704 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                goto LABEL_912;
              }
              uint64_t v702 = *((void *)v1435[0] + 2);
              if ((v702 & 4) == 0) {
                goto LABEL_912;
              }
              unint64_t v703 = v702 & 0xFFFFFFFFFFFFFFF8;
              if (!v703) {
                goto LABEL_912;
              }
            }
            v1438[0] = v1435;
            sub_1CC5FA668(v703 + 16, v1438);
LABEL_912:
            uint64_t v689 = *(void *)(v683 + 40);
            *((void *)v688 + 3) = v689;
            uint64_t v690 = *(void *)(v689 + 32);
            uint64_t v691 = *((unsigned int *)v688 + 10);
            if (v691)
            {
              uint64_t v694 = *((void *)v688 + 4);
              uint64_t v695 = *(void *)(v690 + 40);
              uint64_t v696 = 32 * v691;
              do
              {
                if (!*(unsigned char *)v694)
                {
                  uint64_t v697 = *(unsigned int *)(v694 + 4);
                  if ((int)v697 >= 0) {
                    int v698 = (uint64_t *)(*(void *)(v695 + 272) + 8 * v697);
                  }
                  else {
                    int v698 = (uint64_t *)(*(void *)(v695 + 24) + 16 * (v697 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v699 = *v698;
                  if (*v698)
                  {
                    uint64_t v700 = *(void *)(v699 + 16);
                    *(void *)(v699 + 16) = v694;
                    *(void *)(v694 + 16) = v700;
                    if (*(unsigned char *)(v694 + 3))
                    {
                      *(void *)(v694 + 24) = v699;
                    }
                    else
                    {
                      *(void *)(v694 + 24) = 0;
                      int v698 = (uint64_t *)(v700 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v694 + 16) = v694;
                    *(void *)(v694 + 24) = 0;
                  }
                  *int v698 = v694;
                }
                v694 += 32;
                v696 -= 32;
              }
              while (v696);
            }
            uint64_t v692 = *(void *)(v690 + 728);
            if (v692) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v692 + 24))(v692, v688);
            }
            unint64_t v693 = *v684 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v688 = v693 | *(void *)v688 & 7;
            *((void *)v688 + 1) = v684;
            *(void *)(v693 + 8) = v688;
            *uint64_t v684 = *v684 & 7 | (unint64_t)v688;
            HIDWORD(v1438[1]) = 0;
            v1439[0] = 0uLL;
            *(void **)((char *)v1438 + 4) = (void *)(v3 + v182);
            LODWORD(v1438[0]) = 0x1000000;
            llvm::MachineInstr::addOperand(v688, v686, (const llvm::MachineOperand *)v1438);
            v1438[1] = 0;
            v1439[0] = 0uLL;
            LODWORD(v1438[0]) = (v3 << 8) + 8448;
            HIDWORD(v1438[0]) = v1430;
            llvm::MachineInstr::addOperand(v688, v686, (const llvm::MachineOperand *)v1438);
            uint64_t v3 = 1;
            if (v681) {
              return v3;
            }
          }
        }
        int v1332 = *(unsigned __int8 *)v1435[0];
        if ((v1332 - 4) > 0x1E)
        {
          if ((v1332 - 3) >= 0xFFFFFFFE) {
            int v1361 = v1435[0];
          }
          else {
            int v1361 = 0;
          }
          if ((v1332 - 3) < 0xFFFFFFFE)
          {
            if (v1332 == 3) {
              *((void *)v1435[0] + 1) = 0;
            }
            goto LABEL_898;
          }
          unint64_t v1334 = (unint64_t)v1361 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
            goto LABEL_898;
          }
          uint64_t v1333 = *((void *)v1435[0] + 2);
          if ((v1333 & 4) == 0) {
            goto LABEL_898;
          }
          unint64_t v1334 = v1333 & 0xFFFFFFFFFFFFFFF8;
          if (!v1334) {
            goto LABEL_898;
          }
        }
        v1438[0] = v1435;
        sub_1CC5FA668(v1334 + 16, v1438);
        goto LABEL_898;
      }
      int v432 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v432) {
        return 0;
      }
      LODWORD(v248) = v432;
      if (v172 <= 0x10 && v178 <= 0xFFF)
      {
        int v433 = sub_1CD789230((uint64_t *)a1, v177);
        if (!v433) {
          return 0;
        }
        int v434 = v433;
        uint64_t v435 = *(void *)(a1 + 32);
        uint64_t v436 = *(void *)(v435 + 640);
        uint64_t v437 = *(unint64_t **)(v435 + 648);
        uint64_t v438 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
        int v439 = *(llvm::MachineFunction **)(v436 + 32);
        uint64_t v440 = *(void **)(a1 + 72);
        v1435[0] = v440;
        if (v440) {
          llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v440, 2);
        }
        unint64_t v441 = llvm::MachineFunction::CreateMachineInstr(v439, v438, (unsigned __int8 **)v1435, 0);
        if (!v1435[0]) {
          goto LABEL_595;
        }
        int v1376 = *(unsigned __int8 *)v1435[0];
        if ((v1376 - 4) > 0x1E)
        {
          if ((v1376 - 3) >= 0xFFFFFFFE) {
            v1395 = v1435[0];
          }
          else {
            v1395 = 0;
          }
          if ((v1376 - 3) < 0xFFFFFFFE)
          {
            if (v1376 == 3) {
              *((void *)v1435[0] + 1) = 0;
            }
            goto LABEL_595;
          }
          unint64_t v1378 = (unint64_t)v1395 + 8;
        }
        else if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3) {
               || (uint64_t v1377 = *((void *)v1435[0] + 2), (v1377 & 4) == 0)
        }
               || (unint64_t v1378 = v1377 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_595:
          uint64_t v442 = *(void *)(v436 + 40);
          *((void *)v441 + 3) = v442;
          uint64_t v443 = *(void *)(v442 + 32);
          uint64_t v444 = *((unsigned int *)v441 + 10);
          if (v444)
          {
            uint64_t v1247 = *((void *)v441 + 4);
            uint64_t v1248 = *(void *)(v443 + 40);
            uint64_t v1249 = 32 * v444;
            do
            {
              if (!*(unsigned char *)v1247)
              {
                uint64_t v1250 = *(unsigned int *)(v1247 + 4);
                if ((int)v1250 >= 0) {
                  v1251 = (uint64_t *)(*(void *)(v1248 + 272) + 8 * v1250);
                }
                else {
                  v1251 = (uint64_t *)(*(void *)(v1248 + 24) + 16 * (v1250 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1252 = *v1251;
                if (*v1251)
                {
                  uint64_t v1253 = *(void *)(v1252 + 16);
                  *(void *)(v1252 + 16) = v1247;
                  *(void *)(v1247 + 16) = v1253;
                  if (*(unsigned char *)(v1247 + 3))
                  {
                    *(void *)(v1247 + 24) = v1252;
                  }
                  else
                  {
                    *(void *)(v1247 + 24) = 0;
                    v1251 = (uint64_t *)(v1253 + 24);
                  }
                }
                else
                {
                  *(void *)(v1247 + 16) = v1247;
                  *(void *)(v1247 + 24) = 0;
                }
                uint64_t *v1251 = v1247;
              }
              v1247 += 32;
              v1249 -= 32;
            }
            while (v1249);
          }
LABEL_596:
          uint64_t v445 = *(void *)(v443 + 728);
          if (v445) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v445 + 24))(v445, v441);
          }
          unint64_t v446 = *v437 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v441 = v446 | *(void *)v441 & 7;
          *((void *)v441 + 1) = v437;
          *(void *)(v446 + 8) = v441;
          *uint64_t v437 = *v437 & 7 | (unint64_t)v441;
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0x1000000;
          HIDWORD(v1438[0]) = v248;
          llvm::MachineInstr::addOperand(v441, v439, (const llvm::MachineOperand *)v1438);
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0;
          HIDWORD(v1438[0]) = v434;
          int v447 = v441;
          uint64_t v448 = v439;
          goto LABEL_1636;
        }
        v1438[0] = v1435;
        sub_1CC5FA668(v1378 + 16, v1438);
        goto LABEL_595;
      }
      if (*(unsigned char *)(v177 + 16) == 66) {
        uint64_t v177 = *(void *)(v177 - 32);
      }
      int v904 = sub_1CD789230((uint64_t *)a1, v177);
      if (!v904) {
        return 0;
      }
      int v905 = v904;
      v906 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v904 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      if (v906 == &off_1E66A4180 || v906 == &off_1E66A41C8)
      {
        int v1232 = 0;
      }
      else
      {
        sub_1CD3CB380(a1, v904, 1);
        int v1232 = 256;
      }
      uint64_t v908 = *(void *)(a1 + 32);
      uint64_t v909 = *(void *)(v908 + 640);
      unsigned int v910 = *(unint64_t **)(v908 + 648);
      uint64_t v911 = 17904;
      if (v172 > 0x10) {
        uint64_t v911 = 17328;
      }
      uint64_t v912 = *(void *)(*(void *)(a1 + 96) + 8) + v911;
      v913 = *(llvm::MachineFunction **)(v909 + 32);
      int v914 = *(void **)(a1 + 72);
      v1435[0] = v914;
      if (v914) {
        llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v914, 2);
      }
      uint64_t v915 = llvm::MachineFunction::CreateMachineInstr(v913, v912, (unsigned __int8 **)v1435, 0);
      if (!v1435[0]) {
        goto LABEL_1250;
      }
      int v1379 = *(unsigned __int8 *)v1435[0];
      if ((v1379 - 4) > 0x1E)
      {
        if ((v1379 - 3) >= 0xFFFFFFFE) {
          v1396 = v1435[0];
        }
        else {
          v1396 = 0;
        }
        if ((v1379 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1381 = (unint64_t)v1396 + 8;
LABEL_2233:
          v1438[0] = v1435;
          sub_1CC5FA668(v1381 + 16, v1438);
          goto LABEL_1250;
        }
        if (v1379 == 3) {
          *((void *)v1435[0] + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v1435[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1435[0] + 3))
      {
        uint64_t v1380 = *((void *)v1435[0] + 2);
        if ((v1380 & 4) != 0)
        {
          unint64_t v1381 = v1380 & 0xFFFFFFFFFFFFFFF8;
          if (v1381) {
            goto LABEL_2233;
          }
        }
      }
LABEL_1250:
      uint64_t v916 = *(void *)(v909 + 40);
      *((void *)v915 + 3) = v916;
      uint64_t v917 = *(void *)(v916 + 32);
      uint64_t v918 = *((unsigned int *)v915 + 10);
      if (v918)
      {
        uint64_t v1240 = *((void *)v915 + 4);
        uint64_t v1241 = *(void *)(v917 + 40);
        uint64_t v1242 = 32 * v918;
        do
        {
          if (!*(unsigned char *)v1240)
          {
            uint64_t v1243 = *(unsigned int *)(v1240 + 4);
            if ((int)v1243 >= 0) {
              uint64_t v1244 = (uint64_t *)(*(void *)(v1241 + 272) + 8 * v1243);
            }
            else {
              uint64_t v1244 = (uint64_t *)(*(void *)(v1241 + 24) + 16 * (v1243 & 0x7FFFFFFF) + 8);
            }
            uint64_t v1245 = *v1244;
            if (*v1244)
            {
              uint64_t v1246 = *(void *)(v1245 + 16);
              *(void *)(v1245 + 16) = v1240;
              *(void *)(v1240 + 16) = v1246;
              if (*(unsigned char *)(v1240 + 3))
              {
                *(void *)(v1240 + 24) = v1245;
              }
              else
              {
                *(void *)(v1240 + 24) = 0;
                uint64_t v1244 = (uint64_t *)(v1246 + 24);
              }
            }
            else
            {
              *(void *)(v1240 + 16) = v1240;
              *(void *)(v1240 + 24) = 0;
            }
            *uint64_t v1244 = v1240;
          }
          v1240 += 32;
          v1242 -= 32;
        }
        while (v1242);
      }
      uint64_t v919 = *(void *)(v917 + 728);
      if (v919) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v919 + 24))(v919, v915);
      }
      unint64_t v920 = *v910 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v915 = v920 | *(void *)v915 & 7;
      *((void *)v915 + 1) = v910;
      *(void *)(v920 + 8) = v915;
      *unsigned int v910 = *v910 & 7 | (unint64_t)v915;
      v1438[1] = 0;
      v1439[0] = 0uLL;
      LODWORD(v1438[0]) = 0x1000000;
      HIDWORD(v1438[0]) = v248;
      llvm::MachineInstr::addOperand(v915, v913, (const llvm::MachineOperand *)v1438);
      LODWORD(v1438[0]) = 1;
      v1438[1] = 0;
      *(void *)&v1439[0] = 0;
      llvm::MachineInstr::addOperand(v915, v913, (const llvm::MachineOperand *)v1438);
      v1435[0] = v913;
      v1435[1] = v915;
      int v921 = *((_DWORD *)v5 + 5);
      if ((v921 & 0x40000000) != 0) {
        unint64_t v922 = (uint64_t ***)*(v5 - 1);
      }
      else {
        unint64_t v922 = &v5[-4 * (v921 & 0x7FFFFFF)];
      }
      if ((sub_1CB8843D8(a1, *v922, 0, (llvm::MachineFunction **)v1435, 0) & 1) == 0)
      {
        v1438[1] = 0;
        v1439[0] = 0uLL;
        v1438[0] = (void *)__PAIR64__(v905, v1232);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1435[1], (llvm::MachineFunction *)v1435[0], (const llvm::MachineOperand *)v1438);
      }
      uint64_t v3 = 1;
      LODWORD(v1438[0]) = 1;
      v1438[1] = 0;
      *(void *)&v1439[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1435[1], (llvm::MachineFunction *)v1435[0], (const llvm::MachineOperand *)v1438);
      LODWORD(v1438[0]) = 1;
      v1438[1] = 0;
      *(void *)&v1439[0] = ~(-1 << v179) | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1435[1], (llvm::MachineFunction *)v1435[0], (const llvm::MachineOperand *)v1438);
      uint64_t v207 = (llvm::MachineFunction *)v1435[0];
      unint64_t v206 = (llvm::MachineInstr *)v1435[1];
LABEL_290:
      LODWORD(v1438[0]) = 1;
LABEL_881:
      v1438[1] = 0;
      *(void *)&v1439[0] = 0;
      llvm::MachineInstr::addOperand(v206, v207, (const llvm::MachineOperand *)v1438);
      uint64_t v294 = (llvm::MachineFunction *)v1435[0];
      uint64_t v293 = (llvm::MachineInstr *)v1435[1];
LABEL_882:
      *(_OWORD *)v1438 = 0u;
      v1439[0] = 0u;
LABEL_883:
      llvm::MachineInstr::addOperand(v293, v294, (const llvm::MachineOperand *)v1438);
      return v3;
    case 0x44:
      unsigned int v62 = *((_DWORD *)*v5 + 2);
      unsigned int v63 = v62 >> 8;
      HIDWORD(v65) = v62 >> 8;
      LODWORD(v65) = (v62 >> 8) - 8;
      unsigned int v64 = v65 >> 3;
      BOOL v221 = v64 > 7;
      int v66 = (1 << v64) & 0x8B;
      if (v221 || v66 == 0) {
        return 0;
      }
      int v68 = *(unsigned __int8 *)(*(void *)(a1 + 256) + 280);
      int v69 = *((_DWORD *)v5 + 5);
      unsigned int v70 = (v69 & 0x40000000) != 0 ? *(v5 - 1) : (uint64_t **)&v5[-4 * (v69 & 0x7FFFFFF)];
      unsigned int v239 = *(_DWORD *)(**v70 + 8) >> 8;
      uint64_t v240 = (1 << BYTE1(*(_DWORD *)(**v70 + 8))) & 0x100010102;
      if (v239 > 0x20 || v240 == 0) {
        return 0;
      }
      int v242 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)v5);
      if (!v242) {
        return 0;
      }
      int v243 = *((_DWORD *)v5 + 5);
      int v1422 = v242;
      int v1427 = v68;
      if (v239 != 1) {
        goto LABEL_793;
      }
      uint64_t v244 = (v243 & 0x40000000) != 0 ? (uint64_t *)*(v5 - 1) : (uint64_t *)&v5[-4 * (v243 & 0x7FFFFFF)];
      uint64_t v251 = *v244;
      if (v251)
      {
        if (*(unsigned __int8 *)(v251 + 16) >= 0x1Cu && *(uint64_t ***)(v251 + 40) != v5[5]) {
          goto LABEL_793;
        }
      }
      uint64_t v252 = ***v5;
      unsigned int v253 = (llvm::ConstantInt *)(v252 + 1936);
      int v254 = (llvm::ConstantInt *)(v252 + 1960);
      unsigned int v255 = v62 >> 13;
      if (v62 >> 13) {
        int v256 = &off_1E66A4340;
      }
      else {
        int v256 = &off_1E66A4180;
      }
      if (v255) {
        uint64_t v257 = v254;
      }
      else {
        uint64_t v257 = v253;
      }
      if (v63 == 8) {
        unint64_t v258 = 255;
      }
      else {
        unint64_t v258 = -1;
      }
      int v259 = llvm::ConstantInt::get(v257, v258, 0);
      uint64_t v260 = llvm::ConstantInt::get(v257, 0, 0);
      uint64_t v261 = *(void *)(a1 + 48);
      int v262 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v261, "", 0);
      *(void *)(*(void *)(v261 + 24) + 16 * (v262 & 0x7FFFFFFF)) = v256;
      uint64_t v263 = *(void *)(v261 + 8);
      if (v263)
      {
        (*(void (**)(uint64_t))(*(void *)v263 + 24))(v263);
        if (!v262) {
          return 0;
        }
      }
      else if (!v262)
      {
        return 0;
      }
      int v243 = *((_DWORD *)v5 + 5);
      if ((v243 & 0x40000000) != 0) {
        uint64_t v264 = (uint64_t *)*(v5 - 1);
      }
      else {
        uint64_t v264 = (uint64_t *)&v5[-4 * (v243 & 0x7FFFFFF)];
      }
      uint64_t v277 = *v264;
      int v278 = *(unsigned __int8 *)(*v264 + 16);
      if (v277 && v278 == 82)
      {
        char v279 = sub_1CB88D14C(a1, (llvm::Type **)v5, v277, *(unsigned __int8 **)(v277 - 64), *(llvm::ConstantFP ****)(v277 - 32), (uint64_t)v259, (uint64_t)v260, v262);
      }
      else
      {
        if (v278 != 81)
        {
LABEL_793:
          if ((v243 & 0x40000000) != 0) {
            uint64_t v601 = (uint64_t ****)*(v5 - 1);
          }
          else {
            uint64_t v601 = (uint64_t ****)&v5[-4 * (v243 & 0x7FFFFFF)];
          }
          uint64_t v602 = *v601;
          if (*((unsigned char *)v602 + 16) != 66) {
            uint64_t v602 = 0;
          }
          if (v602) {
            BOOL v603 = v239 == 8;
          }
          else {
            BOOL v603 = 0;
          }
          if (!v603) {
            uint64_t v602 = v5;
          }
          int v604 = *((_DWORD *)v602 + 5);
          int v280 = v1427;
          if ((v604 & 0x40000000) != 0) {
            uint64_t v605 = (uint64_t *)*(v602 - 1);
          }
          else {
            uint64_t v605 = (uint64_t *)&v602[-4 * (v604 & 0x7FFFFFF)];
          }
          int v606 = sub_1CD789230((uint64_t *)a1, *v605);
          if (!v606) {
            return 0;
          }
          int v262 = v606;
          if (v239 != 1)
          {
            if (v239 == 8)
            {
              if (v63 >= 0x20) {
                unsigned int v239 = 32;
              }
              else {
                unsigned int v239 = v63;
              }
              int v607 = sub_1CB86665C((void *)a1, v606, v239);
              if (!v607) {
                return 0;
              }
              int v262 = v607;
            }
LABEL_393:
            if (!v280 && v63 == 64 && v239 == 16)
            {
              uint64_t v281 = *(void *)(a1 + 32);
              uint64_t v282 = *(void *)(v281 + 640);
              int v283 = *(unint64_t **)(v281 + 648);
              uint64_t v284 = *(void *)(*(void *)(a1 + 96) + 8) + 134640;
              uint64_t v285 = *(llvm::MachineFunction **)(v282 + 32);
              uint64_t v286 = *(void **)(a1 + 72);
              v1435[0] = v286;
              if (v286) {
                llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v286, 2);
              }
              uint64_t v287 = llvm::MachineFunction::CreateMachineInstr(v285, v284, (unsigned __int8 **)v1435, 0);
              if (!v1435[0]) {
                goto LABEL_399;
              }
              int v1276 = *(unsigned __int8 *)v1435[0];
              if ((v1276 - 4) > 0x1E)
              {
                if ((v1276 - 3) >= 0xFFFFFFFE) {
                  unsigned int v1300 = v1435[0];
                }
                else {
                  unsigned int v1300 = 0;
                }
                if ((v1276 - 3) < 0xFFFFFFFE)
                {
                  if (v1276 == 3) {
                    *((void *)v1435[0] + 1) = 0;
                  }
                  goto LABEL_399;
                }
                unint64_t v1278 = (unint64_t)v1300 + 8;
              }
              else
              {
                if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                  goto LABEL_399;
                }
                uint64_t v1277 = *((void *)v1435[0] + 2);
                if ((v1277 & 4) == 0) {
                  goto LABEL_399;
                }
                unint64_t v1278 = v1277 & 0xFFFFFFFFFFFFFFF8;
                if (!v1278) {
                  goto LABEL_399;
                }
              }
              v1438[0] = v1435;
              sub_1CC5FA668(v1278 + 16, v1438);
LABEL_399:
              uint64_t v288 = *(void *)(v282 + 40);
              *((void *)v287 + 3) = v288;
              uint64_t v289 = *(void *)(v288 + 32);
              uint64_t v290 = *((unsigned int *)v287 + 10);
              if (v290)
              {
                uint64_t v705 = *((void *)v287 + 4);
                uint64_t v706 = *(void *)(v289 + 40);
                uint64_t v707 = 32 * v290;
                do
                {
                  if (!*(unsigned char *)v705)
                  {
                    uint64_t v708 = *(unsigned int *)(v705 + 4);
                    if ((int)v708 >= 0) {
                      int v709 = (uint64_t *)(*(void *)(v706 + 272) + 8 * v708);
                    }
                    else {
                      int v709 = (uint64_t *)(*(void *)(v706 + 24) + 16 * (v708 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v710 = *v709;
                    if (*v709)
                    {
                      uint64_t v711 = *(void *)(v710 + 16);
                      *(void *)(v710 + 16) = v705;
                      *(void *)(v705 + 16) = v711;
                      if (*(unsigned char *)(v705 + 3))
                      {
                        *(void *)(v705 + 24) = v710;
                      }
                      else
                      {
                        *(void *)(v705 + 24) = 0;
                        int v709 = (uint64_t *)(v711 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v705 + 16) = v705;
                      *(void *)(v705 + 24) = 0;
                    }
                    *int v709 = v705;
                  }
                  v705 += 32;
                  v707 -= 32;
                }
                while (v707);
              }
              uint64_t v291 = *(void *)(v289 + 728);
              if (v291) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v291 + 24))(v291, v287);
              }
              unint64_t v292 = *v283 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v287 = v292 | *(void *)v287 & 7;
              *((void *)v287 + 1) = v283;
              *(void *)(v292 + 8) = v287;
              unint64_t *v283 = *v283 & 7 | (unint64_t)v287;
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0x1000000;
              HIDWORD(v1438[0]) = v1422;
              llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
              uint64_t v3 = 1;
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = 0;
              llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0;
              HIDWORD(v1438[0]) = v262;
              llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = 8;
              llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = 0x100000000;
              llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = 0;
              llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
              *(_OWORD *)v1438 = 0u;
              v1439[0] = 0u;
LABEL_403:
              uint64_t v293 = v287;
              uint64_t v294 = v285;
              goto LABEL_883;
            }
            if (v63 >= 0x11 && v239 == 16)
            {
              uint64_t v334 = *(void *)(a1 + 48);
              int v335 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v334, "", 0);
              *(void *)(*(void *)(v334 + 24) + 16 * (v335 & 0x7FFFFFFF)) = &off_1E66A4340;
              uint64_t v336 = *(void *)(v334 + 8);
              if (v336)
              {
                (*(void (**)(uint64_t))(*(void *)v336 + 24))(v336);
                if (!v335) {
                  return 0;
                }
              }
              else if (!v335)
              {
                return 0;
              }
              uint64_t v337 = *(void *)(a1 + 32);
              uint64_t v338 = *(void *)(v337 + 640);
              uint64_t v339 = *(unint64_t **)(v337 + 648);
              uint64_t v340 = 136560;
              if (v280) {
                uint64_t v340 = 132960;
              }
              uint64_t v341 = *(void *)(*(void *)(a1 + 96) + 8) + v340;
              uint64_t v342 = *(llvm::MachineFunction **)(v338 + 32);
              int v343 = *(void **)(a1 + 72);
              v1435[0] = v343;
              if (v343) {
                llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v343, 2);
              }
              uint64_t v344 = llvm::MachineFunction::CreateMachineInstr(v342, v341, (unsigned __int8 **)v1435, 0);
              if (!v1435[0])
              {
LABEL_457:
                uint64_t v345 = *(void *)(v338 + 40);
                *((void *)v344 + 3) = v345;
                uint64_t v346 = *(void *)(v345 + 32);
                uint64_t v347 = *((unsigned int *)v344 + 10);
                if (v347)
                {
                  uint64_t v930 = *((void *)v344 + 4);
                  uint64_t v931 = *(void *)(v346 + 40);
                  uint64_t v932 = 32 * v347;
                  int v280 = v1427;
                  do
                  {
                    if (!*(unsigned char *)v930)
                    {
                      uint64_t v933 = *(unsigned int *)(v930 + 4);
                      if ((int)v933 >= 0) {
                        v934 = (uint64_t *)(*(void *)(v931 + 272) + 8 * v933);
                      }
                      else {
                        v934 = (uint64_t *)(*(void *)(v931 + 24) + 16 * (v933 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v935 = *v934;
                      if (*v934)
                      {
                        uint64_t v936 = *(void *)(v935 + 16);
                        *(void *)(v935 + 16) = v930;
                        *(void *)(v930 + 16) = v936;
                        if (*(unsigned char *)(v930 + 3))
                        {
                          *(void *)(v930 + 24) = v935;
                        }
                        else
                        {
                          *(void *)(v930 + 24) = 0;
                          v934 = (uint64_t *)(v936 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v930 + 16) = v930;
                        *(void *)(v930 + 24) = 0;
                      }
                      uint64_t *v934 = v930;
                    }
                    v930 += 32;
                    v932 -= 32;
                  }
                  while (v932);
                }
                uint64_t v348 = *(void *)(v346 + 728);
                if (v348) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v348 + 24))(v348, v344);
                }
                unint64_t v349 = *v339 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v344 = v349 | *(void *)v344 & 7;
                *((void *)v344 + 1) = v339;
                *(void *)(v349 + 8) = v344;
                unint64_t *v339 = *v339 & 7 | (unint64_t)v344;
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0x1000000;
                HIDWORD(v1438[0]) = v335;
                llvm::MachineInstr::addOperand(v344, v342, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0;
                llvm::MachineInstr::addOperand(v344, v342, (const llvm::MachineOperand *)v1438);
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0;
                HIDWORD(v1438[0]) = v262;
                llvm::MachineInstr::addOperand(v344, v342, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 8;
                llvm::MachineInstr::addOperand(v344, v342, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0x100000000;
                llvm::MachineInstr::addOperand(v344, v342, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0;
                llvm::MachineInstr::addOperand(v344, v342, (const llvm::MachineOperand *)v1438);
                *(_OWORD *)v1438 = 0u;
                v1439[0] = 0u;
                llvm::MachineInstr::addOperand(v344, v342, (const llvm::MachineOperand *)v1438);
                uint64_t v350 = *(void *)(a1 + 32);
                uint64_t v351 = *(void *)(v350 + 640);
                uint64_t v352 = *(unint64_t **)(v350 + 648);
                uint64_t v353 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
                uint64_t v354 = *(llvm::MachineFunction **)(v351 + 32);
                uint64_t v355 = *(void **)(a1 + 72);
                v1435[0] = v355;
                if (v355) {
                  llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v355, 2);
                }
                uint64_t v356 = llvm::MachineFunction::CreateMachineInstr(v354, v353, (unsigned __int8 **)v1435, 0);
                if (!v1435[0]) {
                  goto LABEL_463;
                }
                int v1297 = *(unsigned __int8 *)v1435[0];
                if ((v1297 - 4) > 0x1E)
                {
                  if ((v1297 - 3) >= 0xFFFFFFFE) {
                    uint64_t v1328 = v1435[0];
                  }
                  else {
                    uint64_t v1328 = 0;
                  }
                  if ((v1297 - 3) < 0xFFFFFFFE)
                  {
                    int v280 = v1427;
                    if (v1297 == 3) {
                      *((void *)v1435[0] + 1) = 0;
                    }
                    goto LABEL_463;
                  }
                  unint64_t v1299 = (unint64_t)v1328 + 8;
                }
                else
                {
                  int v280 = v1427;
                  if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                    goto LABEL_463;
                  }
                  uint64_t v1298 = *((void *)v1435[0] + 2);
                  if ((v1298 & 4) == 0) {
                    goto LABEL_463;
                  }
                  unint64_t v1299 = v1298 & 0xFFFFFFFFFFFFFFF8;
                  if (!v1299) {
                    goto LABEL_463;
                  }
                }
                v1438[0] = v1435;
                sub_1CC5FA668(v1299 + 16, v1438);
                int v280 = v1427;
LABEL_463:
                uint64_t v357 = *(void *)(v351 + 40);
                *((void *)v356 + 3) = v357;
                uint64_t v358 = *(void *)(v357 + 32);
                uint64_t v359 = *((unsigned int *)v356 + 10);
                if (v359)
                {
                  uint64_t v937 = *((void *)v356 + 4);
                  uint64_t v938 = *(void *)(v358 + 40);
                  uint64_t v939 = 32 * v359;
                  int v280 = v1427;
                  do
                  {
                    if (!*(unsigned char *)v937)
                    {
                      uint64_t v940 = *(unsigned int *)(v937 + 4);
                      if ((int)v940 >= 0) {
                        long long v941 = (uint64_t *)(*(void *)(v938 + 272) + 8 * v940);
                      }
                      else {
                        long long v941 = (uint64_t *)(*(void *)(v938 + 24) + 16 * (v940 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v942 = *v941;
                      if (*v941)
                      {
                        uint64_t v943 = *(void *)(v942 + 16);
                        *(void *)(v942 + 16) = v937;
                        *(void *)(v937 + 16) = v943;
                        if (*(unsigned char *)(v937 + 3))
                        {
                          *(void *)(v937 + 24) = v942;
                        }
                        else
                        {
                          *(void *)(v937 + 24) = 0;
                          long long v941 = (uint64_t *)(v943 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v937 + 16) = v937;
                        *(void *)(v937 + 24) = 0;
                      }
                      *long long v941 = v937;
                    }
                    v937 += 32;
                    v939 -= 32;
                  }
                  while (v939);
                }
                uint64_t v360 = *(void *)(v358 + 728);
                if (v360) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v360 + 24))(v360, v356);
                }
                unint64_t v361 = *v352 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v356 = v361 | *(void *)v356 & 7;
                *((void *)v356 + 1) = v352;
                *(void *)(v361 + 8) = v356;
                *uint64_t v352 = *v352 & 7 | (unint64_t)v356;
                v1438[1] = 0;
                v1439[0] = 0uLL;
                int v362 = v1422;
                LODWORD(v1438[0]) = 0x1000000;
                HIDWORD(v1438[0]) = v1422;
                llvm::MachineInstr::addOperand(v356, v354, (const llvm::MachineOperand *)v1438);
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0;
                HIDWORD(v1438[0]) = v335;
                llvm::MachineInstr::addOperand(v356, v354, (const llvm::MachineOperand *)v1438);
                goto LABEL_613;
              }
              int v1294 = *(unsigned __int8 *)v1435[0];
              if ((v1294 - 4) > 0x1E)
              {
                if ((v1294 - 3) >= 0xFFFFFFFE) {
                  size_t v1327 = v1435[0];
                }
                else {
                  size_t v1327 = 0;
                }
                if ((v1294 - 3) < 0xFFFFFFFE)
                {
                  int v280 = v1427;
                  if (v1294 == 3) {
                    *((void *)v1435[0] + 1) = 0;
                  }
                  goto LABEL_457;
                }
                unint64_t v1296 = (unint64_t)v1327 + 8;
              }
              else
              {
                int v280 = v1427;
                if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                  goto LABEL_457;
                }
                uint64_t v1295 = *((void *)v1435[0] + 2);
                if ((v1295 & 4) == 0) {
                  goto LABEL_457;
                }
                unint64_t v1296 = v1295 & 0xFFFFFFFFFFFFFFF8;
                if (!v1296) {
                  goto LABEL_457;
                }
              }
              v1438[0] = v1435;
              sub_1CC5FA668(v1296 + 16, v1438);
              int v280 = v1427;
              goto LABEL_457;
            }
            if (!v280)
            {
              int v335 = v262;
              if (v63 == 64) {
                goto LABEL_638;
              }
            }
            uint64_t v449 = *(void *)(a1 + 32);
            uint64_t v450 = *(void *)(v449 + 640);
            uint64_t v451 = *(unint64_t **)(v449 + 648);
            uint64_t v452 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
            int v453 = *(llvm::MachineFunction **)(v450 + 32);
            uint64_t v454 = *(void **)(a1 + 72);
            v1435[0] = v454;
            if (v454) {
              llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v454, 2);
            }
            unint64_t v455 = llvm::MachineFunction::CreateMachineInstr(v453, v452, (unsigned __int8 **)v1435, 0);
            if (v1435[0])
            {
              int v1301 = *(unsigned __int8 *)v1435[0];
              if ((v1301 - 4) > 0x1E)
              {
                if ((v1301 - 3) >= 0xFFFFFFFE) {
                  int v1338 = v1435[0];
                }
                else {
                  int v1338 = 0;
                }
                if ((v1301 - 3) < 0xFFFFFFFE)
                {
                  int v280 = v1427;
                  if (v1301 == 3) {
                    *((void *)v1435[0] + 1) = 0;
                  }
                  goto LABEL_609;
                }
                unint64_t v1303 = (unint64_t)v1338 + 8;
              }
              else
              {
                int v280 = v1427;
                if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                  goto LABEL_609;
                }
                uint64_t v1302 = *((void *)v1435[0] + 2);
                if ((v1302 & 4) == 0) {
                  goto LABEL_609;
                }
                unint64_t v1303 = v1302 & 0xFFFFFFFFFFFFFFF8;
                if (!v1303) {
                  goto LABEL_609;
                }
              }
              v1438[0] = v1435;
              sub_1CC5FA668(v1303 + 16, v1438);
              int v280 = v1427;
            }
LABEL_609:
            uint64_t v456 = *(void *)(v450 + 40);
            *((void *)v455 + 3) = v456;
            uint64_t v457 = *(void *)(v456 + 32);
            uint64_t v458 = *((unsigned int *)v455 + 10);
            if (v458)
            {
              uint64_t v944 = *((void *)v455 + 4);
              uint64_t v945 = *(void *)(v457 + 40);
              uint64_t v946 = 32 * v458;
              int v280 = v1427;
              do
              {
                if (!*(unsigned char *)v944)
                {
                  uint64_t v947 = *(unsigned int *)(v944 + 4);
                  if ((int)v947 >= 0) {
                    v948 = (uint64_t *)(*(void *)(v945 + 272) + 8 * v947);
                  }
                  else {
                    v948 = (uint64_t *)(*(void *)(v945 + 24) + 16 * (v947 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v949 = *v948;
                  if (*v948)
                  {
                    uint64_t v950 = *(void *)(v949 + 16);
                    *(void *)(v949 + 16) = v944;
                    *(void *)(v944 + 16) = v950;
                    if (*(unsigned char *)(v944 + 3))
                    {
                      *(void *)(v944 + 24) = v949;
                    }
                    else
                    {
                      *(void *)(v944 + 24) = 0;
                      v948 = (uint64_t *)(v950 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v944 + 16) = v944;
                    *(void *)(v944 + 24) = 0;
                  }
                  uint64_t *v948 = v944;
                }
                v944 += 32;
                v946 -= 32;
              }
              while (v946);
            }
            uint64_t v459 = *(void *)(v457 + 728);
            if (v459) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v459 + 24))(v459, v455);
            }
            unint64_t v460 = *v451 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v455 = v460 | *(void *)v455 & 7;
            *((void *)v455 + 1) = v451;
            *(void *)(v460 + 8) = v455;
            unint64_t *v451 = *v451 & 7 | (unint64_t)v455;
            v1438[1] = 0;
            v1439[0] = 0uLL;
            int v362 = v1422;
            LODWORD(v1438[0]) = 0x1000000;
            HIDWORD(v1438[0]) = v1422;
            llvm::MachineInstr::addOperand(v455, v453, (const llvm::MachineOperand *)v1438);
            v1438[1] = 0;
            v1439[0] = 0uLL;
            LODWORD(v1438[0]) = 0;
            HIDWORD(v1438[0]) = v262;
            llvm::MachineInstr::addOperand(v455, v453, (const llvm::MachineOperand *)v1438);
            int v335 = v262;
LABEL_613:
            if (v63 == 64)
            {
              if (v280)
              {
                int v461 = v362 + 1;
                goto LABEL_640;
              }
LABEL_638:
              uint64_t v472 = *(void *)(a1 + 48);
              int v461 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v472, "", 0);
              *(void *)(*(void *)(v472 + 24) + 16 * (v461 & 0x7FFFFFFF)) = &off_1E66A4340;
              uint64_t v473 = *(void *)(v472 + 8);
              if (v473) {
                (*(void (**)(uint64_t))(*(void *)v473 + 24))(v473);
              }
LABEL_640:
              uint64_t v474 = *(void *)(a1 + 32);
              uint64_t v475 = *(void *)(v474 + 640);
              uint64_t v476 = *(unint64_t **)(v474 + 648);
              uint64_t v477 = *(void *)(*(void *)(a1 + 96) + 8) + 622128;
              uint64_t v478 = *(llvm::MachineFunction **)(v475 + 32);
              uint64_t v479 = *(void **)(a1 + 72);
              v1435[0] = v479;
              if (v479) {
                llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v479, 2);
              }
              v480 = llvm::MachineFunction::CreateMachineInstr(v478, v477, (unsigned __int8 **)v1435, 0);
              if (!v1435[0])
              {
LABEL_643:
                uint64_t v481 = *(void *)(v475 + 40);
                *((void *)v480 + 3) = v481;
                uint64_t v482 = *(void *)(v481 + 32);
                uint64_t v483 = *((unsigned int *)v480 + 10);
                if (v483)
                {
                  uint64_t v875 = *((void *)v480 + 4);
                  uint64_t v876 = *(void *)(v482 + 40);
                  uint64_t v877 = 32 * v483;
                  do
                  {
                    if (!*(unsigned char *)v875)
                    {
                      uint64_t v878 = *(unsigned int *)(v875 + 4);
                      if ((int)v878 >= 0) {
                        int v879 = (uint64_t *)(*(void *)(v876 + 272) + 8 * v878);
                      }
                      else {
                        int v879 = (uint64_t *)(*(void *)(v876 + 24) + 16 * (v878 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v880 = *v879;
                      if (*v879)
                      {
                        uint64_t v881 = *(void *)(v880 + 16);
                        *(void *)(v880 + 16) = v875;
                        *(void *)(v875 + 16) = v881;
                        if (*(unsigned char *)(v875 + 3))
                        {
                          *(void *)(v875 + 24) = v880;
                        }
                        else
                        {
                          *(void *)(v875 + 24) = 0;
                          int v879 = (uint64_t *)(v881 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v875 + 16) = v875;
                        *(void *)(v875 + 24) = 0;
                      }
                      *int v879 = v875;
                    }
                    v875 += 32;
                    v877 -= 32;
                  }
                  while (v877);
                }
                uint64_t v484 = *(void *)(v482 + 728);
                if (v484) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v484 + 24))(v484, v480);
                }
                unint64_t v485 = *v476 & 0xFFFFFFFFFFFFFFF8;
                *(void *)v480 = v485 | *(void *)v480 & 7;
                *((void *)v480 + 1) = v476;
                *(void *)(v485 + 8) = v480;
                *uint64_t v476 = *v476 & 7 | (unint64_t)v480;
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0x1000000;
                HIDWORD(v1438[0]) = v461;
                llvm::MachineInstr::addOperand(v480, v478, (const llvm::MachineOperand *)v1438);
                uint64_t v3 = 1;
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0;
                llvm::MachineInstr::addOperand(v480, v478, (const llvm::MachineOperand *)v1438);
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0;
                HIDWORD(v1438[0]) = v335;
                llvm::MachineInstr::addOperand(v480, v478, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0;
                llvm::MachineInstr::addOperand(v480, v478, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0x10000001FLL;
                llvm::MachineInstr::addOperand(v480, v478, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0;
                llvm::MachineInstr::addOperand(v480, v478, (const llvm::MachineOperand *)v1438);
                *(_OWORD *)v1438 = 0u;
                v1439[0] = 0u;
                llvm::MachineInstr::addOperand(v480, v478, (const llvm::MachineOperand *)v1438);
                if (v1427) {
                  return v3;
                }
                uint64_t v486 = *(void *)(a1 + 32);
                uint64_t v487 = *(void *)(v486 + 640);
                uint64_t v488 = *(unint64_t **)(v486 + 648);
                uint64_t v489 = *(void *)(*(void *)(a1 + 96) + 8) + 864;
                uint64_t v285 = *(llvm::MachineFunction **)(v487 + 32);
                int v490 = *(void **)(a1 + 72);
                v1435[0] = v490;
                if (v490) {
                  llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v490, 2);
                }
                uint64_t v287 = llvm::MachineFunction::CreateMachineInstr(v285, v489, (unsigned __int8 **)v1435, 0);
                if (!v1435[0]) {
                  goto LABEL_650;
                }
                int v1307 = *(unsigned __int8 *)v1435[0];
                if ((v1307 - 4) > 0x1E)
                {
                  if ((v1307 - 3) >= 0xFFFFFFFE) {
                    v1345 = v1435[0];
                  }
                  else {
                    v1345 = 0;
                  }
                  if ((v1307 - 3) < 0xFFFFFFFE)
                  {
                    if (v1307 == 3) {
                      *((void *)v1435[0] + 1) = 0;
                    }
                    goto LABEL_650;
                  }
                  unint64_t v1309 = (unint64_t)v1345 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                    goto LABEL_650;
                  }
                  uint64_t v1308 = *((void *)v1435[0] + 2);
                  if ((v1308 & 4) == 0) {
                    goto LABEL_650;
                  }
                  unint64_t v1309 = v1308 & 0xFFFFFFFFFFFFFFF8;
                  if (!v1309) {
                    goto LABEL_650;
                  }
                }
                v1438[0] = v1435;
                sub_1CC5FA668(v1309 + 16, v1438);
LABEL_650:
                uint64_t v491 = *(void *)(v487 + 40);
                *((void *)v287 + 3) = v491;
                uint64_t v492 = *(void *)(v491 + 32);
                uint64_t v493 = *((unsigned int *)v287 + 10);
                if (v493)
                {
                  uint64_t v970 = *((void *)v287 + 4);
                  uint64_t v971 = *(void *)(v492 + 40);
                  uint64_t v972 = 32 * v493;
                  do
                  {
                    if (!*(unsigned char *)v970)
                    {
                      uint64_t v973 = *(unsigned int *)(v970 + 4);
                      if ((int)v973 >= 0) {
                        int v974 = (uint64_t *)(*(void *)(v971 + 272) + 8 * v973);
                      }
                      else {
                        int v974 = (uint64_t *)(*(void *)(v971 + 24) + 16 * (v973 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v975 = *v974;
                      if (*v974)
                      {
                        uint64_t v976 = *(void *)(v975 + 16);
                        *(void *)(v975 + 16) = v970;
                        *(void *)(v970 + 16) = v976;
                        if (*(unsigned char *)(v970 + 3))
                        {
                          *(void *)(v970 + 24) = v975;
                        }
                        else
                        {
                          *(void *)(v970 + 24) = 0;
                          int v974 = (uint64_t *)(v976 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v970 + 16) = v970;
                        *(void *)(v970 + 24) = 0;
                      }
                      *int v974 = v970;
                    }
                    v970 += 32;
                    v972 -= 32;
                  }
                  while (v972);
                }
                uint64_t v494 = *(void *)(v492 + 728);
                if (v494) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v494 + 24))(v494, v287);
                }
                unint64_t v495 = *v488 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v287 = v495 | *(void *)v287 & 7;
                *((void *)v287 + 1) = v488;
                *(void *)(v495 + 8) = v287;
                *uint64_t v488 = *v488 & 7 | (unint64_t)v287;
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0x1000000;
                HIDWORD(v1438[0]) = v1422;
                llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0;
                HIDWORD(v1438[0]) = v262;
                llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
                uint64_t v3 = 1;
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 33;
                llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0;
                HIDWORD(v1438[0]) = v461;
                llvm::MachineInstr::addOperand(v287, v285, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 34;
                goto LABEL_403;
              }
              int v1288 = *(unsigned __int8 *)v1435[0];
              if ((v1288 - 4) > 0x1E)
              {
                if ((v1288 - 3) >= 0xFFFFFFFE) {
                  v1313 = v1435[0];
                }
                else {
                  v1313 = 0;
                }
                if ((v1288 - 3) < 0xFFFFFFFE)
                {
                  if (v1288 == 3) {
                    *((void *)v1435[0] + 1) = 0;
                  }
                  goto LABEL_643;
                }
                unint64_t v1290 = (unint64_t)v1313 + 8;
              }
              else
              {
                if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                  goto LABEL_643;
                }
                uint64_t v1289 = *((void *)v1435[0] + 2);
                if ((v1289 & 4) == 0) {
                  goto LABEL_643;
                }
                unint64_t v1290 = v1289 & 0xFFFFFFFFFFFFFFF8;
                if (!v1290) {
                  goto LABEL_643;
                }
              }
              v1438[0] = v1435;
              sub_1CC5FA668(v1290 + 16, v1438);
              goto LABEL_643;
            }
            return 1;
          }
          if (v63 >= 0x20) {
            unsigned int v239 = 32;
          }
          else {
            unsigned int v239 = v63;
          }
          int v882 = sub_1CD3CC218(a1, v606, v239);
          if (!v882) {
            return 0;
          }
          int v262 = v882;
LABEL_392:
          int v280 = v1427;
          goto LABEL_393;
        }
        char v279 = sub_1CB88F21C((uint64_t *)a1, (uint64_t *)v5, v277, *(void *)(v277 - 64), *(void *)(v277 - 32), (uint64_t)v259, (uint64_t)v260, v262);
      }
      if (v255) {
        unsigned int v239 = 32;
      }
      else {
        unsigned int v239 = v63;
      }
      if ((v279 & 1) == 0) {
        return 0;
      }
      goto LABEL_392;
    case 0x45:
    case 0x46:
      uint64_t v272 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v272) {
        return 0;
      }
      return sub_1CD3CC398((uint64_t *)a1, (uint64_t)v5, v272);
    case 0x47:
    case 0x48:
      int v273 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v273) {
        return 0;
      }
      BOOL v274 = *((unsigned __int8 *)*v5 + 8) != 2;
      return sub_1CB866354((uint64_t *)a1, (uint64_t)v5, v273, v274);
    case 0x49:
      uint64_t v363 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v363) {
        return 0;
      }
      return sub_1CB863AC4((void *)a1, (uint64_t)v5, v363, 0);
    case 0x4A:
      if (*((unsigned char *)*v5 + 8) != 2) {
        return 0;
      }
      int v58 = *((_DWORD *)v5 + 5);
      unint64_t v59 = (v58 & 0x40000000) != 0 ? *(v5 - 1) : (uint64_t **)&v5[-4 * (v58 & 0x7FFFFFF)];
      if (*(unsigned char *)(**v59 + 8)) {
        return 0;
      }
      uint64_t v247 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v247) {
        return 0;
      }
      uint64_t v248 = v247;
      if (!*(unsigned char *)(a1 + 280)) {
        goto LABEL_829;
      }
      int v249 = *((_DWORD *)v5 + 5);
      if ((v249 & 0x40000000) != 0) {
        uint64_t v250 = (uint64_t *)*(v5 - 1);
      }
      else {
        uint64_t v250 = (uint64_t *)&v5[-4 * (v249 & 0x7FFFFFF)];
      }
      uint64_t v609 = *v250;
      unsigned int v610 = *(unsigned __int8 *)(*v250 + 16);
      if (v609 && v610 >= 0x1C)
      {
        if (v610 != 73 || *(uint64_t ***)(v609 + 40) != v5[5]) {
          goto LABEL_829;
        }
      }
      else if (v610 != 73)
      {
        goto LABEL_829;
      }
      if (sub_1CB883E68(a1, v609) && !sub_1CB859958(a1, (uint64_t)v5)
        || (uint64_t v611 = *(void *)(v609 - 32)) == 0)
      {
LABEL_829:
        if (sub_1CB861840(a1, (uint64_t)v5, v248, 0, 0)) {
          return 1;
        }
        int v612 = *((_DWORD *)v5 + 5);
        if ((v612 & 0x40000000) != 0) {
          unsigned int v613 = (uint64_t *)*(v5 - 1);
        }
        else {
          unsigned int v613 = (uint64_t *)&v5[-4 * (v612 & 0x7FFFFFF)];
        }
        v1440.i64[0] = *v613;
        LOBYTE(v1443) = 1;
        v1446.i32[0] = 0;
        int v636 = sub_1CB88467C(a1, v1440.i64, v1446.i32, &v1443, 0, (uint64_t)v5[5], 7, 1);
        uint64_t v3 = v636 != 0;
        if (!v636) {
          return v3;
        }
        int v637 = v636;
        uint64_t v638 = *(void *)(a1 + 32);
        uint64_t v639 = *(void *)(v638 + 640);
        uint64_t v640 = *(unint64_t **)(v638 + 648);
        uint64_t v641 = *(void *)(*(void *)(a1 + 96) + 8)
             + 48 * *((unsigned __int16 *)&word_1CD91CB14 + v1443);
        unsigned int v642 = *(llvm::MachineFunction **)(v639 + 32);
        unsigned int v643 = *(void **)(a1 + 72);
        v1435[0] = v643;
        if (v643) {
          llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v643, 2);
        }
        unsigned int v644 = llvm::MachineFunction::CreateMachineInstr(v642, v641, (unsigned __int8 **)v1435, 0);
        if (v1435[0])
        {
          int v1329 = *(unsigned __int8 *)v1435[0];
          if ((v1329 - 4) > 0x1E)
          {
            if ((v1329 - 3) >= 0xFFFFFFFE) {
              uint64_t v1360 = v1435[0];
            }
            else {
              uint64_t v1360 = 0;
            }
            if ((v1329 - 3) < 0xFFFFFFFE)
            {
              if (v1329 == 3) {
                *((void *)v1435[0] + 1) = 0;
              }
              goto LABEL_875;
            }
            unint64_t v1331 = (unint64_t)v1360 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
              goto LABEL_875;
            }
            uint64_t v1330 = *((void *)v1435[0] + 2);
            if ((v1330 & 4) == 0) {
              goto LABEL_875;
            }
            unint64_t v1331 = v1330 & 0xFFFFFFFFFFFFFFF8;
            if (!v1331) {
              goto LABEL_875;
            }
          }
          v1438[0] = v1435;
          sub_1CC5FA668(v1331 + 16, v1438);
        }
LABEL_875:
        uint64_t v645 = *(void *)(v639 + 40);
        *((void *)v644 + 3) = v645;
        uint64_t v646 = *(void *)(v645 + 32);
        uint64_t v647 = *((unsigned int *)v644 + 10);
        if (v647)
        {
          uint64_t v1093 = *((void *)v644 + 4);
          uint64_t v1094 = *(void *)(v646 + 40);
          uint64_t v1095 = 32 * v647;
          do
          {
            if (!*(unsigned char *)v1093)
            {
              uint64_t v1096 = *(unsigned int *)(v1093 + 4);
              if ((int)v1096 >= 0) {
                v1097 = (uint64_t *)(*(void *)(v1094 + 272) + 8 * v1096);
              }
              else {
                v1097 = (uint64_t *)(*(void *)(v1094 + 24) + 16 * (v1096 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1098 = *v1097;
              if (*v1097)
              {
                uint64_t v1099 = *(void *)(v1098 + 16);
                *(void *)(v1098 + 16) = v1093;
                *(void *)(v1093 + 16) = v1099;
                if (*(unsigned char *)(v1093 + 3))
                {
                  *(void *)(v1093 + 24) = v1098;
                }
                else
                {
                  *(void *)(v1093 + 24) = 0;
                  v1097 = (uint64_t *)(v1099 + 24);
                }
              }
              else
              {
                *(void *)(v1093 + 16) = v1093;
                *(void *)(v1093 + 24) = 0;
              }
              uint64_t *v1097 = v1093;
            }
            v1093 += 32;
            v1095 -= 32;
          }
          while (v1095);
        }
        uint64_t v648 = *(void *)(v646 + 728);
        if (v648) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v648 + 24))(v648, v644);
        }
        unint64_t v649 = *v640 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unsigned int v644 = v649 | *(void *)v644 & 7;
        *((void *)v644 + 1) = v640;
        *(void *)(v649 + 8) = v644;
        *uint64_t v640 = *v640 & 7 | (unint64_t)v644;
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0x1000000;
        HIDWORD(v1438[0]) = v248;
        llvm::MachineInstr::addOperand(v644, v642, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v644, v642, (const llvm::MachineOperand *)v1438);
        v1435[0] = v642;
        v1435[1] = v644;
        if ((sub_1CB8843D8(a1, v1440.i64[0], 0, (llvm::MachineFunction **)v1435, 0) & 1) == 0)
        {
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0;
          HIDWORD(v1438[0]) = v637;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1435[1], (llvm::MachineFunction *)v1435[0], (const llvm::MachineOperand *)v1438);
        }
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = v1446.u32[0];
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1435[1], (llvm::MachineFunction *)v1435[0], (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0x100008000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1435[1], (llvm::MachineFunction *)v1435[0], (const llvm::MachineOperand *)v1438);
        uint64_t v207 = (llvm::MachineFunction *)v1435[0];
        unint64_t v206 = (llvm::MachineInstr *)v1435[1];
        LODWORD(v1438[0]) = 1;
        goto LABEL_881;
      }
      int v1132 = sub_1CD789230((uint64_t *)a1, v611);
      if (!v1132) {
        return 0;
      }
      int v434 = v1132;
      uint64_t v1133 = *(void *)(a1 + 32);
      uint64_t v1134 = *(void *)(v1133 + 640);
      uint64_t v437 = *(unint64_t **)(v1133 + 648);
      uint64_t v1135 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
      int v439 = *(llvm::MachineFunction **)(v1134 + 32);
      uint64_t v1136 = *(void **)(a1 + 72);
      v1435[0] = v1136;
      if (v1136) {
        llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v1136, 2);
      }
      unint64_t v441 = llvm::MachineFunction::CreateMachineInstr(v439, v1135, (unsigned __int8 **)v1435, 0);
      if (!v1435[0]) {
        goto LABEL_1589;
      }
      int v1398 = *(unsigned __int8 *)v1435[0];
      if ((v1398 - 4) > 0x1E)
      {
        if ((v1398 - 3) >= 0xFFFFFFFE) {
          v1403 = v1435[0];
        }
        else {
          v1403 = 0;
        }
        if ((v1398 - 3) < 0xFFFFFFFE)
        {
          if (v1398 == 3) {
            *((void *)v1435[0] + 1) = 0;
          }
          goto LABEL_1589;
        }
        unint64_t v1400 = (unint64_t)v1403 + 8;
      }
      else if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3) {
             || (uint64_t v1399 = *((void *)v1435[0] + 2), (v1399 & 4) == 0)
      }
             || (unint64_t v1400 = v1399 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
LABEL_1589:
        uint64_t v1137 = *(void *)(v1134 + 40);
        *((void *)v441 + 3) = v1137;
        uint64_t v443 = *(void *)(v1137 + 32);
        uint64_t v1138 = *((unsigned int *)v441 + 10);
        if (v1138)
        {
          uint64_t v1139 = *((void *)v441 + 4);
          uint64_t v1140 = *(void *)(v443 + 40);
          uint64_t v1141 = 32 * v1138;
          do
          {
            if (!*(unsigned char *)v1139)
            {
              uint64_t v1142 = *(unsigned int *)(v1139 + 4);
              if ((int)v1142 >= 0) {
                v1143 = (uint64_t *)(*(void *)(v1140 + 272) + 8 * v1142);
              }
              else {
                v1143 = (uint64_t *)(*(void *)(v1140 + 24) + 16 * (v1142 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1144 = *v1143;
              if (*v1143)
              {
                uint64_t v1145 = *(void *)(v1144 + 16);
                *(void *)(v1144 + 16) = v1139;
                *(void *)(v1139 + 16) = v1145;
                if (*(unsigned char *)(v1139 + 3))
                {
                  *(void *)(v1139 + 24) = v1144;
                }
                else
                {
                  *(void *)(v1139 + 24) = 0;
                  v1143 = (uint64_t *)(v1145 + 24);
                }
              }
              else
              {
                *(void *)(v1139 + 16) = v1139;
                *(void *)(v1139 + 24) = 0;
              }
              uint64_t *v1143 = v1139;
            }
            v1139 += 32;
            v1141 -= 32;
          }
          while (v1141);
        }
        goto LABEL_596;
      }
      v1438[0] = v1435;
      sub_1CC5FA668(v1400 + 16, v1438);
      goto LABEL_1589;
    case 0x4D:
      int v368 = *((_DWORD *)v5 + 5);
      if ((v368 & 0x40000000) != 0) {
        unint64_t v369 = (uint64_t *)*(v5 - 1);
      }
      else {
        unint64_t v369 = (uint64_t *)&v5[-4 * (v368 & 0x7FFFFFF)];
      }
      uint64_t v462 = *v369;
      return sub_1CD3CB258((uint64_t *)a1, (uint64_t *)v5, v462);
    case 0x51:
      return sub_1CD3CC0E8((uint64_t *)a1, (uint64_t)v5);
    case 0x52:
      return sub_1CD3CBF94((uint64_t *)a1, (uint64_t)v5);
    case 0x54:
      uint64_t v171 = (uint64_t)*(v5 - 4);
      if (!v171 || *(unsigned char *)(v171 + 16) || *(uint64_t ***)(v171 + 24) != v5[9] || (*(unsigned char *)(v171 + 33) & 0x20) == 0) {
        return 0;
      }
      return sub_1CB867550(a1, (uint64_t)v5);
    case 0x55:
      int v364 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v364) {
        return 0;
      }
      int v365 = v364;
      unint64_t v366 = *v5;
      if (*((_DWORD *)*v5 + 2)) {
        BOOL v367 = *((_DWORD *)*v5 + 2) == 13 && *((_DWORD *)*v5 + 2) >> 8 < 0x11u;
      }
      else {
        BOOL v367 = 1;
      }
      unint64_t v528 = sub_1CB83544C(*(void *)(a1 + 88), (uint64_t)*v5);
      if (v527 == 1) {
      if (v528 > 0x20)
      }
        return 0;
      int v529 = *((_DWORD *)v5 + 5);
      if ((v529 & 0x40000000) != 0) {
        uint64_t v530 = (uint64_t *)*(v5 - 1);
      }
      else {
        uint64_t v530 = (uint64_t *)&v5[-4 * (v529 & 0x7FFFFFF)];
      }
      uint64_t v590 = *v530;
      unsigned int v591 = *(unsigned __int8 *)(*v530 + 16);
      if (v590 && v591 >= 0x1C && *(uint64_t ***)(v590 + 40) != v5[5]) {
        goto LABEL_1159;
      }
      if (v591 != 81)
      {
        if (v591 == 82)
        {
          v592 = *(unsigned __int8 **)(v590 - 64);
          uint64_t v593 = (v529 & 0x40000000) != 0 ? *(v5 - 1) : (uint64_t **)&v5[-4 * (v529 & 0x7FFFFFF)];
          if ((*(_DWORD *)(*(void *)v592 + 8) | 2) == 2)
          {
            unint64_t v848 = *(llvm::ConstantFP ****)(v590 - 32);
            uint64_t v849 = (uint64_t)v593[4];
            uint64_t v850 = (uint64_t)v593[8];
            return sub_1CB88D14C(a1, (llvm::Type **)v5, v590, v592, v848, v849, v850, v365);
          }
        }
LABEL_1159:
        uint64_t v3 = 0;
        int v855 = *((_DWORD *)v366 + 2);
        if (v855 > 0xDu) {
          return v3;
        }
        unsigned __int8 v1425 = v855;
        BOOL v1431 = v367;
        if (((1 << v855) & 0x2005) == 0) {
          return v3;
        }
        v1435[0] = 0;
        v1435[1] = 0;
        int8x16_t v1440 = 0uLL;
        int8x16_t v1446 = 0uLL;
        int32x2_t v1445 = 0;
        if ((v529 & 0x40000000) != 0) {
          uint64_t v856 = (uint64_t *)*(v5 - 1);
        }
        else {
          uint64_t v856 = (uint64_t *)&v5[-4 * (v529 & 0x7FFFFFF)];
        }
        int v1421 = sub_1CD789230((uint64_t *)a1, *v856);
        if (!v1421) {
          return 0;
        }
        uint64_t v883 = 0;
        unsigned int v884 = 0;
        v1434.i16[0] = 0;
        char v885 = 1;
        do
        {
          char v886 = v885;
          int v887 = *((_DWORD *)v5 + 5);
          if ((v887 & 0x40000000) != 0) {
            uint64_t v888 = (uint64_t ***)*(v5 - 1);
          }
          else {
            uint64_t v888 = &v5[-4 * (v887 & 0x7FFFFFF)];
          }
          uint64_t v889 = (uint64_t)v888[4 * v883 + 4];
          v1446.i64[v883] = v889;
          int v890 = *(unsigned __int8 *)(v889 + 16);
          if (v889) {
            BOOL v891 = v890 == 17;
          }
          else {
            BOOL v891 = 0;
          }
          if (v891)
          {
            v1435[v883] = (void *)v889;
            v895 = *(void **)(v889 + 32);
            v894 = (llvm::detail::DoubleAPFloat *)(v889 + 32);
            if (v895 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v894, (llvm::APInt *)v1438);
            }
            else {
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v894, (uint64_t)v1438);
            }
            unsigned int v896 = v1438[1];
            BOOL v897 = v1438[0];
            unsigned int v898 = v1438;
            if (LODWORD(v1438[1]) >= 0x41) {
              unsigned int v898 = (void **)v1438[0];
            }
            v1434.i8[v883] = *v898 == 0;
            if (v896 >= 0x41 && v897) {
              MEMORY[0x1D25D9CB0](v897, 0x1000C8000313F17);
            }
            v884 |= 1 << v883;
          }
          else
          {
            if (v889) {
              BOOL v892 = v890 == 16;
            }
            else {
              BOOL v892 = 0;
            }
            if (v892)
            {
              v1440.i64[v883] = v889;
              v893 = (void *)(v889 + 24);
              if (*(_DWORD *)(v889 + 32) >= 0x41u) {
                v893 = (void *)*v893;
              }
              v884 |= 1 << v883;
              v1434.i8[v883] = *v893 == 0;
            }
            else
            {
              __int32 v899 = sub_1CD789230((uint64_t *)a1, v889);
              v1445.i32[v883] = v899;
              if (!v899) {
                return 0;
              }
            }
          }
          char v885 = 0;
          uint64_t v883 = 1;
        }
        while ((v886 & 1) != 0);
        if (v1434.i8[0])
        {
          int v900 = 0;
          LODWORD(v901) = v884 & 2;
          unsigned int v902 = *(unsigned __int16 *)((char *)&word_1CD91C1B0 + 4 * v1431 + (v884 & 2));
          int v903 = v365;
          goto LABEL_1400;
        }
        int v1000 = v1434.u8[1];
        if ((v884 & 2) != 0 && v1434.i8[1])
        {
          uint64_t v1001 = v1446.i64[1];
          uint64_t v1002 = v1446.i64[0];
        }
        else
        {
          uint64_t v1001 = v1446.i64[1];
          unsigned int v1261 = sub_1CD3CF78C(a1, v1446.i64[1]);
          uint64_t v1002 = v1446.i64[0];
          if (v1261 <= sub_1CD3CF78C(a1, v1446.i64[0]))
          {
            LODWORD(v901) = v884 & 2;
            unsigned int v902 = *(unsigned __int16 *)((char *)&word_1CD91C1B0 + 4 * v1431 + (v884 & 2));
LABEL_1395:
            uint64_t v1003 = *(void *)(a1 + 48);
            int v1004 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1003, "", 0);
            int v903 = v1004;
            BOOL v1005 = &off_1E66A4340;
            if (v1431) {
              BOOL v1005 = &off_1E66A4180;
            }
            *(void *)(*(void *)(v1003 + 24) + 16 * (v1004 & 0x7FFFFFFF)) = v1005;
            uint64_t v1006 = *(void *)(v1003 + 8);
            if (v1006) {
              (*(void (**)(uint64_t))(*(void *)v1006 + 24))(v1006);
            }
            int v900 = 1;
LABEL_1400:
            uint64_t v1007 = *(void *)(a1 + 32);
            uint64_t v1008 = *(void *)(v1007 + 640);
            v1009 = *(unint64_t **)(v1007 + 648);
            uint64_t v1010 = *(void *)(*(void *)(a1 + 96) + 8) + 48 * v902;
            unsigned int v1011 = *(llvm::MachineFunction **)(v1008 + 32);
            v1012 = *(unsigned __int8 **)(a1 + 72);
            v1443 = (llvm::MachineFunction *)v1012;
            if (v1012) {
              llvm::MetadataTracking::track((uint64_t)&v1443, v1012, 2);
            }
            uint64_t v1013 = llvm::MachineFunction::CreateMachineInstr(v1011, v1010, (unsigned __int8 **)&v1443, 0);
            if (!v1443)
            {
LABEL_1403:
              uint64_t v1014 = *(void *)(v1008 + 40);
              *((void *)v1013 + 3) = v1014;
              uint64_t v1015 = *(void *)(v1014 + 32);
              uint64_t v1016 = *((unsigned int *)v1013 + 10);
              if (v1016)
              {
                uint64_t v1224 = *((void *)v1013 + 4);
                uint64_t v1225 = *(void *)(v1015 + 40);
                uint64_t v1226 = 32 * v1016;
                do
                {
                  if (!*(unsigned char *)v1224)
                  {
                    uint64_t v1227 = *(unsigned int *)(v1224 + 4);
                    if ((int)v1227 >= 0) {
                      v1228 = (uint64_t *)(*(void *)(v1225 + 272) + 8 * v1227);
                    }
                    else {
                      v1228 = (uint64_t *)(*(void *)(v1225 + 24) + 16 * (v1227 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v1229 = *v1228;
                    if (*v1228)
                    {
                      uint64_t v1230 = *(void *)(v1229 + 16);
                      *(void *)(v1229 + 16) = v1224;
                      *(void *)(v1224 + 16) = v1230;
                      if (*(unsigned char *)(v1224 + 3))
                      {
                        *(void *)(v1224 + 24) = v1229;
                      }
                      else
                      {
                        *(void *)(v1224 + 24) = 0;
                        v1228 = (uint64_t *)(v1230 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v1224 + 16) = v1224;
                      *(void *)(v1224 + 24) = 0;
                    }
                    uint64_t *v1228 = v1224;
                  }
                  v1224 += 32;
                  v1226 -= 32;
                }
                while (v1226);
              }
              uint64_t v1017 = *(void *)(v1015 + 728);
              if (v1017) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1017 + 24))(v1017, v1013);
              }
              unint64_t v1018 = *v1009 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v1013 = v1018 | *(void *)v1013 & 7;
              *((void *)v1013 + 1) = v1009;
              *(void *)(v1018 + 8) = v1013;
              unint64_t *v1009 = *v1009 & 7 | (unint64_t)v1013;
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0x1000000;
              HIDWORD(v1438[0]) = v903;
              llvm::MachineInstr::addOperand(v1013, v1011, (const llvm::MachineOperand *)v1438);
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = 0;
              llvm::MachineInstr::addOperand(v1013, v1011, (const llvm::MachineOperand *)v1438);
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0;
              HIDWORD(v1438[0]) = v1421;
              llvm::MachineInstr::addOperand(v1013, v1011, (const llvm::MachineOperand *)v1438);
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = 0;
              llvm::MachineInstr::addOperand(v1013, v1011, (const llvm::MachineOperand *)v1438);
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = 0x100000000;
              llvm::MachineInstr::addOperand(v1013, v1011, (const llvm::MachineOperand *)v1438);
              v1443 = v1011;
              v1444 = v1013;
              if (v901)
              {
                if ((v1425 | 2) == 2)
                {
                  v1019 = (llvm::detail::DoubleAPFloat *)((char *)v1435[1] + 32);
                  if (*((_UNKNOWN **)v1435[1] + 4) == &unk_1CFB2E344) {
                    llvm::detail::DoubleAPFloat::bitcastToAPInt(v1019, (llvm::APInt *)v1438);
                  }
                  else {
                    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v1019, (uint64_t)v1438);
                  }
                  if (LODWORD(v1438[1]) >= 0x41) {
                    int v1020 = (void **)v1438[0];
                  }
                  else {
                    int v1020 = v1438;
                  }
                  uint64_t v1021 = (uint64_t)*v1020;
                  if (LODWORD(v1438[1]) >= 0x41 && v1438[0]) {
                    MEMORY[0x1D25D9CB0]();
                  }
                }
                else
                {
                  v1100 = (uint64_t *)(v1440.i64[1] + 24);
                  if (*(_DWORD *)(v1440.i64[1] + 32) >= 0x41u) {
                    v1100 = (uint64_t *)*v1100;
                  }
                  uint64_t v1021 = *v1100;
                }
                uint64_t v1101 = v1021 | 0x100000000;
                LODWORD(v1438[0]) = 1;
                if (!v1431) {
                  uint64_t v1101 = v1021;
                }
                v1438[1] = 0;
                *(void *)&v1439[0] = v1101;
                unsigned int v1022 = v1013;
                v1023 = v1011;
LABEL_1536:
                llvm::MachineInstr::addOperand(v1022, v1023, (const llvm::MachineOperand *)v1438);
                if (v900)
                {
                  v1438[1] = 0;
                  v1439[0] = 0uLL;
                  v1438[0] = (void *)0x201000000;
                }
                else
                {
                  *(_OWORD *)v1438 = 0u;
                  v1439[0] = 0u;
                }
                llvm::MachineInstr::addOperand(v1444, v1443, (const llvm::MachineOperand *)v1438);
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0;
                llvm::MachineInstr::addOperand(v1444, v1443, (const llvm::MachineOperand *)v1438);
                *(_OWORD *)v1438 = 0u;
                v1439[0] = 0u;
                llvm::MachineInstr::addOperand(v1444, v1443, (const llvm::MachineOperand *)v1438);
                if (!v900) {
                  return 1;
                }
                uint64_t v1102 = *(void *)(a1 + 32);
                uint64_t v1103 = *(void *)(v1102 + 640);
                v1104 = *(unint64_t **)(v1102 + 648);
                uint64_t v1105 = *(void *)(*(void *)(a1 + 96) + 8)
                      + 48 * dword_1CD923568[v1431 & 0xFFFFFFFD | (2 * (v884 & 1))];
                v1106 = *(llvm::MachineFunction **)(v1103 + 32);
                v1107 = *(unsigned __int8 **)(a1 + 72);
                v1432 = v1107;
                if (v1107) {
                  llvm::MetadataTracking::track((uint64_t)&v1432, v1107, 2);
                }
                v1108 = llvm::MachineFunction::CreateMachineInstr(v1106, v1105, &v1432, 0);
                if (!v1432) {
                  goto LABEL_1543;
                }
                int v1382 = *v1432;
                if ((v1382 - 4) > 0x1E)
                {
                  if ((v1382 - 3) >= 0xFFFFFFFE) {
                    v1397 = v1432;
                  }
                  else {
                    v1397 = 0;
                  }
                  if ((v1382 - 3) < 0xFFFFFFFE)
                  {
                    if (v1382 == 3) {
                      *((void *)v1432 + 1) = 0;
                    }
                    goto LABEL_1543;
                  }
                  unint64_t v1384 = (unint64_t)(v1397 + 8);
                }
                else
                {
                  if ((v1432[1] & 0x7F) != 2 && !*((_DWORD *)v1432 + 3)) {
                    goto LABEL_1543;
                  }
                  uint64_t v1383 = *((void *)v1432 + 2);
                  if ((v1383 & 4) == 0) {
                    goto LABEL_1543;
                  }
                  unint64_t v1384 = v1383 & 0xFFFFFFFFFFFFFFF8;
                  if (!v1384) {
                    goto LABEL_1543;
                  }
                }
                v1438[0] = &v1432;
                sub_1CC5FA668(v1384 + 16, v1438);
LABEL_1543:
                uint64_t v1109 = *(void *)(v1103 + 40);
                *((void *)v1108 + 3) = v1109;
                uint64_t v1110 = *(void *)(v1109 + 32);
                uint64_t v1111 = *((unsigned int *)v1108 + 10);
                if (v1111)
                {
                  uint64_t v1254 = *((void *)v1108 + 4);
                  uint64_t v1255 = *(void *)(v1110 + 40);
                  uint64_t v1256 = 32 * v1111;
                  do
                  {
                    if (!*(unsigned char *)v1254)
                    {
                      uint64_t v1257 = *(unsigned int *)(v1254 + 4);
                      if ((int)v1257 >= 0) {
                        uint64_t v1258 = (uint64_t *)(*(void *)(v1255 + 272) + 8 * v1257);
                      }
                      else {
                        uint64_t v1258 = (uint64_t *)(*(void *)(v1255 + 24) + 16 * (v1257 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v1259 = *v1258;
                      if (*v1258)
                      {
                        uint64_t v1260 = *(void *)(v1259 + 16);
                        *(void *)(v1259 + 16) = v1254;
                        *(void *)(v1254 + 16) = v1260;
                        if (*(unsigned char *)(v1254 + 3))
                        {
                          *(void *)(v1254 + 24) = v1259;
                        }
                        else
                        {
                          *(void *)(v1254 + 24) = 0;
                          uint64_t v1258 = (uint64_t *)(v1260 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v1254 + 16) = v1254;
                        *(void *)(v1254 + 24) = 0;
                      }
                      *uint64_t v1258 = v1254;
                    }
                    v1254 += 32;
                    v1256 -= 32;
                  }
                  while (v1256);
                }
                uint64_t v1112 = *(void *)(v1110 + 728);
                if (v1112) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1112 + 24))(v1112, v1108);
                }
                unint64_t v1113 = *v1104 & 0xFFFFFFFFFFFFFFF8;
                *(void *)v1108 = v1113 | *(void *)v1108 & 7;
                *((void *)v1108 + 1) = v1104;
                *(void *)(v1113 + 8) = v1108;
                unint64_t *v1104 = *v1104 & 7 | (unint64_t)v1108;
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0x1000000;
                HIDWORD(v1438[0]) = v365;
                llvm::MachineInstr::addOperand(v1108, v1106, (const llvm::MachineOperand *)v1438);
                v1432 = (unsigned __int8 *)v1106;
                v1433 = v1108;
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = 0;
                HIDWORD(v1438[0]) = v903;
                llvm::MachineInstr::addOperand(v1108, v1106, (const llvm::MachineOperand *)v1438);
                if (v884)
                {
                  if ((v1425 | 2) == 2)
                  {
                    unsigned int v1115 = (llvm::detail::DoubleAPFloat *)((char *)v1435[0] + 32);
                    if (*((_UNKNOWN **)v1435[0] + 4) == &unk_1CFB2E344) {
                      llvm::detail::DoubleAPFloat::bitcastToAPInt(v1115, (llvm::APInt *)v1438);
                    }
                    else {
                      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v1115, (uint64_t)v1438);
                    }
                    if (LODWORD(v1438[1]) >= 0x41) {
                      unsigned int v1116 = (void **)v1438[0];
                    }
                    else {
                      unsigned int v1116 = v1438;
                    }
                    uint64_t v1117 = (uint64_t)*v1116;
                    if (LODWORD(v1438[1]) >= 0x41 && v1438[0]) {
                      MEMORY[0x1D25D9CB0]();
                    }
                  }
                  else
                  {
                    v1201 = (uint64_t *)(v1440.i64[0] + 24);
                    if (*(_DWORD *)(v1440.i64[0] + 32) >= 0x41u) {
                      v1201 = (uint64_t *)*v1201;
                    }
                    uint64_t v1117 = *v1201;
                  }
                  uint64_t v1202 = v1117 | 0x100000000;
                  LODWORD(v1438[0]) = 1;
                  if (!v1431) {
                    uint64_t v1202 = v1117;
                  }
                  v1438[1] = 0;
                  *(void *)&v1439[0] = v1202;
                  llvm::MachineInstr::addOperand(v1108, v1106, (const llvm::MachineOperand *)v1438);
                }
                else if (!v1446.i64[0] {
                       || (char v1114 = sub_1CB8843D8(a1, v1446.i64[0], 0, (llvm::MachineFunction **)&v1432, 0),
                }
                           v1106 = (llvm::MachineFunction *)v1432,
                           v1108 = v1433,
                           (v1114 & 1) == 0))
                {
                  v1438[1] = 0;
                  v1439[0] = 0uLL;
                  LODWORD(v1438[0]) = 0;
                  HIDWORD(v1438[0]) = v1445.i32[0];
                  llvm::MachineInstr::addOperand(v1108, v1106, (const llvm::MachineOperand *)v1438);
                  v1106 = (llvm::MachineFunction *)v1432;
                  v1108 = v1433;
                }
                LODWORD(v1438[0]) = 1;
                v1438[1] = 0;
                *(void *)&v1439[0] = 0;
                llvm::MachineInstr::addOperand(v1108, v1106, (const llvm::MachineOperand *)v1438);
                uint64_t v448 = (llvm::MachineFunction *)v1432;
                int v447 = v1433;
                v1438[1] = 0;
                v1439[0] = 0uLL;
                v1438[0] = (void *)0x200000000;
                goto LABEL_1636;
              }
              if (v1446.i64[1])
              {
                if (sub_1CB8843D8(a1, (unsigned char *)v1446.i64[1], 0, &v1443, 0))
                {
LABEL_1420:
                  v1023 = v1443;
                  unsigned int v1022 = v1444;
                  LODWORD(v1438[0]) = 1;
                  v1438[1] = 0;
                  *(void *)&v1439[0] = 0;
                  goto LABEL_1536;
                }
                unsigned int v1011 = v1443;
                uint64_t v1013 = v1444;
              }
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0;
              HIDWORD(v1438[0]) = v1445.i32[1];
              llvm::MachineInstr::addOperand(v1013, v1011, (const llvm::MachineOperand *)v1438);
              goto LABEL_1420;
            }
            int v1366 = *(unsigned __int8 *)v1443;
            if ((v1366 - 4) > 0x1E)
            {
              if ((v1366 - 3) >= 0xFFFFFFFE) {
                uint64_t v1390 = v1443;
              }
              else {
                uint64_t v1390 = 0;
              }
              if ((v1366 - 3) < 0xFFFFFFFE)
              {
                if (v1366 == 3) {
                  *((void *)v1443 + 1) = 0;
                }
                goto LABEL_1403;
              }
              unint64_t v1368 = (unint64_t)v1390 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1443 + 1) & 0x7F) != 2 && !*((_DWORD *)v1443 + 3)) {
                goto LABEL_1403;
              }
              uint64_t v1367 = *((void *)v1443 + 2);
              if ((v1367 & 4) == 0) {
                goto LABEL_1403;
              }
              unint64_t v1368 = v1367 & 0xFFFFFFFFFFFFFFF8;
              if (!v1368) {
                goto LABEL_1403;
              }
            }
            v1438[0] = &v1443;
            sub_1CC5FA668(v1368 + 16, v1438);
            goto LABEL_1403;
          }
        }
        int v900 = 0;
        int32x2_t v1445 = vrev64_s32(v1445);
        v1446.i64[0] = v1001;
        v1446.i64[1] = v1002;
        *(int8x16_t *)v1435 = vextq_s8(*(int8x16_t *)v1435, *(int8x16_t *)v1435, 8uLL);
        int8x16_t v1440 = vextq_s8(v1440, v1440, 8uLL);
        v1434.i16[0] = v1000;
        unsigned int v884 = __rbit32(v884) >> 30;
        uint64_t v901 = v884 & 2;
        unsigned int v902 = *(unsigned __int16 *)((char *)&word_1CD91C1B0 + 4 * v1431 + v901 + 8);
        int v903 = v365;
        if (v1000) {
          goto LABEL_1400;
        }
        goto LABEL_1395;
      }
      uint64_t v650 = *(void *)(v590 - 64);
      unsigned int v651 = *(_DWORD *)(*(void *)v650 + 8);
      BOOL v653 = v651 >> 8 < 0x11 && *(_DWORD *)(*(void *)v650 + 8) == 13;
      if ((v529 & 0x40000000) != 0) {
        uint64_t v654 = (uint64_t ***)*(v5 - 1);
      }
      else {
        uint64_t v654 = &v5[-4 * (v529 & 0x7FFFFFF)];
      }
      BOOL v21 = v651 == 8205;
      BOOL v851 = !v653;
      if (v21) {
        BOOL v851 = 0;
      }
      if (v851) {
        goto LABEL_1159;
      }
      uint64_t v852 = *(void *)(v590 - 32);
      uint64_t v853 = (uint64_t)v654[4];
      uint64_t v854 = (uint64_t)v654[8];
      return sub_1CB88F21C((uint64_t *)a1, (uint64_t *)v5, v590, v650, v852, v853, v854, v365);
    case 0x59:
      int v152 = *((_DWORD *)v5 + 5);
      if ((v152 & 0x40000000) != 0) {
        unint64_t v153 = (unsigned __int8 **)*(v5 - 1);
      }
      else {
        unint64_t v153 = (unsigned __int8 **)&v5[-4 * (v152 & 0x7FFFFFF)];
      }
      uint64_t v208 = *v153;
      uint64_t v209 = *(void *)*v153;
      uint64_t v210 = (llvm::Type *)v209;
      if ((*(_DWORD *)(v209 + 8) & 0xFE) == 0x12) {
        uint64_t v210 = **(llvm::Type ***)(v209 + 16);
      }
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v210);
      unsigned int v212 = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x20 || ((1 << PrimitiveSizeInBits) & 0x100010100) == 0) {
        return 0;
      }
      uint64_t v3 = 0;
      uint64_t v214 = v153[4];
      if (!v214 || v214[16] != 16) {
        return v3;
      }
      int v215 = v214 + 24;
      if (*((_DWORD *)v214 + 8) >= 0x41u) {
        int v215 = (void *)*v215;
      }
      int v216 = *(_DWORD *)(v209 + 32);
      uint64_t v217 = (void *)*v215;
      int v218 = sub_1CD789230((uint64_t *)a1, (uint64_t)v5);
      if (!v218) {
        return 0;
      }
      int v219 = v218;
      if (v212 == 8)
      {
        unsigned int v220 = *(_DWORD *)(*(void *)v208 + 32);
        BOOL v221 = v220 <= 4 && v220 > v217;
        if (!v221) {
          return 0;
        }
        int v222 = sub_1CD789230((uint64_t *)a1, (uint64_t)v208);
        if (!v222) {
          return 0;
        }
        int v223 = v222;
        uint64_t v224 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v222 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
        BOOL v225 = v224 == &off_1E66A41C8 || v224 == &off_1E66A4180;
        uint64_t v226 = *(void *)(a1 + 32);
        uint64_t v227 = *(void *)(v226 + 640);
        uint64_t v228 = *(unint64_t **)(v226 + 648);
        uint64_t v229 = 633456;
        if (v225) {
          uint64_t v229 = 633648;
        }
        uint64_t v230 = *(void *)(*(void *)(a1 + 96) + 8) + v229;
        uint64_t v231 = *(llvm::MachineFunction **)(v227 + 32);
        uint64_t v232 = *(void **)(a1 + 72);
        v1435[0] = v232;
        if (v232) {
          llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v232, 2);
        }
        unint64_t v233 = llvm::MachineFunction::CreateMachineInstr(v231, v230, (unsigned __int8 **)v1435, 0);
        if (!v1435[0]) {
          goto LABEL_318;
        }
        int v1385 = *(unsigned __int8 *)v1435[0];
        if ((v1385 - 4) > 0x1E)
        {
          if ((v1385 - 3) >= 0xFFFFFFFE) {
            v1401 = v1435[0];
          }
          else {
            v1401 = 0;
          }
          if ((v1385 - 3) < 0xFFFFFFFE)
          {
            if (v1385 == 3) {
              *((void *)v1435[0] + 1) = 0;
            }
            goto LABEL_318;
          }
          unint64_t v1387 = (unint64_t)v1401 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
            goto LABEL_318;
          }
          uint64_t v1386 = *((void *)v1435[0] + 2);
          if ((v1386 & 4) == 0) {
            goto LABEL_318;
          }
          unint64_t v1387 = v1386 & 0xFFFFFFFFFFFFFFF8;
          if (!v1387) {
            goto LABEL_318;
          }
        }
        v1438[0] = v1435;
        sub_1CC5FA668(v1387 + 16, v1438);
LABEL_318:
        uint64_t v234 = *(void *)(v227 + 40);
        *((void *)v233 + 3) = v234;
        uint64_t v235 = *(void *)(v234 + 32);
        uint64_t v236 = *((unsigned int *)v233 + 10);
        if (v236)
        {
          uint64_t v1262 = *((void *)v233 + 4);
          uint64_t v1263 = *(void *)(v235 + 40);
          uint64_t v1264 = 32 * v236;
          do
          {
            if (!*(unsigned char *)v1262)
            {
              uint64_t v1265 = *(unsigned int *)(v1262 + 4);
              if ((int)v1265 >= 0) {
                v1266 = (uint64_t *)(*(void *)(v1263 + 272) + 8 * v1265);
              }
              else {
                v1266 = (uint64_t *)(*(void *)(v1263 + 24) + 16 * (v1265 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1267 = *v1266;
              if (*v1266)
              {
                uint64_t v1268 = *(void *)(v1267 + 16);
                *(void *)(v1267 + 16) = v1262;
                *(void *)(v1262 + 16) = v1268;
                if (*(unsigned char *)(v1262 + 3))
                {
                  *(void *)(v1262 + 24) = v1267;
                }
                else
                {
                  *(void *)(v1262 + 24) = 0;
                  v1266 = (uint64_t *)(v1268 + 24);
                }
              }
              else
              {
                *(void *)(v1262 + 16) = v1262;
                *(void *)(v1262 + 24) = 0;
              }
              uint64_t *v1266 = v1262;
            }
            v1262 += 32;
            v1264 -= 32;
          }
          while (v1264);
        }
        uint64_t v237 = *(void *)(v235 + 728);
        if (v237) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v237 + 24))(v237, v233);
        }
        unint64_t v238 = *v228 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v233 = v238 | *(void *)v233 & 7;
        *((void *)v233 + 1) = v228;
        *(void *)(v238 + 8) = v233;
        unint64_t *v228 = *v228 & 7 | (unint64_t)v233;
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0x1000000;
        HIDWORD(v1438[0]) = v219;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
        uint64_t v3 = 1;
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0;
        HIDWORD(v1438[0]) = v223;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = (8 * v217);
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = (8 * v217 + 8);
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
        *(_OWORD *)v1438 = 0u;
        v1439[0] = 0u;
        goto LABEL_985;
      }
      __int32 v499 = sub_1CB87DFFC((uint64_t *)a1, v208);
      if (!v499) {
        return 0;
      }
      v1440.i32[0] = 0;
      v1446.i32[0] = v499;
      sub_1CB85F3CC(a1, v216, v212, v217, v1446.i32, &v1440);
      uint64_t v500 = *(void *)(a1 + 32);
      uint64_t v501 = *(void *)(v500 + 640);
      uint64_t v502 = *(unint64_t **)(v500 + 648);
      uint64_t v503 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
      uint64_t v504 = *(llvm::MachineFunction **)(v501 + 32);
      uint64_t v505 = *(void **)(a1 + 72);
      v1435[0] = v505;
      if (v505) {
        llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v505, 2);
      }
      uint64_t v506 = llvm::MachineFunction::CreateMachineInstr(v504, v503, (unsigned __int8 **)v1435, 0);
      if (!v1435[0]) {
        goto LABEL_665;
      }
      int v1317 = *(unsigned __int8 *)v1435[0];
      if ((v1317 - 4) > 0x1E)
      {
        if ((v1317 - 3) >= 0xFFFFFFFE) {
          unsigned int v1354 = v1435[0];
        }
        else {
          unsigned int v1354 = 0;
        }
        if ((v1317 - 3) < 0xFFFFFFFE)
        {
          if (v1317 == 3) {
            *((void *)v1435[0] + 1) = 0;
          }
          goto LABEL_665;
        }
        unint64_t v1319 = (unint64_t)v1354 + 8;
      }
      else
      {
        if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
          goto LABEL_665;
        }
        uint64_t v1318 = *((void *)v1435[0] + 2);
        if ((v1318 & 4) == 0) {
          goto LABEL_665;
        }
        unint64_t v1319 = v1318 & 0xFFFFFFFFFFFFFFF8;
        if (!v1319) {
          goto LABEL_665;
        }
      }
      v1438[0] = v1435;
      sub_1CC5FA668(v1319 + 16, v1438);
LABEL_665:
      uint64_t v507 = *(void *)(v501 + 40);
      *((void *)v506 + 3) = v507;
      uint64_t v508 = *(void *)(v507 + 32);
      uint64_t v509 = *((unsigned int *)v506 + 10);
      if (v509)
      {
        uint64_t v1038 = *((void *)v506 + 4);
        uint64_t v1039 = *(void *)(v508 + 40);
        uint64_t v1040 = 32 * v509;
        do
        {
          if (!*(unsigned char *)v1038)
          {
            uint64_t v1041 = *(unsigned int *)(v1038 + 4);
            if ((int)v1041 >= 0) {
              uint64_t v1042 = (uint64_t *)(*(void *)(v1039 + 272) + 8 * v1041);
            }
            else {
              uint64_t v1042 = (uint64_t *)(*(void *)(v1039 + 24) + 16 * (v1041 & 0x7FFFFFFF) + 8);
            }
            uint64_t v1043 = *v1042;
            if (*v1042)
            {
              uint64_t v1044 = *(void *)(v1043 + 16);
              *(void *)(v1043 + 16) = v1038;
              *(void *)(v1038 + 16) = v1044;
              if (*(unsigned char *)(v1038 + 3))
              {
                *(void *)(v1038 + 24) = v1043;
              }
              else
              {
                *(void *)(v1038 + 24) = 0;
                uint64_t v1042 = (uint64_t *)(v1044 + 24);
              }
            }
            else
            {
              *(void *)(v1038 + 16) = v1038;
              *(void *)(v1038 + 24) = 0;
            }
            *uint64_t v1042 = v1038;
          }
          v1038 += 32;
          v1040 -= 32;
        }
        while (v1040);
      }
      uint64_t v510 = *(void *)(v508 + 728);
      if (v510) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v510 + 24))(v510, v506);
      }
      unint64_t v511 = *v502 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v506 = v511 | *(void *)v506 & 7;
      *((void *)v506 + 1) = v502;
      *(void *)(v511 + 8) = v506;
      *uint64_t v502 = *v502 & 7 | (unint64_t)v506;
      v1438[1] = 0;
      v1439[0] = 0uLL;
      LODWORD(v1438[0]) = 0x1000000;
      HIDWORD(v1438[0]) = v219;
      llvm::MachineInstr::addOperand(v506, v504, (const llvm::MachineOperand *)v1438);
      v1438[1] = 0;
      v1439[0] = 0uLL;
      LODWORD(v1438[0]) = (v1440.i16[0] & 0xFFF) << 8;
      HIDWORD(v1438[0]) = v1446.i32[0];
      int v447 = v506;
      uint64_t v448 = v504;
      goto LABEL_1636;
    case 0x5A:
      uint64_t v144 = *v5;
      int v145 = (llvm::Type *)(*v5)[3];
      if ((*((_DWORD *)v145 + 2) & 0xFE) == 0x12) {
        int v145 = (llvm::Type *)**((void **)v145 + 2);
      }
      unsigned int v146 = llvm::Type::getPrimitiveSizeInBits(v145);
      unsigned int v147 = v146;
      if (v146 > 0x20 || ((1 << v146) & 0x100010100) == 0) {
        return 0;
      }
      uint64_t v149 = *((unsigned int *)v144 + 8);
      if ((v149 - 5) < 0xFFFFFFFD) {
        return 0;
      }
      int v150 = *((_DWORD *)v5 + 5);
      if ((v150 & 0x40000000) != 0) {
        int v151 = (unsigned __int8 **)*(v5 - 1);
      }
      else {
        int v151 = (unsigned __int8 **)&v5[-4 * (v150 & 0x7FFFFFF)];
      }
      uint64_t v3 = 0;
      uint64_t v265 = v151[8];
      if (!v265 || v265[16] != 16) {
        return v3;
      }
      int v266 = *v151;
      uint64_t v267 = (uint64_t)v151[4];
      unsigned int v268 = (unint64_t *)(v265 + 24);
      if (*((_DWORD *)v265 + 8) >= 0x41u) {
        unsigned int v268 = (unint64_t *)*v268;
      }
      unint64_t v1428 = *v268;
      uint64_t v269 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)v5);
      if (!v269) {
        return 0;
      }
      uint64_t v270 = v269;
      if (v266[16] - 11 >= 2)
      {
        int v371 = sub_1CB87DFFC((uint64_t *)a1, v266);
        if (!v371) {
          return 0;
        }
        int v271 = v371;
        unint64_t v372 = *(void **)(a1 + 48);
        if ((_UNKNOWN ***)(*(void *)(v372[3] + 16 * (v271 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66A4340) {
          sub_1CC38D61C(v372, v271, (uint64_t)&off_1E66A4340, (uint64_t)&off_1E66A43C8, 0);
        }
      }
      else
      {
        int v271 = 0;
      }
      unsigned int v373 = *(unsigned __int8 *)(v267 + 16);
      if (v373 < 0x1C || !v267)
      {
        BOOL v583 = v147 == 8;
        BOOL v1423 = v271 != 0;
        goto LABEL_988;
      }
      if (v373 != 66) {
        goto LABEL_660;
      }
      int v374 = *(_DWORD *)(v267 + 20);
      if ((v374 & 0x40000000) != 0) {
        int v375 = *(uint64_t ***)(v267 - 8);
      }
      else {
        int v375 = (uint64_t **)(v267 - 32 * (v374 & 0x7FFFFFF));
      }
      uint64_t v496 = **v375;
      if ((*(_DWORD *)(v496 + 8) & 0xFE) == 0x12) {
        uint64_t v496 = **(void **)(v496 + 16);
      }
      if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v496) <= 0x20)
      {
        if ((v374 & 0x40000000) != 0) {
          uint64_t v497 = *(uint64_t **)(v267 - 8);
        }
        else {
          uint64_t v497 = (uint64_t *)(v267 - 32 * (v374 & 0x7FFFFFF));
        }
        uint64_t v267 = *v497;
        if (*(unsigned __int8 *)(*v497 + 16) <= 0x1Bu) {
          uint64_t v498 = 0;
        }
        else {
          uint64_t v498 = *v497;
        }
      }
      else
      {
LABEL_660:
        uint64_t v498 = v267;
      }
      BOOL v583 = v147 == 8;
      BOOL v1423 = v271 != 0;
      if (!v271 || v147 != 8 || !v498) {
        goto LABEL_988;
      }
      uint64_t v584 = *(void *)(v498 + 8);
      if (!v584)
      {
        int v1409 = sub_1CD789230((uint64_t *)a1, v267);
        if (!v1409) {
          return 0;
        }
        BOOL v1423 = 1;
        BOOL v583 = 1;
        goto LABEL_990;
      }
      if (*(void *)(v584 + 8)) {
        goto LABEL_986;
      }
      int v585 = *(unsigned __int8 *)(v498 + 16);
      if (v585 != 69)
      {
        if (v585 == 70)
        {
          LODWORD(v589) = 1;
          goto LABEL_958;
        }
        if (v585 != 84) {
          goto LABEL_986;
        }
        uint64_t v586 = *(void *)(v498 - 32);
        if (!v586
          || *(unsigned char *)(v586 + 16)
          || *(void *)(v586 + 24) != *(void *)(v498 + 72)
          || (*(unsigned char *)(v586 + 33) & 0x20) == 0)
        {
          goto LABEL_986;
        }
        int v587 = *(_DWORD *)(v586 + 36);
        switch(v587)
        {
          case 1988:
            LODWORD(v589) = 2;
            goto LABEL_958;
          case 1986:
            LODWORD(v589) = 3;
            goto LABEL_958;
          case 1982:
            uint64_t v588 = *(void *)(v498 - 32 * (*(_DWORD *)(v498 + 20) & 0x7FFFFFF) + 32);
            BOOL v1423 = 1;
            if (!v588 || *(unsigned char *)(v588 + 16) != 16) {
              goto LABEL_987;
            }
            if (*(_DWORD *)(v588 + 32) <= 0x40u)
            {
              unint64_t v589 = *(void *)(v588 + 24);
              if (v589 >= 4) {
                break;
              }
LABEL_958:
              uint64_t v712 = *(void *)(a1 + 48);
              uint64_t v713 = *(void *)(v712 + 24);
              uint64_t v714 = (_UNKNOWN ***)(*(void *)(v713 + 16 * (v271 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
              if (v714 == &off_1E66A4180 || v714 == &off_1E66A41C8)
              {
                int v715 = v271;
                goto LABEL_970;
              }
              int v715 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*(void *)(a1 + 48), "", 0);
              *(void *)(*(void *)(v712 + 24) + 16 * (v715 & 0x7FFFFFFF)) = &off_1E66A4180;
              uint64_t v716 = *(void *)(v712 + 8);
              if (v716)
              {
                (*(void (**)(uint64_t))(*(void *)v716 + 24))(v716);
                if (!v715) {
                  return 0;
                }
              }
              else if (!v715)
              {
                return 0;
              }
              int v1415 = v271;
              unsigned int v1419 = v270;
              uint64_t v717 = *(void *)(a1 + 32);
              uint64_t v718 = *(void *)(v717 + 640);
              unint64_t v719 = *(unint64_t **)(v717 + 648);
              uint64_t v720 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
              uint64_t v721 = *(llvm::MachineFunction **)(v718 + 32);
              uint64_t v722 = *(void **)(a1 + 72);
              v1435[0] = v722;
              if (v722) {
                llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v722, 2);
              }
              uint64_t v723 = llvm::MachineFunction::CreateMachineInstr(v721, v720, (unsigned __int8 **)v1435, 0);
              if (v1435[0])
              {
                int v1291 = *(unsigned __int8 *)v1435[0];
                if ((v1291 - 4) > 0x1E)
                {
                  if ((v1291 - 3) >= 0xFFFFFFFE) {
                    int v1326 = v1435[0];
                  }
                  else {
                    int v1326 = 0;
                  }
                  if ((v1291 - 3) < 0xFFFFFFFE)
                  {
                    if (v1291 == 3) {
                      *((void *)v1435[0] + 1) = 0;
                    }
                    goto LABEL_965;
                  }
                  unint64_t v1293 = (unint64_t)v1326 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                    goto LABEL_965;
                  }
                  uint64_t v1292 = *((void *)v1435[0] + 2);
                  if ((v1292 & 4) == 0) {
                    goto LABEL_965;
                  }
                  unint64_t v1293 = v1292 & 0xFFFFFFFFFFFFFFF8;
                  if (!v1293) {
                    goto LABEL_965;
                  }
                }
                v1438[0] = v1435;
                sub_1CC5FA668(v1293 + 16, v1438);
              }
LABEL_965:
              uint64_t v724 = *(void *)(v718 + 40);
              *((void *)v723 + 3) = v724;
              uint64_t v725 = *(void *)(v724 + 32);
              uint64_t v726 = *((unsigned int *)v723 + 10);
              if (v726)
              {
                uint64_t v923 = *((void *)v723 + 4);
                uint64_t v924 = *(void *)(v725 + 40);
                uint64_t v925 = 32 * v726;
                do
                {
                  if (!*(unsigned char *)v923)
                  {
                    uint64_t v926 = *(unsigned int *)(v923 + 4);
                    if ((int)v926 >= 0) {
                      uint64_t v927 = (uint64_t *)(*(void *)(v924 + 272) + 8 * v926);
                    }
                    else {
                      uint64_t v927 = (uint64_t *)(*(void *)(v924 + 24) + 16 * (v926 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v928 = *v927;
                    if (*v927)
                    {
                      uint64_t v929 = *(void *)(v928 + 16);
                      *(void *)(v928 + 16) = v923;
                      *(void *)(v923 + 16) = v929;
                      if (*(unsigned char *)(v923 + 3))
                      {
                        *(void *)(v923 + 24) = v928;
                      }
                      else
                      {
                        *(void *)(v923 + 24) = 0;
                        uint64_t v927 = (uint64_t *)(v929 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v923 + 16) = v923;
                      *(void *)(v923 + 24) = 0;
                    }
                    *uint64_t v927 = v923;
                  }
                  v923 += 32;
                  v925 -= 32;
                }
                while (v925);
              }
              uint64_t v727 = *(void *)(v725 + 728);
              int v271 = v1415;
              if (v727) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v727 + 24))(v727, v723);
              }
              unint64_t v728 = *v719 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v723 = v728 | *(void *)v723 & 7;
              *((void *)v723 + 1) = v719;
              *(void *)(v728 + 8) = v723;
              unint64_t *v719 = *v719 & 7 | (unint64_t)v723;
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0x1000000;
              HIDWORD(v1438[0]) = v715;
              llvm::MachineInstr::addOperand(v723, v721, (const llvm::MachineOperand *)v1438);
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = ((v1428 << 7) + 256) & 0xFFF00;
              HIDWORD(v1438[0]) = v1415;
              llvm::MachineInstr::addOperand(v723, v721, (const llvm::MachineOperand *)v1438);
              uint64_t v712 = *(void *)(a1 + 48);
              uint64_t v713 = *(void *)(v712 + 24);
              uint64_t v270 = v1419;
LABEL_970:
              uint64_t v729 = (_UNKNOWN ***)(*(void *)(v713 + 16 * (v270 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
              BOOL v730 = v729 == &off_1E66A4180 || v729 == &off_1E66A41C8;
              uint64_t v731 = v270;
              if (!v730)
              {
                uint64_t v731 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v712, "", 0);
                *(void *)(*(void *)(v712 + 24) + 16 * (v731 & 0x7FFFFFFF)) = &off_1E66A4180;
                uint64_t v732 = *(void *)(v712 + 8);
                if (v732)
                {
                  (*(void (**)(uint64_t))(*(void *)v732 + 24))(v732);
                  if (!v731) {
                    return 0;
                  }
                }
                else if (!v731)
                {
                  return 0;
                }
              }
              if (!sub_1CB866D40((uint64_t *)a1, v498, v731, v589, v715, v1428 & 1)) {
                return 0;
              }
              if (v731 == v270) {
                return 1;
              }
              int v733 = v271;
              uint64_t v734 = *(void *)(a1 + 32);
              uint64_t v735 = *(void *)(v734 + 640);
              uint64_t v736 = *(unint64_t **)(v734 + 648);
              uint64_t v737 = *(void *)(*(void *)(a1 + 96) + 8) + 432;
              uint64_t v231 = *(llvm::MachineFunction **)(v735 + 32);
              int v738 = *(void **)(a1 + 72);
              v1435[0] = v738;
              if (v738) {
                llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v738, 2);
              }
              unint64_t v233 = llvm::MachineFunction::CreateMachineInstr(v231, v737, (unsigned __int8 **)v1435, 0);
              if (!v1435[0]) {
                goto LABEL_981;
              }
              int v1310 = *(unsigned __int8 *)v1435[0];
              if ((v1310 - 4) > 0x1E)
              {
                if ((v1310 - 3) >= 0xFFFFFFFE) {
                  v1349 = v1435[0];
                }
                else {
                  v1349 = 0;
                }
                if ((v1310 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v1312 = (unint64_t)v1349 + 8;
LABEL_2033:
                  v1438[0] = v1435;
                  sub_1CC5FA668(v1312 + 16, v1438);
                  goto LABEL_981;
                }
                if (v1310 == 3) {
                  *((void *)v1435[0] + 1) = 0;
                }
              }
              else if ((*((unsigned char *)v1435[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1435[0] + 3))
              {
                uint64_t v1311 = *((void *)v1435[0] + 2);
                if ((v1311 & 4) != 0)
                {
                  unint64_t v1312 = v1311 & 0xFFFFFFFFFFFFFFF8;
                  if (v1312) {
                    goto LABEL_2033;
                  }
                }
              }
LABEL_981:
              uint64_t v739 = *(void *)(v735 + 40);
              *((void *)v233 + 3) = v739;
              uint64_t v740 = *(void *)(v739 + 32);
              uint64_t v741 = *((unsigned int *)v233 + 10);
              if (v741)
              {
                uint64_t v977 = *((void *)v233 + 4);
                uint64_t v978 = *(void *)(v740 + 40);
                uint64_t v979 = 32 * v741;
                do
                {
                  if (!*(unsigned char *)v977)
                  {
                    uint64_t v980 = *(unsigned int *)(v977 + 4);
                    if ((int)v980 >= 0) {
                      uint64_t v981 = (uint64_t *)(*(void *)(v978 + 272) + 8 * v980);
                    }
                    else {
                      uint64_t v981 = (uint64_t *)(*(void *)(v978 + 24) + 16 * (v980 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v982 = *v981;
                    if (*v981)
                    {
                      uint64_t v983 = *(void *)(v982 + 16);
                      *(void *)(v982 + 16) = v977;
                      *(void *)(v977 + 16) = v983;
                      if (*(unsigned char *)(v977 + 3))
                      {
                        *(void *)(v977 + 24) = v982;
                      }
                      else
                      {
                        *(void *)(v977 + 24) = 0;
                        uint64_t v981 = (uint64_t *)(v983 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v977 + 16) = v977;
                      *(void *)(v977 + 24) = 0;
                    }
                    *uint64_t v981 = v977;
                  }
                  v977 += 32;
                  v979 -= 32;
                }
                while (v979);
              }
              uint64_t v742 = *(void *)(v740 + 728);
              if (v742) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v742 + 24))(v742, v233);
              }
              unint64_t v743 = *v736 & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v233 = v743 | *(void *)v233 & 7;
              *((void *)v233 + 1) = v736;
              *(void *)(v743 + 8) = v233;
              *uint64_t v736 = *v736 & 7 | (unint64_t)v233;
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0x1000000;
              HIDWORD(v1438[0]) = v270;
              llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0;
              HIDWORD(v1438[0]) = v733;
              llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0;
              HIDWORD(v1438[0]) = v731;
              llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1438);
              uint64_t v3 = 1;
              LODWORD(v1438[0]) = 1;
              v1438[1] = 0;
              *(void *)&v1439[0] = (v1428 >> 1) + 1;
LABEL_985:
              uint64_t v293 = v233;
              uint64_t v294 = v231;
              goto LABEL_883;
            }
            unint64_t v589 = **(void **)(v588 + 24);
            if (v589 <= 3) {
              goto LABEL_958;
            }
            break;
        }
LABEL_986:
        BOOL v1423 = 1;
LABEL_987:
        BOOL v583 = 1;
LABEL_988:
        int v1409 = sub_1CD789230((uint64_t *)a1, v267);
        if (!v1409) {
          return 0;
        }
        if (v147 > 0x10)
        {
          int v745 = 0;
          goto LABEL_1074;
        }
LABEL_990:
        uint64_t v744 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v1409 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
        int v745 = 1;
        if (v744 != &off_1E66A4180 && v744 != &off_1E66A41C8)
        {
          sub_1CD3CB380(a1, v1409, 1);
          int v1408 = 256;
          if (!v583) {
            goto LABEL_993;
          }
          goto LABEL_1075;
        }
LABEL_1074:
        int v1408 = 0;
        if (!v583)
        {
LABEL_993:
          __int32 v1416 = v271;
          if (v1423)
          {
            LODWORD(v3) = -1;
          }
          else
          {
            uint64_t v3 = sub_1CD3CAE48(a1, v745, 0);
            if (!v3) {
              return v3;
            }
          }
          uint64_t v746 = *(void **)(a1 + 48);
          unint64_t v747 = *(void *)(v746[3] + 16 * (v270 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v748 = (*(uint64_t (**)(void))(**(void **)(*v746 + 16) + 176))(*(void *)(*v746 + 16));
          int v749 = *(_DWORD *)(*(void *)(v748 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*(void *)v747 + 24)
                            + *(_DWORD *)(v748 + 272)
                            * ((*(void *)(v748 + 248) - *(void *)(v748 + 240)) >> 3)));
          int v1420 = v270;
          if (v749 == v147)
          {
            unsigned int v750 = 0;
            while (1)
            {
              char v751 = v1423;
              if ((void *)v1428 == v750) {
                char v751 = 1;
              }
              uint64_t v752 = *(void *)(a1 + 32);
              uint64_t v753 = *(void *)(v752 + 640);
              uint64_t v754 = *(unint64_t **)(v752 + 648);
              uint64_t v755 = *(void *)(*(void *)(a1 + 96) + 8);
              if ((v751 & 1) == 0)
              {
                uint64_t v756 = *(llvm::MachineFunction **)(v753 + 32);
                uint64_t v765 = *(void **)(a1 + 72);
                v1435[0] = v765;
                if (v765) {
                  llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v765, 2);
                }
                uint64_t v758 = llvm::MachineFunction::CreateMachineInstr(v756, v755 + 480, (unsigned __int8 **)v1435, 0);
                if (!v1435[0]) {
                  goto LABEL_1011;
                }
                int v788 = *(unsigned __int8 *)v1435[0];
                if ((v788 - 4) > 0x1E)
                {
                  if ((v788 - 3) >= 0xFFFFFFFE) {
                    unsigned int v792 = v1435[0];
                  }
                  else {
                    unsigned int v792 = 0;
                  }
                  if ((v788 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v790 = (unint64_t)v792 + 8;
                    goto LABEL_1068;
                  }
                  if (v788 == 3) {
                    *((void *)v1435[0] + 1) = 0;
                  }
                }
                else if ((*((unsigned char *)v1435[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1435[0] + 3))
                {
                  uint64_t v789 = *((void *)v1435[0] + 2);
                  if ((v789 & 4) != 0)
                  {
                    unint64_t v790 = v789 & 0xFFFFFFFFFFFFFFF8;
                    if (v790)
                    {
LABEL_1068:
                      v1438[0] = v1435;
                      sub_1CC5FA668(v790 + 16, v1438);
                    }
                  }
                }
LABEL_1011:
                uint64_t v766 = *(void *)(v753 + 40);
                *((void *)v758 + 3) = v766;
                uint64_t v767 = *(void *)(v766 + 32);
                uint64_t v768 = *((unsigned int *)v758 + 10);
                if (v768)
                {
                  uint64_t v778 = *((void *)v758 + 4);
                  uint64_t v779 = *(void *)(v767 + 40);
                  uint64_t v780 = 32 * v768;
                  do
                  {
                    if (!*(unsigned char *)v778)
                    {
                      uint64_t v781 = *(unsigned int *)(v778 + 4);
                      if ((int)v781 >= 0) {
                        unsigned int v782 = (uint64_t *)(*(void *)(v779 + 272) + 8 * v781);
                      }
                      else {
                        unsigned int v782 = (uint64_t *)(*(void *)(v779 + 24) + 16 * (v781 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v783 = *v782;
                      if (*v782)
                      {
                        uint64_t v784 = *(void *)(v783 + 16);
                        *(void *)(v783 + 16) = v778;
                        *(void *)(v778 + 16) = v784;
                        if (*(unsigned char *)(v778 + 3))
                        {
                          *(void *)(v778 + 24) = v783;
                        }
                        else
                        {
                          *(void *)(v778 + 24) = 0;
                          unsigned int v782 = (uint64_t *)(v784 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v778 + 16) = v778;
                        *(void *)(v778 + 24) = 0;
                      }
                      *unsigned int v782 = v778;
                    }
                    v778 += 32;
                    v780 -= 32;
                  }
                  while (v780);
                }
                uint64_t v769 = *(void *)(v767 + 728);
                if (v769) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v769 + 24))(v769, v758);
                }
                unint64_t v770 = *v754 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v758 = v770 | *(void *)v758 & 7;
                *((void *)v758 + 1) = v754;
                *(void *)(v770 + 8) = v758;
                unint64_t *v754 = *v754 & 7 | (unint64_t)v758;
                HIDWORD(v1438[1]) = 0;
                v1439[0] = 0uLL;
                *(void **)((char *)v1438 + 4) = (void *)(v270 + v750);
                int v764 = 0x1000000;
                goto LABEL_1015;
              }
              uint64_t v756 = *(llvm::MachineFunction **)(v753 + 32);
              v757 = *(void **)(a1 + 72);
              v1435[0] = v757;
              if (v757) {
                llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v757, 2);
              }
              uint64_t v758 = llvm::MachineFunction::CreateMachineInstr(v756, v755 + 912, (unsigned __int8 **)v1435, 0);
              if (v1435[0])
              {
                int v785 = *(unsigned __int8 *)v1435[0];
                if ((v785 - 4) > 0x1E)
                {
                  if ((v785 - 3) >= 0xFFFFFFFE) {
                    unsigned int v791 = v1435[0];
                  }
                  else {
                    unsigned int v791 = 0;
                  }
                  if ((v785 - 3) < 0xFFFFFFFE)
                  {
                    if (v785 == 3) {
                      *((void *)v1435[0] + 1) = 0;
                    }
                    goto LABEL_1003;
                  }
                  unint64_t v787 = (unint64_t)v791 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                    goto LABEL_1003;
                  }
                  uint64_t v786 = *((void *)v1435[0] + 2);
                  if ((v786 & 4) == 0) {
                    goto LABEL_1003;
                  }
                  unint64_t v787 = v786 & 0xFFFFFFFFFFFFFFF8;
                  if (!v787) {
                    goto LABEL_1003;
                  }
                }
                v1438[0] = v1435;
                sub_1CC5FA668(v787 + 16, v1438);
              }
LABEL_1003:
              uint64_t v759 = *(void *)(v753 + 40);
              *((void *)v758 + 3) = v759;
              uint64_t v760 = *(void *)(v759 + 32);
              uint64_t v761 = *((unsigned int *)v758 + 10);
              if (v761)
              {
                uint64_t v771 = *((void *)v758 + 4);
                uint64_t v772 = *(void *)(v760 + 40);
                uint64_t v773 = 32 * v761;
                do
                {
                  if (!*(unsigned char *)v771)
                  {
                    uint64_t v774 = *(unsigned int *)(v771 + 4);
                    if ((int)v774 >= 0) {
                      uint64_t v775 = (uint64_t *)(*(void *)(v772 + 272) + 8 * v774);
                    }
                    else {
                      uint64_t v775 = (uint64_t *)(*(void *)(v772 + 24) + 16 * (v774 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v776 = *v775;
                    if (*v775)
                    {
                      uint64_t v777 = *(void *)(v776 + 16);
                      *(void *)(v776 + 16) = v771;
                      *(void *)(v771 + 16) = v777;
                      if (*(unsigned char *)(v771 + 3))
                      {
                        *(void *)(v771 + 24) = v776;
                      }
                      else
                      {
                        *(void *)(v771 + 24) = 0;
                        uint64_t v775 = (uint64_t *)(v777 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v771 + 16) = v771;
                      *(void *)(v771 + 24) = 0;
                    }
                    uint64_t *v775 = v771;
                  }
                  v771 += 32;
                  v773 -= 32;
                }
                while (v773);
              }
              uint64_t v762 = *(void *)(v760 + 728);
              if (v762) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v762 + 24))(v762, v758);
              }
              unint64_t v763 = *v754 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v758 = v763 | *(void *)v758 & 7;
              *((void *)v758 + 1) = v754;
              *(void *)(v763 + 8) = v758;
              unint64_t *v754 = *v754 & 7 | (unint64_t)v758;
              HIDWORD(v1438[1]) = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = 0x1000000;
              *(void **)((char *)v1438 + 4) = (void *)(v270 + v750);
              llvm::MachineInstr::addOperand(v758, v756, (const llvm::MachineOperand *)v1438);
              if ((void *)v1428 != v750)
              {
                LODWORD(v1435[0]) = 0;
                v1440.i32[0] = v1416;
                sub_1CB85F3CC(a1, v149, v147, v750, v1440.i32, v1435);
                v1438[1] = 0;
                v1439[0] = 0uLL;
                LODWORD(v1438[0]) = ((uint64_t)v1435[0] & 0xFFF) << 8;
                HIDWORD(v1438[0]) = v1440.i32[0];
                goto LABEL_1017;
              }
              v1438[1] = 0;
              v1439[0] = 0uLL;
              HIDWORD(v1438[0]) = v1409;
              int v764 = v1408;
LABEL_1015:
              LODWORD(v1438[0]) = v764;
LABEL_1017:
              llvm::MachineInstr::addOperand(v758, v756, (const llvm::MachineOperand *)v1438);
              unsigned int v750 = (void *)((char *)v750 + 1);
              uint64_t v3 = 1;
              if (v750 == (void *)v149) {
                return v3;
              }
            }
          }
          unsigned int v1404 = v149 * v147;
          if (v149 * v147 == 32)
          {
            sub_1CC38D61C(*(void **)(a1 + 48), v270, *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v270 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66A43C8, 0);
            int v1405 = v270;
          }
          else
          {
            int v1405 = v270;
            if (v149 * v147 != v749)
            {
              if (v1404) {
                unsigned int v857 = (v1404 >> 5) + 1;
              }
              else {
                unsigned int v857 = -1;
              }
              if (v857 > 0x11) {
                unint64_t v858 = 0;
              }
              else {
                unint64_t v858 = (unint64_t)off_1E66A3B08[v857] & 0xFFFFFFFFFFFFFFFBLL;
              }
              uint64_t v984 = *(void *)(a1 + 48);
              int v1405 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v984, "", 0);
              *(void *)(*(void *)(v984 + 24) + 16 * (v1405 & 0x7FFFFFFF)) = v858;
              uint64_t v985 = *(void *)(v984 + 8);
              if (v985) {
                (*(void (**)(uint64_t))(*(void *)v985 + 24))(v985);
              }
              if (!v1405) {
                return 0;
              }
            }
          }
          uint64_t v986 = *(void *)(a1 + 32);
          uint64_t v987 = *(void *)(v986 + 640);
          int v988 = *(unint64_t **)(v986 + 648);
          uint64_t v989 = *(void *)(*(void *)(a1 + 96) + 8) + 864;
          unint64_t v990 = *(llvm::MachineFunction **)(v987 + 32);
          uint64_t v991 = *(void **)(a1 + 72);
          v1435[0] = v991;
          if (v991) {
            llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v991, 2);
          }
          v992 = llvm::MachineFunction::CreateMachineInstr(v990, v989, (unsigned __int8 **)v1435, 0);
          if (v1435[0])
          {
            int v1342 = *(unsigned __int8 *)v1435[0];
            if ((v1342 - 4) > 0x1E)
            {
              if ((v1342 - 3) >= 0xFFFFFFFE) {
                __int16 v1370 = v1435[0];
              }
              else {
                __int16 v1370 = 0;
              }
              if ((v1342 - 3) < 0xFFFFFFFE)
              {
                if (v1342 == 3) {
                  *((void *)v1435[0] + 1) = 0;
                }
                goto LABEL_1375;
              }
              unint64_t v1344 = (unint64_t)v1370 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
                goto LABEL_1375;
              }
              uint64_t v1343 = *((void *)v1435[0] + 2);
              if ((v1343 & 4) == 0) {
                goto LABEL_1375;
              }
              unint64_t v1344 = v1343 & 0xFFFFFFFFFFFFFFF8;
              if (!v1344) {
                goto LABEL_1375;
              }
            }
            v1438[0] = v1435;
            sub_1CC5FA668(v1344 + 16, v1438);
          }
LABEL_1375:
          uint64_t v993 = *(void *)(v987 + 40);
          *((void *)v992 + 3) = v993;
          uint64_t v994 = *(void *)(v993 + 32);
          uint64_t v995 = *((unsigned int *)v992 + 10);
          if (v995)
          {
            uint64_t v1149 = *((void *)v992 + 4);
            uint64_t v1150 = *(void *)(v994 + 40);
            uint64_t v1151 = 32 * v995;
            do
            {
              if (!*(unsigned char *)v1149)
              {
                uint64_t v1152 = *(unsigned int *)(v1149 + 4);
                if ((int)v1152 >= 0) {
                  uint64_t v1153 = (uint64_t *)(*(void *)(v1150 + 272) + 8 * v1152);
                }
                else {
                  uint64_t v1153 = (uint64_t *)(*(void *)(v1150 + 24) + 16 * (v1152 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1154 = *v1153;
                if (*v1153)
                {
                  uint64_t v1155 = *(void *)(v1154 + 16);
                  *(void *)(v1154 + 16) = v1149;
                  *(void *)(v1149 + 16) = v1155;
                  if (*(unsigned char *)(v1149 + 3))
                  {
                    *(void *)(v1149 + 24) = v1154;
                  }
                  else
                  {
                    *(void *)(v1149 + 24) = 0;
                    uint64_t v1153 = (uint64_t *)(v1155 + 24);
                  }
                }
                else
                {
                  *(void *)(v1149 + 16) = v1149;
                  *(void *)(v1149 + 24) = 0;
                }
                *uint64_t v1153 = v1149;
              }
              v1149 += 32;
              v1151 -= 32;
            }
            while (v1151);
          }
          uint64_t v996 = *(void *)(v994 + 728);
          if (v996) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v996 + 24))(v996, v992);
          }
          unint64_t v997 = *v988 & 0xFFFFFFFFFFFFFFF8;
          *(void *)v992 = v997 | *(void *)v992 & 7;
          *((void *)v992 + 1) = v988;
          *(void *)(v997 + 8) = v992;
          *int v988 = *v988 & 7 | (unint64_t)v992;
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0x1000000;
          HIDWORD(v1438[0]) = v1405;
          llvm::MachineInstr::addOperand(v992, v990, (const llvm::MachineOperand *)v1438);
          unsigned int v998 = 0;
          if (v147 == 16) {
            uint64_t v999 = 1;
          }
          else {
            uint64_t v999 = 33;
          }
          do
          {
            if ((void *)v1428 == v998)
            {
              v1438[1] = 0;
              v1439[0] = 0uLL;
              v1438[0] = (void *)__PAIR64__(v1409, v1408);
            }
            else if (v1423)
            {
              LODWORD(v1435[0]) = 0;
              v1440.i32[0] = v1416;
              sub_1CB85F3CC(a1, v149, v147, v998, v1440.i32, v1435);
              v1438[1] = 0;
              v1439[0] = 0uLL;
              LODWORD(v1438[0]) = ((uint64_t)v1435[0] & 0xFFF) << 8;
              HIDWORD(v1438[0]) = v1440.i32[0];
            }
            else
            {
              v1438[1] = 0;
              LODWORD(v1438[0]) = 0;
              HIDWORD(v1438[0]) = v3;
              v1439[0] = 0uLL;
            }
            llvm::MachineInstr::addOperand(v992, v990, (const llvm::MachineOperand *)v1438);
            LODWORD(v1438[0]) = 1;
            v1438[1] = 0;
            *(void *)&v1439[0] = (char *)v998 + v999;
            llvm::MachineInstr::addOperand(v992, v990, (const llvm::MachineOperand *)v1438);
            unsigned int v998 = (void *)((char *)v998 + 1);
          }
          while ((void *)v149 != v998);
          if (v1405 != v1420) {
            sub_1CB85D99C((void *)a1, v1420, v1405, v1404);
          }
          return 1;
        }
LABEL_1075:
        int v793 = v271;
        uint64_t v794 = *(void *)(a1 + 48);
        uint64_t v795 = (_UNKNOWN ***)(*(void *)(*(void *)(v794 + 24) + 16 * (v270 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
        LODWORD(v3) = v270;
        if (v795 != &off_1E66A4180)
        {
          LODWORD(v3) = v270;
          if (v795 != &off_1E66A41C8)
          {
            uint64_t v3 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*(void *)(a1 + 48), "", 0);
            *(void *)(*(void *)(v794 + 24) + 16 * (v3 & 0x7FFFFFFF)) = &off_1E66A4180;
            uint64_t v796 = *(void *)(v794 + 8);
            if (v796)
            {
              (*(void (**)(uint64_t))(*(void *)v796 + 24))(v796);
              if (!v3) {
                return v3;
              }
            }
            else if (!v3)
            {
              return v3;
            }
          }
        }
        if (v1423)
        {
          int v797 = -1;
          unsigned int v798 = 12407;
          goto LABEL_1081;
        }
        v1052 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v270 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
        BOOL v1054 = v1052 == &off_1E66A4180 || v1052 == &off_1E66A41C8;
        int v797 = sub_1CD3CAE48(a1, v1054, 0);
        if (v1428)
        {
          unsigned int v798 = 12435;
LABEL_1081:
          uint64_t v799 = *(void *)(a1 + 32);
          uint64_t v800 = *(void *)(v799 + 640);
          uint64_t v801 = *(unint64_t **)(v799 + 648);
          uint64_t v802 = *(void *)(*(void *)(a1 + 96) + 8) + 48 * v798;
          uint64_t v803 = *(llvm::MachineFunction **)(v800 + 32);
          uint64_t v804 = *(void **)(a1 + 72);
          v1435[0] = v804;
          if (v804) {
            llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v804, 2);
          }
          uint64_t v805 = llvm::MachineFunction::CreateMachineInstr(v803, v802, (unsigned __int8 **)v1435, 0);
          if (!v1435[0]) {
            goto LABEL_1084;
          }
          int v1323 = *(unsigned __int8 *)v1435[0];
          if ((v1323 - 4) > 0x1E)
          {
            if ((v1323 - 3) >= 0xFFFFFFFE) {
              v1356 = v1435[0];
            }
            else {
              v1356 = 0;
            }
            if ((v1323 - 3) < 0xFFFFFFFE)
            {
              if (v1323 == 3) {
                *((void *)v1435[0] + 1) = 0;
              }
              goto LABEL_1084;
            }
            unint64_t v1325 = (unint64_t)v1356 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
              goto LABEL_1084;
            }
            uint64_t v1324 = *((void *)v1435[0] + 2);
            if ((v1324 & 4) == 0) {
              goto LABEL_1084;
            }
            unint64_t v1325 = v1324 & 0xFFFFFFFFFFFFFFF8;
            if (!v1325) {
              goto LABEL_1084;
            }
          }
          v1438[0] = v1435;
          sub_1CC5FA668(v1325 + 16, v1438);
LABEL_1084:
          uint64_t v806 = *(void *)(v800 + 40);
          *((void *)v805 + 3) = v806;
          uint64_t v807 = *(void *)(v806 + 32);
          uint64_t v808 = *((unsigned int *)v805 + 10);
          if (v808)
          {
            uint64_t v1067 = *((void *)v805 + 4);
            uint64_t v1068 = *(void *)(v807 + 40);
            uint64_t v1069 = 32 * v808;
            do
            {
              if (!*(unsigned char *)v1067)
              {
                uint64_t v1070 = *(unsigned int *)(v1067 + 4);
                if ((int)v1070 >= 0) {
                  v1071 = (uint64_t *)(*(void *)(v1068 + 272) + 8 * v1070);
                }
                else {
                  v1071 = (uint64_t *)(*(void *)(v1068 + 24) + 16 * (v1070 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1072 = *v1071;
                if (*v1071)
                {
                  uint64_t v1073 = *(void *)(v1072 + 16);
                  *(void *)(v1072 + 16) = v1067;
                  *(void *)(v1067 + 16) = v1073;
                  if (*(unsigned char *)(v1067 + 3))
                  {
                    *(void *)(v1067 + 24) = v1072;
                  }
                  else
                  {
                    *(void *)(v1067 + 24) = 0;
                    v1071 = (uint64_t *)(v1073 + 24);
                  }
                }
                else
                {
                  *(void *)(v1067 + 16) = v1067;
                  *(void *)(v1067 + 24) = 0;
                }
                uint64_t *v1071 = v1067;
              }
              v1067 += 32;
              v1069 -= 32;
            }
            while (v1069);
          }
          uint64_t v809 = *(void *)(v807 + 728);
          if (v809) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v809 + 24))(v809, v805);
          }
          unint64_t v810 = *v801 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v805 = v810 | *(void *)v805 & 7;
          *((void *)v805 + 1) = v801;
          *(void *)(v810 + 8) = v805;
          *uint64_t v801 = *v801 & 7 | (unint64_t)v805;
          v1438[1] = 0;
          v1439[0] = 0uLL;
          LODWORD(v1438[0]) = 0x1000000;
          HIDWORD(v1438[0]) = v3;
          llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
          if (v1423)
          {
            uint64_t v811 = (_UNKNOWN ***)(*(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v793 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
            BOOL v812 = v811 == &off_1E66A41C8 || v811 == &off_1E66A4180;
            v1438[1] = 0;
            *(void *)&v1439[0] = 0;
            int v813 = ((v1428 << 7) + 256) & 0xFFF00;
            if (v812) {
              int v813 = 0;
            }
            *((void *)&v1439[0] + 1) = 0;
            v1438[0] = (void *)__PAIR64__(v793, v813);
            llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
            LODWORD(v1438[0]) = 1;
            v1438[1] = 0;
            *(void *)&v1439[0] = 0;
            llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
            int v797 = v793;
          }
          else
          {
            LODWORD(v1438[0]) = 1;
            v1438[1] = 0;
            *(void *)&v1439[0] = 0x100000000;
            llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
          }
          v1438[1] = 0;
          v1439[0] = 0uLL;
          v1438[0] = (void *)__PAIR64__(v1409, v1408);
          llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = (8 * (v1428 & 1)) | 0x100000000;
          llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 8;
          llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
          LODWORD(v1438[0]) = 1;
          v1438[1] = 0;
          *(void *)&v1439[0] = 0;
          llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)v1438);
          *(_OWORD *)v1438 = 0u;
          v1439[0] = 0u;
          uint64_t v814 = v805;
          unint64_t v815 = v803;
          goto LABEL_1098;
        }
        uint64_t v1055 = *(void *)(a1 + 32);
        uint64_t v1056 = *(void *)(v1055 + 640);
        v1057 = *(unint64_t **)(v1055 + 648);
        uint64_t v1058 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
        int v1059 = *(llvm::MachineFunction **)(v1056 + 32);
        BOOL v1060 = *(void **)(a1 + 72);
        v1435[0] = v1060;
        if (v1060) {
          llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v1060, 2);
        }
        unsigned int v1061 = llvm::MachineFunction::CreateMachineInstr(v1059, v1058, (unsigned __int8 **)v1435, 0);
        if (v1435[0])
        {
          int v1391 = *(unsigned __int8 *)v1435[0];
          if ((v1391 - 4) > 0x1E)
          {
            if ((v1391 - 3) >= 0xFFFFFFFE) {
              v1402 = v1435[0];
            }
            else {
              v1402 = 0;
            }
            if ((v1391 - 3) < 0xFFFFFFFE)
            {
              if (v1391 == 3) {
                *((void *)v1435[0] + 1) = 0;
              }
              goto LABEL_1475;
            }
            unint64_t v1393 = (unint64_t)v1402 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
              goto LABEL_1475;
            }
            uint64_t v1392 = *((void *)v1435[0] + 2);
            if ((v1392 & 4) == 0) {
              goto LABEL_1475;
            }
            unint64_t v1393 = v1392 & 0xFFFFFFFFFFFFFFF8;
            if (!v1393) {
              goto LABEL_1475;
            }
          }
          v1438[0] = v1435;
          sub_1CC5FA668(v1393 + 16, v1438);
        }
LABEL_1475:
        uint64_t v1062 = *(void *)(v1056 + 40);
        *((void *)v1061 + 3) = v1062;
        uint64_t v1063 = *(void *)(v1062 + 32);
        uint64_t v1064 = *((unsigned int *)v1061 + 10);
        if (v1064)
        {
          uint64_t v1269 = *((void *)v1061 + 4);
          uint64_t v1270 = *(void *)(v1063 + 40);
          uint64_t v1271 = 32 * v1064;
          do
          {
            if (!*(unsigned char *)v1269)
            {
              uint64_t v1272 = *(unsigned int *)(v1269 + 4);
              if ((int)v1272 >= 0) {
                v1273 = (uint64_t *)(*(void *)(v1270 + 272) + 8 * v1272);
              }
              else {
                v1273 = (uint64_t *)(*(void *)(v1270 + 24) + 16 * (v1272 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1274 = *v1273;
              if (*v1273)
              {
                uint64_t v1275 = *(void *)(v1274 + 16);
                *(void *)(v1274 + 16) = v1269;
                *(void *)(v1269 + 16) = v1275;
                if (*(unsigned char *)(v1269 + 3))
                {
                  *(void *)(v1269 + 24) = v1274;
                }
                else
                {
                  *(void *)(v1269 + 24) = 0;
                  v1273 = (uint64_t *)(v1275 + 24);
                }
              }
              else
              {
                *(void *)(v1269 + 16) = v1269;
                *(void *)(v1269 + 24) = 0;
              }
              uint64_t *v1273 = v1269;
            }
            v1269 += 32;
            v1271 -= 32;
          }
          while (v1271);
        }
        uint64_t v1065 = *(void *)(v1063 + 728);
        if (v1065) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1065 + 24))(v1065, v1061);
        }
        unint64_t v1066 = *v1057 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unsigned int v1061 = v1066 | *(void *)v1061 & 7;
        *((void *)v1061 + 1) = v1057;
        *(void *)(v1066 + 8) = v1061;
        unint64_t *v1057 = *v1057 & 7 | (unint64_t)v1061;
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0x1000000;
        HIDWORD(v1438[0]) = v3;
        llvm::MachineInstr::addOperand(v1061, v1059, (const llvm::MachineOperand *)v1438);
        v1438[1] = 0;
        v1439[0] = 0uLL;
        v1438[0] = (void *)__PAIR64__(v1409, v1408);
        uint64_t v814 = v1061;
        unint64_t v815 = v1059;
LABEL_1098:
        llvm::MachineInstr::addOperand(v814, v815, (const llvm::MachineOperand *)v1438);
        if (v270 == v3) {
          return 1;
        }
        uint64_t v816 = *(void *)(a1 + 32);
        uint64_t v817 = *(void *)(v816 + 640);
        unint64_t v818 = *(unint64_t **)(v816 + 648);
        uint64_t v819 = *(void *)(*(void *)(a1 + 96) + 8) + 432;
        uint64_t v539 = *(llvm::MachineFunction **)(v817 + 32);
        uint64_t v820 = *(void **)(a1 + 72);
        v1435[0] = v820;
        if (v820) {
          llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v820, 2);
        }
        unint64_t v821 = llvm::MachineFunction::CreateMachineInstr(v539, v819, (unsigned __int8 **)v1435, 0);
        if (v1435[0])
        {
          int v1346 = *(unsigned __int8 *)v1435[0];
          if ((v1346 - 4) > 0x1E)
          {
            if ((v1346 - 3) >= 0xFFFFFFFE) {
              v1371 = v1435[0];
            }
            else {
              v1371 = 0;
            }
            if ((v1346 - 3) < 0xFFFFFFFE)
            {
              if (v1346 == 3) {
                *((void *)v1435[0] + 1) = 0;
              }
              goto LABEL_1102;
            }
            unint64_t v1348 = (unint64_t)v1371 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
              goto LABEL_1102;
            }
            uint64_t v1347 = *((void *)v1435[0] + 2);
            if ((v1347 & 4) == 0) {
              goto LABEL_1102;
            }
            unint64_t v1348 = v1347 & 0xFFFFFFFFFFFFFFF8;
            if (!v1348) {
              goto LABEL_1102;
            }
          }
          v1438[0] = v1435;
          sub_1CC5FA668(v1348 + 16, v1438);
        }
LABEL_1102:
        uint64_t v822 = *(void *)(v817 + 40);
        *((void *)v821 + 3) = v822;
        uint64_t v823 = *(void *)(v822 + 32);
        uint64_t v824 = *((unsigned int *)v821 + 10);
        if (v824)
        {
          uint64_t v1176 = *((void *)v821 + 4);
          uint64_t v1177 = *(void *)(v823 + 40);
          uint64_t v1178 = 32 * v824;
          do
          {
            if (!*(unsigned char *)v1176)
            {
              uint64_t v1179 = *(unsigned int *)(v1176 + 4);
              if ((int)v1179 >= 0) {
                unsigned int v1180 = (uint64_t *)(*(void *)(v1177 + 272) + 8 * v1179);
              }
              else {
                unsigned int v1180 = (uint64_t *)(*(void *)(v1177 + 24) + 16 * (v1179 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1181 = *v1180;
              if (*v1180)
              {
                uint64_t v1182 = *(void *)(v1181 + 16);
                *(void *)(v1181 + 16) = v1176;
                *(void *)(v1176 + 16) = v1182;
                if (*(unsigned char *)(v1176 + 3))
                {
                  *(void *)(v1176 + 24) = v1181;
                }
                else
                {
                  *(void *)(v1176 + 24) = 0;
                  unsigned int v1180 = (uint64_t *)(v1182 + 24);
                }
              }
              else
              {
                *(void *)(v1176 + 16) = v1176;
                *(void *)(v1176 + 24) = 0;
              }
              *unsigned int v1180 = v1176;
            }
            v1176 += 32;
            v1178 -= 32;
          }
          while (v1178);
        }
        uint64_t v825 = *(void *)(v823 + 728);
        if (v825) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v825 + 24))(v825, v821);
        }
        unint64_t v826 = *v818 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v821 = v826 | *(void *)v821 & 7;
        *((void *)v821 + 1) = v818;
        *(void *)(v826 + 8) = v821;
        unint64_t *v818 = *v818 & 7 | (unint64_t)v821;
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0x1000000;
        HIDWORD(v1438[0]) = v270;
        llvm::MachineInstr::addOperand(v821, v539, (const llvm::MachineOperand *)v1438);
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0;
        HIDWORD(v1438[0]) = v797;
        llvm::MachineInstr::addOperand(v821, v539, (const llvm::MachineOperand *)v1438);
        v1438[1] = 0;
        v1439[0] = 0uLL;
        LODWORD(v1438[0]) = 0;
        HIDWORD(v1438[0]) = v3;
        llvm::MachineInstr::addOperand(v821, v539, (const llvm::MachineOperand *)v1438);
        uint64_t v3 = 1;
        LODWORD(v1438[0]) = 1;
        v1438[1] = 0;
        *(void *)&v1439[0] = (v1428 >> 1) + 1;
        uint64_t v293 = v821;
        goto LABEL_1298;
      }
      LODWORD(v589) = 0;
      goto LABEL_958;
    case 0x5B:
      return sub_1CD3CC9DC(a1, (unsigned __int8 *)v5);
    case 0x5C:
      uint64_t v71 = (unsigned __int8 *)*(v5 - 4);
      uint64_t v72 = **(void **)(*(void *)v71 + 16);
      int v73 = (llvm::Type *)v72;
      if ((*(_DWORD *)(v72 + 8) & 0xFE) == 0x12) {
        int v73 = **(llvm::Type ***)(v72 + 16);
      }
      int v74 = llvm::Type::getPrimitiveSizeInBits(v73);
      int v75 = *(_DWORD *)(v72 + 32);
      int v76 = sub_1CB87DFFC((uint64_t *)a1, v71);
      if (!v76) {
        return 0;
      }
      int v77 = v76;
      int v78 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)v5);
      if (!v78) {
        return 0;
      }
      int v79 = v78;
      unsigned int v80 = *(void **)(a1 + 48);
      unint64_t v81 = *(void *)(v80[3] + 16 * (v78 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v82 = (*(uint64_t (**)(void))(**(void **)(*v80 + 16) + 176))(*(void *)(*v80 + 16));
      unsigned int v83 = *(_DWORD *)(*(void *)(v82 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*(void *)v81 + 24)
                       + *(_DWORD *)(v82 + 272) * ((*(void *)(v82 + 248) - *(void *)(v82 + 240)) >> 3)));
      if (v83 > v75 * v74) {
        return 1;
      }
      int v84 = 0;
      unsigned int v85 = v75 * v74 / v83;
      if (v85 <= 1) {
        int v86 = 1;
      }
      else {
        int v86 = v85;
      }
      while (1)
      {
        uint64_t v87 = *(void *)(a1 + 32);
        uint64_t v88 = *(void *)(v87 + 640);
        uint64_t v89 = *(unint64_t **)(v87 + 648);
        uint64_t v90 = *(void *)(*(void *)(a1 + 96) + 8);
        int v91 = *(llvm::MachineFunction **)(v88 + 32);
        uint64_t v92 = *(void **)(a1 + 72);
        v1435[0] = v92;
        if (v92) {
          llvm::MetadataTracking::track((uint64_t)v1435, (unsigned __int8 *)v92, 2);
        }
        unint64_t v93 = llvm::MachineFunction::CreateMachineInstr(v91, v90 + 912, (unsigned __int8 **)v1435, 0);
        if (!v1435[0]) {
          goto LABEL_141;
        }
        int v106 = *(unsigned __int8 *)v1435[0];
        if ((v106 - 4) > 0x1E)
        {
          if ((v106 - 3) >= 0xFFFFFFFE) {
            uint64_t v109 = v1435[0];
          }
          else {
            uint64_t v109 = 0;
          }
          if ((v106 - 3) < 0xFFFFFFFE)
          {
            if (v106 == 3) {
              *((void *)v1435[0] + 1) = 0;
            }
            goto LABEL_141;
          }
          unint64_t v108 = (unint64_t)v109 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1435[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1435[0] + 3)) {
            goto LABEL_141;
          }
          uint64_t v107 = *((void *)v1435[0] + 2);
          if ((v107 & 4) == 0) {
            goto LABEL_141;
          }
          unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
          if (!v108) {
            goto LABEL_141;
          }
        }
        v1438[0] = v1435;
        sub_1CC5FA668(v108 + 16, v1438);
LABEL_141:
        uint64_t v94 = *(void *)(v88 + 40);
        *((void *)v93 + 3) = v94;
        uint64_t v95 = *(void *)(v94 + 32);
        uint64_t v96 = *((unsigned int *)v93 + 10);
        if (v96)
        {
          uint64_t v99 = *((void *)v93 + 4);
          uint64_t v100 = *(void *)(v95 + 40);
          uint64_t v101 = 32 * v96;
          do
          {
            if (!*(unsigned char *)v99)
            {
              uint64_t v102 = *(unsigned int *)(v99 + 4);
              if ((int)v102 >= 0) {
                uint64_t v103 = (uint64_t *)(*(void *)(v100 + 272) + 8 * v102);
              }
              else {
                uint64_t v103 = (uint64_t *)(*(void *)(v100 + 24) + 16 * (v102 & 0x7FFFFFFF) + 8);
              }
              uint64_t v104 = *v103;
              if (*v103)
              {
                uint64_t v105 = *(void *)(v104 + 16);
                *(void *)(v104 + 16) = v99;
                *(void *)(v99 + 16) = v105;
                if (*(unsigned char *)(v99 + 3))
                {
                  *(void *)(v99 + 24) = v104;
                }
                else
                {
                  *(void *)(v99 + 24) = 0;
                  uint64_t v103 = (uint64_t *)(v105 + 24);
                }
              }
              else
              {
                *(void *)(v99 + 16) = v99;
                *(void *)(v99 + 24) = 0;
              }
              *uint64_t v103 = v99;
            }
            v99 += 32;
            v101 -= 32;
          }
          while (v101);
        }
        uint64_t v97 = *(void *)(v95 + 728);
        if (v97) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v97 + 24))(v97, v93);
        }
        unint64_t v98 = *v89 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v93 = v98 | *(void *)v93 & 7;
        *((void *)v93 + 1) = v89;
        *(void *)(v98 + 8) = v93;
        *uint64_t v89 = *v89 & 7 | (unint64_t)v93;
        HIDWORD(v1438[1]) = 0;
        v1439[0] = 0uLL;
        *(void **)((char *)v1438 + 4) = (void *)(v84 + v79);
        LODWORD(v1438[0]) = 0x1000000;
        llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)v1438);
        HIDWORD(v1438[1]) = 0;
        LODWORD(v1438[0]) = 0;
        *(void **)((char *)v1438 + 4) = (void *)(v84 + v77);
        v1439[0] = 0uLL;
        llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)v1438);
        ++v84;
        uint64_t v3 = 1;
        if (v84 == v86) {
          return v3;
        }
      }
    case 0x5D:
      uint64_t v138 = (unsigned __int8 *)*(v5 - 8);
      uint64_t v139 = *(void *)v138;
      if (*(unsigned char *)(*(void *)v138 + 8) != 16 || *((_DWORD *)v5 + 18) != 1) {
        return 0;
      }
      uint64_t v140 = (unsigned __int8 *)*(v5 - 4);
      uint64_t v141 = *(unsigned int *)v5[8];
      v1438[0] = v1439;
      v1438[1] = (void *)0x1000000000;
      v1435[0] = &v1436;
      v1435[1] = (void *)0x1000000000;
      uint64_t v3 = sub_1CB87DFFC((uint64_t *)a1, (unsigned __int8 *)v5);
      if (!v3) {
        goto LABEL_600;
      }
      unsigned int v142 = v138[16] - 13;
      if (v142 > 0xFFFFFFFD)
      {
        int v143 = 0;
      }
      else
      {
        int v143 = sub_1CB87DFFC((uint64_t *)a1, v138);
        if (!v143) {
          goto LABEL_447;
        }
      }
      unsigned int v325 = sub_1CB87DFFC((uint64_t *)a1, v140);
      if (!v325)
      {
LABEL_447:
        uint64_t v3 = 0;
        goto LABEL_600;
      }
      if (*(_DWORD *)(v139 + 12))
      {
        unsigned int v326 = v325;
        uint64_t v327 = 0;
        while (1)
        {
          uint64_t v328 = *(void *)(*(void *)(v139 + 16) + 8 * v327);
          v1440.i32[0] = 0;
          if (!sub_1CB85A994(a1, v328, v1440.i32)) {
            break;
          }
          uint64_t v329 = *(void **)(a1 + 48);
          unint64_t v330 = *(void *)(v329[3] + 16 * ((v3 + v327) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v331 = (*(uint64_t (**)(void))(**(void **)(*v329 + 16) + 176))(*(void *)(*v329 + 16));
          if (v1440.i32[0] != *(_DWORD *)(*(void *)(v331 + 264)
                                         + 24
                                         * (*(unsigned __int16 *)(*(void *)v330 + 24)
                                          + *(_DWORD *)(v331 + 272)
                                          * ((*(void *)(v331 + 248) - *(void *)(v331 + 240)) >> 3))))
            break;
          if (v142 < 0xFFFFFFFE || v141 == v327)
          {
            if (v141 == v327) {
              uint64_t v333 = v326;
            }
            else {
              uint64_t v333 = (v143 + v327);
            }
            if (LODWORD(v1438[1]) >= (unint64_t)HIDWORD(v1438[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v1438[0] + LODWORD(v1438[1])) = (v3 + v327) | (unint64_t)(v333 << 32);
            uint64_t v332 = &v1438[1];
          }
          else
          {
            if (LODWORD(v1435[1]) >= (unint64_t)HIDWORD(v1435[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v1435[0] + LODWORD(v1435[1])) = v3 + v327;
            uint64_t v332 = &v1435[1];
          }
          ++*(_DWORD *)v332;
          if (++v327 >= (unint64_t)*(unsigned int *)(v139 + 12)) {
            goto LABEL_512;
          }
        }
        uint64_t v3 = 0;
        goto LABEL_600;
      }
LABEL_512:
      if (LODWORD(v1435[1]))
      {
        uint64_t v379 = (__int32 *)v1435[0];
        unint64_t v380 = (__int32 *)((char *)v1435[0] + 4 * LODWORD(v1435[1]));
        do
        {
          __int32 v381 = *v379;
          uint64_t v382 = *(void *)(a1 + 32);
          uint64_t v383 = *(void *)(v382 + 640);
          int v384 = *(unint64_t **)(v382 + 648);
          uint64_t v385 = *(void *)(*(void *)(a1 + 96) + 8);
          unint64_t v386 = *(llvm::MachineFunction **)(v383 + 32);
          unint64_t v387 = *(unsigned __int8 **)(a1 + 72);
          v1446.i64[0] = (uint64_t)v387;
          if (v387) {
            llvm::MetadataTracking::track((uint64_t)&v1446, v387, 2);
          }
          BOOL v388 = llvm::MachineFunction::CreateMachineInstr(v386, v385 + 480, (unsigned __int8 **)&v1446, 0);
          if (!v1446.i64[0]) {
            goto LABEL_517;
          }
          int v401 = *(unsigned __int8 *)v1446.i64[0];
          if ((v401 - 4) > 0x1E)
          {
            if ((v401 - 3) >= 0xFFFFFFFE) {
              uint64_t v404 = v1446.i64[0];
            }
            else {
              uint64_t v404 = 0;
            }
            if ((v401 - 3) < 0xFFFFFFFE)
            {
              if (v401 == 3) {
                *(void *)(v1446.i64[0] + 8) = 0;
              }
              goto LABEL_517;
            }
            unint64_t v403 = v404 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1446.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1446.i64[0] + 12)) {
              goto LABEL_517;
            }
            uint64_t v402 = *(void *)(v1446.i64[0] + 16);
            if ((v402 & 4) == 0) {
              goto LABEL_517;
            }
            unint64_t v403 = v402 & 0xFFFFFFFFFFFFFFF8;
            if (!v403) {
              goto LABEL_517;
            }
          }
          v1440.i64[0] = (uint64_t)&v1446;
          sub_1CC5FA668(v403 + 16, &v1440);
LABEL_517:
          uint64_t v389 = *(void *)(v383 + 40);
          *((void *)v388 + 3) = v389;
          uint64_t v390 = *(void *)(v389 + 32);
          uint64_t v391 = *((unsigned int *)v388 + 10);
          if (v391)
          {
            uint64_t v394 = *((void *)v388 + 4);
            uint64_t v395 = *(void *)(v390 + 40);
            uint64_t v396 = 32 * v391;
            do
            {
              if (!*(unsigned char *)v394)
              {
                uint64_t v397 = *(unsigned int *)(v394 + 4);
                if ((int)v397 >= 0) {
                  int v398 = (uint64_t *)(*(void *)(v395 + 272) + 8 * v397);
                }
                else {
                  int v398 = (uint64_t *)(*(void *)(v395 + 24) + 16 * (v397 & 0x7FFFFFFF) + 8);
                }
                uint64_t v399 = *v398;
                if (*v398)
                {
                  uint64_t v400 = *(void *)(v399 + 16);
                  *(void *)(v399 + 16) = v394;
                  *(void *)(v394 + 16) = v400;
                  if (*(unsigned char *)(v394 + 3))
                  {
                    *(void *)(v394 + 24) = v399;
                  }
                  else
                  {
                    *(void *)(v394 + 24) = 0;
                    int v398 = (uint64_t *)(v400 + 24);
                  }
                }
                else
                {
                  *(void *)(v394 + 16) = v394;
                  *(void *)(v394 + 24) = 0;
                }
                *int v398 = v394;
              }
              v394 += 32;
              v396 -= 32;
            }
            while (v396);
          }
          uint64_t v392 = *(void *)(v390 + 728);
          if (v392) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v392 + 24))(v392, v388);
          }
          unint64_t v393 = *v384 & 0xFFFFFFFFFFFFFFF8;
          *(void *)BOOL v388 = v393 | *(void *)v388 & 7;
          *((void *)v388 + 1) = v384;
          *(void *)(v393 + 8) = v388;
          unint64_t *v384 = *v384 & 7 | (unint64_t)v388;
          v1440.i64[1] = 0;
          uint64_t v1441 = 0;
          uint64_t v1442 = 0;
          v1440.i32[0] = 0x1000000;
          v1440.i32[1] = v381;
          llvm::MachineInstr::addOperand(v388, v386, (const llvm::MachineOperand *)&v1440);
          ++v379;
        }
        while (v379 != v380);
      }
      if (!LODWORD(v1438[1]))
      {
LABEL_586:
        uint64_t v3 = 1;
LABEL_600:
        if (v1435[0] != &v1436) {
          free(v1435[0]);
        }
        if (v1438[0] != v1439) {
          free(v1438[0]);
        }
        return v3;
      }
      int v405 = (__int32 *)v1438[0];
      int v406 = (__int32 *)((char *)v1438[0] + 8 * LODWORD(v1438[1]));
      break;
    default:
      return v3;
  }
  while (1)
  {
    __int32 v407 = *v405;
    __int32 v408 = v405[1];
    uint64_t v409 = *(void *)(a1 + 32);
    uint64_t v410 = *(void *)(v409 + 640);
    char v411 = *(unint64_t **)(v409 + 648);
    uint64_t v412 = *(void *)(*(void *)(a1 + 96) + 8);
    long long v413 = *(llvm::MachineFunction **)(v410 + 32);
    long long v414 = *(unsigned __int8 **)(a1 + 72);
    v1446.i64[0] = (uint64_t)v414;
    if (v414) {
      llvm::MetadataTracking::track((uint64_t)&v1446, v414, 2);
    }
    uint64_t v415 = llvm::MachineFunction::CreateMachineInstr(v413, v412 + 912, (unsigned __int8 **)&v1446, 0);
    if (!v1446.i64[0]) {
      goto LABEL_554;
    }
    int v428 = *(unsigned __int8 *)v1446.i64[0];
    if ((v428 - 4) > 0x1E)
    {
      if ((v428 - 3) >= 0xFFFFFFFE) {
        uint64_t v431 = v1446.i64[0];
      }
      else {
        uint64_t v431 = 0;
      }
      if ((v428 - 3) < 0xFFFFFFFE)
      {
        if (v428 == 3) {
          *(void *)(v1446.i64[0] + 8) = 0;
        }
        goto LABEL_554;
      }
      unint64_t v430 = v431 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v1446.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1446.i64[0] + 12)) {
        goto LABEL_554;
      }
      uint64_t v429 = *(void *)(v1446.i64[0] + 16);
      if ((v429 & 4) == 0) {
        goto LABEL_554;
      }
      unint64_t v430 = v429 & 0xFFFFFFFFFFFFFFF8;
      if (!v430) {
        goto LABEL_554;
      }
    }
    v1440.i64[0] = (uint64_t)&v1446;
    sub_1CC5FA668(v430 + 16, &v1440);
LABEL_554:
    uint64_t v416 = *(void *)(v410 + 40);
    *((void *)v415 + 3) = v416;
    uint64_t v417 = *(void *)(v416 + 32);
    uint64_t v418 = *((unsigned int *)v415 + 10);
    if (v418)
    {
      uint64_t v421 = *((void *)v415 + 4);
      uint64_t v422 = *(void *)(v417 + 40);
      uint64_t v423 = 32 * v418;
      do
      {
        if (!*(unsigned char *)v421)
        {
          uint64_t v424 = *(unsigned int *)(v421 + 4);
          if ((int)v424 >= 0) {
            unint64_t v425 = (uint64_t *)(*(void *)(v422 + 272) + 8 * v424);
          }
          else {
            unint64_t v425 = (uint64_t *)(*(void *)(v422 + 24) + 16 * (v424 & 0x7FFFFFFF) + 8);
          }
          uint64_t v426 = *v425;
          if (*v425)
          {
            uint64_t v427 = *(void *)(v426 + 16);
            *(void *)(v426 + 16) = v421;
            *(void *)(v421 + 16) = v427;
            if (*(unsigned char *)(v421 + 3))
            {
              *(void *)(v421 + 24) = v426;
            }
            else
            {
              *(void *)(v421 + 24) = 0;
              unint64_t v425 = (uint64_t *)(v427 + 24);
            }
          }
          else
          {
            *(void *)(v421 + 16) = v421;
            *(void *)(v421 + 24) = 0;
          }
          *unint64_t v425 = v421;
        }
        v421 += 32;
        v423 -= 32;
      }
      while (v423);
    }
    uint64_t v419 = *(void *)(v417 + 728);
    if (v419) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v419 + 24))(v419, v415);
    }
    unint64_t v420 = *v411 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v415 = v420 | *(void *)v415 & 7;
    *((void *)v415 + 1) = v411;
    *(void *)(v420 + 8) = v415;
    unint64_t *v411 = *v411 & 7 | (unint64_t)v415;
    v1440.i64[1] = 0;
    uint64_t v1441 = 0;
    uint64_t v1442 = 0;
    v1440.i32[0] = 0x1000000;
    v1440.i32[1] = v407;
    llvm::MachineInstr::addOperand(v415, v413, (const llvm::MachineOperand *)&v1440);
    v1440.i64[1] = 0;
    v1440.i32[0] = 0;
    v1440.i32[1] = v408;
    uint64_t v1441 = 0;
    uint64_t v1442 = 0;
    llvm::MachineInstr::addOperand(v415, v413, (const llvm::MachineOperand *)&v1440);
    v405 += 2;
    if (v405 == v406) {
      goto LABEL_586;
    }
  }
}

unint64_t sub_1CB87DC14(uint64_t a1, uint64_t a2, llvm::EVT *this, llvm::Type *a4)
{
  if (this && *((_DWORD *)this + 2) == 15)
  {
    LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t, void, llvm::Type *))(*(void *)a1 + 32))(a1, a2, *((_DWORD *)this + 2) >> 8, a4);
    unint64_t v6 = 0;
  }
  else if (this && (*((_DWORD *)this + 2) & 0xFE) == 0x12)
  {
    uint64_t v7 = (llvm::EVT *)*((void *)this + 3);
    if (v7 && *((_DWORD *)v7 + 2) == 15)
    {
      v13[0] = (*(uint64_t (**)(uint64_t, uint64_t, void, llvm::Type *))(*(void *)a1 + 32))(a1, a2, *((_DWORD *)v7 + 2) >> 8, a4);
      uint64_t v14 = 0;
      llvm::EVT::getTypeForEVT((llvm::EVT *)v13, *(llvm::LLVMContext **)this);
      uint64_t v7 = v8;
    }
    int v9 = *(llvm::LLVMContext **)this;
    unint64_t EVT = llvm::EVT::getEVT(v7, 0, (BOOL)this);
    unint64_t v5 = sub_1CB882C1C(v9, EVT, v11, (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((unsigned char *)this + 8) == 19) << 32)));
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    unint64_t v5 = llvm::EVT::getEVT(this, a4, (BOOL)this);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  return v6 | v5;
}

void *sub_1CB87DD48(void *result)
{
  *uint64_t result = &unk_1F2643B78;
  uint64_t v1 = (void *)result[12];
  if (v1 != (void *)result[11])
  {
    uint64_t v3 = result;
    free(v1);
    uint64_t result = v3;
  }
  unsigned int v2 = (void *)result[8];
  if (v2 != result + 10)
  {
    uint64_t v4 = result;
    free(v2);
    return v4;
  }
  return result;
}

uint64_t sub_1CB87DDC4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if ((_UNKNOWN *)*a2 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)result, (const llvm::detail::DoubleAPFloat *)a2);
  }
  *(void *)uint64_t result = v2;
  if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  char v3 = *(unsigned char *)(result + 20) & 0xF7 | *((unsigned char *)a2 + 20) & 8;
  *(unsigned char *)(result + 20) = v3;
  char v4 = *((unsigned char *)a2 + 20);
  int v5 = v4 & 7;
  *(unsigned char *)(result + 20) = v3 & 0xF8 | v4 & 7;
  *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
  BOOL v7 = (v4 & 6) != 0 && v5 != 3;
  if (v5 == 1 || v7)
  {
    int v9 = (void *)(result + 8);
    uint64_t v10 = *(unsigned int *)(*(void *)result + 8);
    if ((v10 - 64) <= 0xFFFFFF7F) {
      int v9 = (void *)*v9;
    }
    unsigned int v11 = *(_DWORD *)(*a2 + 8) - 64;
    uint64_t v14 = (uint64_t *)a2[1];
    uint64_t v12 = a2 + 1;
    unint64_t v13 = v14;
    if (v11 >= 0xFFFFFF80) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = v13;
    }
    if (v10 <= 0xFFFFFFBF)
    {
      unint64_t v16 = (unint64_t)(v10 + 64) >> 6;
      do
      {
        uint64_t v17 = *v15++;
        *v9++ = v17;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t *sub_1CB87DEE4(uint64_t *result)
{
  if ((_UNKNOWN *)*result == &unk_1CFB2E344)
  {
    uint64_t v2 = result;
    sub_1CB845718(result + 1);
    return v2;
  }
  if ((*(_DWORD *)(*result + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v1 = result[1];
    if (v1)
    {
      uint64_t v2 = result;
      MEMORY[0x1D25D9CB0](v1, 0x1000C8000313F17);
      return v2;
    }
  }
  return result;
}

uint64_t sub_1CB87DF68(uint64_t a1, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    unint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_14:
      uint64_t result = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v7 == -8192;
        }
        if (v11) {
          unsigned int v8 = v6;
        }
        unsigned int v12 = v5 + v9++;
        unsigned int v5 = v12 & v4;
        unint64_t v6 = (void *)(*(void *)a1 + 16 * (v12 & v4));
        uint64_t v7 = *v6;
        if (*a2 == *v6) {
          goto LABEL_14;
        }
      }
      uint64_t result = 0;
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_1CB87DFFC(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)a2;
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 8);
  if (*(void *)a2) {
    BOOL v6 = *(_DWORD *)(*(void *)a2 + 8) == 18;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    int v9 = *(_DWORD *)(v4 + 32);
    if ((v9 - 5) >= 0xFFFFFFFD)
    {
      unsigned int v10 = *(_DWORD *)(*(void *)(v4 + 24) + 8);
      int v11 = v10;
      if (v10 == 2) {
        goto LABEL_44;
      }
      unsigned int v12 = v10 >> 8;
      if (v11 == 13 && v12 == 32) {
        goto LABEL_44;
      }
      if (v11 == 13 && v12 == 8)
      {
        if (v9 == 2 || v9 == 4) {
          goto LABEL_44;
        }
      }
      else
      {
        BOOL v15 = v11 == 13 && v12 == 16;
        if (v11) {
          BOOL v16 = !v15;
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          goto LABEL_44;
        }
      }
    }
    return 0;
  }
  if (v5 == 16397) {
    goto LABEL_44;
  }
  uint64_t result = 0;
  unsigned int v8 = *(_DWORD *)(*(void *)a2 + 8);
  if (v8 <= 0xC)
  {
    if (*(_DWORD *)(*(void *)a2 + 8)) {
      BOOL v17 = v8 == 2;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      goto LABEL_44;
    }
  }
  else
  {
    if (v8 == 13)
    {
      if (v5 >> 8 <= 0x20)
      {
LABEL_44:
        uint64_t v19 = (uint64_t *)(a1[4] + 80);
        uint64_t v20 = 0;
        BOOL v21 = a2;
        if (sub_1CD3C8538(v19, &v21, &v20)) {
          return sub_1CD789364((uint64_t)a1, (uint64_t)a2);
        }
        else {
          return sub_1CD3CAD7C(a1, a2);
        }
      }
      return 0;
    }
    if (v8 == 16 || v8 == 15) {
      goto LABEL_44;
    }
  }
  return result;
}

uint64_t sub_1CB87E144(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  unsigned int v8 = *(void **)(a1 + 8);
  uint64_t v7 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v8 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::convertToInteger(v7, (uint64_t)a2, a3, a4, a5, a6, (uint64_t)a7);
  }
  else {
    return llvm::detail::IEEEFloat::convertToInteger((uint64_t)v7, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t sub_1CB87E160(unint64_t a1, llvm::LLVMContext *a2, uint64_t a3, uint64_t a4)
{
  if ((_BYTE)a3) {
    return *(unsigned __int8 *)(a1 + a3 + 1886);
  }
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
  {
    LOBYTE(v9) = 0;
    uint64_t v10 = 0;
    unsigned __int8 v8 = 0;
    unsigned int v7 = 0;
    llvm::TargetLoweringBase::getVectorTypeBreakdown(a1, a2, a3, a4, &v9, &v7, &v8);
    return v8;
  }
  else
  {
    llvm::TargetLoweringBase::getTypeConversion(a1, a2, a3, a4, (uint64_t)&v9);
    return sub_1CB87E160(a1, a2, v10, v11);
  }
}

uint64_t sub_1CB87E200(unsigned __int8 *a1)
{
  int v1 = *a1;
  uint64_t result = 1;
  switch(v1)
  {
    case 3:
    case 18:
    case 26:
    case 123:
    case 127:
      uint64_t result = 8;
      break;
    case 4:
    case 8:
    case 9:
    case 19:
    case 27:
    case 37:
    case 75:
    case 124:
    case 128:
    case 134:
    case 152:
    case 158:
      uint64_t result = 16;
      break;
    case 5:
    case 10:
    case 20:
    case 28:
    case 38:
    case 48:
    case 76:
    case 86:
    case 94:
    case 125:
    case 129:
    case 135:
    case 140:
    case 153:
    case 159:
    case 162:
      uint64_t result = 32;
      break;
    case 6:
    case 11:
    case 21:
    case 29:
    case 40:
    case 49:
    case 64:
    case 78:
    case 88:
    case 95:
    case 110:
    case 126:
    case 130:
    case 136:
    case 141:
    case 146:
    case 154:
    case 160:
    case 163:
    case 167:
    case 171:
      uint64_t result = 64;
      break;
    case 7:
    case 13:
    case 14:
    case 22:
    case 30:
    case 41:
    case 51:
    case 65:
    case 74:
    case 79:
    case 89:
    case 97:
    case 111:
    case 131:
    case 137:
    case 142:
    case 147:
    case 155:
    case 161:
    case 164:
    case 168:
      uint64_t result = 128;
      break;
    case 12:
      uint64_t result = 80;
      break;
    case 16:
    case 121:
      uint64_t result = 2;
      break;
    case 17:
    case 122:
      uint64_t result = 4;
      break;
    case 23:
    case 31:
    case 42:
    case 55:
    case 67:
    case 80:
    case 90:
    case 101:
    case 113:
    case 132:
    case 138:
    case 143:
    case 148:
    case 156:
    case 165:
    case 169:
      uint64_t result = 256;
      break;
    case 24:
    case 32:
    case 43:
    case 56:
    case 68:
    case 81:
    case 91:
    case 102:
    case 114:
    case 133:
    case 139:
    case 144:
    case 149:
    case 157:
    case 166:
    case 170:
    case 178:
      uint64_t result = 512;
      break;
    case 25:
    case 33:
    case 44:
    case 57:
    case 69:
    case 82:
    case 92:
    case 103:
    case 115:
    case 145:
    case 150:
      uint64_t result = 1024;
      break;
    case 34:
    case 45:
    case 58:
    case 70:
    case 83:
    case 93:
    case 104:
    case 116:
    case 151:
      uint64_t result = 2048;
      break;
    case 35:
    case 46:
    case 59:
    case 71:
    case 84:
    case 105:
    case 117:
      uint64_t result = 4096;
      break;
    case 36:
    case 47:
    case 60:
    case 72:
    case 85:
    case 106:
    case 118:
    case 177:
      uint64_t result = 0x2000;
      break;
    case 39:
    case 77:
    case 87:
      uint64_t result = 48;
      break;
    case 50:
    case 96:
      uint64_t result = 96;
      break;
    case 52:
    case 98:
      uint64_t result = 160;
      break;
    case 53:
    case 66:
    case 99:
    case 112:
      uint64_t result = 192;
      break;
    case 54:
    case 100:
      uint64_t result = 224;
      break;
    case 61:
    case 73:
    case 107:
    case 119:
      uint64_t result = 0x4000;
      break;
    case 62:
    case 108:
      uint64_t result = 0x8000;
      break;
    case 63:
    case 109:
      uint64_t result = 0x10000;
      break;
    case 120:
      uint64_t result = 1;
      break;
    case 172:
    case 173:
    case 174:
      __break(1u);
      goto LABEL_25;
    case 175:
    case 176:
LABEL_25:
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1CB87E670(uint64_t a1, int a2)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::makeSmallestNormalized(v2, a2);
  }
  else {
    llvm::detail::IEEEFloat::makeSmallestNormalized((uint64_t *)v2, a2);
  }
}

uint64_t sub_1CB87E68C(uint64_t result, uint64_t a2)
{
  if ((_UNKNOWN *)a2 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)result, (uint64_t)&unk_1CFB2E344);
  }
  *(void *)uint64_t result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *(unsigned char *)(result + 20) = *(unsigned char *)(result + 20) & 0xF0 | 3;
  int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    int v3 = *(void **)(result + 8);
    *int v3 = 0;
    uint64_t v4 = result;
    bzero(v3 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v4;
  }
  else
  {
    *(void *)(result + 8) = 0;
  }
  return result;
}

uint64_t *sub_1CB87E774(uint64_t a1, int a2)
{
  int v3 = *(void **)(a1 + 8);
  int v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::makeLargest(v2, a2);
  }
  else {
    return (uint64_t *)llvm::detail::IEEEFloat::makeLargest(v2, a2);
  }
}

void sub_1CB87E790(uint64_t a1, int a2)
{
  int v3 = *(void **)(a1 + 8);
  int v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::makeInf(v2);
  }
  else {
    llvm::detail::IEEEFloat::makeInf(v2, a2);
  }
}

void sub_1CB87E7AC()
{
}

uint64_t sub_1CB87E7C0()
{
  return 0;
}

uint64_t sub_1CB87E7C8()
{
  return 1;
}

uint64_t sub_1CB87E7D0()
{
  return 0;
}

uint64_t sub_1CB87E7D8()
{
  return 16;
}

uint64_t sub_1CB87E7E0()
{
  return 16;
}

uint64_t sub_1CB87E7E8(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1CB87E7F0()
{
  return 0;
}

uint64_t sub_1CB87E7F8()
{
  return 0;
}

uint64_t sub_1CB87E800(uint64_t a1, _DWORD *a2)
{
  *a2 = 4;
  return 0;
}

uint64_t sub_1CB87E810()
{
  return 0;
}

uint64_t sub_1CB87E818()
{
  return 0;
}

uint64_t sub_1CB87E820()
{
  return 0;
}

uint64_t sub_1CB87E828(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, __int16 a9, char a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  if (a14 == -1)
  {
    if (a4 == -1)
    {
      uint64_t v20 = (char *)*(&off_1E66A3C18 + a2);
      return *(unsigned int *)v20;
    }
  }
  else
  {
    if (a14 <= 1) {
      int v14 = 1;
    }
    else {
      int v14 = 2;
    }
    if (a14 <= 3) {
      int v15 = v14;
    }
    else {
      int v15 = 3;
    }
    if (a14 <= 7) {
      a4 = v15;
    }
    else {
      a4 = 4;
    }
  }
  if (a7 == 1)
  {
    uint64_t v18 = (char *)&unk_1CD91C700;
    if (a10)
    {
      uint64_t v18 = (char *)&unk_1CD91C6F0;
      uint64_t v19 = (char *)&unk_1CD91C710;
    }
    else
    {
      uint64_t v19 = (char *)&unk_1CD91C720;
    }
    if ((a2 - 1) < 2) {
      uint64_t v19 = v18;
    }
    uint64_t v20 = &v19[4 * a8];
  }
  else
  {
    if (a7) {
      return 0xFFFFFFFFLL;
    }
    switch(a2)
    {
      case 1:
      case 2:
        BOOL v16 = (char *)&unk_1CD91C6C0;
        BOOL v17 = (char *)&unk_1CD91C6B0;
        break;
      case 3:
      case 4:
      case 7:
        __break(1u);
        JUMPOUT(0x1CB87E940);
      default:
        BOOL v16 = (char *)&unk_1CD91C6E0;
        BOOL v17 = (char *)&unk_1CD91C6D0;
        break;
    }
    if (a10) {
      unsigned int v22 = v17;
    }
    else {
      unsigned int v22 = v16;
    }
    uint64_t v20 = &v22[4 * (a4 - 1)];
  }
  return *(unsigned int *)v20;
}

uint64_t sub_1CB87E964()
{
  return 0;
}

uint64_t sub_1CB87E96C()
{
  return 0;
}

uint64_t sub_1CB87E974(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB87E988(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB87E99C(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB87E9B0()
{
  return 423;
}

uint64_t sub_1CB87E9B8()
{
  return 1;
}

uint64_t sub_1CB87E9C0()
{
  return 2;
}

uint64_t sub_1CB87E9C8()
{
  return 0;
}

uint64_t sub_1CB87E9D0()
{
  return 1;
}

BOOL sub_1CB87E9D8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 8) == 0;
}

uint64_t sub_1CB87E9E8()
{
  return 3;
}

uint64_t sub_1CB87E9F0()
{
  return 1;
}

uint64_t sub_1CB87E9F8()
{
  return 6;
}

uint64_t sub_1CB87EA00()
{
  return 1;
}

uint64_t sub_1CB87EA08()
{
  return 0;
}

uint64_t sub_1CB87EA10(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a2, 1)+ 24);
  }
  else {
    return dword_1CD91CA90[(int)a2 - 2];
  }
}

uint64_t sub_1CB87EA74(uint64_t a1, int a2, int a3)
{
  int v3 = &off_1E66A3C50[a2 - 1];
  if (!a3) {
    int v3 = &off_1E66A3B98[a2 - 1];
  }
  return (uint64_t)*v3;
}

uint64_t sub_1CB87EAA4()
{
  return 0x2100000001;
}

uint64_t sub_1CB87EAB0()
{
  return 0;
}

uint64_t sub_1CB87EAB8(uint64_t a1, int a2)
{
  return dword_1CD91CACC[a2];
}

BOOL sub_1CB87EAC8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3[1] + 16))(a3[1], *a3);
  int v17 = *(_DWORD *)(a2 + 4);
  int v18 = *(unsigned __int8 *)(a2 + 61);
  unsigned int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a4);
  int v51 = *(_DWORD *)(a2 + 56);
  int v53 = *(_DWORD *)(a2 + 80);
  int v54 = *(_DWORD *)(a2 + 52);
  int v20 = *(unsigned __int8 *)(a2 + 2);
  uint64_t v21 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    unsigned int v56 = 0;
    BOOL result = sub_1CD3CA314(v16, v21, "SMPWriteCMode", &v56);
    if (result) {
      unsigned int v23 = v56;
    }
    else {
      unsigned int v23 = 2;
    }
  }
  else
  {
    unsigned int v55 = 0;
    BOOL result = sub_1CD3CA314(v16, v21, "SMPCMode", &v55);
    if (result) {
      unsigned int v23 = v55;
    }
    else {
      unsigned int v23 = 0;
    }
  }
  uint64_t v24 = (v17 + v18);
  if (*(unsigned char *)(v16 + 287))
  {
    uint64_t v50 = *a3;
    unsigned int v57 = 0;
    BOOL result = sub_1CD3CA314(v16, v50, "SMPSLCMode", &v57);
    if (result) {
      uint64_t v25 = v57;
    }
    else {
      uint64_t v25 = 1;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  unsigned int v26 = *(_DWORD *)(a10 + 8);
  if (v26 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v27 = a4 - 5;
  *(void *)(*(void *)a10 + 8 * v26) = v24;
  unsigned int v28 = *(_DWORD *)(a10 + 12);
  unsigned int v29 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v29;
  if (v29 >= v28) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v29) = v19;
  unsigned int v30 = *(_DWORD *)(a10 + 12);
  unsigned int v31 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v31;
  if (v31 >= v30) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v31) = v27 < 2;
  unsigned int v32 = *(_DWORD *)(a10 + 12);
  unsigned int v33 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v33;
  if (v33 >= v32) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v33) = a7;
  unsigned int v34 = *(_DWORD *)(a10 + 12);
  unsigned int v35 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v35;
  if (v35 >= v34) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v35) = v51 != -1;
  unsigned int v36 = *(_DWORD *)(a10 + 12);
  unsigned int v37 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v37;
  if (v37 >= v36) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v37) = v53 != -1;
  unsigned int v38 = *(_DWORD *)(a10 + 12);
  unsigned int v39 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v39;
  if (v39 >= v38) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v39) = v54 != -1;
  unsigned int v40 = *(_DWORD *)(a10 + 12);
  unsigned int v41 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v41;
  if (v41 >= v40) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v41) = a11 ^ 1u;
  unsigned int v42 = *(_DWORD *)(a10 + 12);
  unsigned int v43 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v43;
  if (v43 >= v42) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v43) = v20 == 0;
  unsigned int v44 = *(_DWORD *)(a10 + 12);
  unsigned int v45 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v45;
  if (v45 >= v44) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v45) = v23;
  unsigned int v46 = *(_DWORD *)(a10 + 12);
  unsigned int v47 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v47;
  if (v47 >= v46) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v47) = v25;
  unsigned int v48 = *(_DWORD *)(a10 + 12);
  unsigned int v49 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v49;
  if (v49 >= v48) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v49) = a5 != -1;
  ++*(_DWORD *)(a10 + 8);
  return result;
}

void sub_1CB87EF54(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 1445;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  uint64_t v8 = a2 | 0x100000000;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v9 = (uint64_t *)(*(void *)a5 + 16 * v7);
  *uint64_t v9 = v8;
  v9[1] = -1;
  unsigned int v10 = *(_DWORD *)(a5 + 12);
  unsigned int v11 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v11;
  if (v11 >= v10) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v12 = (uint64_t *)(*(void *)a5 + 16 * v11);
  *unsigned int v12 = v8;
  v12[1] = -1;
  unsigned int v13 = *(_DWORD *)(a5 + 12);
  unsigned int v14 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v14;
  if (v14 >= v13) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v15 = (uint64_t *)(*(void *)a5 + 16 * v14);
  uint64_t *v15 = v8;
  v15[1] = -1;
  unsigned int v16 = *(_DWORD *)(a5 + 12);
  unsigned int v17 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v17;
  if (v17 >= v16) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v17) = xmmword_1CD91C150;
  unsigned int v18 = *(_DWORD *)(a5 + 12);
  unsigned int v19 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v19;
  if (v19 >= v18) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v19) = xmmword_1CD91C140;
  unsigned int v20 = *(_DWORD *)(a5 + 12);
  unsigned int v21 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v21;
  if (v21 >= v20) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v21) = xmmword_1CD91C150;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66A4180;
}

void sub_1CB87F188(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 1445;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  uint64_t v8 = a2 | 0x100000000;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v9 = (uint64_t *)(*(void *)a5 + 16 * v7);
  *uint64_t v9 = v8;
  v9[1] = -1;
  unsigned int v10 = *(_DWORD *)(a5 + 12);
  unsigned int v11 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v11;
  if (v11 >= v10) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v12 = (uint64_t *)(*(void *)a5 + 16 * v11);
  *unsigned int v12 = v8;
  v12[1] = -1;
  unsigned int v13 = *(_DWORD *)(a5 + 12);
  unsigned int v14 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v14;
  if (v14 >= v13) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v15 = (uint64_t *)(*(void *)a5 + 16 * v14);
  uint64_t *v15 = v8;
  v15[1] = -1;
  unsigned int v16 = *(_DWORD *)(a5 + 12);
  unsigned int v17 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v17;
  if (v17 >= v16) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v17) = xmmword_1CD91C150;
  unsigned int v18 = *(_DWORD *)(a5 + 12);
  unsigned int v19 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v19;
  if (v19 >= v18) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v19) = xmmword_1CD91C140;
  unsigned int v20 = *(_DWORD *)(a5 + 12);
  unsigned int v21 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v21;
  if (v21 >= v20) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v21) = xmmword_1CD91C150;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66A4340;
}

uint64_t sub_1CB87F3BC(int a1, llvm::GlobalValue *a2, llvm::Module *this)
{
  v41[0] = "agx.driver_bindings";
  __int16 v42 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(this, v41);
  if (NamedMetadata)
  {
    uint64_t v6 = NamedMetadata;
    uint64_t v7 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v7)
    {
      uint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *(void *)(**(void **)(v6 + 48) + 8 * v8);
        uint64_t v10 = *(void *)(v9 - 8 * *(unsigned int *)(v9 + 8));
        if (v10)
        {
          if (*(llvm::GlobalValue **)(v10 + 128) == a2)
          {
            Sectiouint64_t n = llvm::GlobalValue::getSection(a2);
            if (v12 == 11
              && *(void *)Section == 0x74735F6567616D69
              && *(void *)(Section + 3) == 0x65746174735F6567)
            {
              uint64_t v14 = *(unsigned int *)(v9 + 8);
              if (v14 >= 5) {
                break;
              }
            }
          }
        }
LABEL_21:
        if (++v8 == v7) {
          return 0;
        }
      }
      uint64_t v15 = -8 * v14;
      while (1)
      {
        uint64_t v16 = *(void *)(v9 + v15 + 24);
        if (!*(unsigned char *)v16)
        {
          uint64_t v17 = *(void *)(v16 + 8);
          if (*(void *)v17 == 7)
          {
            int v18 = *(_DWORD *)(v17 + 24);
            int v19 = *(_DWORD *)(v17 + 27);
            if (v18 == 1601069926 && v19 == 1953063519) {
              break;
            }
          }
        }
        v15 += 8;
        if (v15 == -24) {
          goto LABEL_21;
        }
      }
      unsigned int v37 = (unsigned __int8 *)(v9 + v15);
      goto LABEL_50;
    }
    return 0;
  }
  v41[0] = "agx.compute_driver_bindings";
  __int16 v42 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(this, v41);
  if (!result) {
    return result;
  }
  uint64_t v22 = ***(void ***)(result + 48);
  unint64_t v23 = *(unsigned int *)(v22 + 8);
  if (!v23) {
    return 0;
  }
  uint64_t v24 = 0;
  while (1)
  {
    uint64_t v25 = *(unsigned __int8 **)(v22 - 8 * v23 + 8 * v24);
    if (!v25 || *v25 - 4 > 0x1E) {
      goto LABEL_46;
    }
    uint64_t v26 = *(void *)&v25[-8 * *((unsigned int *)v25 + 2)];
    if (v26)
    {
      if (*(llvm::GlobalValue **)(v26 + 128) == a2)
      {
        unsigned int v27 = llvm::GlobalValue::getSection(a2);
        if (v28 == 11 && *(void *)v27 == 0x74735F6567616D69 && *(void *)(v27 + 3) == 0x65746174735F6567)
        {
          uint64_t v30 = *((unsigned int *)v25 + 2);
          if (v30 >= 5) {
            break;
          }
        }
      }
    }
LABEL_45:
    unint64_t v23 = *(unsigned int *)(v22 + 8);
LABEL_46:
    if (++v24 >= v23) {
      return 0;
    }
  }
  uint64_t v31 = -8 * v30;
  while (1)
  {
    uint64_t v32 = *(void *)&v25[v31 + 24];
    if (!*(unsigned char *)v32)
    {
      uint64_t v33 = *(void *)(v32 + 8);
      if (*(void *)v33 == 7)
      {
        int v34 = *(_DWORD *)(v33 + 24);
        int v35 = *(_DWORD *)(v33 + 27);
        if (v34 == 1601069926 && v35 == 1953063519) {
          break;
        }
      }
    }
    v31 += 8;
    if (v31 == -24) {
      goto LABEL_45;
    }
  }
  unsigned int v37 = &v25[v31];
LABEL_50:
  uint64_t v38 = *(void *)(*((void *)v37 + 4) + 128);
  if (*(unsigned char *)(v38 + 16) == 16) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  unsigned int v40 = (void *)(v39 + 24);
  if (*(_DWORD *)(v39 + 32) >= 0x41u) {
    unsigned int v40 = (void *)*v40;
  }
  return *v40 == 0;
}

uint64_t sub_1CB87F688()
{
  return 1;
}

uint64_t sub_1CB87F690()
{
  return 0;
}

uint64_t sub_1CB87F698()
{
  return 1;
}

uint64_t sub_1CB87F6A0()
{
  return 0;
}

uint64_t sub_1CB87F6A8()
{
  return 1;
}

uint64_t sub_1CB87F6B0()
{
  return 395;
}

uint64_t sub_1CB87F6B8()
{
  return 0;
}

uint64_t sub_1CB87F6C0()
{
  return 1;
}

uint64_t sub_1CB87F6C8()
{
  return 1;
}

void sub_1CB87F6D0(void *a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v84 = a2[16];
  if (v84 <= 0x1B) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = a2;
  }
  unint64_t v81 = v8;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v9 = *(void *)a2;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
    uint64_t v10 = **(void **)(v10 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
  if (v9) {
    unsigned int v12 = *(_DWORD *)(v9 + 32);
  }
  else {
    unsigned int v12 = 1;
  }
  if (v12 >= a4) {
    unsigned int v12 = a4;
  }
  int v13 = PrimitiveSizeInBits >> 5;
  if (PrimitiveSizeInBits <= 0x20) {
    int v13 = 1;
  }
  uint64_t v14 = v12 * v13;
  if (PrimitiveSizeInBits >= 0x20) {
    uint64_t v15 = 32;
  }
  else {
    uint64_t v15 = PrimitiveSizeInBits;
  }
  uint64_t v85 = v15;
  uint64_t v82 = (llvm::ConstantDataSequential *)a2;
  int v83 = (*(uint64_t (**)(void *, unsigned __int8 *))(*a1 + 296))(a1, a2);
  uint64_t v16 = a1[4];
  uint64_t v17 = *(void *)(v16 + 40);
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(v16 + 16) + 176))(*(void *)(v16 + 16));
  if (v14)
  {
    uint64_t v19 = 0;
    unsigned int v80 = *(_DWORD *)(*(void *)(v18 + 264)
                    + 24
                    * (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v17 + 24) + 16 * (v83 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                           + 24)
                     + *(_DWORD *)(v18 + 272) * ((*(void *)(v18 + 248) - *(void *)(v18 + 240)) >> 3)))
        / v85;
    do
    {
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 336))(a1, v85);
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v17, "", 0);
      *(void *)(*(void *)(v17 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v20 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v23 = *(void *)(v17 + 8);
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
      }
      if (v84 - 11 <= 1)
      {
        uint64_t v24 = a1[2];
        uint64_t v25 = (unint64_t *)a1[3];
        int v86 = 0;
        uint64_t v87 = 0;
        uint64_t v26 = *(llvm::MachineFunction **)(v24 + 32);
        unsigned int v27 = llvm::MachineFunction::CreateMachineInstr(v26, *(void *)(a1[6] + 8) + 480, &v87, 0);
        if (v87)
        {
          int v72 = *v87;
          if ((v72 - 4) > 0x1E)
          {
            if ((v72 - 3) >= 0xFFFFFFFE) {
              int v78 = v87;
            }
            else {
              int v78 = 0;
            }
            if ((v72 - 3) < 0xFFFFFFFE)
            {
              if (v72 == 3) {
                *((void *)v87 + 1) = 0;
              }
              goto LABEL_28;
            }
            unint64_t v74 = (unint64_t)(v78 + 8);
          }
          else
          {
            if ((v87[1] & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
              goto LABEL_28;
            }
            uint64_t v73 = *((void *)v87 + 2);
            if ((v73 & 4) == 0) {
              goto LABEL_28;
            }
            unint64_t v74 = v73 & 0xFFFFFFFFFFFFFFF8;
            if (!v74) {
              goto LABEL_28;
            }
          }
          *(void *)&long long v88 = &v87;
          sub_1CC5FA668(v74 + 16, &v88);
        }
LABEL_28:
        uint64_t v28 = *(void *)(v24 + 40);
        *((void *)v27 + 3) = v28;
        uint64_t v29 = *(void *)(v28 + 32);
        uint64_t v30 = *((unsigned int *)v27 + 10);
        if (v30)
        {
          uint64_t v57 = *((void *)v27 + 4);
          uint64_t v58 = *(void *)(v29 + 40);
          uint64_t v59 = 32 * v30;
          do
          {
            if (!*(unsigned char *)v57)
            {
              uint64_t v60 = *(unsigned int *)(v57 + 4);
              if ((int)v60 >= 0) {
                uint64_t v61 = (uint64_t *)(*(void *)(v58 + 272) + 8 * v60);
              }
              else {
                uint64_t v61 = (uint64_t *)(*(void *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
              }
              uint64_t v62 = *v61;
              if (*v61)
              {
                uint64_t v63 = *(void *)(v62 + 16);
                *(void *)(v62 + 16) = v57;
                *(void *)(v57 + 16) = v63;
                if (*(unsigned char *)(v57 + 3))
                {
                  *(void *)(v57 + 24) = v62;
                }
                else
                {
                  *(void *)(v57 + 24) = 0;
                  uint64_t v61 = (uint64_t *)(v63 + 24);
                }
              }
              else
              {
                *(void *)(v57 + 16) = v57;
                *(void *)(v57 + 24) = 0;
              }
              uint64_t *v61 = v57;
            }
            v57 += 32;
            v59 -= 32;
          }
          while (v59);
        }
        uint64_t v31 = *(void *)(v29 + 728);
        if (v31) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v31 + 24))(v31, v27);
        }
        unint64_t v32 = *v25 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unsigned int v27 = v32 | *(void *)v27 & 7;
        *((void *)v27 + 1) = v25;
        *(void *)(v32 + 8) = v27;
        *uint64_t v25 = *v25 & 7 | (unint64_t)v27;
        *((void *)&v88 + 1) = 0;
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        LODWORD(v88) = 0x1000000;
        DWORD1(v88) = IncompleteVirtualRegister;
        uint64_t v33 = v27;
        int v34 = v26;
        goto LABEL_51;
      }
      if (v84 <= 0x14)
      {
        int v35 = *((unsigned __int8 *)v82 + 16);
        if (v35 == 10)
        {
          ElementAsConstant = (llvm::Type *)*((void *)v82 + 4 * v19 + -4 * (*((_DWORD *)v82 + 5) & 0x7FFFFFF));
        }
        else
        {
          if ((v35 & 0xFE) == 0xE)
          {
            ElementAsConstant = (llvm::Type *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)v82, v19);
            int v35 = *((unsigned __int8 *)v82 + 16);
          }
          else
          {
            ElementAsConstant = 0;
          }
          if (v35 == 13)
          {
            int v53 = *(llvm::ConstantFP ***)v82;
            if (*(_DWORD *)(*(void *)v82 + 8) == 17
              || (*(_DWORD *)(*(void *)v82 + 8) & 0xFE) == 18)
            {
              uint64_t v71 = v53 + 3;
            }
            else
            {
              uint64_t v71 = (llvm::Constant **)((char *)v53[2] + 8 * v19);
            }
            ElementAsConstant = llvm::Constant::getNullValue(*v71, ElementAsConstant, v21);
          }
        }
        LODWORD(v88) = 0;
        (*(void (**)(void *, llvm::Type *, long long *, void))(*a1 + 144))(a1, ElementAsConstant, &v88, 0);
        if (v85 == 16) {
          int v55 = (*(uint64_t (**)(void *, void))(*a1 + 56))(a1, (unsigned __int16)v88);
        }
        else {
          int v55 = (*(uint64_t (**)(void *, void))(*a1 + 64))(a1, v88);
        }
        int IncompleteVirtualRegister = v55;
        goto LABEL_79;
      }
      if (v81)
      {
        unsigned int v37 = (unsigned __int8 *)*((void *)v81 + 6);
        int v86 = v37;
        if (v37)
        {
          llvm::MetadataTracking::track((uint64_t)&v86, v37, 2);
          unsigned int v37 = v86;
        }
      }
      else
      {
        unsigned int v37 = 0;
        int v86 = 0;
      }
      uint64_t v38 = a1[2];
      uint64_t v39 = (unint64_t *)a1[3];
      uint64_t v40 = *(void *)(a1[6] + 8);
      unsigned int v41 = *(llvm::MachineFunction **)(v38 + 32);
      uint64_t v87 = v37;
      if (v37) {
        llvm::MetadataTracking::track((uint64_t)&v87, v37, 2);
      }
      __int16 v42 = llvm::MachineFunction::CreateMachineInstr(v41, v40 + 912, &v87, 0);
      if (v87)
      {
        int v75 = *v87;
        if ((v75 - 4) > 0x1E)
        {
          if ((v75 - 3) >= 0xFFFFFFFE) {
            int v79 = v87;
          }
          else {
            int v79 = 0;
          }
          if ((v75 - 3) < 0xFFFFFFFE)
          {
            if (v75 == 3) {
              *((void *)v87 + 1) = 0;
            }
            goto LABEL_44;
          }
          unint64_t v77 = (unint64_t)(v79 + 8);
        }
        else
        {
          if ((v87[1] & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
            goto LABEL_44;
          }
          uint64_t v76 = *((void *)v87 + 2);
          if ((v76 & 4) == 0) {
            goto LABEL_44;
          }
          unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFF8;
          if (!v77) {
            goto LABEL_44;
          }
        }
        *(void *)&long long v88 = &v87;
        sub_1CC5FA668(v77 + 16, &v88);
      }
LABEL_44:
      uint64_t v43 = *(void *)(v38 + 40);
      *((void *)v42 + 3) = v43;
      uint64_t v44 = *(void *)(v43 + 32);
      uint64_t v45 = *((unsigned int *)v42 + 10);
      if (v45)
      {
        uint64_t v64 = *((void *)v42 + 4);
        uint64_t v65 = *(void *)(v44 + 40);
        uint64_t v66 = 32 * v45;
        do
        {
          if (!*(unsigned char *)v64)
          {
            uint64_t v67 = *(unsigned int *)(v64 + 4);
            if ((int)v67 >= 0) {
              int v68 = (uint64_t *)(*(void *)(v65 + 272) + 8 * v67);
            }
            else {
              int v68 = (uint64_t *)(*(void *)(v65 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
            }
            uint64_t v69 = *v68;
            if (*v68)
            {
              uint64_t v70 = *(void *)(v69 + 16);
              *(void *)(v69 + 16) = v64;
              *(void *)(v64 + 16) = v70;
              if (*(unsigned char *)(v64 + 3))
              {
                *(void *)(v64 + 24) = v69;
              }
              else
              {
                *(void *)(v64 + 24) = 0;
                int v68 = (uint64_t *)(v70 + 24);
              }
            }
            else
            {
              *(void *)(v64 + 16) = v64;
              *(void *)(v64 + 24) = 0;
            }
            *int v68 = v64;
          }
          v64 += 32;
          v66 -= 32;
        }
        while (v66);
      }
      uint64_t v46 = *(void *)(v44 + 728);
      if (v46) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v46 + 24))(v46, v42);
      }
      unint64_t v47 = *v39 & 0xFFFFFFFFFFFFFFF8;
      *(void *)__int16 v42 = v47 | *(void *)v42 & 7;
      *((void *)v42 + 1) = v39;
      *(void *)(v47 + 8) = v42;
      *uint64_t v39 = *v39 & 7 | (unint64_t)v42;
      *((void *)&v88 + 1) = 0;
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      LODWORD(v88) = 0x1000000;
      DWORD1(v88) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v42, v41, (const llvm::MachineOperand *)&v88);
      if (v80 < 2) {
        __int16 v48 = 0;
      }
      else {
        __int16 v48 = (*(uint64_t (**)(void *, BOOL, void))(*a1 + 312))(a1, v85 == 16, v19 % v80);
      }
      HIDWORD(v88) = 0;
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      LODWORD(v88) = (v48 & 0xFFF) << 8;
      *(void *)((char *)&v88 + 4) = v19 / v80 + v83;
      uint64_t v33 = v42;
      int v34 = v41;
LABEL_51:
      llvm::MachineInstr::addOperand(v33, v34, (const llvm::MachineOperand *)&v88);
      if (v86)
      {
        int v49 = *v86;
        if ((v49 - 4) > 0x1E)
        {
          if ((v49 - 3) >= 0xFFFFFFFE) {
            uint64_t v52 = v86;
          }
          else {
            uint64_t v52 = 0;
          }
          if ((v49 - 3) < 0xFFFFFFFE)
          {
            if (v49 == 3) {
              *((void *)v86 + 1) = 0;
            }
            goto LABEL_79;
          }
          unint64_t v51 = (unint64_t)(v52 + 8);
        }
        else
        {
          if ((v86[1] & 0x7F) != 2 && !*((_DWORD *)v86 + 3)) {
            goto LABEL_79;
          }
          uint64_t v50 = *((void *)v86 + 2);
          if ((v50 & 4) == 0) {
            goto LABEL_79;
          }
          unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
          if (!v51) {
            goto LABEL_79;
          }
        }
        *(void *)&long long v88 = &v86;
        sub_1CC5FA668(v51 + 16, &v88);
      }
LABEL_79:
      unint64_t v56 = *(unsigned int *)(a3 + 8);
      if (v56 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a3 + 4 * v56) = IncompleteVirtualRegister;
      ++*(_DWORD *)(a3 + 8);
      ++v19;
    }
    while (v19 != v14);
  }
}

uint64_t sub_1CB87FF70(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4)
{
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v6 == 16)
  {
    uint64_t v7 = (void *)(a2 + 24);
    if (*(_DWORD *)(a2 + 32) >= 0x41u) {
      uint64_t v7 = (void *)*v7;
    }
    *a3 = *v7;
    if (a4) {
      *a4 = 0;
    }
    return 1;
  }
  uint64_t result = 0;
  if (a2 && v6 == 17)
  {
    uint64_t v9 = (llvm::detail::DoubleAPFloat *)(a2 + 32);
    uint64_t v10 = *(void **)(a2 + 32);
    if (v10 == &unk_1CFB2E344) {
      uint64_t v11 = *(void *)(a2 + 40);
    }
    else {
      uint64_t v11 = a2 + 24;
    }
    if ((*(unsigned char *)(v11 + 28) & 7) != 3)
    {
      if ((*(unsigned __int8 *)(*(void *)a2 + 8) | 2) != 2) {
        return 0;
      }
      if (v10 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v9, (llvm::APInt *)&v15);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v9, (uint64_t)&v15);
      }
      unsigned int v12 = v16;
      int v13 = v15;
      uint64_t v14 = &v15;
      if (v16 >= 0x41) {
        uint64_t v14 = v15;
      }
      *a3 = *v14;
      if (a4) {
        *a4 = 1;
      }
      if (v12 >= 0x41 && v13) {
        MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
      }
      return 1;
    }
    *a3 = 0;
    uint64_t result = 1;
    if (a4) {
      *a4 = 1;
    }
  }
  return result;
}

uint64_t sub_1CB8800B0(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4)
{
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v6 == 16)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 32);
    if (v7 > 0x40) {
      uint64_t v8 = **(void **)(a2 + 24);
    }
    else {
      uint64_t v8 = (uint64_t)(*(void *)(a2 + 24) << -(char)v7) >> -(char)v7;
    }
    *a3 = v8;
    if (a4) {
      *a4 = 0;
    }
    return 1;
  }
  uint64_t result = 0;
  if (a2 && v6 == 17)
  {
    uint64_t v10 = (llvm::detail::DoubleAPFloat *)(a2 + 32);
    uint64_t v11 = *(void **)(a2 + 32);
    if (v11 == &unk_1CFB2E344) {
      uint64_t v12 = *(void *)(a2 + 40);
    }
    else {
      uint64_t v12 = a2 + 24;
    }
    if ((*(unsigned char *)(v12 + 28) & 7) != 3)
    {
      if ((*(unsigned __int8 *)(*(void *)a2 + 8) | 2) != 2) {
        return 0;
      }
      if (v11 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v10, (llvm::APInt *)&v16);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v10, (uint64_t)&v16);
      }
      unsigned int v13 = v17;
      uint64_t v14 = v16;
      if (v17 > 0x40) {
        uint64_t v15 = *v16;
      }
      else {
        uint64_t v15 = (uint64_t)((void)v16 << -(char)v17) >> -(char)v17;
      }
      *a3 = v15;
      if (a4) {
        *a4 = 1;
      }
      if (v13 >= 0x41 && v14) {
        MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
      }
      return 1;
    }
    *a3 = 0;
    uint64_t result = 1;
    if (a4) {
      *a4 = 1;
    }
  }
  return result;
}

uint64_t sub_1CB880210(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v10 = (void **)result;
  v38[65] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(unsigned char *)(a2 + 61)) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = *(unsigned char *)(a2 + 60) == 0;
    }
    if (v11 && *(_DWORD *)(a2 + 48) == -1)
    {
      unsigned int v13 = *(_DWORD *)(a2 + 4);
      if (!v13)
      {
LABEL_22:
        int v20 = 8;
LABEL_23:
        *a5 = v20;
        return result;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 8) + 224))(*(void *)(result + 8), a2);
      unsigned int v13 = result >> 1;
      if (!(result >> 1)) {
        goto LABEL_22;
      }
    }
    int v18 = 0;
    do
    {
      uint64_t v19 = ((uint64_t (*)(void **, uint64_t, void))(*v10)[2])(v10, a4, (v18 + *(_DWORD *)(a2 + 72)));
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))(*v10)[10])(v10, v19, a6, 0xFFFFFFFFLL);
      ++v18;
    }
    while (v13 != v18);
    goto LABEL_22;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 8) + 168))(*(void *)(result + 8));
  if (*(_DWORD *)(a2 + 56) == -1) {
    int v14 = 0;
  }
  else {
    int v14 = result;
  }
  if (v14 == 1)
  {
    uint64_t v15 = ((uint64_t (*)(void **, uint64_t))(*v10)[2])(v10, a4);
    v38[0] = 1;
    for (uint64_t i = 1; i != 65; ++i)
      LODWORD(v38[i]) = 0x7FFFFFFF;
    uint64_t result = ((uint64_t (*)(void **, uint64_t, void *, void))(*v10)[27])(v10, v15, v38, 0);
    int v17 = result;
    if ((v38[0] & 1) == 0) {
      uint64_t result = MEMORY[0x1D25D9CD0](v38[1], 4);
    }
  }
  else
  {
    int v17 = 1;
  }
  unsigned int v21 = *(_DWORD *)(a2 + 76);
  unsigned int v22 = *(_DWORD *)(a2 + 68);
  if (v21 != -1 || v22 != -1)
  {
LABEL_29:
    if (v22 == -1) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = v22;
    }
    uint64_t v25 = ((uint64_t (*)(void **, uint64_t, uint64_t))(*v10)[2])(v10, a4, v24);
    if (*(_DWORD *)(a2 + 92) != -1 && (*(unsigned int (**)(void *))(*v10[1] + 328))(v10[1]))
    {
      LODWORD(v38[0]) = -1;
      unsigned __int8 v26 = ((uint64_t (*)(void **, uint64_t, void *, void))(*v10)[18])(v10, v25, v38, 0);
      if ((v26 & (LODWORD(v38[0]) < 0xFF)) != 0) {
        int v27 = 7;
      }
      else {
        int v27 = 6;
      }
      *a5 = v27;
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[21])(v10, v25);
      goto LABEL_81;
    }
    if ((((uint64_t (*)(void **, uint64_t))(*v10)[30])(v10, v25) & 1) != 0
      || ((unsigned int (*)(void **, uint64_t))(*v10)[28])(v10, v25))
    {
      if ((*(unsigned int (**)(void *))(*v10[1] + 176))(v10[1])) {
        goto LABEL_49;
      }
    }
    else if ((((uint64_t (*)(void **, uint64_t))(*v10)[31])(v10, v25) & 1) == 0 {
           && !((unsigned int (*)(void **, uint64_t))(*v10)[29])(v10, v25)
    }
           || (*(unsigned int (**)(void *))(*v10[1] + 176))(v10[1]) != 2)
    {
LABEL_49:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const llvm::Twine *)1);
    }
    LODWORD(v38[0]) = -1;
    char v37 = 0;
    uint64_t result = ((uint64_t (*)(void **, uint64_t, void *, char *))(*v10)[18])(v10, v25, v38, &v37);
    int v31 = result ^ 1;
    if (LODWORD(v38[0])) {
      int v31 = 1;
    }
    if (v22 == -1) {
      int v32 = v14;
    }
    else {
      int v32 = 1;
    }
    int v33 = v31 | v32;
    if (((v31 | v32) & v17) != 1) {
      goto LABEL_73;
    }
    if (result)
    {
      uint64_t result = sub_1CB8816A4((uint64_t)v10, LODWORD(v38[0]));
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[22])(v10, v25);
      if (result == -1)
      {
LABEL_73:
        if (v33)
        {
          uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[21])(v10, v25);
          unsigned int v35 = *(_DWORD *)(a6 + 8);
          if (v35 >= *(_DWORD *)(a6 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a6 + 4 * v35) = result;
          ++*(_DWORD *)(a6 + 8);
          if (v22 == -1) {
            int v20 = 5;
          }
          else {
            int v20 = 6;
          }
          goto LABEL_23;
        }
        goto LABEL_77;
      }
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v10[1] + 56))(v10[1], result);
    }
    if (result != -1)
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[20])(v10, result);
      unsigned int v34 = *(_DWORD *)(a6 + 8);
      if (v34 >= *(_DWORD *)(a6 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a6 + 4 * v34) = result;
      ++*(_DWORD *)(a6 + 8);
      if (v22 == -1) {
        int v20 = 1;
      }
      else {
        int v20 = 2;
      }
      goto LABEL_23;
    }
    goto LABEL_73;
  }
  if (*(unsigned char *)(a2 + 62))
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v10[1] + 384))(v10[1]);
    if (((v14 | result ^ 1) & 1) == 0)
    {
      uint64_t v28 = sub_1CB8816A4((uint64_t)v10, 0);
      int v29 = 2;
LABEL_51:
      *a5 = v29;
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[20])(v10, v28);
      goto LABEL_81;
    }
  }
  if ((v14 & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 92) == -1
      || (uint64_t result = (*(uint64_t (**)(void *))(*v10[1] + 328))(v10[1]), (result & 1) == 0))
    {
LABEL_77:
      *a5 = 0;
      return result;
    }
  }
  if (*(_DWORD *)(a2 + 92) == -1 || !(*(unsigned int (**)(void *))(*v10[1] + 328))(v10[1]))
  {
    if (!v14)
    {
      unsigned int v22 = *(_DWORD *)(a2 + 68);
      unsigned int v21 = *(_DWORD *)(a2 + 76);
      goto LABEL_29;
    }
    if (!v17 || (uint64_t v30 = sub_1CB8816A4((uint64_t)v10, 0), v30 == -1))
    {
      *a5 = 5;
      uint64_t result = ((uint64_t (*)(void **, void))(*v10)[8])(v10, 0);
      goto LABEL_81;
    }
    uint64_t v28 = v30;
    int v29 = 1;
    goto LABEL_51;
  }
  *a5 = 7;
  uint64_t result = ((uint64_t (*)(void **, void))(*v10)[9])(v10, 0);
LABEL_81:
  unsigned int v36 = *(_DWORD *)(a6 + 8);
  if (v36 >= *(_DWORD *)(a6 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a6 + 4 * v36) = result;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

uint64_t sub_1CB880A84(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a2 + 64);
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1) {
    int v10 = 1;
  }
  else {
    int v10 = result;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 80);
  if (v10 != 1 || v11 != -1)
  {
    unsigned int v13 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[2];
    if (v11 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if (v11 == -1) {
        uint64_t v11 = *(unsigned int *)(a2 + 64);
      }
      uint64_t v15 = v13(a1, a3, v11);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v15);
    }
    else
    {
      uint64_t v16 = ((uint64_t (*)(void **, uint64_t))v13)(a1, a3);
      uint64_t v17 = ((uint64_t (*)(void **, uint64_t, void))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      int v18 = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v17);
      int v19 = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v16);
      v21[0] = v18;
      v21[1] = v19;
      uint64_t result = ((uint64_t (*)(void **, uint64_t, _DWORD *, uint64_t))(*a1)[12])(a1, a3, v21, 2);
    }
    unsigned int v20 = *(_DWORD *)(a4 + 8);
    if (v20 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a4 + 4 * v20) = result;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

uint64_t sub_1CB880CC8(void **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 240))(a1[1]);
  if (result)
  {
    if (a2[12] != -1)
    {
      uint64_t v18 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v18);
      unsigned int v19 = *(_DWORD *)(a4 + 8);
      if (v19 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v19) = result;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[14] != -1)
    {
      uint64_t v20 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v20);
      unsigned int v21 = *(_DWORD *)(a4 + 8);
      if (v21 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v21) = result;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[13] != -1)
    {
      uint64_t v22 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v22);
      unsigned int v23 = *(_DWORD *)(a4 + 8);
      if (v23 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v23) = result;
      ++*(_DWORD *)(a4 + 8);
    }
    return result;
  }
  if (a6 <= 8 && ((1 << a6) & 0x160) != 0)
  {
    uint64_t v24 = *(unsigned int *)(a5 + 8);
    if (v24)
    {
      uint64_t v25 = *(_DWORD **)a5;
      unsigned int v26 = *(_DWORD *)(a4 + 8);
      uint64_t v27 = 4 * v24;
      do
      {
        if (v26 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v26) = *v25;
        unsigned int v26 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v26;
        ++v25;
        v27 -= 4;
      }
      while (v27);
    }
    *(_DWORD *)(a5 + 8) = 0;
  }
  uint64_t v28 = a9;
  uint64_t v29 = *(unsigned int *)(a8 + 8);
  if (v29)
  {
    uint64_t v30 = *(_DWORD **)a8;
    unsigned int v31 = *(_DWORD *)(a4 + 8);
    uint64_t v32 = 4 * v29;
    do
    {
      if (v31 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v31) = *v30;
      unsigned int v31 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v31;
      ++v30;
      v32 -= 4;
    }
    while (v32);
  }
  *(_DWORD *)(a8 + 8) = 0;
  uint64_t v51 = 0;
  if (a2[20] != -1)
  {
    uint64_t v50 = a9;
    uint64_t v33 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
    uint64_t result = ((uint64_t (*)(void **, uint64_t, char *, void))(*a1)[18])(a1, v33, (char *)&v51 + 4, 0);
    int v34 = result;
    if (result)
    {
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v33);
      uint64_t v35 = result;
    }
    *(_DWORD *)(a7 + 8) = 0;
    if (a2[13] == -1)
    {
      uint64_t v38 = 0;
      int v37 = 1;
      goto LABEL_43;
    }
    unsigned int v49 = v35;
LABEL_34:
    uint64_t v36 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
    uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t *, void))(*a1)[18])(a1, v36, &v51, 0);
    int v37 = result;
    if (result)
    {
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v36);
      uint64_t v38 = result;
    }
    BOOL v39 = v34 == v37 || a2[20] == -1;
    uint64_t v35 = v49;
    if (!v39)
    {
      uint64_t v38 = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v36);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v33);
      uint64_t v35 = result;
      goto LABEL_48;
    }
LABEL_43:
    if (v34) {
      BOOL v40 = v37 == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (!v40)
    {
      uint64_t result = ((uint64_t (*)(void **, void))(*a1)[8])(a1, (HIDWORD(v51) | (v51 << 16)));
LABEL_54:
      unsigned int v43 = *(_DWORD *)(a4 + 8);
      if (v43 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v43) = result;
      ++*(_DWORD *)(a4 + 8);
      uint64_t v28 = v50;
      goto LABEL_56;
    }
LABEL_48:
    int v41 = a2[20];
    int v42 = a2[13];
    if (v41 == -1 || v42 != -1)
    {
      if (v41 != -1 || v42 == -1)
      {
        uint64_t v28 = v50;
        if (v41 != -1 && v42 != -1)
        {
          v52[0] = v38;
          v52[1] = v35;
          uint64_t result = ((uint64_t (*)(void **, uint64_t, _DWORD *, uint64_t))(*a1)[12])(a1, a3, v52, 2);
          unsigned int v48 = *(_DWORD *)(a4 + 8);
          if (v48 >= *(_DWORD *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v48) = result;
          ++*(_DWORD *)(a4 + 8);
          uint64_t v28 = v50;
        }
        goto LABEL_56;
      }
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[23])(a1, v38);
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[24])(a1, v35);
    }
    goto LABEL_54;
  }
  if (a2[13] != -1)
  {
    uint64_t v50 = a9;
    unsigned int v49 = 0;
    uint64_t v33 = 0;
    int v34 = 1;
    goto LABEL_34;
  }
LABEL_56:
  uint64_t v44 = *(unsigned int *)(v28 + 8);
  if (v44)
  {
    uint64_t v45 = *(_DWORD **)v28;
    unsigned int v46 = *(_DWORD *)(a4 + 8);
    uint64_t v47 = 4 * v44;
    do
    {
      if (v46 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v46) = *v45;
      unsigned int v46 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v46;
      ++v45;
      v47 -= 4;
    }
    while (v47);
  }
  *(_DWORD *)(v28 + 8) = 0;
  return result;
}

uint64_t sub_1CB881490(uint64_t a1, _UNKNOWN ***a2, _DWORD *a3)
{
  *a3 = 16;
  if (a2 == &off_1E66A4180 || a2 == &off_1E66A41C8) {
    return 1;
  }
  if (a2 == &off_1E66A4690) {
    return 3;
  }
  *a3 = 32;
  if (a2 == &off_1E66A43C8 || a2 == &off_1E66A4340) {
    return 1;
  }
  if (a2 == &off_1E66A4990) {
    return 2;
  }
  if (a2 == &off_1E66A4F00) {
    return 3;
  }
  if (a2 == &off_1E66A5470) {
    return 4;
  }
  if (a2 == &off_1E66A59E0) {
    return 5;
  }
  if (a2 == &off_1E66A5F50) {
    return 6;
  }
  if (a2 == &off_1E66A64C0) {
    return 7;
  }
  if (a2 == &off_1E66A6A30) {
    return 8;
  }
  if (a2 == &off_1E66A6CA0) {
    return 9;
  }
  if (a2 == &off_1E66A6D68) {
    return 10;
  }
  if (a2 == &off_1E66A6E30) {
    return 11;
  }
  if (a2 == &off_1E66A6EF8) {
    return 12;
  }
  if (a2 == &off_1E66A6FC0) {
    return 13;
  }
  if (a2 == &off_1E66A7088) {
    return 14;
  }
  if (a2 == &off_1E66A7150) {
    return 15;
  }
  if (a2 == &off_1E66A7218) {
    return 16;
  }
  if (a2 == &off_1E66A4548) {
    return 1;
  }
  if (a2 == &off_1E66A4B18) {
    return 2;
  }
  if (a2 == &off_1E66A5088) {
    return 3;
  }
  if (a2 == &off_1E66A55F8) {
    return 4;
  }
  else {
    return 6;
  }
}

uint64_t sub_1CB8816A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(*(void *)(v2 + 8) + 544) == 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *(void *)(v2 + 344);
  uint64_t v7 = a2;
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 224))(v6, a2) & 0xFF00000000) == 0)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 376))(v6, 1);
    if (v8 == -1) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 232))(v6, v7, v8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 328))(v6, a2);
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 56);

  return v9();
}

void sub_1CB881830()
{
}

uint64_t sub_1CB881844()
{
  return 24;
}

uint64_t sub_1CB88184C()
{
  return 8;
}

uint64_t sub_1CB881854()
{
  return 1;
}

uint64_t sub_1CB88185C()
{
  return 0;
}

uint64_t sub_1CB881864(uint64_t a1, _DWORD *a2)
{
  *a2 = 2;
  return 1;
}

uint64_t sub_1CB881874(int8x8_t a1, uint64_t a2, int a3, int a4, __int32 a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, _DWORD *a13, uint64_t a14, int a15, __int32 a16)
{
  unsigned int v16 = *a13 & 0xFFFFFFFE;
  if (a5 == -1)
  {
    unsigned int v19 = (unsigned int *)&unk_1CD91CA18;
    if (a12) {
      unsigned int v19 = (unsigned int *)&unk_1CD91C9F8;
    }
    uint64_t v20 = (unsigned int *)&unk_1CD91CA58;
    if (a12) {
      uint64_t v20 = (unsigned int *)&unk_1CD91CA38;
    }
    unsigned int v21 = (unsigned int *)&unk_1CD91C9D8;
    if (a12) {
      unsigned int v21 = (unsigned int *)&unk_1CD91C9B8;
    }
    if ((a3 - 5) >= 2) {
      uint64_t v20 = v21;
    }
    if ((a3 - 1) >= 2) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v22 = v19;
    }
    return v22[4 * (v16 == 2) + a6 - 1];
  }
  else
  {
    switch(a3)
    {
      case 1:
      case 2:
        uint64_t v17 = (unsigned int *)&unk_1CD91C7F8;
        uint64_t v18 = (unsigned int *)&unk_1CD91C7B8;
        break;
      case 3:
      case 4:
      case 7:
LABEL_188:
        __break(1u);
        JUMPOUT(0x1CB881F18);
      case 5:
      case 6:
        uint64_t v17 = (unsigned int *)&unk_1CD91C878;
        uint64_t v18 = (unsigned int *)&unk_1CD91C838;
        break;
      case 8:
        if (a4 == 2)
        {
          uint64_t v17 = (unsigned int *)&unk_1CD91C8F8;
          uint64_t v18 = (unsigned int *)&unk_1CD91C8B8;
        }
        else
        {
          if (a4 == 1) {
            llvm::report_fatal_error((llvm *)"grad_1d not supported on architecture!", (const llvm::Twine *)1);
          }
          uint64_t v17 = (unsigned int *)&unk_1CD91C978;
          uint64_t v18 = (unsigned int *)&unk_1CD91C938;
        }
        break;
      default:
        uint64_t v17 = (unsigned int *)&unk_1CD91C778;
        uint64_t v18 = (unsigned int *)&unk_1CD91C738;
        break;
    }
    if (a12) {
      uint64_t v24 = v18;
    }
    else {
      uint64_t v24 = v17;
    }
    BOOL v25 = v16 == 2;
    a1.i32[0] = a16;
    uint8x8_t v26 = (uint8x8_t)vcnt_s8(a1);
    v26.i16[0] = vaddlv_u8(v26);
    __int32 v27 = v26.i32[0];
    if (v26.i32[0] > 4u) {
      __int32 v27 = a5;
    }
    uint64_t v28 = v24[8 * v25 + 4 * (*a13 & 1) + (v27 - 1)];
    uint64_t result = v28;
    if (a10)
    {
      uint64_t result = 12501;
      switch((int)v28)
      {
        case 12497:
          return 12498;
        case 12498:
        case 12500:
        case 12501:
        case 12503:
        case 12505:
        case 12508:
        case 12510:
        case 12511:
        case 12513:
        case 12515:
        case 12518:
        case 12520:
        case 12521:
        case 12523:
        case 12525:
        case 12528:
        case 12530:
        case 12531:
        case 12533:
        case 12535:
        case 12536:
        case 12537:
        case 12538:
        case 12539:
        case 12542:
        case 12544:
        case 12545:
        case 12547:
        case 12549:
        case 12552:
        case 12554:
        case 12555:
        case 12557:
        case 12559:
        case 12562:
        case 12564:
        case 12565:
        case 12567:
        case 12569:
        case 12572:
        case 12574:
        case 12575:
        case 12577:
        case 12579:
        case 12580:
        case 12581:
        case 12582:
        case 12583:
        case 12586:
        case 12588:
        case 12589:
        case 12591:
        case 12593:
        case 12596:
        case 12598:
        case 12599:
        case 12601:
        case 12603:
        case 12606:
        case 12608:
        case 12609:
        case 12611:
        case 12613:
        case 12616:
        case 12618:
        case 12619:
        case 12621:
        case 12623:
        case 12624:
        case 12625:
        case 12626:
        case 12627:
        case 12630:
        case 12632:
        case 12633:
        case 12635:
        case 12637:
        case 12640:
        case 12642:
        case 12643:
        case 12645:
        case 12647:
        case 12650:
        case 12652:
        case 12653:
        case 12655:
        case 12657:
        case 12660:
        case 12662:
        case 12663:
        case 12665:
        case 12667:
        case 12668:
        case 12669:
        case 12670:
        case 12671:
        case 12672:
        case 12673:
        case 12674:
        case 12675:
        case 12676:
        case 12677:
        case 12678:
        case 12679:
        case 12680:
        case 12681:
        case 12682:
        case 12683:
        case 12684:
        case 12685:
        case 12686:
        case 12687:
        case 12688:
        case 12689:
        case 12690:
        case 12691:
        case 12694:
        case 12696:
        case 12697:
        case 12699:
        case 12701:
        case 12704:
        case 12706:
        case 12707:
        case 12709:
        case 12711:
        case 12714:
        case 12716:
        case 12717:
        case 12719:
        case 12721:
        case 12724:
        case 12726:
        case 12727:
        case 12729:
        case 12731:
        case 12732:
        case 12733:
        case 12734:
        case 12735:
        case 12738:
        case 12740:
        case 12741:
        case 12743:
        case 12745:
        case 12748:
        case 12750:
        case 12751:
        case 12753:
        case 12755:
        case 12758:
        case 12760:
        case 12761:
        case 12763:
        case 12765:
        case 12768:
        case 12770:
        case 12771:
        case 12773:
        case 12775:
        case 12776:
        case 12777:
        case 12778:
        case 12779:
        case 12782:
        case 12784:
        case 12785:
        case 12787:
        case 12789:
        case 12792:
        case 12794:
        case 12795:
        case 12797:
        case 12799:
        case 12802:
        case 12804:
        case 12805:
        case 12807:
        case 12809:
        case 12812:
        case 12814:
        case 12815:
        case 12817:
        case 12819:
        case 12820:
        case 12821:
        case 12822:
        case 12823:
        case 12826:
        case 12828:
        case 12829:
        case 12831:
        case 12833:
        case 12836:
        case 12838:
        case 12839:
        case 12841:
        case 12843:
        case 12846:
        case 12848:
        case 12849:
        case 12851:
        case 12853:
        case 12856:
        case 12858:
        case 12859:
        case 12861:
          goto LABEL_188;
        case 12499:
          return 12500;
        case 12502:
          return 12503;
        case 12504:
          return 12505;
        case 12506:
          return 12511;
        case 12507:
          return 12508;
        case 12509:
          return 12510;
        case 12512:
          return 12513;
        case 12514:
          return 12515;
        case 12516:
          return 12521;
        case 12517:
          return 12518;
        case 12519:
          return 12520;
        case 12522:
          return 12523;
        case 12524:
          return 12525;
        case 12526:
          return 12531;
        case 12527:
          return 12528;
        case 12529:
          return 12530;
        case 12532:
          return 12533;
        case 12534:
          return 12535;
        case 12540:
          return 12545;
        case 12541:
          return 12542;
        case 12543:
          return 12544;
        case 12546:
          return 12547;
        case 12548:
          return 12549;
        case 12550:
          return 12555;
        case 12551:
          return 12552;
        case 12553:
          return 12554;
        case 12556:
          return 12557;
        case 12558:
          return 12559;
        case 12560:
          return 12565;
        case 12561:
          return 12562;
        case 12563:
          return 12564;
        case 12566:
          return 12567;
        case 12568:
          return 12569;
        case 12570:
          return 12575;
        case 12571:
          return 12572;
        case 12573:
          return 12574;
        case 12576:
          return 12577;
        case 12578:
          return 12579;
        case 12584:
          return 12589;
        case 12585:
          return 12586;
        case 12587:
          return 12588;
        case 12590:
          return 12591;
        case 12592:
          return 12593;
        case 12594:
        case 12638:
          return 12599;
        case 12595:
          return 12596;
        case 12597:
          return 12598;
        case 12600:
          return 12601;
        case 12602:
          return 12603;
        case 12604:
        case 12648:
          return 12609;
        case 12605:
          return 12606;
        case 12607:
          return 12608;
        case 12610:
          return 12611;
        case 12612:
          return 12613;
        case 12614:
          return 12619;
        case 12615:
          return 12616;
        case 12617:
          return 12618;
        case 12620:
          return 12621;
        case 12622:
          return 12623;
        case 12628:
          return 12633;
        case 12629:
          return 12630;
        case 12631:
          return 12632;
        case 12634:
          return 12635;
        case 12636:
          return 12637;
        case 12639:
          return 12640;
        case 12641:
          return 12642;
        case 12644:
          return 12645;
        case 12646:
          return 12647;
        case 12649:
          return 12650;
        case 12651:
          return 12652;
        case 12654:
          return 12655;
        case 12656:
          return 12657;
        case 12658:
          return 12663;
        case 12659:
          return 12660;
        case 12661:
          return 12662;
        case 12664:
          return 12665;
        case 12666:
          return 12667;
        case 12692:
          return 12697;
        case 12693:
          return 12694;
        case 12695:
          return 12696;
        case 12698:
          return 12699;
        case 12700:
          return 12701;
        case 12702:
          return 12707;
        case 12703:
          return 12704;
        case 12705:
          return 12706;
        case 12708:
          return 12709;
        case 12710:
          return 12711;
        case 12712:
          return 12717;
        case 12713:
          return 12714;
        case 12715:
          return 12716;
        case 12718:
          return 12719;
        case 12720:
          return 12721;
        case 12722:
          return 12727;
        case 12723:
          return 12724;
        case 12725:
          return 12726;
        case 12728:
          return 12729;
        case 12730:
          return 12731;
        case 12736:
          return 12741;
        case 12737:
          return 12738;
        case 12739:
          return 12740;
        case 12742:
          return 12743;
        case 12744:
          return 12745;
        case 12746:
          return 12751;
        case 12747:
          return 12748;
        case 12749:
          return 12750;
        case 12752:
          return 12753;
        case 12754:
          return 12755;
        case 12756:
          return 12761;
        case 12757:
          return 12758;
        case 12759:
          return 12760;
        case 12762:
          return 12763;
        case 12764:
          return 12765;
        case 12766:
          return 12771;
        case 12767:
          return 12768;
        case 12769:
          return 12770;
        case 12772:
          return 12773;
        case 12774:
          return 12775;
        case 12780:
          return 12785;
        case 12781:
          return 12782;
        case 12783:
          return 12784;
        case 12786:
          return 12787;
        case 12788:
          return 12789;
        case 12790:
          return 12795;
        case 12791:
          return 12792;
        case 12793:
          return 12794;
        case 12796:
          return 12797;
        case 12798:
          return 12799;
        case 12800:
          return 12805;
        case 12801:
          return 12802;
        case 12803:
          return 12804;
        case 12806:
          return 12807;
        case 12808:
          return 12809;
        case 12810:
          return 12815;
        case 12811:
          return 12812;
        case 12813:
          return 12814;
        case 12816:
          return 12817;
        case 12818:
          return 12819;
        case 12824:
          return 12829;
        case 12825:
          return 12826;
        case 12827:
          return 12828;
        case 12830:
          return 12831;
        case 12832:
          return 12833;
        case 12834:
          return 12839;
        case 12835:
          return 12836;
        case 12837:
          return 12838;
        case 12840:
          return 12841;
        case 12842:
          return 12843;
        case 12844:
          return 12849;
        case 12845:
          return 12846;
        case 12847:
          return 12848;
        case 12850:
          return 12851;
        case 12852:
          return 12853;
        case 12854:
          return 12859;
        case 12855:
          return 12856;
        case 12857:
          return 12858;
        case 12860:
          return 12861;
        case 12862:
          return 12863;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t sub_1CB8824F8()
{
  return 1;
}

uint64_t sub_1CB882500()
{
  return 13201;
}

uint64_t sub_1CB882508(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB88251C(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB882530()
{
  return 0;
}

uint64_t sub_1CB882538()
{
  return 0;
}

uint64_t sub_1CB882540()
{
  return 1;
}

uint64_t sub_1CB882548()
{
  return 0;
}

uint64_t sub_1CB882550()
{
  return 0;
}

uint64_t sub_1CB882558()
{
  return 3;
}

uint64_t sub_1CB882560()
{
  return 0;
}

uint64_t sub_1CB882568()
{
  return 4;
}

uint64_t sub_1CB882570()
{
  return 0;
}

uint64_t sub_1CB882578()
{
  return 1;
}

_UNKNOWN ***sub_1CB882580(uint64_t a1, int a2, int a3)
{
  return (&off_1E66A3BB8[2 * (a2 - 1)])[a3];
}

uint64_t sub_1CB882598(uint64_t a1, int a2)
{
  return dword_1CD91CAF0[a2];
}

BOOL sub_1CB8825A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v16 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3[1] + 16))(a3[1], *a3);
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    unsigned int v17 = *(_DWORD *)(a10 + 8);
    if (v17 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v17) = *(unsigned char *)(a2 + 2) == 0;
    ++*(_DWORD *)(a10 + 8);
  }
  int v18 = *(_DWORD *)(a2 + 4);
  if (v18 == 1)
  {
    uint64_t v19 = *(_DWORD *)(a2 + 56) != -1;
  }
  else if (v18 == 2)
  {
    if (*(_DWORD *)(a2 + 48) != -1 || *(unsigned __int8 *)(a2 + 61) | *(unsigned __int8 *)(a2 + 60))
    {
      uint64_t v19 = 6;
    }
    else if (*(_DWORD *)(a2 + 52) == -1)
    {
      if (*(_DWORD *)(a2 + 56) == -1) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = 3;
      }
    }
    else
    {
      uint64_t v19 = 4;
    }
  }
  else
  {
    uint64_t v19 = 5;
  }
  unsigned int v20 = *(_DWORD *)(a10 + 8);
  if (v20 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v20) = v19;
  ++*(_DWORD *)(a10 + 8);
  uint64_t v21 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a4);
  unsigned int v22 = *(_DWORD *)(a10 + 8);
  if (v22 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v22) = v21;
  unsigned int v23 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v23;
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    int v24 = *(_DWORD *)(a2 + 64);
    BOOL v25 = v24 == -1;
    uint64_t v26 = 2 * (v24 != -1);
    uint64_t v27 = 3;
    if (v25) {
      uint64_t v27 = 1;
    }
    if (*(_DWORD *)(a2 + 80) == -1) {
      uint64_t v28 = v26;
    }
    else {
      uint64_t v28 = v27;
    }
    if (v23 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v23) = v28;
    unsigned int v29 = *(_DWORD *)(a10 + 8) + 1;
    *(_DWORD *)(a10 + 8) = v29;
    if (*(unsigned char *)(a2 + 62))
    {
      if (*(_DWORD *)(a2 + 84) == -1)
      {
        unsigned int v31 = *(_DWORD *)(a10 + 12);
        uint64_t v30 = 4;
LABEL_33:
        if (v29 >= v31) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a10 + 8 * v29) = v30;
        unsigned int v23 = *(_DWORD *)(a10 + 8) + 1;
        *(_DWORD *)(a10 + 8) = v23;
        goto LABEL_35;
      }
      if (a5 >= 4) {
        uint64_t v30 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v30 = a5 + 4;
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    unsigned int v31 = *(_DWORD *)(a10 + 12);
    goto LABEL_33;
  }
LABEL_35:
  if (*(_DWORD *)(a2 + 24) != -1)
  {
    if (v23 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v23) = a6;
    ++*(_DWORD *)(a10 + 8);
  }
  uint64_t v32 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    uint64_t v33 = sub_1CD3CE4FC(v16, v32, "ImageWritePersist");
    unsigned int v34 = *(_DWORD *)(a10 + 8);
    if (v34 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v34) = v33;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v35 = *a3;
    unsigned int v56 = 0;
    if (sub_1CD3CA314((int)v16, v35, "ImageWriteTPUCohMode", &v56)) {
      uint64_t v36 = v56;
    }
    else {
      uint64_t v36 = 0;
    }
    unsigned int v37 = *(_DWORD *)(a10 + 8);
    if (v37 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v37) = v36;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v38 = *a3;
    unsigned int v56 = 0;
    if (sub_1CD3CA314((int)v16, v38, "ImageWriteMCUCohMode", &v56)) {
      uint64_t v39 = v56;
    }
    else {
      uint64_t v39 = 0;
    }
    unsigned int v40 = *(_DWORD *)(a10 + 8);
    if (v40 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v40) = v39;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v41 = *a3;
    unsigned int v56 = 0;
    BOOL result = sub_1CD3CA314((int)v16, v41, "ImageWriteSLCCohMode", &v56);
    if (result) {
      uint64_t v43 = v56;
    }
    else {
      uint64_t v43 = 1;
    }
  }
  else
  {
    uint64_t v44 = sub_1CD3CE4FC(v16, v32, "ImageReadPersist");
    unsigned int v45 = *(_DWORD *)(a10 + 8);
    if (v45 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v45) = v44;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v46 = *a3;
    unsigned int v56 = 0;
    if (sub_1CD3CA314((int)v16, v46, "ImageReadTPUCohMode", &v56)) {
      uint64_t v47 = v56;
    }
    else {
      uint64_t v47 = 0;
    }
    unsigned int v48 = *(_DWORD *)(a10 + 8);
    if (v48 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v48) = v47;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v49 = *a3;
    unsigned int v56 = 0;
    if (sub_1CD3CA314((int)v16, v49, "ImageReadMCUCohMode", &v56)) {
      uint64_t v50 = v56;
    }
    else {
      uint64_t v50 = 0;
    }
    unsigned int v51 = *(_DWORD *)(a10 + 8);
    if (v51 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v51) = v50;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v52 = *a3;
    unsigned int v56 = 0;
    BOOL result = sub_1CD3CA314((int)v16, v52, "ImageReadSLCCohMode", &v56);
    if (result) {
      uint64_t v43 = v56;
    }
    else {
      uint64_t v43 = 0;
    }
  }
  unsigned int v53 = *(_DWORD *)(a10 + 8);
  if (v53 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v53) = v43;
  unsigned int v54 = *(_DWORD *)(a10 + 12);
  unsigned int v55 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v55;
  if (v55 >= v54) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v55) = 0;
  ++*(_DWORD *)(a10 + 8);
  return result;
}

uint64_t sub_1CB882BEC()
{
  return 1;
}

uint64_t sub_1CB882BF4()
{
  return 0;
}

uint64_t sub_1CB882BFC()
{
  return 1;
}

uint64_t sub_1CB882C04()
{
  return 0;
}

uint64_t sub_1CB882C0C()
{
  return 0;
}

uint64_t sub_1CB882C14()
{
  return 0;
}

unint64_t sub_1CB882C1C(llvm::LLVMContext *a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  if ((unint64_t)a4 >> 32 == 1) {
    LOBYTE(ExtendedVectorVT) = sub_1CB882CA4(a2, (int)a4);
  }
  else {
    LOBYTE(ExtendedVectorVT) = sub_1CB883124(a2, (int)a4);
  }
  if ((_BYTE)ExtendedVectorVT)
  {
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t ExtendedVectorVT = llvm::EVT::getExtendedVectorVT(a1, a2, a3, a4);
    unint64_t v9 = ExtendedVectorVT & 0xFFFFFFFFFFFFFF00;
  }
  return v9 | ExtendedVectorVT;
}

unint64_t sub_1CB882CA4(char a1, int a2)
{
  switch(a1)
  {
    case 2:
      if (a2 > 15)
      {
        switch(a2)
        {
          case 16:
            unint64_t result = 124;
            break;
          case 32:
            unint64_t result = 125;
            break;
          case 64:
            unint64_t result = 126;
            break;
          default:
            goto LABEL_67;
        }
      }
      else
      {
        unint64_t result = 120;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            unint64_t result = 121;
            break;
          case 4:
            unint64_t result = 122;
            break;
          case 8:
            unint64_t result = 123;
            break;
          default:
            goto LABEL_67;
        }
      }
      break;
    case 3:
      if (a2 > 15)
      {
        switch(a2)
        {
          case 16:
            unint64_t result = 131;
            break;
          case 32:
            unint64_t result = 132;
            break;
          case 64:
            unint64_t result = 133;
            break;
          default:
            goto LABEL_67;
        }
      }
      else
      {
        unint64_t result = 127;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            unint64_t result = 128;
            break;
          case 4:
            unint64_t result = 129;
            break;
          case 8:
            unint64_t result = 130;
            break;
          default:
            goto LABEL_67;
        }
      }
      break;
    case 4:
      unint64_t result = 134;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          return 135;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          return 136;
        case 8:
          return 137;
        default:
          if (a2 == 16) {
            return 138;
          }
          if (a2 != 32) {
            goto LABEL_67;
          }
          unint64_t result = 139;
          break;
      }
      break;
    case 5:
      unint64_t result = 140;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          return 141;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          return 142;
        case 8:
          return 143;
        default:
          if (a2 == 16) {
            return 144;
          }
          if (a2 != 32) {
            goto LABEL_67;
          }
          unint64_t result = 145;
          break;
      }
      break;
    case 6:
      unint64_t result = 146;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          return 147;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          return 148;
        case 8:
          return 149;
        default:
          if (a2 == 16) {
            return 150;
          }
          if (a2 != 32) {
            goto LABEL_67;
          }
          unint64_t result = 151;
          break;
      }
      break;
    case 8:
      if ((a2 - 1) >= 8) {
        goto LABEL_67;
      }
      unint64_t result = 0xA1000000A0009F9ELL >> (8 * (a2 - 1));
      break;
    case 9:
      unint64_t result = 152;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          return 153;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          return 154;
        case 8:
          return 155;
        default:
          if (a2 == 16) {
            return 156;
          }
          if (a2 != 32) {
            goto LABEL_67;
          }
          unint64_t result = 157;
          break;
      }
      break;
    case 10:
      unint64_t result = 162;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          unint64_t result = 163;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          unint64_t result = 164;
          break;
        case 8:
          unint64_t result = 165;
          break;
        default:
          if (a2 != 16) {
            goto LABEL_67;
          }
          unint64_t result = 166;
          break;
      }
      break;
    case 11:
      if ((a2 - 1) >= 8) {
        goto LABEL_67;
      }
      unint64_t result = 0xAA000000A900A8A7 >> (8 * (a2 - 1));
      break;
    default:
LABEL_67:
      unint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CB883124(char a1, int a2)
{
  switch(a1)
  {
    case 2:
      if (a2 > 15)
      {
        if (a2 <= 63)
        {
          if (a2 == 16)
          {
            uint64_t result = 19;
          }
          else
          {
            if (a2 != 32) {
              goto LABEL_178;
            }
            uint64_t result = 20;
          }
        }
        else if (a2 > 255)
        {
          switch(a2)
          {
            case 256:
              uint64_t result = 23;
              break;
            case 512:
              uint64_t result = 24;
              break;
            case 1024:
              uint64_t result = 25;
              break;
            default:
              goto LABEL_178;
          }
        }
        else if (a2 == 64)
        {
          uint64_t result = 21;
        }
        else
        {
          if (a2 != 128) {
            goto LABEL_178;
          }
          uint64_t result = 22;
        }
      }
      else
      {
        uint64_t result = 15;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            uint64_t result = 16;
            break;
          case 4:
            uint64_t result = 17;
            break;
          case 8:
            uint64_t result = 18;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 3:
      if (a2 > 15)
      {
        if (a2 > 127)
        {
          if (a2 <= 255)
          {
            if (a2 != 128) {
              goto LABEL_178;
            }
            uint64_t result = 33;
          }
          else
          {
            switch(a2)
            {
              case 256:
                uint64_t result = 34;
                break;
              case 512:
                uint64_t result = 35;
                break;
              case 1024:
                uint64_t result = 36;
                break;
              default:
                goto LABEL_178;
            }
          }
        }
        else
        {
          switch(a2)
          {
            case 16:
              uint64_t result = 30;
              break;
            case 32:
              uint64_t result = 31;
              break;
            case 64:
              uint64_t result = 32;
              break;
            default:
              goto LABEL_178;
          }
        }
      }
      else
      {
        uint64_t result = 26;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            uint64_t result = 27;
            break;
          case 4:
            uint64_t result = 28;
            break;
          case 8:
            uint64_t result = 29;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 4:
      if (a2 == 2)
      {
        uint64_t result = 38;
      }
      else if (a2 > 63)
      {
        if (a2 <= 127)
        {
          if (a2 != 64) {
            goto LABEL_178;
          }
          uint64_t result = 44;
        }
        else
        {
          switch(a2)
          {
            case 128:
              uint64_t result = 45;
              break;
            case 256:
              uint64_t result = 46;
              break;
            case 512:
              uint64_t result = 47;
              break;
            default:
              goto LABEL_178;
          }
        }
      }
      else
      {
        uint64_t result = 37;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
          case 5:
          case 6:
          case 7:
            goto LABEL_178;
          case 3:
            return 39;
          case 4:
            return 40;
          case 8:
            return 41;
          default:
            if (a2 == 16) {
              return 42;
            }
            if (a2 != 32) {
              goto LABEL_178;
            }
            uint64_t result = 43;
            break;
        }
      }
      break;
    case 5:
      if (a2 > 63)
      {
        if (a2 > 127)
        {
          if (a2 > 511)
          {
            switch(a2)
            {
              case 512:
                uint64_t result = 61;
                break;
              case 1024:
                uint64_t result = 62;
                break;
              case 2048:
                uint64_t result = 63;
                break;
              default:
                goto LABEL_178;
            }
          }
          else if (a2 == 128)
          {
            uint64_t result = 59;
          }
          else
          {
            if (a2 != 256) {
              goto LABEL_178;
            }
            uint64_t result = 60;
          }
        }
        else
        {
          if (a2 != 64) {
            goto LABEL_178;
          }
          uint64_t result = 58;
        }
      }
      else
      {
        uint64_t result = 48;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            uint64_t result = 49;
            break;
          case 3:
            uint64_t result = 50;
            break;
          case 4:
            uint64_t result = 51;
            break;
          case 5:
            uint64_t result = 52;
            break;
          case 6:
            uint64_t result = 53;
            break;
          case 7:
            uint64_t result = 54;
            break;
          case 8:
            uint64_t result = 55;
            break;
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
            goto LABEL_178;
          case 16:
            uint64_t result = 56;
            break;
          default:
            if (a2 != 32) {
              goto LABEL_178;
            }
            uint64_t result = 57;
            break;
        }
      }
      break;
    case 6:
      if (a2 > 15)
      {
        if (a2 > 63)
        {
          switch(a2)
          {
            case 64:
              uint64_t result = 71;
              break;
            case 128:
              uint64_t result = 72;
              break;
            case 256:
              uint64_t result = 73;
              break;
            default:
              goto LABEL_178;
          }
        }
        else if (a2 == 16)
        {
          uint64_t result = 69;
        }
        else
        {
          if (a2 != 32) {
            goto LABEL_178;
          }
          uint64_t result = 70;
        }
      }
      else
      {
        uint64_t result = 64;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            uint64_t result = 65;
            break;
          case 3:
            uint64_t result = 66;
            break;
          case 4:
            uint64_t result = 67;
            break;
          case 8:
            uint64_t result = 68;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 7:
      if (a2 != 1) {
        goto LABEL_178;
      }
      uint64_t result = 74;
      break;
    case 8:
      if (a2 > 15)
      {
        if (a2 <= 31)
        {
          if (a2 != 16) {
            goto LABEL_178;
          }
          uint64_t result = 90;
        }
        else
        {
          switch(a2)
          {
            case 32:
              uint64_t result = 91;
              break;
            case 64:
              uint64_t result = 92;
              break;
            case 128:
              uint64_t result = 93;
              break;
            default:
              goto LABEL_178;
          }
        }
      }
      else
      {
        uint64_t result = 86;
        switch(a2)
        {
          case 2:
            return result;
          case 3:
            uint64_t result = 87;
            break;
          case 4:
            uint64_t result = 88;
            break;
          case 8:
            uint64_t result = 89;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 9:
      if (a2 > 15)
      {
        if (a2 > 63)
        {
          if (a2 <= 127)
          {
            if (a2 != 64) {
              goto LABEL_178;
            }
            uint64_t result = 82;
          }
          else
          {
            switch(a2)
            {
              case 128:
                uint64_t result = 83;
                break;
              case 256:
                uint64_t result = 84;
                break;
              case 512:
                uint64_t result = 85;
                break;
              default:
                goto LABEL_178;
            }
          }
        }
        else if (a2 == 16)
        {
          uint64_t result = 80;
        }
        else
        {
          if (a2 != 32) {
            goto LABEL_178;
          }
          uint64_t result = 81;
        }
      }
      else
      {
        uint64_t result = 75;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            uint64_t result = 76;
            break;
          case 3:
            uint64_t result = 77;
            break;
          case 4:
            uint64_t result = 78;
            break;
          case 8:
            uint64_t result = 79;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 10:
      if (a2 == 8)
      {
        uint64_t result = 101;
      }
      else if (a2 > 63)
      {
        if (a2 > 127)
        {
          if (a2 > 511)
          {
            switch(a2)
            {
              case 512:
                uint64_t result = 107;
                break;
              case 1024:
                uint64_t result = 108;
                break;
              case 2048:
                uint64_t result = 109;
                break;
              default:
                goto LABEL_178;
            }
          }
          else if (a2 == 128)
          {
            uint64_t result = 105;
          }
          else
          {
            if (a2 != 256) {
              goto LABEL_178;
            }
            uint64_t result = 106;
          }
        }
        else
        {
          if (a2 != 64) {
            goto LABEL_178;
          }
          uint64_t result = 104;
        }
      }
      else
      {
        uint64_t result = 94;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            uint64_t result = 95;
            break;
          case 3:
            uint64_t result = 96;
            break;
          case 4:
            uint64_t result = 97;
            break;
          case 5:
            uint64_t result = 98;
            break;
          case 6:
            uint64_t result = 99;
            break;
          case 7:
            uint64_t result = 100;
            break;
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
            goto LABEL_178;
          case 16:
            uint64_t result = 102;
            break;
          default:
            if (a2 != 32) {
              goto LABEL_178;
            }
            uint64_t result = 103;
            break;
        }
      }
      break;
    case 11:
      if (a2 > 15)
      {
        if (a2 > 63)
        {
          switch(a2)
          {
            case 64:
              uint64_t result = 117;
              break;
            case 128:
              uint64_t result = 118;
              break;
            case 256:
              uint64_t result = 119;
              break;
            default:
              goto LABEL_178;
          }
        }
        else if (a2 == 16)
        {
          uint64_t result = 115;
        }
        else
        {
          if (a2 != 32) {
            goto LABEL_178;
          }
          uint64_t result = 116;
        }
      }
      else
      {
        uint64_t result = 110;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            uint64_t result = 111;
            break;
          case 3:
            uint64_t result = 112;
            break;
          case 4:
            uint64_t result = 113;
            break;
          case 8:
            uint64_t result = 114;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    default:
LABEL_178:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CB883A14(uint64_t a1, char a2, char a3)
{
  *(void *)a1 = &unk_1F2643B78;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = a2 & 7 | (32 * (a3 & 3)) | *(_WORD *)(a1 + 10) & 0x8000;
  *(void *)(a1 + 64) = a1 + 80;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  unsigned int v5 = *(_DWORD *)(a1 + 72);
  if (v5 >= *(_DWORD *)(a1 + 76)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v5) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  return a1;
}

uint64_t sub_1CB883B0C(uint64_t a1, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*a2 == *v6) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

void *sub_1CB883BA0(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v4 = a1[2];
  unsigned int v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[3] > v5 >> 3)
  {
    goto LABEL_3;
  }
  uint64_t v8 = (uint64_t)a1;
  sub_1CB883C50((uint64_t)a1, v5);
  int v9 = 0;
  sub_1CB883B0C(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CB883C50(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CB883D1C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CB883D1C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    int v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      void *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v6 = 0;
    int v7 = v3 - 1;
    do
    {
      uint64_t v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        uint64_t v10 = (void *)(*(void *)result + 16 * v9);
        uint64_t v11 = *v10;
        if (v8 != *v10)
        {
          uint64_t v12 = 0;
          int v13 = 1;
          while (v11 != -4096)
          {
            if (v12) {
              BOOL v14 = 0;
            }
            else {
              BOOL v14 = v11 == -8192;
            }
            if (v14) {
              uint64_t v12 = v10;
            }
            unsigned int v15 = v9 + v13++;
            unsigned int v9 = v15 & v7;
            uint64_t v10 = (void *)(*(void *)result + 16 * (v15 & v7));
            uint64_t v11 = *v10;
            if (v8 == *v10) {
              goto LABEL_16;
            }
          }
          if (v12) {
            uint64_t v10 = v12;
          }
        }
LABEL_16:
        *uint64_t v10 = v8;
        v10[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_1CB883DF0()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Limit the AGX1 \"fast\" instruction selector";
  v3.n128_u64[1] = 42;
  int v1 = -1;
  uint64_t v2 = &v1;
  sub_1CD3CE624(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCBE850, &dword_1CB82C000);
}

uint64_t sub_1CB883E68(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0) {
    __n128 v3 = *(uint64_t **)(a2 - 8);
  }
  else {
    __n128 v3 = (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  }
  uint64_t v4 = *v3;
  unsigned int v5 = *(unsigned __int8 *)(*v3 + 16);
  if (*v3) {
    BOOL v6 = v5 >= 0x1C;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6 || (uint64_t v7 = *(void *)(v4 + 40), v7 == *(void *)(a2 + 40)))
  {
    if (v5 == 73)
    {
      int v8 = *(_DWORD *)(v4 + 20);
      if ((v8 & 0x40000000) != 0) {
        unsigned int v9 = *(uint64_t **)(v4 - 8);
      }
      else {
        unsigned int v9 = (uint64_t *)(v4 - 32 * (v8 & 0x7FFFFFF));
      }
      uint64_t v7 = *v9;
      unsigned int v5 = *(unsigned __int8 *)(v7 + 16);
      if (v7) {
        BOOL v10 = v5 >= 0x1C;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10 && *(void *)(v7 + 40) != *(void *)(v4 + 40)) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v7 = v4;
    }
    if (v5 == 84)
    {
      uint64_t v11 = *(void *)(v7 - 32);
      if (v11)
      {
        if (!*(unsigned char *)(v11 + 16)
          && *(void *)(v11 + 24) == *(void *)(v7 + 72)
          && (*(unsigned char *)(v11 + 33) & 0x20) != 0)
        {
          uint64_t v7 = *(void *)(v7 + 8);
          if (v7)
          {
            if (*(void *)(v7 + 8))
            {
              LODWORD(v7) = 0;
            }
            else
            {
              BOOL v14 = (llvm *)*(unsigned int *)(v11 + 36);
              if ((v14 - 1839) >= 8 && !llvm::GetItrKind(v14)) {
                goto LABEL_26;
              }
              LODWORD(v7) = 1;
            }
          }
          int v12 = 1;
          return v7 & v12;
        }
      }
    }
  }
LABEL_26:
  int v12 = 0;
  return v7 & v12;
}

uint64_t sub_1CB883F78(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 < 0x1C) {
    return 0;
  }
  uint64_t v3 = v1 - 42;
  if (v3 > 0x2A) {
    return 0;
  }
  if (((1 << v3) & 0x10178000095) != 0) {
    return 1;
  }
  if (v3 != 42) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 - 32);
  if (!v4 || *(unsigned char *)(v4 + 16) || *(void *)(v4 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v4 + 33) & 0x20) == 0) {
    return 0;
  }
  int v5 = *(_DWORD *)(v4 + 36);
  uint64_t result = 1;
  if (v5 <= 1826)
  {
    if (((v5 - 139) > 0x26 || ((1 << (v5 + 117)) & 0x5000000003) == 0)
      && (v5 - 75) >= 2
      && v5 != 280)
    {
      return 0;
    }
  }
  else if (v5 > 1989)
  {
    if (((v5 - 1990) > 0xB || ((1 << (v5 + 58)) & 0xA03) == 0) && v5 != 2094 && v5 != 2096) {
      return 0;
    }
  }
  else
  {
    unsigned int v6 = v5 - 1827;
    if (v6 > 0x13 || ((1 << v6) & 0xFF009) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CB8840A0(uint64_t a1, uint64_t a2, char a3)
{
  if (!sub_1CB883E68(a1, a2))
  {
    if ((a3 & 1) == 0)
    {
      int v7 = *(_DWORD *)(a2 + 20);
      if ((v7 & 0x40000000) != 0) {
        int v8 = *(uint64_t **)(a2 - 8);
      }
      else {
        int v8 = (uint64_t *)(a2 - 32 * (v7 & 0x7FFFFFF));
      }
      uint64_t v9 = *v8;
      unsigned int v10 = *(unsigned __int8 *)(*v8 + 16);
      if (v9) {
        BOOL v11 = v10 >= 0x1C;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11 && *(void *)(a2 + 40) == *(void *)(v9 + 40))
      {
        uint64_t v15 = *(void *)(v9 + 8);
        if (v15)
        {
          if (!*(void *)(v15 + 8) && (sub_1CB883F78(v9) & 1) != 0) {
            return 0;
          }
        }
      }
      uint64_t v12 = *(void *)(a2 + 8);
      if (v12 && *(void *)(v12 + 8))
      {
        while (1)
        {
          uint64_t v13 = *(void *)(v12 + 24);
          BOOL v14 = v13 && *(unsigned __int8 *)(v13 + 16) >= 0x1Cu;
          if (!v14 || *(void *)(a2 + 40) != *(void *)(v13 + 40) || (sub_1CB883F78(v13) & 1) == 0) {
            break;
          }
          uint64_t v12 = *(void *)(v12 + 8);
          if (!v12) {
            return 1;
          }
        }
        return 0;
      }
    }
    return 1;
  }

  return sub_1CB859958(a1, a2);
}

uint64_t sub_1CB8841A8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = 0;
  if (a1)
  {
    unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
    if (v5 >= 0x1C)
    {
      if (v5 != 53 || *(void *)(a1 + 40) != a2) {
        return 0;
      }
      int v7 = *(_DWORD *)(a1 + 20);
      uint64_t v8 = (v7 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v7 & 0x7FFFFFF);
      uint64_t v9 = *(void *)(v8 + 32);
      if (!v9 || *(unsigned char *)(v9 + 16) != 16) {
        return 0;
      }
      BOOL v11 = (void **)(v9 + 24);
      unsigned int v12 = *(_DWORD *)(v9 + 32);
      uint64_t v13 = v11;
      if (v12 >= 0x41) {
        uint64_t v13 = *v11;
      }
      if (*v13 <= 4uLL)
      {
        if (a3)
        {
          if (v12 >= 0x41) {
            BOOL v11 = (void **)*v11;
          }
          *a3 = *v11;
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1CB884248(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, int *a5, unsigned char *a6, unsigned char *a7, unsigned int a8)
{
  if (*(unsigned char *)(a1 + 280)) {
    BOOL v8 = *a6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    BOOL v11 = a5;
    uint64_t v16 = a8;
    uint64_t v17 = a8;
    int v18 = a5;
    while (1)
    {
      char v19 = *(unsigned char *)v18++;
      if (v19) {
        break;
      }
      if (!--v17)
      {
        uint64_t v20 = 0;
        char v26 = 0;
        do
        {
          uint64_t v21 = a3[v20];
          if (v21
            && *(unsigned char *)(v21 + 16) == 73
            && *(void *)(a2 + 40) == *(void *)(v21 + 40)
            && sub_1CB8840A0(a1, a3[v20], 0)
            && (sub_1CB8843D8(a1, (unsigned char *)v21, 1, 0, 0) & 1) == 0)
          {
            uint64_t v22 = *(void *)(v21 + 8);
            if (v22)
            {
              int v23 = -2;
              do
              {
                BOOL v24 = v23 == 0;
                if (!v23) {
                  break;
                }
                uint64_t v22 = *(void *)(v22 + 8);
                ++v23;
              }
              while (v22);
            }
            else
            {
              BOOL v24 = 0;
            }
            v26 |= !v24;
          }
          ++v20;
        }
        while (v20 != v16);
        if ((v26 & 1) == 0) {
          return 1;
        }
        *a6 = 0;
        while (1)
        {
          if (*a3)
          {
            uint64_t result = sub_1CB88467C(a1, a3, v11, a7, *a6, *(void *)(a2 + 40), 7, 1);
            *a4 = result;
            if (!result) {
              break;
            }
          }
          ++a4;
          ++a7;
          ++v11;
          ++a3;
          if (!--v16) {
            return 1;
          }
        }
        return result;
      }
    }
  }
  return 1;
}

uint64_t sub_1CB8843D8(uint64_t a1, unsigned char *a2, int a3, llvm::MachineFunction **a4, int a5)
{
  int v7 = a2;
  uint64_t v9 = *(void *)a2;
  unsigned int v10 = *(_DWORD *)(*(void *)a2 + 8);
  unsigned int v11 = v10 >> 8;
  BOOL v14 = v10 >> 8 == 16 || v11 == 32 || v11 == 64;
  if (*(_DWORD *)(*(void *)a2 + 8) != 13 || !v14)
  {
    if ((v10 | 2) != 2) {
      return 0;
    }
    if (*(_DWORD *)(*(void *)a2 + 8)) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = a3 == 0;
    }
    if (!v15 && a2[16] == 73)
    {
      int v7 = (unsigned char *)*((void *)a2 - 4);
      uint64_t v9 = *(void *)v7;
    }
  }
  unsigned int v38 = 0;
  int v16 = sub_1CB85A994(a1, v9, (int *)&v38);
  BOOL v21 = 0;
  if (!v16) {
    return v21;
  }
  if (*(_DWORD *)(v9 + 8) != 4109 || v7[16] != 66) {
    goto LABEL_36;
  }
  int v22 = 0;
  int v7 = (unsigned char *)*((void *)v7 - 4);
  if (v7)
  {
    unsigned int v23 = v7[16];
    if (v23 >= 0x1C && v23 - 59 >= 0xFFFFFFEE)
    {
      int v22 = 0;
      uint64_t v25 = *((void *)v7 - 4);
      if (*(unsigned char *)(v25 + 16) != 16) {
        uint64_t v25 = 0;
      }
      if (v23 == 54 && v25)
      {
        char v26 = (void *)(v25 + 24);
        if (*(_DWORD *)(v25 + 32) >= 0x41u) {
          char v26 = (void *)*v26;
        }
        if (*v26 == 16)
        {
          int v7 = (unsigned char *)*((void *)v7 - 8);
          int v22 = 16;
          goto LABEL_37;
        }
LABEL_36:
        int v22 = 0;
      }
    }
  }
LABEL_37:
  int v27 = v7[16];
  if (v7 && v27 == 77)
  {
    int v7 = (unsigned char *)*((void *)v7 - 4);
    int v27 = v7[16];
  }
  if (v27 == 89)
  {
    unsigned int v39 = 0;
    if (sub_1CB85A994(a1, *(void *)v7, (int *)&v39))
    {
      uint64_t v28 = *((void *)v7 - 4);
      if (v28)
      {
        if (*(unsigned char *)(v28 + 16) == 16)
        {
          int v7 = (unsigned char *)*((void *)v7 - 8);
          unsigned int v29 = (void *)(v28 + 24);
          if (*(_DWORD *)(v28 + 32) >= 0x41u) {
            unsigned int v29 = (void *)*v29;
          }
          v22 += v39 * *(_DWORD *)v29;
          int v27 = v7[16];
          goto LABEL_47;
        }
      }
    }
    return 0;
  }
LABEL_47:
  if (v27 == 77)
  {
    int v7 = (unsigned char *)*((void *)v7 - 4);
    int v27 = v7[16];
  }
  if (v27 != 60) {
    return 0;
  }
  uint64_t v30 = *((void *)v7 - 4);
  int v31 = *(_DWORD *)(*(void *)v30 + 8);
  if ((v31 & 0xFE) == 0x12) {
    int v31 = *(_DWORD *)(**(void **)(*(void *)v30 + 16) + 8);
  }
  if ((v31 & 0xFFFFFF00) != 0x4000) {
    return 0;
  }
  unsigned int v32 = sub_1CB859FD0(a1, v30, *(void *)(a1 + 272), v17, v18, v19, v20);
  BOOL v21 = v32 != -1;
  if (a4 && v32 != -1)
  {
    if (a5 != 1)
    {
      if (a5 != 2)
      {
        if ((int)v38 <= 8) {
          unsigned int v33 = 519;
        }
        else {
          unsigned int v33 = (((v38 >> 3) & 0xFFF) << 8) | 7;
        }
        goto LABEL_64;
      }
      v32 += 2;
    }
    unsigned int v33 = 519;
LABEL_64:
    unsigned int v35 = v32 >> 1;
    unsigned int v37 = *a4;
    uint64_t v36 = a4[1];
    int v41 = 0;
    int v42 = 64;
    int v43 = 0;
    unsigned int v39 = v33;
    uint64_t v40 = v35 + v22 / 16;
    llvm::MachineInstr::addOperand(v36, v37, (const llvm::MachineOperand *)&v39);
    return 1;
  }
  return v21;
}

uint64_t sub_1CB88467C(uint64_t a1, uint64_t *a2, int *a3, unsigned char *a4, int a5, uint64_t a6, char a7, char a8)
{
  uint64_t v9 = (unsigned __int8 *)*a2;
  if (*(unsigned __int8 *)(*a2 + 16) <= 0x1Bu) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a2;
  }
  uint64_t v62 = v10;
  if (!v10 || *(void *)(v10 + 40) != a6) {
    goto LABEL_59;
  }
  if (*(unsigned char *)(v10 + 16) == 84
    && (uint64_t v17 = *(void *)(v10 - 32)) != 0
    && !*(unsigned char *)(v17 + 16)
    && *(void *)(v17 + 24) == *(void *)(v10 + 72))
  {
    if ((*(unsigned char *)(v17 + 33) & 0x20) != 0) {
      uint64_t v18 = v10;
    }
    else {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  if (a7)
  {
    if (a5)
    {
      int v19 = *a3;
      if ((*a3 & 2) == 0 && (v19 & 4) == 0)
      {
        if (v18)
        {
          int v20 = *(_DWORD *)(*(void *)(v18 - 32) + 36);
          if (v20 == 1851 || v20 == 1830 && (v21 = sub_1CB883E68(a1, v18), int v20 = 1830, (v21 & 1) == 0))
          {
            int v60 = v20;
            if (sub_1CB884D38(v18))
            {
              *a3 = v19 | 1;
              char v26 = *(unsigned __int8 **)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
              if (v60 != 1851)
              {
                *a2 = (uint64_t)v26;
                if (v26[16] <= 0x1Bu) {
                  uint64_t v47 = 0;
                }
                else {
                  uint64_t v47 = (uint64_t)v26;
                }
                uint64_t v62 = v47;
                if (!v47 || *(void *)(v47 + 40) != a6) {
                  goto LABEL_46;
                }
                goto LABEL_22;
              }
              int v29 = sub_1CD789230((uint64_t *)a1, (uint64_t)v26);
              if (!v29) {
                return 0;
              }
              int v30 = v29;
              uint64_t v31 = *(void *)(a1 + 48);
              uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v31, "", 0);
              *(void *)(*(void *)(v31 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4180;
              uint64_t v33 = *(void *)(v31 + 8);
              if (v33)
              {
                (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
                if (IncompleteVirtualRegister)
                {
LABEL_52:
                  uint64_t v34 = *(void *)(a1 + 32);
                  uint64_t v35 = *(void *)(v34 + 640);
                  uint64_t v36 = *(unint64_t **)(v34 + 648);
                  uint64_t v37 = *(void *)(*(void *)(a1 + 96) + 8) + 48192;
                  unsigned int v38 = *(llvm::MachineFunction **)(v35 + 32);
                  unsigned int v39 = *(unsigned __int8 **)(a1 + 72);
                  uint64_t v65 = v39;
                  if (v39) {
                    llvm::MetadataTracking::track((uint64_t)&v65, v39, 2);
                  }
                  uint64_t v40 = llvm::MachineFunction::CreateMachineInstr(v38, v37, &v65, 0);
                  if (!v65) {
                    goto LABEL_55;
                  }
                  int v56 = *v65;
                  if ((v56 - 4) > 0x1E)
                  {
                    if ((v56 - 3) >= 0xFFFFFFFE) {
                      uint64_t v59 = v65;
                    }
                    else {
                      uint64_t v59 = 0;
                    }
                    if ((v56 - 3) < 0xFFFFFFFE)
                    {
                      if (v56 == 3) {
                        *((void *)v65 + 1) = 0;
                      }
                      goto LABEL_55;
                    }
                    unint64_t v58 = (unint64_t)(v59 + 8);
                  }
                  else
                  {
                    if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
                      goto LABEL_55;
                    }
                    uint64_t v57 = *((void *)v65 + 2);
                    if ((v57 & 4) == 0) {
                      goto LABEL_55;
                    }
                    unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
                    if (!v58) {
                      goto LABEL_55;
                    }
                  }
                  *(void *)&long long v63 = &v65;
                  sub_1CC5FA668(v58 + 16, &v63);
LABEL_55:
                  uint64_t v41 = *(void *)(v35 + 40);
                  *((void *)v40 + 3) = v41;
                  uint64_t v42 = *(void *)(v41 + 32);
                  uint64_t v43 = *((unsigned int *)v40 + 10);
                  if (v43)
                  {
                    uint64_t v48 = *((void *)v40 + 4);
                    uint64_t v49 = *(void *)(v42 + 40);
                    uint64_t v50 = 32 * v43;
                    do
                    {
                      if (!*(unsigned char *)v48)
                      {
                        uint64_t v51 = *(unsigned int *)(v48 + 4);
                        if ((int)v51 >= 0) {
                          uint64_t v52 = (uint64_t *)(*(void *)(v49 + 272) + 8 * v51);
                        }
                        else {
                          uint64_t v52 = (uint64_t *)(*(void *)(v49 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v53 = *v52;
                        if (*v52)
                        {
                          uint64_t v54 = *(void *)(v53 + 16);
                          *(void *)(v53 + 16) = v48;
                          *(void *)(v48 + 16) = v54;
                          if (*(unsigned char *)(v48 + 3))
                          {
                            *(void *)(v48 + 24) = v53;
                          }
                          else
                          {
                            *(void *)(v48 + 24) = 0;
                            uint64_t v52 = (uint64_t *)(v54 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v48 + 16) = v48;
                          *(void *)(v48 + 24) = 0;
                        }
                        uint64_t *v52 = v48;
                      }
                      v48 += 32;
                      v50 -= 32;
                    }
                    while (v50);
                  }
                  uint64_t v44 = *(void *)(v42 + 728);
                  if (v44) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v44 + 24))(v44, v40);
                  }
                  unint64_t v45 = *v36 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)uint64_t v40 = v45 | *(void *)v40 & 7;
                  *((void *)v40 + 1) = v36;
                  *(void *)(v45 + 8) = v40;
                  unint64_t *v36 = *v36 & 7 | (unint64_t)v40;
                  *((void *)&v63 + 1) = 0;
                  long long v64 = 0uLL;
                  LODWORD(v63) = 0x1000000;
                  DWORD1(v63) = IncompleteVirtualRegister;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  LODWORD(v63) = 1;
                  *((void *)&v63 + 1) = 0;
                  *(void *)&long long v64 = 0;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  *((void *)&v63 + 1) = 0;
                  long long v64 = 0uLL;
                  LODWORD(v63) = 0;
                  DWORD1(v63) = v30;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  LODWORD(v63) = 1;
                  *((void *)&v63 + 1) = 0;
                  *(void *)&long long v64 = 2;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  *((void *)&v63 + 1) = 0;
                  long long v64 = 0uLL;
                  LODWORD(v63) = 0;
                  DWORD1(v63) = v30;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  LODWORD(v63) = 1;
                  *((void *)&v63 + 1) = 0;
                  *(void *)&long long v64 = 0;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  *((void *)&v63 + 1) = 0;
                  long long v64 = 0uLL;
                  LODWORD(v63) = 0;
                  DWORD1(v63) = v30;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  LODWORD(v63) = 1;
                  *((void *)&v63 + 1) = 0;
                  *(void *)&long long v64 = 0;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  LODWORD(v63) = 1;
                  *((void *)&v63 + 1) = 0;
                  *(void *)&long long v64 = 0x100000000;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  long long v63 = 0u;
                  long long v64 = 0u;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  LODWORD(v63) = 1;
                  *((void *)&v63 + 1) = 0;
                  *(void *)&long long v64 = 0;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                  long long v63 = 0u;
                  long long v64 = 0u;
                  llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v63);
                }
              }
              else if (IncompleteVirtualRegister)
              {
                goto LABEL_52;
              }
              return IncompleteVirtualRegister;
            }
LABEL_59:
            uint64_t v28 = (uint64_t *)a1;
            char v26 = v9;
            goto LABEL_60;
          }
        }
      }
    }
  }
LABEL_22:
  if (a5 & 1) != 0 || (sub_1CD3CEBB0(a1, a2, &v62, a4, a6, a8))
  {
    if ((a7 & 2) != 0)
    {
      if ((uint64_t v22 = v62, v23 = *(unsigned __int8 *)(a1 + 280), v65 = 0, v23)
        && (*((void *)&v63 + 1) = &v65, sub_1CD116F34((uint64_t)&v63, 16, v62))
        || (*(void *)&long long v63 = &v65, sub_1CC04C34C((void **)&v63, v22)))
      {
        char v26 = v65;
        if (v65)
        {
          *a3 ^= 2u;
          *a2 = (uint64_t)v26;
          uint64_t v55 = v26[16] <= 0x1Bu ? 0 : (uint64_t)v26;
          uint64_t v62 = v55;
          if (!v55 || *(void *)(v55 + 40) != a6) {
            goto LABEL_46;
          }
        }
      }
    }
    if (a5 & 1) != 0 || (sub_1CD3CEBB0(a1, a2, &v62, a4, a6, a8))
    {
      uint64_t v24 = v62;
      if (*(unsigned char *)(v62 + 16) == 84)
      {
        uint64_t v25 = *(void *)(v62 - 32);
        if (v25)
        {
          if (!*(unsigned char *)(v25 + 16) && *(void *)(v25 + 24) == *(void *)(v62 + 72))
          {
            if ((*(unsigned char *)(v25 + 33) & 0x20) == 0) {
              uint64_t v24 = 0;
            }
            if ((a7 & 4) != 0 && v24 && *(_DWORD *)(*(void *)(v24 - 32) + 36) == 139)
            {
              *a3 |= 4u;
              char v26 = *(unsigned __int8 **)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
              *a2 = (uint64_t)v26;
              uint64_t v27 = v26[16] <= 0x1Bu ? 0 : (uint64_t)v26;
              uint64_t v62 = v27;
              if (!v27 || *(void *)(v27 + 40) != a6) {
                goto LABEL_46;
              }
            }
          }
        }
      }
      if (!a5) {
        sub_1CD3CEBB0(a1, a2, &v62, a4, a6, a8);
      }
    }
  }
  char v26 = (unsigned __int8 *)*a2;
LABEL_46:
  uint64_t v28 = (uint64_t *)a1;
LABEL_60:

  return sub_1CD789230(v28, (uint64_t)v26);
}

uint64_t sub_1CB884D38(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v2 = *(void *)(i + 24);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    if (v3 == 84)
    {
      uint64_t v4 = *(void *)(v2 - 32);
      if (!v4) {
        return v4;
      }
      if (*(unsigned char *)(v4 + 16)
        || *(void *)(v4 + 24) != *(void *)(v2 + 72)
        || (*(unsigned char *)(v4 + 33) & 0x20) == 0
        || *(_DWORD *)(v4 + 36) != 1830)
      {
        return 0;
      }
    }
    else
    {
      if (v3 < 0x1C) {
        return 0;
      }
      uint64_t v4 = 0;
      if (*(unsigned __int8 *)(v2 + 16) > 0x2Du)
      {
        if (v3 != 46)
        {
          if (v3 != 82) {
            return v4;
          }
          int v7 = *(_DWORD *)(v2 + 20);
          uint64_t v8 = (v7 & 0x40000000) != 0 ? *(void *)(v2 - 8) : v2 - 32 * (v7 & 0x7FFFFFF);
          if (*(void *)(v8 + 32) == a1) {
            return 0;
          }
        }
      }
      else if (v3 != 42)
      {
        if (v3 != 44) {
          return v4;
        }
        int v5 = *(_DWORD *)(v2 + 20);
        unsigned int v6 = (v5 & 0x40000000) != 0 ? *(uint64_t **)(v2 - 8) : (uint64_t *)(v2 - 32 * (v5 & 0x7FFFFFF));
        if (v6[4] == a1)
        {
          uint64_t v9 = *v6;
          unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
          if (v9 && v10 >= 0x1C)
          {
            uint64_t v4 = 0;
            if (v10 == 46 || v10 == 49) {
              return v4;
            }
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1CB884E4C(uint64_t *a1, uint64_t *a2, const llvm::APInt *a3)
{
  v148[1] = *(int32x2_t *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  int v5 = *(_DWORD *)(*a2 + 8) >> 8;
  BOOL v6 = v5 == 8 || v5 == 16;
  int v9 = v6 || v5 == 32 || v5 == 64;
  if (*(_DWORD *)(*a2 + 8) != 13 || v9 == 0) {
    return 0;
  }
  unsigned int v11 = a3;
  int v12 = *((unsigned __int8 *)a2 + 16);
  uint64_t v13 = a1[32];
  uint64_t v14 = *(unsigned __int8 *)(v13 + 281);
  if (!*(unsigned char *)(v13 + 281) && v5 == 64) {
    return 0;
  }
  int v15 = *((_DWORD *)a2 + 5);
  if ((v15 & 0x40000000) != 0) {
    int v16 = (uint64_t *)*(a2 - 1);
  }
  else {
    int v16 = &a2[-4 * (v15 & 0x7FFFFFF)];
  }
  uint64_t MachineInstr = *v16;
  uint64_t v18 = v16[4];
  HIDWORD(v20) = v12 - 41;
  LODWORD(v20) = v12 - 41;
  uint64_t v19 = (v20 >> 1);
  uint64_t v21 = 1;
  uint64_t v22 = 0;
  int v130 = *(unsigned __int8 *)(v13 + 281);
  int v131 = (int)a3;
  switch((v20 >> 1))
  {
    case 1u:
      goto LABEL_32;
    case 2u:
      LODWORD(v21) = 0;
      uint64_t v22 = 1;
LABEL_32:
      if (!*(unsigned char *)(v13 + 281)) {
        LODWORD(v21) = 0;
      }
      int v132 = v21;
      goto LABEL_38;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      __break(1u);
      goto LABEL_184;
    default:
      if (!*(unsigned char *)(v13 + 281))
      {
        int v132 = 0;
        LODWORD(v19) = 0;
LABEL_37:
        uint64_t v22 = 1;
        goto LABEL_38;
      }
      uint64_t v19 = a2[5];
      if (!sub_1CB8841A8(MachineInstr, v19, 0))
      {
        LODWORD(v19) = 0;
        int v132 = 1;
        goto LABEL_37;
      }
      int v23 = sub_1CB8841A8(v18, v19, 0);
      LODWORD(v19) = 0;
      if (v23) {
        uint64_t v24 = v18;
      }
      else {
        uint64_t v24 = MachineInstr;
      }
      if (!v23) {
        uint64_t MachineInstr = v18;
      }
      int v132 = 1;
      uint64_t v22 = 1;
      uint64_t v18 = v24;
LABEL_38:
      int v25 = 0;
      uint64_t v26 = 0;
      v147[1] = v18;
      v148[0] = 0;
      v147[0] = MachineInstr;
      int8x16_t v146 = 0uLL;
      char v27 = 1;
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      uint64_t v142 = v4;
      unint64_t v143 = 0;
      uint64_t v141 = v4;
      uint64_t v135 = v4;
      do
      {
        char v28 = v27;
        int v29 = (void *)v147[v26];
        if (v29) {
          BOOL v30 = *((unsigned char *)v29 + 16) == 16;
        }
        else {
          BOOL v30 = 0;
        }
        if (!v30) {
          goto LABEL_74;
        }
        if ((v25 & (v19 == 0)) == 1)
        {
          uint64_t v31 = *((unsigned int *)v29 + 8);
          if (v31 > 0x40)
          {
            unint64_t v34 = *(void *)v29[3];
            if (v34 < 0x8000000000000001)
            {
              LODWORD(v19) = 0;
              goto LABEL_57;
            }
          }
          else
          {
            LODWORD(v19) = 0;
            uint64_t v32 = -v31;
            uint64_t v33 = v29[3] << v32;
            if ((v33 & 0x8000000000000000) == 0) {
              goto LABEL_57;
            }
            unint64_t v34 = v33 >> v32;
            if (v34 == 0x8000000000000000) {
              goto LABEL_57;
            }
          }
          uint64_t v35 = (void **)*v29;
          uint64_t v36 = -(uint64_t)v34;
          uint64_t v37 = (llvm::ConstantInt *)*v35;
          unsigned int v38 = *((_DWORD *)v35 + 2);
          DWORD2(v139) = v38 >> 8;
          if (v38 >> 8 > 0x40) {
            operator new[]();
          }
          if (v38 <= 0xFF) {
            unint64_t v39 = 0;
          }
          else {
            unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v38) + 63);
          }
          *(void *)&long long v139 = v39 & v36;
          int v29 = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v139, a3);
          uint64_t v4 = v135;
          if (DWORD2(v139) >= 0x41 && (void)v139) {
            MEMORY[0x1D25D9CB0](v139, 0x1000C8000313F17);
          }
          uint64_t v22 = 0;
          LODWORD(v19) = 1;
        }
LABEL_57:
        uint64_t v40 = v29 + 3;
        unsigned int v41 = *((_DWORD *)v29 + 8);
        uint64_t v42 = v29 + 3;
        if (v41 >= 0x41) {
          uint64_t v42 = (void *)*v40;
        }
        if (!*((_DWORD *)v42 + 1))
        {
          if (v12 != 45) {
            goto LABEL_65;
          }
          uint64_t v43 = v29 + 3;
          if (v41 >= 0x41) {
            uint64_t v43 = (void *)*v40;
          }
          if (*v43 >> 16) {
LABEL_65:
          }
            uint64_t v44 = **(void **)*v29 + 1960;
          else {
            uint64_t v44 = **(void **)*v29 + 1936;
          }
          *(&v141 + v26) = v44;
          if (v41 > 0x40)
          {
            if ((*(void *)*v40 & 0x8000000000000000) == 0) {
              goto LABEL_71;
            }
          }
          else if ((((uint64_t)(*v40 << -(char)v41) >> -(char)v41) & 0x8000000000000000) == 0)
          {
            goto LABEL_71;
          }
          if (*(_DWORD *)(v44 + 8) >> 8 >= *(_DWORD *)(v4 + 8) >> 8)
          {
LABEL_71:
            *(&v144 + v26) = (uint64_t)v29;
            goto LABEL_72;
          }
        }
LABEL_74:
        uint64_t v45 = v22;
        uint64_t v46 = &v146.i64[v26];
        *uint64_t v46 = (uint64_t)v29;
        uint64_t result = sub_1CD3CE8A4(a1, v46, (_DWORD *)&v143 + v26, (llvm::Type **)&v141 + v26, a2[5], 1, v132 & v25);
        v148[0].i32[v26] = result;
        uint64_t v22 = v45;
        if (!result) {
          return result;
        }
LABEL_72:
        char v27 = 0;
        int v25 = 1;
        uint64_t v26 = 1;
      }
      while ((v28 & 1) != 0);
      uint64_t v49 = v144;
      uint64_t v48 = v145;
      if (v144 && v145) {
        return 0;
      }
      if ((v22 & (v144 != 0)) != 0)
      {
        uint64_t v50 = v141;
        uint64_t v51 = v142;
        int v52 = v130;
        int v3 = v131;
        uint64_t v53 = a1;
        if ((v143 & 0x1C000000000) != 0)
        {
          uint64_t v54 = v142;
          uint64_t v51 = v141;
          uint64_t v55 = v145;
        }
        else
        {
          int8x16_t v146 = vextq_s8(v146, v146, 8uLL);
          v148[0] = vrev64_s32(v148[0]);
          uint64_t v144 = v145;
          uint64_t v145 = v49;
          unint64_t v143 = __PAIR64__(v143, HIDWORD(v143));
          uint64_t v141 = v142;
          uint64_t v142 = v50;
          uint64_t v54 = v50;
          uint64_t v55 = v49;
          uint64_t v49 = v48;
        }
      }
      else
      {
        uint64_t v51 = v141;
        uint64_t v54 = v142;
        uint64_t v55 = v145;
        int v52 = v130;
        int v3 = v131;
        uint64_t v53 = a1;
      }
      int v56 = *(_DWORD *)(v4 + 8);
      int v57 = *(_DWORD *)(v4 + 8) >> 8;
      BOOL v58 = v57 == 32 && v56 == 13;
      if (v56 == 13 && v57 == 64) {
        uint64_t v59 = 2;
      }
      else {
        uint64_t v59 = v58;
      }
      unsigned int v60 = *(_DWORD *)(v51 + 8);
      BOOL v61 = v60 == 13;
      unsigned int v62 = v60 >> 8;
      BOOL v63 = v62 == 32 && v61;
      int v64 = v61 && v62 == 64;
      if (v64) {
        uint64_t v65 = 2;
      }
      else {
        uint64_t v65 = v63;
      }
      unsigned int v66 = *(_DWORD *)(v54 + 8);
      BOOL v67 = v66 == 13;
      unsigned int v68 = v66 >> 8;
      BOOL v69 = v68 == 32 && v67;
      int v70 = v67 && v68 == 64;
      if (v70) {
        uint64_t v71 = 2;
      }
      else {
        uint64_t v71 = v69;
      }
      if (!v52)
      {
        if (v19 == 2)
        {
          uint64_t result = 0;
          if (((v64 | v63) & 1) == 0 && ((v70 | v69) & 1) == 0)
          {
            int v72 = v55 != 0;
            uint64_t v73 = (char *)&unk_1CD91CB98 + 4 * v59;
            goto LABEL_114;
          }
          return result;
        }
        BOOL v6 = v49 == 0;
        uint64_t v75 = 2;
        if (!v6) {
          LODWORD(v65) = 2;
        }
        if (!v55) {
          uint64_t v75 = v71;
        }
        uint64_t v76 = (char *)&unk_1CD91CB50 + 36 * v19 + 18 * v59 + 6 * v65;
LABEL_125:
        unint64_t v74 = &v76[2 * v75];
        goto LABEL_126;
      }
      if (v19 != 2)
      {
        BOOL v6 = v49 == 0;
        uint64_t v75 = 3;
        if (!v6) {
          uint64_t v65 = 3;
        }
        if (!v55) {
          uint64_t v75 = v71;
        }
        uint64_t v76 = &aBD86204JHF[96 * v19 + 32 * v59 + 8 * v65];
        goto LABEL_125;
      }
      if ((v64 | v70)) {
        return 0;
      }
      int v72 = v71 + 2 * (v55 != 0);
      uint64_t v73 = (char *)&unk_1CD91CC60 + 16 * v59 + 8 * v65;
LABEL_114:
      unint64_t v74 = &v73[2 * v72];
LABEL_126:
      unsigned int v77 = *(unsigned __int16 *)v74;
      LODWORD(v4) = v3;
      if (v56 == 13)
      {
        LODWORD(v4) = v3;
        if (v57 == 8)
        {
          uint64_t v78 = v53[6];
          LODWORD(v4) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v78, "", 0);
          *(void *)(*(void *)(v78 + 24) + 16 * (v4 & 0x7FFFFFFF)) = &off_1E66A4180;
          uint64_t v79 = *(void *)(v78 + 8);
          if (v79) {
            (*(void (**)(uint64_t))(*(void *)v79 + 24))(v79);
          }
        }
      }
      uint64_t v80 = v53[4];
      uint64_t v14 = *(void *)(v80 + 640);
      unsigned int v11 = *(void **)(v80 + 648);
      uint64_t v81 = *(void *)(v53[12] + 8) + 48 * v77;
      uint64_t v19 = *(void *)(v14 + 32);
      uint64_t v82 = (unsigned __int8 *)v53[9];
      int v136 = (llvm::MachineFunction *)v82;
      if (v82) {
        llvm::MetadataTracking::track((uint64_t)&v136, v82, 2);
      }
      uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr((llvm::MachineFunction *)v19, v81, (unsigned __int8 **)&v136, 0);
      uint64_t v21 = (uint64_t)v136;
      if (v136)
      {
LABEL_184:
        int v122 = *(unsigned __int8 *)v21;
        if ((v122 - 4) > 0x1E)
        {
          if ((v122 - 3) >= 0xFFFFFFFE) {
            uint64_t v128 = v21;
          }
          else {
            uint64_t v128 = 0;
          }
          if ((v122 - 3) < 0xFFFFFFFE)
          {
            if (v122 == 3) {
              *(void *)(v21 + 8) = 0;
            }
            goto LABEL_133;
          }
          unint64_t v124 = v128 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v21 + 1) & 0x7F) != 2 && !*(_DWORD *)(v21 + 12)) {
            goto LABEL_133;
          }
          uint64_t v123 = *(void *)(v21 + 16);
          if ((v123 & 4) == 0) {
            goto LABEL_133;
          }
          unint64_t v124 = v123 & 0xFFFFFFFFFFFFFFF8;
          if (!v124) {
            goto LABEL_133;
          }
        }
        *(void *)&long long v139 = &v136;
        sub_1CC5FA668(v124 + 16, &v139);
      }
LABEL_133:
      uint64_t v83 = *(void *)(v14 + 40);
      *(void *)(MachineInstr + 24) = v83;
      uint64_t v84 = *(void *)(v83 + 32);
      uint64_t v85 = *(unsigned int *)(MachineInstr + 40);
      if (v85)
      {
        uint64_t v108 = *(void *)(MachineInstr + 32);
        uint64_t v109 = *(void *)(v84 + 40);
        uint64_t v110 = 32 * v85;
        do
        {
          if (!*(unsigned char *)v108)
          {
            uint64_t v111 = *(unsigned int *)(v108 + 4);
            if ((int)v111 >= 0) {
              uint64_t v112 = (uint64_t *)(*(void *)(v109 + 272) + 8 * v111);
            }
            else {
              uint64_t v112 = (uint64_t *)(*(void *)(v109 + 24) + 16 * (v111 & 0x7FFFFFFF) + 8);
            }
            uint64_t v113 = *v112;
            if (*v112)
            {
              uint64_t v114 = *(void *)(v113 + 16);
              *(void *)(v113 + 16) = v108;
              *(void *)(v108 + 16) = v114;
              if (*(unsigned char *)(v108 + 3))
              {
                *(void *)(v108 + 24) = v113;
              }
              else
              {
                *(void *)(v108 + 24) = 0;
                uint64_t v112 = (uint64_t *)(v114 + 24);
              }
            }
            else
            {
              *(void *)(v108 + 16) = v108;
              *(void *)(v108 + 24) = 0;
            }
            *uint64_t v112 = v108;
          }
          v108 += 32;
          v110 -= 32;
        }
        while (v110);
      }
      uint64_t v86 = *(void *)(v84 + 728);
      if (v86) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 24))(v86, MachineInstr);
      }
      unint64_t v87 = *v11 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t MachineInstr = v87 | *(void *)MachineInstr & 7;
      *(void *)(MachineInstr + 8) = v11;
      *(void *)(v87 + 8) = MachineInstr;
      *unsigned int v11 = *v11 & 7 | MachineInstr;
      *((void *)&v139 + 1) = 0;
      long long v140 = 0uLL;
      LODWORD(v139) = 0x1000000;
      DWORD1(v139) = v4;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, (llvm::MachineFunction *)v19, (const llvm::MachineOperand *)&v139);
      LODWORD(v139) = 1;
      *((void *)&v139 + 1) = 0;
      *(void *)&long long v140 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, (llvm::MachineFunction *)v19, (const llvm::MachineOperand *)&v139);
      uint64_t v88 = 0;
      int v136 = (llvm::MachineFunction *)v19;
      uint64_t v137 = (llvm::MachineInstr *)MachineInstr;
      char v89 = 1;
      do
      {
        char v90 = v89;
        uint64_t v91 = *(&v144 + v88);
        if (v91)
        {
          uint64_t v92 = (unint64_t *)(v91 + 24);
          if (*(_DWORD *)(v91 + 32) >= 0x41u) {
            uint64_t v92 = (unint64_t *)*v92;
          }
          unint64_t v93 = *v92;
          if (v93 < 0x10000) {
            v93 |= 0x100000000uLL;
          }
        }
        else
        {
          uint64_t v94 = (unsigned char *)v146.i64[v88];
          if (!v94 || (sub_1CB8843D8((uint64_t)a1, v94, 0, &v136, 0) & 1) == 0)
          {
            __int32 v95 = v148[0].i32[v88];
            *((void *)&v139 + 1) = 0;
            LODWORD(v139) = 0;
            DWORD1(v139) = v95;
            long long v140 = 0uLL;
            llvm::MachineInstr::addOperand(v137, v136, (const llvm::MachineOperand *)&v139);
          }
          unint64_t v93 = *((unsigned int *)&v143 + v88);
        }
        LODWORD(v139) = 1;
        *((void *)&v139 + 1) = 0;
        *(void *)&long long v140 = v93;
        llvm::MachineInstr::addOperand(v137, v136, (const llvm::MachineOperand *)&v139);
        char v89 = 0;
        uint64_t v88 = 1;
      }
      while ((v90 & 1) != 0);
      LODWORD(v139) = 1;
      *((void *)&v139 + 1) = 0;
      *(void *)&long long v140 = 0;
      llvm::MachineInstr::addOperand(v137, v136, (const llvm::MachineOperand *)&v139);
      long long v139 = 0u;
      long long v140 = 0u;
      llvm::MachineInstr::addOperand(v137, v136, (const llvm::MachineOperand *)&v139);
      if (*(_DWORD *)(v135 + 8) == 2061)
      {
        uint64_t v96 = a1[4];
        uint64_t v97 = *(void *)(v96 + 640);
        unint64_t v98 = *(unint64_t **)(v96 + 648);
        uint64_t v99 = *(void *)(a1[12] + 8) + 17904;
        uint64_t v100 = *(llvm::MachineFunction **)(v97 + 32);
        uint64_t v101 = (unsigned __int8 *)a1[9];
        uint64_t v138 = v101;
        if (v101) {
          llvm::MetadataTracking::track((uint64_t)&v138, v101, 2);
        }
        uint64_t v102 = llvm::MachineFunction::CreateMachineInstr(v100, v99, &v138, 0);
        if (v138)
        {
          int v125 = *v138;
          if ((v125 - 4) > 0x1E)
          {
            if ((v125 - 3) >= 0xFFFFFFFE) {
              uint64_t v129 = v138;
            }
            else {
              uint64_t v129 = 0;
            }
            if ((v125 - 3) < 0xFFFFFFFE)
            {
              if (v125 == 3) {
                *((void *)v138 + 1) = 0;
              }
              goto LABEL_152;
            }
            unint64_t v127 = (unint64_t)(v129 + 8);
          }
          else
          {
            if ((v138[1] & 0x7F) != 2 && !*((_DWORD *)v138 + 3)) {
              goto LABEL_152;
            }
            uint64_t v126 = *((void *)v138 + 2);
            if ((v126 & 4) == 0) {
              goto LABEL_152;
            }
            unint64_t v127 = v126 & 0xFFFFFFFFFFFFFFF8;
            if (!v127) {
              goto LABEL_152;
            }
          }
          *(void *)&long long v139 = &v138;
          sub_1CC5FA668(v127 + 16, &v139);
        }
LABEL_152:
        uint64_t v103 = *(void *)(v97 + 40);
        *((void *)v102 + 3) = v103;
        uint64_t v104 = *(void *)(v103 + 32);
        uint64_t v105 = *((unsigned int *)v102 + 10);
        if (v105)
        {
          uint64_t v115 = *((void *)v102 + 4);
          uint64_t v116 = *(void *)(v104 + 40);
          uint64_t v117 = 32 * v105;
          do
          {
            if (!*(unsigned char *)v115)
            {
              uint64_t v118 = *(unsigned int *)(v115 + 4);
              if ((int)v118 >= 0) {
                unsigned int v119 = (uint64_t *)(*(void *)(v116 + 272) + 8 * v118);
              }
              else {
                unsigned int v119 = (uint64_t *)(*(void *)(v116 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
              }
              uint64_t v120 = *v119;
              if (*v119)
              {
                uint64_t v121 = *(void *)(v120 + 16);
                *(void *)(v120 + 16) = v115;
                *(void *)(v115 + 16) = v121;
                if (*(unsigned char *)(v115 + 3))
                {
                  *(void *)(v115 + 24) = v120;
                }
                else
                {
                  *(void *)(v115 + 24) = 0;
                  unsigned int v119 = (uint64_t *)(v121 + 24);
                }
              }
              else
              {
                *(void *)(v115 + 16) = v115;
                *(void *)(v115 + 24) = 0;
              }
              uint64_t *v119 = v115;
            }
            v115 += 32;
            v117 -= 32;
          }
          while (v117);
        }
        uint64_t v106 = *(void *)(v104 + 728);
        if (v106) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v106 + 24))(v106, v102);
        }
        unint64_t v107 = *v98 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v102 = v107 | *(void *)v102 & 7;
        *((void *)v102 + 1) = v98;
        *(void *)(v107 + 8) = v102;
        unint64_t *v98 = *v98 & 7 | (unint64_t)v102;
        *((void *)&v139 + 1) = 0;
        long long v140 = 0uLL;
        LODWORD(v139) = 0x1000000;
        DWORD1(v139) = v3;
        llvm::MachineInstr::addOperand(v102, v100, (const llvm::MachineOperand *)&v139);
        LODWORD(v139) = 1;
        *((void *)&v139 + 1) = 0;
        *(void *)&long long v140 = 0;
        llvm::MachineInstr::addOperand(v102, v100, (const llvm::MachineOperand *)&v139);
        *((void *)&v139 + 1) = 0;
        long long v140 = 0uLL;
        LODWORD(v139) = 0;
        DWORD1(v139) = v4;
        llvm::MachineInstr::addOperand(v102, v100, (const llvm::MachineOperand *)&v139);
        LODWORD(v139) = 1;
        *((void *)&v139 + 1) = 0;
        *(void *)&long long v140 = 0;
        llvm::MachineInstr::addOperand(v102, v100, (const llvm::MachineOperand *)&v139);
        LODWORD(v139) = 1;
        *((void *)&v139 + 1) = 0;
        *(void *)&long long v140 = 0x1000000FFLL;
        llvm::MachineInstr::addOperand(v102, v100, (const llvm::MachineOperand *)&v139);
        LODWORD(v139) = 1;
        *((void *)&v139 + 1) = 0;
        *(void *)&long long v140 = 0;
        llvm::MachineInstr::addOperand(v102, v100, (const llvm::MachineOperand *)&v139);
        long long v139 = 0u;
        long long v140 = 0u;
        llvm::MachineInstr::addOperand(v102, v100, (const llvm::MachineOperand *)&v139);
      }
      return 1;
  }
}

uint64_t sub_1CB885AD8(_DWORD *a1)
{
  int v1 = *(_DWORD *)(*(void *)a1 + 8);
  int v2 = *(_DWORD *)(*(void *)a1 + 8) >> 8;
  if (v1 == 13 && v2 == 64) {
    return 1;
  }
  uint64_t v3 = 0;
  if (v1 == 13 && v2 == 32)
  {
    int v4 = a1[5];
    if ((v4 & 0x40000000) != 0) {
      int v5 = (void *)*((void *)a1 - 1);
    }
    else {
      int v5 = &a1[-8 * (v4 & 0x7FFFFFF)];
    }
    BOOL v6 = *(unsigned __int8 *)(*v5 + 16) - 69 < 0xFFFFFFFE;
    int v7 = *(unsigned __int8 *)(v5[4] + 16);
    BOOL v8 = v7 != 67 && v7 != 68;
    return v6 | v8;
  }
  return v3;
}

uint64_t sub_1CB885B6C(uint64_t *a1, uint64_t *a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  int v7 = *(_DWORD *)(*a2 + 8) >> 8;
  BOOL v11 = v7 == 8 || v7 == 16 || v7 == 32 || v7 == 64;
  if (*(_DWORD *)(*a2 + 8) != 13 || !v11) {
    return 0;
  }
  uint64_t v14 = a1;
  unsigned int v124 = *(unsigned __int8 *)(a1[32] + 281);
  if (!*(unsigned char *)(a1[32] + 281) && v7 == 64) {
    return 0;
  }
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  int v17 = *((unsigned __int8 *)a2 + 16);
  int v143 = 0;
  char v125 = v17 == 43;
  v141[2] = a5;
  int32x2_t v142 = 0;
  v141[0] = a3;
  v141[1] = a4;
  int8x16_t v139 = 0uLL;
  uint64_t v140 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  int v135 = 0;
  uint64_t v18 = &v134;
  uint64_t v133 = v6;
  int32x2_t v134 = 0;
  uint64_t v131 = v6;
  uint64_t v132 = v6;
  uint64_t v122 = v6;
  do
  {
    uint64_t v19 = v141[v16];
    if (v19) {
      BOOL v20 = *(unsigned char *)(v19 + 16) == 16;
    }
    else {
      BOOL v20 = 0;
    }
    if (!v20) {
      goto LABEL_55;
    }
    if (v16 != 2)
    {
LABEL_30:
      uint64_t v24 = (void *)v141[v16];
      goto LABEL_31;
    }
    unsigned int v21 = *(_DWORD *)(v19 + 32);
    if (v21 > 0x40)
    {
      uint64_t v23 = **(void **)(v19 + 24);
      if ((v23 & 0x8000000000000000) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v22 = *(void *)(v19 + 24) << -(char)v21;
      if ((v22 & 0x8000000000000000) == 0) {
        goto LABEL_30;
      }
      uint64_t v23 = v22 >> (64 - v21);
    }
    uint64_t v32 = -v23;
    uint64_t v33 = **(llvm::ConstantInt ***)v19;
    unsigned int v34 = *(_DWORD *)(*(void *)v19 + 8);
    DWORD2(v129) = v34 >> 8;
    if (v34 >> 8 > 0x40) {
      operator new[]();
    }
    if (v34 <= 0xFF) {
      unint64_t v35 = 0;
    }
    else {
      unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v34) + 63);
    }
    *(void *)&long long v129 = v35 & v32;
    uint64_t v24 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v129, a3);
    uint64_t v6 = v122;
    uint64_t v14 = a1;
    if (DWORD2(v129) >= 0x41 && (void)v129) {
      MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
    }
    v125 ^= 1u;
LABEL_31:
    int v25 = v24 + 3;
    unsigned int v26 = *((_DWORD *)v24 + 8);
    char v27 = v24 + 3;
    if (v26 >= 0x41) {
      char v27 = (unint64_t *)*v25;
    }
    if (*((_DWORD *)v27 + 1)) {
      goto LABEL_55;
    }
    if (v16 >= 2)
    {
      BOOL v30 = (void **)*a2;
LABEL_40:
      uint64_t v31 = **v30 + 1960;
      goto LABEL_41;
    }
    char v28 = v24 + 3;
    if (v26 >= 0x41) {
      char v28 = (unint64_t *)*v25;
    }
    unint64_t v29 = *v28;
    BOOL v30 = (void **)*a2;
    if (v29 >> 16) {
      goto LABEL_40;
    }
    uint64_t v31 = **v30 + 1936;
LABEL_41:
    *(&v131 + v16) = v31;
    if (v26 > 0x40)
    {
      if ((*(void *)*v25 & 0x8000000000000000) == 0) {
        goto LABEL_46;
      }
    }
    else if ((((uint64_t)(*v25 << -(char)v26) >> -(char)v26) & 0x8000000000000000) == 0)
    {
      goto LABEL_46;
    }
    if (*(_DWORD *)(v31 + 8) >> 8 >= *(_DWORD *)(v6 + 8) >> 8)
    {
LABEL_46:
      *(&v136 + v16) = (uint64_t)v24;
      goto LABEL_47;
    }
LABEL_55:
    v139.i64[v16] = v19;
    if (v124) {
      BOOL v36 = v16 == 2;
    }
    else {
      BOOL v36 = 0;
    }
    int v37 = v36;
    uint64_t result = sub_1CD3CE8A4(v14, &v139.i64[v15], v18, (llvm::Type **)((char *)&v131 + v15 * 8), a2[5], 1, v37);
    v142.i32[v16] = result;
    if (!result) {
      return result;
    }
LABEL_47:
    ++v16;
    ++v15;
    uint64_t v18 = (int32x2_t *)((char *)v18 + 4);
  }
  while (v16 != 3);
  uint64_t v39 = v136;
  if (v136 && v137) {
    return 0;
  }
  uint64_t v40 = v131;
  uint64_t v41 = v132;
  if (v136)
  {
    int8x16_t v139 = vextq_s8(v139, v139, 8uLL);
    int32x2_t v142 = vrev64_s32(v142);
    uint64_t v136 = v137;
    uint64_t v137 = v39;
    int32x2_t v134 = vrev64_s32(v134);
    uint64_t v131 = v132;
    uint64_t v132 = v40;
    uint64_t v42 = v40;
  }
  else
  {
    uint64_t v42 = v132;
    uint64_t v41 = v131;
    uint64_t v39 = v137;
  }
  int v43 = *(_DWORD *)(v6 + 8);
  int v44 = *(_DWORD *)(v6 + 8) >> 8;
  BOOL v45 = v44 == 32 && v43 == 13;
  if (v43 == 13 && v44 == 64) {
    uint64_t v46 = 2;
  }
  else {
    uint64_t v46 = v45;
  }
  unsigned int v47 = *(_DWORD *)(v41 + 8);
  BOOL v48 = v47 == 13;
  unsigned int v49 = v47 >> 8;
  BOOL v50 = v49 == 64 && v48;
  BOOL v51 = v49 == 32 && v48;
  unsigned int v52 = *(_DWORD *)(v42 + 8);
  BOOL v53 = v52 == 13;
  unsigned int v54 = v52 >> 8;
  BOOL v55 = v54 == 32 && v53;
  int v56 = v53 && v54 == 64;
  if (v56) {
    int v57 = 2;
  }
  else {
    int v57 = v55;
  }
  int v58 = *(_DWORD *)(v133 + 8) >> 8;
  BOOL v59 = v58 == 64;
  uint64_t v60 = v58 == 32 && *(_DWORD *)(v133 + 8) == 13;
  if (*(_DWORD *)(v133 + 8) == 13 && v59) {
    uint64_t v60 = 2;
  }
  uint64_t result = v124;
  if (v124)
  {
    if ((v50 | v56)) {
      return 0;
    }
    if (v39) {
      unsigned int v64 = v57 + 2;
    }
    else {
      unsigned int v64 = v57;
    }
    if (v138) {
      uint64_t v60 = 3;
    }
    BOOL v63 = (char *)&unk_1CD91CCC0 + 192 * (v125 & 1) + 64 * v46 + 32 * v51 + 8 * v64 + 2 * v60;
LABEL_109:
    unsigned int v65 = *(unsigned __int16 *)v63;
    int IncompleteVirtualRegister = a6;
    if (v43 == 13)
    {
      int IncompleteVirtualRegister = a6;
      if (v44 == 8)
      {
        uint64_t v67 = v14[6];
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v67, "", 0);
        *(void *)(*(void *)(v67 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4180;
        uint64_t v68 = *(void *)(v67 + 8);
        if (v68) {
          (*(void (**)(uint64_t))(*(void *)v68 + 24))(v68);
        }
      }
    }
    uint64_t v69 = v14[4];
    uint64_t v70 = *(void *)(v69 + 640);
    uint64_t v71 = *(unint64_t **)(v69 + 648);
    uint64_t v72 = *(void *)(v14[12] + 8) + 48 * v65;
    uint64_t v73 = *(llvm::MachineFunction **)(v70 + 32);
    unint64_t v74 = (unsigned __int8 *)v14[9];
    uint64_t v126 = v74;
    if (v74) {
      llvm::MetadataTracking::track((uint64_t)&v126, v74, 2);
    }
    uint64_t v75 = llvm::MachineFunction::CreateMachineInstr(v73, v72, &v126, 0);
    if (v126)
    {
      int v113 = *v126;
      if ((v113 - 4) > 0x1E)
      {
        if ((v113 - 3) >= 0xFFFFFFFE) {
          unsigned int v119 = v126;
        }
        else {
          unsigned int v119 = 0;
        }
        if ((v113 - 3) < 0xFFFFFFFE)
        {
          uint64_t v6 = v122;
          uint64_t v14 = a1;
          if (v113 == 3) {
            *((void *)v126 + 1) = 0;
          }
          goto LABEL_116;
        }
        unint64_t v115 = (unint64_t)(v119 + 8);
      }
      else
      {
        uint64_t v6 = v122;
        uint64_t v14 = a1;
        if ((v126[1] & 0x7F) != 2 && !*((_DWORD *)v126 + 3)) {
          goto LABEL_116;
        }
        uint64_t v114 = *((void *)v126 + 2);
        if ((v114 & 4) == 0) {
          goto LABEL_116;
        }
        unint64_t v115 = v114 & 0xFFFFFFFFFFFFFFF8;
        if (!v115) {
          goto LABEL_116;
        }
      }
      *(void *)&long long v129 = &v126;
      sub_1CC5FA668(v115 + 16, &v129);
      uint64_t v6 = v122;
      uint64_t v14 = a1;
    }
LABEL_116:
    uint64_t v76 = *(void *)(v70 + 40);
    *((void *)v75 + 3) = v76;
    uint64_t v77 = *(void *)(v76 + 32);
    uint64_t v78 = *((unsigned int *)v75 + 10);
    if (v78)
    {
      uint64_t v99 = *((void *)v75 + 4);
      uint64_t v100 = *(void *)(v77 + 40);
      uint64_t v101 = 32 * v78;
      do
      {
        if (!*(unsigned char *)v99)
        {
          uint64_t v102 = *(unsigned int *)(v99 + 4);
          if ((int)v102 >= 0) {
            uint64_t v103 = (uint64_t *)(*(void *)(v100 + 272) + 8 * v102);
          }
          else {
            uint64_t v103 = (uint64_t *)(*(void *)(v100 + 24) + 16 * (v102 & 0x7FFFFFFF) + 8);
          }
          uint64_t v104 = *v103;
          if (*v103)
          {
            uint64_t v105 = *(void *)(v104 + 16);
            *(void *)(v104 + 16) = v99;
            *(void *)(v99 + 16) = v105;
            if (*(unsigned char *)(v99 + 3))
            {
              *(void *)(v99 + 24) = v104;
            }
            else
            {
              *(void *)(v99 + 24) = 0;
              uint64_t v103 = (uint64_t *)(v105 + 24);
            }
          }
          else
          {
            *(void *)(v99 + 16) = v99;
            *(void *)(v99 + 24) = 0;
          }
          *uint64_t v103 = v99;
        }
        v99 += 32;
        v101 -= 32;
      }
      while (v101);
    }
    uint64_t v79 = *(void *)(v77 + 728);
    if (v79) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v79 + 24))(v79, v75);
    }
    unint64_t v80 = *v71 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v75 = v80 | *(void *)v75 & 7;
    *((void *)v75 + 1) = v71;
    *(void *)(v80 + 8) = v75;
    unint64_t *v71 = *v71 & 7 | (unint64_t)v75;
    *((void *)&v129 + 1) = 0;
    long long v130 = 0uLL;
    LODWORD(v129) = 0x1000000;
    DWORD1(v129) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v129);
    LODWORD(v129) = 1;
    *((void *)&v129 + 1) = 0;
    *(void *)&long long v130 = 0;
    llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v129);
    uint64_t v81 = 0;
    uint64_t v126 = (unsigned __int8 *)v73;
    unint64_t v127 = v75;
    do
    {
      uint64_t v82 = *(&v136 + v81);
      if (v82)
      {
        uint64_t v83 = (unint64_t *)(v82 + 24);
        if (*(_DWORD *)(v82 + 32) >= 0x41u) {
          uint64_t v83 = (unint64_t *)*v83;
        }
        unint64_t v84 = *v83;
        if (v84 < 0x10000) {
          v84 |= 0x100000000uLL;
        }
      }
      else
      {
        uint64_t v85 = (unsigned char *)v139.i64[v81];
        if (!v85 || (sub_1CB8843D8((uint64_t)v14, v85, 0, (llvm::MachineFunction **)&v126, 0) & 1) == 0)
        {
          __int32 v86 = v142.i32[v81];
          *((void *)&v129 + 1) = 0;
          LODWORD(v129) = 0;
          DWORD1(v129) = v86;
          long long v130 = 0uLL;
          llvm::MachineInstr::addOperand(v127, (llvm::MachineFunction *)v126, (const llvm::MachineOperand *)&v129);
        }
        unint64_t v84 = v134.u32[v81];
      }
      LODWORD(v129) = 1;
      *((void *)&v129 + 1) = 0;
      *(void *)&long long v130 = v84;
      llvm::MachineInstr::addOperand(v127, (llvm::MachineFunction *)v126, (const llvm::MachineOperand *)&v129);
      ++v81;
    }
    while (v81 != 3);
    LODWORD(v129) = 1;
    *((void *)&v129 + 1) = 0;
    *(void *)&long long v130 = 0;
    llvm::MachineInstr::addOperand(v127, (llvm::MachineFunction *)v126, (const llvm::MachineOperand *)&v129);
    long long v129 = 0u;
    long long v130 = 0u;
    llvm::MachineInstr::addOperand(v127, (llvm::MachineFunction *)v126, (const llvm::MachineOperand *)&v129);
    if (*(_DWORD *)(v6 + 8) == 2061)
    {
      uint64_t v87 = v14[4];
      uint64_t v88 = *(void *)(v87 + 640);
      char v89 = *(unint64_t **)(v87 + 648);
      uint64_t v90 = *(void *)(v14[12] + 8) + 17904;
      uint64_t v91 = *(llvm::MachineFunction **)(v88 + 32);
      uint64_t v92 = (unsigned __int8 *)v14[9];
      uint64_t v128 = v92;
      if (v92) {
        llvm::MetadataTracking::track((uint64_t)&v128, v92, 2);
      }
      unint64_t v93 = llvm::MachineFunction::CreateMachineInstr(v91, v90, &v128, 0);
      if (v128)
      {
        int v116 = *v128;
        if ((v116 - 4) > 0x1E)
        {
          if ((v116 - 3) >= 0xFFFFFFFE) {
            uint64_t v120 = v128;
          }
          else {
            uint64_t v120 = 0;
          }
          if ((v116 - 3) < 0xFFFFFFFE)
          {
            if (v116 == 3) {
              *((void *)v128 + 1) = 0;
            }
            goto LABEL_135;
          }
          unint64_t v118 = (unint64_t)(v120 + 8);
        }
        else
        {
          if ((v128[1] & 0x7F) != 2 && !*((_DWORD *)v128 + 3)) {
            goto LABEL_135;
          }
          uint64_t v117 = *((void *)v128 + 2);
          if ((v117 & 4) == 0) {
            goto LABEL_135;
          }
          unint64_t v118 = v117 & 0xFFFFFFFFFFFFFFF8;
          if (!v118) {
            goto LABEL_135;
          }
        }
        *(void *)&long long v129 = &v128;
        sub_1CC5FA668(v118 + 16, &v129);
      }
LABEL_135:
      uint64_t v94 = *(void *)(v88 + 40);
      *((void *)v93 + 3) = v94;
      uint64_t v95 = *(void *)(v94 + 32);
      uint64_t v96 = *((unsigned int *)v93 + 10);
      if (v96)
      {
        uint64_t v106 = *((void *)v93 + 4);
        uint64_t v107 = *(void *)(v95 + 40);
        uint64_t v108 = 32 * v96;
        do
        {
          if (!*(unsigned char *)v106)
          {
            uint64_t v109 = *(unsigned int *)(v106 + 4);
            if ((int)v109 >= 0) {
              uint64_t v110 = (uint64_t *)(*(void *)(v107 + 272) + 8 * v109);
            }
            else {
              uint64_t v110 = (uint64_t *)(*(void *)(v107 + 24) + 16 * (v109 & 0x7FFFFFFF) + 8);
            }
            uint64_t v111 = *v110;
            if (*v110)
            {
              uint64_t v112 = *(void *)(v111 + 16);
              *(void *)(v111 + 16) = v106;
              *(void *)(v106 + 16) = v112;
              if (*(unsigned char *)(v106 + 3))
              {
                *(void *)(v106 + 24) = v111;
              }
              else
              {
                *(void *)(v106 + 24) = 0;
                uint64_t v110 = (uint64_t *)(v112 + 24);
              }
            }
            else
            {
              *(void *)(v106 + 16) = v106;
              *(void *)(v106 + 24) = 0;
            }
            *uint64_t v110 = v106;
          }
          v106 += 32;
          v108 -= 32;
        }
        while (v108);
      }
      uint64_t v97 = *(void *)(v95 + 728);
      if (v97) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v97 + 24))(v97, v93);
      }
      unint64_t v98 = *v89 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v93 = v98 | *(void *)v93 & 7;
      *((void *)v93 + 1) = v89;
      *(void *)(v98 + 8) = v93;
      *char v89 = *v89 & 7 | (unint64_t)v93;
      *((void *)&v129 + 1) = 0;
      long long v130 = 0uLL;
      LODWORD(v129) = 0x1000000;
      DWORD1(v129) = a6;
      llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v129);
      LODWORD(v129) = 1;
      *((void *)&v129 + 1) = 0;
      *(void *)&long long v130 = 0;
      llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v129);
      *((void *)&v129 + 1) = 0;
      long long v130 = 0uLL;
      LODWORD(v129) = 0;
      DWORD1(v129) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v129);
      LODWORD(v129) = 1;
      *((void *)&v129 + 1) = 0;
      *(void *)&long long v130 = 0;
      llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v129);
      LODWORD(v129) = 1;
      *((void *)&v129 + 1) = 0;
      *(void *)&long long v130 = 0x1000000FFLL;
      llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v129);
      LODWORD(v129) = 1;
      *((void *)&v129 + 1) = 0;
      *(void *)&long long v130 = 0;
      llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v129);
      long long v129 = 0u;
      long long v130 = 0u;
      llvm::MachineInstr::addOperand(v93, v91, (const llvm::MachineOperand *)&v129);
    }
    return 1;
  }
  else if (!v50 && !v51 && ((v56 | v55) & 1) == 0)
  {
    BOOL v61 = v39 != 0;
    uint64_t v62 = 2;
    if (!v138) {
      uint64_t v62 = v60;
    }
    BOOL v63 = (char *)&unk_1CD91CC90 + 24 * (v125 & 1) + 12 * v46 + 6 * v61 + 2 * v62;
    goto LABEL_109;
  }
  return result;
}

uint64_t sub_1CB8866A8(uint64_t a1, unsigned __int8 *a2, int a3, int a4, unsigned int a5, int a6)
{
  v208[5] = *(const llvm::APInt **)MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  int v7 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if ((v7 | 2) != 2) {
    return 0;
  }
  int v10 = a2[16] - 28;
  unint64_t v206 = 0;
  unint64_t v207 = 0;
  int v205 = 0;
  int8x16_t v204 = 0uLL;
  long long v203 = 0uLL;
  BOOL v11 = a4 == 1 && v7 == 0;
  int v12 = v11;
  HIBYTE(v192) = v12;
  if (v10 == 12)
  {
    int v205 = llvm::ConstantFP::get((llvm::ConstantFP **)v6, (llvm::Type *)a2, 0.0);
    int v13 = *((_DWORD *)a2 + 5);
    uint64_t v14 = (v13 & 0x40000000) != 0 ? (uint64_t *)*((void *)a2 - 1) : (uint64_t *)&a2[-32 * (v13 & 0x7FFFFFF)];
    unint64_t v206 = (unsigned __int8 *)*v14;
    int v10 = 16;
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = *((_DWORD *)a2 + 5);
    char v17 = 1;
    do
    {
      char v18 = v17;
      uint64_t v19 = &a2[-32 * (v16 & 0x7FFFFFF)];
      if ((v16 & 0x40000000) != 0) {
        uint64_t v19 = (unsigned __int8 *)*((void *)a2 - 1);
      }
      char v17 = 0;
      *(&v205 + v15) = *(const llvm::detail::DoubleAPFloat **)&v19[32 * v15];
      uint64_t v15 = 1;
    }
    while ((v18 & 1) != 0);
  }
  uint64_t v20 = 0;
  char v21 = 1;
  do
  {
    char v22 = v21;
    uint64_t v23 = (llvm::ConstantFP ***)*(&v205 + v20);
    if (v23) {
      BOOL v24 = *((unsigned char *)v23 + 16) == 17;
    }
    else {
      BOOL v24 = 0;
    }
    if (v24)
    {
      uint64_t v23 = sub_1CD3CA5D4(a1, (uint64_t *)v23);
      int v25 = (int8x16_t *)&v203;
    }
    else
    {
      int v25 = &v204;
    }
    char v21 = 0;
    v25->i64[v20] = (uint64_t)v23;
    uint64_t v20 = 1;
  }
  while ((v22 & 1) != 0);
  unsigned int v26 = (void *)*((void *)&v203 + 1);
  char v27 = (void *)v203;
  if ((void)v203 && *((void *)&v203 + 1) != 0) {
    return 0;
  }
  int v29 = *(unsigned __int8 *)(v6 + 8);
  BOOL v191 = *(unsigned char *)(v6 + 8) == 0;
  LOBYTE(v192) = v191;
  int v190 = (void *)a1;
  if (v10 != 21) {
    goto LABEL_41;
  }
  if (*((void *)&v203 + 1))
  {
    int v30 = *(unsigned __int8 *)(**((void **)&v203 + 1) + 8);
    if (!*(unsigned char *)(**((void **)&v203 + 1) + 8) || *(unsigned char *)(a1 + 280))
    {
LABEL_38:
      if (v30)
      {
        LODWORD(v208[1]) = 32;
        v208[0] = (const llvm::APInt *)1065353216;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v199, v208);
        v208[1] = (const llvm::APInt *)v199;
        v208[2] = v200;
        LODWORD(v208[3]) = v201;
        BYTE4(v208[3]) = BYTE4(v208[3]) & 0xF0 | BYTE4(v201) & 0xF;
        sub_1CB887A54((uint64_t)v208, (uint64_t)v26 + 24, 1);
        unsigned int v26 = llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)v208, v31);
        *((void *)&v203 + 1) = v26;
        if ((_UNKNOWN *)v208[1] != &unk_1CFB2E344)
        {
          if ((*((_DWORD *)v208[1] + 2) - 64) > 0xFFFFFF7F) {
            goto LABEL_41;
          }
          uint64_t v133 = v208[2];
          if (!v208[2]) {
            goto LABEL_41;
          }
          goto LABEL_205;
        }
      }
      else
      {
        LODWORD(v200) = 16;
        uint64_t v199 = 15360;
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v208[1], (const llvm::APInt **)&v199);
        sub_1CB887A54((uint64_t)v208, (uint64_t)v26 + 24, 1);
        uint64_t v132 = (uint64_t *)llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)v208, v131);
        unsigned int v26 = sub_1CD3CA5D4(a1, v132);
        *((void *)&v203 + 1) = v26;
        if ((_UNKNOWN *)v208[1] != &unk_1CFB2E344)
        {
          if ((*((_DWORD *)v208[1] + 2) - 64) > 0xFFFFFF7F) {
            goto LABEL_41;
          }
          uint64_t v133 = v208[2];
          if (!v208[2]) {
            goto LABEL_41;
          }
LABEL_205:
          MEMORY[0x1D25D9CB0](v133, 0x1000C8000313F17);
          goto LABEL_41;
        }
      }
      sub_1CB845718((uint64_t *)&v208[2]);
LABEL_41:
      int v32 = 0;
      unsigned int v33 = 0;
LABEL_42:
      if (((v10 - 14) & 0xFFFFFFFD) != 0) {
        int v34 = 1;
      }
      else {
        int v34 = 3;
      }
      if (a6 != 1) {
        int v34 = 0;
      }
      if (v10 == 16) {
        v34 ^= 2u;
      }
      BOOL v36 = v10 == 18 || v10 == 21;
      if (v26) {
        BOOL v37 = v36;
      }
      else {
        BOOL v37 = 0;
      }
      if (v34 == 1 && v37) {
        unsigned int v38 = 2;
      }
      else {
        unsigned int v38 = v34;
      }
      BOOL v182 = v36;
      if (v27)
      {
        int8x16_t v204 = vextq_s8(v204, v204, 8uLL);
        unint64_t v207 = __PAIR64__(v33, v32);
        *(void *)&long long v203 = v26;
        *((void *)&v203 + 1) = v27;
        BOOL v39 = v191;
        BOOL v191 = v192;
        LOBYTE(v192) = v39;
        unsigned int v38 = __rbit32(v38) >> 30;
        long long v188 = v27;
      }
      else
      {
        long long v188 = v26;
      }
      uint64_t v40 = 0;
      char v41 = 1;
      v195[0] = 0;
      do
      {
        char v42 = v41;
        if ((v38 >> v40)) {
          *((_DWORD *)v195 + v40) = 2;
        }
        int v43 = &v204.i64[v40];
        if (*v43)
        {
          int v44 = sub_1CB88467C((uint64_t)v190, v43, (int *)v195 + v40, &v191 + v40, v12, *((void *)a2 + 5), 7, 1);
          *((_DWORD *)&v208[-1] + v40) = v44;
          if (!v44) {
            return 0;
          }
        }
        char v41 = 0;
        uint64_t v40 = 1;
      }
      while ((v42 & 1) != 0);
      if (!sub_1CB884248((uint64_t)v190, (uint64_t)a2, v204.i64, &v207, (int *)v195, (unsigned char *)&v192 + 1, &v191, 2u))return 0; {
      int v45 = v192;
      }
      if (v188) {
        int v45 = 2;
      }
      uint64_t v46 = (char *)&unk_1CD91CE40 + 48 * v182 + 24 * (a4 == 1) + 12 * v191 + 4 * v45 + 2 * a5;
      int v189 = HIBYTE(v192);
      if (HIBYTE(v192)) {
        uint64_t v46 = (char *)&unk_1CD91CEA0 + 8 * v182 + 4 * (v45 - 1) + 2 * a5;
      }
      uint64_t v47 = v190[4];
      uint64_t v48 = *(void *)(v47 + 640);
      unsigned int v49 = *(unint64_t **)(v47 + 648);
      uint64_t v50 = *(void *)(v190[12] + 8) + 48 * *(unsigned __int16 *)v46;
      BOOL v51 = *(llvm::MachineFunction **)(v48 + 32);
      unsigned int v52 = (unsigned __int8 *)v190[9];
      uint64_t v199 = (uint64_t)v52;
      if (v52) {
        llvm::MetadataTracking::track((uint64_t)&v199, v52, 2);
      }
      uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v51, v50, (unsigned __int8 **)&v199, 0);
      if (v199)
      {
        int v166 = *(unsigned __int8 *)v199;
        if ((v166 - 4) > 0x1E)
        {
          if ((v166 - 3) >= 0xFFFFFFFE) {
            uint64_t v169 = v199;
          }
          else {
            uint64_t v169 = 0;
          }
          if ((v166 - 3) < 0xFFFFFFFE)
          {
            if (v166 == 3) {
              *(void *)(v199 + 8) = 0;
            }
            goto LABEL_78;
          }
          unint64_t v168 = v169 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v199 + 1) & 0x7F) != 2 && !*(_DWORD *)(v199 + 12)) {
            goto LABEL_78;
          }
          uint64_t v167 = *(void *)(v199 + 16);
          if ((v167 & 4) == 0) {
            goto LABEL_78;
          }
          unint64_t v168 = v167 & 0xFFFFFFFFFFFFFFF8;
          if (!v168) {
            goto LABEL_78;
          }
        }
        v208[0] = (const llvm::APInt *)&v199;
        sub_1CC5FA668(v168 + 16, v208);
      }
LABEL_78:
      uint64_t v54 = *(void *)(v48 + 40);
      *((void *)MachineInstr + 3) = v54;
      uint64_t v55 = *(void *)(v54 + 32);
      uint64_t v56 = *((unsigned int *)MachineInstr + 10);
      if (v56)
      {
        uint64_t v138 = *((void *)MachineInstr + 4);
        uint64_t v139 = *(void *)(v55 + 40);
        uint64_t v140 = 32 * v56;
        do
        {
          if (!*(unsigned char *)v138)
          {
            uint64_t v141 = *(unsigned int *)(v138 + 4);
            if ((int)v141 >= 0) {
              int32x2_t v142 = (uint64_t *)(*(void *)(v139 + 272) + 8 * v141);
            }
            else {
              int32x2_t v142 = (uint64_t *)(*(void *)(v139 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8);
            }
            uint64_t v143 = *v142;
            if (*v142)
            {
              uint64_t v144 = *(void *)(v143 + 16);
              *(void *)(v143 + 16) = v138;
              *(void *)(v138 + 16) = v144;
              if (*(unsigned char *)(v138 + 3))
              {
                *(void *)(v138 + 24) = v143;
              }
              else
              {
                *(void *)(v138 + 24) = 0;
                int32x2_t v142 = (uint64_t *)(v144 + 24);
              }
            }
            else
            {
              *(void *)(v138 + 16) = v138;
              *(void *)(v138 + 24) = 0;
            }
            *int32x2_t v142 = v138;
          }
          v138 += 32;
          v140 -= 32;
        }
        while (v140);
      }
      uint64_t v57 = *(void *)(v55 + 728);
      if (v57) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v57 + 24))(v57, MachineInstr);
      }
      unint64_t v58 = *v49 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t MachineInstr = v58 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v49;
      *(void *)(v58 + 8) = MachineInstr;
      *unsigned int v49 = *v49 & 7 | (unint64_t)MachineInstr;
      memset(&v208[1], 0, 24);
      LODWORD(v208[0]) = 0x1000000;
      HIDWORD(v208[0]) = a3;
      llvm::MachineInstr::addOperand(MachineInstr, v51, (const llvm::MachineOperand *)v208);
      LODWORD(v208[0]) = 1;
      v208[1] = 0;
      v208[2] = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v51, (const llvm::MachineOperand *)v208);
      uint64_t v59 = 0;
      uint64_t v199 = (uint64_t)v51;
      uint64_t v200 = MachineInstr;
      char v60 = 1;
      do
      {
        char v61 = v60;
        uint64_t v62 = (void *)*((void *)&v203 + v59);
        if (v62)
        {
          int v63 = *(unsigned __int8 *)(*v62 + 8);
          unsigned int v65 = (void *)v62[4];
          unsigned int v64 = (llvm::detail::DoubleAPFloat *)(v62 + 4);
          if (v65 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v64, (llvm::APInt *)v208);
          }
          else {
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v64, (uint64_t)v208);
          }
          unsigned int v66 = v208;
          if (LODWORD(v208[1]) >= 0x41) {
            unsigned int v66 = (const llvm::APInt **)v208[0];
          }
          uint64_t v67 = (uint64_t)*v66;
          if (LODWORD(v208[1]) >= 0x41 && v208[0] != 0) {
            MEMORY[0x1D25D9CB0]();
          }
          uint64_t v69 = v67 | 0x100000000;
          if (v63) {
            uint64_t v69 = v67;
          }
          uint64_t v70 = 0x80000000;
          if (!v63) {
            uint64_t v70 = 0x8000;
          }
          if ((*((_DWORD *)v195 + v59) & 2) != 0) {
            uint64_t v71 = v70;
          }
          else {
            uint64_t v71 = 0;
          }
          uint64_t v73 = (llvm::MachineFunction *)v199;
          uint64_t v72 = v200;
          LODWORD(v208[0]) = 1;
          unint64_t v74 = (const llvm::APInt *)(v71 ^ v69);
        }
        else
        {
          uint64_t v75 = (unsigned char *)v204.i64[v59];
          if (!v75 || (sub_1CB8843D8((uint64_t)v190, v75, v189 != 0, (llvm::MachineFunction **)&v199, 0) & 1) == 0)
          {
            int v76 = *((_DWORD *)&v208[-1] + v59);
            memset(&v208[1], 0, 24);
            LODWORD(v208[0]) = 0;
            HIDWORD(v208[0]) = v76;
            llvm::MachineInstr::addOperand(v200, (llvm::MachineFunction *)v199, (const llvm::MachineOperand *)v208);
          }
          unint64_t v74 = (const llvm::APInt *)*((unsigned int *)v195 + v59);
          uint64_t v73 = (llvm::MachineFunction *)v199;
          uint64_t v72 = v200;
          LODWORD(v208[0]) = 1;
        }
        v208[1] = 0;
        v208[2] = v74;
        llvm::MachineInstr::addOperand(v72, v73, (const llvm::MachineOperand *)v208);
        char v60 = 0;
        uint64_t v59 = 1;
      }
      while ((v61 & 1) != 0);
      uint64_t v78 = 1;
      LODWORD(v208[0]) = 1;
      v208[1] = 0;
      v208[2] = 0;
      llvm::MachineInstr::addOperand(v200, (llvm::MachineFunction *)v199, (const llvm::MachineOperand *)v208);
      memset(v208, 0, 32);
      llvm::MachineInstr::addOperand(v200, (llvm::MachineFunction *)v199, (const llvm::MachineOperand *)v208);
      return v78;
    }
    if (fabsf(llvm::APFloat::convertToFloat((llvm::APFloat *)(*((void *)&v203 + 1) + 24))) < 8.5071e37)
    {
      int v30 = *(unsigned __int8 *)(*(void *)v26 + 8);
      goto LABEL_38;
    }
    uint64_t v79 = v26;
    int v29 = *(unsigned __int8 *)(v6 + 8);
  }
  else
  {
    uint64_t v79 = 0;
  }
  if (v29 && !*(unsigned char *)(a1 + 280))
  {
    uint64_t v80 = *(void *)(a1 + 48);
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v80, "", 0);
    uint64_t v82 = (llvm::Type *)IncompleteVirtualRegister;
    *(void *)(*(void *)(v80 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4340;
    uint64_t v83 = *(void *)(v80 + 8);
    if (v83) {
      (*(void (**)(uint64_t))(*(void *)v83 + 24))(v83);
    }
    uint64_t v200 = 0;
    uint64_t v201 = 0;
    uint64_t v202 = 0;
    int v198 = 0;
    uint64_t v197 = 0;
    v195[0] = 0;
    v195[1] = llvm::ConstantFP::get((llvm::ConstantFP **)v6, v82, -8.50705917e37);
    v195[2] = llvm::ConstantFP::get((llvm::ConstantFP **)v6, v84, 0.25);
    v195[3] = llvm::ConstantFP::get((llvm::ConstantFP **)v6, v85, 1.0);
    long long v194 = xmmword_1CD91CB40;
    LODWORD(v207) = sub_1CD789230((uint64_t *)a1, (uint64_t)v205);
    __int32 v86 = v206;
    int v87 = sub_1CD789230((uint64_t *)a1, (uint64_t)v206);
    HIDWORD(v207) = v87;
    int v196 = v87;
    uint64_t v199 = (uint64_t)v86;
    sub_1CB887A74((void *)a1, 2, 0xEu, 0, IncompleteVirtualRegister, 0, 0, (uint64_t)&v199, &v196, v195, (unsigned int *)&v194);
    uint64_t v88 = *(void *)(a1 + 48);
    int v183 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v88, "", 0);
    *(void *)(*(void *)(v88 + 24) + 16 * (v183 & 0x7FFFFFFF)) = &off_1E66A4340;
    uint64_t v89 = *(void *)(v88 + 8);
    if (v89) {
      (*(void (**)(uint64_t))(*(void *)v89 + 24))(v89);
    }
    uint64_t v90 = *(void *)(a1 + 32);
    uint64_t v91 = *(void *)(v90 + 640);
    uint64_t v92 = *(unint64_t **)(v90 + 648);
    uint64_t v93 = *(void *)(*(void *)(a1 + 96) + 8) + 61776;
    uint64_t v94 = a1;
    uint64_t v95 = *(llvm::MachineFunction **)(v91 + 32);
    uint64_t v96 = *(unsigned __int8 **)(v94 + 72);
    uint64_t v193 = v96;
    if (v96) {
      llvm::MetadataTracking::track((uint64_t)&v193, v96, 2);
    }
    uint64_t v97 = llvm::MachineFunction::CreateMachineInstr(v95, v93, &v193, 0);
    if (!v193)
    {
LABEL_119:
      uint64_t v98 = *(void *)(v91 + 40);
      *((void *)v97 + 3) = v98;
      uint64_t v99 = *(void *)(v98 + 32);
      uint64_t v100 = *((unsigned int *)v97 + 10);
      if (v100)
      {
        uint64_t v145 = *((void *)v97 + 4);
        uint64_t v146 = *(void *)(v99 + 40);
        uint64_t v147 = 32 * v100;
        do
        {
          if (!*(unsigned char *)v145)
          {
            uint64_t v148 = *(unsigned int *)(v145 + 4);
            if ((int)v148 >= 0) {
              uint64_t v149 = (uint64_t *)(*(void *)(v146 + 272) + 8 * v148);
            }
            else {
              uint64_t v149 = (uint64_t *)(*(void *)(v146 + 24) + 16 * (v148 & 0x7FFFFFFF) + 8);
            }
            uint64_t v150 = *v149;
            if (*v149)
            {
              uint64_t v151 = *(void *)(v150 + 16);
              *(void *)(v150 + 16) = v145;
              *(void *)(v145 + 16) = v151;
              if (*(unsigned char *)(v145 + 3))
              {
                *(void *)(v145 + 24) = v150;
              }
              else
              {
                *(void *)(v145 + 24) = 0;
                uint64_t v149 = (uint64_t *)(v151 + 24);
              }
            }
            else
            {
              *(void *)(v145 + 16) = v145;
              *(void *)(v145 + 24) = 0;
            }
            *uint64_t v149 = v145;
          }
          v145 += 32;
          v147 -= 32;
        }
        while (v147);
      }
      uint64_t v101 = *(void *)(v99 + 728);
      if (v101) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v101 + 24))(v101, v97);
      }
      unint64_t v102 = *v92 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v97 = v102 | *(void *)v97 & 7;
      *((void *)v97 + 1) = v92;
      *(void *)(v102 + 8) = v97;
      *uint64_t v92 = *v92 & 7 | (unint64_t)v97;
      memset(&v208[1], 0, 24);
      LODWORD(v208[0]) = 0x1000000;
      HIDWORD(v208[0]) = v183;
      llvm::MachineInstr::addOperand(v97, v95, (const llvm::MachineOperand *)v208);
      LODWORD(v208[0]) = 1;
      v208[1] = 0;
      v208[2] = 0;
      llvm::MachineInstr::addOperand(v97, v95, (const llvm::MachineOperand *)v208);
      memset(&v208[1], 0, 24);
      LODWORD(v208[0]) = 0;
      HIDWORD(v208[0]) = v87;
      llvm::MachineInstr::addOperand(v97, v95, (const llvm::MachineOperand *)v208);
      LODWORD(v208[0]) = 1;
      v208[1] = 0;
      v208[2] = 0;
      llvm::MachineInstr::addOperand(v97, v95, (const llvm::MachineOperand *)v208);
      memset(&v208[1], 0, 24);
      LODWORD(v208[0]) = 0;
      HIDWORD(v208[0]) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v97, v95, (const llvm::MachineOperand *)v208);
      LODWORD(v208[0]) = 1;
      v208[1] = 0;
      v208[2] = 0;
      llvm::MachineInstr::addOperand(v97, v95, (const llvm::MachineOperand *)v208);
      LODWORD(v208[0]) = 1;
      v208[1] = 0;
      v208[2] = 0;
      llvm::MachineInstr::addOperand(v97, v95, (const llvm::MachineOperand *)v208);
      memset(v208, 0, 32);
      llvm::MachineInstr::addOperand(v97, v95, (const llvm::MachineOperand *)v208);
      uint64_t v103 = v190[6];
      int v32 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v103, "", 0);
      *(void *)(*(void *)(v103 + 24) + 16 * (v32 & 0x7FFFFFFF)) = &off_1E66A4340;
      uint64_t v104 = *(void *)(v103 + 8);
      if (v104) {
        (*(void (**)(uint64_t))(*(void *)v104 + 24))(v104);
      }
      uint64_t v105 = v190[4];
      uint64_t v106 = *(void *)(v105 + 640);
      uint64_t v107 = *(unint64_t **)(v105 + 648);
      uint64_t v108 = *(void *)(v190[12] + 8) + 61776;
      uint64_t v109 = *(llvm::MachineFunction **)(v106 + 32);
      uint64_t v110 = (unsigned __int8 *)v190[9];
      uint64_t v193 = v110;
      if (v110) {
        llvm::MetadataTracking::track((uint64_t)&v193, v110, 2);
      }
      uint64_t v111 = llvm::MachineFunction::CreateMachineInstr(v109, v108, &v193, 0);
      if (!v193)
      {
LABEL_127:
        uint64_t v112 = *(void *)(v106 + 40);
        *((void *)v111 + 3) = v112;
        uint64_t v113 = *(void *)(v112 + 32);
        uint64_t v114 = *((unsigned int *)v111 + 10);
        if (v114)
        {
          uint64_t v152 = *((void *)v111 + 4);
          uint64_t v153 = *(void *)(v113 + 40);
          uint64_t v154 = 32 * v114;
          do
          {
            if (!*(unsigned char *)v152)
            {
              uint64_t v155 = *(unsigned int *)(v152 + 4);
              if ((int)v155 >= 0) {
                uint64_t v156 = (uint64_t *)(*(void *)(v153 + 272) + 8 * v155);
              }
              else {
                uint64_t v156 = (uint64_t *)(*(void *)(v153 + 24) + 16 * (v155 & 0x7FFFFFFF) + 8);
              }
              uint64_t v157 = *v156;
              if (*v156)
              {
                uint64_t v158 = *(void *)(v157 + 16);
                *(void *)(v157 + 16) = v152;
                *(void *)(v152 + 16) = v158;
                if (*(unsigned char *)(v152 + 3))
                {
                  *(void *)(v152 + 24) = v157;
                }
                else
                {
                  *(void *)(v152 + 24) = 0;
                  uint64_t v156 = (uint64_t *)(v158 + 24);
                }
              }
              else
              {
                *(void *)(v152 + 16) = v152;
                *(void *)(v152 + 24) = 0;
              }
              *uint64_t v156 = v152;
            }
            v152 += 32;
            v154 -= 32;
          }
          while (v154);
        }
        uint64_t v115 = *(void *)(v113 + 728);
        if (v115) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v115 + 24))(v115, v111);
        }
        unint64_t v116 = *v107 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v111 = v116 | *(void *)v111 & 7;
        *((void *)v111 + 1) = v107;
        *(void *)(v116 + 8) = v111;
        *uint64_t v107 = *v107 & 7 | (unint64_t)v111;
        memset(&v208[1], 0, 24);
        LODWORD(v208[0]) = 0x1000000;
        HIDWORD(v208[0]) = v32;
        llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)v208);
        LODWORD(v208[0]) = 1;
        v208[1] = 0;
        v208[2] = 0;
        llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)v208);
        memset(&v208[1], 0, 24);
        LODWORD(v208[0]) = 0;
        HIDWORD(v208[0]) = v207;
        llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)v208);
        LODWORD(v208[0]) = 1;
        v208[1] = 0;
        v208[2] = 0;
        llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)v208);
        memset(&v208[1], 0, 24);
        LODWORD(v208[0]) = 0;
        HIDWORD(v208[0]) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)v208);
        LODWORD(v208[0]) = 1;
        v208[1] = 0;
        v208[2] = 0;
        llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)v208);
        LODWORD(v208[0]) = 1;
        v208[1] = 0;
        v208[2] = 0;
        llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)v208);
        memset(v208, 0, 32);
        llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)v208);
        uint64_t v117 = v190[6];
        unsigned int v33 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v117, "", 0);
        *(void *)(*(void *)(v117 + 24) + 16 * (v33 & 0x7FFFFFFF)) = &off_1E66A4340;
        uint64_t v118 = *(void *)(v117 + 8);
        if (v118) {
          (*(void (**)(uint64_t))(*(void *)v118 + 24))(v118);
        }
        uint64_t v119 = v190[4];
        uint64_t v120 = *(void *)(v119 + 640);
        uint64_t v121 = *(unint64_t **)(v119 + 648);
        uint64_t v122 = *(void *)(v190[12] + 8) + 62928;
        uint64_t v123 = *(llvm::MachineFunction **)(v120 + 32);
        unsigned int v124 = (unsigned __int8 *)v190[9];
        uint64_t v193 = v124;
        if (v124) {
          llvm::MetadataTracking::track((uint64_t)&v193, v124, 2);
        }
        char v125 = llvm::MachineFunction::CreateMachineInstr(v123, v122, &v193, 0);
        if (!v193) {
          goto LABEL_135;
        }
        int v176 = *v193;
        if ((v176 - 4) > 0x1E)
        {
          if ((v176 - 3) >= 0xFFFFFFFE) {
            int v181 = v193;
          }
          else {
            int v181 = 0;
          }
          if ((v176 - 3) < 0xFFFFFFFE)
          {
            if (v176 == 3) {
              *((void *)v193 + 1) = 0;
            }
            goto LABEL_135;
          }
          unint64_t v178 = (unint64_t)(v181 + 8);
        }
        else
        {
          if ((v193[1] & 0x7F) != 2 && !*((_DWORD *)v193 + 3)) {
            goto LABEL_135;
          }
          uint64_t v177 = *((void *)v193 + 2);
          if ((v177 & 4) == 0) {
            goto LABEL_135;
          }
          unint64_t v178 = v177 & 0xFFFFFFFFFFFFFFF8;
          if (!v178) {
            goto LABEL_135;
          }
        }
        v208[0] = (const llvm::APInt *)&v193;
        sub_1CC5FA668(v178 + 16, v208);
LABEL_135:
        uint64_t v126 = *(void *)(v120 + 40);
        *((void *)v125 + 3) = v126;
        uint64_t v127 = *(void *)(v126 + 32);
        uint64_t v128 = *((unsigned int *)v125 + 10);
        if (v128)
        {
          uint64_t v159 = *((void *)v125 + 4);
          uint64_t v160 = *(void *)(v127 + 40);
          uint64_t v161 = 32 * v128;
          do
          {
            if (!*(unsigned char *)v159)
            {
              uint64_t v162 = *(unsigned int *)(v159 + 4);
              if ((int)v162 >= 0) {
                uint64_t v163 = (uint64_t *)(*(void *)(v160 + 272) + 8 * v162);
              }
              else {
                uint64_t v163 = (uint64_t *)(*(void *)(v160 + 24) + 16 * (v162 & 0x7FFFFFFF) + 8);
              }
              uint64_t v164 = *v163;
              if (*v163)
              {
                uint64_t v165 = *(void *)(v164 + 16);
                *(void *)(v164 + 16) = v159;
                *(void *)(v159 + 16) = v165;
                if (*(unsigned char *)(v159 + 3))
                {
                  *(void *)(v159 + 24) = v164;
                }
                else
                {
                  *(void *)(v159 + 24) = 0;
                  uint64_t v163 = (uint64_t *)(v165 + 24);
                }
              }
              else
              {
                *(void *)(v159 + 16) = v159;
                *(void *)(v159 + 24) = 0;
              }
              *uint64_t v163 = v159;
            }
            v159 += 32;
            v161 -= 32;
          }
          while (v161);
        }
        uint64_t v129 = *(void *)(v127 + 728);
        if (v129) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v129 + 24))(v129, v125);
        }
        unint64_t v130 = *v121 & 0xFFFFFFFFFFFFFFF8;
        *(void *)char v125 = v130 | *(void *)v125 & 7;
        *((void *)v125 + 1) = v121;
        *(void *)(v130 + 8) = v125;
        *uint64_t v121 = *v121 & 7 | (unint64_t)v125;
        memset(&v208[1], 0, 24);
        LODWORD(v208[0]) = 0x1000000;
        HIDWORD(v208[0]) = v33;
        llvm::MachineInstr::addOperand(v125, v123, (const llvm::MachineOperand *)v208);
        LODWORD(v208[0]) = 1;
        *(_OWORD *)&v208[1] = 0u;
        llvm::MachineInstr::addOperand(v125, v123, (const llvm::MachineOperand *)v208);
        memset(&v208[1], 0, 24);
        LODWORD(v208[0]) = 0;
        HIDWORD(v208[0]) = v183;
        llvm::MachineInstr::addOperand(v125, v123, (const llvm::MachineOperand *)v208);
        LODWORD(v208[0]) = 1;
        *(_OWORD *)&v208[1] = 0u;
        llvm::MachineInstr::addOperand(v125, v123, (const llvm::MachineOperand *)v208);
        LODWORD(v208[0]) = 1;
        *(_OWORD *)&v208[1] = 0u;
        llvm::MachineInstr::addOperand(v125, v123, (const llvm::MachineOperand *)v208);
        memset(v208, 0, 32);
        llvm::MachineInstr::addOperand(v125, v123, (const llvm::MachineOperand *)v208);
        int v12 = 0;
        char v27 = 0;
        unsigned int v26 = 0;
        long long v203 = 0u;
        int8x16_t v204 = 0u;
        unint64_t v207 = __PAIR64__(v32, v33);
        HIBYTE(v192) = 0;
        goto LABEL_42;
      }
      int v173 = *v193;
      if ((v173 - 4) > 0x1E)
      {
        if ((v173 - 3) >= 0xFFFFFFFE) {
          uint64_t v180 = v193;
        }
        else {
          uint64_t v180 = 0;
        }
        if ((v173 - 3) < 0xFFFFFFFE)
        {
          if (v173 == 3) {
            *((void *)v193 + 1) = 0;
          }
          goto LABEL_127;
        }
        unint64_t v175 = (unint64_t)(v180 + 8);
      }
      else
      {
        if ((v193[1] & 0x7F) != 2 && !*((_DWORD *)v193 + 3)) {
          goto LABEL_127;
        }
        uint64_t v174 = *((void *)v193 + 2);
        if ((v174 & 4) == 0) {
          goto LABEL_127;
        }
        unint64_t v175 = v174 & 0xFFFFFFFFFFFFFFF8;
        if (!v175) {
          goto LABEL_127;
        }
      }
      v208[0] = (const llvm::APInt *)&v193;
      sub_1CC5FA668(v175 + 16, v208);
      goto LABEL_127;
    }
    int v170 = *v193;
    if ((v170 - 4) > 0x1E)
    {
      if ((v170 - 3) >= 0xFFFFFFFE) {
        unint64_t v179 = v193;
      }
      else {
        unint64_t v179 = 0;
      }
      if ((v170 - 3) < 0xFFFFFFFE)
      {
        if (v170 == 3) {
          *((void *)v193 + 1) = 0;
        }
        goto LABEL_119;
      }
      unint64_t v172 = (unint64_t)(v179 + 8);
    }
    else
    {
      if ((v193[1] & 0x7F) != 2 && !*((_DWORD *)v193 + 3)) {
        goto LABEL_119;
      }
      uint64_t v171 = *((void *)v193 + 2);
      if ((v171 & 4) == 0) {
        goto LABEL_119;
      }
      unint64_t v172 = v171 & 0xFFFFFFFFFFFFFFF8;
      if (!v172) {
        goto LABEL_119;
      }
    }
    v208[0] = (const llvm::APInt *)&v193;
    sub_1CC5FA668(v172 + 16, v208);
    goto LABEL_119;
  }
  uint64_t v134 = *(void *)(a1 + 48);
  int v32 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v134, "", 0);
  *(void *)(*(void *)(v134 + 24) + 16 * (v32 & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v135 = *(void *)(v134 + 8);
  if (v135) {
    (*(void (**)(uint64_t))(*(void *)v135 + 24))(v135);
  }
  int v136 = *((_DWORD *)a2 + 5);
  unsigned int v26 = v79;
  if ((v136 & 0x40000000) != 0) {
    uint64_t v137 = (unsigned __int8 *)*((void *)a2 - 1);
  }
  else {
    uint64_t v137 = &a2[-32 * (v136 & 0x7FFFFFF)];
  }
  uint64_t v78 = 0;
  if (sub_1CD3CEE74(a1, (uint64_t *)a2, *((unsigned char **)v137 + 4), v32, 423, 0))
  {
    int v12 = 0;
    unsigned int v33 = 0;
    v204.i64[1] = 0;
    HIDWORD(v207) = v32;
    __int16 v192 = 0;
    goto LABEL_42;
  }
  return v78;
}

uint64_t sub_1CB887A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)(a1 + 8);
  uint64_t v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  int v5 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v4 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::divide(v3, v5, a3);
  }
  return llvm::detail::IEEEFloat::divide(v3, v5, a3);
}

void sub_1CB887A74(void *a1, int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, int *a9, void *a10, unsigned int *a11)
{
  int v11 = a5;
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  int v14 = *(unsigned __int8 *)(a1[32] + 281);
  if ((a3 & 2) != 0)
  {
    uint64_t v15 = a10[1];
    if (*(unsigned char *)(a1[32] + 281))
    {
      if (*(_UNKNOWN **)(v15 + 32) == &unk_1CFB2E344) {
        uint64_t v16 = *(void *)(v15 + 40);
      }
      else {
        uint64_t v16 = v15 + 24;
      }
      BOOL v17 = (*(unsigned char *)(v16 + 28) & 7) == 3;
    }
    else
    {
      BOOL v17 = 0;
    }
    if ((a11[1] & 2) != 0)
    {
      BOOL v19 = v17;
      int v20 = *(unsigned __int8 *)(a1[32] + 281);
      unsigned int v21 = a4;
      char v22 = (const llvm::detail::DoubleAPFloat *)(v15 + 32);
      if (*(_UNKNOWN **)(v15 + 32) == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v210 + 1, v22);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v210 + 8, v22);
      }
      if (*((_UNKNOWN **)&v210 + 1) == &unk_1CFB2E344)
      {
        sub_1CBFC6FB8(v211);
        sub_1CBFC6FB8(v211 + 32);
      }
      else
      {
        BYTE12(v211) ^= 8u;
      }
      a10[1] = llvm::ConstantFP::get(**(llvm::ConstantFP ***)v15, (llvm::LLVMContext *)&v210, v23);
      a11[1] ^= 2u;
      if (*((_UNKNOWN **)&v210 + 1) == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v211);
        a4 = v21;
        int v14 = v20;
        BOOL v17 = v19;
      }
      else
      {
        a4 = v21;
        int v14 = v20;
        BOOL v17 = v19;
        if ((*(_DWORD *)(*((void *)&v210 + 1) + 8) - 64) <= 0xFFFFFF7F && (void)v211)
        {
          MEMORY[0x1D25D9CB0](v211, 0x1000C8000313F17);
          BOOL v17 = v19;
          int v14 = v20;
          a4 = v21;
        }
      }
      int v11 = a5;
    }
  }
  else
  {
    BOOL v17 = 0;
  }
  if ((a3 & 4) != 0)
  {
    uint64_t v25 = a10[2];
    int v26 = *(unsigned __int8 *)(v25 + 16);
    if (v25) {
      BOOL v27 = v26 == 17;
    }
    else {
      BOOL v27 = 0;
    }
    if (v27)
    {
      int v31 = v11;
      BOOL v32 = v17;
      int v33 = v14;
      unsigned int v34 = a4;
      BOOL v36 = *(void **)(v25 + 32);
      unint64_t v35 = (llvm::detail::DoubleAPFloat *)(v25 + 32);
      if (v36 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v35, (llvm::APInt *)&v210);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v35, (uint64_t)&v210);
      }
      if (DWORD2(v210) >= 0x41) {
        BOOL v37 = (long long *)v210;
      }
      else {
        BOOL v37 = &v210;
      }
      int v30 = *(void **)v37;
      if (DWORD2(v210) >= 0x41 && (void)v210) {
        MEMORY[0x1D25D9CB0]();
      }
      a4 = v34;
      int v14 = v33;
      BOOL v17 = v32;
      int v11 = v31;
    }
    else
    {
      if (v26 == 16) {
        uint64_t v28 = a10[2];
      }
      else {
        uint64_t v28 = 0;
      }
      int v29 = (void *)(v28 + 24);
      if (*(_DWORD *)(v28 + 32) >= 0x41u) {
        int v29 = (void *)*v29;
      }
      int v30 = (void *)*v29;
    }
    if (v30 == 1) {
      int v38 = 1;
    }
    else {
      int v38 = 2;
    }
    if (v30) {
      int v24 = v38;
    }
    else {
      int v24 = 0;
    }
  }
  else
  {
    int v24 = 3;
  }
  if ((a3 & 8) != 0)
  {
    uint64_t v43 = a10[3];
    int v44 = *(unsigned __int8 *)(v43 + 16);
    if (v43) {
      BOOL v45 = v44 == 17;
    }
    else {
      BOOL v45 = 0;
    }
    if (v45)
    {
      int v49 = v11;
      BOOL v50 = v17;
      int v51 = v14;
      unsigned int v52 = a4;
      uint64_t v54 = *(void **)(v43 + 32);
      BOOL v53 = (llvm::detail::DoubleAPFloat *)(v43 + 32);
      if (v54 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v53, (llvm::APInt *)&v210);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v53, (uint64_t)&v210);
      }
      if (DWORD2(v210) >= 0x41) {
        uint64_t v55 = (long long *)v210;
      }
      else {
        uint64_t v55 = &v210;
      }
      uint64_t v48 = *(void **)v55;
      if (DWORD2(v210) >= 0x41 && (void)v210) {
        MEMORY[0x1D25D9CB0]();
      }
      a4 = v52;
      int v14 = v51;
      BOOL v17 = v50;
      int v11 = v49;
    }
    else
    {
      if (v44 == 16) {
        uint64_t v46 = a10[3];
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v47 = (void *)(v46 + 24);
      if (*(_DWORD *)(v46 + 32) >= 0x41u) {
        uint64_t v47 = (void *)*v47;
      }
      uint64_t v48 = (void *)*v47;
    }
    if (v48 == 1) {
      int v56 = 1;
    }
    else {
      int v56 = 2;
    }
    if (v48) {
      int v40 = v56;
    }
    else {
      int v40 = 0;
    }
    BOOL v39 = v24 == 0;
    if (!v24 && v48 == 1)
    {
      BOOL v41 = 0;
      int v42 = 0;
      BOOL v39 = 1;
      int v40 = 1;
      goto LABEL_77;
    }
  }
  else
  {
    BOOL v39 = v24 == 0;
    int v40 = 3;
  }
  BOOL v41 = v40 != 0;
  if (v40) {
    int v42 = 1;
  }
  else {
    int v42 = v24 != 1;
  }
LABEL_77:
  if ((a2 - 1) >= 6) {
    a2 = 0;
  }
  if (v41 && (v17 & v42) != 0)
  {
    unsigned int v57 = sub_1CD3D3F60(a2, a7, a3 & 1, a4 & 1, v40 != 3, a7, v24, a7, v40, v14 != 0, 1);
    uint64_t v58 = a1[4];
    uint64_t v59 = *(void *)(v58 + 640);
    char v60 = *(unint64_t **)(v58 + 648);
    uint64_t v61 = *(void *)(a1[12] + 8) + 48 * v57;
    uint64_t v62 = *(llvm::MachineFunction **)(v59 + 32);
    int v63 = (unsigned __int8 *)a1[9];
    uint64_t v208 = (llvm::MachineFunction *)v63;
    if (v63) {
      llvm::MetadataTracking::track((uint64_t)&v208, v63, 2);
    }
    uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v62, v61, (unsigned __int8 **)&v208, 0);
    if (!v208)
    {
LABEL_84:
      uint64_t v65 = *(void *)(v59 + 40);
      *((void *)MachineInstr + 3) = v65;
      uint64_t v66 = *(void *)(v65 + 32);
      uint64_t v67 = *((unsigned int *)MachineInstr + 10);
      if (v67)
      {
        uint64_t v169 = *((void *)MachineInstr + 4);
        uint64_t v170 = *(void *)(v66 + 40);
        uint64_t v171 = 32 * v67;
        do
        {
          if (!*(unsigned char *)v169)
          {
            uint64_t v172 = *(unsigned int *)(v169 + 4);
            if ((int)v172 >= 0) {
              int v173 = (uint64_t *)(*(void *)(v170 + 272) + 8 * v172);
            }
            else {
              int v173 = (uint64_t *)(*(void *)(v170 + 24) + 16 * (v172 & 0x7FFFFFFF) + 8);
            }
            uint64_t v174 = *v173;
            if (*v173)
            {
              uint64_t v175 = *(void *)(v174 + 16);
              *(void *)(v174 + 16) = v169;
              *(void *)(v169 + 16) = v175;
              if (*(unsigned char *)(v169 + 3))
              {
                *(void *)(v169 + 24) = v174;
              }
              else
              {
                *(void *)(v169 + 24) = 0;
                int v173 = (uint64_t *)(v175 + 24);
              }
            }
            else
            {
              *(void *)(v169 + 16) = v169;
              *(void *)(v169 + 24) = 0;
            }
            *int v173 = v169;
          }
          v169 += 32;
          v171 -= 32;
        }
        while (v171);
      }
      uint64_t v68 = *(void *)(v66 + 728);
      if (v68) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v68 + 24))(v68, MachineInstr);
      }
      unint64_t v69 = *v60 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t MachineInstr = v69 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v60;
      *(void *)(v69 + 8) = MachineInstr;
      *char v60 = *v60 & 7 | (unint64_t)MachineInstr;
      *((void *)&v210 + 1) = 0;
      long long v211 = 0uLL;
      LODWORD(v210) = 0x1000000;
      DWORD1(v210) = v11;
      llvm::MachineInstr::addOperand(MachineInstr, v62, (const llvm::MachineOperand *)&v210);
      LODWORD(v210) = 1;
      *((void *)&v210 + 1) = 0;
      *(void *)&long long v211 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v62, (const llvm::MachineOperand *)&v210);
      uint64_t v208 = v62;
      uint64_t v209 = MachineInstr;
      if (*(void *)a8)
      {
        if (sub_1CB8843D8((uint64_t)a1, *(unsigned char **)a8, 0, &v208, 0)) {
          goto LABEL_91;
        }
        uint64_t v62 = v208;
        uint64_t MachineInstr = v209;
      }
      int v70 = *a9;
      *((void *)&v210 + 1) = 0;
      long long v211 = 0uLL;
      LODWORD(v210) = 0;
      DWORD1(v210) = v70;
      llvm::MachineInstr::addOperand(MachineInstr, v62, (const llvm::MachineOperand *)&v210);
LABEL_91:
      uint64_t v71 = *a11;
      LODWORD(v210) = 1;
      *((void *)&v210 + 1) = 0;
      *(void *)&long long v211 = v71;
      llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
      uint64_t v72 = 3;
      do
      {
        if ((a3 >> v72))
        {
          uint64_t v73 = (unsigned __int8 *)a10[v72];
          int v74 = v73[16];
          if (v73) {
            BOOL v75 = v74 == 17;
          }
          else {
            BOOL v75 = 0;
          }
          if (v75)
          {
            uint64_t v81 = (llvm::detail::DoubleAPFloat *)(v73 + 32);
            if (*((_UNKNOWN **)v73 + 4) == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v81, (llvm::APInt *)&v210);
            }
            else {
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v81, (uint64_t)&v210);
            }
            if (DWORD2(v210) >= 0x41) {
              uint64_t v82 = (unint64_t *)v210;
            }
            else {
              uint64_t v82 = (unint64_t *)&v210;
            }
            unint64_t v83 = *v82;
            if (DWORD2(v210) >= 0x41 && (void)v210) {
              MEMORY[0x1D25D9CB0]();
            }
            if (*(unsigned char *)(*(void *)v73 + 8)) {
              unint64_t v78 = v83;
            }
            else {
              unint64_t v78 = v83 | 0x100000000;
            }
          }
          else
          {
            if (v74 == 16) {
              uint64_t v76 = a10[v72];
            }
            else {
              uint64_t v76 = 0;
            }
            uint64_t v77 = (unint64_t *)(v76 + 24);
            if (*(_DWORD *)(v76 + 32) >= 0x41u) {
              uint64_t v77 = (unint64_t *)*v77;
            }
            unint64_t v78 = *v77;
            if (v78 < 0x10000) {
              v78 |= 0x100000000uLL;
            }
          }
        }
        else
        {
          uint64_t v79 = *(unsigned char **)(a8 + 8 * v72);
          if (!v79 || (sub_1CB8843D8((uint64_t)a1, v79, 0, &v208, 0) & 1) == 0)
          {
            int v80 = a9[v72];
            *((void *)&v210 + 1) = 0;
            LODWORD(v210) = 0;
            DWORD1(v210) = v80;
            long long v211 = 0uLL;
            llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
          }
          unint64_t v78 = a11[v72];
        }
        LODWORD(v210) = 1;
        *((void *)&v210 + 1) = 0;
        *(void *)&long long v211 = v78;
        llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
        unint64_t v84 = v72 - 3;
        uint64_t v72 = 2;
      }
      while (v84 < 0xFFFFFFFFFFFFFFFELL);
      long long v210 = 0u;
      long long v211 = 0u;
      llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
      LODWORD(v210) = 1;
      *((void *)&v210 + 1) = 0;
      *(void *)&long long v211 = 0;
      llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
      uint64_t v89 = (unsigned __int8 *)v208;
      uint64_t v88 = v209;
      long long v210 = 0u;
      long long v211 = 0u;
LABEL_258:
      llvm::MachineInstr::addOperand(v88, (llvm::MachineFunction *)v89, (const llvm::MachineOperand *)&v210);
      return;
    }
    int v183 = *(unsigned __int8 *)v208;
    if ((v183 - 4) > 0x1E)
    {
      if ((v183 - 3) >= 0xFFFFFFFE) {
        __int16 v192 = v208;
      }
      else {
        __int16 v192 = 0;
      }
      if ((v183 - 3) < 0xFFFFFFFE)
      {
        if (v183 == 3) {
          *((void *)v208 + 1) = 0;
        }
        goto LABEL_84;
      }
      unint64_t v185 = (unint64_t)v192 + 8;
    }
    else
    {
      if ((*((unsigned char *)v208 + 1) & 0x7F) != 2 && !*((_DWORD *)v208 + 3)) {
        goto LABEL_84;
      }
      uint64_t v184 = *((void *)v208 + 2);
      if ((v184 & 4) == 0) {
        goto LABEL_84;
      }
      unint64_t v185 = v184 & 0xFFFFFFFFFFFFFFF8;
      if (!v185) {
        goto LABEL_84;
      }
    }
    *(void *)&long long v210 = &v208;
    sub_1CC5FA668(v185 + 16, &v210);
    goto LABEL_84;
  }
  int v202 = v11;
  if (!v41)
  {
    if ((~a3 & 0xA) != 0 || !v40) {
      goto LABEL_175;
    }
    BOOL v87 = 0;
    goto LABEL_135;
  }
  if (*(void *)(a8 + 8) != *(void *)(a8 + 24))
  {
    if ((~a3 & 0xA) != 0 || !v40) {
      goto LABEL_173;
    }
    BOOL v87 = 1;
    goto LABEL_135;
  }
  int v85 = a9[1];
  int v86 = a9[3];
  BOOL v87 = v85 != v86;
  if ((~a3 & 0xA) == 0 && v40)
  {
LABEL_135:
    uint64_t v90 = a10[1];
    int v91 = *(unsigned __int8 *)(v90 + 16);
    BOOL v198 = v39;
    int v200 = v14;
    BOOL v196 = v87;
    if (v90 && v91 == 17)
    {
      unsigned int v92 = a4;
      uint64_t v94 = *(void **)(v90 + 32);
      uint64_t v93 = (llvm::detail::DoubleAPFloat *)(v90 + 32);
      if (v94 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v93, (llvm::APInt *)&v210);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v93, (uint64_t)&v210);
      }
      if (DWORD2(v210) >= 0x41) {
        uint64_t v95 = (long long *)v210;
      }
      else {
        uint64_t v95 = &v210;
      }
      uint64_t v96 = *(void **)v95;
      if (DWORD2(v210) >= 0x41 && (void)v210)
      {
        uint64_t v97 = *(void **)v95;
        MEMORY[0x1D25D9CB0]();
        uint64_t v96 = v97;
      }
      a4 = v92;
      int v14 = v200;
      int v11 = v202;
      BOOL v87 = v196;
      BOOL v39 = v198;
    }
    else
    {
      if (v91 == 16) {
        uint64_t v98 = a10[1];
      }
      else {
        uint64_t v98 = 0;
      }
      uint64_t v99 = (void *)(v98 + 24);
      if (*(_DWORD *)(v98 + 32) >= 0x41u) {
        uint64_t v99 = (void *)*v99;
      }
      uint64_t v96 = (void *)*v99;
    }
    uint64_t v100 = a10[3];
    int v101 = *(unsigned __int8 *)(v100 + 16);
    if (v100 && v101 == 17)
    {
      unint64_t v195 = v96;
      unsigned int v102 = a4;
      uint64_t v104 = *(void **)(v100 + 32);
      uint64_t v103 = (llvm::detail::DoubleAPFloat *)(v100 + 32);
      if (v104 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v103, (llvm::APInt *)&v210);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v103, (uint64_t)&v210);
      }
      if (DWORD2(v210) >= 0x41) {
        uint64_t v105 = (long long *)v210;
      }
      else {
        uint64_t v105 = &v210;
      }
      uint64_t v106 = *(void **)v105;
      if (DWORD2(v210) >= 0x41 && (void)v210) {
        MEMORY[0x1D25D9CB0]();
      }
      a4 = v102;
      int v14 = v200;
      int v11 = v202;
      BOOL v87 = v196;
      BOOL v39 = v198;
      uint64_t v96 = v195;
    }
    else
    {
      if (v101 == 16) {
        uint64_t v107 = a10[3];
      }
      else {
        uint64_t v107 = 0;
      }
      uint64_t v108 = (void *)(v107 + 24);
      if (*(_DWORD *)(v107 + 32) >= 0x41u) {
        uint64_t v108 = (void *)*v108;
      }
      uint64_t v106 = (void *)*v108;
    }
    BOOL v109 = v96 != v106 && v41;
    if (!v109 && !v87) {
      goto LABEL_175;
    }
    goto LABEL_173;
  }
  if (v85 == v86)
  {
LABEL_175:
    unsigned int v110 = sub_1CD3D3F60(a2, a7, a3 & 1, a4 & 1, (a3 >> 1) & 1, (a4 >> 1) & 1, v24, a7, v40, v14 != 0, 0);
    int v197 = 0;
    int IncompleteVirtualRegister = v11;
    goto LABEL_183;
  }
LABEL_173:
  if (v24 == 1)
  {
    int v42 = 0;
    BOOL v39 = 0;
  }
  else
  {
    v42 &= !v39;
  }
  unsigned int v110 = sub_1CD3D3F60(a2, a7, a3 & 1, a4 & 1, (a3 >> 1) & 1, (a4 >> 1) & 1, v24, a7, v39, v14 != 0, 0);
  uint64_t v111 = a1[6];
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v111, "", 0);
  if (a7) {
    uint64_t v112 = &off_1E66A4180;
  }
  else {
    uint64_t v112 = &off_1E66A4340;
  }
  *(void *)(*(void *)(v111 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v112;
  uint64_t v113 = *(void *)(v111 + 8);
  if (v113) {
    (*(void (**)(uint64_t))(*(void *)v113 + 24))(v113);
  }
  int v197 = 1;
LABEL_183:
  uint64_t v114 = a1[4];
  uint64_t v115 = *(void *)(v114 + 640);
  unint64_t v116 = *(unint64_t **)(v114 + 648);
  uint64_t v117 = *(void *)(a1[12] + 8) + 48 * v110;
  uint64_t v118 = *(llvm::MachineFunction **)(v115 + 32);
  uint64_t v119 = (unsigned __int8 *)a1[9];
  uint64_t v208 = (llvm::MachineFunction *)v119;
  if (v119) {
    llvm::MetadataTracking::track((uint64_t)&v208, v119, 2);
  }
  uint64_t v120 = llvm::MachineFunction::CreateMachineInstr(v118, v117, (unsigned __int8 **)&v208, 0);
  if (v208)
  {
    int v186 = *(unsigned __int8 *)v208;
    if ((v186 - 4) > 0x1E)
    {
      if ((v186 - 3) >= 0xFFFFFFFE) {
        uint64_t v193 = v208;
      }
      else {
        uint64_t v193 = 0;
      }
      if ((v186 - 3) < 0xFFFFFFFE)
      {
        if (v186 == 3) {
          *((void *)v208 + 1) = 0;
        }
        goto LABEL_186;
      }
      unint64_t v188 = (unint64_t)v193 + 8;
    }
    else
    {
      if ((*((unsigned char *)v208 + 1) & 0x7F) != 2 && !*((_DWORD *)v208 + 3)) {
        goto LABEL_186;
      }
      uint64_t v187 = *((void *)v208 + 2);
      if ((v187 & 4) == 0) {
        goto LABEL_186;
      }
      unint64_t v188 = v187 & 0xFFFFFFFFFFFFFFF8;
      if (!v188) {
        goto LABEL_186;
      }
    }
    *(void *)&long long v210 = &v208;
    sub_1CC5FA668(v188 + 16, &v210);
  }
LABEL_186:
  uint64_t v121 = *(void *)(v115 + 40);
  *((void *)v120 + 3) = v121;
  uint64_t v122 = *(void *)(v121 + 32);
  uint64_t v123 = *((unsigned int *)v120 + 10);
  if (v123)
  {
    uint64_t v162 = *((void *)v120 + 4);
    uint64_t v163 = *(void *)(v122 + 40);
    uint64_t v164 = 32 * v123;
    do
    {
      if (!*(unsigned char *)v162)
      {
        uint64_t v165 = *(unsigned int *)(v162 + 4);
        if ((int)v165 >= 0) {
          int v166 = (uint64_t *)(*(void *)(v163 + 272) + 8 * v165);
        }
        else {
          int v166 = (uint64_t *)(*(void *)(v163 + 24) + 16 * (v165 & 0x7FFFFFFF) + 8);
        }
        uint64_t v167 = *v166;
        if (*v166)
        {
          uint64_t v168 = *(void *)(v167 + 16);
          *(void *)(v167 + 16) = v162;
          *(void *)(v162 + 16) = v168;
          if (*(unsigned char *)(v162 + 3))
          {
            *(void *)(v162 + 24) = v167;
          }
          else
          {
            *(void *)(v162 + 24) = 0;
            int v166 = (uint64_t *)(v168 + 24);
          }
        }
        else
        {
          *(void *)(v162 + 16) = v162;
          *(void *)(v162 + 24) = 0;
        }
        *int v166 = v162;
      }
      v162 += 32;
      v164 -= 32;
    }
    while (v164);
  }
  unsigned int v199 = a3 & 8;
  uint64_t v124 = *(void *)(v122 + 728);
  if (v124) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v124 + 24))(v124, v120);
  }
  unint64_t v125 = *v116 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v120 = v125 | *(void *)v120 & 7;
  *((void *)v120 + 1) = v116;
  *(void *)(v125 + 8) = v120;
  unint64_t *v116 = *v116 & 7 | (unint64_t)v120;
  *((void *)&v210 + 1) = 0;
  long long v211 = 0uLL;
  LODWORD(v210) = 0x1000000;
  DWORD1(v210) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v120, v118, (const llvm::MachineOperand *)&v210);
  LODWORD(v210) = 1;
  *((void *)&v210 + 1) = 0;
  *(void *)&long long v211 = 0;
  llvm::MachineInstr::addOperand(v120, v118, (const llvm::MachineOperand *)&v210);
  uint64_t v126 = 0;
  uint64_t v208 = v118;
  uint64_t v209 = v120;
  do
  {
    if (((v126 == 2) & ~v42) != 0) {
      break;
    }
    if ((a3 >> v126))
    {
      uint64_t v127 = (unsigned __int8 *)a10[v126];
      int v128 = v127[16];
      if (v127 && v128 == 17)
      {
        uint64_t v135 = (llvm::detail::DoubleAPFloat *)(v127 + 32);
        if (*((_UNKNOWN **)v127 + 4) == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v135, (llvm::APInt *)&v210);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v135, (uint64_t)&v210);
        }
        if (DWORD2(v210) >= 0x41) {
          int v136 = (uint64_t *)v210;
        }
        else {
          int v136 = (uint64_t *)&v210;
        }
        uint64_t v137 = *v136;
        if (DWORD2(v210) >= 0x41 && (void)v210) {
          MEMORY[0x1D25D9CB0]();
        }
        unint64_t v132 = *(unsigned char *)(*(void *)v127 + 8) ? v137 : v137 | 0x100000000;
      }
      else
      {
        if (v128 == 16) {
          uint64_t v130 = a10[v126];
        }
        else {
          uint64_t v130 = 0;
        }
        uint64_t v131 = (unint64_t *)(v130 + 24);
        if (*(_DWORD *)(v130 + 32) >= 0x41u) {
          uint64_t v131 = (unint64_t *)*v131;
        }
        unint64_t v132 = *v131;
        if (v132 < 0x10000) {
          v132 |= 0x100000000uLL;
        }
      }
    }
    else
    {
      uint64_t v133 = *(unsigned char **)(a8 + 8 * v126);
      if (!v133 || (sub_1CB8843D8((uint64_t)a1, v133, 0, &v208, 0) & 1) == 0)
      {
        int v134 = a9[v126];
        *((void *)&v210 + 1) = 0;
        LODWORD(v210) = 0;
        DWORD1(v210) = v134;
        long long v211 = 0uLL;
        llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
      }
      unint64_t v132 = a11[v126];
    }
    LODWORD(v210) = 1;
    *((void *)&v210 + 1) = 0;
    *(void *)&long long v211 = v132;
    llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
    ++v126;
  }
  while (v126 != 3);
  if (v197)
  {
    long long v211 = 0uLL;
    long long v210 = 0x201000000uLL;
  }
  else
  {
    long long v210 = 0u;
    long long v211 = 0u;
  }
  llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
  int v138 = v202;
  LODWORD(v210) = 1;
  *((void *)&v210 + 1) = 0;
  *(void *)&long long v211 = 0;
  llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
  long long v210 = 0u;
  long long v211 = 0u;
  llvm::MachineInstr::addOperand(v209, v208, (const llvm::MachineOperand *)&v210);
  if (v197)
  {
    uint64_t v139 = a1[4];
    uint64_t v140 = *(void *)(v139 + 640);
    uint64_t v141 = *(unint64_t **)(v139 + 648);
    uint64_t v142 = *(void *)(a1[12] + 8) + 48 * dword_1CD923568[a7 | (v199 >> 2)];
    uint64_t v143 = *(llvm::MachineFunction **)(v140 + 32);
    uint64_t v144 = (unsigned __int8 *)a1[9];
    unint64_t v206 = v144;
    if (v144) {
      llvm::MetadataTracking::track((uint64_t)&v206, v144, 2);
    }
    uint64_t v145 = llvm::MachineFunction::CreateMachineInstr(v143, v142, &v206, 0);
    if (!v206) {
      goto LABEL_229;
    }
    int v189 = *v206;
    if ((v189 - 4) > 0x1E)
    {
      if ((v189 - 3) >= 0xFFFFFFFE) {
        long long v194 = v206;
      }
      else {
        long long v194 = 0;
      }
      if ((v189 - 3) < 0xFFFFFFFE)
      {
        int v138 = v202;
        if (v189 == 3) {
          *((void *)v206 + 1) = 0;
        }
        goto LABEL_229;
      }
      unint64_t v191 = (unint64_t)(v194 + 8);
    }
    else
    {
      int v138 = v202;
      if ((v206[1] & 0x7F) != 2 && !*((_DWORD *)v206 + 3)) {
        goto LABEL_229;
      }
      uint64_t v190 = *((void *)v206 + 2);
      if ((v190 & 4) == 0) {
        goto LABEL_229;
      }
      unint64_t v191 = v190 & 0xFFFFFFFFFFFFFFF8;
      if (!v191) {
        goto LABEL_229;
      }
    }
    *(void *)&long long v210 = &v206;
    sub_1CC5FA668(v191 + 16, &v210);
    int v138 = v202;
LABEL_229:
    uint64_t v146 = *(void *)(v140 + 40);
    *((void *)v145 + 3) = v146;
    uint64_t v147 = *(void *)(v146 + 32);
    uint64_t v148 = *((unsigned int *)v145 + 10);
    if (v148)
    {
      uint64_t v176 = *((void *)v145 + 4);
      uint64_t v177 = *(void *)(v147 + 40);
      uint64_t v178 = 32 * v148;
      do
      {
        if (!*(unsigned char *)v176)
        {
          uint64_t v179 = *(unsigned int *)(v176 + 4);
          if ((int)v179 >= 0) {
            uint64_t v180 = (uint64_t *)(*(void *)(v177 + 272) + 8 * v179);
          }
          else {
            uint64_t v180 = (uint64_t *)(*(void *)(v177 + 24) + 16 * (v179 & 0x7FFFFFFF) + 8);
          }
          uint64_t v181 = *v180;
          if (*v180)
          {
            uint64_t v182 = *(void *)(v181 + 16);
            *(void *)(v181 + 16) = v176;
            *(void *)(v176 + 16) = v182;
            if (*(unsigned char *)(v176 + 3))
            {
              *(void *)(v176 + 24) = v181;
            }
            else
            {
              *(void *)(v176 + 24) = 0;
              uint64_t v180 = (uint64_t *)(v182 + 24);
            }
          }
          else
          {
            *(void *)(v176 + 16) = v176;
            *(void *)(v176 + 24) = 0;
          }
          *uint64_t v180 = v176;
        }
        v176 += 32;
        v178 -= 32;
      }
      while (v178);
    }
    uint64_t v149 = *(void *)(v147 + 728);
    if (v149) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v149 + 24))(v149, v145);
    }
    unint64_t v150 = *v141 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v145 = v150 | *(void *)v145 & 7;
    *((void *)v145 + 1) = v141;
    *(void *)(v150 + 8) = v145;
    *uint64_t v141 = *v141 & 7 | (unint64_t)v145;
    *((void *)&v210 + 1) = 0;
    long long v211 = 0uLL;
    LODWORD(v210) = 0x1000000;
    DWORD1(v210) = v138;
    llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)&v210);
    unint64_t v206 = (unsigned __int8 *)v143;
    unint64_t v207 = v145;
    *((void *)&v210 + 1) = 0;
    long long v211 = 0uLL;
    LODWORD(v210) = 0;
    DWORD1(v210) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)&v210);
    if (v199)
    {
      uint64_t v154 = (unsigned __int8 *)a10[3];
      int v155 = v154[16];
      if (v154 && v155 == 17)
      {
        uint64_t v156 = (llvm::detail::DoubleAPFloat *)(v154 + 32);
        if (*((_UNKNOWN **)v154 + 4) == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v156, (llvm::APInt *)&v210);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v156, (uint64_t)&v210);
        }
        if (DWORD2(v210) >= 0x41) {
          uint64_t v157 = (unint64_t *)v210;
        }
        else {
          uint64_t v157 = (unint64_t *)&v210;
        }
        unint64_t v158 = *v157;
        if (DWORD2(v210) >= 0x41 && (void)v210) {
          MEMORY[0x1D25D9CB0]();
        }
        if (*(unsigned char *)(*(void *)v154 + 8)) {
          unint64_t v159 = v158;
        }
        else {
          unint64_t v159 = v158 | 0x100000000;
        }
      }
      else
      {
        if (v155 == 16) {
          uint64_t v160 = a10[3];
        }
        else {
          uint64_t v160 = 0;
        }
        uint64_t v161 = (unint64_t *)(v160 + 24);
        if (*(_DWORD *)(v160 + 32) >= 0x41u) {
          uint64_t v161 = (unint64_t *)*v161;
        }
        unint64_t v159 = *v161;
        if (v159 < 0x10000) {
          v159 |= 0x100000000uLL;
        }
      }
      LODWORD(v210) = 1;
      *((void *)&v210 + 1) = 0;
      *(void *)&long long v211 = v159;
      llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)&v210);
    }
    else
    {
      uint64_t v151 = *(unsigned char **)(a8 + 24);
      if (!v151
        || (char v152 = sub_1CB8843D8((uint64_t)a1, v151, 0, (llvm::MachineFunction **)&v206, 0),
            uint64_t v143 = (llvm::MachineFunction *)v206,
            uint64_t v145 = v207,
            (v152 & 1) == 0))
      {
        int v153 = a9[3];
        *((void *)&v210 + 1) = 0;
        long long v211 = 0uLL;
        LODWORD(v210) = 0;
        DWORD1(v210) = v153;
        llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)&v210);
        uint64_t v143 = (llvm::MachineFunction *)v206;
        uint64_t v145 = v207;
      }
    }
    LODWORD(v210) = 1;
    *((void *)&v210 + 1) = 0;
    *(void *)&long long v211 = 0;
    llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)&v210);
    uint64_t v89 = v206;
    uint64_t v88 = v207;
    long long v211 = 0uLL;
    long long v210 = 0x200000000uLL;
    goto LABEL_258;
  }
}

uint64_t sub_1CB888D08(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  int v11 = *(unsigned __int8 *)(*a2 + 8);
  if ((v11 | 2) != 2) {
    return 0;
  }
  uint64_t v85 = *a2;
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  int v106 = 0;
  v104[2] = a5;
  uint64_t v105 = 0;
  v104[0] = a3;
  v104[1] = a4;
  int8x16_t v102 = 0uLL;
  uint64_t v103 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  BOOL v16 = a10 == 1 && v11 == 0;
  char v17 = v16;
  uint64_t v18 = 16 * (a6 & 0x7FFFFFFF);
  do
  {
    uint64_t v19 = v104[v14];
    if (a6 && v14 == 1)
    {
      int v20 = (_UNKNOWN ***)(*(void *)(*(void *)(a1[6] + 24) + v18) & 0xFFFFFFFFFFFFFFF8);
      if (v20 != &off_1E66A41C8 && v20 != &off_1E66A4180) {
        char v17 = 0;
      }
      unsigned int v15 = a6;
    }
    else
    {
      if (*(unsigned char *)(*(void *)v19 + 8)) {
        char v17 = 0;
      }
      if (*(unsigned char *)(v19 + 16) == 17) {
        *(uint64_t *)((char *)&v99 + v14 * 8) = (uint64_t)sub_1CD3CA5D4((uint64_t)a1, (uint64_t *)v19);
      }
      else {
        v102.i64[v14] = v19;
      }
    }
    ++v14;
  }
  while (v14 != 3);
  HIDWORD(v105) = v15;
  char v94 = v17;
  uint64_t v22 = v99;
  if (v99)
  {
    if (v100 && v101) {
      return 0;
    }
  }
  uint64_t v83 = v101;
  if (a8 == 141)
  {
    uint64_t v24 = v85;
    if (!v99 || v100)
    {
      uint64_t v82 = v99;
      uint64_t v22 = v100;
    }
    else
    {
      uint64_t v82 = 0;
      int8x16_t v102 = vextq_s8(v102, v102, 8uLL);
      uint64_t v105 = v15;
      uint64_t v99 = 0;
      uint64_t v100 = v22;
    }
  }
  else
  {
    uint64_t v82 = v99;
    uint64_t v22 = v100;
    uint64_t v24 = v85;
  }
  uint64_t v25 = 0;
  uint64_t v86 = v22;
  if (v22) {
    BOOL v26 = a8 == 141;
  }
  else {
    BOOL v26 = 0;
  }
  if (v26 && (a9 & 3) == 1) {
    unsigned int v28 = a9 & 4 | 2;
  }
  else {
    unsigned int v28 = a9;
  }
  int v98 = 0;
  uint64_t v97 = 0;
  BOOL v91 = *(unsigned char *)(v24 + 8) == 0;
  BOOL v92 = v91;
  BOOL v93 = v91;
  int v29 = &v102;
  int v30 = (int *)&v97;
  do
  {
    if ((v28 >> v25)) {
      *((_DWORD *)&v97 + v25) = 2;
    }
    int v31 = *((_DWORD *)&v105 + v25);
    if (v31)
    {
      BOOL v32 = (_UNKNOWN ***)(*(void *)(*(void *)(a1[6] + 24) + 16 * (v31 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      BOOL v34 = v32 == &off_1E66A4180 || v32 == &off_1E66A41C8;
      *(&v91 + v25) = v34;
    }
    else
    {
      uint64_t v35 = v102.i64[v25];
      if (v35 && !*(&v99 + v25))
      {
        *(&v91 + v25) = *(unsigned char *)(*(void *)v35 + 8) == 0;
        int v36 = sub_1CB88467C((uint64_t)a1, v29->i64, v30, &v91 + v25, v17 != 0, a2[5], 7, 1);
        *((_DWORD *)&v105 + v25) = v36;
        if (!v36) {
          return 0;
        }
        if (a8 == 443 && v25 == 1) {
          HIDWORD(v97) &= ~1u;
        }
      }
    }
    ++v25;
    ++v30;
    int v29 = (int8x16_t *)((char *)v29 + 8);
  }
  while (v25 != 3);
  if (a8 == 141)
  {
    if (!sub_1CB884248((uint64_t)a1, (uint64_t)a2, v102.i64, &v105, (int *)&v97, &v94, &v91, 3u)) {
      return 0;
    }
    if (v94)
    {
      BOOL v37 = (char *)&unk_1CD91CEB0 + 16 * (v82 != 0) + 8 * (v86 != 0) + 4 * (v83 != 0) + 2 * a11;
      char v17 = 1;
      goto LABEL_68;
    }
    char v17 = 0;
    int v68 = v91;
    unsigned int v69 = v92;
    uint64_t v70 = 2;
    if (v82) {
      int v68 = 2;
    }
    if (v86) {
      unsigned int v69 = 2;
    }
    if (!v83) {
      uint64_t v70 = v93;
    }
    int v38 = (char *)&unk_1CD91CED0 + 108 * (a10 == 1) + 36 * v68 + 12 * v69 + 4 * v70;
  }
  else
  {
    int v38 = (char *)&unk_1CD91CFA8 + 16 * (v82 != 0) + 8 * (v86 != 0) + 4 * (v83 != 0);
  }
  BOOL v37 = &v38[2 * a11];
LABEL_68:
  uint64_t v39 = a1[4];
  uint64_t v40 = *(void *)(v39 + 640);
  BOOL v41 = *(unint64_t **)(v39 + 648);
  uint64_t v42 = *(void *)(a1[12] + 8) + 48 * *(unsigned __int16 *)v37;
  uint64_t v43 = *(llvm::MachineFunction **)(v40 + 32);
  int v44 = (unsigned __int8 *)a1[9];
  uint64_t v89 = v44;
  if (v44) {
    llvm::MetadataTracking::track((uint64_t)&v89, v44, 2);
  }
  BOOL v45 = llvm::MachineFunction::CreateMachineInstr(v43, v42, &v89, 0);
  if (!v89) {
    goto LABEL_71;
  }
  int v78 = *v89;
  if ((v78 - 4) > 0x1E)
  {
    if ((v78 - 3) >= 0xFFFFFFFE) {
      uint64_t v81 = v89;
    }
    else {
      uint64_t v81 = 0;
    }
    if ((v78 - 3) < 0xFFFFFFFE)
    {
      if (v78 == 3) {
        *((void *)v89 + 1) = 0;
      }
      goto LABEL_71;
    }
    unint64_t v80 = (unint64_t)(v81 + 8);
  }
  else
  {
    if ((v89[1] & 0x7F) != 2 && !*((_DWORD *)v89 + 3)) {
      goto LABEL_71;
    }
    uint64_t v79 = *((void *)v89 + 2);
    if ((v79 & 4) == 0) {
      goto LABEL_71;
    }
    unint64_t v80 = v79 & 0xFFFFFFFFFFFFFFF8;
    if (!v80) {
      goto LABEL_71;
    }
  }
  *(void *)&long long v95 = &v89;
  sub_1CC5FA668(v80 + 16, &v95);
LABEL_71:
  uint64_t v46 = *(void *)(v40 + 40);
  *((void *)v45 + 3) = v46;
  uint64_t v47 = *(void *)(v46 + 32);
  uint64_t v48 = *((unsigned int *)v45 + 10);
  if (v48)
  {
    uint64_t v71 = *((void *)v45 + 4);
    uint64_t v72 = *(void *)(v47 + 40);
    uint64_t v73 = 32 * v48;
    do
    {
      if (!*(unsigned char *)v71)
      {
        uint64_t v74 = *(unsigned int *)(v71 + 4);
        if ((int)v74 >= 0) {
          BOOL v75 = (uint64_t *)(*(void *)(v72 + 272) + 8 * v74);
        }
        else {
          BOOL v75 = (uint64_t *)(*(void *)(v72 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
        }
        uint64_t v76 = *v75;
        if (*v75)
        {
          uint64_t v77 = *(void *)(v76 + 16);
          *(void *)(v76 + 16) = v71;
          *(void *)(v71 + 16) = v77;
          if (*(unsigned char *)(v71 + 3))
          {
            *(void *)(v71 + 24) = v76;
          }
          else
          {
            *(void *)(v71 + 24) = 0;
            BOOL v75 = (uint64_t *)(v77 + 24);
          }
        }
        else
        {
          *(void *)(v71 + 16) = v71;
          *(void *)(v71 + 24) = 0;
        }
        *BOOL v75 = v71;
      }
      v71 += 32;
      v73 -= 32;
    }
    while (v73);
  }
  uint64_t v49 = *(void *)(v47 + 728);
  if (v49) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v49 + 24))(v49, v45);
  }
  unint64_t v50 = *v41 & 0xFFFFFFFFFFFFFFF8;
  *(void *)BOOL v45 = v50 | *(void *)v45 & 7;
  *((void *)v45 + 1) = v41;
  *(void *)(v50 + 8) = v45;
  *BOOL v41 = *v41 & 7 | (unint64_t)v45;
  *((void *)&v95 + 1) = 0;
  long long v96 = 0uLL;
  LODWORD(v95) = 0x1000000;
  DWORD1(v95) = a7;
  llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v95);
  LODWORD(v95) = 1;
  *((void *)&v95 + 1) = 0;
  *(void *)&long long v96 = 0;
  llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v95);
  uint64_t v51 = 0;
  uint64_t v89 = (unsigned __int8 *)v43;
  uint64_t v90 = v45;
  do
  {
    unsigned int v52 = (void *)*(&v99 + v51);
    if (v52)
    {
      int v53 = *(unsigned __int8 *)(*v52 + 8);
      uint64_t v55 = (void *)v52[4];
      uint64_t v54 = (llvm::detail::DoubleAPFloat *)(v52 + 4);
      if (v55 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v54, (llvm::APInt *)&v95);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v54, (uint64_t)&v95);
      }
      int v56 = (uint64_t *)&v95;
      if (DWORD2(v95) >= 0x41) {
        int v56 = (uint64_t *)v95;
      }
      uint64_t v57 = *v56;
      if (DWORD2(v95) >= 0x41 && (void)v95 != 0) {
        MEMORY[0x1D25D9CB0]();
      }
      uint64_t v59 = v57 | 0x100000000;
      if (v53) {
        uint64_t v59 = v57;
      }
      uint64_t v60 = 0x80000000;
      if (!v53) {
        uint64_t v60 = 0x8000;
      }
      if ((*((_DWORD *)&v97 + v51) & 2) != 0) {
        uint64_t v61 = v60;
      }
      else {
        uint64_t v61 = 0;
      }
      int v63 = (llvm::MachineFunction *)v89;
      uint64_t v62 = v90;
      LODWORD(v95) = 1;
      uint64_t v64 = v61 ^ v59;
    }
    else
    {
      uint64_t v65 = (unsigned char *)v102.i64[v51];
      if (!v65 || (sub_1CB8843D8((uint64_t)a1, v65, v17 != 0, (llvm::MachineFunction **)&v89, 0) & 1) == 0)
      {
        int v66 = *((_DWORD *)&v105 + v51);
        *((void *)&v95 + 1) = 0;
        LODWORD(v95) = 0;
        DWORD1(v95) = v66;
        long long v96 = 0uLL;
        llvm::MachineInstr::addOperand(v90, (llvm::MachineFunction *)v89, (const llvm::MachineOperand *)&v95);
      }
      uint64_t v64 = *((unsigned int *)&v97 + v51);
      int v63 = (llvm::MachineFunction *)v89;
      uint64_t v62 = v90;
      LODWORD(v95) = 1;
    }
    *((void *)&v95 + 1) = 0;
    *(void *)&long long v96 = v64;
    llvm::MachineInstr::addOperand(v62, v63, (const llvm::MachineOperand *)&v95);
    ++v51;
  }
  while (v51 != 3);
  uint64_t v23 = 1;
  LODWORD(v95) = 1;
  *((void *)&v95 + 1) = 0;
  *(void *)&long long v96 = 0;
  llvm::MachineInstr::addOperand(v90, (llvm::MachineFunction *)v89, (const llvm::MachineOperand *)&v95);
  long long v95 = 0u;
  long long v96 = 0u;
  llvm::MachineInstr::addOperand(v90, (llvm::MachineFunction *)v89, (const llvm::MachineOperand *)&v95);
  return v23;
}

BOOL sub_1CB8894C0(void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if ((v4 | 2) != 2) {
    return 0;
  }
  BOOL v71 = v4 == 0;
  int v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0) {
    int v9 = *(unsigned char ***)(a2 - 8);
  }
  else {
    int v9 = (unsigned char **)(a2 - 32 * (v8 & 0x7FFFFFF));
  }
  uint64_t v70 = *v9;
  unsigned int v69 = 0;
  int v11 = sub_1CB88467C((uint64_t)a1, (uint64_t *)&v70, (int *)&v69, &v71, 0, *(void *)(a2 + 40), 7, 1);
  BOOL v10 = v11 != 0;
  if (v11)
  {
    int v12 = v11;
    uint64_t v13 = a1[6];
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v13, "", 0);
    *(void *)(*(void *)(v13 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4340;
    uint64_t v15 = *(void *)(v13 + 8);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
    }
    uint64_t v16 = a1[4];
    uint64_t v17 = *(void *)(v16 + 640);
    uint64_t v18 = *(unint64_t **)(v16 + 648);
    uint64_t v19 = 62016;
    if (!v71) {
      uint64_t v19 = 61872;
    }
    uint64_t v20 = *(void *)(a1[12] + 8) + v19;
    unsigned int v21 = *(llvm::MachineFunction **)(v17 + 32);
    uint64_t v22 = (unsigned __int8 *)a1[9];
    uint64_t v76 = v22;
    if (v22) {
      llvm::MetadataTracking::track((uint64_t)&v76, v22, 2);
    }
    uint64_t v23 = llvm::MachineFunction::CreateMachineInstr(v21, v20, &v76, 0);
    if (!v76)
    {
LABEL_14:
      uint64_t v24 = *(void *)(v17 + 40);
      *((void *)v23 + 3) = v24;
      uint64_t v25 = *(void *)(v24 + 32);
      uint64_t v26 = *((unsigned int *)v23 + 10);
      if (v26)
      {
        uint64_t v45 = *((void *)v23 + 4);
        uint64_t v46 = *(void *)(v25 + 40);
        uint64_t v47 = 32 * v26;
        do
        {
          if (!*(unsigned char *)v45)
          {
            uint64_t v48 = *(unsigned int *)(v45 + 4);
            if ((int)v48 >= 0) {
              uint64_t v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v48);
            }
            else {
              uint64_t v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
            }
            uint64_t v50 = *v49;
            if (*v49)
            {
              uint64_t v51 = *(void *)(v50 + 16);
              *(void *)(v50 + 16) = v45;
              *(void *)(v45 + 16) = v51;
              if (*(unsigned char *)(v45 + 3))
              {
                *(void *)(v45 + 24) = v50;
              }
              else
              {
                *(void *)(v45 + 24) = 0;
                uint64_t v49 = (uint64_t *)(v51 + 24);
              }
            }
            else
            {
              *(void *)(v45 + 16) = v45;
              *(void *)(v45 + 24) = 0;
            }
            *uint64_t v49 = v45;
          }
          v45 += 32;
          v47 -= 32;
        }
        while (v47);
      }
      uint64_t v27 = *(void *)(v25 + 728);
      if (v27) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v27 + 24))(v27, v23);
      }
      unint64_t v28 = *v18 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v23 = v28 | *(void *)v23 & 7;
      *((void *)v23 + 1) = v18;
      *(void *)(v28 + 8) = v23;
      *uint64_t v18 = *v18 & 7 | (unint64_t)v23;
      *((void *)&v72 + 1) = 0;
      long long v73 = 0uLL;
      LODWORD(v72) = 0x1000000;
      DWORD1(v72) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v72);
      uint64_t v67 = v21;
      int v68 = v23;
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v72);
      if (v70)
      {
        if (sub_1CB8843D8((uint64_t)a1, v70, 0, &v67, 0)) {
          goto LABEL_21;
        }
        unsigned int v21 = v67;
        uint64_t v23 = v68;
      }
      *((void *)&v72 + 1) = 0;
      long long v73 = 0uLL;
      LODWORD(v72) = 0;
      DWORD1(v72) = v12;
      llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v72);
LABEL_21:
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = v69;
      llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v72);
      unsigned int v75 = 32;
      uint64_t v74 = 1069066811;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v72, (const llvm::APInt **)&v74);
      long long v77 = v72;
      int v78 = v73;
      char v79 = v79 & 0xF0 | BYTE4(v73) & 0xF;
      if ((_UNKNOWN *)v72 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v77, (llvm::APInt *)&v74);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v77, (uint64_t)&v74);
      }
      int v29 = &v74;
      if (v75 >= 0x41) {
        int v29 = (uint64_t *)v74;
      }
      uint64_t v30 = *v29;
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = v30;
      llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v72);
      if (v75 >= 0x41 && v74) {
        MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
      }
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v72);
      long long v72 = 0u;
      long long v73 = 0u;
      llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v72);
      uint64_t v31 = 53232;
      if (a4 == 1) {
        uint64_t v31 = 53376;
      }
      uint64_t v32 = a1[4];
      uint64_t v33 = *(void *)(v32 + 640);
      BOOL v34 = *(unint64_t **)(v32 + 648);
      uint64_t v35 = *(void *)(a1[12] + 8) + v31;
      int v36 = *(llvm::MachineFunction **)(v33 + 32);
      BOOL v37 = (unsigned __int8 *)a1[9];
      uint64_t v74 = (uint64_t)v37;
      if (v37) {
        llvm::MetadataTracking::track((uint64_t)&v74, v37, 2);
      }
      uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v36, v35, (unsigned __int8 **)&v74, 0);
      if (!v74) {
        goto LABEL_33;
      }
      int v62 = *(unsigned __int8 *)v74;
      if ((v62 - 4) > 0x1E)
      {
        if ((v62 - 3) >= 0xFFFFFFFE) {
          uint64_t v66 = v74;
        }
        else {
          uint64_t v66 = 0;
        }
        if ((v62 - 3) < 0xFFFFFFFE)
        {
          if (v62 == 3) {
            *(void *)(v74 + 8) = 0;
          }
          goto LABEL_33;
        }
        unint64_t v64 = v66 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v74 + 1) & 0x7F) != 2 && !*(_DWORD *)(v74 + 12)) {
          goto LABEL_33;
        }
        uint64_t v63 = *(void *)(v74 + 16);
        if ((v63 & 4) == 0) {
          goto LABEL_33;
        }
        unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8;
        if (!v64) {
          goto LABEL_33;
        }
      }
      *(void *)&long long v72 = &v74;
      sub_1CC5FA668(v64 + 16, &v72);
LABEL_33:
      uint64_t v39 = *(void *)(v33 + 40);
      *((void *)MachineInstr + 3) = v39;
      uint64_t v40 = *(void *)(v39 + 32);
      uint64_t v41 = *((unsigned int *)MachineInstr + 10);
      if (v41)
      {
        uint64_t v52 = *((void *)MachineInstr + 4);
        uint64_t v53 = *(void *)(v40 + 40);
        uint64_t v54 = 32 * v41;
        do
        {
          if (!*(unsigned char *)v52)
          {
            uint64_t v55 = *(unsigned int *)(v52 + 4);
            if ((int)v55 >= 0) {
              int v56 = (uint64_t *)(*(void *)(v53 + 272) + 8 * v55);
            }
            else {
              int v56 = (uint64_t *)(*(void *)(v53 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
            }
            uint64_t v57 = *v56;
            if (*v56)
            {
              uint64_t v58 = *(void *)(v57 + 16);
              *(void *)(v57 + 16) = v52;
              *(void *)(v52 + 16) = v58;
              if (*(unsigned char *)(v52 + 3))
              {
                *(void *)(v52 + 24) = v57;
              }
              else
              {
                *(void *)(v52 + 24) = 0;
                int v56 = (uint64_t *)(v58 + 24);
              }
            }
            else
            {
              *(void *)(v52 + 16) = v52;
              *(void *)(v52 + 24) = 0;
            }
            *int v56 = v52;
          }
          v52 += 32;
          v54 -= 32;
        }
        while (v54);
      }
      uint64_t v42 = *(void *)(v40 + 728);
      if (v42) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v42 + 24))(v42, MachineInstr);
      }
      unint64_t v43 = *v34 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t MachineInstr = v43 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v34;
      *(void *)(v43 + 8) = MachineInstr;
      *BOOL v34 = *v34 & 7 | (unint64_t)MachineInstr;
      *((void *)&v72 + 1) = 0;
      long long v73 = 0uLL;
      LODWORD(v72) = 0x1000000;
      DWORD1(v72) = a3;
      llvm::MachineInstr::addOperand(MachineInstr, v36, (const llvm::MachineOperand *)&v72);
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v36, (const llvm::MachineOperand *)&v72);
      *((void *)&v72 + 1) = 0;
      long long v73 = 0uLL;
      LODWORD(v72) = 0;
      DWORD1(v72) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(MachineInstr, v36, (const llvm::MachineOperand *)&v72);
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v36, (const llvm::MachineOperand *)&v72);
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v36, (const llvm::MachineOperand *)&v72);
      long long v72 = 0u;
      long long v73 = 0u;
      llvm::MachineInstr::addOperand(MachineInstr, v36, (const llvm::MachineOperand *)&v72);
      if ((_UNKNOWN *)v77 == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v77 + 1);
      }
      else if ((*(_DWORD *)(v77 + 8) - 64) <= 0xFFFFFF7F && *((void *)&v77 + 1))
      {
        MEMORY[0x1D25D9CB0](*((void *)&v77 + 1), 0x1000C8000313F17);
      }
      return v10;
    }
    int v59 = *v76;
    if ((v59 - 4) > 0x1E)
    {
      if ((v59 - 3) >= 0xFFFFFFFE) {
        uint64_t v65 = v76;
      }
      else {
        uint64_t v65 = 0;
      }
      if ((v59 - 3) < 0xFFFFFFFE)
      {
        if (v59 == 3) {
          *((void *)v76 + 1) = 0;
        }
        goto LABEL_14;
      }
      unint64_t v61 = (unint64_t)(v65 + 8);
    }
    else
    {
      if ((v76[1] & 0x7F) != 2 && !*((_DWORD *)v76 + 3)) {
        goto LABEL_14;
      }
      uint64_t v60 = *((void *)v76 + 2);
      if ((v60 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFF8;
      if (!v61) {
        goto LABEL_14;
      }
    }
    *(void *)&long long v72 = &v76;
    sub_1CC5FA668(v61 + 16, &v72);
    goto LABEL_14;
  }
  return v10;
}

BOOL sub_1CB889C40(void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if ((v4 | 2) != 2) {
    return 0;
  }
  BOOL v71 = v4 == 0;
  int v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0) {
    int v9 = *(unsigned char ***)(a2 - 8);
  }
  else {
    int v9 = (unsigned char **)(a2 - 32 * (v8 & 0x7FFFFFF));
  }
  uint64_t v70 = *v9;
  unsigned int v69 = 0;
  int v11 = sub_1CB88467C((uint64_t)a1, (uint64_t *)&v70, (int *)&v69, &v71, 0, *(void *)(a2 + 40), 7, 1);
  BOOL v10 = v11 != 0;
  if (v11)
  {
    int v12 = v11;
    uint64_t v13 = a1[6];
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v13, "", 0);
    *(void *)(*(void *)(v13 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4340;
    uint64_t v15 = *(void *)(v13 + 8);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
    }
    uint64_t v16 = a1[4];
    uint64_t v17 = *(void *)(v16 + 640);
    uint64_t v18 = *(unint64_t **)(v16 + 648);
    uint64_t v19 = 55488;
    if (!v71) {
      uint64_t v19 = 55440;
    }
    uint64_t v20 = *(void *)(a1[12] + 8) + v19;
    unsigned int v21 = *(llvm::MachineFunction **)(v17 + 32);
    uint64_t v22 = (unsigned __int8 *)a1[9];
    uint64_t v76 = v22;
    if (v22) {
      llvm::MetadataTracking::track((uint64_t)&v76, v22, 2);
    }
    uint64_t v23 = llvm::MachineFunction::CreateMachineInstr(v21, v20, &v76, 0);
    if (!v76)
    {
LABEL_14:
      uint64_t v24 = *(void *)(v17 + 40);
      *((void *)v23 + 3) = v24;
      uint64_t v25 = *(void *)(v24 + 32);
      uint64_t v26 = *((unsigned int *)v23 + 10);
      if (v26)
      {
        uint64_t v45 = *((void *)v23 + 4);
        uint64_t v46 = *(void *)(v25 + 40);
        uint64_t v47 = 32 * v26;
        do
        {
          if (!*(unsigned char *)v45)
          {
            uint64_t v48 = *(unsigned int *)(v45 + 4);
            if ((int)v48 >= 0) {
              uint64_t v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v48);
            }
            else {
              uint64_t v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
            }
            uint64_t v50 = *v49;
            if (*v49)
            {
              uint64_t v51 = *(void *)(v50 + 16);
              *(void *)(v50 + 16) = v45;
              *(void *)(v45 + 16) = v51;
              if (*(unsigned char *)(v45 + 3))
              {
                *(void *)(v45 + 24) = v50;
              }
              else
              {
                *(void *)(v45 + 24) = 0;
                uint64_t v49 = (uint64_t *)(v51 + 24);
              }
            }
            else
            {
              *(void *)(v45 + 16) = v45;
              *(void *)(v45 + 24) = 0;
            }
            *uint64_t v49 = v45;
          }
          v45 += 32;
          v47 -= 32;
        }
        while (v47);
      }
      uint64_t v27 = *(void *)(v25 + 728);
      if (v27) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v27 + 24))(v27, v23);
      }
      unint64_t v28 = *v18 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v23 = v28 | *(void *)v23 & 7;
      *((void *)v23 + 1) = v18;
      *(void *)(v28 + 8) = v23;
      *uint64_t v18 = *v18 & 7 | (unint64_t)v23;
      *((void *)&v72 + 1) = 0;
      long long v73 = 0uLL;
      LODWORD(v72) = 0x1000000;
      DWORD1(v72) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v72);
      uint64_t v67 = v21;
      int v68 = v23;
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v72);
      if (v70)
      {
        if (sub_1CB8843D8((uint64_t)a1, v70, 0, &v67, 0)) {
          goto LABEL_21;
        }
        unsigned int v21 = v67;
        uint64_t v23 = v68;
      }
      *((void *)&v72 + 1) = 0;
      long long v73 = 0uLL;
      LODWORD(v72) = 0;
      DWORD1(v72) = v12;
      llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v72);
LABEL_21:
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = v69;
      llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v72);
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v72);
      long long v72 = 0u;
      long long v73 = 0u;
      llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v72);
      uint64_t v29 = 61872;
      if (a4 == 1) {
        uint64_t v29 = 62304;
      }
      uint64_t v30 = a1[4];
      uint64_t v31 = *(void *)(v30 + 640);
      uint64_t v32 = *(unint64_t **)(v30 + 648);
      uint64_t v33 = *(void *)(a1[12] + 8) + v29;
      BOOL v34 = *(llvm::MachineFunction **)(v31 + 32);
      uint64_t v35 = (unsigned __int8 *)a1[9];
      uint64_t v76 = v35;
      if (v35) {
        llvm::MetadataTracking::track((uint64_t)&v76, v35, 2);
      }
      int v36 = llvm::MachineFunction::CreateMachineInstr(v34, v33, &v76, 0);
      if (!v76) {
        goto LABEL_26;
      }
      int v62 = *v76;
      if ((v62 - 4) > 0x1E)
      {
        if ((v62 - 3) >= 0xFFFFFFFE) {
          uint64_t v66 = v76;
        }
        else {
          uint64_t v66 = 0;
        }
        if ((v62 - 3) < 0xFFFFFFFE)
        {
          if (v62 == 3) {
            *((void *)v76 + 1) = 0;
          }
          goto LABEL_26;
        }
        unint64_t v64 = (unint64_t)(v66 + 8);
      }
      else
      {
        if ((v76[1] & 0x7F) != 2 && !*((_DWORD *)v76 + 3)) {
          goto LABEL_26;
        }
        uint64_t v63 = *((void *)v76 + 2);
        if ((v63 & 4) == 0) {
          goto LABEL_26;
        }
        unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8;
        if (!v64) {
          goto LABEL_26;
        }
      }
      *(void *)&long long v72 = &v76;
      sub_1CC5FA668(v64 + 16, &v72);
LABEL_26:
      uint64_t v37 = *(void *)(v31 + 40);
      *((void *)v36 + 3) = v37;
      uint64_t v38 = *(void *)(v37 + 32);
      uint64_t v39 = *((unsigned int *)v36 + 10);
      if (v39)
      {
        uint64_t v52 = *((void *)v36 + 4);
        uint64_t v53 = *(void *)(v38 + 40);
        uint64_t v54 = 32 * v39;
        do
        {
          if (!*(unsigned char *)v52)
          {
            uint64_t v55 = *(unsigned int *)(v52 + 4);
            if ((int)v55 >= 0) {
              int v56 = (uint64_t *)(*(void *)(v53 + 272) + 8 * v55);
            }
            else {
              int v56 = (uint64_t *)(*(void *)(v53 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
            }
            uint64_t v57 = *v56;
            if (*v56)
            {
              uint64_t v58 = *(void *)(v57 + 16);
              *(void *)(v57 + 16) = v52;
              *(void *)(v52 + 16) = v58;
              if (*(unsigned char *)(v52 + 3))
              {
                *(void *)(v52 + 24) = v57;
              }
              else
              {
                *(void *)(v52 + 24) = 0;
                int v56 = (uint64_t *)(v58 + 24);
              }
            }
            else
            {
              *(void *)(v52 + 16) = v52;
              *(void *)(v52 + 24) = 0;
            }
            *int v56 = v52;
          }
          v52 += 32;
          v54 -= 32;
        }
        while (v54);
      }
      uint64_t v40 = *(void *)(v38 + 728);
      if (v40) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v40 + 24))(v40, v36);
      }
      unint64_t v41 = *v32 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v36 = v41 | *(void *)v36 & 7;
      *((void *)v36 + 1) = v32;
      *(void *)(v41 + 8) = v36;
      *uint64_t v32 = *v32 & 7 | (unint64_t)v36;
      *((void *)&v72 + 1) = 0;
      long long v73 = 0uLL;
      LODWORD(v72) = 0x1000000;
      DWORD1(v72) = a3;
      llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v72);
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v72);
      *((void *)&v72 + 1) = 0;
      long long v73 = 0uLL;
      LODWORD(v72) = 0;
      DWORD1(v72) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v72);
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v72);
      unsigned int v75 = 32;
      uint64_t v74 = 1060205080;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v72, (const llvm::APInt **)&v74);
      long long v77 = v72;
      int v78 = v73;
      char v79 = v79 & 0xF0 | BYTE4(v73) & 0xF;
      if ((_UNKNOWN *)v72 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v77, (llvm::APInt *)&v74);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v77, (uint64_t)&v74);
      }
      uint64_t v42 = &v74;
      if (v75 >= 0x41) {
        uint64_t v42 = (uint64_t *)v74;
      }
      uint64_t v43 = *v42;
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = v43;
      llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v72);
      if (v75 >= 0x41 && v74) {
        MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
      }
      LODWORD(v72) = 1;
      *((void *)&v72 + 1) = 0;
      *(void *)&long long v73 = 0;
      llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v72);
      long long v72 = 0u;
      long long v73 = 0u;
      llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v72);
      if ((_UNKNOWN *)v77 == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v77 + 1);
      }
      else if ((*(_DWORD *)(v77 + 8) - 64) <= 0xFFFFFF7F && *((void *)&v77 + 1))
      {
        MEMORY[0x1D25D9CB0](*((void *)&v77 + 1), 0x1000C8000313F17);
      }
      return v10;
    }
    int v59 = *v76;
    if ((v59 - 4) > 0x1E)
    {
      if ((v59 - 3) >= 0xFFFFFFFE) {
        uint64_t v65 = v76;
      }
      else {
        uint64_t v65 = 0;
      }
      if ((v59 - 3) < 0xFFFFFFFE)
      {
        if (v59 == 3) {
          *((void *)v76 + 1) = 0;
        }
        goto LABEL_14;
      }
      unint64_t v61 = (unint64_t)(v65 + 8);
    }
    else
    {
      if ((v76[1] & 0x7F) != 2 && !*((_DWORD *)v76 + 3)) {
        goto LABEL_14;
      }
      uint64_t v60 = *((void *)v76 + 2);
      if ((v60 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFF8;
      if (!v61) {
        goto LABEL_14;
      }
    }
    *(void *)&long long v72 = &v76;
    sub_1CC5FA668(v61 + 16, &v72);
    goto LABEL_14;
  }
  return v10;
}

uint64_t sub_1CB88A3C4(void *a1, uint64_t *a2, int a3, int a4, unsigned int a5)
{
  _OWORD v54[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*a2 + 8)) {
    return 0;
  }
  int v11 = *((_DWORD *)a2 + 5);
  if ((v11 & 0x40000000) != 0) {
    int v12 = (uint64_t *)*(a2 - 1);
  }
  else {
    int v12 = &a2[-4 * (v11 & 0x7FFFFFF)];
  }
  uint64_t v13 = *v12;
  if (v13) {
    BOOL v14 = *(unsigned __int8 *)(v13 + 16) >= 0x1Cu;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14 && *(void *)(v13 + 40) != a2[5]) {
    uint64_t v13 = 0;
  }
  if ((v11 & 0x40000000) != 0) {
    uint64_t v15 = (uint64_t *)*(a2 - 1);
  }
  else {
    uint64_t v15 = &a2[-4 * (v11 & 0x7FFFFFF)];
  }
  uint64_t v16 = v15[4];
  if (v16) {
    BOOL v17 = *(unsigned __int8 *)(v16 + 16) >= 0x1Cu;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17 && *(void *)(v16 + 40) != a2[5]) {
    uint64_t v16 = 0;
  }
  if (v13 && *(unsigned __int8 *)(v13 + 16) <= 0x1Bu) {
    uint64_t v13 = 0;
  }
  if (!v16) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v18 = *(unsigned __int8 *)(v16 + 16);
  if (v18 <= 0x1B) {
    uint64_t v16 = 0;
  }
  if (v13 && v18 >= 0x1C)
  {
    if (*(unsigned char *)(v13 + 16) == 46 && *(unsigned char *)(v16 + 16) == 46)
    {
      uint64_t v19 = 0;
      v54[0] = v13;
      v54[1] = v16;
      char v20 = 1;
      while (2)
      {
        uint64_t v21 = 0;
        char v52 = v20;
        uint64_t v22 = v54[v19];
        uint64_t v53 = v19 ^ 1;
        char v23 = 1;
        do
        {
          char v24 = v23;
          int v25 = *(_DWORD *)(v22 + 20);
          if ((v25 & 0x40000000) != 0) {
            uint64_t v26 = *(void *)(v22 - 8);
          }
          else {
            uint64_t v26 = v22 - 32 * (v25 & 0x7FFFFFF);
          }
          uint64_t v27 = *(void *)(v26 + 32 * v21);
          unsigned int v28 = *(unsigned __int8 *)(v27 + 16);
          if (v27) {
            BOOL v29 = v28 >= 0x1C;
          }
          else {
            BOOL v29 = 0;
          }
          if ((!v29 || *(void *)(v27 + 40) == *(void *)(v22 + 40)) && v28 == 44)
          {
            int v30 = *(_DWORD *)(v27 + 20);
            uint64_t v31 = (v30 & 0x40000000) != 0 ? *(uint64_t **)(v27 - 8) : (uint64_t *)(v27 - 32 * (v30 & 0x7FFFFFF));
            uint64_t v32 = *v31;
            int v33 = *(unsigned __int8 *)(*v31 + 16);
            BOOL v34 = v32 && v33 == 17;
            if (v34 && sub_1CB844168(v32, 1.0))
            {
              int v36 = *(_DWORD *)(v27 + 20);
              uint64_t v37 = (v36 & 0x40000000) != 0 ? *(void *)(v27 - 8) : v27 - 32 * (v36 & 0x7FFFFFF);
              uint64_t v38 = *(void *)(v37 + 32);
              BOOL v39 = v38 && *(unsigned __int8 *)(v38 + 16) >= 0x1Cu;
              if ((!v39 || *(void *)(v38 + 40) == *(void *)(v27 + 40))
                && llvm::ValueIsKnownClamped((llvm *)v38, 0, v35))
              {
                uint64_t v40 = 0;
                int v41 = *(_DWORD *)(v27 + 20);
                uint64_t v42 = v54[v53];
                int v43 = *(_DWORD *)(v42 + 20);
                uint64_t v44 = v42 - 32 * (v43 & 0x7FFFFFF);
                char v45 = 1;
                while (1)
                {
                  char v46 = v45;
                  uint64_t v47 = v27 - 32 * (v41 & 0x7FFFFFF);
                  if ((v41 & 0x40000000) != 0) {
                    uint64_t v47 = *(void *)(v27 - 8);
                  }
                  uint64_t v48 = v42 - 32 * (v43 & 0x7FFFFFF);
                  if ((v43 & 0x40000000) != 0) {
                    uint64_t v48 = *(void *)(v42 - 8);
                  }
                  if (*(void *)(v47 + 32) == *(void *)(v48 + 32 * v40)) {
                    break;
                  }
                  char v45 = 0;
                  uint64_t v40 = 1;
                  if ((v46 & 1) == 0) {
                    goto LABEL_72;
                  }
                }
                if (!a3) {
                  return 1;
                }
                int v49 = *(_DWORD *)(v22 + 20);
                if ((v49 & 0x40000000) != 0) {
                  uint64_t v50 = *(void *)(v22 - 8);
                }
                else {
                  uint64_t v50 = v22 - 32 * (v49 & 0x7FFFFFF);
                }
                uint64_t v51 = v40 ^ 1;
                if ((v43 & 0x40000000) != 0) {
                  uint64_t v44 = *(void *)(v42 - 8);
                }
                return sub_1CB888D08(a1, a2, *(void *)(v50 + 32 * (v21 ^ 1)), v38, *(void *)(v44 + 32 * v51), 0, a3, 443, 0, a4, a5);
              }
            }
          }
LABEL_72:
          char v23 = 0;
          uint64_t v21 = 1;
        }
        while ((v24 & 1) != 0);
        char v20 = 0;
        uint64_t v19 = 1;
        if (v52) {
          continue;
        }
        break;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CB88A708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)(a1 + 8);
  uint64_t v3 = (const llvm::detail::DoubleAPFloat *)(a1 + 8);
  int v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v4 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::add(v3, v5, a3);
  }
  else {
    return llvm::detail::IEEEFloat::addOrSubtract(v3, v5, a3, 0);
  }
}

uint64_t sub_1CB88A72C(uint64_t a1, uint64_t a2)
{
  int v5 = *(void **)(a1 + 8);
  int v4 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == &unk_1CFB2E344)
  {
    return llvm::detail::DoubleAPFloat::compare(v4, v6);
  }
  else
  {
    unsigned int v7 = *(unsigned __int8 *)(a1 + 28);
    unsigned int v8 = *(unsigned __int8 *)(a2 + 28);
    uint64_t v9 = 3;
    switch(4 * (v7 & 7) + (v8 & 7))
    {
      case 1u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xDu:
        return v9;
      case 2u:
      case 3u:
      case 0xBu:
        uint64_t v9 = ~(v7 >> 2) & 2;
        break;
      case 8u:
      case 0xCu:
      case 0xEu:
        uint64_t v9 = (v8 >> 2) & 2;
        break;
      case 0xAu:
        int v11 = (v7 >> 3) & 1;
        if (v11 == ((v8 >> 3) & 1))
        {
          unsigned int v12 = llvm::detail::IEEEFloat::compareAbsoluteValue(v4, v6);
          if (v12 == 2) {
            unsigned int v13 = 0;
          }
          else {
            unsigned int v13 = v12;
          }
          if (v12) {
            unsigned int v14 = v13;
          }
          else {
            unsigned int v14 = 2;
          }
          if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
            uint64_t v9 = v14;
          }
          else {
            uint64_t v9 = v12;
          }
        }
        else
        {
          uint64_t v9 = (2 * v11) ^ 2u;
        }
        break;
      case 0xFu:
        uint64_t v9 = 1;
        break;
      default:
        int v15 = (v7 >> 3) & 1;
        BOOL v16 = v15 == ((v8 >> 3) & 1);
        LODWORD(v9) = (2 * v15) ^ 2;
        if (v16) {
          uint64_t v9 = 1;
        }
        else {
          uint64_t v9 = v9;
        }
        break;
    }
    return v9;
  }
}

uint64_t sub_1CB88A880(uint64_t a1, void *a2, unsigned int a3)
{
  if (!*(unsigned char *)(*a2 + 8))
  {
    if (a3 > 4) {
      return 0;
    }
LABEL_7:
    uint64_t v6 = a2[1];
    if (!v6) {
      return 1;
    }
    while (1)
    {
      uint64_t v7 = *(void *)(v6 + 24);
      uint64_t v8 = *(void *)(v7 + 8);
      if (!v8 || *(void *)(v8 + 8) || *(void *)(a2[1] + 24) != *(void *)(v8 + 24))
      {
        if (*(void *)(v7 + 40) != a2[5]) {
          return 0;
        }
        int v9 = *(unsigned __int8 *)(v7 + 16);
        if ((v9 - 73) < 2
          || ((int v10 = *(unsigned __int8 *)(a1 + 280), v18 = 0, v10)
           && (v17[1] = &v18, sub_1CD116F34((uint64_t)v17, 16, (uint64_t)a2))
           || (v17[0] = &v18, sub_1CC04C34C(v17, (uint64_t)a2)))
          && v18)
        {
          if ((sub_1CB88A880(a1) & 1) == 0) {
            return 0;
          }
          goto LABEL_25;
        }
        if (v9 != 44 && v9 != 42) {
          return 0;
        }
        if (*(unsigned char *)(*a2 + 8) || *(unsigned char *)(*(void *)v7 + 8))
        {
          int v11 = *(_DWORD *)(v7 + 20);
          unsigned int v12 = (v11 & 0x40000000) != 0 ? *(void **)(v7 - 8) : (void *)(v7 - 32 * (v11 & 0x7FFFFFF));
          if ((void *)v12[4] == a2)
          {
            unsigned int v13 = (void *)*v12;
            if ((void *)*v12 == a2) {
              return 0;
            }
            if (v13 && *((unsigned char *)v13 + 16) == 46)
            {
              uint64_t v14 = v13[1];
              if (v14 && !*(void *)(v14 + 8)) {
                goto LABEL_36;
              }
              uint64_t v15 = a2[1];
              if (v15 && !*(void *)(v15 + 8)) {
                goto LABEL_25;
              }
              if (v14 && !*(void *)(v14 + 8))
              {
LABEL_36:
                uint64_t v16 = a2[1];
                if (!v16 || *(void *)(v16 + 8)) {
                  return 0;
                }
              }
              if (sub_1CB88A880(a1)) {
                return 0;
              }
            }
          }
        }
      }
LABEL_25:
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        return 1;
      }
    }
  }
  uint64_t result = 0;
  if (a3 <= 4 && *(unsigned char *)(*a2 + 8) == 2) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1CB88AA74(uint64_t a1, unsigned __int8 *a2, int a3, int a4, unsigned int a5, int a6)
{
  v292[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  if ((*(unsigned __int8 *)(*(void *)a2 + 8) | 2) != 2) {
    return 0;
  }
  int v7 = a6;
  uint64_t v12 = a1;
  int v13 = a2[16];
  if (!a6)
  {
    if ((int v14 = *(unsigned __int8 *)(a1 + 280), v288 = 0, v14)
      && (*((void *)&v281 + 1) = &v288, a1 = sub_1CD116F34((uint64_t)&v281, 16, (uint64_t)a2), (a1 & 1) != 0)
      || (*(void *)&long long v281 = &v288, a1 = sub_1CC04C34C((void **)&v281, (uint64_t)a2), (a1 & 1) != 0))
    {
      if (v288)
      {
        unsigned int v259 = v288[16];
        if (v259 >= 0x1C)
        {
          uint64_t v260 = *((void *)v288 + 1);
          if (v260)
          {
            if (!*(void *)(v260 + 8) && v259 <= 0x31 && ((1 << v259) & 0x2540000000000) != 0)
            {
              BOOL v29 = 1;
              a1 = sub_1CB88AA74(v12);
              if (a1) {
                return v29;
              }
            }
          }
        }
      }
    }
  }
  int v274 = v13 - 28;
  if (*(unsigned char *)(*(void *)(v12 + 256) + 313) && *(unsigned char *)(v12 + 280) && !*(unsigned char *)(v6 + 8))
  {
    if (a4 && v7 != 1)
    {
      if (v13 == 42)
      {
        if ((sub_1CB88A3C4((void *)v12, (uint64_t *)a2, a3, a4, a5) & 1) == 0)
        {
          a1 = sub_1CD3CF270((void *)v12, (uint64_t *)a2, a3, a4, a5);
          if ((a1 & 1) == 0) {
            goto LABEL_8;
          }
        }
      }
      else
      {
        if (v13 != 46) {
          goto LABEL_8;
        }
        a1 = sub_1CD3CF060((void *)v12, (uint64_t *)a2, a3, a4, a5);
        if ((a1 & 1) == 0) {
          goto LABEL_8;
        }
      }
      return 1;
    }
    if (v13 == 42)
    {
      BOOL v29 = 0;
      if (sub_1CB88A3C4((void *)v12, (uint64_t *)a2, 0, 1, a5)) {
        return v29;
      }
      a1 = sub_1CD3CF270((void *)v12, (uint64_t *)a2, 0, 1, a5);
      BOOL v29 = 0;
      if (a1) {
        return v29;
      }
    }
    else if (v13 == 46)
    {
      a1 = sub_1CD3CF060((void *)v12, (uint64_t *)a2, 0, 1, a5);
      BOOL v29 = 0;
      if (a1) {
        return v29;
      }
    }
  }
LABEL_8:
  unsigned int v276 = a5;
  int v277 = a4;
  if (!*(unsigned char *)(*(void *)(v12 + 256) + 313)
    || !*(unsigned char *)(v12 + 280)
    || *(unsigned char *)(v6 + 8)
    || v13 != 44 && v13 != 42)
  {
    goto LABEL_11;
  }
  int v27 = *((_DWORD *)a2 + 5);
  if ((v27 & 0x40000000) != 0) {
    unsigned int v28 = (uint64_t *)*((void *)a2 - 1);
  }
  else {
    unsigned int v28 = (uint64_t *)&a2[-32 * (v27 & 0x7FFFFFF)];
  }
  uint64_t v30 = *v28;
  if (v30 && *(unsigned __int8 *)(v30 + 16) >= 0x1Cu && *(void *)(v30 + 40) != *((void *)a2 + 5)) {
    uint64_t v30 = 0;
  }
  if ((v27 & 0x40000000) != 0) {
    uint64_t v31 = (unsigned __int8 *)*((void *)a2 - 1);
  }
  else {
    uint64_t v31 = &a2[-32 * (v27 & 0x7FFFFFF)];
  }
  uint64_t v32 = *((void *)v31 + 4);
  if (v32 && *(unsigned __int8 *)(v32 + 16) >= 0x1Cu && *(void *)(v32 + 40) != *((void *)a2 + 5)) {
    uint64_t v32 = 0;
  }
  if (v30)
  {
    if (*(unsigned __int8 *)(v30 + 16) <= 0x1Bu) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v30;
    }
    if (!v32) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v33 = 0;
    if (!v32) {
      goto LABEL_11;
    }
  }
  if (!v33 || *(unsigned __int8 *)(v32 + 16) < 0x1Cu) {
    goto LABEL_11;
  }
  uint64_t v288 = 0;
  *((void *)&v281 + 1) = &v288;
  if (sub_1CD116F34((uint64_t)&v281, 16, v33))
  {
    int8x16_t v102 = v288;
  }
  else
  {
    *(void *)&long long v281 = &v288;
    if (sub_1CC04C34C((void **)&v281, v33)) {
      int8x16_t v102 = v288;
    }
    else {
      int8x16_t v102 = 0;
    }
  }
  int v136 = *(unsigned __int8 *)(v12 + 280);
  uint64_t v288 = 0;
  if (v136)
  {
    *((void *)&v281 + 1) = &v288;
    a1 = sub_1CD116F34((uint64_t)&v281, 16, v32);
    if (a1)
    {
      uint64_t v137 = v288;
      if (!v102) {
        goto LABEL_320;
      }
      goto LABEL_317;
    }
  }
  *(void *)&long long v281 = &v288;
  a1 = sub_1CC04C34C((void **)&v281, v32);
  if (a1) {
    uint64_t v137 = v288;
  }
  else {
    uint64_t v137 = 0;
  }
  if (v102)
  {
LABEL_317:
    if (v102[16] <= 0x1Bu) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = (uint64_t)v102;
    }
  }
LABEL_320:
  if (v137)
  {
    if (v137[16] <= 0x1Bu) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = (uint64_t)v137;
    }
  }
  if (v33)
  {
    if (v32)
    {
      if (*(unsigned char *)(v33 + 16) == 46 && *(unsigned char *)(v32 + 16) == 46)
      {
        a1 = sub_1CB88A880(v12, (void *)v33, 0);
        if (a1)
        {
          a1 = sub_1CB88A880(v12, (void *)v32, 0);
          if (a1)
          {
            if (v277)
            {
              if (v7 == 1) {
                int v138 = 5;
              }
              else {
                int v138 = 0;
              }
              unsigned int v139 = v138 ^ (v102 != 0);
              if (v137) {
                v139 ^= 4u;
              }
              if (a2[16] == 44) {
                v139 ^= 4u;
              }
              int v140 = *(_DWORD *)(v33 + 20);
              if ((v140 & 0x40000000) != 0) {
                uint64_t v141 = *(void *)(v33 - 8);
              }
              else {
                uint64_t v141 = v33 - 32 * (v140 & 0x7FFFFFF);
              }
              int v146 = *(_DWORD *)(v32 + 20);
              if ((v146 & 0x40000000) != 0) {
                uint64_t v147 = *(uint64_t **)(v32 - 8);
              }
              else {
                uint64_t v147 = (uint64_t *)(v32 - 32 * (v146 & 0x7FFFFFF));
              }
              if ((*(unsigned __int8 *)(*(void *)a2 + 8) | 2) != 2) {
                return 0;
              }
              uint64_t v148 = 0;
              uint64_t v149 = *(unsigned __int8 **)v141;
              unint64_t v150 = *(llvm::MachineInstr **)(v141 + 32);
              uint64_t v151 = v147[4];
              uint64_t v152 = *v147;
              v292[0] = 0;
              v292[1] = 0;
              uint64_t v288 = v149;
              uint64_t v289 = v150;
              uint64_t v290 = v152;
              uint64_t v291 = v151;
              int8x16_t v286 = 0u;
              int8x16_t v287 = 0u;
              int64x2_t v284 = 0u;
              int64x2_t v285 = 0u;
              do
              {
                int v153 = (&v288)[v148];
                if (v153[16] != 17 || v153 == 0) {
                  int v155 = (int64x2_t *)&v286;
                }
                else {
                  int v155 = &v284;
                }
                v155->i64[v148++] = (uint64_t)v153;
              }
              while (v148 != 4);
              uint64_t v156 = v284.i64[1];
              uint64_t v157 = v284.i64[0];
              uint64_t v158 = v285.i64[1];
              uint64_t v159 = v285.i64[0];
              BOOL v160 = !v284.i64[0] || v284.i64[1] == 0;
              BOOL v161 = v160 || v285.i64[0] == 0;
              if (!v161 && v285.i64[1] != 0) {
                return 0;
              }
              if (v284.i64[0] && !v284.i64[1])
              {
                int8x16_t v286 = vextq_s8(v286, v286, 8uLL);
                v284.i64[0] = 0;
                v284.i64[1] = v157;
                uint64_t v156 = v157;
              }
              if (v285.i64[0] && !v285.i64[1])
              {
                int8x16_t v287 = vextq_s8(v287, v287, 8uLL);
                v285.i64[0] = 0;
                v285.i64[1] = v159;
                uint64_t v158 = v159;
              }
              if (v156) {
                BOOL v163 = (v139 & 3) == 1;
              }
              else {
                BOOL v163 = 0;
              }
              int v164 = v139 & 4 | 2;
              if (!v163) {
                int v164 = v139;
              }
              int8x16_t v165 = vbicq_s8((int8x16_t)xmmword_1CD91C130, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v284), (int32x4_t)vceqzq_s64(v285)));
              *(int8x8_t *)v165.i8 = vorr_s8(*(int8x8_t *)v165.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL));
              __int32 v166 = v165.i32[0] | v165.i32[1];
              unsigned int v167 = ((v158 != 0) & (v139 >> 2)) != 0 ? v164 & 3 | 8 : v164;
              if (!word_1CD91CFC8[2 * v166 + v276]) {
                return 0;
              }
              unsigned int v278 = word_1CD91CFC8[2 * v166 + v276];
              unint64_t v168 = 0;
              BOOL v29 = 0;
              v283[0] = 0;
              v283[1] = 0;
              uint64_t v169 = &v286;
              uint64_t v170 = (int *)v283;
              do
              {
                if ((v167 >> v168)) {
                  *((_DWORD *)v283 + v168) = 2;
                }
                if (v286.i64[v168])
                {
                  if (!v284.i64[v168])
                  {
                    int v171 = sub_1CB88467C(v12, v169->i64, v170, &v281, 1, *((void *)a2 + 5), 7, 1);
                    *((_DWORD *)v292 + v168) = v171;
                    if (!v171) {
                      return v29;
                    }
                  }
                }
                BOOL v29 = v168 > 2;
                ++v170;
                uint64_t v169 = (int8x16_t *)((char *)v169 + 8);
                ++v168;
              }
              while (v168 != 4);
              uint64_t v172 = *(void *)(v12 + 32);
              uint64_t v173 = *(void *)(v172 + 640);
              uint64_t v174 = *(unint64_t **)(v172 + 648);
              uint64_t v175 = *(void *)(*(void *)(v12 + 96) + 8) + 48 * v278;
              uint64_t v176 = *(llvm::MachineFunction **)(v173 + 32);
              uint64_t v177 = *(unsigned __int8 **)(v12 + 72);
              char v279 = v177;
              if (v177) {
                llvm::MetadataTracking::track((uint64_t)&v279, v177, 2);
              }
              uint64_t v178 = llvm::MachineFunction::CreateMachineInstr(v176, v175, &v279, 0);
              if (!v279) {
                goto LABEL_407;
              }
              int v261 = *v279;
              if ((v261 - 4) > 0x1E)
              {
                if ((v261 - 3) >= 0xFFFFFFFE) {
                  uint64_t v264 = v279;
                }
                else {
                  uint64_t v264 = 0;
                }
                if ((v261 - 3) < 0xFFFFFFFE)
                {
                  if (v261 == 3) {
                    *((void *)v279 + 1) = 0;
                  }
                  goto LABEL_407;
                }
                unint64_t v263 = (unint64_t)(v264 + 8);
              }
              else
              {
                if ((v279[1] & 0x7F) != 2 && !*((_DWORD *)v279 + 3)) {
                  goto LABEL_407;
                }
                uint64_t v262 = *((void *)v279 + 2);
                if ((v262 & 4) == 0) {
                  goto LABEL_407;
                }
                unint64_t v263 = v262 & 0xFFFFFFFFFFFFFFF8;
                if (!v263) {
                  goto LABEL_407;
                }
              }
              *(void *)&long long v281 = &v279;
              sub_1CC5FA668(v263 + 16, &v281);
LABEL_407:
              uint64_t v179 = *(void *)(v173 + 40);
              *((void *)v178 + 3) = v179;
              uint64_t v180 = *(void *)(v179 + 32);
              uint64_t v181 = *((unsigned int *)v178 + 10);
              if (v181)
              {
                uint64_t v244 = *((void *)v178 + 4);
                uint64_t v245 = *(void *)(v180 + 40);
                uint64_t v246 = 32 * v181;
                do
                {
                  if (!*(unsigned char *)v244)
                  {
                    uint64_t v247 = *(unsigned int *)(v244 + 4);
                    if ((int)v247 >= 0) {
                      uint64_t v248 = (uint64_t *)(*(void *)(v245 + 272) + 8 * v247);
                    }
                    else {
                      uint64_t v248 = (uint64_t *)(*(void *)(v245 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v249 = *v248;
                    if (*v248)
                    {
                      uint64_t v250 = *(void *)(v249 + 16);
                      *(void *)(v249 + 16) = v244;
                      *(void *)(v244 + 16) = v250;
                      if (*(unsigned char *)(v244 + 3))
                      {
                        *(void *)(v244 + 24) = v249;
                      }
                      else
                      {
                        *(void *)(v244 + 24) = 0;
                        uint64_t v248 = (uint64_t *)(v250 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v244 + 16) = v244;
                      *(void *)(v244 + 24) = 0;
                    }
                    *uint64_t v248 = v244;
                  }
                  v244 += 32;
                  v246 -= 32;
                }
                while (v246);
              }
              uint64_t v182 = *(void *)(v180 + 728);
              if (v182) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v182 + 24))(v182, v178);
              }
              unint64_t v183 = *v174 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v178 = v183 | *(void *)v178 & 7;
              *((void *)v178 + 1) = v174;
              *(void *)(v183 + 8) = v178;
              unint64_t *v174 = *v174 & 7 | (unint64_t)v178;
              *((void *)&v281 + 1) = 0;
              long long v282 = 0uLL;
              LODWORD(v281) = 0x1000000;
              DWORD1(v281) = a3;
              llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v281);
              LODWORD(v281) = 1;
              *((void *)&v281 + 1) = 0;
              *(void *)&long long v282 = 0;
              llvm::MachineInstr::addOperand(v178, v176, (const llvm::MachineOperand *)&v281);
              uint64_t v184 = 0;
              char v279 = (unsigned __int8 *)v176;
              int v280 = v178;
              do
              {
                uint64_t v185 = v284.i64[v184];
                if (v185)
                {
                  uint64_t v187 = *(void **)(v185 + 32);
                  int v186 = (llvm::detail::DoubleAPFloat *)(v185 + 32);
                  if (v187 == &unk_1CFB2E344) {
                    llvm::detail::DoubleAPFloat::bitcastToAPInt(v186, (llvm::APInt *)&v281);
                  }
                  else {
                    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v186, (uint64_t)&v281);
                  }
                  if (DWORD2(v281) >= 0x41) {
                    unint64_t v188 = (uint64_t *)v281;
                  }
                  else {
                    unint64_t v188 = (uint64_t *)&v281;
                  }
                  uint64_t v189 = *v188;
                  if (DWORD2(v281) >= 0x41 && (void)v281 != 0) {
                    MEMORY[0x1D25D9CB0]();
                  }
                  if ((*((_DWORD *)v283 + v184) & 2) != 0) {
                    uint64_t v191 = v189 ^ 0x8000;
                  }
                  else {
                    uint64_t v191 = v189;
                  }
                  uint64_t v192 = v191 | 0x100000000;
                }
                else
                {
                  uint64_t v193 = (unsigned char *)v286.i64[v184];
                  if (!v193 || (sub_1CB8843D8(v12, v193, 1, (llvm::MachineFunction **)&v279, 0) & 1) == 0)
                  {
                    int v194 = *((_DWORD *)v292 + v184);
                    *((void *)&v281 + 1) = 0;
                    LODWORD(v281) = 0;
                    DWORD1(v281) = v194;
                    long long v282 = 0uLL;
                    llvm::MachineInstr::addOperand(v280, (llvm::MachineFunction *)v279, (const llvm::MachineOperand *)&v281);
                  }
                  uint64_t v192 = *((unsigned int *)v283 + v184);
                }
                LODWORD(v281) = 1;
                *((void *)&v281 + 1) = 0;
                *(void *)&long long v282 = v192;
                llvm::MachineInstr::addOperand(v280, (llvm::MachineFunction *)v279, (const llvm::MachineOperand *)&v281);
                ++v184;
              }
              while (v184 != 4);
              BOOL v29 = 1;
              LODWORD(v281) = 1;
              *((void *)&v281 + 1) = 0;
              *(void *)&long long v282 = 0;
              llvm::MachineInstr::addOperand(v280, (llvm::MachineFunction *)v279, (const llvm::MachineOperand *)&v281);
              long long v203 = v279;
              int v202 = v280;
              goto LABEL_439;
            }
            uint64_t v144 = *(void *)(v33 + 8);
            if (v144)
            {
              if (!*(void *)(v144 + 8))
              {
                uint64_t v145 = *(void *)(v32 + 8);
                if (v145)
                {
                  if (!*(void *)(v145 + 8)) {
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_11:
  if (!*(unsigned char *)(v12 + 280))
  {
    if (v13 == 44) {
      goto LABEL_287;
    }
    if (v13 != 49)
    {
LABEL_306:
      return sub_1CB8866A8(v12, a2, a3, v277, v276, v7);
    }
    goto LABEL_243;
  }
  if (v13 != 44 && v13 != 42)
  {
    int v26 = 1;
LABEL_204:
    if (v26) {
      BOOL v94 = v274 == 21;
    }
    else {
      BOOL v94 = 0;
    }
    if (v94)
    {
      int v95 = *((_DWORD *)a2 + 5);
      if ((v95 & 0x40000000) != 0) {
        long long v96 = (uint64_t *)*((void *)a2 - 1);
      }
      else {
        long long v96 = (uint64_t *)&a2[-32 * (v95 & 0x7FFFFFF)];
      }
      uint64_t v97 = *v96;
      int v98 = *(unsigned __int8 *)(*v96 + 16);
      if (v97) {
        BOOL v99 = v98 == 17;
      }
      else {
        BOOL v99 = 0;
      }
      if (v99 && sub_1CB844168(v97, 1.0))
      {
        int v100 = *((_DWORD *)a2 + 5);
        uint64_t v101 = (v100 & 0x40000000) != 0 ? (unsigned __int8 *)*((void *)a2 - 1) : &a2[-32 * (v100 & 0x7FFFFFF)];
        uint64_t v103 = (unsigned __int8 *)*((void *)v101 + 4);
        unsigned int v104 = v103[16];
        if ((!v103 || v104 < 0x1C || *((void *)v103 + 5) == *((void *)a2 + 5)) && v104 == 84)
        {
          uint64_t v105 = *((void *)v103 - 4);
          if (v105)
          {
            if (!*(unsigned char *)(v105 + 16)
              && *(void *)(v105 + 24) == *((void *)v103 + 9)
              && (*(unsigned char *)(v105 + 33) & 0x20) != 0
              && *(_DWORD *)(v105 + 36) == 280)
            {
              if (v7 | v276) {
                return 0;
              }
              int v106 = *(unsigned char **)&v103[-32 * (*((_DWORD *)v103 + 5) & 0x7FFFFFF)];
              int v107 = v277;
              uint64_t v108 = v12;
              int v109 = a3;
              int v110 = 424;
LABEL_346:
              return sub_1CD3CEE74(v108, (uint64_t *)v103, v106, v109, v110, v107);
            }
          }
        }
      }
    }
    else if (v274 != 21)
    {
      goto LABEL_286;
    }
LABEL_243:
    int v111 = *((_DWORD *)a2 + 5);
    if ((v111 & 0x40000000) != 0) {
      uint64_t v112 = (uint64_t *)*((void *)a2 - 1);
    }
    else {
      uint64_t v112 = (uint64_t *)&a2[-32 * (v111 & 0x7FFFFFF)];
    }
    a1 = *v112;
    int v113 = *(unsigned __int8 *)(*v112 + 16);
    if (a1) {
      BOOL v114 = v113 == 17;
    }
    else {
      BOOL v114 = 0;
    }
    if (v114)
    {
      a1 = sub_1CB844168(a1, 1.0);
      if (a1)
      {
        if (v7 | v276) {
          return 0;
        }
        int v142 = *((_DWORD *)a2 + 5);
        if ((v142 & 0x40000000) != 0) {
          uint64_t v143 = (unsigned __int8 *)*((void *)a2 - 1);
        }
        else {
          uint64_t v143 = &a2[-32 * (v142 & 0x7FFFFFF)];
        }
        int v107 = v277;
        int v106 = (unsigned char *)*((void *)v143 + 4);
        uint64_t v108 = v12;
        uint64_t v103 = a2;
        int v109 = a3;
        int v110 = 423;
        goto LABEL_346;
      }
    }
    if (!*(unsigned char *)(v12 + 280)) {
      goto LABEL_306;
    }
    int v115 = *((_DWORD *)a2 + 5);
    if ((v115 & 0x40000000) != 0) {
      unint64_t v116 = (unsigned __int8 *)*((void *)a2 - 1);
    }
    else {
      unint64_t v116 = &a2[-32 * (v115 & 0x7FFFFFF)];
    }
    uint64_t v117 = (uint64_t *)*((void *)v116 + 4);
    unsigned int v118 = *((unsigned __int8 *)v117 + 16);
    if (v117 && v118 >= 0x1C)
    {
      if (v117[5] != *((void *)a2 + 5)) {
        goto LABEL_286;
      }
    }
    else if (v118 < 0x1C)
    {
      goto LABEL_286;
    }
    if (v118 - 73 > 1)
    {
      uint64_t v121 = v117;
    }
    else
    {
      do
      {
        int v119 = *((_DWORD *)v117 + 5);
        if ((v119 & 0x40000000) != 0) {
          uint64_t v120 = (uint64_t **)*(v117 - 1);
        }
        else {
          uint64_t v120 = (uint64_t **)&v117[-4 * (v119 & 0x7FFFFFF)];
        }
        uint64_t v121 = *v120;
        unsigned int v118 = *((unsigned __int8 *)*v120 + 16);
        if (v121) {
          BOOL v122 = v118 >= 0x1C;
        }
        else {
          BOOL v122 = 0;
        }
        if (v122)
        {
          if (v121[5] != v117[5]) {
            goto LABEL_286;
          }
        }
        else if (v118 < 0x1C)
        {
          goto LABEL_286;
        }
        uint64_t v117 = v121;
      }
      while (v118 - 73 < 2);
    }
    if (v118 != 84
      || (uint64_t v123 = *(v121 - 4)) == 0
      || *(unsigned char *)(v123 + 16)
      || *(void *)(v123 + 24) != v121[9]
      || (*(unsigned char *)(v123 + 33) & 0x20) == 0
      || *(_DWORD *)(v123 + 36) != 280)
    {
LABEL_286:
      if (v274 == 16)
      {
LABEL_287:
        if (v277 == 1)
        {
          unint64_t v125 = *(llvm::ConstantFP ***)a2;
          if (!*(unsigned char *)(*(void *)a2 + 8))
          {
            int v126 = *((_DWORD *)a2 + 5);
            uint64_t v127 = (v126 & 0x40000000) != 0 ? (unsigned __int8 *)*((void *)a2 - 1) : &a2[-32 * (v126 & 0x7FFFFFF)];
            uint64_t v128 = *((void *)v127 + 4);
            unsigned int v129 = *(unsigned __int8 *)(v128 + 16);
            if ((!v128 || v129 < 0x1C || *(void *)(v128 + 40) == *((void *)a2 + 5)) && v129 == 84)
            {
              uint64_t v130 = *(void *)(v128 - 32);
              if (v130)
              {
                if (!*(unsigned char *)(v130 + 16)
                  && *(void *)(v130 + 24) == *(void *)(v128 + 72)
                  && (*(unsigned char *)(v130 + 33) & 0x20) != 0)
                {
                  int v131 = *(_DWORD *)(v130 + 36);
                  if (v131 == 1851 || v131 == 1830 && (sub_1CB883E68(a1, v128) & 1) == 0)
                  {
                    if (sub_1CB884D38(v128))
                    {
                      uint64_t v133 = llvm::ConstantFP::get(v125, v132, -1.0);
                      int v134 = *((_DWORD *)a2 + 5);
                      if ((v134 & 0x40000000) != 0) {
                        uint64_t v135 = (uint64_t *)*((void *)a2 - 1);
                      }
                      else {
                        uint64_t v135 = (uint64_t *)&a2[-32 * (v134 & 0x7FFFFFF)];
                      }
                      return sub_1CB888D08((void *)v12, (uint64_t *)a2, v128, (uint64_t)v133, *v135, 0, a3, 141, 0, 1, v276);
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_306;
      }
      goto LABEL_306;
    }
    if ((v115 & 0x40000000) != 0) {
      uint64_t v124 = (uint64_t *)*((void *)a2 - 1);
    }
    else {
      uint64_t v124 = (uint64_t *)&a2[-32 * (v115 & 0x7FFFFFF)];
    }
    int v195 = *(_DWORD *)(*v121 + 8);
    if ((v195 | 2) != 2) {
      return 0;
    }
    uint64_t v196 = *v124;
    int v197 = *(unsigned __int8 *)(*(void *)*v124 + 8);
    if ((v197 | 2) != 2) {
      return 0;
    }
    int v271 = v7;
    int v273 = a3;
    BOOL v198 = (unsigned char *)v121[-4 * (*((_DWORD *)v121 + 5) & 0x7FFFFFF)];
    LOBYTE(v292[0]) = v197 == 0;
    int v199 = v277 == 1;
    int v200 = v195;
    uint64_t v201 = v121[1];
    if (v201)
    {
      if (v200) {
        BOOL v204 = 1;
      }
      else {
        BOOL v204 = *(void *)(v201 + 8) == 0;
      }
      if (v204)
      {
        int v199 = v277 == 1 && v200 == 0;
        if (v200) {
          goto LABEL_468;
        }
      }
      else
      {
        int v206 = 1;
        do
        {
          uint64_t v207 = *(void *)(v201 + 24);
          if (v207 && *(unsigned char *)(v207 + 16) == 74)
          {
            while (1)
            {
              uint64_t v207 = *(void *)(v207 + 8);
              if (!v207) {
                break;
              }
              uint64_t v208 = *(void *)(v207 + 24);
              unsigned int v209 = *(unsigned __int8 *)(v208 + 16);
              if (v209 == 49) {
                int v210 = 0;
              }
              else {
                int v210 = v206;
              }
              if (v209 >= 0x1C && v208 != 0) {
                int v206 = v210;
              }
            }
          }
          uint64_t v201 = *(void *)(v201 + 8);
        }
        while (v201);
        if ((v206 & 1) == 0) {
          goto LABEL_468;
        }
        int v199 = (v277 == 1) & v206;
      }
    }
    else if (v200)
    {
LABEL_468:
      int v199 = 0;
      int v213 = 0;
      uint64_t v212 = &off_1E66A4340;
LABEL_469:
      if (v197) {
        int v214 = 0;
      }
      else {
        int v214 = v199;
      }
      uint64_t v215 = *(void *)(v12 + 48);
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v215, "", 0);
      *(void *)(*(void *)(v215 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v212;
      uint64_t v216 = *(void *)(v215 + 8);
      if (v216) {
        (*(void (**)(uint64_t))(*(void *)v216 + 24))(v216);
      }
      if (!sub_1CD3CEE74(v12, v121, v198, IncompleteVirtualRegister, 424, v213)) {
        return 0;
      }
      v286.i64[0] = 0;
      if (*(unsigned char *)(v196 + 16) == 17)
      {
        uint64_t v251 = sub_1CD3CA5D4(v12, (uint64_t *)v196);
        v284.i32[0] = 0;
        if (v251)
        {
          int v219 = v251;
          char v221 = 0;
          int v218 = 0;
          unsigned int v220 = 2;
          goto LABEL_479;
        }
      }
      else
      {
        v286.i64[0] = v196;
        v284.i32[0] = 0;
      }
      int v217 = sub_1CB88467C(v12, v286.i64, v284.i32, v292, v214, v121[5], 7, 1);
      if (!v217) {
        return 0;
      }
      int v218 = v217;
      int v219 = 0;
      unsigned int v220 = LOBYTE(v292[0]);
      char v221 = 1;
LABEL_479:
      int v222 = (char *)&unk_1CD91D064 + 4 * v220 - 4;
      int v223 = (char *)&unk_1CD91D034 + 24 * (v277 == 1) + 12 * v213 + 4 * v220;
      if (v214) {
        int v223 = v222;
      }
      uint64_t v224 = *(void *)(v12 + 32);
      uint64_t v225 = *(void *)(v224 + 640);
      uint64_t v226 = *(unint64_t **)(v224 + 648);
      uint64_t v227 = *(void *)(*(void *)(v12 + 96) + 8) + 48 * *(unsigned __int16 *)&v223[2 * v276];
      uint64_t v228 = *(llvm::MachineFunction **)(v225 + 32);
      uint64_t v229 = *(unsigned __int8 **)(v12 + 72);
      uint64_t v288 = v229;
      if (v229) {
        llvm::MetadataTracking::track((uint64_t)&v288, v229, 2);
      }
      uint64_t v230 = llvm::MachineFunction::CreateMachineInstr(v228, v227, &v288, 0);
      if (!v288)
      {
LABEL_484:
        uint64_t v231 = *(void *)(v225 + 40);
        *((void *)v230 + 3) = v231;
        uint64_t v232 = *(void *)(v231 + 32);
        uint64_t v233 = *((unsigned int *)v230 + 10);
        if (v233)
        {
          uint64_t v252 = *((void *)v230 + 4);
          uint64_t v253 = *(void *)(v232 + 40);
          uint64_t v254 = 32 * v233;
          do
          {
            if (!*(unsigned char *)v252)
            {
              uint64_t v255 = *(unsigned int *)(v252 + 4);
              if ((int)v255 >= 0) {
                int v256 = (uint64_t *)(*(void *)(v253 + 272) + 8 * v255);
              }
              else {
                int v256 = (uint64_t *)(*(void *)(v253 + 24) + 16 * (v255 & 0x7FFFFFFF) + 8);
              }
              uint64_t v257 = *v256;
              if (*v256)
              {
                uint64_t v258 = *(void *)(v257 + 16);
                *(void *)(v257 + 16) = v252;
                *(void *)(v252 + 16) = v258;
                if (*(unsigned char *)(v252 + 3))
                {
                  *(void *)(v252 + 24) = v257;
                }
                else
                {
                  *(void *)(v252 + 24) = 0;
                  int v256 = (uint64_t *)(v258 + 24);
                }
              }
              else
              {
                *(void *)(v252 + 16) = v252;
                *(void *)(v252 + 24) = 0;
              }
              *int v256 = v252;
            }
            v252 += 32;
            v254 -= 32;
          }
          while (v254);
        }
        uint64_t v234 = *(void *)(v232 + 728);
        if (v234) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v234 + 24))(v234, v230);
        }
        unint64_t v235 = *v226 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v230 = v235 | *(void *)v230 & 7;
        *((void *)v230 + 1) = v226;
        *(void *)(v235 + 8) = v230;
        *uint64_t v226 = *v226 & 7 | (unint64_t)v230;
        *((void *)&v281 + 1) = 0;
        long long v282 = 0uLL;
        LODWORD(v281) = 0x1000000;
        DWORD1(v281) = v273;
        llvm::MachineInstr::addOperand(v230, v228, (const llvm::MachineOperand *)&v281);
        LODWORD(v281) = 1;
        *((void *)&v281 + 1) = 0;
        *(void *)&long long v282 = 0;
        llvm::MachineInstr::addOperand(v230, v228, (const llvm::MachineOperand *)&v281);
        uint64_t v288 = (unsigned __int8 *)v228;
        uint64_t v289 = v230;
        if ((v221 & 1) == 0)
        {
          int v238 = *((unsigned __int8 *)*v219 + 8);
          uint64_t v240 = v219[4];
          unsigned int v239 = (llvm::detail::DoubleAPFloat *)(v219 + 4);
          if (v240 == (llvm::ConstantFP **)&unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v239, (llvm::APInt *)&v281);
          }
          else {
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v239, (uint64_t)&v281);
          }
          if (DWORD2(v281) >= 0x41) {
            uint64_t v241 = (uint64_t *)v281;
          }
          else {
            uint64_t v241 = (uint64_t *)&v281;
          }
          uint64_t v242 = *v241;
          if (DWORD2(v281) >= 0x41 && (void)v281) {
            MEMORY[0x1D25D9CB0]();
          }
          uint64_t v243 = v242 | 0x100000000;
          if (v238) {
            uint64_t v243 = v242;
          }
          uint64_t v237 = (llvm::MachineFunction *)v288;
          uint64_t v236 = v289;
          LODWORD(v281) = 1;
          *((void *)&v281 + 1) = 0;
          *(void *)&long long v282 = v243;
          llvm::MachineInstr::addOperand(v289, (llvm::MachineFunction *)v288, (const llvm::MachineOperand *)&v281);
          goto LABEL_504;
        }
        if (v286.i64[0])
        {
          if (sub_1CB8843D8(v12, v286.i64[0], 0, (llvm::MachineFunction **)&v288, 0))
          {
LABEL_492:
            LODWORD(v281) = 1;
            *((void *)&v281 + 1) = 0;
            *(void *)&long long v282 = v284.u32[0];
            llvm::MachineInstr::addOperand(v289, (llvm::MachineFunction *)v288, (const llvm::MachineOperand *)&v281);
            uint64_t v237 = (llvm::MachineFunction *)v288;
            uint64_t v236 = v289;
LABEL_504:
            *((void *)&v281 + 1) = 0;
            long long v282 = 0uLL;
            LODWORD(v281) = 0;
            DWORD1(v281) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand(v236, v237, (const llvm::MachineOperand *)&v281);
            BOOL v29 = 1;
            LODWORD(v281) = 1;
            *((void *)&v281 + 1) = 0;
            *(void *)&long long v282 = 2 * (v271 == 1);
            llvm::MachineInstr::addOperand(v289, (llvm::MachineFunction *)v288, (const llvm::MachineOperand *)&v281);
            LODWORD(v281) = 1;
            *((void *)&v281 + 1) = 0;
            *(void *)&long long v282 = 0;
            llvm::MachineInstr::addOperand(v289, (llvm::MachineFunction *)v288, (const llvm::MachineOperand *)&v281);
            long long v203 = v288;
            int v202 = v289;
LABEL_439:
            long long v281 = 0u;
            long long v282 = 0u;
            llvm::MachineInstr::addOperand(v202, (llvm::MachineFunction *)v203, (const llvm::MachineOperand *)&v281);
            return v29;
          }
          uint64_t v228 = (llvm::MachineFunction *)v288;
          uint64_t v230 = v289;
        }
        *((void *)&v281 + 1) = 0;
        long long v282 = 0uLL;
        LODWORD(v281) = 0;
        DWORD1(v281) = v218;
        llvm::MachineInstr::addOperand(v230, v228, (const llvm::MachineOperand *)&v281);
        goto LABEL_492;
      }
      int v265 = *v288;
      if ((v265 - 4) > 0x1E)
      {
        if ((v265 - 3) >= 0xFFFFFFFE) {
          unsigned int v268 = v288;
        }
        else {
          unsigned int v268 = 0;
        }
        if ((v265 - 3) < 0xFFFFFFFE)
        {
          if (v265 == 3) {
            *((void *)v288 + 1) = 0;
          }
          goto LABEL_484;
        }
        unint64_t v267 = (unint64_t)(v268 + 8);
      }
      else
      {
        if ((v288[1] & 0x7F) != 2 && !*((_DWORD *)v288 + 3)) {
          goto LABEL_484;
        }
        uint64_t v266 = *((void *)v288 + 2);
        if ((v266 & 4) == 0) {
          goto LABEL_484;
        }
        unint64_t v267 = v266 & 0xFFFFFFFFFFFFFFF8;
        if (!v267) {
          goto LABEL_484;
        }
      }
      *(void *)&long long v281 = &v288;
      sub_1CC5FA668(v267 + 16, &v281);
      goto LABEL_484;
    }
    uint64_t v212 = &off_1E66A4180;
    int v213 = 1;
    goto LABEL_469;
  }
  uint64_t v15 = 0;
  uint64_t v288 = 0;
  uint64_t v289 = 0;
  int v16 = *((_DWORD *)a2 + 5);
  char v17 = 1;
  do
  {
    char v18 = v17;
    uint64_t v19 = &a2[-32 * (v16 & 0x7FFFFFF)];
    if ((v16 & 0x40000000) != 0) {
      uint64_t v19 = (unsigned __int8 *)*((void *)a2 - 1);
    }
    uint64_t v20 = *(void *)&v19[32 * v15];
    unsigned int v21 = *(unsigned __int8 *)(v20 + 16);
    if (v20) {
      BOOL v22 = v21 >= 0x1C;
    }
    else {
      BOOL v22 = 0;
    }
    if (!v22 || *(void *)(v20 + 40) == *((void *)a2 + 5))
    {
      if (v21 <= 0x1B) {
        char v23 = 0;
      }
      else {
        char v23 = (unsigned __int8 *)v20;
      }
    }
    else
    {
      char v23 = 0;
    }
    char v17 = 0;
    (&v288)[v15] = v23;
    uint64_t v15 = 1;
  }
  while ((v18 & 1) != 0);
  unsigned int v24 = 0;
  if (v288 && v289)
  {
    uint64_t v25 = *((void *)v289 + 1);
    if (v25 && !*(void *)(v25 + 8))
    {
      uint64_t v34 = *((void *)v288 + 1);
      if (v34) {
        LODWORD(v34) = *(void *)(v34 + 8) == 0;
      }
      unsigned int v24 = v34 ^ 1;
    }
    else
    {
      unsigned int v24 = 0;
    }
  }
  int v270 = v7;
  int v272 = a3;
  int v35 = 0;
  char v36 = 1;
  while (1)
  {
    char v37 = v36;
    int v38 = v35 ^ v24;
    BOOL v39 = (&v288)[v35 ^ v24];
    if (!v39) {
      goto LABEL_137;
    }
    if (v39[16] - 73 > 1)
    {
      uint64_t v42 = (&v288)[v38];
    }
    else
    {
      do
      {
        int v40 = *((_DWORD *)v39 + 5);
        if ((v40 & 0x40000000) != 0) {
          int v41 = (unsigned __int8 **)*((void *)v39 - 1);
        }
        else {
          int v41 = (unsigned __int8 **)&v39[-32 * (v40 & 0x7FFFFFF)];
        }
        uint64_t v42 = *v41;
        unsigned int v43 = (*v41)[16];
        if (v42) {
          BOOL v44 = v43 >= 0x1C;
        }
        else {
          BOOL v44 = 0;
        }
        if (v44)
        {
          if (*((void *)v42 + 5) != *((void *)v39 + 5)) {
            goto LABEL_137;
          }
        }
        else if (v43 < 0x1C)
        {
          goto LABEL_137;
        }
        BOOL v39 = v42;
      }
      while (v43 - 73 < 2);
    }
    int v45 = *(unsigned __int8 *)(v12 + 280);
    v286.i64[0] = 0;
    if (v45 && (*((void *)&v281 + 1) = &v286, a1 = sub_1CD116F34((uint64_t)&v281, 16, (uint64_t)v42), (a1)
       || (*(void *)&long long v281 = &v286, a1 = sub_1CC04C34C((void **)&v281, (uint64_t)v42), (a1 & 1) != 0))
      && v286.i64[0])
    {
      unsigned int v47 = *(unsigned __int8 *)(v286.i64[0] + 16);
      if (v47 < 0x1C) {
        goto LABEL_137;
      }
      int v46 = 1;
      uint64_t v42 = (unsigned __int8 *)v286.i64[0];
    }
    else
    {
      int v46 = 0;
      unsigned int v47 = v42[16];
    }
    BOOL v49 = v47 == 84
       && (uint64_t v48 = *((void *)v42 - 4)) != 0
       && !*(unsigned char *)(v48 + 16)
       && *(void *)(v48 + 24) == *((void *)v42 + 9)
       && (*(unsigned char *)(v48 + 33) & 0x20) != 0
       && *(_DWORD *)(v48 + 36) == 280;
    if (v47 == 49)
    {
      int v50 = *((_DWORD *)v42 + 5);
      uint64_t v51 = (v50 & 0x40000000) != 0 ? (uint64_t *)*((void *)v42 - 1) : (uint64_t *)&v42[-32 * (v50 & 0x7FFFFFF)];
      a1 = *v51;
      int v52 = *(unsigned __int8 *)(*v51 + 16);
      if (a1 && v52 == 17)
      {
        a1 = sub_1CB844168(a1, 1.0);
        if (a1) {
          goto LABEL_137;
        }
      }
    }
    if (!v49 && v47 != 49 && v47 != 46) {
      goto LABEL_137;
    }
    a1 = sub_1CB88A880(v12, v42, 0);
    if (!a1) {
      goto LABEL_137;
    }
    if (v47 == 49)
    {
      int v69 = *((_DWORD *)v42 + 5);
      if ((v69 & 0x40000000) != 0) {
        uint64_t v70 = (unsigned __int8 *)*((void *)v42 - 1);
      }
      else {
        uint64_t v70 = &v42[-32 * (v69 & 0x7FFFFFF)];
      }
      BOOL v71 = (uint64_t *)*((void *)v70 + 4);
      unsigned int v72 = *((unsigned __int8 *)v71 + 16);
      if (v71 && v72 >= 0x1C)
      {
        if (v71[5] != *((void *)v42 + 5)) {
          goto LABEL_170;
        }
      }
      else if (v72 < 0x1C)
      {
        goto LABEL_170;
      }
      if (v72 - 73 > 1)
      {
        unsigned int v75 = v71;
      }
      else
      {
        do
        {
          int v73 = *((_DWORD *)v71 + 5);
          if ((v73 & 0x40000000) != 0) {
            uint64_t v74 = (uint64_t **)*(v71 - 1);
          }
          else {
            uint64_t v74 = (uint64_t **)&v71[-4 * (v73 & 0x7FFFFFF)];
          }
          unsigned int v75 = *v74;
          unsigned int v72 = *((unsigned __int8 *)*v74 + 16);
          if (v75) {
            BOOL v76 = v72 >= 0x1C;
          }
          else {
            BOOL v76 = 0;
          }
          if (v76)
          {
            if (v75[5] != v71[5]) {
              goto LABEL_170;
            }
          }
          else if (v72 < 0x1C)
          {
            goto LABEL_170;
          }
          BOOL v71 = v75;
        }
        while (v72 - 73 < 2);
      }
      if (v72 == 84)
      {
        uint64_t v77 = *(v75 - 4);
        if (v77)
        {
          if (!*(unsigned char *)(v77 + 16)
            && *(void *)(v77 + 24) == v75[9]
            && (*(unsigned char *)(v77 + 33) & 0x20) != 0
            && *(_DWORD *)(v77 + 36) == 280)
          {
            if ((v69 & 0x40000000) != 0) {
              int v78 = (uint64_t *)*((void *)v42 - 1);
            }
            else {
              int v78 = (uint64_t *)&v42[-32 * (v69 & 0x7FFFFFF)];
            }
            int v269 = *(unsigned __int8 *)(*v75 + 8);
            uint64_t v59 = *v78;
            uint64_t v84 = *(void *)(v12 + 48);
            unsigned int v85 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v84, "", 0);
            unsigned int v58 = v85;
            uint64_t v86 = &off_1E66A4340;
            if (!v269) {
              uint64_t v86 = &off_1E66A4180;
            }
            *(void *)(*(void *)(v84 + 24) + 16 * (v85 & 0x7FFFFFFF)) = v86;
            uint64_t v87 = *(void *)(v84 + 8);
            if (v87) {
              (*(void (**)(uint64_t))(*(void *)v87 + 24))(v87);
            }
            a1 = sub_1CD3CEE74(v12, v75, (unsigned char *)v75[-4 * (*((_DWORD *)v75 + 5) & 0x7FFFFFF)], v58, 424, *(unsigned __int8 *)(*v75 + 8) != 2);
            if ((a1 & 1) == 0) {
              goto LABEL_137;
            }
LABEL_124:
            uint64_t v60 = 0;
            if (v58) {
              goto LABEL_341;
            }
            goto LABEL_125;
          }
        }
      }
LABEL_170:
      if ((v69 & 0x40000000) != 0) {
        char v79 = (uint64_t *)*((void *)v42 - 1);
      }
      else {
        char v79 = (uint64_t *)&v42[-32 * (v69 & 0x7FFFFFF)];
      }
      uint64_t v59 = *v79;
      uint64_t v80 = *(void *)(v12 + 48);
      unsigned int v58 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v80, "", 0);
      *(void *)(*(void *)(v80 + 24) + 16 * (v58 & 0x7FFFFFFF)) = &off_1E66A4340;
      uint64_t v81 = *(void *)(v80 + 8);
      if (v81) {
        (*(void (**)(uint64_t))(*(void *)v81 + 24))(v81);
      }
      int v82 = *((_DWORD *)v42 + 5);
      if ((v82 & 0x40000000) != 0) {
        uint64_t v83 = (unsigned __int8 *)*((void *)v42 - 1);
      }
      else {
        uint64_t v83 = &v42[-32 * (v82 & 0x7FFFFFF)];
      }
      a1 = sub_1CD3CEE74(v12, (uint64_t *)v42, *((unsigned char **)v83 + 4), v58, 423, 0);
      if (!a1) {
        goto LABEL_137;
      }
      goto LABEL_124;
    }
    if (v47 != 46) {
      break;
    }
    int v54 = *((_DWORD *)v42 + 5);
    if ((v54 & 0x40000000) != 0) {
      uint64_t v55 = (uint64_t *)*((void *)v42 - 1);
    }
    else {
      uint64_t v55 = (uint64_t *)&v42[-32 * (v54 & 0x7FFFFFF)];
    }
    unsigned int v58 = 0;
    uint64_t v59 = *v55;
    uint64_t v60 = v55[4];
LABEL_125:
    if (v59 == v60) {
      goto LABEL_341;
    }
    uint64_t v63 = v38 ^ 1u;
    int v64 = *((_DWORD *)a2 + 5);
    if ((v64 & 0x40000000) != 0) {
      uint64_t v65 = (unsigned __int8 *)*((void *)a2 - 1);
    }
    else {
      uint64_t v65 = &a2[-32 * (v64 & 0x7FFFFFF)];
    }
    uint64_t v66 = *(void *)&v65[32 * (v38 ^ 1)];
    if (v59 == v66
      || v60 == v66
      || !sub_1CD3CF5B0(v12, v59)
      || !sub_1CD3CF5B0(v12, v60)
      || ((int v67 = *((_DWORD *)a2 + 5), (v67 & 0x40000000) != 0)
        ? (int v68 = (unsigned __int8 *)*((void *)a2 - 1))
        : (int v68 = &a2[-32 * (v67 & 0x7FFFFFF)]),
          a1 = sub_1CD3CF5B0(v12, *(void *)&v68[32 * v63]),
          (a1 & 1) == 0))
    {
      unsigned int v58 = 0;
      goto LABEL_192;
    }
LABEL_137:
    char v36 = 0;
    int v35 = 1;
    if ((v37 & 1) == 0)
    {
      int v26 = *(unsigned __int8 *)(v12 + 280);
      int v7 = v270;
      a3 = v272;
      goto LABEL_204;
    }
  }
  if (v49)
  {
    int v56 = *((_DWORD *)v42 + 5);
    if ((v56 & 0x40000000) != 0) {
      uint64_t v57 = (uint64_t *)*((void *)v42 - 1);
    }
    else {
      uint64_t v57 = (uint64_t *)&v42[-32 * (v56 & 0x7FFFFFF)];
    }
    uint64_t v59 = *v57;
    uint64_t v61 = *(void *)(v12 + 48);
    unsigned int v58 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v61, "", 0);
    *(void *)(*(void *)(v61 + 24) + 16 * (v58 & 0x7FFFFFFF)) = &off_1E66A4340;
    uint64_t v62 = *(void *)(v61 + 8);
    if (v62) {
      (*(void (**)(uint64_t))(*(void *)v62 + 24))(v62);
    }
    a1 = sub_1CB8640DC(v12, (uint64_t *)v42, v58, 1, 0, 0);
    if ((a1 & 1) == 0) {
      goto LABEL_137;
    }
    goto LABEL_124;
  }
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  unsigned int v58 = 0;
LABEL_341:
  LODWORD(v63) = v38 ^ 1;
LABEL_192:
  if (v270 == 1) {
    int v88 = 5;
  }
  else {
    int v88 = 0;
  }
  if (v38) {
    int v89 = 1;
  }
  else {
    int v89 = 4;
  }
  if (v274 != 16) {
    int v89 = 0;
  }
  unsigned int v90 = v89 ^ v88 ^ v46;
  int v91 = *((_DWORD *)a2 + 5);
  if ((v91 & 0x40000000) != 0) {
    BOOL v92 = (unsigned __int8 *)*((void *)a2 - 1);
  }
  else {
    BOOL v92 = &a2[-32 * (v91 & 0x7FFFFFF)];
  }
  return sub_1CB888D08((void *)v12, (uint64_t *)a2, v59, v60, *(void *)&v92[32 * v63], v58, v272, 141, v90, v277, v276);
}

uint64_t sub_1CB88C5D0(int *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  if (sub_1CB88C724(*a2) || sub_1CB88C724(*a3))
  {
    uint64_t v12 = *a3;
    BOOL v13 = *a2 == a4 && v12 == a5;
    if (v13 || (*a2 == a5 ? (BOOL v14 = v12 == a4) : (BOOL v14 = 0), v14))
    {
      uint64_t result = 0;
      int v16 = *a1;
      switch(*a1)
      {
        case '#':
          int v17 = 34;
          goto LABEL_24;
        case '$':
        case '&':
        case '(':
          return result;
        case '%':
          int v17 = 36;
          goto LABEL_24;
        case '\'':
          int v17 = 38;
          goto LABEL_24;
        case ')':
          int v17 = 40;
          goto LABEL_24;
        default:
          if (v16 == 5)
          {
            int v17 = 4;
          }
          else
          {
            if (v16 != 3) {
              return result;
            }
            int v17 = 2;
          }
LABEL_24:
          *a1 = v17;
          break;
      }
      return 1;
    }
  }
  if (sub_1CB88C798(a1, (llvm::ConstantInt ****)a3, a6 ^ 1u)) {
    return 1;
  }

  return sub_1CB88C798(a1, (llvm::ConstantInt ****)a2, a6);
}

BOOL sub_1CB88C724(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 == 16) {
    return 1;
  }
  if (v1 == 17)
  {
    uint64_t v3 = a1 + 24;
    uint64_t v4 = v3;
    if (*(_UNKNOWN **)(a1 + 32) == &unk_1CFB2E344) {
      uint64_t v4 = *(void *)(a1 + 40);
    }
    if ((*(unsigned char *)(v4 + 28) & 7) != 3) {
      return !sub_1CB8456FC(v3);
    }
  }
  return 0;
}

uint64_t sub_1CB88C798(int *a1, llvm::ConstantInt ****a2, int a3)
{
  int v3 = a3;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  int v7 = *((unsigned __int8 *)*a2 + 16);
  if (*a2) {
    BOOL v8 = v7 == 16;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    unsigned int v11 = *((_DWORD *)v6 + 8);
    LODWORD(v28) = v11;
    if (v11 > 0x40) {
      operator new[]();
    }
    uint64_t v12 = v6[3];
    uint64_t v27 = (uint64_t)v6[3];
    int v21 = *a1;
    if (*a1 == 41 || v21 == 37) {
      int v3 = a3 ^ 1;
    }
    if ((v21 - 38) <= 3)
    {
      char v22 = v11 - 1;
      if (v3)
      {
        if ((llvm::ConstantInt **)(1 << v22) == v12) {
          goto LABEL_53;
        }
        goto LABEL_49;
      }
      if (v12 == (llvm::ConstantInt **)~(-1 << v22)) {
        goto LABEL_53;
      }
LABEL_50:
      llvm::APInt::operator++((uint64_t)&v27);
      goto LABEL_51;
    }
    if (v3)
    {
      if (v12)
      {
LABEL_49:
        llvm::APInt::operator--((uint64_t)&v27);
LABEL_51:
        int v24 = *a1 - 35;
        if v24 <= 6 && ((0x55u >> v24))
        {
          *a1 = dword_1CD91D158[v24];
          *a2 = (llvm::ConstantInt ***)llvm::ConstantInt::get(***a2, (llvm::LLVMContext *)&v27, v23);
          int v3 = 1;
LABEL_54:
          if (v28 < 0x41 || !v27) {
            goto LABEL_65;
          }
          uint64_t v25 = v27;
LABEL_57:
          MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
          goto LABEL_65;
        }
LABEL_53:
        int v3 = 0;
        goto LABEL_54;
      }
    }
    else if (v11)
    {
      if ((llvm::ConstantInt **)(0xFFFFFFFFFFFFFFFFLL >> -(char)v11) == v12) {
        goto LABEL_53;
      }
      goto LABEL_50;
    }
    int v3 = 0;
LABEL_65:
    int v10 = 1;
    return v3 & v10;
  }
  if (v6) {
    BOOL v9 = v7 == 17;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    BOOL v13 = (const llvm::detail::DoubleAPFloat *)(v6 + 4);
    if (v6[4] == (llvm::ConstantInt **)&unk_1CFB2E344) {
      BOOL v14 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v28, v13);
    }
    else {
      BOOL v14 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v28, v13);
    }
    uint64_t v15 = v29;
    if ((_UNKNOWN *)v28 != &unk_1CFB2E344) {
      uint64_t v15 = &v27;
    }
    if ((*((unsigned char *)v15 + 28) & 6) == 0) {
      goto LABEL_62;
    }
    uint64_t v16 = (*a1 == 5) ^ v3;
    if (v16 == 1)
    {
      if (sub_1CD3CFB60((uint64_t)&v27)) {
        goto LABEL_62;
      }
    }
    else if ((_UNKNOWN *)v28 == &unk_1CFB2E344)
    {
      if (llvm::detail::DoubleAPFloat::isLargest(v14)) {
        goto LABEL_62;
      }
    }
    else
    {
      BOOL v18 = (v31 & 6) != 0 && (v31 & 7) != 3;
      if (*(_DWORD *)(v28 + 16) == 1)
      {
        if (v18 && v30 == *(_DWORD *)v28 && llvm::detail::IEEEFloat::isSignificandAllOnesExceptLSB(v14)) {
          goto LABEL_62;
        }
      }
      else if (v18 && v30 == *(_DWORD *)v28 && llvm::detail::IEEEFloat::isSignificandAllOnes(v14))
      {
        goto LABEL_62;
      }
    }
    sub_1CD3CFB7C((uint64_t)&v27, v16);
    if (!sub_1CB8456FC((uint64_t)&v27))
    {
      if (*a1 == 3)
      {
        int v20 = 2;
        goto LABEL_60;
      }
      if (*a1 == 5)
      {
        int v20 = 4;
LABEL_60:
        *a1 = v20;
        *a2 = (llvm::ConstantInt ***)llvm::ConstantFP::get(***a2, (llvm::LLVMContext *)&v27, v19);
        int v3 = 1;
LABEL_63:
        if ((_UNKNOWN *)v28 == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v29);
          goto LABEL_65;
        }
        if ((*(_DWORD *)(v28 + 8) - 64) > 0xFFFFFF7F) {
          goto LABEL_65;
        }
        uint64_t v25 = (uint64_t)v29;
        if (!v29) {
          goto LABEL_65;
        }
        goto LABEL_57;
      }
    }
LABEL_62:
    int v3 = 0;
    goto LABEL_63;
  }
  int v10 = 0;
  return v3 & v10;
}

uint64_t sub_1CB88CBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 74)
    {
      if (*(unsigned char *)(a1 + 280))
      {
        uint64_t v5 = *(void *)(a2 - 32);
        if (v5)
        {
          if (*(unsigned char *)(v5 + 16) == 73
            && *(void *)(v5 + 40) == a3
            && (!sub_1CB883E68(a1, *(void *)(a2 - 32)) || sub_1CB859958(a1, v5)))
          {
            return *(void *)(v5 - 32);
          }
        }
      }
    }
  }
  return v3;
}

uint64_t sub_1CB88CC7C(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, int a8)
{
  *a3 = sub_1CB88CBF4(a1, *a3, a7);
  *a4 = sub_1CB88CBF4(a1, *a4, a7);
  *a5 = sub_1CB88CBF4(a1, *a5, a7);
  uint64_t result = sub_1CB88CBF4(a1, *a6, a7);
  *a6 = result;
  unsigned int v17 = *(unsigned __int8 *)(result + 16);
  BOOL v18 = *a4 == result && v17 > 0x14;
  if (v18) {
    return result;
  }
  uint64_t v19 = result;
  uint64_t v20 = *a5;
  int v21 = *(unsigned __int8 *)(*a5 + 16);
  if (v21 == 17) {
    uint64_t result = *a5;
  }
  else {
    uint64_t result = 0;
  }
  if (v17 == 16) {
    uint64_t v22 = v19;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v17 == 17) {
    uint64_t v23 = v19;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v20 && v21 == 16)
  {
    int v24 = (unint64_t *)(v20 + 24);
    if (*(_DWORD *)(v20 + 32) >= 0x41u) {
      int v24 = (unint64_t *)*v24;
    }
    unint64_t v25 = *v24;
    if (!v22) {
      goto LABEL_39;
    }
LABEL_30:
    BOOL v29 = (uint64_t *)(v22 + 24);
    if (*(_DWORD *)(v22 + 32) >= 0x41u) {
      BOOL v29 = (uint64_t *)*v29;
    }
    uint64_t v30 = *v29;
    goto LABEL_33;
  }
  if (result)
  {
    uint64_t v27 = *(void **)(result + 32);
    int v26 = (llvm::detail::DoubleAPFloat *)(result + 32);
    if (v27 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v26, (llvm::APInt *)&v55);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v26, (uint64_t)&v55);
    }
    uint64_t result = (uint64_t)v55;
    if (v56 >= 0x41) {
      uint64_t v28 = v55;
    }
    else {
      uint64_t v28 = (unint64_t *)&v55;
    }
    unint64_t v25 = *v28;
    if (v56 >= 0x41 && v55) {
      uint64_t result = MEMORY[0x1D25D9CB0]();
    }
    if (!v22) {
      goto LABEL_39;
    }
    goto LABEL_30;
  }
  unint64_t v25 = -1;
  if (v22) {
    goto LABEL_30;
  }
LABEL_39:
  if (!v23)
  {
    uint64_t v30 = -1;
    if (!a8) {
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  uint64_t v32 = *(void **)(v23 + 32);
  char v31 = (llvm::detail::DoubleAPFloat *)(v23 + 32);
  if (v32 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v31, (llvm::APInt *)&v55);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v31, (uint64_t)&v55);
  }
  uint64_t result = (uint64_t)v55;
  if (v56 >= 0x41) {
    uint64_t v33 = (uint64_t *)v55;
  }
  else {
    uint64_t v33 = (uint64_t *)&v55;
  }
  uint64_t v30 = *v33;
  if (v56 >= 0x41 && v55) {
    uint64_t result = MEMORY[0x1D25D9CB0]();
  }
LABEL_33:
  if (!v30 || !v25 && v30 == 1) {
    return result;
  }
  if (a8)
  {
LABEL_49:
    if (v25 <= 1 && v30 != 1)
    {
      uint64_t result = sub_1CD3CF834(*(unsigned char *)(*(void *)(a1 + 256) + 281), a2, a3, a4, a5, a6, 0);
      if (result) {
        goto LABEL_101;
      }
    }
  }
LABEL_51:
  uint64_t v34 = *a3;
  if (*a3 == *a6 && *(unsigned char *)(v34 + 16) != 17)
  {
    *a3 = *a4;
    *a4 = v34;
    *a2 = dword_1CD91D174[*a2];
    return result;
  }
  if (a8)
  {
    uint64_t v35 = *a5;
    if (*a4 == *a5)
    {
      uint64_t v35 = *a4;
      if (*(unsigned char *)(*a4 + 16) != 17)
      {
        uint64_t result = sub_1CD3CF834(*(unsigned char *)(*(void *)(a1 + 256) + 281), a2, a3, a4, a5, a6, 0);
        if (result) {
          goto LABEL_101;
        }
        uint64_t v34 = *a3;
        uint64_t v35 = *a5;
      }
    }
    if (v34 == v35 && *(unsigned char *)(v35 + 16) != 17)
    {
      uint64_t result = sub_1CD3CF834(*(unsigned char *)(*(void *)(a1 + 256) + 281), a2, a3, a4, a5, a6, 1);
      if (result)
      {
        uint64_t v53 = *a3;
        *a3 = *a4;
        *a4 = v53;
        goto LABEL_101;
      }
    }
  }
  uint64_t v36 = *a4;
  if (!*a4 || *(unsigned char *)(v36 + 16) != 16) {
    goto LABEL_76;
  }
  uint64_t v37 = *(unsigned int *)(v36 + 32);
  if (v37 > 0x40)
  {
    int v39 = 0;
    int64_t v40 = (unint64_t)(v37 + 63) >> 6;
    do
    {
      BOOL v18 = v40-- < 1;
      if (v18) {
        break;
      }
      unint64_t v41 = *(void *)(*(void *)(v36 + 24) + 8 * v40);
      v39 += __clz(v41);
    }
    while (!v41);
    int v42 = v37 | 0xFFFFFFC0;
    if ((v37 & 0x3F) == 0) {
      int v42 = 0;
    }
    BOOL v38 = v39 + v42 == v37;
  }
  else
  {
    BOOL v38 = *(void *)(v36 + 24) == 0;
  }
  BOOL v43 = v38;
  if (*a2 != 32 || !v43) {
    goto LABEL_76;
  }
  uint64_t v46 = *a5;
  if (*a5 && *(unsigned char *)(v46 + 16) == 16)
  {
    uint64_t v47 = *(unsigned int *)(v46 + 32);
    if (v47 <= 0x40)
    {
      if (*(void *)(v46 + 24)) {
        goto LABEL_84;
      }
LABEL_93:
      *a2 = 34;
      *a5 = *a6;
      *a6 = v46;
      return result;
    }
    int v49 = 0;
    int64_t v50 = (unint64_t)(v47 + 63) >> 6;
    do
    {
      BOOL v18 = v50-- < 1;
      if (v18) {
        break;
      }
      unint64_t v51 = *(void *)(*(void *)(v46 + 24) + 8 * v50);
      v49 += __clz(v51);
    }
    while (!v51);
    int v52 = v47 | 0xFFFFFFC0;
    if ((v47 & 0x3F) == 0) {
      int v52 = 0;
    }
    if (v49 + v52 == v47) {
      goto LABEL_93;
    }
  }
LABEL_84:
  unsigned int v48 = sub_1CD3CF78C(a1, v46);
  uint64_t result = sub_1CD3CF78C(a1, *a6);
  if (v48 > result)
  {
    *a2 = 34;
LABEL_101:
    uint64_t v54 = *a5;
    *a5 = *a6;
    *a6 = v54;
    return result;
  }
LABEL_76:
  if (a8)
  {
    unsigned int v45 = sub_1CD3CF78C(a1, *a5);
    uint64_t result = sub_1CD3CF78C(a1, *a6);
    if (v45 > result)
    {
      uint64_t result = sub_1CD3CF834(*(unsigned char *)(*(void *)(a1 + 256) + 281), a2, a3, a4, a5, a6, 0);
      if (result) {
        goto LABEL_101;
      }
    }
  }
  return result;
}

uint64_t sub_1CB88D14C(uint64_t a1, llvm::Type **a2, uint64_t a3, unsigned __int8 *a4, llvm::ConstantFP ***a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  uint64_t v250 = (const llvm::detail::DoubleAPFloat *)a5;
  uint64_t v251 = a4;
  uint64_t v248 = a7;
  uint64_t v249 = a6;
  int v14 = *(_WORD *)(a3 + 18) & 0x3F;
  int v247 = v14;
  uint64_t v15 = *a2;
  unsigned int v16 = *((_DWORD *)*a2 + 2);
  if ((_BYTE)v16) {
    BOOL v17 = *((_DWORD *)*a2 + 2) == 13 && v16 >> 8 < 0x11;
  }
  else {
    BOOL v17 = 1;
  }
  BOOL v18 = *(llvm::Type **)a4;
  if ((*(_DWORD *)(*(void *)a4 + 8) & 0xFE) == 0x12) {
    BOOL v18 = (llvm::Type *)**((void **)v18 + 2);
  }
  int v236 = *(unsigned __int8 *)(**(void **)(a3 - 64) + 8);
  if (llvm::Type::getPrimitiveSizeInBits(v18) > 0x20) {
    return 0;
  }
  if ((v16 & 0xFE) == 0x12) {
    uint64_t v15 = (llvm::Type *)**((void **)v15 + 2);
  }
  if (llvm::Type::getPrimitiveSizeInBits(v15) > 0x20) {
    return 0;
  }
  unsigned int v21 = v14 - 9;
  int v232 = a8;
  if (*(unsigned char *)(a1 + 280) && v21 >= 0xFFFFFFFE)
  {
    if (v14 == 7)
    {
      uint64_t result = sub_1CD789230((uint64_t *)a1, a6);
      if (!result) {
        return result;
      }
      int v87 = result;
      uint64_t v88 = *(void *)(a1 + 32);
      uint64_t v89 = *(void *)(v88 + 640);
      unsigned int v90 = *(unint64_t **)(v88 + 648);
      uint64_t v91 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
      BOOL v92 = *(llvm::MachineFunction **)(v89 + 32);
      BOOL v93 = *(unsigned __int8 **)(a1 + 72);
      unint64_t v267 = v93;
      if (v93) {
        llvm::MetadataTracking::track((uint64_t)&v267, v93, 2);
      }
      BOOL v94 = llvm::MachineFunction::CreateMachineInstr(v92, v91, &v267, 0);
      if (!v267) {
        goto LABEL_116;
      }
      int v219 = *v267;
      if ((v219 - 4) > 0x1E)
      {
        if ((v219 - 3) >= 0xFFFFFFFE) {
          uint64_t v226 = v267;
        }
        else {
          uint64_t v226 = 0;
        }
        if ((v219 - 3) < 0xFFFFFFFE)
        {
          if (v219 == 3) {
            *((void *)v267 + 1) = 0;
          }
          goto LABEL_116;
        }
        unint64_t v221 = (unint64_t)(v226 + 8);
      }
      else if ((v267[1] & 0x7F) != 2 && !*((_DWORD *)v267 + 3) {
             || (uint64_t v220 = *((void *)v267 + 2), (v220 & 4) == 0)
      }
             || (unint64_t v221 = v220 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
LABEL_116:
        uint64_t v95 = *(void *)(v89 + 40);
        *((void *)v94 + 3) = v95;
        uint64_t v96 = *(void *)(v95 + 32);
        uint64_t v97 = *((unsigned int *)v94 + 10);
        if (v97)
        {
          uint64_t v98 = *((void *)v94 + 4);
          uint64_t v99 = *(void *)(v96 + 40);
          uint64_t v100 = 32 * v97;
          do
          {
            if (!*(unsigned char *)v98)
            {
              uint64_t v101 = *(unsigned int *)(v98 + 4);
              if ((int)v101 >= 0) {
                int8x16_t v102 = (uint64_t *)(*(void *)(v99 + 272) + 8 * v101);
              }
              else {
                int8x16_t v102 = (uint64_t *)(*(void *)(v99 + 24) + 16 * (v101 & 0x7FFFFFFF) + 8);
              }
              uint64_t v103 = *v102;
              if (*v102)
              {
                uint64_t v104 = *(void *)(v103 + 16);
                *(void *)(v103 + 16) = v98;
                *(void *)(v98 + 16) = v104;
                if (*(unsigned char *)(v98 + 3))
                {
                  *(void *)(v98 + 24) = v103;
                }
                else
                {
                  *(void *)(v98 + 24) = 0;
                  int8x16_t v102 = (uint64_t *)(v104 + 24);
                }
              }
              else
              {
                *(void *)(v98 + 16) = v98;
                *(void *)(v98 + 24) = 0;
              }
              uint64_t *v102 = v98;
            }
            v98 += 32;
            v100 -= 32;
          }
          while (v100);
        }
LABEL_161:
        uint64_t v133 = *(void *)(v96 + 728);
        if (v133) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v133 + 24))(v133, v94);
        }
        unint64_t v134 = *v90 & 0xFFFFFFFFFFFFFFF8;
        *(void *)BOOL v94 = v134 | *(void *)v94 & 7;
        *((void *)v94 + 1) = v90;
        *(void *)(v134 + 8) = v94;
        unint64_t *v90 = *v90 & 7 | (unint64_t)v94;
        uint64_t v273 = 0;
        int v274 = 0;
        uint64_t v275 = 0;
        LODWORD(v272) = 0x1000000;
        HIDWORD(v272) = v232;
        llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v272);
        uint64_t v273 = 0;
        int v274 = 0;
        LODWORD(v272) = 0;
        HIDWORD(v272) = v87;
        uint64_t v275 = 0;
        unsigned int v85 = v94;
        uint64_t v86 = v92;
        goto LABEL_109;
      }
      int v272 = &v267;
      sub_1CC5FA668(v221 + 16, &v272);
      goto LABEL_116;
    }
    uint64_t result = sub_1CD789230((uint64_t *)a1, a7);
    if (!result) {
      return result;
    }
    int v87 = result;
    uint64_t v127 = *(void *)(a1 + 32);
    uint64_t v128 = *(void *)(v127 + 640);
    unsigned int v90 = *(unint64_t **)(v127 + 648);
    uint64_t v129 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
    BOOL v92 = *(llvm::MachineFunction **)(v128 + 32);
    uint64_t v130 = *(unsigned __int8 **)(a1 + 72);
    unint64_t v267 = v130;
    if (v130) {
      llvm::MetadataTracking::track((uint64_t)&v267, v130, 2);
    }
    BOOL v94 = llvm::MachineFunction::CreateMachineInstr(v92, v129, &v267, 0);
    if (!v267)
    {
LABEL_160:
      uint64_t v131 = *(void *)(v128 + 40);
      *((void *)v94 + 3) = v131;
      uint64_t v96 = *(void *)(v131 + 32);
      uint64_t v132 = *((unsigned int *)v94 + 10);
      if (v132)
      {
        uint64_t v177 = *((void *)v94 + 4);
        uint64_t v178 = *(void *)(v96 + 40);
        uint64_t v179 = 32 * v132;
        do
        {
          if (!*(unsigned char *)v177)
          {
            uint64_t v180 = *(unsigned int *)(v177 + 4);
            if ((int)v180 >= 0) {
              uint64_t v181 = (uint64_t *)(*(void *)(v178 + 272) + 8 * v180);
            }
            else {
              uint64_t v181 = (uint64_t *)(*(void *)(v178 + 24) + 16 * (v180 & 0x7FFFFFFF) + 8);
            }
            uint64_t v182 = *v181;
            if (*v181)
            {
              uint64_t v183 = *(void *)(v182 + 16);
              *(void *)(v182 + 16) = v177;
              *(void *)(v177 + 16) = v183;
              if (*(unsigned char *)(v177 + 3))
              {
                *(void *)(v177 + 24) = v182;
              }
              else
              {
                *(void *)(v177 + 24) = 0;
                uint64_t v181 = (uint64_t *)(v183 + 24);
              }
            }
            else
            {
              *(void *)(v177 + 16) = v177;
              *(void *)(v177 + 24) = 0;
            }
            uint64_t *v181 = v177;
          }
          v177 += 32;
          v179 -= 32;
        }
        while (v179);
      }
      goto LABEL_161;
    }
    int v222 = *v267;
    if ((v222 - 4) > 0x1E)
    {
      if ((v222 - 3) >= 0xFFFFFFFE) {
        uint64_t v227 = v267;
      }
      else {
        uint64_t v227 = 0;
      }
      if ((v222 - 3) < 0xFFFFFFFE)
      {
        if (v222 == 3) {
          *((void *)v267 + 1) = 0;
        }
        goto LABEL_160;
      }
      unint64_t v224 = (unint64_t)(v227 + 8);
    }
    else
    {
      if ((v267[1] & 0x7F) != 2 && !*((_DWORD *)v267 + 3)) {
        goto LABEL_160;
      }
      uint64_t v223 = *((void *)v267 + 2);
      if ((v223 & 4) == 0) {
        goto LABEL_160;
      }
      unint64_t v224 = v223 & 0xFFFFFFFFFFFFFFF8;
      if (!v224) {
        goto LABEL_160;
      }
    }
    int v272 = &v267;
    sub_1CC5FA668(v224 + 16, &v272);
    goto LABEL_160;
  }
  __int16 v246 = 0;
  if (v236) {
    BOOL v22 = 0;
  }
  else {
    BOOL v22 = v17;
  }
  BOOL v245 = v22;
  unsigned int v233 = v17;
  uint64_t v229 = a2;
  unsigned int v231 = v14 - 9;
  if (v22)
  {
    int v105 = *(unsigned __int8 *)(*(void *)(a1 + 256) + 281);
    int v106 = a4[16];
    if (*((unsigned char *)a5 + 16) == 17) {
      uint64_t v107 = (uint64_t)a5;
    }
    else {
      uint64_t v107 = 0;
    }
    int v234 = 1;
    if (sub_1CD3CF94C(a1, a4, a5, (unsigned char *)a6, (unsigned char *)a7, 1) < 3)
    {
      int v23 = 0;
      unsigned int v21 = v14 - 9;
      goto LABEL_22;
    }
    int v109 = *(unsigned __int8 *)(a6 + 16);
    if (a6 && v109 == 17)
    {
      int v110 = (llvm::detail::DoubleAPFloat *)(a6 + 32);
      if (*(_UNKNOWN **)(a6 + 32) == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v110, (llvm::APInt *)&v272);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v110, (uint64_t)&v272);
      }
      if (v273 >= 0x41) {
        int v111 = (uint64_t *)v272;
      }
      else {
        int v111 = (uint64_t *)&v272;
      }
      uint64_t v112 = *v111;
      if (v273 >= 0x41 && v272) {
        MEMORY[0x1D25D9CB0]();
      }
    }
    else
    {
      uint64_t v112 = 2;
      if (a6 && v109 == 16)
      {
        uint64_t v135 = (uint64_t *)(a6 + 24);
        if (*(_DWORD *)(a6 + 32) >= 0x41u) {
          uint64_t v135 = (uint64_t *)*v135;
        }
        uint64_t v112 = *v135;
      }
    }
    int v136 = *(unsigned __int8 *)(a7 + 16);
    if (a7 && v136 == 17)
    {
      uint64_t v137 = (llvm::detail::DoubleAPFloat *)(a7 + 32);
      if (*(_UNKNOWN **)(a7 + 32) == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v137, (llvm::APInt *)&v272);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v137, (uint64_t)&v272);
      }
      if (v273 >= 0x41) {
        int v138 = (unint64_t *)v272;
      }
      else {
        int v138 = (unint64_t *)&v272;
      }
      unint64_t v139 = *v138;
      if (v273 >= 0x41 && v272)
      {
        int v241 = v105;
        int v140 = v106;
        uint64_t v141 = v112;
        unint64_t v142 = *v138;
        MEMORY[0x1D25D9CB0]();
        unint64_t v139 = v142;
        uint64_t v112 = v141;
        int v106 = v140;
        int v105 = v241;
      }
    }
    else
    {
      unint64_t v139 = 2;
      if (a7 && v136 == 16)
      {
        uint64_t v143 = (unint64_t *)(a7 + 24);
        if (*(_DWORD *)(a7 + 32) >= 0x41u) {
          uint64_t v143 = (unint64_t *)*v143;
        }
        unint64_t v139 = *v143;
      }
    }
    unsigned int v144 = (*(_WORD *)(a3 + 18) & 0x3F) - 1;
    BOOL v146 = (v144 >= 0xE || ((0x2121u >> v144) & 1) == 0) && (v106 == 17 || v107 != 0);
    BOOL v161 = (v105 || v146) && *(unsigned char *)(a1 + 280) != 0;
    if (v139) {
      BOOL v162 = v112 == 0;
    }
    else {
      BOOL v162 = 1;
    }
    unsigned int v21 = v14 - 9;
    if (v162 && v107)
    {
      if (*(unsigned char *)(v107 + 16) == 17)
      {
        if (*(_UNKNOWN **)(v107 + 32) == &unk_1CFB2E344) {
          uint64_t v203 = *(void *)(v107 + 40);
        }
        else {
          uint64_t v203 = v107 + 24;
        }
        unsigned int v21 = v14 - 9;
        if ((*(unsigned char *)(v203 + 28) & 7) == 3) {
          goto LABEL_239;
        }
      }
      else
      {
        if ((*(_DWORD *)(*(void *)v107 + 8) & 0xFE) == 0x12)
        {
          unint64_t v244 = v139;
          SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)v107, 0);
          unint64_t v139 = v244;
          if (SplatValue)
          {
            if (*((unsigned char *)SplatValue + 16) == 17)
            {
              if ((_UNKNOWN *)SplatValue[4] == &unk_1CFB2E344) {
                uint64_t v207 = (char *)SplatValue[5];
              }
              else {
                uint64_t v207 = (char *)(SplatValue + 3);
              }
              unsigned int v21 = v14 - 9;
              unint64_t v139 = v244;
              if ((v207[28] & 7) != 3) {
                goto LABEL_241;
              }
LABEL_239:
              int8x16_t v165 = llvm::ConstantFP::get(*a5, v108, -0.0);
              int v23 = 0;
              uint64_t v250 = v165;
LABEL_249:
              int v234 = 1;
              goto LABEL_22;
            }
          }
        }
        int v163 = *(unsigned __int8 *)(v107 + 16);
        if (v163 != 16)
        {
          if (v163 == 17)
          {
            uint64_t v242 = v112;
            unint64_t v188 = v139;
            char v189 = sub_1CB844168(v107, 0.0);
            unint64_t v139 = v188;
            uint64_t v112 = v242;
            if ((v189 & 1) == 0) {
              goto LABEL_241;
            }
          }
          else if ((v163 - 18) >= 3 && v163 != 13)
          {
            goto LABEL_241;
          }
          goto LABEL_239;
        }
        uint64_t v164 = *(unsigned int *)(v107 + 32);
        if (v164 < 0x41)
        {
          if (*(void *)(v107 + 24)) {
            goto LABEL_241;
          }
          goto LABEL_239;
        }
        unint64_t v196 = v139;
        int v197 = 0;
        int64_t v198 = (unint64_t)(v164 + 63) >> 6;
        do
        {
          BOOL v30 = v198-- < 1;
          if (v30) {
            break;
          }
          unint64_t v199 = *(void *)(*(void *)(v107 + 24) + 8 * v198);
          v197 += __clz(v199);
        }
        while (!v199);
        int v200 = v164 | 0xFFFFFFC0;
        if ((v164 & 0x3F) == 0) {
          int v200 = 0;
        }
        int v201 = v197 + v200;
        unsigned int v21 = v14 - 9;
        unint64_t v139 = v196;
        if (v201 == v164) {
          goto LABEL_239;
        }
      }
    }
    else if (!v107)
    {
      goto LABEL_246;
    }
LABEL_241:
    if (*(unsigned char *)(v107 + 16) == 17)
    {
      if (*(_UNKNOWN **)(v107 + 32) == &unk_1CFB2E344) {
        uint64_t v202 = *(void *)(v107 + 40);
      }
      else {
        uint64_t v202 = v107 + 24;
      }
      unsigned int v21 = v14 - 9;
      if ((*(unsigned char *)(v202 + 28) & 7) == 3) {
        goto LABEL_291;
      }
    }
    else
    {
      if ((*(_DWORD *)(*(void *)v107 + 8) & 0xFE) != 0x12
        || (v243 = v139, v204 = llvm::Constant::getSplatValue((llvm::Constant *)v107, 0), unint64_t v139 = v243, !v204)
        || v204[16] != 17)
      {
        int v166 = *(unsigned __int8 *)(v107 + 16);
        if (v166 == 16)
        {
          uint64_t v167 = *(unsigned int *)(v107 + 32);
          if (v167 >= 0x41)
          {
            unint64_t v190 = v139;
            int v191 = 0;
            int64_t v192 = (unint64_t)(v167 + 63) >> 6;
            do
            {
              BOOL v30 = v192-- < 1;
              if (v30) {
                break;
              }
              unint64_t v193 = *(void *)(*(void *)(v107 + 24) + 8 * v192);
              v191 += __clz(v193);
            }
            while (!v193);
            int v194 = v167 | 0xFFFFFFC0;
            if ((v167 & 0x3F) == 0) {
              int v194 = 0;
            }
            int v195 = v191 + v194;
            unsigned int v21 = v14 - 9;
            unint64_t v139 = v190;
            if (v195 == v167) {
              goto LABEL_291;
            }
            goto LABEL_246;
          }
          if (*(void *)(v107 + 24)) {
            goto LABEL_246;
          }
        }
        else
        {
          if (v166 != 17)
          {
            int v234 = 1;
            if ((v166 - 18) < 3)
            {
LABEL_292:
              int v23 = 1;
              goto LABEL_22;
            }
            int v23 = 1;
            if (v166 == 13) {
              goto LABEL_22;
            }
            goto LABEL_246;
          }
          uint64_t v184 = v107;
          BOOL v185 = v161;
          unint64_t v186 = v139;
          char v187 = sub_1CB844168(v184, 0.0);
          unint64_t v139 = v186;
          BOOL v161 = v185;
          if ((v187 & 1) == 0) {
            goto LABEL_246;
          }
        }
LABEL_291:
        int v234 = 1;
        goto LABEL_292;
      }
      if (*((_UNKNOWN **)v204 + 4) == &unk_1CFB2E344) {
        int v205 = (char *)*((void *)v204 + 5);
      }
      else {
        int v205 = v204 + 24;
      }
      unsigned int v21 = v14 - 9;
      unint64_t v139 = v243;
      if ((v205[28] & 7) == 3) {
        goto LABEL_291;
      }
    }
LABEL_246:
    if (v112)
    {
      if (v139)
      {
LABEL_248:
        int v23 = 0;
        goto LABEL_249;
      }
    }
    else
    {
      char v168 = v139 < 2 || v161;
      if ((v168 & 1) == 0) {
        goto LABEL_248;
      }
    }
    int v234 = 1;
    int v169 = sub_1CD3CF94C(a1, a4, a5, (unsigned char *)a6, (unsigned char *)a7, 1);
    if (v169 == sub_1CD3CF94C(a1, a4, a5, (unsigned char *)a6, (unsigned char *)a7, 0))
    {
      int v234 = 0;
      int v23 = 0;
      BOOL v245 = 0;
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  int v234 = 0;
LABEL_21:
  int v23 = 0;
LABEL_22:
  int v230 = v23;
  if (v21 < 0xFFFFFFFE)
  {
    sub_1CD3CF5F4(a1, &v247, (uint64_t *)&v251, (uint64_t *)&v250, &v249, &v248, (unsigned char *)&v246 + 1, &v246, &v245, 0);
    int v234 = v245;
  }
  else
  {
    HIBYTE(v246) = 1;
    LOBYTE(v246) = v14 == 8;
  }
  if (!v234) {
    sub_1CB88CC7C(a1, &v247, (uint64_t *)&v251, (uint64_t *)&v250, &v249, &v248, *(void *)(a3 + 40), *(unsigned __int8 *)(a1 + 280));
  }
  unint64_t v24 = 0;
  unsigned int v239 = 0;
  unsigned int v240 = 0;
  v271[0] = 0;
  v271[1] = 0;
  uint64_t v228 = v251;
  unint64_t v267 = v251;
  uint64_t v268 = (uint64_t)v250;
  uint64_t v26 = v248;
  uint64_t v25 = v249;
  uint64_t v269 = v249;
  uint64_t v270 = v248;
  memset(v266, 0, 32);
  uint64_t v27 = (int *)&v264;
  uint64_t v28 = v266;
  long long v264 = *(_OWORD *)"";
  memset(v265, 0, sizeof(v265));
  do
  {
    BOOL v29 = (&v267)[v24];
    if (v29) {
      BOOL v30 = v29[16] - 18 > 0xFFFFFFFD;
    }
    else {
      BOOL v30 = 0;
    }
    if (v30)
    {
      v240 |= 1 << v24;
      v265[v24] = v29;
    }
    else
    {
      if (v234) {
        BOOL v31 = 1;
      }
      else {
        BOOL v31 = v24 >= 2;
      }
      int v33 = !v31 && v236 == 0;
      LOBYTE(v272) = v33;
      v266[v24] = v29;
      if (v24 > 1)
      {
        uint64_t result = sub_1CD789230((uint64_t *)a1, (uint64_t)v29);
      }
      else
      {
        if (v29 == (unsigned __int8 *)v26 || v29 == (unsigned __int8 *)v25) {
          char v35 = 0;
        }
        else {
          char v35 = 7;
        }
        uint64_t result = sub_1CB88467C(a1, v28, v27, &v272, v234 != 0, *(void *)(a3 + 40), v35, 1);
        int v33 = v272;
      }
      *((_DWORD *)v271 + v24) = result;
      if (!result) {
        return result;
      }
      v239 |= v33 << v24;
    }
    ++v24;
    ++v27;
    ++v28;
  }
  while (v24 != 4);
  if (v230)
  {
    uint64_t v268 = (uint64_t)v228;
    HIDWORD(v271[0]) = v271[0];
    v265[1] = 0;
    unsigned int v239 = v239 & 0xFFFFFFFD | (2 * (v239 & 1));
    v240 &= ~2u;
    DWORD1(v264) = 7;
  }
  int v36 = v232;
  int v37 = HIBYTE(v246);
  int v38 = v232;
  if (HIBYTE(v246))
  {
    uint64_t v39 = *(void *)(a1 + 48);
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v39, "", 0);
    int v38 = IncompleteVirtualRegister;
    unint64_t v41 = v233 ? &off_1E66A4180 : &off_1E66A4340;
    *(void *)(*(void *)(v39 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v41;
    uint64_t v42 = *(void *)(v39 + 8);
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
    }
  }
  if (v231 >= 0xFFFFFFFE)
  {
    uint64_t v113 = 3;
    if (v247 == 7) {
      uint64_t v113 = 2;
    }
    uint64_t result = sub_1CD789230((uint64_t *)a1, (uint64_t)(&v267)[v113]);
    if (!result) {
      return result;
    }
    int v237 = result;
    uint64_t v114 = *(void *)(a1 + 32);
    uint64_t v115 = *(void *)(v114 + 640);
    unint64_t v116 = *(unint64_t **)(v114 + 648);
    uint64_t v117 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
    unsigned int v118 = *(llvm::MachineFunction **)(v115 + 32);
    int v119 = *(unsigned __int8 **)(a1 + 72);
    int v256 = v119;
    if (v119) {
      llvm::MetadataTracking::track((uint64_t)&v256, v119, 2);
    }
    uint64_t v120 = llvm::MachineFunction::CreateMachineInstr(v118, v117, &v256, 0);
    uint64_t v121 = v118;
    if (!v256) {
      goto LABEL_151;
    }
    int v216 = *v256;
    if ((v216 - 4) > 0x1E)
    {
      if ((v216 - 3) >= 0xFFFFFFFE) {
        uint64_t v225 = v256;
      }
      else {
        uint64_t v225 = 0;
      }
      if ((v216 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v218 = (unint64_t)(v225 + 8);
LABEL_378:
        int v272 = &v256;
        sub_1CC5FA668(v218 + 16, &v272);
        int v36 = v232;
        uint64_t v121 = v118;
        goto LABEL_151;
      }
      int v36 = v232;
      if (v216 == 3) {
        *((void *)v256 + 1) = 0;
      }
    }
    else
    {
      int v36 = v232;
      if ((v256[1] & 0x7F) == 2 || *((_DWORD *)v256 + 3))
      {
        uint64_t v217 = *((void *)v256 + 2);
        if ((v217 & 4) != 0)
        {
          unint64_t v218 = v217 & 0xFFFFFFFFFFFFFFF8;
          if (v218) {
            goto LABEL_378;
          }
        }
      }
    }
LABEL_151:
    uint64_t v122 = *(void *)(v115 + 40);
    *((void *)v120 + 3) = v122;
    uint64_t v123 = *(void *)(v122 + 32);
    uint64_t v124 = *((unsigned int *)v120 + 10);
    if (v124)
    {
      uint64_t v170 = *((void *)v120 + 4);
      uint64_t v171 = *(void *)(v123 + 40);
      uint64_t v172 = 32 * v124;
      do
      {
        if (!*(unsigned char *)v170)
        {
          uint64_t v173 = *(unsigned int *)(v170 + 4);
          if ((int)v173 >= 0) {
            uint64_t v174 = (uint64_t *)(*(void *)(v171 + 272) + 8 * v173);
          }
          else {
            uint64_t v174 = (uint64_t *)(*(void *)(v171 + 24) + 16 * (v173 & 0x7FFFFFFF) + 8);
          }
          uint64_t v175 = *v174;
          if (*v174)
          {
            uint64_t v176 = *(void *)(v175 + 16);
            *(void *)(v175 + 16) = v170;
            *(void *)(v170 + 16) = v176;
            if (*(unsigned char *)(v170 + 3))
            {
              *(void *)(v170 + 24) = v175;
            }
            else
            {
              *(void *)(v170 + 24) = 0;
              uint64_t v174 = (uint64_t *)(v176 + 24);
            }
          }
          else
          {
            *(void *)(v170 + 16) = v170;
            *(void *)(v170 + 24) = 0;
          }
          uint64_t *v174 = v170;
        }
        v170 += 32;
        v172 -= 32;
      }
      while (v172);
    }
    uint64_t v125 = *(void *)(v123 + 728);
    if (v125) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v125 + 24))(v125, v120);
    }
    unint64_t v126 = *v116 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v120 = v126 | *(void *)v120 & 7;
    *((void *)v120 + 1) = v116;
    *(void *)(v126 + 8) = v120;
    unint64_t *v116 = *v116 & 7 | (unint64_t)v120;
    uint64_t v273 = 0;
    int v274 = 0;
    uint64_t v275 = 0;
    LODWORD(v272) = 0x1000000;
    HIDWORD(v272) = v38;
    llvm::MachineInstr::addOperand(v120, v121, (const llvm::MachineOperand *)&v272);
    uint64_t v273 = 0;
    int v274 = 0;
    LODWORD(v272) = 0;
    HIDWORD(v272) = v237;
    uint64_t v275 = 0;
    llvm::MachineInstr::addOperand(v120, v121, (const llvm::MachineOperand *)&v272);
    if (!v37) {
      return 1;
    }
    goto LABEL_67;
  }
  if (v234)
  {
    sub_1CB88E8A4((void *)a1, v247, v240, v19, v38, (uint64_t)v266, (uint64_t)v271, (uint64_t)v265, (uint64_t)&v264);
    if (!v37) {
      return 1;
    }
  }
  else
  {
    sub_1CB887A74((void *)a1, v247, v240, v239, v38, 0, v233, (uint64_t)v266, (int *)v271, v265, (unsigned int *)&v264);
    if (!v37) {
      return 1;
    }
  }
LABEL_67:
  if ((_BYTE)v246) {
    unsigned int v43 = 2;
  }
  else {
    unsigned int v43 = 3;
  }
  uint64_t v44 = *(void *)(a1 + 48);
  int v45 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v44, "", 0);
  int v47 = v45;
  if (v233) {
    unsigned int v48 = &off_1E66A4180;
  }
  else {
    unsigned int v48 = &off_1E66A4340;
  }
  *(void *)(*(void *)(v44 + 24) + 16 * (v45 & 0x7FFFFFFF)) = v48;
  uint64_t v49 = *(void *)(v44 + 8);
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 24))(v49);
  }
  if ((v240 & 1) == 0)
  {
    unsigned int v50 = 8 * ((v240 >> v43) & 1);
    int v272 = (unsigned __int8 **)v266[0];
    uint64_t v273 = v266[0];
    uint64_t v51 = v266[v43];
    int v274 = v229;
    uint64_t v275 = v51;
    int v260 = v271[0];
    int v261 = v271[0];
    LODWORD(v51) = *((_DWORD *)v271 + v43);
    int v262 = v38;
    int v263 = v51;
    uint64_t v52 = v265[v43];
    int v256 = (unsigned __int8 *)v265[0];
    uint64_t v257 = v265[0];
    uint64_t v258 = 0;
    uint64_t v259 = v52;
    int v252 = v264;
    int v253 = v264 ^ 2;
    LODWORD(v51) = *((_DWORD *)&v265[-2] + v43);
    int v254 = 0;
    int v255 = v51;
    if (v234) {
      sub_1CB88E8A4((void *)a1, 1, v50, v46, v47, (uint64_t)&v272, (uint64_t)&v260, (uint64_t)&v256, (uint64_t)&v252);
    }
    else {
      sub_1CB887A74((void *)a1, 1, v50, ((int)(v239 << 31) >> 31) & 3, v47, 0, v233, (uint64_t)&v272, &v260, &v256, (unsigned int *)&v252);
    }
    goto LABEL_92;
  }
  uint64_t v54 = v265[0];
  if (*(unsigned char *)(v265[0] + 16) != 17) {
    uint64_t v54 = 0;
  }
  if (*(_UNKNOWN **)(v54 + 32) == &unk_1CFB2E344) {
    uint64_t v55 = *(void *)(v54 + 40);
  }
  else {
    uint64_t v55 = v54 + 24;
  }
  if ((*(unsigned char *)(v55 + 28) & 7) == 1)
  {
    uint64_t result = sub_1CD789230((uint64_t *)a1, v266[v43]);
    int v38 = result;
    if (!result) {
      return result;
    }
  }
  uint64_t v56 = *(void *)(a1 + 32);
  uint64_t v57 = *(void *)(v56 + 640);
  unsigned int v58 = *(unint64_t **)(v56 + 648);
  uint64_t v59 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
  uint64_t v60 = *(llvm::MachineFunction **)(v57 + 32);
  uint64_t v61 = *(unsigned __int8 **)(a1 + 72);
  int v256 = v61;
  if (v61) {
    llvm::MetadataTracking::track((uint64_t)&v256, v61, 2);
  }
  uint64_t v62 = llvm::MachineFunction::CreateMachineInstr(v60, v59, &v256, 0);
  if (v256)
  {
    int v208 = *v256;
    if ((v208 - 4) > 0x1E)
    {
      if ((v208 - 3) >= 0xFFFFFFFE) {
        int v214 = v256;
      }
      else {
        int v214 = 0;
      }
      if ((v208 - 3) < 0xFFFFFFFE)
      {
        int v36 = v232;
        if (v208 == 3) {
          *((void *)v256 + 1) = 0;
        }
        goto LABEL_88;
      }
      unint64_t v210 = (unint64_t)(v214 + 8);
    }
    else
    {
      int v36 = v232;
      if ((v256[1] & 0x7F) != 2 && !*((_DWORD *)v256 + 3)) {
        goto LABEL_88;
      }
      uint64_t v209 = *((void *)v256 + 2);
      if ((v209 & 4) == 0) {
        goto LABEL_88;
      }
      unint64_t v210 = v209 & 0xFFFFFFFFFFFFFFF8;
      if (!v210) {
        goto LABEL_88;
      }
    }
    int v272 = &v256;
    sub_1CC5FA668(v210 + 16, &v272);
    int v36 = v232;
  }
LABEL_88:
  uint64_t v63 = *(void *)(v57 + 40);
  *((void *)v62 + 3) = v63;
  uint64_t v64 = *(void *)(v63 + 32);
  uint64_t v65 = *((unsigned int *)v62 + 10);
  if (v65)
  {
    uint64_t v147 = *((void *)v62 + 4);
    uint64_t v148 = *(void *)(v64 + 40);
    uint64_t v149 = 32 * v65;
    do
    {
      if (!*(unsigned char *)v147)
      {
        uint64_t v150 = *(unsigned int *)(v147 + 4);
        if ((int)v150 >= 0) {
          uint64_t v151 = (uint64_t *)(*(void *)(v148 + 272) + 8 * v150);
        }
        else {
          uint64_t v151 = (uint64_t *)(*(void *)(v148 + 24) + 16 * (v150 & 0x7FFFFFFF) + 8);
        }
        uint64_t v152 = *v151;
        if (*v151)
        {
          uint64_t v153 = *(void *)(v152 + 16);
          *(void *)(v152 + 16) = v147;
          *(void *)(v147 + 16) = v153;
          if (*(unsigned char *)(v147 + 3))
          {
            *(void *)(v147 + 24) = v152;
          }
          else
          {
            *(void *)(v147 + 24) = 0;
            uint64_t v151 = (uint64_t *)(v153 + 24);
          }
        }
        else
        {
          *(void *)(v147 + 16) = v147;
          *(void *)(v147 + 24) = 0;
        }
        *uint64_t v151 = v147;
      }
      v147 += 32;
      v149 -= 32;
    }
    while (v149);
  }
  uint64_t v66 = *(void *)(v64 + 728);
  if (v66) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v66 + 24))(v66, v62);
  }
  unint64_t v67 = *v58 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v62 = v67 | *(void *)v62 & 7;
  *((void *)v62 + 1) = v58;
  *(void *)(v67 + 8) = v62;
  *unsigned int v58 = *v58 & 7 | (unint64_t)v62;
  uint64_t v273 = 0;
  int v274 = 0;
  uint64_t v275 = 0;
  LODWORD(v272) = 0x1000000;
  HIDWORD(v272) = v47;
  llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v272);
  uint64_t v273 = 0;
  int v274 = 0;
  LODWORD(v272) = 0;
  HIDWORD(v272) = v38;
  uint64_t v275 = 0;
  llvm::MachineInstr::addOperand(v62, v60, (const llvm::MachineOperand *)&v272);
LABEL_92:
  if ((v240 & 2) == 0)
  {
    unsigned int v68 = 8 * ((v240 >> v43) & 1);
    int v272 = (unsigned __int8 **)v266[1];
    uint64_t v273 = v266[1];
    uint64_t v69 = v266[v43];
    int v274 = v229;
    uint64_t v275 = v69;
    int v260 = HIDWORD(v271[0]);
    int v261 = HIDWORD(v271[0]);
    LODWORD(v69) = *((_DWORD *)v271 + v43);
    int v262 = v47;
    int v263 = v69;
    uint64_t v70 = v265[v43];
    int v256 = (unsigned __int8 *)v265[1];
    uint64_t v257 = v265[1];
    uint64_t v258 = 0;
    uint64_t v259 = v70;
    int v252 = DWORD1(v264) ^ 2;
    int v253 = DWORD1(v264);
    LODWORD(v69) = *((_DWORD *)&v265[-2] + v43);
    int v254 = 0;
    int v255 = v69;
    if (v234) {
      sub_1CB88E8A4((void *)a1, 1, v68, v53, v36, (uint64_t)&v272, (uint64_t)&v260, (uint64_t)&v256, (uint64_t)&v252);
    }
    else {
      sub_1CB887A74((void *)a1, 1, v68, ((int)(v239 << 30) >> 31) & 3, v36, 0, v233, (uint64_t)&v272, &v260, &v256, (unsigned int *)&v252);
    }
    return 1;
  }
  uint64_t v71 = v265[1];
  if (*(unsigned char *)(v265[1] + 16) != 17) {
    uint64_t v71 = 0;
  }
  if (*(_UNKNOWN **)(v71 + 32) == &unk_1CFB2E344) {
    uint64_t v72 = *(void *)(v71 + 40);
  }
  else {
    uint64_t v72 = v71 + 24;
  }
  if ((*(unsigned char *)(v72 + 28) & 7) != 1 || (result = sub_1CD789230((uint64_t *)a1, v266[v43]), (int v47 = result) != 0))
  {
    uint64_t v73 = *(void *)(a1 + 32);
    uint64_t v74 = *(void *)(v73 + 640);
    unsigned int v75 = *(unint64_t **)(v73 + 648);
    uint64_t v76 = *(void *)(*(void *)(a1 + 96) + 8) + 912;
    uint64_t v77 = *(llvm::MachineFunction **)(v74 + 32);
    int v78 = *(unsigned __int8 **)(a1 + 72);
    int v256 = v78;
    if (v78) {
      llvm::MetadataTracking::track((uint64_t)&v256, v78, 2);
    }
    char v79 = llvm::MachineFunction::CreateMachineInstr(v77, v76, &v256, 0);
    if (!v256) {
      goto LABEL_105;
    }
    int v211 = *v256;
    if ((v211 - 4) > 0x1E)
    {
      if ((v211 - 3) >= 0xFFFFFFFE) {
        uint64_t v215 = v256;
      }
      else {
        uint64_t v215 = 0;
      }
      if ((v211 - 3) < 0xFFFFFFFE)
      {
        if (v211 == 3) {
          *((void *)v256 + 1) = 0;
        }
        goto LABEL_105;
      }
      unint64_t v213 = (unint64_t)(v215 + 8);
    }
    else
    {
      if ((v256[1] & 0x7F) != 2 && !*((_DWORD *)v256 + 3)) {
        goto LABEL_105;
      }
      uint64_t v212 = *((void *)v256 + 2);
      if ((v212 & 4) == 0) {
        goto LABEL_105;
      }
      unint64_t v213 = v212 & 0xFFFFFFFFFFFFFFF8;
      if (!v213) {
        goto LABEL_105;
      }
    }
    int v272 = &v256;
    sub_1CC5FA668(v213 + 16, &v272);
LABEL_105:
    uint64_t v80 = *(void *)(v74 + 40);
    *((void *)v79 + 3) = v80;
    uint64_t v81 = *(void *)(v80 + 32);
    uint64_t v82 = *((unsigned int *)v79 + 10);
    if (v82)
    {
      uint64_t v154 = *((void *)v79 + 4);
      uint64_t v155 = *(void *)(v81 + 40);
      uint64_t v156 = 32 * v82;
      do
      {
        if (!*(unsigned char *)v154)
        {
          uint64_t v157 = *(unsigned int *)(v154 + 4);
          if ((int)v157 >= 0) {
            uint64_t v158 = (uint64_t *)(*(void *)(v155 + 272) + 8 * v157);
          }
          else {
            uint64_t v158 = (uint64_t *)(*(void *)(v155 + 24) + 16 * (v157 & 0x7FFFFFFF) + 8);
          }
          uint64_t v159 = *v158;
          if (*v158)
          {
            uint64_t v160 = *(void *)(v159 + 16);
            *(void *)(v159 + 16) = v154;
            *(void *)(v154 + 16) = v160;
            if (*(unsigned char *)(v154 + 3))
            {
              *(void *)(v154 + 24) = v159;
            }
            else
            {
              *(void *)(v154 + 24) = 0;
              uint64_t v158 = (uint64_t *)(v160 + 24);
            }
          }
          else
          {
            *(void *)(v154 + 16) = v154;
            *(void *)(v154 + 24) = 0;
          }
          *uint64_t v158 = v154;
        }
        v154 += 32;
        v156 -= 32;
      }
      while (v156);
    }
    uint64_t v83 = *(void *)(v81 + 728);
    if (v83) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v83 + 24))(v83, v79);
    }
    unint64_t v84 = *v75 & 0xFFFFFFFFFFFFFFF8;
    *(void *)char v79 = v84 | *(void *)v79 & 7;
    *((void *)v79 + 1) = v75;
    *(void *)(v84 + 8) = v79;
    *unsigned int v75 = *v75 & 7 | (unint64_t)v79;
    uint64_t v273 = 0;
    int v274 = 0;
    uint64_t v275 = 0;
    LODWORD(v272) = 0x1000000;
    HIDWORD(v272) = v232;
    llvm::MachineInstr::addOperand(v79, v77, (const llvm::MachineOperand *)&v272);
    uint64_t v273 = 0;
    int v274 = 0;
    LODWORD(v272) = 0;
    HIDWORD(v272) = v47;
    uint64_t v275 = 0;
    unsigned int v85 = v79;
    uint64_t v86 = v77;
LABEL_109:
    llvm::MachineInstr::addOperand(v85, v86, (const llvm::MachineOperand *)&v272);
    return 1;
  }
  return result;
}

void sub_1CB88E8A4(void *a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) > 3) {
    uint64_t v10 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v10 = qword_1CD91D220[a2 - 1];
  }
  uint64_t v87 = v10;
  uint64_t v11 = 0;
  memset(v101, 0, sizeof(v101));
  uint64_t v95 = v97;
  uint64_t v96 = 0x400000000;
  uint64_t v99 = 0;
  unint64_t v100 = 0;
  uint64_t v98 = &v99;
  do
  {
    uint64_t v12 = *(void *)(a8 + 8 * v11);
    if (!v12) {
      goto LABEL_51;
    }
    if (*(unsigned char *)(v12 + 16) == 17)
    {
      int v14 = *(void **)(v12 + 32);
      BOOL v13 = (const llvm::detail::DoubleAPFloat *)(v12 + 32);
      if (v14 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v102 + 1, v13);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v102 + 8, v13);
      }
      uint64_t v15 = (void *)*((void *)&v102 + 1);
      if ((*(_DWORD *)(a9 + 4 * v11) & 2) != 0)
      {
        if (*((_UNKNOWN **)&v102 + 1) != &unk_1CFB2E344)
        {
          BYTE12(v103) ^= 8u;
          goto LABEL_16;
        }
        sub_1CBFC6FB8(v103);
        sub_1CBFC6FB8(v103 + 32);
        uint64_t v15 = (void *)*((void *)&v102 + 1);
      }
      if (v15 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)((char *)&v102 + 8), (llvm::APInt *)&v93);
LABEL_17:
        BOOL v17 = v93;
        BOOL v18 = v94 >= 0x41;
        uint64_t v19 = &v93;
        if (v94 >= 0x41) {
          uint64_t v19 = (unsigned __int8 **)v93;
        }
        unsigned int v16 = (unsigned __int8 **)v101 + v11;
        *unsigned int v16 = *v19;
        if (v18 && v17) {
          MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
        }
        if (*((_UNKNOWN **)&v102 + 1) == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v103);
        }
        else if ((*(_DWORD *)(*((void *)&v102 + 1) + 8) - 64) <= 0xFFFFFF7F && (void)v103)
        {
          MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
        }
        goto LABEL_25;
      }
LABEL_16:
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v102 + 8, (uint64_t)&v93);
      goto LABEL_17;
    }
    unsigned int v16 = (unsigned __int8 **)(v12 + 24);
    if (*(_DWORD *)(v12 + 32) >= 0x41u) {
      unsigned int v16 = (unsigned __int8 **)*v16;
    }
LABEL_25:
    uint64_t v20 = (unsigned __int8 **)*v16;
    unsigned int v21 = (unint64_t *)v101 + v11;
    unint64_t v22 = (unint64_t)v20 | 0x100000000;
    *unsigned int v21 = v22;
    if (v100) {
      unint64_t v23 = v100;
    }
    else {
      unint64_t v23 = v96;
    }
    if (v23 < 2) {
      goto LABEL_53;
    }
    if (v100)
    {
      for (uint64_t i = v99; i; uint64_t i = (void *)*i)
      {
        unint64_t v25 = i[4];
        if (v22 >= v25)
        {
          if (v25 >= v22) {
            goto LABEL_53;
          }
          ++i;
        }
      }
    }
    else if (v96)
    {
      uint64_t v26 = v95;
      uint64_t v27 = 8 * v96;
      while (*v26 != v22)
      {
        ++v26;
        v27 -= 8;
        if (!v27) {
          goto LABEL_42;
        }
      }
      if (v27)
      {
LABEL_53:
        sub_1CD3CFA50((uint64_t **)&v95, (unint64_t *)v101 + v11);
        goto LABEL_51;
      }
    }
LABEL_42:
    uint64_t v28 = a1[6];
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v28, "", 0);
    *(void *)(*(void *)(v28 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4180;
    uint64_t v30 = *(void *)(v28 + 8);
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
    }
    *(_DWORD *)(a7 + 4 * v11) = IncompleteVirtualRegister;
    *(void *)(a6 + 8 * v11) = 0;
    uint64_t v31 = a1[4];
    uint64_t v32 = *(void *)(v31 + 640);
    int v33 = *(unint64_t **)(v31 + 648);
    uint64_t v34 = *(void *)(a1[12] + 8);
    char v35 = *(llvm::MachineFunction **)(v32 + 32);
    int v36 = (unsigned __int8 *)a1[9];
    BOOL v93 = v36;
    if (v36) {
      llvm::MetadataTracking::track((uint64_t)&v93, v36, 2);
    }
    int v37 = llvm::MachineFunction::CreateMachineInstr(v35, v34 + 48720, &v93, 0);
    if (v93)
    {
      int v54 = *v93;
      if ((v54 - 4) > 0x1E)
      {
        if ((v54 - 3) >= 0xFFFFFFFE) {
          uint64_t v57 = v93;
        }
        else {
          uint64_t v57 = 0;
        }
        if ((v54 - 3) < 0xFFFFFFFE)
        {
          if (v54 == 3) {
            *((void *)v93 + 1) = 0;
          }
          goto LABEL_47;
        }
        unint64_t v56 = (unint64_t)(v57 + 8);
      }
      else
      {
        if ((v93[1] & 0x7F) != 2 && !*((_DWORD *)v93 + 3)) {
          goto LABEL_47;
        }
        uint64_t v55 = *((void *)v93 + 2);
        if ((v55 & 4) == 0) {
          goto LABEL_47;
        }
        unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
        if (!v56) {
          goto LABEL_47;
        }
      }
      *(void *)&long long v102 = &v93;
      sub_1CC5FA668(v56 + 16, &v102);
    }
LABEL_47:
    uint64_t v38 = *(void *)(v32 + 40);
    *((void *)v37 + 3) = v38;
    uint64_t v39 = *(void *)(v38 + 32);
    uint64_t v40 = *((unsigned int *)v37 + 10);
    if (v40)
    {
      uint64_t v47 = *((void *)v37 + 4);
      uint64_t v48 = *(void *)(v39 + 40);
      uint64_t v49 = 32 * v40;
      do
      {
        if (!*(unsigned char *)v47)
        {
          uint64_t v50 = *(unsigned int *)(v47 + 4);
          if ((int)v50 >= 0) {
            uint64_t v51 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v50);
          }
          else {
            uint64_t v51 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
          }
          uint64_t v52 = *v51;
          if (*v51)
          {
            uint64_t v53 = *(void *)(v52 + 16);
            *(void *)(v52 + 16) = v47;
            *(void *)(v47 + 16) = v53;
            if (*(unsigned char *)(v47 + 3))
            {
              *(void *)(v47 + 24) = v52;
            }
            else
            {
              *(void *)(v47 + 24) = 0;
              uint64_t v51 = (uint64_t *)(v53 + 24);
            }
          }
          else
          {
            *(void *)(v47 + 16) = v47;
            *(void *)(v47 + 24) = 0;
          }
          *uint64_t v51 = v47;
        }
        v47 += 32;
        v49 -= 32;
      }
      while (v49);
    }
    uint64_t v41 = *(void *)(v39 + 728);
    if (v41) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v41 + 24))(v41, v37);
    }
    a3 ^= 1 << v11;
    unint64_t v42 = *v33 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v37 = v42 | *(void *)v37 & 7;
    *((void *)v37 + 1) = v33;
    *(void *)(v42 + 8) = v37;
    *int v33 = *v33 & 7 | (unint64_t)v37;
    *((void *)&v102 + 1) = 0;
    long long v103 = 0uLL;
    LODWORD(v102) = 0x1000000;
    DWORD1(v102) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v102);
    LODWORD(v102) = 1;
    *((void *)&v102 + 1) = 0;
    *(void *)&long long v103 = 0;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v102);
    unint64_t v43 = *v21;
    LODWORD(v102) = 1;
    *((void *)&v102 + 1) = 0;
    *(void *)&long long v103 = v43;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v102);
    unint64_t v44 = *v21;
    LODWORD(v102) = 1;
    *((void *)&v102 + 1) = 0;
    *(void *)&long long v103 = v44;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v102);
    unint64_t v45 = *v21;
    LODWORD(v102) = 1;
    *((void *)&v102 + 1) = 0;
    *(void *)&long long v103 = v45;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v102);
    unint64_t v46 = *v21;
    LODWORD(v102) = 1;
    *((void *)&v102 + 1) = 0;
    *(void *)&long long v103 = v46;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v102);
    long long v103 = 0u;
    long long v102 = 0u;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v102);
    LODWORD(v102) = 1;
    *((void *)&v102 + 1) = 0;
    *(void *)&long long v103 = 0;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v102);
    long long v103 = 0u;
    long long v102 = 0u;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v102);
LABEL_51:
    ++v11;
  }
  while (v11 != 4);
  unsigned int v58 = a3;
  uint64_t v59 = a1[4];
  uint64_t v60 = *(void *)(v59 + 640);
  uint64_t v61 = *(unint64_t **)(v59 + 648);
  uint64_t v62 = *(void *)(a1[12] + 8) + 48 * word_1CD91D06C[16 * v87 + a3];
  uint64_t v63 = *(llvm::MachineFunction **)(v60 + 32);
  uint64_t v64 = (unsigned __int8 *)a1[9];
  BOOL v93 = v64;
  if (v64) {
    llvm::MetadataTracking::track((uint64_t)&v93, v64, 2);
  }
  uint64_t v65 = llvm::MachineFunction::CreateMachineInstr(v63, v62, &v93, 0);
  uint64_t v66 = a9;
  if (v93)
  {
    int v83 = *v93;
    if ((v83 - 4) > 0x1E)
    {
      if ((v83 - 3) >= 0xFFFFFFFE) {
        uint64_t v86 = v93;
      }
      else {
        uint64_t v86 = 0;
      }
      if ((v83 - 3) < 0xFFFFFFFE)
      {
        unsigned int v58 = a3;
        if (v83 == 3) {
          *((void *)v93 + 1) = 0;
        }
        goto LABEL_89;
      }
      unint64_t v85 = (unint64_t)(v86 + 8);
    }
    else
    {
      unsigned int v58 = a3;
      if ((v93[1] & 0x7F) != 2 && !*((_DWORD *)v93 + 3)) {
        goto LABEL_89;
      }
      uint64_t v84 = *((void *)v93 + 2);
      if ((v84 & 4) == 0) {
        goto LABEL_89;
      }
      unint64_t v85 = v84 & 0xFFFFFFFFFFFFFFF8;
      if (!v85) {
        goto LABEL_89;
      }
    }
    *(void *)&long long v102 = &v93;
    sub_1CC5FA668(v85 + 16, &v102);
    unsigned int v58 = a3;
    uint64_t v66 = a9;
  }
LABEL_89:
  uint64_t v67 = *(void *)(v60 + 40);
  *((void *)v65 + 3) = v67;
  uint64_t v68 = *(void *)(v67 + 32);
  uint64_t v69 = *((unsigned int *)v65 + 10);
  if (v69)
  {
    uint64_t v76 = *((void *)v65 + 4);
    uint64_t v77 = *(void *)(v68 + 40);
    uint64_t v78 = 32 * v69;
    do
    {
      if (!*(unsigned char *)v76)
      {
        uint64_t v79 = *(unsigned int *)(v76 + 4);
        if ((int)v79 >= 0) {
          uint64_t v80 = (uint64_t *)(*(void *)(v77 + 272) + 8 * v79);
        }
        else {
          uint64_t v80 = (uint64_t *)(*(void *)(v77 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
        }
        uint64_t v81 = *v80;
        if (*v80)
        {
          uint64_t v82 = *(void *)(v81 + 16);
          *(void *)(v81 + 16) = v76;
          *(void *)(v76 + 16) = v82;
          if (*(unsigned char *)(v76 + 3))
          {
            *(void *)(v76 + 24) = v81;
          }
          else
          {
            *(void *)(v76 + 24) = 0;
            uint64_t v80 = (uint64_t *)(v82 + 24);
          }
        }
        else
        {
          *(void *)(v76 + 16) = v76;
          *(void *)(v76 + 24) = 0;
        }
        *uint64_t v80 = v76;
      }
      v76 += 32;
      v78 -= 32;
    }
    while (v78);
  }
  uint64_t v70 = *(void *)(v68 + 728);
  if (v70) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v70 + 24))(v70, v65);
  }
  unint64_t v71 = *v61 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v65 = v71 | *(void *)v65 & 7;
  *((void *)v65 + 1) = v61;
  *(void *)(v71 + 8) = v65;
  unint64_t *v61 = *v61 & 7 | (unint64_t)v65;
  *((void *)&v102 + 1) = 0;
  long long v103 = 0uLL;
  LODWORD(v102) = 0x1000000;
  DWORD1(v102) = a5;
  llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v102);
  LODWORD(v102) = 1;
  *((void *)&v102 + 1) = 0;
  *(void *)&long long v103 = 0;
  llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v102);
  uint64_t v72 = 0;
  BOOL v93 = (unsigned __int8 *)v63;
  BOOL v94 = v65;
  do
  {
    if ((v58 >> v72))
    {
      uint64_t v73 = *((void *)v101 + v72);
    }
    else
    {
      uint64_t v74 = *(unsigned char **)(a6 + 8 * v72);
      if (!v74 || (sub_1CB8843D8((uint64_t)a1, v74, 1, (llvm::MachineFunction **)&v93, 0) & 1) == 0)
      {
        int v75 = *(_DWORD *)(a7 + 4 * v72);
        *((void *)&v102 + 1) = 0;
        LODWORD(v102) = 0;
        DWORD1(v102) = v75;
        long long v103 = 0uLL;
        llvm::MachineInstr::addOperand(v94, (llvm::MachineFunction *)v93, (const llvm::MachineOperand *)&v102);
      }
      uint64_t v73 = *(unsigned int *)(v66 + 4 * v72);
    }
    LODWORD(v102) = 1;
    *((void *)&v102 + 1) = 0;
    *(void *)&long long v103 = v73;
    llvm::MachineInstr::addOperand(v94, (llvm::MachineFunction *)v93, (const llvm::MachineOperand *)&v102);
    ++v72;
  }
  while (v72 != 4);
  long long v103 = 0u;
  long long v102 = 0u;
  llvm::MachineInstr::addOperand(v94, (llvm::MachineFunction *)v93, (const llvm::MachineOperand *)&v102);
  LODWORD(v102) = 1;
  *((void *)&v102 + 1) = 0;
  *(void *)&long long v103 = 0;
  llvm::MachineInstr::addOperand(v94, (llvm::MachineFunction *)v93, (const llvm::MachineOperand *)&v102);
  long long v103 = 0u;
  long long v102 = 0u;
  llvm::MachineInstr::addOperand(v94, (llvm::MachineFunction *)v93, (const llvm::MachineOperand *)&v102);
  sub_1CB833A08((uint64_t)&v98, v99);
  if (v95 != v97) {
    free(v95);
  }
}

BOOL sub_1CB88F21C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  v171[1] = *MEMORY[0x1E4F143B8];
  uint64_t v152 = a5;
  uint64_t v153 = a4;
  uint64_t v150 = a7;
  uint64_t v151 = a6;
  int v13 = *(_WORD *)(a3 + 18) & 0x3F;
  unsigned int v149 = v13;
  int v14 = *(llvm::Type **)a4;
  if ((*(_DWORD *)(*(void *)a4 + 8) & 0xFE) == 0x12) {
    int v14 = (llvm::Type *)**((void **)v14 + 2);
  }
  uint64_t v15 = *a2;
  if (llvm::Type::getPrimitiveSizeInBits(v14) > 0x20) {
    return 0;
  }
  unsigned int v16 = *(_DWORD *)(v15 + 8);
  if ((v16 & 0xFE) == 0x12) {
    uint64_t v15 = **(void **)(v15 + 16);
  }
  if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v15) > 0x20) {
    return 0;
  }
  BOOL v19 = v16 == 0;
  int v148 = v16;
  if (v16 >> 8 < 0x11 && v16 == 13) {
    BOOL v19 = 1;
  }
  switch(v13)
  {
    case '!':
      int v21 = 32;
      goto LABEL_21;
    case '#':
      int v21 = 36;
      goto LABEL_21;
    case '%':
      int v21 = 34;
      goto LABEL_21;
    case '\'':
      int v21 = 40;
      goto LABEL_21;
    case ')':
      int v21 = 38;
LABEL_21:
      unsigned int v149 = v21;
      uint64_t v150 = a6;
      uint64_t v151 = a7;
      break;
    default:
      break;
  }
  int v147 = v19;
  sub_1CB88CC7C((uint64_t)a1, (int *)&v149, &v153, &v152, &v151, &v150, *(void *)(a3 + 40), 1);
  uint64_t v22 = 0;
  uint64_t v167 = 0;
  uint64_t v168 = 0;
  v166[0] = v153;
  v166[1] = v152;
  v166[2] = v151;
  v166[3] = v150;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  unsigned int v23 = v149;
  BOOL v25 = v149 - 38 < 4 || (v149 & 0xFFFFFFFE) == 32;
  long long v160 = 0uLL;
  long long v161 = 0uLL;
  char v26 = !v25;
  char v27 = 1;
  do
  {
    char v28 = v27;
    uint64_t v29 = v166[v22];
    unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
    if (v30 <= 0x1B) {
      uint64_t v29 = 0;
    }
    if (v30 == 68) {
      char v31 = v26;
    }
    else {
      char v31 = 1;
    }
    if (v31)
    {
      if (v30 == 67 && (v23 > 0x29 || ((1 << v23) & 0x3C300000000) == 0))
      {
        int v34 = *(_DWORD *)(v29 + 20);
        if ((v34 & 0x40000000) != 0) {
          char v35 = *(uint64_t **)(v29 - 8);
        }
        else {
          char v35 = (uint64_t *)(v29 - 32 * (v34 & 0x7FFFFFF));
        }
        uint64_t v36 = *v35;
LABEL_44:
        v166[v22] = v36;
      }
    }
    else
    {
      int v32 = *(_DWORD *)(v29 + 20);
      if ((v32 & 0x40000000) != 0) {
        int v33 = *(uint64_t **)(v29 - 8);
      }
      else {
        int v33 = (uint64_t *)(v29 - 32 * (v32 & 0x7FFFFFF));
      }
      uint64_t v36 = *v33;
      if (*(_DWORD *)(*(void *)v36 + 8) > 0xFFFu) {
        goto LABEL_44;
      }
    }
    char v27 = 0;
    uint64_t v22 = 1;
  }
  while ((v28 & 1) != 0);
  unsigned int v143 = v23;
  int v145 = a8;
  unint64_t v37 = 0;
  BOOL v17 = 0;
  unsigned int v38 = 0;
  unsigned int v39 = 0;
  int v40 = v147;
  do
  {
    uint64_t v41 = (unsigned __int8 *)v166[v37];
    int v42 = v40;
    if (v37 <= 1) {
      int v42 = *(_DWORD *)(*(void *)v41 + 8) >> 8 < 0x11u;
    }
    int v43 = v41[16];
    if (v43 != 16 || v41 == 0)
    {
      if (v43 != 17 || v41 == 0)
      {
        *((void *)&v164 + v37) = v41;
        int v46 = sub_1CD789230(a1, (uint64_t)v41);
        *((_DWORD *)&v167 + v37) = v46;
        if (!v46) {
          return v17;
        }
        int v40 = v147;
      }
      else
      {
        v39 |= 1 << v37;
        *((void *)&v160 + v37) = v41;
      }
    }
    else
    {
      v39 |= 1 << v37;
      *((void *)&v162 + v37) = v41;
    }
    v38 |= v42 << v37;
    BOOL v17 = v37++ > 2;
  }
  while (v37 != 4);
  uint64_t v47 = 0;
  v171[0] = 0x300000003;
  char v48 = 1;
  do
  {
    char v49 = v48;
    if (((v39 >> v47) & 4) != 0)
    {
      uint64_t v50 = v47 | 2;
      if (v16 == 13)
      {
        uint64_t v51 = *((void *)&v162 + v50);
        uint64_t v52 = (void *)(v51 + 24);
        if (*(_DWORD *)(v51 + 32) >= 0x41u) {
          uint64_t v52 = (void *)*v52;
        }
        int v53 = *(_DWORD *)v52;
        v169[v47] = *(_DWORD *)v52;
      }
      else
      {
        uint64_t v54 = *((void *)&v160 + v50);
        unint64_t v56 = *(void **)(v54 + 32);
        uint64_t v55 = (llvm::detail::DoubleAPFloat *)(v54 + 32);
        if (v56 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v55, (llvm::APInt *)&v158);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v55, (uint64_t)&v158);
        }
        uint64_t v57 = v158;
        BOOL v58 = DWORD2(v158) >= 0x41;
        if (DWORD2(v158) >= 0x41) {
          uint64_t v59 = (int *)v158;
        }
        else {
          uint64_t v59 = (int *)&v158;
        }
        int v53 = *v59;
        v169[v47] = *v59;
        if (v58 && v57) {
          MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
        }
      }
      if (v53 == 1) {
        int v60 = 1;
      }
      else {
        int v60 = 2;
      }
      if (!v53) {
        int v60 = 0;
      }
      *((_DWORD *)v171 + v47) = v60;
    }
    char v48 = 0;
    uint64_t v47 = 1;
  }
  while ((v49 & 1) != 0);
  int v61 = HIDWORD(v171[0]);
  if (HIDWORD(v171[0])) {
    BOOL v62 = 1;
  }
  else {
    BOOL v62 = LODWORD(v171[0]) != 1;
  }
  if (LODWORD(v171[0])) {
    BOOL v63 = 0;
  }
  else {
    BOOL v63 = HIDWORD(v171[0]) == 1;
  }
  BOOL v64 = !v63 && HIDWORD(v171[0]) != 0;
  BOOL v65 = !v63 && v62;
  int v146 = v65;
  uint64_t v66 = a1;
  if (v143 - 32 > 9)
  {
    int v67 = 16;
    if (!v64) {
      goto LABEL_110;
    }
  }
  else
  {
    int v67 = dword_1CD91D240[v143 - 32];
    if (!v64) {
      goto LABEL_110;
    }
  }
  if ((~v39 & 0xA) != 0)
  {
    uint64_t v69 = (void *)*((void *)&v164 + 1);
    unint64_t v70 = *((void *)&v165 + 1);
  }
  else
  {
    uint64_t v68 = (void *)(*((void *)&v162 + 1) + 24);
    if (*(_DWORD *)(*((void *)&v162 + 1) + 32) >= 0x41u) {
      uint64_t v68 = (void *)*v68;
    }
    uint64_t v69 = (void *)*v68;
    unint64_t v70 = v170;
  }
  if (v69 == (void *)v70)
  {
LABEL_110:
    int v71 = 0;
    if (v39) {
      goto LABEL_111;
    }
  }
  else
  {
    if (LODWORD(v171[0]) == 1)
    {
      int v61 = 0;
      int v146 = 0;
    }
    else if (LODWORD(v171[0]))
    {
      int v61 = 0;
    }
    else
    {
      int v146 = 0;
      int v61 = 1;
    }
    HIDWORD(v171[0]) = v61;
    int v71 = 1;
    if (v39) {
LABEL_111:
    }
      v38 |= (*(_DWORD *)(*(void *)v162 + 8) & 0xFFFFFF00) == 4096;
  }
  if ((v39 & 2) != 0 && (*(_DWORD *)(**((void **)&v162 + 1) + 8) & 0xFFFFFF00) == 0x1000) {
    v38 |= 2u;
  }
  unsigned int v72 = sub_1CD3D40C8(v67, *(unsigned __int8 *)(a1[32] + 280), v147, v39 & 1, v38 & 1, (v39 >> 1) & 1, (v38 >> 1) & 1, v171[0], (v38 & 4) != 0, v61);
  int v73 = v145;
  if (v71)
  {
    uint64_t v74 = a1[6];
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v74, "", 0);
    int v73 = IncompleteVirtualRegister;
    uint64_t v76 = &off_1E66A4340;
    if (v147) {
      uint64_t v76 = &off_1E66A4180;
    }
    *(void *)(*(void *)(v74 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v76;
    uint64_t v77 = *(void *)(v74 + 8);
    if (v77) {
      (*(void (**)(uint64_t))(*(void *)v77 + 24))(v77);
    }
  }
  uint64_t v78 = a1[4];
  uint64_t v79 = *(void *)(v78 + 640);
  uint64_t v80 = *(unint64_t **)(v78 + 648);
  uint64_t v81 = *(void *)(a1[12] + 8) + 48 * v72;
  uint64_t v82 = *(llvm::MachineFunction **)(v79 + 32);
  int v83 = (unsigned __int8 *)a1[9];
  uint64_t v156 = v83;
  if (v83) {
    llvm::MetadataTracking::track((uint64_t)&v156, v83, 2);
  }
  uint64_t v84 = llvm::MachineFunction::CreateMachineInstr(v82, v81, &v156, 0);
  if (v156)
  {
    int v135 = *v156;
    if ((v135 - 4) > 0x1E)
    {
      if ((v135 - 3) >= 0xFFFFFFFE) {
        uint64_t v141 = v156;
      }
      else {
        uint64_t v141 = 0;
      }
      if ((v135 - 3) < 0xFFFFFFFE)
      {
        uint64_t v66 = a1;
        if (v135 == 3) {
          *((void *)v156 + 1) = 0;
        }
        goto LABEL_123;
      }
      unint64_t v137 = (unint64_t)(v141 + 8);
    }
    else
    {
      uint64_t v66 = a1;
      if ((v156[1] & 0x7F) != 2 && !*((_DWORD *)v156 + 3)) {
        goto LABEL_123;
      }
      uint64_t v136 = *((void *)v156 + 2);
      if ((v136 & 4) == 0) {
        goto LABEL_123;
      }
      unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFF8;
      if (!v137) {
        goto LABEL_123;
      }
    }
    *(void *)&long long v158 = &v156;
    sub_1CC5FA668(v137 + 16, &v158);
    uint64_t v66 = a1;
  }
LABEL_123:
  uint64_t v85 = *(void *)(v79 + 40);
  *((void *)v84 + 3) = v85;
  uint64_t v86 = *(void *)(v85 + 32);
  uint64_t v87 = *((unsigned int *)v84 + 10);
  if (v87)
  {
    uint64_t v121 = *((void *)v84 + 4);
    uint64_t v122 = *(void *)(v86 + 40);
    uint64_t v123 = 32 * v87;
    do
    {
      if (!*(unsigned char *)v121)
      {
        uint64_t v124 = *(unsigned int *)(v121 + 4);
        if ((int)v124 >= 0) {
          uint64_t v125 = (uint64_t *)(*(void *)(v122 + 272) + 8 * v124);
        }
        else {
          uint64_t v125 = (uint64_t *)(*(void *)(v122 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
        }
        uint64_t v126 = *v125;
        if (*v125)
        {
          uint64_t v127 = *(void *)(v126 + 16);
          *(void *)(v126 + 16) = v121;
          *(void *)(v121 + 16) = v127;
          if (*(unsigned char *)(v121 + 3))
          {
            *(void *)(v121 + 24) = v126;
          }
          else
          {
            *(void *)(v121 + 24) = 0;
            uint64_t v125 = (uint64_t *)(v127 + 24);
          }
        }
        else
        {
          *(void *)(v121 + 16) = v121;
          *(void *)(v121 + 24) = 0;
        }
        *uint64_t v125 = v121;
      }
      v121 += 32;
      v123 -= 32;
    }
    while (v123);
  }
  uint64_t v88 = *(void *)(v86 + 728);
  if (v88) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v88 + 24))(v88, v84);
  }
  unint64_t v89 = *v80 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v84 = v89 | *(void *)v84 & 7;
  *((void *)v84 + 1) = v80;
  *(void *)(v89 + 8) = v84;
  *uint64_t v80 = *v80 & 7 | (unint64_t)v84;
  *((void *)&v158 + 1) = 0;
  long long v159 = 0uLL;
  int v144 = v73;
  LODWORD(v158) = 0x1000000;
  DWORD1(v158) = v73;
  llvm::MachineInstr::addOperand(v84, v82, (const llvm::MachineOperand *)&v158);
  LODWORD(v158) = 1;
  *((void *)&v158 + 1) = 0;
  *(void *)&long long v159 = 0;
  llvm::MachineInstr::addOperand(v84, v82, (const llvm::MachineOperand *)&v158);
  unint64_t v90 = 0;
  uint64_t v156 = (unsigned __int8 *)v82;
  uint64_t v157 = v84;
  uint64_t v91 = (uint64_t *)v161;
  BOOL v92 = (llvm::detail::DoubleAPFloat *)(v161 + 32);
  do
  {
    if (((v90 == 2) & ~v146) != 0) {
      break;
    }
    if ((v39 >> v90))
    {
      if (v148 == 13 || v90 < 2)
      {
        uint64_t v97 = (uint64_t *)*((void *)&v162 + v90);
        long long v102 = v97 + 3;
        if (*((_DWORD *)v97 + 8) >= 0x41u) {
          long long v102 = (uint64_t *)*v102;
        }
        uint64_t v94 = *v102;
        int v95 = 4096;
        int v96 = -256;
      }
      else
      {
        if (*(_UNKNOWN **)v92 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v92, (llvm::APInt *)&v158);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v92, (uint64_t)&v158);
        }
        BOOL v93 = (uint64_t *)&v158;
        if (DWORD2(v158) >= 0x41) {
          BOOL v93 = (uint64_t *)v158;
        }
        uint64_t v94 = *v93;
        if (DWORD2(v158) >= 0x41 && (void)v158) {
          MEMORY[0x1D25D9CB0]();
        }
        int v95 = 0;
        int v96 = 255;
        uint64_t v97 = v91;
      }
      uint64_t v103 = (*(_DWORD *)(*v97 + 8) & v96) == v95 ? v94 | 0x100000000 : v94;
      uint64_t v101 = (llvm::MachineFunction *)v156;
      unint64_t v100 = v157;
      LODWORD(v158) = 1;
      *((void *)&v158 + 1) = 0;
      *(void *)&long long v159 = v103;
    }
    else
    {
      uint64_t v98 = (unsigned char *)*((void *)&v164 + v90);
      if (!v98 || (sub_1CB8843D8((uint64_t)v66, v98, 0, (llvm::MachineFunction **)&v156, 0) & 1) == 0)
      {
        int v99 = *((_DWORD *)&v167 + v90);
        *((void *)&v158 + 1) = 0;
        LODWORD(v158) = 0;
        DWORD1(v158) = v99;
        long long v159 = 0uLL;
        llvm::MachineInstr::addOperand(v157, (llvm::MachineFunction *)v156, (const llvm::MachineOperand *)&v158);
      }
      uint64_t v101 = (llvm::MachineFunction *)v156;
      unint64_t v100 = v157;
      LODWORD(v158) = 1;
      *((void *)&v158 + 1) = 0;
      *(void *)&long long v159 = 0;
    }
    llvm::MachineInstr::addOperand(v100, v101, (const llvm::MachineOperand *)&v158);
    ++v90;
  }
  while (v90 != 3);
  if (v71)
  {
    long long v159 = 0uLL;
    long long v158 = 0x201000000uLL;
  }
  else
  {
    long long v158 = 0u;
    long long v159 = 0u;
  }
  llvm::MachineInstr::addOperand(v157, (llvm::MachineFunction *)v156, (const llvm::MachineOperand *)&v158);
  LODWORD(v158) = 1;
  *((void *)&v158 + 1) = 0;
  *(void *)&long long v159 = 0;
  llvm::MachineInstr::addOperand(v157, (llvm::MachineFunction *)v156, (const llvm::MachineOperand *)&v158);
  long long v158 = 0u;
  long long v159 = 0u;
  llvm::MachineInstr::addOperand(v157, (llvm::MachineFunction *)v156, (const llvm::MachineOperand *)&v158);
  if (v71)
  {
    uint64_t v104 = v66[4];
    uint64_t v105 = *(void *)(v104 + 640);
    int v106 = *(unint64_t **)(v104 + 648);
    uint64_t v107 = *(void *)(v66[12] + 8) + 48 * dword_1CD923568[v147 | ((v39 & 8) >> 2)];
    uint64_t v108 = *(llvm::MachineFunction **)(v105 + 32);
    int v109 = (unsigned __int8 *)v66[9];
    uint64_t v154 = v109;
    if (v109) {
      llvm::MetadataTracking::track((uint64_t)&v154, v109, 2);
    }
    int v110 = llvm::MachineFunction::CreateMachineInstr(v108, v107, &v154, 0);
    if (v154)
    {
      int v138 = *v154;
      if ((v138 - 4) > 0x1E)
      {
        if ((v138 - 3) >= 0xFFFFFFFE) {
          unint64_t v142 = v154;
        }
        else {
          unint64_t v142 = 0;
        }
        if ((v138 - 3) < 0xFFFFFFFE)
        {
          uint64_t v66 = a1;
          if (v138 == 3) {
            *((void *)v154 + 1) = 0;
          }
          goto LABEL_160;
        }
        unint64_t v140 = (unint64_t)(v142 + 8);
      }
      else
      {
        uint64_t v66 = a1;
        if ((v154[1] & 0x7F) != 2 && !*((_DWORD *)v154 + 3)) {
          goto LABEL_160;
        }
        uint64_t v139 = *((void *)v154 + 2);
        if ((v139 & 4) == 0) {
          goto LABEL_160;
        }
        unint64_t v140 = v139 & 0xFFFFFFFFFFFFFFF8;
        if (!v140) {
          goto LABEL_160;
        }
      }
      *(void *)&long long v158 = &v154;
      sub_1CC5FA668(v140 + 16, &v158);
      uint64_t v66 = a1;
    }
LABEL_160:
    uint64_t v111 = *(void *)(v105 + 40);
    *((void *)v110 + 3) = v111;
    uint64_t v112 = *(void *)(v111 + 32);
    uint64_t v113 = *((unsigned int *)v110 + 10);
    if (v113)
    {
      uint64_t v128 = *((void *)v110 + 4);
      uint64_t v129 = *(void *)(v112 + 40);
      uint64_t v130 = 32 * v113;
      do
      {
        if (!*(unsigned char *)v128)
        {
          uint64_t v131 = *(unsigned int *)(v128 + 4);
          if ((int)v131 >= 0) {
            uint64_t v132 = (uint64_t *)(*(void *)(v129 + 272) + 8 * v131);
          }
          else {
            uint64_t v132 = (uint64_t *)(*(void *)(v129 + 24) + 16 * (v131 & 0x7FFFFFFF) + 8);
          }
          uint64_t v133 = *v132;
          if (*v132)
          {
            uint64_t v134 = *(void *)(v133 + 16);
            *(void *)(v133 + 16) = v128;
            *(void *)(v128 + 16) = v134;
            if (*(unsigned char *)(v128 + 3))
            {
              *(void *)(v128 + 24) = v133;
            }
            else
            {
              *(void *)(v128 + 24) = 0;
              uint64_t v132 = (uint64_t *)(v134 + 24);
            }
          }
          else
          {
            *(void *)(v128 + 16) = v128;
            *(void *)(v128 + 24) = 0;
          }
          *uint64_t v132 = v128;
        }
        v128 += 32;
        v130 -= 32;
      }
      while (v130);
    }
    uint64_t v114 = *(void *)(v112 + 728);
    if (v114) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v114 + 24))(v114, v110);
    }
    unint64_t v115 = *v106 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v110 = v115 | *(void *)v110 & 7;
    *((void *)v110 + 1) = v106;
    *(void *)(v115 + 8) = v110;
    *int v106 = *v106 & 7 | (unint64_t)v110;
    *((void *)&v158 + 1) = 0;
    long long v159 = 0uLL;
    LODWORD(v158) = 0x1000000;
    DWORD1(v158) = v145;
    llvm::MachineInstr::addOperand(v110, v108, (const llvm::MachineOperand *)&v158);
    uint64_t v154 = (unsigned __int8 *)v108;
    uint64_t v155 = v110;
    *((void *)&v158 + 1) = 0;
    long long v159 = 0uLL;
    LODWORD(v158) = 0;
    DWORD1(v158) = v144;
    llvm::MachineInstr::addOperand(v110, v108, (const llvm::MachineOperand *)&v158);
    if ((v39 & 8) != 0)
    {
      if (v148 == 13)
      {
        uint64_t v117 = (void *)(*((void *)&v163 + 1) + 24);
        if (*(_DWORD *)(*((void *)&v163 + 1) + 32) >= 0x41u) {
          uint64_t v117 = (void *)*v117;
        }
        unsigned int v118 = (void *)*v117;
      }
      else
      {
        int v119 = (llvm::detail::DoubleAPFloat *)(*((void *)&v161 + 1) + 32);
        if (*(_UNKNOWN **)(*((void *)&v161 + 1) + 32) == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v119, (llvm::APInt *)&v158);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v119, (uint64_t)&v158);
        }
        if (DWORD2(v158) >= 0x41) {
          uint64_t v120 = (long long *)v158;
        }
        else {
          uint64_t v120 = &v158;
        }
        unsigned int v118 = *(void **)v120;
        if (DWORD2(v158) >= 0x41 && (void)v158) {
          MEMORY[0x1D25D9CB0]();
        }
      }
      LODWORD(v158) = 1;
      *((void *)&v158 + 1) = 0;
      *(void *)&long long v159 = v118;
      llvm::MachineInstr::addOperand(v110, v108, (const llvm::MachineOperand *)&v158);
    }
    else if (!*((void *)&v165 + 1) {
           || (char v116 = sub_1CB8843D8((uint64_t)v66, *((unsigned char **)&v165 + 1), 0, (llvm::MachineFunction **)&v154, 0),
    }
               uint64_t v108 = (llvm::MachineFunction *)v154,
               int v110 = v155,
               (v116 & 1) == 0))
    {
      *((void *)&v158 + 1) = 0;
      long long v159 = 0uLL;
      LODWORD(v158) = 0;
      DWORD1(v158) = HIDWORD(v168);
      llvm::MachineInstr::addOperand(v110, v108, (const llvm::MachineOperand *)&v158);
      uint64_t v108 = (llvm::MachineFunction *)v154;
      int v110 = v155;
    }
    LODWORD(v158) = 1;
    *((void *)&v158 + 1) = 0;
    *(void *)&long long v159 = 0;
    llvm::MachineInstr::addOperand(v110, v108, (const llvm::MachineOperand *)&v158);
    long long v159 = 0uLL;
    long long v158 = 0x200000000uLL;
    llvm::MachineInstr::addOperand(v155, (llvm::MachineFunction *)v154, (const llvm::MachineOperand *)&v158);
  }
  return 1;
}

uint64_t sub_1CB88FFDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  v113[2] = *MEMORY[0x1E4F143B8];
  uint64_t v101 = a5;
  uint64_t v102 = a4;
  int v11 = *(_WORD *)(a3 + 18) & 0x3F;
  int v100 = v11;
  uint64_t v12 = *(llvm::Type ***)(a3 - 64);
  int v13 = *v12;
  int v14 = *((_DWORD *)*v12 + 2);
  int v15 = v14;
  BOOL v99 = (_BYTE)v14 == 0;
  if ((v14 & 0xFE) == 0x12) {
    int v13 = (llvm::Type *)**((void **)v13 + 2);
  }
  int v16 = *(unsigned __int8 *)(a1[32] + 280);
  if (llvm::Type::getPrimitiveSizeInBits(v13) > 0x20 || (v11 - 7) < 2) {
    return 0;
  }
  char v98 = 0;
  unsigned __int8 v97 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  sub_1CD3CF5F4((uint64_t)a1, &v100, &v102, &v101, &v96, &v95, &v98, &v97, &v99, 1);
  uint64_t result = 0;
  if (!v98)
  {
    unint64_t v90 = a7;
    uint64_t v91 = a6;
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    unsigned int v21 = 0;
    BOOL v92 = v99;
    v113[0] = 0;
    v113[1] = 0;
    v112[0] = v102;
    v112[1] = v101;
    v111[0] = 0;
    v111[1] = 0;
    uint64_t v110 = 0;
    BOOL v22 = (v15 | v99) == 0;
    uint64_t v109 = 0x200000000;
    char v23 = 1;
    do
    {
      char v24 = v23;
      uint64_t v25 = v112[v19];
      if (v25) {
        BOOL v26 = *(unsigned char *)(v25 + 16) == 17;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        v113[v19] = v25;
        v21 |= 1 << v19;
      }
      else
      {
        char v27 = &v111[v19];
        *char v27 = v25;
        LOBYTE(v103[0]) = v22;
        uint64_t result = sub_1CB88467C((uint64_t)a1, v27, (int *)&v109 + v19, v103, v92, *(void *)(a3 + 40), 7, 1);
        *((_DWORD *)&v111[-1] + v19) = result;
        if (!result) {
          return result;
        }
        v20 |= LOBYTE(v103[0]) << v19;
      }
      char v23 = 0;
      uint64_t v19 = 1;
    }
    while ((v24 & 1) != 0);
    if ((v100 - 1) >= 6) {
      int v28 = 0;
    }
    else {
      int v28 = v100;
    }
    if (v92)
    {
      uint64_t v29 = 6;
      if (v28 != 2) {
        uint64_t v29 = 3;
      }
      if (v28 == 1) {
        uint64_t v29 = 0;
      }
      unsigned int v30 = dword_1CD923244[v29 + (__rbit32(v21) >> 30)];
    }
    else
    {
      unsigned int v30 = sub_1CD3D4248(v28, v16 != 0, v21 & 1, v20 & 1, (v21 >> 1) & 1, (v20 >> 1) & 1);
    }
    uint64_t v31 = a1[4];
    uint64_t v32 = *(void *)(v31 + 640);
    int v33 = *(unint64_t **)(v31 + 648);
    uint64_t v34 = *(void *)(a1[12] + 8) + 48 * v30;
    char v35 = *(llvm::MachineFunction **)(v32 + 32);
    uint64_t v36 = (unsigned __int8 *)a1[9];
    uint64_t v105 = v36;
    if (v36) {
      llvm::MetadataTracking::track((uint64_t)&v105, v36, 2);
    }
    unint64_t v37 = llvm::MachineFunction::CreateMachineInstr(v35, v34, &v105, 0);
    if (!v105) {
      goto LABEL_31;
    }
    int v82 = *v105;
    if ((v82 - 4) > 0x1E)
    {
      if ((v82 - 3) >= 0xFFFFFFFE) {
        uint64_t v88 = v105;
      }
      else {
        uint64_t v88 = 0;
      }
      if ((v82 - 3) < 0xFFFFFFFE)
      {
        if (v82 == 3) {
          *((void *)v105 + 1) = 0;
        }
        goto LABEL_31;
      }
      unint64_t v84 = (unint64_t)(v88 + 8);
    }
    else
    {
      if ((v105[1] & 0x7F) != 2 && !*((_DWORD *)v105 + 3)) {
        goto LABEL_31;
      }
      uint64_t v83 = *((void *)v105 + 2);
      if ((v83 & 4) == 0) {
        goto LABEL_31;
      }
      unint64_t v84 = v83 & 0xFFFFFFFFFFFFFFF8;
      if (!v84) {
        goto LABEL_31;
      }
    }
    v103[0] = &v105;
    sub_1CC5FA668(v84 + 16, v103);
LABEL_31:
    uint64_t v38 = *(void *)(v32 + 40);
    *((void *)v37 + 3) = v38;
    uint64_t v39 = *(void *)(v38 + 32);
    uint64_t v40 = *((unsigned int *)v37 + 10);
    if (v40)
    {
      uint64_t v68 = *((void *)v37 + 4);
      uint64_t v69 = *(void *)(v39 + 40);
      uint64_t v70 = 32 * v40;
      do
      {
        if (!*(unsigned char *)v68)
        {
          uint64_t v71 = *(unsigned int *)(v68 + 4);
          if ((int)v71 >= 0) {
            unsigned int v72 = (uint64_t *)(*(void *)(v69 + 272) + 8 * v71);
          }
          else {
            unsigned int v72 = (uint64_t *)(*(void *)(v69 + 24) + 16 * (v71 & 0x7FFFFFFF) + 8);
          }
          uint64_t v73 = *v72;
          if (*v72)
          {
            uint64_t v74 = *(void *)(v73 + 16);
            *(void *)(v73 + 16) = v68;
            *(void *)(v68 + 16) = v74;
            if (*(unsigned char *)(v68 + 3))
            {
              *(void *)(v68 + 24) = v73;
            }
            else
            {
              *(void *)(v68 + 24) = 0;
              unsigned int v72 = (uint64_t *)(v74 + 24);
            }
          }
          else
          {
            *(void *)(v68 + 16) = v68;
            *(void *)(v68 + 24) = 0;
          }
          *unsigned int v72 = v68;
        }
        v68 += 32;
        v70 -= 32;
      }
      while (v70);
    }
    uint64_t v41 = *(void *)(v39 + 728);
    if (v41) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v41 + 24))(v41, v37);
    }
    unint64_t v42 = *v33 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v37 = v42 | *(void *)v37 & 7;
    *((void *)v37 + 1) = v33;
    *(void *)(v42 + 8) = v37;
    *int v33 = *v33 & 7 | (unint64_t)v37;
    LODWORD(v103[0]) = 1;
    v103[1] = 0;
    *(void *)&long long v104 = 0;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)v103);
    uint64_t v43 = 0;
    BOOL v93 = v35;
    uint64_t v94 = v37;
    char v44 = 1;
    while (1)
    {
      char v45 = v44;
      if (((v21 >> v43) & 1) == 0)
      {
        uint64_t v50 = (unsigned char *)v111[v43];
        if (!v50 || (sub_1CB8843D8((uint64_t)a1, v50, v92, &v93, 0) & 1) == 0)
        {
          int v51 = *((_DWORD *)&v111[-1] + v43);
          v103[1] = 0;
          LODWORD(v103[0]) = 0;
          HIDWORD(v103[0]) = v51;
          long long v104 = 0uLL;
          llvm::MachineInstr::addOperand(v94, v93, (const llvm::MachineOperand *)v103);
        }
        uint64_t v52 = *((unsigned int *)&v109 + v43);
        LODWORD(v103[0]) = 1;
        v103[1] = 0;
        *(void *)&long long v104 = v52;
        llvm::MachineInstr::addOperand(v94, v93, (const llvm::MachineOperand *)v103);
        goto LABEL_56;
      }
      uint64_t v46 = v113[v43];
      char v48 = *(void **)(v46 + 32);
      uint64_t v47 = (const llvm::detail::DoubleAPFloat *)(v46 + 32);
      if (v48 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v106, v47);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v106, v47);
      }
      char v49 = v106;
      if ((*((_DWORD *)&v109 + v43) & 2) != 0)
      {
        if (v106 != (_DWORD *)&unk_1CFB2E344)
        {
          v108 ^= 8u;
LABEL_47:
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v106, (uint64_t)v103);
          goto LABEL_48;
        }
        sub_1CBFC6FB8(v107);
        sub_1CBFC6FB8(v107 + 32);
        char v49 = v106;
      }
      if (v49 != &unk_1CFB2E344) {
        goto LABEL_47;
      }
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v106, (llvm::APInt *)v103);
LABEL_48:
      if (LODWORD(v103[1]) >= 0x41) {
        int v53 = (void **)v103[0];
      }
      else {
        int v53 = v103;
      }
      uint64_t v54 = *v53;
      if (LODWORD(v103[1]) >= 0x41 && v103[0]) {
        MEMORY[0x1D25D9CB0]();
      }
      LODWORD(v103[0]) = 1;
      v103[1] = 0;
      *(void *)&long long v104 = v54;
      llvm::MachineInstr::addOperand(v94, v93, (const llvm::MachineOperand *)v103);
      if (v106 == (_DWORD *)&unk_1CFB2E344)
      {
        sub_1CB845718(&v107);
      }
      else if ((v106[2] - 64) <= 0xFFFFFF7F && v107)
      {
        MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
      }
LABEL_56:
      char v44 = 0;
      uint64_t v43 = 1;
      if ((v45 & 1) == 0)
      {
        v103[1] = 0;
        long long v104 = 0uLL;
        v103[0] = (void *)0x201000000;
        llvm::MachineInstr::addOperand(v94, v93, (const llvm::MachineOperand *)v103);
        LODWORD(v103[0]) = 1;
        v103[1] = 0;
        *(void *)&long long v104 = 0;
        llvm::MachineInstr::addOperand(v94, v93, (const llvm::MachineOperand *)v103);
        *(_OWORD *)uint64_t v103 = 0u;
        long long v104 = 0u;
        llvm::MachineInstr::addOperand(v94, v93, (const llvm::MachineOperand *)v103);
        uint64_t v55 = a1[4];
        uint64_t v56 = *(void *)(v55 + 640);
        uint64_t v57 = *(unint64_t **)(v55 + 648);
        uint64_t v58 = *(void *)(a1[12] + 8) + 555648;
        uint64_t v59 = *(llvm::MachineFunction **)(v56 + 32);
        int v60 = (unsigned __int8 *)a1[9];
        uint64_t v105 = v60;
        if (v60) {
          llvm::MetadataTracking::track((uint64_t)&v105, v60, 2);
        }
        int v61 = llvm::MachineFunction::CreateMachineInstr(v59, v58, &v105, 0);
        if (v105)
        {
          int v85 = *v105;
          if ((v85 - 4) > 0x1E)
          {
            if ((v85 - 3) >= 0xFFFFFFFE) {
              unint64_t v89 = v105;
            }
            else {
              unint64_t v89 = 0;
            }
            if ((v85 - 3) < 0xFFFFFFFE)
            {
              if (v85 == 3) {
                *((void *)v105 + 1) = 0;
              }
              goto LABEL_66;
            }
            unint64_t v87 = (unint64_t)(v89 + 8);
          }
          else
          {
            if ((v105[1] & 0x7F) != 2 && !*((_DWORD *)v105 + 3)) {
              goto LABEL_66;
            }
            uint64_t v86 = *((void *)v105 + 2);
            if ((v86 & 4) == 0) {
              goto LABEL_66;
            }
            unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
            if (!v87) {
              goto LABEL_66;
            }
          }
          v103[0] = &v105;
          sub_1CC5FA668(v87 + 16, v103);
        }
LABEL_66:
        uint64_t v62 = *(void *)(v56 + 40);
        *((void *)v61 + 3) = v62;
        uint64_t v63 = *(void *)(v62 + 32);
        uint64_t v64 = *((unsigned int *)v61 + 10);
        if (v64)
        {
          uint64_t v75 = *((void *)v61 + 4);
          uint64_t v76 = *(void *)(v63 + 40);
          uint64_t v77 = 32 * v64;
          do
          {
            if (!*(unsigned char *)v75)
            {
              uint64_t v78 = *(unsigned int *)(v75 + 4);
              if ((int)v78 >= 0) {
                uint64_t v79 = (uint64_t *)(*(void *)(v76 + 272) + 8 * v78);
              }
              else {
                uint64_t v79 = (uint64_t *)(*(void *)(v76 + 24) + 16 * (v78 & 0x7FFFFFFF) + 8);
              }
              uint64_t v80 = *v79;
              if (*v79)
              {
                uint64_t v81 = *(void *)(v80 + 16);
                *(void *)(v80 + 16) = v75;
                *(void *)(v75 + 16) = v81;
                if (*(unsigned char *)(v75 + 3))
                {
                  *(void *)(v75 + 24) = v80;
                }
                else
                {
                  *(void *)(v75 + 24) = 0;
                  uint64_t v79 = (uint64_t *)(v81 + 24);
                }
              }
              else
              {
                *(void *)(v75 + 16) = v75;
                *(void *)(v75 + 24) = 0;
              }
              *uint64_t v79 = v75;
            }
            v75 += 32;
            v77 -= 32;
          }
          while (v77);
        }
        uint64_t v65 = *(void *)(v63 + 728);
        if (v65) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v65 + 24))(v65, v61);
        }
        unint64_t v66 = *v57 & 0xFFFFFFFFFFFFFFF8;
        *(void *)int v61 = v66 | *(void *)v61 & 7;
        *((void *)v61 + 1) = v57;
        *(void *)(v66 + 8) = v61;
        *uint64_t v57 = *v57 & 7 | (unint64_t)v61;
        v103[1] = 0;
        *(void *)&long long v104 = v91;
        LODWORD(v103[0]) = 4;
        llvm::MachineInstr::addOperand(v61, v59, (const llvm::MachineOperand *)v103);
        LODWORD(v103[0]) = 1;
        v103[1] = 0;
        *(void *)&long long v104 = v97;
        llvm::MachineInstr::addOperand(v61, v59, (const llvm::MachineOperand *)v103);
        uint64_t v67 = a1[12];
        v103[0] = &v104;
        v103[1] = 0;
        (*(void (**)(void))(*(void *)v67 + 272))();
        if (v103[0] != &v104) {
          free(v103[0]);
        }
        llvm::MachineBasicBlock::addSuccessor(*(void **)(a1[4] + 640), v90, -1);
        llvm::MachineBasicBlock::addSuccessor(*(void **)(a1[4] + 640), v91, -1);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1CB8908FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = **(void **)(a3 - 64);
  if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12) {
    uint64_t v12 = **(void **)(v12 + 16);
  }
  if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v12) > 0x20) {
    return 0;
  }
  uint64_t v14 = *(_WORD *)(a3 + 18) & 0x3F;
  uint64_t v15 = v14 - 33;
  if (v14 - 33) <= 8 && ((0x155u >> v15))
  {
    LODWORD(v14) = dword_1CD91D268[v15];
    uint64_t v101 = 1;
  }
  else
  {
    uint64_t v101 = 0;
  }
  char v16 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  BOOL v18 = (v14 & 0xFFFFFFFE) == 0x20 || (v14 - 38) < 4;
  v112[0] = a4;
  v112[1] = a5;
  v111[0] = 0;
  v111[1] = 0;
  uint64_t v110 = 0;
  char v19 = !v18;
  unsigned int v20 = v112;
  uint64_t v21 = 1;
  do
  {
    char v22 = v16;
    uint64_t v23 = *v20;
    unsigned int v24 = *(unsigned __int8 *)(*v20 + 16);
    if (v24 <= 0x1B) {
      uint64_t v23 = 0;
    }
    if (v24 == 68) {
      char v25 = v19;
    }
    else {
      char v25 = 1;
    }
    if (v25)
    {
      if (v24 == 67 && (v14 > 0x29 || ((1 << v14) & 0x3C300000000) == 0))
      {
        int v28 = *(_DWORD *)(v23 + 20);
        if ((v28 & 0x40000000) != 0) {
          uint64_t v29 = *(uint64_t **)(v23 - 8);
        }
        else {
          uint64_t v29 = (uint64_t *)(v23 - 32 * (v28 & 0x7FFFFFF));
        }
        uint64_t v30 = *v29;
LABEL_31:
        *unsigned int v20 = v30;
      }
    }
    else
    {
      int v26 = *(_DWORD *)(v23 + 20);
      if ((v26 & 0x40000000) != 0) {
        char v27 = *(uint64_t **)(v23 - 8);
      }
      else {
        char v27 = (uint64_t *)(v23 - 32 * (v26 & 0x7FFFFFF));
      }
      uint64_t v30 = *v27;
      if (*(_DWORD *)(*(void *)v30 + 8) > 0xFFFu) {
        goto LABEL_31;
      }
    }
    unsigned int v20 = &v112[v21];
    char v16 = 1;
    uint64_t v21 = 2;
  }
  while ((v22 & 1) == 0);
  int v100 = v14;
  uint64_t v102 = a7;
  uint64_t v103 = a6;
  uint64_t v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  char v34 = 1;
  do
  {
    char v35 = v34;
    uint64_t v36 = (unsigned char *)v112[v31];
    if (v36) {
      BOOL v37 = v36[16] == 16;
    }
    else {
      BOOL v37 = 0;
    }
    if (v37)
    {
      *(&v113 + v31) = (uint64_t)v36;
      v32 |= 1 << v31;
    }
    else
    {
      v111[v31] = v36;
      uint64_t v38 = *(llvm::Type **)v36;
      if ((*(_DWORD *)(*(void *)v36 + 8) & 0xFE) == 0x12) {
        uint64_t v38 = (llvm::Type *)**((void **)v38 + 2);
      }
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v38);
      uint64_t result = sub_1CD789230(a1, (uint64_t)v36);
      *((_DWORD *)&v111[-1] + v31) = result;
      if (!result) {
        return result;
      }
      v33 |= (PrimitiveSizeInBits < 0x11) << v31;
    }
    char v34 = 0;
    uint64_t v31 = 1;
  }
  while ((v35 & 1) != 0);
  if ((v100 - 32) > 8) {
    int v40 = 16;
  }
  else {
    int v40 = dword_1CD91D28C[v100 - 32];
  }
  if (v32) {
    v33 |= (*(_DWORD *)(*(void *)v113 + 8) & 0xFFFFFF00) == 4096;
  }
  if ((v32 & 2) != 0 && (*(_DWORD *)(*(void *)v114 + 8) & 0xFFFFFF00) == 0x1000) {
    v33 |= 2u;
  }
  unsigned int v41 = sub_1CD3D42B4(v40, *(unsigned __int8 *)(a1[32] + 280) != 0, v32 & 1, v33 & 1, (v32 >> 1) & 1, (v33 >> 1) & 1);
  uint64_t v42 = a1[4];
  uint64_t v43 = *(void *)(v42 + 640);
  char v44 = *(unint64_t **)(v42 + 648);
  uint64_t v45 = *(void *)(a1[12] + 8) + 48 * v41;
  uint64_t v46 = *(llvm::MachineFunction **)(v43 + 32);
  uint64_t v47 = (unsigned __int8 *)a1[9];
  uint64_t v105 = v47;
  if (v47) {
    llvm::MetadataTracking::track((uint64_t)&v105, v47, 2);
  }
  char v48 = llvm::MachineFunction::CreateMachineInstr(v46, v45, &v105, 0);
  if (v105)
  {
    int v92 = *v105;
    if ((v92 - 4) > 0x1E)
    {
      if ((v92 - 3) >= 0xFFFFFFFE) {
        char v98 = v105;
      }
      else {
        char v98 = 0;
      }
      if ((v92 - 3) < 0xFFFFFFFE)
      {
        if (v92 == 3) {
          *((void *)v105 + 1) = 0;
        }
        goto LABEL_59;
      }
      unint64_t v94 = (unint64_t)(v98 + 8);
    }
    else
    {
      if ((v105[1] & 0x7F) != 2 && !*((_DWORD *)v105 + 3)) {
        goto LABEL_59;
      }
      uint64_t v93 = *((void *)v105 + 2);
      if ((v93 & 4) == 0) {
        goto LABEL_59;
      }
      unint64_t v94 = v93 & 0xFFFFFFFFFFFFFFF8;
      if (!v94) {
        goto LABEL_59;
      }
    }
    v107[0] = &v105;
    sub_1CC5FA668(v94 + 16, v107);
  }
LABEL_59:
  uint64_t v49 = *(void *)(v43 + 40);
  *((void *)v48 + 3) = v49;
  uint64_t v50 = *(void *)(v49 + 32);
  uint64_t v51 = *((unsigned int *)v48 + 10);
  if (v51)
  {
    uint64_t v78 = *((void *)v48 + 4);
    uint64_t v79 = *(void *)(v50 + 40);
    uint64_t v80 = 32 * v51;
    do
    {
      if (!*(unsigned char *)v78)
      {
        uint64_t v81 = *(unsigned int *)(v78 + 4);
        if ((int)v81 >= 0) {
          int v82 = (uint64_t *)(*(void *)(v79 + 272) + 8 * v81);
        }
        else {
          int v82 = (uint64_t *)(*(void *)(v79 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
        }
        uint64_t v83 = *v82;
        if (*v82)
        {
          uint64_t v84 = *(void *)(v83 + 16);
          *(void *)(v83 + 16) = v78;
          *(void *)(v78 + 16) = v84;
          if (*(unsigned char *)(v78 + 3))
          {
            *(void *)(v78 + 24) = v83;
          }
          else
          {
            *(void *)(v78 + 24) = 0;
            int v82 = (uint64_t *)(v84 + 24);
          }
        }
        else
        {
          *(void *)(v78 + 16) = v78;
          *(void *)(v78 + 24) = 0;
        }
        *int v82 = v78;
      }
      v78 += 32;
      v80 -= 32;
    }
    while (v80);
  }
  uint64_t v52 = *(void *)(v50 + 728);
  if (v52) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v52 + 24))(v52, v48);
  }
  unint64_t v53 = *v44 & 0xFFFFFFFFFFFFFFF8;
  *(void *)char v48 = v53 | *(void *)v48 & 7;
  *((void *)v48 + 1) = v44;
  *(void *)(v53 + 8) = v48;
  *char v44 = *v44 & 7 | (unint64_t)v48;
  LODWORD(v107[0]) = 1;
  v107[1] = 0;
  *(void *)&long long v108 = 0;
  llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)v107);
  uint64_t v54 = 0;
  uint64_t v105 = (unsigned __int8 *)v46;
  int v106 = v48;
  char v55 = 1;
  do
  {
    char v56 = v55;
    if ((v32 >> v54))
    {
      uint64_t v57 = (uint64_t *)*(&v113 + v54);
      uint64_t v58 = v57 + 3;
      if (*((_DWORD *)v57 + 8) >= 0x41u) {
        uint64_t v58 = (uint64_t *)*v58;
      }
      uint64_t v59 = *v58;
      if ((*(_DWORD *)(*v57 + 8) & 0xFFFFFF00) == 0x1000) {
        uint64_t v60 = v59 | 0x100000000;
      }
      else {
        uint64_t v60 = v59;
      }
      uint64_t v62 = (llvm::MachineFunction *)v105;
      int v61 = v106;
      LODWORD(v107[0]) = 1;
      v107[1] = 0;
      *(void *)&long long v108 = v60;
    }
    else
    {
      uint64_t v63 = (unsigned char *)v111[v54];
      if (!v63 || (sub_1CB8843D8((uint64_t)a1, v63, 0, (llvm::MachineFunction **)&v105, 0) & 1) == 0)
      {
        int v64 = *((_DWORD *)&v111[-1] + v54);
        v107[1] = 0;
        LODWORD(v107[0]) = 0;
        HIDWORD(v107[0]) = v64;
        long long v108 = 0uLL;
        llvm::MachineInstr::addOperand(v106, (llvm::MachineFunction *)v105, (const llvm::MachineOperand *)v107);
      }
      uint64_t v62 = (llvm::MachineFunction *)v105;
      int v61 = v106;
      LODWORD(v107[0]) = 1;
      v107[1] = 0;
      *(void *)&long long v108 = 0;
    }
    llvm::MachineInstr::addOperand(v61, v62, (const llvm::MachineOperand *)v107);
    char v55 = 0;
    uint64_t v54 = 1;
  }
  while ((v56 & 1) != 0);
  v107[1] = 0;
  long long v108 = 0uLL;
  v107[0] = (void *)0x201000000;
  llvm::MachineInstr::addOperand(v106, (llvm::MachineFunction *)v105, (const llvm::MachineOperand *)v107);
  LODWORD(v107[0]) = 1;
  v107[1] = 0;
  *(void *)&long long v108 = 0;
  llvm::MachineInstr::addOperand(v106, (llvm::MachineFunction *)v105, (const llvm::MachineOperand *)v107);
  *(_OWORD *)uint64_t v107 = 0u;
  long long v108 = 0u;
  llvm::MachineInstr::addOperand(v106, (llvm::MachineFunction *)v105, (const llvm::MachineOperand *)v107);
  uint64_t v65 = a1[4];
  uint64_t v66 = *(void *)(v65 + 640);
  uint64_t v67 = *(unint64_t **)(v65 + 648);
  uint64_t v68 = *(void *)(a1[12] + 8) + 555648;
  uint64_t v69 = *(llvm::MachineFunction **)(v66 + 32);
  uint64_t v70 = (unsigned __int8 *)a1[9];
  uint64_t v109 = v70;
  if (v70) {
    llvm::MetadataTracking::track((uint64_t)&v109, v70, 2);
  }
  uint64_t v71 = llvm::MachineFunction::CreateMachineInstr(v69, v68, &v109, 0);
  if (v109)
  {
    int v95 = *v109;
    if ((v95 - 4) > 0x1E)
    {
      if ((v95 - 3) >= 0xFFFFFFFE) {
        BOOL v99 = v109;
      }
      else {
        BOOL v99 = 0;
      }
      if ((v95 - 3) < 0xFFFFFFFE)
      {
        if (v95 == 3) {
          *((void *)v109 + 1) = 0;
        }
        goto LABEL_78;
      }
      unint64_t v97 = (unint64_t)(v99 + 8);
    }
    else
    {
      if ((v109[1] & 0x7F) != 2 && !*((_DWORD *)v109 + 3)) {
        goto LABEL_78;
      }
      uint64_t v96 = *((void *)v109 + 2);
      if ((v96 & 4) == 0) {
        goto LABEL_78;
      }
      unint64_t v97 = v96 & 0xFFFFFFFFFFFFFFF8;
      if (!v97) {
        goto LABEL_78;
      }
    }
    v107[0] = &v109;
    sub_1CC5FA668(v97 + 16, v107);
  }
LABEL_78:
  uint64_t v72 = *(void *)(v66 + 40);
  *((void *)v71 + 3) = v72;
  uint64_t v73 = *(void *)(v72 + 32);
  uint64_t v74 = *((unsigned int *)v71 + 10);
  if (v74)
  {
    uint64_t v85 = *((void *)v71 + 4);
    uint64_t v86 = *(void *)(v73 + 40);
    uint64_t v87 = 32 * v74;
    do
    {
      if (!*(unsigned char *)v85)
      {
        uint64_t v88 = *(unsigned int *)(v85 + 4);
        if ((int)v88 >= 0) {
          unint64_t v89 = (uint64_t *)(*(void *)(v86 + 272) + 8 * v88);
        }
        else {
          unint64_t v89 = (uint64_t *)(*(void *)(v86 + 24) + 16 * (v88 & 0x7FFFFFFF) + 8);
        }
        uint64_t v90 = *v89;
        if (*v89)
        {
          uint64_t v91 = *(void *)(v90 + 16);
          *(void *)(v90 + 16) = v85;
          *(void *)(v85 + 16) = v91;
          if (*(unsigned char *)(v85 + 3))
          {
            *(void *)(v85 + 24) = v90;
          }
          else
          {
            *(void *)(v85 + 24) = 0;
            unint64_t v89 = (uint64_t *)(v91 + 24);
          }
        }
        else
        {
          *(void *)(v85 + 16) = v85;
          *(void *)(v85 + 24) = 0;
        }
        *unint64_t v89 = v85;
      }
      v85 += 32;
      v87 -= 32;
    }
    while (v87);
  }
  uint64_t v75 = *(void *)(v73 + 728);
  if (v75) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v75 + 24))(v75, v71);
  }
  unint64_t v76 = *v67 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v71 = v76 | *(void *)v71 & 7;
  *((void *)v71 + 1) = v67;
  *(void *)(v76 + 8) = v71;
  *uint64_t v67 = *v67 & 7 | (unint64_t)v71;
  v107[1] = 0;
  *(void *)&long long v108 = v103;
  LODWORD(v107[0]) = 4;
  llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)v107);
  LODWORD(v107[0]) = 1;
  v107[1] = 0;
  *(void *)&long long v108 = v101;
  llvm::MachineInstr::addOperand(v71, v69, (const llvm::MachineOperand *)v107);
  uint64_t v77 = a1[12];
  v107[0] = &v108;
  v107[1] = 0;
  (*(void (**)(void))(*(void *)v77 + 272))();
  if (v107[0] != &v108) {
    free(v107[0]);
  }
  llvm::MachineBasicBlock::addSuccessor(*(void **)(a1[4] + 640), v102, -1);
  llvm::MachineBasicBlock::addSuccessor(*(void **)(a1[4] + 640), v103, -1);
  return 1;
}

uint64_t sub_1CB8911DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  int v2 = *(llvm::Type **)a2;
  int v3 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
  BOOL v5 = v3 == 16 || v3 == 32;
  if (*(_DWORD *)(*(void *)a2 + 8) != 13 || !v5) {
    return 0;
  }
  uint64_t v11 = sub_1CD789230(a1, a2);
  uint64_t v7 = v11;
  if (v11)
  {
    int v12 = *(unsigned __int8 *)(a2 + 16) - 28;
    int v13 = *(_DWORD *)(a2 + 20);
    if ((v13 & 0x40000000) != 0) {
      uint64_t v14 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v14 = a2 - 32 * (v13 & 0x7FFFFFF);
    }
    uint64_t v15 = *(void *)(v14 + 32);
    if (*(unsigned char *)(v15 + 16) == 16) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    if (*(unsigned char *)(a1[32] + 281)) {
      BOOL v17 = v12 == 25;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17 && v16 != 0)
    {
      char v19 = (void *)(v16 + 24);
      if (*(_DWORD *)(v16 + 32) >= 0x41u) {
        char v19 = (void *)*v19;
      }
      if (*v19 <= 4uLL)
      {
        v119[0] = v2;
        uint64_t v115 = (unsigned char *)a2;
        LODWORD(v111) = 0;
        int v66 = sub_1CD3CE8A4(a1, (uint64_t *)&v115, &v111, v119, *(void *)(a2 + 40), 1, 1);
        if (v66)
        {
          int v67 = v66;
          int v68 = *((_DWORD *)v119[0] + 2) >> 8;
          BOOL v69 = v68 == 64;
          uint64_t v70 = v68 == 32 && *((_DWORD *)v119[0] + 2) == 13;
          uint64_t v71 = 2;
          if (*((_DWORD *)v119[0] + 2) == 13 && v69) {
            uint64_t v70 = 2;
          }
          int v72 = *((_DWORD *)v2 + 2) >> 8;
          BOOL v73 = v72 == 64;
          BOOL v74 = v72 == 32 && *((_DWORD *)v2 + 2) == 13;
          if (*((_DWORD *)v2 + 2) != 13 || !v73) {
            uint64_t v71 = v74;
          }
          unsigned int v75 = word_1CD91D0CC[2 * v71 + v70];
          uint64_t v76 = a1[4];
          uint64_t v77 = *(void *)(v76 + 640);
          uint64_t v78 = *(unint64_t **)(v76 + 648);
          uint64_t v79 = *(void *)(a1[12] + 8) + 48 * v75;
          uint64_t v80 = *(llvm::MachineFunction **)(v77 + 32);
          uint64_t v81 = (unsigned __int8 *)a1[9];
          uint64_t v120 = v81;
          if (v81) {
            llvm::MetadataTracking::track((uint64_t)&v120, v81, 2);
          }
          int v82 = llvm::MachineFunction::CreateMachineInstr(v80, v79, &v120, 0);
          if (!v120) {
            goto LABEL_107;
          }
          int v106 = *v120;
          if ((v106 - 4) > 0x1E)
          {
            if ((v106 - 3) >= 0xFFFFFFFE) {
              uint64_t v109 = v120;
            }
            else {
              uint64_t v109 = 0;
            }
            if ((v106 - 3) < 0xFFFFFFFE)
            {
              if (v106 == 3) {
                *((void *)v120 + 1) = 0;
              }
              goto LABEL_107;
            }
            unint64_t v108 = (unint64_t)(v109 + 8);
          }
          else
          {
            if ((v120[1] & 0x7F) != 2 && !*((_DWORD *)v120 + 3)) {
              goto LABEL_107;
            }
            uint64_t v107 = *((void *)v120 + 2);
            if ((v107 & 4) == 0) {
              goto LABEL_107;
            }
            unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
            if (!v108) {
              goto LABEL_107;
            }
          }
          *(void *)&long long v113 = &v120;
          sub_1CC5FA668(v108 + 16, &v113);
LABEL_107:
          uint64_t v83 = *(void *)(v77 + 40);
          *((void *)v82 + 3) = v83;
          uint64_t v84 = *(void *)(v83 + 32);
          uint64_t v85 = *((unsigned int *)v82 + 10);
          if (v85)
          {
            uint64_t v95 = *((void *)v82 + 4);
            uint64_t v96 = *(void *)(v84 + 40);
            uint64_t v97 = 32 * v85;
            do
            {
              if (!*(unsigned char *)v95)
              {
                uint64_t v98 = *(unsigned int *)(v95 + 4);
                if ((int)v98 >= 0) {
                  BOOL v99 = (uint64_t *)(*(void *)(v96 + 272) + 8 * v98);
                }
                else {
                  BOOL v99 = (uint64_t *)(*(void *)(v96 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
                }
                uint64_t v100 = *v99;
                if (*v99)
                {
                  uint64_t v101 = *(void *)(v100 + 16);
                  *(void *)(v100 + 16) = v95;
                  *(void *)(v95 + 16) = v101;
                  if (*(unsigned char *)(v95 + 3))
                  {
                    *(void *)(v95 + 24) = v100;
                  }
                  else
                  {
                    *(void *)(v95 + 24) = 0;
                    BOOL v99 = (uint64_t *)(v101 + 24);
                  }
                }
                else
                {
                  *(void *)(v95 + 16) = v95;
                  *(void *)(v95 + 24) = 0;
                }
                *BOOL v99 = v95;
              }
              v95 += 32;
              v97 -= 32;
            }
            while (v97);
          }
          uint64_t v86 = *(void *)(v84 + 728);
          if (v86) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v86 + 24))(v86, v82);
          }
          unint64_t v87 = *v78 & 0xFFFFFFFFFFFFFFF8;
          *(void *)int v82 = v87 | *(void *)v82 & 7;
          *((void *)v82 + 1) = v78;
          *(void *)(v87 + 8) = v82;
          *uint64_t v78 = *v78 & 7 | (unint64_t)v82;
          *((void *)&v113 + 1) = 0;
          long long v114 = 0uLL;
          LODWORD(v113) = 0x1000000;
          DWORD1(v113) = v7;
          llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v113);
          uint64_t v7 = 1;
          LODWORD(v113) = 1;
          *((void *)&v113 + 1) = 0;
          *(void *)&long long v114 = 0;
          llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v113);
          LODWORD(v113) = 1;
          *((void *)&v113 + 1) = 0;
          *(void *)&long long v114 = 0x100000000;
          llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v113);
          uint64_t v120 = (unsigned __int8 *)v80;
          uint64_t v121 = v82;
          if ((sub_1CB8843D8((uint64_t)a1, v115, 0, (llvm::MachineFunction **)&v120, 0) & 1) == 0)
          {
            *((void *)&v113 + 1) = 0;
            long long v114 = 0uLL;
            LODWORD(v113) = 0;
            DWORD1(v113) = v67;
            llvm::MachineInstr::addOperand(v121, (llvm::MachineFunction *)v120, (const llvm::MachineOperand *)&v113);
          }
          LODWORD(v113) = 1;
          *((void *)&v113 + 1) = 0;
          *(void *)&long long v114 = v111;
          llvm::MachineInstr::addOperand(v121, (llvm::MachineFunction *)v120, (const llvm::MachineOperand *)&v113);
          LODWORD(v113) = 1;
          *((void *)&v113 + 1) = 0;
          *(void *)&long long v114 = 0;
          llvm::MachineInstr::addOperand(v121, (llvm::MachineFunction *)v120, (const llvm::MachineOperand *)&v113);
          uint64_t v65 = v120;
          int v64 = v121;
LABEL_92:
          long long v113 = 0u;
          long long v114 = 0u;
          llvm::MachineInstr::addOperand(v64, (llvm::MachineFunction *)v65, (const llvm::MachineOperand *)&v113);
          return v7;
        }
      }
    }
    int v110 = v12;
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    v119[0] = 0;
    v119[1] = 0;
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    uint64_t v115 = v2;
    char v116 = v2;
    do
    {
      char v22 = v20;
      int v23 = *(_DWORD *)(a2 + 20);
      if ((v23 & 0x40000000) != 0) {
        uint64_t v24 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v24 = a2 - 32 * (v23 & 0x7FFFFFF);
      }
      char v25 = *(unsigned __int8 **)(v24 + 32 * v21);
      if (v25) {
        BOOL v26 = v25[16] == 16;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        (&v120)[v21] = v25;
      }
      else
      {
        char v27 = (uint64_t *)&v119[v21];
        *char v27 = (uint64_t)v25;
        int v28 = sub_1CD3CE8A4(a1, v27, (_DWORD *)&v117 + v21, (llvm::Type **)&(&v115)[v21], *(void *)(a2 + 40), 0, 0);
        *((_DWORD *)&v119[-1] + v21) = v28;
        if (!v28) {
          return 0;
        }
      }
      char v20 = 1;
      uint64_t v21 = 1;
    }
    while ((v22 & 1) == 0);
    if (!v120 || !v121)
    {
      int v29 = v110;
      int v30 = 2 * (v110 == 27);
      if (v110 == 25) {
        int v30 = 1;
      }
      int v31 = *((_DWORD *)v2 + 2) >> 8;
      BOOL v32 = v31 == 64;
      int v33 = v31 == 32 && *((_DWORD *)v2 + 2) == 13;
      if (*((_DWORD *)v2 + 2) == 13 && v32) {
        int v33 = 2;
      }
      int v34 = *((_DWORD *)v115 + 2) >> 8;
      BOOL v35 = v34 == 64;
      int v36 = v34 == 32 && *((_DWORD *)v115 + 2) == 13;
      if (*((_DWORD *)v115 + 2) == 13 && v35) {
        int v36 = 2;
      }
      int v37 = *((_DWORD *)v116 + 2) >> 8;
      BOOL v38 = v37 == 64;
      uint64_t v39 = v37 == 32 && *((_DWORD *)v116 + 2) == 13;
      if (*((_DWORD *)v116 + 2) == 13 && v38) {
        uint64_t v39 = 2;
      }
      if (v120) {
        unsigned int v40 = 2;
      }
      else {
        unsigned int v40 = v36;
      }
      if (v121) {
        uint64_t v41 = 2;
      }
      else {
        uint64_t v41 = v39;
      }
      unsigned int v42 = word_1CD91D0D4[18 * v30 + 9 * v33 + 3 * v40 + v41];
      uint64_t v43 = a1[4];
      uint64_t v44 = *(void *)(v43 + 640);
      uint64_t v45 = *(unint64_t **)(v43 + 648);
      uint64_t v46 = *(void *)(a1[12] + 8) + 48 * v42;
      uint64_t v47 = *(llvm::MachineFunction **)(v44 + 32);
      char v48 = (unsigned __int8 *)a1[9];
      uint64_t v111 = v48;
      if (v48) {
        llvm::MetadataTracking::track((uint64_t)&v111, v48, 2);
      }
      uint64_t v49 = llvm::MachineFunction::CreateMachineInstr(v47, v46, &v111, 0);
      if (!v111) {
        goto LABEL_73;
      }
      int v102 = *v111;
      if ((v102 - 4) > 0x1E)
      {
        if ((v102 - 3) >= 0xFFFFFFFE) {
          uint64_t v105 = v111;
        }
        else {
          uint64_t v105 = 0;
        }
        if ((v102 - 3) < 0xFFFFFFFE)
        {
          int v29 = v110;
          if (v102 == 3) {
            *((void *)v111 + 1) = 0;
          }
          goto LABEL_73;
        }
        unint64_t v104 = (unint64_t)(v105 + 8);
      }
      else
      {
        int v29 = v110;
        if ((v111[1] & 0x7F) != 2 && !*((_DWORD *)v111 + 3)) {
          goto LABEL_73;
        }
        uint64_t v103 = *((void *)v111 + 2);
        if ((v103 & 4) == 0) {
          goto LABEL_73;
        }
        unint64_t v104 = v103 & 0xFFFFFFFFFFFFFFF8;
        if (!v104) {
          goto LABEL_73;
        }
      }
      *(void *)&long long v113 = &v111;
      sub_1CC5FA668(v104 + 16, &v113);
      int v29 = v110;
LABEL_73:
      uint64_t v50 = *(void *)(v44 + 40);
      *((void *)v49 + 3) = v50;
      uint64_t v51 = *(void *)(v50 + 32);
      uint64_t v52 = *((unsigned int *)v49 + 10);
      if (v52)
      {
        uint64_t v88 = *((void *)v49 + 4);
        uint64_t v89 = *(void *)(v51 + 40);
        uint64_t v90 = 32 * v52;
        do
        {
          if (!*(unsigned char *)v88)
          {
            uint64_t v91 = *(unsigned int *)(v88 + 4);
            if ((int)v91 >= 0) {
              int v92 = (uint64_t *)(*(void *)(v89 + 272) + 8 * v91);
            }
            else {
              int v92 = (uint64_t *)(*(void *)(v89 + 24) + 16 * (v91 & 0x7FFFFFFF) + 8);
            }
            uint64_t v93 = *v92;
            if (*v92)
            {
              uint64_t v94 = *(void *)(v93 + 16);
              *(void *)(v93 + 16) = v88;
              *(void *)(v88 + 16) = v94;
              if (*(unsigned char *)(v88 + 3))
              {
                *(void *)(v88 + 24) = v93;
              }
              else
              {
                *(void *)(v88 + 24) = 0;
                int v92 = (uint64_t *)(v94 + 24);
              }
            }
            else
            {
              *(void *)(v88 + 16) = v88;
              *(void *)(v88 + 24) = 0;
            }
            *int v92 = v88;
          }
          v88 += 32;
          v90 -= 32;
        }
        while (v90);
      }
      uint64_t v53 = *(void *)(v51 + 728);
      if (v53) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v53 + 24))(v53, v49);
      }
      unint64_t v54 = *v45 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v49 = v54 | *(void *)v49 & 7;
      *((void *)v49 + 1) = v45;
      *(void *)(v54 + 8) = v49;
      *uint64_t v45 = *v45 & 7 | (unint64_t)v49;
      *((void *)&v113 + 1) = 0;
      long long v114 = 0uLL;
      LODWORD(v113) = 0x1000000;
      DWORD1(v113) = v7;
      llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v113);
      LODWORD(v113) = 1;
      *((void *)&v113 + 1) = 0;
      *(void *)&long long v114 = 0;
      llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v113);
      uint64_t v111 = (unsigned __int8 *)v47;
      uint64_t v112 = v49;
      if (v29 != 27)
      {
        LODWORD(v113) = 1;
        *((void *)&v113 + 1) = 0;
        *(void *)&long long v114 = 0;
        llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v113);
      }
      char v55 = 0;
      uint64_t v56 = 0;
      do
      {
        char v57 = v55;
        uint64_t v58 = (&v120)[v56];
        if (v58)
        {
          uint64_t v59 = (unint64_t *)(v58 + 24);
          if (*((_DWORD *)v58 + 8) >= 0x41u) {
            uint64_t v59 = (unint64_t *)*v59;
          }
          unint64_t v60 = *v59;
          if (v60 < 0x10000) {
            v60 |= 0x100000000uLL;
          }
          uint64_t v62 = (llvm::MachineFunction *)v111;
          int v61 = v112;
          LODWORD(v113) = 1;
          *((void *)&v113 + 1) = 0;
          *(void *)&long long v114 = v60;
        }
        else
        {
          if ((sub_1CB8843D8((uint64_t)a1, v119[v56], 0, (llvm::MachineFunction **)&v111, 0) & 1) == 0)
          {
            int v63 = *((_DWORD *)&v119[-1] + v56);
            *((void *)&v113 + 1) = 0;
            LODWORD(v113) = 0;
            DWORD1(v113) = v63;
            long long v114 = 0uLL;
            llvm::MachineInstr::addOperand(v112, (llvm::MachineFunction *)v111, (const llvm::MachineOperand *)&v113);
          }
          uint64_t v62 = (llvm::MachineFunction *)v111;
          int v61 = v112;
          LODWORD(v113) = 1;
          *((void *)&v113 + 1) = 0;
          *(void *)&long long v114 = 0;
        }
        llvm::MachineInstr::addOperand(v61, v62, (const llvm::MachineOperand *)&v113);
        char v55 = 1;
        uint64_t v56 = 1;
      }
      while ((v57 & 1) == 0);
      if (v29 != 27)
      {
        LODWORD(v113) = 1;
        *((void *)&v113 + 1) = 0;
        *(void *)&long long v114 = 0;
        llvm::MachineInstr::addOperand(v112, (llvm::MachineFunction *)v111, (const llvm::MachineOperand *)&v113);
      }
      uint64_t v7 = 1;
      LODWORD(v113) = 1;
      *((void *)&v113 + 1) = 0;
      *(void *)&long long v114 = 0;
      llvm::MachineInstr::addOperand(v112, (llvm::MachineFunction *)v111, (const llvm::MachineOperand *)&v113);
      uint64_t v65 = v111;
      int v64 = v112;
      goto LABEL_92;
    }
    return 0;
  }
  return v7;
}

uint64_t sub_1CB891AF8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  v216[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a2;
  if (*(_DWORD *)(*(void *)a2 + 8) != 13) {
    return v2;
  }
  if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(vdupq_n_s32(*(_DWORD *)(*(void *)a2 + 8) >> 8), (int32x4_t)xmmword_1CD91CB30), (int8x16_t)xmmword_1CD91C130)) & 0xF) == 0)return v2; {
  int v7 = *(unsigned __int8 *)(a1[32] + 280);
  }
  uint64_t v2 = sub_1CD789230(a1, (uint64_t)a2);
  if (!v2) {
    return v2;
  }
  int v8 = a2[5];
  if ((v8 & 0x40000000) != 0) {
    BOOL v9 = (void *)*((void *)a2 - 1);
  }
  else {
    BOOL v9 = &a2[-8 * (v8 & 0x7FFFFFF)];
  }
  int v10 = *(unsigned __int8 *)(*v9 + 16) - 67 < 2;
  int v11 = *(unsigned __int8 *)(v9[4] + 16);
  int v12 = v11 == 67 || v11 == 68;
  if (v10 == v12 || *(_DWORD *)(v3 + 8) != 8205)
  {
    if (sub_1CB884E4C(a1, (uint64_t *)a2, (const llvm::APInt *)v2)) {
      return 1;
    }
    if (*(_DWORD *)(v3 + 8) != 8205) {
      return 0;
    }
  }
  int v14 = a2[5];
  int v202 = v2;
  int v203 = v7;
  uint64_t v15 = (v14 & 0x40000000) != 0 ? (uint64_t *)*((void *)a2 - 1) : (uint64_t *)&a2[-8 * (v14 & 0x7FFFFFF)];
  uint64_t v16 = 0;
  unsigned int v17 = 0;
  uint64_t v18 = *v15;
  uint64_t v19 = v15[4];
  v216[0] = v18;
  v216[1] = v19;
  v215[0] = 0;
  v215[1] = 0;
  v214[0] = 0;
  v214[1] = 0;
  v212[1] = v3;
  uint64_t v213 = 0;
  uint64_t v211 = 0;
  v212[0] = v3;
  char v20 = 1;
  uint64_t v210 = 0;
  do
  {
    char v21 = v20;
    uint64_t v22 = v216[v16];
    if (v22) {
      BOOL v23 = *(unsigned char *)(v22 + 16) == 16;
    }
    else {
      BOOL v23 = 0;
    }
    if (v23)
    {
      v17 |= 1 << v16;
      v215[v16] = v22;
    }
    else
    {
      uint64_t v24 = &v214[v16];
      *uint64_t v24 = v22;
      int v25 = sub_1CD3CE8A4(a1, v24, (_DWORD *)&v212[-1] + v16, (llvm::Type **)&v212[v16], *((void *)a2 + 5), 1, 0);
      *((_DWORD *)&v214[-1] + v16) = v25;
      if (!v25) {
        return 0;
      }
      *((_DWORD *)&v210 + v16) = sub_1CB85F248((uint64_t)a1, v25);
    }
    char v20 = 0;
    uint64_t v16 = 1;
  }
  while ((v21 & 1) != 0);
  if (v17 > 2) {
    return 0;
  }
  uint64_t v26 = a1[6];
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v26, "", 0);
  *(void *)(*(void *)(v26 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A43C8;
  uint64_t v28 = *(void *)(v26 + 8);
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  uint64_t v29 = a1[4];
  uint64_t v30 = *(void *)(v29 + 640);
  int v31 = *(unint64_t **)(v29 + 648);
  uint64_t v32 = *(void *)(a1[12] + 8) + 48 * word_1CD91D140[3 * v7 + v17];
  int v33 = *(llvm::MachineFunction **)(v30 + 32);
  int v34 = (unsigned __int8 *)a1[9];
  int v206 = v34;
  if (v34) {
    llvm::MetadataTracking::track((uint64_t)&v206, v34, 2);
  }
  BOOL v35 = llvm::MachineFunction::CreateMachineInstr(v33, v32, &v206, 0);
  if (v206)
  {
    int v180 = *v206;
    if ((v180 - 4) > 0x1E)
    {
      if ((v180 - 3) >= 0xFFFFFFFE) {
        int v195 = v206;
      }
      else {
        int v195 = 0;
      }
      if ((v180 - 3) < 0xFFFFFFFE)
      {
        if (v180 == 3) {
          *((void *)v206 + 1) = 0;
        }
        goto LABEL_38;
      }
      unint64_t v182 = (unint64_t)(v195 + 8);
    }
    else
    {
      if ((v206[1] & 0x7F) != 2 && !*((_DWORD *)v206 + 3)) {
        goto LABEL_38;
      }
      uint64_t v181 = *((void *)v206 + 2);
      if ((v181 & 4) == 0) {
        goto LABEL_38;
      }
      unint64_t v182 = v181 & 0xFFFFFFFFFFFFFFF8;
      if (!v182) {
        goto LABEL_38;
      }
    }
    *(void *)&long long v208 = &v206;
    sub_1CC5FA668(v182 + 16, &v208);
  }
LABEL_38:
  uint64_t v36 = *(void *)(v30 + 40);
  *((void *)v35 + 3) = v36;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *((unsigned int *)v35 + 10);
  if (v38)
  {
    uint64_t v145 = *((void *)v35 + 4);
    uint64_t v146 = *(void *)(v37 + 40);
    uint64_t v147 = 32 * v38;
    do
    {
      if (!*(unsigned char *)v145)
      {
        uint64_t v148 = *(unsigned int *)(v145 + 4);
        if ((int)v148 >= 0) {
          unsigned int v149 = (uint64_t *)(*(void *)(v146 + 272) + 8 * v148);
        }
        else {
          unsigned int v149 = (uint64_t *)(*(void *)(v146 + 24) + 16 * (v148 & 0x7FFFFFFF) + 8);
        }
        uint64_t v150 = *v149;
        if (*v149)
        {
          uint64_t v151 = *(void *)(v150 + 16);
          *(void *)(v150 + 16) = v145;
          *(void *)(v145 + 16) = v151;
          if (*(unsigned char *)(v145 + 3))
          {
            *(void *)(v145 + 24) = v150;
          }
          else
          {
            *(void *)(v145 + 24) = 0;
            unsigned int v149 = (uint64_t *)(v151 + 24);
          }
        }
        else
        {
          *(void *)(v145 + 16) = v145;
          *(void *)(v145 + 24) = 0;
        }
        *unsigned int v149 = v145;
      }
      v145 += 32;
      v147 -= 32;
    }
    while (v147);
  }
  uint64_t v39 = *(void *)(v37 + 728);
  if (v39) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, v35);
  }
  unint64_t v40 = *v31 & 0xFFFFFFFFFFFFFFF8;
  *(void *)BOOL v35 = v40 | *(void *)v35 & 7;
  *((void *)v35 + 1) = v31;
  *(void *)(v40 + 8) = v35;
  *int v31 = *v31 & 7 | (unint64_t)v35;
  *((void *)&v208 + 1) = 0;
  long long v209 = 0uLL;
  int v201 = IncompleteVirtualRegister;
  LODWORD(v208) = 0x1000000;
  DWORD1(v208) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v208);
  int v206 = (unsigned __int8 *)v33;
  uint64_t v207 = v35;
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 0;
  llvm::MachineInstr::addOperand(v35, v33, (const llvm::MachineOperand *)&v208);
  uint64_t v41 = 0;
  char v42 = 1;
  do
  {
    char v43 = v42;
    if ((v17 >> v41))
    {
      uint64_t v44 = v215[v41];
      uint64_t v45 = (unsigned __int16 *)(v44 + 24);
      if (*(_DWORD *)(v44 + 32) >= 0x41u) {
        uint64_t v45 = *(unsigned __int16 **)v45;
      }
      uint64_t v46 = *v45 | 0x100000000;
    }
    else
    {
      int v47 = *((_DWORD *)&v210 + v41);
      if ((sub_1CB8843D8((uint64_t)a1, (unsigned char *)v214[v41], 0, (llvm::MachineFunction **)&v206, v47) & 1) == 0)
      {
        int v48 = *((_DWORD *)&v214[-1] + v41);
        *((void *)&v208 + 1) = 0;
        long long v209 = 0uLL;
        LODWORD(v208) = (v47 & 0xFFF) << 8;
        DWORD1(v208) = v48;
        llvm::MachineInstr::addOperand(v207, (llvm::MachineFunction *)v206, (const llvm::MachineOperand *)&v208);
      }
      uint64_t v46 = *((unsigned int *)&v212[-1] + v41);
    }
    LODWORD(v208) = 1;
    *((void *)&v208 + 1) = 0;
    *(void *)&long long v209 = v46;
    llvm::MachineInstr::addOperand(v207, (llvm::MachineFunction *)v206, (const llvm::MachineOperand *)&v208);
    char v42 = 0;
    uint64_t v41 = 1;
  }
  while ((v43 & 1) != 0);
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 0;
  llvm::MachineInstr::addOperand(v207, (llvm::MachineFunction *)v206, (const llvm::MachineOperand *)&v208);
  long long v208 = 0u;
  long long v209 = 0u;
  llvm::MachineInstr::addOperand(v207, (llvm::MachineFunction *)v206, (const llvm::MachineOperand *)&v208);
  uint64_t v49 = a1[6];
  int v50 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v49, "", 0);
  *(void *)(*(void *)(v49 + 24) + 16 * (v50 & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v51 = *(void *)(v49 + 8);
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 24))(v51);
  }
  uint64_t v52 = 0;
  char v53 = 1;
  int v200 = v50;
  do
  {
    char v54 = v53;
    if ((v17 >> v52))
    {
      uint64_t v55 = v215[v52];
      uint64_t v56 = (unint64_t *)(v55 + 24);
      if (*(_DWORD *)(v55 + 32) >= 0x41u) {
        uint64_t v56 = (unint64_t *)*v56;
      }
      unint64_t v57 = *v56;
      if (v54) {
        uint64_t v58 = 4294901760;
      }
      else {
        uint64_t v58 = 0xFFFFLL;
      }
      if ((v57 & v58) == 0) {
        goto LABEL_86;
      }
    }
    else
    {
      if ((v53 & 1) == 0) {
        break;
      }
      if (*(_DWORD *)(v212[0] + 8) == 4109)
      {
LABEL_86:
        uint64_t v84 = a1[4];
        uint64_t v85 = *(void *)(v84 + 640);
        uint64_t v86 = *(unint64_t **)(v84 + 648);
        uint64_t v87 = *(void *)(a1[12] + 8) + 912;
        uint64_t v88 = *(llvm::MachineFunction **)(v85 + 32);
        uint64_t v89 = (unsigned __int8 *)a1[9];
        BOOL v204 = v89;
        if (v89) {
          llvm::MetadataTracking::track((uint64_t)&v204, v89, 2);
        }
        uint64_t v90 = llvm::MachineFunction::CreateMachineInstr(v88, v87, &v204, 0);
        if (!v204) {
          goto LABEL_89;
        }
        int v192 = *v204;
        if ((v192 - 4) > 0x1E)
        {
          if ((v192 - 3) >= 0xFFFFFFFE) {
            unint64_t v199 = v204;
          }
          else {
            unint64_t v199 = 0;
          }
          if ((v192 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v194 = (unint64_t)(v199 + 8);
            goto LABEL_264;
          }
          if (v192 == 3) {
            *((void *)v204 + 1) = 0;
          }
        }
        else if ((v204[1] & 0x7F) == 2 || *((_DWORD *)v204 + 3))
        {
          uint64_t v193 = *((void *)v204 + 2);
          if ((v193 & 4) != 0)
          {
            unint64_t v194 = v193 & 0xFFFFFFFFFFFFFFF8;
            if (v194)
            {
LABEL_264:
              *(void *)&long long v208 = &v204;
              sub_1CC5FA668(v194 + 16, &v208);
            }
          }
        }
LABEL_89:
        uint64_t v91 = *(void *)(v85 + 40);
        *((void *)v90 + 3) = v91;
        uint64_t v92 = *(void *)(v91 + 32);
        uint64_t v93 = *((unsigned int *)v90 + 10);
        if (v93)
        {
          uint64_t v173 = *((void *)v90 + 4);
          uint64_t v174 = *(void *)(v92 + 40);
          uint64_t v175 = 32 * v93;
          do
          {
            if (!*(unsigned char *)v173)
            {
              uint64_t v176 = *(unsigned int *)(v173 + 4);
              if ((int)v176 >= 0) {
                uint64_t v177 = (uint64_t *)(*(void *)(v174 + 272) + 8 * v176);
              }
              else {
                uint64_t v177 = (uint64_t *)(*(void *)(v174 + 24) + 16 * (v176 & 0x7FFFFFFF) + 8);
              }
              uint64_t v178 = *v177;
              if (*v177)
              {
                uint64_t v179 = *(void *)(v178 + 16);
                *(void *)(v178 + 16) = v173;
                *(void *)(v173 + 16) = v179;
                if (*(unsigned char *)(v173 + 3))
                {
                  *(void *)(v173 + 24) = v178;
                }
                else
                {
                  *(void *)(v173 + 24) = 0;
                  uint64_t v177 = (uint64_t *)(v179 + 24);
                }
              }
              else
              {
                *(void *)(v173 + 16) = v173;
                *(void *)(v173 + 24) = 0;
              }
              *uint64_t v177 = v173;
            }
            v173 += 32;
            v175 -= 32;
          }
          while (v175);
        }
        uint64_t v94 = *(void *)(v92 + 728);
        if (v94) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v94 + 24))(v94, v90);
        }
        unint64_t v95 = *v86 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v90 = v95 | *(void *)v90 & 7;
        *((void *)v90 + 1) = v86;
        *(void *)(v95 + 8) = v90;
        *uint64_t v86 = *v86 & 7 | (unint64_t)v90;
        *((void *)&v208 + 1) = 0;
        long long v209 = 0uLL;
        LODWORD(v208) = 0x1000000;
        DWORD1(v208) = v50;
        llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v208);
        *((void *)&v208 + 1) = 0;
        long long v209 = 0uLL;
        int v83 = v201;
        LODWORD(v208) = 512;
        DWORD1(v208) = v201;
        llvm::MachineInstr::addOperand(v90, v88, (const llvm::MachineOperand *)&v208);
        goto LABEL_93;
      }
    }
    char v53 = 0;
    uint64_t v52 = 1;
  }
  while ((v54 & 1) != 0);
  uint64_t v59 = a1[4];
  uint64_t v60 = *(void *)(v59 + 640);
  int v61 = *(unint64_t **)(v59 + 648);
  uint64_t v62 = *(void *)(a1[12] + 8) + 48 * word_1CD91D14C[3 * v203 + v17];
  int v63 = *(llvm::MachineFunction **)(v60 + 32);
  int v64 = (unsigned __int8 *)a1[9];
  BOOL v204 = v64;
  if (v64) {
    llvm::MetadataTracking::track((uint64_t)&v204, v64, 2);
  }
  uint64_t v65 = llvm::MachineFunction::CreateMachineInstr(v63, v62, &v204, 0);
  if (v204)
  {
    int v186 = *v204;
    if ((v186 - 4) > 0x1E)
    {
      if ((v186 - 3) >= 0xFFFFFFFE) {
        int v197 = v204;
      }
      else {
        int v197 = 0;
      }
      if ((v186 - 3) < 0xFFFFFFFE)
      {
        if (v186 == 3) {
          *((void *)v204 + 1) = 0;
        }
        goto LABEL_67;
      }
      unint64_t v188 = (unint64_t)(v197 + 8);
    }
    else
    {
      if ((v204[1] & 0x7F) != 2 && !*((_DWORD *)v204 + 3)) {
        goto LABEL_67;
      }
      uint64_t v187 = *((void *)v204 + 2);
      if ((v187 & 4) == 0) {
        goto LABEL_67;
      }
      unint64_t v188 = v187 & 0xFFFFFFFFFFFFFFF8;
      if (!v188) {
        goto LABEL_67;
      }
    }
    *(void *)&long long v208 = &v204;
    sub_1CC5FA668(v188 + 16, &v208);
  }
LABEL_67:
  uint64_t v66 = *(void *)(v60 + 40);
  *((void *)v65 + 3) = v66;
  uint64_t v67 = *(void *)(v66 + 32);
  uint64_t v68 = *((unsigned int *)v65 + 10);
  if (v68)
  {
    uint64_t v159 = *((void *)v65 + 4);
    uint64_t v160 = *(void *)(v67 + 40);
    uint64_t v161 = 32 * v68;
    do
    {
      if (!*(unsigned char *)v159)
      {
        uint64_t v162 = *(unsigned int *)(v159 + 4);
        if ((int)v162 >= 0) {
          long long v163 = (uint64_t *)(*(void *)(v160 + 272) + 8 * v162);
        }
        else {
          long long v163 = (uint64_t *)(*(void *)(v160 + 24) + 16 * (v162 & 0x7FFFFFFF) + 8);
        }
        uint64_t v164 = *v163;
        if (*v163)
        {
          uint64_t v165 = *(void *)(v164 + 16);
          *(void *)(v164 + 16) = v159;
          *(void *)(v159 + 16) = v165;
          if (*(unsigned char *)(v159 + 3))
          {
            *(void *)(v159 + 24) = v164;
          }
          else
          {
            *(void *)(v159 + 24) = 0;
            long long v163 = (uint64_t *)(v165 + 24);
          }
        }
        else
        {
          *(void *)(v159 + 16) = v159;
          *(void *)(v159 + 24) = 0;
        }
        *long long v163 = v159;
      }
      v159 += 32;
      v161 -= 32;
    }
    while (v161);
  }
  uint64_t v69 = *(void *)(v67 + 728);
  if (v69) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v69 + 24))(v69, v65);
  }
  unint64_t v70 = *v61 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v65 = v70 | *(void *)v65 & 7;
  *((void *)v65 + 1) = v61;
  *(void *)(v70 + 8) = v65;
  unint64_t *v61 = *v61 & 7 | (unint64_t)v65;
  *((void *)&v208 + 1) = 0;
  long long v209 = 0uLL;
  LODWORD(v208) = 0x1000000;
  DWORD1(v208) = v50;
  llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v208);
  BOOL v204 = (unsigned __int8 *)v63;
  int v205 = v65;
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 0;
  llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v208);
  uint64_t v71 = 0;
  int v72 = HIDWORD(v210);
  char v73 = 1;
  do
  {
    char v74 = v73;
    if (v73) {
      int v75 = 2;
    }
    else {
      int v75 = v72;
    }
    if ((v17 >> v71))
    {
      char v76 = 16;
      if ((v74 & 1) == 0) {
        char v76 = 0;
      }
      uint64_t v77 = v215[v71];
      uint64_t v78 = (void *)(v77 + 24);
      if (*(_DWORD *)(v77 + 32) >= 0x41u) {
        uint64_t v78 = (void *)*v78;
      }
      uint64_t v79 = (unsigned __int16)(*v78 >> v76) | 0x100000000;
      uint64_t v81 = (llvm::MachineFunction *)v204;
      uint64_t v80 = v205;
      LODWORD(v208) = 1;
      *((void *)&v208 + 1) = 0;
      *(void *)&long long v209 = v79;
    }
    else
    {
      if ((sub_1CB8843D8((uint64_t)a1, (unsigned char *)v214[v71], 0, (llvm::MachineFunction **)&v204, v75) & 1) == 0)
      {
        int v82 = *((_DWORD *)&v214[-1] + v71);
        *((void *)&v208 + 1) = 0;
        long long v209 = 0uLL;
        LODWORD(v208) = (v75 & 0xFFF) << 8;
        DWORD1(v208) = v82;
        llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
      }
      uint64_t v81 = (llvm::MachineFunction *)v204;
      uint64_t v80 = v205;
      LODWORD(v208) = 1;
      *((void *)&v208 + 1) = 0;
      *(void *)&long long v209 = 0;
    }
    llvm::MachineInstr::addOperand(v80, v81, (const llvm::MachineOperand *)&v208);
    char v73 = 0;
    uint64_t v71 = 1;
  }
  while ((v74 & 1) != 0);
  *((void *)&v208 + 1) = 0;
  long long v209 = 0uLL;
  int v83 = v201;
  LODWORD(v208) = 512;
  DWORD1(v208) = v201;
  llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 0;
  llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 0;
  llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
  long long v208 = 0u;
  long long v209 = 0u;
  llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
LABEL_93:
  uint64_t v96 = 0;
  char v97 = 1;
  do
  {
    while (1)
    {
      uint64_t v98 = v96;
      char v99 = v97;
      if (((v17 >> v96) & 1) == 0) {
        break;
      }
      uint64_t v100 = v215[v96];
      uint64_t v101 = (unint64_t *)(v100 + 24);
      if (*(_DWORD *)(v100 + 32) >= 0x41u) {
        uint64_t v101 = (unint64_t *)*v101;
      }
      unint64_t v102 = *v101;
      if (v99) {
        uint64_t v103 = 0xFFFFLL;
      }
      else {
        uint64_t v103 = 4294901760;
      }
      if ((v102 & v103) == 0) {
        goto LABEL_105;
      }
      char v97 = 0;
      uint64_t v96 = 1;
      if ((v99 & 1) == 0) {
        goto LABEL_106;
      }
    }
    char v97 = 0;
    uint64_t v96 = 1;
  }
  while ((v99 & 1) != 0);
  if (*(_DWORD *)(v212[v98] + 8) == 4109)
  {
LABEL_105:
    int v104 = v50;
    goto LABEL_129;
  }
LABEL_106:
  uint64_t v105 = a1[6];
  int v106 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v105, "", 0);
  *(void *)(*(void *)(v105 + 24) + 16 * (v106 & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v107 = *(void *)(v105 + 8);
  if (v107) {
    (*(void (**)(uint64_t))(*(void *)v107 + 24))(v107);
  }
  uint64_t v108 = a1[4];
  uint64_t v109 = *(void *)(v108 + 640);
  int v110 = *(unint64_t **)(v108 + 648);
  uint64_t v111 = *(void *)(a1[12] + 8) + 48 * word_1CD91D14C[3 * v203 + v17];
  uint64_t v112 = *(llvm::MachineFunction **)(v109 + 32);
  long long v113 = (unsigned __int8 *)a1[9];
  BOOL v204 = v113;
  if (v113) {
    llvm::MetadataTracking::track((uint64_t)&v204, v113, 2);
  }
  long long v114 = llvm::MachineFunction::CreateMachineInstr(v112, v111, &v204, 0);
  if (v204)
  {
    int v189 = *v204;
    if ((v189 - 4) > 0x1E)
    {
      if ((v189 - 3) >= 0xFFFFFFFE) {
        int64_t v198 = v204;
      }
      else {
        int64_t v198 = 0;
      }
      if ((v189 - 3) < 0xFFFFFFFE)
      {
        if (v189 == 3) {
          *((void *)v204 + 1) = 0;
        }
        goto LABEL_111;
      }
      unint64_t v191 = (unint64_t)(v198 + 8);
    }
    else
    {
      if ((v204[1] & 0x7F) != 2 && !*((_DWORD *)v204 + 3)) {
        goto LABEL_111;
      }
      uint64_t v190 = *((void *)v204 + 2);
      if ((v190 & 4) == 0) {
        goto LABEL_111;
      }
      unint64_t v191 = v190 & 0xFFFFFFFFFFFFFFF8;
      if (!v191) {
        goto LABEL_111;
      }
    }
    *(void *)&long long v208 = &v204;
    sub_1CC5FA668(v191 + 16, &v208);
  }
LABEL_111:
  uint64_t v115 = *(void *)(v109 + 40);
  *((void *)v114 + 3) = v115;
  uint64_t v116 = *(void *)(v115 + 32);
  uint64_t v117 = *((unsigned int *)v114 + 10);
  if (v117)
  {
    uint64_t v166 = *((void *)v114 + 4);
    uint64_t v167 = *(void *)(v116 + 40);
    uint64_t v168 = 32 * v117;
    do
    {
      if (!*(unsigned char *)v166)
      {
        uint64_t v169 = *(unsigned int *)(v166 + 4);
        if ((int)v169 >= 0) {
          unsigned int v170 = (uint64_t *)(*(void *)(v167 + 272) + 8 * v169);
        }
        else {
          unsigned int v170 = (uint64_t *)(*(void *)(v167 + 24) + 16 * (v169 & 0x7FFFFFFF) + 8);
        }
        uint64_t v171 = *v170;
        if (*v170)
        {
          uint64_t v172 = *(void *)(v171 + 16);
          *(void *)(v171 + 16) = v166;
          *(void *)(v166 + 16) = v172;
          if (*(unsigned char *)(v166 + 3))
          {
            *(void *)(v166 + 24) = v171;
          }
          else
          {
            *(void *)(v166 + 24) = 0;
            unsigned int v170 = (uint64_t *)(v172 + 24);
          }
        }
        else
        {
          *(void *)(v166 + 16) = v166;
          *(void *)(v166 + 24) = 0;
        }
        *unsigned int v170 = v166;
      }
      v166 += 32;
      v168 -= 32;
    }
    while (v168);
  }
  uint64_t v118 = *(void *)(v116 + 728);
  if (v118) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v118 + 24))(v118, v114);
  }
  unint64_t v119 = *v110 & 0xFFFFFFFFFFFFFFF8;
  *(void *)long long v114 = v119 | *(void *)v114 & 7;
  *((void *)v114 + 1) = v110;
  *(void *)(v119 + 8) = v114;
  *int v110 = *v110 & 7 | (unint64_t)v114;
  *((void *)&v208 + 1) = 0;
  long long v209 = 0uLL;
  LODWORD(v208) = 0x1000000;
  DWORD1(v208) = v106;
  llvm::MachineInstr::addOperand(v114, v112, (const llvm::MachineOperand *)&v208);
  BOOL v204 = (unsigned __int8 *)v112;
  int v205 = v114;
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 0;
  llvm::MachineInstr::addOperand(v114, v112, (const llvm::MachineOperand *)&v208);
  uint64_t v120 = 0;
  int v121 = v210;
  char v122 = 1;
  do
  {
    char v123 = v122;
    if (v122) {
      int v124 = v121;
    }
    else {
      int v124 = 2;
    }
    if ((v17 >> v120))
    {
      char v125 = 16;
      if (v123) {
        char v125 = 0;
      }
      uint64_t v126 = v215[v120];
      uint64_t v127 = (void *)(v126 + 24);
      if (*(_DWORD *)(v126 + 32) >= 0x41u) {
        uint64_t v127 = (void *)*v127;
      }
      uint64_t v128 = (unsigned __int16)(*v127 >> v125) | 0x100000000;
      uint64_t v130 = (llvm::MachineFunction *)v204;
      uint64_t v129 = v205;
      LODWORD(v208) = 1;
      *((void *)&v208 + 1) = 0;
      *(void *)&long long v209 = v128;
    }
    else
    {
      if ((sub_1CB8843D8((uint64_t)a1, (unsigned char *)v214[v120], 0, (llvm::MachineFunction **)&v204, v124) & 1) == 0)
      {
        int v131 = *((_DWORD *)&v214[-1] + v120);
        *((void *)&v208 + 1) = 0;
        long long v209 = 0uLL;
        LODWORD(v208) = (v124 & 0xFFF) << 8;
        DWORD1(v208) = v131;
        llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
      }
      uint64_t v130 = (llvm::MachineFunction *)v204;
      uint64_t v129 = v205;
      LODWORD(v208) = 1;
      *((void *)&v208 + 1) = 0;
      *(void *)&long long v209 = 0;
    }
    llvm::MachineInstr::addOperand(v129, v130, (const llvm::MachineOperand *)&v208);
    char v122 = 0;
    uint64_t v120 = 1;
  }
  while ((v123 & 1) != 0);
  *((void *)&v208 + 1) = 0;
  long long v209 = 0uLL;
  LODWORD(v208) = 0;
  DWORD1(v208) = v200;
  llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 0;
  llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 0;
  llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
  long long v208 = 0u;
  long long v209 = 0u;
  llvm::MachineInstr::addOperand(v205, (llvm::MachineFunction *)v204, (const llvm::MachineOperand *)&v208);
  int v83 = v201;
  int v104 = v106;
LABEL_129:
  int v132 = v202;
  sub_1CB85F248((uint64_t)a1, v202);
  uint64_t v133 = a1[4];
  uint64_t v134 = *(void *)(v133 + 640);
  int v135 = *(unint64_t **)(v133 + 648);
  uint64_t v136 = *(void *)(a1[12] + 8) + 864;
  unint64_t v137 = *(llvm::MachineFunction **)(v134 + 32);
  int v138 = (unsigned __int8 *)a1[9];
  BOOL v204 = v138;
  if (v138) {
    llvm::MetadataTracking::track((uint64_t)&v204, v138, 2);
  }
  uint64_t v139 = llvm::MachineFunction::CreateMachineInstr(v137, v136, &v204, 0);
  if (!v204) {
    goto LABEL_132;
  }
  int v183 = *v204;
  if ((v183 - 4) > 0x1E)
  {
    if ((v183 - 3) >= 0xFFFFFFFE) {
      unint64_t v196 = v204;
    }
    else {
      unint64_t v196 = 0;
    }
    if ((v183 - 3) < 0xFFFFFFFE)
    {
      int v83 = v201;
      int v132 = v202;
      if (v183 == 3) {
        *((void *)v204 + 1) = 0;
      }
      goto LABEL_132;
    }
    unint64_t v185 = (unint64_t)(v196 + 8);
  }
  else
  {
    int v83 = v201;
    int v132 = v202;
    if ((v204[1] & 0x7F) != 2 && !*((_DWORD *)v204 + 3)) {
      goto LABEL_132;
    }
    uint64_t v184 = *((void *)v204 + 2);
    if ((v184 & 4) == 0) {
      goto LABEL_132;
    }
    unint64_t v185 = v184 & 0xFFFFFFFFFFFFFFF8;
    if (!v185) {
      goto LABEL_132;
    }
  }
  *(void *)&long long v208 = &v204;
  sub_1CC5FA668(v185 + 16, &v208);
  int v83 = v201;
  int v132 = v202;
LABEL_132:
  uint64_t v140 = *(void *)(v134 + 40);
  *((void *)v139 + 3) = v140;
  uint64_t v141 = *(void *)(v140 + 32);
  uint64_t v142 = *((unsigned int *)v139 + 10);
  if (v142)
  {
    uint64_t v152 = *((void *)v139 + 4);
    uint64_t v153 = *(void *)(v141 + 40);
    uint64_t v154 = 32 * v142;
    do
    {
      if (!*(unsigned char *)v152)
      {
        uint64_t v155 = *(unsigned int *)(v152 + 4);
        if ((int)v155 >= 0) {
          uint64_t v156 = (uint64_t *)(*(void *)(v153 + 272) + 8 * v155);
        }
        else {
          uint64_t v156 = (uint64_t *)(*(void *)(v153 + 24) + 16 * (v155 & 0x7FFFFFFF) + 8);
        }
        uint64_t v157 = *v156;
        if (*v156)
        {
          uint64_t v158 = *(void *)(v157 + 16);
          *(void *)(v157 + 16) = v152;
          *(void *)(v152 + 16) = v158;
          if (*(unsigned char *)(v152 + 3))
          {
            *(void *)(v152 + 24) = v157;
          }
          else
          {
            *(void *)(v152 + 24) = 0;
            uint64_t v156 = (uint64_t *)(v158 + 24);
          }
        }
        else
        {
          *(void *)(v152 + 16) = v152;
          *(void *)(v152 + 24) = 0;
        }
        *uint64_t v156 = v152;
      }
      v152 += 32;
      v154 -= 32;
    }
    while (v154);
  }
  uint64_t v143 = *(void *)(v141 + 728);
  if (v143) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v143 + 24))(v143, v139);
  }
  unint64_t v144 = *v135 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v139 = v144 | *(void *)v139 & 7;
  *((void *)v139 + 1) = v135;
  *(void *)(v144 + 8) = v139;
  *int v135 = *v135 & 7 | (unint64_t)v139;
  *((void *)&v208 + 1) = 0;
  long long v209 = 0uLL;
  LODWORD(v208) = 0x1000000;
  DWORD1(v208) = v132;
  llvm::MachineInstr::addOperand(v139, v137, (const llvm::MachineOperand *)&v208);
  *((void *)&v208 + 1) = 0;
  long long v209 = 0uLL;
  LODWORD(v208) = 256;
  DWORD1(v208) = v83;
  llvm::MachineInstr::addOperand(v139, v137, (const llvm::MachineOperand *)&v208);
  uint64_t v2 = 1;
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 1;
  llvm::MachineInstr::addOperand(v139, v137, (const llvm::MachineOperand *)&v208);
  *((void *)&v208 + 1) = 0;
  long long v209 = 0uLL;
  LODWORD(v208) = 0;
  DWORD1(v208) = v104;
  llvm::MachineInstr::addOperand(v139, v137, (const llvm::MachineOperand *)&v208);
  LODWORD(v208) = 1;
  *((void *)&v208 + 1) = 0;
  *(void *)&long long v209 = 2;
  llvm::MachineInstr::addOperand(v139, v137, (const llvm::MachineOperand *)&v208);
  return v2;
}